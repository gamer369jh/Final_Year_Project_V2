
tm_cooperative_scheduling_test.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001ac  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00009134  080001b0  080001b0  000101b0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000002dc  080092e4  080092e4  000192e4  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  080095c0  080095c0  00020074  2**0
                  CONTENTS
  4 .ARM          00000008  080095c0  080095c0  000195c0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  080095c8  080095c8  00020074  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  080095c8  080095c8  000195c8  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  080095cc  080095cc  000195cc  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000074  20000000  080095d0  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .ccmram       00000000  10000000  10000000  00020074  2**0
                  CONTENTS
 10 .bss          00006958  20000074  20000074  00020074  2**2
                  ALLOC
 11 ._user_heap_stack 00000604  200069cc  200069cc  00020074  2**0
                  ALLOC
 12 .ARM.attributes 00000030  00000000  00000000  00020074  2**0
                  CONTENTS, READONLY
 13 .debug_info   00026ce2  00000000  00000000  000200a4  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 00005a9d  00000000  00000000  00046d86  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 00001dd0  00000000  00000000  0004c828  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_ranges 00001a88  00000000  00000000  0004e5f8  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  0002b8f0  00000000  00000000  00050080  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   00027ef0  00000000  00000000  0007b970  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    000f1bf7  00000000  00000000  000a3860  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .comment      00000050  00000000  00000000  00195457  2**0
                  CONTENTS, READONLY
 21 .debug_frame  00007e28  00000000  00000000  001954a8  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001b0 <__do_global_dtors_aux>:
 80001b0:	b510      	push	{r4, lr}
 80001b2:	4c05      	ldr	r4, [pc, #20]	; (80001c8 <__do_global_dtors_aux+0x18>)
 80001b4:	7823      	ldrb	r3, [r4, #0]
 80001b6:	b933      	cbnz	r3, 80001c6 <__do_global_dtors_aux+0x16>
 80001b8:	4b04      	ldr	r3, [pc, #16]	; (80001cc <__do_global_dtors_aux+0x1c>)
 80001ba:	b113      	cbz	r3, 80001c2 <__do_global_dtors_aux+0x12>
 80001bc:	4804      	ldr	r0, [pc, #16]	; (80001d0 <__do_global_dtors_aux+0x20>)
 80001be:	f3af 8000 	nop.w
 80001c2:	2301      	movs	r3, #1
 80001c4:	7023      	strb	r3, [r4, #0]
 80001c6:	bd10      	pop	{r4, pc}
 80001c8:	20000074 	.word	0x20000074
 80001cc:	00000000 	.word	0x00000000
 80001d0:	080092cc 	.word	0x080092cc

080001d4 <frame_dummy>:
 80001d4:	b508      	push	{r3, lr}
 80001d6:	4b03      	ldr	r3, [pc, #12]	; (80001e4 <frame_dummy+0x10>)
 80001d8:	b11b      	cbz	r3, 80001e2 <frame_dummy+0xe>
 80001da:	4903      	ldr	r1, [pc, #12]	; (80001e8 <frame_dummy+0x14>)
 80001dc:	4803      	ldr	r0, [pc, #12]	; (80001ec <frame_dummy+0x18>)
 80001de:	f3af 8000 	nop.w
 80001e2:	bd08      	pop	{r3, pc}
 80001e4:	00000000 	.word	0x00000000
 80001e8:	20000078 	.word	0x20000078
 80001ec:	080092cc 	.word	0x080092cc

080001f0 <_tx_initialize_low_level>:
    .thumb_func
_tx_initialize_low_level:
@
@    /* Disable interrupts during ThreadX initialization.  */
@
    CPSID   i
 80001f0:	b672      	cpsid	i
    STR     r1, [r0]                                @ Setup first unused memory pointer
#endif
@
@    /* Setup Vector Table Offset Register.  */
@
    MOV     r0, #0xE000E000                         @ Build address of NVIC registers
 80001f2:	f04f 20e0 	mov.w	r0, #3758153728	; 0xe000e000
    LDR     r1, =g_pfnVectors                           @ Pickup address of vector table
 80001f6:	4919      	ldr	r1, [pc, #100]	; (800025c <__tx_DBGHandler+0x4>)
    STR     r1, [r0, #0xD08]                        @ Set vector table address
 80001f8:	f8c0 1d08 	str.w	r1, [r0, #3336]	; 0xd08
@
@    /* Set system stack pointer from vector value.  */
@
    LDR     r0, =_tx_thread_system_stack_ptr        @ Build address of system stack pointer
 80001fc:	4818      	ldr	r0, [pc, #96]	; (8000260 <__tx_DBGHandler+0x8>)
    LDR     r1, =g_pfnVectors                           @ Pickup address of vector table
 80001fe:	4917      	ldr	r1, [pc, #92]	; (800025c <__tx_DBGHandler+0x4>)
    LDR     r1, [r1]                                @ Pickup reset stack pointer
 8000200:	6809      	ldr	r1, [r1, #0]
    STR     r1, [r0]                                @ Save system stack pointer
 8000202:	6001      	str	r1, [r0, #0]
@
@    /* Enable the cycle count register.  */
@
    LDR     r0, =0xE0001000                         @ Build address of DWT register
 8000204:	4817      	ldr	r0, [pc, #92]	; (8000264 <__tx_DBGHandler+0xc>)
    LDR     r1, [r0]                                @ Pickup the current value
 8000206:	6801      	ldr	r1, [r0, #0]
    ORR     r1, r1, #1                              @ Set the CYCCNTENA bit
 8000208:	f041 0101 	orr.w	r1, r1, #1
    STR     r1, [r0]                                @ Enable the cycle count register
 800020c:	6001      	str	r1, [r0, #0]
@
@    /* Configure SysTick for 100Hz clock, or 16384 cycles if no reference.  */
@
    MOV     r0, #0xE000E000                         @ Build address of NVIC registers
 800020e:	f04f 20e0 	mov.w	r0, #3758153728	; 0xe000e000
    LDR     r1, =SYSTICK_CYCLES
 8000212:	4915      	ldr	r1, [pc, #84]	; (8000268 <__tx_DBGHandler+0x10>)
    STR     r1, [r0, #0x14]                         @ Setup SysTick Reload Value
 8000214:	6141      	str	r1, [r0, #20]
    MOV     r1, #0x7                                @ Build SysTick Control Enable Value
 8000216:	f04f 0107 	mov.w	r1, #7
    STR     r1, [r0, #0x10]                         @ Setup SysTick Control
 800021a:	6101      	str	r1, [r0, #16]
@
@    /* Configure handler priorities.  */
@
    LDR     r1, =0x00000000                         @ Rsrv, UsgF, BusF, MemM
 800021c:	f04f 0100 	mov.w	r1, #0
    STR     r1, [r0, #0xD18]                        @ Setup System Handlers 4-7 Priority Registers
 8000220:	f8c0 1d18 	str.w	r1, [r0, #3352]	; 0xd18

    LDR     r1, =0xFF000000                         @ SVCl, Rsrv, Rsrv, Rsrv
 8000224:	f04f 417f 	mov.w	r1, #4278190080	; 0xff000000
    STR     r1, [r0, #0xD1C]                        @ Setup System Handlers 8-11 Priority Registers
 8000228:	f8c0 1d1c 	str.w	r1, [r0, #3356]	; 0xd1c
                                                    @ Note: SVC must be lowest priority, which is 0xFF

    LDR     r1, =0x40FF0000                         @ SysT, PnSV, Rsrv, DbgM
 800022c:	490f      	ldr	r1, [pc, #60]	; (800026c <__tx_DBGHandler+0x14>)
    STR     r1, [r0, #0xD20]                        @ Setup System Handlers 12-15 Priority Registers
 800022e:	f8c0 1d20 	str.w	r1, [r0, #3360]	; 0xd20
                                                    @ Note: PnSV must be lowest priority, which is 0xFF
@
@    /* Return to caller.  */
@
    BX      lr
 8000232:	4770      	bx	lr

08000234 <__tx_BadHandler>:
@/* Define shells for each of the unused vectors.  */
@
    .global  __tx_BadHandler
    .thumb_func
__tx_BadHandler:
    B       __tx_BadHandler
 8000234:	f7ff bffe 	b.w	8000234 <__tx_BadHandler>

08000238 <__tx_HardfaultHandler>:
@ /* added to catch the hardfault */

    .global  __tx_HardfaultHandler
    .thumb_func
__tx_HardfaultHandler:
    B       __tx_HardfaultHandler
 8000238:	f7ff bffe 	b.w	8000238 <__tx_HardfaultHandler>

0800023c <__tx_SVCallHandler>:
@ /* added to catch the SVC */

    .global  __tx_SVCallHandler
    .thumb_func
__tx_SVCallHandler:
    B       __tx_SVCallHandler
 800023c:	f7ff bffe 	b.w	800023c <__tx_SVCallHandler>

08000240 <__tx_IntHandler>:
    .global  __tx_IntHandler
    .thumb_func
__tx_IntHandler:
@ VOID InterruptHandler (VOID)
@ {
    PUSH    {r0, lr}
 8000240:	b501      	push	{r0, lr}
@    /* BL <your C Function>.... */

#ifdef TX_ENABLE_EXECUTION_CHANGE_NOTIFY
    BL      _tx_execution_isr_exit              @ Call the ISR exit function
#endif
    POP     {r0, lr}
 8000242:	e8bd 4001 	ldmia.w	sp!, {r0, lr}
    BX      LR
 8000246:	4770      	bx	lr

08000248 <SysTick_Handler>:
    .thumb_func
SysTick_Handler:
@ VOID TimerInterruptHandler (VOID)
@ {
@
    PUSH    {r0, lr}
 8000248:	b501      	push	{r0, lr}
#ifdef TX_ENABLE_EXECUTION_CHANGE_NOTIFY
    BL      _tx_execution_isr_enter             @ Call the ISR enter function
#endif
    BL      _tx_timer_interrupt
 800024a:	f000 f899 	bl	8000380 <_tx_timer_interrupt>
#ifdef TX_ENABLE_EXECUTION_CHANGE_NOTIFY
    BL      _tx_execution_isr_exit              @ Call the ISR exit function
#endif
    POP     {r0, lr}
 800024e:	e8bd 4001 	ldmia.w	sp!, {r0, lr}
    BX      LR
 8000252:	4770      	bx	lr

08000254 <__tx_NMIHandler>:

@ /* NMI, DBG handlers */
    .global  __tx_NMIHandler
    .thumb_func
__tx_NMIHandler:
    B       __tx_NMIHandler
 8000254:	f7ff bffe 	b.w	8000254 <__tx_NMIHandler>

08000258 <__tx_DBGHandler>:

    .global  __tx_DBGHandler
    .thumb_func
__tx_DBGHandler:
    B       __tx_DBGHandler
 8000258:	f7ff bffe 	b.w	8000258 <__tx_DBGHandler>
    LDR     r1, =g_pfnVectors                           @ Pickup address of vector table
 800025c:	08000000 	.word	0x08000000
    LDR     r0, =_tx_thread_system_stack_ptr        @ Build address of system stack pointer
 8000260:	200063ac 	.word	0x200063ac
    LDR     r0, =0xE0001000                         @ Build address of DWT register
 8000264:	e0001000 	.word	0xe0001000
    LDR     r1, =SYSTICK_CYCLES
 8000268:	000afc7f 	.word	0x000afc7f
    LDR     r1, =0x40FF0000                         @ SysT, PnSV, Rsrv, DbgM
 800026c:	40ff0000 	.word	0x40ff0000

08000270 <_tx_thread_schedule>:
       from the first schedule request. Subsequent scheduling occurs
       from the PendSV handling routine below. */

    /* Clear the preempt-disable flag to enable rescheduling after initialization on Cortex-M targets.  */

    MOV     r0, #0                                  // Build value for TX_FALSE
 8000270:	f04f 0000 	mov.w	r0, #0
    LDR     r2, =_tx_thread_preempt_disable         // Build address of preempt disable flag
 8000274:	4a2e      	ldr	r2, [pc, #184]	; (8000330 <tx_thread_fpu_disable+0x2>)
    STR     r0, [r2, #0]                            // Clear preempt disable flag
 8000276:	6010      	str	r0, [r2, #0]

    /* Clear CONTROL.FPCA bit so VFP registers aren't unnecessarily stacked.  */

#ifdef __ARM_FP
    MRS     r0, CONTROL                             // Pickup current CONTROL register
 8000278:	f3ef 8014 	mrs	r0, CONTROL
    BIC     r0, r0, #4                              // Clear the FPCA bit
 800027c:	f020 0004 	bic.w	r0, r0, #4
    MSR     CONTROL, r0                             // Setup new CONTROL register
 8000280:	f380 8814 	msr	CONTROL, r0
#endif

    /* Enable interrupts */
    CPSIE   i
 8000284:	b662      	cpsie	i

    /* Enter the scheduler for the first time.  */

    MOV     r0, #0x10000000                         // Load PENDSVSET bit
 8000286:	f04f 5080 	mov.w	r0, #268435456	; 0x10000000
    MOV     r1, #0xE000E000                         // Load NVIC base
 800028a:	f04f 21e0 	mov.w	r1, #3758153728	; 0xe000e000
    STR     r0, [r1, #0xD04]                        // Set PENDSVBIT in ICSR
 800028e:	f8c1 0d04 	str.w	r0, [r1, #3332]	; 0xd04
    DSB                                             // Complete all memory accesses
 8000292:	f3bf 8f4f 	dsb	sy
    ISB                                             // Flush pipeline
 8000296:	f3bf 8f6f 	isb	sy

0800029a <__tx_wait_here>:

    /* Wait here for the PendSV to take place.  */

__tx_wait_here:
    B       __tx_wait_here                          // Wait for the PendSV to happen
 800029a:	e7fe      	b.n	800029a <__tx_wait_here>

0800029c <PendSV_Handler>:
    BL      _tx_execution_thread_exit               // Call the thread exit function
    POP     {r0, lr}                                // Recover LR
    CPSIE   i                                       // Enable interrupts
#endif

    LDR     r0, =_tx_thread_current_ptr             // Build current thread pointer address
 800029c:	4825      	ldr	r0, [pc, #148]	; (8000334 <tx_thread_fpu_disable+0x6>)
    LDR     r2, =_tx_thread_execute_ptr             // Build execute thread pointer address
 800029e:	4a26      	ldr	r2, [pc, #152]	; (8000338 <tx_thread_fpu_disable+0xa>)
    MOV     r3, #0                                  // Build NULL value
 80002a0:	f04f 0300 	mov.w	r3, #0
    LDR     r1, [r0]                                // Pickup current thread pointer
 80002a4:	6801      	ldr	r1, [r0, #0]

    /* Determine if there is a current thread to finish preserving.  */

    CBZ     r1, __tx_ts_new                         // If NULL, skip preservation
 80002a6:	b191      	cbz	r1, 80002ce <__tx_ts_new>

    /* Recover PSP and preserve current thread context.  */

    STR     r3, [r0]                                // Set _tx_thread_current_ptr to NULL
 80002a8:	6003      	str	r3, [r0, #0]
    MRS     r12, PSP                                // Pickup PSP pointer (thread's stack pointer)
 80002aa:	f3ef 8c09 	mrs	ip, PSP
    STMDB   r12!, {r4-r11}                          // Save its remaining registers
 80002ae:	e92c 0ff0 	stmdb	ip!, {r4, r5, r6, r7, r8, r9, sl, fp}
#ifdef __ARM_FP
    TST     LR, #0x10                               // Determine if the VFP extended frame is present
 80002b2:	f01e 0f10 	tst.w	lr, #16
    BNE     _skip_vfp_save
 80002b6:	d101      	bne.n	80002bc <_skip_vfp_save>
    VSTMDB  r12!,{s16-s31}                          // Yes, save additional VFP registers
 80002b8:	ed2c 8a10 	vstmdb	ip!, {s16-s31}

080002bc <_skip_vfp_save>:
_skip_vfp_save:
#endif
    LDR     r4, =_tx_timer_time_slice               // Build address of time-slice variable
 80002bc:	4c1f      	ldr	r4, [pc, #124]	; (800033c <tx_thread_fpu_disable+0xe>)
    STMDB   r12!, {LR}                              // Save LR on the stack
 80002be:	f84c ed04 	str.w	lr, [ip, #-4]!

    /* Determine if time-slice is active. If it isn't, skip time handling processing.  */

    LDR     r5, [r4]                                // Pickup current time-slice
 80002c2:	6825      	ldr	r5, [r4, #0]
    STR     r12, [r1, #8]                           // Save the thread stack pointer
 80002c4:	f8c1 c008 	str.w	ip, [r1, #8]
    CBZ     r5, __tx_ts_new                         // If not active, skip processing
 80002c8:	b10d      	cbz	r5, 80002ce <__tx_ts_new>

    /* Time-slice is active, save the current thread's time-slice and clear the global time-slice variable.  */

    STR     r5, [r1, #24]                           // Save current time-slice
 80002ca:	618d      	str	r5, [r1, #24]

    /* Clear the global time-slice.  */

    STR     r3, [r4]                                // Clear time-slice
 80002cc:	6023      	str	r3, [r4, #0]

080002ce <__tx_ts_new>:

__tx_ts_new:

    /* Now we are looking for a new thread to execute!  */

    CPSID   i                                       // Disable interrupts
 80002ce:	b672      	cpsid	i
    LDR     r1, [r2]                                // Is there another thread ready to execute?
 80002d0:	6811      	ldr	r1, [r2, #0]
    CBZ     r1, __tx_ts_wait                        // No, skip to the wait processing
 80002d2:	b1b1      	cbz	r1, 8000302 <__tx_ts_wait>

    /* Yes, another thread is ready for else, make the current thread the new thread.  */

    STR     r1, [r0]                                // Setup the current thread pointer to the new thread
 80002d4:	6001      	str	r1, [r0, #0]
    CPSIE   i                                       // Enable interrupts
 80002d6:	b662      	cpsie	i

080002d8 <__tx_ts_restore>:

    /* Increment the thread run count.  */

__tx_ts_restore:
    LDR     r7, [r1, #4]                            // Pickup the current thread run count
 80002d8:	684f      	ldr	r7, [r1, #4]
    LDR     r4, =_tx_timer_time_slice               // Build address of time-slice variable
 80002da:	4c18      	ldr	r4, [pc, #96]	; (800033c <tx_thread_fpu_disable+0xe>)
    LDR     r5, [r1, #24]                           // Pickup thread's current time-slice
 80002dc:	698d      	ldr	r5, [r1, #24]
    ADD     r7, r7, #1                              // Increment the thread run count
 80002de:	f107 0701 	add.w	r7, r7, #1
    STR     r7, [r1, #4]                            // Store the new run count
 80002e2:	604f      	str	r7, [r1, #4]

    /* Setup global time-slice with thread's current time-slice.  */

    STR     r5, [r4]                                // Setup global time-slice
 80002e4:	6025      	str	r5, [r4, #0]
    POP     {r0, r1}                                // Recover r0 and r1
#endif

    /* Restore the thread context and PSP.  */

    LDR     r12, [r1, #8]                           // Pickup thread's stack pointer
 80002e6:	f8d1 c008 	ldr.w	ip, [r1, #8]
    LDMIA   r12!, {LR}                              // Pickup LR
 80002ea:	f85c eb04 	ldr.w	lr, [ip], #4
#ifdef __ARM_FP
    TST     LR, #0x10                               // Determine if the VFP extended frame is present
 80002ee:	f01e 0f10 	tst.w	lr, #16
    BNE     _skip_vfp_restore                       // If not, skip VFP restore
 80002f2:	d101      	bne.n	80002f8 <_skip_vfp_restore>
    VLDMIA  r12!, {s16-s31}                         // Yes, restore additional VFP registers
 80002f4:	ecbc 8a10 	vldmia	ip!, {s16-s31}

080002f8 <_skip_vfp_restore>:
_skip_vfp_restore:
#endif
    LDMIA   r12!, {r4-r11}                          // Recover thread's registers
 80002f8:	e8bc 0ff0 	ldmia.w	ip!, {r4, r5, r6, r7, r8, r9, sl, fp}
    MSR     PSP, r12                                // Setup the thread's stack pointer
 80002fc:	f38c 8809 	msr	PSP, ip

    /* Return to thread.  */

    BX      lr                                      // Return to thread!
 8000300:	4770      	bx	lr

08000302 <__tx_ts_wait>:
    /* The following is the idle wait processing... in this case, no threads are ready for execution and the
       system will simply be idle until an interrupt occurs that makes a thread ready. Note that interrupts
       are disabled to allow use of WFI for waiting for a thread to arrive.  */

__tx_ts_wait:
    CPSID   i                                       // Disable interrupts
 8000302:	b672      	cpsid	i
    LDR     r1, [r2]                                // Pickup the next thread to execute pointer
 8000304:	6811      	ldr	r1, [r2, #0]
    STR     r1, [r0]                                // Store it in the current pointer
 8000306:	6001      	str	r1, [r0, #0]
    CBNZ    r1, __tx_ts_ready                       // If non-NULL, a new thread is ready!
 8000308:	b949      	cbnz	r1, 800031e <__tx_ts_ready>

#ifdef TX_LOW_POWER
    PUSH    {r0-r3}
 800030a:	b40f      	push	{r0, r1, r2, r3}
    BL      tx_low_power_enter                      // Possibly enter low power mode
 800030c:	f007 ff36 	bl	800817c <tx_low_power_enter>
    POP     {r0-r3}
 8000310:	bc0f      	pop	{r0, r1, r2, r3}
    WFI                                             // Wait for interrupt
    ISB                                             // Ensure pipeline is flushed
#endif

#ifdef TX_LOW_POWER
    PUSH    {r0-r3}
 8000312:	b40f      	push	{r0, r1, r2, r3}
    BL      tx_low_power_exit                       // Exit low power mode
 8000314:	f007 ff4e 	bl	80081b4 <tx_low_power_exit>
    POP     {r0-r3}
 8000318:	bc0f      	pop	{r0, r1, r2, r3}
#endif

    CPSIE   i                                       // Enable interrupts
 800031a:	b662      	cpsie	i
    B       __tx_ts_wait                            // Loop to continue waiting
 800031c:	e7f1      	b.n	8000302 <__tx_ts_wait>

0800031e <__tx_ts_ready>:

    /* At this point, we have a new thread ready to go. Clear any newly pended PendSV - since we are
       already in the handler!  */

__tx_ts_ready:
    MOV     r7, #0x08000000                         // Build clear PendSV value
 800031e:	f04f 6700 	mov.w	r7, #134217728	; 0x8000000
    MOV     r8, #0xE000E000                         // Build base NVIC address
 8000322:	f04f 28e0 	mov.w	r8, #3758153728	; 0xe000e000
    STR     r7, [r8, #0xD04]                        // Clear any PendSV
 8000326:	f8c8 7d04 	str.w	r7, [r8, #3332]	; 0xd04

    /* Re-enable interrupts and restore new thread.  */

    CPSIE   i                                       // Enable interrupts
 800032a:	b662      	cpsie	i
    B       __tx_ts_restore                         // Restore the thread
 800032c:	e7d4      	b.n	80002d8 <__tx_ts_restore>

0800032e <tx_thread_fpu_disable>:
tx_thread_fpu_disable:

    /* Automatic VPF logic is supported, this function is present only for
       backward compatibility purposes and therefore simply returns.  */

    BX      LR                                      // Return to caller
 800032e:	4770      	bx	lr
    LDR     r2, =_tx_thread_preempt_disable         // Build address of preempt disable flag
 8000330:	20006448 	.word	0x20006448
    LDR     r0, =_tx_thread_current_ptr             // Build current thread pointer address
 8000334:	200063b0 	.word	0x200063b0
    LDR     r2, =_tx_thread_execute_ptr             // Build execute thread pointer address
 8000338:	200063b4 	.word	0x200063b4
    LDR     r4, =_tx_timer_time_slice               // Build address of time-slice variable
 800033c:	200069b4 	.word	0x200069b4

08000340 <_tx_thread_stack_build>:
                       pc          Initial value for pc
                       xPSR        Initial value for xPSR

    Stack Bottom: (higher memory address)  */

    LDR     r2, [r0, #16]                           // Pickup end of stack area
 8000340:	6902      	ldr	r2, [r0, #16]
    BIC     r2, r2, #0x7                            // Align frame for 8-byte alignment
 8000342:	f022 0207 	bic.w	r2, r2, #7
    SUB     r2, r2, #68                             // Subtract frame size
 8000346:	f1a2 0244 	sub.w	r2, r2, #68	; 0x44
    LDR     r3, =0xFFFFFFFD                         // Build initial LR value
 800034a:	f06f 0302 	mvn.w	r3, #2
    STR     r3, [r2, #0]                            // Save on the stack
 800034e:	6013      	str	r3, [r2, #0]

    /* Actually build the stack frame.  */

    MOV     r3, #0                                  // Build initial register value
 8000350:	f04f 0300 	mov.w	r3, #0
    STR     r3, [r2, #4]                            // Store initial r4
 8000354:	6053      	str	r3, [r2, #4]
    STR     r3, [r2, #8]                            // Store initial r5
 8000356:	6093      	str	r3, [r2, #8]
    STR     r3, [r2, #12]                           // Store initial r6
 8000358:	60d3      	str	r3, [r2, #12]
    STR     r3, [r2, #16]                           // Store initial r7
 800035a:	6113      	str	r3, [r2, #16]
    STR     r3, [r2, #20]                           // Store initial r8
 800035c:	6153      	str	r3, [r2, #20]
    STR     r3, [r2, #24]                           // Store initial r9
 800035e:	6193      	str	r3, [r2, #24]
    STR     r3, [r2, #28]                           // Store initial r10
 8000360:	61d3      	str	r3, [r2, #28]
    STR     r3, [r2, #32]                           // Store initial r11
 8000362:	6213      	str	r3, [r2, #32]

    /* Hardware stack follows.  */

    STR     r3, [r2, #36]                           // Store initial r0
 8000364:	6253      	str	r3, [r2, #36]	; 0x24
    STR     r3, [r2, #40]                           // Store initial r1
 8000366:	6293      	str	r3, [r2, #40]	; 0x28
    STR     r3, [r2, #44]                           // Store initial r2
 8000368:	62d3      	str	r3, [r2, #44]	; 0x2c
    STR     r3, [r2, #48]                           // Store initial r3
 800036a:	6313      	str	r3, [r2, #48]	; 0x30
    STR     r3, [r2, #52]                           // Store initial r12
 800036c:	6353      	str	r3, [r2, #52]	; 0x34
    MOV     r3, #0xFFFFFFFF                         // Poison EXC_RETURN value
 800036e:	f04f 33ff 	mov.w	r3, #4294967295
    STR     r3, [r2, #56]                           // Store initial lr
 8000372:	6393      	str	r3, [r2, #56]	; 0x38
    STR     r1, [r2, #60]                           // Store initial pc
 8000374:	63d1      	str	r1, [r2, #60]	; 0x3c
    MOV     r3, #0x01000000                         // Only T-bit need be set
 8000376:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
    STR     r3, [r2, #64]                           // Store initial xPSR
 800037a:	6413      	str	r3, [r2, #64]	; 0x40

    /* Setup stack pointer.  */
    // thread_ptr -> tx_thread_stack_ptr =  r2;

    STR     r2, [r0, #8]                            // Save stack pointer in thread's
 800037c:	6082      	str	r2, [r0, #8]
                                                    //   control block
    BX      lr                                      // Return to caller
 800037e:	4770      	bx	lr

08000380 <_tx_timer_interrupt>:
       for use.  */

    /* Increment the system clock.  */
    // _tx_timer_system_clock++;

    LDR     r1, =_tx_timer_system_clock             // Pickup address of system clock
 8000380:	4922      	ldr	r1, [pc, #136]	; (800040c <__tx_timer_nothing_expired+0x6>)
    LDR     r0, [r1, #0]                            // Pickup system clock
 8000382:	6808      	ldr	r0, [r1, #0]
    ADD     r0, r0, #1                              // Increment system clock
 8000384:	f100 0001 	add.w	r0, r0, #1
    STR     r0, [r1, #0]                            // Store new system clock
 8000388:	6008      	str	r0, [r1, #0]

    /* Test for time-slice expiration.  */
    // if (_tx_timer_time_slice)
    // {

    LDR     r3, =_tx_timer_time_slice               // Pickup address of time-slice
 800038a:	4b21      	ldr	r3, [pc, #132]	; (8000410 <__tx_timer_nothing_expired+0xa>)
    LDR     r2, [r3, #0]                            // Pickup time-slice
 800038c:	681a      	ldr	r2, [r3, #0]
    CBZ     r2, __tx_timer_no_time_slice            // Is it non-active?
 800038e:	b13a      	cbz	r2, 80003a0 <__tx_timer_no_time_slice>
                                                    // Yes, skip time-slice processing

       /* Decrement the time_slice.  */
       // _tx_timer_time_slice--;

    SUB     r2, r2, #1                              // Decrement the time-slice
 8000390:	f1a2 0201 	sub.w	r2, r2, #1
    STR     r2, [r3, #0]                            // Store new time-slice value
 8000394:	601a      	str	r2, [r3, #0]

       /* Check for expiration.  */
       // if (__tx_timer_time_slice == 0)

    CBNZ    r2, __tx_timer_no_time_slice            // Has it expired?
 8000396:	b91a      	cbnz	r2, 80003a0 <__tx_timer_no_time_slice>
                                                    // No, skip expiration processing

       /* Set the time-slice expired flag.  */
       // _tx_timer_expired_time_slice =  TX_TRUE;

    LDR     r3, =_tx_timer_expired_time_slice       // Pickup address of expired flag
 8000398:	4b1e      	ldr	r3, [pc, #120]	; (8000414 <__tx_timer_nothing_expired+0xe>)
    MOV     r0, #1                                  // Build expired value
 800039a:	f04f 0001 	mov.w	r0, #1
    STR     r0, [r3, #0]                            // Set time-slice expiration flag
 800039e:	6018      	str	r0, [r3, #0]

080003a0 <__tx_timer_no_time_slice>:

    /* Test for timer expiration.  */
    // if (*_tx_timer_current_ptr)
    // {

    LDR     r1, =_tx_timer_current_ptr              // Pickup current timer pointer address
 80003a0:	491d      	ldr	r1, [pc, #116]	; (8000418 <__tx_timer_nothing_expired+0x12>)
    LDR     r0, [r1, #0]                            // Pickup current timer
 80003a2:	6808      	ldr	r0, [r1, #0]
    LDR     r2, [r0, #0]                            // Pickup timer list entry
 80003a4:	6802      	ldr	r2, [r0, #0]
    CBZ     r2, __tx_timer_no_timer                 // Is there anything in the list?
 80003a6:	b122      	cbz	r2, 80003b2 <__tx_timer_no_timer>
                                                    // No, just increment the timer

        /* Set expiration flag.  */
        // _tx_timer_expired =  TX_TRUE;

    LDR     r3, =_tx_timer_expired                  // Pickup expiration flag address
 80003a8:	4b1c      	ldr	r3, [pc, #112]	; (800041c <__tx_timer_nothing_expired+0x16>)
    MOV     r2, #1                                  // Build expired value
 80003aa:	f04f 0201 	mov.w	r2, #1
    STR     r2, [r3, #0]                            // Set expired flag
 80003ae:	601a      	str	r2, [r3, #0]
    B       __tx_timer_done                         // Finished timer processing
 80003b0:	e008      	b.n	80003c4 <__tx_timer_done>

080003b2 <__tx_timer_no_timer>:
__tx_timer_no_timer:

        /* No timer expired, increment the timer pointer.  */
        // _tx_timer_current_ptr++;

    ADD     r0, r0, #4                              // Move to next timer
 80003b2:	f100 0004 	add.w	r0, r0, #4

        /* Check for wrap-around.  */
        // if (_tx_timer_current_ptr == _tx_timer_list_end)

    LDR     r3, =_tx_timer_list_end                 // Pickup addr of timer list end
 80003b6:	4b1a      	ldr	r3, [pc, #104]	; (8000420 <__tx_timer_nothing_expired+0x1a>)
    LDR     r2, [r3, #0]                            // Pickup list end
 80003b8:	681a      	ldr	r2, [r3, #0]
    CMP     r0, r2                                  // Are we at list end?
 80003ba:	4290      	cmp	r0, r2
    BNE     __tx_timer_skip_wrap                    // No, skip wrap-around logic
 80003bc:	d101      	bne.n	80003c2 <__tx_timer_skip_wrap>

            /* Wrap to beginning of list.  */
            // _tx_timer_current_ptr =  _tx_timer_list_start;

    LDR     r3, =_tx_timer_list_start               // Pickup addr of timer list start
 80003be:	4b19      	ldr	r3, [pc, #100]	; (8000424 <__tx_timer_nothing_expired+0x1e>)
    LDR     r0, [r3, #0]                            // Set current pointer to list start
 80003c0:	6818      	ldr	r0, [r3, #0]

080003c2 <__tx_timer_skip_wrap>:

__tx_timer_skip_wrap:

    STR     r0, [r1, #0]                            // Store new current timer pointer
 80003c2:	6008      	str	r0, [r1, #0]

080003c4 <__tx_timer_done>:

    /* See if anything has expired.  */
    // if ((_tx_timer_expired_time_slice) || (_tx_timer_expired))
    // {

    LDR     r3, =_tx_timer_expired_time_slice       // Pickup addr of expired flag
 80003c4:	4b13      	ldr	r3, [pc, #76]	; (8000414 <__tx_timer_nothing_expired+0xe>)
    LDR     r2, [r3, #0]                            // Pickup time-slice expired flag
 80003c6:	681a      	ldr	r2, [r3, #0]
    CBNZ    r2, __tx_something_expired              // Did a time-slice expire?
 80003c8:	b912      	cbnz	r2, 80003d0 <__tx_something_expired>
                                                    // If non-zero, time-slice expired
    LDR     r1, =_tx_timer_expired                  // Pickup addr of other expired flag
 80003ca:	4914      	ldr	r1, [pc, #80]	; (800041c <__tx_timer_nothing_expired+0x16>)
    LDR     r0, [r1, #0]                            // Pickup timer expired flag
 80003cc:	6808      	ldr	r0, [r1, #0]
    CBZ     r0, __tx_timer_nothing_expired          // Did a timer expire?
 80003ce:	b1d0      	cbz	r0, 8000406 <__tx_timer_nothing_expired>

080003d0 <__tx_something_expired>:
                                                    // No, nothing expired

__tx_something_expired:

    STMDB   sp!, {r0, lr}                           // Save the lr register on the stack
 80003d0:	e92d 4001 	stmdb	sp!, {r0, lr}

    /* Did a timer expire?  */
    // if (_tx_timer_expired)
    // {

    LDR     r1, =_tx_timer_expired                  // Pickup addr of expired flag
 80003d4:	4911      	ldr	r1, [pc, #68]	; (800041c <__tx_timer_nothing_expired+0x16>)
    LDR     r0, [r1, #0]                            // Pickup timer expired flag
 80003d6:	6808      	ldr	r0, [r1, #0]
    CBZ     r0, __tx_timer_dont_activate            // Check for timer expiration
 80003d8:	b108      	cbz	r0, 80003de <__tx_timer_dont_activate>
                                                    // If not set, skip timer activation

        /* Process timer expiration.  */
        // _tx_timer_expiration_process();

    BL      _tx_timer_expiration_process            // Call the timer expiration handling routine
 80003da:	f007 fbf9 	bl	8007bd0 <_tx_timer_expiration_process>

080003de <__tx_timer_dont_activate>:

    /* Did time slice expire?  */
    // if (_tx_timer_expired_time_slice)
    // {

    LDR     r3, =_tx_timer_expired_time_slice       // Pickup addr of time-slice expired
 80003de:	4b0d      	ldr	r3, [pc, #52]	; (8000414 <__tx_timer_nothing_expired+0xe>)
    LDR     r2, [r3, #0]                            // Pickup the actual flag
 80003e0:	681a      	ldr	r2, [r3, #0]
    CBZ     r2, __tx_timer_not_ts_expiration        // See if the flag is set
 80003e2:	b172      	cbz	r2, 8000402 <__tx_timer_not_ts_expiration>
                                                    // No, skip time-slice processing

        /* Time slice interrupted thread.  */
        // _tx_thread_time_slice();

    BL      _tx_thread_time_slice                   // Call time-slice processing
 80003e4:	f007 fb66 	bl	8007ab4 <_tx_thread_time_slice>
    LDR     r0, =_tx_thread_preempt_disable         // Build address of preempt disable flag
 80003e8:	480f      	ldr	r0, [pc, #60]	; (8000428 <__tx_timer_nothing_expired+0x22>)
    LDR     r1, [r0]                                // Is the preempt disable flag set?
 80003ea:	6801      	ldr	r1, [r0, #0]
    CBNZ    r1, __tx_timer_skip_time_slice          // Yes, skip the PendSV logic
 80003ec:	b949      	cbnz	r1, 8000402 <__tx_timer_not_ts_expiration>
    LDR     r0, =_tx_thread_current_ptr             // Build current thread pointer address
 80003ee:	480f      	ldr	r0, [pc, #60]	; (800042c <__tx_timer_nothing_expired+0x26>)
    LDR     r1, [r0]                                // Pickup the current thread pointer
 80003f0:	6801      	ldr	r1, [r0, #0]
    LDR     r2, =_tx_thread_execute_ptr             // Build execute thread pointer address
 80003f2:	4a0f      	ldr	r2, [pc, #60]	; (8000430 <__tx_timer_nothing_expired+0x2a>)
    LDR     r3, [r2]                                // Pickup the execute thread pointer
 80003f4:	6813      	ldr	r3, [r2, #0]
    LDR     r0, =0xE000ED04                         // Build address of control register
 80003f6:	480f      	ldr	r0, [pc, #60]	; (8000434 <__tx_timer_nothing_expired+0x2e>)
    LDR     r2, =0x10000000                         // Build value for PendSV bit
 80003f8:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
    CMP     r1, r3                                  // Are they the same?
 80003fc:	4299      	cmp	r1, r3
    BEQ     __tx_timer_skip_time_slice              // If the same, there was no time-slice performed
 80003fe:	d000      	beq.n	8000402 <__tx_timer_not_ts_expiration>
    STR     r2, [r0]                                // Not the same, issue the PendSV for preemption
 8000400:	6002      	str	r2, [r0, #0]

08000402 <__tx_timer_not_ts_expiration>:

    // }

__tx_timer_not_ts_expiration:

    LDMIA   sp!, {r0, lr}                           // Recover lr register (r0 is just there for
 8000402:	e8bd 4001 	ldmia.w	sp!, {r0, lr}

08000406 <__tx_timer_nothing_expired>:

    // }

__tx_timer_nothing_expired:

    DSB                                             // Complete all memory access
 8000406:	f3bf 8f4f 	dsb	sy
    BX      lr                                      // Return to caller
 800040a:	4770      	bx	lr
    LDR     r1, =_tx_timer_system_clock             // Pickup address of system clock
 800040c:	20006454 	.word	0x20006454
    LDR     r3, =_tx_timer_time_slice               // Pickup address of time-slice
 8000410:	200069b4 	.word	0x200069b4
    LDR     r3, =_tx_timer_expired_time_slice       // Pickup address of expired flag
 8000414:	20006458 	.word	0x20006458
    LDR     r1, =_tx_timer_current_ptr              // Pickup current timer pointer address
 8000418:	200064e4 	.word	0x200064e4
    LDR     r3, =_tx_timer_expired                  // Pickup expiration flag address
 800041c:	200064e8 	.word	0x200064e8
    LDR     r3, =_tx_timer_list_end                 // Pickup addr of timer list end
 8000420:	200064e0 	.word	0x200064e0
    LDR     r3, =_tx_timer_list_start               // Pickup addr of timer list start
 8000424:	200064dc 	.word	0x200064dc
    LDR     r0, =_tx_thread_preempt_disable         // Build address of preempt disable flag
 8000428:	20006448 	.word	0x20006448
    LDR     r0, =_tx_thread_current_ptr             // Build current thread pointer address
 800042c:	200063b0 	.word	0x200063b0
    LDR     r2, =_tx_thread_execute_ptr             // Build execute thread pointer address
 8000430:	200063b4 	.word	0x200063b4
    LDR     r0, =0xE000ED04                         // Build address of control register
 8000434:	e000ed04 	.word	0xe000ed04
	...

08000440 <memchr>:
 8000440:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 8000444:	2a10      	cmp	r2, #16
 8000446:	db2b      	blt.n	80004a0 <memchr+0x60>
 8000448:	f010 0f07 	tst.w	r0, #7
 800044c:	d008      	beq.n	8000460 <memchr+0x20>
 800044e:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000452:	3a01      	subs	r2, #1
 8000454:	428b      	cmp	r3, r1
 8000456:	d02d      	beq.n	80004b4 <memchr+0x74>
 8000458:	f010 0f07 	tst.w	r0, #7
 800045c:	b342      	cbz	r2, 80004b0 <memchr+0x70>
 800045e:	d1f6      	bne.n	800044e <memchr+0xe>
 8000460:	b4f0      	push	{r4, r5, r6, r7}
 8000462:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000466:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800046a:	f022 0407 	bic.w	r4, r2, #7
 800046e:	f07f 0700 	mvns.w	r7, #0
 8000472:	2300      	movs	r3, #0
 8000474:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000478:	3c08      	subs	r4, #8
 800047a:	ea85 0501 	eor.w	r5, r5, r1
 800047e:	ea86 0601 	eor.w	r6, r6, r1
 8000482:	fa85 f547 	uadd8	r5, r5, r7
 8000486:	faa3 f587 	sel	r5, r3, r7
 800048a:	fa86 f647 	uadd8	r6, r6, r7
 800048e:	faa5 f687 	sel	r6, r5, r7
 8000492:	b98e      	cbnz	r6, 80004b8 <memchr+0x78>
 8000494:	d1ee      	bne.n	8000474 <memchr+0x34>
 8000496:	bcf0      	pop	{r4, r5, r6, r7}
 8000498:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800049c:	f002 0207 	and.w	r2, r2, #7
 80004a0:	b132      	cbz	r2, 80004b0 <memchr+0x70>
 80004a2:	f810 3b01 	ldrb.w	r3, [r0], #1
 80004a6:	3a01      	subs	r2, #1
 80004a8:	ea83 0301 	eor.w	r3, r3, r1
 80004ac:	b113      	cbz	r3, 80004b4 <memchr+0x74>
 80004ae:	d1f8      	bne.n	80004a2 <memchr+0x62>
 80004b0:	2000      	movs	r0, #0
 80004b2:	4770      	bx	lr
 80004b4:	3801      	subs	r0, #1
 80004b6:	4770      	bx	lr
 80004b8:	2d00      	cmp	r5, #0
 80004ba:	bf06      	itte	eq
 80004bc:	4635      	moveq	r5, r6
 80004be:	3803      	subeq	r0, #3
 80004c0:	3807      	subne	r0, #7
 80004c2:	f015 0f01 	tst.w	r5, #1
 80004c6:	d107      	bne.n	80004d8 <memchr+0x98>
 80004c8:	3001      	adds	r0, #1
 80004ca:	f415 7f80 	tst.w	r5, #256	; 0x100
 80004ce:	bf02      	ittt	eq
 80004d0:	3001      	addeq	r0, #1
 80004d2:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 80004d6:	3001      	addeq	r0, #1
 80004d8:	bcf0      	pop	{r4, r5, r6, r7}
 80004da:	3801      	subs	r0, #1
 80004dc:	4770      	bx	lr
 80004de:	bf00      	nop

080004e0 <__aeabi_uldivmod>:
 80004e0:	b953      	cbnz	r3, 80004f8 <__aeabi_uldivmod+0x18>
 80004e2:	b94a      	cbnz	r2, 80004f8 <__aeabi_uldivmod+0x18>
 80004e4:	2900      	cmp	r1, #0
 80004e6:	bf08      	it	eq
 80004e8:	2800      	cmpeq	r0, #0
 80004ea:	bf1c      	itt	ne
 80004ec:	f04f 31ff 	movne.w	r1, #4294967295
 80004f0:	f04f 30ff 	movne.w	r0, #4294967295
 80004f4:	f000 b974 	b.w	80007e0 <__aeabi_idiv0>
 80004f8:	f1ad 0c08 	sub.w	ip, sp, #8
 80004fc:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000500:	f000 f806 	bl	8000510 <__udivmoddi4>
 8000504:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000508:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 800050c:	b004      	add	sp, #16
 800050e:	4770      	bx	lr

08000510 <__udivmoddi4>:
 8000510:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000514:	9d08      	ldr	r5, [sp, #32]
 8000516:	4604      	mov	r4, r0
 8000518:	468e      	mov	lr, r1
 800051a:	2b00      	cmp	r3, #0
 800051c:	d14d      	bne.n	80005ba <__udivmoddi4+0xaa>
 800051e:	428a      	cmp	r2, r1
 8000520:	4694      	mov	ip, r2
 8000522:	d969      	bls.n	80005f8 <__udivmoddi4+0xe8>
 8000524:	fab2 f282 	clz	r2, r2
 8000528:	b152      	cbz	r2, 8000540 <__udivmoddi4+0x30>
 800052a:	fa01 f302 	lsl.w	r3, r1, r2
 800052e:	f1c2 0120 	rsb	r1, r2, #32
 8000532:	fa20 f101 	lsr.w	r1, r0, r1
 8000536:	fa0c fc02 	lsl.w	ip, ip, r2
 800053a:	ea41 0e03 	orr.w	lr, r1, r3
 800053e:	4094      	lsls	r4, r2
 8000540:	ea4f 481c 	mov.w	r8, ip, lsr #16
 8000544:	0c21      	lsrs	r1, r4, #16
 8000546:	fbbe f6f8 	udiv	r6, lr, r8
 800054a:	fa1f f78c 	uxth.w	r7, ip
 800054e:	fb08 e316 	mls	r3, r8, r6, lr
 8000552:	ea41 4303 	orr.w	r3, r1, r3, lsl #16
 8000556:	fb06 f107 	mul.w	r1, r6, r7
 800055a:	4299      	cmp	r1, r3
 800055c:	d90a      	bls.n	8000574 <__udivmoddi4+0x64>
 800055e:	eb1c 0303 	adds.w	r3, ip, r3
 8000562:	f106 30ff 	add.w	r0, r6, #4294967295
 8000566:	f080 811f 	bcs.w	80007a8 <__udivmoddi4+0x298>
 800056a:	4299      	cmp	r1, r3
 800056c:	f240 811c 	bls.w	80007a8 <__udivmoddi4+0x298>
 8000570:	3e02      	subs	r6, #2
 8000572:	4463      	add	r3, ip
 8000574:	1a5b      	subs	r3, r3, r1
 8000576:	b2a4      	uxth	r4, r4
 8000578:	fbb3 f0f8 	udiv	r0, r3, r8
 800057c:	fb08 3310 	mls	r3, r8, r0, r3
 8000580:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000584:	fb00 f707 	mul.w	r7, r0, r7
 8000588:	42a7      	cmp	r7, r4
 800058a:	d90a      	bls.n	80005a2 <__udivmoddi4+0x92>
 800058c:	eb1c 0404 	adds.w	r4, ip, r4
 8000590:	f100 33ff 	add.w	r3, r0, #4294967295
 8000594:	f080 810a 	bcs.w	80007ac <__udivmoddi4+0x29c>
 8000598:	42a7      	cmp	r7, r4
 800059a:	f240 8107 	bls.w	80007ac <__udivmoddi4+0x29c>
 800059e:	4464      	add	r4, ip
 80005a0:	3802      	subs	r0, #2
 80005a2:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 80005a6:	1be4      	subs	r4, r4, r7
 80005a8:	2600      	movs	r6, #0
 80005aa:	b11d      	cbz	r5, 80005b4 <__udivmoddi4+0xa4>
 80005ac:	40d4      	lsrs	r4, r2
 80005ae:	2300      	movs	r3, #0
 80005b0:	e9c5 4300 	strd	r4, r3, [r5]
 80005b4:	4631      	mov	r1, r6
 80005b6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80005ba:	428b      	cmp	r3, r1
 80005bc:	d909      	bls.n	80005d2 <__udivmoddi4+0xc2>
 80005be:	2d00      	cmp	r5, #0
 80005c0:	f000 80ef 	beq.w	80007a2 <__udivmoddi4+0x292>
 80005c4:	2600      	movs	r6, #0
 80005c6:	e9c5 0100 	strd	r0, r1, [r5]
 80005ca:	4630      	mov	r0, r6
 80005cc:	4631      	mov	r1, r6
 80005ce:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80005d2:	fab3 f683 	clz	r6, r3
 80005d6:	2e00      	cmp	r6, #0
 80005d8:	d14a      	bne.n	8000670 <__udivmoddi4+0x160>
 80005da:	428b      	cmp	r3, r1
 80005dc:	d302      	bcc.n	80005e4 <__udivmoddi4+0xd4>
 80005de:	4282      	cmp	r2, r0
 80005e0:	f200 80f9 	bhi.w	80007d6 <__udivmoddi4+0x2c6>
 80005e4:	1a84      	subs	r4, r0, r2
 80005e6:	eb61 0303 	sbc.w	r3, r1, r3
 80005ea:	2001      	movs	r0, #1
 80005ec:	469e      	mov	lr, r3
 80005ee:	2d00      	cmp	r5, #0
 80005f0:	d0e0      	beq.n	80005b4 <__udivmoddi4+0xa4>
 80005f2:	e9c5 4e00 	strd	r4, lr, [r5]
 80005f6:	e7dd      	b.n	80005b4 <__udivmoddi4+0xa4>
 80005f8:	b902      	cbnz	r2, 80005fc <__udivmoddi4+0xec>
 80005fa:	deff      	udf	#255	; 0xff
 80005fc:	fab2 f282 	clz	r2, r2
 8000600:	2a00      	cmp	r2, #0
 8000602:	f040 8092 	bne.w	800072a <__udivmoddi4+0x21a>
 8000606:	eba1 010c 	sub.w	r1, r1, ip
 800060a:	ea4f 471c 	mov.w	r7, ip, lsr #16
 800060e:	fa1f fe8c 	uxth.w	lr, ip
 8000612:	2601      	movs	r6, #1
 8000614:	0c20      	lsrs	r0, r4, #16
 8000616:	fbb1 f3f7 	udiv	r3, r1, r7
 800061a:	fb07 1113 	mls	r1, r7, r3, r1
 800061e:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 8000622:	fb0e f003 	mul.w	r0, lr, r3
 8000626:	4288      	cmp	r0, r1
 8000628:	d908      	bls.n	800063c <__udivmoddi4+0x12c>
 800062a:	eb1c 0101 	adds.w	r1, ip, r1
 800062e:	f103 38ff 	add.w	r8, r3, #4294967295
 8000632:	d202      	bcs.n	800063a <__udivmoddi4+0x12a>
 8000634:	4288      	cmp	r0, r1
 8000636:	f200 80cb 	bhi.w	80007d0 <__udivmoddi4+0x2c0>
 800063a:	4643      	mov	r3, r8
 800063c:	1a09      	subs	r1, r1, r0
 800063e:	b2a4      	uxth	r4, r4
 8000640:	fbb1 f0f7 	udiv	r0, r1, r7
 8000644:	fb07 1110 	mls	r1, r7, r0, r1
 8000648:	ea44 4401 	orr.w	r4, r4, r1, lsl #16
 800064c:	fb0e fe00 	mul.w	lr, lr, r0
 8000650:	45a6      	cmp	lr, r4
 8000652:	d908      	bls.n	8000666 <__udivmoddi4+0x156>
 8000654:	eb1c 0404 	adds.w	r4, ip, r4
 8000658:	f100 31ff 	add.w	r1, r0, #4294967295
 800065c:	d202      	bcs.n	8000664 <__udivmoddi4+0x154>
 800065e:	45a6      	cmp	lr, r4
 8000660:	f200 80bb 	bhi.w	80007da <__udivmoddi4+0x2ca>
 8000664:	4608      	mov	r0, r1
 8000666:	eba4 040e 	sub.w	r4, r4, lr
 800066a:	ea40 4003 	orr.w	r0, r0, r3, lsl #16
 800066e:	e79c      	b.n	80005aa <__udivmoddi4+0x9a>
 8000670:	f1c6 0720 	rsb	r7, r6, #32
 8000674:	40b3      	lsls	r3, r6
 8000676:	fa22 fc07 	lsr.w	ip, r2, r7
 800067a:	ea4c 0c03 	orr.w	ip, ip, r3
 800067e:	fa20 f407 	lsr.w	r4, r0, r7
 8000682:	fa01 f306 	lsl.w	r3, r1, r6
 8000686:	431c      	orrs	r4, r3
 8000688:	40f9      	lsrs	r1, r7
 800068a:	ea4f 491c 	mov.w	r9, ip, lsr #16
 800068e:	fa00 f306 	lsl.w	r3, r0, r6
 8000692:	fbb1 f8f9 	udiv	r8, r1, r9
 8000696:	0c20      	lsrs	r0, r4, #16
 8000698:	fa1f fe8c 	uxth.w	lr, ip
 800069c:	fb09 1118 	mls	r1, r9, r8, r1
 80006a0:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 80006a4:	fb08 f00e 	mul.w	r0, r8, lr
 80006a8:	4288      	cmp	r0, r1
 80006aa:	fa02 f206 	lsl.w	r2, r2, r6
 80006ae:	d90b      	bls.n	80006c8 <__udivmoddi4+0x1b8>
 80006b0:	eb1c 0101 	adds.w	r1, ip, r1
 80006b4:	f108 3aff 	add.w	sl, r8, #4294967295
 80006b8:	f080 8088 	bcs.w	80007cc <__udivmoddi4+0x2bc>
 80006bc:	4288      	cmp	r0, r1
 80006be:	f240 8085 	bls.w	80007cc <__udivmoddi4+0x2bc>
 80006c2:	f1a8 0802 	sub.w	r8, r8, #2
 80006c6:	4461      	add	r1, ip
 80006c8:	1a09      	subs	r1, r1, r0
 80006ca:	b2a4      	uxth	r4, r4
 80006cc:	fbb1 f0f9 	udiv	r0, r1, r9
 80006d0:	fb09 1110 	mls	r1, r9, r0, r1
 80006d4:	ea44 4101 	orr.w	r1, r4, r1, lsl #16
 80006d8:	fb00 fe0e 	mul.w	lr, r0, lr
 80006dc:	458e      	cmp	lr, r1
 80006de:	d908      	bls.n	80006f2 <__udivmoddi4+0x1e2>
 80006e0:	eb1c 0101 	adds.w	r1, ip, r1
 80006e4:	f100 34ff 	add.w	r4, r0, #4294967295
 80006e8:	d26c      	bcs.n	80007c4 <__udivmoddi4+0x2b4>
 80006ea:	458e      	cmp	lr, r1
 80006ec:	d96a      	bls.n	80007c4 <__udivmoddi4+0x2b4>
 80006ee:	3802      	subs	r0, #2
 80006f0:	4461      	add	r1, ip
 80006f2:	ea40 4008 	orr.w	r0, r0, r8, lsl #16
 80006f6:	fba0 9402 	umull	r9, r4, r0, r2
 80006fa:	eba1 010e 	sub.w	r1, r1, lr
 80006fe:	42a1      	cmp	r1, r4
 8000700:	46c8      	mov	r8, r9
 8000702:	46a6      	mov	lr, r4
 8000704:	d356      	bcc.n	80007b4 <__udivmoddi4+0x2a4>
 8000706:	d053      	beq.n	80007b0 <__udivmoddi4+0x2a0>
 8000708:	b15d      	cbz	r5, 8000722 <__udivmoddi4+0x212>
 800070a:	ebb3 0208 	subs.w	r2, r3, r8
 800070e:	eb61 010e 	sbc.w	r1, r1, lr
 8000712:	fa01 f707 	lsl.w	r7, r1, r7
 8000716:	fa22 f306 	lsr.w	r3, r2, r6
 800071a:	40f1      	lsrs	r1, r6
 800071c:	431f      	orrs	r7, r3
 800071e:	e9c5 7100 	strd	r7, r1, [r5]
 8000722:	2600      	movs	r6, #0
 8000724:	4631      	mov	r1, r6
 8000726:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800072a:	f1c2 0320 	rsb	r3, r2, #32
 800072e:	40d8      	lsrs	r0, r3
 8000730:	fa0c fc02 	lsl.w	ip, ip, r2
 8000734:	fa21 f303 	lsr.w	r3, r1, r3
 8000738:	4091      	lsls	r1, r2
 800073a:	4301      	orrs	r1, r0
 800073c:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000740:	fa1f fe8c 	uxth.w	lr, ip
 8000744:	fbb3 f0f7 	udiv	r0, r3, r7
 8000748:	fb07 3610 	mls	r6, r7, r0, r3
 800074c:	0c0b      	lsrs	r3, r1, #16
 800074e:	ea43 4306 	orr.w	r3, r3, r6, lsl #16
 8000752:	fb00 f60e 	mul.w	r6, r0, lr
 8000756:	429e      	cmp	r6, r3
 8000758:	fa04 f402 	lsl.w	r4, r4, r2
 800075c:	d908      	bls.n	8000770 <__udivmoddi4+0x260>
 800075e:	eb1c 0303 	adds.w	r3, ip, r3
 8000762:	f100 38ff 	add.w	r8, r0, #4294967295
 8000766:	d22f      	bcs.n	80007c8 <__udivmoddi4+0x2b8>
 8000768:	429e      	cmp	r6, r3
 800076a:	d92d      	bls.n	80007c8 <__udivmoddi4+0x2b8>
 800076c:	3802      	subs	r0, #2
 800076e:	4463      	add	r3, ip
 8000770:	1b9b      	subs	r3, r3, r6
 8000772:	b289      	uxth	r1, r1
 8000774:	fbb3 f6f7 	udiv	r6, r3, r7
 8000778:	fb07 3316 	mls	r3, r7, r6, r3
 800077c:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000780:	fb06 f30e 	mul.w	r3, r6, lr
 8000784:	428b      	cmp	r3, r1
 8000786:	d908      	bls.n	800079a <__udivmoddi4+0x28a>
 8000788:	eb1c 0101 	adds.w	r1, ip, r1
 800078c:	f106 38ff 	add.w	r8, r6, #4294967295
 8000790:	d216      	bcs.n	80007c0 <__udivmoddi4+0x2b0>
 8000792:	428b      	cmp	r3, r1
 8000794:	d914      	bls.n	80007c0 <__udivmoddi4+0x2b0>
 8000796:	3e02      	subs	r6, #2
 8000798:	4461      	add	r1, ip
 800079a:	1ac9      	subs	r1, r1, r3
 800079c:	ea46 4600 	orr.w	r6, r6, r0, lsl #16
 80007a0:	e738      	b.n	8000614 <__udivmoddi4+0x104>
 80007a2:	462e      	mov	r6, r5
 80007a4:	4628      	mov	r0, r5
 80007a6:	e705      	b.n	80005b4 <__udivmoddi4+0xa4>
 80007a8:	4606      	mov	r6, r0
 80007aa:	e6e3      	b.n	8000574 <__udivmoddi4+0x64>
 80007ac:	4618      	mov	r0, r3
 80007ae:	e6f8      	b.n	80005a2 <__udivmoddi4+0x92>
 80007b0:	454b      	cmp	r3, r9
 80007b2:	d2a9      	bcs.n	8000708 <__udivmoddi4+0x1f8>
 80007b4:	ebb9 0802 	subs.w	r8, r9, r2
 80007b8:	eb64 0e0c 	sbc.w	lr, r4, ip
 80007bc:	3801      	subs	r0, #1
 80007be:	e7a3      	b.n	8000708 <__udivmoddi4+0x1f8>
 80007c0:	4646      	mov	r6, r8
 80007c2:	e7ea      	b.n	800079a <__udivmoddi4+0x28a>
 80007c4:	4620      	mov	r0, r4
 80007c6:	e794      	b.n	80006f2 <__udivmoddi4+0x1e2>
 80007c8:	4640      	mov	r0, r8
 80007ca:	e7d1      	b.n	8000770 <__udivmoddi4+0x260>
 80007cc:	46d0      	mov	r8, sl
 80007ce:	e77b      	b.n	80006c8 <__udivmoddi4+0x1b8>
 80007d0:	3b02      	subs	r3, #2
 80007d2:	4461      	add	r1, ip
 80007d4:	e732      	b.n	800063c <__udivmoddi4+0x12c>
 80007d6:	4630      	mov	r0, r6
 80007d8:	e709      	b.n	80005ee <__udivmoddi4+0xde>
 80007da:	4464      	add	r4, ip
 80007dc:	3802      	subs	r0, #2
 80007de:	e742      	b.n	8000666 <__udivmoddi4+0x156>

080007e0 <__aeabi_idiv0>:
 80007e0:	4770      	bx	lr
 80007e2:	bf00      	nop

080007e4 <tx_application_define>:
  * @brief  Define the initial system.
  * @param  first_unused_memory : Pointer to the first unused memory
  * @retval None
  */
VOID tx_application_define(VOID *first_unused_memory)
{
 80007e4:	b580      	push	{r7, lr}
 80007e6:	b086      	sub	sp, #24
 80007e8:	af02      	add	r7, sp, #8
 80007ea:	6078      	str	r0, [r7, #4]

  /* USER CODE END  tx_application_define */

  VOID *memory_ptr;

  if (tx_byte_pool_create(&tx_app_byte_pool, "Tx App memory pool", tx_byte_pool_buffer, TX_APP_MEM_POOL_SIZE) != TX_SUCCESS)
 80007ec:	2334      	movs	r3, #52	; 0x34
 80007ee:	9300      	str	r3, [sp, #0]
 80007f0:	f44f 6380 	mov.w	r3, #1024	; 0x400
 80007f4:	4a08      	ldr	r2, [pc, #32]	; (8000818 <tx_application_define+0x34>)
 80007f6:	4909      	ldr	r1, [pc, #36]	; (800081c <tx_application_define+0x38>)
 80007f8:	4809      	ldr	r0, [pc, #36]	; (8000820 <tx_application_define+0x3c>)
 80007fa:	f007 fc1f 	bl	800803c <_txe_byte_pool_create>
 80007fe:	4603      	mov	r3, r0
 8000800:	2b00      	cmp	r3, #0
 8000802:	d104      	bne.n	800080e <tx_application_define+0x2a>
  {
    /* USER CODE BEGIN TX_Byte_Pool_Success */

    /* USER CODE END TX_Byte_Pool_Success */

    memory_ptr = (VOID *)&tx_app_byte_pool;
 8000804:	4b06      	ldr	r3, [pc, #24]	; (8000820 <tx_application_define+0x3c>)
 8000806:	60fb      	str	r3, [r7, #12]

    if (App_ThreadX_Init(memory_ptr) != TX_SUCCESS)
 8000808:	68f8      	ldr	r0, [r7, #12]
 800080a:	f000 f80b 	bl	8000824 <App_ThreadX_Init>

    /* USER CODE END  App_ThreadX_Init_Success */

  }

}
 800080e:	bf00      	nop
 8000810:	3710      	adds	r7, #16
 8000812:	46bd      	mov	sp, r7
 8000814:	bd80      	pop	{r7, pc}
 8000816:	bf00      	nop
 8000818:	20000090 	.word	0x20000090
 800081c:	080092e4 	.word	0x080092e4
 8000820:	20000490 	.word	0x20000490

08000824 <App_ThreadX_Init>:
  * @brief  Application ThreadX Initialization.
  * @param memory_ptr: memory pointer
  * @retval int
  */
UINT App_ThreadX_Init(VOID *memory_ptr)
{
 8000824:	b580      	push	{r7, lr}
 8000826:	b084      	sub	sp, #16
 8000828:	af00      	add	r7, sp, #0
 800082a:	6078      	str	r0, [r7, #4]
  UINT ret = TX_SUCCESS;
 800082c:	2300      	movs	r3, #0
 800082e:	60fb      	str	r3, [r7, #12]
  TX_BYTE_POOL *byte_pool = (TX_BYTE_POOL*)memory_ptr;
 8000830:	687b      	ldr	r3, [r7, #4]
 8000832:	60bb      	str	r3, [r7, #8]

  /* USER CODE BEGIN App_ThreadX_Init */
  (void)byte_pool;
  tm_main();
 8000834:	f001 f91e 	bl	8001a74 <tm_main>
  /* USER CODE END App_ThreadX_Init */

  return ret;
 8000838:	68fb      	ldr	r3, [r7, #12]
}
 800083a:	4618      	mov	r0, r3
 800083c:	3710      	adds	r7, #16
 800083e:	46bd      	mov	sp, r7
 8000840:	bd80      	pop	{r7, pc}

08000842 <MX_ThreadX_Init>:
  * @brief  MX_ThreadX_Init
  * @param  None
  * @retval None
  */
void MX_ThreadX_Init(void)
{
 8000842:	b580      	push	{r7, lr}
 8000844:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN  Before_Kernel_Start */

  /* USER CODE END  Before_Kernel_Start */

  tx_kernel_enter();
 8000846:	f006 fbf5 	bl	8007034 <_tx_initialize_kernel_enter>

  /* USER CODE BEGIN  Kernel_Start_Error */

  /* USER CODE END  Kernel_Start_Error */
}
 800084a:	bf00      	nop
 800084c:	bd80      	pop	{r7, pc}

0800084e <App_ThreadX_LowPower_Enter>:
  * @brief  App_ThreadX_LowPower_Enter
  * @param  None
  * @retval None
  */
void App_ThreadX_LowPower_Enter(void)
{
 800084e:	b480      	push	{r7}
 8000850:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN  App_ThreadX_LowPower_Enter */

  /* USER CODE END  App_ThreadX_LowPower_Enter */
}
 8000852:	bf00      	nop
 8000854:	46bd      	mov	sp, r7
 8000856:	f85d 7b04 	ldr.w	r7, [sp], #4
 800085a:	4770      	bx	lr

0800085c <App_ThreadX_LowPower_Exit>:
  * @brief  App_ThreadX_LowPower_Exit
  * @param  None
  * @retval None
  */
void App_ThreadX_LowPower_Exit(void)
{
 800085c:	b480      	push	{r7}
 800085e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN  App_ThreadX_LowPower_Exit */

  /* USER CODE END  App_ThreadX_LowPower_Exit */
}
 8000860:	bf00      	nop
 8000862:	46bd      	mov	sp, r7
 8000864:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000868:	4770      	bx	lr
	...

0800086c <_write>:
#define PUTCHAR_PROTOTYPE int __io_putchar(int ch)
/* USER CODE END PFP */

/* Private user code ---------------------------------------------------------*/
/* USER CODE BEGIN 0 */
int _write(int file, char *ptr, int len) {
 800086c:	b580      	push	{r7, lr}
 800086e:	b084      	sub	sp, #16
 8000870:	af00      	add	r7, sp, #0
 8000872:	60f8      	str	r0, [r7, #12]
 8000874:	60b9      	str	r1, [r7, #8]
 8000876:	607a      	str	r2, [r7, #4]
  HAL_UART_Transmit(&huart1, (uint8_t*) ptr, len, HAL_MAX_DELAY);
 8000878:	687b      	ldr	r3, [r7, #4]
 800087a:	b29a      	uxth	r2, r3
 800087c:	f04f 33ff 	mov.w	r3, #4294967295
 8000880:	68b9      	ldr	r1, [r7, #8]
 8000882:	4804      	ldr	r0, [pc, #16]	; (8000894 <_write+0x28>)
 8000884:	f005 fae9 	bl	8005e5a <HAL_UART_Transmit>
  return len;
 8000888:	687b      	ldr	r3, [r7, #4]
}
 800088a:	4618      	mov	r0, r3
 800088c:	3710      	adds	r7, #16
 800088e:	46bd      	mov	sp, r7
 8000890:	bd80      	pop	{r7, pc}
 8000892:	bf00      	nop
 8000894:	200006a8 	.word	0x200006a8

08000898 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000898:	b580      	push	{r7, lr}
 800089a:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 800089c:	f001 fada 	bl	8001e54 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 80008a0:	f000 f818 	bl	80008d4 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 80008a4:	f000 fab2 	bl	8000e0c <MX_GPIO_Init>
  MX_CRC_Init();
 80008a8:	f000 f87e 	bl	80009a8 <MX_CRC_Init>
  MX_DMA2D_Init();
 80008ac:	f000 f890 	bl	80009d0 <MX_DMA2D_Init>
  MX_FMC_Init();
 80008b0:	f000 fa5c 	bl	8000d6c <MX_FMC_Init>
  MX_I2C3_Init();
 80008b4:	f000 f8be 	bl	8000a34 <MX_I2C3_Init>
  MX_LTDC_Init();
 80008b8:	f000 f8fc 	bl	8000ab4 <MX_LTDC_Init>
  MX_SPI5_Init();
 80008bc:	f000 f97a 	bl	8000bb4 <MX_SPI5_Init>
  MX_TIM1_Init();
 80008c0:	f000 f9ae 	bl	8000c20 <MX_TIM1_Init>
  MX_USART1_UART_Init();
 80008c4:	f000 f9fc 	bl	8000cc0 <MX_USART1_UART_Init>
  MX_USB_OTG_HS_HCD_Init();
 80008c8:	f000 fa24 	bl	8000d14 <MX_USB_OTG_HS_HCD_Init>
  /* USER CODE BEGIN 2 */

  /* USER CODE END 2 */

  MX_ThreadX_Init();
 80008cc:	f7ff ffb9 	bl	8000842 <MX_ThreadX_Init>

  /* We should never get here as control is now taken by the scheduler */
  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
 80008d0:	e7fe      	b.n	80008d0 <main+0x38>
	...

080008d4 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 80008d4:	b580      	push	{r7, lr}
 80008d6:	b094      	sub	sp, #80	; 0x50
 80008d8:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 80008da:	f107 0320 	add.w	r3, r7, #32
 80008de:	2230      	movs	r2, #48	; 0x30
 80008e0:	2100      	movs	r1, #0
 80008e2:	4618      	mov	r0, r3
 80008e4:	f007 fd5c 	bl	80083a0 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 80008e8:	f107 030c 	add.w	r3, r7, #12
 80008ec:	2200      	movs	r2, #0
 80008ee:	601a      	str	r2, [r3, #0]
 80008f0:	605a      	str	r2, [r3, #4]
 80008f2:	609a      	str	r2, [r3, #8]
 80008f4:	60da      	str	r2, [r3, #12]
 80008f6:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 80008f8:	2300      	movs	r3, #0
 80008fa:	60bb      	str	r3, [r7, #8]
 80008fc:	4b28      	ldr	r3, [pc, #160]	; (80009a0 <SystemClock_Config+0xcc>)
 80008fe:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000900:	4a27      	ldr	r2, [pc, #156]	; (80009a0 <SystemClock_Config+0xcc>)
 8000902:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8000906:	6413      	str	r3, [r2, #64]	; 0x40
 8000908:	4b25      	ldr	r3, [pc, #148]	; (80009a0 <SystemClock_Config+0xcc>)
 800090a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800090c:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000910:	60bb      	str	r3, [r7, #8]
 8000912:	68bb      	ldr	r3, [r7, #8]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE3);
 8000914:	2300      	movs	r3, #0
 8000916:	607b      	str	r3, [r7, #4]
 8000918:	4b22      	ldr	r3, [pc, #136]	; (80009a4 <SystemClock_Config+0xd0>)
 800091a:	681b      	ldr	r3, [r3, #0]
 800091c:	f423 4340 	bic.w	r3, r3, #49152	; 0xc000
 8000920:	4a20      	ldr	r2, [pc, #128]	; (80009a4 <SystemClock_Config+0xd0>)
 8000922:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8000926:	6013      	str	r3, [r2, #0]
 8000928:	4b1e      	ldr	r3, [pc, #120]	; (80009a4 <SystemClock_Config+0xd0>)
 800092a:	681b      	ldr	r3, [r3, #0]
 800092c:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 8000930:	607b      	str	r3, [r7, #4]
 8000932:	687b      	ldr	r3, [r7, #4]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 8000934:	2301      	movs	r3, #1
 8000936:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 8000938:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 800093c:	627b      	str	r3, [r7, #36]	; 0x24
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 800093e:	2302      	movs	r3, #2
 8000940:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 8000942:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 8000946:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLM = 4;
 8000948:	2304      	movs	r3, #4
 800094a:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLN = 72;
 800094c:	2348      	movs	r3, #72	; 0x48
 800094e:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 8000950:	2302      	movs	r3, #2
 8000952:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLQ = 3;
 8000954:	2303      	movs	r3, #3
 8000956:	64fb      	str	r3, [r7, #76]	; 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000958:	f107 0320 	add.w	r3, r7, #32
 800095c:	4618      	mov	r0, r3
 800095e:	f003 fe67 	bl	8004630 <HAL_RCC_OscConfig>
 8000962:	4603      	mov	r3, r0
 8000964:	2b00      	cmp	r3, #0
 8000966:	d001      	beq.n	800096c <SystemClock_Config+0x98>
  {
    Error_Handler();
 8000968:	f000 fb72 	bl	8001050 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 800096c:	230f      	movs	r3, #15
 800096e:	60fb      	str	r3, [r7, #12]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8000970:	2302      	movs	r3, #2
 8000972:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8000974:	2300      	movs	r3, #0
 8000976:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 8000978:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 800097c:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 800097e:	2300      	movs	r3, #0
 8000980:	61fb      	str	r3, [r7, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 8000982:	f107 030c 	add.w	r3, r7, #12
 8000986:	2102      	movs	r1, #2
 8000988:	4618      	mov	r0, r3
 800098a:	f004 f8c9 	bl	8004b20 <HAL_RCC_ClockConfig>
 800098e:	4603      	mov	r3, r0
 8000990:	2b00      	cmp	r3, #0
 8000992:	d001      	beq.n	8000998 <SystemClock_Config+0xc4>
  {
    Error_Handler();
 8000994:	f000 fb5c 	bl	8001050 <Error_Handler>
  }
}
 8000998:	bf00      	nop
 800099a:	3750      	adds	r7, #80	; 0x50
 800099c:	46bd      	mov	sp, r7
 800099e:	bd80      	pop	{r7, pc}
 80009a0:	40023800 	.word	0x40023800
 80009a4:	40007000 	.word	0x40007000

080009a8 <MX_CRC_Init>:
  * @brief CRC Initialization Function
  * @param None
  * @retval None
  */
static void MX_CRC_Init(void)
{
 80009a8:	b580      	push	{r7, lr}
 80009aa:	af00      	add	r7, sp, #0
  /* USER CODE END CRC_Init 0 */

  /* USER CODE BEGIN CRC_Init 1 */

  /* USER CODE END CRC_Init 1 */
  hcrc.Instance = CRC;
 80009ac:	4b06      	ldr	r3, [pc, #24]	; (80009c8 <MX_CRC_Init+0x20>)
 80009ae:	4a07      	ldr	r2, [pc, #28]	; (80009cc <MX_CRC_Init+0x24>)
 80009b0:	601a      	str	r2, [r3, #0]
  if (HAL_CRC_Init(&hcrc) != HAL_OK)
 80009b2:	4805      	ldr	r0, [pc, #20]	; (80009c8 <MX_CRC_Init+0x20>)
 80009b4:	f001 fb96 	bl	80020e4 <HAL_CRC_Init>
 80009b8:	4603      	mov	r3, r0
 80009ba:	2b00      	cmp	r3, #0
 80009bc:	d001      	beq.n	80009c2 <MX_CRC_Init+0x1a>
  {
    Error_Handler();
 80009be:	f000 fb47 	bl	8001050 <Error_Handler>
  }
  /* USER CODE BEGIN CRC_Init 2 */

  /* USER CODE END CRC_Init 2 */

}
 80009c2:	bf00      	nop
 80009c4:	bd80      	pop	{r7, pc}
 80009c6:	bf00      	nop
 80009c8:	200004c4 	.word	0x200004c4
 80009cc:	40023000 	.word	0x40023000

080009d0 <MX_DMA2D_Init>:
  * @brief DMA2D Initialization Function
  * @param None
  * @retval None
  */
static void MX_DMA2D_Init(void)
{
 80009d0:	b580      	push	{r7, lr}
 80009d2:	af00      	add	r7, sp, #0
  /* USER CODE END DMA2D_Init 0 */

  /* USER CODE BEGIN DMA2D_Init 1 */

  /* USER CODE END DMA2D_Init 1 */
  hdma2d.Instance = DMA2D;
 80009d4:	4b15      	ldr	r3, [pc, #84]	; (8000a2c <MX_DMA2D_Init+0x5c>)
 80009d6:	4a16      	ldr	r2, [pc, #88]	; (8000a30 <MX_DMA2D_Init+0x60>)
 80009d8:	601a      	str	r2, [r3, #0]
  hdma2d.Init.Mode = DMA2D_M2M;
 80009da:	4b14      	ldr	r3, [pc, #80]	; (8000a2c <MX_DMA2D_Init+0x5c>)
 80009dc:	2200      	movs	r2, #0
 80009de:	605a      	str	r2, [r3, #4]
  hdma2d.Init.ColorMode = DMA2D_OUTPUT_ARGB8888;
 80009e0:	4b12      	ldr	r3, [pc, #72]	; (8000a2c <MX_DMA2D_Init+0x5c>)
 80009e2:	2200      	movs	r2, #0
 80009e4:	609a      	str	r2, [r3, #8]
  hdma2d.Init.OutputOffset = 0;
 80009e6:	4b11      	ldr	r3, [pc, #68]	; (8000a2c <MX_DMA2D_Init+0x5c>)
 80009e8:	2200      	movs	r2, #0
 80009ea:	60da      	str	r2, [r3, #12]
  hdma2d.LayerCfg[1].InputOffset = 0;
 80009ec:	4b0f      	ldr	r3, [pc, #60]	; (8000a2c <MX_DMA2D_Init+0x5c>)
 80009ee:	2200      	movs	r2, #0
 80009f0:	629a      	str	r2, [r3, #40]	; 0x28
  hdma2d.LayerCfg[1].InputColorMode = DMA2D_INPUT_ARGB8888;
 80009f2:	4b0e      	ldr	r3, [pc, #56]	; (8000a2c <MX_DMA2D_Init+0x5c>)
 80009f4:	2200      	movs	r2, #0
 80009f6:	62da      	str	r2, [r3, #44]	; 0x2c
  hdma2d.LayerCfg[1].AlphaMode = DMA2D_NO_MODIF_ALPHA;
 80009f8:	4b0c      	ldr	r3, [pc, #48]	; (8000a2c <MX_DMA2D_Init+0x5c>)
 80009fa:	2200      	movs	r2, #0
 80009fc:	631a      	str	r2, [r3, #48]	; 0x30
  hdma2d.LayerCfg[1].InputAlpha = 0;
 80009fe:	4b0b      	ldr	r3, [pc, #44]	; (8000a2c <MX_DMA2D_Init+0x5c>)
 8000a00:	2200      	movs	r2, #0
 8000a02:	635a      	str	r2, [r3, #52]	; 0x34
  if (HAL_DMA2D_Init(&hdma2d) != HAL_OK)
 8000a04:	4809      	ldr	r0, [pc, #36]	; (8000a2c <MX_DMA2D_Init+0x5c>)
 8000a06:	f001 fb89 	bl	800211c <HAL_DMA2D_Init>
 8000a0a:	4603      	mov	r3, r0
 8000a0c:	2b00      	cmp	r3, #0
 8000a0e:	d001      	beq.n	8000a14 <MX_DMA2D_Init+0x44>
  {
    Error_Handler();
 8000a10:	f000 fb1e 	bl	8001050 <Error_Handler>
  }
  if (HAL_DMA2D_ConfigLayer(&hdma2d, 1) != HAL_OK)
 8000a14:	2101      	movs	r1, #1
 8000a16:	4805      	ldr	r0, [pc, #20]	; (8000a2c <MX_DMA2D_Init+0x5c>)
 8000a18:	f001 fcda 	bl	80023d0 <HAL_DMA2D_ConfigLayer>
 8000a1c:	4603      	mov	r3, r0
 8000a1e:	2b00      	cmp	r3, #0
 8000a20:	d001      	beq.n	8000a26 <MX_DMA2D_Init+0x56>
  {
    Error_Handler();
 8000a22:	f000 fb15 	bl	8001050 <Error_Handler>
  }
  /* USER CODE BEGIN DMA2D_Init 2 */

  /* USER CODE END DMA2D_Init 2 */

}
 8000a26:	bf00      	nop
 8000a28:	bd80      	pop	{r7, pc}
 8000a2a:	bf00      	nop
 8000a2c:	200004cc 	.word	0x200004cc
 8000a30:	4002b000 	.word	0x4002b000

08000a34 <MX_I2C3_Init>:
  * @brief I2C3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C3_Init(void)
{
 8000a34:	b580      	push	{r7, lr}
 8000a36:	af00      	add	r7, sp, #0
  /* USER CODE END I2C3_Init 0 */

  /* USER CODE BEGIN I2C3_Init 1 */

  /* USER CODE END I2C3_Init 1 */
  hi2c3.Instance = I2C3;
 8000a38:	4b1b      	ldr	r3, [pc, #108]	; (8000aa8 <MX_I2C3_Init+0x74>)
 8000a3a:	4a1c      	ldr	r2, [pc, #112]	; (8000aac <MX_I2C3_Init+0x78>)
 8000a3c:	601a      	str	r2, [r3, #0]
  hi2c3.Init.ClockSpeed = 100000;
 8000a3e:	4b1a      	ldr	r3, [pc, #104]	; (8000aa8 <MX_I2C3_Init+0x74>)
 8000a40:	4a1b      	ldr	r2, [pc, #108]	; (8000ab0 <MX_I2C3_Init+0x7c>)
 8000a42:	605a      	str	r2, [r3, #4]
  hi2c3.Init.DutyCycle = I2C_DUTYCYCLE_2;
 8000a44:	4b18      	ldr	r3, [pc, #96]	; (8000aa8 <MX_I2C3_Init+0x74>)
 8000a46:	2200      	movs	r2, #0
 8000a48:	609a      	str	r2, [r3, #8]
  hi2c3.Init.OwnAddress1 = 0;
 8000a4a:	4b17      	ldr	r3, [pc, #92]	; (8000aa8 <MX_I2C3_Init+0x74>)
 8000a4c:	2200      	movs	r2, #0
 8000a4e:	60da      	str	r2, [r3, #12]
  hi2c3.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8000a50:	4b15      	ldr	r3, [pc, #84]	; (8000aa8 <MX_I2C3_Init+0x74>)
 8000a52:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 8000a56:	611a      	str	r2, [r3, #16]
  hi2c3.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8000a58:	4b13      	ldr	r3, [pc, #76]	; (8000aa8 <MX_I2C3_Init+0x74>)
 8000a5a:	2200      	movs	r2, #0
 8000a5c:	615a      	str	r2, [r3, #20]
  hi2c3.Init.OwnAddress2 = 0;
 8000a5e:	4b12      	ldr	r3, [pc, #72]	; (8000aa8 <MX_I2C3_Init+0x74>)
 8000a60:	2200      	movs	r2, #0
 8000a62:	619a      	str	r2, [r3, #24]
  hi2c3.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 8000a64:	4b10      	ldr	r3, [pc, #64]	; (8000aa8 <MX_I2C3_Init+0x74>)
 8000a66:	2200      	movs	r2, #0
 8000a68:	61da      	str	r2, [r3, #28]
  hi2c3.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 8000a6a:	4b0f      	ldr	r3, [pc, #60]	; (8000aa8 <MX_I2C3_Init+0x74>)
 8000a6c:	2200      	movs	r2, #0
 8000a6e:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c3) != HAL_OK)
 8000a70:	480d      	ldr	r0, [pc, #52]	; (8000aa8 <MX_I2C3_Init+0x74>)
 8000a72:	f003 f8b5 	bl	8003be0 <HAL_I2C_Init>
 8000a76:	4603      	mov	r3, r0
 8000a78:	2b00      	cmp	r3, #0
 8000a7a:	d001      	beq.n	8000a80 <MX_I2C3_Init+0x4c>
  {
    Error_Handler();
 8000a7c:	f000 fae8 	bl	8001050 <Error_Handler>
  }

  /** Configure Analogue filter
  */
  if (HAL_I2CEx_ConfigAnalogFilter(&hi2c3, I2C_ANALOGFILTER_ENABLE) != HAL_OK)
 8000a80:	2100      	movs	r1, #0
 8000a82:	4809      	ldr	r0, [pc, #36]	; (8000aa8 <MX_I2C3_Init+0x74>)
 8000a84:	f003 f9f0 	bl	8003e68 <HAL_I2CEx_ConfigAnalogFilter>
 8000a88:	4603      	mov	r3, r0
 8000a8a:	2b00      	cmp	r3, #0
 8000a8c:	d001      	beq.n	8000a92 <MX_I2C3_Init+0x5e>
  {
    Error_Handler();
 8000a8e:	f000 fadf 	bl	8001050 <Error_Handler>
  }

  /** Configure Digital filter
  */
  if (HAL_I2CEx_ConfigDigitalFilter(&hi2c3, 0) != HAL_OK)
 8000a92:	2100      	movs	r1, #0
 8000a94:	4804      	ldr	r0, [pc, #16]	; (8000aa8 <MX_I2C3_Init+0x74>)
 8000a96:	f003 fa23 	bl	8003ee0 <HAL_I2CEx_ConfigDigitalFilter>
 8000a9a:	4603      	mov	r3, r0
 8000a9c:	2b00      	cmp	r3, #0
 8000a9e:	d001      	beq.n	8000aa4 <MX_I2C3_Init+0x70>
  {
    Error_Handler();
 8000aa0:	f000 fad6 	bl	8001050 <Error_Handler>
  }
  /* USER CODE BEGIN I2C3_Init 2 */

  /* USER CODE END I2C3_Init 2 */

}
 8000aa4:	bf00      	nop
 8000aa6:	bd80      	pop	{r7, pc}
 8000aa8:	2000050c 	.word	0x2000050c
 8000aac:	40005c00 	.word	0x40005c00
 8000ab0:	000186a0 	.word	0x000186a0

08000ab4 <MX_LTDC_Init>:
  * @brief LTDC Initialization Function
  * @param None
  * @retval None
  */
static void MX_LTDC_Init(void)
{
 8000ab4:	b580      	push	{r7, lr}
 8000ab6:	b08e      	sub	sp, #56	; 0x38
 8000ab8:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN LTDC_Init 0 */

  /* USER CODE END LTDC_Init 0 */

  LTDC_LayerCfgTypeDef pLayerCfg = {0};
 8000aba:	1d3b      	adds	r3, r7, #4
 8000abc:	2234      	movs	r2, #52	; 0x34
 8000abe:	2100      	movs	r1, #0
 8000ac0:	4618      	mov	r0, r3
 8000ac2:	f007 fc6d 	bl	80083a0 <memset>

  /* USER CODE BEGIN LTDC_Init 1 */

  /* USER CODE END LTDC_Init 1 */
  hltdc.Instance = LTDC;
 8000ac6:	4b39      	ldr	r3, [pc, #228]	; (8000bac <MX_LTDC_Init+0xf8>)
 8000ac8:	4a39      	ldr	r2, [pc, #228]	; (8000bb0 <MX_LTDC_Init+0xfc>)
 8000aca:	601a      	str	r2, [r3, #0]
  hltdc.Init.HSPolarity = LTDC_HSPOLARITY_AL;
 8000acc:	4b37      	ldr	r3, [pc, #220]	; (8000bac <MX_LTDC_Init+0xf8>)
 8000ace:	2200      	movs	r2, #0
 8000ad0:	605a      	str	r2, [r3, #4]
  hltdc.Init.VSPolarity = LTDC_VSPOLARITY_AL;
 8000ad2:	4b36      	ldr	r3, [pc, #216]	; (8000bac <MX_LTDC_Init+0xf8>)
 8000ad4:	2200      	movs	r2, #0
 8000ad6:	609a      	str	r2, [r3, #8]
  hltdc.Init.DEPolarity = LTDC_DEPOLARITY_AL;
 8000ad8:	4b34      	ldr	r3, [pc, #208]	; (8000bac <MX_LTDC_Init+0xf8>)
 8000ada:	2200      	movs	r2, #0
 8000adc:	60da      	str	r2, [r3, #12]
  hltdc.Init.PCPolarity = LTDC_PCPOLARITY_IPC;
 8000ade:	4b33      	ldr	r3, [pc, #204]	; (8000bac <MX_LTDC_Init+0xf8>)
 8000ae0:	2200      	movs	r2, #0
 8000ae2:	611a      	str	r2, [r3, #16]
  hltdc.Init.HorizontalSync = 9;
 8000ae4:	4b31      	ldr	r3, [pc, #196]	; (8000bac <MX_LTDC_Init+0xf8>)
 8000ae6:	2209      	movs	r2, #9
 8000ae8:	615a      	str	r2, [r3, #20]
  hltdc.Init.VerticalSync = 1;
 8000aea:	4b30      	ldr	r3, [pc, #192]	; (8000bac <MX_LTDC_Init+0xf8>)
 8000aec:	2201      	movs	r2, #1
 8000aee:	619a      	str	r2, [r3, #24]
  hltdc.Init.AccumulatedHBP = 29;
 8000af0:	4b2e      	ldr	r3, [pc, #184]	; (8000bac <MX_LTDC_Init+0xf8>)
 8000af2:	221d      	movs	r2, #29
 8000af4:	61da      	str	r2, [r3, #28]
  hltdc.Init.AccumulatedVBP = 3;
 8000af6:	4b2d      	ldr	r3, [pc, #180]	; (8000bac <MX_LTDC_Init+0xf8>)
 8000af8:	2203      	movs	r2, #3
 8000afa:	621a      	str	r2, [r3, #32]
  hltdc.Init.AccumulatedActiveW = 269;
 8000afc:	4b2b      	ldr	r3, [pc, #172]	; (8000bac <MX_LTDC_Init+0xf8>)
 8000afe:	f240 120d 	movw	r2, #269	; 0x10d
 8000b02:	625a      	str	r2, [r3, #36]	; 0x24
  hltdc.Init.AccumulatedActiveH = 323;
 8000b04:	4b29      	ldr	r3, [pc, #164]	; (8000bac <MX_LTDC_Init+0xf8>)
 8000b06:	f240 1243 	movw	r2, #323	; 0x143
 8000b0a:	629a      	str	r2, [r3, #40]	; 0x28
  hltdc.Init.TotalWidth = 279;
 8000b0c:	4b27      	ldr	r3, [pc, #156]	; (8000bac <MX_LTDC_Init+0xf8>)
 8000b0e:	f240 1217 	movw	r2, #279	; 0x117
 8000b12:	62da      	str	r2, [r3, #44]	; 0x2c
  hltdc.Init.TotalHeigh = 327;
 8000b14:	4b25      	ldr	r3, [pc, #148]	; (8000bac <MX_LTDC_Init+0xf8>)
 8000b16:	f240 1247 	movw	r2, #327	; 0x147
 8000b1a:	631a      	str	r2, [r3, #48]	; 0x30
  hltdc.Init.Backcolor.Blue = 0;
 8000b1c:	4b23      	ldr	r3, [pc, #140]	; (8000bac <MX_LTDC_Init+0xf8>)
 8000b1e:	2200      	movs	r2, #0
 8000b20:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  hltdc.Init.Backcolor.Green = 0;
 8000b24:	4b21      	ldr	r3, [pc, #132]	; (8000bac <MX_LTDC_Init+0xf8>)
 8000b26:	2200      	movs	r2, #0
 8000b28:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
  hltdc.Init.Backcolor.Red = 0;
 8000b2c:	4b1f      	ldr	r3, [pc, #124]	; (8000bac <MX_LTDC_Init+0xf8>)
 8000b2e:	2200      	movs	r2, #0
 8000b30:	f883 2036 	strb.w	r2, [r3, #54]	; 0x36
  if (HAL_LTDC_Init(&hltdc) != HAL_OK)
 8000b34:	481d      	ldr	r0, [pc, #116]	; (8000bac <MX_LTDC_Init+0xf8>)
 8000b36:	f003 fa13 	bl	8003f60 <HAL_LTDC_Init>
 8000b3a:	4603      	mov	r3, r0
 8000b3c:	2b00      	cmp	r3, #0
 8000b3e:	d001      	beq.n	8000b44 <MX_LTDC_Init+0x90>
  {
    Error_Handler();
 8000b40:	f000 fa86 	bl	8001050 <Error_Handler>
  }
  pLayerCfg.WindowX0 = 0;
 8000b44:	2300      	movs	r3, #0
 8000b46:	607b      	str	r3, [r7, #4]
  pLayerCfg.WindowX1 = 240;
 8000b48:	23f0      	movs	r3, #240	; 0xf0
 8000b4a:	60bb      	str	r3, [r7, #8]
  pLayerCfg.WindowY0 = 0;
 8000b4c:	2300      	movs	r3, #0
 8000b4e:	60fb      	str	r3, [r7, #12]
  pLayerCfg.WindowY1 = 320;
 8000b50:	f44f 73a0 	mov.w	r3, #320	; 0x140
 8000b54:	613b      	str	r3, [r7, #16]
  pLayerCfg.PixelFormat = LTDC_PIXEL_FORMAT_RGB565;
 8000b56:	2302      	movs	r3, #2
 8000b58:	617b      	str	r3, [r7, #20]
  pLayerCfg.Alpha = 255;
 8000b5a:	23ff      	movs	r3, #255	; 0xff
 8000b5c:	61bb      	str	r3, [r7, #24]
  pLayerCfg.Alpha0 = 0;
 8000b5e:	2300      	movs	r3, #0
 8000b60:	61fb      	str	r3, [r7, #28]
  pLayerCfg.BlendingFactor1 = LTDC_BLENDING_FACTOR1_PAxCA;
 8000b62:	f44f 63c0 	mov.w	r3, #1536	; 0x600
 8000b66:	623b      	str	r3, [r7, #32]
  pLayerCfg.BlendingFactor2 = LTDC_BLENDING_FACTOR2_PAxCA;
 8000b68:	2307      	movs	r3, #7
 8000b6a:	627b      	str	r3, [r7, #36]	; 0x24
  pLayerCfg.FBStartAdress = 0xD0000000;
 8000b6c:	f04f 4350 	mov.w	r3, #3489660928	; 0xd0000000
 8000b70:	62bb      	str	r3, [r7, #40]	; 0x28
  pLayerCfg.ImageWidth = 240;
 8000b72:	23f0      	movs	r3, #240	; 0xf0
 8000b74:	62fb      	str	r3, [r7, #44]	; 0x2c
  pLayerCfg.ImageHeight = 320;
 8000b76:	f44f 73a0 	mov.w	r3, #320	; 0x140
 8000b7a:	633b      	str	r3, [r7, #48]	; 0x30
  pLayerCfg.Backcolor.Blue = 0;
 8000b7c:	2300      	movs	r3, #0
 8000b7e:	f887 3034 	strb.w	r3, [r7, #52]	; 0x34
  pLayerCfg.Backcolor.Green = 0;
 8000b82:	2300      	movs	r3, #0
 8000b84:	f887 3035 	strb.w	r3, [r7, #53]	; 0x35
  pLayerCfg.Backcolor.Red = 0;
 8000b88:	2300      	movs	r3, #0
 8000b8a:	f887 3036 	strb.w	r3, [r7, #54]	; 0x36
  if (HAL_LTDC_ConfigLayer(&hltdc, &pLayerCfg, 0) != HAL_OK)
 8000b8e:	1d3b      	adds	r3, r7, #4
 8000b90:	2200      	movs	r2, #0
 8000b92:	4619      	mov	r1, r3
 8000b94:	4805      	ldr	r0, [pc, #20]	; (8000bac <MX_LTDC_Init+0xf8>)
 8000b96:	f003 fb75 	bl	8004284 <HAL_LTDC_ConfigLayer>
 8000b9a:	4603      	mov	r3, r0
 8000b9c:	2b00      	cmp	r3, #0
 8000b9e:	d001      	beq.n	8000ba4 <MX_LTDC_Init+0xf0>
  {
    Error_Handler();
 8000ba0:	f000 fa56 	bl	8001050 <Error_Handler>
  }
  /* USER CODE BEGIN LTDC_Init 2 */

  /* USER CODE END LTDC_Init 2 */

}
 8000ba4:	bf00      	nop
 8000ba6:	3738      	adds	r7, #56	; 0x38
 8000ba8:	46bd      	mov	sp, r7
 8000baa:	bd80      	pop	{r7, pc}
 8000bac:	20000560 	.word	0x20000560
 8000bb0:	40016800 	.word	0x40016800

08000bb4 <MX_SPI5_Init>:
  * @brief SPI5 Initialization Function
  * @param None
  * @retval None
  */
static void MX_SPI5_Init(void)
{
 8000bb4:	b580      	push	{r7, lr}
 8000bb6:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN SPI5_Init 1 */

  /* USER CODE END SPI5_Init 1 */
  /* SPI5 parameter configuration*/
  hspi5.Instance = SPI5;
 8000bb8:	4b17      	ldr	r3, [pc, #92]	; (8000c18 <MX_SPI5_Init+0x64>)
 8000bba:	4a18      	ldr	r2, [pc, #96]	; (8000c1c <MX_SPI5_Init+0x68>)
 8000bbc:	601a      	str	r2, [r3, #0]
  hspi5.Init.Mode = SPI_MODE_MASTER;
 8000bbe:	4b16      	ldr	r3, [pc, #88]	; (8000c18 <MX_SPI5_Init+0x64>)
 8000bc0:	f44f 7282 	mov.w	r2, #260	; 0x104
 8000bc4:	605a      	str	r2, [r3, #4]
  hspi5.Init.Direction = SPI_DIRECTION_2LINES;
 8000bc6:	4b14      	ldr	r3, [pc, #80]	; (8000c18 <MX_SPI5_Init+0x64>)
 8000bc8:	2200      	movs	r2, #0
 8000bca:	609a      	str	r2, [r3, #8]
  hspi5.Init.DataSize = SPI_DATASIZE_8BIT;
 8000bcc:	4b12      	ldr	r3, [pc, #72]	; (8000c18 <MX_SPI5_Init+0x64>)
 8000bce:	2200      	movs	r2, #0
 8000bd0:	60da      	str	r2, [r3, #12]
  hspi5.Init.CLKPolarity = SPI_POLARITY_LOW;
 8000bd2:	4b11      	ldr	r3, [pc, #68]	; (8000c18 <MX_SPI5_Init+0x64>)
 8000bd4:	2200      	movs	r2, #0
 8000bd6:	611a      	str	r2, [r3, #16]
  hspi5.Init.CLKPhase = SPI_PHASE_1EDGE;
 8000bd8:	4b0f      	ldr	r3, [pc, #60]	; (8000c18 <MX_SPI5_Init+0x64>)
 8000bda:	2200      	movs	r2, #0
 8000bdc:	615a      	str	r2, [r3, #20]
  hspi5.Init.NSS = SPI_NSS_SOFT;
 8000bde:	4b0e      	ldr	r3, [pc, #56]	; (8000c18 <MX_SPI5_Init+0x64>)
 8000be0:	f44f 7200 	mov.w	r2, #512	; 0x200
 8000be4:	619a      	str	r2, [r3, #24]
  hspi5.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_16;
 8000be6:	4b0c      	ldr	r3, [pc, #48]	; (8000c18 <MX_SPI5_Init+0x64>)
 8000be8:	2218      	movs	r2, #24
 8000bea:	61da      	str	r2, [r3, #28]
  hspi5.Init.FirstBit = SPI_FIRSTBIT_MSB;
 8000bec:	4b0a      	ldr	r3, [pc, #40]	; (8000c18 <MX_SPI5_Init+0x64>)
 8000bee:	2200      	movs	r2, #0
 8000bf0:	621a      	str	r2, [r3, #32]
  hspi5.Init.TIMode = SPI_TIMODE_DISABLE;
 8000bf2:	4b09      	ldr	r3, [pc, #36]	; (8000c18 <MX_SPI5_Init+0x64>)
 8000bf4:	2200      	movs	r2, #0
 8000bf6:	625a      	str	r2, [r3, #36]	; 0x24
  hspi5.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8000bf8:	4b07      	ldr	r3, [pc, #28]	; (8000c18 <MX_SPI5_Init+0x64>)
 8000bfa:	2200      	movs	r2, #0
 8000bfc:	629a      	str	r2, [r3, #40]	; 0x28
  hspi5.Init.CRCPolynomial = 10;
 8000bfe:	4b06      	ldr	r3, [pc, #24]	; (8000c18 <MX_SPI5_Init+0x64>)
 8000c00:	220a      	movs	r2, #10
 8000c02:	62da      	str	r2, [r3, #44]	; 0x2c
  if (HAL_SPI_Init(&hspi5) != HAL_OK)
 8000c04:	4804      	ldr	r0, [pc, #16]	; (8000c18 <MX_SPI5_Init+0x64>)
 8000c06:	f004 fbd1 	bl	80053ac <HAL_SPI_Init>
 8000c0a:	4603      	mov	r3, r0
 8000c0c:	2b00      	cmp	r3, #0
 8000c0e:	d001      	beq.n	8000c14 <MX_SPI5_Init+0x60>
  {
    Error_Handler();
 8000c10:	f000 fa1e 	bl	8001050 <Error_Handler>
  }
  /* USER CODE BEGIN SPI5_Init 2 */

  /* USER CODE END SPI5_Init 2 */

}
 8000c14:	bf00      	nop
 8000c16:	bd80      	pop	{r7, pc}
 8000c18:	20000608 	.word	0x20000608
 8000c1c:	40015000 	.word	0x40015000

08000c20 <MX_TIM1_Init>:
  * @brief TIM1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM1_Init(void)
{
 8000c20:	b580      	push	{r7, lr}
 8000c22:	b086      	sub	sp, #24
 8000c24:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM1_Init 0 */

  /* USER CODE END TIM1_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8000c26:	f107 0308 	add.w	r3, r7, #8
 8000c2a:	2200      	movs	r2, #0
 8000c2c:	601a      	str	r2, [r3, #0]
 8000c2e:	605a      	str	r2, [r3, #4]
 8000c30:	609a      	str	r2, [r3, #8]
 8000c32:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8000c34:	463b      	mov	r3, r7
 8000c36:	2200      	movs	r2, #0
 8000c38:	601a      	str	r2, [r3, #0]
 8000c3a:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM1_Init 1 */

  /* USER CODE END TIM1_Init 1 */
  htim1.Instance = TIM1;
 8000c3c:	4b1e      	ldr	r3, [pc, #120]	; (8000cb8 <MX_TIM1_Init+0x98>)
 8000c3e:	4a1f      	ldr	r2, [pc, #124]	; (8000cbc <MX_TIM1_Init+0x9c>)
 8000c40:	601a      	str	r2, [r3, #0]
  htim1.Init.Prescaler = 0;
 8000c42:	4b1d      	ldr	r3, [pc, #116]	; (8000cb8 <MX_TIM1_Init+0x98>)
 8000c44:	2200      	movs	r2, #0
 8000c46:	605a      	str	r2, [r3, #4]
  htim1.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000c48:	4b1b      	ldr	r3, [pc, #108]	; (8000cb8 <MX_TIM1_Init+0x98>)
 8000c4a:	2200      	movs	r2, #0
 8000c4c:	609a      	str	r2, [r3, #8]
  htim1.Init.Period = 65535;
 8000c4e:	4b1a      	ldr	r3, [pc, #104]	; (8000cb8 <MX_TIM1_Init+0x98>)
 8000c50:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8000c54:	60da      	str	r2, [r3, #12]
  htim1.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8000c56:	4b18      	ldr	r3, [pc, #96]	; (8000cb8 <MX_TIM1_Init+0x98>)
 8000c58:	2200      	movs	r2, #0
 8000c5a:	611a      	str	r2, [r3, #16]
  htim1.Init.RepetitionCounter = 0;
 8000c5c:	4b16      	ldr	r3, [pc, #88]	; (8000cb8 <MX_TIM1_Init+0x98>)
 8000c5e:	2200      	movs	r2, #0
 8000c60:	615a      	str	r2, [r3, #20]
  htim1.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8000c62:	4b15      	ldr	r3, [pc, #84]	; (8000cb8 <MX_TIM1_Init+0x98>)
 8000c64:	2200      	movs	r2, #0
 8000c66:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim1) != HAL_OK)
 8000c68:	4813      	ldr	r0, [pc, #76]	; (8000cb8 <MX_TIM1_Init+0x98>)
 8000c6a:	f004 fc28 	bl	80054be <HAL_TIM_Base_Init>
 8000c6e:	4603      	mov	r3, r0
 8000c70:	2b00      	cmp	r3, #0
 8000c72:	d001      	beq.n	8000c78 <MX_TIM1_Init+0x58>
  {
    Error_Handler();
 8000c74:	f000 f9ec 	bl	8001050 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8000c78:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8000c7c:	60bb      	str	r3, [r7, #8]
  if (HAL_TIM_ConfigClockSource(&htim1, &sClockSourceConfig) != HAL_OK)
 8000c7e:	f107 0308 	add.w	r3, r7, #8
 8000c82:	4619      	mov	r1, r3
 8000c84:	480c      	ldr	r0, [pc, #48]	; (8000cb8 <MX_TIM1_Init+0x98>)
 8000c86:	f004 fde1 	bl	800584c <HAL_TIM_ConfigClockSource>
 8000c8a:	4603      	mov	r3, r0
 8000c8c:	2b00      	cmp	r3, #0
 8000c8e:	d001      	beq.n	8000c94 <MX_TIM1_Init+0x74>
  {
    Error_Handler();
 8000c90:	f000 f9de 	bl	8001050 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8000c94:	2300      	movs	r3, #0
 8000c96:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8000c98:	2300      	movs	r3, #0
 8000c9a:	607b      	str	r3, [r7, #4]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim1, &sMasterConfig) != HAL_OK)
 8000c9c:	463b      	mov	r3, r7
 8000c9e:	4619      	mov	r1, r3
 8000ca0:	4805      	ldr	r0, [pc, #20]	; (8000cb8 <MX_TIM1_Init+0x98>)
 8000ca2:	f004 fffd 	bl	8005ca0 <HAL_TIMEx_MasterConfigSynchronization>
 8000ca6:	4603      	mov	r3, r0
 8000ca8:	2b00      	cmp	r3, #0
 8000caa:	d001      	beq.n	8000cb0 <MX_TIM1_Init+0x90>
  {
    Error_Handler();
 8000cac:	f000 f9d0 	bl	8001050 <Error_Handler>
  }
  /* USER CODE BEGIN TIM1_Init 2 */

  /* USER CODE END TIM1_Init 2 */

}
 8000cb0:	bf00      	nop
 8000cb2:	3718      	adds	r7, #24
 8000cb4:	46bd      	mov	sp, r7
 8000cb6:	bd80      	pop	{r7, pc}
 8000cb8:	20000660 	.word	0x20000660
 8000cbc:	40010000 	.word	0x40010000

08000cc0 <MX_USART1_UART_Init>:
  * @brief USART1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART1_UART_Init(void)
{
 8000cc0:	b580      	push	{r7, lr}
 8000cc2:	af00      	add	r7, sp, #0
  /* USER CODE END USART1_Init 0 */

  /* USER CODE BEGIN USART1_Init 1 */

  /* USER CODE END USART1_Init 1 */
  huart1.Instance = USART1;
 8000cc4:	4b11      	ldr	r3, [pc, #68]	; (8000d0c <MX_USART1_UART_Init+0x4c>)
 8000cc6:	4a12      	ldr	r2, [pc, #72]	; (8000d10 <MX_USART1_UART_Init+0x50>)
 8000cc8:	601a      	str	r2, [r3, #0]
  huart1.Init.BaudRate = 115200;
 8000cca:	4b10      	ldr	r3, [pc, #64]	; (8000d0c <MX_USART1_UART_Init+0x4c>)
 8000ccc:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8000cd0:	605a      	str	r2, [r3, #4]
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
 8000cd2:	4b0e      	ldr	r3, [pc, #56]	; (8000d0c <MX_USART1_UART_Init+0x4c>)
 8000cd4:	2200      	movs	r2, #0
 8000cd6:	609a      	str	r2, [r3, #8]
  huart1.Init.StopBits = UART_STOPBITS_1;
 8000cd8:	4b0c      	ldr	r3, [pc, #48]	; (8000d0c <MX_USART1_UART_Init+0x4c>)
 8000cda:	2200      	movs	r2, #0
 8000cdc:	60da      	str	r2, [r3, #12]
  huart1.Init.Parity = UART_PARITY_NONE;
 8000cde:	4b0b      	ldr	r3, [pc, #44]	; (8000d0c <MX_USART1_UART_Init+0x4c>)
 8000ce0:	2200      	movs	r2, #0
 8000ce2:	611a      	str	r2, [r3, #16]
  huart1.Init.Mode = UART_MODE_TX_RX;
 8000ce4:	4b09      	ldr	r3, [pc, #36]	; (8000d0c <MX_USART1_UART_Init+0x4c>)
 8000ce6:	220c      	movs	r2, #12
 8000ce8:	615a      	str	r2, [r3, #20]
  huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8000cea:	4b08      	ldr	r3, [pc, #32]	; (8000d0c <MX_USART1_UART_Init+0x4c>)
 8000cec:	2200      	movs	r2, #0
 8000cee:	619a      	str	r2, [r3, #24]
  huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 8000cf0:	4b06      	ldr	r3, [pc, #24]	; (8000d0c <MX_USART1_UART_Init+0x4c>)
 8000cf2:	2200      	movs	r2, #0
 8000cf4:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart1) != HAL_OK)
 8000cf6:	4805      	ldr	r0, [pc, #20]	; (8000d0c <MX_USART1_UART_Init+0x4c>)
 8000cf8:	f005 f862 	bl	8005dc0 <HAL_UART_Init>
 8000cfc:	4603      	mov	r3, r0
 8000cfe:	2b00      	cmp	r3, #0
 8000d00:	d001      	beq.n	8000d06 <MX_USART1_UART_Init+0x46>
  {
    Error_Handler();
 8000d02:	f000 f9a5 	bl	8001050 <Error_Handler>
  }
  /* USER CODE BEGIN USART1_Init 2 */

  /* USER CODE END USART1_Init 2 */

}
 8000d06:	bf00      	nop
 8000d08:	bd80      	pop	{r7, pc}
 8000d0a:	bf00      	nop
 8000d0c:	200006a8 	.word	0x200006a8
 8000d10:	40011000 	.word	0x40011000

08000d14 <MX_USB_OTG_HS_HCD_Init>:
  * @brief USB_OTG_HS Initialization Function
  * @param None
  * @retval None
  */
static void MX_USB_OTG_HS_HCD_Init(void)
{
 8000d14:	b580      	push	{r7, lr}
 8000d16:	af00      	add	r7, sp, #0
  /* USER CODE END USB_OTG_HS_Init 0 */

  /* USER CODE BEGIN USB_OTG_HS_Init 1 */

  /* USER CODE END USB_OTG_HS_Init 1 */
  hhcd_USB_OTG_HS.Instance = USB_OTG_HS;
 8000d18:	4b12      	ldr	r3, [pc, #72]	; (8000d64 <MX_USB_OTG_HS_HCD_Init+0x50>)
 8000d1a:	4a13      	ldr	r2, [pc, #76]	; (8000d68 <MX_USB_OTG_HS_HCD_Init+0x54>)
 8000d1c:	601a      	str	r2, [r3, #0]
  hhcd_USB_OTG_HS.Init.Host_channels = 12;
 8000d1e:	4b11      	ldr	r3, [pc, #68]	; (8000d64 <MX_USB_OTG_HS_HCD_Init+0x50>)
 8000d20:	220c      	movs	r2, #12
 8000d22:	609a      	str	r2, [r3, #8]
  hhcd_USB_OTG_HS.Init.speed = HCD_SPEED_FULL;
 8000d24:	4b0f      	ldr	r3, [pc, #60]	; (8000d64 <MX_USB_OTG_HS_HCD_Init+0x50>)
 8000d26:	2201      	movs	r2, #1
 8000d28:	60da      	str	r2, [r3, #12]
  hhcd_USB_OTG_HS.Init.dma_enable = DISABLE;
 8000d2a:	4b0e      	ldr	r3, [pc, #56]	; (8000d64 <MX_USB_OTG_HS_HCD_Init+0x50>)
 8000d2c:	2200      	movs	r2, #0
 8000d2e:	611a      	str	r2, [r3, #16]
  hhcd_USB_OTG_HS.Init.phy_itface = USB_OTG_EMBEDDED_PHY;
 8000d30:	4b0c      	ldr	r3, [pc, #48]	; (8000d64 <MX_USB_OTG_HS_HCD_Init+0x50>)
 8000d32:	2202      	movs	r2, #2
 8000d34:	619a      	str	r2, [r3, #24]
  hhcd_USB_OTG_HS.Init.Sof_enable = DISABLE;
 8000d36:	4b0b      	ldr	r3, [pc, #44]	; (8000d64 <MX_USB_OTG_HS_HCD_Init+0x50>)
 8000d38:	2200      	movs	r2, #0
 8000d3a:	61da      	str	r2, [r3, #28]
  hhcd_USB_OTG_HS.Init.low_power_enable = DISABLE;
 8000d3c:	4b09      	ldr	r3, [pc, #36]	; (8000d64 <MX_USB_OTG_HS_HCD_Init+0x50>)
 8000d3e:	2200      	movs	r2, #0
 8000d40:	621a      	str	r2, [r3, #32]
  hhcd_USB_OTG_HS.Init.vbus_sensing_enable = DISABLE;
 8000d42:	4b08      	ldr	r3, [pc, #32]	; (8000d64 <MX_USB_OTG_HS_HCD_Init+0x50>)
 8000d44:	2200      	movs	r2, #0
 8000d46:	62da      	str	r2, [r3, #44]	; 0x2c
  hhcd_USB_OTG_HS.Init.use_external_vbus = DISABLE;
 8000d48:	4b06      	ldr	r3, [pc, #24]	; (8000d64 <MX_USB_OTG_HS_HCD_Init+0x50>)
 8000d4a:	2200      	movs	r2, #0
 8000d4c:	635a      	str	r2, [r3, #52]	; 0x34
  if (HAL_HCD_Init(&hhcd_USB_OTG_HS) != HAL_OK)
 8000d4e:	4805      	ldr	r0, [pc, #20]	; (8000d64 <MX_USB_OTG_HS_HCD_Init+0x50>)
 8000d50:	f001 fd95 	bl	800287e <HAL_HCD_Init>
 8000d54:	4603      	mov	r3, r0
 8000d56:	2b00      	cmp	r3, #0
 8000d58:	d001      	beq.n	8000d5e <MX_USB_OTG_HS_HCD_Init+0x4a>
  {
    Error_Handler();
 8000d5a:	f000 f979 	bl	8001050 <Error_Handler>
  }
  /* USER CODE BEGIN USB_OTG_HS_Init 2 */

  /* USER CODE END USB_OTG_HS_Init 2 */

}
 8000d5e:	bf00      	nop
 8000d60:	bd80      	pop	{r7, pc}
 8000d62:	bf00      	nop
 8000d64:	200006ec 	.word	0x200006ec
 8000d68:	40040000 	.word	0x40040000

08000d6c <MX_FMC_Init>:

/* FMC initialization function */
static void MX_FMC_Init(void)
{
 8000d6c:	b580      	push	{r7, lr}
 8000d6e:	b088      	sub	sp, #32
 8000d70:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN FMC_Init 0 */

  /* USER CODE END FMC_Init 0 */

  FMC_SDRAM_TimingTypeDef SdramTiming = {0};
 8000d72:	1d3b      	adds	r3, r7, #4
 8000d74:	2200      	movs	r2, #0
 8000d76:	601a      	str	r2, [r3, #0]
 8000d78:	605a      	str	r2, [r3, #4]
 8000d7a:	609a      	str	r2, [r3, #8]
 8000d7c:	60da      	str	r2, [r3, #12]
 8000d7e:	611a      	str	r2, [r3, #16]
 8000d80:	615a      	str	r2, [r3, #20]
 8000d82:	619a      	str	r2, [r3, #24]

  /* USER CODE END FMC_Init 1 */

  /** Perform the SDRAM1 memory initialization sequence
  */
  hsdram1.Instance = FMC_SDRAM_DEVICE;
 8000d84:	4b1f      	ldr	r3, [pc, #124]	; (8000e04 <MX_FMC_Init+0x98>)
 8000d86:	4a20      	ldr	r2, [pc, #128]	; (8000e08 <MX_FMC_Init+0x9c>)
 8000d88:	601a      	str	r2, [r3, #0]
  /* hsdram1.Init */
  hsdram1.Init.SDBank = FMC_SDRAM_BANK2;
 8000d8a:	4b1e      	ldr	r3, [pc, #120]	; (8000e04 <MX_FMC_Init+0x98>)
 8000d8c:	2201      	movs	r2, #1
 8000d8e:	605a      	str	r2, [r3, #4]
  hsdram1.Init.ColumnBitsNumber = FMC_SDRAM_COLUMN_BITS_NUM_8;
 8000d90:	4b1c      	ldr	r3, [pc, #112]	; (8000e04 <MX_FMC_Init+0x98>)
 8000d92:	2200      	movs	r2, #0
 8000d94:	609a      	str	r2, [r3, #8]
  hsdram1.Init.RowBitsNumber = FMC_SDRAM_ROW_BITS_NUM_12;
 8000d96:	4b1b      	ldr	r3, [pc, #108]	; (8000e04 <MX_FMC_Init+0x98>)
 8000d98:	2204      	movs	r2, #4
 8000d9a:	60da      	str	r2, [r3, #12]
  hsdram1.Init.MemoryDataWidth = FMC_SDRAM_MEM_BUS_WIDTH_16;
 8000d9c:	4b19      	ldr	r3, [pc, #100]	; (8000e04 <MX_FMC_Init+0x98>)
 8000d9e:	2210      	movs	r2, #16
 8000da0:	611a      	str	r2, [r3, #16]
  hsdram1.Init.InternalBankNumber = FMC_SDRAM_INTERN_BANKS_NUM_4;
 8000da2:	4b18      	ldr	r3, [pc, #96]	; (8000e04 <MX_FMC_Init+0x98>)
 8000da4:	2240      	movs	r2, #64	; 0x40
 8000da6:	615a      	str	r2, [r3, #20]
  hsdram1.Init.CASLatency = FMC_SDRAM_CAS_LATENCY_3;
 8000da8:	4b16      	ldr	r3, [pc, #88]	; (8000e04 <MX_FMC_Init+0x98>)
 8000daa:	f44f 72c0 	mov.w	r2, #384	; 0x180
 8000dae:	619a      	str	r2, [r3, #24]
  hsdram1.Init.WriteProtection = FMC_SDRAM_WRITE_PROTECTION_DISABLE;
 8000db0:	4b14      	ldr	r3, [pc, #80]	; (8000e04 <MX_FMC_Init+0x98>)
 8000db2:	2200      	movs	r2, #0
 8000db4:	61da      	str	r2, [r3, #28]
  hsdram1.Init.SDClockPeriod = FMC_SDRAM_CLOCK_PERIOD_2;
 8000db6:	4b13      	ldr	r3, [pc, #76]	; (8000e04 <MX_FMC_Init+0x98>)
 8000db8:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8000dbc:	621a      	str	r2, [r3, #32]
  hsdram1.Init.ReadBurst = FMC_SDRAM_RBURST_DISABLE;
 8000dbe:	4b11      	ldr	r3, [pc, #68]	; (8000e04 <MX_FMC_Init+0x98>)
 8000dc0:	2200      	movs	r2, #0
 8000dc2:	625a      	str	r2, [r3, #36]	; 0x24
  hsdram1.Init.ReadPipeDelay = FMC_SDRAM_RPIPE_DELAY_1;
 8000dc4:	4b0f      	ldr	r3, [pc, #60]	; (8000e04 <MX_FMC_Init+0x98>)
 8000dc6:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 8000dca:	629a      	str	r2, [r3, #40]	; 0x28
  /* SdramTiming */
  SdramTiming.LoadToActiveDelay = 2;
 8000dcc:	2302      	movs	r3, #2
 8000dce:	607b      	str	r3, [r7, #4]
  SdramTiming.ExitSelfRefreshDelay = 7;
 8000dd0:	2307      	movs	r3, #7
 8000dd2:	60bb      	str	r3, [r7, #8]
  SdramTiming.SelfRefreshTime = 4;
 8000dd4:	2304      	movs	r3, #4
 8000dd6:	60fb      	str	r3, [r7, #12]
  SdramTiming.RowCycleDelay = 7;
 8000dd8:	2307      	movs	r3, #7
 8000dda:	613b      	str	r3, [r7, #16]
  SdramTiming.WriteRecoveryTime = 3;
 8000ddc:	2303      	movs	r3, #3
 8000dde:	617b      	str	r3, [r7, #20]
  SdramTiming.RPDelay = 2;
 8000de0:	2302      	movs	r3, #2
 8000de2:	61bb      	str	r3, [r7, #24]
  SdramTiming.RCDDelay = 2;
 8000de4:	2302      	movs	r3, #2
 8000de6:	61fb      	str	r3, [r7, #28]

  if (HAL_SDRAM_Init(&hsdram1, &SdramTiming) != HAL_OK)
 8000de8:	1d3b      	adds	r3, r7, #4
 8000dea:	4619      	mov	r1, r3
 8000dec:	4805      	ldr	r0, [pc, #20]	; (8000e04 <MX_FMC_Init+0x98>)
 8000dee:	f004 faa9 	bl	8005344 <HAL_SDRAM_Init>
 8000df2:	4603      	mov	r3, r0
 8000df4:	2b00      	cmp	r3, #0
 8000df6:	d001      	beq.n	8000dfc <MX_FMC_Init+0x90>
  {
    Error_Handler( );
 8000df8:	f000 f92a 	bl	8001050 <Error_Handler>
  }

  /* USER CODE BEGIN FMC_Init 2 */

  /* USER CODE END FMC_Init 2 */
}
 8000dfc:	bf00      	nop
 8000dfe:	3720      	adds	r7, #32
 8000e00:	46bd      	mov	sp, r7
 8000e02:	bd80      	pop	{r7, pc}
 8000e04:	200009f0 	.word	0x200009f0
 8000e08:	a0000140 	.word	0xa0000140

08000e0c <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8000e0c:	b580      	push	{r7, lr}
 8000e0e:	b08e      	sub	sp, #56	; 0x38
 8000e10:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000e12:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000e16:	2200      	movs	r2, #0
 8000e18:	601a      	str	r2, [r3, #0]
 8000e1a:	605a      	str	r2, [r3, #4]
 8000e1c:	609a      	str	r2, [r3, #8]
 8000e1e:	60da      	str	r2, [r3, #12]
 8000e20:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8000e22:	2300      	movs	r3, #0
 8000e24:	623b      	str	r3, [r7, #32]
 8000e26:	4b7b      	ldr	r3, [pc, #492]	; (8001014 <MX_GPIO_Init+0x208>)
 8000e28:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000e2a:	4a7a      	ldr	r2, [pc, #488]	; (8001014 <MX_GPIO_Init+0x208>)
 8000e2c:	f043 0304 	orr.w	r3, r3, #4
 8000e30:	6313      	str	r3, [r2, #48]	; 0x30
 8000e32:	4b78      	ldr	r3, [pc, #480]	; (8001014 <MX_GPIO_Init+0x208>)
 8000e34:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000e36:	f003 0304 	and.w	r3, r3, #4
 8000e3a:	623b      	str	r3, [r7, #32]
 8000e3c:	6a3b      	ldr	r3, [r7, #32]
  __HAL_RCC_GPIOF_CLK_ENABLE();
 8000e3e:	2300      	movs	r3, #0
 8000e40:	61fb      	str	r3, [r7, #28]
 8000e42:	4b74      	ldr	r3, [pc, #464]	; (8001014 <MX_GPIO_Init+0x208>)
 8000e44:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000e46:	4a73      	ldr	r2, [pc, #460]	; (8001014 <MX_GPIO_Init+0x208>)
 8000e48:	f043 0320 	orr.w	r3, r3, #32
 8000e4c:	6313      	str	r3, [r2, #48]	; 0x30
 8000e4e:	4b71      	ldr	r3, [pc, #452]	; (8001014 <MX_GPIO_Init+0x208>)
 8000e50:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000e52:	f003 0320 	and.w	r3, r3, #32
 8000e56:	61fb      	str	r3, [r7, #28]
 8000e58:	69fb      	ldr	r3, [r7, #28]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 8000e5a:	2300      	movs	r3, #0
 8000e5c:	61bb      	str	r3, [r7, #24]
 8000e5e:	4b6d      	ldr	r3, [pc, #436]	; (8001014 <MX_GPIO_Init+0x208>)
 8000e60:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000e62:	4a6c      	ldr	r2, [pc, #432]	; (8001014 <MX_GPIO_Init+0x208>)
 8000e64:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8000e68:	6313      	str	r3, [r2, #48]	; 0x30
 8000e6a:	4b6a      	ldr	r3, [pc, #424]	; (8001014 <MX_GPIO_Init+0x208>)
 8000e6c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000e6e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8000e72:	61bb      	str	r3, [r7, #24]
 8000e74:	69bb      	ldr	r3, [r7, #24]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000e76:	2300      	movs	r3, #0
 8000e78:	617b      	str	r3, [r7, #20]
 8000e7a:	4b66      	ldr	r3, [pc, #408]	; (8001014 <MX_GPIO_Init+0x208>)
 8000e7c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000e7e:	4a65      	ldr	r2, [pc, #404]	; (8001014 <MX_GPIO_Init+0x208>)
 8000e80:	f043 0301 	orr.w	r3, r3, #1
 8000e84:	6313      	str	r3, [r2, #48]	; 0x30
 8000e86:	4b63      	ldr	r3, [pc, #396]	; (8001014 <MX_GPIO_Init+0x208>)
 8000e88:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000e8a:	f003 0301 	and.w	r3, r3, #1
 8000e8e:	617b      	str	r3, [r7, #20]
 8000e90:	697b      	ldr	r3, [r7, #20]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8000e92:	2300      	movs	r3, #0
 8000e94:	613b      	str	r3, [r7, #16]
 8000e96:	4b5f      	ldr	r3, [pc, #380]	; (8001014 <MX_GPIO_Init+0x208>)
 8000e98:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000e9a:	4a5e      	ldr	r2, [pc, #376]	; (8001014 <MX_GPIO_Init+0x208>)
 8000e9c:	f043 0302 	orr.w	r3, r3, #2
 8000ea0:	6313      	str	r3, [r2, #48]	; 0x30
 8000ea2:	4b5c      	ldr	r3, [pc, #368]	; (8001014 <MX_GPIO_Init+0x208>)
 8000ea4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000ea6:	f003 0302 	and.w	r3, r3, #2
 8000eaa:	613b      	str	r3, [r7, #16]
 8000eac:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOG_CLK_ENABLE();
 8000eae:	2300      	movs	r3, #0
 8000eb0:	60fb      	str	r3, [r7, #12]
 8000eb2:	4b58      	ldr	r3, [pc, #352]	; (8001014 <MX_GPIO_Init+0x208>)
 8000eb4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000eb6:	4a57      	ldr	r2, [pc, #348]	; (8001014 <MX_GPIO_Init+0x208>)
 8000eb8:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8000ebc:	6313      	str	r3, [r2, #48]	; 0x30
 8000ebe:	4b55      	ldr	r3, [pc, #340]	; (8001014 <MX_GPIO_Init+0x208>)
 8000ec0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000ec2:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8000ec6:	60fb      	str	r3, [r7, #12]
 8000ec8:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOE_CLK_ENABLE();
 8000eca:	2300      	movs	r3, #0
 8000ecc:	60bb      	str	r3, [r7, #8]
 8000ece:	4b51      	ldr	r3, [pc, #324]	; (8001014 <MX_GPIO_Init+0x208>)
 8000ed0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000ed2:	4a50      	ldr	r2, [pc, #320]	; (8001014 <MX_GPIO_Init+0x208>)
 8000ed4:	f043 0310 	orr.w	r3, r3, #16
 8000ed8:	6313      	str	r3, [r2, #48]	; 0x30
 8000eda:	4b4e      	ldr	r3, [pc, #312]	; (8001014 <MX_GPIO_Init+0x208>)
 8000edc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000ede:	f003 0310 	and.w	r3, r3, #16
 8000ee2:	60bb      	str	r3, [r7, #8]
 8000ee4:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8000ee6:	2300      	movs	r3, #0
 8000ee8:	607b      	str	r3, [r7, #4]
 8000eea:	4b4a      	ldr	r3, [pc, #296]	; (8001014 <MX_GPIO_Init+0x208>)
 8000eec:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000eee:	4a49      	ldr	r2, [pc, #292]	; (8001014 <MX_GPIO_Init+0x208>)
 8000ef0:	f043 0308 	orr.w	r3, r3, #8
 8000ef4:	6313      	str	r3, [r2, #48]	; 0x30
 8000ef6:	4b47      	ldr	r3, [pc, #284]	; (8001014 <MX_GPIO_Init+0x208>)
 8000ef8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000efa:	f003 0308 	and.w	r3, r3, #8
 8000efe:	607b      	str	r3, [r7, #4]
 8000f00:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOC, NCS_MEMS_SPI_Pin|CSX_Pin|OTG_FS_PSO_Pin, GPIO_PIN_RESET);
 8000f02:	2200      	movs	r2, #0
 8000f04:	2116      	movs	r1, #22
 8000f06:	4844      	ldr	r0, [pc, #272]	; (8001018 <MX_GPIO_Init+0x20c>)
 8000f08:	f001 fca0 	bl	800284c <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(ACP_RST_GPIO_Port, ACP_RST_Pin, GPIO_PIN_RESET);
 8000f0c:	2200      	movs	r2, #0
 8000f0e:	2180      	movs	r1, #128	; 0x80
 8000f10:	4842      	ldr	r0, [pc, #264]	; (800101c <MX_GPIO_Init+0x210>)
 8000f12:	f001 fc9b 	bl	800284c <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOD, RDX_Pin|WRX_DCX_Pin, GPIO_PIN_RESET);
 8000f16:	2200      	movs	r2, #0
 8000f18:	f44f 5140 	mov.w	r1, #12288	; 0x3000
 8000f1c:	4840      	ldr	r0, [pc, #256]	; (8001020 <MX_GPIO_Init+0x214>)
 8000f1e:	f001 fc95 	bl	800284c <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOG, LD3_Pin|LD4_Pin, GPIO_PIN_RESET);
 8000f22:	2200      	movs	r2, #0
 8000f24:	f44f 41c0 	mov.w	r1, #24576	; 0x6000
 8000f28:	483e      	ldr	r0, [pc, #248]	; (8001024 <MX_GPIO_Init+0x218>)
 8000f2a:	f001 fc8f 	bl	800284c <HAL_GPIO_WritePin>

  /*Configure GPIO pins : NCS_MEMS_SPI_Pin CSX_Pin OTG_FS_PSO_Pin */
  GPIO_InitStruct.Pin = NCS_MEMS_SPI_Pin|CSX_Pin|OTG_FS_PSO_Pin;
 8000f2e:	2316      	movs	r3, #22
 8000f30:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000f32:	2301      	movs	r3, #1
 8000f34:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000f36:	2300      	movs	r3, #0
 8000f38:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000f3a:	2300      	movs	r3, #0
 8000f3c:	633b      	str	r3, [r7, #48]	; 0x30
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8000f3e:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000f42:	4619      	mov	r1, r3
 8000f44:	4834      	ldr	r0, [pc, #208]	; (8001018 <MX_GPIO_Init+0x20c>)
 8000f46:	f001 fad5 	bl	80024f4 <HAL_GPIO_Init>

  /*Configure GPIO pins : B1_Pin MEMS_INT1_Pin MEMS_INT2_Pin TP_INT1_Pin */
  GPIO_InitStruct.Pin = B1_Pin|MEMS_INT1_Pin|MEMS_INT2_Pin|TP_INT1_Pin;
 8000f4a:	f248 0307 	movw	r3, #32775	; 0x8007
 8000f4e:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_EVT_RISING;
 8000f50:	f44f 1390 	mov.w	r3, #1179648	; 0x120000
 8000f54:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000f56:	2300      	movs	r3, #0
 8000f58:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000f5a:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000f5e:	4619      	mov	r1, r3
 8000f60:	482e      	ldr	r0, [pc, #184]	; (800101c <MX_GPIO_Init+0x210>)
 8000f62:	f001 fac7 	bl	80024f4 <HAL_GPIO_Init>

  /*Configure GPIO pin : ACP_RST_Pin */
  GPIO_InitStruct.Pin = ACP_RST_Pin;
 8000f66:	2380      	movs	r3, #128	; 0x80
 8000f68:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000f6a:	2301      	movs	r3, #1
 8000f6c:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000f6e:	2300      	movs	r3, #0
 8000f70:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000f72:	2300      	movs	r3, #0
 8000f74:	633b      	str	r3, [r7, #48]	; 0x30
  HAL_GPIO_Init(ACP_RST_GPIO_Port, &GPIO_InitStruct);
 8000f76:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000f7a:	4619      	mov	r1, r3
 8000f7c:	4827      	ldr	r0, [pc, #156]	; (800101c <MX_GPIO_Init+0x210>)
 8000f7e:	f001 fab9 	bl	80024f4 <HAL_GPIO_Init>

  /*Configure GPIO pin : OTG_FS_OC_Pin */
  GPIO_InitStruct.Pin = OTG_FS_OC_Pin;
 8000f82:	2320      	movs	r3, #32
 8000f84:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_EVT_RISING;
 8000f86:	f44f 1390 	mov.w	r3, #1179648	; 0x120000
 8000f8a:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000f8c:	2300      	movs	r3, #0
 8000f8e:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(OTG_FS_OC_GPIO_Port, &GPIO_InitStruct);
 8000f90:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000f94:	4619      	mov	r1, r3
 8000f96:	4820      	ldr	r0, [pc, #128]	; (8001018 <MX_GPIO_Init+0x20c>)
 8000f98:	f001 faac 	bl	80024f4 <HAL_GPIO_Init>

  /*Configure GPIO pin : BOOT1_Pin */
  GPIO_InitStruct.Pin = BOOT1_Pin;
 8000f9c:	2304      	movs	r3, #4
 8000f9e:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000fa0:	2300      	movs	r3, #0
 8000fa2:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000fa4:	2300      	movs	r3, #0
 8000fa6:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(BOOT1_GPIO_Port, &GPIO_InitStruct);
 8000fa8:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000fac:	4619      	mov	r1, r3
 8000fae:	481e      	ldr	r0, [pc, #120]	; (8001028 <MX_GPIO_Init+0x21c>)
 8000fb0:	f001 faa0 	bl	80024f4 <HAL_GPIO_Init>

  /*Configure GPIO pin : TE_Pin */
  GPIO_InitStruct.Pin = TE_Pin;
 8000fb4:	f44f 6300 	mov.w	r3, #2048	; 0x800
 8000fb8:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000fba:	2300      	movs	r3, #0
 8000fbc:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000fbe:	2300      	movs	r3, #0
 8000fc0:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(TE_GPIO_Port, &GPIO_InitStruct);
 8000fc2:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000fc6:	4619      	mov	r1, r3
 8000fc8:	4815      	ldr	r0, [pc, #84]	; (8001020 <MX_GPIO_Init+0x214>)
 8000fca:	f001 fa93 	bl	80024f4 <HAL_GPIO_Init>

  /*Configure GPIO pins : RDX_Pin WRX_DCX_Pin */
  GPIO_InitStruct.Pin = RDX_Pin|WRX_DCX_Pin;
 8000fce:	f44f 5340 	mov.w	r3, #12288	; 0x3000
 8000fd2:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000fd4:	2301      	movs	r3, #1
 8000fd6:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000fd8:	2300      	movs	r3, #0
 8000fda:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000fdc:	2300      	movs	r3, #0
 8000fde:	633b      	str	r3, [r7, #48]	; 0x30
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8000fe0:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000fe4:	4619      	mov	r1, r3
 8000fe6:	480e      	ldr	r0, [pc, #56]	; (8001020 <MX_GPIO_Init+0x214>)
 8000fe8:	f001 fa84 	bl	80024f4 <HAL_GPIO_Init>

  /*Configure GPIO pins : LD3_Pin LD4_Pin */
  GPIO_InitStruct.Pin = LD3_Pin|LD4_Pin;
 8000fec:	f44f 43c0 	mov.w	r3, #24576	; 0x6000
 8000ff0:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000ff2:	2301      	movs	r3, #1
 8000ff4:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000ff6:	2300      	movs	r3, #0
 8000ff8:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000ffa:	2300      	movs	r3, #0
 8000ffc:	633b      	str	r3, [r7, #48]	; 0x30
  HAL_GPIO_Init(GPIOG, &GPIO_InitStruct);
 8000ffe:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8001002:	4619      	mov	r1, r3
 8001004:	4807      	ldr	r0, [pc, #28]	; (8001024 <MX_GPIO_Init+0x218>)
 8001006:	f001 fa75 	bl	80024f4 <HAL_GPIO_Init>

}
 800100a:	bf00      	nop
 800100c:	3738      	adds	r7, #56	; 0x38
 800100e:	46bd      	mov	sp, r7
 8001010:	bd80      	pop	{r7, pc}
 8001012:	bf00      	nop
 8001014:	40023800 	.word	0x40023800
 8001018:	40020800 	.word	0x40020800
 800101c:	40020000 	.word	0x40020000
 8001020:	40020c00 	.word	0x40020c00
 8001024:	40021800 	.word	0x40021800
 8001028:	40020400 	.word	0x40020400

0800102c <HAL_TIM_PeriodElapsedCallback>:
  * a global variable "uwTick" used as application time base.
  * @param  htim : TIM handle
  * @retval None
  */
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 800102c:	b580      	push	{r7, lr}
 800102e:	b082      	sub	sp, #8
 8001030:	af00      	add	r7, sp, #0
 8001032:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN Callback 0 */

  /* USER CODE END Callback 0 */
  if (htim->Instance == TIM6) {
 8001034:	687b      	ldr	r3, [r7, #4]
 8001036:	681b      	ldr	r3, [r3, #0]
 8001038:	4a04      	ldr	r2, [pc, #16]	; (800104c <HAL_TIM_PeriodElapsedCallback+0x20>)
 800103a:	4293      	cmp	r3, r2
 800103c:	d101      	bne.n	8001042 <HAL_TIM_PeriodElapsedCallback+0x16>
    HAL_IncTick();
 800103e:	f000 ff2b 	bl	8001e98 <HAL_IncTick>
  }
  /* USER CODE BEGIN Callback 1 */

  /* USER CODE END Callback 1 */
}
 8001042:	bf00      	nop
 8001044:	3708      	adds	r7, #8
 8001046:	46bd      	mov	sp, r7
 8001048:	bd80      	pop	{r7, pc}
 800104a:	bf00      	nop
 800104c:	40001000 	.word	0x40001000

08001050 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8001050:	b480      	push	{r7}
 8001052:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8001054:	b672      	cpsid	i
}
 8001056:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8001058:	e7fe      	b.n	8001058 <Error_Handler+0x8>
	...

0800105c <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 800105c:	b480      	push	{r7}
 800105e:	b083      	sub	sp, #12
 8001060:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001062:	2300      	movs	r3, #0
 8001064:	607b      	str	r3, [r7, #4]
 8001066:	4b10      	ldr	r3, [pc, #64]	; (80010a8 <HAL_MspInit+0x4c>)
 8001068:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800106a:	4a0f      	ldr	r2, [pc, #60]	; (80010a8 <HAL_MspInit+0x4c>)
 800106c:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8001070:	6453      	str	r3, [r2, #68]	; 0x44
 8001072:	4b0d      	ldr	r3, [pc, #52]	; (80010a8 <HAL_MspInit+0x4c>)
 8001074:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001076:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800107a:	607b      	str	r3, [r7, #4]
 800107c:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 800107e:	2300      	movs	r3, #0
 8001080:	603b      	str	r3, [r7, #0]
 8001082:	4b09      	ldr	r3, [pc, #36]	; (80010a8 <HAL_MspInit+0x4c>)
 8001084:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001086:	4a08      	ldr	r2, [pc, #32]	; (80010a8 <HAL_MspInit+0x4c>)
 8001088:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800108c:	6413      	str	r3, [r2, #64]	; 0x40
 800108e:	4b06      	ldr	r3, [pc, #24]	; (80010a8 <HAL_MspInit+0x4c>)
 8001090:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001092:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001096:	603b      	str	r3, [r7, #0]
 8001098:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 800109a:	bf00      	nop
 800109c:	370c      	adds	r7, #12
 800109e:	46bd      	mov	sp, r7
 80010a0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80010a4:	4770      	bx	lr
 80010a6:	bf00      	nop
 80010a8:	40023800 	.word	0x40023800

080010ac <HAL_CRC_MspInit>:
* This function configures the hardware resources used in this example
* @param hcrc: CRC handle pointer
* @retval None
*/
void HAL_CRC_MspInit(CRC_HandleTypeDef* hcrc)
{
 80010ac:	b480      	push	{r7}
 80010ae:	b085      	sub	sp, #20
 80010b0:	af00      	add	r7, sp, #0
 80010b2:	6078      	str	r0, [r7, #4]
  if(hcrc->Instance==CRC)
 80010b4:	687b      	ldr	r3, [r7, #4]
 80010b6:	681b      	ldr	r3, [r3, #0]
 80010b8:	4a0b      	ldr	r2, [pc, #44]	; (80010e8 <HAL_CRC_MspInit+0x3c>)
 80010ba:	4293      	cmp	r3, r2
 80010bc:	d10d      	bne.n	80010da <HAL_CRC_MspInit+0x2e>
  {
  /* USER CODE BEGIN CRC_MspInit 0 */

  /* USER CODE END CRC_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_CRC_CLK_ENABLE();
 80010be:	2300      	movs	r3, #0
 80010c0:	60fb      	str	r3, [r7, #12]
 80010c2:	4b0a      	ldr	r3, [pc, #40]	; (80010ec <HAL_CRC_MspInit+0x40>)
 80010c4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80010c6:	4a09      	ldr	r2, [pc, #36]	; (80010ec <HAL_CRC_MspInit+0x40>)
 80010c8:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 80010cc:	6313      	str	r3, [r2, #48]	; 0x30
 80010ce:	4b07      	ldr	r3, [pc, #28]	; (80010ec <HAL_CRC_MspInit+0x40>)
 80010d0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80010d2:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 80010d6:	60fb      	str	r3, [r7, #12]
 80010d8:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN CRC_MspInit 1 */

  /* USER CODE END CRC_MspInit 1 */
  }

}
 80010da:	bf00      	nop
 80010dc:	3714      	adds	r7, #20
 80010de:	46bd      	mov	sp, r7
 80010e0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80010e4:	4770      	bx	lr
 80010e6:	bf00      	nop
 80010e8:	40023000 	.word	0x40023000
 80010ec:	40023800 	.word	0x40023800

080010f0 <HAL_DMA2D_MspInit>:
* This function configures the hardware resources used in this example
* @param hdma2d: DMA2D handle pointer
* @retval None
*/
void HAL_DMA2D_MspInit(DMA2D_HandleTypeDef* hdma2d)
{
 80010f0:	b580      	push	{r7, lr}
 80010f2:	b084      	sub	sp, #16
 80010f4:	af00      	add	r7, sp, #0
 80010f6:	6078      	str	r0, [r7, #4]
  if(hdma2d->Instance==DMA2D)
 80010f8:	687b      	ldr	r3, [r7, #4]
 80010fa:	681b      	ldr	r3, [r3, #0]
 80010fc:	4a0e      	ldr	r2, [pc, #56]	; (8001138 <HAL_DMA2D_MspInit+0x48>)
 80010fe:	4293      	cmp	r3, r2
 8001100:	d115      	bne.n	800112e <HAL_DMA2D_MspInit+0x3e>
  {
  /* USER CODE BEGIN DMA2D_MspInit 0 */

  /* USER CODE END DMA2D_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_DMA2D_CLK_ENABLE();
 8001102:	2300      	movs	r3, #0
 8001104:	60fb      	str	r3, [r7, #12]
 8001106:	4b0d      	ldr	r3, [pc, #52]	; (800113c <HAL_DMA2D_MspInit+0x4c>)
 8001108:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800110a:	4a0c      	ldr	r2, [pc, #48]	; (800113c <HAL_DMA2D_MspInit+0x4c>)
 800110c:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
 8001110:	6313      	str	r3, [r2, #48]	; 0x30
 8001112:	4b0a      	ldr	r3, [pc, #40]	; (800113c <HAL_DMA2D_MspInit+0x4c>)
 8001114:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001116:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 800111a:	60fb      	str	r3, [r7, #12]
 800111c:	68fb      	ldr	r3, [r7, #12]
    /* DMA2D interrupt Init */
    HAL_NVIC_SetPriority(DMA2D_IRQn, 5, 0);
 800111e:	2200      	movs	r2, #0
 8001120:	2105      	movs	r1, #5
 8001122:	205a      	movs	r0, #90	; 0x5a
 8001124:	f000 ffb4 	bl	8002090 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(DMA2D_IRQn);
 8001128:	205a      	movs	r0, #90	; 0x5a
 800112a:	f000 ffcd 	bl	80020c8 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN DMA2D_MspInit 1 */

  /* USER CODE END DMA2D_MspInit 1 */
  }

}
 800112e:	bf00      	nop
 8001130:	3710      	adds	r7, #16
 8001132:	46bd      	mov	sp, r7
 8001134:	bd80      	pop	{r7, pc}
 8001136:	bf00      	nop
 8001138:	4002b000 	.word	0x4002b000
 800113c:	40023800 	.word	0x40023800

08001140 <HAL_I2C_MspInit>:
* This function configures the hardware resources used in this example
* @param hi2c: I2C handle pointer
* @retval None
*/
void HAL_I2C_MspInit(I2C_HandleTypeDef* hi2c)
{
 8001140:	b580      	push	{r7, lr}
 8001142:	b08a      	sub	sp, #40	; 0x28
 8001144:	af00      	add	r7, sp, #0
 8001146:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001148:	f107 0314 	add.w	r3, r7, #20
 800114c:	2200      	movs	r2, #0
 800114e:	601a      	str	r2, [r3, #0]
 8001150:	605a      	str	r2, [r3, #4]
 8001152:	609a      	str	r2, [r3, #8]
 8001154:	60da      	str	r2, [r3, #12]
 8001156:	611a      	str	r2, [r3, #16]
  if(hi2c->Instance==I2C3)
 8001158:	687b      	ldr	r3, [r7, #4]
 800115a:	681b      	ldr	r3, [r3, #0]
 800115c:	4a29      	ldr	r2, [pc, #164]	; (8001204 <HAL_I2C_MspInit+0xc4>)
 800115e:	4293      	cmp	r3, r2
 8001160:	d14b      	bne.n	80011fa <HAL_I2C_MspInit+0xba>
  {
  /* USER CODE BEGIN I2C3_MspInit 0 */

  /* USER CODE END I2C3_MspInit 0 */

    __HAL_RCC_GPIOC_CLK_ENABLE();
 8001162:	2300      	movs	r3, #0
 8001164:	613b      	str	r3, [r7, #16]
 8001166:	4b28      	ldr	r3, [pc, #160]	; (8001208 <HAL_I2C_MspInit+0xc8>)
 8001168:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800116a:	4a27      	ldr	r2, [pc, #156]	; (8001208 <HAL_I2C_MspInit+0xc8>)
 800116c:	f043 0304 	orr.w	r3, r3, #4
 8001170:	6313      	str	r3, [r2, #48]	; 0x30
 8001172:	4b25      	ldr	r3, [pc, #148]	; (8001208 <HAL_I2C_MspInit+0xc8>)
 8001174:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001176:	f003 0304 	and.w	r3, r3, #4
 800117a:	613b      	str	r3, [r7, #16]
 800117c:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 800117e:	2300      	movs	r3, #0
 8001180:	60fb      	str	r3, [r7, #12]
 8001182:	4b21      	ldr	r3, [pc, #132]	; (8001208 <HAL_I2C_MspInit+0xc8>)
 8001184:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001186:	4a20      	ldr	r2, [pc, #128]	; (8001208 <HAL_I2C_MspInit+0xc8>)
 8001188:	f043 0301 	orr.w	r3, r3, #1
 800118c:	6313      	str	r3, [r2, #48]	; 0x30
 800118e:	4b1e      	ldr	r3, [pc, #120]	; (8001208 <HAL_I2C_MspInit+0xc8>)
 8001190:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001192:	f003 0301 	and.w	r3, r3, #1
 8001196:	60fb      	str	r3, [r7, #12]
 8001198:	68fb      	ldr	r3, [r7, #12]
    /**I2C3 GPIO Configuration
    PC9     ------> I2C3_SDA
    PA8     ------> I2C3_SCL
    */
    GPIO_InitStruct.Pin = I2C3_SDA_Pin;
 800119a:	f44f 7300 	mov.w	r3, #512	; 0x200
 800119e:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 80011a0:	2312      	movs	r3, #18
 80011a2:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 80011a4:	2301      	movs	r3, #1
 80011a6:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80011a8:	2300      	movs	r3, #0
 80011aa:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C3;
 80011ac:	2304      	movs	r3, #4
 80011ae:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(I2C3_SDA_GPIO_Port, &GPIO_InitStruct);
 80011b0:	f107 0314 	add.w	r3, r7, #20
 80011b4:	4619      	mov	r1, r3
 80011b6:	4815      	ldr	r0, [pc, #84]	; (800120c <HAL_I2C_MspInit+0xcc>)
 80011b8:	f001 f99c 	bl	80024f4 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = I2C3_SCL_Pin;
 80011bc:	f44f 7380 	mov.w	r3, #256	; 0x100
 80011c0:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 80011c2:	2312      	movs	r3, #18
 80011c4:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 80011c6:	2301      	movs	r3, #1
 80011c8:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80011ca:	2300      	movs	r3, #0
 80011cc:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C3;
 80011ce:	2304      	movs	r3, #4
 80011d0:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(I2C3_SCL_GPIO_Port, &GPIO_InitStruct);
 80011d2:	f107 0314 	add.w	r3, r7, #20
 80011d6:	4619      	mov	r1, r3
 80011d8:	480d      	ldr	r0, [pc, #52]	; (8001210 <HAL_I2C_MspInit+0xd0>)
 80011da:	f001 f98b 	bl	80024f4 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_I2C3_CLK_ENABLE();
 80011de:	2300      	movs	r3, #0
 80011e0:	60bb      	str	r3, [r7, #8]
 80011e2:	4b09      	ldr	r3, [pc, #36]	; (8001208 <HAL_I2C_MspInit+0xc8>)
 80011e4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80011e6:	4a08      	ldr	r2, [pc, #32]	; (8001208 <HAL_I2C_MspInit+0xc8>)
 80011e8:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
 80011ec:	6413      	str	r3, [r2, #64]	; 0x40
 80011ee:	4b06      	ldr	r3, [pc, #24]	; (8001208 <HAL_I2C_MspInit+0xc8>)
 80011f0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80011f2:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 80011f6:	60bb      	str	r3, [r7, #8]
 80011f8:	68bb      	ldr	r3, [r7, #8]
  /* USER CODE BEGIN I2C3_MspInit 1 */

  /* USER CODE END I2C3_MspInit 1 */
  }

}
 80011fa:	bf00      	nop
 80011fc:	3728      	adds	r7, #40	; 0x28
 80011fe:	46bd      	mov	sp, r7
 8001200:	bd80      	pop	{r7, pc}
 8001202:	bf00      	nop
 8001204:	40005c00 	.word	0x40005c00
 8001208:	40023800 	.word	0x40023800
 800120c:	40020800 	.word	0x40020800
 8001210:	40020000 	.word	0x40020000

08001214 <HAL_LTDC_MspInit>:
* This function configures the hardware resources used in this example
* @param hltdc: LTDC handle pointer
* @retval None
*/
void HAL_LTDC_MspInit(LTDC_HandleTypeDef* hltdc)
{
 8001214:	b580      	push	{r7, lr}
 8001216:	b09a      	sub	sp, #104	; 0x68
 8001218:	af00      	add	r7, sp, #0
 800121a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800121c:	f107 0354 	add.w	r3, r7, #84	; 0x54
 8001220:	2200      	movs	r2, #0
 8001222:	601a      	str	r2, [r3, #0]
 8001224:	605a      	str	r2, [r3, #4]
 8001226:	609a      	str	r2, [r3, #8]
 8001228:	60da      	str	r2, [r3, #12]
 800122a:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 800122c:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8001230:	2230      	movs	r2, #48	; 0x30
 8001232:	2100      	movs	r1, #0
 8001234:	4618      	mov	r0, r3
 8001236:	f007 f8b3 	bl	80083a0 <memset>
  if(hltdc->Instance==LTDC)
 800123a:	687b      	ldr	r3, [r7, #4]
 800123c:	681b      	ldr	r3, [r3, #0]
 800123e:	4a85      	ldr	r2, [pc, #532]	; (8001454 <HAL_LTDC_MspInit+0x240>)
 8001240:	4293      	cmp	r3, r2
 8001242:	f040 8102 	bne.w	800144a <HAL_LTDC_MspInit+0x236>

  /* USER CODE END LTDC_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_LTDC;
 8001246:	2308      	movs	r3, #8
 8001248:	627b      	str	r3, [r7, #36]	; 0x24
    PeriphClkInitStruct.PLLSAI.PLLSAIN = 50;
 800124a:	2332      	movs	r3, #50	; 0x32
 800124c:	637b      	str	r3, [r7, #52]	; 0x34
    PeriphClkInitStruct.PLLSAI.PLLSAIR = 2;
 800124e:	2302      	movs	r3, #2
 8001250:	63fb      	str	r3, [r7, #60]	; 0x3c
    PeriphClkInitStruct.PLLSAIDivR = RCC_PLLSAIDIVR_2;
 8001252:	2300      	movs	r3, #0
 8001254:	64bb      	str	r3, [r7, #72]	; 0x48
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8001256:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800125a:	4618      	mov	r0, r3
 800125c:	f003 feb2 	bl	8004fc4 <HAL_RCCEx_PeriphCLKConfig>
 8001260:	4603      	mov	r3, r0
 8001262:	2b00      	cmp	r3, #0
 8001264:	d001      	beq.n	800126a <HAL_LTDC_MspInit+0x56>
    {
      Error_Handler();
 8001266:	f7ff fef3 	bl	8001050 <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_LTDC_CLK_ENABLE();
 800126a:	2300      	movs	r3, #0
 800126c:	623b      	str	r3, [r7, #32]
 800126e:	4b7a      	ldr	r3, [pc, #488]	; (8001458 <HAL_LTDC_MspInit+0x244>)
 8001270:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001272:	4a79      	ldr	r2, [pc, #484]	; (8001458 <HAL_LTDC_MspInit+0x244>)
 8001274:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 8001278:	6453      	str	r3, [r2, #68]	; 0x44
 800127a:	4b77      	ldr	r3, [pc, #476]	; (8001458 <HAL_LTDC_MspInit+0x244>)
 800127c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800127e:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 8001282:	623b      	str	r3, [r7, #32]
 8001284:	6a3b      	ldr	r3, [r7, #32]

    __HAL_RCC_GPIOF_CLK_ENABLE();
 8001286:	2300      	movs	r3, #0
 8001288:	61fb      	str	r3, [r7, #28]
 800128a:	4b73      	ldr	r3, [pc, #460]	; (8001458 <HAL_LTDC_MspInit+0x244>)
 800128c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800128e:	4a72      	ldr	r2, [pc, #456]	; (8001458 <HAL_LTDC_MspInit+0x244>)
 8001290:	f043 0320 	orr.w	r3, r3, #32
 8001294:	6313      	str	r3, [r2, #48]	; 0x30
 8001296:	4b70      	ldr	r3, [pc, #448]	; (8001458 <HAL_LTDC_MspInit+0x244>)
 8001298:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800129a:	f003 0320 	and.w	r3, r3, #32
 800129e:	61fb      	str	r3, [r7, #28]
 80012a0:	69fb      	ldr	r3, [r7, #28]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 80012a2:	2300      	movs	r3, #0
 80012a4:	61bb      	str	r3, [r7, #24]
 80012a6:	4b6c      	ldr	r3, [pc, #432]	; (8001458 <HAL_LTDC_MspInit+0x244>)
 80012a8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80012aa:	4a6b      	ldr	r2, [pc, #428]	; (8001458 <HAL_LTDC_MspInit+0x244>)
 80012ac:	f043 0301 	orr.w	r3, r3, #1
 80012b0:	6313      	str	r3, [r2, #48]	; 0x30
 80012b2:	4b69      	ldr	r3, [pc, #420]	; (8001458 <HAL_LTDC_MspInit+0x244>)
 80012b4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80012b6:	f003 0301 	and.w	r3, r3, #1
 80012ba:	61bb      	str	r3, [r7, #24]
 80012bc:	69bb      	ldr	r3, [r7, #24]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 80012be:	2300      	movs	r3, #0
 80012c0:	617b      	str	r3, [r7, #20]
 80012c2:	4b65      	ldr	r3, [pc, #404]	; (8001458 <HAL_LTDC_MspInit+0x244>)
 80012c4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80012c6:	4a64      	ldr	r2, [pc, #400]	; (8001458 <HAL_LTDC_MspInit+0x244>)
 80012c8:	f043 0302 	orr.w	r3, r3, #2
 80012cc:	6313      	str	r3, [r2, #48]	; 0x30
 80012ce:	4b62      	ldr	r3, [pc, #392]	; (8001458 <HAL_LTDC_MspInit+0x244>)
 80012d0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80012d2:	f003 0302 	and.w	r3, r3, #2
 80012d6:	617b      	str	r3, [r7, #20]
 80012d8:	697b      	ldr	r3, [r7, #20]
    __HAL_RCC_GPIOG_CLK_ENABLE();
 80012da:	2300      	movs	r3, #0
 80012dc:	613b      	str	r3, [r7, #16]
 80012de:	4b5e      	ldr	r3, [pc, #376]	; (8001458 <HAL_LTDC_MspInit+0x244>)
 80012e0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80012e2:	4a5d      	ldr	r2, [pc, #372]	; (8001458 <HAL_LTDC_MspInit+0x244>)
 80012e4:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80012e8:	6313      	str	r3, [r2, #48]	; 0x30
 80012ea:	4b5b      	ldr	r3, [pc, #364]	; (8001458 <HAL_LTDC_MspInit+0x244>)
 80012ec:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80012ee:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80012f2:	613b      	str	r3, [r7, #16]
 80012f4:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOC_CLK_ENABLE();
 80012f6:	2300      	movs	r3, #0
 80012f8:	60fb      	str	r3, [r7, #12]
 80012fa:	4b57      	ldr	r3, [pc, #348]	; (8001458 <HAL_LTDC_MspInit+0x244>)
 80012fc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80012fe:	4a56      	ldr	r2, [pc, #344]	; (8001458 <HAL_LTDC_MspInit+0x244>)
 8001300:	f043 0304 	orr.w	r3, r3, #4
 8001304:	6313      	str	r3, [r2, #48]	; 0x30
 8001306:	4b54      	ldr	r3, [pc, #336]	; (8001458 <HAL_LTDC_MspInit+0x244>)
 8001308:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800130a:	f003 0304 	and.w	r3, r3, #4
 800130e:	60fb      	str	r3, [r7, #12]
 8001310:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOD_CLK_ENABLE();
 8001312:	2300      	movs	r3, #0
 8001314:	60bb      	str	r3, [r7, #8]
 8001316:	4b50      	ldr	r3, [pc, #320]	; (8001458 <HAL_LTDC_MspInit+0x244>)
 8001318:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800131a:	4a4f      	ldr	r2, [pc, #316]	; (8001458 <HAL_LTDC_MspInit+0x244>)
 800131c:	f043 0308 	orr.w	r3, r3, #8
 8001320:	6313      	str	r3, [r2, #48]	; 0x30
 8001322:	4b4d      	ldr	r3, [pc, #308]	; (8001458 <HAL_LTDC_MspInit+0x244>)
 8001324:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001326:	f003 0308 	and.w	r3, r3, #8
 800132a:	60bb      	str	r3, [r7, #8]
 800132c:	68bb      	ldr	r3, [r7, #8]
    PG11     ------> LTDC_B3
    PG12     ------> LTDC_B4
    PB8     ------> LTDC_B6
    PB9     ------> LTDC_B7
    */
    GPIO_InitStruct.Pin = ENABLE_Pin;
 800132e:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8001332:	657b      	str	r3, [r7, #84]	; 0x54
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001334:	2302      	movs	r3, #2
 8001336:	65bb      	str	r3, [r7, #88]	; 0x58
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001338:	2300      	movs	r3, #0
 800133a:	65fb      	str	r3, [r7, #92]	; 0x5c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800133c:	2300      	movs	r3, #0
 800133e:	663b      	str	r3, [r7, #96]	; 0x60
    GPIO_InitStruct.Alternate = GPIO_AF14_LTDC;
 8001340:	230e      	movs	r3, #14
 8001342:	667b      	str	r3, [r7, #100]	; 0x64
    HAL_GPIO_Init(ENABLE_GPIO_Port, &GPIO_InitStruct);
 8001344:	f107 0354 	add.w	r3, r7, #84	; 0x54
 8001348:	4619      	mov	r1, r3
 800134a:	4844      	ldr	r0, [pc, #272]	; (800145c <HAL_LTDC_MspInit+0x248>)
 800134c:	f001 f8d2 	bl	80024f4 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = B5_Pin|VSYNC_Pin|G2_Pin|R4_Pin
 8001350:	f641 0358 	movw	r3, #6232	; 0x1858
 8001354:	657b      	str	r3, [r7, #84]	; 0x54
                          |R5_Pin;
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001356:	2302      	movs	r3, #2
 8001358:	65bb      	str	r3, [r7, #88]	; 0x58
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800135a:	2300      	movs	r3, #0
 800135c:	65fb      	str	r3, [r7, #92]	; 0x5c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800135e:	2300      	movs	r3, #0
 8001360:	663b      	str	r3, [r7, #96]	; 0x60
    GPIO_InitStruct.Alternate = GPIO_AF14_LTDC;
 8001362:	230e      	movs	r3, #14
 8001364:	667b      	str	r3, [r7, #100]	; 0x64
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001366:	f107 0354 	add.w	r3, r7, #84	; 0x54
 800136a:	4619      	mov	r1, r3
 800136c:	483c      	ldr	r0, [pc, #240]	; (8001460 <HAL_LTDC_MspInit+0x24c>)
 800136e:	f001 f8c1 	bl	80024f4 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = R3_Pin|R6_Pin;
 8001372:	2303      	movs	r3, #3
 8001374:	657b      	str	r3, [r7, #84]	; 0x54
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001376:	2302      	movs	r3, #2
 8001378:	65bb      	str	r3, [r7, #88]	; 0x58
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800137a:	2300      	movs	r3, #0
 800137c:	65fb      	str	r3, [r7, #92]	; 0x5c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800137e:	2300      	movs	r3, #0
 8001380:	663b      	str	r3, [r7, #96]	; 0x60
    GPIO_InitStruct.Alternate = GPIO_AF9_LTDC;
 8001382:	2309      	movs	r3, #9
 8001384:	667b      	str	r3, [r7, #100]	; 0x64
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001386:	f107 0354 	add.w	r3, r7, #84	; 0x54
 800138a:	4619      	mov	r1, r3
 800138c:	4835      	ldr	r0, [pc, #212]	; (8001464 <HAL_LTDC_MspInit+0x250>)
 800138e:	f001 f8b1 	bl	80024f4 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = G4_Pin|G5_Pin|B6_Pin|B7_Pin;
 8001392:	f44f 6370 	mov.w	r3, #3840	; 0xf00
 8001396:	657b      	str	r3, [r7, #84]	; 0x54
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001398:	2302      	movs	r3, #2
 800139a:	65bb      	str	r3, [r7, #88]	; 0x58
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800139c:	2300      	movs	r3, #0
 800139e:	65fb      	str	r3, [r7, #92]	; 0x5c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80013a0:	2300      	movs	r3, #0
 80013a2:	663b      	str	r3, [r7, #96]	; 0x60
    GPIO_InitStruct.Alternate = GPIO_AF14_LTDC;
 80013a4:	230e      	movs	r3, #14
 80013a6:	667b      	str	r3, [r7, #100]	; 0x64
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80013a8:	f107 0354 	add.w	r3, r7, #84	; 0x54
 80013ac:	4619      	mov	r1, r3
 80013ae:	482d      	ldr	r0, [pc, #180]	; (8001464 <HAL_LTDC_MspInit+0x250>)
 80013b0:	f001 f8a0 	bl	80024f4 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = R7_Pin|DOTCLK_Pin|B3_Pin;
 80013b4:	f44f 630c 	mov.w	r3, #2240	; 0x8c0
 80013b8:	657b      	str	r3, [r7, #84]	; 0x54
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80013ba:	2302      	movs	r3, #2
 80013bc:	65bb      	str	r3, [r7, #88]	; 0x58
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80013be:	2300      	movs	r3, #0
 80013c0:	65fb      	str	r3, [r7, #92]	; 0x5c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80013c2:	2300      	movs	r3, #0
 80013c4:	663b      	str	r3, [r7, #96]	; 0x60
    GPIO_InitStruct.Alternate = GPIO_AF14_LTDC;
 80013c6:	230e      	movs	r3, #14
 80013c8:	667b      	str	r3, [r7, #100]	; 0x64
    HAL_GPIO_Init(GPIOG, &GPIO_InitStruct);
 80013ca:	f107 0354 	add.w	r3, r7, #84	; 0x54
 80013ce:	4619      	mov	r1, r3
 80013d0:	4825      	ldr	r0, [pc, #148]	; (8001468 <HAL_LTDC_MspInit+0x254>)
 80013d2:	f001 f88f 	bl	80024f4 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = HSYNC_Pin|G6_Pin|R2_Pin;
 80013d6:	f44f 6398 	mov.w	r3, #1216	; 0x4c0
 80013da:	657b      	str	r3, [r7, #84]	; 0x54
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80013dc:	2302      	movs	r3, #2
 80013de:	65bb      	str	r3, [r7, #88]	; 0x58
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80013e0:	2300      	movs	r3, #0
 80013e2:	65fb      	str	r3, [r7, #92]	; 0x5c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80013e4:	2300      	movs	r3, #0
 80013e6:	663b      	str	r3, [r7, #96]	; 0x60
    GPIO_InitStruct.Alternate = GPIO_AF14_LTDC;
 80013e8:	230e      	movs	r3, #14
 80013ea:	667b      	str	r3, [r7, #100]	; 0x64
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 80013ec:	f107 0354 	add.w	r3, r7, #84	; 0x54
 80013f0:	4619      	mov	r1, r3
 80013f2:	481e      	ldr	r0, [pc, #120]	; (800146c <HAL_LTDC_MspInit+0x258>)
 80013f4:	f001 f87e 	bl	80024f4 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = G7_Pin|B2_Pin;
 80013f8:	2348      	movs	r3, #72	; 0x48
 80013fa:	657b      	str	r3, [r7, #84]	; 0x54
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80013fc:	2302      	movs	r3, #2
 80013fe:	65bb      	str	r3, [r7, #88]	; 0x58
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001400:	2300      	movs	r3, #0
 8001402:	65fb      	str	r3, [r7, #92]	; 0x5c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001404:	2300      	movs	r3, #0
 8001406:	663b      	str	r3, [r7, #96]	; 0x60
    GPIO_InitStruct.Alternate = GPIO_AF14_LTDC;
 8001408:	230e      	movs	r3, #14
 800140a:	667b      	str	r3, [r7, #100]	; 0x64
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 800140c:	f107 0354 	add.w	r3, r7, #84	; 0x54
 8001410:	4619      	mov	r1, r3
 8001412:	4817      	ldr	r0, [pc, #92]	; (8001470 <HAL_LTDC_MspInit+0x25c>)
 8001414:	f001 f86e 	bl	80024f4 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = G3_Pin|B4_Pin;
 8001418:	f44f 53a0 	mov.w	r3, #5120	; 0x1400
 800141c:	657b      	str	r3, [r7, #84]	; 0x54
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800141e:	2302      	movs	r3, #2
 8001420:	65bb      	str	r3, [r7, #88]	; 0x58
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001422:	2300      	movs	r3, #0
 8001424:	65fb      	str	r3, [r7, #92]	; 0x5c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001426:	2300      	movs	r3, #0
 8001428:	663b      	str	r3, [r7, #96]	; 0x60
    GPIO_InitStruct.Alternate = GPIO_AF9_LTDC;
 800142a:	2309      	movs	r3, #9
 800142c:	667b      	str	r3, [r7, #100]	; 0x64
    HAL_GPIO_Init(GPIOG, &GPIO_InitStruct);
 800142e:	f107 0354 	add.w	r3, r7, #84	; 0x54
 8001432:	4619      	mov	r1, r3
 8001434:	480c      	ldr	r0, [pc, #48]	; (8001468 <HAL_LTDC_MspInit+0x254>)
 8001436:	f001 f85d 	bl	80024f4 <HAL_GPIO_Init>

    /* LTDC interrupt Init */
    HAL_NVIC_SetPriority(LTDC_IRQn, 5, 0);
 800143a:	2200      	movs	r2, #0
 800143c:	2105      	movs	r1, #5
 800143e:	2058      	movs	r0, #88	; 0x58
 8001440:	f000 fe26 	bl	8002090 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(LTDC_IRQn);
 8001444:	2058      	movs	r0, #88	; 0x58
 8001446:	f000 fe3f 	bl	80020c8 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN LTDC_MspInit 1 */

  /* USER CODE END LTDC_MspInit 1 */
  }

}
 800144a:	bf00      	nop
 800144c:	3768      	adds	r7, #104	; 0x68
 800144e:	46bd      	mov	sp, r7
 8001450:	bd80      	pop	{r7, pc}
 8001452:	bf00      	nop
 8001454:	40016800 	.word	0x40016800
 8001458:	40023800 	.word	0x40023800
 800145c:	40021400 	.word	0x40021400
 8001460:	40020000 	.word	0x40020000
 8001464:	40020400 	.word	0x40020400
 8001468:	40021800 	.word	0x40021800
 800146c:	40020800 	.word	0x40020800
 8001470:	40020c00 	.word	0x40020c00

08001474 <HAL_SPI_MspInit>:
* This function configures the hardware resources used in this example
* @param hspi: SPI handle pointer
* @retval None
*/
void HAL_SPI_MspInit(SPI_HandleTypeDef* hspi)
{
 8001474:	b580      	push	{r7, lr}
 8001476:	b08a      	sub	sp, #40	; 0x28
 8001478:	af00      	add	r7, sp, #0
 800147a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800147c:	f107 0314 	add.w	r3, r7, #20
 8001480:	2200      	movs	r2, #0
 8001482:	601a      	str	r2, [r3, #0]
 8001484:	605a      	str	r2, [r3, #4]
 8001486:	609a      	str	r2, [r3, #8]
 8001488:	60da      	str	r2, [r3, #12]
 800148a:	611a      	str	r2, [r3, #16]
  if(hspi->Instance==SPI5)
 800148c:	687b      	ldr	r3, [r7, #4]
 800148e:	681b      	ldr	r3, [r3, #0]
 8001490:	4a19      	ldr	r2, [pc, #100]	; (80014f8 <HAL_SPI_MspInit+0x84>)
 8001492:	4293      	cmp	r3, r2
 8001494:	d12c      	bne.n	80014f0 <HAL_SPI_MspInit+0x7c>
  {
  /* USER CODE BEGIN SPI5_MspInit 0 */

  /* USER CODE END SPI5_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_SPI5_CLK_ENABLE();
 8001496:	2300      	movs	r3, #0
 8001498:	613b      	str	r3, [r7, #16]
 800149a:	4b18      	ldr	r3, [pc, #96]	; (80014fc <HAL_SPI_MspInit+0x88>)
 800149c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800149e:	4a17      	ldr	r2, [pc, #92]	; (80014fc <HAL_SPI_MspInit+0x88>)
 80014a0:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 80014a4:	6453      	str	r3, [r2, #68]	; 0x44
 80014a6:	4b15      	ldr	r3, [pc, #84]	; (80014fc <HAL_SPI_MspInit+0x88>)
 80014a8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80014aa:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 80014ae:	613b      	str	r3, [r7, #16]
 80014b0:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOF_CLK_ENABLE();
 80014b2:	2300      	movs	r3, #0
 80014b4:	60fb      	str	r3, [r7, #12]
 80014b6:	4b11      	ldr	r3, [pc, #68]	; (80014fc <HAL_SPI_MspInit+0x88>)
 80014b8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80014ba:	4a10      	ldr	r2, [pc, #64]	; (80014fc <HAL_SPI_MspInit+0x88>)
 80014bc:	f043 0320 	orr.w	r3, r3, #32
 80014c0:	6313      	str	r3, [r2, #48]	; 0x30
 80014c2:	4b0e      	ldr	r3, [pc, #56]	; (80014fc <HAL_SPI_MspInit+0x88>)
 80014c4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80014c6:	f003 0320 	and.w	r3, r3, #32
 80014ca:	60fb      	str	r3, [r7, #12]
 80014cc:	68fb      	ldr	r3, [r7, #12]
    /**SPI5 GPIO Configuration
    PF7     ------> SPI5_SCK
    PF8     ------> SPI5_MISO
    PF9     ------> SPI5_MOSI
    */
    GPIO_InitStruct.Pin = SPI5_SCK_Pin|SPI5_MISO_Pin|SPI5_MOSI_Pin;
 80014ce:	f44f 7360 	mov.w	r3, #896	; 0x380
 80014d2:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80014d4:	2302      	movs	r3, #2
 80014d6:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80014d8:	2300      	movs	r3, #0
 80014da:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80014dc:	2300      	movs	r3, #0
 80014de:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI5;
 80014e0:	2305      	movs	r3, #5
 80014e2:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOF, &GPIO_InitStruct);
 80014e4:	f107 0314 	add.w	r3, r7, #20
 80014e8:	4619      	mov	r1, r3
 80014ea:	4805      	ldr	r0, [pc, #20]	; (8001500 <HAL_SPI_MspInit+0x8c>)
 80014ec:	f001 f802 	bl	80024f4 <HAL_GPIO_Init>
  /* USER CODE BEGIN SPI5_MspInit 1 */

  /* USER CODE END SPI5_MspInit 1 */
  }

}
 80014f0:	bf00      	nop
 80014f2:	3728      	adds	r7, #40	; 0x28
 80014f4:	46bd      	mov	sp, r7
 80014f6:	bd80      	pop	{r7, pc}
 80014f8:	40015000 	.word	0x40015000
 80014fc:	40023800 	.word	0x40023800
 8001500:	40021400 	.word	0x40021400

08001504 <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 8001504:	b480      	push	{r7}
 8001506:	b085      	sub	sp, #20
 8001508:	af00      	add	r7, sp, #0
 800150a:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM1)
 800150c:	687b      	ldr	r3, [r7, #4]
 800150e:	681b      	ldr	r3, [r3, #0]
 8001510:	4a0b      	ldr	r2, [pc, #44]	; (8001540 <HAL_TIM_Base_MspInit+0x3c>)
 8001512:	4293      	cmp	r3, r2
 8001514:	d10d      	bne.n	8001532 <HAL_TIM_Base_MspInit+0x2e>
  {
  /* USER CODE BEGIN TIM1_MspInit 0 */

  /* USER CODE END TIM1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM1_CLK_ENABLE();
 8001516:	2300      	movs	r3, #0
 8001518:	60fb      	str	r3, [r7, #12]
 800151a:	4b0a      	ldr	r3, [pc, #40]	; (8001544 <HAL_TIM_Base_MspInit+0x40>)
 800151c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800151e:	4a09      	ldr	r2, [pc, #36]	; (8001544 <HAL_TIM_Base_MspInit+0x40>)
 8001520:	f043 0301 	orr.w	r3, r3, #1
 8001524:	6453      	str	r3, [r2, #68]	; 0x44
 8001526:	4b07      	ldr	r3, [pc, #28]	; (8001544 <HAL_TIM_Base_MspInit+0x40>)
 8001528:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800152a:	f003 0301 	and.w	r3, r3, #1
 800152e:	60fb      	str	r3, [r7, #12]
 8001530:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN TIM1_MspInit 1 */

  /* USER CODE END TIM1_MspInit 1 */
  }

}
 8001532:	bf00      	nop
 8001534:	3714      	adds	r7, #20
 8001536:	46bd      	mov	sp, r7
 8001538:	f85d 7b04 	ldr.w	r7, [sp], #4
 800153c:	4770      	bx	lr
 800153e:	bf00      	nop
 8001540:	40010000 	.word	0x40010000
 8001544:	40023800 	.word	0x40023800

08001548 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8001548:	b580      	push	{r7, lr}
 800154a:	b08a      	sub	sp, #40	; 0x28
 800154c:	af00      	add	r7, sp, #0
 800154e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001550:	f107 0314 	add.w	r3, r7, #20
 8001554:	2200      	movs	r2, #0
 8001556:	601a      	str	r2, [r3, #0]
 8001558:	605a      	str	r2, [r3, #4]
 800155a:	609a      	str	r2, [r3, #8]
 800155c:	60da      	str	r2, [r3, #12]
 800155e:	611a      	str	r2, [r3, #16]
  if(huart->Instance==USART1)
 8001560:	687b      	ldr	r3, [r7, #4]
 8001562:	681b      	ldr	r3, [r3, #0]
 8001564:	4a19      	ldr	r2, [pc, #100]	; (80015cc <HAL_UART_MspInit+0x84>)
 8001566:	4293      	cmp	r3, r2
 8001568:	d12c      	bne.n	80015c4 <HAL_UART_MspInit+0x7c>
  {
  /* USER CODE BEGIN USART1_MspInit 0 */

  /* USER CODE END USART1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART1_CLK_ENABLE();
 800156a:	2300      	movs	r3, #0
 800156c:	613b      	str	r3, [r7, #16]
 800156e:	4b18      	ldr	r3, [pc, #96]	; (80015d0 <HAL_UART_MspInit+0x88>)
 8001570:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001572:	4a17      	ldr	r2, [pc, #92]	; (80015d0 <HAL_UART_MspInit+0x88>)
 8001574:	f043 0310 	orr.w	r3, r3, #16
 8001578:	6453      	str	r3, [r2, #68]	; 0x44
 800157a:	4b15      	ldr	r3, [pc, #84]	; (80015d0 <HAL_UART_MspInit+0x88>)
 800157c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800157e:	f003 0310 	and.w	r3, r3, #16
 8001582:	613b      	str	r3, [r7, #16]
 8001584:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001586:	2300      	movs	r3, #0
 8001588:	60fb      	str	r3, [r7, #12]
 800158a:	4b11      	ldr	r3, [pc, #68]	; (80015d0 <HAL_UART_MspInit+0x88>)
 800158c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800158e:	4a10      	ldr	r2, [pc, #64]	; (80015d0 <HAL_UART_MspInit+0x88>)
 8001590:	f043 0301 	orr.w	r3, r3, #1
 8001594:	6313      	str	r3, [r2, #48]	; 0x30
 8001596:	4b0e      	ldr	r3, [pc, #56]	; (80015d0 <HAL_UART_MspInit+0x88>)
 8001598:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800159a:	f003 0301 	and.w	r3, r3, #1
 800159e:	60fb      	str	r3, [r7, #12]
 80015a0:	68fb      	ldr	r3, [r7, #12]
    /**USART1 GPIO Configuration
    PA9     ------> USART1_TX
    PA10     ------> USART1_RX
    */
    GPIO_InitStruct.Pin = STLINK_RX_Pin|STLINK_TX_Pin;
 80015a2:	f44f 63c0 	mov.w	r3, #1536	; 0x600
 80015a6:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80015a8:	2302      	movs	r3, #2
 80015aa:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80015ac:	2300      	movs	r3, #0
 80015ae:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80015b0:	2303      	movs	r3, #3
 80015b2:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF7_USART1;
 80015b4:	2307      	movs	r3, #7
 80015b6:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80015b8:	f107 0314 	add.w	r3, r7, #20
 80015bc:	4619      	mov	r1, r3
 80015be:	4805      	ldr	r0, [pc, #20]	; (80015d4 <HAL_UART_MspInit+0x8c>)
 80015c0:	f000 ff98 	bl	80024f4 <HAL_GPIO_Init>
  /* USER CODE BEGIN USART1_MspInit 1 */

  /* USER CODE END USART1_MspInit 1 */
  }

}
 80015c4:	bf00      	nop
 80015c6:	3728      	adds	r7, #40	; 0x28
 80015c8:	46bd      	mov	sp, r7
 80015ca:	bd80      	pop	{r7, pc}
 80015cc:	40011000 	.word	0x40011000
 80015d0:	40023800 	.word	0x40023800
 80015d4:	40020000 	.word	0x40020000

080015d8 <HAL_HCD_MspInit>:
* This function configures the hardware resources used in this example
* @param hhcd: HCD handle pointer
* @retval None
*/
void HAL_HCD_MspInit(HCD_HandleTypeDef* hhcd)
{
 80015d8:	b580      	push	{r7, lr}
 80015da:	b08a      	sub	sp, #40	; 0x28
 80015dc:	af00      	add	r7, sp, #0
 80015de:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80015e0:	f107 0314 	add.w	r3, r7, #20
 80015e4:	2200      	movs	r2, #0
 80015e6:	601a      	str	r2, [r3, #0]
 80015e8:	605a      	str	r2, [r3, #4]
 80015ea:	609a      	str	r2, [r3, #8]
 80015ec:	60da      	str	r2, [r3, #12]
 80015ee:	611a      	str	r2, [r3, #16]
  if(hhcd->Instance==USB_OTG_HS)
 80015f0:	687b      	ldr	r3, [r7, #4]
 80015f2:	681b      	ldr	r3, [r3, #0]
 80015f4:	4a24      	ldr	r2, [pc, #144]	; (8001688 <HAL_HCD_MspInit+0xb0>)
 80015f6:	4293      	cmp	r3, r2
 80015f8:	d141      	bne.n	800167e <HAL_HCD_MspInit+0xa6>
  {
  /* USER CODE BEGIN USB_OTG_HS_MspInit 0 */

  /* USER CODE END USB_OTG_HS_MspInit 0 */

    __HAL_RCC_GPIOB_CLK_ENABLE();
 80015fa:	2300      	movs	r3, #0
 80015fc:	613b      	str	r3, [r7, #16]
 80015fe:	4b23      	ldr	r3, [pc, #140]	; (800168c <HAL_HCD_MspInit+0xb4>)
 8001600:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001602:	4a22      	ldr	r2, [pc, #136]	; (800168c <HAL_HCD_MspInit+0xb4>)
 8001604:	f043 0302 	orr.w	r3, r3, #2
 8001608:	6313      	str	r3, [r2, #48]	; 0x30
 800160a:	4b20      	ldr	r3, [pc, #128]	; (800168c <HAL_HCD_MspInit+0xb4>)
 800160c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800160e:	f003 0302 	and.w	r3, r3, #2
 8001612:	613b      	str	r3, [r7, #16]
 8001614:	693b      	ldr	r3, [r7, #16]
    PB12     ------> USB_OTG_HS_ID
    PB13     ------> USB_OTG_HS_VBUS
    PB14     ------> USB_OTG_HS_DM
    PB15     ------> USB_OTG_HS_DP
    */
    GPIO_InitStruct.Pin = OTG_HS_ID_Pin|OTG_HS_DM_Pin|OTG_HS_DP_Pin;
 8001616:	f44f 4350 	mov.w	r3, #53248	; 0xd000
 800161a:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800161c:	2302      	movs	r3, #2
 800161e:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001620:	2300      	movs	r3, #0
 8001622:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001624:	2300      	movs	r3, #0
 8001626:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF12_OTG_HS_FS;
 8001628:	230c      	movs	r3, #12
 800162a:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800162c:	f107 0314 	add.w	r3, r7, #20
 8001630:	4619      	mov	r1, r3
 8001632:	4817      	ldr	r0, [pc, #92]	; (8001690 <HAL_HCD_MspInit+0xb8>)
 8001634:	f000 ff5e 	bl	80024f4 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = VBUS_HS_Pin;
 8001638:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 800163c:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 800163e:	2300      	movs	r3, #0
 8001640:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001642:	2300      	movs	r3, #0
 8001644:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(VBUS_HS_GPIO_Port, &GPIO_InitStruct);
 8001646:	f107 0314 	add.w	r3, r7, #20
 800164a:	4619      	mov	r1, r3
 800164c:	4810      	ldr	r0, [pc, #64]	; (8001690 <HAL_HCD_MspInit+0xb8>)
 800164e:	f000 ff51 	bl	80024f4 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_USB_OTG_HS_CLK_ENABLE();
 8001652:	2300      	movs	r3, #0
 8001654:	60fb      	str	r3, [r7, #12]
 8001656:	4b0d      	ldr	r3, [pc, #52]	; (800168c <HAL_HCD_MspInit+0xb4>)
 8001658:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800165a:	4a0c      	ldr	r2, [pc, #48]	; (800168c <HAL_HCD_MspInit+0xb4>)
 800165c:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 8001660:	6313      	str	r3, [r2, #48]	; 0x30
 8001662:	4b0a      	ldr	r3, [pc, #40]	; (800168c <HAL_HCD_MspInit+0xb4>)
 8001664:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001666:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 800166a:	60fb      	str	r3, [r7, #12]
 800166c:	68fb      	ldr	r3, [r7, #12]
    /* USB_OTG_HS interrupt Init */
    HAL_NVIC_SetPriority(OTG_HS_IRQn, 0, 0);
 800166e:	2200      	movs	r2, #0
 8001670:	2100      	movs	r1, #0
 8001672:	204d      	movs	r0, #77	; 0x4d
 8001674:	f000 fd0c 	bl	8002090 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(OTG_HS_IRQn);
 8001678:	204d      	movs	r0, #77	; 0x4d
 800167a:	f000 fd25 	bl	80020c8 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USB_OTG_HS_MspInit 1 */

  /* USER CODE END USB_OTG_HS_MspInit 1 */
  }

}
 800167e:	bf00      	nop
 8001680:	3728      	adds	r7, #40	; 0x28
 8001682:	46bd      	mov	sp, r7
 8001684:	bd80      	pop	{r7, pc}
 8001686:	bf00      	nop
 8001688:	40040000 	.word	0x40040000
 800168c:	40023800 	.word	0x40023800
 8001690:	40020400 	.word	0x40020400

08001694 <HAL_FMC_MspInit>:

}

static uint32_t FMC_Initialized = 0;

static void HAL_FMC_MspInit(void){
 8001694:	b580      	push	{r7, lr}
 8001696:	b086      	sub	sp, #24
 8001698:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN FMC_MspInit 0 */

  /* USER CODE END FMC_MspInit 0 */
  GPIO_InitTypeDef GPIO_InitStruct ={0};
 800169a:	1d3b      	adds	r3, r7, #4
 800169c:	2200      	movs	r2, #0
 800169e:	601a      	str	r2, [r3, #0]
 80016a0:	605a      	str	r2, [r3, #4]
 80016a2:	609a      	str	r2, [r3, #8]
 80016a4:	60da      	str	r2, [r3, #12]
 80016a6:	611a      	str	r2, [r3, #16]
  if (FMC_Initialized) {
 80016a8:	4b3b      	ldr	r3, [pc, #236]	; (8001798 <HAL_FMC_MspInit+0x104>)
 80016aa:	681b      	ldr	r3, [r3, #0]
 80016ac:	2b00      	cmp	r3, #0
 80016ae:	d16f      	bne.n	8001790 <HAL_FMC_MspInit+0xfc>
    return;
  }
  FMC_Initialized = 1;
 80016b0:	4b39      	ldr	r3, [pc, #228]	; (8001798 <HAL_FMC_MspInit+0x104>)
 80016b2:	2201      	movs	r2, #1
 80016b4:	601a      	str	r2, [r3, #0]

  /* Peripheral clock enable */
  __HAL_RCC_FMC_CLK_ENABLE();
 80016b6:	2300      	movs	r3, #0
 80016b8:	603b      	str	r3, [r7, #0]
 80016ba:	4b38      	ldr	r3, [pc, #224]	; (800179c <HAL_FMC_MspInit+0x108>)
 80016bc:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80016be:	4a37      	ldr	r2, [pc, #220]	; (800179c <HAL_FMC_MspInit+0x108>)
 80016c0:	f043 0301 	orr.w	r3, r3, #1
 80016c4:	6393      	str	r3, [r2, #56]	; 0x38
 80016c6:	4b35      	ldr	r3, [pc, #212]	; (800179c <HAL_FMC_MspInit+0x108>)
 80016c8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80016ca:	f003 0301 	and.w	r3, r3, #1
 80016ce:	603b      	str	r3, [r7, #0]
 80016d0:	683b      	ldr	r3, [r7, #0]
  PB5   ------> FMC_SDCKE1
  PB6   ------> FMC_SDNE1
  PE0   ------> FMC_NBL0
  PE1   ------> FMC_NBL1
  */
  GPIO_InitStruct.Pin = A0_Pin|A1_Pin|A2_Pin|A3_Pin
 80016d2:	f64f 033f 	movw	r3, #63551	; 0xf83f
 80016d6:	607b      	str	r3, [r7, #4]
                          |A4_Pin|A5_Pin|SDNRAS_Pin|A6_Pin
                          |A7_Pin|A8_Pin|A9_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80016d8:	2302      	movs	r3, #2
 80016da:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80016dc:	2300      	movs	r3, #0
 80016de:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80016e0:	2303      	movs	r3, #3
 80016e2:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Alternate = GPIO_AF12_FMC;
 80016e4:	230c      	movs	r3, #12
 80016e6:	617b      	str	r3, [r7, #20]
  HAL_GPIO_Init(GPIOF, &GPIO_InitStruct);
 80016e8:	1d3b      	adds	r3, r7, #4
 80016ea:	4619      	mov	r1, r3
 80016ec:	482c      	ldr	r0, [pc, #176]	; (80017a0 <HAL_FMC_MspInit+0x10c>)
 80016ee:	f000 ff01 	bl	80024f4 <HAL_GPIO_Init>

  GPIO_InitStruct.Pin = SDNWE_Pin;
 80016f2:	2301      	movs	r3, #1
 80016f4:	607b      	str	r3, [r7, #4]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80016f6:	2302      	movs	r3, #2
 80016f8:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80016fa:	2300      	movs	r3, #0
 80016fc:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80016fe:	2303      	movs	r3, #3
 8001700:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Alternate = GPIO_AF12_FMC;
 8001702:	230c      	movs	r3, #12
 8001704:	617b      	str	r3, [r7, #20]
  HAL_GPIO_Init(SDNWE_GPIO_Port, &GPIO_InitStruct);
 8001706:	1d3b      	adds	r3, r7, #4
 8001708:	4619      	mov	r1, r3
 800170a:	4826      	ldr	r0, [pc, #152]	; (80017a4 <HAL_FMC_MspInit+0x110>)
 800170c:	f000 fef2 	bl	80024f4 <HAL_GPIO_Init>

  GPIO_InitStruct.Pin = A10_Pin|A11_Pin|BA0_Pin|BA1_Pin
 8001710:	f248 1333 	movw	r3, #33075	; 0x8133
 8001714:	607b      	str	r3, [r7, #4]
                          |SDCLK_Pin|SDNCAS_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001716:	2302      	movs	r3, #2
 8001718:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800171a:	2300      	movs	r3, #0
 800171c:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800171e:	2303      	movs	r3, #3
 8001720:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Alternate = GPIO_AF12_FMC;
 8001722:	230c      	movs	r3, #12
 8001724:	617b      	str	r3, [r7, #20]
  HAL_GPIO_Init(GPIOG, &GPIO_InitStruct);
 8001726:	1d3b      	adds	r3, r7, #4
 8001728:	4619      	mov	r1, r3
 800172a:	481f      	ldr	r0, [pc, #124]	; (80017a8 <HAL_FMC_MspInit+0x114>)
 800172c:	f000 fee2 	bl	80024f4 <HAL_GPIO_Init>

  GPIO_InitStruct.Pin = D4_Pin|D5_Pin|D6_Pin|D7_Pin
 8001730:	f64f 7383 	movw	r3, #65411	; 0xff83
 8001734:	607b      	str	r3, [r7, #4]
                          |D8_Pin|D9_Pin|D10_Pin|D11_Pin
                          |D12_Pin|NBL0_Pin|NBL1_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001736:	2302      	movs	r3, #2
 8001738:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800173a:	2300      	movs	r3, #0
 800173c:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800173e:	2303      	movs	r3, #3
 8001740:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Alternate = GPIO_AF12_FMC;
 8001742:	230c      	movs	r3, #12
 8001744:	617b      	str	r3, [r7, #20]
  HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 8001746:	1d3b      	adds	r3, r7, #4
 8001748:	4619      	mov	r1, r3
 800174a:	4818      	ldr	r0, [pc, #96]	; (80017ac <HAL_FMC_MspInit+0x118>)
 800174c:	f000 fed2 	bl	80024f4 <HAL_GPIO_Init>

  GPIO_InitStruct.Pin = D13_Pin|D14_Pin|D15_Pin|D0_Pin
 8001750:	f24c 7303 	movw	r3, #50947	; 0xc703
 8001754:	607b      	str	r3, [r7, #4]
                          |D1_Pin|D2_Pin|D3_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001756:	2302      	movs	r3, #2
 8001758:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800175a:	2300      	movs	r3, #0
 800175c:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800175e:	2303      	movs	r3, #3
 8001760:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Alternate = GPIO_AF12_FMC;
 8001762:	230c      	movs	r3, #12
 8001764:	617b      	str	r3, [r7, #20]
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8001766:	1d3b      	adds	r3, r7, #4
 8001768:	4619      	mov	r1, r3
 800176a:	4811      	ldr	r0, [pc, #68]	; (80017b0 <HAL_FMC_MspInit+0x11c>)
 800176c:	f000 fec2 	bl	80024f4 <HAL_GPIO_Init>

  GPIO_InitStruct.Pin = SDCKE1_Pin|SDNE1_Pin;
 8001770:	2360      	movs	r3, #96	; 0x60
 8001772:	607b      	str	r3, [r7, #4]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001774:	2302      	movs	r3, #2
 8001776:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001778:	2300      	movs	r3, #0
 800177a:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800177c:	2303      	movs	r3, #3
 800177e:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Alternate = GPIO_AF12_FMC;
 8001780:	230c      	movs	r3, #12
 8001782:	617b      	str	r3, [r7, #20]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001784:	1d3b      	adds	r3, r7, #4
 8001786:	4619      	mov	r1, r3
 8001788:	480a      	ldr	r0, [pc, #40]	; (80017b4 <HAL_FMC_MspInit+0x120>)
 800178a:	f000 feb3 	bl	80024f4 <HAL_GPIO_Init>
 800178e:	e000      	b.n	8001792 <HAL_FMC_MspInit+0xfe>
    return;
 8001790:	bf00      	nop

  /* USER CODE BEGIN FMC_MspInit 1 */

  /* USER CODE END FMC_MspInit 1 */
}
 8001792:	3718      	adds	r7, #24
 8001794:	46bd      	mov	sp, r7
 8001796:	bd80      	pop	{r7, pc}
 8001798:	20000a24 	.word	0x20000a24
 800179c:	40023800 	.word	0x40023800
 80017a0:	40021400 	.word	0x40021400
 80017a4:	40020800 	.word	0x40020800
 80017a8:	40021800 	.word	0x40021800
 80017ac:	40021000 	.word	0x40021000
 80017b0:	40020c00 	.word	0x40020c00
 80017b4:	40020400 	.word	0x40020400

080017b8 <HAL_SDRAM_MspInit>:

void HAL_SDRAM_MspInit(SDRAM_HandleTypeDef* hsdram){
 80017b8:	b580      	push	{r7, lr}
 80017ba:	b082      	sub	sp, #8
 80017bc:	af00      	add	r7, sp, #0
 80017be:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN SDRAM_MspInit 0 */

  /* USER CODE END SDRAM_MspInit 0 */
  HAL_FMC_MspInit();
 80017c0:	f7ff ff68 	bl	8001694 <HAL_FMC_MspInit>
  /* USER CODE BEGIN SDRAM_MspInit 1 */

  /* USER CODE END SDRAM_MspInit 1 */
}
 80017c4:	bf00      	nop
 80017c6:	3708      	adds	r7, #8
 80017c8:	46bd      	mov	sp, r7
 80017ca:	bd80      	pop	{r7, pc}

080017cc <HAL_InitTick>:
  *         reset by HAL_Init() or at any time when clock is configured, by HAL_RCC_ClockConfig().
  * @param  TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 80017cc:	b580      	push	{r7, lr}
 80017ce:	b08e      	sub	sp, #56	; 0x38
 80017d0:	af00      	add	r7, sp, #0
 80017d2:	6078      	str	r0, [r7, #4]
  RCC_ClkInitTypeDef    clkconfig;
  uint32_t              uwTimclock, uwAPB1Prescaler = 0U;
 80017d4:	2300      	movs	r3, #0
 80017d6:	62fb      	str	r3, [r7, #44]	; 0x2c

  uint32_t              uwPrescalerValue = 0U;
 80017d8:	2300      	movs	r3, #0
 80017da:	62bb      	str	r3, [r7, #40]	; 0x28
  uint32_t              pFLatency;
  HAL_StatusTypeDef     status;

  /* Enable TIM6 clock */
  __HAL_RCC_TIM6_CLK_ENABLE();
 80017dc:	2300      	movs	r3, #0
 80017de:	60fb      	str	r3, [r7, #12]
 80017e0:	4b33      	ldr	r3, [pc, #204]	; (80018b0 <HAL_InitTick+0xe4>)
 80017e2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80017e4:	4a32      	ldr	r2, [pc, #200]	; (80018b0 <HAL_InitTick+0xe4>)
 80017e6:	f043 0310 	orr.w	r3, r3, #16
 80017ea:	6413      	str	r3, [r2, #64]	; 0x40
 80017ec:	4b30      	ldr	r3, [pc, #192]	; (80018b0 <HAL_InitTick+0xe4>)
 80017ee:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80017f0:	f003 0310 	and.w	r3, r3, #16
 80017f4:	60fb      	str	r3, [r7, #12]
 80017f6:	68fb      	ldr	r3, [r7, #12]

  /* Get clock configuration */
  HAL_RCC_GetClockConfig(&clkconfig, &pFLatency);
 80017f8:	f107 0210 	add.w	r2, r7, #16
 80017fc:	f107 0314 	add.w	r3, r7, #20
 8001800:	4611      	mov	r1, r2
 8001802:	4618      	mov	r0, r3
 8001804:	f003 fbac 	bl	8004f60 <HAL_RCC_GetClockConfig>

  /* Get APB1 prescaler */
  uwAPB1Prescaler = clkconfig.APB1CLKDivider;
 8001808:	6a3b      	ldr	r3, [r7, #32]
 800180a:	62fb      	str	r3, [r7, #44]	; 0x2c
  /* Compute TIM6 clock */
  if (uwAPB1Prescaler == RCC_HCLK_DIV1)
 800180c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800180e:	2b00      	cmp	r3, #0
 8001810:	d103      	bne.n	800181a <HAL_InitTick+0x4e>
  {
    uwTimclock = HAL_RCC_GetPCLK1Freq();
 8001812:	f003 fb7d 	bl	8004f10 <HAL_RCC_GetPCLK1Freq>
 8001816:	6378      	str	r0, [r7, #52]	; 0x34
 8001818:	e004      	b.n	8001824 <HAL_InitTick+0x58>
  }
  else
  {
    uwTimclock = 2UL * HAL_RCC_GetPCLK1Freq();
 800181a:	f003 fb79 	bl	8004f10 <HAL_RCC_GetPCLK1Freq>
 800181e:	4603      	mov	r3, r0
 8001820:	005b      	lsls	r3, r3, #1
 8001822:	637b      	str	r3, [r7, #52]	; 0x34
  }

  /* Compute the prescaler value to have TIM6 counter clock equal to 1MHz */
  uwPrescalerValue = (uint32_t) ((uwTimclock / 1000000U) - 1U);
 8001824:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8001826:	4a23      	ldr	r2, [pc, #140]	; (80018b4 <HAL_InitTick+0xe8>)
 8001828:	fba2 2303 	umull	r2, r3, r2, r3
 800182c:	0c9b      	lsrs	r3, r3, #18
 800182e:	3b01      	subs	r3, #1
 8001830:	62bb      	str	r3, [r7, #40]	; 0x28

  /* Initialize TIM6 */
  htim6.Instance = TIM6;
 8001832:	4b21      	ldr	r3, [pc, #132]	; (80018b8 <HAL_InitTick+0xec>)
 8001834:	4a21      	ldr	r2, [pc, #132]	; (80018bc <HAL_InitTick+0xf0>)
 8001836:	601a      	str	r2, [r3, #0]
  + Period = [(TIM6CLK/1000) - 1]. to have a (1/1000) s time base.
  + Prescaler = (uwTimclock/1000000 - 1) to have a 1MHz counter clock.
  + ClockDivision = 0
  + Counter direction = Up
  */
  htim6.Init.Period = (1000000U / 1000U) - 1U;
 8001838:	4b1f      	ldr	r3, [pc, #124]	; (80018b8 <HAL_InitTick+0xec>)
 800183a:	f240 32e7 	movw	r2, #999	; 0x3e7
 800183e:	60da      	str	r2, [r3, #12]
  htim6.Init.Prescaler = uwPrescalerValue;
 8001840:	4a1d      	ldr	r2, [pc, #116]	; (80018b8 <HAL_InitTick+0xec>)
 8001842:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8001844:	6053      	str	r3, [r2, #4]
  htim6.Init.ClockDivision = 0;
 8001846:	4b1c      	ldr	r3, [pc, #112]	; (80018b8 <HAL_InitTick+0xec>)
 8001848:	2200      	movs	r2, #0
 800184a:	611a      	str	r2, [r3, #16]
  htim6.Init.CounterMode = TIM_COUNTERMODE_UP;
 800184c:	4b1a      	ldr	r3, [pc, #104]	; (80018b8 <HAL_InitTick+0xec>)
 800184e:	2200      	movs	r2, #0
 8001850:	609a      	str	r2, [r3, #8]
  htim6.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8001852:	4b19      	ldr	r3, [pc, #100]	; (80018b8 <HAL_InitTick+0xec>)
 8001854:	2200      	movs	r2, #0
 8001856:	619a      	str	r2, [r3, #24]

  status = HAL_TIM_Base_Init(&htim6);
 8001858:	4817      	ldr	r0, [pc, #92]	; (80018b8 <HAL_InitTick+0xec>)
 800185a:	f003 fe30 	bl	80054be <HAL_TIM_Base_Init>
 800185e:	4603      	mov	r3, r0
 8001860:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
  if (status == HAL_OK)
 8001864:	f897 3033 	ldrb.w	r3, [r7, #51]	; 0x33
 8001868:	2b00      	cmp	r3, #0
 800186a:	d11b      	bne.n	80018a4 <HAL_InitTick+0xd8>
  {
    /* Start the TIM time Base generation in interrupt mode */
    status = HAL_TIM_Base_Start_IT(&htim6);
 800186c:	4812      	ldr	r0, [pc, #72]	; (80018b8 <HAL_InitTick+0xec>)
 800186e:	f003 fe75 	bl	800555c <HAL_TIM_Base_Start_IT>
 8001872:	4603      	mov	r3, r0
 8001874:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
    if (status == HAL_OK)
 8001878:	f897 3033 	ldrb.w	r3, [r7, #51]	; 0x33
 800187c:	2b00      	cmp	r3, #0
 800187e:	d111      	bne.n	80018a4 <HAL_InitTick+0xd8>
    {
    /* Enable the TIM6 global Interrupt */
        HAL_NVIC_EnableIRQ(TIM6_DAC_IRQn);
 8001880:	2036      	movs	r0, #54	; 0x36
 8001882:	f000 fc21 	bl	80020c8 <HAL_NVIC_EnableIRQ>
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8001886:	687b      	ldr	r3, [r7, #4]
 8001888:	2b0f      	cmp	r3, #15
 800188a:	d808      	bhi.n	800189e <HAL_InitTick+0xd2>
      {
        /* Configure the TIM IRQ priority */
        HAL_NVIC_SetPriority(TIM6_DAC_IRQn, TickPriority, 0U);
 800188c:	2200      	movs	r2, #0
 800188e:	6879      	ldr	r1, [r7, #4]
 8001890:	2036      	movs	r0, #54	; 0x36
 8001892:	f000 fbfd 	bl	8002090 <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 8001896:	4a0a      	ldr	r2, [pc, #40]	; (80018c0 <HAL_InitTick+0xf4>)
 8001898:	687b      	ldr	r3, [r7, #4]
 800189a:	6013      	str	r3, [r2, #0]
 800189c:	e002      	b.n	80018a4 <HAL_InitTick+0xd8>
      }
      else
      {
        status = HAL_ERROR;
 800189e:	2301      	movs	r3, #1
 80018a0:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
      }
    }
  }

 /* Return function status */
  return status;
 80018a4:	f897 3033 	ldrb.w	r3, [r7, #51]	; 0x33
}
 80018a8:	4618      	mov	r0, r3
 80018aa:	3738      	adds	r7, #56	; 0x38
 80018ac:	46bd      	mov	sp, r7
 80018ae:	bd80      	pop	{r7, pc}
 80018b0:	40023800 	.word	0x40023800
 80018b4:	431bde83 	.word	0x431bde83
 80018b8:	20000a28 	.word	0x20000a28
 80018bc:	40001000 	.word	0x40001000
 80018c0:	20000004 	.word	0x20000004

080018c4 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 80018c4:	b480      	push	{r7}
 80018c6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 80018c8:	e7fe      	b.n	80018c8 <NMI_Handler+0x4>

080018ca <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 80018ca:	b480      	push	{r7}
 80018cc:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 80018ce:	e7fe      	b.n	80018ce <HardFault_Handler+0x4>

080018d0 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 80018d0:	b480      	push	{r7}
 80018d2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 80018d4:	e7fe      	b.n	80018d4 <MemManage_Handler+0x4>

080018d6 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 80018d6:	b480      	push	{r7}
 80018d8:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 80018da:	e7fe      	b.n	80018da <BusFault_Handler+0x4>

080018dc <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 80018dc:	b480      	push	{r7}
 80018de:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 80018e0:	e7fe      	b.n	80018e0 <UsageFault_Handler+0x4>

080018e2 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 80018e2:	b480      	push	{r7}
 80018e4:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 80018e6:	bf00      	nop
 80018e8:	46bd      	mov	sp, r7
 80018ea:	f85d 7b04 	ldr.w	r7, [sp], #4
 80018ee:	4770      	bx	lr

080018f0 <TIM6_DAC_IRQHandler>:

/**
  * @brief This function handles TIM6 global interrupt, DAC1 and DAC2 underrun error interrupts.
  */
void TIM6_DAC_IRQHandler(void)
{
 80018f0:	b580      	push	{r7, lr}
 80018f2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM6_DAC_IRQn 0 */

  /* USER CODE END TIM6_DAC_IRQn 0 */
  HAL_TIM_IRQHandler(&htim6);
 80018f4:	4802      	ldr	r0, [pc, #8]	; (8001900 <TIM6_DAC_IRQHandler+0x10>)
 80018f6:	f003 fea1 	bl	800563c <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM6_DAC_IRQn 1 */

  /* USER CODE END TIM6_DAC_IRQn 1 */
}
 80018fa:	bf00      	nop
 80018fc:	bd80      	pop	{r7, pc}
 80018fe:	bf00      	nop
 8001900:	20000a28 	.word	0x20000a28

08001904 <OTG_HS_IRQHandler>:

/**
  * @brief This function handles USB On The Go HS global interrupt.
  */
void OTG_HS_IRQHandler(void)
{
 8001904:	b580      	push	{r7, lr}
 8001906:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN OTG_HS_IRQn 0 */

  /* USER CODE END OTG_HS_IRQn 0 */
  HAL_HCD_IRQHandler(&hhcd_USB_OTG_HS);
 8001908:	4802      	ldr	r0, [pc, #8]	; (8001914 <OTG_HS_IRQHandler+0x10>)
 800190a:	f001 f81a 	bl	8002942 <HAL_HCD_IRQHandler>
  /* USER CODE BEGIN OTG_HS_IRQn 1 */

  /* USER CODE END OTG_HS_IRQn 1 */
}
 800190e:	bf00      	nop
 8001910:	bd80      	pop	{r7, pc}
 8001912:	bf00      	nop
 8001914:	200006ec 	.word	0x200006ec

08001918 <LTDC_IRQHandler>:

/**
  * @brief This function handles LTDC global interrupt.
  */
void LTDC_IRQHandler(void)
{
 8001918:	b580      	push	{r7, lr}
 800191a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN LTDC_IRQn 0 */

  /* USER CODE END LTDC_IRQn 0 */
  HAL_LTDC_IRQHandler(&hltdc);
 800191c:	4802      	ldr	r0, [pc, #8]	; (8001928 <LTDC_IRQHandler+0x10>)
 800191e:	f002 fbef 	bl	8004100 <HAL_LTDC_IRQHandler>
  /* USER CODE BEGIN LTDC_IRQn 1 */

  /* USER CODE END LTDC_IRQn 1 */
}
 8001922:	bf00      	nop
 8001924:	bd80      	pop	{r7, pc}
 8001926:	bf00      	nop
 8001928:	20000560 	.word	0x20000560

0800192c <DMA2D_IRQHandler>:

/**
  * @brief This function handles DMA2D global interrupt.
  */
void DMA2D_IRQHandler(void)
{
 800192c:	b580      	push	{r7, lr}
 800192e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA2D_IRQn 0 */

  /* USER CODE END DMA2D_IRQn 0 */
  HAL_DMA2D_IRQHandler(&hdma2d);
 8001930:	4802      	ldr	r0, [pc, #8]	; (800193c <DMA2D_IRQHandler+0x10>)
 8001932:	f000 fc3c 	bl	80021ae <HAL_DMA2D_IRQHandler>
  /* USER CODE BEGIN DMA2D_IRQn 1 */

  /* USER CODE END DMA2D_IRQn 1 */
}
 8001936:	bf00      	nop
 8001938:	bd80      	pop	{r7, pc}
 800193a:	bf00      	nop
 800193c:	200004cc 	.word	0x200004cc

08001940 <_read>:
  _kill(status, -1);
  while (1) {}    /* Make sure we hang here */
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 8001940:	b580      	push	{r7, lr}
 8001942:	b086      	sub	sp, #24
 8001944:	af00      	add	r7, sp, #0
 8001946:	60f8      	str	r0, [r7, #12]
 8001948:	60b9      	str	r1, [r7, #8]
 800194a:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 800194c:	2300      	movs	r3, #0
 800194e:	617b      	str	r3, [r7, #20]
 8001950:	e00a      	b.n	8001968 <_read+0x28>
  {
    *ptr++ = __io_getchar();
 8001952:	f3af 8000 	nop.w
 8001956:	4601      	mov	r1, r0
 8001958:	68bb      	ldr	r3, [r7, #8]
 800195a:	1c5a      	adds	r2, r3, #1
 800195c:	60ba      	str	r2, [r7, #8]
 800195e:	b2ca      	uxtb	r2, r1
 8001960:	701a      	strb	r2, [r3, #0]
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001962:	697b      	ldr	r3, [r7, #20]
 8001964:	3301      	adds	r3, #1
 8001966:	617b      	str	r3, [r7, #20]
 8001968:	697a      	ldr	r2, [r7, #20]
 800196a:	687b      	ldr	r3, [r7, #4]
 800196c:	429a      	cmp	r2, r3
 800196e:	dbf0      	blt.n	8001952 <_read+0x12>
  }

  return len;
 8001970:	687b      	ldr	r3, [r7, #4]
}
 8001972:	4618      	mov	r0, r3
 8001974:	3718      	adds	r7, #24
 8001976:	46bd      	mov	sp, r7
 8001978:	bd80      	pop	{r7, pc}

0800197a <_close>:
  }
  return len;
}

int _close(int file)
{
 800197a:	b480      	push	{r7}
 800197c:	b083      	sub	sp, #12
 800197e:	af00      	add	r7, sp, #0
 8001980:	6078      	str	r0, [r7, #4]
  (void)file;
  return -1;
 8001982:	f04f 33ff 	mov.w	r3, #4294967295
}
 8001986:	4618      	mov	r0, r3
 8001988:	370c      	adds	r7, #12
 800198a:	46bd      	mov	sp, r7
 800198c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001990:	4770      	bx	lr

08001992 <_fstat>:


int _fstat(int file, struct stat *st)
{
 8001992:	b480      	push	{r7}
 8001994:	b083      	sub	sp, #12
 8001996:	af00      	add	r7, sp, #0
 8001998:	6078      	str	r0, [r7, #4]
 800199a:	6039      	str	r1, [r7, #0]
  (void)file;
  st->st_mode = S_IFCHR;
 800199c:	683b      	ldr	r3, [r7, #0]
 800199e:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 80019a2:	605a      	str	r2, [r3, #4]
  return 0;
 80019a4:	2300      	movs	r3, #0
}
 80019a6:	4618      	mov	r0, r3
 80019a8:	370c      	adds	r7, #12
 80019aa:	46bd      	mov	sp, r7
 80019ac:	f85d 7b04 	ldr.w	r7, [sp], #4
 80019b0:	4770      	bx	lr

080019b2 <_isatty>:

int _isatty(int file)
{
 80019b2:	b480      	push	{r7}
 80019b4:	b083      	sub	sp, #12
 80019b6:	af00      	add	r7, sp, #0
 80019b8:	6078      	str	r0, [r7, #4]
  (void)file;
  return 1;
 80019ba:	2301      	movs	r3, #1
}
 80019bc:	4618      	mov	r0, r3
 80019be:	370c      	adds	r7, #12
 80019c0:	46bd      	mov	sp, r7
 80019c2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80019c6:	4770      	bx	lr

080019c8 <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 80019c8:	b480      	push	{r7}
 80019ca:	b085      	sub	sp, #20
 80019cc:	af00      	add	r7, sp, #0
 80019ce:	60f8      	str	r0, [r7, #12]
 80019d0:	60b9      	str	r1, [r7, #8]
 80019d2:	607a      	str	r2, [r7, #4]
  (void)file;
  (void)ptr;
  (void)dir;
  return 0;
 80019d4:	2300      	movs	r3, #0
}
 80019d6:	4618      	mov	r0, r3
 80019d8:	3714      	adds	r7, #20
 80019da:	46bd      	mov	sp, r7
 80019dc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80019e0:	4770      	bx	lr
	...

080019e4 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 80019e4:	b580      	push	{r7, lr}
 80019e6:	b086      	sub	sp, #24
 80019e8:	af00      	add	r7, sp, #0
 80019ea:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 80019ec:	4a14      	ldr	r2, [pc, #80]	; (8001a40 <_sbrk+0x5c>)
 80019ee:	4b15      	ldr	r3, [pc, #84]	; (8001a44 <_sbrk+0x60>)
 80019f0:	1ad3      	subs	r3, r2, r3
 80019f2:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 80019f4:	697b      	ldr	r3, [r7, #20]
 80019f6:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 80019f8:	4b13      	ldr	r3, [pc, #76]	; (8001a48 <_sbrk+0x64>)
 80019fa:	681b      	ldr	r3, [r3, #0]
 80019fc:	2b00      	cmp	r3, #0
 80019fe:	d102      	bne.n	8001a06 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8001a00:	4b11      	ldr	r3, [pc, #68]	; (8001a48 <_sbrk+0x64>)
 8001a02:	4a12      	ldr	r2, [pc, #72]	; (8001a4c <_sbrk+0x68>)
 8001a04:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8001a06:	4b10      	ldr	r3, [pc, #64]	; (8001a48 <_sbrk+0x64>)
 8001a08:	681a      	ldr	r2, [r3, #0]
 8001a0a:	687b      	ldr	r3, [r7, #4]
 8001a0c:	4413      	add	r3, r2
 8001a0e:	693a      	ldr	r2, [r7, #16]
 8001a10:	429a      	cmp	r2, r3
 8001a12:	d207      	bcs.n	8001a24 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8001a14:	f006 fc9a 	bl	800834c <__errno>
 8001a18:	4603      	mov	r3, r0
 8001a1a:	220c      	movs	r2, #12
 8001a1c:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8001a1e:	f04f 33ff 	mov.w	r3, #4294967295
 8001a22:	e009      	b.n	8001a38 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8001a24:	4b08      	ldr	r3, [pc, #32]	; (8001a48 <_sbrk+0x64>)
 8001a26:	681b      	ldr	r3, [r3, #0]
 8001a28:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8001a2a:	4b07      	ldr	r3, [pc, #28]	; (8001a48 <_sbrk+0x64>)
 8001a2c:	681a      	ldr	r2, [r3, #0]
 8001a2e:	687b      	ldr	r3, [r7, #4]
 8001a30:	4413      	add	r3, r2
 8001a32:	4a05      	ldr	r2, [pc, #20]	; (8001a48 <_sbrk+0x64>)
 8001a34:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8001a36:	68fb      	ldr	r3, [r7, #12]
}
 8001a38:	4618      	mov	r0, r3
 8001a3a:	3718      	adds	r7, #24
 8001a3c:	46bd      	mov	sp, r7
 8001a3e:	bd80      	pop	{r7, pc}
 8001a40:	20030000 	.word	0x20030000
 8001a44:	00000400 	.word	0x00000400
 8001a48:	20000a70 	.word	0x20000a70
 8001a4c:	200069d0 	.word	0x200069d0

08001a50 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8001a50:	b480      	push	{r7}
 8001a52:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8001a54:	4b06      	ldr	r3, [pc, #24]	; (8001a70 <SystemInit+0x20>)
 8001a56:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8001a5a:	4a05      	ldr	r2, [pc, #20]	; (8001a70 <SystemInit+0x20>)
 8001a5c:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8001a60:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8001a64:	bf00      	nop
 8001a66:	46bd      	mov	sp, r7
 8001a68:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a6c:	4770      	bx	lr
 8001a6e:	bf00      	nop
 8001a70:	e000ed00 	.word	0xe000ed00

08001a74 <tm_main>:


/* Define main entry point.  */

void tm_main()
{
 8001a74:	b580      	push	{r7, lr}
 8001a76:	af00      	add	r7, sp, #0

    /* Initialize the test.  */
	printf("****This test is running on the STM32F429I Discovery with ThreadX_RTOS **** \n\r");
 8001a78:	4803      	ldr	r0, [pc, #12]	; (8001a88 <tm_main+0x14>)
 8001a7a:	f006 fc99 	bl	80083b0 <iprintf>
    tm_initialize(tm_cooperative_scheduling_initialize);
 8001a7e:	4803      	ldr	r0, [pc, #12]	; (8001a8c <tm_main+0x18>)
 8001a80:	f000 f92c 	bl	8001cdc <tm_initialize>
}
 8001a84:	bf00      	nop
 8001a86:	bd80      	pop	{r7, pc}
 8001a88:	080092f8 	.word	0x080092f8
 8001a8c:	08001a91 	.word	0x08001a91

08001a90 <tm_cooperative_scheduling_initialize>:


/* Define the cooperative scheduling test initialization.  */

void  tm_cooperative_scheduling_initialize(void)
{
 8001a90:	b580      	push	{r7, lr}
 8001a92:	af00      	add	r7, sp, #0

    /* Create all 5 threads at priority 3.  */
    tm_thread_create(0, 3, tm_cooperative_thread_0_entry);
 8001a94:	4a18      	ldr	r2, [pc, #96]	; (8001af8 <tm_cooperative_scheduling_initialize+0x68>)
 8001a96:	2103      	movs	r1, #3
 8001a98:	2000      	movs	r0, #0
 8001a9a:	f000 f92f 	bl	8001cfc <tm_thread_create>
    tm_thread_create(1, 3, tm_cooperative_thread_1_entry);
 8001a9e:	4a17      	ldr	r2, [pc, #92]	; (8001afc <tm_cooperative_scheduling_initialize+0x6c>)
 8001aa0:	2103      	movs	r1, #3
 8001aa2:	2001      	movs	r0, #1
 8001aa4:	f000 f92a 	bl	8001cfc <tm_thread_create>
    tm_thread_create(2, 3, tm_cooperative_thread_2_entry);
 8001aa8:	4a15      	ldr	r2, [pc, #84]	; (8001b00 <tm_cooperative_scheduling_initialize+0x70>)
 8001aaa:	2103      	movs	r1, #3
 8001aac:	2002      	movs	r0, #2
 8001aae:	f000 f925 	bl	8001cfc <tm_thread_create>
    tm_thread_create(3, 3, tm_cooperative_thread_3_entry);
 8001ab2:	4a14      	ldr	r2, [pc, #80]	; (8001b04 <tm_cooperative_scheduling_initialize+0x74>)
 8001ab4:	2103      	movs	r1, #3
 8001ab6:	2003      	movs	r0, #3
 8001ab8:	f000 f920 	bl	8001cfc <tm_thread_create>
    tm_thread_create(4, 3, tm_cooperative_thread_4_entry);
 8001abc:	4a12      	ldr	r2, [pc, #72]	; (8001b08 <tm_cooperative_scheduling_initialize+0x78>)
 8001abe:	2103      	movs	r1, #3
 8001ac0:	2004      	movs	r0, #4
 8001ac2:	f000 f91b 	bl	8001cfc <tm_thread_create>

    /* Resume all 5 threads.  */
    tm_thread_resume(0);
 8001ac6:	2000      	movs	r0, #0
 8001ac8:	f000 f958 	bl	8001d7c <tm_thread_resume>
    tm_thread_resume(1);
 8001acc:	2001      	movs	r0, #1
 8001ace:	f000 f955 	bl	8001d7c <tm_thread_resume>
    tm_thread_resume(2);
 8001ad2:	2002      	movs	r0, #2
 8001ad4:	f000 f952 	bl	8001d7c <tm_thread_resume>
    tm_thread_resume(3);
 8001ad8:	2003      	movs	r0, #3
 8001ada:	f000 f94f 	bl	8001d7c <tm_thread_resume>
    tm_thread_resume(4);
 8001ade:	2004      	movs	r0, #4
 8001ae0:	f000 f94c 	bl	8001d7c <tm_thread_resume>

    /* Create the reporting thread. It will preempt the other 
       threads and print out the test results.  */
    tm_thread_create(5, 2, tm_cooperative_thread_report);
 8001ae4:	4a09      	ldr	r2, [pc, #36]	; (8001b0c <tm_cooperative_scheduling_initialize+0x7c>)
 8001ae6:	2102      	movs	r1, #2
 8001ae8:	2005      	movs	r0, #5
 8001aea:	f000 f907 	bl	8001cfc <tm_thread_create>
    tm_thread_resume(5);
 8001aee:	2005      	movs	r0, #5
 8001af0:	f000 f944 	bl	8001d7c <tm_thread_resume>
}
 8001af4:	bf00      	nop
 8001af6:	bd80      	pop	{r7, pc}
 8001af8:	08001b11 	.word	0x08001b11
 8001afc:	08001b29 	.word	0x08001b29
 8001b00:	08001b41 	.word	0x08001b41
 8001b04:	08001b59 	.word	0x08001b59
 8001b08:	08001b71 	.word	0x08001b71
 8001b0c:	08001b89 	.word	0x08001b89

08001b10 <tm_cooperative_thread_0_entry>:


/* Define the first cooperative thread.  */
void  tm_cooperative_thread_0_entry(void)
{
 8001b10:	b580      	push	{r7, lr}
 8001b12:	af00      	add	r7, sp, #0

    while(1)
    {
      
        /* Relinquish to all other threads at same priority.  */
        tm_thread_relinquish();
 8001b14:	f000 f94c 	bl	8001db0 <tm_thread_relinquish>

        /* Increment this thread's counter.  */
        tm_cooperative_thread_0_counter++;
 8001b18:	4b02      	ldr	r3, [pc, #8]	; (8001b24 <tm_cooperative_thread_0_entry+0x14>)
 8001b1a:	681b      	ldr	r3, [r3, #0]
 8001b1c:	3301      	adds	r3, #1
 8001b1e:	4a01      	ldr	r2, [pc, #4]	; (8001b24 <tm_cooperative_thread_0_entry+0x14>)
 8001b20:	6013      	str	r3, [r2, #0]
        tm_thread_relinquish();
 8001b22:	e7f7      	b.n	8001b14 <tm_cooperative_thread_0_entry+0x4>
 8001b24:	20000a74 	.word	0x20000a74

08001b28 <tm_cooperative_thread_1_entry>:
    }
}

/* Define the second cooperative thread.  */
void  tm_cooperative_thread_1_entry(void)
{
 8001b28:	b580      	push	{r7, lr}
 8001b2a:	af00      	add	r7, sp, #0

    while(1)
    {

        /* Relinquish to all other threads at same priority.  */
        tm_thread_relinquish();
 8001b2c:	f000 f940 	bl	8001db0 <tm_thread_relinquish>

        /* Increment this thread's counter.  */
        tm_cooperative_thread_1_counter++;
 8001b30:	4b02      	ldr	r3, [pc, #8]	; (8001b3c <tm_cooperative_thread_1_entry+0x14>)
 8001b32:	681b      	ldr	r3, [r3, #0]
 8001b34:	3301      	adds	r3, #1
 8001b36:	4a01      	ldr	r2, [pc, #4]	; (8001b3c <tm_cooperative_thread_1_entry+0x14>)
 8001b38:	6013      	str	r3, [r2, #0]
        tm_thread_relinquish();
 8001b3a:	e7f7      	b.n	8001b2c <tm_cooperative_thread_1_entry+0x4>
 8001b3c:	20000a78 	.word	0x20000a78

08001b40 <tm_cooperative_thread_2_entry>:
    }
}

/* Define the third cooperative thread.  */
void  tm_cooperative_thread_2_entry(void)
{
 8001b40:	b580      	push	{r7, lr}
 8001b42:	af00      	add	r7, sp, #0

    while(1)
    {

        /* Relinquish to all other threads at same priority.  */
        tm_thread_relinquish();
 8001b44:	f000 f934 	bl	8001db0 <tm_thread_relinquish>

        /* Increment this thread's counter.  */
        tm_cooperative_thread_2_counter++;
 8001b48:	4b02      	ldr	r3, [pc, #8]	; (8001b54 <tm_cooperative_thread_2_entry+0x14>)
 8001b4a:	681b      	ldr	r3, [r3, #0]
 8001b4c:	3301      	adds	r3, #1
 8001b4e:	4a01      	ldr	r2, [pc, #4]	; (8001b54 <tm_cooperative_thread_2_entry+0x14>)
 8001b50:	6013      	str	r3, [r2, #0]
        tm_thread_relinquish();
 8001b52:	e7f7      	b.n	8001b44 <tm_cooperative_thread_2_entry+0x4>
 8001b54:	20000a7c 	.word	0x20000a7c

08001b58 <tm_cooperative_thread_3_entry>:
}


/* Define the fourth cooperative thread.  */
void  tm_cooperative_thread_3_entry(void)
{
 8001b58:	b580      	push	{r7, lr}
 8001b5a:	af00      	add	r7, sp, #0

    while(1)
    {

        /* Relinquish to all other threads at same priority.  */
        tm_thread_relinquish();
 8001b5c:	f000 f928 	bl	8001db0 <tm_thread_relinquish>

        /* Increment this thread's counter.  */
        tm_cooperative_thread_3_counter++;
 8001b60:	4b02      	ldr	r3, [pc, #8]	; (8001b6c <tm_cooperative_thread_3_entry+0x14>)
 8001b62:	681b      	ldr	r3, [r3, #0]
 8001b64:	3301      	adds	r3, #1
 8001b66:	4a01      	ldr	r2, [pc, #4]	; (8001b6c <tm_cooperative_thread_3_entry+0x14>)
 8001b68:	6013      	str	r3, [r2, #0]
        tm_thread_relinquish();
 8001b6a:	e7f7      	b.n	8001b5c <tm_cooperative_thread_3_entry+0x4>
 8001b6c:	20000a80 	.word	0x20000a80

08001b70 <tm_cooperative_thread_4_entry>:
}


/* Define the fifth cooperative thread.  */
void  tm_cooperative_thread_4_entry(void)
{
 8001b70:	b580      	push	{r7, lr}
 8001b72:	af00      	add	r7, sp, #0

    while(1)
    {

        /* Relinquish to all other threads at same priority.  */
        tm_thread_relinquish();
 8001b74:	f000 f91c 	bl	8001db0 <tm_thread_relinquish>

        /* Increment this thread's counter.  */
        tm_cooperative_thread_4_counter++;
 8001b78:	4b02      	ldr	r3, [pc, #8]	; (8001b84 <tm_cooperative_thread_4_entry+0x14>)
 8001b7a:	681b      	ldr	r3, [r3, #0]
 8001b7c:	3301      	adds	r3, #1
 8001b7e:	4a01      	ldr	r2, [pc, #4]	; (8001b84 <tm_cooperative_thread_4_entry+0x14>)
 8001b80:	6013      	str	r3, [r2, #0]
        tm_thread_relinquish();
 8001b82:	e7f7      	b.n	8001b74 <tm_cooperative_thread_4_entry+0x4>
 8001b84:	20000a84 	.word	0x20000a84

08001b88 <tm_cooperative_thread_report>:
}


/* Define the cooperative test reporting thread.  */
void  tm_cooperative_thread_report(void)
{
 8001b88:	b580      	push	{r7, lr}
 8001b8a:	b084      	sub	sp, #16
 8001b8c:	af00      	add	r7, sp, #0
unsigned long   relative_time;
unsigned long   last_total;
unsigned long   average;

    /* Initialize the last total.  */
    last_total =  0;
 8001b8e:	2300      	movs	r3, #0
 8001b90:	60bb      	str	r3, [r7, #8]

    /* Initialize the relative time.  */
    relative_time =  0;
 8001b92:	2300      	movs	r3, #0
 8001b94:	60fb      	str	r3, [r7, #12]

    while(1)
    {

        /* Sleep to allow the test to run.  */
        tm_thread_sleep(TM_TEST_DURATION);
 8001b96:	201e      	movs	r0, #30
 8001b98:	f000 f910 	bl	8001dbc <tm_thread_sleep>

        /* Increment the relative time.  */
        relative_time =  relative_time + TM_TEST_DURATION;
 8001b9c:	68fb      	ldr	r3, [r7, #12]
 8001b9e:	331e      	adds	r3, #30
 8001ba0:	60fb      	str	r3, [r7, #12]

        /* Print results to the stdio window.  */
        printf("**** Thread-Metric Cooperative Scheduling Test **** Relative Time: %lu\n\r", relative_time);
 8001ba2:	68f9      	ldr	r1, [r7, #12]
 8001ba4:	483f      	ldr	r0, [pc, #252]	; (8001ca4 <tm_cooperative_thread_report+0x11c>)
 8001ba6:	f006 fc03 	bl	80083b0 <iprintf>

        /* Calculate the total of all the counters.  */
        total =  tm_cooperative_thread_0_counter + tm_cooperative_thread_1_counter + tm_cooperative_thread_2_counter
 8001baa:	4b3f      	ldr	r3, [pc, #252]	; (8001ca8 <tm_cooperative_thread_report+0x120>)
 8001bac:	681a      	ldr	r2, [r3, #0]
 8001bae:	4b3f      	ldr	r3, [pc, #252]	; (8001cac <tm_cooperative_thread_report+0x124>)
 8001bb0:	681b      	ldr	r3, [r3, #0]
 8001bb2:	441a      	add	r2, r3
 8001bb4:	4b3e      	ldr	r3, [pc, #248]	; (8001cb0 <tm_cooperative_thread_report+0x128>)
 8001bb6:	681b      	ldr	r3, [r3, #0]
 8001bb8:	441a      	add	r2, r3
                    + tm_cooperative_thread_3_counter + tm_cooperative_thread_4_counter;
 8001bba:	4b3e      	ldr	r3, [pc, #248]	; (8001cb4 <tm_cooperative_thread_report+0x12c>)
 8001bbc:	681b      	ldr	r3, [r3, #0]
 8001bbe:	441a      	add	r2, r3
 8001bc0:	4b3d      	ldr	r3, [pc, #244]	; (8001cb8 <tm_cooperative_thread_report+0x130>)
 8001bc2:	681b      	ldr	r3, [r3, #0]
        total =  tm_cooperative_thread_0_counter + tm_cooperative_thread_1_counter + tm_cooperative_thread_2_counter
 8001bc4:	4413      	add	r3, r2
 8001bc6:	607b      	str	r3, [r7, #4]

        /* Calculate the average of all the counters.  */
        average =  total/5;
 8001bc8:	687b      	ldr	r3, [r7, #4]
 8001bca:	4a3c      	ldr	r2, [pc, #240]	; (8001cbc <tm_cooperative_thread_report+0x134>)
 8001bcc:	fba2 2303 	umull	r2, r3, r2, r3
 8001bd0:	089b      	lsrs	r3, r3, #2
 8001bd2:	603b      	str	r3, [r7, #0]
		
		/* WCC - integrity check */
		printf("tm_cooperative_thread_0_counter: %d\n\r", tm_cooperative_thread_0_counter);
 8001bd4:	4b34      	ldr	r3, [pc, #208]	; (8001ca8 <tm_cooperative_thread_report+0x120>)
 8001bd6:	681b      	ldr	r3, [r3, #0]
 8001bd8:	4619      	mov	r1, r3
 8001bda:	4839      	ldr	r0, [pc, #228]	; (8001cc0 <tm_cooperative_thread_report+0x138>)
 8001bdc:	f006 fbe8 	bl	80083b0 <iprintf>
		printf("tm_cooperative_thread_1_counter: %d\n\r", tm_cooperative_thread_1_counter);
 8001be0:	4b32      	ldr	r3, [pc, #200]	; (8001cac <tm_cooperative_thread_report+0x124>)
 8001be2:	681b      	ldr	r3, [r3, #0]
 8001be4:	4619      	mov	r1, r3
 8001be6:	4837      	ldr	r0, [pc, #220]	; (8001cc4 <tm_cooperative_thread_report+0x13c>)
 8001be8:	f006 fbe2 	bl	80083b0 <iprintf>
		printf("tm_cooperative_thread_2_counter: %d\n\r", tm_cooperative_thread_2_counter);
 8001bec:	4b30      	ldr	r3, [pc, #192]	; (8001cb0 <tm_cooperative_thread_report+0x128>)
 8001bee:	681b      	ldr	r3, [r3, #0]
 8001bf0:	4619      	mov	r1, r3
 8001bf2:	4835      	ldr	r0, [pc, #212]	; (8001cc8 <tm_cooperative_thread_report+0x140>)
 8001bf4:	f006 fbdc 	bl	80083b0 <iprintf>
		printf("tm_cooperative_thread_3_counter: %d\n\r", tm_cooperative_thread_3_counter);
 8001bf8:	4b2e      	ldr	r3, [pc, #184]	; (8001cb4 <tm_cooperative_thread_report+0x12c>)
 8001bfa:	681b      	ldr	r3, [r3, #0]
 8001bfc:	4619      	mov	r1, r3
 8001bfe:	4833      	ldr	r0, [pc, #204]	; (8001ccc <tm_cooperative_thread_report+0x144>)
 8001c00:	f006 fbd6 	bl	80083b0 <iprintf>
		printf("tm_cooperative_thread_4_counter: %d\n\r", tm_cooperative_thread_4_counter);
 8001c04:	4b2c      	ldr	r3, [pc, #176]	; (8001cb8 <tm_cooperative_thread_report+0x130>)
 8001c06:	681b      	ldr	r3, [r3, #0]
 8001c08:	4619      	mov	r1, r3
 8001c0a:	4831      	ldr	r0, [pc, #196]	; (8001cd0 <tm_cooperative_thread_report+0x148>)
 8001c0c:	f006 fbd0 	bl	80083b0 <iprintf>

        /* See if there are any errors.  */
        if ((tm_cooperative_thread_0_counter < (average - 1)) || 
 8001c10:	683b      	ldr	r3, [r7, #0]
 8001c12:	1e5a      	subs	r2, r3, #1
 8001c14:	4b24      	ldr	r3, [pc, #144]	; (8001ca8 <tm_cooperative_thread_report+0x120>)
 8001c16:	681b      	ldr	r3, [r3, #0]
 8001c18:	429a      	cmp	r2, r3
 8001c1a:	d835      	bhi.n	8001c88 <tm_cooperative_thread_report+0x100>
            (tm_cooperative_thread_0_counter > (average + 1)) ||
 8001c1c:	683b      	ldr	r3, [r7, #0]
 8001c1e:	1c5a      	adds	r2, r3, #1
 8001c20:	4b21      	ldr	r3, [pc, #132]	; (8001ca8 <tm_cooperative_thread_report+0x120>)
 8001c22:	681b      	ldr	r3, [r3, #0]
        if ((tm_cooperative_thread_0_counter < (average - 1)) || 
 8001c24:	429a      	cmp	r2, r3
 8001c26:	d32f      	bcc.n	8001c88 <tm_cooperative_thread_report+0x100>
            (tm_cooperative_thread_1_counter < (average - 1)) || 
 8001c28:	683b      	ldr	r3, [r7, #0]
 8001c2a:	1e5a      	subs	r2, r3, #1
 8001c2c:	4b1f      	ldr	r3, [pc, #124]	; (8001cac <tm_cooperative_thread_report+0x124>)
 8001c2e:	681b      	ldr	r3, [r3, #0]
            (tm_cooperative_thread_0_counter > (average + 1)) ||
 8001c30:	429a      	cmp	r2, r3
 8001c32:	d829      	bhi.n	8001c88 <tm_cooperative_thread_report+0x100>
            (tm_cooperative_thread_1_counter > (average + 1)) ||
 8001c34:	683b      	ldr	r3, [r7, #0]
 8001c36:	1c5a      	adds	r2, r3, #1
 8001c38:	4b1c      	ldr	r3, [pc, #112]	; (8001cac <tm_cooperative_thread_report+0x124>)
 8001c3a:	681b      	ldr	r3, [r3, #0]
            (tm_cooperative_thread_1_counter < (average - 1)) || 
 8001c3c:	429a      	cmp	r2, r3
 8001c3e:	d323      	bcc.n	8001c88 <tm_cooperative_thread_report+0x100>
            (tm_cooperative_thread_2_counter < (average - 1)) || 
 8001c40:	683b      	ldr	r3, [r7, #0]
 8001c42:	1e5a      	subs	r2, r3, #1
 8001c44:	4b1a      	ldr	r3, [pc, #104]	; (8001cb0 <tm_cooperative_thread_report+0x128>)
 8001c46:	681b      	ldr	r3, [r3, #0]
            (tm_cooperative_thread_1_counter > (average + 1)) ||
 8001c48:	429a      	cmp	r2, r3
 8001c4a:	d81d      	bhi.n	8001c88 <tm_cooperative_thread_report+0x100>
            (tm_cooperative_thread_2_counter > (average + 1)) ||
 8001c4c:	683b      	ldr	r3, [r7, #0]
 8001c4e:	1c5a      	adds	r2, r3, #1
 8001c50:	4b17      	ldr	r3, [pc, #92]	; (8001cb0 <tm_cooperative_thread_report+0x128>)
 8001c52:	681b      	ldr	r3, [r3, #0]
            (tm_cooperative_thread_2_counter < (average - 1)) || 
 8001c54:	429a      	cmp	r2, r3
 8001c56:	d317      	bcc.n	8001c88 <tm_cooperative_thread_report+0x100>
            (tm_cooperative_thread_3_counter < (average - 1)) || 
 8001c58:	683b      	ldr	r3, [r7, #0]
 8001c5a:	1e5a      	subs	r2, r3, #1
 8001c5c:	4b15      	ldr	r3, [pc, #84]	; (8001cb4 <tm_cooperative_thread_report+0x12c>)
 8001c5e:	681b      	ldr	r3, [r3, #0]
            (tm_cooperative_thread_2_counter > (average + 1)) ||
 8001c60:	429a      	cmp	r2, r3
 8001c62:	d811      	bhi.n	8001c88 <tm_cooperative_thread_report+0x100>
            (tm_cooperative_thread_3_counter > (average + 1)) ||
 8001c64:	683b      	ldr	r3, [r7, #0]
 8001c66:	1c5a      	adds	r2, r3, #1
 8001c68:	4b12      	ldr	r3, [pc, #72]	; (8001cb4 <tm_cooperative_thread_report+0x12c>)
 8001c6a:	681b      	ldr	r3, [r3, #0]
            (tm_cooperative_thread_3_counter < (average - 1)) || 
 8001c6c:	429a      	cmp	r2, r3
 8001c6e:	d30b      	bcc.n	8001c88 <tm_cooperative_thread_report+0x100>
            (tm_cooperative_thread_4_counter < (average - 1)) || 
 8001c70:	683b      	ldr	r3, [r7, #0]
 8001c72:	1e5a      	subs	r2, r3, #1
 8001c74:	4b10      	ldr	r3, [pc, #64]	; (8001cb8 <tm_cooperative_thread_report+0x130>)
 8001c76:	681b      	ldr	r3, [r3, #0]
            (tm_cooperative_thread_3_counter > (average + 1)) ||
 8001c78:	429a      	cmp	r2, r3
 8001c7a:	d805      	bhi.n	8001c88 <tm_cooperative_thread_report+0x100>
            (tm_cooperative_thread_4_counter > (average + 1)))
 8001c7c:	683b      	ldr	r3, [r7, #0]
 8001c7e:	1c5a      	adds	r2, r3, #1
 8001c80:	4b0d      	ldr	r3, [pc, #52]	; (8001cb8 <tm_cooperative_thread_report+0x130>)
 8001c82:	681b      	ldr	r3, [r3, #0]
            (tm_cooperative_thread_4_counter < (average - 1)) || 
 8001c84:	429a      	cmp	r2, r3
 8001c86:	d202      	bcs.n	8001c8e <tm_cooperative_thread_report+0x106>
        {

            printf("ERROR: Invalid counter value(s). Cooperative counters should not be more that 1 different than the average!\n\r");
 8001c88:	4812      	ldr	r0, [pc, #72]	; (8001cd4 <tm_cooperative_thread_report+0x14c>)
 8001c8a:	f006 fb91 	bl	80083b0 <iprintf>
        }

        /* Show the time period total.  */
        printf("Time Period Total:  %lu\n\n\r", total - last_total);
 8001c8e:	687a      	ldr	r2, [r7, #4]
 8001c90:	68bb      	ldr	r3, [r7, #8]
 8001c92:	1ad3      	subs	r3, r2, r3
 8001c94:	4619      	mov	r1, r3
 8001c96:	4810      	ldr	r0, [pc, #64]	; (8001cd8 <tm_cooperative_thread_report+0x150>)
 8001c98:	f006 fb8a 	bl	80083b0 <iprintf>

        /* Save the last total.  */
        last_total =  total;
 8001c9c:	687b      	ldr	r3, [r7, #4]
 8001c9e:	60bb      	str	r3, [r7, #8]
        tm_thread_sleep(TM_TEST_DURATION);
 8001ca0:	e779      	b.n	8001b96 <tm_cooperative_thread_report+0xe>
 8001ca2:	bf00      	nop
 8001ca4:	08009348 	.word	0x08009348
 8001ca8:	20000a74 	.word	0x20000a74
 8001cac:	20000a78 	.word	0x20000a78
 8001cb0:	20000a7c 	.word	0x20000a7c
 8001cb4:	20000a80 	.word	0x20000a80
 8001cb8:	20000a84 	.word	0x20000a84
 8001cbc:	cccccccd 	.word	0xcccccccd
 8001cc0:	08009394 	.word	0x08009394
 8001cc4:	080093bc 	.word	0x080093bc
 8001cc8:	080093e4 	.word	0x080093e4
 8001ccc:	0800940c 	.word	0x0800940c
 8001cd0:	08009434 	.word	0x08009434
 8001cd4:	0800945c 	.word	0x0800945c
 8001cd8:	080094cc 	.word	0x080094cc

08001cdc <tm_initialize>:


/* This function called from main performs basic RTOS initialization,
   calls the test initialization function, and then starts the RTOS function.  */
void  tm_initialize(void (*test_initialization_function)(void))
{
 8001cdc:	b580      	push	{r7, lr}
 8001cde:	b082      	sub	sp, #8
 8001ce0:	af00      	add	r7, sp, #0
 8001ce2:	6078      	str	r0, [r7, #4]

    /* Save the test initialization function.  */
    tm_initialization_function =  test_initialization_function;
 8001ce4:	4a04      	ldr	r2, [pc, #16]	; (8001cf8 <tm_initialize+0x1c>)
 8001ce6:	687b      	ldr	r3, [r7, #4]
 8001ce8:	6013      	str	r3, [r2, #0]

    /* Call the previously defined initialization function.  */
    (tm_initialization_function)();
 8001cea:	4b03      	ldr	r3, [pc, #12]	; (8001cf8 <tm_initialize+0x1c>)
 8001cec:	681b      	ldr	r3, [r3, #0]
 8001cee:	4798      	blx	r3
}
 8001cf0:	bf00      	nop
 8001cf2:	3708      	adds	r7, #8
 8001cf4:	46bd      	mov	sp, r7
 8001cf6:	bd80      	pop	{r7, pc}
 8001cf8:	20006370 	.word	0x20006370

08001cfc <tm_thread_create>:
/* This function takes a thread ID and priority and attempts to create the
   file in the underlying RTOS.  Valid priorities range from 1 through 31,
   where 1 is the highest priority and 31 is the lowest. If successful,
   the function should return TM_SUCCESS. Otherwise, TM_ERROR should be returned.   */
int  tm_thread_create(int thread_id, int priority, void (*entry_function)(void))
{
 8001cfc:	b5b0      	push	{r4, r5, r7, lr}
 8001cfe:	b08c      	sub	sp, #48	; 0x30
 8001d00:	af06      	add	r7, sp, #24
 8001d02:	60f8      	str	r0, [r7, #12]
 8001d04:	60b9      	str	r1, [r7, #8]
 8001d06:	607a      	str	r2, [r7, #4]

UINT    status;

    /* Remember the actual thread entry.  */
    tm_thread_entry_functions[thread_id] =  (void *) entry_function;
 8001d08:	4917      	ldr	r1, [pc, #92]	; (8001d68 <tm_thread_create+0x6c>)
 8001d0a:	68fb      	ldr	r3, [r7, #12]
 8001d0c:	687a      	ldr	r2, [r7, #4]
 8001d0e:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

    /* Create the thread under ThreadX.  */
    status =  tx_thread_create(&tm_thread_array[thread_id], "Thread-Metric test", tm_thread_entry, (ULONG) thread_id,
 8001d12:	68fb      	ldr	r3, [r7, #12]
 8001d14:	22b0      	movs	r2, #176	; 0xb0
 8001d16:	fb02 f303 	mul.w	r3, r2, r3
 8001d1a:	4a14      	ldr	r2, [pc, #80]	; (8001d6c <tm_thread_create+0x70>)
 8001d1c:	1898      	adds	r0, r3, r2
 8001d1e:	68fc      	ldr	r4, [r7, #12]
                    &tm_thread_stack_area[thread_id*TM_THREADX_THREAD_STACK_SIZE], TM_THREADX_THREAD_STACK_SIZE,
 8001d20:	68fb      	ldr	r3, [r7, #12]
 8001d22:	f44f 6203 	mov.w	r2, #2096	; 0x830
 8001d26:	fb02 f303 	mul.w	r3, r2, r3
 8001d2a:	4a11      	ldr	r2, [pc, #68]	; (8001d70 <tm_thread_create+0x74>)
 8001d2c:	4413      	add	r3, r2
    status =  tx_thread_create(&tm_thread_array[thread_id], "Thread-Metric test", tm_thread_entry, (ULONG) thread_id,
 8001d2e:	68ba      	ldr	r2, [r7, #8]
 8001d30:	68b9      	ldr	r1, [r7, #8]
 8001d32:	2500      	movs	r5, #0
 8001d34:	9505      	str	r5, [sp, #20]
 8001d36:	2500      	movs	r5, #0
 8001d38:	9504      	str	r5, [sp, #16]
 8001d3a:	9103      	str	r1, [sp, #12]
 8001d3c:	9202      	str	r2, [sp, #8]
 8001d3e:	f44f 6203 	mov.w	r2, #2096	; 0x830
 8001d42:	9201      	str	r2, [sp, #4]
 8001d44:	9300      	str	r3, [sp, #0]
 8001d46:	4623      	mov	r3, r4
 8001d48:	4a0a      	ldr	r2, [pc, #40]	; (8001d74 <tm_thread_create+0x78>)
 8001d4a:	490b      	ldr	r1, [pc, #44]	; (8001d78 <tm_thread_create+0x7c>)
 8001d4c:	f005 f99c 	bl	8007088 <_tx_thread_create>
 8001d50:	6178      	str	r0, [r7, #20]
                    (UINT) priority, (UINT) priority, TX_NO_TIME_SLICE, TX_DONT_START);

    /* Determine if the thread create was successful.  */
    if (status == TX_SUCCESS)
 8001d52:	697b      	ldr	r3, [r7, #20]
 8001d54:	2b00      	cmp	r3, #0
 8001d56:	d101      	bne.n	8001d5c <tm_thread_create+0x60>
        return(TM_SUCCESS);
 8001d58:	2300      	movs	r3, #0
 8001d5a:	e000      	b.n	8001d5e <tm_thread_create+0x62>
    else
        return(TM_ERROR);
 8001d5c:	2301      	movs	r3, #1
}
 8001d5e:	4618      	mov	r0, r3
 8001d60:	3718      	adds	r7, #24
 8001d62:	46bd      	mov	sp, r7
 8001d64:	bdb0      	pop	{r4, r5, r7, pc}
 8001d66:	bf00      	nop
 8001d68:	20006348 	.word	0x20006348
 8001d6c:	20000a88 	.word	0x20000a88
 8001d70:	20001168 	.word	0x20001168
 8001d74:	08001ddd 	.word	0x08001ddd
 8001d78:	080094e8 	.word	0x080094e8

08001d7c <tm_thread_resume>:


/* This function resumes the specified thread.  If successful, the function should
   return TM_SUCCESS. Otherwise, TM_ERROR should be returned.  */
int  tm_thread_resume(int thread_id)
{
 8001d7c:	b580      	push	{r7, lr}
 8001d7e:	b084      	sub	sp, #16
 8001d80:	af00      	add	r7, sp, #0
 8001d82:	6078      	str	r0, [r7, #4]

UINT    status;


    /* Attempt to resume the thread.  */
    status =  tx_thread_resume(&tm_thread_array[thread_id]);
 8001d84:	687b      	ldr	r3, [r7, #4]
 8001d86:	22b0      	movs	r2, #176	; 0xb0
 8001d88:	fb02 f303 	mul.w	r3, r2, r3
 8001d8c:	4a07      	ldr	r2, [pc, #28]	; (8001dac <tm_thread_resume+0x30>)
 8001d8e:	4413      	add	r3, r2
 8001d90:	4618      	mov	r0, r3
 8001d92:	f005 fb11 	bl	80073b8 <_tx_thread_resume>
 8001d96:	60f8      	str	r0, [r7, #12]

    /* Determine if the thread resume was successful.  */
    if (status == TX_SUCCESS)
 8001d98:	68fb      	ldr	r3, [r7, #12]
 8001d9a:	2b00      	cmp	r3, #0
 8001d9c:	d101      	bne.n	8001da2 <tm_thread_resume+0x26>
        return(TM_SUCCESS);
 8001d9e:	2300      	movs	r3, #0
 8001da0:	e000      	b.n	8001da4 <tm_thread_resume+0x28>
    else
        return(TM_ERROR);
 8001da2:	2301      	movs	r3, #1
}
 8001da4:	4618      	mov	r0, r3
 8001da6:	3710      	adds	r7, #16
 8001da8:	46bd      	mov	sp, r7
 8001daa:	bd80      	pop	{r7, pc}
 8001dac:	20000a88 	.word	0x20000a88

08001db0 <tm_thread_relinquish>:


/* This function relinquishes to other ready threads at the same
   priority.  */
void tm_thread_relinquish(void)
{
 8001db0:	b580      	push	{r7, lr}
 8001db2:	af00      	add	r7, sp, #0

    /* Relinquish to other threads at the same priority.  */
    tx_thread_relinquish();
 8001db4:	f005 fa9a 	bl	80072ec <_tx_thread_relinquish>
}
 8001db8:	bf00      	nop
 8001dba:	bd80      	pop	{r7, pc}

08001dbc <tm_thread_sleep>:

/* This function suspends the specified thread for the specified number
   of seconds.  If successful, the function should return TM_SUCCESS.
   Otherwise, TM_ERROR should be returned.  */
void tm_thread_sleep(int seconds)
{
 8001dbc:	b580      	push	{r7, lr}
 8001dbe:	b082      	sub	sp, #8
 8001dc0:	af00      	add	r7, sp, #0
 8001dc2:	6078      	str	r0, [r7, #4]

    /* Attempt to sleep.  */
    tx_thread_sleep(((UINT) seconds)*TM_THREADX_TICKS_PER_SECOND);
 8001dc4:	687b      	ldr	r3, [r7, #4]
 8001dc6:	2264      	movs	r2, #100	; 0x64
 8001dc8:	fb02 f303 	mul.w	r3, r2, r3
 8001dcc:	4618      	mov	r0, r3
 8001dce:	f005 fb9f 	bl	8007510 <_tx_thread_sleep>
}
 8001dd2:	bf00      	nop
 8001dd4:	3708      	adds	r7, #8
 8001dd6:	46bd      	mov	sp, r7
 8001dd8:	bd80      	pop	{r7, pc}
	...

08001ddc <tm_thread_entry>:


/* This is the ThreadX thread entry.  It is going to call the Thread-Metric
   entry function saved earlier.  */
VOID  tm_thread_entry(ULONG thread_input)
{
 8001ddc:	b580      	push	{r7, lr}
 8001dde:	b084      	sub	sp, #16
 8001de0:	af00      	add	r7, sp, #0
 8001de2:	6078      	str	r0, [r7, #4]

void (*entry_function)(void);


    /* Pickup the entry function from the saved array.  */
    entry_function =  (void (*)(void)) tm_thread_entry_functions[thread_input];
 8001de4:	4a05      	ldr	r2, [pc, #20]	; (8001dfc <tm_thread_entry+0x20>)
 8001de6:	687b      	ldr	r3, [r7, #4]
 8001de8:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001dec:	60fb      	str	r3, [r7, #12]

    /* Call the entry function.   */
    (entry_function)();
 8001dee:	68fb      	ldr	r3, [r7, #12]
 8001df0:	4798      	blx	r3
}
 8001df2:	bf00      	nop
 8001df4:	3710      	adds	r7, #16
 8001df6:	46bd      	mov	sp, r7
 8001df8:	bd80      	pop	{r7, pc}
 8001dfa:	bf00      	nop
 8001dfc:	20006348 	.word	0x20006348

08001e00 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler: 
  ldr   sp, =_estack       /* set stack pointer */
 8001e00:	f8df d034 	ldr.w	sp, [pc, #52]	; 8001e38 <LoopFillZerobss+0x12>
 
/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 8001e04:	480d      	ldr	r0, [pc, #52]	; (8001e3c <LoopFillZerobss+0x16>)
  ldr r1, =_edata
 8001e06:	490e      	ldr	r1, [pc, #56]	; (8001e40 <LoopFillZerobss+0x1a>)
  ldr r2, =_sidata
 8001e08:	4a0e      	ldr	r2, [pc, #56]	; (8001e44 <LoopFillZerobss+0x1e>)
  movs r3, #0
 8001e0a:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8001e0c:	e002      	b.n	8001e14 <LoopCopyDataInit>

08001e0e <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8001e0e:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8001e10:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8001e12:	3304      	adds	r3, #4

08001e14 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8001e14:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8001e16:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8001e18:	d3f9      	bcc.n	8001e0e <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8001e1a:	4a0b      	ldr	r2, [pc, #44]	; (8001e48 <LoopFillZerobss+0x22>)
  ldr r4, =_ebss
 8001e1c:	4c0b      	ldr	r4, [pc, #44]	; (8001e4c <LoopFillZerobss+0x26>)
  movs r3, #0
 8001e1e:	2300      	movs	r3, #0
  b LoopFillZerobss
 8001e20:	e001      	b.n	8001e26 <LoopFillZerobss>

08001e22 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8001e22:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8001e24:	3204      	adds	r2, #4

08001e26 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8001e26:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8001e28:	d3fb      	bcc.n	8001e22 <FillZerobss>

/* Call the clock system initialization function.*/
  bl  SystemInit   
 8001e2a:	f7ff fe11 	bl	8001a50 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8001e2e:	f006 fa93 	bl	8008358 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8001e32:	f7fe fd31 	bl	8000898 <main>
  bx  lr    
 8001e36:	4770      	bx	lr
  ldr   sp, =_estack       /* set stack pointer */
 8001e38:	20030000 	.word	0x20030000
  ldr r0, =_sdata
 8001e3c:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8001e40:	20000074 	.word	0x20000074
  ldr r2, =_sidata
 8001e44:	080095d0 	.word	0x080095d0
  ldr r2, =_sbss
 8001e48:	20000074 	.word	0x20000074
  ldr r4, =_ebss
 8001e4c:	200069cc 	.word	0x200069cc

08001e50 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8001e50:	e7fe      	b.n	8001e50 <ADC_IRQHandler>
	...

08001e54 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8001e54:	b580      	push	{r7, lr}
 8001e56:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 8001e58:	4b0e      	ldr	r3, [pc, #56]	; (8001e94 <HAL_Init+0x40>)
 8001e5a:	681b      	ldr	r3, [r3, #0]
 8001e5c:	4a0d      	ldr	r2, [pc, #52]	; (8001e94 <HAL_Init+0x40>)
 8001e5e:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8001e62:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 8001e64:	4b0b      	ldr	r3, [pc, #44]	; (8001e94 <HAL_Init+0x40>)
 8001e66:	681b      	ldr	r3, [r3, #0]
 8001e68:	4a0a      	ldr	r2, [pc, #40]	; (8001e94 <HAL_Init+0x40>)
 8001e6a:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8001e6e:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8001e70:	4b08      	ldr	r3, [pc, #32]	; (8001e94 <HAL_Init+0x40>)
 8001e72:	681b      	ldr	r3, [r3, #0]
 8001e74:	4a07      	ldr	r2, [pc, #28]	; (8001e94 <HAL_Init+0x40>)
 8001e76:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8001e7a:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8001e7c:	2003      	movs	r0, #3
 8001e7e:	f000 f8fc 	bl	800207a <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8001e82:	200f      	movs	r0, #15
 8001e84:	f7ff fca2 	bl	80017cc <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8001e88:	f7ff f8e8 	bl	800105c <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8001e8c:	2300      	movs	r3, #0
}
 8001e8e:	4618      	mov	r0, r3
 8001e90:	bd80      	pop	{r7, pc}
 8001e92:	bf00      	nop
 8001e94:	40023c00 	.word	0x40023c00

08001e98 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8001e98:	b480      	push	{r7}
 8001e9a:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8001e9c:	4b06      	ldr	r3, [pc, #24]	; (8001eb8 <HAL_IncTick+0x20>)
 8001e9e:	781b      	ldrb	r3, [r3, #0]
 8001ea0:	461a      	mov	r2, r3
 8001ea2:	4b06      	ldr	r3, [pc, #24]	; (8001ebc <HAL_IncTick+0x24>)
 8001ea4:	681b      	ldr	r3, [r3, #0]
 8001ea6:	4413      	add	r3, r2
 8001ea8:	4a04      	ldr	r2, [pc, #16]	; (8001ebc <HAL_IncTick+0x24>)
 8001eaa:	6013      	str	r3, [r2, #0]
}
 8001eac:	bf00      	nop
 8001eae:	46bd      	mov	sp, r7
 8001eb0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001eb4:	4770      	bx	lr
 8001eb6:	bf00      	nop
 8001eb8:	20000008 	.word	0x20000008
 8001ebc:	20006374 	.word	0x20006374

08001ec0 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8001ec0:	b480      	push	{r7}
 8001ec2:	af00      	add	r7, sp, #0
  return uwTick;
 8001ec4:	4b03      	ldr	r3, [pc, #12]	; (8001ed4 <HAL_GetTick+0x14>)
 8001ec6:	681b      	ldr	r3, [r3, #0]
}
 8001ec8:	4618      	mov	r0, r3
 8001eca:	46bd      	mov	sp, r7
 8001ecc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ed0:	4770      	bx	lr
 8001ed2:	bf00      	nop
 8001ed4:	20006374 	.word	0x20006374

08001ed8 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8001ed8:	b580      	push	{r7, lr}
 8001eda:	b084      	sub	sp, #16
 8001edc:	af00      	add	r7, sp, #0
 8001ede:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8001ee0:	f7ff ffee 	bl	8001ec0 <HAL_GetTick>
 8001ee4:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8001ee6:	687b      	ldr	r3, [r7, #4]
 8001ee8:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8001eea:	68fb      	ldr	r3, [r7, #12]
 8001eec:	f1b3 3fff 	cmp.w	r3, #4294967295
 8001ef0:	d005      	beq.n	8001efe <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8001ef2:	4b0a      	ldr	r3, [pc, #40]	; (8001f1c <HAL_Delay+0x44>)
 8001ef4:	781b      	ldrb	r3, [r3, #0]
 8001ef6:	461a      	mov	r2, r3
 8001ef8:	68fb      	ldr	r3, [r7, #12]
 8001efa:	4413      	add	r3, r2
 8001efc:	60fb      	str	r3, [r7, #12]
  }

  while((HAL_GetTick() - tickstart) < wait)
 8001efe:	bf00      	nop
 8001f00:	f7ff ffde 	bl	8001ec0 <HAL_GetTick>
 8001f04:	4602      	mov	r2, r0
 8001f06:	68bb      	ldr	r3, [r7, #8]
 8001f08:	1ad3      	subs	r3, r2, r3
 8001f0a:	68fa      	ldr	r2, [r7, #12]
 8001f0c:	429a      	cmp	r2, r3
 8001f0e:	d8f7      	bhi.n	8001f00 <HAL_Delay+0x28>
  {
  }
}
 8001f10:	bf00      	nop
 8001f12:	bf00      	nop
 8001f14:	3710      	adds	r7, #16
 8001f16:	46bd      	mov	sp, r7
 8001f18:	bd80      	pop	{r7, pc}
 8001f1a:	bf00      	nop
 8001f1c:	20000008 	.word	0x20000008

08001f20 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001f20:	b480      	push	{r7}
 8001f22:	b085      	sub	sp, #20
 8001f24:	af00      	add	r7, sp, #0
 8001f26:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8001f28:	687b      	ldr	r3, [r7, #4]
 8001f2a:	f003 0307 	and.w	r3, r3, #7
 8001f2e:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8001f30:	4b0c      	ldr	r3, [pc, #48]	; (8001f64 <__NVIC_SetPriorityGrouping+0x44>)
 8001f32:	68db      	ldr	r3, [r3, #12]
 8001f34:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8001f36:	68ba      	ldr	r2, [r7, #8]
 8001f38:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8001f3c:	4013      	ands	r3, r2
 8001f3e:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8001f40:	68fb      	ldr	r3, [r7, #12]
 8001f42:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8001f44:	68bb      	ldr	r3, [r7, #8]
 8001f46:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8001f48:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8001f4c:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8001f50:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8001f52:	4a04      	ldr	r2, [pc, #16]	; (8001f64 <__NVIC_SetPriorityGrouping+0x44>)
 8001f54:	68bb      	ldr	r3, [r7, #8]
 8001f56:	60d3      	str	r3, [r2, #12]
}
 8001f58:	bf00      	nop
 8001f5a:	3714      	adds	r7, #20
 8001f5c:	46bd      	mov	sp, r7
 8001f5e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f62:	4770      	bx	lr
 8001f64:	e000ed00 	.word	0xe000ed00

08001f68 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8001f68:	b480      	push	{r7}
 8001f6a:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8001f6c:	4b04      	ldr	r3, [pc, #16]	; (8001f80 <__NVIC_GetPriorityGrouping+0x18>)
 8001f6e:	68db      	ldr	r3, [r3, #12]
 8001f70:	0a1b      	lsrs	r3, r3, #8
 8001f72:	f003 0307 	and.w	r3, r3, #7
}
 8001f76:	4618      	mov	r0, r3
 8001f78:	46bd      	mov	sp, r7
 8001f7a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f7e:	4770      	bx	lr
 8001f80:	e000ed00 	.word	0xe000ed00

08001f84 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001f84:	b480      	push	{r7}
 8001f86:	b083      	sub	sp, #12
 8001f88:	af00      	add	r7, sp, #0
 8001f8a:	4603      	mov	r3, r0
 8001f8c:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001f8e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001f92:	2b00      	cmp	r3, #0
 8001f94:	db0b      	blt.n	8001fae <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8001f96:	79fb      	ldrb	r3, [r7, #7]
 8001f98:	f003 021f 	and.w	r2, r3, #31
 8001f9c:	4907      	ldr	r1, [pc, #28]	; (8001fbc <__NVIC_EnableIRQ+0x38>)
 8001f9e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001fa2:	095b      	lsrs	r3, r3, #5
 8001fa4:	2001      	movs	r0, #1
 8001fa6:	fa00 f202 	lsl.w	r2, r0, r2
 8001faa:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 8001fae:	bf00      	nop
 8001fb0:	370c      	adds	r7, #12
 8001fb2:	46bd      	mov	sp, r7
 8001fb4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001fb8:	4770      	bx	lr
 8001fba:	bf00      	nop
 8001fbc:	e000e100 	.word	0xe000e100

08001fc0 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8001fc0:	b480      	push	{r7}
 8001fc2:	b083      	sub	sp, #12
 8001fc4:	af00      	add	r7, sp, #0
 8001fc6:	4603      	mov	r3, r0
 8001fc8:	6039      	str	r1, [r7, #0]
 8001fca:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001fcc:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001fd0:	2b00      	cmp	r3, #0
 8001fd2:	db0a      	blt.n	8001fea <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001fd4:	683b      	ldr	r3, [r7, #0]
 8001fd6:	b2da      	uxtb	r2, r3
 8001fd8:	490c      	ldr	r1, [pc, #48]	; (800200c <__NVIC_SetPriority+0x4c>)
 8001fda:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001fde:	0112      	lsls	r2, r2, #4
 8001fe0:	b2d2      	uxtb	r2, r2
 8001fe2:	440b      	add	r3, r1
 8001fe4:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8001fe8:	e00a      	b.n	8002000 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001fea:	683b      	ldr	r3, [r7, #0]
 8001fec:	b2da      	uxtb	r2, r3
 8001fee:	4908      	ldr	r1, [pc, #32]	; (8002010 <__NVIC_SetPriority+0x50>)
 8001ff0:	79fb      	ldrb	r3, [r7, #7]
 8001ff2:	f003 030f 	and.w	r3, r3, #15
 8001ff6:	3b04      	subs	r3, #4
 8001ff8:	0112      	lsls	r2, r2, #4
 8001ffa:	b2d2      	uxtb	r2, r2
 8001ffc:	440b      	add	r3, r1
 8001ffe:	761a      	strb	r2, [r3, #24]
}
 8002000:	bf00      	nop
 8002002:	370c      	adds	r7, #12
 8002004:	46bd      	mov	sp, r7
 8002006:	f85d 7b04 	ldr.w	r7, [sp], #4
 800200a:	4770      	bx	lr
 800200c:	e000e100 	.word	0xe000e100
 8002010:	e000ed00 	.word	0xe000ed00

08002014 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8002014:	b480      	push	{r7}
 8002016:	b089      	sub	sp, #36	; 0x24
 8002018:	af00      	add	r7, sp, #0
 800201a:	60f8      	str	r0, [r7, #12]
 800201c:	60b9      	str	r1, [r7, #8]
 800201e:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8002020:	68fb      	ldr	r3, [r7, #12]
 8002022:	f003 0307 	and.w	r3, r3, #7
 8002026:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8002028:	69fb      	ldr	r3, [r7, #28]
 800202a:	f1c3 0307 	rsb	r3, r3, #7
 800202e:	2b04      	cmp	r3, #4
 8002030:	bf28      	it	cs
 8002032:	2304      	movcs	r3, #4
 8002034:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8002036:	69fb      	ldr	r3, [r7, #28]
 8002038:	3304      	adds	r3, #4
 800203a:	2b06      	cmp	r3, #6
 800203c:	d902      	bls.n	8002044 <NVIC_EncodePriority+0x30>
 800203e:	69fb      	ldr	r3, [r7, #28]
 8002040:	3b03      	subs	r3, #3
 8002042:	e000      	b.n	8002046 <NVIC_EncodePriority+0x32>
 8002044:	2300      	movs	r3, #0
 8002046:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8002048:	f04f 32ff 	mov.w	r2, #4294967295
 800204c:	69bb      	ldr	r3, [r7, #24]
 800204e:	fa02 f303 	lsl.w	r3, r2, r3
 8002052:	43da      	mvns	r2, r3
 8002054:	68bb      	ldr	r3, [r7, #8]
 8002056:	401a      	ands	r2, r3
 8002058:	697b      	ldr	r3, [r7, #20]
 800205a:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 800205c:	f04f 31ff 	mov.w	r1, #4294967295
 8002060:	697b      	ldr	r3, [r7, #20]
 8002062:	fa01 f303 	lsl.w	r3, r1, r3
 8002066:	43d9      	mvns	r1, r3
 8002068:	687b      	ldr	r3, [r7, #4]
 800206a:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 800206c:	4313      	orrs	r3, r2
         );
}
 800206e:	4618      	mov	r0, r3
 8002070:	3724      	adds	r7, #36	; 0x24
 8002072:	46bd      	mov	sp, r7
 8002074:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002078:	4770      	bx	lr

0800207a <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 800207a:	b580      	push	{r7, lr}
 800207c:	b082      	sub	sp, #8
 800207e:	af00      	add	r7, sp, #0
 8002080:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8002082:	6878      	ldr	r0, [r7, #4]
 8002084:	f7ff ff4c 	bl	8001f20 <__NVIC_SetPriorityGrouping>
}
 8002088:	bf00      	nop
 800208a:	3708      	adds	r7, #8
 800208c:	46bd      	mov	sp, r7
 800208e:	bd80      	pop	{r7, pc}

08002090 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8002090:	b580      	push	{r7, lr}
 8002092:	b086      	sub	sp, #24
 8002094:	af00      	add	r7, sp, #0
 8002096:	4603      	mov	r3, r0
 8002098:	60b9      	str	r1, [r7, #8]
 800209a:	607a      	str	r2, [r7, #4]
 800209c:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 800209e:	2300      	movs	r3, #0
 80020a0:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 80020a2:	f7ff ff61 	bl	8001f68 <__NVIC_GetPriorityGrouping>
 80020a6:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 80020a8:	687a      	ldr	r2, [r7, #4]
 80020aa:	68b9      	ldr	r1, [r7, #8]
 80020ac:	6978      	ldr	r0, [r7, #20]
 80020ae:	f7ff ffb1 	bl	8002014 <NVIC_EncodePriority>
 80020b2:	4602      	mov	r2, r0
 80020b4:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80020b8:	4611      	mov	r1, r2
 80020ba:	4618      	mov	r0, r3
 80020bc:	f7ff ff80 	bl	8001fc0 <__NVIC_SetPriority>
}
 80020c0:	bf00      	nop
 80020c2:	3718      	adds	r7, #24
 80020c4:	46bd      	mov	sp, r7
 80020c6:	bd80      	pop	{r7, pc}

080020c8 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80020c8:	b580      	push	{r7, lr}
 80020ca:	b082      	sub	sp, #8
 80020cc:	af00      	add	r7, sp, #0
 80020ce:	4603      	mov	r3, r0
 80020d0:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 80020d2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80020d6:	4618      	mov	r0, r3
 80020d8:	f7ff ff54 	bl	8001f84 <__NVIC_EnableIRQ>
}
 80020dc:	bf00      	nop
 80020de:	3708      	adds	r7, #8
 80020e0:	46bd      	mov	sp, r7
 80020e2:	bd80      	pop	{r7, pc}

080020e4 <HAL_CRC_Init>:
  *         parameters in the CRC_InitTypeDef and create the associated handle.
  * @param  hcrc CRC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CRC_Init(CRC_HandleTypeDef *hcrc)
{
 80020e4:	b580      	push	{r7, lr}
 80020e6:	b082      	sub	sp, #8
 80020e8:	af00      	add	r7, sp, #0
 80020ea:	6078      	str	r0, [r7, #4]
  /* Check the CRC handle allocation */
  if (hcrc == NULL)
 80020ec:	687b      	ldr	r3, [r7, #4]
 80020ee:	2b00      	cmp	r3, #0
 80020f0:	d101      	bne.n	80020f6 <HAL_CRC_Init+0x12>
  {
    return HAL_ERROR;
 80020f2:	2301      	movs	r3, #1
 80020f4:	e00e      	b.n	8002114 <HAL_CRC_Init+0x30>
  }

  /* Check the parameters */
  assert_param(IS_CRC_ALL_INSTANCE(hcrc->Instance));

  if (hcrc->State == HAL_CRC_STATE_RESET)
 80020f6:	687b      	ldr	r3, [r7, #4]
 80020f8:	795b      	ldrb	r3, [r3, #5]
 80020fa:	b2db      	uxtb	r3, r3
 80020fc:	2b00      	cmp	r3, #0
 80020fe:	d105      	bne.n	800210c <HAL_CRC_Init+0x28>
  {
    /* Allocate lock resource and initialize it */
    hcrc->Lock = HAL_UNLOCKED;
 8002100:	687b      	ldr	r3, [r7, #4]
 8002102:	2200      	movs	r2, #0
 8002104:	711a      	strb	r2, [r3, #4]
    /* Init the low level hardware */
    HAL_CRC_MspInit(hcrc);
 8002106:	6878      	ldr	r0, [r7, #4]
 8002108:	f7fe ffd0 	bl	80010ac <HAL_CRC_MspInit>
  }

  /* Change CRC peripheral state */
  hcrc->State = HAL_CRC_STATE_READY;
 800210c:	687b      	ldr	r3, [r7, #4]
 800210e:	2201      	movs	r2, #1
 8002110:	715a      	strb	r2, [r3, #5]

  /* Return function status */
  return HAL_OK;
 8002112:	2300      	movs	r3, #0
}
 8002114:	4618      	mov	r0, r3
 8002116:	3708      	adds	r7, #8
 8002118:	46bd      	mov	sp, r7
 800211a:	bd80      	pop	{r7, pc}

0800211c <HAL_DMA2D_Init>:
  * @param  hdma2d pointer to a DMA2D_HandleTypeDef structure that contains
  *                 the configuration information for the DMA2D.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA2D_Init(DMA2D_HandleTypeDef *hdma2d)
{
 800211c:	b580      	push	{r7, lr}
 800211e:	b082      	sub	sp, #8
 8002120:	af00      	add	r7, sp, #0
 8002122:	6078      	str	r0, [r7, #4]
  /* Check the DMA2D peripheral state */
  if (hdma2d == NULL)
 8002124:	687b      	ldr	r3, [r7, #4]
 8002126:	2b00      	cmp	r3, #0
 8002128:	d101      	bne.n	800212e <HAL_DMA2D_Init+0x12>
  {
    return HAL_ERROR;
 800212a:	2301      	movs	r3, #1
 800212c:	e03b      	b.n	80021a6 <HAL_DMA2D_Init+0x8a>

    /* Init the low level hardware */
    hdma2d->MspInitCallback(hdma2d);
  }
#else
  if (hdma2d->State == HAL_DMA2D_STATE_RESET)
 800212e:	687b      	ldr	r3, [r7, #4]
 8002130:	f893 3039 	ldrb.w	r3, [r3, #57]	; 0x39
 8002134:	b2db      	uxtb	r3, r3
 8002136:	2b00      	cmp	r3, #0
 8002138:	d106      	bne.n	8002148 <HAL_DMA2D_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hdma2d->Lock = HAL_UNLOCKED;
 800213a:	687b      	ldr	r3, [r7, #4]
 800213c:	2200      	movs	r2, #0
 800213e:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
    /* Init the low level hardware */
    HAL_DMA2D_MspInit(hdma2d);
 8002142:	6878      	ldr	r0, [r7, #4]
 8002144:	f7fe ffd4 	bl	80010f0 <HAL_DMA2D_MspInit>
  }
#endif /* (USE_HAL_DMA2D_REGISTER_CALLBACKS) */

  /* Change DMA2D peripheral state */
  hdma2d->State = HAL_DMA2D_STATE_BUSY;
 8002148:	687b      	ldr	r3, [r7, #4]
 800214a:	2202      	movs	r2, #2
 800214c:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

  /* DMA2D CR register configuration -------------------------------------------*/
  MODIFY_REG(hdma2d->Instance->CR, DMA2D_CR_MODE, hdma2d->Init.Mode);
 8002150:	687b      	ldr	r3, [r7, #4]
 8002152:	681b      	ldr	r3, [r3, #0]
 8002154:	681b      	ldr	r3, [r3, #0]
 8002156:	f423 3140 	bic.w	r1, r3, #196608	; 0x30000
 800215a:	687b      	ldr	r3, [r7, #4]
 800215c:	685a      	ldr	r2, [r3, #4]
 800215e:	687b      	ldr	r3, [r7, #4]
 8002160:	681b      	ldr	r3, [r3, #0]
 8002162:	430a      	orrs	r2, r1
 8002164:	601a      	str	r2, [r3, #0]

  /* DMA2D OPFCCR register configuration ---------------------------------------*/
  MODIFY_REG(hdma2d->Instance->OPFCCR, DMA2D_OPFCCR_CM, hdma2d->Init.ColorMode);
 8002166:	687b      	ldr	r3, [r7, #4]
 8002168:	681b      	ldr	r3, [r3, #0]
 800216a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800216c:	f023 0107 	bic.w	r1, r3, #7
 8002170:	687b      	ldr	r3, [r7, #4]
 8002172:	689a      	ldr	r2, [r3, #8]
 8002174:	687b      	ldr	r3, [r7, #4]
 8002176:	681b      	ldr	r3, [r3, #0]
 8002178:	430a      	orrs	r2, r1
 800217a:	635a      	str	r2, [r3, #52]	; 0x34

  /* DMA2D OOR register configuration ------------------------------------------*/
  MODIFY_REG(hdma2d->Instance->OOR, DMA2D_OOR_LO, hdma2d->Init.OutputOffset);
 800217c:	687b      	ldr	r3, [r7, #4]
 800217e:	681b      	ldr	r3, [r3, #0]
 8002180:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002182:	f423 537f 	bic.w	r3, r3, #16320	; 0x3fc0
 8002186:	f023 033f 	bic.w	r3, r3, #63	; 0x3f
 800218a:	687a      	ldr	r2, [r7, #4]
 800218c:	68d1      	ldr	r1, [r2, #12]
 800218e:	687a      	ldr	r2, [r7, #4]
 8002190:	6812      	ldr	r2, [r2, #0]
 8002192:	430b      	orrs	r3, r1
 8002194:	6413      	str	r3, [r2, #64]	; 0x40


  /* Update error code */
  hdma2d->ErrorCode = HAL_DMA2D_ERROR_NONE;
 8002196:	687b      	ldr	r3, [r7, #4]
 8002198:	2200      	movs	r2, #0
 800219a:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Initialize the DMA2D state*/
  hdma2d->State  = HAL_DMA2D_STATE_READY;
 800219c:	687b      	ldr	r3, [r7, #4]
 800219e:	2201      	movs	r2, #1
 80021a0:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

  return HAL_OK;
 80021a4:	2300      	movs	r3, #0
}
 80021a6:	4618      	mov	r0, r3
 80021a8:	3708      	adds	r7, #8
 80021aa:	46bd      	mov	sp, r7
 80021ac:	bd80      	pop	{r7, pc}

080021ae <HAL_DMA2D_IRQHandler>:
  * @param  hdma2d Pointer to a DMA2D_HandleTypeDef structure that contains
  *                 the configuration information for the DMA2D.
  * @retval HAL status
  */
void HAL_DMA2D_IRQHandler(DMA2D_HandleTypeDef *hdma2d)
{
 80021ae:	b580      	push	{r7, lr}
 80021b0:	b084      	sub	sp, #16
 80021b2:	af00      	add	r7, sp, #0
 80021b4:	6078      	str	r0, [r7, #4]
  uint32_t isrflags = READ_REG(hdma2d->Instance->ISR);
 80021b6:	687b      	ldr	r3, [r7, #4]
 80021b8:	681b      	ldr	r3, [r3, #0]
 80021ba:	685b      	ldr	r3, [r3, #4]
 80021bc:	60fb      	str	r3, [r7, #12]
  uint32_t crflags = READ_REG(hdma2d->Instance->CR);
 80021be:	687b      	ldr	r3, [r7, #4]
 80021c0:	681b      	ldr	r3, [r3, #0]
 80021c2:	681b      	ldr	r3, [r3, #0]
 80021c4:	60bb      	str	r3, [r7, #8]

  /* Transfer Error Interrupt management ***************************************/
  if ((isrflags & DMA2D_FLAG_TE) != 0U)
 80021c6:	68fb      	ldr	r3, [r7, #12]
 80021c8:	f003 0301 	and.w	r3, r3, #1
 80021cc:	2b00      	cmp	r3, #0
 80021ce:	d026      	beq.n	800221e <HAL_DMA2D_IRQHandler+0x70>
  {
    if ((crflags & DMA2D_IT_TE) != 0U)
 80021d0:	68bb      	ldr	r3, [r7, #8]
 80021d2:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80021d6:	2b00      	cmp	r3, #0
 80021d8:	d021      	beq.n	800221e <HAL_DMA2D_IRQHandler+0x70>
    {
      /* Disable the transfer Error interrupt */
      __HAL_DMA2D_DISABLE_IT(hdma2d, DMA2D_IT_TE);
 80021da:	687b      	ldr	r3, [r7, #4]
 80021dc:	681b      	ldr	r3, [r3, #0]
 80021de:	681a      	ldr	r2, [r3, #0]
 80021e0:	687b      	ldr	r3, [r7, #4]
 80021e2:	681b      	ldr	r3, [r3, #0]
 80021e4:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 80021e8:	601a      	str	r2, [r3, #0]

      /* Update error code */
      hdma2d->ErrorCode |= HAL_DMA2D_ERROR_TE;
 80021ea:	687b      	ldr	r3, [r7, #4]
 80021ec:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80021ee:	f043 0201 	orr.w	r2, r3, #1
 80021f2:	687b      	ldr	r3, [r7, #4]
 80021f4:	63da      	str	r2, [r3, #60]	; 0x3c

      /* Clear the transfer error flag */
      __HAL_DMA2D_CLEAR_FLAG(hdma2d, DMA2D_FLAG_TE);
 80021f6:	687b      	ldr	r3, [r7, #4]
 80021f8:	681b      	ldr	r3, [r3, #0]
 80021fa:	2201      	movs	r2, #1
 80021fc:	609a      	str	r2, [r3, #8]

      /* Change DMA2D state */
      hdma2d->State = HAL_DMA2D_STATE_ERROR;
 80021fe:	687b      	ldr	r3, [r7, #4]
 8002200:	2204      	movs	r2, #4
 8002202:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

      /* Process Unlocked */
      __HAL_UNLOCK(hdma2d);
 8002206:	687b      	ldr	r3, [r7, #4]
 8002208:	2200      	movs	r2, #0
 800220a:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

      if (hdma2d->XferErrorCallback != NULL)
 800220e:	687b      	ldr	r3, [r7, #4]
 8002210:	695b      	ldr	r3, [r3, #20]
 8002212:	2b00      	cmp	r3, #0
 8002214:	d003      	beq.n	800221e <HAL_DMA2D_IRQHandler+0x70>
      {
        /* Transfer error Callback */
        hdma2d->XferErrorCallback(hdma2d);
 8002216:	687b      	ldr	r3, [r7, #4]
 8002218:	695b      	ldr	r3, [r3, #20]
 800221a:	6878      	ldr	r0, [r7, #4]
 800221c:	4798      	blx	r3
      }
    }
  }
  /* Configuration Error Interrupt management **********************************/
  if ((isrflags & DMA2D_FLAG_CE) != 0U)
 800221e:	68fb      	ldr	r3, [r7, #12]
 8002220:	f003 0320 	and.w	r3, r3, #32
 8002224:	2b00      	cmp	r3, #0
 8002226:	d026      	beq.n	8002276 <HAL_DMA2D_IRQHandler+0xc8>
  {
    if ((crflags & DMA2D_IT_CE) != 0U)
 8002228:	68bb      	ldr	r3, [r7, #8]
 800222a:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 800222e:	2b00      	cmp	r3, #0
 8002230:	d021      	beq.n	8002276 <HAL_DMA2D_IRQHandler+0xc8>
    {
      /* Disable the Configuration Error interrupt */
      __HAL_DMA2D_DISABLE_IT(hdma2d, DMA2D_IT_CE);
 8002232:	687b      	ldr	r3, [r7, #4]
 8002234:	681b      	ldr	r3, [r3, #0]
 8002236:	681a      	ldr	r2, [r3, #0]
 8002238:	687b      	ldr	r3, [r7, #4]
 800223a:	681b      	ldr	r3, [r3, #0]
 800223c:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8002240:	601a      	str	r2, [r3, #0]

      /* Clear the Configuration error flag */
      __HAL_DMA2D_CLEAR_FLAG(hdma2d, DMA2D_FLAG_CE);
 8002242:	687b      	ldr	r3, [r7, #4]
 8002244:	681b      	ldr	r3, [r3, #0]
 8002246:	2220      	movs	r2, #32
 8002248:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma2d->ErrorCode |= HAL_DMA2D_ERROR_CE;
 800224a:	687b      	ldr	r3, [r7, #4]
 800224c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800224e:	f043 0202 	orr.w	r2, r3, #2
 8002252:	687b      	ldr	r3, [r7, #4]
 8002254:	63da      	str	r2, [r3, #60]	; 0x3c

      /* Change DMA2D state */
      hdma2d->State = HAL_DMA2D_STATE_ERROR;
 8002256:	687b      	ldr	r3, [r7, #4]
 8002258:	2204      	movs	r2, #4
 800225a:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

      /* Process Unlocked */
      __HAL_UNLOCK(hdma2d);
 800225e:	687b      	ldr	r3, [r7, #4]
 8002260:	2200      	movs	r2, #0
 8002262:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

      if (hdma2d->XferErrorCallback != NULL)
 8002266:	687b      	ldr	r3, [r7, #4]
 8002268:	695b      	ldr	r3, [r3, #20]
 800226a:	2b00      	cmp	r3, #0
 800226c:	d003      	beq.n	8002276 <HAL_DMA2D_IRQHandler+0xc8>
      {
        /* Transfer error Callback */
        hdma2d->XferErrorCallback(hdma2d);
 800226e:	687b      	ldr	r3, [r7, #4]
 8002270:	695b      	ldr	r3, [r3, #20]
 8002272:	6878      	ldr	r0, [r7, #4]
 8002274:	4798      	blx	r3
      }
    }
  }
  /* CLUT access Error Interrupt management ***********************************/
  if ((isrflags & DMA2D_FLAG_CAE) != 0U)
 8002276:	68fb      	ldr	r3, [r7, #12]
 8002278:	f003 0308 	and.w	r3, r3, #8
 800227c:	2b00      	cmp	r3, #0
 800227e:	d026      	beq.n	80022ce <HAL_DMA2D_IRQHandler+0x120>
  {
    if ((crflags & DMA2D_IT_CAE) != 0U)
 8002280:	68bb      	ldr	r3, [r7, #8]
 8002282:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8002286:	2b00      	cmp	r3, #0
 8002288:	d021      	beq.n	80022ce <HAL_DMA2D_IRQHandler+0x120>
    {
      /* Disable the CLUT access error interrupt */
      __HAL_DMA2D_DISABLE_IT(hdma2d, DMA2D_IT_CAE);
 800228a:	687b      	ldr	r3, [r7, #4]
 800228c:	681b      	ldr	r3, [r3, #0]
 800228e:	681a      	ldr	r2, [r3, #0]
 8002290:	687b      	ldr	r3, [r7, #4]
 8002292:	681b      	ldr	r3, [r3, #0]
 8002294:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8002298:	601a      	str	r2, [r3, #0]

      /* Clear the CLUT access error flag */
      __HAL_DMA2D_CLEAR_FLAG(hdma2d, DMA2D_FLAG_CAE);
 800229a:	687b      	ldr	r3, [r7, #4]
 800229c:	681b      	ldr	r3, [r3, #0]
 800229e:	2208      	movs	r2, #8
 80022a0:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma2d->ErrorCode |= HAL_DMA2D_ERROR_CAE;
 80022a2:	687b      	ldr	r3, [r7, #4]
 80022a4:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80022a6:	f043 0204 	orr.w	r2, r3, #4
 80022aa:	687b      	ldr	r3, [r7, #4]
 80022ac:	63da      	str	r2, [r3, #60]	; 0x3c

      /* Change DMA2D state */
      hdma2d->State = HAL_DMA2D_STATE_ERROR;
 80022ae:	687b      	ldr	r3, [r7, #4]
 80022b0:	2204      	movs	r2, #4
 80022b2:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

      /* Process Unlocked */
      __HAL_UNLOCK(hdma2d);
 80022b6:	687b      	ldr	r3, [r7, #4]
 80022b8:	2200      	movs	r2, #0
 80022ba:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

      if (hdma2d->XferErrorCallback != NULL)
 80022be:	687b      	ldr	r3, [r7, #4]
 80022c0:	695b      	ldr	r3, [r3, #20]
 80022c2:	2b00      	cmp	r3, #0
 80022c4:	d003      	beq.n	80022ce <HAL_DMA2D_IRQHandler+0x120>
      {
        /* Transfer error Callback */
        hdma2d->XferErrorCallback(hdma2d);
 80022c6:	687b      	ldr	r3, [r7, #4]
 80022c8:	695b      	ldr	r3, [r3, #20]
 80022ca:	6878      	ldr	r0, [r7, #4]
 80022cc:	4798      	blx	r3
      }
    }
  }
  /* Transfer watermark Interrupt management **********************************/
  if ((isrflags & DMA2D_FLAG_TW) != 0U)
 80022ce:	68fb      	ldr	r3, [r7, #12]
 80022d0:	f003 0304 	and.w	r3, r3, #4
 80022d4:	2b00      	cmp	r3, #0
 80022d6:	d013      	beq.n	8002300 <HAL_DMA2D_IRQHandler+0x152>
  {
    if ((crflags & DMA2D_IT_TW) != 0U)
 80022d8:	68bb      	ldr	r3, [r7, #8]
 80022da:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80022de:	2b00      	cmp	r3, #0
 80022e0:	d00e      	beq.n	8002300 <HAL_DMA2D_IRQHandler+0x152>
    {
      /* Disable the transfer watermark interrupt */
      __HAL_DMA2D_DISABLE_IT(hdma2d, DMA2D_IT_TW);
 80022e2:	687b      	ldr	r3, [r7, #4]
 80022e4:	681b      	ldr	r3, [r3, #0]
 80022e6:	681a      	ldr	r2, [r3, #0]
 80022e8:	687b      	ldr	r3, [r7, #4]
 80022ea:	681b      	ldr	r3, [r3, #0]
 80022ec:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80022f0:	601a      	str	r2, [r3, #0]

      /* Clear the transfer watermark flag */
      __HAL_DMA2D_CLEAR_FLAG(hdma2d, DMA2D_FLAG_TW);
 80022f2:	687b      	ldr	r3, [r7, #4]
 80022f4:	681b      	ldr	r3, [r3, #0]
 80022f6:	2204      	movs	r2, #4
 80022f8:	609a      	str	r2, [r3, #8]

      /* Transfer watermark Callback */
#if (USE_HAL_DMA2D_REGISTER_CALLBACKS == 1)
      hdma2d->LineEventCallback(hdma2d);
#else
      HAL_DMA2D_LineEventCallback(hdma2d);
 80022fa:	6878      	ldr	r0, [r7, #4]
 80022fc:	f000 f853 	bl	80023a6 <HAL_DMA2D_LineEventCallback>
#endif /* USE_HAL_DMA2D_REGISTER_CALLBACKS */

    }
  }
  /* Transfer Complete Interrupt management ************************************/
  if ((isrflags & DMA2D_FLAG_TC) != 0U)
 8002300:	68fb      	ldr	r3, [r7, #12]
 8002302:	f003 0302 	and.w	r3, r3, #2
 8002306:	2b00      	cmp	r3, #0
 8002308:	d024      	beq.n	8002354 <HAL_DMA2D_IRQHandler+0x1a6>
  {
    if ((crflags & DMA2D_IT_TC) != 0U)
 800230a:	68bb      	ldr	r3, [r7, #8]
 800230c:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8002310:	2b00      	cmp	r3, #0
 8002312:	d01f      	beq.n	8002354 <HAL_DMA2D_IRQHandler+0x1a6>
    {
      /* Disable the transfer complete interrupt */
      __HAL_DMA2D_DISABLE_IT(hdma2d, DMA2D_IT_TC);
 8002314:	687b      	ldr	r3, [r7, #4]
 8002316:	681b      	ldr	r3, [r3, #0]
 8002318:	681a      	ldr	r2, [r3, #0]
 800231a:	687b      	ldr	r3, [r7, #4]
 800231c:	681b      	ldr	r3, [r3, #0]
 800231e:	f422 7200 	bic.w	r2, r2, #512	; 0x200
 8002322:	601a      	str	r2, [r3, #0]

      /* Clear the transfer complete flag */
      __HAL_DMA2D_CLEAR_FLAG(hdma2d, DMA2D_FLAG_TC);
 8002324:	687b      	ldr	r3, [r7, #4]
 8002326:	681b      	ldr	r3, [r3, #0]
 8002328:	2202      	movs	r2, #2
 800232a:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma2d->ErrorCode |= HAL_DMA2D_ERROR_NONE;
 800232c:	687b      	ldr	r3, [r7, #4]
 800232e:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8002330:	687b      	ldr	r3, [r7, #4]
 8002332:	63da      	str	r2, [r3, #60]	; 0x3c

      /* Change DMA2D state */
      hdma2d->State = HAL_DMA2D_STATE_READY;
 8002334:	687b      	ldr	r3, [r7, #4]
 8002336:	2201      	movs	r2, #1
 8002338:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

      /* Process Unlocked */
      __HAL_UNLOCK(hdma2d);
 800233c:	687b      	ldr	r3, [r7, #4]
 800233e:	2200      	movs	r2, #0
 8002340:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

      if (hdma2d->XferCpltCallback != NULL)
 8002344:	687b      	ldr	r3, [r7, #4]
 8002346:	691b      	ldr	r3, [r3, #16]
 8002348:	2b00      	cmp	r3, #0
 800234a:	d003      	beq.n	8002354 <HAL_DMA2D_IRQHandler+0x1a6>
      {
        /* Transfer complete Callback */
        hdma2d->XferCpltCallback(hdma2d);
 800234c:	687b      	ldr	r3, [r7, #4]
 800234e:	691b      	ldr	r3, [r3, #16]
 8002350:	6878      	ldr	r0, [r7, #4]
 8002352:	4798      	blx	r3
      }
    }
  }
  /* CLUT Transfer Complete Interrupt management ******************************/
  if ((isrflags & DMA2D_FLAG_CTC) != 0U)
 8002354:	68fb      	ldr	r3, [r7, #12]
 8002356:	f003 0310 	and.w	r3, r3, #16
 800235a:	2b00      	cmp	r3, #0
 800235c:	d01f      	beq.n	800239e <HAL_DMA2D_IRQHandler+0x1f0>
  {
    if ((crflags & DMA2D_IT_CTC) != 0U)
 800235e:	68bb      	ldr	r3, [r7, #8]
 8002360:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8002364:	2b00      	cmp	r3, #0
 8002366:	d01a      	beq.n	800239e <HAL_DMA2D_IRQHandler+0x1f0>
    {
      /* Disable the CLUT transfer complete interrupt */
      __HAL_DMA2D_DISABLE_IT(hdma2d, DMA2D_IT_CTC);
 8002368:	687b      	ldr	r3, [r7, #4]
 800236a:	681b      	ldr	r3, [r3, #0]
 800236c:	681a      	ldr	r2, [r3, #0]
 800236e:	687b      	ldr	r3, [r7, #4]
 8002370:	681b      	ldr	r3, [r3, #0]
 8002372:	f422 5280 	bic.w	r2, r2, #4096	; 0x1000
 8002376:	601a      	str	r2, [r3, #0]

      /* Clear the CLUT transfer complete flag */
      __HAL_DMA2D_CLEAR_FLAG(hdma2d, DMA2D_FLAG_CTC);
 8002378:	687b      	ldr	r3, [r7, #4]
 800237a:	681b      	ldr	r3, [r3, #0]
 800237c:	2210      	movs	r2, #16
 800237e:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma2d->ErrorCode |= HAL_DMA2D_ERROR_NONE;
 8002380:	687b      	ldr	r3, [r7, #4]
 8002382:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8002384:	687b      	ldr	r3, [r7, #4]
 8002386:	63da      	str	r2, [r3, #60]	; 0x3c

      /* Change DMA2D state */
      hdma2d->State = HAL_DMA2D_STATE_READY;
 8002388:	687b      	ldr	r3, [r7, #4]
 800238a:	2201      	movs	r2, #1
 800238c:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

      /* Process Unlocked */
      __HAL_UNLOCK(hdma2d);
 8002390:	687b      	ldr	r3, [r7, #4]
 8002392:	2200      	movs	r2, #0
 8002394:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

      /* CLUT Transfer complete Callback */
#if (USE_HAL_DMA2D_REGISTER_CALLBACKS == 1)
      hdma2d->CLUTLoadingCpltCallback(hdma2d);
#else
      HAL_DMA2D_CLUTLoadingCpltCallback(hdma2d);
 8002398:	6878      	ldr	r0, [r7, #4]
 800239a:	f000 f80e 	bl	80023ba <HAL_DMA2D_CLUTLoadingCpltCallback>
#endif /* USE_HAL_DMA2D_REGISTER_CALLBACKS */
    }
  }

}
 800239e:	bf00      	nop
 80023a0:	3710      	adds	r7, #16
 80023a2:	46bd      	mov	sp, r7
 80023a4:	bd80      	pop	{r7, pc}

080023a6 <HAL_DMA2D_LineEventCallback>:
  * @param  hdma2d pointer to a DMA2D_HandleTypeDef structure that contains
  *                 the configuration information for the DMA2D.
  * @retval None
  */
__weak void HAL_DMA2D_LineEventCallback(DMA2D_HandleTypeDef *hdma2d)
{
 80023a6:	b480      	push	{r7}
 80023a8:	b083      	sub	sp, #12
 80023aa:	af00      	add	r7, sp, #0
 80023ac:	6078      	str	r0, [r7, #4]
  UNUSED(hdma2d);

  /* NOTE : This function should not be modified; when the callback is needed,
            the HAL_DMA2D_LineEventCallback can be implemented in the user file.
   */
}
 80023ae:	bf00      	nop
 80023b0:	370c      	adds	r7, #12
 80023b2:	46bd      	mov	sp, r7
 80023b4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80023b8:	4770      	bx	lr

080023ba <HAL_DMA2D_CLUTLoadingCpltCallback>:
  * @param  hdma2d pointer to a DMA2D_HandleTypeDef structure that contains
  *                 the configuration information for the DMA2D.
  * @retval None
  */
__weak void HAL_DMA2D_CLUTLoadingCpltCallback(DMA2D_HandleTypeDef *hdma2d)
{
 80023ba:	b480      	push	{r7}
 80023bc:	b083      	sub	sp, #12
 80023be:	af00      	add	r7, sp, #0
 80023c0:	6078      	str	r0, [r7, #4]
  UNUSED(hdma2d);

  /* NOTE : This function should not be modified; when the callback is needed,
            the HAL_DMA2D_CLUTLoadingCpltCallback can be implemented in the user file.
   */
}
 80023c2:	bf00      	nop
 80023c4:	370c      	adds	r7, #12
 80023c6:	46bd      	mov	sp, r7
 80023c8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80023cc:	4770      	bx	lr
	...

080023d0 <HAL_DMA2D_ConfigLayer>:
  *                   This parameter can be one of the following values:
  *                   DMA2D_BACKGROUND_LAYER(0) / DMA2D_FOREGROUND_LAYER(1)
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA2D_ConfigLayer(DMA2D_HandleTypeDef *hdma2d, uint32_t LayerIdx)
{
 80023d0:	b480      	push	{r7}
 80023d2:	b087      	sub	sp, #28
 80023d4:	af00      	add	r7, sp, #0
 80023d6:	6078      	str	r0, [r7, #4]
 80023d8:	6039      	str	r1, [r7, #0]
  uint32_t regValue;

  /* Check the parameters */
  assert_param(IS_DMA2D_LAYER(LayerIdx));
  assert_param(IS_DMA2D_OFFSET(hdma2d->LayerCfg[LayerIdx].InputOffset));
  if (hdma2d->Init.Mode != DMA2D_R2M)
 80023da:	687b      	ldr	r3, [r7, #4]
 80023dc:	685b      	ldr	r3, [r3, #4]
 80023de:	f5b3 3f40 	cmp.w	r3, #196608	; 0x30000
      assert_param(IS_DMA2D_ALPHA_MODE(hdma2d->LayerCfg[LayerIdx].AlphaMode));
    }
  }

  /* Process locked */
  __HAL_LOCK(hdma2d);
 80023e2:	687b      	ldr	r3, [r7, #4]
 80023e4:	f893 3038 	ldrb.w	r3, [r3, #56]	; 0x38
 80023e8:	2b01      	cmp	r3, #1
 80023ea:	d101      	bne.n	80023f0 <HAL_DMA2D_ConfigLayer+0x20>
 80023ec:	2302      	movs	r3, #2
 80023ee:	e079      	b.n	80024e4 <HAL_DMA2D_ConfigLayer+0x114>
 80023f0:	687b      	ldr	r3, [r7, #4]
 80023f2:	2201      	movs	r2, #1
 80023f4:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

  /* Change DMA2D peripheral state */
  hdma2d->State = HAL_DMA2D_STATE_BUSY;
 80023f8:	687b      	ldr	r3, [r7, #4]
 80023fa:	2202      	movs	r2, #2
 80023fc:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

  pLayerCfg = &hdma2d->LayerCfg[LayerIdx];
 8002400:	683b      	ldr	r3, [r7, #0]
 8002402:	011b      	lsls	r3, r3, #4
 8002404:	3318      	adds	r3, #24
 8002406:	687a      	ldr	r2, [r7, #4]
 8002408:	4413      	add	r3, r2
 800240a:	613b      	str	r3, [r7, #16]

  /* Prepare the value to be written to the BGPFCCR or FGPFCCR register */
  regValue = pLayerCfg->InputColorMode | (pLayerCfg->AlphaMode << DMA2D_BGPFCCR_AM_Pos);
 800240c:	693b      	ldr	r3, [r7, #16]
 800240e:	685a      	ldr	r2, [r3, #4]
 8002410:	693b      	ldr	r3, [r7, #16]
 8002412:	689b      	ldr	r3, [r3, #8]
 8002414:	041b      	lsls	r3, r3, #16
 8002416:	4313      	orrs	r3, r2
 8002418:	617b      	str	r3, [r7, #20]
  regMask  = DMA2D_BGPFCCR_CM | DMA2D_BGPFCCR_AM | DMA2D_BGPFCCR_ALPHA;
 800241a:	4b35      	ldr	r3, [pc, #212]	; (80024f0 <HAL_DMA2D_ConfigLayer+0x120>)
 800241c:	60fb      	str	r3, [r7, #12]


  if ((pLayerCfg->InputColorMode == DMA2D_INPUT_A4) || (pLayerCfg->InputColorMode == DMA2D_INPUT_A8))
 800241e:	693b      	ldr	r3, [r7, #16]
 8002420:	685b      	ldr	r3, [r3, #4]
 8002422:	2b0a      	cmp	r3, #10
 8002424:	d003      	beq.n	800242e <HAL_DMA2D_ConfigLayer+0x5e>
 8002426:	693b      	ldr	r3, [r7, #16]
 8002428:	685b      	ldr	r3, [r3, #4]
 800242a:	2b09      	cmp	r3, #9
 800242c:	d107      	bne.n	800243e <HAL_DMA2D_ConfigLayer+0x6e>
  {
    regValue |= (pLayerCfg->InputAlpha & DMA2D_BGPFCCR_ALPHA);
 800242e:	693b      	ldr	r3, [r7, #16]
 8002430:	68db      	ldr	r3, [r3, #12]
 8002432:	f003 437f 	and.w	r3, r3, #4278190080	; 0xff000000
 8002436:	697a      	ldr	r2, [r7, #20]
 8002438:	4313      	orrs	r3, r2
 800243a:	617b      	str	r3, [r7, #20]
 800243c:	e005      	b.n	800244a <HAL_DMA2D_ConfigLayer+0x7a>
  }
  else
  {
    regValue |= (pLayerCfg->InputAlpha << DMA2D_BGPFCCR_ALPHA_Pos);
 800243e:	693b      	ldr	r3, [r7, #16]
 8002440:	68db      	ldr	r3, [r3, #12]
 8002442:	061b      	lsls	r3, r3, #24
 8002444:	697a      	ldr	r2, [r7, #20]
 8002446:	4313      	orrs	r3, r2
 8002448:	617b      	str	r3, [r7, #20]
  }

  /* Configure the background DMA2D layer */
  if (LayerIdx == DMA2D_BACKGROUND_LAYER)
 800244a:	683b      	ldr	r3, [r7, #0]
 800244c:	2b00      	cmp	r3, #0
 800244e:	d120      	bne.n	8002492 <HAL_DMA2D_ConfigLayer+0xc2>
  {
    /* Write DMA2D BGPFCCR register */
    MODIFY_REG(hdma2d->Instance->BGPFCCR, regMask, regValue);
 8002450:	687b      	ldr	r3, [r7, #4]
 8002452:	681b      	ldr	r3, [r3, #0]
 8002454:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8002456:	68fb      	ldr	r3, [r7, #12]
 8002458:	43db      	mvns	r3, r3
 800245a:	ea02 0103 	and.w	r1, r2, r3
 800245e:	687b      	ldr	r3, [r7, #4]
 8002460:	681b      	ldr	r3, [r3, #0]
 8002462:	697a      	ldr	r2, [r7, #20]
 8002464:	430a      	orrs	r2, r1
 8002466:	625a      	str	r2, [r3, #36]	; 0x24

    /* DMA2D BGOR register configuration -------------------------------------*/
    WRITE_REG(hdma2d->Instance->BGOR, pLayerCfg->InputOffset);
 8002468:	687b      	ldr	r3, [r7, #4]
 800246a:	681b      	ldr	r3, [r3, #0]
 800246c:	693a      	ldr	r2, [r7, #16]
 800246e:	6812      	ldr	r2, [r2, #0]
 8002470:	619a      	str	r2, [r3, #24]

    /* DMA2D BGCOLR register configuration -------------------------------------*/
    if ((pLayerCfg->InputColorMode == DMA2D_INPUT_A4) || (pLayerCfg->InputColorMode == DMA2D_INPUT_A8))
 8002472:	693b      	ldr	r3, [r7, #16]
 8002474:	685b      	ldr	r3, [r3, #4]
 8002476:	2b0a      	cmp	r3, #10
 8002478:	d003      	beq.n	8002482 <HAL_DMA2D_ConfigLayer+0xb2>
 800247a:	693b      	ldr	r3, [r7, #16]
 800247c:	685b      	ldr	r3, [r3, #4]
 800247e:	2b09      	cmp	r3, #9
 8002480:	d127      	bne.n	80024d2 <HAL_DMA2D_ConfigLayer+0x102>
    {
      WRITE_REG(hdma2d->Instance->BGCOLR, pLayerCfg->InputAlpha & (DMA2D_BGCOLR_BLUE | DMA2D_BGCOLR_GREEN | \
 8002482:	693b      	ldr	r3, [r7, #16]
 8002484:	68da      	ldr	r2, [r3, #12]
 8002486:	687b      	ldr	r3, [r7, #4]
 8002488:	681b      	ldr	r3, [r3, #0]
 800248a:	f022 427f 	bic.w	r2, r2, #4278190080	; 0xff000000
 800248e:	629a      	str	r2, [r3, #40]	; 0x28
 8002490:	e01f      	b.n	80024d2 <HAL_DMA2D_ConfigLayer+0x102>
  else
  {


    /* Write DMA2D FGPFCCR register */
    MODIFY_REG(hdma2d->Instance->FGPFCCR, regMask, regValue);
 8002492:	687b      	ldr	r3, [r7, #4]
 8002494:	681b      	ldr	r3, [r3, #0]
 8002496:	69da      	ldr	r2, [r3, #28]
 8002498:	68fb      	ldr	r3, [r7, #12]
 800249a:	43db      	mvns	r3, r3
 800249c:	ea02 0103 	and.w	r1, r2, r3
 80024a0:	687b      	ldr	r3, [r7, #4]
 80024a2:	681b      	ldr	r3, [r3, #0]
 80024a4:	697a      	ldr	r2, [r7, #20]
 80024a6:	430a      	orrs	r2, r1
 80024a8:	61da      	str	r2, [r3, #28]

    /* DMA2D FGOR register configuration -------------------------------------*/
    WRITE_REG(hdma2d->Instance->FGOR, pLayerCfg->InputOffset);
 80024aa:	687b      	ldr	r3, [r7, #4]
 80024ac:	681b      	ldr	r3, [r3, #0]
 80024ae:	693a      	ldr	r2, [r7, #16]
 80024b0:	6812      	ldr	r2, [r2, #0]
 80024b2:	611a      	str	r2, [r3, #16]

    /* DMA2D FGCOLR register configuration -------------------------------------*/
    if ((pLayerCfg->InputColorMode == DMA2D_INPUT_A4) || (pLayerCfg->InputColorMode == DMA2D_INPUT_A8))
 80024b4:	693b      	ldr	r3, [r7, #16]
 80024b6:	685b      	ldr	r3, [r3, #4]
 80024b8:	2b0a      	cmp	r3, #10
 80024ba:	d003      	beq.n	80024c4 <HAL_DMA2D_ConfigLayer+0xf4>
 80024bc:	693b      	ldr	r3, [r7, #16]
 80024be:	685b      	ldr	r3, [r3, #4]
 80024c0:	2b09      	cmp	r3, #9
 80024c2:	d106      	bne.n	80024d2 <HAL_DMA2D_ConfigLayer+0x102>
    {
      WRITE_REG(hdma2d->Instance->FGCOLR, pLayerCfg->InputAlpha & (DMA2D_FGCOLR_BLUE | DMA2D_FGCOLR_GREEN | \
 80024c4:	693b      	ldr	r3, [r7, #16]
 80024c6:	68da      	ldr	r2, [r3, #12]
 80024c8:	687b      	ldr	r3, [r7, #4]
 80024ca:	681b      	ldr	r3, [r3, #0]
 80024cc:	f022 427f 	bic.w	r2, r2, #4278190080	; 0xff000000
 80024d0:	621a      	str	r2, [r3, #32]
                                                                   DMA2D_FGCOLR_RED));
    }
  }
  /* Initialize the DMA2D state*/
  hdma2d->State = HAL_DMA2D_STATE_READY;
 80024d2:	687b      	ldr	r3, [r7, #4]
 80024d4:	2201      	movs	r2, #1
 80024d6:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

  /* Process unlocked */
  __HAL_UNLOCK(hdma2d);
 80024da:	687b      	ldr	r3, [r7, #4]
 80024dc:	2200      	movs	r2, #0
 80024de:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

  return HAL_OK;
 80024e2:	2300      	movs	r3, #0
}
 80024e4:	4618      	mov	r0, r3
 80024e6:	371c      	adds	r7, #28
 80024e8:	46bd      	mov	sp, r7
 80024ea:	f85d 7b04 	ldr.w	r7, [sp], #4
 80024ee:	4770      	bx	lr
 80024f0:	ff03000f 	.word	0xff03000f

080024f4 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 80024f4:	b480      	push	{r7}
 80024f6:	b089      	sub	sp, #36	; 0x24
 80024f8:	af00      	add	r7, sp, #0
 80024fa:	6078      	str	r0, [r7, #4]
 80024fc:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 80024fe:	2300      	movs	r3, #0
 8002500:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 8002502:	2300      	movs	r3, #0
 8002504:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 8002506:	2300      	movs	r3, #0
 8002508:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 800250a:	2300      	movs	r3, #0
 800250c:	61fb      	str	r3, [r7, #28]
 800250e:	e177      	b.n	8002800 <HAL_GPIO_Init+0x30c>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 8002510:	2201      	movs	r2, #1
 8002512:	69fb      	ldr	r3, [r7, #28]
 8002514:	fa02 f303 	lsl.w	r3, r2, r3
 8002518:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 800251a:	683b      	ldr	r3, [r7, #0]
 800251c:	681b      	ldr	r3, [r3, #0]
 800251e:	697a      	ldr	r2, [r7, #20]
 8002520:	4013      	ands	r3, r2
 8002522:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 8002524:	693a      	ldr	r2, [r7, #16]
 8002526:	697b      	ldr	r3, [r7, #20]
 8002528:	429a      	cmp	r2, r3
 800252a:	f040 8166 	bne.w	80027fa <HAL_GPIO_Init+0x306>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 800252e:	683b      	ldr	r3, [r7, #0]
 8002530:	685b      	ldr	r3, [r3, #4]
 8002532:	f003 0303 	and.w	r3, r3, #3
 8002536:	2b01      	cmp	r3, #1
 8002538:	d005      	beq.n	8002546 <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 800253a:	683b      	ldr	r3, [r7, #0]
 800253c:	685b      	ldr	r3, [r3, #4]
 800253e:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8002542:	2b02      	cmp	r3, #2
 8002544:	d130      	bne.n	80025a8 <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 8002546:	687b      	ldr	r3, [r7, #4]
 8002548:	689b      	ldr	r3, [r3, #8]
 800254a:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 800254c:	69fb      	ldr	r3, [r7, #28]
 800254e:	005b      	lsls	r3, r3, #1
 8002550:	2203      	movs	r2, #3
 8002552:	fa02 f303 	lsl.w	r3, r2, r3
 8002556:	43db      	mvns	r3, r3
 8002558:	69ba      	ldr	r2, [r7, #24]
 800255a:	4013      	ands	r3, r2
 800255c:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 800255e:	683b      	ldr	r3, [r7, #0]
 8002560:	68da      	ldr	r2, [r3, #12]
 8002562:	69fb      	ldr	r3, [r7, #28]
 8002564:	005b      	lsls	r3, r3, #1
 8002566:	fa02 f303 	lsl.w	r3, r2, r3
 800256a:	69ba      	ldr	r2, [r7, #24]
 800256c:	4313      	orrs	r3, r2
 800256e:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8002570:	687b      	ldr	r3, [r7, #4]
 8002572:	69ba      	ldr	r2, [r7, #24]
 8002574:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8002576:	687b      	ldr	r3, [r7, #4]
 8002578:	685b      	ldr	r3, [r3, #4]
 800257a:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 800257c:	2201      	movs	r2, #1
 800257e:	69fb      	ldr	r3, [r7, #28]
 8002580:	fa02 f303 	lsl.w	r3, r2, r3
 8002584:	43db      	mvns	r3, r3
 8002586:	69ba      	ldr	r2, [r7, #24]
 8002588:	4013      	ands	r3, r2
 800258a:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 800258c:	683b      	ldr	r3, [r7, #0]
 800258e:	685b      	ldr	r3, [r3, #4]
 8002590:	091b      	lsrs	r3, r3, #4
 8002592:	f003 0201 	and.w	r2, r3, #1
 8002596:	69fb      	ldr	r3, [r7, #28]
 8002598:	fa02 f303 	lsl.w	r3, r2, r3
 800259c:	69ba      	ldr	r2, [r7, #24]
 800259e:	4313      	orrs	r3, r2
 80025a0:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 80025a2:	687b      	ldr	r3, [r7, #4]
 80025a4:	69ba      	ldr	r2, [r7, #24]
 80025a6:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 80025a8:	683b      	ldr	r3, [r7, #0]
 80025aa:	685b      	ldr	r3, [r3, #4]
 80025ac:	f003 0303 	and.w	r3, r3, #3
 80025b0:	2b03      	cmp	r3, #3
 80025b2:	d017      	beq.n	80025e4 <HAL_GPIO_Init+0xf0>
      {
        /* Check the parameters */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
        
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 80025b4:	687b      	ldr	r3, [r7, #4]
 80025b6:	68db      	ldr	r3, [r3, #12]
 80025b8:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 80025ba:	69fb      	ldr	r3, [r7, #28]
 80025bc:	005b      	lsls	r3, r3, #1
 80025be:	2203      	movs	r2, #3
 80025c0:	fa02 f303 	lsl.w	r3, r2, r3
 80025c4:	43db      	mvns	r3, r3
 80025c6:	69ba      	ldr	r2, [r7, #24]
 80025c8:	4013      	ands	r3, r2
 80025ca:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 80025cc:	683b      	ldr	r3, [r7, #0]
 80025ce:	689a      	ldr	r2, [r3, #8]
 80025d0:	69fb      	ldr	r3, [r7, #28]
 80025d2:	005b      	lsls	r3, r3, #1
 80025d4:	fa02 f303 	lsl.w	r3, r2, r3
 80025d8:	69ba      	ldr	r2, [r7, #24]
 80025da:	4313      	orrs	r3, r2
 80025dc:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 80025de:	687b      	ldr	r3, [r7, #4]
 80025e0:	69ba      	ldr	r2, [r7, #24]
 80025e2:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 80025e4:	683b      	ldr	r3, [r7, #0]
 80025e6:	685b      	ldr	r3, [r3, #4]
 80025e8:	f003 0303 	and.w	r3, r3, #3
 80025ec:	2b02      	cmp	r3, #2
 80025ee:	d123      	bne.n	8002638 <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 80025f0:	69fb      	ldr	r3, [r7, #28]
 80025f2:	08da      	lsrs	r2, r3, #3
 80025f4:	687b      	ldr	r3, [r7, #4]
 80025f6:	3208      	adds	r2, #8
 80025f8:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80025fc:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 80025fe:	69fb      	ldr	r3, [r7, #28]
 8002600:	f003 0307 	and.w	r3, r3, #7
 8002604:	009b      	lsls	r3, r3, #2
 8002606:	220f      	movs	r2, #15
 8002608:	fa02 f303 	lsl.w	r3, r2, r3
 800260c:	43db      	mvns	r3, r3
 800260e:	69ba      	ldr	r2, [r7, #24]
 8002610:	4013      	ands	r3, r2
 8002612:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 8002614:	683b      	ldr	r3, [r7, #0]
 8002616:	691a      	ldr	r2, [r3, #16]
 8002618:	69fb      	ldr	r3, [r7, #28]
 800261a:	f003 0307 	and.w	r3, r3, #7
 800261e:	009b      	lsls	r3, r3, #2
 8002620:	fa02 f303 	lsl.w	r3, r2, r3
 8002624:	69ba      	ldr	r2, [r7, #24]
 8002626:	4313      	orrs	r3, r2
 8002628:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 800262a:	69fb      	ldr	r3, [r7, #28]
 800262c:	08da      	lsrs	r2, r3, #3
 800262e:	687b      	ldr	r3, [r7, #4]
 8002630:	3208      	adds	r2, #8
 8002632:	69b9      	ldr	r1, [r7, #24]
 8002634:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8002638:	687b      	ldr	r3, [r7, #4]
 800263a:	681b      	ldr	r3, [r3, #0]
 800263c:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 800263e:	69fb      	ldr	r3, [r7, #28]
 8002640:	005b      	lsls	r3, r3, #1
 8002642:	2203      	movs	r2, #3
 8002644:	fa02 f303 	lsl.w	r3, r2, r3
 8002648:	43db      	mvns	r3, r3
 800264a:	69ba      	ldr	r2, [r7, #24]
 800264c:	4013      	ands	r3, r2
 800264e:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8002650:	683b      	ldr	r3, [r7, #0]
 8002652:	685b      	ldr	r3, [r3, #4]
 8002654:	f003 0203 	and.w	r2, r3, #3
 8002658:	69fb      	ldr	r3, [r7, #28]
 800265a:	005b      	lsls	r3, r3, #1
 800265c:	fa02 f303 	lsl.w	r3, r2, r3
 8002660:	69ba      	ldr	r2, [r7, #24]
 8002662:	4313      	orrs	r3, r2
 8002664:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8002666:	687b      	ldr	r3, [r7, #4]
 8002668:	69ba      	ldr	r2, [r7, #24]
 800266a:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 800266c:	683b      	ldr	r3, [r7, #0]
 800266e:	685b      	ldr	r3, [r3, #4]
 8002670:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8002674:	2b00      	cmp	r3, #0
 8002676:	f000 80c0 	beq.w	80027fa <HAL_GPIO_Init+0x306>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 800267a:	2300      	movs	r3, #0
 800267c:	60fb      	str	r3, [r7, #12]
 800267e:	4b66      	ldr	r3, [pc, #408]	; (8002818 <HAL_GPIO_Init+0x324>)
 8002680:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002682:	4a65      	ldr	r2, [pc, #404]	; (8002818 <HAL_GPIO_Init+0x324>)
 8002684:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8002688:	6453      	str	r3, [r2, #68]	; 0x44
 800268a:	4b63      	ldr	r3, [pc, #396]	; (8002818 <HAL_GPIO_Init+0x324>)
 800268c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800268e:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8002692:	60fb      	str	r3, [r7, #12]
 8002694:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 8002696:	4a61      	ldr	r2, [pc, #388]	; (800281c <HAL_GPIO_Init+0x328>)
 8002698:	69fb      	ldr	r3, [r7, #28]
 800269a:	089b      	lsrs	r3, r3, #2
 800269c:	3302      	adds	r3, #2
 800269e:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80026a2:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 80026a4:	69fb      	ldr	r3, [r7, #28]
 80026a6:	f003 0303 	and.w	r3, r3, #3
 80026aa:	009b      	lsls	r3, r3, #2
 80026ac:	220f      	movs	r2, #15
 80026ae:	fa02 f303 	lsl.w	r3, r2, r3
 80026b2:	43db      	mvns	r3, r3
 80026b4:	69ba      	ldr	r2, [r7, #24]
 80026b6:	4013      	ands	r3, r2
 80026b8:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 80026ba:	687b      	ldr	r3, [r7, #4]
 80026bc:	4a58      	ldr	r2, [pc, #352]	; (8002820 <HAL_GPIO_Init+0x32c>)
 80026be:	4293      	cmp	r3, r2
 80026c0:	d037      	beq.n	8002732 <HAL_GPIO_Init+0x23e>
 80026c2:	687b      	ldr	r3, [r7, #4]
 80026c4:	4a57      	ldr	r2, [pc, #348]	; (8002824 <HAL_GPIO_Init+0x330>)
 80026c6:	4293      	cmp	r3, r2
 80026c8:	d031      	beq.n	800272e <HAL_GPIO_Init+0x23a>
 80026ca:	687b      	ldr	r3, [r7, #4]
 80026cc:	4a56      	ldr	r2, [pc, #344]	; (8002828 <HAL_GPIO_Init+0x334>)
 80026ce:	4293      	cmp	r3, r2
 80026d0:	d02b      	beq.n	800272a <HAL_GPIO_Init+0x236>
 80026d2:	687b      	ldr	r3, [r7, #4]
 80026d4:	4a55      	ldr	r2, [pc, #340]	; (800282c <HAL_GPIO_Init+0x338>)
 80026d6:	4293      	cmp	r3, r2
 80026d8:	d025      	beq.n	8002726 <HAL_GPIO_Init+0x232>
 80026da:	687b      	ldr	r3, [r7, #4]
 80026dc:	4a54      	ldr	r2, [pc, #336]	; (8002830 <HAL_GPIO_Init+0x33c>)
 80026de:	4293      	cmp	r3, r2
 80026e0:	d01f      	beq.n	8002722 <HAL_GPIO_Init+0x22e>
 80026e2:	687b      	ldr	r3, [r7, #4]
 80026e4:	4a53      	ldr	r2, [pc, #332]	; (8002834 <HAL_GPIO_Init+0x340>)
 80026e6:	4293      	cmp	r3, r2
 80026e8:	d019      	beq.n	800271e <HAL_GPIO_Init+0x22a>
 80026ea:	687b      	ldr	r3, [r7, #4]
 80026ec:	4a52      	ldr	r2, [pc, #328]	; (8002838 <HAL_GPIO_Init+0x344>)
 80026ee:	4293      	cmp	r3, r2
 80026f0:	d013      	beq.n	800271a <HAL_GPIO_Init+0x226>
 80026f2:	687b      	ldr	r3, [r7, #4]
 80026f4:	4a51      	ldr	r2, [pc, #324]	; (800283c <HAL_GPIO_Init+0x348>)
 80026f6:	4293      	cmp	r3, r2
 80026f8:	d00d      	beq.n	8002716 <HAL_GPIO_Init+0x222>
 80026fa:	687b      	ldr	r3, [r7, #4]
 80026fc:	4a50      	ldr	r2, [pc, #320]	; (8002840 <HAL_GPIO_Init+0x34c>)
 80026fe:	4293      	cmp	r3, r2
 8002700:	d007      	beq.n	8002712 <HAL_GPIO_Init+0x21e>
 8002702:	687b      	ldr	r3, [r7, #4]
 8002704:	4a4f      	ldr	r2, [pc, #316]	; (8002844 <HAL_GPIO_Init+0x350>)
 8002706:	4293      	cmp	r3, r2
 8002708:	d101      	bne.n	800270e <HAL_GPIO_Init+0x21a>
 800270a:	2309      	movs	r3, #9
 800270c:	e012      	b.n	8002734 <HAL_GPIO_Init+0x240>
 800270e:	230a      	movs	r3, #10
 8002710:	e010      	b.n	8002734 <HAL_GPIO_Init+0x240>
 8002712:	2308      	movs	r3, #8
 8002714:	e00e      	b.n	8002734 <HAL_GPIO_Init+0x240>
 8002716:	2307      	movs	r3, #7
 8002718:	e00c      	b.n	8002734 <HAL_GPIO_Init+0x240>
 800271a:	2306      	movs	r3, #6
 800271c:	e00a      	b.n	8002734 <HAL_GPIO_Init+0x240>
 800271e:	2305      	movs	r3, #5
 8002720:	e008      	b.n	8002734 <HAL_GPIO_Init+0x240>
 8002722:	2304      	movs	r3, #4
 8002724:	e006      	b.n	8002734 <HAL_GPIO_Init+0x240>
 8002726:	2303      	movs	r3, #3
 8002728:	e004      	b.n	8002734 <HAL_GPIO_Init+0x240>
 800272a:	2302      	movs	r3, #2
 800272c:	e002      	b.n	8002734 <HAL_GPIO_Init+0x240>
 800272e:	2301      	movs	r3, #1
 8002730:	e000      	b.n	8002734 <HAL_GPIO_Init+0x240>
 8002732:	2300      	movs	r3, #0
 8002734:	69fa      	ldr	r2, [r7, #28]
 8002736:	f002 0203 	and.w	r2, r2, #3
 800273a:	0092      	lsls	r2, r2, #2
 800273c:	4093      	lsls	r3, r2
 800273e:	69ba      	ldr	r2, [r7, #24]
 8002740:	4313      	orrs	r3, r2
 8002742:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8002744:	4935      	ldr	r1, [pc, #212]	; (800281c <HAL_GPIO_Init+0x328>)
 8002746:	69fb      	ldr	r3, [r7, #28]
 8002748:	089b      	lsrs	r3, r3, #2
 800274a:	3302      	adds	r3, #2
 800274c:	69ba      	ldr	r2, [r7, #24]
 800274e:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8002752:	4b3d      	ldr	r3, [pc, #244]	; (8002848 <HAL_GPIO_Init+0x354>)
 8002754:	689b      	ldr	r3, [r3, #8]
 8002756:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8002758:	693b      	ldr	r3, [r7, #16]
 800275a:	43db      	mvns	r3, r3
 800275c:	69ba      	ldr	r2, [r7, #24]
 800275e:	4013      	ands	r3, r2
 8002760:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 8002762:	683b      	ldr	r3, [r7, #0]
 8002764:	685b      	ldr	r3, [r3, #4]
 8002766:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 800276a:	2b00      	cmp	r3, #0
 800276c:	d003      	beq.n	8002776 <HAL_GPIO_Init+0x282>
        {
          temp |= iocurrent;
 800276e:	69ba      	ldr	r2, [r7, #24]
 8002770:	693b      	ldr	r3, [r7, #16]
 8002772:	4313      	orrs	r3, r2
 8002774:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 8002776:	4a34      	ldr	r2, [pc, #208]	; (8002848 <HAL_GPIO_Init+0x354>)
 8002778:	69bb      	ldr	r3, [r7, #24]
 800277a:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 800277c:	4b32      	ldr	r3, [pc, #200]	; (8002848 <HAL_GPIO_Init+0x354>)
 800277e:	68db      	ldr	r3, [r3, #12]
 8002780:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8002782:	693b      	ldr	r3, [r7, #16]
 8002784:	43db      	mvns	r3, r3
 8002786:	69ba      	ldr	r2, [r7, #24]
 8002788:	4013      	ands	r3, r2
 800278a:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 800278c:	683b      	ldr	r3, [r7, #0]
 800278e:	685b      	ldr	r3, [r3, #4]
 8002790:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8002794:	2b00      	cmp	r3, #0
 8002796:	d003      	beq.n	80027a0 <HAL_GPIO_Init+0x2ac>
        {
          temp |= iocurrent;
 8002798:	69ba      	ldr	r2, [r7, #24]
 800279a:	693b      	ldr	r3, [r7, #16]
 800279c:	4313      	orrs	r3, r2
 800279e:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 80027a0:	4a29      	ldr	r2, [pc, #164]	; (8002848 <HAL_GPIO_Init+0x354>)
 80027a2:	69bb      	ldr	r3, [r7, #24]
 80027a4:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 80027a6:	4b28      	ldr	r3, [pc, #160]	; (8002848 <HAL_GPIO_Init+0x354>)
 80027a8:	685b      	ldr	r3, [r3, #4]
 80027aa:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80027ac:	693b      	ldr	r3, [r7, #16]
 80027ae:	43db      	mvns	r3, r3
 80027b0:	69ba      	ldr	r2, [r7, #24]
 80027b2:	4013      	ands	r3, r2
 80027b4:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 80027b6:	683b      	ldr	r3, [r7, #0]
 80027b8:	685b      	ldr	r3, [r3, #4]
 80027ba:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80027be:	2b00      	cmp	r3, #0
 80027c0:	d003      	beq.n	80027ca <HAL_GPIO_Init+0x2d6>
        {
          temp |= iocurrent;
 80027c2:	69ba      	ldr	r2, [r7, #24]
 80027c4:	693b      	ldr	r3, [r7, #16]
 80027c6:	4313      	orrs	r3, r2
 80027c8:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 80027ca:	4a1f      	ldr	r2, [pc, #124]	; (8002848 <HAL_GPIO_Init+0x354>)
 80027cc:	69bb      	ldr	r3, [r7, #24]
 80027ce:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 80027d0:	4b1d      	ldr	r3, [pc, #116]	; (8002848 <HAL_GPIO_Init+0x354>)
 80027d2:	681b      	ldr	r3, [r3, #0]
 80027d4:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80027d6:	693b      	ldr	r3, [r7, #16]
 80027d8:	43db      	mvns	r3, r3
 80027da:	69ba      	ldr	r2, [r7, #24]
 80027dc:	4013      	ands	r3, r2
 80027de:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 80027e0:	683b      	ldr	r3, [r7, #0]
 80027e2:	685b      	ldr	r3, [r3, #4]
 80027e4:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80027e8:	2b00      	cmp	r3, #0
 80027ea:	d003      	beq.n	80027f4 <HAL_GPIO_Init+0x300>
        {
          temp |= iocurrent;
 80027ec:	69ba      	ldr	r2, [r7, #24]
 80027ee:	693b      	ldr	r3, [r7, #16]
 80027f0:	4313      	orrs	r3, r2
 80027f2:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 80027f4:	4a14      	ldr	r2, [pc, #80]	; (8002848 <HAL_GPIO_Init+0x354>)
 80027f6:	69bb      	ldr	r3, [r7, #24]
 80027f8:	6013      	str	r3, [r2, #0]
  for(position = 0U; position < GPIO_NUMBER; position++)
 80027fa:	69fb      	ldr	r3, [r7, #28]
 80027fc:	3301      	adds	r3, #1
 80027fe:	61fb      	str	r3, [r7, #28]
 8002800:	69fb      	ldr	r3, [r7, #28]
 8002802:	2b0f      	cmp	r3, #15
 8002804:	f67f ae84 	bls.w	8002510 <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 8002808:	bf00      	nop
 800280a:	bf00      	nop
 800280c:	3724      	adds	r7, #36	; 0x24
 800280e:	46bd      	mov	sp, r7
 8002810:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002814:	4770      	bx	lr
 8002816:	bf00      	nop
 8002818:	40023800 	.word	0x40023800
 800281c:	40013800 	.word	0x40013800
 8002820:	40020000 	.word	0x40020000
 8002824:	40020400 	.word	0x40020400
 8002828:	40020800 	.word	0x40020800
 800282c:	40020c00 	.word	0x40020c00
 8002830:	40021000 	.word	0x40021000
 8002834:	40021400 	.word	0x40021400
 8002838:	40021800 	.word	0x40021800
 800283c:	40021c00 	.word	0x40021c00
 8002840:	40022000 	.word	0x40022000
 8002844:	40022400 	.word	0x40022400
 8002848:	40013c00 	.word	0x40013c00

0800284c <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 800284c:	b480      	push	{r7}
 800284e:	b083      	sub	sp, #12
 8002850:	af00      	add	r7, sp, #0
 8002852:	6078      	str	r0, [r7, #4]
 8002854:	460b      	mov	r3, r1
 8002856:	807b      	strh	r3, [r7, #2]
 8002858:	4613      	mov	r3, r2
 800285a:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 800285c:	787b      	ldrb	r3, [r7, #1]
 800285e:	2b00      	cmp	r3, #0
 8002860:	d003      	beq.n	800286a <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8002862:	887a      	ldrh	r2, [r7, #2]
 8002864:	687b      	ldr	r3, [r7, #4]
 8002866:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 8002868:	e003      	b.n	8002872 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 800286a:	887b      	ldrh	r3, [r7, #2]
 800286c:	041a      	lsls	r2, r3, #16
 800286e:	687b      	ldr	r3, [r7, #4]
 8002870:	619a      	str	r2, [r3, #24]
}
 8002872:	bf00      	nop
 8002874:	370c      	adds	r7, #12
 8002876:	46bd      	mov	sp, r7
 8002878:	f85d 7b04 	ldr.w	r7, [sp], #4
 800287c:	4770      	bx	lr

0800287e <HAL_HCD_Init>:
  * @brief  Initialize the host driver.
  * @param  hhcd HCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_HCD_Init(HCD_HandleTypeDef *hhcd)
{
 800287e:	b5f0      	push	{r4, r5, r6, r7, lr}
 8002880:	b08f      	sub	sp, #60	; 0x3c
 8002882:	af0a      	add	r7, sp, #40	; 0x28
 8002884:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx;

  /* Check the HCD handle allocation */
  if (hhcd == NULL)
 8002886:	687b      	ldr	r3, [r7, #4]
 8002888:	2b00      	cmp	r3, #0
 800288a:	d101      	bne.n	8002890 <HAL_HCD_Init+0x12>
  {
    return HAL_ERROR;
 800288c:	2301      	movs	r3, #1
 800288e:	e054      	b.n	800293a <HAL_HCD_Init+0xbc>
  }

  /* Check the parameters */
  assert_param(IS_HCD_ALL_INSTANCE(hhcd->Instance));

  USBx = hhcd->Instance;
 8002890:	687b      	ldr	r3, [r7, #4]
 8002892:	681b      	ldr	r3, [r3, #0]
 8002894:	60fb      	str	r3, [r7, #12]

  if (hhcd->State == HAL_HCD_STATE_RESET)
 8002896:	687b      	ldr	r3, [r7, #4]
 8002898:	f893 32f9 	ldrb.w	r3, [r3, #761]	; 0x2f9
 800289c:	b2db      	uxtb	r3, r3
 800289e:	2b00      	cmp	r3, #0
 80028a0:	d106      	bne.n	80028b0 <HAL_HCD_Init+0x32>
  {
    /* Allocate lock resource and initialize it */
    hhcd->Lock = HAL_UNLOCKED;
 80028a2:	687b      	ldr	r3, [r7, #4]
 80028a4:	2200      	movs	r2, #0
 80028a6:	f883 22f8 	strb.w	r2, [r3, #760]	; 0x2f8

    /* Init the low level hardware */
    hhcd->MspInitCallback(hhcd);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_HCD_MspInit(hhcd);
 80028aa:	6878      	ldr	r0, [r7, #4]
 80028ac:	f7fe fe94 	bl	80015d8 <HAL_HCD_MspInit>
#endif /* (USE_HAL_HCD_REGISTER_CALLBACKS) */
  }

  hhcd->State = HAL_HCD_STATE_BUSY;
 80028b0:	687b      	ldr	r3, [r7, #4]
 80028b2:	2203      	movs	r2, #3
 80028b4:	f883 22f9 	strb.w	r2, [r3, #761]	; 0x2f9

  /* Disable DMA mode for FS instance */
  if ((USBx->CID & (0x1U << 8)) == 0U)
 80028b8:	68fb      	ldr	r3, [r7, #12]
 80028ba:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80028bc:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80028c0:	2b00      	cmp	r3, #0
 80028c2:	d102      	bne.n	80028ca <HAL_HCD_Init+0x4c>
  {
    hhcd->Init.dma_enable = 0U;
 80028c4:	687b      	ldr	r3, [r7, #4]
 80028c6:	2200      	movs	r2, #0
 80028c8:	611a      	str	r2, [r3, #16]
  }

  /* Disable the Interrupts */
  __HAL_HCD_DISABLE(hhcd);
 80028ca:	687b      	ldr	r3, [r7, #4]
 80028cc:	681b      	ldr	r3, [r3, #0]
 80028ce:	4618      	mov	r0, r3
 80028d0:	f003 ff5f 	bl	8006792 <USB_DisableGlobalInt>

  /* Init the Core (common init.) */
  (void)USB_CoreInit(hhcd->Instance, hhcd->Init);
 80028d4:	687b      	ldr	r3, [r7, #4]
 80028d6:	681b      	ldr	r3, [r3, #0]
 80028d8:	603b      	str	r3, [r7, #0]
 80028da:	687e      	ldr	r6, [r7, #4]
 80028dc:	466d      	mov	r5, sp
 80028de:	f106 0410 	add.w	r4, r6, #16
 80028e2:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 80028e4:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 80028e6:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 80028e8:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 80028ea:	e894 0003 	ldmia.w	r4, {r0, r1}
 80028ee:	e885 0003 	stmia.w	r5, {r0, r1}
 80028f2:	1d33      	adds	r3, r6, #4
 80028f4:	cb0e      	ldmia	r3, {r1, r2, r3}
 80028f6:	6838      	ldr	r0, [r7, #0]
 80028f8:	f003 feea 	bl	80066d0 <USB_CoreInit>

  /* Force Host Mode*/
  (void)USB_SetCurrentMode(hhcd->Instance, USB_HOST_MODE);
 80028fc:	687b      	ldr	r3, [r7, #4]
 80028fe:	681b      	ldr	r3, [r3, #0]
 8002900:	2101      	movs	r1, #1
 8002902:	4618      	mov	r0, r3
 8002904:	f003 ff56 	bl	80067b4 <USB_SetCurrentMode>

  /* Init Host */
  (void)USB_HostInit(hhcd->Instance, hhcd->Init);
 8002908:	687b      	ldr	r3, [r7, #4]
 800290a:	681b      	ldr	r3, [r3, #0]
 800290c:	603b      	str	r3, [r7, #0]
 800290e:	687e      	ldr	r6, [r7, #4]
 8002910:	466d      	mov	r5, sp
 8002912:	f106 0410 	add.w	r4, r6, #16
 8002916:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8002918:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 800291a:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 800291c:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 800291e:	e894 0003 	ldmia.w	r4, {r0, r1}
 8002922:	e885 0003 	stmia.w	r5, {r0, r1}
 8002926:	1d33      	adds	r3, r6, #4
 8002928:	cb0e      	ldmia	r3, {r1, r2, r3}
 800292a:	6838      	ldr	r0, [r7, #0]
 800292c:	f004 f8a0 	bl	8006a70 <USB_HostInit>

  hhcd->State = HAL_HCD_STATE_READY;
 8002930:	687b      	ldr	r3, [r7, #4]
 8002932:	2201      	movs	r2, #1
 8002934:	f883 22f9 	strb.w	r2, [r3, #761]	; 0x2f9

  return HAL_OK;
 8002938:	2300      	movs	r3, #0
}
 800293a:	4618      	mov	r0, r3
 800293c:	3714      	adds	r7, #20
 800293e:	46bd      	mov	sp, r7
 8002940:	bdf0      	pop	{r4, r5, r6, r7, pc}

08002942 <HAL_HCD_IRQHandler>:
  * @brief  Handle HCD interrupt request.
  * @param  hhcd HCD handle
  * @retval None
  */
void HAL_HCD_IRQHandler(HCD_HandleTypeDef *hhcd)
{
 8002942:	b580      	push	{r7, lr}
 8002944:	b086      	sub	sp, #24
 8002946:	af00      	add	r7, sp, #0
 8002948:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx = hhcd->Instance;
 800294a:	687b      	ldr	r3, [r7, #4]
 800294c:	681b      	ldr	r3, [r3, #0]
 800294e:	613b      	str	r3, [r7, #16]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8002950:	693b      	ldr	r3, [r7, #16]
 8002952:	60fb      	str	r3, [r7, #12]
  uint32_t i;
  uint32_t interrupt;

  /* Ensure that we are in device mode */
  if (USB_GetMode(hhcd->Instance) == USB_OTG_MODE_HOST)
 8002954:	687b      	ldr	r3, [r7, #4]
 8002956:	681b      	ldr	r3, [r3, #0]
 8002958:	4618      	mov	r0, r3
 800295a:	f004 f846 	bl	80069ea <USB_GetMode>
 800295e:	4603      	mov	r3, r0
 8002960:	2b01      	cmp	r3, #1
 8002962:	f040 80f6 	bne.w	8002b52 <HAL_HCD_IRQHandler+0x210>
  {
    /* Avoid spurious interrupt */
    if (__HAL_HCD_IS_INVALID_INTERRUPT(hhcd))
 8002966:	687b      	ldr	r3, [r7, #4]
 8002968:	681b      	ldr	r3, [r3, #0]
 800296a:	4618      	mov	r0, r3
 800296c:	f004 f82a 	bl	80069c4 <USB_ReadInterrupts>
 8002970:	4603      	mov	r3, r0
 8002972:	2b00      	cmp	r3, #0
 8002974:	f000 80ec 	beq.w	8002b50 <HAL_HCD_IRQHandler+0x20e>
    {
      return;
    }

    if (__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_PXFR_INCOMPISOOUT))
 8002978:	687b      	ldr	r3, [r7, #4]
 800297a:	681b      	ldr	r3, [r3, #0]
 800297c:	4618      	mov	r0, r3
 800297e:	f004 f821 	bl	80069c4 <USB_ReadInterrupts>
 8002982:	4603      	mov	r3, r0
 8002984:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8002988:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 800298c:	d104      	bne.n	8002998 <HAL_HCD_IRQHandler+0x56>
    {
      /* Incorrect mode, acknowledge the interrupt */
      __HAL_HCD_CLEAR_FLAG(hhcd, USB_OTG_GINTSTS_PXFR_INCOMPISOOUT);
 800298e:	687b      	ldr	r3, [r7, #4]
 8002990:	681b      	ldr	r3, [r3, #0]
 8002992:	f44f 1200 	mov.w	r2, #2097152	; 0x200000
 8002996:	615a      	str	r2, [r3, #20]
    }

    if (__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_IISOIXFR))
 8002998:	687b      	ldr	r3, [r7, #4]
 800299a:	681b      	ldr	r3, [r3, #0]
 800299c:	4618      	mov	r0, r3
 800299e:	f004 f811 	bl	80069c4 <USB_ReadInterrupts>
 80029a2:	4603      	mov	r3, r0
 80029a4:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 80029a8:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 80029ac:	d104      	bne.n	80029b8 <HAL_HCD_IRQHandler+0x76>
    {
      /* Incorrect mode, acknowledge the interrupt */
      __HAL_HCD_CLEAR_FLAG(hhcd, USB_OTG_GINTSTS_IISOIXFR);
 80029ae:	687b      	ldr	r3, [r7, #4]
 80029b0:	681b      	ldr	r3, [r3, #0]
 80029b2:	f44f 1280 	mov.w	r2, #1048576	; 0x100000
 80029b6:	615a      	str	r2, [r3, #20]
    }

    if (__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_PTXFE))
 80029b8:	687b      	ldr	r3, [r7, #4]
 80029ba:	681b      	ldr	r3, [r3, #0]
 80029bc:	4618      	mov	r0, r3
 80029be:	f004 f801 	bl	80069c4 <USB_ReadInterrupts>
 80029c2:	4603      	mov	r3, r0
 80029c4:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 80029c8:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 80029cc:	d104      	bne.n	80029d8 <HAL_HCD_IRQHandler+0x96>
    {
      /* Incorrect mode, acknowledge the interrupt */
      __HAL_HCD_CLEAR_FLAG(hhcd, USB_OTG_GINTSTS_PTXFE);
 80029ce:	687b      	ldr	r3, [r7, #4]
 80029d0:	681b      	ldr	r3, [r3, #0]
 80029d2:	f04f 6280 	mov.w	r2, #67108864	; 0x4000000
 80029d6:	615a      	str	r2, [r3, #20]
    }

    if (__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_MMIS))
 80029d8:	687b      	ldr	r3, [r7, #4]
 80029da:	681b      	ldr	r3, [r3, #0]
 80029dc:	4618      	mov	r0, r3
 80029de:	f003 fff1 	bl	80069c4 <USB_ReadInterrupts>
 80029e2:	4603      	mov	r3, r0
 80029e4:	f003 0302 	and.w	r3, r3, #2
 80029e8:	2b02      	cmp	r3, #2
 80029ea:	d103      	bne.n	80029f4 <HAL_HCD_IRQHandler+0xb2>
    {
      /* Incorrect mode, acknowledge the interrupt */
      __HAL_HCD_CLEAR_FLAG(hhcd, USB_OTG_GINTSTS_MMIS);
 80029ec:	687b      	ldr	r3, [r7, #4]
 80029ee:	681b      	ldr	r3, [r3, #0]
 80029f0:	2202      	movs	r2, #2
 80029f2:	615a      	str	r2, [r3, #20]
    }

    /* Handle Host Disconnect Interrupts */
    if (__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_DISCINT))
 80029f4:	687b      	ldr	r3, [r7, #4]
 80029f6:	681b      	ldr	r3, [r3, #0]
 80029f8:	4618      	mov	r0, r3
 80029fa:	f003 ffe3 	bl	80069c4 <USB_ReadInterrupts>
 80029fe:	4603      	mov	r3, r0
 8002a00:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8002a04:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8002a08:	d11c      	bne.n	8002a44 <HAL_HCD_IRQHandler+0x102>
    {
      __HAL_HCD_CLEAR_FLAG(hhcd, USB_OTG_GINTSTS_DISCINT);
 8002a0a:	687b      	ldr	r3, [r7, #4]
 8002a0c:	681b      	ldr	r3, [r3, #0]
 8002a0e:	f04f 5200 	mov.w	r2, #536870912	; 0x20000000
 8002a12:	615a      	str	r2, [r3, #20]

      if ((USBx_HPRT0 & USB_OTG_HPRT_PCSTS) == 0U)
 8002a14:	68fb      	ldr	r3, [r7, #12]
 8002a16:	f503 6388 	add.w	r3, r3, #1088	; 0x440
 8002a1a:	681b      	ldr	r3, [r3, #0]
 8002a1c:	f003 0301 	and.w	r3, r3, #1
 8002a20:	2b00      	cmp	r3, #0
 8002a22:	d10f      	bne.n	8002a44 <HAL_HCD_IRQHandler+0x102>
      {
        /* Flush USB Fifo */
        (void)USB_FlushTxFifo(USBx, 0x10U);
 8002a24:	2110      	movs	r1, #16
 8002a26:	6938      	ldr	r0, [r7, #16]
 8002a28:	f003 ff10 	bl	800684c <USB_FlushTxFifo>
        (void)USB_FlushRxFifo(USBx);
 8002a2c:	6938      	ldr	r0, [r7, #16]
 8002a2e:	f003 ff41 	bl	80068b4 <USB_FlushRxFifo>

        /* Restore FS Clock */
        (void)USB_InitFSLSPClkSel(hhcd->Instance, HCFG_48_MHZ);
 8002a32:	687b      	ldr	r3, [r7, #4]
 8002a34:	681b      	ldr	r3, [r3, #0]
 8002a36:	2101      	movs	r1, #1
 8002a38:	4618      	mov	r0, r3
 8002a3a:	f004 f8d9 	bl	8006bf0 <USB_InitFSLSPClkSel>

        /* Handle Host Port Disconnect Interrupt */
#if (USE_HAL_HCD_REGISTER_CALLBACKS == 1U)
        hhcd->DisconnectCallback(hhcd);
#else
        HAL_HCD_Disconnect_Callback(hhcd);
 8002a3e:	6878      	ldr	r0, [r7, #4]
 8002a40:	f000 f89e 	bl	8002b80 <HAL_HCD_Disconnect_Callback>
#endif /* USE_HAL_HCD_REGISTER_CALLBACKS */
      }
    }

    /* Handle Host Port Interrupts */
    if (__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_HPRTINT))
 8002a44:	687b      	ldr	r3, [r7, #4]
 8002a46:	681b      	ldr	r3, [r3, #0]
 8002a48:	4618      	mov	r0, r3
 8002a4a:	f003 ffbb 	bl	80069c4 <USB_ReadInterrupts>
 8002a4e:	4603      	mov	r3, r0
 8002a50:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8002a54:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8002a58:	d102      	bne.n	8002a60 <HAL_HCD_IRQHandler+0x11e>
    {
      HCD_Port_IRQHandler(hhcd);
 8002a5a:	6878      	ldr	r0, [r7, #4]
 8002a5c:	f001 f84c 	bl	8003af8 <HCD_Port_IRQHandler>
    }

    /* Handle Host SOF Interrupt */
    if (__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_SOF))
 8002a60:	687b      	ldr	r3, [r7, #4]
 8002a62:	681b      	ldr	r3, [r3, #0]
 8002a64:	4618      	mov	r0, r3
 8002a66:	f003 ffad 	bl	80069c4 <USB_ReadInterrupts>
 8002a6a:	4603      	mov	r3, r0
 8002a6c:	f003 0308 	and.w	r3, r3, #8
 8002a70:	2b08      	cmp	r3, #8
 8002a72:	d106      	bne.n	8002a82 <HAL_HCD_IRQHandler+0x140>
    {
#if (USE_HAL_HCD_REGISTER_CALLBACKS == 1U)
      hhcd->SOFCallback(hhcd);
#else
      HAL_HCD_SOF_Callback(hhcd);
 8002a74:	6878      	ldr	r0, [r7, #4]
 8002a76:	f000 f86f 	bl	8002b58 <HAL_HCD_SOF_Callback>
#endif /* USE_HAL_HCD_REGISTER_CALLBACKS */

      __HAL_HCD_CLEAR_FLAG(hhcd, USB_OTG_GINTSTS_SOF);
 8002a7a:	687b      	ldr	r3, [r7, #4]
 8002a7c:	681b      	ldr	r3, [r3, #0]
 8002a7e:	2208      	movs	r2, #8
 8002a80:	615a      	str	r2, [r3, #20]
    }

    /* Handle Rx Queue Level Interrupts */
    if ((__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_RXFLVL)) != 0U)
 8002a82:	687b      	ldr	r3, [r7, #4]
 8002a84:	681b      	ldr	r3, [r3, #0]
 8002a86:	4618      	mov	r0, r3
 8002a88:	f003 ff9c 	bl	80069c4 <USB_ReadInterrupts>
 8002a8c:	4603      	mov	r3, r0
 8002a8e:	f003 0310 	and.w	r3, r3, #16
 8002a92:	2b10      	cmp	r3, #16
 8002a94:	d101      	bne.n	8002a9a <HAL_HCD_IRQHandler+0x158>
 8002a96:	2301      	movs	r3, #1
 8002a98:	e000      	b.n	8002a9c <HAL_HCD_IRQHandler+0x15a>
 8002a9a:	2300      	movs	r3, #0
 8002a9c:	2b00      	cmp	r3, #0
 8002a9e:	d012      	beq.n	8002ac6 <HAL_HCD_IRQHandler+0x184>
    {
      USB_MASK_INTERRUPT(hhcd->Instance, USB_OTG_GINTSTS_RXFLVL);
 8002aa0:	687b      	ldr	r3, [r7, #4]
 8002aa2:	681b      	ldr	r3, [r3, #0]
 8002aa4:	699a      	ldr	r2, [r3, #24]
 8002aa6:	687b      	ldr	r3, [r7, #4]
 8002aa8:	681b      	ldr	r3, [r3, #0]
 8002aaa:	f022 0210 	bic.w	r2, r2, #16
 8002aae:	619a      	str	r2, [r3, #24]

      HCD_RXQLVL_IRQHandler(hhcd);
 8002ab0:	6878      	ldr	r0, [r7, #4]
 8002ab2:	f000 ff4f 	bl	8003954 <HCD_RXQLVL_IRQHandler>

      USB_UNMASK_INTERRUPT(hhcd->Instance, USB_OTG_GINTSTS_RXFLVL);
 8002ab6:	687b      	ldr	r3, [r7, #4]
 8002ab8:	681b      	ldr	r3, [r3, #0]
 8002aba:	699a      	ldr	r2, [r3, #24]
 8002abc:	687b      	ldr	r3, [r7, #4]
 8002abe:	681b      	ldr	r3, [r3, #0]
 8002ac0:	f042 0210 	orr.w	r2, r2, #16
 8002ac4:	619a      	str	r2, [r3, #24]
    }

    /* Handle Host channel Interrupt */
    if (__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_HCINT))
 8002ac6:	687b      	ldr	r3, [r7, #4]
 8002ac8:	681b      	ldr	r3, [r3, #0]
 8002aca:	4618      	mov	r0, r3
 8002acc:	f003 ff7a 	bl	80069c4 <USB_ReadInterrupts>
 8002ad0:	4603      	mov	r3, r0
 8002ad2:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002ad6:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 8002ada:	d13a      	bne.n	8002b52 <HAL_HCD_IRQHandler+0x210>
    {
      interrupt = USB_HC_ReadInterrupt(hhcd->Instance);
 8002adc:	687b      	ldr	r3, [r7, #4]
 8002ade:	681b      	ldr	r3, [r3, #0]
 8002ae0:	4618      	mov	r0, r3
 8002ae2:	f004 f8bf 	bl	8006c64 <USB_HC_ReadInterrupt>
 8002ae6:	60b8      	str	r0, [r7, #8]
      for (i = 0U; i < hhcd->Init.Host_channels; i++)
 8002ae8:	2300      	movs	r3, #0
 8002aea:	617b      	str	r3, [r7, #20]
 8002aec:	e025      	b.n	8002b3a <HAL_HCD_IRQHandler+0x1f8>
      {
        if ((interrupt & (1UL << (i & 0xFU))) != 0U)
 8002aee:	697b      	ldr	r3, [r7, #20]
 8002af0:	f003 030f 	and.w	r3, r3, #15
 8002af4:	68ba      	ldr	r2, [r7, #8]
 8002af6:	fa22 f303 	lsr.w	r3, r2, r3
 8002afa:	f003 0301 	and.w	r3, r3, #1
 8002afe:	2b00      	cmp	r3, #0
 8002b00:	d018      	beq.n	8002b34 <HAL_HCD_IRQHandler+0x1f2>
        {
          if ((USBx_HC(i)->HCCHAR & USB_OTG_HCCHAR_EPDIR) == USB_OTG_HCCHAR_EPDIR)
 8002b02:	697b      	ldr	r3, [r7, #20]
 8002b04:	015a      	lsls	r2, r3, #5
 8002b06:	68fb      	ldr	r3, [r7, #12]
 8002b08:	4413      	add	r3, r2
 8002b0a:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002b0e:	681b      	ldr	r3, [r3, #0]
 8002b10:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8002b14:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8002b18:	d106      	bne.n	8002b28 <HAL_HCD_IRQHandler+0x1e6>
          {
            HCD_HC_IN_IRQHandler(hhcd, (uint8_t)i);
 8002b1a:	697b      	ldr	r3, [r7, #20]
 8002b1c:	b2db      	uxtb	r3, r3
 8002b1e:	4619      	mov	r1, r3
 8002b20:	6878      	ldr	r0, [r7, #4]
 8002b22:	f000 f859 	bl	8002bd8 <HCD_HC_IN_IRQHandler>
 8002b26:	e005      	b.n	8002b34 <HAL_HCD_IRQHandler+0x1f2>
          }
          else
          {
            HCD_HC_OUT_IRQHandler(hhcd, (uint8_t)i);
 8002b28:	697b      	ldr	r3, [r7, #20]
 8002b2a:	b2db      	uxtb	r3, r3
 8002b2c:	4619      	mov	r1, r3
 8002b2e:	6878      	ldr	r0, [r7, #4]
 8002b30:	f000 fba7 	bl	8003282 <HCD_HC_OUT_IRQHandler>
      for (i = 0U; i < hhcd->Init.Host_channels; i++)
 8002b34:	697b      	ldr	r3, [r7, #20]
 8002b36:	3301      	adds	r3, #1
 8002b38:	617b      	str	r3, [r7, #20]
 8002b3a:	687b      	ldr	r3, [r7, #4]
 8002b3c:	689b      	ldr	r3, [r3, #8]
 8002b3e:	697a      	ldr	r2, [r7, #20]
 8002b40:	429a      	cmp	r2, r3
 8002b42:	d3d4      	bcc.n	8002aee <HAL_HCD_IRQHandler+0x1ac>
          }
        }
      }
      __HAL_HCD_CLEAR_FLAG(hhcd, USB_OTG_GINTSTS_HCINT);
 8002b44:	687b      	ldr	r3, [r7, #4]
 8002b46:	681b      	ldr	r3, [r3, #0]
 8002b48:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 8002b4c:	615a      	str	r2, [r3, #20]
 8002b4e:	e000      	b.n	8002b52 <HAL_HCD_IRQHandler+0x210>
      return;
 8002b50:	bf00      	nop
    }
  }
}
 8002b52:	3718      	adds	r7, #24
 8002b54:	46bd      	mov	sp, r7
 8002b56:	bd80      	pop	{r7, pc}

08002b58 <HAL_HCD_SOF_Callback>:
  * @brief  SOF callback.
  * @param  hhcd HCD handle
  * @retval None
  */
__weak void HAL_HCD_SOF_Callback(HCD_HandleTypeDef *hhcd)
{
 8002b58:	b480      	push	{r7}
 8002b5a:	b083      	sub	sp, #12
 8002b5c:	af00      	add	r7, sp, #0
 8002b5e:	6078      	str	r0, [r7, #4]
  UNUSED(hhcd);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_HCD_SOF_Callback could be implemented in the user file
   */
}
 8002b60:	bf00      	nop
 8002b62:	370c      	adds	r7, #12
 8002b64:	46bd      	mov	sp, r7
 8002b66:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002b6a:	4770      	bx	lr

08002b6c <HAL_HCD_Connect_Callback>:
  * @brief Connection Event callback.
  * @param  hhcd HCD handle
  * @retval None
  */
__weak void HAL_HCD_Connect_Callback(HCD_HandleTypeDef *hhcd)
{
 8002b6c:	b480      	push	{r7}
 8002b6e:	b083      	sub	sp, #12
 8002b70:	af00      	add	r7, sp, #0
 8002b72:	6078      	str	r0, [r7, #4]
  UNUSED(hhcd);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_HCD_Connect_Callback could be implemented in the user file
   */
}
 8002b74:	bf00      	nop
 8002b76:	370c      	adds	r7, #12
 8002b78:	46bd      	mov	sp, r7
 8002b7a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002b7e:	4770      	bx	lr

08002b80 <HAL_HCD_Disconnect_Callback>:
  * @brief  Disconnection Event callback.
  * @param  hhcd HCD handle
  * @retval None
  */
__weak void HAL_HCD_Disconnect_Callback(HCD_HandleTypeDef *hhcd)
{
 8002b80:	b480      	push	{r7}
 8002b82:	b083      	sub	sp, #12
 8002b84:	af00      	add	r7, sp, #0
 8002b86:	6078      	str	r0, [r7, #4]
  UNUSED(hhcd);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_HCD_Disconnect_Callback could be implemented in the user file
   */
}
 8002b88:	bf00      	nop
 8002b8a:	370c      	adds	r7, #12
 8002b8c:	46bd      	mov	sp, r7
 8002b8e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002b92:	4770      	bx	lr

08002b94 <HAL_HCD_PortEnabled_Callback>:
  * @brief  Port Enabled  Event callback.
  * @param  hhcd HCD handle
  * @retval None
  */
__weak void HAL_HCD_PortEnabled_Callback(HCD_HandleTypeDef *hhcd)
{
 8002b94:	b480      	push	{r7}
 8002b96:	b083      	sub	sp, #12
 8002b98:	af00      	add	r7, sp, #0
 8002b9a:	6078      	str	r0, [r7, #4]
  UNUSED(hhcd);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_HCD_Disconnect_Callback could be implemented in the user file
   */
}
 8002b9c:	bf00      	nop
 8002b9e:	370c      	adds	r7, #12
 8002ba0:	46bd      	mov	sp, r7
 8002ba2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002ba6:	4770      	bx	lr

08002ba8 <HAL_HCD_PortDisabled_Callback>:
  * @brief  Port Disabled  Event callback.
  * @param  hhcd HCD handle
  * @retval None
  */
__weak void HAL_HCD_PortDisabled_Callback(HCD_HandleTypeDef *hhcd)
{
 8002ba8:	b480      	push	{r7}
 8002baa:	b083      	sub	sp, #12
 8002bac:	af00      	add	r7, sp, #0
 8002bae:	6078      	str	r0, [r7, #4]
  UNUSED(hhcd);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_HCD_Disconnect_Callback could be implemented in the user file
   */
}
 8002bb0:	bf00      	nop
 8002bb2:	370c      	adds	r7, #12
 8002bb4:	46bd      	mov	sp, r7
 8002bb6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002bba:	4770      	bx	lr

08002bbc <HAL_HCD_HC_NotifyURBChange_Callback>:
  *            URB_ERROR/
  *            URB_STALL/
  * @retval None
  */
__weak void HAL_HCD_HC_NotifyURBChange_Callback(HCD_HandleTypeDef *hhcd, uint8_t chnum, HCD_URBStateTypeDef urb_state)
{
 8002bbc:	b480      	push	{r7}
 8002bbe:	b083      	sub	sp, #12
 8002bc0:	af00      	add	r7, sp, #0
 8002bc2:	6078      	str	r0, [r7, #4]
 8002bc4:	460b      	mov	r3, r1
 8002bc6:	70fb      	strb	r3, [r7, #3]
 8002bc8:	4613      	mov	r3, r2
 8002bca:	70bb      	strb	r3, [r7, #2]
  UNUSED(urb_state);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_HCD_HC_NotifyURBChange_Callback could be implemented in the user file
   */
}
 8002bcc:	bf00      	nop
 8002bce:	370c      	adds	r7, #12
 8002bd0:	46bd      	mov	sp, r7
 8002bd2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002bd6:	4770      	bx	lr

08002bd8 <HCD_HC_IN_IRQHandler>:
  * @param  chnum Channel number.
  *         This parameter can be a value from 1 to 15
  * @retval none
  */
static void HCD_HC_IN_IRQHandler(HCD_HandleTypeDef *hhcd, uint8_t chnum)
{
 8002bd8:	b580      	push	{r7, lr}
 8002bda:	b086      	sub	sp, #24
 8002bdc:	af00      	add	r7, sp, #0
 8002bde:	6078      	str	r0, [r7, #4]
 8002be0:	460b      	mov	r3, r1
 8002be2:	70fb      	strb	r3, [r7, #3]
  USB_OTG_GlobalTypeDef *USBx = hhcd->Instance;
 8002be4:	687b      	ldr	r3, [r7, #4]
 8002be6:	681b      	ldr	r3, [r3, #0]
 8002be8:	617b      	str	r3, [r7, #20]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8002bea:	697b      	ldr	r3, [r7, #20]
 8002bec:	613b      	str	r3, [r7, #16]
  uint32_t ch_num = (uint32_t)chnum;
 8002bee:	78fb      	ldrb	r3, [r7, #3]
 8002bf0:	60fb      	str	r3, [r7, #12]

  uint32_t tmpreg;

  if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_AHBERR) == USB_OTG_HCINT_AHBERR)
 8002bf2:	68fb      	ldr	r3, [r7, #12]
 8002bf4:	015a      	lsls	r2, r3, #5
 8002bf6:	693b      	ldr	r3, [r7, #16]
 8002bf8:	4413      	add	r3, r2
 8002bfa:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002bfe:	689b      	ldr	r3, [r3, #8]
 8002c00:	f003 0304 	and.w	r3, r3, #4
 8002c04:	2b04      	cmp	r3, #4
 8002c06:	d11a      	bne.n	8002c3e <HCD_HC_IN_IRQHandler+0x66>
  {
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_AHBERR);
 8002c08:	68fb      	ldr	r3, [r7, #12]
 8002c0a:	015a      	lsls	r2, r3, #5
 8002c0c:	693b      	ldr	r3, [r7, #16]
 8002c0e:	4413      	add	r3, r2
 8002c10:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002c14:	461a      	mov	r2, r3
 8002c16:	2304      	movs	r3, #4
 8002c18:	6093      	str	r3, [r2, #8]
    hhcd->hc[ch_num].state = HC_XACTERR;
 8002c1a:	687a      	ldr	r2, [r7, #4]
 8002c1c:	68fb      	ldr	r3, [r7, #12]
 8002c1e:	212c      	movs	r1, #44	; 0x2c
 8002c20:	fb01 f303 	mul.w	r3, r1, r3
 8002c24:	4413      	add	r3, r2
 8002c26:	3361      	adds	r3, #97	; 0x61
 8002c28:	2206      	movs	r2, #6
 8002c2a:	701a      	strb	r2, [r3, #0]
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 8002c2c:	687b      	ldr	r3, [r7, #4]
 8002c2e:	681b      	ldr	r3, [r3, #0]
 8002c30:	68fa      	ldr	r2, [r7, #12]
 8002c32:	b2d2      	uxtb	r2, r2
 8002c34:	4611      	mov	r1, r2
 8002c36:	4618      	mov	r0, r3
 8002c38:	f004 f825 	bl	8006c86 <USB_HC_Halt>
 8002c3c:	e0af      	b.n	8002d9e <HCD_HC_IN_IRQHandler+0x1c6>
  }
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_BBERR) == USB_OTG_HCINT_BBERR)
 8002c3e:	68fb      	ldr	r3, [r7, #12]
 8002c40:	015a      	lsls	r2, r3, #5
 8002c42:	693b      	ldr	r3, [r7, #16]
 8002c44:	4413      	add	r3, r2
 8002c46:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002c4a:	689b      	ldr	r3, [r3, #8]
 8002c4c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002c50:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8002c54:	d11b      	bne.n	8002c8e <HCD_HC_IN_IRQHandler+0xb6>
  {
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_BBERR);
 8002c56:	68fb      	ldr	r3, [r7, #12]
 8002c58:	015a      	lsls	r2, r3, #5
 8002c5a:	693b      	ldr	r3, [r7, #16]
 8002c5c:	4413      	add	r3, r2
 8002c5e:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002c62:	461a      	mov	r2, r3
 8002c64:	f44f 7380 	mov.w	r3, #256	; 0x100
 8002c68:	6093      	str	r3, [r2, #8]
    hhcd->hc[ch_num].state = HC_BBLERR;
 8002c6a:	687a      	ldr	r2, [r7, #4]
 8002c6c:	68fb      	ldr	r3, [r7, #12]
 8002c6e:	212c      	movs	r1, #44	; 0x2c
 8002c70:	fb01 f303 	mul.w	r3, r1, r3
 8002c74:	4413      	add	r3, r2
 8002c76:	3361      	adds	r3, #97	; 0x61
 8002c78:	2207      	movs	r2, #7
 8002c7a:	701a      	strb	r2, [r3, #0]
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 8002c7c:	687b      	ldr	r3, [r7, #4]
 8002c7e:	681b      	ldr	r3, [r3, #0]
 8002c80:	68fa      	ldr	r2, [r7, #12]
 8002c82:	b2d2      	uxtb	r2, r2
 8002c84:	4611      	mov	r1, r2
 8002c86:	4618      	mov	r0, r3
 8002c88:	f003 fffd 	bl	8006c86 <USB_HC_Halt>
 8002c8c:	e087      	b.n	8002d9e <HCD_HC_IN_IRQHandler+0x1c6>
  }
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_ACK) == USB_OTG_HCINT_ACK)
 8002c8e:	68fb      	ldr	r3, [r7, #12]
 8002c90:	015a      	lsls	r2, r3, #5
 8002c92:	693b      	ldr	r3, [r7, #16]
 8002c94:	4413      	add	r3, r2
 8002c96:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002c9a:	689b      	ldr	r3, [r3, #8]
 8002c9c:	f003 0320 	and.w	r3, r3, #32
 8002ca0:	2b20      	cmp	r3, #32
 8002ca2:	d109      	bne.n	8002cb8 <HCD_HC_IN_IRQHandler+0xe0>
  {
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_ACK);
 8002ca4:	68fb      	ldr	r3, [r7, #12]
 8002ca6:	015a      	lsls	r2, r3, #5
 8002ca8:	693b      	ldr	r3, [r7, #16]
 8002caa:	4413      	add	r3, r2
 8002cac:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002cb0:	461a      	mov	r2, r3
 8002cb2:	2320      	movs	r3, #32
 8002cb4:	6093      	str	r3, [r2, #8]
 8002cb6:	e072      	b.n	8002d9e <HCD_HC_IN_IRQHandler+0x1c6>
  }
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_STALL) == USB_OTG_HCINT_STALL)
 8002cb8:	68fb      	ldr	r3, [r7, #12]
 8002cba:	015a      	lsls	r2, r3, #5
 8002cbc:	693b      	ldr	r3, [r7, #16]
 8002cbe:	4413      	add	r3, r2
 8002cc0:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002cc4:	689b      	ldr	r3, [r3, #8]
 8002cc6:	f003 0308 	and.w	r3, r3, #8
 8002cca:	2b08      	cmp	r3, #8
 8002ccc:	d11a      	bne.n	8002d04 <HCD_HC_IN_IRQHandler+0x12c>
  {
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_STALL);
 8002cce:	68fb      	ldr	r3, [r7, #12]
 8002cd0:	015a      	lsls	r2, r3, #5
 8002cd2:	693b      	ldr	r3, [r7, #16]
 8002cd4:	4413      	add	r3, r2
 8002cd6:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002cda:	461a      	mov	r2, r3
 8002cdc:	2308      	movs	r3, #8
 8002cde:	6093      	str	r3, [r2, #8]
    hhcd->hc[ch_num].state = HC_STALL;
 8002ce0:	687a      	ldr	r2, [r7, #4]
 8002ce2:	68fb      	ldr	r3, [r7, #12]
 8002ce4:	212c      	movs	r1, #44	; 0x2c
 8002ce6:	fb01 f303 	mul.w	r3, r1, r3
 8002cea:	4413      	add	r3, r2
 8002cec:	3361      	adds	r3, #97	; 0x61
 8002cee:	2205      	movs	r2, #5
 8002cf0:	701a      	strb	r2, [r3, #0]
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 8002cf2:	687b      	ldr	r3, [r7, #4]
 8002cf4:	681b      	ldr	r3, [r3, #0]
 8002cf6:	68fa      	ldr	r2, [r7, #12]
 8002cf8:	b2d2      	uxtb	r2, r2
 8002cfa:	4611      	mov	r1, r2
 8002cfc:	4618      	mov	r0, r3
 8002cfe:	f003 ffc2 	bl	8006c86 <USB_HC_Halt>
 8002d02:	e04c      	b.n	8002d9e <HCD_HC_IN_IRQHandler+0x1c6>
  }
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_DTERR) == USB_OTG_HCINT_DTERR)
 8002d04:	68fb      	ldr	r3, [r7, #12]
 8002d06:	015a      	lsls	r2, r3, #5
 8002d08:	693b      	ldr	r3, [r7, #16]
 8002d0a:	4413      	add	r3, r2
 8002d0c:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002d10:	689b      	ldr	r3, [r3, #8]
 8002d12:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8002d16:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8002d1a:	d11b      	bne.n	8002d54 <HCD_HC_IN_IRQHandler+0x17c>
  {
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_DTERR);
 8002d1c:	68fb      	ldr	r3, [r7, #12]
 8002d1e:	015a      	lsls	r2, r3, #5
 8002d20:	693b      	ldr	r3, [r7, #16]
 8002d22:	4413      	add	r3, r2
 8002d24:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002d28:	461a      	mov	r2, r3
 8002d2a:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8002d2e:	6093      	str	r3, [r2, #8]
    hhcd->hc[ch_num].state = HC_DATATGLERR;
 8002d30:	687a      	ldr	r2, [r7, #4]
 8002d32:	68fb      	ldr	r3, [r7, #12]
 8002d34:	212c      	movs	r1, #44	; 0x2c
 8002d36:	fb01 f303 	mul.w	r3, r1, r3
 8002d3a:	4413      	add	r3, r2
 8002d3c:	3361      	adds	r3, #97	; 0x61
 8002d3e:	2208      	movs	r2, #8
 8002d40:	701a      	strb	r2, [r3, #0]
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 8002d42:	687b      	ldr	r3, [r7, #4]
 8002d44:	681b      	ldr	r3, [r3, #0]
 8002d46:	68fa      	ldr	r2, [r7, #12]
 8002d48:	b2d2      	uxtb	r2, r2
 8002d4a:	4611      	mov	r1, r2
 8002d4c:	4618      	mov	r0, r3
 8002d4e:	f003 ff9a 	bl	8006c86 <USB_HC_Halt>
 8002d52:	e024      	b.n	8002d9e <HCD_HC_IN_IRQHandler+0x1c6>
  }
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_TXERR) == USB_OTG_HCINT_TXERR)
 8002d54:	68fb      	ldr	r3, [r7, #12]
 8002d56:	015a      	lsls	r2, r3, #5
 8002d58:	693b      	ldr	r3, [r7, #16]
 8002d5a:	4413      	add	r3, r2
 8002d5c:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002d60:	689b      	ldr	r3, [r3, #8]
 8002d62:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002d66:	2b80      	cmp	r3, #128	; 0x80
 8002d68:	d119      	bne.n	8002d9e <HCD_HC_IN_IRQHandler+0x1c6>
  {
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_TXERR);
 8002d6a:	68fb      	ldr	r3, [r7, #12]
 8002d6c:	015a      	lsls	r2, r3, #5
 8002d6e:	693b      	ldr	r3, [r7, #16]
 8002d70:	4413      	add	r3, r2
 8002d72:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002d76:	461a      	mov	r2, r3
 8002d78:	2380      	movs	r3, #128	; 0x80
 8002d7a:	6093      	str	r3, [r2, #8]
    hhcd->hc[ch_num].state = HC_XACTERR;
 8002d7c:	687a      	ldr	r2, [r7, #4]
 8002d7e:	68fb      	ldr	r3, [r7, #12]
 8002d80:	212c      	movs	r1, #44	; 0x2c
 8002d82:	fb01 f303 	mul.w	r3, r1, r3
 8002d86:	4413      	add	r3, r2
 8002d88:	3361      	adds	r3, #97	; 0x61
 8002d8a:	2206      	movs	r2, #6
 8002d8c:	701a      	strb	r2, [r3, #0]
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 8002d8e:	687b      	ldr	r3, [r7, #4]
 8002d90:	681b      	ldr	r3, [r3, #0]
 8002d92:	68fa      	ldr	r2, [r7, #12]
 8002d94:	b2d2      	uxtb	r2, r2
 8002d96:	4611      	mov	r1, r2
 8002d98:	4618      	mov	r0, r3
 8002d9a:	f003 ff74 	bl	8006c86 <USB_HC_Halt>
  else
  {
    /* ... */
  }

  if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_FRMOR) == USB_OTG_HCINT_FRMOR)
 8002d9e:	68fb      	ldr	r3, [r7, #12]
 8002da0:	015a      	lsls	r2, r3, #5
 8002da2:	693b      	ldr	r3, [r7, #16]
 8002da4:	4413      	add	r3, r2
 8002da6:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002daa:	689b      	ldr	r3, [r3, #8]
 8002dac:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8002db0:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8002db4:	d112      	bne.n	8002ddc <HCD_HC_IN_IRQHandler+0x204>
  {
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 8002db6:	687b      	ldr	r3, [r7, #4]
 8002db8:	681b      	ldr	r3, [r3, #0]
 8002dba:	68fa      	ldr	r2, [r7, #12]
 8002dbc:	b2d2      	uxtb	r2, r2
 8002dbe:	4611      	mov	r1, r2
 8002dc0:	4618      	mov	r0, r3
 8002dc2:	f003 ff60 	bl	8006c86 <USB_HC_Halt>
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_FRMOR);
 8002dc6:	68fb      	ldr	r3, [r7, #12]
 8002dc8:	015a      	lsls	r2, r3, #5
 8002dca:	693b      	ldr	r3, [r7, #16]
 8002dcc:	4413      	add	r3, r2
 8002dce:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002dd2:	461a      	mov	r2, r3
 8002dd4:	f44f 7300 	mov.w	r3, #512	; 0x200
 8002dd8:	6093      	str	r3, [r2, #8]
  }
  else
  {
    /* ... */
  }
}
 8002dda:	e24e      	b.n	800327a <HCD_HC_IN_IRQHandler+0x6a2>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_XFRC) == USB_OTG_HCINT_XFRC)
 8002ddc:	68fb      	ldr	r3, [r7, #12]
 8002dde:	015a      	lsls	r2, r3, #5
 8002de0:	693b      	ldr	r3, [r7, #16]
 8002de2:	4413      	add	r3, r2
 8002de4:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002de8:	689b      	ldr	r3, [r3, #8]
 8002dea:	f003 0301 	and.w	r3, r3, #1
 8002dee:	2b01      	cmp	r3, #1
 8002df0:	f040 80df 	bne.w	8002fb2 <HCD_HC_IN_IRQHandler+0x3da>
    if (hhcd->Init.dma_enable != 0U)
 8002df4:	687b      	ldr	r3, [r7, #4]
 8002df6:	691b      	ldr	r3, [r3, #16]
 8002df8:	2b00      	cmp	r3, #0
 8002dfa:	d019      	beq.n	8002e30 <HCD_HC_IN_IRQHandler+0x258>
      hhcd->hc[ch_num].xfer_count = hhcd->hc[ch_num].XferSize - \
 8002dfc:	687a      	ldr	r2, [r7, #4]
 8002dfe:	68fb      	ldr	r3, [r7, #12]
 8002e00:	212c      	movs	r1, #44	; 0x2c
 8002e02:	fb01 f303 	mul.w	r3, r1, r3
 8002e06:	4413      	add	r3, r2
 8002e08:	3348      	adds	r3, #72	; 0x48
 8002e0a:	681a      	ldr	r2, [r3, #0]
                                    (USBx_HC(ch_num)->HCTSIZ & USB_OTG_HCTSIZ_XFRSIZ);
 8002e0c:	68fb      	ldr	r3, [r7, #12]
 8002e0e:	0159      	lsls	r1, r3, #5
 8002e10:	693b      	ldr	r3, [r7, #16]
 8002e12:	440b      	add	r3, r1
 8002e14:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002e18:	691b      	ldr	r3, [r3, #16]
 8002e1a:	f3c3 0312 	ubfx	r3, r3, #0, #19
      hhcd->hc[ch_num].xfer_count = hhcd->hc[ch_num].XferSize - \
 8002e1e:	1ad2      	subs	r2, r2, r3
 8002e20:	6879      	ldr	r1, [r7, #4]
 8002e22:	68fb      	ldr	r3, [r7, #12]
 8002e24:	202c      	movs	r0, #44	; 0x2c
 8002e26:	fb00 f303 	mul.w	r3, r0, r3
 8002e2a:	440b      	add	r3, r1
 8002e2c:	3350      	adds	r3, #80	; 0x50
 8002e2e:	601a      	str	r2, [r3, #0]
    hhcd->hc[ch_num].state = HC_XFRC;
 8002e30:	687a      	ldr	r2, [r7, #4]
 8002e32:	68fb      	ldr	r3, [r7, #12]
 8002e34:	212c      	movs	r1, #44	; 0x2c
 8002e36:	fb01 f303 	mul.w	r3, r1, r3
 8002e3a:	4413      	add	r3, r2
 8002e3c:	3361      	adds	r3, #97	; 0x61
 8002e3e:	2201      	movs	r2, #1
 8002e40:	701a      	strb	r2, [r3, #0]
    hhcd->hc[ch_num].ErrCnt = 0U;
 8002e42:	687a      	ldr	r2, [r7, #4]
 8002e44:	68fb      	ldr	r3, [r7, #12]
 8002e46:	212c      	movs	r1, #44	; 0x2c
 8002e48:	fb01 f303 	mul.w	r3, r1, r3
 8002e4c:	4413      	add	r3, r2
 8002e4e:	335c      	adds	r3, #92	; 0x5c
 8002e50:	2200      	movs	r2, #0
 8002e52:	601a      	str	r2, [r3, #0]
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_XFRC);
 8002e54:	68fb      	ldr	r3, [r7, #12]
 8002e56:	015a      	lsls	r2, r3, #5
 8002e58:	693b      	ldr	r3, [r7, #16]
 8002e5a:	4413      	add	r3, r2
 8002e5c:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002e60:	461a      	mov	r2, r3
 8002e62:	2301      	movs	r3, #1
 8002e64:	6093      	str	r3, [r2, #8]
    if ((hhcd->hc[ch_num].ep_type == EP_TYPE_CTRL) ||
 8002e66:	687a      	ldr	r2, [r7, #4]
 8002e68:	68fb      	ldr	r3, [r7, #12]
 8002e6a:	212c      	movs	r1, #44	; 0x2c
 8002e6c:	fb01 f303 	mul.w	r3, r1, r3
 8002e70:	4413      	add	r3, r2
 8002e72:	333f      	adds	r3, #63	; 0x3f
 8002e74:	781b      	ldrb	r3, [r3, #0]
 8002e76:	2b00      	cmp	r3, #0
 8002e78:	d009      	beq.n	8002e8e <HCD_HC_IN_IRQHandler+0x2b6>
        (hhcd->hc[ch_num].ep_type == EP_TYPE_BULK))
 8002e7a:	687a      	ldr	r2, [r7, #4]
 8002e7c:	68fb      	ldr	r3, [r7, #12]
 8002e7e:	212c      	movs	r1, #44	; 0x2c
 8002e80:	fb01 f303 	mul.w	r3, r1, r3
 8002e84:	4413      	add	r3, r2
 8002e86:	333f      	adds	r3, #63	; 0x3f
 8002e88:	781b      	ldrb	r3, [r3, #0]
    if ((hhcd->hc[ch_num].ep_type == EP_TYPE_CTRL) ||
 8002e8a:	2b02      	cmp	r3, #2
 8002e8c:	d111      	bne.n	8002eb2 <HCD_HC_IN_IRQHandler+0x2da>
      (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 8002e8e:	687b      	ldr	r3, [r7, #4]
 8002e90:	681b      	ldr	r3, [r3, #0]
 8002e92:	68fa      	ldr	r2, [r7, #12]
 8002e94:	b2d2      	uxtb	r2, r2
 8002e96:	4611      	mov	r1, r2
 8002e98:	4618      	mov	r0, r3
 8002e9a:	f003 fef4 	bl	8006c86 <USB_HC_Halt>
      __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_NAK);
 8002e9e:	68fb      	ldr	r3, [r7, #12]
 8002ea0:	015a      	lsls	r2, r3, #5
 8002ea2:	693b      	ldr	r3, [r7, #16]
 8002ea4:	4413      	add	r3, r2
 8002ea6:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002eaa:	461a      	mov	r2, r3
 8002eac:	2310      	movs	r3, #16
 8002eae:	6093      	str	r3, [r2, #8]
 8002eb0:	e03a      	b.n	8002f28 <HCD_HC_IN_IRQHandler+0x350>
    else if ((hhcd->hc[ch_num].ep_type == EP_TYPE_INTR) ||
 8002eb2:	687a      	ldr	r2, [r7, #4]
 8002eb4:	68fb      	ldr	r3, [r7, #12]
 8002eb6:	212c      	movs	r1, #44	; 0x2c
 8002eb8:	fb01 f303 	mul.w	r3, r1, r3
 8002ebc:	4413      	add	r3, r2
 8002ebe:	333f      	adds	r3, #63	; 0x3f
 8002ec0:	781b      	ldrb	r3, [r3, #0]
 8002ec2:	2b03      	cmp	r3, #3
 8002ec4:	d009      	beq.n	8002eda <HCD_HC_IN_IRQHandler+0x302>
             (hhcd->hc[ch_num].ep_type == EP_TYPE_ISOC))
 8002ec6:	687a      	ldr	r2, [r7, #4]
 8002ec8:	68fb      	ldr	r3, [r7, #12]
 8002eca:	212c      	movs	r1, #44	; 0x2c
 8002ecc:	fb01 f303 	mul.w	r3, r1, r3
 8002ed0:	4413      	add	r3, r2
 8002ed2:	333f      	adds	r3, #63	; 0x3f
 8002ed4:	781b      	ldrb	r3, [r3, #0]
    else if ((hhcd->hc[ch_num].ep_type == EP_TYPE_INTR) ||
 8002ed6:	2b01      	cmp	r3, #1
 8002ed8:	d126      	bne.n	8002f28 <HCD_HC_IN_IRQHandler+0x350>
      USBx_HC(ch_num)->HCCHAR |= USB_OTG_HCCHAR_ODDFRM;
 8002eda:	68fb      	ldr	r3, [r7, #12]
 8002edc:	015a      	lsls	r2, r3, #5
 8002ede:	693b      	ldr	r3, [r7, #16]
 8002ee0:	4413      	add	r3, r2
 8002ee2:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002ee6:	681b      	ldr	r3, [r3, #0]
 8002ee8:	68fa      	ldr	r2, [r7, #12]
 8002eea:	0151      	lsls	r1, r2, #5
 8002eec:	693a      	ldr	r2, [r7, #16]
 8002eee:	440a      	add	r2, r1
 8002ef0:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8002ef4:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 8002ef8:	6013      	str	r3, [r2, #0]
      hhcd->hc[ch_num].urb_state = URB_DONE;
 8002efa:	687a      	ldr	r2, [r7, #4]
 8002efc:	68fb      	ldr	r3, [r7, #12]
 8002efe:	212c      	movs	r1, #44	; 0x2c
 8002f00:	fb01 f303 	mul.w	r3, r1, r3
 8002f04:	4413      	add	r3, r2
 8002f06:	3360      	adds	r3, #96	; 0x60
 8002f08:	2201      	movs	r2, #1
 8002f0a:	701a      	strb	r2, [r3, #0]
      HAL_HCD_HC_NotifyURBChange_Callback(hhcd, (uint8_t)ch_num, hhcd->hc[ch_num].urb_state);
 8002f0c:	68fb      	ldr	r3, [r7, #12]
 8002f0e:	b2d9      	uxtb	r1, r3
 8002f10:	687a      	ldr	r2, [r7, #4]
 8002f12:	68fb      	ldr	r3, [r7, #12]
 8002f14:	202c      	movs	r0, #44	; 0x2c
 8002f16:	fb00 f303 	mul.w	r3, r0, r3
 8002f1a:	4413      	add	r3, r2
 8002f1c:	3360      	adds	r3, #96	; 0x60
 8002f1e:	781b      	ldrb	r3, [r3, #0]
 8002f20:	461a      	mov	r2, r3
 8002f22:	6878      	ldr	r0, [r7, #4]
 8002f24:	f7ff fe4a 	bl	8002bbc <HAL_HCD_HC_NotifyURBChange_Callback>
    if (hhcd->Init.dma_enable == 1U)
 8002f28:	687b      	ldr	r3, [r7, #4]
 8002f2a:	691b      	ldr	r3, [r3, #16]
 8002f2c:	2b01      	cmp	r3, #1
 8002f2e:	d12b      	bne.n	8002f88 <HCD_HC_IN_IRQHandler+0x3b0>
      if (((hhcd->hc[ch_num].XferSize / hhcd->hc[ch_num].max_packet) & 1U) != 0U)
 8002f30:	687a      	ldr	r2, [r7, #4]
 8002f32:	68fb      	ldr	r3, [r7, #12]
 8002f34:	212c      	movs	r1, #44	; 0x2c
 8002f36:	fb01 f303 	mul.w	r3, r1, r3
 8002f3a:	4413      	add	r3, r2
 8002f3c:	3348      	adds	r3, #72	; 0x48
 8002f3e:	681b      	ldr	r3, [r3, #0]
 8002f40:	6879      	ldr	r1, [r7, #4]
 8002f42:	68fa      	ldr	r2, [r7, #12]
 8002f44:	202c      	movs	r0, #44	; 0x2c
 8002f46:	fb00 f202 	mul.w	r2, r0, r2
 8002f4a:	440a      	add	r2, r1
 8002f4c:	3240      	adds	r2, #64	; 0x40
 8002f4e:	8812      	ldrh	r2, [r2, #0]
 8002f50:	fbb3 f3f2 	udiv	r3, r3, r2
 8002f54:	f003 0301 	and.w	r3, r3, #1
 8002f58:	2b00      	cmp	r3, #0
 8002f5a:	f000 818e 	beq.w	800327a <HCD_HC_IN_IRQHandler+0x6a2>
        hhcd->hc[ch_num].toggle_in ^= 1U;
 8002f5e:	687a      	ldr	r2, [r7, #4]
 8002f60:	68fb      	ldr	r3, [r7, #12]
 8002f62:	212c      	movs	r1, #44	; 0x2c
 8002f64:	fb01 f303 	mul.w	r3, r1, r3
 8002f68:	4413      	add	r3, r2
 8002f6a:	3354      	adds	r3, #84	; 0x54
 8002f6c:	781b      	ldrb	r3, [r3, #0]
 8002f6e:	f083 0301 	eor.w	r3, r3, #1
 8002f72:	b2d8      	uxtb	r0, r3
 8002f74:	687a      	ldr	r2, [r7, #4]
 8002f76:	68fb      	ldr	r3, [r7, #12]
 8002f78:	212c      	movs	r1, #44	; 0x2c
 8002f7a:	fb01 f303 	mul.w	r3, r1, r3
 8002f7e:	4413      	add	r3, r2
 8002f80:	3354      	adds	r3, #84	; 0x54
 8002f82:	4602      	mov	r2, r0
 8002f84:	701a      	strb	r2, [r3, #0]
}
 8002f86:	e178      	b.n	800327a <HCD_HC_IN_IRQHandler+0x6a2>
      hhcd->hc[ch_num].toggle_in ^= 1U;
 8002f88:	687a      	ldr	r2, [r7, #4]
 8002f8a:	68fb      	ldr	r3, [r7, #12]
 8002f8c:	212c      	movs	r1, #44	; 0x2c
 8002f8e:	fb01 f303 	mul.w	r3, r1, r3
 8002f92:	4413      	add	r3, r2
 8002f94:	3354      	adds	r3, #84	; 0x54
 8002f96:	781b      	ldrb	r3, [r3, #0]
 8002f98:	f083 0301 	eor.w	r3, r3, #1
 8002f9c:	b2d8      	uxtb	r0, r3
 8002f9e:	687a      	ldr	r2, [r7, #4]
 8002fa0:	68fb      	ldr	r3, [r7, #12]
 8002fa2:	212c      	movs	r1, #44	; 0x2c
 8002fa4:	fb01 f303 	mul.w	r3, r1, r3
 8002fa8:	4413      	add	r3, r2
 8002faa:	3354      	adds	r3, #84	; 0x54
 8002fac:	4602      	mov	r2, r0
 8002fae:	701a      	strb	r2, [r3, #0]
}
 8002fb0:	e163      	b.n	800327a <HCD_HC_IN_IRQHandler+0x6a2>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_CHH) == USB_OTG_HCINT_CHH)
 8002fb2:	68fb      	ldr	r3, [r7, #12]
 8002fb4:	015a      	lsls	r2, r3, #5
 8002fb6:	693b      	ldr	r3, [r7, #16]
 8002fb8:	4413      	add	r3, r2
 8002fba:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002fbe:	689b      	ldr	r3, [r3, #8]
 8002fc0:	f003 0302 	and.w	r3, r3, #2
 8002fc4:	2b02      	cmp	r3, #2
 8002fc6:	f040 80f6 	bne.w	80031b6 <HCD_HC_IN_IRQHandler+0x5de>
    if (hhcd->hc[ch_num].state == HC_XFRC)
 8002fca:	687a      	ldr	r2, [r7, #4]
 8002fcc:	68fb      	ldr	r3, [r7, #12]
 8002fce:	212c      	movs	r1, #44	; 0x2c
 8002fd0:	fb01 f303 	mul.w	r3, r1, r3
 8002fd4:	4413      	add	r3, r2
 8002fd6:	3361      	adds	r3, #97	; 0x61
 8002fd8:	781b      	ldrb	r3, [r3, #0]
 8002fda:	2b01      	cmp	r3, #1
 8002fdc:	d109      	bne.n	8002ff2 <HCD_HC_IN_IRQHandler+0x41a>
      hhcd->hc[ch_num].urb_state = URB_DONE;
 8002fde:	687a      	ldr	r2, [r7, #4]
 8002fe0:	68fb      	ldr	r3, [r7, #12]
 8002fe2:	212c      	movs	r1, #44	; 0x2c
 8002fe4:	fb01 f303 	mul.w	r3, r1, r3
 8002fe8:	4413      	add	r3, r2
 8002fea:	3360      	adds	r3, #96	; 0x60
 8002fec:	2201      	movs	r2, #1
 8002fee:	701a      	strb	r2, [r3, #0]
 8002ff0:	e0c9      	b.n	8003186 <HCD_HC_IN_IRQHandler+0x5ae>
    else if (hhcd->hc[ch_num].state == HC_STALL)
 8002ff2:	687a      	ldr	r2, [r7, #4]
 8002ff4:	68fb      	ldr	r3, [r7, #12]
 8002ff6:	212c      	movs	r1, #44	; 0x2c
 8002ff8:	fb01 f303 	mul.w	r3, r1, r3
 8002ffc:	4413      	add	r3, r2
 8002ffe:	3361      	adds	r3, #97	; 0x61
 8003000:	781b      	ldrb	r3, [r3, #0]
 8003002:	2b05      	cmp	r3, #5
 8003004:	d109      	bne.n	800301a <HCD_HC_IN_IRQHandler+0x442>
      hhcd->hc[ch_num].urb_state = URB_STALL;
 8003006:	687a      	ldr	r2, [r7, #4]
 8003008:	68fb      	ldr	r3, [r7, #12]
 800300a:	212c      	movs	r1, #44	; 0x2c
 800300c:	fb01 f303 	mul.w	r3, r1, r3
 8003010:	4413      	add	r3, r2
 8003012:	3360      	adds	r3, #96	; 0x60
 8003014:	2205      	movs	r2, #5
 8003016:	701a      	strb	r2, [r3, #0]
 8003018:	e0b5      	b.n	8003186 <HCD_HC_IN_IRQHandler+0x5ae>
    else if ((hhcd->hc[ch_num].state == HC_XACTERR) ||
 800301a:	687a      	ldr	r2, [r7, #4]
 800301c:	68fb      	ldr	r3, [r7, #12]
 800301e:	212c      	movs	r1, #44	; 0x2c
 8003020:	fb01 f303 	mul.w	r3, r1, r3
 8003024:	4413      	add	r3, r2
 8003026:	3361      	adds	r3, #97	; 0x61
 8003028:	781b      	ldrb	r3, [r3, #0]
 800302a:	2b06      	cmp	r3, #6
 800302c:	d009      	beq.n	8003042 <HCD_HC_IN_IRQHandler+0x46a>
             (hhcd->hc[ch_num].state == HC_DATATGLERR))
 800302e:	687a      	ldr	r2, [r7, #4]
 8003030:	68fb      	ldr	r3, [r7, #12]
 8003032:	212c      	movs	r1, #44	; 0x2c
 8003034:	fb01 f303 	mul.w	r3, r1, r3
 8003038:	4413      	add	r3, r2
 800303a:	3361      	adds	r3, #97	; 0x61
 800303c:	781b      	ldrb	r3, [r3, #0]
    else if ((hhcd->hc[ch_num].state == HC_XACTERR) ||
 800303e:	2b08      	cmp	r3, #8
 8003040:	d150      	bne.n	80030e4 <HCD_HC_IN_IRQHandler+0x50c>
      hhcd->hc[ch_num].ErrCnt++;
 8003042:	687a      	ldr	r2, [r7, #4]
 8003044:	68fb      	ldr	r3, [r7, #12]
 8003046:	212c      	movs	r1, #44	; 0x2c
 8003048:	fb01 f303 	mul.w	r3, r1, r3
 800304c:	4413      	add	r3, r2
 800304e:	335c      	adds	r3, #92	; 0x5c
 8003050:	681b      	ldr	r3, [r3, #0]
 8003052:	1c5a      	adds	r2, r3, #1
 8003054:	6879      	ldr	r1, [r7, #4]
 8003056:	68fb      	ldr	r3, [r7, #12]
 8003058:	202c      	movs	r0, #44	; 0x2c
 800305a:	fb00 f303 	mul.w	r3, r0, r3
 800305e:	440b      	add	r3, r1
 8003060:	335c      	adds	r3, #92	; 0x5c
 8003062:	601a      	str	r2, [r3, #0]
      if (hhcd->hc[ch_num].ErrCnt > 2U)
 8003064:	687a      	ldr	r2, [r7, #4]
 8003066:	68fb      	ldr	r3, [r7, #12]
 8003068:	212c      	movs	r1, #44	; 0x2c
 800306a:	fb01 f303 	mul.w	r3, r1, r3
 800306e:	4413      	add	r3, r2
 8003070:	335c      	adds	r3, #92	; 0x5c
 8003072:	681b      	ldr	r3, [r3, #0]
 8003074:	2b02      	cmp	r3, #2
 8003076:	d912      	bls.n	800309e <HCD_HC_IN_IRQHandler+0x4c6>
        hhcd->hc[ch_num].ErrCnt = 0U;
 8003078:	687a      	ldr	r2, [r7, #4]
 800307a:	68fb      	ldr	r3, [r7, #12]
 800307c:	212c      	movs	r1, #44	; 0x2c
 800307e:	fb01 f303 	mul.w	r3, r1, r3
 8003082:	4413      	add	r3, r2
 8003084:	335c      	adds	r3, #92	; 0x5c
 8003086:	2200      	movs	r2, #0
 8003088:	601a      	str	r2, [r3, #0]
        hhcd->hc[ch_num].urb_state = URB_ERROR;
 800308a:	687a      	ldr	r2, [r7, #4]
 800308c:	68fb      	ldr	r3, [r7, #12]
 800308e:	212c      	movs	r1, #44	; 0x2c
 8003090:	fb01 f303 	mul.w	r3, r1, r3
 8003094:	4413      	add	r3, r2
 8003096:	3360      	adds	r3, #96	; 0x60
 8003098:	2204      	movs	r2, #4
 800309a:	701a      	strb	r2, [r3, #0]
      if (hhcd->hc[ch_num].ErrCnt > 2U)
 800309c:	e073      	b.n	8003186 <HCD_HC_IN_IRQHandler+0x5ae>
        hhcd->hc[ch_num].urb_state = URB_NOTREADY;
 800309e:	687a      	ldr	r2, [r7, #4]
 80030a0:	68fb      	ldr	r3, [r7, #12]
 80030a2:	212c      	movs	r1, #44	; 0x2c
 80030a4:	fb01 f303 	mul.w	r3, r1, r3
 80030a8:	4413      	add	r3, r2
 80030aa:	3360      	adds	r3, #96	; 0x60
 80030ac:	2202      	movs	r2, #2
 80030ae:	701a      	strb	r2, [r3, #0]
        tmpreg = USBx_HC(ch_num)->HCCHAR;
 80030b0:	68fb      	ldr	r3, [r7, #12]
 80030b2:	015a      	lsls	r2, r3, #5
 80030b4:	693b      	ldr	r3, [r7, #16]
 80030b6:	4413      	add	r3, r2
 80030b8:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80030bc:	681b      	ldr	r3, [r3, #0]
 80030be:	60bb      	str	r3, [r7, #8]
        tmpreg &= ~USB_OTG_HCCHAR_CHDIS;
 80030c0:	68bb      	ldr	r3, [r7, #8]
 80030c2:	f023 4380 	bic.w	r3, r3, #1073741824	; 0x40000000
 80030c6:	60bb      	str	r3, [r7, #8]
        tmpreg |= USB_OTG_HCCHAR_CHENA;
 80030c8:	68bb      	ldr	r3, [r7, #8]
 80030ca:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 80030ce:	60bb      	str	r3, [r7, #8]
        USBx_HC(ch_num)->HCCHAR = tmpreg;
 80030d0:	68fb      	ldr	r3, [r7, #12]
 80030d2:	015a      	lsls	r2, r3, #5
 80030d4:	693b      	ldr	r3, [r7, #16]
 80030d6:	4413      	add	r3, r2
 80030d8:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80030dc:	461a      	mov	r2, r3
 80030de:	68bb      	ldr	r3, [r7, #8]
 80030e0:	6013      	str	r3, [r2, #0]
      if (hhcd->hc[ch_num].ErrCnt > 2U)
 80030e2:	e050      	b.n	8003186 <HCD_HC_IN_IRQHandler+0x5ae>
    else if (hhcd->hc[ch_num].state == HC_NAK)
 80030e4:	687a      	ldr	r2, [r7, #4]
 80030e6:	68fb      	ldr	r3, [r7, #12]
 80030e8:	212c      	movs	r1, #44	; 0x2c
 80030ea:	fb01 f303 	mul.w	r3, r1, r3
 80030ee:	4413      	add	r3, r2
 80030f0:	3361      	adds	r3, #97	; 0x61
 80030f2:	781b      	ldrb	r3, [r3, #0]
 80030f4:	2b03      	cmp	r3, #3
 80030f6:	d122      	bne.n	800313e <HCD_HC_IN_IRQHandler+0x566>
      hhcd->hc[ch_num].urb_state  = URB_NOTREADY;
 80030f8:	687a      	ldr	r2, [r7, #4]
 80030fa:	68fb      	ldr	r3, [r7, #12]
 80030fc:	212c      	movs	r1, #44	; 0x2c
 80030fe:	fb01 f303 	mul.w	r3, r1, r3
 8003102:	4413      	add	r3, r2
 8003104:	3360      	adds	r3, #96	; 0x60
 8003106:	2202      	movs	r2, #2
 8003108:	701a      	strb	r2, [r3, #0]
      tmpreg = USBx_HC(ch_num)->HCCHAR;
 800310a:	68fb      	ldr	r3, [r7, #12]
 800310c:	015a      	lsls	r2, r3, #5
 800310e:	693b      	ldr	r3, [r7, #16]
 8003110:	4413      	add	r3, r2
 8003112:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8003116:	681b      	ldr	r3, [r3, #0]
 8003118:	60bb      	str	r3, [r7, #8]
      tmpreg &= ~USB_OTG_HCCHAR_CHDIS;
 800311a:	68bb      	ldr	r3, [r7, #8]
 800311c:	f023 4380 	bic.w	r3, r3, #1073741824	; 0x40000000
 8003120:	60bb      	str	r3, [r7, #8]
      tmpreg |= USB_OTG_HCCHAR_CHENA;
 8003122:	68bb      	ldr	r3, [r7, #8]
 8003124:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8003128:	60bb      	str	r3, [r7, #8]
      USBx_HC(ch_num)->HCCHAR = tmpreg;
 800312a:	68fb      	ldr	r3, [r7, #12]
 800312c:	015a      	lsls	r2, r3, #5
 800312e:	693b      	ldr	r3, [r7, #16]
 8003130:	4413      	add	r3, r2
 8003132:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8003136:	461a      	mov	r2, r3
 8003138:	68bb      	ldr	r3, [r7, #8]
 800313a:	6013      	str	r3, [r2, #0]
 800313c:	e023      	b.n	8003186 <HCD_HC_IN_IRQHandler+0x5ae>
    else if (hhcd->hc[ch_num].state == HC_BBLERR)
 800313e:	687a      	ldr	r2, [r7, #4]
 8003140:	68fb      	ldr	r3, [r7, #12]
 8003142:	212c      	movs	r1, #44	; 0x2c
 8003144:	fb01 f303 	mul.w	r3, r1, r3
 8003148:	4413      	add	r3, r2
 800314a:	3361      	adds	r3, #97	; 0x61
 800314c:	781b      	ldrb	r3, [r3, #0]
 800314e:	2b07      	cmp	r3, #7
 8003150:	d119      	bne.n	8003186 <HCD_HC_IN_IRQHandler+0x5ae>
      hhcd->hc[ch_num].ErrCnt++;
 8003152:	687a      	ldr	r2, [r7, #4]
 8003154:	68fb      	ldr	r3, [r7, #12]
 8003156:	212c      	movs	r1, #44	; 0x2c
 8003158:	fb01 f303 	mul.w	r3, r1, r3
 800315c:	4413      	add	r3, r2
 800315e:	335c      	adds	r3, #92	; 0x5c
 8003160:	681b      	ldr	r3, [r3, #0]
 8003162:	1c5a      	adds	r2, r3, #1
 8003164:	6879      	ldr	r1, [r7, #4]
 8003166:	68fb      	ldr	r3, [r7, #12]
 8003168:	202c      	movs	r0, #44	; 0x2c
 800316a:	fb00 f303 	mul.w	r3, r0, r3
 800316e:	440b      	add	r3, r1
 8003170:	335c      	adds	r3, #92	; 0x5c
 8003172:	601a      	str	r2, [r3, #0]
      hhcd->hc[ch_num].urb_state = URB_ERROR;
 8003174:	687a      	ldr	r2, [r7, #4]
 8003176:	68fb      	ldr	r3, [r7, #12]
 8003178:	212c      	movs	r1, #44	; 0x2c
 800317a:	fb01 f303 	mul.w	r3, r1, r3
 800317e:	4413      	add	r3, r2
 8003180:	3360      	adds	r3, #96	; 0x60
 8003182:	2204      	movs	r2, #4
 8003184:	701a      	strb	r2, [r3, #0]
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_CHH);
 8003186:	68fb      	ldr	r3, [r7, #12]
 8003188:	015a      	lsls	r2, r3, #5
 800318a:	693b      	ldr	r3, [r7, #16]
 800318c:	4413      	add	r3, r2
 800318e:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8003192:	461a      	mov	r2, r3
 8003194:	2302      	movs	r3, #2
 8003196:	6093      	str	r3, [r2, #8]
    HAL_HCD_HC_NotifyURBChange_Callback(hhcd, (uint8_t)ch_num, hhcd->hc[ch_num].urb_state);
 8003198:	68fb      	ldr	r3, [r7, #12]
 800319a:	b2d9      	uxtb	r1, r3
 800319c:	687a      	ldr	r2, [r7, #4]
 800319e:	68fb      	ldr	r3, [r7, #12]
 80031a0:	202c      	movs	r0, #44	; 0x2c
 80031a2:	fb00 f303 	mul.w	r3, r0, r3
 80031a6:	4413      	add	r3, r2
 80031a8:	3360      	adds	r3, #96	; 0x60
 80031aa:	781b      	ldrb	r3, [r3, #0]
 80031ac:	461a      	mov	r2, r3
 80031ae:	6878      	ldr	r0, [r7, #4]
 80031b0:	f7ff fd04 	bl	8002bbc <HAL_HCD_HC_NotifyURBChange_Callback>
}
 80031b4:	e061      	b.n	800327a <HCD_HC_IN_IRQHandler+0x6a2>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_NAK) == USB_OTG_HCINT_NAK)
 80031b6:	68fb      	ldr	r3, [r7, #12]
 80031b8:	015a      	lsls	r2, r3, #5
 80031ba:	693b      	ldr	r3, [r7, #16]
 80031bc:	4413      	add	r3, r2
 80031be:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80031c2:	689b      	ldr	r3, [r3, #8]
 80031c4:	f003 0310 	and.w	r3, r3, #16
 80031c8:	2b10      	cmp	r3, #16
 80031ca:	d156      	bne.n	800327a <HCD_HC_IN_IRQHandler+0x6a2>
    if (hhcd->hc[ch_num].ep_type == EP_TYPE_INTR)
 80031cc:	687a      	ldr	r2, [r7, #4]
 80031ce:	68fb      	ldr	r3, [r7, #12]
 80031d0:	212c      	movs	r1, #44	; 0x2c
 80031d2:	fb01 f303 	mul.w	r3, r1, r3
 80031d6:	4413      	add	r3, r2
 80031d8:	333f      	adds	r3, #63	; 0x3f
 80031da:	781b      	ldrb	r3, [r3, #0]
 80031dc:	2b03      	cmp	r3, #3
 80031de:	d111      	bne.n	8003204 <HCD_HC_IN_IRQHandler+0x62c>
      hhcd->hc[ch_num].ErrCnt = 0U;
 80031e0:	687a      	ldr	r2, [r7, #4]
 80031e2:	68fb      	ldr	r3, [r7, #12]
 80031e4:	212c      	movs	r1, #44	; 0x2c
 80031e6:	fb01 f303 	mul.w	r3, r1, r3
 80031ea:	4413      	add	r3, r2
 80031ec:	335c      	adds	r3, #92	; 0x5c
 80031ee:	2200      	movs	r2, #0
 80031f0:	601a      	str	r2, [r3, #0]
      (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 80031f2:	687b      	ldr	r3, [r7, #4]
 80031f4:	681b      	ldr	r3, [r3, #0]
 80031f6:	68fa      	ldr	r2, [r7, #12]
 80031f8:	b2d2      	uxtb	r2, r2
 80031fa:	4611      	mov	r1, r2
 80031fc:	4618      	mov	r0, r3
 80031fe:	f003 fd42 	bl	8006c86 <USB_HC_Halt>
 8003202:	e031      	b.n	8003268 <HCD_HC_IN_IRQHandler+0x690>
    else if ((hhcd->hc[ch_num].ep_type == EP_TYPE_CTRL) ||
 8003204:	687a      	ldr	r2, [r7, #4]
 8003206:	68fb      	ldr	r3, [r7, #12]
 8003208:	212c      	movs	r1, #44	; 0x2c
 800320a:	fb01 f303 	mul.w	r3, r1, r3
 800320e:	4413      	add	r3, r2
 8003210:	333f      	adds	r3, #63	; 0x3f
 8003212:	781b      	ldrb	r3, [r3, #0]
 8003214:	2b00      	cmp	r3, #0
 8003216:	d009      	beq.n	800322c <HCD_HC_IN_IRQHandler+0x654>
             (hhcd->hc[ch_num].ep_type == EP_TYPE_BULK))
 8003218:	687a      	ldr	r2, [r7, #4]
 800321a:	68fb      	ldr	r3, [r7, #12]
 800321c:	212c      	movs	r1, #44	; 0x2c
 800321e:	fb01 f303 	mul.w	r3, r1, r3
 8003222:	4413      	add	r3, r2
 8003224:	333f      	adds	r3, #63	; 0x3f
 8003226:	781b      	ldrb	r3, [r3, #0]
    else if ((hhcd->hc[ch_num].ep_type == EP_TYPE_CTRL) ||
 8003228:	2b02      	cmp	r3, #2
 800322a:	d11d      	bne.n	8003268 <HCD_HC_IN_IRQHandler+0x690>
      hhcd->hc[ch_num].ErrCnt = 0U;
 800322c:	687a      	ldr	r2, [r7, #4]
 800322e:	68fb      	ldr	r3, [r7, #12]
 8003230:	212c      	movs	r1, #44	; 0x2c
 8003232:	fb01 f303 	mul.w	r3, r1, r3
 8003236:	4413      	add	r3, r2
 8003238:	335c      	adds	r3, #92	; 0x5c
 800323a:	2200      	movs	r2, #0
 800323c:	601a      	str	r2, [r3, #0]
      if (hhcd->Init.dma_enable == 0U)
 800323e:	687b      	ldr	r3, [r7, #4]
 8003240:	691b      	ldr	r3, [r3, #16]
 8003242:	2b00      	cmp	r3, #0
 8003244:	d110      	bne.n	8003268 <HCD_HC_IN_IRQHandler+0x690>
        hhcd->hc[ch_num].state = HC_NAK;
 8003246:	687a      	ldr	r2, [r7, #4]
 8003248:	68fb      	ldr	r3, [r7, #12]
 800324a:	212c      	movs	r1, #44	; 0x2c
 800324c:	fb01 f303 	mul.w	r3, r1, r3
 8003250:	4413      	add	r3, r2
 8003252:	3361      	adds	r3, #97	; 0x61
 8003254:	2203      	movs	r2, #3
 8003256:	701a      	strb	r2, [r3, #0]
        (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 8003258:	687b      	ldr	r3, [r7, #4]
 800325a:	681b      	ldr	r3, [r3, #0]
 800325c:	68fa      	ldr	r2, [r7, #12]
 800325e:	b2d2      	uxtb	r2, r2
 8003260:	4611      	mov	r1, r2
 8003262:	4618      	mov	r0, r3
 8003264:	f003 fd0f 	bl	8006c86 <USB_HC_Halt>
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_NAK);
 8003268:	68fb      	ldr	r3, [r7, #12]
 800326a:	015a      	lsls	r2, r3, #5
 800326c:	693b      	ldr	r3, [r7, #16]
 800326e:	4413      	add	r3, r2
 8003270:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8003274:	461a      	mov	r2, r3
 8003276:	2310      	movs	r3, #16
 8003278:	6093      	str	r3, [r2, #8]
}
 800327a:	bf00      	nop
 800327c:	3718      	adds	r7, #24
 800327e:	46bd      	mov	sp, r7
 8003280:	bd80      	pop	{r7, pc}

08003282 <HCD_HC_OUT_IRQHandler>:
  * @param  chnum Channel number.
  *         This parameter can be a value from 1 to 15
  * @retval none
  */
static void HCD_HC_OUT_IRQHandler(HCD_HandleTypeDef *hhcd, uint8_t chnum)
{
 8003282:	b580      	push	{r7, lr}
 8003284:	b088      	sub	sp, #32
 8003286:	af00      	add	r7, sp, #0
 8003288:	6078      	str	r0, [r7, #4]
 800328a:	460b      	mov	r3, r1
 800328c:	70fb      	strb	r3, [r7, #3]
  USB_OTG_GlobalTypeDef *USBx = hhcd->Instance;
 800328e:	687b      	ldr	r3, [r7, #4]
 8003290:	681b      	ldr	r3, [r3, #0]
 8003292:	61fb      	str	r3, [r7, #28]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8003294:	69fb      	ldr	r3, [r7, #28]
 8003296:	61bb      	str	r3, [r7, #24]
  uint32_t ch_num = (uint32_t)chnum;
 8003298:	78fb      	ldrb	r3, [r7, #3]
 800329a:	617b      	str	r3, [r7, #20]
  uint32_t tmpreg;
  uint32_t num_packets;

  if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_AHBERR) == USB_OTG_HCINT_AHBERR)
 800329c:	697b      	ldr	r3, [r7, #20]
 800329e:	015a      	lsls	r2, r3, #5
 80032a0:	69bb      	ldr	r3, [r7, #24]
 80032a2:	4413      	add	r3, r2
 80032a4:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80032a8:	689b      	ldr	r3, [r3, #8]
 80032aa:	f003 0304 	and.w	r3, r3, #4
 80032ae:	2b04      	cmp	r3, #4
 80032b0:	d11a      	bne.n	80032e8 <HCD_HC_OUT_IRQHandler+0x66>
  {
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_AHBERR);
 80032b2:	697b      	ldr	r3, [r7, #20]
 80032b4:	015a      	lsls	r2, r3, #5
 80032b6:	69bb      	ldr	r3, [r7, #24]
 80032b8:	4413      	add	r3, r2
 80032ba:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80032be:	461a      	mov	r2, r3
 80032c0:	2304      	movs	r3, #4
 80032c2:	6093      	str	r3, [r2, #8]
    hhcd->hc[ch_num].state = HC_XACTERR;
 80032c4:	687a      	ldr	r2, [r7, #4]
 80032c6:	697b      	ldr	r3, [r7, #20]
 80032c8:	212c      	movs	r1, #44	; 0x2c
 80032ca:	fb01 f303 	mul.w	r3, r1, r3
 80032ce:	4413      	add	r3, r2
 80032d0:	3361      	adds	r3, #97	; 0x61
 80032d2:	2206      	movs	r2, #6
 80032d4:	701a      	strb	r2, [r3, #0]
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 80032d6:	687b      	ldr	r3, [r7, #4]
 80032d8:	681b      	ldr	r3, [r3, #0]
 80032da:	697a      	ldr	r2, [r7, #20]
 80032dc:	b2d2      	uxtb	r2, r2
 80032de:	4611      	mov	r1, r2
 80032e0:	4618      	mov	r0, r3
 80032e2:	f003 fcd0 	bl	8006c86 <USB_HC_Halt>
  }
  else
  {
    /* ... */
  }
}
 80032e6:	e331      	b.n	800394c <HCD_HC_OUT_IRQHandler+0x6ca>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_ACK) == USB_OTG_HCINT_ACK)
 80032e8:	697b      	ldr	r3, [r7, #20]
 80032ea:	015a      	lsls	r2, r3, #5
 80032ec:	69bb      	ldr	r3, [r7, #24]
 80032ee:	4413      	add	r3, r2
 80032f0:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80032f4:	689b      	ldr	r3, [r3, #8]
 80032f6:	f003 0320 	and.w	r3, r3, #32
 80032fa:	2b20      	cmp	r3, #32
 80032fc:	d12e      	bne.n	800335c <HCD_HC_OUT_IRQHandler+0xda>
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_ACK);
 80032fe:	697b      	ldr	r3, [r7, #20]
 8003300:	015a      	lsls	r2, r3, #5
 8003302:	69bb      	ldr	r3, [r7, #24]
 8003304:	4413      	add	r3, r2
 8003306:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800330a:	461a      	mov	r2, r3
 800330c:	2320      	movs	r3, #32
 800330e:	6093      	str	r3, [r2, #8]
    if (hhcd->hc[ch_num].do_ping == 1U)
 8003310:	687a      	ldr	r2, [r7, #4]
 8003312:	697b      	ldr	r3, [r7, #20]
 8003314:	212c      	movs	r1, #44	; 0x2c
 8003316:	fb01 f303 	mul.w	r3, r1, r3
 800331a:	4413      	add	r3, r2
 800331c:	333d      	adds	r3, #61	; 0x3d
 800331e:	781b      	ldrb	r3, [r3, #0]
 8003320:	2b01      	cmp	r3, #1
 8003322:	f040 8313 	bne.w	800394c <HCD_HC_OUT_IRQHandler+0x6ca>
      hhcd->hc[ch_num].do_ping = 0U;
 8003326:	687a      	ldr	r2, [r7, #4]
 8003328:	697b      	ldr	r3, [r7, #20]
 800332a:	212c      	movs	r1, #44	; 0x2c
 800332c:	fb01 f303 	mul.w	r3, r1, r3
 8003330:	4413      	add	r3, r2
 8003332:	333d      	adds	r3, #61	; 0x3d
 8003334:	2200      	movs	r2, #0
 8003336:	701a      	strb	r2, [r3, #0]
      hhcd->hc[ch_num].urb_state = URB_NOTREADY;
 8003338:	687a      	ldr	r2, [r7, #4]
 800333a:	697b      	ldr	r3, [r7, #20]
 800333c:	212c      	movs	r1, #44	; 0x2c
 800333e:	fb01 f303 	mul.w	r3, r1, r3
 8003342:	4413      	add	r3, r2
 8003344:	3360      	adds	r3, #96	; 0x60
 8003346:	2202      	movs	r2, #2
 8003348:	701a      	strb	r2, [r3, #0]
      (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 800334a:	687b      	ldr	r3, [r7, #4]
 800334c:	681b      	ldr	r3, [r3, #0]
 800334e:	697a      	ldr	r2, [r7, #20]
 8003350:	b2d2      	uxtb	r2, r2
 8003352:	4611      	mov	r1, r2
 8003354:	4618      	mov	r0, r3
 8003356:	f003 fc96 	bl	8006c86 <USB_HC_Halt>
}
 800335a:	e2f7      	b.n	800394c <HCD_HC_OUT_IRQHandler+0x6ca>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_FRMOR) == USB_OTG_HCINT_FRMOR)
 800335c:	697b      	ldr	r3, [r7, #20]
 800335e:	015a      	lsls	r2, r3, #5
 8003360:	69bb      	ldr	r3, [r7, #24]
 8003362:	4413      	add	r3, r2
 8003364:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8003368:	689b      	ldr	r3, [r3, #8]
 800336a:	f403 7300 	and.w	r3, r3, #512	; 0x200
 800336e:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8003372:	d112      	bne.n	800339a <HCD_HC_OUT_IRQHandler+0x118>
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_FRMOR);
 8003374:	697b      	ldr	r3, [r7, #20]
 8003376:	015a      	lsls	r2, r3, #5
 8003378:	69bb      	ldr	r3, [r7, #24]
 800337a:	4413      	add	r3, r2
 800337c:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8003380:	461a      	mov	r2, r3
 8003382:	f44f 7300 	mov.w	r3, #512	; 0x200
 8003386:	6093      	str	r3, [r2, #8]
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 8003388:	687b      	ldr	r3, [r7, #4]
 800338a:	681b      	ldr	r3, [r3, #0]
 800338c:	697a      	ldr	r2, [r7, #20]
 800338e:	b2d2      	uxtb	r2, r2
 8003390:	4611      	mov	r1, r2
 8003392:	4618      	mov	r0, r3
 8003394:	f003 fc77 	bl	8006c86 <USB_HC_Halt>
}
 8003398:	e2d8      	b.n	800394c <HCD_HC_OUT_IRQHandler+0x6ca>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_XFRC) == USB_OTG_HCINT_XFRC)
 800339a:	697b      	ldr	r3, [r7, #20]
 800339c:	015a      	lsls	r2, r3, #5
 800339e:	69bb      	ldr	r3, [r7, #24]
 80033a0:	4413      	add	r3, r2
 80033a2:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80033a6:	689b      	ldr	r3, [r3, #8]
 80033a8:	f003 0301 	and.w	r3, r3, #1
 80033ac:	2b01      	cmp	r3, #1
 80033ae:	d140      	bne.n	8003432 <HCD_HC_OUT_IRQHandler+0x1b0>
    hhcd->hc[ch_num].ErrCnt = 0U;
 80033b0:	687a      	ldr	r2, [r7, #4]
 80033b2:	697b      	ldr	r3, [r7, #20]
 80033b4:	212c      	movs	r1, #44	; 0x2c
 80033b6:	fb01 f303 	mul.w	r3, r1, r3
 80033ba:	4413      	add	r3, r2
 80033bc:	335c      	adds	r3, #92	; 0x5c
 80033be:	2200      	movs	r2, #0
 80033c0:	601a      	str	r2, [r3, #0]
    if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_NYET) == USB_OTG_HCINT_NYET)
 80033c2:	697b      	ldr	r3, [r7, #20]
 80033c4:	015a      	lsls	r2, r3, #5
 80033c6:	69bb      	ldr	r3, [r7, #24]
 80033c8:	4413      	add	r3, r2
 80033ca:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80033ce:	689b      	ldr	r3, [r3, #8]
 80033d0:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80033d4:	2b40      	cmp	r3, #64	; 0x40
 80033d6:	d111      	bne.n	80033fc <HCD_HC_OUT_IRQHandler+0x17a>
      hhcd->hc[ch_num].do_ping = 1U;
 80033d8:	687a      	ldr	r2, [r7, #4]
 80033da:	697b      	ldr	r3, [r7, #20]
 80033dc:	212c      	movs	r1, #44	; 0x2c
 80033de:	fb01 f303 	mul.w	r3, r1, r3
 80033e2:	4413      	add	r3, r2
 80033e4:	333d      	adds	r3, #61	; 0x3d
 80033e6:	2201      	movs	r2, #1
 80033e8:	701a      	strb	r2, [r3, #0]
      __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_NYET);
 80033ea:	697b      	ldr	r3, [r7, #20]
 80033ec:	015a      	lsls	r2, r3, #5
 80033ee:	69bb      	ldr	r3, [r7, #24]
 80033f0:	4413      	add	r3, r2
 80033f2:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80033f6:	461a      	mov	r2, r3
 80033f8:	2340      	movs	r3, #64	; 0x40
 80033fa:	6093      	str	r3, [r2, #8]
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_XFRC);
 80033fc:	697b      	ldr	r3, [r7, #20]
 80033fe:	015a      	lsls	r2, r3, #5
 8003400:	69bb      	ldr	r3, [r7, #24]
 8003402:	4413      	add	r3, r2
 8003404:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8003408:	461a      	mov	r2, r3
 800340a:	2301      	movs	r3, #1
 800340c:	6093      	str	r3, [r2, #8]
    hhcd->hc[ch_num].state = HC_XFRC;
 800340e:	687a      	ldr	r2, [r7, #4]
 8003410:	697b      	ldr	r3, [r7, #20]
 8003412:	212c      	movs	r1, #44	; 0x2c
 8003414:	fb01 f303 	mul.w	r3, r1, r3
 8003418:	4413      	add	r3, r2
 800341a:	3361      	adds	r3, #97	; 0x61
 800341c:	2201      	movs	r2, #1
 800341e:	701a      	strb	r2, [r3, #0]
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 8003420:	687b      	ldr	r3, [r7, #4]
 8003422:	681b      	ldr	r3, [r3, #0]
 8003424:	697a      	ldr	r2, [r7, #20]
 8003426:	b2d2      	uxtb	r2, r2
 8003428:	4611      	mov	r1, r2
 800342a:	4618      	mov	r0, r3
 800342c:	f003 fc2b 	bl	8006c86 <USB_HC_Halt>
}
 8003430:	e28c      	b.n	800394c <HCD_HC_OUT_IRQHandler+0x6ca>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_NYET) == USB_OTG_HCINT_NYET)
 8003432:	697b      	ldr	r3, [r7, #20]
 8003434:	015a      	lsls	r2, r3, #5
 8003436:	69bb      	ldr	r3, [r7, #24]
 8003438:	4413      	add	r3, r2
 800343a:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800343e:	689b      	ldr	r3, [r3, #8]
 8003440:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003444:	2b40      	cmp	r3, #64	; 0x40
 8003446:	d12c      	bne.n	80034a2 <HCD_HC_OUT_IRQHandler+0x220>
    hhcd->hc[ch_num].state = HC_NYET;
 8003448:	687a      	ldr	r2, [r7, #4]
 800344a:	697b      	ldr	r3, [r7, #20]
 800344c:	212c      	movs	r1, #44	; 0x2c
 800344e:	fb01 f303 	mul.w	r3, r1, r3
 8003452:	4413      	add	r3, r2
 8003454:	3361      	adds	r3, #97	; 0x61
 8003456:	2204      	movs	r2, #4
 8003458:	701a      	strb	r2, [r3, #0]
    hhcd->hc[ch_num].do_ping = 1U;
 800345a:	687a      	ldr	r2, [r7, #4]
 800345c:	697b      	ldr	r3, [r7, #20]
 800345e:	212c      	movs	r1, #44	; 0x2c
 8003460:	fb01 f303 	mul.w	r3, r1, r3
 8003464:	4413      	add	r3, r2
 8003466:	333d      	adds	r3, #61	; 0x3d
 8003468:	2201      	movs	r2, #1
 800346a:	701a      	strb	r2, [r3, #0]
    hhcd->hc[ch_num].ErrCnt = 0U;
 800346c:	687a      	ldr	r2, [r7, #4]
 800346e:	697b      	ldr	r3, [r7, #20]
 8003470:	212c      	movs	r1, #44	; 0x2c
 8003472:	fb01 f303 	mul.w	r3, r1, r3
 8003476:	4413      	add	r3, r2
 8003478:	335c      	adds	r3, #92	; 0x5c
 800347a:	2200      	movs	r2, #0
 800347c:	601a      	str	r2, [r3, #0]
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 800347e:	687b      	ldr	r3, [r7, #4]
 8003480:	681b      	ldr	r3, [r3, #0]
 8003482:	697a      	ldr	r2, [r7, #20]
 8003484:	b2d2      	uxtb	r2, r2
 8003486:	4611      	mov	r1, r2
 8003488:	4618      	mov	r0, r3
 800348a:	f003 fbfc 	bl	8006c86 <USB_HC_Halt>
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_NYET);
 800348e:	697b      	ldr	r3, [r7, #20]
 8003490:	015a      	lsls	r2, r3, #5
 8003492:	69bb      	ldr	r3, [r7, #24]
 8003494:	4413      	add	r3, r2
 8003496:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800349a:	461a      	mov	r2, r3
 800349c:	2340      	movs	r3, #64	; 0x40
 800349e:	6093      	str	r3, [r2, #8]
}
 80034a0:	e254      	b.n	800394c <HCD_HC_OUT_IRQHandler+0x6ca>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_STALL) == USB_OTG_HCINT_STALL)
 80034a2:	697b      	ldr	r3, [r7, #20]
 80034a4:	015a      	lsls	r2, r3, #5
 80034a6:	69bb      	ldr	r3, [r7, #24]
 80034a8:	4413      	add	r3, r2
 80034aa:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80034ae:	689b      	ldr	r3, [r3, #8]
 80034b0:	f003 0308 	and.w	r3, r3, #8
 80034b4:	2b08      	cmp	r3, #8
 80034b6:	d11a      	bne.n	80034ee <HCD_HC_OUT_IRQHandler+0x26c>
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_STALL);
 80034b8:	697b      	ldr	r3, [r7, #20]
 80034ba:	015a      	lsls	r2, r3, #5
 80034bc:	69bb      	ldr	r3, [r7, #24]
 80034be:	4413      	add	r3, r2
 80034c0:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80034c4:	461a      	mov	r2, r3
 80034c6:	2308      	movs	r3, #8
 80034c8:	6093      	str	r3, [r2, #8]
    hhcd->hc[ch_num].state = HC_STALL;
 80034ca:	687a      	ldr	r2, [r7, #4]
 80034cc:	697b      	ldr	r3, [r7, #20]
 80034ce:	212c      	movs	r1, #44	; 0x2c
 80034d0:	fb01 f303 	mul.w	r3, r1, r3
 80034d4:	4413      	add	r3, r2
 80034d6:	3361      	adds	r3, #97	; 0x61
 80034d8:	2205      	movs	r2, #5
 80034da:	701a      	strb	r2, [r3, #0]
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 80034dc:	687b      	ldr	r3, [r7, #4]
 80034de:	681b      	ldr	r3, [r3, #0]
 80034e0:	697a      	ldr	r2, [r7, #20]
 80034e2:	b2d2      	uxtb	r2, r2
 80034e4:	4611      	mov	r1, r2
 80034e6:	4618      	mov	r0, r3
 80034e8:	f003 fbcd 	bl	8006c86 <USB_HC_Halt>
}
 80034ec:	e22e      	b.n	800394c <HCD_HC_OUT_IRQHandler+0x6ca>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_NAK) == USB_OTG_HCINT_NAK)
 80034ee:	697b      	ldr	r3, [r7, #20]
 80034f0:	015a      	lsls	r2, r3, #5
 80034f2:	69bb      	ldr	r3, [r7, #24]
 80034f4:	4413      	add	r3, r2
 80034f6:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80034fa:	689b      	ldr	r3, [r3, #8]
 80034fc:	f003 0310 	and.w	r3, r3, #16
 8003500:	2b10      	cmp	r3, #16
 8003502:	d140      	bne.n	8003586 <HCD_HC_OUT_IRQHandler+0x304>
    hhcd->hc[ch_num].ErrCnt = 0U;
 8003504:	687a      	ldr	r2, [r7, #4]
 8003506:	697b      	ldr	r3, [r7, #20]
 8003508:	212c      	movs	r1, #44	; 0x2c
 800350a:	fb01 f303 	mul.w	r3, r1, r3
 800350e:	4413      	add	r3, r2
 8003510:	335c      	adds	r3, #92	; 0x5c
 8003512:	2200      	movs	r2, #0
 8003514:	601a      	str	r2, [r3, #0]
    hhcd->hc[ch_num].state = HC_NAK;
 8003516:	687a      	ldr	r2, [r7, #4]
 8003518:	697b      	ldr	r3, [r7, #20]
 800351a:	212c      	movs	r1, #44	; 0x2c
 800351c:	fb01 f303 	mul.w	r3, r1, r3
 8003520:	4413      	add	r3, r2
 8003522:	3361      	adds	r3, #97	; 0x61
 8003524:	2203      	movs	r2, #3
 8003526:	701a      	strb	r2, [r3, #0]
    if (hhcd->hc[ch_num].do_ping == 0U)
 8003528:	687a      	ldr	r2, [r7, #4]
 800352a:	697b      	ldr	r3, [r7, #20]
 800352c:	212c      	movs	r1, #44	; 0x2c
 800352e:	fb01 f303 	mul.w	r3, r1, r3
 8003532:	4413      	add	r3, r2
 8003534:	333d      	adds	r3, #61	; 0x3d
 8003536:	781b      	ldrb	r3, [r3, #0]
 8003538:	2b00      	cmp	r3, #0
 800353a:	d112      	bne.n	8003562 <HCD_HC_OUT_IRQHandler+0x2e0>
      if (hhcd->hc[ch_num].speed == HCD_DEVICE_SPEED_HIGH)
 800353c:	687a      	ldr	r2, [r7, #4]
 800353e:	697b      	ldr	r3, [r7, #20]
 8003540:	212c      	movs	r1, #44	; 0x2c
 8003542:	fb01 f303 	mul.w	r3, r1, r3
 8003546:	4413      	add	r3, r2
 8003548:	333c      	adds	r3, #60	; 0x3c
 800354a:	781b      	ldrb	r3, [r3, #0]
 800354c:	2b00      	cmp	r3, #0
 800354e:	d108      	bne.n	8003562 <HCD_HC_OUT_IRQHandler+0x2e0>
        hhcd->hc[ch_num].do_ping = 1U;
 8003550:	687a      	ldr	r2, [r7, #4]
 8003552:	697b      	ldr	r3, [r7, #20]
 8003554:	212c      	movs	r1, #44	; 0x2c
 8003556:	fb01 f303 	mul.w	r3, r1, r3
 800355a:	4413      	add	r3, r2
 800355c:	333d      	adds	r3, #61	; 0x3d
 800355e:	2201      	movs	r2, #1
 8003560:	701a      	strb	r2, [r3, #0]
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 8003562:	687b      	ldr	r3, [r7, #4]
 8003564:	681b      	ldr	r3, [r3, #0]
 8003566:	697a      	ldr	r2, [r7, #20]
 8003568:	b2d2      	uxtb	r2, r2
 800356a:	4611      	mov	r1, r2
 800356c:	4618      	mov	r0, r3
 800356e:	f003 fb8a 	bl	8006c86 <USB_HC_Halt>
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_NAK);
 8003572:	697b      	ldr	r3, [r7, #20]
 8003574:	015a      	lsls	r2, r3, #5
 8003576:	69bb      	ldr	r3, [r7, #24]
 8003578:	4413      	add	r3, r2
 800357a:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800357e:	461a      	mov	r2, r3
 8003580:	2310      	movs	r3, #16
 8003582:	6093      	str	r3, [r2, #8]
}
 8003584:	e1e2      	b.n	800394c <HCD_HC_OUT_IRQHandler+0x6ca>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_TXERR) == USB_OTG_HCINT_TXERR)
 8003586:	697b      	ldr	r3, [r7, #20]
 8003588:	015a      	lsls	r2, r3, #5
 800358a:	69bb      	ldr	r3, [r7, #24]
 800358c:	4413      	add	r3, r2
 800358e:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8003592:	689b      	ldr	r3, [r3, #8]
 8003594:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003598:	2b80      	cmp	r3, #128	; 0x80
 800359a:	d164      	bne.n	8003666 <HCD_HC_OUT_IRQHandler+0x3e4>
    if (hhcd->Init.dma_enable == 0U)
 800359c:	687b      	ldr	r3, [r7, #4]
 800359e:	691b      	ldr	r3, [r3, #16]
 80035a0:	2b00      	cmp	r3, #0
 80035a2:	d111      	bne.n	80035c8 <HCD_HC_OUT_IRQHandler+0x346>
      hhcd->hc[ch_num].state = HC_XACTERR;
 80035a4:	687a      	ldr	r2, [r7, #4]
 80035a6:	697b      	ldr	r3, [r7, #20]
 80035a8:	212c      	movs	r1, #44	; 0x2c
 80035aa:	fb01 f303 	mul.w	r3, r1, r3
 80035ae:	4413      	add	r3, r2
 80035b0:	3361      	adds	r3, #97	; 0x61
 80035b2:	2206      	movs	r2, #6
 80035b4:	701a      	strb	r2, [r3, #0]
      (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 80035b6:	687b      	ldr	r3, [r7, #4]
 80035b8:	681b      	ldr	r3, [r3, #0]
 80035ba:	697a      	ldr	r2, [r7, #20]
 80035bc:	b2d2      	uxtb	r2, r2
 80035be:	4611      	mov	r1, r2
 80035c0:	4618      	mov	r0, r3
 80035c2:	f003 fb60 	bl	8006c86 <USB_HC_Halt>
 80035c6:	e044      	b.n	8003652 <HCD_HC_OUT_IRQHandler+0x3d0>
      hhcd->hc[ch_num].ErrCnt++;
 80035c8:	687a      	ldr	r2, [r7, #4]
 80035ca:	697b      	ldr	r3, [r7, #20]
 80035cc:	212c      	movs	r1, #44	; 0x2c
 80035ce:	fb01 f303 	mul.w	r3, r1, r3
 80035d2:	4413      	add	r3, r2
 80035d4:	335c      	adds	r3, #92	; 0x5c
 80035d6:	681b      	ldr	r3, [r3, #0]
 80035d8:	1c5a      	adds	r2, r3, #1
 80035da:	6879      	ldr	r1, [r7, #4]
 80035dc:	697b      	ldr	r3, [r7, #20]
 80035de:	202c      	movs	r0, #44	; 0x2c
 80035e0:	fb00 f303 	mul.w	r3, r0, r3
 80035e4:	440b      	add	r3, r1
 80035e6:	335c      	adds	r3, #92	; 0x5c
 80035e8:	601a      	str	r2, [r3, #0]
      if (hhcd->hc[ch_num].ErrCnt > 2U)
 80035ea:	687a      	ldr	r2, [r7, #4]
 80035ec:	697b      	ldr	r3, [r7, #20]
 80035ee:	212c      	movs	r1, #44	; 0x2c
 80035f0:	fb01 f303 	mul.w	r3, r1, r3
 80035f4:	4413      	add	r3, r2
 80035f6:	335c      	adds	r3, #92	; 0x5c
 80035f8:	681b      	ldr	r3, [r3, #0]
 80035fa:	2b02      	cmp	r3, #2
 80035fc:	d920      	bls.n	8003640 <HCD_HC_OUT_IRQHandler+0x3be>
        hhcd->hc[ch_num].ErrCnt = 0U;
 80035fe:	687a      	ldr	r2, [r7, #4]
 8003600:	697b      	ldr	r3, [r7, #20]
 8003602:	212c      	movs	r1, #44	; 0x2c
 8003604:	fb01 f303 	mul.w	r3, r1, r3
 8003608:	4413      	add	r3, r2
 800360a:	335c      	adds	r3, #92	; 0x5c
 800360c:	2200      	movs	r2, #0
 800360e:	601a      	str	r2, [r3, #0]
        hhcd->hc[ch_num].urb_state = URB_ERROR;
 8003610:	687a      	ldr	r2, [r7, #4]
 8003612:	697b      	ldr	r3, [r7, #20]
 8003614:	212c      	movs	r1, #44	; 0x2c
 8003616:	fb01 f303 	mul.w	r3, r1, r3
 800361a:	4413      	add	r3, r2
 800361c:	3360      	adds	r3, #96	; 0x60
 800361e:	2204      	movs	r2, #4
 8003620:	701a      	strb	r2, [r3, #0]
        HAL_HCD_HC_NotifyURBChange_Callback(hhcd, (uint8_t)ch_num, hhcd->hc[ch_num].urb_state);
 8003622:	697b      	ldr	r3, [r7, #20]
 8003624:	b2d9      	uxtb	r1, r3
 8003626:	687a      	ldr	r2, [r7, #4]
 8003628:	697b      	ldr	r3, [r7, #20]
 800362a:	202c      	movs	r0, #44	; 0x2c
 800362c:	fb00 f303 	mul.w	r3, r0, r3
 8003630:	4413      	add	r3, r2
 8003632:	3360      	adds	r3, #96	; 0x60
 8003634:	781b      	ldrb	r3, [r3, #0]
 8003636:	461a      	mov	r2, r3
 8003638:	6878      	ldr	r0, [r7, #4]
 800363a:	f7ff fabf 	bl	8002bbc <HAL_HCD_HC_NotifyURBChange_Callback>
 800363e:	e008      	b.n	8003652 <HCD_HC_OUT_IRQHandler+0x3d0>
        hhcd->hc[ch_num].urb_state = URB_NOTREADY;
 8003640:	687a      	ldr	r2, [r7, #4]
 8003642:	697b      	ldr	r3, [r7, #20]
 8003644:	212c      	movs	r1, #44	; 0x2c
 8003646:	fb01 f303 	mul.w	r3, r1, r3
 800364a:	4413      	add	r3, r2
 800364c:	3360      	adds	r3, #96	; 0x60
 800364e:	2202      	movs	r2, #2
 8003650:	701a      	strb	r2, [r3, #0]
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_TXERR);
 8003652:	697b      	ldr	r3, [r7, #20]
 8003654:	015a      	lsls	r2, r3, #5
 8003656:	69bb      	ldr	r3, [r7, #24]
 8003658:	4413      	add	r3, r2
 800365a:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800365e:	461a      	mov	r2, r3
 8003660:	2380      	movs	r3, #128	; 0x80
 8003662:	6093      	str	r3, [r2, #8]
}
 8003664:	e172      	b.n	800394c <HCD_HC_OUT_IRQHandler+0x6ca>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_DTERR) == USB_OTG_HCINT_DTERR)
 8003666:	697b      	ldr	r3, [r7, #20]
 8003668:	015a      	lsls	r2, r3, #5
 800366a:	69bb      	ldr	r3, [r7, #24]
 800366c:	4413      	add	r3, r2
 800366e:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8003672:	689b      	ldr	r3, [r3, #8]
 8003674:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8003678:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800367c:	d11b      	bne.n	80036b6 <HCD_HC_OUT_IRQHandler+0x434>
    hhcd->hc[ch_num].state = HC_DATATGLERR;
 800367e:	687a      	ldr	r2, [r7, #4]
 8003680:	697b      	ldr	r3, [r7, #20]
 8003682:	212c      	movs	r1, #44	; 0x2c
 8003684:	fb01 f303 	mul.w	r3, r1, r3
 8003688:	4413      	add	r3, r2
 800368a:	3361      	adds	r3, #97	; 0x61
 800368c:	2208      	movs	r2, #8
 800368e:	701a      	strb	r2, [r3, #0]
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 8003690:	687b      	ldr	r3, [r7, #4]
 8003692:	681b      	ldr	r3, [r3, #0]
 8003694:	697a      	ldr	r2, [r7, #20]
 8003696:	b2d2      	uxtb	r2, r2
 8003698:	4611      	mov	r1, r2
 800369a:	4618      	mov	r0, r3
 800369c:	f003 faf3 	bl	8006c86 <USB_HC_Halt>
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_DTERR);
 80036a0:	697b      	ldr	r3, [r7, #20]
 80036a2:	015a      	lsls	r2, r3, #5
 80036a4:	69bb      	ldr	r3, [r7, #24]
 80036a6:	4413      	add	r3, r2
 80036a8:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80036ac:	461a      	mov	r2, r3
 80036ae:	f44f 6380 	mov.w	r3, #1024	; 0x400
 80036b2:	6093      	str	r3, [r2, #8]
}
 80036b4:	e14a      	b.n	800394c <HCD_HC_OUT_IRQHandler+0x6ca>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_CHH) == USB_OTG_HCINT_CHH)
 80036b6:	697b      	ldr	r3, [r7, #20]
 80036b8:	015a      	lsls	r2, r3, #5
 80036ba:	69bb      	ldr	r3, [r7, #24]
 80036bc:	4413      	add	r3, r2
 80036be:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80036c2:	689b      	ldr	r3, [r3, #8]
 80036c4:	f003 0302 	and.w	r3, r3, #2
 80036c8:	2b02      	cmp	r3, #2
 80036ca:	f040 813f 	bne.w	800394c <HCD_HC_OUT_IRQHandler+0x6ca>
    if (hhcd->hc[ch_num].state == HC_XFRC)
 80036ce:	687a      	ldr	r2, [r7, #4]
 80036d0:	697b      	ldr	r3, [r7, #20]
 80036d2:	212c      	movs	r1, #44	; 0x2c
 80036d4:	fb01 f303 	mul.w	r3, r1, r3
 80036d8:	4413      	add	r3, r2
 80036da:	3361      	adds	r3, #97	; 0x61
 80036dc:	781b      	ldrb	r3, [r3, #0]
 80036de:	2b01      	cmp	r3, #1
 80036e0:	d17d      	bne.n	80037de <HCD_HC_OUT_IRQHandler+0x55c>
      hhcd->hc[ch_num].urb_state  = URB_DONE;
 80036e2:	687a      	ldr	r2, [r7, #4]
 80036e4:	697b      	ldr	r3, [r7, #20]
 80036e6:	212c      	movs	r1, #44	; 0x2c
 80036e8:	fb01 f303 	mul.w	r3, r1, r3
 80036ec:	4413      	add	r3, r2
 80036ee:	3360      	adds	r3, #96	; 0x60
 80036f0:	2201      	movs	r2, #1
 80036f2:	701a      	strb	r2, [r3, #0]
      if ((hhcd->hc[ch_num].ep_type == EP_TYPE_BULK) ||
 80036f4:	687a      	ldr	r2, [r7, #4]
 80036f6:	697b      	ldr	r3, [r7, #20]
 80036f8:	212c      	movs	r1, #44	; 0x2c
 80036fa:	fb01 f303 	mul.w	r3, r1, r3
 80036fe:	4413      	add	r3, r2
 8003700:	333f      	adds	r3, #63	; 0x3f
 8003702:	781b      	ldrb	r3, [r3, #0]
 8003704:	2b02      	cmp	r3, #2
 8003706:	d00a      	beq.n	800371e <HCD_HC_OUT_IRQHandler+0x49c>
          (hhcd->hc[ch_num].ep_type == EP_TYPE_INTR))
 8003708:	687a      	ldr	r2, [r7, #4]
 800370a:	697b      	ldr	r3, [r7, #20]
 800370c:	212c      	movs	r1, #44	; 0x2c
 800370e:	fb01 f303 	mul.w	r3, r1, r3
 8003712:	4413      	add	r3, r2
 8003714:	333f      	adds	r3, #63	; 0x3f
 8003716:	781b      	ldrb	r3, [r3, #0]
      if ((hhcd->hc[ch_num].ep_type == EP_TYPE_BULK) ||
 8003718:	2b03      	cmp	r3, #3
 800371a:	f040 8100 	bne.w	800391e <HCD_HC_OUT_IRQHandler+0x69c>
        if (hhcd->Init.dma_enable == 0U)
 800371e:	687b      	ldr	r3, [r7, #4]
 8003720:	691b      	ldr	r3, [r3, #16]
 8003722:	2b00      	cmp	r3, #0
 8003724:	d113      	bne.n	800374e <HCD_HC_OUT_IRQHandler+0x4cc>
          hhcd->hc[ch_num].toggle_out ^= 1U;
 8003726:	687a      	ldr	r2, [r7, #4]
 8003728:	697b      	ldr	r3, [r7, #20]
 800372a:	212c      	movs	r1, #44	; 0x2c
 800372c:	fb01 f303 	mul.w	r3, r1, r3
 8003730:	4413      	add	r3, r2
 8003732:	3355      	adds	r3, #85	; 0x55
 8003734:	781b      	ldrb	r3, [r3, #0]
 8003736:	f083 0301 	eor.w	r3, r3, #1
 800373a:	b2d8      	uxtb	r0, r3
 800373c:	687a      	ldr	r2, [r7, #4]
 800373e:	697b      	ldr	r3, [r7, #20]
 8003740:	212c      	movs	r1, #44	; 0x2c
 8003742:	fb01 f303 	mul.w	r3, r1, r3
 8003746:	4413      	add	r3, r2
 8003748:	3355      	adds	r3, #85	; 0x55
 800374a:	4602      	mov	r2, r0
 800374c:	701a      	strb	r2, [r3, #0]
        if ((hhcd->Init.dma_enable == 1U) && (hhcd->hc[ch_num].xfer_len > 0U))
 800374e:	687b      	ldr	r3, [r7, #4]
 8003750:	691b      	ldr	r3, [r3, #16]
 8003752:	2b01      	cmp	r3, #1
 8003754:	f040 80e3 	bne.w	800391e <HCD_HC_OUT_IRQHandler+0x69c>
 8003758:	687a      	ldr	r2, [r7, #4]
 800375a:	697b      	ldr	r3, [r7, #20]
 800375c:	212c      	movs	r1, #44	; 0x2c
 800375e:	fb01 f303 	mul.w	r3, r1, r3
 8003762:	4413      	add	r3, r2
 8003764:	334c      	adds	r3, #76	; 0x4c
 8003766:	681b      	ldr	r3, [r3, #0]
 8003768:	2b00      	cmp	r3, #0
 800376a:	f000 80d8 	beq.w	800391e <HCD_HC_OUT_IRQHandler+0x69c>
          num_packets = (hhcd->hc[ch_num].xfer_len + hhcd->hc[ch_num].max_packet - 1U) / hhcd->hc[ch_num].max_packet;
 800376e:	687a      	ldr	r2, [r7, #4]
 8003770:	697b      	ldr	r3, [r7, #20]
 8003772:	212c      	movs	r1, #44	; 0x2c
 8003774:	fb01 f303 	mul.w	r3, r1, r3
 8003778:	4413      	add	r3, r2
 800377a:	334c      	adds	r3, #76	; 0x4c
 800377c:	681b      	ldr	r3, [r3, #0]
 800377e:	6879      	ldr	r1, [r7, #4]
 8003780:	697a      	ldr	r2, [r7, #20]
 8003782:	202c      	movs	r0, #44	; 0x2c
 8003784:	fb00 f202 	mul.w	r2, r0, r2
 8003788:	440a      	add	r2, r1
 800378a:	3240      	adds	r2, #64	; 0x40
 800378c:	8812      	ldrh	r2, [r2, #0]
 800378e:	4413      	add	r3, r2
 8003790:	3b01      	subs	r3, #1
 8003792:	6879      	ldr	r1, [r7, #4]
 8003794:	697a      	ldr	r2, [r7, #20]
 8003796:	202c      	movs	r0, #44	; 0x2c
 8003798:	fb00 f202 	mul.w	r2, r0, r2
 800379c:	440a      	add	r2, r1
 800379e:	3240      	adds	r2, #64	; 0x40
 80037a0:	8812      	ldrh	r2, [r2, #0]
 80037a2:	fbb3 f3f2 	udiv	r3, r3, r2
 80037a6:	60fb      	str	r3, [r7, #12]
          if ((num_packets & 1U) != 0U)
 80037a8:	68fb      	ldr	r3, [r7, #12]
 80037aa:	f003 0301 	and.w	r3, r3, #1
 80037ae:	2b00      	cmp	r3, #0
 80037b0:	f000 80b5 	beq.w	800391e <HCD_HC_OUT_IRQHandler+0x69c>
            hhcd->hc[ch_num].toggle_out ^= 1U;
 80037b4:	687a      	ldr	r2, [r7, #4]
 80037b6:	697b      	ldr	r3, [r7, #20]
 80037b8:	212c      	movs	r1, #44	; 0x2c
 80037ba:	fb01 f303 	mul.w	r3, r1, r3
 80037be:	4413      	add	r3, r2
 80037c0:	3355      	adds	r3, #85	; 0x55
 80037c2:	781b      	ldrb	r3, [r3, #0]
 80037c4:	f083 0301 	eor.w	r3, r3, #1
 80037c8:	b2d8      	uxtb	r0, r3
 80037ca:	687a      	ldr	r2, [r7, #4]
 80037cc:	697b      	ldr	r3, [r7, #20]
 80037ce:	212c      	movs	r1, #44	; 0x2c
 80037d0:	fb01 f303 	mul.w	r3, r1, r3
 80037d4:	4413      	add	r3, r2
 80037d6:	3355      	adds	r3, #85	; 0x55
 80037d8:	4602      	mov	r2, r0
 80037da:	701a      	strb	r2, [r3, #0]
 80037dc:	e09f      	b.n	800391e <HCD_HC_OUT_IRQHandler+0x69c>
    else if (hhcd->hc[ch_num].state == HC_NAK)
 80037de:	687a      	ldr	r2, [r7, #4]
 80037e0:	697b      	ldr	r3, [r7, #20]
 80037e2:	212c      	movs	r1, #44	; 0x2c
 80037e4:	fb01 f303 	mul.w	r3, r1, r3
 80037e8:	4413      	add	r3, r2
 80037ea:	3361      	adds	r3, #97	; 0x61
 80037ec:	781b      	ldrb	r3, [r3, #0]
 80037ee:	2b03      	cmp	r3, #3
 80037f0:	d109      	bne.n	8003806 <HCD_HC_OUT_IRQHandler+0x584>
      hhcd->hc[ch_num].urb_state = URB_NOTREADY;
 80037f2:	687a      	ldr	r2, [r7, #4]
 80037f4:	697b      	ldr	r3, [r7, #20]
 80037f6:	212c      	movs	r1, #44	; 0x2c
 80037f8:	fb01 f303 	mul.w	r3, r1, r3
 80037fc:	4413      	add	r3, r2
 80037fe:	3360      	adds	r3, #96	; 0x60
 8003800:	2202      	movs	r2, #2
 8003802:	701a      	strb	r2, [r3, #0]
 8003804:	e08b      	b.n	800391e <HCD_HC_OUT_IRQHandler+0x69c>
    else if (hhcd->hc[ch_num].state == HC_NYET)
 8003806:	687a      	ldr	r2, [r7, #4]
 8003808:	697b      	ldr	r3, [r7, #20]
 800380a:	212c      	movs	r1, #44	; 0x2c
 800380c:	fb01 f303 	mul.w	r3, r1, r3
 8003810:	4413      	add	r3, r2
 8003812:	3361      	adds	r3, #97	; 0x61
 8003814:	781b      	ldrb	r3, [r3, #0]
 8003816:	2b04      	cmp	r3, #4
 8003818:	d109      	bne.n	800382e <HCD_HC_OUT_IRQHandler+0x5ac>
      hhcd->hc[ch_num].urb_state  = URB_NOTREADY;
 800381a:	687a      	ldr	r2, [r7, #4]
 800381c:	697b      	ldr	r3, [r7, #20]
 800381e:	212c      	movs	r1, #44	; 0x2c
 8003820:	fb01 f303 	mul.w	r3, r1, r3
 8003824:	4413      	add	r3, r2
 8003826:	3360      	adds	r3, #96	; 0x60
 8003828:	2202      	movs	r2, #2
 800382a:	701a      	strb	r2, [r3, #0]
 800382c:	e077      	b.n	800391e <HCD_HC_OUT_IRQHandler+0x69c>
    else if (hhcd->hc[ch_num].state == HC_STALL)
 800382e:	687a      	ldr	r2, [r7, #4]
 8003830:	697b      	ldr	r3, [r7, #20]
 8003832:	212c      	movs	r1, #44	; 0x2c
 8003834:	fb01 f303 	mul.w	r3, r1, r3
 8003838:	4413      	add	r3, r2
 800383a:	3361      	adds	r3, #97	; 0x61
 800383c:	781b      	ldrb	r3, [r3, #0]
 800383e:	2b05      	cmp	r3, #5
 8003840:	d109      	bne.n	8003856 <HCD_HC_OUT_IRQHandler+0x5d4>
      hhcd->hc[ch_num].urb_state  = URB_STALL;
 8003842:	687a      	ldr	r2, [r7, #4]
 8003844:	697b      	ldr	r3, [r7, #20]
 8003846:	212c      	movs	r1, #44	; 0x2c
 8003848:	fb01 f303 	mul.w	r3, r1, r3
 800384c:	4413      	add	r3, r2
 800384e:	3360      	adds	r3, #96	; 0x60
 8003850:	2205      	movs	r2, #5
 8003852:	701a      	strb	r2, [r3, #0]
 8003854:	e063      	b.n	800391e <HCD_HC_OUT_IRQHandler+0x69c>
    else if ((hhcd->hc[ch_num].state == HC_XACTERR) ||
 8003856:	687a      	ldr	r2, [r7, #4]
 8003858:	697b      	ldr	r3, [r7, #20]
 800385a:	212c      	movs	r1, #44	; 0x2c
 800385c:	fb01 f303 	mul.w	r3, r1, r3
 8003860:	4413      	add	r3, r2
 8003862:	3361      	adds	r3, #97	; 0x61
 8003864:	781b      	ldrb	r3, [r3, #0]
 8003866:	2b06      	cmp	r3, #6
 8003868:	d009      	beq.n	800387e <HCD_HC_OUT_IRQHandler+0x5fc>
             (hhcd->hc[ch_num].state == HC_DATATGLERR))
 800386a:	687a      	ldr	r2, [r7, #4]
 800386c:	697b      	ldr	r3, [r7, #20]
 800386e:	212c      	movs	r1, #44	; 0x2c
 8003870:	fb01 f303 	mul.w	r3, r1, r3
 8003874:	4413      	add	r3, r2
 8003876:	3361      	adds	r3, #97	; 0x61
 8003878:	781b      	ldrb	r3, [r3, #0]
    else if ((hhcd->hc[ch_num].state == HC_XACTERR) ||
 800387a:	2b08      	cmp	r3, #8
 800387c:	d14f      	bne.n	800391e <HCD_HC_OUT_IRQHandler+0x69c>
      hhcd->hc[ch_num].ErrCnt++;
 800387e:	687a      	ldr	r2, [r7, #4]
 8003880:	697b      	ldr	r3, [r7, #20]
 8003882:	212c      	movs	r1, #44	; 0x2c
 8003884:	fb01 f303 	mul.w	r3, r1, r3
 8003888:	4413      	add	r3, r2
 800388a:	335c      	adds	r3, #92	; 0x5c
 800388c:	681b      	ldr	r3, [r3, #0]
 800388e:	1c5a      	adds	r2, r3, #1
 8003890:	6879      	ldr	r1, [r7, #4]
 8003892:	697b      	ldr	r3, [r7, #20]
 8003894:	202c      	movs	r0, #44	; 0x2c
 8003896:	fb00 f303 	mul.w	r3, r0, r3
 800389a:	440b      	add	r3, r1
 800389c:	335c      	adds	r3, #92	; 0x5c
 800389e:	601a      	str	r2, [r3, #0]
      if (hhcd->hc[ch_num].ErrCnt > 2U)
 80038a0:	687a      	ldr	r2, [r7, #4]
 80038a2:	697b      	ldr	r3, [r7, #20]
 80038a4:	212c      	movs	r1, #44	; 0x2c
 80038a6:	fb01 f303 	mul.w	r3, r1, r3
 80038aa:	4413      	add	r3, r2
 80038ac:	335c      	adds	r3, #92	; 0x5c
 80038ae:	681b      	ldr	r3, [r3, #0]
 80038b0:	2b02      	cmp	r3, #2
 80038b2:	d912      	bls.n	80038da <HCD_HC_OUT_IRQHandler+0x658>
        hhcd->hc[ch_num].ErrCnt = 0U;
 80038b4:	687a      	ldr	r2, [r7, #4]
 80038b6:	697b      	ldr	r3, [r7, #20]
 80038b8:	212c      	movs	r1, #44	; 0x2c
 80038ba:	fb01 f303 	mul.w	r3, r1, r3
 80038be:	4413      	add	r3, r2
 80038c0:	335c      	adds	r3, #92	; 0x5c
 80038c2:	2200      	movs	r2, #0
 80038c4:	601a      	str	r2, [r3, #0]
        hhcd->hc[ch_num].urb_state = URB_ERROR;
 80038c6:	687a      	ldr	r2, [r7, #4]
 80038c8:	697b      	ldr	r3, [r7, #20]
 80038ca:	212c      	movs	r1, #44	; 0x2c
 80038cc:	fb01 f303 	mul.w	r3, r1, r3
 80038d0:	4413      	add	r3, r2
 80038d2:	3360      	adds	r3, #96	; 0x60
 80038d4:	2204      	movs	r2, #4
 80038d6:	701a      	strb	r2, [r3, #0]
 80038d8:	e021      	b.n	800391e <HCD_HC_OUT_IRQHandler+0x69c>
        hhcd->hc[ch_num].urb_state = URB_NOTREADY;
 80038da:	687a      	ldr	r2, [r7, #4]
 80038dc:	697b      	ldr	r3, [r7, #20]
 80038de:	212c      	movs	r1, #44	; 0x2c
 80038e0:	fb01 f303 	mul.w	r3, r1, r3
 80038e4:	4413      	add	r3, r2
 80038e6:	3360      	adds	r3, #96	; 0x60
 80038e8:	2202      	movs	r2, #2
 80038ea:	701a      	strb	r2, [r3, #0]
        tmpreg = USBx_HC(ch_num)->HCCHAR;
 80038ec:	697b      	ldr	r3, [r7, #20]
 80038ee:	015a      	lsls	r2, r3, #5
 80038f0:	69bb      	ldr	r3, [r7, #24]
 80038f2:	4413      	add	r3, r2
 80038f4:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80038f8:	681b      	ldr	r3, [r3, #0]
 80038fa:	613b      	str	r3, [r7, #16]
        tmpreg &= ~USB_OTG_HCCHAR_CHDIS;
 80038fc:	693b      	ldr	r3, [r7, #16]
 80038fe:	f023 4380 	bic.w	r3, r3, #1073741824	; 0x40000000
 8003902:	613b      	str	r3, [r7, #16]
        tmpreg |= USB_OTG_HCCHAR_CHENA;
 8003904:	693b      	ldr	r3, [r7, #16]
 8003906:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 800390a:	613b      	str	r3, [r7, #16]
        USBx_HC(ch_num)->HCCHAR = tmpreg;
 800390c:	697b      	ldr	r3, [r7, #20]
 800390e:	015a      	lsls	r2, r3, #5
 8003910:	69bb      	ldr	r3, [r7, #24]
 8003912:	4413      	add	r3, r2
 8003914:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8003918:	461a      	mov	r2, r3
 800391a:	693b      	ldr	r3, [r7, #16]
 800391c:	6013      	str	r3, [r2, #0]
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_CHH);
 800391e:	697b      	ldr	r3, [r7, #20]
 8003920:	015a      	lsls	r2, r3, #5
 8003922:	69bb      	ldr	r3, [r7, #24]
 8003924:	4413      	add	r3, r2
 8003926:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800392a:	461a      	mov	r2, r3
 800392c:	2302      	movs	r3, #2
 800392e:	6093      	str	r3, [r2, #8]
    HAL_HCD_HC_NotifyURBChange_Callback(hhcd, (uint8_t)ch_num, hhcd->hc[ch_num].urb_state);
 8003930:	697b      	ldr	r3, [r7, #20]
 8003932:	b2d9      	uxtb	r1, r3
 8003934:	687a      	ldr	r2, [r7, #4]
 8003936:	697b      	ldr	r3, [r7, #20]
 8003938:	202c      	movs	r0, #44	; 0x2c
 800393a:	fb00 f303 	mul.w	r3, r0, r3
 800393e:	4413      	add	r3, r2
 8003940:	3360      	adds	r3, #96	; 0x60
 8003942:	781b      	ldrb	r3, [r3, #0]
 8003944:	461a      	mov	r2, r3
 8003946:	6878      	ldr	r0, [r7, #4]
 8003948:	f7ff f938 	bl	8002bbc <HAL_HCD_HC_NotifyURBChange_Callback>
}
 800394c:	bf00      	nop
 800394e:	3720      	adds	r7, #32
 8003950:	46bd      	mov	sp, r7
 8003952:	bd80      	pop	{r7, pc}

08003954 <HCD_RXQLVL_IRQHandler>:
  * @brief  Handle Rx Queue Level interrupt requests.
  * @param  hhcd HCD handle
  * @retval none
  */
static void HCD_RXQLVL_IRQHandler(HCD_HandleTypeDef *hhcd)
{
 8003954:	b580      	push	{r7, lr}
 8003956:	b08a      	sub	sp, #40	; 0x28
 8003958:	af00      	add	r7, sp, #0
 800395a:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx = hhcd->Instance;
 800395c:	687b      	ldr	r3, [r7, #4]
 800395e:	681b      	ldr	r3, [r3, #0]
 8003960:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t USBx_BASE = (uint32_t)USBx;
 8003962:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003964:	623b      	str	r3, [r7, #32]
  uint32_t GrxstspReg;
  uint32_t xferSizePktCnt;
  uint32_t tmpreg;
  uint32_t ch_num;

  GrxstspReg = hhcd->Instance->GRXSTSP;
 8003966:	687b      	ldr	r3, [r7, #4]
 8003968:	681b      	ldr	r3, [r3, #0]
 800396a:	6a1b      	ldr	r3, [r3, #32]
 800396c:	61fb      	str	r3, [r7, #28]
  ch_num = GrxstspReg & USB_OTG_GRXSTSP_EPNUM;
 800396e:	69fb      	ldr	r3, [r7, #28]
 8003970:	f003 030f 	and.w	r3, r3, #15
 8003974:	61bb      	str	r3, [r7, #24]
  pktsts = (GrxstspReg & USB_OTG_GRXSTSP_PKTSTS) >> 17;
 8003976:	69fb      	ldr	r3, [r7, #28]
 8003978:	0c5b      	lsrs	r3, r3, #17
 800397a:	f003 030f 	and.w	r3, r3, #15
 800397e:	617b      	str	r3, [r7, #20]
  pktcnt = (GrxstspReg & USB_OTG_GRXSTSP_BCNT) >> 4;
 8003980:	69fb      	ldr	r3, [r7, #28]
 8003982:	091b      	lsrs	r3, r3, #4
 8003984:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8003988:	613b      	str	r3, [r7, #16]

  switch (pktsts)
 800398a:	697b      	ldr	r3, [r7, #20]
 800398c:	2b02      	cmp	r3, #2
 800398e:	d004      	beq.n	800399a <HCD_RXQLVL_IRQHandler+0x46>
 8003990:	697b      	ldr	r3, [r7, #20]
 8003992:	2b05      	cmp	r3, #5
 8003994:	f000 80a9 	beq.w	8003aea <HCD_RXQLVL_IRQHandler+0x196>
      break;

    case GRXSTS_PKTSTS_IN_XFER_COMP:
    case GRXSTS_PKTSTS_CH_HALTED:
    default:
      break;
 8003998:	e0aa      	b.n	8003af0 <HCD_RXQLVL_IRQHandler+0x19c>
      if ((pktcnt > 0U) && (hhcd->hc[ch_num].xfer_buff != (void *)0))
 800399a:	693b      	ldr	r3, [r7, #16]
 800399c:	2b00      	cmp	r3, #0
 800399e:	f000 80a6 	beq.w	8003aee <HCD_RXQLVL_IRQHandler+0x19a>
 80039a2:	687a      	ldr	r2, [r7, #4]
 80039a4:	69bb      	ldr	r3, [r7, #24]
 80039a6:	212c      	movs	r1, #44	; 0x2c
 80039a8:	fb01 f303 	mul.w	r3, r1, r3
 80039ac:	4413      	add	r3, r2
 80039ae:	3344      	adds	r3, #68	; 0x44
 80039b0:	681b      	ldr	r3, [r3, #0]
 80039b2:	2b00      	cmp	r3, #0
 80039b4:	f000 809b 	beq.w	8003aee <HCD_RXQLVL_IRQHandler+0x19a>
        if ((hhcd->hc[ch_num].xfer_count + pktcnt) <= hhcd->hc[ch_num].xfer_len)
 80039b8:	687a      	ldr	r2, [r7, #4]
 80039ba:	69bb      	ldr	r3, [r7, #24]
 80039bc:	212c      	movs	r1, #44	; 0x2c
 80039be:	fb01 f303 	mul.w	r3, r1, r3
 80039c2:	4413      	add	r3, r2
 80039c4:	3350      	adds	r3, #80	; 0x50
 80039c6:	681a      	ldr	r2, [r3, #0]
 80039c8:	693b      	ldr	r3, [r7, #16]
 80039ca:	441a      	add	r2, r3
 80039cc:	6879      	ldr	r1, [r7, #4]
 80039ce:	69bb      	ldr	r3, [r7, #24]
 80039d0:	202c      	movs	r0, #44	; 0x2c
 80039d2:	fb00 f303 	mul.w	r3, r0, r3
 80039d6:	440b      	add	r3, r1
 80039d8:	334c      	adds	r3, #76	; 0x4c
 80039da:	681b      	ldr	r3, [r3, #0]
 80039dc:	429a      	cmp	r2, r3
 80039de:	d87a      	bhi.n	8003ad6 <HCD_RXQLVL_IRQHandler+0x182>
          (void)USB_ReadPacket(hhcd->Instance,
 80039e0:	687b      	ldr	r3, [r7, #4]
 80039e2:	6818      	ldr	r0, [r3, #0]
 80039e4:	687a      	ldr	r2, [r7, #4]
 80039e6:	69bb      	ldr	r3, [r7, #24]
 80039e8:	212c      	movs	r1, #44	; 0x2c
 80039ea:	fb01 f303 	mul.w	r3, r1, r3
 80039ee:	4413      	add	r3, r2
 80039f0:	3344      	adds	r3, #68	; 0x44
 80039f2:	681b      	ldr	r3, [r3, #0]
 80039f4:	693a      	ldr	r2, [r7, #16]
 80039f6:	b292      	uxth	r2, r2
 80039f8:	4619      	mov	r1, r3
 80039fa:	f002 ff8b 	bl	8006914 <USB_ReadPacket>
          hhcd->hc[ch_num].xfer_buff += pktcnt;
 80039fe:	687a      	ldr	r2, [r7, #4]
 8003a00:	69bb      	ldr	r3, [r7, #24]
 8003a02:	212c      	movs	r1, #44	; 0x2c
 8003a04:	fb01 f303 	mul.w	r3, r1, r3
 8003a08:	4413      	add	r3, r2
 8003a0a:	3344      	adds	r3, #68	; 0x44
 8003a0c:	681a      	ldr	r2, [r3, #0]
 8003a0e:	693b      	ldr	r3, [r7, #16]
 8003a10:	441a      	add	r2, r3
 8003a12:	6879      	ldr	r1, [r7, #4]
 8003a14:	69bb      	ldr	r3, [r7, #24]
 8003a16:	202c      	movs	r0, #44	; 0x2c
 8003a18:	fb00 f303 	mul.w	r3, r0, r3
 8003a1c:	440b      	add	r3, r1
 8003a1e:	3344      	adds	r3, #68	; 0x44
 8003a20:	601a      	str	r2, [r3, #0]
          hhcd->hc[ch_num].xfer_count += pktcnt;
 8003a22:	687a      	ldr	r2, [r7, #4]
 8003a24:	69bb      	ldr	r3, [r7, #24]
 8003a26:	212c      	movs	r1, #44	; 0x2c
 8003a28:	fb01 f303 	mul.w	r3, r1, r3
 8003a2c:	4413      	add	r3, r2
 8003a2e:	3350      	adds	r3, #80	; 0x50
 8003a30:	681a      	ldr	r2, [r3, #0]
 8003a32:	693b      	ldr	r3, [r7, #16]
 8003a34:	441a      	add	r2, r3
 8003a36:	6879      	ldr	r1, [r7, #4]
 8003a38:	69bb      	ldr	r3, [r7, #24]
 8003a3a:	202c      	movs	r0, #44	; 0x2c
 8003a3c:	fb00 f303 	mul.w	r3, r0, r3
 8003a40:	440b      	add	r3, r1
 8003a42:	3350      	adds	r3, #80	; 0x50
 8003a44:	601a      	str	r2, [r3, #0]
          xferSizePktCnt = (USBx_HC(ch_num)->HCTSIZ & USB_OTG_HCTSIZ_PKTCNT) >> 19;
 8003a46:	69bb      	ldr	r3, [r7, #24]
 8003a48:	015a      	lsls	r2, r3, #5
 8003a4a:	6a3b      	ldr	r3, [r7, #32]
 8003a4c:	4413      	add	r3, r2
 8003a4e:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8003a52:	691b      	ldr	r3, [r3, #16]
 8003a54:	0cdb      	lsrs	r3, r3, #19
 8003a56:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8003a5a:	60fb      	str	r3, [r7, #12]
          if ((hhcd->hc[ch_num].max_packet == pktcnt) && (xferSizePktCnt > 0U))
 8003a5c:	687a      	ldr	r2, [r7, #4]
 8003a5e:	69bb      	ldr	r3, [r7, #24]
 8003a60:	212c      	movs	r1, #44	; 0x2c
 8003a62:	fb01 f303 	mul.w	r3, r1, r3
 8003a66:	4413      	add	r3, r2
 8003a68:	3340      	adds	r3, #64	; 0x40
 8003a6a:	881b      	ldrh	r3, [r3, #0]
 8003a6c:	461a      	mov	r2, r3
 8003a6e:	693b      	ldr	r3, [r7, #16]
 8003a70:	4293      	cmp	r3, r2
 8003a72:	d13c      	bne.n	8003aee <HCD_RXQLVL_IRQHandler+0x19a>
 8003a74:	68fb      	ldr	r3, [r7, #12]
 8003a76:	2b00      	cmp	r3, #0
 8003a78:	d039      	beq.n	8003aee <HCD_RXQLVL_IRQHandler+0x19a>
            tmpreg = USBx_HC(ch_num)->HCCHAR;
 8003a7a:	69bb      	ldr	r3, [r7, #24]
 8003a7c:	015a      	lsls	r2, r3, #5
 8003a7e:	6a3b      	ldr	r3, [r7, #32]
 8003a80:	4413      	add	r3, r2
 8003a82:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8003a86:	681b      	ldr	r3, [r3, #0]
 8003a88:	60bb      	str	r3, [r7, #8]
            tmpreg &= ~USB_OTG_HCCHAR_CHDIS;
 8003a8a:	68bb      	ldr	r3, [r7, #8]
 8003a8c:	f023 4380 	bic.w	r3, r3, #1073741824	; 0x40000000
 8003a90:	60bb      	str	r3, [r7, #8]
            tmpreg |= USB_OTG_HCCHAR_CHENA;
 8003a92:	68bb      	ldr	r3, [r7, #8]
 8003a94:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8003a98:	60bb      	str	r3, [r7, #8]
            USBx_HC(ch_num)->HCCHAR = tmpreg;
 8003a9a:	69bb      	ldr	r3, [r7, #24]
 8003a9c:	015a      	lsls	r2, r3, #5
 8003a9e:	6a3b      	ldr	r3, [r7, #32]
 8003aa0:	4413      	add	r3, r2
 8003aa2:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8003aa6:	461a      	mov	r2, r3
 8003aa8:	68bb      	ldr	r3, [r7, #8]
 8003aaa:	6013      	str	r3, [r2, #0]
            hhcd->hc[ch_num].toggle_in ^= 1U;
 8003aac:	687a      	ldr	r2, [r7, #4]
 8003aae:	69bb      	ldr	r3, [r7, #24]
 8003ab0:	212c      	movs	r1, #44	; 0x2c
 8003ab2:	fb01 f303 	mul.w	r3, r1, r3
 8003ab6:	4413      	add	r3, r2
 8003ab8:	3354      	adds	r3, #84	; 0x54
 8003aba:	781b      	ldrb	r3, [r3, #0]
 8003abc:	f083 0301 	eor.w	r3, r3, #1
 8003ac0:	b2d8      	uxtb	r0, r3
 8003ac2:	687a      	ldr	r2, [r7, #4]
 8003ac4:	69bb      	ldr	r3, [r7, #24]
 8003ac6:	212c      	movs	r1, #44	; 0x2c
 8003ac8:	fb01 f303 	mul.w	r3, r1, r3
 8003acc:	4413      	add	r3, r2
 8003ace:	3354      	adds	r3, #84	; 0x54
 8003ad0:	4602      	mov	r2, r0
 8003ad2:	701a      	strb	r2, [r3, #0]
      break;
 8003ad4:	e00b      	b.n	8003aee <HCD_RXQLVL_IRQHandler+0x19a>
          hhcd->hc[ch_num].urb_state = URB_ERROR;
 8003ad6:	687a      	ldr	r2, [r7, #4]
 8003ad8:	69bb      	ldr	r3, [r7, #24]
 8003ada:	212c      	movs	r1, #44	; 0x2c
 8003adc:	fb01 f303 	mul.w	r3, r1, r3
 8003ae0:	4413      	add	r3, r2
 8003ae2:	3360      	adds	r3, #96	; 0x60
 8003ae4:	2204      	movs	r2, #4
 8003ae6:	701a      	strb	r2, [r3, #0]
      break;
 8003ae8:	e001      	b.n	8003aee <HCD_RXQLVL_IRQHandler+0x19a>
      break;
 8003aea:	bf00      	nop
 8003aec:	e000      	b.n	8003af0 <HCD_RXQLVL_IRQHandler+0x19c>
      break;
 8003aee:	bf00      	nop
  }
}
 8003af0:	bf00      	nop
 8003af2:	3728      	adds	r7, #40	; 0x28
 8003af4:	46bd      	mov	sp, r7
 8003af6:	bd80      	pop	{r7, pc}

08003af8 <HCD_Port_IRQHandler>:
  * @brief  Handle Host Port interrupt requests.
  * @param  hhcd HCD handle
  * @retval None
  */
static void HCD_Port_IRQHandler(HCD_HandleTypeDef *hhcd)
{
 8003af8:	b580      	push	{r7, lr}
 8003afa:	b086      	sub	sp, #24
 8003afc:	af00      	add	r7, sp, #0
 8003afe:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx = hhcd->Instance;
 8003b00:	687b      	ldr	r3, [r7, #4]
 8003b02:	681b      	ldr	r3, [r3, #0]
 8003b04:	617b      	str	r3, [r7, #20]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8003b06:	697b      	ldr	r3, [r7, #20]
 8003b08:	613b      	str	r3, [r7, #16]
  __IO uint32_t hprt0;
  __IO uint32_t hprt0_dup;

  /* Handle Host Port Interrupts */
  hprt0 = USBx_HPRT0;
 8003b0a:	693b      	ldr	r3, [r7, #16]
 8003b0c:	f503 6388 	add.w	r3, r3, #1088	; 0x440
 8003b10:	681b      	ldr	r3, [r3, #0]
 8003b12:	60fb      	str	r3, [r7, #12]
  hprt0_dup = USBx_HPRT0;
 8003b14:	693b      	ldr	r3, [r7, #16]
 8003b16:	f503 6388 	add.w	r3, r3, #1088	; 0x440
 8003b1a:	681b      	ldr	r3, [r3, #0]
 8003b1c:	60bb      	str	r3, [r7, #8]

  hprt0_dup &= ~(USB_OTG_HPRT_PENA | USB_OTG_HPRT_PCDET | \
 8003b1e:	68bb      	ldr	r3, [r7, #8]
 8003b20:	f023 032e 	bic.w	r3, r3, #46	; 0x2e
 8003b24:	60bb      	str	r3, [r7, #8]
                 USB_OTG_HPRT_PENCHNG | USB_OTG_HPRT_POCCHNG);

  /* Check whether Port Connect detected */
  if ((hprt0 & USB_OTG_HPRT_PCDET) == USB_OTG_HPRT_PCDET)
 8003b26:	68fb      	ldr	r3, [r7, #12]
 8003b28:	f003 0302 	and.w	r3, r3, #2
 8003b2c:	2b02      	cmp	r3, #2
 8003b2e:	d10b      	bne.n	8003b48 <HCD_Port_IRQHandler+0x50>
  {
    if ((hprt0 & USB_OTG_HPRT_PCSTS) == USB_OTG_HPRT_PCSTS)
 8003b30:	68fb      	ldr	r3, [r7, #12]
 8003b32:	f003 0301 	and.w	r3, r3, #1
 8003b36:	2b01      	cmp	r3, #1
 8003b38:	d102      	bne.n	8003b40 <HCD_Port_IRQHandler+0x48>
    {
#if (USE_HAL_HCD_REGISTER_CALLBACKS == 1U)
      hhcd->ConnectCallback(hhcd);
#else
      HAL_HCD_Connect_Callback(hhcd);
 8003b3a:	6878      	ldr	r0, [r7, #4]
 8003b3c:	f7ff f816 	bl	8002b6c <HAL_HCD_Connect_Callback>
#endif /* USE_HAL_HCD_REGISTER_CALLBACKS */
    }
    hprt0_dup |= USB_OTG_HPRT_PCDET;
 8003b40:	68bb      	ldr	r3, [r7, #8]
 8003b42:	f043 0302 	orr.w	r3, r3, #2
 8003b46:	60bb      	str	r3, [r7, #8]
  }

  /* Check whether Port Enable Changed */
  if ((hprt0 & USB_OTG_HPRT_PENCHNG) == USB_OTG_HPRT_PENCHNG)
 8003b48:	68fb      	ldr	r3, [r7, #12]
 8003b4a:	f003 0308 	and.w	r3, r3, #8
 8003b4e:	2b08      	cmp	r3, #8
 8003b50:	d132      	bne.n	8003bb8 <HCD_Port_IRQHandler+0xc0>
  {
    hprt0_dup |= USB_OTG_HPRT_PENCHNG;
 8003b52:	68bb      	ldr	r3, [r7, #8]
 8003b54:	f043 0308 	orr.w	r3, r3, #8
 8003b58:	60bb      	str	r3, [r7, #8]

    if ((hprt0 & USB_OTG_HPRT_PENA) == USB_OTG_HPRT_PENA)
 8003b5a:	68fb      	ldr	r3, [r7, #12]
 8003b5c:	f003 0304 	and.w	r3, r3, #4
 8003b60:	2b04      	cmp	r3, #4
 8003b62:	d126      	bne.n	8003bb2 <HCD_Port_IRQHandler+0xba>
    {
      if (hhcd->Init.phy_itface  == USB_OTG_EMBEDDED_PHY)
 8003b64:	687b      	ldr	r3, [r7, #4]
 8003b66:	699b      	ldr	r3, [r3, #24]
 8003b68:	2b02      	cmp	r3, #2
 8003b6a:	d113      	bne.n	8003b94 <HCD_Port_IRQHandler+0x9c>
      {
        if ((hprt0 & USB_OTG_HPRT_PSPD) == (HPRT0_PRTSPD_LOW_SPEED << 17))
 8003b6c:	68fb      	ldr	r3, [r7, #12]
 8003b6e:	f403 23c0 	and.w	r3, r3, #393216	; 0x60000
 8003b72:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 8003b76:	d106      	bne.n	8003b86 <HCD_Port_IRQHandler+0x8e>
        {
          (void)USB_InitFSLSPClkSel(hhcd->Instance, HCFG_6_MHZ);
 8003b78:	687b      	ldr	r3, [r7, #4]
 8003b7a:	681b      	ldr	r3, [r3, #0]
 8003b7c:	2102      	movs	r1, #2
 8003b7e:	4618      	mov	r0, r3
 8003b80:	f003 f836 	bl	8006bf0 <USB_InitFSLSPClkSel>
 8003b84:	e011      	b.n	8003baa <HCD_Port_IRQHandler+0xb2>
        }
        else
        {
          (void)USB_InitFSLSPClkSel(hhcd->Instance, HCFG_48_MHZ);
 8003b86:	687b      	ldr	r3, [r7, #4]
 8003b88:	681b      	ldr	r3, [r3, #0]
 8003b8a:	2101      	movs	r1, #1
 8003b8c:	4618      	mov	r0, r3
 8003b8e:	f003 f82f 	bl	8006bf0 <USB_InitFSLSPClkSel>
 8003b92:	e00a      	b.n	8003baa <HCD_Port_IRQHandler+0xb2>
        }
      }
      else
      {
        if (hhcd->Init.speed == HCD_SPEED_FULL)
 8003b94:	687b      	ldr	r3, [r7, #4]
 8003b96:	68db      	ldr	r3, [r3, #12]
 8003b98:	2b01      	cmp	r3, #1
 8003b9a:	d106      	bne.n	8003baa <HCD_Port_IRQHandler+0xb2>
        {
          USBx_HOST->HFIR = 60000U;
 8003b9c:	693b      	ldr	r3, [r7, #16]
 8003b9e:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8003ba2:	461a      	mov	r2, r3
 8003ba4:	f64e 2360 	movw	r3, #60000	; 0xea60
 8003ba8:	6053      	str	r3, [r2, #4]
        }
      }
#if (USE_HAL_HCD_REGISTER_CALLBACKS == 1U)
      hhcd->PortEnabledCallback(hhcd);
#else
      HAL_HCD_PortEnabled_Callback(hhcd);
 8003baa:	6878      	ldr	r0, [r7, #4]
 8003bac:	f7fe fff2 	bl	8002b94 <HAL_HCD_PortEnabled_Callback>
 8003bb0:	e002      	b.n	8003bb8 <HCD_Port_IRQHandler+0xc0>
    else
    {
#if (USE_HAL_HCD_REGISTER_CALLBACKS == 1U)
      hhcd->PortDisabledCallback(hhcd);
#else
      HAL_HCD_PortDisabled_Callback(hhcd);
 8003bb2:	6878      	ldr	r0, [r7, #4]
 8003bb4:	f7fe fff8 	bl	8002ba8 <HAL_HCD_PortDisabled_Callback>
#endif /* USE_HAL_HCD_REGISTER_CALLBACKS */
    }
  }

  /* Check for an overcurrent */
  if ((hprt0 & USB_OTG_HPRT_POCCHNG) == USB_OTG_HPRT_POCCHNG)
 8003bb8:	68fb      	ldr	r3, [r7, #12]
 8003bba:	f003 0320 	and.w	r3, r3, #32
 8003bbe:	2b20      	cmp	r3, #32
 8003bc0:	d103      	bne.n	8003bca <HCD_Port_IRQHandler+0xd2>
  {
    hprt0_dup |= USB_OTG_HPRT_POCCHNG;
 8003bc2:	68bb      	ldr	r3, [r7, #8]
 8003bc4:	f043 0320 	orr.w	r3, r3, #32
 8003bc8:	60bb      	str	r3, [r7, #8]
  }

  /* Clear Port Interrupts */
  USBx_HPRT0 = hprt0_dup;
 8003bca:	693b      	ldr	r3, [r7, #16]
 8003bcc:	f503 6388 	add.w	r3, r3, #1088	; 0x440
 8003bd0:	461a      	mov	r2, r3
 8003bd2:	68bb      	ldr	r3, [r7, #8]
 8003bd4:	6013      	str	r3, [r2, #0]
}
 8003bd6:	bf00      	nop
 8003bd8:	3718      	adds	r7, #24
 8003bda:	46bd      	mov	sp, r7
 8003bdc:	bd80      	pop	{r7, pc}
	...

08003be0 <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 8003be0:	b580      	push	{r7, lr}
 8003be2:	b084      	sub	sp, #16
 8003be4:	af00      	add	r7, sp, #0
 8003be6:	6078      	str	r0, [r7, #4]
  uint32_t freqrange;
  uint32_t pclk1;

  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 8003be8:	687b      	ldr	r3, [r7, #4]
 8003bea:	2b00      	cmp	r3, #0
 8003bec:	d101      	bne.n	8003bf2 <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 8003bee:	2301      	movs	r3, #1
 8003bf0:	e12b      	b.n	8003e4a <HAL_I2C_Init+0x26a>
  assert_param(IS_I2C_DUAL_ADDRESS(hi2c->Init.DualAddressMode));
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 8003bf2:	687b      	ldr	r3, [r7, #4]
 8003bf4:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8003bf8:	b2db      	uxtb	r3, r3
 8003bfa:	2b00      	cmp	r3, #0
 8003bfc:	d106      	bne.n	8003c0c <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 8003bfe:	687b      	ldr	r3, [r7, #4]
 8003c00:	2200      	movs	r2, #0
 8003c02:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_I2C_MspInit(hi2c);
 8003c06:	6878      	ldr	r0, [r7, #4]
 8003c08:	f7fd fa9a 	bl	8001140 <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 8003c0c:	687b      	ldr	r3, [r7, #4]
 8003c0e:	2224      	movs	r2, #36	; 0x24
 8003c10:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 8003c14:	687b      	ldr	r3, [r7, #4]
 8003c16:	681b      	ldr	r3, [r3, #0]
 8003c18:	681a      	ldr	r2, [r3, #0]
 8003c1a:	687b      	ldr	r3, [r7, #4]
 8003c1c:	681b      	ldr	r3, [r3, #0]
 8003c1e:	f022 0201 	bic.w	r2, r2, #1
 8003c22:	601a      	str	r2, [r3, #0]

  /*Reset I2C*/
  hi2c->Instance->CR1 |= I2C_CR1_SWRST;
 8003c24:	687b      	ldr	r3, [r7, #4]
 8003c26:	681b      	ldr	r3, [r3, #0]
 8003c28:	681a      	ldr	r2, [r3, #0]
 8003c2a:	687b      	ldr	r3, [r7, #4]
 8003c2c:	681b      	ldr	r3, [r3, #0]
 8003c2e:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8003c32:	601a      	str	r2, [r3, #0]
  hi2c->Instance->CR1 &= ~I2C_CR1_SWRST;
 8003c34:	687b      	ldr	r3, [r7, #4]
 8003c36:	681b      	ldr	r3, [r3, #0]
 8003c38:	681a      	ldr	r2, [r3, #0]
 8003c3a:	687b      	ldr	r3, [r7, #4]
 8003c3c:	681b      	ldr	r3, [r3, #0]
 8003c3e:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 8003c42:	601a      	str	r2, [r3, #0]

  /* Get PCLK1 frequency */
  pclk1 = HAL_RCC_GetPCLK1Freq();
 8003c44:	f001 f964 	bl	8004f10 <HAL_RCC_GetPCLK1Freq>
 8003c48:	60f8      	str	r0, [r7, #12]

  /* Check the minimum allowed PCLK1 frequency */
  if (I2C_MIN_PCLK_FREQ(pclk1, hi2c->Init.ClockSpeed) == 1U)
 8003c4a:	687b      	ldr	r3, [r7, #4]
 8003c4c:	685b      	ldr	r3, [r3, #4]
 8003c4e:	4a81      	ldr	r2, [pc, #516]	; (8003e54 <HAL_I2C_Init+0x274>)
 8003c50:	4293      	cmp	r3, r2
 8003c52:	d807      	bhi.n	8003c64 <HAL_I2C_Init+0x84>
 8003c54:	68fb      	ldr	r3, [r7, #12]
 8003c56:	4a80      	ldr	r2, [pc, #512]	; (8003e58 <HAL_I2C_Init+0x278>)
 8003c58:	4293      	cmp	r3, r2
 8003c5a:	bf94      	ite	ls
 8003c5c:	2301      	movls	r3, #1
 8003c5e:	2300      	movhi	r3, #0
 8003c60:	b2db      	uxtb	r3, r3
 8003c62:	e006      	b.n	8003c72 <HAL_I2C_Init+0x92>
 8003c64:	68fb      	ldr	r3, [r7, #12]
 8003c66:	4a7d      	ldr	r2, [pc, #500]	; (8003e5c <HAL_I2C_Init+0x27c>)
 8003c68:	4293      	cmp	r3, r2
 8003c6a:	bf94      	ite	ls
 8003c6c:	2301      	movls	r3, #1
 8003c6e:	2300      	movhi	r3, #0
 8003c70:	b2db      	uxtb	r3, r3
 8003c72:	2b00      	cmp	r3, #0
 8003c74:	d001      	beq.n	8003c7a <HAL_I2C_Init+0x9a>
  {
    return HAL_ERROR;
 8003c76:	2301      	movs	r3, #1
 8003c78:	e0e7      	b.n	8003e4a <HAL_I2C_Init+0x26a>
  }

  /* Calculate frequency range */
  freqrange = I2C_FREQRANGE(pclk1);
 8003c7a:	68fb      	ldr	r3, [r7, #12]
 8003c7c:	4a78      	ldr	r2, [pc, #480]	; (8003e60 <HAL_I2C_Init+0x280>)
 8003c7e:	fba2 2303 	umull	r2, r3, r2, r3
 8003c82:	0c9b      	lsrs	r3, r3, #18
 8003c84:	60bb      	str	r3, [r7, #8]

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Frequency range */
  MODIFY_REG(hi2c->Instance->CR2, I2C_CR2_FREQ, freqrange);
 8003c86:	687b      	ldr	r3, [r7, #4]
 8003c88:	681b      	ldr	r3, [r3, #0]
 8003c8a:	685b      	ldr	r3, [r3, #4]
 8003c8c:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 8003c90:	687b      	ldr	r3, [r7, #4]
 8003c92:	681b      	ldr	r3, [r3, #0]
 8003c94:	68ba      	ldr	r2, [r7, #8]
 8003c96:	430a      	orrs	r2, r1
 8003c98:	605a      	str	r2, [r3, #4]

  /*---------------------------- I2Cx TRISE Configuration --------------------*/
  /* Configure I2Cx: Rise Time */
  MODIFY_REG(hi2c->Instance->TRISE, I2C_TRISE_TRISE, I2C_RISE_TIME(freqrange, hi2c->Init.ClockSpeed));
 8003c9a:	687b      	ldr	r3, [r7, #4]
 8003c9c:	681b      	ldr	r3, [r3, #0]
 8003c9e:	6a1b      	ldr	r3, [r3, #32]
 8003ca0:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 8003ca4:	687b      	ldr	r3, [r7, #4]
 8003ca6:	685b      	ldr	r3, [r3, #4]
 8003ca8:	4a6a      	ldr	r2, [pc, #424]	; (8003e54 <HAL_I2C_Init+0x274>)
 8003caa:	4293      	cmp	r3, r2
 8003cac:	d802      	bhi.n	8003cb4 <HAL_I2C_Init+0xd4>
 8003cae:	68bb      	ldr	r3, [r7, #8]
 8003cb0:	3301      	adds	r3, #1
 8003cb2:	e009      	b.n	8003cc8 <HAL_I2C_Init+0xe8>
 8003cb4:	68bb      	ldr	r3, [r7, #8]
 8003cb6:	f44f 7296 	mov.w	r2, #300	; 0x12c
 8003cba:	fb02 f303 	mul.w	r3, r2, r3
 8003cbe:	4a69      	ldr	r2, [pc, #420]	; (8003e64 <HAL_I2C_Init+0x284>)
 8003cc0:	fba2 2303 	umull	r2, r3, r2, r3
 8003cc4:	099b      	lsrs	r3, r3, #6
 8003cc6:	3301      	adds	r3, #1
 8003cc8:	687a      	ldr	r2, [r7, #4]
 8003cca:	6812      	ldr	r2, [r2, #0]
 8003ccc:	430b      	orrs	r3, r1
 8003cce:	6213      	str	r3, [r2, #32]

  /*---------------------------- I2Cx CCR Configuration ----------------------*/
  /* Configure I2Cx: Speed */
  MODIFY_REG(hi2c->Instance->CCR, (I2C_CCR_FS | I2C_CCR_DUTY | I2C_CCR_CCR), I2C_SPEED(pclk1, hi2c->Init.ClockSpeed, hi2c->Init.DutyCycle));
 8003cd0:	687b      	ldr	r3, [r7, #4]
 8003cd2:	681b      	ldr	r3, [r3, #0]
 8003cd4:	69db      	ldr	r3, [r3, #28]
 8003cd6:	f423 424f 	bic.w	r2, r3, #52992	; 0xcf00
 8003cda:	f022 02ff 	bic.w	r2, r2, #255	; 0xff
 8003cde:	687b      	ldr	r3, [r7, #4]
 8003ce0:	685b      	ldr	r3, [r3, #4]
 8003ce2:	495c      	ldr	r1, [pc, #368]	; (8003e54 <HAL_I2C_Init+0x274>)
 8003ce4:	428b      	cmp	r3, r1
 8003ce6:	d819      	bhi.n	8003d1c <HAL_I2C_Init+0x13c>
 8003ce8:	68fb      	ldr	r3, [r7, #12]
 8003cea:	1e59      	subs	r1, r3, #1
 8003cec:	687b      	ldr	r3, [r7, #4]
 8003cee:	685b      	ldr	r3, [r3, #4]
 8003cf0:	005b      	lsls	r3, r3, #1
 8003cf2:	fbb1 f3f3 	udiv	r3, r1, r3
 8003cf6:	1c59      	adds	r1, r3, #1
 8003cf8:	f640 73fc 	movw	r3, #4092	; 0xffc
 8003cfc:	400b      	ands	r3, r1
 8003cfe:	2b00      	cmp	r3, #0
 8003d00:	d00a      	beq.n	8003d18 <HAL_I2C_Init+0x138>
 8003d02:	68fb      	ldr	r3, [r7, #12]
 8003d04:	1e59      	subs	r1, r3, #1
 8003d06:	687b      	ldr	r3, [r7, #4]
 8003d08:	685b      	ldr	r3, [r3, #4]
 8003d0a:	005b      	lsls	r3, r3, #1
 8003d0c:	fbb1 f3f3 	udiv	r3, r1, r3
 8003d10:	3301      	adds	r3, #1
 8003d12:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8003d16:	e051      	b.n	8003dbc <HAL_I2C_Init+0x1dc>
 8003d18:	2304      	movs	r3, #4
 8003d1a:	e04f      	b.n	8003dbc <HAL_I2C_Init+0x1dc>
 8003d1c:	687b      	ldr	r3, [r7, #4]
 8003d1e:	689b      	ldr	r3, [r3, #8]
 8003d20:	2b00      	cmp	r3, #0
 8003d22:	d111      	bne.n	8003d48 <HAL_I2C_Init+0x168>
 8003d24:	68fb      	ldr	r3, [r7, #12]
 8003d26:	1e58      	subs	r0, r3, #1
 8003d28:	687b      	ldr	r3, [r7, #4]
 8003d2a:	6859      	ldr	r1, [r3, #4]
 8003d2c:	460b      	mov	r3, r1
 8003d2e:	005b      	lsls	r3, r3, #1
 8003d30:	440b      	add	r3, r1
 8003d32:	fbb0 f3f3 	udiv	r3, r0, r3
 8003d36:	3301      	adds	r3, #1
 8003d38:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8003d3c:	2b00      	cmp	r3, #0
 8003d3e:	bf0c      	ite	eq
 8003d40:	2301      	moveq	r3, #1
 8003d42:	2300      	movne	r3, #0
 8003d44:	b2db      	uxtb	r3, r3
 8003d46:	e012      	b.n	8003d6e <HAL_I2C_Init+0x18e>
 8003d48:	68fb      	ldr	r3, [r7, #12]
 8003d4a:	1e58      	subs	r0, r3, #1
 8003d4c:	687b      	ldr	r3, [r7, #4]
 8003d4e:	6859      	ldr	r1, [r3, #4]
 8003d50:	460b      	mov	r3, r1
 8003d52:	009b      	lsls	r3, r3, #2
 8003d54:	440b      	add	r3, r1
 8003d56:	0099      	lsls	r1, r3, #2
 8003d58:	440b      	add	r3, r1
 8003d5a:	fbb0 f3f3 	udiv	r3, r0, r3
 8003d5e:	3301      	adds	r3, #1
 8003d60:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8003d64:	2b00      	cmp	r3, #0
 8003d66:	bf0c      	ite	eq
 8003d68:	2301      	moveq	r3, #1
 8003d6a:	2300      	movne	r3, #0
 8003d6c:	b2db      	uxtb	r3, r3
 8003d6e:	2b00      	cmp	r3, #0
 8003d70:	d001      	beq.n	8003d76 <HAL_I2C_Init+0x196>
 8003d72:	2301      	movs	r3, #1
 8003d74:	e022      	b.n	8003dbc <HAL_I2C_Init+0x1dc>
 8003d76:	687b      	ldr	r3, [r7, #4]
 8003d78:	689b      	ldr	r3, [r3, #8]
 8003d7a:	2b00      	cmp	r3, #0
 8003d7c:	d10e      	bne.n	8003d9c <HAL_I2C_Init+0x1bc>
 8003d7e:	68fb      	ldr	r3, [r7, #12]
 8003d80:	1e58      	subs	r0, r3, #1
 8003d82:	687b      	ldr	r3, [r7, #4]
 8003d84:	6859      	ldr	r1, [r3, #4]
 8003d86:	460b      	mov	r3, r1
 8003d88:	005b      	lsls	r3, r3, #1
 8003d8a:	440b      	add	r3, r1
 8003d8c:	fbb0 f3f3 	udiv	r3, r0, r3
 8003d90:	3301      	adds	r3, #1
 8003d92:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8003d96:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8003d9a:	e00f      	b.n	8003dbc <HAL_I2C_Init+0x1dc>
 8003d9c:	68fb      	ldr	r3, [r7, #12]
 8003d9e:	1e58      	subs	r0, r3, #1
 8003da0:	687b      	ldr	r3, [r7, #4]
 8003da2:	6859      	ldr	r1, [r3, #4]
 8003da4:	460b      	mov	r3, r1
 8003da6:	009b      	lsls	r3, r3, #2
 8003da8:	440b      	add	r3, r1
 8003daa:	0099      	lsls	r1, r3, #2
 8003dac:	440b      	add	r3, r1
 8003dae:	fbb0 f3f3 	udiv	r3, r0, r3
 8003db2:	3301      	adds	r3, #1
 8003db4:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8003db8:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8003dbc:	6879      	ldr	r1, [r7, #4]
 8003dbe:	6809      	ldr	r1, [r1, #0]
 8003dc0:	4313      	orrs	r3, r2
 8003dc2:	61cb      	str	r3, [r1, #28]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  MODIFY_REG(hi2c->Instance->CR1, (I2C_CR1_ENGC | I2C_CR1_NOSTRETCH), (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode));
 8003dc4:	687b      	ldr	r3, [r7, #4]
 8003dc6:	681b      	ldr	r3, [r3, #0]
 8003dc8:	681b      	ldr	r3, [r3, #0]
 8003dca:	f023 01c0 	bic.w	r1, r3, #192	; 0xc0
 8003dce:	687b      	ldr	r3, [r7, #4]
 8003dd0:	69da      	ldr	r2, [r3, #28]
 8003dd2:	687b      	ldr	r3, [r7, #4]
 8003dd4:	6a1b      	ldr	r3, [r3, #32]
 8003dd6:	431a      	orrs	r2, r3
 8003dd8:	687b      	ldr	r3, [r7, #4]
 8003dda:	681b      	ldr	r3, [r3, #0]
 8003ddc:	430a      	orrs	r2, r1
 8003dde:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Configure I2Cx: Own Address1 and addressing mode */
  MODIFY_REG(hi2c->Instance->OAR1, (I2C_OAR1_ADDMODE | I2C_OAR1_ADD8_9 | I2C_OAR1_ADD1_7 | I2C_OAR1_ADD0), (hi2c->Init.AddressingMode | hi2c->Init.OwnAddress1));
 8003de0:	687b      	ldr	r3, [r7, #4]
 8003de2:	681b      	ldr	r3, [r3, #0]
 8003de4:	689b      	ldr	r3, [r3, #8]
 8003de6:	f423 4303 	bic.w	r3, r3, #33536	; 0x8300
 8003dea:	f023 03ff 	bic.w	r3, r3, #255	; 0xff
 8003dee:	687a      	ldr	r2, [r7, #4]
 8003df0:	6911      	ldr	r1, [r2, #16]
 8003df2:	687a      	ldr	r2, [r7, #4]
 8003df4:	68d2      	ldr	r2, [r2, #12]
 8003df6:	4311      	orrs	r1, r2
 8003df8:	687a      	ldr	r2, [r7, #4]
 8003dfa:	6812      	ldr	r2, [r2, #0]
 8003dfc:	430b      	orrs	r3, r1
 8003dfe:	6093      	str	r3, [r2, #8]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Configure I2Cx: Dual mode and Own Address2 */
  MODIFY_REG(hi2c->Instance->OAR2, (I2C_OAR2_ENDUAL | I2C_OAR2_ADD2), (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2));
 8003e00:	687b      	ldr	r3, [r7, #4]
 8003e02:	681b      	ldr	r3, [r3, #0]
 8003e04:	68db      	ldr	r3, [r3, #12]
 8003e06:	f023 01ff 	bic.w	r1, r3, #255	; 0xff
 8003e0a:	687b      	ldr	r3, [r7, #4]
 8003e0c:	695a      	ldr	r2, [r3, #20]
 8003e0e:	687b      	ldr	r3, [r7, #4]
 8003e10:	699b      	ldr	r3, [r3, #24]
 8003e12:	431a      	orrs	r2, r3
 8003e14:	687b      	ldr	r3, [r7, #4]
 8003e16:	681b      	ldr	r3, [r3, #0]
 8003e18:	430a      	orrs	r2, r1
 8003e1a:	60da      	str	r2, [r3, #12]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 8003e1c:	687b      	ldr	r3, [r7, #4]
 8003e1e:	681b      	ldr	r3, [r3, #0]
 8003e20:	681a      	ldr	r2, [r3, #0]
 8003e22:	687b      	ldr	r3, [r7, #4]
 8003e24:	681b      	ldr	r3, [r3, #0]
 8003e26:	f042 0201 	orr.w	r2, r2, #1
 8003e2a:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8003e2c:	687b      	ldr	r3, [r7, #4]
 8003e2e:	2200      	movs	r2, #0
 8003e30:	641a      	str	r2, [r3, #64]	; 0x40
  hi2c->State = HAL_I2C_STATE_READY;
 8003e32:	687b      	ldr	r3, [r7, #4]
 8003e34:	2220      	movs	r2, #32
 8003e36:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  hi2c->PreviousState = I2C_STATE_NONE;
 8003e3a:	687b      	ldr	r3, [r7, #4]
 8003e3c:	2200      	movs	r2, #0
 8003e3e:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8003e40:	687b      	ldr	r3, [r7, #4]
 8003e42:	2200      	movs	r2, #0
 8003e44:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 8003e48:	2300      	movs	r3, #0
}
 8003e4a:	4618      	mov	r0, r3
 8003e4c:	3710      	adds	r7, #16
 8003e4e:	46bd      	mov	sp, r7
 8003e50:	bd80      	pop	{r7, pc}
 8003e52:	bf00      	nop
 8003e54:	000186a0 	.word	0x000186a0
 8003e58:	001e847f 	.word	0x001e847f
 8003e5c:	003d08ff 	.word	0x003d08ff
 8003e60:	431bde83 	.word	0x431bde83
 8003e64:	10624dd3 	.word	0x10624dd3

08003e68 <HAL_I2CEx_ConfigAnalogFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  AnalogFilter new state of the Analog filter.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigAnalogFilter(I2C_HandleTypeDef *hi2c, uint32_t AnalogFilter)
{
 8003e68:	b480      	push	{r7}
 8003e6a:	b083      	sub	sp, #12
 8003e6c:	af00      	add	r7, sp, #0
 8003e6e:	6078      	str	r0, [r7, #4]
 8003e70:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_ANALOG_FILTER(AnalogFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8003e72:	687b      	ldr	r3, [r7, #4]
 8003e74:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8003e78:	b2db      	uxtb	r3, r3
 8003e7a:	2b20      	cmp	r3, #32
 8003e7c:	d129      	bne.n	8003ed2 <HAL_I2CEx_ConfigAnalogFilter+0x6a>
  {
    hi2c->State = HAL_I2C_STATE_BUSY;
 8003e7e:	687b      	ldr	r3, [r7, #4]
 8003e80:	2224      	movs	r2, #36	; 0x24
 8003e82:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 8003e86:	687b      	ldr	r3, [r7, #4]
 8003e88:	681b      	ldr	r3, [r3, #0]
 8003e8a:	681a      	ldr	r2, [r3, #0]
 8003e8c:	687b      	ldr	r3, [r7, #4]
 8003e8e:	681b      	ldr	r3, [r3, #0]
 8003e90:	f022 0201 	bic.w	r2, r2, #1
 8003e94:	601a      	str	r2, [r3, #0]

    /* Reset I2Cx ANOFF bit */
    hi2c->Instance->FLTR &= ~(I2C_FLTR_ANOFF);
 8003e96:	687b      	ldr	r3, [r7, #4]
 8003e98:	681b      	ldr	r3, [r3, #0]
 8003e9a:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8003e9c:	687b      	ldr	r3, [r7, #4]
 8003e9e:	681b      	ldr	r3, [r3, #0]
 8003ea0:	f022 0210 	bic.w	r2, r2, #16
 8003ea4:	625a      	str	r2, [r3, #36]	; 0x24

    /* Disable the analog filter */
    hi2c->Instance->FLTR |= AnalogFilter;
 8003ea6:	687b      	ldr	r3, [r7, #4]
 8003ea8:	681b      	ldr	r3, [r3, #0]
 8003eaa:	6a59      	ldr	r1, [r3, #36]	; 0x24
 8003eac:	687b      	ldr	r3, [r7, #4]
 8003eae:	681b      	ldr	r3, [r3, #0]
 8003eb0:	683a      	ldr	r2, [r7, #0]
 8003eb2:	430a      	orrs	r2, r1
 8003eb4:	625a      	str	r2, [r3, #36]	; 0x24

    __HAL_I2C_ENABLE(hi2c);
 8003eb6:	687b      	ldr	r3, [r7, #4]
 8003eb8:	681b      	ldr	r3, [r3, #0]
 8003eba:	681a      	ldr	r2, [r3, #0]
 8003ebc:	687b      	ldr	r3, [r7, #4]
 8003ebe:	681b      	ldr	r3, [r3, #0]
 8003ec0:	f042 0201 	orr.w	r2, r2, #1
 8003ec4:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8003ec6:	687b      	ldr	r3, [r7, #4]
 8003ec8:	2220      	movs	r2, #32
 8003eca:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    return HAL_OK;
 8003ece:	2300      	movs	r3, #0
 8003ed0:	e000      	b.n	8003ed4 <HAL_I2CEx_ConfigAnalogFilter+0x6c>
  }
  else
  {
    return HAL_BUSY;
 8003ed2:	2302      	movs	r3, #2
  }
}
 8003ed4:	4618      	mov	r0, r3
 8003ed6:	370c      	adds	r7, #12
 8003ed8:	46bd      	mov	sp, r7
 8003eda:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003ede:	4770      	bx	lr

08003ee0 <HAL_I2CEx_ConfigDigitalFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  DigitalFilter Coefficient of digital noise filter between 0x00 and 0x0F.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigDigitalFilter(I2C_HandleTypeDef *hi2c, uint32_t DigitalFilter)
{
 8003ee0:	b480      	push	{r7}
 8003ee2:	b085      	sub	sp, #20
 8003ee4:	af00      	add	r7, sp, #0
 8003ee6:	6078      	str	r0, [r7, #4]
 8003ee8:	6039      	str	r1, [r7, #0]
  uint16_t tmpreg = 0;
 8003eea:	2300      	movs	r3, #0
 8003eec:	81fb      	strh	r3, [r7, #14]

  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_DIGITAL_FILTER(DigitalFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8003eee:	687b      	ldr	r3, [r7, #4]
 8003ef0:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8003ef4:	b2db      	uxtb	r3, r3
 8003ef6:	2b20      	cmp	r3, #32
 8003ef8:	d12a      	bne.n	8003f50 <HAL_I2CEx_ConfigDigitalFilter+0x70>
  {
    hi2c->State = HAL_I2C_STATE_BUSY;
 8003efa:	687b      	ldr	r3, [r7, #4]
 8003efc:	2224      	movs	r2, #36	; 0x24
 8003efe:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 8003f02:	687b      	ldr	r3, [r7, #4]
 8003f04:	681b      	ldr	r3, [r3, #0]
 8003f06:	681a      	ldr	r2, [r3, #0]
 8003f08:	687b      	ldr	r3, [r7, #4]
 8003f0a:	681b      	ldr	r3, [r3, #0]
 8003f0c:	f022 0201 	bic.w	r2, r2, #1
 8003f10:	601a      	str	r2, [r3, #0]

    /* Get the old register value */
    tmpreg = hi2c->Instance->FLTR;
 8003f12:	687b      	ldr	r3, [r7, #4]
 8003f14:	681b      	ldr	r3, [r3, #0]
 8003f16:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003f18:	81fb      	strh	r3, [r7, #14]

    /* Reset I2Cx DNF bit [3:0] */
    tmpreg &= ~(I2C_FLTR_DNF);
 8003f1a:	89fb      	ldrh	r3, [r7, #14]
 8003f1c:	f023 030f 	bic.w	r3, r3, #15
 8003f20:	81fb      	strh	r3, [r7, #14]

    /* Set I2Cx DNF coefficient */
    tmpreg |= DigitalFilter;
 8003f22:	683b      	ldr	r3, [r7, #0]
 8003f24:	b29a      	uxth	r2, r3
 8003f26:	89fb      	ldrh	r3, [r7, #14]
 8003f28:	4313      	orrs	r3, r2
 8003f2a:	81fb      	strh	r3, [r7, #14]

    /* Store the new register value */
    hi2c->Instance->FLTR = tmpreg;
 8003f2c:	687b      	ldr	r3, [r7, #4]
 8003f2e:	681b      	ldr	r3, [r3, #0]
 8003f30:	89fa      	ldrh	r2, [r7, #14]
 8003f32:	625a      	str	r2, [r3, #36]	; 0x24

    __HAL_I2C_ENABLE(hi2c);
 8003f34:	687b      	ldr	r3, [r7, #4]
 8003f36:	681b      	ldr	r3, [r3, #0]
 8003f38:	681a      	ldr	r2, [r3, #0]
 8003f3a:	687b      	ldr	r3, [r7, #4]
 8003f3c:	681b      	ldr	r3, [r3, #0]
 8003f3e:	f042 0201 	orr.w	r2, r2, #1
 8003f42:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8003f44:	687b      	ldr	r3, [r7, #4]
 8003f46:	2220      	movs	r2, #32
 8003f48:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    return HAL_OK;
 8003f4c:	2300      	movs	r3, #0
 8003f4e:	e000      	b.n	8003f52 <HAL_I2CEx_ConfigDigitalFilter+0x72>
  }
  else
  {
    return HAL_BUSY;
 8003f50:	2302      	movs	r3, #2
  }
}
 8003f52:	4618      	mov	r0, r3
 8003f54:	3714      	adds	r7, #20
 8003f56:	46bd      	mov	sp, r7
 8003f58:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003f5c:	4770      	bx	lr
	...

08003f60 <HAL_LTDC_Init>:
  * @param  hltdc  pointer to a LTDC_HandleTypeDef structure that contains
  *                the configuration information for the LTDC.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_LTDC_Init(LTDC_HandleTypeDef *hltdc)
{
 8003f60:	b580      	push	{r7, lr}
 8003f62:	b084      	sub	sp, #16
 8003f64:	af00      	add	r7, sp, #0
 8003f66:	6078      	str	r0, [r7, #4]
  uint32_t tmp;
  uint32_t tmp1;

  /* Check the LTDC peripheral state */
  if (hltdc == NULL)
 8003f68:	687b      	ldr	r3, [r7, #4]
 8003f6a:	2b00      	cmp	r3, #0
 8003f6c:	d101      	bne.n	8003f72 <HAL_LTDC_Init+0x12>
  {
    return HAL_ERROR;
 8003f6e:	2301      	movs	r3, #1
 8003f70:	e0bf      	b.n	80040f2 <HAL_LTDC_Init+0x192>
    }
    /* Init the low level hardware */
    hltdc->MspInitCallback(hltdc);
  }
#else
  if (hltdc->State == HAL_LTDC_STATE_RESET)
 8003f72:	687b      	ldr	r3, [r7, #4]
 8003f74:	f893 30a1 	ldrb.w	r3, [r3, #161]	; 0xa1
 8003f78:	b2db      	uxtb	r3, r3
 8003f7a:	2b00      	cmp	r3, #0
 8003f7c:	d106      	bne.n	8003f8c <HAL_LTDC_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hltdc->Lock = HAL_UNLOCKED;
 8003f7e:	687b      	ldr	r3, [r7, #4]
 8003f80:	2200      	movs	r2, #0
 8003f82:	f883 20a0 	strb.w	r2, [r3, #160]	; 0xa0
    /* Init the low level hardware */
    HAL_LTDC_MspInit(hltdc);
 8003f86:	6878      	ldr	r0, [r7, #4]
 8003f88:	f7fd f944 	bl	8001214 <HAL_LTDC_MspInit>
  }
#endif /* USE_HAL_LTDC_REGISTER_CALLBACKS */

  /* Change LTDC peripheral state */
  hltdc->State = HAL_LTDC_STATE_BUSY;
 8003f8c:	687b      	ldr	r3, [r7, #4]
 8003f8e:	2202      	movs	r2, #2
 8003f90:	f883 20a1 	strb.w	r2, [r3, #161]	; 0xa1

  /* Configure the HS, VS, DE and PC polarity */
  hltdc->Instance->GCR &= ~(LTDC_GCR_HSPOL | LTDC_GCR_VSPOL | LTDC_GCR_DEPOL | LTDC_GCR_PCPOL);
 8003f94:	687b      	ldr	r3, [r7, #4]
 8003f96:	681b      	ldr	r3, [r3, #0]
 8003f98:	699a      	ldr	r2, [r3, #24]
 8003f9a:	687b      	ldr	r3, [r7, #4]
 8003f9c:	681b      	ldr	r3, [r3, #0]
 8003f9e:	f022 4270 	bic.w	r2, r2, #4026531840	; 0xf0000000
 8003fa2:	619a      	str	r2, [r3, #24]
  hltdc->Instance->GCR |= (uint32_t)(hltdc->Init.HSPolarity | hltdc->Init.VSPolarity | \
 8003fa4:	687b      	ldr	r3, [r7, #4]
 8003fa6:	681b      	ldr	r3, [r3, #0]
 8003fa8:	6999      	ldr	r1, [r3, #24]
 8003faa:	687b      	ldr	r3, [r7, #4]
 8003fac:	685a      	ldr	r2, [r3, #4]
 8003fae:	687b      	ldr	r3, [r7, #4]
 8003fb0:	689b      	ldr	r3, [r3, #8]
 8003fb2:	431a      	orrs	r2, r3
                                     hltdc->Init.DEPolarity | hltdc->Init.PCPolarity);
 8003fb4:	687b      	ldr	r3, [r7, #4]
 8003fb6:	68db      	ldr	r3, [r3, #12]
  hltdc->Instance->GCR |= (uint32_t)(hltdc->Init.HSPolarity | hltdc->Init.VSPolarity | \
 8003fb8:	431a      	orrs	r2, r3
                                     hltdc->Init.DEPolarity | hltdc->Init.PCPolarity);
 8003fba:	687b      	ldr	r3, [r7, #4]
 8003fbc:	691b      	ldr	r3, [r3, #16]
 8003fbe:	431a      	orrs	r2, r3
  hltdc->Instance->GCR |= (uint32_t)(hltdc->Init.HSPolarity | hltdc->Init.VSPolarity | \
 8003fc0:	687b      	ldr	r3, [r7, #4]
 8003fc2:	681b      	ldr	r3, [r3, #0]
 8003fc4:	430a      	orrs	r2, r1
 8003fc6:	619a      	str	r2, [r3, #24]

  /* Set Synchronization size */
  hltdc->Instance->SSCR &= ~(LTDC_SSCR_VSH | LTDC_SSCR_HSW);
 8003fc8:	687b      	ldr	r3, [r7, #4]
 8003fca:	681b      	ldr	r3, [r3, #0]
 8003fcc:	6899      	ldr	r1, [r3, #8]
 8003fce:	687b      	ldr	r3, [r7, #4]
 8003fd0:	681a      	ldr	r2, [r3, #0]
 8003fd2:	4b4a      	ldr	r3, [pc, #296]	; (80040fc <HAL_LTDC_Init+0x19c>)
 8003fd4:	400b      	ands	r3, r1
 8003fd6:	6093      	str	r3, [r2, #8]
  tmp = (hltdc->Init.HorizontalSync << 16U);
 8003fd8:	687b      	ldr	r3, [r7, #4]
 8003fda:	695b      	ldr	r3, [r3, #20]
 8003fdc:	041b      	lsls	r3, r3, #16
 8003fde:	60fb      	str	r3, [r7, #12]
  hltdc->Instance->SSCR |= (tmp | hltdc->Init.VerticalSync);
 8003fe0:	687b      	ldr	r3, [r7, #4]
 8003fe2:	681b      	ldr	r3, [r3, #0]
 8003fe4:	6899      	ldr	r1, [r3, #8]
 8003fe6:	687b      	ldr	r3, [r7, #4]
 8003fe8:	699a      	ldr	r2, [r3, #24]
 8003fea:	68fb      	ldr	r3, [r7, #12]
 8003fec:	431a      	orrs	r2, r3
 8003fee:	687b      	ldr	r3, [r7, #4]
 8003ff0:	681b      	ldr	r3, [r3, #0]
 8003ff2:	430a      	orrs	r2, r1
 8003ff4:	609a      	str	r2, [r3, #8]

  /* Set Accumulated Back porch */
  hltdc->Instance->BPCR &= ~(LTDC_BPCR_AVBP | LTDC_BPCR_AHBP);
 8003ff6:	687b      	ldr	r3, [r7, #4]
 8003ff8:	681b      	ldr	r3, [r3, #0]
 8003ffa:	68d9      	ldr	r1, [r3, #12]
 8003ffc:	687b      	ldr	r3, [r7, #4]
 8003ffe:	681a      	ldr	r2, [r3, #0]
 8004000:	4b3e      	ldr	r3, [pc, #248]	; (80040fc <HAL_LTDC_Init+0x19c>)
 8004002:	400b      	ands	r3, r1
 8004004:	60d3      	str	r3, [r2, #12]
  tmp = (hltdc->Init.AccumulatedHBP << 16U);
 8004006:	687b      	ldr	r3, [r7, #4]
 8004008:	69db      	ldr	r3, [r3, #28]
 800400a:	041b      	lsls	r3, r3, #16
 800400c:	60fb      	str	r3, [r7, #12]
  hltdc->Instance->BPCR |= (tmp | hltdc->Init.AccumulatedVBP);
 800400e:	687b      	ldr	r3, [r7, #4]
 8004010:	681b      	ldr	r3, [r3, #0]
 8004012:	68d9      	ldr	r1, [r3, #12]
 8004014:	687b      	ldr	r3, [r7, #4]
 8004016:	6a1a      	ldr	r2, [r3, #32]
 8004018:	68fb      	ldr	r3, [r7, #12]
 800401a:	431a      	orrs	r2, r3
 800401c:	687b      	ldr	r3, [r7, #4]
 800401e:	681b      	ldr	r3, [r3, #0]
 8004020:	430a      	orrs	r2, r1
 8004022:	60da      	str	r2, [r3, #12]

  /* Set Accumulated Active Width */
  hltdc->Instance->AWCR &= ~(LTDC_AWCR_AAH | LTDC_AWCR_AAW);
 8004024:	687b      	ldr	r3, [r7, #4]
 8004026:	681b      	ldr	r3, [r3, #0]
 8004028:	6919      	ldr	r1, [r3, #16]
 800402a:	687b      	ldr	r3, [r7, #4]
 800402c:	681a      	ldr	r2, [r3, #0]
 800402e:	4b33      	ldr	r3, [pc, #204]	; (80040fc <HAL_LTDC_Init+0x19c>)
 8004030:	400b      	ands	r3, r1
 8004032:	6113      	str	r3, [r2, #16]
  tmp = (hltdc->Init.AccumulatedActiveW << 16U);
 8004034:	687b      	ldr	r3, [r7, #4]
 8004036:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004038:	041b      	lsls	r3, r3, #16
 800403a:	60fb      	str	r3, [r7, #12]
  hltdc->Instance->AWCR |= (tmp | hltdc->Init.AccumulatedActiveH);
 800403c:	687b      	ldr	r3, [r7, #4]
 800403e:	681b      	ldr	r3, [r3, #0]
 8004040:	6919      	ldr	r1, [r3, #16]
 8004042:	687b      	ldr	r3, [r7, #4]
 8004044:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8004046:	68fb      	ldr	r3, [r7, #12]
 8004048:	431a      	orrs	r2, r3
 800404a:	687b      	ldr	r3, [r7, #4]
 800404c:	681b      	ldr	r3, [r3, #0]
 800404e:	430a      	orrs	r2, r1
 8004050:	611a      	str	r2, [r3, #16]

  /* Set Total Width */
  hltdc->Instance->TWCR &= ~(LTDC_TWCR_TOTALH | LTDC_TWCR_TOTALW);
 8004052:	687b      	ldr	r3, [r7, #4]
 8004054:	681b      	ldr	r3, [r3, #0]
 8004056:	6959      	ldr	r1, [r3, #20]
 8004058:	687b      	ldr	r3, [r7, #4]
 800405a:	681a      	ldr	r2, [r3, #0]
 800405c:	4b27      	ldr	r3, [pc, #156]	; (80040fc <HAL_LTDC_Init+0x19c>)
 800405e:	400b      	ands	r3, r1
 8004060:	6153      	str	r3, [r2, #20]
  tmp = (hltdc->Init.TotalWidth << 16U);
 8004062:	687b      	ldr	r3, [r7, #4]
 8004064:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004066:	041b      	lsls	r3, r3, #16
 8004068:	60fb      	str	r3, [r7, #12]
  hltdc->Instance->TWCR |= (tmp | hltdc->Init.TotalHeigh);
 800406a:	687b      	ldr	r3, [r7, #4]
 800406c:	681b      	ldr	r3, [r3, #0]
 800406e:	6959      	ldr	r1, [r3, #20]
 8004070:	687b      	ldr	r3, [r7, #4]
 8004072:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8004074:	68fb      	ldr	r3, [r7, #12]
 8004076:	431a      	orrs	r2, r3
 8004078:	687b      	ldr	r3, [r7, #4]
 800407a:	681b      	ldr	r3, [r3, #0]
 800407c:	430a      	orrs	r2, r1
 800407e:	615a      	str	r2, [r3, #20]

  /* Set the background color value */
  tmp = ((uint32_t)(hltdc->Init.Backcolor.Green) << 8U);
 8004080:	687b      	ldr	r3, [r7, #4]
 8004082:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8004086:	021b      	lsls	r3, r3, #8
 8004088:	60fb      	str	r3, [r7, #12]
  tmp1 = ((uint32_t)(hltdc->Init.Backcolor.Red) << 16U);
 800408a:	687b      	ldr	r3, [r7, #4]
 800408c:	f893 3036 	ldrb.w	r3, [r3, #54]	; 0x36
 8004090:	041b      	lsls	r3, r3, #16
 8004092:	60bb      	str	r3, [r7, #8]
  hltdc->Instance->BCCR &= ~(LTDC_BCCR_BCBLUE | LTDC_BCCR_BCGREEN | LTDC_BCCR_BCRED);
 8004094:	687b      	ldr	r3, [r7, #4]
 8004096:	681b      	ldr	r3, [r3, #0]
 8004098:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800409a:	687b      	ldr	r3, [r7, #4]
 800409c:	681b      	ldr	r3, [r3, #0]
 800409e:	f002 427f 	and.w	r2, r2, #4278190080	; 0xff000000
 80040a2:	62da      	str	r2, [r3, #44]	; 0x2c
  hltdc->Instance->BCCR |= (tmp1 | tmp | hltdc->Init.Backcolor.Blue);
 80040a4:	687b      	ldr	r3, [r7, #4]
 80040a6:	681b      	ldr	r3, [r3, #0]
 80040a8:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 80040aa:	68ba      	ldr	r2, [r7, #8]
 80040ac:	68fb      	ldr	r3, [r7, #12]
 80040ae:	4313      	orrs	r3, r2
 80040b0:	687a      	ldr	r2, [r7, #4]
 80040b2:	f892 2034 	ldrb.w	r2, [r2, #52]	; 0x34
 80040b6:	431a      	orrs	r2, r3
 80040b8:	687b      	ldr	r3, [r7, #4]
 80040ba:	681b      	ldr	r3, [r3, #0]
 80040bc:	430a      	orrs	r2, r1
 80040be:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Enable the Transfer Error and FIFO underrun interrupts */
  __HAL_LTDC_ENABLE_IT(hltdc, LTDC_IT_TE | LTDC_IT_FU);
 80040c0:	687b      	ldr	r3, [r7, #4]
 80040c2:	681b      	ldr	r3, [r3, #0]
 80040c4:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 80040c6:	687b      	ldr	r3, [r7, #4]
 80040c8:	681b      	ldr	r3, [r3, #0]
 80040ca:	f042 0206 	orr.w	r2, r2, #6
 80040ce:	635a      	str	r2, [r3, #52]	; 0x34

  /* Enable LTDC by setting LTDCEN bit */
  __HAL_LTDC_ENABLE(hltdc);
 80040d0:	687b      	ldr	r3, [r7, #4]
 80040d2:	681b      	ldr	r3, [r3, #0]
 80040d4:	699a      	ldr	r2, [r3, #24]
 80040d6:	687b      	ldr	r3, [r7, #4]
 80040d8:	681b      	ldr	r3, [r3, #0]
 80040da:	f042 0201 	orr.w	r2, r2, #1
 80040de:	619a      	str	r2, [r3, #24]

  /* Initialize the error code */
  hltdc->ErrorCode = HAL_LTDC_ERROR_NONE;
 80040e0:	687b      	ldr	r3, [r7, #4]
 80040e2:	2200      	movs	r2, #0
 80040e4:	f8c3 20a4 	str.w	r2, [r3, #164]	; 0xa4

  /* Initialize the LTDC state*/
  hltdc->State = HAL_LTDC_STATE_READY;
 80040e8:	687b      	ldr	r3, [r7, #4]
 80040ea:	2201      	movs	r2, #1
 80040ec:	f883 20a1 	strb.w	r2, [r3, #161]	; 0xa1

  return HAL_OK;
 80040f0:	2300      	movs	r3, #0
}
 80040f2:	4618      	mov	r0, r3
 80040f4:	3710      	adds	r7, #16
 80040f6:	46bd      	mov	sp, r7
 80040f8:	bd80      	pop	{r7, pc}
 80040fa:	bf00      	nop
 80040fc:	f000f800 	.word	0xf000f800

08004100 <HAL_LTDC_IRQHandler>:
  * @param  hltdc  pointer to a LTDC_HandleTypeDef structure that contains
  *                the configuration information for the LTDC.
  * @retval HAL status
  */
void HAL_LTDC_IRQHandler(LTDC_HandleTypeDef *hltdc)
{
 8004100:	b580      	push	{r7, lr}
 8004102:	b084      	sub	sp, #16
 8004104:	af00      	add	r7, sp, #0
 8004106:	6078      	str	r0, [r7, #4]
  uint32_t isrflags  = READ_REG(hltdc->Instance->ISR);
 8004108:	687b      	ldr	r3, [r7, #4]
 800410a:	681b      	ldr	r3, [r3, #0]
 800410c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800410e:	60fb      	str	r3, [r7, #12]
  uint32_t itsources = READ_REG(hltdc->Instance->IER);
 8004110:	687b      	ldr	r3, [r7, #4]
 8004112:	681b      	ldr	r3, [r3, #0]
 8004114:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8004116:	60bb      	str	r3, [r7, #8]

  /* Transfer Error Interrupt management ***************************************/
  if (((isrflags & LTDC_ISR_TERRIF) != 0U) && ((itsources & LTDC_IER_TERRIE) != 0U))
 8004118:	68fb      	ldr	r3, [r7, #12]
 800411a:	f003 0304 	and.w	r3, r3, #4
 800411e:	2b00      	cmp	r3, #0
 8004120:	d023      	beq.n	800416a <HAL_LTDC_IRQHandler+0x6a>
 8004122:	68bb      	ldr	r3, [r7, #8]
 8004124:	f003 0304 	and.w	r3, r3, #4
 8004128:	2b00      	cmp	r3, #0
 800412a:	d01e      	beq.n	800416a <HAL_LTDC_IRQHandler+0x6a>
  {
    /* Disable the transfer Error interrupt */
    __HAL_LTDC_DISABLE_IT(hltdc, LTDC_IT_TE);
 800412c:	687b      	ldr	r3, [r7, #4]
 800412e:	681b      	ldr	r3, [r3, #0]
 8004130:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8004132:	687b      	ldr	r3, [r7, #4]
 8004134:	681b      	ldr	r3, [r3, #0]
 8004136:	f022 0204 	bic.w	r2, r2, #4
 800413a:	635a      	str	r2, [r3, #52]	; 0x34

    /* Clear the transfer error flag */
    __HAL_LTDC_CLEAR_FLAG(hltdc, LTDC_FLAG_TE);
 800413c:	687b      	ldr	r3, [r7, #4]
 800413e:	681b      	ldr	r3, [r3, #0]
 8004140:	2204      	movs	r2, #4
 8004142:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Update error code */
    hltdc->ErrorCode |= HAL_LTDC_ERROR_TE;
 8004144:	687b      	ldr	r3, [r7, #4]
 8004146:	f8d3 30a4 	ldr.w	r3, [r3, #164]	; 0xa4
 800414a:	f043 0201 	orr.w	r2, r3, #1
 800414e:	687b      	ldr	r3, [r7, #4]
 8004150:	f8c3 20a4 	str.w	r2, [r3, #164]	; 0xa4

    /* Change LTDC state */
    hltdc->State = HAL_LTDC_STATE_ERROR;
 8004154:	687b      	ldr	r3, [r7, #4]
 8004156:	2204      	movs	r2, #4
 8004158:	f883 20a1 	strb.w	r2, [r3, #161]	; 0xa1

    /* Process unlocked */
    __HAL_UNLOCK(hltdc);
 800415c:	687b      	ldr	r3, [r7, #4]
 800415e:	2200      	movs	r2, #0
 8004160:	f883 20a0 	strb.w	r2, [r3, #160]	; 0xa0
#if (USE_HAL_LTDC_REGISTER_CALLBACKS == 1)
    /*Call registered error callback*/
    hltdc->ErrorCallback(hltdc);
#else
    /* Call legacy error callback*/
    HAL_LTDC_ErrorCallback(hltdc);
 8004164:	6878      	ldr	r0, [r7, #4]
 8004166:	f000 f86f 	bl	8004248 <HAL_LTDC_ErrorCallback>
#endif /* USE_HAL_LTDC_REGISTER_CALLBACKS */
  }

  /* FIFO underrun Interrupt management ***************************************/
  if (((isrflags & LTDC_ISR_FUIF) != 0U) && ((itsources & LTDC_IER_FUIE) != 0U))
 800416a:	68fb      	ldr	r3, [r7, #12]
 800416c:	f003 0302 	and.w	r3, r3, #2
 8004170:	2b00      	cmp	r3, #0
 8004172:	d023      	beq.n	80041bc <HAL_LTDC_IRQHandler+0xbc>
 8004174:	68bb      	ldr	r3, [r7, #8]
 8004176:	f003 0302 	and.w	r3, r3, #2
 800417a:	2b00      	cmp	r3, #0
 800417c:	d01e      	beq.n	80041bc <HAL_LTDC_IRQHandler+0xbc>
  {
    /* Disable the FIFO underrun interrupt */
    __HAL_LTDC_DISABLE_IT(hltdc, LTDC_IT_FU);
 800417e:	687b      	ldr	r3, [r7, #4]
 8004180:	681b      	ldr	r3, [r3, #0]
 8004182:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8004184:	687b      	ldr	r3, [r7, #4]
 8004186:	681b      	ldr	r3, [r3, #0]
 8004188:	f022 0202 	bic.w	r2, r2, #2
 800418c:	635a      	str	r2, [r3, #52]	; 0x34

    /* Clear the FIFO underrun flag */
    __HAL_LTDC_CLEAR_FLAG(hltdc, LTDC_FLAG_FU);
 800418e:	687b      	ldr	r3, [r7, #4]
 8004190:	681b      	ldr	r3, [r3, #0]
 8004192:	2202      	movs	r2, #2
 8004194:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Update error code */
    hltdc->ErrorCode |= HAL_LTDC_ERROR_FU;
 8004196:	687b      	ldr	r3, [r7, #4]
 8004198:	f8d3 30a4 	ldr.w	r3, [r3, #164]	; 0xa4
 800419c:	f043 0202 	orr.w	r2, r3, #2
 80041a0:	687b      	ldr	r3, [r7, #4]
 80041a2:	f8c3 20a4 	str.w	r2, [r3, #164]	; 0xa4

    /* Change LTDC state */
    hltdc->State = HAL_LTDC_STATE_ERROR;
 80041a6:	687b      	ldr	r3, [r7, #4]
 80041a8:	2204      	movs	r2, #4
 80041aa:	f883 20a1 	strb.w	r2, [r3, #161]	; 0xa1

    /* Process unlocked */
    __HAL_UNLOCK(hltdc);
 80041ae:	687b      	ldr	r3, [r7, #4]
 80041b0:	2200      	movs	r2, #0
 80041b2:	f883 20a0 	strb.w	r2, [r3, #160]	; 0xa0
#if (USE_HAL_LTDC_REGISTER_CALLBACKS == 1)
    /*Call registered error callback*/
    hltdc->ErrorCallback(hltdc);
#else
    /* Call legacy error callback*/
    HAL_LTDC_ErrorCallback(hltdc);
 80041b6:	6878      	ldr	r0, [r7, #4]
 80041b8:	f000 f846 	bl	8004248 <HAL_LTDC_ErrorCallback>
#endif /* USE_HAL_LTDC_REGISTER_CALLBACKS */
  }

  /* Line Interrupt management ************************************************/
  if (((isrflags & LTDC_ISR_LIF) != 0U) && ((itsources & LTDC_IER_LIE) != 0U))
 80041bc:	68fb      	ldr	r3, [r7, #12]
 80041be:	f003 0301 	and.w	r3, r3, #1
 80041c2:	2b00      	cmp	r3, #0
 80041c4:	d01b      	beq.n	80041fe <HAL_LTDC_IRQHandler+0xfe>
 80041c6:	68bb      	ldr	r3, [r7, #8]
 80041c8:	f003 0301 	and.w	r3, r3, #1
 80041cc:	2b00      	cmp	r3, #0
 80041ce:	d016      	beq.n	80041fe <HAL_LTDC_IRQHandler+0xfe>
  {
    /* Disable the Line interrupt */
    __HAL_LTDC_DISABLE_IT(hltdc, LTDC_IT_LI);
 80041d0:	687b      	ldr	r3, [r7, #4]
 80041d2:	681b      	ldr	r3, [r3, #0]
 80041d4:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 80041d6:	687b      	ldr	r3, [r7, #4]
 80041d8:	681b      	ldr	r3, [r3, #0]
 80041da:	f022 0201 	bic.w	r2, r2, #1
 80041de:	635a      	str	r2, [r3, #52]	; 0x34

    /* Clear the Line interrupt flag */
    __HAL_LTDC_CLEAR_FLAG(hltdc, LTDC_FLAG_LI);
 80041e0:	687b      	ldr	r3, [r7, #4]
 80041e2:	681b      	ldr	r3, [r3, #0]
 80041e4:	2201      	movs	r2, #1
 80041e6:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Change LTDC state */
    hltdc->State = HAL_LTDC_STATE_READY;
 80041e8:	687b      	ldr	r3, [r7, #4]
 80041ea:	2201      	movs	r2, #1
 80041ec:	f883 20a1 	strb.w	r2, [r3, #161]	; 0xa1

    /* Process unlocked */
    __HAL_UNLOCK(hltdc);
 80041f0:	687b      	ldr	r3, [r7, #4]
 80041f2:	2200      	movs	r2, #0
 80041f4:	f883 20a0 	strb.w	r2, [r3, #160]	; 0xa0
#if (USE_HAL_LTDC_REGISTER_CALLBACKS == 1)
    /*Call registered Line Event callback */
    hltdc->LineEventCallback(hltdc);
#else
    /*Call Legacy Line Event callback */
    HAL_LTDC_LineEventCallback(hltdc);
 80041f8:	6878      	ldr	r0, [r7, #4]
 80041fa:	f000 f82f 	bl	800425c <HAL_LTDC_LineEventCallback>
#endif /* USE_HAL_LTDC_REGISTER_CALLBACKS */
  }

  /* Register reload Interrupt management ***************************************/
  if (((isrflags & LTDC_ISR_RRIF) != 0U) && ((itsources & LTDC_IER_RRIE) != 0U))
 80041fe:	68fb      	ldr	r3, [r7, #12]
 8004200:	f003 0308 	and.w	r3, r3, #8
 8004204:	2b00      	cmp	r3, #0
 8004206:	d01b      	beq.n	8004240 <HAL_LTDC_IRQHandler+0x140>
 8004208:	68bb      	ldr	r3, [r7, #8]
 800420a:	f003 0308 	and.w	r3, r3, #8
 800420e:	2b00      	cmp	r3, #0
 8004210:	d016      	beq.n	8004240 <HAL_LTDC_IRQHandler+0x140>
  {
    /* Disable the register reload interrupt */
    __HAL_LTDC_DISABLE_IT(hltdc, LTDC_IT_RR);
 8004212:	687b      	ldr	r3, [r7, #4]
 8004214:	681b      	ldr	r3, [r3, #0]
 8004216:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8004218:	687b      	ldr	r3, [r7, #4]
 800421a:	681b      	ldr	r3, [r3, #0]
 800421c:	f022 0208 	bic.w	r2, r2, #8
 8004220:	635a      	str	r2, [r3, #52]	; 0x34

    /* Clear the register reload flag */
    __HAL_LTDC_CLEAR_FLAG(hltdc, LTDC_FLAG_RR);
 8004222:	687b      	ldr	r3, [r7, #4]
 8004224:	681b      	ldr	r3, [r3, #0]
 8004226:	2208      	movs	r2, #8
 8004228:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Change LTDC state */
    hltdc->State = HAL_LTDC_STATE_READY;
 800422a:	687b      	ldr	r3, [r7, #4]
 800422c:	2201      	movs	r2, #1
 800422e:	f883 20a1 	strb.w	r2, [r3, #161]	; 0xa1

    /* Process unlocked */
    __HAL_UNLOCK(hltdc);
 8004232:	687b      	ldr	r3, [r7, #4]
 8004234:	2200      	movs	r2, #0
 8004236:	f883 20a0 	strb.w	r2, [r3, #160]	; 0xa0
#if (USE_HAL_LTDC_REGISTER_CALLBACKS == 1)
    /*Call registered reload Event callback */
    hltdc->ReloadEventCallback(hltdc);
#else
    /*Call Legacy Reload Event callback */
    HAL_LTDC_ReloadEventCallback(hltdc);
 800423a:	6878      	ldr	r0, [r7, #4]
 800423c:	f000 f818 	bl	8004270 <HAL_LTDC_ReloadEventCallback>
#endif /* USE_HAL_LTDC_REGISTER_CALLBACKS */
  }
}
 8004240:	bf00      	nop
 8004242:	3710      	adds	r7, #16
 8004244:	46bd      	mov	sp, r7
 8004246:	bd80      	pop	{r7, pc}

08004248 <HAL_LTDC_ErrorCallback>:
  * @param  hltdc  pointer to a LTDC_HandleTypeDef structure that contains
  *                the configuration information for the LTDC.
  * @retval None
  */
__weak void HAL_LTDC_ErrorCallback(LTDC_HandleTypeDef *hltdc)
{
 8004248:	b480      	push	{r7}
 800424a:	b083      	sub	sp, #12
 800424c:	af00      	add	r7, sp, #0
 800424e:	6078      	str	r0, [r7, #4]
  UNUSED(hltdc);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_LTDC_ErrorCallback could be implemented in the user file
   */
}
 8004250:	bf00      	nop
 8004252:	370c      	adds	r7, #12
 8004254:	46bd      	mov	sp, r7
 8004256:	f85d 7b04 	ldr.w	r7, [sp], #4
 800425a:	4770      	bx	lr

0800425c <HAL_LTDC_LineEventCallback>:
  * @param  hltdc  pointer to a LTDC_HandleTypeDef structure that contains
  *                the configuration information for the LTDC.
  * @retval None
  */
__weak void HAL_LTDC_LineEventCallback(LTDC_HandleTypeDef *hltdc)
{
 800425c:	b480      	push	{r7}
 800425e:	b083      	sub	sp, #12
 8004260:	af00      	add	r7, sp, #0
 8004262:	6078      	str	r0, [r7, #4]
  UNUSED(hltdc);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_LTDC_LineEventCallback could be implemented in the user file
   */
}
 8004264:	bf00      	nop
 8004266:	370c      	adds	r7, #12
 8004268:	46bd      	mov	sp, r7
 800426a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800426e:	4770      	bx	lr

08004270 <HAL_LTDC_ReloadEventCallback>:
  * @param  hltdc  pointer to a LTDC_HandleTypeDef structure that contains
  *                the configuration information for the LTDC.
  * @retval None
  */
__weak void HAL_LTDC_ReloadEventCallback(LTDC_HandleTypeDef *hltdc)
{
 8004270:	b480      	push	{r7}
 8004272:	b083      	sub	sp, #12
 8004274:	af00      	add	r7, sp, #0
 8004276:	6078      	str	r0, [r7, #4]
  UNUSED(hltdc);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_LTDC_ReloadEvenCallback could be implemented in the user file
   */
}
 8004278:	bf00      	nop
 800427a:	370c      	adds	r7, #12
 800427c:	46bd      	mov	sp, r7
 800427e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004282:	4770      	bx	lr

08004284 <HAL_LTDC_ConfigLayer>:
  *                    This parameter can be one of the following values:
  *                    LTDC_LAYER_1 (0) or LTDC_LAYER_2 (1)
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_LTDC_ConfigLayer(LTDC_HandleTypeDef *hltdc, LTDC_LayerCfgTypeDef *pLayerCfg, uint32_t LayerIdx)
{
 8004284:	b5b0      	push	{r4, r5, r7, lr}
 8004286:	b084      	sub	sp, #16
 8004288:	af00      	add	r7, sp, #0
 800428a:	60f8      	str	r0, [r7, #12]
 800428c:	60b9      	str	r1, [r7, #8]
 800428e:	607a      	str	r2, [r7, #4]
  assert_param(IS_LTDC_BLENDING_FACTOR2(pLayerCfg->BlendingFactor2));
  assert_param(IS_LTDC_CFBLL(pLayerCfg->ImageWidth));
  assert_param(IS_LTDC_CFBLNBR(pLayerCfg->ImageHeight));

  /* Process locked */
  __HAL_LOCK(hltdc);
 8004290:	68fb      	ldr	r3, [r7, #12]
 8004292:	f893 30a0 	ldrb.w	r3, [r3, #160]	; 0xa0
 8004296:	2b01      	cmp	r3, #1
 8004298:	d101      	bne.n	800429e <HAL_LTDC_ConfigLayer+0x1a>
 800429a:	2302      	movs	r3, #2
 800429c:	e02c      	b.n	80042f8 <HAL_LTDC_ConfigLayer+0x74>
 800429e:	68fb      	ldr	r3, [r7, #12]
 80042a0:	2201      	movs	r2, #1
 80042a2:	f883 20a0 	strb.w	r2, [r3, #160]	; 0xa0

  /* Change LTDC peripheral state */
  hltdc->State = HAL_LTDC_STATE_BUSY;
 80042a6:	68fb      	ldr	r3, [r7, #12]
 80042a8:	2202      	movs	r2, #2
 80042aa:	f883 20a1 	strb.w	r2, [r3, #161]	; 0xa1

  /* Copy new layer configuration into handle structure */
  hltdc->LayerCfg[LayerIdx] = *pLayerCfg;
 80042ae:	68fa      	ldr	r2, [r7, #12]
 80042b0:	687b      	ldr	r3, [r7, #4]
 80042b2:	2134      	movs	r1, #52	; 0x34
 80042b4:	fb01 f303 	mul.w	r3, r1, r3
 80042b8:	4413      	add	r3, r2
 80042ba:	f103 0238 	add.w	r2, r3, #56	; 0x38
 80042be:	68bb      	ldr	r3, [r7, #8]
 80042c0:	4614      	mov	r4, r2
 80042c2:	461d      	mov	r5, r3
 80042c4:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 80042c6:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 80042c8:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 80042ca:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 80042cc:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 80042ce:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 80042d0:	682b      	ldr	r3, [r5, #0]
 80042d2:	6023      	str	r3, [r4, #0]

  /* Configure the LTDC Layer */
  LTDC_SetConfig(hltdc, pLayerCfg, LayerIdx);
 80042d4:	687a      	ldr	r2, [r7, #4]
 80042d6:	68b9      	ldr	r1, [r7, #8]
 80042d8:	68f8      	ldr	r0, [r7, #12]
 80042da:	f000 f811 	bl	8004300 <LTDC_SetConfig>

  /* Set the Immediate Reload type */
  hltdc->Instance->SRCR = LTDC_SRCR_IMR;
 80042de:	68fb      	ldr	r3, [r7, #12]
 80042e0:	681b      	ldr	r3, [r3, #0]
 80042e2:	2201      	movs	r2, #1
 80042e4:	625a      	str	r2, [r3, #36]	; 0x24

  /* Initialize the LTDC state*/
  hltdc->State  = HAL_LTDC_STATE_READY;
 80042e6:	68fb      	ldr	r3, [r7, #12]
 80042e8:	2201      	movs	r2, #1
 80042ea:	f883 20a1 	strb.w	r2, [r3, #161]	; 0xa1

  /* Process unlocked */
  __HAL_UNLOCK(hltdc);
 80042ee:	68fb      	ldr	r3, [r7, #12]
 80042f0:	2200      	movs	r2, #0
 80042f2:	f883 20a0 	strb.w	r2, [r3, #160]	; 0xa0

  return HAL_OK;
 80042f6:	2300      	movs	r3, #0
}
 80042f8:	4618      	mov	r0, r3
 80042fa:	3710      	adds	r7, #16
 80042fc:	46bd      	mov	sp, r7
 80042fe:	bdb0      	pop	{r4, r5, r7, pc}

08004300 <LTDC_SetConfig>:
  * @param  LayerIdx  LTDC Layer index.
  *                   This parameter can be one of the following values: LTDC_LAYER_1 (0) or LTDC_LAYER_2 (1)
  * @retval None
  */
static void LTDC_SetConfig(LTDC_HandleTypeDef *hltdc, LTDC_LayerCfgTypeDef *pLayerCfg, uint32_t LayerIdx)
{
 8004300:	b480      	push	{r7}
 8004302:	b089      	sub	sp, #36	; 0x24
 8004304:	af00      	add	r7, sp, #0
 8004306:	60f8      	str	r0, [r7, #12]
 8004308:	60b9      	str	r1, [r7, #8]
 800430a:	607a      	str	r2, [r7, #4]
  uint32_t tmp;
  uint32_t tmp1;
  uint32_t tmp2;

  /* Configure the horizontal start and stop position */
  tmp = ((pLayerCfg->WindowX1 + ((hltdc->Instance->BPCR & LTDC_BPCR_AHBP) >> 16U)) << 16U);
 800430c:	68bb      	ldr	r3, [r7, #8]
 800430e:	685a      	ldr	r2, [r3, #4]
 8004310:	68fb      	ldr	r3, [r7, #12]
 8004312:	681b      	ldr	r3, [r3, #0]
 8004314:	68db      	ldr	r3, [r3, #12]
 8004316:	0c1b      	lsrs	r3, r3, #16
 8004318:	f3c3 030b 	ubfx	r3, r3, #0, #12
 800431c:	4413      	add	r3, r2
 800431e:	041b      	lsls	r3, r3, #16
 8004320:	61fb      	str	r3, [r7, #28]
  LTDC_LAYER(hltdc, LayerIdx)->WHPCR &= ~(LTDC_LxWHPCR_WHSTPOS | LTDC_LxWHPCR_WHSPPOS);
 8004322:	68fb      	ldr	r3, [r7, #12]
 8004324:	681b      	ldr	r3, [r3, #0]
 8004326:	461a      	mov	r2, r3
 8004328:	687b      	ldr	r3, [r7, #4]
 800432a:	01db      	lsls	r3, r3, #7
 800432c:	4413      	add	r3, r2
 800432e:	3384      	adds	r3, #132	; 0x84
 8004330:	685b      	ldr	r3, [r3, #4]
 8004332:	68fa      	ldr	r2, [r7, #12]
 8004334:	6812      	ldr	r2, [r2, #0]
 8004336:	4611      	mov	r1, r2
 8004338:	687a      	ldr	r2, [r7, #4]
 800433a:	01d2      	lsls	r2, r2, #7
 800433c:	440a      	add	r2, r1
 800433e:	3284      	adds	r2, #132	; 0x84
 8004340:	f403 4370 	and.w	r3, r3, #61440	; 0xf000
 8004344:	6053      	str	r3, [r2, #4]
  LTDC_LAYER(hltdc, LayerIdx)->WHPCR = ((pLayerCfg->WindowX0 + \
 8004346:	68bb      	ldr	r3, [r7, #8]
 8004348:	681a      	ldr	r2, [r3, #0]
                                         ((hltdc->Instance->BPCR & LTDC_BPCR_AHBP) >> 16U) + 1U) | tmp);
 800434a:	68fb      	ldr	r3, [r7, #12]
 800434c:	681b      	ldr	r3, [r3, #0]
 800434e:	68db      	ldr	r3, [r3, #12]
 8004350:	0c1b      	lsrs	r3, r3, #16
 8004352:	f3c3 030b 	ubfx	r3, r3, #0, #12
  LTDC_LAYER(hltdc, LayerIdx)->WHPCR = ((pLayerCfg->WindowX0 + \
 8004356:	4413      	add	r3, r2
                                         ((hltdc->Instance->BPCR & LTDC_BPCR_AHBP) >> 16U) + 1U) | tmp);
 8004358:	1c5a      	adds	r2, r3, #1
  LTDC_LAYER(hltdc, LayerIdx)->WHPCR = ((pLayerCfg->WindowX0 + \
 800435a:	68fb      	ldr	r3, [r7, #12]
 800435c:	681b      	ldr	r3, [r3, #0]
 800435e:	4619      	mov	r1, r3
 8004360:	687b      	ldr	r3, [r7, #4]
 8004362:	01db      	lsls	r3, r3, #7
 8004364:	440b      	add	r3, r1
 8004366:	3384      	adds	r3, #132	; 0x84
 8004368:	4619      	mov	r1, r3
                                         ((hltdc->Instance->BPCR & LTDC_BPCR_AHBP) >> 16U) + 1U) | tmp);
 800436a:	69fb      	ldr	r3, [r7, #28]
 800436c:	4313      	orrs	r3, r2
  LTDC_LAYER(hltdc, LayerIdx)->WHPCR = ((pLayerCfg->WindowX0 + \
 800436e:	604b      	str	r3, [r1, #4]

  /* Configure the vertical start and stop position */
  tmp = ((pLayerCfg->WindowY1 + (hltdc->Instance->BPCR & LTDC_BPCR_AVBP)) << 16U);
 8004370:	68bb      	ldr	r3, [r7, #8]
 8004372:	68da      	ldr	r2, [r3, #12]
 8004374:	68fb      	ldr	r3, [r7, #12]
 8004376:	681b      	ldr	r3, [r3, #0]
 8004378:	68db      	ldr	r3, [r3, #12]
 800437a:	f3c3 030a 	ubfx	r3, r3, #0, #11
 800437e:	4413      	add	r3, r2
 8004380:	041b      	lsls	r3, r3, #16
 8004382:	61fb      	str	r3, [r7, #28]
  LTDC_LAYER(hltdc, LayerIdx)->WVPCR &= ~(LTDC_LxWVPCR_WVSTPOS | LTDC_LxWVPCR_WVSPPOS);
 8004384:	68fb      	ldr	r3, [r7, #12]
 8004386:	681b      	ldr	r3, [r3, #0]
 8004388:	461a      	mov	r2, r3
 800438a:	687b      	ldr	r3, [r7, #4]
 800438c:	01db      	lsls	r3, r3, #7
 800438e:	4413      	add	r3, r2
 8004390:	3384      	adds	r3, #132	; 0x84
 8004392:	689b      	ldr	r3, [r3, #8]
 8004394:	68fa      	ldr	r2, [r7, #12]
 8004396:	6812      	ldr	r2, [r2, #0]
 8004398:	4611      	mov	r1, r2
 800439a:	687a      	ldr	r2, [r7, #4]
 800439c:	01d2      	lsls	r2, r2, #7
 800439e:	440a      	add	r2, r1
 80043a0:	3284      	adds	r2, #132	; 0x84
 80043a2:	f403 4370 	and.w	r3, r3, #61440	; 0xf000
 80043a6:	6093      	str	r3, [r2, #8]
  LTDC_LAYER(hltdc, LayerIdx)->WVPCR  = ((pLayerCfg->WindowY0 + (hltdc->Instance->BPCR & LTDC_BPCR_AVBP) + 1U) | tmp);
 80043a8:	68bb      	ldr	r3, [r7, #8]
 80043aa:	689a      	ldr	r2, [r3, #8]
 80043ac:	68fb      	ldr	r3, [r7, #12]
 80043ae:	681b      	ldr	r3, [r3, #0]
 80043b0:	68db      	ldr	r3, [r3, #12]
 80043b2:	f3c3 030a 	ubfx	r3, r3, #0, #11
 80043b6:	4413      	add	r3, r2
 80043b8:	1c5a      	adds	r2, r3, #1
 80043ba:	68fb      	ldr	r3, [r7, #12]
 80043bc:	681b      	ldr	r3, [r3, #0]
 80043be:	4619      	mov	r1, r3
 80043c0:	687b      	ldr	r3, [r7, #4]
 80043c2:	01db      	lsls	r3, r3, #7
 80043c4:	440b      	add	r3, r1
 80043c6:	3384      	adds	r3, #132	; 0x84
 80043c8:	4619      	mov	r1, r3
 80043ca:	69fb      	ldr	r3, [r7, #28]
 80043cc:	4313      	orrs	r3, r2
 80043ce:	608b      	str	r3, [r1, #8]

  /* Specifies the pixel format */
  LTDC_LAYER(hltdc, LayerIdx)->PFCR &= ~(LTDC_LxPFCR_PF);
 80043d0:	68fb      	ldr	r3, [r7, #12]
 80043d2:	681b      	ldr	r3, [r3, #0]
 80043d4:	461a      	mov	r2, r3
 80043d6:	687b      	ldr	r3, [r7, #4]
 80043d8:	01db      	lsls	r3, r3, #7
 80043da:	4413      	add	r3, r2
 80043dc:	3384      	adds	r3, #132	; 0x84
 80043de:	691b      	ldr	r3, [r3, #16]
 80043e0:	68fa      	ldr	r2, [r7, #12]
 80043e2:	6812      	ldr	r2, [r2, #0]
 80043e4:	4611      	mov	r1, r2
 80043e6:	687a      	ldr	r2, [r7, #4]
 80043e8:	01d2      	lsls	r2, r2, #7
 80043ea:	440a      	add	r2, r1
 80043ec:	3284      	adds	r2, #132	; 0x84
 80043ee:	f023 0307 	bic.w	r3, r3, #7
 80043f2:	6113      	str	r3, [r2, #16]
  LTDC_LAYER(hltdc, LayerIdx)->PFCR = (pLayerCfg->PixelFormat);
 80043f4:	68fb      	ldr	r3, [r7, #12]
 80043f6:	681b      	ldr	r3, [r3, #0]
 80043f8:	461a      	mov	r2, r3
 80043fa:	687b      	ldr	r3, [r7, #4]
 80043fc:	01db      	lsls	r3, r3, #7
 80043fe:	4413      	add	r3, r2
 8004400:	3384      	adds	r3, #132	; 0x84
 8004402:	461a      	mov	r2, r3
 8004404:	68bb      	ldr	r3, [r7, #8]
 8004406:	691b      	ldr	r3, [r3, #16]
 8004408:	6113      	str	r3, [r2, #16]

  /* Configure the default color values */
  tmp = ((uint32_t)(pLayerCfg->Backcolor.Green) << 8U);
 800440a:	68bb      	ldr	r3, [r7, #8]
 800440c:	f893 3031 	ldrb.w	r3, [r3, #49]	; 0x31
 8004410:	021b      	lsls	r3, r3, #8
 8004412:	61fb      	str	r3, [r7, #28]
  tmp1 = ((uint32_t)(pLayerCfg->Backcolor.Red) << 16U);
 8004414:	68bb      	ldr	r3, [r7, #8]
 8004416:	f893 3032 	ldrb.w	r3, [r3, #50]	; 0x32
 800441a:	041b      	lsls	r3, r3, #16
 800441c:	61bb      	str	r3, [r7, #24]
  tmp2 = (pLayerCfg->Alpha0 << 24U);
 800441e:	68bb      	ldr	r3, [r7, #8]
 8004420:	699b      	ldr	r3, [r3, #24]
 8004422:	061b      	lsls	r3, r3, #24
 8004424:	617b      	str	r3, [r7, #20]
  LTDC_LAYER(hltdc, LayerIdx)->DCCR &= ~(LTDC_LxDCCR_DCBLUE | LTDC_LxDCCR_DCGREEN | LTDC_LxDCCR_DCRED |
 8004426:	68fb      	ldr	r3, [r7, #12]
 8004428:	681b      	ldr	r3, [r3, #0]
 800442a:	461a      	mov	r2, r3
 800442c:	687b      	ldr	r3, [r7, #4]
 800442e:	01db      	lsls	r3, r3, #7
 8004430:	4413      	add	r3, r2
 8004432:	3384      	adds	r3, #132	; 0x84
 8004434:	699b      	ldr	r3, [r3, #24]
 8004436:	68fb      	ldr	r3, [r7, #12]
 8004438:	681b      	ldr	r3, [r3, #0]
 800443a:	461a      	mov	r2, r3
 800443c:	687b      	ldr	r3, [r7, #4]
 800443e:	01db      	lsls	r3, r3, #7
 8004440:	4413      	add	r3, r2
 8004442:	3384      	adds	r3, #132	; 0x84
 8004444:	461a      	mov	r2, r3
 8004446:	2300      	movs	r3, #0
 8004448:	6193      	str	r3, [r2, #24]
                                         LTDC_LxDCCR_DCALPHA);
  LTDC_LAYER(hltdc, LayerIdx)->DCCR = (pLayerCfg->Backcolor.Blue | tmp | tmp1 | tmp2);
 800444a:	68bb      	ldr	r3, [r7, #8]
 800444c:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 8004450:	461a      	mov	r2, r3
 8004452:	69fb      	ldr	r3, [r7, #28]
 8004454:	431a      	orrs	r2, r3
 8004456:	69bb      	ldr	r3, [r7, #24]
 8004458:	431a      	orrs	r2, r3
 800445a:	68fb      	ldr	r3, [r7, #12]
 800445c:	681b      	ldr	r3, [r3, #0]
 800445e:	4619      	mov	r1, r3
 8004460:	687b      	ldr	r3, [r7, #4]
 8004462:	01db      	lsls	r3, r3, #7
 8004464:	440b      	add	r3, r1
 8004466:	3384      	adds	r3, #132	; 0x84
 8004468:	4619      	mov	r1, r3
 800446a:	697b      	ldr	r3, [r7, #20]
 800446c:	4313      	orrs	r3, r2
 800446e:	618b      	str	r3, [r1, #24]

  /* Specifies the constant alpha value */
  LTDC_LAYER(hltdc, LayerIdx)->CACR &= ~(LTDC_LxCACR_CONSTA);
 8004470:	68fb      	ldr	r3, [r7, #12]
 8004472:	681b      	ldr	r3, [r3, #0]
 8004474:	461a      	mov	r2, r3
 8004476:	687b      	ldr	r3, [r7, #4]
 8004478:	01db      	lsls	r3, r3, #7
 800447a:	4413      	add	r3, r2
 800447c:	3384      	adds	r3, #132	; 0x84
 800447e:	695b      	ldr	r3, [r3, #20]
 8004480:	68fa      	ldr	r2, [r7, #12]
 8004482:	6812      	ldr	r2, [r2, #0]
 8004484:	4611      	mov	r1, r2
 8004486:	687a      	ldr	r2, [r7, #4]
 8004488:	01d2      	lsls	r2, r2, #7
 800448a:	440a      	add	r2, r1
 800448c:	3284      	adds	r2, #132	; 0x84
 800448e:	f023 03ff 	bic.w	r3, r3, #255	; 0xff
 8004492:	6153      	str	r3, [r2, #20]
  LTDC_LAYER(hltdc, LayerIdx)->CACR = (pLayerCfg->Alpha);
 8004494:	68fb      	ldr	r3, [r7, #12]
 8004496:	681b      	ldr	r3, [r3, #0]
 8004498:	461a      	mov	r2, r3
 800449a:	687b      	ldr	r3, [r7, #4]
 800449c:	01db      	lsls	r3, r3, #7
 800449e:	4413      	add	r3, r2
 80044a0:	3384      	adds	r3, #132	; 0x84
 80044a2:	461a      	mov	r2, r3
 80044a4:	68bb      	ldr	r3, [r7, #8]
 80044a6:	695b      	ldr	r3, [r3, #20]
 80044a8:	6153      	str	r3, [r2, #20]

  /* Specifies the blending factors */
  LTDC_LAYER(hltdc, LayerIdx)->BFCR &= ~(LTDC_LxBFCR_BF2 | LTDC_LxBFCR_BF1);
 80044aa:	68fb      	ldr	r3, [r7, #12]
 80044ac:	681b      	ldr	r3, [r3, #0]
 80044ae:	461a      	mov	r2, r3
 80044b0:	687b      	ldr	r3, [r7, #4]
 80044b2:	01db      	lsls	r3, r3, #7
 80044b4:	4413      	add	r3, r2
 80044b6:	3384      	adds	r3, #132	; 0x84
 80044b8:	69db      	ldr	r3, [r3, #28]
 80044ba:	68fa      	ldr	r2, [r7, #12]
 80044bc:	6812      	ldr	r2, [r2, #0]
 80044be:	4611      	mov	r1, r2
 80044c0:	687a      	ldr	r2, [r7, #4]
 80044c2:	01d2      	lsls	r2, r2, #7
 80044c4:	440a      	add	r2, r1
 80044c6:	3284      	adds	r2, #132	; 0x84
 80044c8:	f423 63e0 	bic.w	r3, r3, #1792	; 0x700
 80044cc:	f023 0307 	bic.w	r3, r3, #7
 80044d0:	61d3      	str	r3, [r2, #28]
  LTDC_LAYER(hltdc, LayerIdx)->BFCR = (pLayerCfg->BlendingFactor1 | pLayerCfg->BlendingFactor2);
 80044d2:	68bb      	ldr	r3, [r7, #8]
 80044d4:	69da      	ldr	r2, [r3, #28]
 80044d6:	68bb      	ldr	r3, [r7, #8]
 80044d8:	6a1b      	ldr	r3, [r3, #32]
 80044da:	68f9      	ldr	r1, [r7, #12]
 80044dc:	6809      	ldr	r1, [r1, #0]
 80044de:	4608      	mov	r0, r1
 80044e0:	6879      	ldr	r1, [r7, #4]
 80044e2:	01c9      	lsls	r1, r1, #7
 80044e4:	4401      	add	r1, r0
 80044e6:	3184      	adds	r1, #132	; 0x84
 80044e8:	4313      	orrs	r3, r2
 80044ea:	61cb      	str	r3, [r1, #28]

  /* Configure the color frame buffer start address */
  LTDC_LAYER(hltdc, LayerIdx)->CFBAR &= ~(LTDC_LxCFBAR_CFBADD);
 80044ec:	68fb      	ldr	r3, [r7, #12]
 80044ee:	681b      	ldr	r3, [r3, #0]
 80044f0:	461a      	mov	r2, r3
 80044f2:	687b      	ldr	r3, [r7, #4]
 80044f4:	01db      	lsls	r3, r3, #7
 80044f6:	4413      	add	r3, r2
 80044f8:	3384      	adds	r3, #132	; 0x84
 80044fa:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80044fc:	68fb      	ldr	r3, [r7, #12]
 80044fe:	681b      	ldr	r3, [r3, #0]
 8004500:	461a      	mov	r2, r3
 8004502:	687b      	ldr	r3, [r7, #4]
 8004504:	01db      	lsls	r3, r3, #7
 8004506:	4413      	add	r3, r2
 8004508:	3384      	adds	r3, #132	; 0x84
 800450a:	461a      	mov	r2, r3
 800450c:	2300      	movs	r3, #0
 800450e:	6293      	str	r3, [r2, #40]	; 0x28
  LTDC_LAYER(hltdc, LayerIdx)->CFBAR = (pLayerCfg->FBStartAdress);
 8004510:	68fb      	ldr	r3, [r7, #12]
 8004512:	681b      	ldr	r3, [r3, #0]
 8004514:	461a      	mov	r2, r3
 8004516:	687b      	ldr	r3, [r7, #4]
 8004518:	01db      	lsls	r3, r3, #7
 800451a:	4413      	add	r3, r2
 800451c:	3384      	adds	r3, #132	; 0x84
 800451e:	461a      	mov	r2, r3
 8004520:	68bb      	ldr	r3, [r7, #8]
 8004522:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004524:	6293      	str	r3, [r2, #40]	; 0x28

  if (pLayerCfg->PixelFormat == LTDC_PIXEL_FORMAT_ARGB8888)
 8004526:	68bb      	ldr	r3, [r7, #8]
 8004528:	691b      	ldr	r3, [r3, #16]
 800452a:	2b00      	cmp	r3, #0
 800452c:	d102      	bne.n	8004534 <LTDC_SetConfig+0x234>
  {
    tmp = 4U;
 800452e:	2304      	movs	r3, #4
 8004530:	61fb      	str	r3, [r7, #28]
 8004532:	e01b      	b.n	800456c <LTDC_SetConfig+0x26c>
  }
  else if (pLayerCfg->PixelFormat == LTDC_PIXEL_FORMAT_RGB888)
 8004534:	68bb      	ldr	r3, [r7, #8]
 8004536:	691b      	ldr	r3, [r3, #16]
 8004538:	2b01      	cmp	r3, #1
 800453a:	d102      	bne.n	8004542 <LTDC_SetConfig+0x242>
  {
    tmp = 3U;
 800453c:	2303      	movs	r3, #3
 800453e:	61fb      	str	r3, [r7, #28]
 8004540:	e014      	b.n	800456c <LTDC_SetConfig+0x26c>
  }
  else if ((pLayerCfg->PixelFormat == LTDC_PIXEL_FORMAT_ARGB4444) || \
 8004542:	68bb      	ldr	r3, [r7, #8]
 8004544:	691b      	ldr	r3, [r3, #16]
 8004546:	2b04      	cmp	r3, #4
 8004548:	d00b      	beq.n	8004562 <LTDC_SetConfig+0x262>
           (pLayerCfg->PixelFormat == LTDC_PIXEL_FORMAT_RGB565)   || \
 800454a:	68bb      	ldr	r3, [r7, #8]
 800454c:	691b      	ldr	r3, [r3, #16]
  else if ((pLayerCfg->PixelFormat == LTDC_PIXEL_FORMAT_ARGB4444) || \
 800454e:	2b02      	cmp	r3, #2
 8004550:	d007      	beq.n	8004562 <LTDC_SetConfig+0x262>
           (pLayerCfg->PixelFormat == LTDC_PIXEL_FORMAT_ARGB1555) || \
 8004552:	68bb      	ldr	r3, [r7, #8]
 8004554:	691b      	ldr	r3, [r3, #16]
           (pLayerCfg->PixelFormat == LTDC_PIXEL_FORMAT_RGB565)   || \
 8004556:	2b03      	cmp	r3, #3
 8004558:	d003      	beq.n	8004562 <LTDC_SetConfig+0x262>
           (pLayerCfg->PixelFormat == LTDC_PIXEL_FORMAT_AL88))
 800455a:	68bb      	ldr	r3, [r7, #8]
 800455c:	691b      	ldr	r3, [r3, #16]
           (pLayerCfg->PixelFormat == LTDC_PIXEL_FORMAT_ARGB1555) || \
 800455e:	2b07      	cmp	r3, #7
 8004560:	d102      	bne.n	8004568 <LTDC_SetConfig+0x268>
  {
    tmp = 2U;
 8004562:	2302      	movs	r3, #2
 8004564:	61fb      	str	r3, [r7, #28]
 8004566:	e001      	b.n	800456c <LTDC_SetConfig+0x26c>
  }
  else
  {
    tmp = 1U;
 8004568:	2301      	movs	r3, #1
 800456a:	61fb      	str	r3, [r7, #28]
  }

  /* Configure the color frame buffer pitch in byte */
  LTDC_LAYER(hltdc, LayerIdx)->CFBLR  &= ~(LTDC_LxCFBLR_CFBLL | LTDC_LxCFBLR_CFBP);
 800456c:	68fb      	ldr	r3, [r7, #12]
 800456e:	681b      	ldr	r3, [r3, #0]
 8004570:	461a      	mov	r2, r3
 8004572:	687b      	ldr	r3, [r7, #4]
 8004574:	01db      	lsls	r3, r3, #7
 8004576:	4413      	add	r3, r2
 8004578:	3384      	adds	r3, #132	; 0x84
 800457a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800457c:	68fa      	ldr	r2, [r7, #12]
 800457e:	6812      	ldr	r2, [r2, #0]
 8004580:	4611      	mov	r1, r2
 8004582:	687a      	ldr	r2, [r7, #4]
 8004584:	01d2      	lsls	r2, r2, #7
 8004586:	440a      	add	r2, r1
 8004588:	3284      	adds	r2, #132	; 0x84
 800458a:	f003 23e0 	and.w	r3, r3, #3758153728	; 0xe000e000
 800458e:	62d3      	str	r3, [r2, #44]	; 0x2c
  LTDC_LAYER(hltdc, LayerIdx)->CFBLR  = (((pLayerCfg->ImageWidth * tmp) << 16U) | \
 8004590:	68bb      	ldr	r3, [r7, #8]
 8004592:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004594:	69fa      	ldr	r2, [r7, #28]
 8004596:	fb02 f303 	mul.w	r3, r2, r3
 800459a:	041a      	lsls	r2, r3, #16
                                         (((pLayerCfg->WindowX1 - pLayerCfg->WindowX0) * tmp)  + 3U));
 800459c:	68bb      	ldr	r3, [r7, #8]
 800459e:	6859      	ldr	r1, [r3, #4]
 80045a0:	68bb      	ldr	r3, [r7, #8]
 80045a2:	681b      	ldr	r3, [r3, #0]
 80045a4:	1acb      	subs	r3, r1, r3
 80045a6:	69f9      	ldr	r1, [r7, #28]
 80045a8:	fb01 f303 	mul.w	r3, r1, r3
 80045ac:	3303      	adds	r3, #3
  LTDC_LAYER(hltdc, LayerIdx)->CFBLR  = (((pLayerCfg->ImageWidth * tmp) << 16U) | \
 80045ae:	68f9      	ldr	r1, [r7, #12]
 80045b0:	6809      	ldr	r1, [r1, #0]
 80045b2:	4608      	mov	r0, r1
 80045b4:	6879      	ldr	r1, [r7, #4]
 80045b6:	01c9      	lsls	r1, r1, #7
 80045b8:	4401      	add	r1, r0
 80045ba:	3184      	adds	r1, #132	; 0x84
 80045bc:	4313      	orrs	r3, r2
 80045be:	62cb      	str	r3, [r1, #44]	; 0x2c
  /* Configure the frame buffer line number */
  LTDC_LAYER(hltdc, LayerIdx)->CFBLNR  &= ~(LTDC_LxCFBLNR_CFBLNBR);
 80045c0:	68fb      	ldr	r3, [r7, #12]
 80045c2:	681b      	ldr	r3, [r3, #0]
 80045c4:	461a      	mov	r2, r3
 80045c6:	687b      	ldr	r3, [r7, #4]
 80045c8:	01db      	lsls	r3, r3, #7
 80045ca:	4413      	add	r3, r2
 80045cc:	3384      	adds	r3, #132	; 0x84
 80045ce:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80045d0:	68fa      	ldr	r2, [r7, #12]
 80045d2:	6812      	ldr	r2, [r2, #0]
 80045d4:	4611      	mov	r1, r2
 80045d6:	687a      	ldr	r2, [r7, #4]
 80045d8:	01d2      	lsls	r2, r2, #7
 80045da:	440a      	add	r2, r1
 80045dc:	3284      	adds	r2, #132	; 0x84
 80045de:	f423 63ff 	bic.w	r3, r3, #2040	; 0x7f8
 80045e2:	f023 0307 	bic.w	r3, r3, #7
 80045e6:	6313      	str	r3, [r2, #48]	; 0x30
  LTDC_LAYER(hltdc, LayerIdx)->CFBLNR  = (pLayerCfg->ImageHeight);
 80045e8:	68fb      	ldr	r3, [r7, #12]
 80045ea:	681b      	ldr	r3, [r3, #0]
 80045ec:	461a      	mov	r2, r3
 80045ee:	687b      	ldr	r3, [r7, #4]
 80045f0:	01db      	lsls	r3, r3, #7
 80045f2:	4413      	add	r3, r2
 80045f4:	3384      	adds	r3, #132	; 0x84
 80045f6:	461a      	mov	r2, r3
 80045f8:	68bb      	ldr	r3, [r7, #8]
 80045fa:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80045fc:	6313      	str	r3, [r2, #48]	; 0x30

  /* Enable LTDC_Layer by setting LEN bit */
  LTDC_LAYER(hltdc, LayerIdx)->CR |= (uint32_t)LTDC_LxCR_LEN;
 80045fe:	68fb      	ldr	r3, [r7, #12]
 8004600:	681b      	ldr	r3, [r3, #0]
 8004602:	461a      	mov	r2, r3
 8004604:	687b      	ldr	r3, [r7, #4]
 8004606:	01db      	lsls	r3, r3, #7
 8004608:	4413      	add	r3, r2
 800460a:	3384      	adds	r3, #132	; 0x84
 800460c:	681b      	ldr	r3, [r3, #0]
 800460e:	68fa      	ldr	r2, [r7, #12]
 8004610:	6812      	ldr	r2, [r2, #0]
 8004612:	4611      	mov	r1, r2
 8004614:	687a      	ldr	r2, [r7, #4]
 8004616:	01d2      	lsls	r2, r2, #7
 8004618:	440a      	add	r2, r1
 800461a:	3284      	adds	r2, #132	; 0x84
 800461c:	f043 0301 	orr.w	r3, r3, #1
 8004620:	6013      	str	r3, [r2, #0]
}
 8004622:	bf00      	nop
 8004624:	3724      	adds	r7, #36	; 0x24
 8004626:	46bd      	mov	sp, r7
 8004628:	f85d 7b04 	ldr.w	r7, [sp], #4
 800462c:	4770      	bx	lr
	...

08004630 <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8004630:	b580      	push	{r7, lr}
 8004632:	b086      	sub	sp, #24
 8004634:	af00      	add	r7, sp, #0
 8004636:	6078      	str	r0, [r7, #4]
  uint32_t tickstart, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8004638:	687b      	ldr	r3, [r7, #4]
 800463a:	2b00      	cmp	r3, #0
 800463c:	d101      	bne.n	8004642 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 800463e:	2301      	movs	r3, #1
 8004640:	e267      	b.n	8004b12 <HAL_RCC_OscConfig+0x4e2>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8004642:	687b      	ldr	r3, [r7, #4]
 8004644:	681b      	ldr	r3, [r3, #0]
 8004646:	f003 0301 	and.w	r3, r3, #1
 800464a:	2b00      	cmp	r3, #0
 800464c:	d075      	beq.n	800473a <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 800464e:	4b88      	ldr	r3, [pc, #544]	; (8004870 <HAL_RCC_OscConfig+0x240>)
 8004650:	689b      	ldr	r3, [r3, #8]
 8004652:	f003 030c 	and.w	r3, r3, #12
 8004656:	2b04      	cmp	r3, #4
 8004658:	d00c      	beq.n	8004674 <HAL_RCC_OscConfig+0x44>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 800465a:	4b85      	ldr	r3, [pc, #532]	; (8004870 <HAL_RCC_OscConfig+0x240>)
 800465c:	689b      	ldr	r3, [r3, #8]
 800465e:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 8004662:	2b08      	cmp	r3, #8
 8004664:	d112      	bne.n	800468c <HAL_RCC_OscConfig+0x5c>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8004666:	4b82      	ldr	r3, [pc, #520]	; (8004870 <HAL_RCC_OscConfig+0x240>)
 8004668:	685b      	ldr	r3, [r3, #4]
 800466a:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800466e:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8004672:	d10b      	bne.n	800468c <HAL_RCC_OscConfig+0x5c>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8004674:	4b7e      	ldr	r3, [pc, #504]	; (8004870 <HAL_RCC_OscConfig+0x240>)
 8004676:	681b      	ldr	r3, [r3, #0]
 8004678:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800467c:	2b00      	cmp	r3, #0
 800467e:	d05b      	beq.n	8004738 <HAL_RCC_OscConfig+0x108>
 8004680:	687b      	ldr	r3, [r7, #4]
 8004682:	685b      	ldr	r3, [r3, #4]
 8004684:	2b00      	cmp	r3, #0
 8004686:	d157      	bne.n	8004738 <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 8004688:	2301      	movs	r3, #1
 800468a:	e242      	b.n	8004b12 <HAL_RCC_OscConfig+0x4e2>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 800468c:	687b      	ldr	r3, [r7, #4]
 800468e:	685b      	ldr	r3, [r3, #4]
 8004690:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8004694:	d106      	bne.n	80046a4 <HAL_RCC_OscConfig+0x74>
 8004696:	4b76      	ldr	r3, [pc, #472]	; (8004870 <HAL_RCC_OscConfig+0x240>)
 8004698:	681b      	ldr	r3, [r3, #0]
 800469a:	4a75      	ldr	r2, [pc, #468]	; (8004870 <HAL_RCC_OscConfig+0x240>)
 800469c:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80046a0:	6013      	str	r3, [r2, #0]
 80046a2:	e01d      	b.n	80046e0 <HAL_RCC_OscConfig+0xb0>
 80046a4:	687b      	ldr	r3, [r7, #4]
 80046a6:	685b      	ldr	r3, [r3, #4]
 80046a8:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 80046ac:	d10c      	bne.n	80046c8 <HAL_RCC_OscConfig+0x98>
 80046ae:	4b70      	ldr	r3, [pc, #448]	; (8004870 <HAL_RCC_OscConfig+0x240>)
 80046b0:	681b      	ldr	r3, [r3, #0]
 80046b2:	4a6f      	ldr	r2, [pc, #444]	; (8004870 <HAL_RCC_OscConfig+0x240>)
 80046b4:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 80046b8:	6013      	str	r3, [r2, #0]
 80046ba:	4b6d      	ldr	r3, [pc, #436]	; (8004870 <HAL_RCC_OscConfig+0x240>)
 80046bc:	681b      	ldr	r3, [r3, #0]
 80046be:	4a6c      	ldr	r2, [pc, #432]	; (8004870 <HAL_RCC_OscConfig+0x240>)
 80046c0:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80046c4:	6013      	str	r3, [r2, #0]
 80046c6:	e00b      	b.n	80046e0 <HAL_RCC_OscConfig+0xb0>
 80046c8:	4b69      	ldr	r3, [pc, #420]	; (8004870 <HAL_RCC_OscConfig+0x240>)
 80046ca:	681b      	ldr	r3, [r3, #0]
 80046cc:	4a68      	ldr	r2, [pc, #416]	; (8004870 <HAL_RCC_OscConfig+0x240>)
 80046ce:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80046d2:	6013      	str	r3, [r2, #0]
 80046d4:	4b66      	ldr	r3, [pc, #408]	; (8004870 <HAL_RCC_OscConfig+0x240>)
 80046d6:	681b      	ldr	r3, [r3, #0]
 80046d8:	4a65      	ldr	r2, [pc, #404]	; (8004870 <HAL_RCC_OscConfig+0x240>)
 80046da:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 80046de:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 80046e0:	687b      	ldr	r3, [r7, #4]
 80046e2:	685b      	ldr	r3, [r3, #4]
 80046e4:	2b00      	cmp	r3, #0
 80046e6:	d013      	beq.n	8004710 <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80046e8:	f7fd fbea 	bl	8001ec0 <HAL_GetTick>
 80046ec:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80046ee:	e008      	b.n	8004702 <HAL_RCC_OscConfig+0xd2>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 80046f0:	f7fd fbe6 	bl	8001ec0 <HAL_GetTick>
 80046f4:	4602      	mov	r2, r0
 80046f6:	693b      	ldr	r3, [r7, #16]
 80046f8:	1ad3      	subs	r3, r2, r3
 80046fa:	2b64      	cmp	r3, #100	; 0x64
 80046fc:	d901      	bls.n	8004702 <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 80046fe:	2303      	movs	r3, #3
 8004700:	e207      	b.n	8004b12 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8004702:	4b5b      	ldr	r3, [pc, #364]	; (8004870 <HAL_RCC_OscConfig+0x240>)
 8004704:	681b      	ldr	r3, [r3, #0]
 8004706:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800470a:	2b00      	cmp	r3, #0
 800470c:	d0f0      	beq.n	80046f0 <HAL_RCC_OscConfig+0xc0>
 800470e:	e014      	b.n	800473a <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8004710:	f7fd fbd6 	bl	8001ec0 <HAL_GetTick>
 8004714:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8004716:	e008      	b.n	800472a <HAL_RCC_OscConfig+0xfa>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8004718:	f7fd fbd2 	bl	8001ec0 <HAL_GetTick>
 800471c:	4602      	mov	r2, r0
 800471e:	693b      	ldr	r3, [r7, #16]
 8004720:	1ad3      	subs	r3, r2, r3
 8004722:	2b64      	cmp	r3, #100	; 0x64
 8004724:	d901      	bls.n	800472a <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 8004726:	2303      	movs	r3, #3
 8004728:	e1f3      	b.n	8004b12 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800472a:	4b51      	ldr	r3, [pc, #324]	; (8004870 <HAL_RCC_OscConfig+0x240>)
 800472c:	681b      	ldr	r3, [r3, #0]
 800472e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8004732:	2b00      	cmp	r3, #0
 8004734:	d1f0      	bne.n	8004718 <HAL_RCC_OscConfig+0xe8>
 8004736:	e000      	b.n	800473a <HAL_RCC_OscConfig+0x10a>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8004738:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 800473a:	687b      	ldr	r3, [r7, #4]
 800473c:	681b      	ldr	r3, [r3, #0]
 800473e:	f003 0302 	and.w	r3, r3, #2
 8004742:	2b00      	cmp	r3, #0
 8004744:	d063      	beq.n	800480e <HAL_RCC_OscConfig+0x1de>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 8004746:	4b4a      	ldr	r3, [pc, #296]	; (8004870 <HAL_RCC_OscConfig+0x240>)
 8004748:	689b      	ldr	r3, [r3, #8]
 800474a:	f003 030c 	and.w	r3, r3, #12
 800474e:	2b00      	cmp	r3, #0
 8004750:	d00b      	beq.n	800476a <HAL_RCC_OscConfig+0x13a>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8004752:	4b47      	ldr	r3, [pc, #284]	; (8004870 <HAL_RCC_OscConfig+0x240>)
 8004754:	689b      	ldr	r3, [r3, #8]
 8004756:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 800475a:	2b08      	cmp	r3, #8
 800475c:	d11c      	bne.n	8004798 <HAL_RCC_OscConfig+0x168>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 800475e:	4b44      	ldr	r3, [pc, #272]	; (8004870 <HAL_RCC_OscConfig+0x240>)
 8004760:	685b      	ldr	r3, [r3, #4]
 8004762:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8004766:	2b00      	cmp	r3, #0
 8004768:	d116      	bne.n	8004798 <HAL_RCC_OscConfig+0x168>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800476a:	4b41      	ldr	r3, [pc, #260]	; (8004870 <HAL_RCC_OscConfig+0x240>)
 800476c:	681b      	ldr	r3, [r3, #0]
 800476e:	f003 0302 	and.w	r3, r3, #2
 8004772:	2b00      	cmp	r3, #0
 8004774:	d005      	beq.n	8004782 <HAL_RCC_OscConfig+0x152>
 8004776:	687b      	ldr	r3, [r7, #4]
 8004778:	68db      	ldr	r3, [r3, #12]
 800477a:	2b01      	cmp	r3, #1
 800477c:	d001      	beq.n	8004782 <HAL_RCC_OscConfig+0x152>
      {
        return HAL_ERROR;
 800477e:	2301      	movs	r3, #1
 8004780:	e1c7      	b.n	8004b12 <HAL_RCC_OscConfig+0x4e2>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8004782:	4b3b      	ldr	r3, [pc, #236]	; (8004870 <HAL_RCC_OscConfig+0x240>)
 8004784:	681b      	ldr	r3, [r3, #0]
 8004786:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 800478a:	687b      	ldr	r3, [r7, #4]
 800478c:	691b      	ldr	r3, [r3, #16]
 800478e:	00db      	lsls	r3, r3, #3
 8004790:	4937      	ldr	r1, [pc, #220]	; (8004870 <HAL_RCC_OscConfig+0x240>)
 8004792:	4313      	orrs	r3, r2
 8004794:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8004796:	e03a      	b.n	800480e <HAL_RCC_OscConfig+0x1de>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 8004798:	687b      	ldr	r3, [r7, #4]
 800479a:	68db      	ldr	r3, [r3, #12]
 800479c:	2b00      	cmp	r3, #0
 800479e:	d020      	beq.n	80047e2 <HAL_RCC_OscConfig+0x1b2>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 80047a0:	4b34      	ldr	r3, [pc, #208]	; (8004874 <HAL_RCC_OscConfig+0x244>)
 80047a2:	2201      	movs	r2, #1
 80047a4:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80047a6:	f7fd fb8b 	bl	8001ec0 <HAL_GetTick>
 80047aa:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80047ac:	e008      	b.n	80047c0 <HAL_RCC_OscConfig+0x190>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 80047ae:	f7fd fb87 	bl	8001ec0 <HAL_GetTick>
 80047b2:	4602      	mov	r2, r0
 80047b4:	693b      	ldr	r3, [r7, #16]
 80047b6:	1ad3      	subs	r3, r2, r3
 80047b8:	2b02      	cmp	r3, #2
 80047ba:	d901      	bls.n	80047c0 <HAL_RCC_OscConfig+0x190>
          {
            return HAL_TIMEOUT;
 80047bc:	2303      	movs	r3, #3
 80047be:	e1a8      	b.n	8004b12 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80047c0:	4b2b      	ldr	r3, [pc, #172]	; (8004870 <HAL_RCC_OscConfig+0x240>)
 80047c2:	681b      	ldr	r3, [r3, #0]
 80047c4:	f003 0302 	and.w	r3, r3, #2
 80047c8:	2b00      	cmp	r3, #0
 80047ca:	d0f0      	beq.n	80047ae <HAL_RCC_OscConfig+0x17e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80047cc:	4b28      	ldr	r3, [pc, #160]	; (8004870 <HAL_RCC_OscConfig+0x240>)
 80047ce:	681b      	ldr	r3, [r3, #0]
 80047d0:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 80047d4:	687b      	ldr	r3, [r7, #4]
 80047d6:	691b      	ldr	r3, [r3, #16]
 80047d8:	00db      	lsls	r3, r3, #3
 80047da:	4925      	ldr	r1, [pc, #148]	; (8004870 <HAL_RCC_OscConfig+0x240>)
 80047dc:	4313      	orrs	r3, r2
 80047de:	600b      	str	r3, [r1, #0]
 80047e0:	e015      	b.n	800480e <HAL_RCC_OscConfig+0x1de>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 80047e2:	4b24      	ldr	r3, [pc, #144]	; (8004874 <HAL_RCC_OscConfig+0x244>)
 80047e4:	2200      	movs	r2, #0
 80047e6:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80047e8:	f7fd fb6a 	bl	8001ec0 <HAL_GetTick>
 80047ec:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80047ee:	e008      	b.n	8004802 <HAL_RCC_OscConfig+0x1d2>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 80047f0:	f7fd fb66 	bl	8001ec0 <HAL_GetTick>
 80047f4:	4602      	mov	r2, r0
 80047f6:	693b      	ldr	r3, [r7, #16]
 80047f8:	1ad3      	subs	r3, r2, r3
 80047fa:	2b02      	cmp	r3, #2
 80047fc:	d901      	bls.n	8004802 <HAL_RCC_OscConfig+0x1d2>
          {
            return HAL_TIMEOUT;
 80047fe:	2303      	movs	r3, #3
 8004800:	e187      	b.n	8004b12 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8004802:	4b1b      	ldr	r3, [pc, #108]	; (8004870 <HAL_RCC_OscConfig+0x240>)
 8004804:	681b      	ldr	r3, [r3, #0]
 8004806:	f003 0302 	and.w	r3, r3, #2
 800480a:	2b00      	cmp	r3, #0
 800480c:	d1f0      	bne.n	80047f0 <HAL_RCC_OscConfig+0x1c0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 800480e:	687b      	ldr	r3, [r7, #4]
 8004810:	681b      	ldr	r3, [r3, #0]
 8004812:	f003 0308 	and.w	r3, r3, #8
 8004816:	2b00      	cmp	r3, #0
 8004818:	d036      	beq.n	8004888 <HAL_RCC_OscConfig+0x258>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 800481a:	687b      	ldr	r3, [r7, #4]
 800481c:	695b      	ldr	r3, [r3, #20]
 800481e:	2b00      	cmp	r3, #0
 8004820:	d016      	beq.n	8004850 <HAL_RCC_OscConfig+0x220>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8004822:	4b15      	ldr	r3, [pc, #84]	; (8004878 <HAL_RCC_OscConfig+0x248>)
 8004824:	2201      	movs	r2, #1
 8004826:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8004828:	f7fd fb4a 	bl	8001ec0 <HAL_GetTick>
 800482c:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 800482e:	e008      	b.n	8004842 <HAL_RCC_OscConfig+0x212>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8004830:	f7fd fb46 	bl	8001ec0 <HAL_GetTick>
 8004834:	4602      	mov	r2, r0
 8004836:	693b      	ldr	r3, [r7, #16]
 8004838:	1ad3      	subs	r3, r2, r3
 800483a:	2b02      	cmp	r3, #2
 800483c:	d901      	bls.n	8004842 <HAL_RCC_OscConfig+0x212>
        {
          return HAL_TIMEOUT;
 800483e:	2303      	movs	r3, #3
 8004840:	e167      	b.n	8004b12 <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8004842:	4b0b      	ldr	r3, [pc, #44]	; (8004870 <HAL_RCC_OscConfig+0x240>)
 8004844:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8004846:	f003 0302 	and.w	r3, r3, #2
 800484a:	2b00      	cmp	r3, #0
 800484c:	d0f0      	beq.n	8004830 <HAL_RCC_OscConfig+0x200>
 800484e:	e01b      	b.n	8004888 <HAL_RCC_OscConfig+0x258>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8004850:	4b09      	ldr	r3, [pc, #36]	; (8004878 <HAL_RCC_OscConfig+0x248>)
 8004852:	2200      	movs	r2, #0
 8004854:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8004856:	f7fd fb33 	bl	8001ec0 <HAL_GetTick>
 800485a:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 800485c:	e00e      	b.n	800487c <HAL_RCC_OscConfig+0x24c>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 800485e:	f7fd fb2f 	bl	8001ec0 <HAL_GetTick>
 8004862:	4602      	mov	r2, r0
 8004864:	693b      	ldr	r3, [r7, #16]
 8004866:	1ad3      	subs	r3, r2, r3
 8004868:	2b02      	cmp	r3, #2
 800486a:	d907      	bls.n	800487c <HAL_RCC_OscConfig+0x24c>
        {
          return HAL_TIMEOUT;
 800486c:	2303      	movs	r3, #3
 800486e:	e150      	b.n	8004b12 <HAL_RCC_OscConfig+0x4e2>
 8004870:	40023800 	.word	0x40023800
 8004874:	42470000 	.word	0x42470000
 8004878:	42470e80 	.word	0x42470e80
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 800487c:	4b88      	ldr	r3, [pc, #544]	; (8004aa0 <HAL_RCC_OscConfig+0x470>)
 800487e:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8004880:	f003 0302 	and.w	r3, r3, #2
 8004884:	2b00      	cmp	r3, #0
 8004886:	d1ea      	bne.n	800485e <HAL_RCC_OscConfig+0x22e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8004888:	687b      	ldr	r3, [r7, #4]
 800488a:	681b      	ldr	r3, [r3, #0]
 800488c:	f003 0304 	and.w	r3, r3, #4
 8004890:	2b00      	cmp	r3, #0
 8004892:	f000 8097 	beq.w	80049c4 <HAL_RCC_OscConfig+0x394>
  {
    FlagStatus       pwrclkchanged = RESET;
 8004896:	2300      	movs	r3, #0
 8004898:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 800489a:	4b81      	ldr	r3, [pc, #516]	; (8004aa0 <HAL_RCC_OscConfig+0x470>)
 800489c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800489e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80048a2:	2b00      	cmp	r3, #0
 80048a4:	d10f      	bne.n	80048c6 <HAL_RCC_OscConfig+0x296>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 80048a6:	2300      	movs	r3, #0
 80048a8:	60bb      	str	r3, [r7, #8]
 80048aa:	4b7d      	ldr	r3, [pc, #500]	; (8004aa0 <HAL_RCC_OscConfig+0x470>)
 80048ac:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80048ae:	4a7c      	ldr	r2, [pc, #496]	; (8004aa0 <HAL_RCC_OscConfig+0x470>)
 80048b0:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80048b4:	6413      	str	r3, [r2, #64]	; 0x40
 80048b6:	4b7a      	ldr	r3, [pc, #488]	; (8004aa0 <HAL_RCC_OscConfig+0x470>)
 80048b8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80048ba:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80048be:	60bb      	str	r3, [r7, #8]
 80048c0:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 80048c2:	2301      	movs	r3, #1
 80048c4:	75fb      	strb	r3, [r7, #23]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80048c6:	4b77      	ldr	r3, [pc, #476]	; (8004aa4 <HAL_RCC_OscConfig+0x474>)
 80048c8:	681b      	ldr	r3, [r3, #0]
 80048ca:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80048ce:	2b00      	cmp	r3, #0
 80048d0:	d118      	bne.n	8004904 <HAL_RCC_OscConfig+0x2d4>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 80048d2:	4b74      	ldr	r3, [pc, #464]	; (8004aa4 <HAL_RCC_OscConfig+0x474>)
 80048d4:	681b      	ldr	r3, [r3, #0]
 80048d6:	4a73      	ldr	r2, [pc, #460]	; (8004aa4 <HAL_RCC_OscConfig+0x474>)
 80048d8:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80048dc:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 80048de:	f7fd faef 	bl	8001ec0 <HAL_GetTick>
 80048e2:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80048e4:	e008      	b.n	80048f8 <HAL_RCC_OscConfig+0x2c8>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80048e6:	f7fd faeb 	bl	8001ec0 <HAL_GetTick>
 80048ea:	4602      	mov	r2, r0
 80048ec:	693b      	ldr	r3, [r7, #16]
 80048ee:	1ad3      	subs	r3, r2, r3
 80048f0:	2b02      	cmp	r3, #2
 80048f2:	d901      	bls.n	80048f8 <HAL_RCC_OscConfig+0x2c8>
        {
          return HAL_TIMEOUT;
 80048f4:	2303      	movs	r3, #3
 80048f6:	e10c      	b.n	8004b12 <HAL_RCC_OscConfig+0x4e2>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80048f8:	4b6a      	ldr	r3, [pc, #424]	; (8004aa4 <HAL_RCC_OscConfig+0x474>)
 80048fa:	681b      	ldr	r3, [r3, #0]
 80048fc:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004900:	2b00      	cmp	r3, #0
 8004902:	d0f0      	beq.n	80048e6 <HAL_RCC_OscConfig+0x2b6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8004904:	687b      	ldr	r3, [r7, #4]
 8004906:	689b      	ldr	r3, [r3, #8]
 8004908:	2b01      	cmp	r3, #1
 800490a:	d106      	bne.n	800491a <HAL_RCC_OscConfig+0x2ea>
 800490c:	4b64      	ldr	r3, [pc, #400]	; (8004aa0 <HAL_RCC_OscConfig+0x470>)
 800490e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004910:	4a63      	ldr	r2, [pc, #396]	; (8004aa0 <HAL_RCC_OscConfig+0x470>)
 8004912:	f043 0301 	orr.w	r3, r3, #1
 8004916:	6713      	str	r3, [r2, #112]	; 0x70
 8004918:	e01c      	b.n	8004954 <HAL_RCC_OscConfig+0x324>
 800491a:	687b      	ldr	r3, [r7, #4]
 800491c:	689b      	ldr	r3, [r3, #8]
 800491e:	2b05      	cmp	r3, #5
 8004920:	d10c      	bne.n	800493c <HAL_RCC_OscConfig+0x30c>
 8004922:	4b5f      	ldr	r3, [pc, #380]	; (8004aa0 <HAL_RCC_OscConfig+0x470>)
 8004924:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004926:	4a5e      	ldr	r2, [pc, #376]	; (8004aa0 <HAL_RCC_OscConfig+0x470>)
 8004928:	f043 0304 	orr.w	r3, r3, #4
 800492c:	6713      	str	r3, [r2, #112]	; 0x70
 800492e:	4b5c      	ldr	r3, [pc, #368]	; (8004aa0 <HAL_RCC_OscConfig+0x470>)
 8004930:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004932:	4a5b      	ldr	r2, [pc, #364]	; (8004aa0 <HAL_RCC_OscConfig+0x470>)
 8004934:	f043 0301 	orr.w	r3, r3, #1
 8004938:	6713      	str	r3, [r2, #112]	; 0x70
 800493a:	e00b      	b.n	8004954 <HAL_RCC_OscConfig+0x324>
 800493c:	4b58      	ldr	r3, [pc, #352]	; (8004aa0 <HAL_RCC_OscConfig+0x470>)
 800493e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004940:	4a57      	ldr	r2, [pc, #348]	; (8004aa0 <HAL_RCC_OscConfig+0x470>)
 8004942:	f023 0301 	bic.w	r3, r3, #1
 8004946:	6713      	str	r3, [r2, #112]	; 0x70
 8004948:	4b55      	ldr	r3, [pc, #340]	; (8004aa0 <HAL_RCC_OscConfig+0x470>)
 800494a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800494c:	4a54      	ldr	r2, [pc, #336]	; (8004aa0 <HAL_RCC_OscConfig+0x470>)
 800494e:	f023 0304 	bic.w	r3, r3, #4
 8004952:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8004954:	687b      	ldr	r3, [r7, #4]
 8004956:	689b      	ldr	r3, [r3, #8]
 8004958:	2b00      	cmp	r3, #0
 800495a:	d015      	beq.n	8004988 <HAL_RCC_OscConfig+0x358>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800495c:	f7fd fab0 	bl	8001ec0 <HAL_GetTick>
 8004960:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8004962:	e00a      	b.n	800497a <HAL_RCC_OscConfig+0x34a>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8004964:	f7fd faac 	bl	8001ec0 <HAL_GetTick>
 8004968:	4602      	mov	r2, r0
 800496a:	693b      	ldr	r3, [r7, #16]
 800496c:	1ad3      	subs	r3, r2, r3
 800496e:	f241 3288 	movw	r2, #5000	; 0x1388
 8004972:	4293      	cmp	r3, r2
 8004974:	d901      	bls.n	800497a <HAL_RCC_OscConfig+0x34a>
        {
          return HAL_TIMEOUT;
 8004976:	2303      	movs	r3, #3
 8004978:	e0cb      	b.n	8004b12 <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800497a:	4b49      	ldr	r3, [pc, #292]	; (8004aa0 <HAL_RCC_OscConfig+0x470>)
 800497c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800497e:	f003 0302 	and.w	r3, r3, #2
 8004982:	2b00      	cmp	r3, #0
 8004984:	d0ee      	beq.n	8004964 <HAL_RCC_OscConfig+0x334>
 8004986:	e014      	b.n	80049b2 <HAL_RCC_OscConfig+0x382>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8004988:	f7fd fa9a 	bl	8001ec0 <HAL_GetTick>
 800498c:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 800498e:	e00a      	b.n	80049a6 <HAL_RCC_OscConfig+0x376>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8004990:	f7fd fa96 	bl	8001ec0 <HAL_GetTick>
 8004994:	4602      	mov	r2, r0
 8004996:	693b      	ldr	r3, [r7, #16]
 8004998:	1ad3      	subs	r3, r2, r3
 800499a:	f241 3288 	movw	r2, #5000	; 0x1388
 800499e:	4293      	cmp	r3, r2
 80049a0:	d901      	bls.n	80049a6 <HAL_RCC_OscConfig+0x376>
        {
          return HAL_TIMEOUT;
 80049a2:	2303      	movs	r3, #3
 80049a4:	e0b5      	b.n	8004b12 <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80049a6:	4b3e      	ldr	r3, [pc, #248]	; (8004aa0 <HAL_RCC_OscConfig+0x470>)
 80049a8:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80049aa:	f003 0302 	and.w	r3, r3, #2
 80049ae:	2b00      	cmp	r3, #0
 80049b0:	d1ee      	bne.n	8004990 <HAL_RCC_OscConfig+0x360>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 80049b2:	7dfb      	ldrb	r3, [r7, #23]
 80049b4:	2b01      	cmp	r3, #1
 80049b6:	d105      	bne.n	80049c4 <HAL_RCC_OscConfig+0x394>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 80049b8:	4b39      	ldr	r3, [pc, #228]	; (8004aa0 <HAL_RCC_OscConfig+0x470>)
 80049ba:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80049bc:	4a38      	ldr	r2, [pc, #224]	; (8004aa0 <HAL_RCC_OscConfig+0x470>)
 80049be:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 80049c2:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 80049c4:	687b      	ldr	r3, [r7, #4]
 80049c6:	699b      	ldr	r3, [r3, #24]
 80049c8:	2b00      	cmp	r3, #0
 80049ca:	f000 80a1 	beq.w	8004b10 <HAL_RCC_OscConfig+0x4e0>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 80049ce:	4b34      	ldr	r3, [pc, #208]	; (8004aa0 <HAL_RCC_OscConfig+0x470>)
 80049d0:	689b      	ldr	r3, [r3, #8]
 80049d2:	f003 030c 	and.w	r3, r3, #12
 80049d6:	2b08      	cmp	r3, #8
 80049d8:	d05c      	beq.n	8004a94 <HAL_RCC_OscConfig+0x464>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 80049da:	687b      	ldr	r3, [r7, #4]
 80049dc:	699b      	ldr	r3, [r3, #24]
 80049de:	2b02      	cmp	r3, #2
 80049e0:	d141      	bne.n	8004a66 <HAL_RCC_OscConfig+0x436>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80049e2:	4b31      	ldr	r3, [pc, #196]	; (8004aa8 <HAL_RCC_OscConfig+0x478>)
 80049e4:	2200      	movs	r2, #0
 80049e6:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80049e8:	f7fd fa6a 	bl	8001ec0 <HAL_GetTick>
 80049ec:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80049ee:	e008      	b.n	8004a02 <HAL_RCC_OscConfig+0x3d2>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80049f0:	f7fd fa66 	bl	8001ec0 <HAL_GetTick>
 80049f4:	4602      	mov	r2, r0
 80049f6:	693b      	ldr	r3, [r7, #16]
 80049f8:	1ad3      	subs	r3, r2, r3
 80049fa:	2b02      	cmp	r3, #2
 80049fc:	d901      	bls.n	8004a02 <HAL_RCC_OscConfig+0x3d2>
          {
            return HAL_TIMEOUT;
 80049fe:	2303      	movs	r3, #3
 8004a00:	e087      	b.n	8004b12 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8004a02:	4b27      	ldr	r3, [pc, #156]	; (8004aa0 <HAL_RCC_OscConfig+0x470>)
 8004a04:	681b      	ldr	r3, [r3, #0]
 8004a06:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8004a0a:	2b00      	cmp	r3, #0
 8004a0c:	d1f0      	bne.n	80049f0 <HAL_RCC_OscConfig+0x3c0>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 8004a0e:	687b      	ldr	r3, [r7, #4]
 8004a10:	69da      	ldr	r2, [r3, #28]
 8004a12:	687b      	ldr	r3, [r7, #4]
 8004a14:	6a1b      	ldr	r3, [r3, #32]
 8004a16:	431a      	orrs	r2, r3
 8004a18:	687b      	ldr	r3, [r7, #4]
 8004a1a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004a1c:	019b      	lsls	r3, r3, #6
 8004a1e:	431a      	orrs	r2, r3
 8004a20:	687b      	ldr	r3, [r7, #4]
 8004a22:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004a24:	085b      	lsrs	r3, r3, #1
 8004a26:	3b01      	subs	r3, #1
 8004a28:	041b      	lsls	r3, r3, #16
 8004a2a:	431a      	orrs	r2, r3
 8004a2c:	687b      	ldr	r3, [r7, #4]
 8004a2e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004a30:	061b      	lsls	r3, r3, #24
 8004a32:	491b      	ldr	r1, [pc, #108]	; (8004aa0 <HAL_RCC_OscConfig+0x470>)
 8004a34:	4313      	orrs	r3, r2
 8004a36:	604b      	str	r3, [r1, #4]
                                 RCC_OscInitStruct->PLL.PLLM                                                 | \
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)             | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos) | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8004a38:	4b1b      	ldr	r3, [pc, #108]	; (8004aa8 <HAL_RCC_OscConfig+0x478>)
 8004a3a:	2201      	movs	r2, #1
 8004a3c:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8004a3e:	f7fd fa3f 	bl	8001ec0 <HAL_GetTick>
 8004a42:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8004a44:	e008      	b.n	8004a58 <HAL_RCC_OscConfig+0x428>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8004a46:	f7fd fa3b 	bl	8001ec0 <HAL_GetTick>
 8004a4a:	4602      	mov	r2, r0
 8004a4c:	693b      	ldr	r3, [r7, #16]
 8004a4e:	1ad3      	subs	r3, r2, r3
 8004a50:	2b02      	cmp	r3, #2
 8004a52:	d901      	bls.n	8004a58 <HAL_RCC_OscConfig+0x428>
          {
            return HAL_TIMEOUT;
 8004a54:	2303      	movs	r3, #3
 8004a56:	e05c      	b.n	8004b12 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8004a58:	4b11      	ldr	r3, [pc, #68]	; (8004aa0 <HAL_RCC_OscConfig+0x470>)
 8004a5a:	681b      	ldr	r3, [r3, #0]
 8004a5c:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8004a60:	2b00      	cmp	r3, #0
 8004a62:	d0f0      	beq.n	8004a46 <HAL_RCC_OscConfig+0x416>
 8004a64:	e054      	b.n	8004b10 <HAL_RCC_OscConfig+0x4e0>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8004a66:	4b10      	ldr	r3, [pc, #64]	; (8004aa8 <HAL_RCC_OscConfig+0x478>)
 8004a68:	2200      	movs	r2, #0
 8004a6a:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8004a6c:	f7fd fa28 	bl	8001ec0 <HAL_GetTick>
 8004a70:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8004a72:	e008      	b.n	8004a86 <HAL_RCC_OscConfig+0x456>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8004a74:	f7fd fa24 	bl	8001ec0 <HAL_GetTick>
 8004a78:	4602      	mov	r2, r0
 8004a7a:	693b      	ldr	r3, [r7, #16]
 8004a7c:	1ad3      	subs	r3, r2, r3
 8004a7e:	2b02      	cmp	r3, #2
 8004a80:	d901      	bls.n	8004a86 <HAL_RCC_OscConfig+0x456>
          {
            return HAL_TIMEOUT;
 8004a82:	2303      	movs	r3, #3
 8004a84:	e045      	b.n	8004b12 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8004a86:	4b06      	ldr	r3, [pc, #24]	; (8004aa0 <HAL_RCC_OscConfig+0x470>)
 8004a88:	681b      	ldr	r3, [r3, #0]
 8004a8a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8004a8e:	2b00      	cmp	r3, #0
 8004a90:	d1f0      	bne.n	8004a74 <HAL_RCC_OscConfig+0x444>
 8004a92:	e03d      	b.n	8004b10 <HAL_RCC_OscConfig+0x4e0>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8004a94:	687b      	ldr	r3, [r7, #4]
 8004a96:	699b      	ldr	r3, [r3, #24]
 8004a98:	2b01      	cmp	r3, #1
 8004a9a:	d107      	bne.n	8004aac <HAL_RCC_OscConfig+0x47c>
      {
        return HAL_ERROR;
 8004a9c:	2301      	movs	r3, #1
 8004a9e:	e038      	b.n	8004b12 <HAL_RCC_OscConfig+0x4e2>
 8004aa0:	40023800 	.word	0x40023800
 8004aa4:	40007000 	.word	0x40007000
 8004aa8:	42470060 	.word	0x42470060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 8004aac:	4b1b      	ldr	r3, [pc, #108]	; (8004b1c <HAL_RCC_OscConfig+0x4ec>)
 8004aae:	685b      	ldr	r3, [r3, #4]
 8004ab0:	60fb      	str	r3, [r7, #12]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
#else
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8004ab2:	687b      	ldr	r3, [r7, #4]
 8004ab4:	699b      	ldr	r3, [r3, #24]
 8004ab6:	2b01      	cmp	r3, #1
 8004ab8:	d028      	beq.n	8004b0c <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8004aba:	68fb      	ldr	r3, [r7, #12]
 8004abc:	f403 0280 	and.w	r2, r3, #4194304	; 0x400000
 8004ac0:	687b      	ldr	r3, [r7, #4]
 8004ac2:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8004ac4:	429a      	cmp	r2, r3
 8004ac6:	d121      	bne.n	8004b0c <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8004ac8:	68fb      	ldr	r3, [r7, #12]
 8004aca:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 8004ace:	687b      	ldr	r3, [r7, #4]
 8004ad0:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8004ad2:	429a      	cmp	r2, r3
 8004ad4:	d11a      	bne.n	8004b0c <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8004ad6:	68fa      	ldr	r2, [r7, #12]
 8004ad8:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 8004adc:	4013      	ands	r3, r2
 8004ade:	687a      	ldr	r2, [r7, #4]
 8004ae0:	6a52      	ldr	r2, [r2, #36]	; 0x24
 8004ae2:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8004ae4:	4293      	cmp	r3, r2
 8004ae6:	d111      	bne.n	8004b0c <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8004ae8:	68fb      	ldr	r3, [r7, #12]
 8004aea:	f403 3240 	and.w	r2, r3, #196608	; 0x30000
 8004aee:	687b      	ldr	r3, [r7, #4]
 8004af0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004af2:	085b      	lsrs	r3, r3, #1
 8004af4:	3b01      	subs	r3, #1
 8004af6:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8004af8:	429a      	cmp	r2, r3
 8004afa:	d107      	bne.n	8004b0c <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
 8004afc:	68fb      	ldr	r3, [r7, #12]
 8004afe:	f003 6270 	and.w	r2, r3, #251658240	; 0xf000000
 8004b02:	687b      	ldr	r3, [r7, #4]
 8004b04:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004b06:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8004b08:	429a      	cmp	r2, r3
 8004b0a:	d001      	beq.n	8004b10 <HAL_RCC_OscConfig+0x4e0>
#endif
        {
          return HAL_ERROR;
 8004b0c:	2301      	movs	r3, #1
 8004b0e:	e000      	b.n	8004b12 <HAL_RCC_OscConfig+0x4e2>
        }
      }
    }
  }
  return HAL_OK;
 8004b10:	2300      	movs	r3, #0
}
 8004b12:	4618      	mov	r0, r3
 8004b14:	3718      	adds	r7, #24
 8004b16:	46bd      	mov	sp, r7
 8004b18:	bd80      	pop	{r7, pc}
 8004b1a:	bf00      	nop
 8004b1c:	40023800 	.word	0x40023800

08004b20 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8004b20:	b580      	push	{r7, lr}
 8004b22:	b084      	sub	sp, #16
 8004b24:	af00      	add	r7, sp, #0
 8004b26:	6078      	str	r0, [r7, #4]
 8004b28:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8004b2a:	687b      	ldr	r3, [r7, #4]
 8004b2c:	2b00      	cmp	r3, #0
 8004b2e:	d101      	bne.n	8004b34 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8004b30:	2301      	movs	r3, #1
 8004b32:	e0cc      	b.n	8004cce <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8004b34:	4b68      	ldr	r3, [pc, #416]	; (8004cd8 <HAL_RCC_ClockConfig+0x1b8>)
 8004b36:	681b      	ldr	r3, [r3, #0]
 8004b38:	f003 030f 	and.w	r3, r3, #15
 8004b3c:	683a      	ldr	r2, [r7, #0]
 8004b3e:	429a      	cmp	r2, r3
 8004b40:	d90c      	bls.n	8004b5c <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8004b42:	4b65      	ldr	r3, [pc, #404]	; (8004cd8 <HAL_RCC_ClockConfig+0x1b8>)
 8004b44:	683a      	ldr	r2, [r7, #0]
 8004b46:	b2d2      	uxtb	r2, r2
 8004b48:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8004b4a:	4b63      	ldr	r3, [pc, #396]	; (8004cd8 <HAL_RCC_ClockConfig+0x1b8>)
 8004b4c:	681b      	ldr	r3, [r3, #0]
 8004b4e:	f003 030f 	and.w	r3, r3, #15
 8004b52:	683a      	ldr	r2, [r7, #0]
 8004b54:	429a      	cmp	r2, r3
 8004b56:	d001      	beq.n	8004b5c <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 8004b58:	2301      	movs	r3, #1
 8004b5a:	e0b8      	b.n	8004cce <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8004b5c:	687b      	ldr	r3, [r7, #4]
 8004b5e:	681b      	ldr	r3, [r3, #0]
 8004b60:	f003 0302 	and.w	r3, r3, #2
 8004b64:	2b00      	cmp	r3, #0
 8004b66:	d020      	beq.n	8004baa <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8004b68:	687b      	ldr	r3, [r7, #4]
 8004b6a:	681b      	ldr	r3, [r3, #0]
 8004b6c:	f003 0304 	and.w	r3, r3, #4
 8004b70:	2b00      	cmp	r3, #0
 8004b72:	d005      	beq.n	8004b80 <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8004b74:	4b59      	ldr	r3, [pc, #356]	; (8004cdc <HAL_RCC_ClockConfig+0x1bc>)
 8004b76:	689b      	ldr	r3, [r3, #8]
 8004b78:	4a58      	ldr	r2, [pc, #352]	; (8004cdc <HAL_RCC_ClockConfig+0x1bc>)
 8004b7a:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 8004b7e:	6093      	str	r3, [r2, #8]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8004b80:	687b      	ldr	r3, [r7, #4]
 8004b82:	681b      	ldr	r3, [r3, #0]
 8004b84:	f003 0308 	and.w	r3, r3, #8
 8004b88:	2b00      	cmp	r3, #0
 8004b8a:	d005      	beq.n	8004b98 <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8004b8c:	4b53      	ldr	r3, [pc, #332]	; (8004cdc <HAL_RCC_ClockConfig+0x1bc>)
 8004b8e:	689b      	ldr	r3, [r3, #8]
 8004b90:	4a52      	ldr	r2, [pc, #328]	; (8004cdc <HAL_RCC_ClockConfig+0x1bc>)
 8004b92:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 8004b96:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8004b98:	4b50      	ldr	r3, [pc, #320]	; (8004cdc <HAL_RCC_ClockConfig+0x1bc>)
 8004b9a:	689b      	ldr	r3, [r3, #8]
 8004b9c:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8004ba0:	687b      	ldr	r3, [r7, #4]
 8004ba2:	689b      	ldr	r3, [r3, #8]
 8004ba4:	494d      	ldr	r1, [pc, #308]	; (8004cdc <HAL_RCC_ClockConfig+0x1bc>)
 8004ba6:	4313      	orrs	r3, r2
 8004ba8:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8004baa:	687b      	ldr	r3, [r7, #4]
 8004bac:	681b      	ldr	r3, [r3, #0]
 8004bae:	f003 0301 	and.w	r3, r3, #1
 8004bb2:	2b00      	cmp	r3, #0
 8004bb4:	d044      	beq.n	8004c40 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8004bb6:	687b      	ldr	r3, [r7, #4]
 8004bb8:	685b      	ldr	r3, [r3, #4]
 8004bba:	2b01      	cmp	r3, #1
 8004bbc:	d107      	bne.n	8004bce <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8004bbe:	4b47      	ldr	r3, [pc, #284]	; (8004cdc <HAL_RCC_ClockConfig+0x1bc>)
 8004bc0:	681b      	ldr	r3, [r3, #0]
 8004bc2:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8004bc6:	2b00      	cmp	r3, #0
 8004bc8:	d119      	bne.n	8004bfe <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8004bca:	2301      	movs	r3, #1
 8004bcc:	e07f      	b.n	8004cce <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8004bce:	687b      	ldr	r3, [r7, #4]
 8004bd0:	685b      	ldr	r3, [r3, #4]
 8004bd2:	2b02      	cmp	r3, #2
 8004bd4:	d003      	beq.n	8004bde <HAL_RCC_ClockConfig+0xbe>
            (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 8004bd6:	687b      	ldr	r3, [r7, #4]
 8004bd8:	685b      	ldr	r3, [r3, #4]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8004bda:	2b03      	cmp	r3, #3
 8004bdc:	d107      	bne.n	8004bee <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8004bde:	4b3f      	ldr	r3, [pc, #252]	; (8004cdc <HAL_RCC_ClockConfig+0x1bc>)
 8004be0:	681b      	ldr	r3, [r3, #0]
 8004be2:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8004be6:	2b00      	cmp	r3, #0
 8004be8:	d109      	bne.n	8004bfe <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8004bea:	2301      	movs	r3, #1
 8004bec:	e06f      	b.n	8004cce <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8004bee:	4b3b      	ldr	r3, [pc, #236]	; (8004cdc <HAL_RCC_ClockConfig+0x1bc>)
 8004bf0:	681b      	ldr	r3, [r3, #0]
 8004bf2:	f003 0302 	and.w	r3, r3, #2
 8004bf6:	2b00      	cmp	r3, #0
 8004bf8:	d101      	bne.n	8004bfe <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8004bfa:	2301      	movs	r3, #1
 8004bfc:	e067      	b.n	8004cce <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8004bfe:	4b37      	ldr	r3, [pc, #220]	; (8004cdc <HAL_RCC_ClockConfig+0x1bc>)
 8004c00:	689b      	ldr	r3, [r3, #8]
 8004c02:	f023 0203 	bic.w	r2, r3, #3
 8004c06:	687b      	ldr	r3, [r7, #4]
 8004c08:	685b      	ldr	r3, [r3, #4]
 8004c0a:	4934      	ldr	r1, [pc, #208]	; (8004cdc <HAL_RCC_ClockConfig+0x1bc>)
 8004c0c:	4313      	orrs	r3, r2
 8004c0e:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8004c10:	f7fd f956 	bl	8001ec0 <HAL_GetTick>
 8004c14:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8004c16:	e00a      	b.n	8004c2e <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8004c18:	f7fd f952 	bl	8001ec0 <HAL_GetTick>
 8004c1c:	4602      	mov	r2, r0
 8004c1e:	68fb      	ldr	r3, [r7, #12]
 8004c20:	1ad3      	subs	r3, r2, r3
 8004c22:	f241 3288 	movw	r2, #5000	; 0x1388
 8004c26:	4293      	cmp	r3, r2
 8004c28:	d901      	bls.n	8004c2e <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 8004c2a:	2303      	movs	r3, #3
 8004c2c:	e04f      	b.n	8004cce <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8004c2e:	4b2b      	ldr	r3, [pc, #172]	; (8004cdc <HAL_RCC_ClockConfig+0x1bc>)
 8004c30:	689b      	ldr	r3, [r3, #8]
 8004c32:	f003 020c 	and.w	r2, r3, #12
 8004c36:	687b      	ldr	r3, [r7, #4]
 8004c38:	685b      	ldr	r3, [r3, #4]
 8004c3a:	009b      	lsls	r3, r3, #2
 8004c3c:	429a      	cmp	r2, r3
 8004c3e:	d1eb      	bne.n	8004c18 <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8004c40:	4b25      	ldr	r3, [pc, #148]	; (8004cd8 <HAL_RCC_ClockConfig+0x1b8>)
 8004c42:	681b      	ldr	r3, [r3, #0]
 8004c44:	f003 030f 	and.w	r3, r3, #15
 8004c48:	683a      	ldr	r2, [r7, #0]
 8004c4a:	429a      	cmp	r2, r3
 8004c4c:	d20c      	bcs.n	8004c68 <HAL_RCC_ClockConfig+0x148>
  {
     /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8004c4e:	4b22      	ldr	r3, [pc, #136]	; (8004cd8 <HAL_RCC_ClockConfig+0x1b8>)
 8004c50:	683a      	ldr	r2, [r7, #0]
 8004c52:	b2d2      	uxtb	r2, r2
 8004c54:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8004c56:	4b20      	ldr	r3, [pc, #128]	; (8004cd8 <HAL_RCC_ClockConfig+0x1b8>)
 8004c58:	681b      	ldr	r3, [r3, #0]
 8004c5a:	f003 030f 	and.w	r3, r3, #15
 8004c5e:	683a      	ldr	r2, [r7, #0]
 8004c60:	429a      	cmp	r2, r3
 8004c62:	d001      	beq.n	8004c68 <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 8004c64:	2301      	movs	r3, #1
 8004c66:	e032      	b.n	8004cce <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8004c68:	687b      	ldr	r3, [r7, #4]
 8004c6a:	681b      	ldr	r3, [r3, #0]
 8004c6c:	f003 0304 	and.w	r3, r3, #4
 8004c70:	2b00      	cmp	r3, #0
 8004c72:	d008      	beq.n	8004c86 <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8004c74:	4b19      	ldr	r3, [pc, #100]	; (8004cdc <HAL_RCC_ClockConfig+0x1bc>)
 8004c76:	689b      	ldr	r3, [r3, #8]
 8004c78:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 8004c7c:	687b      	ldr	r3, [r7, #4]
 8004c7e:	68db      	ldr	r3, [r3, #12]
 8004c80:	4916      	ldr	r1, [pc, #88]	; (8004cdc <HAL_RCC_ClockConfig+0x1bc>)
 8004c82:	4313      	orrs	r3, r2
 8004c84:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8004c86:	687b      	ldr	r3, [r7, #4]
 8004c88:	681b      	ldr	r3, [r3, #0]
 8004c8a:	f003 0308 	and.w	r3, r3, #8
 8004c8e:	2b00      	cmp	r3, #0
 8004c90:	d009      	beq.n	8004ca6 <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8004c92:	4b12      	ldr	r3, [pc, #72]	; (8004cdc <HAL_RCC_ClockConfig+0x1bc>)
 8004c94:	689b      	ldr	r3, [r3, #8]
 8004c96:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 8004c9a:	687b      	ldr	r3, [r7, #4]
 8004c9c:	691b      	ldr	r3, [r3, #16]
 8004c9e:	00db      	lsls	r3, r3, #3
 8004ca0:	490e      	ldr	r1, [pc, #56]	; (8004cdc <HAL_RCC_ClockConfig+0x1bc>)
 8004ca2:	4313      	orrs	r3, r2
 8004ca4:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 8004ca6:	f000 f821 	bl	8004cec <HAL_RCC_GetSysClockFreq>
 8004caa:	4602      	mov	r2, r0
 8004cac:	4b0b      	ldr	r3, [pc, #44]	; (8004cdc <HAL_RCC_ClockConfig+0x1bc>)
 8004cae:	689b      	ldr	r3, [r3, #8]
 8004cb0:	091b      	lsrs	r3, r3, #4
 8004cb2:	f003 030f 	and.w	r3, r3, #15
 8004cb6:	490a      	ldr	r1, [pc, #40]	; (8004ce0 <HAL_RCC_ClockConfig+0x1c0>)
 8004cb8:	5ccb      	ldrb	r3, [r1, r3]
 8004cba:	fa22 f303 	lsr.w	r3, r2, r3
 8004cbe:	4a09      	ldr	r2, [pc, #36]	; (8004ce4 <HAL_RCC_ClockConfig+0x1c4>)
 8004cc0:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick (uwTickPrio);
 8004cc2:	4b09      	ldr	r3, [pc, #36]	; (8004ce8 <HAL_RCC_ClockConfig+0x1c8>)
 8004cc4:	681b      	ldr	r3, [r3, #0]
 8004cc6:	4618      	mov	r0, r3
 8004cc8:	f7fc fd80 	bl	80017cc <HAL_InitTick>

  return HAL_OK;
 8004ccc:	2300      	movs	r3, #0
}
 8004cce:	4618      	mov	r0, r3
 8004cd0:	3710      	adds	r7, #16
 8004cd2:	46bd      	mov	sp, r7
 8004cd4:	bd80      	pop	{r7, pc}
 8004cd6:	bf00      	nop
 8004cd8:	40023c00 	.word	0x40023c00
 8004cdc:	40023800 	.word	0x40023800
 8004ce0:	08009510 	.word	0x08009510
 8004ce4:	20000000 	.word	0x20000000
 8004ce8:	20000004 	.word	0x20000004

08004cec <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8004cec:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8004cf0:	b094      	sub	sp, #80	; 0x50
 8004cf2:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U, pllvco = 0U, pllp = 0U;
 8004cf4:	2300      	movs	r3, #0
 8004cf6:	647b      	str	r3, [r7, #68]	; 0x44
 8004cf8:	2300      	movs	r3, #0
 8004cfa:	64fb      	str	r3, [r7, #76]	; 0x4c
 8004cfc:	2300      	movs	r3, #0
 8004cfe:	643b      	str	r3, [r7, #64]	; 0x40
  uint32_t sysclockfreq = 0U;
 8004d00:	2300      	movs	r3, #0
 8004d02:	64bb      	str	r3, [r7, #72]	; 0x48

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8004d04:	4b79      	ldr	r3, [pc, #484]	; (8004eec <HAL_RCC_GetSysClockFreq+0x200>)
 8004d06:	689b      	ldr	r3, [r3, #8]
 8004d08:	f003 030c 	and.w	r3, r3, #12
 8004d0c:	2b08      	cmp	r3, #8
 8004d0e:	d00d      	beq.n	8004d2c <HAL_RCC_GetSysClockFreq+0x40>
 8004d10:	2b08      	cmp	r3, #8
 8004d12:	f200 80e1 	bhi.w	8004ed8 <HAL_RCC_GetSysClockFreq+0x1ec>
 8004d16:	2b00      	cmp	r3, #0
 8004d18:	d002      	beq.n	8004d20 <HAL_RCC_GetSysClockFreq+0x34>
 8004d1a:	2b04      	cmp	r3, #4
 8004d1c:	d003      	beq.n	8004d26 <HAL_RCC_GetSysClockFreq+0x3a>
 8004d1e:	e0db      	b.n	8004ed8 <HAL_RCC_GetSysClockFreq+0x1ec>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 8004d20:	4b73      	ldr	r3, [pc, #460]	; (8004ef0 <HAL_RCC_GetSysClockFreq+0x204>)
 8004d22:	64bb      	str	r3, [r7, #72]	; 0x48
       break;
 8004d24:	e0db      	b.n	8004ede <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 8004d26:	4b73      	ldr	r3, [pc, #460]	; (8004ef4 <HAL_RCC_GetSysClockFreq+0x208>)
 8004d28:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 8004d2a:	e0d8      	b.n	8004ede <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8004d2c:	4b6f      	ldr	r3, [pc, #444]	; (8004eec <HAL_RCC_GetSysClockFreq+0x200>)
 8004d2e:	685b      	ldr	r3, [r3, #4]
 8004d30:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8004d34:	647b      	str	r3, [r7, #68]	; 0x44
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8004d36:	4b6d      	ldr	r3, [pc, #436]	; (8004eec <HAL_RCC_GetSysClockFreq+0x200>)
 8004d38:	685b      	ldr	r3, [r3, #4]
 8004d3a:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8004d3e:	2b00      	cmp	r3, #0
 8004d40:	d063      	beq.n	8004e0a <HAL_RCC_GetSysClockFreq+0x11e>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8004d42:	4b6a      	ldr	r3, [pc, #424]	; (8004eec <HAL_RCC_GetSysClockFreq+0x200>)
 8004d44:	685b      	ldr	r3, [r3, #4]
 8004d46:	099b      	lsrs	r3, r3, #6
 8004d48:	2200      	movs	r2, #0
 8004d4a:	63bb      	str	r3, [r7, #56]	; 0x38
 8004d4c:	63fa      	str	r2, [r7, #60]	; 0x3c
 8004d4e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004d50:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8004d54:	633b      	str	r3, [r7, #48]	; 0x30
 8004d56:	2300      	movs	r3, #0
 8004d58:	637b      	str	r3, [r7, #52]	; 0x34
 8004d5a:	e9d7 450c 	ldrd	r4, r5, [r7, #48]	; 0x30
 8004d5e:	4622      	mov	r2, r4
 8004d60:	462b      	mov	r3, r5
 8004d62:	f04f 0000 	mov.w	r0, #0
 8004d66:	f04f 0100 	mov.w	r1, #0
 8004d6a:	0159      	lsls	r1, r3, #5
 8004d6c:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8004d70:	0150      	lsls	r0, r2, #5
 8004d72:	4602      	mov	r2, r0
 8004d74:	460b      	mov	r3, r1
 8004d76:	4621      	mov	r1, r4
 8004d78:	1a51      	subs	r1, r2, r1
 8004d7a:	6139      	str	r1, [r7, #16]
 8004d7c:	4629      	mov	r1, r5
 8004d7e:	eb63 0301 	sbc.w	r3, r3, r1
 8004d82:	617b      	str	r3, [r7, #20]
 8004d84:	f04f 0200 	mov.w	r2, #0
 8004d88:	f04f 0300 	mov.w	r3, #0
 8004d8c:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 8004d90:	4659      	mov	r1, fp
 8004d92:	018b      	lsls	r3, r1, #6
 8004d94:	4651      	mov	r1, sl
 8004d96:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 8004d9a:	4651      	mov	r1, sl
 8004d9c:	018a      	lsls	r2, r1, #6
 8004d9e:	4651      	mov	r1, sl
 8004da0:	ebb2 0801 	subs.w	r8, r2, r1
 8004da4:	4659      	mov	r1, fp
 8004da6:	eb63 0901 	sbc.w	r9, r3, r1
 8004daa:	f04f 0200 	mov.w	r2, #0
 8004dae:	f04f 0300 	mov.w	r3, #0
 8004db2:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 8004db6:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 8004dba:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 8004dbe:	4690      	mov	r8, r2
 8004dc0:	4699      	mov	r9, r3
 8004dc2:	4623      	mov	r3, r4
 8004dc4:	eb18 0303 	adds.w	r3, r8, r3
 8004dc8:	60bb      	str	r3, [r7, #8]
 8004dca:	462b      	mov	r3, r5
 8004dcc:	eb49 0303 	adc.w	r3, r9, r3
 8004dd0:	60fb      	str	r3, [r7, #12]
 8004dd2:	f04f 0200 	mov.w	r2, #0
 8004dd6:	f04f 0300 	mov.w	r3, #0
 8004dda:	e9d7 4502 	ldrd	r4, r5, [r7, #8]
 8004dde:	4629      	mov	r1, r5
 8004de0:	024b      	lsls	r3, r1, #9
 8004de2:	4621      	mov	r1, r4
 8004de4:	ea43 53d1 	orr.w	r3, r3, r1, lsr #23
 8004de8:	4621      	mov	r1, r4
 8004dea:	024a      	lsls	r2, r1, #9
 8004dec:	4610      	mov	r0, r2
 8004dee:	4619      	mov	r1, r3
 8004df0:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8004df2:	2200      	movs	r2, #0
 8004df4:	62bb      	str	r3, [r7, #40]	; 0x28
 8004df6:	62fa      	str	r2, [r7, #44]	; 0x2c
 8004df8:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 8004dfc:	f7fb fb70 	bl	80004e0 <__aeabi_uldivmod>
 8004e00:	4602      	mov	r2, r0
 8004e02:	460b      	mov	r3, r1
 8004e04:	4613      	mov	r3, r2
 8004e06:	64fb      	str	r3, [r7, #76]	; 0x4c
 8004e08:	e058      	b.n	8004ebc <HAL_RCC_GetSysClockFreq+0x1d0>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8004e0a:	4b38      	ldr	r3, [pc, #224]	; (8004eec <HAL_RCC_GetSysClockFreq+0x200>)
 8004e0c:	685b      	ldr	r3, [r3, #4]
 8004e0e:	099b      	lsrs	r3, r3, #6
 8004e10:	2200      	movs	r2, #0
 8004e12:	4618      	mov	r0, r3
 8004e14:	4611      	mov	r1, r2
 8004e16:	f3c0 0308 	ubfx	r3, r0, #0, #9
 8004e1a:	623b      	str	r3, [r7, #32]
 8004e1c:	2300      	movs	r3, #0
 8004e1e:	627b      	str	r3, [r7, #36]	; 0x24
 8004e20:	e9d7 8908 	ldrd	r8, r9, [r7, #32]
 8004e24:	4642      	mov	r2, r8
 8004e26:	464b      	mov	r3, r9
 8004e28:	f04f 0000 	mov.w	r0, #0
 8004e2c:	f04f 0100 	mov.w	r1, #0
 8004e30:	0159      	lsls	r1, r3, #5
 8004e32:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8004e36:	0150      	lsls	r0, r2, #5
 8004e38:	4602      	mov	r2, r0
 8004e3a:	460b      	mov	r3, r1
 8004e3c:	4641      	mov	r1, r8
 8004e3e:	ebb2 0a01 	subs.w	sl, r2, r1
 8004e42:	4649      	mov	r1, r9
 8004e44:	eb63 0b01 	sbc.w	fp, r3, r1
 8004e48:	f04f 0200 	mov.w	r2, #0
 8004e4c:	f04f 0300 	mov.w	r3, #0
 8004e50:	ea4f 138b 	mov.w	r3, fp, lsl #6
 8004e54:	ea43 639a 	orr.w	r3, r3, sl, lsr #26
 8004e58:	ea4f 128a 	mov.w	r2, sl, lsl #6
 8004e5c:	ebb2 040a 	subs.w	r4, r2, sl
 8004e60:	eb63 050b 	sbc.w	r5, r3, fp
 8004e64:	f04f 0200 	mov.w	r2, #0
 8004e68:	f04f 0300 	mov.w	r3, #0
 8004e6c:	00eb      	lsls	r3, r5, #3
 8004e6e:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8004e72:	00e2      	lsls	r2, r4, #3
 8004e74:	4614      	mov	r4, r2
 8004e76:	461d      	mov	r5, r3
 8004e78:	4643      	mov	r3, r8
 8004e7a:	18e3      	adds	r3, r4, r3
 8004e7c:	603b      	str	r3, [r7, #0]
 8004e7e:	464b      	mov	r3, r9
 8004e80:	eb45 0303 	adc.w	r3, r5, r3
 8004e84:	607b      	str	r3, [r7, #4]
 8004e86:	f04f 0200 	mov.w	r2, #0
 8004e8a:	f04f 0300 	mov.w	r3, #0
 8004e8e:	e9d7 4500 	ldrd	r4, r5, [r7]
 8004e92:	4629      	mov	r1, r5
 8004e94:	028b      	lsls	r3, r1, #10
 8004e96:	4621      	mov	r1, r4
 8004e98:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 8004e9c:	4621      	mov	r1, r4
 8004e9e:	028a      	lsls	r2, r1, #10
 8004ea0:	4610      	mov	r0, r2
 8004ea2:	4619      	mov	r1, r3
 8004ea4:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8004ea6:	2200      	movs	r2, #0
 8004ea8:	61bb      	str	r3, [r7, #24]
 8004eaa:	61fa      	str	r2, [r7, #28]
 8004eac:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8004eb0:	f7fb fb16 	bl	80004e0 <__aeabi_uldivmod>
 8004eb4:	4602      	mov	r2, r0
 8004eb6:	460b      	mov	r3, r1
 8004eb8:	4613      	mov	r3, r2
 8004eba:	64fb      	str	r3, [r7, #76]	; 0x4c
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 8004ebc:	4b0b      	ldr	r3, [pc, #44]	; (8004eec <HAL_RCC_GetSysClockFreq+0x200>)
 8004ebe:	685b      	ldr	r3, [r3, #4]
 8004ec0:	0c1b      	lsrs	r3, r3, #16
 8004ec2:	f003 0303 	and.w	r3, r3, #3
 8004ec6:	3301      	adds	r3, #1
 8004ec8:	005b      	lsls	r3, r3, #1
 8004eca:	643b      	str	r3, [r7, #64]	; 0x40

      sysclockfreq = pllvco/pllp;
 8004ecc:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 8004ece:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8004ed0:	fbb2 f3f3 	udiv	r3, r2, r3
 8004ed4:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 8004ed6:	e002      	b.n	8004ede <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 8004ed8:	4b05      	ldr	r3, [pc, #20]	; (8004ef0 <HAL_RCC_GetSysClockFreq+0x204>)
 8004eda:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 8004edc:	bf00      	nop
    }
  }
  return sysclockfreq;
 8004ede:	6cbb      	ldr	r3, [r7, #72]	; 0x48
}
 8004ee0:	4618      	mov	r0, r3
 8004ee2:	3750      	adds	r7, #80	; 0x50
 8004ee4:	46bd      	mov	sp, r7
 8004ee6:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8004eea:	bf00      	nop
 8004eec:	40023800 	.word	0x40023800
 8004ef0:	00f42400 	.word	0x00f42400
 8004ef4:	007a1200 	.word	0x007a1200

08004ef8 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8004ef8:	b480      	push	{r7}
 8004efa:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8004efc:	4b03      	ldr	r3, [pc, #12]	; (8004f0c <HAL_RCC_GetHCLKFreq+0x14>)
 8004efe:	681b      	ldr	r3, [r3, #0]
}
 8004f00:	4618      	mov	r0, r3
 8004f02:	46bd      	mov	sp, r7
 8004f04:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004f08:	4770      	bx	lr
 8004f0a:	bf00      	nop
 8004f0c:	20000000 	.word	0x20000000

08004f10 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8004f10:	b580      	push	{r7, lr}
 8004f12:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1)>> RCC_CFGR_PPRE1_Pos]);
 8004f14:	f7ff fff0 	bl	8004ef8 <HAL_RCC_GetHCLKFreq>
 8004f18:	4602      	mov	r2, r0
 8004f1a:	4b05      	ldr	r3, [pc, #20]	; (8004f30 <HAL_RCC_GetPCLK1Freq+0x20>)
 8004f1c:	689b      	ldr	r3, [r3, #8]
 8004f1e:	0a9b      	lsrs	r3, r3, #10
 8004f20:	f003 0307 	and.w	r3, r3, #7
 8004f24:	4903      	ldr	r1, [pc, #12]	; (8004f34 <HAL_RCC_GetPCLK1Freq+0x24>)
 8004f26:	5ccb      	ldrb	r3, [r1, r3]
 8004f28:	fa22 f303 	lsr.w	r3, r2, r3
}
 8004f2c:	4618      	mov	r0, r3
 8004f2e:	bd80      	pop	{r7, pc}
 8004f30:	40023800 	.word	0x40023800
 8004f34:	08009520 	.word	0x08009520

08004f38 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8004f38:	b580      	push	{r7, lr}
 8004f3a:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2)>> RCC_CFGR_PPRE2_Pos]);
 8004f3c:	f7ff ffdc 	bl	8004ef8 <HAL_RCC_GetHCLKFreq>
 8004f40:	4602      	mov	r2, r0
 8004f42:	4b05      	ldr	r3, [pc, #20]	; (8004f58 <HAL_RCC_GetPCLK2Freq+0x20>)
 8004f44:	689b      	ldr	r3, [r3, #8]
 8004f46:	0b5b      	lsrs	r3, r3, #13
 8004f48:	f003 0307 	and.w	r3, r3, #7
 8004f4c:	4903      	ldr	r1, [pc, #12]	; (8004f5c <HAL_RCC_GetPCLK2Freq+0x24>)
 8004f4e:	5ccb      	ldrb	r3, [r1, r3]
 8004f50:	fa22 f303 	lsr.w	r3, r2, r3
}
 8004f54:	4618      	mov	r0, r3
 8004f56:	bd80      	pop	{r7, pc}
 8004f58:	40023800 	.word	0x40023800
 8004f5c:	08009520 	.word	0x08009520

08004f60 <HAL_RCC_GetClockConfig>:
  * will be configured.
  * @param  pFLatency Pointer on the Flash Latency.
  * @retval None
  */
void HAL_RCC_GetClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t *pFLatency)
{
 8004f60:	b480      	push	{r7}
 8004f62:	b083      	sub	sp, #12
 8004f64:	af00      	add	r7, sp, #0
 8004f66:	6078      	str	r0, [r7, #4]
 8004f68:	6039      	str	r1, [r7, #0]
  /* Set all possible values for the Clock type parameter --------------------*/
  RCC_ClkInitStruct->ClockType = RCC_CLOCKTYPE_SYSCLK | RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_PCLK1 | RCC_CLOCKTYPE_PCLK2;
 8004f6a:	687b      	ldr	r3, [r7, #4]
 8004f6c:	220f      	movs	r2, #15
 8004f6e:	601a      	str	r2, [r3, #0]

  /* Get the SYSCLK configuration --------------------------------------------*/
  RCC_ClkInitStruct->SYSCLKSource = (uint32_t)(RCC->CFGR & RCC_CFGR_SW);
 8004f70:	4b12      	ldr	r3, [pc, #72]	; (8004fbc <HAL_RCC_GetClockConfig+0x5c>)
 8004f72:	689b      	ldr	r3, [r3, #8]
 8004f74:	f003 0203 	and.w	r2, r3, #3
 8004f78:	687b      	ldr	r3, [r7, #4]
 8004f7a:	605a      	str	r2, [r3, #4]

  /* Get the HCLK configuration ----------------------------------------------*/
  RCC_ClkInitStruct->AHBCLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_HPRE);
 8004f7c:	4b0f      	ldr	r3, [pc, #60]	; (8004fbc <HAL_RCC_GetClockConfig+0x5c>)
 8004f7e:	689b      	ldr	r3, [r3, #8]
 8004f80:	f003 02f0 	and.w	r2, r3, #240	; 0xf0
 8004f84:	687b      	ldr	r3, [r7, #4]
 8004f86:	609a      	str	r2, [r3, #8]

  /* Get the APB1 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB1CLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_PPRE1);
 8004f88:	4b0c      	ldr	r3, [pc, #48]	; (8004fbc <HAL_RCC_GetClockConfig+0x5c>)
 8004f8a:	689b      	ldr	r3, [r3, #8]
 8004f8c:	f403 52e0 	and.w	r2, r3, #7168	; 0x1c00
 8004f90:	687b      	ldr	r3, [r7, #4]
 8004f92:	60da      	str	r2, [r3, #12]

  /* Get the APB2 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB2CLKDivider = (uint32_t)((RCC->CFGR & RCC_CFGR_PPRE2) >> 3U);
 8004f94:	4b09      	ldr	r3, [pc, #36]	; (8004fbc <HAL_RCC_GetClockConfig+0x5c>)
 8004f96:	689b      	ldr	r3, [r3, #8]
 8004f98:	08db      	lsrs	r3, r3, #3
 8004f9a:	f403 52e0 	and.w	r2, r3, #7168	; 0x1c00
 8004f9e:	687b      	ldr	r3, [r7, #4]
 8004fa0:	611a      	str	r2, [r3, #16]

  /* Get the Flash Wait State (Latency) configuration ------------------------*/
  *pFLatency = (uint32_t)(FLASH->ACR & FLASH_ACR_LATENCY);
 8004fa2:	4b07      	ldr	r3, [pc, #28]	; (8004fc0 <HAL_RCC_GetClockConfig+0x60>)
 8004fa4:	681b      	ldr	r3, [r3, #0]
 8004fa6:	f003 020f 	and.w	r2, r3, #15
 8004faa:	683b      	ldr	r3, [r7, #0]
 8004fac:	601a      	str	r2, [r3, #0]
}
 8004fae:	bf00      	nop
 8004fb0:	370c      	adds	r7, #12
 8004fb2:	46bd      	mov	sp, r7
 8004fb4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004fb8:	4770      	bx	lr
 8004fba:	bf00      	nop
 8004fbc:	40023800 	.word	0x40023800
 8004fc0:	40023c00 	.word	0x40023c00

08004fc4 <HAL_RCCEx_PeriphCLKConfig>:
  *         the backup registers) and RCC_BDCR register are set to their reset values.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8004fc4:	b580      	push	{r7, lr}
 8004fc6:	b086      	sub	sp, #24
 8004fc8:	af00      	add	r7, sp, #0
 8004fca:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 8004fcc:	2300      	movs	r3, #0
 8004fce:	617b      	str	r3, [r7, #20]
  uint32_t tmpreg1 = 0U;
 8004fd0:	2300      	movs	r3, #0
 8004fd2:	613b      	str	r3, [r7, #16]

  /*----------------------- SAI/I2S Configuration (PLLI2S) -------------------*/
  /*----------------------- Common configuration SAI/I2S ---------------------*/
  /* In Case of SAI or I2S Clock Configuration through PLLI2S, PLLI2SN division
     factor is common parameters for both peripherals */
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == RCC_PERIPHCLK_I2S) ||
 8004fd4:	687b      	ldr	r3, [r7, #4]
 8004fd6:	681b      	ldr	r3, [r3, #0]
 8004fd8:	f003 0301 	and.w	r3, r3, #1
 8004fdc:	2b00      	cmp	r3, #0
 8004fde:	d10b      	bne.n	8004ff8 <HAL_RCCEx_PeriphCLKConfig+0x34>
     (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI_PLLI2S) == RCC_PERIPHCLK_SAI_PLLI2S) ||
 8004fe0:	687b      	ldr	r3, [r7, #4]
 8004fe2:	681b      	ldr	r3, [r3, #0]
 8004fe4:	f003 0302 	and.w	r3, r3, #2
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == RCC_PERIPHCLK_I2S) ||
 8004fe8:	2b00      	cmp	r3, #0
 8004fea:	d105      	bne.n	8004ff8 <HAL_RCCEx_PeriphCLKConfig+0x34>
     (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLLI2S) == RCC_PERIPHCLK_PLLI2S))
 8004fec:	687b      	ldr	r3, [r7, #4]
 8004fee:	681b      	ldr	r3, [r3, #0]
 8004ff0:	f003 0340 	and.w	r3, r3, #64	; 0x40
     (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI_PLLI2S) == RCC_PERIPHCLK_SAI_PLLI2S) ||
 8004ff4:	2b00      	cmp	r3, #0
 8004ff6:	d075      	beq.n	80050e4 <HAL_RCCEx_PeriphCLKConfig+0x120>
  {
    /* check for Parameters */
    assert_param(IS_RCC_PLLI2SN_VALUE(PeriphClkInit->PLLI2S.PLLI2SN));

    /* Disable the PLLI2S */
    __HAL_RCC_PLLI2S_DISABLE();
 8004ff8:	4b91      	ldr	r3, [pc, #580]	; (8005240 <HAL_RCCEx_PeriphCLKConfig+0x27c>)
 8004ffa:	2200      	movs	r2, #0
 8004ffc:	601a      	str	r2, [r3, #0]
    /* Get tick */
    tickstart = HAL_GetTick();
 8004ffe:	f7fc ff5f 	bl	8001ec0 <HAL_GetTick>
 8005002:	6178      	str	r0, [r7, #20]
    /* Wait till PLLI2S is disabled */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  != RESET)
 8005004:	e008      	b.n	8005018 <HAL_RCCEx_PeriphCLKConfig+0x54>
    {
      if((HAL_GetTick() - tickstart ) > PLLI2S_TIMEOUT_VALUE)
 8005006:	f7fc ff5b 	bl	8001ec0 <HAL_GetTick>
 800500a:	4602      	mov	r2, r0
 800500c:	697b      	ldr	r3, [r7, #20]
 800500e:	1ad3      	subs	r3, r2, r3
 8005010:	2b02      	cmp	r3, #2
 8005012:	d901      	bls.n	8005018 <HAL_RCCEx_PeriphCLKConfig+0x54>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 8005014:	2303      	movs	r3, #3
 8005016:	e189      	b.n	800532c <HAL_RCCEx_PeriphCLKConfig+0x368>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  != RESET)
 8005018:	4b8a      	ldr	r3, [pc, #552]	; (8005244 <HAL_RCCEx_PeriphCLKConfig+0x280>)
 800501a:	681b      	ldr	r3, [r3, #0]
 800501c:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8005020:	2b00      	cmp	r3, #0
 8005022:	d1f0      	bne.n	8005006 <HAL_RCCEx_PeriphCLKConfig+0x42>
    }

    /*---------------------------- I2S configuration -------------------------*/
    /* In Case of I2S Clock Configuration through PLLI2S, PLLI2SR must be added
      only for I2S configuration */
    if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == (RCC_PERIPHCLK_I2S))
 8005024:	687b      	ldr	r3, [r7, #4]
 8005026:	681b      	ldr	r3, [r3, #0]
 8005028:	f003 0301 	and.w	r3, r3, #1
 800502c:	2b00      	cmp	r3, #0
 800502e:	d009      	beq.n	8005044 <HAL_RCCEx_PeriphCLKConfig+0x80>
      /* check for Parameters */
      assert_param(IS_RCC_PLLI2SR_VALUE(PeriphClkInit->PLLI2S.PLLI2SR));
      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO = f(VCO clock) = f(PLLI2S clock input) * (PLLI2SN/PLLM) */
      /* I2SCLK = f(PLLI2S clock output) = f(VCO clock) / PLLI2SR */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN , PeriphClkInit->PLLI2S.PLLI2SR);
 8005030:	687b      	ldr	r3, [r7, #4]
 8005032:	685b      	ldr	r3, [r3, #4]
 8005034:	019a      	lsls	r2, r3, #6
 8005036:	687b      	ldr	r3, [r7, #4]
 8005038:	689b      	ldr	r3, [r3, #8]
 800503a:	071b      	lsls	r3, r3, #28
 800503c:	4981      	ldr	r1, [pc, #516]	; (8005244 <HAL_RCCEx_PeriphCLKConfig+0x280>)
 800503e:	4313      	orrs	r3, r2
 8005040:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84
    }

    /*---------------------------- SAI configuration -------------------------*/
    /* In Case of SAI Clock Configuration through PLLI2S, PLLI2SQ and PLLI2S_DIVQ must
       be added only for SAI configuration */
    if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI_PLLI2S) == (RCC_PERIPHCLK_SAI_PLLI2S))
 8005044:	687b      	ldr	r3, [r7, #4]
 8005046:	681b      	ldr	r3, [r3, #0]
 8005048:	f003 0302 	and.w	r3, r3, #2
 800504c:	2b00      	cmp	r3, #0
 800504e:	d01f      	beq.n	8005090 <HAL_RCCEx_PeriphCLKConfig+0xcc>
      /* Check the PLLI2S division factors */
      assert_param(IS_RCC_PLLI2SQ_VALUE(PeriphClkInit->PLLI2S.PLLI2SQ));
      assert_param(IS_RCC_PLLI2S_DIVQ_VALUE(PeriphClkInit->PLLI2SDivQ));

      /* Read PLLI2SR value from PLLI2SCFGR register (this value is not need for SAI configuration) */
      tmpreg1 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SR) >> RCC_PLLI2SCFGR_PLLI2SR_Pos);
 8005050:	4b7c      	ldr	r3, [pc, #496]	; (8005244 <HAL_RCCEx_PeriphCLKConfig+0x280>)
 8005052:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8005056:	0f1b      	lsrs	r3, r3, #28
 8005058:	f003 0307 	and.w	r3, r3, #7
 800505c:	613b      	str	r3, [r7, #16]
      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO Input  = PLL_SOURCE/PLLM */
      /* PLLI2S_VCO Output = PLLI2S_VCO Input * PLLI2SN */
      /* SAI_CLK(first level) = PLLI2S_VCO Output/PLLI2SQ */
      __HAL_RCC_PLLI2S_SAICLK_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN , PeriphClkInit->PLLI2S.PLLI2SQ , tmpreg1);
 800505e:	687b      	ldr	r3, [r7, #4]
 8005060:	685b      	ldr	r3, [r3, #4]
 8005062:	019a      	lsls	r2, r3, #6
 8005064:	687b      	ldr	r3, [r7, #4]
 8005066:	68db      	ldr	r3, [r3, #12]
 8005068:	061b      	lsls	r3, r3, #24
 800506a:	431a      	orrs	r2, r3
 800506c:	693b      	ldr	r3, [r7, #16]
 800506e:	071b      	lsls	r3, r3, #28
 8005070:	4974      	ldr	r1, [pc, #464]	; (8005244 <HAL_RCCEx_PeriphCLKConfig+0x280>)
 8005072:	4313      	orrs	r3, r2
 8005074:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84
      /* SAI_CLK_x = SAI_CLK(first level)/PLLI2SDIVQ */
      __HAL_RCC_PLLI2S_PLLSAICLKDIVQ_CONFIG(PeriphClkInit->PLLI2SDivQ);
 8005078:	4b72      	ldr	r3, [pc, #456]	; (8005244 <HAL_RCCEx_PeriphCLKConfig+0x280>)
 800507a:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800507e:	f023 021f 	bic.w	r2, r3, #31
 8005082:	687b      	ldr	r3, [r7, #4]
 8005084:	69db      	ldr	r3, [r3, #28]
 8005086:	3b01      	subs	r3, #1
 8005088:	496e      	ldr	r1, [pc, #440]	; (8005244 <HAL_RCCEx_PeriphCLKConfig+0x280>)
 800508a:	4313      	orrs	r3, r2
 800508c:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
    }

    /*----------------- In Case of PLLI2S is just selected  -----------------*/
    if((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_PLLI2S) == RCC_PERIPHCLK_PLLI2S)
 8005090:	687b      	ldr	r3, [r7, #4]
 8005092:	681b      	ldr	r3, [r3, #0]
 8005094:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005098:	2b00      	cmp	r3, #0
 800509a:	d00d      	beq.n	80050b8 <HAL_RCCEx_PeriphCLKConfig+0xf4>
      /* Check for Parameters */
      assert_param(IS_RCC_PLLI2SQ_VALUE(PeriphClkInit->PLLI2S.PLLI2SQ));
      assert_param(IS_RCC_PLLI2SR_VALUE(PeriphClkInit->PLLI2S.PLLI2SR));

      /* Configure the PLLI2S multiplication and division factors */
      __HAL_RCC_PLLI2S_SAICLK_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN, PeriphClkInit->PLLI2S.PLLI2SQ, PeriphClkInit->PLLI2S.PLLI2SR);
 800509c:	687b      	ldr	r3, [r7, #4]
 800509e:	685b      	ldr	r3, [r3, #4]
 80050a0:	019a      	lsls	r2, r3, #6
 80050a2:	687b      	ldr	r3, [r7, #4]
 80050a4:	68db      	ldr	r3, [r3, #12]
 80050a6:	061b      	lsls	r3, r3, #24
 80050a8:	431a      	orrs	r2, r3
 80050aa:	687b      	ldr	r3, [r7, #4]
 80050ac:	689b      	ldr	r3, [r3, #8]
 80050ae:	071b      	lsls	r3, r3, #28
 80050b0:	4964      	ldr	r1, [pc, #400]	; (8005244 <HAL_RCCEx_PeriphCLKConfig+0x280>)
 80050b2:	4313      	orrs	r3, r2
 80050b4:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84
    }

    /* Enable the PLLI2S */
    __HAL_RCC_PLLI2S_ENABLE();
 80050b8:	4b61      	ldr	r3, [pc, #388]	; (8005240 <HAL_RCCEx_PeriphCLKConfig+0x27c>)
 80050ba:	2201      	movs	r2, #1
 80050bc:	601a      	str	r2, [r3, #0]
    /* Get tick */
    tickstart = HAL_GetTick();
 80050be:	f7fc feff 	bl	8001ec0 <HAL_GetTick>
 80050c2:	6178      	str	r0, [r7, #20]
    /* Wait till PLLI2S is ready */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
 80050c4:	e008      	b.n	80050d8 <HAL_RCCEx_PeriphCLKConfig+0x114>
    {
      if((HAL_GetTick() - tickstart ) > PLLI2S_TIMEOUT_VALUE)
 80050c6:	f7fc fefb 	bl	8001ec0 <HAL_GetTick>
 80050ca:	4602      	mov	r2, r0
 80050cc:	697b      	ldr	r3, [r7, #20]
 80050ce:	1ad3      	subs	r3, r2, r3
 80050d0:	2b02      	cmp	r3, #2
 80050d2:	d901      	bls.n	80050d8 <HAL_RCCEx_PeriphCLKConfig+0x114>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 80050d4:	2303      	movs	r3, #3
 80050d6:	e129      	b.n	800532c <HAL_RCCEx_PeriphCLKConfig+0x368>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
 80050d8:	4b5a      	ldr	r3, [pc, #360]	; (8005244 <HAL_RCCEx_PeriphCLKConfig+0x280>)
 80050da:	681b      	ldr	r3, [r3, #0]
 80050dc:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 80050e0:	2b00      	cmp	r3, #0
 80050e2:	d0f0      	beq.n	80050c6 <HAL_RCCEx_PeriphCLKConfig+0x102>

  /*----------------------- SAI/LTDC Configuration (PLLSAI) ------------------*/
  /*----------------------- Common configuration SAI/LTDC --------------------*/
  /* In Case of SAI or LTDC Clock Configuration through PLLSAI, PLLSAIN division
     factor is common parameters for both peripherals */
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI_PLLSAI) == RCC_PERIPHCLK_SAI_PLLSAI) ||
 80050e4:	687b      	ldr	r3, [r7, #4]
 80050e6:	681b      	ldr	r3, [r3, #0]
 80050e8:	f003 0304 	and.w	r3, r3, #4
 80050ec:	2b00      	cmp	r3, #0
 80050ee:	d105      	bne.n	80050fc <HAL_RCCEx_PeriphCLKConfig+0x138>
     (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LTDC) == RCC_PERIPHCLK_LTDC))
 80050f0:	687b      	ldr	r3, [r7, #4]
 80050f2:	681b      	ldr	r3, [r3, #0]
 80050f4:	f003 0308 	and.w	r3, r3, #8
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI_PLLSAI) == RCC_PERIPHCLK_SAI_PLLSAI) ||
 80050f8:	2b00      	cmp	r3, #0
 80050fa:	d079      	beq.n	80051f0 <HAL_RCCEx_PeriphCLKConfig+0x22c>
  {
    /* Check the PLLSAI division factors */
    assert_param(IS_RCC_PLLSAIN_VALUE(PeriphClkInit->PLLSAI.PLLSAIN));

    /* Disable PLLSAI Clock */
    __HAL_RCC_PLLSAI_DISABLE();
 80050fc:	4b52      	ldr	r3, [pc, #328]	; (8005248 <HAL_RCCEx_PeriphCLKConfig+0x284>)
 80050fe:	2200      	movs	r2, #0
 8005100:	601a      	str	r2, [r3, #0]
    /* Get tick */
    tickstart = HAL_GetTick();
 8005102:	f7fc fedd 	bl	8001ec0 <HAL_GetTick>
 8005106:	6178      	str	r0, [r7, #20]
    /* Wait till PLLSAI is disabled */
    while(__HAL_RCC_PLLSAI_GET_FLAG() != RESET)
 8005108:	e008      	b.n	800511c <HAL_RCCEx_PeriphCLKConfig+0x158>
    {
      if((HAL_GetTick() - tickstart ) > PLLSAI_TIMEOUT_VALUE)
 800510a:	f7fc fed9 	bl	8001ec0 <HAL_GetTick>
 800510e:	4602      	mov	r2, r0
 8005110:	697b      	ldr	r3, [r7, #20]
 8005112:	1ad3      	subs	r3, r2, r3
 8005114:	2b02      	cmp	r3, #2
 8005116:	d901      	bls.n	800511c <HAL_RCCEx_PeriphCLKConfig+0x158>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 8005118:	2303      	movs	r3, #3
 800511a:	e107      	b.n	800532c <HAL_RCCEx_PeriphCLKConfig+0x368>
    while(__HAL_RCC_PLLSAI_GET_FLAG() != RESET)
 800511c:	4b49      	ldr	r3, [pc, #292]	; (8005244 <HAL_RCCEx_PeriphCLKConfig+0x280>)
 800511e:	681b      	ldr	r3, [r3, #0]
 8005120:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8005124:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8005128:	d0ef      	beq.n	800510a <HAL_RCCEx_PeriphCLKConfig+0x146>
    }

    /*---------------------------- SAI configuration -------------------------*/
    /* In Case of SAI Clock Configuration through PLLSAI, PLLSAIQ and PLLSAI_DIVQ must
       be added only for SAI configuration */
    if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI_PLLSAI) == (RCC_PERIPHCLK_SAI_PLLSAI))
 800512a:	687b      	ldr	r3, [r7, #4]
 800512c:	681b      	ldr	r3, [r3, #0]
 800512e:	f003 0304 	and.w	r3, r3, #4
 8005132:	2b00      	cmp	r3, #0
 8005134:	d020      	beq.n	8005178 <HAL_RCCEx_PeriphCLKConfig+0x1b4>
    {
      assert_param(IS_RCC_PLLSAIQ_VALUE(PeriphClkInit->PLLSAI.PLLSAIQ));
      assert_param(IS_RCC_PLLSAI_DIVQ_VALUE(PeriphClkInit->PLLSAIDivQ));

      /* Read PLLSAIR value from PLLSAICFGR register (this value is not need for SAI configuration) */
      tmpreg1 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIR) >> RCC_PLLSAICFGR_PLLSAIR_Pos);
 8005136:	4b43      	ldr	r3, [pc, #268]	; (8005244 <HAL_RCCEx_PeriphCLKConfig+0x280>)
 8005138:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800513c:	0f1b      	lsrs	r3, r3, #28
 800513e:	f003 0307 	and.w	r3, r3, #7
 8005142:	613b      	str	r3, [r7, #16]
      /* PLLSAI_VCO Input  = PLL_SOURCE/PLLM */
      /* PLLSAI_VCO Output = PLLSAI_VCO Input * PLLSAIN */
      /* SAI_CLK(first level) = PLLSAI_VCO Output/PLLSAIQ */
      __HAL_RCC_PLLSAI_CONFIG(PeriphClkInit->PLLSAI.PLLSAIN , PeriphClkInit->PLLSAI.PLLSAIQ, tmpreg1);
 8005144:	687b      	ldr	r3, [r7, #4]
 8005146:	691b      	ldr	r3, [r3, #16]
 8005148:	019a      	lsls	r2, r3, #6
 800514a:	687b      	ldr	r3, [r7, #4]
 800514c:	695b      	ldr	r3, [r3, #20]
 800514e:	061b      	lsls	r3, r3, #24
 8005150:	431a      	orrs	r2, r3
 8005152:	693b      	ldr	r3, [r7, #16]
 8005154:	071b      	lsls	r3, r3, #28
 8005156:	493b      	ldr	r1, [pc, #236]	; (8005244 <HAL_RCCEx_PeriphCLKConfig+0x280>)
 8005158:	4313      	orrs	r3, r2
 800515a:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
      /* SAI_CLK_x = SAI_CLK(first level)/PLLSAIDIVQ */
      __HAL_RCC_PLLSAI_PLLSAICLKDIVQ_CONFIG(PeriphClkInit->PLLSAIDivQ);
 800515e:	4b39      	ldr	r3, [pc, #228]	; (8005244 <HAL_RCCEx_PeriphCLKConfig+0x280>)
 8005160:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8005164:	f423 52f8 	bic.w	r2, r3, #7936	; 0x1f00
 8005168:	687b      	ldr	r3, [r7, #4]
 800516a:	6a1b      	ldr	r3, [r3, #32]
 800516c:	3b01      	subs	r3, #1
 800516e:	021b      	lsls	r3, r3, #8
 8005170:	4934      	ldr	r1, [pc, #208]	; (8005244 <HAL_RCCEx_PeriphCLKConfig+0x280>)
 8005172:	4313      	orrs	r3, r2
 8005174:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
    }

    /*---------------------------- LTDC configuration ------------------------*/
    if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LTDC) == (RCC_PERIPHCLK_LTDC))
 8005178:	687b      	ldr	r3, [r7, #4]
 800517a:	681b      	ldr	r3, [r3, #0]
 800517c:	f003 0308 	and.w	r3, r3, #8
 8005180:	2b00      	cmp	r3, #0
 8005182:	d01e      	beq.n	80051c2 <HAL_RCCEx_PeriphCLKConfig+0x1fe>
    {
      assert_param(IS_RCC_PLLSAIR_VALUE(PeriphClkInit->PLLSAI.PLLSAIR));
      assert_param(IS_RCC_PLLSAI_DIVR_VALUE(PeriphClkInit->PLLSAIDivR));

      /* Read PLLSAIR value from PLLSAICFGR register (this value is not need for SAI configuration) */
      tmpreg1 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIQ) >> RCC_PLLSAICFGR_PLLSAIQ_Pos);
 8005184:	4b2f      	ldr	r3, [pc, #188]	; (8005244 <HAL_RCCEx_PeriphCLKConfig+0x280>)
 8005186:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800518a:	0e1b      	lsrs	r3, r3, #24
 800518c:	f003 030f 	and.w	r3, r3, #15
 8005190:	613b      	str	r3, [r7, #16]
      /* PLLSAI_VCO Input  = PLL_SOURCE/PLLM */
      /* PLLSAI_VCO Output = PLLSAI_VCO Input * PLLSAIN */
      /* LTDC_CLK(first level) = PLLSAI_VCO Output/PLLSAIR */
      __HAL_RCC_PLLSAI_CONFIG(PeriphClkInit->PLLSAI.PLLSAIN , tmpreg1, PeriphClkInit->PLLSAI.PLLSAIR);
 8005192:	687b      	ldr	r3, [r7, #4]
 8005194:	691b      	ldr	r3, [r3, #16]
 8005196:	019a      	lsls	r2, r3, #6
 8005198:	693b      	ldr	r3, [r7, #16]
 800519a:	061b      	lsls	r3, r3, #24
 800519c:	431a      	orrs	r2, r3
 800519e:	687b      	ldr	r3, [r7, #4]
 80051a0:	699b      	ldr	r3, [r3, #24]
 80051a2:	071b      	lsls	r3, r3, #28
 80051a4:	4927      	ldr	r1, [pc, #156]	; (8005244 <HAL_RCCEx_PeriphCLKConfig+0x280>)
 80051a6:	4313      	orrs	r3, r2
 80051a8:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
      /* LTDC_CLK = LTDC_CLK(first level)/PLLSAIDIVR */
      __HAL_RCC_PLLSAI_PLLSAICLKDIVR_CONFIG(PeriphClkInit->PLLSAIDivR);
 80051ac:	4b25      	ldr	r3, [pc, #148]	; (8005244 <HAL_RCCEx_PeriphCLKConfig+0x280>)
 80051ae:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 80051b2:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 80051b6:	687b      	ldr	r3, [r7, #4]
 80051b8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80051ba:	4922      	ldr	r1, [pc, #136]	; (8005244 <HAL_RCCEx_PeriphCLKConfig+0x280>)
 80051bc:	4313      	orrs	r3, r2
 80051be:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
    }
    /* Enable PLLSAI Clock */
    __HAL_RCC_PLLSAI_ENABLE();
 80051c2:	4b21      	ldr	r3, [pc, #132]	; (8005248 <HAL_RCCEx_PeriphCLKConfig+0x284>)
 80051c4:	2201      	movs	r2, #1
 80051c6:	601a      	str	r2, [r3, #0]
    /* Get tick */
    tickstart = HAL_GetTick();
 80051c8:	f7fc fe7a 	bl	8001ec0 <HAL_GetTick>
 80051cc:	6178      	str	r0, [r7, #20]
    /* Wait till PLLSAI is ready */
    while(__HAL_RCC_PLLSAI_GET_FLAG() == RESET)
 80051ce:	e008      	b.n	80051e2 <HAL_RCCEx_PeriphCLKConfig+0x21e>
    {
      if((HAL_GetTick() - tickstart ) > PLLSAI_TIMEOUT_VALUE)
 80051d0:	f7fc fe76 	bl	8001ec0 <HAL_GetTick>
 80051d4:	4602      	mov	r2, r0
 80051d6:	697b      	ldr	r3, [r7, #20]
 80051d8:	1ad3      	subs	r3, r2, r3
 80051da:	2b02      	cmp	r3, #2
 80051dc:	d901      	bls.n	80051e2 <HAL_RCCEx_PeriphCLKConfig+0x21e>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 80051de:	2303      	movs	r3, #3
 80051e0:	e0a4      	b.n	800532c <HAL_RCCEx_PeriphCLKConfig+0x368>
    while(__HAL_RCC_PLLSAI_GET_FLAG() == RESET)
 80051e2:	4b18      	ldr	r3, [pc, #96]	; (8005244 <HAL_RCCEx_PeriphCLKConfig+0x280>)
 80051e4:	681b      	ldr	r3, [r3, #0]
 80051e6:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 80051ea:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 80051ee:	d1ef      	bne.n	80051d0 <HAL_RCCEx_PeriphCLKConfig+0x20c>
    }
  }
  /*--------------------------------------------------------------------------*/

  /*---------------------------- RTC configuration ---------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == (RCC_PERIPHCLK_RTC))
 80051f0:	687b      	ldr	r3, [r7, #4]
 80051f2:	681b      	ldr	r3, [r3, #0]
 80051f4:	f003 0320 	and.w	r3, r3, #32
 80051f8:	2b00      	cmp	r3, #0
 80051fa:	f000 808b 	beq.w	8005314 <HAL_RCCEx_PeriphCLKConfig+0x350>
  {
    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock*/
    __HAL_RCC_PWR_CLK_ENABLE();
 80051fe:	2300      	movs	r3, #0
 8005200:	60fb      	str	r3, [r7, #12]
 8005202:	4b10      	ldr	r3, [pc, #64]	; (8005244 <HAL_RCCEx_PeriphCLKConfig+0x280>)
 8005204:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005206:	4a0f      	ldr	r2, [pc, #60]	; (8005244 <HAL_RCCEx_PeriphCLKConfig+0x280>)
 8005208:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800520c:	6413      	str	r3, [r2, #64]	; 0x40
 800520e:	4b0d      	ldr	r3, [pc, #52]	; (8005244 <HAL_RCCEx_PeriphCLKConfig+0x280>)
 8005210:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005212:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8005216:	60fb      	str	r3, [r7, #12]
 8005218:	68fb      	ldr	r3, [r7, #12]

    /* Enable write access to Backup domain */
    PWR->CR |= PWR_CR_DBP;
 800521a:	4b0c      	ldr	r3, [pc, #48]	; (800524c <HAL_RCCEx_PeriphCLKConfig+0x288>)
 800521c:	681b      	ldr	r3, [r3, #0]
 800521e:	4a0b      	ldr	r2, [pc, #44]	; (800524c <HAL_RCCEx_PeriphCLKConfig+0x288>)
 8005220:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8005224:	6013      	str	r3, [r2, #0]

    /* Get tick */
    tickstart = HAL_GetTick();
 8005226:	f7fc fe4b 	bl	8001ec0 <HAL_GetTick>
 800522a:	6178      	str	r0, [r7, #20]

    while((PWR->CR & PWR_CR_DBP) == RESET)
 800522c:	e010      	b.n	8005250 <HAL_RCCEx_PeriphCLKConfig+0x28c>
    {
      if((HAL_GetTick() - tickstart ) > RCC_DBP_TIMEOUT_VALUE)
 800522e:	f7fc fe47 	bl	8001ec0 <HAL_GetTick>
 8005232:	4602      	mov	r2, r0
 8005234:	697b      	ldr	r3, [r7, #20]
 8005236:	1ad3      	subs	r3, r2, r3
 8005238:	2b02      	cmp	r3, #2
 800523a:	d909      	bls.n	8005250 <HAL_RCCEx_PeriphCLKConfig+0x28c>
      {
        return HAL_TIMEOUT;
 800523c:	2303      	movs	r3, #3
 800523e:	e075      	b.n	800532c <HAL_RCCEx_PeriphCLKConfig+0x368>
 8005240:	42470068 	.word	0x42470068
 8005244:	40023800 	.word	0x40023800
 8005248:	42470070 	.word	0x42470070
 800524c:	40007000 	.word	0x40007000
    while((PWR->CR & PWR_CR_DBP) == RESET)
 8005250:	4b38      	ldr	r3, [pc, #224]	; (8005334 <HAL_RCCEx_PeriphCLKConfig+0x370>)
 8005252:	681b      	ldr	r3, [r3, #0]
 8005254:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8005258:	2b00      	cmp	r3, #0
 800525a:	d0e8      	beq.n	800522e <HAL_RCCEx_PeriphCLKConfig+0x26a>
      }
    }
    /* Reset the Backup domain only if the RTC Clock source selection is modified from reset value */
    tmpreg1 = (RCC->BDCR & RCC_BDCR_RTCSEL);
 800525c:	4b36      	ldr	r3, [pc, #216]	; (8005338 <HAL_RCCEx_PeriphCLKConfig+0x374>)
 800525e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8005260:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8005264:	613b      	str	r3, [r7, #16]
    if((tmpreg1 != 0x00000000U) && ((tmpreg1) != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 8005266:	693b      	ldr	r3, [r7, #16]
 8005268:	2b00      	cmp	r3, #0
 800526a:	d02f      	beq.n	80052cc <HAL_RCCEx_PeriphCLKConfig+0x308>
 800526c:	687b      	ldr	r3, [r7, #4]
 800526e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005270:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8005274:	693a      	ldr	r2, [r7, #16]
 8005276:	429a      	cmp	r2, r3
 8005278:	d028      	beq.n	80052cc <HAL_RCCEx_PeriphCLKConfig+0x308>
    {
      /* Store the content of BDCR register before the reset of Backup Domain */
      tmpreg1 = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 800527a:	4b2f      	ldr	r3, [pc, #188]	; (8005338 <HAL_RCCEx_PeriphCLKConfig+0x374>)
 800527c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800527e:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8005282:	613b      	str	r3, [r7, #16]
      /* RTC Clock selection can be changed only if the Backup Domain is reset */
      __HAL_RCC_BACKUPRESET_FORCE();
 8005284:	4b2d      	ldr	r3, [pc, #180]	; (800533c <HAL_RCCEx_PeriphCLKConfig+0x378>)
 8005286:	2201      	movs	r2, #1
 8005288:	601a      	str	r2, [r3, #0]
      __HAL_RCC_BACKUPRESET_RELEASE();
 800528a:	4b2c      	ldr	r3, [pc, #176]	; (800533c <HAL_RCCEx_PeriphCLKConfig+0x378>)
 800528c:	2200      	movs	r2, #0
 800528e:	601a      	str	r2, [r3, #0]
      /* Restore the Content of BDCR register */
      RCC->BDCR = tmpreg1;
 8005290:	4a29      	ldr	r2, [pc, #164]	; (8005338 <HAL_RCCEx_PeriphCLKConfig+0x374>)
 8005292:	693b      	ldr	r3, [r7, #16]
 8005294:	6713      	str	r3, [r2, #112]	; 0x70

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if(HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSEON))
 8005296:	4b28      	ldr	r3, [pc, #160]	; (8005338 <HAL_RCCEx_PeriphCLKConfig+0x374>)
 8005298:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800529a:	f003 0301 	and.w	r3, r3, #1
 800529e:	2b01      	cmp	r3, #1
 80052a0:	d114      	bne.n	80052cc <HAL_RCCEx_PeriphCLKConfig+0x308>
      {
        /* Get tick */
        tickstart = HAL_GetTick();
 80052a2:	f7fc fe0d 	bl	8001ec0 <HAL_GetTick>
 80052a6:	6178      	str	r0, [r7, #20]

        /* Wait till LSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80052a8:	e00a      	b.n	80052c0 <HAL_RCCEx_PeriphCLKConfig+0x2fc>
        {
          if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 80052aa:	f7fc fe09 	bl	8001ec0 <HAL_GetTick>
 80052ae:	4602      	mov	r2, r0
 80052b0:	697b      	ldr	r3, [r7, #20]
 80052b2:	1ad3      	subs	r3, r2, r3
 80052b4:	f241 3288 	movw	r2, #5000	; 0x1388
 80052b8:	4293      	cmp	r3, r2
 80052ba:	d901      	bls.n	80052c0 <HAL_RCCEx_PeriphCLKConfig+0x2fc>
          {
            return HAL_TIMEOUT;
 80052bc:	2303      	movs	r3, #3
 80052be:	e035      	b.n	800532c <HAL_RCCEx_PeriphCLKConfig+0x368>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80052c0:	4b1d      	ldr	r3, [pc, #116]	; (8005338 <HAL_RCCEx_PeriphCLKConfig+0x374>)
 80052c2:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80052c4:	f003 0302 	and.w	r3, r3, #2
 80052c8:	2b00      	cmp	r3, #0
 80052ca:	d0ee      	beq.n	80052aa <HAL_RCCEx_PeriphCLKConfig+0x2e6>
          }
        }
      }
    }
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 80052cc:	687b      	ldr	r3, [r7, #4]
 80052ce:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80052d0:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80052d4:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 80052d8:	d10d      	bne.n	80052f6 <HAL_RCCEx_PeriphCLKConfig+0x332>
 80052da:	4b17      	ldr	r3, [pc, #92]	; (8005338 <HAL_RCCEx_PeriphCLKConfig+0x374>)
 80052dc:	689b      	ldr	r3, [r3, #8]
 80052de:	f423 12f8 	bic.w	r2, r3, #2031616	; 0x1f0000
 80052e2:	687b      	ldr	r3, [r7, #4]
 80052e4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80052e6:	f023 4370 	bic.w	r3, r3, #4026531840	; 0xf0000000
 80052ea:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80052ee:	4912      	ldr	r1, [pc, #72]	; (8005338 <HAL_RCCEx_PeriphCLKConfig+0x374>)
 80052f0:	4313      	orrs	r3, r2
 80052f2:	608b      	str	r3, [r1, #8]
 80052f4:	e005      	b.n	8005302 <HAL_RCCEx_PeriphCLKConfig+0x33e>
 80052f6:	4b10      	ldr	r3, [pc, #64]	; (8005338 <HAL_RCCEx_PeriphCLKConfig+0x374>)
 80052f8:	689b      	ldr	r3, [r3, #8]
 80052fa:	4a0f      	ldr	r2, [pc, #60]	; (8005338 <HAL_RCCEx_PeriphCLKConfig+0x374>)
 80052fc:	f423 13f8 	bic.w	r3, r3, #2031616	; 0x1f0000
 8005300:	6093      	str	r3, [r2, #8]
 8005302:	4b0d      	ldr	r3, [pc, #52]	; (8005338 <HAL_RCCEx_PeriphCLKConfig+0x374>)
 8005304:	6f1a      	ldr	r2, [r3, #112]	; 0x70
 8005306:	687b      	ldr	r3, [r7, #4]
 8005308:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800530a:	f3c3 030b 	ubfx	r3, r3, #0, #12
 800530e:	490a      	ldr	r1, [pc, #40]	; (8005338 <HAL_RCCEx_PeriphCLKConfig+0x374>)
 8005310:	4313      	orrs	r3, r2
 8005312:	670b      	str	r3, [r1, #112]	; 0x70
  }
  /*--------------------------------------------------------------------------*/

  /*---------------------------- TIM configuration ---------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM) == (RCC_PERIPHCLK_TIM))
 8005314:	687b      	ldr	r3, [r7, #4]
 8005316:	681b      	ldr	r3, [r3, #0]
 8005318:	f003 0310 	and.w	r3, r3, #16
 800531c:	2b00      	cmp	r3, #0
 800531e:	d004      	beq.n	800532a <HAL_RCCEx_PeriphCLKConfig+0x366>
  {
    __HAL_RCC_TIMCLKPRESCALER(PeriphClkInit->TIMPresSelection);
 8005320:	687b      	ldr	r3, [r7, #4]
 8005322:	f893 202c 	ldrb.w	r2, [r3, #44]	; 0x2c
 8005326:	4b06      	ldr	r3, [pc, #24]	; (8005340 <HAL_RCCEx_PeriphCLKConfig+0x37c>)
 8005328:	601a      	str	r2, [r3, #0]
  }
  return HAL_OK;
 800532a:	2300      	movs	r3, #0
}
 800532c:	4618      	mov	r0, r3
 800532e:	3718      	adds	r7, #24
 8005330:	46bd      	mov	sp, r7
 8005332:	bd80      	pop	{r7, pc}
 8005334:	40007000 	.word	0x40007000
 8005338:	40023800 	.word	0x40023800
 800533c:	42470e40 	.word	0x42470e40
 8005340:	424711e0 	.word	0x424711e0

08005344 <HAL_SDRAM_Init>:
  *                the configuration information for SDRAM module.
  * @param  Timing Pointer to SDRAM control timing structure
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SDRAM_Init(SDRAM_HandleTypeDef *hsdram, FMC_SDRAM_TimingTypeDef *Timing)
{
 8005344:	b580      	push	{r7, lr}
 8005346:	b082      	sub	sp, #8
 8005348:	af00      	add	r7, sp, #0
 800534a:	6078      	str	r0, [r7, #4]
 800534c:	6039      	str	r1, [r7, #0]
  /* Check the SDRAM handle parameter */
  if (hsdram == NULL)
 800534e:	687b      	ldr	r3, [r7, #4]
 8005350:	2b00      	cmp	r3, #0
 8005352:	d101      	bne.n	8005358 <HAL_SDRAM_Init+0x14>
  {
    return HAL_ERROR;
 8005354:	2301      	movs	r3, #1
 8005356:	e025      	b.n	80053a4 <HAL_SDRAM_Init+0x60>
  }

  if (hsdram->State == HAL_SDRAM_STATE_RESET)
 8005358:	687b      	ldr	r3, [r7, #4]
 800535a:	f893 302c 	ldrb.w	r3, [r3, #44]	; 0x2c
 800535e:	b2db      	uxtb	r3, r3
 8005360:	2b00      	cmp	r3, #0
 8005362:	d106      	bne.n	8005372 <HAL_SDRAM_Init+0x2e>
  {
    /* Allocate lock resource and initialize it */
    hsdram->Lock = HAL_UNLOCKED;
 8005364:	687b      	ldr	r3, [r7, #4]
 8005366:	2200      	movs	r2, #0
 8005368:	f883 202d 	strb.w	r2, [r3, #45]	; 0x2d

    /* Init the low level hardware */
    hsdram->MspInitCallback(hsdram);
#else
    /* Initialize the low level hardware (MSP) */
    HAL_SDRAM_MspInit(hsdram);
 800536c:	6878      	ldr	r0, [r7, #4]
 800536e:	f7fc fa23 	bl	80017b8 <HAL_SDRAM_MspInit>
#endif /* USE_HAL_SDRAM_REGISTER_CALLBACKS */
  }

  /* Initialize the SDRAM controller state */
  hsdram->State = HAL_SDRAM_STATE_BUSY;
 8005372:	687b      	ldr	r3, [r7, #4]
 8005374:	2202      	movs	r2, #2
 8005376:	f883 202c 	strb.w	r2, [r3, #44]	; 0x2c

  /* Initialize SDRAM control Interface */
  (void)FMC_SDRAM_Init(hsdram->Instance, &(hsdram->Init));
 800537a:	687b      	ldr	r3, [r7, #4]
 800537c:	681a      	ldr	r2, [r3, #0]
 800537e:	687b      	ldr	r3, [r7, #4]
 8005380:	3304      	adds	r3, #4
 8005382:	4619      	mov	r1, r3
 8005384:	4610      	mov	r0, r2
 8005386:	f001 f8dd 	bl	8006544 <FMC_SDRAM_Init>

  /* Initialize SDRAM timing Interface */
  (void)FMC_SDRAM_Timing_Init(hsdram->Instance, Timing, hsdram->Init.SDBank);
 800538a:	687b      	ldr	r3, [r7, #4]
 800538c:	6818      	ldr	r0, [r3, #0]
 800538e:	687b      	ldr	r3, [r7, #4]
 8005390:	685b      	ldr	r3, [r3, #4]
 8005392:	461a      	mov	r2, r3
 8005394:	6839      	ldr	r1, [r7, #0]
 8005396:	f001 f932 	bl	80065fe <FMC_SDRAM_Timing_Init>
  /* Update the SDRAM controller state */
  hsdram->State = HAL_SDRAM_STATE_READY;
 800539a:	687b      	ldr	r3, [r7, #4]
 800539c:	2201      	movs	r2, #1
 800539e:	f883 202c 	strb.w	r2, [r3, #44]	; 0x2c

  return HAL_OK;
 80053a2:	2300      	movs	r3, #0
}
 80053a4:	4618      	mov	r0, r3
 80053a6:	3708      	adds	r7, #8
 80053a8:	46bd      	mov	sp, r7
 80053aa:	bd80      	pop	{r7, pc}

080053ac <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 80053ac:	b580      	push	{r7, lr}
 80053ae:	b082      	sub	sp, #8
 80053b0:	af00      	add	r7, sp, #0
 80053b2:	6078      	str	r0, [r7, #4]
  /* Check the SPI handle allocation */
  if (hspi == NULL)
 80053b4:	687b      	ldr	r3, [r7, #4]
 80053b6:	2b00      	cmp	r3, #0
 80053b8:	d101      	bne.n	80053be <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 80053ba:	2301      	movs	r3, #1
 80053bc:	e07b      	b.n	80054b6 <HAL_SPI_Init+0x10a>
  assert_param(IS_SPI_DATASIZE(hspi->Init.DataSize));
  assert_param(IS_SPI_NSS(hspi->Init.NSS));
  assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
  assert_param(IS_SPI_FIRST_BIT(hspi->Init.FirstBit));
  assert_param(IS_SPI_TIMODE(hspi->Init.TIMode));
  if (hspi->Init.TIMode == SPI_TIMODE_DISABLE)
 80053be:	687b      	ldr	r3, [r7, #4]
 80053c0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80053c2:	2b00      	cmp	r3, #0
 80053c4:	d108      	bne.n	80053d8 <HAL_SPI_Init+0x2c>
  {
    assert_param(IS_SPI_CPOL(hspi->Init.CLKPolarity));
    assert_param(IS_SPI_CPHA(hspi->Init.CLKPhase));

    if (hspi->Init.Mode == SPI_MODE_MASTER)
 80053c6:	687b      	ldr	r3, [r7, #4]
 80053c8:	685b      	ldr	r3, [r3, #4]
 80053ca:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 80053ce:	d009      	beq.n	80053e4 <HAL_SPI_Init+0x38>
      assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
    }
    else
    {
      /* Baudrate prescaler not use in Motoraola Slave mode. force to default value */
      hspi->Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 80053d0:	687b      	ldr	r3, [r7, #4]
 80053d2:	2200      	movs	r2, #0
 80053d4:	61da      	str	r2, [r3, #28]
 80053d6:	e005      	b.n	80053e4 <HAL_SPI_Init+0x38>
  else
  {
    assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));

    /* Force polarity and phase to TI protocaol requirements */
    hspi->Init.CLKPolarity = SPI_POLARITY_LOW;
 80053d8:	687b      	ldr	r3, [r7, #4]
 80053da:	2200      	movs	r2, #0
 80053dc:	611a      	str	r2, [r3, #16]
    hspi->Init.CLKPhase    = SPI_PHASE_1EDGE;
 80053de:	687b      	ldr	r3, [r7, #4]
 80053e0:	2200      	movs	r2, #0
 80053e2:	615a      	str	r2, [r3, #20]
  if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 80053e4:	687b      	ldr	r3, [r7, #4]
 80053e6:	2200      	movs	r2, #0
 80053e8:	629a      	str	r2, [r3, #40]	; 0x28
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 80053ea:	687b      	ldr	r3, [r7, #4]
 80053ec:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 80053f0:	b2db      	uxtb	r3, r3
 80053f2:	2b00      	cmp	r3, #0
 80053f4:	d106      	bne.n	8005404 <HAL_SPI_Init+0x58>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 80053f6:	687b      	ldr	r3, [r7, #4]
 80053f8:	2200      	movs	r2, #0
 80053fa:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 80053fe:	6878      	ldr	r0, [r7, #4]
 8005400:	f7fc f838 	bl	8001474 <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 8005404:	687b      	ldr	r3, [r7, #4]
 8005406:	2202      	movs	r2, #2
 8005408:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 800540c:	687b      	ldr	r3, [r7, #4]
 800540e:	681b      	ldr	r3, [r3, #0]
 8005410:	681a      	ldr	r2, [r3, #0]
 8005412:	687b      	ldr	r3, [r7, #4]
 8005414:	681b      	ldr	r3, [r3, #0]
 8005416:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 800541a:	601a      	str	r2, [r3, #0]

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Data size, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, ((hspi->Init.Mode & (SPI_CR1_MSTR | SPI_CR1_SSI)) |
 800541c:	687b      	ldr	r3, [r7, #4]
 800541e:	685b      	ldr	r3, [r3, #4]
 8005420:	f403 7282 	and.w	r2, r3, #260	; 0x104
 8005424:	687b      	ldr	r3, [r7, #4]
 8005426:	689b      	ldr	r3, [r3, #8]
 8005428:	f403 4304 	and.w	r3, r3, #33792	; 0x8400
 800542c:	431a      	orrs	r2, r3
 800542e:	687b      	ldr	r3, [r7, #4]
 8005430:	68db      	ldr	r3, [r3, #12]
 8005432:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8005436:	431a      	orrs	r2, r3
 8005438:	687b      	ldr	r3, [r7, #4]
 800543a:	691b      	ldr	r3, [r3, #16]
 800543c:	f003 0302 	and.w	r3, r3, #2
 8005440:	431a      	orrs	r2, r3
 8005442:	687b      	ldr	r3, [r7, #4]
 8005444:	695b      	ldr	r3, [r3, #20]
 8005446:	f003 0301 	and.w	r3, r3, #1
 800544a:	431a      	orrs	r2, r3
 800544c:	687b      	ldr	r3, [r7, #4]
 800544e:	699b      	ldr	r3, [r3, #24]
 8005450:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8005454:	431a      	orrs	r2, r3
 8005456:	687b      	ldr	r3, [r7, #4]
 8005458:	69db      	ldr	r3, [r3, #28]
 800545a:	f003 0338 	and.w	r3, r3, #56	; 0x38
 800545e:	431a      	orrs	r2, r3
 8005460:	687b      	ldr	r3, [r7, #4]
 8005462:	6a1b      	ldr	r3, [r3, #32]
 8005464:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8005468:	ea42 0103 	orr.w	r1, r2, r3
 800546c:	687b      	ldr	r3, [r7, #4]
 800546e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005470:	f403 5200 	and.w	r2, r3, #8192	; 0x2000
 8005474:	687b      	ldr	r3, [r7, #4]
 8005476:	681b      	ldr	r3, [r3, #0]
 8005478:	430a      	orrs	r2, r1
 800547a:	601a      	str	r2, [r3, #0]
                                  (hspi->Init.BaudRatePrescaler & SPI_CR1_BR_Msk) |
                                  (hspi->Init.FirstBit  & SPI_CR1_LSBFIRST) |
                                  (hspi->Init.CRCCalculation & SPI_CR1_CRCEN)));

  /* Configure : NSS management, TI Mode */
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) | (hspi->Init.TIMode & SPI_CR2_FRF)));
 800547c:	687b      	ldr	r3, [r7, #4]
 800547e:	699b      	ldr	r3, [r3, #24]
 8005480:	0c1b      	lsrs	r3, r3, #16
 8005482:	f003 0104 	and.w	r1, r3, #4
 8005486:	687b      	ldr	r3, [r7, #4]
 8005488:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800548a:	f003 0210 	and.w	r2, r3, #16
 800548e:	687b      	ldr	r3, [r7, #4]
 8005490:	681b      	ldr	r3, [r3, #0]
 8005492:	430a      	orrs	r2, r1
 8005494:	605a      	str	r2, [r3, #4]
  }
#endif /* USE_SPI_CRC */

#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 8005496:	687b      	ldr	r3, [r7, #4]
 8005498:	681b      	ldr	r3, [r3, #0]
 800549a:	69da      	ldr	r2, [r3, #28]
 800549c:	687b      	ldr	r3, [r7, #4]
 800549e:	681b      	ldr	r3, [r3, #0]
 80054a0:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 80054a4:	61da      	str	r2, [r3, #28]
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 80054a6:	687b      	ldr	r3, [r7, #4]
 80054a8:	2200      	movs	r2, #0
 80054aa:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->State     = HAL_SPI_STATE_READY;
 80054ac:	687b      	ldr	r3, [r7, #4]
 80054ae:	2201      	movs	r2, #1
 80054b0:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

  return HAL_OK;
 80054b4:	2300      	movs	r3, #0
}
 80054b6:	4618      	mov	r0, r3
 80054b8:	3708      	adds	r7, #8
 80054ba:	46bd      	mov	sp, r7
 80054bc:	bd80      	pop	{r7, pc}

080054be <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 80054be:	b580      	push	{r7, lr}
 80054c0:	b082      	sub	sp, #8
 80054c2:	af00      	add	r7, sp, #0
 80054c4:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 80054c6:	687b      	ldr	r3, [r7, #4]
 80054c8:	2b00      	cmp	r3, #0
 80054ca:	d101      	bne.n	80054d0 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 80054cc:	2301      	movs	r3, #1
 80054ce:	e041      	b.n	8005554 <HAL_TIM_Base_Init+0x96>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 80054d0:	687b      	ldr	r3, [r7, #4]
 80054d2:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80054d6:	b2db      	uxtb	r3, r3
 80054d8:	2b00      	cmp	r3, #0
 80054da:	d106      	bne.n	80054ea <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 80054dc:	687b      	ldr	r3, [r7, #4]
 80054de:	2200      	movs	r2, #0
 80054e0:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 80054e4:	6878      	ldr	r0, [r7, #4]
 80054e6:	f7fc f80d 	bl	8001504 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80054ea:	687b      	ldr	r3, [r7, #4]
 80054ec:	2202      	movs	r2, #2
 80054ee:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 80054f2:	687b      	ldr	r3, [r7, #4]
 80054f4:	681a      	ldr	r2, [r3, #0]
 80054f6:	687b      	ldr	r3, [r7, #4]
 80054f8:	3304      	adds	r3, #4
 80054fa:	4619      	mov	r1, r3
 80054fc:	4610      	mov	r0, r2
 80054fe:	f000 fa95 	bl	8005a2c <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8005502:	687b      	ldr	r3, [r7, #4]
 8005504:	2201      	movs	r2, #1
 8005506:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800550a:	687b      	ldr	r3, [r7, #4]
 800550c:	2201      	movs	r2, #1
 800550e:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8005512:	687b      	ldr	r3, [r7, #4]
 8005514:	2201      	movs	r2, #1
 8005516:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 800551a:	687b      	ldr	r3, [r7, #4]
 800551c:	2201      	movs	r2, #1
 800551e:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8005522:	687b      	ldr	r3, [r7, #4]
 8005524:	2201      	movs	r2, #1
 8005526:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800552a:	687b      	ldr	r3, [r7, #4]
 800552c:	2201      	movs	r2, #1
 800552e:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8005532:	687b      	ldr	r3, [r7, #4]
 8005534:	2201      	movs	r2, #1
 8005536:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 800553a:	687b      	ldr	r3, [r7, #4]
 800553c:	2201      	movs	r2, #1
 800553e:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8005542:	687b      	ldr	r3, [r7, #4]
 8005544:	2201      	movs	r2, #1
 8005546:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 800554a:	687b      	ldr	r3, [r7, #4]
 800554c:	2201      	movs	r2, #1
 800554e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8005552:	2300      	movs	r3, #0
}
 8005554:	4618      	mov	r0, r3
 8005556:	3708      	adds	r7, #8
 8005558:	46bd      	mov	sp, r7
 800555a:	bd80      	pop	{r7, pc}

0800555c <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 800555c:	b480      	push	{r7}
 800555e:	b085      	sub	sp, #20
 8005560:	af00      	add	r7, sp, #0
 8005562:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8005564:	687b      	ldr	r3, [r7, #4]
 8005566:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800556a:	b2db      	uxtb	r3, r3
 800556c:	2b01      	cmp	r3, #1
 800556e:	d001      	beq.n	8005574 <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 8005570:	2301      	movs	r3, #1
 8005572:	e04e      	b.n	8005612 <HAL_TIM_Base_Start_IT+0xb6>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8005574:	687b      	ldr	r3, [r7, #4]
 8005576:	2202      	movs	r2, #2
 8005578:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 800557c:	687b      	ldr	r3, [r7, #4]
 800557e:	681b      	ldr	r3, [r3, #0]
 8005580:	68da      	ldr	r2, [r3, #12]
 8005582:	687b      	ldr	r3, [r7, #4]
 8005584:	681b      	ldr	r3, [r3, #0]
 8005586:	f042 0201 	orr.w	r2, r2, #1
 800558a:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800558c:	687b      	ldr	r3, [r7, #4]
 800558e:	681b      	ldr	r3, [r3, #0]
 8005590:	4a23      	ldr	r2, [pc, #140]	; (8005620 <HAL_TIM_Base_Start_IT+0xc4>)
 8005592:	4293      	cmp	r3, r2
 8005594:	d022      	beq.n	80055dc <HAL_TIM_Base_Start_IT+0x80>
 8005596:	687b      	ldr	r3, [r7, #4]
 8005598:	681b      	ldr	r3, [r3, #0]
 800559a:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800559e:	d01d      	beq.n	80055dc <HAL_TIM_Base_Start_IT+0x80>
 80055a0:	687b      	ldr	r3, [r7, #4]
 80055a2:	681b      	ldr	r3, [r3, #0]
 80055a4:	4a1f      	ldr	r2, [pc, #124]	; (8005624 <HAL_TIM_Base_Start_IT+0xc8>)
 80055a6:	4293      	cmp	r3, r2
 80055a8:	d018      	beq.n	80055dc <HAL_TIM_Base_Start_IT+0x80>
 80055aa:	687b      	ldr	r3, [r7, #4]
 80055ac:	681b      	ldr	r3, [r3, #0]
 80055ae:	4a1e      	ldr	r2, [pc, #120]	; (8005628 <HAL_TIM_Base_Start_IT+0xcc>)
 80055b0:	4293      	cmp	r3, r2
 80055b2:	d013      	beq.n	80055dc <HAL_TIM_Base_Start_IT+0x80>
 80055b4:	687b      	ldr	r3, [r7, #4]
 80055b6:	681b      	ldr	r3, [r3, #0]
 80055b8:	4a1c      	ldr	r2, [pc, #112]	; (800562c <HAL_TIM_Base_Start_IT+0xd0>)
 80055ba:	4293      	cmp	r3, r2
 80055bc:	d00e      	beq.n	80055dc <HAL_TIM_Base_Start_IT+0x80>
 80055be:	687b      	ldr	r3, [r7, #4]
 80055c0:	681b      	ldr	r3, [r3, #0]
 80055c2:	4a1b      	ldr	r2, [pc, #108]	; (8005630 <HAL_TIM_Base_Start_IT+0xd4>)
 80055c4:	4293      	cmp	r3, r2
 80055c6:	d009      	beq.n	80055dc <HAL_TIM_Base_Start_IT+0x80>
 80055c8:	687b      	ldr	r3, [r7, #4]
 80055ca:	681b      	ldr	r3, [r3, #0]
 80055cc:	4a19      	ldr	r2, [pc, #100]	; (8005634 <HAL_TIM_Base_Start_IT+0xd8>)
 80055ce:	4293      	cmp	r3, r2
 80055d0:	d004      	beq.n	80055dc <HAL_TIM_Base_Start_IT+0x80>
 80055d2:	687b      	ldr	r3, [r7, #4]
 80055d4:	681b      	ldr	r3, [r3, #0]
 80055d6:	4a18      	ldr	r2, [pc, #96]	; (8005638 <HAL_TIM_Base_Start_IT+0xdc>)
 80055d8:	4293      	cmp	r3, r2
 80055da:	d111      	bne.n	8005600 <HAL_TIM_Base_Start_IT+0xa4>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 80055dc:	687b      	ldr	r3, [r7, #4]
 80055de:	681b      	ldr	r3, [r3, #0]
 80055e0:	689b      	ldr	r3, [r3, #8]
 80055e2:	f003 0307 	and.w	r3, r3, #7
 80055e6:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80055e8:	68fb      	ldr	r3, [r7, #12]
 80055ea:	2b06      	cmp	r3, #6
 80055ec:	d010      	beq.n	8005610 <HAL_TIM_Base_Start_IT+0xb4>
    {
      __HAL_TIM_ENABLE(htim);
 80055ee:	687b      	ldr	r3, [r7, #4]
 80055f0:	681b      	ldr	r3, [r3, #0]
 80055f2:	681a      	ldr	r2, [r3, #0]
 80055f4:	687b      	ldr	r3, [r7, #4]
 80055f6:	681b      	ldr	r3, [r3, #0]
 80055f8:	f042 0201 	orr.w	r2, r2, #1
 80055fc:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80055fe:	e007      	b.n	8005610 <HAL_TIM_Base_Start_IT+0xb4>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8005600:	687b      	ldr	r3, [r7, #4]
 8005602:	681b      	ldr	r3, [r3, #0]
 8005604:	681a      	ldr	r2, [r3, #0]
 8005606:	687b      	ldr	r3, [r7, #4]
 8005608:	681b      	ldr	r3, [r3, #0]
 800560a:	f042 0201 	orr.w	r2, r2, #1
 800560e:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8005610:	2300      	movs	r3, #0
}
 8005612:	4618      	mov	r0, r3
 8005614:	3714      	adds	r7, #20
 8005616:	46bd      	mov	sp, r7
 8005618:	f85d 7b04 	ldr.w	r7, [sp], #4
 800561c:	4770      	bx	lr
 800561e:	bf00      	nop
 8005620:	40010000 	.word	0x40010000
 8005624:	40000400 	.word	0x40000400
 8005628:	40000800 	.word	0x40000800
 800562c:	40000c00 	.word	0x40000c00
 8005630:	40010400 	.word	0x40010400
 8005634:	40014000 	.word	0x40014000
 8005638:	40001800 	.word	0x40001800

0800563c <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 800563c:	b580      	push	{r7, lr}
 800563e:	b082      	sub	sp, #8
 8005640:	af00      	add	r7, sp, #0
 8005642:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 8005644:	687b      	ldr	r3, [r7, #4]
 8005646:	681b      	ldr	r3, [r3, #0]
 8005648:	691b      	ldr	r3, [r3, #16]
 800564a:	f003 0302 	and.w	r3, r3, #2
 800564e:	2b02      	cmp	r3, #2
 8005650:	d122      	bne.n	8005698 <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 8005652:	687b      	ldr	r3, [r7, #4]
 8005654:	681b      	ldr	r3, [r3, #0]
 8005656:	68db      	ldr	r3, [r3, #12]
 8005658:	f003 0302 	and.w	r3, r3, #2
 800565c:	2b02      	cmp	r3, #2
 800565e:	d11b      	bne.n	8005698 <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 8005660:	687b      	ldr	r3, [r7, #4]
 8005662:	681b      	ldr	r3, [r3, #0]
 8005664:	f06f 0202 	mvn.w	r2, #2
 8005668:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 800566a:	687b      	ldr	r3, [r7, #4]
 800566c:	2201      	movs	r2, #1
 800566e:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8005670:	687b      	ldr	r3, [r7, #4]
 8005672:	681b      	ldr	r3, [r3, #0]
 8005674:	699b      	ldr	r3, [r3, #24]
 8005676:	f003 0303 	and.w	r3, r3, #3
 800567a:	2b00      	cmp	r3, #0
 800567c:	d003      	beq.n	8005686 <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 800567e:	6878      	ldr	r0, [r7, #4]
 8005680:	f000 f9b5 	bl	80059ee <HAL_TIM_IC_CaptureCallback>
 8005684:	e005      	b.n	8005692 <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 8005686:	6878      	ldr	r0, [r7, #4]
 8005688:	f000 f9a7 	bl	80059da <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 800568c:	6878      	ldr	r0, [r7, #4]
 800568e:	f000 f9b8 	bl	8005a02 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8005692:	687b      	ldr	r3, [r7, #4]
 8005694:	2200      	movs	r2, #0
 8005696:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 8005698:	687b      	ldr	r3, [r7, #4]
 800569a:	681b      	ldr	r3, [r3, #0]
 800569c:	691b      	ldr	r3, [r3, #16]
 800569e:	f003 0304 	and.w	r3, r3, #4
 80056a2:	2b04      	cmp	r3, #4
 80056a4:	d122      	bne.n	80056ec <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 80056a6:	687b      	ldr	r3, [r7, #4]
 80056a8:	681b      	ldr	r3, [r3, #0]
 80056aa:	68db      	ldr	r3, [r3, #12]
 80056ac:	f003 0304 	and.w	r3, r3, #4
 80056b0:	2b04      	cmp	r3, #4
 80056b2:	d11b      	bne.n	80056ec <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 80056b4:	687b      	ldr	r3, [r7, #4]
 80056b6:	681b      	ldr	r3, [r3, #0]
 80056b8:	f06f 0204 	mvn.w	r2, #4
 80056bc:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 80056be:	687b      	ldr	r3, [r7, #4]
 80056c0:	2202      	movs	r2, #2
 80056c2:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 80056c4:	687b      	ldr	r3, [r7, #4]
 80056c6:	681b      	ldr	r3, [r3, #0]
 80056c8:	699b      	ldr	r3, [r3, #24]
 80056ca:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80056ce:	2b00      	cmp	r3, #0
 80056d0:	d003      	beq.n	80056da <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80056d2:	6878      	ldr	r0, [r7, #4]
 80056d4:	f000 f98b 	bl	80059ee <HAL_TIM_IC_CaptureCallback>
 80056d8:	e005      	b.n	80056e6 <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80056da:	6878      	ldr	r0, [r7, #4]
 80056dc:	f000 f97d 	bl	80059da <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80056e0:	6878      	ldr	r0, [r7, #4]
 80056e2:	f000 f98e 	bl	8005a02 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80056e6:	687b      	ldr	r3, [r7, #4]
 80056e8:	2200      	movs	r2, #0
 80056ea:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 80056ec:	687b      	ldr	r3, [r7, #4]
 80056ee:	681b      	ldr	r3, [r3, #0]
 80056f0:	691b      	ldr	r3, [r3, #16]
 80056f2:	f003 0308 	and.w	r3, r3, #8
 80056f6:	2b08      	cmp	r3, #8
 80056f8:	d122      	bne.n	8005740 <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 80056fa:	687b      	ldr	r3, [r7, #4]
 80056fc:	681b      	ldr	r3, [r3, #0]
 80056fe:	68db      	ldr	r3, [r3, #12]
 8005700:	f003 0308 	and.w	r3, r3, #8
 8005704:	2b08      	cmp	r3, #8
 8005706:	d11b      	bne.n	8005740 <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 8005708:	687b      	ldr	r3, [r7, #4]
 800570a:	681b      	ldr	r3, [r3, #0]
 800570c:	f06f 0208 	mvn.w	r2, #8
 8005710:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8005712:	687b      	ldr	r3, [r7, #4]
 8005714:	2204      	movs	r2, #4
 8005716:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8005718:	687b      	ldr	r3, [r7, #4]
 800571a:	681b      	ldr	r3, [r3, #0]
 800571c:	69db      	ldr	r3, [r3, #28]
 800571e:	f003 0303 	and.w	r3, r3, #3
 8005722:	2b00      	cmp	r3, #0
 8005724:	d003      	beq.n	800572e <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8005726:	6878      	ldr	r0, [r7, #4]
 8005728:	f000 f961 	bl	80059ee <HAL_TIM_IC_CaptureCallback>
 800572c:	e005      	b.n	800573a <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800572e:	6878      	ldr	r0, [r7, #4]
 8005730:	f000 f953 	bl	80059da <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8005734:	6878      	ldr	r0, [r7, #4]
 8005736:	f000 f964 	bl	8005a02 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800573a:	687b      	ldr	r3, [r7, #4]
 800573c:	2200      	movs	r2, #0
 800573e:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 8005740:	687b      	ldr	r3, [r7, #4]
 8005742:	681b      	ldr	r3, [r3, #0]
 8005744:	691b      	ldr	r3, [r3, #16]
 8005746:	f003 0310 	and.w	r3, r3, #16
 800574a:	2b10      	cmp	r3, #16
 800574c:	d122      	bne.n	8005794 <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 800574e:	687b      	ldr	r3, [r7, #4]
 8005750:	681b      	ldr	r3, [r3, #0]
 8005752:	68db      	ldr	r3, [r3, #12]
 8005754:	f003 0310 	and.w	r3, r3, #16
 8005758:	2b10      	cmp	r3, #16
 800575a:	d11b      	bne.n	8005794 <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 800575c:	687b      	ldr	r3, [r7, #4]
 800575e:	681b      	ldr	r3, [r3, #0]
 8005760:	f06f 0210 	mvn.w	r2, #16
 8005764:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8005766:	687b      	ldr	r3, [r7, #4]
 8005768:	2208      	movs	r2, #8
 800576a:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 800576c:	687b      	ldr	r3, [r7, #4]
 800576e:	681b      	ldr	r3, [r3, #0]
 8005770:	69db      	ldr	r3, [r3, #28]
 8005772:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8005776:	2b00      	cmp	r3, #0
 8005778:	d003      	beq.n	8005782 <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800577a:	6878      	ldr	r0, [r7, #4]
 800577c:	f000 f937 	bl	80059ee <HAL_TIM_IC_CaptureCallback>
 8005780:	e005      	b.n	800578e <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8005782:	6878      	ldr	r0, [r7, #4]
 8005784:	f000 f929 	bl	80059da <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8005788:	6878      	ldr	r0, [r7, #4]
 800578a:	f000 f93a 	bl	8005a02 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800578e:	687b      	ldr	r3, [r7, #4]
 8005790:	2200      	movs	r2, #0
 8005792:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 8005794:	687b      	ldr	r3, [r7, #4]
 8005796:	681b      	ldr	r3, [r3, #0]
 8005798:	691b      	ldr	r3, [r3, #16]
 800579a:	f003 0301 	and.w	r3, r3, #1
 800579e:	2b01      	cmp	r3, #1
 80057a0:	d10e      	bne.n	80057c0 <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 80057a2:	687b      	ldr	r3, [r7, #4]
 80057a4:	681b      	ldr	r3, [r3, #0]
 80057a6:	68db      	ldr	r3, [r3, #12]
 80057a8:	f003 0301 	and.w	r3, r3, #1
 80057ac:	2b01      	cmp	r3, #1
 80057ae:	d107      	bne.n	80057c0 <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 80057b0:	687b      	ldr	r3, [r7, #4]
 80057b2:	681b      	ldr	r3, [r3, #0]
 80057b4:	f06f 0201 	mvn.w	r2, #1
 80057b8:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 80057ba:	6878      	ldr	r0, [r7, #4]
 80057bc:	f7fb fc36 	bl	800102c <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 80057c0:	687b      	ldr	r3, [r7, #4]
 80057c2:	681b      	ldr	r3, [r3, #0]
 80057c4:	691b      	ldr	r3, [r3, #16]
 80057c6:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80057ca:	2b80      	cmp	r3, #128	; 0x80
 80057cc:	d10e      	bne.n	80057ec <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 80057ce:	687b      	ldr	r3, [r7, #4]
 80057d0:	681b      	ldr	r3, [r3, #0]
 80057d2:	68db      	ldr	r3, [r3, #12]
 80057d4:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80057d8:	2b80      	cmp	r3, #128	; 0x80
 80057da:	d107      	bne.n	80057ec <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 80057dc:	687b      	ldr	r3, [r7, #4]
 80057de:	681b      	ldr	r3, [r3, #0]
 80057e0:	f06f 0280 	mvn.w	r2, #128	; 0x80
 80057e4:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 80057e6:	6878      	ldr	r0, [r7, #4]
 80057e8:	f000 fae0 	bl	8005dac <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 80057ec:	687b      	ldr	r3, [r7, #4]
 80057ee:	681b      	ldr	r3, [r3, #0]
 80057f0:	691b      	ldr	r3, [r3, #16]
 80057f2:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80057f6:	2b40      	cmp	r3, #64	; 0x40
 80057f8:	d10e      	bne.n	8005818 <HAL_TIM_IRQHandler+0x1dc>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 80057fa:	687b      	ldr	r3, [r7, #4]
 80057fc:	681b      	ldr	r3, [r3, #0]
 80057fe:	68db      	ldr	r3, [r3, #12]
 8005800:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005804:	2b40      	cmp	r3, #64	; 0x40
 8005806:	d107      	bne.n	8005818 <HAL_TIM_IRQHandler+0x1dc>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 8005808:	687b      	ldr	r3, [r7, #4]
 800580a:	681b      	ldr	r3, [r3, #0]
 800580c:	f06f 0240 	mvn.w	r2, #64	; 0x40
 8005810:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 8005812:	6878      	ldr	r0, [r7, #4]
 8005814:	f000 f8ff 	bl	8005a16 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 8005818:	687b      	ldr	r3, [r7, #4]
 800581a:	681b      	ldr	r3, [r3, #0]
 800581c:	691b      	ldr	r3, [r3, #16]
 800581e:	f003 0320 	and.w	r3, r3, #32
 8005822:	2b20      	cmp	r3, #32
 8005824:	d10e      	bne.n	8005844 <HAL_TIM_IRQHandler+0x208>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 8005826:	687b      	ldr	r3, [r7, #4]
 8005828:	681b      	ldr	r3, [r3, #0]
 800582a:	68db      	ldr	r3, [r3, #12]
 800582c:	f003 0320 	and.w	r3, r3, #32
 8005830:	2b20      	cmp	r3, #32
 8005832:	d107      	bne.n	8005844 <HAL_TIM_IRQHandler+0x208>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 8005834:	687b      	ldr	r3, [r7, #4]
 8005836:	681b      	ldr	r3, [r3, #0]
 8005838:	f06f 0220 	mvn.w	r2, #32
 800583c:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 800583e:	6878      	ldr	r0, [r7, #4]
 8005840:	f000 faaa 	bl	8005d98 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 8005844:	bf00      	nop
 8005846:	3708      	adds	r7, #8
 8005848:	46bd      	mov	sp, r7
 800584a:	bd80      	pop	{r7, pc}

0800584c <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 800584c:	b580      	push	{r7, lr}
 800584e:	b084      	sub	sp, #16
 8005850:	af00      	add	r7, sp, #0
 8005852:	6078      	str	r0, [r7, #4]
 8005854:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8005856:	2300      	movs	r3, #0
 8005858:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 800585a:	687b      	ldr	r3, [r7, #4]
 800585c:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8005860:	2b01      	cmp	r3, #1
 8005862:	d101      	bne.n	8005868 <HAL_TIM_ConfigClockSource+0x1c>
 8005864:	2302      	movs	r3, #2
 8005866:	e0b4      	b.n	80059d2 <HAL_TIM_ConfigClockSource+0x186>
 8005868:	687b      	ldr	r3, [r7, #4]
 800586a:	2201      	movs	r2, #1
 800586c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 8005870:	687b      	ldr	r3, [r7, #4]
 8005872:	2202      	movs	r2, #2
 8005874:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 8005878:	687b      	ldr	r3, [r7, #4]
 800587a:	681b      	ldr	r3, [r3, #0]
 800587c:	689b      	ldr	r3, [r3, #8]
 800587e:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 8005880:	68bb      	ldr	r3, [r7, #8]
 8005882:	f023 0377 	bic.w	r3, r3, #119	; 0x77
 8005886:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8005888:	68bb      	ldr	r3, [r7, #8]
 800588a:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 800588e:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 8005890:	687b      	ldr	r3, [r7, #4]
 8005892:	681b      	ldr	r3, [r3, #0]
 8005894:	68ba      	ldr	r2, [r7, #8]
 8005896:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 8005898:	683b      	ldr	r3, [r7, #0]
 800589a:	681b      	ldr	r3, [r3, #0]
 800589c:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80058a0:	d03e      	beq.n	8005920 <HAL_TIM_ConfigClockSource+0xd4>
 80058a2:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80058a6:	f200 8087 	bhi.w	80059b8 <HAL_TIM_ConfigClockSource+0x16c>
 80058aa:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80058ae:	f000 8086 	beq.w	80059be <HAL_TIM_ConfigClockSource+0x172>
 80058b2:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80058b6:	d87f      	bhi.n	80059b8 <HAL_TIM_ConfigClockSource+0x16c>
 80058b8:	2b70      	cmp	r3, #112	; 0x70
 80058ba:	d01a      	beq.n	80058f2 <HAL_TIM_ConfigClockSource+0xa6>
 80058bc:	2b70      	cmp	r3, #112	; 0x70
 80058be:	d87b      	bhi.n	80059b8 <HAL_TIM_ConfigClockSource+0x16c>
 80058c0:	2b60      	cmp	r3, #96	; 0x60
 80058c2:	d050      	beq.n	8005966 <HAL_TIM_ConfigClockSource+0x11a>
 80058c4:	2b60      	cmp	r3, #96	; 0x60
 80058c6:	d877      	bhi.n	80059b8 <HAL_TIM_ConfigClockSource+0x16c>
 80058c8:	2b50      	cmp	r3, #80	; 0x50
 80058ca:	d03c      	beq.n	8005946 <HAL_TIM_ConfigClockSource+0xfa>
 80058cc:	2b50      	cmp	r3, #80	; 0x50
 80058ce:	d873      	bhi.n	80059b8 <HAL_TIM_ConfigClockSource+0x16c>
 80058d0:	2b40      	cmp	r3, #64	; 0x40
 80058d2:	d058      	beq.n	8005986 <HAL_TIM_ConfigClockSource+0x13a>
 80058d4:	2b40      	cmp	r3, #64	; 0x40
 80058d6:	d86f      	bhi.n	80059b8 <HAL_TIM_ConfigClockSource+0x16c>
 80058d8:	2b30      	cmp	r3, #48	; 0x30
 80058da:	d064      	beq.n	80059a6 <HAL_TIM_ConfigClockSource+0x15a>
 80058dc:	2b30      	cmp	r3, #48	; 0x30
 80058de:	d86b      	bhi.n	80059b8 <HAL_TIM_ConfigClockSource+0x16c>
 80058e0:	2b20      	cmp	r3, #32
 80058e2:	d060      	beq.n	80059a6 <HAL_TIM_ConfigClockSource+0x15a>
 80058e4:	2b20      	cmp	r3, #32
 80058e6:	d867      	bhi.n	80059b8 <HAL_TIM_ConfigClockSource+0x16c>
 80058e8:	2b00      	cmp	r3, #0
 80058ea:	d05c      	beq.n	80059a6 <HAL_TIM_ConfigClockSource+0x15a>
 80058ec:	2b10      	cmp	r3, #16
 80058ee:	d05a      	beq.n	80059a6 <HAL_TIM_ConfigClockSource+0x15a>
 80058f0:	e062      	b.n	80059b8 <HAL_TIM_ConfigClockSource+0x16c>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 80058f2:	687b      	ldr	r3, [r7, #4]
 80058f4:	6818      	ldr	r0, [r3, #0]
 80058f6:	683b      	ldr	r3, [r7, #0]
 80058f8:	6899      	ldr	r1, [r3, #8]
 80058fa:	683b      	ldr	r3, [r7, #0]
 80058fc:	685a      	ldr	r2, [r3, #4]
 80058fe:	683b      	ldr	r3, [r7, #0]
 8005900:	68db      	ldr	r3, [r3, #12]
 8005902:	f000 f9ad 	bl	8005c60 <TIM_ETR_SetConfig>
                        sClockSourceConfig->ClockPrescaler,
                        sClockSourceConfig->ClockPolarity,
                        sClockSourceConfig->ClockFilter);

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 8005906:	687b      	ldr	r3, [r7, #4]
 8005908:	681b      	ldr	r3, [r3, #0]
 800590a:	689b      	ldr	r3, [r3, #8]
 800590c:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 800590e:	68bb      	ldr	r3, [r7, #8]
 8005910:	f043 0377 	orr.w	r3, r3, #119	; 0x77
 8005914:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 8005916:	687b      	ldr	r3, [r7, #4]
 8005918:	681b      	ldr	r3, [r3, #0]
 800591a:	68ba      	ldr	r2, [r7, #8]
 800591c:	609a      	str	r2, [r3, #8]
      break;
 800591e:	e04f      	b.n	80059c0 <HAL_TIM_ConfigClockSource+0x174>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8005920:	687b      	ldr	r3, [r7, #4]
 8005922:	6818      	ldr	r0, [r3, #0]
 8005924:	683b      	ldr	r3, [r7, #0]
 8005926:	6899      	ldr	r1, [r3, #8]
 8005928:	683b      	ldr	r3, [r7, #0]
 800592a:	685a      	ldr	r2, [r3, #4]
 800592c:	683b      	ldr	r3, [r7, #0]
 800592e:	68db      	ldr	r3, [r3, #12]
 8005930:	f000 f996 	bl	8005c60 <TIM_ETR_SetConfig>
                        sClockSourceConfig->ClockPrescaler,
                        sClockSourceConfig->ClockPolarity,
                        sClockSourceConfig->ClockFilter);
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 8005934:	687b      	ldr	r3, [r7, #4]
 8005936:	681b      	ldr	r3, [r3, #0]
 8005938:	689a      	ldr	r2, [r3, #8]
 800593a:	687b      	ldr	r3, [r7, #4]
 800593c:	681b      	ldr	r3, [r3, #0]
 800593e:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8005942:	609a      	str	r2, [r3, #8]
      break;
 8005944:	e03c      	b.n	80059c0 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8005946:	687b      	ldr	r3, [r7, #4]
 8005948:	6818      	ldr	r0, [r3, #0]
 800594a:	683b      	ldr	r3, [r7, #0]
 800594c:	6859      	ldr	r1, [r3, #4]
 800594e:	683b      	ldr	r3, [r7, #0]
 8005950:	68db      	ldr	r3, [r3, #12]
 8005952:	461a      	mov	r2, r3
 8005954:	f000 f90a 	bl	8005b6c <TIM_TI1_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 8005958:	687b      	ldr	r3, [r7, #4]
 800595a:	681b      	ldr	r3, [r3, #0]
 800595c:	2150      	movs	r1, #80	; 0x50
 800595e:	4618      	mov	r0, r3
 8005960:	f000 f963 	bl	8005c2a <TIM_ITRx_SetConfig>
      break;
 8005964:	e02c      	b.n	80059c0 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 8005966:	687b      	ldr	r3, [r7, #4]
 8005968:	6818      	ldr	r0, [r3, #0]
 800596a:	683b      	ldr	r3, [r7, #0]
 800596c:	6859      	ldr	r1, [r3, #4]
 800596e:	683b      	ldr	r3, [r7, #0]
 8005970:	68db      	ldr	r3, [r3, #12]
 8005972:	461a      	mov	r2, r3
 8005974:	f000 f929 	bl	8005bca <TIM_TI2_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 8005978:	687b      	ldr	r3, [r7, #4]
 800597a:	681b      	ldr	r3, [r3, #0]
 800597c:	2160      	movs	r1, #96	; 0x60
 800597e:	4618      	mov	r0, r3
 8005980:	f000 f953 	bl	8005c2a <TIM_ITRx_SetConfig>
      break;
 8005984:	e01c      	b.n	80059c0 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8005986:	687b      	ldr	r3, [r7, #4]
 8005988:	6818      	ldr	r0, [r3, #0]
 800598a:	683b      	ldr	r3, [r7, #0]
 800598c:	6859      	ldr	r1, [r3, #4]
 800598e:	683b      	ldr	r3, [r7, #0]
 8005990:	68db      	ldr	r3, [r3, #12]
 8005992:	461a      	mov	r2, r3
 8005994:	f000 f8ea 	bl	8005b6c <TIM_TI1_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 8005998:	687b      	ldr	r3, [r7, #4]
 800599a:	681b      	ldr	r3, [r3, #0]
 800599c:	2140      	movs	r1, #64	; 0x40
 800599e:	4618      	mov	r0, r3
 80059a0:	f000 f943 	bl	8005c2a <TIM_ITRx_SetConfig>
      break;
 80059a4:	e00c      	b.n	80059c0 <HAL_TIM_ConfigClockSource+0x174>
    case TIM_CLOCKSOURCE_ITR3:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_ITRX_INSTANCE(htim->Instance));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 80059a6:	687b      	ldr	r3, [r7, #4]
 80059a8:	681a      	ldr	r2, [r3, #0]
 80059aa:	683b      	ldr	r3, [r7, #0]
 80059ac:	681b      	ldr	r3, [r3, #0]
 80059ae:	4619      	mov	r1, r3
 80059b0:	4610      	mov	r0, r2
 80059b2:	f000 f93a 	bl	8005c2a <TIM_ITRx_SetConfig>
      break;
 80059b6:	e003      	b.n	80059c0 <HAL_TIM_ConfigClockSource+0x174>
    }

    default:
      status = HAL_ERROR;
 80059b8:	2301      	movs	r3, #1
 80059ba:	73fb      	strb	r3, [r7, #15]
      break;
 80059bc:	e000      	b.n	80059c0 <HAL_TIM_ConfigClockSource+0x174>
      break;
 80059be:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 80059c0:	687b      	ldr	r3, [r7, #4]
 80059c2:	2201      	movs	r2, #1
 80059c4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 80059c8:	687b      	ldr	r3, [r7, #4]
 80059ca:	2200      	movs	r2, #0
 80059cc:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 80059d0:	7bfb      	ldrb	r3, [r7, #15]
}
 80059d2:	4618      	mov	r0, r3
 80059d4:	3710      	adds	r7, #16
 80059d6:	46bd      	mov	sp, r7
 80059d8:	bd80      	pop	{r7, pc}

080059da <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 80059da:	b480      	push	{r7}
 80059dc:	b083      	sub	sp, #12
 80059de:	af00      	add	r7, sp, #0
 80059e0:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 80059e2:	bf00      	nop
 80059e4:	370c      	adds	r7, #12
 80059e6:	46bd      	mov	sp, r7
 80059e8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80059ec:	4770      	bx	lr

080059ee <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 80059ee:	b480      	push	{r7}
 80059f0:	b083      	sub	sp, #12
 80059f2:	af00      	add	r7, sp, #0
 80059f4:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 80059f6:	bf00      	nop
 80059f8:	370c      	adds	r7, #12
 80059fa:	46bd      	mov	sp, r7
 80059fc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005a00:	4770      	bx	lr

08005a02 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 8005a02:	b480      	push	{r7}
 8005a04:	b083      	sub	sp, #12
 8005a06:	af00      	add	r7, sp, #0
 8005a08:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 8005a0a:	bf00      	nop
 8005a0c:	370c      	adds	r7, #12
 8005a0e:	46bd      	mov	sp, r7
 8005a10:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005a14:	4770      	bx	lr

08005a16 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 8005a16:	b480      	push	{r7}
 8005a18:	b083      	sub	sp, #12
 8005a1a:	af00      	add	r7, sp, #0
 8005a1c:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 8005a1e:	bf00      	nop
 8005a20:	370c      	adds	r7, #12
 8005a22:	46bd      	mov	sp, r7
 8005a24:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005a28:	4770      	bx	lr
	...

08005a2c <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 8005a2c:	b480      	push	{r7}
 8005a2e:	b085      	sub	sp, #20
 8005a30:	af00      	add	r7, sp, #0
 8005a32:	6078      	str	r0, [r7, #4]
 8005a34:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8005a36:	687b      	ldr	r3, [r7, #4]
 8005a38:	681b      	ldr	r3, [r3, #0]
 8005a3a:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8005a3c:	687b      	ldr	r3, [r7, #4]
 8005a3e:	4a40      	ldr	r2, [pc, #256]	; (8005b40 <TIM_Base_SetConfig+0x114>)
 8005a40:	4293      	cmp	r3, r2
 8005a42:	d013      	beq.n	8005a6c <TIM_Base_SetConfig+0x40>
 8005a44:	687b      	ldr	r3, [r7, #4]
 8005a46:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8005a4a:	d00f      	beq.n	8005a6c <TIM_Base_SetConfig+0x40>
 8005a4c:	687b      	ldr	r3, [r7, #4]
 8005a4e:	4a3d      	ldr	r2, [pc, #244]	; (8005b44 <TIM_Base_SetConfig+0x118>)
 8005a50:	4293      	cmp	r3, r2
 8005a52:	d00b      	beq.n	8005a6c <TIM_Base_SetConfig+0x40>
 8005a54:	687b      	ldr	r3, [r7, #4]
 8005a56:	4a3c      	ldr	r2, [pc, #240]	; (8005b48 <TIM_Base_SetConfig+0x11c>)
 8005a58:	4293      	cmp	r3, r2
 8005a5a:	d007      	beq.n	8005a6c <TIM_Base_SetConfig+0x40>
 8005a5c:	687b      	ldr	r3, [r7, #4]
 8005a5e:	4a3b      	ldr	r2, [pc, #236]	; (8005b4c <TIM_Base_SetConfig+0x120>)
 8005a60:	4293      	cmp	r3, r2
 8005a62:	d003      	beq.n	8005a6c <TIM_Base_SetConfig+0x40>
 8005a64:	687b      	ldr	r3, [r7, #4]
 8005a66:	4a3a      	ldr	r2, [pc, #232]	; (8005b50 <TIM_Base_SetConfig+0x124>)
 8005a68:	4293      	cmp	r3, r2
 8005a6a:	d108      	bne.n	8005a7e <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8005a6c:	68fb      	ldr	r3, [r7, #12]
 8005a6e:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8005a72:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8005a74:	683b      	ldr	r3, [r7, #0]
 8005a76:	685b      	ldr	r3, [r3, #4]
 8005a78:	68fa      	ldr	r2, [r7, #12]
 8005a7a:	4313      	orrs	r3, r2
 8005a7c:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8005a7e:	687b      	ldr	r3, [r7, #4]
 8005a80:	4a2f      	ldr	r2, [pc, #188]	; (8005b40 <TIM_Base_SetConfig+0x114>)
 8005a82:	4293      	cmp	r3, r2
 8005a84:	d02b      	beq.n	8005ade <TIM_Base_SetConfig+0xb2>
 8005a86:	687b      	ldr	r3, [r7, #4]
 8005a88:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8005a8c:	d027      	beq.n	8005ade <TIM_Base_SetConfig+0xb2>
 8005a8e:	687b      	ldr	r3, [r7, #4]
 8005a90:	4a2c      	ldr	r2, [pc, #176]	; (8005b44 <TIM_Base_SetConfig+0x118>)
 8005a92:	4293      	cmp	r3, r2
 8005a94:	d023      	beq.n	8005ade <TIM_Base_SetConfig+0xb2>
 8005a96:	687b      	ldr	r3, [r7, #4]
 8005a98:	4a2b      	ldr	r2, [pc, #172]	; (8005b48 <TIM_Base_SetConfig+0x11c>)
 8005a9a:	4293      	cmp	r3, r2
 8005a9c:	d01f      	beq.n	8005ade <TIM_Base_SetConfig+0xb2>
 8005a9e:	687b      	ldr	r3, [r7, #4]
 8005aa0:	4a2a      	ldr	r2, [pc, #168]	; (8005b4c <TIM_Base_SetConfig+0x120>)
 8005aa2:	4293      	cmp	r3, r2
 8005aa4:	d01b      	beq.n	8005ade <TIM_Base_SetConfig+0xb2>
 8005aa6:	687b      	ldr	r3, [r7, #4]
 8005aa8:	4a29      	ldr	r2, [pc, #164]	; (8005b50 <TIM_Base_SetConfig+0x124>)
 8005aaa:	4293      	cmp	r3, r2
 8005aac:	d017      	beq.n	8005ade <TIM_Base_SetConfig+0xb2>
 8005aae:	687b      	ldr	r3, [r7, #4]
 8005ab0:	4a28      	ldr	r2, [pc, #160]	; (8005b54 <TIM_Base_SetConfig+0x128>)
 8005ab2:	4293      	cmp	r3, r2
 8005ab4:	d013      	beq.n	8005ade <TIM_Base_SetConfig+0xb2>
 8005ab6:	687b      	ldr	r3, [r7, #4]
 8005ab8:	4a27      	ldr	r2, [pc, #156]	; (8005b58 <TIM_Base_SetConfig+0x12c>)
 8005aba:	4293      	cmp	r3, r2
 8005abc:	d00f      	beq.n	8005ade <TIM_Base_SetConfig+0xb2>
 8005abe:	687b      	ldr	r3, [r7, #4]
 8005ac0:	4a26      	ldr	r2, [pc, #152]	; (8005b5c <TIM_Base_SetConfig+0x130>)
 8005ac2:	4293      	cmp	r3, r2
 8005ac4:	d00b      	beq.n	8005ade <TIM_Base_SetConfig+0xb2>
 8005ac6:	687b      	ldr	r3, [r7, #4]
 8005ac8:	4a25      	ldr	r2, [pc, #148]	; (8005b60 <TIM_Base_SetConfig+0x134>)
 8005aca:	4293      	cmp	r3, r2
 8005acc:	d007      	beq.n	8005ade <TIM_Base_SetConfig+0xb2>
 8005ace:	687b      	ldr	r3, [r7, #4]
 8005ad0:	4a24      	ldr	r2, [pc, #144]	; (8005b64 <TIM_Base_SetConfig+0x138>)
 8005ad2:	4293      	cmp	r3, r2
 8005ad4:	d003      	beq.n	8005ade <TIM_Base_SetConfig+0xb2>
 8005ad6:	687b      	ldr	r3, [r7, #4]
 8005ad8:	4a23      	ldr	r2, [pc, #140]	; (8005b68 <TIM_Base_SetConfig+0x13c>)
 8005ada:	4293      	cmp	r3, r2
 8005adc:	d108      	bne.n	8005af0 <TIM_Base_SetConfig+0xc4>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8005ade:	68fb      	ldr	r3, [r7, #12]
 8005ae0:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8005ae4:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8005ae6:	683b      	ldr	r3, [r7, #0]
 8005ae8:	68db      	ldr	r3, [r3, #12]
 8005aea:	68fa      	ldr	r2, [r7, #12]
 8005aec:	4313      	orrs	r3, r2
 8005aee:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8005af0:	68fb      	ldr	r3, [r7, #12]
 8005af2:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 8005af6:	683b      	ldr	r3, [r7, #0]
 8005af8:	695b      	ldr	r3, [r3, #20]
 8005afa:	4313      	orrs	r3, r2
 8005afc:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8005afe:	687b      	ldr	r3, [r7, #4]
 8005b00:	68fa      	ldr	r2, [r7, #12]
 8005b02:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8005b04:	683b      	ldr	r3, [r7, #0]
 8005b06:	689a      	ldr	r2, [r3, #8]
 8005b08:	687b      	ldr	r3, [r7, #4]
 8005b0a:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8005b0c:	683b      	ldr	r3, [r7, #0]
 8005b0e:	681a      	ldr	r2, [r3, #0]
 8005b10:	687b      	ldr	r3, [r7, #4]
 8005b12:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8005b14:	687b      	ldr	r3, [r7, #4]
 8005b16:	4a0a      	ldr	r2, [pc, #40]	; (8005b40 <TIM_Base_SetConfig+0x114>)
 8005b18:	4293      	cmp	r3, r2
 8005b1a:	d003      	beq.n	8005b24 <TIM_Base_SetConfig+0xf8>
 8005b1c:	687b      	ldr	r3, [r7, #4]
 8005b1e:	4a0c      	ldr	r2, [pc, #48]	; (8005b50 <TIM_Base_SetConfig+0x124>)
 8005b20:	4293      	cmp	r3, r2
 8005b22:	d103      	bne.n	8005b2c <TIM_Base_SetConfig+0x100>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8005b24:	683b      	ldr	r3, [r7, #0]
 8005b26:	691a      	ldr	r2, [r3, #16]
 8005b28:	687b      	ldr	r3, [r7, #4]
 8005b2a:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8005b2c:	687b      	ldr	r3, [r7, #4]
 8005b2e:	2201      	movs	r2, #1
 8005b30:	615a      	str	r2, [r3, #20]
}
 8005b32:	bf00      	nop
 8005b34:	3714      	adds	r7, #20
 8005b36:	46bd      	mov	sp, r7
 8005b38:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005b3c:	4770      	bx	lr
 8005b3e:	bf00      	nop
 8005b40:	40010000 	.word	0x40010000
 8005b44:	40000400 	.word	0x40000400
 8005b48:	40000800 	.word	0x40000800
 8005b4c:	40000c00 	.word	0x40000c00
 8005b50:	40010400 	.word	0x40010400
 8005b54:	40014000 	.word	0x40014000
 8005b58:	40014400 	.word	0x40014400
 8005b5c:	40014800 	.word	0x40014800
 8005b60:	40001800 	.word	0x40001800
 8005b64:	40001c00 	.word	0x40001c00
 8005b68:	40002000 	.word	0x40002000

08005b6c <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8005b6c:	b480      	push	{r7}
 8005b6e:	b087      	sub	sp, #28
 8005b70:	af00      	add	r7, sp, #0
 8005b72:	60f8      	str	r0, [r7, #12]
 8005b74:	60b9      	str	r1, [r7, #8]
 8005b76:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 8005b78:	68fb      	ldr	r3, [r7, #12]
 8005b7a:	6a1b      	ldr	r3, [r3, #32]
 8005b7c:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8005b7e:	68fb      	ldr	r3, [r7, #12]
 8005b80:	6a1b      	ldr	r3, [r3, #32]
 8005b82:	f023 0201 	bic.w	r2, r3, #1
 8005b86:	68fb      	ldr	r3, [r7, #12]
 8005b88:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8005b8a:	68fb      	ldr	r3, [r7, #12]
 8005b8c:	699b      	ldr	r3, [r3, #24]
 8005b8e:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8005b90:	693b      	ldr	r3, [r7, #16]
 8005b92:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8005b96:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 8005b98:	687b      	ldr	r3, [r7, #4]
 8005b9a:	011b      	lsls	r3, r3, #4
 8005b9c:	693a      	ldr	r2, [r7, #16]
 8005b9e:	4313      	orrs	r3, r2
 8005ba0:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 8005ba2:	697b      	ldr	r3, [r7, #20]
 8005ba4:	f023 030a 	bic.w	r3, r3, #10
 8005ba8:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 8005baa:	697a      	ldr	r2, [r7, #20]
 8005bac:	68bb      	ldr	r3, [r7, #8]
 8005bae:	4313      	orrs	r3, r2
 8005bb0:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 8005bb2:	68fb      	ldr	r3, [r7, #12]
 8005bb4:	693a      	ldr	r2, [r7, #16]
 8005bb6:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8005bb8:	68fb      	ldr	r3, [r7, #12]
 8005bba:	697a      	ldr	r2, [r7, #20]
 8005bbc:	621a      	str	r2, [r3, #32]
}
 8005bbe:	bf00      	nop
 8005bc0:	371c      	adds	r7, #28
 8005bc2:	46bd      	mov	sp, r7
 8005bc4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005bc8:	4770      	bx	lr

08005bca <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8005bca:	b480      	push	{r7}
 8005bcc:	b087      	sub	sp, #28
 8005bce:	af00      	add	r7, sp, #0
 8005bd0:	60f8      	str	r0, [r7, #12]
 8005bd2:	60b9      	str	r1, [r7, #8]
 8005bd4:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8005bd6:	68fb      	ldr	r3, [r7, #12]
 8005bd8:	6a1b      	ldr	r3, [r3, #32]
 8005bda:	f023 0210 	bic.w	r2, r3, #16
 8005bde:	68fb      	ldr	r3, [r7, #12]
 8005be0:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8005be2:	68fb      	ldr	r3, [r7, #12]
 8005be4:	699b      	ldr	r3, [r3, #24]
 8005be6:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 8005be8:	68fb      	ldr	r3, [r7, #12]
 8005bea:	6a1b      	ldr	r3, [r3, #32]
 8005bec:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 8005bee:	697b      	ldr	r3, [r7, #20]
 8005bf0:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 8005bf4:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 8005bf6:	687b      	ldr	r3, [r7, #4]
 8005bf8:	031b      	lsls	r3, r3, #12
 8005bfa:	697a      	ldr	r2, [r7, #20]
 8005bfc:	4313      	orrs	r3, r2
 8005bfe:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 8005c00:	693b      	ldr	r3, [r7, #16]
 8005c02:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 8005c06:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity << 4U);
 8005c08:	68bb      	ldr	r3, [r7, #8]
 8005c0a:	011b      	lsls	r3, r3, #4
 8005c0c:	693a      	ldr	r2, [r7, #16]
 8005c0e:	4313      	orrs	r3, r2
 8005c10:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 8005c12:	68fb      	ldr	r3, [r7, #12]
 8005c14:	697a      	ldr	r2, [r7, #20]
 8005c16:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8005c18:	68fb      	ldr	r3, [r7, #12]
 8005c1a:	693a      	ldr	r2, [r7, #16]
 8005c1c:	621a      	str	r2, [r3, #32]
}
 8005c1e:	bf00      	nop
 8005c20:	371c      	adds	r7, #28
 8005c22:	46bd      	mov	sp, r7
 8005c24:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005c28:	4770      	bx	lr

08005c2a <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 8005c2a:	b480      	push	{r7}
 8005c2c:	b085      	sub	sp, #20
 8005c2e:	af00      	add	r7, sp, #0
 8005c30:	6078      	str	r0, [r7, #4]
 8005c32:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 8005c34:	687b      	ldr	r3, [r7, #4]
 8005c36:	689b      	ldr	r3, [r3, #8]
 8005c38:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 8005c3a:	68fb      	ldr	r3, [r7, #12]
 8005c3c:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8005c40:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 8005c42:	683a      	ldr	r2, [r7, #0]
 8005c44:	68fb      	ldr	r3, [r7, #12]
 8005c46:	4313      	orrs	r3, r2
 8005c48:	f043 0307 	orr.w	r3, r3, #7
 8005c4c:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8005c4e:	687b      	ldr	r3, [r7, #4]
 8005c50:	68fa      	ldr	r2, [r7, #12]
 8005c52:	609a      	str	r2, [r3, #8]
}
 8005c54:	bf00      	nop
 8005c56:	3714      	adds	r7, #20
 8005c58:	46bd      	mov	sp, r7
 8005c5a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005c5e:	4770      	bx	lr

08005c60 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 8005c60:	b480      	push	{r7}
 8005c62:	b087      	sub	sp, #28
 8005c64:	af00      	add	r7, sp, #0
 8005c66:	60f8      	str	r0, [r7, #12]
 8005c68:	60b9      	str	r1, [r7, #8]
 8005c6a:	607a      	str	r2, [r7, #4]
 8005c6c:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 8005c6e:	68fb      	ldr	r3, [r7, #12]
 8005c70:	689b      	ldr	r3, [r3, #8]
 8005c72:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8005c74:	697b      	ldr	r3, [r7, #20]
 8005c76:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8005c7a:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 8005c7c:	683b      	ldr	r3, [r7, #0]
 8005c7e:	021a      	lsls	r2, r3, #8
 8005c80:	687b      	ldr	r3, [r7, #4]
 8005c82:	431a      	orrs	r2, r3
 8005c84:	68bb      	ldr	r3, [r7, #8]
 8005c86:	4313      	orrs	r3, r2
 8005c88:	697a      	ldr	r2, [r7, #20]
 8005c8a:	4313      	orrs	r3, r2
 8005c8c:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8005c8e:	68fb      	ldr	r3, [r7, #12]
 8005c90:	697a      	ldr	r2, [r7, #20]
 8005c92:	609a      	str	r2, [r3, #8]
}
 8005c94:	bf00      	nop
 8005c96:	371c      	adds	r7, #28
 8005c98:	46bd      	mov	sp, r7
 8005c9a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005c9e:	4770      	bx	lr

08005ca0 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        TIM_MasterConfigTypeDef *sMasterConfig)
{
 8005ca0:	b480      	push	{r7}
 8005ca2:	b085      	sub	sp, #20
 8005ca4:	af00      	add	r7, sp, #0
 8005ca6:	6078      	str	r0, [r7, #4]
 8005ca8:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 8005caa:	687b      	ldr	r3, [r7, #4]
 8005cac:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8005cb0:	2b01      	cmp	r3, #1
 8005cb2:	d101      	bne.n	8005cb8 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8005cb4:	2302      	movs	r3, #2
 8005cb6:	e05a      	b.n	8005d6e <HAL_TIMEx_MasterConfigSynchronization+0xce>
 8005cb8:	687b      	ldr	r3, [r7, #4]
 8005cba:	2201      	movs	r2, #1
 8005cbc:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8005cc0:	687b      	ldr	r3, [r7, #4]
 8005cc2:	2202      	movs	r2, #2
 8005cc4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8005cc8:	687b      	ldr	r3, [r7, #4]
 8005cca:	681b      	ldr	r3, [r3, #0]
 8005ccc:	685b      	ldr	r3, [r3, #4]
 8005cce:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8005cd0:	687b      	ldr	r3, [r7, #4]
 8005cd2:	681b      	ldr	r3, [r3, #0]
 8005cd4:	689b      	ldr	r3, [r3, #8]
 8005cd6:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8005cd8:	68fb      	ldr	r3, [r7, #12]
 8005cda:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8005cde:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8005ce0:	683b      	ldr	r3, [r7, #0]
 8005ce2:	681b      	ldr	r3, [r3, #0]
 8005ce4:	68fa      	ldr	r2, [r7, #12]
 8005ce6:	4313      	orrs	r3, r2
 8005ce8:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 8005cea:	687b      	ldr	r3, [r7, #4]
 8005cec:	681b      	ldr	r3, [r3, #0]
 8005cee:	68fa      	ldr	r2, [r7, #12]
 8005cf0:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8005cf2:	687b      	ldr	r3, [r7, #4]
 8005cf4:	681b      	ldr	r3, [r3, #0]
 8005cf6:	4a21      	ldr	r2, [pc, #132]	; (8005d7c <HAL_TIMEx_MasterConfigSynchronization+0xdc>)
 8005cf8:	4293      	cmp	r3, r2
 8005cfa:	d022      	beq.n	8005d42 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8005cfc:	687b      	ldr	r3, [r7, #4]
 8005cfe:	681b      	ldr	r3, [r3, #0]
 8005d00:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8005d04:	d01d      	beq.n	8005d42 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8005d06:	687b      	ldr	r3, [r7, #4]
 8005d08:	681b      	ldr	r3, [r3, #0]
 8005d0a:	4a1d      	ldr	r2, [pc, #116]	; (8005d80 <HAL_TIMEx_MasterConfigSynchronization+0xe0>)
 8005d0c:	4293      	cmp	r3, r2
 8005d0e:	d018      	beq.n	8005d42 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8005d10:	687b      	ldr	r3, [r7, #4]
 8005d12:	681b      	ldr	r3, [r3, #0]
 8005d14:	4a1b      	ldr	r2, [pc, #108]	; (8005d84 <HAL_TIMEx_MasterConfigSynchronization+0xe4>)
 8005d16:	4293      	cmp	r3, r2
 8005d18:	d013      	beq.n	8005d42 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8005d1a:	687b      	ldr	r3, [r7, #4]
 8005d1c:	681b      	ldr	r3, [r3, #0]
 8005d1e:	4a1a      	ldr	r2, [pc, #104]	; (8005d88 <HAL_TIMEx_MasterConfigSynchronization+0xe8>)
 8005d20:	4293      	cmp	r3, r2
 8005d22:	d00e      	beq.n	8005d42 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8005d24:	687b      	ldr	r3, [r7, #4]
 8005d26:	681b      	ldr	r3, [r3, #0]
 8005d28:	4a18      	ldr	r2, [pc, #96]	; (8005d8c <HAL_TIMEx_MasterConfigSynchronization+0xec>)
 8005d2a:	4293      	cmp	r3, r2
 8005d2c:	d009      	beq.n	8005d42 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8005d2e:	687b      	ldr	r3, [r7, #4]
 8005d30:	681b      	ldr	r3, [r3, #0]
 8005d32:	4a17      	ldr	r2, [pc, #92]	; (8005d90 <HAL_TIMEx_MasterConfigSynchronization+0xf0>)
 8005d34:	4293      	cmp	r3, r2
 8005d36:	d004      	beq.n	8005d42 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8005d38:	687b      	ldr	r3, [r7, #4]
 8005d3a:	681b      	ldr	r3, [r3, #0]
 8005d3c:	4a15      	ldr	r2, [pc, #84]	; (8005d94 <HAL_TIMEx_MasterConfigSynchronization+0xf4>)
 8005d3e:	4293      	cmp	r3, r2
 8005d40:	d10c      	bne.n	8005d5c <HAL_TIMEx_MasterConfigSynchronization+0xbc>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 8005d42:	68bb      	ldr	r3, [r7, #8]
 8005d44:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8005d48:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8005d4a:	683b      	ldr	r3, [r7, #0]
 8005d4c:	685b      	ldr	r3, [r3, #4]
 8005d4e:	68ba      	ldr	r2, [r7, #8]
 8005d50:	4313      	orrs	r3, r2
 8005d52:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8005d54:	687b      	ldr	r3, [r7, #4]
 8005d56:	681b      	ldr	r3, [r3, #0]
 8005d58:	68ba      	ldr	r2, [r7, #8]
 8005d5a:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8005d5c:	687b      	ldr	r3, [r7, #4]
 8005d5e:	2201      	movs	r2, #1
 8005d60:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8005d64:	687b      	ldr	r3, [r7, #4]
 8005d66:	2200      	movs	r2, #0
 8005d68:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8005d6c:	2300      	movs	r3, #0
}
 8005d6e:	4618      	mov	r0, r3
 8005d70:	3714      	adds	r7, #20
 8005d72:	46bd      	mov	sp, r7
 8005d74:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005d78:	4770      	bx	lr
 8005d7a:	bf00      	nop
 8005d7c:	40010000 	.word	0x40010000
 8005d80:	40000400 	.word	0x40000400
 8005d84:	40000800 	.word	0x40000800
 8005d88:	40000c00 	.word	0x40000c00
 8005d8c:	40010400 	.word	0x40010400
 8005d90:	40014000 	.word	0x40014000
 8005d94:	40001800 	.word	0x40001800

08005d98 <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 8005d98:	b480      	push	{r7}
 8005d9a:	b083      	sub	sp, #12
 8005d9c:	af00      	add	r7, sp, #0
 8005d9e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 8005da0:	bf00      	nop
 8005da2:	370c      	adds	r7, #12
 8005da4:	46bd      	mov	sp, r7
 8005da6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005daa:	4770      	bx	lr

08005dac <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 8005dac:	b480      	push	{r7}
 8005dae:	b083      	sub	sp, #12
 8005db0:	af00      	add	r7, sp, #0
 8005db2:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 8005db4:	bf00      	nop
 8005db6:	370c      	adds	r7, #12
 8005db8:	46bd      	mov	sp, r7
 8005dba:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005dbe:	4770      	bx	lr

08005dc0 <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8005dc0:	b580      	push	{r7, lr}
 8005dc2:	b082      	sub	sp, #8
 8005dc4:	af00      	add	r7, sp, #0
 8005dc6:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8005dc8:	687b      	ldr	r3, [r7, #4]
 8005dca:	2b00      	cmp	r3, #0
 8005dcc:	d101      	bne.n	8005dd2 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8005dce:	2301      	movs	r3, #1
 8005dd0:	e03f      	b.n	8005e52 <HAL_UART_Init+0x92>
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));

  if (huart->gState == HAL_UART_STATE_RESET)
 8005dd2:	687b      	ldr	r3, [r7, #4]
 8005dd4:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8005dd8:	b2db      	uxtb	r3, r3
 8005dda:	2b00      	cmp	r3, #0
 8005ddc:	d106      	bne.n	8005dec <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8005dde:	687b      	ldr	r3, [r7, #4]
 8005de0:	2200      	movs	r2, #0
 8005de2:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8005de6:	6878      	ldr	r0, [r7, #4]
 8005de8:	f7fb fbae 	bl	8001548 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8005dec:	687b      	ldr	r3, [r7, #4]
 8005dee:	2224      	movs	r2, #36	; 0x24
 8005df0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 8005df4:	687b      	ldr	r3, [r7, #4]
 8005df6:	681b      	ldr	r3, [r3, #0]
 8005df8:	68da      	ldr	r2, [r3, #12]
 8005dfa:	687b      	ldr	r3, [r7, #4]
 8005dfc:	681b      	ldr	r3, [r3, #0]
 8005dfe:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8005e02:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 8005e04:	6878      	ldr	r0, [r7, #4]
 8005e06:	f000 f929 	bl	800605c <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8005e0a:	687b      	ldr	r3, [r7, #4]
 8005e0c:	681b      	ldr	r3, [r3, #0]
 8005e0e:	691a      	ldr	r2, [r3, #16]
 8005e10:	687b      	ldr	r3, [r7, #4]
 8005e12:	681b      	ldr	r3, [r3, #0]
 8005e14:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 8005e18:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8005e1a:	687b      	ldr	r3, [r7, #4]
 8005e1c:	681b      	ldr	r3, [r3, #0]
 8005e1e:	695a      	ldr	r2, [r3, #20]
 8005e20:	687b      	ldr	r3, [r7, #4]
 8005e22:	681b      	ldr	r3, [r3, #0]
 8005e24:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 8005e28:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 8005e2a:	687b      	ldr	r3, [r7, #4]
 8005e2c:	681b      	ldr	r3, [r3, #0]
 8005e2e:	68da      	ldr	r2, [r3, #12]
 8005e30:	687b      	ldr	r3, [r7, #4]
 8005e32:	681b      	ldr	r3, [r3, #0]
 8005e34:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8005e38:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8005e3a:	687b      	ldr	r3, [r7, #4]
 8005e3c:	2200      	movs	r2, #0
 8005e3e:	641a      	str	r2, [r3, #64]	; 0x40
  huart->gState = HAL_UART_STATE_READY;
 8005e40:	687b      	ldr	r3, [r7, #4]
 8005e42:	2220      	movs	r2, #32
 8005e44:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  huart->RxState = HAL_UART_STATE_READY;
 8005e48:	687b      	ldr	r3, [r7, #4]
 8005e4a:	2220      	movs	r2, #32
 8005e4c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 8005e50:	2300      	movs	r3, #0
}
 8005e52:	4618      	mov	r0, r3
 8005e54:	3708      	adds	r7, #8
 8005e56:	46bd      	mov	sp, r7
 8005e58:	bd80      	pop	{r7, pc}

08005e5a <HAL_UART_Transmit>:
  * @param  Size  Amount of data elements (u8 or u16) to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8005e5a:	b580      	push	{r7, lr}
 8005e5c:	b08a      	sub	sp, #40	; 0x28
 8005e5e:	af02      	add	r7, sp, #8
 8005e60:	60f8      	str	r0, [r7, #12]
 8005e62:	60b9      	str	r1, [r7, #8]
 8005e64:	603b      	str	r3, [r7, #0]
 8005e66:	4613      	mov	r3, r2
 8005e68:	80fb      	strh	r3, [r7, #6]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart = 0U;
 8005e6a:	2300      	movs	r3, #0
 8005e6c:	617b      	str	r3, [r7, #20]

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8005e6e:	68fb      	ldr	r3, [r7, #12]
 8005e70:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8005e74:	b2db      	uxtb	r3, r3
 8005e76:	2b20      	cmp	r3, #32
 8005e78:	d17c      	bne.n	8005f74 <HAL_UART_Transmit+0x11a>
  {
    if ((pData == NULL) || (Size == 0U))
 8005e7a:	68bb      	ldr	r3, [r7, #8]
 8005e7c:	2b00      	cmp	r3, #0
 8005e7e:	d002      	beq.n	8005e86 <HAL_UART_Transmit+0x2c>
 8005e80:	88fb      	ldrh	r3, [r7, #6]
 8005e82:	2b00      	cmp	r3, #0
 8005e84:	d101      	bne.n	8005e8a <HAL_UART_Transmit+0x30>
    {
      return  HAL_ERROR;
 8005e86:	2301      	movs	r3, #1
 8005e88:	e075      	b.n	8005f76 <HAL_UART_Transmit+0x11c>
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 8005e8a:	68fb      	ldr	r3, [r7, #12]
 8005e8c:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8005e90:	2b01      	cmp	r3, #1
 8005e92:	d101      	bne.n	8005e98 <HAL_UART_Transmit+0x3e>
 8005e94:	2302      	movs	r3, #2
 8005e96:	e06e      	b.n	8005f76 <HAL_UART_Transmit+0x11c>
 8005e98:	68fb      	ldr	r3, [r7, #12]
 8005e9a:	2201      	movs	r2, #1
 8005e9c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8005ea0:	68fb      	ldr	r3, [r7, #12]
 8005ea2:	2200      	movs	r2, #0
 8005ea4:	641a      	str	r2, [r3, #64]	; 0x40
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8005ea6:	68fb      	ldr	r3, [r7, #12]
 8005ea8:	2221      	movs	r2, #33	; 0x21
 8005eaa:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 8005eae:	f7fc f807 	bl	8001ec0 <HAL_GetTick>
 8005eb2:	6178      	str	r0, [r7, #20]

    huart->TxXferSize = Size;
 8005eb4:	68fb      	ldr	r3, [r7, #12]
 8005eb6:	88fa      	ldrh	r2, [r7, #6]
 8005eb8:	849a      	strh	r2, [r3, #36]	; 0x24
    huart->TxXferCount = Size;
 8005eba:	68fb      	ldr	r3, [r7, #12]
 8005ebc:	88fa      	ldrh	r2, [r7, #6]
 8005ebe:	84da      	strh	r2, [r3, #38]	; 0x26

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8005ec0:	68fb      	ldr	r3, [r7, #12]
 8005ec2:	689b      	ldr	r3, [r3, #8]
 8005ec4:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8005ec8:	d108      	bne.n	8005edc <HAL_UART_Transmit+0x82>
 8005eca:	68fb      	ldr	r3, [r7, #12]
 8005ecc:	691b      	ldr	r3, [r3, #16]
 8005ece:	2b00      	cmp	r3, #0
 8005ed0:	d104      	bne.n	8005edc <HAL_UART_Transmit+0x82>
    {
      pdata8bits  = NULL;
 8005ed2:	2300      	movs	r3, #0
 8005ed4:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 8005ed6:	68bb      	ldr	r3, [r7, #8]
 8005ed8:	61bb      	str	r3, [r7, #24]
 8005eda:	e003      	b.n	8005ee4 <HAL_UART_Transmit+0x8a>
    }
    else
    {
      pdata8bits  = pData;
 8005edc:	68bb      	ldr	r3, [r7, #8]
 8005ede:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8005ee0:	2300      	movs	r3, #0
 8005ee2:	61bb      	str	r3, [r7, #24]
    }

    /* Process Unlocked */
    __HAL_UNLOCK(huart);
 8005ee4:	68fb      	ldr	r3, [r7, #12]
 8005ee6:	2200      	movs	r2, #0
 8005ee8:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    while (huart->TxXferCount > 0U)
 8005eec:	e02a      	b.n	8005f44 <HAL_UART_Transmit+0xea>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8005eee:	683b      	ldr	r3, [r7, #0]
 8005ef0:	9300      	str	r3, [sp, #0]
 8005ef2:	697b      	ldr	r3, [r7, #20]
 8005ef4:	2200      	movs	r2, #0
 8005ef6:	2180      	movs	r1, #128	; 0x80
 8005ef8:	68f8      	ldr	r0, [r7, #12]
 8005efa:	f000 f840 	bl	8005f7e <UART_WaitOnFlagUntilTimeout>
 8005efe:	4603      	mov	r3, r0
 8005f00:	2b00      	cmp	r3, #0
 8005f02:	d001      	beq.n	8005f08 <HAL_UART_Transmit+0xae>
      {
        return HAL_TIMEOUT;
 8005f04:	2303      	movs	r3, #3
 8005f06:	e036      	b.n	8005f76 <HAL_UART_Transmit+0x11c>
      }
      if (pdata8bits == NULL)
 8005f08:	69fb      	ldr	r3, [r7, #28]
 8005f0a:	2b00      	cmp	r3, #0
 8005f0c:	d10b      	bne.n	8005f26 <HAL_UART_Transmit+0xcc>
      {
        huart->Instance->DR = (uint16_t)(*pdata16bits & 0x01FFU);
 8005f0e:	69bb      	ldr	r3, [r7, #24]
 8005f10:	881b      	ldrh	r3, [r3, #0]
 8005f12:	461a      	mov	r2, r3
 8005f14:	68fb      	ldr	r3, [r7, #12]
 8005f16:	681b      	ldr	r3, [r3, #0]
 8005f18:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8005f1c:	605a      	str	r2, [r3, #4]
        pdata16bits++;
 8005f1e:	69bb      	ldr	r3, [r7, #24]
 8005f20:	3302      	adds	r3, #2
 8005f22:	61bb      	str	r3, [r7, #24]
 8005f24:	e007      	b.n	8005f36 <HAL_UART_Transmit+0xdc>
      }
      else
      {
        huart->Instance->DR = (uint8_t)(*pdata8bits & 0xFFU);
 8005f26:	69fb      	ldr	r3, [r7, #28]
 8005f28:	781a      	ldrb	r2, [r3, #0]
 8005f2a:	68fb      	ldr	r3, [r7, #12]
 8005f2c:	681b      	ldr	r3, [r3, #0]
 8005f2e:	605a      	str	r2, [r3, #4]
        pdata8bits++;
 8005f30:	69fb      	ldr	r3, [r7, #28]
 8005f32:	3301      	adds	r3, #1
 8005f34:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 8005f36:	68fb      	ldr	r3, [r7, #12]
 8005f38:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 8005f3a:	b29b      	uxth	r3, r3
 8005f3c:	3b01      	subs	r3, #1
 8005f3e:	b29a      	uxth	r2, r3
 8005f40:	68fb      	ldr	r3, [r7, #12]
 8005f42:	84da      	strh	r2, [r3, #38]	; 0x26
    while (huart->TxXferCount > 0U)
 8005f44:	68fb      	ldr	r3, [r7, #12]
 8005f46:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 8005f48:	b29b      	uxth	r3, r3
 8005f4a:	2b00      	cmp	r3, #0
 8005f4c:	d1cf      	bne.n	8005eee <HAL_UART_Transmit+0x94>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 8005f4e:	683b      	ldr	r3, [r7, #0]
 8005f50:	9300      	str	r3, [sp, #0]
 8005f52:	697b      	ldr	r3, [r7, #20]
 8005f54:	2200      	movs	r2, #0
 8005f56:	2140      	movs	r1, #64	; 0x40
 8005f58:	68f8      	ldr	r0, [r7, #12]
 8005f5a:	f000 f810 	bl	8005f7e <UART_WaitOnFlagUntilTimeout>
 8005f5e:	4603      	mov	r3, r0
 8005f60:	2b00      	cmp	r3, #0
 8005f62:	d001      	beq.n	8005f68 <HAL_UART_Transmit+0x10e>
    {
      return HAL_TIMEOUT;
 8005f64:	2303      	movs	r3, #3
 8005f66:	e006      	b.n	8005f76 <HAL_UART_Transmit+0x11c>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 8005f68:	68fb      	ldr	r3, [r7, #12]
 8005f6a:	2220      	movs	r2, #32
 8005f6c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    return HAL_OK;
 8005f70:	2300      	movs	r3, #0
 8005f72:	e000      	b.n	8005f76 <HAL_UART_Transmit+0x11c>
  }
  else
  {
    return HAL_BUSY;
 8005f74:	2302      	movs	r3, #2
  }
}
 8005f76:	4618      	mov	r0, r3
 8005f78:	3720      	adds	r7, #32
 8005f7a:	46bd      	mov	sp, r7
 8005f7c:	bd80      	pop	{r7, pc}

08005f7e <UART_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                                     uint32_t Tickstart, uint32_t Timeout)
{
 8005f7e:	b580      	push	{r7, lr}
 8005f80:	b090      	sub	sp, #64	; 0x40
 8005f82:	af00      	add	r7, sp, #0
 8005f84:	60f8      	str	r0, [r7, #12]
 8005f86:	60b9      	str	r1, [r7, #8]
 8005f88:	603b      	str	r3, [r7, #0]
 8005f8a:	4613      	mov	r3, r2
 8005f8c:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8005f8e:	e050      	b.n	8006032 <UART_WaitOnFlagUntilTimeout+0xb4>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8005f90:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8005f92:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005f96:	d04c      	beq.n	8006032 <UART_WaitOnFlagUntilTimeout+0xb4>
    {
      if ((Timeout == 0U) || ((HAL_GetTick() - Tickstart) > Timeout))
 8005f98:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8005f9a:	2b00      	cmp	r3, #0
 8005f9c:	d007      	beq.n	8005fae <UART_WaitOnFlagUntilTimeout+0x30>
 8005f9e:	f7fb ff8f 	bl	8001ec0 <HAL_GetTick>
 8005fa2:	4602      	mov	r2, r0
 8005fa4:	683b      	ldr	r3, [r7, #0]
 8005fa6:	1ad3      	subs	r3, r2, r3
 8005fa8:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8005faa:	429a      	cmp	r2, r3
 8005fac:	d241      	bcs.n	8006032 <UART_WaitOnFlagUntilTimeout+0xb4>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts for the interrupt process */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 8005fae:	68fb      	ldr	r3, [r7, #12]
 8005fb0:	681b      	ldr	r3, [r3, #0]
 8005fb2:	330c      	adds	r3, #12
 8005fb4:	62bb      	str	r3, [r7, #40]	; 0x28
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005fb6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005fb8:	e853 3f00 	ldrex	r3, [r3]
 8005fbc:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 8005fbe:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005fc0:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 8005fc4:	63fb      	str	r3, [r7, #60]	; 0x3c
 8005fc6:	68fb      	ldr	r3, [r7, #12]
 8005fc8:	681b      	ldr	r3, [r3, #0]
 8005fca:	330c      	adds	r3, #12
 8005fcc:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 8005fce:	637a      	str	r2, [r7, #52]	; 0x34
 8005fd0:	633b      	str	r3, [r7, #48]	; 0x30
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005fd2:	6b39      	ldr	r1, [r7, #48]	; 0x30
 8005fd4:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8005fd6:	e841 2300 	strex	r3, r2, [r1]
 8005fda:	62fb      	str	r3, [r7, #44]	; 0x2c
   return(result);
 8005fdc:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005fde:	2b00      	cmp	r3, #0
 8005fe0:	d1e5      	bne.n	8005fae <UART_WaitOnFlagUntilTimeout+0x30>
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8005fe2:	68fb      	ldr	r3, [r7, #12]
 8005fe4:	681b      	ldr	r3, [r3, #0]
 8005fe6:	3314      	adds	r3, #20
 8005fe8:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005fea:	697b      	ldr	r3, [r7, #20]
 8005fec:	e853 3f00 	ldrex	r3, [r3]
 8005ff0:	613b      	str	r3, [r7, #16]
   return(result);
 8005ff2:	693b      	ldr	r3, [r7, #16]
 8005ff4:	f023 0301 	bic.w	r3, r3, #1
 8005ff8:	63bb      	str	r3, [r7, #56]	; 0x38
 8005ffa:	68fb      	ldr	r3, [r7, #12]
 8005ffc:	681b      	ldr	r3, [r3, #0]
 8005ffe:	3314      	adds	r3, #20
 8006000:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8006002:	623a      	str	r2, [r7, #32]
 8006004:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006006:	69f9      	ldr	r1, [r7, #28]
 8006008:	6a3a      	ldr	r2, [r7, #32]
 800600a:	e841 2300 	strex	r3, r2, [r1]
 800600e:	61bb      	str	r3, [r7, #24]
   return(result);
 8006010:	69bb      	ldr	r3, [r7, #24]
 8006012:	2b00      	cmp	r3, #0
 8006014:	d1e5      	bne.n	8005fe2 <UART_WaitOnFlagUntilTimeout+0x64>

        huart->gState  = HAL_UART_STATE_READY;
 8006016:	68fb      	ldr	r3, [r7, #12]
 8006018:	2220      	movs	r2, #32
 800601a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        huart->RxState = HAL_UART_STATE_READY;
 800601e:	68fb      	ldr	r3, [r7, #12]
 8006020:	2220      	movs	r2, #32
 8006022:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

        /* Process Unlocked */
        __HAL_UNLOCK(huart);
 8006026:	68fb      	ldr	r3, [r7, #12]
 8006028:	2200      	movs	r2, #0
 800602a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_TIMEOUT;
 800602e:	2303      	movs	r3, #3
 8006030:	e00f      	b.n	8006052 <UART_WaitOnFlagUntilTimeout+0xd4>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8006032:	68fb      	ldr	r3, [r7, #12]
 8006034:	681b      	ldr	r3, [r3, #0]
 8006036:	681a      	ldr	r2, [r3, #0]
 8006038:	68bb      	ldr	r3, [r7, #8]
 800603a:	4013      	ands	r3, r2
 800603c:	68ba      	ldr	r2, [r7, #8]
 800603e:	429a      	cmp	r2, r3
 8006040:	bf0c      	ite	eq
 8006042:	2301      	moveq	r3, #1
 8006044:	2300      	movne	r3, #0
 8006046:	b2db      	uxtb	r3, r3
 8006048:	461a      	mov	r2, r3
 800604a:	79fb      	ldrb	r3, [r7, #7]
 800604c:	429a      	cmp	r2, r3
 800604e:	d09f      	beq.n	8005f90 <UART_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 8006050:	2300      	movs	r3, #0
}
 8006052:	4618      	mov	r0, r3
 8006054:	3740      	adds	r7, #64	; 0x40
 8006056:	46bd      	mov	sp, r7
 8006058:	bd80      	pop	{r7, pc}
	...

0800605c <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 800605c:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8006060:	b0c0      	sub	sp, #256	; 0x100
 8006062:	af00      	add	r7, sp, #0
 8006064:	f8c7 00f4 	str.w	r0, [r7, #244]	; 0xf4
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8006068:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800606c:	681b      	ldr	r3, [r3, #0]
 800606e:	691b      	ldr	r3, [r3, #16]
 8006070:	f423 5040 	bic.w	r0, r3, #12288	; 0x3000
 8006074:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8006078:	68d9      	ldr	r1, [r3, #12]
 800607a:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800607e:	681a      	ldr	r2, [r3, #0]
 8006080:	ea40 0301 	orr.w	r3, r0, r1
 8006084:	6113      	str	r3, [r2, #16]
     Set the M bits according to huart->Init.WordLength value
     Set PCE and PS bits according to huart->Init.Parity value
     Set TE and RE bits according to huart->Init.Mode value
     Set OVER8 bit according to huart->Init.OverSampling value */

  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 8006086:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800608a:	689a      	ldr	r2, [r3, #8]
 800608c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8006090:	691b      	ldr	r3, [r3, #16]
 8006092:	431a      	orrs	r2, r3
 8006094:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8006098:	695b      	ldr	r3, [r3, #20]
 800609a:	431a      	orrs	r2, r3
 800609c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80060a0:	69db      	ldr	r3, [r3, #28]
 80060a2:	4313      	orrs	r3, r2
 80060a4:	f8c7 30f8 	str.w	r3, [r7, #248]	; 0xf8
  MODIFY_REG(huart->Instance->CR1,
 80060a8:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80060ac:	681b      	ldr	r3, [r3, #0]
 80060ae:	68db      	ldr	r3, [r3, #12]
 80060b0:	f423 4116 	bic.w	r1, r3, #38400	; 0x9600
 80060b4:	f021 010c 	bic.w	r1, r1, #12
 80060b8:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80060bc:	681a      	ldr	r2, [r3, #0]
 80060be:	f8d7 30f8 	ldr.w	r3, [r7, #248]	; 0xf8
 80060c2:	430b      	orrs	r3, r1
 80060c4:	60d3      	str	r3, [r2, #12]
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 80060c6:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80060ca:	681b      	ldr	r3, [r3, #0]
 80060cc:	695b      	ldr	r3, [r3, #20]
 80060ce:	f423 7040 	bic.w	r0, r3, #768	; 0x300
 80060d2:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80060d6:	6999      	ldr	r1, [r3, #24]
 80060d8:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80060dc:	681a      	ldr	r2, [r3, #0]
 80060de:	ea40 0301 	orr.w	r3, r0, r1
 80060e2:	6153      	str	r3, [r2, #20]
    if ((huart->Instance == USART1) || (huart->Instance == USART6) || (huart->Instance == UART9) || (huart->Instance == UART10))
    {
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#elif defined(USART6)
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 80060e4:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80060e8:	681a      	ldr	r2, [r3, #0]
 80060ea:	4b8f      	ldr	r3, [pc, #572]	; (8006328 <UART_SetConfig+0x2cc>)
 80060ec:	429a      	cmp	r2, r3
 80060ee:	d005      	beq.n	80060fc <UART_SetConfig+0xa0>
 80060f0:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80060f4:	681a      	ldr	r2, [r3, #0]
 80060f6:	4b8d      	ldr	r3, [pc, #564]	; (800632c <UART_SetConfig+0x2d0>)
 80060f8:	429a      	cmp	r2, r3
 80060fa:	d104      	bne.n	8006106 <UART_SetConfig+0xaa>
    {
      pclk = HAL_RCC_GetPCLK2Freq();
 80060fc:	f7fe ff1c 	bl	8004f38 <HAL_RCC_GetPCLK2Freq>
 8006100:	f8c7 00fc 	str.w	r0, [r7, #252]	; 0xfc
 8006104:	e003      	b.n	800610e <UART_SetConfig+0xb2>
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#endif /* USART6 */
    else
    {
      pclk = HAL_RCC_GetPCLK1Freq();
 8006106:	f7fe ff03 	bl	8004f10 <HAL_RCC_GetPCLK1Freq>
 800610a:	f8c7 00fc 	str.w	r0, [r7, #252]	; 0xfc
    }
  /*-------------------------- USART BRR Configuration ---------------------*/
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 800610e:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8006112:	69db      	ldr	r3, [r3, #28]
 8006114:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8006118:	f040 810c 	bne.w	8006334 <UART_SetConfig+0x2d8>
  {
    huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 800611c:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8006120:	2200      	movs	r2, #0
 8006122:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
 8006126:	f8c7 20ec 	str.w	r2, [r7, #236]	; 0xec
 800612a:	e9d7 453a 	ldrd	r4, r5, [r7, #232]	; 0xe8
 800612e:	4622      	mov	r2, r4
 8006130:	462b      	mov	r3, r5
 8006132:	1891      	adds	r1, r2, r2
 8006134:	65b9      	str	r1, [r7, #88]	; 0x58
 8006136:	415b      	adcs	r3, r3
 8006138:	65fb      	str	r3, [r7, #92]	; 0x5c
 800613a:	e9d7 2316 	ldrd	r2, r3, [r7, #88]	; 0x58
 800613e:	4621      	mov	r1, r4
 8006140:	eb12 0801 	adds.w	r8, r2, r1
 8006144:	4629      	mov	r1, r5
 8006146:	eb43 0901 	adc.w	r9, r3, r1
 800614a:	f04f 0200 	mov.w	r2, #0
 800614e:	f04f 0300 	mov.w	r3, #0
 8006152:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 8006156:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 800615a:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 800615e:	4690      	mov	r8, r2
 8006160:	4699      	mov	r9, r3
 8006162:	4623      	mov	r3, r4
 8006164:	eb18 0303 	adds.w	r3, r8, r3
 8006168:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
 800616c:	462b      	mov	r3, r5
 800616e:	eb49 0303 	adc.w	r3, r9, r3
 8006172:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
 8006176:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800617a:	685b      	ldr	r3, [r3, #4]
 800617c:	2200      	movs	r2, #0
 800617e:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
 8006182:	f8c7 20dc 	str.w	r2, [r7, #220]	; 0xdc
 8006186:	e9d7 1236 	ldrd	r1, r2, [r7, #216]	; 0xd8
 800618a:	460b      	mov	r3, r1
 800618c:	18db      	adds	r3, r3, r3
 800618e:	653b      	str	r3, [r7, #80]	; 0x50
 8006190:	4613      	mov	r3, r2
 8006192:	eb42 0303 	adc.w	r3, r2, r3
 8006196:	657b      	str	r3, [r7, #84]	; 0x54
 8006198:	e9d7 2314 	ldrd	r2, r3, [r7, #80]	; 0x50
 800619c:	e9d7 0138 	ldrd	r0, r1, [r7, #224]	; 0xe0
 80061a0:	f7fa f99e 	bl	80004e0 <__aeabi_uldivmod>
 80061a4:	4602      	mov	r2, r0
 80061a6:	460b      	mov	r3, r1
 80061a8:	4b61      	ldr	r3, [pc, #388]	; (8006330 <UART_SetConfig+0x2d4>)
 80061aa:	fba3 2302 	umull	r2, r3, r3, r2
 80061ae:	095b      	lsrs	r3, r3, #5
 80061b0:	011c      	lsls	r4, r3, #4
 80061b2:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 80061b6:	2200      	movs	r2, #0
 80061b8:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 80061bc:	f8c7 20d4 	str.w	r2, [r7, #212]	; 0xd4
 80061c0:	e9d7 8934 	ldrd	r8, r9, [r7, #208]	; 0xd0
 80061c4:	4642      	mov	r2, r8
 80061c6:	464b      	mov	r3, r9
 80061c8:	1891      	adds	r1, r2, r2
 80061ca:	64b9      	str	r1, [r7, #72]	; 0x48
 80061cc:	415b      	adcs	r3, r3
 80061ce:	64fb      	str	r3, [r7, #76]	; 0x4c
 80061d0:	e9d7 2312 	ldrd	r2, r3, [r7, #72]	; 0x48
 80061d4:	4641      	mov	r1, r8
 80061d6:	eb12 0a01 	adds.w	sl, r2, r1
 80061da:	4649      	mov	r1, r9
 80061dc:	eb43 0b01 	adc.w	fp, r3, r1
 80061e0:	f04f 0200 	mov.w	r2, #0
 80061e4:	f04f 0300 	mov.w	r3, #0
 80061e8:	ea4f 03cb 	mov.w	r3, fp, lsl #3
 80061ec:	ea43 735a 	orr.w	r3, r3, sl, lsr #29
 80061f0:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 80061f4:	4692      	mov	sl, r2
 80061f6:	469b      	mov	fp, r3
 80061f8:	4643      	mov	r3, r8
 80061fa:	eb1a 0303 	adds.w	r3, sl, r3
 80061fe:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 8006202:	464b      	mov	r3, r9
 8006204:	eb4b 0303 	adc.w	r3, fp, r3
 8006208:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
 800620c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8006210:	685b      	ldr	r3, [r3, #4]
 8006212:	2200      	movs	r2, #0
 8006214:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 8006218:	f8c7 20c4 	str.w	r2, [r7, #196]	; 0xc4
 800621c:	e9d7 1230 	ldrd	r1, r2, [r7, #192]	; 0xc0
 8006220:	460b      	mov	r3, r1
 8006222:	18db      	adds	r3, r3, r3
 8006224:	643b      	str	r3, [r7, #64]	; 0x40
 8006226:	4613      	mov	r3, r2
 8006228:	eb42 0303 	adc.w	r3, r2, r3
 800622c:	647b      	str	r3, [r7, #68]	; 0x44
 800622e:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	; 0x40
 8006232:	e9d7 0132 	ldrd	r0, r1, [r7, #200]	; 0xc8
 8006236:	f7fa f953 	bl	80004e0 <__aeabi_uldivmod>
 800623a:	4602      	mov	r2, r0
 800623c:	460b      	mov	r3, r1
 800623e:	4611      	mov	r1, r2
 8006240:	4b3b      	ldr	r3, [pc, #236]	; (8006330 <UART_SetConfig+0x2d4>)
 8006242:	fba3 2301 	umull	r2, r3, r3, r1
 8006246:	095b      	lsrs	r3, r3, #5
 8006248:	2264      	movs	r2, #100	; 0x64
 800624a:	fb02 f303 	mul.w	r3, r2, r3
 800624e:	1acb      	subs	r3, r1, r3
 8006250:	00db      	lsls	r3, r3, #3
 8006252:	f103 0232 	add.w	r2, r3, #50	; 0x32
 8006256:	4b36      	ldr	r3, [pc, #216]	; (8006330 <UART_SetConfig+0x2d4>)
 8006258:	fba3 2302 	umull	r2, r3, r3, r2
 800625c:	095b      	lsrs	r3, r3, #5
 800625e:	005b      	lsls	r3, r3, #1
 8006260:	f403 73f8 	and.w	r3, r3, #496	; 0x1f0
 8006264:	441c      	add	r4, r3
 8006266:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 800626a:	2200      	movs	r2, #0
 800626c:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 8006270:	f8c7 20bc 	str.w	r2, [r7, #188]	; 0xbc
 8006274:	e9d7 892e 	ldrd	r8, r9, [r7, #184]	; 0xb8
 8006278:	4642      	mov	r2, r8
 800627a:	464b      	mov	r3, r9
 800627c:	1891      	adds	r1, r2, r2
 800627e:	63b9      	str	r1, [r7, #56]	; 0x38
 8006280:	415b      	adcs	r3, r3
 8006282:	63fb      	str	r3, [r7, #60]	; 0x3c
 8006284:	e9d7 230e 	ldrd	r2, r3, [r7, #56]	; 0x38
 8006288:	4641      	mov	r1, r8
 800628a:	1851      	adds	r1, r2, r1
 800628c:	6339      	str	r1, [r7, #48]	; 0x30
 800628e:	4649      	mov	r1, r9
 8006290:	414b      	adcs	r3, r1
 8006292:	637b      	str	r3, [r7, #52]	; 0x34
 8006294:	f04f 0200 	mov.w	r2, #0
 8006298:	f04f 0300 	mov.w	r3, #0
 800629c:	e9d7 ab0c 	ldrd	sl, fp, [r7, #48]	; 0x30
 80062a0:	4659      	mov	r1, fp
 80062a2:	00cb      	lsls	r3, r1, #3
 80062a4:	4651      	mov	r1, sl
 80062a6:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 80062aa:	4651      	mov	r1, sl
 80062ac:	00ca      	lsls	r2, r1, #3
 80062ae:	4610      	mov	r0, r2
 80062b0:	4619      	mov	r1, r3
 80062b2:	4603      	mov	r3, r0
 80062b4:	4642      	mov	r2, r8
 80062b6:	189b      	adds	r3, r3, r2
 80062b8:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 80062bc:	464b      	mov	r3, r9
 80062be:	460a      	mov	r2, r1
 80062c0:	eb42 0303 	adc.w	r3, r2, r3
 80062c4:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 80062c8:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80062cc:	685b      	ldr	r3, [r3, #4]
 80062ce:	2200      	movs	r2, #0
 80062d0:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
 80062d4:	f8c7 20ac 	str.w	r2, [r7, #172]	; 0xac
 80062d8:	e9d7 122a 	ldrd	r1, r2, [r7, #168]	; 0xa8
 80062dc:	460b      	mov	r3, r1
 80062de:	18db      	adds	r3, r3, r3
 80062e0:	62bb      	str	r3, [r7, #40]	; 0x28
 80062e2:	4613      	mov	r3, r2
 80062e4:	eb42 0303 	adc.w	r3, r2, r3
 80062e8:	62fb      	str	r3, [r7, #44]	; 0x2c
 80062ea:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 80062ee:	e9d7 012c 	ldrd	r0, r1, [r7, #176]	; 0xb0
 80062f2:	f7fa f8f5 	bl	80004e0 <__aeabi_uldivmod>
 80062f6:	4602      	mov	r2, r0
 80062f8:	460b      	mov	r3, r1
 80062fa:	4b0d      	ldr	r3, [pc, #52]	; (8006330 <UART_SetConfig+0x2d4>)
 80062fc:	fba3 1302 	umull	r1, r3, r3, r2
 8006300:	095b      	lsrs	r3, r3, #5
 8006302:	2164      	movs	r1, #100	; 0x64
 8006304:	fb01 f303 	mul.w	r3, r1, r3
 8006308:	1ad3      	subs	r3, r2, r3
 800630a:	00db      	lsls	r3, r3, #3
 800630c:	3332      	adds	r3, #50	; 0x32
 800630e:	4a08      	ldr	r2, [pc, #32]	; (8006330 <UART_SetConfig+0x2d4>)
 8006310:	fba2 2303 	umull	r2, r3, r2, r3
 8006314:	095b      	lsrs	r3, r3, #5
 8006316:	f003 0207 	and.w	r2, r3, #7
 800631a:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800631e:	681b      	ldr	r3, [r3, #0]
 8006320:	4422      	add	r2, r4
 8006322:	609a      	str	r2, [r3, #8]
  }
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
}
 8006324:	e105      	b.n	8006532 <UART_SetConfig+0x4d6>
 8006326:	bf00      	nop
 8006328:	40011000 	.word	0x40011000
 800632c:	40011400 	.word	0x40011400
 8006330:	51eb851f 	.word	0x51eb851f
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 8006334:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8006338:	2200      	movs	r2, #0
 800633a:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
 800633e:	f8c7 20a4 	str.w	r2, [r7, #164]	; 0xa4
 8006342:	e9d7 8928 	ldrd	r8, r9, [r7, #160]	; 0xa0
 8006346:	4642      	mov	r2, r8
 8006348:	464b      	mov	r3, r9
 800634a:	1891      	adds	r1, r2, r2
 800634c:	6239      	str	r1, [r7, #32]
 800634e:	415b      	adcs	r3, r3
 8006350:	627b      	str	r3, [r7, #36]	; 0x24
 8006352:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 8006356:	4641      	mov	r1, r8
 8006358:	1854      	adds	r4, r2, r1
 800635a:	4649      	mov	r1, r9
 800635c:	eb43 0501 	adc.w	r5, r3, r1
 8006360:	f04f 0200 	mov.w	r2, #0
 8006364:	f04f 0300 	mov.w	r3, #0
 8006368:	00eb      	lsls	r3, r5, #3
 800636a:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 800636e:	00e2      	lsls	r2, r4, #3
 8006370:	4614      	mov	r4, r2
 8006372:	461d      	mov	r5, r3
 8006374:	4643      	mov	r3, r8
 8006376:	18e3      	adds	r3, r4, r3
 8006378:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
 800637c:	464b      	mov	r3, r9
 800637e:	eb45 0303 	adc.w	r3, r5, r3
 8006382:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
 8006386:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800638a:	685b      	ldr	r3, [r3, #4]
 800638c:	2200      	movs	r2, #0
 800638e:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
 8006392:	f8c7 2094 	str.w	r2, [r7, #148]	; 0x94
 8006396:	f04f 0200 	mov.w	r2, #0
 800639a:	f04f 0300 	mov.w	r3, #0
 800639e:	e9d7 4524 	ldrd	r4, r5, [r7, #144]	; 0x90
 80063a2:	4629      	mov	r1, r5
 80063a4:	008b      	lsls	r3, r1, #2
 80063a6:	4621      	mov	r1, r4
 80063a8:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 80063ac:	4621      	mov	r1, r4
 80063ae:	008a      	lsls	r2, r1, #2
 80063b0:	e9d7 0126 	ldrd	r0, r1, [r7, #152]	; 0x98
 80063b4:	f7fa f894 	bl	80004e0 <__aeabi_uldivmod>
 80063b8:	4602      	mov	r2, r0
 80063ba:	460b      	mov	r3, r1
 80063bc:	4b60      	ldr	r3, [pc, #384]	; (8006540 <UART_SetConfig+0x4e4>)
 80063be:	fba3 2302 	umull	r2, r3, r3, r2
 80063c2:	095b      	lsrs	r3, r3, #5
 80063c4:	011c      	lsls	r4, r3, #4
 80063c6:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 80063ca:	2200      	movs	r2, #0
 80063cc:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
 80063d0:	f8c7 208c 	str.w	r2, [r7, #140]	; 0x8c
 80063d4:	e9d7 8922 	ldrd	r8, r9, [r7, #136]	; 0x88
 80063d8:	4642      	mov	r2, r8
 80063da:	464b      	mov	r3, r9
 80063dc:	1891      	adds	r1, r2, r2
 80063de:	61b9      	str	r1, [r7, #24]
 80063e0:	415b      	adcs	r3, r3
 80063e2:	61fb      	str	r3, [r7, #28]
 80063e4:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 80063e8:	4641      	mov	r1, r8
 80063ea:	1851      	adds	r1, r2, r1
 80063ec:	6139      	str	r1, [r7, #16]
 80063ee:	4649      	mov	r1, r9
 80063f0:	414b      	adcs	r3, r1
 80063f2:	617b      	str	r3, [r7, #20]
 80063f4:	f04f 0200 	mov.w	r2, #0
 80063f8:	f04f 0300 	mov.w	r3, #0
 80063fc:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 8006400:	4659      	mov	r1, fp
 8006402:	00cb      	lsls	r3, r1, #3
 8006404:	4651      	mov	r1, sl
 8006406:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 800640a:	4651      	mov	r1, sl
 800640c:	00ca      	lsls	r2, r1, #3
 800640e:	4610      	mov	r0, r2
 8006410:	4619      	mov	r1, r3
 8006412:	4603      	mov	r3, r0
 8006414:	4642      	mov	r2, r8
 8006416:	189b      	adds	r3, r3, r2
 8006418:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
 800641c:	464b      	mov	r3, r9
 800641e:	460a      	mov	r2, r1
 8006420:	eb42 0303 	adc.w	r3, r2, r3
 8006424:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
 8006428:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800642c:	685b      	ldr	r3, [r3, #4]
 800642e:	2200      	movs	r2, #0
 8006430:	67bb      	str	r3, [r7, #120]	; 0x78
 8006432:	67fa      	str	r2, [r7, #124]	; 0x7c
 8006434:	f04f 0200 	mov.w	r2, #0
 8006438:	f04f 0300 	mov.w	r3, #0
 800643c:	e9d7 891e 	ldrd	r8, r9, [r7, #120]	; 0x78
 8006440:	4649      	mov	r1, r9
 8006442:	008b      	lsls	r3, r1, #2
 8006444:	4641      	mov	r1, r8
 8006446:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 800644a:	4641      	mov	r1, r8
 800644c:	008a      	lsls	r2, r1, #2
 800644e:	e9d7 0120 	ldrd	r0, r1, [r7, #128]	; 0x80
 8006452:	f7fa f845 	bl	80004e0 <__aeabi_uldivmod>
 8006456:	4602      	mov	r2, r0
 8006458:	460b      	mov	r3, r1
 800645a:	4b39      	ldr	r3, [pc, #228]	; (8006540 <UART_SetConfig+0x4e4>)
 800645c:	fba3 1302 	umull	r1, r3, r3, r2
 8006460:	095b      	lsrs	r3, r3, #5
 8006462:	2164      	movs	r1, #100	; 0x64
 8006464:	fb01 f303 	mul.w	r3, r1, r3
 8006468:	1ad3      	subs	r3, r2, r3
 800646a:	011b      	lsls	r3, r3, #4
 800646c:	3332      	adds	r3, #50	; 0x32
 800646e:	4a34      	ldr	r2, [pc, #208]	; (8006540 <UART_SetConfig+0x4e4>)
 8006470:	fba2 2303 	umull	r2, r3, r2, r3
 8006474:	095b      	lsrs	r3, r3, #5
 8006476:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 800647a:	441c      	add	r4, r3
 800647c:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8006480:	2200      	movs	r2, #0
 8006482:	673b      	str	r3, [r7, #112]	; 0x70
 8006484:	677a      	str	r2, [r7, #116]	; 0x74
 8006486:	e9d7 891c 	ldrd	r8, r9, [r7, #112]	; 0x70
 800648a:	4642      	mov	r2, r8
 800648c:	464b      	mov	r3, r9
 800648e:	1891      	adds	r1, r2, r2
 8006490:	60b9      	str	r1, [r7, #8]
 8006492:	415b      	adcs	r3, r3
 8006494:	60fb      	str	r3, [r7, #12]
 8006496:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 800649a:	4641      	mov	r1, r8
 800649c:	1851      	adds	r1, r2, r1
 800649e:	6039      	str	r1, [r7, #0]
 80064a0:	4649      	mov	r1, r9
 80064a2:	414b      	adcs	r3, r1
 80064a4:	607b      	str	r3, [r7, #4]
 80064a6:	f04f 0200 	mov.w	r2, #0
 80064aa:	f04f 0300 	mov.w	r3, #0
 80064ae:	e9d7 ab00 	ldrd	sl, fp, [r7]
 80064b2:	4659      	mov	r1, fp
 80064b4:	00cb      	lsls	r3, r1, #3
 80064b6:	4651      	mov	r1, sl
 80064b8:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 80064bc:	4651      	mov	r1, sl
 80064be:	00ca      	lsls	r2, r1, #3
 80064c0:	4610      	mov	r0, r2
 80064c2:	4619      	mov	r1, r3
 80064c4:	4603      	mov	r3, r0
 80064c6:	4642      	mov	r2, r8
 80064c8:	189b      	adds	r3, r3, r2
 80064ca:	66bb      	str	r3, [r7, #104]	; 0x68
 80064cc:	464b      	mov	r3, r9
 80064ce:	460a      	mov	r2, r1
 80064d0:	eb42 0303 	adc.w	r3, r2, r3
 80064d4:	66fb      	str	r3, [r7, #108]	; 0x6c
 80064d6:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80064da:	685b      	ldr	r3, [r3, #4]
 80064dc:	2200      	movs	r2, #0
 80064de:	663b      	str	r3, [r7, #96]	; 0x60
 80064e0:	667a      	str	r2, [r7, #100]	; 0x64
 80064e2:	f04f 0200 	mov.w	r2, #0
 80064e6:	f04f 0300 	mov.w	r3, #0
 80064ea:	e9d7 8918 	ldrd	r8, r9, [r7, #96]	; 0x60
 80064ee:	4649      	mov	r1, r9
 80064f0:	008b      	lsls	r3, r1, #2
 80064f2:	4641      	mov	r1, r8
 80064f4:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 80064f8:	4641      	mov	r1, r8
 80064fa:	008a      	lsls	r2, r1, #2
 80064fc:	e9d7 011a 	ldrd	r0, r1, [r7, #104]	; 0x68
 8006500:	f7f9 ffee 	bl	80004e0 <__aeabi_uldivmod>
 8006504:	4602      	mov	r2, r0
 8006506:	460b      	mov	r3, r1
 8006508:	4b0d      	ldr	r3, [pc, #52]	; (8006540 <UART_SetConfig+0x4e4>)
 800650a:	fba3 1302 	umull	r1, r3, r3, r2
 800650e:	095b      	lsrs	r3, r3, #5
 8006510:	2164      	movs	r1, #100	; 0x64
 8006512:	fb01 f303 	mul.w	r3, r1, r3
 8006516:	1ad3      	subs	r3, r2, r3
 8006518:	011b      	lsls	r3, r3, #4
 800651a:	3332      	adds	r3, #50	; 0x32
 800651c:	4a08      	ldr	r2, [pc, #32]	; (8006540 <UART_SetConfig+0x4e4>)
 800651e:	fba2 2303 	umull	r2, r3, r2, r3
 8006522:	095b      	lsrs	r3, r3, #5
 8006524:	f003 020f 	and.w	r2, r3, #15
 8006528:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800652c:	681b      	ldr	r3, [r3, #0]
 800652e:	4422      	add	r2, r4
 8006530:	609a      	str	r2, [r3, #8]
}
 8006532:	bf00      	nop
 8006534:	f507 7780 	add.w	r7, r7, #256	; 0x100
 8006538:	46bd      	mov	sp, r7
 800653a:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 800653e:	bf00      	nop
 8006540:	51eb851f 	.word	0x51eb851f

08006544 <FMC_SDRAM_Init>:
  * @param  Device Pointer to SDRAM device instance
  * @param  Init Pointer to SDRAM Initialization structure
  * @retval HAL status
  */
HAL_StatusTypeDef FMC_SDRAM_Init(FMC_SDRAM_TypeDef *Device, FMC_SDRAM_InitTypeDef *Init)
{
 8006544:	b480      	push	{r7}
 8006546:	b083      	sub	sp, #12
 8006548:	af00      	add	r7, sp, #0
 800654a:	6078      	str	r0, [r7, #4]
 800654c:	6039      	str	r1, [r7, #0]
  assert_param(IS_FMC_SDCLOCK_PERIOD(Init->SDClockPeriod));
  assert_param(IS_FMC_READ_BURST(Init->ReadBurst));
  assert_param(IS_FMC_READPIPE_DELAY(Init->ReadPipeDelay));

  /* Set SDRAM bank configuration parameters */
  if (Init->SDBank == FMC_SDRAM_BANK1)
 800654e:	683b      	ldr	r3, [r7, #0]
 8006550:	681b      	ldr	r3, [r3, #0]
 8006552:	2b00      	cmp	r3, #0
 8006554:	d123      	bne.n	800659e <FMC_SDRAM_Init+0x5a>
  {
    MODIFY_REG(Device->SDCR[FMC_SDRAM_BANK1],
 8006556:	687b      	ldr	r3, [r7, #4]
 8006558:	681b      	ldr	r3, [r3, #0]
 800655a:	f423 43ff 	bic.w	r3, r3, #32640	; 0x7f80
 800655e:	f023 037f 	bic.w	r3, r3, #127	; 0x7f
 8006562:	683a      	ldr	r2, [r7, #0]
 8006564:	6851      	ldr	r1, [r2, #4]
 8006566:	683a      	ldr	r2, [r7, #0]
 8006568:	6892      	ldr	r2, [r2, #8]
 800656a:	4311      	orrs	r1, r2
 800656c:	683a      	ldr	r2, [r7, #0]
 800656e:	68d2      	ldr	r2, [r2, #12]
 8006570:	4311      	orrs	r1, r2
 8006572:	683a      	ldr	r2, [r7, #0]
 8006574:	6912      	ldr	r2, [r2, #16]
 8006576:	4311      	orrs	r1, r2
 8006578:	683a      	ldr	r2, [r7, #0]
 800657a:	6952      	ldr	r2, [r2, #20]
 800657c:	4311      	orrs	r1, r2
 800657e:	683a      	ldr	r2, [r7, #0]
 8006580:	6992      	ldr	r2, [r2, #24]
 8006582:	4311      	orrs	r1, r2
 8006584:	683a      	ldr	r2, [r7, #0]
 8006586:	69d2      	ldr	r2, [r2, #28]
 8006588:	4311      	orrs	r1, r2
 800658a:	683a      	ldr	r2, [r7, #0]
 800658c:	6a12      	ldr	r2, [r2, #32]
 800658e:	4311      	orrs	r1, r2
 8006590:	683a      	ldr	r2, [r7, #0]
 8006592:	6a52      	ldr	r2, [r2, #36]	; 0x24
 8006594:	430a      	orrs	r2, r1
 8006596:	431a      	orrs	r2, r3
 8006598:	687b      	ldr	r3, [r7, #4]
 800659a:	601a      	str	r2, [r3, #0]
 800659c:	e028      	b.n	80065f0 <FMC_SDRAM_Init+0xac>
                Init->ReadBurst          |
                Init->ReadPipeDelay));
  }
  else /* FMC_Bank2_SDRAM */
  {
    MODIFY_REG(Device->SDCR[FMC_SDRAM_BANK1],
 800659e:	687b      	ldr	r3, [r7, #4]
 80065a0:	681b      	ldr	r3, [r3, #0]
 80065a2:	f423 42f8 	bic.w	r2, r3, #31744	; 0x7c00
 80065a6:	683b      	ldr	r3, [r7, #0]
 80065a8:	69d9      	ldr	r1, [r3, #28]
 80065aa:	683b      	ldr	r3, [r7, #0]
 80065ac:	6a1b      	ldr	r3, [r3, #32]
 80065ae:	4319      	orrs	r1, r3
 80065b0:	683b      	ldr	r3, [r7, #0]
 80065b2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80065b4:	430b      	orrs	r3, r1
 80065b6:	431a      	orrs	r2, r3
 80065b8:	687b      	ldr	r3, [r7, #4]
 80065ba:	601a      	str	r2, [r3, #0]
               FMC_SDCR1_RPIPE,
               (Init->SDClockPeriod      |
                Init->ReadBurst          |
                Init->ReadPipeDelay));

    MODIFY_REG(Device->SDCR[FMC_SDRAM_BANK2],
 80065bc:	687b      	ldr	r3, [r7, #4]
 80065be:	685b      	ldr	r3, [r3, #4]
 80065c0:	f423 43ff 	bic.w	r3, r3, #32640	; 0x7f80
 80065c4:	f023 037f 	bic.w	r3, r3, #127	; 0x7f
 80065c8:	683a      	ldr	r2, [r7, #0]
 80065ca:	6851      	ldr	r1, [r2, #4]
 80065cc:	683a      	ldr	r2, [r7, #0]
 80065ce:	6892      	ldr	r2, [r2, #8]
 80065d0:	4311      	orrs	r1, r2
 80065d2:	683a      	ldr	r2, [r7, #0]
 80065d4:	68d2      	ldr	r2, [r2, #12]
 80065d6:	4311      	orrs	r1, r2
 80065d8:	683a      	ldr	r2, [r7, #0]
 80065da:	6912      	ldr	r2, [r2, #16]
 80065dc:	4311      	orrs	r1, r2
 80065de:	683a      	ldr	r2, [r7, #0]
 80065e0:	6952      	ldr	r2, [r2, #20]
 80065e2:	4311      	orrs	r1, r2
 80065e4:	683a      	ldr	r2, [r7, #0]
 80065e6:	6992      	ldr	r2, [r2, #24]
 80065e8:	430a      	orrs	r2, r1
 80065ea:	431a      	orrs	r2, r3
 80065ec:	687b      	ldr	r3, [r7, #4]
 80065ee:	605a      	str	r2, [r3, #4]
                Init->InternalBankNumber |
                Init->CASLatency         |
                Init->WriteProtection));
  }

  return HAL_OK;
 80065f0:	2300      	movs	r3, #0
}
 80065f2:	4618      	mov	r0, r3
 80065f4:	370c      	adds	r7, #12
 80065f6:	46bd      	mov	sp, r7
 80065f8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80065fc:	4770      	bx	lr

080065fe <FMC_SDRAM_Timing_Init>:
  * @param  Bank SDRAM bank number
  * @retval HAL status
  */
HAL_StatusTypeDef FMC_SDRAM_Timing_Init(FMC_SDRAM_TypeDef *Device,
                                        FMC_SDRAM_TimingTypeDef *Timing, uint32_t Bank)
{
 80065fe:	b480      	push	{r7}
 8006600:	b085      	sub	sp, #20
 8006602:	af00      	add	r7, sp, #0
 8006604:	60f8      	str	r0, [r7, #12]
 8006606:	60b9      	str	r1, [r7, #8]
 8006608:	607a      	str	r2, [r7, #4]
  assert_param(IS_FMC_RP_DELAY(Timing->RPDelay));
  assert_param(IS_FMC_RCD_DELAY(Timing->RCDDelay));
  assert_param(IS_FMC_SDRAM_BANK(Bank));

  /* Set SDRAM device timing parameters */
  if (Bank == FMC_SDRAM_BANK1)
 800660a:	687b      	ldr	r3, [r7, #4]
 800660c:	2b00      	cmp	r3, #0
 800660e:	d128      	bne.n	8006662 <FMC_SDRAM_Timing_Init+0x64>
  {
    MODIFY_REG(Device->SDTR[FMC_SDRAM_BANK1],
 8006610:	68fb      	ldr	r3, [r7, #12]
 8006612:	689b      	ldr	r3, [r3, #8]
 8006614:	f003 4270 	and.w	r2, r3, #4026531840	; 0xf0000000
 8006618:	68bb      	ldr	r3, [r7, #8]
 800661a:	681b      	ldr	r3, [r3, #0]
 800661c:	1e59      	subs	r1, r3, #1
 800661e:	68bb      	ldr	r3, [r7, #8]
 8006620:	685b      	ldr	r3, [r3, #4]
 8006622:	3b01      	subs	r3, #1
 8006624:	011b      	lsls	r3, r3, #4
 8006626:	4319      	orrs	r1, r3
 8006628:	68bb      	ldr	r3, [r7, #8]
 800662a:	689b      	ldr	r3, [r3, #8]
 800662c:	3b01      	subs	r3, #1
 800662e:	021b      	lsls	r3, r3, #8
 8006630:	4319      	orrs	r1, r3
 8006632:	68bb      	ldr	r3, [r7, #8]
 8006634:	68db      	ldr	r3, [r3, #12]
 8006636:	3b01      	subs	r3, #1
 8006638:	031b      	lsls	r3, r3, #12
 800663a:	4319      	orrs	r1, r3
 800663c:	68bb      	ldr	r3, [r7, #8]
 800663e:	691b      	ldr	r3, [r3, #16]
 8006640:	3b01      	subs	r3, #1
 8006642:	041b      	lsls	r3, r3, #16
 8006644:	4319      	orrs	r1, r3
 8006646:	68bb      	ldr	r3, [r7, #8]
 8006648:	695b      	ldr	r3, [r3, #20]
 800664a:	3b01      	subs	r3, #1
 800664c:	051b      	lsls	r3, r3, #20
 800664e:	4319      	orrs	r1, r3
 8006650:	68bb      	ldr	r3, [r7, #8]
 8006652:	699b      	ldr	r3, [r3, #24]
 8006654:	3b01      	subs	r3, #1
 8006656:	061b      	lsls	r3, r3, #24
 8006658:	430b      	orrs	r3, r1
 800665a:	431a      	orrs	r2, r3
 800665c:	68fb      	ldr	r3, [r7, #12]
 800665e:	609a      	str	r2, [r3, #8]
 8006660:	e02f      	b.n	80066c2 <FMC_SDRAM_Timing_Init+0xc4>
                (((Timing->RPDelay) - 1U)              << FMC_SDTR1_TRP_Pos)  |
                (((Timing->RCDDelay) - 1U)             << FMC_SDTR1_TRCD_Pos)));
  }
  else /* FMC_Bank2_SDRAM */
  {
    MODIFY_REG(Device->SDTR[FMC_SDRAM_BANK1],
 8006662:	68fb      	ldr	r3, [r7, #12]
 8006664:	689b      	ldr	r3, [r3, #8]
 8006666:	f423 0370 	bic.w	r3, r3, #15728640	; 0xf00000
 800666a:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 800666e:	68ba      	ldr	r2, [r7, #8]
 8006670:	68d2      	ldr	r2, [r2, #12]
 8006672:	3a01      	subs	r2, #1
 8006674:	0311      	lsls	r1, r2, #12
 8006676:	68ba      	ldr	r2, [r7, #8]
 8006678:	6952      	ldr	r2, [r2, #20]
 800667a:	3a01      	subs	r2, #1
 800667c:	0512      	lsls	r2, r2, #20
 800667e:	430a      	orrs	r2, r1
 8006680:	431a      	orrs	r2, r3
 8006682:	68fb      	ldr	r3, [r7, #12]
 8006684:	609a      	str	r2, [r3, #8]
               FMC_SDTR1_TRC |
               FMC_SDTR1_TRP,
               (((Timing->RowCycleDelay) - 1U)         << FMC_SDTR1_TRC_Pos)  |
               (((Timing->RPDelay) - 1U)               << FMC_SDTR1_TRP_Pos));

    MODIFY_REG(Device->SDTR[FMC_SDRAM_BANK2],
 8006686:	68fb      	ldr	r3, [r7, #12]
 8006688:	68db      	ldr	r3, [r3, #12]
 800668a:	f003 4270 	and.w	r2, r3, #4026531840	; 0xf0000000
 800668e:	68bb      	ldr	r3, [r7, #8]
 8006690:	681b      	ldr	r3, [r3, #0]
 8006692:	1e59      	subs	r1, r3, #1
 8006694:	68bb      	ldr	r3, [r7, #8]
 8006696:	685b      	ldr	r3, [r3, #4]
 8006698:	3b01      	subs	r3, #1
 800669a:	011b      	lsls	r3, r3, #4
 800669c:	4319      	orrs	r1, r3
 800669e:	68bb      	ldr	r3, [r7, #8]
 80066a0:	689b      	ldr	r3, [r3, #8]
 80066a2:	3b01      	subs	r3, #1
 80066a4:	021b      	lsls	r3, r3, #8
 80066a6:	4319      	orrs	r1, r3
 80066a8:	68bb      	ldr	r3, [r7, #8]
 80066aa:	691b      	ldr	r3, [r3, #16]
 80066ac:	3b01      	subs	r3, #1
 80066ae:	041b      	lsls	r3, r3, #16
 80066b0:	4319      	orrs	r1, r3
 80066b2:	68bb      	ldr	r3, [r7, #8]
 80066b4:	699b      	ldr	r3, [r3, #24]
 80066b6:	3b01      	subs	r3, #1
 80066b8:	061b      	lsls	r3, r3, #24
 80066ba:	430b      	orrs	r3, r1
 80066bc:	431a      	orrs	r2, r3
 80066be:	68fb      	ldr	r3, [r7, #12]
 80066c0:	60da      	str	r2, [r3, #12]
                (((Timing->SelfRefreshTime) - 1U)      << FMC_SDTR1_TRAS_Pos) |
                (((Timing->WriteRecoveryTime) - 1U)    << FMC_SDTR1_TWR_Pos)  |
                (((Timing->RCDDelay) - 1U)             << FMC_SDTR1_TRCD_Pos)));
  }

  return HAL_OK;
 80066c2:	2300      	movs	r3, #0
}
 80066c4:	4618      	mov	r0, r3
 80066c6:	3714      	adds	r7, #20
 80066c8:	46bd      	mov	sp, r7
 80066ca:	f85d 7b04 	ldr.w	r7, [sp], #4
 80066ce:	4770      	bx	lr

080066d0 <USB_CoreInit>:
  * @param  cfg pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_CoreInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 80066d0:	b084      	sub	sp, #16
 80066d2:	b580      	push	{r7, lr}
 80066d4:	b084      	sub	sp, #16
 80066d6:	af00      	add	r7, sp, #0
 80066d8:	6078      	str	r0, [r7, #4]
 80066da:	f107 001c 	add.w	r0, r7, #28
 80066de:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  HAL_StatusTypeDef ret;
  if (cfg.phy_itface == USB_OTG_ULPI_PHY)
 80066e2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80066e4:	2b01      	cmp	r3, #1
 80066e6:	d122      	bne.n	800672e <USB_CoreInit+0x5e>
  {
    USBx->GCCFG &= ~(USB_OTG_GCCFG_PWRDWN);
 80066e8:	687b      	ldr	r3, [r7, #4]
 80066ea:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80066ec:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 80066f0:	687b      	ldr	r3, [r7, #4]
 80066f2:	639a      	str	r2, [r3, #56]	; 0x38

    /* Init The ULPI Interface */
    USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_TSDPS | USB_OTG_GUSBCFG_ULPIFSLS | USB_OTG_GUSBCFG_PHYSEL);
 80066f4:	687b      	ldr	r3, [r7, #4]
 80066f6:	68db      	ldr	r3, [r3, #12]
 80066f8:	f423 0384 	bic.w	r3, r3, #4325376	; 0x420000
 80066fc:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8006700:	687a      	ldr	r2, [r7, #4]
 8006702:	60d3      	str	r3, [r2, #12]

    /* Select vbus source */
    USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_ULPIEVBUSD | USB_OTG_GUSBCFG_ULPIEVBUSI);
 8006704:	687b      	ldr	r3, [r7, #4]
 8006706:	68db      	ldr	r3, [r3, #12]
 8006708:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 800670c:	687b      	ldr	r3, [r7, #4]
 800670e:	60da      	str	r2, [r3, #12]
    if (cfg.use_external_vbus == 1U)
 8006710:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8006712:	2b01      	cmp	r3, #1
 8006714:	d105      	bne.n	8006722 <USB_CoreInit+0x52>
    {
      USBx->GUSBCFG |= USB_OTG_GUSBCFG_ULPIEVBUSD;
 8006716:	687b      	ldr	r3, [r7, #4]
 8006718:	68db      	ldr	r3, [r3, #12]
 800671a:	f443 1280 	orr.w	r2, r3, #1048576	; 0x100000
 800671e:	687b      	ldr	r3, [r7, #4]
 8006720:	60da      	str	r2, [r3, #12]
    }

    /* Reset after a PHY select */
    ret = USB_CoreReset(USBx);
 8006722:	6878      	ldr	r0, [r7, #4]
 8006724:	f000 f970 	bl	8006a08 <USB_CoreReset>
 8006728:	4603      	mov	r3, r0
 800672a:	73fb      	strb	r3, [r7, #15]
 800672c:	e01a      	b.n	8006764 <USB_CoreInit+0x94>
  }
  else /* FS interface (embedded Phy) */
  {
    /* Select FS Embedded PHY */
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_PHYSEL;
 800672e:	687b      	ldr	r3, [r7, #4]
 8006730:	68db      	ldr	r3, [r3, #12]
 8006732:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 8006736:	687b      	ldr	r3, [r7, #4]
 8006738:	60da      	str	r2, [r3, #12]

    /* Reset after a PHY select */
    ret = USB_CoreReset(USBx);
 800673a:	6878      	ldr	r0, [r7, #4]
 800673c:	f000 f964 	bl	8006a08 <USB_CoreReset>
 8006740:	4603      	mov	r3, r0
 8006742:	73fb      	strb	r3, [r7, #15]

    if (cfg.battery_charging_enable == 0U)
 8006744:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8006746:	2b00      	cmp	r3, #0
 8006748:	d106      	bne.n	8006758 <USB_CoreInit+0x88>
    {
      /* Activate the USB Transceiver */
      USBx->GCCFG |= USB_OTG_GCCFG_PWRDWN;
 800674a:	687b      	ldr	r3, [r7, #4]
 800674c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800674e:	f443 3280 	orr.w	r2, r3, #65536	; 0x10000
 8006752:	687b      	ldr	r3, [r7, #4]
 8006754:	639a      	str	r2, [r3, #56]	; 0x38
 8006756:	e005      	b.n	8006764 <USB_CoreInit+0x94>
    }
    else
    {
      /* Deactivate the USB Transceiver */
      USBx->GCCFG &= ~(USB_OTG_GCCFG_PWRDWN);
 8006758:	687b      	ldr	r3, [r7, #4]
 800675a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800675c:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 8006760:	687b      	ldr	r3, [r7, #4]
 8006762:	639a      	str	r2, [r3, #56]	; 0x38
    }
  }

  if (cfg.dma_enable == 1U)
 8006764:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006766:	2b01      	cmp	r3, #1
 8006768:	d10b      	bne.n	8006782 <USB_CoreInit+0xb2>
  {
    USBx->GAHBCFG |= USB_OTG_GAHBCFG_HBSTLEN_2;
 800676a:	687b      	ldr	r3, [r7, #4]
 800676c:	689b      	ldr	r3, [r3, #8]
 800676e:	f043 0206 	orr.w	r2, r3, #6
 8006772:	687b      	ldr	r3, [r7, #4]
 8006774:	609a      	str	r2, [r3, #8]
    USBx->GAHBCFG |= USB_OTG_GAHBCFG_DMAEN;
 8006776:	687b      	ldr	r3, [r7, #4]
 8006778:	689b      	ldr	r3, [r3, #8]
 800677a:	f043 0220 	orr.w	r2, r3, #32
 800677e:	687b      	ldr	r3, [r7, #4]
 8006780:	609a      	str	r2, [r3, #8]
  }

  return ret;
 8006782:	7bfb      	ldrb	r3, [r7, #15]
}
 8006784:	4618      	mov	r0, r3
 8006786:	3710      	adds	r7, #16
 8006788:	46bd      	mov	sp, r7
 800678a:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 800678e:	b004      	add	sp, #16
 8006790:	4770      	bx	lr

08006792 <USB_DisableGlobalInt>:
  *         Disable the controller's Global Int in the AHB Config reg
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DisableGlobalInt(USB_OTG_GlobalTypeDef *USBx)
{
 8006792:	b480      	push	{r7}
 8006794:	b083      	sub	sp, #12
 8006796:	af00      	add	r7, sp, #0
 8006798:	6078      	str	r0, [r7, #4]
  USBx->GAHBCFG &= ~USB_OTG_GAHBCFG_GINT;
 800679a:	687b      	ldr	r3, [r7, #4]
 800679c:	689b      	ldr	r3, [r3, #8]
 800679e:	f023 0201 	bic.w	r2, r3, #1
 80067a2:	687b      	ldr	r3, [r7, #4]
 80067a4:	609a      	str	r2, [r3, #8]
  return HAL_OK;
 80067a6:	2300      	movs	r3, #0
}
 80067a8:	4618      	mov	r0, r3
 80067aa:	370c      	adds	r7, #12
 80067ac:	46bd      	mov	sp, r7
 80067ae:	f85d 7b04 	ldr.w	r7, [sp], #4
 80067b2:	4770      	bx	lr

080067b4 <USB_SetCurrentMode>:
  *            @arg USB_DEVICE_MODE Peripheral mode
  *            @arg USB_HOST_MODE Host mode
  * @retval HAL status
  */
HAL_StatusTypeDef USB_SetCurrentMode(USB_OTG_GlobalTypeDef *USBx, USB_OTG_ModeTypeDef mode)
{
 80067b4:	b580      	push	{r7, lr}
 80067b6:	b084      	sub	sp, #16
 80067b8:	af00      	add	r7, sp, #0
 80067ba:	6078      	str	r0, [r7, #4]
 80067bc:	460b      	mov	r3, r1
 80067be:	70fb      	strb	r3, [r7, #3]
  uint32_t ms = 0U;
 80067c0:	2300      	movs	r3, #0
 80067c2:	60fb      	str	r3, [r7, #12]

  USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_FHMOD | USB_OTG_GUSBCFG_FDMOD);
 80067c4:	687b      	ldr	r3, [r7, #4]
 80067c6:	68db      	ldr	r3, [r3, #12]
 80067c8:	f023 42c0 	bic.w	r2, r3, #1610612736	; 0x60000000
 80067cc:	687b      	ldr	r3, [r7, #4]
 80067ce:	60da      	str	r2, [r3, #12]

  if (mode == USB_HOST_MODE)
 80067d0:	78fb      	ldrb	r3, [r7, #3]
 80067d2:	2b01      	cmp	r3, #1
 80067d4:	d115      	bne.n	8006802 <USB_SetCurrentMode+0x4e>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FHMOD;
 80067d6:	687b      	ldr	r3, [r7, #4]
 80067d8:	68db      	ldr	r3, [r3, #12]
 80067da:	f043 5200 	orr.w	r2, r3, #536870912	; 0x20000000
 80067de:	687b      	ldr	r3, [r7, #4]
 80067e0:	60da      	str	r2, [r3, #12]

    do
    {
      HAL_Delay(1U);
 80067e2:	2001      	movs	r0, #1
 80067e4:	f7fb fb78 	bl	8001ed8 <HAL_Delay>
      ms++;
 80067e8:	68fb      	ldr	r3, [r7, #12]
 80067ea:	3301      	adds	r3, #1
 80067ec:	60fb      	str	r3, [r7, #12]
    } while ((USB_GetMode(USBx) != (uint32_t)USB_HOST_MODE) && (ms < 50U));
 80067ee:	6878      	ldr	r0, [r7, #4]
 80067f0:	f000 f8fb 	bl	80069ea <USB_GetMode>
 80067f4:	4603      	mov	r3, r0
 80067f6:	2b01      	cmp	r3, #1
 80067f8:	d01e      	beq.n	8006838 <USB_SetCurrentMode+0x84>
 80067fa:	68fb      	ldr	r3, [r7, #12]
 80067fc:	2b31      	cmp	r3, #49	; 0x31
 80067fe:	d9f0      	bls.n	80067e2 <USB_SetCurrentMode+0x2e>
 8006800:	e01a      	b.n	8006838 <USB_SetCurrentMode+0x84>
  }
  else if (mode == USB_DEVICE_MODE)
 8006802:	78fb      	ldrb	r3, [r7, #3]
 8006804:	2b00      	cmp	r3, #0
 8006806:	d115      	bne.n	8006834 <USB_SetCurrentMode+0x80>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FDMOD;
 8006808:	687b      	ldr	r3, [r7, #4]
 800680a:	68db      	ldr	r3, [r3, #12]
 800680c:	f043 4280 	orr.w	r2, r3, #1073741824	; 0x40000000
 8006810:	687b      	ldr	r3, [r7, #4]
 8006812:	60da      	str	r2, [r3, #12]

    do
    {
      HAL_Delay(1U);
 8006814:	2001      	movs	r0, #1
 8006816:	f7fb fb5f 	bl	8001ed8 <HAL_Delay>
      ms++;
 800681a:	68fb      	ldr	r3, [r7, #12]
 800681c:	3301      	adds	r3, #1
 800681e:	60fb      	str	r3, [r7, #12]
    } while ((USB_GetMode(USBx) != (uint32_t)USB_DEVICE_MODE) && (ms < 50U));
 8006820:	6878      	ldr	r0, [r7, #4]
 8006822:	f000 f8e2 	bl	80069ea <USB_GetMode>
 8006826:	4603      	mov	r3, r0
 8006828:	2b00      	cmp	r3, #0
 800682a:	d005      	beq.n	8006838 <USB_SetCurrentMode+0x84>
 800682c:	68fb      	ldr	r3, [r7, #12]
 800682e:	2b31      	cmp	r3, #49	; 0x31
 8006830:	d9f0      	bls.n	8006814 <USB_SetCurrentMode+0x60>
 8006832:	e001      	b.n	8006838 <USB_SetCurrentMode+0x84>
  }
  else
  {
    return HAL_ERROR;
 8006834:	2301      	movs	r3, #1
 8006836:	e005      	b.n	8006844 <USB_SetCurrentMode+0x90>
  }

  if (ms == 50U)
 8006838:	68fb      	ldr	r3, [r7, #12]
 800683a:	2b32      	cmp	r3, #50	; 0x32
 800683c:	d101      	bne.n	8006842 <USB_SetCurrentMode+0x8e>
  {
    return HAL_ERROR;
 800683e:	2301      	movs	r3, #1
 8006840:	e000      	b.n	8006844 <USB_SetCurrentMode+0x90>
  }

  return HAL_OK;
 8006842:	2300      	movs	r3, #0
}
 8006844:	4618      	mov	r0, r3
 8006846:	3710      	adds	r7, #16
 8006848:	46bd      	mov	sp, r7
 800684a:	bd80      	pop	{r7, pc}

0800684c <USB_FlushTxFifo>:
  *         This parameter can be a value from 1 to 15
            15 means Flush all Tx FIFOs
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushTxFifo(USB_OTG_GlobalTypeDef *USBx, uint32_t num)
{
 800684c:	b480      	push	{r7}
 800684e:	b085      	sub	sp, #20
 8006850:	af00      	add	r7, sp, #0
 8006852:	6078      	str	r0, [r7, #4]
 8006854:	6039      	str	r1, [r7, #0]
  __IO uint32_t count = 0U;
 8006856:	2300      	movs	r3, #0
 8006858:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 800685a:	68fb      	ldr	r3, [r7, #12]
 800685c:	3301      	adds	r3, #1
 800685e:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 8006860:	68fb      	ldr	r3, [r7, #12]
 8006862:	4a13      	ldr	r2, [pc, #76]	; (80068b0 <USB_FlushTxFifo+0x64>)
 8006864:	4293      	cmp	r3, r2
 8006866:	d901      	bls.n	800686c <USB_FlushTxFifo+0x20>
    {
      return HAL_TIMEOUT;
 8006868:	2303      	movs	r3, #3
 800686a:	e01b      	b.n	80068a4 <USB_FlushTxFifo+0x58>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 800686c:	687b      	ldr	r3, [r7, #4]
 800686e:	691b      	ldr	r3, [r3, #16]
 8006870:	2b00      	cmp	r3, #0
 8006872:	daf2      	bge.n	800685a <USB_FlushTxFifo+0xe>

  /* Flush TX Fifo */
  count = 0U;
 8006874:	2300      	movs	r3, #0
 8006876:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL = (USB_OTG_GRSTCTL_TXFFLSH | (num << 6));
 8006878:	683b      	ldr	r3, [r7, #0]
 800687a:	019b      	lsls	r3, r3, #6
 800687c:	f043 0220 	orr.w	r2, r3, #32
 8006880:	687b      	ldr	r3, [r7, #4]
 8006882:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 8006884:	68fb      	ldr	r3, [r7, #12]
 8006886:	3301      	adds	r3, #1
 8006888:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 800688a:	68fb      	ldr	r3, [r7, #12]
 800688c:	4a08      	ldr	r2, [pc, #32]	; (80068b0 <USB_FlushTxFifo+0x64>)
 800688e:	4293      	cmp	r3, r2
 8006890:	d901      	bls.n	8006896 <USB_FlushTxFifo+0x4a>
    {
      return HAL_TIMEOUT;
 8006892:	2303      	movs	r3, #3
 8006894:	e006      	b.n	80068a4 <USB_FlushTxFifo+0x58>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_TXFFLSH) == USB_OTG_GRSTCTL_TXFFLSH);
 8006896:	687b      	ldr	r3, [r7, #4]
 8006898:	691b      	ldr	r3, [r3, #16]
 800689a:	f003 0320 	and.w	r3, r3, #32
 800689e:	2b20      	cmp	r3, #32
 80068a0:	d0f0      	beq.n	8006884 <USB_FlushTxFifo+0x38>

  return HAL_OK;
 80068a2:	2300      	movs	r3, #0
}
 80068a4:	4618      	mov	r0, r3
 80068a6:	3714      	adds	r7, #20
 80068a8:	46bd      	mov	sp, r7
 80068aa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80068ae:	4770      	bx	lr
 80068b0:	00030d40 	.word	0x00030d40

080068b4 <USB_FlushRxFifo>:
  * @brief  USB_FlushRxFifo  Flush Rx FIFO
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushRxFifo(USB_OTG_GlobalTypeDef *USBx)
{
 80068b4:	b480      	push	{r7}
 80068b6:	b085      	sub	sp, #20
 80068b8:	af00      	add	r7, sp, #0
 80068ba:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 80068bc:	2300      	movs	r3, #0
 80068be:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 80068c0:	68fb      	ldr	r3, [r7, #12]
 80068c2:	3301      	adds	r3, #1
 80068c4:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 80068c6:	68fb      	ldr	r3, [r7, #12]
 80068c8:	4a11      	ldr	r2, [pc, #68]	; (8006910 <USB_FlushRxFifo+0x5c>)
 80068ca:	4293      	cmp	r3, r2
 80068cc:	d901      	bls.n	80068d2 <USB_FlushRxFifo+0x1e>
    {
      return HAL_TIMEOUT;
 80068ce:	2303      	movs	r3, #3
 80068d0:	e018      	b.n	8006904 <USB_FlushRxFifo+0x50>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 80068d2:	687b      	ldr	r3, [r7, #4]
 80068d4:	691b      	ldr	r3, [r3, #16]
 80068d6:	2b00      	cmp	r3, #0
 80068d8:	daf2      	bge.n	80068c0 <USB_FlushRxFifo+0xc>

  /* Flush RX Fifo */
  count = 0U;
 80068da:	2300      	movs	r3, #0
 80068dc:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL = USB_OTG_GRSTCTL_RXFFLSH;
 80068de:	687b      	ldr	r3, [r7, #4]
 80068e0:	2210      	movs	r2, #16
 80068e2:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 80068e4:	68fb      	ldr	r3, [r7, #12]
 80068e6:	3301      	adds	r3, #1
 80068e8:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 80068ea:	68fb      	ldr	r3, [r7, #12]
 80068ec:	4a08      	ldr	r2, [pc, #32]	; (8006910 <USB_FlushRxFifo+0x5c>)
 80068ee:	4293      	cmp	r3, r2
 80068f0:	d901      	bls.n	80068f6 <USB_FlushRxFifo+0x42>
    {
      return HAL_TIMEOUT;
 80068f2:	2303      	movs	r3, #3
 80068f4:	e006      	b.n	8006904 <USB_FlushRxFifo+0x50>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_RXFFLSH) == USB_OTG_GRSTCTL_RXFFLSH);
 80068f6:	687b      	ldr	r3, [r7, #4]
 80068f8:	691b      	ldr	r3, [r3, #16]
 80068fa:	f003 0310 	and.w	r3, r3, #16
 80068fe:	2b10      	cmp	r3, #16
 8006900:	d0f0      	beq.n	80068e4 <USB_FlushRxFifo+0x30>

  return HAL_OK;
 8006902:	2300      	movs	r3, #0
}
 8006904:	4618      	mov	r0, r3
 8006906:	3714      	adds	r7, #20
 8006908:	46bd      	mov	sp, r7
 800690a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800690e:	4770      	bx	lr
 8006910:	00030d40 	.word	0x00030d40

08006914 <USB_ReadPacket>:
  * @param  dest  source pointer
  * @param  len  Number of bytes to read
  * @retval pointer to destination buffer
  */
void *USB_ReadPacket(USB_OTG_GlobalTypeDef *USBx, uint8_t *dest, uint16_t len)
{
 8006914:	b480      	push	{r7}
 8006916:	b08b      	sub	sp, #44	; 0x2c
 8006918:	af00      	add	r7, sp, #0
 800691a:	60f8      	str	r0, [r7, #12]
 800691c:	60b9      	str	r1, [r7, #8]
 800691e:	4613      	mov	r3, r2
 8006920:	80fb      	strh	r3, [r7, #6]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8006922:	68fb      	ldr	r3, [r7, #12]
 8006924:	61bb      	str	r3, [r7, #24]
  uint8_t *pDest = dest;
 8006926:	68bb      	ldr	r3, [r7, #8]
 8006928:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t pData;
  uint32_t i;
  uint32_t count32b = (uint32_t)len >> 2U;
 800692a:	88fb      	ldrh	r3, [r7, #6]
 800692c:	089b      	lsrs	r3, r3, #2
 800692e:	b29b      	uxth	r3, r3
 8006930:	617b      	str	r3, [r7, #20]
  uint16_t remaining_bytes = len % 4U;
 8006932:	88fb      	ldrh	r3, [r7, #6]
 8006934:	f003 0303 	and.w	r3, r3, #3
 8006938:	83fb      	strh	r3, [r7, #30]

  for (i = 0U; i < count32b; i++)
 800693a:	2300      	movs	r3, #0
 800693c:	623b      	str	r3, [r7, #32]
 800693e:	e014      	b.n	800696a <USB_ReadPacket+0x56>
  {
    __UNALIGNED_UINT32_WRITE(pDest, USBx_DFIFO(0U));
 8006940:	69bb      	ldr	r3, [r7, #24]
 8006942:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8006946:	681a      	ldr	r2, [r3, #0]
 8006948:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800694a:	601a      	str	r2, [r3, #0]
    pDest++;
 800694c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800694e:	3301      	adds	r3, #1
 8006950:	627b      	str	r3, [r7, #36]	; 0x24
    pDest++;
 8006952:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006954:	3301      	adds	r3, #1
 8006956:	627b      	str	r3, [r7, #36]	; 0x24
    pDest++;
 8006958:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800695a:	3301      	adds	r3, #1
 800695c:	627b      	str	r3, [r7, #36]	; 0x24
    pDest++;
 800695e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006960:	3301      	adds	r3, #1
 8006962:	627b      	str	r3, [r7, #36]	; 0x24
  for (i = 0U; i < count32b; i++)
 8006964:	6a3b      	ldr	r3, [r7, #32]
 8006966:	3301      	adds	r3, #1
 8006968:	623b      	str	r3, [r7, #32]
 800696a:	6a3a      	ldr	r2, [r7, #32]
 800696c:	697b      	ldr	r3, [r7, #20]
 800696e:	429a      	cmp	r2, r3
 8006970:	d3e6      	bcc.n	8006940 <USB_ReadPacket+0x2c>
  }

  /* When Number of data is not word aligned, read the remaining byte */
  if (remaining_bytes != 0U)
 8006972:	8bfb      	ldrh	r3, [r7, #30]
 8006974:	2b00      	cmp	r3, #0
 8006976:	d01e      	beq.n	80069b6 <USB_ReadPacket+0xa2>
  {
    i = 0U;
 8006978:	2300      	movs	r3, #0
 800697a:	623b      	str	r3, [r7, #32]
    __UNALIGNED_UINT32_WRITE(&pData, USBx_DFIFO(0U));
 800697c:	69bb      	ldr	r3, [r7, #24]
 800697e:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8006982:	461a      	mov	r2, r3
 8006984:	f107 0310 	add.w	r3, r7, #16
 8006988:	6812      	ldr	r2, [r2, #0]
 800698a:	601a      	str	r2, [r3, #0]

    do
    {
      *(uint8_t *)pDest = (uint8_t)(pData >> (8U * (uint8_t)(i)));
 800698c:	693a      	ldr	r2, [r7, #16]
 800698e:	6a3b      	ldr	r3, [r7, #32]
 8006990:	b2db      	uxtb	r3, r3
 8006992:	00db      	lsls	r3, r3, #3
 8006994:	fa22 f303 	lsr.w	r3, r2, r3
 8006998:	b2da      	uxtb	r2, r3
 800699a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800699c:	701a      	strb	r2, [r3, #0]
      i++;
 800699e:	6a3b      	ldr	r3, [r7, #32]
 80069a0:	3301      	adds	r3, #1
 80069a2:	623b      	str	r3, [r7, #32]
      pDest++;
 80069a4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80069a6:	3301      	adds	r3, #1
 80069a8:	627b      	str	r3, [r7, #36]	; 0x24
      remaining_bytes--;
 80069aa:	8bfb      	ldrh	r3, [r7, #30]
 80069ac:	3b01      	subs	r3, #1
 80069ae:	83fb      	strh	r3, [r7, #30]
    } while (remaining_bytes != 0U);
 80069b0:	8bfb      	ldrh	r3, [r7, #30]
 80069b2:	2b00      	cmp	r3, #0
 80069b4:	d1ea      	bne.n	800698c <USB_ReadPacket+0x78>
  }

  return ((void *)pDest);
 80069b6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
}
 80069b8:	4618      	mov	r0, r3
 80069ba:	372c      	adds	r7, #44	; 0x2c
 80069bc:	46bd      	mov	sp, r7
 80069be:	f85d 7b04 	ldr.w	r7, [sp], #4
 80069c2:	4770      	bx	lr

080069c4 <USB_ReadInterrupts>:
  * @brief  USB_ReadInterrupts: return the global USB interrupt status
  * @param  USBx  Selected device
  * @retval HAL status
  */
uint32_t  USB_ReadInterrupts(USB_OTG_GlobalTypeDef *USBx)
{
 80069c4:	b480      	push	{r7}
 80069c6:	b085      	sub	sp, #20
 80069c8:	af00      	add	r7, sp, #0
 80069ca:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;

  tmpreg = USBx->GINTSTS;
 80069cc:	687b      	ldr	r3, [r7, #4]
 80069ce:	695b      	ldr	r3, [r3, #20]
 80069d0:	60fb      	str	r3, [r7, #12]
  tmpreg &= USBx->GINTMSK;
 80069d2:	687b      	ldr	r3, [r7, #4]
 80069d4:	699b      	ldr	r3, [r3, #24]
 80069d6:	68fa      	ldr	r2, [r7, #12]
 80069d8:	4013      	ands	r3, r2
 80069da:	60fb      	str	r3, [r7, #12]

  return tmpreg;
 80069dc:	68fb      	ldr	r3, [r7, #12]
}
 80069de:	4618      	mov	r0, r3
 80069e0:	3714      	adds	r7, #20
 80069e2:	46bd      	mov	sp, r7
 80069e4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80069e8:	4770      	bx	lr

080069ea <USB_GetMode>:
  *          This parameter can be one of these values:
  *           0 : Host
  *           1 : Device
  */
uint32_t USB_GetMode(USB_OTG_GlobalTypeDef *USBx)
{
 80069ea:	b480      	push	{r7}
 80069ec:	b083      	sub	sp, #12
 80069ee:	af00      	add	r7, sp, #0
 80069f0:	6078      	str	r0, [r7, #4]
  return ((USBx->GINTSTS) & 0x1U);
 80069f2:	687b      	ldr	r3, [r7, #4]
 80069f4:	695b      	ldr	r3, [r3, #20]
 80069f6:	f003 0301 	and.w	r3, r3, #1
}
 80069fa:	4618      	mov	r0, r3
 80069fc:	370c      	adds	r7, #12
 80069fe:	46bd      	mov	sp, r7
 8006a00:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006a04:	4770      	bx	lr
	...

08006a08 <USB_CoreReset>:
  * @brief  Reset the USB Core (needed after USB clock settings change)
  * @param  USBx  Selected device
  * @retval HAL status
  */
static HAL_StatusTypeDef USB_CoreReset(USB_OTG_GlobalTypeDef *USBx)
{
 8006a08:	b480      	push	{r7}
 8006a0a:	b085      	sub	sp, #20
 8006a0c:	af00      	add	r7, sp, #0
 8006a0e:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 8006a10:	2300      	movs	r3, #0
 8006a12:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 8006a14:	68fb      	ldr	r3, [r7, #12]
 8006a16:	3301      	adds	r3, #1
 8006a18:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 8006a1a:	68fb      	ldr	r3, [r7, #12]
 8006a1c:	4a13      	ldr	r2, [pc, #76]	; (8006a6c <USB_CoreReset+0x64>)
 8006a1e:	4293      	cmp	r3, r2
 8006a20:	d901      	bls.n	8006a26 <USB_CoreReset+0x1e>
    {
      return HAL_TIMEOUT;
 8006a22:	2303      	movs	r3, #3
 8006a24:	e01b      	b.n	8006a5e <USB_CoreReset+0x56>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 8006a26:	687b      	ldr	r3, [r7, #4]
 8006a28:	691b      	ldr	r3, [r3, #16]
 8006a2a:	2b00      	cmp	r3, #0
 8006a2c:	daf2      	bge.n	8006a14 <USB_CoreReset+0xc>

  /* Core Soft Reset */
  count = 0U;
 8006a2e:	2300      	movs	r3, #0
 8006a30:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL |= USB_OTG_GRSTCTL_CSRST;
 8006a32:	687b      	ldr	r3, [r7, #4]
 8006a34:	691b      	ldr	r3, [r3, #16]
 8006a36:	f043 0201 	orr.w	r2, r3, #1
 8006a3a:	687b      	ldr	r3, [r7, #4]
 8006a3c:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 8006a3e:	68fb      	ldr	r3, [r7, #12]
 8006a40:	3301      	adds	r3, #1
 8006a42:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 8006a44:	68fb      	ldr	r3, [r7, #12]
 8006a46:	4a09      	ldr	r2, [pc, #36]	; (8006a6c <USB_CoreReset+0x64>)
 8006a48:	4293      	cmp	r3, r2
 8006a4a:	d901      	bls.n	8006a50 <USB_CoreReset+0x48>
    {
      return HAL_TIMEOUT;
 8006a4c:	2303      	movs	r3, #3
 8006a4e:	e006      	b.n	8006a5e <USB_CoreReset+0x56>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_CSRST) == USB_OTG_GRSTCTL_CSRST);
 8006a50:	687b      	ldr	r3, [r7, #4]
 8006a52:	691b      	ldr	r3, [r3, #16]
 8006a54:	f003 0301 	and.w	r3, r3, #1
 8006a58:	2b01      	cmp	r3, #1
 8006a5a:	d0f0      	beq.n	8006a3e <USB_CoreReset+0x36>

  return HAL_OK;
 8006a5c:	2300      	movs	r3, #0
}
 8006a5e:	4618      	mov	r0, r3
 8006a60:	3714      	adds	r7, #20
 8006a62:	46bd      	mov	sp, r7
 8006a64:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006a68:	4770      	bx	lr
 8006a6a:	bf00      	nop
 8006a6c:	00030d40 	.word	0x00030d40

08006a70 <USB_HostInit>:
  * @param  cfg   pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_HostInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 8006a70:	b084      	sub	sp, #16
 8006a72:	b580      	push	{r7, lr}
 8006a74:	b086      	sub	sp, #24
 8006a76:	af00      	add	r7, sp, #0
 8006a78:	6078      	str	r0, [r7, #4]
 8006a7a:	f107 0024 	add.w	r0, r7, #36	; 0x24
 8006a7e:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  HAL_StatusTypeDef ret = HAL_OK;
 8006a82:	2300      	movs	r3, #0
 8006a84:	75fb      	strb	r3, [r7, #23]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8006a86:	687b      	ldr	r3, [r7, #4]
 8006a88:	60fb      	str	r3, [r7, #12]
  uint32_t i;

  /* Restart the Phy Clock */
  USBx_PCGCCTL = 0U;
 8006a8a:	68fb      	ldr	r3, [r7, #12]
 8006a8c:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 8006a90:	461a      	mov	r2, r3
 8006a92:	2300      	movs	r3, #0
 8006a94:	6013      	str	r3, [r2, #0]
#else
  /*
  * Disable HW VBUS sensing. VBUS is internally considered to be always
  * at VBUS-Valid level (5V).
  */
  USBx->GCCFG |= USB_OTG_GCCFG_NOVBUSSENS;
 8006a96:	687b      	ldr	r3, [r7, #4]
 8006a98:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006a9a:	f443 1200 	orr.w	r2, r3, #2097152	; 0x200000
 8006a9e:	687b      	ldr	r3, [r7, #4]
 8006aa0:	639a      	str	r2, [r3, #56]	; 0x38
  USBx->GCCFG &= ~USB_OTG_GCCFG_VBUSBSEN;
 8006aa2:	687b      	ldr	r3, [r7, #4]
 8006aa4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006aa6:	f423 2200 	bic.w	r2, r3, #524288	; 0x80000
 8006aaa:	687b      	ldr	r3, [r7, #4]
 8006aac:	639a      	str	r2, [r3, #56]	; 0x38
  USBx->GCCFG &= ~USB_OTG_GCCFG_VBUSASEN;
 8006aae:	687b      	ldr	r3, [r7, #4]
 8006ab0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006ab2:	f423 2280 	bic.w	r2, r3, #262144	; 0x40000
 8006ab6:	687b      	ldr	r3, [r7, #4]
 8006ab8:	639a      	str	r2, [r3, #56]	; 0x38
#if defined(STM32F412Zx) || defined(STM32F412Vx) || defined(STM32F412Rx) || defined(STM32F412Cx) || defined(STM32F413xx) || defined(STM32F423xx)
  /* Disable Battery chargin detector */
  USBx->GCCFG &= ~(USB_OTG_GCCFG_BCDEN);
#endif /* defined(STM32F412Zx) || defined(STM32F412Vx) || defined(STM32F412Rx) || defined(STM32F412Cx) || defined(STM32F413xx) || defined(STM32F423xx) */

  if ((USBx->CID & (0x1U << 8)) != 0U)
 8006aba:	687b      	ldr	r3, [r7, #4]
 8006abc:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8006abe:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8006ac2:	2b00      	cmp	r3, #0
 8006ac4:	d018      	beq.n	8006af8 <USB_HostInit+0x88>
  {
    if (cfg.speed == USBH_FSLS_SPEED)
 8006ac6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006ac8:	2b01      	cmp	r3, #1
 8006aca:	d10a      	bne.n	8006ae2 <USB_HostInit+0x72>
    {
      /* Force Device Enumeration to FS/LS mode only */
      USBx_HOST->HCFG |= USB_OTG_HCFG_FSLSS;
 8006acc:	68fb      	ldr	r3, [r7, #12]
 8006ace:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8006ad2:	681b      	ldr	r3, [r3, #0]
 8006ad4:	68fa      	ldr	r2, [r7, #12]
 8006ad6:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 8006ada:	f043 0304 	orr.w	r3, r3, #4
 8006ade:	6013      	str	r3, [r2, #0]
 8006ae0:	e014      	b.n	8006b0c <USB_HostInit+0x9c>
    }
    else
    {
      /* Set default Max speed support */
      USBx_HOST->HCFG &= ~(USB_OTG_HCFG_FSLSS);
 8006ae2:	68fb      	ldr	r3, [r7, #12]
 8006ae4:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8006ae8:	681b      	ldr	r3, [r3, #0]
 8006aea:	68fa      	ldr	r2, [r7, #12]
 8006aec:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 8006af0:	f023 0304 	bic.w	r3, r3, #4
 8006af4:	6013      	str	r3, [r2, #0]
 8006af6:	e009      	b.n	8006b0c <USB_HostInit+0x9c>
    }
  }
  else
  {
    /* Set default Max speed support */
    USBx_HOST->HCFG &= ~(USB_OTG_HCFG_FSLSS);
 8006af8:	68fb      	ldr	r3, [r7, #12]
 8006afa:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8006afe:	681b      	ldr	r3, [r3, #0]
 8006b00:	68fa      	ldr	r2, [r7, #12]
 8006b02:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 8006b06:	f023 0304 	bic.w	r3, r3, #4
 8006b0a:	6013      	str	r3, [r2, #0]
  }

  /* Make sure the FIFOs are flushed. */
  if (USB_FlushTxFifo(USBx, 0x10U) != HAL_OK) /* all Tx FIFOs */
 8006b0c:	2110      	movs	r1, #16
 8006b0e:	6878      	ldr	r0, [r7, #4]
 8006b10:	f7ff fe9c 	bl	800684c <USB_FlushTxFifo>
 8006b14:	4603      	mov	r3, r0
 8006b16:	2b00      	cmp	r3, #0
 8006b18:	d001      	beq.n	8006b1e <USB_HostInit+0xae>
  {
    ret = HAL_ERROR;
 8006b1a:	2301      	movs	r3, #1
 8006b1c:	75fb      	strb	r3, [r7, #23]
  }

  if (USB_FlushRxFifo(USBx) != HAL_OK)
 8006b1e:	6878      	ldr	r0, [r7, #4]
 8006b20:	f7ff fec8 	bl	80068b4 <USB_FlushRxFifo>
 8006b24:	4603      	mov	r3, r0
 8006b26:	2b00      	cmp	r3, #0
 8006b28:	d001      	beq.n	8006b2e <USB_HostInit+0xbe>
  {
    ret = HAL_ERROR;
 8006b2a:	2301      	movs	r3, #1
 8006b2c:	75fb      	strb	r3, [r7, #23]
  }

  /* Clear all pending HC Interrupts */
  for (i = 0U; i < cfg.Host_channels; i++)
 8006b2e:	2300      	movs	r3, #0
 8006b30:	613b      	str	r3, [r7, #16]
 8006b32:	e015      	b.n	8006b60 <USB_HostInit+0xf0>
  {
    USBx_HC(i)->HCINT = 0xFFFFFFFFU;
 8006b34:	693b      	ldr	r3, [r7, #16]
 8006b36:	015a      	lsls	r2, r3, #5
 8006b38:	68fb      	ldr	r3, [r7, #12]
 8006b3a:	4413      	add	r3, r2
 8006b3c:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8006b40:	461a      	mov	r2, r3
 8006b42:	f04f 33ff 	mov.w	r3, #4294967295
 8006b46:	6093      	str	r3, [r2, #8]
    USBx_HC(i)->HCINTMSK = 0U;
 8006b48:	693b      	ldr	r3, [r7, #16]
 8006b4a:	015a      	lsls	r2, r3, #5
 8006b4c:	68fb      	ldr	r3, [r7, #12]
 8006b4e:	4413      	add	r3, r2
 8006b50:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8006b54:	461a      	mov	r2, r3
 8006b56:	2300      	movs	r3, #0
 8006b58:	60d3      	str	r3, [r2, #12]
  for (i = 0U; i < cfg.Host_channels; i++)
 8006b5a:	693b      	ldr	r3, [r7, #16]
 8006b5c:	3301      	adds	r3, #1
 8006b5e:	613b      	str	r3, [r7, #16]
 8006b60:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006b62:	693a      	ldr	r2, [r7, #16]
 8006b64:	429a      	cmp	r2, r3
 8006b66:	d3e5      	bcc.n	8006b34 <USB_HostInit+0xc4>
  }

  /* Disable all interrupts. */
  USBx->GINTMSK = 0U;
 8006b68:	687b      	ldr	r3, [r7, #4]
 8006b6a:	2200      	movs	r2, #0
 8006b6c:	619a      	str	r2, [r3, #24]

  /* Clear any pending interrupts */
  USBx->GINTSTS = 0xFFFFFFFFU;
 8006b6e:	687b      	ldr	r3, [r7, #4]
 8006b70:	f04f 32ff 	mov.w	r2, #4294967295
 8006b74:	615a      	str	r2, [r3, #20]

  if ((USBx->CID & (0x1U << 8)) != 0U)
 8006b76:	687b      	ldr	r3, [r7, #4]
 8006b78:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8006b7a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8006b7e:	2b00      	cmp	r3, #0
 8006b80:	d00b      	beq.n	8006b9a <USB_HostInit+0x12a>
  {
    /* set Rx FIFO size */
    USBx->GRXFSIZ  = 0x200U;
 8006b82:	687b      	ldr	r3, [r7, #4]
 8006b84:	f44f 7200 	mov.w	r2, #512	; 0x200
 8006b88:	625a      	str	r2, [r3, #36]	; 0x24
    USBx->DIEPTXF0_HNPTXFSIZ = (uint32_t)(((0x100U << 16) & USB_OTG_NPTXFD) | 0x200U);
 8006b8a:	687b      	ldr	r3, [r7, #4]
 8006b8c:	4a13      	ldr	r2, [pc, #76]	; (8006bdc <USB_HostInit+0x16c>)
 8006b8e:	629a      	str	r2, [r3, #40]	; 0x28
    USBx->HPTXFSIZ = (uint32_t)(((0xE0U << 16) & USB_OTG_HPTXFSIZ_PTXFD) | 0x300U);
 8006b90:	687b      	ldr	r3, [r7, #4]
 8006b92:	4a13      	ldr	r2, [pc, #76]	; (8006be0 <USB_HostInit+0x170>)
 8006b94:	f8c3 2100 	str.w	r2, [r3, #256]	; 0x100
 8006b98:	e009      	b.n	8006bae <USB_HostInit+0x13e>
  }
  else
  {
    /* set Rx FIFO size */
    USBx->GRXFSIZ  = 0x80U;
 8006b9a:	687b      	ldr	r3, [r7, #4]
 8006b9c:	2280      	movs	r2, #128	; 0x80
 8006b9e:	625a      	str	r2, [r3, #36]	; 0x24
    USBx->DIEPTXF0_HNPTXFSIZ = (uint32_t)(((0x60U << 16) & USB_OTG_NPTXFD) | 0x80U);
 8006ba0:	687b      	ldr	r3, [r7, #4]
 8006ba2:	4a10      	ldr	r2, [pc, #64]	; (8006be4 <USB_HostInit+0x174>)
 8006ba4:	629a      	str	r2, [r3, #40]	; 0x28
    USBx->HPTXFSIZ = (uint32_t)(((0x40U << 16)& USB_OTG_HPTXFSIZ_PTXFD) | 0xE0U);
 8006ba6:	687b      	ldr	r3, [r7, #4]
 8006ba8:	4a0f      	ldr	r2, [pc, #60]	; (8006be8 <USB_HostInit+0x178>)
 8006baa:	f8c3 2100 	str.w	r2, [r3, #256]	; 0x100
  }

  /* Enable the common interrupts */
  if (cfg.dma_enable == 0U)
 8006bae:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006bb0:	2b00      	cmp	r3, #0
 8006bb2:	d105      	bne.n	8006bc0 <USB_HostInit+0x150>
  {
    USBx->GINTMSK |= USB_OTG_GINTMSK_RXFLVLM;
 8006bb4:	687b      	ldr	r3, [r7, #4]
 8006bb6:	699b      	ldr	r3, [r3, #24]
 8006bb8:	f043 0210 	orr.w	r2, r3, #16
 8006bbc:	687b      	ldr	r3, [r7, #4]
 8006bbe:	619a      	str	r2, [r3, #24]
  }

  /* Enable interrupts matching to the Host mode ONLY */
  USBx->GINTMSK |= (USB_OTG_GINTMSK_PRTIM            | USB_OTG_GINTMSK_HCIM | \
 8006bc0:	687b      	ldr	r3, [r7, #4]
 8006bc2:	699a      	ldr	r2, [r3, #24]
 8006bc4:	4b09      	ldr	r3, [pc, #36]	; (8006bec <USB_HostInit+0x17c>)
 8006bc6:	4313      	orrs	r3, r2
 8006bc8:	687a      	ldr	r2, [r7, #4]
 8006bca:	6193      	str	r3, [r2, #24]
                    USB_OTG_GINTMSK_SOFM             | USB_OTG_GINTSTS_DISCINT | \
                    USB_OTG_GINTMSK_PXFRM_IISOOXFRM  | USB_OTG_GINTMSK_WUIM);

  return ret;
 8006bcc:	7dfb      	ldrb	r3, [r7, #23]
}
 8006bce:	4618      	mov	r0, r3
 8006bd0:	3718      	adds	r7, #24
 8006bd2:	46bd      	mov	sp, r7
 8006bd4:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 8006bd8:	b004      	add	sp, #16
 8006bda:	4770      	bx	lr
 8006bdc:	01000200 	.word	0x01000200
 8006be0:	00e00300 	.word	0x00e00300
 8006be4:	00600080 	.word	0x00600080
 8006be8:	004000e0 	.word	0x004000e0
 8006bec:	a3200008 	.word	0xa3200008

08006bf0 <USB_InitFSLSPClkSel>:
  *           HCFG_48_MHZ : Full Speed 48 MHz Clock
  *           HCFG_6_MHZ : Low Speed 6 MHz Clock
  * @retval HAL status
  */
HAL_StatusTypeDef USB_InitFSLSPClkSel(USB_OTG_GlobalTypeDef *USBx, uint8_t freq)
{
 8006bf0:	b480      	push	{r7}
 8006bf2:	b085      	sub	sp, #20
 8006bf4:	af00      	add	r7, sp, #0
 8006bf6:	6078      	str	r0, [r7, #4]
 8006bf8:	460b      	mov	r3, r1
 8006bfa:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8006bfc:	687b      	ldr	r3, [r7, #4]
 8006bfe:	60fb      	str	r3, [r7, #12]

  USBx_HOST->HCFG &= ~(USB_OTG_HCFG_FSLSPCS);
 8006c00:	68fb      	ldr	r3, [r7, #12]
 8006c02:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8006c06:	681b      	ldr	r3, [r3, #0]
 8006c08:	68fa      	ldr	r2, [r7, #12]
 8006c0a:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 8006c0e:	f023 0303 	bic.w	r3, r3, #3
 8006c12:	6013      	str	r3, [r2, #0]
  USBx_HOST->HCFG |= (uint32_t)freq & USB_OTG_HCFG_FSLSPCS;
 8006c14:	68fb      	ldr	r3, [r7, #12]
 8006c16:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8006c1a:	681a      	ldr	r2, [r3, #0]
 8006c1c:	78fb      	ldrb	r3, [r7, #3]
 8006c1e:	f003 0303 	and.w	r3, r3, #3
 8006c22:	68f9      	ldr	r1, [r7, #12]
 8006c24:	f501 6180 	add.w	r1, r1, #1024	; 0x400
 8006c28:	4313      	orrs	r3, r2
 8006c2a:	600b      	str	r3, [r1, #0]

  if (freq == HCFG_48_MHZ)
 8006c2c:	78fb      	ldrb	r3, [r7, #3]
 8006c2e:	2b01      	cmp	r3, #1
 8006c30:	d107      	bne.n	8006c42 <USB_InitFSLSPClkSel+0x52>
  {
    USBx_HOST->HFIR = 48000U;
 8006c32:	68fb      	ldr	r3, [r7, #12]
 8006c34:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8006c38:	461a      	mov	r2, r3
 8006c3a:	f64b 3380 	movw	r3, #48000	; 0xbb80
 8006c3e:	6053      	str	r3, [r2, #4]
 8006c40:	e009      	b.n	8006c56 <USB_InitFSLSPClkSel+0x66>
  }
  else if (freq == HCFG_6_MHZ)
 8006c42:	78fb      	ldrb	r3, [r7, #3]
 8006c44:	2b02      	cmp	r3, #2
 8006c46:	d106      	bne.n	8006c56 <USB_InitFSLSPClkSel+0x66>
  {
    USBx_HOST->HFIR = 6000U;
 8006c48:	68fb      	ldr	r3, [r7, #12]
 8006c4a:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8006c4e:	461a      	mov	r2, r3
 8006c50:	f241 7370 	movw	r3, #6000	; 0x1770
 8006c54:	6053      	str	r3, [r2, #4]
  else
  {
    /* ... */
  }

  return HAL_OK;
 8006c56:	2300      	movs	r3, #0
}
 8006c58:	4618      	mov	r0, r3
 8006c5a:	3714      	adds	r7, #20
 8006c5c:	46bd      	mov	sp, r7
 8006c5e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006c62:	4770      	bx	lr

08006c64 <USB_HC_ReadInterrupt>:
  * @brief Read all host channel interrupts status
  * @param  USBx  Selected device
  * @retval HAL state
  */
uint32_t USB_HC_ReadInterrupt(USB_OTG_GlobalTypeDef *USBx)
{
 8006c64:	b480      	push	{r7}
 8006c66:	b085      	sub	sp, #20
 8006c68:	af00      	add	r7, sp, #0
 8006c6a:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8006c6c:	687b      	ldr	r3, [r7, #4]
 8006c6e:	60fb      	str	r3, [r7, #12]

  return ((USBx_HOST->HAINT) & 0xFFFFU);
 8006c70:	68fb      	ldr	r3, [r7, #12]
 8006c72:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8006c76:	695b      	ldr	r3, [r3, #20]
 8006c78:	b29b      	uxth	r3, r3
}
 8006c7a:	4618      	mov	r0, r3
 8006c7c:	3714      	adds	r7, #20
 8006c7e:	46bd      	mov	sp, r7
 8006c80:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006c84:	4770      	bx	lr

08006c86 <USB_HC_Halt>:
  * @param  hc_num  Host Channel number
  *         This parameter can be a value from 1 to 15
  * @retval HAL state
  */
HAL_StatusTypeDef USB_HC_Halt(USB_OTG_GlobalTypeDef *USBx, uint8_t hc_num)
{
 8006c86:	b480      	push	{r7}
 8006c88:	b089      	sub	sp, #36	; 0x24
 8006c8a:	af00      	add	r7, sp, #0
 8006c8c:	6078      	str	r0, [r7, #4]
 8006c8e:	460b      	mov	r3, r1
 8006c90:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8006c92:	687b      	ldr	r3, [r7, #4]
 8006c94:	61fb      	str	r3, [r7, #28]
  uint32_t hcnum = (uint32_t)hc_num;
 8006c96:	78fb      	ldrb	r3, [r7, #3]
 8006c98:	61bb      	str	r3, [r7, #24]
  __IO uint32_t count = 0U;
 8006c9a:	2300      	movs	r3, #0
 8006c9c:	60fb      	str	r3, [r7, #12]
  uint32_t HcEpType = (USBx_HC(hcnum)->HCCHAR & USB_OTG_HCCHAR_EPTYP) >> 18;
 8006c9e:	69bb      	ldr	r3, [r7, #24]
 8006ca0:	015a      	lsls	r2, r3, #5
 8006ca2:	69fb      	ldr	r3, [r7, #28]
 8006ca4:	4413      	add	r3, r2
 8006ca6:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8006caa:	681b      	ldr	r3, [r3, #0]
 8006cac:	0c9b      	lsrs	r3, r3, #18
 8006cae:	f003 0303 	and.w	r3, r3, #3
 8006cb2:	617b      	str	r3, [r7, #20]
  uint32_t ChannelEna = (USBx_HC(hcnum)->HCCHAR & USB_OTG_HCCHAR_CHENA) >> 31;
 8006cb4:	69bb      	ldr	r3, [r7, #24]
 8006cb6:	015a      	lsls	r2, r3, #5
 8006cb8:	69fb      	ldr	r3, [r7, #28]
 8006cba:	4413      	add	r3, r2
 8006cbc:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8006cc0:	681b      	ldr	r3, [r3, #0]
 8006cc2:	0fdb      	lsrs	r3, r3, #31
 8006cc4:	f003 0301 	and.w	r3, r3, #1
 8006cc8:	613b      	str	r3, [r7, #16]

  if (((USBx->GAHBCFG & USB_OTG_GAHBCFG_DMAEN) == USB_OTG_GAHBCFG_DMAEN) &&
 8006cca:	687b      	ldr	r3, [r7, #4]
 8006ccc:	689b      	ldr	r3, [r3, #8]
 8006cce:	f003 0320 	and.w	r3, r3, #32
 8006cd2:	2b20      	cmp	r3, #32
 8006cd4:	d104      	bne.n	8006ce0 <USB_HC_Halt+0x5a>
 8006cd6:	693b      	ldr	r3, [r7, #16]
 8006cd8:	2b00      	cmp	r3, #0
 8006cda:	d101      	bne.n	8006ce0 <USB_HC_Halt+0x5a>
      (ChannelEna == 0U))
  {
    return HAL_OK;
 8006cdc:	2300      	movs	r3, #0
 8006cde:	e0c8      	b.n	8006e72 <USB_HC_Halt+0x1ec>
  }

  /* Check for space in the request queue to issue the halt. */
  if ((HcEpType == HCCHAR_CTRL) || (HcEpType == HCCHAR_BULK))
 8006ce0:	697b      	ldr	r3, [r7, #20]
 8006ce2:	2b00      	cmp	r3, #0
 8006ce4:	d002      	beq.n	8006cec <USB_HC_Halt+0x66>
 8006ce6:	697b      	ldr	r3, [r7, #20]
 8006ce8:	2b02      	cmp	r3, #2
 8006cea:	d163      	bne.n	8006db4 <USB_HC_Halt+0x12e>
  {
    USBx_HC(hcnum)->HCCHAR |= USB_OTG_HCCHAR_CHDIS;
 8006cec:	69bb      	ldr	r3, [r7, #24]
 8006cee:	015a      	lsls	r2, r3, #5
 8006cf0:	69fb      	ldr	r3, [r7, #28]
 8006cf2:	4413      	add	r3, r2
 8006cf4:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8006cf8:	681b      	ldr	r3, [r3, #0]
 8006cfa:	69ba      	ldr	r2, [r7, #24]
 8006cfc:	0151      	lsls	r1, r2, #5
 8006cfe:	69fa      	ldr	r2, [r7, #28]
 8006d00:	440a      	add	r2, r1
 8006d02:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8006d06:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 8006d0a:	6013      	str	r3, [r2, #0]

    if ((USBx->GAHBCFG & USB_OTG_GAHBCFG_DMAEN) == 0U)
 8006d0c:	687b      	ldr	r3, [r7, #4]
 8006d0e:	689b      	ldr	r3, [r3, #8]
 8006d10:	f003 0320 	and.w	r3, r3, #32
 8006d14:	2b00      	cmp	r3, #0
 8006d16:	f040 80ab 	bne.w	8006e70 <USB_HC_Halt+0x1ea>
    {
      if ((USBx->HNPTXSTS & (0xFFU << 16)) == 0U)
 8006d1a:	687b      	ldr	r3, [r7, #4]
 8006d1c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006d1e:	f403 037f 	and.w	r3, r3, #16711680	; 0xff0000
 8006d22:	2b00      	cmp	r3, #0
 8006d24:	d133      	bne.n	8006d8e <USB_HC_Halt+0x108>
      {
        USBx_HC(hcnum)->HCCHAR &= ~USB_OTG_HCCHAR_CHENA;
 8006d26:	69bb      	ldr	r3, [r7, #24]
 8006d28:	015a      	lsls	r2, r3, #5
 8006d2a:	69fb      	ldr	r3, [r7, #28]
 8006d2c:	4413      	add	r3, r2
 8006d2e:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8006d32:	681b      	ldr	r3, [r3, #0]
 8006d34:	69ba      	ldr	r2, [r7, #24]
 8006d36:	0151      	lsls	r1, r2, #5
 8006d38:	69fa      	ldr	r2, [r7, #28]
 8006d3a:	440a      	add	r2, r1
 8006d3c:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8006d40:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 8006d44:	6013      	str	r3, [r2, #0]
        USBx_HC(hcnum)->HCCHAR |= USB_OTG_HCCHAR_CHENA;
 8006d46:	69bb      	ldr	r3, [r7, #24]
 8006d48:	015a      	lsls	r2, r3, #5
 8006d4a:	69fb      	ldr	r3, [r7, #28]
 8006d4c:	4413      	add	r3, r2
 8006d4e:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8006d52:	681b      	ldr	r3, [r3, #0]
 8006d54:	69ba      	ldr	r2, [r7, #24]
 8006d56:	0151      	lsls	r1, r2, #5
 8006d58:	69fa      	ldr	r2, [r7, #28]
 8006d5a:	440a      	add	r2, r1
 8006d5c:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8006d60:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8006d64:	6013      	str	r3, [r2, #0]
        do
        {
          count++;
 8006d66:	68fb      	ldr	r3, [r7, #12]
 8006d68:	3301      	adds	r3, #1
 8006d6a:	60fb      	str	r3, [r7, #12]

          if (count > 1000U)
 8006d6c:	68fb      	ldr	r3, [r7, #12]
 8006d6e:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8006d72:	d81d      	bhi.n	8006db0 <USB_HC_Halt+0x12a>
          {
            break;
          }
        } while ((USBx_HC(hcnum)->HCCHAR & USB_OTG_HCCHAR_CHENA) == USB_OTG_HCCHAR_CHENA);
 8006d74:	69bb      	ldr	r3, [r7, #24]
 8006d76:	015a      	lsls	r2, r3, #5
 8006d78:	69fb      	ldr	r3, [r7, #28]
 8006d7a:	4413      	add	r3, r2
 8006d7c:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8006d80:	681b      	ldr	r3, [r3, #0]
 8006d82:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8006d86:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8006d8a:	d0ec      	beq.n	8006d66 <USB_HC_Halt+0xe0>
    if ((USBx->GAHBCFG & USB_OTG_GAHBCFG_DMAEN) == 0U)
 8006d8c:	e070      	b.n	8006e70 <USB_HC_Halt+0x1ea>
      }
      else
      {
        USBx_HC(hcnum)->HCCHAR |= USB_OTG_HCCHAR_CHENA;
 8006d8e:	69bb      	ldr	r3, [r7, #24]
 8006d90:	015a      	lsls	r2, r3, #5
 8006d92:	69fb      	ldr	r3, [r7, #28]
 8006d94:	4413      	add	r3, r2
 8006d96:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8006d9a:	681b      	ldr	r3, [r3, #0]
 8006d9c:	69ba      	ldr	r2, [r7, #24]
 8006d9e:	0151      	lsls	r1, r2, #5
 8006da0:	69fa      	ldr	r2, [r7, #28]
 8006da2:	440a      	add	r2, r1
 8006da4:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8006da8:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8006dac:	6013      	str	r3, [r2, #0]
    if ((USBx->GAHBCFG & USB_OTG_GAHBCFG_DMAEN) == 0U)
 8006dae:	e05f      	b.n	8006e70 <USB_HC_Halt+0x1ea>
            break;
 8006db0:	bf00      	nop
    if ((USBx->GAHBCFG & USB_OTG_GAHBCFG_DMAEN) == 0U)
 8006db2:	e05d      	b.n	8006e70 <USB_HC_Halt+0x1ea>
      }
    }
  }
  else
  {
    USBx_HC(hcnum)->HCCHAR |= USB_OTG_HCCHAR_CHDIS;
 8006db4:	69bb      	ldr	r3, [r7, #24]
 8006db6:	015a      	lsls	r2, r3, #5
 8006db8:	69fb      	ldr	r3, [r7, #28]
 8006dba:	4413      	add	r3, r2
 8006dbc:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8006dc0:	681b      	ldr	r3, [r3, #0]
 8006dc2:	69ba      	ldr	r2, [r7, #24]
 8006dc4:	0151      	lsls	r1, r2, #5
 8006dc6:	69fa      	ldr	r2, [r7, #28]
 8006dc8:	440a      	add	r2, r1
 8006dca:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8006dce:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 8006dd2:	6013      	str	r3, [r2, #0]

    if ((USBx_HOST->HPTXSTS & (0xFFU << 16)) == 0U)
 8006dd4:	69fb      	ldr	r3, [r7, #28]
 8006dd6:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8006dda:	691b      	ldr	r3, [r3, #16]
 8006ddc:	f403 037f 	and.w	r3, r3, #16711680	; 0xff0000
 8006de0:	2b00      	cmp	r3, #0
 8006de2:	d133      	bne.n	8006e4c <USB_HC_Halt+0x1c6>
    {
      USBx_HC(hcnum)->HCCHAR &= ~USB_OTG_HCCHAR_CHENA;
 8006de4:	69bb      	ldr	r3, [r7, #24]
 8006de6:	015a      	lsls	r2, r3, #5
 8006de8:	69fb      	ldr	r3, [r7, #28]
 8006dea:	4413      	add	r3, r2
 8006dec:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8006df0:	681b      	ldr	r3, [r3, #0]
 8006df2:	69ba      	ldr	r2, [r7, #24]
 8006df4:	0151      	lsls	r1, r2, #5
 8006df6:	69fa      	ldr	r2, [r7, #28]
 8006df8:	440a      	add	r2, r1
 8006dfa:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8006dfe:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 8006e02:	6013      	str	r3, [r2, #0]
      USBx_HC(hcnum)->HCCHAR |= USB_OTG_HCCHAR_CHENA;
 8006e04:	69bb      	ldr	r3, [r7, #24]
 8006e06:	015a      	lsls	r2, r3, #5
 8006e08:	69fb      	ldr	r3, [r7, #28]
 8006e0a:	4413      	add	r3, r2
 8006e0c:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8006e10:	681b      	ldr	r3, [r3, #0]
 8006e12:	69ba      	ldr	r2, [r7, #24]
 8006e14:	0151      	lsls	r1, r2, #5
 8006e16:	69fa      	ldr	r2, [r7, #28]
 8006e18:	440a      	add	r2, r1
 8006e1a:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8006e1e:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8006e22:	6013      	str	r3, [r2, #0]
      do
      {
        count++;
 8006e24:	68fb      	ldr	r3, [r7, #12]
 8006e26:	3301      	adds	r3, #1
 8006e28:	60fb      	str	r3, [r7, #12]

        if (count > 1000U)
 8006e2a:	68fb      	ldr	r3, [r7, #12]
 8006e2c:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8006e30:	d81d      	bhi.n	8006e6e <USB_HC_Halt+0x1e8>
        {
          break;
        }
      } while ((USBx_HC(hcnum)->HCCHAR & USB_OTG_HCCHAR_CHENA) == USB_OTG_HCCHAR_CHENA);
 8006e32:	69bb      	ldr	r3, [r7, #24]
 8006e34:	015a      	lsls	r2, r3, #5
 8006e36:	69fb      	ldr	r3, [r7, #28]
 8006e38:	4413      	add	r3, r2
 8006e3a:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8006e3e:	681b      	ldr	r3, [r3, #0]
 8006e40:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8006e44:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8006e48:	d0ec      	beq.n	8006e24 <USB_HC_Halt+0x19e>
 8006e4a:	e011      	b.n	8006e70 <USB_HC_Halt+0x1ea>
    }
    else
    {
      USBx_HC(hcnum)->HCCHAR |= USB_OTG_HCCHAR_CHENA;
 8006e4c:	69bb      	ldr	r3, [r7, #24]
 8006e4e:	015a      	lsls	r2, r3, #5
 8006e50:	69fb      	ldr	r3, [r7, #28]
 8006e52:	4413      	add	r3, r2
 8006e54:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8006e58:	681b      	ldr	r3, [r3, #0]
 8006e5a:	69ba      	ldr	r2, [r7, #24]
 8006e5c:	0151      	lsls	r1, r2, #5
 8006e5e:	69fa      	ldr	r2, [r7, #28]
 8006e60:	440a      	add	r2, r1
 8006e62:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8006e66:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8006e6a:	6013      	str	r3, [r2, #0]
 8006e6c:	e000      	b.n	8006e70 <USB_HC_Halt+0x1ea>
          break;
 8006e6e:	bf00      	nop
    }
  }

  return HAL_OK;
 8006e70:	2300      	movs	r3, #0
}
 8006e72:	4618      	mov	r0, r3
 8006e74:	3724      	adds	r7, #36	; 0x24
 8006e76:	46bd      	mov	sp, r7
 8006e78:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006e7c:	4770      	bx	lr
	...

08006e80 <_tx_byte_pool_create>:
/*  09-30-2020     Yuxin Zhou               Modified comment(s),          */
/*                                            resulting in version 6.1    */
/*                                                                        */
/**************************************************************************/
UINT  _tx_byte_pool_create(TX_BYTE_POOL *pool_ptr, CHAR *name_ptr, VOID *pool_start, ULONG pool_size)
{
 8006e80:	b580      	push	{r7, lr}
 8006e82:	b08e      	sub	sp, #56	; 0x38
 8006e84:	af00      	add	r7, sp, #0
 8006e86:	60f8      	str	r0, [r7, #12]
 8006e88:	60b9      	str	r1, [r7, #8]
 8006e8a:	607a      	str	r2, [r7, #4]
 8006e8c:	603b      	str	r3, [r7, #0]
TX_BYTE_POOL        *previous_pool;
ALIGN_TYPE          *free_ptr;


    /* Initialize the byte pool control block to all zeros.  */
    TX_MEMSET(pool_ptr, 0, (sizeof(TX_BYTE_POOL)));
 8006e8e:	2234      	movs	r2, #52	; 0x34
 8006e90:	2100      	movs	r1, #0
 8006e92:	68f8      	ldr	r0, [r7, #12]
 8006e94:	f001 fa84 	bl	80083a0 <memset>

    /* Round the pool size down to something that is evenly divisible by
       an ULONG.  */
    pool_size =   (pool_size/(sizeof(ALIGN_TYPE))) * (sizeof(ALIGN_TYPE));
 8006e98:	683b      	ldr	r3, [r7, #0]
 8006e9a:	f023 0303 	bic.w	r3, r3, #3
 8006e9e:	603b      	str	r3, [r7, #0]

    /* Setup the basic byte pool fields.  */
    pool_ptr -> tx_byte_pool_name =              name_ptr;
 8006ea0:	68fb      	ldr	r3, [r7, #12]
 8006ea2:	68ba      	ldr	r2, [r7, #8]
 8006ea4:	605a      	str	r2, [r3, #4]

    /* Save the start and size of the pool.  */
    pool_ptr -> tx_byte_pool_start =   TX_VOID_TO_UCHAR_POINTER_CONVERT(pool_start);
 8006ea6:	68fb      	ldr	r3, [r7, #12]
 8006ea8:	687a      	ldr	r2, [r7, #4]
 8006eaa:	619a      	str	r2, [r3, #24]
    pool_ptr -> tx_byte_pool_size =    pool_size;
 8006eac:	68fb      	ldr	r3, [r7, #12]
 8006eae:	683a      	ldr	r2, [r7, #0]
 8006eb0:	61da      	str	r2, [r3, #28]

    /* Setup memory list to the beginning as well as the search pointer.  */
    pool_ptr -> tx_byte_pool_list =    TX_VOID_TO_UCHAR_POINTER_CONVERT(pool_start);
 8006eb2:	68fb      	ldr	r3, [r7, #12]
 8006eb4:	687a      	ldr	r2, [r7, #4]
 8006eb6:	611a      	str	r2, [r3, #16]
    pool_ptr -> tx_byte_pool_search =  TX_VOID_TO_UCHAR_POINTER_CONVERT(pool_start);
 8006eb8:	68fb      	ldr	r3, [r7, #12]
 8006eba:	687a      	ldr	r2, [r7, #4]
 8006ebc:	615a      	str	r2, [r3, #20]

    /* Initially, the pool will have two blocks.  One large block at the
       beginning that is available and a small allocated block at the end
       of the pool that is there just for the algorithm.  Be sure to count
       the available block's header in the available bytes count.  */
    pool_ptr -> tx_byte_pool_available =   pool_size - ((sizeof(VOID *)) + (sizeof(ALIGN_TYPE)));
 8006ebe:	683b      	ldr	r3, [r7, #0]
 8006ec0:	f1a3 0208 	sub.w	r2, r3, #8
 8006ec4:	68fb      	ldr	r3, [r7, #12]
 8006ec6:	609a      	str	r2, [r3, #8]
    pool_ptr -> tx_byte_pool_fragments =   ((UINT) 2);
 8006ec8:	68fb      	ldr	r3, [r7, #12]
 8006eca:	2202      	movs	r2, #2
 8006ecc:	60da      	str	r2, [r3, #12]
    /* Each block contains a "next" pointer that points to the next block in the pool followed by a ALIGN_TYPE
       field that contains either the constant TX_BYTE_BLOCK_FREE (if the block is free) or a pointer to the
       owning pool (if the block is allocated).  */

    /* Calculate the end of the pool's memory area.  */
    block_ptr =  TX_VOID_TO_UCHAR_POINTER_CONVERT(pool_start);
 8006ece:	687b      	ldr	r3, [r7, #4]
 8006ed0:	637b      	str	r3, [r7, #52]	; 0x34
    block_ptr =  TX_UCHAR_POINTER_ADD(block_ptr, pool_size);
 8006ed2:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8006ed4:	683b      	ldr	r3, [r7, #0]
 8006ed6:	4413      	add	r3, r2
 8006ed8:	637b      	str	r3, [r7, #52]	; 0x34

    /* Backup the end of the pool pointer and build the pre-allocated block.  */
    block_ptr =  TX_UCHAR_POINTER_SUB(block_ptr, (sizeof(ALIGN_TYPE)));
 8006eda:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8006edc:	3b04      	subs	r3, #4
 8006ede:	637b      	str	r3, [r7, #52]	; 0x34

    /* Cast the pool pointer into a ULONG.  */
    temp_ptr =             TX_BYTE_POOL_TO_UCHAR_POINTER_CONVERT(pool_ptr);
 8006ee0:	68fb      	ldr	r3, [r7, #12]
 8006ee2:	633b      	str	r3, [r7, #48]	; 0x30
    block_indirect_ptr =   TX_UCHAR_TO_INDIRECT_UCHAR_POINTER_CONVERT(block_ptr);
 8006ee4:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8006ee6:	62fb      	str	r3, [r7, #44]	; 0x2c
    *block_indirect_ptr =  temp_ptr;
 8006ee8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006eea:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8006eec:	601a      	str	r2, [r3, #0]

    block_ptr =            TX_UCHAR_POINTER_SUB(block_ptr, (sizeof(UCHAR *)));
 8006eee:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8006ef0:	3b04      	subs	r3, #4
 8006ef2:	637b      	str	r3, [r7, #52]	; 0x34
    block_indirect_ptr =   TX_UCHAR_TO_INDIRECT_UCHAR_POINTER_CONVERT(block_ptr);
 8006ef4:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8006ef6:	62fb      	str	r3, [r7, #44]	; 0x2c
    *block_indirect_ptr =  TX_VOID_TO_UCHAR_POINTER_CONVERT(pool_start);
 8006ef8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006efa:	687a      	ldr	r2, [r7, #4]
 8006efc:	601a      	str	r2, [r3, #0]

    /* Now setup the large available block in the pool.  */
    temp_ptr =             TX_VOID_TO_UCHAR_POINTER_CONVERT(pool_start);
 8006efe:	687b      	ldr	r3, [r7, #4]
 8006f00:	633b      	str	r3, [r7, #48]	; 0x30
    block_indirect_ptr =   TX_UCHAR_TO_INDIRECT_UCHAR_POINTER_CONVERT(temp_ptr);
 8006f02:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006f04:	62fb      	str	r3, [r7, #44]	; 0x2c
    *block_indirect_ptr =  block_ptr;
 8006f06:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006f08:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8006f0a:	601a      	str	r2, [r3, #0]
    block_ptr =            TX_VOID_TO_UCHAR_POINTER_CONVERT(pool_start);
 8006f0c:	687b      	ldr	r3, [r7, #4]
 8006f0e:	637b      	str	r3, [r7, #52]	; 0x34
    block_ptr =            TX_UCHAR_POINTER_ADD(block_ptr, (sizeof(UCHAR *)));
 8006f10:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8006f12:	3304      	adds	r3, #4
 8006f14:	637b      	str	r3, [r7, #52]	; 0x34
    free_ptr =             TX_UCHAR_TO_ALIGN_TYPE_POINTER_CONVERT(block_ptr);
 8006f16:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8006f18:	62bb      	str	r3, [r7, #40]	; 0x28
    *free_ptr =            TX_BYTE_BLOCK_FREE;
 8006f1a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006f1c:	4a1f      	ldr	r2, [pc, #124]	; (8006f9c <_tx_byte_pool_create+0x11c>)
 8006f1e:	601a      	str	r2, [r3, #0]

    /* Clear the owner id.  */
    pool_ptr -> tx_byte_pool_owner =  TX_NULL;
 8006f20:	68fb      	ldr	r3, [r7, #12]
 8006f22:	2200      	movs	r2, #0
 8006f24:	621a      	str	r2, [r3, #32]
{
unsigned int posture;
#ifdef TX_PORT_USE_BASEPRI
    __asm__ volatile ("MRS  %0, BASEPRI ": "=r" (posture));
#else
    __asm__ volatile ("MRS  %0, PRIMASK ": "=r" (posture));
 8006f26:	f3ef 8310 	mrs	r3, PRIMASK
 8006f2a:	61bb      	str	r3, [r7, #24]
#endif
    return(posture);
 8006f2c:	69bb      	ldr	r3, [r7, #24]

__attribute__( ( always_inline ) ) static inline unsigned int __disable_interrupts(void)
{
unsigned int int_posture;

    int_posture = __get_interrupt_posture();
 8006f2e:	617b      	str	r3, [r7, #20]

#ifdef TX_PORT_USE_BASEPRI
    __set_basepri_value(TX_PORT_BASEPRI);
#else
    __asm__ volatile ("CPSID i" : : : "memory");
 8006f30:	b672      	cpsid	i
#endif
    return(int_posture);
 8006f32:	697b      	ldr	r3, [r7, #20]

    /* Disable interrupts to place the byte pool on the created list.  */
    TX_DISABLE
 8006f34:	627b      	str	r3, [r7, #36]	; 0x24

    /* Setup the byte pool ID to make it valid.  */
    pool_ptr -> tx_byte_pool_id =  TX_BYTE_POOL_ID;
 8006f36:	68fb      	ldr	r3, [r7, #12]
 8006f38:	4a19      	ldr	r2, [pc, #100]	; (8006fa0 <_tx_byte_pool_create+0x120>)
 8006f3a:	601a      	str	r2, [r3, #0]

    /* Place the byte pool on the list of created byte pools.  First,
       check for an empty list.  */
    if (_tx_byte_pool_created_count == TX_EMPTY)
 8006f3c:	4b19      	ldr	r3, [pc, #100]	; (8006fa4 <_tx_byte_pool_create+0x124>)
 8006f3e:	681b      	ldr	r3, [r3, #0]
 8006f40:	2b00      	cmp	r3, #0
 8006f42:	d109      	bne.n	8006f58 <_tx_byte_pool_create+0xd8>
    {

        /* The created byte pool list is empty.  Add byte pool to empty list.  */
        _tx_byte_pool_created_ptr =                  pool_ptr;
 8006f44:	4a18      	ldr	r2, [pc, #96]	; (8006fa8 <_tx_byte_pool_create+0x128>)
 8006f46:	68fb      	ldr	r3, [r7, #12]
 8006f48:	6013      	str	r3, [r2, #0]
        pool_ptr -> tx_byte_pool_created_next =      pool_ptr;
 8006f4a:	68fb      	ldr	r3, [r7, #12]
 8006f4c:	68fa      	ldr	r2, [r7, #12]
 8006f4e:	62da      	str	r2, [r3, #44]	; 0x2c
        pool_ptr -> tx_byte_pool_created_previous =  pool_ptr;
 8006f50:	68fb      	ldr	r3, [r7, #12]
 8006f52:	68fa      	ldr	r2, [r7, #12]
 8006f54:	631a      	str	r2, [r3, #48]	; 0x30
 8006f56:	e011      	b.n	8006f7c <_tx_byte_pool_create+0xfc>
    }
    else
    {

        /* This list is not NULL, add to the end of the list.  */
        next_pool =      _tx_byte_pool_created_ptr;
 8006f58:	4b13      	ldr	r3, [pc, #76]	; (8006fa8 <_tx_byte_pool_create+0x128>)
 8006f5a:	681b      	ldr	r3, [r3, #0]
 8006f5c:	623b      	str	r3, [r7, #32]
        previous_pool =  next_pool -> tx_byte_pool_created_previous;
 8006f5e:	6a3b      	ldr	r3, [r7, #32]
 8006f60:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006f62:	61fb      	str	r3, [r7, #28]

        /* Place the new byte pool in the list.  */
        next_pool -> tx_byte_pool_created_previous =  pool_ptr;
 8006f64:	6a3b      	ldr	r3, [r7, #32]
 8006f66:	68fa      	ldr	r2, [r7, #12]
 8006f68:	631a      	str	r2, [r3, #48]	; 0x30
        previous_pool -> tx_byte_pool_created_next =  pool_ptr;
 8006f6a:	69fb      	ldr	r3, [r7, #28]
 8006f6c:	68fa      	ldr	r2, [r7, #12]
 8006f6e:	62da      	str	r2, [r3, #44]	; 0x2c

        /* Setup this byte pool's created links.  */
        pool_ptr -> tx_byte_pool_created_previous =  previous_pool;
 8006f70:	68fb      	ldr	r3, [r7, #12]
 8006f72:	69fa      	ldr	r2, [r7, #28]
 8006f74:	631a      	str	r2, [r3, #48]	; 0x30
        pool_ptr -> tx_byte_pool_created_next =      next_pool;
 8006f76:	68fb      	ldr	r3, [r7, #12]
 8006f78:	6a3a      	ldr	r2, [r7, #32]
 8006f7a:	62da      	str	r2, [r3, #44]	; 0x2c
    }

    /* Increment the number of created byte pools.  */
    _tx_byte_pool_created_count++;
 8006f7c:	4b09      	ldr	r3, [pc, #36]	; (8006fa4 <_tx_byte_pool_create+0x124>)
 8006f7e:	681b      	ldr	r3, [r3, #0]
 8006f80:	3301      	adds	r3, #1
 8006f82:	4a08      	ldr	r2, [pc, #32]	; (8006fa4 <_tx_byte_pool_create+0x124>)
 8006f84:	6013      	str	r3, [r2, #0]
 8006f86:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006f88:	613b      	str	r3, [r7, #16]
    __asm__ volatile ("MSR  PRIMASK,%0": : "r" (int_posture): "memory");
 8006f8a:	693b      	ldr	r3, [r7, #16]
 8006f8c:	f383 8810 	msr	PRIMASK, r3
}
 8006f90:	bf00      	nop

    /* Restore interrupts.  */
    TX_RESTORE

    /* Return TX_SUCCESS.  */
    return(TX_SUCCESS);
 8006f92:	2300      	movs	r3, #0
}
 8006f94:	4618      	mov	r0, r3
 8006f96:	3738      	adds	r7, #56	; 0x38
 8006f98:	46bd      	mov	sp, r7
 8006f9a:	bd80      	pop	{r7, pc}
 8006f9c:	ffffeeee 	.word	0xffffeeee
 8006fa0:	42595445 	.word	0x42595445
 8006fa4:	200063a4 	.word	0x200063a4
 8006fa8:	200063a0 	.word	0x200063a0

08006fac <_tx_initialize_high_level>:
/*  09-30-2020     Yuxin Zhou               Modified comment(s),          */
/*                                            resulting in version 6.1    */
/*                                                                        */
/**************************************************************************/
VOID    _tx_initialize_high_level(VOID)
{
 8006fac:	b580      	push	{r7, lr}
 8006fae:	af00      	add	r7, sp, #0

    /* Initialize the event log, if enabled.  */
    TX_EL_INITIALIZE

    /* Call the thread control initialization function.  */
    _tx_thread_initialize();
 8006fb0:	f000 f960 	bl	8007274 <_tx_thread_initialize>

#ifndef TX_NO_TIMER

    /* Call the timer control initialization function.  */
    _tx_timer_initialize();
 8006fb4:	f000 fe2e 	bl	8007c14 <_tx_timer_initialize>
#endif

#ifndef TX_DISABLE_REDUNDANT_CLEARING

    /* Call the semaphore initialization function.  */
    _tx_semaphore_initialize();
 8006fb8:	4b12      	ldr	r3, [pc, #72]	; (8007004 <_tx_initialize_high_level+0x58>)
 8006fba:	2200      	movs	r2, #0
 8006fbc:	601a      	str	r2, [r3, #0]
 8006fbe:	4b12      	ldr	r3, [pc, #72]	; (8007008 <_tx_initialize_high_level+0x5c>)
 8006fc0:	2200      	movs	r2, #0
 8006fc2:	601a      	str	r2, [r3, #0]

    /* Call the queue initialization function.  */
    _tx_queue_initialize();
 8006fc4:	4b11      	ldr	r3, [pc, #68]	; (800700c <_tx_initialize_high_level+0x60>)
 8006fc6:	2200      	movs	r2, #0
 8006fc8:	601a      	str	r2, [r3, #0]
 8006fca:	4b11      	ldr	r3, [pc, #68]	; (8007010 <_tx_initialize_high_level+0x64>)
 8006fcc:	2200      	movs	r2, #0
 8006fce:	601a      	str	r2, [r3, #0]

    /* Call the event flag initialization function.  */
    _tx_event_flags_initialize();
 8006fd0:	4b10      	ldr	r3, [pc, #64]	; (8007014 <_tx_initialize_high_level+0x68>)
 8006fd2:	2200      	movs	r2, #0
 8006fd4:	601a      	str	r2, [r3, #0]
 8006fd6:	4b10      	ldr	r3, [pc, #64]	; (8007018 <_tx_initialize_high_level+0x6c>)
 8006fd8:	2200      	movs	r2, #0
 8006fda:	601a      	str	r2, [r3, #0]

    /* Call the block pool initialization function.  */
    _tx_block_pool_initialize();
 8006fdc:	4b0f      	ldr	r3, [pc, #60]	; (800701c <_tx_initialize_high_level+0x70>)
 8006fde:	2200      	movs	r2, #0
 8006fe0:	601a      	str	r2, [r3, #0]
 8006fe2:	4b0f      	ldr	r3, [pc, #60]	; (8007020 <_tx_initialize_high_level+0x74>)
 8006fe4:	2200      	movs	r2, #0
 8006fe6:	601a      	str	r2, [r3, #0]

    /* Call the byte pool initialization function.  */
    _tx_byte_pool_initialize();
 8006fe8:	4b0e      	ldr	r3, [pc, #56]	; (8007024 <_tx_initialize_high_level+0x78>)
 8006fea:	2200      	movs	r2, #0
 8006fec:	601a      	str	r2, [r3, #0]
 8006fee:	4b0e      	ldr	r3, [pc, #56]	; (8007028 <_tx_initialize_high_level+0x7c>)
 8006ff0:	2200      	movs	r2, #0
 8006ff2:	601a      	str	r2, [r3, #0]

    /* Call the mutex initialization function.  */
    _tx_mutex_initialize();
 8006ff4:	4b0d      	ldr	r3, [pc, #52]	; (800702c <_tx_initialize_high_level+0x80>)
 8006ff6:	2200      	movs	r2, #0
 8006ff8:	601a      	str	r2, [r3, #0]
 8006ffa:	4b0d      	ldr	r3, [pc, #52]	; (8007030 <_tx_initialize_high_level+0x84>)
 8006ffc:	2200      	movs	r2, #0
 8006ffe:	601a      	str	r2, [r3, #0]
#endif
}
 8007000:	bf00      	nop
 8007002:	bd80      	pop	{r7, pc}
 8007004:	20006378 	.word	0x20006378
 8007008:	2000637c 	.word	0x2000637c
 800700c:	20006380 	.word	0x20006380
 8007010:	20006384 	.word	0x20006384
 8007014:	20006388 	.word	0x20006388
 8007018:	2000638c 	.word	0x2000638c
 800701c:	20006398 	.word	0x20006398
 8007020:	2000639c 	.word	0x2000639c
 8007024:	200063a0 	.word	0x200063a0
 8007028:	200063a4 	.word	0x200063a4
 800702c:	20006390 	.word	0x20006390
 8007030:	20006394 	.word	0x20006394

08007034 <_tx_initialize_kernel_enter>:
/*  09-30-2020     Yuxin Zhou               Modified comment(s),          */
/*                                            resulting in version 6.1    */
/*                                                                        */
/**************************************************************************/
VOID  _tx_initialize_kernel_enter(VOID)
{
 8007034:	b580      	push	{r7, lr}
 8007036:	af00      	add	r7, sp, #0

    /* Determine if the compiler has pre-initialized ThreadX.  */
    if (_tx_thread_system_state != TX_INITIALIZE_ALMOST_DONE)
 8007038:	4b10      	ldr	r3, [pc, #64]	; (800707c <_tx_initialize_kernel_enter+0x48>)
 800703a:	681b      	ldr	r3, [r3, #0]
 800703c:	f113 3f0f 	cmn.w	r3, #252645135	; 0xf0f0f0f
 8007040:	d00c      	beq.n	800705c <_tx_initialize_kernel_enter+0x28>
        /* No, the initialization still needs to take place.  */

        /* Ensure that the system state variable is set to indicate
           initialization is in progress.  Note that this variable is
           later used to represent interrupt nesting.  */
        _tx_thread_system_state =  TX_INITIALIZE_IN_PROGRESS;
 8007042:	4b0e      	ldr	r3, [pc, #56]	; (800707c <_tx_initialize_kernel_enter+0x48>)
 8007044:	f04f 32f0 	mov.w	r2, #4042322160	; 0xf0f0f0f0
 8007048:	601a      	str	r2, [r3, #0]
        /* Call any port specific preprocessing.  */
        TX_PORT_SPECIFIC_PRE_INITIALIZATION

        /* Invoke the low-level initialization to handle all processor specific
           initialization issues.  */
        _tx_initialize_low_level();
 800704a:	f7f9 f8d1 	bl	80001f0 <_tx_initialize_low_level>

        /* Invoke the high-level initialization to exercise all of the
           ThreadX components and the application's initialization
           function.  */
        _tx_initialize_high_level();
 800704e:	f7ff ffad 	bl	8006fac <_tx_initialize_high_level>

        /* Call any port specific post-processing.  */
        TX_PORT_SPECIFIC_POST_INITIALIZATION
 8007052:	4b0b      	ldr	r3, [pc, #44]	; (8007080 <_tx_initialize_kernel_enter+0x4c>)
 8007054:	681b      	ldr	r3, [r3, #0]
 8007056:	3301      	adds	r3, #1
 8007058:	4a09      	ldr	r2, [pc, #36]	; (8007080 <_tx_initialize_kernel_enter+0x4c>)
 800705a:	6013      	str	r3, [r2, #0]
    TX_INITIALIZE_KERNEL_ENTER_EXTENSION

    /* Ensure that the system state variable is set to indicate
       initialization is in progress.  Note that this variable is
       later used to represent interrupt nesting.  */
    _tx_thread_system_state =  TX_INITIALIZE_IN_PROGRESS;
 800705c:	4b07      	ldr	r3, [pc, #28]	; (800707c <_tx_initialize_kernel_enter+0x48>)
 800705e:	f04f 32f0 	mov.w	r2, #4042322160	; 0xf0f0f0f0
 8007062:	601a      	str	r2, [r3, #0]

    /* Call the application provided initialization function.  Pass the
       first available memory address to it.  */
    tx_application_define(_tx_initialize_unused_memory);
 8007064:	4b07      	ldr	r3, [pc, #28]	; (8007084 <_tx_initialize_kernel_enter+0x50>)
 8007066:	681b      	ldr	r3, [r3, #0]
 8007068:	4618      	mov	r0, r3
 800706a:	f7f9 fbbb 	bl	80007e4 <tx_application_define>

    /* Set the system state in preparation for entering the thread
       scheduler.  */
    _tx_thread_system_state =  TX_INITIALIZE_IS_FINISHED;
 800706e:	4b03      	ldr	r3, [pc, #12]	; (800707c <_tx_initialize_kernel_enter+0x48>)
 8007070:	2200      	movs	r2, #0
 8007072:	601a      	str	r2, [r3, #0]

    /* Call any port specific pre-scheduler processing.  */
    TX_PORT_SPECIFIC_PRE_SCHEDULER_INITIALIZATION

    /* Enter the scheduling loop to start executing threads!  */
    _tx_thread_schedule();
 8007074:	f7f9 f8fc 	bl	8000270 <_tx_thread_schedule>
#ifdef TX_SAFETY_CRITICAL

    /* If we ever get here, raise safety critical exception.  */
    TX_SAFETY_CRITICAL_EXCEPTION(__FILE__, __LINE__, 0);
#endif
}
 8007078:	bf00      	nop
 800707a:	bd80      	pop	{r7, pc}
 800707c:	2000000c 	.word	0x2000000c
 8007080:	20006448 	.word	0x20006448
 8007084:	200063a8 	.word	0x200063a8

08007088 <_tx_thread_create>:
/*                                                                        */
/**************************************************************************/
UINT  _tx_thread_create(TX_THREAD *thread_ptr, CHAR *name_ptr, VOID (*entry_function)(ULONG id), ULONG entry_input,
                            VOID *stack_start, ULONG stack_size, UINT priority, UINT preempt_threshold,
                            ULONG time_slice, UINT auto_start)
{
 8007088:	b580      	push	{r7, lr}
 800708a:	b092      	sub	sp, #72	; 0x48
 800708c:	af00      	add	r7, sp, #0
 800708e:	60f8      	str	r0, [r7, #12]
 8007090:	60b9      	str	r1, [r7, #8]
 8007092:	607a      	str	r2, [r7, #4]
 8007094:	603b      	str	r3, [r7, #0]
TX_INTERRUPT_SAVE_AREA

TX_THREAD               *next_thread;
TX_THREAD               *previous_thread;
TX_THREAD               *saved_thread_ptr;
UINT                    saved_threshold =  ((UINT) 0);
 8007096:	2300      	movs	r3, #0
 8007098:	643b      	str	r3, [r7, #64]	; 0x40
#ifndef TX_DISABLE_STACK_FILLING

    /* Set the thread stack to a pattern prior to creating the initial
       stack frame.  This pattern is used by the stack checking routines
       to see how much has been used.  */
    TX_MEMSET(stack_start, ((UCHAR) TX_STACK_FILL), stack_size);
 800709a:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 800709c:	21ef      	movs	r1, #239	; 0xef
 800709e:	6d38      	ldr	r0, [r7, #80]	; 0x50
 80070a0:	f001 f97e 	bl	80083a0 <memset>

    /* Prepare the thread control block prior to placing it on the created
       list.  */

    /* Initialize thread control block to all zeros.  */
    TX_MEMSET(thread_ptr, 0, (sizeof(TX_THREAD)));
 80070a4:	22b0      	movs	r2, #176	; 0xb0
 80070a6:	2100      	movs	r1, #0
 80070a8:	68f8      	ldr	r0, [r7, #12]
 80070aa:	f001 f979 	bl	80083a0 <memset>

    /* Place the supplied parameters into the thread's control block.  */
    thread_ptr -> tx_thread_name =              name_ptr;
 80070ae:	68fb      	ldr	r3, [r7, #12]
 80070b0:	68ba      	ldr	r2, [r7, #8]
 80070b2:	629a      	str	r2, [r3, #40]	; 0x28
    thread_ptr -> tx_thread_entry =             entry_function;
 80070b4:	68fb      	ldr	r3, [r7, #12]
 80070b6:	687a      	ldr	r2, [r7, #4]
 80070b8:	645a      	str	r2, [r3, #68]	; 0x44
    thread_ptr -> tx_thread_entry_parameter =   entry_input;
 80070ba:	68fb      	ldr	r3, [r7, #12]
 80070bc:	683a      	ldr	r2, [r7, #0]
 80070be:	649a      	str	r2, [r3, #72]	; 0x48
    thread_ptr -> tx_thread_stack_start =       stack_start;
 80070c0:	68fb      	ldr	r3, [r7, #12]
 80070c2:	6d3a      	ldr	r2, [r7, #80]	; 0x50
 80070c4:	60da      	str	r2, [r3, #12]
    thread_ptr -> tx_thread_stack_size =        stack_size;
 80070c6:	68fb      	ldr	r3, [r7, #12]
 80070c8:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 80070ca:	615a      	str	r2, [r3, #20]
    thread_ptr -> tx_thread_priority =          priority;
 80070cc:	68fb      	ldr	r3, [r7, #12]
 80070ce:	6dba      	ldr	r2, [r7, #88]	; 0x58
 80070d0:	62da      	str	r2, [r3, #44]	; 0x2c
    thread_ptr -> tx_thread_user_priority =     priority;
 80070d2:	68fb      	ldr	r3, [r7, #12]
 80070d4:	6dba      	ldr	r2, [r7, #88]	; 0x58
 80070d6:	f8c3 2094 	str.w	r2, [r3, #148]	; 0x94
    thread_ptr -> tx_thread_time_slice =        time_slice;
 80070da:	68fb      	ldr	r3, [r7, #12]
 80070dc:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 80070de:	619a      	str	r2, [r3, #24]
    thread_ptr -> tx_thread_new_time_slice =    time_slice;
 80070e0:	68fb      	ldr	r3, [r7, #12]
 80070e2:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 80070e4:	61da      	str	r2, [r3, #28]
    thread_ptr -> tx_thread_inherit_priority =  ((UINT) TX_MAX_PRIORITIES);
 80070e6:	68fb      	ldr	r3, [r7, #12]
 80070e8:	2220      	movs	r2, #32
 80070ea:	f8c3 209c 	str.w	r2, [r3, #156]	; 0x9c

    /* Calculate the end of the thread's stack area.  */
    temp_ptr =  TX_VOID_TO_UCHAR_POINTER_CONVERT(stack_start);
 80070ee:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80070f0:	63fb      	str	r3, [r7, #60]	; 0x3c
    temp_ptr =  (TX_UCHAR_POINTER_ADD(temp_ptr, (stack_size - ((ULONG) 1))));
 80070f2:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80070f4:	3b01      	subs	r3, #1
 80070f6:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 80070f8:	4413      	add	r3, r2
 80070fa:	63fb      	str	r3, [r7, #60]	; 0x3c
    thread_ptr -> tx_thread_stack_end =         TX_UCHAR_TO_VOID_POINTER_CONVERT(temp_ptr);
 80070fc:	68fb      	ldr	r3, [r7, #12]
 80070fe:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 8007100:	611a      	str	r2, [r3, #16]
    thread_ptr -> tx_thread_preempt_threshold =       preempt_threshold;
    thread_ptr -> tx_thread_user_preempt_threshold =  preempt_threshold;
#else

    /* Preemption-threshold is disabled, determine if preemption-threshold was required.  */
    if (priority != preempt_threshold)
 8007102:	6dba      	ldr	r2, [r7, #88]	; 0x58
 8007104:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8007106:	429a      	cmp	r2, r3
 8007108:	d007      	beq.n	800711a <_tx_thread_create+0x92>
    {

        /* Preemption-threshold specified. Since specific preemption-threshold is not supported,
           disable all preemption.  */
        thread_ptr -> tx_thread_preempt_threshold =       ((UINT) 0);
 800710a:	68fb      	ldr	r3, [r7, #12]
 800710c:	2200      	movs	r2, #0
 800710e:	63da      	str	r2, [r3, #60]	; 0x3c
        thread_ptr -> tx_thread_user_preempt_threshold =  ((UINT) 0);
 8007110:	68fb      	ldr	r3, [r7, #12]
 8007112:	2200      	movs	r2, #0
 8007114:	f8c3 2098 	str.w	r2, [r3, #152]	; 0x98
 8007118:	e006      	b.n	8007128 <_tx_thread_create+0xa0>
    }
    else
    {

        /* Preemption-threshold is not specified, just setup with the priority.  */
        thread_ptr -> tx_thread_preempt_threshold =       priority;
 800711a:	68fb      	ldr	r3, [r7, #12]
 800711c:	6dba      	ldr	r2, [r7, #88]	; 0x58
 800711e:	63da      	str	r2, [r3, #60]	; 0x3c
        thread_ptr -> tx_thread_user_preempt_threshold =  priority;
 8007120:	68fb      	ldr	r3, [r7, #12]
 8007122:	6dba      	ldr	r2, [r7, #88]	; 0x58
 8007124:	f8c3 2098 	str.w	r2, [r3, #152]	; 0x98
    }
#endif

    /* Now fill in the values that are required for thread initialization.  */
    thread_ptr -> tx_thread_state =  TX_SUSPENDED;
 8007128:	68fb      	ldr	r3, [r7, #12]
 800712a:	2203      	movs	r2, #3
 800712c:	631a      	str	r2, [r3, #48]	; 0x30

    /* Setup the necessary fields in the thread timer block.  */
    TX_THREAD_CREATE_TIMEOUT_SETUP(thread_ptr)
 800712e:	68fb      	ldr	r3, [r7, #12]
 8007130:	4a48      	ldr	r2, [pc, #288]	; (8007254 <_tx_thread_create+0x1cc>)
 8007132:	655a      	str	r2, [r3, #84]	; 0x54
 8007134:	68fa      	ldr	r2, [r7, #12]
 8007136:	68fb      	ldr	r3, [r7, #12]
 8007138:	659a      	str	r2, [r3, #88]	; 0x58
    TX_THREAD_CREATE_INTERNAL_EXTENSION(thread_ptr)

    /* Call the target specific stack frame building routine to build the
       thread's initial stack and to setup the actual stack pointer in the
       control block.  */
    _tx_thread_stack_build(thread_ptr, _tx_thread_shell_entry);
 800713a:	4947      	ldr	r1, [pc, #284]	; (8007258 <_tx_thread_create+0x1d0>)
 800713c:	68f8      	ldr	r0, [r7, #12]
 800713e:	f7f9 f8ff 	bl	8000340 <_tx_thread_stack_build>
    __asm__ volatile ("MRS  %0, PRIMASK ": "=r" (posture));
 8007142:	f3ef 8310 	mrs	r3, PRIMASK
 8007146:	62fb      	str	r3, [r7, #44]	; 0x2c
    return(posture);
 8007148:	6afb      	ldr	r3, [r7, #44]	; 0x2c
    int_posture = __get_interrupt_posture();
 800714a:	62bb      	str	r3, [r7, #40]	; 0x28
    __asm__ volatile ("CPSID i" : : : "memory");
 800714c:	b672      	cpsid	i
    return(int_posture);
 800714e:	6abb      	ldr	r3, [r7, #40]	; 0x28
    /* Setup the highest usage stack pointer.  */
    thread_ptr -> tx_thread_stack_highest_ptr =  thread_ptr -> tx_thread_stack_ptr;
#endif

    /* Prepare to make this thread a member of the created thread list.  */
    TX_DISABLE
 8007150:	63bb      	str	r3, [r7, #56]	; 0x38

    /* Load the thread ID field in the thread control block.  */
    thread_ptr -> tx_thread_id =  TX_THREAD_ID;
 8007152:	68fb      	ldr	r3, [r7, #12]
 8007154:	4a41      	ldr	r2, [pc, #260]	; (800725c <_tx_thread_create+0x1d4>)
 8007156:	601a      	str	r2, [r3, #0]

    /* Place the thread on the list of created threads.  First,
       check for an empty list.  */
    if (_tx_thread_created_count == TX_EMPTY)
 8007158:	4b41      	ldr	r3, [pc, #260]	; (8007260 <_tx_thread_create+0x1d8>)
 800715a:	681b      	ldr	r3, [r3, #0]
 800715c:	2b00      	cmp	r3, #0
 800715e:	d10b      	bne.n	8007178 <_tx_thread_create+0xf0>
    {

        /* The created thread list is empty.  Add thread to empty list.  */
        _tx_thread_created_ptr =                    thread_ptr;
 8007160:	4a40      	ldr	r2, [pc, #256]	; (8007264 <_tx_thread_create+0x1dc>)
 8007162:	68fb      	ldr	r3, [r7, #12]
 8007164:	6013      	str	r3, [r2, #0]
        thread_ptr -> tx_thread_created_next =      thread_ptr;
 8007166:	68fb      	ldr	r3, [r7, #12]
 8007168:	68fa      	ldr	r2, [r7, #12]
 800716a:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
        thread_ptr -> tx_thread_created_previous =  thread_ptr;
 800716e:	68fb      	ldr	r3, [r7, #12]
 8007170:	68fa      	ldr	r2, [r7, #12]
 8007172:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
 8007176:	e016      	b.n	80071a6 <_tx_thread_create+0x11e>
    }
    else
    {

        /* This list is not NULL, add to the end of the list.  */
        next_thread =  _tx_thread_created_ptr;
 8007178:	4b3a      	ldr	r3, [pc, #232]	; (8007264 <_tx_thread_create+0x1dc>)
 800717a:	681b      	ldr	r3, [r3, #0]
 800717c:	637b      	str	r3, [r7, #52]	; 0x34
        previous_thread =  next_thread -> tx_thread_created_previous;
 800717e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8007180:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8007184:	633b      	str	r3, [r7, #48]	; 0x30

        /* Place the new thread in the list.  */
        next_thread -> tx_thread_created_previous =  thread_ptr;
 8007186:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8007188:	68fa      	ldr	r2, [r7, #12]
 800718a:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
        previous_thread -> tx_thread_created_next =  thread_ptr;
 800718e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007190:	68fa      	ldr	r2, [r7, #12]
 8007192:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

        /* Setup this thread's created links.  */
        thread_ptr -> tx_thread_created_previous =  previous_thread;
 8007196:	68fb      	ldr	r3, [r7, #12]
 8007198:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800719a:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
        thread_ptr -> tx_thread_created_next =      next_thread;
 800719e:	68fb      	ldr	r3, [r7, #12]
 80071a0:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 80071a2:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
    }

    /* Increment the thread created count.  */
    _tx_thread_created_count++;
 80071a6:	4b2e      	ldr	r3, [pc, #184]	; (8007260 <_tx_thread_create+0x1d8>)
 80071a8:	681b      	ldr	r3, [r3, #0]
 80071aa:	3301      	adds	r3, #1
 80071ac:	4a2c      	ldr	r2, [pc, #176]	; (8007260 <_tx_thread_create+0x1d8>)
 80071ae:	6013      	str	r3, [r2, #0]
    TX_EL_THREAD_CREATE_INSERT

#ifndef TX_NOT_INTERRUPTABLE

    /* Temporarily disable preemption.  */
    _tx_thread_preempt_disable++;
 80071b0:	4b2d      	ldr	r3, [pc, #180]	; (8007268 <_tx_thread_create+0x1e0>)
 80071b2:	681b      	ldr	r3, [r3, #0]
 80071b4:	3301      	adds	r3, #1
 80071b6:	4a2c      	ldr	r2, [pc, #176]	; (8007268 <_tx_thread_create+0x1e0>)
 80071b8:	6013      	str	r3, [r2, #0]
#endif

    /* Determine if an automatic start was requested.  If so, call the resume
       thread function and then check for a preemption condition.  */
    if (auto_start == TX_AUTO_START)
 80071ba:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 80071bc:	2b01      	cmp	r3, #1
 80071be:	d129      	bne.n	8007214 <_tx_thread_create+0x18c>
    __asm__ volatile (" MRS  %0,IPSR ": "=r" (ipsr_value) );
 80071c0:	f3ef 8305 	mrs	r3, IPSR
 80071c4:	627b      	str	r3, [r7, #36]	; 0x24
    return(ipsr_value);
 80071c6:	6a7a      	ldr	r2, [r7, #36]	; 0x24
    {

        /* Determine if the create call is being called from initialization.  */
        if (TX_THREAD_GET_SYSTEM_STATE() >= TX_INITIALIZE_IN_PROGRESS)
 80071c8:	4b28      	ldr	r3, [pc, #160]	; (800726c <_tx_thread_create+0x1e4>)
 80071ca:	681b      	ldr	r3, [r3, #0]
 80071cc:	4313      	orrs	r3, r2
 80071ce:	f1b3 3ff0 	cmp.w	r3, #4042322160	; 0xf0f0f0f0
 80071d2:	d30d      	bcc.n	80071f0 <_tx_thread_create+0x168>

            /* Pickup the current thread execute pointer, which corresponds to the
               highest priority thread ready to execute.  Interrupt lockout is
               not required, since interrupts are assumed to be disabled during
               initialization.  */
            saved_thread_ptr =  _tx_thread_execute_ptr;
 80071d4:	4b26      	ldr	r3, [pc, #152]	; (8007270 <_tx_thread_create+0x1e8>)
 80071d6:	681b      	ldr	r3, [r3, #0]
 80071d8:	647b      	str	r3, [r7, #68]	; 0x44

            /* Determine if there is thread ready for execution.  */
            if (saved_thread_ptr != TX_NULL)
 80071da:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80071dc:	2b00      	cmp	r3, #0
 80071de:	d009      	beq.n	80071f4 <_tx_thread_create+0x16c>
            {

                /* Yes, a thread is ready for execution when initialization completes.  */

                /* Save the current preemption-threshold.  */
                saved_threshold =  saved_thread_ptr -> tx_thread_preempt_threshold;
 80071e0:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80071e2:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80071e4:	643b      	str	r3, [r7, #64]	; 0x40

                /* For initialization, temporarily set the preemption-threshold to the
                   priority level to make sure the highest-priority thread runs once
                   initialization is complete.  */
                saved_thread_ptr -> tx_thread_preempt_threshold =  saved_thread_ptr -> tx_thread_priority;
 80071e6:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80071e8:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80071ea:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80071ec:	63da      	str	r2, [r3, #60]	; 0x3c
 80071ee:	e001      	b.n	80071f4 <_tx_thread_create+0x16c>
        }
        else
        {

            /* Simply set the saved thread pointer to NULL.  */
            saved_thread_ptr =  TX_NULL;
 80071f0:	2300      	movs	r3, #0
 80071f2:	647b      	str	r3, [r7, #68]	; 0x44
 80071f4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80071f6:	623b      	str	r3, [r7, #32]
    __asm__ volatile ("MSR  PRIMASK,%0": : "r" (int_posture): "memory");
 80071f8:	6a3b      	ldr	r3, [r7, #32]
 80071fa:	f383 8810 	msr	PRIMASK, r3
}
 80071fe:	bf00      	nop

        /* Perform any additional activities for tool or user purpose.  */
        TX_THREAD_CREATE_EXTENSION(thread_ptr)

        /* Call the resume thread function to make this thread ready.  */
        _tx_thread_system_resume(thread_ptr);
 8007200:	68f8      	ldr	r0, [r7, #12]
 8007202:	f000 fa3f 	bl	8007684 <_tx_thread_system_resume>
#endif

        /* Determine if the thread's preemption-threshold needs to be restored.  */
        if (saved_thread_ptr != TX_NULL)
 8007206:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8007208:	2b00      	cmp	r3, #0
 800720a:	d01e      	beq.n	800724a <_tx_thread_create+0x1c2>
        {

            /* Yes, restore the previous highest-priority thread's preemption-threshold. This
               can only happen if this routine is called from initialization.  */
            saved_thread_ptr -> tx_thread_preempt_threshold =  saved_threshold;
 800720c:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800720e:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 8007210:	63da      	str	r2, [r3, #60]	; 0x3c
 8007212:	e01a      	b.n	800724a <_tx_thread_create+0x1c2>
 8007214:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007216:	613b      	str	r3, [r7, #16]
    __asm__ volatile ("MSR  PRIMASK,%0": : "r" (int_posture): "memory");
 8007218:	693b      	ldr	r3, [r7, #16]
 800721a:	f383 8810 	msr	PRIMASK, r3
}
 800721e:	bf00      	nop
    __asm__ volatile ("MRS  %0, PRIMASK ": "=r" (posture));
 8007220:	f3ef 8310 	mrs	r3, PRIMASK
 8007224:	61bb      	str	r3, [r7, #24]
    return(posture);
 8007226:	69bb      	ldr	r3, [r7, #24]
    int_posture = __get_interrupt_posture();
 8007228:	617b      	str	r3, [r7, #20]
    __asm__ volatile ("CPSID i" : : : "memory");
 800722a:	b672      	cpsid	i
    return(int_posture);
 800722c:	697b      	ldr	r3, [r7, #20]

        /* Perform any additional activities for tool or user purpose.  */
        TX_THREAD_CREATE_EXTENSION(thread_ptr)

        /* Disable interrupts.  */
        TX_DISABLE
 800722e:	63bb      	str	r3, [r7, #56]	; 0x38

        /* Re-enable preemption.  */
        _tx_thread_preempt_disable--;
 8007230:	4b0d      	ldr	r3, [pc, #52]	; (8007268 <_tx_thread_create+0x1e0>)
 8007232:	681b      	ldr	r3, [r3, #0]
 8007234:	3b01      	subs	r3, #1
 8007236:	4a0c      	ldr	r2, [pc, #48]	; (8007268 <_tx_thread_create+0x1e0>)
 8007238:	6013      	str	r3, [r2, #0]
 800723a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800723c:	61fb      	str	r3, [r7, #28]
    __asm__ volatile ("MSR  PRIMASK,%0": : "r" (int_posture): "memory");
 800723e:	69fb      	ldr	r3, [r7, #28]
 8007240:	f383 8810 	msr	PRIMASK, r3
}
 8007244:	bf00      	nop

        /* Restore interrupts.  */
        TX_RESTORE

        /* Check for preemption.  */
        _tx_thread_system_preempt_check();
 8007246:	f000 f9e3 	bl	8007610 <_tx_thread_system_preempt_check>
#endif
    }

    /* Always return a success.  */
    return(TX_SUCCESS);
 800724a:	2300      	movs	r3, #0
}
 800724c:	4618      	mov	r0, r3
 800724e:	3748      	adds	r7, #72	; 0x48
 8007250:	46bd      	mov	sp, r7
 8007252:	bd80      	pop	{r7, pc}
 8007254:	08007b59 	.word	0x08007b59
 8007258:	08007479 	.word	0x08007479
 800725c:	54485244 	.word	0x54485244
 8007260:	200063bc 	.word	0x200063bc
 8007264:	200063b8 	.word	0x200063b8
 8007268:	20006448 	.word	0x20006448
 800726c:	2000000c 	.word	0x2000000c
 8007270:	200063b4 	.word	0x200063b4

08007274 <_tx_thread_initialize>:
/*                                            stack check error handling, */
/*                                            resulting in version 6.1.9  */   
/*                                                                        */
/**************************************************************************/
VOID  _tx_thread_initialize(VOID)
{
 8007274:	b580      	push	{r7, lr}
 8007276:	af00      	add	r7, sp, #0
       respectively.  */

#ifndef TX_DISABLE_REDUNDANT_CLEARING

    /* Set current thread pointer to NULL.  */
    TX_THREAD_SET_CURRENT(TX_NULL)
 8007278:	4b12      	ldr	r3, [pc, #72]	; (80072c4 <_tx_thread_initialize+0x50>)
 800727a:	2200      	movs	r2, #0
 800727c:	601a      	str	r2, [r3, #0]

    /* Initialize the execute thread pointer to NULL.  */
    _tx_thread_execute_ptr =  TX_NULL;
 800727e:	4b12      	ldr	r3, [pc, #72]	; (80072c8 <_tx_thread_initialize+0x54>)
 8007280:	2200      	movs	r2, #0
 8007282:	601a      	str	r2, [r3, #0]
 8007284:	4b11      	ldr	r3, [pc, #68]	; (80072cc <_tx_thread_initialize+0x58>)
 8007286:	2200      	movs	r2, #0
 8007288:	601a      	str	r2, [r3, #0]
#endif
#endif

    /* Setup the highest priority variable to the max, indicating no thread is currently
       ready.  */
    _tx_thread_highest_priority =  ((UINT) TX_MAX_PRIORITIES);
 800728a:	4b11      	ldr	r3, [pc, #68]	; (80072d0 <_tx_thread_initialize+0x5c>)
 800728c:	2220      	movs	r2, #32
 800728e:	601a      	str	r2, [r3, #0]


#ifndef TX_DISABLE_REDUNDANT_CLEARING

    /* Initialize the array of priority head pointers.  */
    TX_MEMSET(&_tx_thread_priority_list[0], 0, (sizeof(_tx_thread_priority_list)));
 8007290:	2280      	movs	r2, #128	; 0x80
 8007292:	2100      	movs	r1, #0
 8007294:	480f      	ldr	r0, [pc, #60]	; (80072d4 <_tx_thread_initialize+0x60>)
 8007296:	f001 f883 	bl	80083a0 <memset>

    /* Initialize the head pointer of the created threads list and the
       number of threads created.  */
    _tx_thread_created_ptr =        TX_NULL;
 800729a:	4b0f      	ldr	r3, [pc, #60]	; (80072d8 <_tx_thread_initialize+0x64>)
 800729c:	2200      	movs	r2, #0
 800729e:	601a      	str	r2, [r3, #0]
    _tx_thread_created_count =      TX_EMPTY;
 80072a0:	4b0e      	ldr	r3, [pc, #56]	; (80072dc <_tx_thread_initialize+0x68>)
 80072a2:	2200      	movs	r2, #0
 80072a4:	601a      	str	r2, [r3, #0]

    /* Clear the global preempt disable variable.  */
    _tx_thread_preempt_disable =    ((UINT) 0);
 80072a6:	4b0e      	ldr	r3, [pc, #56]	; (80072e0 <_tx_thread_initialize+0x6c>)
 80072a8:	2200      	movs	r2, #0
 80072aa:	601a      	str	r2, [r3, #0]

    /* Initialize the thread mutex release function pointer.  */
    _tx_thread_mutex_release =      TX_NULL;
 80072ac:	4b0d      	ldr	r3, [pc, #52]	; (80072e4 <_tx_thread_initialize+0x70>)
 80072ae:	2200      	movs	r2, #0
 80072b0:	601a      	str	r2, [r3, #0]
#endif
#ifdef TX_DISABLE_REDUNDANT_CLEARING
                            | (((ULONG) 1) << 18)
#endif
#ifdef TX_DISABLE_NOTIFY_CALLBACKS
                            | (((ULONG) 1) << 17)
 80072b2:	4b0d      	ldr	r3, [pc, #52]	; (80072e8 <_tx_thread_initialize+0x74>)
 80072b4:	681b      	ldr	r3, [r3, #0]
 80072b6:	f043 7385 	orr.w	r3, r3, #17432576	; 0x10a0000
    _tx_build_options =  _tx_build_options 
 80072ba:	4a0b      	ldr	r2, [pc, #44]	; (80072e8 <_tx_thread_initialize+0x74>)
 80072bc:	6013      	str	r3, [r2, #0]
#endif
#if TX_PORT_SPECIFIC_BUILD_OPTIONS != 0
                            | TX_PORT_SPECIFIC_BUILD_OPTIONS
#endif
                            ;
}
 80072be:	bf00      	nop
 80072c0:	bd80      	pop	{r7, pc}
 80072c2:	bf00      	nop
 80072c4:	200063b0 	.word	0x200063b0
 80072c8:	200063b4 	.word	0x200063b4
 80072cc:	200063c0 	.word	0x200063c0
 80072d0:	200063c4 	.word	0x200063c4
 80072d4:	200063c8 	.word	0x200063c8
 80072d8:	200063b8 	.word	0x200063b8
 80072dc:	200063bc 	.word	0x200063bc
 80072e0:	20006448 	.word	0x20006448
 80072e4:	2000644c 	.word	0x2000644c
 80072e8:	20006450 	.word	0x20006450

080072ec <_tx_thread_relinquish>:
/*  09-30-2020     Yuxin Zhou               Modified comment(s),          */
/*                                            resulting in version 6.1    */
/*                                                                        */
/**************************************************************************/
VOID  _tx_thread_relinquish(VOID)
{
 80072ec:	b480      	push	{r7}
 80072ee:	b08b      	sub	sp, #44	; 0x2c
 80072f0:	af00      	add	r7, sp, #0
UINT            priority;
TX_THREAD       *thread_ptr;


    /* Pickup thread pointer.  */
    TX_THREAD_GET_CURRENT(thread_ptr)
 80072f2:	4b2b      	ldr	r3, [pc, #172]	; (80073a0 <_tx_thread_relinquish+0xb4>)
 80072f4:	681b      	ldr	r3, [r3, #0]
 80072f6:	627b      	str	r3, [r7, #36]	; 0x24
    __asm__ volatile ("MRS  %0, PRIMASK ": "=r" (posture));
 80072f8:	f3ef 8310 	mrs	r3, PRIMASK
 80072fc:	61bb      	str	r3, [r7, #24]
    return(posture);
 80072fe:	69bb      	ldr	r3, [r7, #24]
    int_posture = __get_interrupt_posture();
 8007300:	617b      	str	r3, [r7, #20]
    __asm__ volatile ("CPSID i" : : : "memory");
 8007302:	b672      	cpsid	i
    return(int_posture);
 8007304:	697b      	ldr	r3, [r7, #20]
    /* Check this thread's stack.  */
    TX_THREAD_STACK_CHECK(thread_ptr)
#endif

    /* Disable interrupts.  */
    TX_DISABLE
 8007306:	623b      	str	r3, [r7, #32]

#ifndef TX_NO_TIMER

    /* Reset time slice for current thread.  */
    _tx_timer_time_slice =  thread_ptr -> tx_thread_new_time_slice;
 8007308:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800730a:	69db      	ldr	r3, [r3, #28]
 800730c:	4a25      	ldr	r2, [pc, #148]	; (80073a4 <_tx_thread_relinquish+0xb8>)
 800730e:	6013      	str	r3, [r2, #0]
#endif

    /* Pickup the thread's priority.  */
    priority =  thread_ptr -> tx_thread_priority;
 8007310:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007312:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007314:	61fb      	str	r3, [r7, #28]

    /* Determine if there is another thread at the same priority.  */
    if (thread_ptr -> tx_thread_ready_next != thread_ptr)
 8007316:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007318:	6a1b      	ldr	r3, [r3, #32]
 800731a:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800731c:	429a      	cmp	r2, r3
 800731e:	d009      	beq.n	8007334 <_tx_thread_relinquish+0x48>
    {

        /* Yes, there is another thread at this priority, make it the highest at
           this priority level.  */
        _tx_thread_priority_list[priority] =  thread_ptr -> tx_thread_ready_next;
 8007320:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007322:	6a1a      	ldr	r2, [r3, #32]
 8007324:	4920      	ldr	r1, [pc, #128]	; (80073a8 <_tx_thread_relinquish+0xbc>)
 8007326:	69fb      	ldr	r3, [r7, #28]
 8007328:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Mark the new thread as the one to execute.  */
        _tx_thread_execute_ptr = thread_ptr -> tx_thread_ready_next;
 800732c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800732e:	6a1b      	ldr	r3, [r3, #32]
 8007330:	4a1e      	ldr	r2, [pc, #120]	; (80073ac <_tx_thread_relinquish+0xc0>)
 8007332:	6013      	str	r3, [r2, #0]
    }

    /* Determine if there is a higher-priority thread ready.  */
    if (_tx_thread_highest_priority < priority)
 8007334:	4b1e      	ldr	r3, [pc, #120]	; (80073b0 <_tx_thread_relinquish+0xc4>)
 8007336:	681b      	ldr	r3, [r3, #0]
 8007338:	69fa      	ldr	r2, [r7, #28]
 800733a:	429a      	cmp	r2, r3
 800733c:	d906      	bls.n	800734c <_tx_thread_relinquish+0x60>
    {

        /* Yes, there is a higher priority thread ready to execute.  Make
           it visible to the thread scheduler.  */
        _tx_thread_execute_ptr =  _tx_thread_priority_list[_tx_thread_highest_priority];
 800733e:	4b1c      	ldr	r3, [pc, #112]	; (80073b0 <_tx_thread_relinquish+0xc4>)
 8007340:	681b      	ldr	r3, [r3, #0]
 8007342:	4a19      	ldr	r2, [pc, #100]	; (80073a8 <_tx_thread_relinquish+0xbc>)
 8007344:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8007348:	4a18      	ldr	r2, [pc, #96]	; (80073ac <_tx_thread_relinquish+0xc0>)
 800734a:	6013      	str	r3, [r2, #0]
 800734c:	6a3b      	ldr	r3, [r7, #32]
 800734e:	613b      	str	r3, [r7, #16]
    __asm__ volatile ("MSR  PRIMASK,%0": : "r" (int_posture): "memory");
 8007350:	693b      	ldr	r3, [r7, #16]
 8007352:	f383 8810 	msr	PRIMASK, r3
}
 8007356:	bf00      	nop

    /* Restore previous interrupt posture.  */
    TX_RESTORE

    /* Determine if this thread needs to return to the system.  */
    if (_tx_thread_execute_ptr != thread_ptr)
 8007358:	4b14      	ldr	r3, [pc, #80]	; (80073ac <_tx_thread_relinquish+0xc0>)
 800735a:	681b      	ldr	r3, [r3, #0]
 800735c:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800735e:	429a      	cmp	r2, r3
 8007360:	d017      	beq.n	8007392 <_tx_thread_relinquish+0xa6>
__attribute__( ( always_inline ) ) static inline void _tx_thread_system_return_inline(void)
{
unsigned int interrupt_save;

    /* Set PendSV to invoke ThreadX scheduler.  */
    *((ULONG *) 0xE000ED04) = ((ULONG) 0x10000000);
 8007362:	4b14      	ldr	r3, [pc, #80]	; (80073b4 <_tx_thread_relinquish+0xc8>)
 8007364:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8007368:	601a      	str	r2, [r3, #0]
    __asm__ volatile (" MRS  %0,IPSR ": "=r" (ipsr_value) );
 800736a:	f3ef 8305 	mrs	r3, IPSR
 800736e:	60fb      	str	r3, [r7, #12]
    return(ipsr_value);
 8007370:	68fb      	ldr	r3, [r7, #12]
    if (__get_ipsr_value() == 0)
 8007372:	2b00      	cmp	r3, #0
 8007374:	d10c      	bne.n	8007390 <_tx_thread_relinquish+0xa4>
    __asm__ volatile ("MRS  %0, PRIMASK ": "=r" (posture));
 8007376:	f3ef 8310 	mrs	r3, PRIMASK
 800737a:	60bb      	str	r3, [r7, #8]
    return(posture);
 800737c:	68bb      	ldr	r3, [r7, #8]
    {
        interrupt_save = __get_interrupt_posture();
 800737e:	607b      	str	r3, [r7, #4]
    __asm__ volatile ("CPSIE  i": : : "memory");
 8007380:	b662      	cpsie	i
}
 8007382:	bf00      	nop
 8007384:	687b      	ldr	r3, [r7, #4]
 8007386:	603b      	str	r3, [r7, #0]
    __asm__ volatile ("MSR  PRIMASK,%0": : "r" (int_posture): "memory");
 8007388:	683b      	ldr	r3, [r7, #0]
 800738a:	f383 8810 	msr	PRIMASK, r3
}
 800738e:	bf00      	nop
#else
        __enable_interrupts();
#endif
        __restore_interrupt(interrupt_save);
    }
}
 8007390:	bf00      	nop

        /* Transfer control to the system so the scheduler can execute
           the next thread.  */
        _tx_thread_system_return();
    }
}
 8007392:	bf00      	nop
 8007394:	372c      	adds	r7, #44	; 0x2c
 8007396:	46bd      	mov	sp, r7
 8007398:	f85d 7b04 	ldr.w	r7, [sp], #4
 800739c:	4770      	bx	lr
 800739e:	bf00      	nop
 80073a0:	200063b0 	.word	0x200063b0
 80073a4:	200069b4 	.word	0x200069b4
 80073a8:	200063c8 	.word	0x200063c8
 80073ac:	200063b4 	.word	0x200063b4
 80073b0:	200063c4 	.word	0x200063c4
 80073b4:	e000ed04 	.word	0xe000ed04

080073b8 <_tx_thread_resume>:
/*  09-30-2020     Yuxin Zhou               Modified comment(s),          */
/*                                            resulting in version 6.1    */
/*                                                                        */
/**************************************************************************/
UINT  _tx_thread_resume(TX_THREAD *thread_ptr)
{
 80073b8:	b580      	push	{r7, lr}
 80073ba:	b08c      	sub	sp, #48	; 0x30
 80073bc:	af00      	add	r7, sp, #0
 80073be:	6078      	str	r0, [r7, #4]

TX_INTERRUPT_SAVE_AREA

UINT        status;
TX_THREAD   *saved_thread_ptr;
UINT        saved_threshold =  ((UINT) 0);
 80073c0:	2300      	movs	r3, #0
 80073c2:	627b      	str	r3, [r7, #36]	; 0x24
    __asm__ volatile ("MRS  %0, PRIMASK ": "=r" (posture));
 80073c4:	f3ef 8310 	mrs	r3, PRIMASK
 80073c8:	61fb      	str	r3, [r7, #28]
    return(posture);
 80073ca:	69fb      	ldr	r3, [r7, #28]
    int_posture = __get_interrupt_posture();
 80073cc:	61bb      	str	r3, [r7, #24]
    __asm__ volatile ("CPSID i" : : : "memory");
 80073ce:	b672      	cpsid	i
    return(int_posture);
 80073d0:	69bb      	ldr	r3, [r7, #24]
    TX_THREAD_STACK_CHECK(thread_ptr)
#endif
#endif

    /* Lockout interrupts while the thread is being resumed.  */
    TX_DISABLE
 80073d2:	623b      	str	r3, [r7, #32]
    /* Log this kernel call.  */
    TX_EL_THREAD_RESUME_INSERT

    /* Determine if the thread is suspended or in the process of suspending.
       If so, call the thread resume processing.  */
    if (thread_ptr -> tx_thread_state == TX_SUSPENDED)
 80073d4:	687b      	ldr	r3, [r7, #4]
 80073d6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80073d8:	2b03      	cmp	r3, #3
 80073da:	d12f      	bne.n	800743c <_tx_thread_resume+0x84>
    __asm__ volatile (" MRS  %0,IPSR ": "=r" (ipsr_value) );
 80073dc:	f3ef 8305 	mrs	r3, IPSR
 80073e0:	617b      	str	r3, [r7, #20]
    return(ipsr_value);
 80073e2:	697a      	ldr	r2, [r7, #20]
    {

        /* Determine if the create call is being called from initialization.  */
        if (TX_THREAD_GET_SYSTEM_STATE() >= TX_INITIALIZE_IN_PROGRESS)
 80073e4:	4b21      	ldr	r3, [pc, #132]	; (800746c <_tx_thread_resume+0xb4>)
 80073e6:	681b      	ldr	r3, [r3, #0]
 80073e8:	4313      	orrs	r3, r2
 80073ea:	f1b3 3ff0 	cmp.w	r3, #4042322160	; 0xf0f0f0f0
 80073ee:	d30d      	bcc.n	800740c <_tx_thread_resume+0x54>

            /* Pickup the current thread execute pointer, which corresponds to the
               highest priority thread ready to execute.  Interrupt lockout is
               not required, since interrupts are assumed to be disabled during
               initialization.  */
            saved_thread_ptr =  _tx_thread_execute_ptr;
 80073f0:	4b1f      	ldr	r3, [pc, #124]	; (8007470 <_tx_thread_resume+0xb8>)
 80073f2:	681b      	ldr	r3, [r3, #0]
 80073f4:	62bb      	str	r3, [r7, #40]	; 0x28

            /* Determine if there is thread ready for execution.  */
            if (saved_thread_ptr != TX_NULL)
 80073f6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80073f8:	2b00      	cmp	r3, #0
 80073fa:	d009      	beq.n	8007410 <_tx_thread_resume+0x58>
            {

                /* Yes, a thread is ready for execution when initialization completes.  */

                /* Save the current preemption-threshold.  */
                saved_threshold =  saved_thread_ptr -> tx_thread_preempt_threshold;
 80073fc:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80073fe:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8007400:	627b      	str	r3, [r7, #36]	; 0x24

                /* For initialization, temporarily set the preemption-threshold to the
                   priority level to make sure the highest-priority thread runs once
                   initialization is complete.  */
                saved_thread_ptr -> tx_thread_preempt_threshold =  saved_thread_ptr -> tx_thread_priority;
 8007402:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007404:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8007406:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007408:	63da      	str	r2, [r3, #60]	; 0x3c
 800740a:	e001      	b.n	8007410 <_tx_thread_resume+0x58>
        }
        else
        {

            /* Simply set the saved thread pointer to NULL.  */
            saved_thread_ptr =  TX_NULL;
 800740c:	2300      	movs	r3, #0
 800740e:	62bb      	str	r3, [r7, #40]	; 0x28
        /* Restore interrupts.  */
        TX_RESTORE
#else

        /* Temporarily disable preemption.  */
        _tx_thread_preempt_disable++;
 8007410:	4b18      	ldr	r3, [pc, #96]	; (8007474 <_tx_thread_resume+0xbc>)
 8007412:	681b      	ldr	r3, [r3, #0]
 8007414:	3301      	adds	r3, #1
 8007416:	4a17      	ldr	r2, [pc, #92]	; (8007474 <_tx_thread_resume+0xbc>)
 8007418:	6013      	str	r3, [r2, #0]
 800741a:	6a3b      	ldr	r3, [r7, #32]
 800741c:	613b      	str	r3, [r7, #16]
    __asm__ volatile ("MSR  PRIMASK,%0": : "r" (int_posture): "memory");
 800741e:	693b      	ldr	r3, [r7, #16]
 8007420:	f383 8810 	msr	PRIMASK, r3
}
 8007424:	bf00      	nop

        /* Restore interrupts.  */
        TX_RESTORE

        /* Call the actual resume service to resume the thread.  */
        _tx_thread_system_resume(thread_ptr);
 8007426:	6878      	ldr	r0, [r7, #4]
 8007428:	f000 f92c 	bl	8007684 <_tx_thread_system_resume>
#endif

        /* Determine if the thread's preemption-threshold needs to be restored.  */
        if (saved_thread_ptr != TX_NULL)
 800742c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800742e:	2b00      	cmp	r3, #0
 8007430:	d002      	beq.n	8007438 <_tx_thread_resume+0x80>
        {

            /* Yes, restore the previous highest-priority thread's preemption-threshold. This
               can only happen if this routine is called from initialization.  */
            saved_thread_ptr -> tx_thread_preempt_threshold =  saved_threshold;
 8007432:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007434:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8007436:	63da      	str	r2, [r3, #60]	; 0x3c
        /* Setup successful return status.  */
        status =  TX_SUCCESS;
#else

        /* Return successful completion.  */
        return(TX_SUCCESS);
 8007438:	2300      	movs	r3, #0
 800743a:	e012      	b.n	8007462 <_tx_thread_resume+0xaa>

        /* Setup successful return status.  */
        status =  TX_SUCCESS;
#endif
    }
    else if (thread_ptr -> tx_thread_delayed_suspend == TX_TRUE)
 800743c:	687b      	ldr	r3, [r7, #4]
 800743e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8007440:	2b01      	cmp	r3, #1
 8007442:	d105      	bne.n	8007450 <_tx_thread_resume+0x98>
    {

        /* Clear the delayed suspension.  */
        thread_ptr -> tx_thread_delayed_suspend =  TX_FALSE;
 8007444:	687b      	ldr	r3, [r7, #4]
 8007446:	2200      	movs	r2, #0
 8007448:	635a      	str	r2, [r3, #52]	; 0x34

        /* Setup delayed suspend lifted return status.  */
        status =  TX_SUSPEND_LIFTED;
 800744a:	2319      	movs	r3, #25
 800744c:	62fb      	str	r3, [r7, #44]	; 0x2c
 800744e:	e001      	b.n	8007454 <_tx_thread_resume+0x9c>
    }
    else
    {

        /* Setup invalid resume return status.  */
        status =  TX_RESUME_ERROR;
 8007450:	2312      	movs	r3, #18
 8007452:	62fb      	str	r3, [r7, #44]	; 0x2c
 8007454:	6a3b      	ldr	r3, [r7, #32]
 8007456:	60fb      	str	r3, [r7, #12]
    __asm__ volatile ("MSR  PRIMASK,%0": : "r" (int_posture): "memory");
 8007458:	68fb      	ldr	r3, [r7, #12]
 800745a:	f383 8810 	msr	PRIMASK, r3
}
 800745e:	bf00      	nop
        }
    }
#endif

    /* Return completion status. */
    return(status);
 8007460:	6afb      	ldr	r3, [r7, #44]	; 0x2c
}
 8007462:	4618      	mov	r0, r3
 8007464:	3730      	adds	r7, #48	; 0x30
 8007466:	46bd      	mov	sp, r7
 8007468:	bd80      	pop	{r7, pc}
 800746a:	bf00      	nop
 800746c:	2000000c 	.word	0x2000000c
 8007470:	200063b4 	.word	0x200063b4
 8007474:	20006448 	.word	0x20006448

08007478 <_tx_thread_shell_entry>:
/*  09-30-2020     Yuxin Zhou               Modified comment(s),          */
/*                                            resulting in version 6.1    */
/*                                                                        */
/**************************************************************************/
VOID  _tx_thread_shell_entry(VOID)
{
 8007478:	b580      	push	{r7, lr}
 800747a:	b088      	sub	sp, #32
 800747c:	af00      	add	r7, sp, #0
VOID            (*entry_exit_notify)(TX_THREAD *notify_thread_ptr, UINT type);
#endif


    /* Pickup thread pointer.  */
    TX_THREAD_GET_CURRENT(thread_ptr)
 800747e:	4b21      	ldr	r3, [pc, #132]	; (8007504 <_tx_thread_shell_entry+0x8c>)
 8007480:	681b      	ldr	r3, [r3, #0]
 8007482:	61fb      	str	r3, [r7, #28]
        (entry_exit_notify)(thread_ptr, TX_THREAD_ENTRY);
    }
#endif

    /* Call current thread's entry function.  */
    (thread_ptr -> tx_thread_entry) (thread_ptr -> tx_thread_entry_parameter);
 8007484:	69fb      	ldr	r3, [r7, #28]
 8007486:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8007488:	69fa      	ldr	r2, [r7, #28]
 800748a:	6c92      	ldr	r2, [r2, #72]	; 0x48
 800748c:	4610      	mov	r0, r2
 800748e:	4798      	blx	r3

    /* Suspend thread with a "completed" state.  */

    /* Determine if the application is using mutexes.  */
    if (_tx_thread_mutex_release != TX_NULL)
 8007490:	4b1d      	ldr	r3, [pc, #116]	; (8007508 <_tx_thread_shell_entry+0x90>)
 8007492:	681b      	ldr	r3, [r3, #0]
 8007494:	2b00      	cmp	r3, #0
 8007496:	d003      	beq.n	80074a0 <_tx_thread_shell_entry+0x28>
    {

        /* Yes, call the mutex release function via a function pointer that
           is setup during mutex initialization.  */
        (_tx_thread_mutex_release)(thread_ptr);
 8007498:	4b1b      	ldr	r3, [pc, #108]	; (8007508 <_tx_thread_shell_entry+0x90>)
 800749a:	681b      	ldr	r3, [r3, #0]
 800749c:	69f8      	ldr	r0, [r7, #28]
 800749e:	4798      	blx	r3
    __asm__ volatile ("MRS  %0, PRIMASK ": "=r" (posture));
 80074a0:	f3ef 8310 	mrs	r3, PRIMASK
 80074a4:	607b      	str	r3, [r7, #4]
    return(posture);
 80074a6:	687b      	ldr	r3, [r7, #4]
    int_posture = __get_interrupt_posture();
 80074a8:	603b      	str	r3, [r7, #0]
    __asm__ volatile ("CPSID i" : : : "memory");
 80074aa:	b672      	cpsid	i
    return(int_posture);
 80074ac:	683b      	ldr	r3, [r7, #0]
    }

    /* Lockout interrupts while the thread state is setup.  */
    TX_DISABLE
 80074ae:	61bb      	str	r3, [r7, #24]
    entry_exit_notify =  thread_ptr -> tx_thread_entry_exit_notify;
#endif

    /* Set the status to suspending, in order to indicate the suspension
       is in progress.  */
    thread_ptr -> tx_thread_state =  TX_COMPLETED;
 80074b0:	69fb      	ldr	r3, [r7, #28]
 80074b2:	2201      	movs	r2, #1
 80074b4:	631a      	str	r2, [r3, #48]	; 0x30
    /* Restore interrupts.  */
    TX_RESTORE
#else

    /* Set the suspending flag. */
    thread_ptr -> tx_thread_suspending =  TX_TRUE;
 80074b6:	69fb      	ldr	r3, [r7, #28]
 80074b8:	2201      	movs	r2, #1
 80074ba:	639a      	str	r2, [r3, #56]	; 0x38

    /* Setup for no timeout period.  */
    thread_ptr -> tx_thread_timer.tx_timer_internal_remaining_ticks =  ((ULONG) 0);
 80074bc:	69fb      	ldr	r3, [r7, #28]
 80074be:	2200      	movs	r2, #0
 80074c0:	64da      	str	r2, [r3, #76]	; 0x4c

    /* Temporarily disable preemption.  */
    _tx_thread_preempt_disable++;
 80074c2:	4b12      	ldr	r3, [pc, #72]	; (800750c <_tx_thread_shell_entry+0x94>)
 80074c4:	681b      	ldr	r3, [r3, #0]
 80074c6:	3301      	adds	r3, #1
 80074c8:	4a10      	ldr	r2, [pc, #64]	; (800750c <_tx_thread_shell_entry+0x94>)
 80074ca:	6013      	str	r3, [r2, #0]
 80074cc:	69bb      	ldr	r3, [r7, #24]
 80074ce:	60bb      	str	r3, [r7, #8]
    __asm__ volatile ("MSR  PRIMASK,%0": : "r" (int_posture): "memory");
 80074d0:	68bb      	ldr	r3, [r7, #8]
 80074d2:	f383 8810 	msr	PRIMASK, r3
}
 80074d6:	bf00      	nop
    __asm__ volatile (" MRS  %0,CONTROL ": "=r" (control_value) );
 80074d8:	f3ef 8314 	mrs	r3, CONTROL
 80074dc:	60fb      	str	r3, [r7, #12]
    return(control_value);
 80074de:	68fb      	ldr	r3, [r7, #12]

    /* Restore interrupts.  */
    TX_RESTORE

    /* Perform any additional activities for tool or user purpose.  */
    TX_THREAD_COMPLETED_EXTENSION(thread_ptr)
 80074e0:	617b      	str	r3, [r7, #20]
 80074e2:	697b      	ldr	r3, [r7, #20]
 80074e4:	f023 0304 	bic.w	r3, r3, #4
 80074e8:	617b      	str	r3, [r7, #20]
 80074ea:	697b      	ldr	r3, [r7, #20]
 80074ec:	613b      	str	r3, [r7, #16]
    __asm__ volatile (" MSR  CONTROL,%0": : "r" (control_value): "memory" );
 80074ee:	693b      	ldr	r3, [r7, #16]
 80074f0:	f383 8814 	msr	CONTROL, r3
}
 80074f4:	bf00      	nop
        (entry_exit_notify)(thread_ptr, TX_THREAD_EXIT);
    }
#endif

    /* Call actual thread suspension routine.  */
    _tx_thread_system_suspend(thread_ptr);
 80074f6:	69f8      	ldr	r0, [r7, #28]
 80074f8:	f000 f9c4 	bl	8007884 <_tx_thread_system_suspend>
#ifdef TX_SAFETY_CRITICAL

    /* If we ever get here, raise safety critical exception.  */
    TX_SAFETY_CRITICAL_EXCEPTION(__FILE__, __LINE__, 0);
#endif
}
 80074fc:	bf00      	nop
 80074fe:	3720      	adds	r7, #32
 8007500:	46bd      	mov	sp, r7
 8007502:	bd80      	pop	{r7, pc}
 8007504:	200063b0 	.word	0x200063b0
 8007508:	2000644c 	.word	0x2000644c
 800750c:	20006448 	.word	0x20006448

08007510 <_tx_thread_sleep>:
/*  09-30-2020     Yuxin Zhou               Modified comment(s),          */
/*                                            resulting in version 6.1    */
/*                                                                        */
/**************************************************************************/
UINT  _tx_thread_sleep(ULONG timer_ticks)
{
 8007510:	b580      	push	{r7, lr}
 8007512:	b08e      	sub	sp, #56	; 0x38
 8007514:	af00      	add	r7, sp, #0
 8007516:	6078      	str	r0, [r7, #4]
    __asm__ volatile ("MRS  %0, PRIMASK ": "=r" (posture));
 8007518:	f3ef 8310 	mrs	r3, PRIMASK
 800751c:	62bb      	str	r3, [r7, #40]	; 0x28
    return(posture);
 800751e:	6abb      	ldr	r3, [r7, #40]	; 0x28
    int_posture = __get_interrupt_posture();
 8007520:	627b      	str	r3, [r7, #36]	; 0x24
    __asm__ volatile ("CPSID i" : : : "memory");
 8007522:	b672      	cpsid	i
    return(int_posture);
 8007524:	6a7b      	ldr	r3, [r7, #36]	; 0x24
UINT            status;
TX_THREAD       *thread_ptr;


    /* Lockout interrupts while the thread is being resumed.  */
    TX_DISABLE
 8007526:	633b      	str	r3, [r7, #48]	; 0x30

    /* Pickup thread pointer.  */
    TX_THREAD_GET_CURRENT(thread_ptr)
 8007528:	4b35      	ldr	r3, [pc, #212]	; (8007600 <_tx_thread_sleep+0xf0>)
 800752a:	681b      	ldr	r3, [r3, #0]
 800752c:	62fb      	str	r3, [r7, #44]	; 0x2c

    /* Determine if this is a legal request.  */

    /* Is there a current thread?  */
    if (thread_ptr == TX_NULL)
 800752e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007530:	2b00      	cmp	r3, #0
 8007532:	d108      	bne.n	8007546 <_tx_thread_sleep+0x36>
 8007534:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007536:	623b      	str	r3, [r7, #32]
    __asm__ volatile ("MSR  PRIMASK,%0": : "r" (int_posture): "memory");
 8007538:	6a3b      	ldr	r3, [r7, #32]
 800753a:	f383 8810 	msr	PRIMASK, r3
}
 800753e:	bf00      	nop

        /* Restore interrupts.  */
        TX_RESTORE

        /* Illegal caller of this service.  */
        status =  TX_CALLER_ERROR;
 8007540:	2313      	movs	r3, #19
 8007542:	637b      	str	r3, [r7, #52]	; 0x34
 8007544:	e056      	b.n	80075f4 <_tx_thread_sleep+0xe4>
    __asm__ volatile (" MRS  %0,IPSR ": "=r" (ipsr_value) );
 8007546:	f3ef 8305 	mrs	r3, IPSR
 800754a:	61fb      	str	r3, [r7, #28]
    return(ipsr_value);
 800754c:	69fa      	ldr	r2, [r7, #28]
    }

    /* Is the caller an ISR or Initialization?  */
    else if (TX_THREAD_GET_SYSTEM_STATE() != ((ULONG) 0))
 800754e:	4b2d      	ldr	r3, [pc, #180]	; (8007604 <_tx_thread_sleep+0xf4>)
 8007550:	681b      	ldr	r3, [r3, #0]
 8007552:	4313      	orrs	r3, r2
 8007554:	2b00      	cmp	r3, #0
 8007556:	d008      	beq.n	800756a <_tx_thread_sleep+0x5a>
 8007558:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800755a:	61bb      	str	r3, [r7, #24]
    __asm__ volatile ("MSR  PRIMASK,%0": : "r" (int_posture): "memory");
 800755c:	69bb      	ldr	r3, [r7, #24]
 800755e:	f383 8810 	msr	PRIMASK, r3
}
 8007562:	bf00      	nop

        /* Restore interrupts.  */
        TX_RESTORE

        /* Illegal caller of this service.  */
        status =  TX_CALLER_ERROR;
 8007564:	2313      	movs	r3, #19
 8007566:	637b      	str	r3, [r7, #52]	; 0x34
 8007568:	e044      	b.n	80075f4 <_tx_thread_sleep+0xe4>
    }

#ifndef TX_TIMER_PROCESS_IN_ISR

    /* Is the caller the system timer thread?  */
    else if (thread_ptr == &_tx_timer_thread)
 800756a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800756c:	4a26      	ldr	r2, [pc, #152]	; (8007608 <_tx_thread_sleep+0xf8>)
 800756e:	4293      	cmp	r3, r2
 8007570:	d108      	bne.n	8007584 <_tx_thread_sleep+0x74>
 8007572:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007574:	617b      	str	r3, [r7, #20]
    __asm__ volatile ("MSR  PRIMASK,%0": : "r" (int_posture): "memory");
 8007576:	697b      	ldr	r3, [r7, #20]
 8007578:	f383 8810 	msr	PRIMASK, r3
}
 800757c:	bf00      	nop

        /* Restore interrupts.  */
        TX_RESTORE

        /* Illegal caller of this service.  */
        status =  TX_CALLER_ERROR;
 800757e:	2313      	movs	r3, #19
 8007580:	637b      	str	r3, [r7, #52]	; 0x34
 8007582:	e037      	b.n	80075f4 <_tx_thread_sleep+0xe4>
    }
#endif

    /* Determine if the requested number of ticks is zero.  */
    else if (timer_ticks == ((ULONG) 0))
 8007584:	687b      	ldr	r3, [r7, #4]
 8007586:	2b00      	cmp	r3, #0
 8007588:	d108      	bne.n	800759c <_tx_thread_sleep+0x8c>
 800758a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800758c:	613b      	str	r3, [r7, #16]
    __asm__ volatile ("MSR  PRIMASK,%0": : "r" (int_posture): "memory");
 800758e:	693b      	ldr	r3, [r7, #16]
 8007590:	f383 8810 	msr	PRIMASK, r3
}
 8007594:	bf00      	nop

        /* Restore interrupts.  */
        TX_RESTORE

        /* Just return with a successful status.  */
        status =  TX_SUCCESS;
 8007596:	2300      	movs	r3, #0
 8007598:	637b      	str	r3, [r7, #52]	; 0x34
 800759a:	e02b      	b.n	80075f4 <_tx_thread_sleep+0xe4>
    }
    else
    {

        /* Determine if the preempt disable flag is non-zero.  */
        if (_tx_thread_preempt_disable != ((UINT) 0))
 800759c:	4b1b      	ldr	r3, [pc, #108]	; (800760c <_tx_thread_sleep+0xfc>)
 800759e:	681b      	ldr	r3, [r3, #0]
 80075a0:	2b00      	cmp	r3, #0
 80075a2:	d008      	beq.n	80075b6 <_tx_thread_sleep+0xa6>
 80075a4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80075a6:	60fb      	str	r3, [r7, #12]
    __asm__ volatile ("MSR  PRIMASK,%0": : "r" (int_posture): "memory");
 80075a8:	68fb      	ldr	r3, [r7, #12]
 80075aa:	f383 8810 	msr	PRIMASK, r3
}
 80075ae:	bf00      	nop

            /* Restore interrupts.  */
            TX_RESTORE

            /* Suspension is not allowed if the preempt disable flag is non-zero at this point - return error completion.  */
            status =  TX_CALLER_ERROR;
 80075b0:	2313      	movs	r3, #19
 80075b2:	637b      	str	r3, [r7, #52]	; 0x34
 80075b4:	e01e      	b.n	80075f4 <_tx_thread_sleep+0xe4>
            TX_EL_THREAD_SLEEP_INSERT

            /* Suspend the current thread.  */

            /* Set the state to suspended.  */
            thread_ptr -> tx_thread_state =    TX_SLEEP;
 80075b6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80075b8:	2204      	movs	r2, #4
 80075ba:	631a      	str	r2, [r3, #48]	; 0x30
            /* Restore interrupts.  */
            TX_RESTORE
#else

            /* Set the suspending flag. */
            thread_ptr -> tx_thread_suspending =  TX_TRUE;
 80075bc:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80075be:	2201      	movs	r2, #1
 80075c0:	639a      	str	r2, [r3, #56]	; 0x38

            /* Initialize the status to successful.  */
            thread_ptr -> tx_thread_suspend_status =  TX_SUCCESS;
 80075c2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80075c4:	2200      	movs	r2, #0
 80075c6:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

            /* Setup the timeout period.  */
            thread_ptr -> tx_thread_timer.tx_timer_internal_remaining_ticks =  timer_ticks;
 80075ca:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80075cc:	687a      	ldr	r2, [r7, #4]
 80075ce:	64da      	str	r2, [r3, #76]	; 0x4c

            /* Temporarily disable preemption.  */
            _tx_thread_preempt_disable++;
 80075d0:	4b0e      	ldr	r3, [pc, #56]	; (800760c <_tx_thread_sleep+0xfc>)
 80075d2:	681b      	ldr	r3, [r3, #0]
 80075d4:	3301      	adds	r3, #1
 80075d6:	4a0d      	ldr	r2, [pc, #52]	; (800760c <_tx_thread_sleep+0xfc>)
 80075d8:	6013      	str	r3, [r2, #0]
 80075da:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80075dc:	60bb      	str	r3, [r7, #8]
    __asm__ volatile ("MSR  PRIMASK,%0": : "r" (int_posture): "memory");
 80075de:	68bb      	ldr	r3, [r7, #8]
 80075e0:	f383 8810 	msr	PRIMASK, r3
}
 80075e4:	bf00      	nop

            /* Restore interrupts.  */
            TX_RESTORE

            /* Call actual thread suspension routine.  */
            _tx_thread_system_suspend(thread_ptr);
 80075e6:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 80075e8:	f000 f94c 	bl	8007884 <_tx_thread_system_suspend>
#endif

            /* Return status to the caller.  */
            status =  thread_ptr -> tx_thread_suspend_status;
 80075ec:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80075ee:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 80075f2:	637b      	str	r3, [r7, #52]	; 0x34
        }
    }

    /* Return completion status.  */
    return(status);
 80075f4:	6b7b      	ldr	r3, [r7, #52]	; 0x34
}
 80075f6:	4618      	mov	r0, r3
 80075f8:	3738      	adds	r7, #56	; 0x38
 80075fa:	46bd      	mov	sp, r7
 80075fc:	bd80      	pop	{r7, pc}
 80075fe:	bf00      	nop
 8007600:	200063b0 	.word	0x200063b0
 8007604:	2000000c 	.word	0x2000000c
 8007608:	200064f8 	.word	0x200064f8
 800760c:	20006448 	.word	0x20006448

08007610 <_tx_thread_system_preempt_check>:
/*  09-30-2020     Yuxin Zhou               Modified comment(s),          */
/*                                            resulting in version 6.1    */
/*                                                                        */
/**************************************************************************/
VOID  _tx_thread_system_preempt_check(VOID)
{
 8007610:	b480      	push	{r7}
 8007612:	b089      	sub	sp, #36	; 0x24
 8007614:	af00      	add	r7, sp, #0
TX_THREAD       *current_thread;
TX_THREAD       *thread_ptr;


    /* Combine the system state and preempt disable flags into one for comparison.  */
    TX_THREAD_SYSTEM_RETURN_CHECK(combined_flags)
 8007616:	4b17      	ldr	r3, [pc, #92]	; (8007674 <_tx_thread_system_preempt_check+0x64>)
 8007618:	681b      	ldr	r3, [r3, #0]
 800761a:	61fb      	str	r3, [r7, #28]

    /* Determine if we are in a system state (ISR or Initialization) or internal preemption is disabled.  */
    if (combined_flags == ((ULONG) 0))
 800761c:	69fb      	ldr	r3, [r7, #28]
 800761e:	2b00      	cmp	r3, #0
 8007620:	d121      	bne.n	8007666 <_tx_thread_system_preempt_check+0x56>
    {

        /* No, at thread execution level so continue checking for preemption.  */

        /* Pickup thread pointer.  */
        TX_THREAD_GET_CURRENT(current_thread)
 8007622:	4b15      	ldr	r3, [pc, #84]	; (8007678 <_tx_thread_system_preempt_check+0x68>)
 8007624:	681b      	ldr	r3, [r3, #0]
 8007626:	61bb      	str	r3, [r7, #24]

        /* Pickup the next execute pointer.  */
        thread_ptr =  _tx_thread_execute_ptr;
 8007628:	4b14      	ldr	r3, [pc, #80]	; (800767c <_tx_thread_system_preempt_check+0x6c>)
 800762a:	681b      	ldr	r3, [r3, #0]
 800762c:	617b      	str	r3, [r7, #20]

        /* Determine if preemption should take place.  */
        if (current_thread != thread_ptr)
 800762e:	69ba      	ldr	r2, [r7, #24]
 8007630:	697b      	ldr	r3, [r7, #20]
 8007632:	429a      	cmp	r2, r3
 8007634:	d017      	beq.n	8007666 <_tx_thread_system_preempt_check+0x56>
    *((ULONG *) 0xE000ED04) = ((ULONG) 0x10000000);
 8007636:	4b12      	ldr	r3, [pc, #72]	; (8007680 <_tx_thread_system_preempt_check+0x70>)
 8007638:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800763c:	601a      	str	r2, [r3, #0]
    __asm__ volatile (" MRS  %0,IPSR ": "=r" (ipsr_value) );
 800763e:	f3ef 8305 	mrs	r3, IPSR
 8007642:	613b      	str	r3, [r7, #16]
    return(ipsr_value);
 8007644:	693b      	ldr	r3, [r7, #16]
    if (__get_ipsr_value() == 0)
 8007646:	2b00      	cmp	r3, #0
 8007648:	d10c      	bne.n	8007664 <_tx_thread_system_preempt_check+0x54>
    __asm__ volatile ("MRS  %0, PRIMASK ": "=r" (posture));
 800764a:	f3ef 8310 	mrs	r3, PRIMASK
 800764e:	60fb      	str	r3, [r7, #12]
    return(posture);
 8007650:	68fb      	ldr	r3, [r7, #12]
        interrupt_save = __get_interrupt_posture();
 8007652:	60bb      	str	r3, [r7, #8]
    __asm__ volatile ("CPSIE  i": : : "memory");
 8007654:	b662      	cpsie	i
}
 8007656:	bf00      	nop
 8007658:	68bb      	ldr	r3, [r7, #8]
 800765a:	607b      	str	r3, [r7, #4]
    __asm__ volatile ("MSR  PRIMASK,%0": : "r" (int_posture): "memory");
 800765c:	687b      	ldr	r3, [r7, #4]
 800765e:	f383 8810 	msr	PRIMASK, r3
}
 8007662:	bf00      	nop
}
 8007664:	bf00      	nop

            /* Return to the system so the higher priority thread can be scheduled.  */
            _tx_thread_system_return();
        }
    }
}
 8007666:	bf00      	nop
 8007668:	3724      	adds	r7, #36	; 0x24
 800766a:	46bd      	mov	sp, r7
 800766c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007670:	4770      	bx	lr
 8007672:	bf00      	nop
 8007674:	20006448 	.word	0x20006448
 8007678:	200063b0 	.word	0x200063b0
 800767c:	200063b4 	.word	0x200063b4
 8007680:	e000ed04 	.word	0xe000ed04

08007684 <_tx_thread_system_resume>:
/*                                            resulting in version 6.1    */
/*                                                                        */
/**************************************************************************/
VOID  _tx_thread_system_resume(TX_THREAD *thread_ptr)
#ifndef TX_NOT_INTERRUPTABLE
{
 8007684:	b580      	push	{r7, lr}
 8007686:	b096      	sub	sp, #88	; 0x58
 8007688:	af00      	add	r7, sp, #0
 800768a:	6078      	str	r0, [r7, #4]
    __asm__ volatile ("MRS  %0, PRIMASK ": "=r" (posture));
 800768c:	f3ef 8310 	mrs	r3, PRIMASK
 8007690:	637b      	str	r3, [r7, #52]	; 0x34
    return(posture);
 8007692:	6b7b      	ldr	r3, [r7, #52]	; 0x34
    int_posture = __get_interrupt_posture();
 8007694:	633b      	str	r3, [r7, #48]	; 0x30
    __asm__ volatile ("CPSID i" : : : "memory");
 8007696:	b672      	cpsid	i
    return(int_posture);
 8007698:	6b3b      	ldr	r3, [r7, #48]	; 0x30
    /* Check this thread's stack.  */
    TX_THREAD_STACK_CHECK(thread_ptr)
#endif

    /* Lockout interrupts while the thread is being resumed.  */
    TX_DISABLE
 800769a:	657b      	str	r3, [r7, #84]	; 0x54

#ifndef TX_NO_TIMER

    /* Deactivate the timeout timer if necessary.  */
    if (thread_ptr -> tx_thread_timer.tx_timer_internal_list_head != TX_NULL)
 800769c:	687b      	ldr	r3, [r7, #4]
 800769e:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 80076a0:	2b00      	cmp	r3, #0
 80076a2:	d005      	beq.n	80076b0 <_tx_thread_system_resume+0x2c>
    {

        /* Deactivate the thread's timeout timer.  */
        _tx_timer_system_deactivate(&(thread_ptr -> tx_thread_timer));
 80076a4:	687b      	ldr	r3, [r7, #4]
 80076a6:	334c      	adds	r3, #76	; 0x4c
 80076a8:	4618      	mov	r0, r3
 80076aa:	f000 fb91 	bl	8007dd0 <_tx_timer_system_deactivate>
 80076ae:	e002      	b.n	80076b6 <_tx_thread_system_resume+0x32>
    }
    else
    {

        /* Clear the remaining time to ensure timer doesn't get activated.  */
        thread_ptr -> tx_thread_timer.tx_timer_internal_remaining_ticks =  ((ULONG) 0);
 80076b0:	687b      	ldr	r3, [r7, #4]
 80076b2:	2200      	movs	r2, #0
 80076b4:	64da      	str	r2, [r3, #76]	; 0x4c
        time_stamp =  entry_ptr -> tx_trace_buffer_entry_time_stamp;
    }
#endif

    /* Decrease the preempt disabled count.  */
    _tx_thread_preempt_disable--;
 80076b6:	4b6c      	ldr	r3, [pc, #432]	; (8007868 <_tx_thread_system_resume+0x1e4>)
 80076b8:	681b      	ldr	r3, [r3, #0]
 80076ba:	3b01      	subs	r3, #1
 80076bc:	4a6a      	ldr	r2, [pc, #424]	; (8007868 <_tx_thread_system_resume+0x1e4>)
 80076be:	6013      	str	r3, [r2, #0]

    /* Determine if the thread is in the process of suspending.  If so, the thread
       control block is already on the linked list so nothing needs to be done.  */
    if (thread_ptr -> tx_thread_suspending == TX_FALSE)
 80076c0:	687b      	ldr	r3, [r7, #4]
 80076c2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80076c4:	2b00      	cmp	r3, #0
 80076c6:	f040 8083 	bne.w	80077d0 <_tx_thread_system_resume+0x14c>
    {

        /* Thread is not in the process of suspending. Now check to make sure the thread
           has not already been resumed.  */
        if (thread_ptr -> tx_thread_state != TX_READY)
 80076ca:	687b      	ldr	r3, [r7, #4]
 80076cc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80076ce:	2b00      	cmp	r3, #0
 80076d0:	f000 8097 	beq.w	8007802 <_tx_thread_system_resume+0x17e>
        {

            /* No, now check to see if the delayed suspension flag is set.  */
            if (thread_ptr -> tx_thread_delayed_suspend == TX_FALSE)
 80076d4:	687b      	ldr	r3, [r7, #4]
 80076d6:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80076d8:	2b00      	cmp	r3, #0
 80076da:	d172      	bne.n	80077c2 <_tx_thread_system_resume+0x13e>
                /* Resume the thread!  */

                /* Make this thread ready.  */

                /* Change the state to ready.  */
                thread_ptr -> tx_thread_state =  TX_READY;
 80076dc:	687b      	ldr	r3, [r7, #4]
 80076de:	2200      	movs	r2, #0
 80076e0:	631a      	str	r2, [r3, #48]	; 0x30

                /* Pickup priority of thread.  */
                priority =  thread_ptr -> tx_thread_priority;
 80076e2:	687b      	ldr	r3, [r7, #4]
 80076e4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80076e6:	653b      	str	r3, [r7, #80]	; 0x50
                thread_ptr -> tx_thread_performance_resume_count++;
#endif

                /* Determine if there are other threads at this priority that are
                   ready.  */
                head_ptr =  _tx_thread_priority_list[priority];
 80076e8:	4a60      	ldr	r2, [pc, #384]	; (800786c <_tx_thread_system_resume+0x1e8>)
 80076ea:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80076ec:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80076f0:	64fb      	str	r3, [r7, #76]	; 0x4c
                if (head_ptr == TX_NULL)
 80076f2:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80076f4:	2b00      	cmp	r3, #0
 80076f6:	d154      	bne.n	80077a2 <_tx_thread_system_resume+0x11e>
                {

                    /* First thread at this priority ready.  Add to the front of the list.  */
                    _tx_thread_priority_list[priority] =       thread_ptr;
 80076f8:	495c      	ldr	r1, [pc, #368]	; (800786c <_tx_thread_system_resume+0x1e8>)
 80076fa:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80076fc:	687a      	ldr	r2, [r7, #4]
 80076fe:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
                    thread_ptr -> tx_thread_ready_next =       thread_ptr;
 8007702:	687b      	ldr	r3, [r7, #4]
 8007704:	687a      	ldr	r2, [r7, #4]
 8007706:	621a      	str	r2, [r3, #32]
                    thread_ptr -> tx_thread_ready_previous =   thread_ptr;
 8007708:	687b      	ldr	r3, [r7, #4]
 800770a:	687a      	ldr	r2, [r7, #4]
 800770c:	625a      	str	r2, [r3, #36]	; 0x24
                    TX_DIV32_BIT_SET(priority, priority_bit)
                    _tx_thread_priority_map_active =  _tx_thread_priority_map_active | priority_bit;
#endif

                    /* Or in the thread's priority bit.  */
                    TX_MOD32_BIT_SET(priority, priority_bit)
 800770e:	2201      	movs	r2, #1
 8007710:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8007712:	fa02 f303 	lsl.w	r3, r2, r3
 8007716:	647b      	str	r3, [r7, #68]	; 0x44
                    _tx_thread_priority_maps[MAP_INDEX] =  _tx_thread_priority_maps[MAP_INDEX] | priority_bit;
 8007718:	4b55      	ldr	r3, [pc, #340]	; (8007870 <_tx_thread_system_resume+0x1ec>)
 800771a:	681a      	ldr	r2, [r3, #0]
 800771c:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800771e:	4313      	orrs	r3, r2
 8007720:	4a53      	ldr	r2, [pc, #332]	; (8007870 <_tx_thread_system_resume+0x1ec>)
 8007722:	6013      	str	r3, [r2, #0]

                    /* Determine if this newly ready thread is the highest priority.  */
                    if (priority < _tx_thread_highest_priority)
 8007724:	4b53      	ldr	r3, [pc, #332]	; (8007874 <_tx_thread_system_resume+0x1f0>)
 8007726:	681b      	ldr	r3, [r3, #0]
 8007728:	6d3a      	ldr	r2, [r7, #80]	; 0x50
 800772a:	429a      	cmp	r2, r3
 800772c:	d269      	bcs.n	8007802 <_tx_thread_system_resume+0x17e>
                    {

                        /* A new highest priority thread is present. */

                        /* Update the highest priority variable.  */
                        _tx_thread_highest_priority =  priority;
 800772e:	4a51      	ldr	r2, [pc, #324]	; (8007874 <_tx_thread_system_resume+0x1f0>)
 8007730:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8007732:	6013      	str	r3, [r2, #0]

                        /* Pickup the execute pointer. Since it is going to be referenced multiple
                           times, it is placed in a local variable.  */
                        execute_ptr =  _tx_thread_execute_ptr;
 8007734:	4b50      	ldr	r3, [pc, #320]	; (8007878 <_tx_thread_system_resume+0x1f4>)
 8007736:	681b      	ldr	r3, [r3, #0]
 8007738:	643b      	str	r3, [r7, #64]	; 0x40

                        /* Determine if no thread is currently executing.  */
                        if (execute_ptr == TX_NULL)
 800773a:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800773c:	2b00      	cmp	r3, #0
 800773e:	d103      	bne.n	8007748 <_tx_thread_system_resume+0xc4>
                        {

                            /* Simply setup the execute pointer.  */
                            _tx_thread_execute_ptr =  thread_ptr;
 8007740:	4a4d      	ldr	r2, [pc, #308]	; (8007878 <_tx_thread_system_resume+0x1f4>)
 8007742:	687b      	ldr	r3, [r7, #4]
 8007744:	6013      	str	r3, [r2, #0]
 8007746:	e05c      	b.n	8007802 <_tx_thread_system_resume+0x17e>
                        {

                            /* Another thread has been scheduled for execution.  */

                            /* Check to see if this is a higher priority thread and determine if preemption is allowed.  */
                            if (priority < execute_ptr -> tx_thread_preempt_threshold)
 8007748:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800774a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800774c:	6d3a      	ldr	r2, [r7, #80]	; 0x50
 800774e:	429a      	cmp	r2, r3
 8007750:	d257      	bcs.n	8007802 <_tx_thread_system_resume+0x17e>
                                execute_ptr -> tx_thread_performance_last_preempting_thread =  thread_ptr;

#endif

                                /* Yes, modify the execute thread pointer.  */
                                _tx_thread_execute_ptr =  thread_ptr;
 8007752:	4a49      	ldr	r2, [pc, #292]	; (8007878 <_tx_thread_system_resume+0x1f4>)
 8007754:	687b      	ldr	r3, [r7, #4]
 8007756:	6013      	str	r3, [r2, #0]
 8007758:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800775a:	62fb      	str	r3, [r7, #44]	; 0x2c
    __asm__ volatile ("MSR  PRIMASK,%0": : "r" (int_posture): "memory");
 800775c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800775e:	f383 8810 	msr	PRIMASK, r3
}
 8007762:	bf00      	nop
                                TX_THREAD_STACK_CHECK(thread_ptr)
#endif

                                /* Now determine if preemption should take place. This is only possible if the current thread pointer is
                                   not the same as the execute thread pointer AND the system state and preempt disable flags are clear.  */
                                TX_THREAD_SYSTEM_RETURN_CHECK(combined_flags)
 8007764:	4b40      	ldr	r3, [pc, #256]	; (8007868 <_tx_thread_system_resume+0x1e4>)
 8007766:	681b      	ldr	r3, [r3, #0]
 8007768:	63fb      	str	r3, [r7, #60]	; 0x3c
                                if (combined_flags == ((ULONG) 0))
 800776a:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800776c:	2b00      	cmp	r3, #0
 800776e:	d174      	bne.n	800785a <_tx_thread_system_resume+0x1d6>
    *((ULONG *) 0xE000ED04) = ((ULONG) 0x10000000);
 8007770:	4b42      	ldr	r3, [pc, #264]	; (800787c <_tx_thread_system_resume+0x1f8>)
 8007772:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8007776:	601a      	str	r2, [r3, #0]
    __asm__ volatile (" MRS  %0,IPSR ": "=r" (ipsr_value) );
 8007778:	f3ef 8305 	mrs	r3, IPSR
 800777c:	62bb      	str	r3, [r7, #40]	; 0x28
    return(ipsr_value);
 800777e:	6abb      	ldr	r3, [r7, #40]	; 0x28
    if (__get_ipsr_value() == 0)
 8007780:	2b00      	cmp	r3, #0
 8007782:	d10c      	bne.n	800779e <_tx_thread_system_resume+0x11a>
    __asm__ volatile ("MRS  %0, PRIMASK ": "=r" (posture));
 8007784:	f3ef 8310 	mrs	r3, PRIMASK
 8007788:	627b      	str	r3, [r7, #36]	; 0x24
    return(posture);
 800778a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
        interrupt_save = __get_interrupt_posture();
 800778c:	623b      	str	r3, [r7, #32]
    __asm__ volatile ("CPSIE  i": : : "memory");
 800778e:	b662      	cpsie	i
}
 8007790:	bf00      	nop
 8007792:	6a3b      	ldr	r3, [r7, #32]
 8007794:	61fb      	str	r3, [r7, #28]
    __asm__ volatile ("MSR  PRIMASK,%0": : "r" (int_posture): "memory");
 8007796:	69fb      	ldr	r3, [r7, #28]
 8007798:	f383 8810 	msr	PRIMASK, r3
}
 800779c:	bf00      	nop
}
 800779e:	bf00      	nop
                                    /* Preemption is needed - return to the system!  */
                                    _tx_thread_system_return();
                                }

                                /* Return in-line when MISRA is not enabled.  */
                                return;
 80077a0:	e05b      	b.n	800785a <_tx_thread_system_resume+0x1d6>
                {

                    /* No, there are other threads at this priority already ready.  */

                    /* Just add this thread to the priority list.  */
                    tail_ptr =                                 head_ptr -> tx_thread_ready_previous;
 80077a2:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80077a4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80077a6:	64bb      	str	r3, [r7, #72]	; 0x48
                    tail_ptr -> tx_thread_ready_next =         thread_ptr;
 80077a8:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 80077aa:	687a      	ldr	r2, [r7, #4]
 80077ac:	621a      	str	r2, [r3, #32]
                    head_ptr -> tx_thread_ready_previous =     thread_ptr;
 80077ae:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80077b0:	687a      	ldr	r2, [r7, #4]
 80077b2:	625a      	str	r2, [r3, #36]	; 0x24
                    thread_ptr -> tx_thread_ready_previous =   tail_ptr;
 80077b4:	687b      	ldr	r3, [r7, #4]
 80077b6:	6cba      	ldr	r2, [r7, #72]	; 0x48
 80077b8:	625a      	str	r2, [r3, #36]	; 0x24
                    thread_ptr -> tx_thread_ready_next =       head_ptr;
 80077ba:	687b      	ldr	r3, [r7, #4]
 80077bc:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 80077be:	621a      	str	r2, [r3, #32]
 80077c0:	e01f      	b.n	8007802 <_tx_thread_system_resume+0x17e>
            /* Else, delayed suspend flag was set.  */
            else
            {

                /* Clear the delayed suspend flag and change the state.  */
                thread_ptr -> tx_thread_delayed_suspend =  TX_FALSE;
 80077c2:	687b      	ldr	r3, [r7, #4]
 80077c4:	2200      	movs	r2, #0
 80077c6:	635a      	str	r2, [r3, #52]	; 0x34
                thread_ptr -> tx_thread_state =            TX_SUSPENDED;
 80077c8:	687b      	ldr	r3, [r7, #4]
 80077ca:	2203      	movs	r2, #3
 80077cc:	631a      	str	r2, [r3, #48]	; 0x30
 80077ce:	e018      	b.n	8007802 <_tx_thread_system_resume+0x17e>
        /* A resumption occurred in the middle of a previous thread suspension.  */

        /* Make sure the type of suspension under way is not a terminate or
           thread completion.  In either of these cases, do not void the
           interrupted suspension processing.  */
        if (thread_ptr -> tx_thread_state != TX_COMPLETED)
 80077d0:	687b      	ldr	r3, [r7, #4]
 80077d2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80077d4:	2b01      	cmp	r3, #1
 80077d6:	d014      	beq.n	8007802 <_tx_thread_system_resume+0x17e>
        {

            /* Make sure the thread isn't terminated.  */
            if (thread_ptr -> tx_thread_state != TX_TERMINATED)
 80077d8:	687b      	ldr	r3, [r7, #4]
 80077da:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80077dc:	2b02      	cmp	r3, #2
 80077de:	d010      	beq.n	8007802 <_tx_thread_system_resume+0x17e>
            {

                /* No, now check to see if the delayed suspension flag is set.  */
                if (thread_ptr -> tx_thread_delayed_suspend == TX_FALSE)
 80077e0:	687b      	ldr	r3, [r7, #4]
 80077e2:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80077e4:	2b00      	cmp	r3, #0
 80077e6:	d106      	bne.n	80077f6 <_tx_thread_system_resume+0x172>
                {

                    /* Clear the suspending flag.  */
                    thread_ptr -> tx_thread_suspending =   TX_FALSE;
 80077e8:	687b      	ldr	r3, [r7, #4]
 80077ea:	2200      	movs	r2, #0
 80077ec:	639a      	str	r2, [r3, #56]	; 0x38

                    /* Restore the state to ready.  */
                    thread_ptr -> tx_thread_state =        TX_READY;
 80077ee:	687b      	ldr	r3, [r7, #4]
 80077f0:	2200      	movs	r2, #0
 80077f2:	631a      	str	r2, [r3, #48]	; 0x30
 80077f4:	e005      	b.n	8007802 <_tx_thread_system_resume+0x17e>
                }
                else
                {

                    /* Clear the delayed suspend flag and change the state.  */
                    thread_ptr -> tx_thread_delayed_suspend =  TX_FALSE;
 80077f6:	687b      	ldr	r3, [r7, #4]
 80077f8:	2200      	movs	r2, #0
 80077fa:	635a      	str	r2, [r3, #52]	; 0x34
                    thread_ptr -> tx_thread_state =            TX_SUSPENDED;
 80077fc:	687b      	ldr	r3, [r7, #4]
 80077fe:	2203      	movs	r2, #3
 8007800:	631a      	str	r2, [r3, #48]	; 0x30
        }
    }
#endif

    /* Pickup thread pointer.  */
    TX_THREAD_GET_CURRENT(current_thread)
 8007802:	4b1f      	ldr	r3, [pc, #124]	; (8007880 <_tx_thread_system_resume+0x1fc>)
 8007804:	681b      	ldr	r3, [r3, #0]
 8007806:	63bb      	str	r3, [r7, #56]	; 0x38
 8007808:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800780a:	61bb      	str	r3, [r7, #24]
    __asm__ volatile ("MSR  PRIMASK,%0": : "r" (int_posture): "memory");
 800780c:	69bb      	ldr	r3, [r7, #24]
 800780e:	f383 8810 	msr	PRIMASK, r3
}
 8007812:	bf00      	nop

    /* Restore interrupts.  */
    TX_RESTORE

    /* Determine if a preemption condition is present.  */
    if (current_thread != _tx_thread_execute_ptr)
 8007814:	4b18      	ldr	r3, [pc, #96]	; (8007878 <_tx_thread_system_resume+0x1f4>)
 8007816:	681b      	ldr	r3, [r3, #0]
 8007818:	6bba      	ldr	r2, [r7, #56]	; 0x38
 800781a:	429a      	cmp	r2, r3
 800781c:	d020      	beq.n	8007860 <_tx_thread_system_resume+0x1dc>
        TX_THREAD_STACK_CHECK(thread_ptr)
#endif

        /* Now determine if preemption should take place. This is only possible if the current thread pointer is
           not the same as the execute thread pointer AND the system state and preempt disable flags are clear.  */
        TX_THREAD_SYSTEM_RETURN_CHECK(combined_flags)
 800781e:	4b12      	ldr	r3, [pc, #72]	; (8007868 <_tx_thread_system_resume+0x1e4>)
 8007820:	681b      	ldr	r3, [r3, #0]
 8007822:	63fb      	str	r3, [r7, #60]	; 0x3c
        if (combined_flags == ((ULONG) 0))
 8007824:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8007826:	2b00      	cmp	r3, #0
 8007828:	d11a      	bne.n	8007860 <_tx_thread_system_resume+0x1dc>
    *((ULONG *) 0xE000ED04) = ((ULONG) 0x10000000);
 800782a:	4b14      	ldr	r3, [pc, #80]	; (800787c <_tx_thread_system_resume+0x1f8>)
 800782c:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8007830:	601a      	str	r2, [r3, #0]
    __asm__ volatile (" MRS  %0,IPSR ": "=r" (ipsr_value) );
 8007832:	f3ef 8305 	mrs	r3, IPSR
 8007836:	617b      	str	r3, [r7, #20]
    return(ipsr_value);
 8007838:	697b      	ldr	r3, [r7, #20]
    if (__get_ipsr_value() == 0)
 800783a:	2b00      	cmp	r3, #0
 800783c:	d10f      	bne.n	800785e <_tx_thread_system_resume+0x1da>
    __asm__ volatile ("MRS  %0, PRIMASK ": "=r" (posture));
 800783e:	f3ef 8310 	mrs	r3, PRIMASK
 8007842:	613b      	str	r3, [r7, #16]
    return(posture);
 8007844:	693b      	ldr	r3, [r7, #16]
        interrupt_save = __get_interrupt_posture();
 8007846:	60fb      	str	r3, [r7, #12]
    __asm__ volatile ("CPSIE  i": : : "memory");
 8007848:	b662      	cpsie	i
}
 800784a:	bf00      	nop
 800784c:	68fb      	ldr	r3, [r7, #12]
 800784e:	60bb      	str	r3, [r7, #8]
    __asm__ volatile ("MSR  PRIMASK,%0": : "r" (int_posture): "memory");
 8007850:	68bb      	ldr	r3, [r7, #8]
 8007852:	f383 8810 	msr	PRIMASK, r3
}
 8007856:	bf00      	nop
}
 8007858:	e001      	b.n	800785e <_tx_thread_system_resume+0x1da>
                                return;
 800785a:	bf00      	nop
 800785c:	e000      	b.n	8007860 <_tx_thread_system_resume+0x1dc>
 800785e:	bf00      	nop

            /* Preemption is needed - return to the system!  */
            _tx_thread_system_return();
        }
    }
}
 8007860:	3758      	adds	r7, #88	; 0x58
 8007862:	46bd      	mov	sp, r7
 8007864:	bd80      	pop	{r7, pc}
 8007866:	bf00      	nop
 8007868:	20006448 	.word	0x20006448
 800786c:	200063c8 	.word	0x200063c8
 8007870:	200063c0 	.word	0x200063c0
 8007874:	200063c4 	.word	0x200063c4
 8007878:	200063b4 	.word	0x200063b4
 800787c:	e000ed04 	.word	0xe000ed04
 8007880:	200063b0 	.word	0x200063b0

08007884 <_tx_thread_system_suspend>:
/*                                            resulting in version 6.1    */
/*                                                                        */
/**************************************************************************/
VOID  _tx_thread_system_suspend(TX_THREAD *thread_ptr)
#ifndef TX_NOT_INTERRUPTABLE
{
 8007884:	b580      	push	{r7, lr}
 8007886:	b09e      	sub	sp, #120	; 0x78
 8007888:	af00      	add	r7, sp, #0
 800788a:	6078      	str	r0, [r7, #4]
TX_TRACE_BUFFER_ENTRY       *entry_ptr;
ULONG                       time_stamp =  ((ULONG) 0);
#endif

    /* Pickup thread pointer.  */
    TX_THREAD_GET_CURRENT(current_thread)
 800788c:	4b81      	ldr	r3, [pc, #516]	; (8007a94 <_tx_thread_system_suspend+0x210>)
 800788e:	681b      	ldr	r3, [r3, #0]
 8007890:	677b      	str	r3, [r7, #116]	; 0x74
    __asm__ volatile ("MRS  %0, PRIMASK ": "=r" (posture));
 8007892:	f3ef 8310 	mrs	r3, PRIMASK
 8007896:	64fb      	str	r3, [r7, #76]	; 0x4c
    return(posture);
 8007898:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
    int_posture = __get_interrupt_posture();
 800789a:	64bb      	str	r3, [r7, #72]	; 0x48
    __asm__ volatile ("CPSID i" : : : "memory");
 800789c:	b672      	cpsid	i
    return(int_posture);
 800789e:	6cbb      	ldr	r3, [r7, #72]	; 0x48
    /* Check this thread's stack.  */
    TX_THREAD_STACK_CHECK(thread_ptr)
#endif

    /* Lockout interrupts while the thread is being suspended.  */
    TX_DISABLE
 80078a0:	673b      	str	r3, [r7, #112]	; 0x70

#ifndef TX_NO_TIMER

    /* Is the current thread suspending?  */
    if (thread_ptr == current_thread)
 80078a2:	687a      	ldr	r2, [r7, #4]
 80078a4:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 80078a6:	429a      	cmp	r2, r3
 80078a8:	d112      	bne.n	80078d0 <_tx_thread_system_suspend+0x4c>
    {

        /* Pickup the wait option.  */
        timeout =  thread_ptr -> tx_thread_timer.tx_timer_internal_remaining_ticks;
 80078aa:	687b      	ldr	r3, [r7, #4]
 80078ac:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80078ae:	66fb      	str	r3, [r7, #108]	; 0x6c

        /* Determine if an activation is needed.  */
        if (timeout != TX_NO_WAIT)
 80078b0:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80078b2:	2b00      	cmp	r3, #0
 80078b4:	d008      	beq.n	80078c8 <_tx_thread_system_suspend+0x44>
        {

            /* Make sure the suspension is not a wait-forever.  */
            if (timeout != TX_WAIT_FOREVER)
 80078b6:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80078b8:	f1b3 3fff 	cmp.w	r3, #4294967295
 80078bc:	d004      	beq.n	80078c8 <_tx_thread_system_suspend+0x44>
            {

                /* Activate the thread timer with the timeout value setup in the caller.  */
                _tx_timer_system_activate(&(thread_ptr -> tx_thread_timer));
 80078be:	687b      	ldr	r3, [r7, #4]
 80078c0:	334c      	adds	r3, #76	; 0x4c
 80078c2:	4618      	mov	r0, r3
 80078c4:	f000 fa22 	bl	8007d0c <_tx_timer_system_activate>
            }
        }

        /* Yes, reset time slice for current thread.  */
        _tx_timer_time_slice =  thread_ptr -> tx_thread_new_time_slice;
 80078c8:	687b      	ldr	r3, [r7, #4]
 80078ca:	69db      	ldr	r3, [r3, #28]
 80078cc:	4a72      	ldr	r2, [pc, #456]	; (8007a98 <_tx_thread_system_suspend+0x214>)
 80078ce:	6013      	str	r3, [r2, #0]
    }
#endif

    /* Decrease the preempt disabled count.  */
    _tx_thread_preempt_disable--;
 80078d0:	4b72      	ldr	r3, [pc, #456]	; (8007a9c <_tx_thread_system_suspend+0x218>)
 80078d2:	681b      	ldr	r3, [r3, #0]
 80078d4:	3b01      	subs	r3, #1
 80078d6:	4a71      	ldr	r2, [pc, #452]	; (8007a9c <_tx_thread_system_suspend+0x218>)
 80078d8:	6013      	str	r3, [r2, #0]
    _tx_thread_performance_suspend_count++;
#endif

    /* Check to make sure the thread suspending flag is still set.  If not, it
       has already been resumed.  */
    if (thread_ptr -> tx_thread_suspending == TX_TRUE)
 80078da:	687b      	ldr	r3, [r7, #4]
 80078dc:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80078de:	2b01      	cmp	r3, #1
 80078e0:	f040 80a6 	bne.w	8007a30 <_tx_thread_system_suspend+0x1ac>
            time_stamp =  entry_ptr -> tx_trace_buffer_entry_time_stamp;
        }
#endif

        /* Actually suspend this thread.  But first, clear the suspending flag.  */
        thread_ptr -> tx_thread_suspending =  TX_FALSE;
 80078e4:	687b      	ldr	r3, [r7, #4]
 80078e6:	2200      	movs	r2, #0
 80078e8:	639a      	str	r2, [r3, #56]	; 0x38

        /* Pickup priority of thread.  */
        priority =  thread_ptr -> tx_thread_priority;
 80078ea:	687b      	ldr	r3, [r7, #4]
 80078ec:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80078ee:	66bb      	str	r3, [r7, #104]	; 0x68

        /* Pickup the next ready thread pointer.  */
        ready_next =      thread_ptr -> tx_thread_ready_next;
 80078f0:	687b      	ldr	r3, [r7, #4]
 80078f2:	6a1b      	ldr	r3, [r3, #32]
 80078f4:	667b      	str	r3, [r7, #100]	; 0x64

        /* Determine if there are other threads at this priority that are
           ready.  */
        if (ready_next != thread_ptr)
 80078f6:	6e7a      	ldr	r2, [r7, #100]	; 0x64
 80078f8:	687b      	ldr	r3, [r7, #4]
 80078fa:	429a      	cmp	r2, r3
 80078fc:	d015      	beq.n	800792a <_tx_thread_system_suspend+0xa6>
        {

            /* Yes, there are other threads at this priority ready.  */

            /* Pickup the previous ready thread pointer.  */
            ready_previous =  thread_ptr -> tx_thread_ready_previous;
 80078fe:	687b      	ldr	r3, [r7, #4]
 8007900:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007902:	653b      	str	r3, [r7, #80]	; 0x50

            /* Just remove this thread from the priority list.  */
            ready_next -> tx_thread_ready_previous =    ready_previous;
 8007904:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8007906:	6d3a      	ldr	r2, [r7, #80]	; 0x50
 8007908:	625a      	str	r2, [r3, #36]	; 0x24
            ready_previous -> tx_thread_ready_next =    ready_next;
 800790a:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800790c:	6e7a      	ldr	r2, [r7, #100]	; 0x64
 800790e:	621a      	str	r2, [r3, #32]

            /* Determine if this is the head of the priority list.  */
            if (_tx_thread_priority_list[priority] == thread_ptr)
 8007910:	4a63      	ldr	r2, [pc, #396]	; (8007aa0 <_tx_thread_system_suspend+0x21c>)
 8007912:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8007914:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8007918:	687a      	ldr	r2, [r7, #4]
 800791a:	429a      	cmp	r2, r3
 800791c:	d157      	bne.n	80079ce <_tx_thread_system_suspend+0x14a>
            {

                /* Update the head pointer of this priority list.  */
                _tx_thread_priority_list[priority] =  ready_next;
 800791e:	4960      	ldr	r1, [pc, #384]	; (8007aa0 <_tx_thread_system_suspend+0x21c>)
 8007920:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8007922:	6e7a      	ldr	r2, [r7, #100]	; 0x64
 8007924:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
 8007928:	e051      	b.n	80079ce <_tx_thread_system_suspend+0x14a>
        else
        {

            /* This is the only thread at this priority ready to run.  Set the head
               pointer to NULL.  */
            _tx_thread_priority_list[priority] =    TX_NULL;
 800792a:	4a5d      	ldr	r2, [pc, #372]	; (8007aa0 <_tx_thread_system_suspend+0x21c>)
 800792c:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 800792e:	2100      	movs	r1, #0
 8007930:	f842 1023 	str.w	r1, [r2, r3, lsl #2]
            /* Calculate the index into the bit map array.  */
            map_index =  priority/((UINT) 32);
#endif

            /* Clear this priority bit in the ready priority bit map.  */
            TX_MOD32_BIT_SET(priority, priority_bit)
 8007934:	2201      	movs	r2, #1
 8007936:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8007938:	fa02 f303 	lsl.w	r3, r2, r3
 800793c:	663b      	str	r3, [r7, #96]	; 0x60
            _tx_thread_priority_maps[MAP_INDEX] =  _tx_thread_priority_maps[MAP_INDEX] & (~(priority_bit));
 800793e:	4b59      	ldr	r3, [pc, #356]	; (8007aa4 <_tx_thread_system_suspend+0x220>)
 8007940:	681a      	ldr	r2, [r3, #0]
 8007942:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8007944:	43db      	mvns	r3, r3
 8007946:	4013      	ands	r3, r2
 8007948:	4a56      	ldr	r2, [pc, #344]	; (8007aa4 <_tx_thread_system_suspend+0x220>)
 800794a:	6013      	str	r3, [r2, #0]
            /* Calculate the base priority as well.  */
            base_priority =  map_index * ((UINT) 32);
#else

            /* Setup the base priority to zero.  */
            base_priority =   ((UINT) 0);
 800794c:	2300      	movs	r3, #0
 800794e:	65fb      	str	r3, [r7, #92]	; 0x5c
#endif

            /* Setup working variable for the priority map.  */
            priority_map =    _tx_thread_priority_maps[MAP_INDEX];
 8007950:	4b54      	ldr	r3, [pc, #336]	; (8007aa4 <_tx_thread_system_suspend+0x220>)
 8007952:	681b      	ldr	r3, [r3, #0]
 8007954:	65bb      	str	r3, [r7, #88]	; 0x58

            /* Make a quick check for no other threads ready for execution.  */
            if (priority_map == ((ULONG) 0))
 8007956:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8007958:	2b00      	cmp	r3, #0
 800795a:	d12b      	bne.n	80079b4 <_tx_thread_system_suspend+0x130>
            {

                /* Nothing else is ready.  Set highest priority and execute thread
                   accordingly.  */
                _tx_thread_highest_priority =  ((UINT) TX_MAX_PRIORITIES);
 800795c:	4b52      	ldr	r3, [pc, #328]	; (8007aa8 <_tx_thread_system_suspend+0x224>)
 800795e:	2220      	movs	r2, #32
 8007960:	601a      	str	r2, [r3, #0]
                _tx_thread_execute_ptr =       TX_NULL;
 8007962:	4b52      	ldr	r3, [pc, #328]	; (8007aac <_tx_thread_system_suspend+0x228>)
 8007964:	2200      	movs	r2, #0
 8007966:	601a      	str	r2, [r3, #0]
 8007968:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 800796a:	647b      	str	r3, [r7, #68]	; 0x44
    __asm__ volatile ("MSR  PRIMASK,%0": : "r" (int_posture): "memory");
 800796c:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800796e:	f383 8810 	msr	PRIMASK, r3
}
 8007972:	bf00      	nop
                /* Restore interrupts.  */
                TX_RESTORE

                /* Determine if preemption should take place. This is only possible if the current thread pointer is
                   not the same as the execute thread pointer AND the system state and preempt disable flags are clear.  */
                TX_THREAD_SYSTEM_RETURN_CHECK(combined_flags)
 8007974:	4b49      	ldr	r3, [pc, #292]	; (8007a9c <_tx_thread_system_suspend+0x218>)
 8007976:	681b      	ldr	r3, [r3, #0]
 8007978:	657b      	str	r3, [r7, #84]	; 0x54
                if (combined_flags == ((ULONG) 0))
 800797a:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800797c:	2b00      	cmp	r3, #0
 800797e:	f040 8081 	bne.w	8007a84 <_tx_thread_system_suspend+0x200>
    *((ULONG *) 0xE000ED04) = ((ULONG) 0x10000000);
 8007982:	4b4b      	ldr	r3, [pc, #300]	; (8007ab0 <_tx_thread_system_suspend+0x22c>)
 8007984:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8007988:	601a      	str	r2, [r3, #0]
    __asm__ volatile (" MRS  %0,IPSR ": "=r" (ipsr_value) );
 800798a:	f3ef 8305 	mrs	r3, IPSR
 800798e:	643b      	str	r3, [r7, #64]	; 0x40
    return(ipsr_value);
 8007990:	6c3b      	ldr	r3, [r7, #64]	; 0x40
    if (__get_ipsr_value() == 0)
 8007992:	2b00      	cmp	r3, #0
 8007994:	d10c      	bne.n	80079b0 <_tx_thread_system_suspend+0x12c>
    __asm__ volatile ("MRS  %0, PRIMASK ": "=r" (posture));
 8007996:	f3ef 8310 	mrs	r3, PRIMASK
 800799a:	63fb      	str	r3, [r7, #60]	; 0x3c
    return(posture);
 800799c:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
        interrupt_save = __get_interrupt_posture();
 800799e:	63bb      	str	r3, [r7, #56]	; 0x38
    __asm__ volatile ("CPSIE  i": : : "memory");
 80079a0:	b662      	cpsie	i
}
 80079a2:	bf00      	nop
 80079a4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80079a6:	637b      	str	r3, [r7, #52]	; 0x34
    __asm__ volatile ("MSR  PRIMASK,%0": : "r" (int_posture): "memory");
 80079a8:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80079aa:	f383 8810 	msr	PRIMASK, r3
}
 80079ae:	bf00      	nop
}
 80079b0:	bf00      	nop
                    /* Preemption is needed - return to the system!  */
                    _tx_thread_system_return();
                }

                /* Return to caller.  */
                return;
 80079b2:	e067      	b.n	8007a84 <_tx_thread_system_suspend+0x200>
            {

                /* Other threads at different priority levels are ready to run.  */

                /* Calculate the lowest bit set in the priority map. */
                TX_LOWEST_SET_BIT_CALCULATE(priority_map, priority_bit)
 80079b4:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 80079b6:	fa93 f3a3 	rbit	r3, r3
 80079ba:	65bb      	str	r3, [r7, #88]	; 0x58
 80079bc:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 80079be:	fab3 f383 	clz	r3, r3
 80079c2:	663b      	str	r3, [r7, #96]	; 0x60

                /* Setup the next highest priority variable.  */
                _tx_thread_highest_priority =  base_priority + ((UINT) priority_bit);
 80079c4:	6dfa      	ldr	r2, [r7, #92]	; 0x5c
 80079c6:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 80079c8:	4413      	add	r3, r2
 80079ca:	4a37      	ldr	r2, [pc, #220]	; (8007aa8 <_tx_thread_system_suspend+0x224>)
 80079cc:	6013      	str	r3, [r2, #0]
            }
        }

        /* Determine if the suspending thread is the thread designated to execute.  */
        if (thread_ptr == _tx_thread_execute_ptr)
 80079ce:	4b37      	ldr	r3, [pc, #220]	; (8007aac <_tx_thread_system_suspend+0x228>)
 80079d0:	681b      	ldr	r3, [r3, #0]
 80079d2:	687a      	ldr	r2, [r7, #4]
 80079d4:	429a      	cmp	r2, r3
 80079d6:	d12b      	bne.n	8007a30 <_tx_thread_system_suspend+0x1ac>
        {

            /* Pickup the highest priority thread to execute.  */
            _tx_thread_execute_ptr =  _tx_thread_priority_list[_tx_thread_highest_priority];
 80079d8:	4b33      	ldr	r3, [pc, #204]	; (8007aa8 <_tx_thread_system_suspend+0x224>)
 80079da:	681b      	ldr	r3, [r3, #0]
 80079dc:	4a30      	ldr	r2, [pc, #192]	; (8007aa0 <_tx_thread_system_suspend+0x21c>)
 80079de:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80079e2:	4a32      	ldr	r2, [pc, #200]	; (8007aac <_tx_thread_system_suspend+0x228>)
 80079e4:	6013      	str	r3, [r2, #0]
 80079e6:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 80079e8:	633b      	str	r3, [r7, #48]	; 0x30
    __asm__ volatile ("MSR  PRIMASK,%0": : "r" (int_posture): "memory");
 80079ea:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80079ec:	f383 8810 	msr	PRIMASK, r3
}
 80079f0:	bf00      	nop
            /* Restore interrupts.  */
            TX_RESTORE

            /* Determine if preemption should take place. This is only possible if the current thread pointer is
               not the same as the execute thread pointer AND the system state and preempt disable flags are clear.  */
            TX_THREAD_SYSTEM_RETURN_CHECK(combined_flags)
 80079f2:	4b2a      	ldr	r3, [pc, #168]	; (8007a9c <_tx_thread_system_suspend+0x218>)
 80079f4:	681b      	ldr	r3, [r3, #0]
 80079f6:	657b      	str	r3, [r7, #84]	; 0x54
            if (combined_flags == ((ULONG) 0))
 80079f8:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80079fa:	2b00      	cmp	r3, #0
 80079fc:	d144      	bne.n	8007a88 <_tx_thread_system_suspend+0x204>
    *((ULONG *) 0xE000ED04) = ((ULONG) 0x10000000);
 80079fe:	4b2c      	ldr	r3, [pc, #176]	; (8007ab0 <_tx_thread_system_suspend+0x22c>)
 8007a00:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8007a04:	601a      	str	r2, [r3, #0]
    __asm__ volatile (" MRS  %0,IPSR ": "=r" (ipsr_value) );
 8007a06:	f3ef 8305 	mrs	r3, IPSR
 8007a0a:	62fb      	str	r3, [r7, #44]	; 0x2c
    return(ipsr_value);
 8007a0c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
    if (__get_ipsr_value() == 0)
 8007a0e:	2b00      	cmp	r3, #0
 8007a10:	d10c      	bne.n	8007a2c <_tx_thread_system_suspend+0x1a8>
    __asm__ volatile ("MRS  %0, PRIMASK ": "=r" (posture));
 8007a12:	f3ef 8310 	mrs	r3, PRIMASK
 8007a16:	62bb      	str	r3, [r7, #40]	; 0x28
    return(posture);
 8007a18:	6abb      	ldr	r3, [r7, #40]	; 0x28
        interrupt_save = __get_interrupt_posture();
 8007a1a:	627b      	str	r3, [r7, #36]	; 0x24
    __asm__ volatile ("CPSIE  i": : : "memory");
 8007a1c:	b662      	cpsie	i
}
 8007a1e:	bf00      	nop
 8007a20:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007a22:	623b      	str	r3, [r7, #32]
    __asm__ volatile ("MSR  PRIMASK,%0": : "r" (int_posture): "memory");
 8007a24:	6a3b      	ldr	r3, [r7, #32]
 8007a26:	f383 8810 	msr	PRIMASK, r3
}
 8007a2a:	bf00      	nop
}
 8007a2c:	bf00      	nop
                /* Preemption is needed - return to the system!  */
                _tx_thread_system_return();
            }

            /* Return to caller.  */
            return;
 8007a2e:	e02b      	b.n	8007a88 <_tx_thread_system_suspend+0x204>
 8007a30:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8007a32:	61fb      	str	r3, [r7, #28]
    __asm__ volatile ("MSR  PRIMASK,%0": : "r" (int_posture): "memory");
 8007a34:	69fb      	ldr	r3, [r7, #28]
 8007a36:	f383 8810 	msr	PRIMASK, r3
}
 8007a3a:	bf00      	nop

    /* Restore interrupts.  */
    TX_RESTORE

    /* Determine if a preemption condition is present.  */
    if (current_thread != _tx_thread_execute_ptr)
 8007a3c:	4b1b      	ldr	r3, [pc, #108]	; (8007aac <_tx_thread_system_suspend+0x228>)
 8007a3e:	681b      	ldr	r3, [r3, #0]
 8007a40:	6f7a      	ldr	r2, [r7, #116]	; 0x74
 8007a42:	429a      	cmp	r2, r3
 8007a44:	d022      	beq.n	8007a8c <_tx_thread_system_suspend+0x208>
        TX_THREAD_STACK_CHECK(thread_ptr)
#endif

        /* Determine if preemption should take place. This is only possible if the current thread pointer is
           not the same as the execute thread pointer AND the system state and preempt disable flags are clear.  */
        TX_THREAD_SYSTEM_RETURN_CHECK(combined_flags)
 8007a46:	4b15      	ldr	r3, [pc, #84]	; (8007a9c <_tx_thread_system_suspend+0x218>)
 8007a48:	681b      	ldr	r3, [r3, #0]
 8007a4a:	657b      	str	r3, [r7, #84]	; 0x54
        if (combined_flags == ((ULONG) 0))
 8007a4c:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8007a4e:	2b00      	cmp	r3, #0
 8007a50:	d11c      	bne.n	8007a8c <_tx_thread_system_suspend+0x208>
    *((ULONG *) 0xE000ED04) = ((ULONG) 0x10000000);
 8007a52:	4b17      	ldr	r3, [pc, #92]	; (8007ab0 <_tx_thread_system_suspend+0x22c>)
 8007a54:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8007a58:	601a      	str	r2, [r3, #0]
    __asm__ volatile (" MRS  %0,IPSR ": "=r" (ipsr_value) );
 8007a5a:	f3ef 8305 	mrs	r3, IPSR
 8007a5e:	61bb      	str	r3, [r7, #24]
    return(ipsr_value);
 8007a60:	69bb      	ldr	r3, [r7, #24]
    if (__get_ipsr_value() == 0)
 8007a62:	2b00      	cmp	r3, #0
 8007a64:	d10c      	bne.n	8007a80 <_tx_thread_system_suspend+0x1fc>
    __asm__ volatile ("MRS  %0, PRIMASK ": "=r" (posture));
 8007a66:	f3ef 8310 	mrs	r3, PRIMASK
 8007a6a:	617b      	str	r3, [r7, #20]
    return(posture);
 8007a6c:	697b      	ldr	r3, [r7, #20]
        interrupt_save = __get_interrupt_posture();
 8007a6e:	613b      	str	r3, [r7, #16]
    __asm__ volatile ("CPSIE  i": : : "memory");
 8007a70:	b662      	cpsie	i
}
 8007a72:	bf00      	nop
 8007a74:	693b      	ldr	r3, [r7, #16]
 8007a76:	60fb      	str	r3, [r7, #12]
    __asm__ volatile ("MSR  PRIMASK,%0": : "r" (int_posture): "memory");
 8007a78:	68fb      	ldr	r3, [r7, #12]
 8007a7a:	f383 8810 	msr	PRIMASK, r3
}
 8007a7e:	bf00      	nop
}
 8007a80:	bf00      	nop
            _tx_thread_system_return();
        }
    }

    /* Return to caller.  */
    return;
 8007a82:	e003      	b.n	8007a8c <_tx_thread_system_suspend+0x208>
                return;
 8007a84:	bf00      	nop
 8007a86:	e002      	b.n	8007a8e <_tx_thread_system_suspend+0x20a>
            return;
 8007a88:	bf00      	nop
 8007a8a:	e000      	b.n	8007a8e <_tx_thread_system_suspend+0x20a>
    return;
 8007a8c:	bf00      	nop
}
 8007a8e:	3778      	adds	r7, #120	; 0x78
 8007a90:	46bd      	mov	sp, r7
 8007a92:	bd80      	pop	{r7, pc}
 8007a94:	200063b0 	.word	0x200063b0
 8007a98:	200069b4 	.word	0x200069b4
 8007a9c:	20006448 	.word	0x20006448
 8007aa0:	200063c8 	.word	0x200063c8
 8007aa4:	200063c0 	.word	0x200063c0
 8007aa8:	200063c4 	.word	0x200063c4
 8007aac:	200063b4 	.word	0x200063b4
 8007ab0:	e000ed04 	.word	0xe000ed04

08007ab4 <_tx_thread_time_slice>:
/*                                            TX_NO_TIMER is defined,     */
/*                                            resulting in version 6.1    */
/*                                                                        */
/**************************************************************************/
VOID  _tx_thread_time_slice(VOID)
{
 8007ab4:	b480      	push	{r7}
 8007ab6:	b087      	sub	sp, #28
 8007ab8:	af00      	add	r7, sp, #0
ULONG           system_state;
UINT            preempt_disable;
#endif

    /* Pickup thread pointer.  */
    TX_THREAD_GET_CURRENT(thread_ptr)
 8007aba:	4b21      	ldr	r3, [pc, #132]	; (8007b40 <_tx_thread_time_slice+0x8c>)
 8007abc:	681b      	ldr	r3, [r3, #0]
 8007abe:	617b      	str	r3, [r7, #20]
    __asm__ volatile ("MRS  %0, PRIMASK ": "=r" (posture));
 8007ac0:	f3ef 8310 	mrs	r3, PRIMASK
 8007ac4:	60fb      	str	r3, [r7, #12]
    return(posture);
 8007ac6:	68fb      	ldr	r3, [r7, #12]
    int_posture = __get_interrupt_posture();
 8007ac8:	60bb      	str	r3, [r7, #8]
    __asm__ volatile ("CPSID i" : : : "memory");
 8007aca:	b672      	cpsid	i
    return(int_posture);
 8007acc:	68bb      	ldr	r3, [r7, #8]
    /* Set the next thread pointer to NULL.  */
    next_thread_ptr =  TX_NULL;
#endif

    /* Lockout interrupts while the time-slice is evaluated.  */
    TX_DISABLE
 8007ace:	613b      	str	r3, [r7, #16]

    /* Clear the expired time-slice flag.  */
    _tx_timer_expired_time_slice =  TX_FALSE;
 8007ad0:	4b1c      	ldr	r3, [pc, #112]	; (8007b44 <_tx_thread_time_slice+0x90>)
 8007ad2:	2200      	movs	r2, #0
 8007ad4:	601a      	str	r2, [r3, #0]

    /* Make sure the thread pointer is valid.  */
    if (thread_ptr != TX_NULL)
 8007ad6:	697b      	ldr	r3, [r7, #20]
 8007ad8:	2b00      	cmp	r3, #0
 8007ada:	d024      	beq.n	8007b26 <_tx_thread_time_slice+0x72>
    {

        /* Make sure the thread is still active, i.e. not suspended.  */
        if (thread_ptr -> tx_thread_state == TX_READY)
 8007adc:	697b      	ldr	r3, [r7, #20]
 8007ade:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8007ae0:	2b00      	cmp	r3, #0
 8007ae2:	d120      	bne.n	8007b26 <_tx_thread_time_slice+0x72>
        {

            /* Setup a fresh time-slice for the thread.  */
            thread_ptr -> tx_thread_time_slice =  thread_ptr -> tx_thread_new_time_slice;
 8007ae4:	697b      	ldr	r3, [r7, #20]
 8007ae6:	69da      	ldr	r2, [r3, #28]
 8007ae8:	697b      	ldr	r3, [r7, #20]
 8007aea:	619a      	str	r2, [r3, #24]

            /* Reset the actual time-slice variable.  */
            _tx_timer_time_slice =  thread_ptr -> tx_thread_time_slice;
 8007aec:	697b      	ldr	r3, [r7, #20]
 8007aee:	699b      	ldr	r3, [r3, #24]
 8007af0:	4a15      	ldr	r2, [pc, #84]	; (8007b48 <_tx_thread_time_slice+0x94>)
 8007af2:	6013      	str	r3, [r2, #0]

            /* Determine if there is another thread at the same priority and preemption-threshold
               is not set.  Preemption-threshold overrides time-slicing.  */
            if (thread_ptr -> tx_thread_ready_next != thread_ptr)
 8007af4:	697b      	ldr	r3, [r7, #20]
 8007af6:	6a1b      	ldr	r3, [r3, #32]
 8007af8:	697a      	ldr	r2, [r7, #20]
 8007afa:	429a      	cmp	r2, r3
 8007afc:	d013      	beq.n	8007b26 <_tx_thread_time_slice+0x72>
            {

                /* Check to see if preemption-threshold is not being used.  */
                if (thread_ptr -> tx_thread_priority == thread_ptr -> tx_thread_preempt_threshold)
 8007afe:	697b      	ldr	r3, [r7, #20]
 8007b00:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8007b02:	697b      	ldr	r3, [r7, #20]
 8007b04:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8007b06:	429a      	cmp	r2, r3
 8007b08:	d10d      	bne.n	8007b26 <_tx_thread_time_slice+0x72>

                    /* Preemption-threshold is not being used by this thread.  */

                    /* There is another thread at this priority, make it the highest at
                       this priority level.  */
                    _tx_thread_priority_list[thread_ptr -> tx_thread_priority] =  thread_ptr -> tx_thread_ready_next;
 8007b0a:	697b      	ldr	r3, [r7, #20]
 8007b0c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007b0e:	697a      	ldr	r2, [r7, #20]
 8007b10:	6a12      	ldr	r2, [r2, #32]
 8007b12:	490e      	ldr	r1, [pc, #56]	; (8007b4c <_tx_thread_time_slice+0x98>)
 8007b14:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

                    /* Designate the highest priority thread as the one to execute.  Don't use this
                       thread's priority as an index just in case a higher priority thread is now
                       ready!  */
                    _tx_thread_execute_ptr =  _tx_thread_priority_list[_tx_thread_highest_priority];
 8007b18:	4b0d      	ldr	r3, [pc, #52]	; (8007b50 <_tx_thread_time_slice+0x9c>)
 8007b1a:	681b      	ldr	r3, [r3, #0]
 8007b1c:	4a0b      	ldr	r2, [pc, #44]	; (8007b4c <_tx_thread_time_slice+0x98>)
 8007b1e:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8007b22:	4a0c      	ldr	r2, [pc, #48]	; (8007b54 <_tx_thread_time_slice+0xa0>)
 8007b24:	6013      	str	r3, [r2, #0]
 8007b26:	693b      	ldr	r3, [r7, #16]
 8007b28:	607b      	str	r3, [r7, #4]
    __asm__ volatile ("MSR  PRIMASK,%0": : "r" (int_posture): "memory");
 8007b2a:	687b      	ldr	r3, [r7, #4]
 8007b2c:	f383 8810 	msr	PRIMASK, r3
}
 8007b30:	bf00      	nop

        /* Yes, check this thread's stack.  */
        TX_THREAD_STACK_CHECK(next_thread_ptr)
    }
#endif
}
 8007b32:	bf00      	nop
 8007b34:	371c      	adds	r7, #28
 8007b36:	46bd      	mov	sp, r7
 8007b38:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007b3c:	4770      	bx	lr
 8007b3e:	bf00      	nop
 8007b40:	200063b0 	.word	0x200063b0
 8007b44:	20006458 	.word	0x20006458
 8007b48:	200069b4 	.word	0x200069b4
 8007b4c:	200063c8 	.word	0x200063c8
 8007b50:	200063c4 	.word	0x200063c4
 8007b54:	200063b4 	.word	0x200063b4

08007b58 <_tx_thread_timeout>:
/*  09-30-2020     Yuxin Zhou               Modified comment(s),          */
/*                                            resulting in version 6.1    */
/*                                                                        */
/**************************************************************************/
VOID  _tx_thread_timeout(ULONG timeout_input)
{
 8007b58:	b580      	push	{r7, lr}
 8007b5a:	b08a      	sub	sp, #40	; 0x28
 8007b5c:	af00      	add	r7, sp, #0
 8007b5e:	6078      	str	r0, [r7, #4]
VOID            (*suspend_cleanup)(struct TX_THREAD_STRUCT *suspend_thread_ptr, ULONG suspension_sequence);
ULONG           suspension_sequence;


    /* Pickup the thread pointer.  */
    TX_THREAD_TIMEOUT_POINTER_SETUP(thread_ptr)
 8007b60:	687b      	ldr	r3, [r7, #4]
 8007b62:	627b      	str	r3, [r7, #36]	; 0x24
    __asm__ volatile ("MRS  %0, PRIMASK ": "=r" (posture));
 8007b64:	f3ef 8310 	mrs	r3, PRIMASK
 8007b68:	617b      	str	r3, [r7, #20]
    return(posture);
 8007b6a:	697b      	ldr	r3, [r7, #20]
    int_posture = __get_interrupt_posture();
 8007b6c:	613b      	str	r3, [r7, #16]
    __asm__ volatile ("CPSID i" : : : "memory");
 8007b6e:	b672      	cpsid	i
    return(int_posture);
 8007b70:	693b      	ldr	r3, [r7, #16]

    /* Disable interrupts.  */
    TX_DISABLE
 8007b72:	623b      	str	r3, [r7, #32]

    /* Determine how the thread is currently suspended.  */
    if (thread_ptr -> tx_thread_state == TX_SLEEP)
 8007b74:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007b76:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8007b78:	2b04      	cmp	r3, #4
 8007b7a:	d10e      	bne.n	8007b9a <_tx_thread_timeout+0x42>
        /* Restore interrupts.  */
        TX_RESTORE
#else

        /* Increment the disable preemption flag.  */
        _tx_thread_preempt_disable++;
 8007b7c:	4b13      	ldr	r3, [pc, #76]	; (8007bcc <_tx_thread_timeout+0x74>)
 8007b7e:	681b      	ldr	r3, [r3, #0]
 8007b80:	3301      	adds	r3, #1
 8007b82:	4a12      	ldr	r2, [pc, #72]	; (8007bcc <_tx_thread_timeout+0x74>)
 8007b84:	6013      	str	r3, [r2, #0]
 8007b86:	6a3b      	ldr	r3, [r7, #32]
 8007b88:	60fb      	str	r3, [r7, #12]
    __asm__ volatile ("MSR  PRIMASK,%0": : "r" (int_posture): "memory");
 8007b8a:	68fb      	ldr	r3, [r7, #12]
 8007b8c:	f383 8810 	msr	PRIMASK, r3
}
 8007b90:	bf00      	nop

        /* Restore interrupts.  */
        TX_RESTORE

        /* Lift the suspension on the sleeping thread.  */
        _tx_thread_system_resume(thread_ptr);
 8007b92:	6a78      	ldr	r0, [r7, #36]	; 0x24
 8007b94:	f7ff fd76 	bl	8007684 <_tx_thread_system_resume>

        /* Restore interrupts.  */
        TX_RESTORE
#endif
    }
}
 8007b98:	e013      	b.n	8007bc2 <_tx_thread_timeout+0x6a>
        suspend_cleanup =  thread_ptr -> tx_thread_suspend_cleanup;
 8007b9a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007b9c:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8007b9e:	61fb      	str	r3, [r7, #28]
        suspension_sequence =  thread_ptr -> tx_thread_suspension_sequence;
 8007ba0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007ba2:	f8d3 30ac 	ldr.w	r3, [r3, #172]	; 0xac
 8007ba6:	61bb      	str	r3, [r7, #24]
 8007ba8:	6a3b      	ldr	r3, [r7, #32]
 8007baa:	60bb      	str	r3, [r7, #8]
    __asm__ volatile ("MSR  PRIMASK,%0": : "r" (int_posture): "memory");
 8007bac:	68bb      	ldr	r3, [r7, #8]
 8007bae:	f383 8810 	msr	PRIMASK, r3
}
 8007bb2:	bf00      	nop
        if (suspend_cleanup != TX_NULL)
 8007bb4:	69fb      	ldr	r3, [r7, #28]
 8007bb6:	2b00      	cmp	r3, #0
 8007bb8:	d003      	beq.n	8007bc2 <_tx_thread_timeout+0x6a>
            (suspend_cleanup)(thread_ptr, suspension_sequence);
 8007bba:	69fb      	ldr	r3, [r7, #28]
 8007bbc:	69b9      	ldr	r1, [r7, #24]
 8007bbe:	6a78      	ldr	r0, [r7, #36]	; 0x24
 8007bc0:	4798      	blx	r3
}
 8007bc2:	bf00      	nop
 8007bc4:	3728      	adds	r7, #40	; 0x28
 8007bc6:	46bd      	mov	sp, r7
 8007bc8:	bd80      	pop	{r7, pc}
 8007bca:	bf00      	nop
 8007bcc:	20006448 	.word	0x20006448

08007bd0 <_tx_timer_expiration_process>:
/*                                            TX_NO_TIMER is defined,     */
/*                                            resulting in version 6.1    */
/*                                                                        */
/**************************************************************************/
VOID  _tx_timer_expiration_process(VOID)
{
 8007bd0:	b580      	push	{r7, lr}
 8007bd2:	b084      	sub	sp, #16
 8007bd4:	af00      	add	r7, sp, #0
    __asm__ volatile ("MRS  %0, PRIMASK ": "=r" (posture));
 8007bd6:	f3ef 8310 	mrs	r3, PRIMASK
 8007bda:	607b      	str	r3, [r7, #4]
    return(posture);
 8007bdc:	687b      	ldr	r3, [r7, #4]
    int_posture = __get_interrupt_posture();
 8007bde:	603b      	str	r3, [r7, #0]
    __asm__ volatile ("CPSID i" : : : "memory");
 8007be0:	b672      	cpsid	i
    return(int_posture);
 8007be2:	683b      	ldr	r3, [r7, #0]

    /* Don't process in the ISR, wakeup the system timer thread to process the
       timer expiration.  */

    /* Disable interrupts.  */
    TX_DISABLE
 8007be4:	60fb      	str	r3, [r7, #12]
    /* Restore interrupts.  */
    TX_RESTORE
#else

    /* Increment the preempt disable flag.  */
    _tx_thread_preempt_disable++;
 8007be6:	4b09      	ldr	r3, [pc, #36]	; (8007c0c <_tx_timer_expiration_process+0x3c>)
 8007be8:	681b      	ldr	r3, [r3, #0]
 8007bea:	3301      	adds	r3, #1
 8007bec:	4a07      	ldr	r2, [pc, #28]	; (8007c0c <_tx_timer_expiration_process+0x3c>)
 8007bee:	6013      	str	r3, [r2, #0]
 8007bf0:	68fb      	ldr	r3, [r7, #12]
 8007bf2:	60bb      	str	r3, [r7, #8]
    __asm__ volatile ("MSR  PRIMASK,%0": : "r" (int_posture): "memory");
 8007bf4:	68bb      	ldr	r3, [r7, #8]
 8007bf6:	f383 8810 	msr	PRIMASK, r3
}
 8007bfa:	bf00      	nop

    /* Restore interrupts.  */
    TX_RESTORE

    /* Call the system resume function to activate the timer thread.  */
    _tx_thread_system_resume(&_tx_timer_thread);
 8007bfc:	4804      	ldr	r0, [pc, #16]	; (8007c10 <_tx_timer_expiration_process+0x40>)
 8007bfe:	f7ff fd41 	bl	8007684 <_tx_thread_system_resume>
    }

    /* Restore interrupts.  */
    TX_RESTORE
#endif
}
 8007c02:	bf00      	nop
 8007c04:	3710      	adds	r7, #16
 8007c06:	46bd      	mov	sp, r7
 8007c08:	bd80      	pop	{r7, pc}
 8007c0a:	bf00      	nop
 8007c0c:	20006448 	.word	0x20006448
 8007c10:	200064f8 	.word	0x200064f8

08007c14 <_tx_timer_initialize>:
/*  09-30-2020     Yuxin Zhou               Modified comment(s),          */
/*                                            resulting in version 6.1    */
/*                                                                        */
/**************************************************************************/
VOID  _tx_timer_initialize(VOID)
{
 8007c14:	b590      	push	{r4, r7, lr}
 8007c16:	b089      	sub	sp, #36	; 0x24
 8007c18:	af06      	add	r7, sp, #24
#endif

#ifndef TX_DISABLE_REDUNDANT_CLEARING

    /* Initialize the system clock to 0.  */
    _tx_timer_system_clock =  ((ULONG) 0);
 8007c1a:	4b28      	ldr	r3, [pc, #160]	; (8007cbc <_tx_timer_initialize+0xa8>)
 8007c1c:	2200      	movs	r2, #0
 8007c1e:	601a      	str	r2, [r3, #0]

    /* Initialize the time-slice value to 0 to make sure it is disabled.  */
    _tx_timer_time_slice =  ((ULONG) 0);
 8007c20:	4b27      	ldr	r3, [pc, #156]	; (8007cc0 <_tx_timer_initialize+0xac>)
 8007c22:	2200      	movs	r2, #0
 8007c24:	601a      	str	r2, [r3, #0]

    /* Clear the expired flags.  */
    _tx_timer_expired_time_slice =  TX_FALSE;
 8007c26:	4b27      	ldr	r3, [pc, #156]	; (8007cc4 <_tx_timer_initialize+0xb0>)
 8007c28:	2200      	movs	r2, #0
 8007c2a:	601a      	str	r2, [r3, #0]
    _tx_timer_expired =             TX_FALSE;
 8007c2c:	4b26      	ldr	r3, [pc, #152]	; (8007cc8 <_tx_timer_initialize+0xb4>)
 8007c2e:	2200      	movs	r2, #0
 8007c30:	601a      	str	r2, [r3, #0]

    /* Set the currently expired timer being processed pointer to NULL.  */
    _tx_timer_expired_timer_ptr =  TX_NULL;
 8007c32:	4b26      	ldr	r3, [pc, #152]	; (8007ccc <_tx_timer_initialize+0xb8>)
 8007c34:	2200      	movs	r2, #0
 8007c36:	601a      	str	r2, [r3, #0]

    /* Initialize the thread and application timer management control structures.  */

    /* First, initialize the timer list.  */
    TX_MEMSET(&_tx_timer_list[0], 0, (sizeof(_tx_timer_list)));
 8007c38:	2280      	movs	r2, #128	; 0x80
 8007c3a:	2100      	movs	r1, #0
 8007c3c:	4824      	ldr	r0, [pc, #144]	; (8007cd0 <_tx_timer_initialize+0xbc>)
 8007c3e:	f000 fbaf 	bl	80083a0 <memset>
#endif

    /* Initialize all of the list pointers.  */
    _tx_timer_list_start =   &_tx_timer_list[0];
 8007c42:	4b24      	ldr	r3, [pc, #144]	; (8007cd4 <_tx_timer_initialize+0xc0>)
 8007c44:	4a22      	ldr	r2, [pc, #136]	; (8007cd0 <_tx_timer_initialize+0xbc>)
 8007c46:	601a      	str	r2, [r3, #0]
    _tx_timer_current_ptr =  &_tx_timer_list[0];
 8007c48:	4b23      	ldr	r3, [pc, #140]	; (8007cd8 <_tx_timer_initialize+0xc4>)
 8007c4a:	4a21      	ldr	r2, [pc, #132]	; (8007cd0 <_tx_timer_initialize+0xbc>)
 8007c4c:	601a      	str	r2, [r3, #0]

    /* Set the timer list end pointer to one past the actual timer list.  This is done
       to make the timer interrupt handling in assembly language a little easier.  */
    _tx_timer_list_end =     &_tx_timer_list[TX_TIMER_ENTRIES-((ULONG) 1)];
 8007c4e:	4b23      	ldr	r3, [pc, #140]	; (8007cdc <_tx_timer_initialize+0xc8>)
 8007c50:	4a23      	ldr	r2, [pc, #140]	; (8007ce0 <_tx_timer_initialize+0xcc>)
 8007c52:	601a      	str	r2, [r3, #0]
    _tx_timer_list_end =     TX_TIMER_POINTER_ADD(_tx_timer_list_end, ((ULONG) 1));
 8007c54:	4b21      	ldr	r3, [pc, #132]	; (8007cdc <_tx_timer_initialize+0xc8>)
 8007c56:	681b      	ldr	r3, [r3, #0]
 8007c58:	3304      	adds	r3, #4
 8007c5a:	4a20      	ldr	r2, [pc, #128]	; (8007cdc <_tx_timer_initialize+0xc8>)
 8007c5c:	6013      	str	r3, [r2, #0]

#ifndef TX_TIMER_PROCESS_IN_ISR

    /* Setup the variables associated with the system timer thread's stack and
       priority.  */
    _tx_timer_stack_start =  (VOID *) &_tx_timer_thread_stack_area[0];
 8007c5e:	4b21      	ldr	r3, [pc, #132]	; (8007ce4 <_tx_timer_initialize+0xd0>)
 8007c60:	4a21      	ldr	r2, [pc, #132]	; (8007ce8 <_tx_timer_initialize+0xd4>)
 8007c62:	601a      	str	r2, [r3, #0]
    _tx_timer_stack_size =   ((ULONG) TX_TIMER_THREAD_STACK_SIZE);
 8007c64:	4b21      	ldr	r3, [pc, #132]	; (8007cec <_tx_timer_initialize+0xd8>)
 8007c66:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8007c6a:	601a      	str	r2, [r3, #0]
    _tx_timer_priority =     ((UINT) TX_TIMER_THREAD_PRIORITY);
 8007c6c:	4b20      	ldr	r3, [pc, #128]	; (8007cf0 <_tx_timer_initialize+0xdc>)
 8007c6e:	2200      	movs	r2, #0
 8007c70:	601a      	str	r2, [r3, #0]
       low-level initialization component.  */
    do
    {

        /* Create the system timer thread.  */
        status =  _tx_thread_create(&_tx_timer_thread,
 8007c72:	4b1c      	ldr	r3, [pc, #112]	; (8007ce4 <_tx_timer_initialize+0xd0>)
 8007c74:	681b      	ldr	r3, [r3, #0]
 8007c76:	4a1d      	ldr	r2, [pc, #116]	; (8007cec <_tx_timer_initialize+0xd8>)
 8007c78:	6812      	ldr	r2, [r2, #0]
 8007c7a:	491d      	ldr	r1, [pc, #116]	; (8007cf0 <_tx_timer_initialize+0xdc>)
 8007c7c:	6809      	ldr	r1, [r1, #0]
 8007c7e:	481c      	ldr	r0, [pc, #112]	; (8007cf0 <_tx_timer_initialize+0xdc>)
 8007c80:	6800      	ldr	r0, [r0, #0]
 8007c82:	2400      	movs	r4, #0
 8007c84:	9405      	str	r4, [sp, #20]
 8007c86:	2400      	movs	r4, #0
 8007c88:	9404      	str	r4, [sp, #16]
 8007c8a:	9003      	str	r0, [sp, #12]
 8007c8c:	9102      	str	r1, [sp, #8]
 8007c8e:	9201      	str	r2, [sp, #4]
 8007c90:	9300      	str	r3, [sp, #0]
 8007c92:	4b18      	ldr	r3, [pc, #96]	; (8007cf4 <_tx_timer_initialize+0xe0>)
 8007c94:	4a18      	ldr	r2, [pc, #96]	; (8007cf8 <_tx_timer_initialize+0xe4>)
 8007c96:	4919      	ldr	r1, [pc, #100]	; (8007cfc <_tx_timer_initialize+0xe8>)
 8007c98:	4819      	ldr	r0, [pc, #100]	; (8007d00 <_tx_timer_initialize+0xec>)
 8007c9a:	f7ff f9f5 	bl	8007088 <_tx_thread_create>
 8007c9e:	6078      	str	r0, [r7, #4]
#endif

        /* Define timer initialize extension.  */
        TX_TIMER_INITIALIZE_EXTENSION(status)

    } while (status != TX_SUCCESS);
 8007ca0:	687b      	ldr	r3, [r7, #4]
 8007ca2:	2b00      	cmp	r3, #0
 8007ca4:	d1e5      	bne.n	8007c72 <_tx_timer_initialize+0x5e>
#endif

#ifndef TX_DISABLE_REDUNDANT_CLEARING

    /* Initialize the head pointer of the created application timer list.  */
    _tx_timer_created_ptr =  TX_NULL;
 8007ca6:	4b17      	ldr	r3, [pc, #92]	; (8007d04 <_tx_timer_initialize+0xf0>)
 8007ca8:	2200      	movs	r2, #0
 8007caa:	601a      	str	r2, [r3, #0]

    /* Set the created count to zero.  */
    _tx_timer_created_count =  TX_EMPTY;
 8007cac:	4b16      	ldr	r3, [pc, #88]	; (8007d08 <_tx_timer_initialize+0xf4>)
 8007cae:	2200      	movs	r2, #0
 8007cb0:	601a      	str	r2, [r3, #0]
    _tx_timer_performance_expiration_count =         ((ULONG) 0);
    _tx_timer_performance__expiration_adjust_count =  ((ULONG) 0);
#endif
#endif
#endif
}
 8007cb2:	bf00      	nop
 8007cb4:	370c      	adds	r7, #12
 8007cb6:	46bd      	mov	sp, r7
 8007cb8:	bd90      	pop	{r4, r7, pc}
 8007cba:	bf00      	nop
 8007cbc:	20006454 	.word	0x20006454
 8007cc0:	200069b4 	.word	0x200069b4
 8007cc4:	20006458 	.word	0x20006458
 8007cc8:	200064e8 	.word	0x200064e8
 8007ccc:	200064f4 	.word	0x200064f4
 8007cd0:	2000645c 	.word	0x2000645c
 8007cd4:	200064dc 	.word	0x200064dc
 8007cd8:	200064e4 	.word	0x200064e4
 8007cdc:	200064e0 	.word	0x200064e0
 8007ce0:	200064d8 	.word	0x200064d8
 8007ce4:	200065a8 	.word	0x200065a8
 8007ce8:	200065b4 	.word	0x200065b4
 8007cec:	200065ac 	.word	0x200065ac
 8007cf0:	200065b0 	.word	0x200065b0
 8007cf4:	4154494d 	.word	0x4154494d
 8007cf8:	08007e41 	.word	0x08007e41
 8007cfc:	080094fc 	.word	0x080094fc
 8007d00:	200064f8 	.word	0x200064f8
 8007d04:	200064ec 	.word	0x200064ec
 8007d08:	200064f0 	.word	0x200064f0

08007d0c <_tx_timer_system_activate>:
/*                                            TX_NO_TIMER is defined,     */
/*                                            resulting in version 6.1    */
/*                                                                        */
/**************************************************************************/
VOID  _tx_timer_system_activate(TX_TIMER_INTERNAL *timer_ptr)
{
 8007d0c:	b480      	push	{r7}
 8007d0e:	b089      	sub	sp, #36	; 0x24
 8007d10:	af00      	add	r7, sp, #0
 8007d12:	6078      	str	r0, [r7, #4]
ULONG                       remaining_ticks;
ULONG                       expiration_time;


    /* Pickup the remaining ticks.  */
    remaining_ticks =  timer_ptr -> tx_timer_internal_remaining_ticks;
 8007d14:	687b      	ldr	r3, [r7, #4]
 8007d16:	681b      	ldr	r3, [r3, #0]
 8007d18:	617b      	str	r3, [r7, #20]

    /* Determine if there is a timer to activate.  */
    if (remaining_ticks != ((ULONG) 0))
 8007d1a:	697b      	ldr	r3, [r7, #20]
 8007d1c:	2b00      	cmp	r3, #0
 8007d1e:	d04a      	beq.n	8007db6 <_tx_timer_system_activate+0xaa>
    {

        /* Determine if the timer is set to wait forever.  */
        if (remaining_ticks != TX_WAIT_FOREVER)
 8007d20:	697b      	ldr	r3, [r7, #20]
 8007d22:	f1b3 3fff 	cmp.w	r3, #4294967295
 8007d26:	d046      	beq.n	8007db6 <_tx_timer_system_activate+0xaa>
        {

            /* Valid timer activate request.  */

            /* Determine if the timer still needs activation.  */
            if (timer_ptr -> tx_timer_internal_list_head == TX_NULL)
 8007d28:	687b      	ldr	r3, [r7, #4]
 8007d2a:	699b      	ldr	r3, [r3, #24]
 8007d2c:	2b00      	cmp	r3, #0
 8007d2e:	d142      	bne.n	8007db6 <_tx_timer_system_activate+0xaa>
            {

                /* Activate the timer.  */

                /* Calculate the amount of time remaining for the timer.  */
                if (remaining_ticks > TX_TIMER_ENTRIES)
 8007d30:	697b      	ldr	r3, [r7, #20]
 8007d32:	2b20      	cmp	r3, #32
 8007d34:	d902      	bls.n	8007d3c <_tx_timer_system_activate+0x30>
                {

                    /* Set expiration time to the maximum number of entries.  */
                    expiration_time =  TX_TIMER_ENTRIES - ((ULONG) 1);
 8007d36:	231f      	movs	r3, #31
 8007d38:	61bb      	str	r3, [r7, #24]
 8007d3a:	e002      	b.n	8007d42 <_tx_timer_system_activate+0x36>
                {

                    /* Timer value fits in the timer entries.  */

                    /* Set the expiration time.  */
                    expiration_time =  (remaining_ticks - ((ULONG) 1));
 8007d3c:	697b      	ldr	r3, [r7, #20]
 8007d3e:	3b01      	subs	r3, #1
 8007d40:	61bb      	str	r3, [r7, #24]

                /* At this point, we are ready to put the timer on one of
                   the timer lists.  */

                /* Calculate the proper place for the timer.  */
                timer_list =  TX_TIMER_POINTER_ADD(_tx_timer_current_ptr, expiration_time);
 8007d42:	4b20      	ldr	r3, [pc, #128]	; (8007dc4 <_tx_timer_system_activate+0xb8>)
 8007d44:	681a      	ldr	r2, [r3, #0]
 8007d46:	69bb      	ldr	r3, [r7, #24]
 8007d48:	009b      	lsls	r3, r3, #2
 8007d4a:	4413      	add	r3, r2
 8007d4c:	61fb      	str	r3, [r7, #28]
                if (TX_TIMER_INDIRECT_TO_VOID_POINTER_CONVERT(timer_list) >= TX_TIMER_INDIRECT_TO_VOID_POINTER_CONVERT(_tx_timer_list_end))
 8007d4e:	4b1e      	ldr	r3, [pc, #120]	; (8007dc8 <_tx_timer_system_activate+0xbc>)
 8007d50:	681b      	ldr	r3, [r3, #0]
 8007d52:	69fa      	ldr	r2, [r7, #28]
 8007d54:	429a      	cmp	r2, r3
 8007d56:	d30b      	bcc.n	8007d70 <_tx_timer_system_activate+0x64>
                {

                    /* Wrap from the beginning of the list.  */
                    delta =  TX_TIMER_POINTER_DIF(timer_list, _tx_timer_list_end);
 8007d58:	4b1b      	ldr	r3, [pc, #108]	; (8007dc8 <_tx_timer_system_activate+0xbc>)
 8007d5a:	681b      	ldr	r3, [r3, #0]
 8007d5c:	69fa      	ldr	r2, [r7, #28]
 8007d5e:	1ad3      	subs	r3, r2, r3
 8007d60:	109b      	asrs	r3, r3, #2
 8007d62:	613b      	str	r3, [r7, #16]
                    timer_list =  TX_TIMER_POINTER_ADD(_tx_timer_list_start, delta);
 8007d64:	4b19      	ldr	r3, [pc, #100]	; (8007dcc <_tx_timer_system_activate+0xc0>)
 8007d66:	681a      	ldr	r2, [r3, #0]
 8007d68:	693b      	ldr	r3, [r7, #16]
 8007d6a:	009b      	lsls	r3, r3, #2
 8007d6c:	4413      	add	r3, r2
 8007d6e:	61fb      	str	r3, [r7, #28]
                }

                /* Now put the timer on this list.  */
                if ((*timer_list) == TX_NULL)
 8007d70:	69fb      	ldr	r3, [r7, #28]
 8007d72:	681b      	ldr	r3, [r3, #0]
 8007d74:	2b00      	cmp	r3, #0
 8007d76:	d109      	bne.n	8007d8c <_tx_timer_system_activate+0x80>
                {

                    /* This list is NULL, just put the new timer on it.  */

                    /* Setup the links in this timer.  */
                    timer_ptr -> tx_timer_internal_active_next =      timer_ptr;
 8007d78:	687b      	ldr	r3, [r7, #4]
 8007d7a:	687a      	ldr	r2, [r7, #4]
 8007d7c:	611a      	str	r2, [r3, #16]
                    timer_ptr -> tx_timer_internal_active_previous =  timer_ptr;
 8007d7e:	687b      	ldr	r3, [r7, #4]
 8007d80:	687a      	ldr	r2, [r7, #4]
 8007d82:	615a      	str	r2, [r3, #20]

                    /* Setup the list head pointer.  */
                    *timer_list =  timer_ptr;
 8007d84:	69fb      	ldr	r3, [r7, #28]
 8007d86:	687a      	ldr	r2, [r7, #4]
 8007d88:	601a      	str	r2, [r3, #0]
 8007d8a:	e011      	b.n	8007db0 <_tx_timer_system_activate+0xa4>
                }
                else
                {

                    /* This list is not NULL, add current timer to the end. */
                    next_timer =                                        *timer_list;
 8007d8c:	69fb      	ldr	r3, [r7, #28]
 8007d8e:	681b      	ldr	r3, [r3, #0]
 8007d90:	60fb      	str	r3, [r7, #12]
                    previous_timer =                                    next_timer -> tx_timer_internal_active_previous;
 8007d92:	68fb      	ldr	r3, [r7, #12]
 8007d94:	695b      	ldr	r3, [r3, #20]
 8007d96:	60bb      	str	r3, [r7, #8]
                    previous_timer -> tx_timer_internal_active_next =   timer_ptr;
 8007d98:	68bb      	ldr	r3, [r7, #8]
 8007d9a:	687a      	ldr	r2, [r7, #4]
 8007d9c:	611a      	str	r2, [r3, #16]
                    next_timer -> tx_timer_internal_active_previous =   timer_ptr;
 8007d9e:	68fb      	ldr	r3, [r7, #12]
 8007da0:	687a      	ldr	r2, [r7, #4]
 8007da2:	615a      	str	r2, [r3, #20]
                    timer_ptr -> tx_timer_internal_active_next =        next_timer;
 8007da4:	687b      	ldr	r3, [r7, #4]
 8007da6:	68fa      	ldr	r2, [r7, #12]
 8007da8:	611a      	str	r2, [r3, #16]
                    timer_ptr -> tx_timer_internal_active_previous =    previous_timer;
 8007daa:	687b      	ldr	r3, [r7, #4]
 8007dac:	68ba      	ldr	r2, [r7, #8]
 8007dae:	615a      	str	r2, [r3, #20]
                }

                /* Setup list head pointer.  */
                timer_ptr -> tx_timer_internal_list_head =  timer_list;
 8007db0:	687b      	ldr	r3, [r7, #4]
 8007db2:	69fa      	ldr	r2, [r7, #28]
 8007db4:	619a      	str	r2, [r3, #24]
            }
        }
    }
}
 8007db6:	bf00      	nop
 8007db8:	3724      	adds	r7, #36	; 0x24
 8007dba:	46bd      	mov	sp, r7
 8007dbc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007dc0:	4770      	bx	lr
 8007dc2:	bf00      	nop
 8007dc4:	200064e4 	.word	0x200064e4
 8007dc8:	200064e0 	.word	0x200064e0
 8007dcc:	200064dc 	.word	0x200064dc

08007dd0 <_tx_timer_system_deactivate>:
/*  09-30-2020     Yuxin Zhou               Modified comment(s),          */
/*                                            resulting in version 6.1    */
/*                                                                        */
/**************************************************************************/
VOID  _tx_timer_system_deactivate(TX_TIMER_INTERNAL *timer_ptr)
{
 8007dd0:	b480      	push	{r7}
 8007dd2:	b087      	sub	sp, #28
 8007dd4:	af00      	add	r7, sp, #0
 8007dd6:	6078      	str	r0, [r7, #4]
TX_TIMER_INTERNAL   *next_timer;
TX_TIMER_INTERNAL   *previous_timer;


    /* Pickup the list head pointer.  */
    list_head =  timer_ptr -> tx_timer_internal_list_head;
 8007dd8:	687b      	ldr	r3, [r7, #4]
 8007dda:	699b      	ldr	r3, [r3, #24]
 8007ddc:	617b      	str	r3, [r7, #20]

    /* Determine if the timer still needs deactivation.  */
    if (list_head != TX_NULL)
 8007dde:	697b      	ldr	r3, [r7, #20]
 8007de0:	2b00      	cmp	r3, #0
 8007de2:	d026      	beq.n	8007e32 <_tx_timer_system_deactivate+0x62>
    {

        /* Deactivate the timer.  */

        /* Pickup the next active timer.  */
        next_timer =  timer_ptr -> tx_timer_internal_active_next;
 8007de4:	687b      	ldr	r3, [r7, #4]
 8007de6:	691b      	ldr	r3, [r3, #16]
 8007de8:	613b      	str	r3, [r7, #16]

        /* See if this is the only timer in the list.  */
        if (timer_ptr == next_timer)
 8007dea:	687a      	ldr	r2, [r7, #4]
 8007dec:	693b      	ldr	r3, [r7, #16]
 8007dee:	429a      	cmp	r2, r3
 8007df0:	d108      	bne.n	8007e04 <_tx_timer_system_deactivate+0x34>
        {

            /* Yes, the only timer on the list.  */

            /* Determine if the head pointer needs to be updated.  */
            if (*(list_head) == timer_ptr)
 8007df2:	697b      	ldr	r3, [r7, #20]
 8007df4:	681b      	ldr	r3, [r3, #0]
 8007df6:	687a      	ldr	r2, [r7, #4]
 8007df8:	429a      	cmp	r2, r3
 8007dfa:	d117      	bne.n	8007e2c <_tx_timer_system_deactivate+0x5c>
            {

                /* Update the head pointer.  */
                *(list_head) =  TX_NULL;
 8007dfc:	697b      	ldr	r3, [r7, #20]
 8007dfe:	2200      	movs	r2, #0
 8007e00:	601a      	str	r2, [r3, #0]
 8007e02:	e013      	b.n	8007e2c <_tx_timer_system_deactivate+0x5c>
        {

            /* At least one more timer is on the same expiration list.  */

            /* Update the links of the adjacent timers.  */
            previous_timer =                                   timer_ptr -> tx_timer_internal_active_previous;
 8007e04:	687b      	ldr	r3, [r7, #4]
 8007e06:	695b      	ldr	r3, [r3, #20]
 8007e08:	60fb      	str	r3, [r7, #12]
            next_timer -> tx_timer_internal_active_previous =  previous_timer;
 8007e0a:	693b      	ldr	r3, [r7, #16]
 8007e0c:	68fa      	ldr	r2, [r7, #12]
 8007e0e:	615a      	str	r2, [r3, #20]
            previous_timer -> tx_timer_internal_active_next =  next_timer;
 8007e10:	68fb      	ldr	r3, [r7, #12]
 8007e12:	693a      	ldr	r2, [r7, #16]
 8007e14:	611a      	str	r2, [r3, #16]

            /* Determine if the head pointer needs to be updated.  */
            if (*(list_head) == timer_ptr)
 8007e16:	697b      	ldr	r3, [r7, #20]
 8007e18:	681b      	ldr	r3, [r3, #0]
 8007e1a:	687a      	ldr	r2, [r7, #4]
 8007e1c:	429a      	cmp	r2, r3
 8007e1e:	d105      	bne.n	8007e2c <_tx_timer_system_deactivate+0x5c>
            {

                /* Update the next timer in the list with the list head pointer.  */
                next_timer -> tx_timer_internal_list_head =  list_head;
 8007e20:	693b      	ldr	r3, [r7, #16]
 8007e22:	697a      	ldr	r2, [r7, #20]
 8007e24:	619a      	str	r2, [r3, #24]

                /* Update the head pointer.  */
                *(list_head) =  next_timer;
 8007e26:	697b      	ldr	r3, [r7, #20]
 8007e28:	693a      	ldr	r2, [r7, #16]
 8007e2a:	601a      	str	r2, [r3, #0]
            }
        }

        /* Clear the timer's list head pointer.  */
        timer_ptr -> tx_timer_internal_list_head =  TX_NULL;
 8007e2c:	687b      	ldr	r3, [r7, #4]
 8007e2e:	2200      	movs	r2, #0
 8007e30:	619a      	str	r2, [r3, #24]
    }
}
 8007e32:	bf00      	nop
 8007e34:	371c      	adds	r7, #28
 8007e36:	46bd      	mov	sp, r7
 8007e38:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007e3c:	4770      	bx	lr
	...

08007e40 <_tx_timer_thread_entry>:
/*                                            resulting in version 6.1    */
/*                                                                        */
/**************************************************************************/
#ifndef TX_TIMER_PROCESS_IN_ISR
VOID  _tx_timer_thread_entry(ULONG timer_thread_input)
{
 8007e40:	b580      	push	{r7, lr}
 8007e42:	b098      	sub	sp, #96	; 0x60
 8007e44:	af00      	add	r7, sp, #0
 8007e46:	6078      	str	r0, [r7, #4]
TX_TIMER_INTERNAL           *reactivate_timer;
TX_TIMER_INTERNAL           *next_timer;
TX_TIMER_INTERNAL           *previous_timer;
TX_TIMER_INTERNAL           *current_timer;
VOID                        (*timeout_function)(ULONG id);
ULONG                       timeout_param =  ((ULONG) 0);
 8007e48:	2300      	movs	r3, #0
 8007e4a:	657b      	str	r3, [r7, #84]	; 0x54
#endif


    /* Make sure the timer input is correct.  This also gets rid of the
       silly compiler warnings.  */
    if (timer_thread_input == TX_TIMER_ID)
 8007e4c:	687b      	ldr	r3, [r7, #4]
 8007e4e:	4a73      	ldr	r2, [pc, #460]	; (800801c <_tx_timer_thread_entry+0x1dc>)
 8007e50:	4293      	cmp	r3, r2
 8007e52:	f040 80de 	bne.w	8008012 <_tx_timer_thread_entry+0x1d2>
    __asm__ volatile ("MRS  %0, PRIMASK ": "=r" (posture));
 8007e56:	f3ef 8310 	mrs	r3, PRIMASK
 8007e5a:	643b      	str	r3, [r7, #64]	; 0x40
    return(posture);
 8007e5c:	6c3b      	ldr	r3, [r7, #64]	; 0x40
    int_posture = __get_interrupt_posture();
 8007e5e:	63fb      	str	r3, [r7, #60]	; 0x3c
    __asm__ volatile ("CPSID i" : : : "memory");
 8007e60:	b672      	cpsid	i
    return(int_posture);
 8007e62:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
        {

            /* First, move the current list pointer and clear the timer
               expired value.  This allows the interrupt handling portion
               to continue looking for timer expirations.  */
            TX_DISABLE
 8007e64:	65fb      	str	r3, [r7, #92]	; 0x5c

            /* Save the current timer expiration list pointer.  */
            expired_timers =  *_tx_timer_current_ptr;
 8007e66:	4b6e      	ldr	r3, [pc, #440]	; (8008020 <_tx_timer_thread_entry+0x1e0>)
 8007e68:	681b      	ldr	r3, [r3, #0]
 8007e6a:	681b      	ldr	r3, [r3, #0]
 8007e6c:	60fb      	str	r3, [r7, #12]

            /* Modify the head pointer in the first timer in the list, if there
               is one!  */
            if (expired_timers != TX_NULL)
 8007e6e:	68fb      	ldr	r3, [r7, #12]
 8007e70:	2b00      	cmp	r3, #0
 8007e72:	d003      	beq.n	8007e7c <_tx_timer_thread_entry+0x3c>
            {

                expired_timers -> tx_timer_internal_list_head =  &expired_timers;
 8007e74:	68fb      	ldr	r3, [r7, #12]
 8007e76:	f107 020c 	add.w	r2, r7, #12
 8007e7a:	619a      	str	r2, [r3, #24]
            }

            /* Set the current list pointer to NULL.  */
            *_tx_timer_current_ptr =  TX_NULL;
 8007e7c:	4b68      	ldr	r3, [pc, #416]	; (8008020 <_tx_timer_thread_entry+0x1e0>)
 8007e7e:	681b      	ldr	r3, [r3, #0]
 8007e80:	2200      	movs	r2, #0
 8007e82:	601a      	str	r2, [r3, #0]

            /* Move the current pointer up one timer entry wrap if we get to
               the end of the list.  */
            _tx_timer_current_ptr =  TX_TIMER_POINTER_ADD(_tx_timer_current_ptr, 1);
 8007e84:	4b66      	ldr	r3, [pc, #408]	; (8008020 <_tx_timer_thread_entry+0x1e0>)
 8007e86:	681b      	ldr	r3, [r3, #0]
 8007e88:	3304      	adds	r3, #4
 8007e8a:	4a65      	ldr	r2, [pc, #404]	; (8008020 <_tx_timer_thread_entry+0x1e0>)
 8007e8c:	6013      	str	r3, [r2, #0]
            if (_tx_timer_current_ptr == _tx_timer_list_end)
 8007e8e:	4b64      	ldr	r3, [pc, #400]	; (8008020 <_tx_timer_thread_entry+0x1e0>)
 8007e90:	681a      	ldr	r2, [r3, #0]
 8007e92:	4b64      	ldr	r3, [pc, #400]	; (8008024 <_tx_timer_thread_entry+0x1e4>)
 8007e94:	681b      	ldr	r3, [r3, #0]
 8007e96:	429a      	cmp	r2, r3
 8007e98:	d103      	bne.n	8007ea2 <_tx_timer_thread_entry+0x62>
            {

                _tx_timer_current_ptr =  _tx_timer_list_start;
 8007e9a:	4b63      	ldr	r3, [pc, #396]	; (8008028 <_tx_timer_thread_entry+0x1e8>)
 8007e9c:	681b      	ldr	r3, [r3, #0]
 8007e9e:	4a60      	ldr	r2, [pc, #384]	; (8008020 <_tx_timer_thread_entry+0x1e0>)
 8007ea0:	6013      	str	r3, [r2, #0]
            }

            /* Clear the expired flag.  */
            _tx_timer_expired =  TX_FALSE;
 8007ea2:	4b62      	ldr	r3, [pc, #392]	; (800802c <_tx_timer_thread_entry+0x1ec>)
 8007ea4:	2200      	movs	r2, #0
 8007ea6:	601a      	str	r2, [r3, #0]
 8007ea8:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8007eaa:	633b      	str	r3, [r7, #48]	; 0x30
    __asm__ volatile ("MSR  PRIMASK,%0": : "r" (int_posture): "memory");
 8007eac:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007eae:	f383 8810 	msr	PRIMASK, r3
}
 8007eb2:	bf00      	nop
    __asm__ volatile ("MRS  %0, PRIMASK ": "=r" (posture));
 8007eb4:	f3ef 8310 	mrs	r3, PRIMASK
 8007eb8:	63bb      	str	r3, [r7, #56]	; 0x38
    return(posture);
 8007eba:	6bbb      	ldr	r3, [r7, #56]	; 0x38
    int_posture = __get_interrupt_posture();
 8007ebc:	637b      	str	r3, [r7, #52]	; 0x34
    __asm__ volatile ("CPSID i" : : : "memory");
 8007ebe:	b672      	cpsid	i
    return(int_posture);
 8007ec0:	6b7b      	ldr	r3, [r7, #52]	; 0x34

            /* Restore interrupts temporarily.  */
            TX_RESTORE

            /* Disable interrupts again.  */
            TX_DISABLE
 8007ec2:	65fb      	str	r3, [r7, #92]	; 0x5c

            /* Next, process the expiration of the associated timers at this
               time slot.  */
            while (expired_timers != TX_NULL)
 8007ec4:	e07f      	b.n	8007fc6 <_tx_timer_thread_entry+0x186>
            {

                /* Something is on the list.  Remove it and process the expiration.  */
                current_timer =  expired_timers;
 8007ec6:	68fb      	ldr	r3, [r7, #12]
 8007ec8:	64fb      	str	r3, [r7, #76]	; 0x4c

                /* Pickup the next timer.  */
                next_timer =  expired_timers -> tx_timer_internal_active_next;
 8007eca:	68fb      	ldr	r3, [r7, #12]
 8007ecc:	691b      	ldr	r3, [r3, #16]
 8007ece:	64bb      	str	r3, [r7, #72]	; 0x48

                /* Set the reactivate_timer to NULL.  */
                reactivate_timer =  TX_NULL;
 8007ed0:	2300      	movs	r3, #0
 8007ed2:	60bb      	str	r3, [r7, #8]

                /* Determine if this is the only timer.  */
                if (current_timer == next_timer)
 8007ed4:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 8007ed6:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8007ed8:	429a      	cmp	r2, r3
 8007eda:	d102      	bne.n	8007ee2 <_tx_timer_thread_entry+0xa2>
                {

                    /* Yes, this is the only timer in the list.  */

                    /* Set the head pointer to NULL.  */
                    expired_timers =  TX_NULL;
 8007edc:	2300      	movs	r3, #0
 8007ede:	60fb      	str	r3, [r7, #12]
 8007ee0:	e00e      	b.n	8007f00 <_tx_timer_thread_entry+0xc0>
                {

                    /* No, not the only expired timer.  */

                    /* Remove this timer from the expired list.  */
                    previous_timer =                                   current_timer -> tx_timer_internal_active_previous;
 8007ee2:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8007ee4:	695b      	ldr	r3, [r3, #20]
 8007ee6:	647b      	str	r3, [r7, #68]	; 0x44
                    next_timer -> tx_timer_internal_active_previous =  previous_timer;
 8007ee8:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8007eea:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8007eec:	615a      	str	r2, [r3, #20]
                    previous_timer -> tx_timer_internal_active_next =  next_timer;
 8007eee:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8007ef0:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8007ef2:	611a      	str	r2, [r3, #16]

                    /* Modify the next timer's list head to point at the current list head.  */
                    next_timer -> tx_timer_internal_list_head =  &expired_timers;
 8007ef4:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8007ef6:	f107 020c 	add.w	r2, r7, #12
 8007efa:	619a      	str	r2, [r3, #24]

                    /* Set the list head pointer.  */
                    expired_timers =  next_timer;
 8007efc:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8007efe:	60fb      	str	r3, [r7, #12]

                /* In any case, the timer is now off of the expired list.  */

                /* Determine if the timer has expired or if it is just a really
                   big timer that needs to be placed in the list again.  */
                if (current_timer -> tx_timer_internal_remaining_ticks > TX_TIMER_ENTRIES)
 8007f00:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8007f02:	681b      	ldr	r3, [r3, #0]
 8007f04:	2b20      	cmp	r3, #32
 8007f06:	d911      	bls.n	8007f2c <_tx_timer_thread_entry+0xec>
                    }
#endif

                    /* Decrement the remaining ticks of the timer.  */
                    current_timer -> tx_timer_internal_remaining_ticks =
                            current_timer -> tx_timer_internal_remaining_ticks - TX_TIMER_ENTRIES;
 8007f08:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8007f0a:	681b      	ldr	r3, [r3, #0]
 8007f0c:	f1a3 0220 	sub.w	r2, r3, #32
                    current_timer -> tx_timer_internal_remaining_ticks =
 8007f10:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8007f12:	601a      	str	r2, [r3, #0]

                    /* Set the timeout function to NULL in order to bypass the
                       expiration.  */
                    timeout_function =  TX_NULL;
 8007f14:	2300      	movs	r3, #0
 8007f16:	65bb      	str	r3, [r7, #88]	; 0x58

                    /* Make the timer appear that it is still active while interrupts
                       are enabled.  This will permit proper processing of a timer
                       deactivate from an ISR.  */
                    current_timer -> tx_timer_internal_list_head =    &reactivate_timer;
 8007f18:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8007f1a:	f107 0208 	add.w	r2, r7, #8
 8007f1e:	619a      	str	r2, [r3, #24]
                    current_timer -> tx_timer_internal_active_next =  current_timer;
 8007f20:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8007f22:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 8007f24:	611a      	str	r2, [r3, #16]

                    /* Setup the temporary timer list head pointer.  */
                    reactivate_timer =  current_timer;
 8007f26:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8007f28:	60bb      	str	r3, [r7, #8]
 8007f2a:	e01a      	b.n	8007f62 <_tx_timer_thread_entry+0x122>
                    }
#endif

                    /* Copy the calling function and ID into local variables before interrupts
                       are re-enabled.  */
                    timeout_function =  current_timer -> tx_timer_internal_timeout_function;
 8007f2c:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8007f2e:	689b      	ldr	r3, [r3, #8]
 8007f30:	65bb      	str	r3, [r7, #88]	; 0x58
                    timeout_param =     current_timer -> tx_timer_internal_timeout_param;
 8007f32:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8007f34:	68db      	ldr	r3, [r3, #12]
 8007f36:	657b      	str	r3, [r7, #84]	; 0x54

                    /* Copy the reinitialize ticks into the remaining ticks.  */
                    current_timer -> tx_timer_internal_remaining_ticks =  current_timer -> tx_timer_internal_re_initialize_ticks;
 8007f38:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8007f3a:	685a      	ldr	r2, [r3, #4]
 8007f3c:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8007f3e:	601a      	str	r2, [r3, #0]

                    /* Determine if the timer should be reactivated.  */
                    if (current_timer -> tx_timer_internal_remaining_ticks != ((ULONG) 0))
 8007f40:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8007f42:	681b      	ldr	r3, [r3, #0]
 8007f44:	2b00      	cmp	r3, #0
 8007f46:	d009      	beq.n	8007f5c <_tx_timer_thread_entry+0x11c>

                        /* Make the timer appear that it is still active while processing
                           the expiration routine and with interrupts enabled.  This will
                           permit proper processing of a timer deactivate from both the
                           expiration routine and an ISR.  */
                        current_timer -> tx_timer_internal_list_head =    &reactivate_timer;
 8007f48:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8007f4a:	f107 0208 	add.w	r2, r7, #8
 8007f4e:	619a      	str	r2, [r3, #24]
                        current_timer -> tx_timer_internal_active_next =  current_timer;
 8007f50:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8007f52:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 8007f54:	611a      	str	r2, [r3, #16]

                        /* Setup the temporary timer list head pointer.  */
                        reactivate_timer =  current_timer;
 8007f56:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8007f58:	60bb      	str	r3, [r7, #8]
 8007f5a:	e002      	b.n	8007f62 <_tx_timer_thread_entry+0x122>
                    else
                    {

                        /* Set the list pointer of this timer to NULL.  This is used to indicate
                           the timer is no longer active.  */
                        current_timer -> tx_timer_internal_list_head =  TX_NULL;
 8007f5c:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8007f5e:	2200      	movs	r2, #0
 8007f60:	619a      	str	r2, [r3, #24]
                    }
                }

                /* Set pointer to indicate the expired timer that is currently being processed.  */
                _tx_timer_expired_timer_ptr =  current_timer;
 8007f62:	4a33      	ldr	r2, [pc, #204]	; (8008030 <_tx_timer_thread_entry+0x1f0>)
 8007f64:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8007f66:	6013      	str	r3, [r2, #0]
 8007f68:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8007f6a:	62fb      	str	r3, [r7, #44]	; 0x2c
    __asm__ volatile ("MSR  PRIMASK,%0": : "r" (int_posture): "memory");
 8007f6c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007f6e:	f383 8810 	msr	PRIMASK, r3
}
 8007f72:	bf00      	nop

                /* Restore interrupts for timer expiration call.  */
                TX_RESTORE

                /* Call the timer-expiration function, if non-NULL.  */
                if (timeout_function != TX_NULL)
 8007f74:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8007f76:	2b00      	cmp	r3, #0
 8007f78:	d002      	beq.n	8007f80 <_tx_timer_thread_entry+0x140>
                {

                    (timeout_function) (timeout_param);
 8007f7a:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8007f7c:	6d78      	ldr	r0, [r7, #84]	; 0x54
 8007f7e:	4798      	blx	r3
    __asm__ volatile ("MRS  %0, PRIMASK ": "=r" (posture));
 8007f80:	f3ef 8310 	mrs	r3, PRIMASK
 8007f84:	62bb      	str	r3, [r7, #40]	; 0x28
    return(posture);
 8007f86:	6abb      	ldr	r3, [r7, #40]	; 0x28
    int_posture = __get_interrupt_posture();
 8007f88:	627b      	str	r3, [r7, #36]	; 0x24
    __asm__ volatile ("CPSID i" : : : "memory");
 8007f8a:	b672      	cpsid	i
    return(int_posture);
 8007f8c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
                }

                /* Lockout interrupts again.  */
                TX_DISABLE
 8007f8e:	65fb      	str	r3, [r7, #92]	; 0x5c

                /* Clear expired timer pointer.  */
                _tx_timer_expired_timer_ptr =  TX_NULL;
 8007f90:	4b27      	ldr	r3, [pc, #156]	; (8008030 <_tx_timer_thread_entry+0x1f0>)
 8007f92:	2200      	movs	r2, #0
 8007f94:	601a      	str	r2, [r3, #0]

                /* Determine if the timer needs to be reactivated.  */
                if (reactivate_timer == current_timer)
 8007f96:	68bb      	ldr	r3, [r7, #8]
 8007f98:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 8007f9a:	429a      	cmp	r2, r3
 8007f9c:	d105      	bne.n	8007faa <_tx_timer_thread_entry+0x16a>
#else

                    /* Reactivate through the timer activate function.  */

                    /* Clear the list head for the timer activate call.  */
                    current_timer -> tx_timer_internal_list_head = TX_NULL;
 8007f9e:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8007fa0:	2200      	movs	r2, #0
 8007fa2:	619a      	str	r2, [r3, #24]

                    /* Activate the current timer.  */
                    _tx_timer_system_activate(current_timer);
 8007fa4:	6cf8      	ldr	r0, [r7, #76]	; 0x4c
 8007fa6:	f7ff feb1 	bl	8007d0c <_tx_timer_system_activate>
 8007faa:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8007fac:	61bb      	str	r3, [r7, #24]
    __asm__ volatile ("MSR  PRIMASK,%0": : "r" (int_posture): "memory");
 8007fae:	69bb      	ldr	r3, [r7, #24]
 8007fb0:	f383 8810 	msr	PRIMASK, r3
}
 8007fb4:	bf00      	nop
    __asm__ volatile ("MRS  %0, PRIMASK ": "=r" (posture));
 8007fb6:	f3ef 8310 	mrs	r3, PRIMASK
 8007fba:	623b      	str	r3, [r7, #32]
    return(posture);
 8007fbc:	6a3b      	ldr	r3, [r7, #32]
    int_posture = __get_interrupt_posture();
 8007fbe:	61fb      	str	r3, [r7, #28]
    __asm__ volatile ("CPSID i" : : : "memory");
 8007fc0:	b672      	cpsid	i
    return(int_posture);
 8007fc2:	69fb      	ldr	r3, [r7, #28]

                /* Restore interrupts.  */
                TX_RESTORE

                /* Lockout interrupts again.  */
                TX_DISABLE
 8007fc4:	65fb      	str	r3, [r7, #92]	; 0x5c
            while (expired_timers != TX_NULL)
 8007fc6:	68fb      	ldr	r3, [r7, #12]
 8007fc8:	2b00      	cmp	r3, #0
 8007fca:	f47f af7c 	bne.w	8007ec6 <_tx_timer_thread_entry+0x86>

            /* Finally, suspend this thread and wait for the next expiration.  */

            /* Determine if another expiration took place while we were in this
               thread.  If so, process another expiration.  */
            if (_tx_timer_expired == TX_FALSE)
 8007fce:	4b17      	ldr	r3, [pc, #92]	; (800802c <_tx_timer_thread_entry+0x1ec>)
 8007fd0:	681b      	ldr	r3, [r3, #0]
 8007fd2:	2b00      	cmp	r3, #0
 8007fd4:	d116      	bne.n	8008004 <_tx_timer_thread_entry+0x1c4>
            {

                /* Otherwise, no timer expiration, so suspend the thread.  */

                /* Build pointer to the timer thread.  */
                thread_ptr =  &_tx_timer_thread;
 8007fd6:	4b17      	ldr	r3, [pc, #92]	; (8008034 <_tx_timer_thread_entry+0x1f4>)
 8007fd8:	653b      	str	r3, [r7, #80]	; 0x50

                /* Set the status to suspending, in order to indicate the
                   suspension is in progress.  */
                thread_ptr -> tx_thread_state =  TX_SUSPENDED;
 8007fda:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8007fdc:	2203      	movs	r2, #3
 8007fde:	631a      	str	r2, [r3, #48]	; 0x30
                /* Restore interrupts.  */
                TX_RESTORE
#else

                /* Set the suspending flag. */
                thread_ptr -> tx_thread_suspending =  TX_TRUE;
 8007fe0:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8007fe2:	2201      	movs	r2, #1
 8007fe4:	639a      	str	r2, [r3, #56]	; 0x38

                /* Increment the preempt disable count prior to suspending.  */
                _tx_thread_preempt_disable++;
 8007fe6:	4b14      	ldr	r3, [pc, #80]	; (8008038 <_tx_timer_thread_entry+0x1f8>)
 8007fe8:	681b      	ldr	r3, [r3, #0]
 8007fea:	3301      	adds	r3, #1
 8007fec:	4a12      	ldr	r2, [pc, #72]	; (8008038 <_tx_timer_thread_entry+0x1f8>)
 8007fee:	6013      	str	r3, [r2, #0]
 8007ff0:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8007ff2:	617b      	str	r3, [r7, #20]
    __asm__ volatile ("MSR  PRIMASK,%0": : "r" (int_posture): "memory");
 8007ff4:	697b      	ldr	r3, [r7, #20]
 8007ff6:	f383 8810 	msr	PRIMASK, r3
}
 8007ffa:	bf00      	nop

                /* Restore interrupts.  */
                TX_RESTORE

                /* Call actual thread suspension routine.  */
                _tx_thread_system_suspend(thread_ptr);
 8007ffc:	6d38      	ldr	r0, [r7, #80]	; 0x50
 8007ffe:	f7ff fc41 	bl	8007884 <_tx_thread_system_suspend>
 8008002:	e728      	b.n	8007e56 <_tx_timer_thread_entry+0x16>
 8008004:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8008006:	613b      	str	r3, [r7, #16]
    __asm__ volatile ("MSR  PRIMASK,%0": : "r" (int_posture): "memory");
 8008008:	693b      	ldr	r3, [r7, #16]
 800800a:	f383 8810 	msr	PRIMASK, r3
}
 800800e:	bf00      	nop
            TX_DISABLE
 8008010:	e721      	b.n	8007e56 <_tx_timer_thread_entry+0x16>

    /* If we ever get here, raise safety critical exception.  */
    TX_SAFETY_CRITICAL_EXCEPTION(__FILE__, __LINE__, 0);
#endif

}
 8008012:	bf00      	nop
 8008014:	3760      	adds	r7, #96	; 0x60
 8008016:	46bd      	mov	sp, r7
 8008018:	bd80      	pop	{r7, pc}
 800801a:	bf00      	nop
 800801c:	4154494d 	.word	0x4154494d
 8008020:	200064e4 	.word	0x200064e4
 8008024:	200064e0 	.word	0x200064e0
 8008028:	200064dc 	.word	0x200064dc
 800802c:	200064e8 	.word	0x200064e8
 8008030:	200064f4 	.word	0x200064f4
 8008034:	200064f8 	.word	0x200064f8
 8008038:	20006448 	.word	0x20006448

0800803c <_txe_byte_pool_create>:
/*  09-30-2020     Yuxin Zhou               Modified comment(s),          */
/*                                            resulting in version 6.1    */
/*                                                                        */
/**************************************************************************/
UINT  _txe_byte_pool_create(TX_BYTE_POOL *pool_ptr, CHAR *name_ptr, VOID *pool_start, ULONG pool_size, UINT pool_control_block_size)
{
 800803c:	b580      	push	{r7, lr}
 800803e:	b092      	sub	sp, #72	; 0x48
 8008040:	af00      	add	r7, sp, #0
 8008042:	60f8      	str	r0, [r7, #12]
 8008044:	60b9      	str	r1, [r7, #8]
 8008046:	607a      	str	r2, [r7, #4]
 8008048:	603b      	str	r3, [r7, #0]
TX_THREAD       *thread_ptr;
#endif


    /* Default status to success.  */
    status =  TX_SUCCESS;
 800804a:	2300      	movs	r3, #0
 800804c:	647b      	str	r3, [r7, #68]	; 0x44

    /* Check for an invalid byte pool pointer.  */
    if (pool_ptr == TX_NULL)
 800804e:	68fb      	ldr	r3, [r7, #12]
 8008050:	2b00      	cmp	r3, #0
 8008052:	d102      	bne.n	800805a <_txe_byte_pool_create+0x1e>
    {

        /* Byte pool pointer is invalid, return appropriate error code.  */
        status =  TX_POOL_ERROR;
 8008054:	2302      	movs	r3, #2
 8008056:	647b      	str	r3, [r7, #68]	; 0x44
 8008058:	e075      	b.n	8008146 <_txe_byte_pool_create+0x10a>
    }

    /* Now see if the pool control block size is valid.  */
    else if (pool_control_block_size != (sizeof(TX_BYTE_POOL)))
 800805a:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800805c:	2b34      	cmp	r3, #52	; 0x34
 800805e:	d002      	beq.n	8008066 <_txe_byte_pool_create+0x2a>
    {

        /* Byte pool pointer is invalid, return appropriate error code.  */
        status =  TX_POOL_ERROR;
 8008060:	2302      	movs	r3, #2
 8008062:	647b      	str	r3, [r7, #68]	; 0x44
 8008064:	e06f      	b.n	8008146 <_txe_byte_pool_create+0x10a>
    __asm__ volatile ("MRS  %0, PRIMASK ": "=r" (posture));
 8008066:	f3ef 8310 	mrs	r3, PRIMASK
 800806a:	62fb      	str	r3, [r7, #44]	; 0x2c
    return(posture);
 800806c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
    int_posture = __get_interrupt_posture();
 800806e:	62bb      	str	r3, [r7, #40]	; 0x28
    __asm__ volatile ("CPSID i" : : : "memory");
 8008070:	b672      	cpsid	i
    return(int_posture);
 8008072:	6abb      	ldr	r3, [r7, #40]	; 0x28
    }
    else
    {

        /* Disable interrupts.  */
        TX_DISABLE
 8008074:	63bb      	str	r3, [r7, #56]	; 0x38

        /* Increment the preempt disable flag.  */
        _tx_thread_preempt_disable++;
 8008076:	4b3b      	ldr	r3, [pc, #236]	; (8008164 <_txe_byte_pool_create+0x128>)
 8008078:	681b      	ldr	r3, [r3, #0]
 800807a:	3301      	adds	r3, #1
 800807c:	4a39      	ldr	r2, [pc, #228]	; (8008164 <_txe_byte_pool_create+0x128>)
 800807e:	6013      	str	r3, [r2, #0]
 8008080:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8008082:	633b      	str	r3, [r7, #48]	; 0x30
    __asm__ volatile ("MSR  PRIMASK,%0": : "r" (int_posture): "memory");
 8008084:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008086:	f383 8810 	msr	PRIMASK, r3
}
 800808a:	bf00      	nop

        /* Restore interrupts.  */
        TX_RESTORE

        /* Next see if it is already in the created list.  */
        next_pool =   _tx_byte_pool_created_ptr;
 800808c:	4b36      	ldr	r3, [pc, #216]	; (8008168 <_txe_byte_pool_create+0x12c>)
 800808e:	681b      	ldr	r3, [r3, #0]
 8008090:	63fb      	str	r3, [r7, #60]	; 0x3c
        for (i = ((ULONG) 0); i < _tx_byte_pool_created_count; i++)
 8008092:	2300      	movs	r3, #0
 8008094:	643b      	str	r3, [r7, #64]	; 0x40
 8008096:	e009      	b.n	80080ac <_txe_byte_pool_create+0x70>
        {

            /* Determine if this byte pool matches the pool in the list.  */
            if (pool_ptr == next_pool)
 8008098:	68fa      	ldr	r2, [r7, #12]
 800809a:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800809c:	429a      	cmp	r2, r3
 800809e:	d00b      	beq.n	80080b8 <_txe_byte_pool_create+0x7c>
            }
            else
            {

                /* Move to the next pool.  */
                next_pool =  next_pool -> tx_byte_pool_created_next;
 80080a0:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80080a2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80080a4:	63fb      	str	r3, [r7, #60]	; 0x3c
        for (i = ((ULONG) 0); i < _tx_byte_pool_created_count; i++)
 80080a6:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80080a8:	3301      	adds	r3, #1
 80080aa:	643b      	str	r3, [r7, #64]	; 0x40
 80080ac:	4b2f      	ldr	r3, [pc, #188]	; (800816c <_txe_byte_pool_create+0x130>)
 80080ae:	681b      	ldr	r3, [r3, #0]
 80080b0:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 80080b2:	429a      	cmp	r2, r3
 80080b4:	d3f0      	bcc.n	8008098 <_txe_byte_pool_create+0x5c>
 80080b6:	e000      	b.n	80080ba <_txe_byte_pool_create+0x7e>
                break;
 80080b8:	bf00      	nop
    __asm__ volatile ("MRS  %0, PRIMASK ": "=r" (posture));
 80080ba:	f3ef 8310 	mrs	r3, PRIMASK
 80080be:	623b      	str	r3, [r7, #32]
    return(posture);
 80080c0:	6a3b      	ldr	r3, [r7, #32]
    int_posture = __get_interrupt_posture();
 80080c2:	61fb      	str	r3, [r7, #28]
    __asm__ volatile ("CPSID i" : : : "memory");
 80080c4:	b672      	cpsid	i
    return(int_posture);
 80080c6:	69fb      	ldr	r3, [r7, #28]
            }
        }

        /* Disable interrupts.  */
        TX_DISABLE
 80080c8:	63bb      	str	r3, [r7, #56]	; 0x38

        /* Decrement the preempt disable flag.  */
        _tx_thread_preempt_disable--;
 80080ca:	4b26      	ldr	r3, [pc, #152]	; (8008164 <_txe_byte_pool_create+0x128>)
 80080cc:	681b      	ldr	r3, [r3, #0]
 80080ce:	3b01      	subs	r3, #1
 80080d0:	4a24      	ldr	r2, [pc, #144]	; (8008164 <_txe_byte_pool_create+0x128>)
 80080d2:	6013      	str	r3, [r2, #0]
 80080d4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80080d6:	627b      	str	r3, [r7, #36]	; 0x24
    __asm__ volatile ("MSR  PRIMASK,%0": : "r" (int_posture): "memory");
 80080d8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80080da:	f383 8810 	msr	PRIMASK, r3
}
 80080de:	bf00      	nop

        /* Restore interrupts.  */
        TX_RESTORE

        /* Check for preemption.  */
        _tx_thread_system_preempt_check();
 80080e0:	f7ff fa96 	bl	8007610 <_tx_thread_system_preempt_check>

        /* At this point, check to see if there is a duplicate pool.  */
        if (pool_ptr == next_pool)
 80080e4:	68fa      	ldr	r2, [r7, #12]
 80080e6:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80080e8:	429a      	cmp	r2, r3
 80080ea:	d102      	bne.n	80080f2 <_txe_byte_pool_create+0xb6>
        {

            /* Pool is already created, return appropriate error code.  */
            status =  TX_POOL_ERROR;
 80080ec:	2302      	movs	r3, #2
 80080ee:	647b      	str	r3, [r7, #68]	; 0x44
 80080f0:	e029      	b.n	8008146 <_txe_byte_pool_create+0x10a>
        }

        /* Check for an invalid starting address.  */
        else if (pool_start == TX_NULL)
 80080f2:	687b      	ldr	r3, [r7, #4]
 80080f4:	2b00      	cmp	r3, #0
 80080f6:	d102      	bne.n	80080fe <_txe_byte_pool_create+0xc2>
        {

            /* Null starting address pointer, return appropriate error.  */
            status =  TX_PTR_ERROR;
 80080f8:	2303      	movs	r3, #3
 80080fa:	647b      	str	r3, [r7, #68]	; 0x44
 80080fc:	e023      	b.n	8008146 <_txe_byte_pool_create+0x10a>
        }

        /* Check for invalid pool size.  */
        else if (pool_size < TX_BYTE_POOL_MIN)
 80080fe:	683b      	ldr	r3, [r7, #0]
 8008100:	2b63      	cmp	r3, #99	; 0x63
 8008102:	d802      	bhi.n	800810a <_txe_byte_pool_create+0xce>
        {

            /* Pool not big enough, return appropriate error.  */
            status =  TX_SIZE_ERROR;
 8008104:	2305      	movs	r3, #5
 8008106:	647b      	str	r3, [r7, #68]	; 0x44
 8008108:	e01d      	b.n	8008146 <_txe_byte_pool_create+0x10a>
        {

#ifndef TX_TIMER_PROCESS_IN_ISR

            /* Pickup thread pointer.  */
            TX_THREAD_GET_CURRENT(thread_ptr)
 800810a:	4b19      	ldr	r3, [pc, #100]	; (8008170 <_txe_byte_pool_create+0x134>)
 800810c:	681b      	ldr	r3, [r3, #0]
 800810e:	637b      	str	r3, [r7, #52]	; 0x34

            /* Check for invalid caller of this function.  First check for a calling thread.  */
            if (thread_ptr == &_tx_timer_thread)
 8008110:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8008112:	4a18      	ldr	r2, [pc, #96]	; (8008174 <_txe_byte_pool_create+0x138>)
 8008114:	4293      	cmp	r3, r2
 8008116:	d101      	bne.n	800811c <_txe_byte_pool_create+0xe0>
            {

                /* Invalid caller of this function, return appropriate error code.  */
                status =  TX_CALLER_ERROR;
 8008118:	2313      	movs	r3, #19
 800811a:	647b      	str	r3, [r7, #68]	; 0x44
    __asm__ volatile (" MRS  %0,IPSR ": "=r" (ipsr_value) );
 800811c:	f3ef 8305 	mrs	r3, IPSR
 8008120:	61bb      	str	r3, [r7, #24]
    return(ipsr_value);
 8008122:	69ba      	ldr	r2, [r7, #24]
            }
#endif

            /* Check for interrupt call.  */
            if (TX_THREAD_GET_SYSTEM_STATE() != ((ULONG) 0))
 8008124:	4b14      	ldr	r3, [pc, #80]	; (8008178 <_txe_byte_pool_create+0x13c>)
 8008126:	681b      	ldr	r3, [r3, #0]
 8008128:	4313      	orrs	r3, r2
 800812a:	2b00      	cmp	r3, #0
 800812c:	d00b      	beq.n	8008146 <_txe_byte_pool_create+0x10a>
    __asm__ volatile (" MRS  %0,IPSR ": "=r" (ipsr_value) );
 800812e:	f3ef 8305 	mrs	r3, IPSR
 8008132:	617b      	str	r3, [r7, #20]
    return(ipsr_value);
 8008134:	697a      	ldr	r2, [r7, #20]
            {

                /* Now, make sure the call is from an interrupt and not initialization.  */
                if (TX_THREAD_GET_SYSTEM_STATE() < TX_INITIALIZE_IN_PROGRESS)
 8008136:	4b10      	ldr	r3, [pc, #64]	; (8008178 <_txe_byte_pool_create+0x13c>)
 8008138:	681b      	ldr	r3, [r3, #0]
 800813a:	4313      	orrs	r3, r2
 800813c:	f1b3 3ff0 	cmp.w	r3, #4042322160	; 0xf0f0f0f0
 8008140:	d201      	bcs.n	8008146 <_txe_byte_pool_create+0x10a>
                {

                    /* Invalid caller of this function, return appropriate error code.  */
                    status =  TX_CALLER_ERROR;
 8008142:	2313      	movs	r3, #19
 8008144:	647b      	str	r3, [r7, #68]	; 0x44
            }
        }
    }

    /* Determine if everything is okay.  */
    if (status == TX_SUCCESS)
 8008146:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8008148:	2b00      	cmp	r3, #0
 800814a:	d106      	bne.n	800815a <_txe_byte_pool_create+0x11e>
    {

        /* Call actual byte pool create function.  */
        status =  _tx_byte_pool_create(pool_ptr, name_ptr, pool_start, pool_size);
 800814c:	683b      	ldr	r3, [r7, #0]
 800814e:	687a      	ldr	r2, [r7, #4]
 8008150:	68b9      	ldr	r1, [r7, #8]
 8008152:	68f8      	ldr	r0, [r7, #12]
 8008154:	f7fe fe94 	bl	8006e80 <_tx_byte_pool_create>
 8008158:	6478      	str	r0, [r7, #68]	; 0x44
    }

    /* Return completion status.  */
    return(status);
 800815a:	6c7b      	ldr	r3, [r7, #68]	; 0x44
}
 800815c:	4618      	mov	r0, r3
 800815e:	3748      	adds	r7, #72	; 0x48
 8008160:	46bd      	mov	sp, r7
 8008162:	bd80      	pop	{r7, pc}
 8008164:	20006448 	.word	0x20006448
 8008168:	200063a0 	.word	0x200063a0
 800816c:	200063a4 	.word	0x200063a4
 8008170:	200063b0 	.word	0x200063b0
 8008174:	200064f8 	.word	0x200064f8
 8008178:	2000000c 	.word	0x2000000c

0800817c <tx_low_power_enter>:
/*                                            compiler warning,           */
/*                                            resulting in version 6.1.6  */
/*                                                                        */
/**************************************************************************/
VOID  tx_low_power_enter(VOID)
{
 800817c:	b580      	push	{r7, lr}
 800817e:	b084      	sub	sp, #16
 8008180:	af00      	add	r7, sp, #0
    __asm__ volatile ("MRS  %0, PRIMASK ": "=r" (posture));
 8008182:	f3ef 8310 	mrs	r3, PRIMASK
 8008186:	607b      	str	r3, [r7, #4]
    return(posture);
 8008188:	687b      	ldr	r3, [r7, #4]
    int_posture = __get_interrupt_posture();
 800818a:	603b      	str	r3, [r7, #0]
    __asm__ volatile ("CPSID i" : : : "memory");
 800818c:	b672      	cpsid	i
    return(int_posture);
 800818e:	683b      	ldr	r3, [r7, #0]
ULONG   tx_low_power_next_expiration;   /* The next timer experation (units of ThreadX timer ticks). */
ULONG   timers_active;
#endif

    /* Disable interrupts while we prepare for low power mode.  */
    TX_DISABLE
 8008190:	60fb      	str	r3, [r7, #12]


    /* Set the flag indicating that low power has been entered. This 
       flag is checked in tx_low_power_exit to determine if the logic
       used to adjust the ThreadX time is required.  */
    tx_low_power_entered =  TX_TRUE;
 8008192:	4b07      	ldr	r3, [pc, #28]	; (80081b0 <tx_low_power_enter+0x34>)
 8008194:	2201      	movs	r2, #1
 8008196:	601a      	str	r2, [r3, #0]
 8008198:	68fb      	ldr	r3, [r7, #12]
 800819a:	60bb      	str	r3, [r7, #8]
    __asm__ volatile ("MSR  PRIMASK,%0": : "r" (int_posture): "memory");
 800819c:	68bb      	ldr	r3, [r7, #8]
 800819e:	f383 8810 	msr	PRIMASK, r3
}
 80081a2:	bf00      	nop

    /* User code to enter low power mode. This allows the application to power down
       peripherals and put the processor in sleep mode.
    */
#ifdef TX_LOW_POWER_USER_ENTER
    TX_LOW_POWER_USER_ENTER;
 80081a4:	f7f8 fb53 	bl	800084e <App_ThreadX_LowPower_Enter>
#endif

    /* If the low power code returns, this routine returns to the tx_thread_schedule loop.  */
}
 80081a8:	bf00      	nop
 80081aa:	3710      	adds	r7, #16
 80081ac:	46bd      	mov	sp, r7
 80081ae:	bd80      	pop	{r7, pc}
 80081b0:	200069b8 	.word	0x200069b8

080081b4 <tx_low_power_exit>:
/*                                                                        */
/*  03-02-2021     William E. Lamie         Initial Version 6.1.5         */
/*                                                                        */
/**************************************************************************/
VOID  tx_low_power_exit(VOID)
{
 80081b4:	b580      	push	{r7, lr}
 80081b6:	b082      	sub	sp, #8
 80081b8:	af00      	add	r7, sp, #0
/* How many ticks to adjust ThreadX timers after exiting low power mode. */
ULONG   tx_low_power_adjust_ticks;


    /* Determine if the interrupt occurred in low power mode.  */
    if (tx_low_power_entered)
 80081ba:	4b0a      	ldr	r3, [pc, #40]	; (80081e4 <tx_low_power_exit+0x30>)
 80081bc:	681b      	ldr	r3, [r3, #0]
 80081be:	2b00      	cmp	r3, #0
 80081c0:	d00c      	beq.n	80081dc <tx_low_power_exit+0x28>
    {
        /* Yes, low power mode was interrupted.   */

        /* Clear the low power entered flag.  */
        tx_low_power_entered =  TX_FALSE;
 80081c2:	4b08      	ldr	r3, [pc, #32]	; (80081e4 <tx_low_power_exit+0x30>)
 80081c4:	2200      	movs	r2, #0
 80081c6:	601a      	str	r2, [r3, #0]

        /* User code to exit low power mode and reprogram the
           timer to the desired interrupt frequency.  */
#ifdef TX_LOW_POWER_USER_EXIT
        TX_LOW_POWER_USER_EXIT;
 80081c8:	f7f8 fb48 	bl	800085c <App_ThreadX_LowPower_Exit>
#ifdef TX_LOW_POWER_USER_TIMER_ADJUST
        /* Call the user's low-power timer code to obtain the amount of time (in ticks)
           the system has been in low power mode. */
        tx_low_power_adjust_ticks = TX_LOW_POWER_USER_TIMER_ADJUST;
#else
        tx_low_power_adjust_ticks = (ULONG) 0;
 80081cc:	2300      	movs	r3, #0
 80081ce:	607b      	str	r3, [r7, #4]
#endif

        /* Determine if the ThreadX timer(s) needs incrementing.  */
        if (tx_low_power_adjust_ticks)
 80081d0:	687b      	ldr	r3, [r7, #4]
 80081d2:	2b00      	cmp	r3, #0
 80081d4:	d002      	beq.n	80081dc <tx_low_power_exit+0x28>
        {
            /* Yes, the ThreadX timer(s) must be incremented.  */
            tx_time_increment(tx_low_power_adjust_ticks);
 80081d6:	6878      	ldr	r0, [r7, #4]
 80081d8:	f000 f806 	bl	80081e8 <tx_time_increment>
        }
    }
}
 80081dc:	bf00      	nop
 80081de:	3708      	adds	r7, #8
 80081e0:	46bd      	mov	sp, r7
 80081e2:	bd80      	pop	{r7, pc}
 80081e4:	200069b8 	.word	0x200069b8

080081e8 <tx_time_increment>:
/*                                                                        */
/*  03-02-2021     William E. Lamie         Initial Version 6.1.5         */
/*                                                                        */
/**************************************************************************/
VOID  tx_time_increment(ULONG time_increment)
{
 80081e8:	b580      	push	{r7, lr}
 80081ea:	b08a      	sub	sp, #40	; 0x28
 80081ec:	af00      	add	r7, sp, #0
 80081ee:	6078      	str	r0, [r7, #4]
TX_TIMER_INTERNAL           *next_timer;
TX_TIMER_INTERNAL           *temp_list_head;


    /* Determine if there is any time increment.  */
    if (time_increment == 0)
 80081f0:	687b      	ldr	r3, [r7, #4]
 80081f2:	2b00      	cmp	r3, #0
 80081f4:	f000 809b 	beq.w	800832e <tx_time_increment+0x146>
    __asm__ volatile ("MRS  %0, PRIMASK ": "=r" (posture));
 80081f8:	f3ef 8310 	mrs	r3, PRIMASK
 80081fc:	613b      	str	r3, [r7, #16]
    return(posture);
 80081fe:	693b      	ldr	r3, [r7, #16]
    int_posture = __get_interrupt_posture();
 8008200:	60fb      	str	r3, [r7, #12]
    __asm__ volatile ("CPSID i" : : : "memory");
 8008202:	b672      	cpsid	i
    return(int_posture);
 8008204:	68fb      	ldr	r3, [r7, #12]
        /* Nothing to do, just return.  */
        return;
    }

    /* Disable interrupts.  */
    TX_DISABLE
 8008206:	617b      	str	r3, [r7, #20]

    /* Adjust the system clock.  */
    _tx_timer_system_clock =  _tx_timer_system_clock + time_increment;
 8008208:	4b4b      	ldr	r3, [pc, #300]	; (8008338 <tx_time_increment+0x150>)
 800820a:	681a      	ldr	r2, [r3, #0]
 800820c:	687b      	ldr	r3, [r7, #4]
 800820e:	4413      	add	r3, r2
 8008210:	4a49      	ldr	r2, [pc, #292]	; (8008338 <tx_time_increment+0x150>)
 8008212:	6013      	str	r3, [r2, #0]

    /* Adjust the time slice variable.  */
    if (_tx_timer_time_slice)
 8008214:	4b49      	ldr	r3, [pc, #292]	; (800833c <tx_time_increment+0x154>)
 8008216:	681b      	ldr	r3, [r3, #0]
 8008218:	2b00      	cmp	r3, #0
 800821a:	d00e      	beq.n	800823a <tx_time_increment+0x52>
    {
        /* Decrement the time-slice variable.  */
        if (_tx_timer_time_slice > time_increment)
 800821c:	4b47      	ldr	r3, [pc, #284]	; (800833c <tx_time_increment+0x154>)
 800821e:	681b      	ldr	r3, [r3, #0]
 8008220:	687a      	ldr	r2, [r7, #4]
 8008222:	429a      	cmp	r2, r3
 8008224:	d206      	bcs.n	8008234 <tx_time_increment+0x4c>
        {
            _tx_timer_time_slice =  _tx_timer_time_slice - time_increment;
 8008226:	4b45      	ldr	r3, [pc, #276]	; (800833c <tx_time_increment+0x154>)
 8008228:	681a      	ldr	r2, [r3, #0]
 800822a:	687b      	ldr	r3, [r7, #4]
 800822c:	1ad3      	subs	r3, r2, r3
 800822e:	4a43      	ldr	r2, [pc, #268]	; (800833c <tx_time_increment+0x154>)
 8008230:	6013      	str	r3, [r2, #0]
 8008232:	e002      	b.n	800823a <tx_time_increment+0x52>
        }
        else
        {
            _tx_timer_time_slice =  1;
 8008234:	4b41      	ldr	r3, [pc, #260]	; (800833c <tx_time_increment+0x154>)
 8008236:	2201      	movs	r2, #1
 8008238:	601a      	str	r2, [r3, #0]
        }
    }

    /* Calculate the proper place to position the timer.  */
    timer_list_head =  _tx_timer_current_ptr;
 800823a:	4b41      	ldr	r3, [pc, #260]	; (8008340 <tx_time_increment+0x158>)
 800823c:	681b      	ldr	r3, [r3, #0]
 800823e:	623b      	str	r3, [r7, #32]

    /* Setup the temporary list pointer.  */
    temp_list_head =  TX_NULL;
 8008240:	2300      	movs	r3, #0
 8008242:	61bb      	str	r3, [r7, #24]

    /* Loop to pull all timers off the timer structure and put on the temporary list head.  */
    for (i = 0; i < TX_TIMER_ENTRIES; i++)
 8008244:	2300      	movs	r3, #0
 8008246:	627b      	str	r3, [r7, #36]	; 0x24
 8008248:	e046      	b.n	80082d8 <tx_time_increment+0xf0>
    {
        /* Determine if there is a timer list in this entry.  */
        if (*timer_list_head)
 800824a:	6a3b      	ldr	r3, [r7, #32]
 800824c:	681b      	ldr	r3, [r3, #0]
 800824e:	2b00      	cmp	r3, #0
 8008250:	d034      	beq.n	80082bc <tx_time_increment+0xd4>
        {
            /* Walk the list and update all the relative times to actual times.  */

            /* Setup the pointer to the expiration list.  */
            next_timer =  *timer_list_head;
 8008252:	6a3b      	ldr	r3, [r7, #32]
 8008254:	681b      	ldr	r3, [r3, #0]
 8008256:	61fb      	str	r3, [r7, #28]

            /* Loop through the timers active for this relative time slot (determined by i).  */
            do
            {
                /* Determine if the remaining time is larger than the list.  */
                if (next_timer -> tx_timer_internal_remaining_ticks > TX_TIMER_ENTRIES)
 8008258:	69fb      	ldr	r3, [r7, #28]
 800825a:	681b      	ldr	r3, [r3, #0]
 800825c:	2b20      	cmp	r3, #32
 800825e:	d908      	bls.n	8008272 <tx_time_increment+0x8a>
                {
                    /* Calculate the actual expiration time.  */
                    next_timer -> tx_timer_internal_remaining_ticks =
                                    next_timer -> tx_timer_internal_remaining_ticks - (TX_TIMER_ENTRIES - i) + 1;
 8008260:	69fb      	ldr	r3, [r7, #28]
 8008262:	681a      	ldr	r2, [r3, #0]
 8008264:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008266:	4413      	add	r3, r2
 8008268:	f1a3 021f 	sub.w	r2, r3, #31
                    next_timer -> tx_timer_internal_remaining_ticks =
 800826c:	69fb      	ldr	r3, [r7, #28]
 800826e:	601a      	str	r2, [r3, #0]
 8008270:	e003      	b.n	800827a <tx_time_increment+0x92>
                }
                else
                {
                    /* Calculate the expiration time, which is simply the number of entries in this case.  */
                    next_timer -> tx_timer_internal_remaining_ticks =  i + 1;
 8008272:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008274:	1c5a      	adds	r2, r3, #1
 8008276:	69fb      	ldr	r3, [r7, #28]
 8008278:	601a      	str	r2, [r3, #0]
                }

                /* Move to the next entry in the timer list.  */
                next_timer =  next_timer -> tx_timer_internal_active_next;
 800827a:	69fb      	ldr	r3, [r7, #28]
 800827c:	691b      	ldr	r3, [r3, #16]
 800827e:	61fb      	str	r3, [r7, #28]

            } while (next_timer != *timer_list_head);
 8008280:	6a3b      	ldr	r3, [r7, #32]
 8008282:	681b      	ldr	r3, [r3, #0]
 8008284:	69fa      	ldr	r2, [r7, #28]
 8008286:	429a      	cmp	r2, r3
 8008288:	d1e6      	bne.n	8008258 <tx_time_increment+0x70>

            /* NULL terminate the current timer list.  */
            ((*timer_list_head) -> tx_timer_internal_active_previous) -> tx_timer_internal_active_next =  TX_NULL;
 800828a:	6a3b      	ldr	r3, [r7, #32]
 800828c:	681b      	ldr	r3, [r3, #0]
 800828e:	695b      	ldr	r3, [r3, #20]
 8008290:	2200      	movs	r2, #0
 8008292:	611a      	str	r2, [r3, #16]

            /* Yes, determine if the temporary list is NULL.  */
            if (temp_list_head == TX_NULL)
 8008294:	69bb      	ldr	r3, [r7, #24]
 8008296:	2b00      	cmp	r3, #0
 8008298:	d103      	bne.n	80082a2 <tx_time_increment+0xba>
            {
                /* First item on the list.  Move the entire linked list.  */
                temp_list_head =  *timer_list_head;
 800829a:	6a3b      	ldr	r3, [r7, #32]
 800829c:	681b      	ldr	r3, [r3, #0]
 800829e:	61bb      	str	r3, [r7, #24]
 80082a0:	e009      	b.n	80082b6 <tx_time_increment+0xce>
            }
            else
            {
                /* No, the temp list already has timers on it. Link the next timer list to the end.  */
                (temp_list_head -> tx_timer_internal_active_previous) -> tx_timer_internal_active_next =  *timer_list_head;
 80082a2:	69bb      	ldr	r3, [r7, #24]
 80082a4:	695b      	ldr	r3, [r3, #20]
 80082a6:	6a3a      	ldr	r2, [r7, #32]
 80082a8:	6812      	ldr	r2, [r2, #0]
 80082aa:	611a      	str	r2, [r3, #16]

                /* Now update the previous to the new list's previous timer pointer.  */
                temp_list_head -> tx_timer_internal_active_previous =  (*timer_list_head) -> tx_timer_internal_active_previous;
 80082ac:	6a3b      	ldr	r3, [r7, #32]
 80082ae:	681b      	ldr	r3, [r3, #0]
 80082b0:	695a      	ldr	r2, [r3, #20]
 80082b2:	69bb      	ldr	r3, [r7, #24]
 80082b4:	615a      	str	r2, [r3, #20]
            }

            /* Now clear the current timer head pointer.  */
            *timer_list_head =  TX_NULL;
 80082b6:	6a3b      	ldr	r3, [r7, #32]
 80082b8:	2200      	movs	r2, #0
 80082ba:	601a      	str	r2, [r3, #0]
        }
        
        /* Move to next timer entry.  */
        timer_list_head++;
 80082bc:	6a3b      	ldr	r3, [r7, #32]
 80082be:	3304      	adds	r3, #4
 80082c0:	623b      	str	r3, [r7, #32]

        /* Determine if a wrap around condition has occurred.  */
        if (timer_list_head >= _tx_timer_list_end)
 80082c2:	4b20      	ldr	r3, [pc, #128]	; (8008344 <tx_time_increment+0x15c>)
 80082c4:	681b      	ldr	r3, [r3, #0]
 80082c6:	6a3a      	ldr	r2, [r7, #32]
 80082c8:	429a      	cmp	r2, r3
 80082ca:	d302      	bcc.n	80082d2 <tx_time_increment+0xea>
        {
            /* Wrap from the beginning of the list.  */
            timer_list_head =  _tx_timer_list_start;
 80082cc:	4b1e      	ldr	r3, [pc, #120]	; (8008348 <tx_time_increment+0x160>)
 80082ce:	681b      	ldr	r3, [r3, #0]
 80082d0:	623b      	str	r3, [r7, #32]
    for (i = 0; i < TX_TIMER_ENTRIES; i++)
 80082d2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80082d4:	3301      	adds	r3, #1
 80082d6:	627b      	str	r3, [r7, #36]	; 0x24
 80082d8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80082da:	2b1f      	cmp	r3, #31
 80082dc:	d9b5      	bls.n	800824a <tx_time_increment+0x62>
        }
    }

    /* Set the current timer pointer to the beginning of the list.  */
    _tx_timer_current_ptr =  _tx_timer_list_start;
 80082de:	4b1a      	ldr	r3, [pc, #104]	; (8008348 <tx_time_increment+0x160>)
 80082e0:	681b      	ldr	r3, [r3, #0]
 80082e2:	4a17      	ldr	r2, [pc, #92]	; (8008340 <tx_time_increment+0x158>)
 80082e4:	6013      	str	r3, [r2, #0]

    /* Loop to update and reinsert all the timers in the list.  */
    while (temp_list_head)
 80082e6:	e019      	b.n	800831c <tx_time_increment+0x134>
    {
        /* Pickup the next timer to update and reinsert.  */
        next_timer =  temp_list_head;
 80082e8:	69bb      	ldr	r3, [r7, #24]
 80082ea:	61fb      	str	r3, [r7, #28]

        /* Move the temp list head pointer to the next pointer.  */
        temp_list_head =  next_timer -> tx_timer_internal_active_next;
 80082ec:	69fb      	ldr	r3, [r7, #28]
 80082ee:	691b      	ldr	r3, [r3, #16]
 80082f0:	61bb      	str	r3, [r7, #24]

        /* Determine if the remaining time is greater than the time increment
           value - this is the normal case.  */
        if (next_timer -> tx_timer_internal_remaining_ticks > time_increment)
 80082f2:	69fb      	ldr	r3, [r7, #28]
 80082f4:	681b      	ldr	r3, [r3, #0]
 80082f6:	687a      	ldr	r2, [r7, #4]
 80082f8:	429a      	cmp	r2, r3
 80082fa:	d206      	bcs.n	800830a <tx_time_increment+0x122>
        {
            /* Decrement the elapsed time.  */
            next_timer -> tx_timer_internal_remaining_ticks =  next_timer -> tx_timer_internal_remaining_ticks - time_increment;
 80082fc:	69fb      	ldr	r3, [r7, #28]
 80082fe:	681a      	ldr	r2, [r3, #0]
 8008300:	687b      	ldr	r3, [r7, #4]
 8008302:	1ad2      	subs	r2, r2, r3
 8008304:	69fb      	ldr	r3, [r7, #28]
 8008306:	601a      	str	r2, [r3, #0]
 8008308:	e002      	b.n	8008310 <tx_time_increment+0x128>
        }
        else
        {
            /* Simply set the expiration value to expire on the next tick.  */
            next_timer -> tx_timer_internal_remaining_ticks =  1;
 800830a:	69fb      	ldr	r3, [r7, #28]
 800830c:	2201      	movs	r2, #1
 800830e:	601a      	str	r2, [r3, #0]
        }

        /* Now clear the timer list head pointer for the timer activate function to work properly.  */
        next_timer -> tx_timer_internal_list_head =  TX_NULL;
 8008310:	69fb      	ldr	r3, [r7, #28]
 8008312:	2200      	movs	r2, #0
 8008314:	619a      	str	r2, [r3, #24]

        /* Now re-insert the timer into the list.  */
        _tx_timer_system_activate(next_timer);
 8008316:	69f8      	ldr	r0, [r7, #28]
 8008318:	f7ff fcf8 	bl	8007d0c <_tx_timer_system_activate>
    while (temp_list_head)
 800831c:	69bb      	ldr	r3, [r7, #24]
 800831e:	2b00      	cmp	r3, #0
 8008320:	d1e2      	bne.n	80082e8 <tx_time_increment+0x100>
 8008322:	697b      	ldr	r3, [r7, #20]
 8008324:	60bb      	str	r3, [r7, #8]
    __asm__ volatile ("MSR  PRIMASK,%0": : "r" (int_posture): "memory");
 8008326:	68bb      	ldr	r3, [r7, #8]
 8008328:	f383 8810 	msr	PRIMASK, r3
}
 800832c:	e000      	b.n	8008330 <tx_time_increment+0x148>
        return;
 800832e:	bf00      	nop
    }

    /* Restore interrupts.  */
    TX_RESTORE
}
 8008330:	3728      	adds	r7, #40	; 0x28
 8008332:	46bd      	mov	sp, r7
 8008334:	bd80      	pop	{r7, pc}
 8008336:	bf00      	nop
 8008338:	20006454 	.word	0x20006454
 800833c:	200069b4 	.word	0x200069b4
 8008340:	200064e4 	.word	0x200064e4
 8008344:	200064e0 	.word	0x200064e0
 8008348:	200064dc 	.word	0x200064dc

0800834c <__errno>:
 800834c:	4b01      	ldr	r3, [pc, #4]	; (8008354 <__errno+0x8>)
 800834e:	6818      	ldr	r0, [r3, #0]
 8008350:	4770      	bx	lr
 8008352:	bf00      	nop
 8008354:	20000010 	.word	0x20000010

08008358 <__libc_init_array>:
 8008358:	b570      	push	{r4, r5, r6, lr}
 800835a:	4d0d      	ldr	r5, [pc, #52]	; (8008390 <__libc_init_array+0x38>)
 800835c:	4c0d      	ldr	r4, [pc, #52]	; (8008394 <__libc_init_array+0x3c>)
 800835e:	1b64      	subs	r4, r4, r5
 8008360:	10a4      	asrs	r4, r4, #2
 8008362:	2600      	movs	r6, #0
 8008364:	42a6      	cmp	r6, r4
 8008366:	d109      	bne.n	800837c <__libc_init_array+0x24>
 8008368:	4d0b      	ldr	r5, [pc, #44]	; (8008398 <__libc_init_array+0x40>)
 800836a:	4c0c      	ldr	r4, [pc, #48]	; (800839c <__libc_init_array+0x44>)
 800836c:	f000 ffae 	bl	80092cc <_init>
 8008370:	1b64      	subs	r4, r4, r5
 8008372:	10a4      	asrs	r4, r4, #2
 8008374:	2600      	movs	r6, #0
 8008376:	42a6      	cmp	r6, r4
 8008378:	d105      	bne.n	8008386 <__libc_init_array+0x2e>
 800837a:	bd70      	pop	{r4, r5, r6, pc}
 800837c:	f855 3b04 	ldr.w	r3, [r5], #4
 8008380:	4798      	blx	r3
 8008382:	3601      	adds	r6, #1
 8008384:	e7ee      	b.n	8008364 <__libc_init_array+0xc>
 8008386:	f855 3b04 	ldr.w	r3, [r5], #4
 800838a:	4798      	blx	r3
 800838c:	3601      	adds	r6, #1
 800838e:	e7f2      	b.n	8008376 <__libc_init_array+0x1e>
 8008390:	080095c8 	.word	0x080095c8
 8008394:	080095c8 	.word	0x080095c8
 8008398:	080095c8 	.word	0x080095c8
 800839c:	080095cc 	.word	0x080095cc

080083a0 <memset>:
 80083a0:	4402      	add	r2, r0
 80083a2:	4603      	mov	r3, r0
 80083a4:	4293      	cmp	r3, r2
 80083a6:	d100      	bne.n	80083aa <memset+0xa>
 80083a8:	4770      	bx	lr
 80083aa:	f803 1b01 	strb.w	r1, [r3], #1
 80083ae:	e7f9      	b.n	80083a4 <memset+0x4>

080083b0 <iprintf>:
 80083b0:	b40f      	push	{r0, r1, r2, r3}
 80083b2:	4b0a      	ldr	r3, [pc, #40]	; (80083dc <iprintf+0x2c>)
 80083b4:	b513      	push	{r0, r1, r4, lr}
 80083b6:	681c      	ldr	r4, [r3, #0]
 80083b8:	b124      	cbz	r4, 80083c4 <iprintf+0x14>
 80083ba:	69a3      	ldr	r3, [r4, #24]
 80083bc:	b913      	cbnz	r3, 80083c4 <iprintf+0x14>
 80083be:	4620      	mov	r0, r4
 80083c0:	f000 f866 	bl	8008490 <__sinit>
 80083c4:	ab05      	add	r3, sp, #20
 80083c6:	9a04      	ldr	r2, [sp, #16]
 80083c8:	68a1      	ldr	r1, [r4, #8]
 80083ca:	9301      	str	r3, [sp, #4]
 80083cc:	4620      	mov	r0, r4
 80083ce:	f000 f9bd 	bl	800874c <_vfiprintf_r>
 80083d2:	b002      	add	sp, #8
 80083d4:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 80083d8:	b004      	add	sp, #16
 80083da:	4770      	bx	lr
 80083dc:	20000010 	.word	0x20000010

080083e0 <std>:
 80083e0:	2300      	movs	r3, #0
 80083e2:	b510      	push	{r4, lr}
 80083e4:	4604      	mov	r4, r0
 80083e6:	e9c0 3300 	strd	r3, r3, [r0]
 80083ea:	e9c0 3304 	strd	r3, r3, [r0, #16]
 80083ee:	6083      	str	r3, [r0, #8]
 80083f0:	8181      	strh	r1, [r0, #12]
 80083f2:	6643      	str	r3, [r0, #100]	; 0x64
 80083f4:	81c2      	strh	r2, [r0, #14]
 80083f6:	6183      	str	r3, [r0, #24]
 80083f8:	4619      	mov	r1, r3
 80083fa:	2208      	movs	r2, #8
 80083fc:	305c      	adds	r0, #92	; 0x5c
 80083fe:	f7ff ffcf 	bl	80083a0 <memset>
 8008402:	4b05      	ldr	r3, [pc, #20]	; (8008418 <std+0x38>)
 8008404:	6263      	str	r3, [r4, #36]	; 0x24
 8008406:	4b05      	ldr	r3, [pc, #20]	; (800841c <std+0x3c>)
 8008408:	62a3      	str	r3, [r4, #40]	; 0x28
 800840a:	4b05      	ldr	r3, [pc, #20]	; (8008420 <std+0x40>)
 800840c:	62e3      	str	r3, [r4, #44]	; 0x2c
 800840e:	4b05      	ldr	r3, [pc, #20]	; (8008424 <std+0x44>)
 8008410:	6224      	str	r4, [r4, #32]
 8008412:	6323      	str	r3, [r4, #48]	; 0x30
 8008414:	bd10      	pop	{r4, pc}
 8008416:	bf00      	nop
 8008418:	08008cf5 	.word	0x08008cf5
 800841c:	08008d17 	.word	0x08008d17
 8008420:	08008d4f 	.word	0x08008d4f
 8008424:	08008d73 	.word	0x08008d73

08008428 <_cleanup_r>:
 8008428:	4901      	ldr	r1, [pc, #4]	; (8008430 <_cleanup_r+0x8>)
 800842a:	f000 b8af 	b.w	800858c <_fwalk_reent>
 800842e:	bf00      	nop
 8008430:	0800904d 	.word	0x0800904d

08008434 <__sfmoreglue>:
 8008434:	b570      	push	{r4, r5, r6, lr}
 8008436:	2268      	movs	r2, #104	; 0x68
 8008438:	1e4d      	subs	r5, r1, #1
 800843a:	4355      	muls	r5, r2
 800843c:	460e      	mov	r6, r1
 800843e:	f105 0174 	add.w	r1, r5, #116	; 0x74
 8008442:	f000 f8e5 	bl	8008610 <_malloc_r>
 8008446:	4604      	mov	r4, r0
 8008448:	b140      	cbz	r0, 800845c <__sfmoreglue+0x28>
 800844a:	2100      	movs	r1, #0
 800844c:	e9c0 1600 	strd	r1, r6, [r0]
 8008450:	300c      	adds	r0, #12
 8008452:	60a0      	str	r0, [r4, #8]
 8008454:	f105 0268 	add.w	r2, r5, #104	; 0x68
 8008458:	f7ff ffa2 	bl	80083a0 <memset>
 800845c:	4620      	mov	r0, r4
 800845e:	bd70      	pop	{r4, r5, r6, pc}

08008460 <__sfp_lock_acquire>:
 8008460:	4801      	ldr	r0, [pc, #4]	; (8008468 <__sfp_lock_acquire+0x8>)
 8008462:	f000 b8b3 	b.w	80085cc <__retarget_lock_acquire_recursive>
 8008466:	bf00      	nop
 8008468:	200069bd 	.word	0x200069bd

0800846c <__sfp_lock_release>:
 800846c:	4801      	ldr	r0, [pc, #4]	; (8008474 <__sfp_lock_release+0x8>)
 800846e:	f000 b8ae 	b.w	80085ce <__retarget_lock_release_recursive>
 8008472:	bf00      	nop
 8008474:	200069bd 	.word	0x200069bd

08008478 <__sinit_lock_acquire>:
 8008478:	4801      	ldr	r0, [pc, #4]	; (8008480 <__sinit_lock_acquire+0x8>)
 800847a:	f000 b8a7 	b.w	80085cc <__retarget_lock_acquire_recursive>
 800847e:	bf00      	nop
 8008480:	200069be 	.word	0x200069be

08008484 <__sinit_lock_release>:
 8008484:	4801      	ldr	r0, [pc, #4]	; (800848c <__sinit_lock_release+0x8>)
 8008486:	f000 b8a2 	b.w	80085ce <__retarget_lock_release_recursive>
 800848a:	bf00      	nop
 800848c:	200069be 	.word	0x200069be

08008490 <__sinit>:
 8008490:	b510      	push	{r4, lr}
 8008492:	4604      	mov	r4, r0
 8008494:	f7ff fff0 	bl	8008478 <__sinit_lock_acquire>
 8008498:	69a3      	ldr	r3, [r4, #24]
 800849a:	b11b      	cbz	r3, 80084a4 <__sinit+0x14>
 800849c:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 80084a0:	f7ff bff0 	b.w	8008484 <__sinit_lock_release>
 80084a4:	e9c4 3312 	strd	r3, r3, [r4, #72]	; 0x48
 80084a8:	6523      	str	r3, [r4, #80]	; 0x50
 80084aa:	4b13      	ldr	r3, [pc, #76]	; (80084f8 <__sinit+0x68>)
 80084ac:	4a13      	ldr	r2, [pc, #76]	; (80084fc <__sinit+0x6c>)
 80084ae:	681b      	ldr	r3, [r3, #0]
 80084b0:	62a2      	str	r2, [r4, #40]	; 0x28
 80084b2:	42a3      	cmp	r3, r4
 80084b4:	bf04      	itt	eq
 80084b6:	2301      	moveq	r3, #1
 80084b8:	61a3      	streq	r3, [r4, #24]
 80084ba:	4620      	mov	r0, r4
 80084bc:	f000 f820 	bl	8008500 <__sfp>
 80084c0:	6060      	str	r0, [r4, #4]
 80084c2:	4620      	mov	r0, r4
 80084c4:	f000 f81c 	bl	8008500 <__sfp>
 80084c8:	60a0      	str	r0, [r4, #8]
 80084ca:	4620      	mov	r0, r4
 80084cc:	f000 f818 	bl	8008500 <__sfp>
 80084d0:	2200      	movs	r2, #0
 80084d2:	60e0      	str	r0, [r4, #12]
 80084d4:	2104      	movs	r1, #4
 80084d6:	6860      	ldr	r0, [r4, #4]
 80084d8:	f7ff ff82 	bl	80083e0 <std>
 80084dc:	68a0      	ldr	r0, [r4, #8]
 80084de:	2201      	movs	r2, #1
 80084e0:	2109      	movs	r1, #9
 80084e2:	f7ff ff7d 	bl	80083e0 <std>
 80084e6:	68e0      	ldr	r0, [r4, #12]
 80084e8:	2202      	movs	r2, #2
 80084ea:	2112      	movs	r1, #18
 80084ec:	f7ff ff78 	bl	80083e0 <std>
 80084f0:	2301      	movs	r3, #1
 80084f2:	61a3      	str	r3, [r4, #24]
 80084f4:	e7d2      	b.n	800849c <__sinit+0xc>
 80084f6:	bf00      	nop
 80084f8:	08009528 	.word	0x08009528
 80084fc:	08008429 	.word	0x08008429

08008500 <__sfp>:
 8008500:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8008502:	4607      	mov	r7, r0
 8008504:	f7ff ffac 	bl	8008460 <__sfp_lock_acquire>
 8008508:	4b1e      	ldr	r3, [pc, #120]	; (8008584 <__sfp+0x84>)
 800850a:	681e      	ldr	r6, [r3, #0]
 800850c:	69b3      	ldr	r3, [r6, #24]
 800850e:	b913      	cbnz	r3, 8008516 <__sfp+0x16>
 8008510:	4630      	mov	r0, r6
 8008512:	f7ff ffbd 	bl	8008490 <__sinit>
 8008516:	3648      	adds	r6, #72	; 0x48
 8008518:	e9d6 3401 	ldrd	r3, r4, [r6, #4]
 800851c:	3b01      	subs	r3, #1
 800851e:	d503      	bpl.n	8008528 <__sfp+0x28>
 8008520:	6833      	ldr	r3, [r6, #0]
 8008522:	b30b      	cbz	r3, 8008568 <__sfp+0x68>
 8008524:	6836      	ldr	r6, [r6, #0]
 8008526:	e7f7      	b.n	8008518 <__sfp+0x18>
 8008528:	f9b4 500c 	ldrsh.w	r5, [r4, #12]
 800852c:	b9d5      	cbnz	r5, 8008564 <__sfp+0x64>
 800852e:	4b16      	ldr	r3, [pc, #88]	; (8008588 <__sfp+0x88>)
 8008530:	60e3      	str	r3, [r4, #12]
 8008532:	f104 0058 	add.w	r0, r4, #88	; 0x58
 8008536:	6665      	str	r5, [r4, #100]	; 0x64
 8008538:	f000 f847 	bl	80085ca <__retarget_lock_init_recursive>
 800853c:	f7ff ff96 	bl	800846c <__sfp_lock_release>
 8008540:	e9c4 5501 	strd	r5, r5, [r4, #4]
 8008544:	e9c4 5504 	strd	r5, r5, [r4, #16]
 8008548:	6025      	str	r5, [r4, #0]
 800854a:	61a5      	str	r5, [r4, #24]
 800854c:	2208      	movs	r2, #8
 800854e:	4629      	mov	r1, r5
 8008550:	f104 005c 	add.w	r0, r4, #92	; 0x5c
 8008554:	f7ff ff24 	bl	80083a0 <memset>
 8008558:	e9c4 550d 	strd	r5, r5, [r4, #52]	; 0x34
 800855c:	e9c4 5512 	strd	r5, r5, [r4, #72]	; 0x48
 8008560:	4620      	mov	r0, r4
 8008562:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8008564:	3468      	adds	r4, #104	; 0x68
 8008566:	e7d9      	b.n	800851c <__sfp+0x1c>
 8008568:	2104      	movs	r1, #4
 800856a:	4638      	mov	r0, r7
 800856c:	f7ff ff62 	bl	8008434 <__sfmoreglue>
 8008570:	4604      	mov	r4, r0
 8008572:	6030      	str	r0, [r6, #0]
 8008574:	2800      	cmp	r0, #0
 8008576:	d1d5      	bne.n	8008524 <__sfp+0x24>
 8008578:	f7ff ff78 	bl	800846c <__sfp_lock_release>
 800857c:	230c      	movs	r3, #12
 800857e:	603b      	str	r3, [r7, #0]
 8008580:	e7ee      	b.n	8008560 <__sfp+0x60>
 8008582:	bf00      	nop
 8008584:	08009528 	.word	0x08009528
 8008588:	ffff0001 	.word	0xffff0001

0800858c <_fwalk_reent>:
 800858c:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8008590:	4606      	mov	r6, r0
 8008592:	4688      	mov	r8, r1
 8008594:	f100 0448 	add.w	r4, r0, #72	; 0x48
 8008598:	2700      	movs	r7, #0
 800859a:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 800859e:	f1b9 0901 	subs.w	r9, r9, #1
 80085a2:	d505      	bpl.n	80085b0 <_fwalk_reent+0x24>
 80085a4:	6824      	ldr	r4, [r4, #0]
 80085a6:	2c00      	cmp	r4, #0
 80085a8:	d1f7      	bne.n	800859a <_fwalk_reent+0xe>
 80085aa:	4638      	mov	r0, r7
 80085ac:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 80085b0:	89ab      	ldrh	r3, [r5, #12]
 80085b2:	2b01      	cmp	r3, #1
 80085b4:	d907      	bls.n	80085c6 <_fwalk_reent+0x3a>
 80085b6:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 80085ba:	3301      	adds	r3, #1
 80085bc:	d003      	beq.n	80085c6 <_fwalk_reent+0x3a>
 80085be:	4629      	mov	r1, r5
 80085c0:	4630      	mov	r0, r6
 80085c2:	47c0      	blx	r8
 80085c4:	4307      	orrs	r7, r0
 80085c6:	3568      	adds	r5, #104	; 0x68
 80085c8:	e7e9      	b.n	800859e <_fwalk_reent+0x12>

080085ca <__retarget_lock_init_recursive>:
 80085ca:	4770      	bx	lr

080085cc <__retarget_lock_acquire_recursive>:
 80085cc:	4770      	bx	lr

080085ce <__retarget_lock_release_recursive>:
 80085ce:	4770      	bx	lr

080085d0 <sbrk_aligned>:
 80085d0:	b570      	push	{r4, r5, r6, lr}
 80085d2:	4e0e      	ldr	r6, [pc, #56]	; (800860c <sbrk_aligned+0x3c>)
 80085d4:	460c      	mov	r4, r1
 80085d6:	6831      	ldr	r1, [r6, #0]
 80085d8:	4605      	mov	r5, r0
 80085da:	b911      	cbnz	r1, 80085e2 <sbrk_aligned+0x12>
 80085dc:	f000 fb7a 	bl	8008cd4 <_sbrk_r>
 80085e0:	6030      	str	r0, [r6, #0]
 80085e2:	4621      	mov	r1, r4
 80085e4:	4628      	mov	r0, r5
 80085e6:	f000 fb75 	bl	8008cd4 <_sbrk_r>
 80085ea:	1c43      	adds	r3, r0, #1
 80085ec:	d00a      	beq.n	8008604 <sbrk_aligned+0x34>
 80085ee:	1cc4      	adds	r4, r0, #3
 80085f0:	f024 0403 	bic.w	r4, r4, #3
 80085f4:	42a0      	cmp	r0, r4
 80085f6:	d007      	beq.n	8008608 <sbrk_aligned+0x38>
 80085f8:	1a21      	subs	r1, r4, r0
 80085fa:	4628      	mov	r0, r5
 80085fc:	f000 fb6a 	bl	8008cd4 <_sbrk_r>
 8008600:	3001      	adds	r0, #1
 8008602:	d101      	bne.n	8008608 <sbrk_aligned+0x38>
 8008604:	f04f 34ff 	mov.w	r4, #4294967295
 8008608:	4620      	mov	r0, r4
 800860a:	bd70      	pop	{r4, r5, r6, pc}
 800860c:	200069c4 	.word	0x200069c4

08008610 <_malloc_r>:
 8008610:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8008614:	1ccd      	adds	r5, r1, #3
 8008616:	f025 0503 	bic.w	r5, r5, #3
 800861a:	3508      	adds	r5, #8
 800861c:	2d0c      	cmp	r5, #12
 800861e:	bf38      	it	cc
 8008620:	250c      	movcc	r5, #12
 8008622:	2d00      	cmp	r5, #0
 8008624:	4607      	mov	r7, r0
 8008626:	db01      	blt.n	800862c <_malloc_r+0x1c>
 8008628:	42a9      	cmp	r1, r5
 800862a:	d905      	bls.n	8008638 <_malloc_r+0x28>
 800862c:	230c      	movs	r3, #12
 800862e:	603b      	str	r3, [r7, #0]
 8008630:	2600      	movs	r6, #0
 8008632:	4630      	mov	r0, r6
 8008634:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8008638:	4e2e      	ldr	r6, [pc, #184]	; (80086f4 <_malloc_r+0xe4>)
 800863a:	f000 fdbb 	bl	80091b4 <__malloc_lock>
 800863e:	6833      	ldr	r3, [r6, #0]
 8008640:	461c      	mov	r4, r3
 8008642:	bb34      	cbnz	r4, 8008692 <_malloc_r+0x82>
 8008644:	4629      	mov	r1, r5
 8008646:	4638      	mov	r0, r7
 8008648:	f7ff ffc2 	bl	80085d0 <sbrk_aligned>
 800864c:	1c43      	adds	r3, r0, #1
 800864e:	4604      	mov	r4, r0
 8008650:	d14d      	bne.n	80086ee <_malloc_r+0xde>
 8008652:	6834      	ldr	r4, [r6, #0]
 8008654:	4626      	mov	r6, r4
 8008656:	2e00      	cmp	r6, #0
 8008658:	d140      	bne.n	80086dc <_malloc_r+0xcc>
 800865a:	6823      	ldr	r3, [r4, #0]
 800865c:	4631      	mov	r1, r6
 800865e:	4638      	mov	r0, r7
 8008660:	eb04 0803 	add.w	r8, r4, r3
 8008664:	f000 fb36 	bl	8008cd4 <_sbrk_r>
 8008668:	4580      	cmp	r8, r0
 800866a:	d13a      	bne.n	80086e2 <_malloc_r+0xd2>
 800866c:	6821      	ldr	r1, [r4, #0]
 800866e:	3503      	adds	r5, #3
 8008670:	1a6d      	subs	r5, r5, r1
 8008672:	f025 0503 	bic.w	r5, r5, #3
 8008676:	3508      	adds	r5, #8
 8008678:	2d0c      	cmp	r5, #12
 800867a:	bf38      	it	cc
 800867c:	250c      	movcc	r5, #12
 800867e:	4629      	mov	r1, r5
 8008680:	4638      	mov	r0, r7
 8008682:	f7ff ffa5 	bl	80085d0 <sbrk_aligned>
 8008686:	3001      	adds	r0, #1
 8008688:	d02b      	beq.n	80086e2 <_malloc_r+0xd2>
 800868a:	6823      	ldr	r3, [r4, #0]
 800868c:	442b      	add	r3, r5
 800868e:	6023      	str	r3, [r4, #0]
 8008690:	e00e      	b.n	80086b0 <_malloc_r+0xa0>
 8008692:	6822      	ldr	r2, [r4, #0]
 8008694:	1b52      	subs	r2, r2, r5
 8008696:	d41e      	bmi.n	80086d6 <_malloc_r+0xc6>
 8008698:	2a0b      	cmp	r2, #11
 800869a:	d916      	bls.n	80086ca <_malloc_r+0xba>
 800869c:	1961      	adds	r1, r4, r5
 800869e:	42a3      	cmp	r3, r4
 80086a0:	6025      	str	r5, [r4, #0]
 80086a2:	bf18      	it	ne
 80086a4:	6059      	strne	r1, [r3, #4]
 80086a6:	6863      	ldr	r3, [r4, #4]
 80086a8:	bf08      	it	eq
 80086aa:	6031      	streq	r1, [r6, #0]
 80086ac:	5162      	str	r2, [r4, r5]
 80086ae:	604b      	str	r3, [r1, #4]
 80086b0:	4638      	mov	r0, r7
 80086b2:	f104 060b 	add.w	r6, r4, #11
 80086b6:	f000 fd83 	bl	80091c0 <__malloc_unlock>
 80086ba:	f026 0607 	bic.w	r6, r6, #7
 80086be:	1d23      	adds	r3, r4, #4
 80086c0:	1af2      	subs	r2, r6, r3
 80086c2:	d0b6      	beq.n	8008632 <_malloc_r+0x22>
 80086c4:	1b9b      	subs	r3, r3, r6
 80086c6:	50a3      	str	r3, [r4, r2]
 80086c8:	e7b3      	b.n	8008632 <_malloc_r+0x22>
 80086ca:	6862      	ldr	r2, [r4, #4]
 80086cc:	42a3      	cmp	r3, r4
 80086ce:	bf0c      	ite	eq
 80086d0:	6032      	streq	r2, [r6, #0]
 80086d2:	605a      	strne	r2, [r3, #4]
 80086d4:	e7ec      	b.n	80086b0 <_malloc_r+0xa0>
 80086d6:	4623      	mov	r3, r4
 80086d8:	6864      	ldr	r4, [r4, #4]
 80086da:	e7b2      	b.n	8008642 <_malloc_r+0x32>
 80086dc:	4634      	mov	r4, r6
 80086de:	6876      	ldr	r6, [r6, #4]
 80086e0:	e7b9      	b.n	8008656 <_malloc_r+0x46>
 80086e2:	230c      	movs	r3, #12
 80086e4:	603b      	str	r3, [r7, #0]
 80086e6:	4638      	mov	r0, r7
 80086e8:	f000 fd6a 	bl	80091c0 <__malloc_unlock>
 80086ec:	e7a1      	b.n	8008632 <_malloc_r+0x22>
 80086ee:	6025      	str	r5, [r4, #0]
 80086f0:	e7de      	b.n	80086b0 <_malloc_r+0xa0>
 80086f2:	bf00      	nop
 80086f4:	200069c0 	.word	0x200069c0

080086f8 <__sfputc_r>:
 80086f8:	6893      	ldr	r3, [r2, #8]
 80086fa:	3b01      	subs	r3, #1
 80086fc:	2b00      	cmp	r3, #0
 80086fe:	b410      	push	{r4}
 8008700:	6093      	str	r3, [r2, #8]
 8008702:	da08      	bge.n	8008716 <__sfputc_r+0x1e>
 8008704:	6994      	ldr	r4, [r2, #24]
 8008706:	42a3      	cmp	r3, r4
 8008708:	db01      	blt.n	800870e <__sfputc_r+0x16>
 800870a:	290a      	cmp	r1, #10
 800870c:	d103      	bne.n	8008716 <__sfputc_r+0x1e>
 800870e:	f85d 4b04 	ldr.w	r4, [sp], #4
 8008712:	f000 bb33 	b.w	8008d7c <__swbuf_r>
 8008716:	6813      	ldr	r3, [r2, #0]
 8008718:	1c58      	adds	r0, r3, #1
 800871a:	6010      	str	r0, [r2, #0]
 800871c:	7019      	strb	r1, [r3, #0]
 800871e:	4608      	mov	r0, r1
 8008720:	f85d 4b04 	ldr.w	r4, [sp], #4
 8008724:	4770      	bx	lr

08008726 <__sfputs_r>:
 8008726:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8008728:	4606      	mov	r6, r0
 800872a:	460f      	mov	r7, r1
 800872c:	4614      	mov	r4, r2
 800872e:	18d5      	adds	r5, r2, r3
 8008730:	42ac      	cmp	r4, r5
 8008732:	d101      	bne.n	8008738 <__sfputs_r+0x12>
 8008734:	2000      	movs	r0, #0
 8008736:	e007      	b.n	8008748 <__sfputs_r+0x22>
 8008738:	f814 1b01 	ldrb.w	r1, [r4], #1
 800873c:	463a      	mov	r2, r7
 800873e:	4630      	mov	r0, r6
 8008740:	f7ff ffda 	bl	80086f8 <__sfputc_r>
 8008744:	1c43      	adds	r3, r0, #1
 8008746:	d1f3      	bne.n	8008730 <__sfputs_r+0xa>
 8008748:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

0800874c <_vfiprintf_r>:
 800874c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8008750:	460d      	mov	r5, r1
 8008752:	b09d      	sub	sp, #116	; 0x74
 8008754:	4614      	mov	r4, r2
 8008756:	4698      	mov	r8, r3
 8008758:	4606      	mov	r6, r0
 800875a:	b118      	cbz	r0, 8008764 <_vfiprintf_r+0x18>
 800875c:	6983      	ldr	r3, [r0, #24]
 800875e:	b90b      	cbnz	r3, 8008764 <_vfiprintf_r+0x18>
 8008760:	f7ff fe96 	bl	8008490 <__sinit>
 8008764:	4b89      	ldr	r3, [pc, #548]	; (800898c <_vfiprintf_r+0x240>)
 8008766:	429d      	cmp	r5, r3
 8008768:	d11b      	bne.n	80087a2 <_vfiprintf_r+0x56>
 800876a:	6875      	ldr	r5, [r6, #4]
 800876c:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 800876e:	07d9      	lsls	r1, r3, #31
 8008770:	d405      	bmi.n	800877e <_vfiprintf_r+0x32>
 8008772:	89ab      	ldrh	r3, [r5, #12]
 8008774:	059a      	lsls	r2, r3, #22
 8008776:	d402      	bmi.n	800877e <_vfiprintf_r+0x32>
 8008778:	6da8      	ldr	r0, [r5, #88]	; 0x58
 800877a:	f7ff ff27 	bl	80085cc <__retarget_lock_acquire_recursive>
 800877e:	89ab      	ldrh	r3, [r5, #12]
 8008780:	071b      	lsls	r3, r3, #28
 8008782:	d501      	bpl.n	8008788 <_vfiprintf_r+0x3c>
 8008784:	692b      	ldr	r3, [r5, #16]
 8008786:	b9eb      	cbnz	r3, 80087c4 <_vfiprintf_r+0x78>
 8008788:	4629      	mov	r1, r5
 800878a:	4630      	mov	r0, r6
 800878c:	f000 fb5a 	bl	8008e44 <__swsetup_r>
 8008790:	b1c0      	cbz	r0, 80087c4 <_vfiprintf_r+0x78>
 8008792:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8008794:	07dc      	lsls	r4, r3, #31
 8008796:	d50e      	bpl.n	80087b6 <_vfiprintf_r+0x6a>
 8008798:	f04f 30ff 	mov.w	r0, #4294967295
 800879c:	b01d      	add	sp, #116	; 0x74
 800879e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80087a2:	4b7b      	ldr	r3, [pc, #492]	; (8008990 <_vfiprintf_r+0x244>)
 80087a4:	429d      	cmp	r5, r3
 80087a6:	d101      	bne.n	80087ac <_vfiprintf_r+0x60>
 80087a8:	68b5      	ldr	r5, [r6, #8]
 80087aa:	e7df      	b.n	800876c <_vfiprintf_r+0x20>
 80087ac:	4b79      	ldr	r3, [pc, #484]	; (8008994 <_vfiprintf_r+0x248>)
 80087ae:	429d      	cmp	r5, r3
 80087b0:	bf08      	it	eq
 80087b2:	68f5      	ldreq	r5, [r6, #12]
 80087b4:	e7da      	b.n	800876c <_vfiprintf_r+0x20>
 80087b6:	89ab      	ldrh	r3, [r5, #12]
 80087b8:	0598      	lsls	r0, r3, #22
 80087ba:	d4ed      	bmi.n	8008798 <_vfiprintf_r+0x4c>
 80087bc:	6da8      	ldr	r0, [r5, #88]	; 0x58
 80087be:	f7ff ff06 	bl	80085ce <__retarget_lock_release_recursive>
 80087c2:	e7e9      	b.n	8008798 <_vfiprintf_r+0x4c>
 80087c4:	2300      	movs	r3, #0
 80087c6:	9309      	str	r3, [sp, #36]	; 0x24
 80087c8:	2320      	movs	r3, #32
 80087ca:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 80087ce:	f8cd 800c 	str.w	r8, [sp, #12]
 80087d2:	2330      	movs	r3, #48	; 0x30
 80087d4:	f8df 81c0 	ldr.w	r8, [pc, #448]	; 8008998 <_vfiprintf_r+0x24c>
 80087d8:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 80087dc:	f04f 0901 	mov.w	r9, #1
 80087e0:	4623      	mov	r3, r4
 80087e2:	469a      	mov	sl, r3
 80087e4:	f813 2b01 	ldrb.w	r2, [r3], #1
 80087e8:	b10a      	cbz	r2, 80087ee <_vfiprintf_r+0xa2>
 80087ea:	2a25      	cmp	r2, #37	; 0x25
 80087ec:	d1f9      	bne.n	80087e2 <_vfiprintf_r+0x96>
 80087ee:	ebba 0b04 	subs.w	fp, sl, r4
 80087f2:	d00b      	beq.n	800880c <_vfiprintf_r+0xc0>
 80087f4:	465b      	mov	r3, fp
 80087f6:	4622      	mov	r2, r4
 80087f8:	4629      	mov	r1, r5
 80087fa:	4630      	mov	r0, r6
 80087fc:	f7ff ff93 	bl	8008726 <__sfputs_r>
 8008800:	3001      	adds	r0, #1
 8008802:	f000 80aa 	beq.w	800895a <_vfiprintf_r+0x20e>
 8008806:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8008808:	445a      	add	r2, fp
 800880a:	9209      	str	r2, [sp, #36]	; 0x24
 800880c:	f89a 3000 	ldrb.w	r3, [sl]
 8008810:	2b00      	cmp	r3, #0
 8008812:	f000 80a2 	beq.w	800895a <_vfiprintf_r+0x20e>
 8008816:	2300      	movs	r3, #0
 8008818:	f04f 32ff 	mov.w	r2, #4294967295
 800881c:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8008820:	f10a 0a01 	add.w	sl, sl, #1
 8008824:	9304      	str	r3, [sp, #16]
 8008826:	9307      	str	r3, [sp, #28]
 8008828:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 800882c:	931a      	str	r3, [sp, #104]	; 0x68
 800882e:	4654      	mov	r4, sl
 8008830:	2205      	movs	r2, #5
 8008832:	f814 1b01 	ldrb.w	r1, [r4], #1
 8008836:	4858      	ldr	r0, [pc, #352]	; (8008998 <_vfiprintf_r+0x24c>)
 8008838:	f7f7 fe02 	bl	8000440 <memchr>
 800883c:	9a04      	ldr	r2, [sp, #16]
 800883e:	b9d8      	cbnz	r0, 8008878 <_vfiprintf_r+0x12c>
 8008840:	06d1      	lsls	r1, r2, #27
 8008842:	bf44      	itt	mi
 8008844:	2320      	movmi	r3, #32
 8008846:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800884a:	0713      	lsls	r3, r2, #28
 800884c:	bf44      	itt	mi
 800884e:	232b      	movmi	r3, #43	; 0x2b
 8008850:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8008854:	f89a 3000 	ldrb.w	r3, [sl]
 8008858:	2b2a      	cmp	r3, #42	; 0x2a
 800885a:	d015      	beq.n	8008888 <_vfiprintf_r+0x13c>
 800885c:	9a07      	ldr	r2, [sp, #28]
 800885e:	4654      	mov	r4, sl
 8008860:	2000      	movs	r0, #0
 8008862:	f04f 0c0a 	mov.w	ip, #10
 8008866:	4621      	mov	r1, r4
 8008868:	f811 3b01 	ldrb.w	r3, [r1], #1
 800886c:	3b30      	subs	r3, #48	; 0x30
 800886e:	2b09      	cmp	r3, #9
 8008870:	d94e      	bls.n	8008910 <_vfiprintf_r+0x1c4>
 8008872:	b1b0      	cbz	r0, 80088a2 <_vfiprintf_r+0x156>
 8008874:	9207      	str	r2, [sp, #28]
 8008876:	e014      	b.n	80088a2 <_vfiprintf_r+0x156>
 8008878:	eba0 0308 	sub.w	r3, r0, r8
 800887c:	fa09 f303 	lsl.w	r3, r9, r3
 8008880:	4313      	orrs	r3, r2
 8008882:	9304      	str	r3, [sp, #16]
 8008884:	46a2      	mov	sl, r4
 8008886:	e7d2      	b.n	800882e <_vfiprintf_r+0xe2>
 8008888:	9b03      	ldr	r3, [sp, #12]
 800888a:	1d19      	adds	r1, r3, #4
 800888c:	681b      	ldr	r3, [r3, #0]
 800888e:	9103      	str	r1, [sp, #12]
 8008890:	2b00      	cmp	r3, #0
 8008892:	bfbb      	ittet	lt
 8008894:	425b      	neglt	r3, r3
 8008896:	f042 0202 	orrlt.w	r2, r2, #2
 800889a:	9307      	strge	r3, [sp, #28]
 800889c:	9307      	strlt	r3, [sp, #28]
 800889e:	bfb8      	it	lt
 80088a0:	9204      	strlt	r2, [sp, #16]
 80088a2:	7823      	ldrb	r3, [r4, #0]
 80088a4:	2b2e      	cmp	r3, #46	; 0x2e
 80088a6:	d10c      	bne.n	80088c2 <_vfiprintf_r+0x176>
 80088a8:	7863      	ldrb	r3, [r4, #1]
 80088aa:	2b2a      	cmp	r3, #42	; 0x2a
 80088ac:	d135      	bne.n	800891a <_vfiprintf_r+0x1ce>
 80088ae:	9b03      	ldr	r3, [sp, #12]
 80088b0:	1d1a      	adds	r2, r3, #4
 80088b2:	681b      	ldr	r3, [r3, #0]
 80088b4:	9203      	str	r2, [sp, #12]
 80088b6:	2b00      	cmp	r3, #0
 80088b8:	bfb8      	it	lt
 80088ba:	f04f 33ff 	movlt.w	r3, #4294967295
 80088be:	3402      	adds	r4, #2
 80088c0:	9305      	str	r3, [sp, #20]
 80088c2:	f8df a0e4 	ldr.w	sl, [pc, #228]	; 80089a8 <_vfiprintf_r+0x25c>
 80088c6:	7821      	ldrb	r1, [r4, #0]
 80088c8:	2203      	movs	r2, #3
 80088ca:	4650      	mov	r0, sl
 80088cc:	f7f7 fdb8 	bl	8000440 <memchr>
 80088d0:	b140      	cbz	r0, 80088e4 <_vfiprintf_r+0x198>
 80088d2:	2340      	movs	r3, #64	; 0x40
 80088d4:	eba0 000a 	sub.w	r0, r0, sl
 80088d8:	fa03 f000 	lsl.w	r0, r3, r0
 80088dc:	9b04      	ldr	r3, [sp, #16]
 80088de:	4303      	orrs	r3, r0
 80088e0:	3401      	adds	r4, #1
 80088e2:	9304      	str	r3, [sp, #16]
 80088e4:	f814 1b01 	ldrb.w	r1, [r4], #1
 80088e8:	482c      	ldr	r0, [pc, #176]	; (800899c <_vfiprintf_r+0x250>)
 80088ea:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 80088ee:	2206      	movs	r2, #6
 80088f0:	f7f7 fda6 	bl	8000440 <memchr>
 80088f4:	2800      	cmp	r0, #0
 80088f6:	d03f      	beq.n	8008978 <_vfiprintf_r+0x22c>
 80088f8:	4b29      	ldr	r3, [pc, #164]	; (80089a0 <_vfiprintf_r+0x254>)
 80088fa:	bb1b      	cbnz	r3, 8008944 <_vfiprintf_r+0x1f8>
 80088fc:	9b03      	ldr	r3, [sp, #12]
 80088fe:	3307      	adds	r3, #7
 8008900:	f023 0307 	bic.w	r3, r3, #7
 8008904:	3308      	adds	r3, #8
 8008906:	9303      	str	r3, [sp, #12]
 8008908:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800890a:	443b      	add	r3, r7
 800890c:	9309      	str	r3, [sp, #36]	; 0x24
 800890e:	e767      	b.n	80087e0 <_vfiprintf_r+0x94>
 8008910:	fb0c 3202 	mla	r2, ip, r2, r3
 8008914:	460c      	mov	r4, r1
 8008916:	2001      	movs	r0, #1
 8008918:	e7a5      	b.n	8008866 <_vfiprintf_r+0x11a>
 800891a:	2300      	movs	r3, #0
 800891c:	3401      	adds	r4, #1
 800891e:	9305      	str	r3, [sp, #20]
 8008920:	4619      	mov	r1, r3
 8008922:	f04f 0c0a 	mov.w	ip, #10
 8008926:	4620      	mov	r0, r4
 8008928:	f810 2b01 	ldrb.w	r2, [r0], #1
 800892c:	3a30      	subs	r2, #48	; 0x30
 800892e:	2a09      	cmp	r2, #9
 8008930:	d903      	bls.n	800893a <_vfiprintf_r+0x1ee>
 8008932:	2b00      	cmp	r3, #0
 8008934:	d0c5      	beq.n	80088c2 <_vfiprintf_r+0x176>
 8008936:	9105      	str	r1, [sp, #20]
 8008938:	e7c3      	b.n	80088c2 <_vfiprintf_r+0x176>
 800893a:	fb0c 2101 	mla	r1, ip, r1, r2
 800893e:	4604      	mov	r4, r0
 8008940:	2301      	movs	r3, #1
 8008942:	e7f0      	b.n	8008926 <_vfiprintf_r+0x1da>
 8008944:	ab03      	add	r3, sp, #12
 8008946:	9300      	str	r3, [sp, #0]
 8008948:	462a      	mov	r2, r5
 800894a:	4b16      	ldr	r3, [pc, #88]	; (80089a4 <_vfiprintf_r+0x258>)
 800894c:	a904      	add	r1, sp, #16
 800894e:	4630      	mov	r0, r6
 8008950:	f3af 8000 	nop.w
 8008954:	4607      	mov	r7, r0
 8008956:	1c78      	adds	r0, r7, #1
 8008958:	d1d6      	bne.n	8008908 <_vfiprintf_r+0x1bc>
 800895a:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 800895c:	07d9      	lsls	r1, r3, #31
 800895e:	d405      	bmi.n	800896c <_vfiprintf_r+0x220>
 8008960:	89ab      	ldrh	r3, [r5, #12]
 8008962:	059a      	lsls	r2, r3, #22
 8008964:	d402      	bmi.n	800896c <_vfiprintf_r+0x220>
 8008966:	6da8      	ldr	r0, [r5, #88]	; 0x58
 8008968:	f7ff fe31 	bl	80085ce <__retarget_lock_release_recursive>
 800896c:	89ab      	ldrh	r3, [r5, #12]
 800896e:	065b      	lsls	r3, r3, #25
 8008970:	f53f af12 	bmi.w	8008798 <_vfiprintf_r+0x4c>
 8008974:	9809      	ldr	r0, [sp, #36]	; 0x24
 8008976:	e711      	b.n	800879c <_vfiprintf_r+0x50>
 8008978:	ab03      	add	r3, sp, #12
 800897a:	9300      	str	r3, [sp, #0]
 800897c:	462a      	mov	r2, r5
 800897e:	4b09      	ldr	r3, [pc, #36]	; (80089a4 <_vfiprintf_r+0x258>)
 8008980:	a904      	add	r1, sp, #16
 8008982:	4630      	mov	r0, r6
 8008984:	f000 f880 	bl	8008a88 <_printf_i>
 8008988:	e7e4      	b.n	8008954 <_vfiprintf_r+0x208>
 800898a:	bf00      	nop
 800898c:	0800954c 	.word	0x0800954c
 8008990:	0800956c 	.word	0x0800956c
 8008994:	0800952c 	.word	0x0800952c
 8008998:	0800958c 	.word	0x0800958c
 800899c:	08009596 	.word	0x08009596
 80089a0:	00000000 	.word	0x00000000
 80089a4:	08008727 	.word	0x08008727
 80089a8:	08009592 	.word	0x08009592

080089ac <_printf_common>:
 80089ac:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80089b0:	4616      	mov	r6, r2
 80089b2:	4699      	mov	r9, r3
 80089b4:	688a      	ldr	r2, [r1, #8]
 80089b6:	690b      	ldr	r3, [r1, #16]
 80089b8:	f8dd 8020 	ldr.w	r8, [sp, #32]
 80089bc:	4293      	cmp	r3, r2
 80089be:	bfb8      	it	lt
 80089c0:	4613      	movlt	r3, r2
 80089c2:	6033      	str	r3, [r6, #0]
 80089c4:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 80089c8:	4607      	mov	r7, r0
 80089ca:	460c      	mov	r4, r1
 80089cc:	b10a      	cbz	r2, 80089d2 <_printf_common+0x26>
 80089ce:	3301      	adds	r3, #1
 80089d0:	6033      	str	r3, [r6, #0]
 80089d2:	6823      	ldr	r3, [r4, #0]
 80089d4:	0699      	lsls	r1, r3, #26
 80089d6:	bf42      	ittt	mi
 80089d8:	6833      	ldrmi	r3, [r6, #0]
 80089da:	3302      	addmi	r3, #2
 80089dc:	6033      	strmi	r3, [r6, #0]
 80089de:	6825      	ldr	r5, [r4, #0]
 80089e0:	f015 0506 	ands.w	r5, r5, #6
 80089e4:	d106      	bne.n	80089f4 <_printf_common+0x48>
 80089e6:	f104 0a19 	add.w	sl, r4, #25
 80089ea:	68e3      	ldr	r3, [r4, #12]
 80089ec:	6832      	ldr	r2, [r6, #0]
 80089ee:	1a9b      	subs	r3, r3, r2
 80089f0:	42ab      	cmp	r3, r5
 80089f2:	dc26      	bgt.n	8008a42 <_printf_common+0x96>
 80089f4:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 80089f8:	1e13      	subs	r3, r2, #0
 80089fa:	6822      	ldr	r2, [r4, #0]
 80089fc:	bf18      	it	ne
 80089fe:	2301      	movne	r3, #1
 8008a00:	0692      	lsls	r2, r2, #26
 8008a02:	d42b      	bmi.n	8008a5c <_printf_common+0xb0>
 8008a04:	f104 0243 	add.w	r2, r4, #67	; 0x43
 8008a08:	4649      	mov	r1, r9
 8008a0a:	4638      	mov	r0, r7
 8008a0c:	47c0      	blx	r8
 8008a0e:	3001      	adds	r0, #1
 8008a10:	d01e      	beq.n	8008a50 <_printf_common+0xa4>
 8008a12:	6823      	ldr	r3, [r4, #0]
 8008a14:	68e5      	ldr	r5, [r4, #12]
 8008a16:	6832      	ldr	r2, [r6, #0]
 8008a18:	f003 0306 	and.w	r3, r3, #6
 8008a1c:	2b04      	cmp	r3, #4
 8008a1e:	bf08      	it	eq
 8008a20:	1aad      	subeq	r5, r5, r2
 8008a22:	68a3      	ldr	r3, [r4, #8]
 8008a24:	6922      	ldr	r2, [r4, #16]
 8008a26:	bf0c      	ite	eq
 8008a28:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8008a2c:	2500      	movne	r5, #0
 8008a2e:	4293      	cmp	r3, r2
 8008a30:	bfc4      	itt	gt
 8008a32:	1a9b      	subgt	r3, r3, r2
 8008a34:	18ed      	addgt	r5, r5, r3
 8008a36:	2600      	movs	r6, #0
 8008a38:	341a      	adds	r4, #26
 8008a3a:	42b5      	cmp	r5, r6
 8008a3c:	d11a      	bne.n	8008a74 <_printf_common+0xc8>
 8008a3e:	2000      	movs	r0, #0
 8008a40:	e008      	b.n	8008a54 <_printf_common+0xa8>
 8008a42:	2301      	movs	r3, #1
 8008a44:	4652      	mov	r2, sl
 8008a46:	4649      	mov	r1, r9
 8008a48:	4638      	mov	r0, r7
 8008a4a:	47c0      	blx	r8
 8008a4c:	3001      	adds	r0, #1
 8008a4e:	d103      	bne.n	8008a58 <_printf_common+0xac>
 8008a50:	f04f 30ff 	mov.w	r0, #4294967295
 8008a54:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8008a58:	3501      	adds	r5, #1
 8008a5a:	e7c6      	b.n	80089ea <_printf_common+0x3e>
 8008a5c:	18e1      	adds	r1, r4, r3
 8008a5e:	1c5a      	adds	r2, r3, #1
 8008a60:	2030      	movs	r0, #48	; 0x30
 8008a62:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 8008a66:	4422      	add	r2, r4
 8008a68:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 8008a6c:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 8008a70:	3302      	adds	r3, #2
 8008a72:	e7c7      	b.n	8008a04 <_printf_common+0x58>
 8008a74:	2301      	movs	r3, #1
 8008a76:	4622      	mov	r2, r4
 8008a78:	4649      	mov	r1, r9
 8008a7a:	4638      	mov	r0, r7
 8008a7c:	47c0      	blx	r8
 8008a7e:	3001      	adds	r0, #1
 8008a80:	d0e6      	beq.n	8008a50 <_printf_common+0xa4>
 8008a82:	3601      	adds	r6, #1
 8008a84:	e7d9      	b.n	8008a3a <_printf_common+0x8e>
	...

08008a88 <_printf_i>:
 8008a88:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8008a8c:	7e0f      	ldrb	r7, [r1, #24]
 8008a8e:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 8008a90:	2f78      	cmp	r7, #120	; 0x78
 8008a92:	4691      	mov	r9, r2
 8008a94:	4680      	mov	r8, r0
 8008a96:	460c      	mov	r4, r1
 8008a98:	469a      	mov	sl, r3
 8008a9a:	f101 0243 	add.w	r2, r1, #67	; 0x43
 8008a9e:	d807      	bhi.n	8008ab0 <_printf_i+0x28>
 8008aa0:	2f62      	cmp	r7, #98	; 0x62
 8008aa2:	d80a      	bhi.n	8008aba <_printf_i+0x32>
 8008aa4:	2f00      	cmp	r7, #0
 8008aa6:	f000 80d8 	beq.w	8008c5a <_printf_i+0x1d2>
 8008aaa:	2f58      	cmp	r7, #88	; 0x58
 8008aac:	f000 80a3 	beq.w	8008bf6 <_printf_i+0x16e>
 8008ab0:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8008ab4:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 8008ab8:	e03a      	b.n	8008b30 <_printf_i+0xa8>
 8008aba:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 8008abe:	2b15      	cmp	r3, #21
 8008ac0:	d8f6      	bhi.n	8008ab0 <_printf_i+0x28>
 8008ac2:	a101      	add	r1, pc, #4	; (adr r1, 8008ac8 <_printf_i+0x40>)
 8008ac4:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 8008ac8:	08008b21 	.word	0x08008b21
 8008acc:	08008b35 	.word	0x08008b35
 8008ad0:	08008ab1 	.word	0x08008ab1
 8008ad4:	08008ab1 	.word	0x08008ab1
 8008ad8:	08008ab1 	.word	0x08008ab1
 8008adc:	08008ab1 	.word	0x08008ab1
 8008ae0:	08008b35 	.word	0x08008b35
 8008ae4:	08008ab1 	.word	0x08008ab1
 8008ae8:	08008ab1 	.word	0x08008ab1
 8008aec:	08008ab1 	.word	0x08008ab1
 8008af0:	08008ab1 	.word	0x08008ab1
 8008af4:	08008c41 	.word	0x08008c41
 8008af8:	08008b65 	.word	0x08008b65
 8008afc:	08008c23 	.word	0x08008c23
 8008b00:	08008ab1 	.word	0x08008ab1
 8008b04:	08008ab1 	.word	0x08008ab1
 8008b08:	08008c63 	.word	0x08008c63
 8008b0c:	08008ab1 	.word	0x08008ab1
 8008b10:	08008b65 	.word	0x08008b65
 8008b14:	08008ab1 	.word	0x08008ab1
 8008b18:	08008ab1 	.word	0x08008ab1
 8008b1c:	08008c2b 	.word	0x08008c2b
 8008b20:	682b      	ldr	r3, [r5, #0]
 8008b22:	1d1a      	adds	r2, r3, #4
 8008b24:	681b      	ldr	r3, [r3, #0]
 8008b26:	602a      	str	r2, [r5, #0]
 8008b28:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8008b2c:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 8008b30:	2301      	movs	r3, #1
 8008b32:	e0a3      	b.n	8008c7c <_printf_i+0x1f4>
 8008b34:	6820      	ldr	r0, [r4, #0]
 8008b36:	6829      	ldr	r1, [r5, #0]
 8008b38:	0606      	lsls	r6, r0, #24
 8008b3a:	f101 0304 	add.w	r3, r1, #4
 8008b3e:	d50a      	bpl.n	8008b56 <_printf_i+0xce>
 8008b40:	680e      	ldr	r6, [r1, #0]
 8008b42:	602b      	str	r3, [r5, #0]
 8008b44:	2e00      	cmp	r6, #0
 8008b46:	da03      	bge.n	8008b50 <_printf_i+0xc8>
 8008b48:	232d      	movs	r3, #45	; 0x2d
 8008b4a:	4276      	negs	r6, r6
 8008b4c:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8008b50:	485e      	ldr	r0, [pc, #376]	; (8008ccc <_printf_i+0x244>)
 8008b52:	230a      	movs	r3, #10
 8008b54:	e019      	b.n	8008b8a <_printf_i+0x102>
 8008b56:	680e      	ldr	r6, [r1, #0]
 8008b58:	602b      	str	r3, [r5, #0]
 8008b5a:	f010 0f40 	tst.w	r0, #64	; 0x40
 8008b5e:	bf18      	it	ne
 8008b60:	b236      	sxthne	r6, r6
 8008b62:	e7ef      	b.n	8008b44 <_printf_i+0xbc>
 8008b64:	682b      	ldr	r3, [r5, #0]
 8008b66:	6820      	ldr	r0, [r4, #0]
 8008b68:	1d19      	adds	r1, r3, #4
 8008b6a:	6029      	str	r1, [r5, #0]
 8008b6c:	0601      	lsls	r1, r0, #24
 8008b6e:	d501      	bpl.n	8008b74 <_printf_i+0xec>
 8008b70:	681e      	ldr	r6, [r3, #0]
 8008b72:	e002      	b.n	8008b7a <_printf_i+0xf2>
 8008b74:	0646      	lsls	r6, r0, #25
 8008b76:	d5fb      	bpl.n	8008b70 <_printf_i+0xe8>
 8008b78:	881e      	ldrh	r6, [r3, #0]
 8008b7a:	4854      	ldr	r0, [pc, #336]	; (8008ccc <_printf_i+0x244>)
 8008b7c:	2f6f      	cmp	r7, #111	; 0x6f
 8008b7e:	bf0c      	ite	eq
 8008b80:	2308      	moveq	r3, #8
 8008b82:	230a      	movne	r3, #10
 8008b84:	2100      	movs	r1, #0
 8008b86:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 8008b8a:	6865      	ldr	r5, [r4, #4]
 8008b8c:	60a5      	str	r5, [r4, #8]
 8008b8e:	2d00      	cmp	r5, #0
 8008b90:	bfa2      	ittt	ge
 8008b92:	6821      	ldrge	r1, [r4, #0]
 8008b94:	f021 0104 	bicge.w	r1, r1, #4
 8008b98:	6021      	strge	r1, [r4, #0]
 8008b9a:	b90e      	cbnz	r6, 8008ba0 <_printf_i+0x118>
 8008b9c:	2d00      	cmp	r5, #0
 8008b9e:	d04d      	beq.n	8008c3c <_printf_i+0x1b4>
 8008ba0:	4615      	mov	r5, r2
 8008ba2:	fbb6 f1f3 	udiv	r1, r6, r3
 8008ba6:	fb03 6711 	mls	r7, r3, r1, r6
 8008baa:	5dc7      	ldrb	r7, [r0, r7]
 8008bac:	f805 7d01 	strb.w	r7, [r5, #-1]!
 8008bb0:	4637      	mov	r7, r6
 8008bb2:	42bb      	cmp	r3, r7
 8008bb4:	460e      	mov	r6, r1
 8008bb6:	d9f4      	bls.n	8008ba2 <_printf_i+0x11a>
 8008bb8:	2b08      	cmp	r3, #8
 8008bba:	d10b      	bne.n	8008bd4 <_printf_i+0x14c>
 8008bbc:	6823      	ldr	r3, [r4, #0]
 8008bbe:	07de      	lsls	r6, r3, #31
 8008bc0:	d508      	bpl.n	8008bd4 <_printf_i+0x14c>
 8008bc2:	6923      	ldr	r3, [r4, #16]
 8008bc4:	6861      	ldr	r1, [r4, #4]
 8008bc6:	4299      	cmp	r1, r3
 8008bc8:	bfde      	ittt	le
 8008bca:	2330      	movle	r3, #48	; 0x30
 8008bcc:	f805 3c01 	strble.w	r3, [r5, #-1]
 8008bd0:	f105 35ff 	addle.w	r5, r5, #4294967295
 8008bd4:	1b52      	subs	r2, r2, r5
 8008bd6:	6122      	str	r2, [r4, #16]
 8008bd8:	f8cd a000 	str.w	sl, [sp]
 8008bdc:	464b      	mov	r3, r9
 8008bde:	aa03      	add	r2, sp, #12
 8008be0:	4621      	mov	r1, r4
 8008be2:	4640      	mov	r0, r8
 8008be4:	f7ff fee2 	bl	80089ac <_printf_common>
 8008be8:	3001      	adds	r0, #1
 8008bea:	d14c      	bne.n	8008c86 <_printf_i+0x1fe>
 8008bec:	f04f 30ff 	mov.w	r0, #4294967295
 8008bf0:	b004      	add	sp, #16
 8008bf2:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8008bf6:	4835      	ldr	r0, [pc, #212]	; (8008ccc <_printf_i+0x244>)
 8008bf8:	f881 7045 	strb.w	r7, [r1, #69]	; 0x45
 8008bfc:	6829      	ldr	r1, [r5, #0]
 8008bfe:	6823      	ldr	r3, [r4, #0]
 8008c00:	f851 6b04 	ldr.w	r6, [r1], #4
 8008c04:	6029      	str	r1, [r5, #0]
 8008c06:	061d      	lsls	r5, r3, #24
 8008c08:	d514      	bpl.n	8008c34 <_printf_i+0x1ac>
 8008c0a:	07df      	lsls	r7, r3, #31
 8008c0c:	bf44      	itt	mi
 8008c0e:	f043 0320 	orrmi.w	r3, r3, #32
 8008c12:	6023      	strmi	r3, [r4, #0]
 8008c14:	b91e      	cbnz	r6, 8008c1e <_printf_i+0x196>
 8008c16:	6823      	ldr	r3, [r4, #0]
 8008c18:	f023 0320 	bic.w	r3, r3, #32
 8008c1c:	6023      	str	r3, [r4, #0]
 8008c1e:	2310      	movs	r3, #16
 8008c20:	e7b0      	b.n	8008b84 <_printf_i+0xfc>
 8008c22:	6823      	ldr	r3, [r4, #0]
 8008c24:	f043 0320 	orr.w	r3, r3, #32
 8008c28:	6023      	str	r3, [r4, #0]
 8008c2a:	2378      	movs	r3, #120	; 0x78
 8008c2c:	4828      	ldr	r0, [pc, #160]	; (8008cd0 <_printf_i+0x248>)
 8008c2e:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 8008c32:	e7e3      	b.n	8008bfc <_printf_i+0x174>
 8008c34:	0659      	lsls	r1, r3, #25
 8008c36:	bf48      	it	mi
 8008c38:	b2b6      	uxthmi	r6, r6
 8008c3a:	e7e6      	b.n	8008c0a <_printf_i+0x182>
 8008c3c:	4615      	mov	r5, r2
 8008c3e:	e7bb      	b.n	8008bb8 <_printf_i+0x130>
 8008c40:	682b      	ldr	r3, [r5, #0]
 8008c42:	6826      	ldr	r6, [r4, #0]
 8008c44:	6961      	ldr	r1, [r4, #20]
 8008c46:	1d18      	adds	r0, r3, #4
 8008c48:	6028      	str	r0, [r5, #0]
 8008c4a:	0635      	lsls	r5, r6, #24
 8008c4c:	681b      	ldr	r3, [r3, #0]
 8008c4e:	d501      	bpl.n	8008c54 <_printf_i+0x1cc>
 8008c50:	6019      	str	r1, [r3, #0]
 8008c52:	e002      	b.n	8008c5a <_printf_i+0x1d2>
 8008c54:	0670      	lsls	r0, r6, #25
 8008c56:	d5fb      	bpl.n	8008c50 <_printf_i+0x1c8>
 8008c58:	8019      	strh	r1, [r3, #0]
 8008c5a:	2300      	movs	r3, #0
 8008c5c:	6123      	str	r3, [r4, #16]
 8008c5e:	4615      	mov	r5, r2
 8008c60:	e7ba      	b.n	8008bd8 <_printf_i+0x150>
 8008c62:	682b      	ldr	r3, [r5, #0]
 8008c64:	1d1a      	adds	r2, r3, #4
 8008c66:	602a      	str	r2, [r5, #0]
 8008c68:	681d      	ldr	r5, [r3, #0]
 8008c6a:	6862      	ldr	r2, [r4, #4]
 8008c6c:	2100      	movs	r1, #0
 8008c6e:	4628      	mov	r0, r5
 8008c70:	f7f7 fbe6 	bl	8000440 <memchr>
 8008c74:	b108      	cbz	r0, 8008c7a <_printf_i+0x1f2>
 8008c76:	1b40      	subs	r0, r0, r5
 8008c78:	6060      	str	r0, [r4, #4]
 8008c7a:	6863      	ldr	r3, [r4, #4]
 8008c7c:	6123      	str	r3, [r4, #16]
 8008c7e:	2300      	movs	r3, #0
 8008c80:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8008c84:	e7a8      	b.n	8008bd8 <_printf_i+0x150>
 8008c86:	6923      	ldr	r3, [r4, #16]
 8008c88:	462a      	mov	r2, r5
 8008c8a:	4649      	mov	r1, r9
 8008c8c:	4640      	mov	r0, r8
 8008c8e:	47d0      	blx	sl
 8008c90:	3001      	adds	r0, #1
 8008c92:	d0ab      	beq.n	8008bec <_printf_i+0x164>
 8008c94:	6823      	ldr	r3, [r4, #0]
 8008c96:	079b      	lsls	r3, r3, #30
 8008c98:	d413      	bmi.n	8008cc2 <_printf_i+0x23a>
 8008c9a:	68e0      	ldr	r0, [r4, #12]
 8008c9c:	9b03      	ldr	r3, [sp, #12]
 8008c9e:	4298      	cmp	r0, r3
 8008ca0:	bfb8      	it	lt
 8008ca2:	4618      	movlt	r0, r3
 8008ca4:	e7a4      	b.n	8008bf0 <_printf_i+0x168>
 8008ca6:	2301      	movs	r3, #1
 8008ca8:	4632      	mov	r2, r6
 8008caa:	4649      	mov	r1, r9
 8008cac:	4640      	mov	r0, r8
 8008cae:	47d0      	blx	sl
 8008cb0:	3001      	adds	r0, #1
 8008cb2:	d09b      	beq.n	8008bec <_printf_i+0x164>
 8008cb4:	3501      	adds	r5, #1
 8008cb6:	68e3      	ldr	r3, [r4, #12]
 8008cb8:	9903      	ldr	r1, [sp, #12]
 8008cba:	1a5b      	subs	r3, r3, r1
 8008cbc:	42ab      	cmp	r3, r5
 8008cbe:	dcf2      	bgt.n	8008ca6 <_printf_i+0x21e>
 8008cc0:	e7eb      	b.n	8008c9a <_printf_i+0x212>
 8008cc2:	2500      	movs	r5, #0
 8008cc4:	f104 0619 	add.w	r6, r4, #25
 8008cc8:	e7f5      	b.n	8008cb6 <_printf_i+0x22e>
 8008cca:	bf00      	nop
 8008ccc:	0800959d 	.word	0x0800959d
 8008cd0:	080095ae 	.word	0x080095ae

08008cd4 <_sbrk_r>:
 8008cd4:	b538      	push	{r3, r4, r5, lr}
 8008cd6:	4d06      	ldr	r5, [pc, #24]	; (8008cf0 <_sbrk_r+0x1c>)
 8008cd8:	2300      	movs	r3, #0
 8008cda:	4604      	mov	r4, r0
 8008cdc:	4608      	mov	r0, r1
 8008cde:	602b      	str	r3, [r5, #0]
 8008ce0:	f7f8 fe80 	bl	80019e4 <_sbrk>
 8008ce4:	1c43      	adds	r3, r0, #1
 8008ce6:	d102      	bne.n	8008cee <_sbrk_r+0x1a>
 8008ce8:	682b      	ldr	r3, [r5, #0]
 8008cea:	b103      	cbz	r3, 8008cee <_sbrk_r+0x1a>
 8008cec:	6023      	str	r3, [r4, #0]
 8008cee:	bd38      	pop	{r3, r4, r5, pc}
 8008cf0:	200069c8 	.word	0x200069c8

08008cf4 <__sread>:
 8008cf4:	b510      	push	{r4, lr}
 8008cf6:	460c      	mov	r4, r1
 8008cf8:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8008cfc:	f000 fab2 	bl	8009264 <_read_r>
 8008d00:	2800      	cmp	r0, #0
 8008d02:	bfab      	itete	ge
 8008d04:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 8008d06:	89a3      	ldrhlt	r3, [r4, #12]
 8008d08:	181b      	addge	r3, r3, r0
 8008d0a:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 8008d0e:	bfac      	ite	ge
 8008d10:	6563      	strge	r3, [r4, #84]	; 0x54
 8008d12:	81a3      	strhlt	r3, [r4, #12]
 8008d14:	bd10      	pop	{r4, pc}

08008d16 <__swrite>:
 8008d16:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8008d1a:	461f      	mov	r7, r3
 8008d1c:	898b      	ldrh	r3, [r1, #12]
 8008d1e:	05db      	lsls	r3, r3, #23
 8008d20:	4605      	mov	r5, r0
 8008d22:	460c      	mov	r4, r1
 8008d24:	4616      	mov	r6, r2
 8008d26:	d505      	bpl.n	8008d34 <__swrite+0x1e>
 8008d28:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8008d2c:	2302      	movs	r3, #2
 8008d2e:	2200      	movs	r2, #0
 8008d30:	f000 f9c8 	bl	80090c4 <_lseek_r>
 8008d34:	89a3      	ldrh	r3, [r4, #12]
 8008d36:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8008d3a:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8008d3e:	81a3      	strh	r3, [r4, #12]
 8008d40:	4632      	mov	r2, r6
 8008d42:	463b      	mov	r3, r7
 8008d44:	4628      	mov	r0, r5
 8008d46:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8008d4a:	f000 b869 	b.w	8008e20 <_write_r>

08008d4e <__sseek>:
 8008d4e:	b510      	push	{r4, lr}
 8008d50:	460c      	mov	r4, r1
 8008d52:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8008d56:	f000 f9b5 	bl	80090c4 <_lseek_r>
 8008d5a:	1c43      	adds	r3, r0, #1
 8008d5c:	89a3      	ldrh	r3, [r4, #12]
 8008d5e:	bf15      	itete	ne
 8008d60:	6560      	strne	r0, [r4, #84]	; 0x54
 8008d62:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 8008d66:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 8008d6a:	81a3      	strheq	r3, [r4, #12]
 8008d6c:	bf18      	it	ne
 8008d6e:	81a3      	strhne	r3, [r4, #12]
 8008d70:	bd10      	pop	{r4, pc}

08008d72 <__sclose>:
 8008d72:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8008d76:	f000 b8d3 	b.w	8008f20 <_close_r>
	...

08008d7c <__swbuf_r>:
 8008d7c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8008d7e:	460e      	mov	r6, r1
 8008d80:	4614      	mov	r4, r2
 8008d82:	4605      	mov	r5, r0
 8008d84:	b118      	cbz	r0, 8008d8e <__swbuf_r+0x12>
 8008d86:	6983      	ldr	r3, [r0, #24]
 8008d88:	b90b      	cbnz	r3, 8008d8e <__swbuf_r+0x12>
 8008d8a:	f7ff fb81 	bl	8008490 <__sinit>
 8008d8e:	4b21      	ldr	r3, [pc, #132]	; (8008e14 <__swbuf_r+0x98>)
 8008d90:	429c      	cmp	r4, r3
 8008d92:	d12b      	bne.n	8008dec <__swbuf_r+0x70>
 8008d94:	686c      	ldr	r4, [r5, #4]
 8008d96:	69a3      	ldr	r3, [r4, #24]
 8008d98:	60a3      	str	r3, [r4, #8]
 8008d9a:	89a3      	ldrh	r3, [r4, #12]
 8008d9c:	071a      	lsls	r2, r3, #28
 8008d9e:	d52f      	bpl.n	8008e00 <__swbuf_r+0x84>
 8008da0:	6923      	ldr	r3, [r4, #16]
 8008da2:	b36b      	cbz	r3, 8008e00 <__swbuf_r+0x84>
 8008da4:	6923      	ldr	r3, [r4, #16]
 8008da6:	6820      	ldr	r0, [r4, #0]
 8008da8:	1ac0      	subs	r0, r0, r3
 8008daa:	6963      	ldr	r3, [r4, #20]
 8008dac:	b2f6      	uxtb	r6, r6
 8008dae:	4283      	cmp	r3, r0
 8008db0:	4637      	mov	r7, r6
 8008db2:	dc04      	bgt.n	8008dbe <__swbuf_r+0x42>
 8008db4:	4621      	mov	r1, r4
 8008db6:	4628      	mov	r0, r5
 8008db8:	f000 f948 	bl	800904c <_fflush_r>
 8008dbc:	bb30      	cbnz	r0, 8008e0c <__swbuf_r+0x90>
 8008dbe:	68a3      	ldr	r3, [r4, #8]
 8008dc0:	3b01      	subs	r3, #1
 8008dc2:	60a3      	str	r3, [r4, #8]
 8008dc4:	6823      	ldr	r3, [r4, #0]
 8008dc6:	1c5a      	adds	r2, r3, #1
 8008dc8:	6022      	str	r2, [r4, #0]
 8008dca:	701e      	strb	r6, [r3, #0]
 8008dcc:	6963      	ldr	r3, [r4, #20]
 8008dce:	3001      	adds	r0, #1
 8008dd0:	4283      	cmp	r3, r0
 8008dd2:	d004      	beq.n	8008dde <__swbuf_r+0x62>
 8008dd4:	89a3      	ldrh	r3, [r4, #12]
 8008dd6:	07db      	lsls	r3, r3, #31
 8008dd8:	d506      	bpl.n	8008de8 <__swbuf_r+0x6c>
 8008dda:	2e0a      	cmp	r6, #10
 8008ddc:	d104      	bne.n	8008de8 <__swbuf_r+0x6c>
 8008dde:	4621      	mov	r1, r4
 8008de0:	4628      	mov	r0, r5
 8008de2:	f000 f933 	bl	800904c <_fflush_r>
 8008de6:	b988      	cbnz	r0, 8008e0c <__swbuf_r+0x90>
 8008de8:	4638      	mov	r0, r7
 8008dea:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8008dec:	4b0a      	ldr	r3, [pc, #40]	; (8008e18 <__swbuf_r+0x9c>)
 8008dee:	429c      	cmp	r4, r3
 8008df0:	d101      	bne.n	8008df6 <__swbuf_r+0x7a>
 8008df2:	68ac      	ldr	r4, [r5, #8]
 8008df4:	e7cf      	b.n	8008d96 <__swbuf_r+0x1a>
 8008df6:	4b09      	ldr	r3, [pc, #36]	; (8008e1c <__swbuf_r+0xa0>)
 8008df8:	429c      	cmp	r4, r3
 8008dfa:	bf08      	it	eq
 8008dfc:	68ec      	ldreq	r4, [r5, #12]
 8008dfe:	e7ca      	b.n	8008d96 <__swbuf_r+0x1a>
 8008e00:	4621      	mov	r1, r4
 8008e02:	4628      	mov	r0, r5
 8008e04:	f000 f81e 	bl	8008e44 <__swsetup_r>
 8008e08:	2800      	cmp	r0, #0
 8008e0a:	d0cb      	beq.n	8008da4 <__swbuf_r+0x28>
 8008e0c:	f04f 37ff 	mov.w	r7, #4294967295
 8008e10:	e7ea      	b.n	8008de8 <__swbuf_r+0x6c>
 8008e12:	bf00      	nop
 8008e14:	0800954c 	.word	0x0800954c
 8008e18:	0800956c 	.word	0x0800956c
 8008e1c:	0800952c 	.word	0x0800952c

08008e20 <_write_r>:
 8008e20:	b538      	push	{r3, r4, r5, lr}
 8008e22:	4d07      	ldr	r5, [pc, #28]	; (8008e40 <_write_r+0x20>)
 8008e24:	4604      	mov	r4, r0
 8008e26:	4608      	mov	r0, r1
 8008e28:	4611      	mov	r1, r2
 8008e2a:	2200      	movs	r2, #0
 8008e2c:	602a      	str	r2, [r5, #0]
 8008e2e:	461a      	mov	r2, r3
 8008e30:	f7f7 fd1c 	bl	800086c <_write>
 8008e34:	1c43      	adds	r3, r0, #1
 8008e36:	d102      	bne.n	8008e3e <_write_r+0x1e>
 8008e38:	682b      	ldr	r3, [r5, #0]
 8008e3a:	b103      	cbz	r3, 8008e3e <_write_r+0x1e>
 8008e3c:	6023      	str	r3, [r4, #0]
 8008e3e:	bd38      	pop	{r3, r4, r5, pc}
 8008e40:	200069c8 	.word	0x200069c8

08008e44 <__swsetup_r>:
 8008e44:	4b32      	ldr	r3, [pc, #200]	; (8008f10 <__swsetup_r+0xcc>)
 8008e46:	b570      	push	{r4, r5, r6, lr}
 8008e48:	681d      	ldr	r5, [r3, #0]
 8008e4a:	4606      	mov	r6, r0
 8008e4c:	460c      	mov	r4, r1
 8008e4e:	b125      	cbz	r5, 8008e5a <__swsetup_r+0x16>
 8008e50:	69ab      	ldr	r3, [r5, #24]
 8008e52:	b913      	cbnz	r3, 8008e5a <__swsetup_r+0x16>
 8008e54:	4628      	mov	r0, r5
 8008e56:	f7ff fb1b 	bl	8008490 <__sinit>
 8008e5a:	4b2e      	ldr	r3, [pc, #184]	; (8008f14 <__swsetup_r+0xd0>)
 8008e5c:	429c      	cmp	r4, r3
 8008e5e:	d10f      	bne.n	8008e80 <__swsetup_r+0x3c>
 8008e60:	686c      	ldr	r4, [r5, #4]
 8008e62:	89a3      	ldrh	r3, [r4, #12]
 8008e64:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 8008e68:	0719      	lsls	r1, r3, #28
 8008e6a:	d42c      	bmi.n	8008ec6 <__swsetup_r+0x82>
 8008e6c:	06dd      	lsls	r5, r3, #27
 8008e6e:	d411      	bmi.n	8008e94 <__swsetup_r+0x50>
 8008e70:	2309      	movs	r3, #9
 8008e72:	6033      	str	r3, [r6, #0]
 8008e74:	f042 0340 	orr.w	r3, r2, #64	; 0x40
 8008e78:	81a3      	strh	r3, [r4, #12]
 8008e7a:	f04f 30ff 	mov.w	r0, #4294967295
 8008e7e:	e03e      	b.n	8008efe <__swsetup_r+0xba>
 8008e80:	4b25      	ldr	r3, [pc, #148]	; (8008f18 <__swsetup_r+0xd4>)
 8008e82:	429c      	cmp	r4, r3
 8008e84:	d101      	bne.n	8008e8a <__swsetup_r+0x46>
 8008e86:	68ac      	ldr	r4, [r5, #8]
 8008e88:	e7eb      	b.n	8008e62 <__swsetup_r+0x1e>
 8008e8a:	4b24      	ldr	r3, [pc, #144]	; (8008f1c <__swsetup_r+0xd8>)
 8008e8c:	429c      	cmp	r4, r3
 8008e8e:	bf08      	it	eq
 8008e90:	68ec      	ldreq	r4, [r5, #12]
 8008e92:	e7e6      	b.n	8008e62 <__swsetup_r+0x1e>
 8008e94:	0758      	lsls	r0, r3, #29
 8008e96:	d512      	bpl.n	8008ebe <__swsetup_r+0x7a>
 8008e98:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8008e9a:	b141      	cbz	r1, 8008eae <__swsetup_r+0x6a>
 8008e9c:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8008ea0:	4299      	cmp	r1, r3
 8008ea2:	d002      	beq.n	8008eaa <__swsetup_r+0x66>
 8008ea4:	4630      	mov	r0, r6
 8008ea6:	f000 f991 	bl	80091cc <_free_r>
 8008eaa:	2300      	movs	r3, #0
 8008eac:	6363      	str	r3, [r4, #52]	; 0x34
 8008eae:	89a3      	ldrh	r3, [r4, #12]
 8008eb0:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 8008eb4:	81a3      	strh	r3, [r4, #12]
 8008eb6:	2300      	movs	r3, #0
 8008eb8:	6063      	str	r3, [r4, #4]
 8008eba:	6923      	ldr	r3, [r4, #16]
 8008ebc:	6023      	str	r3, [r4, #0]
 8008ebe:	89a3      	ldrh	r3, [r4, #12]
 8008ec0:	f043 0308 	orr.w	r3, r3, #8
 8008ec4:	81a3      	strh	r3, [r4, #12]
 8008ec6:	6923      	ldr	r3, [r4, #16]
 8008ec8:	b94b      	cbnz	r3, 8008ede <__swsetup_r+0x9a>
 8008eca:	89a3      	ldrh	r3, [r4, #12]
 8008ecc:	f403 7320 	and.w	r3, r3, #640	; 0x280
 8008ed0:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8008ed4:	d003      	beq.n	8008ede <__swsetup_r+0x9a>
 8008ed6:	4621      	mov	r1, r4
 8008ed8:	4630      	mov	r0, r6
 8008eda:	f000 f92b 	bl	8009134 <__smakebuf_r>
 8008ede:	89a0      	ldrh	r0, [r4, #12]
 8008ee0:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 8008ee4:	f010 0301 	ands.w	r3, r0, #1
 8008ee8:	d00a      	beq.n	8008f00 <__swsetup_r+0xbc>
 8008eea:	2300      	movs	r3, #0
 8008eec:	60a3      	str	r3, [r4, #8]
 8008eee:	6963      	ldr	r3, [r4, #20]
 8008ef0:	425b      	negs	r3, r3
 8008ef2:	61a3      	str	r3, [r4, #24]
 8008ef4:	6923      	ldr	r3, [r4, #16]
 8008ef6:	b943      	cbnz	r3, 8008f0a <__swsetup_r+0xc6>
 8008ef8:	f010 0080 	ands.w	r0, r0, #128	; 0x80
 8008efc:	d1ba      	bne.n	8008e74 <__swsetup_r+0x30>
 8008efe:	bd70      	pop	{r4, r5, r6, pc}
 8008f00:	0781      	lsls	r1, r0, #30
 8008f02:	bf58      	it	pl
 8008f04:	6963      	ldrpl	r3, [r4, #20]
 8008f06:	60a3      	str	r3, [r4, #8]
 8008f08:	e7f4      	b.n	8008ef4 <__swsetup_r+0xb0>
 8008f0a:	2000      	movs	r0, #0
 8008f0c:	e7f7      	b.n	8008efe <__swsetup_r+0xba>
 8008f0e:	bf00      	nop
 8008f10:	20000010 	.word	0x20000010
 8008f14:	0800954c 	.word	0x0800954c
 8008f18:	0800956c 	.word	0x0800956c
 8008f1c:	0800952c 	.word	0x0800952c

08008f20 <_close_r>:
 8008f20:	b538      	push	{r3, r4, r5, lr}
 8008f22:	4d06      	ldr	r5, [pc, #24]	; (8008f3c <_close_r+0x1c>)
 8008f24:	2300      	movs	r3, #0
 8008f26:	4604      	mov	r4, r0
 8008f28:	4608      	mov	r0, r1
 8008f2a:	602b      	str	r3, [r5, #0]
 8008f2c:	f7f8 fd25 	bl	800197a <_close>
 8008f30:	1c43      	adds	r3, r0, #1
 8008f32:	d102      	bne.n	8008f3a <_close_r+0x1a>
 8008f34:	682b      	ldr	r3, [r5, #0]
 8008f36:	b103      	cbz	r3, 8008f3a <_close_r+0x1a>
 8008f38:	6023      	str	r3, [r4, #0]
 8008f3a:	bd38      	pop	{r3, r4, r5, pc}
 8008f3c:	200069c8 	.word	0x200069c8

08008f40 <__sflush_r>:
 8008f40:	898a      	ldrh	r2, [r1, #12]
 8008f42:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8008f46:	4605      	mov	r5, r0
 8008f48:	0710      	lsls	r0, r2, #28
 8008f4a:	460c      	mov	r4, r1
 8008f4c:	d458      	bmi.n	8009000 <__sflush_r+0xc0>
 8008f4e:	684b      	ldr	r3, [r1, #4]
 8008f50:	2b00      	cmp	r3, #0
 8008f52:	dc05      	bgt.n	8008f60 <__sflush_r+0x20>
 8008f54:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 8008f56:	2b00      	cmp	r3, #0
 8008f58:	dc02      	bgt.n	8008f60 <__sflush_r+0x20>
 8008f5a:	2000      	movs	r0, #0
 8008f5c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8008f60:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 8008f62:	2e00      	cmp	r6, #0
 8008f64:	d0f9      	beq.n	8008f5a <__sflush_r+0x1a>
 8008f66:	2300      	movs	r3, #0
 8008f68:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 8008f6c:	682f      	ldr	r7, [r5, #0]
 8008f6e:	602b      	str	r3, [r5, #0]
 8008f70:	d032      	beq.n	8008fd8 <__sflush_r+0x98>
 8008f72:	6d60      	ldr	r0, [r4, #84]	; 0x54
 8008f74:	89a3      	ldrh	r3, [r4, #12]
 8008f76:	075a      	lsls	r2, r3, #29
 8008f78:	d505      	bpl.n	8008f86 <__sflush_r+0x46>
 8008f7a:	6863      	ldr	r3, [r4, #4]
 8008f7c:	1ac0      	subs	r0, r0, r3
 8008f7e:	6b63      	ldr	r3, [r4, #52]	; 0x34
 8008f80:	b10b      	cbz	r3, 8008f86 <__sflush_r+0x46>
 8008f82:	6c23      	ldr	r3, [r4, #64]	; 0x40
 8008f84:	1ac0      	subs	r0, r0, r3
 8008f86:	2300      	movs	r3, #0
 8008f88:	4602      	mov	r2, r0
 8008f8a:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 8008f8c:	6a21      	ldr	r1, [r4, #32]
 8008f8e:	4628      	mov	r0, r5
 8008f90:	47b0      	blx	r6
 8008f92:	1c43      	adds	r3, r0, #1
 8008f94:	89a3      	ldrh	r3, [r4, #12]
 8008f96:	d106      	bne.n	8008fa6 <__sflush_r+0x66>
 8008f98:	6829      	ldr	r1, [r5, #0]
 8008f9a:	291d      	cmp	r1, #29
 8008f9c:	d82c      	bhi.n	8008ff8 <__sflush_r+0xb8>
 8008f9e:	4a2a      	ldr	r2, [pc, #168]	; (8009048 <__sflush_r+0x108>)
 8008fa0:	40ca      	lsrs	r2, r1
 8008fa2:	07d6      	lsls	r6, r2, #31
 8008fa4:	d528      	bpl.n	8008ff8 <__sflush_r+0xb8>
 8008fa6:	2200      	movs	r2, #0
 8008fa8:	6062      	str	r2, [r4, #4]
 8008faa:	04d9      	lsls	r1, r3, #19
 8008fac:	6922      	ldr	r2, [r4, #16]
 8008fae:	6022      	str	r2, [r4, #0]
 8008fb0:	d504      	bpl.n	8008fbc <__sflush_r+0x7c>
 8008fb2:	1c42      	adds	r2, r0, #1
 8008fb4:	d101      	bne.n	8008fba <__sflush_r+0x7a>
 8008fb6:	682b      	ldr	r3, [r5, #0]
 8008fb8:	b903      	cbnz	r3, 8008fbc <__sflush_r+0x7c>
 8008fba:	6560      	str	r0, [r4, #84]	; 0x54
 8008fbc:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8008fbe:	602f      	str	r7, [r5, #0]
 8008fc0:	2900      	cmp	r1, #0
 8008fc2:	d0ca      	beq.n	8008f5a <__sflush_r+0x1a>
 8008fc4:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8008fc8:	4299      	cmp	r1, r3
 8008fca:	d002      	beq.n	8008fd2 <__sflush_r+0x92>
 8008fcc:	4628      	mov	r0, r5
 8008fce:	f000 f8fd 	bl	80091cc <_free_r>
 8008fd2:	2000      	movs	r0, #0
 8008fd4:	6360      	str	r0, [r4, #52]	; 0x34
 8008fd6:	e7c1      	b.n	8008f5c <__sflush_r+0x1c>
 8008fd8:	6a21      	ldr	r1, [r4, #32]
 8008fda:	2301      	movs	r3, #1
 8008fdc:	4628      	mov	r0, r5
 8008fde:	47b0      	blx	r6
 8008fe0:	1c41      	adds	r1, r0, #1
 8008fe2:	d1c7      	bne.n	8008f74 <__sflush_r+0x34>
 8008fe4:	682b      	ldr	r3, [r5, #0]
 8008fe6:	2b00      	cmp	r3, #0
 8008fe8:	d0c4      	beq.n	8008f74 <__sflush_r+0x34>
 8008fea:	2b1d      	cmp	r3, #29
 8008fec:	d001      	beq.n	8008ff2 <__sflush_r+0xb2>
 8008fee:	2b16      	cmp	r3, #22
 8008ff0:	d101      	bne.n	8008ff6 <__sflush_r+0xb6>
 8008ff2:	602f      	str	r7, [r5, #0]
 8008ff4:	e7b1      	b.n	8008f5a <__sflush_r+0x1a>
 8008ff6:	89a3      	ldrh	r3, [r4, #12]
 8008ff8:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8008ffc:	81a3      	strh	r3, [r4, #12]
 8008ffe:	e7ad      	b.n	8008f5c <__sflush_r+0x1c>
 8009000:	690f      	ldr	r7, [r1, #16]
 8009002:	2f00      	cmp	r7, #0
 8009004:	d0a9      	beq.n	8008f5a <__sflush_r+0x1a>
 8009006:	0793      	lsls	r3, r2, #30
 8009008:	680e      	ldr	r6, [r1, #0]
 800900a:	bf08      	it	eq
 800900c:	694b      	ldreq	r3, [r1, #20]
 800900e:	600f      	str	r7, [r1, #0]
 8009010:	bf18      	it	ne
 8009012:	2300      	movne	r3, #0
 8009014:	eba6 0807 	sub.w	r8, r6, r7
 8009018:	608b      	str	r3, [r1, #8]
 800901a:	f1b8 0f00 	cmp.w	r8, #0
 800901e:	dd9c      	ble.n	8008f5a <__sflush_r+0x1a>
 8009020:	6a21      	ldr	r1, [r4, #32]
 8009022:	6aa6      	ldr	r6, [r4, #40]	; 0x28
 8009024:	4643      	mov	r3, r8
 8009026:	463a      	mov	r2, r7
 8009028:	4628      	mov	r0, r5
 800902a:	47b0      	blx	r6
 800902c:	2800      	cmp	r0, #0
 800902e:	dc06      	bgt.n	800903e <__sflush_r+0xfe>
 8009030:	89a3      	ldrh	r3, [r4, #12]
 8009032:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8009036:	81a3      	strh	r3, [r4, #12]
 8009038:	f04f 30ff 	mov.w	r0, #4294967295
 800903c:	e78e      	b.n	8008f5c <__sflush_r+0x1c>
 800903e:	4407      	add	r7, r0
 8009040:	eba8 0800 	sub.w	r8, r8, r0
 8009044:	e7e9      	b.n	800901a <__sflush_r+0xda>
 8009046:	bf00      	nop
 8009048:	20400001 	.word	0x20400001

0800904c <_fflush_r>:
 800904c:	b538      	push	{r3, r4, r5, lr}
 800904e:	690b      	ldr	r3, [r1, #16]
 8009050:	4605      	mov	r5, r0
 8009052:	460c      	mov	r4, r1
 8009054:	b913      	cbnz	r3, 800905c <_fflush_r+0x10>
 8009056:	2500      	movs	r5, #0
 8009058:	4628      	mov	r0, r5
 800905a:	bd38      	pop	{r3, r4, r5, pc}
 800905c:	b118      	cbz	r0, 8009066 <_fflush_r+0x1a>
 800905e:	6983      	ldr	r3, [r0, #24]
 8009060:	b90b      	cbnz	r3, 8009066 <_fflush_r+0x1a>
 8009062:	f7ff fa15 	bl	8008490 <__sinit>
 8009066:	4b14      	ldr	r3, [pc, #80]	; (80090b8 <_fflush_r+0x6c>)
 8009068:	429c      	cmp	r4, r3
 800906a:	d11b      	bne.n	80090a4 <_fflush_r+0x58>
 800906c:	686c      	ldr	r4, [r5, #4]
 800906e:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8009072:	2b00      	cmp	r3, #0
 8009074:	d0ef      	beq.n	8009056 <_fflush_r+0xa>
 8009076:	6e62      	ldr	r2, [r4, #100]	; 0x64
 8009078:	07d0      	lsls	r0, r2, #31
 800907a:	d404      	bmi.n	8009086 <_fflush_r+0x3a>
 800907c:	0599      	lsls	r1, r3, #22
 800907e:	d402      	bmi.n	8009086 <_fflush_r+0x3a>
 8009080:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8009082:	f7ff faa3 	bl	80085cc <__retarget_lock_acquire_recursive>
 8009086:	4628      	mov	r0, r5
 8009088:	4621      	mov	r1, r4
 800908a:	f7ff ff59 	bl	8008f40 <__sflush_r>
 800908e:	6e63      	ldr	r3, [r4, #100]	; 0x64
 8009090:	07da      	lsls	r2, r3, #31
 8009092:	4605      	mov	r5, r0
 8009094:	d4e0      	bmi.n	8009058 <_fflush_r+0xc>
 8009096:	89a3      	ldrh	r3, [r4, #12]
 8009098:	059b      	lsls	r3, r3, #22
 800909a:	d4dd      	bmi.n	8009058 <_fflush_r+0xc>
 800909c:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800909e:	f7ff fa96 	bl	80085ce <__retarget_lock_release_recursive>
 80090a2:	e7d9      	b.n	8009058 <_fflush_r+0xc>
 80090a4:	4b05      	ldr	r3, [pc, #20]	; (80090bc <_fflush_r+0x70>)
 80090a6:	429c      	cmp	r4, r3
 80090a8:	d101      	bne.n	80090ae <_fflush_r+0x62>
 80090aa:	68ac      	ldr	r4, [r5, #8]
 80090ac:	e7df      	b.n	800906e <_fflush_r+0x22>
 80090ae:	4b04      	ldr	r3, [pc, #16]	; (80090c0 <_fflush_r+0x74>)
 80090b0:	429c      	cmp	r4, r3
 80090b2:	bf08      	it	eq
 80090b4:	68ec      	ldreq	r4, [r5, #12]
 80090b6:	e7da      	b.n	800906e <_fflush_r+0x22>
 80090b8:	0800954c 	.word	0x0800954c
 80090bc:	0800956c 	.word	0x0800956c
 80090c0:	0800952c 	.word	0x0800952c

080090c4 <_lseek_r>:
 80090c4:	b538      	push	{r3, r4, r5, lr}
 80090c6:	4d07      	ldr	r5, [pc, #28]	; (80090e4 <_lseek_r+0x20>)
 80090c8:	4604      	mov	r4, r0
 80090ca:	4608      	mov	r0, r1
 80090cc:	4611      	mov	r1, r2
 80090ce:	2200      	movs	r2, #0
 80090d0:	602a      	str	r2, [r5, #0]
 80090d2:	461a      	mov	r2, r3
 80090d4:	f7f8 fc78 	bl	80019c8 <_lseek>
 80090d8:	1c43      	adds	r3, r0, #1
 80090da:	d102      	bne.n	80090e2 <_lseek_r+0x1e>
 80090dc:	682b      	ldr	r3, [r5, #0]
 80090de:	b103      	cbz	r3, 80090e2 <_lseek_r+0x1e>
 80090e0:	6023      	str	r3, [r4, #0]
 80090e2:	bd38      	pop	{r3, r4, r5, pc}
 80090e4:	200069c8 	.word	0x200069c8

080090e8 <__swhatbuf_r>:
 80090e8:	b570      	push	{r4, r5, r6, lr}
 80090ea:	460e      	mov	r6, r1
 80090ec:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80090f0:	2900      	cmp	r1, #0
 80090f2:	b096      	sub	sp, #88	; 0x58
 80090f4:	4614      	mov	r4, r2
 80090f6:	461d      	mov	r5, r3
 80090f8:	da08      	bge.n	800910c <__swhatbuf_r+0x24>
 80090fa:	f9b6 300c 	ldrsh.w	r3, [r6, #12]
 80090fe:	2200      	movs	r2, #0
 8009100:	602a      	str	r2, [r5, #0]
 8009102:	061a      	lsls	r2, r3, #24
 8009104:	d410      	bmi.n	8009128 <__swhatbuf_r+0x40>
 8009106:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800910a:	e00e      	b.n	800912a <__swhatbuf_r+0x42>
 800910c:	466a      	mov	r2, sp
 800910e:	f000 f8bb 	bl	8009288 <_fstat_r>
 8009112:	2800      	cmp	r0, #0
 8009114:	dbf1      	blt.n	80090fa <__swhatbuf_r+0x12>
 8009116:	9a01      	ldr	r2, [sp, #4]
 8009118:	f402 4270 	and.w	r2, r2, #61440	; 0xf000
 800911c:	f5a2 5300 	sub.w	r3, r2, #8192	; 0x2000
 8009120:	425a      	negs	r2, r3
 8009122:	415a      	adcs	r2, r3
 8009124:	602a      	str	r2, [r5, #0]
 8009126:	e7ee      	b.n	8009106 <__swhatbuf_r+0x1e>
 8009128:	2340      	movs	r3, #64	; 0x40
 800912a:	2000      	movs	r0, #0
 800912c:	6023      	str	r3, [r4, #0]
 800912e:	b016      	add	sp, #88	; 0x58
 8009130:	bd70      	pop	{r4, r5, r6, pc}
	...

08009134 <__smakebuf_r>:
 8009134:	898b      	ldrh	r3, [r1, #12]
 8009136:	b573      	push	{r0, r1, r4, r5, r6, lr}
 8009138:	079d      	lsls	r5, r3, #30
 800913a:	4606      	mov	r6, r0
 800913c:	460c      	mov	r4, r1
 800913e:	d507      	bpl.n	8009150 <__smakebuf_r+0x1c>
 8009140:	f104 0347 	add.w	r3, r4, #71	; 0x47
 8009144:	6023      	str	r3, [r4, #0]
 8009146:	6123      	str	r3, [r4, #16]
 8009148:	2301      	movs	r3, #1
 800914a:	6163      	str	r3, [r4, #20]
 800914c:	b002      	add	sp, #8
 800914e:	bd70      	pop	{r4, r5, r6, pc}
 8009150:	ab01      	add	r3, sp, #4
 8009152:	466a      	mov	r2, sp
 8009154:	f7ff ffc8 	bl	80090e8 <__swhatbuf_r>
 8009158:	9900      	ldr	r1, [sp, #0]
 800915a:	4605      	mov	r5, r0
 800915c:	4630      	mov	r0, r6
 800915e:	f7ff fa57 	bl	8008610 <_malloc_r>
 8009162:	b948      	cbnz	r0, 8009178 <__smakebuf_r+0x44>
 8009164:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8009168:	059a      	lsls	r2, r3, #22
 800916a:	d4ef      	bmi.n	800914c <__smakebuf_r+0x18>
 800916c:	f023 0303 	bic.w	r3, r3, #3
 8009170:	f043 0302 	orr.w	r3, r3, #2
 8009174:	81a3      	strh	r3, [r4, #12]
 8009176:	e7e3      	b.n	8009140 <__smakebuf_r+0xc>
 8009178:	4b0d      	ldr	r3, [pc, #52]	; (80091b0 <__smakebuf_r+0x7c>)
 800917a:	62b3      	str	r3, [r6, #40]	; 0x28
 800917c:	89a3      	ldrh	r3, [r4, #12]
 800917e:	6020      	str	r0, [r4, #0]
 8009180:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8009184:	81a3      	strh	r3, [r4, #12]
 8009186:	9b00      	ldr	r3, [sp, #0]
 8009188:	6163      	str	r3, [r4, #20]
 800918a:	9b01      	ldr	r3, [sp, #4]
 800918c:	6120      	str	r0, [r4, #16]
 800918e:	b15b      	cbz	r3, 80091a8 <__smakebuf_r+0x74>
 8009190:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8009194:	4630      	mov	r0, r6
 8009196:	f000 f889 	bl	80092ac <_isatty_r>
 800919a:	b128      	cbz	r0, 80091a8 <__smakebuf_r+0x74>
 800919c:	89a3      	ldrh	r3, [r4, #12]
 800919e:	f023 0303 	bic.w	r3, r3, #3
 80091a2:	f043 0301 	orr.w	r3, r3, #1
 80091a6:	81a3      	strh	r3, [r4, #12]
 80091a8:	89a0      	ldrh	r0, [r4, #12]
 80091aa:	4305      	orrs	r5, r0
 80091ac:	81a5      	strh	r5, [r4, #12]
 80091ae:	e7cd      	b.n	800914c <__smakebuf_r+0x18>
 80091b0:	08008429 	.word	0x08008429

080091b4 <__malloc_lock>:
 80091b4:	4801      	ldr	r0, [pc, #4]	; (80091bc <__malloc_lock+0x8>)
 80091b6:	f7ff ba09 	b.w	80085cc <__retarget_lock_acquire_recursive>
 80091ba:	bf00      	nop
 80091bc:	200069bc 	.word	0x200069bc

080091c0 <__malloc_unlock>:
 80091c0:	4801      	ldr	r0, [pc, #4]	; (80091c8 <__malloc_unlock+0x8>)
 80091c2:	f7ff ba04 	b.w	80085ce <__retarget_lock_release_recursive>
 80091c6:	bf00      	nop
 80091c8:	200069bc 	.word	0x200069bc

080091cc <_free_r>:
 80091cc:	b537      	push	{r0, r1, r2, r4, r5, lr}
 80091ce:	2900      	cmp	r1, #0
 80091d0:	d044      	beq.n	800925c <_free_r+0x90>
 80091d2:	f851 3c04 	ldr.w	r3, [r1, #-4]
 80091d6:	9001      	str	r0, [sp, #4]
 80091d8:	2b00      	cmp	r3, #0
 80091da:	f1a1 0404 	sub.w	r4, r1, #4
 80091de:	bfb8      	it	lt
 80091e0:	18e4      	addlt	r4, r4, r3
 80091e2:	f7ff ffe7 	bl	80091b4 <__malloc_lock>
 80091e6:	4a1e      	ldr	r2, [pc, #120]	; (8009260 <_free_r+0x94>)
 80091e8:	9801      	ldr	r0, [sp, #4]
 80091ea:	6813      	ldr	r3, [r2, #0]
 80091ec:	b933      	cbnz	r3, 80091fc <_free_r+0x30>
 80091ee:	6063      	str	r3, [r4, #4]
 80091f0:	6014      	str	r4, [r2, #0]
 80091f2:	b003      	add	sp, #12
 80091f4:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 80091f8:	f7ff bfe2 	b.w	80091c0 <__malloc_unlock>
 80091fc:	42a3      	cmp	r3, r4
 80091fe:	d908      	bls.n	8009212 <_free_r+0x46>
 8009200:	6825      	ldr	r5, [r4, #0]
 8009202:	1961      	adds	r1, r4, r5
 8009204:	428b      	cmp	r3, r1
 8009206:	bf01      	itttt	eq
 8009208:	6819      	ldreq	r1, [r3, #0]
 800920a:	685b      	ldreq	r3, [r3, #4]
 800920c:	1949      	addeq	r1, r1, r5
 800920e:	6021      	streq	r1, [r4, #0]
 8009210:	e7ed      	b.n	80091ee <_free_r+0x22>
 8009212:	461a      	mov	r2, r3
 8009214:	685b      	ldr	r3, [r3, #4]
 8009216:	b10b      	cbz	r3, 800921c <_free_r+0x50>
 8009218:	42a3      	cmp	r3, r4
 800921a:	d9fa      	bls.n	8009212 <_free_r+0x46>
 800921c:	6811      	ldr	r1, [r2, #0]
 800921e:	1855      	adds	r5, r2, r1
 8009220:	42a5      	cmp	r5, r4
 8009222:	d10b      	bne.n	800923c <_free_r+0x70>
 8009224:	6824      	ldr	r4, [r4, #0]
 8009226:	4421      	add	r1, r4
 8009228:	1854      	adds	r4, r2, r1
 800922a:	42a3      	cmp	r3, r4
 800922c:	6011      	str	r1, [r2, #0]
 800922e:	d1e0      	bne.n	80091f2 <_free_r+0x26>
 8009230:	681c      	ldr	r4, [r3, #0]
 8009232:	685b      	ldr	r3, [r3, #4]
 8009234:	6053      	str	r3, [r2, #4]
 8009236:	4421      	add	r1, r4
 8009238:	6011      	str	r1, [r2, #0]
 800923a:	e7da      	b.n	80091f2 <_free_r+0x26>
 800923c:	d902      	bls.n	8009244 <_free_r+0x78>
 800923e:	230c      	movs	r3, #12
 8009240:	6003      	str	r3, [r0, #0]
 8009242:	e7d6      	b.n	80091f2 <_free_r+0x26>
 8009244:	6825      	ldr	r5, [r4, #0]
 8009246:	1961      	adds	r1, r4, r5
 8009248:	428b      	cmp	r3, r1
 800924a:	bf04      	itt	eq
 800924c:	6819      	ldreq	r1, [r3, #0]
 800924e:	685b      	ldreq	r3, [r3, #4]
 8009250:	6063      	str	r3, [r4, #4]
 8009252:	bf04      	itt	eq
 8009254:	1949      	addeq	r1, r1, r5
 8009256:	6021      	streq	r1, [r4, #0]
 8009258:	6054      	str	r4, [r2, #4]
 800925a:	e7ca      	b.n	80091f2 <_free_r+0x26>
 800925c:	b003      	add	sp, #12
 800925e:	bd30      	pop	{r4, r5, pc}
 8009260:	200069c0 	.word	0x200069c0

08009264 <_read_r>:
 8009264:	b538      	push	{r3, r4, r5, lr}
 8009266:	4d07      	ldr	r5, [pc, #28]	; (8009284 <_read_r+0x20>)
 8009268:	4604      	mov	r4, r0
 800926a:	4608      	mov	r0, r1
 800926c:	4611      	mov	r1, r2
 800926e:	2200      	movs	r2, #0
 8009270:	602a      	str	r2, [r5, #0]
 8009272:	461a      	mov	r2, r3
 8009274:	f7f8 fb64 	bl	8001940 <_read>
 8009278:	1c43      	adds	r3, r0, #1
 800927a:	d102      	bne.n	8009282 <_read_r+0x1e>
 800927c:	682b      	ldr	r3, [r5, #0]
 800927e:	b103      	cbz	r3, 8009282 <_read_r+0x1e>
 8009280:	6023      	str	r3, [r4, #0]
 8009282:	bd38      	pop	{r3, r4, r5, pc}
 8009284:	200069c8 	.word	0x200069c8

08009288 <_fstat_r>:
 8009288:	b538      	push	{r3, r4, r5, lr}
 800928a:	4d07      	ldr	r5, [pc, #28]	; (80092a8 <_fstat_r+0x20>)
 800928c:	2300      	movs	r3, #0
 800928e:	4604      	mov	r4, r0
 8009290:	4608      	mov	r0, r1
 8009292:	4611      	mov	r1, r2
 8009294:	602b      	str	r3, [r5, #0]
 8009296:	f7f8 fb7c 	bl	8001992 <_fstat>
 800929a:	1c43      	adds	r3, r0, #1
 800929c:	d102      	bne.n	80092a4 <_fstat_r+0x1c>
 800929e:	682b      	ldr	r3, [r5, #0]
 80092a0:	b103      	cbz	r3, 80092a4 <_fstat_r+0x1c>
 80092a2:	6023      	str	r3, [r4, #0]
 80092a4:	bd38      	pop	{r3, r4, r5, pc}
 80092a6:	bf00      	nop
 80092a8:	200069c8 	.word	0x200069c8

080092ac <_isatty_r>:
 80092ac:	b538      	push	{r3, r4, r5, lr}
 80092ae:	4d06      	ldr	r5, [pc, #24]	; (80092c8 <_isatty_r+0x1c>)
 80092b0:	2300      	movs	r3, #0
 80092b2:	4604      	mov	r4, r0
 80092b4:	4608      	mov	r0, r1
 80092b6:	602b      	str	r3, [r5, #0]
 80092b8:	f7f8 fb7b 	bl	80019b2 <_isatty>
 80092bc:	1c43      	adds	r3, r0, #1
 80092be:	d102      	bne.n	80092c6 <_isatty_r+0x1a>
 80092c0:	682b      	ldr	r3, [r5, #0]
 80092c2:	b103      	cbz	r3, 80092c6 <_isatty_r+0x1a>
 80092c4:	6023      	str	r3, [r4, #0]
 80092c6:	bd38      	pop	{r3, r4, r5, pc}
 80092c8:	200069c8 	.word	0x200069c8

080092cc <_init>:
 80092cc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80092ce:	bf00      	nop
 80092d0:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80092d2:	bc08      	pop	{r3}
 80092d4:	469e      	mov	lr, r3
 80092d6:	4770      	bx	lr

080092d8 <_fini>:
 80092d8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80092da:	bf00      	nop
 80092dc:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80092de:	bc08      	pop	{r3}
 80092e0:	469e      	mov	lr, r3
 80092e2:	4770      	bx	lr
