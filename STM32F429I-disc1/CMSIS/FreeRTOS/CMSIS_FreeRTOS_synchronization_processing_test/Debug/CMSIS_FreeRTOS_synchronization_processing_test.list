
CMSIS_FreeRTOS_synchronization_processing_test.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001ac  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000b460  080001b0  080001b0  000101b0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000214  0800b610  0800b610  0001b610  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0800b824  0800b824  00020074  2**0
                  CONTENTS
  4 .ARM          00000008  0800b824  0800b824  0001b824  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  0800b82c  0800b82c  00020074  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0800b82c  0800b82c  0001b82c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  0800b830  0800b830  0001b830  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000074  20000000  0800b834  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .ccmram       00000000  10000000  10000000  00020074  2**0
                  CONTENTS
 10 .bss          0000936c  20000074  20000074  00020074  2**2
                  ALLOC
 11 ._user_heap_stack 00000600  200093e0  200093e0  00020074  2**0
                  ALLOC
 12 .ARM.attributes 00000030  00000000  00000000  00020074  2**0
                  CONTENTS, READONLY
 13 .debug_info   0002bb6b  00000000  00000000  000200a4  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 000057e4  00000000  00000000  0004bc0f  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 00002470  00000000  00000000  000513f8  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_ranges 00002250  00000000  00000000  00053868  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  0002af32  00000000  00000000  00055ab8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   0002a18d  00000000  00000000  000809ea  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    000f6ce9  00000000  00000000  000aab77  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .comment      00000050  00000000  00000000  001a1860  2**0
                  CONTENTS, READONLY
 21 .debug_frame  0000a550  00000000  00000000  001a18b0  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001b0 <__do_global_dtors_aux>:
 80001b0:	b510      	push	{r4, lr}
 80001b2:	4c05      	ldr	r4, [pc, #20]	; (80001c8 <__do_global_dtors_aux+0x18>)
 80001b4:	7823      	ldrb	r3, [r4, #0]
 80001b6:	b933      	cbnz	r3, 80001c6 <__do_global_dtors_aux+0x16>
 80001b8:	4b04      	ldr	r3, [pc, #16]	; (80001cc <__do_global_dtors_aux+0x1c>)
 80001ba:	b113      	cbz	r3, 80001c2 <__do_global_dtors_aux+0x12>
 80001bc:	4804      	ldr	r0, [pc, #16]	; (80001d0 <__do_global_dtors_aux+0x20>)
 80001be:	f3af 8000 	nop.w
 80001c2:	2301      	movs	r3, #1
 80001c4:	7023      	strb	r3, [r4, #0]
 80001c6:	bd10      	pop	{r4, pc}
 80001c8:	20000074 	.word	0x20000074
 80001cc:	00000000 	.word	0x00000000
 80001d0:	0800b5f8 	.word	0x0800b5f8

080001d4 <frame_dummy>:
 80001d4:	b508      	push	{r3, lr}
 80001d6:	4b03      	ldr	r3, [pc, #12]	; (80001e4 <frame_dummy+0x10>)
 80001d8:	b11b      	cbz	r3, 80001e2 <frame_dummy+0xe>
 80001da:	4903      	ldr	r1, [pc, #12]	; (80001e8 <frame_dummy+0x14>)
 80001dc:	4803      	ldr	r0, [pc, #12]	; (80001ec <frame_dummy+0x18>)
 80001de:	f3af 8000 	nop.w
 80001e2:	bd08      	pop	{r3, pc}
 80001e4:	00000000 	.word	0x00000000
 80001e8:	20000078 	.word	0x20000078
 80001ec:	0800b5f8 	.word	0x0800b5f8

080001f0 <memchr>:
 80001f0:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 80001f4:	2a10      	cmp	r2, #16
 80001f6:	db2b      	blt.n	8000250 <memchr+0x60>
 80001f8:	f010 0f07 	tst.w	r0, #7
 80001fc:	d008      	beq.n	8000210 <memchr+0x20>
 80001fe:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000202:	3a01      	subs	r2, #1
 8000204:	428b      	cmp	r3, r1
 8000206:	d02d      	beq.n	8000264 <memchr+0x74>
 8000208:	f010 0f07 	tst.w	r0, #7
 800020c:	b342      	cbz	r2, 8000260 <memchr+0x70>
 800020e:	d1f6      	bne.n	80001fe <memchr+0xe>
 8000210:	b4f0      	push	{r4, r5, r6, r7}
 8000212:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000216:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800021a:	f022 0407 	bic.w	r4, r2, #7
 800021e:	f07f 0700 	mvns.w	r7, #0
 8000222:	2300      	movs	r3, #0
 8000224:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000228:	3c08      	subs	r4, #8
 800022a:	ea85 0501 	eor.w	r5, r5, r1
 800022e:	ea86 0601 	eor.w	r6, r6, r1
 8000232:	fa85 f547 	uadd8	r5, r5, r7
 8000236:	faa3 f587 	sel	r5, r3, r7
 800023a:	fa86 f647 	uadd8	r6, r6, r7
 800023e:	faa5 f687 	sel	r6, r5, r7
 8000242:	b98e      	cbnz	r6, 8000268 <memchr+0x78>
 8000244:	d1ee      	bne.n	8000224 <memchr+0x34>
 8000246:	bcf0      	pop	{r4, r5, r6, r7}
 8000248:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800024c:	f002 0207 	and.w	r2, r2, #7
 8000250:	b132      	cbz	r2, 8000260 <memchr+0x70>
 8000252:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000256:	3a01      	subs	r2, #1
 8000258:	ea83 0301 	eor.w	r3, r3, r1
 800025c:	b113      	cbz	r3, 8000264 <memchr+0x74>
 800025e:	d1f8      	bne.n	8000252 <memchr+0x62>
 8000260:	2000      	movs	r0, #0
 8000262:	4770      	bx	lr
 8000264:	3801      	subs	r0, #1
 8000266:	4770      	bx	lr
 8000268:	2d00      	cmp	r5, #0
 800026a:	bf06      	itte	eq
 800026c:	4635      	moveq	r5, r6
 800026e:	3803      	subeq	r0, #3
 8000270:	3807      	subne	r0, #7
 8000272:	f015 0f01 	tst.w	r5, #1
 8000276:	d107      	bne.n	8000288 <memchr+0x98>
 8000278:	3001      	adds	r0, #1
 800027a:	f415 7f80 	tst.w	r5, #256	; 0x100
 800027e:	bf02      	ittt	eq
 8000280:	3001      	addeq	r0, #1
 8000282:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 8000286:	3001      	addeq	r0, #1
 8000288:	bcf0      	pop	{r4, r5, r6, r7}
 800028a:	3801      	subs	r0, #1
 800028c:	4770      	bx	lr
 800028e:	bf00      	nop

08000290 <__aeabi_uldivmod>:
 8000290:	b953      	cbnz	r3, 80002a8 <__aeabi_uldivmod+0x18>
 8000292:	b94a      	cbnz	r2, 80002a8 <__aeabi_uldivmod+0x18>
 8000294:	2900      	cmp	r1, #0
 8000296:	bf08      	it	eq
 8000298:	2800      	cmpeq	r0, #0
 800029a:	bf1c      	itt	ne
 800029c:	f04f 31ff 	movne.w	r1, #4294967295
 80002a0:	f04f 30ff 	movne.w	r0, #4294967295
 80002a4:	f000 b974 	b.w	8000590 <__aeabi_idiv0>
 80002a8:	f1ad 0c08 	sub.w	ip, sp, #8
 80002ac:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 80002b0:	f000 f806 	bl	80002c0 <__udivmoddi4>
 80002b4:	f8dd e004 	ldr.w	lr, [sp, #4]
 80002b8:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80002bc:	b004      	add	sp, #16
 80002be:	4770      	bx	lr

080002c0 <__udivmoddi4>:
 80002c0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80002c4:	9d08      	ldr	r5, [sp, #32]
 80002c6:	4604      	mov	r4, r0
 80002c8:	468e      	mov	lr, r1
 80002ca:	2b00      	cmp	r3, #0
 80002cc:	d14d      	bne.n	800036a <__udivmoddi4+0xaa>
 80002ce:	428a      	cmp	r2, r1
 80002d0:	4694      	mov	ip, r2
 80002d2:	d969      	bls.n	80003a8 <__udivmoddi4+0xe8>
 80002d4:	fab2 f282 	clz	r2, r2
 80002d8:	b152      	cbz	r2, 80002f0 <__udivmoddi4+0x30>
 80002da:	fa01 f302 	lsl.w	r3, r1, r2
 80002de:	f1c2 0120 	rsb	r1, r2, #32
 80002e2:	fa20 f101 	lsr.w	r1, r0, r1
 80002e6:	fa0c fc02 	lsl.w	ip, ip, r2
 80002ea:	ea41 0e03 	orr.w	lr, r1, r3
 80002ee:	4094      	lsls	r4, r2
 80002f0:	ea4f 481c 	mov.w	r8, ip, lsr #16
 80002f4:	0c21      	lsrs	r1, r4, #16
 80002f6:	fbbe f6f8 	udiv	r6, lr, r8
 80002fa:	fa1f f78c 	uxth.w	r7, ip
 80002fe:	fb08 e316 	mls	r3, r8, r6, lr
 8000302:	ea41 4303 	orr.w	r3, r1, r3, lsl #16
 8000306:	fb06 f107 	mul.w	r1, r6, r7
 800030a:	4299      	cmp	r1, r3
 800030c:	d90a      	bls.n	8000324 <__udivmoddi4+0x64>
 800030e:	eb1c 0303 	adds.w	r3, ip, r3
 8000312:	f106 30ff 	add.w	r0, r6, #4294967295
 8000316:	f080 811f 	bcs.w	8000558 <__udivmoddi4+0x298>
 800031a:	4299      	cmp	r1, r3
 800031c:	f240 811c 	bls.w	8000558 <__udivmoddi4+0x298>
 8000320:	3e02      	subs	r6, #2
 8000322:	4463      	add	r3, ip
 8000324:	1a5b      	subs	r3, r3, r1
 8000326:	b2a4      	uxth	r4, r4
 8000328:	fbb3 f0f8 	udiv	r0, r3, r8
 800032c:	fb08 3310 	mls	r3, r8, r0, r3
 8000330:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000334:	fb00 f707 	mul.w	r7, r0, r7
 8000338:	42a7      	cmp	r7, r4
 800033a:	d90a      	bls.n	8000352 <__udivmoddi4+0x92>
 800033c:	eb1c 0404 	adds.w	r4, ip, r4
 8000340:	f100 33ff 	add.w	r3, r0, #4294967295
 8000344:	f080 810a 	bcs.w	800055c <__udivmoddi4+0x29c>
 8000348:	42a7      	cmp	r7, r4
 800034a:	f240 8107 	bls.w	800055c <__udivmoddi4+0x29c>
 800034e:	4464      	add	r4, ip
 8000350:	3802      	subs	r0, #2
 8000352:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 8000356:	1be4      	subs	r4, r4, r7
 8000358:	2600      	movs	r6, #0
 800035a:	b11d      	cbz	r5, 8000364 <__udivmoddi4+0xa4>
 800035c:	40d4      	lsrs	r4, r2
 800035e:	2300      	movs	r3, #0
 8000360:	e9c5 4300 	strd	r4, r3, [r5]
 8000364:	4631      	mov	r1, r6
 8000366:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800036a:	428b      	cmp	r3, r1
 800036c:	d909      	bls.n	8000382 <__udivmoddi4+0xc2>
 800036e:	2d00      	cmp	r5, #0
 8000370:	f000 80ef 	beq.w	8000552 <__udivmoddi4+0x292>
 8000374:	2600      	movs	r6, #0
 8000376:	e9c5 0100 	strd	r0, r1, [r5]
 800037a:	4630      	mov	r0, r6
 800037c:	4631      	mov	r1, r6
 800037e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000382:	fab3 f683 	clz	r6, r3
 8000386:	2e00      	cmp	r6, #0
 8000388:	d14a      	bne.n	8000420 <__udivmoddi4+0x160>
 800038a:	428b      	cmp	r3, r1
 800038c:	d302      	bcc.n	8000394 <__udivmoddi4+0xd4>
 800038e:	4282      	cmp	r2, r0
 8000390:	f200 80f9 	bhi.w	8000586 <__udivmoddi4+0x2c6>
 8000394:	1a84      	subs	r4, r0, r2
 8000396:	eb61 0303 	sbc.w	r3, r1, r3
 800039a:	2001      	movs	r0, #1
 800039c:	469e      	mov	lr, r3
 800039e:	2d00      	cmp	r5, #0
 80003a0:	d0e0      	beq.n	8000364 <__udivmoddi4+0xa4>
 80003a2:	e9c5 4e00 	strd	r4, lr, [r5]
 80003a6:	e7dd      	b.n	8000364 <__udivmoddi4+0xa4>
 80003a8:	b902      	cbnz	r2, 80003ac <__udivmoddi4+0xec>
 80003aa:	deff      	udf	#255	; 0xff
 80003ac:	fab2 f282 	clz	r2, r2
 80003b0:	2a00      	cmp	r2, #0
 80003b2:	f040 8092 	bne.w	80004da <__udivmoddi4+0x21a>
 80003b6:	eba1 010c 	sub.w	r1, r1, ip
 80003ba:	ea4f 471c 	mov.w	r7, ip, lsr #16
 80003be:	fa1f fe8c 	uxth.w	lr, ip
 80003c2:	2601      	movs	r6, #1
 80003c4:	0c20      	lsrs	r0, r4, #16
 80003c6:	fbb1 f3f7 	udiv	r3, r1, r7
 80003ca:	fb07 1113 	mls	r1, r7, r3, r1
 80003ce:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 80003d2:	fb0e f003 	mul.w	r0, lr, r3
 80003d6:	4288      	cmp	r0, r1
 80003d8:	d908      	bls.n	80003ec <__udivmoddi4+0x12c>
 80003da:	eb1c 0101 	adds.w	r1, ip, r1
 80003de:	f103 38ff 	add.w	r8, r3, #4294967295
 80003e2:	d202      	bcs.n	80003ea <__udivmoddi4+0x12a>
 80003e4:	4288      	cmp	r0, r1
 80003e6:	f200 80cb 	bhi.w	8000580 <__udivmoddi4+0x2c0>
 80003ea:	4643      	mov	r3, r8
 80003ec:	1a09      	subs	r1, r1, r0
 80003ee:	b2a4      	uxth	r4, r4
 80003f0:	fbb1 f0f7 	udiv	r0, r1, r7
 80003f4:	fb07 1110 	mls	r1, r7, r0, r1
 80003f8:	ea44 4401 	orr.w	r4, r4, r1, lsl #16
 80003fc:	fb0e fe00 	mul.w	lr, lr, r0
 8000400:	45a6      	cmp	lr, r4
 8000402:	d908      	bls.n	8000416 <__udivmoddi4+0x156>
 8000404:	eb1c 0404 	adds.w	r4, ip, r4
 8000408:	f100 31ff 	add.w	r1, r0, #4294967295
 800040c:	d202      	bcs.n	8000414 <__udivmoddi4+0x154>
 800040e:	45a6      	cmp	lr, r4
 8000410:	f200 80bb 	bhi.w	800058a <__udivmoddi4+0x2ca>
 8000414:	4608      	mov	r0, r1
 8000416:	eba4 040e 	sub.w	r4, r4, lr
 800041a:	ea40 4003 	orr.w	r0, r0, r3, lsl #16
 800041e:	e79c      	b.n	800035a <__udivmoddi4+0x9a>
 8000420:	f1c6 0720 	rsb	r7, r6, #32
 8000424:	40b3      	lsls	r3, r6
 8000426:	fa22 fc07 	lsr.w	ip, r2, r7
 800042a:	ea4c 0c03 	orr.w	ip, ip, r3
 800042e:	fa20 f407 	lsr.w	r4, r0, r7
 8000432:	fa01 f306 	lsl.w	r3, r1, r6
 8000436:	431c      	orrs	r4, r3
 8000438:	40f9      	lsrs	r1, r7
 800043a:	ea4f 491c 	mov.w	r9, ip, lsr #16
 800043e:	fa00 f306 	lsl.w	r3, r0, r6
 8000442:	fbb1 f8f9 	udiv	r8, r1, r9
 8000446:	0c20      	lsrs	r0, r4, #16
 8000448:	fa1f fe8c 	uxth.w	lr, ip
 800044c:	fb09 1118 	mls	r1, r9, r8, r1
 8000450:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 8000454:	fb08 f00e 	mul.w	r0, r8, lr
 8000458:	4288      	cmp	r0, r1
 800045a:	fa02 f206 	lsl.w	r2, r2, r6
 800045e:	d90b      	bls.n	8000478 <__udivmoddi4+0x1b8>
 8000460:	eb1c 0101 	adds.w	r1, ip, r1
 8000464:	f108 3aff 	add.w	sl, r8, #4294967295
 8000468:	f080 8088 	bcs.w	800057c <__udivmoddi4+0x2bc>
 800046c:	4288      	cmp	r0, r1
 800046e:	f240 8085 	bls.w	800057c <__udivmoddi4+0x2bc>
 8000472:	f1a8 0802 	sub.w	r8, r8, #2
 8000476:	4461      	add	r1, ip
 8000478:	1a09      	subs	r1, r1, r0
 800047a:	b2a4      	uxth	r4, r4
 800047c:	fbb1 f0f9 	udiv	r0, r1, r9
 8000480:	fb09 1110 	mls	r1, r9, r0, r1
 8000484:	ea44 4101 	orr.w	r1, r4, r1, lsl #16
 8000488:	fb00 fe0e 	mul.w	lr, r0, lr
 800048c:	458e      	cmp	lr, r1
 800048e:	d908      	bls.n	80004a2 <__udivmoddi4+0x1e2>
 8000490:	eb1c 0101 	adds.w	r1, ip, r1
 8000494:	f100 34ff 	add.w	r4, r0, #4294967295
 8000498:	d26c      	bcs.n	8000574 <__udivmoddi4+0x2b4>
 800049a:	458e      	cmp	lr, r1
 800049c:	d96a      	bls.n	8000574 <__udivmoddi4+0x2b4>
 800049e:	3802      	subs	r0, #2
 80004a0:	4461      	add	r1, ip
 80004a2:	ea40 4008 	orr.w	r0, r0, r8, lsl #16
 80004a6:	fba0 9402 	umull	r9, r4, r0, r2
 80004aa:	eba1 010e 	sub.w	r1, r1, lr
 80004ae:	42a1      	cmp	r1, r4
 80004b0:	46c8      	mov	r8, r9
 80004b2:	46a6      	mov	lr, r4
 80004b4:	d356      	bcc.n	8000564 <__udivmoddi4+0x2a4>
 80004b6:	d053      	beq.n	8000560 <__udivmoddi4+0x2a0>
 80004b8:	b15d      	cbz	r5, 80004d2 <__udivmoddi4+0x212>
 80004ba:	ebb3 0208 	subs.w	r2, r3, r8
 80004be:	eb61 010e 	sbc.w	r1, r1, lr
 80004c2:	fa01 f707 	lsl.w	r7, r1, r7
 80004c6:	fa22 f306 	lsr.w	r3, r2, r6
 80004ca:	40f1      	lsrs	r1, r6
 80004cc:	431f      	orrs	r7, r3
 80004ce:	e9c5 7100 	strd	r7, r1, [r5]
 80004d2:	2600      	movs	r6, #0
 80004d4:	4631      	mov	r1, r6
 80004d6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80004da:	f1c2 0320 	rsb	r3, r2, #32
 80004de:	40d8      	lsrs	r0, r3
 80004e0:	fa0c fc02 	lsl.w	ip, ip, r2
 80004e4:	fa21 f303 	lsr.w	r3, r1, r3
 80004e8:	4091      	lsls	r1, r2
 80004ea:	4301      	orrs	r1, r0
 80004ec:	ea4f 471c 	mov.w	r7, ip, lsr #16
 80004f0:	fa1f fe8c 	uxth.w	lr, ip
 80004f4:	fbb3 f0f7 	udiv	r0, r3, r7
 80004f8:	fb07 3610 	mls	r6, r7, r0, r3
 80004fc:	0c0b      	lsrs	r3, r1, #16
 80004fe:	ea43 4306 	orr.w	r3, r3, r6, lsl #16
 8000502:	fb00 f60e 	mul.w	r6, r0, lr
 8000506:	429e      	cmp	r6, r3
 8000508:	fa04 f402 	lsl.w	r4, r4, r2
 800050c:	d908      	bls.n	8000520 <__udivmoddi4+0x260>
 800050e:	eb1c 0303 	adds.w	r3, ip, r3
 8000512:	f100 38ff 	add.w	r8, r0, #4294967295
 8000516:	d22f      	bcs.n	8000578 <__udivmoddi4+0x2b8>
 8000518:	429e      	cmp	r6, r3
 800051a:	d92d      	bls.n	8000578 <__udivmoddi4+0x2b8>
 800051c:	3802      	subs	r0, #2
 800051e:	4463      	add	r3, ip
 8000520:	1b9b      	subs	r3, r3, r6
 8000522:	b289      	uxth	r1, r1
 8000524:	fbb3 f6f7 	udiv	r6, r3, r7
 8000528:	fb07 3316 	mls	r3, r7, r6, r3
 800052c:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000530:	fb06 f30e 	mul.w	r3, r6, lr
 8000534:	428b      	cmp	r3, r1
 8000536:	d908      	bls.n	800054a <__udivmoddi4+0x28a>
 8000538:	eb1c 0101 	adds.w	r1, ip, r1
 800053c:	f106 38ff 	add.w	r8, r6, #4294967295
 8000540:	d216      	bcs.n	8000570 <__udivmoddi4+0x2b0>
 8000542:	428b      	cmp	r3, r1
 8000544:	d914      	bls.n	8000570 <__udivmoddi4+0x2b0>
 8000546:	3e02      	subs	r6, #2
 8000548:	4461      	add	r1, ip
 800054a:	1ac9      	subs	r1, r1, r3
 800054c:	ea46 4600 	orr.w	r6, r6, r0, lsl #16
 8000550:	e738      	b.n	80003c4 <__udivmoddi4+0x104>
 8000552:	462e      	mov	r6, r5
 8000554:	4628      	mov	r0, r5
 8000556:	e705      	b.n	8000364 <__udivmoddi4+0xa4>
 8000558:	4606      	mov	r6, r0
 800055a:	e6e3      	b.n	8000324 <__udivmoddi4+0x64>
 800055c:	4618      	mov	r0, r3
 800055e:	e6f8      	b.n	8000352 <__udivmoddi4+0x92>
 8000560:	454b      	cmp	r3, r9
 8000562:	d2a9      	bcs.n	80004b8 <__udivmoddi4+0x1f8>
 8000564:	ebb9 0802 	subs.w	r8, r9, r2
 8000568:	eb64 0e0c 	sbc.w	lr, r4, ip
 800056c:	3801      	subs	r0, #1
 800056e:	e7a3      	b.n	80004b8 <__udivmoddi4+0x1f8>
 8000570:	4646      	mov	r6, r8
 8000572:	e7ea      	b.n	800054a <__udivmoddi4+0x28a>
 8000574:	4620      	mov	r0, r4
 8000576:	e794      	b.n	80004a2 <__udivmoddi4+0x1e2>
 8000578:	4640      	mov	r0, r8
 800057a:	e7d1      	b.n	8000520 <__udivmoddi4+0x260>
 800057c:	46d0      	mov	r8, sl
 800057e:	e77b      	b.n	8000478 <__udivmoddi4+0x1b8>
 8000580:	3b02      	subs	r3, #2
 8000582:	4461      	add	r1, ip
 8000584:	e732      	b.n	80003ec <__udivmoddi4+0x12c>
 8000586:	4630      	mov	r0, r6
 8000588:	e709      	b.n	800039e <__udivmoddi4+0xde>
 800058a:	4464      	add	r4, ip
 800058c:	3802      	subs	r0, #2
 800058e:	e742      	b.n	8000416 <__udivmoddi4+0x156>

08000590 <__aeabi_idiv0>:
 8000590:	4770      	bx	lr
 8000592:	bf00      	nop

08000594 <vApplicationIdleHook>:
void vApplicationStackOverflowHook(xTaskHandle xTask, signed char *pcTaskName);
void vApplicationMallocFailedHook(void);

/* USER CODE BEGIN 2 */
void vApplicationIdleHook( void )
{
 8000594:	b480      	push	{r7}
 8000596:	af00      	add	r7, sp, #0
   specified, or call vTaskDelay()). If the application makes use of the
   vTaskDelete() API function (as this demo application does) then it is also
   important that vApplicationIdleHook() is permitted to return to its calling
   function, because it is the responsibility of the idle task to clean up
   memory allocated by the kernel to any task that has since been deleted. */
}
 8000598:	bf00      	nop
 800059a:	46bd      	mov	sp, r7
 800059c:	f85d 7b04 	ldr.w	r7, [sp], #4
 80005a0:	4770      	bx	lr

080005a2 <vApplicationStackOverflowHook>:
/* USER CODE END 2 */

/* USER CODE BEGIN 4 */
void vApplicationStackOverflowHook(xTaskHandle xTask, signed char *pcTaskName)
{
 80005a2:	b480      	push	{r7}
 80005a4:	b083      	sub	sp, #12
 80005a6:	af00      	add	r7, sp, #0
 80005a8:	6078      	str	r0, [r7, #4]
 80005aa:	6039      	str	r1, [r7, #0]
   /* Run time stack overflow checking is performed if
   configCHECK_FOR_STACK_OVERFLOW is defined to 1 or 2. This hook function is
   called if a stack overflow is detected. */
}
 80005ac:	bf00      	nop
 80005ae:	370c      	adds	r7, #12
 80005b0:	46bd      	mov	sp, r7
 80005b2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80005b6:	4770      	bx	lr

080005b8 <vApplicationMallocFailedHook>:
/* USER CODE END 4 */

/* USER CODE BEGIN 5 */
void vApplicationMallocFailedHook(void)
{
 80005b8:	b480      	push	{r7}
 80005ba:	af00      	add	r7, sp, #0
   demo application. If heap_1.c or heap_2.c are used, then the size of the
   heap available to pvPortMalloc() is defined by configTOTAL_HEAP_SIZE in
   FreeRTOSConfig.h, and the xPortGetFreeHeapSize() API function can be used
   to query the size of free heap space that remains (although it does not
   provide information on how the remaining heap might be fragmented). */
}
 80005bc:	bf00      	nop
 80005be:	46bd      	mov	sp, r7
 80005c0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80005c4:	4770      	bx	lr
	...

080005c8 <_write>:
#define PUTCHAR_PROTOTYPE int __io_putchar(int ch)
/* USER CODE END PFP */

/* Private user code ---------------------------------------------------------*/
/* USER CODE BEGIN 0 */
int _write(int file, char *ptr, int len) {
 80005c8:	b580      	push	{r7, lr}
 80005ca:	b084      	sub	sp, #16
 80005cc:	af00      	add	r7, sp, #0
 80005ce:	60f8      	str	r0, [r7, #12]
 80005d0:	60b9      	str	r1, [r7, #8]
 80005d2:	607a      	str	r2, [r7, #4]
  HAL_UART_Transmit(&huart1, (uint8_t*) ptr, len, HAL_MAX_DELAY);
 80005d4:	687b      	ldr	r3, [r7, #4]
 80005d6:	b29a      	uxth	r2, r3
 80005d8:	f04f 33ff 	mov.w	r3, #4294967295
 80005dc:	68b9      	ldr	r1, [r7, #8]
 80005de:	4804      	ldr	r0, [pc, #16]	; (80005f0 <_write+0x28>)
 80005e0:	f005 f959 	bl	8005896 <HAL_UART_Transmit>
  return len;
 80005e4:	687b      	ldr	r3, [r7, #4]
}
 80005e6:	4618      	mov	r0, r3
 80005e8:	3710      	adds	r7, #16
 80005ea:	46bd      	mov	sp, r7
 80005ec:	bd80      	pop	{r7, pc}
 80005ee:	bf00      	nop
 80005f0:	20000274 	.word	0x20000274

080005f4 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 80005f4:	b580      	push	{r7, lr}
 80005f6:	b0b2      	sub	sp, #200	; 0xc8
 80005f8:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 80005fa:	f001 f9f3 	bl	80019e4 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 80005fe:	f000 f825 	bl	800064c <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000602:	f000 fa93 	bl	8000b2c <MX_GPIO_Init>
  MX_CRC_Init();
 8000606:	f000 f88b 	bl	8000720 <MX_CRC_Init>
  MX_DMA2D_Init();
 800060a:	f000 f89d 	bl	8000748 <MX_DMA2D_Init>
  MX_FMC_Init();
 800060e:	f000 fa3d 	bl	8000a8c <MX_FMC_Init>
  MX_I2C3_Init();
 8000612:	f000 f8cb 	bl	80007ac <MX_I2C3_Init>
  MX_LTDC_Init();
 8000616:	f000 f909 	bl	800082c <MX_LTDC_Init>
  MX_SPI5_Init();
 800061a:	f000 f987 	bl	800092c <MX_SPI5_Init>
  MX_TIM1_Init();
 800061e:	f000 f9bb 	bl	8000998 <MX_TIM1_Init>
  MX_USART1_UART_Init();
 8000622:	f000 fa09 	bl	8000a38 <MX_USART1_UART_Init>
  /* USER CODE BEGIN 2 */
  char str[200];
  sprintf(str,"hi\n\r");
 8000626:	463b      	mov	r3, r7
 8000628:	4907      	ldr	r1, [pc, #28]	; (8000648 <main+0x54>)
 800062a:	4618      	mov	r0, r3
 800062c:	f009 ff90 	bl	800a550 <siprintf>
  puts(str);
 8000630:	463b      	mov	r3, r7
 8000632:	4618      	mov	r0, r3
 8000634:	f009 ff74 	bl	800a520 <puts>

  /* USER CODE END 2 */

  /* Init scheduler */
  osKernelInitialize();
 8000638:	f006 f960 	bl	80068fc <osKernelInitialize>
* in the root directory of this software component.
* If no LICENSE file comes with this software, it is provided AS-IS.
*
******************************************************************************
*/
  tm_main();
 800063c:	f001 f936 	bl	80018ac <tm_main>
/**
* @}
*/

  /* Start scheduler */
  osKernelStart();
 8000640:	f006 f980 	bl	8006944 <osKernelStart>

  /* We should never get here as control is now taken by the scheduler */
  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
 8000644:	e7fe      	b.n	8000644 <main+0x50>
 8000646:	bf00      	nop
 8000648:	0800b61c 	.word	0x0800b61c

0800064c <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 800064c:	b580      	push	{r7, lr}
 800064e:	b094      	sub	sp, #80	; 0x50
 8000650:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000652:	f107 0320 	add.w	r3, r7, #32
 8000656:	2230      	movs	r2, #48	; 0x30
 8000658:	2100      	movs	r1, #0
 800065a:	4618      	mov	r0, r3
 800065c:	f009 fdf2 	bl	800a244 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000660:	f107 030c 	add.w	r3, r7, #12
 8000664:	2200      	movs	r2, #0
 8000666:	601a      	str	r2, [r3, #0]
 8000668:	605a      	str	r2, [r3, #4]
 800066a:	609a      	str	r2, [r3, #8]
 800066c:	60da      	str	r2, [r3, #12]
 800066e:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 8000670:	2300      	movs	r3, #0
 8000672:	60bb      	str	r3, [r7, #8]
 8000674:	4b28      	ldr	r3, [pc, #160]	; (8000718 <SystemClock_Config+0xcc>)
 8000676:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000678:	4a27      	ldr	r2, [pc, #156]	; (8000718 <SystemClock_Config+0xcc>)
 800067a:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800067e:	6413      	str	r3, [r2, #64]	; 0x40
 8000680:	4b25      	ldr	r3, [pc, #148]	; (8000718 <SystemClock_Config+0xcc>)
 8000682:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000684:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000688:	60bb      	str	r3, [r7, #8]
 800068a:	68bb      	ldr	r3, [r7, #8]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE3);
 800068c:	2300      	movs	r3, #0
 800068e:	607b      	str	r3, [r7, #4]
 8000690:	4b22      	ldr	r3, [pc, #136]	; (800071c <SystemClock_Config+0xd0>)
 8000692:	681b      	ldr	r3, [r3, #0]
 8000694:	f423 4340 	bic.w	r3, r3, #49152	; 0xc000
 8000698:	4a20      	ldr	r2, [pc, #128]	; (800071c <SystemClock_Config+0xd0>)
 800069a:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 800069e:	6013      	str	r3, [r2, #0]
 80006a0:	4b1e      	ldr	r3, [pc, #120]	; (800071c <SystemClock_Config+0xd0>)
 80006a2:	681b      	ldr	r3, [r3, #0]
 80006a4:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 80006a8:	607b      	str	r3, [r7, #4]
 80006aa:	687b      	ldr	r3, [r7, #4]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 80006ac:	2301      	movs	r3, #1
 80006ae:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 80006b0:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 80006b4:	627b      	str	r3, [r7, #36]	; 0x24
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 80006b6:	2302      	movs	r3, #2
 80006b8:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 80006ba:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 80006be:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLM = 4;
 80006c0:	2304      	movs	r3, #4
 80006c2:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLN = 72;
 80006c4:	2348      	movs	r3, #72	; 0x48
 80006c6:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 80006c8:	2302      	movs	r3, #2
 80006ca:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLQ = 3;
 80006cc:	2303      	movs	r3, #3
 80006ce:	64fb      	str	r3, [r7, #76]	; 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80006d0:	f107 0320 	add.w	r3, r7, #32
 80006d4:	4618      	mov	r0, r3
 80006d6:	f003 fcc9 	bl	800406c <HAL_RCC_OscConfig>
 80006da:	4603      	mov	r3, r0
 80006dc:	2b00      	cmp	r3, #0
 80006de:	d001      	beq.n	80006e4 <SystemClock_Config+0x98>
  {
    Error_Handler();
 80006e0:	f000 fb46 	bl	8000d70 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 80006e4:	230f      	movs	r3, #15
 80006e6:	60fb      	str	r3, [r7, #12]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 80006e8:	2302      	movs	r3, #2
 80006ea:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 80006ec:	2300      	movs	r3, #0
 80006ee:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 80006f0:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80006f4:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 80006f6:	2300      	movs	r3, #0
 80006f8:	61fb      	str	r3, [r7, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 80006fa:	f107 030c 	add.w	r3, r7, #12
 80006fe:	2102      	movs	r1, #2
 8000700:	4618      	mov	r0, r3
 8000702:	f003 ff2b 	bl	800455c <HAL_RCC_ClockConfig>
 8000706:	4603      	mov	r3, r0
 8000708:	2b00      	cmp	r3, #0
 800070a:	d001      	beq.n	8000710 <SystemClock_Config+0xc4>
  {
    Error_Handler();
 800070c:	f000 fb30 	bl	8000d70 <Error_Handler>
  }
}
 8000710:	bf00      	nop
 8000712:	3750      	adds	r7, #80	; 0x50
 8000714:	46bd      	mov	sp, r7
 8000716:	bd80      	pop	{r7, pc}
 8000718:	40023800 	.word	0x40023800
 800071c:	40007000 	.word	0x40007000

08000720 <MX_CRC_Init>:
  * @brief CRC Initialization Function
  * @param None
  * @retval None
  */
static void MX_CRC_Init(void)
{
 8000720:	b580      	push	{r7, lr}
 8000722:	af00      	add	r7, sp, #0
  /* USER CODE END CRC_Init 0 */

  /* USER CODE BEGIN CRC_Init 1 */

  /* USER CODE END CRC_Init 1 */
  hcrc.Instance = CRC;
 8000724:	4b06      	ldr	r3, [pc, #24]	; (8000740 <MX_CRC_Init+0x20>)
 8000726:	4a07      	ldr	r2, [pc, #28]	; (8000744 <MX_CRC_Init+0x24>)
 8000728:	601a      	str	r2, [r3, #0]
  if (HAL_CRC_Init(&hcrc) != HAL_OK)
 800072a:	4805      	ldr	r0, [pc, #20]	; (8000740 <MX_CRC_Init+0x20>)
 800072c:	f001 fa7e 	bl	8001c2c <HAL_CRC_Init>
 8000730:	4603      	mov	r3, r0
 8000732:	2b00      	cmp	r3, #0
 8000734:	d001      	beq.n	800073a <MX_CRC_Init+0x1a>
  {
    Error_Handler();
 8000736:	f000 fb1b 	bl	8000d70 <Error_Handler>
  }
  /* USER CODE BEGIN CRC_Init 2 */

  /* USER CODE END CRC_Init 2 */

}
 800073a:	bf00      	nop
 800073c:	bd80      	pop	{r7, pc}
 800073e:	bf00      	nop
 8000740:	20000090 	.word	0x20000090
 8000744:	40023000 	.word	0x40023000

08000748 <MX_DMA2D_Init>:
  * @brief DMA2D Initialization Function
  * @param None
  * @retval None
  */
static void MX_DMA2D_Init(void)
{
 8000748:	b580      	push	{r7, lr}
 800074a:	af00      	add	r7, sp, #0
  /* USER CODE END DMA2D_Init 0 */

  /* USER CODE BEGIN DMA2D_Init 1 */

  /* USER CODE END DMA2D_Init 1 */
  hdma2d.Instance = DMA2D;
 800074c:	4b15      	ldr	r3, [pc, #84]	; (80007a4 <MX_DMA2D_Init+0x5c>)
 800074e:	4a16      	ldr	r2, [pc, #88]	; (80007a8 <MX_DMA2D_Init+0x60>)
 8000750:	601a      	str	r2, [r3, #0]
  hdma2d.Init.Mode = DMA2D_M2M;
 8000752:	4b14      	ldr	r3, [pc, #80]	; (80007a4 <MX_DMA2D_Init+0x5c>)
 8000754:	2200      	movs	r2, #0
 8000756:	605a      	str	r2, [r3, #4]
  hdma2d.Init.ColorMode = DMA2D_OUTPUT_ARGB8888;
 8000758:	4b12      	ldr	r3, [pc, #72]	; (80007a4 <MX_DMA2D_Init+0x5c>)
 800075a:	2200      	movs	r2, #0
 800075c:	609a      	str	r2, [r3, #8]
  hdma2d.Init.OutputOffset = 0;
 800075e:	4b11      	ldr	r3, [pc, #68]	; (80007a4 <MX_DMA2D_Init+0x5c>)
 8000760:	2200      	movs	r2, #0
 8000762:	60da      	str	r2, [r3, #12]
  hdma2d.LayerCfg[1].InputOffset = 0;
 8000764:	4b0f      	ldr	r3, [pc, #60]	; (80007a4 <MX_DMA2D_Init+0x5c>)
 8000766:	2200      	movs	r2, #0
 8000768:	629a      	str	r2, [r3, #40]	; 0x28
  hdma2d.LayerCfg[1].InputColorMode = DMA2D_INPUT_ARGB8888;
 800076a:	4b0e      	ldr	r3, [pc, #56]	; (80007a4 <MX_DMA2D_Init+0x5c>)
 800076c:	2200      	movs	r2, #0
 800076e:	62da      	str	r2, [r3, #44]	; 0x2c
  hdma2d.LayerCfg[1].AlphaMode = DMA2D_NO_MODIF_ALPHA;
 8000770:	4b0c      	ldr	r3, [pc, #48]	; (80007a4 <MX_DMA2D_Init+0x5c>)
 8000772:	2200      	movs	r2, #0
 8000774:	631a      	str	r2, [r3, #48]	; 0x30
  hdma2d.LayerCfg[1].InputAlpha = 0;
 8000776:	4b0b      	ldr	r3, [pc, #44]	; (80007a4 <MX_DMA2D_Init+0x5c>)
 8000778:	2200      	movs	r2, #0
 800077a:	635a      	str	r2, [r3, #52]	; 0x34
  if (HAL_DMA2D_Init(&hdma2d) != HAL_OK)
 800077c:	4809      	ldr	r0, [pc, #36]	; (80007a4 <MX_DMA2D_Init+0x5c>)
 800077e:	f001 fa71 	bl	8001c64 <HAL_DMA2D_Init>
 8000782:	4603      	mov	r3, r0
 8000784:	2b00      	cmp	r3, #0
 8000786:	d001      	beq.n	800078c <MX_DMA2D_Init+0x44>
  {
    Error_Handler();
 8000788:	f000 faf2 	bl	8000d70 <Error_Handler>
  }
  if (HAL_DMA2D_ConfigLayer(&hdma2d, 1) != HAL_OK)
 800078c:	2101      	movs	r1, #1
 800078e:	4805      	ldr	r0, [pc, #20]	; (80007a4 <MX_DMA2D_Init+0x5c>)
 8000790:	f001 fbc2 	bl	8001f18 <HAL_DMA2D_ConfigLayer>
 8000794:	4603      	mov	r3, r0
 8000796:	2b00      	cmp	r3, #0
 8000798:	d001      	beq.n	800079e <MX_DMA2D_Init+0x56>
  {
    Error_Handler();
 800079a:	f000 fae9 	bl	8000d70 <Error_Handler>
  }
  /* USER CODE BEGIN DMA2D_Init 2 */

  /* USER CODE END DMA2D_Init 2 */

}
 800079e:	bf00      	nop
 80007a0:	bd80      	pop	{r7, pc}
 80007a2:	bf00      	nop
 80007a4:	20000098 	.word	0x20000098
 80007a8:	4002b000 	.word	0x4002b000

080007ac <MX_I2C3_Init>:
  * @brief I2C3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C3_Init(void)
{
 80007ac:	b580      	push	{r7, lr}
 80007ae:	af00      	add	r7, sp, #0
  /* USER CODE END I2C3_Init 0 */

  /* USER CODE BEGIN I2C3_Init 1 */

  /* USER CODE END I2C3_Init 1 */
  hi2c3.Instance = I2C3;
 80007b0:	4b1b      	ldr	r3, [pc, #108]	; (8000820 <MX_I2C3_Init+0x74>)
 80007b2:	4a1c      	ldr	r2, [pc, #112]	; (8000824 <MX_I2C3_Init+0x78>)
 80007b4:	601a      	str	r2, [r3, #0]
  hi2c3.Init.ClockSpeed = 100000;
 80007b6:	4b1a      	ldr	r3, [pc, #104]	; (8000820 <MX_I2C3_Init+0x74>)
 80007b8:	4a1b      	ldr	r2, [pc, #108]	; (8000828 <MX_I2C3_Init+0x7c>)
 80007ba:	605a      	str	r2, [r3, #4]
  hi2c3.Init.DutyCycle = I2C_DUTYCYCLE_2;
 80007bc:	4b18      	ldr	r3, [pc, #96]	; (8000820 <MX_I2C3_Init+0x74>)
 80007be:	2200      	movs	r2, #0
 80007c0:	609a      	str	r2, [r3, #8]
  hi2c3.Init.OwnAddress1 = 0;
 80007c2:	4b17      	ldr	r3, [pc, #92]	; (8000820 <MX_I2C3_Init+0x74>)
 80007c4:	2200      	movs	r2, #0
 80007c6:	60da      	str	r2, [r3, #12]
  hi2c3.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 80007c8:	4b15      	ldr	r3, [pc, #84]	; (8000820 <MX_I2C3_Init+0x74>)
 80007ca:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 80007ce:	611a      	str	r2, [r3, #16]
  hi2c3.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 80007d0:	4b13      	ldr	r3, [pc, #76]	; (8000820 <MX_I2C3_Init+0x74>)
 80007d2:	2200      	movs	r2, #0
 80007d4:	615a      	str	r2, [r3, #20]
  hi2c3.Init.OwnAddress2 = 0;
 80007d6:	4b12      	ldr	r3, [pc, #72]	; (8000820 <MX_I2C3_Init+0x74>)
 80007d8:	2200      	movs	r2, #0
 80007da:	619a      	str	r2, [r3, #24]
  hi2c3.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 80007dc:	4b10      	ldr	r3, [pc, #64]	; (8000820 <MX_I2C3_Init+0x74>)
 80007de:	2200      	movs	r2, #0
 80007e0:	61da      	str	r2, [r3, #28]
  hi2c3.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 80007e2:	4b0f      	ldr	r3, [pc, #60]	; (8000820 <MX_I2C3_Init+0x74>)
 80007e4:	2200      	movs	r2, #0
 80007e6:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c3) != HAL_OK)
 80007e8:	480d      	ldr	r0, [pc, #52]	; (8000820 <MX_I2C3_Init+0x74>)
 80007ea:	f002 ff17 	bl	800361c <HAL_I2C_Init>
 80007ee:	4603      	mov	r3, r0
 80007f0:	2b00      	cmp	r3, #0
 80007f2:	d001      	beq.n	80007f8 <MX_I2C3_Init+0x4c>
  {
    Error_Handler();
 80007f4:	f000 fabc 	bl	8000d70 <Error_Handler>
  }

  /** Configure Analogue filter
  */
  if (HAL_I2CEx_ConfigAnalogFilter(&hi2c3, I2C_ANALOGFILTER_ENABLE) != HAL_OK)
 80007f8:	2100      	movs	r1, #0
 80007fa:	4809      	ldr	r0, [pc, #36]	; (8000820 <MX_I2C3_Init+0x74>)
 80007fc:	f003 f852 	bl	80038a4 <HAL_I2CEx_ConfigAnalogFilter>
 8000800:	4603      	mov	r3, r0
 8000802:	2b00      	cmp	r3, #0
 8000804:	d001      	beq.n	800080a <MX_I2C3_Init+0x5e>
  {
    Error_Handler();
 8000806:	f000 fab3 	bl	8000d70 <Error_Handler>
  }

  /** Configure Digital filter
  */
  if (HAL_I2CEx_ConfigDigitalFilter(&hi2c3, 0) != HAL_OK)
 800080a:	2100      	movs	r1, #0
 800080c:	4804      	ldr	r0, [pc, #16]	; (8000820 <MX_I2C3_Init+0x74>)
 800080e:	f003 f885 	bl	800391c <HAL_I2CEx_ConfigDigitalFilter>
 8000812:	4603      	mov	r3, r0
 8000814:	2b00      	cmp	r3, #0
 8000816:	d001      	beq.n	800081c <MX_I2C3_Init+0x70>
  {
    Error_Handler();
 8000818:	f000 faaa 	bl	8000d70 <Error_Handler>
  }
  /* USER CODE BEGIN I2C3_Init 2 */

  /* USER CODE END I2C3_Init 2 */

}
 800081c:	bf00      	nop
 800081e:	bd80      	pop	{r7, pc}
 8000820:	200000d8 	.word	0x200000d8
 8000824:	40005c00 	.word	0x40005c00
 8000828:	000186a0 	.word	0x000186a0

0800082c <MX_LTDC_Init>:
  * @brief LTDC Initialization Function
  * @param None
  * @retval None
  */
static void MX_LTDC_Init(void)
{
 800082c:	b580      	push	{r7, lr}
 800082e:	b08e      	sub	sp, #56	; 0x38
 8000830:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN LTDC_Init 0 */

  /* USER CODE END LTDC_Init 0 */

  LTDC_LayerCfgTypeDef pLayerCfg = {0};
 8000832:	1d3b      	adds	r3, r7, #4
 8000834:	2234      	movs	r2, #52	; 0x34
 8000836:	2100      	movs	r1, #0
 8000838:	4618      	mov	r0, r3
 800083a:	f009 fd03 	bl	800a244 <memset>

  /* USER CODE BEGIN LTDC_Init 1 */

  /* USER CODE END LTDC_Init 1 */
  hltdc.Instance = LTDC;
 800083e:	4b39      	ldr	r3, [pc, #228]	; (8000924 <MX_LTDC_Init+0xf8>)
 8000840:	4a39      	ldr	r2, [pc, #228]	; (8000928 <MX_LTDC_Init+0xfc>)
 8000842:	601a      	str	r2, [r3, #0]
  hltdc.Init.HSPolarity = LTDC_HSPOLARITY_AL;
 8000844:	4b37      	ldr	r3, [pc, #220]	; (8000924 <MX_LTDC_Init+0xf8>)
 8000846:	2200      	movs	r2, #0
 8000848:	605a      	str	r2, [r3, #4]
  hltdc.Init.VSPolarity = LTDC_VSPOLARITY_AL;
 800084a:	4b36      	ldr	r3, [pc, #216]	; (8000924 <MX_LTDC_Init+0xf8>)
 800084c:	2200      	movs	r2, #0
 800084e:	609a      	str	r2, [r3, #8]
  hltdc.Init.DEPolarity = LTDC_DEPOLARITY_AL;
 8000850:	4b34      	ldr	r3, [pc, #208]	; (8000924 <MX_LTDC_Init+0xf8>)
 8000852:	2200      	movs	r2, #0
 8000854:	60da      	str	r2, [r3, #12]
  hltdc.Init.PCPolarity = LTDC_PCPOLARITY_IPC;
 8000856:	4b33      	ldr	r3, [pc, #204]	; (8000924 <MX_LTDC_Init+0xf8>)
 8000858:	2200      	movs	r2, #0
 800085a:	611a      	str	r2, [r3, #16]
  hltdc.Init.HorizontalSync = 9;
 800085c:	4b31      	ldr	r3, [pc, #196]	; (8000924 <MX_LTDC_Init+0xf8>)
 800085e:	2209      	movs	r2, #9
 8000860:	615a      	str	r2, [r3, #20]
  hltdc.Init.VerticalSync = 1;
 8000862:	4b30      	ldr	r3, [pc, #192]	; (8000924 <MX_LTDC_Init+0xf8>)
 8000864:	2201      	movs	r2, #1
 8000866:	619a      	str	r2, [r3, #24]
  hltdc.Init.AccumulatedHBP = 29;
 8000868:	4b2e      	ldr	r3, [pc, #184]	; (8000924 <MX_LTDC_Init+0xf8>)
 800086a:	221d      	movs	r2, #29
 800086c:	61da      	str	r2, [r3, #28]
  hltdc.Init.AccumulatedVBP = 3;
 800086e:	4b2d      	ldr	r3, [pc, #180]	; (8000924 <MX_LTDC_Init+0xf8>)
 8000870:	2203      	movs	r2, #3
 8000872:	621a      	str	r2, [r3, #32]
  hltdc.Init.AccumulatedActiveW = 269;
 8000874:	4b2b      	ldr	r3, [pc, #172]	; (8000924 <MX_LTDC_Init+0xf8>)
 8000876:	f240 120d 	movw	r2, #269	; 0x10d
 800087a:	625a      	str	r2, [r3, #36]	; 0x24
  hltdc.Init.AccumulatedActiveH = 323;
 800087c:	4b29      	ldr	r3, [pc, #164]	; (8000924 <MX_LTDC_Init+0xf8>)
 800087e:	f240 1243 	movw	r2, #323	; 0x143
 8000882:	629a      	str	r2, [r3, #40]	; 0x28
  hltdc.Init.TotalWidth = 279;
 8000884:	4b27      	ldr	r3, [pc, #156]	; (8000924 <MX_LTDC_Init+0xf8>)
 8000886:	f240 1217 	movw	r2, #279	; 0x117
 800088a:	62da      	str	r2, [r3, #44]	; 0x2c
  hltdc.Init.TotalHeigh = 327;
 800088c:	4b25      	ldr	r3, [pc, #148]	; (8000924 <MX_LTDC_Init+0xf8>)
 800088e:	f240 1247 	movw	r2, #327	; 0x147
 8000892:	631a      	str	r2, [r3, #48]	; 0x30
  hltdc.Init.Backcolor.Blue = 0;
 8000894:	4b23      	ldr	r3, [pc, #140]	; (8000924 <MX_LTDC_Init+0xf8>)
 8000896:	2200      	movs	r2, #0
 8000898:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  hltdc.Init.Backcolor.Green = 0;
 800089c:	4b21      	ldr	r3, [pc, #132]	; (8000924 <MX_LTDC_Init+0xf8>)
 800089e:	2200      	movs	r2, #0
 80008a0:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
  hltdc.Init.Backcolor.Red = 0;
 80008a4:	4b1f      	ldr	r3, [pc, #124]	; (8000924 <MX_LTDC_Init+0xf8>)
 80008a6:	2200      	movs	r2, #0
 80008a8:	f883 2036 	strb.w	r2, [r3, #54]	; 0x36
  if (HAL_LTDC_Init(&hltdc) != HAL_OK)
 80008ac:	481d      	ldr	r0, [pc, #116]	; (8000924 <MX_LTDC_Init+0xf8>)
 80008ae:	f003 f875 	bl	800399c <HAL_LTDC_Init>
 80008b2:	4603      	mov	r3, r0
 80008b4:	2b00      	cmp	r3, #0
 80008b6:	d001      	beq.n	80008bc <MX_LTDC_Init+0x90>
  {
    Error_Handler();
 80008b8:	f000 fa5a 	bl	8000d70 <Error_Handler>
  }
  pLayerCfg.WindowX0 = 0;
 80008bc:	2300      	movs	r3, #0
 80008be:	607b      	str	r3, [r7, #4]
  pLayerCfg.WindowX1 = 240;
 80008c0:	23f0      	movs	r3, #240	; 0xf0
 80008c2:	60bb      	str	r3, [r7, #8]
  pLayerCfg.WindowY0 = 0;
 80008c4:	2300      	movs	r3, #0
 80008c6:	60fb      	str	r3, [r7, #12]
  pLayerCfg.WindowY1 = 320;
 80008c8:	f44f 73a0 	mov.w	r3, #320	; 0x140
 80008cc:	613b      	str	r3, [r7, #16]
  pLayerCfg.PixelFormat = LTDC_PIXEL_FORMAT_RGB565;
 80008ce:	2302      	movs	r3, #2
 80008d0:	617b      	str	r3, [r7, #20]
  pLayerCfg.Alpha = 255;
 80008d2:	23ff      	movs	r3, #255	; 0xff
 80008d4:	61bb      	str	r3, [r7, #24]
  pLayerCfg.Alpha0 = 0;
 80008d6:	2300      	movs	r3, #0
 80008d8:	61fb      	str	r3, [r7, #28]
  pLayerCfg.BlendingFactor1 = LTDC_BLENDING_FACTOR1_PAxCA;
 80008da:	f44f 63c0 	mov.w	r3, #1536	; 0x600
 80008de:	623b      	str	r3, [r7, #32]
  pLayerCfg.BlendingFactor2 = LTDC_BLENDING_FACTOR2_PAxCA;
 80008e0:	2307      	movs	r3, #7
 80008e2:	627b      	str	r3, [r7, #36]	; 0x24
  pLayerCfg.FBStartAdress = 0xD0000000;
 80008e4:	f04f 4350 	mov.w	r3, #3489660928	; 0xd0000000
 80008e8:	62bb      	str	r3, [r7, #40]	; 0x28
  pLayerCfg.ImageWidth = 240;
 80008ea:	23f0      	movs	r3, #240	; 0xf0
 80008ec:	62fb      	str	r3, [r7, #44]	; 0x2c
  pLayerCfg.ImageHeight = 320;
 80008ee:	f44f 73a0 	mov.w	r3, #320	; 0x140
 80008f2:	633b      	str	r3, [r7, #48]	; 0x30
  pLayerCfg.Backcolor.Blue = 0;
 80008f4:	2300      	movs	r3, #0
 80008f6:	f887 3034 	strb.w	r3, [r7, #52]	; 0x34
  pLayerCfg.Backcolor.Green = 0;
 80008fa:	2300      	movs	r3, #0
 80008fc:	f887 3035 	strb.w	r3, [r7, #53]	; 0x35
  pLayerCfg.Backcolor.Red = 0;
 8000900:	2300      	movs	r3, #0
 8000902:	f887 3036 	strb.w	r3, [r7, #54]	; 0x36
  if (HAL_LTDC_ConfigLayer(&hltdc, &pLayerCfg, 0) != HAL_OK)
 8000906:	1d3b      	adds	r3, r7, #4
 8000908:	2200      	movs	r2, #0
 800090a:	4619      	mov	r1, r3
 800090c:	4805      	ldr	r0, [pc, #20]	; (8000924 <MX_LTDC_Init+0xf8>)
 800090e:	f003 f9d7 	bl	8003cc0 <HAL_LTDC_ConfigLayer>
 8000912:	4603      	mov	r3, r0
 8000914:	2b00      	cmp	r3, #0
 8000916:	d001      	beq.n	800091c <MX_LTDC_Init+0xf0>
  {
    Error_Handler();
 8000918:	f000 fa2a 	bl	8000d70 <Error_Handler>
  }
  /* USER CODE BEGIN LTDC_Init 2 */

  /* USER CODE END LTDC_Init 2 */

}
 800091c:	bf00      	nop
 800091e:	3738      	adds	r7, #56	; 0x38
 8000920:	46bd      	mov	sp, r7
 8000922:	bd80      	pop	{r7, pc}
 8000924:	2000012c 	.word	0x2000012c
 8000928:	40016800 	.word	0x40016800

0800092c <MX_SPI5_Init>:
  * @brief SPI5 Initialization Function
  * @param None
  * @retval None
  */
static void MX_SPI5_Init(void)
{
 800092c:	b580      	push	{r7, lr}
 800092e:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN SPI5_Init 1 */

  /* USER CODE END SPI5_Init 1 */
  /* SPI5 parameter configuration*/
  hspi5.Instance = SPI5;
 8000930:	4b17      	ldr	r3, [pc, #92]	; (8000990 <MX_SPI5_Init+0x64>)
 8000932:	4a18      	ldr	r2, [pc, #96]	; (8000994 <MX_SPI5_Init+0x68>)
 8000934:	601a      	str	r2, [r3, #0]
  hspi5.Init.Mode = SPI_MODE_MASTER;
 8000936:	4b16      	ldr	r3, [pc, #88]	; (8000990 <MX_SPI5_Init+0x64>)
 8000938:	f44f 7282 	mov.w	r2, #260	; 0x104
 800093c:	605a      	str	r2, [r3, #4]
  hspi5.Init.Direction = SPI_DIRECTION_2LINES;
 800093e:	4b14      	ldr	r3, [pc, #80]	; (8000990 <MX_SPI5_Init+0x64>)
 8000940:	2200      	movs	r2, #0
 8000942:	609a      	str	r2, [r3, #8]
  hspi5.Init.DataSize = SPI_DATASIZE_8BIT;
 8000944:	4b12      	ldr	r3, [pc, #72]	; (8000990 <MX_SPI5_Init+0x64>)
 8000946:	2200      	movs	r2, #0
 8000948:	60da      	str	r2, [r3, #12]
  hspi5.Init.CLKPolarity = SPI_POLARITY_LOW;
 800094a:	4b11      	ldr	r3, [pc, #68]	; (8000990 <MX_SPI5_Init+0x64>)
 800094c:	2200      	movs	r2, #0
 800094e:	611a      	str	r2, [r3, #16]
  hspi5.Init.CLKPhase = SPI_PHASE_1EDGE;
 8000950:	4b0f      	ldr	r3, [pc, #60]	; (8000990 <MX_SPI5_Init+0x64>)
 8000952:	2200      	movs	r2, #0
 8000954:	615a      	str	r2, [r3, #20]
  hspi5.Init.NSS = SPI_NSS_SOFT;
 8000956:	4b0e      	ldr	r3, [pc, #56]	; (8000990 <MX_SPI5_Init+0x64>)
 8000958:	f44f 7200 	mov.w	r2, #512	; 0x200
 800095c:	619a      	str	r2, [r3, #24]
  hspi5.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_16;
 800095e:	4b0c      	ldr	r3, [pc, #48]	; (8000990 <MX_SPI5_Init+0x64>)
 8000960:	2218      	movs	r2, #24
 8000962:	61da      	str	r2, [r3, #28]
  hspi5.Init.FirstBit = SPI_FIRSTBIT_MSB;
 8000964:	4b0a      	ldr	r3, [pc, #40]	; (8000990 <MX_SPI5_Init+0x64>)
 8000966:	2200      	movs	r2, #0
 8000968:	621a      	str	r2, [r3, #32]
  hspi5.Init.TIMode = SPI_TIMODE_DISABLE;
 800096a:	4b09      	ldr	r3, [pc, #36]	; (8000990 <MX_SPI5_Init+0x64>)
 800096c:	2200      	movs	r2, #0
 800096e:	625a      	str	r2, [r3, #36]	; 0x24
  hspi5.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8000970:	4b07      	ldr	r3, [pc, #28]	; (8000990 <MX_SPI5_Init+0x64>)
 8000972:	2200      	movs	r2, #0
 8000974:	629a      	str	r2, [r3, #40]	; 0x28
  hspi5.Init.CRCPolynomial = 10;
 8000976:	4b06      	ldr	r3, [pc, #24]	; (8000990 <MX_SPI5_Init+0x64>)
 8000978:	220a      	movs	r2, #10
 800097a:	62da      	str	r2, [r3, #44]	; 0x2c
  if (HAL_SPI_Init(&hspi5) != HAL_OK)
 800097c:	4804      	ldr	r0, [pc, #16]	; (8000990 <MX_SPI5_Init+0x64>)
 800097e:	f004 fa33 	bl	8004de8 <HAL_SPI_Init>
 8000982:	4603      	mov	r3, r0
 8000984:	2b00      	cmp	r3, #0
 8000986:	d001      	beq.n	800098c <MX_SPI5_Init+0x60>
  {
    Error_Handler();
 8000988:	f000 f9f2 	bl	8000d70 <Error_Handler>
  }
  /* USER CODE BEGIN SPI5_Init 2 */

  /* USER CODE END SPI5_Init 2 */

}
 800098c:	bf00      	nop
 800098e:	bd80      	pop	{r7, pc}
 8000990:	200001d4 	.word	0x200001d4
 8000994:	40015000 	.word	0x40015000

08000998 <MX_TIM1_Init>:
  * @brief TIM1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM1_Init(void)
{
 8000998:	b580      	push	{r7, lr}
 800099a:	b086      	sub	sp, #24
 800099c:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM1_Init 0 */

  /* USER CODE END TIM1_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 800099e:	f107 0308 	add.w	r3, r7, #8
 80009a2:	2200      	movs	r2, #0
 80009a4:	601a      	str	r2, [r3, #0]
 80009a6:	605a      	str	r2, [r3, #4]
 80009a8:	609a      	str	r2, [r3, #8]
 80009aa:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 80009ac:	463b      	mov	r3, r7
 80009ae:	2200      	movs	r2, #0
 80009b0:	601a      	str	r2, [r3, #0]
 80009b2:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM1_Init 1 */

  /* USER CODE END TIM1_Init 1 */
  htim1.Instance = TIM1;
 80009b4:	4b1e      	ldr	r3, [pc, #120]	; (8000a30 <MX_TIM1_Init+0x98>)
 80009b6:	4a1f      	ldr	r2, [pc, #124]	; (8000a34 <MX_TIM1_Init+0x9c>)
 80009b8:	601a      	str	r2, [r3, #0]
  htim1.Init.Prescaler = 0;
 80009ba:	4b1d      	ldr	r3, [pc, #116]	; (8000a30 <MX_TIM1_Init+0x98>)
 80009bc:	2200      	movs	r2, #0
 80009be:	605a      	str	r2, [r3, #4]
  htim1.Init.CounterMode = TIM_COUNTERMODE_UP;
 80009c0:	4b1b      	ldr	r3, [pc, #108]	; (8000a30 <MX_TIM1_Init+0x98>)
 80009c2:	2200      	movs	r2, #0
 80009c4:	609a      	str	r2, [r3, #8]
  htim1.Init.Period = 65535;
 80009c6:	4b1a      	ldr	r3, [pc, #104]	; (8000a30 <MX_TIM1_Init+0x98>)
 80009c8:	f64f 72ff 	movw	r2, #65535	; 0xffff
 80009cc:	60da      	str	r2, [r3, #12]
  htim1.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80009ce:	4b18      	ldr	r3, [pc, #96]	; (8000a30 <MX_TIM1_Init+0x98>)
 80009d0:	2200      	movs	r2, #0
 80009d2:	611a      	str	r2, [r3, #16]
  htim1.Init.RepetitionCounter = 0;
 80009d4:	4b16      	ldr	r3, [pc, #88]	; (8000a30 <MX_TIM1_Init+0x98>)
 80009d6:	2200      	movs	r2, #0
 80009d8:	615a      	str	r2, [r3, #20]
  htim1.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 80009da:	4b15      	ldr	r3, [pc, #84]	; (8000a30 <MX_TIM1_Init+0x98>)
 80009dc:	2200      	movs	r2, #0
 80009de:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim1) != HAL_OK)
 80009e0:	4813      	ldr	r0, [pc, #76]	; (8000a30 <MX_TIM1_Init+0x98>)
 80009e2:	f004 fa8a 	bl	8004efa <HAL_TIM_Base_Init>
 80009e6:	4603      	mov	r3, r0
 80009e8:	2b00      	cmp	r3, #0
 80009ea:	d001      	beq.n	80009f0 <MX_TIM1_Init+0x58>
  {
    Error_Handler();
 80009ec:	f000 f9c0 	bl	8000d70 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 80009f0:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80009f4:	60bb      	str	r3, [r7, #8]
  if (HAL_TIM_ConfigClockSource(&htim1, &sClockSourceConfig) != HAL_OK)
 80009f6:	f107 0308 	add.w	r3, r7, #8
 80009fa:	4619      	mov	r1, r3
 80009fc:	480c      	ldr	r0, [pc, #48]	; (8000a30 <MX_TIM1_Init+0x98>)
 80009fe:	f004 fc43 	bl	8005288 <HAL_TIM_ConfigClockSource>
 8000a02:	4603      	mov	r3, r0
 8000a04:	2b00      	cmp	r3, #0
 8000a06:	d001      	beq.n	8000a0c <MX_TIM1_Init+0x74>
  {
    Error_Handler();
 8000a08:	f000 f9b2 	bl	8000d70 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8000a0c:	2300      	movs	r3, #0
 8000a0e:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8000a10:	2300      	movs	r3, #0
 8000a12:	607b      	str	r3, [r7, #4]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim1, &sMasterConfig) != HAL_OK)
 8000a14:	463b      	mov	r3, r7
 8000a16:	4619      	mov	r1, r3
 8000a18:	4805      	ldr	r0, [pc, #20]	; (8000a30 <MX_TIM1_Init+0x98>)
 8000a1a:	f004 fe5f 	bl	80056dc <HAL_TIMEx_MasterConfigSynchronization>
 8000a1e:	4603      	mov	r3, r0
 8000a20:	2b00      	cmp	r3, #0
 8000a22:	d001      	beq.n	8000a28 <MX_TIM1_Init+0x90>
  {
    Error_Handler();
 8000a24:	f000 f9a4 	bl	8000d70 <Error_Handler>
  }
  /* USER CODE BEGIN TIM1_Init 2 */

  /* USER CODE END TIM1_Init 2 */

}
 8000a28:	bf00      	nop
 8000a2a:	3718      	adds	r7, #24
 8000a2c:	46bd      	mov	sp, r7
 8000a2e:	bd80      	pop	{r7, pc}
 8000a30:	2000022c 	.word	0x2000022c
 8000a34:	40010000 	.word	0x40010000

08000a38 <MX_USART1_UART_Init>:
  * @brief USART1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART1_UART_Init(void)
{
 8000a38:	b580      	push	{r7, lr}
 8000a3a:	af00      	add	r7, sp, #0
  /* USER CODE END USART1_Init 0 */

  /* USER CODE BEGIN USART1_Init 1 */

  /* USER CODE END USART1_Init 1 */
  huart1.Instance = USART1;
 8000a3c:	4b11      	ldr	r3, [pc, #68]	; (8000a84 <MX_USART1_UART_Init+0x4c>)
 8000a3e:	4a12      	ldr	r2, [pc, #72]	; (8000a88 <MX_USART1_UART_Init+0x50>)
 8000a40:	601a      	str	r2, [r3, #0]
  huart1.Init.BaudRate = 115200;
 8000a42:	4b10      	ldr	r3, [pc, #64]	; (8000a84 <MX_USART1_UART_Init+0x4c>)
 8000a44:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8000a48:	605a      	str	r2, [r3, #4]
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
 8000a4a:	4b0e      	ldr	r3, [pc, #56]	; (8000a84 <MX_USART1_UART_Init+0x4c>)
 8000a4c:	2200      	movs	r2, #0
 8000a4e:	609a      	str	r2, [r3, #8]
  huart1.Init.StopBits = UART_STOPBITS_1;
 8000a50:	4b0c      	ldr	r3, [pc, #48]	; (8000a84 <MX_USART1_UART_Init+0x4c>)
 8000a52:	2200      	movs	r2, #0
 8000a54:	60da      	str	r2, [r3, #12]
  huart1.Init.Parity = UART_PARITY_NONE;
 8000a56:	4b0b      	ldr	r3, [pc, #44]	; (8000a84 <MX_USART1_UART_Init+0x4c>)
 8000a58:	2200      	movs	r2, #0
 8000a5a:	611a      	str	r2, [r3, #16]
  huart1.Init.Mode = UART_MODE_TX_RX;
 8000a5c:	4b09      	ldr	r3, [pc, #36]	; (8000a84 <MX_USART1_UART_Init+0x4c>)
 8000a5e:	220c      	movs	r2, #12
 8000a60:	615a      	str	r2, [r3, #20]
  huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8000a62:	4b08      	ldr	r3, [pc, #32]	; (8000a84 <MX_USART1_UART_Init+0x4c>)
 8000a64:	2200      	movs	r2, #0
 8000a66:	619a      	str	r2, [r3, #24]
  huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 8000a68:	4b06      	ldr	r3, [pc, #24]	; (8000a84 <MX_USART1_UART_Init+0x4c>)
 8000a6a:	2200      	movs	r2, #0
 8000a6c:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart1) != HAL_OK)
 8000a6e:	4805      	ldr	r0, [pc, #20]	; (8000a84 <MX_USART1_UART_Init+0x4c>)
 8000a70:	f004 fec4 	bl	80057fc <HAL_UART_Init>
 8000a74:	4603      	mov	r3, r0
 8000a76:	2b00      	cmp	r3, #0
 8000a78:	d001      	beq.n	8000a7e <MX_USART1_UART_Init+0x46>
  {
    Error_Handler();
 8000a7a:	f000 f979 	bl	8000d70 <Error_Handler>
  }
  /* USER CODE BEGIN USART1_Init 2 */

  /* USER CODE END USART1_Init 2 */

}
 8000a7e:	bf00      	nop
 8000a80:	bd80      	pop	{r7, pc}
 8000a82:	bf00      	nop
 8000a84:	20000274 	.word	0x20000274
 8000a88:	40011000 	.word	0x40011000

08000a8c <MX_FMC_Init>:

/* FMC initialization function */
static void MX_FMC_Init(void)
{
 8000a8c:	b580      	push	{r7, lr}
 8000a8e:	b088      	sub	sp, #32
 8000a90:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN FMC_Init 0 */

  /* USER CODE END FMC_Init 0 */

  FMC_SDRAM_TimingTypeDef SdramTiming = {0};
 8000a92:	1d3b      	adds	r3, r7, #4
 8000a94:	2200      	movs	r2, #0
 8000a96:	601a      	str	r2, [r3, #0]
 8000a98:	605a      	str	r2, [r3, #4]
 8000a9a:	609a      	str	r2, [r3, #8]
 8000a9c:	60da      	str	r2, [r3, #12]
 8000a9e:	611a      	str	r2, [r3, #16]
 8000aa0:	615a      	str	r2, [r3, #20]
 8000aa2:	619a      	str	r2, [r3, #24]

  /* USER CODE END FMC_Init 1 */

  /** Perform the SDRAM1 memory initialization sequence
  */
  hsdram1.Instance = FMC_SDRAM_DEVICE;
 8000aa4:	4b1f      	ldr	r3, [pc, #124]	; (8000b24 <MX_FMC_Init+0x98>)
 8000aa6:	4a20      	ldr	r2, [pc, #128]	; (8000b28 <MX_FMC_Init+0x9c>)
 8000aa8:	601a      	str	r2, [r3, #0]
  /* hsdram1.Init */
  hsdram1.Init.SDBank = FMC_SDRAM_BANK2;
 8000aaa:	4b1e      	ldr	r3, [pc, #120]	; (8000b24 <MX_FMC_Init+0x98>)
 8000aac:	2201      	movs	r2, #1
 8000aae:	605a      	str	r2, [r3, #4]
  hsdram1.Init.ColumnBitsNumber = FMC_SDRAM_COLUMN_BITS_NUM_8;
 8000ab0:	4b1c      	ldr	r3, [pc, #112]	; (8000b24 <MX_FMC_Init+0x98>)
 8000ab2:	2200      	movs	r2, #0
 8000ab4:	609a      	str	r2, [r3, #8]
  hsdram1.Init.RowBitsNumber = FMC_SDRAM_ROW_BITS_NUM_12;
 8000ab6:	4b1b      	ldr	r3, [pc, #108]	; (8000b24 <MX_FMC_Init+0x98>)
 8000ab8:	2204      	movs	r2, #4
 8000aba:	60da      	str	r2, [r3, #12]
  hsdram1.Init.MemoryDataWidth = FMC_SDRAM_MEM_BUS_WIDTH_16;
 8000abc:	4b19      	ldr	r3, [pc, #100]	; (8000b24 <MX_FMC_Init+0x98>)
 8000abe:	2210      	movs	r2, #16
 8000ac0:	611a      	str	r2, [r3, #16]
  hsdram1.Init.InternalBankNumber = FMC_SDRAM_INTERN_BANKS_NUM_4;
 8000ac2:	4b18      	ldr	r3, [pc, #96]	; (8000b24 <MX_FMC_Init+0x98>)
 8000ac4:	2240      	movs	r2, #64	; 0x40
 8000ac6:	615a      	str	r2, [r3, #20]
  hsdram1.Init.CASLatency = FMC_SDRAM_CAS_LATENCY_3;
 8000ac8:	4b16      	ldr	r3, [pc, #88]	; (8000b24 <MX_FMC_Init+0x98>)
 8000aca:	f44f 72c0 	mov.w	r2, #384	; 0x180
 8000ace:	619a      	str	r2, [r3, #24]
  hsdram1.Init.WriteProtection = FMC_SDRAM_WRITE_PROTECTION_DISABLE;
 8000ad0:	4b14      	ldr	r3, [pc, #80]	; (8000b24 <MX_FMC_Init+0x98>)
 8000ad2:	2200      	movs	r2, #0
 8000ad4:	61da      	str	r2, [r3, #28]
  hsdram1.Init.SDClockPeriod = FMC_SDRAM_CLOCK_PERIOD_2;
 8000ad6:	4b13      	ldr	r3, [pc, #76]	; (8000b24 <MX_FMC_Init+0x98>)
 8000ad8:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8000adc:	621a      	str	r2, [r3, #32]
  hsdram1.Init.ReadBurst = FMC_SDRAM_RBURST_DISABLE;
 8000ade:	4b11      	ldr	r3, [pc, #68]	; (8000b24 <MX_FMC_Init+0x98>)
 8000ae0:	2200      	movs	r2, #0
 8000ae2:	625a      	str	r2, [r3, #36]	; 0x24
  hsdram1.Init.ReadPipeDelay = FMC_SDRAM_RPIPE_DELAY_1;
 8000ae4:	4b0f      	ldr	r3, [pc, #60]	; (8000b24 <MX_FMC_Init+0x98>)
 8000ae6:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 8000aea:	629a      	str	r2, [r3, #40]	; 0x28
  /* SdramTiming */
  SdramTiming.LoadToActiveDelay = 2;
 8000aec:	2302      	movs	r3, #2
 8000aee:	607b      	str	r3, [r7, #4]
  SdramTiming.ExitSelfRefreshDelay = 7;
 8000af0:	2307      	movs	r3, #7
 8000af2:	60bb      	str	r3, [r7, #8]
  SdramTiming.SelfRefreshTime = 4;
 8000af4:	2304      	movs	r3, #4
 8000af6:	60fb      	str	r3, [r7, #12]
  SdramTiming.RowCycleDelay = 7;
 8000af8:	2307      	movs	r3, #7
 8000afa:	613b      	str	r3, [r7, #16]
  SdramTiming.WriteRecoveryTime = 3;
 8000afc:	2303      	movs	r3, #3
 8000afe:	617b      	str	r3, [r7, #20]
  SdramTiming.RPDelay = 2;
 8000b00:	2302      	movs	r3, #2
 8000b02:	61bb      	str	r3, [r7, #24]
  SdramTiming.RCDDelay = 2;
 8000b04:	2302      	movs	r3, #2
 8000b06:	61fb      	str	r3, [r7, #28]

  if (HAL_SDRAM_Init(&hsdram1, &SdramTiming) != HAL_OK)
 8000b08:	1d3b      	adds	r3, r7, #4
 8000b0a:	4619      	mov	r1, r3
 8000b0c:	4805      	ldr	r0, [pc, #20]	; (8000b24 <MX_FMC_Init+0x98>)
 8000b0e:	f004 f937 	bl	8004d80 <HAL_SDRAM_Init>
 8000b12:	4603      	mov	r3, r0
 8000b14:	2b00      	cmp	r3, #0
 8000b16:	d001      	beq.n	8000b1c <MX_FMC_Init+0x90>
  {
    Error_Handler( );
 8000b18:	f000 f92a 	bl	8000d70 <Error_Handler>
  }

  /* USER CODE BEGIN FMC_Init 2 */

  /* USER CODE END FMC_Init 2 */
}
 8000b1c:	bf00      	nop
 8000b1e:	3720      	adds	r7, #32
 8000b20:	46bd      	mov	sp, r7
 8000b22:	bd80      	pop	{r7, pc}
 8000b24:	200002b8 	.word	0x200002b8
 8000b28:	a0000140 	.word	0xa0000140

08000b2c <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8000b2c:	b580      	push	{r7, lr}
 8000b2e:	b08e      	sub	sp, #56	; 0x38
 8000b30:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000b32:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000b36:	2200      	movs	r2, #0
 8000b38:	601a      	str	r2, [r3, #0]
 8000b3a:	605a      	str	r2, [r3, #4]
 8000b3c:	609a      	str	r2, [r3, #8]
 8000b3e:	60da      	str	r2, [r3, #12]
 8000b40:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8000b42:	2300      	movs	r3, #0
 8000b44:	623b      	str	r3, [r7, #32]
 8000b46:	4b7b      	ldr	r3, [pc, #492]	; (8000d34 <MX_GPIO_Init+0x208>)
 8000b48:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000b4a:	4a7a      	ldr	r2, [pc, #488]	; (8000d34 <MX_GPIO_Init+0x208>)
 8000b4c:	f043 0304 	orr.w	r3, r3, #4
 8000b50:	6313      	str	r3, [r2, #48]	; 0x30
 8000b52:	4b78      	ldr	r3, [pc, #480]	; (8000d34 <MX_GPIO_Init+0x208>)
 8000b54:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000b56:	f003 0304 	and.w	r3, r3, #4
 8000b5a:	623b      	str	r3, [r7, #32]
 8000b5c:	6a3b      	ldr	r3, [r7, #32]
  __HAL_RCC_GPIOF_CLK_ENABLE();
 8000b5e:	2300      	movs	r3, #0
 8000b60:	61fb      	str	r3, [r7, #28]
 8000b62:	4b74      	ldr	r3, [pc, #464]	; (8000d34 <MX_GPIO_Init+0x208>)
 8000b64:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000b66:	4a73      	ldr	r2, [pc, #460]	; (8000d34 <MX_GPIO_Init+0x208>)
 8000b68:	f043 0320 	orr.w	r3, r3, #32
 8000b6c:	6313      	str	r3, [r2, #48]	; 0x30
 8000b6e:	4b71      	ldr	r3, [pc, #452]	; (8000d34 <MX_GPIO_Init+0x208>)
 8000b70:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000b72:	f003 0320 	and.w	r3, r3, #32
 8000b76:	61fb      	str	r3, [r7, #28]
 8000b78:	69fb      	ldr	r3, [r7, #28]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 8000b7a:	2300      	movs	r3, #0
 8000b7c:	61bb      	str	r3, [r7, #24]
 8000b7e:	4b6d      	ldr	r3, [pc, #436]	; (8000d34 <MX_GPIO_Init+0x208>)
 8000b80:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000b82:	4a6c      	ldr	r2, [pc, #432]	; (8000d34 <MX_GPIO_Init+0x208>)
 8000b84:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8000b88:	6313      	str	r3, [r2, #48]	; 0x30
 8000b8a:	4b6a      	ldr	r3, [pc, #424]	; (8000d34 <MX_GPIO_Init+0x208>)
 8000b8c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000b8e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8000b92:	61bb      	str	r3, [r7, #24]
 8000b94:	69bb      	ldr	r3, [r7, #24]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000b96:	2300      	movs	r3, #0
 8000b98:	617b      	str	r3, [r7, #20]
 8000b9a:	4b66      	ldr	r3, [pc, #408]	; (8000d34 <MX_GPIO_Init+0x208>)
 8000b9c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000b9e:	4a65      	ldr	r2, [pc, #404]	; (8000d34 <MX_GPIO_Init+0x208>)
 8000ba0:	f043 0301 	orr.w	r3, r3, #1
 8000ba4:	6313      	str	r3, [r2, #48]	; 0x30
 8000ba6:	4b63      	ldr	r3, [pc, #396]	; (8000d34 <MX_GPIO_Init+0x208>)
 8000ba8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000baa:	f003 0301 	and.w	r3, r3, #1
 8000bae:	617b      	str	r3, [r7, #20]
 8000bb0:	697b      	ldr	r3, [r7, #20]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8000bb2:	2300      	movs	r3, #0
 8000bb4:	613b      	str	r3, [r7, #16]
 8000bb6:	4b5f      	ldr	r3, [pc, #380]	; (8000d34 <MX_GPIO_Init+0x208>)
 8000bb8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000bba:	4a5e      	ldr	r2, [pc, #376]	; (8000d34 <MX_GPIO_Init+0x208>)
 8000bbc:	f043 0302 	orr.w	r3, r3, #2
 8000bc0:	6313      	str	r3, [r2, #48]	; 0x30
 8000bc2:	4b5c      	ldr	r3, [pc, #368]	; (8000d34 <MX_GPIO_Init+0x208>)
 8000bc4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000bc6:	f003 0302 	and.w	r3, r3, #2
 8000bca:	613b      	str	r3, [r7, #16]
 8000bcc:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOG_CLK_ENABLE();
 8000bce:	2300      	movs	r3, #0
 8000bd0:	60fb      	str	r3, [r7, #12]
 8000bd2:	4b58      	ldr	r3, [pc, #352]	; (8000d34 <MX_GPIO_Init+0x208>)
 8000bd4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000bd6:	4a57      	ldr	r2, [pc, #348]	; (8000d34 <MX_GPIO_Init+0x208>)
 8000bd8:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8000bdc:	6313      	str	r3, [r2, #48]	; 0x30
 8000bde:	4b55      	ldr	r3, [pc, #340]	; (8000d34 <MX_GPIO_Init+0x208>)
 8000be0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000be2:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8000be6:	60fb      	str	r3, [r7, #12]
 8000be8:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOE_CLK_ENABLE();
 8000bea:	2300      	movs	r3, #0
 8000bec:	60bb      	str	r3, [r7, #8]
 8000bee:	4b51      	ldr	r3, [pc, #324]	; (8000d34 <MX_GPIO_Init+0x208>)
 8000bf0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000bf2:	4a50      	ldr	r2, [pc, #320]	; (8000d34 <MX_GPIO_Init+0x208>)
 8000bf4:	f043 0310 	orr.w	r3, r3, #16
 8000bf8:	6313      	str	r3, [r2, #48]	; 0x30
 8000bfa:	4b4e      	ldr	r3, [pc, #312]	; (8000d34 <MX_GPIO_Init+0x208>)
 8000bfc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000bfe:	f003 0310 	and.w	r3, r3, #16
 8000c02:	60bb      	str	r3, [r7, #8]
 8000c04:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8000c06:	2300      	movs	r3, #0
 8000c08:	607b      	str	r3, [r7, #4]
 8000c0a:	4b4a      	ldr	r3, [pc, #296]	; (8000d34 <MX_GPIO_Init+0x208>)
 8000c0c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000c0e:	4a49      	ldr	r2, [pc, #292]	; (8000d34 <MX_GPIO_Init+0x208>)
 8000c10:	f043 0308 	orr.w	r3, r3, #8
 8000c14:	6313      	str	r3, [r2, #48]	; 0x30
 8000c16:	4b47      	ldr	r3, [pc, #284]	; (8000d34 <MX_GPIO_Init+0x208>)
 8000c18:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000c1a:	f003 0308 	and.w	r3, r3, #8
 8000c1e:	607b      	str	r3, [r7, #4]
 8000c20:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOC, NCS_MEMS_SPI_Pin|CSX_Pin|OTG_FS_PSO_Pin, GPIO_PIN_RESET);
 8000c22:	2200      	movs	r2, #0
 8000c24:	2116      	movs	r1, #22
 8000c26:	4844      	ldr	r0, [pc, #272]	; (8000d38 <MX_GPIO_Init+0x20c>)
 8000c28:	f001 fbb4 	bl	8002394 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(ACP_RST_GPIO_Port, ACP_RST_Pin, GPIO_PIN_RESET);
 8000c2c:	2200      	movs	r2, #0
 8000c2e:	2180      	movs	r1, #128	; 0x80
 8000c30:	4842      	ldr	r0, [pc, #264]	; (8000d3c <MX_GPIO_Init+0x210>)
 8000c32:	f001 fbaf 	bl	8002394 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOD, RDX_Pin|WRX_DCX_Pin, GPIO_PIN_RESET);
 8000c36:	2200      	movs	r2, #0
 8000c38:	f44f 5140 	mov.w	r1, #12288	; 0x3000
 8000c3c:	4840      	ldr	r0, [pc, #256]	; (8000d40 <MX_GPIO_Init+0x214>)
 8000c3e:	f001 fba9 	bl	8002394 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOG, LD3_Pin|LD4_Pin, GPIO_PIN_RESET);
 8000c42:	2200      	movs	r2, #0
 8000c44:	f44f 41c0 	mov.w	r1, #24576	; 0x6000
 8000c48:	483e      	ldr	r0, [pc, #248]	; (8000d44 <MX_GPIO_Init+0x218>)
 8000c4a:	f001 fba3 	bl	8002394 <HAL_GPIO_WritePin>

  /*Configure GPIO pins : NCS_MEMS_SPI_Pin CSX_Pin OTG_FS_PSO_Pin */
  GPIO_InitStruct.Pin = NCS_MEMS_SPI_Pin|CSX_Pin|OTG_FS_PSO_Pin;
 8000c4e:	2316      	movs	r3, #22
 8000c50:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000c52:	2301      	movs	r3, #1
 8000c54:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000c56:	2300      	movs	r3, #0
 8000c58:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000c5a:	2300      	movs	r3, #0
 8000c5c:	633b      	str	r3, [r7, #48]	; 0x30
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8000c5e:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000c62:	4619      	mov	r1, r3
 8000c64:	4834      	ldr	r0, [pc, #208]	; (8000d38 <MX_GPIO_Init+0x20c>)
 8000c66:	f001 f9e9 	bl	800203c <HAL_GPIO_Init>

  /*Configure GPIO pins : B1_Pin MEMS_INT1_Pin MEMS_INT2_Pin TP_INT1_Pin */
  GPIO_InitStruct.Pin = B1_Pin|MEMS_INT1_Pin|MEMS_INT2_Pin|TP_INT1_Pin;
 8000c6a:	f248 0307 	movw	r3, #32775	; 0x8007
 8000c6e:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_EVT_RISING;
 8000c70:	f44f 1390 	mov.w	r3, #1179648	; 0x120000
 8000c74:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000c76:	2300      	movs	r3, #0
 8000c78:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000c7a:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000c7e:	4619      	mov	r1, r3
 8000c80:	482e      	ldr	r0, [pc, #184]	; (8000d3c <MX_GPIO_Init+0x210>)
 8000c82:	f001 f9db 	bl	800203c <HAL_GPIO_Init>

  /*Configure GPIO pin : ACP_RST_Pin */
  GPIO_InitStruct.Pin = ACP_RST_Pin;
 8000c86:	2380      	movs	r3, #128	; 0x80
 8000c88:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000c8a:	2301      	movs	r3, #1
 8000c8c:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000c8e:	2300      	movs	r3, #0
 8000c90:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000c92:	2300      	movs	r3, #0
 8000c94:	633b      	str	r3, [r7, #48]	; 0x30
  HAL_GPIO_Init(ACP_RST_GPIO_Port, &GPIO_InitStruct);
 8000c96:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000c9a:	4619      	mov	r1, r3
 8000c9c:	4827      	ldr	r0, [pc, #156]	; (8000d3c <MX_GPIO_Init+0x210>)
 8000c9e:	f001 f9cd 	bl	800203c <HAL_GPIO_Init>

  /*Configure GPIO pin : OTG_FS_OC_Pin */
  GPIO_InitStruct.Pin = OTG_FS_OC_Pin;
 8000ca2:	2320      	movs	r3, #32
 8000ca4:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_EVT_RISING;
 8000ca6:	f44f 1390 	mov.w	r3, #1179648	; 0x120000
 8000caa:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000cac:	2300      	movs	r3, #0
 8000cae:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(OTG_FS_OC_GPIO_Port, &GPIO_InitStruct);
 8000cb0:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000cb4:	4619      	mov	r1, r3
 8000cb6:	4820      	ldr	r0, [pc, #128]	; (8000d38 <MX_GPIO_Init+0x20c>)
 8000cb8:	f001 f9c0 	bl	800203c <HAL_GPIO_Init>

  /*Configure GPIO pin : BOOT1_Pin */
  GPIO_InitStruct.Pin = BOOT1_Pin;
 8000cbc:	2304      	movs	r3, #4
 8000cbe:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000cc0:	2300      	movs	r3, #0
 8000cc2:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000cc4:	2300      	movs	r3, #0
 8000cc6:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(BOOT1_GPIO_Port, &GPIO_InitStruct);
 8000cc8:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000ccc:	4619      	mov	r1, r3
 8000cce:	481e      	ldr	r0, [pc, #120]	; (8000d48 <MX_GPIO_Init+0x21c>)
 8000cd0:	f001 f9b4 	bl	800203c <HAL_GPIO_Init>

  /*Configure GPIO pin : TE_Pin */
  GPIO_InitStruct.Pin = TE_Pin;
 8000cd4:	f44f 6300 	mov.w	r3, #2048	; 0x800
 8000cd8:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000cda:	2300      	movs	r3, #0
 8000cdc:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000cde:	2300      	movs	r3, #0
 8000ce0:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(TE_GPIO_Port, &GPIO_InitStruct);
 8000ce2:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000ce6:	4619      	mov	r1, r3
 8000ce8:	4815      	ldr	r0, [pc, #84]	; (8000d40 <MX_GPIO_Init+0x214>)
 8000cea:	f001 f9a7 	bl	800203c <HAL_GPIO_Init>

  /*Configure GPIO pins : RDX_Pin WRX_DCX_Pin */
  GPIO_InitStruct.Pin = RDX_Pin|WRX_DCX_Pin;
 8000cee:	f44f 5340 	mov.w	r3, #12288	; 0x3000
 8000cf2:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000cf4:	2301      	movs	r3, #1
 8000cf6:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000cf8:	2300      	movs	r3, #0
 8000cfa:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000cfc:	2300      	movs	r3, #0
 8000cfe:	633b      	str	r3, [r7, #48]	; 0x30
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8000d00:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000d04:	4619      	mov	r1, r3
 8000d06:	480e      	ldr	r0, [pc, #56]	; (8000d40 <MX_GPIO_Init+0x214>)
 8000d08:	f001 f998 	bl	800203c <HAL_GPIO_Init>

  /*Configure GPIO pins : LD3_Pin LD4_Pin */
  GPIO_InitStruct.Pin = LD3_Pin|LD4_Pin;
 8000d0c:	f44f 43c0 	mov.w	r3, #24576	; 0x6000
 8000d10:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000d12:	2301      	movs	r3, #1
 8000d14:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000d16:	2300      	movs	r3, #0
 8000d18:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000d1a:	2300      	movs	r3, #0
 8000d1c:	633b      	str	r3, [r7, #48]	; 0x30
  HAL_GPIO_Init(GPIOG, &GPIO_InitStruct);
 8000d1e:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000d22:	4619      	mov	r1, r3
 8000d24:	4807      	ldr	r0, [pc, #28]	; (8000d44 <MX_GPIO_Init+0x218>)
 8000d26:	f001 f989 	bl	800203c <HAL_GPIO_Init>

}
 8000d2a:	bf00      	nop
 8000d2c:	3738      	adds	r7, #56	; 0x38
 8000d2e:	46bd      	mov	sp, r7
 8000d30:	bd80      	pop	{r7, pc}
 8000d32:	bf00      	nop
 8000d34:	40023800 	.word	0x40023800
 8000d38:	40020800 	.word	0x40020800
 8000d3c:	40020000 	.word	0x40020000
 8000d40:	40020c00 	.word	0x40020c00
 8000d44:	40021800 	.word	0x40021800
 8000d48:	40020400 	.word	0x40020400

08000d4c <HAL_TIM_PeriodElapsedCallback>:
  * a global variable "uwTick" used as application time base.
  * @param  htim : TIM handle
  * @retval None
  */
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 8000d4c:	b580      	push	{r7, lr}
 8000d4e:	b082      	sub	sp, #8
 8000d50:	af00      	add	r7, sp, #0
 8000d52:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN Callback 0 */

  /* USER CODE END Callback 0 */
  if (htim->Instance == TIM6) {
 8000d54:	687b      	ldr	r3, [r7, #4]
 8000d56:	681b      	ldr	r3, [r3, #0]
 8000d58:	4a04      	ldr	r2, [pc, #16]	; (8000d6c <HAL_TIM_PeriodElapsedCallback+0x20>)
 8000d5a:	4293      	cmp	r3, r2
 8000d5c:	d101      	bne.n	8000d62 <HAL_TIM_PeriodElapsedCallback+0x16>
    HAL_IncTick();
 8000d5e:	f000 fe63 	bl	8001a28 <HAL_IncTick>
  }
  /* USER CODE BEGIN Callback 1 */

  /* USER CODE END Callback 1 */
}
 8000d62:	bf00      	nop
 8000d64:	3708      	adds	r7, #8
 8000d66:	46bd      	mov	sp, r7
 8000d68:	bd80      	pop	{r7, pc}
 8000d6a:	bf00      	nop
 8000d6c:	40001000 	.word	0x40001000

08000d70 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8000d70:	b480      	push	{r7}
 8000d72:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8000d74:	b672      	cpsid	i
}
 8000d76:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8000d78:	e7fe      	b.n	8000d78 <Error_Handler+0x8>
	...

08000d7c <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000d7c:	b580      	push	{r7, lr}
 8000d7e:	b082      	sub	sp, #8
 8000d80:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000d82:	2300      	movs	r3, #0
 8000d84:	607b      	str	r3, [r7, #4]
 8000d86:	4b12      	ldr	r3, [pc, #72]	; (8000dd0 <HAL_MspInit+0x54>)
 8000d88:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000d8a:	4a11      	ldr	r2, [pc, #68]	; (8000dd0 <HAL_MspInit+0x54>)
 8000d8c:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8000d90:	6453      	str	r3, [r2, #68]	; 0x44
 8000d92:	4b0f      	ldr	r3, [pc, #60]	; (8000dd0 <HAL_MspInit+0x54>)
 8000d94:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000d96:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8000d9a:	607b      	str	r3, [r7, #4]
 8000d9c:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8000d9e:	2300      	movs	r3, #0
 8000da0:	603b      	str	r3, [r7, #0]
 8000da2:	4b0b      	ldr	r3, [pc, #44]	; (8000dd0 <HAL_MspInit+0x54>)
 8000da4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000da6:	4a0a      	ldr	r2, [pc, #40]	; (8000dd0 <HAL_MspInit+0x54>)
 8000da8:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8000dac:	6413      	str	r3, [r2, #64]	; 0x40
 8000dae:	4b08      	ldr	r3, [pc, #32]	; (8000dd0 <HAL_MspInit+0x54>)
 8000db0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000db2:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000db6:	603b      	str	r3, [r7, #0]
 8000db8:	683b      	ldr	r3, [r7, #0]

  /* System interrupt init*/
  /* PendSV_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(PendSV_IRQn, 15, 0);
 8000dba:	2200      	movs	r2, #0
 8000dbc:	210f      	movs	r1, #15
 8000dbe:	f06f 0001 	mvn.w	r0, #1
 8000dc2:	f000 ff09 	bl	8001bd8 <HAL_NVIC_SetPriority>

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8000dc6:	bf00      	nop
 8000dc8:	3708      	adds	r7, #8
 8000dca:	46bd      	mov	sp, r7
 8000dcc:	bd80      	pop	{r7, pc}
 8000dce:	bf00      	nop
 8000dd0:	40023800 	.word	0x40023800

08000dd4 <HAL_CRC_MspInit>:
* This function configures the hardware resources used in this example
* @param hcrc: CRC handle pointer
* @retval None
*/
void HAL_CRC_MspInit(CRC_HandleTypeDef* hcrc)
{
 8000dd4:	b480      	push	{r7}
 8000dd6:	b085      	sub	sp, #20
 8000dd8:	af00      	add	r7, sp, #0
 8000dda:	6078      	str	r0, [r7, #4]
  if(hcrc->Instance==CRC)
 8000ddc:	687b      	ldr	r3, [r7, #4]
 8000dde:	681b      	ldr	r3, [r3, #0]
 8000de0:	4a0b      	ldr	r2, [pc, #44]	; (8000e10 <HAL_CRC_MspInit+0x3c>)
 8000de2:	4293      	cmp	r3, r2
 8000de4:	d10d      	bne.n	8000e02 <HAL_CRC_MspInit+0x2e>
  {
  /* USER CODE BEGIN CRC_MspInit 0 */

  /* USER CODE END CRC_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_CRC_CLK_ENABLE();
 8000de6:	2300      	movs	r3, #0
 8000de8:	60fb      	str	r3, [r7, #12]
 8000dea:	4b0a      	ldr	r3, [pc, #40]	; (8000e14 <HAL_CRC_MspInit+0x40>)
 8000dec:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000dee:	4a09      	ldr	r2, [pc, #36]	; (8000e14 <HAL_CRC_MspInit+0x40>)
 8000df0:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 8000df4:	6313      	str	r3, [r2, #48]	; 0x30
 8000df6:	4b07      	ldr	r3, [pc, #28]	; (8000e14 <HAL_CRC_MspInit+0x40>)
 8000df8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000dfa:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8000dfe:	60fb      	str	r3, [r7, #12]
 8000e00:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN CRC_MspInit 1 */

  /* USER CODE END CRC_MspInit 1 */
  }

}
 8000e02:	bf00      	nop
 8000e04:	3714      	adds	r7, #20
 8000e06:	46bd      	mov	sp, r7
 8000e08:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e0c:	4770      	bx	lr
 8000e0e:	bf00      	nop
 8000e10:	40023000 	.word	0x40023000
 8000e14:	40023800 	.word	0x40023800

08000e18 <HAL_DMA2D_MspInit>:
* This function configures the hardware resources used in this example
* @param hdma2d: DMA2D handle pointer
* @retval None
*/
void HAL_DMA2D_MspInit(DMA2D_HandleTypeDef* hdma2d)
{
 8000e18:	b580      	push	{r7, lr}
 8000e1a:	b084      	sub	sp, #16
 8000e1c:	af00      	add	r7, sp, #0
 8000e1e:	6078      	str	r0, [r7, #4]
  if(hdma2d->Instance==DMA2D)
 8000e20:	687b      	ldr	r3, [r7, #4]
 8000e22:	681b      	ldr	r3, [r3, #0]
 8000e24:	4a0e      	ldr	r2, [pc, #56]	; (8000e60 <HAL_DMA2D_MspInit+0x48>)
 8000e26:	4293      	cmp	r3, r2
 8000e28:	d115      	bne.n	8000e56 <HAL_DMA2D_MspInit+0x3e>
  {
  /* USER CODE BEGIN DMA2D_MspInit 0 */

  /* USER CODE END DMA2D_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_DMA2D_CLK_ENABLE();
 8000e2a:	2300      	movs	r3, #0
 8000e2c:	60fb      	str	r3, [r7, #12]
 8000e2e:	4b0d      	ldr	r3, [pc, #52]	; (8000e64 <HAL_DMA2D_MspInit+0x4c>)
 8000e30:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000e32:	4a0c      	ldr	r2, [pc, #48]	; (8000e64 <HAL_DMA2D_MspInit+0x4c>)
 8000e34:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
 8000e38:	6313      	str	r3, [r2, #48]	; 0x30
 8000e3a:	4b0a      	ldr	r3, [pc, #40]	; (8000e64 <HAL_DMA2D_MspInit+0x4c>)
 8000e3c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000e3e:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8000e42:	60fb      	str	r3, [r7, #12]
 8000e44:	68fb      	ldr	r3, [r7, #12]
    /* DMA2D interrupt Init */
    HAL_NVIC_SetPriority(DMA2D_IRQn, 5, 0);
 8000e46:	2200      	movs	r2, #0
 8000e48:	2105      	movs	r1, #5
 8000e4a:	205a      	movs	r0, #90	; 0x5a
 8000e4c:	f000 fec4 	bl	8001bd8 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(DMA2D_IRQn);
 8000e50:	205a      	movs	r0, #90	; 0x5a
 8000e52:	f000 fedd 	bl	8001c10 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN DMA2D_MspInit 1 */

  /* USER CODE END DMA2D_MspInit 1 */
  }

}
 8000e56:	bf00      	nop
 8000e58:	3710      	adds	r7, #16
 8000e5a:	46bd      	mov	sp, r7
 8000e5c:	bd80      	pop	{r7, pc}
 8000e5e:	bf00      	nop
 8000e60:	4002b000 	.word	0x4002b000
 8000e64:	40023800 	.word	0x40023800

08000e68 <HAL_I2C_MspInit>:
* This function configures the hardware resources used in this example
* @param hi2c: I2C handle pointer
* @retval None
*/
void HAL_I2C_MspInit(I2C_HandleTypeDef* hi2c)
{
 8000e68:	b580      	push	{r7, lr}
 8000e6a:	b08a      	sub	sp, #40	; 0x28
 8000e6c:	af00      	add	r7, sp, #0
 8000e6e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000e70:	f107 0314 	add.w	r3, r7, #20
 8000e74:	2200      	movs	r2, #0
 8000e76:	601a      	str	r2, [r3, #0]
 8000e78:	605a      	str	r2, [r3, #4]
 8000e7a:	609a      	str	r2, [r3, #8]
 8000e7c:	60da      	str	r2, [r3, #12]
 8000e7e:	611a      	str	r2, [r3, #16]
  if(hi2c->Instance==I2C3)
 8000e80:	687b      	ldr	r3, [r7, #4]
 8000e82:	681b      	ldr	r3, [r3, #0]
 8000e84:	4a29      	ldr	r2, [pc, #164]	; (8000f2c <HAL_I2C_MspInit+0xc4>)
 8000e86:	4293      	cmp	r3, r2
 8000e88:	d14b      	bne.n	8000f22 <HAL_I2C_MspInit+0xba>
  {
  /* USER CODE BEGIN I2C3_MspInit 0 */

  /* USER CODE END I2C3_MspInit 0 */

    __HAL_RCC_GPIOC_CLK_ENABLE();
 8000e8a:	2300      	movs	r3, #0
 8000e8c:	613b      	str	r3, [r7, #16]
 8000e8e:	4b28      	ldr	r3, [pc, #160]	; (8000f30 <HAL_I2C_MspInit+0xc8>)
 8000e90:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000e92:	4a27      	ldr	r2, [pc, #156]	; (8000f30 <HAL_I2C_MspInit+0xc8>)
 8000e94:	f043 0304 	orr.w	r3, r3, #4
 8000e98:	6313      	str	r3, [r2, #48]	; 0x30
 8000e9a:	4b25      	ldr	r3, [pc, #148]	; (8000f30 <HAL_I2C_MspInit+0xc8>)
 8000e9c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000e9e:	f003 0304 	and.w	r3, r3, #4
 8000ea2:	613b      	str	r3, [r7, #16]
 8000ea4:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000ea6:	2300      	movs	r3, #0
 8000ea8:	60fb      	str	r3, [r7, #12]
 8000eaa:	4b21      	ldr	r3, [pc, #132]	; (8000f30 <HAL_I2C_MspInit+0xc8>)
 8000eac:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000eae:	4a20      	ldr	r2, [pc, #128]	; (8000f30 <HAL_I2C_MspInit+0xc8>)
 8000eb0:	f043 0301 	orr.w	r3, r3, #1
 8000eb4:	6313      	str	r3, [r2, #48]	; 0x30
 8000eb6:	4b1e      	ldr	r3, [pc, #120]	; (8000f30 <HAL_I2C_MspInit+0xc8>)
 8000eb8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000eba:	f003 0301 	and.w	r3, r3, #1
 8000ebe:	60fb      	str	r3, [r7, #12]
 8000ec0:	68fb      	ldr	r3, [r7, #12]
    /**I2C3 GPIO Configuration
    PC9     ------> I2C3_SDA
    PA8     ------> I2C3_SCL
    */
    GPIO_InitStruct.Pin = I2C3_SDA_Pin;
 8000ec2:	f44f 7300 	mov.w	r3, #512	; 0x200
 8000ec6:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8000ec8:	2312      	movs	r3, #18
 8000eca:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 8000ecc:	2301      	movs	r3, #1
 8000ece:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000ed0:	2300      	movs	r3, #0
 8000ed2:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C3;
 8000ed4:	2304      	movs	r3, #4
 8000ed6:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(I2C3_SDA_GPIO_Port, &GPIO_InitStruct);
 8000ed8:	f107 0314 	add.w	r3, r7, #20
 8000edc:	4619      	mov	r1, r3
 8000ede:	4815      	ldr	r0, [pc, #84]	; (8000f34 <HAL_I2C_MspInit+0xcc>)
 8000ee0:	f001 f8ac 	bl	800203c <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = I2C3_SCL_Pin;
 8000ee4:	f44f 7380 	mov.w	r3, #256	; 0x100
 8000ee8:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8000eea:	2312      	movs	r3, #18
 8000eec:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 8000eee:	2301      	movs	r3, #1
 8000ef0:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000ef2:	2300      	movs	r3, #0
 8000ef4:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C3;
 8000ef6:	2304      	movs	r3, #4
 8000ef8:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(I2C3_SCL_GPIO_Port, &GPIO_InitStruct);
 8000efa:	f107 0314 	add.w	r3, r7, #20
 8000efe:	4619      	mov	r1, r3
 8000f00:	480d      	ldr	r0, [pc, #52]	; (8000f38 <HAL_I2C_MspInit+0xd0>)
 8000f02:	f001 f89b 	bl	800203c <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_I2C3_CLK_ENABLE();
 8000f06:	2300      	movs	r3, #0
 8000f08:	60bb      	str	r3, [r7, #8]
 8000f0a:	4b09      	ldr	r3, [pc, #36]	; (8000f30 <HAL_I2C_MspInit+0xc8>)
 8000f0c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000f0e:	4a08      	ldr	r2, [pc, #32]	; (8000f30 <HAL_I2C_MspInit+0xc8>)
 8000f10:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
 8000f14:	6413      	str	r3, [r2, #64]	; 0x40
 8000f16:	4b06      	ldr	r3, [pc, #24]	; (8000f30 <HAL_I2C_MspInit+0xc8>)
 8000f18:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000f1a:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8000f1e:	60bb      	str	r3, [r7, #8]
 8000f20:	68bb      	ldr	r3, [r7, #8]
  /* USER CODE BEGIN I2C3_MspInit 1 */

  /* USER CODE END I2C3_MspInit 1 */
  }

}
 8000f22:	bf00      	nop
 8000f24:	3728      	adds	r7, #40	; 0x28
 8000f26:	46bd      	mov	sp, r7
 8000f28:	bd80      	pop	{r7, pc}
 8000f2a:	bf00      	nop
 8000f2c:	40005c00 	.word	0x40005c00
 8000f30:	40023800 	.word	0x40023800
 8000f34:	40020800 	.word	0x40020800
 8000f38:	40020000 	.word	0x40020000

08000f3c <HAL_LTDC_MspInit>:
* This function configures the hardware resources used in this example
* @param hltdc: LTDC handle pointer
* @retval None
*/
void HAL_LTDC_MspInit(LTDC_HandleTypeDef* hltdc)
{
 8000f3c:	b580      	push	{r7, lr}
 8000f3e:	b09a      	sub	sp, #104	; 0x68
 8000f40:	af00      	add	r7, sp, #0
 8000f42:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000f44:	f107 0354 	add.w	r3, r7, #84	; 0x54
 8000f48:	2200      	movs	r2, #0
 8000f4a:	601a      	str	r2, [r3, #0]
 8000f4c:	605a      	str	r2, [r3, #4]
 8000f4e:	609a      	str	r2, [r3, #8]
 8000f50:	60da      	str	r2, [r3, #12]
 8000f52:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8000f54:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000f58:	2230      	movs	r2, #48	; 0x30
 8000f5a:	2100      	movs	r1, #0
 8000f5c:	4618      	mov	r0, r3
 8000f5e:	f009 f971 	bl	800a244 <memset>
  if(hltdc->Instance==LTDC)
 8000f62:	687b      	ldr	r3, [r7, #4]
 8000f64:	681b      	ldr	r3, [r3, #0]
 8000f66:	4a85      	ldr	r2, [pc, #532]	; (800117c <HAL_LTDC_MspInit+0x240>)
 8000f68:	4293      	cmp	r3, r2
 8000f6a:	f040 8102 	bne.w	8001172 <HAL_LTDC_MspInit+0x236>

  /* USER CODE END LTDC_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_LTDC;
 8000f6e:	2308      	movs	r3, #8
 8000f70:	627b      	str	r3, [r7, #36]	; 0x24
    PeriphClkInitStruct.PLLSAI.PLLSAIN = 50;
 8000f72:	2332      	movs	r3, #50	; 0x32
 8000f74:	637b      	str	r3, [r7, #52]	; 0x34
    PeriphClkInitStruct.PLLSAI.PLLSAIR = 2;
 8000f76:	2302      	movs	r3, #2
 8000f78:	63fb      	str	r3, [r7, #60]	; 0x3c
    PeriphClkInitStruct.PLLSAIDivR = RCC_PLLSAIDIVR_2;
 8000f7a:	2300      	movs	r3, #0
 8000f7c:	64bb      	str	r3, [r7, #72]	; 0x48
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8000f7e:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000f82:	4618      	mov	r0, r3
 8000f84:	f003 fd3c 	bl	8004a00 <HAL_RCCEx_PeriphCLKConfig>
 8000f88:	4603      	mov	r3, r0
 8000f8a:	2b00      	cmp	r3, #0
 8000f8c:	d001      	beq.n	8000f92 <HAL_LTDC_MspInit+0x56>
    {
      Error_Handler();
 8000f8e:	f7ff feef 	bl	8000d70 <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_LTDC_CLK_ENABLE();
 8000f92:	2300      	movs	r3, #0
 8000f94:	623b      	str	r3, [r7, #32]
 8000f96:	4b7a      	ldr	r3, [pc, #488]	; (8001180 <HAL_LTDC_MspInit+0x244>)
 8000f98:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000f9a:	4a79      	ldr	r2, [pc, #484]	; (8001180 <HAL_LTDC_MspInit+0x244>)
 8000f9c:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 8000fa0:	6453      	str	r3, [r2, #68]	; 0x44
 8000fa2:	4b77      	ldr	r3, [pc, #476]	; (8001180 <HAL_LTDC_MspInit+0x244>)
 8000fa4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000fa6:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 8000faa:	623b      	str	r3, [r7, #32]
 8000fac:	6a3b      	ldr	r3, [r7, #32]

    __HAL_RCC_GPIOF_CLK_ENABLE();
 8000fae:	2300      	movs	r3, #0
 8000fb0:	61fb      	str	r3, [r7, #28]
 8000fb2:	4b73      	ldr	r3, [pc, #460]	; (8001180 <HAL_LTDC_MspInit+0x244>)
 8000fb4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000fb6:	4a72      	ldr	r2, [pc, #456]	; (8001180 <HAL_LTDC_MspInit+0x244>)
 8000fb8:	f043 0320 	orr.w	r3, r3, #32
 8000fbc:	6313      	str	r3, [r2, #48]	; 0x30
 8000fbe:	4b70      	ldr	r3, [pc, #448]	; (8001180 <HAL_LTDC_MspInit+0x244>)
 8000fc0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000fc2:	f003 0320 	and.w	r3, r3, #32
 8000fc6:	61fb      	str	r3, [r7, #28]
 8000fc8:	69fb      	ldr	r3, [r7, #28]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000fca:	2300      	movs	r3, #0
 8000fcc:	61bb      	str	r3, [r7, #24]
 8000fce:	4b6c      	ldr	r3, [pc, #432]	; (8001180 <HAL_LTDC_MspInit+0x244>)
 8000fd0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000fd2:	4a6b      	ldr	r2, [pc, #428]	; (8001180 <HAL_LTDC_MspInit+0x244>)
 8000fd4:	f043 0301 	orr.w	r3, r3, #1
 8000fd8:	6313      	str	r3, [r2, #48]	; 0x30
 8000fda:	4b69      	ldr	r3, [pc, #420]	; (8001180 <HAL_LTDC_MspInit+0x244>)
 8000fdc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000fde:	f003 0301 	and.w	r3, r3, #1
 8000fe2:	61bb      	str	r3, [r7, #24]
 8000fe4:	69bb      	ldr	r3, [r7, #24]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8000fe6:	2300      	movs	r3, #0
 8000fe8:	617b      	str	r3, [r7, #20]
 8000fea:	4b65      	ldr	r3, [pc, #404]	; (8001180 <HAL_LTDC_MspInit+0x244>)
 8000fec:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000fee:	4a64      	ldr	r2, [pc, #400]	; (8001180 <HAL_LTDC_MspInit+0x244>)
 8000ff0:	f043 0302 	orr.w	r3, r3, #2
 8000ff4:	6313      	str	r3, [r2, #48]	; 0x30
 8000ff6:	4b62      	ldr	r3, [pc, #392]	; (8001180 <HAL_LTDC_MspInit+0x244>)
 8000ff8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000ffa:	f003 0302 	and.w	r3, r3, #2
 8000ffe:	617b      	str	r3, [r7, #20]
 8001000:	697b      	ldr	r3, [r7, #20]
    __HAL_RCC_GPIOG_CLK_ENABLE();
 8001002:	2300      	movs	r3, #0
 8001004:	613b      	str	r3, [r7, #16]
 8001006:	4b5e      	ldr	r3, [pc, #376]	; (8001180 <HAL_LTDC_MspInit+0x244>)
 8001008:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800100a:	4a5d      	ldr	r2, [pc, #372]	; (8001180 <HAL_LTDC_MspInit+0x244>)
 800100c:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8001010:	6313      	str	r3, [r2, #48]	; 0x30
 8001012:	4b5b      	ldr	r3, [pc, #364]	; (8001180 <HAL_LTDC_MspInit+0x244>)
 8001014:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001016:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800101a:	613b      	str	r3, [r7, #16]
 800101c:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOC_CLK_ENABLE();
 800101e:	2300      	movs	r3, #0
 8001020:	60fb      	str	r3, [r7, #12]
 8001022:	4b57      	ldr	r3, [pc, #348]	; (8001180 <HAL_LTDC_MspInit+0x244>)
 8001024:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001026:	4a56      	ldr	r2, [pc, #344]	; (8001180 <HAL_LTDC_MspInit+0x244>)
 8001028:	f043 0304 	orr.w	r3, r3, #4
 800102c:	6313      	str	r3, [r2, #48]	; 0x30
 800102e:	4b54      	ldr	r3, [pc, #336]	; (8001180 <HAL_LTDC_MspInit+0x244>)
 8001030:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001032:	f003 0304 	and.w	r3, r3, #4
 8001036:	60fb      	str	r3, [r7, #12]
 8001038:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOD_CLK_ENABLE();
 800103a:	2300      	movs	r3, #0
 800103c:	60bb      	str	r3, [r7, #8]
 800103e:	4b50      	ldr	r3, [pc, #320]	; (8001180 <HAL_LTDC_MspInit+0x244>)
 8001040:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001042:	4a4f      	ldr	r2, [pc, #316]	; (8001180 <HAL_LTDC_MspInit+0x244>)
 8001044:	f043 0308 	orr.w	r3, r3, #8
 8001048:	6313      	str	r3, [r2, #48]	; 0x30
 800104a:	4b4d      	ldr	r3, [pc, #308]	; (8001180 <HAL_LTDC_MspInit+0x244>)
 800104c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800104e:	f003 0308 	and.w	r3, r3, #8
 8001052:	60bb      	str	r3, [r7, #8]
 8001054:	68bb      	ldr	r3, [r7, #8]
    PG11     ------> LTDC_B3
    PG12     ------> LTDC_B4
    PB8     ------> LTDC_B6
    PB9     ------> LTDC_B7
    */
    GPIO_InitStruct.Pin = ENABLE_Pin;
 8001056:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800105a:	657b      	str	r3, [r7, #84]	; 0x54
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800105c:	2302      	movs	r3, #2
 800105e:	65bb      	str	r3, [r7, #88]	; 0x58
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001060:	2300      	movs	r3, #0
 8001062:	65fb      	str	r3, [r7, #92]	; 0x5c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001064:	2300      	movs	r3, #0
 8001066:	663b      	str	r3, [r7, #96]	; 0x60
    GPIO_InitStruct.Alternate = GPIO_AF14_LTDC;
 8001068:	230e      	movs	r3, #14
 800106a:	667b      	str	r3, [r7, #100]	; 0x64
    HAL_GPIO_Init(ENABLE_GPIO_Port, &GPIO_InitStruct);
 800106c:	f107 0354 	add.w	r3, r7, #84	; 0x54
 8001070:	4619      	mov	r1, r3
 8001072:	4844      	ldr	r0, [pc, #272]	; (8001184 <HAL_LTDC_MspInit+0x248>)
 8001074:	f000 ffe2 	bl	800203c <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = B5_Pin|VSYNC_Pin|G2_Pin|R4_Pin
 8001078:	f641 0358 	movw	r3, #6232	; 0x1858
 800107c:	657b      	str	r3, [r7, #84]	; 0x54
                          |R5_Pin;
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800107e:	2302      	movs	r3, #2
 8001080:	65bb      	str	r3, [r7, #88]	; 0x58
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001082:	2300      	movs	r3, #0
 8001084:	65fb      	str	r3, [r7, #92]	; 0x5c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001086:	2300      	movs	r3, #0
 8001088:	663b      	str	r3, [r7, #96]	; 0x60
    GPIO_InitStruct.Alternate = GPIO_AF14_LTDC;
 800108a:	230e      	movs	r3, #14
 800108c:	667b      	str	r3, [r7, #100]	; 0x64
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800108e:	f107 0354 	add.w	r3, r7, #84	; 0x54
 8001092:	4619      	mov	r1, r3
 8001094:	483c      	ldr	r0, [pc, #240]	; (8001188 <HAL_LTDC_MspInit+0x24c>)
 8001096:	f000 ffd1 	bl	800203c <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = R3_Pin|R6_Pin;
 800109a:	2303      	movs	r3, #3
 800109c:	657b      	str	r3, [r7, #84]	; 0x54
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800109e:	2302      	movs	r3, #2
 80010a0:	65bb      	str	r3, [r7, #88]	; 0x58
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80010a2:	2300      	movs	r3, #0
 80010a4:	65fb      	str	r3, [r7, #92]	; 0x5c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80010a6:	2300      	movs	r3, #0
 80010a8:	663b      	str	r3, [r7, #96]	; 0x60
    GPIO_InitStruct.Alternate = GPIO_AF9_LTDC;
 80010aa:	2309      	movs	r3, #9
 80010ac:	667b      	str	r3, [r7, #100]	; 0x64
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80010ae:	f107 0354 	add.w	r3, r7, #84	; 0x54
 80010b2:	4619      	mov	r1, r3
 80010b4:	4835      	ldr	r0, [pc, #212]	; (800118c <HAL_LTDC_MspInit+0x250>)
 80010b6:	f000 ffc1 	bl	800203c <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = G4_Pin|G5_Pin|B6_Pin|B7_Pin;
 80010ba:	f44f 6370 	mov.w	r3, #3840	; 0xf00
 80010be:	657b      	str	r3, [r7, #84]	; 0x54
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80010c0:	2302      	movs	r3, #2
 80010c2:	65bb      	str	r3, [r7, #88]	; 0x58
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80010c4:	2300      	movs	r3, #0
 80010c6:	65fb      	str	r3, [r7, #92]	; 0x5c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80010c8:	2300      	movs	r3, #0
 80010ca:	663b      	str	r3, [r7, #96]	; 0x60
    GPIO_InitStruct.Alternate = GPIO_AF14_LTDC;
 80010cc:	230e      	movs	r3, #14
 80010ce:	667b      	str	r3, [r7, #100]	; 0x64
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80010d0:	f107 0354 	add.w	r3, r7, #84	; 0x54
 80010d4:	4619      	mov	r1, r3
 80010d6:	482d      	ldr	r0, [pc, #180]	; (800118c <HAL_LTDC_MspInit+0x250>)
 80010d8:	f000 ffb0 	bl	800203c <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = R7_Pin|DOTCLK_Pin|B3_Pin;
 80010dc:	f44f 630c 	mov.w	r3, #2240	; 0x8c0
 80010e0:	657b      	str	r3, [r7, #84]	; 0x54
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80010e2:	2302      	movs	r3, #2
 80010e4:	65bb      	str	r3, [r7, #88]	; 0x58
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80010e6:	2300      	movs	r3, #0
 80010e8:	65fb      	str	r3, [r7, #92]	; 0x5c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80010ea:	2300      	movs	r3, #0
 80010ec:	663b      	str	r3, [r7, #96]	; 0x60
    GPIO_InitStruct.Alternate = GPIO_AF14_LTDC;
 80010ee:	230e      	movs	r3, #14
 80010f0:	667b      	str	r3, [r7, #100]	; 0x64
    HAL_GPIO_Init(GPIOG, &GPIO_InitStruct);
 80010f2:	f107 0354 	add.w	r3, r7, #84	; 0x54
 80010f6:	4619      	mov	r1, r3
 80010f8:	4825      	ldr	r0, [pc, #148]	; (8001190 <HAL_LTDC_MspInit+0x254>)
 80010fa:	f000 ff9f 	bl	800203c <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = HSYNC_Pin|G6_Pin|R2_Pin;
 80010fe:	f44f 6398 	mov.w	r3, #1216	; 0x4c0
 8001102:	657b      	str	r3, [r7, #84]	; 0x54
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001104:	2302      	movs	r3, #2
 8001106:	65bb      	str	r3, [r7, #88]	; 0x58
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001108:	2300      	movs	r3, #0
 800110a:	65fb      	str	r3, [r7, #92]	; 0x5c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800110c:	2300      	movs	r3, #0
 800110e:	663b      	str	r3, [r7, #96]	; 0x60
    GPIO_InitStruct.Alternate = GPIO_AF14_LTDC;
 8001110:	230e      	movs	r3, #14
 8001112:	667b      	str	r3, [r7, #100]	; 0x64
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8001114:	f107 0354 	add.w	r3, r7, #84	; 0x54
 8001118:	4619      	mov	r1, r3
 800111a:	481e      	ldr	r0, [pc, #120]	; (8001194 <HAL_LTDC_MspInit+0x258>)
 800111c:	f000 ff8e 	bl	800203c <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = G7_Pin|B2_Pin;
 8001120:	2348      	movs	r3, #72	; 0x48
 8001122:	657b      	str	r3, [r7, #84]	; 0x54
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001124:	2302      	movs	r3, #2
 8001126:	65bb      	str	r3, [r7, #88]	; 0x58
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001128:	2300      	movs	r3, #0
 800112a:	65fb      	str	r3, [r7, #92]	; 0x5c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800112c:	2300      	movs	r3, #0
 800112e:	663b      	str	r3, [r7, #96]	; 0x60
    GPIO_InitStruct.Alternate = GPIO_AF14_LTDC;
 8001130:	230e      	movs	r3, #14
 8001132:	667b      	str	r3, [r7, #100]	; 0x64
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8001134:	f107 0354 	add.w	r3, r7, #84	; 0x54
 8001138:	4619      	mov	r1, r3
 800113a:	4817      	ldr	r0, [pc, #92]	; (8001198 <HAL_LTDC_MspInit+0x25c>)
 800113c:	f000 ff7e 	bl	800203c <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = G3_Pin|B4_Pin;
 8001140:	f44f 53a0 	mov.w	r3, #5120	; 0x1400
 8001144:	657b      	str	r3, [r7, #84]	; 0x54
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001146:	2302      	movs	r3, #2
 8001148:	65bb      	str	r3, [r7, #88]	; 0x58
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800114a:	2300      	movs	r3, #0
 800114c:	65fb      	str	r3, [r7, #92]	; 0x5c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800114e:	2300      	movs	r3, #0
 8001150:	663b      	str	r3, [r7, #96]	; 0x60
    GPIO_InitStruct.Alternate = GPIO_AF9_LTDC;
 8001152:	2309      	movs	r3, #9
 8001154:	667b      	str	r3, [r7, #100]	; 0x64
    HAL_GPIO_Init(GPIOG, &GPIO_InitStruct);
 8001156:	f107 0354 	add.w	r3, r7, #84	; 0x54
 800115a:	4619      	mov	r1, r3
 800115c:	480c      	ldr	r0, [pc, #48]	; (8001190 <HAL_LTDC_MspInit+0x254>)
 800115e:	f000 ff6d 	bl	800203c <HAL_GPIO_Init>

    /* LTDC interrupt Init */
    HAL_NVIC_SetPriority(LTDC_IRQn, 5, 0);
 8001162:	2200      	movs	r2, #0
 8001164:	2105      	movs	r1, #5
 8001166:	2058      	movs	r0, #88	; 0x58
 8001168:	f000 fd36 	bl	8001bd8 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(LTDC_IRQn);
 800116c:	2058      	movs	r0, #88	; 0x58
 800116e:	f000 fd4f 	bl	8001c10 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN LTDC_MspInit 1 */

  /* USER CODE END LTDC_MspInit 1 */
  }

}
 8001172:	bf00      	nop
 8001174:	3768      	adds	r7, #104	; 0x68
 8001176:	46bd      	mov	sp, r7
 8001178:	bd80      	pop	{r7, pc}
 800117a:	bf00      	nop
 800117c:	40016800 	.word	0x40016800
 8001180:	40023800 	.word	0x40023800
 8001184:	40021400 	.word	0x40021400
 8001188:	40020000 	.word	0x40020000
 800118c:	40020400 	.word	0x40020400
 8001190:	40021800 	.word	0x40021800
 8001194:	40020800 	.word	0x40020800
 8001198:	40020c00 	.word	0x40020c00

0800119c <HAL_SPI_MspInit>:
* This function configures the hardware resources used in this example
* @param hspi: SPI handle pointer
* @retval None
*/
void HAL_SPI_MspInit(SPI_HandleTypeDef* hspi)
{
 800119c:	b580      	push	{r7, lr}
 800119e:	b08a      	sub	sp, #40	; 0x28
 80011a0:	af00      	add	r7, sp, #0
 80011a2:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80011a4:	f107 0314 	add.w	r3, r7, #20
 80011a8:	2200      	movs	r2, #0
 80011aa:	601a      	str	r2, [r3, #0]
 80011ac:	605a      	str	r2, [r3, #4]
 80011ae:	609a      	str	r2, [r3, #8]
 80011b0:	60da      	str	r2, [r3, #12]
 80011b2:	611a      	str	r2, [r3, #16]
  if(hspi->Instance==SPI5)
 80011b4:	687b      	ldr	r3, [r7, #4]
 80011b6:	681b      	ldr	r3, [r3, #0]
 80011b8:	4a19      	ldr	r2, [pc, #100]	; (8001220 <HAL_SPI_MspInit+0x84>)
 80011ba:	4293      	cmp	r3, r2
 80011bc:	d12c      	bne.n	8001218 <HAL_SPI_MspInit+0x7c>
  {
  /* USER CODE BEGIN SPI5_MspInit 0 */

  /* USER CODE END SPI5_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_SPI5_CLK_ENABLE();
 80011be:	2300      	movs	r3, #0
 80011c0:	613b      	str	r3, [r7, #16]
 80011c2:	4b18      	ldr	r3, [pc, #96]	; (8001224 <HAL_SPI_MspInit+0x88>)
 80011c4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80011c6:	4a17      	ldr	r2, [pc, #92]	; (8001224 <HAL_SPI_MspInit+0x88>)
 80011c8:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 80011cc:	6453      	str	r3, [r2, #68]	; 0x44
 80011ce:	4b15      	ldr	r3, [pc, #84]	; (8001224 <HAL_SPI_MspInit+0x88>)
 80011d0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80011d2:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 80011d6:	613b      	str	r3, [r7, #16]
 80011d8:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOF_CLK_ENABLE();
 80011da:	2300      	movs	r3, #0
 80011dc:	60fb      	str	r3, [r7, #12]
 80011de:	4b11      	ldr	r3, [pc, #68]	; (8001224 <HAL_SPI_MspInit+0x88>)
 80011e0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80011e2:	4a10      	ldr	r2, [pc, #64]	; (8001224 <HAL_SPI_MspInit+0x88>)
 80011e4:	f043 0320 	orr.w	r3, r3, #32
 80011e8:	6313      	str	r3, [r2, #48]	; 0x30
 80011ea:	4b0e      	ldr	r3, [pc, #56]	; (8001224 <HAL_SPI_MspInit+0x88>)
 80011ec:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80011ee:	f003 0320 	and.w	r3, r3, #32
 80011f2:	60fb      	str	r3, [r7, #12]
 80011f4:	68fb      	ldr	r3, [r7, #12]
    /**SPI5 GPIO Configuration
    PF7     ------> SPI5_SCK
    PF8     ------> SPI5_MISO
    PF9     ------> SPI5_MOSI
    */
    GPIO_InitStruct.Pin = SPI5_SCK_Pin|SPI5_MISO_Pin|SPI5_MOSI_Pin;
 80011f6:	f44f 7360 	mov.w	r3, #896	; 0x380
 80011fa:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80011fc:	2302      	movs	r3, #2
 80011fe:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001200:	2300      	movs	r3, #0
 8001202:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001204:	2300      	movs	r3, #0
 8001206:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI5;
 8001208:	2305      	movs	r3, #5
 800120a:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOF, &GPIO_InitStruct);
 800120c:	f107 0314 	add.w	r3, r7, #20
 8001210:	4619      	mov	r1, r3
 8001212:	4805      	ldr	r0, [pc, #20]	; (8001228 <HAL_SPI_MspInit+0x8c>)
 8001214:	f000 ff12 	bl	800203c <HAL_GPIO_Init>
  /* USER CODE BEGIN SPI5_MspInit 1 */

  /* USER CODE END SPI5_MspInit 1 */
  }

}
 8001218:	bf00      	nop
 800121a:	3728      	adds	r7, #40	; 0x28
 800121c:	46bd      	mov	sp, r7
 800121e:	bd80      	pop	{r7, pc}
 8001220:	40015000 	.word	0x40015000
 8001224:	40023800 	.word	0x40023800
 8001228:	40021400 	.word	0x40021400

0800122c <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 800122c:	b480      	push	{r7}
 800122e:	b085      	sub	sp, #20
 8001230:	af00      	add	r7, sp, #0
 8001232:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM1)
 8001234:	687b      	ldr	r3, [r7, #4]
 8001236:	681b      	ldr	r3, [r3, #0]
 8001238:	4a0b      	ldr	r2, [pc, #44]	; (8001268 <HAL_TIM_Base_MspInit+0x3c>)
 800123a:	4293      	cmp	r3, r2
 800123c:	d10d      	bne.n	800125a <HAL_TIM_Base_MspInit+0x2e>
  {
  /* USER CODE BEGIN TIM1_MspInit 0 */

  /* USER CODE END TIM1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM1_CLK_ENABLE();
 800123e:	2300      	movs	r3, #0
 8001240:	60fb      	str	r3, [r7, #12]
 8001242:	4b0a      	ldr	r3, [pc, #40]	; (800126c <HAL_TIM_Base_MspInit+0x40>)
 8001244:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001246:	4a09      	ldr	r2, [pc, #36]	; (800126c <HAL_TIM_Base_MspInit+0x40>)
 8001248:	f043 0301 	orr.w	r3, r3, #1
 800124c:	6453      	str	r3, [r2, #68]	; 0x44
 800124e:	4b07      	ldr	r3, [pc, #28]	; (800126c <HAL_TIM_Base_MspInit+0x40>)
 8001250:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001252:	f003 0301 	and.w	r3, r3, #1
 8001256:	60fb      	str	r3, [r7, #12]
 8001258:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN TIM1_MspInit 1 */

  /* USER CODE END TIM1_MspInit 1 */
  }

}
 800125a:	bf00      	nop
 800125c:	3714      	adds	r7, #20
 800125e:	46bd      	mov	sp, r7
 8001260:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001264:	4770      	bx	lr
 8001266:	bf00      	nop
 8001268:	40010000 	.word	0x40010000
 800126c:	40023800 	.word	0x40023800

08001270 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8001270:	b580      	push	{r7, lr}
 8001272:	b08a      	sub	sp, #40	; 0x28
 8001274:	af00      	add	r7, sp, #0
 8001276:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001278:	f107 0314 	add.w	r3, r7, #20
 800127c:	2200      	movs	r2, #0
 800127e:	601a      	str	r2, [r3, #0]
 8001280:	605a      	str	r2, [r3, #4]
 8001282:	609a      	str	r2, [r3, #8]
 8001284:	60da      	str	r2, [r3, #12]
 8001286:	611a      	str	r2, [r3, #16]
  if(huart->Instance==USART1)
 8001288:	687b      	ldr	r3, [r7, #4]
 800128a:	681b      	ldr	r3, [r3, #0]
 800128c:	4a19      	ldr	r2, [pc, #100]	; (80012f4 <HAL_UART_MspInit+0x84>)
 800128e:	4293      	cmp	r3, r2
 8001290:	d12c      	bne.n	80012ec <HAL_UART_MspInit+0x7c>
  {
  /* USER CODE BEGIN USART1_MspInit 0 */

  /* USER CODE END USART1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART1_CLK_ENABLE();
 8001292:	2300      	movs	r3, #0
 8001294:	613b      	str	r3, [r7, #16]
 8001296:	4b18      	ldr	r3, [pc, #96]	; (80012f8 <HAL_UART_MspInit+0x88>)
 8001298:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800129a:	4a17      	ldr	r2, [pc, #92]	; (80012f8 <HAL_UART_MspInit+0x88>)
 800129c:	f043 0310 	orr.w	r3, r3, #16
 80012a0:	6453      	str	r3, [r2, #68]	; 0x44
 80012a2:	4b15      	ldr	r3, [pc, #84]	; (80012f8 <HAL_UART_MspInit+0x88>)
 80012a4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80012a6:	f003 0310 	and.w	r3, r3, #16
 80012aa:	613b      	str	r3, [r7, #16]
 80012ac:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 80012ae:	2300      	movs	r3, #0
 80012b0:	60fb      	str	r3, [r7, #12]
 80012b2:	4b11      	ldr	r3, [pc, #68]	; (80012f8 <HAL_UART_MspInit+0x88>)
 80012b4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80012b6:	4a10      	ldr	r2, [pc, #64]	; (80012f8 <HAL_UART_MspInit+0x88>)
 80012b8:	f043 0301 	orr.w	r3, r3, #1
 80012bc:	6313      	str	r3, [r2, #48]	; 0x30
 80012be:	4b0e      	ldr	r3, [pc, #56]	; (80012f8 <HAL_UART_MspInit+0x88>)
 80012c0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80012c2:	f003 0301 	and.w	r3, r3, #1
 80012c6:	60fb      	str	r3, [r7, #12]
 80012c8:	68fb      	ldr	r3, [r7, #12]
    /**USART1 GPIO Configuration
    PA9     ------> USART1_TX
    PA10     ------> USART1_RX
    */
    GPIO_InitStruct.Pin = STLINK_RX_Pin|STLINK_TX_Pin;
 80012ca:	f44f 63c0 	mov.w	r3, #1536	; 0x600
 80012ce:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80012d0:	2302      	movs	r3, #2
 80012d2:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80012d4:	2300      	movs	r3, #0
 80012d6:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80012d8:	2303      	movs	r3, #3
 80012da:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF7_USART1;
 80012dc:	2307      	movs	r3, #7
 80012de:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80012e0:	f107 0314 	add.w	r3, r7, #20
 80012e4:	4619      	mov	r1, r3
 80012e6:	4805      	ldr	r0, [pc, #20]	; (80012fc <HAL_UART_MspInit+0x8c>)
 80012e8:	f000 fea8 	bl	800203c <HAL_GPIO_Init>
  /* USER CODE BEGIN USART1_MspInit 1 */

  /* USER CODE END USART1_MspInit 1 */
  }

}
 80012ec:	bf00      	nop
 80012ee:	3728      	adds	r7, #40	; 0x28
 80012f0:	46bd      	mov	sp, r7
 80012f2:	bd80      	pop	{r7, pc}
 80012f4:	40011000 	.word	0x40011000
 80012f8:	40023800 	.word	0x40023800
 80012fc:	40020000 	.word	0x40020000

08001300 <HAL_FMC_MspInit>:

}

static uint32_t FMC_Initialized = 0;

static void HAL_FMC_MspInit(void){
 8001300:	b580      	push	{r7, lr}
 8001302:	b086      	sub	sp, #24
 8001304:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN FMC_MspInit 0 */

  /* USER CODE END FMC_MspInit 0 */
  GPIO_InitTypeDef GPIO_InitStruct ={0};
 8001306:	1d3b      	adds	r3, r7, #4
 8001308:	2200      	movs	r2, #0
 800130a:	601a      	str	r2, [r3, #0]
 800130c:	605a      	str	r2, [r3, #4]
 800130e:	609a      	str	r2, [r3, #8]
 8001310:	60da      	str	r2, [r3, #12]
 8001312:	611a      	str	r2, [r3, #16]
  if (FMC_Initialized) {
 8001314:	4b3b      	ldr	r3, [pc, #236]	; (8001404 <HAL_FMC_MspInit+0x104>)
 8001316:	681b      	ldr	r3, [r3, #0]
 8001318:	2b00      	cmp	r3, #0
 800131a:	d16f      	bne.n	80013fc <HAL_FMC_MspInit+0xfc>
    return;
  }
  FMC_Initialized = 1;
 800131c:	4b39      	ldr	r3, [pc, #228]	; (8001404 <HAL_FMC_MspInit+0x104>)
 800131e:	2201      	movs	r2, #1
 8001320:	601a      	str	r2, [r3, #0]

  /* Peripheral clock enable */
  __HAL_RCC_FMC_CLK_ENABLE();
 8001322:	2300      	movs	r3, #0
 8001324:	603b      	str	r3, [r7, #0]
 8001326:	4b38      	ldr	r3, [pc, #224]	; (8001408 <HAL_FMC_MspInit+0x108>)
 8001328:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800132a:	4a37      	ldr	r2, [pc, #220]	; (8001408 <HAL_FMC_MspInit+0x108>)
 800132c:	f043 0301 	orr.w	r3, r3, #1
 8001330:	6393      	str	r3, [r2, #56]	; 0x38
 8001332:	4b35      	ldr	r3, [pc, #212]	; (8001408 <HAL_FMC_MspInit+0x108>)
 8001334:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8001336:	f003 0301 	and.w	r3, r3, #1
 800133a:	603b      	str	r3, [r7, #0]
 800133c:	683b      	ldr	r3, [r7, #0]
  PB5   ------> FMC_SDCKE1
  PB6   ------> FMC_SDNE1
  PE0   ------> FMC_NBL0
  PE1   ------> FMC_NBL1
  */
  GPIO_InitStruct.Pin = A0_Pin|A1_Pin|A2_Pin|A3_Pin
 800133e:	f64f 033f 	movw	r3, #63551	; 0xf83f
 8001342:	607b      	str	r3, [r7, #4]
                          |A4_Pin|A5_Pin|SDNRAS_Pin|A6_Pin
                          |A7_Pin|A8_Pin|A9_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001344:	2302      	movs	r3, #2
 8001346:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001348:	2300      	movs	r3, #0
 800134a:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800134c:	2303      	movs	r3, #3
 800134e:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Alternate = GPIO_AF12_FMC;
 8001350:	230c      	movs	r3, #12
 8001352:	617b      	str	r3, [r7, #20]
  HAL_GPIO_Init(GPIOF, &GPIO_InitStruct);
 8001354:	1d3b      	adds	r3, r7, #4
 8001356:	4619      	mov	r1, r3
 8001358:	482c      	ldr	r0, [pc, #176]	; (800140c <HAL_FMC_MspInit+0x10c>)
 800135a:	f000 fe6f 	bl	800203c <HAL_GPIO_Init>

  GPIO_InitStruct.Pin = SDNWE_Pin;
 800135e:	2301      	movs	r3, #1
 8001360:	607b      	str	r3, [r7, #4]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001362:	2302      	movs	r3, #2
 8001364:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001366:	2300      	movs	r3, #0
 8001368:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800136a:	2303      	movs	r3, #3
 800136c:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Alternate = GPIO_AF12_FMC;
 800136e:	230c      	movs	r3, #12
 8001370:	617b      	str	r3, [r7, #20]
  HAL_GPIO_Init(SDNWE_GPIO_Port, &GPIO_InitStruct);
 8001372:	1d3b      	adds	r3, r7, #4
 8001374:	4619      	mov	r1, r3
 8001376:	4826      	ldr	r0, [pc, #152]	; (8001410 <HAL_FMC_MspInit+0x110>)
 8001378:	f000 fe60 	bl	800203c <HAL_GPIO_Init>

  GPIO_InitStruct.Pin = A10_Pin|A11_Pin|BA0_Pin|BA1_Pin
 800137c:	f248 1333 	movw	r3, #33075	; 0x8133
 8001380:	607b      	str	r3, [r7, #4]
                          |SDCLK_Pin|SDNCAS_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001382:	2302      	movs	r3, #2
 8001384:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001386:	2300      	movs	r3, #0
 8001388:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800138a:	2303      	movs	r3, #3
 800138c:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Alternate = GPIO_AF12_FMC;
 800138e:	230c      	movs	r3, #12
 8001390:	617b      	str	r3, [r7, #20]
  HAL_GPIO_Init(GPIOG, &GPIO_InitStruct);
 8001392:	1d3b      	adds	r3, r7, #4
 8001394:	4619      	mov	r1, r3
 8001396:	481f      	ldr	r0, [pc, #124]	; (8001414 <HAL_FMC_MspInit+0x114>)
 8001398:	f000 fe50 	bl	800203c <HAL_GPIO_Init>

  GPIO_InitStruct.Pin = D4_Pin|D5_Pin|D6_Pin|D7_Pin
 800139c:	f64f 7383 	movw	r3, #65411	; 0xff83
 80013a0:	607b      	str	r3, [r7, #4]
                          |D8_Pin|D9_Pin|D10_Pin|D11_Pin
                          |D12_Pin|NBL0_Pin|NBL1_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80013a2:	2302      	movs	r3, #2
 80013a4:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80013a6:	2300      	movs	r3, #0
 80013a8:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80013aa:	2303      	movs	r3, #3
 80013ac:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Alternate = GPIO_AF12_FMC;
 80013ae:	230c      	movs	r3, #12
 80013b0:	617b      	str	r3, [r7, #20]
  HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 80013b2:	1d3b      	adds	r3, r7, #4
 80013b4:	4619      	mov	r1, r3
 80013b6:	4818      	ldr	r0, [pc, #96]	; (8001418 <HAL_FMC_MspInit+0x118>)
 80013b8:	f000 fe40 	bl	800203c <HAL_GPIO_Init>

  GPIO_InitStruct.Pin = D13_Pin|D14_Pin|D15_Pin|D0_Pin
 80013bc:	f24c 7303 	movw	r3, #50947	; 0xc703
 80013c0:	607b      	str	r3, [r7, #4]
                          |D1_Pin|D2_Pin|D3_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80013c2:	2302      	movs	r3, #2
 80013c4:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80013c6:	2300      	movs	r3, #0
 80013c8:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80013ca:	2303      	movs	r3, #3
 80013cc:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Alternate = GPIO_AF12_FMC;
 80013ce:	230c      	movs	r3, #12
 80013d0:	617b      	str	r3, [r7, #20]
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 80013d2:	1d3b      	adds	r3, r7, #4
 80013d4:	4619      	mov	r1, r3
 80013d6:	4811      	ldr	r0, [pc, #68]	; (800141c <HAL_FMC_MspInit+0x11c>)
 80013d8:	f000 fe30 	bl	800203c <HAL_GPIO_Init>

  GPIO_InitStruct.Pin = SDCKE1_Pin|SDNE1_Pin;
 80013dc:	2360      	movs	r3, #96	; 0x60
 80013de:	607b      	str	r3, [r7, #4]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80013e0:	2302      	movs	r3, #2
 80013e2:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80013e4:	2300      	movs	r3, #0
 80013e6:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80013e8:	2303      	movs	r3, #3
 80013ea:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Alternate = GPIO_AF12_FMC;
 80013ec:	230c      	movs	r3, #12
 80013ee:	617b      	str	r3, [r7, #20]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80013f0:	1d3b      	adds	r3, r7, #4
 80013f2:	4619      	mov	r1, r3
 80013f4:	480a      	ldr	r0, [pc, #40]	; (8001420 <HAL_FMC_MspInit+0x120>)
 80013f6:	f000 fe21 	bl	800203c <HAL_GPIO_Init>
 80013fa:	e000      	b.n	80013fe <HAL_FMC_MspInit+0xfe>
    return;
 80013fc:	bf00      	nop

  /* USER CODE BEGIN FMC_MspInit 1 */

  /* USER CODE END FMC_MspInit 1 */
}
 80013fe:	3718      	adds	r7, #24
 8001400:	46bd      	mov	sp, r7
 8001402:	bd80      	pop	{r7, pc}
 8001404:	200002ec 	.word	0x200002ec
 8001408:	40023800 	.word	0x40023800
 800140c:	40021400 	.word	0x40021400
 8001410:	40020800 	.word	0x40020800
 8001414:	40021800 	.word	0x40021800
 8001418:	40021000 	.word	0x40021000
 800141c:	40020c00 	.word	0x40020c00
 8001420:	40020400 	.word	0x40020400

08001424 <HAL_SDRAM_MspInit>:

void HAL_SDRAM_MspInit(SDRAM_HandleTypeDef* hsdram){
 8001424:	b580      	push	{r7, lr}
 8001426:	b082      	sub	sp, #8
 8001428:	af00      	add	r7, sp, #0
 800142a:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN SDRAM_MspInit 0 */

  /* USER CODE END SDRAM_MspInit 0 */
  HAL_FMC_MspInit();
 800142c:	f7ff ff68 	bl	8001300 <HAL_FMC_MspInit>
  /* USER CODE BEGIN SDRAM_MspInit 1 */

  /* USER CODE END SDRAM_MspInit 1 */
}
 8001430:	bf00      	nop
 8001432:	3708      	adds	r7, #8
 8001434:	46bd      	mov	sp, r7
 8001436:	bd80      	pop	{r7, pc}

08001438 <HAL_InitTick>:
  *         reset by HAL_Init() or at any time when clock is configured, by HAL_RCC_ClockConfig().
  * @param  TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8001438:	b580      	push	{r7, lr}
 800143a:	b08e      	sub	sp, #56	; 0x38
 800143c:	af00      	add	r7, sp, #0
 800143e:	6078      	str	r0, [r7, #4]
  RCC_ClkInitTypeDef    clkconfig;
  uint32_t              uwTimclock, uwAPB1Prescaler = 0U;
 8001440:	2300      	movs	r3, #0
 8001442:	62fb      	str	r3, [r7, #44]	; 0x2c

  uint32_t              uwPrescalerValue = 0U;
 8001444:	2300      	movs	r3, #0
 8001446:	62bb      	str	r3, [r7, #40]	; 0x28
  uint32_t              pFLatency;
  HAL_StatusTypeDef     status;

  /* Enable TIM6 clock */
  __HAL_RCC_TIM6_CLK_ENABLE();
 8001448:	2300      	movs	r3, #0
 800144a:	60fb      	str	r3, [r7, #12]
 800144c:	4b33      	ldr	r3, [pc, #204]	; (800151c <HAL_InitTick+0xe4>)
 800144e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001450:	4a32      	ldr	r2, [pc, #200]	; (800151c <HAL_InitTick+0xe4>)
 8001452:	f043 0310 	orr.w	r3, r3, #16
 8001456:	6413      	str	r3, [r2, #64]	; 0x40
 8001458:	4b30      	ldr	r3, [pc, #192]	; (800151c <HAL_InitTick+0xe4>)
 800145a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800145c:	f003 0310 	and.w	r3, r3, #16
 8001460:	60fb      	str	r3, [r7, #12]
 8001462:	68fb      	ldr	r3, [r7, #12]

  /* Get clock configuration */
  HAL_RCC_GetClockConfig(&clkconfig, &pFLatency);
 8001464:	f107 0210 	add.w	r2, r7, #16
 8001468:	f107 0314 	add.w	r3, r7, #20
 800146c:	4611      	mov	r1, r2
 800146e:	4618      	mov	r0, r3
 8001470:	f003 fa94 	bl	800499c <HAL_RCC_GetClockConfig>

  /* Get APB1 prescaler */
  uwAPB1Prescaler = clkconfig.APB1CLKDivider;
 8001474:	6a3b      	ldr	r3, [r7, #32]
 8001476:	62fb      	str	r3, [r7, #44]	; 0x2c
  /* Compute TIM6 clock */
  if (uwAPB1Prescaler == RCC_HCLK_DIV1)
 8001478:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800147a:	2b00      	cmp	r3, #0
 800147c:	d103      	bne.n	8001486 <HAL_InitTick+0x4e>
  {
    uwTimclock = HAL_RCC_GetPCLK1Freq();
 800147e:	f003 fa65 	bl	800494c <HAL_RCC_GetPCLK1Freq>
 8001482:	6378      	str	r0, [r7, #52]	; 0x34
 8001484:	e004      	b.n	8001490 <HAL_InitTick+0x58>
  }
  else
  {
    uwTimclock = 2UL * HAL_RCC_GetPCLK1Freq();
 8001486:	f003 fa61 	bl	800494c <HAL_RCC_GetPCLK1Freq>
 800148a:	4603      	mov	r3, r0
 800148c:	005b      	lsls	r3, r3, #1
 800148e:	637b      	str	r3, [r7, #52]	; 0x34
  }

  /* Compute the prescaler value to have TIM6 counter clock equal to 1MHz */
  uwPrescalerValue = (uint32_t) ((uwTimclock / 1000000U) - 1U);
 8001490:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8001492:	4a23      	ldr	r2, [pc, #140]	; (8001520 <HAL_InitTick+0xe8>)
 8001494:	fba2 2303 	umull	r2, r3, r2, r3
 8001498:	0c9b      	lsrs	r3, r3, #18
 800149a:	3b01      	subs	r3, #1
 800149c:	62bb      	str	r3, [r7, #40]	; 0x28

  /* Initialize TIM6 */
  htim6.Instance = TIM6;
 800149e:	4b21      	ldr	r3, [pc, #132]	; (8001524 <HAL_InitTick+0xec>)
 80014a0:	4a21      	ldr	r2, [pc, #132]	; (8001528 <HAL_InitTick+0xf0>)
 80014a2:	601a      	str	r2, [r3, #0]
  + Period = [(TIM6CLK/1000) - 1]. to have a (1/1000) s time base.
  + Prescaler = (uwTimclock/1000000 - 1) to have a 1MHz counter clock.
  + ClockDivision = 0
  + Counter direction = Up
  */
  htim6.Init.Period = (1000000U / 1000U) - 1U;
 80014a4:	4b1f      	ldr	r3, [pc, #124]	; (8001524 <HAL_InitTick+0xec>)
 80014a6:	f240 32e7 	movw	r2, #999	; 0x3e7
 80014aa:	60da      	str	r2, [r3, #12]
  htim6.Init.Prescaler = uwPrescalerValue;
 80014ac:	4a1d      	ldr	r2, [pc, #116]	; (8001524 <HAL_InitTick+0xec>)
 80014ae:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80014b0:	6053      	str	r3, [r2, #4]
  htim6.Init.ClockDivision = 0;
 80014b2:	4b1c      	ldr	r3, [pc, #112]	; (8001524 <HAL_InitTick+0xec>)
 80014b4:	2200      	movs	r2, #0
 80014b6:	611a      	str	r2, [r3, #16]
  htim6.Init.CounterMode = TIM_COUNTERMODE_UP;
 80014b8:	4b1a      	ldr	r3, [pc, #104]	; (8001524 <HAL_InitTick+0xec>)
 80014ba:	2200      	movs	r2, #0
 80014bc:	609a      	str	r2, [r3, #8]
  htim6.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 80014be:	4b19      	ldr	r3, [pc, #100]	; (8001524 <HAL_InitTick+0xec>)
 80014c0:	2200      	movs	r2, #0
 80014c2:	619a      	str	r2, [r3, #24]

  status = HAL_TIM_Base_Init(&htim6);
 80014c4:	4817      	ldr	r0, [pc, #92]	; (8001524 <HAL_InitTick+0xec>)
 80014c6:	f003 fd18 	bl	8004efa <HAL_TIM_Base_Init>
 80014ca:	4603      	mov	r3, r0
 80014cc:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
  if (status == HAL_OK)
 80014d0:	f897 3033 	ldrb.w	r3, [r7, #51]	; 0x33
 80014d4:	2b00      	cmp	r3, #0
 80014d6:	d11b      	bne.n	8001510 <HAL_InitTick+0xd8>
  {
    /* Start the TIM time Base generation in interrupt mode */
    status = HAL_TIM_Base_Start_IT(&htim6);
 80014d8:	4812      	ldr	r0, [pc, #72]	; (8001524 <HAL_InitTick+0xec>)
 80014da:	f003 fd5d 	bl	8004f98 <HAL_TIM_Base_Start_IT>
 80014de:	4603      	mov	r3, r0
 80014e0:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
    if (status == HAL_OK)
 80014e4:	f897 3033 	ldrb.w	r3, [r7, #51]	; 0x33
 80014e8:	2b00      	cmp	r3, #0
 80014ea:	d111      	bne.n	8001510 <HAL_InitTick+0xd8>
    {
    /* Enable the TIM6 global Interrupt */
        HAL_NVIC_EnableIRQ(TIM6_DAC_IRQn);
 80014ec:	2036      	movs	r0, #54	; 0x36
 80014ee:	f000 fb8f 	bl	8001c10 <HAL_NVIC_EnableIRQ>
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 80014f2:	687b      	ldr	r3, [r7, #4]
 80014f4:	2b0f      	cmp	r3, #15
 80014f6:	d808      	bhi.n	800150a <HAL_InitTick+0xd2>
      {
        /* Configure the TIM IRQ priority */
        HAL_NVIC_SetPriority(TIM6_DAC_IRQn, TickPriority, 0U);
 80014f8:	2200      	movs	r2, #0
 80014fa:	6879      	ldr	r1, [r7, #4]
 80014fc:	2036      	movs	r0, #54	; 0x36
 80014fe:	f000 fb6b 	bl	8001bd8 <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 8001502:	4a0a      	ldr	r2, [pc, #40]	; (800152c <HAL_InitTick+0xf4>)
 8001504:	687b      	ldr	r3, [r7, #4]
 8001506:	6013      	str	r3, [r2, #0]
 8001508:	e002      	b.n	8001510 <HAL_InitTick+0xd8>
      }
      else
      {
        status = HAL_ERROR;
 800150a:	2301      	movs	r3, #1
 800150c:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
      }
    }
  }

 /* Return function status */
  return status;
 8001510:	f897 3033 	ldrb.w	r3, [r7, #51]	; 0x33
}
 8001514:	4618      	mov	r0, r3
 8001516:	3738      	adds	r7, #56	; 0x38
 8001518:	46bd      	mov	sp, r7
 800151a:	bd80      	pop	{r7, pc}
 800151c:	40023800 	.word	0x40023800
 8001520:	431bde83 	.word	0x431bde83
 8001524:	200002f0 	.word	0x200002f0
 8001528:	40001000 	.word	0x40001000
 800152c:	20000004 	.word	0x20000004

08001530 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8001530:	b480      	push	{r7}
 8001532:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8001534:	e7fe      	b.n	8001534 <NMI_Handler+0x4>

08001536 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8001536:	b480      	push	{r7}
 8001538:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 800153a:	e7fe      	b.n	800153a <HardFault_Handler+0x4>

0800153c <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 800153c:	b480      	push	{r7}
 800153e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8001540:	e7fe      	b.n	8001540 <MemManage_Handler+0x4>

08001542 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8001542:	b480      	push	{r7}
 8001544:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8001546:	e7fe      	b.n	8001546 <BusFault_Handler+0x4>

08001548 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8001548:	b480      	push	{r7}
 800154a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 800154c:	e7fe      	b.n	800154c <UsageFault_Handler+0x4>

0800154e <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 800154e:	b480      	push	{r7}
 8001550:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8001552:	bf00      	nop
 8001554:	46bd      	mov	sp, r7
 8001556:	f85d 7b04 	ldr.w	r7, [sp], #4
 800155a:	4770      	bx	lr

0800155c <TIM6_DAC_IRQHandler>:

/**
  * @brief This function handles TIM6 global interrupt, DAC1 and DAC2 underrun error interrupts.
  */
void TIM6_DAC_IRQHandler(void)
{
 800155c:	b580      	push	{r7, lr}
 800155e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM6_DAC_IRQn 0 */

  /* USER CODE END TIM6_DAC_IRQn 0 */
  HAL_TIM_IRQHandler(&htim6);
 8001560:	4802      	ldr	r0, [pc, #8]	; (800156c <TIM6_DAC_IRQHandler+0x10>)
 8001562:	f003 fd89 	bl	8005078 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM6_DAC_IRQn 1 */

  /* USER CODE END TIM6_DAC_IRQn 1 */
}
 8001566:	bf00      	nop
 8001568:	bd80      	pop	{r7, pc}
 800156a:	bf00      	nop
 800156c:	200002f0 	.word	0x200002f0

08001570 <OTG_HS_IRQHandler>:

/**
  * @brief This function handles USB On The Go HS global interrupt.
  */
void OTG_HS_IRQHandler(void)
{
 8001570:	b580      	push	{r7, lr}
 8001572:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN OTG_HS_IRQn 0 */

  /* USER CODE END OTG_HS_IRQn 0 */
  HAL_HCD_IRQHandler(&hhcd_USB_OTG_HS);
 8001574:	4802      	ldr	r0, [pc, #8]	; (8001580 <OTG_HS_IRQHandler+0x10>)
 8001576:	f000 ff26 	bl	80023c6 <HAL_HCD_IRQHandler>
  /* USER CODE BEGIN OTG_HS_IRQn 1 */

  /* USER CODE END OTG_HS_IRQn 1 */
}
 800157a:	bf00      	nop
 800157c:	bd80      	pop	{r7, pc}
 800157e:	bf00      	nop
 8001580:	200090cc 	.word	0x200090cc

08001584 <LTDC_IRQHandler>:

/**
  * @brief This function handles LTDC global interrupt.
  */
void LTDC_IRQHandler(void)
{
 8001584:	b580      	push	{r7, lr}
 8001586:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN LTDC_IRQn 0 */

  /* USER CODE END LTDC_IRQn 0 */
  HAL_LTDC_IRQHandler(&hltdc);
 8001588:	4802      	ldr	r0, [pc, #8]	; (8001594 <LTDC_IRQHandler+0x10>)
 800158a:	f002 fad7 	bl	8003b3c <HAL_LTDC_IRQHandler>
  /* USER CODE BEGIN LTDC_IRQn 1 */

  /* USER CODE END LTDC_IRQn 1 */
}
 800158e:	bf00      	nop
 8001590:	bd80      	pop	{r7, pc}
 8001592:	bf00      	nop
 8001594:	2000012c 	.word	0x2000012c

08001598 <DMA2D_IRQHandler>:

/**
  * @brief This function handles DMA2D global interrupt.
  */
void DMA2D_IRQHandler(void)
{
 8001598:	b580      	push	{r7, lr}
 800159a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA2D_IRQn 0 */

  /* USER CODE END DMA2D_IRQn 0 */
  HAL_DMA2D_IRQHandler(&hdma2d);
 800159c:	4802      	ldr	r0, [pc, #8]	; (80015a8 <DMA2D_IRQHandler+0x10>)
 800159e:	f000 fbaa 	bl	8001cf6 <HAL_DMA2D_IRQHandler>
  /* USER CODE BEGIN DMA2D_IRQn 1 */

  /* USER CODE END DMA2D_IRQn 1 */
}
 80015a2:	bf00      	nop
 80015a4:	bd80      	pop	{r7, pc}
 80015a6:	bf00      	nop
 80015a8:	20000098 	.word	0x20000098

080015ac <_read>:
  _kill(status, -1);
  while (1) {}    /* Make sure we hang here */
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 80015ac:	b580      	push	{r7, lr}
 80015ae:	b086      	sub	sp, #24
 80015b0:	af00      	add	r7, sp, #0
 80015b2:	60f8      	str	r0, [r7, #12]
 80015b4:	60b9      	str	r1, [r7, #8]
 80015b6:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 80015b8:	2300      	movs	r3, #0
 80015ba:	617b      	str	r3, [r7, #20]
 80015bc:	e00a      	b.n	80015d4 <_read+0x28>
  {
    *ptr++ = __io_getchar();
 80015be:	f3af 8000 	nop.w
 80015c2:	4601      	mov	r1, r0
 80015c4:	68bb      	ldr	r3, [r7, #8]
 80015c6:	1c5a      	adds	r2, r3, #1
 80015c8:	60ba      	str	r2, [r7, #8]
 80015ca:	b2ca      	uxtb	r2, r1
 80015cc:	701a      	strb	r2, [r3, #0]
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 80015ce:	697b      	ldr	r3, [r7, #20]
 80015d0:	3301      	adds	r3, #1
 80015d2:	617b      	str	r3, [r7, #20]
 80015d4:	697a      	ldr	r2, [r7, #20]
 80015d6:	687b      	ldr	r3, [r7, #4]
 80015d8:	429a      	cmp	r2, r3
 80015da:	dbf0      	blt.n	80015be <_read+0x12>
  }

  return len;
 80015dc:	687b      	ldr	r3, [r7, #4]
}
 80015de:	4618      	mov	r0, r3
 80015e0:	3718      	adds	r7, #24
 80015e2:	46bd      	mov	sp, r7
 80015e4:	bd80      	pop	{r7, pc}

080015e6 <_close>:
  }
  return len;
}

int _close(int file)
{
 80015e6:	b480      	push	{r7}
 80015e8:	b083      	sub	sp, #12
 80015ea:	af00      	add	r7, sp, #0
 80015ec:	6078      	str	r0, [r7, #4]
  (void)file;
  return -1;
 80015ee:	f04f 33ff 	mov.w	r3, #4294967295
}
 80015f2:	4618      	mov	r0, r3
 80015f4:	370c      	adds	r7, #12
 80015f6:	46bd      	mov	sp, r7
 80015f8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80015fc:	4770      	bx	lr

080015fe <_fstat>:


int _fstat(int file, struct stat *st)
{
 80015fe:	b480      	push	{r7}
 8001600:	b083      	sub	sp, #12
 8001602:	af00      	add	r7, sp, #0
 8001604:	6078      	str	r0, [r7, #4]
 8001606:	6039      	str	r1, [r7, #0]
  (void)file;
  st->st_mode = S_IFCHR;
 8001608:	683b      	ldr	r3, [r7, #0]
 800160a:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 800160e:	605a      	str	r2, [r3, #4]
  return 0;
 8001610:	2300      	movs	r3, #0
}
 8001612:	4618      	mov	r0, r3
 8001614:	370c      	adds	r7, #12
 8001616:	46bd      	mov	sp, r7
 8001618:	f85d 7b04 	ldr.w	r7, [sp], #4
 800161c:	4770      	bx	lr

0800161e <_isatty>:

int _isatty(int file)
{
 800161e:	b480      	push	{r7}
 8001620:	b083      	sub	sp, #12
 8001622:	af00      	add	r7, sp, #0
 8001624:	6078      	str	r0, [r7, #4]
  (void)file;
  return 1;
 8001626:	2301      	movs	r3, #1
}
 8001628:	4618      	mov	r0, r3
 800162a:	370c      	adds	r7, #12
 800162c:	46bd      	mov	sp, r7
 800162e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001632:	4770      	bx	lr

08001634 <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 8001634:	b480      	push	{r7}
 8001636:	b085      	sub	sp, #20
 8001638:	af00      	add	r7, sp, #0
 800163a:	60f8      	str	r0, [r7, #12]
 800163c:	60b9      	str	r1, [r7, #8]
 800163e:	607a      	str	r2, [r7, #4]
  (void)file;
  (void)ptr;
  (void)dir;
  return 0;
 8001640:	2300      	movs	r3, #0
}
 8001642:	4618      	mov	r0, r3
 8001644:	3714      	adds	r7, #20
 8001646:	46bd      	mov	sp, r7
 8001648:	f85d 7b04 	ldr.w	r7, [sp], #4
 800164c:	4770      	bx	lr
	...

08001650 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8001650:	b580      	push	{r7, lr}
 8001652:	b086      	sub	sp, #24
 8001654:	af00      	add	r7, sp, #0
 8001656:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8001658:	4a14      	ldr	r2, [pc, #80]	; (80016ac <_sbrk+0x5c>)
 800165a:	4b15      	ldr	r3, [pc, #84]	; (80016b0 <_sbrk+0x60>)
 800165c:	1ad3      	subs	r3, r2, r3
 800165e:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8001660:	697b      	ldr	r3, [r7, #20]
 8001662:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8001664:	4b13      	ldr	r3, [pc, #76]	; (80016b4 <_sbrk+0x64>)
 8001666:	681b      	ldr	r3, [r3, #0]
 8001668:	2b00      	cmp	r3, #0
 800166a:	d102      	bne.n	8001672 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 800166c:	4b11      	ldr	r3, [pc, #68]	; (80016b4 <_sbrk+0x64>)
 800166e:	4a12      	ldr	r2, [pc, #72]	; (80016b8 <_sbrk+0x68>)
 8001670:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8001672:	4b10      	ldr	r3, [pc, #64]	; (80016b4 <_sbrk+0x64>)
 8001674:	681a      	ldr	r2, [r3, #0]
 8001676:	687b      	ldr	r3, [r7, #4]
 8001678:	4413      	add	r3, r2
 800167a:	693a      	ldr	r2, [r7, #16]
 800167c:	429a      	cmp	r2, r3
 800167e:	d207      	bcs.n	8001690 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8001680:	f008 fda8 	bl	800a1d4 <__errno>
 8001684:	4603      	mov	r3, r0
 8001686:	220c      	movs	r2, #12
 8001688:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 800168a:	f04f 33ff 	mov.w	r3, #4294967295
 800168e:	e009      	b.n	80016a4 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8001690:	4b08      	ldr	r3, [pc, #32]	; (80016b4 <_sbrk+0x64>)
 8001692:	681b      	ldr	r3, [r3, #0]
 8001694:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8001696:	4b07      	ldr	r3, [pc, #28]	; (80016b4 <_sbrk+0x64>)
 8001698:	681a      	ldr	r2, [r3, #0]
 800169a:	687b      	ldr	r3, [r7, #4]
 800169c:	4413      	add	r3, r2
 800169e:	4a05      	ldr	r2, [pc, #20]	; (80016b4 <_sbrk+0x64>)
 80016a0:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 80016a2:	68fb      	ldr	r3, [r7, #12]
}
 80016a4:	4618      	mov	r0, r3
 80016a6:	3718      	adds	r7, #24
 80016a8:	46bd      	mov	sp, r7
 80016aa:	bd80      	pop	{r7, pc}
 80016ac:	20030000 	.word	0x20030000
 80016b0:	00000400 	.word	0x00000400
 80016b4:	20000338 	.word	0x20000338
 80016b8:	200093e0 	.word	0x200093e0

080016bc <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 80016bc:	b480      	push	{r7}
 80016be:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 80016c0:	4b06      	ldr	r3, [pc, #24]	; (80016dc <SystemInit+0x20>)
 80016c2:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80016c6:	4a05      	ldr	r2, [pc, #20]	; (80016dc <SystemInit+0x20>)
 80016c8:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 80016cc:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 80016d0:	bf00      	nop
 80016d2:	46bd      	mov	sp, r7
 80016d4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80016d8:	4770      	bx	lr
 80016da:	bf00      	nop
 80016dc:	e000ed00 	.word	0xe000ed00

080016e0 <tm_initialize>:


/* This function called from main performs basic RTOS initialization,
   calls the test initialization function, and then starts the RTOS function. */
void tm_initialize(void (*test_initialization_function)(void))
{
 80016e0:	b580      	push	{r7, lr}
 80016e2:	b082      	sub	sp, #8
 80016e4:	af00      	add	r7, sp, #0
 80016e6:	6078      	str	r0, [r7, #4]
    /* Save the test initialization function. */
    tm_initialization_function = test_initialization_function;
 80016e8:	4a04      	ldr	r2, [pc, #16]	; (80016fc <tm_initialize+0x1c>)
 80016ea:	687b      	ldr	r3, [r7, #4]
 80016ec:	6013      	str	r3, [r2, #0]

    /* Call the previously defined initialization function. */
    (tm_initialization_function)();
 80016ee:	4b03      	ldr	r3, [pc, #12]	; (80016fc <tm_initialize+0x1c>)
 80016f0:	681b      	ldr	r3, [r3, #0]
 80016f2:	4798      	blx	r3
}
 80016f4:	bf00      	nop
 80016f6:	3708      	adds	r7, #8
 80016f8:	46bd      	mov	sp, r7
 80016fa:	bd80      	pop	{r7, pc}
 80016fc:	20000368 	.word	0x20000368

08001700 <tm_thread_create>:
/* This function takes a thread ID and priority and attempts to create the
   file in the underlying RTOS. Valid priorities range from 1 through 255,
   where 1 is the highest priority and 255 is the lowest. If successful,
   the function should return TM_SUCCESS. Otherwise, TM_ERROR should be returned. */
int tm_thread_create(int thread_id, int priority, void (*entry_function)(void))
{
 8001700:	b580      	push	{r7, lr}
 8001702:	b0a6      	sub	sp, #152	; 0x98
 8001704:	af00      	add	r7, sp, #0
 8001706:	60f8      	str	r0, [r7, #12]
 8001708:	60b9      	str	r1, [r7, #8]
 800170a:	607a      	str	r2, [r7, #4]
	// Remember the actual thread entry.
	   // tm_thread_entry_functions[thread_id] = entry_function;
	    char str[100];
	    sprintf(str, "%d",thread_id);
 800170c:	f107 0334 	add.w	r3, r7, #52	; 0x34
 8001710:	68fa      	ldr	r2, [r7, #12]
 8001712:	4919      	ldr	r1, [pc, #100]	; (8001778 <tm_thread_create+0x78>)
 8001714:	4618      	mov	r0, r3
 8001716:	f008 ff1b 	bl	800a550 <siprintf>

	    // Create the thread under CMSIS-RTOS.
	    osThreadAttr_t thread_attr = {
 800171a:	f107 0310 	add.w	r3, r7, #16
 800171e:	2224      	movs	r2, #36	; 0x24
 8001720:	2100      	movs	r1, #0
 8001722:	4618      	mov	r0, r3
 8001724:	f008 fd8e 	bl	800a244 <memset>
 8001728:	f107 0334 	add.w	r3, r7, #52	; 0x34
 800172c:	613b      	str	r3, [r7, #16]
 800172e:	f44f 6340 	mov.w	r3, #3072	; 0xc00
 8001732:	627b      	str	r3, [r7, #36]	; 0x24
 8001734:	68bb      	ldr	r3, [r7, #8]
 8001736:	62bb      	str	r3, [r7, #40]	; 0x28
	        .name = str,
	        //.stack_mem = tm_thread_stack_area[thread_id],
	        .stack_size = 3*1024,
	        .priority = priority
	    };
	    tm_thread_array[thread_id] = osThreadNew((osThreadFunc_t)entry_function, NULL, &thread_attr);
 8001738:	f107 0310 	add.w	r3, r7, #16
 800173c:	461a      	mov	r2, r3
 800173e:	2100      	movs	r1, #0
 8001740:	6878      	ldr	r0, [r7, #4]
 8001742:	f005 f925 	bl	8006990 <osThreadNew>
 8001746:	4602      	mov	r2, r0
 8001748:	490c      	ldr	r1, [pc, #48]	; (800177c <tm_thread_create+0x7c>)
 800174a:	68fb      	ldr	r3, [r7, #12]
 800174c:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

	    // Determine if the thread create was successful.
	    if (tm_thread_array[thread_id] != NULL)
 8001750:	4a0a      	ldr	r2, [pc, #40]	; (800177c <tm_thread_create+0x7c>)
 8001752:	68fb      	ldr	r3, [r7, #12]
 8001754:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001758:	2b00      	cmp	r3, #0
 800175a:	d004      	beq.n	8001766 <tm_thread_create+0x66>
	    {
	    	printf("done\r\n");
 800175c:	4808      	ldr	r0, [pc, #32]	; (8001780 <tm_thread_create+0x80>)
 800175e:	f008 fedf 	bl	800a520 <puts>
	    	return TM_SUCCESS;
 8001762:	2300      	movs	r3, #0
 8001764:	e003      	b.n	800176e <tm_thread_create+0x6e>
	    }

	    else
	    {
	    	printf("failed\r\n");
 8001766:	4807      	ldr	r0, [pc, #28]	; (8001784 <tm_thread_create+0x84>)
 8001768:	f008 feda 	bl	800a520 <puts>
	    	 return TM_ERROR;
 800176c:	2301      	movs	r3, #1
	    }
}
 800176e:	4618      	mov	r0, r3
 8001770:	3798      	adds	r7, #152	; 0x98
 8001772:	46bd      	mov	sp, r7
 8001774:	bd80      	pop	{r7, pc}
 8001776:	bf00      	nop
 8001778:	0800b624 	.word	0x0800b624
 800177c:	2000033c 	.word	0x2000033c
 8001780:	0800b628 	.word	0x0800b628
 8001784:	0800b630 	.word	0x0800b630

08001788 <tm_thread_resume>:


/* This function resumes the specified thread.  If successful, the function should
   return TM_SUCCESS. Otherwise, TM_ERROR should be returned.  */
int tm_thread_resume(int thread_id)
{
 8001788:	b580      	push	{r7, lr}
 800178a:	b082      	sub	sp, #8
 800178c:	af00      	add	r7, sp, #0
 800178e:	6078      	str	r0, [r7, #4]
    /* Resume the thread with the specified ID. */
    if (osThreadResume(tm_thread_array[thread_id]) == osOK) {
 8001790:	4a09      	ldr	r2, [pc, #36]	; (80017b8 <tm_thread_resume+0x30>)
 8001792:	687b      	ldr	r3, [r7, #4]
 8001794:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001798:	4618      	mov	r0, r3
 800179a:	f005 f98b 	bl	8006ab4 <osThreadResume>
 800179e:	4603      	mov	r3, r0
 80017a0:	2b00      	cmp	r3, #0
 80017a2:	d101      	bne.n	80017a8 <tm_thread_resume+0x20>
        /* Thread resume successful. */
        return TM_SUCCESS;
 80017a4:	2300      	movs	r3, #0
 80017a6:	e003      	b.n	80017b0 <tm_thread_resume+0x28>
        printf("resumed\n\r");
    }
    else
    {
    	printf("not resumed\n\r");
 80017a8:	4804      	ldr	r0, [pc, #16]	; (80017bc <tm_thread_resume+0x34>)
 80017aa:	f008 fe33 	bl	800a414 <iprintf>
    }
    /* Thread resume failed. */
    return TM_ERROR;
 80017ae:	2301      	movs	r3, #1
}
 80017b0:	4618      	mov	r0, r3
 80017b2:	3708      	adds	r7, #8
 80017b4:	46bd      	mov	sp, r7
 80017b6:	bd80      	pop	{r7, pc}
 80017b8:	2000033c 	.word	0x2000033c
 80017bc:	0800b638 	.word	0x0800b638

080017c0 <tm_thread_sleep>:

/* This function suspends the specified thread for the specified number
   of seconds.  If successful, the function should return TM_SUCCESS.
   Otherwise, TM_ERROR should be returned.  */
void tm_thread_sleep(int seconds)
{
 80017c0:	b580      	push	{r7, lr}
 80017c2:	b082      	sub	sp, #8
 80017c4:	af00      	add	r7, sp, #0
 80017c6:	6078      	str	r0, [r7, #4]
	 osDelay(seconds * 1000);
 80017c8:	687b      	ldr	r3, [r7, #4]
 80017ca:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 80017ce:	fb02 f303 	mul.w	r3, r2, r3
 80017d2:	4618      	mov	r0, r3
 80017d4:	f005 f98f 	bl	8006af6 <osDelay>
}
 80017d8:	bf00      	nop
 80017da:	3708      	adds	r7, #8
 80017dc:	46bd      	mov	sp, r7
 80017de:	bd80      	pop	{r7, pc}

080017e0 <tm_semaphore_create>:


/* This function creates the specified semaphore.  If successful, the function should
   return TM_SUCCESS. Otherwise, TM_ERROR should be returned.  */
int  tm_semaphore_create(int semaphore_id)
{
 80017e0:	b580      	push	{r7, lr}
 80017e2:	b0a0      	sub	sp, #128	; 0x80
 80017e4:	af00      	add	r7, sp, #0
 80017e6:	6078      	str	r0, [r7, #4]
	char str[100];
	sprintf(str, "%d",semaphore_id);
 80017e8:	f107 0318 	add.w	r3, r7, #24
 80017ec:	687a      	ldr	r2, [r7, #4]
 80017ee:	4912      	ldr	r1, [pc, #72]	; (8001838 <tm_semaphore_create+0x58>)
 80017f0:	4618      	mov	r0, r3
 80017f2:	f008 fead 	bl	800a550 <siprintf>
	 osSemaphoreAttr_t semaphore_attr = {
 80017f6:	f107 0318 	add.w	r3, r7, #24
 80017fa:	60bb      	str	r3, [r7, #8]
 80017fc:	2300      	movs	r3, #0
 80017fe:	60fb      	str	r3, [r7, #12]
 8001800:	2300      	movs	r3, #0
 8001802:	613b      	str	r3, [r7, #16]
 8001804:	2300      	movs	r3, #0
 8001806:	617b      	str	r3, [r7, #20]
	        .attr_bits = 0U,        // No special attributes needed
	        .cb_mem = NULL,         // Allocate memory from the heap
	        .cb_size = 0U           // Use default size
	    };

	    osSemaphoreId_t semaphore = osSemaphoreNew(TM_CMSIS_MAX_SEMAPHORES, TM_CMSIS_MAX_SEMAPHORES, &semaphore_attr);
 8001808:	f107 0308 	add.w	r3, r7, #8
 800180c:	461a      	mov	r2, r3
 800180e:	2101      	movs	r1, #1
 8001810:	2001      	movs	r0, #1
 8001812:	f005 f98b 	bl	8006b2c <osSemaphoreNew>
 8001816:	67f8      	str	r0, [r7, #124]	; 0x7c
	    if (semaphore == NULL) {
 8001818:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 800181a:	2b00      	cmp	r3, #0
 800181c:	d101      	bne.n	8001822 <tm_semaphore_create+0x42>
	        return TM_ERROR;
 800181e:	2301      	movs	r3, #1
 8001820:	e005      	b.n	800182e <tm_semaphore_create+0x4e>
	    }

	    // Save the semaphore ID in the global variable for future use
	    tm_semaphore_array[semaphore_id] = semaphore;
 8001822:	4906      	ldr	r1, [pc, #24]	; (800183c <tm_semaphore_create+0x5c>)
 8001824:	687b      	ldr	r3, [r7, #4]
 8001826:	6ffa      	ldr	r2, [r7, #124]	; 0x7c
 8001828:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

	    return TM_SUCCESS;
 800182c:	2300      	movs	r3, #0
}
 800182e:	4618      	mov	r0, r3
 8001830:	3780      	adds	r7, #128	; 0x80
 8001832:	46bd      	mov	sp, r7
 8001834:	bd80      	pop	{r7, pc}
 8001836:	bf00      	nop
 8001838:	0800b624 	.word	0x0800b624
 800183c:	20000364 	.word	0x20000364

08001840 <tm_semaphore_get>:


/* This function gets the specified semaphore.  If successful, the function should
   return TM_SUCCESS. Otherwise, TM_ERROR should be returned.  */
int  tm_semaphore_get(int semaphore_id)
{
 8001840:	b580      	push	{r7, lr}
 8001842:	b084      	sub	sp, #16
 8001844:	af00      	add	r7, sp, #0
 8001846:	6078      	str	r0, [r7, #4]
	osSemaphoreId_t semaphore = tm_semaphore_array[semaphore_id];
 8001848:	4a0a      	ldr	r2, [pc, #40]	; (8001874 <tm_semaphore_get+0x34>)
 800184a:	687b      	ldr	r3, [r7, #4]
 800184c:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001850:	60fb      	str	r3, [r7, #12]
	    osStatus_t status = osSemaphoreAcquire(semaphore, osWaitForever);
 8001852:	f04f 31ff 	mov.w	r1, #4294967295
 8001856:	68f8      	ldr	r0, [r7, #12]
 8001858:	f005 f9f2 	bl	8006c40 <osSemaphoreAcquire>
 800185c:	60b8      	str	r0, [r7, #8]
	    if (status != osOK) {
 800185e:	68bb      	ldr	r3, [r7, #8]
 8001860:	2b00      	cmp	r3, #0
 8001862:	d001      	beq.n	8001868 <tm_semaphore_get+0x28>
	        return TM_ERROR;
 8001864:	2301      	movs	r3, #1
 8001866:	e000      	b.n	800186a <tm_semaphore_get+0x2a>
	    }

	    return TM_SUCCESS;
 8001868:	2300      	movs	r3, #0
}
 800186a:	4618      	mov	r0, r3
 800186c:	3710      	adds	r7, #16
 800186e:	46bd      	mov	sp, r7
 8001870:	bd80      	pop	{r7, pc}
 8001872:	bf00      	nop
 8001874:	20000364 	.word	0x20000364

08001878 <tm_semaphore_put>:


/* This function puts the specified semaphore.  If successful, the function should
   return TM_SUCCESS. Otherwise, TM_ERROR should be returned.  */
int  tm_semaphore_put(int semaphore_id)
{
 8001878:	b580      	push	{r7, lr}
 800187a:	b084      	sub	sp, #16
 800187c:	af00      	add	r7, sp, #0
 800187e:	6078      	str	r0, [r7, #4]
	osSemaphoreId_t semaphore = tm_semaphore_array[semaphore_id];
 8001880:	4a09      	ldr	r2, [pc, #36]	; (80018a8 <tm_semaphore_put+0x30>)
 8001882:	687b      	ldr	r3, [r7, #4]
 8001884:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001888:	60fb      	str	r3, [r7, #12]
	    osStatus_t status = osSemaphoreRelease(semaphore);
 800188a:	68f8      	ldr	r0, [r7, #12]
 800188c:	f005 fa2a 	bl	8006ce4 <osSemaphoreRelease>
 8001890:	60b8      	str	r0, [r7, #8]
	    if (status != osOK) {
 8001892:	68bb      	ldr	r3, [r7, #8]
 8001894:	2b00      	cmp	r3, #0
 8001896:	d001      	beq.n	800189c <tm_semaphore_put+0x24>
	        return TM_ERROR;
 8001898:	2301      	movs	r3, #1
 800189a:	e000      	b.n	800189e <tm_semaphore_put+0x26>
	    }

	    return TM_SUCCESS;
 800189c:	2300      	movs	r3, #0

}
 800189e:	4618      	mov	r0, r3
 80018a0:	3710      	adds	r7, #16
 80018a2:	46bd      	mov	sp, r7
 80018a4:	bd80      	pop	{r7, pc}
 80018a6:	bf00      	nop
 80018a8:	20000364 	.word	0x20000364

080018ac <tm_main>:


/* Define main entry point.  */

void tm_main()
{
 80018ac:	b580      	push	{r7, lr}
 80018ae:	af00      	add	r7, sp, #0

    /* Initialize the test.  */
	printf("****This test is running on the STM32F429I Discovery with CMSIS_RTOS_v2 on top of FreeRTOS **** \n\r");
 80018b0:	4803      	ldr	r0, [pc, #12]	; (80018c0 <tm_main+0x14>)
 80018b2:	f008 fdaf 	bl	800a414 <iprintf>
    tm_initialize(tm_synchronization_processing_initialize);
 80018b6:	4803      	ldr	r0, [pc, #12]	; (80018c4 <tm_main+0x18>)
 80018b8:	f7ff ff12 	bl	80016e0 <tm_initialize>
}
 80018bc:	bf00      	nop
 80018be:	bd80      	pop	{r7, pc}
 80018c0:	0800b648 	.word	0x0800b648
 80018c4:	080018c9 	.word	0x080018c9

080018c8 <tm_synchronization_processing_initialize>:


/* Define the synchronization processing test initialization.  */

void  tm_synchronization_processing_initialize(void)
{
 80018c8:	b580      	push	{r7, lr}
 80018ca:	af00      	add	r7, sp, #0

    /* Create thread 0 at priority 10.  */
    tm_thread_create(0, 10, tm_synchronization_processing_thread_0_entry);
 80018cc:	4a0a      	ldr	r2, [pc, #40]	; (80018f8 <tm_synchronization_processing_initialize+0x30>)
 80018ce:	210a      	movs	r1, #10
 80018d0:	2000      	movs	r0, #0
 80018d2:	f7ff ff15 	bl	8001700 <tm_thread_create>

    /* Resume thread 0.  */
    tm_thread_resume(0);
 80018d6:	2000      	movs	r0, #0
 80018d8:	f7ff ff56 	bl	8001788 <tm_thread_resume>

    /* Create a semaphore for the test.  */
    tm_semaphore_create(0);
 80018dc:	2000      	movs	r0, #0
 80018de:	f7ff ff7f 	bl	80017e0 <tm_semaphore_create>

    /* Create the reporting thread. It will preempt the other 
       threads and print out the test results.  */
    tm_thread_create(5, 12, tm_synchronization_processing_thread_report);
 80018e2:	4a06      	ldr	r2, [pc, #24]	; (80018fc <tm_synchronization_processing_initialize+0x34>)
 80018e4:	210c      	movs	r1, #12
 80018e6:	2005      	movs	r0, #5
 80018e8:	f7ff ff0a 	bl	8001700 <tm_thread_create>
    tm_thread_resume(5);
 80018ec:	2005      	movs	r0, #5
 80018ee:	f7ff ff4b 	bl	8001788 <tm_thread_resume>
}
 80018f2:	bf00      	nop
 80018f4:	bd80      	pop	{r7, pc}
 80018f6:	bf00      	nop
 80018f8:	08001901 	.word	0x08001901
 80018fc:	08001935 	.word	0x08001935

08001900 <tm_synchronization_processing_thread_0_entry>:


/* Define the synchronization processing thread.  */
void  tm_synchronization_processing_thread_0_entry(void)
{
 8001900:	b580      	push	{r7, lr}
 8001902:	b082      	sub	sp, #8
 8001904:	af00      	add	r7, sp, #0

    while(1)
    {

        /* Get the semaphore.  */
        tm_semaphore_get(0);
 8001906:	2000      	movs	r0, #0
 8001908:	f7ff ff9a 	bl	8001840 <tm_semaphore_get>

        /* Release the semaphore.  */
        status = tm_semaphore_put(0);
 800190c:	2000      	movs	r0, #0
 800190e:	f7ff ffb3 	bl	8001878 <tm_semaphore_put>
 8001912:	6078      	str	r0, [r7, #4]

        /* Check for semaphore put error.  */
        if (status != TM_SUCCESS)
 8001914:	687b      	ldr	r3, [r7, #4]
 8001916:	2b00      	cmp	r3, #0
 8001918:	d105      	bne.n	8001926 <tm_synchronization_processing_thread_0_entry+0x26>
            break;

        /* Increment the number of semaphore get/puts.  */
        tm_synchronization_processing_counter++;
 800191a:	4b05      	ldr	r3, [pc, #20]	; (8001930 <tm_synchronization_processing_thread_0_entry+0x30>)
 800191c:	681b      	ldr	r3, [r3, #0]
 800191e:	3301      	adds	r3, #1
 8001920:	4a03      	ldr	r2, [pc, #12]	; (8001930 <tm_synchronization_processing_thread_0_entry+0x30>)
 8001922:	6013      	str	r3, [r2, #0]
        tm_semaphore_get(0);
 8001924:	e7ef      	b.n	8001906 <tm_synchronization_processing_thread_0_entry+0x6>
            break;
 8001926:	bf00      	nop
    }
}
 8001928:	bf00      	nop
 800192a:	3708      	adds	r7, #8
 800192c:	46bd      	mov	sp, r7
 800192e:	bd80      	pop	{r7, pc}
 8001930:	2000036c 	.word	0x2000036c

08001934 <tm_synchronization_processing_thread_report>:


/* Define the synchronization test reporting thread.  */
void  tm_synchronization_processing_thread_report(void)
{
 8001934:	b580      	push	{r7, lr}
 8001936:	b082      	sub	sp, #8
 8001938:	af00      	add	r7, sp, #0
unsigned long   last_counter;
unsigned long   relative_time;


    /* Initialize the last counter.  */
    last_counter =  0;
 800193a:	2300      	movs	r3, #0
 800193c:	607b      	str	r3, [r7, #4]

    /* Initialize the relative time.  */
    relative_time =  0;
 800193e:	2300      	movs	r3, #0
 8001940:	603b      	str	r3, [r7, #0]

    while(1)
    {

        /* Sleep to allow the test to run.  */
        tm_thread_sleep(TM_TEST_DURATION);
 8001942:	201e      	movs	r0, #30
 8001944:	f7ff ff3c 	bl	80017c0 <tm_thread_sleep>

        /* Increment the relative time.  */
        relative_time =  relative_time + TM_TEST_DURATION;
 8001948:	683b      	ldr	r3, [r7, #0]
 800194a:	331e      	adds	r3, #30
 800194c:	603b      	str	r3, [r7, #0]

        /* Print results to the stdio window.  */
        printf("**** Thread-Metric Synchronization Processing Test **** Relative Time: %lu\n\r", relative_time);
 800194e:	6839      	ldr	r1, [r7, #0]
 8001950:	480b      	ldr	r0, [pc, #44]	; (8001980 <tm_synchronization_processing_thread_report+0x4c>)
 8001952:	f008 fd5f 	bl	800a414 <iprintf>

        /* See if there are any errors.  */
        if (tm_synchronization_processing_counter == last_counter)
 8001956:	4b0b      	ldr	r3, [pc, #44]	; (8001984 <tm_synchronization_processing_thread_report+0x50>)
 8001958:	681b      	ldr	r3, [r3, #0]
 800195a:	687a      	ldr	r2, [r7, #4]
 800195c:	429a      	cmp	r2, r3
 800195e:	d102      	bne.n	8001966 <tm_synchronization_processing_thread_report+0x32>
        {

            printf("ERROR: Invalid counter value(s). Error getting/putting semaphore!\n\r");
 8001960:	4809      	ldr	r0, [pc, #36]	; (8001988 <tm_synchronization_processing_thread_report+0x54>)
 8001962:	f008 fd57 	bl	800a414 <iprintf>
        }

        /* Show the time period total.  */
        printf("Time Period Total:  %lu\n\n", tm_synchronization_processing_counter - last_counter);
 8001966:	4b07      	ldr	r3, [pc, #28]	; (8001984 <tm_synchronization_processing_thread_report+0x50>)
 8001968:	681a      	ldr	r2, [r3, #0]
 800196a:	687b      	ldr	r3, [r7, #4]
 800196c:	1ad3      	subs	r3, r2, r3
 800196e:	4619      	mov	r1, r3
 8001970:	4806      	ldr	r0, [pc, #24]	; (800198c <tm_synchronization_processing_thread_report+0x58>)
 8001972:	f008 fd4f 	bl	800a414 <iprintf>

        /* Save the last counter.  */
        last_counter =  tm_synchronization_processing_counter;
 8001976:	4b03      	ldr	r3, [pc, #12]	; (8001984 <tm_synchronization_processing_thread_report+0x50>)
 8001978:	681b      	ldr	r3, [r3, #0]
 800197a:	607b      	str	r3, [r7, #4]
        tm_thread_sleep(TM_TEST_DURATION);
 800197c:	e7e1      	b.n	8001942 <tm_synchronization_processing_thread_report+0xe>
 800197e:	bf00      	nop
 8001980:	0800b6ac 	.word	0x0800b6ac
 8001984:	2000036c 	.word	0x2000036c
 8001988:	0800b6fc 	.word	0x0800b6fc
 800198c:	0800b740 	.word	0x0800b740

08001990 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler: 
  ldr   sp, =_estack       /* set stack pointer */
 8001990:	f8df d034 	ldr.w	sp, [pc, #52]	; 80019c8 <LoopFillZerobss+0x12>
 
/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 8001994:	480d      	ldr	r0, [pc, #52]	; (80019cc <LoopFillZerobss+0x16>)
  ldr r1, =_edata
 8001996:	490e      	ldr	r1, [pc, #56]	; (80019d0 <LoopFillZerobss+0x1a>)
  ldr r2, =_sidata
 8001998:	4a0e      	ldr	r2, [pc, #56]	; (80019d4 <LoopFillZerobss+0x1e>)
  movs r3, #0
 800199a:	2300      	movs	r3, #0
  b LoopCopyDataInit
 800199c:	e002      	b.n	80019a4 <LoopCopyDataInit>

0800199e <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 800199e:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 80019a0:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 80019a2:	3304      	adds	r3, #4

080019a4 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 80019a4:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 80019a6:	428c      	cmp	r4, r1
  bcc CopyDataInit
 80019a8:	d3f9      	bcc.n	800199e <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 80019aa:	4a0b      	ldr	r2, [pc, #44]	; (80019d8 <LoopFillZerobss+0x22>)
  ldr r4, =_ebss
 80019ac:	4c0b      	ldr	r4, [pc, #44]	; (80019dc <LoopFillZerobss+0x26>)
  movs r3, #0
 80019ae:	2300      	movs	r3, #0
  b LoopFillZerobss
 80019b0:	e001      	b.n	80019b6 <LoopFillZerobss>

080019b2 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 80019b2:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 80019b4:	3204      	adds	r2, #4

080019b6 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 80019b6:	42a2      	cmp	r2, r4
  bcc FillZerobss
 80019b8:	d3fb      	bcc.n	80019b2 <FillZerobss>

/* Call the clock system initialization function.*/
  bl  SystemInit   
 80019ba:	f7ff fe7f 	bl	80016bc <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 80019be:	f008 fc0f 	bl	800a1e0 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 80019c2:	f7fe fe17 	bl	80005f4 <main>
  bx  lr    
 80019c6:	4770      	bx	lr
  ldr   sp, =_estack       /* set stack pointer */
 80019c8:	20030000 	.word	0x20030000
  ldr r0, =_sdata
 80019cc:	20000000 	.word	0x20000000
  ldr r1, =_edata
 80019d0:	20000074 	.word	0x20000074
  ldr r2, =_sidata
 80019d4:	0800b834 	.word	0x0800b834
  ldr r2, =_sbss
 80019d8:	20000074 	.word	0x20000074
  ldr r4, =_ebss
 80019dc:	200093e0 	.word	0x200093e0

080019e0 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 80019e0:	e7fe      	b.n	80019e0 <ADC_IRQHandler>
	...

080019e4 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 80019e4:	b580      	push	{r7, lr}
 80019e6:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 80019e8:	4b0e      	ldr	r3, [pc, #56]	; (8001a24 <HAL_Init+0x40>)
 80019ea:	681b      	ldr	r3, [r3, #0]
 80019ec:	4a0d      	ldr	r2, [pc, #52]	; (8001a24 <HAL_Init+0x40>)
 80019ee:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 80019f2:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 80019f4:	4b0b      	ldr	r3, [pc, #44]	; (8001a24 <HAL_Init+0x40>)
 80019f6:	681b      	ldr	r3, [r3, #0]
 80019f8:	4a0a      	ldr	r2, [pc, #40]	; (8001a24 <HAL_Init+0x40>)
 80019fa:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 80019fe:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8001a00:	4b08      	ldr	r3, [pc, #32]	; (8001a24 <HAL_Init+0x40>)
 8001a02:	681b      	ldr	r3, [r3, #0]
 8001a04:	4a07      	ldr	r2, [pc, #28]	; (8001a24 <HAL_Init+0x40>)
 8001a06:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8001a0a:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8001a0c:	2003      	movs	r0, #3
 8001a0e:	f000 f8d8 	bl	8001bc2 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8001a12:	2000      	movs	r0, #0
 8001a14:	f7ff fd10 	bl	8001438 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8001a18:	f7ff f9b0 	bl	8000d7c <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8001a1c:	2300      	movs	r3, #0
}
 8001a1e:	4618      	mov	r0, r3
 8001a20:	bd80      	pop	{r7, pc}
 8001a22:	bf00      	nop
 8001a24:	40023c00 	.word	0x40023c00

08001a28 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8001a28:	b480      	push	{r7}
 8001a2a:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8001a2c:	4b06      	ldr	r3, [pc, #24]	; (8001a48 <HAL_IncTick+0x20>)
 8001a2e:	781b      	ldrb	r3, [r3, #0]
 8001a30:	461a      	mov	r2, r3
 8001a32:	4b06      	ldr	r3, [pc, #24]	; (8001a4c <HAL_IncTick+0x24>)
 8001a34:	681b      	ldr	r3, [r3, #0]
 8001a36:	4413      	add	r3, r2
 8001a38:	4a04      	ldr	r2, [pc, #16]	; (8001a4c <HAL_IncTick+0x24>)
 8001a3a:	6013      	str	r3, [r2, #0]
}
 8001a3c:	bf00      	nop
 8001a3e:	46bd      	mov	sp, r7
 8001a40:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a44:	4770      	bx	lr
 8001a46:	bf00      	nop
 8001a48:	20000008 	.word	0x20000008
 8001a4c:	20000370 	.word	0x20000370

08001a50 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8001a50:	b480      	push	{r7}
 8001a52:	af00      	add	r7, sp, #0
  return uwTick;
 8001a54:	4b03      	ldr	r3, [pc, #12]	; (8001a64 <HAL_GetTick+0x14>)
 8001a56:	681b      	ldr	r3, [r3, #0]
}
 8001a58:	4618      	mov	r0, r3
 8001a5a:	46bd      	mov	sp, r7
 8001a5c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a60:	4770      	bx	lr
 8001a62:	bf00      	nop
 8001a64:	20000370 	.word	0x20000370

08001a68 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001a68:	b480      	push	{r7}
 8001a6a:	b085      	sub	sp, #20
 8001a6c:	af00      	add	r7, sp, #0
 8001a6e:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8001a70:	687b      	ldr	r3, [r7, #4]
 8001a72:	f003 0307 	and.w	r3, r3, #7
 8001a76:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8001a78:	4b0c      	ldr	r3, [pc, #48]	; (8001aac <__NVIC_SetPriorityGrouping+0x44>)
 8001a7a:	68db      	ldr	r3, [r3, #12]
 8001a7c:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8001a7e:	68ba      	ldr	r2, [r7, #8]
 8001a80:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8001a84:	4013      	ands	r3, r2
 8001a86:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8001a88:	68fb      	ldr	r3, [r7, #12]
 8001a8a:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8001a8c:	68bb      	ldr	r3, [r7, #8]
 8001a8e:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8001a90:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8001a94:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8001a98:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8001a9a:	4a04      	ldr	r2, [pc, #16]	; (8001aac <__NVIC_SetPriorityGrouping+0x44>)
 8001a9c:	68bb      	ldr	r3, [r7, #8]
 8001a9e:	60d3      	str	r3, [r2, #12]
}
 8001aa0:	bf00      	nop
 8001aa2:	3714      	adds	r7, #20
 8001aa4:	46bd      	mov	sp, r7
 8001aa6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001aaa:	4770      	bx	lr
 8001aac:	e000ed00 	.word	0xe000ed00

08001ab0 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8001ab0:	b480      	push	{r7}
 8001ab2:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8001ab4:	4b04      	ldr	r3, [pc, #16]	; (8001ac8 <__NVIC_GetPriorityGrouping+0x18>)
 8001ab6:	68db      	ldr	r3, [r3, #12]
 8001ab8:	0a1b      	lsrs	r3, r3, #8
 8001aba:	f003 0307 	and.w	r3, r3, #7
}
 8001abe:	4618      	mov	r0, r3
 8001ac0:	46bd      	mov	sp, r7
 8001ac2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ac6:	4770      	bx	lr
 8001ac8:	e000ed00 	.word	0xe000ed00

08001acc <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001acc:	b480      	push	{r7}
 8001ace:	b083      	sub	sp, #12
 8001ad0:	af00      	add	r7, sp, #0
 8001ad2:	4603      	mov	r3, r0
 8001ad4:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001ad6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001ada:	2b00      	cmp	r3, #0
 8001adc:	db0b      	blt.n	8001af6 <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8001ade:	79fb      	ldrb	r3, [r7, #7]
 8001ae0:	f003 021f 	and.w	r2, r3, #31
 8001ae4:	4907      	ldr	r1, [pc, #28]	; (8001b04 <__NVIC_EnableIRQ+0x38>)
 8001ae6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001aea:	095b      	lsrs	r3, r3, #5
 8001aec:	2001      	movs	r0, #1
 8001aee:	fa00 f202 	lsl.w	r2, r0, r2
 8001af2:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 8001af6:	bf00      	nop
 8001af8:	370c      	adds	r7, #12
 8001afa:	46bd      	mov	sp, r7
 8001afc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b00:	4770      	bx	lr
 8001b02:	bf00      	nop
 8001b04:	e000e100 	.word	0xe000e100

08001b08 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8001b08:	b480      	push	{r7}
 8001b0a:	b083      	sub	sp, #12
 8001b0c:	af00      	add	r7, sp, #0
 8001b0e:	4603      	mov	r3, r0
 8001b10:	6039      	str	r1, [r7, #0]
 8001b12:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001b14:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001b18:	2b00      	cmp	r3, #0
 8001b1a:	db0a      	blt.n	8001b32 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001b1c:	683b      	ldr	r3, [r7, #0]
 8001b1e:	b2da      	uxtb	r2, r3
 8001b20:	490c      	ldr	r1, [pc, #48]	; (8001b54 <__NVIC_SetPriority+0x4c>)
 8001b22:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001b26:	0112      	lsls	r2, r2, #4
 8001b28:	b2d2      	uxtb	r2, r2
 8001b2a:	440b      	add	r3, r1
 8001b2c:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8001b30:	e00a      	b.n	8001b48 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001b32:	683b      	ldr	r3, [r7, #0]
 8001b34:	b2da      	uxtb	r2, r3
 8001b36:	4908      	ldr	r1, [pc, #32]	; (8001b58 <__NVIC_SetPriority+0x50>)
 8001b38:	79fb      	ldrb	r3, [r7, #7]
 8001b3a:	f003 030f 	and.w	r3, r3, #15
 8001b3e:	3b04      	subs	r3, #4
 8001b40:	0112      	lsls	r2, r2, #4
 8001b42:	b2d2      	uxtb	r2, r2
 8001b44:	440b      	add	r3, r1
 8001b46:	761a      	strb	r2, [r3, #24]
}
 8001b48:	bf00      	nop
 8001b4a:	370c      	adds	r7, #12
 8001b4c:	46bd      	mov	sp, r7
 8001b4e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b52:	4770      	bx	lr
 8001b54:	e000e100 	.word	0xe000e100
 8001b58:	e000ed00 	.word	0xe000ed00

08001b5c <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8001b5c:	b480      	push	{r7}
 8001b5e:	b089      	sub	sp, #36	; 0x24
 8001b60:	af00      	add	r7, sp, #0
 8001b62:	60f8      	str	r0, [r7, #12]
 8001b64:	60b9      	str	r1, [r7, #8]
 8001b66:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8001b68:	68fb      	ldr	r3, [r7, #12]
 8001b6a:	f003 0307 	and.w	r3, r3, #7
 8001b6e:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8001b70:	69fb      	ldr	r3, [r7, #28]
 8001b72:	f1c3 0307 	rsb	r3, r3, #7
 8001b76:	2b04      	cmp	r3, #4
 8001b78:	bf28      	it	cs
 8001b7a:	2304      	movcs	r3, #4
 8001b7c:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8001b7e:	69fb      	ldr	r3, [r7, #28]
 8001b80:	3304      	adds	r3, #4
 8001b82:	2b06      	cmp	r3, #6
 8001b84:	d902      	bls.n	8001b8c <NVIC_EncodePriority+0x30>
 8001b86:	69fb      	ldr	r3, [r7, #28]
 8001b88:	3b03      	subs	r3, #3
 8001b8a:	e000      	b.n	8001b8e <NVIC_EncodePriority+0x32>
 8001b8c:	2300      	movs	r3, #0
 8001b8e:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001b90:	f04f 32ff 	mov.w	r2, #4294967295
 8001b94:	69bb      	ldr	r3, [r7, #24]
 8001b96:	fa02 f303 	lsl.w	r3, r2, r3
 8001b9a:	43da      	mvns	r2, r3
 8001b9c:	68bb      	ldr	r3, [r7, #8]
 8001b9e:	401a      	ands	r2, r3
 8001ba0:	697b      	ldr	r3, [r7, #20]
 8001ba2:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8001ba4:	f04f 31ff 	mov.w	r1, #4294967295
 8001ba8:	697b      	ldr	r3, [r7, #20]
 8001baa:	fa01 f303 	lsl.w	r3, r1, r3
 8001bae:	43d9      	mvns	r1, r3
 8001bb0:	687b      	ldr	r3, [r7, #4]
 8001bb2:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001bb4:	4313      	orrs	r3, r2
         );
}
 8001bb6:	4618      	mov	r0, r3
 8001bb8:	3724      	adds	r7, #36	; 0x24
 8001bba:	46bd      	mov	sp, r7
 8001bbc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001bc0:	4770      	bx	lr

08001bc2 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001bc2:	b580      	push	{r7, lr}
 8001bc4:	b082      	sub	sp, #8
 8001bc6:	af00      	add	r7, sp, #0
 8001bc8:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8001bca:	6878      	ldr	r0, [r7, #4]
 8001bcc:	f7ff ff4c 	bl	8001a68 <__NVIC_SetPriorityGrouping>
}
 8001bd0:	bf00      	nop
 8001bd2:	3708      	adds	r7, #8
 8001bd4:	46bd      	mov	sp, r7
 8001bd6:	bd80      	pop	{r7, pc}

08001bd8 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8001bd8:	b580      	push	{r7, lr}
 8001bda:	b086      	sub	sp, #24
 8001bdc:	af00      	add	r7, sp, #0
 8001bde:	4603      	mov	r3, r0
 8001be0:	60b9      	str	r1, [r7, #8]
 8001be2:	607a      	str	r2, [r7, #4]
 8001be4:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8001be6:	2300      	movs	r3, #0
 8001be8:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8001bea:	f7ff ff61 	bl	8001ab0 <__NVIC_GetPriorityGrouping>
 8001bee:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8001bf0:	687a      	ldr	r2, [r7, #4]
 8001bf2:	68b9      	ldr	r1, [r7, #8]
 8001bf4:	6978      	ldr	r0, [r7, #20]
 8001bf6:	f7ff ffb1 	bl	8001b5c <NVIC_EncodePriority>
 8001bfa:	4602      	mov	r2, r0
 8001bfc:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8001c00:	4611      	mov	r1, r2
 8001c02:	4618      	mov	r0, r3
 8001c04:	f7ff ff80 	bl	8001b08 <__NVIC_SetPriority>
}
 8001c08:	bf00      	nop
 8001c0a:	3718      	adds	r7, #24
 8001c0c:	46bd      	mov	sp, r7
 8001c0e:	bd80      	pop	{r7, pc}

08001c10 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001c10:	b580      	push	{r7, lr}
 8001c12:	b082      	sub	sp, #8
 8001c14:	af00      	add	r7, sp, #0
 8001c16:	4603      	mov	r3, r0
 8001c18:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8001c1a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001c1e:	4618      	mov	r0, r3
 8001c20:	f7ff ff54 	bl	8001acc <__NVIC_EnableIRQ>
}
 8001c24:	bf00      	nop
 8001c26:	3708      	adds	r7, #8
 8001c28:	46bd      	mov	sp, r7
 8001c2a:	bd80      	pop	{r7, pc}

08001c2c <HAL_CRC_Init>:
  *         parameters in the CRC_InitTypeDef and create the associated handle.
  * @param  hcrc CRC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CRC_Init(CRC_HandleTypeDef *hcrc)
{
 8001c2c:	b580      	push	{r7, lr}
 8001c2e:	b082      	sub	sp, #8
 8001c30:	af00      	add	r7, sp, #0
 8001c32:	6078      	str	r0, [r7, #4]
  /* Check the CRC handle allocation */
  if (hcrc == NULL)
 8001c34:	687b      	ldr	r3, [r7, #4]
 8001c36:	2b00      	cmp	r3, #0
 8001c38:	d101      	bne.n	8001c3e <HAL_CRC_Init+0x12>
  {
    return HAL_ERROR;
 8001c3a:	2301      	movs	r3, #1
 8001c3c:	e00e      	b.n	8001c5c <HAL_CRC_Init+0x30>
  }

  /* Check the parameters */
  assert_param(IS_CRC_ALL_INSTANCE(hcrc->Instance));

  if (hcrc->State == HAL_CRC_STATE_RESET)
 8001c3e:	687b      	ldr	r3, [r7, #4]
 8001c40:	795b      	ldrb	r3, [r3, #5]
 8001c42:	b2db      	uxtb	r3, r3
 8001c44:	2b00      	cmp	r3, #0
 8001c46:	d105      	bne.n	8001c54 <HAL_CRC_Init+0x28>
  {
    /* Allocate lock resource and initialize it */
    hcrc->Lock = HAL_UNLOCKED;
 8001c48:	687b      	ldr	r3, [r7, #4]
 8001c4a:	2200      	movs	r2, #0
 8001c4c:	711a      	strb	r2, [r3, #4]
    /* Init the low level hardware */
    HAL_CRC_MspInit(hcrc);
 8001c4e:	6878      	ldr	r0, [r7, #4]
 8001c50:	f7ff f8c0 	bl	8000dd4 <HAL_CRC_MspInit>
  }

  /* Change CRC peripheral state */
  hcrc->State = HAL_CRC_STATE_READY;
 8001c54:	687b      	ldr	r3, [r7, #4]
 8001c56:	2201      	movs	r2, #1
 8001c58:	715a      	strb	r2, [r3, #5]

  /* Return function status */
  return HAL_OK;
 8001c5a:	2300      	movs	r3, #0
}
 8001c5c:	4618      	mov	r0, r3
 8001c5e:	3708      	adds	r7, #8
 8001c60:	46bd      	mov	sp, r7
 8001c62:	bd80      	pop	{r7, pc}

08001c64 <HAL_DMA2D_Init>:
  * @param  hdma2d pointer to a DMA2D_HandleTypeDef structure that contains
  *                 the configuration information for the DMA2D.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA2D_Init(DMA2D_HandleTypeDef *hdma2d)
{
 8001c64:	b580      	push	{r7, lr}
 8001c66:	b082      	sub	sp, #8
 8001c68:	af00      	add	r7, sp, #0
 8001c6a:	6078      	str	r0, [r7, #4]
  /* Check the DMA2D peripheral state */
  if (hdma2d == NULL)
 8001c6c:	687b      	ldr	r3, [r7, #4]
 8001c6e:	2b00      	cmp	r3, #0
 8001c70:	d101      	bne.n	8001c76 <HAL_DMA2D_Init+0x12>
  {
    return HAL_ERROR;
 8001c72:	2301      	movs	r3, #1
 8001c74:	e03b      	b.n	8001cee <HAL_DMA2D_Init+0x8a>

    /* Init the low level hardware */
    hdma2d->MspInitCallback(hdma2d);
  }
#else
  if (hdma2d->State == HAL_DMA2D_STATE_RESET)
 8001c76:	687b      	ldr	r3, [r7, #4]
 8001c78:	f893 3039 	ldrb.w	r3, [r3, #57]	; 0x39
 8001c7c:	b2db      	uxtb	r3, r3
 8001c7e:	2b00      	cmp	r3, #0
 8001c80:	d106      	bne.n	8001c90 <HAL_DMA2D_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hdma2d->Lock = HAL_UNLOCKED;
 8001c82:	687b      	ldr	r3, [r7, #4]
 8001c84:	2200      	movs	r2, #0
 8001c86:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
    /* Init the low level hardware */
    HAL_DMA2D_MspInit(hdma2d);
 8001c8a:	6878      	ldr	r0, [r7, #4]
 8001c8c:	f7ff f8c4 	bl	8000e18 <HAL_DMA2D_MspInit>
  }
#endif /* (USE_HAL_DMA2D_REGISTER_CALLBACKS) */

  /* Change DMA2D peripheral state */
  hdma2d->State = HAL_DMA2D_STATE_BUSY;
 8001c90:	687b      	ldr	r3, [r7, #4]
 8001c92:	2202      	movs	r2, #2
 8001c94:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

  /* DMA2D CR register configuration -------------------------------------------*/
  MODIFY_REG(hdma2d->Instance->CR, DMA2D_CR_MODE, hdma2d->Init.Mode);
 8001c98:	687b      	ldr	r3, [r7, #4]
 8001c9a:	681b      	ldr	r3, [r3, #0]
 8001c9c:	681b      	ldr	r3, [r3, #0]
 8001c9e:	f423 3140 	bic.w	r1, r3, #196608	; 0x30000
 8001ca2:	687b      	ldr	r3, [r7, #4]
 8001ca4:	685a      	ldr	r2, [r3, #4]
 8001ca6:	687b      	ldr	r3, [r7, #4]
 8001ca8:	681b      	ldr	r3, [r3, #0]
 8001caa:	430a      	orrs	r2, r1
 8001cac:	601a      	str	r2, [r3, #0]

  /* DMA2D OPFCCR register configuration ---------------------------------------*/
  MODIFY_REG(hdma2d->Instance->OPFCCR, DMA2D_OPFCCR_CM, hdma2d->Init.ColorMode);
 8001cae:	687b      	ldr	r3, [r7, #4]
 8001cb0:	681b      	ldr	r3, [r3, #0]
 8001cb2:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8001cb4:	f023 0107 	bic.w	r1, r3, #7
 8001cb8:	687b      	ldr	r3, [r7, #4]
 8001cba:	689a      	ldr	r2, [r3, #8]
 8001cbc:	687b      	ldr	r3, [r7, #4]
 8001cbe:	681b      	ldr	r3, [r3, #0]
 8001cc0:	430a      	orrs	r2, r1
 8001cc2:	635a      	str	r2, [r3, #52]	; 0x34

  /* DMA2D OOR register configuration ------------------------------------------*/
  MODIFY_REG(hdma2d->Instance->OOR, DMA2D_OOR_LO, hdma2d->Init.OutputOffset);
 8001cc4:	687b      	ldr	r3, [r7, #4]
 8001cc6:	681b      	ldr	r3, [r3, #0]
 8001cc8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001cca:	f423 537f 	bic.w	r3, r3, #16320	; 0x3fc0
 8001cce:	f023 033f 	bic.w	r3, r3, #63	; 0x3f
 8001cd2:	687a      	ldr	r2, [r7, #4]
 8001cd4:	68d1      	ldr	r1, [r2, #12]
 8001cd6:	687a      	ldr	r2, [r7, #4]
 8001cd8:	6812      	ldr	r2, [r2, #0]
 8001cda:	430b      	orrs	r3, r1
 8001cdc:	6413      	str	r3, [r2, #64]	; 0x40


  /* Update error code */
  hdma2d->ErrorCode = HAL_DMA2D_ERROR_NONE;
 8001cde:	687b      	ldr	r3, [r7, #4]
 8001ce0:	2200      	movs	r2, #0
 8001ce2:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Initialize the DMA2D state*/
  hdma2d->State  = HAL_DMA2D_STATE_READY;
 8001ce4:	687b      	ldr	r3, [r7, #4]
 8001ce6:	2201      	movs	r2, #1
 8001ce8:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

  return HAL_OK;
 8001cec:	2300      	movs	r3, #0
}
 8001cee:	4618      	mov	r0, r3
 8001cf0:	3708      	adds	r7, #8
 8001cf2:	46bd      	mov	sp, r7
 8001cf4:	bd80      	pop	{r7, pc}

08001cf6 <HAL_DMA2D_IRQHandler>:
  * @param  hdma2d Pointer to a DMA2D_HandleTypeDef structure that contains
  *                 the configuration information for the DMA2D.
  * @retval HAL status
  */
void HAL_DMA2D_IRQHandler(DMA2D_HandleTypeDef *hdma2d)
{
 8001cf6:	b580      	push	{r7, lr}
 8001cf8:	b084      	sub	sp, #16
 8001cfa:	af00      	add	r7, sp, #0
 8001cfc:	6078      	str	r0, [r7, #4]
  uint32_t isrflags = READ_REG(hdma2d->Instance->ISR);
 8001cfe:	687b      	ldr	r3, [r7, #4]
 8001d00:	681b      	ldr	r3, [r3, #0]
 8001d02:	685b      	ldr	r3, [r3, #4]
 8001d04:	60fb      	str	r3, [r7, #12]
  uint32_t crflags = READ_REG(hdma2d->Instance->CR);
 8001d06:	687b      	ldr	r3, [r7, #4]
 8001d08:	681b      	ldr	r3, [r3, #0]
 8001d0a:	681b      	ldr	r3, [r3, #0]
 8001d0c:	60bb      	str	r3, [r7, #8]

  /* Transfer Error Interrupt management ***************************************/
  if ((isrflags & DMA2D_FLAG_TE) != 0U)
 8001d0e:	68fb      	ldr	r3, [r7, #12]
 8001d10:	f003 0301 	and.w	r3, r3, #1
 8001d14:	2b00      	cmp	r3, #0
 8001d16:	d026      	beq.n	8001d66 <HAL_DMA2D_IRQHandler+0x70>
  {
    if ((crflags & DMA2D_IT_TE) != 0U)
 8001d18:	68bb      	ldr	r3, [r7, #8]
 8001d1a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001d1e:	2b00      	cmp	r3, #0
 8001d20:	d021      	beq.n	8001d66 <HAL_DMA2D_IRQHandler+0x70>
    {
      /* Disable the transfer Error interrupt */
      __HAL_DMA2D_DISABLE_IT(hdma2d, DMA2D_IT_TE);
 8001d22:	687b      	ldr	r3, [r7, #4]
 8001d24:	681b      	ldr	r3, [r3, #0]
 8001d26:	681a      	ldr	r2, [r3, #0]
 8001d28:	687b      	ldr	r3, [r7, #4]
 8001d2a:	681b      	ldr	r3, [r3, #0]
 8001d2c:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8001d30:	601a      	str	r2, [r3, #0]

      /* Update error code */
      hdma2d->ErrorCode |= HAL_DMA2D_ERROR_TE;
 8001d32:	687b      	ldr	r3, [r7, #4]
 8001d34:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8001d36:	f043 0201 	orr.w	r2, r3, #1
 8001d3a:	687b      	ldr	r3, [r7, #4]
 8001d3c:	63da      	str	r2, [r3, #60]	; 0x3c

      /* Clear the transfer error flag */
      __HAL_DMA2D_CLEAR_FLAG(hdma2d, DMA2D_FLAG_TE);
 8001d3e:	687b      	ldr	r3, [r7, #4]
 8001d40:	681b      	ldr	r3, [r3, #0]
 8001d42:	2201      	movs	r2, #1
 8001d44:	609a      	str	r2, [r3, #8]

      /* Change DMA2D state */
      hdma2d->State = HAL_DMA2D_STATE_ERROR;
 8001d46:	687b      	ldr	r3, [r7, #4]
 8001d48:	2204      	movs	r2, #4
 8001d4a:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

      /* Process Unlocked */
      __HAL_UNLOCK(hdma2d);
 8001d4e:	687b      	ldr	r3, [r7, #4]
 8001d50:	2200      	movs	r2, #0
 8001d52:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

      if (hdma2d->XferErrorCallback != NULL)
 8001d56:	687b      	ldr	r3, [r7, #4]
 8001d58:	695b      	ldr	r3, [r3, #20]
 8001d5a:	2b00      	cmp	r3, #0
 8001d5c:	d003      	beq.n	8001d66 <HAL_DMA2D_IRQHandler+0x70>
      {
        /* Transfer error Callback */
        hdma2d->XferErrorCallback(hdma2d);
 8001d5e:	687b      	ldr	r3, [r7, #4]
 8001d60:	695b      	ldr	r3, [r3, #20]
 8001d62:	6878      	ldr	r0, [r7, #4]
 8001d64:	4798      	blx	r3
      }
    }
  }
  /* Configuration Error Interrupt management **********************************/
  if ((isrflags & DMA2D_FLAG_CE) != 0U)
 8001d66:	68fb      	ldr	r3, [r7, #12]
 8001d68:	f003 0320 	and.w	r3, r3, #32
 8001d6c:	2b00      	cmp	r3, #0
 8001d6e:	d026      	beq.n	8001dbe <HAL_DMA2D_IRQHandler+0xc8>
  {
    if ((crflags & DMA2D_IT_CE) != 0U)
 8001d70:	68bb      	ldr	r3, [r7, #8]
 8001d72:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8001d76:	2b00      	cmp	r3, #0
 8001d78:	d021      	beq.n	8001dbe <HAL_DMA2D_IRQHandler+0xc8>
    {
      /* Disable the Configuration Error interrupt */
      __HAL_DMA2D_DISABLE_IT(hdma2d, DMA2D_IT_CE);
 8001d7a:	687b      	ldr	r3, [r7, #4]
 8001d7c:	681b      	ldr	r3, [r3, #0]
 8001d7e:	681a      	ldr	r2, [r3, #0]
 8001d80:	687b      	ldr	r3, [r7, #4]
 8001d82:	681b      	ldr	r3, [r3, #0]
 8001d84:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8001d88:	601a      	str	r2, [r3, #0]

      /* Clear the Configuration error flag */
      __HAL_DMA2D_CLEAR_FLAG(hdma2d, DMA2D_FLAG_CE);
 8001d8a:	687b      	ldr	r3, [r7, #4]
 8001d8c:	681b      	ldr	r3, [r3, #0]
 8001d8e:	2220      	movs	r2, #32
 8001d90:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma2d->ErrorCode |= HAL_DMA2D_ERROR_CE;
 8001d92:	687b      	ldr	r3, [r7, #4]
 8001d94:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8001d96:	f043 0202 	orr.w	r2, r3, #2
 8001d9a:	687b      	ldr	r3, [r7, #4]
 8001d9c:	63da      	str	r2, [r3, #60]	; 0x3c

      /* Change DMA2D state */
      hdma2d->State = HAL_DMA2D_STATE_ERROR;
 8001d9e:	687b      	ldr	r3, [r7, #4]
 8001da0:	2204      	movs	r2, #4
 8001da2:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

      /* Process Unlocked */
      __HAL_UNLOCK(hdma2d);
 8001da6:	687b      	ldr	r3, [r7, #4]
 8001da8:	2200      	movs	r2, #0
 8001daa:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

      if (hdma2d->XferErrorCallback != NULL)
 8001dae:	687b      	ldr	r3, [r7, #4]
 8001db0:	695b      	ldr	r3, [r3, #20]
 8001db2:	2b00      	cmp	r3, #0
 8001db4:	d003      	beq.n	8001dbe <HAL_DMA2D_IRQHandler+0xc8>
      {
        /* Transfer error Callback */
        hdma2d->XferErrorCallback(hdma2d);
 8001db6:	687b      	ldr	r3, [r7, #4]
 8001db8:	695b      	ldr	r3, [r3, #20]
 8001dba:	6878      	ldr	r0, [r7, #4]
 8001dbc:	4798      	blx	r3
      }
    }
  }
  /* CLUT access Error Interrupt management ***********************************/
  if ((isrflags & DMA2D_FLAG_CAE) != 0U)
 8001dbe:	68fb      	ldr	r3, [r7, #12]
 8001dc0:	f003 0308 	and.w	r3, r3, #8
 8001dc4:	2b00      	cmp	r3, #0
 8001dc6:	d026      	beq.n	8001e16 <HAL_DMA2D_IRQHandler+0x120>
  {
    if ((crflags & DMA2D_IT_CAE) != 0U)
 8001dc8:	68bb      	ldr	r3, [r7, #8]
 8001dca:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8001dce:	2b00      	cmp	r3, #0
 8001dd0:	d021      	beq.n	8001e16 <HAL_DMA2D_IRQHandler+0x120>
    {
      /* Disable the CLUT access error interrupt */
      __HAL_DMA2D_DISABLE_IT(hdma2d, DMA2D_IT_CAE);
 8001dd2:	687b      	ldr	r3, [r7, #4]
 8001dd4:	681b      	ldr	r3, [r3, #0]
 8001dd6:	681a      	ldr	r2, [r3, #0]
 8001dd8:	687b      	ldr	r3, [r7, #4]
 8001dda:	681b      	ldr	r3, [r3, #0]
 8001ddc:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8001de0:	601a      	str	r2, [r3, #0]

      /* Clear the CLUT access error flag */
      __HAL_DMA2D_CLEAR_FLAG(hdma2d, DMA2D_FLAG_CAE);
 8001de2:	687b      	ldr	r3, [r7, #4]
 8001de4:	681b      	ldr	r3, [r3, #0]
 8001de6:	2208      	movs	r2, #8
 8001de8:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma2d->ErrorCode |= HAL_DMA2D_ERROR_CAE;
 8001dea:	687b      	ldr	r3, [r7, #4]
 8001dec:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8001dee:	f043 0204 	orr.w	r2, r3, #4
 8001df2:	687b      	ldr	r3, [r7, #4]
 8001df4:	63da      	str	r2, [r3, #60]	; 0x3c

      /* Change DMA2D state */
      hdma2d->State = HAL_DMA2D_STATE_ERROR;
 8001df6:	687b      	ldr	r3, [r7, #4]
 8001df8:	2204      	movs	r2, #4
 8001dfa:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

      /* Process Unlocked */
      __HAL_UNLOCK(hdma2d);
 8001dfe:	687b      	ldr	r3, [r7, #4]
 8001e00:	2200      	movs	r2, #0
 8001e02:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

      if (hdma2d->XferErrorCallback != NULL)
 8001e06:	687b      	ldr	r3, [r7, #4]
 8001e08:	695b      	ldr	r3, [r3, #20]
 8001e0a:	2b00      	cmp	r3, #0
 8001e0c:	d003      	beq.n	8001e16 <HAL_DMA2D_IRQHandler+0x120>
      {
        /* Transfer error Callback */
        hdma2d->XferErrorCallback(hdma2d);
 8001e0e:	687b      	ldr	r3, [r7, #4]
 8001e10:	695b      	ldr	r3, [r3, #20]
 8001e12:	6878      	ldr	r0, [r7, #4]
 8001e14:	4798      	blx	r3
      }
    }
  }
  /* Transfer watermark Interrupt management **********************************/
  if ((isrflags & DMA2D_FLAG_TW) != 0U)
 8001e16:	68fb      	ldr	r3, [r7, #12]
 8001e18:	f003 0304 	and.w	r3, r3, #4
 8001e1c:	2b00      	cmp	r3, #0
 8001e1e:	d013      	beq.n	8001e48 <HAL_DMA2D_IRQHandler+0x152>
  {
    if ((crflags & DMA2D_IT_TW) != 0U)
 8001e20:	68bb      	ldr	r3, [r7, #8]
 8001e22:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8001e26:	2b00      	cmp	r3, #0
 8001e28:	d00e      	beq.n	8001e48 <HAL_DMA2D_IRQHandler+0x152>
    {
      /* Disable the transfer watermark interrupt */
      __HAL_DMA2D_DISABLE_IT(hdma2d, DMA2D_IT_TW);
 8001e2a:	687b      	ldr	r3, [r7, #4]
 8001e2c:	681b      	ldr	r3, [r3, #0]
 8001e2e:	681a      	ldr	r2, [r3, #0]
 8001e30:	687b      	ldr	r3, [r7, #4]
 8001e32:	681b      	ldr	r3, [r3, #0]
 8001e34:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8001e38:	601a      	str	r2, [r3, #0]

      /* Clear the transfer watermark flag */
      __HAL_DMA2D_CLEAR_FLAG(hdma2d, DMA2D_FLAG_TW);
 8001e3a:	687b      	ldr	r3, [r7, #4]
 8001e3c:	681b      	ldr	r3, [r3, #0]
 8001e3e:	2204      	movs	r2, #4
 8001e40:	609a      	str	r2, [r3, #8]

      /* Transfer watermark Callback */
#if (USE_HAL_DMA2D_REGISTER_CALLBACKS == 1)
      hdma2d->LineEventCallback(hdma2d);
#else
      HAL_DMA2D_LineEventCallback(hdma2d);
 8001e42:	6878      	ldr	r0, [r7, #4]
 8001e44:	f000 f853 	bl	8001eee <HAL_DMA2D_LineEventCallback>
#endif /* USE_HAL_DMA2D_REGISTER_CALLBACKS */

    }
  }
  /* Transfer Complete Interrupt management ************************************/
  if ((isrflags & DMA2D_FLAG_TC) != 0U)
 8001e48:	68fb      	ldr	r3, [r7, #12]
 8001e4a:	f003 0302 	and.w	r3, r3, #2
 8001e4e:	2b00      	cmp	r3, #0
 8001e50:	d024      	beq.n	8001e9c <HAL_DMA2D_IRQHandler+0x1a6>
  {
    if ((crflags & DMA2D_IT_TC) != 0U)
 8001e52:	68bb      	ldr	r3, [r7, #8]
 8001e54:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8001e58:	2b00      	cmp	r3, #0
 8001e5a:	d01f      	beq.n	8001e9c <HAL_DMA2D_IRQHandler+0x1a6>
    {
      /* Disable the transfer complete interrupt */
      __HAL_DMA2D_DISABLE_IT(hdma2d, DMA2D_IT_TC);
 8001e5c:	687b      	ldr	r3, [r7, #4]
 8001e5e:	681b      	ldr	r3, [r3, #0]
 8001e60:	681a      	ldr	r2, [r3, #0]
 8001e62:	687b      	ldr	r3, [r7, #4]
 8001e64:	681b      	ldr	r3, [r3, #0]
 8001e66:	f422 7200 	bic.w	r2, r2, #512	; 0x200
 8001e6a:	601a      	str	r2, [r3, #0]

      /* Clear the transfer complete flag */
      __HAL_DMA2D_CLEAR_FLAG(hdma2d, DMA2D_FLAG_TC);
 8001e6c:	687b      	ldr	r3, [r7, #4]
 8001e6e:	681b      	ldr	r3, [r3, #0]
 8001e70:	2202      	movs	r2, #2
 8001e72:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma2d->ErrorCode |= HAL_DMA2D_ERROR_NONE;
 8001e74:	687b      	ldr	r3, [r7, #4]
 8001e76:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8001e78:	687b      	ldr	r3, [r7, #4]
 8001e7a:	63da      	str	r2, [r3, #60]	; 0x3c

      /* Change DMA2D state */
      hdma2d->State = HAL_DMA2D_STATE_READY;
 8001e7c:	687b      	ldr	r3, [r7, #4]
 8001e7e:	2201      	movs	r2, #1
 8001e80:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

      /* Process Unlocked */
      __HAL_UNLOCK(hdma2d);
 8001e84:	687b      	ldr	r3, [r7, #4]
 8001e86:	2200      	movs	r2, #0
 8001e88:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

      if (hdma2d->XferCpltCallback != NULL)
 8001e8c:	687b      	ldr	r3, [r7, #4]
 8001e8e:	691b      	ldr	r3, [r3, #16]
 8001e90:	2b00      	cmp	r3, #0
 8001e92:	d003      	beq.n	8001e9c <HAL_DMA2D_IRQHandler+0x1a6>
      {
        /* Transfer complete Callback */
        hdma2d->XferCpltCallback(hdma2d);
 8001e94:	687b      	ldr	r3, [r7, #4]
 8001e96:	691b      	ldr	r3, [r3, #16]
 8001e98:	6878      	ldr	r0, [r7, #4]
 8001e9a:	4798      	blx	r3
      }
    }
  }
  /* CLUT Transfer Complete Interrupt management ******************************/
  if ((isrflags & DMA2D_FLAG_CTC) != 0U)
 8001e9c:	68fb      	ldr	r3, [r7, #12]
 8001e9e:	f003 0310 	and.w	r3, r3, #16
 8001ea2:	2b00      	cmp	r3, #0
 8001ea4:	d01f      	beq.n	8001ee6 <HAL_DMA2D_IRQHandler+0x1f0>
  {
    if ((crflags & DMA2D_IT_CTC) != 0U)
 8001ea6:	68bb      	ldr	r3, [r7, #8]
 8001ea8:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8001eac:	2b00      	cmp	r3, #0
 8001eae:	d01a      	beq.n	8001ee6 <HAL_DMA2D_IRQHandler+0x1f0>
    {
      /* Disable the CLUT transfer complete interrupt */
      __HAL_DMA2D_DISABLE_IT(hdma2d, DMA2D_IT_CTC);
 8001eb0:	687b      	ldr	r3, [r7, #4]
 8001eb2:	681b      	ldr	r3, [r3, #0]
 8001eb4:	681a      	ldr	r2, [r3, #0]
 8001eb6:	687b      	ldr	r3, [r7, #4]
 8001eb8:	681b      	ldr	r3, [r3, #0]
 8001eba:	f422 5280 	bic.w	r2, r2, #4096	; 0x1000
 8001ebe:	601a      	str	r2, [r3, #0]

      /* Clear the CLUT transfer complete flag */
      __HAL_DMA2D_CLEAR_FLAG(hdma2d, DMA2D_FLAG_CTC);
 8001ec0:	687b      	ldr	r3, [r7, #4]
 8001ec2:	681b      	ldr	r3, [r3, #0]
 8001ec4:	2210      	movs	r2, #16
 8001ec6:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma2d->ErrorCode |= HAL_DMA2D_ERROR_NONE;
 8001ec8:	687b      	ldr	r3, [r7, #4]
 8001eca:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8001ecc:	687b      	ldr	r3, [r7, #4]
 8001ece:	63da      	str	r2, [r3, #60]	; 0x3c

      /* Change DMA2D state */
      hdma2d->State = HAL_DMA2D_STATE_READY;
 8001ed0:	687b      	ldr	r3, [r7, #4]
 8001ed2:	2201      	movs	r2, #1
 8001ed4:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

      /* Process Unlocked */
      __HAL_UNLOCK(hdma2d);
 8001ed8:	687b      	ldr	r3, [r7, #4]
 8001eda:	2200      	movs	r2, #0
 8001edc:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

      /* CLUT Transfer complete Callback */
#if (USE_HAL_DMA2D_REGISTER_CALLBACKS == 1)
      hdma2d->CLUTLoadingCpltCallback(hdma2d);
#else
      HAL_DMA2D_CLUTLoadingCpltCallback(hdma2d);
 8001ee0:	6878      	ldr	r0, [r7, #4]
 8001ee2:	f000 f80e 	bl	8001f02 <HAL_DMA2D_CLUTLoadingCpltCallback>
#endif /* USE_HAL_DMA2D_REGISTER_CALLBACKS */
    }
  }

}
 8001ee6:	bf00      	nop
 8001ee8:	3710      	adds	r7, #16
 8001eea:	46bd      	mov	sp, r7
 8001eec:	bd80      	pop	{r7, pc}

08001eee <HAL_DMA2D_LineEventCallback>:
  * @param  hdma2d pointer to a DMA2D_HandleTypeDef structure that contains
  *                 the configuration information for the DMA2D.
  * @retval None
  */
__weak void HAL_DMA2D_LineEventCallback(DMA2D_HandleTypeDef *hdma2d)
{
 8001eee:	b480      	push	{r7}
 8001ef0:	b083      	sub	sp, #12
 8001ef2:	af00      	add	r7, sp, #0
 8001ef4:	6078      	str	r0, [r7, #4]
  UNUSED(hdma2d);

  /* NOTE : This function should not be modified; when the callback is needed,
            the HAL_DMA2D_LineEventCallback can be implemented in the user file.
   */
}
 8001ef6:	bf00      	nop
 8001ef8:	370c      	adds	r7, #12
 8001efa:	46bd      	mov	sp, r7
 8001efc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f00:	4770      	bx	lr

08001f02 <HAL_DMA2D_CLUTLoadingCpltCallback>:
  * @param  hdma2d pointer to a DMA2D_HandleTypeDef structure that contains
  *                 the configuration information for the DMA2D.
  * @retval None
  */
__weak void HAL_DMA2D_CLUTLoadingCpltCallback(DMA2D_HandleTypeDef *hdma2d)
{
 8001f02:	b480      	push	{r7}
 8001f04:	b083      	sub	sp, #12
 8001f06:	af00      	add	r7, sp, #0
 8001f08:	6078      	str	r0, [r7, #4]
  UNUSED(hdma2d);

  /* NOTE : This function should not be modified; when the callback is needed,
            the HAL_DMA2D_CLUTLoadingCpltCallback can be implemented in the user file.
   */
}
 8001f0a:	bf00      	nop
 8001f0c:	370c      	adds	r7, #12
 8001f0e:	46bd      	mov	sp, r7
 8001f10:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f14:	4770      	bx	lr
	...

08001f18 <HAL_DMA2D_ConfigLayer>:
  *                   This parameter can be one of the following values:
  *                   DMA2D_BACKGROUND_LAYER(0) / DMA2D_FOREGROUND_LAYER(1)
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA2D_ConfigLayer(DMA2D_HandleTypeDef *hdma2d, uint32_t LayerIdx)
{
 8001f18:	b480      	push	{r7}
 8001f1a:	b087      	sub	sp, #28
 8001f1c:	af00      	add	r7, sp, #0
 8001f1e:	6078      	str	r0, [r7, #4]
 8001f20:	6039      	str	r1, [r7, #0]
  uint32_t regValue;

  /* Check the parameters */
  assert_param(IS_DMA2D_LAYER(LayerIdx));
  assert_param(IS_DMA2D_OFFSET(hdma2d->LayerCfg[LayerIdx].InputOffset));
  if (hdma2d->Init.Mode != DMA2D_R2M)
 8001f22:	687b      	ldr	r3, [r7, #4]
 8001f24:	685b      	ldr	r3, [r3, #4]
 8001f26:	f5b3 3f40 	cmp.w	r3, #196608	; 0x30000
      assert_param(IS_DMA2D_ALPHA_MODE(hdma2d->LayerCfg[LayerIdx].AlphaMode));
    }
  }

  /* Process locked */
  __HAL_LOCK(hdma2d);
 8001f2a:	687b      	ldr	r3, [r7, #4]
 8001f2c:	f893 3038 	ldrb.w	r3, [r3, #56]	; 0x38
 8001f30:	2b01      	cmp	r3, #1
 8001f32:	d101      	bne.n	8001f38 <HAL_DMA2D_ConfigLayer+0x20>
 8001f34:	2302      	movs	r3, #2
 8001f36:	e079      	b.n	800202c <HAL_DMA2D_ConfigLayer+0x114>
 8001f38:	687b      	ldr	r3, [r7, #4]
 8001f3a:	2201      	movs	r2, #1
 8001f3c:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

  /* Change DMA2D peripheral state */
  hdma2d->State = HAL_DMA2D_STATE_BUSY;
 8001f40:	687b      	ldr	r3, [r7, #4]
 8001f42:	2202      	movs	r2, #2
 8001f44:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

  pLayerCfg = &hdma2d->LayerCfg[LayerIdx];
 8001f48:	683b      	ldr	r3, [r7, #0]
 8001f4a:	011b      	lsls	r3, r3, #4
 8001f4c:	3318      	adds	r3, #24
 8001f4e:	687a      	ldr	r2, [r7, #4]
 8001f50:	4413      	add	r3, r2
 8001f52:	613b      	str	r3, [r7, #16]

  /* Prepare the value to be written to the BGPFCCR or FGPFCCR register */
  regValue = pLayerCfg->InputColorMode | (pLayerCfg->AlphaMode << DMA2D_BGPFCCR_AM_Pos);
 8001f54:	693b      	ldr	r3, [r7, #16]
 8001f56:	685a      	ldr	r2, [r3, #4]
 8001f58:	693b      	ldr	r3, [r7, #16]
 8001f5a:	689b      	ldr	r3, [r3, #8]
 8001f5c:	041b      	lsls	r3, r3, #16
 8001f5e:	4313      	orrs	r3, r2
 8001f60:	617b      	str	r3, [r7, #20]
  regMask  = DMA2D_BGPFCCR_CM | DMA2D_BGPFCCR_AM | DMA2D_BGPFCCR_ALPHA;
 8001f62:	4b35      	ldr	r3, [pc, #212]	; (8002038 <HAL_DMA2D_ConfigLayer+0x120>)
 8001f64:	60fb      	str	r3, [r7, #12]


  if ((pLayerCfg->InputColorMode == DMA2D_INPUT_A4) || (pLayerCfg->InputColorMode == DMA2D_INPUT_A8))
 8001f66:	693b      	ldr	r3, [r7, #16]
 8001f68:	685b      	ldr	r3, [r3, #4]
 8001f6a:	2b0a      	cmp	r3, #10
 8001f6c:	d003      	beq.n	8001f76 <HAL_DMA2D_ConfigLayer+0x5e>
 8001f6e:	693b      	ldr	r3, [r7, #16]
 8001f70:	685b      	ldr	r3, [r3, #4]
 8001f72:	2b09      	cmp	r3, #9
 8001f74:	d107      	bne.n	8001f86 <HAL_DMA2D_ConfigLayer+0x6e>
  {
    regValue |= (pLayerCfg->InputAlpha & DMA2D_BGPFCCR_ALPHA);
 8001f76:	693b      	ldr	r3, [r7, #16]
 8001f78:	68db      	ldr	r3, [r3, #12]
 8001f7a:	f003 437f 	and.w	r3, r3, #4278190080	; 0xff000000
 8001f7e:	697a      	ldr	r2, [r7, #20]
 8001f80:	4313      	orrs	r3, r2
 8001f82:	617b      	str	r3, [r7, #20]
 8001f84:	e005      	b.n	8001f92 <HAL_DMA2D_ConfigLayer+0x7a>
  }
  else
  {
    regValue |= (pLayerCfg->InputAlpha << DMA2D_BGPFCCR_ALPHA_Pos);
 8001f86:	693b      	ldr	r3, [r7, #16]
 8001f88:	68db      	ldr	r3, [r3, #12]
 8001f8a:	061b      	lsls	r3, r3, #24
 8001f8c:	697a      	ldr	r2, [r7, #20]
 8001f8e:	4313      	orrs	r3, r2
 8001f90:	617b      	str	r3, [r7, #20]
  }

  /* Configure the background DMA2D layer */
  if (LayerIdx == DMA2D_BACKGROUND_LAYER)
 8001f92:	683b      	ldr	r3, [r7, #0]
 8001f94:	2b00      	cmp	r3, #0
 8001f96:	d120      	bne.n	8001fda <HAL_DMA2D_ConfigLayer+0xc2>
  {
    /* Write DMA2D BGPFCCR register */
    MODIFY_REG(hdma2d->Instance->BGPFCCR, regMask, regValue);
 8001f98:	687b      	ldr	r3, [r7, #4]
 8001f9a:	681b      	ldr	r3, [r3, #0]
 8001f9c:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8001f9e:	68fb      	ldr	r3, [r7, #12]
 8001fa0:	43db      	mvns	r3, r3
 8001fa2:	ea02 0103 	and.w	r1, r2, r3
 8001fa6:	687b      	ldr	r3, [r7, #4]
 8001fa8:	681b      	ldr	r3, [r3, #0]
 8001faa:	697a      	ldr	r2, [r7, #20]
 8001fac:	430a      	orrs	r2, r1
 8001fae:	625a      	str	r2, [r3, #36]	; 0x24

    /* DMA2D BGOR register configuration -------------------------------------*/
    WRITE_REG(hdma2d->Instance->BGOR, pLayerCfg->InputOffset);
 8001fb0:	687b      	ldr	r3, [r7, #4]
 8001fb2:	681b      	ldr	r3, [r3, #0]
 8001fb4:	693a      	ldr	r2, [r7, #16]
 8001fb6:	6812      	ldr	r2, [r2, #0]
 8001fb8:	619a      	str	r2, [r3, #24]

    /* DMA2D BGCOLR register configuration -------------------------------------*/
    if ((pLayerCfg->InputColorMode == DMA2D_INPUT_A4) || (pLayerCfg->InputColorMode == DMA2D_INPUT_A8))
 8001fba:	693b      	ldr	r3, [r7, #16]
 8001fbc:	685b      	ldr	r3, [r3, #4]
 8001fbe:	2b0a      	cmp	r3, #10
 8001fc0:	d003      	beq.n	8001fca <HAL_DMA2D_ConfigLayer+0xb2>
 8001fc2:	693b      	ldr	r3, [r7, #16]
 8001fc4:	685b      	ldr	r3, [r3, #4]
 8001fc6:	2b09      	cmp	r3, #9
 8001fc8:	d127      	bne.n	800201a <HAL_DMA2D_ConfigLayer+0x102>
    {
      WRITE_REG(hdma2d->Instance->BGCOLR, pLayerCfg->InputAlpha & (DMA2D_BGCOLR_BLUE | DMA2D_BGCOLR_GREEN | \
 8001fca:	693b      	ldr	r3, [r7, #16]
 8001fcc:	68da      	ldr	r2, [r3, #12]
 8001fce:	687b      	ldr	r3, [r7, #4]
 8001fd0:	681b      	ldr	r3, [r3, #0]
 8001fd2:	f022 427f 	bic.w	r2, r2, #4278190080	; 0xff000000
 8001fd6:	629a      	str	r2, [r3, #40]	; 0x28
 8001fd8:	e01f      	b.n	800201a <HAL_DMA2D_ConfigLayer+0x102>
  else
  {


    /* Write DMA2D FGPFCCR register */
    MODIFY_REG(hdma2d->Instance->FGPFCCR, regMask, regValue);
 8001fda:	687b      	ldr	r3, [r7, #4]
 8001fdc:	681b      	ldr	r3, [r3, #0]
 8001fde:	69da      	ldr	r2, [r3, #28]
 8001fe0:	68fb      	ldr	r3, [r7, #12]
 8001fe2:	43db      	mvns	r3, r3
 8001fe4:	ea02 0103 	and.w	r1, r2, r3
 8001fe8:	687b      	ldr	r3, [r7, #4]
 8001fea:	681b      	ldr	r3, [r3, #0]
 8001fec:	697a      	ldr	r2, [r7, #20]
 8001fee:	430a      	orrs	r2, r1
 8001ff0:	61da      	str	r2, [r3, #28]

    /* DMA2D FGOR register configuration -------------------------------------*/
    WRITE_REG(hdma2d->Instance->FGOR, pLayerCfg->InputOffset);
 8001ff2:	687b      	ldr	r3, [r7, #4]
 8001ff4:	681b      	ldr	r3, [r3, #0]
 8001ff6:	693a      	ldr	r2, [r7, #16]
 8001ff8:	6812      	ldr	r2, [r2, #0]
 8001ffa:	611a      	str	r2, [r3, #16]

    /* DMA2D FGCOLR register configuration -------------------------------------*/
    if ((pLayerCfg->InputColorMode == DMA2D_INPUT_A4) || (pLayerCfg->InputColorMode == DMA2D_INPUT_A8))
 8001ffc:	693b      	ldr	r3, [r7, #16]
 8001ffe:	685b      	ldr	r3, [r3, #4]
 8002000:	2b0a      	cmp	r3, #10
 8002002:	d003      	beq.n	800200c <HAL_DMA2D_ConfigLayer+0xf4>
 8002004:	693b      	ldr	r3, [r7, #16]
 8002006:	685b      	ldr	r3, [r3, #4]
 8002008:	2b09      	cmp	r3, #9
 800200a:	d106      	bne.n	800201a <HAL_DMA2D_ConfigLayer+0x102>
    {
      WRITE_REG(hdma2d->Instance->FGCOLR, pLayerCfg->InputAlpha & (DMA2D_FGCOLR_BLUE | DMA2D_FGCOLR_GREEN | \
 800200c:	693b      	ldr	r3, [r7, #16]
 800200e:	68da      	ldr	r2, [r3, #12]
 8002010:	687b      	ldr	r3, [r7, #4]
 8002012:	681b      	ldr	r3, [r3, #0]
 8002014:	f022 427f 	bic.w	r2, r2, #4278190080	; 0xff000000
 8002018:	621a      	str	r2, [r3, #32]
                                                                   DMA2D_FGCOLR_RED));
    }
  }
  /* Initialize the DMA2D state*/
  hdma2d->State = HAL_DMA2D_STATE_READY;
 800201a:	687b      	ldr	r3, [r7, #4]
 800201c:	2201      	movs	r2, #1
 800201e:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

  /* Process unlocked */
  __HAL_UNLOCK(hdma2d);
 8002022:	687b      	ldr	r3, [r7, #4]
 8002024:	2200      	movs	r2, #0
 8002026:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

  return HAL_OK;
 800202a:	2300      	movs	r3, #0
}
 800202c:	4618      	mov	r0, r3
 800202e:	371c      	adds	r7, #28
 8002030:	46bd      	mov	sp, r7
 8002032:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002036:	4770      	bx	lr
 8002038:	ff03000f 	.word	0xff03000f

0800203c <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 800203c:	b480      	push	{r7}
 800203e:	b089      	sub	sp, #36	; 0x24
 8002040:	af00      	add	r7, sp, #0
 8002042:	6078      	str	r0, [r7, #4]
 8002044:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 8002046:	2300      	movs	r3, #0
 8002048:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 800204a:	2300      	movs	r3, #0
 800204c:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 800204e:	2300      	movs	r3, #0
 8002050:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 8002052:	2300      	movs	r3, #0
 8002054:	61fb      	str	r3, [r7, #28]
 8002056:	e177      	b.n	8002348 <HAL_GPIO_Init+0x30c>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 8002058:	2201      	movs	r2, #1
 800205a:	69fb      	ldr	r3, [r7, #28]
 800205c:	fa02 f303 	lsl.w	r3, r2, r3
 8002060:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8002062:	683b      	ldr	r3, [r7, #0]
 8002064:	681b      	ldr	r3, [r3, #0]
 8002066:	697a      	ldr	r2, [r7, #20]
 8002068:	4013      	ands	r3, r2
 800206a:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 800206c:	693a      	ldr	r2, [r7, #16]
 800206e:	697b      	ldr	r3, [r7, #20]
 8002070:	429a      	cmp	r2, r3
 8002072:	f040 8166 	bne.w	8002342 <HAL_GPIO_Init+0x306>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8002076:	683b      	ldr	r3, [r7, #0]
 8002078:	685b      	ldr	r3, [r3, #4]
 800207a:	f003 0303 	and.w	r3, r3, #3
 800207e:	2b01      	cmp	r3, #1
 8002080:	d005      	beq.n	800208e <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8002082:	683b      	ldr	r3, [r7, #0]
 8002084:	685b      	ldr	r3, [r3, #4]
 8002086:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 800208a:	2b02      	cmp	r3, #2
 800208c:	d130      	bne.n	80020f0 <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 800208e:	687b      	ldr	r3, [r7, #4]
 8002090:	689b      	ldr	r3, [r3, #8]
 8002092:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 8002094:	69fb      	ldr	r3, [r7, #28]
 8002096:	005b      	lsls	r3, r3, #1
 8002098:	2203      	movs	r2, #3
 800209a:	fa02 f303 	lsl.w	r3, r2, r3
 800209e:	43db      	mvns	r3, r3
 80020a0:	69ba      	ldr	r2, [r7, #24]
 80020a2:	4013      	ands	r3, r2
 80020a4:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 80020a6:	683b      	ldr	r3, [r7, #0]
 80020a8:	68da      	ldr	r2, [r3, #12]
 80020aa:	69fb      	ldr	r3, [r7, #28]
 80020ac:	005b      	lsls	r3, r3, #1
 80020ae:	fa02 f303 	lsl.w	r3, r2, r3
 80020b2:	69ba      	ldr	r2, [r7, #24]
 80020b4:	4313      	orrs	r3, r2
 80020b6:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 80020b8:	687b      	ldr	r3, [r7, #4]
 80020ba:	69ba      	ldr	r2, [r7, #24]
 80020bc:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 80020be:	687b      	ldr	r3, [r7, #4]
 80020c0:	685b      	ldr	r3, [r3, #4]
 80020c2:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 80020c4:	2201      	movs	r2, #1
 80020c6:	69fb      	ldr	r3, [r7, #28]
 80020c8:	fa02 f303 	lsl.w	r3, r2, r3
 80020cc:	43db      	mvns	r3, r3
 80020ce:	69ba      	ldr	r2, [r7, #24]
 80020d0:	4013      	ands	r3, r2
 80020d2:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 80020d4:	683b      	ldr	r3, [r7, #0]
 80020d6:	685b      	ldr	r3, [r3, #4]
 80020d8:	091b      	lsrs	r3, r3, #4
 80020da:	f003 0201 	and.w	r2, r3, #1
 80020de:	69fb      	ldr	r3, [r7, #28]
 80020e0:	fa02 f303 	lsl.w	r3, r2, r3
 80020e4:	69ba      	ldr	r2, [r7, #24]
 80020e6:	4313      	orrs	r3, r2
 80020e8:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 80020ea:	687b      	ldr	r3, [r7, #4]
 80020ec:	69ba      	ldr	r2, [r7, #24]
 80020ee:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 80020f0:	683b      	ldr	r3, [r7, #0]
 80020f2:	685b      	ldr	r3, [r3, #4]
 80020f4:	f003 0303 	and.w	r3, r3, #3
 80020f8:	2b03      	cmp	r3, #3
 80020fa:	d017      	beq.n	800212c <HAL_GPIO_Init+0xf0>
      {
        /* Check the parameters */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
        
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 80020fc:	687b      	ldr	r3, [r7, #4]
 80020fe:	68db      	ldr	r3, [r3, #12]
 8002100:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 8002102:	69fb      	ldr	r3, [r7, #28]
 8002104:	005b      	lsls	r3, r3, #1
 8002106:	2203      	movs	r2, #3
 8002108:	fa02 f303 	lsl.w	r3, r2, r3
 800210c:	43db      	mvns	r3, r3
 800210e:	69ba      	ldr	r2, [r7, #24]
 8002110:	4013      	ands	r3, r2
 8002112:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8002114:	683b      	ldr	r3, [r7, #0]
 8002116:	689a      	ldr	r2, [r3, #8]
 8002118:	69fb      	ldr	r3, [r7, #28]
 800211a:	005b      	lsls	r3, r3, #1
 800211c:	fa02 f303 	lsl.w	r3, r2, r3
 8002120:	69ba      	ldr	r2, [r7, #24]
 8002122:	4313      	orrs	r3, r2
 8002124:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 8002126:	687b      	ldr	r3, [r7, #4]
 8002128:	69ba      	ldr	r2, [r7, #24]
 800212a:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 800212c:	683b      	ldr	r3, [r7, #0]
 800212e:	685b      	ldr	r3, [r3, #4]
 8002130:	f003 0303 	and.w	r3, r3, #3
 8002134:	2b02      	cmp	r3, #2
 8002136:	d123      	bne.n	8002180 <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8002138:	69fb      	ldr	r3, [r7, #28]
 800213a:	08da      	lsrs	r2, r3, #3
 800213c:	687b      	ldr	r3, [r7, #4]
 800213e:	3208      	adds	r2, #8
 8002140:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8002144:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 8002146:	69fb      	ldr	r3, [r7, #28]
 8002148:	f003 0307 	and.w	r3, r3, #7
 800214c:	009b      	lsls	r3, r3, #2
 800214e:	220f      	movs	r2, #15
 8002150:	fa02 f303 	lsl.w	r3, r2, r3
 8002154:	43db      	mvns	r3, r3
 8002156:	69ba      	ldr	r2, [r7, #24]
 8002158:	4013      	ands	r3, r2
 800215a:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 800215c:	683b      	ldr	r3, [r7, #0]
 800215e:	691a      	ldr	r2, [r3, #16]
 8002160:	69fb      	ldr	r3, [r7, #28]
 8002162:	f003 0307 	and.w	r3, r3, #7
 8002166:	009b      	lsls	r3, r3, #2
 8002168:	fa02 f303 	lsl.w	r3, r2, r3
 800216c:	69ba      	ldr	r2, [r7, #24]
 800216e:	4313      	orrs	r3, r2
 8002170:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 8002172:	69fb      	ldr	r3, [r7, #28]
 8002174:	08da      	lsrs	r2, r3, #3
 8002176:	687b      	ldr	r3, [r7, #4]
 8002178:	3208      	adds	r2, #8
 800217a:	69b9      	ldr	r1, [r7, #24]
 800217c:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8002180:	687b      	ldr	r3, [r7, #4]
 8002182:	681b      	ldr	r3, [r3, #0]
 8002184:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 8002186:	69fb      	ldr	r3, [r7, #28]
 8002188:	005b      	lsls	r3, r3, #1
 800218a:	2203      	movs	r2, #3
 800218c:	fa02 f303 	lsl.w	r3, r2, r3
 8002190:	43db      	mvns	r3, r3
 8002192:	69ba      	ldr	r2, [r7, #24]
 8002194:	4013      	ands	r3, r2
 8002196:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8002198:	683b      	ldr	r3, [r7, #0]
 800219a:	685b      	ldr	r3, [r3, #4]
 800219c:	f003 0203 	and.w	r2, r3, #3
 80021a0:	69fb      	ldr	r3, [r7, #28]
 80021a2:	005b      	lsls	r3, r3, #1
 80021a4:	fa02 f303 	lsl.w	r3, r2, r3
 80021a8:	69ba      	ldr	r2, [r7, #24]
 80021aa:	4313      	orrs	r3, r2
 80021ac:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 80021ae:	687b      	ldr	r3, [r7, #4]
 80021b0:	69ba      	ldr	r2, [r7, #24]
 80021b2:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 80021b4:	683b      	ldr	r3, [r7, #0]
 80021b6:	685b      	ldr	r3, [r3, #4]
 80021b8:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 80021bc:	2b00      	cmp	r3, #0
 80021be:	f000 80c0 	beq.w	8002342 <HAL_GPIO_Init+0x306>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 80021c2:	2300      	movs	r3, #0
 80021c4:	60fb      	str	r3, [r7, #12]
 80021c6:	4b66      	ldr	r3, [pc, #408]	; (8002360 <HAL_GPIO_Init+0x324>)
 80021c8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80021ca:	4a65      	ldr	r2, [pc, #404]	; (8002360 <HAL_GPIO_Init+0x324>)
 80021cc:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 80021d0:	6453      	str	r3, [r2, #68]	; 0x44
 80021d2:	4b63      	ldr	r3, [pc, #396]	; (8002360 <HAL_GPIO_Init+0x324>)
 80021d4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80021d6:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80021da:	60fb      	str	r3, [r7, #12]
 80021dc:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 80021de:	4a61      	ldr	r2, [pc, #388]	; (8002364 <HAL_GPIO_Init+0x328>)
 80021e0:	69fb      	ldr	r3, [r7, #28]
 80021e2:	089b      	lsrs	r3, r3, #2
 80021e4:	3302      	adds	r3, #2
 80021e6:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80021ea:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 80021ec:	69fb      	ldr	r3, [r7, #28]
 80021ee:	f003 0303 	and.w	r3, r3, #3
 80021f2:	009b      	lsls	r3, r3, #2
 80021f4:	220f      	movs	r2, #15
 80021f6:	fa02 f303 	lsl.w	r3, r2, r3
 80021fa:	43db      	mvns	r3, r3
 80021fc:	69ba      	ldr	r2, [r7, #24]
 80021fe:	4013      	ands	r3, r2
 8002200:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 8002202:	687b      	ldr	r3, [r7, #4]
 8002204:	4a58      	ldr	r2, [pc, #352]	; (8002368 <HAL_GPIO_Init+0x32c>)
 8002206:	4293      	cmp	r3, r2
 8002208:	d037      	beq.n	800227a <HAL_GPIO_Init+0x23e>
 800220a:	687b      	ldr	r3, [r7, #4]
 800220c:	4a57      	ldr	r2, [pc, #348]	; (800236c <HAL_GPIO_Init+0x330>)
 800220e:	4293      	cmp	r3, r2
 8002210:	d031      	beq.n	8002276 <HAL_GPIO_Init+0x23a>
 8002212:	687b      	ldr	r3, [r7, #4]
 8002214:	4a56      	ldr	r2, [pc, #344]	; (8002370 <HAL_GPIO_Init+0x334>)
 8002216:	4293      	cmp	r3, r2
 8002218:	d02b      	beq.n	8002272 <HAL_GPIO_Init+0x236>
 800221a:	687b      	ldr	r3, [r7, #4]
 800221c:	4a55      	ldr	r2, [pc, #340]	; (8002374 <HAL_GPIO_Init+0x338>)
 800221e:	4293      	cmp	r3, r2
 8002220:	d025      	beq.n	800226e <HAL_GPIO_Init+0x232>
 8002222:	687b      	ldr	r3, [r7, #4]
 8002224:	4a54      	ldr	r2, [pc, #336]	; (8002378 <HAL_GPIO_Init+0x33c>)
 8002226:	4293      	cmp	r3, r2
 8002228:	d01f      	beq.n	800226a <HAL_GPIO_Init+0x22e>
 800222a:	687b      	ldr	r3, [r7, #4]
 800222c:	4a53      	ldr	r2, [pc, #332]	; (800237c <HAL_GPIO_Init+0x340>)
 800222e:	4293      	cmp	r3, r2
 8002230:	d019      	beq.n	8002266 <HAL_GPIO_Init+0x22a>
 8002232:	687b      	ldr	r3, [r7, #4]
 8002234:	4a52      	ldr	r2, [pc, #328]	; (8002380 <HAL_GPIO_Init+0x344>)
 8002236:	4293      	cmp	r3, r2
 8002238:	d013      	beq.n	8002262 <HAL_GPIO_Init+0x226>
 800223a:	687b      	ldr	r3, [r7, #4]
 800223c:	4a51      	ldr	r2, [pc, #324]	; (8002384 <HAL_GPIO_Init+0x348>)
 800223e:	4293      	cmp	r3, r2
 8002240:	d00d      	beq.n	800225e <HAL_GPIO_Init+0x222>
 8002242:	687b      	ldr	r3, [r7, #4]
 8002244:	4a50      	ldr	r2, [pc, #320]	; (8002388 <HAL_GPIO_Init+0x34c>)
 8002246:	4293      	cmp	r3, r2
 8002248:	d007      	beq.n	800225a <HAL_GPIO_Init+0x21e>
 800224a:	687b      	ldr	r3, [r7, #4]
 800224c:	4a4f      	ldr	r2, [pc, #316]	; (800238c <HAL_GPIO_Init+0x350>)
 800224e:	4293      	cmp	r3, r2
 8002250:	d101      	bne.n	8002256 <HAL_GPIO_Init+0x21a>
 8002252:	2309      	movs	r3, #9
 8002254:	e012      	b.n	800227c <HAL_GPIO_Init+0x240>
 8002256:	230a      	movs	r3, #10
 8002258:	e010      	b.n	800227c <HAL_GPIO_Init+0x240>
 800225a:	2308      	movs	r3, #8
 800225c:	e00e      	b.n	800227c <HAL_GPIO_Init+0x240>
 800225e:	2307      	movs	r3, #7
 8002260:	e00c      	b.n	800227c <HAL_GPIO_Init+0x240>
 8002262:	2306      	movs	r3, #6
 8002264:	e00a      	b.n	800227c <HAL_GPIO_Init+0x240>
 8002266:	2305      	movs	r3, #5
 8002268:	e008      	b.n	800227c <HAL_GPIO_Init+0x240>
 800226a:	2304      	movs	r3, #4
 800226c:	e006      	b.n	800227c <HAL_GPIO_Init+0x240>
 800226e:	2303      	movs	r3, #3
 8002270:	e004      	b.n	800227c <HAL_GPIO_Init+0x240>
 8002272:	2302      	movs	r3, #2
 8002274:	e002      	b.n	800227c <HAL_GPIO_Init+0x240>
 8002276:	2301      	movs	r3, #1
 8002278:	e000      	b.n	800227c <HAL_GPIO_Init+0x240>
 800227a:	2300      	movs	r3, #0
 800227c:	69fa      	ldr	r2, [r7, #28]
 800227e:	f002 0203 	and.w	r2, r2, #3
 8002282:	0092      	lsls	r2, r2, #2
 8002284:	4093      	lsls	r3, r2
 8002286:	69ba      	ldr	r2, [r7, #24]
 8002288:	4313      	orrs	r3, r2
 800228a:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 800228c:	4935      	ldr	r1, [pc, #212]	; (8002364 <HAL_GPIO_Init+0x328>)
 800228e:	69fb      	ldr	r3, [r7, #28]
 8002290:	089b      	lsrs	r3, r3, #2
 8002292:	3302      	adds	r3, #2
 8002294:	69ba      	ldr	r2, [r7, #24]
 8002296:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 800229a:	4b3d      	ldr	r3, [pc, #244]	; (8002390 <HAL_GPIO_Init+0x354>)
 800229c:	689b      	ldr	r3, [r3, #8]
 800229e:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80022a0:	693b      	ldr	r3, [r7, #16]
 80022a2:	43db      	mvns	r3, r3
 80022a4:	69ba      	ldr	r2, [r7, #24]
 80022a6:	4013      	ands	r3, r2
 80022a8:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 80022aa:	683b      	ldr	r3, [r7, #0]
 80022ac:	685b      	ldr	r3, [r3, #4]
 80022ae:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 80022b2:	2b00      	cmp	r3, #0
 80022b4:	d003      	beq.n	80022be <HAL_GPIO_Init+0x282>
        {
          temp |= iocurrent;
 80022b6:	69ba      	ldr	r2, [r7, #24]
 80022b8:	693b      	ldr	r3, [r7, #16]
 80022ba:	4313      	orrs	r3, r2
 80022bc:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 80022be:	4a34      	ldr	r2, [pc, #208]	; (8002390 <HAL_GPIO_Init+0x354>)
 80022c0:	69bb      	ldr	r3, [r7, #24]
 80022c2:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 80022c4:	4b32      	ldr	r3, [pc, #200]	; (8002390 <HAL_GPIO_Init+0x354>)
 80022c6:	68db      	ldr	r3, [r3, #12]
 80022c8:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80022ca:	693b      	ldr	r3, [r7, #16]
 80022cc:	43db      	mvns	r3, r3
 80022ce:	69ba      	ldr	r2, [r7, #24]
 80022d0:	4013      	ands	r3, r2
 80022d2:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 80022d4:	683b      	ldr	r3, [r7, #0]
 80022d6:	685b      	ldr	r3, [r3, #4]
 80022d8:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 80022dc:	2b00      	cmp	r3, #0
 80022de:	d003      	beq.n	80022e8 <HAL_GPIO_Init+0x2ac>
        {
          temp |= iocurrent;
 80022e0:	69ba      	ldr	r2, [r7, #24]
 80022e2:	693b      	ldr	r3, [r7, #16]
 80022e4:	4313      	orrs	r3, r2
 80022e6:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 80022e8:	4a29      	ldr	r2, [pc, #164]	; (8002390 <HAL_GPIO_Init+0x354>)
 80022ea:	69bb      	ldr	r3, [r7, #24]
 80022ec:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 80022ee:	4b28      	ldr	r3, [pc, #160]	; (8002390 <HAL_GPIO_Init+0x354>)
 80022f0:	685b      	ldr	r3, [r3, #4]
 80022f2:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80022f4:	693b      	ldr	r3, [r7, #16]
 80022f6:	43db      	mvns	r3, r3
 80022f8:	69ba      	ldr	r2, [r7, #24]
 80022fa:	4013      	ands	r3, r2
 80022fc:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 80022fe:	683b      	ldr	r3, [r7, #0]
 8002300:	685b      	ldr	r3, [r3, #4]
 8002302:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002306:	2b00      	cmp	r3, #0
 8002308:	d003      	beq.n	8002312 <HAL_GPIO_Init+0x2d6>
        {
          temp |= iocurrent;
 800230a:	69ba      	ldr	r2, [r7, #24]
 800230c:	693b      	ldr	r3, [r7, #16]
 800230e:	4313      	orrs	r3, r2
 8002310:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 8002312:	4a1f      	ldr	r2, [pc, #124]	; (8002390 <HAL_GPIO_Init+0x354>)
 8002314:	69bb      	ldr	r3, [r7, #24]
 8002316:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8002318:	4b1d      	ldr	r3, [pc, #116]	; (8002390 <HAL_GPIO_Init+0x354>)
 800231a:	681b      	ldr	r3, [r3, #0]
 800231c:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 800231e:	693b      	ldr	r3, [r7, #16]
 8002320:	43db      	mvns	r3, r3
 8002322:	69ba      	ldr	r2, [r7, #24]
 8002324:	4013      	ands	r3, r2
 8002326:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 8002328:	683b      	ldr	r3, [r7, #0]
 800232a:	685b      	ldr	r3, [r3, #4]
 800232c:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8002330:	2b00      	cmp	r3, #0
 8002332:	d003      	beq.n	800233c <HAL_GPIO_Init+0x300>
        {
          temp |= iocurrent;
 8002334:	69ba      	ldr	r2, [r7, #24]
 8002336:	693b      	ldr	r3, [r7, #16]
 8002338:	4313      	orrs	r3, r2
 800233a:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 800233c:	4a14      	ldr	r2, [pc, #80]	; (8002390 <HAL_GPIO_Init+0x354>)
 800233e:	69bb      	ldr	r3, [r7, #24]
 8002340:	6013      	str	r3, [r2, #0]
  for(position = 0U; position < GPIO_NUMBER; position++)
 8002342:	69fb      	ldr	r3, [r7, #28]
 8002344:	3301      	adds	r3, #1
 8002346:	61fb      	str	r3, [r7, #28]
 8002348:	69fb      	ldr	r3, [r7, #28]
 800234a:	2b0f      	cmp	r3, #15
 800234c:	f67f ae84 	bls.w	8002058 <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 8002350:	bf00      	nop
 8002352:	bf00      	nop
 8002354:	3724      	adds	r7, #36	; 0x24
 8002356:	46bd      	mov	sp, r7
 8002358:	f85d 7b04 	ldr.w	r7, [sp], #4
 800235c:	4770      	bx	lr
 800235e:	bf00      	nop
 8002360:	40023800 	.word	0x40023800
 8002364:	40013800 	.word	0x40013800
 8002368:	40020000 	.word	0x40020000
 800236c:	40020400 	.word	0x40020400
 8002370:	40020800 	.word	0x40020800
 8002374:	40020c00 	.word	0x40020c00
 8002378:	40021000 	.word	0x40021000
 800237c:	40021400 	.word	0x40021400
 8002380:	40021800 	.word	0x40021800
 8002384:	40021c00 	.word	0x40021c00
 8002388:	40022000 	.word	0x40022000
 800238c:	40022400 	.word	0x40022400
 8002390:	40013c00 	.word	0x40013c00

08002394 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8002394:	b480      	push	{r7}
 8002396:	b083      	sub	sp, #12
 8002398:	af00      	add	r7, sp, #0
 800239a:	6078      	str	r0, [r7, #4]
 800239c:	460b      	mov	r3, r1
 800239e:	807b      	strh	r3, [r7, #2]
 80023a0:	4613      	mov	r3, r2
 80023a2:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 80023a4:	787b      	ldrb	r3, [r7, #1]
 80023a6:	2b00      	cmp	r3, #0
 80023a8:	d003      	beq.n	80023b2 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 80023aa:	887a      	ldrh	r2, [r7, #2]
 80023ac:	687b      	ldr	r3, [r7, #4]
 80023ae:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 80023b0:	e003      	b.n	80023ba <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 80023b2:	887b      	ldrh	r3, [r7, #2]
 80023b4:	041a      	lsls	r2, r3, #16
 80023b6:	687b      	ldr	r3, [r7, #4]
 80023b8:	619a      	str	r2, [r3, #24]
}
 80023ba:	bf00      	nop
 80023bc:	370c      	adds	r7, #12
 80023be:	46bd      	mov	sp, r7
 80023c0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80023c4:	4770      	bx	lr

080023c6 <HAL_HCD_IRQHandler>:
  * @brief  Handle HCD interrupt request.
  * @param  hhcd HCD handle
  * @retval None
  */
void HAL_HCD_IRQHandler(HCD_HandleTypeDef *hhcd)
{
 80023c6:	b580      	push	{r7, lr}
 80023c8:	b086      	sub	sp, #24
 80023ca:	af00      	add	r7, sp, #0
 80023cc:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx = hhcd->Instance;
 80023ce:	687b      	ldr	r3, [r7, #4]
 80023d0:	681b      	ldr	r3, [r3, #0]
 80023d2:	613b      	str	r3, [r7, #16]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80023d4:	693b      	ldr	r3, [r7, #16]
 80023d6:	60fb      	str	r3, [r7, #12]
  uint32_t i;
  uint32_t interrupt;

  /* Ensure that we are in device mode */
  if (USB_GetMode(hhcd->Instance) == USB_OTG_MODE_HOST)
 80023d8:	687b      	ldr	r3, [r7, #4]
 80023da:	681b      	ldr	r3, [r3, #0]
 80023dc:	4618      	mov	r0, r3
 80023de:	f003 ff86 	bl	80062ee <USB_GetMode>
 80023e2:	4603      	mov	r3, r0
 80023e4:	2b01      	cmp	r3, #1
 80023e6:	f040 80f6 	bne.w	80025d6 <HAL_HCD_IRQHandler+0x210>
  {
    /* Avoid spurious interrupt */
    if (__HAL_HCD_IS_INVALID_INTERRUPT(hhcd))
 80023ea:	687b      	ldr	r3, [r7, #4]
 80023ec:	681b      	ldr	r3, [r3, #0]
 80023ee:	4618      	mov	r0, r3
 80023f0:	f003 ff6a 	bl	80062c8 <USB_ReadInterrupts>
 80023f4:	4603      	mov	r3, r0
 80023f6:	2b00      	cmp	r3, #0
 80023f8:	f000 80ec 	beq.w	80025d4 <HAL_HCD_IRQHandler+0x20e>
    {
      return;
    }

    if (__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_PXFR_INCOMPISOOUT))
 80023fc:	687b      	ldr	r3, [r7, #4]
 80023fe:	681b      	ldr	r3, [r3, #0]
 8002400:	4618      	mov	r0, r3
 8002402:	f003 ff61 	bl	80062c8 <USB_ReadInterrupts>
 8002406:	4603      	mov	r3, r0
 8002408:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 800240c:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 8002410:	d104      	bne.n	800241c <HAL_HCD_IRQHandler+0x56>
    {
      /* Incorrect mode, acknowledge the interrupt */
      __HAL_HCD_CLEAR_FLAG(hhcd, USB_OTG_GINTSTS_PXFR_INCOMPISOOUT);
 8002412:	687b      	ldr	r3, [r7, #4]
 8002414:	681b      	ldr	r3, [r3, #0]
 8002416:	f44f 1200 	mov.w	r2, #2097152	; 0x200000
 800241a:	615a      	str	r2, [r3, #20]
    }

    if (__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_IISOIXFR))
 800241c:	687b      	ldr	r3, [r7, #4]
 800241e:	681b      	ldr	r3, [r3, #0]
 8002420:	4618      	mov	r0, r3
 8002422:	f003 ff51 	bl	80062c8 <USB_ReadInterrupts>
 8002426:	4603      	mov	r3, r0
 8002428:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 800242c:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8002430:	d104      	bne.n	800243c <HAL_HCD_IRQHandler+0x76>
    {
      /* Incorrect mode, acknowledge the interrupt */
      __HAL_HCD_CLEAR_FLAG(hhcd, USB_OTG_GINTSTS_IISOIXFR);
 8002432:	687b      	ldr	r3, [r7, #4]
 8002434:	681b      	ldr	r3, [r3, #0]
 8002436:	f44f 1280 	mov.w	r2, #1048576	; 0x100000
 800243a:	615a      	str	r2, [r3, #20]
    }

    if (__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_PTXFE))
 800243c:	687b      	ldr	r3, [r7, #4]
 800243e:	681b      	ldr	r3, [r3, #0]
 8002440:	4618      	mov	r0, r3
 8002442:	f003 ff41 	bl	80062c8 <USB_ReadInterrupts>
 8002446:	4603      	mov	r3, r0
 8002448:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 800244c:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 8002450:	d104      	bne.n	800245c <HAL_HCD_IRQHandler+0x96>
    {
      /* Incorrect mode, acknowledge the interrupt */
      __HAL_HCD_CLEAR_FLAG(hhcd, USB_OTG_GINTSTS_PTXFE);
 8002452:	687b      	ldr	r3, [r7, #4]
 8002454:	681b      	ldr	r3, [r3, #0]
 8002456:	f04f 6280 	mov.w	r2, #67108864	; 0x4000000
 800245a:	615a      	str	r2, [r3, #20]
    }

    if (__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_MMIS))
 800245c:	687b      	ldr	r3, [r7, #4]
 800245e:	681b      	ldr	r3, [r3, #0]
 8002460:	4618      	mov	r0, r3
 8002462:	f003 ff31 	bl	80062c8 <USB_ReadInterrupts>
 8002466:	4603      	mov	r3, r0
 8002468:	f003 0302 	and.w	r3, r3, #2
 800246c:	2b02      	cmp	r3, #2
 800246e:	d103      	bne.n	8002478 <HAL_HCD_IRQHandler+0xb2>
    {
      /* Incorrect mode, acknowledge the interrupt */
      __HAL_HCD_CLEAR_FLAG(hhcd, USB_OTG_GINTSTS_MMIS);
 8002470:	687b      	ldr	r3, [r7, #4]
 8002472:	681b      	ldr	r3, [r3, #0]
 8002474:	2202      	movs	r2, #2
 8002476:	615a      	str	r2, [r3, #20]
    }

    /* Handle Host Disconnect Interrupts */
    if (__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_DISCINT))
 8002478:	687b      	ldr	r3, [r7, #4]
 800247a:	681b      	ldr	r3, [r3, #0]
 800247c:	4618      	mov	r0, r3
 800247e:	f003 ff23 	bl	80062c8 <USB_ReadInterrupts>
 8002482:	4603      	mov	r3, r0
 8002484:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8002488:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 800248c:	d11c      	bne.n	80024c8 <HAL_HCD_IRQHandler+0x102>
    {
      __HAL_HCD_CLEAR_FLAG(hhcd, USB_OTG_GINTSTS_DISCINT);
 800248e:	687b      	ldr	r3, [r7, #4]
 8002490:	681b      	ldr	r3, [r3, #0]
 8002492:	f04f 5200 	mov.w	r2, #536870912	; 0x20000000
 8002496:	615a      	str	r2, [r3, #20]

      if ((USBx_HPRT0 & USB_OTG_HPRT_PCSTS) == 0U)
 8002498:	68fb      	ldr	r3, [r7, #12]
 800249a:	f503 6388 	add.w	r3, r3, #1088	; 0x440
 800249e:	681b      	ldr	r3, [r3, #0]
 80024a0:	f003 0301 	and.w	r3, r3, #1
 80024a4:	2b00      	cmp	r3, #0
 80024a6:	d10f      	bne.n	80024c8 <HAL_HCD_IRQHandler+0x102>
      {
        /* Flush USB Fifo */
        (void)USB_FlushTxFifo(USBx, 0x10U);
 80024a8:	2110      	movs	r1, #16
 80024aa:	6938      	ldr	r0, [r7, #16]
 80024ac:	f003 fe50 	bl	8006150 <USB_FlushTxFifo>
        (void)USB_FlushRxFifo(USBx);
 80024b0:	6938      	ldr	r0, [r7, #16]
 80024b2:	f003 fe81 	bl	80061b8 <USB_FlushRxFifo>

        /* Restore FS Clock */
        (void)USB_InitFSLSPClkSel(hhcd->Instance, HCFG_48_MHZ);
 80024b6:	687b      	ldr	r3, [r7, #4]
 80024b8:	681b      	ldr	r3, [r3, #0]
 80024ba:	2101      	movs	r1, #1
 80024bc:	4618      	mov	r0, r3
 80024be:	f003 ff24 	bl	800630a <USB_InitFSLSPClkSel>

        /* Handle Host Port Disconnect Interrupt */
#if (USE_HAL_HCD_REGISTER_CALLBACKS == 1U)
        hhcd->DisconnectCallback(hhcd);
#else
        HAL_HCD_Disconnect_Callback(hhcd);
 80024c2:	6878      	ldr	r0, [r7, #4]
 80024c4:	f007 fe02 	bl	800a0cc <HAL_HCD_Disconnect_Callback>
#endif /* USE_HAL_HCD_REGISTER_CALLBACKS */
      }
    }

    /* Handle Host Port Interrupts */
    if (__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_HPRTINT))
 80024c8:	687b      	ldr	r3, [r7, #4]
 80024ca:	681b      	ldr	r3, [r3, #0]
 80024cc:	4618      	mov	r0, r3
 80024ce:	f003 fefb 	bl	80062c8 <USB_ReadInterrupts>
 80024d2:	4603      	mov	r3, r0
 80024d4:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 80024d8:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 80024dc:	d102      	bne.n	80024e4 <HAL_HCD_IRQHandler+0x11e>
    {
      HCD_Port_IRQHandler(hhcd);
 80024de:	6878      	ldr	r0, [r7, #4]
 80024e0:	f001 f829 	bl	8003536 <HCD_Port_IRQHandler>
    }

    /* Handle Host SOF Interrupt */
    if (__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_SOF))
 80024e4:	687b      	ldr	r3, [r7, #4]
 80024e6:	681b      	ldr	r3, [r3, #0]
 80024e8:	4618      	mov	r0, r3
 80024ea:	f003 feed 	bl	80062c8 <USB_ReadInterrupts>
 80024ee:	4603      	mov	r3, r0
 80024f0:	f003 0308 	and.w	r3, r3, #8
 80024f4:	2b08      	cmp	r3, #8
 80024f6:	d106      	bne.n	8002506 <HAL_HCD_IRQHandler+0x140>
    {
#if (USE_HAL_HCD_REGISTER_CALLBACKS == 1U)
      hhcd->SOFCallback(hhcd);
#else
      HAL_HCD_SOF_Callback(hhcd);
 80024f8:	6878      	ldr	r0, [r7, #4]
 80024fa:	f007 fdcb 	bl	800a094 <HAL_HCD_SOF_Callback>
#endif /* USE_HAL_HCD_REGISTER_CALLBACKS */

      __HAL_HCD_CLEAR_FLAG(hhcd, USB_OTG_GINTSTS_SOF);
 80024fe:	687b      	ldr	r3, [r7, #4]
 8002500:	681b      	ldr	r3, [r3, #0]
 8002502:	2208      	movs	r2, #8
 8002504:	615a      	str	r2, [r3, #20]
    }

    /* Handle Rx Queue Level Interrupts */
    if ((__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_RXFLVL)) != 0U)
 8002506:	687b      	ldr	r3, [r7, #4]
 8002508:	681b      	ldr	r3, [r3, #0]
 800250a:	4618      	mov	r0, r3
 800250c:	f003 fedc 	bl	80062c8 <USB_ReadInterrupts>
 8002510:	4603      	mov	r3, r0
 8002512:	f003 0310 	and.w	r3, r3, #16
 8002516:	2b10      	cmp	r3, #16
 8002518:	d101      	bne.n	800251e <HAL_HCD_IRQHandler+0x158>
 800251a:	2301      	movs	r3, #1
 800251c:	e000      	b.n	8002520 <HAL_HCD_IRQHandler+0x15a>
 800251e:	2300      	movs	r3, #0
 8002520:	2b00      	cmp	r3, #0
 8002522:	d012      	beq.n	800254a <HAL_HCD_IRQHandler+0x184>
    {
      USB_MASK_INTERRUPT(hhcd->Instance, USB_OTG_GINTSTS_RXFLVL);
 8002524:	687b      	ldr	r3, [r7, #4]
 8002526:	681b      	ldr	r3, [r3, #0]
 8002528:	699a      	ldr	r2, [r3, #24]
 800252a:	687b      	ldr	r3, [r7, #4]
 800252c:	681b      	ldr	r3, [r3, #0]
 800252e:	f022 0210 	bic.w	r2, r2, #16
 8002532:	619a      	str	r2, [r3, #24]

      HCD_RXQLVL_IRQHandler(hhcd);
 8002534:	6878      	ldr	r0, [r7, #4]
 8002536:	f000 ff2c 	bl	8003392 <HCD_RXQLVL_IRQHandler>

      USB_UNMASK_INTERRUPT(hhcd->Instance, USB_OTG_GINTSTS_RXFLVL);
 800253a:	687b      	ldr	r3, [r7, #4]
 800253c:	681b      	ldr	r3, [r3, #0]
 800253e:	699a      	ldr	r2, [r3, #24]
 8002540:	687b      	ldr	r3, [r7, #4]
 8002542:	681b      	ldr	r3, [r3, #0]
 8002544:	f042 0210 	orr.w	r2, r2, #16
 8002548:	619a      	str	r2, [r3, #24]
    }

    /* Handle Host channel Interrupt */
    if (__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_HCINT))
 800254a:	687b      	ldr	r3, [r7, #4]
 800254c:	681b      	ldr	r3, [r3, #0]
 800254e:	4618      	mov	r0, r3
 8002550:	f003 feba 	bl	80062c8 <USB_ReadInterrupts>
 8002554:	4603      	mov	r3, r0
 8002556:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800255a:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 800255e:	d13a      	bne.n	80025d6 <HAL_HCD_IRQHandler+0x210>
    {
      interrupt = USB_HC_ReadInterrupt(hhcd->Instance);
 8002560:	687b      	ldr	r3, [r7, #4]
 8002562:	681b      	ldr	r3, [r3, #0]
 8002564:	4618      	mov	r0, r3
 8002566:	f003 ff0a 	bl	800637e <USB_HC_ReadInterrupt>
 800256a:	60b8      	str	r0, [r7, #8]
      for (i = 0U; i < hhcd->Init.Host_channels; i++)
 800256c:	2300      	movs	r3, #0
 800256e:	617b      	str	r3, [r7, #20]
 8002570:	e025      	b.n	80025be <HAL_HCD_IRQHandler+0x1f8>
      {
        if ((interrupt & (1UL << (i & 0xFU))) != 0U)
 8002572:	697b      	ldr	r3, [r7, #20]
 8002574:	f003 030f 	and.w	r3, r3, #15
 8002578:	68ba      	ldr	r2, [r7, #8]
 800257a:	fa22 f303 	lsr.w	r3, r2, r3
 800257e:	f003 0301 	and.w	r3, r3, #1
 8002582:	2b00      	cmp	r3, #0
 8002584:	d018      	beq.n	80025b8 <HAL_HCD_IRQHandler+0x1f2>
        {
          if ((USBx_HC(i)->HCCHAR & USB_OTG_HCCHAR_EPDIR) == USB_OTG_HCCHAR_EPDIR)
 8002586:	697b      	ldr	r3, [r7, #20]
 8002588:	015a      	lsls	r2, r3, #5
 800258a:	68fb      	ldr	r3, [r7, #12]
 800258c:	4413      	add	r3, r2
 800258e:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002592:	681b      	ldr	r3, [r3, #0]
 8002594:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8002598:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800259c:	d106      	bne.n	80025ac <HAL_HCD_IRQHandler+0x1e6>
          {
            HCD_HC_IN_IRQHandler(hhcd, (uint8_t)i);
 800259e:	697b      	ldr	r3, [r7, #20]
 80025a0:	b2db      	uxtb	r3, r3
 80025a2:	4619      	mov	r1, r3
 80025a4:	6878      	ldr	r0, [r7, #4]
 80025a6:	f000 f836 	bl	8002616 <HCD_HC_IN_IRQHandler>
 80025aa:	e005      	b.n	80025b8 <HAL_HCD_IRQHandler+0x1f2>
          }
          else
          {
            HCD_HC_OUT_IRQHandler(hhcd, (uint8_t)i);
 80025ac:	697b      	ldr	r3, [r7, #20]
 80025ae:	b2db      	uxtb	r3, r3
 80025b0:	4619      	mov	r1, r3
 80025b2:	6878      	ldr	r0, [r7, #4]
 80025b4:	f000 fb84 	bl	8002cc0 <HCD_HC_OUT_IRQHandler>
      for (i = 0U; i < hhcd->Init.Host_channels; i++)
 80025b8:	697b      	ldr	r3, [r7, #20]
 80025ba:	3301      	adds	r3, #1
 80025bc:	617b      	str	r3, [r7, #20]
 80025be:	687b      	ldr	r3, [r7, #4]
 80025c0:	689b      	ldr	r3, [r3, #8]
 80025c2:	697a      	ldr	r2, [r7, #20]
 80025c4:	429a      	cmp	r2, r3
 80025c6:	d3d4      	bcc.n	8002572 <HAL_HCD_IRQHandler+0x1ac>
          }
        }
      }
      __HAL_HCD_CLEAR_FLAG(hhcd, USB_OTG_GINTSTS_HCINT);
 80025c8:	687b      	ldr	r3, [r7, #4]
 80025ca:	681b      	ldr	r3, [r3, #0]
 80025cc:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 80025d0:	615a      	str	r2, [r3, #20]
 80025d2:	e000      	b.n	80025d6 <HAL_HCD_IRQHandler+0x210>
      return;
 80025d4:	bf00      	nop
    }
  }
}
 80025d6:	3718      	adds	r7, #24
 80025d8:	46bd      	mov	sp, r7
 80025da:	bd80      	pop	{r7, pc}

080025dc <HAL_HCD_Stop>:
  * @param  hhcd HCD handle
  * @retval HAL status
  */

HAL_StatusTypeDef HAL_HCD_Stop(HCD_HandleTypeDef *hhcd)
{
 80025dc:	b580      	push	{r7, lr}
 80025de:	b082      	sub	sp, #8
 80025e0:	af00      	add	r7, sp, #0
 80025e2:	6078      	str	r0, [r7, #4]
  __HAL_LOCK(hhcd);
 80025e4:	687b      	ldr	r3, [r7, #4]
 80025e6:	f893 32f8 	ldrb.w	r3, [r3, #760]	; 0x2f8
 80025ea:	2b01      	cmp	r3, #1
 80025ec:	d101      	bne.n	80025f2 <HAL_HCD_Stop+0x16>
 80025ee:	2302      	movs	r3, #2
 80025f0:	e00d      	b.n	800260e <HAL_HCD_Stop+0x32>
 80025f2:	687b      	ldr	r3, [r7, #4]
 80025f4:	2201      	movs	r2, #1
 80025f6:	f883 22f8 	strb.w	r2, [r3, #760]	; 0x2f8
  (void)USB_StopHost(hhcd->Instance);
 80025fa:	687b      	ldr	r3, [r7, #4]
 80025fc:	681b      	ldr	r3, [r3, #0]
 80025fe:	4618      	mov	r0, r3
 8002600:	f003 ffca 	bl	8006598 <USB_StopHost>
  __HAL_UNLOCK(hhcd);
 8002604:	687b      	ldr	r3, [r7, #4]
 8002606:	2200      	movs	r2, #0
 8002608:	f883 22f8 	strb.w	r2, [r3, #760]	; 0x2f8

  return HAL_OK;
 800260c:	2300      	movs	r3, #0
}
 800260e:	4618      	mov	r0, r3
 8002610:	3708      	adds	r7, #8
 8002612:	46bd      	mov	sp, r7
 8002614:	bd80      	pop	{r7, pc}

08002616 <HCD_HC_IN_IRQHandler>:
  * @param  chnum Channel number.
  *         This parameter can be a value from 1 to 15
  * @retval none
  */
static void HCD_HC_IN_IRQHandler(HCD_HandleTypeDef *hhcd, uint8_t chnum)
{
 8002616:	b580      	push	{r7, lr}
 8002618:	b086      	sub	sp, #24
 800261a:	af00      	add	r7, sp, #0
 800261c:	6078      	str	r0, [r7, #4]
 800261e:	460b      	mov	r3, r1
 8002620:	70fb      	strb	r3, [r7, #3]
  USB_OTG_GlobalTypeDef *USBx = hhcd->Instance;
 8002622:	687b      	ldr	r3, [r7, #4]
 8002624:	681b      	ldr	r3, [r3, #0]
 8002626:	617b      	str	r3, [r7, #20]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8002628:	697b      	ldr	r3, [r7, #20]
 800262a:	613b      	str	r3, [r7, #16]
  uint32_t ch_num = (uint32_t)chnum;
 800262c:	78fb      	ldrb	r3, [r7, #3]
 800262e:	60fb      	str	r3, [r7, #12]

  uint32_t tmpreg;

  if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_AHBERR) == USB_OTG_HCINT_AHBERR)
 8002630:	68fb      	ldr	r3, [r7, #12]
 8002632:	015a      	lsls	r2, r3, #5
 8002634:	693b      	ldr	r3, [r7, #16]
 8002636:	4413      	add	r3, r2
 8002638:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800263c:	689b      	ldr	r3, [r3, #8]
 800263e:	f003 0304 	and.w	r3, r3, #4
 8002642:	2b04      	cmp	r3, #4
 8002644:	d11a      	bne.n	800267c <HCD_HC_IN_IRQHandler+0x66>
  {
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_AHBERR);
 8002646:	68fb      	ldr	r3, [r7, #12]
 8002648:	015a      	lsls	r2, r3, #5
 800264a:	693b      	ldr	r3, [r7, #16]
 800264c:	4413      	add	r3, r2
 800264e:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002652:	461a      	mov	r2, r3
 8002654:	2304      	movs	r3, #4
 8002656:	6093      	str	r3, [r2, #8]
    hhcd->hc[ch_num].state = HC_XACTERR;
 8002658:	687a      	ldr	r2, [r7, #4]
 800265a:	68fb      	ldr	r3, [r7, #12]
 800265c:	212c      	movs	r1, #44	; 0x2c
 800265e:	fb01 f303 	mul.w	r3, r1, r3
 8002662:	4413      	add	r3, r2
 8002664:	3361      	adds	r3, #97	; 0x61
 8002666:	2206      	movs	r2, #6
 8002668:	701a      	strb	r2, [r3, #0]
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 800266a:	687b      	ldr	r3, [r7, #4]
 800266c:	681b      	ldr	r3, [r3, #0]
 800266e:	68fa      	ldr	r2, [r7, #12]
 8002670:	b2d2      	uxtb	r2, r2
 8002672:	4611      	mov	r1, r2
 8002674:	4618      	mov	r0, r3
 8002676:	f003 fe93 	bl	80063a0 <USB_HC_Halt>
 800267a:	e0af      	b.n	80027dc <HCD_HC_IN_IRQHandler+0x1c6>
  }
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_BBERR) == USB_OTG_HCINT_BBERR)
 800267c:	68fb      	ldr	r3, [r7, #12]
 800267e:	015a      	lsls	r2, r3, #5
 8002680:	693b      	ldr	r3, [r7, #16]
 8002682:	4413      	add	r3, r2
 8002684:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002688:	689b      	ldr	r3, [r3, #8]
 800268a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800268e:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8002692:	d11b      	bne.n	80026cc <HCD_HC_IN_IRQHandler+0xb6>
  {
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_BBERR);
 8002694:	68fb      	ldr	r3, [r7, #12]
 8002696:	015a      	lsls	r2, r3, #5
 8002698:	693b      	ldr	r3, [r7, #16]
 800269a:	4413      	add	r3, r2
 800269c:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80026a0:	461a      	mov	r2, r3
 80026a2:	f44f 7380 	mov.w	r3, #256	; 0x100
 80026a6:	6093      	str	r3, [r2, #8]
    hhcd->hc[ch_num].state = HC_BBLERR;
 80026a8:	687a      	ldr	r2, [r7, #4]
 80026aa:	68fb      	ldr	r3, [r7, #12]
 80026ac:	212c      	movs	r1, #44	; 0x2c
 80026ae:	fb01 f303 	mul.w	r3, r1, r3
 80026b2:	4413      	add	r3, r2
 80026b4:	3361      	adds	r3, #97	; 0x61
 80026b6:	2207      	movs	r2, #7
 80026b8:	701a      	strb	r2, [r3, #0]
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 80026ba:	687b      	ldr	r3, [r7, #4]
 80026bc:	681b      	ldr	r3, [r3, #0]
 80026be:	68fa      	ldr	r2, [r7, #12]
 80026c0:	b2d2      	uxtb	r2, r2
 80026c2:	4611      	mov	r1, r2
 80026c4:	4618      	mov	r0, r3
 80026c6:	f003 fe6b 	bl	80063a0 <USB_HC_Halt>
 80026ca:	e087      	b.n	80027dc <HCD_HC_IN_IRQHandler+0x1c6>
  }
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_ACK) == USB_OTG_HCINT_ACK)
 80026cc:	68fb      	ldr	r3, [r7, #12]
 80026ce:	015a      	lsls	r2, r3, #5
 80026d0:	693b      	ldr	r3, [r7, #16]
 80026d2:	4413      	add	r3, r2
 80026d4:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80026d8:	689b      	ldr	r3, [r3, #8]
 80026da:	f003 0320 	and.w	r3, r3, #32
 80026de:	2b20      	cmp	r3, #32
 80026e0:	d109      	bne.n	80026f6 <HCD_HC_IN_IRQHandler+0xe0>
  {
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_ACK);
 80026e2:	68fb      	ldr	r3, [r7, #12]
 80026e4:	015a      	lsls	r2, r3, #5
 80026e6:	693b      	ldr	r3, [r7, #16]
 80026e8:	4413      	add	r3, r2
 80026ea:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80026ee:	461a      	mov	r2, r3
 80026f0:	2320      	movs	r3, #32
 80026f2:	6093      	str	r3, [r2, #8]
 80026f4:	e072      	b.n	80027dc <HCD_HC_IN_IRQHandler+0x1c6>
  }
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_STALL) == USB_OTG_HCINT_STALL)
 80026f6:	68fb      	ldr	r3, [r7, #12]
 80026f8:	015a      	lsls	r2, r3, #5
 80026fa:	693b      	ldr	r3, [r7, #16]
 80026fc:	4413      	add	r3, r2
 80026fe:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002702:	689b      	ldr	r3, [r3, #8]
 8002704:	f003 0308 	and.w	r3, r3, #8
 8002708:	2b08      	cmp	r3, #8
 800270a:	d11a      	bne.n	8002742 <HCD_HC_IN_IRQHandler+0x12c>
  {
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_STALL);
 800270c:	68fb      	ldr	r3, [r7, #12]
 800270e:	015a      	lsls	r2, r3, #5
 8002710:	693b      	ldr	r3, [r7, #16]
 8002712:	4413      	add	r3, r2
 8002714:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002718:	461a      	mov	r2, r3
 800271a:	2308      	movs	r3, #8
 800271c:	6093      	str	r3, [r2, #8]
    hhcd->hc[ch_num].state = HC_STALL;
 800271e:	687a      	ldr	r2, [r7, #4]
 8002720:	68fb      	ldr	r3, [r7, #12]
 8002722:	212c      	movs	r1, #44	; 0x2c
 8002724:	fb01 f303 	mul.w	r3, r1, r3
 8002728:	4413      	add	r3, r2
 800272a:	3361      	adds	r3, #97	; 0x61
 800272c:	2205      	movs	r2, #5
 800272e:	701a      	strb	r2, [r3, #0]
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 8002730:	687b      	ldr	r3, [r7, #4]
 8002732:	681b      	ldr	r3, [r3, #0]
 8002734:	68fa      	ldr	r2, [r7, #12]
 8002736:	b2d2      	uxtb	r2, r2
 8002738:	4611      	mov	r1, r2
 800273a:	4618      	mov	r0, r3
 800273c:	f003 fe30 	bl	80063a0 <USB_HC_Halt>
 8002740:	e04c      	b.n	80027dc <HCD_HC_IN_IRQHandler+0x1c6>
  }
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_DTERR) == USB_OTG_HCINT_DTERR)
 8002742:	68fb      	ldr	r3, [r7, #12]
 8002744:	015a      	lsls	r2, r3, #5
 8002746:	693b      	ldr	r3, [r7, #16]
 8002748:	4413      	add	r3, r2
 800274a:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800274e:	689b      	ldr	r3, [r3, #8]
 8002750:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8002754:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8002758:	d11b      	bne.n	8002792 <HCD_HC_IN_IRQHandler+0x17c>
  {
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_DTERR);
 800275a:	68fb      	ldr	r3, [r7, #12]
 800275c:	015a      	lsls	r2, r3, #5
 800275e:	693b      	ldr	r3, [r7, #16]
 8002760:	4413      	add	r3, r2
 8002762:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002766:	461a      	mov	r2, r3
 8002768:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800276c:	6093      	str	r3, [r2, #8]
    hhcd->hc[ch_num].state = HC_DATATGLERR;
 800276e:	687a      	ldr	r2, [r7, #4]
 8002770:	68fb      	ldr	r3, [r7, #12]
 8002772:	212c      	movs	r1, #44	; 0x2c
 8002774:	fb01 f303 	mul.w	r3, r1, r3
 8002778:	4413      	add	r3, r2
 800277a:	3361      	adds	r3, #97	; 0x61
 800277c:	2208      	movs	r2, #8
 800277e:	701a      	strb	r2, [r3, #0]
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 8002780:	687b      	ldr	r3, [r7, #4]
 8002782:	681b      	ldr	r3, [r3, #0]
 8002784:	68fa      	ldr	r2, [r7, #12]
 8002786:	b2d2      	uxtb	r2, r2
 8002788:	4611      	mov	r1, r2
 800278a:	4618      	mov	r0, r3
 800278c:	f003 fe08 	bl	80063a0 <USB_HC_Halt>
 8002790:	e024      	b.n	80027dc <HCD_HC_IN_IRQHandler+0x1c6>
  }
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_TXERR) == USB_OTG_HCINT_TXERR)
 8002792:	68fb      	ldr	r3, [r7, #12]
 8002794:	015a      	lsls	r2, r3, #5
 8002796:	693b      	ldr	r3, [r7, #16]
 8002798:	4413      	add	r3, r2
 800279a:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800279e:	689b      	ldr	r3, [r3, #8]
 80027a0:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80027a4:	2b80      	cmp	r3, #128	; 0x80
 80027a6:	d119      	bne.n	80027dc <HCD_HC_IN_IRQHandler+0x1c6>
  {
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_TXERR);
 80027a8:	68fb      	ldr	r3, [r7, #12]
 80027aa:	015a      	lsls	r2, r3, #5
 80027ac:	693b      	ldr	r3, [r7, #16]
 80027ae:	4413      	add	r3, r2
 80027b0:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80027b4:	461a      	mov	r2, r3
 80027b6:	2380      	movs	r3, #128	; 0x80
 80027b8:	6093      	str	r3, [r2, #8]
    hhcd->hc[ch_num].state = HC_XACTERR;
 80027ba:	687a      	ldr	r2, [r7, #4]
 80027bc:	68fb      	ldr	r3, [r7, #12]
 80027be:	212c      	movs	r1, #44	; 0x2c
 80027c0:	fb01 f303 	mul.w	r3, r1, r3
 80027c4:	4413      	add	r3, r2
 80027c6:	3361      	adds	r3, #97	; 0x61
 80027c8:	2206      	movs	r2, #6
 80027ca:	701a      	strb	r2, [r3, #0]
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 80027cc:	687b      	ldr	r3, [r7, #4]
 80027ce:	681b      	ldr	r3, [r3, #0]
 80027d0:	68fa      	ldr	r2, [r7, #12]
 80027d2:	b2d2      	uxtb	r2, r2
 80027d4:	4611      	mov	r1, r2
 80027d6:	4618      	mov	r0, r3
 80027d8:	f003 fde2 	bl	80063a0 <USB_HC_Halt>
  else
  {
    /* ... */
  }

  if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_FRMOR) == USB_OTG_HCINT_FRMOR)
 80027dc:	68fb      	ldr	r3, [r7, #12]
 80027de:	015a      	lsls	r2, r3, #5
 80027e0:	693b      	ldr	r3, [r7, #16]
 80027e2:	4413      	add	r3, r2
 80027e4:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80027e8:	689b      	ldr	r3, [r3, #8]
 80027ea:	f403 7300 	and.w	r3, r3, #512	; 0x200
 80027ee:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80027f2:	d112      	bne.n	800281a <HCD_HC_IN_IRQHandler+0x204>
  {
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 80027f4:	687b      	ldr	r3, [r7, #4]
 80027f6:	681b      	ldr	r3, [r3, #0]
 80027f8:	68fa      	ldr	r2, [r7, #12]
 80027fa:	b2d2      	uxtb	r2, r2
 80027fc:	4611      	mov	r1, r2
 80027fe:	4618      	mov	r0, r3
 8002800:	f003 fdce 	bl	80063a0 <USB_HC_Halt>
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_FRMOR);
 8002804:	68fb      	ldr	r3, [r7, #12]
 8002806:	015a      	lsls	r2, r3, #5
 8002808:	693b      	ldr	r3, [r7, #16]
 800280a:	4413      	add	r3, r2
 800280c:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002810:	461a      	mov	r2, r3
 8002812:	f44f 7300 	mov.w	r3, #512	; 0x200
 8002816:	6093      	str	r3, [r2, #8]
  }
  else
  {
    /* ... */
  }
}
 8002818:	e24e      	b.n	8002cb8 <HCD_HC_IN_IRQHandler+0x6a2>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_XFRC) == USB_OTG_HCINT_XFRC)
 800281a:	68fb      	ldr	r3, [r7, #12]
 800281c:	015a      	lsls	r2, r3, #5
 800281e:	693b      	ldr	r3, [r7, #16]
 8002820:	4413      	add	r3, r2
 8002822:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002826:	689b      	ldr	r3, [r3, #8]
 8002828:	f003 0301 	and.w	r3, r3, #1
 800282c:	2b01      	cmp	r3, #1
 800282e:	f040 80df 	bne.w	80029f0 <HCD_HC_IN_IRQHandler+0x3da>
    if (hhcd->Init.dma_enable != 0U)
 8002832:	687b      	ldr	r3, [r7, #4]
 8002834:	691b      	ldr	r3, [r3, #16]
 8002836:	2b00      	cmp	r3, #0
 8002838:	d019      	beq.n	800286e <HCD_HC_IN_IRQHandler+0x258>
      hhcd->hc[ch_num].xfer_count = hhcd->hc[ch_num].XferSize - \
 800283a:	687a      	ldr	r2, [r7, #4]
 800283c:	68fb      	ldr	r3, [r7, #12]
 800283e:	212c      	movs	r1, #44	; 0x2c
 8002840:	fb01 f303 	mul.w	r3, r1, r3
 8002844:	4413      	add	r3, r2
 8002846:	3348      	adds	r3, #72	; 0x48
 8002848:	681a      	ldr	r2, [r3, #0]
                                    (USBx_HC(ch_num)->HCTSIZ & USB_OTG_HCTSIZ_XFRSIZ);
 800284a:	68fb      	ldr	r3, [r7, #12]
 800284c:	0159      	lsls	r1, r3, #5
 800284e:	693b      	ldr	r3, [r7, #16]
 8002850:	440b      	add	r3, r1
 8002852:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002856:	691b      	ldr	r3, [r3, #16]
 8002858:	f3c3 0312 	ubfx	r3, r3, #0, #19
      hhcd->hc[ch_num].xfer_count = hhcd->hc[ch_num].XferSize - \
 800285c:	1ad2      	subs	r2, r2, r3
 800285e:	6879      	ldr	r1, [r7, #4]
 8002860:	68fb      	ldr	r3, [r7, #12]
 8002862:	202c      	movs	r0, #44	; 0x2c
 8002864:	fb00 f303 	mul.w	r3, r0, r3
 8002868:	440b      	add	r3, r1
 800286a:	3350      	adds	r3, #80	; 0x50
 800286c:	601a      	str	r2, [r3, #0]
    hhcd->hc[ch_num].state = HC_XFRC;
 800286e:	687a      	ldr	r2, [r7, #4]
 8002870:	68fb      	ldr	r3, [r7, #12]
 8002872:	212c      	movs	r1, #44	; 0x2c
 8002874:	fb01 f303 	mul.w	r3, r1, r3
 8002878:	4413      	add	r3, r2
 800287a:	3361      	adds	r3, #97	; 0x61
 800287c:	2201      	movs	r2, #1
 800287e:	701a      	strb	r2, [r3, #0]
    hhcd->hc[ch_num].ErrCnt = 0U;
 8002880:	687a      	ldr	r2, [r7, #4]
 8002882:	68fb      	ldr	r3, [r7, #12]
 8002884:	212c      	movs	r1, #44	; 0x2c
 8002886:	fb01 f303 	mul.w	r3, r1, r3
 800288a:	4413      	add	r3, r2
 800288c:	335c      	adds	r3, #92	; 0x5c
 800288e:	2200      	movs	r2, #0
 8002890:	601a      	str	r2, [r3, #0]
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_XFRC);
 8002892:	68fb      	ldr	r3, [r7, #12]
 8002894:	015a      	lsls	r2, r3, #5
 8002896:	693b      	ldr	r3, [r7, #16]
 8002898:	4413      	add	r3, r2
 800289a:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800289e:	461a      	mov	r2, r3
 80028a0:	2301      	movs	r3, #1
 80028a2:	6093      	str	r3, [r2, #8]
    if ((hhcd->hc[ch_num].ep_type == EP_TYPE_CTRL) ||
 80028a4:	687a      	ldr	r2, [r7, #4]
 80028a6:	68fb      	ldr	r3, [r7, #12]
 80028a8:	212c      	movs	r1, #44	; 0x2c
 80028aa:	fb01 f303 	mul.w	r3, r1, r3
 80028ae:	4413      	add	r3, r2
 80028b0:	333f      	adds	r3, #63	; 0x3f
 80028b2:	781b      	ldrb	r3, [r3, #0]
 80028b4:	2b00      	cmp	r3, #0
 80028b6:	d009      	beq.n	80028cc <HCD_HC_IN_IRQHandler+0x2b6>
        (hhcd->hc[ch_num].ep_type == EP_TYPE_BULK))
 80028b8:	687a      	ldr	r2, [r7, #4]
 80028ba:	68fb      	ldr	r3, [r7, #12]
 80028bc:	212c      	movs	r1, #44	; 0x2c
 80028be:	fb01 f303 	mul.w	r3, r1, r3
 80028c2:	4413      	add	r3, r2
 80028c4:	333f      	adds	r3, #63	; 0x3f
 80028c6:	781b      	ldrb	r3, [r3, #0]
    if ((hhcd->hc[ch_num].ep_type == EP_TYPE_CTRL) ||
 80028c8:	2b02      	cmp	r3, #2
 80028ca:	d111      	bne.n	80028f0 <HCD_HC_IN_IRQHandler+0x2da>
      (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 80028cc:	687b      	ldr	r3, [r7, #4]
 80028ce:	681b      	ldr	r3, [r3, #0]
 80028d0:	68fa      	ldr	r2, [r7, #12]
 80028d2:	b2d2      	uxtb	r2, r2
 80028d4:	4611      	mov	r1, r2
 80028d6:	4618      	mov	r0, r3
 80028d8:	f003 fd62 	bl	80063a0 <USB_HC_Halt>
      __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_NAK);
 80028dc:	68fb      	ldr	r3, [r7, #12]
 80028de:	015a      	lsls	r2, r3, #5
 80028e0:	693b      	ldr	r3, [r7, #16]
 80028e2:	4413      	add	r3, r2
 80028e4:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80028e8:	461a      	mov	r2, r3
 80028ea:	2310      	movs	r3, #16
 80028ec:	6093      	str	r3, [r2, #8]
 80028ee:	e03a      	b.n	8002966 <HCD_HC_IN_IRQHandler+0x350>
    else if ((hhcd->hc[ch_num].ep_type == EP_TYPE_INTR) ||
 80028f0:	687a      	ldr	r2, [r7, #4]
 80028f2:	68fb      	ldr	r3, [r7, #12]
 80028f4:	212c      	movs	r1, #44	; 0x2c
 80028f6:	fb01 f303 	mul.w	r3, r1, r3
 80028fa:	4413      	add	r3, r2
 80028fc:	333f      	adds	r3, #63	; 0x3f
 80028fe:	781b      	ldrb	r3, [r3, #0]
 8002900:	2b03      	cmp	r3, #3
 8002902:	d009      	beq.n	8002918 <HCD_HC_IN_IRQHandler+0x302>
             (hhcd->hc[ch_num].ep_type == EP_TYPE_ISOC))
 8002904:	687a      	ldr	r2, [r7, #4]
 8002906:	68fb      	ldr	r3, [r7, #12]
 8002908:	212c      	movs	r1, #44	; 0x2c
 800290a:	fb01 f303 	mul.w	r3, r1, r3
 800290e:	4413      	add	r3, r2
 8002910:	333f      	adds	r3, #63	; 0x3f
 8002912:	781b      	ldrb	r3, [r3, #0]
    else if ((hhcd->hc[ch_num].ep_type == EP_TYPE_INTR) ||
 8002914:	2b01      	cmp	r3, #1
 8002916:	d126      	bne.n	8002966 <HCD_HC_IN_IRQHandler+0x350>
      USBx_HC(ch_num)->HCCHAR |= USB_OTG_HCCHAR_ODDFRM;
 8002918:	68fb      	ldr	r3, [r7, #12]
 800291a:	015a      	lsls	r2, r3, #5
 800291c:	693b      	ldr	r3, [r7, #16]
 800291e:	4413      	add	r3, r2
 8002920:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002924:	681b      	ldr	r3, [r3, #0]
 8002926:	68fa      	ldr	r2, [r7, #12]
 8002928:	0151      	lsls	r1, r2, #5
 800292a:	693a      	ldr	r2, [r7, #16]
 800292c:	440a      	add	r2, r1
 800292e:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8002932:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 8002936:	6013      	str	r3, [r2, #0]
      hhcd->hc[ch_num].urb_state = URB_DONE;
 8002938:	687a      	ldr	r2, [r7, #4]
 800293a:	68fb      	ldr	r3, [r7, #12]
 800293c:	212c      	movs	r1, #44	; 0x2c
 800293e:	fb01 f303 	mul.w	r3, r1, r3
 8002942:	4413      	add	r3, r2
 8002944:	3360      	adds	r3, #96	; 0x60
 8002946:	2201      	movs	r2, #1
 8002948:	701a      	strb	r2, [r3, #0]
      HAL_HCD_HC_NotifyURBChange_Callback(hhcd, (uint8_t)ch_num, hhcd->hc[ch_num].urb_state);
 800294a:	68fb      	ldr	r3, [r7, #12]
 800294c:	b2d9      	uxtb	r1, r3
 800294e:	687a      	ldr	r2, [r7, #4]
 8002950:	68fb      	ldr	r3, [r7, #12]
 8002952:	202c      	movs	r0, #44	; 0x2c
 8002954:	fb00 f303 	mul.w	r3, r0, r3
 8002958:	4413      	add	r3, r2
 800295a:	3360      	adds	r3, #96	; 0x60
 800295c:	781b      	ldrb	r3, [r3, #0]
 800295e:	461a      	mov	r2, r3
 8002960:	6878      	ldr	r0, [r7, #4]
 8002962:	f007 fbc1 	bl	800a0e8 <HAL_HCD_HC_NotifyURBChange_Callback>
    if (hhcd->Init.dma_enable == 1U)
 8002966:	687b      	ldr	r3, [r7, #4]
 8002968:	691b      	ldr	r3, [r3, #16]
 800296a:	2b01      	cmp	r3, #1
 800296c:	d12b      	bne.n	80029c6 <HCD_HC_IN_IRQHandler+0x3b0>
      if (((hhcd->hc[ch_num].XferSize / hhcd->hc[ch_num].max_packet) & 1U) != 0U)
 800296e:	687a      	ldr	r2, [r7, #4]
 8002970:	68fb      	ldr	r3, [r7, #12]
 8002972:	212c      	movs	r1, #44	; 0x2c
 8002974:	fb01 f303 	mul.w	r3, r1, r3
 8002978:	4413      	add	r3, r2
 800297a:	3348      	adds	r3, #72	; 0x48
 800297c:	681b      	ldr	r3, [r3, #0]
 800297e:	6879      	ldr	r1, [r7, #4]
 8002980:	68fa      	ldr	r2, [r7, #12]
 8002982:	202c      	movs	r0, #44	; 0x2c
 8002984:	fb00 f202 	mul.w	r2, r0, r2
 8002988:	440a      	add	r2, r1
 800298a:	3240      	adds	r2, #64	; 0x40
 800298c:	8812      	ldrh	r2, [r2, #0]
 800298e:	fbb3 f3f2 	udiv	r3, r3, r2
 8002992:	f003 0301 	and.w	r3, r3, #1
 8002996:	2b00      	cmp	r3, #0
 8002998:	f000 818e 	beq.w	8002cb8 <HCD_HC_IN_IRQHandler+0x6a2>
        hhcd->hc[ch_num].toggle_in ^= 1U;
 800299c:	687a      	ldr	r2, [r7, #4]
 800299e:	68fb      	ldr	r3, [r7, #12]
 80029a0:	212c      	movs	r1, #44	; 0x2c
 80029a2:	fb01 f303 	mul.w	r3, r1, r3
 80029a6:	4413      	add	r3, r2
 80029a8:	3354      	adds	r3, #84	; 0x54
 80029aa:	781b      	ldrb	r3, [r3, #0]
 80029ac:	f083 0301 	eor.w	r3, r3, #1
 80029b0:	b2d8      	uxtb	r0, r3
 80029b2:	687a      	ldr	r2, [r7, #4]
 80029b4:	68fb      	ldr	r3, [r7, #12]
 80029b6:	212c      	movs	r1, #44	; 0x2c
 80029b8:	fb01 f303 	mul.w	r3, r1, r3
 80029bc:	4413      	add	r3, r2
 80029be:	3354      	adds	r3, #84	; 0x54
 80029c0:	4602      	mov	r2, r0
 80029c2:	701a      	strb	r2, [r3, #0]
}
 80029c4:	e178      	b.n	8002cb8 <HCD_HC_IN_IRQHandler+0x6a2>
      hhcd->hc[ch_num].toggle_in ^= 1U;
 80029c6:	687a      	ldr	r2, [r7, #4]
 80029c8:	68fb      	ldr	r3, [r7, #12]
 80029ca:	212c      	movs	r1, #44	; 0x2c
 80029cc:	fb01 f303 	mul.w	r3, r1, r3
 80029d0:	4413      	add	r3, r2
 80029d2:	3354      	adds	r3, #84	; 0x54
 80029d4:	781b      	ldrb	r3, [r3, #0]
 80029d6:	f083 0301 	eor.w	r3, r3, #1
 80029da:	b2d8      	uxtb	r0, r3
 80029dc:	687a      	ldr	r2, [r7, #4]
 80029de:	68fb      	ldr	r3, [r7, #12]
 80029e0:	212c      	movs	r1, #44	; 0x2c
 80029e2:	fb01 f303 	mul.w	r3, r1, r3
 80029e6:	4413      	add	r3, r2
 80029e8:	3354      	adds	r3, #84	; 0x54
 80029ea:	4602      	mov	r2, r0
 80029ec:	701a      	strb	r2, [r3, #0]
}
 80029ee:	e163      	b.n	8002cb8 <HCD_HC_IN_IRQHandler+0x6a2>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_CHH) == USB_OTG_HCINT_CHH)
 80029f0:	68fb      	ldr	r3, [r7, #12]
 80029f2:	015a      	lsls	r2, r3, #5
 80029f4:	693b      	ldr	r3, [r7, #16]
 80029f6:	4413      	add	r3, r2
 80029f8:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80029fc:	689b      	ldr	r3, [r3, #8]
 80029fe:	f003 0302 	and.w	r3, r3, #2
 8002a02:	2b02      	cmp	r3, #2
 8002a04:	f040 80f6 	bne.w	8002bf4 <HCD_HC_IN_IRQHandler+0x5de>
    if (hhcd->hc[ch_num].state == HC_XFRC)
 8002a08:	687a      	ldr	r2, [r7, #4]
 8002a0a:	68fb      	ldr	r3, [r7, #12]
 8002a0c:	212c      	movs	r1, #44	; 0x2c
 8002a0e:	fb01 f303 	mul.w	r3, r1, r3
 8002a12:	4413      	add	r3, r2
 8002a14:	3361      	adds	r3, #97	; 0x61
 8002a16:	781b      	ldrb	r3, [r3, #0]
 8002a18:	2b01      	cmp	r3, #1
 8002a1a:	d109      	bne.n	8002a30 <HCD_HC_IN_IRQHandler+0x41a>
      hhcd->hc[ch_num].urb_state = URB_DONE;
 8002a1c:	687a      	ldr	r2, [r7, #4]
 8002a1e:	68fb      	ldr	r3, [r7, #12]
 8002a20:	212c      	movs	r1, #44	; 0x2c
 8002a22:	fb01 f303 	mul.w	r3, r1, r3
 8002a26:	4413      	add	r3, r2
 8002a28:	3360      	adds	r3, #96	; 0x60
 8002a2a:	2201      	movs	r2, #1
 8002a2c:	701a      	strb	r2, [r3, #0]
 8002a2e:	e0c9      	b.n	8002bc4 <HCD_HC_IN_IRQHandler+0x5ae>
    else if (hhcd->hc[ch_num].state == HC_STALL)
 8002a30:	687a      	ldr	r2, [r7, #4]
 8002a32:	68fb      	ldr	r3, [r7, #12]
 8002a34:	212c      	movs	r1, #44	; 0x2c
 8002a36:	fb01 f303 	mul.w	r3, r1, r3
 8002a3a:	4413      	add	r3, r2
 8002a3c:	3361      	adds	r3, #97	; 0x61
 8002a3e:	781b      	ldrb	r3, [r3, #0]
 8002a40:	2b05      	cmp	r3, #5
 8002a42:	d109      	bne.n	8002a58 <HCD_HC_IN_IRQHandler+0x442>
      hhcd->hc[ch_num].urb_state = URB_STALL;
 8002a44:	687a      	ldr	r2, [r7, #4]
 8002a46:	68fb      	ldr	r3, [r7, #12]
 8002a48:	212c      	movs	r1, #44	; 0x2c
 8002a4a:	fb01 f303 	mul.w	r3, r1, r3
 8002a4e:	4413      	add	r3, r2
 8002a50:	3360      	adds	r3, #96	; 0x60
 8002a52:	2205      	movs	r2, #5
 8002a54:	701a      	strb	r2, [r3, #0]
 8002a56:	e0b5      	b.n	8002bc4 <HCD_HC_IN_IRQHandler+0x5ae>
    else if ((hhcd->hc[ch_num].state == HC_XACTERR) ||
 8002a58:	687a      	ldr	r2, [r7, #4]
 8002a5a:	68fb      	ldr	r3, [r7, #12]
 8002a5c:	212c      	movs	r1, #44	; 0x2c
 8002a5e:	fb01 f303 	mul.w	r3, r1, r3
 8002a62:	4413      	add	r3, r2
 8002a64:	3361      	adds	r3, #97	; 0x61
 8002a66:	781b      	ldrb	r3, [r3, #0]
 8002a68:	2b06      	cmp	r3, #6
 8002a6a:	d009      	beq.n	8002a80 <HCD_HC_IN_IRQHandler+0x46a>
             (hhcd->hc[ch_num].state == HC_DATATGLERR))
 8002a6c:	687a      	ldr	r2, [r7, #4]
 8002a6e:	68fb      	ldr	r3, [r7, #12]
 8002a70:	212c      	movs	r1, #44	; 0x2c
 8002a72:	fb01 f303 	mul.w	r3, r1, r3
 8002a76:	4413      	add	r3, r2
 8002a78:	3361      	adds	r3, #97	; 0x61
 8002a7a:	781b      	ldrb	r3, [r3, #0]
    else if ((hhcd->hc[ch_num].state == HC_XACTERR) ||
 8002a7c:	2b08      	cmp	r3, #8
 8002a7e:	d150      	bne.n	8002b22 <HCD_HC_IN_IRQHandler+0x50c>
      hhcd->hc[ch_num].ErrCnt++;
 8002a80:	687a      	ldr	r2, [r7, #4]
 8002a82:	68fb      	ldr	r3, [r7, #12]
 8002a84:	212c      	movs	r1, #44	; 0x2c
 8002a86:	fb01 f303 	mul.w	r3, r1, r3
 8002a8a:	4413      	add	r3, r2
 8002a8c:	335c      	adds	r3, #92	; 0x5c
 8002a8e:	681b      	ldr	r3, [r3, #0]
 8002a90:	1c5a      	adds	r2, r3, #1
 8002a92:	6879      	ldr	r1, [r7, #4]
 8002a94:	68fb      	ldr	r3, [r7, #12]
 8002a96:	202c      	movs	r0, #44	; 0x2c
 8002a98:	fb00 f303 	mul.w	r3, r0, r3
 8002a9c:	440b      	add	r3, r1
 8002a9e:	335c      	adds	r3, #92	; 0x5c
 8002aa0:	601a      	str	r2, [r3, #0]
      if (hhcd->hc[ch_num].ErrCnt > 2U)
 8002aa2:	687a      	ldr	r2, [r7, #4]
 8002aa4:	68fb      	ldr	r3, [r7, #12]
 8002aa6:	212c      	movs	r1, #44	; 0x2c
 8002aa8:	fb01 f303 	mul.w	r3, r1, r3
 8002aac:	4413      	add	r3, r2
 8002aae:	335c      	adds	r3, #92	; 0x5c
 8002ab0:	681b      	ldr	r3, [r3, #0]
 8002ab2:	2b02      	cmp	r3, #2
 8002ab4:	d912      	bls.n	8002adc <HCD_HC_IN_IRQHandler+0x4c6>
        hhcd->hc[ch_num].ErrCnt = 0U;
 8002ab6:	687a      	ldr	r2, [r7, #4]
 8002ab8:	68fb      	ldr	r3, [r7, #12]
 8002aba:	212c      	movs	r1, #44	; 0x2c
 8002abc:	fb01 f303 	mul.w	r3, r1, r3
 8002ac0:	4413      	add	r3, r2
 8002ac2:	335c      	adds	r3, #92	; 0x5c
 8002ac4:	2200      	movs	r2, #0
 8002ac6:	601a      	str	r2, [r3, #0]
        hhcd->hc[ch_num].urb_state = URB_ERROR;
 8002ac8:	687a      	ldr	r2, [r7, #4]
 8002aca:	68fb      	ldr	r3, [r7, #12]
 8002acc:	212c      	movs	r1, #44	; 0x2c
 8002ace:	fb01 f303 	mul.w	r3, r1, r3
 8002ad2:	4413      	add	r3, r2
 8002ad4:	3360      	adds	r3, #96	; 0x60
 8002ad6:	2204      	movs	r2, #4
 8002ad8:	701a      	strb	r2, [r3, #0]
      if (hhcd->hc[ch_num].ErrCnt > 2U)
 8002ada:	e073      	b.n	8002bc4 <HCD_HC_IN_IRQHandler+0x5ae>
        hhcd->hc[ch_num].urb_state = URB_NOTREADY;
 8002adc:	687a      	ldr	r2, [r7, #4]
 8002ade:	68fb      	ldr	r3, [r7, #12]
 8002ae0:	212c      	movs	r1, #44	; 0x2c
 8002ae2:	fb01 f303 	mul.w	r3, r1, r3
 8002ae6:	4413      	add	r3, r2
 8002ae8:	3360      	adds	r3, #96	; 0x60
 8002aea:	2202      	movs	r2, #2
 8002aec:	701a      	strb	r2, [r3, #0]
        tmpreg = USBx_HC(ch_num)->HCCHAR;
 8002aee:	68fb      	ldr	r3, [r7, #12]
 8002af0:	015a      	lsls	r2, r3, #5
 8002af2:	693b      	ldr	r3, [r7, #16]
 8002af4:	4413      	add	r3, r2
 8002af6:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002afa:	681b      	ldr	r3, [r3, #0]
 8002afc:	60bb      	str	r3, [r7, #8]
        tmpreg &= ~USB_OTG_HCCHAR_CHDIS;
 8002afe:	68bb      	ldr	r3, [r7, #8]
 8002b00:	f023 4380 	bic.w	r3, r3, #1073741824	; 0x40000000
 8002b04:	60bb      	str	r3, [r7, #8]
        tmpreg |= USB_OTG_HCCHAR_CHENA;
 8002b06:	68bb      	ldr	r3, [r7, #8]
 8002b08:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8002b0c:	60bb      	str	r3, [r7, #8]
        USBx_HC(ch_num)->HCCHAR = tmpreg;
 8002b0e:	68fb      	ldr	r3, [r7, #12]
 8002b10:	015a      	lsls	r2, r3, #5
 8002b12:	693b      	ldr	r3, [r7, #16]
 8002b14:	4413      	add	r3, r2
 8002b16:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002b1a:	461a      	mov	r2, r3
 8002b1c:	68bb      	ldr	r3, [r7, #8]
 8002b1e:	6013      	str	r3, [r2, #0]
      if (hhcd->hc[ch_num].ErrCnt > 2U)
 8002b20:	e050      	b.n	8002bc4 <HCD_HC_IN_IRQHandler+0x5ae>
    else if (hhcd->hc[ch_num].state == HC_NAK)
 8002b22:	687a      	ldr	r2, [r7, #4]
 8002b24:	68fb      	ldr	r3, [r7, #12]
 8002b26:	212c      	movs	r1, #44	; 0x2c
 8002b28:	fb01 f303 	mul.w	r3, r1, r3
 8002b2c:	4413      	add	r3, r2
 8002b2e:	3361      	adds	r3, #97	; 0x61
 8002b30:	781b      	ldrb	r3, [r3, #0]
 8002b32:	2b03      	cmp	r3, #3
 8002b34:	d122      	bne.n	8002b7c <HCD_HC_IN_IRQHandler+0x566>
      hhcd->hc[ch_num].urb_state  = URB_NOTREADY;
 8002b36:	687a      	ldr	r2, [r7, #4]
 8002b38:	68fb      	ldr	r3, [r7, #12]
 8002b3a:	212c      	movs	r1, #44	; 0x2c
 8002b3c:	fb01 f303 	mul.w	r3, r1, r3
 8002b40:	4413      	add	r3, r2
 8002b42:	3360      	adds	r3, #96	; 0x60
 8002b44:	2202      	movs	r2, #2
 8002b46:	701a      	strb	r2, [r3, #0]
      tmpreg = USBx_HC(ch_num)->HCCHAR;
 8002b48:	68fb      	ldr	r3, [r7, #12]
 8002b4a:	015a      	lsls	r2, r3, #5
 8002b4c:	693b      	ldr	r3, [r7, #16]
 8002b4e:	4413      	add	r3, r2
 8002b50:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002b54:	681b      	ldr	r3, [r3, #0]
 8002b56:	60bb      	str	r3, [r7, #8]
      tmpreg &= ~USB_OTG_HCCHAR_CHDIS;
 8002b58:	68bb      	ldr	r3, [r7, #8]
 8002b5a:	f023 4380 	bic.w	r3, r3, #1073741824	; 0x40000000
 8002b5e:	60bb      	str	r3, [r7, #8]
      tmpreg |= USB_OTG_HCCHAR_CHENA;
 8002b60:	68bb      	ldr	r3, [r7, #8]
 8002b62:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8002b66:	60bb      	str	r3, [r7, #8]
      USBx_HC(ch_num)->HCCHAR = tmpreg;
 8002b68:	68fb      	ldr	r3, [r7, #12]
 8002b6a:	015a      	lsls	r2, r3, #5
 8002b6c:	693b      	ldr	r3, [r7, #16]
 8002b6e:	4413      	add	r3, r2
 8002b70:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002b74:	461a      	mov	r2, r3
 8002b76:	68bb      	ldr	r3, [r7, #8]
 8002b78:	6013      	str	r3, [r2, #0]
 8002b7a:	e023      	b.n	8002bc4 <HCD_HC_IN_IRQHandler+0x5ae>
    else if (hhcd->hc[ch_num].state == HC_BBLERR)
 8002b7c:	687a      	ldr	r2, [r7, #4]
 8002b7e:	68fb      	ldr	r3, [r7, #12]
 8002b80:	212c      	movs	r1, #44	; 0x2c
 8002b82:	fb01 f303 	mul.w	r3, r1, r3
 8002b86:	4413      	add	r3, r2
 8002b88:	3361      	adds	r3, #97	; 0x61
 8002b8a:	781b      	ldrb	r3, [r3, #0]
 8002b8c:	2b07      	cmp	r3, #7
 8002b8e:	d119      	bne.n	8002bc4 <HCD_HC_IN_IRQHandler+0x5ae>
      hhcd->hc[ch_num].ErrCnt++;
 8002b90:	687a      	ldr	r2, [r7, #4]
 8002b92:	68fb      	ldr	r3, [r7, #12]
 8002b94:	212c      	movs	r1, #44	; 0x2c
 8002b96:	fb01 f303 	mul.w	r3, r1, r3
 8002b9a:	4413      	add	r3, r2
 8002b9c:	335c      	adds	r3, #92	; 0x5c
 8002b9e:	681b      	ldr	r3, [r3, #0]
 8002ba0:	1c5a      	adds	r2, r3, #1
 8002ba2:	6879      	ldr	r1, [r7, #4]
 8002ba4:	68fb      	ldr	r3, [r7, #12]
 8002ba6:	202c      	movs	r0, #44	; 0x2c
 8002ba8:	fb00 f303 	mul.w	r3, r0, r3
 8002bac:	440b      	add	r3, r1
 8002bae:	335c      	adds	r3, #92	; 0x5c
 8002bb0:	601a      	str	r2, [r3, #0]
      hhcd->hc[ch_num].urb_state = URB_ERROR;
 8002bb2:	687a      	ldr	r2, [r7, #4]
 8002bb4:	68fb      	ldr	r3, [r7, #12]
 8002bb6:	212c      	movs	r1, #44	; 0x2c
 8002bb8:	fb01 f303 	mul.w	r3, r1, r3
 8002bbc:	4413      	add	r3, r2
 8002bbe:	3360      	adds	r3, #96	; 0x60
 8002bc0:	2204      	movs	r2, #4
 8002bc2:	701a      	strb	r2, [r3, #0]
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_CHH);
 8002bc4:	68fb      	ldr	r3, [r7, #12]
 8002bc6:	015a      	lsls	r2, r3, #5
 8002bc8:	693b      	ldr	r3, [r7, #16]
 8002bca:	4413      	add	r3, r2
 8002bcc:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002bd0:	461a      	mov	r2, r3
 8002bd2:	2302      	movs	r3, #2
 8002bd4:	6093      	str	r3, [r2, #8]
    HAL_HCD_HC_NotifyURBChange_Callback(hhcd, (uint8_t)ch_num, hhcd->hc[ch_num].urb_state);
 8002bd6:	68fb      	ldr	r3, [r7, #12]
 8002bd8:	b2d9      	uxtb	r1, r3
 8002bda:	687a      	ldr	r2, [r7, #4]
 8002bdc:	68fb      	ldr	r3, [r7, #12]
 8002bde:	202c      	movs	r0, #44	; 0x2c
 8002be0:	fb00 f303 	mul.w	r3, r0, r3
 8002be4:	4413      	add	r3, r2
 8002be6:	3360      	adds	r3, #96	; 0x60
 8002be8:	781b      	ldrb	r3, [r3, #0]
 8002bea:	461a      	mov	r2, r3
 8002bec:	6878      	ldr	r0, [r7, #4]
 8002bee:	f007 fa7b 	bl	800a0e8 <HAL_HCD_HC_NotifyURBChange_Callback>
}
 8002bf2:	e061      	b.n	8002cb8 <HCD_HC_IN_IRQHandler+0x6a2>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_NAK) == USB_OTG_HCINT_NAK)
 8002bf4:	68fb      	ldr	r3, [r7, #12]
 8002bf6:	015a      	lsls	r2, r3, #5
 8002bf8:	693b      	ldr	r3, [r7, #16]
 8002bfa:	4413      	add	r3, r2
 8002bfc:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002c00:	689b      	ldr	r3, [r3, #8]
 8002c02:	f003 0310 	and.w	r3, r3, #16
 8002c06:	2b10      	cmp	r3, #16
 8002c08:	d156      	bne.n	8002cb8 <HCD_HC_IN_IRQHandler+0x6a2>
    if (hhcd->hc[ch_num].ep_type == EP_TYPE_INTR)
 8002c0a:	687a      	ldr	r2, [r7, #4]
 8002c0c:	68fb      	ldr	r3, [r7, #12]
 8002c0e:	212c      	movs	r1, #44	; 0x2c
 8002c10:	fb01 f303 	mul.w	r3, r1, r3
 8002c14:	4413      	add	r3, r2
 8002c16:	333f      	adds	r3, #63	; 0x3f
 8002c18:	781b      	ldrb	r3, [r3, #0]
 8002c1a:	2b03      	cmp	r3, #3
 8002c1c:	d111      	bne.n	8002c42 <HCD_HC_IN_IRQHandler+0x62c>
      hhcd->hc[ch_num].ErrCnt = 0U;
 8002c1e:	687a      	ldr	r2, [r7, #4]
 8002c20:	68fb      	ldr	r3, [r7, #12]
 8002c22:	212c      	movs	r1, #44	; 0x2c
 8002c24:	fb01 f303 	mul.w	r3, r1, r3
 8002c28:	4413      	add	r3, r2
 8002c2a:	335c      	adds	r3, #92	; 0x5c
 8002c2c:	2200      	movs	r2, #0
 8002c2e:	601a      	str	r2, [r3, #0]
      (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 8002c30:	687b      	ldr	r3, [r7, #4]
 8002c32:	681b      	ldr	r3, [r3, #0]
 8002c34:	68fa      	ldr	r2, [r7, #12]
 8002c36:	b2d2      	uxtb	r2, r2
 8002c38:	4611      	mov	r1, r2
 8002c3a:	4618      	mov	r0, r3
 8002c3c:	f003 fbb0 	bl	80063a0 <USB_HC_Halt>
 8002c40:	e031      	b.n	8002ca6 <HCD_HC_IN_IRQHandler+0x690>
    else if ((hhcd->hc[ch_num].ep_type == EP_TYPE_CTRL) ||
 8002c42:	687a      	ldr	r2, [r7, #4]
 8002c44:	68fb      	ldr	r3, [r7, #12]
 8002c46:	212c      	movs	r1, #44	; 0x2c
 8002c48:	fb01 f303 	mul.w	r3, r1, r3
 8002c4c:	4413      	add	r3, r2
 8002c4e:	333f      	adds	r3, #63	; 0x3f
 8002c50:	781b      	ldrb	r3, [r3, #0]
 8002c52:	2b00      	cmp	r3, #0
 8002c54:	d009      	beq.n	8002c6a <HCD_HC_IN_IRQHandler+0x654>
             (hhcd->hc[ch_num].ep_type == EP_TYPE_BULK))
 8002c56:	687a      	ldr	r2, [r7, #4]
 8002c58:	68fb      	ldr	r3, [r7, #12]
 8002c5a:	212c      	movs	r1, #44	; 0x2c
 8002c5c:	fb01 f303 	mul.w	r3, r1, r3
 8002c60:	4413      	add	r3, r2
 8002c62:	333f      	adds	r3, #63	; 0x3f
 8002c64:	781b      	ldrb	r3, [r3, #0]
    else if ((hhcd->hc[ch_num].ep_type == EP_TYPE_CTRL) ||
 8002c66:	2b02      	cmp	r3, #2
 8002c68:	d11d      	bne.n	8002ca6 <HCD_HC_IN_IRQHandler+0x690>
      hhcd->hc[ch_num].ErrCnt = 0U;
 8002c6a:	687a      	ldr	r2, [r7, #4]
 8002c6c:	68fb      	ldr	r3, [r7, #12]
 8002c6e:	212c      	movs	r1, #44	; 0x2c
 8002c70:	fb01 f303 	mul.w	r3, r1, r3
 8002c74:	4413      	add	r3, r2
 8002c76:	335c      	adds	r3, #92	; 0x5c
 8002c78:	2200      	movs	r2, #0
 8002c7a:	601a      	str	r2, [r3, #0]
      if (hhcd->Init.dma_enable == 0U)
 8002c7c:	687b      	ldr	r3, [r7, #4]
 8002c7e:	691b      	ldr	r3, [r3, #16]
 8002c80:	2b00      	cmp	r3, #0
 8002c82:	d110      	bne.n	8002ca6 <HCD_HC_IN_IRQHandler+0x690>
        hhcd->hc[ch_num].state = HC_NAK;
 8002c84:	687a      	ldr	r2, [r7, #4]
 8002c86:	68fb      	ldr	r3, [r7, #12]
 8002c88:	212c      	movs	r1, #44	; 0x2c
 8002c8a:	fb01 f303 	mul.w	r3, r1, r3
 8002c8e:	4413      	add	r3, r2
 8002c90:	3361      	adds	r3, #97	; 0x61
 8002c92:	2203      	movs	r2, #3
 8002c94:	701a      	strb	r2, [r3, #0]
        (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 8002c96:	687b      	ldr	r3, [r7, #4]
 8002c98:	681b      	ldr	r3, [r3, #0]
 8002c9a:	68fa      	ldr	r2, [r7, #12]
 8002c9c:	b2d2      	uxtb	r2, r2
 8002c9e:	4611      	mov	r1, r2
 8002ca0:	4618      	mov	r0, r3
 8002ca2:	f003 fb7d 	bl	80063a0 <USB_HC_Halt>
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_NAK);
 8002ca6:	68fb      	ldr	r3, [r7, #12]
 8002ca8:	015a      	lsls	r2, r3, #5
 8002caa:	693b      	ldr	r3, [r7, #16]
 8002cac:	4413      	add	r3, r2
 8002cae:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002cb2:	461a      	mov	r2, r3
 8002cb4:	2310      	movs	r3, #16
 8002cb6:	6093      	str	r3, [r2, #8]
}
 8002cb8:	bf00      	nop
 8002cba:	3718      	adds	r7, #24
 8002cbc:	46bd      	mov	sp, r7
 8002cbe:	bd80      	pop	{r7, pc}

08002cc0 <HCD_HC_OUT_IRQHandler>:
  * @param  chnum Channel number.
  *         This parameter can be a value from 1 to 15
  * @retval none
  */
static void HCD_HC_OUT_IRQHandler(HCD_HandleTypeDef *hhcd, uint8_t chnum)
{
 8002cc0:	b580      	push	{r7, lr}
 8002cc2:	b088      	sub	sp, #32
 8002cc4:	af00      	add	r7, sp, #0
 8002cc6:	6078      	str	r0, [r7, #4]
 8002cc8:	460b      	mov	r3, r1
 8002cca:	70fb      	strb	r3, [r7, #3]
  USB_OTG_GlobalTypeDef *USBx = hhcd->Instance;
 8002ccc:	687b      	ldr	r3, [r7, #4]
 8002cce:	681b      	ldr	r3, [r3, #0]
 8002cd0:	61fb      	str	r3, [r7, #28]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8002cd2:	69fb      	ldr	r3, [r7, #28]
 8002cd4:	61bb      	str	r3, [r7, #24]
  uint32_t ch_num = (uint32_t)chnum;
 8002cd6:	78fb      	ldrb	r3, [r7, #3]
 8002cd8:	617b      	str	r3, [r7, #20]
  uint32_t tmpreg;
  uint32_t num_packets;

  if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_AHBERR) == USB_OTG_HCINT_AHBERR)
 8002cda:	697b      	ldr	r3, [r7, #20]
 8002cdc:	015a      	lsls	r2, r3, #5
 8002cde:	69bb      	ldr	r3, [r7, #24]
 8002ce0:	4413      	add	r3, r2
 8002ce2:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002ce6:	689b      	ldr	r3, [r3, #8]
 8002ce8:	f003 0304 	and.w	r3, r3, #4
 8002cec:	2b04      	cmp	r3, #4
 8002cee:	d11a      	bne.n	8002d26 <HCD_HC_OUT_IRQHandler+0x66>
  {
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_AHBERR);
 8002cf0:	697b      	ldr	r3, [r7, #20]
 8002cf2:	015a      	lsls	r2, r3, #5
 8002cf4:	69bb      	ldr	r3, [r7, #24]
 8002cf6:	4413      	add	r3, r2
 8002cf8:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002cfc:	461a      	mov	r2, r3
 8002cfe:	2304      	movs	r3, #4
 8002d00:	6093      	str	r3, [r2, #8]
    hhcd->hc[ch_num].state = HC_XACTERR;
 8002d02:	687a      	ldr	r2, [r7, #4]
 8002d04:	697b      	ldr	r3, [r7, #20]
 8002d06:	212c      	movs	r1, #44	; 0x2c
 8002d08:	fb01 f303 	mul.w	r3, r1, r3
 8002d0c:	4413      	add	r3, r2
 8002d0e:	3361      	adds	r3, #97	; 0x61
 8002d10:	2206      	movs	r2, #6
 8002d12:	701a      	strb	r2, [r3, #0]
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 8002d14:	687b      	ldr	r3, [r7, #4]
 8002d16:	681b      	ldr	r3, [r3, #0]
 8002d18:	697a      	ldr	r2, [r7, #20]
 8002d1a:	b2d2      	uxtb	r2, r2
 8002d1c:	4611      	mov	r1, r2
 8002d1e:	4618      	mov	r0, r3
 8002d20:	f003 fb3e 	bl	80063a0 <USB_HC_Halt>
  }
  else
  {
    /* ... */
  }
}
 8002d24:	e331      	b.n	800338a <HCD_HC_OUT_IRQHandler+0x6ca>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_ACK) == USB_OTG_HCINT_ACK)
 8002d26:	697b      	ldr	r3, [r7, #20]
 8002d28:	015a      	lsls	r2, r3, #5
 8002d2a:	69bb      	ldr	r3, [r7, #24]
 8002d2c:	4413      	add	r3, r2
 8002d2e:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002d32:	689b      	ldr	r3, [r3, #8]
 8002d34:	f003 0320 	and.w	r3, r3, #32
 8002d38:	2b20      	cmp	r3, #32
 8002d3a:	d12e      	bne.n	8002d9a <HCD_HC_OUT_IRQHandler+0xda>
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_ACK);
 8002d3c:	697b      	ldr	r3, [r7, #20]
 8002d3e:	015a      	lsls	r2, r3, #5
 8002d40:	69bb      	ldr	r3, [r7, #24]
 8002d42:	4413      	add	r3, r2
 8002d44:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002d48:	461a      	mov	r2, r3
 8002d4a:	2320      	movs	r3, #32
 8002d4c:	6093      	str	r3, [r2, #8]
    if (hhcd->hc[ch_num].do_ping == 1U)
 8002d4e:	687a      	ldr	r2, [r7, #4]
 8002d50:	697b      	ldr	r3, [r7, #20]
 8002d52:	212c      	movs	r1, #44	; 0x2c
 8002d54:	fb01 f303 	mul.w	r3, r1, r3
 8002d58:	4413      	add	r3, r2
 8002d5a:	333d      	adds	r3, #61	; 0x3d
 8002d5c:	781b      	ldrb	r3, [r3, #0]
 8002d5e:	2b01      	cmp	r3, #1
 8002d60:	f040 8313 	bne.w	800338a <HCD_HC_OUT_IRQHandler+0x6ca>
      hhcd->hc[ch_num].do_ping = 0U;
 8002d64:	687a      	ldr	r2, [r7, #4]
 8002d66:	697b      	ldr	r3, [r7, #20]
 8002d68:	212c      	movs	r1, #44	; 0x2c
 8002d6a:	fb01 f303 	mul.w	r3, r1, r3
 8002d6e:	4413      	add	r3, r2
 8002d70:	333d      	adds	r3, #61	; 0x3d
 8002d72:	2200      	movs	r2, #0
 8002d74:	701a      	strb	r2, [r3, #0]
      hhcd->hc[ch_num].urb_state = URB_NOTREADY;
 8002d76:	687a      	ldr	r2, [r7, #4]
 8002d78:	697b      	ldr	r3, [r7, #20]
 8002d7a:	212c      	movs	r1, #44	; 0x2c
 8002d7c:	fb01 f303 	mul.w	r3, r1, r3
 8002d80:	4413      	add	r3, r2
 8002d82:	3360      	adds	r3, #96	; 0x60
 8002d84:	2202      	movs	r2, #2
 8002d86:	701a      	strb	r2, [r3, #0]
      (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 8002d88:	687b      	ldr	r3, [r7, #4]
 8002d8a:	681b      	ldr	r3, [r3, #0]
 8002d8c:	697a      	ldr	r2, [r7, #20]
 8002d8e:	b2d2      	uxtb	r2, r2
 8002d90:	4611      	mov	r1, r2
 8002d92:	4618      	mov	r0, r3
 8002d94:	f003 fb04 	bl	80063a0 <USB_HC_Halt>
}
 8002d98:	e2f7      	b.n	800338a <HCD_HC_OUT_IRQHandler+0x6ca>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_FRMOR) == USB_OTG_HCINT_FRMOR)
 8002d9a:	697b      	ldr	r3, [r7, #20]
 8002d9c:	015a      	lsls	r2, r3, #5
 8002d9e:	69bb      	ldr	r3, [r7, #24]
 8002da0:	4413      	add	r3, r2
 8002da2:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002da6:	689b      	ldr	r3, [r3, #8]
 8002da8:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8002dac:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8002db0:	d112      	bne.n	8002dd8 <HCD_HC_OUT_IRQHandler+0x118>
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_FRMOR);
 8002db2:	697b      	ldr	r3, [r7, #20]
 8002db4:	015a      	lsls	r2, r3, #5
 8002db6:	69bb      	ldr	r3, [r7, #24]
 8002db8:	4413      	add	r3, r2
 8002dba:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002dbe:	461a      	mov	r2, r3
 8002dc0:	f44f 7300 	mov.w	r3, #512	; 0x200
 8002dc4:	6093      	str	r3, [r2, #8]
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 8002dc6:	687b      	ldr	r3, [r7, #4]
 8002dc8:	681b      	ldr	r3, [r3, #0]
 8002dca:	697a      	ldr	r2, [r7, #20]
 8002dcc:	b2d2      	uxtb	r2, r2
 8002dce:	4611      	mov	r1, r2
 8002dd0:	4618      	mov	r0, r3
 8002dd2:	f003 fae5 	bl	80063a0 <USB_HC_Halt>
}
 8002dd6:	e2d8      	b.n	800338a <HCD_HC_OUT_IRQHandler+0x6ca>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_XFRC) == USB_OTG_HCINT_XFRC)
 8002dd8:	697b      	ldr	r3, [r7, #20]
 8002dda:	015a      	lsls	r2, r3, #5
 8002ddc:	69bb      	ldr	r3, [r7, #24]
 8002dde:	4413      	add	r3, r2
 8002de0:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002de4:	689b      	ldr	r3, [r3, #8]
 8002de6:	f003 0301 	and.w	r3, r3, #1
 8002dea:	2b01      	cmp	r3, #1
 8002dec:	d140      	bne.n	8002e70 <HCD_HC_OUT_IRQHandler+0x1b0>
    hhcd->hc[ch_num].ErrCnt = 0U;
 8002dee:	687a      	ldr	r2, [r7, #4]
 8002df0:	697b      	ldr	r3, [r7, #20]
 8002df2:	212c      	movs	r1, #44	; 0x2c
 8002df4:	fb01 f303 	mul.w	r3, r1, r3
 8002df8:	4413      	add	r3, r2
 8002dfa:	335c      	adds	r3, #92	; 0x5c
 8002dfc:	2200      	movs	r2, #0
 8002dfe:	601a      	str	r2, [r3, #0]
    if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_NYET) == USB_OTG_HCINT_NYET)
 8002e00:	697b      	ldr	r3, [r7, #20]
 8002e02:	015a      	lsls	r2, r3, #5
 8002e04:	69bb      	ldr	r3, [r7, #24]
 8002e06:	4413      	add	r3, r2
 8002e08:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002e0c:	689b      	ldr	r3, [r3, #8]
 8002e0e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002e12:	2b40      	cmp	r3, #64	; 0x40
 8002e14:	d111      	bne.n	8002e3a <HCD_HC_OUT_IRQHandler+0x17a>
      hhcd->hc[ch_num].do_ping = 1U;
 8002e16:	687a      	ldr	r2, [r7, #4]
 8002e18:	697b      	ldr	r3, [r7, #20]
 8002e1a:	212c      	movs	r1, #44	; 0x2c
 8002e1c:	fb01 f303 	mul.w	r3, r1, r3
 8002e20:	4413      	add	r3, r2
 8002e22:	333d      	adds	r3, #61	; 0x3d
 8002e24:	2201      	movs	r2, #1
 8002e26:	701a      	strb	r2, [r3, #0]
      __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_NYET);
 8002e28:	697b      	ldr	r3, [r7, #20]
 8002e2a:	015a      	lsls	r2, r3, #5
 8002e2c:	69bb      	ldr	r3, [r7, #24]
 8002e2e:	4413      	add	r3, r2
 8002e30:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002e34:	461a      	mov	r2, r3
 8002e36:	2340      	movs	r3, #64	; 0x40
 8002e38:	6093      	str	r3, [r2, #8]
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_XFRC);
 8002e3a:	697b      	ldr	r3, [r7, #20]
 8002e3c:	015a      	lsls	r2, r3, #5
 8002e3e:	69bb      	ldr	r3, [r7, #24]
 8002e40:	4413      	add	r3, r2
 8002e42:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002e46:	461a      	mov	r2, r3
 8002e48:	2301      	movs	r3, #1
 8002e4a:	6093      	str	r3, [r2, #8]
    hhcd->hc[ch_num].state = HC_XFRC;
 8002e4c:	687a      	ldr	r2, [r7, #4]
 8002e4e:	697b      	ldr	r3, [r7, #20]
 8002e50:	212c      	movs	r1, #44	; 0x2c
 8002e52:	fb01 f303 	mul.w	r3, r1, r3
 8002e56:	4413      	add	r3, r2
 8002e58:	3361      	adds	r3, #97	; 0x61
 8002e5a:	2201      	movs	r2, #1
 8002e5c:	701a      	strb	r2, [r3, #0]
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 8002e5e:	687b      	ldr	r3, [r7, #4]
 8002e60:	681b      	ldr	r3, [r3, #0]
 8002e62:	697a      	ldr	r2, [r7, #20]
 8002e64:	b2d2      	uxtb	r2, r2
 8002e66:	4611      	mov	r1, r2
 8002e68:	4618      	mov	r0, r3
 8002e6a:	f003 fa99 	bl	80063a0 <USB_HC_Halt>
}
 8002e6e:	e28c      	b.n	800338a <HCD_HC_OUT_IRQHandler+0x6ca>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_NYET) == USB_OTG_HCINT_NYET)
 8002e70:	697b      	ldr	r3, [r7, #20]
 8002e72:	015a      	lsls	r2, r3, #5
 8002e74:	69bb      	ldr	r3, [r7, #24]
 8002e76:	4413      	add	r3, r2
 8002e78:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002e7c:	689b      	ldr	r3, [r3, #8]
 8002e7e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002e82:	2b40      	cmp	r3, #64	; 0x40
 8002e84:	d12c      	bne.n	8002ee0 <HCD_HC_OUT_IRQHandler+0x220>
    hhcd->hc[ch_num].state = HC_NYET;
 8002e86:	687a      	ldr	r2, [r7, #4]
 8002e88:	697b      	ldr	r3, [r7, #20]
 8002e8a:	212c      	movs	r1, #44	; 0x2c
 8002e8c:	fb01 f303 	mul.w	r3, r1, r3
 8002e90:	4413      	add	r3, r2
 8002e92:	3361      	adds	r3, #97	; 0x61
 8002e94:	2204      	movs	r2, #4
 8002e96:	701a      	strb	r2, [r3, #0]
    hhcd->hc[ch_num].do_ping = 1U;
 8002e98:	687a      	ldr	r2, [r7, #4]
 8002e9a:	697b      	ldr	r3, [r7, #20]
 8002e9c:	212c      	movs	r1, #44	; 0x2c
 8002e9e:	fb01 f303 	mul.w	r3, r1, r3
 8002ea2:	4413      	add	r3, r2
 8002ea4:	333d      	adds	r3, #61	; 0x3d
 8002ea6:	2201      	movs	r2, #1
 8002ea8:	701a      	strb	r2, [r3, #0]
    hhcd->hc[ch_num].ErrCnt = 0U;
 8002eaa:	687a      	ldr	r2, [r7, #4]
 8002eac:	697b      	ldr	r3, [r7, #20]
 8002eae:	212c      	movs	r1, #44	; 0x2c
 8002eb0:	fb01 f303 	mul.w	r3, r1, r3
 8002eb4:	4413      	add	r3, r2
 8002eb6:	335c      	adds	r3, #92	; 0x5c
 8002eb8:	2200      	movs	r2, #0
 8002eba:	601a      	str	r2, [r3, #0]
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 8002ebc:	687b      	ldr	r3, [r7, #4]
 8002ebe:	681b      	ldr	r3, [r3, #0]
 8002ec0:	697a      	ldr	r2, [r7, #20]
 8002ec2:	b2d2      	uxtb	r2, r2
 8002ec4:	4611      	mov	r1, r2
 8002ec6:	4618      	mov	r0, r3
 8002ec8:	f003 fa6a 	bl	80063a0 <USB_HC_Halt>
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_NYET);
 8002ecc:	697b      	ldr	r3, [r7, #20]
 8002ece:	015a      	lsls	r2, r3, #5
 8002ed0:	69bb      	ldr	r3, [r7, #24]
 8002ed2:	4413      	add	r3, r2
 8002ed4:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002ed8:	461a      	mov	r2, r3
 8002eda:	2340      	movs	r3, #64	; 0x40
 8002edc:	6093      	str	r3, [r2, #8]
}
 8002ede:	e254      	b.n	800338a <HCD_HC_OUT_IRQHandler+0x6ca>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_STALL) == USB_OTG_HCINT_STALL)
 8002ee0:	697b      	ldr	r3, [r7, #20]
 8002ee2:	015a      	lsls	r2, r3, #5
 8002ee4:	69bb      	ldr	r3, [r7, #24]
 8002ee6:	4413      	add	r3, r2
 8002ee8:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002eec:	689b      	ldr	r3, [r3, #8]
 8002eee:	f003 0308 	and.w	r3, r3, #8
 8002ef2:	2b08      	cmp	r3, #8
 8002ef4:	d11a      	bne.n	8002f2c <HCD_HC_OUT_IRQHandler+0x26c>
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_STALL);
 8002ef6:	697b      	ldr	r3, [r7, #20]
 8002ef8:	015a      	lsls	r2, r3, #5
 8002efa:	69bb      	ldr	r3, [r7, #24]
 8002efc:	4413      	add	r3, r2
 8002efe:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002f02:	461a      	mov	r2, r3
 8002f04:	2308      	movs	r3, #8
 8002f06:	6093      	str	r3, [r2, #8]
    hhcd->hc[ch_num].state = HC_STALL;
 8002f08:	687a      	ldr	r2, [r7, #4]
 8002f0a:	697b      	ldr	r3, [r7, #20]
 8002f0c:	212c      	movs	r1, #44	; 0x2c
 8002f0e:	fb01 f303 	mul.w	r3, r1, r3
 8002f12:	4413      	add	r3, r2
 8002f14:	3361      	adds	r3, #97	; 0x61
 8002f16:	2205      	movs	r2, #5
 8002f18:	701a      	strb	r2, [r3, #0]
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 8002f1a:	687b      	ldr	r3, [r7, #4]
 8002f1c:	681b      	ldr	r3, [r3, #0]
 8002f1e:	697a      	ldr	r2, [r7, #20]
 8002f20:	b2d2      	uxtb	r2, r2
 8002f22:	4611      	mov	r1, r2
 8002f24:	4618      	mov	r0, r3
 8002f26:	f003 fa3b 	bl	80063a0 <USB_HC_Halt>
}
 8002f2a:	e22e      	b.n	800338a <HCD_HC_OUT_IRQHandler+0x6ca>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_NAK) == USB_OTG_HCINT_NAK)
 8002f2c:	697b      	ldr	r3, [r7, #20]
 8002f2e:	015a      	lsls	r2, r3, #5
 8002f30:	69bb      	ldr	r3, [r7, #24]
 8002f32:	4413      	add	r3, r2
 8002f34:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002f38:	689b      	ldr	r3, [r3, #8]
 8002f3a:	f003 0310 	and.w	r3, r3, #16
 8002f3e:	2b10      	cmp	r3, #16
 8002f40:	d140      	bne.n	8002fc4 <HCD_HC_OUT_IRQHandler+0x304>
    hhcd->hc[ch_num].ErrCnt = 0U;
 8002f42:	687a      	ldr	r2, [r7, #4]
 8002f44:	697b      	ldr	r3, [r7, #20]
 8002f46:	212c      	movs	r1, #44	; 0x2c
 8002f48:	fb01 f303 	mul.w	r3, r1, r3
 8002f4c:	4413      	add	r3, r2
 8002f4e:	335c      	adds	r3, #92	; 0x5c
 8002f50:	2200      	movs	r2, #0
 8002f52:	601a      	str	r2, [r3, #0]
    hhcd->hc[ch_num].state = HC_NAK;
 8002f54:	687a      	ldr	r2, [r7, #4]
 8002f56:	697b      	ldr	r3, [r7, #20]
 8002f58:	212c      	movs	r1, #44	; 0x2c
 8002f5a:	fb01 f303 	mul.w	r3, r1, r3
 8002f5e:	4413      	add	r3, r2
 8002f60:	3361      	adds	r3, #97	; 0x61
 8002f62:	2203      	movs	r2, #3
 8002f64:	701a      	strb	r2, [r3, #0]
    if (hhcd->hc[ch_num].do_ping == 0U)
 8002f66:	687a      	ldr	r2, [r7, #4]
 8002f68:	697b      	ldr	r3, [r7, #20]
 8002f6a:	212c      	movs	r1, #44	; 0x2c
 8002f6c:	fb01 f303 	mul.w	r3, r1, r3
 8002f70:	4413      	add	r3, r2
 8002f72:	333d      	adds	r3, #61	; 0x3d
 8002f74:	781b      	ldrb	r3, [r3, #0]
 8002f76:	2b00      	cmp	r3, #0
 8002f78:	d112      	bne.n	8002fa0 <HCD_HC_OUT_IRQHandler+0x2e0>
      if (hhcd->hc[ch_num].speed == HCD_DEVICE_SPEED_HIGH)
 8002f7a:	687a      	ldr	r2, [r7, #4]
 8002f7c:	697b      	ldr	r3, [r7, #20]
 8002f7e:	212c      	movs	r1, #44	; 0x2c
 8002f80:	fb01 f303 	mul.w	r3, r1, r3
 8002f84:	4413      	add	r3, r2
 8002f86:	333c      	adds	r3, #60	; 0x3c
 8002f88:	781b      	ldrb	r3, [r3, #0]
 8002f8a:	2b00      	cmp	r3, #0
 8002f8c:	d108      	bne.n	8002fa0 <HCD_HC_OUT_IRQHandler+0x2e0>
        hhcd->hc[ch_num].do_ping = 1U;
 8002f8e:	687a      	ldr	r2, [r7, #4]
 8002f90:	697b      	ldr	r3, [r7, #20]
 8002f92:	212c      	movs	r1, #44	; 0x2c
 8002f94:	fb01 f303 	mul.w	r3, r1, r3
 8002f98:	4413      	add	r3, r2
 8002f9a:	333d      	adds	r3, #61	; 0x3d
 8002f9c:	2201      	movs	r2, #1
 8002f9e:	701a      	strb	r2, [r3, #0]
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 8002fa0:	687b      	ldr	r3, [r7, #4]
 8002fa2:	681b      	ldr	r3, [r3, #0]
 8002fa4:	697a      	ldr	r2, [r7, #20]
 8002fa6:	b2d2      	uxtb	r2, r2
 8002fa8:	4611      	mov	r1, r2
 8002faa:	4618      	mov	r0, r3
 8002fac:	f003 f9f8 	bl	80063a0 <USB_HC_Halt>
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_NAK);
 8002fb0:	697b      	ldr	r3, [r7, #20]
 8002fb2:	015a      	lsls	r2, r3, #5
 8002fb4:	69bb      	ldr	r3, [r7, #24]
 8002fb6:	4413      	add	r3, r2
 8002fb8:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002fbc:	461a      	mov	r2, r3
 8002fbe:	2310      	movs	r3, #16
 8002fc0:	6093      	str	r3, [r2, #8]
}
 8002fc2:	e1e2      	b.n	800338a <HCD_HC_OUT_IRQHandler+0x6ca>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_TXERR) == USB_OTG_HCINT_TXERR)
 8002fc4:	697b      	ldr	r3, [r7, #20]
 8002fc6:	015a      	lsls	r2, r3, #5
 8002fc8:	69bb      	ldr	r3, [r7, #24]
 8002fca:	4413      	add	r3, r2
 8002fcc:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002fd0:	689b      	ldr	r3, [r3, #8]
 8002fd2:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002fd6:	2b80      	cmp	r3, #128	; 0x80
 8002fd8:	d164      	bne.n	80030a4 <HCD_HC_OUT_IRQHandler+0x3e4>
    if (hhcd->Init.dma_enable == 0U)
 8002fda:	687b      	ldr	r3, [r7, #4]
 8002fdc:	691b      	ldr	r3, [r3, #16]
 8002fde:	2b00      	cmp	r3, #0
 8002fe0:	d111      	bne.n	8003006 <HCD_HC_OUT_IRQHandler+0x346>
      hhcd->hc[ch_num].state = HC_XACTERR;
 8002fe2:	687a      	ldr	r2, [r7, #4]
 8002fe4:	697b      	ldr	r3, [r7, #20]
 8002fe6:	212c      	movs	r1, #44	; 0x2c
 8002fe8:	fb01 f303 	mul.w	r3, r1, r3
 8002fec:	4413      	add	r3, r2
 8002fee:	3361      	adds	r3, #97	; 0x61
 8002ff0:	2206      	movs	r2, #6
 8002ff2:	701a      	strb	r2, [r3, #0]
      (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 8002ff4:	687b      	ldr	r3, [r7, #4]
 8002ff6:	681b      	ldr	r3, [r3, #0]
 8002ff8:	697a      	ldr	r2, [r7, #20]
 8002ffa:	b2d2      	uxtb	r2, r2
 8002ffc:	4611      	mov	r1, r2
 8002ffe:	4618      	mov	r0, r3
 8003000:	f003 f9ce 	bl	80063a0 <USB_HC_Halt>
 8003004:	e044      	b.n	8003090 <HCD_HC_OUT_IRQHandler+0x3d0>
      hhcd->hc[ch_num].ErrCnt++;
 8003006:	687a      	ldr	r2, [r7, #4]
 8003008:	697b      	ldr	r3, [r7, #20]
 800300a:	212c      	movs	r1, #44	; 0x2c
 800300c:	fb01 f303 	mul.w	r3, r1, r3
 8003010:	4413      	add	r3, r2
 8003012:	335c      	adds	r3, #92	; 0x5c
 8003014:	681b      	ldr	r3, [r3, #0]
 8003016:	1c5a      	adds	r2, r3, #1
 8003018:	6879      	ldr	r1, [r7, #4]
 800301a:	697b      	ldr	r3, [r7, #20]
 800301c:	202c      	movs	r0, #44	; 0x2c
 800301e:	fb00 f303 	mul.w	r3, r0, r3
 8003022:	440b      	add	r3, r1
 8003024:	335c      	adds	r3, #92	; 0x5c
 8003026:	601a      	str	r2, [r3, #0]
      if (hhcd->hc[ch_num].ErrCnt > 2U)
 8003028:	687a      	ldr	r2, [r7, #4]
 800302a:	697b      	ldr	r3, [r7, #20]
 800302c:	212c      	movs	r1, #44	; 0x2c
 800302e:	fb01 f303 	mul.w	r3, r1, r3
 8003032:	4413      	add	r3, r2
 8003034:	335c      	adds	r3, #92	; 0x5c
 8003036:	681b      	ldr	r3, [r3, #0]
 8003038:	2b02      	cmp	r3, #2
 800303a:	d920      	bls.n	800307e <HCD_HC_OUT_IRQHandler+0x3be>
        hhcd->hc[ch_num].ErrCnt = 0U;
 800303c:	687a      	ldr	r2, [r7, #4]
 800303e:	697b      	ldr	r3, [r7, #20]
 8003040:	212c      	movs	r1, #44	; 0x2c
 8003042:	fb01 f303 	mul.w	r3, r1, r3
 8003046:	4413      	add	r3, r2
 8003048:	335c      	adds	r3, #92	; 0x5c
 800304a:	2200      	movs	r2, #0
 800304c:	601a      	str	r2, [r3, #0]
        hhcd->hc[ch_num].urb_state = URB_ERROR;
 800304e:	687a      	ldr	r2, [r7, #4]
 8003050:	697b      	ldr	r3, [r7, #20]
 8003052:	212c      	movs	r1, #44	; 0x2c
 8003054:	fb01 f303 	mul.w	r3, r1, r3
 8003058:	4413      	add	r3, r2
 800305a:	3360      	adds	r3, #96	; 0x60
 800305c:	2204      	movs	r2, #4
 800305e:	701a      	strb	r2, [r3, #0]
        HAL_HCD_HC_NotifyURBChange_Callback(hhcd, (uint8_t)ch_num, hhcd->hc[ch_num].urb_state);
 8003060:	697b      	ldr	r3, [r7, #20]
 8003062:	b2d9      	uxtb	r1, r3
 8003064:	687a      	ldr	r2, [r7, #4]
 8003066:	697b      	ldr	r3, [r7, #20]
 8003068:	202c      	movs	r0, #44	; 0x2c
 800306a:	fb00 f303 	mul.w	r3, r0, r3
 800306e:	4413      	add	r3, r2
 8003070:	3360      	adds	r3, #96	; 0x60
 8003072:	781b      	ldrb	r3, [r3, #0]
 8003074:	461a      	mov	r2, r3
 8003076:	6878      	ldr	r0, [r7, #4]
 8003078:	f007 f836 	bl	800a0e8 <HAL_HCD_HC_NotifyURBChange_Callback>
 800307c:	e008      	b.n	8003090 <HCD_HC_OUT_IRQHandler+0x3d0>
        hhcd->hc[ch_num].urb_state = URB_NOTREADY;
 800307e:	687a      	ldr	r2, [r7, #4]
 8003080:	697b      	ldr	r3, [r7, #20]
 8003082:	212c      	movs	r1, #44	; 0x2c
 8003084:	fb01 f303 	mul.w	r3, r1, r3
 8003088:	4413      	add	r3, r2
 800308a:	3360      	adds	r3, #96	; 0x60
 800308c:	2202      	movs	r2, #2
 800308e:	701a      	strb	r2, [r3, #0]
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_TXERR);
 8003090:	697b      	ldr	r3, [r7, #20]
 8003092:	015a      	lsls	r2, r3, #5
 8003094:	69bb      	ldr	r3, [r7, #24]
 8003096:	4413      	add	r3, r2
 8003098:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800309c:	461a      	mov	r2, r3
 800309e:	2380      	movs	r3, #128	; 0x80
 80030a0:	6093      	str	r3, [r2, #8]
}
 80030a2:	e172      	b.n	800338a <HCD_HC_OUT_IRQHandler+0x6ca>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_DTERR) == USB_OTG_HCINT_DTERR)
 80030a4:	697b      	ldr	r3, [r7, #20]
 80030a6:	015a      	lsls	r2, r3, #5
 80030a8:	69bb      	ldr	r3, [r7, #24]
 80030aa:	4413      	add	r3, r2
 80030ac:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80030b0:	689b      	ldr	r3, [r3, #8]
 80030b2:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80030b6:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80030ba:	d11b      	bne.n	80030f4 <HCD_HC_OUT_IRQHandler+0x434>
    hhcd->hc[ch_num].state = HC_DATATGLERR;
 80030bc:	687a      	ldr	r2, [r7, #4]
 80030be:	697b      	ldr	r3, [r7, #20]
 80030c0:	212c      	movs	r1, #44	; 0x2c
 80030c2:	fb01 f303 	mul.w	r3, r1, r3
 80030c6:	4413      	add	r3, r2
 80030c8:	3361      	adds	r3, #97	; 0x61
 80030ca:	2208      	movs	r2, #8
 80030cc:	701a      	strb	r2, [r3, #0]
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 80030ce:	687b      	ldr	r3, [r7, #4]
 80030d0:	681b      	ldr	r3, [r3, #0]
 80030d2:	697a      	ldr	r2, [r7, #20]
 80030d4:	b2d2      	uxtb	r2, r2
 80030d6:	4611      	mov	r1, r2
 80030d8:	4618      	mov	r0, r3
 80030da:	f003 f961 	bl	80063a0 <USB_HC_Halt>
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_DTERR);
 80030de:	697b      	ldr	r3, [r7, #20]
 80030e0:	015a      	lsls	r2, r3, #5
 80030e2:	69bb      	ldr	r3, [r7, #24]
 80030e4:	4413      	add	r3, r2
 80030e6:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80030ea:	461a      	mov	r2, r3
 80030ec:	f44f 6380 	mov.w	r3, #1024	; 0x400
 80030f0:	6093      	str	r3, [r2, #8]
}
 80030f2:	e14a      	b.n	800338a <HCD_HC_OUT_IRQHandler+0x6ca>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_CHH) == USB_OTG_HCINT_CHH)
 80030f4:	697b      	ldr	r3, [r7, #20]
 80030f6:	015a      	lsls	r2, r3, #5
 80030f8:	69bb      	ldr	r3, [r7, #24]
 80030fa:	4413      	add	r3, r2
 80030fc:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8003100:	689b      	ldr	r3, [r3, #8]
 8003102:	f003 0302 	and.w	r3, r3, #2
 8003106:	2b02      	cmp	r3, #2
 8003108:	f040 813f 	bne.w	800338a <HCD_HC_OUT_IRQHandler+0x6ca>
    if (hhcd->hc[ch_num].state == HC_XFRC)
 800310c:	687a      	ldr	r2, [r7, #4]
 800310e:	697b      	ldr	r3, [r7, #20]
 8003110:	212c      	movs	r1, #44	; 0x2c
 8003112:	fb01 f303 	mul.w	r3, r1, r3
 8003116:	4413      	add	r3, r2
 8003118:	3361      	adds	r3, #97	; 0x61
 800311a:	781b      	ldrb	r3, [r3, #0]
 800311c:	2b01      	cmp	r3, #1
 800311e:	d17d      	bne.n	800321c <HCD_HC_OUT_IRQHandler+0x55c>
      hhcd->hc[ch_num].urb_state  = URB_DONE;
 8003120:	687a      	ldr	r2, [r7, #4]
 8003122:	697b      	ldr	r3, [r7, #20]
 8003124:	212c      	movs	r1, #44	; 0x2c
 8003126:	fb01 f303 	mul.w	r3, r1, r3
 800312a:	4413      	add	r3, r2
 800312c:	3360      	adds	r3, #96	; 0x60
 800312e:	2201      	movs	r2, #1
 8003130:	701a      	strb	r2, [r3, #0]
      if ((hhcd->hc[ch_num].ep_type == EP_TYPE_BULK) ||
 8003132:	687a      	ldr	r2, [r7, #4]
 8003134:	697b      	ldr	r3, [r7, #20]
 8003136:	212c      	movs	r1, #44	; 0x2c
 8003138:	fb01 f303 	mul.w	r3, r1, r3
 800313c:	4413      	add	r3, r2
 800313e:	333f      	adds	r3, #63	; 0x3f
 8003140:	781b      	ldrb	r3, [r3, #0]
 8003142:	2b02      	cmp	r3, #2
 8003144:	d00a      	beq.n	800315c <HCD_HC_OUT_IRQHandler+0x49c>
          (hhcd->hc[ch_num].ep_type == EP_TYPE_INTR))
 8003146:	687a      	ldr	r2, [r7, #4]
 8003148:	697b      	ldr	r3, [r7, #20]
 800314a:	212c      	movs	r1, #44	; 0x2c
 800314c:	fb01 f303 	mul.w	r3, r1, r3
 8003150:	4413      	add	r3, r2
 8003152:	333f      	adds	r3, #63	; 0x3f
 8003154:	781b      	ldrb	r3, [r3, #0]
      if ((hhcd->hc[ch_num].ep_type == EP_TYPE_BULK) ||
 8003156:	2b03      	cmp	r3, #3
 8003158:	f040 8100 	bne.w	800335c <HCD_HC_OUT_IRQHandler+0x69c>
        if (hhcd->Init.dma_enable == 0U)
 800315c:	687b      	ldr	r3, [r7, #4]
 800315e:	691b      	ldr	r3, [r3, #16]
 8003160:	2b00      	cmp	r3, #0
 8003162:	d113      	bne.n	800318c <HCD_HC_OUT_IRQHandler+0x4cc>
          hhcd->hc[ch_num].toggle_out ^= 1U;
 8003164:	687a      	ldr	r2, [r7, #4]
 8003166:	697b      	ldr	r3, [r7, #20]
 8003168:	212c      	movs	r1, #44	; 0x2c
 800316a:	fb01 f303 	mul.w	r3, r1, r3
 800316e:	4413      	add	r3, r2
 8003170:	3355      	adds	r3, #85	; 0x55
 8003172:	781b      	ldrb	r3, [r3, #0]
 8003174:	f083 0301 	eor.w	r3, r3, #1
 8003178:	b2d8      	uxtb	r0, r3
 800317a:	687a      	ldr	r2, [r7, #4]
 800317c:	697b      	ldr	r3, [r7, #20]
 800317e:	212c      	movs	r1, #44	; 0x2c
 8003180:	fb01 f303 	mul.w	r3, r1, r3
 8003184:	4413      	add	r3, r2
 8003186:	3355      	adds	r3, #85	; 0x55
 8003188:	4602      	mov	r2, r0
 800318a:	701a      	strb	r2, [r3, #0]
        if ((hhcd->Init.dma_enable == 1U) && (hhcd->hc[ch_num].xfer_len > 0U))
 800318c:	687b      	ldr	r3, [r7, #4]
 800318e:	691b      	ldr	r3, [r3, #16]
 8003190:	2b01      	cmp	r3, #1
 8003192:	f040 80e3 	bne.w	800335c <HCD_HC_OUT_IRQHandler+0x69c>
 8003196:	687a      	ldr	r2, [r7, #4]
 8003198:	697b      	ldr	r3, [r7, #20]
 800319a:	212c      	movs	r1, #44	; 0x2c
 800319c:	fb01 f303 	mul.w	r3, r1, r3
 80031a0:	4413      	add	r3, r2
 80031a2:	334c      	adds	r3, #76	; 0x4c
 80031a4:	681b      	ldr	r3, [r3, #0]
 80031a6:	2b00      	cmp	r3, #0
 80031a8:	f000 80d8 	beq.w	800335c <HCD_HC_OUT_IRQHandler+0x69c>
          num_packets = (hhcd->hc[ch_num].xfer_len + hhcd->hc[ch_num].max_packet - 1U) / hhcd->hc[ch_num].max_packet;
 80031ac:	687a      	ldr	r2, [r7, #4]
 80031ae:	697b      	ldr	r3, [r7, #20]
 80031b0:	212c      	movs	r1, #44	; 0x2c
 80031b2:	fb01 f303 	mul.w	r3, r1, r3
 80031b6:	4413      	add	r3, r2
 80031b8:	334c      	adds	r3, #76	; 0x4c
 80031ba:	681b      	ldr	r3, [r3, #0]
 80031bc:	6879      	ldr	r1, [r7, #4]
 80031be:	697a      	ldr	r2, [r7, #20]
 80031c0:	202c      	movs	r0, #44	; 0x2c
 80031c2:	fb00 f202 	mul.w	r2, r0, r2
 80031c6:	440a      	add	r2, r1
 80031c8:	3240      	adds	r2, #64	; 0x40
 80031ca:	8812      	ldrh	r2, [r2, #0]
 80031cc:	4413      	add	r3, r2
 80031ce:	3b01      	subs	r3, #1
 80031d0:	6879      	ldr	r1, [r7, #4]
 80031d2:	697a      	ldr	r2, [r7, #20]
 80031d4:	202c      	movs	r0, #44	; 0x2c
 80031d6:	fb00 f202 	mul.w	r2, r0, r2
 80031da:	440a      	add	r2, r1
 80031dc:	3240      	adds	r2, #64	; 0x40
 80031de:	8812      	ldrh	r2, [r2, #0]
 80031e0:	fbb3 f3f2 	udiv	r3, r3, r2
 80031e4:	60fb      	str	r3, [r7, #12]
          if ((num_packets & 1U) != 0U)
 80031e6:	68fb      	ldr	r3, [r7, #12]
 80031e8:	f003 0301 	and.w	r3, r3, #1
 80031ec:	2b00      	cmp	r3, #0
 80031ee:	f000 80b5 	beq.w	800335c <HCD_HC_OUT_IRQHandler+0x69c>
            hhcd->hc[ch_num].toggle_out ^= 1U;
 80031f2:	687a      	ldr	r2, [r7, #4]
 80031f4:	697b      	ldr	r3, [r7, #20]
 80031f6:	212c      	movs	r1, #44	; 0x2c
 80031f8:	fb01 f303 	mul.w	r3, r1, r3
 80031fc:	4413      	add	r3, r2
 80031fe:	3355      	adds	r3, #85	; 0x55
 8003200:	781b      	ldrb	r3, [r3, #0]
 8003202:	f083 0301 	eor.w	r3, r3, #1
 8003206:	b2d8      	uxtb	r0, r3
 8003208:	687a      	ldr	r2, [r7, #4]
 800320a:	697b      	ldr	r3, [r7, #20]
 800320c:	212c      	movs	r1, #44	; 0x2c
 800320e:	fb01 f303 	mul.w	r3, r1, r3
 8003212:	4413      	add	r3, r2
 8003214:	3355      	adds	r3, #85	; 0x55
 8003216:	4602      	mov	r2, r0
 8003218:	701a      	strb	r2, [r3, #0]
 800321a:	e09f      	b.n	800335c <HCD_HC_OUT_IRQHandler+0x69c>
    else if (hhcd->hc[ch_num].state == HC_NAK)
 800321c:	687a      	ldr	r2, [r7, #4]
 800321e:	697b      	ldr	r3, [r7, #20]
 8003220:	212c      	movs	r1, #44	; 0x2c
 8003222:	fb01 f303 	mul.w	r3, r1, r3
 8003226:	4413      	add	r3, r2
 8003228:	3361      	adds	r3, #97	; 0x61
 800322a:	781b      	ldrb	r3, [r3, #0]
 800322c:	2b03      	cmp	r3, #3
 800322e:	d109      	bne.n	8003244 <HCD_HC_OUT_IRQHandler+0x584>
      hhcd->hc[ch_num].urb_state = URB_NOTREADY;
 8003230:	687a      	ldr	r2, [r7, #4]
 8003232:	697b      	ldr	r3, [r7, #20]
 8003234:	212c      	movs	r1, #44	; 0x2c
 8003236:	fb01 f303 	mul.w	r3, r1, r3
 800323a:	4413      	add	r3, r2
 800323c:	3360      	adds	r3, #96	; 0x60
 800323e:	2202      	movs	r2, #2
 8003240:	701a      	strb	r2, [r3, #0]
 8003242:	e08b      	b.n	800335c <HCD_HC_OUT_IRQHandler+0x69c>
    else if (hhcd->hc[ch_num].state == HC_NYET)
 8003244:	687a      	ldr	r2, [r7, #4]
 8003246:	697b      	ldr	r3, [r7, #20]
 8003248:	212c      	movs	r1, #44	; 0x2c
 800324a:	fb01 f303 	mul.w	r3, r1, r3
 800324e:	4413      	add	r3, r2
 8003250:	3361      	adds	r3, #97	; 0x61
 8003252:	781b      	ldrb	r3, [r3, #0]
 8003254:	2b04      	cmp	r3, #4
 8003256:	d109      	bne.n	800326c <HCD_HC_OUT_IRQHandler+0x5ac>
      hhcd->hc[ch_num].urb_state  = URB_NOTREADY;
 8003258:	687a      	ldr	r2, [r7, #4]
 800325a:	697b      	ldr	r3, [r7, #20]
 800325c:	212c      	movs	r1, #44	; 0x2c
 800325e:	fb01 f303 	mul.w	r3, r1, r3
 8003262:	4413      	add	r3, r2
 8003264:	3360      	adds	r3, #96	; 0x60
 8003266:	2202      	movs	r2, #2
 8003268:	701a      	strb	r2, [r3, #0]
 800326a:	e077      	b.n	800335c <HCD_HC_OUT_IRQHandler+0x69c>
    else if (hhcd->hc[ch_num].state == HC_STALL)
 800326c:	687a      	ldr	r2, [r7, #4]
 800326e:	697b      	ldr	r3, [r7, #20]
 8003270:	212c      	movs	r1, #44	; 0x2c
 8003272:	fb01 f303 	mul.w	r3, r1, r3
 8003276:	4413      	add	r3, r2
 8003278:	3361      	adds	r3, #97	; 0x61
 800327a:	781b      	ldrb	r3, [r3, #0]
 800327c:	2b05      	cmp	r3, #5
 800327e:	d109      	bne.n	8003294 <HCD_HC_OUT_IRQHandler+0x5d4>
      hhcd->hc[ch_num].urb_state  = URB_STALL;
 8003280:	687a      	ldr	r2, [r7, #4]
 8003282:	697b      	ldr	r3, [r7, #20]
 8003284:	212c      	movs	r1, #44	; 0x2c
 8003286:	fb01 f303 	mul.w	r3, r1, r3
 800328a:	4413      	add	r3, r2
 800328c:	3360      	adds	r3, #96	; 0x60
 800328e:	2205      	movs	r2, #5
 8003290:	701a      	strb	r2, [r3, #0]
 8003292:	e063      	b.n	800335c <HCD_HC_OUT_IRQHandler+0x69c>
    else if ((hhcd->hc[ch_num].state == HC_XACTERR) ||
 8003294:	687a      	ldr	r2, [r7, #4]
 8003296:	697b      	ldr	r3, [r7, #20]
 8003298:	212c      	movs	r1, #44	; 0x2c
 800329a:	fb01 f303 	mul.w	r3, r1, r3
 800329e:	4413      	add	r3, r2
 80032a0:	3361      	adds	r3, #97	; 0x61
 80032a2:	781b      	ldrb	r3, [r3, #0]
 80032a4:	2b06      	cmp	r3, #6
 80032a6:	d009      	beq.n	80032bc <HCD_HC_OUT_IRQHandler+0x5fc>
             (hhcd->hc[ch_num].state == HC_DATATGLERR))
 80032a8:	687a      	ldr	r2, [r7, #4]
 80032aa:	697b      	ldr	r3, [r7, #20]
 80032ac:	212c      	movs	r1, #44	; 0x2c
 80032ae:	fb01 f303 	mul.w	r3, r1, r3
 80032b2:	4413      	add	r3, r2
 80032b4:	3361      	adds	r3, #97	; 0x61
 80032b6:	781b      	ldrb	r3, [r3, #0]
    else if ((hhcd->hc[ch_num].state == HC_XACTERR) ||
 80032b8:	2b08      	cmp	r3, #8
 80032ba:	d14f      	bne.n	800335c <HCD_HC_OUT_IRQHandler+0x69c>
      hhcd->hc[ch_num].ErrCnt++;
 80032bc:	687a      	ldr	r2, [r7, #4]
 80032be:	697b      	ldr	r3, [r7, #20]
 80032c0:	212c      	movs	r1, #44	; 0x2c
 80032c2:	fb01 f303 	mul.w	r3, r1, r3
 80032c6:	4413      	add	r3, r2
 80032c8:	335c      	adds	r3, #92	; 0x5c
 80032ca:	681b      	ldr	r3, [r3, #0]
 80032cc:	1c5a      	adds	r2, r3, #1
 80032ce:	6879      	ldr	r1, [r7, #4]
 80032d0:	697b      	ldr	r3, [r7, #20]
 80032d2:	202c      	movs	r0, #44	; 0x2c
 80032d4:	fb00 f303 	mul.w	r3, r0, r3
 80032d8:	440b      	add	r3, r1
 80032da:	335c      	adds	r3, #92	; 0x5c
 80032dc:	601a      	str	r2, [r3, #0]
      if (hhcd->hc[ch_num].ErrCnt > 2U)
 80032de:	687a      	ldr	r2, [r7, #4]
 80032e0:	697b      	ldr	r3, [r7, #20]
 80032e2:	212c      	movs	r1, #44	; 0x2c
 80032e4:	fb01 f303 	mul.w	r3, r1, r3
 80032e8:	4413      	add	r3, r2
 80032ea:	335c      	adds	r3, #92	; 0x5c
 80032ec:	681b      	ldr	r3, [r3, #0]
 80032ee:	2b02      	cmp	r3, #2
 80032f0:	d912      	bls.n	8003318 <HCD_HC_OUT_IRQHandler+0x658>
        hhcd->hc[ch_num].ErrCnt = 0U;
 80032f2:	687a      	ldr	r2, [r7, #4]
 80032f4:	697b      	ldr	r3, [r7, #20]
 80032f6:	212c      	movs	r1, #44	; 0x2c
 80032f8:	fb01 f303 	mul.w	r3, r1, r3
 80032fc:	4413      	add	r3, r2
 80032fe:	335c      	adds	r3, #92	; 0x5c
 8003300:	2200      	movs	r2, #0
 8003302:	601a      	str	r2, [r3, #0]
        hhcd->hc[ch_num].urb_state = URB_ERROR;
 8003304:	687a      	ldr	r2, [r7, #4]
 8003306:	697b      	ldr	r3, [r7, #20]
 8003308:	212c      	movs	r1, #44	; 0x2c
 800330a:	fb01 f303 	mul.w	r3, r1, r3
 800330e:	4413      	add	r3, r2
 8003310:	3360      	adds	r3, #96	; 0x60
 8003312:	2204      	movs	r2, #4
 8003314:	701a      	strb	r2, [r3, #0]
 8003316:	e021      	b.n	800335c <HCD_HC_OUT_IRQHandler+0x69c>
        hhcd->hc[ch_num].urb_state = URB_NOTREADY;
 8003318:	687a      	ldr	r2, [r7, #4]
 800331a:	697b      	ldr	r3, [r7, #20]
 800331c:	212c      	movs	r1, #44	; 0x2c
 800331e:	fb01 f303 	mul.w	r3, r1, r3
 8003322:	4413      	add	r3, r2
 8003324:	3360      	adds	r3, #96	; 0x60
 8003326:	2202      	movs	r2, #2
 8003328:	701a      	strb	r2, [r3, #0]
        tmpreg = USBx_HC(ch_num)->HCCHAR;
 800332a:	697b      	ldr	r3, [r7, #20]
 800332c:	015a      	lsls	r2, r3, #5
 800332e:	69bb      	ldr	r3, [r7, #24]
 8003330:	4413      	add	r3, r2
 8003332:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8003336:	681b      	ldr	r3, [r3, #0]
 8003338:	613b      	str	r3, [r7, #16]
        tmpreg &= ~USB_OTG_HCCHAR_CHDIS;
 800333a:	693b      	ldr	r3, [r7, #16]
 800333c:	f023 4380 	bic.w	r3, r3, #1073741824	; 0x40000000
 8003340:	613b      	str	r3, [r7, #16]
        tmpreg |= USB_OTG_HCCHAR_CHENA;
 8003342:	693b      	ldr	r3, [r7, #16]
 8003344:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8003348:	613b      	str	r3, [r7, #16]
        USBx_HC(ch_num)->HCCHAR = tmpreg;
 800334a:	697b      	ldr	r3, [r7, #20]
 800334c:	015a      	lsls	r2, r3, #5
 800334e:	69bb      	ldr	r3, [r7, #24]
 8003350:	4413      	add	r3, r2
 8003352:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8003356:	461a      	mov	r2, r3
 8003358:	693b      	ldr	r3, [r7, #16]
 800335a:	6013      	str	r3, [r2, #0]
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_CHH);
 800335c:	697b      	ldr	r3, [r7, #20]
 800335e:	015a      	lsls	r2, r3, #5
 8003360:	69bb      	ldr	r3, [r7, #24]
 8003362:	4413      	add	r3, r2
 8003364:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8003368:	461a      	mov	r2, r3
 800336a:	2302      	movs	r3, #2
 800336c:	6093      	str	r3, [r2, #8]
    HAL_HCD_HC_NotifyURBChange_Callback(hhcd, (uint8_t)ch_num, hhcd->hc[ch_num].urb_state);
 800336e:	697b      	ldr	r3, [r7, #20]
 8003370:	b2d9      	uxtb	r1, r3
 8003372:	687a      	ldr	r2, [r7, #4]
 8003374:	697b      	ldr	r3, [r7, #20]
 8003376:	202c      	movs	r0, #44	; 0x2c
 8003378:	fb00 f303 	mul.w	r3, r0, r3
 800337c:	4413      	add	r3, r2
 800337e:	3360      	adds	r3, #96	; 0x60
 8003380:	781b      	ldrb	r3, [r3, #0]
 8003382:	461a      	mov	r2, r3
 8003384:	6878      	ldr	r0, [r7, #4]
 8003386:	f006 feaf 	bl	800a0e8 <HAL_HCD_HC_NotifyURBChange_Callback>
}
 800338a:	bf00      	nop
 800338c:	3720      	adds	r7, #32
 800338e:	46bd      	mov	sp, r7
 8003390:	bd80      	pop	{r7, pc}

08003392 <HCD_RXQLVL_IRQHandler>:
  * @brief  Handle Rx Queue Level interrupt requests.
  * @param  hhcd HCD handle
  * @retval none
  */
static void HCD_RXQLVL_IRQHandler(HCD_HandleTypeDef *hhcd)
{
 8003392:	b580      	push	{r7, lr}
 8003394:	b08a      	sub	sp, #40	; 0x28
 8003396:	af00      	add	r7, sp, #0
 8003398:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx = hhcd->Instance;
 800339a:	687b      	ldr	r3, [r7, #4]
 800339c:	681b      	ldr	r3, [r3, #0]
 800339e:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t USBx_BASE = (uint32_t)USBx;
 80033a0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80033a2:	623b      	str	r3, [r7, #32]
  uint32_t GrxstspReg;
  uint32_t xferSizePktCnt;
  uint32_t tmpreg;
  uint32_t ch_num;

  GrxstspReg = hhcd->Instance->GRXSTSP;
 80033a4:	687b      	ldr	r3, [r7, #4]
 80033a6:	681b      	ldr	r3, [r3, #0]
 80033a8:	6a1b      	ldr	r3, [r3, #32]
 80033aa:	61fb      	str	r3, [r7, #28]
  ch_num = GrxstspReg & USB_OTG_GRXSTSP_EPNUM;
 80033ac:	69fb      	ldr	r3, [r7, #28]
 80033ae:	f003 030f 	and.w	r3, r3, #15
 80033b2:	61bb      	str	r3, [r7, #24]
  pktsts = (GrxstspReg & USB_OTG_GRXSTSP_PKTSTS) >> 17;
 80033b4:	69fb      	ldr	r3, [r7, #28]
 80033b6:	0c5b      	lsrs	r3, r3, #17
 80033b8:	f003 030f 	and.w	r3, r3, #15
 80033bc:	617b      	str	r3, [r7, #20]
  pktcnt = (GrxstspReg & USB_OTG_GRXSTSP_BCNT) >> 4;
 80033be:	69fb      	ldr	r3, [r7, #28]
 80033c0:	091b      	lsrs	r3, r3, #4
 80033c2:	f3c3 030a 	ubfx	r3, r3, #0, #11
 80033c6:	613b      	str	r3, [r7, #16]

  switch (pktsts)
 80033c8:	697b      	ldr	r3, [r7, #20]
 80033ca:	2b02      	cmp	r3, #2
 80033cc:	d004      	beq.n	80033d8 <HCD_RXQLVL_IRQHandler+0x46>
 80033ce:	697b      	ldr	r3, [r7, #20]
 80033d0:	2b05      	cmp	r3, #5
 80033d2:	f000 80a9 	beq.w	8003528 <HCD_RXQLVL_IRQHandler+0x196>
      break;

    case GRXSTS_PKTSTS_IN_XFER_COMP:
    case GRXSTS_PKTSTS_CH_HALTED:
    default:
      break;
 80033d6:	e0aa      	b.n	800352e <HCD_RXQLVL_IRQHandler+0x19c>
      if ((pktcnt > 0U) && (hhcd->hc[ch_num].xfer_buff != (void *)0))
 80033d8:	693b      	ldr	r3, [r7, #16]
 80033da:	2b00      	cmp	r3, #0
 80033dc:	f000 80a6 	beq.w	800352c <HCD_RXQLVL_IRQHandler+0x19a>
 80033e0:	687a      	ldr	r2, [r7, #4]
 80033e2:	69bb      	ldr	r3, [r7, #24]
 80033e4:	212c      	movs	r1, #44	; 0x2c
 80033e6:	fb01 f303 	mul.w	r3, r1, r3
 80033ea:	4413      	add	r3, r2
 80033ec:	3344      	adds	r3, #68	; 0x44
 80033ee:	681b      	ldr	r3, [r3, #0]
 80033f0:	2b00      	cmp	r3, #0
 80033f2:	f000 809b 	beq.w	800352c <HCD_RXQLVL_IRQHandler+0x19a>
        if ((hhcd->hc[ch_num].xfer_count + pktcnt) <= hhcd->hc[ch_num].xfer_len)
 80033f6:	687a      	ldr	r2, [r7, #4]
 80033f8:	69bb      	ldr	r3, [r7, #24]
 80033fa:	212c      	movs	r1, #44	; 0x2c
 80033fc:	fb01 f303 	mul.w	r3, r1, r3
 8003400:	4413      	add	r3, r2
 8003402:	3350      	adds	r3, #80	; 0x50
 8003404:	681a      	ldr	r2, [r3, #0]
 8003406:	693b      	ldr	r3, [r7, #16]
 8003408:	441a      	add	r2, r3
 800340a:	6879      	ldr	r1, [r7, #4]
 800340c:	69bb      	ldr	r3, [r7, #24]
 800340e:	202c      	movs	r0, #44	; 0x2c
 8003410:	fb00 f303 	mul.w	r3, r0, r3
 8003414:	440b      	add	r3, r1
 8003416:	334c      	adds	r3, #76	; 0x4c
 8003418:	681b      	ldr	r3, [r3, #0]
 800341a:	429a      	cmp	r2, r3
 800341c:	d87a      	bhi.n	8003514 <HCD_RXQLVL_IRQHandler+0x182>
          (void)USB_ReadPacket(hhcd->Instance,
 800341e:	687b      	ldr	r3, [r7, #4]
 8003420:	6818      	ldr	r0, [r3, #0]
 8003422:	687a      	ldr	r2, [r7, #4]
 8003424:	69bb      	ldr	r3, [r7, #24]
 8003426:	212c      	movs	r1, #44	; 0x2c
 8003428:	fb01 f303 	mul.w	r3, r1, r3
 800342c:	4413      	add	r3, r2
 800342e:	3344      	adds	r3, #68	; 0x44
 8003430:	681b      	ldr	r3, [r3, #0]
 8003432:	693a      	ldr	r2, [r7, #16]
 8003434:	b292      	uxth	r2, r2
 8003436:	4619      	mov	r1, r3
 8003438:	f002 feee 	bl	8006218 <USB_ReadPacket>
          hhcd->hc[ch_num].xfer_buff += pktcnt;
 800343c:	687a      	ldr	r2, [r7, #4]
 800343e:	69bb      	ldr	r3, [r7, #24]
 8003440:	212c      	movs	r1, #44	; 0x2c
 8003442:	fb01 f303 	mul.w	r3, r1, r3
 8003446:	4413      	add	r3, r2
 8003448:	3344      	adds	r3, #68	; 0x44
 800344a:	681a      	ldr	r2, [r3, #0]
 800344c:	693b      	ldr	r3, [r7, #16]
 800344e:	441a      	add	r2, r3
 8003450:	6879      	ldr	r1, [r7, #4]
 8003452:	69bb      	ldr	r3, [r7, #24]
 8003454:	202c      	movs	r0, #44	; 0x2c
 8003456:	fb00 f303 	mul.w	r3, r0, r3
 800345a:	440b      	add	r3, r1
 800345c:	3344      	adds	r3, #68	; 0x44
 800345e:	601a      	str	r2, [r3, #0]
          hhcd->hc[ch_num].xfer_count += pktcnt;
 8003460:	687a      	ldr	r2, [r7, #4]
 8003462:	69bb      	ldr	r3, [r7, #24]
 8003464:	212c      	movs	r1, #44	; 0x2c
 8003466:	fb01 f303 	mul.w	r3, r1, r3
 800346a:	4413      	add	r3, r2
 800346c:	3350      	adds	r3, #80	; 0x50
 800346e:	681a      	ldr	r2, [r3, #0]
 8003470:	693b      	ldr	r3, [r7, #16]
 8003472:	441a      	add	r2, r3
 8003474:	6879      	ldr	r1, [r7, #4]
 8003476:	69bb      	ldr	r3, [r7, #24]
 8003478:	202c      	movs	r0, #44	; 0x2c
 800347a:	fb00 f303 	mul.w	r3, r0, r3
 800347e:	440b      	add	r3, r1
 8003480:	3350      	adds	r3, #80	; 0x50
 8003482:	601a      	str	r2, [r3, #0]
          xferSizePktCnt = (USBx_HC(ch_num)->HCTSIZ & USB_OTG_HCTSIZ_PKTCNT) >> 19;
 8003484:	69bb      	ldr	r3, [r7, #24]
 8003486:	015a      	lsls	r2, r3, #5
 8003488:	6a3b      	ldr	r3, [r7, #32]
 800348a:	4413      	add	r3, r2
 800348c:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8003490:	691b      	ldr	r3, [r3, #16]
 8003492:	0cdb      	lsrs	r3, r3, #19
 8003494:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8003498:	60fb      	str	r3, [r7, #12]
          if ((hhcd->hc[ch_num].max_packet == pktcnt) && (xferSizePktCnt > 0U))
 800349a:	687a      	ldr	r2, [r7, #4]
 800349c:	69bb      	ldr	r3, [r7, #24]
 800349e:	212c      	movs	r1, #44	; 0x2c
 80034a0:	fb01 f303 	mul.w	r3, r1, r3
 80034a4:	4413      	add	r3, r2
 80034a6:	3340      	adds	r3, #64	; 0x40
 80034a8:	881b      	ldrh	r3, [r3, #0]
 80034aa:	461a      	mov	r2, r3
 80034ac:	693b      	ldr	r3, [r7, #16]
 80034ae:	4293      	cmp	r3, r2
 80034b0:	d13c      	bne.n	800352c <HCD_RXQLVL_IRQHandler+0x19a>
 80034b2:	68fb      	ldr	r3, [r7, #12]
 80034b4:	2b00      	cmp	r3, #0
 80034b6:	d039      	beq.n	800352c <HCD_RXQLVL_IRQHandler+0x19a>
            tmpreg = USBx_HC(ch_num)->HCCHAR;
 80034b8:	69bb      	ldr	r3, [r7, #24]
 80034ba:	015a      	lsls	r2, r3, #5
 80034bc:	6a3b      	ldr	r3, [r7, #32]
 80034be:	4413      	add	r3, r2
 80034c0:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80034c4:	681b      	ldr	r3, [r3, #0]
 80034c6:	60bb      	str	r3, [r7, #8]
            tmpreg &= ~USB_OTG_HCCHAR_CHDIS;
 80034c8:	68bb      	ldr	r3, [r7, #8]
 80034ca:	f023 4380 	bic.w	r3, r3, #1073741824	; 0x40000000
 80034ce:	60bb      	str	r3, [r7, #8]
            tmpreg |= USB_OTG_HCCHAR_CHENA;
 80034d0:	68bb      	ldr	r3, [r7, #8]
 80034d2:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 80034d6:	60bb      	str	r3, [r7, #8]
            USBx_HC(ch_num)->HCCHAR = tmpreg;
 80034d8:	69bb      	ldr	r3, [r7, #24]
 80034da:	015a      	lsls	r2, r3, #5
 80034dc:	6a3b      	ldr	r3, [r7, #32]
 80034de:	4413      	add	r3, r2
 80034e0:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80034e4:	461a      	mov	r2, r3
 80034e6:	68bb      	ldr	r3, [r7, #8]
 80034e8:	6013      	str	r3, [r2, #0]
            hhcd->hc[ch_num].toggle_in ^= 1U;
 80034ea:	687a      	ldr	r2, [r7, #4]
 80034ec:	69bb      	ldr	r3, [r7, #24]
 80034ee:	212c      	movs	r1, #44	; 0x2c
 80034f0:	fb01 f303 	mul.w	r3, r1, r3
 80034f4:	4413      	add	r3, r2
 80034f6:	3354      	adds	r3, #84	; 0x54
 80034f8:	781b      	ldrb	r3, [r3, #0]
 80034fa:	f083 0301 	eor.w	r3, r3, #1
 80034fe:	b2d8      	uxtb	r0, r3
 8003500:	687a      	ldr	r2, [r7, #4]
 8003502:	69bb      	ldr	r3, [r7, #24]
 8003504:	212c      	movs	r1, #44	; 0x2c
 8003506:	fb01 f303 	mul.w	r3, r1, r3
 800350a:	4413      	add	r3, r2
 800350c:	3354      	adds	r3, #84	; 0x54
 800350e:	4602      	mov	r2, r0
 8003510:	701a      	strb	r2, [r3, #0]
      break;
 8003512:	e00b      	b.n	800352c <HCD_RXQLVL_IRQHandler+0x19a>
          hhcd->hc[ch_num].urb_state = URB_ERROR;
 8003514:	687a      	ldr	r2, [r7, #4]
 8003516:	69bb      	ldr	r3, [r7, #24]
 8003518:	212c      	movs	r1, #44	; 0x2c
 800351a:	fb01 f303 	mul.w	r3, r1, r3
 800351e:	4413      	add	r3, r2
 8003520:	3360      	adds	r3, #96	; 0x60
 8003522:	2204      	movs	r2, #4
 8003524:	701a      	strb	r2, [r3, #0]
      break;
 8003526:	e001      	b.n	800352c <HCD_RXQLVL_IRQHandler+0x19a>
      break;
 8003528:	bf00      	nop
 800352a:	e000      	b.n	800352e <HCD_RXQLVL_IRQHandler+0x19c>
      break;
 800352c:	bf00      	nop
  }
}
 800352e:	bf00      	nop
 8003530:	3728      	adds	r7, #40	; 0x28
 8003532:	46bd      	mov	sp, r7
 8003534:	bd80      	pop	{r7, pc}

08003536 <HCD_Port_IRQHandler>:
  * @brief  Handle Host Port interrupt requests.
  * @param  hhcd HCD handle
  * @retval None
  */
static void HCD_Port_IRQHandler(HCD_HandleTypeDef *hhcd)
{
 8003536:	b580      	push	{r7, lr}
 8003538:	b086      	sub	sp, #24
 800353a:	af00      	add	r7, sp, #0
 800353c:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx = hhcd->Instance;
 800353e:	687b      	ldr	r3, [r7, #4]
 8003540:	681b      	ldr	r3, [r3, #0]
 8003542:	617b      	str	r3, [r7, #20]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8003544:	697b      	ldr	r3, [r7, #20]
 8003546:	613b      	str	r3, [r7, #16]
  __IO uint32_t hprt0;
  __IO uint32_t hprt0_dup;

  /* Handle Host Port Interrupts */
  hprt0 = USBx_HPRT0;
 8003548:	693b      	ldr	r3, [r7, #16]
 800354a:	f503 6388 	add.w	r3, r3, #1088	; 0x440
 800354e:	681b      	ldr	r3, [r3, #0]
 8003550:	60fb      	str	r3, [r7, #12]
  hprt0_dup = USBx_HPRT0;
 8003552:	693b      	ldr	r3, [r7, #16]
 8003554:	f503 6388 	add.w	r3, r3, #1088	; 0x440
 8003558:	681b      	ldr	r3, [r3, #0]
 800355a:	60bb      	str	r3, [r7, #8]

  hprt0_dup &= ~(USB_OTG_HPRT_PENA | USB_OTG_HPRT_PCDET | \
 800355c:	68bb      	ldr	r3, [r7, #8]
 800355e:	f023 032e 	bic.w	r3, r3, #46	; 0x2e
 8003562:	60bb      	str	r3, [r7, #8]
                 USB_OTG_HPRT_PENCHNG | USB_OTG_HPRT_POCCHNG);

  /* Check whether Port Connect detected */
  if ((hprt0 & USB_OTG_HPRT_PCDET) == USB_OTG_HPRT_PCDET)
 8003564:	68fb      	ldr	r3, [r7, #12]
 8003566:	f003 0302 	and.w	r3, r3, #2
 800356a:	2b02      	cmp	r3, #2
 800356c:	d10b      	bne.n	8003586 <HCD_Port_IRQHandler+0x50>
  {
    if ((hprt0 & USB_OTG_HPRT_PCSTS) == USB_OTG_HPRT_PCSTS)
 800356e:	68fb      	ldr	r3, [r7, #12]
 8003570:	f003 0301 	and.w	r3, r3, #1
 8003574:	2b01      	cmp	r3, #1
 8003576:	d102      	bne.n	800357e <HCD_Port_IRQHandler+0x48>
    {
#if (USE_HAL_HCD_REGISTER_CALLBACKS == 1U)
      hhcd->ConnectCallback(hhcd);
#else
      HAL_HCD_Connect_Callback(hhcd);
 8003578:	6878      	ldr	r0, [r7, #4]
 800357a:	f006 fd99 	bl	800a0b0 <HAL_HCD_Connect_Callback>
#endif /* USE_HAL_HCD_REGISTER_CALLBACKS */
    }
    hprt0_dup |= USB_OTG_HPRT_PCDET;
 800357e:	68bb      	ldr	r3, [r7, #8]
 8003580:	f043 0302 	orr.w	r3, r3, #2
 8003584:	60bb      	str	r3, [r7, #8]
  }

  /* Check whether Port Enable Changed */
  if ((hprt0 & USB_OTG_HPRT_PENCHNG) == USB_OTG_HPRT_PENCHNG)
 8003586:	68fb      	ldr	r3, [r7, #12]
 8003588:	f003 0308 	and.w	r3, r3, #8
 800358c:	2b08      	cmp	r3, #8
 800358e:	d132      	bne.n	80035f6 <HCD_Port_IRQHandler+0xc0>
  {
    hprt0_dup |= USB_OTG_HPRT_PENCHNG;
 8003590:	68bb      	ldr	r3, [r7, #8]
 8003592:	f043 0308 	orr.w	r3, r3, #8
 8003596:	60bb      	str	r3, [r7, #8]

    if ((hprt0 & USB_OTG_HPRT_PENA) == USB_OTG_HPRT_PENA)
 8003598:	68fb      	ldr	r3, [r7, #12]
 800359a:	f003 0304 	and.w	r3, r3, #4
 800359e:	2b04      	cmp	r3, #4
 80035a0:	d126      	bne.n	80035f0 <HCD_Port_IRQHandler+0xba>
    {
      if (hhcd->Init.phy_itface  == USB_OTG_EMBEDDED_PHY)
 80035a2:	687b      	ldr	r3, [r7, #4]
 80035a4:	699b      	ldr	r3, [r3, #24]
 80035a6:	2b02      	cmp	r3, #2
 80035a8:	d113      	bne.n	80035d2 <HCD_Port_IRQHandler+0x9c>
      {
        if ((hprt0 & USB_OTG_HPRT_PSPD) == (HPRT0_PRTSPD_LOW_SPEED << 17))
 80035aa:	68fb      	ldr	r3, [r7, #12]
 80035ac:	f403 23c0 	and.w	r3, r3, #393216	; 0x60000
 80035b0:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 80035b4:	d106      	bne.n	80035c4 <HCD_Port_IRQHandler+0x8e>
        {
          (void)USB_InitFSLSPClkSel(hhcd->Instance, HCFG_6_MHZ);
 80035b6:	687b      	ldr	r3, [r7, #4]
 80035b8:	681b      	ldr	r3, [r3, #0]
 80035ba:	2102      	movs	r1, #2
 80035bc:	4618      	mov	r0, r3
 80035be:	f002 fea4 	bl	800630a <USB_InitFSLSPClkSel>
 80035c2:	e011      	b.n	80035e8 <HCD_Port_IRQHandler+0xb2>
        }
        else
        {
          (void)USB_InitFSLSPClkSel(hhcd->Instance, HCFG_48_MHZ);
 80035c4:	687b      	ldr	r3, [r7, #4]
 80035c6:	681b      	ldr	r3, [r3, #0]
 80035c8:	2101      	movs	r1, #1
 80035ca:	4618      	mov	r0, r3
 80035cc:	f002 fe9d 	bl	800630a <USB_InitFSLSPClkSel>
 80035d0:	e00a      	b.n	80035e8 <HCD_Port_IRQHandler+0xb2>
        }
      }
      else
      {
        if (hhcd->Init.speed == HCD_SPEED_FULL)
 80035d2:	687b      	ldr	r3, [r7, #4]
 80035d4:	68db      	ldr	r3, [r3, #12]
 80035d6:	2b01      	cmp	r3, #1
 80035d8:	d106      	bne.n	80035e8 <HCD_Port_IRQHandler+0xb2>
        {
          USBx_HOST->HFIR = 60000U;
 80035da:	693b      	ldr	r3, [r7, #16]
 80035dc:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 80035e0:	461a      	mov	r2, r3
 80035e2:	f64e 2360 	movw	r3, #60000	; 0xea60
 80035e6:	6053      	str	r3, [r2, #4]
        }
      }
#if (USE_HAL_HCD_REGISTER_CALLBACKS == 1U)
      hhcd->PortEnabledCallback(hhcd);
#else
      HAL_HCD_PortEnabled_Callback(hhcd);
 80035e8:	6878      	ldr	r0, [r7, #4]
 80035ea:	f006 fd8f 	bl	800a10c <HAL_HCD_PortEnabled_Callback>
 80035ee:	e002      	b.n	80035f6 <HCD_Port_IRQHandler+0xc0>
    else
    {
#if (USE_HAL_HCD_REGISTER_CALLBACKS == 1U)
      hhcd->PortDisabledCallback(hhcd);
#else
      HAL_HCD_PortDisabled_Callback(hhcd);
 80035f0:	6878      	ldr	r0, [r7, #4]
 80035f2:	f006 fd99 	bl	800a128 <HAL_HCD_PortDisabled_Callback>
#endif /* USE_HAL_HCD_REGISTER_CALLBACKS */
    }
  }

  /* Check for an overcurrent */
  if ((hprt0 & USB_OTG_HPRT_POCCHNG) == USB_OTG_HPRT_POCCHNG)
 80035f6:	68fb      	ldr	r3, [r7, #12]
 80035f8:	f003 0320 	and.w	r3, r3, #32
 80035fc:	2b20      	cmp	r3, #32
 80035fe:	d103      	bne.n	8003608 <HCD_Port_IRQHandler+0xd2>
  {
    hprt0_dup |= USB_OTG_HPRT_POCCHNG;
 8003600:	68bb      	ldr	r3, [r7, #8]
 8003602:	f043 0320 	orr.w	r3, r3, #32
 8003606:	60bb      	str	r3, [r7, #8]
  }

  /* Clear Port Interrupts */
  USBx_HPRT0 = hprt0_dup;
 8003608:	693b      	ldr	r3, [r7, #16]
 800360a:	f503 6388 	add.w	r3, r3, #1088	; 0x440
 800360e:	461a      	mov	r2, r3
 8003610:	68bb      	ldr	r3, [r7, #8]
 8003612:	6013      	str	r3, [r2, #0]
}
 8003614:	bf00      	nop
 8003616:	3718      	adds	r7, #24
 8003618:	46bd      	mov	sp, r7
 800361a:	bd80      	pop	{r7, pc}

0800361c <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 800361c:	b580      	push	{r7, lr}
 800361e:	b084      	sub	sp, #16
 8003620:	af00      	add	r7, sp, #0
 8003622:	6078      	str	r0, [r7, #4]
  uint32_t freqrange;
  uint32_t pclk1;

  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 8003624:	687b      	ldr	r3, [r7, #4]
 8003626:	2b00      	cmp	r3, #0
 8003628:	d101      	bne.n	800362e <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 800362a:	2301      	movs	r3, #1
 800362c:	e12b      	b.n	8003886 <HAL_I2C_Init+0x26a>
  assert_param(IS_I2C_DUAL_ADDRESS(hi2c->Init.DualAddressMode));
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 800362e:	687b      	ldr	r3, [r7, #4]
 8003630:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8003634:	b2db      	uxtb	r3, r3
 8003636:	2b00      	cmp	r3, #0
 8003638:	d106      	bne.n	8003648 <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 800363a:	687b      	ldr	r3, [r7, #4]
 800363c:	2200      	movs	r2, #0
 800363e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_I2C_MspInit(hi2c);
 8003642:	6878      	ldr	r0, [r7, #4]
 8003644:	f7fd fc10 	bl	8000e68 <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 8003648:	687b      	ldr	r3, [r7, #4]
 800364a:	2224      	movs	r2, #36	; 0x24
 800364c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 8003650:	687b      	ldr	r3, [r7, #4]
 8003652:	681b      	ldr	r3, [r3, #0]
 8003654:	681a      	ldr	r2, [r3, #0]
 8003656:	687b      	ldr	r3, [r7, #4]
 8003658:	681b      	ldr	r3, [r3, #0]
 800365a:	f022 0201 	bic.w	r2, r2, #1
 800365e:	601a      	str	r2, [r3, #0]

  /*Reset I2C*/
  hi2c->Instance->CR1 |= I2C_CR1_SWRST;
 8003660:	687b      	ldr	r3, [r7, #4]
 8003662:	681b      	ldr	r3, [r3, #0]
 8003664:	681a      	ldr	r2, [r3, #0]
 8003666:	687b      	ldr	r3, [r7, #4]
 8003668:	681b      	ldr	r3, [r3, #0]
 800366a:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 800366e:	601a      	str	r2, [r3, #0]
  hi2c->Instance->CR1 &= ~I2C_CR1_SWRST;
 8003670:	687b      	ldr	r3, [r7, #4]
 8003672:	681b      	ldr	r3, [r3, #0]
 8003674:	681a      	ldr	r2, [r3, #0]
 8003676:	687b      	ldr	r3, [r7, #4]
 8003678:	681b      	ldr	r3, [r3, #0]
 800367a:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 800367e:	601a      	str	r2, [r3, #0]

  /* Get PCLK1 frequency */
  pclk1 = HAL_RCC_GetPCLK1Freq();
 8003680:	f001 f964 	bl	800494c <HAL_RCC_GetPCLK1Freq>
 8003684:	60f8      	str	r0, [r7, #12]

  /* Check the minimum allowed PCLK1 frequency */
  if (I2C_MIN_PCLK_FREQ(pclk1, hi2c->Init.ClockSpeed) == 1U)
 8003686:	687b      	ldr	r3, [r7, #4]
 8003688:	685b      	ldr	r3, [r3, #4]
 800368a:	4a81      	ldr	r2, [pc, #516]	; (8003890 <HAL_I2C_Init+0x274>)
 800368c:	4293      	cmp	r3, r2
 800368e:	d807      	bhi.n	80036a0 <HAL_I2C_Init+0x84>
 8003690:	68fb      	ldr	r3, [r7, #12]
 8003692:	4a80      	ldr	r2, [pc, #512]	; (8003894 <HAL_I2C_Init+0x278>)
 8003694:	4293      	cmp	r3, r2
 8003696:	bf94      	ite	ls
 8003698:	2301      	movls	r3, #1
 800369a:	2300      	movhi	r3, #0
 800369c:	b2db      	uxtb	r3, r3
 800369e:	e006      	b.n	80036ae <HAL_I2C_Init+0x92>
 80036a0:	68fb      	ldr	r3, [r7, #12]
 80036a2:	4a7d      	ldr	r2, [pc, #500]	; (8003898 <HAL_I2C_Init+0x27c>)
 80036a4:	4293      	cmp	r3, r2
 80036a6:	bf94      	ite	ls
 80036a8:	2301      	movls	r3, #1
 80036aa:	2300      	movhi	r3, #0
 80036ac:	b2db      	uxtb	r3, r3
 80036ae:	2b00      	cmp	r3, #0
 80036b0:	d001      	beq.n	80036b6 <HAL_I2C_Init+0x9a>
  {
    return HAL_ERROR;
 80036b2:	2301      	movs	r3, #1
 80036b4:	e0e7      	b.n	8003886 <HAL_I2C_Init+0x26a>
  }

  /* Calculate frequency range */
  freqrange = I2C_FREQRANGE(pclk1);
 80036b6:	68fb      	ldr	r3, [r7, #12]
 80036b8:	4a78      	ldr	r2, [pc, #480]	; (800389c <HAL_I2C_Init+0x280>)
 80036ba:	fba2 2303 	umull	r2, r3, r2, r3
 80036be:	0c9b      	lsrs	r3, r3, #18
 80036c0:	60bb      	str	r3, [r7, #8]

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Frequency range */
  MODIFY_REG(hi2c->Instance->CR2, I2C_CR2_FREQ, freqrange);
 80036c2:	687b      	ldr	r3, [r7, #4]
 80036c4:	681b      	ldr	r3, [r3, #0]
 80036c6:	685b      	ldr	r3, [r3, #4]
 80036c8:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 80036cc:	687b      	ldr	r3, [r7, #4]
 80036ce:	681b      	ldr	r3, [r3, #0]
 80036d0:	68ba      	ldr	r2, [r7, #8]
 80036d2:	430a      	orrs	r2, r1
 80036d4:	605a      	str	r2, [r3, #4]

  /*---------------------------- I2Cx TRISE Configuration --------------------*/
  /* Configure I2Cx: Rise Time */
  MODIFY_REG(hi2c->Instance->TRISE, I2C_TRISE_TRISE, I2C_RISE_TIME(freqrange, hi2c->Init.ClockSpeed));
 80036d6:	687b      	ldr	r3, [r7, #4]
 80036d8:	681b      	ldr	r3, [r3, #0]
 80036da:	6a1b      	ldr	r3, [r3, #32]
 80036dc:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 80036e0:	687b      	ldr	r3, [r7, #4]
 80036e2:	685b      	ldr	r3, [r3, #4]
 80036e4:	4a6a      	ldr	r2, [pc, #424]	; (8003890 <HAL_I2C_Init+0x274>)
 80036e6:	4293      	cmp	r3, r2
 80036e8:	d802      	bhi.n	80036f0 <HAL_I2C_Init+0xd4>
 80036ea:	68bb      	ldr	r3, [r7, #8]
 80036ec:	3301      	adds	r3, #1
 80036ee:	e009      	b.n	8003704 <HAL_I2C_Init+0xe8>
 80036f0:	68bb      	ldr	r3, [r7, #8]
 80036f2:	f44f 7296 	mov.w	r2, #300	; 0x12c
 80036f6:	fb02 f303 	mul.w	r3, r2, r3
 80036fa:	4a69      	ldr	r2, [pc, #420]	; (80038a0 <HAL_I2C_Init+0x284>)
 80036fc:	fba2 2303 	umull	r2, r3, r2, r3
 8003700:	099b      	lsrs	r3, r3, #6
 8003702:	3301      	adds	r3, #1
 8003704:	687a      	ldr	r2, [r7, #4]
 8003706:	6812      	ldr	r2, [r2, #0]
 8003708:	430b      	orrs	r3, r1
 800370a:	6213      	str	r3, [r2, #32]

  /*---------------------------- I2Cx CCR Configuration ----------------------*/
  /* Configure I2Cx: Speed */
  MODIFY_REG(hi2c->Instance->CCR, (I2C_CCR_FS | I2C_CCR_DUTY | I2C_CCR_CCR), I2C_SPEED(pclk1, hi2c->Init.ClockSpeed, hi2c->Init.DutyCycle));
 800370c:	687b      	ldr	r3, [r7, #4]
 800370e:	681b      	ldr	r3, [r3, #0]
 8003710:	69db      	ldr	r3, [r3, #28]
 8003712:	f423 424f 	bic.w	r2, r3, #52992	; 0xcf00
 8003716:	f022 02ff 	bic.w	r2, r2, #255	; 0xff
 800371a:	687b      	ldr	r3, [r7, #4]
 800371c:	685b      	ldr	r3, [r3, #4]
 800371e:	495c      	ldr	r1, [pc, #368]	; (8003890 <HAL_I2C_Init+0x274>)
 8003720:	428b      	cmp	r3, r1
 8003722:	d819      	bhi.n	8003758 <HAL_I2C_Init+0x13c>
 8003724:	68fb      	ldr	r3, [r7, #12]
 8003726:	1e59      	subs	r1, r3, #1
 8003728:	687b      	ldr	r3, [r7, #4]
 800372a:	685b      	ldr	r3, [r3, #4]
 800372c:	005b      	lsls	r3, r3, #1
 800372e:	fbb1 f3f3 	udiv	r3, r1, r3
 8003732:	1c59      	adds	r1, r3, #1
 8003734:	f640 73fc 	movw	r3, #4092	; 0xffc
 8003738:	400b      	ands	r3, r1
 800373a:	2b00      	cmp	r3, #0
 800373c:	d00a      	beq.n	8003754 <HAL_I2C_Init+0x138>
 800373e:	68fb      	ldr	r3, [r7, #12]
 8003740:	1e59      	subs	r1, r3, #1
 8003742:	687b      	ldr	r3, [r7, #4]
 8003744:	685b      	ldr	r3, [r3, #4]
 8003746:	005b      	lsls	r3, r3, #1
 8003748:	fbb1 f3f3 	udiv	r3, r1, r3
 800374c:	3301      	adds	r3, #1
 800374e:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8003752:	e051      	b.n	80037f8 <HAL_I2C_Init+0x1dc>
 8003754:	2304      	movs	r3, #4
 8003756:	e04f      	b.n	80037f8 <HAL_I2C_Init+0x1dc>
 8003758:	687b      	ldr	r3, [r7, #4]
 800375a:	689b      	ldr	r3, [r3, #8]
 800375c:	2b00      	cmp	r3, #0
 800375e:	d111      	bne.n	8003784 <HAL_I2C_Init+0x168>
 8003760:	68fb      	ldr	r3, [r7, #12]
 8003762:	1e58      	subs	r0, r3, #1
 8003764:	687b      	ldr	r3, [r7, #4]
 8003766:	6859      	ldr	r1, [r3, #4]
 8003768:	460b      	mov	r3, r1
 800376a:	005b      	lsls	r3, r3, #1
 800376c:	440b      	add	r3, r1
 800376e:	fbb0 f3f3 	udiv	r3, r0, r3
 8003772:	3301      	adds	r3, #1
 8003774:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8003778:	2b00      	cmp	r3, #0
 800377a:	bf0c      	ite	eq
 800377c:	2301      	moveq	r3, #1
 800377e:	2300      	movne	r3, #0
 8003780:	b2db      	uxtb	r3, r3
 8003782:	e012      	b.n	80037aa <HAL_I2C_Init+0x18e>
 8003784:	68fb      	ldr	r3, [r7, #12]
 8003786:	1e58      	subs	r0, r3, #1
 8003788:	687b      	ldr	r3, [r7, #4]
 800378a:	6859      	ldr	r1, [r3, #4]
 800378c:	460b      	mov	r3, r1
 800378e:	009b      	lsls	r3, r3, #2
 8003790:	440b      	add	r3, r1
 8003792:	0099      	lsls	r1, r3, #2
 8003794:	440b      	add	r3, r1
 8003796:	fbb0 f3f3 	udiv	r3, r0, r3
 800379a:	3301      	adds	r3, #1
 800379c:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80037a0:	2b00      	cmp	r3, #0
 80037a2:	bf0c      	ite	eq
 80037a4:	2301      	moveq	r3, #1
 80037a6:	2300      	movne	r3, #0
 80037a8:	b2db      	uxtb	r3, r3
 80037aa:	2b00      	cmp	r3, #0
 80037ac:	d001      	beq.n	80037b2 <HAL_I2C_Init+0x196>
 80037ae:	2301      	movs	r3, #1
 80037b0:	e022      	b.n	80037f8 <HAL_I2C_Init+0x1dc>
 80037b2:	687b      	ldr	r3, [r7, #4]
 80037b4:	689b      	ldr	r3, [r3, #8]
 80037b6:	2b00      	cmp	r3, #0
 80037b8:	d10e      	bne.n	80037d8 <HAL_I2C_Init+0x1bc>
 80037ba:	68fb      	ldr	r3, [r7, #12]
 80037bc:	1e58      	subs	r0, r3, #1
 80037be:	687b      	ldr	r3, [r7, #4]
 80037c0:	6859      	ldr	r1, [r3, #4]
 80037c2:	460b      	mov	r3, r1
 80037c4:	005b      	lsls	r3, r3, #1
 80037c6:	440b      	add	r3, r1
 80037c8:	fbb0 f3f3 	udiv	r3, r0, r3
 80037cc:	3301      	adds	r3, #1
 80037ce:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80037d2:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80037d6:	e00f      	b.n	80037f8 <HAL_I2C_Init+0x1dc>
 80037d8:	68fb      	ldr	r3, [r7, #12]
 80037da:	1e58      	subs	r0, r3, #1
 80037dc:	687b      	ldr	r3, [r7, #4]
 80037de:	6859      	ldr	r1, [r3, #4]
 80037e0:	460b      	mov	r3, r1
 80037e2:	009b      	lsls	r3, r3, #2
 80037e4:	440b      	add	r3, r1
 80037e6:	0099      	lsls	r1, r3, #2
 80037e8:	440b      	add	r3, r1
 80037ea:	fbb0 f3f3 	udiv	r3, r0, r3
 80037ee:	3301      	adds	r3, #1
 80037f0:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80037f4:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 80037f8:	6879      	ldr	r1, [r7, #4]
 80037fa:	6809      	ldr	r1, [r1, #0]
 80037fc:	4313      	orrs	r3, r2
 80037fe:	61cb      	str	r3, [r1, #28]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  MODIFY_REG(hi2c->Instance->CR1, (I2C_CR1_ENGC | I2C_CR1_NOSTRETCH), (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode));
 8003800:	687b      	ldr	r3, [r7, #4]
 8003802:	681b      	ldr	r3, [r3, #0]
 8003804:	681b      	ldr	r3, [r3, #0]
 8003806:	f023 01c0 	bic.w	r1, r3, #192	; 0xc0
 800380a:	687b      	ldr	r3, [r7, #4]
 800380c:	69da      	ldr	r2, [r3, #28]
 800380e:	687b      	ldr	r3, [r7, #4]
 8003810:	6a1b      	ldr	r3, [r3, #32]
 8003812:	431a      	orrs	r2, r3
 8003814:	687b      	ldr	r3, [r7, #4]
 8003816:	681b      	ldr	r3, [r3, #0]
 8003818:	430a      	orrs	r2, r1
 800381a:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Configure I2Cx: Own Address1 and addressing mode */
  MODIFY_REG(hi2c->Instance->OAR1, (I2C_OAR1_ADDMODE | I2C_OAR1_ADD8_9 | I2C_OAR1_ADD1_7 | I2C_OAR1_ADD0), (hi2c->Init.AddressingMode | hi2c->Init.OwnAddress1));
 800381c:	687b      	ldr	r3, [r7, #4]
 800381e:	681b      	ldr	r3, [r3, #0]
 8003820:	689b      	ldr	r3, [r3, #8]
 8003822:	f423 4303 	bic.w	r3, r3, #33536	; 0x8300
 8003826:	f023 03ff 	bic.w	r3, r3, #255	; 0xff
 800382a:	687a      	ldr	r2, [r7, #4]
 800382c:	6911      	ldr	r1, [r2, #16]
 800382e:	687a      	ldr	r2, [r7, #4]
 8003830:	68d2      	ldr	r2, [r2, #12]
 8003832:	4311      	orrs	r1, r2
 8003834:	687a      	ldr	r2, [r7, #4]
 8003836:	6812      	ldr	r2, [r2, #0]
 8003838:	430b      	orrs	r3, r1
 800383a:	6093      	str	r3, [r2, #8]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Configure I2Cx: Dual mode and Own Address2 */
  MODIFY_REG(hi2c->Instance->OAR2, (I2C_OAR2_ENDUAL | I2C_OAR2_ADD2), (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2));
 800383c:	687b      	ldr	r3, [r7, #4]
 800383e:	681b      	ldr	r3, [r3, #0]
 8003840:	68db      	ldr	r3, [r3, #12]
 8003842:	f023 01ff 	bic.w	r1, r3, #255	; 0xff
 8003846:	687b      	ldr	r3, [r7, #4]
 8003848:	695a      	ldr	r2, [r3, #20]
 800384a:	687b      	ldr	r3, [r7, #4]
 800384c:	699b      	ldr	r3, [r3, #24]
 800384e:	431a      	orrs	r2, r3
 8003850:	687b      	ldr	r3, [r7, #4]
 8003852:	681b      	ldr	r3, [r3, #0]
 8003854:	430a      	orrs	r2, r1
 8003856:	60da      	str	r2, [r3, #12]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 8003858:	687b      	ldr	r3, [r7, #4]
 800385a:	681b      	ldr	r3, [r3, #0]
 800385c:	681a      	ldr	r2, [r3, #0]
 800385e:	687b      	ldr	r3, [r7, #4]
 8003860:	681b      	ldr	r3, [r3, #0]
 8003862:	f042 0201 	orr.w	r2, r2, #1
 8003866:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8003868:	687b      	ldr	r3, [r7, #4]
 800386a:	2200      	movs	r2, #0
 800386c:	641a      	str	r2, [r3, #64]	; 0x40
  hi2c->State = HAL_I2C_STATE_READY;
 800386e:	687b      	ldr	r3, [r7, #4]
 8003870:	2220      	movs	r2, #32
 8003872:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  hi2c->PreviousState = I2C_STATE_NONE;
 8003876:	687b      	ldr	r3, [r7, #4]
 8003878:	2200      	movs	r2, #0
 800387a:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 800387c:	687b      	ldr	r3, [r7, #4]
 800387e:	2200      	movs	r2, #0
 8003880:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 8003884:	2300      	movs	r3, #0
}
 8003886:	4618      	mov	r0, r3
 8003888:	3710      	adds	r7, #16
 800388a:	46bd      	mov	sp, r7
 800388c:	bd80      	pop	{r7, pc}
 800388e:	bf00      	nop
 8003890:	000186a0 	.word	0x000186a0
 8003894:	001e847f 	.word	0x001e847f
 8003898:	003d08ff 	.word	0x003d08ff
 800389c:	431bde83 	.word	0x431bde83
 80038a0:	10624dd3 	.word	0x10624dd3

080038a4 <HAL_I2CEx_ConfigAnalogFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  AnalogFilter new state of the Analog filter.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigAnalogFilter(I2C_HandleTypeDef *hi2c, uint32_t AnalogFilter)
{
 80038a4:	b480      	push	{r7}
 80038a6:	b083      	sub	sp, #12
 80038a8:	af00      	add	r7, sp, #0
 80038aa:	6078      	str	r0, [r7, #4]
 80038ac:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_ANALOG_FILTER(AnalogFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 80038ae:	687b      	ldr	r3, [r7, #4]
 80038b0:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80038b4:	b2db      	uxtb	r3, r3
 80038b6:	2b20      	cmp	r3, #32
 80038b8:	d129      	bne.n	800390e <HAL_I2CEx_ConfigAnalogFilter+0x6a>
  {
    hi2c->State = HAL_I2C_STATE_BUSY;
 80038ba:	687b      	ldr	r3, [r7, #4]
 80038bc:	2224      	movs	r2, #36	; 0x24
 80038be:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 80038c2:	687b      	ldr	r3, [r7, #4]
 80038c4:	681b      	ldr	r3, [r3, #0]
 80038c6:	681a      	ldr	r2, [r3, #0]
 80038c8:	687b      	ldr	r3, [r7, #4]
 80038ca:	681b      	ldr	r3, [r3, #0]
 80038cc:	f022 0201 	bic.w	r2, r2, #1
 80038d0:	601a      	str	r2, [r3, #0]

    /* Reset I2Cx ANOFF bit */
    hi2c->Instance->FLTR &= ~(I2C_FLTR_ANOFF);
 80038d2:	687b      	ldr	r3, [r7, #4]
 80038d4:	681b      	ldr	r3, [r3, #0]
 80038d6:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 80038d8:	687b      	ldr	r3, [r7, #4]
 80038da:	681b      	ldr	r3, [r3, #0]
 80038dc:	f022 0210 	bic.w	r2, r2, #16
 80038e0:	625a      	str	r2, [r3, #36]	; 0x24

    /* Disable the analog filter */
    hi2c->Instance->FLTR |= AnalogFilter;
 80038e2:	687b      	ldr	r3, [r7, #4]
 80038e4:	681b      	ldr	r3, [r3, #0]
 80038e6:	6a59      	ldr	r1, [r3, #36]	; 0x24
 80038e8:	687b      	ldr	r3, [r7, #4]
 80038ea:	681b      	ldr	r3, [r3, #0]
 80038ec:	683a      	ldr	r2, [r7, #0]
 80038ee:	430a      	orrs	r2, r1
 80038f0:	625a      	str	r2, [r3, #36]	; 0x24

    __HAL_I2C_ENABLE(hi2c);
 80038f2:	687b      	ldr	r3, [r7, #4]
 80038f4:	681b      	ldr	r3, [r3, #0]
 80038f6:	681a      	ldr	r2, [r3, #0]
 80038f8:	687b      	ldr	r3, [r7, #4]
 80038fa:	681b      	ldr	r3, [r3, #0]
 80038fc:	f042 0201 	orr.w	r2, r2, #1
 8003900:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8003902:	687b      	ldr	r3, [r7, #4]
 8003904:	2220      	movs	r2, #32
 8003906:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    return HAL_OK;
 800390a:	2300      	movs	r3, #0
 800390c:	e000      	b.n	8003910 <HAL_I2CEx_ConfigAnalogFilter+0x6c>
  }
  else
  {
    return HAL_BUSY;
 800390e:	2302      	movs	r3, #2
  }
}
 8003910:	4618      	mov	r0, r3
 8003912:	370c      	adds	r7, #12
 8003914:	46bd      	mov	sp, r7
 8003916:	f85d 7b04 	ldr.w	r7, [sp], #4
 800391a:	4770      	bx	lr

0800391c <HAL_I2CEx_ConfigDigitalFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  DigitalFilter Coefficient of digital noise filter between 0x00 and 0x0F.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigDigitalFilter(I2C_HandleTypeDef *hi2c, uint32_t DigitalFilter)
{
 800391c:	b480      	push	{r7}
 800391e:	b085      	sub	sp, #20
 8003920:	af00      	add	r7, sp, #0
 8003922:	6078      	str	r0, [r7, #4]
 8003924:	6039      	str	r1, [r7, #0]
  uint16_t tmpreg = 0;
 8003926:	2300      	movs	r3, #0
 8003928:	81fb      	strh	r3, [r7, #14]

  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_DIGITAL_FILTER(DigitalFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 800392a:	687b      	ldr	r3, [r7, #4]
 800392c:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8003930:	b2db      	uxtb	r3, r3
 8003932:	2b20      	cmp	r3, #32
 8003934:	d12a      	bne.n	800398c <HAL_I2CEx_ConfigDigitalFilter+0x70>
  {
    hi2c->State = HAL_I2C_STATE_BUSY;
 8003936:	687b      	ldr	r3, [r7, #4]
 8003938:	2224      	movs	r2, #36	; 0x24
 800393a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 800393e:	687b      	ldr	r3, [r7, #4]
 8003940:	681b      	ldr	r3, [r3, #0]
 8003942:	681a      	ldr	r2, [r3, #0]
 8003944:	687b      	ldr	r3, [r7, #4]
 8003946:	681b      	ldr	r3, [r3, #0]
 8003948:	f022 0201 	bic.w	r2, r2, #1
 800394c:	601a      	str	r2, [r3, #0]

    /* Get the old register value */
    tmpreg = hi2c->Instance->FLTR;
 800394e:	687b      	ldr	r3, [r7, #4]
 8003950:	681b      	ldr	r3, [r3, #0]
 8003952:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003954:	81fb      	strh	r3, [r7, #14]

    /* Reset I2Cx DNF bit [3:0] */
    tmpreg &= ~(I2C_FLTR_DNF);
 8003956:	89fb      	ldrh	r3, [r7, #14]
 8003958:	f023 030f 	bic.w	r3, r3, #15
 800395c:	81fb      	strh	r3, [r7, #14]

    /* Set I2Cx DNF coefficient */
    tmpreg |= DigitalFilter;
 800395e:	683b      	ldr	r3, [r7, #0]
 8003960:	b29a      	uxth	r2, r3
 8003962:	89fb      	ldrh	r3, [r7, #14]
 8003964:	4313      	orrs	r3, r2
 8003966:	81fb      	strh	r3, [r7, #14]

    /* Store the new register value */
    hi2c->Instance->FLTR = tmpreg;
 8003968:	687b      	ldr	r3, [r7, #4]
 800396a:	681b      	ldr	r3, [r3, #0]
 800396c:	89fa      	ldrh	r2, [r7, #14]
 800396e:	625a      	str	r2, [r3, #36]	; 0x24

    __HAL_I2C_ENABLE(hi2c);
 8003970:	687b      	ldr	r3, [r7, #4]
 8003972:	681b      	ldr	r3, [r3, #0]
 8003974:	681a      	ldr	r2, [r3, #0]
 8003976:	687b      	ldr	r3, [r7, #4]
 8003978:	681b      	ldr	r3, [r3, #0]
 800397a:	f042 0201 	orr.w	r2, r2, #1
 800397e:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8003980:	687b      	ldr	r3, [r7, #4]
 8003982:	2220      	movs	r2, #32
 8003984:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    return HAL_OK;
 8003988:	2300      	movs	r3, #0
 800398a:	e000      	b.n	800398e <HAL_I2CEx_ConfigDigitalFilter+0x72>
  }
  else
  {
    return HAL_BUSY;
 800398c:	2302      	movs	r3, #2
  }
}
 800398e:	4618      	mov	r0, r3
 8003990:	3714      	adds	r7, #20
 8003992:	46bd      	mov	sp, r7
 8003994:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003998:	4770      	bx	lr
	...

0800399c <HAL_LTDC_Init>:
  * @param  hltdc  pointer to a LTDC_HandleTypeDef structure that contains
  *                the configuration information for the LTDC.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_LTDC_Init(LTDC_HandleTypeDef *hltdc)
{
 800399c:	b580      	push	{r7, lr}
 800399e:	b084      	sub	sp, #16
 80039a0:	af00      	add	r7, sp, #0
 80039a2:	6078      	str	r0, [r7, #4]
  uint32_t tmp;
  uint32_t tmp1;

  /* Check the LTDC peripheral state */
  if (hltdc == NULL)
 80039a4:	687b      	ldr	r3, [r7, #4]
 80039a6:	2b00      	cmp	r3, #0
 80039a8:	d101      	bne.n	80039ae <HAL_LTDC_Init+0x12>
  {
    return HAL_ERROR;
 80039aa:	2301      	movs	r3, #1
 80039ac:	e0bf      	b.n	8003b2e <HAL_LTDC_Init+0x192>
    }
    /* Init the low level hardware */
    hltdc->MspInitCallback(hltdc);
  }
#else
  if (hltdc->State == HAL_LTDC_STATE_RESET)
 80039ae:	687b      	ldr	r3, [r7, #4]
 80039b0:	f893 30a1 	ldrb.w	r3, [r3, #161]	; 0xa1
 80039b4:	b2db      	uxtb	r3, r3
 80039b6:	2b00      	cmp	r3, #0
 80039b8:	d106      	bne.n	80039c8 <HAL_LTDC_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hltdc->Lock = HAL_UNLOCKED;
 80039ba:	687b      	ldr	r3, [r7, #4]
 80039bc:	2200      	movs	r2, #0
 80039be:	f883 20a0 	strb.w	r2, [r3, #160]	; 0xa0
    /* Init the low level hardware */
    HAL_LTDC_MspInit(hltdc);
 80039c2:	6878      	ldr	r0, [r7, #4]
 80039c4:	f7fd faba 	bl	8000f3c <HAL_LTDC_MspInit>
  }
#endif /* USE_HAL_LTDC_REGISTER_CALLBACKS */

  /* Change LTDC peripheral state */
  hltdc->State = HAL_LTDC_STATE_BUSY;
 80039c8:	687b      	ldr	r3, [r7, #4]
 80039ca:	2202      	movs	r2, #2
 80039cc:	f883 20a1 	strb.w	r2, [r3, #161]	; 0xa1

  /* Configure the HS, VS, DE and PC polarity */
  hltdc->Instance->GCR &= ~(LTDC_GCR_HSPOL | LTDC_GCR_VSPOL | LTDC_GCR_DEPOL | LTDC_GCR_PCPOL);
 80039d0:	687b      	ldr	r3, [r7, #4]
 80039d2:	681b      	ldr	r3, [r3, #0]
 80039d4:	699a      	ldr	r2, [r3, #24]
 80039d6:	687b      	ldr	r3, [r7, #4]
 80039d8:	681b      	ldr	r3, [r3, #0]
 80039da:	f022 4270 	bic.w	r2, r2, #4026531840	; 0xf0000000
 80039de:	619a      	str	r2, [r3, #24]
  hltdc->Instance->GCR |= (uint32_t)(hltdc->Init.HSPolarity | hltdc->Init.VSPolarity | \
 80039e0:	687b      	ldr	r3, [r7, #4]
 80039e2:	681b      	ldr	r3, [r3, #0]
 80039e4:	6999      	ldr	r1, [r3, #24]
 80039e6:	687b      	ldr	r3, [r7, #4]
 80039e8:	685a      	ldr	r2, [r3, #4]
 80039ea:	687b      	ldr	r3, [r7, #4]
 80039ec:	689b      	ldr	r3, [r3, #8]
 80039ee:	431a      	orrs	r2, r3
                                     hltdc->Init.DEPolarity | hltdc->Init.PCPolarity);
 80039f0:	687b      	ldr	r3, [r7, #4]
 80039f2:	68db      	ldr	r3, [r3, #12]
  hltdc->Instance->GCR |= (uint32_t)(hltdc->Init.HSPolarity | hltdc->Init.VSPolarity | \
 80039f4:	431a      	orrs	r2, r3
                                     hltdc->Init.DEPolarity | hltdc->Init.PCPolarity);
 80039f6:	687b      	ldr	r3, [r7, #4]
 80039f8:	691b      	ldr	r3, [r3, #16]
 80039fa:	431a      	orrs	r2, r3
  hltdc->Instance->GCR |= (uint32_t)(hltdc->Init.HSPolarity | hltdc->Init.VSPolarity | \
 80039fc:	687b      	ldr	r3, [r7, #4]
 80039fe:	681b      	ldr	r3, [r3, #0]
 8003a00:	430a      	orrs	r2, r1
 8003a02:	619a      	str	r2, [r3, #24]

  /* Set Synchronization size */
  hltdc->Instance->SSCR &= ~(LTDC_SSCR_VSH | LTDC_SSCR_HSW);
 8003a04:	687b      	ldr	r3, [r7, #4]
 8003a06:	681b      	ldr	r3, [r3, #0]
 8003a08:	6899      	ldr	r1, [r3, #8]
 8003a0a:	687b      	ldr	r3, [r7, #4]
 8003a0c:	681a      	ldr	r2, [r3, #0]
 8003a0e:	4b4a      	ldr	r3, [pc, #296]	; (8003b38 <HAL_LTDC_Init+0x19c>)
 8003a10:	400b      	ands	r3, r1
 8003a12:	6093      	str	r3, [r2, #8]
  tmp = (hltdc->Init.HorizontalSync << 16U);
 8003a14:	687b      	ldr	r3, [r7, #4]
 8003a16:	695b      	ldr	r3, [r3, #20]
 8003a18:	041b      	lsls	r3, r3, #16
 8003a1a:	60fb      	str	r3, [r7, #12]
  hltdc->Instance->SSCR |= (tmp | hltdc->Init.VerticalSync);
 8003a1c:	687b      	ldr	r3, [r7, #4]
 8003a1e:	681b      	ldr	r3, [r3, #0]
 8003a20:	6899      	ldr	r1, [r3, #8]
 8003a22:	687b      	ldr	r3, [r7, #4]
 8003a24:	699a      	ldr	r2, [r3, #24]
 8003a26:	68fb      	ldr	r3, [r7, #12]
 8003a28:	431a      	orrs	r2, r3
 8003a2a:	687b      	ldr	r3, [r7, #4]
 8003a2c:	681b      	ldr	r3, [r3, #0]
 8003a2e:	430a      	orrs	r2, r1
 8003a30:	609a      	str	r2, [r3, #8]

  /* Set Accumulated Back porch */
  hltdc->Instance->BPCR &= ~(LTDC_BPCR_AVBP | LTDC_BPCR_AHBP);
 8003a32:	687b      	ldr	r3, [r7, #4]
 8003a34:	681b      	ldr	r3, [r3, #0]
 8003a36:	68d9      	ldr	r1, [r3, #12]
 8003a38:	687b      	ldr	r3, [r7, #4]
 8003a3a:	681a      	ldr	r2, [r3, #0]
 8003a3c:	4b3e      	ldr	r3, [pc, #248]	; (8003b38 <HAL_LTDC_Init+0x19c>)
 8003a3e:	400b      	ands	r3, r1
 8003a40:	60d3      	str	r3, [r2, #12]
  tmp = (hltdc->Init.AccumulatedHBP << 16U);
 8003a42:	687b      	ldr	r3, [r7, #4]
 8003a44:	69db      	ldr	r3, [r3, #28]
 8003a46:	041b      	lsls	r3, r3, #16
 8003a48:	60fb      	str	r3, [r7, #12]
  hltdc->Instance->BPCR |= (tmp | hltdc->Init.AccumulatedVBP);
 8003a4a:	687b      	ldr	r3, [r7, #4]
 8003a4c:	681b      	ldr	r3, [r3, #0]
 8003a4e:	68d9      	ldr	r1, [r3, #12]
 8003a50:	687b      	ldr	r3, [r7, #4]
 8003a52:	6a1a      	ldr	r2, [r3, #32]
 8003a54:	68fb      	ldr	r3, [r7, #12]
 8003a56:	431a      	orrs	r2, r3
 8003a58:	687b      	ldr	r3, [r7, #4]
 8003a5a:	681b      	ldr	r3, [r3, #0]
 8003a5c:	430a      	orrs	r2, r1
 8003a5e:	60da      	str	r2, [r3, #12]

  /* Set Accumulated Active Width */
  hltdc->Instance->AWCR &= ~(LTDC_AWCR_AAH | LTDC_AWCR_AAW);
 8003a60:	687b      	ldr	r3, [r7, #4]
 8003a62:	681b      	ldr	r3, [r3, #0]
 8003a64:	6919      	ldr	r1, [r3, #16]
 8003a66:	687b      	ldr	r3, [r7, #4]
 8003a68:	681a      	ldr	r2, [r3, #0]
 8003a6a:	4b33      	ldr	r3, [pc, #204]	; (8003b38 <HAL_LTDC_Init+0x19c>)
 8003a6c:	400b      	ands	r3, r1
 8003a6e:	6113      	str	r3, [r2, #16]
  tmp = (hltdc->Init.AccumulatedActiveW << 16U);
 8003a70:	687b      	ldr	r3, [r7, #4]
 8003a72:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003a74:	041b      	lsls	r3, r3, #16
 8003a76:	60fb      	str	r3, [r7, #12]
  hltdc->Instance->AWCR |= (tmp | hltdc->Init.AccumulatedActiveH);
 8003a78:	687b      	ldr	r3, [r7, #4]
 8003a7a:	681b      	ldr	r3, [r3, #0]
 8003a7c:	6919      	ldr	r1, [r3, #16]
 8003a7e:	687b      	ldr	r3, [r7, #4]
 8003a80:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8003a82:	68fb      	ldr	r3, [r7, #12]
 8003a84:	431a      	orrs	r2, r3
 8003a86:	687b      	ldr	r3, [r7, #4]
 8003a88:	681b      	ldr	r3, [r3, #0]
 8003a8a:	430a      	orrs	r2, r1
 8003a8c:	611a      	str	r2, [r3, #16]

  /* Set Total Width */
  hltdc->Instance->TWCR &= ~(LTDC_TWCR_TOTALH | LTDC_TWCR_TOTALW);
 8003a8e:	687b      	ldr	r3, [r7, #4]
 8003a90:	681b      	ldr	r3, [r3, #0]
 8003a92:	6959      	ldr	r1, [r3, #20]
 8003a94:	687b      	ldr	r3, [r7, #4]
 8003a96:	681a      	ldr	r2, [r3, #0]
 8003a98:	4b27      	ldr	r3, [pc, #156]	; (8003b38 <HAL_LTDC_Init+0x19c>)
 8003a9a:	400b      	ands	r3, r1
 8003a9c:	6153      	str	r3, [r2, #20]
  tmp = (hltdc->Init.TotalWidth << 16U);
 8003a9e:	687b      	ldr	r3, [r7, #4]
 8003aa0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003aa2:	041b      	lsls	r3, r3, #16
 8003aa4:	60fb      	str	r3, [r7, #12]
  hltdc->Instance->TWCR |= (tmp | hltdc->Init.TotalHeigh);
 8003aa6:	687b      	ldr	r3, [r7, #4]
 8003aa8:	681b      	ldr	r3, [r3, #0]
 8003aaa:	6959      	ldr	r1, [r3, #20]
 8003aac:	687b      	ldr	r3, [r7, #4]
 8003aae:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8003ab0:	68fb      	ldr	r3, [r7, #12]
 8003ab2:	431a      	orrs	r2, r3
 8003ab4:	687b      	ldr	r3, [r7, #4]
 8003ab6:	681b      	ldr	r3, [r3, #0]
 8003ab8:	430a      	orrs	r2, r1
 8003aba:	615a      	str	r2, [r3, #20]

  /* Set the background color value */
  tmp = ((uint32_t)(hltdc->Init.Backcolor.Green) << 8U);
 8003abc:	687b      	ldr	r3, [r7, #4]
 8003abe:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8003ac2:	021b      	lsls	r3, r3, #8
 8003ac4:	60fb      	str	r3, [r7, #12]
  tmp1 = ((uint32_t)(hltdc->Init.Backcolor.Red) << 16U);
 8003ac6:	687b      	ldr	r3, [r7, #4]
 8003ac8:	f893 3036 	ldrb.w	r3, [r3, #54]	; 0x36
 8003acc:	041b      	lsls	r3, r3, #16
 8003ace:	60bb      	str	r3, [r7, #8]
  hltdc->Instance->BCCR &= ~(LTDC_BCCR_BCBLUE | LTDC_BCCR_BCGREEN | LTDC_BCCR_BCRED);
 8003ad0:	687b      	ldr	r3, [r7, #4]
 8003ad2:	681b      	ldr	r3, [r3, #0]
 8003ad4:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8003ad6:	687b      	ldr	r3, [r7, #4]
 8003ad8:	681b      	ldr	r3, [r3, #0]
 8003ada:	f002 427f 	and.w	r2, r2, #4278190080	; 0xff000000
 8003ade:	62da      	str	r2, [r3, #44]	; 0x2c
  hltdc->Instance->BCCR |= (tmp1 | tmp | hltdc->Init.Backcolor.Blue);
 8003ae0:	687b      	ldr	r3, [r7, #4]
 8003ae2:	681b      	ldr	r3, [r3, #0]
 8003ae4:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 8003ae6:	68ba      	ldr	r2, [r7, #8]
 8003ae8:	68fb      	ldr	r3, [r7, #12]
 8003aea:	4313      	orrs	r3, r2
 8003aec:	687a      	ldr	r2, [r7, #4]
 8003aee:	f892 2034 	ldrb.w	r2, [r2, #52]	; 0x34
 8003af2:	431a      	orrs	r2, r3
 8003af4:	687b      	ldr	r3, [r7, #4]
 8003af6:	681b      	ldr	r3, [r3, #0]
 8003af8:	430a      	orrs	r2, r1
 8003afa:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Enable the Transfer Error and FIFO underrun interrupts */
  __HAL_LTDC_ENABLE_IT(hltdc, LTDC_IT_TE | LTDC_IT_FU);
 8003afc:	687b      	ldr	r3, [r7, #4]
 8003afe:	681b      	ldr	r3, [r3, #0]
 8003b00:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8003b02:	687b      	ldr	r3, [r7, #4]
 8003b04:	681b      	ldr	r3, [r3, #0]
 8003b06:	f042 0206 	orr.w	r2, r2, #6
 8003b0a:	635a      	str	r2, [r3, #52]	; 0x34

  /* Enable LTDC by setting LTDCEN bit */
  __HAL_LTDC_ENABLE(hltdc);
 8003b0c:	687b      	ldr	r3, [r7, #4]
 8003b0e:	681b      	ldr	r3, [r3, #0]
 8003b10:	699a      	ldr	r2, [r3, #24]
 8003b12:	687b      	ldr	r3, [r7, #4]
 8003b14:	681b      	ldr	r3, [r3, #0]
 8003b16:	f042 0201 	orr.w	r2, r2, #1
 8003b1a:	619a      	str	r2, [r3, #24]

  /* Initialize the error code */
  hltdc->ErrorCode = HAL_LTDC_ERROR_NONE;
 8003b1c:	687b      	ldr	r3, [r7, #4]
 8003b1e:	2200      	movs	r2, #0
 8003b20:	f8c3 20a4 	str.w	r2, [r3, #164]	; 0xa4

  /* Initialize the LTDC state*/
  hltdc->State = HAL_LTDC_STATE_READY;
 8003b24:	687b      	ldr	r3, [r7, #4]
 8003b26:	2201      	movs	r2, #1
 8003b28:	f883 20a1 	strb.w	r2, [r3, #161]	; 0xa1

  return HAL_OK;
 8003b2c:	2300      	movs	r3, #0
}
 8003b2e:	4618      	mov	r0, r3
 8003b30:	3710      	adds	r7, #16
 8003b32:	46bd      	mov	sp, r7
 8003b34:	bd80      	pop	{r7, pc}
 8003b36:	bf00      	nop
 8003b38:	f000f800 	.word	0xf000f800

08003b3c <HAL_LTDC_IRQHandler>:
  * @param  hltdc  pointer to a LTDC_HandleTypeDef structure that contains
  *                the configuration information for the LTDC.
  * @retval HAL status
  */
void HAL_LTDC_IRQHandler(LTDC_HandleTypeDef *hltdc)
{
 8003b3c:	b580      	push	{r7, lr}
 8003b3e:	b084      	sub	sp, #16
 8003b40:	af00      	add	r7, sp, #0
 8003b42:	6078      	str	r0, [r7, #4]
  uint32_t isrflags  = READ_REG(hltdc->Instance->ISR);
 8003b44:	687b      	ldr	r3, [r7, #4]
 8003b46:	681b      	ldr	r3, [r3, #0]
 8003b48:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003b4a:	60fb      	str	r3, [r7, #12]
  uint32_t itsources = READ_REG(hltdc->Instance->IER);
 8003b4c:	687b      	ldr	r3, [r7, #4]
 8003b4e:	681b      	ldr	r3, [r3, #0]
 8003b50:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8003b52:	60bb      	str	r3, [r7, #8]

  /* Transfer Error Interrupt management ***************************************/
  if (((isrflags & LTDC_ISR_TERRIF) != 0U) && ((itsources & LTDC_IER_TERRIE) != 0U))
 8003b54:	68fb      	ldr	r3, [r7, #12]
 8003b56:	f003 0304 	and.w	r3, r3, #4
 8003b5a:	2b00      	cmp	r3, #0
 8003b5c:	d023      	beq.n	8003ba6 <HAL_LTDC_IRQHandler+0x6a>
 8003b5e:	68bb      	ldr	r3, [r7, #8]
 8003b60:	f003 0304 	and.w	r3, r3, #4
 8003b64:	2b00      	cmp	r3, #0
 8003b66:	d01e      	beq.n	8003ba6 <HAL_LTDC_IRQHandler+0x6a>
  {
    /* Disable the transfer Error interrupt */
    __HAL_LTDC_DISABLE_IT(hltdc, LTDC_IT_TE);
 8003b68:	687b      	ldr	r3, [r7, #4]
 8003b6a:	681b      	ldr	r3, [r3, #0]
 8003b6c:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8003b6e:	687b      	ldr	r3, [r7, #4]
 8003b70:	681b      	ldr	r3, [r3, #0]
 8003b72:	f022 0204 	bic.w	r2, r2, #4
 8003b76:	635a      	str	r2, [r3, #52]	; 0x34

    /* Clear the transfer error flag */
    __HAL_LTDC_CLEAR_FLAG(hltdc, LTDC_FLAG_TE);
 8003b78:	687b      	ldr	r3, [r7, #4]
 8003b7a:	681b      	ldr	r3, [r3, #0]
 8003b7c:	2204      	movs	r2, #4
 8003b7e:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Update error code */
    hltdc->ErrorCode |= HAL_LTDC_ERROR_TE;
 8003b80:	687b      	ldr	r3, [r7, #4]
 8003b82:	f8d3 30a4 	ldr.w	r3, [r3, #164]	; 0xa4
 8003b86:	f043 0201 	orr.w	r2, r3, #1
 8003b8a:	687b      	ldr	r3, [r7, #4]
 8003b8c:	f8c3 20a4 	str.w	r2, [r3, #164]	; 0xa4

    /* Change LTDC state */
    hltdc->State = HAL_LTDC_STATE_ERROR;
 8003b90:	687b      	ldr	r3, [r7, #4]
 8003b92:	2204      	movs	r2, #4
 8003b94:	f883 20a1 	strb.w	r2, [r3, #161]	; 0xa1

    /* Process unlocked */
    __HAL_UNLOCK(hltdc);
 8003b98:	687b      	ldr	r3, [r7, #4]
 8003b9a:	2200      	movs	r2, #0
 8003b9c:	f883 20a0 	strb.w	r2, [r3, #160]	; 0xa0
#if (USE_HAL_LTDC_REGISTER_CALLBACKS == 1)
    /*Call registered error callback*/
    hltdc->ErrorCallback(hltdc);
#else
    /* Call legacy error callback*/
    HAL_LTDC_ErrorCallback(hltdc);
 8003ba0:	6878      	ldr	r0, [r7, #4]
 8003ba2:	f000 f86f 	bl	8003c84 <HAL_LTDC_ErrorCallback>
#endif /* USE_HAL_LTDC_REGISTER_CALLBACKS */
  }

  /* FIFO underrun Interrupt management ***************************************/
  if (((isrflags & LTDC_ISR_FUIF) != 0U) && ((itsources & LTDC_IER_FUIE) != 0U))
 8003ba6:	68fb      	ldr	r3, [r7, #12]
 8003ba8:	f003 0302 	and.w	r3, r3, #2
 8003bac:	2b00      	cmp	r3, #0
 8003bae:	d023      	beq.n	8003bf8 <HAL_LTDC_IRQHandler+0xbc>
 8003bb0:	68bb      	ldr	r3, [r7, #8]
 8003bb2:	f003 0302 	and.w	r3, r3, #2
 8003bb6:	2b00      	cmp	r3, #0
 8003bb8:	d01e      	beq.n	8003bf8 <HAL_LTDC_IRQHandler+0xbc>
  {
    /* Disable the FIFO underrun interrupt */
    __HAL_LTDC_DISABLE_IT(hltdc, LTDC_IT_FU);
 8003bba:	687b      	ldr	r3, [r7, #4]
 8003bbc:	681b      	ldr	r3, [r3, #0]
 8003bbe:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8003bc0:	687b      	ldr	r3, [r7, #4]
 8003bc2:	681b      	ldr	r3, [r3, #0]
 8003bc4:	f022 0202 	bic.w	r2, r2, #2
 8003bc8:	635a      	str	r2, [r3, #52]	; 0x34

    /* Clear the FIFO underrun flag */
    __HAL_LTDC_CLEAR_FLAG(hltdc, LTDC_FLAG_FU);
 8003bca:	687b      	ldr	r3, [r7, #4]
 8003bcc:	681b      	ldr	r3, [r3, #0]
 8003bce:	2202      	movs	r2, #2
 8003bd0:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Update error code */
    hltdc->ErrorCode |= HAL_LTDC_ERROR_FU;
 8003bd2:	687b      	ldr	r3, [r7, #4]
 8003bd4:	f8d3 30a4 	ldr.w	r3, [r3, #164]	; 0xa4
 8003bd8:	f043 0202 	orr.w	r2, r3, #2
 8003bdc:	687b      	ldr	r3, [r7, #4]
 8003bde:	f8c3 20a4 	str.w	r2, [r3, #164]	; 0xa4

    /* Change LTDC state */
    hltdc->State = HAL_LTDC_STATE_ERROR;
 8003be2:	687b      	ldr	r3, [r7, #4]
 8003be4:	2204      	movs	r2, #4
 8003be6:	f883 20a1 	strb.w	r2, [r3, #161]	; 0xa1

    /* Process unlocked */
    __HAL_UNLOCK(hltdc);
 8003bea:	687b      	ldr	r3, [r7, #4]
 8003bec:	2200      	movs	r2, #0
 8003bee:	f883 20a0 	strb.w	r2, [r3, #160]	; 0xa0
#if (USE_HAL_LTDC_REGISTER_CALLBACKS == 1)
    /*Call registered error callback*/
    hltdc->ErrorCallback(hltdc);
#else
    /* Call legacy error callback*/
    HAL_LTDC_ErrorCallback(hltdc);
 8003bf2:	6878      	ldr	r0, [r7, #4]
 8003bf4:	f000 f846 	bl	8003c84 <HAL_LTDC_ErrorCallback>
#endif /* USE_HAL_LTDC_REGISTER_CALLBACKS */
  }

  /* Line Interrupt management ************************************************/
  if (((isrflags & LTDC_ISR_LIF) != 0U) && ((itsources & LTDC_IER_LIE) != 0U))
 8003bf8:	68fb      	ldr	r3, [r7, #12]
 8003bfa:	f003 0301 	and.w	r3, r3, #1
 8003bfe:	2b00      	cmp	r3, #0
 8003c00:	d01b      	beq.n	8003c3a <HAL_LTDC_IRQHandler+0xfe>
 8003c02:	68bb      	ldr	r3, [r7, #8]
 8003c04:	f003 0301 	and.w	r3, r3, #1
 8003c08:	2b00      	cmp	r3, #0
 8003c0a:	d016      	beq.n	8003c3a <HAL_LTDC_IRQHandler+0xfe>
  {
    /* Disable the Line interrupt */
    __HAL_LTDC_DISABLE_IT(hltdc, LTDC_IT_LI);
 8003c0c:	687b      	ldr	r3, [r7, #4]
 8003c0e:	681b      	ldr	r3, [r3, #0]
 8003c10:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8003c12:	687b      	ldr	r3, [r7, #4]
 8003c14:	681b      	ldr	r3, [r3, #0]
 8003c16:	f022 0201 	bic.w	r2, r2, #1
 8003c1a:	635a      	str	r2, [r3, #52]	; 0x34

    /* Clear the Line interrupt flag */
    __HAL_LTDC_CLEAR_FLAG(hltdc, LTDC_FLAG_LI);
 8003c1c:	687b      	ldr	r3, [r7, #4]
 8003c1e:	681b      	ldr	r3, [r3, #0]
 8003c20:	2201      	movs	r2, #1
 8003c22:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Change LTDC state */
    hltdc->State = HAL_LTDC_STATE_READY;
 8003c24:	687b      	ldr	r3, [r7, #4]
 8003c26:	2201      	movs	r2, #1
 8003c28:	f883 20a1 	strb.w	r2, [r3, #161]	; 0xa1

    /* Process unlocked */
    __HAL_UNLOCK(hltdc);
 8003c2c:	687b      	ldr	r3, [r7, #4]
 8003c2e:	2200      	movs	r2, #0
 8003c30:	f883 20a0 	strb.w	r2, [r3, #160]	; 0xa0
#if (USE_HAL_LTDC_REGISTER_CALLBACKS == 1)
    /*Call registered Line Event callback */
    hltdc->LineEventCallback(hltdc);
#else
    /*Call Legacy Line Event callback */
    HAL_LTDC_LineEventCallback(hltdc);
 8003c34:	6878      	ldr	r0, [r7, #4]
 8003c36:	f000 f82f 	bl	8003c98 <HAL_LTDC_LineEventCallback>
#endif /* USE_HAL_LTDC_REGISTER_CALLBACKS */
  }

  /* Register reload Interrupt management ***************************************/
  if (((isrflags & LTDC_ISR_RRIF) != 0U) && ((itsources & LTDC_IER_RRIE) != 0U))
 8003c3a:	68fb      	ldr	r3, [r7, #12]
 8003c3c:	f003 0308 	and.w	r3, r3, #8
 8003c40:	2b00      	cmp	r3, #0
 8003c42:	d01b      	beq.n	8003c7c <HAL_LTDC_IRQHandler+0x140>
 8003c44:	68bb      	ldr	r3, [r7, #8]
 8003c46:	f003 0308 	and.w	r3, r3, #8
 8003c4a:	2b00      	cmp	r3, #0
 8003c4c:	d016      	beq.n	8003c7c <HAL_LTDC_IRQHandler+0x140>
  {
    /* Disable the register reload interrupt */
    __HAL_LTDC_DISABLE_IT(hltdc, LTDC_IT_RR);
 8003c4e:	687b      	ldr	r3, [r7, #4]
 8003c50:	681b      	ldr	r3, [r3, #0]
 8003c52:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8003c54:	687b      	ldr	r3, [r7, #4]
 8003c56:	681b      	ldr	r3, [r3, #0]
 8003c58:	f022 0208 	bic.w	r2, r2, #8
 8003c5c:	635a      	str	r2, [r3, #52]	; 0x34

    /* Clear the register reload flag */
    __HAL_LTDC_CLEAR_FLAG(hltdc, LTDC_FLAG_RR);
 8003c5e:	687b      	ldr	r3, [r7, #4]
 8003c60:	681b      	ldr	r3, [r3, #0]
 8003c62:	2208      	movs	r2, #8
 8003c64:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Change LTDC state */
    hltdc->State = HAL_LTDC_STATE_READY;
 8003c66:	687b      	ldr	r3, [r7, #4]
 8003c68:	2201      	movs	r2, #1
 8003c6a:	f883 20a1 	strb.w	r2, [r3, #161]	; 0xa1

    /* Process unlocked */
    __HAL_UNLOCK(hltdc);
 8003c6e:	687b      	ldr	r3, [r7, #4]
 8003c70:	2200      	movs	r2, #0
 8003c72:	f883 20a0 	strb.w	r2, [r3, #160]	; 0xa0
#if (USE_HAL_LTDC_REGISTER_CALLBACKS == 1)
    /*Call registered reload Event callback */
    hltdc->ReloadEventCallback(hltdc);
#else
    /*Call Legacy Reload Event callback */
    HAL_LTDC_ReloadEventCallback(hltdc);
 8003c76:	6878      	ldr	r0, [r7, #4]
 8003c78:	f000 f818 	bl	8003cac <HAL_LTDC_ReloadEventCallback>
#endif /* USE_HAL_LTDC_REGISTER_CALLBACKS */
  }
}
 8003c7c:	bf00      	nop
 8003c7e:	3710      	adds	r7, #16
 8003c80:	46bd      	mov	sp, r7
 8003c82:	bd80      	pop	{r7, pc}

08003c84 <HAL_LTDC_ErrorCallback>:
  * @param  hltdc  pointer to a LTDC_HandleTypeDef structure that contains
  *                the configuration information for the LTDC.
  * @retval None
  */
__weak void HAL_LTDC_ErrorCallback(LTDC_HandleTypeDef *hltdc)
{
 8003c84:	b480      	push	{r7}
 8003c86:	b083      	sub	sp, #12
 8003c88:	af00      	add	r7, sp, #0
 8003c8a:	6078      	str	r0, [r7, #4]
  UNUSED(hltdc);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_LTDC_ErrorCallback could be implemented in the user file
   */
}
 8003c8c:	bf00      	nop
 8003c8e:	370c      	adds	r7, #12
 8003c90:	46bd      	mov	sp, r7
 8003c92:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003c96:	4770      	bx	lr

08003c98 <HAL_LTDC_LineEventCallback>:
  * @param  hltdc  pointer to a LTDC_HandleTypeDef structure that contains
  *                the configuration information for the LTDC.
  * @retval None
  */
__weak void HAL_LTDC_LineEventCallback(LTDC_HandleTypeDef *hltdc)
{
 8003c98:	b480      	push	{r7}
 8003c9a:	b083      	sub	sp, #12
 8003c9c:	af00      	add	r7, sp, #0
 8003c9e:	6078      	str	r0, [r7, #4]
  UNUSED(hltdc);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_LTDC_LineEventCallback could be implemented in the user file
   */
}
 8003ca0:	bf00      	nop
 8003ca2:	370c      	adds	r7, #12
 8003ca4:	46bd      	mov	sp, r7
 8003ca6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003caa:	4770      	bx	lr

08003cac <HAL_LTDC_ReloadEventCallback>:
  * @param  hltdc  pointer to a LTDC_HandleTypeDef structure that contains
  *                the configuration information for the LTDC.
  * @retval None
  */
__weak void HAL_LTDC_ReloadEventCallback(LTDC_HandleTypeDef *hltdc)
{
 8003cac:	b480      	push	{r7}
 8003cae:	b083      	sub	sp, #12
 8003cb0:	af00      	add	r7, sp, #0
 8003cb2:	6078      	str	r0, [r7, #4]
  UNUSED(hltdc);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_LTDC_ReloadEvenCallback could be implemented in the user file
   */
}
 8003cb4:	bf00      	nop
 8003cb6:	370c      	adds	r7, #12
 8003cb8:	46bd      	mov	sp, r7
 8003cba:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003cbe:	4770      	bx	lr

08003cc0 <HAL_LTDC_ConfigLayer>:
  *                    This parameter can be one of the following values:
  *                    LTDC_LAYER_1 (0) or LTDC_LAYER_2 (1)
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_LTDC_ConfigLayer(LTDC_HandleTypeDef *hltdc, LTDC_LayerCfgTypeDef *pLayerCfg, uint32_t LayerIdx)
{
 8003cc0:	b5b0      	push	{r4, r5, r7, lr}
 8003cc2:	b084      	sub	sp, #16
 8003cc4:	af00      	add	r7, sp, #0
 8003cc6:	60f8      	str	r0, [r7, #12]
 8003cc8:	60b9      	str	r1, [r7, #8]
 8003cca:	607a      	str	r2, [r7, #4]
  assert_param(IS_LTDC_BLENDING_FACTOR2(pLayerCfg->BlendingFactor2));
  assert_param(IS_LTDC_CFBLL(pLayerCfg->ImageWidth));
  assert_param(IS_LTDC_CFBLNBR(pLayerCfg->ImageHeight));

  /* Process locked */
  __HAL_LOCK(hltdc);
 8003ccc:	68fb      	ldr	r3, [r7, #12]
 8003cce:	f893 30a0 	ldrb.w	r3, [r3, #160]	; 0xa0
 8003cd2:	2b01      	cmp	r3, #1
 8003cd4:	d101      	bne.n	8003cda <HAL_LTDC_ConfigLayer+0x1a>
 8003cd6:	2302      	movs	r3, #2
 8003cd8:	e02c      	b.n	8003d34 <HAL_LTDC_ConfigLayer+0x74>
 8003cda:	68fb      	ldr	r3, [r7, #12]
 8003cdc:	2201      	movs	r2, #1
 8003cde:	f883 20a0 	strb.w	r2, [r3, #160]	; 0xa0

  /* Change LTDC peripheral state */
  hltdc->State = HAL_LTDC_STATE_BUSY;
 8003ce2:	68fb      	ldr	r3, [r7, #12]
 8003ce4:	2202      	movs	r2, #2
 8003ce6:	f883 20a1 	strb.w	r2, [r3, #161]	; 0xa1

  /* Copy new layer configuration into handle structure */
  hltdc->LayerCfg[LayerIdx] = *pLayerCfg;
 8003cea:	68fa      	ldr	r2, [r7, #12]
 8003cec:	687b      	ldr	r3, [r7, #4]
 8003cee:	2134      	movs	r1, #52	; 0x34
 8003cf0:	fb01 f303 	mul.w	r3, r1, r3
 8003cf4:	4413      	add	r3, r2
 8003cf6:	f103 0238 	add.w	r2, r3, #56	; 0x38
 8003cfa:	68bb      	ldr	r3, [r7, #8]
 8003cfc:	4614      	mov	r4, r2
 8003cfe:	461d      	mov	r5, r3
 8003d00:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8003d02:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8003d04:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8003d06:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8003d08:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8003d0a:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8003d0c:	682b      	ldr	r3, [r5, #0]
 8003d0e:	6023      	str	r3, [r4, #0]

  /* Configure the LTDC Layer */
  LTDC_SetConfig(hltdc, pLayerCfg, LayerIdx);
 8003d10:	687a      	ldr	r2, [r7, #4]
 8003d12:	68b9      	ldr	r1, [r7, #8]
 8003d14:	68f8      	ldr	r0, [r7, #12]
 8003d16:	f000 f811 	bl	8003d3c <LTDC_SetConfig>

  /* Set the Immediate Reload type */
  hltdc->Instance->SRCR = LTDC_SRCR_IMR;
 8003d1a:	68fb      	ldr	r3, [r7, #12]
 8003d1c:	681b      	ldr	r3, [r3, #0]
 8003d1e:	2201      	movs	r2, #1
 8003d20:	625a      	str	r2, [r3, #36]	; 0x24

  /* Initialize the LTDC state*/
  hltdc->State  = HAL_LTDC_STATE_READY;
 8003d22:	68fb      	ldr	r3, [r7, #12]
 8003d24:	2201      	movs	r2, #1
 8003d26:	f883 20a1 	strb.w	r2, [r3, #161]	; 0xa1

  /* Process unlocked */
  __HAL_UNLOCK(hltdc);
 8003d2a:	68fb      	ldr	r3, [r7, #12]
 8003d2c:	2200      	movs	r2, #0
 8003d2e:	f883 20a0 	strb.w	r2, [r3, #160]	; 0xa0

  return HAL_OK;
 8003d32:	2300      	movs	r3, #0
}
 8003d34:	4618      	mov	r0, r3
 8003d36:	3710      	adds	r7, #16
 8003d38:	46bd      	mov	sp, r7
 8003d3a:	bdb0      	pop	{r4, r5, r7, pc}

08003d3c <LTDC_SetConfig>:
  * @param  LayerIdx  LTDC Layer index.
  *                   This parameter can be one of the following values: LTDC_LAYER_1 (0) or LTDC_LAYER_2 (1)
  * @retval None
  */
static void LTDC_SetConfig(LTDC_HandleTypeDef *hltdc, LTDC_LayerCfgTypeDef *pLayerCfg, uint32_t LayerIdx)
{
 8003d3c:	b480      	push	{r7}
 8003d3e:	b089      	sub	sp, #36	; 0x24
 8003d40:	af00      	add	r7, sp, #0
 8003d42:	60f8      	str	r0, [r7, #12]
 8003d44:	60b9      	str	r1, [r7, #8]
 8003d46:	607a      	str	r2, [r7, #4]
  uint32_t tmp;
  uint32_t tmp1;
  uint32_t tmp2;

  /* Configure the horizontal start and stop position */
  tmp = ((pLayerCfg->WindowX1 + ((hltdc->Instance->BPCR & LTDC_BPCR_AHBP) >> 16U)) << 16U);
 8003d48:	68bb      	ldr	r3, [r7, #8]
 8003d4a:	685a      	ldr	r2, [r3, #4]
 8003d4c:	68fb      	ldr	r3, [r7, #12]
 8003d4e:	681b      	ldr	r3, [r3, #0]
 8003d50:	68db      	ldr	r3, [r3, #12]
 8003d52:	0c1b      	lsrs	r3, r3, #16
 8003d54:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8003d58:	4413      	add	r3, r2
 8003d5a:	041b      	lsls	r3, r3, #16
 8003d5c:	61fb      	str	r3, [r7, #28]
  LTDC_LAYER(hltdc, LayerIdx)->WHPCR &= ~(LTDC_LxWHPCR_WHSTPOS | LTDC_LxWHPCR_WHSPPOS);
 8003d5e:	68fb      	ldr	r3, [r7, #12]
 8003d60:	681b      	ldr	r3, [r3, #0]
 8003d62:	461a      	mov	r2, r3
 8003d64:	687b      	ldr	r3, [r7, #4]
 8003d66:	01db      	lsls	r3, r3, #7
 8003d68:	4413      	add	r3, r2
 8003d6a:	3384      	adds	r3, #132	; 0x84
 8003d6c:	685b      	ldr	r3, [r3, #4]
 8003d6e:	68fa      	ldr	r2, [r7, #12]
 8003d70:	6812      	ldr	r2, [r2, #0]
 8003d72:	4611      	mov	r1, r2
 8003d74:	687a      	ldr	r2, [r7, #4]
 8003d76:	01d2      	lsls	r2, r2, #7
 8003d78:	440a      	add	r2, r1
 8003d7a:	3284      	adds	r2, #132	; 0x84
 8003d7c:	f403 4370 	and.w	r3, r3, #61440	; 0xf000
 8003d80:	6053      	str	r3, [r2, #4]
  LTDC_LAYER(hltdc, LayerIdx)->WHPCR = ((pLayerCfg->WindowX0 + \
 8003d82:	68bb      	ldr	r3, [r7, #8]
 8003d84:	681a      	ldr	r2, [r3, #0]
                                         ((hltdc->Instance->BPCR & LTDC_BPCR_AHBP) >> 16U) + 1U) | tmp);
 8003d86:	68fb      	ldr	r3, [r7, #12]
 8003d88:	681b      	ldr	r3, [r3, #0]
 8003d8a:	68db      	ldr	r3, [r3, #12]
 8003d8c:	0c1b      	lsrs	r3, r3, #16
 8003d8e:	f3c3 030b 	ubfx	r3, r3, #0, #12
  LTDC_LAYER(hltdc, LayerIdx)->WHPCR = ((pLayerCfg->WindowX0 + \
 8003d92:	4413      	add	r3, r2
                                         ((hltdc->Instance->BPCR & LTDC_BPCR_AHBP) >> 16U) + 1U) | tmp);
 8003d94:	1c5a      	adds	r2, r3, #1
  LTDC_LAYER(hltdc, LayerIdx)->WHPCR = ((pLayerCfg->WindowX0 + \
 8003d96:	68fb      	ldr	r3, [r7, #12]
 8003d98:	681b      	ldr	r3, [r3, #0]
 8003d9a:	4619      	mov	r1, r3
 8003d9c:	687b      	ldr	r3, [r7, #4]
 8003d9e:	01db      	lsls	r3, r3, #7
 8003da0:	440b      	add	r3, r1
 8003da2:	3384      	adds	r3, #132	; 0x84
 8003da4:	4619      	mov	r1, r3
                                         ((hltdc->Instance->BPCR & LTDC_BPCR_AHBP) >> 16U) + 1U) | tmp);
 8003da6:	69fb      	ldr	r3, [r7, #28]
 8003da8:	4313      	orrs	r3, r2
  LTDC_LAYER(hltdc, LayerIdx)->WHPCR = ((pLayerCfg->WindowX0 + \
 8003daa:	604b      	str	r3, [r1, #4]

  /* Configure the vertical start and stop position */
  tmp = ((pLayerCfg->WindowY1 + (hltdc->Instance->BPCR & LTDC_BPCR_AVBP)) << 16U);
 8003dac:	68bb      	ldr	r3, [r7, #8]
 8003dae:	68da      	ldr	r2, [r3, #12]
 8003db0:	68fb      	ldr	r3, [r7, #12]
 8003db2:	681b      	ldr	r3, [r3, #0]
 8003db4:	68db      	ldr	r3, [r3, #12]
 8003db6:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8003dba:	4413      	add	r3, r2
 8003dbc:	041b      	lsls	r3, r3, #16
 8003dbe:	61fb      	str	r3, [r7, #28]
  LTDC_LAYER(hltdc, LayerIdx)->WVPCR &= ~(LTDC_LxWVPCR_WVSTPOS | LTDC_LxWVPCR_WVSPPOS);
 8003dc0:	68fb      	ldr	r3, [r7, #12]
 8003dc2:	681b      	ldr	r3, [r3, #0]
 8003dc4:	461a      	mov	r2, r3
 8003dc6:	687b      	ldr	r3, [r7, #4]
 8003dc8:	01db      	lsls	r3, r3, #7
 8003dca:	4413      	add	r3, r2
 8003dcc:	3384      	adds	r3, #132	; 0x84
 8003dce:	689b      	ldr	r3, [r3, #8]
 8003dd0:	68fa      	ldr	r2, [r7, #12]
 8003dd2:	6812      	ldr	r2, [r2, #0]
 8003dd4:	4611      	mov	r1, r2
 8003dd6:	687a      	ldr	r2, [r7, #4]
 8003dd8:	01d2      	lsls	r2, r2, #7
 8003dda:	440a      	add	r2, r1
 8003ddc:	3284      	adds	r2, #132	; 0x84
 8003dde:	f403 4370 	and.w	r3, r3, #61440	; 0xf000
 8003de2:	6093      	str	r3, [r2, #8]
  LTDC_LAYER(hltdc, LayerIdx)->WVPCR  = ((pLayerCfg->WindowY0 + (hltdc->Instance->BPCR & LTDC_BPCR_AVBP) + 1U) | tmp);
 8003de4:	68bb      	ldr	r3, [r7, #8]
 8003de6:	689a      	ldr	r2, [r3, #8]
 8003de8:	68fb      	ldr	r3, [r7, #12]
 8003dea:	681b      	ldr	r3, [r3, #0]
 8003dec:	68db      	ldr	r3, [r3, #12]
 8003dee:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8003df2:	4413      	add	r3, r2
 8003df4:	1c5a      	adds	r2, r3, #1
 8003df6:	68fb      	ldr	r3, [r7, #12]
 8003df8:	681b      	ldr	r3, [r3, #0]
 8003dfa:	4619      	mov	r1, r3
 8003dfc:	687b      	ldr	r3, [r7, #4]
 8003dfe:	01db      	lsls	r3, r3, #7
 8003e00:	440b      	add	r3, r1
 8003e02:	3384      	adds	r3, #132	; 0x84
 8003e04:	4619      	mov	r1, r3
 8003e06:	69fb      	ldr	r3, [r7, #28]
 8003e08:	4313      	orrs	r3, r2
 8003e0a:	608b      	str	r3, [r1, #8]

  /* Specifies the pixel format */
  LTDC_LAYER(hltdc, LayerIdx)->PFCR &= ~(LTDC_LxPFCR_PF);
 8003e0c:	68fb      	ldr	r3, [r7, #12]
 8003e0e:	681b      	ldr	r3, [r3, #0]
 8003e10:	461a      	mov	r2, r3
 8003e12:	687b      	ldr	r3, [r7, #4]
 8003e14:	01db      	lsls	r3, r3, #7
 8003e16:	4413      	add	r3, r2
 8003e18:	3384      	adds	r3, #132	; 0x84
 8003e1a:	691b      	ldr	r3, [r3, #16]
 8003e1c:	68fa      	ldr	r2, [r7, #12]
 8003e1e:	6812      	ldr	r2, [r2, #0]
 8003e20:	4611      	mov	r1, r2
 8003e22:	687a      	ldr	r2, [r7, #4]
 8003e24:	01d2      	lsls	r2, r2, #7
 8003e26:	440a      	add	r2, r1
 8003e28:	3284      	adds	r2, #132	; 0x84
 8003e2a:	f023 0307 	bic.w	r3, r3, #7
 8003e2e:	6113      	str	r3, [r2, #16]
  LTDC_LAYER(hltdc, LayerIdx)->PFCR = (pLayerCfg->PixelFormat);
 8003e30:	68fb      	ldr	r3, [r7, #12]
 8003e32:	681b      	ldr	r3, [r3, #0]
 8003e34:	461a      	mov	r2, r3
 8003e36:	687b      	ldr	r3, [r7, #4]
 8003e38:	01db      	lsls	r3, r3, #7
 8003e3a:	4413      	add	r3, r2
 8003e3c:	3384      	adds	r3, #132	; 0x84
 8003e3e:	461a      	mov	r2, r3
 8003e40:	68bb      	ldr	r3, [r7, #8]
 8003e42:	691b      	ldr	r3, [r3, #16]
 8003e44:	6113      	str	r3, [r2, #16]

  /* Configure the default color values */
  tmp = ((uint32_t)(pLayerCfg->Backcolor.Green) << 8U);
 8003e46:	68bb      	ldr	r3, [r7, #8]
 8003e48:	f893 3031 	ldrb.w	r3, [r3, #49]	; 0x31
 8003e4c:	021b      	lsls	r3, r3, #8
 8003e4e:	61fb      	str	r3, [r7, #28]
  tmp1 = ((uint32_t)(pLayerCfg->Backcolor.Red) << 16U);
 8003e50:	68bb      	ldr	r3, [r7, #8]
 8003e52:	f893 3032 	ldrb.w	r3, [r3, #50]	; 0x32
 8003e56:	041b      	lsls	r3, r3, #16
 8003e58:	61bb      	str	r3, [r7, #24]
  tmp2 = (pLayerCfg->Alpha0 << 24U);
 8003e5a:	68bb      	ldr	r3, [r7, #8]
 8003e5c:	699b      	ldr	r3, [r3, #24]
 8003e5e:	061b      	lsls	r3, r3, #24
 8003e60:	617b      	str	r3, [r7, #20]
  LTDC_LAYER(hltdc, LayerIdx)->DCCR &= ~(LTDC_LxDCCR_DCBLUE | LTDC_LxDCCR_DCGREEN | LTDC_LxDCCR_DCRED |
 8003e62:	68fb      	ldr	r3, [r7, #12]
 8003e64:	681b      	ldr	r3, [r3, #0]
 8003e66:	461a      	mov	r2, r3
 8003e68:	687b      	ldr	r3, [r7, #4]
 8003e6a:	01db      	lsls	r3, r3, #7
 8003e6c:	4413      	add	r3, r2
 8003e6e:	3384      	adds	r3, #132	; 0x84
 8003e70:	699b      	ldr	r3, [r3, #24]
 8003e72:	68fb      	ldr	r3, [r7, #12]
 8003e74:	681b      	ldr	r3, [r3, #0]
 8003e76:	461a      	mov	r2, r3
 8003e78:	687b      	ldr	r3, [r7, #4]
 8003e7a:	01db      	lsls	r3, r3, #7
 8003e7c:	4413      	add	r3, r2
 8003e7e:	3384      	adds	r3, #132	; 0x84
 8003e80:	461a      	mov	r2, r3
 8003e82:	2300      	movs	r3, #0
 8003e84:	6193      	str	r3, [r2, #24]
                                         LTDC_LxDCCR_DCALPHA);
  LTDC_LAYER(hltdc, LayerIdx)->DCCR = (pLayerCfg->Backcolor.Blue | tmp | tmp1 | tmp2);
 8003e86:	68bb      	ldr	r3, [r7, #8]
 8003e88:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 8003e8c:	461a      	mov	r2, r3
 8003e8e:	69fb      	ldr	r3, [r7, #28]
 8003e90:	431a      	orrs	r2, r3
 8003e92:	69bb      	ldr	r3, [r7, #24]
 8003e94:	431a      	orrs	r2, r3
 8003e96:	68fb      	ldr	r3, [r7, #12]
 8003e98:	681b      	ldr	r3, [r3, #0]
 8003e9a:	4619      	mov	r1, r3
 8003e9c:	687b      	ldr	r3, [r7, #4]
 8003e9e:	01db      	lsls	r3, r3, #7
 8003ea0:	440b      	add	r3, r1
 8003ea2:	3384      	adds	r3, #132	; 0x84
 8003ea4:	4619      	mov	r1, r3
 8003ea6:	697b      	ldr	r3, [r7, #20]
 8003ea8:	4313      	orrs	r3, r2
 8003eaa:	618b      	str	r3, [r1, #24]

  /* Specifies the constant alpha value */
  LTDC_LAYER(hltdc, LayerIdx)->CACR &= ~(LTDC_LxCACR_CONSTA);
 8003eac:	68fb      	ldr	r3, [r7, #12]
 8003eae:	681b      	ldr	r3, [r3, #0]
 8003eb0:	461a      	mov	r2, r3
 8003eb2:	687b      	ldr	r3, [r7, #4]
 8003eb4:	01db      	lsls	r3, r3, #7
 8003eb6:	4413      	add	r3, r2
 8003eb8:	3384      	adds	r3, #132	; 0x84
 8003eba:	695b      	ldr	r3, [r3, #20]
 8003ebc:	68fa      	ldr	r2, [r7, #12]
 8003ebe:	6812      	ldr	r2, [r2, #0]
 8003ec0:	4611      	mov	r1, r2
 8003ec2:	687a      	ldr	r2, [r7, #4]
 8003ec4:	01d2      	lsls	r2, r2, #7
 8003ec6:	440a      	add	r2, r1
 8003ec8:	3284      	adds	r2, #132	; 0x84
 8003eca:	f023 03ff 	bic.w	r3, r3, #255	; 0xff
 8003ece:	6153      	str	r3, [r2, #20]
  LTDC_LAYER(hltdc, LayerIdx)->CACR = (pLayerCfg->Alpha);
 8003ed0:	68fb      	ldr	r3, [r7, #12]
 8003ed2:	681b      	ldr	r3, [r3, #0]
 8003ed4:	461a      	mov	r2, r3
 8003ed6:	687b      	ldr	r3, [r7, #4]
 8003ed8:	01db      	lsls	r3, r3, #7
 8003eda:	4413      	add	r3, r2
 8003edc:	3384      	adds	r3, #132	; 0x84
 8003ede:	461a      	mov	r2, r3
 8003ee0:	68bb      	ldr	r3, [r7, #8]
 8003ee2:	695b      	ldr	r3, [r3, #20]
 8003ee4:	6153      	str	r3, [r2, #20]

  /* Specifies the blending factors */
  LTDC_LAYER(hltdc, LayerIdx)->BFCR &= ~(LTDC_LxBFCR_BF2 | LTDC_LxBFCR_BF1);
 8003ee6:	68fb      	ldr	r3, [r7, #12]
 8003ee8:	681b      	ldr	r3, [r3, #0]
 8003eea:	461a      	mov	r2, r3
 8003eec:	687b      	ldr	r3, [r7, #4]
 8003eee:	01db      	lsls	r3, r3, #7
 8003ef0:	4413      	add	r3, r2
 8003ef2:	3384      	adds	r3, #132	; 0x84
 8003ef4:	69db      	ldr	r3, [r3, #28]
 8003ef6:	68fa      	ldr	r2, [r7, #12]
 8003ef8:	6812      	ldr	r2, [r2, #0]
 8003efa:	4611      	mov	r1, r2
 8003efc:	687a      	ldr	r2, [r7, #4]
 8003efe:	01d2      	lsls	r2, r2, #7
 8003f00:	440a      	add	r2, r1
 8003f02:	3284      	adds	r2, #132	; 0x84
 8003f04:	f423 63e0 	bic.w	r3, r3, #1792	; 0x700
 8003f08:	f023 0307 	bic.w	r3, r3, #7
 8003f0c:	61d3      	str	r3, [r2, #28]
  LTDC_LAYER(hltdc, LayerIdx)->BFCR = (pLayerCfg->BlendingFactor1 | pLayerCfg->BlendingFactor2);
 8003f0e:	68bb      	ldr	r3, [r7, #8]
 8003f10:	69da      	ldr	r2, [r3, #28]
 8003f12:	68bb      	ldr	r3, [r7, #8]
 8003f14:	6a1b      	ldr	r3, [r3, #32]
 8003f16:	68f9      	ldr	r1, [r7, #12]
 8003f18:	6809      	ldr	r1, [r1, #0]
 8003f1a:	4608      	mov	r0, r1
 8003f1c:	6879      	ldr	r1, [r7, #4]
 8003f1e:	01c9      	lsls	r1, r1, #7
 8003f20:	4401      	add	r1, r0
 8003f22:	3184      	adds	r1, #132	; 0x84
 8003f24:	4313      	orrs	r3, r2
 8003f26:	61cb      	str	r3, [r1, #28]

  /* Configure the color frame buffer start address */
  LTDC_LAYER(hltdc, LayerIdx)->CFBAR &= ~(LTDC_LxCFBAR_CFBADD);
 8003f28:	68fb      	ldr	r3, [r7, #12]
 8003f2a:	681b      	ldr	r3, [r3, #0]
 8003f2c:	461a      	mov	r2, r3
 8003f2e:	687b      	ldr	r3, [r7, #4]
 8003f30:	01db      	lsls	r3, r3, #7
 8003f32:	4413      	add	r3, r2
 8003f34:	3384      	adds	r3, #132	; 0x84
 8003f36:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003f38:	68fb      	ldr	r3, [r7, #12]
 8003f3a:	681b      	ldr	r3, [r3, #0]
 8003f3c:	461a      	mov	r2, r3
 8003f3e:	687b      	ldr	r3, [r7, #4]
 8003f40:	01db      	lsls	r3, r3, #7
 8003f42:	4413      	add	r3, r2
 8003f44:	3384      	adds	r3, #132	; 0x84
 8003f46:	461a      	mov	r2, r3
 8003f48:	2300      	movs	r3, #0
 8003f4a:	6293      	str	r3, [r2, #40]	; 0x28
  LTDC_LAYER(hltdc, LayerIdx)->CFBAR = (pLayerCfg->FBStartAdress);
 8003f4c:	68fb      	ldr	r3, [r7, #12]
 8003f4e:	681b      	ldr	r3, [r3, #0]
 8003f50:	461a      	mov	r2, r3
 8003f52:	687b      	ldr	r3, [r7, #4]
 8003f54:	01db      	lsls	r3, r3, #7
 8003f56:	4413      	add	r3, r2
 8003f58:	3384      	adds	r3, #132	; 0x84
 8003f5a:	461a      	mov	r2, r3
 8003f5c:	68bb      	ldr	r3, [r7, #8]
 8003f5e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003f60:	6293      	str	r3, [r2, #40]	; 0x28

  if (pLayerCfg->PixelFormat == LTDC_PIXEL_FORMAT_ARGB8888)
 8003f62:	68bb      	ldr	r3, [r7, #8]
 8003f64:	691b      	ldr	r3, [r3, #16]
 8003f66:	2b00      	cmp	r3, #0
 8003f68:	d102      	bne.n	8003f70 <LTDC_SetConfig+0x234>
  {
    tmp = 4U;
 8003f6a:	2304      	movs	r3, #4
 8003f6c:	61fb      	str	r3, [r7, #28]
 8003f6e:	e01b      	b.n	8003fa8 <LTDC_SetConfig+0x26c>
  }
  else if (pLayerCfg->PixelFormat == LTDC_PIXEL_FORMAT_RGB888)
 8003f70:	68bb      	ldr	r3, [r7, #8]
 8003f72:	691b      	ldr	r3, [r3, #16]
 8003f74:	2b01      	cmp	r3, #1
 8003f76:	d102      	bne.n	8003f7e <LTDC_SetConfig+0x242>
  {
    tmp = 3U;
 8003f78:	2303      	movs	r3, #3
 8003f7a:	61fb      	str	r3, [r7, #28]
 8003f7c:	e014      	b.n	8003fa8 <LTDC_SetConfig+0x26c>
  }
  else if ((pLayerCfg->PixelFormat == LTDC_PIXEL_FORMAT_ARGB4444) || \
 8003f7e:	68bb      	ldr	r3, [r7, #8]
 8003f80:	691b      	ldr	r3, [r3, #16]
 8003f82:	2b04      	cmp	r3, #4
 8003f84:	d00b      	beq.n	8003f9e <LTDC_SetConfig+0x262>
           (pLayerCfg->PixelFormat == LTDC_PIXEL_FORMAT_RGB565)   || \
 8003f86:	68bb      	ldr	r3, [r7, #8]
 8003f88:	691b      	ldr	r3, [r3, #16]
  else if ((pLayerCfg->PixelFormat == LTDC_PIXEL_FORMAT_ARGB4444) || \
 8003f8a:	2b02      	cmp	r3, #2
 8003f8c:	d007      	beq.n	8003f9e <LTDC_SetConfig+0x262>
           (pLayerCfg->PixelFormat == LTDC_PIXEL_FORMAT_ARGB1555) || \
 8003f8e:	68bb      	ldr	r3, [r7, #8]
 8003f90:	691b      	ldr	r3, [r3, #16]
           (pLayerCfg->PixelFormat == LTDC_PIXEL_FORMAT_RGB565)   || \
 8003f92:	2b03      	cmp	r3, #3
 8003f94:	d003      	beq.n	8003f9e <LTDC_SetConfig+0x262>
           (pLayerCfg->PixelFormat == LTDC_PIXEL_FORMAT_AL88))
 8003f96:	68bb      	ldr	r3, [r7, #8]
 8003f98:	691b      	ldr	r3, [r3, #16]
           (pLayerCfg->PixelFormat == LTDC_PIXEL_FORMAT_ARGB1555) || \
 8003f9a:	2b07      	cmp	r3, #7
 8003f9c:	d102      	bne.n	8003fa4 <LTDC_SetConfig+0x268>
  {
    tmp = 2U;
 8003f9e:	2302      	movs	r3, #2
 8003fa0:	61fb      	str	r3, [r7, #28]
 8003fa2:	e001      	b.n	8003fa8 <LTDC_SetConfig+0x26c>
  }
  else
  {
    tmp = 1U;
 8003fa4:	2301      	movs	r3, #1
 8003fa6:	61fb      	str	r3, [r7, #28]
  }

  /* Configure the color frame buffer pitch in byte */
  LTDC_LAYER(hltdc, LayerIdx)->CFBLR  &= ~(LTDC_LxCFBLR_CFBLL | LTDC_LxCFBLR_CFBP);
 8003fa8:	68fb      	ldr	r3, [r7, #12]
 8003faa:	681b      	ldr	r3, [r3, #0]
 8003fac:	461a      	mov	r2, r3
 8003fae:	687b      	ldr	r3, [r7, #4]
 8003fb0:	01db      	lsls	r3, r3, #7
 8003fb2:	4413      	add	r3, r2
 8003fb4:	3384      	adds	r3, #132	; 0x84
 8003fb6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003fb8:	68fa      	ldr	r2, [r7, #12]
 8003fba:	6812      	ldr	r2, [r2, #0]
 8003fbc:	4611      	mov	r1, r2
 8003fbe:	687a      	ldr	r2, [r7, #4]
 8003fc0:	01d2      	lsls	r2, r2, #7
 8003fc2:	440a      	add	r2, r1
 8003fc4:	3284      	adds	r2, #132	; 0x84
 8003fc6:	f003 23e0 	and.w	r3, r3, #3758153728	; 0xe000e000
 8003fca:	62d3      	str	r3, [r2, #44]	; 0x2c
  LTDC_LAYER(hltdc, LayerIdx)->CFBLR  = (((pLayerCfg->ImageWidth * tmp) << 16U) | \
 8003fcc:	68bb      	ldr	r3, [r7, #8]
 8003fce:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003fd0:	69fa      	ldr	r2, [r7, #28]
 8003fd2:	fb02 f303 	mul.w	r3, r2, r3
 8003fd6:	041a      	lsls	r2, r3, #16
                                         (((pLayerCfg->WindowX1 - pLayerCfg->WindowX0) * tmp)  + 3U));
 8003fd8:	68bb      	ldr	r3, [r7, #8]
 8003fda:	6859      	ldr	r1, [r3, #4]
 8003fdc:	68bb      	ldr	r3, [r7, #8]
 8003fde:	681b      	ldr	r3, [r3, #0]
 8003fe0:	1acb      	subs	r3, r1, r3
 8003fe2:	69f9      	ldr	r1, [r7, #28]
 8003fe4:	fb01 f303 	mul.w	r3, r1, r3
 8003fe8:	3303      	adds	r3, #3
  LTDC_LAYER(hltdc, LayerIdx)->CFBLR  = (((pLayerCfg->ImageWidth * tmp) << 16U) | \
 8003fea:	68f9      	ldr	r1, [r7, #12]
 8003fec:	6809      	ldr	r1, [r1, #0]
 8003fee:	4608      	mov	r0, r1
 8003ff0:	6879      	ldr	r1, [r7, #4]
 8003ff2:	01c9      	lsls	r1, r1, #7
 8003ff4:	4401      	add	r1, r0
 8003ff6:	3184      	adds	r1, #132	; 0x84
 8003ff8:	4313      	orrs	r3, r2
 8003ffa:	62cb      	str	r3, [r1, #44]	; 0x2c
  /* Configure the frame buffer line number */
  LTDC_LAYER(hltdc, LayerIdx)->CFBLNR  &= ~(LTDC_LxCFBLNR_CFBLNBR);
 8003ffc:	68fb      	ldr	r3, [r7, #12]
 8003ffe:	681b      	ldr	r3, [r3, #0]
 8004000:	461a      	mov	r2, r3
 8004002:	687b      	ldr	r3, [r7, #4]
 8004004:	01db      	lsls	r3, r3, #7
 8004006:	4413      	add	r3, r2
 8004008:	3384      	adds	r3, #132	; 0x84
 800400a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800400c:	68fa      	ldr	r2, [r7, #12]
 800400e:	6812      	ldr	r2, [r2, #0]
 8004010:	4611      	mov	r1, r2
 8004012:	687a      	ldr	r2, [r7, #4]
 8004014:	01d2      	lsls	r2, r2, #7
 8004016:	440a      	add	r2, r1
 8004018:	3284      	adds	r2, #132	; 0x84
 800401a:	f423 63ff 	bic.w	r3, r3, #2040	; 0x7f8
 800401e:	f023 0307 	bic.w	r3, r3, #7
 8004022:	6313      	str	r3, [r2, #48]	; 0x30
  LTDC_LAYER(hltdc, LayerIdx)->CFBLNR  = (pLayerCfg->ImageHeight);
 8004024:	68fb      	ldr	r3, [r7, #12]
 8004026:	681b      	ldr	r3, [r3, #0]
 8004028:	461a      	mov	r2, r3
 800402a:	687b      	ldr	r3, [r7, #4]
 800402c:	01db      	lsls	r3, r3, #7
 800402e:	4413      	add	r3, r2
 8004030:	3384      	adds	r3, #132	; 0x84
 8004032:	461a      	mov	r2, r3
 8004034:	68bb      	ldr	r3, [r7, #8]
 8004036:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004038:	6313      	str	r3, [r2, #48]	; 0x30

  /* Enable LTDC_Layer by setting LEN bit */
  LTDC_LAYER(hltdc, LayerIdx)->CR |= (uint32_t)LTDC_LxCR_LEN;
 800403a:	68fb      	ldr	r3, [r7, #12]
 800403c:	681b      	ldr	r3, [r3, #0]
 800403e:	461a      	mov	r2, r3
 8004040:	687b      	ldr	r3, [r7, #4]
 8004042:	01db      	lsls	r3, r3, #7
 8004044:	4413      	add	r3, r2
 8004046:	3384      	adds	r3, #132	; 0x84
 8004048:	681b      	ldr	r3, [r3, #0]
 800404a:	68fa      	ldr	r2, [r7, #12]
 800404c:	6812      	ldr	r2, [r2, #0]
 800404e:	4611      	mov	r1, r2
 8004050:	687a      	ldr	r2, [r7, #4]
 8004052:	01d2      	lsls	r2, r2, #7
 8004054:	440a      	add	r2, r1
 8004056:	3284      	adds	r2, #132	; 0x84
 8004058:	f043 0301 	orr.w	r3, r3, #1
 800405c:	6013      	str	r3, [r2, #0]
}
 800405e:	bf00      	nop
 8004060:	3724      	adds	r7, #36	; 0x24
 8004062:	46bd      	mov	sp, r7
 8004064:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004068:	4770      	bx	lr
	...

0800406c <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 800406c:	b580      	push	{r7, lr}
 800406e:	b086      	sub	sp, #24
 8004070:	af00      	add	r7, sp, #0
 8004072:	6078      	str	r0, [r7, #4]
  uint32_t tickstart, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8004074:	687b      	ldr	r3, [r7, #4]
 8004076:	2b00      	cmp	r3, #0
 8004078:	d101      	bne.n	800407e <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 800407a:	2301      	movs	r3, #1
 800407c:	e267      	b.n	800454e <HAL_RCC_OscConfig+0x4e2>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 800407e:	687b      	ldr	r3, [r7, #4]
 8004080:	681b      	ldr	r3, [r3, #0]
 8004082:	f003 0301 	and.w	r3, r3, #1
 8004086:	2b00      	cmp	r3, #0
 8004088:	d075      	beq.n	8004176 <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 800408a:	4b88      	ldr	r3, [pc, #544]	; (80042ac <HAL_RCC_OscConfig+0x240>)
 800408c:	689b      	ldr	r3, [r3, #8]
 800408e:	f003 030c 	and.w	r3, r3, #12
 8004092:	2b04      	cmp	r3, #4
 8004094:	d00c      	beq.n	80040b0 <HAL_RCC_OscConfig+0x44>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8004096:	4b85      	ldr	r3, [pc, #532]	; (80042ac <HAL_RCC_OscConfig+0x240>)
 8004098:	689b      	ldr	r3, [r3, #8]
 800409a:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 800409e:	2b08      	cmp	r3, #8
 80040a0:	d112      	bne.n	80040c8 <HAL_RCC_OscConfig+0x5c>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 80040a2:	4b82      	ldr	r3, [pc, #520]	; (80042ac <HAL_RCC_OscConfig+0x240>)
 80040a4:	685b      	ldr	r3, [r3, #4]
 80040a6:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80040aa:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 80040ae:	d10b      	bne.n	80040c8 <HAL_RCC_OscConfig+0x5c>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80040b0:	4b7e      	ldr	r3, [pc, #504]	; (80042ac <HAL_RCC_OscConfig+0x240>)
 80040b2:	681b      	ldr	r3, [r3, #0]
 80040b4:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80040b8:	2b00      	cmp	r3, #0
 80040ba:	d05b      	beq.n	8004174 <HAL_RCC_OscConfig+0x108>
 80040bc:	687b      	ldr	r3, [r7, #4]
 80040be:	685b      	ldr	r3, [r3, #4]
 80040c0:	2b00      	cmp	r3, #0
 80040c2:	d157      	bne.n	8004174 <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 80040c4:	2301      	movs	r3, #1
 80040c6:	e242      	b.n	800454e <HAL_RCC_OscConfig+0x4e2>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 80040c8:	687b      	ldr	r3, [r7, #4]
 80040ca:	685b      	ldr	r3, [r3, #4]
 80040cc:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80040d0:	d106      	bne.n	80040e0 <HAL_RCC_OscConfig+0x74>
 80040d2:	4b76      	ldr	r3, [pc, #472]	; (80042ac <HAL_RCC_OscConfig+0x240>)
 80040d4:	681b      	ldr	r3, [r3, #0]
 80040d6:	4a75      	ldr	r2, [pc, #468]	; (80042ac <HAL_RCC_OscConfig+0x240>)
 80040d8:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80040dc:	6013      	str	r3, [r2, #0]
 80040de:	e01d      	b.n	800411c <HAL_RCC_OscConfig+0xb0>
 80040e0:	687b      	ldr	r3, [r7, #4]
 80040e2:	685b      	ldr	r3, [r3, #4]
 80040e4:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 80040e8:	d10c      	bne.n	8004104 <HAL_RCC_OscConfig+0x98>
 80040ea:	4b70      	ldr	r3, [pc, #448]	; (80042ac <HAL_RCC_OscConfig+0x240>)
 80040ec:	681b      	ldr	r3, [r3, #0]
 80040ee:	4a6f      	ldr	r2, [pc, #444]	; (80042ac <HAL_RCC_OscConfig+0x240>)
 80040f0:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 80040f4:	6013      	str	r3, [r2, #0]
 80040f6:	4b6d      	ldr	r3, [pc, #436]	; (80042ac <HAL_RCC_OscConfig+0x240>)
 80040f8:	681b      	ldr	r3, [r3, #0]
 80040fa:	4a6c      	ldr	r2, [pc, #432]	; (80042ac <HAL_RCC_OscConfig+0x240>)
 80040fc:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8004100:	6013      	str	r3, [r2, #0]
 8004102:	e00b      	b.n	800411c <HAL_RCC_OscConfig+0xb0>
 8004104:	4b69      	ldr	r3, [pc, #420]	; (80042ac <HAL_RCC_OscConfig+0x240>)
 8004106:	681b      	ldr	r3, [r3, #0]
 8004108:	4a68      	ldr	r2, [pc, #416]	; (80042ac <HAL_RCC_OscConfig+0x240>)
 800410a:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800410e:	6013      	str	r3, [r2, #0]
 8004110:	4b66      	ldr	r3, [pc, #408]	; (80042ac <HAL_RCC_OscConfig+0x240>)
 8004112:	681b      	ldr	r3, [r3, #0]
 8004114:	4a65      	ldr	r2, [pc, #404]	; (80042ac <HAL_RCC_OscConfig+0x240>)
 8004116:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 800411a:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 800411c:	687b      	ldr	r3, [r7, #4]
 800411e:	685b      	ldr	r3, [r3, #4]
 8004120:	2b00      	cmp	r3, #0
 8004122:	d013      	beq.n	800414c <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8004124:	f7fd fc94 	bl	8001a50 <HAL_GetTick>
 8004128:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800412a:	e008      	b.n	800413e <HAL_RCC_OscConfig+0xd2>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 800412c:	f7fd fc90 	bl	8001a50 <HAL_GetTick>
 8004130:	4602      	mov	r2, r0
 8004132:	693b      	ldr	r3, [r7, #16]
 8004134:	1ad3      	subs	r3, r2, r3
 8004136:	2b64      	cmp	r3, #100	; 0x64
 8004138:	d901      	bls.n	800413e <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 800413a:	2303      	movs	r3, #3
 800413c:	e207      	b.n	800454e <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800413e:	4b5b      	ldr	r3, [pc, #364]	; (80042ac <HAL_RCC_OscConfig+0x240>)
 8004140:	681b      	ldr	r3, [r3, #0]
 8004142:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8004146:	2b00      	cmp	r3, #0
 8004148:	d0f0      	beq.n	800412c <HAL_RCC_OscConfig+0xc0>
 800414a:	e014      	b.n	8004176 <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800414c:	f7fd fc80 	bl	8001a50 <HAL_GetTick>
 8004150:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8004152:	e008      	b.n	8004166 <HAL_RCC_OscConfig+0xfa>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8004154:	f7fd fc7c 	bl	8001a50 <HAL_GetTick>
 8004158:	4602      	mov	r2, r0
 800415a:	693b      	ldr	r3, [r7, #16]
 800415c:	1ad3      	subs	r3, r2, r3
 800415e:	2b64      	cmp	r3, #100	; 0x64
 8004160:	d901      	bls.n	8004166 <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 8004162:	2303      	movs	r3, #3
 8004164:	e1f3      	b.n	800454e <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8004166:	4b51      	ldr	r3, [pc, #324]	; (80042ac <HAL_RCC_OscConfig+0x240>)
 8004168:	681b      	ldr	r3, [r3, #0]
 800416a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800416e:	2b00      	cmp	r3, #0
 8004170:	d1f0      	bne.n	8004154 <HAL_RCC_OscConfig+0xe8>
 8004172:	e000      	b.n	8004176 <HAL_RCC_OscConfig+0x10a>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8004174:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8004176:	687b      	ldr	r3, [r7, #4]
 8004178:	681b      	ldr	r3, [r3, #0]
 800417a:	f003 0302 	and.w	r3, r3, #2
 800417e:	2b00      	cmp	r3, #0
 8004180:	d063      	beq.n	800424a <HAL_RCC_OscConfig+0x1de>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 8004182:	4b4a      	ldr	r3, [pc, #296]	; (80042ac <HAL_RCC_OscConfig+0x240>)
 8004184:	689b      	ldr	r3, [r3, #8]
 8004186:	f003 030c 	and.w	r3, r3, #12
 800418a:	2b00      	cmp	r3, #0
 800418c:	d00b      	beq.n	80041a6 <HAL_RCC_OscConfig+0x13a>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 800418e:	4b47      	ldr	r3, [pc, #284]	; (80042ac <HAL_RCC_OscConfig+0x240>)
 8004190:	689b      	ldr	r3, [r3, #8]
 8004192:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 8004196:	2b08      	cmp	r3, #8
 8004198:	d11c      	bne.n	80041d4 <HAL_RCC_OscConfig+0x168>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 800419a:	4b44      	ldr	r3, [pc, #272]	; (80042ac <HAL_RCC_OscConfig+0x240>)
 800419c:	685b      	ldr	r3, [r3, #4]
 800419e:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80041a2:	2b00      	cmp	r3, #0
 80041a4:	d116      	bne.n	80041d4 <HAL_RCC_OscConfig+0x168>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80041a6:	4b41      	ldr	r3, [pc, #260]	; (80042ac <HAL_RCC_OscConfig+0x240>)
 80041a8:	681b      	ldr	r3, [r3, #0]
 80041aa:	f003 0302 	and.w	r3, r3, #2
 80041ae:	2b00      	cmp	r3, #0
 80041b0:	d005      	beq.n	80041be <HAL_RCC_OscConfig+0x152>
 80041b2:	687b      	ldr	r3, [r7, #4]
 80041b4:	68db      	ldr	r3, [r3, #12]
 80041b6:	2b01      	cmp	r3, #1
 80041b8:	d001      	beq.n	80041be <HAL_RCC_OscConfig+0x152>
      {
        return HAL_ERROR;
 80041ba:	2301      	movs	r3, #1
 80041bc:	e1c7      	b.n	800454e <HAL_RCC_OscConfig+0x4e2>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80041be:	4b3b      	ldr	r3, [pc, #236]	; (80042ac <HAL_RCC_OscConfig+0x240>)
 80041c0:	681b      	ldr	r3, [r3, #0]
 80041c2:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 80041c6:	687b      	ldr	r3, [r7, #4]
 80041c8:	691b      	ldr	r3, [r3, #16]
 80041ca:	00db      	lsls	r3, r3, #3
 80041cc:	4937      	ldr	r1, [pc, #220]	; (80042ac <HAL_RCC_OscConfig+0x240>)
 80041ce:	4313      	orrs	r3, r2
 80041d0:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80041d2:	e03a      	b.n	800424a <HAL_RCC_OscConfig+0x1de>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 80041d4:	687b      	ldr	r3, [r7, #4]
 80041d6:	68db      	ldr	r3, [r3, #12]
 80041d8:	2b00      	cmp	r3, #0
 80041da:	d020      	beq.n	800421e <HAL_RCC_OscConfig+0x1b2>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 80041dc:	4b34      	ldr	r3, [pc, #208]	; (80042b0 <HAL_RCC_OscConfig+0x244>)
 80041de:	2201      	movs	r2, #1
 80041e0:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80041e2:	f7fd fc35 	bl	8001a50 <HAL_GetTick>
 80041e6:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80041e8:	e008      	b.n	80041fc <HAL_RCC_OscConfig+0x190>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 80041ea:	f7fd fc31 	bl	8001a50 <HAL_GetTick>
 80041ee:	4602      	mov	r2, r0
 80041f0:	693b      	ldr	r3, [r7, #16]
 80041f2:	1ad3      	subs	r3, r2, r3
 80041f4:	2b02      	cmp	r3, #2
 80041f6:	d901      	bls.n	80041fc <HAL_RCC_OscConfig+0x190>
          {
            return HAL_TIMEOUT;
 80041f8:	2303      	movs	r3, #3
 80041fa:	e1a8      	b.n	800454e <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80041fc:	4b2b      	ldr	r3, [pc, #172]	; (80042ac <HAL_RCC_OscConfig+0x240>)
 80041fe:	681b      	ldr	r3, [r3, #0]
 8004200:	f003 0302 	and.w	r3, r3, #2
 8004204:	2b00      	cmp	r3, #0
 8004206:	d0f0      	beq.n	80041ea <HAL_RCC_OscConfig+0x17e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8004208:	4b28      	ldr	r3, [pc, #160]	; (80042ac <HAL_RCC_OscConfig+0x240>)
 800420a:	681b      	ldr	r3, [r3, #0]
 800420c:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8004210:	687b      	ldr	r3, [r7, #4]
 8004212:	691b      	ldr	r3, [r3, #16]
 8004214:	00db      	lsls	r3, r3, #3
 8004216:	4925      	ldr	r1, [pc, #148]	; (80042ac <HAL_RCC_OscConfig+0x240>)
 8004218:	4313      	orrs	r3, r2
 800421a:	600b      	str	r3, [r1, #0]
 800421c:	e015      	b.n	800424a <HAL_RCC_OscConfig+0x1de>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 800421e:	4b24      	ldr	r3, [pc, #144]	; (80042b0 <HAL_RCC_OscConfig+0x244>)
 8004220:	2200      	movs	r2, #0
 8004222:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004224:	f7fd fc14 	bl	8001a50 <HAL_GetTick>
 8004228:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800422a:	e008      	b.n	800423e <HAL_RCC_OscConfig+0x1d2>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 800422c:	f7fd fc10 	bl	8001a50 <HAL_GetTick>
 8004230:	4602      	mov	r2, r0
 8004232:	693b      	ldr	r3, [r7, #16]
 8004234:	1ad3      	subs	r3, r2, r3
 8004236:	2b02      	cmp	r3, #2
 8004238:	d901      	bls.n	800423e <HAL_RCC_OscConfig+0x1d2>
          {
            return HAL_TIMEOUT;
 800423a:	2303      	movs	r3, #3
 800423c:	e187      	b.n	800454e <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800423e:	4b1b      	ldr	r3, [pc, #108]	; (80042ac <HAL_RCC_OscConfig+0x240>)
 8004240:	681b      	ldr	r3, [r3, #0]
 8004242:	f003 0302 	and.w	r3, r3, #2
 8004246:	2b00      	cmp	r3, #0
 8004248:	d1f0      	bne.n	800422c <HAL_RCC_OscConfig+0x1c0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 800424a:	687b      	ldr	r3, [r7, #4]
 800424c:	681b      	ldr	r3, [r3, #0]
 800424e:	f003 0308 	and.w	r3, r3, #8
 8004252:	2b00      	cmp	r3, #0
 8004254:	d036      	beq.n	80042c4 <HAL_RCC_OscConfig+0x258>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 8004256:	687b      	ldr	r3, [r7, #4]
 8004258:	695b      	ldr	r3, [r3, #20]
 800425a:	2b00      	cmp	r3, #0
 800425c:	d016      	beq.n	800428c <HAL_RCC_OscConfig+0x220>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 800425e:	4b15      	ldr	r3, [pc, #84]	; (80042b4 <HAL_RCC_OscConfig+0x248>)
 8004260:	2201      	movs	r2, #1
 8004262:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8004264:	f7fd fbf4 	bl	8001a50 <HAL_GetTick>
 8004268:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 800426a:	e008      	b.n	800427e <HAL_RCC_OscConfig+0x212>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 800426c:	f7fd fbf0 	bl	8001a50 <HAL_GetTick>
 8004270:	4602      	mov	r2, r0
 8004272:	693b      	ldr	r3, [r7, #16]
 8004274:	1ad3      	subs	r3, r2, r3
 8004276:	2b02      	cmp	r3, #2
 8004278:	d901      	bls.n	800427e <HAL_RCC_OscConfig+0x212>
        {
          return HAL_TIMEOUT;
 800427a:	2303      	movs	r3, #3
 800427c:	e167      	b.n	800454e <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 800427e:	4b0b      	ldr	r3, [pc, #44]	; (80042ac <HAL_RCC_OscConfig+0x240>)
 8004280:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8004282:	f003 0302 	and.w	r3, r3, #2
 8004286:	2b00      	cmp	r3, #0
 8004288:	d0f0      	beq.n	800426c <HAL_RCC_OscConfig+0x200>
 800428a:	e01b      	b.n	80042c4 <HAL_RCC_OscConfig+0x258>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 800428c:	4b09      	ldr	r3, [pc, #36]	; (80042b4 <HAL_RCC_OscConfig+0x248>)
 800428e:	2200      	movs	r2, #0
 8004290:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8004292:	f7fd fbdd 	bl	8001a50 <HAL_GetTick>
 8004296:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8004298:	e00e      	b.n	80042b8 <HAL_RCC_OscConfig+0x24c>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 800429a:	f7fd fbd9 	bl	8001a50 <HAL_GetTick>
 800429e:	4602      	mov	r2, r0
 80042a0:	693b      	ldr	r3, [r7, #16]
 80042a2:	1ad3      	subs	r3, r2, r3
 80042a4:	2b02      	cmp	r3, #2
 80042a6:	d907      	bls.n	80042b8 <HAL_RCC_OscConfig+0x24c>
        {
          return HAL_TIMEOUT;
 80042a8:	2303      	movs	r3, #3
 80042aa:	e150      	b.n	800454e <HAL_RCC_OscConfig+0x4e2>
 80042ac:	40023800 	.word	0x40023800
 80042b0:	42470000 	.word	0x42470000
 80042b4:	42470e80 	.word	0x42470e80
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80042b8:	4b88      	ldr	r3, [pc, #544]	; (80044dc <HAL_RCC_OscConfig+0x470>)
 80042ba:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80042bc:	f003 0302 	and.w	r3, r3, #2
 80042c0:	2b00      	cmp	r3, #0
 80042c2:	d1ea      	bne.n	800429a <HAL_RCC_OscConfig+0x22e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 80042c4:	687b      	ldr	r3, [r7, #4]
 80042c6:	681b      	ldr	r3, [r3, #0]
 80042c8:	f003 0304 	and.w	r3, r3, #4
 80042cc:	2b00      	cmp	r3, #0
 80042ce:	f000 8097 	beq.w	8004400 <HAL_RCC_OscConfig+0x394>
  {
    FlagStatus       pwrclkchanged = RESET;
 80042d2:	2300      	movs	r3, #0
 80042d4:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 80042d6:	4b81      	ldr	r3, [pc, #516]	; (80044dc <HAL_RCC_OscConfig+0x470>)
 80042d8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80042da:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80042de:	2b00      	cmp	r3, #0
 80042e0:	d10f      	bne.n	8004302 <HAL_RCC_OscConfig+0x296>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 80042e2:	2300      	movs	r3, #0
 80042e4:	60bb      	str	r3, [r7, #8]
 80042e6:	4b7d      	ldr	r3, [pc, #500]	; (80044dc <HAL_RCC_OscConfig+0x470>)
 80042e8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80042ea:	4a7c      	ldr	r2, [pc, #496]	; (80044dc <HAL_RCC_OscConfig+0x470>)
 80042ec:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80042f0:	6413      	str	r3, [r2, #64]	; 0x40
 80042f2:	4b7a      	ldr	r3, [pc, #488]	; (80044dc <HAL_RCC_OscConfig+0x470>)
 80042f4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80042f6:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80042fa:	60bb      	str	r3, [r7, #8]
 80042fc:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 80042fe:	2301      	movs	r3, #1
 8004300:	75fb      	strb	r3, [r7, #23]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8004302:	4b77      	ldr	r3, [pc, #476]	; (80044e0 <HAL_RCC_OscConfig+0x474>)
 8004304:	681b      	ldr	r3, [r3, #0]
 8004306:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800430a:	2b00      	cmp	r3, #0
 800430c:	d118      	bne.n	8004340 <HAL_RCC_OscConfig+0x2d4>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 800430e:	4b74      	ldr	r3, [pc, #464]	; (80044e0 <HAL_RCC_OscConfig+0x474>)
 8004310:	681b      	ldr	r3, [r3, #0]
 8004312:	4a73      	ldr	r2, [pc, #460]	; (80044e0 <HAL_RCC_OscConfig+0x474>)
 8004314:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8004318:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 800431a:	f7fd fb99 	bl	8001a50 <HAL_GetTick>
 800431e:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8004320:	e008      	b.n	8004334 <HAL_RCC_OscConfig+0x2c8>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8004322:	f7fd fb95 	bl	8001a50 <HAL_GetTick>
 8004326:	4602      	mov	r2, r0
 8004328:	693b      	ldr	r3, [r7, #16]
 800432a:	1ad3      	subs	r3, r2, r3
 800432c:	2b02      	cmp	r3, #2
 800432e:	d901      	bls.n	8004334 <HAL_RCC_OscConfig+0x2c8>
        {
          return HAL_TIMEOUT;
 8004330:	2303      	movs	r3, #3
 8004332:	e10c      	b.n	800454e <HAL_RCC_OscConfig+0x4e2>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8004334:	4b6a      	ldr	r3, [pc, #424]	; (80044e0 <HAL_RCC_OscConfig+0x474>)
 8004336:	681b      	ldr	r3, [r3, #0]
 8004338:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800433c:	2b00      	cmp	r3, #0
 800433e:	d0f0      	beq.n	8004322 <HAL_RCC_OscConfig+0x2b6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8004340:	687b      	ldr	r3, [r7, #4]
 8004342:	689b      	ldr	r3, [r3, #8]
 8004344:	2b01      	cmp	r3, #1
 8004346:	d106      	bne.n	8004356 <HAL_RCC_OscConfig+0x2ea>
 8004348:	4b64      	ldr	r3, [pc, #400]	; (80044dc <HAL_RCC_OscConfig+0x470>)
 800434a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800434c:	4a63      	ldr	r2, [pc, #396]	; (80044dc <HAL_RCC_OscConfig+0x470>)
 800434e:	f043 0301 	orr.w	r3, r3, #1
 8004352:	6713      	str	r3, [r2, #112]	; 0x70
 8004354:	e01c      	b.n	8004390 <HAL_RCC_OscConfig+0x324>
 8004356:	687b      	ldr	r3, [r7, #4]
 8004358:	689b      	ldr	r3, [r3, #8]
 800435a:	2b05      	cmp	r3, #5
 800435c:	d10c      	bne.n	8004378 <HAL_RCC_OscConfig+0x30c>
 800435e:	4b5f      	ldr	r3, [pc, #380]	; (80044dc <HAL_RCC_OscConfig+0x470>)
 8004360:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004362:	4a5e      	ldr	r2, [pc, #376]	; (80044dc <HAL_RCC_OscConfig+0x470>)
 8004364:	f043 0304 	orr.w	r3, r3, #4
 8004368:	6713      	str	r3, [r2, #112]	; 0x70
 800436a:	4b5c      	ldr	r3, [pc, #368]	; (80044dc <HAL_RCC_OscConfig+0x470>)
 800436c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800436e:	4a5b      	ldr	r2, [pc, #364]	; (80044dc <HAL_RCC_OscConfig+0x470>)
 8004370:	f043 0301 	orr.w	r3, r3, #1
 8004374:	6713      	str	r3, [r2, #112]	; 0x70
 8004376:	e00b      	b.n	8004390 <HAL_RCC_OscConfig+0x324>
 8004378:	4b58      	ldr	r3, [pc, #352]	; (80044dc <HAL_RCC_OscConfig+0x470>)
 800437a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800437c:	4a57      	ldr	r2, [pc, #348]	; (80044dc <HAL_RCC_OscConfig+0x470>)
 800437e:	f023 0301 	bic.w	r3, r3, #1
 8004382:	6713      	str	r3, [r2, #112]	; 0x70
 8004384:	4b55      	ldr	r3, [pc, #340]	; (80044dc <HAL_RCC_OscConfig+0x470>)
 8004386:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004388:	4a54      	ldr	r2, [pc, #336]	; (80044dc <HAL_RCC_OscConfig+0x470>)
 800438a:	f023 0304 	bic.w	r3, r3, #4
 800438e:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8004390:	687b      	ldr	r3, [r7, #4]
 8004392:	689b      	ldr	r3, [r3, #8]
 8004394:	2b00      	cmp	r3, #0
 8004396:	d015      	beq.n	80043c4 <HAL_RCC_OscConfig+0x358>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8004398:	f7fd fb5a 	bl	8001a50 <HAL_GetTick>
 800439c:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800439e:	e00a      	b.n	80043b6 <HAL_RCC_OscConfig+0x34a>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 80043a0:	f7fd fb56 	bl	8001a50 <HAL_GetTick>
 80043a4:	4602      	mov	r2, r0
 80043a6:	693b      	ldr	r3, [r7, #16]
 80043a8:	1ad3      	subs	r3, r2, r3
 80043aa:	f241 3288 	movw	r2, #5000	; 0x1388
 80043ae:	4293      	cmp	r3, r2
 80043b0:	d901      	bls.n	80043b6 <HAL_RCC_OscConfig+0x34a>
        {
          return HAL_TIMEOUT;
 80043b2:	2303      	movs	r3, #3
 80043b4:	e0cb      	b.n	800454e <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80043b6:	4b49      	ldr	r3, [pc, #292]	; (80044dc <HAL_RCC_OscConfig+0x470>)
 80043b8:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80043ba:	f003 0302 	and.w	r3, r3, #2
 80043be:	2b00      	cmp	r3, #0
 80043c0:	d0ee      	beq.n	80043a0 <HAL_RCC_OscConfig+0x334>
 80043c2:	e014      	b.n	80043ee <HAL_RCC_OscConfig+0x382>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80043c4:	f7fd fb44 	bl	8001a50 <HAL_GetTick>
 80043c8:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80043ca:	e00a      	b.n	80043e2 <HAL_RCC_OscConfig+0x376>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 80043cc:	f7fd fb40 	bl	8001a50 <HAL_GetTick>
 80043d0:	4602      	mov	r2, r0
 80043d2:	693b      	ldr	r3, [r7, #16]
 80043d4:	1ad3      	subs	r3, r2, r3
 80043d6:	f241 3288 	movw	r2, #5000	; 0x1388
 80043da:	4293      	cmp	r3, r2
 80043dc:	d901      	bls.n	80043e2 <HAL_RCC_OscConfig+0x376>
        {
          return HAL_TIMEOUT;
 80043de:	2303      	movs	r3, #3
 80043e0:	e0b5      	b.n	800454e <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80043e2:	4b3e      	ldr	r3, [pc, #248]	; (80044dc <HAL_RCC_OscConfig+0x470>)
 80043e4:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80043e6:	f003 0302 	and.w	r3, r3, #2
 80043ea:	2b00      	cmp	r3, #0
 80043ec:	d1ee      	bne.n	80043cc <HAL_RCC_OscConfig+0x360>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 80043ee:	7dfb      	ldrb	r3, [r7, #23]
 80043f0:	2b01      	cmp	r3, #1
 80043f2:	d105      	bne.n	8004400 <HAL_RCC_OscConfig+0x394>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 80043f4:	4b39      	ldr	r3, [pc, #228]	; (80044dc <HAL_RCC_OscConfig+0x470>)
 80043f6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80043f8:	4a38      	ldr	r2, [pc, #224]	; (80044dc <HAL_RCC_OscConfig+0x470>)
 80043fa:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 80043fe:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8004400:	687b      	ldr	r3, [r7, #4]
 8004402:	699b      	ldr	r3, [r3, #24]
 8004404:	2b00      	cmp	r3, #0
 8004406:	f000 80a1 	beq.w	800454c <HAL_RCC_OscConfig+0x4e0>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 800440a:	4b34      	ldr	r3, [pc, #208]	; (80044dc <HAL_RCC_OscConfig+0x470>)
 800440c:	689b      	ldr	r3, [r3, #8]
 800440e:	f003 030c 	and.w	r3, r3, #12
 8004412:	2b08      	cmp	r3, #8
 8004414:	d05c      	beq.n	80044d0 <HAL_RCC_OscConfig+0x464>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8004416:	687b      	ldr	r3, [r7, #4]
 8004418:	699b      	ldr	r3, [r3, #24]
 800441a:	2b02      	cmp	r3, #2
 800441c:	d141      	bne.n	80044a2 <HAL_RCC_OscConfig+0x436>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800441e:	4b31      	ldr	r3, [pc, #196]	; (80044e4 <HAL_RCC_OscConfig+0x478>)
 8004420:	2200      	movs	r2, #0
 8004422:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8004424:	f7fd fb14 	bl	8001a50 <HAL_GetTick>
 8004428:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800442a:	e008      	b.n	800443e <HAL_RCC_OscConfig+0x3d2>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 800442c:	f7fd fb10 	bl	8001a50 <HAL_GetTick>
 8004430:	4602      	mov	r2, r0
 8004432:	693b      	ldr	r3, [r7, #16]
 8004434:	1ad3      	subs	r3, r2, r3
 8004436:	2b02      	cmp	r3, #2
 8004438:	d901      	bls.n	800443e <HAL_RCC_OscConfig+0x3d2>
          {
            return HAL_TIMEOUT;
 800443a:	2303      	movs	r3, #3
 800443c:	e087      	b.n	800454e <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800443e:	4b27      	ldr	r3, [pc, #156]	; (80044dc <HAL_RCC_OscConfig+0x470>)
 8004440:	681b      	ldr	r3, [r3, #0]
 8004442:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8004446:	2b00      	cmp	r3, #0
 8004448:	d1f0      	bne.n	800442c <HAL_RCC_OscConfig+0x3c0>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 800444a:	687b      	ldr	r3, [r7, #4]
 800444c:	69da      	ldr	r2, [r3, #28]
 800444e:	687b      	ldr	r3, [r7, #4]
 8004450:	6a1b      	ldr	r3, [r3, #32]
 8004452:	431a      	orrs	r2, r3
 8004454:	687b      	ldr	r3, [r7, #4]
 8004456:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004458:	019b      	lsls	r3, r3, #6
 800445a:	431a      	orrs	r2, r3
 800445c:	687b      	ldr	r3, [r7, #4]
 800445e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004460:	085b      	lsrs	r3, r3, #1
 8004462:	3b01      	subs	r3, #1
 8004464:	041b      	lsls	r3, r3, #16
 8004466:	431a      	orrs	r2, r3
 8004468:	687b      	ldr	r3, [r7, #4]
 800446a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800446c:	061b      	lsls	r3, r3, #24
 800446e:	491b      	ldr	r1, [pc, #108]	; (80044dc <HAL_RCC_OscConfig+0x470>)
 8004470:	4313      	orrs	r3, r2
 8004472:	604b      	str	r3, [r1, #4]
                                 RCC_OscInitStruct->PLL.PLLM                                                 | \
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)             | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos) | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8004474:	4b1b      	ldr	r3, [pc, #108]	; (80044e4 <HAL_RCC_OscConfig+0x478>)
 8004476:	2201      	movs	r2, #1
 8004478:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800447a:	f7fd fae9 	bl	8001a50 <HAL_GetTick>
 800447e:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8004480:	e008      	b.n	8004494 <HAL_RCC_OscConfig+0x428>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8004482:	f7fd fae5 	bl	8001a50 <HAL_GetTick>
 8004486:	4602      	mov	r2, r0
 8004488:	693b      	ldr	r3, [r7, #16]
 800448a:	1ad3      	subs	r3, r2, r3
 800448c:	2b02      	cmp	r3, #2
 800448e:	d901      	bls.n	8004494 <HAL_RCC_OscConfig+0x428>
          {
            return HAL_TIMEOUT;
 8004490:	2303      	movs	r3, #3
 8004492:	e05c      	b.n	800454e <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8004494:	4b11      	ldr	r3, [pc, #68]	; (80044dc <HAL_RCC_OscConfig+0x470>)
 8004496:	681b      	ldr	r3, [r3, #0]
 8004498:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800449c:	2b00      	cmp	r3, #0
 800449e:	d0f0      	beq.n	8004482 <HAL_RCC_OscConfig+0x416>
 80044a0:	e054      	b.n	800454c <HAL_RCC_OscConfig+0x4e0>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80044a2:	4b10      	ldr	r3, [pc, #64]	; (80044e4 <HAL_RCC_OscConfig+0x478>)
 80044a4:	2200      	movs	r2, #0
 80044a6:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80044a8:	f7fd fad2 	bl	8001a50 <HAL_GetTick>
 80044ac:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80044ae:	e008      	b.n	80044c2 <HAL_RCC_OscConfig+0x456>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80044b0:	f7fd face 	bl	8001a50 <HAL_GetTick>
 80044b4:	4602      	mov	r2, r0
 80044b6:	693b      	ldr	r3, [r7, #16]
 80044b8:	1ad3      	subs	r3, r2, r3
 80044ba:	2b02      	cmp	r3, #2
 80044bc:	d901      	bls.n	80044c2 <HAL_RCC_OscConfig+0x456>
          {
            return HAL_TIMEOUT;
 80044be:	2303      	movs	r3, #3
 80044c0:	e045      	b.n	800454e <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80044c2:	4b06      	ldr	r3, [pc, #24]	; (80044dc <HAL_RCC_OscConfig+0x470>)
 80044c4:	681b      	ldr	r3, [r3, #0]
 80044c6:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80044ca:	2b00      	cmp	r3, #0
 80044cc:	d1f0      	bne.n	80044b0 <HAL_RCC_OscConfig+0x444>
 80044ce:	e03d      	b.n	800454c <HAL_RCC_OscConfig+0x4e0>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 80044d0:	687b      	ldr	r3, [r7, #4]
 80044d2:	699b      	ldr	r3, [r3, #24]
 80044d4:	2b01      	cmp	r3, #1
 80044d6:	d107      	bne.n	80044e8 <HAL_RCC_OscConfig+0x47c>
      {
        return HAL_ERROR;
 80044d8:	2301      	movs	r3, #1
 80044da:	e038      	b.n	800454e <HAL_RCC_OscConfig+0x4e2>
 80044dc:	40023800 	.word	0x40023800
 80044e0:	40007000 	.word	0x40007000
 80044e4:	42470060 	.word	0x42470060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 80044e8:	4b1b      	ldr	r3, [pc, #108]	; (8004558 <HAL_RCC_OscConfig+0x4ec>)
 80044ea:	685b      	ldr	r3, [r3, #4]
 80044ec:	60fb      	str	r3, [r7, #12]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
#else
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 80044ee:	687b      	ldr	r3, [r7, #4]
 80044f0:	699b      	ldr	r3, [r3, #24]
 80044f2:	2b01      	cmp	r3, #1
 80044f4:	d028      	beq.n	8004548 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80044f6:	68fb      	ldr	r3, [r7, #12]
 80044f8:	f403 0280 	and.w	r2, r3, #4194304	; 0x400000
 80044fc:	687b      	ldr	r3, [r7, #4]
 80044fe:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8004500:	429a      	cmp	r2, r3
 8004502:	d121      	bne.n	8004548 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8004504:	68fb      	ldr	r3, [r7, #12]
 8004506:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 800450a:	687b      	ldr	r3, [r7, #4]
 800450c:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800450e:	429a      	cmp	r2, r3
 8004510:	d11a      	bne.n	8004548 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8004512:	68fa      	ldr	r2, [r7, #12]
 8004514:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 8004518:	4013      	ands	r3, r2
 800451a:	687a      	ldr	r2, [r7, #4]
 800451c:	6a52      	ldr	r2, [r2, #36]	; 0x24
 800451e:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8004520:	4293      	cmp	r3, r2
 8004522:	d111      	bne.n	8004548 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8004524:	68fb      	ldr	r3, [r7, #12]
 8004526:	f403 3240 	and.w	r2, r3, #196608	; 0x30000
 800452a:	687b      	ldr	r3, [r7, #4]
 800452c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800452e:	085b      	lsrs	r3, r3, #1
 8004530:	3b01      	subs	r3, #1
 8004532:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8004534:	429a      	cmp	r2, r3
 8004536:	d107      	bne.n	8004548 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
 8004538:	68fb      	ldr	r3, [r7, #12]
 800453a:	f003 6270 	and.w	r2, r3, #251658240	; 0xf000000
 800453e:	687b      	ldr	r3, [r7, #4]
 8004540:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004542:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8004544:	429a      	cmp	r2, r3
 8004546:	d001      	beq.n	800454c <HAL_RCC_OscConfig+0x4e0>
#endif
        {
          return HAL_ERROR;
 8004548:	2301      	movs	r3, #1
 800454a:	e000      	b.n	800454e <HAL_RCC_OscConfig+0x4e2>
        }
      }
    }
  }
  return HAL_OK;
 800454c:	2300      	movs	r3, #0
}
 800454e:	4618      	mov	r0, r3
 8004550:	3718      	adds	r7, #24
 8004552:	46bd      	mov	sp, r7
 8004554:	bd80      	pop	{r7, pc}
 8004556:	bf00      	nop
 8004558:	40023800 	.word	0x40023800

0800455c <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 800455c:	b580      	push	{r7, lr}
 800455e:	b084      	sub	sp, #16
 8004560:	af00      	add	r7, sp, #0
 8004562:	6078      	str	r0, [r7, #4]
 8004564:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8004566:	687b      	ldr	r3, [r7, #4]
 8004568:	2b00      	cmp	r3, #0
 800456a:	d101      	bne.n	8004570 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 800456c:	2301      	movs	r3, #1
 800456e:	e0cc      	b.n	800470a <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8004570:	4b68      	ldr	r3, [pc, #416]	; (8004714 <HAL_RCC_ClockConfig+0x1b8>)
 8004572:	681b      	ldr	r3, [r3, #0]
 8004574:	f003 030f 	and.w	r3, r3, #15
 8004578:	683a      	ldr	r2, [r7, #0]
 800457a:	429a      	cmp	r2, r3
 800457c:	d90c      	bls.n	8004598 <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800457e:	4b65      	ldr	r3, [pc, #404]	; (8004714 <HAL_RCC_ClockConfig+0x1b8>)
 8004580:	683a      	ldr	r2, [r7, #0]
 8004582:	b2d2      	uxtb	r2, r2
 8004584:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8004586:	4b63      	ldr	r3, [pc, #396]	; (8004714 <HAL_RCC_ClockConfig+0x1b8>)
 8004588:	681b      	ldr	r3, [r3, #0]
 800458a:	f003 030f 	and.w	r3, r3, #15
 800458e:	683a      	ldr	r2, [r7, #0]
 8004590:	429a      	cmp	r2, r3
 8004592:	d001      	beq.n	8004598 <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 8004594:	2301      	movs	r3, #1
 8004596:	e0b8      	b.n	800470a <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8004598:	687b      	ldr	r3, [r7, #4]
 800459a:	681b      	ldr	r3, [r3, #0]
 800459c:	f003 0302 	and.w	r3, r3, #2
 80045a0:	2b00      	cmp	r3, #0
 80045a2:	d020      	beq.n	80045e6 <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80045a4:	687b      	ldr	r3, [r7, #4]
 80045a6:	681b      	ldr	r3, [r3, #0]
 80045a8:	f003 0304 	and.w	r3, r3, #4
 80045ac:	2b00      	cmp	r3, #0
 80045ae:	d005      	beq.n	80045bc <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 80045b0:	4b59      	ldr	r3, [pc, #356]	; (8004718 <HAL_RCC_ClockConfig+0x1bc>)
 80045b2:	689b      	ldr	r3, [r3, #8]
 80045b4:	4a58      	ldr	r2, [pc, #352]	; (8004718 <HAL_RCC_ClockConfig+0x1bc>)
 80045b6:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 80045ba:	6093      	str	r3, [r2, #8]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80045bc:	687b      	ldr	r3, [r7, #4]
 80045be:	681b      	ldr	r3, [r3, #0]
 80045c0:	f003 0308 	and.w	r3, r3, #8
 80045c4:	2b00      	cmp	r3, #0
 80045c6:	d005      	beq.n	80045d4 <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 80045c8:	4b53      	ldr	r3, [pc, #332]	; (8004718 <HAL_RCC_ClockConfig+0x1bc>)
 80045ca:	689b      	ldr	r3, [r3, #8]
 80045cc:	4a52      	ldr	r2, [pc, #328]	; (8004718 <HAL_RCC_ClockConfig+0x1bc>)
 80045ce:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 80045d2:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 80045d4:	4b50      	ldr	r3, [pc, #320]	; (8004718 <HAL_RCC_ClockConfig+0x1bc>)
 80045d6:	689b      	ldr	r3, [r3, #8]
 80045d8:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 80045dc:	687b      	ldr	r3, [r7, #4]
 80045de:	689b      	ldr	r3, [r3, #8]
 80045e0:	494d      	ldr	r1, [pc, #308]	; (8004718 <HAL_RCC_ClockConfig+0x1bc>)
 80045e2:	4313      	orrs	r3, r2
 80045e4:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 80045e6:	687b      	ldr	r3, [r7, #4]
 80045e8:	681b      	ldr	r3, [r3, #0]
 80045ea:	f003 0301 	and.w	r3, r3, #1
 80045ee:	2b00      	cmp	r3, #0
 80045f0:	d044      	beq.n	800467c <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 80045f2:	687b      	ldr	r3, [r7, #4]
 80045f4:	685b      	ldr	r3, [r3, #4]
 80045f6:	2b01      	cmp	r3, #1
 80045f8:	d107      	bne.n	800460a <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80045fa:	4b47      	ldr	r3, [pc, #284]	; (8004718 <HAL_RCC_ClockConfig+0x1bc>)
 80045fc:	681b      	ldr	r3, [r3, #0]
 80045fe:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8004602:	2b00      	cmp	r3, #0
 8004604:	d119      	bne.n	800463a <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8004606:	2301      	movs	r3, #1
 8004608:	e07f      	b.n	800470a <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 800460a:	687b      	ldr	r3, [r7, #4]
 800460c:	685b      	ldr	r3, [r3, #4]
 800460e:	2b02      	cmp	r3, #2
 8004610:	d003      	beq.n	800461a <HAL_RCC_ClockConfig+0xbe>
            (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 8004612:	687b      	ldr	r3, [r7, #4]
 8004614:	685b      	ldr	r3, [r3, #4]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8004616:	2b03      	cmp	r3, #3
 8004618:	d107      	bne.n	800462a <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800461a:	4b3f      	ldr	r3, [pc, #252]	; (8004718 <HAL_RCC_ClockConfig+0x1bc>)
 800461c:	681b      	ldr	r3, [r3, #0]
 800461e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8004622:	2b00      	cmp	r3, #0
 8004624:	d109      	bne.n	800463a <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8004626:	2301      	movs	r3, #1
 8004628:	e06f      	b.n	800470a <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800462a:	4b3b      	ldr	r3, [pc, #236]	; (8004718 <HAL_RCC_ClockConfig+0x1bc>)
 800462c:	681b      	ldr	r3, [r3, #0]
 800462e:	f003 0302 	and.w	r3, r3, #2
 8004632:	2b00      	cmp	r3, #0
 8004634:	d101      	bne.n	800463a <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8004636:	2301      	movs	r3, #1
 8004638:	e067      	b.n	800470a <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 800463a:	4b37      	ldr	r3, [pc, #220]	; (8004718 <HAL_RCC_ClockConfig+0x1bc>)
 800463c:	689b      	ldr	r3, [r3, #8]
 800463e:	f023 0203 	bic.w	r2, r3, #3
 8004642:	687b      	ldr	r3, [r7, #4]
 8004644:	685b      	ldr	r3, [r3, #4]
 8004646:	4934      	ldr	r1, [pc, #208]	; (8004718 <HAL_RCC_ClockConfig+0x1bc>)
 8004648:	4313      	orrs	r3, r2
 800464a:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 800464c:	f7fd fa00 	bl	8001a50 <HAL_GetTick>
 8004650:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8004652:	e00a      	b.n	800466a <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8004654:	f7fd f9fc 	bl	8001a50 <HAL_GetTick>
 8004658:	4602      	mov	r2, r0
 800465a:	68fb      	ldr	r3, [r7, #12]
 800465c:	1ad3      	subs	r3, r2, r3
 800465e:	f241 3288 	movw	r2, #5000	; 0x1388
 8004662:	4293      	cmp	r3, r2
 8004664:	d901      	bls.n	800466a <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 8004666:	2303      	movs	r3, #3
 8004668:	e04f      	b.n	800470a <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800466a:	4b2b      	ldr	r3, [pc, #172]	; (8004718 <HAL_RCC_ClockConfig+0x1bc>)
 800466c:	689b      	ldr	r3, [r3, #8]
 800466e:	f003 020c 	and.w	r2, r3, #12
 8004672:	687b      	ldr	r3, [r7, #4]
 8004674:	685b      	ldr	r3, [r3, #4]
 8004676:	009b      	lsls	r3, r3, #2
 8004678:	429a      	cmp	r2, r3
 800467a:	d1eb      	bne.n	8004654 <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 800467c:	4b25      	ldr	r3, [pc, #148]	; (8004714 <HAL_RCC_ClockConfig+0x1b8>)
 800467e:	681b      	ldr	r3, [r3, #0]
 8004680:	f003 030f 	and.w	r3, r3, #15
 8004684:	683a      	ldr	r2, [r7, #0]
 8004686:	429a      	cmp	r2, r3
 8004688:	d20c      	bcs.n	80046a4 <HAL_RCC_ClockConfig+0x148>
  {
     /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800468a:	4b22      	ldr	r3, [pc, #136]	; (8004714 <HAL_RCC_ClockConfig+0x1b8>)
 800468c:	683a      	ldr	r2, [r7, #0]
 800468e:	b2d2      	uxtb	r2, r2
 8004690:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8004692:	4b20      	ldr	r3, [pc, #128]	; (8004714 <HAL_RCC_ClockConfig+0x1b8>)
 8004694:	681b      	ldr	r3, [r3, #0]
 8004696:	f003 030f 	and.w	r3, r3, #15
 800469a:	683a      	ldr	r2, [r7, #0]
 800469c:	429a      	cmp	r2, r3
 800469e:	d001      	beq.n	80046a4 <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 80046a0:	2301      	movs	r3, #1
 80046a2:	e032      	b.n	800470a <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80046a4:	687b      	ldr	r3, [r7, #4]
 80046a6:	681b      	ldr	r3, [r3, #0]
 80046a8:	f003 0304 	and.w	r3, r3, #4
 80046ac:	2b00      	cmp	r3, #0
 80046ae:	d008      	beq.n	80046c2 <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 80046b0:	4b19      	ldr	r3, [pc, #100]	; (8004718 <HAL_RCC_ClockConfig+0x1bc>)
 80046b2:	689b      	ldr	r3, [r3, #8]
 80046b4:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 80046b8:	687b      	ldr	r3, [r7, #4]
 80046ba:	68db      	ldr	r3, [r3, #12]
 80046bc:	4916      	ldr	r1, [pc, #88]	; (8004718 <HAL_RCC_ClockConfig+0x1bc>)
 80046be:	4313      	orrs	r3, r2
 80046c0:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80046c2:	687b      	ldr	r3, [r7, #4]
 80046c4:	681b      	ldr	r3, [r3, #0]
 80046c6:	f003 0308 	and.w	r3, r3, #8
 80046ca:	2b00      	cmp	r3, #0
 80046cc:	d009      	beq.n	80046e2 <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 80046ce:	4b12      	ldr	r3, [pc, #72]	; (8004718 <HAL_RCC_ClockConfig+0x1bc>)
 80046d0:	689b      	ldr	r3, [r3, #8]
 80046d2:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 80046d6:	687b      	ldr	r3, [r7, #4]
 80046d8:	691b      	ldr	r3, [r3, #16]
 80046da:	00db      	lsls	r3, r3, #3
 80046dc:	490e      	ldr	r1, [pc, #56]	; (8004718 <HAL_RCC_ClockConfig+0x1bc>)
 80046de:	4313      	orrs	r3, r2
 80046e0:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 80046e2:	f000 f821 	bl	8004728 <HAL_RCC_GetSysClockFreq>
 80046e6:	4602      	mov	r2, r0
 80046e8:	4b0b      	ldr	r3, [pc, #44]	; (8004718 <HAL_RCC_ClockConfig+0x1bc>)
 80046ea:	689b      	ldr	r3, [r3, #8]
 80046ec:	091b      	lsrs	r3, r3, #4
 80046ee:	f003 030f 	and.w	r3, r3, #15
 80046f2:	490a      	ldr	r1, [pc, #40]	; (800471c <HAL_RCC_ClockConfig+0x1c0>)
 80046f4:	5ccb      	ldrb	r3, [r1, r3]
 80046f6:	fa22 f303 	lsr.w	r3, r2, r3
 80046fa:	4a09      	ldr	r2, [pc, #36]	; (8004720 <HAL_RCC_ClockConfig+0x1c4>)
 80046fc:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick (uwTickPrio);
 80046fe:	4b09      	ldr	r3, [pc, #36]	; (8004724 <HAL_RCC_ClockConfig+0x1c8>)
 8004700:	681b      	ldr	r3, [r3, #0]
 8004702:	4618      	mov	r0, r3
 8004704:	f7fc fe98 	bl	8001438 <HAL_InitTick>

  return HAL_OK;
 8004708:	2300      	movs	r3, #0
}
 800470a:	4618      	mov	r0, r3
 800470c:	3710      	adds	r7, #16
 800470e:	46bd      	mov	sp, r7
 8004710:	bd80      	pop	{r7, pc}
 8004712:	bf00      	nop
 8004714:	40023c00 	.word	0x40023c00
 8004718:	40023800 	.word	0x40023800
 800471c:	0800b774 	.word	0x0800b774
 8004720:	20000000 	.word	0x20000000
 8004724:	20000004 	.word	0x20000004

08004728 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8004728:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 800472c:	b094      	sub	sp, #80	; 0x50
 800472e:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U, pllvco = 0U, pllp = 0U;
 8004730:	2300      	movs	r3, #0
 8004732:	647b      	str	r3, [r7, #68]	; 0x44
 8004734:	2300      	movs	r3, #0
 8004736:	64fb      	str	r3, [r7, #76]	; 0x4c
 8004738:	2300      	movs	r3, #0
 800473a:	643b      	str	r3, [r7, #64]	; 0x40
  uint32_t sysclockfreq = 0U;
 800473c:	2300      	movs	r3, #0
 800473e:	64bb      	str	r3, [r7, #72]	; 0x48

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8004740:	4b79      	ldr	r3, [pc, #484]	; (8004928 <HAL_RCC_GetSysClockFreq+0x200>)
 8004742:	689b      	ldr	r3, [r3, #8]
 8004744:	f003 030c 	and.w	r3, r3, #12
 8004748:	2b08      	cmp	r3, #8
 800474a:	d00d      	beq.n	8004768 <HAL_RCC_GetSysClockFreq+0x40>
 800474c:	2b08      	cmp	r3, #8
 800474e:	f200 80e1 	bhi.w	8004914 <HAL_RCC_GetSysClockFreq+0x1ec>
 8004752:	2b00      	cmp	r3, #0
 8004754:	d002      	beq.n	800475c <HAL_RCC_GetSysClockFreq+0x34>
 8004756:	2b04      	cmp	r3, #4
 8004758:	d003      	beq.n	8004762 <HAL_RCC_GetSysClockFreq+0x3a>
 800475a:	e0db      	b.n	8004914 <HAL_RCC_GetSysClockFreq+0x1ec>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 800475c:	4b73      	ldr	r3, [pc, #460]	; (800492c <HAL_RCC_GetSysClockFreq+0x204>)
 800475e:	64bb      	str	r3, [r7, #72]	; 0x48
       break;
 8004760:	e0db      	b.n	800491a <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 8004762:	4b73      	ldr	r3, [pc, #460]	; (8004930 <HAL_RCC_GetSysClockFreq+0x208>)
 8004764:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 8004766:	e0d8      	b.n	800491a <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8004768:	4b6f      	ldr	r3, [pc, #444]	; (8004928 <HAL_RCC_GetSysClockFreq+0x200>)
 800476a:	685b      	ldr	r3, [r3, #4]
 800476c:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8004770:	647b      	str	r3, [r7, #68]	; 0x44
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8004772:	4b6d      	ldr	r3, [pc, #436]	; (8004928 <HAL_RCC_GetSysClockFreq+0x200>)
 8004774:	685b      	ldr	r3, [r3, #4]
 8004776:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800477a:	2b00      	cmp	r3, #0
 800477c:	d063      	beq.n	8004846 <HAL_RCC_GetSysClockFreq+0x11e>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 800477e:	4b6a      	ldr	r3, [pc, #424]	; (8004928 <HAL_RCC_GetSysClockFreq+0x200>)
 8004780:	685b      	ldr	r3, [r3, #4]
 8004782:	099b      	lsrs	r3, r3, #6
 8004784:	2200      	movs	r2, #0
 8004786:	63bb      	str	r3, [r7, #56]	; 0x38
 8004788:	63fa      	str	r2, [r7, #60]	; 0x3c
 800478a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800478c:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8004790:	633b      	str	r3, [r7, #48]	; 0x30
 8004792:	2300      	movs	r3, #0
 8004794:	637b      	str	r3, [r7, #52]	; 0x34
 8004796:	e9d7 450c 	ldrd	r4, r5, [r7, #48]	; 0x30
 800479a:	4622      	mov	r2, r4
 800479c:	462b      	mov	r3, r5
 800479e:	f04f 0000 	mov.w	r0, #0
 80047a2:	f04f 0100 	mov.w	r1, #0
 80047a6:	0159      	lsls	r1, r3, #5
 80047a8:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 80047ac:	0150      	lsls	r0, r2, #5
 80047ae:	4602      	mov	r2, r0
 80047b0:	460b      	mov	r3, r1
 80047b2:	4621      	mov	r1, r4
 80047b4:	1a51      	subs	r1, r2, r1
 80047b6:	6139      	str	r1, [r7, #16]
 80047b8:	4629      	mov	r1, r5
 80047ba:	eb63 0301 	sbc.w	r3, r3, r1
 80047be:	617b      	str	r3, [r7, #20]
 80047c0:	f04f 0200 	mov.w	r2, #0
 80047c4:	f04f 0300 	mov.w	r3, #0
 80047c8:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 80047cc:	4659      	mov	r1, fp
 80047ce:	018b      	lsls	r3, r1, #6
 80047d0:	4651      	mov	r1, sl
 80047d2:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 80047d6:	4651      	mov	r1, sl
 80047d8:	018a      	lsls	r2, r1, #6
 80047da:	4651      	mov	r1, sl
 80047dc:	ebb2 0801 	subs.w	r8, r2, r1
 80047e0:	4659      	mov	r1, fp
 80047e2:	eb63 0901 	sbc.w	r9, r3, r1
 80047e6:	f04f 0200 	mov.w	r2, #0
 80047ea:	f04f 0300 	mov.w	r3, #0
 80047ee:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 80047f2:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 80047f6:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 80047fa:	4690      	mov	r8, r2
 80047fc:	4699      	mov	r9, r3
 80047fe:	4623      	mov	r3, r4
 8004800:	eb18 0303 	adds.w	r3, r8, r3
 8004804:	60bb      	str	r3, [r7, #8]
 8004806:	462b      	mov	r3, r5
 8004808:	eb49 0303 	adc.w	r3, r9, r3
 800480c:	60fb      	str	r3, [r7, #12]
 800480e:	f04f 0200 	mov.w	r2, #0
 8004812:	f04f 0300 	mov.w	r3, #0
 8004816:	e9d7 4502 	ldrd	r4, r5, [r7, #8]
 800481a:	4629      	mov	r1, r5
 800481c:	024b      	lsls	r3, r1, #9
 800481e:	4621      	mov	r1, r4
 8004820:	ea43 53d1 	orr.w	r3, r3, r1, lsr #23
 8004824:	4621      	mov	r1, r4
 8004826:	024a      	lsls	r2, r1, #9
 8004828:	4610      	mov	r0, r2
 800482a:	4619      	mov	r1, r3
 800482c:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800482e:	2200      	movs	r2, #0
 8004830:	62bb      	str	r3, [r7, #40]	; 0x28
 8004832:	62fa      	str	r2, [r7, #44]	; 0x2c
 8004834:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 8004838:	f7fb fd2a 	bl	8000290 <__aeabi_uldivmod>
 800483c:	4602      	mov	r2, r0
 800483e:	460b      	mov	r3, r1
 8004840:	4613      	mov	r3, r2
 8004842:	64fb      	str	r3, [r7, #76]	; 0x4c
 8004844:	e058      	b.n	80048f8 <HAL_RCC_GetSysClockFreq+0x1d0>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8004846:	4b38      	ldr	r3, [pc, #224]	; (8004928 <HAL_RCC_GetSysClockFreq+0x200>)
 8004848:	685b      	ldr	r3, [r3, #4]
 800484a:	099b      	lsrs	r3, r3, #6
 800484c:	2200      	movs	r2, #0
 800484e:	4618      	mov	r0, r3
 8004850:	4611      	mov	r1, r2
 8004852:	f3c0 0308 	ubfx	r3, r0, #0, #9
 8004856:	623b      	str	r3, [r7, #32]
 8004858:	2300      	movs	r3, #0
 800485a:	627b      	str	r3, [r7, #36]	; 0x24
 800485c:	e9d7 8908 	ldrd	r8, r9, [r7, #32]
 8004860:	4642      	mov	r2, r8
 8004862:	464b      	mov	r3, r9
 8004864:	f04f 0000 	mov.w	r0, #0
 8004868:	f04f 0100 	mov.w	r1, #0
 800486c:	0159      	lsls	r1, r3, #5
 800486e:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8004872:	0150      	lsls	r0, r2, #5
 8004874:	4602      	mov	r2, r0
 8004876:	460b      	mov	r3, r1
 8004878:	4641      	mov	r1, r8
 800487a:	ebb2 0a01 	subs.w	sl, r2, r1
 800487e:	4649      	mov	r1, r9
 8004880:	eb63 0b01 	sbc.w	fp, r3, r1
 8004884:	f04f 0200 	mov.w	r2, #0
 8004888:	f04f 0300 	mov.w	r3, #0
 800488c:	ea4f 138b 	mov.w	r3, fp, lsl #6
 8004890:	ea43 639a 	orr.w	r3, r3, sl, lsr #26
 8004894:	ea4f 128a 	mov.w	r2, sl, lsl #6
 8004898:	ebb2 040a 	subs.w	r4, r2, sl
 800489c:	eb63 050b 	sbc.w	r5, r3, fp
 80048a0:	f04f 0200 	mov.w	r2, #0
 80048a4:	f04f 0300 	mov.w	r3, #0
 80048a8:	00eb      	lsls	r3, r5, #3
 80048aa:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 80048ae:	00e2      	lsls	r2, r4, #3
 80048b0:	4614      	mov	r4, r2
 80048b2:	461d      	mov	r5, r3
 80048b4:	4643      	mov	r3, r8
 80048b6:	18e3      	adds	r3, r4, r3
 80048b8:	603b      	str	r3, [r7, #0]
 80048ba:	464b      	mov	r3, r9
 80048bc:	eb45 0303 	adc.w	r3, r5, r3
 80048c0:	607b      	str	r3, [r7, #4]
 80048c2:	f04f 0200 	mov.w	r2, #0
 80048c6:	f04f 0300 	mov.w	r3, #0
 80048ca:	e9d7 4500 	ldrd	r4, r5, [r7]
 80048ce:	4629      	mov	r1, r5
 80048d0:	028b      	lsls	r3, r1, #10
 80048d2:	4621      	mov	r1, r4
 80048d4:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 80048d8:	4621      	mov	r1, r4
 80048da:	028a      	lsls	r2, r1, #10
 80048dc:	4610      	mov	r0, r2
 80048de:	4619      	mov	r1, r3
 80048e0:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80048e2:	2200      	movs	r2, #0
 80048e4:	61bb      	str	r3, [r7, #24]
 80048e6:	61fa      	str	r2, [r7, #28]
 80048e8:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 80048ec:	f7fb fcd0 	bl	8000290 <__aeabi_uldivmod>
 80048f0:	4602      	mov	r2, r0
 80048f2:	460b      	mov	r3, r1
 80048f4:	4613      	mov	r3, r2
 80048f6:	64fb      	str	r3, [r7, #76]	; 0x4c
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 80048f8:	4b0b      	ldr	r3, [pc, #44]	; (8004928 <HAL_RCC_GetSysClockFreq+0x200>)
 80048fa:	685b      	ldr	r3, [r3, #4]
 80048fc:	0c1b      	lsrs	r3, r3, #16
 80048fe:	f003 0303 	and.w	r3, r3, #3
 8004902:	3301      	adds	r3, #1
 8004904:	005b      	lsls	r3, r3, #1
 8004906:	643b      	str	r3, [r7, #64]	; 0x40

      sysclockfreq = pllvco/pllp;
 8004908:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 800490a:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800490c:	fbb2 f3f3 	udiv	r3, r2, r3
 8004910:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 8004912:	e002      	b.n	800491a <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 8004914:	4b05      	ldr	r3, [pc, #20]	; (800492c <HAL_RCC_GetSysClockFreq+0x204>)
 8004916:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 8004918:	bf00      	nop
    }
  }
  return sysclockfreq;
 800491a:	6cbb      	ldr	r3, [r7, #72]	; 0x48
}
 800491c:	4618      	mov	r0, r3
 800491e:	3750      	adds	r7, #80	; 0x50
 8004920:	46bd      	mov	sp, r7
 8004922:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8004926:	bf00      	nop
 8004928:	40023800 	.word	0x40023800
 800492c:	00f42400 	.word	0x00f42400
 8004930:	007a1200 	.word	0x007a1200

08004934 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8004934:	b480      	push	{r7}
 8004936:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8004938:	4b03      	ldr	r3, [pc, #12]	; (8004948 <HAL_RCC_GetHCLKFreq+0x14>)
 800493a:	681b      	ldr	r3, [r3, #0]
}
 800493c:	4618      	mov	r0, r3
 800493e:	46bd      	mov	sp, r7
 8004940:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004944:	4770      	bx	lr
 8004946:	bf00      	nop
 8004948:	20000000 	.word	0x20000000

0800494c <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 800494c:	b580      	push	{r7, lr}
 800494e:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1)>> RCC_CFGR_PPRE1_Pos]);
 8004950:	f7ff fff0 	bl	8004934 <HAL_RCC_GetHCLKFreq>
 8004954:	4602      	mov	r2, r0
 8004956:	4b05      	ldr	r3, [pc, #20]	; (800496c <HAL_RCC_GetPCLK1Freq+0x20>)
 8004958:	689b      	ldr	r3, [r3, #8]
 800495a:	0a9b      	lsrs	r3, r3, #10
 800495c:	f003 0307 	and.w	r3, r3, #7
 8004960:	4903      	ldr	r1, [pc, #12]	; (8004970 <HAL_RCC_GetPCLK1Freq+0x24>)
 8004962:	5ccb      	ldrb	r3, [r1, r3]
 8004964:	fa22 f303 	lsr.w	r3, r2, r3
}
 8004968:	4618      	mov	r0, r3
 800496a:	bd80      	pop	{r7, pc}
 800496c:	40023800 	.word	0x40023800
 8004970:	0800b784 	.word	0x0800b784

08004974 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8004974:	b580      	push	{r7, lr}
 8004976:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2)>> RCC_CFGR_PPRE2_Pos]);
 8004978:	f7ff ffdc 	bl	8004934 <HAL_RCC_GetHCLKFreq>
 800497c:	4602      	mov	r2, r0
 800497e:	4b05      	ldr	r3, [pc, #20]	; (8004994 <HAL_RCC_GetPCLK2Freq+0x20>)
 8004980:	689b      	ldr	r3, [r3, #8]
 8004982:	0b5b      	lsrs	r3, r3, #13
 8004984:	f003 0307 	and.w	r3, r3, #7
 8004988:	4903      	ldr	r1, [pc, #12]	; (8004998 <HAL_RCC_GetPCLK2Freq+0x24>)
 800498a:	5ccb      	ldrb	r3, [r1, r3]
 800498c:	fa22 f303 	lsr.w	r3, r2, r3
}
 8004990:	4618      	mov	r0, r3
 8004992:	bd80      	pop	{r7, pc}
 8004994:	40023800 	.word	0x40023800
 8004998:	0800b784 	.word	0x0800b784

0800499c <HAL_RCC_GetClockConfig>:
  * will be configured.
  * @param  pFLatency Pointer on the Flash Latency.
  * @retval None
  */
void HAL_RCC_GetClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t *pFLatency)
{
 800499c:	b480      	push	{r7}
 800499e:	b083      	sub	sp, #12
 80049a0:	af00      	add	r7, sp, #0
 80049a2:	6078      	str	r0, [r7, #4]
 80049a4:	6039      	str	r1, [r7, #0]
  /* Set all possible values for the Clock type parameter --------------------*/
  RCC_ClkInitStruct->ClockType = RCC_CLOCKTYPE_SYSCLK | RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_PCLK1 | RCC_CLOCKTYPE_PCLK2;
 80049a6:	687b      	ldr	r3, [r7, #4]
 80049a8:	220f      	movs	r2, #15
 80049aa:	601a      	str	r2, [r3, #0]

  /* Get the SYSCLK configuration --------------------------------------------*/
  RCC_ClkInitStruct->SYSCLKSource = (uint32_t)(RCC->CFGR & RCC_CFGR_SW);
 80049ac:	4b12      	ldr	r3, [pc, #72]	; (80049f8 <HAL_RCC_GetClockConfig+0x5c>)
 80049ae:	689b      	ldr	r3, [r3, #8]
 80049b0:	f003 0203 	and.w	r2, r3, #3
 80049b4:	687b      	ldr	r3, [r7, #4]
 80049b6:	605a      	str	r2, [r3, #4]

  /* Get the HCLK configuration ----------------------------------------------*/
  RCC_ClkInitStruct->AHBCLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_HPRE);
 80049b8:	4b0f      	ldr	r3, [pc, #60]	; (80049f8 <HAL_RCC_GetClockConfig+0x5c>)
 80049ba:	689b      	ldr	r3, [r3, #8]
 80049bc:	f003 02f0 	and.w	r2, r3, #240	; 0xf0
 80049c0:	687b      	ldr	r3, [r7, #4]
 80049c2:	609a      	str	r2, [r3, #8]

  /* Get the APB1 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB1CLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_PPRE1);
 80049c4:	4b0c      	ldr	r3, [pc, #48]	; (80049f8 <HAL_RCC_GetClockConfig+0x5c>)
 80049c6:	689b      	ldr	r3, [r3, #8]
 80049c8:	f403 52e0 	and.w	r2, r3, #7168	; 0x1c00
 80049cc:	687b      	ldr	r3, [r7, #4]
 80049ce:	60da      	str	r2, [r3, #12]

  /* Get the APB2 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB2CLKDivider = (uint32_t)((RCC->CFGR & RCC_CFGR_PPRE2) >> 3U);
 80049d0:	4b09      	ldr	r3, [pc, #36]	; (80049f8 <HAL_RCC_GetClockConfig+0x5c>)
 80049d2:	689b      	ldr	r3, [r3, #8]
 80049d4:	08db      	lsrs	r3, r3, #3
 80049d6:	f403 52e0 	and.w	r2, r3, #7168	; 0x1c00
 80049da:	687b      	ldr	r3, [r7, #4]
 80049dc:	611a      	str	r2, [r3, #16]

  /* Get the Flash Wait State (Latency) configuration ------------------------*/
  *pFLatency = (uint32_t)(FLASH->ACR & FLASH_ACR_LATENCY);
 80049de:	4b07      	ldr	r3, [pc, #28]	; (80049fc <HAL_RCC_GetClockConfig+0x60>)
 80049e0:	681b      	ldr	r3, [r3, #0]
 80049e2:	f003 020f 	and.w	r2, r3, #15
 80049e6:	683b      	ldr	r3, [r7, #0]
 80049e8:	601a      	str	r2, [r3, #0]
}
 80049ea:	bf00      	nop
 80049ec:	370c      	adds	r7, #12
 80049ee:	46bd      	mov	sp, r7
 80049f0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80049f4:	4770      	bx	lr
 80049f6:	bf00      	nop
 80049f8:	40023800 	.word	0x40023800
 80049fc:	40023c00 	.word	0x40023c00

08004a00 <HAL_RCCEx_PeriphCLKConfig>:
  *         the backup registers) and RCC_BDCR register are set to their reset values.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8004a00:	b580      	push	{r7, lr}
 8004a02:	b086      	sub	sp, #24
 8004a04:	af00      	add	r7, sp, #0
 8004a06:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 8004a08:	2300      	movs	r3, #0
 8004a0a:	617b      	str	r3, [r7, #20]
  uint32_t tmpreg1 = 0U;
 8004a0c:	2300      	movs	r3, #0
 8004a0e:	613b      	str	r3, [r7, #16]

  /*----------------------- SAI/I2S Configuration (PLLI2S) -------------------*/
  /*----------------------- Common configuration SAI/I2S ---------------------*/
  /* In Case of SAI or I2S Clock Configuration through PLLI2S, PLLI2SN division
     factor is common parameters for both peripherals */
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == RCC_PERIPHCLK_I2S) ||
 8004a10:	687b      	ldr	r3, [r7, #4]
 8004a12:	681b      	ldr	r3, [r3, #0]
 8004a14:	f003 0301 	and.w	r3, r3, #1
 8004a18:	2b00      	cmp	r3, #0
 8004a1a:	d10b      	bne.n	8004a34 <HAL_RCCEx_PeriphCLKConfig+0x34>
     (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI_PLLI2S) == RCC_PERIPHCLK_SAI_PLLI2S) ||
 8004a1c:	687b      	ldr	r3, [r7, #4]
 8004a1e:	681b      	ldr	r3, [r3, #0]
 8004a20:	f003 0302 	and.w	r3, r3, #2
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == RCC_PERIPHCLK_I2S) ||
 8004a24:	2b00      	cmp	r3, #0
 8004a26:	d105      	bne.n	8004a34 <HAL_RCCEx_PeriphCLKConfig+0x34>
     (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLLI2S) == RCC_PERIPHCLK_PLLI2S))
 8004a28:	687b      	ldr	r3, [r7, #4]
 8004a2a:	681b      	ldr	r3, [r3, #0]
 8004a2c:	f003 0340 	and.w	r3, r3, #64	; 0x40
     (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI_PLLI2S) == RCC_PERIPHCLK_SAI_PLLI2S) ||
 8004a30:	2b00      	cmp	r3, #0
 8004a32:	d075      	beq.n	8004b20 <HAL_RCCEx_PeriphCLKConfig+0x120>
  {
    /* check for Parameters */
    assert_param(IS_RCC_PLLI2SN_VALUE(PeriphClkInit->PLLI2S.PLLI2SN));

    /* Disable the PLLI2S */
    __HAL_RCC_PLLI2S_DISABLE();
 8004a34:	4b91      	ldr	r3, [pc, #580]	; (8004c7c <HAL_RCCEx_PeriphCLKConfig+0x27c>)
 8004a36:	2200      	movs	r2, #0
 8004a38:	601a      	str	r2, [r3, #0]
    /* Get tick */
    tickstart = HAL_GetTick();
 8004a3a:	f7fd f809 	bl	8001a50 <HAL_GetTick>
 8004a3e:	6178      	str	r0, [r7, #20]
    /* Wait till PLLI2S is disabled */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  != RESET)
 8004a40:	e008      	b.n	8004a54 <HAL_RCCEx_PeriphCLKConfig+0x54>
    {
      if((HAL_GetTick() - tickstart ) > PLLI2S_TIMEOUT_VALUE)
 8004a42:	f7fd f805 	bl	8001a50 <HAL_GetTick>
 8004a46:	4602      	mov	r2, r0
 8004a48:	697b      	ldr	r3, [r7, #20]
 8004a4a:	1ad3      	subs	r3, r2, r3
 8004a4c:	2b02      	cmp	r3, #2
 8004a4e:	d901      	bls.n	8004a54 <HAL_RCCEx_PeriphCLKConfig+0x54>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 8004a50:	2303      	movs	r3, #3
 8004a52:	e189      	b.n	8004d68 <HAL_RCCEx_PeriphCLKConfig+0x368>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  != RESET)
 8004a54:	4b8a      	ldr	r3, [pc, #552]	; (8004c80 <HAL_RCCEx_PeriphCLKConfig+0x280>)
 8004a56:	681b      	ldr	r3, [r3, #0]
 8004a58:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8004a5c:	2b00      	cmp	r3, #0
 8004a5e:	d1f0      	bne.n	8004a42 <HAL_RCCEx_PeriphCLKConfig+0x42>
    }

    /*---------------------------- I2S configuration -------------------------*/
    /* In Case of I2S Clock Configuration through PLLI2S, PLLI2SR must be added
      only for I2S configuration */
    if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == (RCC_PERIPHCLK_I2S))
 8004a60:	687b      	ldr	r3, [r7, #4]
 8004a62:	681b      	ldr	r3, [r3, #0]
 8004a64:	f003 0301 	and.w	r3, r3, #1
 8004a68:	2b00      	cmp	r3, #0
 8004a6a:	d009      	beq.n	8004a80 <HAL_RCCEx_PeriphCLKConfig+0x80>
      /* check for Parameters */
      assert_param(IS_RCC_PLLI2SR_VALUE(PeriphClkInit->PLLI2S.PLLI2SR));
      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO = f(VCO clock) = f(PLLI2S clock input) * (PLLI2SN/PLLM) */
      /* I2SCLK = f(PLLI2S clock output) = f(VCO clock) / PLLI2SR */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN , PeriphClkInit->PLLI2S.PLLI2SR);
 8004a6c:	687b      	ldr	r3, [r7, #4]
 8004a6e:	685b      	ldr	r3, [r3, #4]
 8004a70:	019a      	lsls	r2, r3, #6
 8004a72:	687b      	ldr	r3, [r7, #4]
 8004a74:	689b      	ldr	r3, [r3, #8]
 8004a76:	071b      	lsls	r3, r3, #28
 8004a78:	4981      	ldr	r1, [pc, #516]	; (8004c80 <HAL_RCCEx_PeriphCLKConfig+0x280>)
 8004a7a:	4313      	orrs	r3, r2
 8004a7c:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84
    }

    /*---------------------------- SAI configuration -------------------------*/
    /* In Case of SAI Clock Configuration through PLLI2S, PLLI2SQ and PLLI2S_DIVQ must
       be added only for SAI configuration */
    if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI_PLLI2S) == (RCC_PERIPHCLK_SAI_PLLI2S))
 8004a80:	687b      	ldr	r3, [r7, #4]
 8004a82:	681b      	ldr	r3, [r3, #0]
 8004a84:	f003 0302 	and.w	r3, r3, #2
 8004a88:	2b00      	cmp	r3, #0
 8004a8a:	d01f      	beq.n	8004acc <HAL_RCCEx_PeriphCLKConfig+0xcc>
      /* Check the PLLI2S division factors */
      assert_param(IS_RCC_PLLI2SQ_VALUE(PeriphClkInit->PLLI2S.PLLI2SQ));
      assert_param(IS_RCC_PLLI2S_DIVQ_VALUE(PeriphClkInit->PLLI2SDivQ));

      /* Read PLLI2SR value from PLLI2SCFGR register (this value is not need for SAI configuration) */
      tmpreg1 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SR) >> RCC_PLLI2SCFGR_PLLI2SR_Pos);
 8004a8c:	4b7c      	ldr	r3, [pc, #496]	; (8004c80 <HAL_RCCEx_PeriphCLKConfig+0x280>)
 8004a8e:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8004a92:	0f1b      	lsrs	r3, r3, #28
 8004a94:	f003 0307 	and.w	r3, r3, #7
 8004a98:	613b      	str	r3, [r7, #16]
      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO Input  = PLL_SOURCE/PLLM */
      /* PLLI2S_VCO Output = PLLI2S_VCO Input * PLLI2SN */
      /* SAI_CLK(first level) = PLLI2S_VCO Output/PLLI2SQ */
      __HAL_RCC_PLLI2S_SAICLK_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN , PeriphClkInit->PLLI2S.PLLI2SQ , tmpreg1);
 8004a9a:	687b      	ldr	r3, [r7, #4]
 8004a9c:	685b      	ldr	r3, [r3, #4]
 8004a9e:	019a      	lsls	r2, r3, #6
 8004aa0:	687b      	ldr	r3, [r7, #4]
 8004aa2:	68db      	ldr	r3, [r3, #12]
 8004aa4:	061b      	lsls	r3, r3, #24
 8004aa6:	431a      	orrs	r2, r3
 8004aa8:	693b      	ldr	r3, [r7, #16]
 8004aaa:	071b      	lsls	r3, r3, #28
 8004aac:	4974      	ldr	r1, [pc, #464]	; (8004c80 <HAL_RCCEx_PeriphCLKConfig+0x280>)
 8004aae:	4313      	orrs	r3, r2
 8004ab0:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84
      /* SAI_CLK_x = SAI_CLK(first level)/PLLI2SDIVQ */
      __HAL_RCC_PLLI2S_PLLSAICLKDIVQ_CONFIG(PeriphClkInit->PLLI2SDivQ);
 8004ab4:	4b72      	ldr	r3, [pc, #456]	; (8004c80 <HAL_RCCEx_PeriphCLKConfig+0x280>)
 8004ab6:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8004aba:	f023 021f 	bic.w	r2, r3, #31
 8004abe:	687b      	ldr	r3, [r7, #4]
 8004ac0:	69db      	ldr	r3, [r3, #28]
 8004ac2:	3b01      	subs	r3, #1
 8004ac4:	496e      	ldr	r1, [pc, #440]	; (8004c80 <HAL_RCCEx_PeriphCLKConfig+0x280>)
 8004ac6:	4313      	orrs	r3, r2
 8004ac8:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
    }

    /*----------------- In Case of PLLI2S is just selected  -----------------*/
    if((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_PLLI2S) == RCC_PERIPHCLK_PLLI2S)
 8004acc:	687b      	ldr	r3, [r7, #4]
 8004ace:	681b      	ldr	r3, [r3, #0]
 8004ad0:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004ad4:	2b00      	cmp	r3, #0
 8004ad6:	d00d      	beq.n	8004af4 <HAL_RCCEx_PeriphCLKConfig+0xf4>
      /* Check for Parameters */
      assert_param(IS_RCC_PLLI2SQ_VALUE(PeriphClkInit->PLLI2S.PLLI2SQ));
      assert_param(IS_RCC_PLLI2SR_VALUE(PeriphClkInit->PLLI2S.PLLI2SR));

      /* Configure the PLLI2S multiplication and division factors */
      __HAL_RCC_PLLI2S_SAICLK_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN, PeriphClkInit->PLLI2S.PLLI2SQ, PeriphClkInit->PLLI2S.PLLI2SR);
 8004ad8:	687b      	ldr	r3, [r7, #4]
 8004ada:	685b      	ldr	r3, [r3, #4]
 8004adc:	019a      	lsls	r2, r3, #6
 8004ade:	687b      	ldr	r3, [r7, #4]
 8004ae0:	68db      	ldr	r3, [r3, #12]
 8004ae2:	061b      	lsls	r3, r3, #24
 8004ae4:	431a      	orrs	r2, r3
 8004ae6:	687b      	ldr	r3, [r7, #4]
 8004ae8:	689b      	ldr	r3, [r3, #8]
 8004aea:	071b      	lsls	r3, r3, #28
 8004aec:	4964      	ldr	r1, [pc, #400]	; (8004c80 <HAL_RCCEx_PeriphCLKConfig+0x280>)
 8004aee:	4313      	orrs	r3, r2
 8004af0:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84
    }

    /* Enable the PLLI2S */
    __HAL_RCC_PLLI2S_ENABLE();
 8004af4:	4b61      	ldr	r3, [pc, #388]	; (8004c7c <HAL_RCCEx_PeriphCLKConfig+0x27c>)
 8004af6:	2201      	movs	r2, #1
 8004af8:	601a      	str	r2, [r3, #0]
    /* Get tick */
    tickstart = HAL_GetTick();
 8004afa:	f7fc ffa9 	bl	8001a50 <HAL_GetTick>
 8004afe:	6178      	str	r0, [r7, #20]
    /* Wait till PLLI2S is ready */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
 8004b00:	e008      	b.n	8004b14 <HAL_RCCEx_PeriphCLKConfig+0x114>
    {
      if((HAL_GetTick() - tickstart ) > PLLI2S_TIMEOUT_VALUE)
 8004b02:	f7fc ffa5 	bl	8001a50 <HAL_GetTick>
 8004b06:	4602      	mov	r2, r0
 8004b08:	697b      	ldr	r3, [r7, #20]
 8004b0a:	1ad3      	subs	r3, r2, r3
 8004b0c:	2b02      	cmp	r3, #2
 8004b0e:	d901      	bls.n	8004b14 <HAL_RCCEx_PeriphCLKConfig+0x114>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 8004b10:	2303      	movs	r3, #3
 8004b12:	e129      	b.n	8004d68 <HAL_RCCEx_PeriphCLKConfig+0x368>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
 8004b14:	4b5a      	ldr	r3, [pc, #360]	; (8004c80 <HAL_RCCEx_PeriphCLKConfig+0x280>)
 8004b16:	681b      	ldr	r3, [r3, #0]
 8004b18:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8004b1c:	2b00      	cmp	r3, #0
 8004b1e:	d0f0      	beq.n	8004b02 <HAL_RCCEx_PeriphCLKConfig+0x102>

  /*----------------------- SAI/LTDC Configuration (PLLSAI) ------------------*/
  /*----------------------- Common configuration SAI/LTDC --------------------*/
  /* In Case of SAI or LTDC Clock Configuration through PLLSAI, PLLSAIN division
     factor is common parameters for both peripherals */
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI_PLLSAI) == RCC_PERIPHCLK_SAI_PLLSAI) ||
 8004b20:	687b      	ldr	r3, [r7, #4]
 8004b22:	681b      	ldr	r3, [r3, #0]
 8004b24:	f003 0304 	and.w	r3, r3, #4
 8004b28:	2b00      	cmp	r3, #0
 8004b2a:	d105      	bne.n	8004b38 <HAL_RCCEx_PeriphCLKConfig+0x138>
     (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LTDC) == RCC_PERIPHCLK_LTDC))
 8004b2c:	687b      	ldr	r3, [r7, #4]
 8004b2e:	681b      	ldr	r3, [r3, #0]
 8004b30:	f003 0308 	and.w	r3, r3, #8
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI_PLLSAI) == RCC_PERIPHCLK_SAI_PLLSAI) ||
 8004b34:	2b00      	cmp	r3, #0
 8004b36:	d079      	beq.n	8004c2c <HAL_RCCEx_PeriphCLKConfig+0x22c>
  {
    /* Check the PLLSAI division factors */
    assert_param(IS_RCC_PLLSAIN_VALUE(PeriphClkInit->PLLSAI.PLLSAIN));

    /* Disable PLLSAI Clock */
    __HAL_RCC_PLLSAI_DISABLE();
 8004b38:	4b52      	ldr	r3, [pc, #328]	; (8004c84 <HAL_RCCEx_PeriphCLKConfig+0x284>)
 8004b3a:	2200      	movs	r2, #0
 8004b3c:	601a      	str	r2, [r3, #0]
    /* Get tick */
    tickstart = HAL_GetTick();
 8004b3e:	f7fc ff87 	bl	8001a50 <HAL_GetTick>
 8004b42:	6178      	str	r0, [r7, #20]
    /* Wait till PLLSAI is disabled */
    while(__HAL_RCC_PLLSAI_GET_FLAG() != RESET)
 8004b44:	e008      	b.n	8004b58 <HAL_RCCEx_PeriphCLKConfig+0x158>
    {
      if((HAL_GetTick() - tickstart ) > PLLSAI_TIMEOUT_VALUE)
 8004b46:	f7fc ff83 	bl	8001a50 <HAL_GetTick>
 8004b4a:	4602      	mov	r2, r0
 8004b4c:	697b      	ldr	r3, [r7, #20]
 8004b4e:	1ad3      	subs	r3, r2, r3
 8004b50:	2b02      	cmp	r3, #2
 8004b52:	d901      	bls.n	8004b58 <HAL_RCCEx_PeriphCLKConfig+0x158>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 8004b54:	2303      	movs	r3, #3
 8004b56:	e107      	b.n	8004d68 <HAL_RCCEx_PeriphCLKConfig+0x368>
    while(__HAL_RCC_PLLSAI_GET_FLAG() != RESET)
 8004b58:	4b49      	ldr	r3, [pc, #292]	; (8004c80 <HAL_RCCEx_PeriphCLKConfig+0x280>)
 8004b5a:	681b      	ldr	r3, [r3, #0]
 8004b5c:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8004b60:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8004b64:	d0ef      	beq.n	8004b46 <HAL_RCCEx_PeriphCLKConfig+0x146>
    }

    /*---------------------------- SAI configuration -------------------------*/
    /* In Case of SAI Clock Configuration through PLLSAI, PLLSAIQ and PLLSAI_DIVQ must
       be added only for SAI configuration */
    if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI_PLLSAI) == (RCC_PERIPHCLK_SAI_PLLSAI))
 8004b66:	687b      	ldr	r3, [r7, #4]
 8004b68:	681b      	ldr	r3, [r3, #0]
 8004b6a:	f003 0304 	and.w	r3, r3, #4
 8004b6e:	2b00      	cmp	r3, #0
 8004b70:	d020      	beq.n	8004bb4 <HAL_RCCEx_PeriphCLKConfig+0x1b4>
    {
      assert_param(IS_RCC_PLLSAIQ_VALUE(PeriphClkInit->PLLSAI.PLLSAIQ));
      assert_param(IS_RCC_PLLSAI_DIVQ_VALUE(PeriphClkInit->PLLSAIDivQ));

      /* Read PLLSAIR value from PLLSAICFGR register (this value is not need for SAI configuration) */
      tmpreg1 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIR) >> RCC_PLLSAICFGR_PLLSAIR_Pos);
 8004b72:	4b43      	ldr	r3, [pc, #268]	; (8004c80 <HAL_RCCEx_PeriphCLKConfig+0x280>)
 8004b74:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004b78:	0f1b      	lsrs	r3, r3, #28
 8004b7a:	f003 0307 	and.w	r3, r3, #7
 8004b7e:	613b      	str	r3, [r7, #16]
      /* PLLSAI_VCO Input  = PLL_SOURCE/PLLM */
      /* PLLSAI_VCO Output = PLLSAI_VCO Input * PLLSAIN */
      /* SAI_CLK(first level) = PLLSAI_VCO Output/PLLSAIQ */
      __HAL_RCC_PLLSAI_CONFIG(PeriphClkInit->PLLSAI.PLLSAIN , PeriphClkInit->PLLSAI.PLLSAIQ, tmpreg1);
 8004b80:	687b      	ldr	r3, [r7, #4]
 8004b82:	691b      	ldr	r3, [r3, #16]
 8004b84:	019a      	lsls	r2, r3, #6
 8004b86:	687b      	ldr	r3, [r7, #4]
 8004b88:	695b      	ldr	r3, [r3, #20]
 8004b8a:	061b      	lsls	r3, r3, #24
 8004b8c:	431a      	orrs	r2, r3
 8004b8e:	693b      	ldr	r3, [r7, #16]
 8004b90:	071b      	lsls	r3, r3, #28
 8004b92:	493b      	ldr	r1, [pc, #236]	; (8004c80 <HAL_RCCEx_PeriphCLKConfig+0x280>)
 8004b94:	4313      	orrs	r3, r2
 8004b96:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
      /* SAI_CLK_x = SAI_CLK(first level)/PLLSAIDIVQ */
      __HAL_RCC_PLLSAI_PLLSAICLKDIVQ_CONFIG(PeriphClkInit->PLLSAIDivQ);
 8004b9a:	4b39      	ldr	r3, [pc, #228]	; (8004c80 <HAL_RCCEx_PeriphCLKConfig+0x280>)
 8004b9c:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8004ba0:	f423 52f8 	bic.w	r2, r3, #7936	; 0x1f00
 8004ba4:	687b      	ldr	r3, [r7, #4]
 8004ba6:	6a1b      	ldr	r3, [r3, #32]
 8004ba8:	3b01      	subs	r3, #1
 8004baa:	021b      	lsls	r3, r3, #8
 8004bac:	4934      	ldr	r1, [pc, #208]	; (8004c80 <HAL_RCCEx_PeriphCLKConfig+0x280>)
 8004bae:	4313      	orrs	r3, r2
 8004bb0:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
    }

    /*---------------------------- LTDC configuration ------------------------*/
    if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LTDC) == (RCC_PERIPHCLK_LTDC))
 8004bb4:	687b      	ldr	r3, [r7, #4]
 8004bb6:	681b      	ldr	r3, [r3, #0]
 8004bb8:	f003 0308 	and.w	r3, r3, #8
 8004bbc:	2b00      	cmp	r3, #0
 8004bbe:	d01e      	beq.n	8004bfe <HAL_RCCEx_PeriphCLKConfig+0x1fe>
    {
      assert_param(IS_RCC_PLLSAIR_VALUE(PeriphClkInit->PLLSAI.PLLSAIR));
      assert_param(IS_RCC_PLLSAI_DIVR_VALUE(PeriphClkInit->PLLSAIDivR));

      /* Read PLLSAIR value from PLLSAICFGR register (this value is not need for SAI configuration) */
      tmpreg1 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIQ) >> RCC_PLLSAICFGR_PLLSAIQ_Pos);
 8004bc0:	4b2f      	ldr	r3, [pc, #188]	; (8004c80 <HAL_RCCEx_PeriphCLKConfig+0x280>)
 8004bc2:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004bc6:	0e1b      	lsrs	r3, r3, #24
 8004bc8:	f003 030f 	and.w	r3, r3, #15
 8004bcc:	613b      	str	r3, [r7, #16]
      /* PLLSAI_VCO Input  = PLL_SOURCE/PLLM */
      /* PLLSAI_VCO Output = PLLSAI_VCO Input * PLLSAIN */
      /* LTDC_CLK(first level) = PLLSAI_VCO Output/PLLSAIR */
      __HAL_RCC_PLLSAI_CONFIG(PeriphClkInit->PLLSAI.PLLSAIN , tmpreg1, PeriphClkInit->PLLSAI.PLLSAIR);
 8004bce:	687b      	ldr	r3, [r7, #4]
 8004bd0:	691b      	ldr	r3, [r3, #16]
 8004bd2:	019a      	lsls	r2, r3, #6
 8004bd4:	693b      	ldr	r3, [r7, #16]
 8004bd6:	061b      	lsls	r3, r3, #24
 8004bd8:	431a      	orrs	r2, r3
 8004bda:	687b      	ldr	r3, [r7, #4]
 8004bdc:	699b      	ldr	r3, [r3, #24]
 8004bde:	071b      	lsls	r3, r3, #28
 8004be0:	4927      	ldr	r1, [pc, #156]	; (8004c80 <HAL_RCCEx_PeriphCLKConfig+0x280>)
 8004be2:	4313      	orrs	r3, r2
 8004be4:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
      /* LTDC_CLK = LTDC_CLK(first level)/PLLSAIDIVR */
      __HAL_RCC_PLLSAI_PLLSAICLKDIVR_CONFIG(PeriphClkInit->PLLSAIDivR);
 8004be8:	4b25      	ldr	r3, [pc, #148]	; (8004c80 <HAL_RCCEx_PeriphCLKConfig+0x280>)
 8004bea:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8004bee:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 8004bf2:	687b      	ldr	r3, [r7, #4]
 8004bf4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004bf6:	4922      	ldr	r1, [pc, #136]	; (8004c80 <HAL_RCCEx_PeriphCLKConfig+0x280>)
 8004bf8:	4313      	orrs	r3, r2
 8004bfa:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
    }
    /* Enable PLLSAI Clock */
    __HAL_RCC_PLLSAI_ENABLE();
 8004bfe:	4b21      	ldr	r3, [pc, #132]	; (8004c84 <HAL_RCCEx_PeriphCLKConfig+0x284>)
 8004c00:	2201      	movs	r2, #1
 8004c02:	601a      	str	r2, [r3, #0]
    /* Get tick */
    tickstart = HAL_GetTick();
 8004c04:	f7fc ff24 	bl	8001a50 <HAL_GetTick>
 8004c08:	6178      	str	r0, [r7, #20]
    /* Wait till PLLSAI is ready */
    while(__HAL_RCC_PLLSAI_GET_FLAG() == RESET)
 8004c0a:	e008      	b.n	8004c1e <HAL_RCCEx_PeriphCLKConfig+0x21e>
    {
      if((HAL_GetTick() - tickstart ) > PLLSAI_TIMEOUT_VALUE)
 8004c0c:	f7fc ff20 	bl	8001a50 <HAL_GetTick>
 8004c10:	4602      	mov	r2, r0
 8004c12:	697b      	ldr	r3, [r7, #20]
 8004c14:	1ad3      	subs	r3, r2, r3
 8004c16:	2b02      	cmp	r3, #2
 8004c18:	d901      	bls.n	8004c1e <HAL_RCCEx_PeriphCLKConfig+0x21e>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 8004c1a:	2303      	movs	r3, #3
 8004c1c:	e0a4      	b.n	8004d68 <HAL_RCCEx_PeriphCLKConfig+0x368>
    while(__HAL_RCC_PLLSAI_GET_FLAG() == RESET)
 8004c1e:	4b18      	ldr	r3, [pc, #96]	; (8004c80 <HAL_RCCEx_PeriphCLKConfig+0x280>)
 8004c20:	681b      	ldr	r3, [r3, #0]
 8004c22:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8004c26:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8004c2a:	d1ef      	bne.n	8004c0c <HAL_RCCEx_PeriphCLKConfig+0x20c>
    }
  }
  /*--------------------------------------------------------------------------*/

  /*---------------------------- RTC configuration ---------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == (RCC_PERIPHCLK_RTC))
 8004c2c:	687b      	ldr	r3, [r7, #4]
 8004c2e:	681b      	ldr	r3, [r3, #0]
 8004c30:	f003 0320 	and.w	r3, r3, #32
 8004c34:	2b00      	cmp	r3, #0
 8004c36:	f000 808b 	beq.w	8004d50 <HAL_RCCEx_PeriphCLKConfig+0x350>
  {
    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock*/
    __HAL_RCC_PWR_CLK_ENABLE();
 8004c3a:	2300      	movs	r3, #0
 8004c3c:	60fb      	str	r3, [r7, #12]
 8004c3e:	4b10      	ldr	r3, [pc, #64]	; (8004c80 <HAL_RCCEx_PeriphCLKConfig+0x280>)
 8004c40:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004c42:	4a0f      	ldr	r2, [pc, #60]	; (8004c80 <HAL_RCCEx_PeriphCLKConfig+0x280>)
 8004c44:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8004c48:	6413      	str	r3, [r2, #64]	; 0x40
 8004c4a:	4b0d      	ldr	r3, [pc, #52]	; (8004c80 <HAL_RCCEx_PeriphCLKConfig+0x280>)
 8004c4c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004c4e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8004c52:	60fb      	str	r3, [r7, #12]
 8004c54:	68fb      	ldr	r3, [r7, #12]

    /* Enable write access to Backup domain */
    PWR->CR |= PWR_CR_DBP;
 8004c56:	4b0c      	ldr	r3, [pc, #48]	; (8004c88 <HAL_RCCEx_PeriphCLKConfig+0x288>)
 8004c58:	681b      	ldr	r3, [r3, #0]
 8004c5a:	4a0b      	ldr	r2, [pc, #44]	; (8004c88 <HAL_RCCEx_PeriphCLKConfig+0x288>)
 8004c5c:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8004c60:	6013      	str	r3, [r2, #0]

    /* Get tick */
    tickstart = HAL_GetTick();
 8004c62:	f7fc fef5 	bl	8001a50 <HAL_GetTick>
 8004c66:	6178      	str	r0, [r7, #20]

    while((PWR->CR & PWR_CR_DBP) == RESET)
 8004c68:	e010      	b.n	8004c8c <HAL_RCCEx_PeriphCLKConfig+0x28c>
    {
      if((HAL_GetTick() - tickstart ) > RCC_DBP_TIMEOUT_VALUE)
 8004c6a:	f7fc fef1 	bl	8001a50 <HAL_GetTick>
 8004c6e:	4602      	mov	r2, r0
 8004c70:	697b      	ldr	r3, [r7, #20]
 8004c72:	1ad3      	subs	r3, r2, r3
 8004c74:	2b02      	cmp	r3, #2
 8004c76:	d909      	bls.n	8004c8c <HAL_RCCEx_PeriphCLKConfig+0x28c>
      {
        return HAL_TIMEOUT;
 8004c78:	2303      	movs	r3, #3
 8004c7a:	e075      	b.n	8004d68 <HAL_RCCEx_PeriphCLKConfig+0x368>
 8004c7c:	42470068 	.word	0x42470068
 8004c80:	40023800 	.word	0x40023800
 8004c84:	42470070 	.word	0x42470070
 8004c88:	40007000 	.word	0x40007000
    while((PWR->CR & PWR_CR_DBP) == RESET)
 8004c8c:	4b38      	ldr	r3, [pc, #224]	; (8004d70 <HAL_RCCEx_PeriphCLKConfig+0x370>)
 8004c8e:	681b      	ldr	r3, [r3, #0]
 8004c90:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004c94:	2b00      	cmp	r3, #0
 8004c96:	d0e8      	beq.n	8004c6a <HAL_RCCEx_PeriphCLKConfig+0x26a>
      }
    }
    /* Reset the Backup domain only if the RTC Clock source selection is modified from reset value */
    tmpreg1 = (RCC->BDCR & RCC_BDCR_RTCSEL);
 8004c98:	4b36      	ldr	r3, [pc, #216]	; (8004d74 <HAL_RCCEx_PeriphCLKConfig+0x374>)
 8004c9a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004c9c:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8004ca0:	613b      	str	r3, [r7, #16]
    if((tmpreg1 != 0x00000000U) && ((tmpreg1) != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 8004ca2:	693b      	ldr	r3, [r7, #16]
 8004ca4:	2b00      	cmp	r3, #0
 8004ca6:	d02f      	beq.n	8004d08 <HAL_RCCEx_PeriphCLKConfig+0x308>
 8004ca8:	687b      	ldr	r3, [r7, #4]
 8004caa:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004cac:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8004cb0:	693a      	ldr	r2, [r7, #16]
 8004cb2:	429a      	cmp	r2, r3
 8004cb4:	d028      	beq.n	8004d08 <HAL_RCCEx_PeriphCLKConfig+0x308>
    {
      /* Store the content of BDCR register before the reset of Backup Domain */
      tmpreg1 = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 8004cb6:	4b2f      	ldr	r3, [pc, #188]	; (8004d74 <HAL_RCCEx_PeriphCLKConfig+0x374>)
 8004cb8:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004cba:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8004cbe:	613b      	str	r3, [r7, #16]
      /* RTC Clock selection can be changed only if the Backup Domain is reset */
      __HAL_RCC_BACKUPRESET_FORCE();
 8004cc0:	4b2d      	ldr	r3, [pc, #180]	; (8004d78 <HAL_RCCEx_PeriphCLKConfig+0x378>)
 8004cc2:	2201      	movs	r2, #1
 8004cc4:	601a      	str	r2, [r3, #0]
      __HAL_RCC_BACKUPRESET_RELEASE();
 8004cc6:	4b2c      	ldr	r3, [pc, #176]	; (8004d78 <HAL_RCCEx_PeriphCLKConfig+0x378>)
 8004cc8:	2200      	movs	r2, #0
 8004cca:	601a      	str	r2, [r3, #0]
      /* Restore the Content of BDCR register */
      RCC->BDCR = tmpreg1;
 8004ccc:	4a29      	ldr	r2, [pc, #164]	; (8004d74 <HAL_RCCEx_PeriphCLKConfig+0x374>)
 8004cce:	693b      	ldr	r3, [r7, #16]
 8004cd0:	6713      	str	r3, [r2, #112]	; 0x70

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if(HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSEON))
 8004cd2:	4b28      	ldr	r3, [pc, #160]	; (8004d74 <HAL_RCCEx_PeriphCLKConfig+0x374>)
 8004cd4:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004cd6:	f003 0301 	and.w	r3, r3, #1
 8004cda:	2b01      	cmp	r3, #1
 8004cdc:	d114      	bne.n	8004d08 <HAL_RCCEx_PeriphCLKConfig+0x308>
      {
        /* Get tick */
        tickstart = HAL_GetTick();
 8004cde:	f7fc feb7 	bl	8001a50 <HAL_GetTick>
 8004ce2:	6178      	str	r0, [r7, #20]

        /* Wait till LSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8004ce4:	e00a      	b.n	8004cfc <HAL_RCCEx_PeriphCLKConfig+0x2fc>
        {
          if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8004ce6:	f7fc feb3 	bl	8001a50 <HAL_GetTick>
 8004cea:	4602      	mov	r2, r0
 8004cec:	697b      	ldr	r3, [r7, #20]
 8004cee:	1ad3      	subs	r3, r2, r3
 8004cf0:	f241 3288 	movw	r2, #5000	; 0x1388
 8004cf4:	4293      	cmp	r3, r2
 8004cf6:	d901      	bls.n	8004cfc <HAL_RCCEx_PeriphCLKConfig+0x2fc>
          {
            return HAL_TIMEOUT;
 8004cf8:	2303      	movs	r3, #3
 8004cfa:	e035      	b.n	8004d68 <HAL_RCCEx_PeriphCLKConfig+0x368>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8004cfc:	4b1d      	ldr	r3, [pc, #116]	; (8004d74 <HAL_RCCEx_PeriphCLKConfig+0x374>)
 8004cfe:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004d00:	f003 0302 	and.w	r3, r3, #2
 8004d04:	2b00      	cmp	r3, #0
 8004d06:	d0ee      	beq.n	8004ce6 <HAL_RCCEx_PeriphCLKConfig+0x2e6>
          }
        }
      }
    }
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8004d08:	687b      	ldr	r3, [r7, #4]
 8004d0a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004d0c:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8004d10:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8004d14:	d10d      	bne.n	8004d32 <HAL_RCCEx_PeriphCLKConfig+0x332>
 8004d16:	4b17      	ldr	r3, [pc, #92]	; (8004d74 <HAL_RCCEx_PeriphCLKConfig+0x374>)
 8004d18:	689b      	ldr	r3, [r3, #8]
 8004d1a:	f423 12f8 	bic.w	r2, r3, #2031616	; 0x1f0000
 8004d1e:	687b      	ldr	r3, [r7, #4]
 8004d20:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004d22:	f023 4370 	bic.w	r3, r3, #4026531840	; 0xf0000000
 8004d26:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8004d2a:	4912      	ldr	r1, [pc, #72]	; (8004d74 <HAL_RCCEx_PeriphCLKConfig+0x374>)
 8004d2c:	4313      	orrs	r3, r2
 8004d2e:	608b      	str	r3, [r1, #8]
 8004d30:	e005      	b.n	8004d3e <HAL_RCCEx_PeriphCLKConfig+0x33e>
 8004d32:	4b10      	ldr	r3, [pc, #64]	; (8004d74 <HAL_RCCEx_PeriphCLKConfig+0x374>)
 8004d34:	689b      	ldr	r3, [r3, #8]
 8004d36:	4a0f      	ldr	r2, [pc, #60]	; (8004d74 <HAL_RCCEx_PeriphCLKConfig+0x374>)
 8004d38:	f423 13f8 	bic.w	r3, r3, #2031616	; 0x1f0000
 8004d3c:	6093      	str	r3, [r2, #8]
 8004d3e:	4b0d      	ldr	r3, [pc, #52]	; (8004d74 <HAL_RCCEx_PeriphCLKConfig+0x374>)
 8004d40:	6f1a      	ldr	r2, [r3, #112]	; 0x70
 8004d42:	687b      	ldr	r3, [r7, #4]
 8004d44:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004d46:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8004d4a:	490a      	ldr	r1, [pc, #40]	; (8004d74 <HAL_RCCEx_PeriphCLKConfig+0x374>)
 8004d4c:	4313      	orrs	r3, r2
 8004d4e:	670b      	str	r3, [r1, #112]	; 0x70
  }
  /*--------------------------------------------------------------------------*/

  /*---------------------------- TIM configuration ---------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM) == (RCC_PERIPHCLK_TIM))
 8004d50:	687b      	ldr	r3, [r7, #4]
 8004d52:	681b      	ldr	r3, [r3, #0]
 8004d54:	f003 0310 	and.w	r3, r3, #16
 8004d58:	2b00      	cmp	r3, #0
 8004d5a:	d004      	beq.n	8004d66 <HAL_RCCEx_PeriphCLKConfig+0x366>
  {
    __HAL_RCC_TIMCLKPRESCALER(PeriphClkInit->TIMPresSelection);
 8004d5c:	687b      	ldr	r3, [r7, #4]
 8004d5e:	f893 202c 	ldrb.w	r2, [r3, #44]	; 0x2c
 8004d62:	4b06      	ldr	r3, [pc, #24]	; (8004d7c <HAL_RCCEx_PeriphCLKConfig+0x37c>)
 8004d64:	601a      	str	r2, [r3, #0]
  }
  return HAL_OK;
 8004d66:	2300      	movs	r3, #0
}
 8004d68:	4618      	mov	r0, r3
 8004d6a:	3718      	adds	r7, #24
 8004d6c:	46bd      	mov	sp, r7
 8004d6e:	bd80      	pop	{r7, pc}
 8004d70:	40007000 	.word	0x40007000
 8004d74:	40023800 	.word	0x40023800
 8004d78:	42470e40 	.word	0x42470e40
 8004d7c:	424711e0 	.word	0x424711e0

08004d80 <HAL_SDRAM_Init>:
  *                the configuration information for SDRAM module.
  * @param  Timing Pointer to SDRAM control timing structure
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SDRAM_Init(SDRAM_HandleTypeDef *hsdram, FMC_SDRAM_TimingTypeDef *Timing)
{
 8004d80:	b580      	push	{r7, lr}
 8004d82:	b082      	sub	sp, #8
 8004d84:	af00      	add	r7, sp, #0
 8004d86:	6078      	str	r0, [r7, #4]
 8004d88:	6039      	str	r1, [r7, #0]
  /* Check the SDRAM handle parameter */
  if (hsdram == NULL)
 8004d8a:	687b      	ldr	r3, [r7, #4]
 8004d8c:	2b00      	cmp	r3, #0
 8004d8e:	d101      	bne.n	8004d94 <HAL_SDRAM_Init+0x14>
  {
    return HAL_ERROR;
 8004d90:	2301      	movs	r3, #1
 8004d92:	e025      	b.n	8004de0 <HAL_SDRAM_Init+0x60>
  }

  if (hsdram->State == HAL_SDRAM_STATE_RESET)
 8004d94:	687b      	ldr	r3, [r7, #4]
 8004d96:	f893 302c 	ldrb.w	r3, [r3, #44]	; 0x2c
 8004d9a:	b2db      	uxtb	r3, r3
 8004d9c:	2b00      	cmp	r3, #0
 8004d9e:	d106      	bne.n	8004dae <HAL_SDRAM_Init+0x2e>
  {
    /* Allocate lock resource and initialize it */
    hsdram->Lock = HAL_UNLOCKED;
 8004da0:	687b      	ldr	r3, [r7, #4]
 8004da2:	2200      	movs	r2, #0
 8004da4:	f883 202d 	strb.w	r2, [r3, #45]	; 0x2d

    /* Init the low level hardware */
    hsdram->MspInitCallback(hsdram);
#else
    /* Initialize the low level hardware (MSP) */
    HAL_SDRAM_MspInit(hsdram);
 8004da8:	6878      	ldr	r0, [r7, #4]
 8004daa:	f7fc fb3b 	bl	8001424 <HAL_SDRAM_MspInit>
#endif /* USE_HAL_SDRAM_REGISTER_CALLBACKS */
  }

  /* Initialize the SDRAM controller state */
  hsdram->State = HAL_SDRAM_STATE_BUSY;
 8004dae:	687b      	ldr	r3, [r7, #4]
 8004db0:	2202      	movs	r2, #2
 8004db2:	f883 202c 	strb.w	r2, [r3, #44]	; 0x2c

  /* Initialize SDRAM control Interface */
  (void)FMC_SDRAM_Init(hsdram->Instance, &(hsdram->Init));
 8004db6:	687b      	ldr	r3, [r7, #4]
 8004db8:	681a      	ldr	r2, [r3, #0]
 8004dba:	687b      	ldr	r3, [r7, #4]
 8004dbc:	3304      	adds	r3, #4
 8004dbe:	4619      	mov	r1, r3
 8004dc0:	4610      	mov	r0, r2
 8004dc2:	f001 f8dd 	bl	8005f80 <FMC_SDRAM_Init>

  /* Initialize SDRAM timing Interface */
  (void)FMC_SDRAM_Timing_Init(hsdram->Instance, Timing, hsdram->Init.SDBank);
 8004dc6:	687b      	ldr	r3, [r7, #4]
 8004dc8:	6818      	ldr	r0, [r3, #0]
 8004dca:	687b      	ldr	r3, [r7, #4]
 8004dcc:	685b      	ldr	r3, [r3, #4]
 8004dce:	461a      	mov	r2, r3
 8004dd0:	6839      	ldr	r1, [r7, #0]
 8004dd2:	f001 f932 	bl	800603a <FMC_SDRAM_Timing_Init>
  /* Update the SDRAM controller state */
  hsdram->State = HAL_SDRAM_STATE_READY;
 8004dd6:	687b      	ldr	r3, [r7, #4]
 8004dd8:	2201      	movs	r2, #1
 8004dda:	f883 202c 	strb.w	r2, [r3, #44]	; 0x2c

  return HAL_OK;
 8004dde:	2300      	movs	r3, #0
}
 8004de0:	4618      	mov	r0, r3
 8004de2:	3708      	adds	r7, #8
 8004de4:	46bd      	mov	sp, r7
 8004de6:	bd80      	pop	{r7, pc}

08004de8 <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 8004de8:	b580      	push	{r7, lr}
 8004dea:	b082      	sub	sp, #8
 8004dec:	af00      	add	r7, sp, #0
 8004dee:	6078      	str	r0, [r7, #4]
  /* Check the SPI handle allocation */
  if (hspi == NULL)
 8004df0:	687b      	ldr	r3, [r7, #4]
 8004df2:	2b00      	cmp	r3, #0
 8004df4:	d101      	bne.n	8004dfa <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 8004df6:	2301      	movs	r3, #1
 8004df8:	e07b      	b.n	8004ef2 <HAL_SPI_Init+0x10a>
  assert_param(IS_SPI_DATASIZE(hspi->Init.DataSize));
  assert_param(IS_SPI_NSS(hspi->Init.NSS));
  assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
  assert_param(IS_SPI_FIRST_BIT(hspi->Init.FirstBit));
  assert_param(IS_SPI_TIMODE(hspi->Init.TIMode));
  if (hspi->Init.TIMode == SPI_TIMODE_DISABLE)
 8004dfa:	687b      	ldr	r3, [r7, #4]
 8004dfc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004dfe:	2b00      	cmp	r3, #0
 8004e00:	d108      	bne.n	8004e14 <HAL_SPI_Init+0x2c>
  {
    assert_param(IS_SPI_CPOL(hspi->Init.CLKPolarity));
    assert_param(IS_SPI_CPHA(hspi->Init.CLKPhase));

    if (hspi->Init.Mode == SPI_MODE_MASTER)
 8004e02:	687b      	ldr	r3, [r7, #4]
 8004e04:	685b      	ldr	r3, [r3, #4]
 8004e06:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8004e0a:	d009      	beq.n	8004e20 <HAL_SPI_Init+0x38>
      assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
    }
    else
    {
      /* Baudrate prescaler not use in Motoraola Slave mode. force to default value */
      hspi->Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 8004e0c:	687b      	ldr	r3, [r7, #4]
 8004e0e:	2200      	movs	r2, #0
 8004e10:	61da      	str	r2, [r3, #28]
 8004e12:	e005      	b.n	8004e20 <HAL_SPI_Init+0x38>
  else
  {
    assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));

    /* Force polarity and phase to TI protocaol requirements */
    hspi->Init.CLKPolarity = SPI_POLARITY_LOW;
 8004e14:	687b      	ldr	r3, [r7, #4]
 8004e16:	2200      	movs	r2, #0
 8004e18:	611a      	str	r2, [r3, #16]
    hspi->Init.CLKPhase    = SPI_PHASE_1EDGE;
 8004e1a:	687b      	ldr	r3, [r7, #4]
 8004e1c:	2200      	movs	r2, #0
 8004e1e:	615a      	str	r2, [r3, #20]
  if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8004e20:	687b      	ldr	r3, [r7, #4]
 8004e22:	2200      	movs	r2, #0
 8004e24:	629a      	str	r2, [r3, #40]	; 0x28
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 8004e26:	687b      	ldr	r3, [r7, #4]
 8004e28:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8004e2c:	b2db      	uxtb	r3, r3
 8004e2e:	2b00      	cmp	r3, #0
 8004e30:	d106      	bne.n	8004e40 <HAL_SPI_Init+0x58>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 8004e32:	687b      	ldr	r3, [r7, #4]
 8004e34:	2200      	movs	r2, #0
 8004e36:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 8004e3a:	6878      	ldr	r0, [r7, #4]
 8004e3c:	f7fc f9ae 	bl	800119c <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 8004e40:	687b      	ldr	r3, [r7, #4]
 8004e42:	2202      	movs	r2, #2
 8004e44:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 8004e48:	687b      	ldr	r3, [r7, #4]
 8004e4a:	681b      	ldr	r3, [r3, #0]
 8004e4c:	681a      	ldr	r2, [r3, #0]
 8004e4e:	687b      	ldr	r3, [r7, #4]
 8004e50:	681b      	ldr	r3, [r3, #0]
 8004e52:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8004e56:	601a      	str	r2, [r3, #0]

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Data size, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, ((hspi->Init.Mode & (SPI_CR1_MSTR | SPI_CR1_SSI)) |
 8004e58:	687b      	ldr	r3, [r7, #4]
 8004e5a:	685b      	ldr	r3, [r3, #4]
 8004e5c:	f403 7282 	and.w	r2, r3, #260	; 0x104
 8004e60:	687b      	ldr	r3, [r7, #4]
 8004e62:	689b      	ldr	r3, [r3, #8]
 8004e64:	f403 4304 	and.w	r3, r3, #33792	; 0x8400
 8004e68:	431a      	orrs	r2, r3
 8004e6a:	687b      	ldr	r3, [r7, #4]
 8004e6c:	68db      	ldr	r3, [r3, #12]
 8004e6e:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8004e72:	431a      	orrs	r2, r3
 8004e74:	687b      	ldr	r3, [r7, #4]
 8004e76:	691b      	ldr	r3, [r3, #16]
 8004e78:	f003 0302 	and.w	r3, r3, #2
 8004e7c:	431a      	orrs	r2, r3
 8004e7e:	687b      	ldr	r3, [r7, #4]
 8004e80:	695b      	ldr	r3, [r3, #20]
 8004e82:	f003 0301 	and.w	r3, r3, #1
 8004e86:	431a      	orrs	r2, r3
 8004e88:	687b      	ldr	r3, [r7, #4]
 8004e8a:	699b      	ldr	r3, [r3, #24]
 8004e8c:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8004e90:	431a      	orrs	r2, r3
 8004e92:	687b      	ldr	r3, [r7, #4]
 8004e94:	69db      	ldr	r3, [r3, #28]
 8004e96:	f003 0338 	and.w	r3, r3, #56	; 0x38
 8004e9a:	431a      	orrs	r2, r3
 8004e9c:	687b      	ldr	r3, [r7, #4]
 8004e9e:	6a1b      	ldr	r3, [r3, #32]
 8004ea0:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8004ea4:	ea42 0103 	orr.w	r1, r2, r3
 8004ea8:	687b      	ldr	r3, [r7, #4]
 8004eaa:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004eac:	f403 5200 	and.w	r2, r3, #8192	; 0x2000
 8004eb0:	687b      	ldr	r3, [r7, #4]
 8004eb2:	681b      	ldr	r3, [r3, #0]
 8004eb4:	430a      	orrs	r2, r1
 8004eb6:	601a      	str	r2, [r3, #0]
                                  (hspi->Init.BaudRatePrescaler & SPI_CR1_BR_Msk) |
                                  (hspi->Init.FirstBit  & SPI_CR1_LSBFIRST) |
                                  (hspi->Init.CRCCalculation & SPI_CR1_CRCEN)));

  /* Configure : NSS management, TI Mode */
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) | (hspi->Init.TIMode & SPI_CR2_FRF)));
 8004eb8:	687b      	ldr	r3, [r7, #4]
 8004eba:	699b      	ldr	r3, [r3, #24]
 8004ebc:	0c1b      	lsrs	r3, r3, #16
 8004ebe:	f003 0104 	and.w	r1, r3, #4
 8004ec2:	687b      	ldr	r3, [r7, #4]
 8004ec4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004ec6:	f003 0210 	and.w	r2, r3, #16
 8004eca:	687b      	ldr	r3, [r7, #4]
 8004ecc:	681b      	ldr	r3, [r3, #0]
 8004ece:	430a      	orrs	r2, r1
 8004ed0:	605a      	str	r2, [r3, #4]
  }
#endif /* USE_SPI_CRC */

#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 8004ed2:	687b      	ldr	r3, [r7, #4]
 8004ed4:	681b      	ldr	r3, [r3, #0]
 8004ed6:	69da      	ldr	r2, [r3, #28]
 8004ed8:	687b      	ldr	r3, [r7, #4]
 8004eda:	681b      	ldr	r3, [r3, #0]
 8004edc:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8004ee0:	61da      	str	r2, [r3, #28]
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 8004ee2:	687b      	ldr	r3, [r7, #4]
 8004ee4:	2200      	movs	r2, #0
 8004ee6:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->State     = HAL_SPI_STATE_READY;
 8004ee8:	687b      	ldr	r3, [r7, #4]
 8004eea:	2201      	movs	r2, #1
 8004eec:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

  return HAL_OK;
 8004ef0:	2300      	movs	r3, #0
}
 8004ef2:	4618      	mov	r0, r3
 8004ef4:	3708      	adds	r7, #8
 8004ef6:	46bd      	mov	sp, r7
 8004ef8:	bd80      	pop	{r7, pc}

08004efa <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8004efa:	b580      	push	{r7, lr}
 8004efc:	b082      	sub	sp, #8
 8004efe:	af00      	add	r7, sp, #0
 8004f00:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8004f02:	687b      	ldr	r3, [r7, #4]
 8004f04:	2b00      	cmp	r3, #0
 8004f06:	d101      	bne.n	8004f0c <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8004f08:	2301      	movs	r3, #1
 8004f0a:	e041      	b.n	8004f90 <HAL_TIM_Base_Init+0x96>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8004f0c:	687b      	ldr	r3, [r7, #4]
 8004f0e:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8004f12:	b2db      	uxtb	r3, r3
 8004f14:	2b00      	cmp	r3, #0
 8004f16:	d106      	bne.n	8004f26 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8004f18:	687b      	ldr	r3, [r7, #4]
 8004f1a:	2200      	movs	r2, #0
 8004f1c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8004f20:	6878      	ldr	r0, [r7, #4]
 8004f22:	f7fc f983 	bl	800122c <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8004f26:	687b      	ldr	r3, [r7, #4]
 8004f28:	2202      	movs	r2, #2
 8004f2a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8004f2e:	687b      	ldr	r3, [r7, #4]
 8004f30:	681a      	ldr	r2, [r3, #0]
 8004f32:	687b      	ldr	r3, [r7, #4]
 8004f34:	3304      	adds	r3, #4
 8004f36:	4619      	mov	r1, r3
 8004f38:	4610      	mov	r0, r2
 8004f3a:	f000 fa95 	bl	8005468 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8004f3e:	687b      	ldr	r3, [r7, #4]
 8004f40:	2201      	movs	r2, #1
 8004f42:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8004f46:	687b      	ldr	r3, [r7, #4]
 8004f48:	2201      	movs	r2, #1
 8004f4a:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8004f4e:	687b      	ldr	r3, [r7, #4]
 8004f50:	2201      	movs	r2, #1
 8004f52:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8004f56:	687b      	ldr	r3, [r7, #4]
 8004f58:	2201      	movs	r2, #1
 8004f5a:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8004f5e:	687b      	ldr	r3, [r7, #4]
 8004f60:	2201      	movs	r2, #1
 8004f62:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8004f66:	687b      	ldr	r3, [r7, #4]
 8004f68:	2201      	movs	r2, #1
 8004f6a:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8004f6e:	687b      	ldr	r3, [r7, #4]
 8004f70:	2201      	movs	r2, #1
 8004f72:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 8004f76:	687b      	ldr	r3, [r7, #4]
 8004f78:	2201      	movs	r2, #1
 8004f7a:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8004f7e:	687b      	ldr	r3, [r7, #4]
 8004f80:	2201      	movs	r2, #1
 8004f82:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8004f86:	687b      	ldr	r3, [r7, #4]
 8004f88:	2201      	movs	r2, #1
 8004f8a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8004f8e:	2300      	movs	r3, #0
}
 8004f90:	4618      	mov	r0, r3
 8004f92:	3708      	adds	r7, #8
 8004f94:	46bd      	mov	sp, r7
 8004f96:	bd80      	pop	{r7, pc}

08004f98 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 8004f98:	b480      	push	{r7}
 8004f9a:	b085      	sub	sp, #20
 8004f9c:	af00      	add	r7, sp, #0
 8004f9e:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8004fa0:	687b      	ldr	r3, [r7, #4]
 8004fa2:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8004fa6:	b2db      	uxtb	r3, r3
 8004fa8:	2b01      	cmp	r3, #1
 8004faa:	d001      	beq.n	8004fb0 <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 8004fac:	2301      	movs	r3, #1
 8004fae:	e04e      	b.n	800504e <HAL_TIM_Base_Start_IT+0xb6>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8004fb0:	687b      	ldr	r3, [r7, #4]
 8004fb2:	2202      	movs	r2, #2
 8004fb4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 8004fb8:	687b      	ldr	r3, [r7, #4]
 8004fba:	681b      	ldr	r3, [r3, #0]
 8004fbc:	68da      	ldr	r2, [r3, #12]
 8004fbe:	687b      	ldr	r3, [r7, #4]
 8004fc0:	681b      	ldr	r3, [r3, #0]
 8004fc2:	f042 0201 	orr.w	r2, r2, #1
 8004fc6:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8004fc8:	687b      	ldr	r3, [r7, #4]
 8004fca:	681b      	ldr	r3, [r3, #0]
 8004fcc:	4a23      	ldr	r2, [pc, #140]	; (800505c <HAL_TIM_Base_Start_IT+0xc4>)
 8004fce:	4293      	cmp	r3, r2
 8004fd0:	d022      	beq.n	8005018 <HAL_TIM_Base_Start_IT+0x80>
 8004fd2:	687b      	ldr	r3, [r7, #4]
 8004fd4:	681b      	ldr	r3, [r3, #0]
 8004fd6:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8004fda:	d01d      	beq.n	8005018 <HAL_TIM_Base_Start_IT+0x80>
 8004fdc:	687b      	ldr	r3, [r7, #4]
 8004fde:	681b      	ldr	r3, [r3, #0]
 8004fe0:	4a1f      	ldr	r2, [pc, #124]	; (8005060 <HAL_TIM_Base_Start_IT+0xc8>)
 8004fe2:	4293      	cmp	r3, r2
 8004fe4:	d018      	beq.n	8005018 <HAL_TIM_Base_Start_IT+0x80>
 8004fe6:	687b      	ldr	r3, [r7, #4]
 8004fe8:	681b      	ldr	r3, [r3, #0]
 8004fea:	4a1e      	ldr	r2, [pc, #120]	; (8005064 <HAL_TIM_Base_Start_IT+0xcc>)
 8004fec:	4293      	cmp	r3, r2
 8004fee:	d013      	beq.n	8005018 <HAL_TIM_Base_Start_IT+0x80>
 8004ff0:	687b      	ldr	r3, [r7, #4]
 8004ff2:	681b      	ldr	r3, [r3, #0]
 8004ff4:	4a1c      	ldr	r2, [pc, #112]	; (8005068 <HAL_TIM_Base_Start_IT+0xd0>)
 8004ff6:	4293      	cmp	r3, r2
 8004ff8:	d00e      	beq.n	8005018 <HAL_TIM_Base_Start_IT+0x80>
 8004ffa:	687b      	ldr	r3, [r7, #4]
 8004ffc:	681b      	ldr	r3, [r3, #0]
 8004ffe:	4a1b      	ldr	r2, [pc, #108]	; (800506c <HAL_TIM_Base_Start_IT+0xd4>)
 8005000:	4293      	cmp	r3, r2
 8005002:	d009      	beq.n	8005018 <HAL_TIM_Base_Start_IT+0x80>
 8005004:	687b      	ldr	r3, [r7, #4]
 8005006:	681b      	ldr	r3, [r3, #0]
 8005008:	4a19      	ldr	r2, [pc, #100]	; (8005070 <HAL_TIM_Base_Start_IT+0xd8>)
 800500a:	4293      	cmp	r3, r2
 800500c:	d004      	beq.n	8005018 <HAL_TIM_Base_Start_IT+0x80>
 800500e:	687b      	ldr	r3, [r7, #4]
 8005010:	681b      	ldr	r3, [r3, #0]
 8005012:	4a18      	ldr	r2, [pc, #96]	; (8005074 <HAL_TIM_Base_Start_IT+0xdc>)
 8005014:	4293      	cmp	r3, r2
 8005016:	d111      	bne.n	800503c <HAL_TIM_Base_Start_IT+0xa4>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8005018:	687b      	ldr	r3, [r7, #4]
 800501a:	681b      	ldr	r3, [r3, #0]
 800501c:	689b      	ldr	r3, [r3, #8]
 800501e:	f003 0307 	and.w	r3, r3, #7
 8005022:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8005024:	68fb      	ldr	r3, [r7, #12]
 8005026:	2b06      	cmp	r3, #6
 8005028:	d010      	beq.n	800504c <HAL_TIM_Base_Start_IT+0xb4>
    {
      __HAL_TIM_ENABLE(htim);
 800502a:	687b      	ldr	r3, [r7, #4]
 800502c:	681b      	ldr	r3, [r3, #0]
 800502e:	681a      	ldr	r2, [r3, #0]
 8005030:	687b      	ldr	r3, [r7, #4]
 8005032:	681b      	ldr	r3, [r3, #0]
 8005034:	f042 0201 	orr.w	r2, r2, #1
 8005038:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800503a:	e007      	b.n	800504c <HAL_TIM_Base_Start_IT+0xb4>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 800503c:	687b      	ldr	r3, [r7, #4]
 800503e:	681b      	ldr	r3, [r3, #0]
 8005040:	681a      	ldr	r2, [r3, #0]
 8005042:	687b      	ldr	r3, [r7, #4]
 8005044:	681b      	ldr	r3, [r3, #0]
 8005046:	f042 0201 	orr.w	r2, r2, #1
 800504a:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 800504c:	2300      	movs	r3, #0
}
 800504e:	4618      	mov	r0, r3
 8005050:	3714      	adds	r7, #20
 8005052:	46bd      	mov	sp, r7
 8005054:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005058:	4770      	bx	lr
 800505a:	bf00      	nop
 800505c:	40010000 	.word	0x40010000
 8005060:	40000400 	.word	0x40000400
 8005064:	40000800 	.word	0x40000800
 8005068:	40000c00 	.word	0x40000c00
 800506c:	40010400 	.word	0x40010400
 8005070:	40014000 	.word	0x40014000
 8005074:	40001800 	.word	0x40001800

08005078 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8005078:	b580      	push	{r7, lr}
 800507a:	b082      	sub	sp, #8
 800507c:	af00      	add	r7, sp, #0
 800507e:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 8005080:	687b      	ldr	r3, [r7, #4]
 8005082:	681b      	ldr	r3, [r3, #0]
 8005084:	691b      	ldr	r3, [r3, #16]
 8005086:	f003 0302 	and.w	r3, r3, #2
 800508a:	2b02      	cmp	r3, #2
 800508c:	d122      	bne.n	80050d4 <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 800508e:	687b      	ldr	r3, [r7, #4]
 8005090:	681b      	ldr	r3, [r3, #0]
 8005092:	68db      	ldr	r3, [r3, #12]
 8005094:	f003 0302 	and.w	r3, r3, #2
 8005098:	2b02      	cmp	r3, #2
 800509a:	d11b      	bne.n	80050d4 <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 800509c:	687b      	ldr	r3, [r7, #4]
 800509e:	681b      	ldr	r3, [r3, #0]
 80050a0:	f06f 0202 	mvn.w	r2, #2
 80050a4:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 80050a6:	687b      	ldr	r3, [r7, #4]
 80050a8:	2201      	movs	r2, #1
 80050aa:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 80050ac:	687b      	ldr	r3, [r7, #4]
 80050ae:	681b      	ldr	r3, [r3, #0]
 80050b0:	699b      	ldr	r3, [r3, #24]
 80050b2:	f003 0303 	and.w	r3, r3, #3
 80050b6:	2b00      	cmp	r3, #0
 80050b8:	d003      	beq.n	80050c2 <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 80050ba:	6878      	ldr	r0, [r7, #4]
 80050bc:	f000 f9b5 	bl	800542a <HAL_TIM_IC_CaptureCallback>
 80050c0:	e005      	b.n	80050ce <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 80050c2:	6878      	ldr	r0, [r7, #4]
 80050c4:	f000 f9a7 	bl	8005416 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 80050c8:	6878      	ldr	r0, [r7, #4]
 80050ca:	f000 f9b8 	bl	800543e <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80050ce:	687b      	ldr	r3, [r7, #4]
 80050d0:	2200      	movs	r2, #0
 80050d2:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 80050d4:	687b      	ldr	r3, [r7, #4]
 80050d6:	681b      	ldr	r3, [r3, #0]
 80050d8:	691b      	ldr	r3, [r3, #16]
 80050da:	f003 0304 	and.w	r3, r3, #4
 80050de:	2b04      	cmp	r3, #4
 80050e0:	d122      	bne.n	8005128 <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 80050e2:	687b      	ldr	r3, [r7, #4]
 80050e4:	681b      	ldr	r3, [r3, #0]
 80050e6:	68db      	ldr	r3, [r3, #12]
 80050e8:	f003 0304 	and.w	r3, r3, #4
 80050ec:	2b04      	cmp	r3, #4
 80050ee:	d11b      	bne.n	8005128 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 80050f0:	687b      	ldr	r3, [r7, #4]
 80050f2:	681b      	ldr	r3, [r3, #0]
 80050f4:	f06f 0204 	mvn.w	r2, #4
 80050f8:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 80050fa:	687b      	ldr	r3, [r7, #4]
 80050fc:	2202      	movs	r2, #2
 80050fe:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8005100:	687b      	ldr	r3, [r7, #4]
 8005102:	681b      	ldr	r3, [r3, #0]
 8005104:	699b      	ldr	r3, [r3, #24]
 8005106:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800510a:	2b00      	cmp	r3, #0
 800510c:	d003      	beq.n	8005116 <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800510e:	6878      	ldr	r0, [r7, #4]
 8005110:	f000 f98b 	bl	800542a <HAL_TIM_IC_CaptureCallback>
 8005114:	e005      	b.n	8005122 <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8005116:	6878      	ldr	r0, [r7, #4]
 8005118:	f000 f97d 	bl	8005416 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800511c:	6878      	ldr	r0, [r7, #4]
 800511e:	f000 f98e 	bl	800543e <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8005122:	687b      	ldr	r3, [r7, #4]
 8005124:	2200      	movs	r2, #0
 8005126:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 8005128:	687b      	ldr	r3, [r7, #4]
 800512a:	681b      	ldr	r3, [r3, #0]
 800512c:	691b      	ldr	r3, [r3, #16]
 800512e:	f003 0308 	and.w	r3, r3, #8
 8005132:	2b08      	cmp	r3, #8
 8005134:	d122      	bne.n	800517c <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 8005136:	687b      	ldr	r3, [r7, #4]
 8005138:	681b      	ldr	r3, [r3, #0]
 800513a:	68db      	ldr	r3, [r3, #12]
 800513c:	f003 0308 	and.w	r3, r3, #8
 8005140:	2b08      	cmp	r3, #8
 8005142:	d11b      	bne.n	800517c <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 8005144:	687b      	ldr	r3, [r7, #4]
 8005146:	681b      	ldr	r3, [r3, #0]
 8005148:	f06f 0208 	mvn.w	r2, #8
 800514c:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 800514e:	687b      	ldr	r3, [r7, #4]
 8005150:	2204      	movs	r2, #4
 8005152:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8005154:	687b      	ldr	r3, [r7, #4]
 8005156:	681b      	ldr	r3, [r3, #0]
 8005158:	69db      	ldr	r3, [r3, #28]
 800515a:	f003 0303 	and.w	r3, r3, #3
 800515e:	2b00      	cmp	r3, #0
 8005160:	d003      	beq.n	800516a <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8005162:	6878      	ldr	r0, [r7, #4]
 8005164:	f000 f961 	bl	800542a <HAL_TIM_IC_CaptureCallback>
 8005168:	e005      	b.n	8005176 <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800516a:	6878      	ldr	r0, [r7, #4]
 800516c:	f000 f953 	bl	8005416 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8005170:	6878      	ldr	r0, [r7, #4]
 8005172:	f000 f964 	bl	800543e <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8005176:	687b      	ldr	r3, [r7, #4]
 8005178:	2200      	movs	r2, #0
 800517a:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 800517c:	687b      	ldr	r3, [r7, #4]
 800517e:	681b      	ldr	r3, [r3, #0]
 8005180:	691b      	ldr	r3, [r3, #16]
 8005182:	f003 0310 	and.w	r3, r3, #16
 8005186:	2b10      	cmp	r3, #16
 8005188:	d122      	bne.n	80051d0 <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 800518a:	687b      	ldr	r3, [r7, #4]
 800518c:	681b      	ldr	r3, [r3, #0]
 800518e:	68db      	ldr	r3, [r3, #12]
 8005190:	f003 0310 	and.w	r3, r3, #16
 8005194:	2b10      	cmp	r3, #16
 8005196:	d11b      	bne.n	80051d0 <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 8005198:	687b      	ldr	r3, [r7, #4]
 800519a:	681b      	ldr	r3, [r3, #0]
 800519c:	f06f 0210 	mvn.w	r2, #16
 80051a0:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 80051a2:	687b      	ldr	r3, [r7, #4]
 80051a4:	2208      	movs	r2, #8
 80051a6:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 80051a8:	687b      	ldr	r3, [r7, #4]
 80051aa:	681b      	ldr	r3, [r3, #0]
 80051ac:	69db      	ldr	r3, [r3, #28]
 80051ae:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80051b2:	2b00      	cmp	r3, #0
 80051b4:	d003      	beq.n	80051be <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80051b6:	6878      	ldr	r0, [r7, #4]
 80051b8:	f000 f937 	bl	800542a <HAL_TIM_IC_CaptureCallback>
 80051bc:	e005      	b.n	80051ca <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80051be:	6878      	ldr	r0, [r7, #4]
 80051c0:	f000 f929 	bl	8005416 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80051c4:	6878      	ldr	r0, [r7, #4]
 80051c6:	f000 f93a 	bl	800543e <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80051ca:	687b      	ldr	r3, [r7, #4]
 80051cc:	2200      	movs	r2, #0
 80051ce:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 80051d0:	687b      	ldr	r3, [r7, #4]
 80051d2:	681b      	ldr	r3, [r3, #0]
 80051d4:	691b      	ldr	r3, [r3, #16]
 80051d6:	f003 0301 	and.w	r3, r3, #1
 80051da:	2b01      	cmp	r3, #1
 80051dc:	d10e      	bne.n	80051fc <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 80051de:	687b      	ldr	r3, [r7, #4]
 80051e0:	681b      	ldr	r3, [r3, #0]
 80051e2:	68db      	ldr	r3, [r3, #12]
 80051e4:	f003 0301 	and.w	r3, r3, #1
 80051e8:	2b01      	cmp	r3, #1
 80051ea:	d107      	bne.n	80051fc <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 80051ec:	687b      	ldr	r3, [r7, #4]
 80051ee:	681b      	ldr	r3, [r3, #0]
 80051f0:	f06f 0201 	mvn.w	r2, #1
 80051f4:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 80051f6:	6878      	ldr	r0, [r7, #4]
 80051f8:	f7fb fda8 	bl	8000d4c <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 80051fc:	687b      	ldr	r3, [r7, #4]
 80051fe:	681b      	ldr	r3, [r3, #0]
 8005200:	691b      	ldr	r3, [r3, #16]
 8005202:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8005206:	2b80      	cmp	r3, #128	; 0x80
 8005208:	d10e      	bne.n	8005228 <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 800520a:	687b      	ldr	r3, [r7, #4]
 800520c:	681b      	ldr	r3, [r3, #0]
 800520e:	68db      	ldr	r3, [r3, #12]
 8005210:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8005214:	2b80      	cmp	r3, #128	; 0x80
 8005216:	d107      	bne.n	8005228 <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 8005218:	687b      	ldr	r3, [r7, #4]
 800521a:	681b      	ldr	r3, [r3, #0]
 800521c:	f06f 0280 	mvn.w	r2, #128	; 0x80
 8005220:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 8005222:	6878      	ldr	r0, [r7, #4]
 8005224:	f000 fae0 	bl	80057e8 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 8005228:	687b      	ldr	r3, [r7, #4]
 800522a:	681b      	ldr	r3, [r3, #0]
 800522c:	691b      	ldr	r3, [r3, #16]
 800522e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005232:	2b40      	cmp	r3, #64	; 0x40
 8005234:	d10e      	bne.n	8005254 <HAL_TIM_IRQHandler+0x1dc>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 8005236:	687b      	ldr	r3, [r7, #4]
 8005238:	681b      	ldr	r3, [r3, #0]
 800523a:	68db      	ldr	r3, [r3, #12]
 800523c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005240:	2b40      	cmp	r3, #64	; 0x40
 8005242:	d107      	bne.n	8005254 <HAL_TIM_IRQHandler+0x1dc>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 8005244:	687b      	ldr	r3, [r7, #4]
 8005246:	681b      	ldr	r3, [r3, #0]
 8005248:	f06f 0240 	mvn.w	r2, #64	; 0x40
 800524c:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 800524e:	6878      	ldr	r0, [r7, #4]
 8005250:	f000 f8ff 	bl	8005452 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 8005254:	687b      	ldr	r3, [r7, #4]
 8005256:	681b      	ldr	r3, [r3, #0]
 8005258:	691b      	ldr	r3, [r3, #16]
 800525a:	f003 0320 	and.w	r3, r3, #32
 800525e:	2b20      	cmp	r3, #32
 8005260:	d10e      	bne.n	8005280 <HAL_TIM_IRQHandler+0x208>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 8005262:	687b      	ldr	r3, [r7, #4]
 8005264:	681b      	ldr	r3, [r3, #0]
 8005266:	68db      	ldr	r3, [r3, #12]
 8005268:	f003 0320 	and.w	r3, r3, #32
 800526c:	2b20      	cmp	r3, #32
 800526e:	d107      	bne.n	8005280 <HAL_TIM_IRQHandler+0x208>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 8005270:	687b      	ldr	r3, [r7, #4]
 8005272:	681b      	ldr	r3, [r3, #0]
 8005274:	f06f 0220 	mvn.w	r2, #32
 8005278:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 800527a:	6878      	ldr	r0, [r7, #4]
 800527c:	f000 faaa 	bl	80057d4 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 8005280:	bf00      	nop
 8005282:	3708      	adds	r7, #8
 8005284:	46bd      	mov	sp, r7
 8005286:	bd80      	pop	{r7, pc}

08005288 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 8005288:	b580      	push	{r7, lr}
 800528a:	b084      	sub	sp, #16
 800528c:	af00      	add	r7, sp, #0
 800528e:	6078      	str	r0, [r7, #4]
 8005290:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8005292:	2300      	movs	r3, #0
 8005294:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 8005296:	687b      	ldr	r3, [r7, #4]
 8005298:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800529c:	2b01      	cmp	r3, #1
 800529e:	d101      	bne.n	80052a4 <HAL_TIM_ConfigClockSource+0x1c>
 80052a0:	2302      	movs	r3, #2
 80052a2:	e0b4      	b.n	800540e <HAL_TIM_ConfigClockSource+0x186>
 80052a4:	687b      	ldr	r3, [r7, #4]
 80052a6:	2201      	movs	r2, #1
 80052a8:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 80052ac:	687b      	ldr	r3, [r7, #4]
 80052ae:	2202      	movs	r2, #2
 80052b0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 80052b4:	687b      	ldr	r3, [r7, #4]
 80052b6:	681b      	ldr	r3, [r3, #0]
 80052b8:	689b      	ldr	r3, [r3, #8]
 80052ba:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 80052bc:	68bb      	ldr	r3, [r7, #8]
 80052be:	f023 0377 	bic.w	r3, r3, #119	; 0x77
 80052c2:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 80052c4:	68bb      	ldr	r3, [r7, #8]
 80052c6:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 80052ca:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 80052cc:	687b      	ldr	r3, [r7, #4]
 80052ce:	681b      	ldr	r3, [r3, #0]
 80052d0:	68ba      	ldr	r2, [r7, #8]
 80052d2:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 80052d4:	683b      	ldr	r3, [r7, #0]
 80052d6:	681b      	ldr	r3, [r3, #0]
 80052d8:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80052dc:	d03e      	beq.n	800535c <HAL_TIM_ConfigClockSource+0xd4>
 80052de:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80052e2:	f200 8087 	bhi.w	80053f4 <HAL_TIM_ConfigClockSource+0x16c>
 80052e6:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80052ea:	f000 8086 	beq.w	80053fa <HAL_TIM_ConfigClockSource+0x172>
 80052ee:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80052f2:	d87f      	bhi.n	80053f4 <HAL_TIM_ConfigClockSource+0x16c>
 80052f4:	2b70      	cmp	r3, #112	; 0x70
 80052f6:	d01a      	beq.n	800532e <HAL_TIM_ConfigClockSource+0xa6>
 80052f8:	2b70      	cmp	r3, #112	; 0x70
 80052fa:	d87b      	bhi.n	80053f4 <HAL_TIM_ConfigClockSource+0x16c>
 80052fc:	2b60      	cmp	r3, #96	; 0x60
 80052fe:	d050      	beq.n	80053a2 <HAL_TIM_ConfigClockSource+0x11a>
 8005300:	2b60      	cmp	r3, #96	; 0x60
 8005302:	d877      	bhi.n	80053f4 <HAL_TIM_ConfigClockSource+0x16c>
 8005304:	2b50      	cmp	r3, #80	; 0x50
 8005306:	d03c      	beq.n	8005382 <HAL_TIM_ConfigClockSource+0xfa>
 8005308:	2b50      	cmp	r3, #80	; 0x50
 800530a:	d873      	bhi.n	80053f4 <HAL_TIM_ConfigClockSource+0x16c>
 800530c:	2b40      	cmp	r3, #64	; 0x40
 800530e:	d058      	beq.n	80053c2 <HAL_TIM_ConfigClockSource+0x13a>
 8005310:	2b40      	cmp	r3, #64	; 0x40
 8005312:	d86f      	bhi.n	80053f4 <HAL_TIM_ConfigClockSource+0x16c>
 8005314:	2b30      	cmp	r3, #48	; 0x30
 8005316:	d064      	beq.n	80053e2 <HAL_TIM_ConfigClockSource+0x15a>
 8005318:	2b30      	cmp	r3, #48	; 0x30
 800531a:	d86b      	bhi.n	80053f4 <HAL_TIM_ConfigClockSource+0x16c>
 800531c:	2b20      	cmp	r3, #32
 800531e:	d060      	beq.n	80053e2 <HAL_TIM_ConfigClockSource+0x15a>
 8005320:	2b20      	cmp	r3, #32
 8005322:	d867      	bhi.n	80053f4 <HAL_TIM_ConfigClockSource+0x16c>
 8005324:	2b00      	cmp	r3, #0
 8005326:	d05c      	beq.n	80053e2 <HAL_TIM_ConfigClockSource+0x15a>
 8005328:	2b10      	cmp	r3, #16
 800532a:	d05a      	beq.n	80053e2 <HAL_TIM_ConfigClockSource+0x15a>
 800532c:	e062      	b.n	80053f4 <HAL_TIM_ConfigClockSource+0x16c>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 800532e:	687b      	ldr	r3, [r7, #4]
 8005330:	6818      	ldr	r0, [r3, #0]
 8005332:	683b      	ldr	r3, [r7, #0]
 8005334:	6899      	ldr	r1, [r3, #8]
 8005336:	683b      	ldr	r3, [r7, #0]
 8005338:	685a      	ldr	r2, [r3, #4]
 800533a:	683b      	ldr	r3, [r7, #0]
 800533c:	68db      	ldr	r3, [r3, #12]
 800533e:	f000 f9ad 	bl	800569c <TIM_ETR_SetConfig>
                        sClockSourceConfig->ClockPrescaler,
                        sClockSourceConfig->ClockPolarity,
                        sClockSourceConfig->ClockFilter);

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 8005342:	687b      	ldr	r3, [r7, #4]
 8005344:	681b      	ldr	r3, [r3, #0]
 8005346:	689b      	ldr	r3, [r3, #8]
 8005348:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 800534a:	68bb      	ldr	r3, [r7, #8]
 800534c:	f043 0377 	orr.w	r3, r3, #119	; 0x77
 8005350:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 8005352:	687b      	ldr	r3, [r7, #4]
 8005354:	681b      	ldr	r3, [r3, #0]
 8005356:	68ba      	ldr	r2, [r7, #8]
 8005358:	609a      	str	r2, [r3, #8]
      break;
 800535a:	e04f      	b.n	80053fc <HAL_TIM_ConfigClockSource+0x174>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 800535c:	687b      	ldr	r3, [r7, #4]
 800535e:	6818      	ldr	r0, [r3, #0]
 8005360:	683b      	ldr	r3, [r7, #0]
 8005362:	6899      	ldr	r1, [r3, #8]
 8005364:	683b      	ldr	r3, [r7, #0]
 8005366:	685a      	ldr	r2, [r3, #4]
 8005368:	683b      	ldr	r3, [r7, #0]
 800536a:	68db      	ldr	r3, [r3, #12]
 800536c:	f000 f996 	bl	800569c <TIM_ETR_SetConfig>
                        sClockSourceConfig->ClockPrescaler,
                        sClockSourceConfig->ClockPolarity,
                        sClockSourceConfig->ClockFilter);
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 8005370:	687b      	ldr	r3, [r7, #4]
 8005372:	681b      	ldr	r3, [r3, #0]
 8005374:	689a      	ldr	r2, [r3, #8]
 8005376:	687b      	ldr	r3, [r7, #4]
 8005378:	681b      	ldr	r3, [r3, #0]
 800537a:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 800537e:	609a      	str	r2, [r3, #8]
      break;
 8005380:	e03c      	b.n	80053fc <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8005382:	687b      	ldr	r3, [r7, #4]
 8005384:	6818      	ldr	r0, [r3, #0]
 8005386:	683b      	ldr	r3, [r7, #0]
 8005388:	6859      	ldr	r1, [r3, #4]
 800538a:	683b      	ldr	r3, [r7, #0]
 800538c:	68db      	ldr	r3, [r3, #12]
 800538e:	461a      	mov	r2, r3
 8005390:	f000 f90a 	bl	80055a8 <TIM_TI1_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 8005394:	687b      	ldr	r3, [r7, #4]
 8005396:	681b      	ldr	r3, [r3, #0]
 8005398:	2150      	movs	r1, #80	; 0x50
 800539a:	4618      	mov	r0, r3
 800539c:	f000 f963 	bl	8005666 <TIM_ITRx_SetConfig>
      break;
 80053a0:	e02c      	b.n	80053fc <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 80053a2:	687b      	ldr	r3, [r7, #4]
 80053a4:	6818      	ldr	r0, [r3, #0]
 80053a6:	683b      	ldr	r3, [r7, #0]
 80053a8:	6859      	ldr	r1, [r3, #4]
 80053aa:	683b      	ldr	r3, [r7, #0]
 80053ac:	68db      	ldr	r3, [r3, #12]
 80053ae:	461a      	mov	r2, r3
 80053b0:	f000 f929 	bl	8005606 <TIM_TI2_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 80053b4:	687b      	ldr	r3, [r7, #4]
 80053b6:	681b      	ldr	r3, [r3, #0]
 80053b8:	2160      	movs	r1, #96	; 0x60
 80053ba:	4618      	mov	r0, r3
 80053bc:	f000 f953 	bl	8005666 <TIM_ITRx_SetConfig>
      break;
 80053c0:	e01c      	b.n	80053fc <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 80053c2:	687b      	ldr	r3, [r7, #4]
 80053c4:	6818      	ldr	r0, [r3, #0]
 80053c6:	683b      	ldr	r3, [r7, #0]
 80053c8:	6859      	ldr	r1, [r3, #4]
 80053ca:	683b      	ldr	r3, [r7, #0]
 80053cc:	68db      	ldr	r3, [r3, #12]
 80053ce:	461a      	mov	r2, r3
 80053d0:	f000 f8ea 	bl	80055a8 <TIM_TI1_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 80053d4:	687b      	ldr	r3, [r7, #4]
 80053d6:	681b      	ldr	r3, [r3, #0]
 80053d8:	2140      	movs	r1, #64	; 0x40
 80053da:	4618      	mov	r0, r3
 80053dc:	f000 f943 	bl	8005666 <TIM_ITRx_SetConfig>
      break;
 80053e0:	e00c      	b.n	80053fc <HAL_TIM_ConfigClockSource+0x174>
    case TIM_CLOCKSOURCE_ITR3:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_ITRX_INSTANCE(htim->Instance));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 80053e2:	687b      	ldr	r3, [r7, #4]
 80053e4:	681a      	ldr	r2, [r3, #0]
 80053e6:	683b      	ldr	r3, [r7, #0]
 80053e8:	681b      	ldr	r3, [r3, #0]
 80053ea:	4619      	mov	r1, r3
 80053ec:	4610      	mov	r0, r2
 80053ee:	f000 f93a 	bl	8005666 <TIM_ITRx_SetConfig>
      break;
 80053f2:	e003      	b.n	80053fc <HAL_TIM_ConfigClockSource+0x174>
    }

    default:
      status = HAL_ERROR;
 80053f4:	2301      	movs	r3, #1
 80053f6:	73fb      	strb	r3, [r7, #15]
      break;
 80053f8:	e000      	b.n	80053fc <HAL_TIM_ConfigClockSource+0x174>
      break;
 80053fa:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 80053fc:	687b      	ldr	r3, [r7, #4]
 80053fe:	2201      	movs	r2, #1
 8005400:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8005404:	687b      	ldr	r3, [r7, #4]
 8005406:	2200      	movs	r2, #0
 8005408:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 800540c:	7bfb      	ldrb	r3, [r7, #15]
}
 800540e:	4618      	mov	r0, r3
 8005410:	3710      	adds	r7, #16
 8005412:	46bd      	mov	sp, r7
 8005414:	bd80      	pop	{r7, pc}

08005416 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 8005416:	b480      	push	{r7}
 8005418:	b083      	sub	sp, #12
 800541a:	af00      	add	r7, sp, #0
 800541c:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 800541e:	bf00      	nop
 8005420:	370c      	adds	r7, #12
 8005422:	46bd      	mov	sp, r7
 8005424:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005428:	4770      	bx	lr

0800542a <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 800542a:	b480      	push	{r7}
 800542c:	b083      	sub	sp, #12
 800542e:	af00      	add	r7, sp, #0
 8005430:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 8005432:	bf00      	nop
 8005434:	370c      	adds	r7, #12
 8005436:	46bd      	mov	sp, r7
 8005438:	f85d 7b04 	ldr.w	r7, [sp], #4
 800543c:	4770      	bx	lr

0800543e <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 800543e:	b480      	push	{r7}
 8005440:	b083      	sub	sp, #12
 8005442:	af00      	add	r7, sp, #0
 8005444:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 8005446:	bf00      	nop
 8005448:	370c      	adds	r7, #12
 800544a:	46bd      	mov	sp, r7
 800544c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005450:	4770      	bx	lr

08005452 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 8005452:	b480      	push	{r7}
 8005454:	b083      	sub	sp, #12
 8005456:	af00      	add	r7, sp, #0
 8005458:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 800545a:	bf00      	nop
 800545c:	370c      	adds	r7, #12
 800545e:	46bd      	mov	sp, r7
 8005460:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005464:	4770      	bx	lr
	...

08005468 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 8005468:	b480      	push	{r7}
 800546a:	b085      	sub	sp, #20
 800546c:	af00      	add	r7, sp, #0
 800546e:	6078      	str	r0, [r7, #4]
 8005470:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8005472:	687b      	ldr	r3, [r7, #4]
 8005474:	681b      	ldr	r3, [r3, #0]
 8005476:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8005478:	687b      	ldr	r3, [r7, #4]
 800547a:	4a40      	ldr	r2, [pc, #256]	; (800557c <TIM_Base_SetConfig+0x114>)
 800547c:	4293      	cmp	r3, r2
 800547e:	d013      	beq.n	80054a8 <TIM_Base_SetConfig+0x40>
 8005480:	687b      	ldr	r3, [r7, #4]
 8005482:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8005486:	d00f      	beq.n	80054a8 <TIM_Base_SetConfig+0x40>
 8005488:	687b      	ldr	r3, [r7, #4]
 800548a:	4a3d      	ldr	r2, [pc, #244]	; (8005580 <TIM_Base_SetConfig+0x118>)
 800548c:	4293      	cmp	r3, r2
 800548e:	d00b      	beq.n	80054a8 <TIM_Base_SetConfig+0x40>
 8005490:	687b      	ldr	r3, [r7, #4]
 8005492:	4a3c      	ldr	r2, [pc, #240]	; (8005584 <TIM_Base_SetConfig+0x11c>)
 8005494:	4293      	cmp	r3, r2
 8005496:	d007      	beq.n	80054a8 <TIM_Base_SetConfig+0x40>
 8005498:	687b      	ldr	r3, [r7, #4]
 800549a:	4a3b      	ldr	r2, [pc, #236]	; (8005588 <TIM_Base_SetConfig+0x120>)
 800549c:	4293      	cmp	r3, r2
 800549e:	d003      	beq.n	80054a8 <TIM_Base_SetConfig+0x40>
 80054a0:	687b      	ldr	r3, [r7, #4]
 80054a2:	4a3a      	ldr	r2, [pc, #232]	; (800558c <TIM_Base_SetConfig+0x124>)
 80054a4:	4293      	cmp	r3, r2
 80054a6:	d108      	bne.n	80054ba <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 80054a8:	68fb      	ldr	r3, [r7, #12]
 80054aa:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80054ae:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 80054b0:	683b      	ldr	r3, [r7, #0]
 80054b2:	685b      	ldr	r3, [r3, #4]
 80054b4:	68fa      	ldr	r2, [r7, #12]
 80054b6:	4313      	orrs	r3, r2
 80054b8:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 80054ba:	687b      	ldr	r3, [r7, #4]
 80054bc:	4a2f      	ldr	r2, [pc, #188]	; (800557c <TIM_Base_SetConfig+0x114>)
 80054be:	4293      	cmp	r3, r2
 80054c0:	d02b      	beq.n	800551a <TIM_Base_SetConfig+0xb2>
 80054c2:	687b      	ldr	r3, [r7, #4]
 80054c4:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80054c8:	d027      	beq.n	800551a <TIM_Base_SetConfig+0xb2>
 80054ca:	687b      	ldr	r3, [r7, #4]
 80054cc:	4a2c      	ldr	r2, [pc, #176]	; (8005580 <TIM_Base_SetConfig+0x118>)
 80054ce:	4293      	cmp	r3, r2
 80054d0:	d023      	beq.n	800551a <TIM_Base_SetConfig+0xb2>
 80054d2:	687b      	ldr	r3, [r7, #4]
 80054d4:	4a2b      	ldr	r2, [pc, #172]	; (8005584 <TIM_Base_SetConfig+0x11c>)
 80054d6:	4293      	cmp	r3, r2
 80054d8:	d01f      	beq.n	800551a <TIM_Base_SetConfig+0xb2>
 80054da:	687b      	ldr	r3, [r7, #4]
 80054dc:	4a2a      	ldr	r2, [pc, #168]	; (8005588 <TIM_Base_SetConfig+0x120>)
 80054de:	4293      	cmp	r3, r2
 80054e0:	d01b      	beq.n	800551a <TIM_Base_SetConfig+0xb2>
 80054e2:	687b      	ldr	r3, [r7, #4]
 80054e4:	4a29      	ldr	r2, [pc, #164]	; (800558c <TIM_Base_SetConfig+0x124>)
 80054e6:	4293      	cmp	r3, r2
 80054e8:	d017      	beq.n	800551a <TIM_Base_SetConfig+0xb2>
 80054ea:	687b      	ldr	r3, [r7, #4]
 80054ec:	4a28      	ldr	r2, [pc, #160]	; (8005590 <TIM_Base_SetConfig+0x128>)
 80054ee:	4293      	cmp	r3, r2
 80054f0:	d013      	beq.n	800551a <TIM_Base_SetConfig+0xb2>
 80054f2:	687b      	ldr	r3, [r7, #4]
 80054f4:	4a27      	ldr	r2, [pc, #156]	; (8005594 <TIM_Base_SetConfig+0x12c>)
 80054f6:	4293      	cmp	r3, r2
 80054f8:	d00f      	beq.n	800551a <TIM_Base_SetConfig+0xb2>
 80054fa:	687b      	ldr	r3, [r7, #4]
 80054fc:	4a26      	ldr	r2, [pc, #152]	; (8005598 <TIM_Base_SetConfig+0x130>)
 80054fe:	4293      	cmp	r3, r2
 8005500:	d00b      	beq.n	800551a <TIM_Base_SetConfig+0xb2>
 8005502:	687b      	ldr	r3, [r7, #4]
 8005504:	4a25      	ldr	r2, [pc, #148]	; (800559c <TIM_Base_SetConfig+0x134>)
 8005506:	4293      	cmp	r3, r2
 8005508:	d007      	beq.n	800551a <TIM_Base_SetConfig+0xb2>
 800550a:	687b      	ldr	r3, [r7, #4]
 800550c:	4a24      	ldr	r2, [pc, #144]	; (80055a0 <TIM_Base_SetConfig+0x138>)
 800550e:	4293      	cmp	r3, r2
 8005510:	d003      	beq.n	800551a <TIM_Base_SetConfig+0xb2>
 8005512:	687b      	ldr	r3, [r7, #4]
 8005514:	4a23      	ldr	r2, [pc, #140]	; (80055a4 <TIM_Base_SetConfig+0x13c>)
 8005516:	4293      	cmp	r3, r2
 8005518:	d108      	bne.n	800552c <TIM_Base_SetConfig+0xc4>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 800551a:	68fb      	ldr	r3, [r7, #12]
 800551c:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8005520:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8005522:	683b      	ldr	r3, [r7, #0]
 8005524:	68db      	ldr	r3, [r3, #12]
 8005526:	68fa      	ldr	r2, [r7, #12]
 8005528:	4313      	orrs	r3, r2
 800552a:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 800552c:	68fb      	ldr	r3, [r7, #12]
 800552e:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 8005532:	683b      	ldr	r3, [r7, #0]
 8005534:	695b      	ldr	r3, [r3, #20]
 8005536:	4313      	orrs	r3, r2
 8005538:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 800553a:	687b      	ldr	r3, [r7, #4]
 800553c:	68fa      	ldr	r2, [r7, #12]
 800553e:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8005540:	683b      	ldr	r3, [r7, #0]
 8005542:	689a      	ldr	r2, [r3, #8]
 8005544:	687b      	ldr	r3, [r7, #4]
 8005546:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8005548:	683b      	ldr	r3, [r7, #0]
 800554a:	681a      	ldr	r2, [r3, #0]
 800554c:	687b      	ldr	r3, [r7, #4]
 800554e:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8005550:	687b      	ldr	r3, [r7, #4]
 8005552:	4a0a      	ldr	r2, [pc, #40]	; (800557c <TIM_Base_SetConfig+0x114>)
 8005554:	4293      	cmp	r3, r2
 8005556:	d003      	beq.n	8005560 <TIM_Base_SetConfig+0xf8>
 8005558:	687b      	ldr	r3, [r7, #4]
 800555a:	4a0c      	ldr	r2, [pc, #48]	; (800558c <TIM_Base_SetConfig+0x124>)
 800555c:	4293      	cmp	r3, r2
 800555e:	d103      	bne.n	8005568 <TIM_Base_SetConfig+0x100>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8005560:	683b      	ldr	r3, [r7, #0]
 8005562:	691a      	ldr	r2, [r3, #16]
 8005564:	687b      	ldr	r3, [r7, #4]
 8005566:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8005568:	687b      	ldr	r3, [r7, #4]
 800556a:	2201      	movs	r2, #1
 800556c:	615a      	str	r2, [r3, #20]
}
 800556e:	bf00      	nop
 8005570:	3714      	adds	r7, #20
 8005572:	46bd      	mov	sp, r7
 8005574:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005578:	4770      	bx	lr
 800557a:	bf00      	nop
 800557c:	40010000 	.word	0x40010000
 8005580:	40000400 	.word	0x40000400
 8005584:	40000800 	.word	0x40000800
 8005588:	40000c00 	.word	0x40000c00
 800558c:	40010400 	.word	0x40010400
 8005590:	40014000 	.word	0x40014000
 8005594:	40014400 	.word	0x40014400
 8005598:	40014800 	.word	0x40014800
 800559c:	40001800 	.word	0x40001800
 80055a0:	40001c00 	.word	0x40001c00
 80055a4:	40002000 	.word	0x40002000

080055a8 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 80055a8:	b480      	push	{r7}
 80055aa:	b087      	sub	sp, #28
 80055ac:	af00      	add	r7, sp, #0
 80055ae:	60f8      	str	r0, [r7, #12]
 80055b0:	60b9      	str	r1, [r7, #8]
 80055b2:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 80055b4:	68fb      	ldr	r3, [r7, #12]
 80055b6:	6a1b      	ldr	r3, [r3, #32]
 80055b8:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 80055ba:	68fb      	ldr	r3, [r7, #12]
 80055bc:	6a1b      	ldr	r3, [r3, #32]
 80055be:	f023 0201 	bic.w	r2, r3, #1
 80055c2:	68fb      	ldr	r3, [r7, #12]
 80055c4:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 80055c6:	68fb      	ldr	r3, [r7, #12]
 80055c8:	699b      	ldr	r3, [r3, #24]
 80055ca:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 80055cc:	693b      	ldr	r3, [r7, #16]
 80055ce:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 80055d2:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 80055d4:	687b      	ldr	r3, [r7, #4]
 80055d6:	011b      	lsls	r3, r3, #4
 80055d8:	693a      	ldr	r2, [r7, #16]
 80055da:	4313      	orrs	r3, r2
 80055dc:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 80055de:	697b      	ldr	r3, [r7, #20]
 80055e0:	f023 030a 	bic.w	r3, r3, #10
 80055e4:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 80055e6:	697a      	ldr	r2, [r7, #20]
 80055e8:	68bb      	ldr	r3, [r7, #8]
 80055ea:	4313      	orrs	r3, r2
 80055ec:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 80055ee:	68fb      	ldr	r3, [r7, #12]
 80055f0:	693a      	ldr	r2, [r7, #16]
 80055f2:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 80055f4:	68fb      	ldr	r3, [r7, #12]
 80055f6:	697a      	ldr	r2, [r7, #20]
 80055f8:	621a      	str	r2, [r3, #32]
}
 80055fa:	bf00      	nop
 80055fc:	371c      	adds	r7, #28
 80055fe:	46bd      	mov	sp, r7
 8005600:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005604:	4770      	bx	lr

08005606 <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8005606:	b480      	push	{r7}
 8005608:	b087      	sub	sp, #28
 800560a:	af00      	add	r7, sp, #0
 800560c:	60f8      	str	r0, [r7, #12]
 800560e:	60b9      	str	r1, [r7, #8]
 8005610:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8005612:	68fb      	ldr	r3, [r7, #12]
 8005614:	6a1b      	ldr	r3, [r3, #32]
 8005616:	f023 0210 	bic.w	r2, r3, #16
 800561a:	68fb      	ldr	r3, [r7, #12]
 800561c:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 800561e:	68fb      	ldr	r3, [r7, #12]
 8005620:	699b      	ldr	r3, [r3, #24]
 8005622:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 8005624:	68fb      	ldr	r3, [r7, #12]
 8005626:	6a1b      	ldr	r3, [r3, #32]
 8005628:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 800562a:	697b      	ldr	r3, [r7, #20]
 800562c:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 8005630:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 8005632:	687b      	ldr	r3, [r7, #4]
 8005634:	031b      	lsls	r3, r3, #12
 8005636:	697a      	ldr	r2, [r7, #20]
 8005638:	4313      	orrs	r3, r2
 800563a:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 800563c:	693b      	ldr	r3, [r7, #16]
 800563e:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 8005642:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity << 4U);
 8005644:	68bb      	ldr	r3, [r7, #8]
 8005646:	011b      	lsls	r3, r3, #4
 8005648:	693a      	ldr	r2, [r7, #16]
 800564a:	4313      	orrs	r3, r2
 800564c:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 800564e:	68fb      	ldr	r3, [r7, #12]
 8005650:	697a      	ldr	r2, [r7, #20]
 8005652:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8005654:	68fb      	ldr	r3, [r7, #12]
 8005656:	693a      	ldr	r2, [r7, #16]
 8005658:	621a      	str	r2, [r3, #32]
}
 800565a:	bf00      	nop
 800565c:	371c      	adds	r7, #28
 800565e:	46bd      	mov	sp, r7
 8005660:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005664:	4770      	bx	lr

08005666 <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 8005666:	b480      	push	{r7}
 8005668:	b085      	sub	sp, #20
 800566a:	af00      	add	r7, sp, #0
 800566c:	6078      	str	r0, [r7, #4]
 800566e:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 8005670:	687b      	ldr	r3, [r7, #4]
 8005672:	689b      	ldr	r3, [r3, #8]
 8005674:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 8005676:	68fb      	ldr	r3, [r7, #12]
 8005678:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800567c:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 800567e:	683a      	ldr	r2, [r7, #0]
 8005680:	68fb      	ldr	r3, [r7, #12]
 8005682:	4313      	orrs	r3, r2
 8005684:	f043 0307 	orr.w	r3, r3, #7
 8005688:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 800568a:	687b      	ldr	r3, [r7, #4]
 800568c:	68fa      	ldr	r2, [r7, #12]
 800568e:	609a      	str	r2, [r3, #8]
}
 8005690:	bf00      	nop
 8005692:	3714      	adds	r7, #20
 8005694:	46bd      	mov	sp, r7
 8005696:	f85d 7b04 	ldr.w	r7, [sp], #4
 800569a:	4770      	bx	lr

0800569c <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 800569c:	b480      	push	{r7}
 800569e:	b087      	sub	sp, #28
 80056a0:	af00      	add	r7, sp, #0
 80056a2:	60f8      	str	r0, [r7, #12]
 80056a4:	60b9      	str	r1, [r7, #8]
 80056a6:	607a      	str	r2, [r7, #4]
 80056a8:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 80056aa:	68fb      	ldr	r3, [r7, #12]
 80056ac:	689b      	ldr	r3, [r3, #8]
 80056ae:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 80056b0:	697b      	ldr	r3, [r7, #20]
 80056b2:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 80056b6:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 80056b8:	683b      	ldr	r3, [r7, #0]
 80056ba:	021a      	lsls	r2, r3, #8
 80056bc:	687b      	ldr	r3, [r7, #4]
 80056be:	431a      	orrs	r2, r3
 80056c0:	68bb      	ldr	r3, [r7, #8]
 80056c2:	4313      	orrs	r3, r2
 80056c4:	697a      	ldr	r2, [r7, #20]
 80056c6:	4313      	orrs	r3, r2
 80056c8:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 80056ca:	68fb      	ldr	r3, [r7, #12]
 80056cc:	697a      	ldr	r2, [r7, #20]
 80056ce:	609a      	str	r2, [r3, #8]
}
 80056d0:	bf00      	nop
 80056d2:	371c      	adds	r7, #28
 80056d4:	46bd      	mov	sp, r7
 80056d6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80056da:	4770      	bx	lr

080056dc <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        TIM_MasterConfigTypeDef *sMasterConfig)
{
 80056dc:	b480      	push	{r7}
 80056de:	b085      	sub	sp, #20
 80056e0:	af00      	add	r7, sp, #0
 80056e2:	6078      	str	r0, [r7, #4]
 80056e4:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 80056e6:	687b      	ldr	r3, [r7, #4]
 80056e8:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80056ec:	2b01      	cmp	r3, #1
 80056ee:	d101      	bne.n	80056f4 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 80056f0:	2302      	movs	r3, #2
 80056f2:	e05a      	b.n	80057aa <HAL_TIMEx_MasterConfigSynchronization+0xce>
 80056f4:	687b      	ldr	r3, [r7, #4]
 80056f6:	2201      	movs	r2, #1
 80056f8:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 80056fc:	687b      	ldr	r3, [r7, #4]
 80056fe:	2202      	movs	r2, #2
 8005700:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8005704:	687b      	ldr	r3, [r7, #4]
 8005706:	681b      	ldr	r3, [r3, #0]
 8005708:	685b      	ldr	r3, [r3, #4]
 800570a:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 800570c:	687b      	ldr	r3, [r7, #4]
 800570e:	681b      	ldr	r3, [r3, #0]
 8005710:	689b      	ldr	r3, [r3, #8]
 8005712:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8005714:	68fb      	ldr	r3, [r7, #12]
 8005716:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800571a:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 800571c:	683b      	ldr	r3, [r7, #0]
 800571e:	681b      	ldr	r3, [r3, #0]
 8005720:	68fa      	ldr	r2, [r7, #12]
 8005722:	4313      	orrs	r3, r2
 8005724:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 8005726:	687b      	ldr	r3, [r7, #4]
 8005728:	681b      	ldr	r3, [r3, #0]
 800572a:	68fa      	ldr	r2, [r7, #12]
 800572c:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800572e:	687b      	ldr	r3, [r7, #4]
 8005730:	681b      	ldr	r3, [r3, #0]
 8005732:	4a21      	ldr	r2, [pc, #132]	; (80057b8 <HAL_TIMEx_MasterConfigSynchronization+0xdc>)
 8005734:	4293      	cmp	r3, r2
 8005736:	d022      	beq.n	800577e <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8005738:	687b      	ldr	r3, [r7, #4]
 800573a:	681b      	ldr	r3, [r3, #0]
 800573c:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8005740:	d01d      	beq.n	800577e <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8005742:	687b      	ldr	r3, [r7, #4]
 8005744:	681b      	ldr	r3, [r3, #0]
 8005746:	4a1d      	ldr	r2, [pc, #116]	; (80057bc <HAL_TIMEx_MasterConfigSynchronization+0xe0>)
 8005748:	4293      	cmp	r3, r2
 800574a:	d018      	beq.n	800577e <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 800574c:	687b      	ldr	r3, [r7, #4]
 800574e:	681b      	ldr	r3, [r3, #0]
 8005750:	4a1b      	ldr	r2, [pc, #108]	; (80057c0 <HAL_TIMEx_MasterConfigSynchronization+0xe4>)
 8005752:	4293      	cmp	r3, r2
 8005754:	d013      	beq.n	800577e <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8005756:	687b      	ldr	r3, [r7, #4]
 8005758:	681b      	ldr	r3, [r3, #0]
 800575a:	4a1a      	ldr	r2, [pc, #104]	; (80057c4 <HAL_TIMEx_MasterConfigSynchronization+0xe8>)
 800575c:	4293      	cmp	r3, r2
 800575e:	d00e      	beq.n	800577e <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8005760:	687b      	ldr	r3, [r7, #4]
 8005762:	681b      	ldr	r3, [r3, #0]
 8005764:	4a18      	ldr	r2, [pc, #96]	; (80057c8 <HAL_TIMEx_MasterConfigSynchronization+0xec>)
 8005766:	4293      	cmp	r3, r2
 8005768:	d009      	beq.n	800577e <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 800576a:	687b      	ldr	r3, [r7, #4]
 800576c:	681b      	ldr	r3, [r3, #0]
 800576e:	4a17      	ldr	r2, [pc, #92]	; (80057cc <HAL_TIMEx_MasterConfigSynchronization+0xf0>)
 8005770:	4293      	cmp	r3, r2
 8005772:	d004      	beq.n	800577e <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8005774:	687b      	ldr	r3, [r7, #4]
 8005776:	681b      	ldr	r3, [r3, #0]
 8005778:	4a15      	ldr	r2, [pc, #84]	; (80057d0 <HAL_TIMEx_MasterConfigSynchronization+0xf4>)
 800577a:	4293      	cmp	r3, r2
 800577c:	d10c      	bne.n	8005798 <HAL_TIMEx_MasterConfigSynchronization+0xbc>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 800577e:	68bb      	ldr	r3, [r7, #8]
 8005780:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8005784:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8005786:	683b      	ldr	r3, [r7, #0]
 8005788:	685b      	ldr	r3, [r3, #4]
 800578a:	68ba      	ldr	r2, [r7, #8]
 800578c:	4313      	orrs	r3, r2
 800578e:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8005790:	687b      	ldr	r3, [r7, #4]
 8005792:	681b      	ldr	r3, [r3, #0]
 8005794:	68ba      	ldr	r2, [r7, #8]
 8005796:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8005798:	687b      	ldr	r3, [r7, #4]
 800579a:	2201      	movs	r2, #1
 800579c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 80057a0:	687b      	ldr	r3, [r7, #4]
 80057a2:	2200      	movs	r2, #0
 80057a4:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 80057a8:	2300      	movs	r3, #0
}
 80057aa:	4618      	mov	r0, r3
 80057ac:	3714      	adds	r7, #20
 80057ae:	46bd      	mov	sp, r7
 80057b0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80057b4:	4770      	bx	lr
 80057b6:	bf00      	nop
 80057b8:	40010000 	.word	0x40010000
 80057bc:	40000400 	.word	0x40000400
 80057c0:	40000800 	.word	0x40000800
 80057c4:	40000c00 	.word	0x40000c00
 80057c8:	40010400 	.word	0x40010400
 80057cc:	40014000 	.word	0x40014000
 80057d0:	40001800 	.word	0x40001800

080057d4 <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 80057d4:	b480      	push	{r7}
 80057d6:	b083      	sub	sp, #12
 80057d8:	af00      	add	r7, sp, #0
 80057da:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 80057dc:	bf00      	nop
 80057de:	370c      	adds	r7, #12
 80057e0:	46bd      	mov	sp, r7
 80057e2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80057e6:	4770      	bx	lr

080057e8 <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 80057e8:	b480      	push	{r7}
 80057ea:	b083      	sub	sp, #12
 80057ec:	af00      	add	r7, sp, #0
 80057ee:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 80057f0:	bf00      	nop
 80057f2:	370c      	adds	r7, #12
 80057f4:	46bd      	mov	sp, r7
 80057f6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80057fa:	4770      	bx	lr

080057fc <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 80057fc:	b580      	push	{r7, lr}
 80057fe:	b082      	sub	sp, #8
 8005800:	af00      	add	r7, sp, #0
 8005802:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8005804:	687b      	ldr	r3, [r7, #4]
 8005806:	2b00      	cmp	r3, #0
 8005808:	d101      	bne.n	800580e <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 800580a:	2301      	movs	r3, #1
 800580c:	e03f      	b.n	800588e <HAL_UART_Init+0x92>
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));

  if (huart->gState == HAL_UART_STATE_RESET)
 800580e:	687b      	ldr	r3, [r7, #4]
 8005810:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8005814:	b2db      	uxtb	r3, r3
 8005816:	2b00      	cmp	r3, #0
 8005818:	d106      	bne.n	8005828 <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 800581a:	687b      	ldr	r3, [r7, #4]
 800581c:	2200      	movs	r2, #0
 800581e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8005822:	6878      	ldr	r0, [r7, #4]
 8005824:	f7fb fd24 	bl	8001270 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8005828:	687b      	ldr	r3, [r7, #4]
 800582a:	2224      	movs	r2, #36	; 0x24
 800582c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 8005830:	687b      	ldr	r3, [r7, #4]
 8005832:	681b      	ldr	r3, [r3, #0]
 8005834:	68da      	ldr	r2, [r3, #12]
 8005836:	687b      	ldr	r3, [r7, #4]
 8005838:	681b      	ldr	r3, [r3, #0]
 800583a:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 800583e:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 8005840:	6878      	ldr	r0, [r7, #4]
 8005842:	f000 f929 	bl	8005a98 <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8005846:	687b      	ldr	r3, [r7, #4]
 8005848:	681b      	ldr	r3, [r3, #0]
 800584a:	691a      	ldr	r2, [r3, #16]
 800584c:	687b      	ldr	r3, [r7, #4]
 800584e:	681b      	ldr	r3, [r3, #0]
 8005850:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 8005854:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8005856:	687b      	ldr	r3, [r7, #4]
 8005858:	681b      	ldr	r3, [r3, #0]
 800585a:	695a      	ldr	r2, [r3, #20]
 800585c:	687b      	ldr	r3, [r7, #4]
 800585e:	681b      	ldr	r3, [r3, #0]
 8005860:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 8005864:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 8005866:	687b      	ldr	r3, [r7, #4]
 8005868:	681b      	ldr	r3, [r3, #0]
 800586a:	68da      	ldr	r2, [r3, #12]
 800586c:	687b      	ldr	r3, [r7, #4]
 800586e:	681b      	ldr	r3, [r3, #0]
 8005870:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8005874:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8005876:	687b      	ldr	r3, [r7, #4]
 8005878:	2200      	movs	r2, #0
 800587a:	641a      	str	r2, [r3, #64]	; 0x40
  huart->gState = HAL_UART_STATE_READY;
 800587c:	687b      	ldr	r3, [r7, #4]
 800587e:	2220      	movs	r2, #32
 8005880:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  huart->RxState = HAL_UART_STATE_READY;
 8005884:	687b      	ldr	r3, [r7, #4]
 8005886:	2220      	movs	r2, #32
 8005888:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 800588c:	2300      	movs	r3, #0
}
 800588e:	4618      	mov	r0, r3
 8005890:	3708      	adds	r7, #8
 8005892:	46bd      	mov	sp, r7
 8005894:	bd80      	pop	{r7, pc}

08005896 <HAL_UART_Transmit>:
  * @param  Size  Amount of data elements (u8 or u16) to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8005896:	b580      	push	{r7, lr}
 8005898:	b08a      	sub	sp, #40	; 0x28
 800589a:	af02      	add	r7, sp, #8
 800589c:	60f8      	str	r0, [r7, #12]
 800589e:	60b9      	str	r1, [r7, #8]
 80058a0:	603b      	str	r3, [r7, #0]
 80058a2:	4613      	mov	r3, r2
 80058a4:	80fb      	strh	r3, [r7, #6]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart = 0U;
 80058a6:	2300      	movs	r3, #0
 80058a8:	617b      	str	r3, [r7, #20]

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 80058aa:	68fb      	ldr	r3, [r7, #12]
 80058ac:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80058b0:	b2db      	uxtb	r3, r3
 80058b2:	2b20      	cmp	r3, #32
 80058b4:	d17c      	bne.n	80059b0 <HAL_UART_Transmit+0x11a>
  {
    if ((pData == NULL) || (Size == 0U))
 80058b6:	68bb      	ldr	r3, [r7, #8]
 80058b8:	2b00      	cmp	r3, #0
 80058ba:	d002      	beq.n	80058c2 <HAL_UART_Transmit+0x2c>
 80058bc:	88fb      	ldrh	r3, [r7, #6]
 80058be:	2b00      	cmp	r3, #0
 80058c0:	d101      	bne.n	80058c6 <HAL_UART_Transmit+0x30>
    {
      return  HAL_ERROR;
 80058c2:	2301      	movs	r3, #1
 80058c4:	e075      	b.n	80059b2 <HAL_UART_Transmit+0x11c>
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 80058c6:	68fb      	ldr	r3, [r7, #12]
 80058c8:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80058cc:	2b01      	cmp	r3, #1
 80058ce:	d101      	bne.n	80058d4 <HAL_UART_Transmit+0x3e>
 80058d0:	2302      	movs	r3, #2
 80058d2:	e06e      	b.n	80059b2 <HAL_UART_Transmit+0x11c>
 80058d4:	68fb      	ldr	r3, [r7, #12]
 80058d6:	2201      	movs	r2, #1
 80058d8:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 80058dc:	68fb      	ldr	r3, [r7, #12]
 80058de:	2200      	movs	r2, #0
 80058e0:	641a      	str	r2, [r3, #64]	; 0x40
    huart->gState = HAL_UART_STATE_BUSY_TX;
 80058e2:	68fb      	ldr	r3, [r7, #12]
 80058e4:	2221      	movs	r2, #33	; 0x21
 80058e6:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 80058ea:	f7fc f8b1 	bl	8001a50 <HAL_GetTick>
 80058ee:	6178      	str	r0, [r7, #20]

    huart->TxXferSize = Size;
 80058f0:	68fb      	ldr	r3, [r7, #12]
 80058f2:	88fa      	ldrh	r2, [r7, #6]
 80058f4:	849a      	strh	r2, [r3, #36]	; 0x24
    huart->TxXferCount = Size;
 80058f6:	68fb      	ldr	r3, [r7, #12]
 80058f8:	88fa      	ldrh	r2, [r7, #6]
 80058fa:	84da      	strh	r2, [r3, #38]	; 0x26

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 80058fc:	68fb      	ldr	r3, [r7, #12]
 80058fe:	689b      	ldr	r3, [r3, #8]
 8005900:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8005904:	d108      	bne.n	8005918 <HAL_UART_Transmit+0x82>
 8005906:	68fb      	ldr	r3, [r7, #12]
 8005908:	691b      	ldr	r3, [r3, #16]
 800590a:	2b00      	cmp	r3, #0
 800590c:	d104      	bne.n	8005918 <HAL_UART_Transmit+0x82>
    {
      pdata8bits  = NULL;
 800590e:	2300      	movs	r3, #0
 8005910:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 8005912:	68bb      	ldr	r3, [r7, #8]
 8005914:	61bb      	str	r3, [r7, #24]
 8005916:	e003      	b.n	8005920 <HAL_UART_Transmit+0x8a>
    }
    else
    {
      pdata8bits  = pData;
 8005918:	68bb      	ldr	r3, [r7, #8]
 800591a:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 800591c:	2300      	movs	r3, #0
 800591e:	61bb      	str	r3, [r7, #24]
    }

    /* Process Unlocked */
    __HAL_UNLOCK(huart);
 8005920:	68fb      	ldr	r3, [r7, #12]
 8005922:	2200      	movs	r2, #0
 8005924:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    while (huart->TxXferCount > 0U)
 8005928:	e02a      	b.n	8005980 <HAL_UART_Transmit+0xea>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 800592a:	683b      	ldr	r3, [r7, #0]
 800592c:	9300      	str	r3, [sp, #0]
 800592e:	697b      	ldr	r3, [r7, #20]
 8005930:	2200      	movs	r2, #0
 8005932:	2180      	movs	r1, #128	; 0x80
 8005934:	68f8      	ldr	r0, [r7, #12]
 8005936:	f000 f840 	bl	80059ba <UART_WaitOnFlagUntilTimeout>
 800593a:	4603      	mov	r3, r0
 800593c:	2b00      	cmp	r3, #0
 800593e:	d001      	beq.n	8005944 <HAL_UART_Transmit+0xae>
      {
        return HAL_TIMEOUT;
 8005940:	2303      	movs	r3, #3
 8005942:	e036      	b.n	80059b2 <HAL_UART_Transmit+0x11c>
      }
      if (pdata8bits == NULL)
 8005944:	69fb      	ldr	r3, [r7, #28]
 8005946:	2b00      	cmp	r3, #0
 8005948:	d10b      	bne.n	8005962 <HAL_UART_Transmit+0xcc>
      {
        huart->Instance->DR = (uint16_t)(*pdata16bits & 0x01FFU);
 800594a:	69bb      	ldr	r3, [r7, #24]
 800594c:	881b      	ldrh	r3, [r3, #0]
 800594e:	461a      	mov	r2, r3
 8005950:	68fb      	ldr	r3, [r7, #12]
 8005952:	681b      	ldr	r3, [r3, #0]
 8005954:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8005958:	605a      	str	r2, [r3, #4]
        pdata16bits++;
 800595a:	69bb      	ldr	r3, [r7, #24]
 800595c:	3302      	adds	r3, #2
 800595e:	61bb      	str	r3, [r7, #24]
 8005960:	e007      	b.n	8005972 <HAL_UART_Transmit+0xdc>
      }
      else
      {
        huart->Instance->DR = (uint8_t)(*pdata8bits & 0xFFU);
 8005962:	69fb      	ldr	r3, [r7, #28]
 8005964:	781a      	ldrb	r2, [r3, #0]
 8005966:	68fb      	ldr	r3, [r7, #12]
 8005968:	681b      	ldr	r3, [r3, #0]
 800596a:	605a      	str	r2, [r3, #4]
        pdata8bits++;
 800596c:	69fb      	ldr	r3, [r7, #28]
 800596e:	3301      	adds	r3, #1
 8005970:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 8005972:	68fb      	ldr	r3, [r7, #12]
 8005974:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 8005976:	b29b      	uxth	r3, r3
 8005978:	3b01      	subs	r3, #1
 800597a:	b29a      	uxth	r2, r3
 800597c:	68fb      	ldr	r3, [r7, #12]
 800597e:	84da      	strh	r2, [r3, #38]	; 0x26
    while (huart->TxXferCount > 0U)
 8005980:	68fb      	ldr	r3, [r7, #12]
 8005982:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 8005984:	b29b      	uxth	r3, r3
 8005986:	2b00      	cmp	r3, #0
 8005988:	d1cf      	bne.n	800592a <HAL_UART_Transmit+0x94>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 800598a:	683b      	ldr	r3, [r7, #0]
 800598c:	9300      	str	r3, [sp, #0]
 800598e:	697b      	ldr	r3, [r7, #20]
 8005990:	2200      	movs	r2, #0
 8005992:	2140      	movs	r1, #64	; 0x40
 8005994:	68f8      	ldr	r0, [r7, #12]
 8005996:	f000 f810 	bl	80059ba <UART_WaitOnFlagUntilTimeout>
 800599a:	4603      	mov	r3, r0
 800599c:	2b00      	cmp	r3, #0
 800599e:	d001      	beq.n	80059a4 <HAL_UART_Transmit+0x10e>
    {
      return HAL_TIMEOUT;
 80059a0:	2303      	movs	r3, #3
 80059a2:	e006      	b.n	80059b2 <HAL_UART_Transmit+0x11c>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 80059a4:	68fb      	ldr	r3, [r7, #12]
 80059a6:	2220      	movs	r2, #32
 80059a8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    return HAL_OK;
 80059ac:	2300      	movs	r3, #0
 80059ae:	e000      	b.n	80059b2 <HAL_UART_Transmit+0x11c>
  }
  else
  {
    return HAL_BUSY;
 80059b0:	2302      	movs	r3, #2
  }
}
 80059b2:	4618      	mov	r0, r3
 80059b4:	3720      	adds	r7, #32
 80059b6:	46bd      	mov	sp, r7
 80059b8:	bd80      	pop	{r7, pc}

080059ba <UART_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                                     uint32_t Tickstart, uint32_t Timeout)
{
 80059ba:	b580      	push	{r7, lr}
 80059bc:	b090      	sub	sp, #64	; 0x40
 80059be:	af00      	add	r7, sp, #0
 80059c0:	60f8      	str	r0, [r7, #12]
 80059c2:	60b9      	str	r1, [r7, #8]
 80059c4:	603b      	str	r3, [r7, #0]
 80059c6:	4613      	mov	r3, r2
 80059c8:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 80059ca:	e050      	b.n	8005a6e <UART_WaitOnFlagUntilTimeout+0xb4>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80059cc:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 80059ce:	f1b3 3fff 	cmp.w	r3, #4294967295
 80059d2:	d04c      	beq.n	8005a6e <UART_WaitOnFlagUntilTimeout+0xb4>
    {
      if ((Timeout == 0U) || ((HAL_GetTick() - Tickstart) > Timeout))
 80059d4:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 80059d6:	2b00      	cmp	r3, #0
 80059d8:	d007      	beq.n	80059ea <UART_WaitOnFlagUntilTimeout+0x30>
 80059da:	f7fc f839 	bl	8001a50 <HAL_GetTick>
 80059de:	4602      	mov	r2, r0
 80059e0:	683b      	ldr	r3, [r7, #0]
 80059e2:	1ad3      	subs	r3, r2, r3
 80059e4:	6cba      	ldr	r2, [r7, #72]	; 0x48
 80059e6:	429a      	cmp	r2, r3
 80059e8:	d241      	bcs.n	8005a6e <UART_WaitOnFlagUntilTimeout+0xb4>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts for the interrupt process */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 80059ea:	68fb      	ldr	r3, [r7, #12]
 80059ec:	681b      	ldr	r3, [r3, #0]
 80059ee:	330c      	adds	r3, #12
 80059f0:	62bb      	str	r3, [r7, #40]	; 0x28
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80059f2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80059f4:	e853 3f00 	ldrex	r3, [r3]
 80059f8:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 80059fa:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80059fc:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 8005a00:	63fb      	str	r3, [r7, #60]	; 0x3c
 8005a02:	68fb      	ldr	r3, [r7, #12]
 8005a04:	681b      	ldr	r3, [r3, #0]
 8005a06:	330c      	adds	r3, #12
 8005a08:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 8005a0a:	637a      	str	r2, [r7, #52]	; 0x34
 8005a0c:	633b      	str	r3, [r7, #48]	; 0x30
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005a0e:	6b39      	ldr	r1, [r7, #48]	; 0x30
 8005a10:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8005a12:	e841 2300 	strex	r3, r2, [r1]
 8005a16:	62fb      	str	r3, [r7, #44]	; 0x2c
   return(result);
 8005a18:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005a1a:	2b00      	cmp	r3, #0
 8005a1c:	d1e5      	bne.n	80059ea <UART_WaitOnFlagUntilTimeout+0x30>
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8005a1e:	68fb      	ldr	r3, [r7, #12]
 8005a20:	681b      	ldr	r3, [r3, #0]
 8005a22:	3314      	adds	r3, #20
 8005a24:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005a26:	697b      	ldr	r3, [r7, #20]
 8005a28:	e853 3f00 	ldrex	r3, [r3]
 8005a2c:	613b      	str	r3, [r7, #16]
   return(result);
 8005a2e:	693b      	ldr	r3, [r7, #16]
 8005a30:	f023 0301 	bic.w	r3, r3, #1
 8005a34:	63bb      	str	r3, [r7, #56]	; 0x38
 8005a36:	68fb      	ldr	r3, [r7, #12]
 8005a38:	681b      	ldr	r3, [r3, #0]
 8005a3a:	3314      	adds	r3, #20
 8005a3c:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8005a3e:	623a      	str	r2, [r7, #32]
 8005a40:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005a42:	69f9      	ldr	r1, [r7, #28]
 8005a44:	6a3a      	ldr	r2, [r7, #32]
 8005a46:	e841 2300 	strex	r3, r2, [r1]
 8005a4a:	61bb      	str	r3, [r7, #24]
   return(result);
 8005a4c:	69bb      	ldr	r3, [r7, #24]
 8005a4e:	2b00      	cmp	r3, #0
 8005a50:	d1e5      	bne.n	8005a1e <UART_WaitOnFlagUntilTimeout+0x64>

        huart->gState  = HAL_UART_STATE_READY;
 8005a52:	68fb      	ldr	r3, [r7, #12]
 8005a54:	2220      	movs	r2, #32
 8005a56:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        huart->RxState = HAL_UART_STATE_READY;
 8005a5a:	68fb      	ldr	r3, [r7, #12]
 8005a5c:	2220      	movs	r2, #32
 8005a5e:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

        /* Process Unlocked */
        __HAL_UNLOCK(huart);
 8005a62:	68fb      	ldr	r3, [r7, #12]
 8005a64:	2200      	movs	r2, #0
 8005a66:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_TIMEOUT;
 8005a6a:	2303      	movs	r3, #3
 8005a6c:	e00f      	b.n	8005a8e <UART_WaitOnFlagUntilTimeout+0xd4>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8005a6e:	68fb      	ldr	r3, [r7, #12]
 8005a70:	681b      	ldr	r3, [r3, #0]
 8005a72:	681a      	ldr	r2, [r3, #0]
 8005a74:	68bb      	ldr	r3, [r7, #8]
 8005a76:	4013      	ands	r3, r2
 8005a78:	68ba      	ldr	r2, [r7, #8]
 8005a7a:	429a      	cmp	r2, r3
 8005a7c:	bf0c      	ite	eq
 8005a7e:	2301      	moveq	r3, #1
 8005a80:	2300      	movne	r3, #0
 8005a82:	b2db      	uxtb	r3, r3
 8005a84:	461a      	mov	r2, r3
 8005a86:	79fb      	ldrb	r3, [r7, #7]
 8005a88:	429a      	cmp	r2, r3
 8005a8a:	d09f      	beq.n	80059cc <UART_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 8005a8c:	2300      	movs	r3, #0
}
 8005a8e:	4618      	mov	r0, r3
 8005a90:	3740      	adds	r7, #64	; 0x40
 8005a92:	46bd      	mov	sp, r7
 8005a94:	bd80      	pop	{r7, pc}
	...

08005a98 <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 8005a98:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8005a9c:	b0c0      	sub	sp, #256	; 0x100
 8005a9e:	af00      	add	r7, sp, #0
 8005aa0:	f8c7 00f4 	str.w	r0, [r7, #244]	; 0xf4
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8005aa4:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8005aa8:	681b      	ldr	r3, [r3, #0]
 8005aaa:	691b      	ldr	r3, [r3, #16]
 8005aac:	f423 5040 	bic.w	r0, r3, #12288	; 0x3000
 8005ab0:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8005ab4:	68d9      	ldr	r1, [r3, #12]
 8005ab6:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8005aba:	681a      	ldr	r2, [r3, #0]
 8005abc:	ea40 0301 	orr.w	r3, r0, r1
 8005ac0:	6113      	str	r3, [r2, #16]
     Set the M bits according to huart->Init.WordLength value
     Set PCE and PS bits according to huart->Init.Parity value
     Set TE and RE bits according to huart->Init.Mode value
     Set OVER8 bit according to huart->Init.OverSampling value */

  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 8005ac2:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8005ac6:	689a      	ldr	r2, [r3, #8]
 8005ac8:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8005acc:	691b      	ldr	r3, [r3, #16]
 8005ace:	431a      	orrs	r2, r3
 8005ad0:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8005ad4:	695b      	ldr	r3, [r3, #20]
 8005ad6:	431a      	orrs	r2, r3
 8005ad8:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8005adc:	69db      	ldr	r3, [r3, #28]
 8005ade:	4313      	orrs	r3, r2
 8005ae0:	f8c7 30f8 	str.w	r3, [r7, #248]	; 0xf8
  MODIFY_REG(huart->Instance->CR1,
 8005ae4:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8005ae8:	681b      	ldr	r3, [r3, #0]
 8005aea:	68db      	ldr	r3, [r3, #12]
 8005aec:	f423 4116 	bic.w	r1, r3, #38400	; 0x9600
 8005af0:	f021 010c 	bic.w	r1, r1, #12
 8005af4:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8005af8:	681a      	ldr	r2, [r3, #0]
 8005afa:	f8d7 30f8 	ldr.w	r3, [r7, #248]	; 0xf8
 8005afe:	430b      	orrs	r3, r1
 8005b00:	60d3      	str	r3, [r2, #12]
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 8005b02:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8005b06:	681b      	ldr	r3, [r3, #0]
 8005b08:	695b      	ldr	r3, [r3, #20]
 8005b0a:	f423 7040 	bic.w	r0, r3, #768	; 0x300
 8005b0e:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8005b12:	6999      	ldr	r1, [r3, #24]
 8005b14:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8005b18:	681a      	ldr	r2, [r3, #0]
 8005b1a:	ea40 0301 	orr.w	r3, r0, r1
 8005b1e:	6153      	str	r3, [r2, #20]
    if ((huart->Instance == USART1) || (huart->Instance == USART6) || (huart->Instance == UART9) || (huart->Instance == UART10))
    {
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#elif defined(USART6)
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 8005b20:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8005b24:	681a      	ldr	r2, [r3, #0]
 8005b26:	4b8f      	ldr	r3, [pc, #572]	; (8005d64 <UART_SetConfig+0x2cc>)
 8005b28:	429a      	cmp	r2, r3
 8005b2a:	d005      	beq.n	8005b38 <UART_SetConfig+0xa0>
 8005b2c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8005b30:	681a      	ldr	r2, [r3, #0]
 8005b32:	4b8d      	ldr	r3, [pc, #564]	; (8005d68 <UART_SetConfig+0x2d0>)
 8005b34:	429a      	cmp	r2, r3
 8005b36:	d104      	bne.n	8005b42 <UART_SetConfig+0xaa>
    {
      pclk = HAL_RCC_GetPCLK2Freq();
 8005b38:	f7fe ff1c 	bl	8004974 <HAL_RCC_GetPCLK2Freq>
 8005b3c:	f8c7 00fc 	str.w	r0, [r7, #252]	; 0xfc
 8005b40:	e003      	b.n	8005b4a <UART_SetConfig+0xb2>
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#endif /* USART6 */
    else
    {
      pclk = HAL_RCC_GetPCLK1Freq();
 8005b42:	f7fe ff03 	bl	800494c <HAL_RCC_GetPCLK1Freq>
 8005b46:	f8c7 00fc 	str.w	r0, [r7, #252]	; 0xfc
    }
  /*-------------------------- USART BRR Configuration ---------------------*/
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8005b4a:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8005b4e:	69db      	ldr	r3, [r3, #28]
 8005b50:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8005b54:	f040 810c 	bne.w	8005d70 <UART_SetConfig+0x2d8>
  {
    huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 8005b58:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8005b5c:	2200      	movs	r2, #0
 8005b5e:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
 8005b62:	f8c7 20ec 	str.w	r2, [r7, #236]	; 0xec
 8005b66:	e9d7 453a 	ldrd	r4, r5, [r7, #232]	; 0xe8
 8005b6a:	4622      	mov	r2, r4
 8005b6c:	462b      	mov	r3, r5
 8005b6e:	1891      	adds	r1, r2, r2
 8005b70:	65b9      	str	r1, [r7, #88]	; 0x58
 8005b72:	415b      	adcs	r3, r3
 8005b74:	65fb      	str	r3, [r7, #92]	; 0x5c
 8005b76:	e9d7 2316 	ldrd	r2, r3, [r7, #88]	; 0x58
 8005b7a:	4621      	mov	r1, r4
 8005b7c:	eb12 0801 	adds.w	r8, r2, r1
 8005b80:	4629      	mov	r1, r5
 8005b82:	eb43 0901 	adc.w	r9, r3, r1
 8005b86:	f04f 0200 	mov.w	r2, #0
 8005b8a:	f04f 0300 	mov.w	r3, #0
 8005b8e:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 8005b92:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 8005b96:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 8005b9a:	4690      	mov	r8, r2
 8005b9c:	4699      	mov	r9, r3
 8005b9e:	4623      	mov	r3, r4
 8005ba0:	eb18 0303 	adds.w	r3, r8, r3
 8005ba4:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
 8005ba8:	462b      	mov	r3, r5
 8005baa:	eb49 0303 	adc.w	r3, r9, r3
 8005bae:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
 8005bb2:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8005bb6:	685b      	ldr	r3, [r3, #4]
 8005bb8:	2200      	movs	r2, #0
 8005bba:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
 8005bbe:	f8c7 20dc 	str.w	r2, [r7, #220]	; 0xdc
 8005bc2:	e9d7 1236 	ldrd	r1, r2, [r7, #216]	; 0xd8
 8005bc6:	460b      	mov	r3, r1
 8005bc8:	18db      	adds	r3, r3, r3
 8005bca:	653b      	str	r3, [r7, #80]	; 0x50
 8005bcc:	4613      	mov	r3, r2
 8005bce:	eb42 0303 	adc.w	r3, r2, r3
 8005bd2:	657b      	str	r3, [r7, #84]	; 0x54
 8005bd4:	e9d7 2314 	ldrd	r2, r3, [r7, #80]	; 0x50
 8005bd8:	e9d7 0138 	ldrd	r0, r1, [r7, #224]	; 0xe0
 8005bdc:	f7fa fb58 	bl	8000290 <__aeabi_uldivmod>
 8005be0:	4602      	mov	r2, r0
 8005be2:	460b      	mov	r3, r1
 8005be4:	4b61      	ldr	r3, [pc, #388]	; (8005d6c <UART_SetConfig+0x2d4>)
 8005be6:	fba3 2302 	umull	r2, r3, r3, r2
 8005bea:	095b      	lsrs	r3, r3, #5
 8005bec:	011c      	lsls	r4, r3, #4
 8005bee:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8005bf2:	2200      	movs	r2, #0
 8005bf4:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 8005bf8:	f8c7 20d4 	str.w	r2, [r7, #212]	; 0xd4
 8005bfc:	e9d7 8934 	ldrd	r8, r9, [r7, #208]	; 0xd0
 8005c00:	4642      	mov	r2, r8
 8005c02:	464b      	mov	r3, r9
 8005c04:	1891      	adds	r1, r2, r2
 8005c06:	64b9      	str	r1, [r7, #72]	; 0x48
 8005c08:	415b      	adcs	r3, r3
 8005c0a:	64fb      	str	r3, [r7, #76]	; 0x4c
 8005c0c:	e9d7 2312 	ldrd	r2, r3, [r7, #72]	; 0x48
 8005c10:	4641      	mov	r1, r8
 8005c12:	eb12 0a01 	adds.w	sl, r2, r1
 8005c16:	4649      	mov	r1, r9
 8005c18:	eb43 0b01 	adc.w	fp, r3, r1
 8005c1c:	f04f 0200 	mov.w	r2, #0
 8005c20:	f04f 0300 	mov.w	r3, #0
 8005c24:	ea4f 03cb 	mov.w	r3, fp, lsl #3
 8005c28:	ea43 735a 	orr.w	r3, r3, sl, lsr #29
 8005c2c:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 8005c30:	4692      	mov	sl, r2
 8005c32:	469b      	mov	fp, r3
 8005c34:	4643      	mov	r3, r8
 8005c36:	eb1a 0303 	adds.w	r3, sl, r3
 8005c3a:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 8005c3e:	464b      	mov	r3, r9
 8005c40:	eb4b 0303 	adc.w	r3, fp, r3
 8005c44:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
 8005c48:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8005c4c:	685b      	ldr	r3, [r3, #4]
 8005c4e:	2200      	movs	r2, #0
 8005c50:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 8005c54:	f8c7 20c4 	str.w	r2, [r7, #196]	; 0xc4
 8005c58:	e9d7 1230 	ldrd	r1, r2, [r7, #192]	; 0xc0
 8005c5c:	460b      	mov	r3, r1
 8005c5e:	18db      	adds	r3, r3, r3
 8005c60:	643b      	str	r3, [r7, #64]	; 0x40
 8005c62:	4613      	mov	r3, r2
 8005c64:	eb42 0303 	adc.w	r3, r2, r3
 8005c68:	647b      	str	r3, [r7, #68]	; 0x44
 8005c6a:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	; 0x40
 8005c6e:	e9d7 0132 	ldrd	r0, r1, [r7, #200]	; 0xc8
 8005c72:	f7fa fb0d 	bl	8000290 <__aeabi_uldivmod>
 8005c76:	4602      	mov	r2, r0
 8005c78:	460b      	mov	r3, r1
 8005c7a:	4611      	mov	r1, r2
 8005c7c:	4b3b      	ldr	r3, [pc, #236]	; (8005d6c <UART_SetConfig+0x2d4>)
 8005c7e:	fba3 2301 	umull	r2, r3, r3, r1
 8005c82:	095b      	lsrs	r3, r3, #5
 8005c84:	2264      	movs	r2, #100	; 0x64
 8005c86:	fb02 f303 	mul.w	r3, r2, r3
 8005c8a:	1acb      	subs	r3, r1, r3
 8005c8c:	00db      	lsls	r3, r3, #3
 8005c8e:	f103 0232 	add.w	r2, r3, #50	; 0x32
 8005c92:	4b36      	ldr	r3, [pc, #216]	; (8005d6c <UART_SetConfig+0x2d4>)
 8005c94:	fba3 2302 	umull	r2, r3, r3, r2
 8005c98:	095b      	lsrs	r3, r3, #5
 8005c9a:	005b      	lsls	r3, r3, #1
 8005c9c:	f403 73f8 	and.w	r3, r3, #496	; 0x1f0
 8005ca0:	441c      	add	r4, r3
 8005ca2:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8005ca6:	2200      	movs	r2, #0
 8005ca8:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 8005cac:	f8c7 20bc 	str.w	r2, [r7, #188]	; 0xbc
 8005cb0:	e9d7 892e 	ldrd	r8, r9, [r7, #184]	; 0xb8
 8005cb4:	4642      	mov	r2, r8
 8005cb6:	464b      	mov	r3, r9
 8005cb8:	1891      	adds	r1, r2, r2
 8005cba:	63b9      	str	r1, [r7, #56]	; 0x38
 8005cbc:	415b      	adcs	r3, r3
 8005cbe:	63fb      	str	r3, [r7, #60]	; 0x3c
 8005cc0:	e9d7 230e 	ldrd	r2, r3, [r7, #56]	; 0x38
 8005cc4:	4641      	mov	r1, r8
 8005cc6:	1851      	adds	r1, r2, r1
 8005cc8:	6339      	str	r1, [r7, #48]	; 0x30
 8005cca:	4649      	mov	r1, r9
 8005ccc:	414b      	adcs	r3, r1
 8005cce:	637b      	str	r3, [r7, #52]	; 0x34
 8005cd0:	f04f 0200 	mov.w	r2, #0
 8005cd4:	f04f 0300 	mov.w	r3, #0
 8005cd8:	e9d7 ab0c 	ldrd	sl, fp, [r7, #48]	; 0x30
 8005cdc:	4659      	mov	r1, fp
 8005cde:	00cb      	lsls	r3, r1, #3
 8005ce0:	4651      	mov	r1, sl
 8005ce2:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8005ce6:	4651      	mov	r1, sl
 8005ce8:	00ca      	lsls	r2, r1, #3
 8005cea:	4610      	mov	r0, r2
 8005cec:	4619      	mov	r1, r3
 8005cee:	4603      	mov	r3, r0
 8005cf0:	4642      	mov	r2, r8
 8005cf2:	189b      	adds	r3, r3, r2
 8005cf4:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 8005cf8:	464b      	mov	r3, r9
 8005cfa:	460a      	mov	r2, r1
 8005cfc:	eb42 0303 	adc.w	r3, r2, r3
 8005d00:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 8005d04:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8005d08:	685b      	ldr	r3, [r3, #4]
 8005d0a:	2200      	movs	r2, #0
 8005d0c:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
 8005d10:	f8c7 20ac 	str.w	r2, [r7, #172]	; 0xac
 8005d14:	e9d7 122a 	ldrd	r1, r2, [r7, #168]	; 0xa8
 8005d18:	460b      	mov	r3, r1
 8005d1a:	18db      	adds	r3, r3, r3
 8005d1c:	62bb      	str	r3, [r7, #40]	; 0x28
 8005d1e:	4613      	mov	r3, r2
 8005d20:	eb42 0303 	adc.w	r3, r2, r3
 8005d24:	62fb      	str	r3, [r7, #44]	; 0x2c
 8005d26:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 8005d2a:	e9d7 012c 	ldrd	r0, r1, [r7, #176]	; 0xb0
 8005d2e:	f7fa faaf 	bl	8000290 <__aeabi_uldivmod>
 8005d32:	4602      	mov	r2, r0
 8005d34:	460b      	mov	r3, r1
 8005d36:	4b0d      	ldr	r3, [pc, #52]	; (8005d6c <UART_SetConfig+0x2d4>)
 8005d38:	fba3 1302 	umull	r1, r3, r3, r2
 8005d3c:	095b      	lsrs	r3, r3, #5
 8005d3e:	2164      	movs	r1, #100	; 0x64
 8005d40:	fb01 f303 	mul.w	r3, r1, r3
 8005d44:	1ad3      	subs	r3, r2, r3
 8005d46:	00db      	lsls	r3, r3, #3
 8005d48:	3332      	adds	r3, #50	; 0x32
 8005d4a:	4a08      	ldr	r2, [pc, #32]	; (8005d6c <UART_SetConfig+0x2d4>)
 8005d4c:	fba2 2303 	umull	r2, r3, r2, r3
 8005d50:	095b      	lsrs	r3, r3, #5
 8005d52:	f003 0207 	and.w	r2, r3, #7
 8005d56:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8005d5a:	681b      	ldr	r3, [r3, #0]
 8005d5c:	4422      	add	r2, r4
 8005d5e:	609a      	str	r2, [r3, #8]
  }
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
}
 8005d60:	e105      	b.n	8005f6e <UART_SetConfig+0x4d6>
 8005d62:	bf00      	nop
 8005d64:	40011000 	.word	0x40011000
 8005d68:	40011400 	.word	0x40011400
 8005d6c:	51eb851f 	.word	0x51eb851f
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 8005d70:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8005d74:	2200      	movs	r2, #0
 8005d76:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
 8005d7a:	f8c7 20a4 	str.w	r2, [r7, #164]	; 0xa4
 8005d7e:	e9d7 8928 	ldrd	r8, r9, [r7, #160]	; 0xa0
 8005d82:	4642      	mov	r2, r8
 8005d84:	464b      	mov	r3, r9
 8005d86:	1891      	adds	r1, r2, r2
 8005d88:	6239      	str	r1, [r7, #32]
 8005d8a:	415b      	adcs	r3, r3
 8005d8c:	627b      	str	r3, [r7, #36]	; 0x24
 8005d8e:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 8005d92:	4641      	mov	r1, r8
 8005d94:	1854      	adds	r4, r2, r1
 8005d96:	4649      	mov	r1, r9
 8005d98:	eb43 0501 	adc.w	r5, r3, r1
 8005d9c:	f04f 0200 	mov.w	r2, #0
 8005da0:	f04f 0300 	mov.w	r3, #0
 8005da4:	00eb      	lsls	r3, r5, #3
 8005da6:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8005daa:	00e2      	lsls	r2, r4, #3
 8005dac:	4614      	mov	r4, r2
 8005dae:	461d      	mov	r5, r3
 8005db0:	4643      	mov	r3, r8
 8005db2:	18e3      	adds	r3, r4, r3
 8005db4:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
 8005db8:	464b      	mov	r3, r9
 8005dba:	eb45 0303 	adc.w	r3, r5, r3
 8005dbe:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
 8005dc2:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8005dc6:	685b      	ldr	r3, [r3, #4]
 8005dc8:	2200      	movs	r2, #0
 8005dca:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
 8005dce:	f8c7 2094 	str.w	r2, [r7, #148]	; 0x94
 8005dd2:	f04f 0200 	mov.w	r2, #0
 8005dd6:	f04f 0300 	mov.w	r3, #0
 8005dda:	e9d7 4524 	ldrd	r4, r5, [r7, #144]	; 0x90
 8005dde:	4629      	mov	r1, r5
 8005de0:	008b      	lsls	r3, r1, #2
 8005de2:	4621      	mov	r1, r4
 8005de4:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8005de8:	4621      	mov	r1, r4
 8005dea:	008a      	lsls	r2, r1, #2
 8005dec:	e9d7 0126 	ldrd	r0, r1, [r7, #152]	; 0x98
 8005df0:	f7fa fa4e 	bl	8000290 <__aeabi_uldivmod>
 8005df4:	4602      	mov	r2, r0
 8005df6:	460b      	mov	r3, r1
 8005df8:	4b60      	ldr	r3, [pc, #384]	; (8005f7c <UART_SetConfig+0x4e4>)
 8005dfa:	fba3 2302 	umull	r2, r3, r3, r2
 8005dfe:	095b      	lsrs	r3, r3, #5
 8005e00:	011c      	lsls	r4, r3, #4
 8005e02:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8005e06:	2200      	movs	r2, #0
 8005e08:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
 8005e0c:	f8c7 208c 	str.w	r2, [r7, #140]	; 0x8c
 8005e10:	e9d7 8922 	ldrd	r8, r9, [r7, #136]	; 0x88
 8005e14:	4642      	mov	r2, r8
 8005e16:	464b      	mov	r3, r9
 8005e18:	1891      	adds	r1, r2, r2
 8005e1a:	61b9      	str	r1, [r7, #24]
 8005e1c:	415b      	adcs	r3, r3
 8005e1e:	61fb      	str	r3, [r7, #28]
 8005e20:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8005e24:	4641      	mov	r1, r8
 8005e26:	1851      	adds	r1, r2, r1
 8005e28:	6139      	str	r1, [r7, #16]
 8005e2a:	4649      	mov	r1, r9
 8005e2c:	414b      	adcs	r3, r1
 8005e2e:	617b      	str	r3, [r7, #20]
 8005e30:	f04f 0200 	mov.w	r2, #0
 8005e34:	f04f 0300 	mov.w	r3, #0
 8005e38:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 8005e3c:	4659      	mov	r1, fp
 8005e3e:	00cb      	lsls	r3, r1, #3
 8005e40:	4651      	mov	r1, sl
 8005e42:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8005e46:	4651      	mov	r1, sl
 8005e48:	00ca      	lsls	r2, r1, #3
 8005e4a:	4610      	mov	r0, r2
 8005e4c:	4619      	mov	r1, r3
 8005e4e:	4603      	mov	r3, r0
 8005e50:	4642      	mov	r2, r8
 8005e52:	189b      	adds	r3, r3, r2
 8005e54:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
 8005e58:	464b      	mov	r3, r9
 8005e5a:	460a      	mov	r2, r1
 8005e5c:	eb42 0303 	adc.w	r3, r2, r3
 8005e60:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
 8005e64:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8005e68:	685b      	ldr	r3, [r3, #4]
 8005e6a:	2200      	movs	r2, #0
 8005e6c:	67bb      	str	r3, [r7, #120]	; 0x78
 8005e6e:	67fa      	str	r2, [r7, #124]	; 0x7c
 8005e70:	f04f 0200 	mov.w	r2, #0
 8005e74:	f04f 0300 	mov.w	r3, #0
 8005e78:	e9d7 891e 	ldrd	r8, r9, [r7, #120]	; 0x78
 8005e7c:	4649      	mov	r1, r9
 8005e7e:	008b      	lsls	r3, r1, #2
 8005e80:	4641      	mov	r1, r8
 8005e82:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8005e86:	4641      	mov	r1, r8
 8005e88:	008a      	lsls	r2, r1, #2
 8005e8a:	e9d7 0120 	ldrd	r0, r1, [r7, #128]	; 0x80
 8005e8e:	f7fa f9ff 	bl	8000290 <__aeabi_uldivmod>
 8005e92:	4602      	mov	r2, r0
 8005e94:	460b      	mov	r3, r1
 8005e96:	4b39      	ldr	r3, [pc, #228]	; (8005f7c <UART_SetConfig+0x4e4>)
 8005e98:	fba3 1302 	umull	r1, r3, r3, r2
 8005e9c:	095b      	lsrs	r3, r3, #5
 8005e9e:	2164      	movs	r1, #100	; 0x64
 8005ea0:	fb01 f303 	mul.w	r3, r1, r3
 8005ea4:	1ad3      	subs	r3, r2, r3
 8005ea6:	011b      	lsls	r3, r3, #4
 8005ea8:	3332      	adds	r3, #50	; 0x32
 8005eaa:	4a34      	ldr	r2, [pc, #208]	; (8005f7c <UART_SetConfig+0x4e4>)
 8005eac:	fba2 2303 	umull	r2, r3, r2, r3
 8005eb0:	095b      	lsrs	r3, r3, #5
 8005eb2:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8005eb6:	441c      	add	r4, r3
 8005eb8:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8005ebc:	2200      	movs	r2, #0
 8005ebe:	673b      	str	r3, [r7, #112]	; 0x70
 8005ec0:	677a      	str	r2, [r7, #116]	; 0x74
 8005ec2:	e9d7 891c 	ldrd	r8, r9, [r7, #112]	; 0x70
 8005ec6:	4642      	mov	r2, r8
 8005ec8:	464b      	mov	r3, r9
 8005eca:	1891      	adds	r1, r2, r2
 8005ecc:	60b9      	str	r1, [r7, #8]
 8005ece:	415b      	adcs	r3, r3
 8005ed0:	60fb      	str	r3, [r7, #12]
 8005ed2:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 8005ed6:	4641      	mov	r1, r8
 8005ed8:	1851      	adds	r1, r2, r1
 8005eda:	6039      	str	r1, [r7, #0]
 8005edc:	4649      	mov	r1, r9
 8005ede:	414b      	adcs	r3, r1
 8005ee0:	607b      	str	r3, [r7, #4]
 8005ee2:	f04f 0200 	mov.w	r2, #0
 8005ee6:	f04f 0300 	mov.w	r3, #0
 8005eea:	e9d7 ab00 	ldrd	sl, fp, [r7]
 8005eee:	4659      	mov	r1, fp
 8005ef0:	00cb      	lsls	r3, r1, #3
 8005ef2:	4651      	mov	r1, sl
 8005ef4:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8005ef8:	4651      	mov	r1, sl
 8005efa:	00ca      	lsls	r2, r1, #3
 8005efc:	4610      	mov	r0, r2
 8005efe:	4619      	mov	r1, r3
 8005f00:	4603      	mov	r3, r0
 8005f02:	4642      	mov	r2, r8
 8005f04:	189b      	adds	r3, r3, r2
 8005f06:	66bb      	str	r3, [r7, #104]	; 0x68
 8005f08:	464b      	mov	r3, r9
 8005f0a:	460a      	mov	r2, r1
 8005f0c:	eb42 0303 	adc.w	r3, r2, r3
 8005f10:	66fb      	str	r3, [r7, #108]	; 0x6c
 8005f12:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8005f16:	685b      	ldr	r3, [r3, #4]
 8005f18:	2200      	movs	r2, #0
 8005f1a:	663b      	str	r3, [r7, #96]	; 0x60
 8005f1c:	667a      	str	r2, [r7, #100]	; 0x64
 8005f1e:	f04f 0200 	mov.w	r2, #0
 8005f22:	f04f 0300 	mov.w	r3, #0
 8005f26:	e9d7 8918 	ldrd	r8, r9, [r7, #96]	; 0x60
 8005f2a:	4649      	mov	r1, r9
 8005f2c:	008b      	lsls	r3, r1, #2
 8005f2e:	4641      	mov	r1, r8
 8005f30:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8005f34:	4641      	mov	r1, r8
 8005f36:	008a      	lsls	r2, r1, #2
 8005f38:	e9d7 011a 	ldrd	r0, r1, [r7, #104]	; 0x68
 8005f3c:	f7fa f9a8 	bl	8000290 <__aeabi_uldivmod>
 8005f40:	4602      	mov	r2, r0
 8005f42:	460b      	mov	r3, r1
 8005f44:	4b0d      	ldr	r3, [pc, #52]	; (8005f7c <UART_SetConfig+0x4e4>)
 8005f46:	fba3 1302 	umull	r1, r3, r3, r2
 8005f4a:	095b      	lsrs	r3, r3, #5
 8005f4c:	2164      	movs	r1, #100	; 0x64
 8005f4e:	fb01 f303 	mul.w	r3, r1, r3
 8005f52:	1ad3      	subs	r3, r2, r3
 8005f54:	011b      	lsls	r3, r3, #4
 8005f56:	3332      	adds	r3, #50	; 0x32
 8005f58:	4a08      	ldr	r2, [pc, #32]	; (8005f7c <UART_SetConfig+0x4e4>)
 8005f5a:	fba2 2303 	umull	r2, r3, r2, r3
 8005f5e:	095b      	lsrs	r3, r3, #5
 8005f60:	f003 020f 	and.w	r2, r3, #15
 8005f64:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8005f68:	681b      	ldr	r3, [r3, #0]
 8005f6a:	4422      	add	r2, r4
 8005f6c:	609a      	str	r2, [r3, #8]
}
 8005f6e:	bf00      	nop
 8005f70:	f507 7780 	add.w	r7, r7, #256	; 0x100
 8005f74:	46bd      	mov	sp, r7
 8005f76:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8005f7a:	bf00      	nop
 8005f7c:	51eb851f 	.word	0x51eb851f

08005f80 <FMC_SDRAM_Init>:
  * @param  Device Pointer to SDRAM device instance
  * @param  Init Pointer to SDRAM Initialization structure
  * @retval HAL status
  */
HAL_StatusTypeDef FMC_SDRAM_Init(FMC_SDRAM_TypeDef *Device, FMC_SDRAM_InitTypeDef *Init)
{
 8005f80:	b480      	push	{r7}
 8005f82:	b083      	sub	sp, #12
 8005f84:	af00      	add	r7, sp, #0
 8005f86:	6078      	str	r0, [r7, #4]
 8005f88:	6039      	str	r1, [r7, #0]
  assert_param(IS_FMC_SDCLOCK_PERIOD(Init->SDClockPeriod));
  assert_param(IS_FMC_READ_BURST(Init->ReadBurst));
  assert_param(IS_FMC_READPIPE_DELAY(Init->ReadPipeDelay));

  /* Set SDRAM bank configuration parameters */
  if (Init->SDBank == FMC_SDRAM_BANK1)
 8005f8a:	683b      	ldr	r3, [r7, #0]
 8005f8c:	681b      	ldr	r3, [r3, #0]
 8005f8e:	2b00      	cmp	r3, #0
 8005f90:	d123      	bne.n	8005fda <FMC_SDRAM_Init+0x5a>
  {
    MODIFY_REG(Device->SDCR[FMC_SDRAM_BANK1],
 8005f92:	687b      	ldr	r3, [r7, #4]
 8005f94:	681b      	ldr	r3, [r3, #0]
 8005f96:	f423 43ff 	bic.w	r3, r3, #32640	; 0x7f80
 8005f9a:	f023 037f 	bic.w	r3, r3, #127	; 0x7f
 8005f9e:	683a      	ldr	r2, [r7, #0]
 8005fa0:	6851      	ldr	r1, [r2, #4]
 8005fa2:	683a      	ldr	r2, [r7, #0]
 8005fa4:	6892      	ldr	r2, [r2, #8]
 8005fa6:	4311      	orrs	r1, r2
 8005fa8:	683a      	ldr	r2, [r7, #0]
 8005faa:	68d2      	ldr	r2, [r2, #12]
 8005fac:	4311      	orrs	r1, r2
 8005fae:	683a      	ldr	r2, [r7, #0]
 8005fb0:	6912      	ldr	r2, [r2, #16]
 8005fb2:	4311      	orrs	r1, r2
 8005fb4:	683a      	ldr	r2, [r7, #0]
 8005fb6:	6952      	ldr	r2, [r2, #20]
 8005fb8:	4311      	orrs	r1, r2
 8005fba:	683a      	ldr	r2, [r7, #0]
 8005fbc:	6992      	ldr	r2, [r2, #24]
 8005fbe:	4311      	orrs	r1, r2
 8005fc0:	683a      	ldr	r2, [r7, #0]
 8005fc2:	69d2      	ldr	r2, [r2, #28]
 8005fc4:	4311      	orrs	r1, r2
 8005fc6:	683a      	ldr	r2, [r7, #0]
 8005fc8:	6a12      	ldr	r2, [r2, #32]
 8005fca:	4311      	orrs	r1, r2
 8005fcc:	683a      	ldr	r2, [r7, #0]
 8005fce:	6a52      	ldr	r2, [r2, #36]	; 0x24
 8005fd0:	430a      	orrs	r2, r1
 8005fd2:	431a      	orrs	r2, r3
 8005fd4:	687b      	ldr	r3, [r7, #4]
 8005fd6:	601a      	str	r2, [r3, #0]
 8005fd8:	e028      	b.n	800602c <FMC_SDRAM_Init+0xac>
                Init->ReadBurst          |
                Init->ReadPipeDelay));
  }
  else /* FMC_Bank2_SDRAM */
  {
    MODIFY_REG(Device->SDCR[FMC_SDRAM_BANK1],
 8005fda:	687b      	ldr	r3, [r7, #4]
 8005fdc:	681b      	ldr	r3, [r3, #0]
 8005fde:	f423 42f8 	bic.w	r2, r3, #31744	; 0x7c00
 8005fe2:	683b      	ldr	r3, [r7, #0]
 8005fe4:	69d9      	ldr	r1, [r3, #28]
 8005fe6:	683b      	ldr	r3, [r7, #0]
 8005fe8:	6a1b      	ldr	r3, [r3, #32]
 8005fea:	4319      	orrs	r1, r3
 8005fec:	683b      	ldr	r3, [r7, #0]
 8005fee:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005ff0:	430b      	orrs	r3, r1
 8005ff2:	431a      	orrs	r2, r3
 8005ff4:	687b      	ldr	r3, [r7, #4]
 8005ff6:	601a      	str	r2, [r3, #0]
               FMC_SDCR1_RPIPE,
               (Init->SDClockPeriod      |
                Init->ReadBurst          |
                Init->ReadPipeDelay));

    MODIFY_REG(Device->SDCR[FMC_SDRAM_BANK2],
 8005ff8:	687b      	ldr	r3, [r7, #4]
 8005ffa:	685b      	ldr	r3, [r3, #4]
 8005ffc:	f423 43ff 	bic.w	r3, r3, #32640	; 0x7f80
 8006000:	f023 037f 	bic.w	r3, r3, #127	; 0x7f
 8006004:	683a      	ldr	r2, [r7, #0]
 8006006:	6851      	ldr	r1, [r2, #4]
 8006008:	683a      	ldr	r2, [r7, #0]
 800600a:	6892      	ldr	r2, [r2, #8]
 800600c:	4311      	orrs	r1, r2
 800600e:	683a      	ldr	r2, [r7, #0]
 8006010:	68d2      	ldr	r2, [r2, #12]
 8006012:	4311      	orrs	r1, r2
 8006014:	683a      	ldr	r2, [r7, #0]
 8006016:	6912      	ldr	r2, [r2, #16]
 8006018:	4311      	orrs	r1, r2
 800601a:	683a      	ldr	r2, [r7, #0]
 800601c:	6952      	ldr	r2, [r2, #20]
 800601e:	4311      	orrs	r1, r2
 8006020:	683a      	ldr	r2, [r7, #0]
 8006022:	6992      	ldr	r2, [r2, #24]
 8006024:	430a      	orrs	r2, r1
 8006026:	431a      	orrs	r2, r3
 8006028:	687b      	ldr	r3, [r7, #4]
 800602a:	605a      	str	r2, [r3, #4]
                Init->InternalBankNumber |
                Init->CASLatency         |
                Init->WriteProtection));
  }

  return HAL_OK;
 800602c:	2300      	movs	r3, #0
}
 800602e:	4618      	mov	r0, r3
 8006030:	370c      	adds	r7, #12
 8006032:	46bd      	mov	sp, r7
 8006034:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006038:	4770      	bx	lr

0800603a <FMC_SDRAM_Timing_Init>:
  * @param  Bank SDRAM bank number
  * @retval HAL status
  */
HAL_StatusTypeDef FMC_SDRAM_Timing_Init(FMC_SDRAM_TypeDef *Device,
                                        FMC_SDRAM_TimingTypeDef *Timing, uint32_t Bank)
{
 800603a:	b480      	push	{r7}
 800603c:	b085      	sub	sp, #20
 800603e:	af00      	add	r7, sp, #0
 8006040:	60f8      	str	r0, [r7, #12]
 8006042:	60b9      	str	r1, [r7, #8]
 8006044:	607a      	str	r2, [r7, #4]
  assert_param(IS_FMC_RP_DELAY(Timing->RPDelay));
  assert_param(IS_FMC_RCD_DELAY(Timing->RCDDelay));
  assert_param(IS_FMC_SDRAM_BANK(Bank));

  /* Set SDRAM device timing parameters */
  if (Bank == FMC_SDRAM_BANK1)
 8006046:	687b      	ldr	r3, [r7, #4]
 8006048:	2b00      	cmp	r3, #0
 800604a:	d128      	bne.n	800609e <FMC_SDRAM_Timing_Init+0x64>
  {
    MODIFY_REG(Device->SDTR[FMC_SDRAM_BANK1],
 800604c:	68fb      	ldr	r3, [r7, #12]
 800604e:	689b      	ldr	r3, [r3, #8]
 8006050:	f003 4270 	and.w	r2, r3, #4026531840	; 0xf0000000
 8006054:	68bb      	ldr	r3, [r7, #8]
 8006056:	681b      	ldr	r3, [r3, #0]
 8006058:	1e59      	subs	r1, r3, #1
 800605a:	68bb      	ldr	r3, [r7, #8]
 800605c:	685b      	ldr	r3, [r3, #4]
 800605e:	3b01      	subs	r3, #1
 8006060:	011b      	lsls	r3, r3, #4
 8006062:	4319      	orrs	r1, r3
 8006064:	68bb      	ldr	r3, [r7, #8]
 8006066:	689b      	ldr	r3, [r3, #8]
 8006068:	3b01      	subs	r3, #1
 800606a:	021b      	lsls	r3, r3, #8
 800606c:	4319      	orrs	r1, r3
 800606e:	68bb      	ldr	r3, [r7, #8]
 8006070:	68db      	ldr	r3, [r3, #12]
 8006072:	3b01      	subs	r3, #1
 8006074:	031b      	lsls	r3, r3, #12
 8006076:	4319      	orrs	r1, r3
 8006078:	68bb      	ldr	r3, [r7, #8]
 800607a:	691b      	ldr	r3, [r3, #16]
 800607c:	3b01      	subs	r3, #1
 800607e:	041b      	lsls	r3, r3, #16
 8006080:	4319      	orrs	r1, r3
 8006082:	68bb      	ldr	r3, [r7, #8]
 8006084:	695b      	ldr	r3, [r3, #20]
 8006086:	3b01      	subs	r3, #1
 8006088:	051b      	lsls	r3, r3, #20
 800608a:	4319      	orrs	r1, r3
 800608c:	68bb      	ldr	r3, [r7, #8]
 800608e:	699b      	ldr	r3, [r3, #24]
 8006090:	3b01      	subs	r3, #1
 8006092:	061b      	lsls	r3, r3, #24
 8006094:	430b      	orrs	r3, r1
 8006096:	431a      	orrs	r2, r3
 8006098:	68fb      	ldr	r3, [r7, #12]
 800609a:	609a      	str	r2, [r3, #8]
 800609c:	e02f      	b.n	80060fe <FMC_SDRAM_Timing_Init+0xc4>
                (((Timing->RPDelay) - 1U)              << FMC_SDTR1_TRP_Pos)  |
                (((Timing->RCDDelay) - 1U)             << FMC_SDTR1_TRCD_Pos)));
  }
  else /* FMC_Bank2_SDRAM */
  {
    MODIFY_REG(Device->SDTR[FMC_SDRAM_BANK1],
 800609e:	68fb      	ldr	r3, [r7, #12]
 80060a0:	689b      	ldr	r3, [r3, #8]
 80060a2:	f423 0370 	bic.w	r3, r3, #15728640	; 0xf00000
 80060a6:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 80060aa:	68ba      	ldr	r2, [r7, #8]
 80060ac:	68d2      	ldr	r2, [r2, #12]
 80060ae:	3a01      	subs	r2, #1
 80060b0:	0311      	lsls	r1, r2, #12
 80060b2:	68ba      	ldr	r2, [r7, #8]
 80060b4:	6952      	ldr	r2, [r2, #20]
 80060b6:	3a01      	subs	r2, #1
 80060b8:	0512      	lsls	r2, r2, #20
 80060ba:	430a      	orrs	r2, r1
 80060bc:	431a      	orrs	r2, r3
 80060be:	68fb      	ldr	r3, [r7, #12]
 80060c0:	609a      	str	r2, [r3, #8]
               FMC_SDTR1_TRC |
               FMC_SDTR1_TRP,
               (((Timing->RowCycleDelay) - 1U)         << FMC_SDTR1_TRC_Pos)  |
               (((Timing->RPDelay) - 1U)               << FMC_SDTR1_TRP_Pos));

    MODIFY_REG(Device->SDTR[FMC_SDRAM_BANK2],
 80060c2:	68fb      	ldr	r3, [r7, #12]
 80060c4:	68db      	ldr	r3, [r3, #12]
 80060c6:	f003 4270 	and.w	r2, r3, #4026531840	; 0xf0000000
 80060ca:	68bb      	ldr	r3, [r7, #8]
 80060cc:	681b      	ldr	r3, [r3, #0]
 80060ce:	1e59      	subs	r1, r3, #1
 80060d0:	68bb      	ldr	r3, [r7, #8]
 80060d2:	685b      	ldr	r3, [r3, #4]
 80060d4:	3b01      	subs	r3, #1
 80060d6:	011b      	lsls	r3, r3, #4
 80060d8:	4319      	orrs	r1, r3
 80060da:	68bb      	ldr	r3, [r7, #8]
 80060dc:	689b      	ldr	r3, [r3, #8]
 80060de:	3b01      	subs	r3, #1
 80060e0:	021b      	lsls	r3, r3, #8
 80060e2:	4319      	orrs	r1, r3
 80060e4:	68bb      	ldr	r3, [r7, #8]
 80060e6:	691b      	ldr	r3, [r3, #16]
 80060e8:	3b01      	subs	r3, #1
 80060ea:	041b      	lsls	r3, r3, #16
 80060ec:	4319      	orrs	r1, r3
 80060ee:	68bb      	ldr	r3, [r7, #8]
 80060f0:	699b      	ldr	r3, [r3, #24]
 80060f2:	3b01      	subs	r3, #1
 80060f4:	061b      	lsls	r3, r3, #24
 80060f6:	430b      	orrs	r3, r1
 80060f8:	431a      	orrs	r2, r3
 80060fa:	68fb      	ldr	r3, [r7, #12]
 80060fc:	60da      	str	r2, [r3, #12]
                (((Timing->SelfRefreshTime) - 1U)      << FMC_SDTR1_TRAS_Pos) |
                (((Timing->WriteRecoveryTime) - 1U)    << FMC_SDTR1_TWR_Pos)  |
                (((Timing->RCDDelay) - 1U)             << FMC_SDTR1_TRCD_Pos)));
  }

  return HAL_OK;
 80060fe:	2300      	movs	r3, #0
}
 8006100:	4618      	mov	r0, r3
 8006102:	3714      	adds	r7, #20
 8006104:	46bd      	mov	sp, r7
 8006106:	f85d 7b04 	ldr.w	r7, [sp], #4
 800610a:	4770      	bx	lr

0800610c <USB_EnableGlobalInt>:
  *         Enables the controller's Global Int in the AHB Config reg
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EnableGlobalInt(USB_OTG_GlobalTypeDef *USBx)
{
 800610c:	b480      	push	{r7}
 800610e:	b083      	sub	sp, #12
 8006110:	af00      	add	r7, sp, #0
 8006112:	6078      	str	r0, [r7, #4]
  USBx->GAHBCFG |= USB_OTG_GAHBCFG_GINT;
 8006114:	687b      	ldr	r3, [r7, #4]
 8006116:	689b      	ldr	r3, [r3, #8]
 8006118:	f043 0201 	orr.w	r2, r3, #1
 800611c:	687b      	ldr	r3, [r7, #4]
 800611e:	609a      	str	r2, [r3, #8]
  return HAL_OK;
 8006120:	2300      	movs	r3, #0
}
 8006122:	4618      	mov	r0, r3
 8006124:	370c      	adds	r7, #12
 8006126:	46bd      	mov	sp, r7
 8006128:	f85d 7b04 	ldr.w	r7, [sp], #4
 800612c:	4770      	bx	lr

0800612e <USB_DisableGlobalInt>:
  *         Disable the controller's Global Int in the AHB Config reg
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DisableGlobalInt(USB_OTG_GlobalTypeDef *USBx)
{
 800612e:	b480      	push	{r7}
 8006130:	b083      	sub	sp, #12
 8006132:	af00      	add	r7, sp, #0
 8006134:	6078      	str	r0, [r7, #4]
  USBx->GAHBCFG &= ~USB_OTG_GAHBCFG_GINT;
 8006136:	687b      	ldr	r3, [r7, #4]
 8006138:	689b      	ldr	r3, [r3, #8]
 800613a:	f023 0201 	bic.w	r2, r3, #1
 800613e:	687b      	ldr	r3, [r7, #4]
 8006140:	609a      	str	r2, [r3, #8]
  return HAL_OK;
 8006142:	2300      	movs	r3, #0
}
 8006144:	4618      	mov	r0, r3
 8006146:	370c      	adds	r7, #12
 8006148:	46bd      	mov	sp, r7
 800614a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800614e:	4770      	bx	lr

08006150 <USB_FlushTxFifo>:
  *         This parameter can be a value from 1 to 15
            15 means Flush all Tx FIFOs
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushTxFifo(USB_OTG_GlobalTypeDef *USBx, uint32_t num)
{
 8006150:	b480      	push	{r7}
 8006152:	b085      	sub	sp, #20
 8006154:	af00      	add	r7, sp, #0
 8006156:	6078      	str	r0, [r7, #4]
 8006158:	6039      	str	r1, [r7, #0]
  __IO uint32_t count = 0U;
 800615a:	2300      	movs	r3, #0
 800615c:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 800615e:	68fb      	ldr	r3, [r7, #12]
 8006160:	3301      	adds	r3, #1
 8006162:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 8006164:	68fb      	ldr	r3, [r7, #12]
 8006166:	4a13      	ldr	r2, [pc, #76]	; (80061b4 <USB_FlushTxFifo+0x64>)
 8006168:	4293      	cmp	r3, r2
 800616a:	d901      	bls.n	8006170 <USB_FlushTxFifo+0x20>
    {
      return HAL_TIMEOUT;
 800616c:	2303      	movs	r3, #3
 800616e:	e01b      	b.n	80061a8 <USB_FlushTxFifo+0x58>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 8006170:	687b      	ldr	r3, [r7, #4]
 8006172:	691b      	ldr	r3, [r3, #16]
 8006174:	2b00      	cmp	r3, #0
 8006176:	daf2      	bge.n	800615e <USB_FlushTxFifo+0xe>

  /* Flush TX Fifo */
  count = 0U;
 8006178:	2300      	movs	r3, #0
 800617a:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL = (USB_OTG_GRSTCTL_TXFFLSH | (num << 6));
 800617c:	683b      	ldr	r3, [r7, #0]
 800617e:	019b      	lsls	r3, r3, #6
 8006180:	f043 0220 	orr.w	r2, r3, #32
 8006184:	687b      	ldr	r3, [r7, #4]
 8006186:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 8006188:	68fb      	ldr	r3, [r7, #12]
 800618a:	3301      	adds	r3, #1
 800618c:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 800618e:	68fb      	ldr	r3, [r7, #12]
 8006190:	4a08      	ldr	r2, [pc, #32]	; (80061b4 <USB_FlushTxFifo+0x64>)
 8006192:	4293      	cmp	r3, r2
 8006194:	d901      	bls.n	800619a <USB_FlushTxFifo+0x4a>
    {
      return HAL_TIMEOUT;
 8006196:	2303      	movs	r3, #3
 8006198:	e006      	b.n	80061a8 <USB_FlushTxFifo+0x58>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_TXFFLSH) == USB_OTG_GRSTCTL_TXFFLSH);
 800619a:	687b      	ldr	r3, [r7, #4]
 800619c:	691b      	ldr	r3, [r3, #16]
 800619e:	f003 0320 	and.w	r3, r3, #32
 80061a2:	2b20      	cmp	r3, #32
 80061a4:	d0f0      	beq.n	8006188 <USB_FlushTxFifo+0x38>

  return HAL_OK;
 80061a6:	2300      	movs	r3, #0
}
 80061a8:	4618      	mov	r0, r3
 80061aa:	3714      	adds	r7, #20
 80061ac:	46bd      	mov	sp, r7
 80061ae:	f85d 7b04 	ldr.w	r7, [sp], #4
 80061b2:	4770      	bx	lr
 80061b4:	00030d40 	.word	0x00030d40

080061b8 <USB_FlushRxFifo>:
  * @brief  USB_FlushRxFifo  Flush Rx FIFO
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushRxFifo(USB_OTG_GlobalTypeDef *USBx)
{
 80061b8:	b480      	push	{r7}
 80061ba:	b085      	sub	sp, #20
 80061bc:	af00      	add	r7, sp, #0
 80061be:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 80061c0:	2300      	movs	r3, #0
 80061c2:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 80061c4:	68fb      	ldr	r3, [r7, #12]
 80061c6:	3301      	adds	r3, #1
 80061c8:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 80061ca:	68fb      	ldr	r3, [r7, #12]
 80061cc:	4a11      	ldr	r2, [pc, #68]	; (8006214 <USB_FlushRxFifo+0x5c>)
 80061ce:	4293      	cmp	r3, r2
 80061d0:	d901      	bls.n	80061d6 <USB_FlushRxFifo+0x1e>
    {
      return HAL_TIMEOUT;
 80061d2:	2303      	movs	r3, #3
 80061d4:	e018      	b.n	8006208 <USB_FlushRxFifo+0x50>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 80061d6:	687b      	ldr	r3, [r7, #4]
 80061d8:	691b      	ldr	r3, [r3, #16]
 80061da:	2b00      	cmp	r3, #0
 80061dc:	daf2      	bge.n	80061c4 <USB_FlushRxFifo+0xc>

  /* Flush RX Fifo */
  count = 0U;
 80061de:	2300      	movs	r3, #0
 80061e0:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL = USB_OTG_GRSTCTL_RXFFLSH;
 80061e2:	687b      	ldr	r3, [r7, #4]
 80061e4:	2210      	movs	r2, #16
 80061e6:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 80061e8:	68fb      	ldr	r3, [r7, #12]
 80061ea:	3301      	adds	r3, #1
 80061ec:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 80061ee:	68fb      	ldr	r3, [r7, #12]
 80061f0:	4a08      	ldr	r2, [pc, #32]	; (8006214 <USB_FlushRxFifo+0x5c>)
 80061f2:	4293      	cmp	r3, r2
 80061f4:	d901      	bls.n	80061fa <USB_FlushRxFifo+0x42>
    {
      return HAL_TIMEOUT;
 80061f6:	2303      	movs	r3, #3
 80061f8:	e006      	b.n	8006208 <USB_FlushRxFifo+0x50>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_RXFFLSH) == USB_OTG_GRSTCTL_RXFFLSH);
 80061fa:	687b      	ldr	r3, [r7, #4]
 80061fc:	691b      	ldr	r3, [r3, #16]
 80061fe:	f003 0310 	and.w	r3, r3, #16
 8006202:	2b10      	cmp	r3, #16
 8006204:	d0f0      	beq.n	80061e8 <USB_FlushRxFifo+0x30>

  return HAL_OK;
 8006206:	2300      	movs	r3, #0
}
 8006208:	4618      	mov	r0, r3
 800620a:	3714      	adds	r7, #20
 800620c:	46bd      	mov	sp, r7
 800620e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006212:	4770      	bx	lr
 8006214:	00030d40 	.word	0x00030d40

08006218 <USB_ReadPacket>:
  * @param  dest  source pointer
  * @param  len  Number of bytes to read
  * @retval pointer to destination buffer
  */
void *USB_ReadPacket(USB_OTG_GlobalTypeDef *USBx, uint8_t *dest, uint16_t len)
{
 8006218:	b480      	push	{r7}
 800621a:	b08b      	sub	sp, #44	; 0x2c
 800621c:	af00      	add	r7, sp, #0
 800621e:	60f8      	str	r0, [r7, #12]
 8006220:	60b9      	str	r1, [r7, #8]
 8006222:	4613      	mov	r3, r2
 8006224:	80fb      	strh	r3, [r7, #6]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8006226:	68fb      	ldr	r3, [r7, #12]
 8006228:	61bb      	str	r3, [r7, #24]
  uint8_t *pDest = dest;
 800622a:	68bb      	ldr	r3, [r7, #8]
 800622c:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t pData;
  uint32_t i;
  uint32_t count32b = (uint32_t)len >> 2U;
 800622e:	88fb      	ldrh	r3, [r7, #6]
 8006230:	089b      	lsrs	r3, r3, #2
 8006232:	b29b      	uxth	r3, r3
 8006234:	617b      	str	r3, [r7, #20]
  uint16_t remaining_bytes = len % 4U;
 8006236:	88fb      	ldrh	r3, [r7, #6]
 8006238:	f003 0303 	and.w	r3, r3, #3
 800623c:	83fb      	strh	r3, [r7, #30]

  for (i = 0U; i < count32b; i++)
 800623e:	2300      	movs	r3, #0
 8006240:	623b      	str	r3, [r7, #32]
 8006242:	e014      	b.n	800626e <USB_ReadPacket+0x56>
  {
    __UNALIGNED_UINT32_WRITE(pDest, USBx_DFIFO(0U));
 8006244:	69bb      	ldr	r3, [r7, #24]
 8006246:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800624a:	681a      	ldr	r2, [r3, #0]
 800624c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800624e:	601a      	str	r2, [r3, #0]
    pDest++;
 8006250:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006252:	3301      	adds	r3, #1
 8006254:	627b      	str	r3, [r7, #36]	; 0x24
    pDest++;
 8006256:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006258:	3301      	adds	r3, #1
 800625a:	627b      	str	r3, [r7, #36]	; 0x24
    pDest++;
 800625c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800625e:	3301      	adds	r3, #1
 8006260:	627b      	str	r3, [r7, #36]	; 0x24
    pDest++;
 8006262:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006264:	3301      	adds	r3, #1
 8006266:	627b      	str	r3, [r7, #36]	; 0x24
  for (i = 0U; i < count32b; i++)
 8006268:	6a3b      	ldr	r3, [r7, #32]
 800626a:	3301      	adds	r3, #1
 800626c:	623b      	str	r3, [r7, #32]
 800626e:	6a3a      	ldr	r2, [r7, #32]
 8006270:	697b      	ldr	r3, [r7, #20]
 8006272:	429a      	cmp	r2, r3
 8006274:	d3e6      	bcc.n	8006244 <USB_ReadPacket+0x2c>
  }

  /* When Number of data is not word aligned, read the remaining byte */
  if (remaining_bytes != 0U)
 8006276:	8bfb      	ldrh	r3, [r7, #30]
 8006278:	2b00      	cmp	r3, #0
 800627a:	d01e      	beq.n	80062ba <USB_ReadPacket+0xa2>
  {
    i = 0U;
 800627c:	2300      	movs	r3, #0
 800627e:	623b      	str	r3, [r7, #32]
    __UNALIGNED_UINT32_WRITE(&pData, USBx_DFIFO(0U));
 8006280:	69bb      	ldr	r3, [r7, #24]
 8006282:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8006286:	461a      	mov	r2, r3
 8006288:	f107 0310 	add.w	r3, r7, #16
 800628c:	6812      	ldr	r2, [r2, #0]
 800628e:	601a      	str	r2, [r3, #0]

    do
    {
      *(uint8_t *)pDest = (uint8_t)(pData >> (8U * (uint8_t)(i)));
 8006290:	693a      	ldr	r2, [r7, #16]
 8006292:	6a3b      	ldr	r3, [r7, #32]
 8006294:	b2db      	uxtb	r3, r3
 8006296:	00db      	lsls	r3, r3, #3
 8006298:	fa22 f303 	lsr.w	r3, r2, r3
 800629c:	b2da      	uxtb	r2, r3
 800629e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80062a0:	701a      	strb	r2, [r3, #0]
      i++;
 80062a2:	6a3b      	ldr	r3, [r7, #32]
 80062a4:	3301      	adds	r3, #1
 80062a6:	623b      	str	r3, [r7, #32]
      pDest++;
 80062a8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80062aa:	3301      	adds	r3, #1
 80062ac:	627b      	str	r3, [r7, #36]	; 0x24
      remaining_bytes--;
 80062ae:	8bfb      	ldrh	r3, [r7, #30]
 80062b0:	3b01      	subs	r3, #1
 80062b2:	83fb      	strh	r3, [r7, #30]
    } while (remaining_bytes != 0U);
 80062b4:	8bfb      	ldrh	r3, [r7, #30]
 80062b6:	2b00      	cmp	r3, #0
 80062b8:	d1ea      	bne.n	8006290 <USB_ReadPacket+0x78>
  }

  return ((void *)pDest);
 80062ba:	6a7b      	ldr	r3, [r7, #36]	; 0x24
}
 80062bc:	4618      	mov	r0, r3
 80062be:	372c      	adds	r7, #44	; 0x2c
 80062c0:	46bd      	mov	sp, r7
 80062c2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80062c6:	4770      	bx	lr

080062c8 <USB_ReadInterrupts>:
  * @brief  USB_ReadInterrupts: return the global USB interrupt status
  * @param  USBx  Selected device
  * @retval HAL status
  */
uint32_t  USB_ReadInterrupts(USB_OTG_GlobalTypeDef *USBx)
{
 80062c8:	b480      	push	{r7}
 80062ca:	b085      	sub	sp, #20
 80062cc:	af00      	add	r7, sp, #0
 80062ce:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;

  tmpreg = USBx->GINTSTS;
 80062d0:	687b      	ldr	r3, [r7, #4]
 80062d2:	695b      	ldr	r3, [r3, #20]
 80062d4:	60fb      	str	r3, [r7, #12]
  tmpreg &= USBx->GINTMSK;
 80062d6:	687b      	ldr	r3, [r7, #4]
 80062d8:	699b      	ldr	r3, [r3, #24]
 80062da:	68fa      	ldr	r2, [r7, #12]
 80062dc:	4013      	ands	r3, r2
 80062de:	60fb      	str	r3, [r7, #12]

  return tmpreg;
 80062e0:	68fb      	ldr	r3, [r7, #12]
}
 80062e2:	4618      	mov	r0, r3
 80062e4:	3714      	adds	r7, #20
 80062e6:	46bd      	mov	sp, r7
 80062e8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80062ec:	4770      	bx	lr

080062ee <USB_GetMode>:
  *          This parameter can be one of these values:
  *           0 : Host
  *           1 : Device
  */
uint32_t USB_GetMode(USB_OTG_GlobalTypeDef *USBx)
{
 80062ee:	b480      	push	{r7}
 80062f0:	b083      	sub	sp, #12
 80062f2:	af00      	add	r7, sp, #0
 80062f4:	6078      	str	r0, [r7, #4]
  return ((USBx->GINTSTS) & 0x1U);
 80062f6:	687b      	ldr	r3, [r7, #4]
 80062f8:	695b      	ldr	r3, [r3, #20]
 80062fa:	f003 0301 	and.w	r3, r3, #1
}
 80062fe:	4618      	mov	r0, r3
 8006300:	370c      	adds	r7, #12
 8006302:	46bd      	mov	sp, r7
 8006304:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006308:	4770      	bx	lr

0800630a <USB_InitFSLSPClkSel>:
  *           HCFG_48_MHZ : Full Speed 48 MHz Clock
  *           HCFG_6_MHZ : Low Speed 6 MHz Clock
  * @retval HAL status
  */
HAL_StatusTypeDef USB_InitFSLSPClkSel(USB_OTG_GlobalTypeDef *USBx, uint8_t freq)
{
 800630a:	b480      	push	{r7}
 800630c:	b085      	sub	sp, #20
 800630e:	af00      	add	r7, sp, #0
 8006310:	6078      	str	r0, [r7, #4]
 8006312:	460b      	mov	r3, r1
 8006314:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8006316:	687b      	ldr	r3, [r7, #4]
 8006318:	60fb      	str	r3, [r7, #12]

  USBx_HOST->HCFG &= ~(USB_OTG_HCFG_FSLSPCS);
 800631a:	68fb      	ldr	r3, [r7, #12]
 800631c:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8006320:	681b      	ldr	r3, [r3, #0]
 8006322:	68fa      	ldr	r2, [r7, #12]
 8006324:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 8006328:	f023 0303 	bic.w	r3, r3, #3
 800632c:	6013      	str	r3, [r2, #0]
  USBx_HOST->HCFG |= (uint32_t)freq & USB_OTG_HCFG_FSLSPCS;
 800632e:	68fb      	ldr	r3, [r7, #12]
 8006330:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8006334:	681a      	ldr	r2, [r3, #0]
 8006336:	78fb      	ldrb	r3, [r7, #3]
 8006338:	f003 0303 	and.w	r3, r3, #3
 800633c:	68f9      	ldr	r1, [r7, #12]
 800633e:	f501 6180 	add.w	r1, r1, #1024	; 0x400
 8006342:	4313      	orrs	r3, r2
 8006344:	600b      	str	r3, [r1, #0]

  if (freq == HCFG_48_MHZ)
 8006346:	78fb      	ldrb	r3, [r7, #3]
 8006348:	2b01      	cmp	r3, #1
 800634a:	d107      	bne.n	800635c <USB_InitFSLSPClkSel+0x52>
  {
    USBx_HOST->HFIR = 48000U;
 800634c:	68fb      	ldr	r3, [r7, #12]
 800634e:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8006352:	461a      	mov	r2, r3
 8006354:	f64b 3380 	movw	r3, #48000	; 0xbb80
 8006358:	6053      	str	r3, [r2, #4]
 800635a:	e009      	b.n	8006370 <USB_InitFSLSPClkSel+0x66>
  }
  else if (freq == HCFG_6_MHZ)
 800635c:	78fb      	ldrb	r3, [r7, #3]
 800635e:	2b02      	cmp	r3, #2
 8006360:	d106      	bne.n	8006370 <USB_InitFSLSPClkSel+0x66>
  {
    USBx_HOST->HFIR = 6000U;
 8006362:	68fb      	ldr	r3, [r7, #12]
 8006364:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8006368:	461a      	mov	r2, r3
 800636a:	f241 7370 	movw	r3, #6000	; 0x1770
 800636e:	6053      	str	r3, [r2, #4]
  else
  {
    /* ... */
  }

  return HAL_OK;
 8006370:	2300      	movs	r3, #0
}
 8006372:	4618      	mov	r0, r3
 8006374:	3714      	adds	r7, #20
 8006376:	46bd      	mov	sp, r7
 8006378:	f85d 7b04 	ldr.w	r7, [sp], #4
 800637c:	4770      	bx	lr

0800637e <USB_HC_ReadInterrupt>:
  * @brief Read all host channel interrupts status
  * @param  USBx  Selected device
  * @retval HAL state
  */
uint32_t USB_HC_ReadInterrupt(USB_OTG_GlobalTypeDef *USBx)
{
 800637e:	b480      	push	{r7}
 8006380:	b085      	sub	sp, #20
 8006382:	af00      	add	r7, sp, #0
 8006384:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8006386:	687b      	ldr	r3, [r7, #4]
 8006388:	60fb      	str	r3, [r7, #12]

  return ((USBx_HOST->HAINT) & 0xFFFFU);
 800638a:	68fb      	ldr	r3, [r7, #12]
 800638c:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8006390:	695b      	ldr	r3, [r3, #20]
 8006392:	b29b      	uxth	r3, r3
}
 8006394:	4618      	mov	r0, r3
 8006396:	3714      	adds	r7, #20
 8006398:	46bd      	mov	sp, r7
 800639a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800639e:	4770      	bx	lr

080063a0 <USB_HC_Halt>:
  * @param  hc_num  Host Channel number
  *         This parameter can be a value from 1 to 15
  * @retval HAL state
  */
HAL_StatusTypeDef USB_HC_Halt(USB_OTG_GlobalTypeDef *USBx, uint8_t hc_num)
{
 80063a0:	b480      	push	{r7}
 80063a2:	b089      	sub	sp, #36	; 0x24
 80063a4:	af00      	add	r7, sp, #0
 80063a6:	6078      	str	r0, [r7, #4]
 80063a8:	460b      	mov	r3, r1
 80063aa:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80063ac:	687b      	ldr	r3, [r7, #4]
 80063ae:	61fb      	str	r3, [r7, #28]
  uint32_t hcnum = (uint32_t)hc_num;
 80063b0:	78fb      	ldrb	r3, [r7, #3]
 80063b2:	61bb      	str	r3, [r7, #24]
  __IO uint32_t count = 0U;
 80063b4:	2300      	movs	r3, #0
 80063b6:	60fb      	str	r3, [r7, #12]
  uint32_t HcEpType = (USBx_HC(hcnum)->HCCHAR & USB_OTG_HCCHAR_EPTYP) >> 18;
 80063b8:	69bb      	ldr	r3, [r7, #24]
 80063ba:	015a      	lsls	r2, r3, #5
 80063bc:	69fb      	ldr	r3, [r7, #28]
 80063be:	4413      	add	r3, r2
 80063c0:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80063c4:	681b      	ldr	r3, [r3, #0]
 80063c6:	0c9b      	lsrs	r3, r3, #18
 80063c8:	f003 0303 	and.w	r3, r3, #3
 80063cc:	617b      	str	r3, [r7, #20]
  uint32_t ChannelEna = (USBx_HC(hcnum)->HCCHAR & USB_OTG_HCCHAR_CHENA) >> 31;
 80063ce:	69bb      	ldr	r3, [r7, #24]
 80063d0:	015a      	lsls	r2, r3, #5
 80063d2:	69fb      	ldr	r3, [r7, #28]
 80063d4:	4413      	add	r3, r2
 80063d6:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80063da:	681b      	ldr	r3, [r3, #0]
 80063dc:	0fdb      	lsrs	r3, r3, #31
 80063de:	f003 0301 	and.w	r3, r3, #1
 80063e2:	613b      	str	r3, [r7, #16]

  if (((USBx->GAHBCFG & USB_OTG_GAHBCFG_DMAEN) == USB_OTG_GAHBCFG_DMAEN) &&
 80063e4:	687b      	ldr	r3, [r7, #4]
 80063e6:	689b      	ldr	r3, [r3, #8]
 80063e8:	f003 0320 	and.w	r3, r3, #32
 80063ec:	2b20      	cmp	r3, #32
 80063ee:	d104      	bne.n	80063fa <USB_HC_Halt+0x5a>
 80063f0:	693b      	ldr	r3, [r7, #16]
 80063f2:	2b00      	cmp	r3, #0
 80063f4:	d101      	bne.n	80063fa <USB_HC_Halt+0x5a>
      (ChannelEna == 0U))
  {
    return HAL_OK;
 80063f6:	2300      	movs	r3, #0
 80063f8:	e0c8      	b.n	800658c <USB_HC_Halt+0x1ec>
  }

  /* Check for space in the request queue to issue the halt. */
  if ((HcEpType == HCCHAR_CTRL) || (HcEpType == HCCHAR_BULK))
 80063fa:	697b      	ldr	r3, [r7, #20]
 80063fc:	2b00      	cmp	r3, #0
 80063fe:	d002      	beq.n	8006406 <USB_HC_Halt+0x66>
 8006400:	697b      	ldr	r3, [r7, #20]
 8006402:	2b02      	cmp	r3, #2
 8006404:	d163      	bne.n	80064ce <USB_HC_Halt+0x12e>
  {
    USBx_HC(hcnum)->HCCHAR |= USB_OTG_HCCHAR_CHDIS;
 8006406:	69bb      	ldr	r3, [r7, #24]
 8006408:	015a      	lsls	r2, r3, #5
 800640a:	69fb      	ldr	r3, [r7, #28]
 800640c:	4413      	add	r3, r2
 800640e:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8006412:	681b      	ldr	r3, [r3, #0]
 8006414:	69ba      	ldr	r2, [r7, #24]
 8006416:	0151      	lsls	r1, r2, #5
 8006418:	69fa      	ldr	r2, [r7, #28]
 800641a:	440a      	add	r2, r1
 800641c:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8006420:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 8006424:	6013      	str	r3, [r2, #0]

    if ((USBx->GAHBCFG & USB_OTG_GAHBCFG_DMAEN) == 0U)
 8006426:	687b      	ldr	r3, [r7, #4]
 8006428:	689b      	ldr	r3, [r3, #8]
 800642a:	f003 0320 	and.w	r3, r3, #32
 800642e:	2b00      	cmp	r3, #0
 8006430:	f040 80ab 	bne.w	800658a <USB_HC_Halt+0x1ea>
    {
      if ((USBx->HNPTXSTS & (0xFFU << 16)) == 0U)
 8006434:	687b      	ldr	r3, [r7, #4]
 8006436:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006438:	f403 037f 	and.w	r3, r3, #16711680	; 0xff0000
 800643c:	2b00      	cmp	r3, #0
 800643e:	d133      	bne.n	80064a8 <USB_HC_Halt+0x108>
      {
        USBx_HC(hcnum)->HCCHAR &= ~USB_OTG_HCCHAR_CHENA;
 8006440:	69bb      	ldr	r3, [r7, #24]
 8006442:	015a      	lsls	r2, r3, #5
 8006444:	69fb      	ldr	r3, [r7, #28]
 8006446:	4413      	add	r3, r2
 8006448:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800644c:	681b      	ldr	r3, [r3, #0]
 800644e:	69ba      	ldr	r2, [r7, #24]
 8006450:	0151      	lsls	r1, r2, #5
 8006452:	69fa      	ldr	r2, [r7, #28]
 8006454:	440a      	add	r2, r1
 8006456:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 800645a:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 800645e:	6013      	str	r3, [r2, #0]
        USBx_HC(hcnum)->HCCHAR |= USB_OTG_HCCHAR_CHENA;
 8006460:	69bb      	ldr	r3, [r7, #24]
 8006462:	015a      	lsls	r2, r3, #5
 8006464:	69fb      	ldr	r3, [r7, #28]
 8006466:	4413      	add	r3, r2
 8006468:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800646c:	681b      	ldr	r3, [r3, #0]
 800646e:	69ba      	ldr	r2, [r7, #24]
 8006470:	0151      	lsls	r1, r2, #5
 8006472:	69fa      	ldr	r2, [r7, #28]
 8006474:	440a      	add	r2, r1
 8006476:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 800647a:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 800647e:	6013      	str	r3, [r2, #0]
        do
        {
          count++;
 8006480:	68fb      	ldr	r3, [r7, #12]
 8006482:	3301      	adds	r3, #1
 8006484:	60fb      	str	r3, [r7, #12]

          if (count > 1000U)
 8006486:	68fb      	ldr	r3, [r7, #12]
 8006488:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 800648c:	d81d      	bhi.n	80064ca <USB_HC_Halt+0x12a>
          {
            break;
          }
        } while ((USBx_HC(hcnum)->HCCHAR & USB_OTG_HCCHAR_CHENA) == USB_OTG_HCCHAR_CHENA);
 800648e:	69bb      	ldr	r3, [r7, #24]
 8006490:	015a      	lsls	r2, r3, #5
 8006492:	69fb      	ldr	r3, [r7, #28]
 8006494:	4413      	add	r3, r2
 8006496:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800649a:	681b      	ldr	r3, [r3, #0]
 800649c:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 80064a0:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 80064a4:	d0ec      	beq.n	8006480 <USB_HC_Halt+0xe0>
    if ((USBx->GAHBCFG & USB_OTG_GAHBCFG_DMAEN) == 0U)
 80064a6:	e070      	b.n	800658a <USB_HC_Halt+0x1ea>
      }
      else
      {
        USBx_HC(hcnum)->HCCHAR |= USB_OTG_HCCHAR_CHENA;
 80064a8:	69bb      	ldr	r3, [r7, #24]
 80064aa:	015a      	lsls	r2, r3, #5
 80064ac:	69fb      	ldr	r3, [r7, #28]
 80064ae:	4413      	add	r3, r2
 80064b0:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80064b4:	681b      	ldr	r3, [r3, #0]
 80064b6:	69ba      	ldr	r2, [r7, #24]
 80064b8:	0151      	lsls	r1, r2, #5
 80064ba:	69fa      	ldr	r2, [r7, #28]
 80064bc:	440a      	add	r2, r1
 80064be:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 80064c2:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 80064c6:	6013      	str	r3, [r2, #0]
    if ((USBx->GAHBCFG & USB_OTG_GAHBCFG_DMAEN) == 0U)
 80064c8:	e05f      	b.n	800658a <USB_HC_Halt+0x1ea>
            break;
 80064ca:	bf00      	nop
    if ((USBx->GAHBCFG & USB_OTG_GAHBCFG_DMAEN) == 0U)
 80064cc:	e05d      	b.n	800658a <USB_HC_Halt+0x1ea>
      }
    }
  }
  else
  {
    USBx_HC(hcnum)->HCCHAR |= USB_OTG_HCCHAR_CHDIS;
 80064ce:	69bb      	ldr	r3, [r7, #24]
 80064d0:	015a      	lsls	r2, r3, #5
 80064d2:	69fb      	ldr	r3, [r7, #28]
 80064d4:	4413      	add	r3, r2
 80064d6:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80064da:	681b      	ldr	r3, [r3, #0]
 80064dc:	69ba      	ldr	r2, [r7, #24]
 80064de:	0151      	lsls	r1, r2, #5
 80064e0:	69fa      	ldr	r2, [r7, #28]
 80064e2:	440a      	add	r2, r1
 80064e4:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 80064e8:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 80064ec:	6013      	str	r3, [r2, #0]

    if ((USBx_HOST->HPTXSTS & (0xFFU << 16)) == 0U)
 80064ee:	69fb      	ldr	r3, [r7, #28]
 80064f0:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 80064f4:	691b      	ldr	r3, [r3, #16]
 80064f6:	f403 037f 	and.w	r3, r3, #16711680	; 0xff0000
 80064fa:	2b00      	cmp	r3, #0
 80064fc:	d133      	bne.n	8006566 <USB_HC_Halt+0x1c6>
    {
      USBx_HC(hcnum)->HCCHAR &= ~USB_OTG_HCCHAR_CHENA;
 80064fe:	69bb      	ldr	r3, [r7, #24]
 8006500:	015a      	lsls	r2, r3, #5
 8006502:	69fb      	ldr	r3, [r7, #28]
 8006504:	4413      	add	r3, r2
 8006506:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800650a:	681b      	ldr	r3, [r3, #0]
 800650c:	69ba      	ldr	r2, [r7, #24]
 800650e:	0151      	lsls	r1, r2, #5
 8006510:	69fa      	ldr	r2, [r7, #28]
 8006512:	440a      	add	r2, r1
 8006514:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8006518:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 800651c:	6013      	str	r3, [r2, #0]
      USBx_HC(hcnum)->HCCHAR |= USB_OTG_HCCHAR_CHENA;
 800651e:	69bb      	ldr	r3, [r7, #24]
 8006520:	015a      	lsls	r2, r3, #5
 8006522:	69fb      	ldr	r3, [r7, #28]
 8006524:	4413      	add	r3, r2
 8006526:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800652a:	681b      	ldr	r3, [r3, #0]
 800652c:	69ba      	ldr	r2, [r7, #24]
 800652e:	0151      	lsls	r1, r2, #5
 8006530:	69fa      	ldr	r2, [r7, #28]
 8006532:	440a      	add	r2, r1
 8006534:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8006538:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 800653c:	6013      	str	r3, [r2, #0]
      do
      {
        count++;
 800653e:	68fb      	ldr	r3, [r7, #12]
 8006540:	3301      	adds	r3, #1
 8006542:	60fb      	str	r3, [r7, #12]

        if (count > 1000U)
 8006544:	68fb      	ldr	r3, [r7, #12]
 8006546:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 800654a:	d81d      	bhi.n	8006588 <USB_HC_Halt+0x1e8>
        {
          break;
        }
      } while ((USBx_HC(hcnum)->HCCHAR & USB_OTG_HCCHAR_CHENA) == USB_OTG_HCCHAR_CHENA);
 800654c:	69bb      	ldr	r3, [r7, #24]
 800654e:	015a      	lsls	r2, r3, #5
 8006550:	69fb      	ldr	r3, [r7, #28]
 8006552:	4413      	add	r3, r2
 8006554:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8006558:	681b      	ldr	r3, [r3, #0]
 800655a:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 800655e:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8006562:	d0ec      	beq.n	800653e <USB_HC_Halt+0x19e>
 8006564:	e011      	b.n	800658a <USB_HC_Halt+0x1ea>
    }
    else
    {
      USBx_HC(hcnum)->HCCHAR |= USB_OTG_HCCHAR_CHENA;
 8006566:	69bb      	ldr	r3, [r7, #24]
 8006568:	015a      	lsls	r2, r3, #5
 800656a:	69fb      	ldr	r3, [r7, #28]
 800656c:	4413      	add	r3, r2
 800656e:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8006572:	681b      	ldr	r3, [r3, #0]
 8006574:	69ba      	ldr	r2, [r7, #24]
 8006576:	0151      	lsls	r1, r2, #5
 8006578:	69fa      	ldr	r2, [r7, #28]
 800657a:	440a      	add	r2, r1
 800657c:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8006580:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8006584:	6013      	str	r3, [r2, #0]
 8006586:	e000      	b.n	800658a <USB_HC_Halt+0x1ea>
          break;
 8006588:	bf00      	nop
    }
  }

  return HAL_OK;
 800658a:	2300      	movs	r3, #0
}
 800658c:	4618      	mov	r0, r3
 800658e:	3724      	adds	r7, #36	; 0x24
 8006590:	46bd      	mov	sp, r7
 8006592:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006596:	4770      	bx	lr

08006598 <USB_StopHost>:
  * @brief  Stop Host Core
  * @param  USBx  Selected device
  * @retval HAL state
  */
HAL_StatusTypeDef USB_StopHost(USB_OTG_GlobalTypeDef *USBx)
{
 8006598:	b580      	push	{r7, lr}
 800659a:	b088      	sub	sp, #32
 800659c:	af00      	add	r7, sp, #0
 800659e:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef ret = HAL_OK;
 80065a0:	2300      	movs	r3, #0
 80065a2:	77fb      	strb	r3, [r7, #31]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80065a4:	687b      	ldr	r3, [r7, #4]
 80065a6:	617b      	str	r3, [r7, #20]
  __IO uint32_t count = 0U;
 80065a8:	2300      	movs	r3, #0
 80065aa:	60fb      	str	r3, [r7, #12]
  uint32_t value;
  uint32_t i;

  (void)USB_DisableGlobalInt(USBx);
 80065ac:	6878      	ldr	r0, [r7, #4]
 80065ae:	f7ff fdbe 	bl	800612e <USB_DisableGlobalInt>

  /* Flush USB FIFO */
  if (USB_FlushTxFifo(USBx, 0x10U) != HAL_OK) /* all Tx FIFOs */
 80065b2:	2110      	movs	r1, #16
 80065b4:	6878      	ldr	r0, [r7, #4]
 80065b6:	f7ff fdcb 	bl	8006150 <USB_FlushTxFifo>
 80065ba:	4603      	mov	r3, r0
 80065bc:	2b00      	cmp	r3, #0
 80065be:	d001      	beq.n	80065c4 <USB_StopHost+0x2c>
  {
    ret = HAL_ERROR;
 80065c0:	2301      	movs	r3, #1
 80065c2:	77fb      	strb	r3, [r7, #31]
  }

  if (USB_FlushRxFifo(USBx) != HAL_OK)
 80065c4:	6878      	ldr	r0, [r7, #4]
 80065c6:	f7ff fdf7 	bl	80061b8 <USB_FlushRxFifo>
 80065ca:	4603      	mov	r3, r0
 80065cc:	2b00      	cmp	r3, #0
 80065ce:	d001      	beq.n	80065d4 <USB_StopHost+0x3c>
  {
    ret = HAL_ERROR;
 80065d0:	2301      	movs	r3, #1
 80065d2:	77fb      	strb	r3, [r7, #31]
  }

  /* Flush out any leftover queued requests. */
  for (i = 0U; i <= 15U; i++)
 80065d4:	2300      	movs	r3, #0
 80065d6:	61bb      	str	r3, [r7, #24]
 80065d8:	e01f      	b.n	800661a <USB_StopHost+0x82>
  {
    value = USBx_HC(i)->HCCHAR;
 80065da:	69bb      	ldr	r3, [r7, #24]
 80065dc:	015a      	lsls	r2, r3, #5
 80065de:	697b      	ldr	r3, [r7, #20]
 80065e0:	4413      	add	r3, r2
 80065e2:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80065e6:	681b      	ldr	r3, [r3, #0]
 80065e8:	613b      	str	r3, [r7, #16]
    value |=  USB_OTG_HCCHAR_CHDIS;
 80065ea:	693b      	ldr	r3, [r7, #16]
 80065ec:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 80065f0:	613b      	str	r3, [r7, #16]
    value &= ~USB_OTG_HCCHAR_CHENA;
 80065f2:	693b      	ldr	r3, [r7, #16]
 80065f4:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 80065f8:	613b      	str	r3, [r7, #16]
    value &= ~USB_OTG_HCCHAR_EPDIR;
 80065fa:	693b      	ldr	r3, [r7, #16]
 80065fc:	f423 4300 	bic.w	r3, r3, #32768	; 0x8000
 8006600:	613b      	str	r3, [r7, #16]
    USBx_HC(i)->HCCHAR = value;
 8006602:	69bb      	ldr	r3, [r7, #24]
 8006604:	015a      	lsls	r2, r3, #5
 8006606:	697b      	ldr	r3, [r7, #20]
 8006608:	4413      	add	r3, r2
 800660a:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800660e:	461a      	mov	r2, r3
 8006610:	693b      	ldr	r3, [r7, #16]
 8006612:	6013      	str	r3, [r2, #0]
  for (i = 0U; i <= 15U; i++)
 8006614:	69bb      	ldr	r3, [r7, #24]
 8006616:	3301      	adds	r3, #1
 8006618:	61bb      	str	r3, [r7, #24]
 800661a:	69bb      	ldr	r3, [r7, #24]
 800661c:	2b0f      	cmp	r3, #15
 800661e:	d9dc      	bls.n	80065da <USB_StopHost+0x42>
  }

  /* Halt all channels to put them into a known state. */
  for (i = 0U; i <= 15U; i++)
 8006620:	2300      	movs	r3, #0
 8006622:	61bb      	str	r3, [r7, #24]
 8006624:	e034      	b.n	8006690 <USB_StopHost+0xf8>
  {
    value = USBx_HC(i)->HCCHAR;
 8006626:	69bb      	ldr	r3, [r7, #24]
 8006628:	015a      	lsls	r2, r3, #5
 800662a:	697b      	ldr	r3, [r7, #20]
 800662c:	4413      	add	r3, r2
 800662e:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8006632:	681b      	ldr	r3, [r3, #0]
 8006634:	613b      	str	r3, [r7, #16]
    value |= USB_OTG_HCCHAR_CHDIS;
 8006636:	693b      	ldr	r3, [r7, #16]
 8006638:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 800663c:	613b      	str	r3, [r7, #16]
    value |= USB_OTG_HCCHAR_CHENA;
 800663e:	693b      	ldr	r3, [r7, #16]
 8006640:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8006644:	613b      	str	r3, [r7, #16]
    value &= ~USB_OTG_HCCHAR_EPDIR;
 8006646:	693b      	ldr	r3, [r7, #16]
 8006648:	f423 4300 	bic.w	r3, r3, #32768	; 0x8000
 800664c:	613b      	str	r3, [r7, #16]
    USBx_HC(i)->HCCHAR = value;
 800664e:	69bb      	ldr	r3, [r7, #24]
 8006650:	015a      	lsls	r2, r3, #5
 8006652:	697b      	ldr	r3, [r7, #20]
 8006654:	4413      	add	r3, r2
 8006656:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800665a:	461a      	mov	r2, r3
 800665c:	693b      	ldr	r3, [r7, #16]
 800665e:	6013      	str	r3, [r2, #0]

    do
    {
      count++;
 8006660:	68fb      	ldr	r3, [r7, #12]
 8006662:	3301      	adds	r3, #1
 8006664:	60fb      	str	r3, [r7, #12]

      if (count > 1000U)
 8006666:	68fb      	ldr	r3, [r7, #12]
 8006668:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 800666c:	d80c      	bhi.n	8006688 <USB_StopHost+0xf0>
      {
        break;
      }
    } while ((USBx_HC(i)->HCCHAR & USB_OTG_HCCHAR_CHENA) == USB_OTG_HCCHAR_CHENA);
 800666e:	69bb      	ldr	r3, [r7, #24]
 8006670:	015a      	lsls	r2, r3, #5
 8006672:	697b      	ldr	r3, [r7, #20]
 8006674:	4413      	add	r3, r2
 8006676:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800667a:	681b      	ldr	r3, [r3, #0]
 800667c:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8006680:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8006684:	d0ec      	beq.n	8006660 <USB_StopHost+0xc8>
 8006686:	e000      	b.n	800668a <USB_StopHost+0xf2>
        break;
 8006688:	bf00      	nop
  for (i = 0U; i <= 15U; i++)
 800668a:	69bb      	ldr	r3, [r7, #24]
 800668c:	3301      	adds	r3, #1
 800668e:	61bb      	str	r3, [r7, #24]
 8006690:	69bb      	ldr	r3, [r7, #24]
 8006692:	2b0f      	cmp	r3, #15
 8006694:	d9c7      	bls.n	8006626 <USB_StopHost+0x8e>
  }

  /* Clear any pending Host interrupts */
  USBx_HOST->HAINT = 0xFFFFFFFFU;
 8006696:	697b      	ldr	r3, [r7, #20]
 8006698:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 800669c:	461a      	mov	r2, r3
 800669e:	f04f 33ff 	mov.w	r3, #4294967295
 80066a2:	6153      	str	r3, [r2, #20]
  USBx->GINTSTS = 0xFFFFFFFFU;
 80066a4:	687b      	ldr	r3, [r7, #4]
 80066a6:	f04f 32ff 	mov.w	r2, #4294967295
 80066aa:	615a      	str	r2, [r3, #20]

  (void)USB_EnableGlobalInt(USBx);
 80066ac:	6878      	ldr	r0, [r7, #4]
 80066ae:	f7ff fd2d 	bl	800610c <USB_EnableGlobalInt>

  return ret;
 80066b2:	7ffb      	ldrb	r3, [r7, #31]
}
 80066b4:	4618      	mov	r0, r3
 80066b6:	3720      	adds	r7, #32
 80066b8:	46bd      	mov	sp, r7
 80066ba:	bd80      	pop	{r7, pc}

080066bc <USBH_LL_IncTimer>:
  *         Increment Host Timer tick
  * @param  phost: Host Handle
  * @retval None
  */
void  USBH_LL_IncTimer(USBH_HandleTypeDef *phost)
{
 80066bc:	b580      	push	{r7, lr}
 80066be:	b082      	sub	sp, #8
 80066c0:	af00      	add	r7, sp, #0
 80066c2:	6078      	str	r0, [r7, #4]
  phost->Timer++;
 80066c4:	687b      	ldr	r3, [r7, #4]
 80066c6:	f8d3 33c4 	ldr.w	r3, [r3, #964]	; 0x3c4
 80066ca:	1c5a      	adds	r2, r3, #1
 80066cc:	687b      	ldr	r3, [r7, #4]
 80066ce:	f8c3 23c4 	str.w	r2, [r3, #964]	; 0x3c4
  USBH_HandleSof(phost);
 80066d2:	6878      	ldr	r0, [r7, #4]
 80066d4:	f000 f804 	bl	80066e0 <USBH_HandleSof>
}
 80066d8:	bf00      	nop
 80066da:	3708      	adds	r7, #8
 80066dc:	46bd      	mov	sp, r7
 80066de:	bd80      	pop	{r7, pc}

080066e0 <USBH_HandleSof>:
  *         Call SOF process
  * @param  phost: Host Handle
  * @retval None
  */
static void  USBH_HandleSof(USBH_HandleTypeDef *phost)
{
 80066e0:	b580      	push	{r7, lr}
 80066e2:	b082      	sub	sp, #8
 80066e4:	af00      	add	r7, sp, #0
 80066e6:	6078      	str	r0, [r7, #4]
  if ((phost->gState == HOST_CLASS) && (phost->pActiveClass != NULL))
 80066e8:	687b      	ldr	r3, [r7, #4]
 80066ea:	781b      	ldrb	r3, [r3, #0]
 80066ec:	b2db      	uxtb	r3, r3
 80066ee:	2b0b      	cmp	r3, #11
 80066f0:	d10a      	bne.n	8006708 <USBH_HandleSof+0x28>
 80066f2:	687b      	ldr	r3, [r7, #4]
 80066f4:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 80066f8:	2b00      	cmp	r3, #0
 80066fa:	d005      	beq.n	8006708 <USBH_HandleSof+0x28>
  {
    phost->pActiveClass->SOFProcess(phost);
 80066fc:	687b      	ldr	r3, [r7, #4]
 80066fe:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 8006702:	699b      	ldr	r3, [r3, #24]
 8006704:	6878      	ldr	r0, [r7, #4]
 8006706:	4798      	blx	r3
  }
}
 8006708:	bf00      	nop
 800670a:	3708      	adds	r7, #8
 800670c:	46bd      	mov	sp, r7
 800670e:	bd80      	pop	{r7, pc}

08006710 <USBH_LL_PortEnabled>:
  *         Port Enabled
  * @param  phost: Host Handle
  * @retval None
  */
void USBH_LL_PortEnabled(USBH_HandleTypeDef *phost)
{
 8006710:	b580      	push	{r7, lr}
 8006712:	b082      	sub	sp, #8
 8006714:	af00      	add	r7, sp, #0
 8006716:	6078      	str	r0, [r7, #4]
  phost->device.PortEnabled = 1U;
 8006718:	687b      	ldr	r3, [r7, #4]
 800671a:	2201      	movs	r2, #1
 800671c:	f883 2323 	strb.w	r2, [r3, #803]	; 0x323

#if (USBH_USE_OS == 1U)
  phost->os_msg = (uint32_t)USBH_PORT_EVENT;
 8006720:	687b      	ldr	r3, [r7, #4]
 8006722:	2201      	movs	r2, #1
 8006724:	f8c3 23e0 	str.w	r2, [r3, #992]	; 0x3e0
#if (osCMSIS < 0x20000U)
  (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
#else
  (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
 8006728:	687b      	ldr	r3, [r7, #4]
 800672a:	f8d3 03d8 	ldr.w	r0, [r3, #984]	; 0x3d8
 800672e:	687b      	ldr	r3, [r7, #4]
 8006730:	f503 7178 	add.w	r1, r3, #992	; 0x3e0
 8006734:	2300      	movs	r3, #0
 8006736:	2200      	movs	r2, #0
 8006738:	f000 fb18 	bl	8006d6c <osMessageQueuePut>
#endif
#endif

  return;
 800673c:	bf00      	nop
}
 800673e:	3708      	adds	r7, #8
 8006740:	46bd      	mov	sp, r7
 8006742:	bd80      	pop	{r7, pc}

08006744 <USBH_LL_PortDisabled>:
  *         Port Disabled
  * @param  phost: Host Handle
  * @retval None
  */
void USBH_LL_PortDisabled(USBH_HandleTypeDef *phost)
{
 8006744:	b480      	push	{r7}
 8006746:	b083      	sub	sp, #12
 8006748:	af00      	add	r7, sp, #0
 800674a:	6078      	str	r0, [r7, #4]
  phost->device.PortEnabled = 0U;
 800674c:	687b      	ldr	r3, [r7, #4]
 800674e:	2200      	movs	r2, #0
 8006750:	f883 2323 	strb.w	r2, [r3, #803]	; 0x323

  return;
 8006754:	bf00      	nop
}
 8006756:	370c      	adds	r7, #12
 8006758:	46bd      	mov	sp, r7
 800675a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800675e:	4770      	bx	lr

08006760 <USBH_LL_Connect>:
  *         Handle USB Host connexion event
  * @param  phost: Host Handle
  * @retval USBH_Status
  */
USBH_StatusTypeDef  USBH_LL_Connect(USBH_HandleTypeDef *phost)
{
 8006760:	b580      	push	{r7, lr}
 8006762:	b082      	sub	sp, #8
 8006764:	af00      	add	r7, sp, #0
 8006766:	6078      	str	r0, [r7, #4]
  phost->device.is_connected = 1U;
 8006768:	687b      	ldr	r3, [r7, #4]
 800676a:	2201      	movs	r2, #1
 800676c:	f883 2320 	strb.w	r2, [r3, #800]	; 0x320
  phost->device.is_disconnected = 0U;
 8006770:	687b      	ldr	r3, [r7, #4]
 8006772:	2200      	movs	r2, #0
 8006774:	f883 2321 	strb.w	r2, [r3, #801]	; 0x321
  phost->device.is_ReEnumerated = 0U;
 8006778:	687b      	ldr	r3, [r7, #4]
 800677a:	2200      	movs	r2, #0
 800677c:	f883 2322 	strb.w	r2, [r3, #802]	; 0x322


#if (USBH_USE_OS == 1U)
  phost->os_msg = (uint32_t)USBH_PORT_EVENT;
 8006780:	687b      	ldr	r3, [r7, #4]
 8006782:	2201      	movs	r2, #1
 8006784:	f8c3 23e0 	str.w	r2, [r3, #992]	; 0x3e0
#if (osCMSIS < 0x20000U)
  (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
#else
  (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
 8006788:	687b      	ldr	r3, [r7, #4]
 800678a:	f8d3 03d8 	ldr.w	r0, [r3, #984]	; 0x3d8
 800678e:	687b      	ldr	r3, [r7, #4]
 8006790:	f503 7178 	add.w	r1, r3, #992	; 0x3e0
 8006794:	2300      	movs	r3, #0
 8006796:	2200      	movs	r2, #0
 8006798:	f000 fae8 	bl	8006d6c <osMessageQueuePut>
#endif
#endif

  return USBH_OK;
 800679c:	2300      	movs	r3, #0
}
 800679e:	4618      	mov	r0, r3
 80067a0:	3708      	adds	r7, #8
 80067a2:	46bd      	mov	sp, r7
 80067a4:	bd80      	pop	{r7, pc}

080067a6 <USBH_LL_Disconnect>:
  *         Handle USB Host disconnection event
  * @param  phost: Host Handle
  * @retval USBH_Status
  */
USBH_StatusTypeDef  USBH_LL_Disconnect(USBH_HandleTypeDef *phost)
{
 80067a6:	b580      	push	{r7, lr}
 80067a8:	b082      	sub	sp, #8
 80067aa:	af00      	add	r7, sp, #0
 80067ac:	6078      	str	r0, [r7, #4]
  /* update device connection states */
  phost->device.is_disconnected = 1U;
 80067ae:	687b      	ldr	r3, [r7, #4]
 80067b0:	2201      	movs	r2, #1
 80067b2:	f883 2321 	strb.w	r2, [r3, #801]	; 0x321
  phost->device.is_connected = 0U;
 80067b6:	687b      	ldr	r3, [r7, #4]
 80067b8:	2200      	movs	r2, #0
 80067ba:	f883 2320 	strb.w	r2, [r3, #800]	; 0x320
  phost->device.PortEnabled = 0U;
 80067be:	687b      	ldr	r3, [r7, #4]
 80067c0:	2200      	movs	r2, #0
 80067c2:	f883 2323 	strb.w	r2, [r3, #803]	; 0x323

  /* Stop Host */
  (void)USBH_LL_Stop(phost);
 80067c6:	6878      	ldr	r0, [r7, #4]
 80067c8:	f003 fcbc 	bl	800a144 <USBH_LL_Stop>

  /* FRee Control Pipes */
  (void)USBH_FreePipe(phost, phost->Control.pipe_in);
 80067cc:	687b      	ldr	r3, [r7, #4]
 80067ce:	791b      	ldrb	r3, [r3, #4]
 80067d0:	4619      	mov	r1, r3
 80067d2:	6878      	ldr	r0, [r7, #4]
 80067d4:	f000 f830 	bl	8006838 <USBH_FreePipe>
  (void)USBH_FreePipe(phost, phost->Control.pipe_out);
 80067d8:	687b      	ldr	r3, [r7, #4]
 80067da:	795b      	ldrb	r3, [r3, #5]
 80067dc:	4619      	mov	r1, r3
 80067de:	6878      	ldr	r0, [r7, #4]
 80067e0:	f000 f82a 	bl	8006838 <USBH_FreePipe>
#if (USBH_USE_OS == 1U)
  phost->os_msg = (uint32_t)USBH_PORT_EVENT;
 80067e4:	687b      	ldr	r3, [r7, #4]
 80067e6:	2201      	movs	r2, #1
 80067e8:	f8c3 23e0 	str.w	r2, [r3, #992]	; 0x3e0
#if (osCMSIS < 0x20000U)
  (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
#else
  (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
 80067ec:	687b      	ldr	r3, [r7, #4]
 80067ee:	f8d3 03d8 	ldr.w	r0, [r3, #984]	; 0x3d8
 80067f2:	687b      	ldr	r3, [r7, #4]
 80067f4:	f503 7178 	add.w	r1, r3, #992	; 0x3e0
 80067f8:	2300      	movs	r3, #0
 80067fa:	2200      	movs	r2, #0
 80067fc:	f000 fab6 	bl	8006d6c <osMessageQueuePut>
#endif
#endif

  return USBH_OK;
 8006800:	2300      	movs	r3, #0
}
 8006802:	4618      	mov	r0, r3
 8006804:	3708      	adds	r7, #8
 8006806:	46bd      	mov	sp, r7
 8006808:	bd80      	pop	{r7, pc}

0800680a <USBH_LL_NotifyURBChange>:
  *         Notify URB state Change
  * @param  phost: Host handle
  * @retval USBH Status
  */
USBH_StatusTypeDef  USBH_LL_NotifyURBChange(USBH_HandleTypeDef *phost)
{
 800680a:	b580      	push	{r7, lr}
 800680c:	b082      	sub	sp, #8
 800680e:	af00      	add	r7, sp, #0
 8006810:	6078      	str	r0, [r7, #4]
  phost->os_msg = (uint32_t)USBH_PORT_EVENT;
 8006812:	687b      	ldr	r3, [r7, #4]
 8006814:	2201      	movs	r2, #1
 8006816:	f8c3 23e0 	str.w	r2, [r3, #992]	; 0x3e0

#if (osCMSIS < 0x20000U)
  (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
#else
  (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
 800681a:	687b      	ldr	r3, [r7, #4]
 800681c:	f8d3 03d8 	ldr.w	r0, [r3, #984]	; 0x3d8
 8006820:	687b      	ldr	r3, [r7, #4]
 8006822:	f503 7178 	add.w	r1, r3, #992	; 0x3e0
 8006826:	2300      	movs	r3, #0
 8006828:	2200      	movs	r2, #0
 800682a:	f000 fa9f 	bl	8006d6c <osMessageQueuePut>
#endif

  return USBH_OK;
 800682e:	2300      	movs	r3, #0
}
 8006830:	4618      	mov	r0, r3
 8006832:	3708      	adds	r7, #8
 8006834:	46bd      	mov	sp, r7
 8006836:	bd80      	pop	{r7, pc}

08006838 <USBH_FreePipe>:
  * @param  phost: Host Handle
  * @param  idx: Pipe number to be freed
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_FreePipe(USBH_HandleTypeDef *phost, uint8_t idx)
{
 8006838:	b480      	push	{r7}
 800683a:	b083      	sub	sp, #12
 800683c:	af00      	add	r7, sp, #0
 800683e:	6078      	str	r0, [r7, #4]
 8006840:	460b      	mov	r3, r1
 8006842:	70fb      	strb	r3, [r7, #3]
  if (idx < USBH_MAX_PIPES_NBR)
 8006844:	78fb      	ldrb	r3, [r7, #3]
 8006846:	2b0f      	cmp	r3, #15
 8006848:	d80d      	bhi.n	8006866 <USBH_FreePipe+0x2e>
  {
    phost->Pipes[idx] &= 0x7FFFU;
 800684a:	78fb      	ldrb	r3, [r7, #3]
 800684c:	687a      	ldr	r2, [r7, #4]
 800684e:	33e0      	adds	r3, #224	; 0xe0
 8006850:	009b      	lsls	r3, r3, #2
 8006852:	4413      	add	r3, r2
 8006854:	685a      	ldr	r2, [r3, #4]
 8006856:	78fb      	ldrb	r3, [r7, #3]
 8006858:	f3c2 020e 	ubfx	r2, r2, #0, #15
 800685c:	6879      	ldr	r1, [r7, #4]
 800685e:	33e0      	adds	r3, #224	; 0xe0
 8006860:	009b      	lsls	r3, r3, #2
 8006862:	440b      	add	r3, r1
 8006864:	605a      	str	r2, [r3, #4]
  }

  return USBH_OK;
 8006866:	2300      	movs	r3, #0
}
 8006868:	4618      	mov	r0, r3
 800686a:	370c      	adds	r7, #12
 800686c:	46bd      	mov	sp, r7
 800686e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006872:	4770      	bx	lr

08006874 <__NVIC_SetPriority>:
{
 8006874:	b480      	push	{r7}
 8006876:	b083      	sub	sp, #12
 8006878:	af00      	add	r7, sp, #0
 800687a:	4603      	mov	r3, r0
 800687c:	6039      	str	r1, [r7, #0]
 800687e:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8006880:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8006884:	2b00      	cmp	r3, #0
 8006886:	db0a      	blt.n	800689e <__NVIC_SetPriority+0x2a>
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8006888:	683b      	ldr	r3, [r7, #0]
 800688a:	b2da      	uxtb	r2, r3
 800688c:	490c      	ldr	r1, [pc, #48]	; (80068c0 <__NVIC_SetPriority+0x4c>)
 800688e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8006892:	0112      	lsls	r2, r2, #4
 8006894:	b2d2      	uxtb	r2, r2
 8006896:	440b      	add	r3, r1
 8006898:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
}
 800689c:	e00a      	b.n	80068b4 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800689e:	683b      	ldr	r3, [r7, #0]
 80068a0:	b2da      	uxtb	r2, r3
 80068a2:	4908      	ldr	r1, [pc, #32]	; (80068c4 <__NVIC_SetPriority+0x50>)
 80068a4:	79fb      	ldrb	r3, [r7, #7]
 80068a6:	f003 030f 	and.w	r3, r3, #15
 80068aa:	3b04      	subs	r3, #4
 80068ac:	0112      	lsls	r2, r2, #4
 80068ae:	b2d2      	uxtb	r2, r2
 80068b0:	440b      	add	r3, r1
 80068b2:	761a      	strb	r2, [r3, #24]
}
 80068b4:	bf00      	nop
 80068b6:	370c      	adds	r7, #12
 80068b8:	46bd      	mov	sp, r7
 80068ba:	f85d 7b04 	ldr.w	r7, [sp], #4
 80068be:	4770      	bx	lr
 80068c0:	e000e100 	.word	0xe000e100
 80068c4:	e000ed00 	.word	0xe000ed00

080068c8 <SysTick_Handler>:

/*
  SysTick handler implementation that also clears overflow flag.
*/
#if (USE_CUSTOM_SYSTICK_HANDLER_IMPLEMENTATION == 0)
void SysTick_Handler (void) {
 80068c8:	b580      	push	{r7, lr}
 80068ca:	af00      	add	r7, sp, #0
  /* Clear overflow flag */
  SysTick->CTRL;
 80068cc:	4b05      	ldr	r3, [pc, #20]	; (80068e4 <SysTick_Handler+0x1c>)
 80068ce:	681b      	ldr	r3, [r3, #0]

  if (xTaskGetSchedulerState() != taskSCHEDULER_NOT_STARTED) {
 80068d0:	f002 fa78 	bl	8008dc4 <xTaskGetSchedulerState>
 80068d4:	4603      	mov	r3, r0
 80068d6:	2b01      	cmp	r3, #1
 80068d8:	d001      	beq.n	80068de <SysTick_Handler+0x16>
    /* Call tick handler */
    xPortSysTickHandler();
 80068da:	f003 f95d 	bl	8009b98 <xPortSysTickHandler>
  }
}
 80068de:	bf00      	nop
 80068e0:	bd80      	pop	{r7, pc}
 80068e2:	bf00      	nop
 80068e4:	e000e010 	.word	0xe000e010

080068e8 <SVC_Setup>:
#endif /* SysTick */

/*
  Setup SVC to reset value.
*/
__STATIC_INLINE void SVC_Setup (void) {
 80068e8:	b580      	push	{r7, lr}
 80068ea:	af00      	add	r7, sp, #0
#if (__ARM_ARCH_7A__ == 0U)
  /* Service Call interrupt might be configured before kernel start     */
  /* and when its priority is lower or equal to BASEPRI, svc intruction */
  /* causes a Hard Fault.                                               */
  NVIC_SetPriority (SVCall_IRQ_NBR, 0U);
 80068ec:	2100      	movs	r1, #0
 80068ee:	f06f 0004 	mvn.w	r0, #4
 80068f2:	f7ff ffbf 	bl	8006874 <__NVIC_SetPriority>
#endif
}
 80068f6:	bf00      	nop
 80068f8:	bd80      	pop	{r7, pc}
	...

080068fc <osKernelInitialize>:
static uint32_t OS_Tick_GetOverflow (void);
/* Get OS Tick interval */
static uint32_t OS_Tick_GetInterval (void);
/*---------------------------------------------------------------------------*/

osStatus_t osKernelInitialize (void) {
 80068fc:	b480      	push	{r7}
 80068fe:	b083      	sub	sp, #12
 8006900:	af00      	add	r7, sp, #0
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8006902:	f3ef 8305 	mrs	r3, IPSR
 8006906:	603b      	str	r3, [r7, #0]
  return(result);
 8006908:	683b      	ldr	r3, [r7, #0]
  osStatus_t stat;

  if (IS_IRQ()) {
 800690a:	2b00      	cmp	r3, #0
 800690c:	d003      	beq.n	8006916 <osKernelInitialize+0x1a>
    stat = osErrorISR;
 800690e:	f06f 0305 	mvn.w	r3, #5
 8006912:	607b      	str	r3, [r7, #4]
 8006914:	e00c      	b.n	8006930 <osKernelInitialize+0x34>
  }
  else {
    if (KernelState == osKernelInactive) {
 8006916:	4b0a      	ldr	r3, [pc, #40]	; (8006940 <osKernelInitialize+0x44>)
 8006918:	681b      	ldr	r3, [r3, #0]
 800691a:	2b00      	cmp	r3, #0
 800691c:	d105      	bne.n	800692a <osKernelInitialize+0x2e>
        EvrFreeRTOSSetup(0U);
      #endif
      #if defined(USE_FreeRTOS_HEAP_5) && (HEAP_5_REGION_SETUP == 1)
        vPortDefineHeapRegions (configHEAP_5_REGIONS);
      #endif
      KernelState = osKernelReady;
 800691e:	4b08      	ldr	r3, [pc, #32]	; (8006940 <osKernelInitialize+0x44>)
 8006920:	2201      	movs	r2, #1
 8006922:	601a      	str	r2, [r3, #0]
      stat = osOK;
 8006924:	2300      	movs	r3, #0
 8006926:	607b      	str	r3, [r7, #4]
 8006928:	e002      	b.n	8006930 <osKernelInitialize+0x34>
    } else {
      stat = osError;
 800692a:	f04f 33ff 	mov.w	r3, #4294967295
 800692e:	607b      	str	r3, [r7, #4]
    }
  }

  return (stat);
 8006930:	687b      	ldr	r3, [r7, #4]
}
 8006932:	4618      	mov	r0, r3
 8006934:	370c      	adds	r7, #12
 8006936:	46bd      	mov	sp, r7
 8006938:	f85d 7b04 	ldr.w	r7, [sp], #4
 800693c:	4770      	bx	lr
 800693e:	bf00      	nop
 8006940:	20000374 	.word	0x20000374

08006944 <osKernelStart>:
  }

  return (state);
}

osStatus_t osKernelStart (void) {
 8006944:	b580      	push	{r7, lr}
 8006946:	b082      	sub	sp, #8
 8006948:	af00      	add	r7, sp, #0
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 800694a:	f3ef 8305 	mrs	r3, IPSR
 800694e:	603b      	str	r3, [r7, #0]
  return(result);
 8006950:	683b      	ldr	r3, [r7, #0]
  osStatus_t stat;

  if (IS_IRQ()) {
 8006952:	2b00      	cmp	r3, #0
 8006954:	d003      	beq.n	800695e <osKernelStart+0x1a>
    stat = osErrorISR;
 8006956:	f06f 0305 	mvn.w	r3, #5
 800695a:	607b      	str	r3, [r7, #4]
 800695c:	e010      	b.n	8006980 <osKernelStart+0x3c>
  }
  else {
    if (KernelState == osKernelReady) {
 800695e:	4b0b      	ldr	r3, [pc, #44]	; (800698c <osKernelStart+0x48>)
 8006960:	681b      	ldr	r3, [r3, #0]
 8006962:	2b01      	cmp	r3, #1
 8006964:	d109      	bne.n	800697a <osKernelStart+0x36>
      /* Ensure SVC priority is at the reset value */
      SVC_Setup();
 8006966:	f7ff ffbf 	bl	80068e8 <SVC_Setup>
      /* Change state to enable IRQ masking check */
      KernelState = osKernelRunning;
 800696a:	4b08      	ldr	r3, [pc, #32]	; (800698c <osKernelStart+0x48>)
 800696c:	2202      	movs	r2, #2
 800696e:	601a      	str	r2, [r3, #0]
      /* Start the kernel scheduler */
      vTaskStartScheduler();
 8006970:	f001 fdba 	bl	80084e8 <vTaskStartScheduler>
      stat = osOK;
 8006974:	2300      	movs	r3, #0
 8006976:	607b      	str	r3, [r7, #4]
 8006978:	e002      	b.n	8006980 <osKernelStart+0x3c>
    } else {
      stat = osError;
 800697a:	f04f 33ff 	mov.w	r3, #4294967295
 800697e:	607b      	str	r3, [r7, #4]
    }
  }

  return (stat);
 8006980:	687b      	ldr	r3, [r7, #4]
}
 8006982:	4618      	mov	r0, r3
 8006984:	3708      	adds	r7, #8
 8006986:	46bd      	mov	sp, r7
 8006988:	bd80      	pop	{r7, pc}
 800698a:	bf00      	nop
 800698c:	20000374 	.word	0x20000374

08006990 <osThreadNew>:
  return (configCPU_CLOCK_HZ);
}

/*---------------------------------------------------------------------------*/

osThreadId_t osThreadNew (osThreadFunc_t func, void *argument, const osThreadAttr_t *attr) {
 8006990:	b580      	push	{r7, lr}
 8006992:	b08e      	sub	sp, #56	; 0x38
 8006994:	af04      	add	r7, sp, #16
 8006996:	60f8      	str	r0, [r7, #12]
 8006998:	60b9      	str	r1, [r7, #8]
 800699a:	607a      	str	r2, [r7, #4]
  uint32_t stack;
  TaskHandle_t hTask;
  UBaseType_t prio;
  int32_t mem;

  hTask = NULL;
 800699c:	2300      	movs	r3, #0
 800699e:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 80069a0:	f3ef 8305 	mrs	r3, IPSR
 80069a4:	617b      	str	r3, [r7, #20]
  return(result);
 80069a6:	697b      	ldr	r3, [r7, #20]

  if (!IS_IRQ() && (func != NULL)) {
 80069a8:	2b00      	cmp	r3, #0
 80069aa:	d17e      	bne.n	8006aaa <osThreadNew+0x11a>
 80069ac:	68fb      	ldr	r3, [r7, #12]
 80069ae:	2b00      	cmp	r3, #0
 80069b0:	d07b      	beq.n	8006aaa <osThreadNew+0x11a>
    stack = configMINIMAL_STACK_SIZE;
 80069b2:	2380      	movs	r3, #128	; 0x80
 80069b4:	623b      	str	r3, [r7, #32]
    prio  = (UBaseType_t)osPriorityNormal;
 80069b6:	2318      	movs	r3, #24
 80069b8:	61fb      	str	r3, [r7, #28]

    name = NULL;
 80069ba:	2300      	movs	r3, #0
 80069bc:	627b      	str	r3, [r7, #36]	; 0x24
    mem  = -1;
 80069be:	f04f 33ff 	mov.w	r3, #4294967295
 80069c2:	61bb      	str	r3, [r7, #24]

    if (attr != NULL) {
 80069c4:	687b      	ldr	r3, [r7, #4]
 80069c6:	2b00      	cmp	r3, #0
 80069c8:	d045      	beq.n	8006a56 <osThreadNew+0xc6>
      if (attr->name != NULL) {
 80069ca:	687b      	ldr	r3, [r7, #4]
 80069cc:	681b      	ldr	r3, [r3, #0]
 80069ce:	2b00      	cmp	r3, #0
 80069d0:	d002      	beq.n	80069d8 <osThreadNew+0x48>
        name = attr->name;
 80069d2:	687b      	ldr	r3, [r7, #4]
 80069d4:	681b      	ldr	r3, [r3, #0]
 80069d6:	627b      	str	r3, [r7, #36]	; 0x24
      }
      if (attr->priority != osPriorityNone) {
 80069d8:	687b      	ldr	r3, [r7, #4]
 80069da:	699b      	ldr	r3, [r3, #24]
 80069dc:	2b00      	cmp	r3, #0
 80069de:	d002      	beq.n	80069e6 <osThreadNew+0x56>
        prio = (UBaseType_t)attr->priority;
 80069e0:	687b      	ldr	r3, [r7, #4]
 80069e2:	699b      	ldr	r3, [r3, #24]
 80069e4:	61fb      	str	r3, [r7, #28]
      }

      if ((prio < osPriorityIdle) || (prio > osPriorityISR) || ((attr->attr_bits & osThreadJoinable) == osThreadJoinable)) {
 80069e6:	69fb      	ldr	r3, [r7, #28]
 80069e8:	2b00      	cmp	r3, #0
 80069ea:	d008      	beq.n	80069fe <osThreadNew+0x6e>
 80069ec:	69fb      	ldr	r3, [r7, #28]
 80069ee:	2b38      	cmp	r3, #56	; 0x38
 80069f0:	d805      	bhi.n	80069fe <osThreadNew+0x6e>
 80069f2:	687b      	ldr	r3, [r7, #4]
 80069f4:	685b      	ldr	r3, [r3, #4]
 80069f6:	f003 0301 	and.w	r3, r3, #1
 80069fa:	2b00      	cmp	r3, #0
 80069fc:	d001      	beq.n	8006a02 <osThreadNew+0x72>
        return (NULL);
 80069fe:	2300      	movs	r3, #0
 8006a00:	e054      	b.n	8006aac <osThreadNew+0x11c>
      }

      if (attr->stack_size > 0U) {
 8006a02:	687b      	ldr	r3, [r7, #4]
 8006a04:	695b      	ldr	r3, [r3, #20]
 8006a06:	2b00      	cmp	r3, #0
 8006a08:	d003      	beq.n	8006a12 <osThreadNew+0x82>
        /* In FreeRTOS stack is not in bytes, but in sizeof(StackType_t) which is 4 on ARM ports.       */
        /* Stack size should be therefore 4 byte aligned in order to avoid division caused side effects */
        stack = attr->stack_size / sizeof(StackType_t);
 8006a0a:	687b      	ldr	r3, [r7, #4]
 8006a0c:	695b      	ldr	r3, [r3, #20]
 8006a0e:	089b      	lsrs	r3, r3, #2
 8006a10:	623b      	str	r3, [r7, #32]
      }

      if ((attr->cb_mem    != NULL) && (attr->cb_size    >= sizeof(StaticTask_t)) &&
 8006a12:	687b      	ldr	r3, [r7, #4]
 8006a14:	689b      	ldr	r3, [r3, #8]
 8006a16:	2b00      	cmp	r3, #0
 8006a18:	d00e      	beq.n	8006a38 <osThreadNew+0xa8>
 8006a1a:	687b      	ldr	r3, [r7, #4]
 8006a1c:	68db      	ldr	r3, [r3, #12]
 8006a1e:	2b5f      	cmp	r3, #95	; 0x5f
 8006a20:	d90a      	bls.n	8006a38 <osThreadNew+0xa8>
          (attr->stack_mem != NULL) && (attr->stack_size >  0U)) {
 8006a22:	687b      	ldr	r3, [r7, #4]
 8006a24:	691b      	ldr	r3, [r3, #16]
      if ((attr->cb_mem    != NULL) && (attr->cb_size    >= sizeof(StaticTask_t)) &&
 8006a26:	2b00      	cmp	r3, #0
 8006a28:	d006      	beq.n	8006a38 <osThreadNew+0xa8>
          (attr->stack_mem != NULL) && (attr->stack_size >  0U)) {
 8006a2a:	687b      	ldr	r3, [r7, #4]
 8006a2c:	695b      	ldr	r3, [r3, #20]
 8006a2e:	2b00      	cmp	r3, #0
 8006a30:	d002      	beq.n	8006a38 <osThreadNew+0xa8>
        mem = 1;
 8006a32:	2301      	movs	r3, #1
 8006a34:	61bb      	str	r3, [r7, #24]
 8006a36:	e010      	b.n	8006a5a <osThreadNew+0xca>
      }
      else {
        if ((attr->cb_mem == NULL) && (attr->cb_size == 0U) && (attr->stack_mem == NULL)) {
 8006a38:	687b      	ldr	r3, [r7, #4]
 8006a3a:	689b      	ldr	r3, [r3, #8]
 8006a3c:	2b00      	cmp	r3, #0
 8006a3e:	d10c      	bne.n	8006a5a <osThreadNew+0xca>
 8006a40:	687b      	ldr	r3, [r7, #4]
 8006a42:	68db      	ldr	r3, [r3, #12]
 8006a44:	2b00      	cmp	r3, #0
 8006a46:	d108      	bne.n	8006a5a <osThreadNew+0xca>
 8006a48:	687b      	ldr	r3, [r7, #4]
 8006a4a:	691b      	ldr	r3, [r3, #16]
 8006a4c:	2b00      	cmp	r3, #0
 8006a4e:	d104      	bne.n	8006a5a <osThreadNew+0xca>
          mem = 0;
 8006a50:	2300      	movs	r3, #0
 8006a52:	61bb      	str	r3, [r7, #24]
 8006a54:	e001      	b.n	8006a5a <osThreadNew+0xca>
        }
      }
    }
    else {
      mem = 0;
 8006a56:	2300      	movs	r3, #0
 8006a58:	61bb      	str	r3, [r7, #24]
    }

    if (mem == 1) {
 8006a5a:	69bb      	ldr	r3, [r7, #24]
 8006a5c:	2b01      	cmp	r3, #1
 8006a5e:	d110      	bne.n	8006a82 <osThreadNew+0xf2>
      #if (configSUPPORT_STATIC_ALLOCATION == 1)
        hTask = xTaskCreateStatic ((TaskFunction_t)func, name, stack, argument, prio, (StackType_t  *)attr->stack_mem,
 8006a60:	687b      	ldr	r3, [r7, #4]
 8006a62:	691b      	ldr	r3, [r3, #16]
                                                                                      (StaticTask_t *)attr->cb_mem);
 8006a64:	687a      	ldr	r2, [r7, #4]
 8006a66:	6892      	ldr	r2, [r2, #8]
        hTask = xTaskCreateStatic ((TaskFunction_t)func, name, stack, argument, prio, (StackType_t  *)attr->stack_mem,
 8006a68:	9202      	str	r2, [sp, #8]
 8006a6a:	9301      	str	r3, [sp, #4]
 8006a6c:	69fb      	ldr	r3, [r7, #28]
 8006a6e:	9300      	str	r3, [sp, #0]
 8006a70:	68bb      	ldr	r3, [r7, #8]
 8006a72:	6a3a      	ldr	r2, [r7, #32]
 8006a74:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8006a76:	68f8      	ldr	r0, [r7, #12]
 8006a78:	f001 face 	bl	8008018 <xTaskCreateStatic>
 8006a7c:	4603      	mov	r3, r0
 8006a7e:	613b      	str	r3, [r7, #16]
 8006a80:	e013      	b.n	8006aaa <osThreadNew+0x11a>
      #endif
    }
    else {
      if (mem == 0) {
 8006a82:	69bb      	ldr	r3, [r7, #24]
 8006a84:	2b00      	cmp	r3, #0
 8006a86:	d110      	bne.n	8006aaa <osThreadNew+0x11a>
        #if (configSUPPORT_DYNAMIC_ALLOCATION == 1)
          if (xTaskCreate ((TaskFunction_t)func, name, (uint16_t)stack, argument, prio, &hTask) != pdPASS) {
 8006a88:	6a3b      	ldr	r3, [r7, #32]
 8006a8a:	b29a      	uxth	r2, r3
 8006a8c:	f107 0310 	add.w	r3, r7, #16
 8006a90:	9301      	str	r3, [sp, #4]
 8006a92:	69fb      	ldr	r3, [r7, #28]
 8006a94:	9300      	str	r3, [sp, #0]
 8006a96:	68bb      	ldr	r3, [r7, #8]
 8006a98:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8006a9a:	68f8      	ldr	r0, [r7, #12]
 8006a9c:	f001 fb19 	bl	80080d2 <xTaskCreate>
 8006aa0:	4603      	mov	r3, r0
 8006aa2:	2b01      	cmp	r3, #1
 8006aa4:	d001      	beq.n	8006aaa <osThreadNew+0x11a>
            hTask = NULL;
 8006aa6:	2300      	movs	r3, #0
 8006aa8:	613b      	str	r3, [r7, #16]
        #endif
      }
    }
  }

  return ((osThreadId_t)hTask);
 8006aaa:	693b      	ldr	r3, [r7, #16]
}
 8006aac:	4618      	mov	r0, r3
 8006aae:	3728      	adds	r7, #40	; 0x28
 8006ab0:	46bd      	mov	sp, r7
 8006ab2:	bd80      	pop	{r7, pc}

08006ab4 <osThreadResume>:
  }

  return (stat);
}

osStatus_t osThreadResume (osThreadId_t thread_id) {
 8006ab4:	b580      	push	{r7, lr}
 8006ab6:	b086      	sub	sp, #24
 8006ab8:	af00      	add	r7, sp, #0
 8006aba:	6078      	str	r0, [r7, #4]
  TaskHandle_t hTask = (TaskHandle_t)thread_id;
 8006abc:	687b      	ldr	r3, [r7, #4]
 8006abe:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8006ac0:	f3ef 8305 	mrs	r3, IPSR
 8006ac4:	60fb      	str	r3, [r7, #12]
  return(result);
 8006ac6:	68fb      	ldr	r3, [r7, #12]
  osStatus_t stat;

  if (IS_IRQ()) {
 8006ac8:	2b00      	cmp	r3, #0
 8006aca:	d003      	beq.n	8006ad4 <osThreadResume+0x20>
    stat = osErrorISR;
 8006acc:	f06f 0305 	mvn.w	r3, #5
 8006ad0:	617b      	str	r3, [r7, #20]
 8006ad2:	e00b      	b.n	8006aec <osThreadResume+0x38>
  }
  else if (hTask == NULL) {
 8006ad4:	693b      	ldr	r3, [r7, #16]
 8006ad6:	2b00      	cmp	r3, #0
 8006ad8:	d103      	bne.n	8006ae2 <osThreadResume+0x2e>
    stat = osErrorParameter;
 8006ada:	f06f 0303 	mvn.w	r3, #3
 8006ade:	617b      	str	r3, [r7, #20]
 8006ae0:	e004      	b.n	8006aec <osThreadResume+0x38>
  }
  else {
    stat = osOK;
 8006ae2:	2300      	movs	r3, #0
 8006ae4:	617b      	str	r3, [r7, #20]
    vTaskResume (hTask);
 8006ae6:	6938      	ldr	r0, [r7, #16]
 8006ae8:	f001 fca0 	bl	800842c <vTaskResume>
  }

  return (stat);
 8006aec:	697b      	ldr	r3, [r7, #20]
}
 8006aee:	4618      	mov	r0, r3
 8006af0:	3718      	adds	r7, #24
 8006af2:	46bd      	mov	sp, r7
 8006af4:	bd80      	pop	{r7, pc}

08006af6 <osDelay>:
  /* Return flags before clearing */
  return (rflags);
}
#endif /* (configUSE_OS2_THREAD_FLAGS == 1) */

osStatus_t osDelay (uint32_t ticks) {
 8006af6:	b580      	push	{r7, lr}
 8006af8:	b084      	sub	sp, #16
 8006afa:	af00      	add	r7, sp, #0
 8006afc:	6078      	str	r0, [r7, #4]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8006afe:	f3ef 8305 	mrs	r3, IPSR
 8006b02:	60bb      	str	r3, [r7, #8]
  return(result);
 8006b04:	68bb      	ldr	r3, [r7, #8]
  osStatus_t stat;

  if (IS_IRQ()) {
 8006b06:	2b00      	cmp	r3, #0
 8006b08:	d003      	beq.n	8006b12 <osDelay+0x1c>
    stat = osErrorISR;
 8006b0a:	f06f 0305 	mvn.w	r3, #5
 8006b0e:	60fb      	str	r3, [r7, #12]
 8006b10:	e007      	b.n	8006b22 <osDelay+0x2c>
  }
  else {
    stat = osOK;
 8006b12:	2300      	movs	r3, #0
 8006b14:	60fb      	str	r3, [r7, #12]

    if (ticks != 0U) {
 8006b16:	687b      	ldr	r3, [r7, #4]
 8006b18:	2b00      	cmp	r3, #0
 8006b1a:	d002      	beq.n	8006b22 <osDelay+0x2c>
      vTaskDelay(ticks);
 8006b1c:	6878      	ldr	r0, [r7, #4]
 8006b1e:	f001 fc1f 	bl	8008360 <vTaskDelay>
    }
  }

  return (stat);
 8006b22:	68fb      	ldr	r3, [r7, #12]
}
 8006b24:	4618      	mov	r0, r3
 8006b26:	3710      	adds	r7, #16
 8006b28:	46bd      	mov	sp, r7
 8006b2a:	bd80      	pop	{r7, pc}

08006b2c <osSemaphoreNew>:
}
#endif /* (configUSE_OS2_MUTEX == 1) */

/*---------------------------------------------------------------------------*/

osSemaphoreId_t osSemaphoreNew (uint32_t max_count, uint32_t initial_count, const osSemaphoreAttr_t *attr) {
 8006b2c:	b580      	push	{r7, lr}
 8006b2e:	b08a      	sub	sp, #40	; 0x28
 8006b30:	af02      	add	r7, sp, #8
 8006b32:	60f8      	str	r0, [r7, #12]
 8006b34:	60b9      	str	r1, [r7, #8]
 8006b36:	607a      	str	r2, [r7, #4]
  int32_t mem;
  #if (configQUEUE_REGISTRY_SIZE > 0)
  const char *name;
  #endif

  hSemaphore = NULL;
 8006b38:	2300      	movs	r3, #0
 8006b3a:	61fb      	str	r3, [r7, #28]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8006b3c:	f3ef 8305 	mrs	r3, IPSR
 8006b40:	613b      	str	r3, [r7, #16]
  return(result);
 8006b42:	693b      	ldr	r3, [r7, #16]

  if (!IS_IRQ() && (max_count > 0U) && (initial_count <= max_count)) {
 8006b44:	2b00      	cmp	r3, #0
 8006b46:	d175      	bne.n	8006c34 <osSemaphoreNew+0x108>
 8006b48:	68fb      	ldr	r3, [r7, #12]
 8006b4a:	2b00      	cmp	r3, #0
 8006b4c:	d072      	beq.n	8006c34 <osSemaphoreNew+0x108>
 8006b4e:	68ba      	ldr	r2, [r7, #8]
 8006b50:	68fb      	ldr	r3, [r7, #12]
 8006b52:	429a      	cmp	r2, r3
 8006b54:	d86e      	bhi.n	8006c34 <osSemaphoreNew+0x108>
    mem = -1;
 8006b56:	f04f 33ff 	mov.w	r3, #4294967295
 8006b5a:	61bb      	str	r3, [r7, #24]

    if (attr != NULL) {
 8006b5c:	687b      	ldr	r3, [r7, #4]
 8006b5e:	2b00      	cmp	r3, #0
 8006b60:	d015      	beq.n	8006b8e <osSemaphoreNew+0x62>
      if ((attr->cb_mem != NULL) && (attr->cb_size >= sizeof(StaticSemaphore_t))) {
 8006b62:	687b      	ldr	r3, [r7, #4]
 8006b64:	689b      	ldr	r3, [r3, #8]
 8006b66:	2b00      	cmp	r3, #0
 8006b68:	d006      	beq.n	8006b78 <osSemaphoreNew+0x4c>
 8006b6a:	687b      	ldr	r3, [r7, #4]
 8006b6c:	68db      	ldr	r3, [r3, #12]
 8006b6e:	2b4f      	cmp	r3, #79	; 0x4f
 8006b70:	d902      	bls.n	8006b78 <osSemaphoreNew+0x4c>
        mem = 1;
 8006b72:	2301      	movs	r3, #1
 8006b74:	61bb      	str	r3, [r7, #24]
 8006b76:	e00c      	b.n	8006b92 <osSemaphoreNew+0x66>
      }
      else {
        if ((attr->cb_mem == NULL) && (attr->cb_size == 0U)) {
 8006b78:	687b      	ldr	r3, [r7, #4]
 8006b7a:	689b      	ldr	r3, [r3, #8]
 8006b7c:	2b00      	cmp	r3, #0
 8006b7e:	d108      	bne.n	8006b92 <osSemaphoreNew+0x66>
 8006b80:	687b      	ldr	r3, [r7, #4]
 8006b82:	68db      	ldr	r3, [r3, #12]
 8006b84:	2b00      	cmp	r3, #0
 8006b86:	d104      	bne.n	8006b92 <osSemaphoreNew+0x66>
          mem = 0;
 8006b88:	2300      	movs	r3, #0
 8006b8a:	61bb      	str	r3, [r7, #24]
 8006b8c:	e001      	b.n	8006b92 <osSemaphoreNew+0x66>
        }
      }
    }
    else {
      mem = 0;
 8006b8e:	2300      	movs	r3, #0
 8006b90:	61bb      	str	r3, [r7, #24]
    }

    if (mem != -1) {
 8006b92:	69bb      	ldr	r3, [r7, #24]
 8006b94:	f1b3 3fff 	cmp.w	r3, #4294967295
 8006b98:	d04c      	beq.n	8006c34 <osSemaphoreNew+0x108>
      if (max_count == 1U) {
 8006b9a:	68fb      	ldr	r3, [r7, #12]
 8006b9c:	2b01      	cmp	r3, #1
 8006b9e:	d128      	bne.n	8006bf2 <osSemaphoreNew+0xc6>
        if (mem == 1) {
 8006ba0:	69bb      	ldr	r3, [r7, #24]
 8006ba2:	2b01      	cmp	r3, #1
 8006ba4:	d10a      	bne.n	8006bbc <osSemaphoreNew+0x90>
          #if (configSUPPORT_STATIC_ALLOCATION == 1)
            hSemaphore = xSemaphoreCreateBinaryStatic ((StaticSemaphore_t *)attr->cb_mem);
 8006ba6:	687b      	ldr	r3, [r7, #4]
 8006ba8:	689b      	ldr	r3, [r3, #8]
 8006baa:	2203      	movs	r2, #3
 8006bac:	9200      	str	r2, [sp, #0]
 8006bae:	2200      	movs	r2, #0
 8006bb0:	2100      	movs	r1, #0
 8006bb2:	2001      	movs	r0, #1
 8006bb4:	f000 fa8a 	bl	80070cc <xQueueGenericCreateStatic>
 8006bb8:	61f8      	str	r0, [r7, #28]
 8006bba:	e005      	b.n	8006bc8 <osSemaphoreNew+0x9c>
          #endif
        }
        else {
          #if (configSUPPORT_DYNAMIC_ALLOCATION == 1)
            hSemaphore = xSemaphoreCreateBinary();
 8006bbc:	2203      	movs	r2, #3
 8006bbe:	2100      	movs	r1, #0
 8006bc0:	2001      	movs	r0, #1
 8006bc2:	f000 fafb 	bl	80071bc <xQueueGenericCreate>
 8006bc6:	61f8      	str	r0, [r7, #28]
          #endif
        }

        if ((hSemaphore != NULL) && (initial_count != 0U)) {
 8006bc8:	69fb      	ldr	r3, [r7, #28]
 8006bca:	2b00      	cmp	r3, #0
 8006bcc:	d022      	beq.n	8006c14 <osSemaphoreNew+0xe8>
 8006bce:	68bb      	ldr	r3, [r7, #8]
 8006bd0:	2b00      	cmp	r3, #0
 8006bd2:	d01f      	beq.n	8006c14 <osSemaphoreNew+0xe8>
          if (xSemaphoreGive (hSemaphore) != pdPASS) {
 8006bd4:	2300      	movs	r3, #0
 8006bd6:	2200      	movs	r2, #0
 8006bd8:	2100      	movs	r1, #0
 8006bda:	69f8      	ldr	r0, [r7, #28]
 8006bdc:	f000 fbb6 	bl	800734c <xQueueGenericSend>
 8006be0:	4603      	mov	r3, r0
 8006be2:	2b01      	cmp	r3, #1
 8006be4:	d016      	beq.n	8006c14 <osSemaphoreNew+0xe8>
            vSemaphoreDelete (hSemaphore);
 8006be6:	69f8      	ldr	r0, [r7, #28]
 8006be8:	f001 f842 	bl	8007c70 <vQueueDelete>
            hSemaphore = NULL;
 8006bec:	2300      	movs	r3, #0
 8006bee:	61fb      	str	r3, [r7, #28]
 8006bf0:	e010      	b.n	8006c14 <osSemaphoreNew+0xe8>
          }
        }
      }
      else {
        if (mem == 1) {
 8006bf2:	69bb      	ldr	r3, [r7, #24]
 8006bf4:	2b01      	cmp	r3, #1
 8006bf6:	d108      	bne.n	8006c0a <osSemaphoreNew+0xde>
          #if (configSUPPORT_STATIC_ALLOCATION == 1)
            hSemaphore = xSemaphoreCreateCountingStatic (max_count, initial_count, (StaticSemaphore_t *)attr->cb_mem);
 8006bf8:	687b      	ldr	r3, [r7, #4]
 8006bfa:	689b      	ldr	r3, [r3, #8]
 8006bfc:	461a      	mov	r2, r3
 8006bfe:	68b9      	ldr	r1, [r7, #8]
 8006c00:	68f8      	ldr	r0, [r7, #12]
 8006c02:	f000 fb38 	bl	8007276 <xQueueCreateCountingSemaphoreStatic>
 8006c06:	61f8      	str	r0, [r7, #28]
 8006c08:	e004      	b.n	8006c14 <osSemaphoreNew+0xe8>
          #endif
        }
        else {
          #if (configSUPPORT_DYNAMIC_ALLOCATION == 1)
            hSemaphore = xSemaphoreCreateCounting (max_count, initial_count);
 8006c0a:	68b9      	ldr	r1, [r7, #8]
 8006c0c:	68f8      	ldr	r0, [r7, #12]
 8006c0e:	f000 fb69 	bl	80072e4 <xQueueCreateCountingSemaphore>
 8006c12:	61f8      	str	r0, [r7, #28]
          #endif
        }
      }
      
      #if (configQUEUE_REGISTRY_SIZE > 0)
      if (hSemaphore != NULL) {
 8006c14:	69fb      	ldr	r3, [r7, #28]
 8006c16:	2b00      	cmp	r3, #0
 8006c18:	d00c      	beq.n	8006c34 <osSemaphoreNew+0x108>
        if (attr != NULL) {
 8006c1a:	687b      	ldr	r3, [r7, #4]
 8006c1c:	2b00      	cmp	r3, #0
 8006c1e:	d003      	beq.n	8006c28 <osSemaphoreNew+0xfc>
          name = attr->name;
 8006c20:	687b      	ldr	r3, [r7, #4]
 8006c22:	681b      	ldr	r3, [r3, #0]
 8006c24:	617b      	str	r3, [r7, #20]
 8006c26:	e001      	b.n	8006c2c <osSemaphoreNew+0x100>
        } else {
          name = NULL;
 8006c28:	2300      	movs	r3, #0
 8006c2a:	617b      	str	r3, [r7, #20]
        }
        vQueueAddToRegistry (hSemaphore, name);
 8006c2c:	6979      	ldr	r1, [r7, #20]
 8006c2e:	69f8      	ldr	r0, [r7, #28]
 8006c30:	f001 f96a 	bl	8007f08 <vQueueAddToRegistry>
      }
      #endif
    }
  }

  return ((osSemaphoreId_t)hSemaphore);
 8006c34:	69fb      	ldr	r3, [r7, #28]
}
 8006c36:	4618      	mov	r0, r3
 8006c38:	3720      	adds	r7, #32
 8006c3a:	46bd      	mov	sp, r7
 8006c3c:	bd80      	pop	{r7, pc}
	...

08006c40 <osSemaphoreAcquire>:

osStatus_t osSemaphoreAcquire (osSemaphoreId_t semaphore_id, uint32_t timeout) {
 8006c40:	b580      	push	{r7, lr}
 8006c42:	b086      	sub	sp, #24
 8006c44:	af00      	add	r7, sp, #0
 8006c46:	6078      	str	r0, [r7, #4]
 8006c48:	6039      	str	r1, [r7, #0]
  SemaphoreHandle_t hSemaphore = (SemaphoreHandle_t)semaphore_id;
 8006c4a:	687b      	ldr	r3, [r7, #4]
 8006c4c:	613b      	str	r3, [r7, #16]
  osStatus_t stat;
  BaseType_t yield;

  stat = osOK;
 8006c4e:	2300      	movs	r3, #0
 8006c50:	617b      	str	r3, [r7, #20]

  if (hSemaphore == NULL) {
 8006c52:	693b      	ldr	r3, [r7, #16]
 8006c54:	2b00      	cmp	r3, #0
 8006c56:	d103      	bne.n	8006c60 <osSemaphoreAcquire+0x20>
    stat = osErrorParameter;
 8006c58:	f06f 0303 	mvn.w	r3, #3
 8006c5c:	617b      	str	r3, [r7, #20]
 8006c5e:	e039      	b.n	8006cd4 <osSemaphoreAcquire+0x94>
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8006c60:	f3ef 8305 	mrs	r3, IPSR
 8006c64:	60fb      	str	r3, [r7, #12]
  return(result);
 8006c66:	68fb      	ldr	r3, [r7, #12]
  }
  else if (IS_IRQ()) {
 8006c68:	2b00      	cmp	r3, #0
 8006c6a:	d022      	beq.n	8006cb2 <osSemaphoreAcquire+0x72>
    if (timeout != 0U) {
 8006c6c:	683b      	ldr	r3, [r7, #0]
 8006c6e:	2b00      	cmp	r3, #0
 8006c70:	d003      	beq.n	8006c7a <osSemaphoreAcquire+0x3a>
      stat = osErrorParameter;
 8006c72:	f06f 0303 	mvn.w	r3, #3
 8006c76:	617b      	str	r3, [r7, #20]
 8006c78:	e02c      	b.n	8006cd4 <osSemaphoreAcquire+0x94>
    }
    else {
      yield = pdFALSE;
 8006c7a:	2300      	movs	r3, #0
 8006c7c:	60bb      	str	r3, [r7, #8]

      if (xSemaphoreTakeFromISR (hSemaphore, &yield) != pdPASS) {
 8006c7e:	f107 0308 	add.w	r3, r7, #8
 8006c82:	461a      	mov	r2, r3
 8006c84:	2100      	movs	r1, #0
 8006c86:	6938      	ldr	r0, [r7, #16]
 8006c88:	f000 ff72 	bl	8007b70 <xQueueReceiveFromISR>
 8006c8c:	4603      	mov	r3, r0
 8006c8e:	2b01      	cmp	r3, #1
 8006c90:	d003      	beq.n	8006c9a <osSemaphoreAcquire+0x5a>
        stat = osErrorResource;
 8006c92:	f06f 0302 	mvn.w	r3, #2
 8006c96:	617b      	str	r3, [r7, #20]
 8006c98:	e01c      	b.n	8006cd4 <osSemaphoreAcquire+0x94>
      } else {
        portYIELD_FROM_ISR (yield);
 8006c9a:	68bb      	ldr	r3, [r7, #8]
 8006c9c:	2b00      	cmp	r3, #0
 8006c9e:	d019      	beq.n	8006cd4 <osSemaphoreAcquire+0x94>
 8006ca0:	4b0f      	ldr	r3, [pc, #60]	; (8006ce0 <osSemaphoreAcquire+0xa0>)
 8006ca2:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8006ca6:	601a      	str	r2, [r3, #0]
 8006ca8:	f3bf 8f4f 	dsb	sy
 8006cac:	f3bf 8f6f 	isb	sy
 8006cb0:	e010      	b.n	8006cd4 <osSemaphoreAcquire+0x94>
      }
    }
  }
  else {
    if (xSemaphoreTake (hSemaphore, (TickType_t)timeout) != pdPASS) {
 8006cb2:	6839      	ldr	r1, [r7, #0]
 8006cb4:	6938      	ldr	r0, [r7, #16]
 8006cb6:	f000 fe4f 	bl	8007958 <xQueueSemaphoreTake>
 8006cba:	4603      	mov	r3, r0
 8006cbc:	2b01      	cmp	r3, #1
 8006cbe:	d009      	beq.n	8006cd4 <osSemaphoreAcquire+0x94>
      if (timeout != 0U) {
 8006cc0:	683b      	ldr	r3, [r7, #0]
 8006cc2:	2b00      	cmp	r3, #0
 8006cc4:	d003      	beq.n	8006cce <osSemaphoreAcquire+0x8e>
        stat = osErrorTimeout;
 8006cc6:	f06f 0301 	mvn.w	r3, #1
 8006cca:	617b      	str	r3, [r7, #20]
 8006ccc:	e002      	b.n	8006cd4 <osSemaphoreAcquire+0x94>
      } else {
        stat = osErrorResource;
 8006cce:	f06f 0302 	mvn.w	r3, #2
 8006cd2:	617b      	str	r3, [r7, #20]
      }
    }
  }

  return (stat);
 8006cd4:	697b      	ldr	r3, [r7, #20]
}
 8006cd6:	4618      	mov	r0, r3
 8006cd8:	3718      	adds	r7, #24
 8006cda:	46bd      	mov	sp, r7
 8006cdc:	bd80      	pop	{r7, pc}
 8006cde:	bf00      	nop
 8006ce0:	e000ed04 	.word	0xe000ed04

08006ce4 <osSemaphoreRelease>:

osStatus_t osSemaphoreRelease (osSemaphoreId_t semaphore_id) {
 8006ce4:	b580      	push	{r7, lr}
 8006ce6:	b086      	sub	sp, #24
 8006ce8:	af00      	add	r7, sp, #0
 8006cea:	6078      	str	r0, [r7, #4]
  SemaphoreHandle_t hSemaphore = (SemaphoreHandle_t)semaphore_id;
 8006cec:	687b      	ldr	r3, [r7, #4]
 8006cee:	613b      	str	r3, [r7, #16]
  osStatus_t stat;
  BaseType_t yield;

  stat = osOK;
 8006cf0:	2300      	movs	r3, #0
 8006cf2:	617b      	str	r3, [r7, #20]

  if (hSemaphore == NULL) {
 8006cf4:	693b      	ldr	r3, [r7, #16]
 8006cf6:	2b00      	cmp	r3, #0
 8006cf8:	d103      	bne.n	8006d02 <osSemaphoreRelease+0x1e>
    stat = osErrorParameter;
 8006cfa:	f06f 0303 	mvn.w	r3, #3
 8006cfe:	617b      	str	r3, [r7, #20]
 8006d00:	e02c      	b.n	8006d5c <osSemaphoreRelease+0x78>
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8006d02:	f3ef 8305 	mrs	r3, IPSR
 8006d06:	60fb      	str	r3, [r7, #12]
  return(result);
 8006d08:	68fb      	ldr	r3, [r7, #12]
  }
  else if (IS_IRQ()) {
 8006d0a:	2b00      	cmp	r3, #0
 8006d0c:	d01a      	beq.n	8006d44 <osSemaphoreRelease+0x60>
    yield = pdFALSE;
 8006d0e:	2300      	movs	r3, #0
 8006d10:	60bb      	str	r3, [r7, #8]

    if (xSemaphoreGiveFromISR (hSemaphore, &yield) != pdTRUE) {
 8006d12:	f107 0308 	add.w	r3, r7, #8
 8006d16:	4619      	mov	r1, r3
 8006d18:	6938      	ldr	r0, [r7, #16]
 8006d1a:	f000 fcb0 	bl	800767e <xQueueGiveFromISR>
 8006d1e:	4603      	mov	r3, r0
 8006d20:	2b01      	cmp	r3, #1
 8006d22:	d003      	beq.n	8006d2c <osSemaphoreRelease+0x48>
      stat = osErrorResource;
 8006d24:	f06f 0302 	mvn.w	r3, #2
 8006d28:	617b      	str	r3, [r7, #20]
 8006d2a:	e017      	b.n	8006d5c <osSemaphoreRelease+0x78>
    } else {
      portYIELD_FROM_ISR (yield);
 8006d2c:	68bb      	ldr	r3, [r7, #8]
 8006d2e:	2b00      	cmp	r3, #0
 8006d30:	d014      	beq.n	8006d5c <osSemaphoreRelease+0x78>
 8006d32:	4b0d      	ldr	r3, [pc, #52]	; (8006d68 <osSemaphoreRelease+0x84>)
 8006d34:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8006d38:	601a      	str	r2, [r3, #0]
 8006d3a:	f3bf 8f4f 	dsb	sy
 8006d3e:	f3bf 8f6f 	isb	sy
 8006d42:	e00b      	b.n	8006d5c <osSemaphoreRelease+0x78>
    }
  }
  else {
    if (xSemaphoreGive (hSemaphore) != pdPASS) {
 8006d44:	2300      	movs	r3, #0
 8006d46:	2200      	movs	r2, #0
 8006d48:	2100      	movs	r1, #0
 8006d4a:	6938      	ldr	r0, [r7, #16]
 8006d4c:	f000 fafe 	bl	800734c <xQueueGenericSend>
 8006d50:	4603      	mov	r3, r0
 8006d52:	2b01      	cmp	r3, #1
 8006d54:	d002      	beq.n	8006d5c <osSemaphoreRelease+0x78>
      stat = osErrorResource;
 8006d56:	f06f 0302 	mvn.w	r3, #2
 8006d5a:	617b      	str	r3, [r7, #20]
    }
  }

  return (stat);
 8006d5c:	697b      	ldr	r3, [r7, #20]
}
 8006d5e:	4618      	mov	r0, r3
 8006d60:	3718      	adds	r7, #24
 8006d62:	46bd      	mov	sp, r7
 8006d64:	bd80      	pop	{r7, pc}
 8006d66:	bf00      	nop
 8006d68:	e000ed04 	.word	0xe000ed04

08006d6c <osMessageQueuePut>:
  }

  return ((osMessageQueueId_t)hQueue);
}

osStatus_t osMessageQueuePut (osMessageQueueId_t mq_id, const void *msg_ptr, uint8_t msg_prio, uint32_t timeout) {
 8006d6c:	b580      	push	{r7, lr}
 8006d6e:	b088      	sub	sp, #32
 8006d70:	af00      	add	r7, sp, #0
 8006d72:	60f8      	str	r0, [r7, #12]
 8006d74:	60b9      	str	r1, [r7, #8]
 8006d76:	603b      	str	r3, [r7, #0]
 8006d78:	4613      	mov	r3, r2
 8006d7a:	71fb      	strb	r3, [r7, #7]
  QueueHandle_t hQueue = (QueueHandle_t)mq_id;
 8006d7c:	68fb      	ldr	r3, [r7, #12]
 8006d7e:	61bb      	str	r3, [r7, #24]
  osStatus_t stat;
  BaseType_t yield;

  (void)msg_prio; /* Message priority is ignored */

  stat = osOK;
 8006d80:	2300      	movs	r3, #0
 8006d82:	61fb      	str	r3, [r7, #28]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8006d84:	f3ef 8305 	mrs	r3, IPSR
 8006d88:	617b      	str	r3, [r7, #20]
  return(result);
 8006d8a:	697b      	ldr	r3, [r7, #20]

  if (IS_IRQ()) {
 8006d8c:	2b00      	cmp	r3, #0
 8006d8e:	d028      	beq.n	8006de2 <osMessageQueuePut+0x76>
    if ((hQueue == NULL) || (msg_ptr == NULL) || (timeout != 0U)) {
 8006d90:	69bb      	ldr	r3, [r7, #24]
 8006d92:	2b00      	cmp	r3, #0
 8006d94:	d005      	beq.n	8006da2 <osMessageQueuePut+0x36>
 8006d96:	68bb      	ldr	r3, [r7, #8]
 8006d98:	2b00      	cmp	r3, #0
 8006d9a:	d002      	beq.n	8006da2 <osMessageQueuePut+0x36>
 8006d9c:	683b      	ldr	r3, [r7, #0]
 8006d9e:	2b00      	cmp	r3, #0
 8006da0:	d003      	beq.n	8006daa <osMessageQueuePut+0x3e>
      stat = osErrorParameter;
 8006da2:	f06f 0303 	mvn.w	r3, #3
 8006da6:	61fb      	str	r3, [r7, #28]
 8006da8:	e038      	b.n	8006e1c <osMessageQueuePut+0xb0>
    }
    else {
      yield = pdFALSE;
 8006daa:	2300      	movs	r3, #0
 8006dac:	613b      	str	r3, [r7, #16]

      if (xQueueSendToBackFromISR (hQueue, msg_ptr, &yield) != pdTRUE) {
 8006dae:	f107 0210 	add.w	r2, r7, #16
 8006db2:	2300      	movs	r3, #0
 8006db4:	68b9      	ldr	r1, [r7, #8]
 8006db6:	69b8      	ldr	r0, [r7, #24]
 8006db8:	f000 fbc6 	bl	8007548 <xQueueGenericSendFromISR>
 8006dbc:	4603      	mov	r3, r0
 8006dbe:	2b01      	cmp	r3, #1
 8006dc0:	d003      	beq.n	8006dca <osMessageQueuePut+0x5e>
        stat = osErrorResource;
 8006dc2:	f06f 0302 	mvn.w	r3, #2
 8006dc6:	61fb      	str	r3, [r7, #28]
 8006dc8:	e028      	b.n	8006e1c <osMessageQueuePut+0xb0>
      } else {
        portYIELD_FROM_ISR (yield);
 8006dca:	693b      	ldr	r3, [r7, #16]
 8006dcc:	2b00      	cmp	r3, #0
 8006dce:	d025      	beq.n	8006e1c <osMessageQueuePut+0xb0>
 8006dd0:	4b15      	ldr	r3, [pc, #84]	; (8006e28 <osMessageQueuePut+0xbc>)
 8006dd2:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8006dd6:	601a      	str	r2, [r3, #0]
 8006dd8:	f3bf 8f4f 	dsb	sy
 8006ddc:	f3bf 8f6f 	isb	sy
 8006de0:	e01c      	b.n	8006e1c <osMessageQueuePut+0xb0>
      }
    }
  }
  else {
    if ((hQueue == NULL) || (msg_ptr == NULL)) {
 8006de2:	69bb      	ldr	r3, [r7, #24]
 8006de4:	2b00      	cmp	r3, #0
 8006de6:	d002      	beq.n	8006dee <osMessageQueuePut+0x82>
 8006de8:	68bb      	ldr	r3, [r7, #8]
 8006dea:	2b00      	cmp	r3, #0
 8006dec:	d103      	bne.n	8006df6 <osMessageQueuePut+0x8a>
      stat = osErrorParameter;
 8006dee:	f06f 0303 	mvn.w	r3, #3
 8006df2:	61fb      	str	r3, [r7, #28]
 8006df4:	e012      	b.n	8006e1c <osMessageQueuePut+0xb0>
    }
    else {
      if (xQueueSendToBack (hQueue, msg_ptr, (TickType_t)timeout) != pdPASS) {
 8006df6:	2300      	movs	r3, #0
 8006df8:	683a      	ldr	r2, [r7, #0]
 8006dfa:	68b9      	ldr	r1, [r7, #8]
 8006dfc:	69b8      	ldr	r0, [r7, #24]
 8006dfe:	f000 faa5 	bl	800734c <xQueueGenericSend>
 8006e02:	4603      	mov	r3, r0
 8006e04:	2b01      	cmp	r3, #1
 8006e06:	d009      	beq.n	8006e1c <osMessageQueuePut+0xb0>
        if (timeout != 0U) {
 8006e08:	683b      	ldr	r3, [r7, #0]
 8006e0a:	2b00      	cmp	r3, #0
 8006e0c:	d003      	beq.n	8006e16 <osMessageQueuePut+0xaa>
          stat = osErrorTimeout;
 8006e0e:	f06f 0301 	mvn.w	r3, #1
 8006e12:	61fb      	str	r3, [r7, #28]
 8006e14:	e002      	b.n	8006e1c <osMessageQueuePut+0xb0>
        } else {
          stat = osErrorResource;
 8006e16:	f06f 0302 	mvn.w	r3, #2
 8006e1a:	61fb      	str	r3, [r7, #28]
        }
      }
    }
  }

  return (stat);
 8006e1c:	69fb      	ldr	r3, [r7, #28]
}
 8006e1e:	4618      	mov	r0, r3
 8006e20:	3720      	adds	r7, #32
 8006e22:	46bd      	mov	sp, r7
 8006e24:	bd80      	pop	{r7, pc}
 8006e26:	bf00      	nop
 8006e28:	e000ed04 	.word	0xe000ed04

08006e2c <vApplicationGetIdleTaskMemory>:

/*
  vApplicationGetIdleTaskMemory gets called when configSUPPORT_STATIC_ALLOCATION
  equals to 1 and is required for static memory allocation support.
*/
__WEAK void vApplicationGetIdleTaskMemory (StaticTask_t **ppxIdleTaskTCBBuffer, StackType_t **ppxIdleTaskStackBuffer, uint32_t *pulIdleTaskStackSize) {
 8006e2c:	b480      	push	{r7}
 8006e2e:	b085      	sub	sp, #20
 8006e30:	af00      	add	r7, sp, #0
 8006e32:	60f8      	str	r0, [r7, #12]
 8006e34:	60b9      	str	r1, [r7, #8]
 8006e36:	607a      	str	r2, [r7, #4]
  /* Idle task control block and stack */
  static StaticTask_t Idle_TCB;
  static StackType_t  Idle_Stack[configMINIMAL_STACK_SIZE];

  *ppxIdleTaskTCBBuffer   = &Idle_TCB;
 8006e38:	68fb      	ldr	r3, [r7, #12]
 8006e3a:	4a07      	ldr	r2, [pc, #28]	; (8006e58 <vApplicationGetIdleTaskMemory+0x2c>)
 8006e3c:	601a      	str	r2, [r3, #0]
  *ppxIdleTaskStackBuffer = &Idle_Stack[0];
 8006e3e:	68bb      	ldr	r3, [r7, #8]
 8006e40:	4a06      	ldr	r2, [pc, #24]	; (8006e5c <vApplicationGetIdleTaskMemory+0x30>)
 8006e42:	601a      	str	r2, [r3, #0]
  *pulIdleTaskStackSize   = (uint32_t)configMINIMAL_STACK_SIZE;
 8006e44:	687b      	ldr	r3, [r7, #4]
 8006e46:	2280      	movs	r2, #128	; 0x80
 8006e48:	601a      	str	r2, [r3, #0]
}
 8006e4a:	bf00      	nop
 8006e4c:	3714      	adds	r7, #20
 8006e4e:	46bd      	mov	sp, r7
 8006e50:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006e54:	4770      	bx	lr
 8006e56:	bf00      	nop
 8006e58:	20000378 	.word	0x20000378
 8006e5c:	200003d8 	.word	0x200003d8

08006e60 <vApplicationGetTimerTaskMemory>:

/*
  vApplicationGetTimerTaskMemory gets called when configSUPPORT_STATIC_ALLOCATION
  equals to 1 and is required for static memory allocation support.
*/
__WEAK void vApplicationGetTimerTaskMemory (StaticTask_t **ppxTimerTaskTCBBuffer, StackType_t **ppxTimerTaskStackBuffer, uint32_t *pulTimerTaskStackSize) {
 8006e60:	b480      	push	{r7}
 8006e62:	b085      	sub	sp, #20
 8006e64:	af00      	add	r7, sp, #0
 8006e66:	60f8      	str	r0, [r7, #12]
 8006e68:	60b9      	str	r1, [r7, #8]
 8006e6a:	607a      	str	r2, [r7, #4]
  /* Timer task control block and stack */
  static StaticTask_t Timer_TCB;
  static StackType_t  Timer_Stack[configTIMER_TASK_STACK_DEPTH];

  *ppxTimerTaskTCBBuffer   = &Timer_TCB;
 8006e6c:	68fb      	ldr	r3, [r7, #12]
 8006e6e:	4a07      	ldr	r2, [pc, #28]	; (8006e8c <vApplicationGetTimerTaskMemory+0x2c>)
 8006e70:	601a      	str	r2, [r3, #0]
  *ppxTimerTaskStackBuffer = &Timer_Stack[0];
 8006e72:	68bb      	ldr	r3, [r7, #8]
 8006e74:	4a06      	ldr	r2, [pc, #24]	; (8006e90 <vApplicationGetTimerTaskMemory+0x30>)
 8006e76:	601a      	str	r2, [r3, #0]
  *pulTimerTaskStackSize   = (uint32_t)configTIMER_TASK_STACK_DEPTH;
 8006e78:	687b      	ldr	r3, [r7, #4]
 8006e7a:	f44f 7280 	mov.w	r2, #256	; 0x100
 8006e7e:	601a      	str	r2, [r3, #0]
}
 8006e80:	bf00      	nop
 8006e82:	3714      	adds	r7, #20
 8006e84:	46bd      	mov	sp, r7
 8006e86:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006e8a:	4770      	bx	lr
 8006e8c:	200005d8 	.word	0x200005d8
 8006e90:	20000638 	.word	0x20000638

08006e94 <vListInitialise>:
/*-----------------------------------------------------------
 * PUBLIC LIST API documented in list.h
 *----------------------------------------------------------*/

void vListInitialise( List_t * const pxList )
{
 8006e94:	b480      	push	{r7}
 8006e96:	b083      	sub	sp, #12
 8006e98:	af00      	add	r7, sp, #0
 8006e9a:	6078      	str	r0, [r7, #4]
	/* The list structure contains a list item which is used to mark the
	end of the list.  To initialise the list the list end is inserted
	as the only list entry. */
	pxList->pxIndex = ( ListItem_t * ) &( pxList->xListEnd );			/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8006e9c:	687b      	ldr	r3, [r7, #4]
 8006e9e:	f103 0208 	add.w	r2, r3, #8
 8006ea2:	687b      	ldr	r3, [r7, #4]
 8006ea4:	605a      	str	r2, [r3, #4]

	/* The list end value is the highest possible value in the list to
	ensure it remains at the end of the list. */
	pxList->xListEnd.xItemValue = portMAX_DELAY;
 8006ea6:	687b      	ldr	r3, [r7, #4]
 8006ea8:	f04f 32ff 	mov.w	r2, #4294967295
 8006eac:	609a      	str	r2, [r3, #8]

	/* The list end next and previous pointers point to itself so we know
	when the list is empty. */
	pxList->xListEnd.pxNext = ( ListItem_t * ) &( pxList->xListEnd );	/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8006eae:	687b      	ldr	r3, [r7, #4]
 8006eb0:	f103 0208 	add.w	r2, r3, #8
 8006eb4:	687b      	ldr	r3, [r7, #4]
 8006eb6:	60da      	str	r2, [r3, #12]
	pxList->xListEnd.pxPrevious = ( ListItem_t * ) &( pxList->xListEnd );/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8006eb8:	687b      	ldr	r3, [r7, #4]
 8006eba:	f103 0208 	add.w	r2, r3, #8
 8006ebe:	687b      	ldr	r3, [r7, #4]
 8006ec0:	611a      	str	r2, [r3, #16]

	pxList->uxNumberOfItems = ( UBaseType_t ) 0U;
 8006ec2:	687b      	ldr	r3, [r7, #4]
 8006ec4:	2200      	movs	r2, #0
 8006ec6:	601a      	str	r2, [r3, #0]

	/* Write known values into the list if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_LIST_INTEGRITY_CHECK_1_VALUE( pxList );
	listSET_LIST_INTEGRITY_CHECK_2_VALUE( pxList );
}
 8006ec8:	bf00      	nop
 8006eca:	370c      	adds	r7, #12
 8006ecc:	46bd      	mov	sp, r7
 8006ece:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006ed2:	4770      	bx	lr

08006ed4 <vListInitialiseItem>:
/*-----------------------------------------------------------*/

void vListInitialiseItem( ListItem_t * const pxItem )
{
 8006ed4:	b480      	push	{r7}
 8006ed6:	b083      	sub	sp, #12
 8006ed8:	af00      	add	r7, sp, #0
 8006eda:	6078      	str	r0, [r7, #4]
	/* Make sure the list item is not recorded as being on a list. */
	pxItem->pxContainer = NULL;
 8006edc:	687b      	ldr	r3, [r7, #4]
 8006ede:	2200      	movs	r2, #0
 8006ee0:	611a      	str	r2, [r3, #16]

	/* Write known values into the list item if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_FIRST_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
	listSET_SECOND_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
}
 8006ee2:	bf00      	nop
 8006ee4:	370c      	adds	r7, #12
 8006ee6:	46bd      	mov	sp, r7
 8006ee8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006eec:	4770      	bx	lr

08006eee <vListInsertEnd>:
/*-----------------------------------------------------------*/

void vListInsertEnd( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 8006eee:	b480      	push	{r7}
 8006ef0:	b085      	sub	sp, #20
 8006ef2:	af00      	add	r7, sp, #0
 8006ef4:	6078      	str	r0, [r7, #4]
 8006ef6:	6039      	str	r1, [r7, #0]
ListItem_t * const pxIndex = pxList->pxIndex;
 8006ef8:	687b      	ldr	r3, [r7, #4]
 8006efa:	685b      	ldr	r3, [r3, #4]
 8006efc:	60fb      	str	r3, [r7, #12]
	listTEST_LIST_ITEM_INTEGRITY( pxNewListItem );

	/* Insert a new list item into pxList, but rather than sort the list,
	makes the new list item the last item to be removed by a call to
	listGET_OWNER_OF_NEXT_ENTRY(). */
	pxNewListItem->pxNext = pxIndex;
 8006efe:	683b      	ldr	r3, [r7, #0]
 8006f00:	68fa      	ldr	r2, [r7, #12]
 8006f02:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxPrevious = pxIndex->pxPrevious;
 8006f04:	68fb      	ldr	r3, [r7, #12]
 8006f06:	689a      	ldr	r2, [r3, #8]
 8006f08:	683b      	ldr	r3, [r7, #0]
 8006f0a:	609a      	str	r2, [r3, #8]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	pxIndex->pxPrevious->pxNext = pxNewListItem;
 8006f0c:	68fb      	ldr	r3, [r7, #12]
 8006f0e:	689b      	ldr	r3, [r3, #8]
 8006f10:	683a      	ldr	r2, [r7, #0]
 8006f12:	605a      	str	r2, [r3, #4]
	pxIndex->pxPrevious = pxNewListItem;
 8006f14:	68fb      	ldr	r3, [r7, #12]
 8006f16:	683a      	ldr	r2, [r7, #0]
 8006f18:	609a      	str	r2, [r3, #8]

	/* Remember which list the item is in. */
	pxNewListItem->pxContainer = pxList;
 8006f1a:	683b      	ldr	r3, [r7, #0]
 8006f1c:	687a      	ldr	r2, [r7, #4]
 8006f1e:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 8006f20:	687b      	ldr	r3, [r7, #4]
 8006f22:	681b      	ldr	r3, [r3, #0]
 8006f24:	1c5a      	adds	r2, r3, #1
 8006f26:	687b      	ldr	r3, [r7, #4]
 8006f28:	601a      	str	r2, [r3, #0]
}
 8006f2a:	bf00      	nop
 8006f2c:	3714      	adds	r7, #20
 8006f2e:	46bd      	mov	sp, r7
 8006f30:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006f34:	4770      	bx	lr

08006f36 <vListInsert>:
/*-----------------------------------------------------------*/

void vListInsert( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 8006f36:	b480      	push	{r7}
 8006f38:	b085      	sub	sp, #20
 8006f3a:	af00      	add	r7, sp, #0
 8006f3c:	6078      	str	r0, [r7, #4]
 8006f3e:	6039      	str	r1, [r7, #0]
ListItem_t *pxIterator;
const TickType_t xValueOfInsertion = pxNewListItem->xItemValue;
 8006f40:	683b      	ldr	r3, [r7, #0]
 8006f42:	681b      	ldr	r3, [r3, #0]
 8006f44:	60bb      	str	r3, [r7, #8]
	new list item should be placed after it.  This ensures that TCBs which are
	stored in ready lists (all of which have the same xItemValue value) get a
	share of the CPU.  However, if the xItemValue is the same as the back marker
	the iteration loop below will not end.  Therefore the value is checked
	first, and the algorithm slightly modified if necessary. */
	if( xValueOfInsertion == portMAX_DELAY )
 8006f46:	68bb      	ldr	r3, [r7, #8]
 8006f48:	f1b3 3fff 	cmp.w	r3, #4294967295
 8006f4c:	d103      	bne.n	8006f56 <vListInsert+0x20>
	{
		pxIterator = pxList->xListEnd.pxPrevious;
 8006f4e:	687b      	ldr	r3, [r7, #4]
 8006f50:	691b      	ldr	r3, [r3, #16]
 8006f52:	60fb      	str	r3, [r7, #12]
 8006f54:	e00c      	b.n	8006f70 <vListInsert+0x3a>
			4) Using a queue or semaphore before it has been initialised or
			   before the scheduler has been started (are interrupts firing
			   before vTaskStartScheduler() has been called?).
		**********************************************************************/

		for( pxIterator = ( ListItem_t * ) &( pxList->xListEnd ); pxIterator->pxNext->xItemValue <= xValueOfInsertion; pxIterator = pxIterator->pxNext ) /*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. *//*lint !e440 The iterator moves to a different value, not xValueOfInsertion. */
 8006f56:	687b      	ldr	r3, [r7, #4]
 8006f58:	3308      	adds	r3, #8
 8006f5a:	60fb      	str	r3, [r7, #12]
 8006f5c:	e002      	b.n	8006f64 <vListInsert+0x2e>
 8006f5e:	68fb      	ldr	r3, [r7, #12]
 8006f60:	685b      	ldr	r3, [r3, #4]
 8006f62:	60fb      	str	r3, [r7, #12]
 8006f64:	68fb      	ldr	r3, [r7, #12]
 8006f66:	685b      	ldr	r3, [r3, #4]
 8006f68:	681b      	ldr	r3, [r3, #0]
 8006f6a:	68ba      	ldr	r2, [r7, #8]
 8006f6c:	429a      	cmp	r2, r3
 8006f6e:	d2f6      	bcs.n	8006f5e <vListInsert+0x28>
			/* There is nothing to do here, just iterating to the wanted
			insertion position. */
		}
	}

	pxNewListItem->pxNext = pxIterator->pxNext;
 8006f70:	68fb      	ldr	r3, [r7, #12]
 8006f72:	685a      	ldr	r2, [r3, #4]
 8006f74:	683b      	ldr	r3, [r7, #0]
 8006f76:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxNext->pxPrevious = pxNewListItem;
 8006f78:	683b      	ldr	r3, [r7, #0]
 8006f7a:	685b      	ldr	r3, [r3, #4]
 8006f7c:	683a      	ldr	r2, [r7, #0]
 8006f7e:	609a      	str	r2, [r3, #8]
	pxNewListItem->pxPrevious = pxIterator;
 8006f80:	683b      	ldr	r3, [r7, #0]
 8006f82:	68fa      	ldr	r2, [r7, #12]
 8006f84:	609a      	str	r2, [r3, #8]
	pxIterator->pxNext = pxNewListItem;
 8006f86:	68fb      	ldr	r3, [r7, #12]
 8006f88:	683a      	ldr	r2, [r7, #0]
 8006f8a:	605a      	str	r2, [r3, #4]

	/* Remember which list the item is in.  This allows fast removal of the
	item later. */
	pxNewListItem->pxContainer = pxList;
 8006f8c:	683b      	ldr	r3, [r7, #0]
 8006f8e:	687a      	ldr	r2, [r7, #4]
 8006f90:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 8006f92:	687b      	ldr	r3, [r7, #4]
 8006f94:	681b      	ldr	r3, [r3, #0]
 8006f96:	1c5a      	adds	r2, r3, #1
 8006f98:	687b      	ldr	r3, [r7, #4]
 8006f9a:	601a      	str	r2, [r3, #0]
}
 8006f9c:	bf00      	nop
 8006f9e:	3714      	adds	r7, #20
 8006fa0:	46bd      	mov	sp, r7
 8006fa2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006fa6:	4770      	bx	lr

08006fa8 <uxListRemove>:
/*-----------------------------------------------------------*/

UBaseType_t uxListRemove( ListItem_t * const pxItemToRemove )
{
 8006fa8:	b480      	push	{r7}
 8006faa:	b085      	sub	sp, #20
 8006fac:	af00      	add	r7, sp, #0
 8006fae:	6078      	str	r0, [r7, #4]
/* The list item knows which list it is in.  Obtain the list from the list
item. */
List_t * const pxList = pxItemToRemove->pxContainer;
 8006fb0:	687b      	ldr	r3, [r7, #4]
 8006fb2:	691b      	ldr	r3, [r3, #16]
 8006fb4:	60fb      	str	r3, [r7, #12]

	pxItemToRemove->pxNext->pxPrevious = pxItemToRemove->pxPrevious;
 8006fb6:	687b      	ldr	r3, [r7, #4]
 8006fb8:	685b      	ldr	r3, [r3, #4]
 8006fba:	687a      	ldr	r2, [r7, #4]
 8006fbc:	6892      	ldr	r2, [r2, #8]
 8006fbe:	609a      	str	r2, [r3, #8]
	pxItemToRemove->pxPrevious->pxNext = pxItemToRemove->pxNext;
 8006fc0:	687b      	ldr	r3, [r7, #4]
 8006fc2:	689b      	ldr	r3, [r3, #8]
 8006fc4:	687a      	ldr	r2, [r7, #4]
 8006fc6:	6852      	ldr	r2, [r2, #4]
 8006fc8:	605a      	str	r2, [r3, #4]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	/* Make sure the index is left pointing to a valid item. */
	if( pxList->pxIndex == pxItemToRemove )
 8006fca:	68fb      	ldr	r3, [r7, #12]
 8006fcc:	685b      	ldr	r3, [r3, #4]
 8006fce:	687a      	ldr	r2, [r7, #4]
 8006fd0:	429a      	cmp	r2, r3
 8006fd2:	d103      	bne.n	8006fdc <uxListRemove+0x34>
	{
		pxList->pxIndex = pxItemToRemove->pxPrevious;
 8006fd4:	687b      	ldr	r3, [r7, #4]
 8006fd6:	689a      	ldr	r2, [r3, #8]
 8006fd8:	68fb      	ldr	r3, [r7, #12]
 8006fda:	605a      	str	r2, [r3, #4]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxItemToRemove->pxContainer = NULL;
 8006fdc:	687b      	ldr	r3, [r7, #4]
 8006fde:	2200      	movs	r2, #0
 8006fe0:	611a      	str	r2, [r3, #16]
	( pxList->uxNumberOfItems )--;
 8006fe2:	68fb      	ldr	r3, [r7, #12]
 8006fe4:	681b      	ldr	r3, [r3, #0]
 8006fe6:	1e5a      	subs	r2, r3, #1
 8006fe8:	68fb      	ldr	r3, [r7, #12]
 8006fea:	601a      	str	r2, [r3, #0]

	return pxList->uxNumberOfItems;
 8006fec:	68fb      	ldr	r3, [r7, #12]
 8006fee:	681b      	ldr	r3, [r3, #0]
}
 8006ff0:	4618      	mov	r0, r3
 8006ff2:	3714      	adds	r7, #20
 8006ff4:	46bd      	mov	sp, r7
 8006ff6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006ffa:	4770      	bx	lr

08006ffc <xQueueGenericReset>:
	}														\
	taskEXIT_CRITICAL()
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericReset( QueueHandle_t xQueue, BaseType_t xNewQueue )
{
 8006ffc:	b580      	push	{r7, lr}
 8006ffe:	b084      	sub	sp, #16
 8007000:	af00      	add	r7, sp, #0
 8007002:	6078      	str	r0, [r7, #4]
 8007004:	6039      	str	r1, [r7, #0]
Queue_t * const pxQueue = xQueue;
 8007006:	687b      	ldr	r3, [r7, #4]
 8007008:	60fb      	str	r3, [r7, #12]

	configASSERT( pxQueue );
 800700a:	68fb      	ldr	r3, [r7, #12]
 800700c:	2b00      	cmp	r3, #0
 800700e:	d10a      	bne.n	8007026 <xQueueGenericReset+0x2a>

portFORCE_INLINE static void vPortRaiseBASEPRI( void )
{
uint32_t ulNewBASEPRI;

	__asm volatile
 8007010:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007014:	f383 8811 	msr	BASEPRI, r3
 8007018:	f3bf 8f6f 	isb	sy
 800701c:	f3bf 8f4f 	dsb	sy
 8007020:	60bb      	str	r3, [r7, #8]
		"	msr basepri, %0											\n" \
		"	isb														\n" \
		"	dsb														\n" \
		:"=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
	);
}
 8007022:	bf00      	nop
 8007024:	e7fe      	b.n	8007024 <xQueueGenericReset+0x28>

	taskENTER_CRITICAL();
 8007026:	f002 fd25 	bl	8009a74 <vPortEnterCritical>
	{
		pxQueue->u.xQueue.pcTail = pxQueue->pcHead + ( pxQueue->uxLength * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 800702a:	68fb      	ldr	r3, [r7, #12]
 800702c:	681a      	ldr	r2, [r3, #0]
 800702e:	68fb      	ldr	r3, [r7, #12]
 8007030:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8007032:	68f9      	ldr	r1, [r7, #12]
 8007034:	6c09      	ldr	r1, [r1, #64]	; 0x40
 8007036:	fb01 f303 	mul.w	r3, r1, r3
 800703a:	441a      	add	r2, r3
 800703c:	68fb      	ldr	r3, [r7, #12]
 800703e:	609a      	str	r2, [r3, #8]
		pxQueue->uxMessagesWaiting = ( UBaseType_t ) 0U;
 8007040:	68fb      	ldr	r3, [r7, #12]
 8007042:	2200      	movs	r2, #0
 8007044:	639a      	str	r2, [r3, #56]	; 0x38
		pxQueue->pcWriteTo = pxQueue->pcHead;
 8007046:	68fb      	ldr	r3, [r7, #12]
 8007048:	681a      	ldr	r2, [r3, #0]
 800704a:	68fb      	ldr	r3, [r7, #12]
 800704c:	605a      	str	r2, [r3, #4]
		pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead + ( ( pxQueue->uxLength - 1U ) * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 800704e:	68fb      	ldr	r3, [r7, #12]
 8007050:	681a      	ldr	r2, [r3, #0]
 8007052:	68fb      	ldr	r3, [r7, #12]
 8007054:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8007056:	3b01      	subs	r3, #1
 8007058:	68f9      	ldr	r1, [r7, #12]
 800705a:	6c09      	ldr	r1, [r1, #64]	; 0x40
 800705c:	fb01 f303 	mul.w	r3, r1, r3
 8007060:	441a      	add	r2, r3
 8007062:	68fb      	ldr	r3, [r7, #12]
 8007064:	60da      	str	r2, [r3, #12]
		pxQueue->cRxLock = queueUNLOCKED;
 8007066:	68fb      	ldr	r3, [r7, #12]
 8007068:	22ff      	movs	r2, #255	; 0xff
 800706a:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
		pxQueue->cTxLock = queueUNLOCKED;
 800706e:	68fb      	ldr	r3, [r7, #12]
 8007070:	22ff      	movs	r2, #255	; 0xff
 8007072:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

		if( xNewQueue == pdFALSE )
 8007076:	683b      	ldr	r3, [r7, #0]
 8007078:	2b00      	cmp	r3, #0
 800707a:	d114      	bne.n	80070a6 <xQueueGenericReset+0xaa>
			/* If there are tasks blocked waiting to read from the queue, then
			the tasks will remain blocked as after this function exits the queue
			will still be empty.  If there are tasks blocked waiting to write to
			the queue, then one should be unblocked as after this function exits
			it will be possible to write to it. */
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 800707c:	68fb      	ldr	r3, [r7, #12]
 800707e:	691b      	ldr	r3, [r3, #16]
 8007080:	2b00      	cmp	r3, #0
 8007082:	d01a      	beq.n	80070ba <xQueueGenericReset+0xbe>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8007084:	68fb      	ldr	r3, [r7, #12]
 8007086:	3310      	adds	r3, #16
 8007088:	4618      	mov	r0, r3
 800708a:	f001 fcdb 	bl	8008a44 <xTaskRemoveFromEventList>
 800708e:	4603      	mov	r3, r0
 8007090:	2b00      	cmp	r3, #0
 8007092:	d012      	beq.n	80070ba <xQueueGenericReset+0xbe>
				{
					queueYIELD_IF_USING_PREEMPTION();
 8007094:	4b0c      	ldr	r3, [pc, #48]	; (80070c8 <xQueueGenericReset+0xcc>)
 8007096:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800709a:	601a      	str	r2, [r3, #0]
 800709c:	f3bf 8f4f 	dsb	sy
 80070a0:	f3bf 8f6f 	isb	sy
 80070a4:	e009      	b.n	80070ba <xQueueGenericReset+0xbe>
			}
		}
		else
		{
			/* Ensure the event queues start in the correct state. */
			vListInitialise( &( pxQueue->xTasksWaitingToSend ) );
 80070a6:	68fb      	ldr	r3, [r7, #12]
 80070a8:	3310      	adds	r3, #16
 80070aa:	4618      	mov	r0, r3
 80070ac:	f7ff fef2 	bl	8006e94 <vListInitialise>
			vListInitialise( &( pxQueue->xTasksWaitingToReceive ) );
 80070b0:	68fb      	ldr	r3, [r7, #12]
 80070b2:	3324      	adds	r3, #36	; 0x24
 80070b4:	4618      	mov	r0, r3
 80070b6:	f7ff feed 	bl	8006e94 <vListInitialise>
		}
	}
	taskEXIT_CRITICAL();
 80070ba:	f002 fd0b 	bl	8009ad4 <vPortExitCritical>

	/* A value is returned for calling semantic consistency with previous
	versions. */
	return pdPASS;
 80070be:	2301      	movs	r3, #1
}
 80070c0:	4618      	mov	r0, r3
 80070c2:	3710      	adds	r7, #16
 80070c4:	46bd      	mov	sp, r7
 80070c6:	bd80      	pop	{r7, pc}
 80070c8:	e000ed04 	.word	0xe000ed04

080070cc <xQueueGenericCreateStatic>:
/*-----------------------------------------------------------*/

#if( configSUPPORT_STATIC_ALLOCATION == 1 )

	QueueHandle_t xQueueGenericCreateStatic( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, StaticQueue_t *pxStaticQueue, const uint8_t ucQueueType )
	{
 80070cc:	b580      	push	{r7, lr}
 80070ce:	b08e      	sub	sp, #56	; 0x38
 80070d0:	af02      	add	r7, sp, #8
 80070d2:	60f8      	str	r0, [r7, #12]
 80070d4:	60b9      	str	r1, [r7, #8]
 80070d6:	607a      	str	r2, [r7, #4]
 80070d8:	603b      	str	r3, [r7, #0]
	Queue_t *pxNewQueue;

		configASSERT( uxQueueLength > ( UBaseType_t ) 0 );
 80070da:	68fb      	ldr	r3, [r7, #12]
 80070dc:	2b00      	cmp	r3, #0
 80070de:	d10a      	bne.n	80070f6 <xQueueGenericCreateStatic+0x2a>
	__asm volatile
 80070e0:	f04f 0350 	mov.w	r3, #80	; 0x50
 80070e4:	f383 8811 	msr	BASEPRI, r3
 80070e8:	f3bf 8f6f 	isb	sy
 80070ec:	f3bf 8f4f 	dsb	sy
 80070f0:	62bb      	str	r3, [r7, #40]	; 0x28
}
 80070f2:	bf00      	nop
 80070f4:	e7fe      	b.n	80070f4 <xQueueGenericCreateStatic+0x28>

		/* The StaticQueue_t structure and the queue storage area must be
		supplied. */
		configASSERT( pxStaticQueue != NULL );
 80070f6:	683b      	ldr	r3, [r7, #0]
 80070f8:	2b00      	cmp	r3, #0
 80070fa:	d10a      	bne.n	8007112 <xQueueGenericCreateStatic+0x46>
	__asm volatile
 80070fc:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007100:	f383 8811 	msr	BASEPRI, r3
 8007104:	f3bf 8f6f 	isb	sy
 8007108:	f3bf 8f4f 	dsb	sy
 800710c:	627b      	str	r3, [r7, #36]	; 0x24
}
 800710e:	bf00      	nop
 8007110:	e7fe      	b.n	8007110 <xQueueGenericCreateStatic+0x44>

		/* A queue storage area should be provided if the item size is not 0, and
		should not be provided if the item size is 0. */
		configASSERT( !( ( pucQueueStorage != NULL ) && ( uxItemSize == 0 ) ) );
 8007112:	687b      	ldr	r3, [r7, #4]
 8007114:	2b00      	cmp	r3, #0
 8007116:	d002      	beq.n	800711e <xQueueGenericCreateStatic+0x52>
 8007118:	68bb      	ldr	r3, [r7, #8]
 800711a:	2b00      	cmp	r3, #0
 800711c:	d001      	beq.n	8007122 <xQueueGenericCreateStatic+0x56>
 800711e:	2301      	movs	r3, #1
 8007120:	e000      	b.n	8007124 <xQueueGenericCreateStatic+0x58>
 8007122:	2300      	movs	r3, #0
 8007124:	2b00      	cmp	r3, #0
 8007126:	d10a      	bne.n	800713e <xQueueGenericCreateStatic+0x72>
	__asm volatile
 8007128:	f04f 0350 	mov.w	r3, #80	; 0x50
 800712c:	f383 8811 	msr	BASEPRI, r3
 8007130:	f3bf 8f6f 	isb	sy
 8007134:	f3bf 8f4f 	dsb	sy
 8007138:	623b      	str	r3, [r7, #32]
}
 800713a:	bf00      	nop
 800713c:	e7fe      	b.n	800713c <xQueueGenericCreateStatic+0x70>
		configASSERT( !( ( pucQueueStorage == NULL ) && ( uxItemSize != 0 ) ) );
 800713e:	687b      	ldr	r3, [r7, #4]
 8007140:	2b00      	cmp	r3, #0
 8007142:	d102      	bne.n	800714a <xQueueGenericCreateStatic+0x7e>
 8007144:	68bb      	ldr	r3, [r7, #8]
 8007146:	2b00      	cmp	r3, #0
 8007148:	d101      	bne.n	800714e <xQueueGenericCreateStatic+0x82>
 800714a:	2301      	movs	r3, #1
 800714c:	e000      	b.n	8007150 <xQueueGenericCreateStatic+0x84>
 800714e:	2300      	movs	r3, #0
 8007150:	2b00      	cmp	r3, #0
 8007152:	d10a      	bne.n	800716a <xQueueGenericCreateStatic+0x9e>
	__asm volatile
 8007154:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007158:	f383 8811 	msr	BASEPRI, r3
 800715c:	f3bf 8f6f 	isb	sy
 8007160:	f3bf 8f4f 	dsb	sy
 8007164:	61fb      	str	r3, [r7, #28]
}
 8007166:	bf00      	nop
 8007168:	e7fe      	b.n	8007168 <xQueueGenericCreateStatic+0x9c>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticQueue_t or StaticSemaphore_t equals the size of
			the real queue and semaphore structures. */
			volatile size_t xSize = sizeof( StaticQueue_t );
 800716a:	2350      	movs	r3, #80	; 0x50
 800716c:	617b      	str	r3, [r7, #20]
			configASSERT( xSize == sizeof( Queue_t ) );
 800716e:	697b      	ldr	r3, [r7, #20]
 8007170:	2b50      	cmp	r3, #80	; 0x50
 8007172:	d00a      	beq.n	800718a <xQueueGenericCreateStatic+0xbe>
	__asm volatile
 8007174:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007178:	f383 8811 	msr	BASEPRI, r3
 800717c:	f3bf 8f6f 	isb	sy
 8007180:	f3bf 8f4f 	dsb	sy
 8007184:	61bb      	str	r3, [r7, #24]
}
 8007186:	bf00      	nop
 8007188:	e7fe      	b.n	8007188 <xQueueGenericCreateStatic+0xbc>
			( void ) xSize; /* Keeps lint quiet when configASSERT() is not defined. */
 800718a:	697b      	ldr	r3, [r7, #20]
		#endif /* configASSERT_DEFINED */

		/* The address of a statically allocated queue was passed in, use it.
		The address of a statically allocated storage area was also passed in
		but is already set. */
		pxNewQueue = ( Queue_t * ) pxStaticQueue; /*lint !e740 !e9087 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 800718c:	683b      	ldr	r3, [r7, #0]
 800718e:	62fb      	str	r3, [r7, #44]	; 0x2c

		if( pxNewQueue != NULL )
 8007190:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007192:	2b00      	cmp	r3, #0
 8007194:	d00d      	beq.n	80071b2 <xQueueGenericCreateStatic+0xe6>
			#if( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
			{
				/* Queues can be allocated wither statically or dynamically, so
				note this queue was allocated statically in case the queue is
				later deleted. */
				pxNewQueue->ucStaticallyAllocated = pdTRUE;
 8007196:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007198:	2201      	movs	r2, #1
 800719a:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
			}
			#endif /* configSUPPORT_DYNAMIC_ALLOCATION */

			prvInitialiseNewQueue( uxQueueLength, uxItemSize, pucQueueStorage, ucQueueType, pxNewQueue );
 800719e:	f897 2038 	ldrb.w	r2, [r7, #56]	; 0x38
 80071a2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80071a4:	9300      	str	r3, [sp, #0]
 80071a6:	4613      	mov	r3, r2
 80071a8:	687a      	ldr	r2, [r7, #4]
 80071aa:	68b9      	ldr	r1, [r7, #8]
 80071ac:	68f8      	ldr	r0, [r7, #12]
 80071ae:	f000 f83f 	bl	8007230 <prvInitialiseNewQueue>
		{
			traceQUEUE_CREATE_FAILED( ucQueueType );
			mtCOVERAGE_TEST_MARKER();
		}

		return pxNewQueue;
 80071b2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
	}
 80071b4:	4618      	mov	r0, r3
 80071b6:	3730      	adds	r7, #48	; 0x30
 80071b8:	46bd      	mov	sp, r7
 80071ba:	bd80      	pop	{r7, pc}

080071bc <xQueueGenericCreate>:
/*-----------------------------------------------------------*/

#if( configSUPPORT_DYNAMIC_ALLOCATION == 1 )

	QueueHandle_t xQueueGenericCreate( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, const uint8_t ucQueueType )
	{
 80071bc:	b580      	push	{r7, lr}
 80071be:	b08a      	sub	sp, #40	; 0x28
 80071c0:	af02      	add	r7, sp, #8
 80071c2:	60f8      	str	r0, [r7, #12]
 80071c4:	60b9      	str	r1, [r7, #8]
 80071c6:	4613      	mov	r3, r2
 80071c8:	71fb      	strb	r3, [r7, #7]
	Queue_t *pxNewQueue;
	size_t xQueueSizeInBytes;
	uint8_t *pucQueueStorage;

		configASSERT( uxQueueLength > ( UBaseType_t ) 0 );
 80071ca:	68fb      	ldr	r3, [r7, #12]
 80071cc:	2b00      	cmp	r3, #0
 80071ce:	d10a      	bne.n	80071e6 <xQueueGenericCreate+0x2a>
	__asm volatile
 80071d0:	f04f 0350 	mov.w	r3, #80	; 0x50
 80071d4:	f383 8811 	msr	BASEPRI, r3
 80071d8:	f3bf 8f6f 	isb	sy
 80071dc:	f3bf 8f4f 	dsb	sy
 80071e0:	613b      	str	r3, [r7, #16]
}
 80071e2:	bf00      	nop
 80071e4:	e7fe      	b.n	80071e4 <xQueueGenericCreate+0x28>

		/* Allocate enough space to hold the maximum number of items that
		can be in the queue at any time.  It is valid for uxItemSize to be
		zero in the case the queue is used as a semaphore. */
		xQueueSizeInBytes = ( size_t ) ( uxQueueLength * uxItemSize ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 80071e6:	68fb      	ldr	r3, [r7, #12]
 80071e8:	68ba      	ldr	r2, [r7, #8]
 80071ea:	fb02 f303 	mul.w	r3, r2, r3
 80071ee:	61fb      	str	r3, [r7, #28]
		alignment requirements of the Queue_t structure - which in this case
		is an int8_t *.  Therefore, whenever the stack alignment requirements
		are greater than or equal to the pointer to char requirements the cast
		is safe.  In other cases alignment requirements are not strict (one or
		two bytes). */
		pxNewQueue = ( Queue_t * ) pvPortMalloc( sizeof( Queue_t ) + xQueueSizeInBytes ); /*lint !e9087 !e9079 see comment above. */
 80071f0:	69fb      	ldr	r3, [r7, #28]
 80071f2:	3350      	adds	r3, #80	; 0x50
 80071f4:	4618      	mov	r0, r3
 80071f6:	f002 fd5f 	bl	8009cb8 <pvPortMalloc>
 80071fa:	61b8      	str	r0, [r7, #24]

		if( pxNewQueue != NULL )
 80071fc:	69bb      	ldr	r3, [r7, #24]
 80071fe:	2b00      	cmp	r3, #0
 8007200:	d011      	beq.n	8007226 <xQueueGenericCreate+0x6a>
		{
			/* Jump past the queue structure to find the location of the queue
			storage area. */
			pucQueueStorage = ( uint8_t * ) pxNewQueue;
 8007202:	69bb      	ldr	r3, [r7, #24]
 8007204:	617b      	str	r3, [r7, #20]
			pucQueueStorage += sizeof( Queue_t ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 8007206:	697b      	ldr	r3, [r7, #20]
 8007208:	3350      	adds	r3, #80	; 0x50
 800720a:	617b      	str	r3, [r7, #20]
			#if( configSUPPORT_STATIC_ALLOCATION == 1 )
			{
				/* Queues can be created either statically or dynamically, so
				note this task was created dynamically in case it is later
				deleted. */
				pxNewQueue->ucStaticallyAllocated = pdFALSE;
 800720c:	69bb      	ldr	r3, [r7, #24]
 800720e:	2200      	movs	r2, #0
 8007210:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
			}
			#endif /* configSUPPORT_STATIC_ALLOCATION */

			prvInitialiseNewQueue( uxQueueLength, uxItemSize, pucQueueStorage, ucQueueType, pxNewQueue );
 8007214:	79fa      	ldrb	r2, [r7, #7]
 8007216:	69bb      	ldr	r3, [r7, #24]
 8007218:	9300      	str	r3, [sp, #0]
 800721a:	4613      	mov	r3, r2
 800721c:	697a      	ldr	r2, [r7, #20]
 800721e:	68b9      	ldr	r1, [r7, #8]
 8007220:	68f8      	ldr	r0, [r7, #12]
 8007222:	f000 f805 	bl	8007230 <prvInitialiseNewQueue>
		{
			traceQUEUE_CREATE_FAILED( ucQueueType );
			mtCOVERAGE_TEST_MARKER();
		}

		return pxNewQueue;
 8007226:	69bb      	ldr	r3, [r7, #24]
	}
 8007228:	4618      	mov	r0, r3
 800722a:	3720      	adds	r7, #32
 800722c:	46bd      	mov	sp, r7
 800722e:	bd80      	pop	{r7, pc}

08007230 <prvInitialiseNewQueue>:

#endif /* configSUPPORT_STATIC_ALLOCATION */
/*-----------------------------------------------------------*/

static void prvInitialiseNewQueue( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, const uint8_t ucQueueType, Queue_t *pxNewQueue )
{
 8007230:	b580      	push	{r7, lr}
 8007232:	b084      	sub	sp, #16
 8007234:	af00      	add	r7, sp, #0
 8007236:	60f8      	str	r0, [r7, #12]
 8007238:	60b9      	str	r1, [r7, #8]
 800723a:	607a      	str	r2, [r7, #4]
 800723c:	70fb      	strb	r3, [r7, #3]
	/* Remove compiler warnings about unused parameters should
	configUSE_TRACE_FACILITY not be set to 1. */
	( void ) ucQueueType;

	if( uxItemSize == ( UBaseType_t ) 0 )
 800723e:	68bb      	ldr	r3, [r7, #8]
 8007240:	2b00      	cmp	r3, #0
 8007242:	d103      	bne.n	800724c <prvInitialiseNewQueue+0x1c>
	{
		/* No RAM was allocated for the queue storage area, but PC head cannot
		be set to NULL because NULL is used as a key to say the queue is used as
		a mutex.  Therefore just set pcHead to point to the queue as a benign
		value that is known to be within the memory map. */
		pxNewQueue->pcHead = ( int8_t * ) pxNewQueue;
 8007244:	69bb      	ldr	r3, [r7, #24]
 8007246:	69ba      	ldr	r2, [r7, #24]
 8007248:	601a      	str	r2, [r3, #0]
 800724a:	e002      	b.n	8007252 <prvInitialiseNewQueue+0x22>
	}
	else
	{
		/* Set the head to the start of the queue storage area. */
		pxNewQueue->pcHead = ( int8_t * ) pucQueueStorage;
 800724c:	69bb      	ldr	r3, [r7, #24]
 800724e:	687a      	ldr	r2, [r7, #4]
 8007250:	601a      	str	r2, [r3, #0]
	}

	/* Initialise the queue members as described where the queue type is
	defined. */
	pxNewQueue->uxLength = uxQueueLength;
 8007252:	69bb      	ldr	r3, [r7, #24]
 8007254:	68fa      	ldr	r2, [r7, #12]
 8007256:	63da      	str	r2, [r3, #60]	; 0x3c
	pxNewQueue->uxItemSize = uxItemSize;
 8007258:	69bb      	ldr	r3, [r7, #24]
 800725a:	68ba      	ldr	r2, [r7, #8]
 800725c:	641a      	str	r2, [r3, #64]	; 0x40
	( void ) xQueueGenericReset( pxNewQueue, pdTRUE );
 800725e:	2101      	movs	r1, #1
 8007260:	69b8      	ldr	r0, [r7, #24]
 8007262:	f7ff fecb 	bl	8006ffc <xQueueGenericReset>

	#if ( configUSE_TRACE_FACILITY == 1 )
	{
		pxNewQueue->ucQueueType = ucQueueType;
 8007266:	69bb      	ldr	r3, [r7, #24]
 8007268:	78fa      	ldrb	r2, [r7, #3]
 800726a:	f883 204c 	strb.w	r2, [r3, #76]	; 0x4c
		pxNewQueue->pxQueueSetContainer = NULL;
	}
	#endif /* configUSE_QUEUE_SETS */

	traceQUEUE_CREATE( pxNewQueue );
}
 800726e:	bf00      	nop
 8007270:	3710      	adds	r7, #16
 8007272:	46bd      	mov	sp, r7
 8007274:	bd80      	pop	{r7, pc}

08007276 <xQueueCreateCountingSemaphoreStatic>:
/*-----------------------------------------------------------*/

#if( ( configUSE_COUNTING_SEMAPHORES == 1 ) && ( configSUPPORT_STATIC_ALLOCATION == 1 ) )

	QueueHandle_t xQueueCreateCountingSemaphoreStatic( const UBaseType_t uxMaxCount, const UBaseType_t uxInitialCount, StaticQueue_t *pxStaticQueue )
	{
 8007276:	b580      	push	{r7, lr}
 8007278:	b08a      	sub	sp, #40	; 0x28
 800727a:	af02      	add	r7, sp, #8
 800727c:	60f8      	str	r0, [r7, #12]
 800727e:	60b9      	str	r1, [r7, #8]
 8007280:	607a      	str	r2, [r7, #4]
	QueueHandle_t xHandle;

		configASSERT( uxMaxCount != 0 );
 8007282:	68fb      	ldr	r3, [r7, #12]
 8007284:	2b00      	cmp	r3, #0
 8007286:	d10a      	bne.n	800729e <xQueueCreateCountingSemaphoreStatic+0x28>
	__asm volatile
 8007288:	f04f 0350 	mov.w	r3, #80	; 0x50
 800728c:	f383 8811 	msr	BASEPRI, r3
 8007290:	f3bf 8f6f 	isb	sy
 8007294:	f3bf 8f4f 	dsb	sy
 8007298:	61bb      	str	r3, [r7, #24]
}
 800729a:	bf00      	nop
 800729c:	e7fe      	b.n	800729c <xQueueCreateCountingSemaphoreStatic+0x26>
		configASSERT( uxInitialCount <= uxMaxCount );
 800729e:	68ba      	ldr	r2, [r7, #8]
 80072a0:	68fb      	ldr	r3, [r7, #12]
 80072a2:	429a      	cmp	r2, r3
 80072a4:	d90a      	bls.n	80072bc <xQueueCreateCountingSemaphoreStatic+0x46>
	__asm volatile
 80072a6:	f04f 0350 	mov.w	r3, #80	; 0x50
 80072aa:	f383 8811 	msr	BASEPRI, r3
 80072ae:	f3bf 8f6f 	isb	sy
 80072b2:	f3bf 8f4f 	dsb	sy
 80072b6:	617b      	str	r3, [r7, #20]
}
 80072b8:	bf00      	nop
 80072ba:	e7fe      	b.n	80072ba <xQueueCreateCountingSemaphoreStatic+0x44>

		xHandle = xQueueGenericCreateStatic( uxMaxCount, queueSEMAPHORE_QUEUE_ITEM_LENGTH, NULL, pxStaticQueue, queueQUEUE_TYPE_COUNTING_SEMAPHORE );
 80072bc:	2302      	movs	r3, #2
 80072be:	9300      	str	r3, [sp, #0]
 80072c0:	687b      	ldr	r3, [r7, #4]
 80072c2:	2200      	movs	r2, #0
 80072c4:	2100      	movs	r1, #0
 80072c6:	68f8      	ldr	r0, [r7, #12]
 80072c8:	f7ff ff00 	bl	80070cc <xQueueGenericCreateStatic>
 80072cc:	61f8      	str	r0, [r7, #28]

		if( xHandle != NULL )
 80072ce:	69fb      	ldr	r3, [r7, #28]
 80072d0:	2b00      	cmp	r3, #0
 80072d2:	d002      	beq.n	80072da <xQueueCreateCountingSemaphoreStatic+0x64>
		{
			( ( Queue_t * ) xHandle )->uxMessagesWaiting = uxInitialCount;
 80072d4:	69fb      	ldr	r3, [r7, #28]
 80072d6:	68ba      	ldr	r2, [r7, #8]
 80072d8:	639a      	str	r2, [r3, #56]	; 0x38
		else
		{
			traceCREATE_COUNTING_SEMAPHORE_FAILED();
		}

		return xHandle;
 80072da:	69fb      	ldr	r3, [r7, #28]
	}
 80072dc:	4618      	mov	r0, r3
 80072de:	3720      	adds	r7, #32
 80072e0:	46bd      	mov	sp, r7
 80072e2:	bd80      	pop	{r7, pc}

080072e4 <xQueueCreateCountingSemaphore>:
/*-----------------------------------------------------------*/

#if( ( configUSE_COUNTING_SEMAPHORES == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) )

	QueueHandle_t xQueueCreateCountingSemaphore( const UBaseType_t uxMaxCount, const UBaseType_t uxInitialCount )
	{
 80072e4:	b580      	push	{r7, lr}
 80072e6:	b086      	sub	sp, #24
 80072e8:	af00      	add	r7, sp, #0
 80072ea:	6078      	str	r0, [r7, #4]
 80072ec:	6039      	str	r1, [r7, #0]
	QueueHandle_t xHandle;

		configASSERT( uxMaxCount != 0 );
 80072ee:	687b      	ldr	r3, [r7, #4]
 80072f0:	2b00      	cmp	r3, #0
 80072f2:	d10a      	bne.n	800730a <xQueueCreateCountingSemaphore+0x26>
	__asm volatile
 80072f4:	f04f 0350 	mov.w	r3, #80	; 0x50
 80072f8:	f383 8811 	msr	BASEPRI, r3
 80072fc:	f3bf 8f6f 	isb	sy
 8007300:	f3bf 8f4f 	dsb	sy
 8007304:	613b      	str	r3, [r7, #16]
}
 8007306:	bf00      	nop
 8007308:	e7fe      	b.n	8007308 <xQueueCreateCountingSemaphore+0x24>
		configASSERT( uxInitialCount <= uxMaxCount );
 800730a:	683a      	ldr	r2, [r7, #0]
 800730c:	687b      	ldr	r3, [r7, #4]
 800730e:	429a      	cmp	r2, r3
 8007310:	d90a      	bls.n	8007328 <xQueueCreateCountingSemaphore+0x44>
	__asm volatile
 8007312:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007316:	f383 8811 	msr	BASEPRI, r3
 800731a:	f3bf 8f6f 	isb	sy
 800731e:	f3bf 8f4f 	dsb	sy
 8007322:	60fb      	str	r3, [r7, #12]
}
 8007324:	bf00      	nop
 8007326:	e7fe      	b.n	8007326 <xQueueCreateCountingSemaphore+0x42>

		xHandle = xQueueGenericCreate( uxMaxCount, queueSEMAPHORE_QUEUE_ITEM_LENGTH, queueQUEUE_TYPE_COUNTING_SEMAPHORE );
 8007328:	2202      	movs	r2, #2
 800732a:	2100      	movs	r1, #0
 800732c:	6878      	ldr	r0, [r7, #4]
 800732e:	f7ff ff45 	bl	80071bc <xQueueGenericCreate>
 8007332:	6178      	str	r0, [r7, #20]

		if( xHandle != NULL )
 8007334:	697b      	ldr	r3, [r7, #20]
 8007336:	2b00      	cmp	r3, #0
 8007338:	d002      	beq.n	8007340 <xQueueCreateCountingSemaphore+0x5c>
		{
			( ( Queue_t * ) xHandle )->uxMessagesWaiting = uxInitialCount;
 800733a:	697b      	ldr	r3, [r7, #20]
 800733c:	683a      	ldr	r2, [r7, #0]
 800733e:	639a      	str	r2, [r3, #56]	; 0x38
		else
		{
			traceCREATE_COUNTING_SEMAPHORE_FAILED();
		}

		return xHandle;
 8007340:	697b      	ldr	r3, [r7, #20]
	}
 8007342:	4618      	mov	r0, r3
 8007344:	3718      	adds	r7, #24
 8007346:	46bd      	mov	sp, r7
 8007348:	bd80      	pop	{r7, pc}
	...

0800734c <xQueueGenericSend>:

#endif /* ( ( configUSE_COUNTING_SEMAPHORES == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) ) */
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSend( QueueHandle_t xQueue, const void * const pvItemToQueue, TickType_t xTicksToWait, const BaseType_t xCopyPosition )
{
 800734c:	b580      	push	{r7, lr}
 800734e:	b08e      	sub	sp, #56	; 0x38
 8007350:	af00      	add	r7, sp, #0
 8007352:	60f8      	str	r0, [r7, #12]
 8007354:	60b9      	str	r1, [r7, #8]
 8007356:	607a      	str	r2, [r7, #4]
 8007358:	603b      	str	r3, [r7, #0]
BaseType_t xEntryTimeSet = pdFALSE, xYieldRequired;
 800735a:	2300      	movs	r3, #0
 800735c:	637b      	str	r3, [r7, #52]	; 0x34
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 800735e:	68fb      	ldr	r3, [r7, #12]
 8007360:	633b      	str	r3, [r7, #48]	; 0x30

	configASSERT( pxQueue );
 8007362:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007364:	2b00      	cmp	r3, #0
 8007366:	d10a      	bne.n	800737e <xQueueGenericSend+0x32>
	__asm volatile
 8007368:	f04f 0350 	mov.w	r3, #80	; 0x50
 800736c:	f383 8811 	msr	BASEPRI, r3
 8007370:	f3bf 8f6f 	isb	sy
 8007374:	f3bf 8f4f 	dsb	sy
 8007378:	62bb      	str	r3, [r7, #40]	; 0x28
}
 800737a:	bf00      	nop
 800737c:	e7fe      	b.n	800737c <xQueueGenericSend+0x30>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 800737e:	68bb      	ldr	r3, [r7, #8]
 8007380:	2b00      	cmp	r3, #0
 8007382:	d103      	bne.n	800738c <xQueueGenericSend+0x40>
 8007384:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007386:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007388:	2b00      	cmp	r3, #0
 800738a:	d101      	bne.n	8007390 <xQueueGenericSend+0x44>
 800738c:	2301      	movs	r3, #1
 800738e:	e000      	b.n	8007392 <xQueueGenericSend+0x46>
 8007390:	2300      	movs	r3, #0
 8007392:	2b00      	cmp	r3, #0
 8007394:	d10a      	bne.n	80073ac <xQueueGenericSend+0x60>
	__asm volatile
 8007396:	f04f 0350 	mov.w	r3, #80	; 0x50
 800739a:	f383 8811 	msr	BASEPRI, r3
 800739e:	f3bf 8f6f 	isb	sy
 80073a2:	f3bf 8f4f 	dsb	sy
 80073a6:	627b      	str	r3, [r7, #36]	; 0x24
}
 80073a8:	bf00      	nop
 80073aa:	e7fe      	b.n	80073aa <xQueueGenericSend+0x5e>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 80073ac:	683b      	ldr	r3, [r7, #0]
 80073ae:	2b02      	cmp	r3, #2
 80073b0:	d103      	bne.n	80073ba <xQueueGenericSend+0x6e>
 80073b2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80073b4:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80073b6:	2b01      	cmp	r3, #1
 80073b8:	d101      	bne.n	80073be <xQueueGenericSend+0x72>
 80073ba:	2301      	movs	r3, #1
 80073bc:	e000      	b.n	80073c0 <xQueueGenericSend+0x74>
 80073be:	2300      	movs	r3, #0
 80073c0:	2b00      	cmp	r3, #0
 80073c2:	d10a      	bne.n	80073da <xQueueGenericSend+0x8e>
	__asm volatile
 80073c4:	f04f 0350 	mov.w	r3, #80	; 0x50
 80073c8:	f383 8811 	msr	BASEPRI, r3
 80073cc:	f3bf 8f6f 	isb	sy
 80073d0:	f3bf 8f4f 	dsb	sy
 80073d4:	623b      	str	r3, [r7, #32]
}
 80073d6:	bf00      	nop
 80073d8:	e7fe      	b.n	80073d8 <xQueueGenericSend+0x8c>
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 80073da:	f001 fcf3 	bl	8008dc4 <xTaskGetSchedulerState>
 80073de:	4603      	mov	r3, r0
 80073e0:	2b00      	cmp	r3, #0
 80073e2:	d102      	bne.n	80073ea <xQueueGenericSend+0x9e>
 80073e4:	687b      	ldr	r3, [r7, #4]
 80073e6:	2b00      	cmp	r3, #0
 80073e8:	d101      	bne.n	80073ee <xQueueGenericSend+0xa2>
 80073ea:	2301      	movs	r3, #1
 80073ec:	e000      	b.n	80073f0 <xQueueGenericSend+0xa4>
 80073ee:	2300      	movs	r3, #0
 80073f0:	2b00      	cmp	r3, #0
 80073f2:	d10a      	bne.n	800740a <xQueueGenericSend+0xbe>
	__asm volatile
 80073f4:	f04f 0350 	mov.w	r3, #80	; 0x50
 80073f8:	f383 8811 	msr	BASEPRI, r3
 80073fc:	f3bf 8f6f 	isb	sy
 8007400:	f3bf 8f4f 	dsb	sy
 8007404:	61fb      	str	r3, [r7, #28]
}
 8007406:	bf00      	nop
 8007408:	e7fe      	b.n	8007408 <xQueueGenericSend+0xbc>
	/*lint -save -e904 This function relaxes the coding standard somewhat to
	allow return statements within the function itself.  This is done in the
	interest of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 800740a:	f002 fb33 	bl	8009a74 <vPortEnterCritical>
		{
			/* Is there room on the queue now?  The running task must be the
			highest priority task wanting to access the queue.  If the head item
			in the queue is to be overwritten then it does not matter if the
			queue is full. */
			if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 800740e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007410:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8007412:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007414:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8007416:	429a      	cmp	r2, r3
 8007418:	d302      	bcc.n	8007420 <xQueueGenericSend+0xd4>
 800741a:	683b      	ldr	r3, [r7, #0]
 800741c:	2b02      	cmp	r3, #2
 800741e:	d129      	bne.n	8007474 <xQueueGenericSend+0x128>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					xYieldRequired = prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 8007420:	683a      	ldr	r2, [r7, #0]
 8007422:	68b9      	ldr	r1, [r7, #8]
 8007424:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8007426:	f000 fc5e 	bl	8007ce6 <prvCopyDataToQueue>
 800742a:	62f8      	str	r0, [r7, #44]	; 0x2c

					/* If there was a task waiting for data to arrive on the
					queue then unblock it now. */
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 800742c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800742e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007430:	2b00      	cmp	r3, #0
 8007432:	d010      	beq.n	8007456 <xQueueGenericSend+0x10a>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8007434:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007436:	3324      	adds	r3, #36	; 0x24
 8007438:	4618      	mov	r0, r3
 800743a:	f001 fb03 	bl	8008a44 <xTaskRemoveFromEventList>
 800743e:	4603      	mov	r3, r0
 8007440:	2b00      	cmp	r3, #0
 8007442:	d013      	beq.n	800746c <xQueueGenericSend+0x120>
						{
							/* The unblocked task has a priority higher than
							our own so yield immediately.  Yes it is ok to do
							this from within the critical section - the kernel
							takes care of that. */
							queueYIELD_IF_USING_PREEMPTION();
 8007444:	4b3f      	ldr	r3, [pc, #252]	; (8007544 <xQueueGenericSend+0x1f8>)
 8007446:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800744a:	601a      	str	r2, [r3, #0]
 800744c:	f3bf 8f4f 	dsb	sy
 8007450:	f3bf 8f6f 	isb	sy
 8007454:	e00a      	b.n	800746c <xQueueGenericSend+0x120>
						else
						{
							mtCOVERAGE_TEST_MARKER();
						}
					}
					else if( xYieldRequired != pdFALSE )
 8007456:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007458:	2b00      	cmp	r3, #0
 800745a:	d007      	beq.n	800746c <xQueueGenericSend+0x120>
					{
						/* This path is a special case that will only get
						executed if the task was holding multiple mutexes and
						the mutexes were given back in an order that is
						different to that in which they were taken. */
						queueYIELD_IF_USING_PREEMPTION();
 800745c:	4b39      	ldr	r3, [pc, #228]	; (8007544 <xQueueGenericSend+0x1f8>)
 800745e:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8007462:	601a      	str	r2, [r3, #0]
 8007464:	f3bf 8f4f 	dsb	sy
 8007468:	f3bf 8f6f 	isb	sy
						mtCOVERAGE_TEST_MARKER();
					}
				}
				#endif /* configUSE_QUEUE_SETS */

				taskEXIT_CRITICAL();
 800746c:	f002 fb32 	bl	8009ad4 <vPortExitCritical>
				return pdPASS;
 8007470:	2301      	movs	r3, #1
 8007472:	e063      	b.n	800753c <xQueueGenericSend+0x1f0>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 8007474:	687b      	ldr	r3, [r7, #4]
 8007476:	2b00      	cmp	r3, #0
 8007478:	d103      	bne.n	8007482 <xQueueGenericSend+0x136>
				{
					/* The queue was full and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 800747a:	f002 fb2b 	bl	8009ad4 <vPortExitCritical>

					/* Return to the original privilege level before exiting
					the function. */
					traceQUEUE_SEND_FAILED( pxQueue );
					return errQUEUE_FULL;
 800747e:	2300      	movs	r3, #0
 8007480:	e05c      	b.n	800753c <xQueueGenericSend+0x1f0>
				}
				else if( xEntryTimeSet == pdFALSE )
 8007482:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8007484:	2b00      	cmp	r3, #0
 8007486:	d106      	bne.n	8007496 <xQueueGenericSend+0x14a>
				{
					/* The queue was full and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 8007488:	f107 0314 	add.w	r3, r7, #20
 800748c:	4618      	mov	r0, r3
 800748e:	f001 fb3d 	bl	8008b0c <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 8007492:	2301      	movs	r3, #1
 8007494:	637b      	str	r3, [r7, #52]	; 0x34
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 8007496:	f002 fb1d 	bl	8009ad4 <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 800749a:	f001 f88b 	bl	80085b4 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 800749e:	f002 fae9 	bl	8009a74 <vPortEnterCritical>
 80074a2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80074a4:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 80074a8:	b25b      	sxtb	r3, r3
 80074aa:	f1b3 3fff 	cmp.w	r3, #4294967295
 80074ae:	d103      	bne.n	80074b8 <xQueueGenericSend+0x16c>
 80074b0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80074b2:	2200      	movs	r2, #0
 80074b4:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 80074b8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80074ba:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 80074be:	b25b      	sxtb	r3, r3
 80074c0:	f1b3 3fff 	cmp.w	r3, #4294967295
 80074c4:	d103      	bne.n	80074ce <xQueueGenericSend+0x182>
 80074c6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80074c8:	2200      	movs	r2, #0
 80074ca:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 80074ce:	f002 fb01 	bl	8009ad4 <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 80074d2:	1d3a      	adds	r2, r7, #4
 80074d4:	f107 0314 	add.w	r3, r7, #20
 80074d8:	4611      	mov	r1, r2
 80074da:	4618      	mov	r0, r3
 80074dc:	f001 fb2c 	bl	8008b38 <xTaskCheckForTimeOut>
 80074e0:	4603      	mov	r3, r0
 80074e2:	2b00      	cmp	r3, #0
 80074e4:	d124      	bne.n	8007530 <xQueueGenericSend+0x1e4>
		{
			if( prvIsQueueFull( pxQueue ) != pdFALSE )
 80074e6:	6b38      	ldr	r0, [r7, #48]	; 0x30
 80074e8:	f000 fcf5 	bl	8007ed6 <prvIsQueueFull>
 80074ec:	4603      	mov	r3, r0
 80074ee:	2b00      	cmp	r3, #0
 80074f0:	d018      	beq.n	8007524 <xQueueGenericSend+0x1d8>
			{
				traceBLOCKING_ON_QUEUE_SEND( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToSend ), xTicksToWait );
 80074f2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80074f4:	3310      	adds	r3, #16
 80074f6:	687a      	ldr	r2, [r7, #4]
 80074f8:	4611      	mov	r1, r2
 80074fa:	4618      	mov	r0, r3
 80074fc:	f001 fa52 	bl	80089a4 <vTaskPlaceOnEventList>
				/* Unlocking the queue means queue events can effect the
				event list.  It is possible that interrupts occurring now
				remove this task from the event list again - but as the
				scheduler is suspended the task will go onto the pending
				ready last instead of the actual ready list. */
				prvUnlockQueue( pxQueue );
 8007500:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8007502:	f000 fc80 	bl	8007e06 <prvUnlockQueue>
				/* Resuming the scheduler will move tasks from the pending
				ready list into the ready list - so it is feasible that this
				task is already in a ready list before it yields - in which
				case the yield will not cause a context switch unless there
				is also a higher priority task in the pending ready list. */
				if( xTaskResumeAll() == pdFALSE )
 8007506:	f001 f863 	bl	80085d0 <xTaskResumeAll>
 800750a:	4603      	mov	r3, r0
 800750c:	2b00      	cmp	r3, #0
 800750e:	f47f af7c 	bne.w	800740a <xQueueGenericSend+0xbe>
				{
					portYIELD_WITHIN_API();
 8007512:	4b0c      	ldr	r3, [pc, #48]	; (8007544 <xQueueGenericSend+0x1f8>)
 8007514:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8007518:	601a      	str	r2, [r3, #0]
 800751a:	f3bf 8f4f 	dsb	sy
 800751e:	f3bf 8f6f 	isb	sy
 8007522:	e772      	b.n	800740a <xQueueGenericSend+0xbe>
				}
			}
			else
			{
				/* Try again. */
				prvUnlockQueue( pxQueue );
 8007524:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8007526:	f000 fc6e 	bl	8007e06 <prvUnlockQueue>
				( void ) xTaskResumeAll();
 800752a:	f001 f851 	bl	80085d0 <xTaskResumeAll>
 800752e:	e76c      	b.n	800740a <xQueueGenericSend+0xbe>
			}
		}
		else
		{
			/* The timeout has expired. */
			prvUnlockQueue( pxQueue );
 8007530:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8007532:	f000 fc68 	bl	8007e06 <prvUnlockQueue>
			( void ) xTaskResumeAll();
 8007536:	f001 f84b 	bl	80085d0 <xTaskResumeAll>

			traceQUEUE_SEND_FAILED( pxQueue );
			return errQUEUE_FULL;
 800753a:	2300      	movs	r3, #0
		}
	} /*lint -restore */
}
 800753c:	4618      	mov	r0, r3
 800753e:	3738      	adds	r7, #56	; 0x38
 8007540:	46bd      	mov	sp, r7
 8007542:	bd80      	pop	{r7, pc}
 8007544:	e000ed04 	.word	0xe000ed04

08007548 <xQueueGenericSendFromISR>:
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSendFromISR( QueueHandle_t xQueue, const void * const pvItemToQueue, BaseType_t * const pxHigherPriorityTaskWoken, const BaseType_t xCopyPosition )
{
 8007548:	b580      	push	{r7, lr}
 800754a:	b090      	sub	sp, #64	; 0x40
 800754c:	af00      	add	r7, sp, #0
 800754e:	60f8      	str	r0, [r7, #12]
 8007550:	60b9      	str	r1, [r7, #8]
 8007552:	607a      	str	r2, [r7, #4]
 8007554:	603b      	str	r3, [r7, #0]
BaseType_t xReturn;
UBaseType_t uxSavedInterruptStatus;
Queue_t * const pxQueue = xQueue;
 8007556:	68fb      	ldr	r3, [r7, #12]
 8007558:	63bb      	str	r3, [r7, #56]	; 0x38

	configASSERT( pxQueue );
 800755a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800755c:	2b00      	cmp	r3, #0
 800755e:	d10a      	bne.n	8007576 <xQueueGenericSendFromISR+0x2e>
	__asm volatile
 8007560:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007564:	f383 8811 	msr	BASEPRI, r3
 8007568:	f3bf 8f6f 	isb	sy
 800756c:	f3bf 8f4f 	dsb	sy
 8007570:	62bb      	str	r3, [r7, #40]	; 0x28
}
 8007572:	bf00      	nop
 8007574:	e7fe      	b.n	8007574 <xQueueGenericSendFromISR+0x2c>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8007576:	68bb      	ldr	r3, [r7, #8]
 8007578:	2b00      	cmp	r3, #0
 800757a:	d103      	bne.n	8007584 <xQueueGenericSendFromISR+0x3c>
 800757c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800757e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007580:	2b00      	cmp	r3, #0
 8007582:	d101      	bne.n	8007588 <xQueueGenericSendFromISR+0x40>
 8007584:	2301      	movs	r3, #1
 8007586:	e000      	b.n	800758a <xQueueGenericSendFromISR+0x42>
 8007588:	2300      	movs	r3, #0
 800758a:	2b00      	cmp	r3, #0
 800758c:	d10a      	bne.n	80075a4 <xQueueGenericSendFromISR+0x5c>
	__asm volatile
 800758e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007592:	f383 8811 	msr	BASEPRI, r3
 8007596:	f3bf 8f6f 	isb	sy
 800759a:	f3bf 8f4f 	dsb	sy
 800759e:	627b      	str	r3, [r7, #36]	; 0x24
}
 80075a0:	bf00      	nop
 80075a2:	e7fe      	b.n	80075a2 <xQueueGenericSendFromISR+0x5a>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 80075a4:	683b      	ldr	r3, [r7, #0]
 80075a6:	2b02      	cmp	r3, #2
 80075a8:	d103      	bne.n	80075b2 <xQueueGenericSendFromISR+0x6a>
 80075aa:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80075ac:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80075ae:	2b01      	cmp	r3, #1
 80075b0:	d101      	bne.n	80075b6 <xQueueGenericSendFromISR+0x6e>
 80075b2:	2301      	movs	r3, #1
 80075b4:	e000      	b.n	80075b8 <xQueueGenericSendFromISR+0x70>
 80075b6:	2300      	movs	r3, #0
 80075b8:	2b00      	cmp	r3, #0
 80075ba:	d10a      	bne.n	80075d2 <xQueueGenericSendFromISR+0x8a>
	__asm volatile
 80075bc:	f04f 0350 	mov.w	r3, #80	; 0x50
 80075c0:	f383 8811 	msr	BASEPRI, r3
 80075c4:	f3bf 8f6f 	isb	sy
 80075c8:	f3bf 8f4f 	dsb	sy
 80075cc:	623b      	str	r3, [r7, #32]
}
 80075ce:	bf00      	nop
 80075d0:	e7fe      	b.n	80075d0 <xQueueGenericSendFromISR+0x88>
	that have been assigned a priority at or (logically) below the maximum
	system call	interrupt priority.  FreeRTOS maintains a separate interrupt
	safe API to ensure interrupt entry is as fast and as simple as possible.
	More information (albeit Cortex-M specific) is provided on the following
	link: http://www.freertos.org/RTOS-Cortex-M3-M4.html */
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 80075d2:	f002 fb31 	bl	8009c38 <vPortValidateInterruptPriority>

portFORCE_INLINE static uint32_t ulPortRaiseBASEPRI( void )
{
uint32_t ulOriginalBASEPRI, ulNewBASEPRI;

	__asm volatile
 80075d6:	f3ef 8211 	mrs	r2, BASEPRI
 80075da:	f04f 0350 	mov.w	r3, #80	; 0x50
 80075de:	f383 8811 	msr	BASEPRI, r3
 80075e2:	f3bf 8f6f 	isb	sy
 80075e6:	f3bf 8f4f 	dsb	sy
 80075ea:	61fa      	str	r2, [r7, #28]
 80075ec:	61bb      	str	r3, [r7, #24]
		:"=r" (ulOriginalBASEPRI), "=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
	);

	/* This return will not be reached but is necessary to prevent compiler
	warnings. */
	return ulOriginalBASEPRI;
 80075ee:	69fb      	ldr	r3, [r7, #28]
	/* Similar to xQueueGenericSend, except without blocking if there is no room
	in the queue.  Also don't directly wake a task that was blocked on a queue
	read, instead return a flag to say whether a context switch is required or
	not (i.e. has a task with a higher priority than us been woken by this
	post). */
	uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 80075f0:	637b      	str	r3, [r7, #52]	; 0x34
	{
		if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 80075f2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80075f4:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 80075f6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80075f8:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80075fa:	429a      	cmp	r2, r3
 80075fc:	d302      	bcc.n	8007604 <xQueueGenericSendFromISR+0xbc>
 80075fe:	683b      	ldr	r3, [r7, #0]
 8007600:	2b02      	cmp	r3, #2
 8007602:	d12f      	bne.n	8007664 <xQueueGenericSendFromISR+0x11c>
		{
			const int8_t cTxLock = pxQueue->cTxLock;
 8007604:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007606:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 800760a:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
			const UBaseType_t uxPreviousMessagesWaiting = pxQueue->uxMessagesWaiting;
 800760e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007610:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007612:	62fb      	str	r3, [r7, #44]	; 0x2c
			/* Semaphores use xQueueGiveFromISR(), so pxQueue will not be a
			semaphore or mutex.  That means prvCopyDataToQueue() cannot result
			in a task disinheriting a priority and prvCopyDataToQueue() can be
			called here even though the disinherit function does not check if
			the scheduler is suspended before accessing the ready lists. */
			( void ) prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 8007614:	683a      	ldr	r2, [r7, #0]
 8007616:	68b9      	ldr	r1, [r7, #8]
 8007618:	6bb8      	ldr	r0, [r7, #56]	; 0x38
 800761a:	f000 fb64 	bl	8007ce6 <prvCopyDataToQueue>

			/* The event list is not altered if the queue is locked.  This will
			be done when the queue is unlocked later. */
			if( cTxLock == queueUNLOCKED )
 800761e:	f997 3033 	ldrsb.w	r3, [r7, #51]	; 0x33
 8007622:	f1b3 3fff 	cmp.w	r3, #4294967295
 8007626:	d112      	bne.n	800764e <xQueueGenericSendFromISR+0x106>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8007628:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800762a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800762c:	2b00      	cmp	r3, #0
 800762e:	d016      	beq.n	800765e <xQueueGenericSendFromISR+0x116>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8007630:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007632:	3324      	adds	r3, #36	; 0x24
 8007634:	4618      	mov	r0, r3
 8007636:	f001 fa05 	bl	8008a44 <xTaskRemoveFromEventList>
 800763a:	4603      	mov	r3, r0
 800763c:	2b00      	cmp	r3, #0
 800763e:	d00e      	beq.n	800765e <xQueueGenericSendFromISR+0x116>
						{
							/* The task waiting has a higher priority so record that a
							context	switch is required. */
							if( pxHigherPriorityTaskWoken != NULL )
 8007640:	687b      	ldr	r3, [r7, #4]
 8007642:	2b00      	cmp	r3, #0
 8007644:	d00b      	beq.n	800765e <xQueueGenericSendFromISR+0x116>
							{
								*pxHigherPriorityTaskWoken = pdTRUE;
 8007646:	687b      	ldr	r3, [r7, #4]
 8007648:	2201      	movs	r2, #1
 800764a:	601a      	str	r2, [r3, #0]
 800764c:	e007      	b.n	800765e <xQueueGenericSendFromISR+0x116>
			}
			else
			{
				/* Increment the lock count so the task that unlocks the queue
				knows that data was posted while it was locked. */
				pxQueue->cTxLock = ( int8_t ) ( cTxLock + 1 );
 800764e:	f897 3033 	ldrb.w	r3, [r7, #51]	; 0x33
 8007652:	3301      	adds	r3, #1
 8007654:	b2db      	uxtb	r3, r3
 8007656:	b25a      	sxtb	r2, r3
 8007658:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800765a:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
			}

			xReturn = pdPASS;
 800765e:	2301      	movs	r3, #1
 8007660:	63fb      	str	r3, [r7, #60]	; 0x3c
		{
 8007662:	e001      	b.n	8007668 <xQueueGenericSendFromISR+0x120>
		}
		else
		{
			traceQUEUE_SEND_FROM_ISR_FAILED( pxQueue );
			xReturn = errQUEUE_FULL;
 8007664:	2300      	movs	r3, #0
 8007666:	63fb      	str	r3, [r7, #60]	; 0x3c
 8007668:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800766a:	617b      	str	r3, [r7, #20]
}
/*-----------------------------------------------------------*/

portFORCE_INLINE static void vPortSetBASEPRI( uint32_t ulNewMaskValue )
{
	__asm volatile
 800766c:	697b      	ldr	r3, [r7, #20]
 800766e:	f383 8811 	msr	BASEPRI, r3
	(
		"	msr basepri, %0	" :: "r" ( ulNewMaskValue ) : "memory"
	);
}
 8007672:	bf00      	nop
		}
	}
	portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

	return xReturn;
 8007674:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
}
 8007676:	4618      	mov	r0, r3
 8007678:	3740      	adds	r7, #64	; 0x40
 800767a:	46bd      	mov	sp, r7
 800767c:	bd80      	pop	{r7, pc}

0800767e <xQueueGiveFromISR>:
/*-----------------------------------------------------------*/

BaseType_t xQueueGiveFromISR( QueueHandle_t xQueue, BaseType_t * const pxHigherPriorityTaskWoken )
{
 800767e:	b580      	push	{r7, lr}
 8007680:	b08e      	sub	sp, #56	; 0x38
 8007682:	af00      	add	r7, sp, #0
 8007684:	6078      	str	r0, [r7, #4]
 8007686:	6039      	str	r1, [r7, #0]
BaseType_t xReturn;
UBaseType_t uxSavedInterruptStatus;
Queue_t * const pxQueue = xQueue;
 8007688:	687b      	ldr	r3, [r7, #4]
 800768a:	633b      	str	r3, [r7, #48]	; 0x30
	item size is 0.  Don't directly wake a task that was blocked on a queue
	read, instead return a flag to say whether a context switch is required or
	not (i.e. has a task with a higher priority than us been woken by this
	post). */

	configASSERT( pxQueue );
 800768c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800768e:	2b00      	cmp	r3, #0
 8007690:	d10a      	bne.n	80076a8 <xQueueGiveFromISR+0x2a>
	__asm volatile
 8007692:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007696:	f383 8811 	msr	BASEPRI, r3
 800769a:	f3bf 8f6f 	isb	sy
 800769e:	f3bf 8f4f 	dsb	sy
 80076a2:	623b      	str	r3, [r7, #32]
}
 80076a4:	bf00      	nop
 80076a6:	e7fe      	b.n	80076a6 <xQueueGiveFromISR+0x28>

	/* xQueueGenericSendFromISR() should be used instead of xQueueGiveFromISR()
	if the item size is not 0. */
	configASSERT( pxQueue->uxItemSize == 0 );
 80076a8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80076aa:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80076ac:	2b00      	cmp	r3, #0
 80076ae:	d00a      	beq.n	80076c6 <xQueueGiveFromISR+0x48>
	__asm volatile
 80076b0:	f04f 0350 	mov.w	r3, #80	; 0x50
 80076b4:	f383 8811 	msr	BASEPRI, r3
 80076b8:	f3bf 8f6f 	isb	sy
 80076bc:	f3bf 8f4f 	dsb	sy
 80076c0:	61fb      	str	r3, [r7, #28]
}
 80076c2:	bf00      	nop
 80076c4:	e7fe      	b.n	80076c4 <xQueueGiveFromISR+0x46>

	/* Normally a mutex would not be given from an interrupt, especially if
	there is a mutex holder, as priority inheritance makes no sense for an
	interrupts, only tasks. */
	configASSERT( !( ( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX ) && ( pxQueue->u.xSemaphore.xMutexHolder != NULL ) ) );
 80076c6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80076c8:	681b      	ldr	r3, [r3, #0]
 80076ca:	2b00      	cmp	r3, #0
 80076cc:	d103      	bne.n	80076d6 <xQueueGiveFromISR+0x58>
 80076ce:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80076d0:	689b      	ldr	r3, [r3, #8]
 80076d2:	2b00      	cmp	r3, #0
 80076d4:	d101      	bne.n	80076da <xQueueGiveFromISR+0x5c>
 80076d6:	2301      	movs	r3, #1
 80076d8:	e000      	b.n	80076dc <xQueueGiveFromISR+0x5e>
 80076da:	2300      	movs	r3, #0
 80076dc:	2b00      	cmp	r3, #0
 80076de:	d10a      	bne.n	80076f6 <xQueueGiveFromISR+0x78>
	__asm volatile
 80076e0:	f04f 0350 	mov.w	r3, #80	; 0x50
 80076e4:	f383 8811 	msr	BASEPRI, r3
 80076e8:	f3bf 8f6f 	isb	sy
 80076ec:	f3bf 8f4f 	dsb	sy
 80076f0:	61bb      	str	r3, [r7, #24]
}
 80076f2:	bf00      	nop
 80076f4:	e7fe      	b.n	80076f4 <xQueueGiveFromISR+0x76>
	that have been assigned a priority at or (logically) below the maximum
	system call	interrupt priority.  FreeRTOS maintains a separate interrupt
	safe API to ensure interrupt entry is as fast and as simple as possible.
	More information (albeit Cortex-M specific) is provided on the following
	link: http://www.freertos.org/RTOS-Cortex-M3-M4.html */
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 80076f6:	f002 fa9f 	bl	8009c38 <vPortValidateInterruptPriority>
	__asm volatile
 80076fa:	f3ef 8211 	mrs	r2, BASEPRI
 80076fe:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007702:	f383 8811 	msr	BASEPRI, r3
 8007706:	f3bf 8f6f 	isb	sy
 800770a:	f3bf 8f4f 	dsb	sy
 800770e:	617a      	str	r2, [r7, #20]
 8007710:	613b      	str	r3, [r7, #16]
	return ulOriginalBASEPRI;
 8007712:	697b      	ldr	r3, [r7, #20]

	uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 8007714:	62fb      	str	r3, [r7, #44]	; 0x2c
	{
		const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 8007716:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007718:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800771a:	62bb      	str	r3, [r7, #40]	; 0x28

		/* When the queue is used to implement a semaphore no data is ever
		moved through the queue but it is still valid to see if the queue 'has
		space'. */
		if( uxMessagesWaiting < pxQueue->uxLength )
 800771c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800771e:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8007720:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8007722:	429a      	cmp	r2, r3
 8007724:	d22b      	bcs.n	800777e <xQueueGiveFromISR+0x100>
		{
			const int8_t cTxLock = pxQueue->cTxLock;
 8007726:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007728:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 800772c:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
			holder - and if there is a mutex holder then the mutex cannot be
			given from an ISR.  As this is the ISR version of the function it
			can be assumed there is no mutex holder and no need to determine if
			priority disinheritance is needed.  Simply increase the count of
			messages (semaphores) available. */
			pxQueue->uxMessagesWaiting = uxMessagesWaiting + ( UBaseType_t ) 1;
 8007730:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007732:	1c5a      	adds	r2, r3, #1
 8007734:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007736:	639a      	str	r2, [r3, #56]	; 0x38

			/* The event list is not altered if the queue is locked.  This will
			be done when the queue is unlocked later. */
			if( cTxLock == queueUNLOCKED )
 8007738:	f997 3027 	ldrsb.w	r3, [r7, #39]	; 0x27
 800773c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8007740:	d112      	bne.n	8007768 <xQueueGiveFromISR+0xea>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8007742:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007744:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007746:	2b00      	cmp	r3, #0
 8007748:	d016      	beq.n	8007778 <xQueueGiveFromISR+0xfa>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 800774a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800774c:	3324      	adds	r3, #36	; 0x24
 800774e:	4618      	mov	r0, r3
 8007750:	f001 f978 	bl	8008a44 <xTaskRemoveFromEventList>
 8007754:	4603      	mov	r3, r0
 8007756:	2b00      	cmp	r3, #0
 8007758:	d00e      	beq.n	8007778 <xQueueGiveFromISR+0xfa>
						{
							/* The task waiting has a higher priority so record that a
							context	switch is required. */
							if( pxHigherPriorityTaskWoken != NULL )
 800775a:	683b      	ldr	r3, [r7, #0]
 800775c:	2b00      	cmp	r3, #0
 800775e:	d00b      	beq.n	8007778 <xQueueGiveFromISR+0xfa>
							{
								*pxHigherPriorityTaskWoken = pdTRUE;
 8007760:	683b      	ldr	r3, [r7, #0]
 8007762:	2201      	movs	r2, #1
 8007764:	601a      	str	r2, [r3, #0]
 8007766:	e007      	b.n	8007778 <xQueueGiveFromISR+0xfa>
			}
			else
			{
				/* Increment the lock count so the task that unlocks the queue
				knows that data was posted while it was locked. */
				pxQueue->cTxLock = ( int8_t ) ( cTxLock + 1 );
 8007768:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800776c:	3301      	adds	r3, #1
 800776e:	b2db      	uxtb	r3, r3
 8007770:	b25a      	sxtb	r2, r3
 8007772:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007774:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
			}

			xReturn = pdPASS;
 8007778:	2301      	movs	r3, #1
 800777a:	637b      	str	r3, [r7, #52]	; 0x34
 800777c:	e001      	b.n	8007782 <xQueueGiveFromISR+0x104>
		}
		else
		{
			traceQUEUE_SEND_FROM_ISR_FAILED( pxQueue );
			xReturn = errQUEUE_FULL;
 800777e:	2300      	movs	r3, #0
 8007780:	637b      	str	r3, [r7, #52]	; 0x34
 8007782:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007784:	60fb      	str	r3, [r7, #12]
	__asm volatile
 8007786:	68fb      	ldr	r3, [r7, #12]
 8007788:	f383 8811 	msr	BASEPRI, r3
}
 800778c:	bf00      	nop
		}
	}
	portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

	return xReturn;
 800778e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
}
 8007790:	4618      	mov	r0, r3
 8007792:	3738      	adds	r7, #56	; 0x38
 8007794:	46bd      	mov	sp, r7
 8007796:	bd80      	pop	{r7, pc}

08007798 <xQueueReceive>:
/*-----------------------------------------------------------*/

BaseType_t xQueueReceive( QueueHandle_t xQueue, void * const pvBuffer, TickType_t xTicksToWait )
{
 8007798:	b580      	push	{r7, lr}
 800779a:	b08c      	sub	sp, #48	; 0x30
 800779c:	af00      	add	r7, sp, #0
 800779e:	60f8      	str	r0, [r7, #12]
 80077a0:	60b9      	str	r1, [r7, #8]
 80077a2:	607a      	str	r2, [r7, #4]
BaseType_t xEntryTimeSet = pdFALSE;
 80077a4:	2300      	movs	r3, #0
 80077a6:	62fb      	str	r3, [r7, #44]	; 0x2c
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 80077a8:	68fb      	ldr	r3, [r7, #12]
 80077aa:	62bb      	str	r3, [r7, #40]	; 0x28

	/* Check the pointer is not NULL. */
	configASSERT( ( pxQueue ) );
 80077ac:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80077ae:	2b00      	cmp	r3, #0
 80077b0:	d10a      	bne.n	80077c8 <xQueueReceive+0x30>
	__asm volatile
 80077b2:	f04f 0350 	mov.w	r3, #80	; 0x50
 80077b6:	f383 8811 	msr	BASEPRI, r3
 80077ba:	f3bf 8f6f 	isb	sy
 80077be:	f3bf 8f4f 	dsb	sy
 80077c2:	623b      	str	r3, [r7, #32]
}
 80077c4:	bf00      	nop
 80077c6:	e7fe      	b.n	80077c6 <xQueueReceive+0x2e>

	/* The buffer into which data is received can only be NULL if the data size
	is zero (so no data is copied into the buffer. */
	configASSERT( !( ( ( pvBuffer ) == NULL ) && ( ( pxQueue )->uxItemSize != ( UBaseType_t ) 0U ) ) );
 80077c8:	68bb      	ldr	r3, [r7, #8]
 80077ca:	2b00      	cmp	r3, #0
 80077cc:	d103      	bne.n	80077d6 <xQueueReceive+0x3e>
 80077ce:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80077d0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80077d2:	2b00      	cmp	r3, #0
 80077d4:	d101      	bne.n	80077da <xQueueReceive+0x42>
 80077d6:	2301      	movs	r3, #1
 80077d8:	e000      	b.n	80077dc <xQueueReceive+0x44>
 80077da:	2300      	movs	r3, #0
 80077dc:	2b00      	cmp	r3, #0
 80077de:	d10a      	bne.n	80077f6 <xQueueReceive+0x5e>
	__asm volatile
 80077e0:	f04f 0350 	mov.w	r3, #80	; 0x50
 80077e4:	f383 8811 	msr	BASEPRI, r3
 80077e8:	f3bf 8f6f 	isb	sy
 80077ec:	f3bf 8f4f 	dsb	sy
 80077f0:	61fb      	str	r3, [r7, #28]
}
 80077f2:	bf00      	nop
 80077f4:	e7fe      	b.n	80077f4 <xQueueReceive+0x5c>

	/* Cannot block if the scheduler is suspended. */
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 80077f6:	f001 fae5 	bl	8008dc4 <xTaskGetSchedulerState>
 80077fa:	4603      	mov	r3, r0
 80077fc:	2b00      	cmp	r3, #0
 80077fe:	d102      	bne.n	8007806 <xQueueReceive+0x6e>
 8007800:	687b      	ldr	r3, [r7, #4]
 8007802:	2b00      	cmp	r3, #0
 8007804:	d101      	bne.n	800780a <xQueueReceive+0x72>
 8007806:	2301      	movs	r3, #1
 8007808:	e000      	b.n	800780c <xQueueReceive+0x74>
 800780a:	2300      	movs	r3, #0
 800780c:	2b00      	cmp	r3, #0
 800780e:	d10a      	bne.n	8007826 <xQueueReceive+0x8e>
	__asm volatile
 8007810:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007814:	f383 8811 	msr	BASEPRI, r3
 8007818:	f3bf 8f6f 	isb	sy
 800781c:	f3bf 8f4f 	dsb	sy
 8007820:	61bb      	str	r3, [r7, #24]
}
 8007822:	bf00      	nop
 8007824:	e7fe      	b.n	8007824 <xQueueReceive+0x8c>
	/*lint -save -e904  This function relaxes the coding standard somewhat to
	allow return statements within the function itself.  This is done in the
	interest of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 8007826:	f002 f925 	bl	8009a74 <vPortEnterCritical>
		{
			const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 800782a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800782c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800782e:	627b      	str	r3, [r7, #36]	; 0x24

			/* Is there data in the queue now?  To be running the calling task
			must be the highest priority task wanting to access the queue. */
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 8007830:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007832:	2b00      	cmp	r3, #0
 8007834:	d01f      	beq.n	8007876 <xQueueReceive+0xde>
			{
				/* Data available, remove one item. */
				prvCopyDataFromQueue( pxQueue, pvBuffer );
 8007836:	68b9      	ldr	r1, [r7, #8]
 8007838:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800783a:	f000 fabe 	bl	8007dba <prvCopyDataFromQueue>
				traceQUEUE_RECEIVE( pxQueue );
				pxQueue->uxMessagesWaiting = uxMessagesWaiting - ( UBaseType_t ) 1;
 800783e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007840:	1e5a      	subs	r2, r3, #1
 8007842:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007844:	639a      	str	r2, [r3, #56]	; 0x38

				/* There is now space in the queue, were any tasks waiting to
				post to the queue?  If so, unblock the highest priority waiting
				task. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8007846:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007848:	691b      	ldr	r3, [r3, #16]
 800784a:	2b00      	cmp	r3, #0
 800784c:	d00f      	beq.n	800786e <xQueueReceive+0xd6>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 800784e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007850:	3310      	adds	r3, #16
 8007852:	4618      	mov	r0, r3
 8007854:	f001 f8f6 	bl	8008a44 <xTaskRemoveFromEventList>
 8007858:	4603      	mov	r3, r0
 800785a:	2b00      	cmp	r3, #0
 800785c:	d007      	beq.n	800786e <xQueueReceive+0xd6>
					{
						queueYIELD_IF_USING_PREEMPTION();
 800785e:	4b3d      	ldr	r3, [pc, #244]	; (8007954 <xQueueReceive+0x1bc>)
 8007860:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8007864:	601a      	str	r2, [r3, #0]
 8007866:	f3bf 8f4f 	dsb	sy
 800786a:	f3bf 8f6f 	isb	sy
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				taskEXIT_CRITICAL();
 800786e:	f002 f931 	bl	8009ad4 <vPortExitCritical>
				return pdPASS;
 8007872:	2301      	movs	r3, #1
 8007874:	e069      	b.n	800794a <xQueueReceive+0x1b2>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 8007876:	687b      	ldr	r3, [r7, #4]
 8007878:	2b00      	cmp	r3, #0
 800787a:	d103      	bne.n	8007884 <xQueueReceive+0xec>
				{
					/* The queue was empty and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 800787c:	f002 f92a 	bl	8009ad4 <vPortExitCritical>
					traceQUEUE_RECEIVE_FAILED( pxQueue );
					return errQUEUE_EMPTY;
 8007880:	2300      	movs	r3, #0
 8007882:	e062      	b.n	800794a <xQueueReceive+0x1b2>
				}
				else if( xEntryTimeSet == pdFALSE )
 8007884:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007886:	2b00      	cmp	r3, #0
 8007888:	d106      	bne.n	8007898 <xQueueReceive+0x100>
				{
					/* The queue was empty and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 800788a:	f107 0310 	add.w	r3, r7, #16
 800788e:	4618      	mov	r0, r3
 8007890:	f001 f93c 	bl	8008b0c <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 8007894:	2301      	movs	r3, #1
 8007896:	62fb      	str	r3, [r7, #44]	; 0x2c
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 8007898:	f002 f91c 	bl	8009ad4 <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 800789c:	f000 fe8a 	bl	80085b4 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 80078a0:	f002 f8e8 	bl	8009a74 <vPortEnterCritical>
 80078a4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80078a6:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 80078aa:	b25b      	sxtb	r3, r3
 80078ac:	f1b3 3fff 	cmp.w	r3, #4294967295
 80078b0:	d103      	bne.n	80078ba <xQueueReceive+0x122>
 80078b2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80078b4:	2200      	movs	r2, #0
 80078b6:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 80078ba:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80078bc:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 80078c0:	b25b      	sxtb	r3, r3
 80078c2:	f1b3 3fff 	cmp.w	r3, #4294967295
 80078c6:	d103      	bne.n	80078d0 <xQueueReceive+0x138>
 80078c8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80078ca:	2200      	movs	r2, #0
 80078cc:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 80078d0:	f002 f900 	bl	8009ad4 <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 80078d4:	1d3a      	adds	r2, r7, #4
 80078d6:	f107 0310 	add.w	r3, r7, #16
 80078da:	4611      	mov	r1, r2
 80078dc:	4618      	mov	r0, r3
 80078de:	f001 f92b 	bl	8008b38 <xTaskCheckForTimeOut>
 80078e2:	4603      	mov	r3, r0
 80078e4:	2b00      	cmp	r3, #0
 80078e6:	d123      	bne.n	8007930 <xQueueReceive+0x198>
		{
			/* The timeout has not expired.  If the queue is still empty place
			the task on the list of tasks waiting to receive from the queue. */
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 80078e8:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 80078ea:	f000 fade 	bl	8007eaa <prvIsQueueEmpty>
 80078ee:	4603      	mov	r3, r0
 80078f0:	2b00      	cmp	r3, #0
 80078f2:	d017      	beq.n	8007924 <xQueueReceive+0x18c>
			{
				traceBLOCKING_ON_QUEUE_RECEIVE( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait );
 80078f4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80078f6:	3324      	adds	r3, #36	; 0x24
 80078f8:	687a      	ldr	r2, [r7, #4]
 80078fa:	4611      	mov	r1, r2
 80078fc:	4618      	mov	r0, r3
 80078fe:	f001 f851 	bl	80089a4 <vTaskPlaceOnEventList>
				prvUnlockQueue( pxQueue );
 8007902:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8007904:	f000 fa7f 	bl	8007e06 <prvUnlockQueue>
				if( xTaskResumeAll() == pdFALSE )
 8007908:	f000 fe62 	bl	80085d0 <xTaskResumeAll>
 800790c:	4603      	mov	r3, r0
 800790e:	2b00      	cmp	r3, #0
 8007910:	d189      	bne.n	8007826 <xQueueReceive+0x8e>
				{
					portYIELD_WITHIN_API();
 8007912:	4b10      	ldr	r3, [pc, #64]	; (8007954 <xQueueReceive+0x1bc>)
 8007914:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8007918:	601a      	str	r2, [r3, #0]
 800791a:	f3bf 8f4f 	dsb	sy
 800791e:	f3bf 8f6f 	isb	sy
 8007922:	e780      	b.n	8007826 <xQueueReceive+0x8e>
			}
			else
			{
				/* The queue contains data again.  Loop back to try and read the
				data. */
				prvUnlockQueue( pxQueue );
 8007924:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8007926:	f000 fa6e 	bl	8007e06 <prvUnlockQueue>
				( void ) xTaskResumeAll();
 800792a:	f000 fe51 	bl	80085d0 <xTaskResumeAll>
 800792e:	e77a      	b.n	8007826 <xQueueReceive+0x8e>
		}
		else
		{
			/* Timed out.  If there is no data in the queue exit, otherwise loop
			back and attempt to read the data. */
			prvUnlockQueue( pxQueue );
 8007930:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8007932:	f000 fa68 	bl	8007e06 <prvUnlockQueue>
			( void ) xTaskResumeAll();
 8007936:	f000 fe4b 	bl	80085d0 <xTaskResumeAll>

			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 800793a:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800793c:	f000 fab5 	bl	8007eaa <prvIsQueueEmpty>
 8007940:	4603      	mov	r3, r0
 8007942:	2b00      	cmp	r3, #0
 8007944:	f43f af6f 	beq.w	8007826 <xQueueReceive+0x8e>
			{
				traceQUEUE_RECEIVE_FAILED( pxQueue );
				return errQUEUE_EMPTY;
 8007948:	2300      	movs	r3, #0
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	} /*lint -restore */
}
 800794a:	4618      	mov	r0, r3
 800794c:	3730      	adds	r7, #48	; 0x30
 800794e:	46bd      	mov	sp, r7
 8007950:	bd80      	pop	{r7, pc}
 8007952:	bf00      	nop
 8007954:	e000ed04 	.word	0xe000ed04

08007958 <xQueueSemaphoreTake>:
/*-----------------------------------------------------------*/

BaseType_t xQueueSemaphoreTake( QueueHandle_t xQueue, TickType_t xTicksToWait )
{
 8007958:	b580      	push	{r7, lr}
 800795a:	b08e      	sub	sp, #56	; 0x38
 800795c:	af00      	add	r7, sp, #0
 800795e:	6078      	str	r0, [r7, #4]
 8007960:	6039      	str	r1, [r7, #0]
BaseType_t xEntryTimeSet = pdFALSE;
 8007962:	2300      	movs	r3, #0
 8007964:	637b      	str	r3, [r7, #52]	; 0x34
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 8007966:	687b      	ldr	r3, [r7, #4]
 8007968:	62fb      	str	r3, [r7, #44]	; 0x2c

#if( configUSE_MUTEXES == 1 )
	BaseType_t xInheritanceOccurred = pdFALSE;
 800796a:	2300      	movs	r3, #0
 800796c:	633b      	str	r3, [r7, #48]	; 0x30
#endif

	/* Check the queue pointer is not NULL. */
	configASSERT( ( pxQueue ) );
 800796e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007970:	2b00      	cmp	r3, #0
 8007972:	d10a      	bne.n	800798a <xQueueSemaphoreTake+0x32>
	__asm volatile
 8007974:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007978:	f383 8811 	msr	BASEPRI, r3
 800797c:	f3bf 8f6f 	isb	sy
 8007980:	f3bf 8f4f 	dsb	sy
 8007984:	623b      	str	r3, [r7, #32]
}
 8007986:	bf00      	nop
 8007988:	e7fe      	b.n	8007988 <xQueueSemaphoreTake+0x30>

	/* Check this really is a semaphore, in which case the item size will be
	0. */
	configASSERT( pxQueue->uxItemSize == 0 );
 800798a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800798c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800798e:	2b00      	cmp	r3, #0
 8007990:	d00a      	beq.n	80079a8 <xQueueSemaphoreTake+0x50>
	__asm volatile
 8007992:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007996:	f383 8811 	msr	BASEPRI, r3
 800799a:	f3bf 8f6f 	isb	sy
 800799e:	f3bf 8f4f 	dsb	sy
 80079a2:	61fb      	str	r3, [r7, #28]
}
 80079a4:	bf00      	nop
 80079a6:	e7fe      	b.n	80079a6 <xQueueSemaphoreTake+0x4e>

	/* Cannot block if the scheduler is suspended. */
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 80079a8:	f001 fa0c 	bl	8008dc4 <xTaskGetSchedulerState>
 80079ac:	4603      	mov	r3, r0
 80079ae:	2b00      	cmp	r3, #0
 80079b0:	d102      	bne.n	80079b8 <xQueueSemaphoreTake+0x60>
 80079b2:	683b      	ldr	r3, [r7, #0]
 80079b4:	2b00      	cmp	r3, #0
 80079b6:	d101      	bne.n	80079bc <xQueueSemaphoreTake+0x64>
 80079b8:	2301      	movs	r3, #1
 80079ba:	e000      	b.n	80079be <xQueueSemaphoreTake+0x66>
 80079bc:	2300      	movs	r3, #0
 80079be:	2b00      	cmp	r3, #0
 80079c0:	d10a      	bne.n	80079d8 <xQueueSemaphoreTake+0x80>
	__asm volatile
 80079c2:	f04f 0350 	mov.w	r3, #80	; 0x50
 80079c6:	f383 8811 	msr	BASEPRI, r3
 80079ca:	f3bf 8f6f 	isb	sy
 80079ce:	f3bf 8f4f 	dsb	sy
 80079d2:	61bb      	str	r3, [r7, #24]
}
 80079d4:	bf00      	nop
 80079d6:	e7fe      	b.n	80079d6 <xQueueSemaphoreTake+0x7e>
	/*lint -save -e904 This function relaxes the coding standard somewhat to allow return
	statements within the function itself.  This is done in the interest
	of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 80079d8:	f002 f84c 	bl	8009a74 <vPortEnterCritical>
		{
			/* Semaphores are queues with an item size of 0, and where the
			number of messages in the queue is the semaphore's count value. */
			const UBaseType_t uxSemaphoreCount = pxQueue->uxMessagesWaiting;
 80079dc:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80079de:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80079e0:	62bb      	str	r3, [r7, #40]	; 0x28

			/* Is there data in the queue now?  To be running the calling task
			must be the highest priority task wanting to access the queue. */
			if( uxSemaphoreCount > ( UBaseType_t ) 0 )
 80079e2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80079e4:	2b00      	cmp	r3, #0
 80079e6:	d024      	beq.n	8007a32 <xQueueSemaphoreTake+0xda>
			{
				traceQUEUE_RECEIVE( pxQueue );

				/* Semaphores are queues with a data size of zero and where the
				messages waiting is the semaphore's count.  Reduce the count. */
				pxQueue->uxMessagesWaiting = uxSemaphoreCount - ( UBaseType_t ) 1;
 80079e8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80079ea:	1e5a      	subs	r2, r3, #1
 80079ec:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80079ee:	639a      	str	r2, [r3, #56]	; 0x38

				#if ( configUSE_MUTEXES == 1 )
				{
					if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 80079f0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80079f2:	681b      	ldr	r3, [r3, #0]
 80079f4:	2b00      	cmp	r3, #0
 80079f6:	d104      	bne.n	8007a02 <xQueueSemaphoreTake+0xaa>
					{
						/* Record the information required to implement
						priority inheritance should it become necessary. */
						pxQueue->u.xSemaphore.xMutexHolder = pvTaskIncrementMutexHeldCount();
 80079f8:	f001 fb5a 	bl	80090b0 <pvTaskIncrementMutexHeldCount>
 80079fc:	4602      	mov	r2, r0
 80079fe:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007a00:	609a      	str	r2, [r3, #8]
				}
				#endif /* configUSE_MUTEXES */

				/* Check to see if other tasks are blocked waiting to give the
				semaphore, and if so, unblock the highest priority such task. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8007a02:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007a04:	691b      	ldr	r3, [r3, #16]
 8007a06:	2b00      	cmp	r3, #0
 8007a08:	d00f      	beq.n	8007a2a <xQueueSemaphoreTake+0xd2>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8007a0a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007a0c:	3310      	adds	r3, #16
 8007a0e:	4618      	mov	r0, r3
 8007a10:	f001 f818 	bl	8008a44 <xTaskRemoveFromEventList>
 8007a14:	4603      	mov	r3, r0
 8007a16:	2b00      	cmp	r3, #0
 8007a18:	d007      	beq.n	8007a2a <xQueueSemaphoreTake+0xd2>
					{
						queueYIELD_IF_USING_PREEMPTION();
 8007a1a:	4b54      	ldr	r3, [pc, #336]	; (8007b6c <xQueueSemaphoreTake+0x214>)
 8007a1c:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8007a20:	601a      	str	r2, [r3, #0]
 8007a22:	f3bf 8f4f 	dsb	sy
 8007a26:	f3bf 8f6f 	isb	sy
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				taskEXIT_CRITICAL();
 8007a2a:	f002 f853 	bl	8009ad4 <vPortExitCritical>
				return pdPASS;
 8007a2e:	2301      	movs	r3, #1
 8007a30:	e097      	b.n	8007b62 <xQueueSemaphoreTake+0x20a>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 8007a32:	683b      	ldr	r3, [r7, #0]
 8007a34:	2b00      	cmp	r3, #0
 8007a36:	d111      	bne.n	8007a5c <xQueueSemaphoreTake+0x104>
					/* For inheritance to have occurred there must have been an
					initial timeout, and an adjusted timeout cannot become 0, as
					if it were 0 the function would have exited. */
					#if( configUSE_MUTEXES == 1 )
					{
						configASSERT( xInheritanceOccurred == pdFALSE );
 8007a38:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007a3a:	2b00      	cmp	r3, #0
 8007a3c:	d00a      	beq.n	8007a54 <xQueueSemaphoreTake+0xfc>
	__asm volatile
 8007a3e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007a42:	f383 8811 	msr	BASEPRI, r3
 8007a46:	f3bf 8f6f 	isb	sy
 8007a4a:	f3bf 8f4f 	dsb	sy
 8007a4e:	617b      	str	r3, [r7, #20]
}
 8007a50:	bf00      	nop
 8007a52:	e7fe      	b.n	8007a52 <xQueueSemaphoreTake+0xfa>
					}
					#endif /* configUSE_MUTEXES */

					/* The semaphore count was 0 and no block time is specified
					(or the block time has expired) so exit now. */
					taskEXIT_CRITICAL();
 8007a54:	f002 f83e 	bl	8009ad4 <vPortExitCritical>
					traceQUEUE_RECEIVE_FAILED( pxQueue );
					return errQUEUE_EMPTY;
 8007a58:	2300      	movs	r3, #0
 8007a5a:	e082      	b.n	8007b62 <xQueueSemaphoreTake+0x20a>
				}
				else if( xEntryTimeSet == pdFALSE )
 8007a5c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8007a5e:	2b00      	cmp	r3, #0
 8007a60:	d106      	bne.n	8007a70 <xQueueSemaphoreTake+0x118>
				{
					/* The semaphore count was 0 and a block time was specified
					so configure the timeout structure ready to block. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 8007a62:	f107 030c 	add.w	r3, r7, #12
 8007a66:	4618      	mov	r0, r3
 8007a68:	f001 f850 	bl	8008b0c <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 8007a6c:	2301      	movs	r3, #1
 8007a6e:	637b      	str	r3, [r7, #52]	; 0x34
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 8007a70:	f002 f830 	bl	8009ad4 <vPortExitCritical>

		/* Interrupts and other tasks can give to and take from the semaphore
		now the critical section has been exited. */

		vTaskSuspendAll();
 8007a74:	f000 fd9e 	bl	80085b4 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 8007a78:	f001 fffc 	bl	8009a74 <vPortEnterCritical>
 8007a7c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007a7e:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8007a82:	b25b      	sxtb	r3, r3
 8007a84:	f1b3 3fff 	cmp.w	r3, #4294967295
 8007a88:	d103      	bne.n	8007a92 <xQueueSemaphoreTake+0x13a>
 8007a8a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007a8c:	2200      	movs	r2, #0
 8007a8e:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8007a92:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007a94:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8007a98:	b25b      	sxtb	r3, r3
 8007a9a:	f1b3 3fff 	cmp.w	r3, #4294967295
 8007a9e:	d103      	bne.n	8007aa8 <xQueueSemaphoreTake+0x150>
 8007aa0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007aa2:	2200      	movs	r2, #0
 8007aa4:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8007aa8:	f002 f814 	bl	8009ad4 <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 8007aac:	463a      	mov	r2, r7
 8007aae:	f107 030c 	add.w	r3, r7, #12
 8007ab2:	4611      	mov	r1, r2
 8007ab4:	4618      	mov	r0, r3
 8007ab6:	f001 f83f 	bl	8008b38 <xTaskCheckForTimeOut>
 8007aba:	4603      	mov	r3, r0
 8007abc:	2b00      	cmp	r3, #0
 8007abe:	d132      	bne.n	8007b26 <xQueueSemaphoreTake+0x1ce>
		{
			/* A block time is specified and not expired.  If the semaphore
			count is 0 then enter the Blocked state to wait for a semaphore to
			become available.  As semaphores are implemented with queues the
			queue being empty is equivalent to the semaphore count being 0. */
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 8007ac0:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 8007ac2:	f000 f9f2 	bl	8007eaa <prvIsQueueEmpty>
 8007ac6:	4603      	mov	r3, r0
 8007ac8:	2b00      	cmp	r3, #0
 8007aca:	d026      	beq.n	8007b1a <xQueueSemaphoreTake+0x1c2>
			{
				traceBLOCKING_ON_QUEUE_RECEIVE( pxQueue );

				#if ( configUSE_MUTEXES == 1 )
				{
					if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 8007acc:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007ace:	681b      	ldr	r3, [r3, #0]
 8007ad0:	2b00      	cmp	r3, #0
 8007ad2:	d109      	bne.n	8007ae8 <xQueueSemaphoreTake+0x190>
					{
						taskENTER_CRITICAL();
 8007ad4:	f001 ffce 	bl	8009a74 <vPortEnterCritical>
						{
							xInheritanceOccurred = xTaskPriorityInherit( pxQueue->u.xSemaphore.xMutexHolder );
 8007ad8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007ada:	689b      	ldr	r3, [r3, #8]
 8007adc:	4618      	mov	r0, r3
 8007ade:	f001 f98f 	bl	8008e00 <xTaskPriorityInherit>
 8007ae2:	6338      	str	r0, [r7, #48]	; 0x30
						}
						taskEXIT_CRITICAL();
 8007ae4:	f001 fff6 	bl	8009ad4 <vPortExitCritical>
						mtCOVERAGE_TEST_MARKER();
					}
				}
				#endif

				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait );
 8007ae8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007aea:	3324      	adds	r3, #36	; 0x24
 8007aec:	683a      	ldr	r2, [r7, #0]
 8007aee:	4611      	mov	r1, r2
 8007af0:	4618      	mov	r0, r3
 8007af2:	f000 ff57 	bl	80089a4 <vTaskPlaceOnEventList>
				prvUnlockQueue( pxQueue );
 8007af6:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 8007af8:	f000 f985 	bl	8007e06 <prvUnlockQueue>
				if( xTaskResumeAll() == pdFALSE )
 8007afc:	f000 fd68 	bl	80085d0 <xTaskResumeAll>
 8007b00:	4603      	mov	r3, r0
 8007b02:	2b00      	cmp	r3, #0
 8007b04:	f47f af68 	bne.w	80079d8 <xQueueSemaphoreTake+0x80>
				{
					portYIELD_WITHIN_API();
 8007b08:	4b18      	ldr	r3, [pc, #96]	; (8007b6c <xQueueSemaphoreTake+0x214>)
 8007b0a:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8007b0e:	601a      	str	r2, [r3, #0]
 8007b10:	f3bf 8f4f 	dsb	sy
 8007b14:	f3bf 8f6f 	isb	sy
 8007b18:	e75e      	b.n	80079d8 <xQueueSemaphoreTake+0x80>
			}
			else
			{
				/* There was no timeout and the semaphore count was not 0, so
				attempt to take the semaphore again. */
				prvUnlockQueue( pxQueue );
 8007b1a:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 8007b1c:	f000 f973 	bl	8007e06 <prvUnlockQueue>
				( void ) xTaskResumeAll();
 8007b20:	f000 fd56 	bl	80085d0 <xTaskResumeAll>
 8007b24:	e758      	b.n	80079d8 <xQueueSemaphoreTake+0x80>
			}
		}
		else
		{
			/* Timed out. */
			prvUnlockQueue( pxQueue );
 8007b26:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 8007b28:	f000 f96d 	bl	8007e06 <prvUnlockQueue>
			( void ) xTaskResumeAll();
 8007b2c:	f000 fd50 	bl	80085d0 <xTaskResumeAll>

			/* If the semaphore count is 0 exit now as the timeout has
			expired.  Otherwise return to attempt to take the semaphore that is
			known to be available.  As semaphores are implemented by queues the
			queue being empty is equivalent to the semaphore count being 0. */
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 8007b30:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 8007b32:	f000 f9ba 	bl	8007eaa <prvIsQueueEmpty>
 8007b36:	4603      	mov	r3, r0
 8007b38:	2b00      	cmp	r3, #0
 8007b3a:	f43f af4d 	beq.w	80079d8 <xQueueSemaphoreTake+0x80>
				#if ( configUSE_MUTEXES == 1 )
				{
					/* xInheritanceOccurred could only have be set if
					pxQueue->uxQueueType == queueQUEUE_IS_MUTEX so no need to
					test the mutex type again to check it is actually a mutex. */
					if( xInheritanceOccurred != pdFALSE )
 8007b3e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007b40:	2b00      	cmp	r3, #0
 8007b42:	d00d      	beq.n	8007b60 <xQueueSemaphoreTake+0x208>
					{
						taskENTER_CRITICAL();
 8007b44:	f001 ff96 	bl	8009a74 <vPortEnterCritical>
							/* This task blocking on the mutex caused another
							task to inherit this task's priority.  Now this task
							has timed out the priority should be disinherited
							again, but only as low as the next highest priority
							task that is waiting for the same mutex. */
							uxHighestWaitingPriority = prvGetDisinheritPriorityAfterTimeout( pxQueue );
 8007b48:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 8007b4a:	f000 f8b4 	bl	8007cb6 <prvGetDisinheritPriorityAfterTimeout>
 8007b4e:	6278      	str	r0, [r7, #36]	; 0x24
							vTaskPriorityDisinheritAfterTimeout( pxQueue->u.xSemaphore.xMutexHolder, uxHighestWaitingPriority );
 8007b50:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007b52:	689b      	ldr	r3, [r3, #8]
 8007b54:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8007b56:	4618      	mov	r0, r3
 8007b58:	f001 fa28 	bl	8008fac <vTaskPriorityDisinheritAfterTimeout>
						}
						taskEXIT_CRITICAL();
 8007b5c:	f001 ffba 	bl	8009ad4 <vPortExitCritical>
					}
				}
				#endif /* configUSE_MUTEXES */

				traceQUEUE_RECEIVE_FAILED( pxQueue );
				return errQUEUE_EMPTY;
 8007b60:	2300      	movs	r3, #0
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	} /*lint -restore */
}
 8007b62:	4618      	mov	r0, r3
 8007b64:	3738      	adds	r7, #56	; 0x38
 8007b66:	46bd      	mov	sp, r7
 8007b68:	bd80      	pop	{r7, pc}
 8007b6a:	bf00      	nop
 8007b6c:	e000ed04 	.word	0xe000ed04

08007b70 <xQueueReceiveFromISR>:
	} /*lint -restore */
}
/*-----------------------------------------------------------*/

BaseType_t xQueueReceiveFromISR( QueueHandle_t xQueue, void * const pvBuffer, BaseType_t * const pxHigherPriorityTaskWoken )
{
 8007b70:	b580      	push	{r7, lr}
 8007b72:	b08e      	sub	sp, #56	; 0x38
 8007b74:	af00      	add	r7, sp, #0
 8007b76:	60f8      	str	r0, [r7, #12]
 8007b78:	60b9      	str	r1, [r7, #8]
 8007b7a:	607a      	str	r2, [r7, #4]
BaseType_t xReturn;
UBaseType_t uxSavedInterruptStatus;
Queue_t * const pxQueue = xQueue;
 8007b7c:	68fb      	ldr	r3, [r7, #12]
 8007b7e:	633b      	str	r3, [r7, #48]	; 0x30

	configASSERT( pxQueue );
 8007b80:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007b82:	2b00      	cmp	r3, #0
 8007b84:	d10a      	bne.n	8007b9c <xQueueReceiveFromISR+0x2c>
	__asm volatile
 8007b86:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007b8a:	f383 8811 	msr	BASEPRI, r3
 8007b8e:	f3bf 8f6f 	isb	sy
 8007b92:	f3bf 8f4f 	dsb	sy
 8007b96:	623b      	str	r3, [r7, #32]
}
 8007b98:	bf00      	nop
 8007b9a:	e7fe      	b.n	8007b9a <xQueueReceiveFromISR+0x2a>
	configASSERT( !( ( pvBuffer == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8007b9c:	68bb      	ldr	r3, [r7, #8]
 8007b9e:	2b00      	cmp	r3, #0
 8007ba0:	d103      	bne.n	8007baa <xQueueReceiveFromISR+0x3a>
 8007ba2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007ba4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007ba6:	2b00      	cmp	r3, #0
 8007ba8:	d101      	bne.n	8007bae <xQueueReceiveFromISR+0x3e>
 8007baa:	2301      	movs	r3, #1
 8007bac:	e000      	b.n	8007bb0 <xQueueReceiveFromISR+0x40>
 8007bae:	2300      	movs	r3, #0
 8007bb0:	2b00      	cmp	r3, #0
 8007bb2:	d10a      	bne.n	8007bca <xQueueReceiveFromISR+0x5a>
	__asm volatile
 8007bb4:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007bb8:	f383 8811 	msr	BASEPRI, r3
 8007bbc:	f3bf 8f6f 	isb	sy
 8007bc0:	f3bf 8f4f 	dsb	sy
 8007bc4:	61fb      	str	r3, [r7, #28]
}
 8007bc6:	bf00      	nop
 8007bc8:	e7fe      	b.n	8007bc8 <xQueueReceiveFromISR+0x58>
	that have been assigned a priority at or (logically) below the maximum
	system call	interrupt priority.  FreeRTOS maintains a separate interrupt
	safe API to ensure interrupt entry is as fast and as simple as possible.
	More information (albeit Cortex-M specific) is provided on the following
	link: http://www.freertos.org/RTOS-Cortex-M3-M4.html */
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 8007bca:	f002 f835 	bl	8009c38 <vPortValidateInterruptPriority>
	__asm volatile
 8007bce:	f3ef 8211 	mrs	r2, BASEPRI
 8007bd2:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007bd6:	f383 8811 	msr	BASEPRI, r3
 8007bda:	f3bf 8f6f 	isb	sy
 8007bde:	f3bf 8f4f 	dsb	sy
 8007be2:	61ba      	str	r2, [r7, #24]
 8007be4:	617b      	str	r3, [r7, #20]
	return ulOriginalBASEPRI;
 8007be6:	69bb      	ldr	r3, [r7, #24]

	uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 8007be8:	62fb      	str	r3, [r7, #44]	; 0x2c
	{
		const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 8007bea:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007bec:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007bee:	62bb      	str	r3, [r7, #40]	; 0x28

		/* Cannot block in an ISR, so check there is data available. */
		if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 8007bf0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007bf2:	2b00      	cmp	r3, #0
 8007bf4:	d02f      	beq.n	8007c56 <xQueueReceiveFromISR+0xe6>
		{
			const int8_t cRxLock = pxQueue->cRxLock;
 8007bf6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007bf8:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8007bfc:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27

			traceQUEUE_RECEIVE_FROM_ISR( pxQueue );

			prvCopyDataFromQueue( pxQueue, pvBuffer );
 8007c00:	68b9      	ldr	r1, [r7, #8]
 8007c02:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8007c04:	f000 f8d9 	bl	8007dba <prvCopyDataFromQueue>
			pxQueue->uxMessagesWaiting = uxMessagesWaiting - ( UBaseType_t ) 1;
 8007c08:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007c0a:	1e5a      	subs	r2, r3, #1
 8007c0c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007c0e:	639a      	str	r2, [r3, #56]	; 0x38

			/* If the queue is locked the event list will not be modified.
			Instead update the lock count so the task that unlocks the queue
			will know that an ISR has removed data while the queue was
			locked. */
			if( cRxLock == queueUNLOCKED )
 8007c10:	f997 3027 	ldrsb.w	r3, [r7, #39]	; 0x27
 8007c14:	f1b3 3fff 	cmp.w	r3, #4294967295
 8007c18:	d112      	bne.n	8007c40 <xQueueReceiveFromISR+0xd0>
			{
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8007c1a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007c1c:	691b      	ldr	r3, [r3, #16]
 8007c1e:	2b00      	cmp	r3, #0
 8007c20:	d016      	beq.n	8007c50 <xQueueReceiveFromISR+0xe0>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8007c22:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007c24:	3310      	adds	r3, #16
 8007c26:	4618      	mov	r0, r3
 8007c28:	f000 ff0c 	bl	8008a44 <xTaskRemoveFromEventList>
 8007c2c:	4603      	mov	r3, r0
 8007c2e:	2b00      	cmp	r3, #0
 8007c30:	d00e      	beq.n	8007c50 <xQueueReceiveFromISR+0xe0>
					{
						/* The task waiting has a higher priority than us so
						force a context switch. */
						if( pxHigherPriorityTaskWoken != NULL )
 8007c32:	687b      	ldr	r3, [r7, #4]
 8007c34:	2b00      	cmp	r3, #0
 8007c36:	d00b      	beq.n	8007c50 <xQueueReceiveFromISR+0xe0>
						{
							*pxHigherPriorityTaskWoken = pdTRUE;
 8007c38:	687b      	ldr	r3, [r7, #4]
 8007c3a:	2201      	movs	r2, #1
 8007c3c:	601a      	str	r2, [r3, #0]
 8007c3e:	e007      	b.n	8007c50 <xQueueReceiveFromISR+0xe0>
			}
			else
			{
				/* Increment the lock count so the task that unlocks the queue
				knows that data was removed while it was locked. */
				pxQueue->cRxLock = ( int8_t ) ( cRxLock + 1 );
 8007c40:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8007c44:	3301      	adds	r3, #1
 8007c46:	b2db      	uxtb	r3, r3
 8007c48:	b25a      	sxtb	r2, r3
 8007c4a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007c4c:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
			}

			xReturn = pdPASS;
 8007c50:	2301      	movs	r3, #1
 8007c52:	637b      	str	r3, [r7, #52]	; 0x34
 8007c54:	e001      	b.n	8007c5a <xQueueReceiveFromISR+0xea>
		}
		else
		{
			xReturn = pdFAIL;
 8007c56:	2300      	movs	r3, #0
 8007c58:	637b      	str	r3, [r7, #52]	; 0x34
 8007c5a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007c5c:	613b      	str	r3, [r7, #16]
	__asm volatile
 8007c5e:	693b      	ldr	r3, [r7, #16]
 8007c60:	f383 8811 	msr	BASEPRI, r3
}
 8007c64:	bf00      	nop
			traceQUEUE_RECEIVE_FROM_ISR_FAILED( pxQueue );
		}
	}
	portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

	return xReturn;
 8007c66:	6b7b      	ldr	r3, [r7, #52]	; 0x34
}
 8007c68:	4618      	mov	r0, r3
 8007c6a:	3738      	adds	r7, #56	; 0x38
 8007c6c:	46bd      	mov	sp, r7
 8007c6e:	bd80      	pop	{r7, pc}

08007c70 <vQueueDelete>:
	return uxReturn;
} /*lint !e818 Pointer cannot be declared const as xQueue is a typedef not pointer. */
/*-----------------------------------------------------------*/

void vQueueDelete( QueueHandle_t xQueue )
{
 8007c70:	b580      	push	{r7, lr}
 8007c72:	b084      	sub	sp, #16
 8007c74:	af00      	add	r7, sp, #0
 8007c76:	6078      	str	r0, [r7, #4]
Queue_t * const pxQueue = xQueue;
 8007c78:	687b      	ldr	r3, [r7, #4]
 8007c7a:	60fb      	str	r3, [r7, #12]

	configASSERT( pxQueue );
 8007c7c:	68fb      	ldr	r3, [r7, #12]
 8007c7e:	2b00      	cmp	r3, #0
 8007c80:	d10a      	bne.n	8007c98 <vQueueDelete+0x28>
	__asm volatile
 8007c82:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007c86:	f383 8811 	msr	BASEPRI, r3
 8007c8a:	f3bf 8f6f 	isb	sy
 8007c8e:	f3bf 8f4f 	dsb	sy
 8007c92:	60bb      	str	r3, [r7, #8]
}
 8007c94:	bf00      	nop
 8007c96:	e7fe      	b.n	8007c96 <vQueueDelete+0x26>
	traceQUEUE_DELETE( pxQueue );

	#if ( configQUEUE_REGISTRY_SIZE > 0 )
	{
		vQueueUnregisterQueue( pxQueue );
 8007c98:	68f8      	ldr	r0, [r7, #12]
 8007c9a:	f000 f95f 	bl	8007f5c <vQueueUnregisterQueue>
	}
	#elif( ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) && ( configSUPPORT_STATIC_ALLOCATION == 1 ) )
	{
		/* The queue could have been allocated statically or dynamically, so
		check before attempting to free the memory. */
		if( pxQueue->ucStaticallyAllocated == ( uint8_t ) pdFALSE )
 8007c9e:	68fb      	ldr	r3, [r7, #12]
 8007ca0:	f893 3046 	ldrb.w	r3, [r3, #70]	; 0x46
 8007ca4:	2b00      	cmp	r3, #0
 8007ca6:	d102      	bne.n	8007cae <vQueueDelete+0x3e>
		{
			vPortFree( pxQueue );
 8007ca8:	68f8      	ldr	r0, [r7, #12]
 8007caa:	f002 f8d5 	bl	8009e58 <vPortFree>
		/* The queue must have been statically allocated, so is not going to be
		deleted.  Avoid compiler warnings about the unused parameter. */
		( void ) pxQueue;
	}
	#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
}
 8007cae:	bf00      	nop
 8007cb0:	3710      	adds	r7, #16
 8007cb2:	46bd      	mov	sp, r7
 8007cb4:	bd80      	pop	{r7, pc}

08007cb6 <prvGetDisinheritPriorityAfterTimeout>:
/*-----------------------------------------------------------*/

#if( configUSE_MUTEXES == 1 )

	static UBaseType_t prvGetDisinheritPriorityAfterTimeout( const Queue_t * const pxQueue )
	{
 8007cb6:	b480      	push	{r7}
 8007cb8:	b085      	sub	sp, #20
 8007cba:	af00      	add	r7, sp, #0
 8007cbc:	6078      	str	r0, [r7, #4]
		priority, but the waiting task times out, then the holder should
		disinherit the priority - but only down to the highest priority of any
		other tasks that are waiting for the same mutex.  For this purpose,
		return the priority of the highest priority task that is waiting for the
		mutex. */
		if( listCURRENT_LIST_LENGTH( &( pxQueue->xTasksWaitingToReceive ) ) > 0U )
 8007cbe:	687b      	ldr	r3, [r7, #4]
 8007cc0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007cc2:	2b00      	cmp	r3, #0
 8007cc4:	d006      	beq.n	8007cd4 <prvGetDisinheritPriorityAfterTimeout+0x1e>
		{
			uxHighestPriorityOfWaitingTasks = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) listGET_ITEM_VALUE_OF_HEAD_ENTRY( &( pxQueue->xTasksWaitingToReceive ) );
 8007cc6:	687b      	ldr	r3, [r7, #4]
 8007cc8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8007cca:	681b      	ldr	r3, [r3, #0]
 8007ccc:	f1c3 0338 	rsb	r3, r3, #56	; 0x38
 8007cd0:	60fb      	str	r3, [r7, #12]
 8007cd2:	e001      	b.n	8007cd8 <prvGetDisinheritPriorityAfterTimeout+0x22>
		}
		else
		{
			uxHighestPriorityOfWaitingTasks = tskIDLE_PRIORITY;
 8007cd4:	2300      	movs	r3, #0
 8007cd6:	60fb      	str	r3, [r7, #12]
		}

		return uxHighestPriorityOfWaitingTasks;
 8007cd8:	68fb      	ldr	r3, [r7, #12]
	}
 8007cda:	4618      	mov	r0, r3
 8007cdc:	3714      	adds	r7, #20
 8007cde:	46bd      	mov	sp, r7
 8007ce0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007ce4:	4770      	bx	lr

08007ce6 <prvCopyDataToQueue>:

#endif /* configUSE_MUTEXES */
/*-----------------------------------------------------------*/

static BaseType_t prvCopyDataToQueue( Queue_t * const pxQueue, const void *pvItemToQueue, const BaseType_t xPosition )
{
 8007ce6:	b580      	push	{r7, lr}
 8007ce8:	b086      	sub	sp, #24
 8007cea:	af00      	add	r7, sp, #0
 8007cec:	60f8      	str	r0, [r7, #12]
 8007cee:	60b9      	str	r1, [r7, #8]
 8007cf0:	607a      	str	r2, [r7, #4]
BaseType_t xReturn = pdFALSE;
 8007cf2:	2300      	movs	r3, #0
 8007cf4:	617b      	str	r3, [r7, #20]
UBaseType_t uxMessagesWaiting;

	/* This function is called from a critical section. */

	uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 8007cf6:	68fb      	ldr	r3, [r7, #12]
 8007cf8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007cfa:	613b      	str	r3, [r7, #16]

	if( pxQueue->uxItemSize == ( UBaseType_t ) 0 )
 8007cfc:	68fb      	ldr	r3, [r7, #12]
 8007cfe:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007d00:	2b00      	cmp	r3, #0
 8007d02:	d10d      	bne.n	8007d20 <prvCopyDataToQueue+0x3a>
	{
		#if ( configUSE_MUTEXES == 1 )
		{
			if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 8007d04:	68fb      	ldr	r3, [r7, #12]
 8007d06:	681b      	ldr	r3, [r3, #0]
 8007d08:	2b00      	cmp	r3, #0
 8007d0a:	d14d      	bne.n	8007da8 <prvCopyDataToQueue+0xc2>
			{
				/* The mutex is no longer being held. */
				xReturn = xTaskPriorityDisinherit( pxQueue->u.xSemaphore.xMutexHolder );
 8007d0c:	68fb      	ldr	r3, [r7, #12]
 8007d0e:	689b      	ldr	r3, [r3, #8]
 8007d10:	4618      	mov	r0, r3
 8007d12:	f001 f8dd 	bl	8008ed0 <xTaskPriorityDisinherit>
 8007d16:	6178      	str	r0, [r7, #20]
				pxQueue->u.xSemaphore.xMutexHolder = NULL;
 8007d18:	68fb      	ldr	r3, [r7, #12]
 8007d1a:	2200      	movs	r2, #0
 8007d1c:	609a      	str	r2, [r3, #8]
 8007d1e:	e043      	b.n	8007da8 <prvCopyDataToQueue+0xc2>
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configUSE_MUTEXES */
	}
	else if( xPosition == queueSEND_TO_BACK )
 8007d20:	687b      	ldr	r3, [r7, #4]
 8007d22:	2b00      	cmp	r3, #0
 8007d24:	d119      	bne.n	8007d5a <prvCopyDataToQueue+0x74>
	{
		( void ) memcpy( ( void * ) pxQueue->pcWriteTo, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports, plus previous logic ensures a null pointer can only be passed to memcpy() if the copy size is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 8007d26:	68fb      	ldr	r3, [r7, #12]
 8007d28:	6858      	ldr	r0, [r3, #4]
 8007d2a:	68fb      	ldr	r3, [r7, #12]
 8007d2c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007d2e:	461a      	mov	r2, r3
 8007d30:	68b9      	ldr	r1, [r7, #8]
 8007d32:	f002 fa79 	bl	800a228 <memcpy>
		pxQueue->pcWriteTo += pxQueue->uxItemSize; /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 8007d36:	68fb      	ldr	r3, [r7, #12]
 8007d38:	685a      	ldr	r2, [r3, #4]
 8007d3a:	68fb      	ldr	r3, [r7, #12]
 8007d3c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007d3e:	441a      	add	r2, r3
 8007d40:	68fb      	ldr	r3, [r7, #12]
 8007d42:	605a      	str	r2, [r3, #4]
		if( pxQueue->pcWriteTo >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 8007d44:	68fb      	ldr	r3, [r7, #12]
 8007d46:	685a      	ldr	r2, [r3, #4]
 8007d48:	68fb      	ldr	r3, [r7, #12]
 8007d4a:	689b      	ldr	r3, [r3, #8]
 8007d4c:	429a      	cmp	r2, r3
 8007d4e:	d32b      	bcc.n	8007da8 <prvCopyDataToQueue+0xc2>
		{
			pxQueue->pcWriteTo = pxQueue->pcHead;
 8007d50:	68fb      	ldr	r3, [r7, #12]
 8007d52:	681a      	ldr	r2, [r3, #0]
 8007d54:	68fb      	ldr	r3, [r7, #12]
 8007d56:	605a      	str	r2, [r3, #4]
 8007d58:	e026      	b.n	8007da8 <prvCopyDataToQueue+0xc2>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	else
	{
		( void ) memcpy( ( void * ) pxQueue->u.xQueue.pcReadFrom, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e9087 !e418 MISRA exception as the casts are only redundant for some ports.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes.  Assert checks null pointer only used when length is 0. */
 8007d5a:	68fb      	ldr	r3, [r7, #12]
 8007d5c:	68d8      	ldr	r0, [r3, #12]
 8007d5e:	68fb      	ldr	r3, [r7, #12]
 8007d60:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007d62:	461a      	mov	r2, r3
 8007d64:	68b9      	ldr	r1, [r7, #8]
 8007d66:	f002 fa5f 	bl	800a228 <memcpy>
		pxQueue->u.xQueue.pcReadFrom -= pxQueue->uxItemSize;
 8007d6a:	68fb      	ldr	r3, [r7, #12]
 8007d6c:	68da      	ldr	r2, [r3, #12]
 8007d6e:	68fb      	ldr	r3, [r7, #12]
 8007d70:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007d72:	425b      	negs	r3, r3
 8007d74:	441a      	add	r2, r3
 8007d76:	68fb      	ldr	r3, [r7, #12]
 8007d78:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.xQueue.pcReadFrom < pxQueue->pcHead ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 8007d7a:	68fb      	ldr	r3, [r7, #12]
 8007d7c:	68da      	ldr	r2, [r3, #12]
 8007d7e:	68fb      	ldr	r3, [r7, #12]
 8007d80:	681b      	ldr	r3, [r3, #0]
 8007d82:	429a      	cmp	r2, r3
 8007d84:	d207      	bcs.n	8007d96 <prvCopyDataToQueue+0xb0>
		{
			pxQueue->u.xQueue.pcReadFrom = ( pxQueue->u.xQueue.pcTail - pxQueue->uxItemSize );
 8007d86:	68fb      	ldr	r3, [r7, #12]
 8007d88:	689a      	ldr	r2, [r3, #8]
 8007d8a:	68fb      	ldr	r3, [r7, #12]
 8007d8c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007d8e:	425b      	negs	r3, r3
 8007d90:	441a      	add	r2, r3
 8007d92:	68fb      	ldr	r3, [r7, #12]
 8007d94:	60da      	str	r2, [r3, #12]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		if( xPosition == queueOVERWRITE )
 8007d96:	687b      	ldr	r3, [r7, #4]
 8007d98:	2b02      	cmp	r3, #2
 8007d9a:	d105      	bne.n	8007da8 <prvCopyDataToQueue+0xc2>
		{
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 8007d9c:	693b      	ldr	r3, [r7, #16]
 8007d9e:	2b00      	cmp	r3, #0
 8007da0:	d002      	beq.n	8007da8 <prvCopyDataToQueue+0xc2>
			{
				/* An item is not being added but overwritten, so subtract
				one from the recorded number of items in the queue so when
				one is added again below the number of recorded items remains
				correct. */
				--uxMessagesWaiting;
 8007da2:	693b      	ldr	r3, [r7, #16]
 8007da4:	3b01      	subs	r3, #1
 8007da6:	613b      	str	r3, [r7, #16]
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	pxQueue->uxMessagesWaiting = uxMessagesWaiting + ( UBaseType_t ) 1;
 8007da8:	693b      	ldr	r3, [r7, #16]
 8007daa:	1c5a      	adds	r2, r3, #1
 8007dac:	68fb      	ldr	r3, [r7, #12]
 8007dae:	639a      	str	r2, [r3, #56]	; 0x38

	return xReturn;
 8007db0:	697b      	ldr	r3, [r7, #20]
}
 8007db2:	4618      	mov	r0, r3
 8007db4:	3718      	adds	r7, #24
 8007db6:	46bd      	mov	sp, r7
 8007db8:	bd80      	pop	{r7, pc}

08007dba <prvCopyDataFromQueue>:
/*-----------------------------------------------------------*/

static void prvCopyDataFromQueue( Queue_t * const pxQueue, void * const pvBuffer )
{
 8007dba:	b580      	push	{r7, lr}
 8007dbc:	b082      	sub	sp, #8
 8007dbe:	af00      	add	r7, sp, #0
 8007dc0:	6078      	str	r0, [r7, #4]
 8007dc2:	6039      	str	r1, [r7, #0]
	if( pxQueue->uxItemSize != ( UBaseType_t ) 0 )
 8007dc4:	687b      	ldr	r3, [r7, #4]
 8007dc6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007dc8:	2b00      	cmp	r3, #0
 8007dca:	d018      	beq.n	8007dfe <prvCopyDataFromQueue+0x44>
	{
		pxQueue->u.xQueue.pcReadFrom += pxQueue->uxItemSize; /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 8007dcc:	687b      	ldr	r3, [r7, #4]
 8007dce:	68da      	ldr	r2, [r3, #12]
 8007dd0:	687b      	ldr	r3, [r7, #4]
 8007dd2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007dd4:	441a      	add	r2, r3
 8007dd6:	687b      	ldr	r3, [r7, #4]
 8007dd8:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.xQueue.pcReadFrom >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as use of the relational operator is the cleanest solutions. */
 8007dda:	687b      	ldr	r3, [r7, #4]
 8007ddc:	68da      	ldr	r2, [r3, #12]
 8007dde:	687b      	ldr	r3, [r7, #4]
 8007de0:	689b      	ldr	r3, [r3, #8]
 8007de2:	429a      	cmp	r2, r3
 8007de4:	d303      	bcc.n	8007dee <prvCopyDataFromQueue+0x34>
		{
			pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead;
 8007de6:	687b      	ldr	r3, [r7, #4]
 8007de8:	681a      	ldr	r2, [r3, #0]
 8007dea:	687b      	ldr	r3, [r7, #4]
 8007dec:	60da      	str	r2, [r3, #12]
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
		( void ) memcpy( ( void * ) pvBuffer, ( void * ) pxQueue->u.xQueue.pcReadFrom, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports.  Also previous logic ensures a null pointer can only be passed to memcpy() when the count is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 8007dee:	687b      	ldr	r3, [r7, #4]
 8007df0:	68d9      	ldr	r1, [r3, #12]
 8007df2:	687b      	ldr	r3, [r7, #4]
 8007df4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007df6:	461a      	mov	r2, r3
 8007df8:	6838      	ldr	r0, [r7, #0]
 8007dfa:	f002 fa15 	bl	800a228 <memcpy>
	}
}
 8007dfe:	bf00      	nop
 8007e00:	3708      	adds	r7, #8
 8007e02:	46bd      	mov	sp, r7
 8007e04:	bd80      	pop	{r7, pc}

08007e06 <prvUnlockQueue>:
/*-----------------------------------------------------------*/

static void prvUnlockQueue( Queue_t * const pxQueue )
{
 8007e06:	b580      	push	{r7, lr}
 8007e08:	b084      	sub	sp, #16
 8007e0a:	af00      	add	r7, sp, #0
 8007e0c:	6078      	str	r0, [r7, #4]

	/* The lock counts contains the number of extra data items placed or
	removed from the queue while the queue was locked.  When a queue is
	locked items can be added or removed, but the event lists cannot be
	updated. */
	taskENTER_CRITICAL();
 8007e0e:	f001 fe31 	bl	8009a74 <vPortEnterCritical>
	{
		int8_t cTxLock = pxQueue->cTxLock;
 8007e12:	687b      	ldr	r3, [r7, #4]
 8007e14:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8007e18:	73fb      	strb	r3, [r7, #15]

		/* See if data was added to the queue while it was locked. */
		while( cTxLock > queueLOCKED_UNMODIFIED )
 8007e1a:	e011      	b.n	8007e40 <prvUnlockQueue+0x3a>
			}
			#else /* configUSE_QUEUE_SETS */
			{
				/* Tasks that are removed from the event list will get added to
				the pending ready list as the scheduler is still suspended. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8007e1c:	687b      	ldr	r3, [r7, #4]
 8007e1e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007e20:	2b00      	cmp	r3, #0
 8007e22:	d012      	beq.n	8007e4a <prvUnlockQueue+0x44>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8007e24:	687b      	ldr	r3, [r7, #4]
 8007e26:	3324      	adds	r3, #36	; 0x24
 8007e28:	4618      	mov	r0, r3
 8007e2a:	f000 fe0b 	bl	8008a44 <xTaskRemoveFromEventList>
 8007e2e:	4603      	mov	r3, r0
 8007e30:	2b00      	cmp	r3, #0
 8007e32:	d001      	beq.n	8007e38 <prvUnlockQueue+0x32>
					{
						/* The task waiting has a higher priority so record that
						a context switch is required. */
						vTaskMissedYield();
 8007e34:	f000 fee2 	bl	8008bfc <vTaskMissedYield>
					break;
				}
			}
			#endif /* configUSE_QUEUE_SETS */

			--cTxLock;
 8007e38:	7bfb      	ldrb	r3, [r7, #15]
 8007e3a:	3b01      	subs	r3, #1
 8007e3c:	b2db      	uxtb	r3, r3
 8007e3e:	73fb      	strb	r3, [r7, #15]
		while( cTxLock > queueLOCKED_UNMODIFIED )
 8007e40:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8007e44:	2b00      	cmp	r3, #0
 8007e46:	dce9      	bgt.n	8007e1c <prvUnlockQueue+0x16>
 8007e48:	e000      	b.n	8007e4c <prvUnlockQueue+0x46>
					break;
 8007e4a:	bf00      	nop
		}

		pxQueue->cTxLock = queueUNLOCKED;
 8007e4c:	687b      	ldr	r3, [r7, #4]
 8007e4e:	22ff      	movs	r2, #255	; 0xff
 8007e50:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
	}
	taskEXIT_CRITICAL();
 8007e54:	f001 fe3e 	bl	8009ad4 <vPortExitCritical>

	/* Do the same for the Rx lock. */
	taskENTER_CRITICAL();
 8007e58:	f001 fe0c 	bl	8009a74 <vPortEnterCritical>
	{
		int8_t cRxLock = pxQueue->cRxLock;
 8007e5c:	687b      	ldr	r3, [r7, #4]
 8007e5e:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8007e62:	73bb      	strb	r3, [r7, #14]

		while( cRxLock > queueLOCKED_UNMODIFIED )
 8007e64:	e011      	b.n	8007e8a <prvUnlockQueue+0x84>
		{
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8007e66:	687b      	ldr	r3, [r7, #4]
 8007e68:	691b      	ldr	r3, [r3, #16]
 8007e6a:	2b00      	cmp	r3, #0
 8007e6c:	d012      	beq.n	8007e94 <prvUnlockQueue+0x8e>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8007e6e:	687b      	ldr	r3, [r7, #4]
 8007e70:	3310      	adds	r3, #16
 8007e72:	4618      	mov	r0, r3
 8007e74:	f000 fde6 	bl	8008a44 <xTaskRemoveFromEventList>
 8007e78:	4603      	mov	r3, r0
 8007e7a:	2b00      	cmp	r3, #0
 8007e7c:	d001      	beq.n	8007e82 <prvUnlockQueue+0x7c>
				{
					vTaskMissedYield();
 8007e7e:	f000 febd 	bl	8008bfc <vTaskMissedYield>
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				--cRxLock;
 8007e82:	7bbb      	ldrb	r3, [r7, #14]
 8007e84:	3b01      	subs	r3, #1
 8007e86:	b2db      	uxtb	r3, r3
 8007e88:	73bb      	strb	r3, [r7, #14]
		while( cRxLock > queueLOCKED_UNMODIFIED )
 8007e8a:	f997 300e 	ldrsb.w	r3, [r7, #14]
 8007e8e:	2b00      	cmp	r3, #0
 8007e90:	dce9      	bgt.n	8007e66 <prvUnlockQueue+0x60>
 8007e92:	e000      	b.n	8007e96 <prvUnlockQueue+0x90>
			}
			else
			{
				break;
 8007e94:	bf00      	nop
			}
		}

		pxQueue->cRxLock = queueUNLOCKED;
 8007e96:	687b      	ldr	r3, [r7, #4]
 8007e98:	22ff      	movs	r2, #255	; 0xff
 8007e9a:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
	}
	taskEXIT_CRITICAL();
 8007e9e:	f001 fe19 	bl	8009ad4 <vPortExitCritical>
}
 8007ea2:	bf00      	nop
 8007ea4:	3710      	adds	r7, #16
 8007ea6:	46bd      	mov	sp, r7
 8007ea8:	bd80      	pop	{r7, pc}

08007eaa <prvIsQueueEmpty>:
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueEmpty( const Queue_t *pxQueue )
{
 8007eaa:	b580      	push	{r7, lr}
 8007eac:	b084      	sub	sp, #16
 8007eae:	af00      	add	r7, sp, #0
 8007eb0:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 8007eb2:	f001 fddf 	bl	8009a74 <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t )  0 )
 8007eb6:	687b      	ldr	r3, [r7, #4]
 8007eb8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007eba:	2b00      	cmp	r3, #0
 8007ebc:	d102      	bne.n	8007ec4 <prvIsQueueEmpty+0x1a>
		{
			xReturn = pdTRUE;
 8007ebe:	2301      	movs	r3, #1
 8007ec0:	60fb      	str	r3, [r7, #12]
 8007ec2:	e001      	b.n	8007ec8 <prvIsQueueEmpty+0x1e>
		}
		else
		{
			xReturn = pdFALSE;
 8007ec4:	2300      	movs	r3, #0
 8007ec6:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 8007ec8:	f001 fe04 	bl	8009ad4 <vPortExitCritical>

	return xReturn;
 8007ecc:	68fb      	ldr	r3, [r7, #12]
}
 8007ece:	4618      	mov	r0, r3
 8007ed0:	3710      	adds	r7, #16
 8007ed2:	46bd      	mov	sp, r7
 8007ed4:	bd80      	pop	{r7, pc}

08007ed6 <prvIsQueueFull>:
	return xReturn;
} /*lint !e818 xQueue could not be pointer to const because it is a typedef. */
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueFull( const Queue_t *pxQueue )
{
 8007ed6:	b580      	push	{r7, lr}
 8007ed8:	b084      	sub	sp, #16
 8007eda:	af00      	add	r7, sp, #0
 8007edc:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 8007ede:	f001 fdc9 	bl	8009a74 <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == pxQueue->uxLength )
 8007ee2:	687b      	ldr	r3, [r7, #4]
 8007ee4:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8007ee6:	687b      	ldr	r3, [r7, #4]
 8007ee8:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8007eea:	429a      	cmp	r2, r3
 8007eec:	d102      	bne.n	8007ef4 <prvIsQueueFull+0x1e>
		{
			xReturn = pdTRUE;
 8007eee:	2301      	movs	r3, #1
 8007ef0:	60fb      	str	r3, [r7, #12]
 8007ef2:	e001      	b.n	8007ef8 <prvIsQueueFull+0x22>
		}
		else
		{
			xReturn = pdFALSE;
 8007ef4:	2300      	movs	r3, #0
 8007ef6:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 8007ef8:	f001 fdec 	bl	8009ad4 <vPortExitCritical>

	return xReturn;
 8007efc:	68fb      	ldr	r3, [r7, #12]
}
 8007efe:	4618      	mov	r0, r3
 8007f00:	3710      	adds	r7, #16
 8007f02:	46bd      	mov	sp, r7
 8007f04:	bd80      	pop	{r7, pc}
	...

08007f08 <vQueueAddToRegistry>:
/*-----------------------------------------------------------*/

#if ( configQUEUE_REGISTRY_SIZE > 0 )

	void vQueueAddToRegistry( QueueHandle_t xQueue, const char *pcQueueName ) /*lint !e971 Unqualified char types are allowed for strings and single characters only. */
	{
 8007f08:	b480      	push	{r7}
 8007f0a:	b085      	sub	sp, #20
 8007f0c:	af00      	add	r7, sp, #0
 8007f0e:	6078      	str	r0, [r7, #4]
 8007f10:	6039      	str	r1, [r7, #0]
	UBaseType_t ux;

		/* See if there is an empty space in the registry.  A NULL name denotes
		a free slot. */
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 8007f12:	2300      	movs	r3, #0
 8007f14:	60fb      	str	r3, [r7, #12]
 8007f16:	e014      	b.n	8007f42 <vQueueAddToRegistry+0x3a>
		{
			if( xQueueRegistry[ ux ].pcQueueName == NULL )
 8007f18:	4a0f      	ldr	r2, [pc, #60]	; (8007f58 <vQueueAddToRegistry+0x50>)
 8007f1a:	68fb      	ldr	r3, [r7, #12]
 8007f1c:	f852 3033 	ldr.w	r3, [r2, r3, lsl #3]
 8007f20:	2b00      	cmp	r3, #0
 8007f22:	d10b      	bne.n	8007f3c <vQueueAddToRegistry+0x34>
			{
				/* Store the information on this queue. */
				xQueueRegistry[ ux ].pcQueueName = pcQueueName;
 8007f24:	490c      	ldr	r1, [pc, #48]	; (8007f58 <vQueueAddToRegistry+0x50>)
 8007f26:	68fb      	ldr	r3, [r7, #12]
 8007f28:	683a      	ldr	r2, [r7, #0]
 8007f2a:	f841 2033 	str.w	r2, [r1, r3, lsl #3]
				xQueueRegistry[ ux ].xHandle = xQueue;
 8007f2e:	4a0a      	ldr	r2, [pc, #40]	; (8007f58 <vQueueAddToRegistry+0x50>)
 8007f30:	68fb      	ldr	r3, [r7, #12]
 8007f32:	00db      	lsls	r3, r3, #3
 8007f34:	4413      	add	r3, r2
 8007f36:	687a      	ldr	r2, [r7, #4]
 8007f38:	605a      	str	r2, [r3, #4]

				traceQUEUE_REGISTRY_ADD( xQueue, pcQueueName );
				break;
 8007f3a:	e006      	b.n	8007f4a <vQueueAddToRegistry+0x42>
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 8007f3c:	68fb      	ldr	r3, [r7, #12]
 8007f3e:	3301      	adds	r3, #1
 8007f40:	60fb      	str	r3, [r7, #12]
 8007f42:	68fb      	ldr	r3, [r7, #12]
 8007f44:	2b07      	cmp	r3, #7
 8007f46:	d9e7      	bls.n	8007f18 <vQueueAddToRegistry+0x10>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	}
 8007f48:	bf00      	nop
 8007f4a:	bf00      	nop
 8007f4c:	3714      	adds	r7, #20
 8007f4e:	46bd      	mov	sp, r7
 8007f50:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007f54:	4770      	bx	lr
 8007f56:	bf00      	nop
 8007f58:	20000a38 	.word	0x20000a38

08007f5c <vQueueUnregisterQueue>:
/*-----------------------------------------------------------*/

#if ( configQUEUE_REGISTRY_SIZE > 0 )

	void vQueueUnregisterQueue( QueueHandle_t xQueue )
	{
 8007f5c:	b480      	push	{r7}
 8007f5e:	b085      	sub	sp, #20
 8007f60:	af00      	add	r7, sp, #0
 8007f62:	6078      	str	r0, [r7, #4]
	UBaseType_t ux;

		/* See if the handle of the queue being unregistered in actually in the
		registry. */
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 8007f64:	2300      	movs	r3, #0
 8007f66:	60fb      	str	r3, [r7, #12]
 8007f68:	e016      	b.n	8007f98 <vQueueUnregisterQueue+0x3c>
		{
			if( xQueueRegistry[ ux ].xHandle == xQueue )
 8007f6a:	4a10      	ldr	r2, [pc, #64]	; (8007fac <vQueueUnregisterQueue+0x50>)
 8007f6c:	68fb      	ldr	r3, [r7, #12]
 8007f6e:	00db      	lsls	r3, r3, #3
 8007f70:	4413      	add	r3, r2
 8007f72:	685b      	ldr	r3, [r3, #4]
 8007f74:	687a      	ldr	r2, [r7, #4]
 8007f76:	429a      	cmp	r2, r3
 8007f78:	d10b      	bne.n	8007f92 <vQueueUnregisterQueue+0x36>
			{
				/* Set the name to NULL to show that this slot if free again. */
				xQueueRegistry[ ux ].pcQueueName = NULL;
 8007f7a:	4a0c      	ldr	r2, [pc, #48]	; (8007fac <vQueueUnregisterQueue+0x50>)
 8007f7c:	68fb      	ldr	r3, [r7, #12]
 8007f7e:	2100      	movs	r1, #0
 8007f80:	f842 1033 	str.w	r1, [r2, r3, lsl #3]

				/* Set the handle to NULL to ensure the same queue handle cannot
				appear in the registry twice if it is added, removed, then
				added again. */
				xQueueRegistry[ ux ].xHandle = ( QueueHandle_t ) 0;
 8007f84:	4a09      	ldr	r2, [pc, #36]	; (8007fac <vQueueUnregisterQueue+0x50>)
 8007f86:	68fb      	ldr	r3, [r7, #12]
 8007f88:	00db      	lsls	r3, r3, #3
 8007f8a:	4413      	add	r3, r2
 8007f8c:	2200      	movs	r2, #0
 8007f8e:	605a      	str	r2, [r3, #4]
				break;
 8007f90:	e006      	b.n	8007fa0 <vQueueUnregisterQueue+0x44>
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 8007f92:	68fb      	ldr	r3, [r7, #12]
 8007f94:	3301      	adds	r3, #1
 8007f96:	60fb      	str	r3, [r7, #12]
 8007f98:	68fb      	ldr	r3, [r7, #12]
 8007f9a:	2b07      	cmp	r3, #7
 8007f9c:	d9e5      	bls.n	8007f6a <vQueueUnregisterQueue+0xe>
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}

	} /*lint !e818 xQueue could not be pointer to const because it is a typedef. */
 8007f9e:	bf00      	nop
 8007fa0:	bf00      	nop
 8007fa2:	3714      	adds	r7, #20
 8007fa4:	46bd      	mov	sp, r7
 8007fa6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007faa:	4770      	bx	lr
 8007fac:	20000a38 	.word	0x20000a38

08007fb0 <vQueueWaitForMessageRestricted>:
/*-----------------------------------------------------------*/

#if ( configUSE_TIMERS == 1 )

	void vQueueWaitForMessageRestricted( QueueHandle_t xQueue, TickType_t xTicksToWait, const BaseType_t xWaitIndefinitely )
	{
 8007fb0:	b580      	push	{r7, lr}
 8007fb2:	b086      	sub	sp, #24
 8007fb4:	af00      	add	r7, sp, #0
 8007fb6:	60f8      	str	r0, [r7, #12]
 8007fb8:	60b9      	str	r1, [r7, #8]
 8007fba:	607a      	str	r2, [r7, #4]
	Queue_t * const pxQueue = xQueue;
 8007fbc:	68fb      	ldr	r3, [r7, #12]
 8007fbe:	617b      	str	r3, [r7, #20]
		will not actually cause the task to block, just place it on a blocked
		list.  It will not block until the scheduler is unlocked - at which
		time a yield will be performed.  If an item is added to the queue while
		the queue is locked, and the calling task blocks on the queue, then the
		calling task will be immediately unblocked when the queue is unlocked. */
		prvLockQueue( pxQueue );
 8007fc0:	f001 fd58 	bl	8009a74 <vPortEnterCritical>
 8007fc4:	697b      	ldr	r3, [r7, #20]
 8007fc6:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8007fca:	b25b      	sxtb	r3, r3
 8007fcc:	f1b3 3fff 	cmp.w	r3, #4294967295
 8007fd0:	d103      	bne.n	8007fda <vQueueWaitForMessageRestricted+0x2a>
 8007fd2:	697b      	ldr	r3, [r7, #20]
 8007fd4:	2200      	movs	r2, #0
 8007fd6:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8007fda:	697b      	ldr	r3, [r7, #20]
 8007fdc:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8007fe0:	b25b      	sxtb	r3, r3
 8007fe2:	f1b3 3fff 	cmp.w	r3, #4294967295
 8007fe6:	d103      	bne.n	8007ff0 <vQueueWaitForMessageRestricted+0x40>
 8007fe8:	697b      	ldr	r3, [r7, #20]
 8007fea:	2200      	movs	r2, #0
 8007fec:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8007ff0:	f001 fd70 	bl	8009ad4 <vPortExitCritical>
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t ) 0U )
 8007ff4:	697b      	ldr	r3, [r7, #20]
 8007ff6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007ff8:	2b00      	cmp	r3, #0
 8007ffa:	d106      	bne.n	800800a <vQueueWaitForMessageRestricted+0x5a>
		{
			/* There is nothing in the queue, block for the specified period. */
			vTaskPlaceOnEventListRestricted( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait, xWaitIndefinitely );
 8007ffc:	697b      	ldr	r3, [r7, #20]
 8007ffe:	3324      	adds	r3, #36	; 0x24
 8008000:	687a      	ldr	r2, [r7, #4]
 8008002:	68b9      	ldr	r1, [r7, #8]
 8008004:	4618      	mov	r0, r3
 8008006:	f000 fcf1 	bl	80089ec <vTaskPlaceOnEventListRestricted>
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
		prvUnlockQueue( pxQueue );
 800800a:	6978      	ldr	r0, [r7, #20]
 800800c:	f7ff fefb 	bl	8007e06 <prvUnlockQueue>
	}
 8008010:	bf00      	nop
 8008012:	3718      	adds	r7, #24
 8008014:	46bd      	mov	sp, r7
 8008016:	bd80      	pop	{r7, pc}

08008018 <xTaskCreateStatic>:
									const uint32_t ulStackDepth,
									void * const pvParameters,
									UBaseType_t uxPriority,
									StackType_t * const puxStackBuffer,
									StaticTask_t * const pxTaskBuffer )
	{
 8008018:	b580      	push	{r7, lr}
 800801a:	b08e      	sub	sp, #56	; 0x38
 800801c:	af04      	add	r7, sp, #16
 800801e:	60f8      	str	r0, [r7, #12]
 8008020:	60b9      	str	r1, [r7, #8]
 8008022:	607a      	str	r2, [r7, #4]
 8008024:	603b      	str	r3, [r7, #0]
	TCB_t *pxNewTCB;
	TaskHandle_t xReturn;

		configASSERT( puxStackBuffer != NULL );
 8008026:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8008028:	2b00      	cmp	r3, #0
 800802a:	d10a      	bne.n	8008042 <xTaskCreateStatic+0x2a>
	__asm volatile
 800802c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008030:	f383 8811 	msr	BASEPRI, r3
 8008034:	f3bf 8f6f 	isb	sy
 8008038:	f3bf 8f4f 	dsb	sy
 800803c:	623b      	str	r3, [r7, #32]
}
 800803e:	bf00      	nop
 8008040:	e7fe      	b.n	8008040 <xTaskCreateStatic+0x28>
		configASSERT( pxTaskBuffer != NULL );
 8008042:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8008044:	2b00      	cmp	r3, #0
 8008046:	d10a      	bne.n	800805e <xTaskCreateStatic+0x46>
	__asm volatile
 8008048:	f04f 0350 	mov.w	r3, #80	; 0x50
 800804c:	f383 8811 	msr	BASEPRI, r3
 8008050:	f3bf 8f6f 	isb	sy
 8008054:	f3bf 8f4f 	dsb	sy
 8008058:	61fb      	str	r3, [r7, #28]
}
 800805a:	bf00      	nop
 800805c:	e7fe      	b.n	800805c <xTaskCreateStatic+0x44>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticTask_t equals the size of the real task
			structure. */
			volatile size_t xSize = sizeof( StaticTask_t );
 800805e:	2360      	movs	r3, #96	; 0x60
 8008060:	613b      	str	r3, [r7, #16]
			configASSERT( xSize == sizeof( TCB_t ) );
 8008062:	693b      	ldr	r3, [r7, #16]
 8008064:	2b60      	cmp	r3, #96	; 0x60
 8008066:	d00a      	beq.n	800807e <xTaskCreateStatic+0x66>
	__asm volatile
 8008068:	f04f 0350 	mov.w	r3, #80	; 0x50
 800806c:	f383 8811 	msr	BASEPRI, r3
 8008070:	f3bf 8f6f 	isb	sy
 8008074:	f3bf 8f4f 	dsb	sy
 8008078:	61bb      	str	r3, [r7, #24]
}
 800807a:	bf00      	nop
 800807c:	e7fe      	b.n	800807c <xTaskCreateStatic+0x64>
			( void ) xSize; /* Prevent lint warning when configASSERT() is not used. */
 800807e:	693b      	ldr	r3, [r7, #16]
		}
		#endif /* configASSERT_DEFINED */


		if( ( pxTaskBuffer != NULL ) && ( puxStackBuffer != NULL ) )
 8008080:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8008082:	2b00      	cmp	r3, #0
 8008084:	d01e      	beq.n	80080c4 <xTaskCreateStatic+0xac>
 8008086:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8008088:	2b00      	cmp	r3, #0
 800808a:	d01b      	beq.n	80080c4 <xTaskCreateStatic+0xac>
		{
			/* The memory used for the task's TCB and stack are passed into this
			function - use them. */
			pxNewTCB = ( TCB_t * ) pxTaskBuffer; /*lint !e740 !e9087 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 800808c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800808e:	627b      	str	r3, [r7, #36]	; 0x24
			pxNewTCB->pxStack = ( StackType_t * ) puxStackBuffer;
 8008090:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008092:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8008094:	631a      	str	r2, [r3, #48]	; 0x30

			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 !e9029 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created statically in case the task is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskSTATICALLY_ALLOCATED_STACK_AND_TCB;
 8008096:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008098:	2202      	movs	r2, #2
 800809a:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d
			}
			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

			prvInitialiseNewTask( pxTaskCode, pcName, ulStackDepth, pvParameters, uxPriority, &xReturn, pxNewTCB, NULL );
 800809e:	2300      	movs	r3, #0
 80080a0:	9303      	str	r3, [sp, #12]
 80080a2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80080a4:	9302      	str	r3, [sp, #8]
 80080a6:	f107 0314 	add.w	r3, r7, #20
 80080aa:	9301      	str	r3, [sp, #4]
 80080ac:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80080ae:	9300      	str	r3, [sp, #0]
 80080b0:	683b      	ldr	r3, [r7, #0]
 80080b2:	687a      	ldr	r2, [r7, #4]
 80080b4:	68b9      	ldr	r1, [r7, #8]
 80080b6:	68f8      	ldr	r0, [r7, #12]
 80080b8:	f000 f850 	bl	800815c <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 80080bc:	6a78      	ldr	r0, [r7, #36]	; 0x24
 80080be:	f000 f8df 	bl	8008280 <prvAddNewTaskToReadyList>
 80080c2:	e001      	b.n	80080c8 <xTaskCreateStatic+0xb0>
		}
		else
		{
			xReturn = NULL;
 80080c4:	2300      	movs	r3, #0
 80080c6:	617b      	str	r3, [r7, #20]
		}

		return xReturn;
 80080c8:	697b      	ldr	r3, [r7, #20]
	}
 80080ca:	4618      	mov	r0, r3
 80080cc:	3728      	adds	r7, #40	; 0x28
 80080ce:	46bd      	mov	sp, r7
 80080d0:	bd80      	pop	{r7, pc}

080080d2 <xTaskCreate>:
							const char * const pcName,		/*lint !e971 Unqualified char types are allowed for strings and single characters only. */
							const configSTACK_DEPTH_TYPE usStackDepth,
							void * const pvParameters,
							UBaseType_t uxPriority,
							TaskHandle_t * const pxCreatedTask )
	{
 80080d2:	b580      	push	{r7, lr}
 80080d4:	b08c      	sub	sp, #48	; 0x30
 80080d6:	af04      	add	r7, sp, #16
 80080d8:	60f8      	str	r0, [r7, #12]
 80080da:	60b9      	str	r1, [r7, #8]
 80080dc:	603b      	str	r3, [r7, #0]
 80080de:	4613      	mov	r3, r2
 80080e0:	80fb      	strh	r3, [r7, #6]
		#else /* portSTACK_GROWTH */
		{
		StackType_t *pxStack;

			/* Allocate space for the stack used by the task being created. */
			pxStack = pvPortMalloc( ( ( ( size_t ) usStackDepth ) * sizeof( StackType_t ) ) ); /*lint !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack and this allocation is the stack. */
 80080e2:	88fb      	ldrh	r3, [r7, #6]
 80080e4:	009b      	lsls	r3, r3, #2
 80080e6:	4618      	mov	r0, r3
 80080e8:	f001 fde6 	bl	8009cb8 <pvPortMalloc>
 80080ec:	6178      	str	r0, [r7, #20]

			if( pxStack != NULL )
 80080ee:	697b      	ldr	r3, [r7, #20]
 80080f0:	2b00      	cmp	r3, #0
 80080f2:	d00e      	beq.n	8008112 <xTaskCreate+0x40>
			{
				/* Allocate space for the TCB. */
				pxNewTCB = ( TCB_t * ) pvPortMalloc( sizeof( TCB_t ) ); /*lint !e9087 !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack, and the first member of TCB_t is always a pointer to the task's stack. */
 80080f4:	2060      	movs	r0, #96	; 0x60
 80080f6:	f001 fddf 	bl	8009cb8 <pvPortMalloc>
 80080fa:	61f8      	str	r0, [r7, #28]

				if( pxNewTCB != NULL )
 80080fc:	69fb      	ldr	r3, [r7, #28]
 80080fe:	2b00      	cmp	r3, #0
 8008100:	d003      	beq.n	800810a <xTaskCreate+0x38>
				{
					/* Store the stack location in the TCB. */
					pxNewTCB->pxStack = pxStack;
 8008102:	69fb      	ldr	r3, [r7, #28]
 8008104:	697a      	ldr	r2, [r7, #20]
 8008106:	631a      	str	r2, [r3, #48]	; 0x30
 8008108:	e005      	b.n	8008116 <xTaskCreate+0x44>
				}
				else
				{
					/* The stack cannot be used as the TCB was not created.  Free
					it again. */
					vPortFree( pxStack );
 800810a:	6978      	ldr	r0, [r7, #20]
 800810c:	f001 fea4 	bl	8009e58 <vPortFree>
 8008110:	e001      	b.n	8008116 <xTaskCreate+0x44>
				}
			}
			else
			{
				pxNewTCB = NULL;
 8008112:	2300      	movs	r3, #0
 8008114:	61fb      	str	r3, [r7, #28]
			}
		}
		#endif /* portSTACK_GROWTH */

		if( pxNewTCB != NULL )
 8008116:	69fb      	ldr	r3, [r7, #28]
 8008118:	2b00      	cmp	r3, #0
 800811a:	d017      	beq.n	800814c <xTaskCreate+0x7a>
		{
			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e9029 !e731 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created dynamically in case it is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB;
 800811c:	69fb      	ldr	r3, [r7, #28]
 800811e:	2200      	movs	r2, #0
 8008120:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d
			}
			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

			prvInitialiseNewTask( pxTaskCode, pcName, ( uint32_t ) usStackDepth, pvParameters, uxPriority, pxCreatedTask, pxNewTCB, NULL );
 8008124:	88fa      	ldrh	r2, [r7, #6]
 8008126:	2300      	movs	r3, #0
 8008128:	9303      	str	r3, [sp, #12]
 800812a:	69fb      	ldr	r3, [r7, #28]
 800812c:	9302      	str	r3, [sp, #8]
 800812e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8008130:	9301      	str	r3, [sp, #4]
 8008132:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008134:	9300      	str	r3, [sp, #0]
 8008136:	683b      	ldr	r3, [r7, #0]
 8008138:	68b9      	ldr	r1, [r7, #8]
 800813a:	68f8      	ldr	r0, [r7, #12]
 800813c:	f000 f80e 	bl	800815c <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 8008140:	69f8      	ldr	r0, [r7, #28]
 8008142:	f000 f89d 	bl	8008280 <prvAddNewTaskToReadyList>
			xReturn = pdPASS;
 8008146:	2301      	movs	r3, #1
 8008148:	61bb      	str	r3, [r7, #24]
 800814a:	e002      	b.n	8008152 <xTaskCreate+0x80>
		}
		else
		{
			xReturn = errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY;
 800814c:	f04f 33ff 	mov.w	r3, #4294967295
 8008150:	61bb      	str	r3, [r7, #24]
		}

		return xReturn;
 8008152:	69bb      	ldr	r3, [r7, #24]
	}
 8008154:	4618      	mov	r0, r3
 8008156:	3720      	adds	r7, #32
 8008158:	46bd      	mov	sp, r7
 800815a:	bd80      	pop	{r7, pc}

0800815c <prvInitialiseNewTask>:
									void * const pvParameters,
									UBaseType_t uxPriority,
									TaskHandle_t * const pxCreatedTask,
									TCB_t *pxNewTCB,
									const MemoryRegion_t * const xRegions )
{
 800815c:	b580      	push	{r7, lr}
 800815e:	b088      	sub	sp, #32
 8008160:	af00      	add	r7, sp, #0
 8008162:	60f8      	str	r0, [r7, #12]
 8008164:	60b9      	str	r1, [r7, #8]
 8008166:	607a      	str	r2, [r7, #4]
 8008168:	603b      	str	r3, [r7, #0]

	/* Avoid dependency on memset() if it is not required. */
	#if( tskSET_NEW_STACKS_TO_KNOWN_VALUE == 1 )
	{
		/* Fill the stack with a known value to assist debugging. */
		( void ) memset( pxNewTCB->pxStack, ( int ) tskSTACK_FILL_BYTE, ( size_t ) ulStackDepth * sizeof( StackType_t ) );
 800816a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800816c:	6b18      	ldr	r0, [r3, #48]	; 0x30
 800816e:	687b      	ldr	r3, [r7, #4]
 8008170:	009b      	lsls	r3, r3, #2
 8008172:	461a      	mov	r2, r3
 8008174:	21a5      	movs	r1, #165	; 0xa5
 8008176:	f002 f865 	bl	800a244 <memset>
	grows from high memory to low (as per the 80x86) or vice versa.
	portSTACK_GROWTH is used to make the result positive or negative as required
	by the port. */
	#if( portSTACK_GROWTH < 0 )
	{
		pxTopOfStack = &( pxNewTCB->pxStack[ ulStackDepth - ( uint32_t ) 1 ] );
 800817a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800817c:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800817e:	687b      	ldr	r3, [r7, #4]
 8008180:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
 8008184:	3b01      	subs	r3, #1
 8008186:	009b      	lsls	r3, r3, #2
 8008188:	4413      	add	r3, r2
 800818a:	61bb      	str	r3, [r7, #24]
		pxTopOfStack = ( StackType_t * ) ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack ) & ( ~( ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) ) ); /*lint !e923 !e9033 !e9078 MISRA exception.  Avoiding casts between pointers and integers is not practical.  Size differences accounted for using portPOINTER_SIZE_TYPE type.  Checked by assert(). */
 800818c:	69bb      	ldr	r3, [r7, #24]
 800818e:	f023 0307 	bic.w	r3, r3, #7
 8008192:	61bb      	str	r3, [r7, #24]

		/* Check the alignment of the calculated top of stack is correct. */
		configASSERT( ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack & ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) == 0UL ) );
 8008194:	69bb      	ldr	r3, [r7, #24]
 8008196:	f003 0307 	and.w	r3, r3, #7
 800819a:	2b00      	cmp	r3, #0
 800819c:	d00a      	beq.n	80081b4 <prvInitialiseNewTask+0x58>
	__asm volatile
 800819e:	f04f 0350 	mov.w	r3, #80	; 0x50
 80081a2:	f383 8811 	msr	BASEPRI, r3
 80081a6:	f3bf 8f6f 	isb	sy
 80081aa:	f3bf 8f4f 	dsb	sy
 80081ae:	617b      	str	r3, [r7, #20]
}
 80081b0:	bf00      	nop
 80081b2:	e7fe      	b.n	80081b2 <prvInitialiseNewTask+0x56>
		pxNewTCB->pxEndOfStack = pxNewTCB->pxStack + ( ulStackDepth - ( uint32_t ) 1 );
	}
	#endif /* portSTACK_GROWTH */

	/* Store the task name in the TCB. */
	if( pcName != NULL )
 80081b4:	68bb      	ldr	r3, [r7, #8]
 80081b6:	2b00      	cmp	r3, #0
 80081b8:	d01f      	beq.n	80081fa <prvInitialiseNewTask+0x9e>
	{
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 80081ba:	2300      	movs	r3, #0
 80081bc:	61fb      	str	r3, [r7, #28]
 80081be:	e012      	b.n	80081e6 <prvInitialiseNewTask+0x8a>
		{
			pxNewTCB->pcTaskName[ x ] = pcName[ x ];
 80081c0:	68ba      	ldr	r2, [r7, #8]
 80081c2:	69fb      	ldr	r3, [r7, #28]
 80081c4:	4413      	add	r3, r2
 80081c6:	7819      	ldrb	r1, [r3, #0]
 80081c8:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80081ca:	69fb      	ldr	r3, [r7, #28]
 80081cc:	4413      	add	r3, r2
 80081ce:	3334      	adds	r3, #52	; 0x34
 80081d0:	460a      	mov	r2, r1
 80081d2:	701a      	strb	r2, [r3, #0]

			/* Don't copy all configMAX_TASK_NAME_LEN if the string is shorter than
			configMAX_TASK_NAME_LEN characters just in case the memory after the
			string is not accessible (extremely unlikely). */
			if( pcName[ x ] == ( char ) 0x00 )
 80081d4:	68ba      	ldr	r2, [r7, #8]
 80081d6:	69fb      	ldr	r3, [r7, #28]
 80081d8:	4413      	add	r3, r2
 80081da:	781b      	ldrb	r3, [r3, #0]
 80081dc:	2b00      	cmp	r3, #0
 80081de:	d006      	beq.n	80081ee <prvInitialiseNewTask+0x92>
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 80081e0:	69fb      	ldr	r3, [r7, #28]
 80081e2:	3301      	adds	r3, #1
 80081e4:	61fb      	str	r3, [r7, #28]
 80081e6:	69fb      	ldr	r3, [r7, #28]
 80081e8:	2b0f      	cmp	r3, #15
 80081ea:	d9e9      	bls.n	80081c0 <prvInitialiseNewTask+0x64>
 80081ec:	e000      	b.n	80081f0 <prvInitialiseNewTask+0x94>
			{
				break;
 80081ee:	bf00      	nop
			}
		}

		/* Ensure the name string is terminated in the case that the string length
		was greater or equal to configMAX_TASK_NAME_LEN. */
		pxNewTCB->pcTaskName[ configMAX_TASK_NAME_LEN - 1 ] = '\0';
 80081f0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80081f2:	2200      	movs	r2, #0
 80081f4:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 80081f8:	e003      	b.n	8008202 <prvInitialiseNewTask+0xa6>
	}
	else
	{
		/* The task has not been given a name, so just ensure there is a NULL
		terminator when it is read out. */
		pxNewTCB->pcTaskName[ 0 ] = 0x00;
 80081fa:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80081fc:	2200      	movs	r2, #0
 80081fe:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
	}

	/* This is used as an array index so must ensure it's not too large.  First
	remove the privilege bit if one is present. */
	if( uxPriority >= ( UBaseType_t ) configMAX_PRIORITIES )
 8008202:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008204:	2b37      	cmp	r3, #55	; 0x37
 8008206:	d901      	bls.n	800820c <prvInitialiseNewTask+0xb0>
	{
		uxPriority = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) 1U;
 8008208:	2337      	movs	r3, #55	; 0x37
 800820a:	62bb      	str	r3, [r7, #40]	; 0x28
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxNewTCB->uxPriority = uxPriority;
 800820c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800820e:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8008210:	62da      	str	r2, [r3, #44]	; 0x2c
	#if ( configUSE_MUTEXES == 1 )
	{
		pxNewTCB->uxBasePriority = uxPriority;
 8008212:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008214:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8008216:	64da      	str	r2, [r3, #76]	; 0x4c
		pxNewTCB->uxMutexesHeld = 0;
 8008218:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800821a:	2200      	movs	r2, #0
 800821c:	651a      	str	r2, [r3, #80]	; 0x50
	}
	#endif /* configUSE_MUTEXES */

	vListInitialiseItem( &( pxNewTCB->xStateListItem ) );
 800821e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008220:	3304      	adds	r3, #4
 8008222:	4618      	mov	r0, r3
 8008224:	f7fe fe56 	bl	8006ed4 <vListInitialiseItem>
	vListInitialiseItem( &( pxNewTCB->xEventListItem ) );
 8008228:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800822a:	3318      	adds	r3, #24
 800822c:	4618      	mov	r0, r3
 800822e:	f7fe fe51 	bl	8006ed4 <vListInitialiseItem>

	/* Set the pxNewTCB as a link back from the ListItem_t.  This is so we can get
	back to	the containing TCB from a generic item in a list. */
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xStateListItem ), pxNewTCB );
 8008232:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008234:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8008236:	611a      	str	r2, [r3, #16]

	/* Event lists are always in priority order. */
	listSET_LIST_ITEM_VALUE( &( pxNewTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8008238:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800823a:	f1c3 0238 	rsb	r2, r3, #56	; 0x38
 800823e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008240:	619a      	str	r2, [r3, #24]
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xEventListItem ), pxNewTCB );
 8008242:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008244:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8008246:	625a      	str	r2, [r3, #36]	; 0x24
	}
	#endif /* portCRITICAL_NESTING_IN_TCB */

	#if ( configUSE_APPLICATION_TASK_TAG == 1 )
	{
		pxNewTCB->pxTaskTag = NULL;
 8008248:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800824a:	2200      	movs	r2, #0
 800824c:	655a      	str	r2, [r3, #84]	; 0x54
	}
	#endif

	#if ( configUSE_TASK_NOTIFICATIONS == 1 )
	{
		pxNewTCB->ulNotifiedValue = 0;
 800824e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008250:	2200      	movs	r2, #0
 8008252:	659a      	str	r2, [r3, #88]	; 0x58
		pxNewTCB->ucNotifyState = taskNOT_WAITING_NOTIFICATION;
 8008254:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008256:	2200      	movs	r2, #0
 8008258:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c
			}
			#endif /* portSTACK_GROWTH */
		}
		#else /* portHAS_STACK_OVERFLOW_CHECKING */
		{
			pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters );
 800825c:	683a      	ldr	r2, [r7, #0]
 800825e:	68f9      	ldr	r1, [r7, #12]
 8008260:	69b8      	ldr	r0, [r7, #24]
 8008262:	f001 fadb 	bl	800981c <pxPortInitialiseStack>
 8008266:	4602      	mov	r2, r0
 8008268:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800826a:	601a      	str	r2, [r3, #0]
		}
		#endif /* portHAS_STACK_OVERFLOW_CHECKING */
	}
	#endif /* portUSING_MPU_WRAPPERS */

	if( pxCreatedTask != NULL )
 800826c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800826e:	2b00      	cmp	r3, #0
 8008270:	d002      	beq.n	8008278 <prvInitialiseNewTask+0x11c>
	{
		/* Pass the handle out in an anonymous way.  The handle can be used to
		change the created task's priority, delete the created task, etc.*/
		*pxCreatedTask = ( TaskHandle_t ) pxNewTCB;
 8008272:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8008274:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8008276:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 8008278:	bf00      	nop
 800827a:	3720      	adds	r7, #32
 800827c:	46bd      	mov	sp, r7
 800827e:	bd80      	pop	{r7, pc}

08008280 <prvAddNewTaskToReadyList>:
/*-----------------------------------------------------------*/

static void prvAddNewTaskToReadyList( TCB_t *pxNewTCB )
{
 8008280:	b580      	push	{r7, lr}
 8008282:	b082      	sub	sp, #8
 8008284:	af00      	add	r7, sp, #0
 8008286:	6078      	str	r0, [r7, #4]
	/* Ensure interrupts don't access the task lists while the lists are being
	updated. */
	taskENTER_CRITICAL();
 8008288:	f001 fbf4 	bl	8009a74 <vPortEnterCritical>
	{
		uxCurrentNumberOfTasks++;
 800828c:	4b2d      	ldr	r3, [pc, #180]	; (8008344 <prvAddNewTaskToReadyList+0xc4>)
 800828e:	681b      	ldr	r3, [r3, #0]
 8008290:	3301      	adds	r3, #1
 8008292:	4a2c      	ldr	r2, [pc, #176]	; (8008344 <prvAddNewTaskToReadyList+0xc4>)
 8008294:	6013      	str	r3, [r2, #0]
		if( pxCurrentTCB == NULL )
 8008296:	4b2c      	ldr	r3, [pc, #176]	; (8008348 <prvAddNewTaskToReadyList+0xc8>)
 8008298:	681b      	ldr	r3, [r3, #0]
 800829a:	2b00      	cmp	r3, #0
 800829c:	d109      	bne.n	80082b2 <prvAddNewTaskToReadyList+0x32>
		{
			/* There are no other tasks, or all the other tasks are in
			the suspended state - make this the current task. */
			pxCurrentTCB = pxNewTCB;
 800829e:	4a2a      	ldr	r2, [pc, #168]	; (8008348 <prvAddNewTaskToReadyList+0xc8>)
 80082a0:	687b      	ldr	r3, [r7, #4]
 80082a2:	6013      	str	r3, [r2, #0]

			if( uxCurrentNumberOfTasks == ( UBaseType_t ) 1 )
 80082a4:	4b27      	ldr	r3, [pc, #156]	; (8008344 <prvAddNewTaskToReadyList+0xc4>)
 80082a6:	681b      	ldr	r3, [r3, #0]
 80082a8:	2b01      	cmp	r3, #1
 80082aa:	d110      	bne.n	80082ce <prvAddNewTaskToReadyList+0x4e>
			{
				/* This is the first task to be created so do the preliminary
				initialisation required.  We will not recover if this call
				fails, but we will report the failure. */
				prvInitialiseTaskLists();
 80082ac:	f000 fccc 	bl	8008c48 <prvInitialiseTaskLists>
 80082b0:	e00d      	b.n	80082ce <prvAddNewTaskToReadyList+0x4e>
		else
		{
			/* If the scheduler is not already running, make this task the
			current task if it is the highest priority task to be created
			so far. */
			if( xSchedulerRunning == pdFALSE )
 80082b2:	4b26      	ldr	r3, [pc, #152]	; (800834c <prvAddNewTaskToReadyList+0xcc>)
 80082b4:	681b      	ldr	r3, [r3, #0]
 80082b6:	2b00      	cmp	r3, #0
 80082b8:	d109      	bne.n	80082ce <prvAddNewTaskToReadyList+0x4e>
			{
				if( pxCurrentTCB->uxPriority <= pxNewTCB->uxPriority )
 80082ba:	4b23      	ldr	r3, [pc, #140]	; (8008348 <prvAddNewTaskToReadyList+0xc8>)
 80082bc:	681b      	ldr	r3, [r3, #0]
 80082be:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80082c0:	687b      	ldr	r3, [r7, #4]
 80082c2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80082c4:	429a      	cmp	r2, r3
 80082c6:	d802      	bhi.n	80082ce <prvAddNewTaskToReadyList+0x4e>
				{
					pxCurrentTCB = pxNewTCB;
 80082c8:	4a1f      	ldr	r2, [pc, #124]	; (8008348 <prvAddNewTaskToReadyList+0xc8>)
 80082ca:	687b      	ldr	r3, [r7, #4]
 80082cc:	6013      	str	r3, [r2, #0]
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}

		uxTaskNumber++;
 80082ce:	4b20      	ldr	r3, [pc, #128]	; (8008350 <prvAddNewTaskToReadyList+0xd0>)
 80082d0:	681b      	ldr	r3, [r3, #0]
 80082d2:	3301      	adds	r3, #1
 80082d4:	4a1e      	ldr	r2, [pc, #120]	; (8008350 <prvAddNewTaskToReadyList+0xd0>)
 80082d6:	6013      	str	r3, [r2, #0]

		#if ( configUSE_TRACE_FACILITY == 1 )
		{
			/* Add a counter into the TCB for tracing only. */
			pxNewTCB->uxTCBNumber = uxTaskNumber;
 80082d8:	4b1d      	ldr	r3, [pc, #116]	; (8008350 <prvAddNewTaskToReadyList+0xd0>)
 80082da:	681a      	ldr	r2, [r3, #0]
 80082dc:	687b      	ldr	r3, [r7, #4]
 80082de:	645a      	str	r2, [r3, #68]	; 0x44
		}
		#endif /* configUSE_TRACE_FACILITY */
		traceTASK_CREATE( pxNewTCB );

		prvAddTaskToReadyList( pxNewTCB );
 80082e0:	687b      	ldr	r3, [r7, #4]
 80082e2:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80082e4:	4b1b      	ldr	r3, [pc, #108]	; (8008354 <prvAddNewTaskToReadyList+0xd4>)
 80082e6:	681b      	ldr	r3, [r3, #0]
 80082e8:	429a      	cmp	r2, r3
 80082ea:	d903      	bls.n	80082f4 <prvAddNewTaskToReadyList+0x74>
 80082ec:	687b      	ldr	r3, [r7, #4]
 80082ee:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80082f0:	4a18      	ldr	r2, [pc, #96]	; (8008354 <prvAddNewTaskToReadyList+0xd4>)
 80082f2:	6013      	str	r3, [r2, #0]
 80082f4:	687b      	ldr	r3, [r7, #4]
 80082f6:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80082f8:	4613      	mov	r3, r2
 80082fa:	009b      	lsls	r3, r3, #2
 80082fc:	4413      	add	r3, r2
 80082fe:	009b      	lsls	r3, r3, #2
 8008300:	4a15      	ldr	r2, [pc, #84]	; (8008358 <prvAddNewTaskToReadyList+0xd8>)
 8008302:	441a      	add	r2, r3
 8008304:	687b      	ldr	r3, [r7, #4]
 8008306:	3304      	adds	r3, #4
 8008308:	4619      	mov	r1, r3
 800830a:	4610      	mov	r0, r2
 800830c:	f7fe fdef 	bl	8006eee <vListInsertEnd>

		portSETUP_TCB( pxNewTCB );
	}
	taskEXIT_CRITICAL();
 8008310:	f001 fbe0 	bl	8009ad4 <vPortExitCritical>

	if( xSchedulerRunning != pdFALSE )
 8008314:	4b0d      	ldr	r3, [pc, #52]	; (800834c <prvAddNewTaskToReadyList+0xcc>)
 8008316:	681b      	ldr	r3, [r3, #0]
 8008318:	2b00      	cmp	r3, #0
 800831a:	d00e      	beq.n	800833a <prvAddNewTaskToReadyList+0xba>
	{
		/* If the created task is of a higher priority than the current task
		then it should run now. */
		if( pxCurrentTCB->uxPriority < pxNewTCB->uxPriority )
 800831c:	4b0a      	ldr	r3, [pc, #40]	; (8008348 <prvAddNewTaskToReadyList+0xc8>)
 800831e:	681b      	ldr	r3, [r3, #0]
 8008320:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8008322:	687b      	ldr	r3, [r7, #4]
 8008324:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8008326:	429a      	cmp	r2, r3
 8008328:	d207      	bcs.n	800833a <prvAddNewTaskToReadyList+0xba>
		{
			taskYIELD_IF_USING_PREEMPTION();
 800832a:	4b0c      	ldr	r3, [pc, #48]	; (800835c <prvAddNewTaskToReadyList+0xdc>)
 800832c:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8008330:	601a      	str	r2, [r3, #0]
 8008332:	f3bf 8f4f 	dsb	sy
 8008336:	f3bf 8f6f 	isb	sy
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 800833a:	bf00      	nop
 800833c:	3708      	adds	r7, #8
 800833e:	46bd      	mov	sp, r7
 8008340:	bd80      	pop	{r7, pc}
 8008342:	bf00      	nop
 8008344:	20000f4c 	.word	0x20000f4c
 8008348:	20000a78 	.word	0x20000a78
 800834c:	20000f58 	.word	0x20000f58
 8008350:	20000f68 	.word	0x20000f68
 8008354:	20000f54 	.word	0x20000f54
 8008358:	20000a7c 	.word	0x20000a7c
 800835c:	e000ed04 	.word	0xe000ed04

08008360 <vTaskDelay>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelay == 1 )

	void vTaskDelay( const TickType_t xTicksToDelay )
	{
 8008360:	b580      	push	{r7, lr}
 8008362:	b084      	sub	sp, #16
 8008364:	af00      	add	r7, sp, #0
 8008366:	6078      	str	r0, [r7, #4]
	BaseType_t xAlreadyYielded = pdFALSE;
 8008368:	2300      	movs	r3, #0
 800836a:	60fb      	str	r3, [r7, #12]

		/* A delay time of zero just forces a reschedule. */
		if( xTicksToDelay > ( TickType_t ) 0U )
 800836c:	687b      	ldr	r3, [r7, #4]
 800836e:	2b00      	cmp	r3, #0
 8008370:	d017      	beq.n	80083a2 <vTaskDelay+0x42>
		{
			configASSERT( uxSchedulerSuspended == 0 );
 8008372:	4b13      	ldr	r3, [pc, #76]	; (80083c0 <vTaskDelay+0x60>)
 8008374:	681b      	ldr	r3, [r3, #0]
 8008376:	2b00      	cmp	r3, #0
 8008378:	d00a      	beq.n	8008390 <vTaskDelay+0x30>
	__asm volatile
 800837a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800837e:	f383 8811 	msr	BASEPRI, r3
 8008382:	f3bf 8f6f 	isb	sy
 8008386:	f3bf 8f4f 	dsb	sy
 800838a:	60bb      	str	r3, [r7, #8]
}
 800838c:	bf00      	nop
 800838e:	e7fe      	b.n	800838e <vTaskDelay+0x2e>
			vTaskSuspendAll();
 8008390:	f000 f910 	bl	80085b4 <vTaskSuspendAll>
				list or removed from the blocked list until the scheduler
				is resumed.

				This task cannot be in an event list as it is the currently
				executing task. */
				prvAddCurrentTaskToDelayedList( xTicksToDelay, pdFALSE );
 8008394:	2100      	movs	r1, #0
 8008396:	6878      	ldr	r0, [r7, #4]
 8008398:	f000 fe9e 	bl	80090d8 <prvAddCurrentTaskToDelayedList>
			}
			xAlreadyYielded = xTaskResumeAll();
 800839c:	f000 f918 	bl	80085d0 <xTaskResumeAll>
 80083a0:	60f8      	str	r0, [r7, #12]
			mtCOVERAGE_TEST_MARKER();
		}

		/* Force a reschedule if xTaskResumeAll has not already done so, we may
		have put ourselves to sleep. */
		if( xAlreadyYielded == pdFALSE )
 80083a2:	68fb      	ldr	r3, [r7, #12]
 80083a4:	2b00      	cmp	r3, #0
 80083a6:	d107      	bne.n	80083b8 <vTaskDelay+0x58>
		{
			portYIELD_WITHIN_API();
 80083a8:	4b06      	ldr	r3, [pc, #24]	; (80083c4 <vTaskDelay+0x64>)
 80083aa:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80083ae:	601a      	str	r2, [r3, #0]
 80083b0:	f3bf 8f4f 	dsb	sy
 80083b4:	f3bf 8f6f 	isb	sy
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
 80083b8:	bf00      	nop
 80083ba:	3710      	adds	r7, #16
 80083bc:	46bd      	mov	sp, r7
 80083be:	bd80      	pop	{r7, pc}
 80083c0:	20000f74 	.word	0x20000f74
 80083c4:	e000ed04 	.word	0xe000ed04

080083c8 <prvTaskIsTaskSuspended>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskSuspend == 1 )

	static BaseType_t prvTaskIsTaskSuspended( const TaskHandle_t xTask )
	{
 80083c8:	b480      	push	{r7}
 80083ca:	b087      	sub	sp, #28
 80083cc:	af00      	add	r7, sp, #0
 80083ce:	6078      	str	r0, [r7, #4]
	BaseType_t xReturn = pdFALSE;
 80083d0:	2300      	movs	r3, #0
 80083d2:	617b      	str	r3, [r7, #20]
	const TCB_t * const pxTCB = xTask;
 80083d4:	687b      	ldr	r3, [r7, #4]
 80083d6:	613b      	str	r3, [r7, #16]

		/* Accesses xPendingReadyList so must be called from a critical
		section. */

		/* It does not make sense to check if the calling task is suspended. */
		configASSERT( xTask );
 80083d8:	687b      	ldr	r3, [r7, #4]
 80083da:	2b00      	cmp	r3, #0
 80083dc:	d10a      	bne.n	80083f4 <prvTaskIsTaskSuspended+0x2c>
	__asm volatile
 80083de:	f04f 0350 	mov.w	r3, #80	; 0x50
 80083e2:	f383 8811 	msr	BASEPRI, r3
 80083e6:	f3bf 8f6f 	isb	sy
 80083ea:	f3bf 8f4f 	dsb	sy
 80083ee:	60fb      	str	r3, [r7, #12]
}
 80083f0:	bf00      	nop
 80083f2:	e7fe      	b.n	80083f2 <prvTaskIsTaskSuspended+0x2a>

		/* Is the task being resumed actually in the suspended list? */
		if( listIS_CONTAINED_WITHIN( &xSuspendedTaskList, &( pxTCB->xStateListItem ) ) != pdFALSE )
 80083f4:	693b      	ldr	r3, [r7, #16]
 80083f6:	695b      	ldr	r3, [r3, #20]
 80083f8:	4a0a      	ldr	r2, [pc, #40]	; (8008424 <prvTaskIsTaskSuspended+0x5c>)
 80083fa:	4293      	cmp	r3, r2
 80083fc:	d10a      	bne.n	8008414 <prvTaskIsTaskSuspended+0x4c>
		{
			/* Has the task already been resumed from within an ISR? */
			if( listIS_CONTAINED_WITHIN( &xPendingReadyList, &( pxTCB->xEventListItem ) ) == pdFALSE )
 80083fe:	693b      	ldr	r3, [r7, #16]
 8008400:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8008402:	4a09      	ldr	r2, [pc, #36]	; (8008428 <prvTaskIsTaskSuspended+0x60>)
 8008404:	4293      	cmp	r3, r2
 8008406:	d005      	beq.n	8008414 <prvTaskIsTaskSuspended+0x4c>
			{
				/* Is it in the suspended list because it is in the	Suspended
				state, or because is is blocked with no timeout? */
				if( listIS_CONTAINED_WITHIN( NULL, &( pxTCB->xEventListItem ) ) != pdFALSE ) /*lint !e961.  The cast is only redundant when NULL is used. */
 8008408:	693b      	ldr	r3, [r7, #16]
 800840a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800840c:	2b00      	cmp	r3, #0
 800840e:	d101      	bne.n	8008414 <prvTaskIsTaskSuspended+0x4c>
				{
					xReturn = pdTRUE;
 8008410:	2301      	movs	r3, #1
 8008412:	617b      	str	r3, [r7, #20]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		return xReturn;
 8008414:	697b      	ldr	r3, [r7, #20]
	} /*lint !e818 xTask cannot be a pointer to const because it is a typedef. */
 8008416:	4618      	mov	r0, r3
 8008418:	371c      	adds	r7, #28
 800841a:	46bd      	mov	sp, r7
 800841c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008420:	4770      	bx	lr
 8008422:	bf00      	nop
 8008424:	20000f38 	.word	0x20000f38
 8008428:	20000f0c 	.word	0x20000f0c

0800842c <vTaskResume>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskSuspend == 1 )

	void vTaskResume( TaskHandle_t xTaskToResume )
	{
 800842c:	b580      	push	{r7, lr}
 800842e:	b084      	sub	sp, #16
 8008430:	af00      	add	r7, sp, #0
 8008432:	6078      	str	r0, [r7, #4]
	TCB_t * const pxTCB = xTaskToResume;
 8008434:	687b      	ldr	r3, [r7, #4]
 8008436:	60fb      	str	r3, [r7, #12]

		/* It does not make sense to resume the calling task. */
		configASSERT( xTaskToResume );
 8008438:	687b      	ldr	r3, [r7, #4]
 800843a:	2b00      	cmp	r3, #0
 800843c:	d10a      	bne.n	8008454 <vTaskResume+0x28>
	__asm volatile
 800843e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008442:	f383 8811 	msr	BASEPRI, r3
 8008446:	f3bf 8f6f 	isb	sy
 800844a:	f3bf 8f4f 	dsb	sy
 800844e:	60bb      	str	r3, [r7, #8]
}
 8008450:	bf00      	nop
 8008452:	e7fe      	b.n	8008452 <vTaskResume+0x26>

		/* The parameter cannot be NULL as it is impossible to resume the
		currently executing task. */
		if( ( pxTCB != pxCurrentTCB ) && ( pxTCB != NULL ) )
 8008454:	4b20      	ldr	r3, [pc, #128]	; (80084d8 <vTaskResume+0xac>)
 8008456:	681b      	ldr	r3, [r3, #0]
 8008458:	68fa      	ldr	r2, [r7, #12]
 800845a:	429a      	cmp	r2, r3
 800845c:	d038      	beq.n	80084d0 <vTaskResume+0xa4>
 800845e:	68fb      	ldr	r3, [r7, #12]
 8008460:	2b00      	cmp	r3, #0
 8008462:	d035      	beq.n	80084d0 <vTaskResume+0xa4>
		{
			taskENTER_CRITICAL();
 8008464:	f001 fb06 	bl	8009a74 <vPortEnterCritical>
			{
				if( prvTaskIsTaskSuspended( pxTCB ) != pdFALSE )
 8008468:	68f8      	ldr	r0, [r7, #12]
 800846a:	f7ff ffad 	bl	80083c8 <prvTaskIsTaskSuspended>
 800846e:	4603      	mov	r3, r0
 8008470:	2b00      	cmp	r3, #0
 8008472:	d02b      	beq.n	80084cc <vTaskResume+0xa0>
				{
					traceTASK_RESUME( pxTCB );

					/* The ready list can be accessed even if the scheduler is
					suspended because this is inside a critical section. */
					( void ) uxListRemove(  &( pxTCB->xStateListItem ) );
 8008474:	68fb      	ldr	r3, [r7, #12]
 8008476:	3304      	adds	r3, #4
 8008478:	4618      	mov	r0, r3
 800847a:	f7fe fd95 	bl	8006fa8 <uxListRemove>
					prvAddTaskToReadyList( pxTCB );
 800847e:	68fb      	ldr	r3, [r7, #12]
 8008480:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8008482:	4b16      	ldr	r3, [pc, #88]	; (80084dc <vTaskResume+0xb0>)
 8008484:	681b      	ldr	r3, [r3, #0]
 8008486:	429a      	cmp	r2, r3
 8008488:	d903      	bls.n	8008492 <vTaskResume+0x66>
 800848a:	68fb      	ldr	r3, [r7, #12]
 800848c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800848e:	4a13      	ldr	r2, [pc, #76]	; (80084dc <vTaskResume+0xb0>)
 8008490:	6013      	str	r3, [r2, #0]
 8008492:	68fb      	ldr	r3, [r7, #12]
 8008494:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8008496:	4613      	mov	r3, r2
 8008498:	009b      	lsls	r3, r3, #2
 800849a:	4413      	add	r3, r2
 800849c:	009b      	lsls	r3, r3, #2
 800849e:	4a10      	ldr	r2, [pc, #64]	; (80084e0 <vTaskResume+0xb4>)
 80084a0:	441a      	add	r2, r3
 80084a2:	68fb      	ldr	r3, [r7, #12]
 80084a4:	3304      	adds	r3, #4
 80084a6:	4619      	mov	r1, r3
 80084a8:	4610      	mov	r0, r2
 80084aa:	f7fe fd20 	bl	8006eee <vListInsertEnd>

					/* A higher priority task may have just been resumed. */
					if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 80084ae:	68fb      	ldr	r3, [r7, #12]
 80084b0:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80084b2:	4b09      	ldr	r3, [pc, #36]	; (80084d8 <vTaskResume+0xac>)
 80084b4:	681b      	ldr	r3, [r3, #0]
 80084b6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80084b8:	429a      	cmp	r2, r3
 80084ba:	d307      	bcc.n	80084cc <vTaskResume+0xa0>
					{
						/* This yield may not cause the task just resumed to run,
						but will leave the lists in the correct state for the
						next yield. */
						taskYIELD_IF_USING_PREEMPTION();
 80084bc:	4b09      	ldr	r3, [pc, #36]	; (80084e4 <vTaskResume+0xb8>)
 80084be:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80084c2:	601a      	str	r2, [r3, #0]
 80084c4:	f3bf 8f4f 	dsb	sy
 80084c8:	f3bf 8f6f 	isb	sy
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}
			}
			taskEXIT_CRITICAL();
 80084cc:	f001 fb02 	bl	8009ad4 <vPortExitCritical>
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
 80084d0:	bf00      	nop
 80084d2:	3710      	adds	r7, #16
 80084d4:	46bd      	mov	sp, r7
 80084d6:	bd80      	pop	{r7, pc}
 80084d8:	20000a78 	.word	0x20000a78
 80084dc:	20000f54 	.word	0x20000f54
 80084e0:	20000a7c 	.word	0x20000a7c
 80084e4:	e000ed04 	.word	0xe000ed04

080084e8 <vTaskStartScheduler>:

#endif /* ( ( INCLUDE_xTaskResumeFromISR == 1 ) && ( INCLUDE_vTaskSuspend == 1 ) ) */
/*-----------------------------------------------------------*/

void vTaskStartScheduler( void )
{
 80084e8:	b580      	push	{r7, lr}
 80084ea:	b08a      	sub	sp, #40	; 0x28
 80084ec:	af04      	add	r7, sp, #16
BaseType_t xReturn;

	/* Add the idle task at the lowest priority. */
	#if( configSUPPORT_STATIC_ALLOCATION == 1 )
	{
		StaticTask_t *pxIdleTaskTCBBuffer = NULL;
 80084ee:	2300      	movs	r3, #0
 80084f0:	60bb      	str	r3, [r7, #8]
		StackType_t *pxIdleTaskStackBuffer = NULL;
 80084f2:	2300      	movs	r3, #0
 80084f4:	607b      	str	r3, [r7, #4]
		uint32_t ulIdleTaskStackSize;

		/* The Idle task is created using user provided RAM - obtain the
		address of the RAM then create the idle task. */
		vApplicationGetIdleTaskMemory( &pxIdleTaskTCBBuffer, &pxIdleTaskStackBuffer, &ulIdleTaskStackSize );
 80084f6:	463a      	mov	r2, r7
 80084f8:	1d39      	adds	r1, r7, #4
 80084fa:	f107 0308 	add.w	r3, r7, #8
 80084fe:	4618      	mov	r0, r3
 8008500:	f7fe fc94 	bl	8006e2c <vApplicationGetIdleTaskMemory>
		xIdleTaskHandle = xTaskCreateStatic(	prvIdleTask,
 8008504:	6839      	ldr	r1, [r7, #0]
 8008506:	687b      	ldr	r3, [r7, #4]
 8008508:	68ba      	ldr	r2, [r7, #8]
 800850a:	9202      	str	r2, [sp, #8]
 800850c:	9301      	str	r3, [sp, #4]
 800850e:	2300      	movs	r3, #0
 8008510:	9300      	str	r3, [sp, #0]
 8008512:	2300      	movs	r3, #0
 8008514:	460a      	mov	r2, r1
 8008516:	4921      	ldr	r1, [pc, #132]	; (800859c <vTaskStartScheduler+0xb4>)
 8008518:	4821      	ldr	r0, [pc, #132]	; (80085a0 <vTaskStartScheduler+0xb8>)
 800851a:	f7ff fd7d 	bl	8008018 <xTaskCreateStatic>
 800851e:	4603      	mov	r3, r0
 8008520:	4a20      	ldr	r2, [pc, #128]	; (80085a4 <vTaskStartScheduler+0xbc>)
 8008522:	6013      	str	r3, [r2, #0]
												( void * ) NULL, /*lint !e961.  The cast is not redundant for all compilers. */
												portPRIVILEGE_BIT, /* In effect ( tskIDLE_PRIORITY | portPRIVILEGE_BIT ), but tskIDLE_PRIORITY is zero. */
												pxIdleTaskStackBuffer,
												pxIdleTaskTCBBuffer ); /*lint !e961 MISRA exception, justified as it is not a redundant explicit cast to all supported compilers. */

		if( xIdleTaskHandle != NULL )
 8008524:	4b1f      	ldr	r3, [pc, #124]	; (80085a4 <vTaskStartScheduler+0xbc>)
 8008526:	681b      	ldr	r3, [r3, #0]
 8008528:	2b00      	cmp	r3, #0
 800852a:	d002      	beq.n	8008532 <vTaskStartScheduler+0x4a>
		{
			xReturn = pdPASS;
 800852c:	2301      	movs	r3, #1
 800852e:	617b      	str	r3, [r7, #20]
 8008530:	e001      	b.n	8008536 <vTaskStartScheduler+0x4e>
		}
		else
		{
			xReturn = pdFAIL;
 8008532:	2300      	movs	r3, #0
 8008534:	617b      	str	r3, [r7, #20]
	}
	#endif /* configSUPPORT_STATIC_ALLOCATION */

	#if ( configUSE_TIMERS == 1 )
	{
		if( xReturn == pdPASS )
 8008536:	697b      	ldr	r3, [r7, #20]
 8008538:	2b01      	cmp	r3, #1
 800853a:	d102      	bne.n	8008542 <vTaskStartScheduler+0x5a>
		{
			xReturn = xTimerCreateTimerTask();
 800853c:	f000 fe20 	bl	8009180 <xTimerCreateTimerTask>
 8008540:	6178      	str	r0, [r7, #20]
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif /* configUSE_TIMERS */

	if( xReturn == pdPASS )
 8008542:	697b      	ldr	r3, [r7, #20]
 8008544:	2b01      	cmp	r3, #1
 8008546:	d116      	bne.n	8008576 <vTaskStartScheduler+0x8e>
	__asm volatile
 8008548:	f04f 0350 	mov.w	r3, #80	; 0x50
 800854c:	f383 8811 	msr	BASEPRI, r3
 8008550:	f3bf 8f6f 	isb	sy
 8008554:	f3bf 8f4f 	dsb	sy
 8008558:	613b      	str	r3, [r7, #16]
}
 800855a:	bf00      	nop
			for additional information. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */

		xNextTaskUnblockTime = portMAX_DELAY;
 800855c:	4b12      	ldr	r3, [pc, #72]	; (80085a8 <vTaskStartScheduler+0xc0>)
 800855e:	f04f 32ff 	mov.w	r2, #4294967295
 8008562:	601a      	str	r2, [r3, #0]
		xSchedulerRunning = pdTRUE;
 8008564:	4b11      	ldr	r3, [pc, #68]	; (80085ac <vTaskStartScheduler+0xc4>)
 8008566:	2201      	movs	r2, #1
 8008568:	601a      	str	r2, [r3, #0]
		xTickCount = ( TickType_t ) configINITIAL_TICK_COUNT;
 800856a:	4b11      	ldr	r3, [pc, #68]	; (80085b0 <vTaskStartScheduler+0xc8>)
 800856c:	2200      	movs	r2, #0
 800856e:	601a      	str	r2, [r3, #0]

		traceTASK_SWITCHED_IN();

		/* Setting up the timer tick is hardware specific and thus in the
		portable interface. */
		if( xPortStartScheduler() != pdFALSE )
 8008570:	f001 f9de 	bl	8009930 <xPortStartScheduler>
	}

	/* Prevent compiler warnings if INCLUDE_xTaskGetIdleTaskHandle is set to 0,
	meaning xIdleTaskHandle is not used anywhere else. */
	( void ) xIdleTaskHandle;
}
 8008574:	e00e      	b.n	8008594 <vTaskStartScheduler+0xac>
		configASSERT( xReturn != errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY );
 8008576:	697b      	ldr	r3, [r7, #20]
 8008578:	f1b3 3fff 	cmp.w	r3, #4294967295
 800857c:	d10a      	bne.n	8008594 <vTaskStartScheduler+0xac>
	__asm volatile
 800857e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008582:	f383 8811 	msr	BASEPRI, r3
 8008586:	f3bf 8f6f 	isb	sy
 800858a:	f3bf 8f4f 	dsb	sy
 800858e:	60fb      	str	r3, [r7, #12]
}
 8008590:	bf00      	nop
 8008592:	e7fe      	b.n	8008592 <vTaskStartScheduler+0xaa>
}
 8008594:	bf00      	nop
 8008596:	3718      	adds	r7, #24
 8008598:	46bd      	mov	sp, r7
 800859a:	bd80      	pop	{r7, pc}
 800859c:	0800b75c 	.word	0x0800b75c
 80085a0:	08008c15 	.word	0x08008c15
 80085a4:	20000f70 	.word	0x20000f70
 80085a8:	20000f6c 	.word	0x20000f6c
 80085ac:	20000f58 	.word	0x20000f58
 80085b0:	20000f50 	.word	0x20000f50

080085b4 <vTaskSuspendAll>:
	vPortEndScheduler();
}
/*----------------------------------------------------------*/

void vTaskSuspendAll( void )
{
 80085b4:	b480      	push	{r7}
 80085b6:	af00      	add	r7, sp, #0
	do not otherwise exhibit real time behaviour. */
	portSOFTWARE_BARRIER();

	/* The scheduler is suspended if uxSchedulerSuspended is non-zero.  An increment
	is used to allow calls to vTaskSuspendAll() to nest. */
	++uxSchedulerSuspended;
 80085b8:	4b04      	ldr	r3, [pc, #16]	; (80085cc <vTaskSuspendAll+0x18>)
 80085ba:	681b      	ldr	r3, [r3, #0]
 80085bc:	3301      	adds	r3, #1
 80085be:	4a03      	ldr	r2, [pc, #12]	; (80085cc <vTaskSuspendAll+0x18>)
 80085c0:	6013      	str	r3, [r2, #0]

	/* Enforces ordering for ports and optimised compilers that may otherwise place
	the above increment elsewhere. */
	portMEMORY_BARRIER();
}
 80085c2:	bf00      	nop
 80085c4:	46bd      	mov	sp, r7
 80085c6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80085ca:	4770      	bx	lr
 80085cc:	20000f74 	.word	0x20000f74

080085d0 <xTaskResumeAll>:

#endif /* configUSE_TICKLESS_IDLE */
/*----------------------------------------------------------*/

BaseType_t xTaskResumeAll( void )
{
 80085d0:	b580      	push	{r7, lr}
 80085d2:	b084      	sub	sp, #16
 80085d4:	af00      	add	r7, sp, #0
TCB_t *pxTCB = NULL;
 80085d6:	2300      	movs	r3, #0
 80085d8:	60fb      	str	r3, [r7, #12]
BaseType_t xAlreadyYielded = pdFALSE;
 80085da:	2300      	movs	r3, #0
 80085dc:	60bb      	str	r3, [r7, #8]

	/* If uxSchedulerSuspended is zero then this function does not match a
	previous call to vTaskSuspendAll(). */
	configASSERT( uxSchedulerSuspended );
 80085de:	4b42      	ldr	r3, [pc, #264]	; (80086e8 <xTaskResumeAll+0x118>)
 80085e0:	681b      	ldr	r3, [r3, #0]
 80085e2:	2b00      	cmp	r3, #0
 80085e4:	d10a      	bne.n	80085fc <xTaskResumeAll+0x2c>
	__asm volatile
 80085e6:	f04f 0350 	mov.w	r3, #80	; 0x50
 80085ea:	f383 8811 	msr	BASEPRI, r3
 80085ee:	f3bf 8f6f 	isb	sy
 80085f2:	f3bf 8f4f 	dsb	sy
 80085f6:	603b      	str	r3, [r7, #0]
}
 80085f8:	bf00      	nop
 80085fa:	e7fe      	b.n	80085fa <xTaskResumeAll+0x2a>
	/* It is possible that an ISR caused a task to be removed from an event
	list while the scheduler was suspended.  If this was the case then the
	removed task will have been added to the xPendingReadyList.  Once the
	scheduler has been resumed it is safe to move all the pending ready
	tasks from this list into their appropriate ready list. */
	taskENTER_CRITICAL();
 80085fc:	f001 fa3a 	bl	8009a74 <vPortEnterCritical>
	{
		--uxSchedulerSuspended;
 8008600:	4b39      	ldr	r3, [pc, #228]	; (80086e8 <xTaskResumeAll+0x118>)
 8008602:	681b      	ldr	r3, [r3, #0]
 8008604:	3b01      	subs	r3, #1
 8008606:	4a38      	ldr	r2, [pc, #224]	; (80086e8 <xTaskResumeAll+0x118>)
 8008608:	6013      	str	r3, [r2, #0]

		if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 800860a:	4b37      	ldr	r3, [pc, #220]	; (80086e8 <xTaskResumeAll+0x118>)
 800860c:	681b      	ldr	r3, [r3, #0]
 800860e:	2b00      	cmp	r3, #0
 8008610:	d162      	bne.n	80086d8 <xTaskResumeAll+0x108>
		{
			if( uxCurrentNumberOfTasks > ( UBaseType_t ) 0U )
 8008612:	4b36      	ldr	r3, [pc, #216]	; (80086ec <xTaskResumeAll+0x11c>)
 8008614:	681b      	ldr	r3, [r3, #0]
 8008616:	2b00      	cmp	r3, #0
 8008618:	d05e      	beq.n	80086d8 <xTaskResumeAll+0x108>
			{
				/* Move any readied tasks from the pending list into the
				appropriate ready list. */
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 800861a:	e02f      	b.n	800867c <xTaskResumeAll+0xac>
				{
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xPendingReadyList ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800861c:	4b34      	ldr	r3, [pc, #208]	; (80086f0 <xTaskResumeAll+0x120>)
 800861e:	68db      	ldr	r3, [r3, #12]
 8008620:	68db      	ldr	r3, [r3, #12]
 8008622:	60fb      	str	r3, [r7, #12]
					( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 8008624:	68fb      	ldr	r3, [r7, #12]
 8008626:	3318      	adds	r3, #24
 8008628:	4618      	mov	r0, r3
 800862a:	f7fe fcbd 	bl	8006fa8 <uxListRemove>
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 800862e:	68fb      	ldr	r3, [r7, #12]
 8008630:	3304      	adds	r3, #4
 8008632:	4618      	mov	r0, r3
 8008634:	f7fe fcb8 	bl	8006fa8 <uxListRemove>
					prvAddTaskToReadyList( pxTCB );
 8008638:	68fb      	ldr	r3, [r7, #12]
 800863a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800863c:	4b2d      	ldr	r3, [pc, #180]	; (80086f4 <xTaskResumeAll+0x124>)
 800863e:	681b      	ldr	r3, [r3, #0]
 8008640:	429a      	cmp	r2, r3
 8008642:	d903      	bls.n	800864c <xTaskResumeAll+0x7c>
 8008644:	68fb      	ldr	r3, [r7, #12]
 8008646:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8008648:	4a2a      	ldr	r2, [pc, #168]	; (80086f4 <xTaskResumeAll+0x124>)
 800864a:	6013      	str	r3, [r2, #0]
 800864c:	68fb      	ldr	r3, [r7, #12]
 800864e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8008650:	4613      	mov	r3, r2
 8008652:	009b      	lsls	r3, r3, #2
 8008654:	4413      	add	r3, r2
 8008656:	009b      	lsls	r3, r3, #2
 8008658:	4a27      	ldr	r2, [pc, #156]	; (80086f8 <xTaskResumeAll+0x128>)
 800865a:	441a      	add	r2, r3
 800865c:	68fb      	ldr	r3, [r7, #12]
 800865e:	3304      	adds	r3, #4
 8008660:	4619      	mov	r1, r3
 8008662:	4610      	mov	r0, r2
 8008664:	f7fe fc43 	bl	8006eee <vListInsertEnd>

					/* If the moved task has a priority higher than the current
					task then a yield must be performed. */
					if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 8008668:	68fb      	ldr	r3, [r7, #12]
 800866a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800866c:	4b23      	ldr	r3, [pc, #140]	; (80086fc <xTaskResumeAll+0x12c>)
 800866e:	681b      	ldr	r3, [r3, #0]
 8008670:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8008672:	429a      	cmp	r2, r3
 8008674:	d302      	bcc.n	800867c <xTaskResumeAll+0xac>
					{
						xYieldPending = pdTRUE;
 8008676:	4b22      	ldr	r3, [pc, #136]	; (8008700 <xTaskResumeAll+0x130>)
 8008678:	2201      	movs	r2, #1
 800867a:	601a      	str	r2, [r3, #0]
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 800867c:	4b1c      	ldr	r3, [pc, #112]	; (80086f0 <xTaskResumeAll+0x120>)
 800867e:	681b      	ldr	r3, [r3, #0]
 8008680:	2b00      	cmp	r3, #0
 8008682:	d1cb      	bne.n	800861c <xTaskResumeAll+0x4c>
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( pxTCB != NULL )
 8008684:	68fb      	ldr	r3, [r7, #12]
 8008686:	2b00      	cmp	r3, #0
 8008688:	d001      	beq.n	800868e <xTaskResumeAll+0xbe>
					which may have prevented the next unblock time from being
					re-calculated, in which case re-calculate it now.  Mainly
					important for low power tickless implementations, where
					this can prevent an unnecessary exit from low power
					state. */
					prvResetNextTaskUnblockTime();
 800868a:	f000 fb7b 	bl	8008d84 <prvResetNextTaskUnblockTime>
				/* If any ticks occurred while the scheduler was suspended then
				they should be processed now.  This ensures the tick count does
				not	slip, and that any delayed tasks are resumed at the correct
				time. */
				{
					TickType_t xPendedCounts = xPendedTicks; /* Non-volatile copy. */
 800868e:	4b1d      	ldr	r3, [pc, #116]	; (8008704 <xTaskResumeAll+0x134>)
 8008690:	681b      	ldr	r3, [r3, #0]
 8008692:	607b      	str	r3, [r7, #4]

					if( xPendedCounts > ( TickType_t ) 0U )
 8008694:	687b      	ldr	r3, [r7, #4]
 8008696:	2b00      	cmp	r3, #0
 8008698:	d010      	beq.n	80086bc <xTaskResumeAll+0xec>
					{
						do
						{
							if( xTaskIncrementTick() != pdFALSE )
 800869a:	f000 f847 	bl	800872c <xTaskIncrementTick>
 800869e:	4603      	mov	r3, r0
 80086a0:	2b00      	cmp	r3, #0
 80086a2:	d002      	beq.n	80086aa <xTaskResumeAll+0xda>
							{
								xYieldPending = pdTRUE;
 80086a4:	4b16      	ldr	r3, [pc, #88]	; (8008700 <xTaskResumeAll+0x130>)
 80086a6:	2201      	movs	r2, #1
 80086a8:	601a      	str	r2, [r3, #0]
							}
							else
							{
								mtCOVERAGE_TEST_MARKER();
							}
							--xPendedCounts;
 80086aa:	687b      	ldr	r3, [r7, #4]
 80086ac:	3b01      	subs	r3, #1
 80086ae:	607b      	str	r3, [r7, #4]
						} while( xPendedCounts > ( TickType_t ) 0U );
 80086b0:	687b      	ldr	r3, [r7, #4]
 80086b2:	2b00      	cmp	r3, #0
 80086b4:	d1f1      	bne.n	800869a <xTaskResumeAll+0xca>

						xPendedTicks = 0;
 80086b6:	4b13      	ldr	r3, [pc, #76]	; (8008704 <xTaskResumeAll+0x134>)
 80086b8:	2200      	movs	r2, #0
 80086ba:	601a      	str	r2, [r3, #0]
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( xYieldPending != pdFALSE )
 80086bc:	4b10      	ldr	r3, [pc, #64]	; (8008700 <xTaskResumeAll+0x130>)
 80086be:	681b      	ldr	r3, [r3, #0]
 80086c0:	2b00      	cmp	r3, #0
 80086c2:	d009      	beq.n	80086d8 <xTaskResumeAll+0x108>
				{
					#if( configUSE_PREEMPTION != 0 )
					{
						xAlreadyYielded = pdTRUE;
 80086c4:	2301      	movs	r3, #1
 80086c6:	60bb      	str	r3, [r7, #8]
					}
					#endif
					taskYIELD_IF_USING_PREEMPTION();
 80086c8:	4b0f      	ldr	r3, [pc, #60]	; (8008708 <xTaskResumeAll+0x138>)
 80086ca:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80086ce:	601a      	str	r2, [r3, #0]
 80086d0:	f3bf 8f4f 	dsb	sy
 80086d4:	f3bf 8f6f 	isb	sy
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 80086d8:	f001 f9fc 	bl	8009ad4 <vPortExitCritical>

	return xAlreadyYielded;
 80086dc:	68bb      	ldr	r3, [r7, #8]
}
 80086de:	4618      	mov	r0, r3
 80086e0:	3710      	adds	r7, #16
 80086e2:	46bd      	mov	sp, r7
 80086e4:	bd80      	pop	{r7, pc}
 80086e6:	bf00      	nop
 80086e8:	20000f74 	.word	0x20000f74
 80086ec:	20000f4c 	.word	0x20000f4c
 80086f0:	20000f0c 	.word	0x20000f0c
 80086f4:	20000f54 	.word	0x20000f54
 80086f8:	20000a7c 	.word	0x20000a7c
 80086fc:	20000a78 	.word	0x20000a78
 8008700:	20000f60 	.word	0x20000f60
 8008704:	20000f5c 	.word	0x20000f5c
 8008708:	e000ed04 	.word	0xe000ed04

0800870c <xTaskGetTickCount>:
/*-----------------------------------------------------------*/

TickType_t xTaskGetTickCount( void )
{
 800870c:	b480      	push	{r7}
 800870e:	b083      	sub	sp, #12
 8008710:	af00      	add	r7, sp, #0
TickType_t xTicks;

	/* Critical section required if running on a 16 bit processor. */
	portTICK_TYPE_ENTER_CRITICAL();
	{
		xTicks = xTickCount;
 8008712:	4b05      	ldr	r3, [pc, #20]	; (8008728 <xTaskGetTickCount+0x1c>)
 8008714:	681b      	ldr	r3, [r3, #0]
 8008716:	607b      	str	r3, [r7, #4]
	}
	portTICK_TYPE_EXIT_CRITICAL();

	return xTicks;
 8008718:	687b      	ldr	r3, [r7, #4]
}
 800871a:	4618      	mov	r0, r3
 800871c:	370c      	adds	r7, #12
 800871e:	46bd      	mov	sp, r7
 8008720:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008724:	4770      	bx	lr
 8008726:	bf00      	nop
 8008728:	20000f50 	.word	0x20000f50

0800872c <xTaskIncrementTick>:

#endif /* INCLUDE_xTaskAbortDelay */
/*----------------------------------------------------------*/

BaseType_t xTaskIncrementTick( void )
{
 800872c:	b580      	push	{r7, lr}
 800872e:	b086      	sub	sp, #24
 8008730:	af00      	add	r7, sp, #0
TCB_t * pxTCB;
TickType_t xItemValue;
BaseType_t xSwitchRequired = pdFALSE;
 8008732:	2300      	movs	r3, #0
 8008734:	617b      	str	r3, [r7, #20]

	/* Called by the portable layer each time a tick interrupt occurs.
	Increments the tick then checks to see if the new tick value will cause any
	tasks to be unblocked. */
	traceTASK_INCREMENT_TICK( xTickCount );
	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8008736:	4b4f      	ldr	r3, [pc, #316]	; (8008874 <xTaskIncrementTick+0x148>)
 8008738:	681b      	ldr	r3, [r3, #0]
 800873a:	2b00      	cmp	r3, #0
 800873c:	f040 808f 	bne.w	800885e <xTaskIncrementTick+0x132>
	{
		/* Minor optimisation.  The tick count cannot change in this
		block. */
		const TickType_t xConstTickCount = xTickCount + ( TickType_t ) 1;
 8008740:	4b4d      	ldr	r3, [pc, #308]	; (8008878 <xTaskIncrementTick+0x14c>)
 8008742:	681b      	ldr	r3, [r3, #0]
 8008744:	3301      	adds	r3, #1
 8008746:	613b      	str	r3, [r7, #16]

		/* Increment the RTOS tick, switching the delayed and overflowed
		delayed lists if it wraps to 0. */
		xTickCount = xConstTickCount;
 8008748:	4a4b      	ldr	r2, [pc, #300]	; (8008878 <xTaskIncrementTick+0x14c>)
 800874a:	693b      	ldr	r3, [r7, #16]
 800874c:	6013      	str	r3, [r2, #0]

		if( xConstTickCount == ( TickType_t ) 0U ) /*lint !e774 'if' does not always evaluate to false as it is looking for an overflow. */
 800874e:	693b      	ldr	r3, [r7, #16]
 8008750:	2b00      	cmp	r3, #0
 8008752:	d120      	bne.n	8008796 <xTaskIncrementTick+0x6a>
		{
			taskSWITCH_DELAYED_LISTS();
 8008754:	4b49      	ldr	r3, [pc, #292]	; (800887c <xTaskIncrementTick+0x150>)
 8008756:	681b      	ldr	r3, [r3, #0]
 8008758:	681b      	ldr	r3, [r3, #0]
 800875a:	2b00      	cmp	r3, #0
 800875c:	d00a      	beq.n	8008774 <xTaskIncrementTick+0x48>
	__asm volatile
 800875e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008762:	f383 8811 	msr	BASEPRI, r3
 8008766:	f3bf 8f6f 	isb	sy
 800876a:	f3bf 8f4f 	dsb	sy
 800876e:	603b      	str	r3, [r7, #0]
}
 8008770:	bf00      	nop
 8008772:	e7fe      	b.n	8008772 <xTaskIncrementTick+0x46>
 8008774:	4b41      	ldr	r3, [pc, #260]	; (800887c <xTaskIncrementTick+0x150>)
 8008776:	681b      	ldr	r3, [r3, #0]
 8008778:	60fb      	str	r3, [r7, #12]
 800877a:	4b41      	ldr	r3, [pc, #260]	; (8008880 <xTaskIncrementTick+0x154>)
 800877c:	681b      	ldr	r3, [r3, #0]
 800877e:	4a3f      	ldr	r2, [pc, #252]	; (800887c <xTaskIncrementTick+0x150>)
 8008780:	6013      	str	r3, [r2, #0]
 8008782:	4a3f      	ldr	r2, [pc, #252]	; (8008880 <xTaskIncrementTick+0x154>)
 8008784:	68fb      	ldr	r3, [r7, #12]
 8008786:	6013      	str	r3, [r2, #0]
 8008788:	4b3e      	ldr	r3, [pc, #248]	; (8008884 <xTaskIncrementTick+0x158>)
 800878a:	681b      	ldr	r3, [r3, #0]
 800878c:	3301      	adds	r3, #1
 800878e:	4a3d      	ldr	r2, [pc, #244]	; (8008884 <xTaskIncrementTick+0x158>)
 8008790:	6013      	str	r3, [r2, #0]
 8008792:	f000 faf7 	bl	8008d84 <prvResetNextTaskUnblockTime>

		/* See if this tick has made a timeout expire.  Tasks are stored in
		the	queue in the order of their wake time - meaning once one task
		has been found whose block time has not expired there is no need to
		look any further down the list. */
		if( xConstTickCount >= xNextTaskUnblockTime )
 8008796:	4b3c      	ldr	r3, [pc, #240]	; (8008888 <xTaskIncrementTick+0x15c>)
 8008798:	681b      	ldr	r3, [r3, #0]
 800879a:	693a      	ldr	r2, [r7, #16]
 800879c:	429a      	cmp	r2, r3
 800879e:	d349      	bcc.n	8008834 <xTaskIncrementTick+0x108>
		{
			for( ;; )
			{
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 80087a0:	4b36      	ldr	r3, [pc, #216]	; (800887c <xTaskIncrementTick+0x150>)
 80087a2:	681b      	ldr	r3, [r3, #0]
 80087a4:	681b      	ldr	r3, [r3, #0]
 80087a6:	2b00      	cmp	r3, #0
 80087a8:	d104      	bne.n	80087b4 <xTaskIncrementTick+0x88>
					/* The delayed list is empty.  Set xNextTaskUnblockTime
					to the maximum possible value so it is extremely
					unlikely that the
					if( xTickCount >= xNextTaskUnblockTime ) test will pass
					next time through. */
					xNextTaskUnblockTime = portMAX_DELAY; /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 80087aa:	4b37      	ldr	r3, [pc, #220]	; (8008888 <xTaskIncrementTick+0x15c>)
 80087ac:	f04f 32ff 	mov.w	r2, #4294967295
 80087b0:	601a      	str	r2, [r3, #0]
					break;
 80087b2:	e03f      	b.n	8008834 <xTaskIncrementTick+0x108>
				{
					/* The delayed list is not empty, get the value of the
					item at the head of the delayed list.  This is the time
					at which the task at the head of the delayed list must
					be removed from the Blocked state. */
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 80087b4:	4b31      	ldr	r3, [pc, #196]	; (800887c <xTaskIncrementTick+0x150>)
 80087b6:	681b      	ldr	r3, [r3, #0]
 80087b8:	68db      	ldr	r3, [r3, #12]
 80087ba:	68db      	ldr	r3, [r3, #12]
 80087bc:	60bb      	str	r3, [r7, #8]
					xItemValue = listGET_LIST_ITEM_VALUE( &( pxTCB->xStateListItem ) );
 80087be:	68bb      	ldr	r3, [r7, #8]
 80087c0:	685b      	ldr	r3, [r3, #4]
 80087c2:	607b      	str	r3, [r7, #4]

					if( xConstTickCount < xItemValue )
 80087c4:	693a      	ldr	r2, [r7, #16]
 80087c6:	687b      	ldr	r3, [r7, #4]
 80087c8:	429a      	cmp	r2, r3
 80087ca:	d203      	bcs.n	80087d4 <xTaskIncrementTick+0xa8>
						/* It is not time to unblock this item yet, but the
						item value is the time at which the task at the head
						of the blocked list must be removed from the Blocked
						state -	so record the item value in
						xNextTaskUnblockTime. */
						xNextTaskUnblockTime = xItemValue;
 80087cc:	4a2e      	ldr	r2, [pc, #184]	; (8008888 <xTaskIncrementTick+0x15c>)
 80087ce:	687b      	ldr	r3, [r7, #4]
 80087d0:	6013      	str	r3, [r2, #0]
						break; /*lint !e9011 Code structure here is deedmed easier to understand with multiple breaks. */
 80087d2:	e02f      	b.n	8008834 <xTaskIncrementTick+0x108>
					{
						mtCOVERAGE_TEST_MARKER();
					}

					/* It is time to remove the item from the Blocked state. */
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 80087d4:	68bb      	ldr	r3, [r7, #8]
 80087d6:	3304      	adds	r3, #4
 80087d8:	4618      	mov	r0, r3
 80087da:	f7fe fbe5 	bl	8006fa8 <uxListRemove>

					/* Is the task waiting on an event also?  If so remove
					it from the event list. */
					if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
 80087de:	68bb      	ldr	r3, [r7, #8]
 80087e0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80087e2:	2b00      	cmp	r3, #0
 80087e4:	d004      	beq.n	80087f0 <xTaskIncrementTick+0xc4>
					{
						( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 80087e6:	68bb      	ldr	r3, [r7, #8]
 80087e8:	3318      	adds	r3, #24
 80087ea:	4618      	mov	r0, r3
 80087ec:	f7fe fbdc 	bl	8006fa8 <uxListRemove>
						mtCOVERAGE_TEST_MARKER();
					}

					/* Place the unblocked task into the appropriate ready
					list. */
					prvAddTaskToReadyList( pxTCB );
 80087f0:	68bb      	ldr	r3, [r7, #8]
 80087f2:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80087f4:	4b25      	ldr	r3, [pc, #148]	; (800888c <xTaskIncrementTick+0x160>)
 80087f6:	681b      	ldr	r3, [r3, #0]
 80087f8:	429a      	cmp	r2, r3
 80087fa:	d903      	bls.n	8008804 <xTaskIncrementTick+0xd8>
 80087fc:	68bb      	ldr	r3, [r7, #8]
 80087fe:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8008800:	4a22      	ldr	r2, [pc, #136]	; (800888c <xTaskIncrementTick+0x160>)
 8008802:	6013      	str	r3, [r2, #0]
 8008804:	68bb      	ldr	r3, [r7, #8]
 8008806:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8008808:	4613      	mov	r3, r2
 800880a:	009b      	lsls	r3, r3, #2
 800880c:	4413      	add	r3, r2
 800880e:	009b      	lsls	r3, r3, #2
 8008810:	4a1f      	ldr	r2, [pc, #124]	; (8008890 <xTaskIncrementTick+0x164>)
 8008812:	441a      	add	r2, r3
 8008814:	68bb      	ldr	r3, [r7, #8]
 8008816:	3304      	adds	r3, #4
 8008818:	4619      	mov	r1, r3
 800881a:	4610      	mov	r0, r2
 800881c:	f7fe fb67 	bl	8006eee <vListInsertEnd>
					{
						/* Preemption is on, but a context switch should
						only be performed if the unblocked task has a
						priority that is equal to or higher than the
						currently executing task. */
						if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 8008820:	68bb      	ldr	r3, [r7, #8]
 8008822:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8008824:	4b1b      	ldr	r3, [pc, #108]	; (8008894 <xTaskIncrementTick+0x168>)
 8008826:	681b      	ldr	r3, [r3, #0]
 8008828:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800882a:	429a      	cmp	r2, r3
 800882c:	d3b8      	bcc.n	80087a0 <xTaskIncrementTick+0x74>
						{
							xSwitchRequired = pdTRUE;
 800882e:	2301      	movs	r3, #1
 8008830:	617b      	str	r3, [r7, #20]
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8008832:	e7b5      	b.n	80087a0 <xTaskIncrementTick+0x74>
		/* Tasks of equal priority to the currently running task will share
		processing time (time slice) if preemption is on, and the application
		writer has not explicitly turned time slicing off. */
		#if ( ( configUSE_PREEMPTION == 1 ) && ( configUSE_TIME_SLICING == 1 ) )
		{
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ pxCurrentTCB->uxPriority ] ) ) > ( UBaseType_t ) 1 )
 8008834:	4b17      	ldr	r3, [pc, #92]	; (8008894 <xTaskIncrementTick+0x168>)
 8008836:	681b      	ldr	r3, [r3, #0]
 8008838:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800883a:	4915      	ldr	r1, [pc, #84]	; (8008890 <xTaskIncrementTick+0x164>)
 800883c:	4613      	mov	r3, r2
 800883e:	009b      	lsls	r3, r3, #2
 8008840:	4413      	add	r3, r2
 8008842:	009b      	lsls	r3, r3, #2
 8008844:	440b      	add	r3, r1
 8008846:	681b      	ldr	r3, [r3, #0]
 8008848:	2b01      	cmp	r3, #1
 800884a:	d901      	bls.n	8008850 <xTaskIncrementTick+0x124>
			{
				xSwitchRequired = pdTRUE;
 800884c:	2301      	movs	r3, #1
 800884e:	617b      	str	r3, [r7, #20]
		}
		#endif /* configUSE_TICK_HOOK */

		#if ( configUSE_PREEMPTION == 1 )
		{
			if( xYieldPending != pdFALSE )
 8008850:	4b11      	ldr	r3, [pc, #68]	; (8008898 <xTaskIncrementTick+0x16c>)
 8008852:	681b      	ldr	r3, [r3, #0]
 8008854:	2b00      	cmp	r3, #0
 8008856:	d007      	beq.n	8008868 <xTaskIncrementTick+0x13c>
			{
				xSwitchRequired = pdTRUE;
 8008858:	2301      	movs	r3, #1
 800885a:	617b      	str	r3, [r7, #20]
 800885c:	e004      	b.n	8008868 <xTaskIncrementTick+0x13c>
		}
		#endif /* configUSE_PREEMPTION */
	}
	else
	{
		++xPendedTicks;
 800885e:	4b0f      	ldr	r3, [pc, #60]	; (800889c <xTaskIncrementTick+0x170>)
 8008860:	681b      	ldr	r3, [r3, #0]
 8008862:	3301      	adds	r3, #1
 8008864:	4a0d      	ldr	r2, [pc, #52]	; (800889c <xTaskIncrementTick+0x170>)
 8008866:	6013      	str	r3, [r2, #0]
			vApplicationTickHook();
		}
		#endif
	}

	return xSwitchRequired;
 8008868:	697b      	ldr	r3, [r7, #20]
}
 800886a:	4618      	mov	r0, r3
 800886c:	3718      	adds	r7, #24
 800886e:	46bd      	mov	sp, r7
 8008870:	bd80      	pop	{r7, pc}
 8008872:	bf00      	nop
 8008874:	20000f74 	.word	0x20000f74
 8008878:	20000f50 	.word	0x20000f50
 800887c:	20000f04 	.word	0x20000f04
 8008880:	20000f08 	.word	0x20000f08
 8008884:	20000f64 	.word	0x20000f64
 8008888:	20000f6c 	.word	0x20000f6c
 800888c:	20000f54 	.word	0x20000f54
 8008890:	20000a7c 	.word	0x20000a7c
 8008894:	20000a78 	.word	0x20000a78
 8008898:	20000f60 	.word	0x20000f60
 800889c:	20000f5c 	.word	0x20000f5c

080088a0 <vTaskSwitchContext>:

#endif /* configUSE_APPLICATION_TASK_TAG */
/*-----------------------------------------------------------*/

void vTaskSwitchContext( void )
{
 80088a0:	b580      	push	{r7, lr}
 80088a2:	b086      	sub	sp, #24
 80088a4:	af00      	add	r7, sp, #0
	if( uxSchedulerSuspended != ( UBaseType_t ) pdFALSE )
 80088a6:	4b3a      	ldr	r3, [pc, #232]	; (8008990 <vTaskSwitchContext+0xf0>)
 80088a8:	681b      	ldr	r3, [r3, #0]
 80088aa:	2b00      	cmp	r3, #0
 80088ac:	d003      	beq.n	80088b6 <vTaskSwitchContext+0x16>
	{
		/* The scheduler is currently suspended - do not allow a context
		switch. */
		xYieldPending = pdTRUE;
 80088ae:	4b39      	ldr	r3, [pc, #228]	; (8008994 <vTaskSwitchContext+0xf4>)
 80088b0:	2201      	movs	r2, #1
 80088b2:	601a      	str	r2, [r3, #0]
			for additional information. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */
	}
}
 80088b4:	e068      	b.n	8008988 <vTaskSwitchContext+0xe8>
		xYieldPending = pdFALSE;
 80088b6:	4b37      	ldr	r3, [pc, #220]	; (8008994 <vTaskSwitchContext+0xf4>)
 80088b8:	2200      	movs	r2, #0
 80088ba:	601a      	str	r2, [r3, #0]
		taskCHECK_FOR_STACK_OVERFLOW();
 80088bc:	4b36      	ldr	r3, [pc, #216]	; (8008998 <vTaskSwitchContext+0xf8>)
 80088be:	681b      	ldr	r3, [r3, #0]
 80088c0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80088c2:	613b      	str	r3, [r7, #16]
 80088c4:	f04f 33a5 	mov.w	r3, #2779096485	; 0xa5a5a5a5
 80088c8:	60fb      	str	r3, [r7, #12]
 80088ca:	693b      	ldr	r3, [r7, #16]
 80088cc:	681b      	ldr	r3, [r3, #0]
 80088ce:	68fa      	ldr	r2, [r7, #12]
 80088d0:	429a      	cmp	r2, r3
 80088d2:	d111      	bne.n	80088f8 <vTaskSwitchContext+0x58>
 80088d4:	693b      	ldr	r3, [r7, #16]
 80088d6:	3304      	adds	r3, #4
 80088d8:	681b      	ldr	r3, [r3, #0]
 80088da:	68fa      	ldr	r2, [r7, #12]
 80088dc:	429a      	cmp	r2, r3
 80088de:	d10b      	bne.n	80088f8 <vTaskSwitchContext+0x58>
 80088e0:	693b      	ldr	r3, [r7, #16]
 80088e2:	3308      	adds	r3, #8
 80088e4:	681b      	ldr	r3, [r3, #0]
 80088e6:	68fa      	ldr	r2, [r7, #12]
 80088e8:	429a      	cmp	r2, r3
 80088ea:	d105      	bne.n	80088f8 <vTaskSwitchContext+0x58>
 80088ec:	693b      	ldr	r3, [r7, #16]
 80088ee:	330c      	adds	r3, #12
 80088f0:	681b      	ldr	r3, [r3, #0]
 80088f2:	68fa      	ldr	r2, [r7, #12]
 80088f4:	429a      	cmp	r2, r3
 80088f6:	d008      	beq.n	800890a <vTaskSwitchContext+0x6a>
 80088f8:	4b27      	ldr	r3, [pc, #156]	; (8008998 <vTaskSwitchContext+0xf8>)
 80088fa:	681a      	ldr	r2, [r3, #0]
 80088fc:	4b26      	ldr	r3, [pc, #152]	; (8008998 <vTaskSwitchContext+0xf8>)
 80088fe:	681b      	ldr	r3, [r3, #0]
 8008900:	3334      	adds	r3, #52	; 0x34
 8008902:	4619      	mov	r1, r3
 8008904:	4610      	mov	r0, r2
 8008906:	f7f7 fe4c 	bl	80005a2 <vApplicationStackOverflowHook>
		taskSELECT_HIGHEST_PRIORITY_TASK(); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800890a:	4b24      	ldr	r3, [pc, #144]	; (800899c <vTaskSwitchContext+0xfc>)
 800890c:	681b      	ldr	r3, [r3, #0]
 800890e:	617b      	str	r3, [r7, #20]
 8008910:	e010      	b.n	8008934 <vTaskSwitchContext+0x94>
 8008912:	697b      	ldr	r3, [r7, #20]
 8008914:	2b00      	cmp	r3, #0
 8008916:	d10a      	bne.n	800892e <vTaskSwitchContext+0x8e>
	__asm volatile
 8008918:	f04f 0350 	mov.w	r3, #80	; 0x50
 800891c:	f383 8811 	msr	BASEPRI, r3
 8008920:	f3bf 8f6f 	isb	sy
 8008924:	f3bf 8f4f 	dsb	sy
 8008928:	607b      	str	r3, [r7, #4]
}
 800892a:	bf00      	nop
 800892c:	e7fe      	b.n	800892c <vTaskSwitchContext+0x8c>
 800892e:	697b      	ldr	r3, [r7, #20]
 8008930:	3b01      	subs	r3, #1
 8008932:	617b      	str	r3, [r7, #20]
 8008934:	491a      	ldr	r1, [pc, #104]	; (80089a0 <vTaskSwitchContext+0x100>)
 8008936:	697a      	ldr	r2, [r7, #20]
 8008938:	4613      	mov	r3, r2
 800893a:	009b      	lsls	r3, r3, #2
 800893c:	4413      	add	r3, r2
 800893e:	009b      	lsls	r3, r3, #2
 8008940:	440b      	add	r3, r1
 8008942:	681b      	ldr	r3, [r3, #0]
 8008944:	2b00      	cmp	r3, #0
 8008946:	d0e4      	beq.n	8008912 <vTaskSwitchContext+0x72>
 8008948:	697a      	ldr	r2, [r7, #20]
 800894a:	4613      	mov	r3, r2
 800894c:	009b      	lsls	r3, r3, #2
 800894e:	4413      	add	r3, r2
 8008950:	009b      	lsls	r3, r3, #2
 8008952:	4a13      	ldr	r2, [pc, #76]	; (80089a0 <vTaskSwitchContext+0x100>)
 8008954:	4413      	add	r3, r2
 8008956:	60bb      	str	r3, [r7, #8]
 8008958:	68bb      	ldr	r3, [r7, #8]
 800895a:	685b      	ldr	r3, [r3, #4]
 800895c:	685a      	ldr	r2, [r3, #4]
 800895e:	68bb      	ldr	r3, [r7, #8]
 8008960:	605a      	str	r2, [r3, #4]
 8008962:	68bb      	ldr	r3, [r7, #8]
 8008964:	685a      	ldr	r2, [r3, #4]
 8008966:	68bb      	ldr	r3, [r7, #8]
 8008968:	3308      	adds	r3, #8
 800896a:	429a      	cmp	r2, r3
 800896c:	d104      	bne.n	8008978 <vTaskSwitchContext+0xd8>
 800896e:	68bb      	ldr	r3, [r7, #8]
 8008970:	685b      	ldr	r3, [r3, #4]
 8008972:	685a      	ldr	r2, [r3, #4]
 8008974:	68bb      	ldr	r3, [r7, #8]
 8008976:	605a      	str	r2, [r3, #4]
 8008978:	68bb      	ldr	r3, [r7, #8]
 800897a:	685b      	ldr	r3, [r3, #4]
 800897c:	68db      	ldr	r3, [r3, #12]
 800897e:	4a06      	ldr	r2, [pc, #24]	; (8008998 <vTaskSwitchContext+0xf8>)
 8008980:	6013      	str	r3, [r2, #0]
 8008982:	4a06      	ldr	r2, [pc, #24]	; (800899c <vTaskSwitchContext+0xfc>)
 8008984:	697b      	ldr	r3, [r7, #20]
 8008986:	6013      	str	r3, [r2, #0]
}
 8008988:	bf00      	nop
 800898a:	3718      	adds	r7, #24
 800898c:	46bd      	mov	sp, r7
 800898e:	bd80      	pop	{r7, pc}
 8008990:	20000f74 	.word	0x20000f74
 8008994:	20000f60 	.word	0x20000f60
 8008998:	20000a78 	.word	0x20000a78
 800899c:	20000f54 	.word	0x20000f54
 80089a0:	20000a7c 	.word	0x20000a7c

080089a4 <vTaskPlaceOnEventList>:
/*-----------------------------------------------------------*/

void vTaskPlaceOnEventList( List_t * const pxEventList, const TickType_t xTicksToWait )
{
 80089a4:	b580      	push	{r7, lr}
 80089a6:	b084      	sub	sp, #16
 80089a8:	af00      	add	r7, sp, #0
 80089aa:	6078      	str	r0, [r7, #4]
 80089ac:	6039      	str	r1, [r7, #0]
	configASSERT( pxEventList );
 80089ae:	687b      	ldr	r3, [r7, #4]
 80089b0:	2b00      	cmp	r3, #0
 80089b2:	d10a      	bne.n	80089ca <vTaskPlaceOnEventList+0x26>
	__asm volatile
 80089b4:	f04f 0350 	mov.w	r3, #80	; 0x50
 80089b8:	f383 8811 	msr	BASEPRI, r3
 80089bc:	f3bf 8f6f 	isb	sy
 80089c0:	f3bf 8f4f 	dsb	sy
 80089c4:	60fb      	str	r3, [r7, #12]
}
 80089c6:	bf00      	nop
 80089c8:	e7fe      	b.n	80089c8 <vTaskPlaceOnEventList+0x24>

	/* Place the event list item of the TCB in the appropriate event list.
	This is placed in the list in priority order so the highest priority task
	is the first to be woken by the event.  The queue that contains the event
	list is locked, preventing simultaneous access from interrupts. */
	vListInsert( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 80089ca:	4b07      	ldr	r3, [pc, #28]	; (80089e8 <vTaskPlaceOnEventList+0x44>)
 80089cc:	681b      	ldr	r3, [r3, #0]
 80089ce:	3318      	adds	r3, #24
 80089d0:	4619      	mov	r1, r3
 80089d2:	6878      	ldr	r0, [r7, #4]
 80089d4:	f7fe faaf 	bl	8006f36 <vListInsert>

	prvAddCurrentTaskToDelayedList( xTicksToWait, pdTRUE );
 80089d8:	2101      	movs	r1, #1
 80089da:	6838      	ldr	r0, [r7, #0]
 80089dc:	f000 fb7c 	bl	80090d8 <prvAddCurrentTaskToDelayedList>
}
 80089e0:	bf00      	nop
 80089e2:	3710      	adds	r7, #16
 80089e4:	46bd      	mov	sp, r7
 80089e6:	bd80      	pop	{r7, pc}
 80089e8:	20000a78 	.word	0x20000a78

080089ec <vTaskPlaceOnEventListRestricted>:
/*-----------------------------------------------------------*/

#if( configUSE_TIMERS == 1 )

	void vTaskPlaceOnEventListRestricted( List_t * const pxEventList, TickType_t xTicksToWait, const BaseType_t xWaitIndefinitely )
	{
 80089ec:	b580      	push	{r7, lr}
 80089ee:	b086      	sub	sp, #24
 80089f0:	af00      	add	r7, sp, #0
 80089f2:	60f8      	str	r0, [r7, #12]
 80089f4:	60b9      	str	r1, [r7, #8]
 80089f6:	607a      	str	r2, [r7, #4]
		configASSERT( pxEventList );
 80089f8:	68fb      	ldr	r3, [r7, #12]
 80089fa:	2b00      	cmp	r3, #0
 80089fc:	d10a      	bne.n	8008a14 <vTaskPlaceOnEventListRestricted+0x28>
	__asm volatile
 80089fe:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008a02:	f383 8811 	msr	BASEPRI, r3
 8008a06:	f3bf 8f6f 	isb	sy
 8008a0a:	f3bf 8f4f 	dsb	sy
 8008a0e:	617b      	str	r3, [r7, #20]
}
 8008a10:	bf00      	nop
 8008a12:	e7fe      	b.n	8008a12 <vTaskPlaceOnEventListRestricted+0x26>

		/* Place the event list item of the TCB in the appropriate event list.
		In this case it is assume that this is the only task that is going to
		be waiting on this event list, so the faster vListInsertEnd() function
		can be used in place of vListInsert. */
		vListInsertEnd( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 8008a14:	4b0a      	ldr	r3, [pc, #40]	; (8008a40 <vTaskPlaceOnEventListRestricted+0x54>)
 8008a16:	681b      	ldr	r3, [r3, #0]
 8008a18:	3318      	adds	r3, #24
 8008a1a:	4619      	mov	r1, r3
 8008a1c:	68f8      	ldr	r0, [r7, #12]
 8008a1e:	f7fe fa66 	bl	8006eee <vListInsertEnd>

		/* If the task should block indefinitely then set the block time to a
		value that will be recognised as an indefinite delay inside the
		prvAddCurrentTaskToDelayedList() function. */
		if( xWaitIndefinitely != pdFALSE )
 8008a22:	687b      	ldr	r3, [r7, #4]
 8008a24:	2b00      	cmp	r3, #0
 8008a26:	d002      	beq.n	8008a2e <vTaskPlaceOnEventListRestricted+0x42>
		{
			xTicksToWait = portMAX_DELAY;
 8008a28:	f04f 33ff 	mov.w	r3, #4294967295
 8008a2c:	60bb      	str	r3, [r7, #8]
		}

		traceTASK_DELAY_UNTIL( ( xTickCount + xTicksToWait ) );
		prvAddCurrentTaskToDelayedList( xTicksToWait, xWaitIndefinitely );
 8008a2e:	6879      	ldr	r1, [r7, #4]
 8008a30:	68b8      	ldr	r0, [r7, #8]
 8008a32:	f000 fb51 	bl	80090d8 <prvAddCurrentTaskToDelayedList>
	}
 8008a36:	bf00      	nop
 8008a38:	3718      	adds	r7, #24
 8008a3a:	46bd      	mov	sp, r7
 8008a3c:	bd80      	pop	{r7, pc}
 8008a3e:	bf00      	nop
 8008a40:	20000a78 	.word	0x20000a78

08008a44 <xTaskRemoveFromEventList>:

#endif /* configUSE_TIMERS */
/*-----------------------------------------------------------*/

BaseType_t xTaskRemoveFromEventList( const List_t * const pxEventList )
{
 8008a44:	b580      	push	{r7, lr}
 8008a46:	b086      	sub	sp, #24
 8008a48:	af00      	add	r7, sp, #0
 8008a4a:	6078      	str	r0, [r7, #4]
	get called - the lock count on the queue will get modified instead.  This
	means exclusive access to the event list is guaranteed here.

	This function assumes that a check has already been made to ensure that
	pxEventList is not empty. */
	pxUnblockedTCB = listGET_OWNER_OF_HEAD_ENTRY( pxEventList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8008a4c:	687b      	ldr	r3, [r7, #4]
 8008a4e:	68db      	ldr	r3, [r3, #12]
 8008a50:	68db      	ldr	r3, [r3, #12]
 8008a52:	613b      	str	r3, [r7, #16]
	configASSERT( pxUnblockedTCB );
 8008a54:	693b      	ldr	r3, [r7, #16]
 8008a56:	2b00      	cmp	r3, #0
 8008a58:	d10a      	bne.n	8008a70 <xTaskRemoveFromEventList+0x2c>
	__asm volatile
 8008a5a:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008a5e:	f383 8811 	msr	BASEPRI, r3
 8008a62:	f3bf 8f6f 	isb	sy
 8008a66:	f3bf 8f4f 	dsb	sy
 8008a6a:	60fb      	str	r3, [r7, #12]
}
 8008a6c:	bf00      	nop
 8008a6e:	e7fe      	b.n	8008a6e <xTaskRemoveFromEventList+0x2a>
	( void ) uxListRemove( &( pxUnblockedTCB->xEventListItem ) );
 8008a70:	693b      	ldr	r3, [r7, #16]
 8008a72:	3318      	adds	r3, #24
 8008a74:	4618      	mov	r0, r3
 8008a76:	f7fe fa97 	bl	8006fa8 <uxListRemove>

	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8008a7a:	4b1e      	ldr	r3, [pc, #120]	; (8008af4 <xTaskRemoveFromEventList+0xb0>)
 8008a7c:	681b      	ldr	r3, [r3, #0]
 8008a7e:	2b00      	cmp	r3, #0
 8008a80:	d11d      	bne.n	8008abe <xTaskRemoveFromEventList+0x7a>
	{
		( void ) uxListRemove( &( pxUnblockedTCB->xStateListItem ) );
 8008a82:	693b      	ldr	r3, [r7, #16]
 8008a84:	3304      	adds	r3, #4
 8008a86:	4618      	mov	r0, r3
 8008a88:	f7fe fa8e 	bl	8006fa8 <uxListRemove>
		prvAddTaskToReadyList( pxUnblockedTCB );
 8008a8c:	693b      	ldr	r3, [r7, #16]
 8008a8e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8008a90:	4b19      	ldr	r3, [pc, #100]	; (8008af8 <xTaskRemoveFromEventList+0xb4>)
 8008a92:	681b      	ldr	r3, [r3, #0]
 8008a94:	429a      	cmp	r2, r3
 8008a96:	d903      	bls.n	8008aa0 <xTaskRemoveFromEventList+0x5c>
 8008a98:	693b      	ldr	r3, [r7, #16]
 8008a9a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8008a9c:	4a16      	ldr	r2, [pc, #88]	; (8008af8 <xTaskRemoveFromEventList+0xb4>)
 8008a9e:	6013      	str	r3, [r2, #0]
 8008aa0:	693b      	ldr	r3, [r7, #16]
 8008aa2:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8008aa4:	4613      	mov	r3, r2
 8008aa6:	009b      	lsls	r3, r3, #2
 8008aa8:	4413      	add	r3, r2
 8008aaa:	009b      	lsls	r3, r3, #2
 8008aac:	4a13      	ldr	r2, [pc, #76]	; (8008afc <xTaskRemoveFromEventList+0xb8>)
 8008aae:	441a      	add	r2, r3
 8008ab0:	693b      	ldr	r3, [r7, #16]
 8008ab2:	3304      	adds	r3, #4
 8008ab4:	4619      	mov	r1, r3
 8008ab6:	4610      	mov	r0, r2
 8008ab8:	f7fe fa19 	bl	8006eee <vListInsertEnd>
 8008abc:	e005      	b.n	8008aca <xTaskRemoveFromEventList+0x86>
	}
	else
	{
		/* The delayed and ready lists cannot be accessed, so hold this task
		pending until the scheduler is resumed. */
		vListInsertEnd( &( xPendingReadyList ), &( pxUnblockedTCB->xEventListItem ) );
 8008abe:	693b      	ldr	r3, [r7, #16]
 8008ac0:	3318      	adds	r3, #24
 8008ac2:	4619      	mov	r1, r3
 8008ac4:	480e      	ldr	r0, [pc, #56]	; (8008b00 <xTaskRemoveFromEventList+0xbc>)
 8008ac6:	f7fe fa12 	bl	8006eee <vListInsertEnd>
	}

	if( pxUnblockedTCB->uxPriority > pxCurrentTCB->uxPriority )
 8008aca:	693b      	ldr	r3, [r7, #16]
 8008acc:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8008ace:	4b0d      	ldr	r3, [pc, #52]	; (8008b04 <xTaskRemoveFromEventList+0xc0>)
 8008ad0:	681b      	ldr	r3, [r3, #0]
 8008ad2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8008ad4:	429a      	cmp	r2, r3
 8008ad6:	d905      	bls.n	8008ae4 <xTaskRemoveFromEventList+0xa0>
	{
		/* Return true if the task removed from the event list has a higher
		priority than the calling task.  This allows the calling task to know if
		it should force a context switch now. */
		xReturn = pdTRUE;
 8008ad8:	2301      	movs	r3, #1
 8008ada:	617b      	str	r3, [r7, #20]

		/* Mark that a yield is pending in case the user is not using the
		"xHigherPriorityTaskWoken" parameter to an ISR safe FreeRTOS function. */
		xYieldPending = pdTRUE;
 8008adc:	4b0a      	ldr	r3, [pc, #40]	; (8008b08 <xTaskRemoveFromEventList+0xc4>)
 8008ade:	2201      	movs	r2, #1
 8008ae0:	601a      	str	r2, [r3, #0]
 8008ae2:	e001      	b.n	8008ae8 <xTaskRemoveFromEventList+0xa4>
	}
	else
	{
		xReturn = pdFALSE;
 8008ae4:	2300      	movs	r3, #0
 8008ae6:	617b      	str	r3, [r7, #20]
	}

	return xReturn;
 8008ae8:	697b      	ldr	r3, [r7, #20]
}
 8008aea:	4618      	mov	r0, r3
 8008aec:	3718      	adds	r7, #24
 8008aee:	46bd      	mov	sp, r7
 8008af0:	bd80      	pop	{r7, pc}
 8008af2:	bf00      	nop
 8008af4:	20000f74 	.word	0x20000f74
 8008af8:	20000f54 	.word	0x20000f54
 8008afc:	20000a7c 	.word	0x20000a7c
 8008b00:	20000f0c 	.word	0x20000f0c
 8008b04:	20000a78 	.word	0x20000a78
 8008b08:	20000f60 	.word	0x20000f60

08008b0c <vTaskInternalSetTimeOutState>:
	taskEXIT_CRITICAL();
}
/*-----------------------------------------------------------*/

void vTaskInternalSetTimeOutState( TimeOut_t * const pxTimeOut )
{
 8008b0c:	b480      	push	{r7}
 8008b0e:	b083      	sub	sp, #12
 8008b10:	af00      	add	r7, sp, #0
 8008b12:	6078      	str	r0, [r7, #4]
	/* For internal use only as it does not use a critical section. */
	pxTimeOut->xOverflowCount = xNumOfOverflows;
 8008b14:	4b06      	ldr	r3, [pc, #24]	; (8008b30 <vTaskInternalSetTimeOutState+0x24>)
 8008b16:	681a      	ldr	r2, [r3, #0]
 8008b18:	687b      	ldr	r3, [r7, #4]
 8008b1a:	601a      	str	r2, [r3, #0]
	pxTimeOut->xTimeOnEntering = xTickCount;
 8008b1c:	4b05      	ldr	r3, [pc, #20]	; (8008b34 <vTaskInternalSetTimeOutState+0x28>)
 8008b1e:	681a      	ldr	r2, [r3, #0]
 8008b20:	687b      	ldr	r3, [r7, #4]
 8008b22:	605a      	str	r2, [r3, #4]
}
 8008b24:	bf00      	nop
 8008b26:	370c      	adds	r7, #12
 8008b28:	46bd      	mov	sp, r7
 8008b2a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008b2e:	4770      	bx	lr
 8008b30:	20000f64 	.word	0x20000f64
 8008b34:	20000f50 	.word	0x20000f50

08008b38 <xTaskCheckForTimeOut>:
/*-----------------------------------------------------------*/

BaseType_t xTaskCheckForTimeOut( TimeOut_t * const pxTimeOut, TickType_t * const pxTicksToWait )
{
 8008b38:	b580      	push	{r7, lr}
 8008b3a:	b088      	sub	sp, #32
 8008b3c:	af00      	add	r7, sp, #0
 8008b3e:	6078      	str	r0, [r7, #4]
 8008b40:	6039      	str	r1, [r7, #0]
BaseType_t xReturn;

	configASSERT( pxTimeOut );
 8008b42:	687b      	ldr	r3, [r7, #4]
 8008b44:	2b00      	cmp	r3, #0
 8008b46:	d10a      	bne.n	8008b5e <xTaskCheckForTimeOut+0x26>
	__asm volatile
 8008b48:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008b4c:	f383 8811 	msr	BASEPRI, r3
 8008b50:	f3bf 8f6f 	isb	sy
 8008b54:	f3bf 8f4f 	dsb	sy
 8008b58:	613b      	str	r3, [r7, #16]
}
 8008b5a:	bf00      	nop
 8008b5c:	e7fe      	b.n	8008b5c <xTaskCheckForTimeOut+0x24>
	configASSERT( pxTicksToWait );
 8008b5e:	683b      	ldr	r3, [r7, #0]
 8008b60:	2b00      	cmp	r3, #0
 8008b62:	d10a      	bne.n	8008b7a <xTaskCheckForTimeOut+0x42>
	__asm volatile
 8008b64:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008b68:	f383 8811 	msr	BASEPRI, r3
 8008b6c:	f3bf 8f6f 	isb	sy
 8008b70:	f3bf 8f4f 	dsb	sy
 8008b74:	60fb      	str	r3, [r7, #12]
}
 8008b76:	bf00      	nop
 8008b78:	e7fe      	b.n	8008b78 <xTaskCheckForTimeOut+0x40>

	taskENTER_CRITICAL();
 8008b7a:	f000 ff7b 	bl	8009a74 <vPortEnterCritical>
	{
		/* Minor optimisation.  The tick count cannot change in this block. */
		const TickType_t xConstTickCount = xTickCount;
 8008b7e:	4b1d      	ldr	r3, [pc, #116]	; (8008bf4 <xTaskCheckForTimeOut+0xbc>)
 8008b80:	681b      	ldr	r3, [r3, #0]
 8008b82:	61bb      	str	r3, [r7, #24]
		const TickType_t xElapsedTime = xConstTickCount - pxTimeOut->xTimeOnEntering;
 8008b84:	687b      	ldr	r3, [r7, #4]
 8008b86:	685b      	ldr	r3, [r3, #4]
 8008b88:	69ba      	ldr	r2, [r7, #24]
 8008b8a:	1ad3      	subs	r3, r2, r3
 8008b8c:	617b      	str	r3, [r7, #20]
			}
			else
		#endif

		#if ( INCLUDE_vTaskSuspend == 1 )
			if( *pxTicksToWait == portMAX_DELAY )
 8008b8e:	683b      	ldr	r3, [r7, #0]
 8008b90:	681b      	ldr	r3, [r3, #0]
 8008b92:	f1b3 3fff 	cmp.w	r3, #4294967295
 8008b96:	d102      	bne.n	8008b9e <xTaskCheckForTimeOut+0x66>
			{
				/* If INCLUDE_vTaskSuspend is set to 1 and the block time
				specified is the maximum block time then the task should block
				indefinitely, and therefore never time out. */
				xReturn = pdFALSE;
 8008b98:	2300      	movs	r3, #0
 8008b9a:	61fb      	str	r3, [r7, #28]
 8008b9c:	e023      	b.n	8008be6 <xTaskCheckForTimeOut+0xae>
			}
			else
		#endif

		if( ( xNumOfOverflows != pxTimeOut->xOverflowCount ) && ( xConstTickCount >= pxTimeOut->xTimeOnEntering ) ) /*lint !e525 Indentation preferred as is to make code within pre-processor directives clearer. */
 8008b9e:	687b      	ldr	r3, [r7, #4]
 8008ba0:	681a      	ldr	r2, [r3, #0]
 8008ba2:	4b15      	ldr	r3, [pc, #84]	; (8008bf8 <xTaskCheckForTimeOut+0xc0>)
 8008ba4:	681b      	ldr	r3, [r3, #0]
 8008ba6:	429a      	cmp	r2, r3
 8008ba8:	d007      	beq.n	8008bba <xTaskCheckForTimeOut+0x82>
 8008baa:	687b      	ldr	r3, [r7, #4]
 8008bac:	685b      	ldr	r3, [r3, #4]
 8008bae:	69ba      	ldr	r2, [r7, #24]
 8008bb0:	429a      	cmp	r2, r3
 8008bb2:	d302      	bcc.n	8008bba <xTaskCheckForTimeOut+0x82>
			/* The tick count is greater than the time at which
			vTaskSetTimeout() was called, but has also overflowed since
			vTaskSetTimeOut() was called.  It must have wrapped all the way
			around and gone past again. This passed since vTaskSetTimeout()
			was called. */
			xReturn = pdTRUE;
 8008bb4:	2301      	movs	r3, #1
 8008bb6:	61fb      	str	r3, [r7, #28]
 8008bb8:	e015      	b.n	8008be6 <xTaskCheckForTimeOut+0xae>
		}
		else if( xElapsedTime < *pxTicksToWait ) /*lint !e961 Explicit casting is only redundant with some compilers, whereas others require it to prevent integer conversion errors. */
 8008bba:	683b      	ldr	r3, [r7, #0]
 8008bbc:	681b      	ldr	r3, [r3, #0]
 8008bbe:	697a      	ldr	r2, [r7, #20]
 8008bc0:	429a      	cmp	r2, r3
 8008bc2:	d20b      	bcs.n	8008bdc <xTaskCheckForTimeOut+0xa4>
		{
			/* Not a genuine timeout. Adjust parameters for time remaining. */
			*pxTicksToWait -= xElapsedTime;
 8008bc4:	683b      	ldr	r3, [r7, #0]
 8008bc6:	681a      	ldr	r2, [r3, #0]
 8008bc8:	697b      	ldr	r3, [r7, #20]
 8008bca:	1ad2      	subs	r2, r2, r3
 8008bcc:	683b      	ldr	r3, [r7, #0]
 8008bce:	601a      	str	r2, [r3, #0]
			vTaskInternalSetTimeOutState( pxTimeOut );
 8008bd0:	6878      	ldr	r0, [r7, #4]
 8008bd2:	f7ff ff9b 	bl	8008b0c <vTaskInternalSetTimeOutState>
			xReturn = pdFALSE;
 8008bd6:	2300      	movs	r3, #0
 8008bd8:	61fb      	str	r3, [r7, #28]
 8008bda:	e004      	b.n	8008be6 <xTaskCheckForTimeOut+0xae>
		}
		else
		{
			*pxTicksToWait = 0;
 8008bdc:	683b      	ldr	r3, [r7, #0]
 8008bde:	2200      	movs	r2, #0
 8008be0:	601a      	str	r2, [r3, #0]
			xReturn = pdTRUE;
 8008be2:	2301      	movs	r3, #1
 8008be4:	61fb      	str	r3, [r7, #28]
		}
	}
	taskEXIT_CRITICAL();
 8008be6:	f000 ff75 	bl	8009ad4 <vPortExitCritical>

	return xReturn;
 8008bea:	69fb      	ldr	r3, [r7, #28]
}
 8008bec:	4618      	mov	r0, r3
 8008bee:	3720      	adds	r7, #32
 8008bf0:	46bd      	mov	sp, r7
 8008bf2:	bd80      	pop	{r7, pc}
 8008bf4:	20000f50 	.word	0x20000f50
 8008bf8:	20000f64 	.word	0x20000f64

08008bfc <vTaskMissedYield>:
/*-----------------------------------------------------------*/

void vTaskMissedYield( void )
{
 8008bfc:	b480      	push	{r7}
 8008bfe:	af00      	add	r7, sp, #0
	xYieldPending = pdTRUE;
 8008c00:	4b03      	ldr	r3, [pc, #12]	; (8008c10 <vTaskMissedYield+0x14>)
 8008c02:	2201      	movs	r2, #1
 8008c04:	601a      	str	r2, [r3, #0]
}
 8008c06:	bf00      	nop
 8008c08:	46bd      	mov	sp, r7
 8008c0a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008c0e:	4770      	bx	lr
 8008c10:	20000f60 	.word	0x20000f60

08008c14 <prvIdleTask>:
 *
 * void prvIdleTask( void *pvParameters );
 *
 */
static portTASK_FUNCTION( prvIdleTask, pvParameters )
{
 8008c14:	b580      	push	{r7, lr}
 8008c16:	b082      	sub	sp, #8
 8008c18:	af00      	add	r7, sp, #0
 8008c1a:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* See if any tasks have deleted themselves - if so then the idle task
		is responsible for freeing the deleted task's TCB and stack. */
		prvCheckTasksWaitingTermination();
 8008c1c:	f000 f854 	bl	8008cc8 <prvCheckTasksWaitingTermination>

			A critical region is not required here as we are just reading from
			the list, and an occasional incorrect value will not matter.  If
			the ready list at the idle priority contains more than one task
			then a task other than the idle task is ready to execute. */
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ tskIDLE_PRIORITY ] ) ) > ( UBaseType_t ) 1 )
 8008c20:	4b07      	ldr	r3, [pc, #28]	; (8008c40 <prvIdleTask+0x2c>)
 8008c22:	681b      	ldr	r3, [r3, #0]
 8008c24:	2b01      	cmp	r3, #1
 8008c26:	d907      	bls.n	8008c38 <prvIdleTask+0x24>
			{
				taskYIELD();
 8008c28:	4b06      	ldr	r3, [pc, #24]	; (8008c44 <prvIdleTask+0x30>)
 8008c2a:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8008c2e:	601a      	str	r2, [r3, #0]
 8008c30:	f3bf 8f4f 	dsb	sy
 8008c34:	f3bf 8f6f 	isb	sy
			/* Call the user defined function from within the idle task.  This
			allows the application designer to add background functionality
			without the overhead of a separate task.
			NOTE: vApplicationIdleHook() MUST NOT, UNDER ANY CIRCUMSTANCES,
			CALL A FUNCTION THAT MIGHT BLOCK. */
			vApplicationIdleHook();
 8008c38:	f7f7 fcac 	bl	8000594 <vApplicationIdleHook>
		prvCheckTasksWaitingTermination();
 8008c3c:	e7ee      	b.n	8008c1c <prvIdleTask+0x8>
 8008c3e:	bf00      	nop
 8008c40:	20000a7c 	.word	0x20000a7c
 8008c44:	e000ed04 	.word	0xe000ed04

08008c48 <prvInitialiseTaskLists>:

#endif /* portUSING_MPU_WRAPPERS */
/*-----------------------------------------------------------*/

static void prvInitialiseTaskLists( void )
{
 8008c48:	b580      	push	{r7, lr}
 8008c4a:	b082      	sub	sp, #8
 8008c4c:	af00      	add	r7, sp, #0
UBaseType_t uxPriority;

	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 8008c4e:	2300      	movs	r3, #0
 8008c50:	607b      	str	r3, [r7, #4]
 8008c52:	e00c      	b.n	8008c6e <prvInitialiseTaskLists+0x26>
	{
		vListInitialise( &( pxReadyTasksLists[ uxPriority ] ) );
 8008c54:	687a      	ldr	r2, [r7, #4]
 8008c56:	4613      	mov	r3, r2
 8008c58:	009b      	lsls	r3, r3, #2
 8008c5a:	4413      	add	r3, r2
 8008c5c:	009b      	lsls	r3, r3, #2
 8008c5e:	4a12      	ldr	r2, [pc, #72]	; (8008ca8 <prvInitialiseTaskLists+0x60>)
 8008c60:	4413      	add	r3, r2
 8008c62:	4618      	mov	r0, r3
 8008c64:	f7fe f916 	bl	8006e94 <vListInitialise>
	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 8008c68:	687b      	ldr	r3, [r7, #4]
 8008c6a:	3301      	adds	r3, #1
 8008c6c:	607b      	str	r3, [r7, #4]
 8008c6e:	687b      	ldr	r3, [r7, #4]
 8008c70:	2b37      	cmp	r3, #55	; 0x37
 8008c72:	d9ef      	bls.n	8008c54 <prvInitialiseTaskLists+0xc>
	}

	vListInitialise( &xDelayedTaskList1 );
 8008c74:	480d      	ldr	r0, [pc, #52]	; (8008cac <prvInitialiseTaskLists+0x64>)
 8008c76:	f7fe f90d 	bl	8006e94 <vListInitialise>
	vListInitialise( &xDelayedTaskList2 );
 8008c7a:	480d      	ldr	r0, [pc, #52]	; (8008cb0 <prvInitialiseTaskLists+0x68>)
 8008c7c:	f7fe f90a 	bl	8006e94 <vListInitialise>
	vListInitialise( &xPendingReadyList );
 8008c80:	480c      	ldr	r0, [pc, #48]	; (8008cb4 <prvInitialiseTaskLists+0x6c>)
 8008c82:	f7fe f907 	bl	8006e94 <vListInitialise>

	#if ( INCLUDE_vTaskDelete == 1 )
	{
		vListInitialise( &xTasksWaitingTermination );
 8008c86:	480c      	ldr	r0, [pc, #48]	; (8008cb8 <prvInitialiseTaskLists+0x70>)
 8008c88:	f7fe f904 	bl	8006e94 <vListInitialise>
	}
	#endif /* INCLUDE_vTaskDelete */

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		vListInitialise( &xSuspendedTaskList );
 8008c8c:	480b      	ldr	r0, [pc, #44]	; (8008cbc <prvInitialiseTaskLists+0x74>)
 8008c8e:	f7fe f901 	bl	8006e94 <vListInitialise>
	}
	#endif /* INCLUDE_vTaskSuspend */

	/* Start with pxDelayedTaskList using list1 and the pxOverflowDelayedTaskList
	using list2. */
	pxDelayedTaskList = &xDelayedTaskList1;
 8008c92:	4b0b      	ldr	r3, [pc, #44]	; (8008cc0 <prvInitialiseTaskLists+0x78>)
 8008c94:	4a05      	ldr	r2, [pc, #20]	; (8008cac <prvInitialiseTaskLists+0x64>)
 8008c96:	601a      	str	r2, [r3, #0]
	pxOverflowDelayedTaskList = &xDelayedTaskList2;
 8008c98:	4b0a      	ldr	r3, [pc, #40]	; (8008cc4 <prvInitialiseTaskLists+0x7c>)
 8008c9a:	4a05      	ldr	r2, [pc, #20]	; (8008cb0 <prvInitialiseTaskLists+0x68>)
 8008c9c:	601a      	str	r2, [r3, #0]
}
 8008c9e:	bf00      	nop
 8008ca0:	3708      	adds	r7, #8
 8008ca2:	46bd      	mov	sp, r7
 8008ca4:	bd80      	pop	{r7, pc}
 8008ca6:	bf00      	nop
 8008ca8:	20000a7c 	.word	0x20000a7c
 8008cac:	20000edc 	.word	0x20000edc
 8008cb0:	20000ef0 	.word	0x20000ef0
 8008cb4:	20000f0c 	.word	0x20000f0c
 8008cb8:	20000f20 	.word	0x20000f20
 8008cbc:	20000f38 	.word	0x20000f38
 8008cc0:	20000f04 	.word	0x20000f04
 8008cc4:	20000f08 	.word	0x20000f08

08008cc8 <prvCheckTasksWaitingTermination>:
/*-----------------------------------------------------------*/

static void prvCheckTasksWaitingTermination( void )
{
 8008cc8:	b580      	push	{r7, lr}
 8008cca:	b082      	sub	sp, #8
 8008ccc:	af00      	add	r7, sp, #0
	{
		TCB_t *pxTCB;

		/* uxDeletedTasksWaitingCleanUp is used to prevent taskENTER_CRITICAL()
		being called too often in the idle task. */
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 8008cce:	e019      	b.n	8008d04 <prvCheckTasksWaitingTermination+0x3c>
		{
			taskENTER_CRITICAL();
 8008cd0:	f000 fed0 	bl	8009a74 <vPortEnterCritical>
			{
				pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xTasksWaitingTermination ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8008cd4:	4b10      	ldr	r3, [pc, #64]	; (8008d18 <prvCheckTasksWaitingTermination+0x50>)
 8008cd6:	68db      	ldr	r3, [r3, #12]
 8008cd8:	68db      	ldr	r3, [r3, #12]
 8008cda:	607b      	str	r3, [r7, #4]
				( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8008cdc:	687b      	ldr	r3, [r7, #4]
 8008cde:	3304      	adds	r3, #4
 8008ce0:	4618      	mov	r0, r3
 8008ce2:	f7fe f961 	bl	8006fa8 <uxListRemove>
				--uxCurrentNumberOfTasks;
 8008ce6:	4b0d      	ldr	r3, [pc, #52]	; (8008d1c <prvCheckTasksWaitingTermination+0x54>)
 8008ce8:	681b      	ldr	r3, [r3, #0]
 8008cea:	3b01      	subs	r3, #1
 8008cec:	4a0b      	ldr	r2, [pc, #44]	; (8008d1c <prvCheckTasksWaitingTermination+0x54>)
 8008cee:	6013      	str	r3, [r2, #0]
				--uxDeletedTasksWaitingCleanUp;
 8008cf0:	4b0b      	ldr	r3, [pc, #44]	; (8008d20 <prvCheckTasksWaitingTermination+0x58>)
 8008cf2:	681b      	ldr	r3, [r3, #0]
 8008cf4:	3b01      	subs	r3, #1
 8008cf6:	4a0a      	ldr	r2, [pc, #40]	; (8008d20 <prvCheckTasksWaitingTermination+0x58>)
 8008cf8:	6013      	str	r3, [r2, #0]
			}
			taskEXIT_CRITICAL();
 8008cfa:	f000 feeb 	bl	8009ad4 <vPortExitCritical>

			prvDeleteTCB( pxTCB );
 8008cfe:	6878      	ldr	r0, [r7, #4]
 8008d00:	f000 f810 	bl	8008d24 <prvDeleteTCB>
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 8008d04:	4b06      	ldr	r3, [pc, #24]	; (8008d20 <prvCheckTasksWaitingTermination+0x58>)
 8008d06:	681b      	ldr	r3, [r3, #0]
 8008d08:	2b00      	cmp	r3, #0
 8008d0a:	d1e1      	bne.n	8008cd0 <prvCheckTasksWaitingTermination+0x8>
		}
	}
	#endif /* INCLUDE_vTaskDelete */
}
 8008d0c:	bf00      	nop
 8008d0e:	bf00      	nop
 8008d10:	3708      	adds	r7, #8
 8008d12:	46bd      	mov	sp, r7
 8008d14:	bd80      	pop	{r7, pc}
 8008d16:	bf00      	nop
 8008d18:	20000f20 	.word	0x20000f20
 8008d1c:	20000f4c 	.word	0x20000f4c
 8008d20:	20000f34 	.word	0x20000f34

08008d24 <prvDeleteTCB>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelete == 1 )

	static void prvDeleteTCB( TCB_t *pxTCB )
	{
 8008d24:	b580      	push	{r7, lr}
 8008d26:	b084      	sub	sp, #16
 8008d28:	af00      	add	r7, sp, #0
 8008d2a:	6078      	str	r0, [r7, #4]
		#elif( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 !e9029 Macro has been consolidated for readability reasons. */
		{
			/* The task could have been allocated statically or dynamically, so
			check what was statically allocated before trying to free the
			memory. */
			if( pxTCB->ucStaticallyAllocated == tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB )
 8008d2c:	687b      	ldr	r3, [r7, #4]
 8008d2e:	f893 305d 	ldrb.w	r3, [r3, #93]	; 0x5d
 8008d32:	2b00      	cmp	r3, #0
 8008d34:	d108      	bne.n	8008d48 <prvDeleteTCB+0x24>
			{
				/* Both the stack and TCB were allocated dynamically, so both
				must be freed. */
				vPortFree( pxTCB->pxStack );
 8008d36:	687b      	ldr	r3, [r7, #4]
 8008d38:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8008d3a:	4618      	mov	r0, r3
 8008d3c:	f001 f88c 	bl	8009e58 <vPortFree>
				vPortFree( pxTCB );
 8008d40:	6878      	ldr	r0, [r7, #4]
 8008d42:	f001 f889 	bl	8009e58 <vPortFree>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
	}
 8008d46:	e018      	b.n	8008d7a <prvDeleteTCB+0x56>
			else if( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_ONLY )
 8008d48:	687b      	ldr	r3, [r7, #4]
 8008d4a:	f893 305d 	ldrb.w	r3, [r3, #93]	; 0x5d
 8008d4e:	2b01      	cmp	r3, #1
 8008d50:	d103      	bne.n	8008d5a <prvDeleteTCB+0x36>
				vPortFree( pxTCB );
 8008d52:	6878      	ldr	r0, [r7, #4]
 8008d54:	f001 f880 	bl	8009e58 <vPortFree>
	}
 8008d58:	e00f      	b.n	8008d7a <prvDeleteTCB+0x56>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
 8008d5a:	687b      	ldr	r3, [r7, #4]
 8008d5c:	f893 305d 	ldrb.w	r3, [r3, #93]	; 0x5d
 8008d60:	2b02      	cmp	r3, #2
 8008d62:	d00a      	beq.n	8008d7a <prvDeleteTCB+0x56>
	__asm volatile
 8008d64:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008d68:	f383 8811 	msr	BASEPRI, r3
 8008d6c:	f3bf 8f6f 	isb	sy
 8008d70:	f3bf 8f4f 	dsb	sy
 8008d74:	60fb      	str	r3, [r7, #12]
}
 8008d76:	bf00      	nop
 8008d78:	e7fe      	b.n	8008d78 <prvDeleteTCB+0x54>
	}
 8008d7a:	bf00      	nop
 8008d7c:	3710      	adds	r7, #16
 8008d7e:	46bd      	mov	sp, r7
 8008d80:	bd80      	pop	{r7, pc}
	...

08008d84 <prvResetNextTaskUnblockTime>:

#endif /* INCLUDE_vTaskDelete */
/*-----------------------------------------------------------*/

static void prvResetNextTaskUnblockTime( void )
{
 8008d84:	b480      	push	{r7}
 8008d86:	b083      	sub	sp, #12
 8008d88:	af00      	add	r7, sp, #0
TCB_t *pxTCB;

	if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8008d8a:	4b0c      	ldr	r3, [pc, #48]	; (8008dbc <prvResetNextTaskUnblockTime+0x38>)
 8008d8c:	681b      	ldr	r3, [r3, #0]
 8008d8e:	681b      	ldr	r3, [r3, #0]
 8008d90:	2b00      	cmp	r3, #0
 8008d92:	d104      	bne.n	8008d9e <prvResetNextTaskUnblockTime+0x1a>
	{
		/* The new current delayed list is empty.  Set xNextTaskUnblockTime to
		the maximum possible value so it is	extremely unlikely that the
		if( xTickCount >= xNextTaskUnblockTime ) test will pass until
		there is an item in the delayed list. */
		xNextTaskUnblockTime = portMAX_DELAY;
 8008d94:	4b0a      	ldr	r3, [pc, #40]	; (8008dc0 <prvResetNextTaskUnblockTime+0x3c>)
 8008d96:	f04f 32ff 	mov.w	r2, #4294967295
 8008d9a:	601a      	str	r2, [r3, #0]
		which the task at the head of the delayed list should be removed
		from the Blocked state. */
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
	}
}
 8008d9c:	e008      	b.n	8008db0 <prvResetNextTaskUnblockTime+0x2c>
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8008d9e:	4b07      	ldr	r3, [pc, #28]	; (8008dbc <prvResetNextTaskUnblockTime+0x38>)
 8008da0:	681b      	ldr	r3, [r3, #0]
 8008da2:	68db      	ldr	r3, [r3, #12]
 8008da4:	68db      	ldr	r3, [r3, #12]
 8008da6:	607b      	str	r3, [r7, #4]
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
 8008da8:	687b      	ldr	r3, [r7, #4]
 8008daa:	685b      	ldr	r3, [r3, #4]
 8008dac:	4a04      	ldr	r2, [pc, #16]	; (8008dc0 <prvResetNextTaskUnblockTime+0x3c>)
 8008dae:	6013      	str	r3, [r2, #0]
}
 8008db0:	bf00      	nop
 8008db2:	370c      	adds	r7, #12
 8008db4:	46bd      	mov	sp, r7
 8008db6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008dba:	4770      	bx	lr
 8008dbc:	20000f04 	.word	0x20000f04
 8008dc0:	20000f6c 	.word	0x20000f6c

08008dc4 <xTaskGetSchedulerState>:
/*-----------------------------------------------------------*/

#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )

	BaseType_t xTaskGetSchedulerState( void )
	{
 8008dc4:	b480      	push	{r7}
 8008dc6:	b083      	sub	sp, #12
 8008dc8:	af00      	add	r7, sp, #0
	BaseType_t xReturn;

		if( xSchedulerRunning == pdFALSE )
 8008dca:	4b0b      	ldr	r3, [pc, #44]	; (8008df8 <xTaskGetSchedulerState+0x34>)
 8008dcc:	681b      	ldr	r3, [r3, #0]
 8008dce:	2b00      	cmp	r3, #0
 8008dd0:	d102      	bne.n	8008dd8 <xTaskGetSchedulerState+0x14>
		{
			xReturn = taskSCHEDULER_NOT_STARTED;
 8008dd2:	2301      	movs	r3, #1
 8008dd4:	607b      	str	r3, [r7, #4]
 8008dd6:	e008      	b.n	8008dea <xTaskGetSchedulerState+0x26>
		}
		else
		{
			if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8008dd8:	4b08      	ldr	r3, [pc, #32]	; (8008dfc <xTaskGetSchedulerState+0x38>)
 8008dda:	681b      	ldr	r3, [r3, #0]
 8008ddc:	2b00      	cmp	r3, #0
 8008dde:	d102      	bne.n	8008de6 <xTaskGetSchedulerState+0x22>
			{
				xReturn = taskSCHEDULER_RUNNING;
 8008de0:	2302      	movs	r3, #2
 8008de2:	607b      	str	r3, [r7, #4]
 8008de4:	e001      	b.n	8008dea <xTaskGetSchedulerState+0x26>
			}
			else
			{
				xReturn = taskSCHEDULER_SUSPENDED;
 8008de6:	2300      	movs	r3, #0
 8008de8:	607b      	str	r3, [r7, #4]
			}
		}

		return xReturn;
 8008dea:	687b      	ldr	r3, [r7, #4]
	}
 8008dec:	4618      	mov	r0, r3
 8008dee:	370c      	adds	r7, #12
 8008df0:	46bd      	mov	sp, r7
 8008df2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008df6:	4770      	bx	lr
 8008df8:	20000f58 	.word	0x20000f58
 8008dfc:	20000f74 	.word	0x20000f74

08008e00 <xTaskPriorityInherit>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	BaseType_t xTaskPriorityInherit( TaskHandle_t const pxMutexHolder )
	{
 8008e00:	b580      	push	{r7, lr}
 8008e02:	b084      	sub	sp, #16
 8008e04:	af00      	add	r7, sp, #0
 8008e06:	6078      	str	r0, [r7, #4]
	TCB_t * const pxMutexHolderTCB = pxMutexHolder;
 8008e08:	687b      	ldr	r3, [r7, #4]
 8008e0a:	60bb      	str	r3, [r7, #8]
	BaseType_t xReturn = pdFALSE;
 8008e0c:	2300      	movs	r3, #0
 8008e0e:	60fb      	str	r3, [r7, #12]

		/* If the mutex was given back by an interrupt while the queue was
		locked then the mutex holder might now be NULL.  _RB_ Is this still
		needed as interrupts can no longer use mutexes? */
		if( pxMutexHolder != NULL )
 8008e10:	687b      	ldr	r3, [r7, #4]
 8008e12:	2b00      	cmp	r3, #0
 8008e14:	d051      	beq.n	8008eba <xTaskPriorityInherit+0xba>
		{
			/* If the holder of the mutex has a priority below the priority of
			the task attempting to obtain the mutex then it will temporarily
			inherit the priority of the task attempting to obtain the mutex. */
			if( pxMutexHolderTCB->uxPriority < pxCurrentTCB->uxPriority )
 8008e16:	68bb      	ldr	r3, [r7, #8]
 8008e18:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8008e1a:	4b2a      	ldr	r3, [pc, #168]	; (8008ec4 <xTaskPriorityInherit+0xc4>)
 8008e1c:	681b      	ldr	r3, [r3, #0]
 8008e1e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8008e20:	429a      	cmp	r2, r3
 8008e22:	d241      	bcs.n	8008ea8 <xTaskPriorityInherit+0xa8>
			{
				/* Adjust the mutex holder state to account for its new
				priority.  Only reset the event list item value if the value is
				not being used for anything else. */
				if( ( listGET_LIST_ITEM_VALUE( &( pxMutexHolderTCB->xEventListItem ) ) & taskEVENT_LIST_ITEM_VALUE_IN_USE ) == 0UL )
 8008e24:	68bb      	ldr	r3, [r7, #8]
 8008e26:	699b      	ldr	r3, [r3, #24]
 8008e28:	2b00      	cmp	r3, #0
 8008e2a:	db06      	blt.n	8008e3a <xTaskPriorityInherit+0x3a>
				{
					listSET_LIST_ITEM_VALUE( &( pxMutexHolderTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxCurrentTCB->uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8008e2c:	4b25      	ldr	r3, [pc, #148]	; (8008ec4 <xTaskPriorityInherit+0xc4>)
 8008e2e:	681b      	ldr	r3, [r3, #0]
 8008e30:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8008e32:	f1c3 0238 	rsb	r2, r3, #56	; 0x38
 8008e36:	68bb      	ldr	r3, [r7, #8]
 8008e38:	619a      	str	r2, [r3, #24]
					mtCOVERAGE_TEST_MARKER();
				}

				/* If the task being modified is in the ready state it will need
				to be moved into a new list. */
				if( listIS_CONTAINED_WITHIN( &( pxReadyTasksLists[ pxMutexHolderTCB->uxPriority ] ), &( pxMutexHolderTCB->xStateListItem ) ) != pdFALSE )
 8008e3a:	68bb      	ldr	r3, [r7, #8]
 8008e3c:	6959      	ldr	r1, [r3, #20]
 8008e3e:	68bb      	ldr	r3, [r7, #8]
 8008e40:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8008e42:	4613      	mov	r3, r2
 8008e44:	009b      	lsls	r3, r3, #2
 8008e46:	4413      	add	r3, r2
 8008e48:	009b      	lsls	r3, r3, #2
 8008e4a:	4a1f      	ldr	r2, [pc, #124]	; (8008ec8 <xTaskPriorityInherit+0xc8>)
 8008e4c:	4413      	add	r3, r2
 8008e4e:	4299      	cmp	r1, r3
 8008e50:	d122      	bne.n	8008e98 <xTaskPriorityInherit+0x98>
				{
					if( uxListRemove( &( pxMutexHolderTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 8008e52:	68bb      	ldr	r3, [r7, #8]
 8008e54:	3304      	adds	r3, #4
 8008e56:	4618      	mov	r0, r3
 8008e58:	f7fe f8a6 	bl	8006fa8 <uxListRemove>
					{
						mtCOVERAGE_TEST_MARKER();
					}

					/* Inherit the priority before being moved into the new list. */
					pxMutexHolderTCB->uxPriority = pxCurrentTCB->uxPriority;
 8008e5c:	4b19      	ldr	r3, [pc, #100]	; (8008ec4 <xTaskPriorityInherit+0xc4>)
 8008e5e:	681b      	ldr	r3, [r3, #0]
 8008e60:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8008e62:	68bb      	ldr	r3, [r7, #8]
 8008e64:	62da      	str	r2, [r3, #44]	; 0x2c
					prvAddTaskToReadyList( pxMutexHolderTCB );
 8008e66:	68bb      	ldr	r3, [r7, #8]
 8008e68:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8008e6a:	4b18      	ldr	r3, [pc, #96]	; (8008ecc <xTaskPriorityInherit+0xcc>)
 8008e6c:	681b      	ldr	r3, [r3, #0]
 8008e6e:	429a      	cmp	r2, r3
 8008e70:	d903      	bls.n	8008e7a <xTaskPriorityInherit+0x7a>
 8008e72:	68bb      	ldr	r3, [r7, #8]
 8008e74:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8008e76:	4a15      	ldr	r2, [pc, #84]	; (8008ecc <xTaskPriorityInherit+0xcc>)
 8008e78:	6013      	str	r3, [r2, #0]
 8008e7a:	68bb      	ldr	r3, [r7, #8]
 8008e7c:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8008e7e:	4613      	mov	r3, r2
 8008e80:	009b      	lsls	r3, r3, #2
 8008e82:	4413      	add	r3, r2
 8008e84:	009b      	lsls	r3, r3, #2
 8008e86:	4a10      	ldr	r2, [pc, #64]	; (8008ec8 <xTaskPriorityInherit+0xc8>)
 8008e88:	441a      	add	r2, r3
 8008e8a:	68bb      	ldr	r3, [r7, #8]
 8008e8c:	3304      	adds	r3, #4
 8008e8e:	4619      	mov	r1, r3
 8008e90:	4610      	mov	r0, r2
 8008e92:	f7fe f82c 	bl	8006eee <vListInsertEnd>
 8008e96:	e004      	b.n	8008ea2 <xTaskPriorityInherit+0xa2>
				}
				else
				{
					/* Just inherit the priority. */
					pxMutexHolderTCB->uxPriority = pxCurrentTCB->uxPriority;
 8008e98:	4b0a      	ldr	r3, [pc, #40]	; (8008ec4 <xTaskPriorityInherit+0xc4>)
 8008e9a:	681b      	ldr	r3, [r3, #0]
 8008e9c:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8008e9e:	68bb      	ldr	r3, [r7, #8]
 8008ea0:	62da      	str	r2, [r3, #44]	; 0x2c
				}

				traceTASK_PRIORITY_INHERIT( pxMutexHolderTCB, pxCurrentTCB->uxPriority );

				/* Inheritance occurred. */
				xReturn = pdTRUE;
 8008ea2:	2301      	movs	r3, #1
 8008ea4:	60fb      	str	r3, [r7, #12]
 8008ea6:	e008      	b.n	8008eba <xTaskPriorityInherit+0xba>
			}
			else
			{
				if( pxMutexHolderTCB->uxBasePriority < pxCurrentTCB->uxPriority )
 8008ea8:	68bb      	ldr	r3, [r7, #8]
 8008eaa:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8008eac:	4b05      	ldr	r3, [pc, #20]	; (8008ec4 <xTaskPriorityInherit+0xc4>)
 8008eae:	681b      	ldr	r3, [r3, #0]
 8008eb0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8008eb2:	429a      	cmp	r2, r3
 8008eb4:	d201      	bcs.n	8008eba <xTaskPriorityInherit+0xba>
					current priority of the mutex holder is not lower than the
					priority of the task attempting to take the mutex.
					Therefore the mutex holder must have already inherited a
					priority, but inheritance would have occurred if that had
					not been the case. */
					xReturn = pdTRUE;
 8008eb6:	2301      	movs	r3, #1
 8008eb8:	60fb      	str	r3, [r7, #12]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		return xReturn;
 8008eba:	68fb      	ldr	r3, [r7, #12]
	}
 8008ebc:	4618      	mov	r0, r3
 8008ebe:	3710      	adds	r7, #16
 8008ec0:	46bd      	mov	sp, r7
 8008ec2:	bd80      	pop	{r7, pc}
 8008ec4:	20000a78 	.word	0x20000a78
 8008ec8:	20000a7c 	.word	0x20000a7c
 8008ecc:	20000f54 	.word	0x20000f54

08008ed0 <xTaskPriorityDisinherit>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	BaseType_t xTaskPriorityDisinherit( TaskHandle_t const pxMutexHolder )
	{
 8008ed0:	b580      	push	{r7, lr}
 8008ed2:	b086      	sub	sp, #24
 8008ed4:	af00      	add	r7, sp, #0
 8008ed6:	6078      	str	r0, [r7, #4]
	TCB_t * const pxTCB = pxMutexHolder;
 8008ed8:	687b      	ldr	r3, [r7, #4]
 8008eda:	613b      	str	r3, [r7, #16]
	BaseType_t xReturn = pdFALSE;
 8008edc:	2300      	movs	r3, #0
 8008ede:	617b      	str	r3, [r7, #20]

		if( pxMutexHolder != NULL )
 8008ee0:	687b      	ldr	r3, [r7, #4]
 8008ee2:	2b00      	cmp	r3, #0
 8008ee4:	d056      	beq.n	8008f94 <xTaskPriorityDisinherit+0xc4>
		{
			/* A task can only have an inherited priority if it holds the mutex.
			If the mutex is held by a task then it cannot be given from an
			interrupt, and if a mutex is given by the holding task then it must
			be the running state task. */
			configASSERT( pxTCB == pxCurrentTCB );
 8008ee6:	4b2e      	ldr	r3, [pc, #184]	; (8008fa0 <xTaskPriorityDisinherit+0xd0>)
 8008ee8:	681b      	ldr	r3, [r3, #0]
 8008eea:	693a      	ldr	r2, [r7, #16]
 8008eec:	429a      	cmp	r2, r3
 8008eee:	d00a      	beq.n	8008f06 <xTaskPriorityDisinherit+0x36>
	__asm volatile
 8008ef0:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008ef4:	f383 8811 	msr	BASEPRI, r3
 8008ef8:	f3bf 8f6f 	isb	sy
 8008efc:	f3bf 8f4f 	dsb	sy
 8008f00:	60fb      	str	r3, [r7, #12]
}
 8008f02:	bf00      	nop
 8008f04:	e7fe      	b.n	8008f04 <xTaskPriorityDisinherit+0x34>
			configASSERT( pxTCB->uxMutexesHeld );
 8008f06:	693b      	ldr	r3, [r7, #16]
 8008f08:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8008f0a:	2b00      	cmp	r3, #0
 8008f0c:	d10a      	bne.n	8008f24 <xTaskPriorityDisinherit+0x54>
	__asm volatile
 8008f0e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008f12:	f383 8811 	msr	BASEPRI, r3
 8008f16:	f3bf 8f6f 	isb	sy
 8008f1a:	f3bf 8f4f 	dsb	sy
 8008f1e:	60bb      	str	r3, [r7, #8]
}
 8008f20:	bf00      	nop
 8008f22:	e7fe      	b.n	8008f22 <xTaskPriorityDisinherit+0x52>
			( pxTCB->uxMutexesHeld )--;
 8008f24:	693b      	ldr	r3, [r7, #16]
 8008f26:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8008f28:	1e5a      	subs	r2, r3, #1
 8008f2a:	693b      	ldr	r3, [r7, #16]
 8008f2c:	651a      	str	r2, [r3, #80]	; 0x50

			/* Has the holder of the mutex inherited the priority of another
			task? */
			if( pxTCB->uxPriority != pxTCB->uxBasePriority )
 8008f2e:	693b      	ldr	r3, [r7, #16]
 8008f30:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8008f32:	693b      	ldr	r3, [r7, #16]
 8008f34:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8008f36:	429a      	cmp	r2, r3
 8008f38:	d02c      	beq.n	8008f94 <xTaskPriorityDisinherit+0xc4>
			{
				/* Only disinherit if no other mutexes are held. */
				if( pxTCB->uxMutexesHeld == ( UBaseType_t ) 0 )
 8008f3a:	693b      	ldr	r3, [r7, #16]
 8008f3c:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8008f3e:	2b00      	cmp	r3, #0
 8008f40:	d128      	bne.n	8008f94 <xTaskPriorityDisinherit+0xc4>
					/* A task can only have an inherited priority if it holds
					the mutex.  If the mutex is held by a task then it cannot be
					given from an interrupt, and if a mutex is given by the
					holding task then it must be the running state task.  Remove
					the holding task from the ready/delayed list. */
					if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 8008f42:	693b      	ldr	r3, [r7, #16]
 8008f44:	3304      	adds	r3, #4
 8008f46:	4618      	mov	r0, r3
 8008f48:	f7fe f82e 	bl	8006fa8 <uxListRemove>
					}

					/* Disinherit the priority before adding the task into the
					new	ready list. */
					traceTASK_PRIORITY_DISINHERIT( pxTCB, pxTCB->uxBasePriority );
					pxTCB->uxPriority = pxTCB->uxBasePriority;
 8008f4c:	693b      	ldr	r3, [r7, #16]
 8008f4e:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8008f50:	693b      	ldr	r3, [r7, #16]
 8008f52:	62da      	str	r2, [r3, #44]	; 0x2c

					/* Reset the event list item value.  It cannot be in use for
					any other purpose if this task is running, and it must be
					running to give back the mutex. */
					listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxTCB->uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8008f54:	693b      	ldr	r3, [r7, #16]
 8008f56:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8008f58:	f1c3 0238 	rsb	r2, r3, #56	; 0x38
 8008f5c:	693b      	ldr	r3, [r7, #16]
 8008f5e:	619a      	str	r2, [r3, #24]
					prvAddTaskToReadyList( pxTCB );
 8008f60:	693b      	ldr	r3, [r7, #16]
 8008f62:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8008f64:	4b0f      	ldr	r3, [pc, #60]	; (8008fa4 <xTaskPriorityDisinherit+0xd4>)
 8008f66:	681b      	ldr	r3, [r3, #0]
 8008f68:	429a      	cmp	r2, r3
 8008f6a:	d903      	bls.n	8008f74 <xTaskPriorityDisinherit+0xa4>
 8008f6c:	693b      	ldr	r3, [r7, #16]
 8008f6e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8008f70:	4a0c      	ldr	r2, [pc, #48]	; (8008fa4 <xTaskPriorityDisinherit+0xd4>)
 8008f72:	6013      	str	r3, [r2, #0]
 8008f74:	693b      	ldr	r3, [r7, #16]
 8008f76:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8008f78:	4613      	mov	r3, r2
 8008f7a:	009b      	lsls	r3, r3, #2
 8008f7c:	4413      	add	r3, r2
 8008f7e:	009b      	lsls	r3, r3, #2
 8008f80:	4a09      	ldr	r2, [pc, #36]	; (8008fa8 <xTaskPriorityDisinherit+0xd8>)
 8008f82:	441a      	add	r2, r3
 8008f84:	693b      	ldr	r3, [r7, #16]
 8008f86:	3304      	adds	r3, #4
 8008f88:	4619      	mov	r1, r3
 8008f8a:	4610      	mov	r0, r2
 8008f8c:	f7fd ffaf 	bl	8006eee <vListInsertEnd>
					in an order different to that in which they were taken.
					If a context switch did not occur when the first mutex was
					returned, even if a task was waiting on it, then a context
					switch should occur when the last mutex is returned whether
					a task is waiting on it or not. */
					xReturn = pdTRUE;
 8008f90:	2301      	movs	r3, #1
 8008f92:	617b      	str	r3, [r7, #20]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		return xReturn;
 8008f94:	697b      	ldr	r3, [r7, #20]
	}
 8008f96:	4618      	mov	r0, r3
 8008f98:	3718      	adds	r7, #24
 8008f9a:	46bd      	mov	sp, r7
 8008f9c:	bd80      	pop	{r7, pc}
 8008f9e:	bf00      	nop
 8008fa0:	20000a78 	.word	0x20000a78
 8008fa4:	20000f54 	.word	0x20000f54
 8008fa8:	20000a7c 	.word	0x20000a7c

08008fac <vTaskPriorityDisinheritAfterTimeout>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	void vTaskPriorityDisinheritAfterTimeout( TaskHandle_t const pxMutexHolder, UBaseType_t uxHighestPriorityWaitingTask )
	{
 8008fac:	b580      	push	{r7, lr}
 8008fae:	b088      	sub	sp, #32
 8008fb0:	af00      	add	r7, sp, #0
 8008fb2:	6078      	str	r0, [r7, #4]
 8008fb4:	6039      	str	r1, [r7, #0]
	TCB_t * const pxTCB = pxMutexHolder;
 8008fb6:	687b      	ldr	r3, [r7, #4]
 8008fb8:	61bb      	str	r3, [r7, #24]
	UBaseType_t uxPriorityUsedOnEntry, uxPriorityToUse;
	const UBaseType_t uxOnlyOneMutexHeld = ( UBaseType_t ) 1;
 8008fba:	2301      	movs	r3, #1
 8008fbc:	617b      	str	r3, [r7, #20]

		if( pxMutexHolder != NULL )
 8008fbe:	687b      	ldr	r3, [r7, #4]
 8008fc0:	2b00      	cmp	r3, #0
 8008fc2:	d06a      	beq.n	800909a <vTaskPriorityDisinheritAfterTimeout+0xee>
		{
			/* If pxMutexHolder is not NULL then the holder must hold at least
			one mutex. */
			configASSERT( pxTCB->uxMutexesHeld );
 8008fc4:	69bb      	ldr	r3, [r7, #24]
 8008fc6:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8008fc8:	2b00      	cmp	r3, #0
 8008fca:	d10a      	bne.n	8008fe2 <vTaskPriorityDisinheritAfterTimeout+0x36>
	__asm volatile
 8008fcc:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008fd0:	f383 8811 	msr	BASEPRI, r3
 8008fd4:	f3bf 8f6f 	isb	sy
 8008fd8:	f3bf 8f4f 	dsb	sy
 8008fdc:	60fb      	str	r3, [r7, #12]
}
 8008fde:	bf00      	nop
 8008fe0:	e7fe      	b.n	8008fe0 <vTaskPriorityDisinheritAfterTimeout+0x34>

			/* Determine the priority to which the priority of the task that
			holds the mutex should be set.  This will be the greater of the
			holding task's base priority and the priority of the highest
			priority task that is waiting to obtain the mutex. */
			if( pxTCB->uxBasePriority < uxHighestPriorityWaitingTask )
 8008fe2:	69bb      	ldr	r3, [r7, #24]
 8008fe4:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8008fe6:	683a      	ldr	r2, [r7, #0]
 8008fe8:	429a      	cmp	r2, r3
 8008fea:	d902      	bls.n	8008ff2 <vTaskPriorityDisinheritAfterTimeout+0x46>
			{
				uxPriorityToUse = uxHighestPriorityWaitingTask;
 8008fec:	683b      	ldr	r3, [r7, #0]
 8008fee:	61fb      	str	r3, [r7, #28]
 8008ff0:	e002      	b.n	8008ff8 <vTaskPriorityDisinheritAfterTimeout+0x4c>
			}
			else
			{
				uxPriorityToUse = pxTCB->uxBasePriority;
 8008ff2:	69bb      	ldr	r3, [r7, #24]
 8008ff4:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8008ff6:	61fb      	str	r3, [r7, #28]
			}

			/* Does the priority need to change? */
			if( pxTCB->uxPriority != uxPriorityToUse )
 8008ff8:	69bb      	ldr	r3, [r7, #24]
 8008ffa:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8008ffc:	69fa      	ldr	r2, [r7, #28]
 8008ffe:	429a      	cmp	r2, r3
 8009000:	d04b      	beq.n	800909a <vTaskPriorityDisinheritAfterTimeout+0xee>
			{
				/* Only disinherit if no other mutexes are held.  This is a
				simplification in the priority inheritance implementation.  If
				the task that holds the mutex is also holding other mutexes then
				the other mutexes may have caused the priority inheritance. */
				if( pxTCB->uxMutexesHeld == uxOnlyOneMutexHeld )
 8009002:	69bb      	ldr	r3, [r7, #24]
 8009004:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8009006:	697a      	ldr	r2, [r7, #20]
 8009008:	429a      	cmp	r2, r3
 800900a:	d146      	bne.n	800909a <vTaskPriorityDisinheritAfterTimeout+0xee>
				{
					/* If a task has timed out because it already holds the
					mutex it was trying to obtain then it cannot of inherited
					its own priority. */
					configASSERT( pxTCB != pxCurrentTCB );
 800900c:	4b25      	ldr	r3, [pc, #148]	; (80090a4 <vTaskPriorityDisinheritAfterTimeout+0xf8>)
 800900e:	681b      	ldr	r3, [r3, #0]
 8009010:	69ba      	ldr	r2, [r7, #24]
 8009012:	429a      	cmp	r2, r3
 8009014:	d10a      	bne.n	800902c <vTaskPriorityDisinheritAfterTimeout+0x80>
	__asm volatile
 8009016:	f04f 0350 	mov.w	r3, #80	; 0x50
 800901a:	f383 8811 	msr	BASEPRI, r3
 800901e:	f3bf 8f6f 	isb	sy
 8009022:	f3bf 8f4f 	dsb	sy
 8009026:	60bb      	str	r3, [r7, #8]
}
 8009028:	bf00      	nop
 800902a:	e7fe      	b.n	800902a <vTaskPriorityDisinheritAfterTimeout+0x7e>

					/* Disinherit the priority, remembering the previous
					priority to facilitate determining the subject task's
					state. */
					traceTASK_PRIORITY_DISINHERIT( pxTCB, pxTCB->uxBasePriority );
					uxPriorityUsedOnEntry = pxTCB->uxPriority;
 800902c:	69bb      	ldr	r3, [r7, #24]
 800902e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8009030:	613b      	str	r3, [r7, #16]
					pxTCB->uxPriority = uxPriorityToUse;
 8009032:	69bb      	ldr	r3, [r7, #24]
 8009034:	69fa      	ldr	r2, [r7, #28]
 8009036:	62da      	str	r2, [r3, #44]	; 0x2c

					/* Only reset the event list item value if the value is not
					being used for anything else. */
					if( ( listGET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ) ) & taskEVENT_LIST_ITEM_VALUE_IN_USE ) == 0UL )
 8009038:	69bb      	ldr	r3, [r7, #24]
 800903a:	699b      	ldr	r3, [r3, #24]
 800903c:	2b00      	cmp	r3, #0
 800903e:	db04      	blt.n	800904a <vTaskPriorityDisinheritAfterTimeout+0x9e>
					{
						listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriorityToUse ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8009040:	69fb      	ldr	r3, [r7, #28]
 8009042:	f1c3 0238 	rsb	r2, r3, #56	; 0x38
 8009046:	69bb      	ldr	r3, [r7, #24]
 8009048:	619a      	str	r2, [r3, #24]
					then the task that holds the mutex could be in either the
					Ready, Blocked or Suspended states.  Only remove the task
					from its current state list if it is in the Ready state as
					the task's priority is going to change and there is one
					Ready list per priority. */
					if( listIS_CONTAINED_WITHIN( &( pxReadyTasksLists[ uxPriorityUsedOnEntry ] ), &( pxTCB->xStateListItem ) ) != pdFALSE )
 800904a:	69bb      	ldr	r3, [r7, #24]
 800904c:	6959      	ldr	r1, [r3, #20]
 800904e:	693a      	ldr	r2, [r7, #16]
 8009050:	4613      	mov	r3, r2
 8009052:	009b      	lsls	r3, r3, #2
 8009054:	4413      	add	r3, r2
 8009056:	009b      	lsls	r3, r3, #2
 8009058:	4a13      	ldr	r2, [pc, #76]	; (80090a8 <vTaskPriorityDisinheritAfterTimeout+0xfc>)
 800905a:	4413      	add	r3, r2
 800905c:	4299      	cmp	r1, r3
 800905e:	d11c      	bne.n	800909a <vTaskPriorityDisinheritAfterTimeout+0xee>
					{
						if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 8009060:	69bb      	ldr	r3, [r7, #24]
 8009062:	3304      	adds	r3, #4
 8009064:	4618      	mov	r0, r3
 8009066:	f7fd ff9f 	bl	8006fa8 <uxListRemove>
						else
						{
							mtCOVERAGE_TEST_MARKER();
						}

						prvAddTaskToReadyList( pxTCB );
 800906a:	69bb      	ldr	r3, [r7, #24]
 800906c:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800906e:	4b0f      	ldr	r3, [pc, #60]	; (80090ac <vTaskPriorityDisinheritAfterTimeout+0x100>)
 8009070:	681b      	ldr	r3, [r3, #0]
 8009072:	429a      	cmp	r2, r3
 8009074:	d903      	bls.n	800907e <vTaskPriorityDisinheritAfterTimeout+0xd2>
 8009076:	69bb      	ldr	r3, [r7, #24]
 8009078:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800907a:	4a0c      	ldr	r2, [pc, #48]	; (80090ac <vTaskPriorityDisinheritAfterTimeout+0x100>)
 800907c:	6013      	str	r3, [r2, #0]
 800907e:	69bb      	ldr	r3, [r7, #24]
 8009080:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8009082:	4613      	mov	r3, r2
 8009084:	009b      	lsls	r3, r3, #2
 8009086:	4413      	add	r3, r2
 8009088:	009b      	lsls	r3, r3, #2
 800908a:	4a07      	ldr	r2, [pc, #28]	; (80090a8 <vTaskPriorityDisinheritAfterTimeout+0xfc>)
 800908c:	441a      	add	r2, r3
 800908e:	69bb      	ldr	r3, [r7, #24]
 8009090:	3304      	adds	r3, #4
 8009092:	4619      	mov	r1, r3
 8009094:	4610      	mov	r0, r2
 8009096:	f7fd ff2a 	bl	8006eee <vListInsertEnd>
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
 800909a:	bf00      	nop
 800909c:	3720      	adds	r7, #32
 800909e:	46bd      	mov	sp, r7
 80090a0:	bd80      	pop	{r7, pc}
 80090a2:	bf00      	nop
 80090a4:	20000a78 	.word	0x20000a78
 80090a8:	20000a7c 	.word	0x20000a7c
 80090ac:	20000f54 	.word	0x20000f54

080090b0 <pvTaskIncrementMutexHeldCount>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	TaskHandle_t pvTaskIncrementMutexHeldCount( void )
	{
 80090b0:	b480      	push	{r7}
 80090b2:	af00      	add	r7, sp, #0
		/* If xSemaphoreCreateMutex() is called before any tasks have been created
		then pxCurrentTCB will be NULL. */
		if( pxCurrentTCB != NULL )
 80090b4:	4b07      	ldr	r3, [pc, #28]	; (80090d4 <pvTaskIncrementMutexHeldCount+0x24>)
 80090b6:	681b      	ldr	r3, [r3, #0]
 80090b8:	2b00      	cmp	r3, #0
 80090ba:	d004      	beq.n	80090c6 <pvTaskIncrementMutexHeldCount+0x16>
		{
			( pxCurrentTCB->uxMutexesHeld )++;
 80090bc:	4b05      	ldr	r3, [pc, #20]	; (80090d4 <pvTaskIncrementMutexHeldCount+0x24>)
 80090be:	681b      	ldr	r3, [r3, #0]
 80090c0:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 80090c2:	3201      	adds	r2, #1
 80090c4:	651a      	str	r2, [r3, #80]	; 0x50
		}

		return pxCurrentTCB;
 80090c6:	4b03      	ldr	r3, [pc, #12]	; (80090d4 <pvTaskIncrementMutexHeldCount+0x24>)
 80090c8:	681b      	ldr	r3, [r3, #0]
	}
 80090ca:	4618      	mov	r0, r3
 80090cc:	46bd      	mov	sp, r7
 80090ce:	f85d 7b04 	ldr.w	r7, [sp], #4
 80090d2:	4770      	bx	lr
 80090d4:	20000a78 	.word	0x20000a78

080090d8 <prvAddCurrentTaskToDelayedList>:

#endif
/*-----------------------------------------------------------*/

static void prvAddCurrentTaskToDelayedList( TickType_t xTicksToWait, const BaseType_t xCanBlockIndefinitely )
{
 80090d8:	b580      	push	{r7, lr}
 80090da:	b084      	sub	sp, #16
 80090dc:	af00      	add	r7, sp, #0
 80090de:	6078      	str	r0, [r7, #4]
 80090e0:	6039      	str	r1, [r7, #0]
TickType_t xTimeToWake;
const TickType_t xConstTickCount = xTickCount;
 80090e2:	4b21      	ldr	r3, [pc, #132]	; (8009168 <prvAddCurrentTaskToDelayedList+0x90>)
 80090e4:	681b      	ldr	r3, [r3, #0]
 80090e6:	60fb      	str	r3, [r7, #12]
	}
	#endif

	/* Remove the task from the ready list before adding it to the blocked list
	as the same list item is used for both lists. */
	if( uxListRemove( &( pxCurrentTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 80090e8:	4b20      	ldr	r3, [pc, #128]	; (800916c <prvAddCurrentTaskToDelayedList+0x94>)
 80090ea:	681b      	ldr	r3, [r3, #0]
 80090ec:	3304      	adds	r3, #4
 80090ee:	4618      	mov	r0, r3
 80090f0:	f7fd ff5a 	bl	8006fa8 <uxListRemove>
		mtCOVERAGE_TEST_MARKER();
	}

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		if( ( xTicksToWait == portMAX_DELAY ) && ( xCanBlockIndefinitely != pdFALSE ) )
 80090f4:	687b      	ldr	r3, [r7, #4]
 80090f6:	f1b3 3fff 	cmp.w	r3, #4294967295
 80090fa:	d10a      	bne.n	8009112 <prvAddCurrentTaskToDelayedList+0x3a>
 80090fc:	683b      	ldr	r3, [r7, #0]
 80090fe:	2b00      	cmp	r3, #0
 8009100:	d007      	beq.n	8009112 <prvAddCurrentTaskToDelayedList+0x3a>
		{
			/* Add the task to the suspended task list instead of a delayed task
			list to ensure it is not woken by a timing event.  It will block
			indefinitely. */
			vListInsertEnd( &xSuspendedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8009102:	4b1a      	ldr	r3, [pc, #104]	; (800916c <prvAddCurrentTaskToDelayedList+0x94>)
 8009104:	681b      	ldr	r3, [r3, #0]
 8009106:	3304      	adds	r3, #4
 8009108:	4619      	mov	r1, r3
 800910a:	4819      	ldr	r0, [pc, #100]	; (8009170 <prvAddCurrentTaskToDelayedList+0x98>)
 800910c:	f7fd feef 	bl	8006eee <vListInsertEnd>

		/* Avoid compiler warning when INCLUDE_vTaskSuspend is not 1. */
		( void ) xCanBlockIndefinitely;
	}
	#endif /* INCLUDE_vTaskSuspend */
}
 8009110:	e026      	b.n	8009160 <prvAddCurrentTaskToDelayedList+0x88>
			xTimeToWake = xConstTickCount + xTicksToWait;
 8009112:	68fa      	ldr	r2, [r7, #12]
 8009114:	687b      	ldr	r3, [r7, #4]
 8009116:	4413      	add	r3, r2
 8009118:	60bb      	str	r3, [r7, #8]
			listSET_LIST_ITEM_VALUE( &( pxCurrentTCB->xStateListItem ), xTimeToWake );
 800911a:	4b14      	ldr	r3, [pc, #80]	; (800916c <prvAddCurrentTaskToDelayedList+0x94>)
 800911c:	681b      	ldr	r3, [r3, #0]
 800911e:	68ba      	ldr	r2, [r7, #8]
 8009120:	605a      	str	r2, [r3, #4]
			if( xTimeToWake < xConstTickCount )
 8009122:	68ba      	ldr	r2, [r7, #8]
 8009124:	68fb      	ldr	r3, [r7, #12]
 8009126:	429a      	cmp	r2, r3
 8009128:	d209      	bcs.n	800913e <prvAddCurrentTaskToDelayedList+0x66>
				vListInsert( pxOverflowDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 800912a:	4b12      	ldr	r3, [pc, #72]	; (8009174 <prvAddCurrentTaskToDelayedList+0x9c>)
 800912c:	681a      	ldr	r2, [r3, #0]
 800912e:	4b0f      	ldr	r3, [pc, #60]	; (800916c <prvAddCurrentTaskToDelayedList+0x94>)
 8009130:	681b      	ldr	r3, [r3, #0]
 8009132:	3304      	adds	r3, #4
 8009134:	4619      	mov	r1, r3
 8009136:	4610      	mov	r0, r2
 8009138:	f7fd fefd 	bl	8006f36 <vListInsert>
}
 800913c:	e010      	b.n	8009160 <prvAddCurrentTaskToDelayedList+0x88>
				vListInsert( pxDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 800913e:	4b0e      	ldr	r3, [pc, #56]	; (8009178 <prvAddCurrentTaskToDelayedList+0xa0>)
 8009140:	681a      	ldr	r2, [r3, #0]
 8009142:	4b0a      	ldr	r3, [pc, #40]	; (800916c <prvAddCurrentTaskToDelayedList+0x94>)
 8009144:	681b      	ldr	r3, [r3, #0]
 8009146:	3304      	adds	r3, #4
 8009148:	4619      	mov	r1, r3
 800914a:	4610      	mov	r0, r2
 800914c:	f7fd fef3 	bl	8006f36 <vListInsert>
				if( xTimeToWake < xNextTaskUnblockTime )
 8009150:	4b0a      	ldr	r3, [pc, #40]	; (800917c <prvAddCurrentTaskToDelayedList+0xa4>)
 8009152:	681b      	ldr	r3, [r3, #0]
 8009154:	68ba      	ldr	r2, [r7, #8]
 8009156:	429a      	cmp	r2, r3
 8009158:	d202      	bcs.n	8009160 <prvAddCurrentTaskToDelayedList+0x88>
					xNextTaskUnblockTime = xTimeToWake;
 800915a:	4a08      	ldr	r2, [pc, #32]	; (800917c <prvAddCurrentTaskToDelayedList+0xa4>)
 800915c:	68bb      	ldr	r3, [r7, #8]
 800915e:	6013      	str	r3, [r2, #0]
}
 8009160:	bf00      	nop
 8009162:	3710      	adds	r7, #16
 8009164:	46bd      	mov	sp, r7
 8009166:	bd80      	pop	{r7, pc}
 8009168:	20000f50 	.word	0x20000f50
 800916c:	20000a78 	.word	0x20000a78
 8009170:	20000f38 	.word	0x20000f38
 8009174:	20000f08 	.word	0x20000f08
 8009178:	20000f04 	.word	0x20000f04
 800917c:	20000f6c 	.word	0x20000f6c

08009180 <xTimerCreateTimerTask>:
									TimerCallbackFunction_t pxCallbackFunction,
									Timer_t *pxNewTimer ) PRIVILEGED_FUNCTION;
/*-----------------------------------------------------------*/

BaseType_t xTimerCreateTimerTask( void )
{
 8009180:	b580      	push	{r7, lr}
 8009182:	b08a      	sub	sp, #40	; 0x28
 8009184:	af04      	add	r7, sp, #16
BaseType_t xReturn = pdFAIL;
 8009186:	2300      	movs	r3, #0
 8009188:	617b      	str	r3, [r7, #20]

	/* This function is called when the scheduler is started if
	configUSE_TIMERS is set to 1.  Check that the infrastructure used by the
	timer service task has been created/initialised.  If timers have already
	been created then the initialisation will already have been performed. */
	prvCheckForValidListAndQueue();
 800918a:	f000 fb07 	bl	800979c <prvCheckForValidListAndQueue>

	if( xTimerQueue != NULL )
 800918e:	4b1c      	ldr	r3, [pc, #112]	; (8009200 <xTimerCreateTimerTask+0x80>)
 8009190:	681b      	ldr	r3, [r3, #0]
 8009192:	2b00      	cmp	r3, #0
 8009194:	d021      	beq.n	80091da <xTimerCreateTimerTask+0x5a>
	{
		#if( configSUPPORT_STATIC_ALLOCATION == 1 )
		{
			StaticTask_t *pxTimerTaskTCBBuffer = NULL;
 8009196:	2300      	movs	r3, #0
 8009198:	60fb      	str	r3, [r7, #12]
			StackType_t *pxTimerTaskStackBuffer = NULL;
 800919a:	2300      	movs	r3, #0
 800919c:	60bb      	str	r3, [r7, #8]
			uint32_t ulTimerTaskStackSize;

			vApplicationGetTimerTaskMemory( &pxTimerTaskTCBBuffer, &pxTimerTaskStackBuffer, &ulTimerTaskStackSize );
 800919e:	1d3a      	adds	r2, r7, #4
 80091a0:	f107 0108 	add.w	r1, r7, #8
 80091a4:	f107 030c 	add.w	r3, r7, #12
 80091a8:	4618      	mov	r0, r3
 80091aa:	f7fd fe59 	bl	8006e60 <vApplicationGetTimerTaskMemory>
			xTimerTaskHandle = xTaskCreateStatic(	prvTimerTask,
 80091ae:	6879      	ldr	r1, [r7, #4]
 80091b0:	68bb      	ldr	r3, [r7, #8]
 80091b2:	68fa      	ldr	r2, [r7, #12]
 80091b4:	9202      	str	r2, [sp, #8]
 80091b6:	9301      	str	r3, [sp, #4]
 80091b8:	2302      	movs	r3, #2
 80091ba:	9300      	str	r3, [sp, #0]
 80091bc:	2300      	movs	r3, #0
 80091be:	460a      	mov	r2, r1
 80091c0:	4910      	ldr	r1, [pc, #64]	; (8009204 <xTimerCreateTimerTask+0x84>)
 80091c2:	4811      	ldr	r0, [pc, #68]	; (8009208 <xTimerCreateTimerTask+0x88>)
 80091c4:	f7fe ff28 	bl	8008018 <xTaskCreateStatic>
 80091c8:	4603      	mov	r3, r0
 80091ca:	4a10      	ldr	r2, [pc, #64]	; (800920c <xTimerCreateTimerTask+0x8c>)
 80091cc:	6013      	str	r3, [r2, #0]
													NULL,
													( ( UBaseType_t ) configTIMER_TASK_PRIORITY ) | portPRIVILEGE_BIT,
													pxTimerTaskStackBuffer,
													pxTimerTaskTCBBuffer );

			if( xTimerTaskHandle != NULL )
 80091ce:	4b0f      	ldr	r3, [pc, #60]	; (800920c <xTimerCreateTimerTask+0x8c>)
 80091d0:	681b      	ldr	r3, [r3, #0]
 80091d2:	2b00      	cmp	r3, #0
 80091d4:	d001      	beq.n	80091da <xTimerCreateTimerTask+0x5a>
			{
				xReturn = pdPASS;
 80091d6:	2301      	movs	r3, #1
 80091d8:	617b      	str	r3, [r7, #20]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	configASSERT( xReturn );
 80091da:	697b      	ldr	r3, [r7, #20]
 80091dc:	2b00      	cmp	r3, #0
 80091de:	d10a      	bne.n	80091f6 <xTimerCreateTimerTask+0x76>
	__asm volatile
 80091e0:	f04f 0350 	mov.w	r3, #80	; 0x50
 80091e4:	f383 8811 	msr	BASEPRI, r3
 80091e8:	f3bf 8f6f 	isb	sy
 80091ec:	f3bf 8f4f 	dsb	sy
 80091f0:	613b      	str	r3, [r7, #16]
}
 80091f2:	bf00      	nop
 80091f4:	e7fe      	b.n	80091f4 <xTimerCreateTimerTask+0x74>
	return xReturn;
 80091f6:	697b      	ldr	r3, [r7, #20]
}
 80091f8:	4618      	mov	r0, r3
 80091fa:	3718      	adds	r7, #24
 80091fc:	46bd      	mov	sp, r7
 80091fe:	bd80      	pop	{r7, pc}
 8009200:	20000fa8 	.word	0x20000fa8
 8009204:	0800b764 	.word	0x0800b764
 8009208:	08009345 	.word	0x08009345
 800920c:	20000fac 	.word	0x20000fac

08009210 <xTimerGenericCommand>:
	}
}
/*-----------------------------------------------------------*/

BaseType_t xTimerGenericCommand( TimerHandle_t xTimer, const BaseType_t xCommandID, const TickType_t xOptionalValue, BaseType_t * const pxHigherPriorityTaskWoken, const TickType_t xTicksToWait )
{
 8009210:	b580      	push	{r7, lr}
 8009212:	b08a      	sub	sp, #40	; 0x28
 8009214:	af00      	add	r7, sp, #0
 8009216:	60f8      	str	r0, [r7, #12]
 8009218:	60b9      	str	r1, [r7, #8]
 800921a:	607a      	str	r2, [r7, #4]
 800921c:	603b      	str	r3, [r7, #0]
BaseType_t xReturn = pdFAIL;
 800921e:	2300      	movs	r3, #0
 8009220:	627b      	str	r3, [r7, #36]	; 0x24
DaemonTaskMessage_t xMessage;

	configASSERT( xTimer );
 8009222:	68fb      	ldr	r3, [r7, #12]
 8009224:	2b00      	cmp	r3, #0
 8009226:	d10a      	bne.n	800923e <xTimerGenericCommand+0x2e>
	__asm volatile
 8009228:	f04f 0350 	mov.w	r3, #80	; 0x50
 800922c:	f383 8811 	msr	BASEPRI, r3
 8009230:	f3bf 8f6f 	isb	sy
 8009234:	f3bf 8f4f 	dsb	sy
 8009238:	623b      	str	r3, [r7, #32]
}
 800923a:	bf00      	nop
 800923c:	e7fe      	b.n	800923c <xTimerGenericCommand+0x2c>

	/* Send a message to the timer service task to perform a particular action
	on a particular timer definition. */
	if( xTimerQueue != NULL )
 800923e:	4b1a      	ldr	r3, [pc, #104]	; (80092a8 <xTimerGenericCommand+0x98>)
 8009240:	681b      	ldr	r3, [r3, #0]
 8009242:	2b00      	cmp	r3, #0
 8009244:	d02a      	beq.n	800929c <xTimerGenericCommand+0x8c>
	{
		/* Send a command to the timer service task to start the xTimer timer. */
		xMessage.xMessageID = xCommandID;
 8009246:	68bb      	ldr	r3, [r7, #8]
 8009248:	613b      	str	r3, [r7, #16]
		xMessage.u.xTimerParameters.xMessageValue = xOptionalValue;
 800924a:	687b      	ldr	r3, [r7, #4]
 800924c:	617b      	str	r3, [r7, #20]
		xMessage.u.xTimerParameters.pxTimer = xTimer;
 800924e:	68fb      	ldr	r3, [r7, #12]
 8009250:	61bb      	str	r3, [r7, #24]

		if( xCommandID < tmrFIRST_FROM_ISR_COMMAND )
 8009252:	68bb      	ldr	r3, [r7, #8]
 8009254:	2b05      	cmp	r3, #5
 8009256:	dc18      	bgt.n	800928a <xTimerGenericCommand+0x7a>
		{
			if( xTaskGetSchedulerState() == taskSCHEDULER_RUNNING )
 8009258:	f7ff fdb4 	bl	8008dc4 <xTaskGetSchedulerState>
 800925c:	4603      	mov	r3, r0
 800925e:	2b02      	cmp	r3, #2
 8009260:	d109      	bne.n	8009276 <xTimerGenericCommand+0x66>
			{
				xReturn = xQueueSendToBack( xTimerQueue, &xMessage, xTicksToWait );
 8009262:	4b11      	ldr	r3, [pc, #68]	; (80092a8 <xTimerGenericCommand+0x98>)
 8009264:	6818      	ldr	r0, [r3, #0]
 8009266:	f107 0110 	add.w	r1, r7, #16
 800926a:	2300      	movs	r3, #0
 800926c:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800926e:	f7fe f86d 	bl	800734c <xQueueGenericSend>
 8009272:	6278      	str	r0, [r7, #36]	; 0x24
 8009274:	e012      	b.n	800929c <xTimerGenericCommand+0x8c>
			}
			else
			{
				xReturn = xQueueSendToBack( xTimerQueue, &xMessage, tmrNO_DELAY );
 8009276:	4b0c      	ldr	r3, [pc, #48]	; (80092a8 <xTimerGenericCommand+0x98>)
 8009278:	6818      	ldr	r0, [r3, #0]
 800927a:	f107 0110 	add.w	r1, r7, #16
 800927e:	2300      	movs	r3, #0
 8009280:	2200      	movs	r2, #0
 8009282:	f7fe f863 	bl	800734c <xQueueGenericSend>
 8009286:	6278      	str	r0, [r7, #36]	; 0x24
 8009288:	e008      	b.n	800929c <xTimerGenericCommand+0x8c>
			}
		}
		else
		{
			xReturn = xQueueSendToBackFromISR( xTimerQueue, &xMessage, pxHigherPriorityTaskWoken );
 800928a:	4b07      	ldr	r3, [pc, #28]	; (80092a8 <xTimerGenericCommand+0x98>)
 800928c:	6818      	ldr	r0, [r3, #0]
 800928e:	f107 0110 	add.w	r1, r7, #16
 8009292:	2300      	movs	r3, #0
 8009294:	683a      	ldr	r2, [r7, #0]
 8009296:	f7fe f957 	bl	8007548 <xQueueGenericSendFromISR>
 800929a:	6278      	str	r0, [r7, #36]	; 0x24
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	return xReturn;
 800929c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
}
 800929e:	4618      	mov	r0, r3
 80092a0:	3728      	adds	r7, #40	; 0x28
 80092a2:	46bd      	mov	sp, r7
 80092a4:	bd80      	pop	{r7, pc}
 80092a6:	bf00      	nop
 80092a8:	20000fa8 	.word	0x20000fa8

080092ac <prvProcessExpiredTimer>:
	return pxTimer->pcTimerName;
}
/*-----------------------------------------------------------*/

static void prvProcessExpiredTimer( const TickType_t xNextExpireTime, const TickType_t xTimeNow )
{
 80092ac:	b580      	push	{r7, lr}
 80092ae:	b088      	sub	sp, #32
 80092b0:	af02      	add	r7, sp, #8
 80092b2:	6078      	str	r0, [r7, #4]
 80092b4:	6039      	str	r1, [r7, #0]
BaseType_t xResult;
Timer_t * const pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList ); /*lint !e9087 !e9079 void * is used as this macro is used with tasks and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 80092b6:	4b22      	ldr	r3, [pc, #136]	; (8009340 <prvProcessExpiredTimer+0x94>)
 80092b8:	681b      	ldr	r3, [r3, #0]
 80092ba:	68db      	ldr	r3, [r3, #12]
 80092bc:	68db      	ldr	r3, [r3, #12]
 80092be:	617b      	str	r3, [r7, #20]

	/* Remove the timer from the list of active timers.  A check has already
	been performed to ensure the list is not empty. */
	( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 80092c0:	697b      	ldr	r3, [r7, #20]
 80092c2:	3304      	adds	r3, #4
 80092c4:	4618      	mov	r0, r3
 80092c6:	f7fd fe6f 	bl	8006fa8 <uxListRemove>
	traceTIMER_EXPIRED( pxTimer );

	/* If the timer is an auto-reload timer then calculate the next
	expiry time and re-insert the timer in the list of active timers. */
	if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 80092ca:	697b      	ldr	r3, [r7, #20]
 80092cc:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 80092d0:	f003 0304 	and.w	r3, r3, #4
 80092d4:	2b00      	cmp	r3, #0
 80092d6:	d022      	beq.n	800931e <prvProcessExpiredTimer+0x72>
	{
		/* The timer is inserted into a list using a time relative to anything
		other than the current time.  It will therefore be inserted into the
		correct list relative to the time this task thinks it is now. */
		if( prvInsertTimerInActiveList( pxTimer, ( xNextExpireTime + pxTimer->xTimerPeriodInTicks ), xTimeNow, xNextExpireTime ) != pdFALSE )
 80092d8:	697b      	ldr	r3, [r7, #20]
 80092da:	699a      	ldr	r2, [r3, #24]
 80092dc:	687b      	ldr	r3, [r7, #4]
 80092de:	18d1      	adds	r1, r2, r3
 80092e0:	687b      	ldr	r3, [r7, #4]
 80092e2:	683a      	ldr	r2, [r7, #0]
 80092e4:	6978      	ldr	r0, [r7, #20]
 80092e6:	f000 f8d1 	bl	800948c <prvInsertTimerInActiveList>
 80092ea:	4603      	mov	r3, r0
 80092ec:	2b00      	cmp	r3, #0
 80092ee:	d01f      	beq.n	8009330 <prvProcessExpiredTimer+0x84>
		{
			/* The timer expired before it was added to the active timer
			list.  Reload it now.  */
			xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
 80092f0:	2300      	movs	r3, #0
 80092f2:	9300      	str	r3, [sp, #0]
 80092f4:	2300      	movs	r3, #0
 80092f6:	687a      	ldr	r2, [r7, #4]
 80092f8:	2100      	movs	r1, #0
 80092fa:	6978      	ldr	r0, [r7, #20]
 80092fc:	f7ff ff88 	bl	8009210 <xTimerGenericCommand>
 8009300:	6138      	str	r0, [r7, #16]
			configASSERT( xResult );
 8009302:	693b      	ldr	r3, [r7, #16]
 8009304:	2b00      	cmp	r3, #0
 8009306:	d113      	bne.n	8009330 <prvProcessExpiredTimer+0x84>
	__asm volatile
 8009308:	f04f 0350 	mov.w	r3, #80	; 0x50
 800930c:	f383 8811 	msr	BASEPRI, r3
 8009310:	f3bf 8f6f 	isb	sy
 8009314:	f3bf 8f4f 	dsb	sy
 8009318:	60fb      	str	r3, [r7, #12]
}
 800931a:	bf00      	nop
 800931c:	e7fe      	b.n	800931c <prvProcessExpiredTimer+0x70>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	else
	{
		pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 800931e:	697b      	ldr	r3, [r7, #20]
 8009320:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8009324:	f023 0301 	bic.w	r3, r3, #1
 8009328:	b2da      	uxtb	r2, r3
 800932a:	697b      	ldr	r3, [r7, #20]
 800932c:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
		mtCOVERAGE_TEST_MARKER();
	}

	/* Call the timer callback. */
	pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 8009330:	697b      	ldr	r3, [r7, #20]
 8009332:	6a1b      	ldr	r3, [r3, #32]
 8009334:	6978      	ldr	r0, [r7, #20]
 8009336:	4798      	blx	r3
}
 8009338:	bf00      	nop
 800933a:	3718      	adds	r7, #24
 800933c:	46bd      	mov	sp, r7
 800933e:	bd80      	pop	{r7, pc}
 8009340:	20000fa0 	.word	0x20000fa0

08009344 <prvTimerTask>:
/*-----------------------------------------------------------*/

static portTASK_FUNCTION( prvTimerTask, pvParameters )
{
 8009344:	b580      	push	{r7, lr}
 8009346:	b084      	sub	sp, #16
 8009348:	af00      	add	r7, sp, #0
 800934a:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* Query the timers list to see if it contains any timers, and if so,
		obtain the time at which the next timer will expire. */
		xNextExpireTime = prvGetNextExpireTime( &xListWasEmpty );
 800934c:	f107 0308 	add.w	r3, r7, #8
 8009350:	4618      	mov	r0, r3
 8009352:	f000 f857 	bl	8009404 <prvGetNextExpireTime>
 8009356:	60f8      	str	r0, [r7, #12]

		/* If a timer has expired, process it.  Otherwise, block this task
		until either a timer does expire, or a command is received. */
		prvProcessTimerOrBlockTask( xNextExpireTime, xListWasEmpty );
 8009358:	68bb      	ldr	r3, [r7, #8]
 800935a:	4619      	mov	r1, r3
 800935c:	68f8      	ldr	r0, [r7, #12]
 800935e:	f000 f803 	bl	8009368 <prvProcessTimerOrBlockTask>

		/* Empty the command queue. */
		prvProcessReceivedCommands();
 8009362:	f000 f8d5 	bl	8009510 <prvProcessReceivedCommands>
		xNextExpireTime = prvGetNextExpireTime( &xListWasEmpty );
 8009366:	e7f1      	b.n	800934c <prvTimerTask+0x8>

08009368 <prvProcessTimerOrBlockTask>:
	}
}
/*-----------------------------------------------------------*/

static void prvProcessTimerOrBlockTask( const TickType_t xNextExpireTime, BaseType_t xListWasEmpty )
{
 8009368:	b580      	push	{r7, lr}
 800936a:	b084      	sub	sp, #16
 800936c:	af00      	add	r7, sp, #0
 800936e:	6078      	str	r0, [r7, #4]
 8009370:	6039      	str	r1, [r7, #0]
TickType_t xTimeNow;
BaseType_t xTimerListsWereSwitched;

	vTaskSuspendAll();
 8009372:	f7ff f91f 	bl	80085b4 <vTaskSuspendAll>
		/* Obtain the time now to make an assessment as to whether the timer
		has expired or not.  If obtaining the time causes the lists to switch
		then don't process this timer as any timers that remained in the list
		when the lists were switched will have been processed within the
		prvSampleTimeNow() function. */
		xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
 8009376:	f107 0308 	add.w	r3, r7, #8
 800937a:	4618      	mov	r0, r3
 800937c:	f000 f866 	bl	800944c <prvSampleTimeNow>
 8009380:	60f8      	str	r0, [r7, #12]
		if( xTimerListsWereSwitched == pdFALSE )
 8009382:	68bb      	ldr	r3, [r7, #8]
 8009384:	2b00      	cmp	r3, #0
 8009386:	d130      	bne.n	80093ea <prvProcessTimerOrBlockTask+0x82>
		{
			/* The tick count has not overflowed, has the timer expired? */
			if( ( xListWasEmpty == pdFALSE ) && ( xNextExpireTime <= xTimeNow ) )
 8009388:	683b      	ldr	r3, [r7, #0]
 800938a:	2b00      	cmp	r3, #0
 800938c:	d10a      	bne.n	80093a4 <prvProcessTimerOrBlockTask+0x3c>
 800938e:	687a      	ldr	r2, [r7, #4]
 8009390:	68fb      	ldr	r3, [r7, #12]
 8009392:	429a      	cmp	r2, r3
 8009394:	d806      	bhi.n	80093a4 <prvProcessTimerOrBlockTask+0x3c>
			{
				( void ) xTaskResumeAll();
 8009396:	f7ff f91b 	bl	80085d0 <xTaskResumeAll>
				prvProcessExpiredTimer( xNextExpireTime, xTimeNow );
 800939a:	68f9      	ldr	r1, [r7, #12]
 800939c:	6878      	ldr	r0, [r7, #4]
 800939e:	f7ff ff85 	bl	80092ac <prvProcessExpiredTimer>
		else
		{
			( void ) xTaskResumeAll();
		}
	}
}
 80093a2:	e024      	b.n	80093ee <prvProcessTimerOrBlockTask+0x86>
				if( xListWasEmpty != pdFALSE )
 80093a4:	683b      	ldr	r3, [r7, #0]
 80093a6:	2b00      	cmp	r3, #0
 80093a8:	d008      	beq.n	80093bc <prvProcessTimerOrBlockTask+0x54>
					xListWasEmpty = listLIST_IS_EMPTY( pxOverflowTimerList );
 80093aa:	4b13      	ldr	r3, [pc, #76]	; (80093f8 <prvProcessTimerOrBlockTask+0x90>)
 80093ac:	681b      	ldr	r3, [r3, #0]
 80093ae:	681b      	ldr	r3, [r3, #0]
 80093b0:	2b00      	cmp	r3, #0
 80093b2:	d101      	bne.n	80093b8 <prvProcessTimerOrBlockTask+0x50>
 80093b4:	2301      	movs	r3, #1
 80093b6:	e000      	b.n	80093ba <prvProcessTimerOrBlockTask+0x52>
 80093b8:	2300      	movs	r3, #0
 80093ba:	603b      	str	r3, [r7, #0]
				vQueueWaitForMessageRestricted( xTimerQueue, ( xNextExpireTime - xTimeNow ), xListWasEmpty );
 80093bc:	4b0f      	ldr	r3, [pc, #60]	; (80093fc <prvProcessTimerOrBlockTask+0x94>)
 80093be:	6818      	ldr	r0, [r3, #0]
 80093c0:	687a      	ldr	r2, [r7, #4]
 80093c2:	68fb      	ldr	r3, [r7, #12]
 80093c4:	1ad3      	subs	r3, r2, r3
 80093c6:	683a      	ldr	r2, [r7, #0]
 80093c8:	4619      	mov	r1, r3
 80093ca:	f7fe fdf1 	bl	8007fb0 <vQueueWaitForMessageRestricted>
				if( xTaskResumeAll() == pdFALSE )
 80093ce:	f7ff f8ff 	bl	80085d0 <xTaskResumeAll>
 80093d2:	4603      	mov	r3, r0
 80093d4:	2b00      	cmp	r3, #0
 80093d6:	d10a      	bne.n	80093ee <prvProcessTimerOrBlockTask+0x86>
					portYIELD_WITHIN_API();
 80093d8:	4b09      	ldr	r3, [pc, #36]	; (8009400 <prvProcessTimerOrBlockTask+0x98>)
 80093da:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80093de:	601a      	str	r2, [r3, #0]
 80093e0:	f3bf 8f4f 	dsb	sy
 80093e4:	f3bf 8f6f 	isb	sy
}
 80093e8:	e001      	b.n	80093ee <prvProcessTimerOrBlockTask+0x86>
			( void ) xTaskResumeAll();
 80093ea:	f7ff f8f1 	bl	80085d0 <xTaskResumeAll>
}
 80093ee:	bf00      	nop
 80093f0:	3710      	adds	r7, #16
 80093f2:	46bd      	mov	sp, r7
 80093f4:	bd80      	pop	{r7, pc}
 80093f6:	bf00      	nop
 80093f8:	20000fa4 	.word	0x20000fa4
 80093fc:	20000fa8 	.word	0x20000fa8
 8009400:	e000ed04 	.word	0xe000ed04

08009404 <prvGetNextExpireTime>:
/*-----------------------------------------------------------*/

static TickType_t prvGetNextExpireTime( BaseType_t * const pxListWasEmpty )
{
 8009404:	b480      	push	{r7}
 8009406:	b085      	sub	sp, #20
 8009408:	af00      	add	r7, sp, #0
 800940a:	6078      	str	r0, [r7, #4]
	the timer with the nearest expiry time will expire.  If there are no
	active timers then just set the next expire time to 0.  That will cause
	this task to unblock when the tick count overflows, at which point the
	timer lists will be switched and the next expiry time can be
	re-assessed.  */
	*pxListWasEmpty = listLIST_IS_EMPTY( pxCurrentTimerList );
 800940c:	4b0e      	ldr	r3, [pc, #56]	; (8009448 <prvGetNextExpireTime+0x44>)
 800940e:	681b      	ldr	r3, [r3, #0]
 8009410:	681b      	ldr	r3, [r3, #0]
 8009412:	2b00      	cmp	r3, #0
 8009414:	d101      	bne.n	800941a <prvGetNextExpireTime+0x16>
 8009416:	2201      	movs	r2, #1
 8009418:	e000      	b.n	800941c <prvGetNextExpireTime+0x18>
 800941a:	2200      	movs	r2, #0
 800941c:	687b      	ldr	r3, [r7, #4]
 800941e:	601a      	str	r2, [r3, #0]
	if( *pxListWasEmpty == pdFALSE )
 8009420:	687b      	ldr	r3, [r7, #4]
 8009422:	681b      	ldr	r3, [r3, #0]
 8009424:	2b00      	cmp	r3, #0
 8009426:	d105      	bne.n	8009434 <prvGetNextExpireTime+0x30>
	{
		xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 8009428:	4b07      	ldr	r3, [pc, #28]	; (8009448 <prvGetNextExpireTime+0x44>)
 800942a:	681b      	ldr	r3, [r3, #0]
 800942c:	68db      	ldr	r3, [r3, #12]
 800942e:	681b      	ldr	r3, [r3, #0]
 8009430:	60fb      	str	r3, [r7, #12]
 8009432:	e001      	b.n	8009438 <prvGetNextExpireTime+0x34>
	}
	else
	{
		/* Ensure the task unblocks when the tick count rolls over. */
		xNextExpireTime = ( TickType_t ) 0U;
 8009434:	2300      	movs	r3, #0
 8009436:	60fb      	str	r3, [r7, #12]
	}

	return xNextExpireTime;
 8009438:	68fb      	ldr	r3, [r7, #12]
}
 800943a:	4618      	mov	r0, r3
 800943c:	3714      	adds	r7, #20
 800943e:	46bd      	mov	sp, r7
 8009440:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009444:	4770      	bx	lr
 8009446:	bf00      	nop
 8009448:	20000fa0 	.word	0x20000fa0

0800944c <prvSampleTimeNow>:
/*-----------------------------------------------------------*/

static TickType_t prvSampleTimeNow( BaseType_t * const pxTimerListsWereSwitched )
{
 800944c:	b580      	push	{r7, lr}
 800944e:	b084      	sub	sp, #16
 8009450:	af00      	add	r7, sp, #0
 8009452:	6078      	str	r0, [r7, #4]
TickType_t xTimeNow;
PRIVILEGED_DATA static TickType_t xLastTime = ( TickType_t ) 0U; /*lint !e956 Variable is only accessible to one task. */

	xTimeNow = xTaskGetTickCount();
 8009454:	f7ff f95a 	bl	800870c <xTaskGetTickCount>
 8009458:	60f8      	str	r0, [r7, #12]

	if( xTimeNow < xLastTime )
 800945a:	4b0b      	ldr	r3, [pc, #44]	; (8009488 <prvSampleTimeNow+0x3c>)
 800945c:	681b      	ldr	r3, [r3, #0]
 800945e:	68fa      	ldr	r2, [r7, #12]
 8009460:	429a      	cmp	r2, r3
 8009462:	d205      	bcs.n	8009470 <prvSampleTimeNow+0x24>
	{
		prvSwitchTimerLists();
 8009464:	f000 f936 	bl	80096d4 <prvSwitchTimerLists>
		*pxTimerListsWereSwitched = pdTRUE;
 8009468:	687b      	ldr	r3, [r7, #4]
 800946a:	2201      	movs	r2, #1
 800946c:	601a      	str	r2, [r3, #0]
 800946e:	e002      	b.n	8009476 <prvSampleTimeNow+0x2a>
	}
	else
	{
		*pxTimerListsWereSwitched = pdFALSE;
 8009470:	687b      	ldr	r3, [r7, #4]
 8009472:	2200      	movs	r2, #0
 8009474:	601a      	str	r2, [r3, #0]
	}

	xLastTime = xTimeNow;
 8009476:	4a04      	ldr	r2, [pc, #16]	; (8009488 <prvSampleTimeNow+0x3c>)
 8009478:	68fb      	ldr	r3, [r7, #12]
 800947a:	6013      	str	r3, [r2, #0]

	return xTimeNow;
 800947c:	68fb      	ldr	r3, [r7, #12]
}
 800947e:	4618      	mov	r0, r3
 8009480:	3710      	adds	r7, #16
 8009482:	46bd      	mov	sp, r7
 8009484:	bd80      	pop	{r7, pc}
 8009486:	bf00      	nop
 8009488:	20000fb0 	.word	0x20000fb0

0800948c <prvInsertTimerInActiveList>:
/*-----------------------------------------------------------*/

static BaseType_t prvInsertTimerInActiveList( Timer_t * const pxTimer, const TickType_t xNextExpiryTime, const TickType_t xTimeNow, const TickType_t xCommandTime )
{
 800948c:	b580      	push	{r7, lr}
 800948e:	b086      	sub	sp, #24
 8009490:	af00      	add	r7, sp, #0
 8009492:	60f8      	str	r0, [r7, #12]
 8009494:	60b9      	str	r1, [r7, #8]
 8009496:	607a      	str	r2, [r7, #4]
 8009498:	603b      	str	r3, [r7, #0]
BaseType_t xProcessTimerNow = pdFALSE;
 800949a:	2300      	movs	r3, #0
 800949c:	617b      	str	r3, [r7, #20]

	listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xNextExpiryTime );
 800949e:	68fb      	ldr	r3, [r7, #12]
 80094a0:	68ba      	ldr	r2, [r7, #8]
 80094a2:	605a      	str	r2, [r3, #4]
	listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
 80094a4:	68fb      	ldr	r3, [r7, #12]
 80094a6:	68fa      	ldr	r2, [r7, #12]
 80094a8:	611a      	str	r2, [r3, #16]

	if( xNextExpiryTime <= xTimeNow )
 80094aa:	68ba      	ldr	r2, [r7, #8]
 80094ac:	687b      	ldr	r3, [r7, #4]
 80094ae:	429a      	cmp	r2, r3
 80094b0:	d812      	bhi.n	80094d8 <prvInsertTimerInActiveList+0x4c>
	{
		/* Has the expiry time elapsed between the command to start/reset a
		timer was issued, and the time the command was processed? */
		if( ( ( TickType_t ) ( xTimeNow - xCommandTime ) ) >= pxTimer->xTimerPeriodInTicks ) /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 80094b2:	687a      	ldr	r2, [r7, #4]
 80094b4:	683b      	ldr	r3, [r7, #0]
 80094b6:	1ad2      	subs	r2, r2, r3
 80094b8:	68fb      	ldr	r3, [r7, #12]
 80094ba:	699b      	ldr	r3, [r3, #24]
 80094bc:	429a      	cmp	r2, r3
 80094be:	d302      	bcc.n	80094c6 <prvInsertTimerInActiveList+0x3a>
		{
			/* The time between a command being issued and the command being
			processed actually exceeds the timers period.  */
			xProcessTimerNow = pdTRUE;
 80094c0:	2301      	movs	r3, #1
 80094c2:	617b      	str	r3, [r7, #20]
 80094c4:	e01b      	b.n	80094fe <prvInsertTimerInActiveList+0x72>
		}
		else
		{
			vListInsert( pxOverflowTimerList, &( pxTimer->xTimerListItem ) );
 80094c6:	4b10      	ldr	r3, [pc, #64]	; (8009508 <prvInsertTimerInActiveList+0x7c>)
 80094c8:	681a      	ldr	r2, [r3, #0]
 80094ca:	68fb      	ldr	r3, [r7, #12]
 80094cc:	3304      	adds	r3, #4
 80094ce:	4619      	mov	r1, r3
 80094d0:	4610      	mov	r0, r2
 80094d2:	f7fd fd30 	bl	8006f36 <vListInsert>
 80094d6:	e012      	b.n	80094fe <prvInsertTimerInActiveList+0x72>
		}
	}
	else
	{
		if( ( xTimeNow < xCommandTime ) && ( xNextExpiryTime >= xCommandTime ) )
 80094d8:	687a      	ldr	r2, [r7, #4]
 80094da:	683b      	ldr	r3, [r7, #0]
 80094dc:	429a      	cmp	r2, r3
 80094de:	d206      	bcs.n	80094ee <prvInsertTimerInActiveList+0x62>
 80094e0:	68ba      	ldr	r2, [r7, #8]
 80094e2:	683b      	ldr	r3, [r7, #0]
 80094e4:	429a      	cmp	r2, r3
 80094e6:	d302      	bcc.n	80094ee <prvInsertTimerInActiveList+0x62>
		{
			/* If, since the command was issued, the tick count has overflowed
			but the expiry time has not, then the timer must have already passed
			its expiry time and should be processed immediately. */
			xProcessTimerNow = pdTRUE;
 80094e8:	2301      	movs	r3, #1
 80094ea:	617b      	str	r3, [r7, #20]
 80094ec:	e007      	b.n	80094fe <prvInsertTimerInActiveList+0x72>
		}
		else
		{
			vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
 80094ee:	4b07      	ldr	r3, [pc, #28]	; (800950c <prvInsertTimerInActiveList+0x80>)
 80094f0:	681a      	ldr	r2, [r3, #0]
 80094f2:	68fb      	ldr	r3, [r7, #12]
 80094f4:	3304      	adds	r3, #4
 80094f6:	4619      	mov	r1, r3
 80094f8:	4610      	mov	r0, r2
 80094fa:	f7fd fd1c 	bl	8006f36 <vListInsert>
		}
	}

	return xProcessTimerNow;
 80094fe:	697b      	ldr	r3, [r7, #20]
}
 8009500:	4618      	mov	r0, r3
 8009502:	3718      	adds	r7, #24
 8009504:	46bd      	mov	sp, r7
 8009506:	bd80      	pop	{r7, pc}
 8009508:	20000fa4 	.word	0x20000fa4
 800950c:	20000fa0 	.word	0x20000fa0

08009510 <prvProcessReceivedCommands>:
/*-----------------------------------------------------------*/

static void	prvProcessReceivedCommands( void )
{
 8009510:	b580      	push	{r7, lr}
 8009512:	b08e      	sub	sp, #56	; 0x38
 8009514:	af02      	add	r7, sp, #8
DaemonTaskMessage_t xMessage;
Timer_t *pxTimer;
BaseType_t xTimerListsWereSwitched, xResult;
TickType_t xTimeNow;

	while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
 8009516:	e0ca      	b.n	80096ae <prvProcessReceivedCommands+0x19e>
	{
		#if ( INCLUDE_xTimerPendFunctionCall == 1 )
		{
			/* Negative commands are pended function calls rather than timer
			commands. */
			if( xMessage.xMessageID < ( BaseType_t ) 0 )
 8009518:	687b      	ldr	r3, [r7, #4]
 800951a:	2b00      	cmp	r3, #0
 800951c:	da18      	bge.n	8009550 <prvProcessReceivedCommands+0x40>
			{
				const CallbackParameters_t * const pxCallback = &( xMessage.u.xCallbackParameters );
 800951e:	1d3b      	adds	r3, r7, #4
 8009520:	3304      	adds	r3, #4
 8009522:	62fb      	str	r3, [r7, #44]	; 0x2c

				/* The timer uses the xCallbackParameters member to request a
				callback be executed.  Check the callback is not NULL. */
				configASSERT( pxCallback );
 8009524:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8009526:	2b00      	cmp	r3, #0
 8009528:	d10a      	bne.n	8009540 <prvProcessReceivedCommands+0x30>
	__asm volatile
 800952a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800952e:	f383 8811 	msr	BASEPRI, r3
 8009532:	f3bf 8f6f 	isb	sy
 8009536:	f3bf 8f4f 	dsb	sy
 800953a:	61fb      	str	r3, [r7, #28]
}
 800953c:	bf00      	nop
 800953e:	e7fe      	b.n	800953e <prvProcessReceivedCommands+0x2e>

				/* Call the function. */
				pxCallback->pxCallbackFunction( pxCallback->pvParameter1, pxCallback->ulParameter2 );
 8009540:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8009542:	681b      	ldr	r3, [r3, #0]
 8009544:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8009546:	6850      	ldr	r0, [r2, #4]
 8009548:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800954a:	6892      	ldr	r2, [r2, #8]
 800954c:	4611      	mov	r1, r2
 800954e:	4798      	blx	r3
		}
		#endif /* INCLUDE_xTimerPendFunctionCall */

		/* Commands that are positive are timer commands rather than pended
		function calls. */
		if( xMessage.xMessageID >= ( BaseType_t ) 0 )
 8009550:	687b      	ldr	r3, [r7, #4]
 8009552:	2b00      	cmp	r3, #0
 8009554:	f2c0 80aa 	blt.w	80096ac <prvProcessReceivedCommands+0x19c>
		{
			/* The messages uses the xTimerParameters member to work on a
			software timer. */
			pxTimer = xMessage.u.xTimerParameters.pxTimer;
 8009558:	68fb      	ldr	r3, [r7, #12]
 800955a:	62bb      	str	r3, [r7, #40]	; 0x28

			if( listIS_CONTAINED_WITHIN( NULL, &( pxTimer->xTimerListItem ) ) == pdFALSE ) /*lint !e961. The cast is only redundant when NULL is passed into the macro. */
 800955c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800955e:	695b      	ldr	r3, [r3, #20]
 8009560:	2b00      	cmp	r3, #0
 8009562:	d004      	beq.n	800956e <prvProcessReceivedCommands+0x5e>
			{
				/* The timer is in a list, remove it. */
				( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 8009564:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8009566:	3304      	adds	r3, #4
 8009568:	4618      	mov	r0, r3
 800956a:	f7fd fd1d 	bl	8006fa8 <uxListRemove>
			it must be present in the function call.  prvSampleTimeNow() must be
			called after the message is received from xTimerQueue so there is no
			possibility of a higher priority task adding a message to the message
			queue with a time that is ahead of the timer daemon task (because it
			pre-empted the timer daemon task after the xTimeNow value was set). */
			xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
 800956e:	463b      	mov	r3, r7
 8009570:	4618      	mov	r0, r3
 8009572:	f7ff ff6b 	bl	800944c <prvSampleTimeNow>
 8009576:	6278      	str	r0, [r7, #36]	; 0x24

			switch( xMessage.xMessageID )
 8009578:	687b      	ldr	r3, [r7, #4]
 800957a:	2b09      	cmp	r3, #9
 800957c:	f200 8097 	bhi.w	80096ae <prvProcessReceivedCommands+0x19e>
 8009580:	a201      	add	r2, pc, #4	; (adr r2, 8009588 <prvProcessReceivedCommands+0x78>)
 8009582:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8009586:	bf00      	nop
 8009588:	080095b1 	.word	0x080095b1
 800958c:	080095b1 	.word	0x080095b1
 8009590:	080095b1 	.word	0x080095b1
 8009594:	08009625 	.word	0x08009625
 8009598:	08009639 	.word	0x08009639
 800959c:	08009683 	.word	0x08009683
 80095a0:	080095b1 	.word	0x080095b1
 80095a4:	080095b1 	.word	0x080095b1
 80095a8:	08009625 	.word	0x08009625
 80095ac:	08009639 	.word	0x08009639
				case tmrCOMMAND_START_FROM_ISR :
				case tmrCOMMAND_RESET :
				case tmrCOMMAND_RESET_FROM_ISR :
				case tmrCOMMAND_START_DONT_TRACE :
					/* Start or restart a timer. */
					pxTimer->ucStatus |= tmrSTATUS_IS_ACTIVE;
 80095b0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80095b2:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 80095b6:	f043 0301 	orr.w	r3, r3, #1
 80095ba:	b2da      	uxtb	r2, r3
 80095bc:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80095be:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
					if( prvInsertTimerInActiveList( pxTimer,  xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, xTimeNow, xMessage.u.xTimerParameters.xMessageValue ) != pdFALSE )
 80095c2:	68ba      	ldr	r2, [r7, #8]
 80095c4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80095c6:	699b      	ldr	r3, [r3, #24]
 80095c8:	18d1      	adds	r1, r2, r3
 80095ca:	68bb      	ldr	r3, [r7, #8]
 80095cc:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80095ce:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 80095d0:	f7ff ff5c 	bl	800948c <prvInsertTimerInActiveList>
 80095d4:	4603      	mov	r3, r0
 80095d6:	2b00      	cmp	r3, #0
 80095d8:	d069      	beq.n	80096ae <prvProcessReceivedCommands+0x19e>
					{
						/* The timer expired before it was added to the active
						timer list.  Process it now. */
						pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 80095da:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80095dc:	6a1b      	ldr	r3, [r3, #32]
 80095de:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 80095e0:	4798      	blx	r3
						traceTIMER_EXPIRED( pxTimer );

						if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 80095e2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80095e4:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 80095e8:	f003 0304 	and.w	r3, r3, #4
 80095ec:	2b00      	cmp	r3, #0
 80095ee:	d05e      	beq.n	80096ae <prvProcessReceivedCommands+0x19e>
						{
							xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, NULL, tmrNO_DELAY );
 80095f0:	68ba      	ldr	r2, [r7, #8]
 80095f2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80095f4:	699b      	ldr	r3, [r3, #24]
 80095f6:	441a      	add	r2, r3
 80095f8:	2300      	movs	r3, #0
 80095fa:	9300      	str	r3, [sp, #0]
 80095fc:	2300      	movs	r3, #0
 80095fe:	2100      	movs	r1, #0
 8009600:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8009602:	f7ff fe05 	bl	8009210 <xTimerGenericCommand>
 8009606:	6238      	str	r0, [r7, #32]
							configASSERT( xResult );
 8009608:	6a3b      	ldr	r3, [r7, #32]
 800960a:	2b00      	cmp	r3, #0
 800960c:	d14f      	bne.n	80096ae <prvProcessReceivedCommands+0x19e>
	__asm volatile
 800960e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009612:	f383 8811 	msr	BASEPRI, r3
 8009616:	f3bf 8f6f 	isb	sy
 800961a:	f3bf 8f4f 	dsb	sy
 800961e:	61bb      	str	r3, [r7, #24]
}
 8009620:	bf00      	nop
 8009622:	e7fe      	b.n	8009622 <prvProcessReceivedCommands+0x112>
					break;

				case tmrCOMMAND_STOP :
				case tmrCOMMAND_STOP_FROM_ISR :
					/* The timer has already been removed from the active list. */
					pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 8009624:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8009626:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 800962a:	f023 0301 	bic.w	r3, r3, #1
 800962e:	b2da      	uxtb	r2, r3
 8009630:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8009632:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
					break;
 8009636:	e03a      	b.n	80096ae <prvProcessReceivedCommands+0x19e>

				case tmrCOMMAND_CHANGE_PERIOD :
				case tmrCOMMAND_CHANGE_PERIOD_FROM_ISR :
					pxTimer->ucStatus |= tmrSTATUS_IS_ACTIVE;
 8009638:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800963a:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 800963e:	f043 0301 	orr.w	r3, r3, #1
 8009642:	b2da      	uxtb	r2, r3
 8009644:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8009646:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
					pxTimer->xTimerPeriodInTicks = xMessage.u.xTimerParameters.xMessageValue;
 800964a:	68ba      	ldr	r2, [r7, #8]
 800964c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800964e:	619a      	str	r2, [r3, #24]
					configASSERT( ( pxTimer->xTimerPeriodInTicks > 0 ) );
 8009650:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8009652:	699b      	ldr	r3, [r3, #24]
 8009654:	2b00      	cmp	r3, #0
 8009656:	d10a      	bne.n	800966e <prvProcessReceivedCommands+0x15e>
	__asm volatile
 8009658:	f04f 0350 	mov.w	r3, #80	; 0x50
 800965c:	f383 8811 	msr	BASEPRI, r3
 8009660:	f3bf 8f6f 	isb	sy
 8009664:	f3bf 8f4f 	dsb	sy
 8009668:	617b      	str	r3, [r7, #20]
}
 800966a:	bf00      	nop
 800966c:	e7fe      	b.n	800966c <prvProcessReceivedCommands+0x15c>
					be longer or shorter than the old one.  The command time is
					therefore set to the current time, and as the period cannot
					be zero the next expiry time can only be in the future,
					meaning (unlike for the xTimerStart() case above) there is
					no fail case that needs to be handled here. */
					( void ) prvInsertTimerInActiveList( pxTimer, ( xTimeNow + pxTimer->xTimerPeriodInTicks ), xTimeNow, xTimeNow );
 800966e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8009670:	699a      	ldr	r2, [r3, #24]
 8009672:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009674:	18d1      	adds	r1, r2, r3
 8009676:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009678:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800967a:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800967c:	f7ff ff06 	bl	800948c <prvInsertTimerInActiveList>
					break;
 8009680:	e015      	b.n	80096ae <prvProcessReceivedCommands+0x19e>
					#if ( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
					{
						/* The timer has already been removed from the active list,
						just free up the memory if the memory was dynamically
						allocated. */
						if( ( pxTimer->ucStatus & tmrSTATUS_IS_STATICALLY_ALLOCATED ) == ( uint8_t ) 0 )
 8009682:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8009684:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8009688:	f003 0302 	and.w	r3, r3, #2
 800968c:	2b00      	cmp	r3, #0
 800968e:	d103      	bne.n	8009698 <prvProcessReceivedCommands+0x188>
						{
							vPortFree( pxTimer );
 8009690:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8009692:	f000 fbe1 	bl	8009e58 <vPortFree>
 8009696:	e00a      	b.n	80096ae <prvProcessReceivedCommands+0x19e>
						}
						else
						{
							pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 8009698:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800969a:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 800969e:	f023 0301 	bic.w	r3, r3, #1
 80096a2:	b2da      	uxtb	r2, r3
 80096a4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80096a6:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
						no need to free the memory - just mark the timer as
						"not active". */
						pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
					}
					#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
					break;
 80096aa:	e000      	b.n	80096ae <prvProcessReceivedCommands+0x19e>

				default	:
					/* Don't expect to get here. */
					break;
			}
		}
 80096ac:	bf00      	nop
	while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
 80096ae:	4b08      	ldr	r3, [pc, #32]	; (80096d0 <prvProcessReceivedCommands+0x1c0>)
 80096b0:	681b      	ldr	r3, [r3, #0]
 80096b2:	1d39      	adds	r1, r7, #4
 80096b4:	2200      	movs	r2, #0
 80096b6:	4618      	mov	r0, r3
 80096b8:	f7fe f86e 	bl	8007798 <xQueueReceive>
 80096bc:	4603      	mov	r3, r0
 80096be:	2b00      	cmp	r3, #0
 80096c0:	f47f af2a 	bne.w	8009518 <prvProcessReceivedCommands+0x8>
	}
}
 80096c4:	bf00      	nop
 80096c6:	bf00      	nop
 80096c8:	3730      	adds	r7, #48	; 0x30
 80096ca:	46bd      	mov	sp, r7
 80096cc:	bd80      	pop	{r7, pc}
 80096ce:	bf00      	nop
 80096d0:	20000fa8 	.word	0x20000fa8

080096d4 <prvSwitchTimerLists>:
/*-----------------------------------------------------------*/

static void prvSwitchTimerLists( void )
{
 80096d4:	b580      	push	{r7, lr}
 80096d6:	b088      	sub	sp, #32
 80096d8:	af02      	add	r7, sp, #8

	/* The tick count has overflowed.  The timer lists must be switched.
	If there are any timers still referenced from the current timer list
	then they must have expired and should be processed before the lists
	are switched. */
	while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
 80096da:	e048      	b.n	800976e <prvSwitchTimerLists+0x9a>
	{
		xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 80096dc:	4b2d      	ldr	r3, [pc, #180]	; (8009794 <prvSwitchTimerLists+0xc0>)
 80096de:	681b      	ldr	r3, [r3, #0]
 80096e0:	68db      	ldr	r3, [r3, #12]
 80096e2:	681b      	ldr	r3, [r3, #0]
 80096e4:	613b      	str	r3, [r7, #16]

		/* Remove the timer from the list. */
		pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList ); /*lint !e9087 !e9079 void * is used as this macro is used with tasks and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 80096e6:	4b2b      	ldr	r3, [pc, #172]	; (8009794 <prvSwitchTimerLists+0xc0>)
 80096e8:	681b      	ldr	r3, [r3, #0]
 80096ea:	68db      	ldr	r3, [r3, #12]
 80096ec:	68db      	ldr	r3, [r3, #12]
 80096ee:	60fb      	str	r3, [r7, #12]
		( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 80096f0:	68fb      	ldr	r3, [r7, #12]
 80096f2:	3304      	adds	r3, #4
 80096f4:	4618      	mov	r0, r3
 80096f6:	f7fd fc57 	bl	8006fa8 <uxListRemove>
		traceTIMER_EXPIRED( pxTimer );

		/* Execute its callback, then send a command to restart the timer if
		it is an auto-reload timer.  It cannot be restarted here as the lists
		have not yet been switched. */
		pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 80096fa:	68fb      	ldr	r3, [r7, #12]
 80096fc:	6a1b      	ldr	r3, [r3, #32]
 80096fe:	68f8      	ldr	r0, [r7, #12]
 8009700:	4798      	blx	r3

		if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 8009702:	68fb      	ldr	r3, [r7, #12]
 8009704:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8009708:	f003 0304 	and.w	r3, r3, #4
 800970c:	2b00      	cmp	r3, #0
 800970e:	d02e      	beq.n	800976e <prvSwitchTimerLists+0x9a>
			the timer going into the same timer list then it has already expired
			and the timer should be re-inserted into the current list so it is
			processed again within this loop.  Otherwise a command should be sent
			to restart the timer to ensure it is only inserted into a list after
			the lists have been swapped. */
			xReloadTime = ( xNextExpireTime + pxTimer->xTimerPeriodInTicks );
 8009710:	68fb      	ldr	r3, [r7, #12]
 8009712:	699b      	ldr	r3, [r3, #24]
 8009714:	693a      	ldr	r2, [r7, #16]
 8009716:	4413      	add	r3, r2
 8009718:	60bb      	str	r3, [r7, #8]
			if( xReloadTime > xNextExpireTime )
 800971a:	68ba      	ldr	r2, [r7, #8]
 800971c:	693b      	ldr	r3, [r7, #16]
 800971e:	429a      	cmp	r2, r3
 8009720:	d90e      	bls.n	8009740 <prvSwitchTimerLists+0x6c>
			{
				listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xReloadTime );
 8009722:	68fb      	ldr	r3, [r7, #12]
 8009724:	68ba      	ldr	r2, [r7, #8]
 8009726:	605a      	str	r2, [r3, #4]
				listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
 8009728:	68fb      	ldr	r3, [r7, #12]
 800972a:	68fa      	ldr	r2, [r7, #12]
 800972c:	611a      	str	r2, [r3, #16]
				vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
 800972e:	4b19      	ldr	r3, [pc, #100]	; (8009794 <prvSwitchTimerLists+0xc0>)
 8009730:	681a      	ldr	r2, [r3, #0]
 8009732:	68fb      	ldr	r3, [r7, #12]
 8009734:	3304      	adds	r3, #4
 8009736:	4619      	mov	r1, r3
 8009738:	4610      	mov	r0, r2
 800973a:	f7fd fbfc 	bl	8006f36 <vListInsert>
 800973e:	e016      	b.n	800976e <prvSwitchTimerLists+0x9a>
			}
			else
			{
				xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
 8009740:	2300      	movs	r3, #0
 8009742:	9300      	str	r3, [sp, #0]
 8009744:	2300      	movs	r3, #0
 8009746:	693a      	ldr	r2, [r7, #16]
 8009748:	2100      	movs	r1, #0
 800974a:	68f8      	ldr	r0, [r7, #12]
 800974c:	f7ff fd60 	bl	8009210 <xTimerGenericCommand>
 8009750:	6078      	str	r0, [r7, #4]
				configASSERT( xResult );
 8009752:	687b      	ldr	r3, [r7, #4]
 8009754:	2b00      	cmp	r3, #0
 8009756:	d10a      	bne.n	800976e <prvSwitchTimerLists+0x9a>
	__asm volatile
 8009758:	f04f 0350 	mov.w	r3, #80	; 0x50
 800975c:	f383 8811 	msr	BASEPRI, r3
 8009760:	f3bf 8f6f 	isb	sy
 8009764:	f3bf 8f4f 	dsb	sy
 8009768:	603b      	str	r3, [r7, #0]
}
 800976a:	bf00      	nop
 800976c:	e7fe      	b.n	800976c <prvSwitchTimerLists+0x98>
	while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
 800976e:	4b09      	ldr	r3, [pc, #36]	; (8009794 <prvSwitchTimerLists+0xc0>)
 8009770:	681b      	ldr	r3, [r3, #0]
 8009772:	681b      	ldr	r3, [r3, #0]
 8009774:	2b00      	cmp	r3, #0
 8009776:	d1b1      	bne.n	80096dc <prvSwitchTimerLists+0x8>
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	pxTemp = pxCurrentTimerList;
 8009778:	4b06      	ldr	r3, [pc, #24]	; (8009794 <prvSwitchTimerLists+0xc0>)
 800977a:	681b      	ldr	r3, [r3, #0]
 800977c:	617b      	str	r3, [r7, #20]
	pxCurrentTimerList = pxOverflowTimerList;
 800977e:	4b06      	ldr	r3, [pc, #24]	; (8009798 <prvSwitchTimerLists+0xc4>)
 8009780:	681b      	ldr	r3, [r3, #0]
 8009782:	4a04      	ldr	r2, [pc, #16]	; (8009794 <prvSwitchTimerLists+0xc0>)
 8009784:	6013      	str	r3, [r2, #0]
	pxOverflowTimerList = pxTemp;
 8009786:	4a04      	ldr	r2, [pc, #16]	; (8009798 <prvSwitchTimerLists+0xc4>)
 8009788:	697b      	ldr	r3, [r7, #20]
 800978a:	6013      	str	r3, [r2, #0]
}
 800978c:	bf00      	nop
 800978e:	3718      	adds	r7, #24
 8009790:	46bd      	mov	sp, r7
 8009792:	bd80      	pop	{r7, pc}
 8009794:	20000fa0 	.word	0x20000fa0
 8009798:	20000fa4 	.word	0x20000fa4

0800979c <prvCheckForValidListAndQueue>:
/*-----------------------------------------------------------*/

static void prvCheckForValidListAndQueue( void )
{
 800979c:	b580      	push	{r7, lr}
 800979e:	b082      	sub	sp, #8
 80097a0:	af02      	add	r7, sp, #8
	/* Check that the list from which active timers are referenced, and the
	queue used to communicate with the timer service, have been
	initialised. */
	taskENTER_CRITICAL();
 80097a2:	f000 f967 	bl	8009a74 <vPortEnterCritical>
	{
		if( xTimerQueue == NULL )
 80097a6:	4b15      	ldr	r3, [pc, #84]	; (80097fc <prvCheckForValidListAndQueue+0x60>)
 80097a8:	681b      	ldr	r3, [r3, #0]
 80097aa:	2b00      	cmp	r3, #0
 80097ac:	d120      	bne.n	80097f0 <prvCheckForValidListAndQueue+0x54>
		{
			vListInitialise( &xActiveTimerList1 );
 80097ae:	4814      	ldr	r0, [pc, #80]	; (8009800 <prvCheckForValidListAndQueue+0x64>)
 80097b0:	f7fd fb70 	bl	8006e94 <vListInitialise>
			vListInitialise( &xActiveTimerList2 );
 80097b4:	4813      	ldr	r0, [pc, #76]	; (8009804 <prvCheckForValidListAndQueue+0x68>)
 80097b6:	f7fd fb6d 	bl	8006e94 <vListInitialise>
			pxCurrentTimerList = &xActiveTimerList1;
 80097ba:	4b13      	ldr	r3, [pc, #76]	; (8009808 <prvCheckForValidListAndQueue+0x6c>)
 80097bc:	4a10      	ldr	r2, [pc, #64]	; (8009800 <prvCheckForValidListAndQueue+0x64>)
 80097be:	601a      	str	r2, [r3, #0]
			pxOverflowTimerList = &xActiveTimerList2;
 80097c0:	4b12      	ldr	r3, [pc, #72]	; (800980c <prvCheckForValidListAndQueue+0x70>)
 80097c2:	4a10      	ldr	r2, [pc, #64]	; (8009804 <prvCheckForValidListAndQueue+0x68>)
 80097c4:	601a      	str	r2, [r3, #0]
				/* The timer queue is allocated statically in case
				configSUPPORT_DYNAMIC_ALLOCATION is 0. */
				static StaticQueue_t xStaticTimerQueue; /*lint !e956 Ok to declare in this manner to prevent additional conditional compilation guards in other locations. */
				static uint8_t ucStaticTimerQueueStorage[ ( size_t ) configTIMER_QUEUE_LENGTH * sizeof( DaemonTaskMessage_t ) ]; /*lint !e956 Ok to declare in this manner to prevent additional conditional compilation guards in other locations. */

				xTimerQueue = xQueueCreateStatic( ( UBaseType_t ) configTIMER_QUEUE_LENGTH, ( UBaseType_t ) sizeof( DaemonTaskMessage_t ), &( ucStaticTimerQueueStorage[ 0 ] ), &xStaticTimerQueue );
 80097c6:	2300      	movs	r3, #0
 80097c8:	9300      	str	r3, [sp, #0]
 80097ca:	4b11      	ldr	r3, [pc, #68]	; (8009810 <prvCheckForValidListAndQueue+0x74>)
 80097cc:	4a11      	ldr	r2, [pc, #68]	; (8009814 <prvCheckForValidListAndQueue+0x78>)
 80097ce:	2110      	movs	r1, #16
 80097d0:	200a      	movs	r0, #10
 80097d2:	f7fd fc7b 	bl	80070cc <xQueueGenericCreateStatic>
 80097d6:	4603      	mov	r3, r0
 80097d8:	4a08      	ldr	r2, [pc, #32]	; (80097fc <prvCheckForValidListAndQueue+0x60>)
 80097da:	6013      	str	r3, [r2, #0]
			}
			#endif

			#if ( configQUEUE_REGISTRY_SIZE > 0 )
			{
				if( xTimerQueue != NULL )
 80097dc:	4b07      	ldr	r3, [pc, #28]	; (80097fc <prvCheckForValidListAndQueue+0x60>)
 80097de:	681b      	ldr	r3, [r3, #0]
 80097e0:	2b00      	cmp	r3, #0
 80097e2:	d005      	beq.n	80097f0 <prvCheckForValidListAndQueue+0x54>
				{
					vQueueAddToRegistry( xTimerQueue, "TmrQ" );
 80097e4:	4b05      	ldr	r3, [pc, #20]	; (80097fc <prvCheckForValidListAndQueue+0x60>)
 80097e6:	681b      	ldr	r3, [r3, #0]
 80097e8:	490b      	ldr	r1, [pc, #44]	; (8009818 <prvCheckForValidListAndQueue+0x7c>)
 80097ea:	4618      	mov	r0, r3
 80097ec:	f7fe fb8c 	bl	8007f08 <vQueueAddToRegistry>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 80097f0:	f000 f970 	bl	8009ad4 <vPortExitCritical>
}
 80097f4:	bf00      	nop
 80097f6:	46bd      	mov	sp, r7
 80097f8:	bd80      	pop	{r7, pc}
 80097fa:	bf00      	nop
 80097fc:	20000fa8 	.word	0x20000fa8
 8009800:	20000f78 	.word	0x20000f78
 8009804:	20000f8c 	.word	0x20000f8c
 8009808:	20000fa0 	.word	0x20000fa0
 800980c:	20000fa4 	.word	0x20000fa4
 8009810:	20001054 	.word	0x20001054
 8009814:	20000fb4 	.word	0x20000fb4
 8009818:	0800b76c 	.word	0x0800b76c

0800981c <pxPortInitialiseStack>:

/*
 * See header file for description.
 */
StackType_t *pxPortInitialiseStack( StackType_t *pxTopOfStack, TaskFunction_t pxCode, void *pvParameters )
{
 800981c:	b480      	push	{r7}
 800981e:	b085      	sub	sp, #20
 8009820:	af00      	add	r7, sp, #0
 8009822:	60f8      	str	r0, [r7, #12]
 8009824:	60b9      	str	r1, [r7, #8]
 8009826:	607a      	str	r2, [r7, #4]
	/* Simulate the stack frame as it would be created by a context switch
	interrupt. */

	/* Offset added to account for the way the MCU uses the stack on entry/exit
	of interrupts, and to ensure alignment. */
	pxTopOfStack--;
 8009828:	68fb      	ldr	r3, [r7, #12]
 800982a:	3b04      	subs	r3, #4
 800982c:	60fb      	str	r3, [r7, #12]

	*pxTopOfStack = portINITIAL_XPSR;	/* xPSR */
 800982e:	68fb      	ldr	r3, [r7, #12]
 8009830:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 8009834:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 8009836:	68fb      	ldr	r3, [r7, #12]
 8009838:	3b04      	subs	r3, #4
 800983a:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( ( StackType_t ) pxCode ) & portSTART_ADDRESS_MASK;	/* PC */
 800983c:	68bb      	ldr	r3, [r7, #8]
 800983e:	f023 0201 	bic.w	r2, r3, #1
 8009842:	68fb      	ldr	r3, [r7, #12]
 8009844:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 8009846:	68fb      	ldr	r3, [r7, #12]
 8009848:	3b04      	subs	r3, #4
 800984a:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) portTASK_RETURN_ADDRESS;	/* LR */
 800984c:	4a0c      	ldr	r2, [pc, #48]	; (8009880 <pxPortInitialiseStack+0x64>)
 800984e:	68fb      	ldr	r3, [r7, #12]
 8009850:	601a      	str	r2, [r3, #0]

	/* Save code space by skipping register initialisation. */
	pxTopOfStack -= 5;	/* R12, R3, R2 and R1. */
 8009852:	68fb      	ldr	r3, [r7, #12]
 8009854:	3b14      	subs	r3, #20
 8009856:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) pvParameters;	/* R0 */
 8009858:	687a      	ldr	r2, [r7, #4]
 800985a:	68fb      	ldr	r3, [r7, #12]
 800985c:	601a      	str	r2, [r3, #0]

	/* A save method is being used that requires each task to maintain its
	own exec return value. */
	pxTopOfStack--;
 800985e:	68fb      	ldr	r3, [r7, #12]
 8009860:	3b04      	subs	r3, #4
 8009862:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = portINITIAL_EXC_RETURN;
 8009864:	68fb      	ldr	r3, [r7, #12]
 8009866:	f06f 0202 	mvn.w	r2, #2
 800986a:	601a      	str	r2, [r3, #0]

	pxTopOfStack -= 8;	/* R11, R10, R9, R8, R7, R6, R5 and R4. */
 800986c:	68fb      	ldr	r3, [r7, #12]
 800986e:	3b20      	subs	r3, #32
 8009870:	60fb      	str	r3, [r7, #12]

	return pxTopOfStack;
 8009872:	68fb      	ldr	r3, [r7, #12]
}
 8009874:	4618      	mov	r0, r3
 8009876:	3714      	adds	r7, #20
 8009878:	46bd      	mov	sp, r7
 800987a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800987e:	4770      	bx	lr
 8009880:	08009885 	.word	0x08009885

08009884 <prvTaskExitError>:
/*-----------------------------------------------------------*/

static void prvTaskExitError( void )
{
 8009884:	b480      	push	{r7}
 8009886:	b085      	sub	sp, #20
 8009888:	af00      	add	r7, sp, #0
volatile uint32_t ulDummy = 0;
 800988a:	2300      	movs	r3, #0
 800988c:	607b      	str	r3, [r7, #4]
	its caller as there is nothing to return to.  If a task wants to exit it
	should instead call vTaskDelete( NULL ).

	Artificially force an assert() to be triggered if configASSERT() is
	defined, then stop here so application writers can catch the error. */
	configASSERT( uxCriticalNesting == ~0UL );
 800988e:	4b12      	ldr	r3, [pc, #72]	; (80098d8 <prvTaskExitError+0x54>)
 8009890:	681b      	ldr	r3, [r3, #0]
 8009892:	f1b3 3fff 	cmp.w	r3, #4294967295
 8009896:	d00a      	beq.n	80098ae <prvTaskExitError+0x2a>
	__asm volatile
 8009898:	f04f 0350 	mov.w	r3, #80	; 0x50
 800989c:	f383 8811 	msr	BASEPRI, r3
 80098a0:	f3bf 8f6f 	isb	sy
 80098a4:	f3bf 8f4f 	dsb	sy
 80098a8:	60fb      	str	r3, [r7, #12]
}
 80098aa:	bf00      	nop
 80098ac:	e7fe      	b.n	80098ac <prvTaskExitError+0x28>
	__asm volatile
 80098ae:	f04f 0350 	mov.w	r3, #80	; 0x50
 80098b2:	f383 8811 	msr	BASEPRI, r3
 80098b6:	f3bf 8f6f 	isb	sy
 80098ba:	f3bf 8f4f 	dsb	sy
 80098be:	60bb      	str	r3, [r7, #8]
}
 80098c0:	bf00      	nop
	portDISABLE_INTERRUPTS();
	while( ulDummy == 0 )
 80098c2:	bf00      	nop
 80098c4:	687b      	ldr	r3, [r7, #4]
 80098c6:	2b00      	cmp	r3, #0
 80098c8:	d0fc      	beq.n	80098c4 <prvTaskExitError+0x40>
		about code appearing after this function is called - making ulDummy
		volatile makes the compiler think the function could return and
		therefore not output an 'unreachable code' warning for code that appears
		after it. */
	}
}
 80098ca:	bf00      	nop
 80098cc:	bf00      	nop
 80098ce:	3714      	adds	r7, #20
 80098d0:	46bd      	mov	sp, r7
 80098d2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80098d6:	4770      	bx	lr
 80098d8:	2000000c 	.word	0x2000000c
 80098dc:	00000000 	.word	0x00000000

080098e0 <SVC_Handler>:
/*-----------------------------------------------------------*/

void vPortSVCHandler( void )
{
	__asm volatile (
 80098e0:	4b07      	ldr	r3, [pc, #28]	; (8009900 <pxCurrentTCBConst2>)
 80098e2:	6819      	ldr	r1, [r3, #0]
 80098e4:	6808      	ldr	r0, [r1, #0]
 80098e6:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80098ea:	f380 8809 	msr	PSP, r0
 80098ee:	f3bf 8f6f 	isb	sy
 80098f2:	f04f 0000 	mov.w	r0, #0
 80098f6:	f380 8811 	msr	BASEPRI, r0
 80098fa:	4770      	bx	lr
 80098fc:	f3af 8000 	nop.w

08009900 <pxCurrentTCBConst2>:
 8009900:	20000a78 	.word	0x20000a78
					"	bx r14							\n"
					"									\n"
					"	.align 4						\n"
					"pxCurrentTCBConst2: .word pxCurrentTCB				\n"
				);
}
 8009904:	bf00      	nop
 8009906:	bf00      	nop

08009908 <prvPortStartFirstTask>:
{
	/* Start the first task.  This also clears the bit that indicates the FPU is
	in use in case the FPU was used before the scheduler was started - which
	would otherwise result in the unnecessary leaving of space in the SVC stack
	for lazy saving of FPU registers. */
	__asm volatile(
 8009908:	4808      	ldr	r0, [pc, #32]	; (800992c <prvPortStartFirstTask+0x24>)
 800990a:	6800      	ldr	r0, [r0, #0]
 800990c:	6800      	ldr	r0, [r0, #0]
 800990e:	f380 8808 	msr	MSP, r0
 8009912:	f04f 0000 	mov.w	r0, #0
 8009916:	f380 8814 	msr	CONTROL, r0
 800991a:	b662      	cpsie	i
 800991c:	b661      	cpsie	f
 800991e:	f3bf 8f4f 	dsb	sy
 8009922:	f3bf 8f6f 	isb	sy
 8009926:	df00      	svc	0
 8009928:	bf00      	nop
					" dsb					\n"
					" isb					\n"
					" svc 0					\n" /* System call to start first task. */
					" nop					\n"
				);
}
 800992a:	bf00      	nop
 800992c:	e000ed08 	.word	0xe000ed08

08009930 <xPortStartScheduler>:

/*
 * See header file for description.
 */
BaseType_t xPortStartScheduler( void )
{
 8009930:	b580      	push	{r7, lr}
 8009932:	b086      	sub	sp, #24
 8009934:	af00      	add	r7, sp, #0
	configASSERT( configMAX_SYSCALL_INTERRUPT_PRIORITY );

	/* This port can be used on all revisions of the Cortex-M7 core other than
	the r0p1 parts.  r0p1 parts should use the port from the
	/source/portable/GCC/ARM_CM7/r0p1 directory. */
	configASSERT( portCPUID != portCORTEX_M7_r0p1_ID );
 8009936:	4b46      	ldr	r3, [pc, #280]	; (8009a50 <xPortStartScheduler+0x120>)
 8009938:	681b      	ldr	r3, [r3, #0]
 800993a:	4a46      	ldr	r2, [pc, #280]	; (8009a54 <xPortStartScheduler+0x124>)
 800993c:	4293      	cmp	r3, r2
 800993e:	d10a      	bne.n	8009956 <xPortStartScheduler+0x26>
	__asm volatile
 8009940:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009944:	f383 8811 	msr	BASEPRI, r3
 8009948:	f3bf 8f6f 	isb	sy
 800994c:	f3bf 8f4f 	dsb	sy
 8009950:	613b      	str	r3, [r7, #16]
}
 8009952:	bf00      	nop
 8009954:	e7fe      	b.n	8009954 <xPortStartScheduler+0x24>
	configASSERT( portCPUID != portCORTEX_M7_r0p0_ID );
 8009956:	4b3e      	ldr	r3, [pc, #248]	; (8009a50 <xPortStartScheduler+0x120>)
 8009958:	681b      	ldr	r3, [r3, #0]
 800995a:	4a3f      	ldr	r2, [pc, #252]	; (8009a58 <xPortStartScheduler+0x128>)
 800995c:	4293      	cmp	r3, r2
 800995e:	d10a      	bne.n	8009976 <xPortStartScheduler+0x46>
	__asm volatile
 8009960:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009964:	f383 8811 	msr	BASEPRI, r3
 8009968:	f3bf 8f6f 	isb	sy
 800996c:	f3bf 8f4f 	dsb	sy
 8009970:	60fb      	str	r3, [r7, #12]
}
 8009972:	bf00      	nop
 8009974:	e7fe      	b.n	8009974 <xPortStartScheduler+0x44>

	#if( configASSERT_DEFINED == 1 )
	{
		volatile uint32_t ulOriginalPriority;
		volatile uint8_t * const pucFirstUserPriorityRegister = ( volatile uint8_t * const ) ( portNVIC_IP_REGISTERS_OFFSET_16 + portFIRST_USER_INTERRUPT_NUMBER );
 8009976:	4b39      	ldr	r3, [pc, #228]	; (8009a5c <xPortStartScheduler+0x12c>)
 8009978:	617b      	str	r3, [r7, #20]
		functions can be called.  ISR safe functions are those that end in
		"FromISR".  FreeRTOS maintains separate thread and ISR API functions to
		ensure interrupt entry is as fast and simple as possible.

		Save the interrupt priority value that is about to be clobbered. */
		ulOriginalPriority = *pucFirstUserPriorityRegister;
 800997a:	697b      	ldr	r3, [r7, #20]
 800997c:	781b      	ldrb	r3, [r3, #0]
 800997e:	b2db      	uxtb	r3, r3
 8009980:	607b      	str	r3, [r7, #4]

		/* Determine the number of priority bits available.  First write to all
		possible bits. */
		*pucFirstUserPriorityRegister = portMAX_8_BIT_VALUE;
 8009982:	697b      	ldr	r3, [r7, #20]
 8009984:	22ff      	movs	r2, #255	; 0xff
 8009986:	701a      	strb	r2, [r3, #0]

		/* Read the value back to see how many bits stuck. */
		ucMaxPriorityValue = *pucFirstUserPriorityRegister;
 8009988:	697b      	ldr	r3, [r7, #20]
 800998a:	781b      	ldrb	r3, [r3, #0]
 800998c:	b2db      	uxtb	r3, r3
 800998e:	70fb      	strb	r3, [r7, #3]

		/* Use the same mask on the maximum system call priority. */
		ucMaxSysCallPriority = configMAX_SYSCALL_INTERRUPT_PRIORITY & ucMaxPriorityValue;
 8009990:	78fb      	ldrb	r3, [r7, #3]
 8009992:	b2db      	uxtb	r3, r3
 8009994:	f003 0350 	and.w	r3, r3, #80	; 0x50
 8009998:	b2da      	uxtb	r2, r3
 800999a:	4b31      	ldr	r3, [pc, #196]	; (8009a60 <xPortStartScheduler+0x130>)
 800999c:	701a      	strb	r2, [r3, #0]

		/* Calculate the maximum acceptable priority group value for the number
		of bits read back. */
		ulMaxPRIGROUPValue = portMAX_PRIGROUP_BITS;
 800999e:	4b31      	ldr	r3, [pc, #196]	; (8009a64 <xPortStartScheduler+0x134>)
 80099a0:	2207      	movs	r2, #7
 80099a2:	601a      	str	r2, [r3, #0]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 80099a4:	e009      	b.n	80099ba <xPortStartScheduler+0x8a>
		{
			ulMaxPRIGROUPValue--;
 80099a6:	4b2f      	ldr	r3, [pc, #188]	; (8009a64 <xPortStartScheduler+0x134>)
 80099a8:	681b      	ldr	r3, [r3, #0]
 80099aa:	3b01      	subs	r3, #1
 80099ac:	4a2d      	ldr	r2, [pc, #180]	; (8009a64 <xPortStartScheduler+0x134>)
 80099ae:	6013      	str	r3, [r2, #0]
			ucMaxPriorityValue <<= ( uint8_t ) 0x01;
 80099b0:	78fb      	ldrb	r3, [r7, #3]
 80099b2:	b2db      	uxtb	r3, r3
 80099b4:	005b      	lsls	r3, r3, #1
 80099b6:	b2db      	uxtb	r3, r3
 80099b8:	70fb      	strb	r3, [r7, #3]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 80099ba:	78fb      	ldrb	r3, [r7, #3]
 80099bc:	b2db      	uxtb	r3, r3
 80099be:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80099c2:	2b80      	cmp	r3, #128	; 0x80
 80099c4:	d0ef      	beq.n	80099a6 <xPortStartScheduler+0x76>
		#ifdef configPRIO_BITS
		{
			/* Check the FreeRTOS configuration that defines the number of
			priority bits matches the number of priority bits actually queried
			from the hardware. */
			configASSERT( ( portMAX_PRIGROUP_BITS - ulMaxPRIGROUPValue ) == configPRIO_BITS );
 80099c6:	4b27      	ldr	r3, [pc, #156]	; (8009a64 <xPortStartScheduler+0x134>)
 80099c8:	681b      	ldr	r3, [r3, #0]
 80099ca:	f1c3 0307 	rsb	r3, r3, #7
 80099ce:	2b04      	cmp	r3, #4
 80099d0:	d00a      	beq.n	80099e8 <xPortStartScheduler+0xb8>
	__asm volatile
 80099d2:	f04f 0350 	mov.w	r3, #80	; 0x50
 80099d6:	f383 8811 	msr	BASEPRI, r3
 80099da:	f3bf 8f6f 	isb	sy
 80099de:	f3bf 8f4f 	dsb	sy
 80099e2:	60bb      	str	r3, [r7, #8]
}
 80099e4:	bf00      	nop
 80099e6:	e7fe      	b.n	80099e6 <xPortStartScheduler+0xb6>
		}
		#endif

		/* Shift the priority group value back to its position within the AIRCR
		register. */
		ulMaxPRIGROUPValue <<= portPRIGROUP_SHIFT;
 80099e8:	4b1e      	ldr	r3, [pc, #120]	; (8009a64 <xPortStartScheduler+0x134>)
 80099ea:	681b      	ldr	r3, [r3, #0]
 80099ec:	021b      	lsls	r3, r3, #8
 80099ee:	4a1d      	ldr	r2, [pc, #116]	; (8009a64 <xPortStartScheduler+0x134>)
 80099f0:	6013      	str	r3, [r2, #0]
		ulMaxPRIGROUPValue &= portPRIORITY_GROUP_MASK;
 80099f2:	4b1c      	ldr	r3, [pc, #112]	; (8009a64 <xPortStartScheduler+0x134>)
 80099f4:	681b      	ldr	r3, [r3, #0]
 80099f6:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 80099fa:	4a1a      	ldr	r2, [pc, #104]	; (8009a64 <xPortStartScheduler+0x134>)
 80099fc:	6013      	str	r3, [r2, #0]

		/* Restore the clobbered interrupt priority register to its original
		value. */
		*pucFirstUserPriorityRegister = ulOriginalPriority;
 80099fe:	687b      	ldr	r3, [r7, #4]
 8009a00:	b2da      	uxtb	r2, r3
 8009a02:	697b      	ldr	r3, [r7, #20]
 8009a04:	701a      	strb	r2, [r3, #0]
	}
	#endif /* conifgASSERT_DEFINED */

	/* Make PendSV and SysTick the lowest priority interrupts. */
	portNVIC_SYSPRI2_REG |= portNVIC_PENDSV_PRI;
 8009a06:	4b18      	ldr	r3, [pc, #96]	; (8009a68 <xPortStartScheduler+0x138>)
 8009a08:	681b      	ldr	r3, [r3, #0]
 8009a0a:	4a17      	ldr	r2, [pc, #92]	; (8009a68 <xPortStartScheduler+0x138>)
 8009a0c:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8009a10:	6013      	str	r3, [r2, #0]
	portNVIC_SYSPRI2_REG |= portNVIC_SYSTICK_PRI;
 8009a12:	4b15      	ldr	r3, [pc, #84]	; (8009a68 <xPortStartScheduler+0x138>)
 8009a14:	681b      	ldr	r3, [r3, #0]
 8009a16:	4a14      	ldr	r2, [pc, #80]	; (8009a68 <xPortStartScheduler+0x138>)
 8009a18:	f043 4370 	orr.w	r3, r3, #4026531840	; 0xf0000000
 8009a1c:	6013      	str	r3, [r2, #0]

	/* Start the timer that generates the tick ISR.  Interrupts are disabled
	here already. */
	vPortSetupTimerInterrupt();
 8009a1e:	f000 f8dd 	bl	8009bdc <vPortSetupTimerInterrupt>

	/* Initialise the critical nesting count ready for the first task. */
	uxCriticalNesting = 0;
 8009a22:	4b12      	ldr	r3, [pc, #72]	; (8009a6c <xPortStartScheduler+0x13c>)
 8009a24:	2200      	movs	r2, #0
 8009a26:	601a      	str	r2, [r3, #0]

	/* Ensure the VFP is enabled - it should be anyway. */
	vPortEnableVFP();
 8009a28:	f000 f8fc 	bl	8009c24 <vPortEnableVFP>

	/* Lazy save always. */
	*( portFPCCR ) |= portASPEN_AND_LSPEN_BITS;
 8009a2c:	4b10      	ldr	r3, [pc, #64]	; (8009a70 <xPortStartScheduler+0x140>)
 8009a2e:	681b      	ldr	r3, [r3, #0]
 8009a30:	4a0f      	ldr	r2, [pc, #60]	; (8009a70 <xPortStartScheduler+0x140>)
 8009a32:	f043 4340 	orr.w	r3, r3, #3221225472	; 0xc0000000
 8009a36:	6013      	str	r3, [r2, #0]

	/* Start the first task. */
	prvPortStartFirstTask();
 8009a38:	f7ff ff66 	bl	8009908 <prvPortStartFirstTask>
	exit error function to prevent compiler warnings about a static function
	not being called in the case that the application writer overrides this
	functionality by defining configTASK_RETURN_ADDRESS.  Call
	vTaskSwitchContext() so link time optimisation does not remove the
	symbol. */
	vTaskSwitchContext();
 8009a3c:	f7fe ff30 	bl	80088a0 <vTaskSwitchContext>
	prvTaskExitError();
 8009a40:	f7ff ff20 	bl	8009884 <prvTaskExitError>

	/* Should not get here! */
	return 0;
 8009a44:	2300      	movs	r3, #0
}
 8009a46:	4618      	mov	r0, r3
 8009a48:	3718      	adds	r7, #24
 8009a4a:	46bd      	mov	sp, r7
 8009a4c:	bd80      	pop	{r7, pc}
 8009a4e:	bf00      	nop
 8009a50:	e000ed00 	.word	0xe000ed00
 8009a54:	410fc271 	.word	0x410fc271
 8009a58:	410fc270 	.word	0x410fc270
 8009a5c:	e000e400 	.word	0xe000e400
 8009a60:	200010a4 	.word	0x200010a4
 8009a64:	200010a8 	.word	0x200010a8
 8009a68:	e000ed20 	.word	0xe000ed20
 8009a6c:	2000000c 	.word	0x2000000c
 8009a70:	e000ef34 	.word	0xe000ef34

08009a74 <vPortEnterCritical>:
	configASSERT( uxCriticalNesting == 1000UL );
}
/*-----------------------------------------------------------*/

void vPortEnterCritical( void )
{
 8009a74:	b480      	push	{r7}
 8009a76:	b083      	sub	sp, #12
 8009a78:	af00      	add	r7, sp, #0
	__asm volatile
 8009a7a:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009a7e:	f383 8811 	msr	BASEPRI, r3
 8009a82:	f3bf 8f6f 	isb	sy
 8009a86:	f3bf 8f4f 	dsb	sy
 8009a8a:	607b      	str	r3, [r7, #4]
}
 8009a8c:	bf00      	nop
	portDISABLE_INTERRUPTS();
	uxCriticalNesting++;
 8009a8e:	4b0f      	ldr	r3, [pc, #60]	; (8009acc <vPortEnterCritical+0x58>)
 8009a90:	681b      	ldr	r3, [r3, #0]
 8009a92:	3301      	adds	r3, #1
 8009a94:	4a0d      	ldr	r2, [pc, #52]	; (8009acc <vPortEnterCritical+0x58>)
 8009a96:	6013      	str	r3, [r2, #0]
	/* This is not the interrupt safe version of the enter critical function so
	assert() if it is being called from an interrupt context.  Only API
	functions that end in "FromISR" can be used in an interrupt.  Only assert if
	the critical nesting count is 1 to protect against recursive calls if the
	assert function also uses a critical section. */
	if( uxCriticalNesting == 1 )
 8009a98:	4b0c      	ldr	r3, [pc, #48]	; (8009acc <vPortEnterCritical+0x58>)
 8009a9a:	681b      	ldr	r3, [r3, #0]
 8009a9c:	2b01      	cmp	r3, #1
 8009a9e:	d10f      	bne.n	8009ac0 <vPortEnterCritical+0x4c>
	{
		configASSERT( ( portNVIC_INT_CTRL_REG & portVECTACTIVE_MASK ) == 0 );
 8009aa0:	4b0b      	ldr	r3, [pc, #44]	; (8009ad0 <vPortEnterCritical+0x5c>)
 8009aa2:	681b      	ldr	r3, [r3, #0]
 8009aa4:	b2db      	uxtb	r3, r3
 8009aa6:	2b00      	cmp	r3, #0
 8009aa8:	d00a      	beq.n	8009ac0 <vPortEnterCritical+0x4c>
	__asm volatile
 8009aaa:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009aae:	f383 8811 	msr	BASEPRI, r3
 8009ab2:	f3bf 8f6f 	isb	sy
 8009ab6:	f3bf 8f4f 	dsb	sy
 8009aba:	603b      	str	r3, [r7, #0]
}
 8009abc:	bf00      	nop
 8009abe:	e7fe      	b.n	8009abe <vPortEnterCritical+0x4a>
	}
}
 8009ac0:	bf00      	nop
 8009ac2:	370c      	adds	r7, #12
 8009ac4:	46bd      	mov	sp, r7
 8009ac6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009aca:	4770      	bx	lr
 8009acc:	2000000c 	.word	0x2000000c
 8009ad0:	e000ed04 	.word	0xe000ed04

08009ad4 <vPortExitCritical>:
/*-----------------------------------------------------------*/

void vPortExitCritical( void )
{
 8009ad4:	b480      	push	{r7}
 8009ad6:	b083      	sub	sp, #12
 8009ad8:	af00      	add	r7, sp, #0
	configASSERT( uxCriticalNesting );
 8009ada:	4b12      	ldr	r3, [pc, #72]	; (8009b24 <vPortExitCritical+0x50>)
 8009adc:	681b      	ldr	r3, [r3, #0]
 8009ade:	2b00      	cmp	r3, #0
 8009ae0:	d10a      	bne.n	8009af8 <vPortExitCritical+0x24>
	__asm volatile
 8009ae2:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009ae6:	f383 8811 	msr	BASEPRI, r3
 8009aea:	f3bf 8f6f 	isb	sy
 8009aee:	f3bf 8f4f 	dsb	sy
 8009af2:	607b      	str	r3, [r7, #4]
}
 8009af4:	bf00      	nop
 8009af6:	e7fe      	b.n	8009af6 <vPortExitCritical+0x22>
	uxCriticalNesting--;
 8009af8:	4b0a      	ldr	r3, [pc, #40]	; (8009b24 <vPortExitCritical+0x50>)
 8009afa:	681b      	ldr	r3, [r3, #0]
 8009afc:	3b01      	subs	r3, #1
 8009afe:	4a09      	ldr	r2, [pc, #36]	; (8009b24 <vPortExitCritical+0x50>)
 8009b00:	6013      	str	r3, [r2, #0]
	if( uxCriticalNesting == 0 )
 8009b02:	4b08      	ldr	r3, [pc, #32]	; (8009b24 <vPortExitCritical+0x50>)
 8009b04:	681b      	ldr	r3, [r3, #0]
 8009b06:	2b00      	cmp	r3, #0
 8009b08:	d105      	bne.n	8009b16 <vPortExitCritical+0x42>
 8009b0a:	2300      	movs	r3, #0
 8009b0c:	603b      	str	r3, [r7, #0]
	__asm volatile
 8009b0e:	683b      	ldr	r3, [r7, #0]
 8009b10:	f383 8811 	msr	BASEPRI, r3
}
 8009b14:	bf00      	nop
	{
		portENABLE_INTERRUPTS();
	}
}
 8009b16:	bf00      	nop
 8009b18:	370c      	adds	r7, #12
 8009b1a:	46bd      	mov	sp, r7
 8009b1c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009b20:	4770      	bx	lr
 8009b22:	bf00      	nop
 8009b24:	2000000c 	.word	0x2000000c
	...

08009b30 <PendSV_Handler>:

void xPortPendSVHandler( void )
{
	/* This is a naked function. */

	__asm volatile
 8009b30:	f3ef 8009 	mrs	r0, PSP
 8009b34:	f3bf 8f6f 	isb	sy
 8009b38:	4b15      	ldr	r3, [pc, #84]	; (8009b90 <pxCurrentTCBConst>)
 8009b3a:	681a      	ldr	r2, [r3, #0]
 8009b3c:	f01e 0f10 	tst.w	lr, #16
 8009b40:	bf08      	it	eq
 8009b42:	ed20 8a10 	vstmdbeq	r0!, {s16-s31}
 8009b46:	e920 4ff0 	stmdb	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8009b4a:	6010      	str	r0, [r2, #0]
 8009b4c:	e92d 0009 	stmdb	sp!, {r0, r3}
 8009b50:	f04f 0050 	mov.w	r0, #80	; 0x50
 8009b54:	f380 8811 	msr	BASEPRI, r0
 8009b58:	f3bf 8f4f 	dsb	sy
 8009b5c:	f3bf 8f6f 	isb	sy
 8009b60:	f7fe fe9e 	bl	80088a0 <vTaskSwitchContext>
 8009b64:	f04f 0000 	mov.w	r0, #0
 8009b68:	f380 8811 	msr	BASEPRI, r0
 8009b6c:	bc09      	pop	{r0, r3}
 8009b6e:	6819      	ldr	r1, [r3, #0]
 8009b70:	6808      	ldr	r0, [r1, #0]
 8009b72:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8009b76:	f01e 0f10 	tst.w	lr, #16
 8009b7a:	bf08      	it	eq
 8009b7c:	ecb0 8a10 	vldmiaeq	r0!, {s16-s31}
 8009b80:	f380 8809 	msr	PSP, r0
 8009b84:	f3bf 8f6f 	isb	sy
 8009b88:	4770      	bx	lr
 8009b8a:	bf00      	nop
 8009b8c:	f3af 8000 	nop.w

08009b90 <pxCurrentTCBConst>:
 8009b90:	20000a78 	.word	0x20000a78
	"										\n"
	"	.align 4							\n"
	"pxCurrentTCBConst: .word pxCurrentTCB	\n"
	::"i"(configMAX_SYSCALL_INTERRUPT_PRIORITY)
	);
}
 8009b94:	bf00      	nop
 8009b96:	bf00      	nop

08009b98 <xPortSysTickHandler>:
/*-----------------------------------------------------------*/

void xPortSysTickHandler( void )
{
 8009b98:	b580      	push	{r7, lr}
 8009b9a:	b082      	sub	sp, #8
 8009b9c:	af00      	add	r7, sp, #0
	__asm volatile
 8009b9e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009ba2:	f383 8811 	msr	BASEPRI, r3
 8009ba6:	f3bf 8f6f 	isb	sy
 8009baa:	f3bf 8f4f 	dsb	sy
 8009bae:	607b      	str	r3, [r7, #4]
}
 8009bb0:	bf00      	nop
	save and then restore the interrupt mask value as its value is already
	known. */
	portDISABLE_INTERRUPTS();
	{
		/* Increment the RTOS tick. */
		if( xTaskIncrementTick() != pdFALSE )
 8009bb2:	f7fe fdbb 	bl	800872c <xTaskIncrementTick>
 8009bb6:	4603      	mov	r3, r0
 8009bb8:	2b00      	cmp	r3, #0
 8009bba:	d003      	beq.n	8009bc4 <xPortSysTickHandler+0x2c>
		{
			/* A context switch is required.  Context switching is performed in
			the PendSV interrupt.  Pend the PendSV interrupt. */
			portNVIC_INT_CTRL_REG = portNVIC_PENDSVSET_BIT;
 8009bbc:	4b06      	ldr	r3, [pc, #24]	; (8009bd8 <xPortSysTickHandler+0x40>)
 8009bbe:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8009bc2:	601a      	str	r2, [r3, #0]
 8009bc4:	2300      	movs	r3, #0
 8009bc6:	603b      	str	r3, [r7, #0]
	__asm volatile
 8009bc8:	683b      	ldr	r3, [r7, #0]
 8009bca:	f383 8811 	msr	BASEPRI, r3
}
 8009bce:	bf00      	nop
		}
	}
	portENABLE_INTERRUPTS();
}
 8009bd0:	bf00      	nop
 8009bd2:	3708      	adds	r7, #8
 8009bd4:	46bd      	mov	sp, r7
 8009bd6:	bd80      	pop	{r7, pc}
 8009bd8:	e000ed04 	.word	0xe000ed04

08009bdc <vPortSetupTimerInterrupt>:
/*
 * Setup the systick timer to generate the tick interrupts at the required
 * frequency.
 */
__attribute__(( weak )) void vPortSetupTimerInterrupt( void )
{
 8009bdc:	b480      	push	{r7}
 8009bde:	af00      	add	r7, sp, #0
		ulStoppedTimerCompensation = portMISSED_COUNTS_FACTOR / ( configCPU_CLOCK_HZ / configSYSTICK_CLOCK_HZ );
	}
	#endif /* configUSE_TICKLESS_IDLE */

	/* Stop and clear the SysTick. */
	portNVIC_SYSTICK_CTRL_REG = 0UL;
 8009be0:	4b0b      	ldr	r3, [pc, #44]	; (8009c10 <vPortSetupTimerInterrupt+0x34>)
 8009be2:	2200      	movs	r2, #0
 8009be4:	601a      	str	r2, [r3, #0]
	portNVIC_SYSTICK_CURRENT_VALUE_REG = 0UL;
 8009be6:	4b0b      	ldr	r3, [pc, #44]	; (8009c14 <vPortSetupTimerInterrupt+0x38>)
 8009be8:	2200      	movs	r2, #0
 8009bea:	601a      	str	r2, [r3, #0]

	/* Configure SysTick to interrupt at the requested rate. */
	portNVIC_SYSTICK_LOAD_REG = ( configSYSTICK_CLOCK_HZ / configTICK_RATE_HZ ) - 1UL;
 8009bec:	4b0a      	ldr	r3, [pc, #40]	; (8009c18 <vPortSetupTimerInterrupt+0x3c>)
 8009bee:	681b      	ldr	r3, [r3, #0]
 8009bf0:	4a0a      	ldr	r2, [pc, #40]	; (8009c1c <vPortSetupTimerInterrupt+0x40>)
 8009bf2:	fba2 2303 	umull	r2, r3, r2, r3
 8009bf6:	099b      	lsrs	r3, r3, #6
 8009bf8:	4a09      	ldr	r2, [pc, #36]	; (8009c20 <vPortSetupTimerInterrupt+0x44>)
 8009bfa:	3b01      	subs	r3, #1
 8009bfc:	6013      	str	r3, [r2, #0]
	portNVIC_SYSTICK_CTRL_REG = ( portNVIC_SYSTICK_CLK_BIT | portNVIC_SYSTICK_INT_BIT | portNVIC_SYSTICK_ENABLE_BIT );
 8009bfe:	4b04      	ldr	r3, [pc, #16]	; (8009c10 <vPortSetupTimerInterrupt+0x34>)
 8009c00:	2207      	movs	r2, #7
 8009c02:	601a      	str	r2, [r3, #0]
}
 8009c04:	bf00      	nop
 8009c06:	46bd      	mov	sp, r7
 8009c08:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009c0c:	4770      	bx	lr
 8009c0e:	bf00      	nop
 8009c10:	e000e010 	.word	0xe000e010
 8009c14:	e000e018 	.word	0xe000e018
 8009c18:	20000000 	.word	0x20000000
 8009c1c:	10624dd3 	.word	0x10624dd3
 8009c20:	e000e014 	.word	0xe000e014

08009c24 <vPortEnableVFP>:
/*-----------------------------------------------------------*/

/* This is a naked function. */
static void vPortEnableVFP( void )
{
	__asm volatile
 8009c24:	f8df 000c 	ldr.w	r0, [pc, #12]	; 8009c34 <vPortEnableVFP+0x10>
 8009c28:	6801      	ldr	r1, [r0, #0]
 8009c2a:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 8009c2e:	6001      	str	r1, [r0, #0]
 8009c30:	4770      	bx	lr
		"								\n"
		"	orr r1, r1, #( 0xf << 20 )	\n" /* Enable CP10 and CP11 coprocessors, then save back. */
		"	str r1, [r0]				\n"
		"	bx r14						"
	);
}
 8009c32:	bf00      	nop
 8009c34:	e000ed88 	.word	0xe000ed88

08009c38 <vPortValidateInterruptPriority>:
/*-----------------------------------------------------------*/

#if( configASSERT_DEFINED == 1 )

	void vPortValidateInterruptPriority( void )
	{
 8009c38:	b480      	push	{r7}
 8009c3a:	b085      	sub	sp, #20
 8009c3c:	af00      	add	r7, sp, #0
	uint32_t ulCurrentInterrupt;
	uint8_t ucCurrentPriority;

		/* Obtain the number of the currently executing interrupt. */
		__asm volatile( "mrs %0, ipsr" : "=r"( ulCurrentInterrupt ) :: "memory" );
 8009c3e:	f3ef 8305 	mrs	r3, IPSR
 8009c42:	60fb      	str	r3, [r7, #12]

		/* Is the interrupt number a user defined interrupt? */
		if( ulCurrentInterrupt >= portFIRST_USER_INTERRUPT_NUMBER )
 8009c44:	68fb      	ldr	r3, [r7, #12]
 8009c46:	2b0f      	cmp	r3, #15
 8009c48:	d914      	bls.n	8009c74 <vPortValidateInterruptPriority+0x3c>
		{
			/* Look up the interrupt's priority. */
			ucCurrentPriority = pcInterruptPriorityRegisters[ ulCurrentInterrupt ];
 8009c4a:	4a17      	ldr	r2, [pc, #92]	; (8009ca8 <vPortValidateInterruptPriority+0x70>)
 8009c4c:	68fb      	ldr	r3, [r7, #12]
 8009c4e:	4413      	add	r3, r2
 8009c50:	781b      	ldrb	r3, [r3, #0]
 8009c52:	72fb      	strb	r3, [r7, #11]
			interrupt entry is as fast and simple as possible.

			The following links provide detailed information:
			http://www.freertos.org/RTOS-Cortex-M3-M4.html
			http://www.freertos.org/FAQHelp.html */
			configASSERT( ucCurrentPriority >= ucMaxSysCallPriority );
 8009c54:	4b15      	ldr	r3, [pc, #84]	; (8009cac <vPortValidateInterruptPriority+0x74>)
 8009c56:	781b      	ldrb	r3, [r3, #0]
 8009c58:	7afa      	ldrb	r2, [r7, #11]
 8009c5a:	429a      	cmp	r2, r3
 8009c5c:	d20a      	bcs.n	8009c74 <vPortValidateInterruptPriority+0x3c>
	__asm volatile
 8009c5e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009c62:	f383 8811 	msr	BASEPRI, r3
 8009c66:	f3bf 8f6f 	isb	sy
 8009c6a:	f3bf 8f4f 	dsb	sy
 8009c6e:	607b      	str	r3, [r7, #4]
}
 8009c70:	bf00      	nop
 8009c72:	e7fe      	b.n	8009c72 <vPortValidateInterruptPriority+0x3a>
		configuration then the correct setting can be achieved on all Cortex-M
		devices by calling NVIC_SetPriorityGrouping( 0 ); before starting the
		scheduler.  Note however that some vendor specific peripheral libraries
		assume a non-zero priority group setting, in which cases using a value
		of zero will result in unpredictable behaviour. */
		configASSERT( ( portAIRCR_REG & portPRIORITY_GROUP_MASK ) <= ulMaxPRIGROUPValue );
 8009c74:	4b0e      	ldr	r3, [pc, #56]	; (8009cb0 <vPortValidateInterruptPriority+0x78>)
 8009c76:	681b      	ldr	r3, [r3, #0]
 8009c78:	f403 62e0 	and.w	r2, r3, #1792	; 0x700
 8009c7c:	4b0d      	ldr	r3, [pc, #52]	; (8009cb4 <vPortValidateInterruptPriority+0x7c>)
 8009c7e:	681b      	ldr	r3, [r3, #0]
 8009c80:	429a      	cmp	r2, r3
 8009c82:	d90a      	bls.n	8009c9a <vPortValidateInterruptPriority+0x62>
	__asm volatile
 8009c84:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009c88:	f383 8811 	msr	BASEPRI, r3
 8009c8c:	f3bf 8f6f 	isb	sy
 8009c90:	f3bf 8f4f 	dsb	sy
 8009c94:	603b      	str	r3, [r7, #0]
}
 8009c96:	bf00      	nop
 8009c98:	e7fe      	b.n	8009c98 <vPortValidateInterruptPriority+0x60>
	}
 8009c9a:	bf00      	nop
 8009c9c:	3714      	adds	r7, #20
 8009c9e:	46bd      	mov	sp, r7
 8009ca0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009ca4:	4770      	bx	lr
 8009ca6:	bf00      	nop
 8009ca8:	e000e3f0 	.word	0xe000e3f0
 8009cac:	200010a4 	.word	0x200010a4
 8009cb0:	e000ed0c 	.word	0xe000ed0c
 8009cb4:	200010a8 	.word	0x200010a8

08009cb8 <pvPortMalloc>:
static size_t xBlockAllocatedBit = 0;

/*-----------------------------------------------------------*/

void *pvPortMalloc( size_t xWantedSize )
{
 8009cb8:	b580      	push	{r7, lr}
 8009cba:	b08a      	sub	sp, #40	; 0x28
 8009cbc:	af00      	add	r7, sp, #0
 8009cbe:	6078      	str	r0, [r7, #4]
BlockLink_t *pxBlock, *pxPreviousBlock, *pxNewBlockLink;
void *pvReturn = NULL;
 8009cc0:	2300      	movs	r3, #0
 8009cc2:	61fb      	str	r3, [r7, #28]

	vTaskSuspendAll();
 8009cc4:	f7fe fc76 	bl	80085b4 <vTaskSuspendAll>
	{
		/* If this is the first call to malloc then the heap will require
		initialisation to setup the list of free blocks. */
		if( pxEnd == NULL )
 8009cc8:	4b5d      	ldr	r3, [pc, #372]	; (8009e40 <pvPortMalloc+0x188>)
 8009cca:	681b      	ldr	r3, [r3, #0]
 8009ccc:	2b00      	cmp	r3, #0
 8009cce:	d101      	bne.n	8009cd4 <pvPortMalloc+0x1c>
		{
			prvHeapInit();
 8009cd0:	f000 f924 	bl	8009f1c <prvHeapInit>

		/* Check the requested block size is not so large that the top bit is
		set.  The top bit of the block size member of the BlockLink_t structure
		is used to determine who owns the block - the application or the
		kernel, so it must be free. */
		if( ( xWantedSize & xBlockAllocatedBit ) == 0 )
 8009cd4:	4b5b      	ldr	r3, [pc, #364]	; (8009e44 <pvPortMalloc+0x18c>)
 8009cd6:	681a      	ldr	r2, [r3, #0]
 8009cd8:	687b      	ldr	r3, [r7, #4]
 8009cda:	4013      	ands	r3, r2
 8009cdc:	2b00      	cmp	r3, #0
 8009cde:	f040 8093 	bne.w	8009e08 <pvPortMalloc+0x150>
		{
			/* The wanted size is increased so it can contain a BlockLink_t
			structure in addition to the requested amount of bytes. */
			if( xWantedSize > 0 )
 8009ce2:	687b      	ldr	r3, [r7, #4]
 8009ce4:	2b00      	cmp	r3, #0
 8009ce6:	d01d      	beq.n	8009d24 <pvPortMalloc+0x6c>
			{
				xWantedSize += xHeapStructSize;
 8009ce8:	2208      	movs	r2, #8
 8009cea:	687b      	ldr	r3, [r7, #4]
 8009cec:	4413      	add	r3, r2
 8009cee:	607b      	str	r3, [r7, #4]

				/* Ensure that blocks are always aligned to the required number
				of bytes. */
				if( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) != 0x00 )
 8009cf0:	687b      	ldr	r3, [r7, #4]
 8009cf2:	f003 0307 	and.w	r3, r3, #7
 8009cf6:	2b00      	cmp	r3, #0
 8009cf8:	d014      	beq.n	8009d24 <pvPortMalloc+0x6c>
				{
					/* Byte alignment required. */
					xWantedSize += ( portBYTE_ALIGNMENT - ( xWantedSize & portBYTE_ALIGNMENT_MASK ) );
 8009cfa:	687b      	ldr	r3, [r7, #4]
 8009cfc:	f023 0307 	bic.w	r3, r3, #7
 8009d00:	3308      	adds	r3, #8
 8009d02:	607b      	str	r3, [r7, #4]
					configASSERT( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) == 0 );
 8009d04:	687b      	ldr	r3, [r7, #4]
 8009d06:	f003 0307 	and.w	r3, r3, #7
 8009d0a:	2b00      	cmp	r3, #0
 8009d0c:	d00a      	beq.n	8009d24 <pvPortMalloc+0x6c>
	__asm volatile
 8009d0e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009d12:	f383 8811 	msr	BASEPRI, r3
 8009d16:	f3bf 8f6f 	isb	sy
 8009d1a:	f3bf 8f4f 	dsb	sy
 8009d1e:	617b      	str	r3, [r7, #20]
}
 8009d20:	bf00      	nop
 8009d22:	e7fe      	b.n	8009d22 <pvPortMalloc+0x6a>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}

			if( ( xWantedSize > 0 ) && ( xWantedSize <= xFreeBytesRemaining ) )
 8009d24:	687b      	ldr	r3, [r7, #4]
 8009d26:	2b00      	cmp	r3, #0
 8009d28:	d06e      	beq.n	8009e08 <pvPortMalloc+0x150>
 8009d2a:	4b47      	ldr	r3, [pc, #284]	; (8009e48 <pvPortMalloc+0x190>)
 8009d2c:	681b      	ldr	r3, [r3, #0]
 8009d2e:	687a      	ldr	r2, [r7, #4]
 8009d30:	429a      	cmp	r2, r3
 8009d32:	d869      	bhi.n	8009e08 <pvPortMalloc+0x150>
			{
				/* Traverse the list from the start	(lowest address) block until
				one	of adequate size is found. */
				pxPreviousBlock = &xStart;
 8009d34:	4b45      	ldr	r3, [pc, #276]	; (8009e4c <pvPortMalloc+0x194>)
 8009d36:	623b      	str	r3, [r7, #32]
				pxBlock = xStart.pxNextFreeBlock;
 8009d38:	4b44      	ldr	r3, [pc, #272]	; (8009e4c <pvPortMalloc+0x194>)
 8009d3a:	681b      	ldr	r3, [r3, #0]
 8009d3c:	627b      	str	r3, [r7, #36]	; 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 8009d3e:	e004      	b.n	8009d4a <pvPortMalloc+0x92>
				{
					pxPreviousBlock = pxBlock;
 8009d40:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009d42:	623b      	str	r3, [r7, #32]
					pxBlock = pxBlock->pxNextFreeBlock;
 8009d44:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009d46:	681b      	ldr	r3, [r3, #0]
 8009d48:	627b      	str	r3, [r7, #36]	; 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 8009d4a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009d4c:	685b      	ldr	r3, [r3, #4]
 8009d4e:	687a      	ldr	r2, [r7, #4]
 8009d50:	429a      	cmp	r2, r3
 8009d52:	d903      	bls.n	8009d5c <pvPortMalloc+0xa4>
 8009d54:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009d56:	681b      	ldr	r3, [r3, #0]
 8009d58:	2b00      	cmp	r3, #0
 8009d5a:	d1f1      	bne.n	8009d40 <pvPortMalloc+0x88>
				}

				/* If the end marker was reached then a block of adequate size
				was	not found. */
				if( pxBlock != pxEnd )
 8009d5c:	4b38      	ldr	r3, [pc, #224]	; (8009e40 <pvPortMalloc+0x188>)
 8009d5e:	681b      	ldr	r3, [r3, #0]
 8009d60:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8009d62:	429a      	cmp	r2, r3
 8009d64:	d050      	beq.n	8009e08 <pvPortMalloc+0x150>
				{
					/* Return the memory space pointed to - jumping over the
					BlockLink_t structure at its start. */
					pvReturn = ( void * ) ( ( ( uint8_t * ) pxPreviousBlock->pxNextFreeBlock ) + xHeapStructSize );
 8009d66:	6a3b      	ldr	r3, [r7, #32]
 8009d68:	681b      	ldr	r3, [r3, #0]
 8009d6a:	2208      	movs	r2, #8
 8009d6c:	4413      	add	r3, r2
 8009d6e:	61fb      	str	r3, [r7, #28]

					/* This block is being returned for use so must be taken out
					of the list of free blocks. */
					pxPreviousBlock->pxNextFreeBlock = pxBlock->pxNextFreeBlock;
 8009d70:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009d72:	681a      	ldr	r2, [r3, #0]
 8009d74:	6a3b      	ldr	r3, [r7, #32]
 8009d76:	601a      	str	r2, [r3, #0]

					/* If the block is larger than required it can be split into
					two. */
					if( ( pxBlock->xBlockSize - xWantedSize ) > heapMINIMUM_BLOCK_SIZE )
 8009d78:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009d7a:	685a      	ldr	r2, [r3, #4]
 8009d7c:	687b      	ldr	r3, [r7, #4]
 8009d7e:	1ad2      	subs	r2, r2, r3
 8009d80:	2308      	movs	r3, #8
 8009d82:	005b      	lsls	r3, r3, #1
 8009d84:	429a      	cmp	r2, r3
 8009d86:	d91f      	bls.n	8009dc8 <pvPortMalloc+0x110>
					{
						/* This block is to be split into two.  Create a new
						block following the number of bytes requested. The void
						cast is used to prevent byte alignment warnings from the
						compiler. */
						pxNewBlockLink = ( void * ) ( ( ( uint8_t * ) pxBlock ) + xWantedSize );
 8009d88:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8009d8a:	687b      	ldr	r3, [r7, #4]
 8009d8c:	4413      	add	r3, r2
 8009d8e:	61bb      	str	r3, [r7, #24]
						configASSERT( ( ( ( size_t ) pxNewBlockLink ) & portBYTE_ALIGNMENT_MASK ) == 0 );
 8009d90:	69bb      	ldr	r3, [r7, #24]
 8009d92:	f003 0307 	and.w	r3, r3, #7
 8009d96:	2b00      	cmp	r3, #0
 8009d98:	d00a      	beq.n	8009db0 <pvPortMalloc+0xf8>
	__asm volatile
 8009d9a:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009d9e:	f383 8811 	msr	BASEPRI, r3
 8009da2:	f3bf 8f6f 	isb	sy
 8009da6:	f3bf 8f4f 	dsb	sy
 8009daa:	613b      	str	r3, [r7, #16]
}
 8009dac:	bf00      	nop
 8009dae:	e7fe      	b.n	8009dae <pvPortMalloc+0xf6>

						/* Calculate the sizes of two blocks split from the
						single block. */
						pxNewBlockLink->xBlockSize = pxBlock->xBlockSize - xWantedSize;
 8009db0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009db2:	685a      	ldr	r2, [r3, #4]
 8009db4:	687b      	ldr	r3, [r7, #4]
 8009db6:	1ad2      	subs	r2, r2, r3
 8009db8:	69bb      	ldr	r3, [r7, #24]
 8009dba:	605a      	str	r2, [r3, #4]
						pxBlock->xBlockSize = xWantedSize;
 8009dbc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009dbe:	687a      	ldr	r2, [r7, #4]
 8009dc0:	605a      	str	r2, [r3, #4]

						/* Insert the new block into the list of free blocks. */
						prvInsertBlockIntoFreeList( pxNewBlockLink );
 8009dc2:	69b8      	ldr	r0, [r7, #24]
 8009dc4:	f000 f90c 	bl	8009fe0 <prvInsertBlockIntoFreeList>
					else
					{
						mtCOVERAGE_TEST_MARKER();
					}

					xFreeBytesRemaining -= pxBlock->xBlockSize;
 8009dc8:	4b1f      	ldr	r3, [pc, #124]	; (8009e48 <pvPortMalloc+0x190>)
 8009dca:	681a      	ldr	r2, [r3, #0]
 8009dcc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009dce:	685b      	ldr	r3, [r3, #4]
 8009dd0:	1ad3      	subs	r3, r2, r3
 8009dd2:	4a1d      	ldr	r2, [pc, #116]	; (8009e48 <pvPortMalloc+0x190>)
 8009dd4:	6013      	str	r3, [r2, #0]

					if( xFreeBytesRemaining < xMinimumEverFreeBytesRemaining )
 8009dd6:	4b1c      	ldr	r3, [pc, #112]	; (8009e48 <pvPortMalloc+0x190>)
 8009dd8:	681a      	ldr	r2, [r3, #0]
 8009dda:	4b1d      	ldr	r3, [pc, #116]	; (8009e50 <pvPortMalloc+0x198>)
 8009ddc:	681b      	ldr	r3, [r3, #0]
 8009dde:	429a      	cmp	r2, r3
 8009de0:	d203      	bcs.n	8009dea <pvPortMalloc+0x132>
					{
						xMinimumEverFreeBytesRemaining = xFreeBytesRemaining;
 8009de2:	4b19      	ldr	r3, [pc, #100]	; (8009e48 <pvPortMalloc+0x190>)
 8009de4:	681b      	ldr	r3, [r3, #0]
 8009de6:	4a1a      	ldr	r2, [pc, #104]	; (8009e50 <pvPortMalloc+0x198>)
 8009de8:	6013      	str	r3, [r2, #0]
						mtCOVERAGE_TEST_MARKER();
					}

					/* The block is being returned - it is allocated and owned
					by the application and has no "next" block. */
					pxBlock->xBlockSize |= xBlockAllocatedBit;
 8009dea:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009dec:	685a      	ldr	r2, [r3, #4]
 8009dee:	4b15      	ldr	r3, [pc, #84]	; (8009e44 <pvPortMalloc+0x18c>)
 8009df0:	681b      	ldr	r3, [r3, #0]
 8009df2:	431a      	orrs	r2, r3
 8009df4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009df6:	605a      	str	r2, [r3, #4]
					pxBlock->pxNextFreeBlock = NULL;
 8009df8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009dfa:	2200      	movs	r2, #0
 8009dfc:	601a      	str	r2, [r3, #0]
					xNumberOfSuccessfulAllocations++;
 8009dfe:	4b15      	ldr	r3, [pc, #84]	; (8009e54 <pvPortMalloc+0x19c>)
 8009e00:	681b      	ldr	r3, [r3, #0]
 8009e02:	3301      	adds	r3, #1
 8009e04:	4a13      	ldr	r2, [pc, #76]	; (8009e54 <pvPortMalloc+0x19c>)
 8009e06:	6013      	str	r3, [r2, #0]
			mtCOVERAGE_TEST_MARKER();
		}

		traceMALLOC( pvReturn, xWantedSize );
	}
	( void ) xTaskResumeAll();
 8009e08:	f7fe fbe2 	bl	80085d0 <xTaskResumeAll>

	#if( configUSE_MALLOC_FAILED_HOOK == 1 )
	{
		if( pvReturn == NULL )
 8009e0c:	69fb      	ldr	r3, [r7, #28]
 8009e0e:	2b00      	cmp	r3, #0
 8009e10:	d101      	bne.n	8009e16 <pvPortMalloc+0x15e>
		{
			extern void vApplicationMallocFailedHook( void );
			vApplicationMallocFailedHook();
 8009e12:	f7f6 fbd1 	bl	80005b8 <vApplicationMallocFailedHook>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif

	configASSERT( ( ( ( size_t ) pvReturn ) & ( size_t ) portBYTE_ALIGNMENT_MASK ) == 0 );
 8009e16:	69fb      	ldr	r3, [r7, #28]
 8009e18:	f003 0307 	and.w	r3, r3, #7
 8009e1c:	2b00      	cmp	r3, #0
 8009e1e:	d00a      	beq.n	8009e36 <pvPortMalloc+0x17e>
	__asm volatile
 8009e20:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009e24:	f383 8811 	msr	BASEPRI, r3
 8009e28:	f3bf 8f6f 	isb	sy
 8009e2c:	f3bf 8f4f 	dsb	sy
 8009e30:	60fb      	str	r3, [r7, #12]
}
 8009e32:	bf00      	nop
 8009e34:	e7fe      	b.n	8009e34 <pvPortMalloc+0x17c>
	return pvReturn;
 8009e36:	69fb      	ldr	r3, [r7, #28]
}
 8009e38:	4618      	mov	r0, r3
 8009e3a:	3728      	adds	r7, #40	; 0x28
 8009e3c:	46bd      	mov	sp, r7
 8009e3e:	bd80      	pop	{r7, pc}
 8009e40:	200090b4 	.word	0x200090b4
 8009e44:	200090c8 	.word	0x200090c8
 8009e48:	200090b8 	.word	0x200090b8
 8009e4c:	200090ac 	.word	0x200090ac
 8009e50:	200090bc 	.word	0x200090bc
 8009e54:	200090c0 	.word	0x200090c0

08009e58 <vPortFree>:
/*-----------------------------------------------------------*/

void vPortFree( void *pv )
{
 8009e58:	b580      	push	{r7, lr}
 8009e5a:	b086      	sub	sp, #24
 8009e5c:	af00      	add	r7, sp, #0
 8009e5e:	6078      	str	r0, [r7, #4]
uint8_t *puc = ( uint8_t * ) pv;
 8009e60:	687b      	ldr	r3, [r7, #4]
 8009e62:	617b      	str	r3, [r7, #20]
BlockLink_t *pxLink;

	if( pv != NULL )
 8009e64:	687b      	ldr	r3, [r7, #4]
 8009e66:	2b00      	cmp	r3, #0
 8009e68:	d04d      	beq.n	8009f06 <vPortFree+0xae>
	{
		/* The memory being freed will have an BlockLink_t structure immediately
		before it. */
		puc -= xHeapStructSize;
 8009e6a:	2308      	movs	r3, #8
 8009e6c:	425b      	negs	r3, r3
 8009e6e:	697a      	ldr	r2, [r7, #20]
 8009e70:	4413      	add	r3, r2
 8009e72:	617b      	str	r3, [r7, #20]

		/* This casting is to keep the compiler from issuing warnings. */
		pxLink = ( void * ) puc;
 8009e74:	697b      	ldr	r3, [r7, #20]
 8009e76:	613b      	str	r3, [r7, #16]

		/* Check the block is actually allocated. */
		configASSERT( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 );
 8009e78:	693b      	ldr	r3, [r7, #16]
 8009e7a:	685a      	ldr	r2, [r3, #4]
 8009e7c:	4b24      	ldr	r3, [pc, #144]	; (8009f10 <vPortFree+0xb8>)
 8009e7e:	681b      	ldr	r3, [r3, #0]
 8009e80:	4013      	ands	r3, r2
 8009e82:	2b00      	cmp	r3, #0
 8009e84:	d10a      	bne.n	8009e9c <vPortFree+0x44>
	__asm volatile
 8009e86:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009e8a:	f383 8811 	msr	BASEPRI, r3
 8009e8e:	f3bf 8f6f 	isb	sy
 8009e92:	f3bf 8f4f 	dsb	sy
 8009e96:	60fb      	str	r3, [r7, #12]
}
 8009e98:	bf00      	nop
 8009e9a:	e7fe      	b.n	8009e9a <vPortFree+0x42>
		configASSERT( pxLink->pxNextFreeBlock == NULL );
 8009e9c:	693b      	ldr	r3, [r7, #16]
 8009e9e:	681b      	ldr	r3, [r3, #0]
 8009ea0:	2b00      	cmp	r3, #0
 8009ea2:	d00a      	beq.n	8009eba <vPortFree+0x62>
	__asm volatile
 8009ea4:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009ea8:	f383 8811 	msr	BASEPRI, r3
 8009eac:	f3bf 8f6f 	isb	sy
 8009eb0:	f3bf 8f4f 	dsb	sy
 8009eb4:	60bb      	str	r3, [r7, #8]
}
 8009eb6:	bf00      	nop
 8009eb8:	e7fe      	b.n	8009eb8 <vPortFree+0x60>

		if( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 )
 8009eba:	693b      	ldr	r3, [r7, #16]
 8009ebc:	685a      	ldr	r2, [r3, #4]
 8009ebe:	4b14      	ldr	r3, [pc, #80]	; (8009f10 <vPortFree+0xb8>)
 8009ec0:	681b      	ldr	r3, [r3, #0]
 8009ec2:	4013      	ands	r3, r2
 8009ec4:	2b00      	cmp	r3, #0
 8009ec6:	d01e      	beq.n	8009f06 <vPortFree+0xae>
		{
			if( pxLink->pxNextFreeBlock == NULL )
 8009ec8:	693b      	ldr	r3, [r7, #16]
 8009eca:	681b      	ldr	r3, [r3, #0]
 8009ecc:	2b00      	cmp	r3, #0
 8009ece:	d11a      	bne.n	8009f06 <vPortFree+0xae>
			{
				/* The block is being returned to the heap - it is no longer
				allocated. */
				pxLink->xBlockSize &= ~xBlockAllocatedBit;
 8009ed0:	693b      	ldr	r3, [r7, #16]
 8009ed2:	685a      	ldr	r2, [r3, #4]
 8009ed4:	4b0e      	ldr	r3, [pc, #56]	; (8009f10 <vPortFree+0xb8>)
 8009ed6:	681b      	ldr	r3, [r3, #0]
 8009ed8:	43db      	mvns	r3, r3
 8009eda:	401a      	ands	r2, r3
 8009edc:	693b      	ldr	r3, [r7, #16]
 8009ede:	605a      	str	r2, [r3, #4]

				vTaskSuspendAll();
 8009ee0:	f7fe fb68 	bl	80085b4 <vTaskSuspendAll>
				{
					/* Add this block to the list of free blocks. */
					xFreeBytesRemaining += pxLink->xBlockSize;
 8009ee4:	693b      	ldr	r3, [r7, #16]
 8009ee6:	685a      	ldr	r2, [r3, #4]
 8009ee8:	4b0a      	ldr	r3, [pc, #40]	; (8009f14 <vPortFree+0xbc>)
 8009eea:	681b      	ldr	r3, [r3, #0]
 8009eec:	4413      	add	r3, r2
 8009eee:	4a09      	ldr	r2, [pc, #36]	; (8009f14 <vPortFree+0xbc>)
 8009ef0:	6013      	str	r3, [r2, #0]
					traceFREE( pv, pxLink->xBlockSize );
					prvInsertBlockIntoFreeList( ( ( BlockLink_t * ) pxLink ) );
 8009ef2:	6938      	ldr	r0, [r7, #16]
 8009ef4:	f000 f874 	bl	8009fe0 <prvInsertBlockIntoFreeList>
					xNumberOfSuccessfulFrees++;
 8009ef8:	4b07      	ldr	r3, [pc, #28]	; (8009f18 <vPortFree+0xc0>)
 8009efa:	681b      	ldr	r3, [r3, #0]
 8009efc:	3301      	adds	r3, #1
 8009efe:	4a06      	ldr	r2, [pc, #24]	; (8009f18 <vPortFree+0xc0>)
 8009f00:	6013      	str	r3, [r2, #0]
				}
				( void ) xTaskResumeAll();
 8009f02:	f7fe fb65 	bl	80085d0 <xTaskResumeAll>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
}
 8009f06:	bf00      	nop
 8009f08:	3718      	adds	r7, #24
 8009f0a:	46bd      	mov	sp, r7
 8009f0c:	bd80      	pop	{r7, pc}
 8009f0e:	bf00      	nop
 8009f10:	200090c8 	.word	0x200090c8
 8009f14:	200090b8 	.word	0x200090b8
 8009f18:	200090c4 	.word	0x200090c4

08009f1c <prvHeapInit>:
	/* This just exists to keep the linker quiet. */
}
/*-----------------------------------------------------------*/

static void prvHeapInit( void )
{
 8009f1c:	b480      	push	{r7}
 8009f1e:	b085      	sub	sp, #20
 8009f20:	af00      	add	r7, sp, #0
BlockLink_t *pxFirstFreeBlock;
uint8_t *pucAlignedHeap;
size_t uxAddress;
size_t xTotalHeapSize = configTOTAL_HEAP_SIZE;
 8009f22:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8009f26:	60bb      	str	r3, [r7, #8]

	/* Ensure the heap starts on a correctly aligned boundary. */
	uxAddress = ( size_t ) ucHeap;
 8009f28:	4b27      	ldr	r3, [pc, #156]	; (8009fc8 <prvHeapInit+0xac>)
 8009f2a:	60fb      	str	r3, [r7, #12]

	if( ( uxAddress & portBYTE_ALIGNMENT_MASK ) != 0 )
 8009f2c:	68fb      	ldr	r3, [r7, #12]
 8009f2e:	f003 0307 	and.w	r3, r3, #7
 8009f32:	2b00      	cmp	r3, #0
 8009f34:	d00c      	beq.n	8009f50 <prvHeapInit+0x34>
	{
		uxAddress += ( portBYTE_ALIGNMENT - 1 );
 8009f36:	68fb      	ldr	r3, [r7, #12]
 8009f38:	3307      	adds	r3, #7
 8009f3a:	60fb      	str	r3, [r7, #12]
		uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 8009f3c:	68fb      	ldr	r3, [r7, #12]
 8009f3e:	f023 0307 	bic.w	r3, r3, #7
 8009f42:	60fb      	str	r3, [r7, #12]
		xTotalHeapSize -= uxAddress - ( size_t ) ucHeap;
 8009f44:	68ba      	ldr	r2, [r7, #8]
 8009f46:	68fb      	ldr	r3, [r7, #12]
 8009f48:	1ad3      	subs	r3, r2, r3
 8009f4a:	4a1f      	ldr	r2, [pc, #124]	; (8009fc8 <prvHeapInit+0xac>)
 8009f4c:	4413      	add	r3, r2
 8009f4e:	60bb      	str	r3, [r7, #8]
	}

	pucAlignedHeap = ( uint8_t * ) uxAddress;
 8009f50:	68fb      	ldr	r3, [r7, #12]
 8009f52:	607b      	str	r3, [r7, #4]

	/* xStart is used to hold a pointer to the first item in the list of free
	blocks.  The void cast is used to prevent compiler warnings. */
	xStart.pxNextFreeBlock = ( void * ) pucAlignedHeap;
 8009f54:	4a1d      	ldr	r2, [pc, #116]	; (8009fcc <prvHeapInit+0xb0>)
 8009f56:	687b      	ldr	r3, [r7, #4]
 8009f58:	6013      	str	r3, [r2, #0]
	xStart.xBlockSize = ( size_t ) 0;
 8009f5a:	4b1c      	ldr	r3, [pc, #112]	; (8009fcc <prvHeapInit+0xb0>)
 8009f5c:	2200      	movs	r2, #0
 8009f5e:	605a      	str	r2, [r3, #4]

	/* pxEnd is used to mark the end of the list of free blocks and is inserted
	at the end of the heap space. */
	uxAddress = ( ( size_t ) pucAlignedHeap ) + xTotalHeapSize;
 8009f60:	687b      	ldr	r3, [r7, #4]
 8009f62:	68ba      	ldr	r2, [r7, #8]
 8009f64:	4413      	add	r3, r2
 8009f66:	60fb      	str	r3, [r7, #12]
	uxAddress -= xHeapStructSize;
 8009f68:	2208      	movs	r2, #8
 8009f6a:	68fb      	ldr	r3, [r7, #12]
 8009f6c:	1a9b      	subs	r3, r3, r2
 8009f6e:	60fb      	str	r3, [r7, #12]
	uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 8009f70:	68fb      	ldr	r3, [r7, #12]
 8009f72:	f023 0307 	bic.w	r3, r3, #7
 8009f76:	60fb      	str	r3, [r7, #12]
	pxEnd = ( void * ) uxAddress;
 8009f78:	68fb      	ldr	r3, [r7, #12]
 8009f7a:	4a15      	ldr	r2, [pc, #84]	; (8009fd0 <prvHeapInit+0xb4>)
 8009f7c:	6013      	str	r3, [r2, #0]
	pxEnd->xBlockSize = 0;
 8009f7e:	4b14      	ldr	r3, [pc, #80]	; (8009fd0 <prvHeapInit+0xb4>)
 8009f80:	681b      	ldr	r3, [r3, #0]
 8009f82:	2200      	movs	r2, #0
 8009f84:	605a      	str	r2, [r3, #4]
	pxEnd->pxNextFreeBlock = NULL;
 8009f86:	4b12      	ldr	r3, [pc, #72]	; (8009fd0 <prvHeapInit+0xb4>)
 8009f88:	681b      	ldr	r3, [r3, #0]
 8009f8a:	2200      	movs	r2, #0
 8009f8c:	601a      	str	r2, [r3, #0]

	/* To start with there is a single free block that is sized to take up the
	entire heap space, minus the space taken by pxEnd. */
	pxFirstFreeBlock = ( void * ) pucAlignedHeap;
 8009f8e:	687b      	ldr	r3, [r7, #4]
 8009f90:	603b      	str	r3, [r7, #0]
	pxFirstFreeBlock->xBlockSize = uxAddress - ( size_t ) pxFirstFreeBlock;
 8009f92:	683b      	ldr	r3, [r7, #0]
 8009f94:	68fa      	ldr	r2, [r7, #12]
 8009f96:	1ad2      	subs	r2, r2, r3
 8009f98:	683b      	ldr	r3, [r7, #0]
 8009f9a:	605a      	str	r2, [r3, #4]
	pxFirstFreeBlock->pxNextFreeBlock = pxEnd;
 8009f9c:	4b0c      	ldr	r3, [pc, #48]	; (8009fd0 <prvHeapInit+0xb4>)
 8009f9e:	681a      	ldr	r2, [r3, #0]
 8009fa0:	683b      	ldr	r3, [r7, #0]
 8009fa2:	601a      	str	r2, [r3, #0]

	/* Only one block exists - and it covers the entire usable heap space. */
	xMinimumEverFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 8009fa4:	683b      	ldr	r3, [r7, #0]
 8009fa6:	685b      	ldr	r3, [r3, #4]
 8009fa8:	4a0a      	ldr	r2, [pc, #40]	; (8009fd4 <prvHeapInit+0xb8>)
 8009faa:	6013      	str	r3, [r2, #0]
	xFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 8009fac:	683b      	ldr	r3, [r7, #0]
 8009fae:	685b      	ldr	r3, [r3, #4]
 8009fb0:	4a09      	ldr	r2, [pc, #36]	; (8009fd8 <prvHeapInit+0xbc>)
 8009fb2:	6013      	str	r3, [r2, #0]

	/* Work out the position of the top bit in a size_t variable. */
	xBlockAllocatedBit = ( ( size_t ) 1 ) << ( ( sizeof( size_t ) * heapBITS_PER_BYTE ) - 1 );
 8009fb4:	4b09      	ldr	r3, [pc, #36]	; (8009fdc <prvHeapInit+0xc0>)
 8009fb6:	f04f 4200 	mov.w	r2, #2147483648	; 0x80000000
 8009fba:	601a      	str	r2, [r3, #0]
}
 8009fbc:	bf00      	nop
 8009fbe:	3714      	adds	r7, #20
 8009fc0:	46bd      	mov	sp, r7
 8009fc2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009fc6:	4770      	bx	lr
 8009fc8:	200010ac 	.word	0x200010ac
 8009fcc:	200090ac 	.word	0x200090ac
 8009fd0:	200090b4 	.word	0x200090b4
 8009fd4:	200090bc 	.word	0x200090bc
 8009fd8:	200090b8 	.word	0x200090b8
 8009fdc:	200090c8 	.word	0x200090c8

08009fe0 <prvInsertBlockIntoFreeList>:
/*-----------------------------------------------------------*/

static void prvInsertBlockIntoFreeList( BlockLink_t *pxBlockToInsert )
{
 8009fe0:	b480      	push	{r7}
 8009fe2:	b085      	sub	sp, #20
 8009fe4:	af00      	add	r7, sp, #0
 8009fe6:	6078      	str	r0, [r7, #4]
BlockLink_t *pxIterator;
uint8_t *puc;

	/* Iterate through the list until a block is found that has a higher address
	than the block being inserted. */
	for( pxIterator = &xStart; pxIterator->pxNextFreeBlock < pxBlockToInsert; pxIterator = pxIterator->pxNextFreeBlock )
 8009fe8:	4b28      	ldr	r3, [pc, #160]	; (800a08c <prvInsertBlockIntoFreeList+0xac>)
 8009fea:	60fb      	str	r3, [r7, #12]
 8009fec:	e002      	b.n	8009ff4 <prvInsertBlockIntoFreeList+0x14>
 8009fee:	68fb      	ldr	r3, [r7, #12]
 8009ff0:	681b      	ldr	r3, [r3, #0]
 8009ff2:	60fb      	str	r3, [r7, #12]
 8009ff4:	68fb      	ldr	r3, [r7, #12]
 8009ff6:	681b      	ldr	r3, [r3, #0]
 8009ff8:	687a      	ldr	r2, [r7, #4]
 8009ffa:	429a      	cmp	r2, r3
 8009ffc:	d8f7      	bhi.n	8009fee <prvInsertBlockIntoFreeList+0xe>
		/* Nothing to do here, just iterate to the right position. */
	}

	/* Do the block being inserted, and the block it is being inserted after
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxIterator;
 8009ffe:	68fb      	ldr	r3, [r7, #12]
 800a000:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxIterator->xBlockSize ) == ( uint8_t * ) pxBlockToInsert )
 800a002:	68fb      	ldr	r3, [r7, #12]
 800a004:	685b      	ldr	r3, [r3, #4]
 800a006:	68ba      	ldr	r2, [r7, #8]
 800a008:	4413      	add	r3, r2
 800a00a:	687a      	ldr	r2, [r7, #4]
 800a00c:	429a      	cmp	r2, r3
 800a00e:	d108      	bne.n	800a022 <prvInsertBlockIntoFreeList+0x42>
	{
		pxIterator->xBlockSize += pxBlockToInsert->xBlockSize;
 800a010:	68fb      	ldr	r3, [r7, #12]
 800a012:	685a      	ldr	r2, [r3, #4]
 800a014:	687b      	ldr	r3, [r7, #4]
 800a016:	685b      	ldr	r3, [r3, #4]
 800a018:	441a      	add	r2, r3
 800a01a:	68fb      	ldr	r3, [r7, #12]
 800a01c:	605a      	str	r2, [r3, #4]
		pxBlockToInsert = pxIterator;
 800a01e:	68fb      	ldr	r3, [r7, #12]
 800a020:	607b      	str	r3, [r7, #4]
		mtCOVERAGE_TEST_MARKER();
	}

	/* Do the block being inserted, and the block it is being inserted before
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxBlockToInsert;
 800a022:	687b      	ldr	r3, [r7, #4]
 800a024:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxBlockToInsert->xBlockSize ) == ( uint8_t * ) pxIterator->pxNextFreeBlock )
 800a026:	687b      	ldr	r3, [r7, #4]
 800a028:	685b      	ldr	r3, [r3, #4]
 800a02a:	68ba      	ldr	r2, [r7, #8]
 800a02c:	441a      	add	r2, r3
 800a02e:	68fb      	ldr	r3, [r7, #12]
 800a030:	681b      	ldr	r3, [r3, #0]
 800a032:	429a      	cmp	r2, r3
 800a034:	d118      	bne.n	800a068 <prvInsertBlockIntoFreeList+0x88>
	{
		if( pxIterator->pxNextFreeBlock != pxEnd )
 800a036:	68fb      	ldr	r3, [r7, #12]
 800a038:	681a      	ldr	r2, [r3, #0]
 800a03a:	4b15      	ldr	r3, [pc, #84]	; (800a090 <prvInsertBlockIntoFreeList+0xb0>)
 800a03c:	681b      	ldr	r3, [r3, #0]
 800a03e:	429a      	cmp	r2, r3
 800a040:	d00d      	beq.n	800a05e <prvInsertBlockIntoFreeList+0x7e>
		{
			/* Form one big block from the two blocks. */
			pxBlockToInsert->xBlockSize += pxIterator->pxNextFreeBlock->xBlockSize;
 800a042:	687b      	ldr	r3, [r7, #4]
 800a044:	685a      	ldr	r2, [r3, #4]
 800a046:	68fb      	ldr	r3, [r7, #12]
 800a048:	681b      	ldr	r3, [r3, #0]
 800a04a:	685b      	ldr	r3, [r3, #4]
 800a04c:	441a      	add	r2, r3
 800a04e:	687b      	ldr	r3, [r7, #4]
 800a050:	605a      	str	r2, [r3, #4]
			pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock->pxNextFreeBlock;
 800a052:	68fb      	ldr	r3, [r7, #12]
 800a054:	681b      	ldr	r3, [r3, #0]
 800a056:	681a      	ldr	r2, [r3, #0]
 800a058:	687b      	ldr	r3, [r7, #4]
 800a05a:	601a      	str	r2, [r3, #0]
 800a05c:	e008      	b.n	800a070 <prvInsertBlockIntoFreeList+0x90>
		}
		else
		{
			pxBlockToInsert->pxNextFreeBlock = pxEnd;
 800a05e:	4b0c      	ldr	r3, [pc, #48]	; (800a090 <prvInsertBlockIntoFreeList+0xb0>)
 800a060:	681a      	ldr	r2, [r3, #0]
 800a062:	687b      	ldr	r3, [r7, #4]
 800a064:	601a      	str	r2, [r3, #0]
 800a066:	e003      	b.n	800a070 <prvInsertBlockIntoFreeList+0x90>
		}
	}
	else
	{
		pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock;
 800a068:	68fb      	ldr	r3, [r7, #12]
 800a06a:	681a      	ldr	r2, [r3, #0]
 800a06c:	687b      	ldr	r3, [r7, #4]
 800a06e:	601a      	str	r2, [r3, #0]

	/* If the block being inserted plugged a gab, so was merged with the block
	before and the block after, then it's pxNextFreeBlock pointer will have
	already been set, and should not be set here as that would make it point
	to itself. */
	if( pxIterator != pxBlockToInsert )
 800a070:	68fa      	ldr	r2, [r7, #12]
 800a072:	687b      	ldr	r3, [r7, #4]
 800a074:	429a      	cmp	r2, r3
 800a076:	d002      	beq.n	800a07e <prvInsertBlockIntoFreeList+0x9e>
	{
		pxIterator->pxNextFreeBlock = pxBlockToInsert;
 800a078:	68fb      	ldr	r3, [r7, #12]
 800a07a:	687a      	ldr	r2, [r7, #4]
 800a07c:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 800a07e:	bf00      	nop
 800a080:	3714      	adds	r7, #20
 800a082:	46bd      	mov	sp, r7
 800a084:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a088:	4770      	bx	lr
 800a08a:	bf00      	nop
 800a08c:	200090ac 	.word	0x200090ac
 800a090:	200090b4 	.word	0x200090b4

0800a094 <HAL_HCD_SOF_Callback>:
  * @brief  SOF callback.
  * @param  hhcd: HCD handle
  * @retval None
  */
void HAL_HCD_SOF_Callback(HCD_HandleTypeDef *hhcd)
{
 800a094:	b580      	push	{r7, lr}
 800a096:	b082      	sub	sp, #8
 800a098:	af00      	add	r7, sp, #0
 800a09a:	6078      	str	r0, [r7, #4]
  USBH_LL_IncTimer(hhcd->pData);
 800a09c:	687b      	ldr	r3, [r7, #4]
 800a09e:	f8d3 3300 	ldr.w	r3, [r3, #768]	; 0x300
 800a0a2:	4618      	mov	r0, r3
 800a0a4:	f7fc fb0a 	bl	80066bc <USBH_LL_IncTimer>
}
 800a0a8:	bf00      	nop
 800a0aa:	3708      	adds	r7, #8
 800a0ac:	46bd      	mov	sp, r7
 800a0ae:	bd80      	pop	{r7, pc}

0800a0b0 <HAL_HCD_Connect_Callback>:
  * @brief  SOF callback.
  * @param  hhcd: HCD handle
  * @retval None
  */
void HAL_HCD_Connect_Callback(HCD_HandleTypeDef *hhcd)
{
 800a0b0:	b580      	push	{r7, lr}
 800a0b2:	b082      	sub	sp, #8
 800a0b4:	af00      	add	r7, sp, #0
 800a0b6:	6078      	str	r0, [r7, #4]
  USBH_LL_Connect(hhcd->pData);
 800a0b8:	687b      	ldr	r3, [r7, #4]
 800a0ba:	f8d3 3300 	ldr.w	r3, [r3, #768]	; 0x300
 800a0be:	4618      	mov	r0, r3
 800a0c0:	f7fc fb4e 	bl	8006760 <USBH_LL_Connect>
}
 800a0c4:	bf00      	nop
 800a0c6:	3708      	adds	r7, #8
 800a0c8:	46bd      	mov	sp, r7
 800a0ca:	bd80      	pop	{r7, pc}

0800a0cc <HAL_HCD_Disconnect_Callback>:
  * @brief  SOF callback.
  * @param  hhcd: HCD handle
  * @retval None
  */
void HAL_HCD_Disconnect_Callback(HCD_HandleTypeDef *hhcd)
{
 800a0cc:	b580      	push	{r7, lr}
 800a0ce:	b082      	sub	sp, #8
 800a0d0:	af00      	add	r7, sp, #0
 800a0d2:	6078      	str	r0, [r7, #4]
  USBH_LL_Disconnect(hhcd->pData);
 800a0d4:	687b      	ldr	r3, [r7, #4]
 800a0d6:	f8d3 3300 	ldr.w	r3, [r3, #768]	; 0x300
 800a0da:	4618      	mov	r0, r3
 800a0dc:	f7fc fb63 	bl	80067a6 <USBH_LL_Disconnect>
}
 800a0e0:	bf00      	nop
 800a0e2:	3708      	adds	r7, #8
 800a0e4:	46bd      	mov	sp, r7
 800a0e6:	bd80      	pop	{r7, pc}

0800a0e8 <HAL_HCD_HC_NotifyURBChange_Callback>:
  * @param  chnum: channel number
  * @param  urb_state: state
  * @retval None
  */
void HAL_HCD_HC_NotifyURBChange_Callback(HCD_HandleTypeDef *hhcd, uint8_t chnum, HCD_URBStateTypeDef urb_state)
{
 800a0e8:	b580      	push	{r7, lr}
 800a0ea:	b082      	sub	sp, #8
 800a0ec:	af00      	add	r7, sp, #0
 800a0ee:	6078      	str	r0, [r7, #4]
 800a0f0:	460b      	mov	r3, r1
 800a0f2:	70fb      	strb	r3, [r7, #3]
 800a0f4:	4613      	mov	r3, r2
 800a0f6:	70bb      	strb	r3, [r7, #2]
  /* To be used with OS to sync URB state with the global state machine */
#if (USBH_USE_OS == 1)
  USBH_LL_NotifyURBChange(hhcd->pData);
 800a0f8:	687b      	ldr	r3, [r7, #4]
 800a0fa:	f8d3 3300 	ldr.w	r3, [r3, #768]	; 0x300
 800a0fe:	4618      	mov	r0, r3
 800a100:	f7fc fb83 	bl	800680a <USBH_LL_NotifyURBChange>
#endif
}
 800a104:	bf00      	nop
 800a106:	3708      	adds	r7, #8
 800a108:	46bd      	mov	sp, r7
 800a10a:	bd80      	pop	{r7, pc}

0800a10c <HAL_HCD_PortEnabled_Callback>:
* @brief  Port Port Enabled callback.
  * @param  hhcd: HCD handle
  * @retval None
  */
void HAL_HCD_PortEnabled_Callback(HCD_HandleTypeDef *hhcd)
{
 800a10c:	b580      	push	{r7, lr}
 800a10e:	b082      	sub	sp, #8
 800a110:	af00      	add	r7, sp, #0
 800a112:	6078      	str	r0, [r7, #4]
  USBH_LL_PortEnabled(hhcd->pData);
 800a114:	687b      	ldr	r3, [r7, #4]
 800a116:	f8d3 3300 	ldr.w	r3, [r3, #768]	; 0x300
 800a11a:	4618      	mov	r0, r3
 800a11c:	f7fc faf8 	bl	8006710 <USBH_LL_PortEnabled>
}
 800a120:	bf00      	nop
 800a122:	3708      	adds	r7, #8
 800a124:	46bd      	mov	sp, r7
 800a126:	bd80      	pop	{r7, pc}

0800a128 <HAL_HCD_PortDisabled_Callback>:
  * @brief  Port Port Disabled callback.
  * @param  hhcd: HCD handle
  * @retval None
  */
void HAL_HCD_PortDisabled_Callback(HCD_HandleTypeDef *hhcd)
{
 800a128:	b580      	push	{r7, lr}
 800a12a:	b082      	sub	sp, #8
 800a12c:	af00      	add	r7, sp, #0
 800a12e:	6078      	str	r0, [r7, #4]
  USBH_LL_PortDisabled(hhcd->pData);
 800a130:	687b      	ldr	r3, [r7, #4]
 800a132:	f8d3 3300 	ldr.w	r3, [r3, #768]	; 0x300
 800a136:	4618      	mov	r0, r3
 800a138:	f7fc fb04 	bl	8006744 <USBH_LL_PortDisabled>
}
 800a13c:	bf00      	nop
 800a13e:	3708      	adds	r7, #8
 800a140:	46bd      	mov	sp, r7
 800a142:	bd80      	pop	{r7, pc}

0800a144 <USBH_LL_Stop>:
  * @brief  Stop the low level portion of the host driver.
  * @param  phost: Host handle
  * @retval USBH status
  */
USBH_StatusTypeDef USBH_LL_Stop(USBH_HandleTypeDef *phost)
{
 800a144:	b580      	push	{r7, lr}
 800a146:	b084      	sub	sp, #16
 800a148:	af00      	add	r7, sp, #0
 800a14a:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800a14c:	2300      	movs	r3, #0
 800a14e:	73fb      	strb	r3, [r7, #15]
  USBH_StatusTypeDef usb_status = USBH_OK;
 800a150:	2300      	movs	r3, #0
 800a152:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_HCD_Stop(phost->pData);
 800a154:	687b      	ldr	r3, [r7, #4]
 800a156:	f8d3 33d0 	ldr.w	r3, [r3, #976]	; 0x3d0
 800a15a:	4618      	mov	r0, r3
 800a15c:	f7f8 fa3e 	bl	80025dc <HAL_HCD_Stop>
 800a160:	4603      	mov	r3, r0
 800a162:	73fb      	strb	r3, [r7, #15]

  usb_status = USBH_Get_USB_Status(hal_status);
 800a164:	7bfb      	ldrb	r3, [r7, #15]
 800a166:	4618      	mov	r0, r3
 800a168:	f000 f808 	bl	800a17c <USBH_Get_USB_Status>
 800a16c:	4603      	mov	r3, r0
 800a16e:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800a170:	7bbb      	ldrb	r3, [r7, #14]
}
 800a172:	4618      	mov	r0, r3
 800a174:	3710      	adds	r7, #16
 800a176:	46bd      	mov	sp, r7
 800a178:	bd80      	pop	{r7, pc}
	...

0800a17c <USBH_Get_USB_Status>:
  * @brief  Returns the USB status depending on the HAL status:
  * @param  hal_status: HAL status
  * @retval USB status
  */
USBH_StatusTypeDef USBH_Get_USB_Status(HAL_StatusTypeDef hal_status)
{
 800a17c:	b480      	push	{r7}
 800a17e:	b085      	sub	sp, #20
 800a180:	af00      	add	r7, sp, #0
 800a182:	4603      	mov	r3, r0
 800a184:	71fb      	strb	r3, [r7, #7]
  USBH_StatusTypeDef usb_status = USBH_OK;
 800a186:	2300      	movs	r3, #0
 800a188:	73fb      	strb	r3, [r7, #15]

  switch (hal_status)
 800a18a:	79fb      	ldrb	r3, [r7, #7]
 800a18c:	2b03      	cmp	r3, #3
 800a18e:	d817      	bhi.n	800a1c0 <USBH_Get_USB_Status+0x44>
 800a190:	a201      	add	r2, pc, #4	; (adr r2, 800a198 <USBH_Get_USB_Status+0x1c>)
 800a192:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800a196:	bf00      	nop
 800a198:	0800a1a9 	.word	0x0800a1a9
 800a19c:	0800a1af 	.word	0x0800a1af
 800a1a0:	0800a1b5 	.word	0x0800a1b5
 800a1a4:	0800a1bb 	.word	0x0800a1bb
  {
    case HAL_OK :
      usb_status = USBH_OK;
 800a1a8:	2300      	movs	r3, #0
 800a1aa:	73fb      	strb	r3, [r7, #15]
    break;
 800a1ac:	e00b      	b.n	800a1c6 <USBH_Get_USB_Status+0x4a>
    case HAL_ERROR :
      usb_status = USBH_FAIL;
 800a1ae:	2302      	movs	r3, #2
 800a1b0:	73fb      	strb	r3, [r7, #15]
    break;
 800a1b2:	e008      	b.n	800a1c6 <USBH_Get_USB_Status+0x4a>
    case HAL_BUSY :
      usb_status = USBH_BUSY;
 800a1b4:	2301      	movs	r3, #1
 800a1b6:	73fb      	strb	r3, [r7, #15]
    break;
 800a1b8:	e005      	b.n	800a1c6 <USBH_Get_USB_Status+0x4a>
    case HAL_TIMEOUT :
      usb_status = USBH_FAIL;
 800a1ba:	2302      	movs	r3, #2
 800a1bc:	73fb      	strb	r3, [r7, #15]
    break;
 800a1be:	e002      	b.n	800a1c6 <USBH_Get_USB_Status+0x4a>
    default :
      usb_status = USBH_FAIL;
 800a1c0:	2302      	movs	r3, #2
 800a1c2:	73fb      	strb	r3, [r7, #15]
    break;
 800a1c4:	bf00      	nop
  }
  return usb_status;
 800a1c6:	7bfb      	ldrb	r3, [r7, #15]
}
 800a1c8:	4618      	mov	r0, r3
 800a1ca:	3714      	adds	r7, #20
 800a1cc:	46bd      	mov	sp, r7
 800a1ce:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a1d2:	4770      	bx	lr

0800a1d4 <__errno>:
 800a1d4:	4b01      	ldr	r3, [pc, #4]	; (800a1dc <__errno+0x8>)
 800a1d6:	6818      	ldr	r0, [r3, #0]
 800a1d8:	4770      	bx	lr
 800a1da:	bf00      	nop
 800a1dc:	20000010 	.word	0x20000010

0800a1e0 <__libc_init_array>:
 800a1e0:	b570      	push	{r4, r5, r6, lr}
 800a1e2:	4d0d      	ldr	r5, [pc, #52]	; (800a218 <__libc_init_array+0x38>)
 800a1e4:	4c0d      	ldr	r4, [pc, #52]	; (800a21c <__libc_init_array+0x3c>)
 800a1e6:	1b64      	subs	r4, r4, r5
 800a1e8:	10a4      	asrs	r4, r4, #2
 800a1ea:	2600      	movs	r6, #0
 800a1ec:	42a6      	cmp	r6, r4
 800a1ee:	d109      	bne.n	800a204 <__libc_init_array+0x24>
 800a1f0:	4d0b      	ldr	r5, [pc, #44]	; (800a220 <__libc_init_array+0x40>)
 800a1f2:	4c0c      	ldr	r4, [pc, #48]	; (800a224 <__libc_init_array+0x44>)
 800a1f4:	f001 fa00 	bl	800b5f8 <_init>
 800a1f8:	1b64      	subs	r4, r4, r5
 800a1fa:	10a4      	asrs	r4, r4, #2
 800a1fc:	2600      	movs	r6, #0
 800a1fe:	42a6      	cmp	r6, r4
 800a200:	d105      	bne.n	800a20e <__libc_init_array+0x2e>
 800a202:	bd70      	pop	{r4, r5, r6, pc}
 800a204:	f855 3b04 	ldr.w	r3, [r5], #4
 800a208:	4798      	blx	r3
 800a20a:	3601      	adds	r6, #1
 800a20c:	e7ee      	b.n	800a1ec <__libc_init_array+0xc>
 800a20e:	f855 3b04 	ldr.w	r3, [r5], #4
 800a212:	4798      	blx	r3
 800a214:	3601      	adds	r6, #1
 800a216:	e7f2      	b.n	800a1fe <__libc_init_array+0x1e>
 800a218:	0800b82c 	.word	0x0800b82c
 800a21c:	0800b82c 	.word	0x0800b82c
 800a220:	0800b82c 	.word	0x0800b82c
 800a224:	0800b830 	.word	0x0800b830

0800a228 <memcpy>:
 800a228:	440a      	add	r2, r1
 800a22a:	4291      	cmp	r1, r2
 800a22c:	f100 33ff 	add.w	r3, r0, #4294967295
 800a230:	d100      	bne.n	800a234 <memcpy+0xc>
 800a232:	4770      	bx	lr
 800a234:	b510      	push	{r4, lr}
 800a236:	f811 4b01 	ldrb.w	r4, [r1], #1
 800a23a:	f803 4f01 	strb.w	r4, [r3, #1]!
 800a23e:	4291      	cmp	r1, r2
 800a240:	d1f9      	bne.n	800a236 <memcpy+0xe>
 800a242:	bd10      	pop	{r4, pc}

0800a244 <memset>:
 800a244:	4402      	add	r2, r0
 800a246:	4603      	mov	r3, r0
 800a248:	4293      	cmp	r3, r2
 800a24a:	d100      	bne.n	800a24e <memset+0xa>
 800a24c:	4770      	bx	lr
 800a24e:	f803 1b01 	strb.w	r1, [r3], #1
 800a252:	e7f9      	b.n	800a248 <memset+0x4>

0800a254 <_free_r>:
 800a254:	b537      	push	{r0, r1, r2, r4, r5, lr}
 800a256:	2900      	cmp	r1, #0
 800a258:	d044      	beq.n	800a2e4 <_free_r+0x90>
 800a25a:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800a25e:	9001      	str	r0, [sp, #4]
 800a260:	2b00      	cmp	r3, #0
 800a262:	f1a1 0404 	sub.w	r4, r1, #4
 800a266:	bfb8      	it	lt
 800a268:	18e4      	addlt	r4, r4, r3
 800a26a:	f000 fc71 	bl	800ab50 <__malloc_lock>
 800a26e:	4a1e      	ldr	r2, [pc, #120]	; (800a2e8 <_free_r+0x94>)
 800a270:	9801      	ldr	r0, [sp, #4]
 800a272:	6813      	ldr	r3, [r2, #0]
 800a274:	b933      	cbnz	r3, 800a284 <_free_r+0x30>
 800a276:	6063      	str	r3, [r4, #4]
 800a278:	6014      	str	r4, [r2, #0]
 800a27a:	b003      	add	sp, #12
 800a27c:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 800a280:	f000 bc6c 	b.w	800ab5c <__malloc_unlock>
 800a284:	42a3      	cmp	r3, r4
 800a286:	d908      	bls.n	800a29a <_free_r+0x46>
 800a288:	6825      	ldr	r5, [r4, #0]
 800a28a:	1961      	adds	r1, r4, r5
 800a28c:	428b      	cmp	r3, r1
 800a28e:	bf01      	itttt	eq
 800a290:	6819      	ldreq	r1, [r3, #0]
 800a292:	685b      	ldreq	r3, [r3, #4]
 800a294:	1949      	addeq	r1, r1, r5
 800a296:	6021      	streq	r1, [r4, #0]
 800a298:	e7ed      	b.n	800a276 <_free_r+0x22>
 800a29a:	461a      	mov	r2, r3
 800a29c:	685b      	ldr	r3, [r3, #4]
 800a29e:	b10b      	cbz	r3, 800a2a4 <_free_r+0x50>
 800a2a0:	42a3      	cmp	r3, r4
 800a2a2:	d9fa      	bls.n	800a29a <_free_r+0x46>
 800a2a4:	6811      	ldr	r1, [r2, #0]
 800a2a6:	1855      	adds	r5, r2, r1
 800a2a8:	42a5      	cmp	r5, r4
 800a2aa:	d10b      	bne.n	800a2c4 <_free_r+0x70>
 800a2ac:	6824      	ldr	r4, [r4, #0]
 800a2ae:	4421      	add	r1, r4
 800a2b0:	1854      	adds	r4, r2, r1
 800a2b2:	42a3      	cmp	r3, r4
 800a2b4:	6011      	str	r1, [r2, #0]
 800a2b6:	d1e0      	bne.n	800a27a <_free_r+0x26>
 800a2b8:	681c      	ldr	r4, [r3, #0]
 800a2ba:	685b      	ldr	r3, [r3, #4]
 800a2bc:	6053      	str	r3, [r2, #4]
 800a2be:	4421      	add	r1, r4
 800a2c0:	6011      	str	r1, [r2, #0]
 800a2c2:	e7da      	b.n	800a27a <_free_r+0x26>
 800a2c4:	d902      	bls.n	800a2cc <_free_r+0x78>
 800a2c6:	230c      	movs	r3, #12
 800a2c8:	6003      	str	r3, [r0, #0]
 800a2ca:	e7d6      	b.n	800a27a <_free_r+0x26>
 800a2cc:	6825      	ldr	r5, [r4, #0]
 800a2ce:	1961      	adds	r1, r4, r5
 800a2d0:	428b      	cmp	r3, r1
 800a2d2:	bf04      	itt	eq
 800a2d4:	6819      	ldreq	r1, [r3, #0]
 800a2d6:	685b      	ldreq	r3, [r3, #4]
 800a2d8:	6063      	str	r3, [r4, #4]
 800a2da:	bf04      	itt	eq
 800a2dc:	1949      	addeq	r1, r1, r5
 800a2de:	6021      	streq	r1, [r4, #0]
 800a2e0:	6054      	str	r4, [r2, #4]
 800a2e2:	e7ca      	b.n	800a27a <_free_r+0x26>
 800a2e4:	b003      	add	sp, #12
 800a2e6:	bd30      	pop	{r4, r5, pc}
 800a2e8:	200093d0 	.word	0x200093d0

0800a2ec <sbrk_aligned>:
 800a2ec:	b570      	push	{r4, r5, r6, lr}
 800a2ee:	4e0e      	ldr	r6, [pc, #56]	; (800a328 <sbrk_aligned+0x3c>)
 800a2f0:	460c      	mov	r4, r1
 800a2f2:	6831      	ldr	r1, [r6, #0]
 800a2f4:	4605      	mov	r5, r0
 800a2f6:	b911      	cbnz	r1, 800a2fe <sbrk_aligned+0x12>
 800a2f8:	f000 f91a 	bl	800a530 <_sbrk_r>
 800a2fc:	6030      	str	r0, [r6, #0]
 800a2fe:	4621      	mov	r1, r4
 800a300:	4628      	mov	r0, r5
 800a302:	f000 f915 	bl	800a530 <_sbrk_r>
 800a306:	1c43      	adds	r3, r0, #1
 800a308:	d00a      	beq.n	800a320 <sbrk_aligned+0x34>
 800a30a:	1cc4      	adds	r4, r0, #3
 800a30c:	f024 0403 	bic.w	r4, r4, #3
 800a310:	42a0      	cmp	r0, r4
 800a312:	d007      	beq.n	800a324 <sbrk_aligned+0x38>
 800a314:	1a21      	subs	r1, r4, r0
 800a316:	4628      	mov	r0, r5
 800a318:	f000 f90a 	bl	800a530 <_sbrk_r>
 800a31c:	3001      	adds	r0, #1
 800a31e:	d101      	bne.n	800a324 <sbrk_aligned+0x38>
 800a320:	f04f 34ff 	mov.w	r4, #4294967295
 800a324:	4620      	mov	r0, r4
 800a326:	bd70      	pop	{r4, r5, r6, pc}
 800a328:	200093d4 	.word	0x200093d4

0800a32c <_malloc_r>:
 800a32c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800a330:	1ccd      	adds	r5, r1, #3
 800a332:	f025 0503 	bic.w	r5, r5, #3
 800a336:	3508      	adds	r5, #8
 800a338:	2d0c      	cmp	r5, #12
 800a33a:	bf38      	it	cc
 800a33c:	250c      	movcc	r5, #12
 800a33e:	2d00      	cmp	r5, #0
 800a340:	4607      	mov	r7, r0
 800a342:	db01      	blt.n	800a348 <_malloc_r+0x1c>
 800a344:	42a9      	cmp	r1, r5
 800a346:	d905      	bls.n	800a354 <_malloc_r+0x28>
 800a348:	230c      	movs	r3, #12
 800a34a:	603b      	str	r3, [r7, #0]
 800a34c:	2600      	movs	r6, #0
 800a34e:	4630      	mov	r0, r6
 800a350:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800a354:	4e2e      	ldr	r6, [pc, #184]	; (800a410 <_malloc_r+0xe4>)
 800a356:	f000 fbfb 	bl	800ab50 <__malloc_lock>
 800a35a:	6833      	ldr	r3, [r6, #0]
 800a35c:	461c      	mov	r4, r3
 800a35e:	bb34      	cbnz	r4, 800a3ae <_malloc_r+0x82>
 800a360:	4629      	mov	r1, r5
 800a362:	4638      	mov	r0, r7
 800a364:	f7ff ffc2 	bl	800a2ec <sbrk_aligned>
 800a368:	1c43      	adds	r3, r0, #1
 800a36a:	4604      	mov	r4, r0
 800a36c:	d14d      	bne.n	800a40a <_malloc_r+0xde>
 800a36e:	6834      	ldr	r4, [r6, #0]
 800a370:	4626      	mov	r6, r4
 800a372:	2e00      	cmp	r6, #0
 800a374:	d140      	bne.n	800a3f8 <_malloc_r+0xcc>
 800a376:	6823      	ldr	r3, [r4, #0]
 800a378:	4631      	mov	r1, r6
 800a37a:	4638      	mov	r0, r7
 800a37c:	eb04 0803 	add.w	r8, r4, r3
 800a380:	f000 f8d6 	bl	800a530 <_sbrk_r>
 800a384:	4580      	cmp	r8, r0
 800a386:	d13a      	bne.n	800a3fe <_malloc_r+0xd2>
 800a388:	6821      	ldr	r1, [r4, #0]
 800a38a:	3503      	adds	r5, #3
 800a38c:	1a6d      	subs	r5, r5, r1
 800a38e:	f025 0503 	bic.w	r5, r5, #3
 800a392:	3508      	adds	r5, #8
 800a394:	2d0c      	cmp	r5, #12
 800a396:	bf38      	it	cc
 800a398:	250c      	movcc	r5, #12
 800a39a:	4629      	mov	r1, r5
 800a39c:	4638      	mov	r0, r7
 800a39e:	f7ff ffa5 	bl	800a2ec <sbrk_aligned>
 800a3a2:	3001      	adds	r0, #1
 800a3a4:	d02b      	beq.n	800a3fe <_malloc_r+0xd2>
 800a3a6:	6823      	ldr	r3, [r4, #0]
 800a3a8:	442b      	add	r3, r5
 800a3aa:	6023      	str	r3, [r4, #0]
 800a3ac:	e00e      	b.n	800a3cc <_malloc_r+0xa0>
 800a3ae:	6822      	ldr	r2, [r4, #0]
 800a3b0:	1b52      	subs	r2, r2, r5
 800a3b2:	d41e      	bmi.n	800a3f2 <_malloc_r+0xc6>
 800a3b4:	2a0b      	cmp	r2, #11
 800a3b6:	d916      	bls.n	800a3e6 <_malloc_r+0xba>
 800a3b8:	1961      	adds	r1, r4, r5
 800a3ba:	42a3      	cmp	r3, r4
 800a3bc:	6025      	str	r5, [r4, #0]
 800a3be:	bf18      	it	ne
 800a3c0:	6059      	strne	r1, [r3, #4]
 800a3c2:	6863      	ldr	r3, [r4, #4]
 800a3c4:	bf08      	it	eq
 800a3c6:	6031      	streq	r1, [r6, #0]
 800a3c8:	5162      	str	r2, [r4, r5]
 800a3ca:	604b      	str	r3, [r1, #4]
 800a3cc:	4638      	mov	r0, r7
 800a3ce:	f104 060b 	add.w	r6, r4, #11
 800a3d2:	f000 fbc3 	bl	800ab5c <__malloc_unlock>
 800a3d6:	f026 0607 	bic.w	r6, r6, #7
 800a3da:	1d23      	adds	r3, r4, #4
 800a3dc:	1af2      	subs	r2, r6, r3
 800a3de:	d0b6      	beq.n	800a34e <_malloc_r+0x22>
 800a3e0:	1b9b      	subs	r3, r3, r6
 800a3e2:	50a3      	str	r3, [r4, r2]
 800a3e4:	e7b3      	b.n	800a34e <_malloc_r+0x22>
 800a3e6:	6862      	ldr	r2, [r4, #4]
 800a3e8:	42a3      	cmp	r3, r4
 800a3ea:	bf0c      	ite	eq
 800a3ec:	6032      	streq	r2, [r6, #0]
 800a3ee:	605a      	strne	r2, [r3, #4]
 800a3f0:	e7ec      	b.n	800a3cc <_malloc_r+0xa0>
 800a3f2:	4623      	mov	r3, r4
 800a3f4:	6864      	ldr	r4, [r4, #4]
 800a3f6:	e7b2      	b.n	800a35e <_malloc_r+0x32>
 800a3f8:	4634      	mov	r4, r6
 800a3fa:	6876      	ldr	r6, [r6, #4]
 800a3fc:	e7b9      	b.n	800a372 <_malloc_r+0x46>
 800a3fe:	230c      	movs	r3, #12
 800a400:	603b      	str	r3, [r7, #0]
 800a402:	4638      	mov	r0, r7
 800a404:	f000 fbaa 	bl	800ab5c <__malloc_unlock>
 800a408:	e7a1      	b.n	800a34e <_malloc_r+0x22>
 800a40a:	6025      	str	r5, [r4, #0]
 800a40c:	e7de      	b.n	800a3cc <_malloc_r+0xa0>
 800a40e:	bf00      	nop
 800a410:	200093d0 	.word	0x200093d0

0800a414 <iprintf>:
 800a414:	b40f      	push	{r0, r1, r2, r3}
 800a416:	4b0a      	ldr	r3, [pc, #40]	; (800a440 <iprintf+0x2c>)
 800a418:	b513      	push	{r0, r1, r4, lr}
 800a41a:	681c      	ldr	r4, [r3, #0]
 800a41c:	b124      	cbz	r4, 800a428 <iprintf+0x14>
 800a41e:	69a3      	ldr	r3, [r4, #24]
 800a420:	b913      	cbnz	r3, 800a428 <iprintf+0x14>
 800a422:	4620      	mov	r0, r4
 800a424:	f000 fa8e 	bl	800a944 <__sinit>
 800a428:	ab05      	add	r3, sp, #20
 800a42a:	9a04      	ldr	r2, [sp, #16]
 800a42c:	68a1      	ldr	r1, [r4, #8]
 800a42e:	9301      	str	r3, [sp, #4]
 800a430:	4620      	mov	r0, r4
 800a432:	f000 fd1f 	bl	800ae74 <_vfiprintf_r>
 800a436:	b002      	add	sp, #8
 800a438:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800a43c:	b004      	add	sp, #16
 800a43e:	4770      	bx	lr
 800a440:	20000010 	.word	0x20000010

0800a444 <_puts_r>:
 800a444:	b570      	push	{r4, r5, r6, lr}
 800a446:	460e      	mov	r6, r1
 800a448:	4605      	mov	r5, r0
 800a44a:	b118      	cbz	r0, 800a454 <_puts_r+0x10>
 800a44c:	6983      	ldr	r3, [r0, #24]
 800a44e:	b90b      	cbnz	r3, 800a454 <_puts_r+0x10>
 800a450:	f000 fa78 	bl	800a944 <__sinit>
 800a454:	69ab      	ldr	r3, [r5, #24]
 800a456:	68ac      	ldr	r4, [r5, #8]
 800a458:	b913      	cbnz	r3, 800a460 <_puts_r+0x1c>
 800a45a:	4628      	mov	r0, r5
 800a45c:	f000 fa72 	bl	800a944 <__sinit>
 800a460:	4b2c      	ldr	r3, [pc, #176]	; (800a514 <_puts_r+0xd0>)
 800a462:	429c      	cmp	r4, r3
 800a464:	d120      	bne.n	800a4a8 <_puts_r+0x64>
 800a466:	686c      	ldr	r4, [r5, #4]
 800a468:	6e63      	ldr	r3, [r4, #100]	; 0x64
 800a46a:	07db      	lsls	r3, r3, #31
 800a46c:	d405      	bmi.n	800a47a <_puts_r+0x36>
 800a46e:	89a3      	ldrh	r3, [r4, #12]
 800a470:	0598      	lsls	r0, r3, #22
 800a472:	d402      	bmi.n	800a47a <_puts_r+0x36>
 800a474:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800a476:	f000 fb03 	bl	800aa80 <__retarget_lock_acquire_recursive>
 800a47a:	89a3      	ldrh	r3, [r4, #12]
 800a47c:	0719      	lsls	r1, r3, #28
 800a47e:	d51d      	bpl.n	800a4bc <_puts_r+0x78>
 800a480:	6923      	ldr	r3, [r4, #16]
 800a482:	b1db      	cbz	r3, 800a4bc <_puts_r+0x78>
 800a484:	3e01      	subs	r6, #1
 800a486:	68a3      	ldr	r3, [r4, #8]
 800a488:	f816 1f01 	ldrb.w	r1, [r6, #1]!
 800a48c:	3b01      	subs	r3, #1
 800a48e:	60a3      	str	r3, [r4, #8]
 800a490:	bb39      	cbnz	r1, 800a4e2 <_puts_r+0x9e>
 800a492:	2b00      	cmp	r3, #0
 800a494:	da38      	bge.n	800a508 <_puts_r+0xc4>
 800a496:	4622      	mov	r2, r4
 800a498:	210a      	movs	r1, #10
 800a49a:	4628      	mov	r0, r5
 800a49c:	f000 f878 	bl	800a590 <__swbuf_r>
 800a4a0:	3001      	adds	r0, #1
 800a4a2:	d011      	beq.n	800a4c8 <_puts_r+0x84>
 800a4a4:	250a      	movs	r5, #10
 800a4a6:	e011      	b.n	800a4cc <_puts_r+0x88>
 800a4a8:	4b1b      	ldr	r3, [pc, #108]	; (800a518 <_puts_r+0xd4>)
 800a4aa:	429c      	cmp	r4, r3
 800a4ac:	d101      	bne.n	800a4b2 <_puts_r+0x6e>
 800a4ae:	68ac      	ldr	r4, [r5, #8]
 800a4b0:	e7da      	b.n	800a468 <_puts_r+0x24>
 800a4b2:	4b1a      	ldr	r3, [pc, #104]	; (800a51c <_puts_r+0xd8>)
 800a4b4:	429c      	cmp	r4, r3
 800a4b6:	bf08      	it	eq
 800a4b8:	68ec      	ldreq	r4, [r5, #12]
 800a4ba:	e7d5      	b.n	800a468 <_puts_r+0x24>
 800a4bc:	4621      	mov	r1, r4
 800a4be:	4628      	mov	r0, r5
 800a4c0:	f000 f8b8 	bl	800a634 <__swsetup_r>
 800a4c4:	2800      	cmp	r0, #0
 800a4c6:	d0dd      	beq.n	800a484 <_puts_r+0x40>
 800a4c8:	f04f 35ff 	mov.w	r5, #4294967295
 800a4cc:	6e63      	ldr	r3, [r4, #100]	; 0x64
 800a4ce:	07da      	lsls	r2, r3, #31
 800a4d0:	d405      	bmi.n	800a4de <_puts_r+0x9a>
 800a4d2:	89a3      	ldrh	r3, [r4, #12]
 800a4d4:	059b      	lsls	r3, r3, #22
 800a4d6:	d402      	bmi.n	800a4de <_puts_r+0x9a>
 800a4d8:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800a4da:	f000 fad2 	bl	800aa82 <__retarget_lock_release_recursive>
 800a4de:	4628      	mov	r0, r5
 800a4e0:	bd70      	pop	{r4, r5, r6, pc}
 800a4e2:	2b00      	cmp	r3, #0
 800a4e4:	da04      	bge.n	800a4f0 <_puts_r+0xac>
 800a4e6:	69a2      	ldr	r2, [r4, #24]
 800a4e8:	429a      	cmp	r2, r3
 800a4ea:	dc06      	bgt.n	800a4fa <_puts_r+0xb6>
 800a4ec:	290a      	cmp	r1, #10
 800a4ee:	d004      	beq.n	800a4fa <_puts_r+0xb6>
 800a4f0:	6823      	ldr	r3, [r4, #0]
 800a4f2:	1c5a      	adds	r2, r3, #1
 800a4f4:	6022      	str	r2, [r4, #0]
 800a4f6:	7019      	strb	r1, [r3, #0]
 800a4f8:	e7c5      	b.n	800a486 <_puts_r+0x42>
 800a4fa:	4622      	mov	r2, r4
 800a4fc:	4628      	mov	r0, r5
 800a4fe:	f000 f847 	bl	800a590 <__swbuf_r>
 800a502:	3001      	adds	r0, #1
 800a504:	d1bf      	bne.n	800a486 <_puts_r+0x42>
 800a506:	e7df      	b.n	800a4c8 <_puts_r+0x84>
 800a508:	6823      	ldr	r3, [r4, #0]
 800a50a:	250a      	movs	r5, #10
 800a50c:	1c5a      	adds	r2, r3, #1
 800a50e:	6022      	str	r2, [r4, #0]
 800a510:	701d      	strb	r5, [r3, #0]
 800a512:	e7db      	b.n	800a4cc <_puts_r+0x88>
 800a514:	0800b7b0 	.word	0x0800b7b0
 800a518:	0800b7d0 	.word	0x0800b7d0
 800a51c:	0800b790 	.word	0x0800b790

0800a520 <puts>:
 800a520:	4b02      	ldr	r3, [pc, #8]	; (800a52c <puts+0xc>)
 800a522:	4601      	mov	r1, r0
 800a524:	6818      	ldr	r0, [r3, #0]
 800a526:	f7ff bf8d 	b.w	800a444 <_puts_r>
 800a52a:	bf00      	nop
 800a52c:	20000010 	.word	0x20000010

0800a530 <_sbrk_r>:
 800a530:	b538      	push	{r3, r4, r5, lr}
 800a532:	4d06      	ldr	r5, [pc, #24]	; (800a54c <_sbrk_r+0x1c>)
 800a534:	2300      	movs	r3, #0
 800a536:	4604      	mov	r4, r0
 800a538:	4608      	mov	r0, r1
 800a53a:	602b      	str	r3, [r5, #0]
 800a53c:	f7f7 f888 	bl	8001650 <_sbrk>
 800a540:	1c43      	adds	r3, r0, #1
 800a542:	d102      	bne.n	800a54a <_sbrk_r+0x1a>
 800a544:	682b      	ldr	r3, [r5, #0]
 800a546:	b103      	cbz	r3, 800a54a <_sbrk_r+0x1a>
 800a548:	6023      	str	r3, [r4, #0]
 800a54a:	bd38      	pop	{r3, r4, r5, pc}
 800a54c:	200093dc 	.word	0x200093dc

0800a550 <siprintf>:
 800a550:	b40e      	push	{r1, r2, r3}
 800a552:	b500      	push	{lr}
 800a554:	b09c      	sub	sp, #112	; 0x70
 800a556:	ab1d      	add	r3, sp, #116	; 0x74
 800a558:	9002      	str	r0, [sp, #8]
 800a55a:	9006      	str	r0, [sp, #24]
 800a55c:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
 800a560:	4809      	ldr	r0, [pc, #36]	; (800a588 <siprintf+0x38>)
 800a562:	9107      	str	r1, [sp, #28]
 800a564:	9104      	str	r1, [sp, #16]
 800a566:	4909      	ldr	r1, [pc, #36]	; (800a58c <siprintf+0x3c>)
 800a568:	f853 2b04 	ldr.w	r2, [r3], #4
 800a56c:	9105      	str	r1, [sp, #20]
 800a56e:	6800      	ldr	r0, [r0, #0]
 800a570:	9301      	str	r3, [sp, #4]
 800a572:	a902      	add	r1, sp, #8
 800a574:	f000 fb54 	bl	800ac20 <_svfiprintf_r>
 800a578:	9b02      	ldr	r3, [sp, #8]
 800a57a:	2200      	movs	r2, #0
 800a57c:	701a      	strb	r2, [r3, #0]
 800a57e:	b01c      	add	sp, #112	; 0x70
 800a580:	f85d eb04 	ldr.w	lr, [sp], #4
 800a584:	b003      	add	sp, #12
 800a586:	4770      	bx	lr
 800a588:	20000010 	.word	0x20000010
 800a58c:	ffff0208 	.word	0xffff0208

0800a590 <__swbuf_r>:
 800a590:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800a592:	460e      	mov	r6, r1
 800a594:	4614      	mov	r4, r2
 800a596:	4605      	mov	r5, r0
 800a598:	b118      	cbz	r0, 800a5a2 <__swbuf_r+0x12>
 800a59a:	6983      	ldr	r3, [r0, #24]
 800a59c:	b90b      	cbnz	r3, 800a5a2 <__swbuf_r+0x12>
 800a59e:	f000 f9d1 	bl	800a944 <__sinit>
 800a5a2:	4b21      	ldr	r3, [pc, #132]	; (800a628 <__swbuf_r+0x98>)
 800a5a4:	429c      	cmp	r4, r3
 800a5a6:	d12b      	bne.n	800a600 <__swbuf_r+0x70>
 800a5a8:	686c      	ldr	r4, [r5, #4]
 800a5aa:	69a3      	ldr	r3, [r4, #24]
 800a5ac:	60a3      	str	r3, [r4, #8]
 800a5ae:	89a3      	ldrh	r3, [r4, #12]
 800a5b0:	071a      	lsls	r2, r3, #28
 800a5b2:	d52f      	bpl.n	800a614 <__swbuf_r+0x84>
 800a5b4:	6923      	ldr	r3, [r4, #16]
 800a5b6:	b36b      	cbz	r3, 800a614 <__swbuf_r+0x84>
 800a5b8:	6923      	ldr	r3, [r4, #16]
 800a5ba:	6820      	ldr	r0, [r4, #0]
 800a5bc:	1ac0      	subs	r0, r0, r3
 800a5be:	6963      	ldr	r3, [r4, #20]
 800a5c0:	b2f6      	uxtb	r6, r6
 800a5c2:	4283      	cmp	r3, r0
 800a5c4:	4637      	mov	r7, r6
 800a5c6:	dc04      	bgt.n	800a5d2 <__swbuf_r+0x42>
 800a5c8:	4621      	mov	r1, r4
 800a5ca:	4628      	mov	r0, r5
 800a5cc:	f000 f926 	bl	800a81c <_fflush_r>
 800a5d0:	bb30      	cbnz	r0, 800a620 <__swbuf_r+0x90>
 800a5d2:	68a3      	ldr	r3, [r4, #8]
 800a5d4:	3b01      	subs	r3, #1
 800a5d6:	60a3      	str	r3, [r4, #8]
 800a5d8:	6823      	ldr	r3, [r4, #0]
 800a5da:	1c5a      	adds	r2, r3, #1
 800a5dc:	6022      	str	r2, [r4, #0]
 800a5de:	701e      	strb	r6, [r3, #0]
 800a5e0:	6963      	ldr	r3, [r4, #20]
 800a5e2:	3001      	adds	r0, #1
 800a5e4:	4283      	cmp	r3, r0
 800a5e6:	d004      	beq.n	800a5f2 <__swbuf_r+0x62>
 800a5e8:	89a3      	ldrh	r3, [r4, #12]
 800a5ea:	07db      	lsls	r3, r3, #31
 800a5ec:	d506      	bpl.n	800a5fc <__swbuf_r+0x6c>
 800a5ee:	2e0a      	cmp	r6, #10
 800a5f0:	d104      	bne.n	800a5fc <__swbuf_r+0x6c>
 800a5f2:	4621      	mov	r1, r4
 800a5f4:	4628      	mov	r0, r5
 800a5f6:	f000 f911 	bl	800a81c <_fflush_r>
 800a5fa:	b988      	cbnz	r0, 800a620 <__swbuf_r+0x90>
 800a5fc:	4638      	mov	r0, r7
 800a5fe:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800a600:	4b0a      	ldr	r3, [pc, #40]	; (800a62c <__swbuf_r+0x9c>)
 800a602:	429c      	cmp	r4, r3
 800a604:	d101      	bne.n	800a60a <__swbuf_r+0x7a>
 800a606:	68ac      	ldr	r4, [r5, #8]
 800a608:	e7cf      	b.n	800a5aa <__swbuf_r+0x1a>
 800a60a:	4b09      	ldr	r3, [pc, #36]	; (800a630 <__swbuf_r+0xa0>)
 800a60c:	429c      	cmp	r4, r3
 800a60e:	bf08      	it	eq
 800a610:	68ec      	ldreq	r4, [r5, #12]
 800a612:	e7ca      	b.n	800a5aa <__swbuf_r+0x1a>
 800a614:	4621      	mov	r1, r4
 800a616:	4628      	mov	r0, r5
 800a618:	f000 f80c 	bl	800a634 <__swsetup_r>
 800a61c:	2800      	cmp	r0, #0
 800a61e:	d0cb      	beq.n	800a5b8 <__swbuf_r+0x28>
 800a620:	f04f 37ff 	mov.w	r7, #4294967295
 800a624:	e7ea      	b.n	800a5fc <__swbuf_r+0x6c>
 800a626:	bf00      	nop
 800a628:	0800b7b0 	.word	0x0800b7b0
 800a62c:	0800b7d0 	.word	0x0800b7d0
 800a630:	0800b790 	.word	0x0800b790

0800a634 <__swsetup_r>:
 800a634:	4b32      	ldr	r3, [pc, #200]	; (800a700 <__swsetup_r+0xcc>)
 800a636:	b570      	push	{r4, r5, r6, lr}
 800a638:	681d      	ldr	r5, [r3, #0]
 800a63a:	4606      	mov	r6, r0
 800a63c:	460c      	mov	r4, r1
 800a63e:	b125      	cbz	r5, 800a64a <__swsetup_r+0x16>
 800a640:	69ab      	ldr	r3, [r5, #24]
 800a642:	b913      	cbnz	r3, 800a64a <__swsetup_r+0x16>
 800a644:	4628      	mov	r0, r5
 800a646:	f000 f97d 	bl	800a944 <__sinit>
 800a64a:	4b2e      	ldr	r3, [pc, #184]	; (800a704 <__swsetup_r+0xd0>)
 800a64c:	429c      	cmp	r4, r3
 800a64e:	d10f      	bne.n	800a670 <__swsetup_r+0x3c>
 800a650:	686c      	ldr	r4, [r5, #4]
 800a652:	89a3      	ldrh	r3, [r4, #12]
 800a654:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 800a658:	0719      	lsls	r1, r3, #28
 800a65a:	d42c      	bmi.n	800a6b6 <__swsetup_r+0x82>
 800a65c:	06dd      	lsls	r5, r3, #27
 800a65e:	d411      	bmi.n	800a684 <__swsetup_r+0x50>
 800a660:	2309      	movs	r3, #9
 800a662:	6033      	str	r3, [r6, #0]
 800a664:	f042 0340 	orr.w	r3, r2, #64	; 0x40
 800a668:	81a3      	strh	r3, [r4, #12]
 800a66a:	f04f 30ff 	mov.w	r0, #4294967295
 800a66e:	e03e      	b.n	800a6ee <__swsetup_r+0xba>
 800a670:	4b25      	ldr	r3, [pc, #148]	; (800a708 <__swsetup_r+0xd4>)
 800a672:	429c      	cmp	r4, r3
 800a674:	d101      	bne.n	800a67a <__swsetup_r+0x46>
 800a676:	68ac      	ldr	r4, [r5, #8]
 800a678:	e7eb      	b.n	800a652 <__swsetup_r+0x1e>
 800a67a:	4b24      	ldr	r3, [pc, #144]	; (800a70c <__swsetup_r+0xd8>)
 800a67c:	429c      	cmp	r4, r3
 800a67e:	bf08      	it	eq
 800a680:	68ec      	ldreq	r4, [r5, #12]
 800a682:	e7e6      	b.n	800a652 <__swsetup_r+0x1e>
 800a684:	0758      	lsls	r0, r3, #29
 800a686:	d512      	bpl.n	800a6ae <__swsetup_r+0x7a>
 800a688:	6b61      	ldr	r1, [r4, #52]	; 0x34
 800a68a:	b141      	cbz	r1, 800a69e <__swsetup_r+0x6a>
 800a68c:	f104 0344 	add.w	r3, r4, #68	; 0x44
 800a690:	4299      	cmp	r1, r3
 800a692:	d002      	beq.n	800a69a <__swsetup_r+0x66>
 800a694:	4630      	mov	r0, r6
 800a696:	f7ff fddd 	bl	800a254 <_free_r>
 800a69a:	2300      	movs	r3, #0
 800a69c:	6363      	str	r3, [r4, #52]	; 0x34
 800a69e:	89a3      	ldrh	r3, [r4, #12]
 800a6a0:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 800a6a4:	81a3      	strh	r3, [r4, #12]
 800a6a6:	2300      	movs	r3, #0
 800a6a8:	6063      	str	r3, [r4, #4]
 800a6aa:	6923      	ldr	r3, [r4, #16]
 800a6ac:	6023      	str	r3, [r4, #0]
 800a6ae:	89a3      	ldrh	r3, [r4, #12]
 800a6b0:	f043 0308 	orr.w	r3, r3, #8
 800a6b4:	81a3      	strh	r3, [r4, #12]
 800a6b6:	6923      	ldr	r3, [r4, #16]
 800a6b8:	b94b      	cbnz	r3, 800a6ce <__swsetup_r+0x9a>
 800a6ba:	89a3      	ldrh	r3, [r4, #12]
 800a6bc:	f403 7320 	and.w	r3, r3, #640	; 0x280
 800a6c0:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800a6c4:	d003      	beq.n	800a6ce <__swsetup_r+0x9a>
 800a6c6:	4621      	mov	r1, r4
 800a6c8:	4630      	mov	r0, r6
 800a6ca:	f000 fa01 	bl	800aad0 <__smakebuf_r>
 800a6ce:	89a0      	ldrh	r0, [r4, #12]
 800a6d0:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 800a6d4:	f010 0301 	ands.w	r3, r0, #1
 800a6d8:	d00a      	beq.n	800a6f0 <__swsetup_r+0xbc>
 800a6da:	2300      	movs	r3, #0
 800a6dc:	60a3      	str	r3, [r4, #8]
 800a6de:	6963      	ldr	r3, [r4, #20]
 800a6e0:	425b      	negs	r3, r3
 800a6e2:	61a3      	str	r3, [r4, #24]
 800a6e4:	6923      	ldr	r3, [r4, #16]
 800a6e6:	b943      	cbnz	r3, 800a6fa <__swsetup_r+0xc6>
 800a6e8:	f010 0080 	ands.w	r0, r0, #128	; 0x80
 800a6ec:	d1ba      	bne.n	800a664 <__swsetup_r+0x30>
 800a6ee:	bd70      	pop	{r4, r5, r6, pc}
 800a6f0:	0781      	lsls	r1, r0, #30
 800a6f2:	bf58      	it	pl
 800a6f4:	6963      	ldrpl	r3, [r4, #20]
 800a6f6:	60a3      	str	r3, [r4, #8]
 800a6f8:	e7f4      	b.n	800a6e4 <__swsetup_r+0xb0>
 800a6fa:	2000      	movs	r0, #0
 800a6fc:	e7f7      	b.n	800a6ee <__swsetup_r+0xba>
 800a6fe:	bf00      	nop
 800a700:	20000010 	.word	0x20000010
 800a704:	0800b7b0 	.word	0x0800b7b0
 800a708:	0800b7d0 	.word	0x0800b7d0
 800a70c:	0800b790 	.word	0x0800b790

0800a710 <__sflush_r>:
 800a710:	898a      	ldrh	r2, [r1, #12]
 800a712:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800a716:	4605      	mov	r5, r0
 800a718:	0710      	lsls	r0, r2, #28
 800a71a:	460c      	mov	r4, r1
 800a71c:	d458      	bmi.n	800a7d0 <__sflush_r+0xc0>
 800a71e:	684b      	ldr	r3, [r1, #4]
 800a720:	2b00      	cmp	r3, #0
 800a722:	dc05      	bgt.n	800a730 <__sflush_r+0x20>
 800a724:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 800a726:	2b00      	cmp	r3, #0
 800a728:	dc02      	bgt.n	800a730 <__sflush_r+0x20>
 800a72a:	2000      	movs	r0, #0
 800a72c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800a730:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 800a732:	2e00      	cmp	r6, #0
 800a734:	d0f9      	beq.n	800a72a <__sflush_r+0x1a>
 800a736:	2300      	movs	r3, #0
 800a738:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 800a73c:	682f      	ldr	r7, [r5, #0]
 800a73e:	602b      	str	r3, [r5, #0]
 800a740:	d032      	beq.n	800a7a8 <__sflush_r+0x98>
 800a742:	6d60      	ldr	r0, [r4, #84]	; 0x54
 800a744:	89a3      	ldrh	r3, [r4, #12]
 800a746:	075a      	lsls	r2, r3, #29
 800a748:	d505      	bpl.n	800a756 <__sflush_r+0x46>
 800a74a:	6863      	ldr	r3, [r4, #4]
 800a74c:	1ac0      	subs	r0, r0, r3
 800a74e:	6b63      	ldr	r3, [r4, #52]	; 0x34
 800a750:	b10b      	cbz	r3, 800a756 <__sflush_r+0x46>
 800a752:	6c23      	ldr	r3, [r4, #64]	; 0x40
 800a754:	1ac0      	subs	r0, r0, r3
 800a756:	2300      	movs	r3, #0
 800a758:	4602      	mov	r2, r0
 800a75a:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 800a75c:	6a21      	ldr	r1, [r4, #32]
 800a75e:	4628      	mov	r0, r5
 800a760:	47b0      	blx	r6
 800a762:	1c43      	adds	r3, r0, #1
 800a764:	89a3      	ldrh	r3, [r4, #12]
 800a766:	d106      	bne.n	800a776 <__sflush_r+0x66>
 800a768:	6829      	ldr	r1, [r5, #0]
 800a76a:	291d      	cmp	r1, #29
 800a76c:	d82c      	bhi.n	800a7c8 <__sflush_r+0xb8>
 800a76e:	4a2a      	ldr	r2, [pc, #168]	; (800a818 <__sflush_r+0x108>)
 800a770:	40ca      	lsrs	r2, r1
 800a772:	07d6      	lsls	r6, r2, #31
 800a774:	d528      	bpl.n	800a7c8 <__sflush_r+0xb8>
 800a776:	2200      	movs	r2, #0
 800a778:	6062      	str	r2, [r4, #4]
 800a77a:	04d9      	lsls	r1, r3, #19
 800a77c:	6922      	ldr	r2, [r4, #16]
 800a77e:	6022      	str	r2, [r4, #0]
 800a780:	d504      	bpl.n	800a78c <__sflush_r+0x7c>
 800a782:	1c42      	adds	r2, r0, #1
 800a784:	d101      	bne.n	800a78a <__sflush_r+0x7a>
 800a786:	682b      	ldr	r3, [r5, #0]
 800a788:	b903      	cbnz	r3, 800a78c <__sflush_r+0x7c>
 800a78a:	6560      	str	r0, [r4, #84]	; 0x54
 800a78c:	6b61      	ldr	r1, [r4, #52]	; 0x34
 800a78e:	602f      	str	r7, [r5, #0]
 800a790:	2900      	cmp	r1, #0
 800a792:	d0ca      	beq.n	800a72a <__sflush_r+0x1a>
 800a794:	f104 0344 	add.w	r3, r4, #68	; 0x44
 800a798:	4299      	cmp	r1, r3
 800a79a:	d002      	beq.n	800a7a2 <__sflush_r+0x92>
 800a79c:	4628      	mov	r0, r5
 800a79e:	f7ff fd59 	bl	800a254 <_free_r>
 800a7a2:	2000      	movs	r0, #0
 800a7a4:	6360      	str	r0, [r4, #52]	; 0x34
 800a7a6:	e7c1      	b.n	800a72c <__sflush_r+0x1c>
 800a7a8:	6a21      	ldr	r1, [r4, #32]
 800a7aa:	2301      	movs	r3, #1
 800a7ac:	4628      	mov	r0, r5
 800a7ae:	47b0      	blx	r6
 800a7b0:	1c41      	adds	r1, r0, #1
 800a7b2:	d1c7      	bne.n	800a744 <__sflush_r+0x34>
 800a7b4:	682b      	ldr	r3, [r5, #0]
 800a7b6:	2b00      	cmp	r3, #0
 800a7b8:	d0c4      	beq.n	800a744 <__sflush_r+0x34>
 800a7ba:	2b1d      	cmp	r3, #29
 800a7bc:	d001      	beq.n	800a7c2 <__sflush_r+0xb2>
 800a7be:	2b16      	cmp	r3, #22
 800a7c0:	d101      	bne.n	800a7c6 <__sflush_r+0xb6>
 800a7c2:	602f      	str	r7, [r5, #0]
 800a7c4:	e7b1      	b.n	800a72a <__sflush_r+0x1a>
 800a7c6:	89a3      	ldrh	r3, [r4, #12]
 800a7c8:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800a7cc:	81a3      	strh	r3, [r4, #12]
 800a7ce:	e7ad      	b.n	800a72c <__sflush_r+0x1c>
 800a7d0:	690f      	ldr	r7, [r1, #16]
 800a7d2:	2f00      	cmp	r7, #0
 800a7d4:	d0a9      	beq.n	800a72a <__sflush_r+0x1a>
 800a7d6:	0793      	lsls	r3, r2, #30
 800a7d8:	680e      	ldr	r6, [r1, #0]
 800a7da:	bf08      	it	eq
 800a7dc:	694b      	ldreq	r3, [r1, #20]
 800a7de:	600f      	str	r7, [r1, #0]
 800a7e0:	bf18      	it	ne
 800a7e2:	2300      	movne	r3, #0
 800a7e4:	eba6 0807 	sub.w	r8, r6, r7
 800a7e8:	608b      	str	r3, [r1, #8]
 800a7ea:	f1b8 0f00 	cmp.w	r8, #0
 800a7ee:	dd9c      	ble.n	800a72a <__sflush_r+0x1a>
 800a7f0:	6a21      	ldr	r1, [r4, #32]
 800a7f2:	6aa6      	ldr	r6, [r4, #40]	; 0x28
 800a7f4:	4643      	mov	r3, r8
 800a7f6:	463a      	mov	r2, r7
 800a7f8:	4628      	mov	r0, r5
 800a7fa:	47b0      	blx	r6
 800a7fc:	2800      	cmp	r0, #0
 800a7fe:	dc06      	bgt.n	800a80e <__sflush_r+0xfe>
 800a800:	89a3      	ldrh	r3, [r4, #12]
 800a802:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800a806:	81a3      	strh	r3, [r4, #12]
 800a808:	f04f 30ff 	mov.w	r0, #4294967295
 800a80c:	e78e      	b.n	800a72c <__sflush_r+0x1c>
 800a80e:	4407      	add	r7, r0
 800a810:	eba8 0800 	sub.w	r8, r8, r0
 800a814:	e7e9      	b.n	800a7ea <__sflush_r+0xda>
 800a816:	bf00      	nop
 800a818:	20400001 	.word	0x20400001

0800a81c <_fflush_r>:
 800a81c:	b538      	push	{r3, r4, r5, lr}
 800a81e:	690b      	ldr	r3, [r1, #16]
 800a820:	4605      	mov	r5, r0
 800a822:	460c      	mov	r4, r1
 800a824:	b913      	cbnz	r3, 800a82c <_fflush_r+0x10>
 800a826:	2500      	movs	r5, #0
 800a828:	4628      	mov	r0, r5
 800a82a:	bd38      	pop	{r3, r4, r5, pc}
 800a82c:	b118      	cbz	r0, 800a836 <_fflush_r+0x1a>
 800a82e:	6983      	ldr	r3, [r0, #24]
 800a830:	b90b      	cbnz	r3, 800a836 <_fflush_r+0x1a>
 800a832:	f000 f887 	bl	800a944 <__sinit>
 800a836:	4b14      	ldr	r3, [pc, #80]	; (800a888 <_fflush_r+0x6c>)
 800a838:	429c      	cmp	r4, r3
 800a83a:	d11b      	bne.n	800a874 <_fflush_r+0x58>
 800a83c:	686c      	ldr	r4, [r5, #4]
 800a83e:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800a842:	2b00      	cmp	r3, #0
 800a844:	d0ef      	beq.n	800a826 <_fflush_r+0xa>
 800a846:	6e62      	ldr	r2, [r4, #100]	; 0x64
 800a848:	07d0      	lsls	r0, r2, #31
 800a84a:	d404      	bmi.n	800a856 <_fflush_r+0x3a>
 800a84c:	0599      	lsls	r1, r3, #22
 800a84e:	d402      	bmi.n	800a856 <_fflush_r+0x3a>
 800a850:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800a852:	f000 f915 	bl	800aa80 <__retarget_lock_acquire_recursive>
 800a856:	4628      	mov	r0, r5
 800a858:	4621      	mov	r1, r4
 800a85a:	f7ff ff59 	bl	800a710 <__sflush_r>
 800a85e:	6e63      	ldr	r3, [r4, #100]	; 0x64
 800a860:	07da      	lsls	r2, r3, #31
 800a862:	4605      	mov	r5, r0
 800a864:	d4e0      	bmi.n	800a828 <_fflush_r+0xc>
 800a866:	89a3      	ldrh	r3, [r4, #12]
 800a868:	059b      	lsls	r3, r3, #22
 800a86a:	d4dd      	bmi.n	800a828 <_fflush_r+0xc>
 800a86c:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800a86e:	f000 f908 	bl	800aa82 <__retarget_lock_release_recursive>
 800a872:	e7d9      	b.n	800a828 <_fflush_r+0xc>
 800a874:	4b05      	ldr	r3, [pc, #20]	; (800a88c <_fflush_r+0x70>)
 800a876:	429c      	cmp	r4, r3
 800a878:	d101      	bne.n	800a87e <_fflush_r+0x62>
 800a87a:	68ac      	ldr	r4, [r5, #8]
 800a87c:	e7df      	b.n	800a83e <_fflush_r+0x22>
 800a87e:	4b04      	ldr	r3, [pc, #16]	; (800a890 <_fflush_r+0x74>)
 800a880:	429c      	cmp	r4, r3
 800a882:	bf08      	it	eq
 800a884:	68ec      	ldreq	r4, [r5, #12]
 800a886:	e7da      	b.n	800a83e <_fflush_r+0x22>
 800a888:	0800b7b0 	.word	0x0800b7b0
 800a88c:	0800b7d0 	.word	0x0800b7d0
 800a890:	0800b790 	.word	0x0800b790

0800a894 <std>:
 800a894:	2300      	movs	r3, #0
 800a896:	b510      	push	{r4, lr}
 800a898:	4604      	mov	r4, r0
 800a89a:	e9c0 3300 	strd	r3, r3, [r0]
 800a89e:	e9c0 3304 	strd	r3, r3, [r0, #16]
 800a8a2:	6083      	str	r3, [r0, #8]
 800a8a4:	8181      	strh	r1, [r0, #12]
 800a8a6:	6643      	str	r3, [r0, #100]	; 0x64
 800a8a8:	81c2      	strh	r2, [r0, #14]
 800a8aa:	6183      	str	r3, [r0, #24]
 800a8ac:	4619      	mov	r1, r3
 800a8ae:	2208      	movs	r2, #8
 800a8b0:	305c      	adds	r0, #92	; 0x5c
 800a8b2:	f7ff fcc7 	bl	800a244 <memset>
 800a8b6:	4b05      	ldr	r3, [pc, #20]	; (800a8cc <std+0x38>)
 800a8b8:	6263      	str	r3, [r4, #36]	; 0x24
 800a8ba:	4b05      	ldr	r3, [pc, #20]	; (800a8d0 <std+0x3c>)
 800a8bc:	62a3      	str	r3, [r4, #40]	; 0x28
 800a8be:	4b05      	ldr	r3, [pc, #20]	; (800a8d4 <std+0x40>)
 800a8c0:	62e3      	str	r3, [r4, #44]	; 0x2c
 800a8c2:	4b05      	ldr	r3, [pc, #20]	; (800a8d8 <std+0x44>)
 800a8c4:	6224      	str	r4, [r4, #32]
 800a8c6:	6323      	str	r3, [r4, #48]	; 0x30
 800a8c8:	bd10      	pop	{r4, pc}
 800a8ca:	bf00      	nop
 800a8cc:	0800b3fd 	.word	0x0800b3fd
 800a8d0:	0800b41f 	.word	0x0800b41f
 800a8d4:	0800b457 	.word	0x0800b457
 800a8d8:	0800b47b 	.word	0x0800b47b

0800a8dc <_cleanup_r>:
 800a8dc:	4901      	ldr	r1, [pc, #4]	; (800a8e4 <_cleanup_r+0x8>)
 800a8de:	f000 b8af 	b.w	800aa40 <_fwalk_reent>
 800a8e2:	bf00      	nop
 800a8e4:	0800a81d 	.word	0x0800a81d

0800a8e8 <__sfmoreglue>:
 800a8e8:	b570      	push	{r4, r5, r6, lr}
 800a8ea:	2268      	movs	r2, #104	; 0x68
 800a8ec:	1e4d      	subs	r5, r1, #1
 800a8ee:	4355      	muls	r5, r2
 800a8f0:	460e      	mov	r6, r1
 800a8f2:	f105 0174 	add.w	r1, r5, #116	; 0x74
 800a8f6:	f7ff fd19 	bl	800a32c <_malloc_r>
 800a8fa:	4604      	mov	r4, r0
 800a8fc:	b140      	cbz	r0, 800a910 <__sfmoreglue+0x28>
 800a8fe:	2100      	movs	r1, #0
 800a900:	e9c0 1600 	strd	r1, r6, [r0]
 800a904:	300c      	adds	r0, #12
 800a906:	60a0      	str	r0, [r4, #8]
 800a908:	f105 0268 	add.w	r2, r5, #104	; 0x68
 800a90c:	f7ff fc9a 	bl	800a244 <memset>
 800a910:	4620      	mov	r0, r4
 800a912:	bd70      	pop	{r4, r5, r6, pc}

0800a914 <__sfp_lock_acquire>:
 800a914:	4801      	ldr	r0, [pc, #4]	; (800a91c <__sfp_lock_acquire+0x8>)
 800a916:	f000 b8b3 	b.w	800aa80 <__retarget_lock_acquire_recursive>
 800a91a:	bf00      	nop
 800a91c:	200093d9 	.word	0x200093d9

0800a920 <__sfp_lock_release>:
 800a920:	4801      	ldr	r0, [pc, #4]	; (800a928 <__sfp_lock_release+0x8>)
 800a922:	f000 b8ae 	b.w	800aa82 <__retarget_lock_release_recursive>
 800a926:	bf00      	nop
 800a928:	200093d9 	.word	0x200093d9

0800a92c <__sinit_lock_acquire>:
 800a92c:	4801      	ldr	r0, [pc, #4]	; (800a934 <__sinit_lock_acquire+0x8>)
 800a92e:	f000 b8a7 	b.w	800aa80 <__retarget_lock_acquire_recursive>
 800a932:	bf00      	nop
 800a934:	200093da 	.word	0x200093da

0800a938 <__sinit_lock_release>:
 800a938:	4801      	ldr	r0, [pc, #4]	; (800a940 <__sinit_lock_release+0x8>)
 800a93a:	f000 b8a2 	b.w	800aa82 <__retarget_lock_release_recursive>
 800a93e:	bf00      	nop
 800a940:	200093da 	.word	0x200093da

0800a944 <__sinit>:
 800a944:	b510      	push	{r4, lr}
 800a946:	4604      	mov	r4, r0
 800a948:	f7ff fff0 	bl	800a92c <__sinit_lock_acquire>
 800a94c:	69a3      	ldr	r3, [r4, #24]
 800a94e:	b11b      	cbz	r3, 800a958 <__sinit+0x14>
 800a950:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800a954:	f7ff bff0 	b.w	800a938 <__sinit_lock_release>
 800a958:	e9c4 3312 	strd	r3, r3, [r4, #72]	; 0x48
 800a95c:	6523      	str	r3, [r4, #80]	; 0x50
 800a95e:	4b13      	ldr	r3, [pc, #76]	; (800a9ac <__sinit+0x68>)
 800a960:	4a13      	ldr	r2, [pc, #76]	; (800a9b0 <__sinit+0x6c>)
 800a962:	681b      	ldr	r3, [r3, #0]
 800a964:	62a2      	str	r2, [r4, #40]	; 0x28
 800a966:	42a3      	cmp	r3, r4
 800a968:	bf04      	itt	eq
 800a96a:	2301      	moveq	r3, #1
 800a96c:	61a3      	streq	r3, [r4, #24]
 800a96e:	4620      	mov	r0, r4
 800a970:	f000 f820 	bl	800a9b4 <__sfp>
 800a974:	6060      	str	r0, [r4, #4]
 800a976:	4620      	mov	r0, r4
 800a978:	f000 f81c 	bl	800a9b4 <__sfp>
 800a97c:	60a0      	str	r0, [r4, #8]
 800a97e:	4620      	mov	r0, r4
 800a980:	f000 f818 	bl	800a9b4 <__sfp>
 800a984:	2200      	movs	r2, #0
 800a986:	60e0      	str	r0, [r4, #12]
 800a988:	2104      	movs	r1, #4
 800a98a:	6860      	ldr	r0, [r4, #4]
 800a98c:	f7ff ff82 	bl	800a894 <std>
 800a990:	68a0      	ldr	r0, [r4, #8]
 800a992:	2201      	movs	r2, #1
 800a994:	2109      	movs	r1, #9
 800a996:	f7ff ff7d 	bl	800a894 <std>
 800a99a:	68e0      	ldr	r0, [r4, #12]
 800a99c:	2202      	movs	r2, #2
 800a99e:	2112      	movs	r1, #18
 800a9a0:	f7ff ff78 	bl	800a894 <std>
 800a9a4:	2301      	movs	r3, #1
 800a9a6:	61a3      	str	r3, [r4, #24]
 800a9a8:	e7d2      	b.n	800a950 <__sinit+0xc>
 800a9aa:	bf00      	nop
 800a9ac:	0800b78c 	.word	0x0800b78c
 800a9b0:	0800a8dd 	.word	0x0800a8dd

0800a9b4 <__sfp>:
 800a9b4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800a9b6:	4607      	mov	r7, r0
 800a9b8:	f7ff ffac 	bl	800a914 <__sfp_lock_acquire>
 800a9bc:	4b1e      	ldr	r3, [pc, #120]	; (800aa38 <__sfp+0x84>)
 800a9be:	681e      	ldr	r6, [r3, #0]
 800a9c0:	69b3      	ldr	r3, [r6, #24]
 800a9c2:	b913      	cbnz	r3, 800a9ca <__sfp+0x16>
 800a9c4:	4630      	mov	r0, r6
 800a9c6:	f7ff ffbd 	bl	800a944 <__sinit>
 800a9ca:	3648      	adds	r6, #72	; 0x48
 800a9cc:	e9d6 3401 	ldrd	r3, r4, [r6, #4]
 800a9d0:	3b01      	subs	r3, #1
 800a9d2:	d503      	bpl.n	800a9dc <__sfp+0x28>
 800a9d4:	6833      	ldr	r3, [r6, #0]
 800a9d6:	b30b      	cbz	r3, 800aa1c <__sfp+0x68>
 800a9d8:	6836      	ldr	r6, [r6, #0]
 800a9da:	e7f7      	b.n	800a9cc <__sfp+0x18>
 800a9dc:	f9b4 500c 	ldrsh.w	r5, [r4, #12]
 800a9e0:	b9d5      	cbnz	r5, 800aa18 <__sfp+0x64>
 800a9e2:	4b16      	ldr	r3, [pc, #88]	; (800aa3c <__sfp+0x88>)
 800a9e4:	60e3      	str	r3, [r4, #12]
 800a9e6:	f104 0058 	add.w	r0, r4, #88	; 0x58
 800a9ea:	6665      	str	r5, [r4, #100]	; 0x64
 800a9ec:	f000 f847 	bl	800aa7e <__retarget_lock_init_recursive>
 800a9f0:	f7ff ff96 	bl	800a920 <__sfp_lock_release>
 800a9f4:	e9c4 5501 	strd	r5, r5, [r4, #4]
 800a9f8:	e9c4 5504 	strd	r5, r5, [r4, #16]
 800a9fc:	6025      	str	r5, [r4, #0]
 800a9fe:	61a5      	str	r5, [r4, #24]
 800aa00:	2208      	movs	r2, #8
 800aa02:	4629      	mov	r1, r5
 800aa04:	f104 005c 	add.w	r0, r4, #92	; 0x5c
 800aa08:	f7ff fc1c 	bl	800a244 <memset>
 800aa0c:	e9c4 550d 	strd	r5, r5, [r4, #52]	; 0x34
 800aa10:	e9c4 5512 	strd	r5, r5, [r4, #72]	; 0x48
 800aa14:	4620      	mov	r0, r4
 800aa16:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800aa18:	3468      	adds	r4, #104	; 0x68
 800aa1a:	e7d9      	b.n	800a9d0 <__sfp+0x1c>
 800aa1c:	2104      	movs	r1, #4
 800aa1e:	4638      	mov	r0, r7
 800aa20:	f7ff ff62 	bl	800a8e8 <__sfmoreglue>
 800aa24:	4604      	mov	r4, r0
 800aa26:	6030      	str	r0, [r6, #0]
 800aa28:	2800      	cmp	r0, #0
 800aa2a:	d1d5      	bne.n	800a9d8 <__sfp+0x24>
 800aa2c:	f7ff ff78 	bl	800a920 <__sfp_lock_release>
 800aa30:	230c      	movs	r3, #12
 800aa32:	603b      	str	r3, [r7, #0]
 800aa34:	e7ee      	b.n	800aa14 <__sfp+0x60>
 800aa36:	bf00      	nop
 800aa38:	0800b78c 	.word	0x0800b78c
 800aa3c:	ffff0001 	.word	0xffff0001

0800aa40 <_fwalk_reent>:
 800aa40:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800aa44:	4606      	mov	r6, r0
 800aa46:	4688      	mov	r8, r1
 800aa48:	f100 0448 	add.w	r4, r0, #72	; 0x48
 800aa4c:	2700      	movs	r7, #0
 800aa4e:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 800aa52:	f1b9 0901 	subs.w	r9, r9, #1
 800aa56:	d505      	bpl.n	800aa64 <_fwalk_reent+0x24>
 800aa58:	6824      	ldr	r4, [r4, #0]
 800aa5a:	2c00      	cmp	r4, #0
 800aa5c:	d1f7      	bne.n	800aa4e <_fwalk_reent+0xe>
 800aa5e:	4638      	mov	r0, r7
 800aa60:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800aa64:	89ab      	ldrh	r3, [r5, #12]
 800aa66:	2b01      	cmp	r3, #1
 800aa68:	d907      	bls.n	800aa7a <_fwalk_reent+0x3a>
 800aa6a:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 800aa6e:	3301      	adds	r3, #1
 800aa70:	d003      	beq.n	800aa7a <_fwalk_reent+0x3a>
 800aa72:	4629      	mov	r1, r5
 800aa74:	4630      	mov	r0, r6
 800aa76:	47c0      	blx	r8
 800aa78:	4307      	orrs	r7, r0
 800aa7a:	3568      	adds	r5, #104	; 0x68
 800aa7c:	e7e9      	b.n	800aa52 <_fwalk_reent+0x12>

0800aa7e <__retarget_lock_init_recursive>:
 800aa7e:	4770      	bx	lr

0800aa80 <__retarget_lock_acquire_recursive>:
 800aa80:	4770      	bx	lr

0800aa82 <__retarget_lock_release_recursive>:
 800aa82:	4770      	bx	lr

0800aa84 <__swhatbuf_r>:
 800aa84:	b570      	push	{r4, r5, r6, lr}
 800aa86:	460e      	mov	r6, r1
 800aa88:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800aa8c:	2900      	cmp	r1, #0
 800aa8e:	b096      	sub	sp, #88	; 0x58
 800aa90:	4614      	mov	r4, r2
 800aa92:	461d      	mov	r5, r3
 800aa94:	da08      	bge.n	800aaa8 <__swhatbuf_r+0x24>
 800aa96:	f9b6 300c 	ldrsh.w	r3, [r6, #12]
 800aa9a:	2200      	movs	r2, #0
 800aa9c:	602a      	str	r2, [r5, #0]
 800aa9e:	061a      	lsls	r2, r3, #24
 800aaa0:	d410      	bmi.n	800aac4 <__swhatbuf_r+0x40>
 800aaa2:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800aaa6:	e00e      	b.n	800aac6 <__swhatbuf_r+0x42>
 800aaa8:	466a      	mov	r2, sp
 800aaaa:	f000 fd0d 	bl	800b4c8 <_fstat_r>
 800aaae:	2800      	cmp	r0, #0
 800aab0:	dbf1      	blt.n	800aa96 <__swhatbuf_r+0x12>
 800aab2:	9a01      	ldr	r2, [sp, #4]
 800aab4:	f402 4270 	and.w	r2, r2, #61440	; 0xf000
 800aab8:	f5a2 5300 	sub.w	r3, r2, #8192	; 0x2000
 800aabc:	425a      	negs	r2, r3
 800aabe:	415a      	adcs	r2, r3
 800aac0:	602a      	str	r2, [r5, #0]
 800aac2:	e7ee      	b.n	800aaa2 <__swhatbuf_r+0x1e>
 800aac4:	2340      	movs	r3, #64	; 0x40
 800aac6:	2000      	movs	r0, #0
 800aac8:	6023      	str	r3, [r4, #0]
 800aaca:	b016      	add	sp, #88	; 0x58
 800aacc:	bd70      	pop	{r4, r5, r6, pc}
	...

0800aad0 <__smakebuf_r>:
 800aad0:	898b      	ldrh	r3, [r1, #12]
 800aad2:	b573      	push	{r0, r1, r4, r5, r6, lr}
 800aad4:	079d      	lsls	r5, r3, #30
 800aad6:	4606      	mov	r6, r0
 800aad8:	460c      	mov	r4, r1
 800aada:	d507      	bpl.n	800aaec <__smakebuf_r+0x1c>
 800aadc:	f104 0347 	add.w	r3, r4, #71	; 0x47
 800aae0:	6023      	str	r3, [r4, #0]
 800aae2:	6123      	str	r3, [r4, #16]
 800aae4:	2301      	movs	r3, #1
 800aae6:	6163      	str	r3, [r4, #20]
 800aae8:	b002      	add	sp, #8
 800aaea:	bd70      	pop	{r4, r5, r6, pc}
 800aaec:	ab01      	add	r3, sp, #4
 800aaee:	466a      	mov	r2, sp
 800aaf0:	f7ff ffc8 	bl	800aa84 <__swhatbuf_r>
 800aaf4:	9900      	ldr	r1, [sp, #0]
 800aaf6:	4605      	mov	r5, r0
 800aaf8:	4630      	mov	r0, r6
 800aafa:	f7ff fc17 	bl	800a32c <_malloc_r>
 800aafe:	b948      	cbnz	r0, 800ab14 <__smakebuf_r+0x44>
 800ab00:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800ab04:	059a      	lsls	r2, r3, #22
 800ab06:	d4ef      	bmi.n	800aae8 <__smakebuf_r+0x18>
 800ab08:	f023 0303 	bic.w	r3, r3, #3
 800ab0c:	f043 0302 	orr.w	r3, r3, #2
 800ab10:	81a3      	strh	r3, [r4, #12]
 800ab12:	e7e3      	b.n	800aadc <__smakebuf_r+0xc>
 800ab14:	4b0d      	ldr	r3, [pc, #52]	; (800ab4c <__smakebuf_r+0x7c>)
 800ab16:	62b3      	str	r3, [r6, #40]	; 0x28
 800ab18:	89a3      	ldrh	r3, [r4, #12]
 800ab1a:	6020      	str	r0, [r4, #0]
 800ab1c:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800ab20:	81a3      	strh	r3, [r4, #12]
 800ab22:	9b00      	ldr	r3, [sp, #0]
 800ab24:	6163      	str	r3, [r4, #20]
 800ab26:	9b01      	ldr	r3, [sp, #4]
 800ab28:	6120      	str	r0, [r4, #16]
 800ab2a:	b15b      	cbz	r3, 800ab44 <__smakebuf_r+0x74>
 800ab2c:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800ab30:	4630      	mov	r0, r6
 800ab32:	f000 fcdb 	bl	800b4ec <_isatty_r>
 800ab36:	b128      	cbz	r0, 800ab44 <__smakebuf_r+0x74>
 800ab38:	89a3      	ldrh	r3, [r4, #12]
 800ab3a:	f023 0303 	bic.w	r3, r3, #3
 800ab3e:	f043 0301 	orr.w	r3, r3, #1
 800ab42:	81a3      	strh	r3, [r4, #12]
 800ab44:	89a0      	ldrh	r0, [r4, #12]
 800ab46:	4305      	orrs	r5, r0
 800ab48:	81a5      	strh	r5, [r4, #12]
 800ab4a:	e7cd      	b.n	800aae8 <__smakebuf_r+0x18>
 800ab4c:	0800a8dd 	.word	0x0800a8dd

0800ab50 <__malloc_lock>:
 800ab50:	4801      	ldr	r0, [pc, #4]	; (800ab58 <__malloc_lock+0x8>)
 800ab52:	f7ff bf95 	b.w	800aa80 <__retarget_lock_acquire_recursive>
 800ab56:	bf00      	nop
 800ab58:	200093d8 	.word	0x200093d8

0800ab5c <__malloc_unlock>:
 800ab5c:	4801      	ldr	r0, [pc, #4]	; (800ab64 <__malloc_unlock+0x8>)
 800ab5e:	f7ff bf90 	b.w	800aa82 <__retarget_lock_release_recursive>
 800ab62:	bf00      	nop
 800ab64:	200093d8 	.word	0x200093d8

0800ab68 <__ssputs_r>:
 800ab68:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800ab6c:	688e      	ldr	r6, [r1, #8]
 800ab6e:	429e      	cmp	r6, r3
 800ab70:	4682      	mov	sl, r0
 800ab72:	460c      	mov	r4, r1
 800ab74:	4690      	mov	r8, r2
 800ab76:	461f      	mov	r7, r3
 800ab78:	d838      	bhi.n	800abec <__ssputs_r+0x84>
 800ab7a:	898a      	ldrh	r2, [r1, #12]
 800ab7c:	f412 6f90 	tst.w	r2, #1152	; 0x480
 800ab80:	d032      	beq.n	800abe8 <__ssputs_r+0x80>
 800ab82:	6825      	ldr	r5, [r4, #0]
 800ab84:	6909      	ldr	r1, [r1, #16]
 800ab86:	eba5 0901 	sub.w	r9, r5, r1
 800ab8a:	6965      	ldr	r5, [r4, #20]
 800ab8c:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 800ab90:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 800ab94:	3301      	adds	r3, #1
 800ab96:	444b      	add	r3, r9
 800ab98:	106d      	asrs	r5, r5, #1
 800ab9a:	429d      	cmp	r5, r3
 800ab9c:	bf38      	it	cc
 800ab9e:	461d      	movcc	r5, r3
 800aba0:	0553      	lsls	r3, r2, #21
 800aba2:	d531      	bpl.n	800ac08 <__ssputs_r+0xa0>
 800aba4:	4629      	mov	r1, r5
 800aba6:	f7ff fbc1 	bl	800a32c <_malloc_r>
 800abaa:	4606      	mov	r6, r0
 800abac:	b950      	cbnz	r0, 800abc4 <__ssputs_r+0x5c>
 800abae:	230c      	movs	r3, #12
 800abb0:	f8ca 3000 	str.w	r3, [sl]
 800abb4:	89a3      	ldrh	r3, [r4, #12]
 800abb6:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800abba:	81a3      	strh	r3, [r4, #12]
 800abbc:	f04f 30ff 	mov.w	r0, #4294967295
 800abc0:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800abc4:	6921      	ldr	r1, [r4, #16]
 800abc6:	464a      	mov	r2, r9
 800abc8:	f7ff fb2e 	bl	800a228 <memcpy>
 800abcc:	89a3      	ldrh	r3, [r4, #12]
 800abce:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 800abd2:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800abd6:	81a3      	strh	r3, [r4, #12]
 800abd8:	6126      	str	r6, [r4, #16]
 800abda:	6165      	str	r5, [r4, #20]
 800abdc:	444e      	add	r6, r9
 800abde:	eba5 0509 	sub.w	r5, r5, r9
 800abe2:	6026      	str	r6, [r4, #0]
 800abe4:	60a5      	str	r5, [r4, #8]
 800abe6:	463e      	mov	r6, r7
 800abe8:	42be      	cmp	r6, r7
 800abea:	d900      	bls.n	800abee <__ssputs_r+0x86>
 800abec:	463e      	mov	r6, r7
 800abee:	6820      	ldr	r0, [r4, #0]
 800abf0:	4632      	mov	r2, r6
 800abf2:	4641      	mov	r1, r8
 800abf4:	f000 fc9c 	bl	800b530 <memmove>
 800abf8:	68a3      	ldr	r3, [r4, #8]
 800abfa:	1b9b      	subs	r3, r3, r6
 800abfc:	60a3      	str	r3, [r4, #8]
 800abfe:	6823      	ldr	r3, [r4, #0]
 800ac00:	4433      	add	r3, r6
 800ac02:	6023      	str	r3, [r4, #0]
 800ac04:	2000      	movs	r0, #0
 800ac06:	e7db      	b.n	800abc0 <__ssputs_r+0x58>
 800ac08:	462a      	mov	r2, r5
 800ac0a:	f000 fcab 	bl	800b564 <_realloc_r>
 800ac0e:	4606      	mov	r6, r0
 800ac10:	2800      	cmp	r0, #0
 800ac12:	d1e1      	bne.n	800abd8 <__ssputs_r+0x70>
 800ac14:	6921      	ldr	r1, [r4, #16]
 800ac16:	4650      	mov	r0, sl
 800ac18:	f7ff fb1c 	bl	800a254 <_free_r>
 800ac1c:	e7c7      	b.n	800abae <__ssputs_r+0x46>
	...

0800ac20 <_svfiprintf_r>:
 800ac20:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800ac24:	4698      	mov	r8, r3
 800ac26:	898b      	ldrh	r3, [r1, #12]
 800ac28:	061b      	lsls	r3, r3, #24
 800ac2a:	b09d      	sub	sp, #116	; 0x74
 800ac2c:	4607      	mov	r7, r0
 800ac2e:	460d      	mov	r5, r1
 800ac30:	4614      	mov	r4, r2
 800ac32:	d50e      	bpl.n	800ac52 <_svfiprintf_r+0x32>
 800ac34:	690b      	ldr	r3, [r1, #16]
 800ac36:	b963      	cbnz	r3, 800ac52 <_svfiprintf_r+0x32>
 800ac38:	2140      	movs	r1, #64	; 0x40
 800ac3a:	f7ff fb77 	bl	800a32c <_malloc_r>
 800ac3e:	6028      	str	r0, [r5, #0]
 800ac40:	6128      	str	r0, [r5, #16]
 800ac42:	b920      	cbnz	r0, 800ac4e <_svfiprintf_r+0x2e>
 800ac44:	230c      	movs	r3, #12
 800ac46:	603b      	str	r3, [r7, #0]
 800ac48:	f04f 30ff 	mov.w	r0, #4294967295
 800ac4c:	e0d1      	b.n	800adf2 <_svfiprintf_r+0x1d2>
 800ac4e:	2340      	movs	r3, #64	; 0x40
 800ac50:	616b      	str	r3, [r5, #20]
 800ac52:	2300      	movs	r3, #0
 800ac54:	9309      	str	r3, [sp, #36]	; 0x24
 800ac56:	2320      	movs	r3, #32
 800ac58:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 800ac5c:	f8cd 800c 	str.w	r8, [sp, #12]
 800ac60:	2330      	movs	r3, #48	; 0x30
 800ac62:	f8df 81a8 	ldr.w	r8, [pc, #424]	; 800ae0c <_svfiprintf_r+0x1ec>
 800ac66:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 800ac6a:	f04f 0901 	mov.w	r9, #1
 800ac6e:	4623      	mov	r3, r4
 800ac70:	469a      	mov	sl, r3
 800ac72:	f813 2b01 	ldrb.w	r2, [r3], #1
 800ac76:	b10a      	cbz	r2, 800ac7c <_svfiprintf_r+0x5c>
 800ac78:	2a25      	cmp	r2, #37	; 0x25
 800ac7a:	d1f9      	bne.n	800ac70 <_svfiprintf_r+0x50>
 800ac7c:	ebba 0b04 	subs.w	fp, sl, r4
 800ac80:	d00b      	beq.n	800ac9a <_svfiprintf_r+0x7a>
 800ac82:	465b      	mov	r3, fp
 800ac84:	4622      	mov	r2, r4
 800ac86:	4629      	mov	r1, r5
 800ac88:	4638      	mov	r0, r7
 800ac8a:	f7ff ff6d 	bl	800ab68 <__ssputs_r>
 800ac8e:	3001      	adds	r0, #1
 800ac90:	f000 80aa 	beq.w	800ade8 <_svfiprintf_r+0x1c8>
 800ac94:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800ac96:	445a      	add	r2, fp
 800ac98:	9209      	str	r2, [sp, #36]	; 0x24
 800ac9a:	f89a 3000 	ldrb.w	r3, [sl]
 800ac9e:	2b00      	cmp	r3, #0
 800aca0:	f000 80a2 	beq.w	800ade8 <_svfiprintf_r+0x1c8>
 800aca4:	2300      	movs	r3, #0
 800aca6:	f04f 32ff 	mov.w	r2, #4294967295
 800acaa:	e9cd 2305 	strd	r2, r3, [sp, #20]
 800acae:	f10a 0a01 	add.w	sl, sl, #1
 800acb2:	9304      	str	r3, [sp, #16]
 800acb4:	9307      	str	r3, [sp, #28]
 800acb6:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 800acba:	931a      	str	r3, [sp, #104]	; 0x68
 800acbc:	4654      	mov	r4, sl
 800acbe:	2205      	movs	r2, #5
 800acc0:	f814 1b01 	ldrb.w	r1, [r4], #1
 800acc4:	4851      	ldr	r0, [pc, #324]	; (800ae0c <_svfiprintf_r+0x1ec>)
 800acc6:	f7f5 fa93 	bl	80001f0 <memchr>
 800acca:	9a04      	ldr	r2, [sp, #16]
 800accc:	b9d8      	cbnz	r0, 800ad06 <_svfiprintf_r+0xe6>
 800acce:	06d0      	lsls	r0, r2, #27
 800acd0:	bf44      	itt	mi
 800acd2:	2320      	movmi	r3, #32
 800acd4:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800acd8:	0711      	lsls	r1, r2, #28
 800acda:	bf44      	itt	mi
 800acdc:	232b      	movmi	r3, #43	; 0x2b
 800acde:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800ace2:	f89a 3000 	ldrb.w	r3, [sl]
 800ace6:	2b2a      	cmp	r3, #42	; 0x2a
 800ace8:	d015      	beq.n	800ad16 <_svfiprintf_r+0xf6>
 800acea:	9a07      	ldr	r2, [sp, #28]
 800acec:	4654      	mov	r4, sl
 800acee:	2000      	movs	r0, #0
 800acf0:	f04f 0c0a 	mov.w	ip, #10
 800acf4:	4621      	mov	r1, r4
 800acf6:	f811 3b01 	ldrb.w	r3, [r1], #1
 800acfa:	3b30      	subs	r3, #48	; 0x30
 800acfc:	2b09      	cmp	r3, #9
 800acfe:	d94e      	bls.n	800ad9e <_svfiprintf_r+0x17e>
 800ad00:	b1b0      	cbz	r0, 800ad30 <_svfiprintf_r+0x110>
 800ad02:	9207      	str	r2, [sp, #28]
 800ad04:	e014      	b.n	800ad30 <_svfiprintf_r+0x110>
 800ad06:	eba0 0308 	sub.w	r3, r0, r8
 800ad0a:	fa09 f303 	lsl.w	r3, r9, r3
 800ad0e:	4313      	orrs	r3, r2
 800ad10:	9304      	str	r3, [sp, #16]
 800ad12:	46a2      	mov	sl, r4
 800ad14:	e7d2      	b.n	800acbc <_svfiprintf_r+0x9c>
 800ad16:	9b03      	ldr	r3, [sp, #12]
 800ad18:	1d19      	adds	r1, r3, #4
 800ad1a:	681b      	ldr	r3, [r3, #0]
 800ad1c:	9103      	str	r1, [sp, #12]
 800ad1e:	2b00      	cmp	r3, #0
 800ad20:	bfbb      	ittet	lt
 800ad22:	425b      	neglt	r3, r3
 800ad24:	f042 0202 	orrlt.w	r2, r2, #2
 800ad28:	9307      	strge	r3, [sp, #28]
 800ad2a:	9307      	strlt	r3, [sp, #28]
 800ad2c:	bfb8      	it	lt
 800ad2e:	9204      	strlt	r2, [sp, #16]
 800ad30:	7823      	ldrb	r3, [r4, #0]
 800ad32:	2b2e      	cmp	r3, #46	; 0x2e
 800ad34:	d10c      	bne.n	800ad50 <_svfiprintf_r+0x130>
 800ad36:	7863      	ldrb	r3, [r4, #1]
 800ad38:	2b2a      	cmp	r3, #42	; 0x2a
 800ad3a:	d135      	bne.n	800ada8 <_svfiprintf_r+0x188>
 800ad3c:	9b03      	ldr	r3, [sp, #12]
 800ad3e:	1d1a      	adds	r2, r3, #4
 800ad40:	681b      	ldr	r3, [r3, #0]
 800ad42:	9203      	str	r2, [sp, #12]
 800ad44:	2b00      	cmp	r3, #0
 800ad46:	bfb8      	it	lt
 800ad48:	f04f 33ff 	movlt.w	r3, #4294967295
 800ad4c:	3402      	adds	r4, #2
 800ad4e:	9305      	str	r3, [sp, #20]
 800ad50:	f8df a0c8 	ldr.w	sl, [pc, #200]	; 800ae1c <_svfiprintf_r+0x1fc>
 800ad54:	7821      	ldrb	r1, [r4, #0]
 800ad56:	2203      	movs	r2, #3
 800ad58:	4650      	mov	r0, sl
 800ad5a:	f7f5 fa49 	bl	80001f0 <memchr>
 800ad5e:	b140      	cbz	r0, 800ad72 <_svfiprintf_r+0x152>
 800ad60:	2340      	movs	r3, #64	; 0x40
 800ad62:	eba0 000a 	sub.w	r0, r0, sl
 800ad66:	fa03 f000 	lsl.w	r0, r3, r0
 800ad6a:	9b04      	ldr	r3, [sp, #16]
 800ad6c:	4303      	orrs	r3, r0
 800ad6e:	3401      	adds	r4, #1
 800ad70:	9304      	str	r3, [sp, #16]
 800ad72:	f814 1b01 	ldrb.w	r1, [r4], #1
 800ad76:	4826      	ldr	r0, [pc, #152]	; (800ae10 <_svfiprintf_r+0x1f0>)
 800ad78:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 800ad7c:	2206      	movs	r2, #6
 800ad7e:	f7f5 fa37 	bl	80001f0 <memchr>
 800ad82:	2800      	cmp	r0, #0
 800ad84:	d038      	beq.n	800adf8 <_svfiprintf_r+0x1d8>
 800ad86:	4b23      	ldr	r3, [pc, #140]	; (800ae14 <_svfiprintf_r+0x1f4>)
 800ad88:	bb1b      	cbnz	r3, 800add2 <_svfiprintf_r+0x1b2>
 800ad8a:	9b03      	ldr	r3, [sp, #12]
 800ad8c:	3307      	adds	r3, #7
 800ad8e:	f023 0307 	bic.w	r3, r3, #7
 800ad92:	3308      	adds	r3, #8
 800ad94:	9303      	str	r3, [sp, #12]
 800ad96:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800ad98:	4433      	add	r3, r6
 800ad9a:	9309      	str	r3, [sp, #36]	; 0x24
 800ad9c:	e767      	b.n	800ac6e <_svfiprintf_r+0x4e>
 800ad9e:	fb0c 3202 	mla	r2, ip, r2, r3
 800ada2:	460c      	mov	r4, r1
 800ada4:	2001      	movs	r0, #1
 800ada6:	e7a5      	b.n	800acf4 <_svfiprintf_r+0xd4>
 800ada8:	2300      	movs	r3, #0
 800adaa:	3401      	adds	r4, #1
 800adac:	9305      	str	r3, [sp, #20]
 800adae:	4619      	mov	r1, r3
 800adb0:	f04f 0c0a 	mov.w	ip, #10
 800adb4:	4620      	mov	r0, r4
 800adb6:	f810 2b01 	ldrb.w	r2, [r0], #1
 800adba:	3a30      	subs	r2, #48	; 0x30
 800adbc:	2a09      	cmp	r2, #9
 800adbe:	d903      	bls.n	800adc8 <_svfiprintf_r+0x1a8>
 800adc0:	2b00      	cmp	r3, #0
 800adc2:	d0c5      	beq.n	800ad50 <_svfiprintf_r+0x130>
 800adc4:	9105      	str	r1, [sp, #20]
 800adc6:	e7c3      	b.n	800ad50 <_svfiprintf_r+0x130>
 800adc8:	fb0c 2101 	mla	r1, ip, r1, r2
 800adcc:	4604      	mov	r4, r0
 800adce:	2301      	movs	r3, #1
 800add0:	e7f0      	b.n	800adb4 <_svfiprintf_r+0x194>
 800add2:	ab03      	add	r3, sp, #12
 800add4:	9300      	str	r3, [sp, #0]
 800add6:	462a      	mov	r2, r5
 800add8:	4b0f      	ldr	r3, [pc, #60]	; (800ae18 <_svfiprintf_r+0x1f8>)
 800adda:	a904      	add	r1, sp, #16
 800addc:	4638      	mov	r0, r7
 800adde:	f3af 8000 	nop.w
 800ade2:	1c42      	adds	r2, r0, #1
 800ade4:	4606      	mov	r6, r0
 800ade6:	d1d6      	bne.n	800ad96 <_svfiprintf_r+0x176>
 800ade8:	89ab      	ldrh	r3, [r5, #12]
 800adea:	065b      	lsls	r3, r3, #25
 800adec:	f53f af2c 	bmi.w	800ac48 <_svfiprintf_r+0x28>
 800adf0:	9809      	ldr	r0, [sp, #36]	; 0x24
 800adf2:	b01d      	add	sp, #116	; 0x74
 800adf4:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800adf8:	ab03      	add	r3, sp, #12
 800adfa:	9300      	str	r3, [sp, #0]
 800adfc:	462a      	mov	r2, r5
 800adfe:	4b06      	ldr	r3, [pc, #24]	; (800ae18 <_svfiprintf_r+0x1f8>)
 800ae00:	a904      	add	r1, sp, #16
 800ae02:	4638      	mov	r0, r7
 800ae04:	f000 f9d4 	bl	800b1b0 <_printf_i>
 800ae08:	e7eb      	b.n	800ade2 <_svfiprintf_r+0x1c2>
 800ae0a:	bf00      	nop
 800ae0c:	0800b7f0 	.word	0x0800b7f0
 800ae10:	0800b7fa 	.word	0x0800b7fa
 800ae14:	00000000 	.word	0x00000000
 800ae18:	0800ab69 	.word	0x0800ab69
 800ae1c:	0800b7f6 	.word	0x0800b7f6

0800ae20 <__sfputc_r>:
 800ae20:	6893      	ldr	r3, [r2, #8]
 800ae22:	3b01      	subs	r3, #1
 800ae24:	2b00      	cmp	r3, #0
 800ae26:	b410      	push	{r4}
 800ae28:	6093      	str	r3, [r2, #8]
 800ae2a:	da08      	bge.n	800ae3e <__sfputc_r+0x1e>
 800ae2c:	6994      	ldr	r4, [r2, #24]
 800ae2e:	42a3      	cmp	r3, r4
 800ae30:	db01      	blt.n	800ae36 <__sfputc_r+0x16>
 800ae32:	290a      	cmp	r1, #10
 800ae34:	d103      	bne.n	800ae3e <__sfputc_r+0x1e>
 800ae36:	f85d 4b04 	ldr.w	r4, [sp], #4
 800ae3a:	f7ff bba9 	b.w	800a590 <__swbuf_r>
 800ae3e:	6813      	ldr	r3, [r2, #0]
 800ae40:	1c58      	adds	r0, r3, #1
 800ae42:	6010      	str	r0, [r2, #0]
 800ae44:	7019      	strb	r1, [r3, #0]
 800ae46:	4608      	mov	r0, r1
 800ae48:	f85d 4b04 	ldr.w	r4, [sp], #4
 800ae4c:	4770      	bx	lr

0800ae4e <__sfputs_r>:
 800ae4e:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800ae50:	4606      	mov	r6, r0
 800ae52:	460f      	mov	r7, r1
 800ae54:	4614      	mov	r4, r2
 800ae56:	18d5      	adds	r5, r2, r3
 800ae58:	42ac      	cmp	r4, r5
 800ae5a:	d101      	bne.n	800ae60 <__sfputs_r+0x12>
 800ae5c:	2000      	movs	r0, #0
 800ae5e:	e007      	b.n	800ae70 <__sfputs_r+0x22>
 800ae60:	f814 1b01 	ldrb.w	r1, [r4], #1
 800ae64:	463a      	mov	r2, r7
 800ae66:	4630      	mov	r0, r6
 800ae68:	f7ff ffda 	bl	800ae20 <__sfputc_r>
 800ae6c:	1c43      	adds	r3, r0, #1
 800ae6e:	d1f3      	bne.n	800ae58 <__sfputs_r+0xa>
 800ae70:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

0800ae74 <_vfiprintf_r>:
 800ae74:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800ae78:	460d      	mov	r5, r1
 800ae7a:	b09d      	sub	sp, #116	; 0x74
 800ae7c:	4614      	mov	r4, r2
 800ae7e:	4698      	mov	r8, r3
 800ae80:	4606      	mov	r6, r0
 800ae82:	b118      	cbz	r0, 800ae8c <_vfiprintf_r+0x18>
 800ae84:	6983      	ldr	r3, [r0, #24]
 800ae86:	b90b      	cbnz	r3, 800ae8c <_vfiprintf_r+0x18>
 800ae88:	f7ff fd5c 	bl	800a944 <__sinit>
 800ae8c:	4b89      	ldr	r3, [pc, #548]	; (800b0b4 <_vfiprintf_r+0x240>)
 800ae8e:	429d      	cmp	r5, r3
 800ae90:	d11b      	bne.n	800aeca <_vfiprintf_r+0x56>
 800ae92:	6875      	ldr	r5, [r6, #4]
 800ae94:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 800ae96:	07d9      	lsls	r1, r3, #31
 800ae98:	d405      	bmi.n	800aea6 <_vfiprintf_r+0x32>
 800ae9a:	89ab      	ldrh	r3, [r5, #12]
 800ae9c:	059a      	lsls	r2, r3, #22
 800ae9e:	d402      	bmi.n	800aea6 <_vfiprintf_r+0x32>
 800aea0:	6da8      	ldr	r0, [r5, #88]	; 0x58
 800aea2:	f7ff fded 	bl	800aa80 <__retarget_lock_acquire_recursive>
 800aea6:	89ab      	ldrh	r3, [r5, #12]
 800aea8:	071b      	lsls	r3, r3, #28
 800aeaa:	d501      	bpl.n	800aeb0 <_vfiprintf_r+0x3c>
 800aeac:	692b      	ldr	r3, [r5, #16]
 800aeae:	b9eb      	cbnz	r3, 800aeec <_vfiprintf_r+0x78>
 800aeb0:	4629      	mov	r1, r5
 800aeb2:	4630      	mov	r0, r6
 800aeb4:	f7ff fbbe 	bl	800a634 <__swsetup_r>
 800aeb8:	b1c0      	cbz	r0, 800aeec <_vfiprintf_r+0x78>
 800aeba:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 800aebc:	07dc      	lsls	r4, r3, #31
 800aebe:	d50e      	bpl.n	800aede <_vfiprintf_r+0x6a>
 800aec0:	f04f 30ff 	mov.w	r0, #4294967295
 800aec4:	b01d      	add	sp, #116	; 0x74
 800aec6:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800aeca:	4b7b      	ldr	r3, [pc, #492]	; (800b0b8 <_vfiprintf_r+0x244>)
 800aecc:	429d      	cmp	r5, r3
 800aece:	d101      	bne.n	800aed4 <_vfiprintf_r+0x60>
 800aed0:	68b5      	ldr	r5, [r6, #8]
 800aed2:	e7df      	b.n	800ae94 <_vfiprintf_r+0x20>
 800aed4:	4b79      	ldr	r3, [pc, #484]	; (800b0bc <_vfiprintf_r+0x248>)
 800aed6:	429d      	cmp	r5, r3
 800aed8:	bf08      	it	eq
 800aeda:	68f5      	ldreq	r5, [r6, #12]
 800aedc:	e7da      	b.n	800ae94 <_vfiprintf_r+0x20>
 800aede:	89ab      	ldrh	r3, [r5, #12]
 800aee0:	0598      	lsls	r0, r3, #22
 800aee2:	d4ed      	bmi.n	800aec0 <_vfiprintf_r+0x4c>
 800aee4:	6da8      	ldr	r0, [r5, #88]	; 0x58
 800aee6:	f7ff fdcc 	bl	800aa82 <__retarget_lock_release_recursive>
 800aeea:	e7e9      	b.n	800aec0 <_vfiprintf_r+0x4c>
 800aeec:	2300      	movs	r3, #0
 800aeee:	9309      	str	r3, [sp, #36]	; 0x24
 800aef0:	2320      	movs	r3, #32
 800aef2:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 800aef6:	f8cd 800c 	str.w	r8, [sp, #12]
 800aefa:	2330      	movs	r3, #48	; 0x30
 800aefc:	f8df 81c0 	ldr.w	r8, [pc, #448]	; 800b0c0 <_vfiprintf_r+0x24c>
 800af00:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 800af04:	f04f 0901 	mov.w	r9, #1
 800af08:	4623      	mov	r3, r4
 800af0a:	469a      	mov	sl, r3
 800af0c:	f813 2b01 	ldrb.w	r2, [r3], #1
 800af10:	b10a      	cbz	r2, 800af16 <_vfiprintf_r+0xa2>
 800af12:	2a25      	cmp	r2, #37	; 0x25
 800af14:	d1f9      	bne.n	800af0a <_vfiprintf_r+0x96>
 800af16:	ebba 0b04 	subs.w	fp, sl, r4
 800af1a:	d00b      	beq.n	800af34 <_vfiprintf_r+0xc0>
 800af1c:	465b      	mov	r3, fp
 800af1e:	4622      	mov	r2, r4
 800af20:	4629      	mov	r1, r5
 800af22:	4630      	mov	r0, r6
 800af24:	f7ff ff93 	bl	800ae4e <__sfputs_r>
 800af28:	3001      	adds	r0, #1
 800af2a:	f000 80aa 	beq.w	800b082 <_vfiprintf_r+0x20e>
 800af2e:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800af30:	445a      	add	r2, fp
 800af32:	9209      	str	r2, [sp, #36]	; 0x24
 800af34:	f89a 3000 	ldrb.w	r3, [sl]
 800af38:	2b00      	cmp	r3, #0
 800af3a:	f000 80a2 	beq.w	800b082 <_vfiprintf_r+0x20e>
 800af3e:	2300      	movs	r3, #0
 800af40:	f04f 32ff 	mov.w	r2, #4294967295
 800af44:	e9cd 2305 	strd	r2, r3, [sp, #20]
 800af48:	f10a 0a01 	add.w	sl, sl, #1
 800af4c:	9304      	str	r3, [sp, #16]
 800af4e:	9307      	str	r3, [sp, #28]
 800af50:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 800af54:	931a      	str	r3, [sp, #104]	; 0x68
 800af56:	4654      	mov	r4, sl
 800af58:	2205      	movs	r2, #5
 800af5a:	f814 1b01 	ldrb.w	r1, [r4], #1
 800af5e:	4858      	ldr	r0, [pc, #352]	; (800b0c0 <_vfiprintf_r+0x24c>)
 800af60:	f7f5 f946 	bl	80001f0 <memchr>
 800af64:	9a04      	ldr	r2, [sp, #16]
 800af66:	b9d8      	cbnz	r0, 800afa0 <_vfiprintf_r+0x12c>
 800af68:	06d1      	lsls	r1, r2, #27
 800af6a:	bf44      	itt	mi
 800af6c:	2320      	movmi	r3, #32
 800af6e:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800af72:	0713      	lsls	r3, r2, #28
 800af74:	bf44      	itt	mi
 800af76:	232b      	movmi	r3, #43	; 0x2b
 800af78:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800af7c:	f89a 3000 	ldrb.w	r3, [sl]
 800af80:	2b2a      	cmp	r3, #42	; 0x2a
 800af82:	d015      	beq.n	800afb0 <_vfiprintf_r+0x13c>
 800af84:	9a07      	ldr	r2, [sp, #28]
 800af86:	4654      	mov	r4, sl
 800af88:	2000      	movs	r0, #0
 800af8a:	f04f 0c0a 	mov.w	ip, #10
 800af8e:	4621      	mov	r1, r4
 800af90:	f811 3b01 	ldrb.w	r3, [r1], #1
 800af94:	3b30      	subs	r3, #48	; 0x30
 800af96:	2b09      	cmp	r3, #9
 800af98:	d94e      	bls.n	800b038 <_vfiprintf_r+0x1c4>
 800af9a:	b1b0      	cbz	r0, 800afca <_vfiprintf_r+0x156>
 800af9c:	9207      	str	r2, [sp, #28]
 800af9e:	e014      	b.n	800afca <_vfiprintf_r+0x156>
 800afa0:	eba0 0308 	sub.w	r3, r0, r8
 800afa4:	fa09 f303 	lsl.w	r3, r9, r3
 800afa8:	4313      	orrs	r3, r2
 800afaa:	9304      	str	r3, [sp, #16]
 800afac:	46a2      	mov	sl, r4
 800afae:	e7d2      	b.n	800af56 <_vfiprintf_r+0xe2>
 800afb0:	9b03      	ldr	r3, [sp, #12]
 800afb2:	1d19      	adds	r1, r3, #4
 800afb4:	681b      	ldr	r3, [r3, #0]
 800afb6:	9103      	str	r1, [sp, #12]
 800afb8:	2b00      	cmp	r3, #0
 800afba:	bfbb      	ittet	lt
 800afbc:	425b      	neglt	r3, r3
 800afbe:	f042 0202 	orrlt.w	r2, r2, #2
 800afc2:	9307      	strge	r3, [sp, #28]
 800afc4:	9307      	strlt	r3, [sp, #28]
 800afc6:	bfb8      	it	lt
 800afc8:	9204      	strlt	r2, [sp, #16]
 800afca:	7823      	ldrb	r3, [r4, #0]
 800afcc:	2b2e      	cmp	r3, #46	; 0x2e
 800afce:	d10c      	bne.n	800afea <_vfiprintf_r+0x176>
 800afd0:	7863      	ldrb	r3, [r4, #1]
 800afd2:	2b2a      	cmp	r3, #42	; 0x2a
 800afd4:	d135      	bne.n	800b042 <_vfiprintf_r+0x1ce>
 800afd6:	9b03      	ldr	r3, [sp, #12]
 800afd8:	1d1a      	adds	r2, r3, #4
 800afda:	681b      	ldr	r3, [r3, #0]
 800afdc:	9203      	str	r2, [sp, #12]
 800afde:	2b00      	cmp	r3, #0
 800afe0:	bfb8      	it	lt
 800afe2:	f04f 33ff 	movlt.w	r3, #4294967295
 800afe6:	3402      	adds	r4, #2
 800afe8:	9305      	str	r3, [sp, #20]
 800afea:	f8df a0e4 	ldr.w	sl, [pc, #228]	; 800b0d0 <_vfiprintf_r+0x25c>
 800afee:	7821      	ldrb	r1, [r4, #0]
 800aff0:	2203      	movs	r2, #3
 800aff2:	4650      	mov	r0, sl
 800aff4:	f7f5 f8fc 	bl	80001f0 <memchr>
 800aff8:	b140      	cbz	r0, 800b00c <_vfiprintf_r+0x198>
 800affa:	2340      	movs	r3, #64	; 0x40
 800affc:	eba0 000a 	sub.w	r0, r0, sl
 800b000:	fa03 f000 	lsl.w	r0, r3, r0
 800b004:	9b04      	ldr	r3, [sp, #16]
 800b006:	4303      	orrs	r3, r0
 800b008:	3401      	adds	r4, #1
 800b00a:	9304      	str	r3, [sp, #16]
 800b00c:	f814 1b01 	ldrb.w	r1, [r4], #1
 800b010:	482c      	ldr	r0, [pc, #176]	; (800b0c4 <_vfiprintf_r+0x250>)
 800b012:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 800b016:	2206      	movs	r2, #6
 800b018:	f7f5 f8ea 	bl	80001f0 <memchr>
 800b01c:	2800      	cmp	r0, #0
 800b01e:	d03f      	beq.n	800b0a0 <_vfiprintf_r+0x22c>
 800b020:	4b29      	ldr	r3, [pc, #164]	; (800b0c8 <_vfiprintf_r+0x254>)
 800b022:	bb1b      	cbnz	r3, 800b06c <_vfiprintf_r+0x1f8>
 800b024:	9b03      	ldr	r3, [sp, #12]
 800b026:	3307      	adds	r3, #7
 800b028:	f023 0307 	bic.w	r3, r3, #7
 800b02c:	3308      	adds	r3, #8
 800b02e:	9303      	str	r3, [sp, #12]
 800b030:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800b032:	443b      	add	r3, r7
 800b034:	9309      	str	r3, [sp, #36]	; 0x24
 800b036:	e767      	b.n	800af08 <_vfiprintf_r+0x94>
 800b038:	fb0c 3202 	mla	r2, ip, r2, r3
 800b03c:	460c      	mov	r4, r1
 800b03e:	2001      	movs	r0, #1
 800b040:	e7a5      	b.n	800af8e <_vfiprintf_r+0x11a>
 800b042:	2300      	movs	r3, #0
 800b044:	3401      	adds	r4, #1
 800b046:	9305      	str	r3, [sp, #20]
 800b048:	4619      	mov	r1, r3
 800b04a:	f04f 0c0a 	mov.w	ip, #10
 800b04e:	4620      	mov	r0, r4
 800b050:	f810 2b01 	ldrb.w	r2, [r0], #1
 800b054:	3a30      	subs	r2, #48	; 0x30
 800b056:	2a09      	cmp	r2, #9
 800b058:	d903      	bls.n	800b062 <_vfiprintf_r+0x1ee>
 800b05a:	2b00      	cmp	r3, #0
 800b05c:	d0c5      	beq.n	800afea <_vfiprintf_r+0x176>
 800b05e:	9105      	str	r1, [sp, #20]
 800b060:	e7c3      	b.n	800afea <_vfiprintf_r+0x176>
 800b062:	fb0c 2101 	mla	r1, ip, r1, r2
 800b066:	4604      	mov	r4, r0
 800b068:	2301      	movs	r3, #1
 800b06a:	e7f0      	b.n	800b04e <_vfiprintf_r+0x1da>
 800b06c:	ab03      	add	r3, sp, #12
 800b06e:	9300      	str	r3, [sp, #0]
 800b070:	462a      	mov	r2, r5
 800b072:	4b16      	ldr	r3, [pc, #88]	; (800b0cc <_vfiprintf_r+0x258>)
 800b074:	a904      	add	r1, sp, #16
 800b076:	4630      	mov	r0, r6
 800b078:	f3af 8000 	nop.w
 800b07c:	4607      	mov	r7, r0
 800b07e:	1c78      	adds	r0, r7, #1
 800b080:	d1d6      	bne.n	800b030 <_vfiprintf_r+0x1bc>
 800b082:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 800b084:	07d9      	lsls	r1, r3, #31
 800b086:	d405      	bmi.n	800b094 <_vfiprintf_r+0x220>
 800b088:	89ab      	ldrh	r3, [r5, #12]
 800b08a:	059a      	lsls	r2, r3, #22
 800b08c:	d402      	bmi.n	800b094 <_vfiprintf_r+0x220>
 800b08e:	6da8      	ldr	r0, [r5, #88]	; 0x58
 800b090:	f7ff fcf7 	bl	800aa82 <__retarget_lock_release_recursive>
 800b094:	89ab      	ldrh	r3, [r5, #12]
 800b096:	065b      	lsls	r3, r3, #25
 800b098:	f53f af12 	bmi.w	800aec0 <_vfiprintf_r+0x4c>
 800b09c:	9809      	ldr	r0, [sp, #36]	; 0x24
 800b09e:	e711      	b.n	800aec4 <_vfiprintf_r+0x50>
 800b0a0:	ab03      	add	r3, sp, #12
 800b0a2:	9300      	str	r3, [sp, #0]
 800b0a4:	462a      	mov	r2, r5
 800b0a6:	4b09      	ldr	r3, [pc, #36]	; (800b0cc <_vfiprintf_r+0x258>)
 800b0a8:	a904      	add	r1, sp, #16
 800b0aa:	4630      	mov	r0, r6
 800b0ac:	f000 f880 	bl	800b1b0 <_printf_i>
 800b0b0:	e7e4      	b.n	800b07c <_vfiprintf_r+0x208>
 800b0b2:	bf00      	nop
 800b0b4:	0800b7b0 	.word	0x0800b7b0
 800b0b8:	0800b7d0 	.word	0x0800b7d0
 800b0bc:	0800b790 	.word	0x0800b790
 800b0c0:	0800b7f0 	.word	0x0800b7f0
 800b0c4:	0800b7fa 	.word	0x0800b7fa
 800b0c8:	00000000 	.word	0x00000000
 800b0cc:	0800ae4f 	.word	0x0800ae4f
 800b0d0:	0800b7f6 	.word	0x0800b7f6

0800b0d4 <_printf_common>:
 800b0d4:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800b0d8:	4616      	mov	r6, r2
 800b0da:	4699      	mov	r9, r3
 800b0dc:	688a      	ldr	r2, [r1, #8]
 800b0de:	690b      	ldr	r3, [r1, #16]
 800b0e0:	f8dd 8020 	ldr.w	r8, [sp, #32]
 800b0e4:	4293      	cmp	r3, r2
 800b0e6:	bfb8      	it	lt
 800b0e8:	4613      	movlt	r3, r2
 800b0ea:	6033      	str	r3, [r6, #0]
 800b0ec:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 800b0f0:	4607      	mov	r7, r0
 800b0f2:	460c      	mov	r4, r1
 800b0f4:	b10a      	cbz	r2, 800b0fa <_printf_common+0x26>
 800b0f6:	3301      	adds	r3, #1
 800b0f8:	6033      	str	r3, [r6, #0]
 800b0fa:	6823      	ldr	r3, [r4, #0]
 800b0fc:	0699      	lsls	r1, r3, #26
 800b0fe:	bf42      	ittt	mi
 800b100:	6833      	ldrmi	r3, [r6, #0]
 800b102:	3302      	addmi	r3, #2
 800b104:	6033      	strmi	r3, [r6, #0]
 800b106:	6825      	ldr	r5, [r4, #0]
 800b108:	f015 0506 	ands.w	r5, r5, #6
 800b10c:	d106      	bne.n	800b11c <_printf_common+0x48>
 800b10e:	f104 0a19 	add.w	sl, r4, #25
 800b112:	68e3      	ldr	r3, [r4, #12]
 800b114:	6832      	ldr	r2, [r6, #0]
 800b116:	1a9b      	subs	r3, r3, r2
 800b118:	42ab      	cmp	r3, r5
 800b11a:	dc26      	bgt.n	800b16a <_printf_common+0x96>
 800b11c:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 800b120:	1e13      	subs	r3, r2, #0
 800b122:	6822      	ldr	r2, [r4, #0]
 800b124:	bf18      	it	ne
 800b126:	2301      	movne	r3, #1
 800b128:	0692      	lsls	r2, r2, #26
 800b12a:	d42b      	bmi.n	800b184 <_printf_common+0xb0>
 800b12c:	f104 0243 	add.w	r2, r4, #67	; 0x43
 800b130:	4649      	mov	r1, r9
 800b132:	4638      	mov	r0, r7
 800b134:	47c0      	blx	r8
 800b136:	3001      	adds	r0, #1
 800b138:	d01e      	beq.n	800b178 <_printf_common+0xa4>
 800b13a:	6823      	ldr	r3, [r4, #0]
 800b13c:	68e5      	ldr	r5, [r4, #12]
 800b13e:	6832      	ldr	r2, [r6, #0]
 800b140:	f003 0306 	and.w	r3, r3, #6
 800b144:	2b04      	cmp	r3, #4
 800b146:	bf08      	it	eq
 800b148:	1aad      	subeq	r5, r5, r2
 800b14a:	68a3      	ldr	r3, [r4, #8]
 800b14c:	6922      	ldr	r2, [r4, #16]
 800b14e:	bf0c      	ite	eq
 800b150:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 800b154:	2500      	movne	r5, #0
 800b156:	4293      	cmp	r3, r2
 800b158:	bfc4      	itt	gt
 800b15a:	1a9b      	subgt	r3, r3, r2
 800b15c:	18ed      	addgt	r5, r5, r3
 800b15e:	2600      	movs	r6, #0
 800b160:	341a      	adds	r4, #26
 800b162:	42b5      	cmp	r5, r6
 800b164:	d11a      	bne.n	800b19c <_printf_common+0xc8>
 800b166:	2000      	movs	r0, #0
 800b168:	e008      	b.n	800b17c <_printf_common+0xa8>
 800b16a:	2301      	movs	r3, #1
 800b16c:	4652      	mov	r2, sl
 800b16e:	4649      	mov	r1, r9
 800b170:	4638      	mov	r0, r7
 800b172:	47c0      	blx	r8
 800b174:	3001      	adds	r0, #1
 800b176:	d103      	bne.n	800b180 <_printf_common+0xac>
 800b178:	f04f 30ff 	mov.w	r0, #4294967295
 800b17c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800b180:	3501      	adds	r5, #1
 800b182:	e7c6      	b.n	800b112 <_printf_common+0x3e>
 800b184:	18e1      	adds	r1, r4, r3
 800b186:	1c5a      	adds	r2, r3, #1
 800b188:	2030      	movs	r0, #48	; 0x30
 800b18a:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 800b18e:	4422      	add	r2, r4
 800b190:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 800b194:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 800b198:	3302      	adds	r3, #2
 800b19a:	e7c7      	b.n	800b12c <_printf_common+0x58>
 800b19c:	2301      	movs	r3, #1
 800b19e:	4622      	mov	r2, r4
 800b1a0:	4649      	mov	r1, r9
 800b1a2:	4638      	mov	r0, r7
 800b1a4:	47c0      	blx	r8
 800b1a6:	3001      	adds	r0, #1
 800b1a8:	d0e6      	beq.n	800b178 <_printf_common+0xa4>
 800b1aa:	3601      	adds	r6, #1
 800b1ac:	e7d9      	b.n	800b162 <_printf_common+0x8e>
	...

0800b1b0 <_printf_i>:
 800b1b0:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 800b1b4:	7e0f      	ldrb	r7, [r1, #24]
 800b1b6:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 800b1b8:	2f78      	cmp	r7, #120	; 0x78
 800b1ba:	4691      	mov	r9, r2
 800b1bc:	4680      	mov	r8, r0
 800b1be:	460c      	mov	r4, r1
 800b1c0:	469a      	mov	sl, r3
 800b1c2:	f101 0243 	add.w	r2, r1, #67	; 0x43
 800b1c6:	d807      	bhi.n	800b1d8 <_printf_i+0x28>
 800b1c8:	2f62      	cmp	r7, #98	; 0x62
 800b1ca:	d80a      	bhi.n	800b1e2 <_printf_i+0x32>
 800b1cc:	2f00      	cmp	r7, #0
 800b1ce:	f000 80d8 	beq.w	800b382 <_printf_i+0x1d2>
 800b1d2:	2f58      	cmp	r7, #88	; 0x58
 800b1d4:	f000 80a3 	beq.w	800b31e <_printf_i+0x16e>
 800b1d8:	f104 0542 	add.w	r5, r4, #66	; 0x42
 800b1dc:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 800b1e0:	e03a      	b.n	800b258 <_printf_i+0xa8>
 800b1e2:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 800b1e6:	2b15      	cmp	r3, #21
 800b1e8:	d8f6      	bhi.n	800b1d8 <_printf_i+0x28>
 800b1ea:	a101      	add	r1, pc, #4	; (adr r1, 800b1f0 <_printf_i+0x40>)
 800b1ec:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 800b1f0:	0800b249 	.word	0x0800b249
 800b1f4:	0800b25d 	.word	0x0800b25d
 800b1f8:	0800b1d9 	.word	0x0800b1d9
 800b1fc:	0800b1d9 	.word	0x0800b1d9
 800b200:	0800b1d9 	.word	0x0800b1d9
 800b204:	0800b1d9 	.word	0x0800b1d9
 800b208:	0800b25d 	.word	0x0800b25d
 800b20c:	0800b1d9 	.word	0x0800b1d9
 800b210:	0800b1d9 	.word	0x0800b1d9
 800b214:	0800b1d9 	.word	0x0800b1d9
 800b218:	0800b1d9 	.word	0x0800b1d9
 800b21c:	0800b369 	.word	0x0800b369
 800b220:	0800b28d 	.word	0x0800b28d
 800b224:	0800b34b 	.word	0x0800b34b
 800b228:	0800b1d9 	.word	0x0800b1d9
 800b22c:	0800b1d9 	.word	0x0800b1d9
 800b230:	0800b38b 	.word	0x0800b38b
 800b234:	0800b1d9 	.word	0x0800b1d9
 800b238:	0800b28d 	.word	0x0800b28d
 800b23c:	0800b1d9 	.word	0x0800b1d9
 800b240:	0800b1d9 	.word	0x0800b1d9
 800b244:	0800b353 	.word	0x0800b353
 800b248:	682b      	ldr	r3, [r5, #0]
 800b24a:	1d1a      	adds	r2, r3, #4
 800b24c:	681b      	ldr	r3, [r3, #0]
 800b24e:	602a      	str	r2, [r5, #0]
 800b250:	f104 0542 	add.w	r5, r4, #66	; 0x42
 800b254:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 800b258:	2301      	movs	r3, #1
 800b25a:	e0a3      	b.n	800b3a4 <_printf_i+0x1f4>
 800b25c:	6820      	ldr	r0, [r4, #0]
 800b25e:	6829      	ldr	r1, [r5, #0]
 800b260:	0606      	lsls	r6, r0, #24
 800b262:	f101 0304 	add.w	r3, r1, #4
 800b266:	d50a      	bpl.n	800b27e <_printf_i+0xce>
 800b268:	680e      	ldr	r6, [r1, #0]
 800b26a:	602b      	str	r3, [r5, #0]
 800b26c:	2e00      	cmp	r6, #0
 800b26e:	da03      	bge.n	800b278 <_printf_i+0xc8>
 800b270:	232d      	movs	r3, #45	; 0x2d
 800b272:	4276      	negs	r6, r6
 800b274:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800b278:	485e      	ldr	r0, [pc, #376]	; (800b3f4 <_printf_i+0x244>)
 800b27a:	230a      	movs	r3, #10
 800b27c:	e019      	b.n	800b2b2 <_printf_i+0x102>
 800b27e:	680e      	ldr	r6, [r1, #0]
 800b280:	602b      	str	r3, [r5, #0]
 800b282:	f010 0f40 	tst.w	r0, #64	; 0x40
 800b286:	bf18      	it	ne
 800b288:	b236      	sxthne	r6, r6
 800b28a:	e7ef      	b.n	800b26c <_printf_i+0xbc>
 800b28c:	682b      	ldr	r3, [r5, #0]
 800b28e:	6820      	ldr	r0, [r4, #0]
 800b290:	1d19      	adds	r1, r3, #4
 800b292:	6029      	str	r1, [r5, #0]
 800b294:	0601      	lsls	r1, r0, #24
 800b296:	d501      	bpl.n	800b29c <_printf_i+0xec>
 800b298:	681e      	ldr	r6, [r3, #0]
 800b29a:	e002      	b.n	800b2a2 <_printf_i+0xf2>
 800b29c:	0646      	lsls	r6, r0, #25
 800b29e:	d5fb      	bpl.n	800b298 <_printf_i+0xe8>
 800b2a0:	881e      	ldrh	r6, [r3, #0]
 800b2a2:	4854      	ldr	r0, [pc, #336]	; (800b3f4 <_printf_i+0x244>)
 800b2a4:	2f6f      	cmp	r7, #111	; 0x6f
 800b2a6:	bf0c      	ite	eq
 800b2a8:	2308      	moveq	r3, #8
 800b2aa:	230a      	movne	r3, #10
 800b2ac:	2100      	movs	r1, #0
 800b2ae:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 800b2b2:	6865      	ldr	r5, [r4, #4]
 800b2b4:	60a5      	str	r5, [r4, #8]
 800b2b6:	2d00      	cmp	r5, #0
 800b2b8:	bfa2      	ittt	ge
 800b2ba:	6821      	ldrge	r1, [r4, #0]
 800b2bc:	f021 0104 	bicge.w	r1, r1, #4
 800b2c0:	6021      	strge	r1, [r4, #0]
 800b2c2:	b90e      	cbnz	r6, 800b2c8 <_printf_i+0x118>
 800b2c4:	2d00      	cmp	r5, #0
 800b2c6:	d04d      	beq.n	800b364 <_printf_i+0x1b4>
 800b2c8:	4615      	mov	r5, r2
 800b2ca:	fbb6 f1f3 	udiv	r1, r6, r3
 800b2ce:	fb03 6711 	mls	r7, r3, r1, r6
 800b2d2:	5dc7      	ldrb	r7, [r0, r7]
 800b2d4:	f805 7d01 	strb.w	r7, [r5, #-1]!
 800b2d8:	4637      	mov	r7, r6
 800b2da:	42bb      	cmp	r3, r7
 800b2dc:	460e      	mov	r6, r1
 800b2de:	d9f4      	bls.n	800b2ca <_printf_i+0x11a>
 800b2e0:	2b08      	cmp	r3, #8
 800b2e2:	d10b      	bne.n	800b2fc <_printf_i+0x14c>
 800b2e4:	6823      	ldr	r3, [r4, #0]
 800b2e6:	07de      	lsls	r6, r3, #31
 800b2e8:	d508      	bpl.n	800b2fc <_printf_i+0x14c>
 800b2ea:	6923      	ldr	r3, [r4, #16]
 800b2ec:	6861      	ldr	r1, [r4, #4]
 800b2ee:	4299      	cmp	r1, r3
 800b2f0:	bfde      	ittt	le
 800b2f2:	2330      	movle	r3, #48	; 0x30
 800b2f4:	f805 3c01 	strble.w	r3, [r5, #-1]
 800b2f8:	f105 35ff 	addle.w	r5, r5, #4294967295
 800b2fc:	1b52      	subs	r2, r2, r5
 800b2fe:	6122      	str	r2, [r4, #16]
 800b300:	f8cd a000 	str.w	sl, [sp]
 800b304:	464b      	mov	r3, r9
 800b306:	aa03      	add	r2, sp, #12
 800b308:	4621      	mov	r1, r4
 800b30a:	4640      	mov	r0, r8
 800b30c:	f7ff fee2 	bl	800b0d4 <_printf_common>
 800b310:	3001      	adds	r0, #1
 800b312:	d14c      	bne.n	800b3ae <_printf_i+0x1fe>
 800b314:	f04f 30ff 	mov.w	r0, #4294967295
 800b318:	b004      	add	sp, #16
 800b31a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800b31e:	4835      	ldr	r0, [pc, #212]	; (800b3f4 <_printf_i+0x244>)
 800b320:	f881 7045 	strb.w	r7, [r1, #69]	; 0x45
 800b324:	6829      	ldr	r1, [r5, #0]
 800b326:	6823      	ldr	r3, [r4, #0]
 800b328:	f851 6b04 	ldr.w	r6, [r1], #4
 800b32c:	6029      	str	r1, [r5, #0]
 800b32e:	061d      	lsls	r5, r3, #24
 800b330:	d514      	bpl.n	800b35c <_printf_i+0x1ac>
 800b332:	07df      	lsls	r7, r3, #31
 800b334:	bf44      	itt	mi
 800b336:	f043 0320 	orrmi.w	r3, r3, #32
 800b33a:	6023      	strmi	r3, [r4, #0]
 800b33c:	b91e      	cbnz	r6, 800b346 <_printf_i+0x196>
 800b33e:	6823      	ldr	r3, [r4, #0]
 800b340:	f023 0320 	bic.w	r3, r3, #32
 800b344:	6023      	str	r3, [r4, #0]
 800b346:	2310      	movs	r3, #16
 800b348:	e7b0      	b.n	800b2ac <_printf_i+0xfc>
 800b34a:	6823      	ldr	r3, [r4, #0]
 800b34c:	f043 0320 	orr.w	r3, r3, #32
 800b350:	6023      	str	r3, [r4, #0]
 800b352:	2378      	movs	r3, #120	; 0x78
 800b354:	4828      	ldr	r0, [pc, #160]	; (800b3f8 <_printf_i+0x248>)
 800b356:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 800b35a:	e7e3      	b.n	800b324 <_printf_i+0x174>
 800b35c:	0659      	lsls	r1, r3, #25
 800b35e:	bf48      	it	mi
 800b360:	b2b6      	uxthmi	r6, r6
 800b362:	e7e6      	b.n	800b332 <_printf_i+0x182>
 800b364:	4615      	mov	r5, r2
 800b366:	e7bb      	b.n	800b2e0 <_printf_i+0x130>
 800b368:	682b      	ldr	r3, [r5, #0]
 800b36a:	6826      	ldr	r6, [r4, #0]
 800b36c:	6961      	ldr	r1, [r4, #20]
 800b36e:	1d18      	adds	r0, r3, #4
 800b370:	6028      	str	r0, [r5, #0]
 800b372:	0635      	lsls	r5, r6, #24
 800b374:	681b      	ldr	r3, [r3, #0]
 800b376:	d501      	bpl.n	800b37c <_printf_i+0x1cc>
 800b378:	6019      	str	r1, [r3, #0]
 800b37a:	e002      	b.n	800b382 <_printf_i+0x1d2>
 800b37c:	0670      	lsls	r0, r6, #25
 800b37e:	d5fb      	bpl.n	800b378 <_printf_i+0x1c8>
 800b380:	8019      	strh	r1, [r3, #0]
 800b382:	2300      	movs	r3, #0
 800b384:	6123      	str	r3, [r4, #16]
 800b386:	4615      	mov	r5, r2
 800b388:	e7ba      	b.n	800b300 <_printf_i+0x150>
 800b38a:	682b      	ldr	r3, [r5, #0]
 800b38c:	1d1a      	adds	r2, r3, #4
 800b38e:	602a      	str	r2, [r5, #0]
 800b390:	681d      	ldr	r5, [r3, #0]
 800b392:	6862      	ldr	r2, [r4, #4]
 800b394:	2100      	movs	r1, #0
 800b396:	4628      	mov	r0, r5
 800b398:	f7f4 ff2a 	bl	80001f0 <memchr>
 800b39c:	b108      	cbz	r0, 800b3a2 <_printf_i+0x1f2>
 800b39e:	1b40      	subs	r0, r0, r5
 800b3a0:	6060      	str	r0, [r4, #4]
 800b3a2:	6863      	ldr	r3, [r4, #4]
 800b3a4:	6123      	str	r3, [r4, #16]
 800b3a6:	2300      	movs	r3, #0
 800b3a8:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800b3ac:	e7a8      	b.n	800b300 <_printf_i+0x150>
 800b3ae:	6923      	ldr	r3, [r4, #16]
 800b3b0:	462a      	mov	r2, r5
 800b3b2:	4649      	mov	r1, r9
 800b3b4:	4640      	mov	r0, r8
 800b3b6:	47d0      	blx	sl
 800b3b8:	3001      	adds	r0, #1
 800b3ba:	d0ab      	beq.n	800b314 <_printf_i+0x164>
 800b3bc:	6823      	ldr	r3, [r4, #0]
 800b3be:	079b      	lsls	r3, r3, #30
 800b3c0:	d413      	bmi.n	800b3ea <_printf_i+0x23a>
 800b3c2:	68e0      	ldr	r0, [r4, #12]
 800b3c4:	9b03      	ldr	r3, [sp, #12]
 800b3c6:	4298      	cmp	r0, r3
 800b3c8:	bfb8      	it	lt
 800b3ca:	4618      	movlt	r0, r3
 800b3cc:	e7a4      	b.n	800b318 <_printf_i+0x168>
 800b3ce:	2301      	movs	r3, #1
 800b3d0:	4632      	mov	r2, r6
 800b3d2:	4649      	mov	r1, r9
 800b3d4:	4640      	mov	r0, r8
 800b3d6:	47d0      	blx	sl
 800b3d8:	3001      	adds	r0, #1
 800b3da:	d09b      	beq.n	800b314 <_printf_i+0x164>
 800b3dc:	3501      	adds	r5, #1
 800b3de:	68e3      	ldr	r3, [r4, #12]
 800b3e0:	9903      	ldr	r1, [sp, #12]
 800b3e2:	1a5b      	subs	r3, r3, r1
 800b3e4:	42ab      	cmp	r3, r5
 800b3e6:	dcf2      	bgt.n	800b3ce <_printf_i+0x21e>
 800b3e8:	e7eb      	b.n	800b3c2 <_printf_i+0x212>
 800b3ea:	2500      	movs	r5, #0
 800b3ec:	f104 0619 	add.w	r6, r4, #25
 800b3f0:	e7f5      	b.n	800b3de <_printf_i+0x22e>
 800b3f2:	bf00      	nop
 800b3f4:	0800b801 	.word	0x0800b801
 800b3f8:	0800b812 	.word	0x0800b812

0800b3fc <__sread>:
 800b3fc:	b510      	push	{r4, lr}
 800b3fe:	460c      	mov	r4, r1
 800b400:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800b404:	f000 f8de 	bl	800b5c4 <_read_r>
 800b408:	2800      	cmp	r0, #0
 800b40a:	bfab      	itete	ge
 800b40c:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 800b40e:	89a3      	ldrhlt	r3, [r4, #12]
 800b410:	181b      	addge	r3, r3, r0
 800b412:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 800b416:	bfac      	ite	ge
 800b418:	6563      	strge	r3, [r4, #84]	; 0x54
 800b41a:	81a3      	strhlt	r3, [r4, #12]
 800b41c:	bd10      	pop	{r4, pc}

0800b41e <__swrite>:
 800b41e:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800b422:	461f      	mov	r7, r3
 800b424:	898b      	ldrh	r3, [r1, #12]
 800b426:	05db      	lsls	r3, r3, #23
 800b428:	4605      	mov	r5, r0
 800b42a:	460c      	mov	r4, r1
 800b42c:	4616      	mov	r6, r2
 800b42e:	d505      	bpl.n	800b43c <__swrite+0x1e>
 800b430:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800b434:	2302      	movs	r3, #2
 800b436:	2200      	movs	r2, #0
 800b438:	f000 f868 	bl	800b50c <_lseek_r>
 800b43c:	89a3      	ldrh	r3, [r4, #12]
 800b43e:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800b442:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 800b446:	81a3      	strh	r3, [r4, #12]
 800b448:	4632      	mov	r2, r6
 800b44a:	463b      	mov	r3, r7
 800b44c:	4628      	mov	r0, r5
 800b44e:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800b452:	f000 b817 	b.w	800b484 <_write_r>

0800b456 <__sseek>:
 800b456:	b510      	push	{r4, lr}
 800b458:	460c      	mov	r4, r1
 800b45a:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800b45e:	f000 f855 	bl	800b50c <_lseek_r>
 800b462:	1c43      	adds	r3, r0, #1
 800b464:	89a3      	ldrh	r3, [r4, #12]
 800b466:	bf15      	itete	ne
 800b468:	6560      	strne	r0, [r4, #84]	; 0x54
 800b46a:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 800b46e:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 800b472:	81a3      	strheq	r3, [r4, #12]
 800b474:	bf18      	it	ne
 800b476:	81a3      	strhne	r3, [r4, #12]
 800b478:	bd10      	pop	{r4, pc}

0800b47a <__sclose>:
 800b47a:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800b47e:	f000 b813 	b.w	800b4a8 <_close_r>
	...

0800b484 <_write_r>:
 800b484:	b538      	push	{r3, r4, r5, lr}
 800b486:	4d07      	ldr	r5, [pc, #28]	; (800b4a4 <_write_r+0x20>)
 800b488:	4604      	mov	r4, r0
 800b48a:	4608      	mov	r0, r1
 800b48c:	4611      	mov	r1, r2
 800b48e:	2200      	movs	r2, #0
 800b490:	602a      	str	r2, [r5, #0]
 800b492:	461a      	mov	r2, r3
 800b494:	f7f5 f898 	bl	80005c8 <_write>
 800b498:	1c43      	adds	r3, r0, #1
 800b49a:	d102      	bne.n	800b4a2 <_write_r+0x1e>
 800b49c:	682b      	ldr	r3, [r5, #0]
 800b49e:	b103      	cbz	r3, 800b4a2 <_write_r+0x1e>
 800b4a0:	6023      	str	r3, [r4, #0]
 800b4a2:	bd38      	pop	{r3, r4, r5, pc}
 800b4a4:	200093dc 	.word	0x200093dc

0800b4a8 <_close_r>:
 800b4a8:	b538      	push	{r3, r4, r5, lr}
 800b4aa:	4d06      	ldr	r5, [pc, #24]	; (800b4c4 <_close_r+0x1c>)
 800b4ac:	2300      	movs	r3, #0
 800b4ae:	4604      	mov	r4, r0
 800b4b0:	4608      	mov	r0, r1
 800b4b2:	602b      	str	r3, [r5, #0]
 800b4b4:	f7f6 f897 	bl	80015e6 <_close>
 800b4b8:	1c43      	adds	r3, r0, #1
 800b4ba:	d102      	bne.n	800b4c2 <_close_r+0x1a>
 800b4bc:	682b      	ldr	r3, [r5, #0]
 800b4be:	b103      	cbz	r3, 800b4c2 <_close_r+0x1a>
 800b4c0:	6023      	str	r3, [r4, #0]
 800b4c2:	bd38      	pop	{r3, r4, r5, pc}
 800b4c4:	200093dc 	.word	0x200093dc

0800b4c8 <_fstat_r>:
 800b4c8:	b538      	push	{r3, r4, r5, lr}
 800b4ca:	4d07      	ldr	r5, [pc, #28]	; (800b4e8 <_fstat_r+0x20>)
 800b4cc:	2300      	movs	r3, #0
 800b4ce:	4604      	mov	r4, r0
 800b4d0:	4608      	mov	r0, r1
 800b4d2:	4611      	mov	r1, r2
 800b4d4:	602b      	str	r3, [r5, #0]
 800b4d6:	f7f6 f892 	bl	80015fe <_fstat>
 800b4da:	1c43      	adds	r3, r0, #1
 800b4dc:	d102      	bne.n	800b4e4 <_fstat_r+0x1c>
 800b4de:	682b      	ldr	r3, [r5, #0]
 800b4e0:	b103      	cbz	r3, 800b4e4 <_fstat_r+0x1c>
 800b4e2:	6023      	str	r3, [r4, #0]
 800b4e4:	bd38      	pop	{r3, r4, r5, pc}
 800b4e6:	bf00      	nop
 800b4e8:	200093dc 	.word	0x200093dc

0800b4ec <_isatty_r>:
 800b4ec:	b538      	push	{r3, r4, r5, lr}
 800b4ee:	4d06      	ldr	r5, [pc, #24]	; (800b508 <_isatty_r+0x1c>)
 800b4f0:	2300      	movs	r3, #0
 800b4f2:	4604      	mov	r4, r0
 800b4f4:	4608      	mov	r0, r1
 800b4f6:	602b      	str	r3, [r5, #0]
 800b4f8:	f7f6 f891 	bl	800161e <_isatty>
 800b4fc:	1c43      	adds	r3, r0, #1
 800b4fe:	d102      	bne.n	800b506 <_isatty_r+0x1a>
 800b500:	682b      	ldr	r3, [r5, #0]
 800b502:	b103      	cbz	r3, 800b506 <_isatty_r+0x1a>
 800b504:	6023      	str	r3, [r4, #0]
 800b506:	bd38      	pop	{r3, r4, r5, pc}
 800b508:	200093dc 	.word	0x200093dc

0800b50c <_lseek_r>:
 800b50c:	b538      	push	{r3, r4, r5, lr}
 800b50e:	4d07      	ldr	r5, [pc, #28]	; (800b52c <_lseek_r+0x20>)
 800b510:	4604      	mov	r4, r0
 800b512:	4608      	mov	r0, r1
 800b514:	4611      	mov	r1, r2
 800b516:	2200      	movs	r2, #0
 800b518:	602a      	str	r2, [r5, #0]
 800b51a:	461a      	mov	r2, r3
 800b51c:	f7f6 f88a 	bl	8001634 <_lseek>
 800b520:	1c43      	adds	r3, r0, #1
 800b522:	d102      	bne.n	800b52a <_lseek_r+0x1e>
 800b524:	682b      	ldr	r3, [r5, #0]
 800b526:	b103      	cbz	r3, 800b52a <_lseek_r+0x1e>
 800b528:	6023      	str	r3, [r4, #0]
 800b52a:	bd38      	pop	{r3, r4, r5, pc}
 800b52c:	200093dc 	.word	0x200093dc

0800b530 <memmove>:
 800b530:	4288      	cmp	r0, r1
 800b532:	b510      	push	{r4, lr}
 800b534:	eb01 0402 	add.w	r4, r1, r2
 800b538:	d902      	bls.n	800b540 <memmove+0x10>
 800b53a:	4284      	cmp	r4, r0
 800b53c:	4623      	mov	r3, r4
 800b53e:	d807      	bhi.n	800b550 <memmove+0x20>
 800b540:	1e43      	subs	r3, r0, #1
 800b542:	42a1      	cmp	r1, r4
 800b544:	d008      	beq.n	800b558 <memmove+0x28>
 800b546:	f811 2b01 	ldrb.w	r2, [r1], #1
 800b54a:	f803 2f01 	strb.w	r2, [r3, #1]!
 800b54e:	e7f8      	b.n	800b542 <memmove+0x12>
 800b550:	4402      	add	r2, r0
 800b552:	4601      	mov	r1, r0
 800b554:	428a      	cmp	r2, r1
 800b556:	d100      	bne.n	800b55a <memmove+0x2a>
 800b558:	bd10      	pop	{r4, pc}
 800b55a:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 800b55e:	f802 4d01 	strb.w	r4, [r2, #-1]!
 800b562:	e7f7      	b.n	800b554 <memmove+0x24>

0800b564 <_realloc_r>:
 800b564:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800b568:	4680      	mov	r8, r0
 800b56a:	4614      	mov	r4, r2
 800b56c:	460e      	mov	r6, r1
 800b56e:	b921      	cbnz	r1, 800b57a <_realloc_r+0x16>
 800b570:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800b574:	4611      	mov	r1, r2
 800b576:	f7fe bed9 	b.w	800a32c <_malloc_r>
 800b57a:	b92a      	cbnz	r2, 800b588 <_realloc_r+0x24>
 800b57c:	f7fe fe6a 	bl	800a254 <_free_r>
 800b580:	4625      	mov	r5, r4
 800b582:	4628      	mov	r0, r5
 800b584:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800b588:	f000 f82e 	bl	800b5e8 <_malloc_usable_size_r>
 800b58c:	4284      	cmp	r4, r0
 800b58e:	4607      	mov	r7, r0
 800b590:	d802      	bhi.n	800b598 <_realloc_r+0x34>
 800b592:	ebb4 0f50 	cmp.w	r4, r0, lsr #1
 800b596:	d812      	bhi.n	800b5be <_realloc_r+0x5a>
 800b598:	4621      	mov	r1, r4
 800b59a:	4640      	mov	r0, r8
 800b59c:	f7fe fec6 	bl	800a32c <_malloc_r>
 800b5a0:	4605      	mov	r5, r0
 800b5a2:	2800      	cmp	r0, #0
 800b5a4:	d0ed      	beq.n	800b582 <_realloc_r+0x1e>
 800b5a6:	42bc      	cmp	r4, r7
 800b5a8:	4622      	mov	r2, r4
 800b5aa:	4631      	mov	r1, r6
 800b5ac:	bf28      	it	cs
 800b5ae:	463a      	movcs	r2, r7
 800b5b0:	f7fe fe3a 	bl	800a228 <memcpy>
 800b5b4:	4631      	mov	r1, r6
 800b5b6:	4640      	mov	r0, r8
 800b5b8:	f7fe fe4c 	bl	800a254 <_free_r>
 800b5bc:	e7e1      	b.n	800b582 <_realloc_r+0x1e>
 800b5be:	4635      	mov	r5, r6
 800b5c0:	e7df      	b.n	800b582 <_realloc_r+0x1e>
	...

0800b5c4 <_read_r>:
 800b5c4:	b538      	push	{r3, r4, r5, lr}
 800b5c6:	4d07      	ldr	r5, [pc, #28]	; (800b5e4 <_read_r+0x20>)
 800b5c8:	4604      	mov	r4, r0
 800b5ca:	4608      	mov	r0, r1
 800b5cc:	4611      	mov	r1, r2
 800b5ce:	2200      	movs	r2, #0
 800b5d0:	602a      	str	r2, [r5, #0]
 800b5d2:	461a      	mov	r2, r3
 800b5d4:	f7f5 ffea 	bl	80015ac <_read>
 800b5d8:	1c43      	adds	r3, r0, #1
 800b5da:	d102      	bne.n	800b5e2 <_read_r+0x1e>
 800b5dc:	682b      	ldr	r3, [r5, #0]
 800b5de:	b103      	cbz	r3, 800b5e2 <_read_r+0x1e>
 800b5e0:	6023      	str	r3, [r4, #0]
 800b5e2:	bd38      	pop	{r3, r4, r5, pc}
 800b5e4:	200093dc 	.word	0x200093dc

0800b5e8 <_malloc_usable_size_r>:
 800b5e8:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800b5ec:	1f18      	subs	r0, r3, #4
 800b5ee:	2b00      	cmp	r3, #0
 800b5f0:	bfbc      	itt	lt
 800b5f2:	580b      	ldrlt	r3, [r1, r0]
 800b5f4:	18c0      	addlt	r0, r0, r3
 800b5f6:	4770      	bx	lr

0800b5f8 <_init>:
 800b5f8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800b5fa:	bf00      	nop
 800b5fc:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800b5fe:	bc08      	pop	{r3}
 800b600:	469e      	mov	lr, r3
 800b602:	4770      	bx	lr

0800b604 <_fini>:
 800b604:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800b606:	bf00      	nop
 800b608:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800b60a:	bc08      	pop	{r3}
 800b60c:	469e      	mov	lr, r3
 800b60e:	4770      	bx	lr
