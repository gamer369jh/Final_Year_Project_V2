
CMSIS_FreeRTOS_preemptive_scheduling_test.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001ac  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000ab90  080001b0  080001b0  000101b0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000214  0800ad40  0800ad40  0001ad40  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0800af54  0800af54  00020074  2**0
                  CONTENTS
  4 .ARM          00000008  0800af54  0800af54  0001af54  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  0800af5c  0800af5c  00020074  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0800af5c  0800af5c  0001af5c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  0800af60  0800af60  0001af60  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000074  20000000  0800af64  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .ccmram       00000000  10000000  10000000  00020074  2**0
                  CONTENTS
 10 .bss          00009378  20000074  20000074  00020074  2**2
                  ALLOC
 11 ._user_heap_stack 00000604  200093ec  200093ec  00020074  2**0
                  ALLOC
 12 .ARM.attributes 00000030  00000000  00000000  00020074  2**0
                  CONTENTS, READONLY
 13 .debug_info   0002bb6e  00000000  00000000  000200a4  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 000057d3  00000000  00000000  0004bc12  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 00002490  00000000  00000000  000513e8  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_ranges 00002270  00000000  00000000  00053878  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  0002af32  00000000  00000000  00055ae8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   0002a2ab  00000000  00000000  00080a1a  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    000f6da6  00000000  00000000  000aacc5  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .comment      00000050  00000000  00000000  001a1a6b  2**0
                  CONTENTS, READONLY
 21 .debug_frame  0000a5b4  00000000  00000000  001a1abc  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001b0 <__do_global_dtors_aux>:
 80001b0:	b510      	push	{r4, lr}
 80001b2:	4c05      	ldr	r4, [pc, #20]	; (80001c8 <__do_global_dtors_aux+0x18>)
 80001b4:	7823      	ldrb	r3, [r4, #0]
 80001b6:	b933      	cbnz	r3, 80001c6 <__do_global_dtors_aux+0x16>
 80001b8:	4b04      	ldr	r3, [pc, #16]	; (80001cc <__do_global_dtors_aux+0x1c>)
 80001ba:	b113      	cbz	r3, 80001c2 <__do_global_dtors_aux+0x12>
 80001bc:	4804      	ldr	r0, [pc, #16]	; (80001d0 <__do_global_dtors_aux+0x20>)
 80001be:	f3af 8000 	nop.w
 80001c2:	2301      	movs	r3, #1
 80001c4:	7023      	strb	r3, [r4, #0]
 80001c6:	bd10      	pop	{r4, pc}
 80001c8:	20000074 	.word	0x20000074
 80001cc:	00000000 	.word	0x00000000
 80001d0:	0800ad28 	.word	0x0800ad28

080001d4 <frame_dummy>:
 80001d4:	b508      	push	{r3, lr}
 80001d6:	4b03      	ldr	r3, [pc, #12]	; (80001e4 <frame_dummy+0x10>)
 80001d8:	b11b      	cbz	r3, 80001e2 <frame_dummy+0xe>
 80001da:	4903      	ldr	r1, [pc, #12]	; (80001e8 <frame_dummy+0x14>)
 80001dc:	4803      	ldr	r0, [pc, #12]	; (80001ec <frame_dummy+0x18>)
 80001de:	f3af 8000 	nop.w
 80001e2:	bd08      	pop	{r3, pc}
 80001e4:	00000000 	.word	0x00000000
 80001e8:	20000078 	.word	0x20000078
 80001ec:	0800ad28 	.word	0x0800ad28

080001f0 <memchr>:
 80001f0:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 80001f4:	2a10      	cmp	r2, #16
 80001f6:	db2b      	blt.n	8000250 <memchr+0x60>
 80001f8:	f010 0f07 	tst.w	r0, #7
 80001fc:	d008      	beq.n	8000210 <memchr+0x20>
 80001fe:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000202:	3a01      	subs	r2, #1
 8000204:	428b      	cmp	r3, r1
 8000206:	d02d      	beq.n	8000264 <memchr+0x74>
 8000208:	f010 0f07 	tst.w	r0, #7
 800020c:	b342      	cbz	r2, 8000260 <memchr+0x70>
 800020e:	d1f6      	bne.n	80001fe <memchr+0xe>
 8000210:	b4f0      	push	{r4, r5, r6, r7}
 8000212:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000216:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800021a:	f022 0407 	bic.w	r4, r2, #7
 800021e:	f07f 0700 	mvns.w	r7, #0
 8000222:	2300      	movs	r3, #0
 8000224:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000228:	3c08      	subs	r4, #8
 800022a:	ea85 0501 	eor.w	r5, r5, r1
 800022e:	ea86 0601 	eor.w	r6, r6, r1
 8000232:	fa85 f547 	uadd8	r5, r5, r7
 8000236:	faa3 f587 	sel	r5, r3, r7
 800023a:	fa86 f647 	uadd8	r6, r6, r7
 800023e:	faa5 f687 	sel	r6, r5, r7
 8000242:	b98e      	cbnz	r6, 8000268 <memchr+0x78>
 8000244:	d1ee      	bne.n	8000224 <memchr+0x34>
 8000246:	bcf0      	pop	{r4, r5, r6, r7}
 8000248:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800024c:	f002 0207 	and.w	r2, r2, #7
 8000250:	b132      	cbz	r2, 8000260 <memchr+0x70>
 8000252:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000256:	3a01      	subs	r2, #1
 8000258:	ea83 0301 	eor.w	r3, r3, r1
 800025c:	b113      	cbz	r3, 8000264 <memchr+0x74>
 800025e:	d1f8      	bne.n	8000252 <memchr+0x62>
 8000260:	2000      	movs	r0, #0
 8000262:	4770      	bx	lr
 8000264:	3801      	subs	r0, #1
 8000266:	4770      	bx	lr
 8000268:	2d00      	cmp	r5, #0
 800026a:	bf06      	itte	eq
 800026c:	4635      	moveq	r5, r6
 800026e:	3803      	subeq	r0, #3
 8000270:	3807      	subne	r0, #7
 8000272:	f015 0f01 	tst.w	r5, #1
 8000276:	d107      	bne.n	8000288 <memchr+0x98>
 8000278:	3001      	adds	r0, #1
 800027a:	f415 7f80 	tst.w	r5, #256	; 0x100
 800027e:	bf02      	ittt	eq
 8000280:	3001      	addeq	r0, #1
 8000282:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 8000286:	3001      	addeq	r0, #1
 8000288:	bcf0      	pop	{r4, r5, r6, r7}
 800028a:	3801      	subs	r0, #1
 800028c:	4770      	bx	lr
 800028e:	bf00      	nop

08000290 <__aeabi_uldivmod>:
 8000290:	b953      	cbnz	r3, 80002a8 <__aeabi_uldivmod+0x18>
 8000292:	b94a      	cbnz	r2, 80002a8 <__aeabi_uldivmod+0x18>
 8000294:	2900      	cmp	r1, #0
 8000296:	bf08      	it	eq
 8000298:	2800      	cmpeq	r0, #0
 800029a:	bf1c      	itt	ne
 800029c:	f04f 31ff 	movne.w	r1, #4294967295
 80002a0:	f04f 30ff 	movne.w	r0, #4294967295
 80002a4:	f000 b974 	b.w	8000590 <__aeabi_idiv0>
 80002a8:	f1ad 0c08 	sub.w	ip, sp, #8
 80002ac:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 80002b0:	f000 f806 	bl	80002c0 <__udivmoddi4>
 80002b4:	f8dd e004 	ldr.w	lr, [sp, #4]
 80002b8:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80002bc:	b004      	add	sp, #16
 80002be:	4770      	bx	lr

080002c0 <__udivmoddi4>:
 80002c0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80002c4:	9d08      	ldr	r5, [sp, #32]
 80002c6:	4604      	mov	r4, r0
 80002c8:	468e      	mov	lr, r1
 80002ca:	2b00      	cmp	r3, #0
 80002cc:	d14d      	bne.n	800036a <__udivmoddi4+0xaa>
 80002ce:	428a      	cmp	r2, r1
 80002d0:	4694      	mov	ip, r2
 80002d2:	d969      	bls.n	80003a8 <__udivmoddi4+0xe8>
 80002d4:	fab2 f282 	clz	r2, r2
 80002d8:	b152      	cbz	r2, 80002f0 <__udivmoddi4+0x30>
 80002da:	fa01 f302 	lsl.w	r3, r1, r2
 80002de:	f1c2 0120 	rsb	r1, r2, #32
 80002e2:	fa20 f101 	lsr.w	r1, r0, r1
 80002e6:	fa0c fc02 	lsl.w	ip, ip, r2
 80002ea:	ea41 0e03 	orr.w	lr, r1, r3
 80002ee:	4094      	lsls	r4, r2
 80002f0:	ea4f 481c 	mov.w	r8, ip, lsr #16
 80002f4:	0c21      	lsrs	r1, r4, #16
 80002f6:	fbbe f6f8 	udiv	r6, lr, r8
 80002fa:	fa1f f78c 	uxth.w	r7, ip
 80002fe:	fb08 e316 	mls	r3, r8, r6, lr
 8000302:	ea41 4303 	orr.w	r3, r1, r3, lsl #16
 8000306:	fb06 f107 	mul.w	r1, r6, r7
 800030a:	4299      	cmp	r1, r3
 800030c:	d90a      	bls.n	8000324 <__udivmoddi4+0x64>
 800030e:	eb1c 0303 	adds.w	r3, ip, r3
 8000312:	f106 30ff 	add.w	r0, r6, #4294967295
 8000316:	f080 811f 	bcs.w	8000558 <__udivmoddi4+0x298>
 800031a:	4299      	cmp	r1, r3
 800031c:	f240 811c 	bls.w	8000558 <__udivmoddi4+0x298>
 8000320:	3e02      	subs	r6, #2
 8000322:	4463      	add	r3, ip
 8000324:	1a5b      	subs	r3, r3, r1
 8000326:	b2a4      	uxth	r4, r4
 8000328:	fbb3 f0f8 	udiv	r0, r3, r8
 800032c:	fb08 3310 	mls	r3, r8, r0, r3
 8000330:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000334:	fb00 f707 	mul.w	r7, r0, r7
 8000338:	42a7      	cmp	r7, r4
 800033a:	d90a      	bls.n	8000352 <__udivmoddi4+0x92>
 800033c:	eb1c 0404 	adds.w	r4, ip, r4
 8000340:	f100 33ff 	add.w	r3, r0, #4294967295
 8000344:	f080 810a 	bcs.w	800055c <__udivmoddi4+0x29c>
 8000348:	42a7      	cmp	r7, r4
 800034a:	f240 8107 	bls.w	800055c <__udivmoddi4+0x29c>
 800034e:	4464      	add	r4, ip
 8000350:	3802      	subs	r0, #2
 8000352:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 8000356:	1be4      	subs	r4, r4, r7
 8000358:	2600      	movs	r6, #0
 800035a:	b11d      	cbz	r5, 8000364 <__udivmoddi4+0xa4>
 800035c:	40d4      	lsrs	r4, r2
 800035e:	2300      	movs	r3, #0
 8000360:	e9c5 4300 	strd	r4, r3, [r5]
 8000364:	4631      	mov	r1, r6
 8000366:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800036a:	428b      	cmp	r3, r1
 800036c:	d909      	bls.n	8000382 <__udivmoddi4+0xc2>
 800036e:	2d00      	cmp	r5, #0
 8000370:	f000 80ef 	beq.w	8000552 <__udivmoddi4+0x292>
 8000374:	2600      	movs	r6, #0
 8000376:	e9c5 0100 	strd	r0, r1, [r5]
 800037a:	4630      	mov	r0, r6
 800037c:	4631      	mov	r1, r6
 800037e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000382:	fab3 f683 	clz	r6, r3
 8000386:	2e00      	cmp	r6, #0
 8000388:	d14a      	bne.n	8000420 <__udivmoddi4+0x160>
 800038a:	428b      	cmp	r3, r1
 800038c:	d302      	bcc.n	8000394 <__udivmoddi4+0xd4>
 800038e:	4282      	cmp	r2, r0
 8000390:	f200 80f9 	bhi.w	8000586 <__udivmoddi4+0x2c6>
 8000394:	1a84      	subs	r4, r0, r2
 8000396:	eb61 0303 	sbc.w	r3, r1, r3
 800039a:	2001      	movs	r0, #1
 800039c:	469e      	mov	lr, r3
 800039e:	2d00      	cmp	r5, #0
 80003a0:	d0e0      	beq.n	8000364 <__udivmoddi4+0xa4>
 80003a2:	e9c5 4e00 	strd	r4, lr, [r5]
 80003a6:	e7dd      	b.n	8000364 <__udivmoddi4+0xa4>
 80003a8:	b902      	cbnz	r2, 80003ac <__udivmoddi4+0xec>
 80003aa:	deff      	udf	#255	; 0xff
 80003ac:	fab2 f282 	clz	r2, r2
 80003b0:	2a00      	cmp	r2, #0
 80003b2:	f040 8092 	bne.w	80004da <__udivmoddi4+0x21a>
 80003b6:	eba1 010c 	sub.w	r1, r1, ip
 80003ba:	ea4f 471c 	mov.w	r7, ip, lsr #16
 80003be:	fa1f fe8c 	uxth.w	lr, ip
 80003c2:	2601      	movs	r6, #1
 80003c4:	0c20      	lsrs	r0, r4, #16
 80003c6:	fbb1 f3f7 	udiv	r3, r1, r7
 80003ca:	fb07 1113 	mls	r1, r7, r3, r1
 80003ce:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 80003d2:	fb0e f003 	mul.w	r0, lr, r3
 80003d6:	4288      	cmp	r0, r1
 80003d8:	d908      	bls.n	80003ec <__udivmoddi4+0x12c>
 80003da:	eb1c 0101 	adds.w	r1, ip, r1
 80003de:	f103 38ff 	add.w	r8, r3, #4294967295
 80003e2:	d202      	bcs.n	80003ea <__udivmoddi4+0x12a>
 80003e4:	4288      	cmp	r0, r1
 80003e6:	f200 80cb 	bhi.w	8000580 <__udivmoddi4+0x2c0>
 80003ea:	4643      	mov	r3, r8
 80003ec:	1a09      	subs	r1, r1, r0
 80003ee:	b2a4      	uxth	r4, r4
 80003f0:	fbb1 f0f7 	udiv	r0, r1, r7
 80003f4:	fb07 1110 	mls	r1, r7, r0, r1
 80003f8:	ea44 4401 	orr.w	r4, r4, r1, lsl #16
 80003fc:	fb0e fe00 	mul.w	lr, lr, r0
 8000400:	45a6      	cmp	lr, r4
 8000402:	d908      	bls.n	8000416 <__udivmoddi4+0x156>
 8000404:	eb1c 0404 	adds.w	r4, ip, r4
 8000408:	f100 31ff 	add.w	r1, r0, #4294967295
 800040c:	d202      	bcs.n	8000414 <__udivmoddi4+0x154>
 800040e:	45a6      	cmp	lr, r4
 8000410:	f200 80bb 	bhi.w	800058a <__udivmoddi4+0x2ca>
 8000414:	4608      	mov	r0, r1
 8000416:	eba4 040e 	sub.w	r4, r4, lr
 800041a:	ea40 4003 	orr.w	r0, r0, r3, lsl #16
 800041e:	e79c      	b.n	800035a <__udivmoddi4+0x9a>
 8000420:	f1c6 0720 	rsb	r7, r6, #32
 8000424:	40b3      	lsls	r3, r6
 8000426:	fa22 fc07 	lsr.w	ip, r2, r7
 800042a:	ea4c 0c03 	orr.w	ip, ip, r3
 800042e:	fa20 f407 	lsr.w	r4, r0, r7
 8000432:	fa01 f306 	lsl.w	r3, r1, r6
 8000436:	431c      	orrs	r4, r3
 8000438:	40f9      	lsrs	r1, r7
 800043a:	ea4f 491c 	mov.w	r9, ip, lsr #16
 800043e:	fa00 f306 	lsl.w	r3, r0, r6
 8000442:	fbb1 f8f9 	udiv	r8, r1, r9
 8000446:	0c20      	lsrs	r0, r4, #16
 8000448:	fa1f fe8c 	uxth.w	lr, ip
 800044c:	fb09 1118 	mls	r1, r9, r8, r1
 8000450:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 8000454:	fb08 f00e 	mul.w	r0, r8, lr
 8000458:	4288      	cmp	r0, r1
 800045a:	fa02 f206 	lsl.w	r2, r2, r6
 800045e:	d90b      	bls.n	8000478 <__udivmoddi4+0x1b8>
 8000460:	eb1c 0101 	adds.w	r1, ip, r1
 8000464:	f108 3aff 	add.w	sl, r8, #4294967295
 8000468:	f080 8088 	bcs.w	800057c <__udivmoddi4+0x2bc>
 800046c:	4288      	cmp	r0, r1
 800046e:	f240 8085 	bls.w	800057c <__udivmoddi4+0x2bc>
 8000472:	f1a8 0802 	sub.w	r8, r8, #2
 8000476:	4461      	add	r1, ip
 8000478:	1a09      	subs	r1, r1, r0
 800047a:	b2a4      	uxth	r4, r4
 800047c:	fbb1 f0f9 	udiv	r0, r1, r9
 8000480:	fb09 1110 	mls	r1, r9, r0, r1
 8000484:	ea44 4101 	orr.w	r1, r4, r1, lsl #16
 8000488:	fb00 fe0e 	mul.w	lr, r0, lr
 800048c:	458e      	cmp	lr, r1
 800048e:	d908      	bls.n	80004a2 <__udivmoddi4+0x1e2>
 8000490:	eb1c 0101 	adds.w	r1, ip, r1
 8000494:	f100 34ff 	add.w	r4, r0, #4294967295
 8000498:	d26c      	bcs.n	8000574 <__udivmoddi4+0x2b4>
 800049a:	458e      	cmp	lr, r1
 800049c:	d96a      	bls.n	8000574 <__udivmoddi4+0x2b4>
 800049e:	3802      	subs	r0, #2
 80004a0:	4461      	add	r1, ip
 80004a2:	ea40 4008 	orr.w	r0, r0, r8, lsl #16
 80004a6:	fba0 9402 	umull	r9, r4, r0, r2
 80004aa:	eba1 010e 	sub.w	r1, r1, lr
 80004ae:	42a1      	cmp	r1, r4
 80004b0:	46c8      	mov	r8, r9
 80004b2:	46a6      	mov	lr, r4
 80004b4:	d356      	bcc.n	8000564 <__udivmoddi4+0x2a4>
 80004b6:	d053      	beq.n	8000560 <__udivmoddi4+0x2a0>
 80004b8:	b15d      	cbz	r5, 80004d2 <__udivmoddi4+0x212>
 80004ba:	ebb3 0208 	subs.w	r2, r3, r8
 80004be:	eb61 010e 	sbc.w	r1, r1, lr
 80004c2:	fa01 f707 	lsl.w	r7, r1, r7
 80004c6:	fa22 f306 	lsr.w	r3, r2, r6
 80004ca:	40f1      	lsrs	r1, r6
 80004cc:	431f      	orrs	r7, r3
 80004ce:	e9c5 7100 	strd	r7, r1, [r5]
 80004d2:	2600      	movs	r6, #0
 80004d4:	4631      	mov	r1, r6
 80004d6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80004da:	f1c2 0320 	rsb	r3, r2, #32
 80004de:	40d8      	lsrs	r0, r3
 80004e0:	fa0c fc02 	lsl.w	ip, ip, r2
 80004e4:	fa21 f303 	lsr.w	r3, r1, r3
 80004e8:	4091      	lsls	r1, r2
 80004ea:	4301      	orrs	r1, r0
 80004ec:	ea4f 471c 	mov.w	r7, ip, lsr #16
 80004f0:	fa1f fe8c 	uxth.w	lr, ip
 80004f4:	fbb3 f0f7 	udiv	r0, r3, r7
 80004f8:	fb07 3610 	mls	r6, r7, r0, r3
 80004fc:	0c0b      	lsrs	r3, r1, #16
 80004fe:	ea43 4306 	orr.w	r3, r3, r6, lsl #16
 8000502:	fb00 f60e 	mul.w	r6, r0, lr
 8000506:	429e      	cmp	r6, r3
 8000508:	fa04 f402 	lsl.w	r4, r4, r2
 800050c:	d908      	bls.n	8000520 <__udivmoddi4+0x260>
 800050e:	eb1c 0303 	adds.w	r3, ip, r3
 8000512:	f100 38ff 	add.w	r8, r0, #4294967295
 8000516:	d22f      	bcs.n	8000578 <__udivmoddi4+0x2b8>
 8000518:	429e      	cmp	r6, r3
 800051a:	d92d      	bls.n	8000578 <__udivmoddi4+0x2b8>
 800051c:	3802      	subs	r0, #2
 800051e:	4463      	add	r3, ip
 8000520:	1b9b      	subs	r3, r3, r6
 8000522:	b289      	uxth	r1, r1
 8000524:	fbb3 f6f7 	udiv	r6, r3, r7
 8000528:	fb07 3316 	mls	r3, r7, r6, r3
 800052c:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000530:	fb06 f30e 	mul.w	r3, r6, lr
 8000534:	428b      	cmp	r3, r1
 8000536:	d908      	bls.n	800054a <__udivmoddi4+0x28a>
 8000538:	eb1c 0101 	adds.w	r1, ip, r1
 800053c:	f106 38ff 	add.w	r8, r6, #4294967295
 8000540:	d216      	bcs.n	8000570 <__udivmoddi4+0x2b0>
 8000542:	428b      	cmp	r3, r1
 8000544:	d914      	bls.n	8000570 <__udivmoddi4+0x2b0>
 8000546:	3e02      	subs	r6, #2
 8000548:	4461      	add	r1, ip
 800054a:	1ac9      	subs	r1, r1, r3
 800054c:	ea46 4600 	orr.w	r6, r6, r0, lsl #16
 8000550:	e738      	b.n	80003c4 <__udivmoddi4+0x104>
 8000552:	462e      	mov	r6, r5
 8000554:	4628      	mov	r0, r5
 8000556:	e705      	b.n	8000364 <__udivmoddi4+0xa4>
 8000558:	4606      	mov	r6, r0
 800055a:	e6e3      	b.n	8000324 <__udivmoddi4+0x64>
 800055c:	4618      	mov	r0, r3
 800055e:	e6f8      	b.n	8000352 <__udivmoddi4+0x92>
 8000560:	454b      	cmp	r3, r9
 8000562:	d2a9      	bcs.n	80004b8 <__udivmoddi4+0x1f8>
 8000564:	ebb9 0802 	subs.w	r8, r9, r2
 8000568:	eb64 0e0c 	sbc.w	lr, r4, ip
 800056c:	3801      	subs	r0, #1
 800056e:	e7a3      	b.n	80004b8 <__udivmoddi4+0x1f8>
 8000570:	4646      	mov	r6, r8
 8000572:	e7ea      	b.n	800054a <__udivmoddi4+0x28a>
 8000574:	4620      	mov	r0, r4
 8000576:	e794      	b.n	80004a2 <__udivmoddi4+0x1e2>
 8000578:	4640      	mov	r0, r8
 800057a:	e7d1      	b.n	8000520 <__udivmoddi4+0x260>
 800057c:	46d0      	mov	r8, sl
 800057e:	e77b      	b.n	8000478 <__udivmoddi4+0x1b8>
 8000580:	3b02      	subs	r3, #2
 8000582:	4461      	add	r1, ip
 8000584:	e732      	b.n	80003ec <__udivmoddi4+0x12c>
 8000586:	4630      	mov	r0, r6
 8000588:	e709      	b.n	800039e <__udivmoddi4+0xde>
 800058a:	4464      	add	r4, ip
 800058c:	3802      	subs	r0, #2
 800058e:	e742      	b.n	8000416 <__udivmoddi4+0x156>

08000590 <__aeabi_idiv0>:
 8000590:	4770      	bx	lr
 8000592:	bf00      	nop

08000594 <vApplicationIdleHook>:
void vApplicationStackOverflowHook(xTaskHandle xTask, signed char *pcTaskName);
void vApplicationMallocFailedHook(void);

/* USER CODE BEGIN 2 */
void vApplicationIdleHook( void )
{
 8000594:	b480      	push	{r7}
 8000596:	af00      	add	r7, sp, #0
   specified, or call vTaskDelay()). If the application makes use of the
   vTaskDelete() API function (as this demo application does) then it is also
   important that vApplicationIdleHook() is permitted to return to its calling
   function, because it is the responsibility of the idle task to clean up
   memory allocated by the kernel to any task that has since been deleted. */
}
 8000598:	bf00      	nop
 800059a:	46bd      	mov	sp, r7
 800059c:	f85d 7b04 	ldr.w	r7, [sp], #4
 80005a0:	4770      	bx	lr

080005a2 <vApplicationStackOverflowHook>:
/* USER CODE END 2 */

/* USER CODE BEGIN 4 */
void vApplicationStackOverflowHook(xTaskHandle xTask, signed char *pcTaskName)
{
 80005a2:	b480      	push	{r7}
 80005a4:	b083      	sub	sp, #12
 80005a6:	af00      	add	r7, sp, #0
 80005a8:	6078      	str	r0, [r7, #4]
 80005aa:	6039      	str	r1, [r7, #0]
   /* Run time stack overflow checking is performed if
   configCHECK_FOR_STACK_OVERFLOW is defined to 1 or 2. This hook function is
   called if a stack overflow is detected. */
}
 80005ac:	bf00      	nop
 80005ae:	370c      	adds	r7, #12
 80005b0:	46bd      	mov	sp, r7
 80005b2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80005b6:	4770      	bx	lr

080005b8 <vApplicationMallocFailedHook>:
/* USER CODE END 4 */

/* USER CODE BEGIN 5 */
void vApplicationMallocFailedHook(void)
{
 80005b8:	b480      	push	{r7}
 80005ba:	af00      	add	r7, sp, #0
   demo application. If heap_1.c or heap_2.c are used, then the size of the
   heap available to pvPortMalloc() is defined by configTOTAL_HEAP_SIZE in
   FreeRTOSConfig.h, and the xPortGetFreeHeapSize() API function can be used
   to query the size of free heap space that remains (although it does not
   provide information on how the remaining heap might be fragmented). */
}
 80005bc:	bf00      	nop
 80005be:	46bd      	mov	sp, r7
 80005c0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80005c4:	4770      	bx	lr
	...

080005c8 <_write>:
#define PUTCHAR_PROTOTYPE int __io_putchar(int ch)
/* USER CODE END PFP */

/* Private user code ---------------------------------------------------------*/
/* USER CODE BEGIN 0 */
int _write(int file, char *ptr, int len) {
 80005c8:	b580      	push	{r7, lr}
 80005ca:	b084      	sub	sp, #16
 80005cc:	af00      	add	r7, sp, #0
 80005ce:	60f8      	str	r0, [r7, #12]
 80005d0:	60b9      	str	r1, [r7, #8]
 80005d2:	607a      	str	r2, [r7, #4]
  HAL_UART_Transmit(&huart1, (uint8_t*) ptr, len, HAL_MAX_DELAY);
 80005d4:	687b      	ldr	r3, [r7, #4]
 80005d6:	b29a      	uxth	r2, r3
 80005d8:	f04f 33ff 	mov.w	r3, #4294967295
 80005dc:	68b9      	ldr	r1, [r7, #8]
 80005de:	4804      	ldr	r0, [pc, #16]	; (80005f0 <_write+0x28>)
 80005e0:	f005 f999 	bl	8005916 <HAL_UART_Transmit>
  return len;
 80005e4:	687b      	ldr	r3, [r7, #4]
}
 80005e6:	4618      	mov	r0, r3
 80005e8:	3710      	adds	r7, #16
 80005ea:	46bd      	mov	sp, r7
 80005ec:	bd80      	pop	{r7, pc}
 80005ee:	bf00      	nop
 80005f0:	20000274 	.word	0x20000274

080005f4 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 80005f4:	b580      	push	{r7, lr}
 80005f6:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 80005f8:	f001 fa34 	bl	8001a64 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 80005fc:	f000 f81a 	bl	8000634 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000600:	f000 fa88 	bl	8000b14 <MX_GPIO_Init>
  MX_CRC_Init();
 8000604:	f000 f880 	bl	8000708 <MX_CRC_Init>
  MX_DMA2D_Init();
 8000608:	f000 f892 	bl	8000730 <MX_DMA2D_Init>
  MX_FMC_Init();
 800060c:	f000 fa32 	bl	8000a74 <MX_FMC_Init>
  MX_I2C3_Init();
 8000610:	f000 f8c0 	bl	8000794 <MX_I2C3_Init>
  MX_LTDC_Init();
 8000614:	f000 f8fe 	bl	8000814 <MX_LTDC_Init>
  MX_SPI5_Init();
 8000618:	f000 f97c 	bl	8000914 <MX_SPI5_Init>
  MX_TIM1_Init();
 800061c:	f000 f9b0 	bl	8000980 <MX_TIM1_Init>
  MX_USART1_UART_Init();
 8000620:	f000 f9fe 	bl	8000a20 <MX_USART1_UART_Init>
  /* USER CODE BEGIN 2 */

  /* USER CODE END 2 */

  /* Init scheduler */
  osKernelInitialize();
 8000624:	f006 f9aa 	bl	800697c <osKernelInitialize>
* in the root directory of this software component.
* If no LICENSE file comes with this software, it is provided AS-IS.
*
******************************************************************************
*/
  tm_main();
 8000628:	f001 f8e2 	bl	80017f0 <tm_main>
/**
* @}
*/

  /* Start scheduler */
  osKernelStart();
 800062c:	f006 f9ca 	bl	80069c4 <osKernelStart>

  /* We should never get here as control is now taken by the scheduler */
  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
 8000630:	e7fe      	b.n	8000630 <main+0x3c>
	...

08000634 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000634:	b580      	push	{r7, lr}
 8000636:	b094      	sub	sp, #80	; 0x50
 8000638:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 800063a:	f107 0320 	add.w	r3, r7, #32
 800063e:	2230      	movs	r2, #48	; 0x30
 8000640:	2100      	movs	r1, #0
 8000642:	4618      	mov	r0, r3
 8000644:	f009 f996 	bl	8009974 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000648:	f107 030c 	add.w	r3, r7, #12
 800064c:	2200      	movs	r2, #0
 800064e:	601a      	str	r2, [r3, #0]
 8000650:	605a      	str	r2, [r3, #4]
 8000652:	609a      	str	r2, [r3, #8]
 8000654:	60da      	str	r2, [r3, #12]
 8000656:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 8000658:	2300      	movs	r3, #0
 800065a:	60bb      	str	r3, [r7, #8]
 800065c:	4b28      	ldr	r3, [pc, #160]	; (8000700 <SystemClock_Config+0xcc>)
 800065e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000660:	4a27      	ldr	r2, [pc, #156]	; (8000700 <SystemClock_Config+0xcc>)
 8000662:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8000666:	6413      	str	r3, [r2, #64]	; 0x40
 8000668:	4b25      	ldr	r3, [pc, #148]	; (8000700 <SystemClock_Config+0xcc>)
 800066a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800066c:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000670:	60bb      	str	r3, [r7, #8]
 8000672:	68bb      	ldr	r3, [r7, #8]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE3);
 8000674:	2300      	movs	r3, #0
 8000676:	607b      	str	r3, [r7, #4]
 8000678:	4b22      	ldr	r3, [pc, #136]	; (8000704 <SystemClock_Config+0xd0>)
 800067a:	681b      	ldr	r3, [r3, #0]
 800067c:	f423 4340 	bic.w	r3, r3, #49152	; 0xc000
 8000680:	4a20      	ldr	r2, [pc, #128]	; (8000704 <SystemClock_Config+0xd0>)
 8000682:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8000686:	6013      	str	r3, [r2, #0]
 8000688:	4b1e      	ldr	r3, [pc, #120]	; (8000704 <SystemClock_Config+0xd0>)
 800068a:	681b      	ldr	r3, [r3, #0]
 800068c:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 8000690:	607b      	str	r3, [r7, #4]
 8000692:	687b      	ldr	r3, [r7, #4]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 8000694:	2301      	movs	r3, #1
 8000696:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 8000698:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 800069c:	627b      	str	r3, [r7, #36]	; 0x24
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 800069e:	2302      	movs	r3, #2
 80006a0:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 80006a2:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 80006a6:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLM = 4;
 80006a8:	2304      	movs	r3, #4
 80006aa:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLN = 72;
 80006ac:	2348      	movs	r3, #72	; 0x48
 80006ae:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 80006b0:	2302      	movs	r3, #2
 80006b2:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLQ = 3;
 80006b4:	2303      	movs	r3, #3
 80006b6:	64fb      	str	r3, [r7, #76]	; 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80006b8:	f107 0320 	add.w	r3, r7, #32
 80006bc:	4618      	mov	r0, r3
 80006be:	f003 fd15 	bl	80040ec <HAL_RCC_OscConfig>
 80006c2:	4603      	mov	r3, r0
 80006c4:	2b00      	cmp	r3, #0
 80006c6:	d001      	beq.n	80006cc <SystemClock_Config+0x98>
  {
    Error_Handler();
 80006c8:	f000 fb46 	bl	8000d58 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 80006cc:	230f      	movs	r3, #15
 80006ce:	60fb      	str	r3, [r7, #12]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 80006d0:	2302      	movs	r3, #2
 80006d2:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 80006d4:	2300      	movs	r3, #0
 80006d6:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 80006d8:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80006dc:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 80006de:	2300      	movs	r3, #0
 80006e0:	61fb      	str	r3, [r7, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 80006e2:	f107 030c 	add.w	r3, r7, #12
 80006e6:	2102      	movs	r1, #2
 80006e8:	4618      	mov	r0, r3
 80006ea:	f003 ff77 	bl	80045dc <HAL_RCC_ClockConfig>
 80006ee:	4603      	mov	r3, r0
 80006f0:	2b00      	cmp	r3, #0
 80006f2:	d001      	beq.n	80006f8 <SystemClock_Config+0xc4>
  {
    Error_Handler();
 80006f4:	f000 fb30 	bl	8000d58 <Error_Handler>
  }
}
 80006f8:	bf00      	nop
 80006fa:	3750      	adds	r7, #80	; 0x50
 80006fc:	46bd      	mov	sp, r7
 80006fe:	bd80      	pop	{r7, pc}
 8000700:	40023800 	.word	0x40023800
 8000704:	40007000 	.word	0x40007000

08000708 <MX_CRC_Init>:
  * @brief CRC Initialization Function
  * @param None
  * @retval None
  */
static void MX_CRC_Init(void)
{
 8000708:	b580      	push	{r7, lr}
 800070a:	af00      	add	r7, sp, #0
  /* USER CODE END CRC_Init 0 */

  /* USER CODE BEGIN CRC_Init 1 */

  /* USER CODE END CRC_Init 1 */
  hcrc.Instance = CRC;
 800070c:	4b06      	ldr	r3, [pc, #24]	; (8000728 <MX_CRC_Init+0x20>)
 800070e:	4a07      	ldr	r2, [pc, #28]	; (800072c <MX_CRC_Init+0x24>)
 8000710:	601a      	str	r2, [r3, #0]
  if (HAL_CRC_Init(&hcrc) != HAL_OK)
 8000712:	4805      	ldr	r0, [pc, #20]	; (8000728 <MX_CRC_Init+0x20>)
 8000714:	f001 faca 	bl	8001cac <HAL_CRC_Init>
 8000718:	4603      	mov	r3, r0
 800071a:	2b00      	cmp	r3, #0
 800071c:	d001      	beq.n	8000722 <MX_CRC_Init+0x1a>
  {
    Error_Handler();
 800071e:	f000 fb1b 	bl	8000d58 <Error_Handler>
  }
  /* USER CODE BEGIN CRC_Init 2 */

  /* USER CODE END CRC_Init 2 */

}
 8000722:	bf00      	nop
 8000724:	bd80      	pop	{r7, pc}
 8000726:	bf00      	nop
 8000728:	20000090 	.word	0x20000090
 800072c:	40023000 	.word	0x40023000

08000730 <MX_DMA2D_Init>:
  * @brief DMA2D Initialization Function
  * @param None
  * @retval None
  */
static void MX_DMA2D_Init(void)
{
 8000730:	b580      	push	{r7, lr}
 8000732:	af00      	add	r7, sp, #0
  /* USER CODE END DMA2D_Init 0 */

  /* USER CODE BEGIN DMA2D_Init 1 */

  /* USER CODE END DMA2D_Init 1 */
  hdma2d.Instance = DMA2D;
 8000734:	4b15      	ldr	r3, [pc, #84]	; (800078c <MX_DMA2D_Init+0x5c>)
 8000736:	4a16      	ldr	r2, [pc, #88]	; (8000790 <MX_DMA2D_Init+0x60>)
 8000738:	601a      	str	r2, [r3, #0]
  hdma2d.Init.Mode = DMA2D_M2M;
 800073a:	4b14      	ldr	r3, [pc, #80]	; (800078c <MX_DMA2D_Init+0x5c>)
 800073c:	2200      	movs	r2, #0
 800073e:	605a      	str	r2, [r3, #4]
  hdma2d.Init.ColorMode = DMA2D_OUTPUT_ARGB8888;
 8000740:	4b12      	ldr	r3, [pc, #72]	; (800078c <MX_DMA2D_Init+0x5c>)
 8000742:	2200      	movs	r2, #0
 8000744:	609a      	str	r2, [r3, #8]
  hdma2d.Init.OutputOffset = 0;
 8000746:	4b11      	ldr	r3, [pc, #68]	; (800078c <MX_DMA2D_Init+0x5c>)
 8000748:	2200      	movs	r2, #0
 800074a:	60da      	str	r2, [r3, #12]
  hdma2d.LayerCfg[1].InputOffset = 0;
 800074c:	4b0f      	ldr	r3, [pc, #60]	; (800078c <MX_DMA2D_Init+0x5c>)
 800074e:	2200      	movs	r2, #0
 8000750:	629a      	str	r2, [r3, #40]	; 0x28
  hdma2d.LayerCfg[1].InputColorMode = DMA2D_INPUT_ARGB8888;
 8000752:	4b0e      	ldr	r3, [pc, #56]	; (800078c <MX_DMA2D_Init+0x5c>)
 8000754:	2200      	movs	r2, #0
 8000756:	62da      	str	r2, [r3, #44]	; 0x2c
  hdma2d.LayerCfg[1].AlphaMode = DMA2D_NO_MODIF_ALPHA;
 8000758:	4b0c      	ldr	r3, [pc, #48]	; (800078c <MX_DMA2D_Init+0x5c>)
 800075a:	2200      	movs	r2, #0
 800075c:	631a      	str	r2, [r3, #48]	; 0x30
  hdma2d.LayerCfg[1].InputAlpha = 0;
 800075e:	4b0b      	ldr	r3, [pc, #44]	; (800078c <MX_DMA2D_Init+0x5c>)
 8000760:	2200      	movs	r2, #0
 8000762:	635a      	str	r2, [r3, #52]	; 0x34
  if (HAL_DMA2D_Init(&hdma2d) != HAL_OK)
 8000764:	4809      	ldr	r0, [pc, #36]	; (800078c <MX_DMA2D_Init+0x5c>)
 8000766:	f001 fabd 	bl	8001ce4 <HAL_DMA2D_Init>
 800076a:	4603      	mov	r3, r0
 800076c:	2b00      	cmp	r3, #0
 800076e:	d001      	beq.n	8000774 <MX_DMA2D_Init+0x44>
  {
    Error_Handler();
 8000770:	f000 faf2 	bl	8000d58 <Error_Handler>
  }
  if (HAL_DMA2D_ConfigLayer(&hdma2d, 1) != HAL_OK)
 8000774:	2101      	movs	r1, #1
 8000776:	4805      	ldr	r0, [pc, #20]	; (800078c <MX_DMA2D_Init+0x5c>)
 8000778:	f001 fc0e 	bl	8001f98 <HAL_DMA2D_ConfigLayer>
 800077c:	4603      	mov	r3, r0
 800077e:	2b00      	cmp	r3, #0
 8000780:	d001      	beq.n	8000786 <MX_DMA2D_Init+0x56>
  {
    Error_Handler();
 8000782:	f000 fae9 	bl	8000d58 <Error_Handler>
  }
  /* USER CODE BEGIN DMA2D_Init 2 */

  /* USER CODE END DMA2D_Init 2 */

}
 8000786:	bf00      	nop
 8000788:	bd80      	pop	{r7, pc}
 800078a:	bf00      	nop
 800078c:	20000098 	.word	0x20000098
 8000790:	4002b000 	.word	0x4002b000

08000794 <MX_I2C3_Init>:
  * @brief I2C3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C3_Init(void)
{
 8000794:	b580      	push	{r7, lr}
 8000796:	af00      	add	r7, sp, #0
  /* USER CODE END I2C3_Init 0 */

  /* USER CODE BEGIN I2C3_Init 1 */

  /* USER CODE END I2C3_Init 1 */
  hi2c3.Instance = I2C3;
 8000798:	4b1b      	ldr	r3, [pc, #108]	; (8000808 <MX_I2C3_Init+0x74>)
 800079a:	4a1c      	ldr	r2, [pc, #112]	; (800080c <MX_I2C3_Init+0x78>)
 800079c:	601a      	str	r2, [r3, #0]
  hi2c3.Init.ClockSpeed = 100000;
 800079e:	4b1a      	ldr	r3, [pc, #104]	; (8000808 <MX_I2C3_Init+0x74>)
 80007a0:	4a1b      	ldr	r2, [pc, #108]	; (8000810 <MX_I2C3_Init+0x7c>)
 80007a2:	605a      	str	r2, [r3, #4]
  hi2c3.Init.DutyCycle = I2C_DUTYCYCLE_2;
 80007a4:	4b18      	ldr	r3, [pc, #96]	; (8000808 <MX_I2C3_Init+0x74>)
 80007a6:	2200      	movs	r2, #0
 80007a8:	609a      	str	r2, [r3, #8]
  hi2c3.Init.OwnAddress1 = 0;
 80007aa:	4b17      	ldr	r3, [pc, #92]	; (8000808 <MX_I2C3_Init+0x74>)
 80007ac:	2200      	movs	r2, #0
 80007ae:	60da      	str	r2, [r3, #12]
  hi2c3.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 80007b0:	4b15      	ldr	r3, [pc, #84]	; (8000808 <MX_I2C3_Init+0x74>)
 80007b2:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 80007b6:	611a      	str	r2, [r3, #16]
  hi2c3.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 80007b8:	4b13      	ldr	r3, [pc, #76]	; (8000808 <MX_I2C3_Init+0x74>)
 80007ba:	2200      	movs	r2, #0
 80007bc:	615a      	str	r2, [r3, #20]
  hi2c3.Init.OwnAddress2 = 0;
 80007be:	4b12      	ldr	r3, [pc, #72]	; (8000808 <MX_I2C3_Init+0x74>)
 80007c0:	2200      	movs	r2, #0
 80007c2:	619a      	str	r2, [r3, #24]
  hi2c3.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 80007c4:	4b10      	ldr	r3, [pc, #64]	; (8000808 <MX_I2C3_Init+0x74>)
 80007c6:	2200      	movs	r2, #0
 80007c8:	61da      	str	r2, [r3, #28]
  hi2c3.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 80007ca:	4b0f      	ldr	r3, [pc, #60]	; (8000808 <MX_I2C3_Init+0x74>)
 80007cc:	2200      	movs	r2, #0
 80007ce:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c3) != HAL_OK)
 80007d0:	480d      	ldr	r0, [pc, #52]	; (8000808 <MX_I2C3_Init+0x74>)
 80007d2:	f002 ff63 	bl	800369c <HAL_I2C_Init>
 80007d6:	4603      	mov	r3, r0
 80007d8:	2b00      	cmp	r3, #0
 80007da:	d001      	beq.n	80007e0 <MX_I2C3_Init+0x4c>
  {
    Error_Handler();
 80007dc:	f000 fabc 	bl	8000d58 <Error_Handler>
  }

  /** Configure Analogue filter
  */
  if (HAL_I2CEx_ConfigAnalogFilter(&hi2c3, I2C_ANALOGFILTER_ENABLE) != HAL_OK)
 80007e0:	2100      	movs	r1, #0
 80007e2:	4809      	ldr	r0, [pc, #36]	; (8000808 <MX_I2C3_Init+0x74>)
 80007e4:	f003 f89e 	bl	8003924 <HAL_I2CEx_ConfigAnalogFilter>
 80007e8:	4603      	mov	r3, r0
 80007ea:	2b00      	cmp	r3, #0
 80007ec:	d001      	beq.n	80007f2 <MX_I2C3_Init+0x5e>
  {
    Error_Handler();
 80007ee:	f000 fab3 	bl	8000d58 <Error_Handler>
  }

  /** Configure Digital filter
  */
  if (HAL_I2CEx_ConfigDigitalFilter(&hi2c3, 0) != HAL_OK)
 80007f2:	2100      	movs	r1, #0
 80007f4:	4804      	ldr	r0, [pc, #16]	; (8000808 <MX_I2C3_Init+0x74>)
 80007f6:	f003 f8d1 	bl	800399c <HAL_I2CEx_ConfigDigitalFilter>
 80007fa:	4603      	mov	r3, r0
 80007fc:	2b00      	cmp	r3, #0
 80007fe:	d001      	beq.n	8000804 <MX_I2C3_Init+0x70>
  {
    Error_Handler();
 8000800:	f000 faaa 	bl	8000d58 <Error_Handler>
  }
  /* USER CODE BEGIN I2C3_Init 2 */

  /* USER CODE END I2C3_Init 2 */

}
 8000804:	bf00      	nop
 8000806:	bd80      	pop	{r7, pc}
 8000808:	200000d8 	.word	0x200000d8
 800080c:	40005c00 	.word	0x40005c00
 8000810:	000186a0 	.word	0x000186a0

08000814 <MX_LTDC_Init>:
  * @brief LTDC Initialization Function
  * @param None
  * @retval None
  */
static void MX_LTDC_Init(void)
{
 8000814:	b580      	push	{r7, lr}
 8000816:	b08e      	sub	sp, #56	; 0x38
 8000818:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN LTDC_Init 0 */

  /* USER CODE END LTDC_Init 0 */

  LTDC_LayerCfgTypeDef pLayerCfg = {0};
 800081a:	1d3b      	adds	r3, r7, #4
 800081c:	2234      	movs	r2, #52	; 0x34
 800081e:	2100      	movs	r1, #0
 8000820:	4618      	mov	r0, r3
 8000822:	f009 f8a7 	bl	8009974 <memset>

  /* USER CODE BEGIN LTDC_Init 1 */

  /* USER CODE END LTDC_Init 1 */
  hltdc.Instance = LTDC;
 8000826:	4b39      	ldr	r3, [pc, #228]	; (800090c <MX_LTDC_Init+0xf8>)
 8000828:	4a39      	ldr	r2, [pc, #228]	; (8000910 <MX_LTDC_Init+0xfc>)
 800082a:	601a      	str	r2, [r3, #0]
  hltdc.Init.HSPolarity = LTDC_HSPOLARITY_AL;
 800082c:	4b37      	ldr	r3, [pc, #220]	; (800090c <MX_LTDC_Init+0xf8>)
 800082e:	2200      	movs	r2, #0
 8000830:	605a      	str	r2, [r3, #4]
  hltdc.Init.VSPolarity = LTDC_VSPOLARITY_AL;
 8000832:	4b36      	ldr	r3, [pc, #216]	; (800090c <MX_LTDC_Init+0xf8>)
 8000834:	2200      	movs	r2, #0
 8000836:	609a      	str	r2, [r3, #8]
  hltdc.Init.DEPolarity = LTDC_DEPOLARITY_AL;
 8000838:	4b34      	ldr	r3, [pc, #208]	; (800090c <MX_LTDC_Init+0xf8>)
 800083a:	2200      	movs	r2, #0
 800083c:	60da      	str	r2, [r3, #12]
  hltdc.Init.PCPolarity = LTDC_PCPOLARITY_IPC;
 800083e:	4b33      	ldr	r3, [pc, #204]	; (800090c <MX_LTDC_Init+0xf8>)
 8000840:	2200      	movs	r2, #0
 8000842:	611a      	str	r2, [r3, #16]
  hltdc.Init.HorizontalSync = 9;
 8000844:	4b31      	ldr	r3, [pc, #196]	; (800090c <MX_LTDC_Init+0xf8>)
 8000846:	2209      	movs	r2, #9
 8000848:	615a      	str	r2, [r3, #20]
  hltdc.Init.VerticalSync = 1;
 800084a:	4b30      	ldr	r3, [pc, #192]	; (800090c <MX_LTDC_Init+0xf8>)
 800084c:	2201      	movs	r2, #1
 800084e:	619a      	str	r2, [r3, #24]
  hltdc.Init.AccumulatedHBP = 29;
 8000850:	4b2e      	ldr	r3, [pc, #184]	; (800090c <MX_LTDC_Init+0xf8>)
 8000852:	221d      	movs	r2, #29
 8000854:	61da      	str	r2, [r3, #28]
  hltdc.Init.AccumulatedVBP = 3;
 8000856:	4b2d      	ldr	r3, [pc, #180]	; (800090c <MX_LTDC_Init+0xf8>)
 8000858:	2203      	movs	r2, #3
 800085a:	621a      	str	r2, [r3, #32]
  hltdc.Init.AccumulatedActiveW = 269;
 800085c:	4b2b      	ldr	r3, [pc, #172]	; (800090c <MX_LTDC_Init+0xf8>)
 800085e:	f240 120d 	movw	r2, #269	; 0x10d
 8000862:	625a      	str	r2, [r3, #36]	; 0x24
  hltdc.Init.AccumulatedActiveH = 323;
 8000864:	4b29      	ldr	r3, [pc, #164]	; (800090c <MX_LTDC_Init+0xf8>)
 8000866:	f240 1243 	movw	r2, #323	; 0x143
 800086a:	629a      	str	r2, [r3, #40]	; 0x28
  hltdc.Init.TotalWidth = 279;
 800086c:	4b27      	ldr	r3, [pc, #156]	; (800090c <MX_LTDC_Init+0xf8>)
 800086e:	f240 1217 	movw	r2, #279	; 0x117
 8000872:	62da      	str	r2, [r3, #44]	; 0x2c
  hltdc.Init.TotalHeigh = 327;
 8000874:	4b25      	ldr	r3, [pc, #148]	; (800090c <MX_LTDC_Init+0xf8>)
 8000876:	f240 1247 	movw	r2, #327	; 0x147
 800087a:	631a      	str	r2, [r3, #48]	; 0x30
  hltdc.Init.Backcolor.Blue = 0;
 800087c:	4b23      	ldr	r3, [pc, #140]	; (800090c <MX_LTDC_Init+0xf8>)
 800087e:	2200      	movs	r2, #0
 8000880:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  hltdc.Init.Backcolor.Green = 0;
 8000884:	4b21      	ldr	r3, [pc, #132]	; (800090c <MX_LTDC_Init+0xf8>)
 8000886:	2200      	movs	r2, #0
 8000888:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
  hltdc.Init.Backcolor.Red = 0;
 800088c:	4b1f      	ldr	r3, [pc, #124]	; (800090c <MX_LTDC_Init+0xf8>)
 800088e:	2200      	movs	r2, #0
 8000890:	f883 2036 	strb.w	r2, [r3, #54]	; 0x36
  if (HAL_LTDC_Init(&hltdc) != HAL_OK)
 8000894:	481d      	ldr	r0, [pc, #116]	; (800090c <MX_LTDC_Init+0xf8>)
 8000896:	f003 f8c1 	bl	8003a1c <HAL_LTDC_Init>
 800089a:	4603      	mov	r3, r0
 800089c:	2b00      	cmp	r3, #0
 800089e:	d001      	beq.n	80008a4 <MX_LTDC_Init+0x90>
  {
    Error_Handler();
 80008a0:	f000 fa5a 	bl	8000d58 <Error_Handler>
  }
  pLayerCfg.WindowX0 = 0;
 80008a4:	2300      	movs	r3, #0
 80008a6:	607b      	str	r3, [r7, #4]
  pLayerCfg.WindowX1 = 240;
 80008a8:	23f0      	movs	r3, #240	; 0xf0
 80008aa:	60bb      	str	r3, [r7, #8]
  pLayerCfg.WindowY0 = 0;
 80008ac:	2300      	movs	r3, #0
 80008ae:	60fb      	str	r3, [r7, #12]
  pLayerCfg.WindowY1 = 320;
 80008b0:	f44f 73a0 	mov.w	r3, #320	; 0x140
 80008b4:	613b      	str	r3, [r7, #16]
  pLayerCfg.PixelFormat = LTDC_PIXEL_FORMAT_RGB565;
 80008b6:	2302      	movs	r3, #2
 80008b8:	617b      	str	r3, [r7, #20]
  pLayerCfg.Alpha = 255;
 80008ba:	23ff      	movs	r3, #255	; 0xff
 80008bc:	61bb      	str	r3, [r7, #24]
  pLayerCfg.Alpha0 = 0;
 80008be:	2300      	movs	r3, #0
 80008c0:	61fb      	str	r3, [r7, #28]
  pLayerCfg.BlendingFactor1 = LTDC_BLENDING_FACTOR1_PAxCA;
 80008c2:	f44f 63c0 	mov.w	r3, #1536	; 0x600
 80008c6:	623b      	str	r3, [r7, #32]
  pLayerCfg.BlendingFactor2 = LTDC_BLENDING_FACTOR2_PAxCA;
 80008c8:	2307      	movs	r3, #7
 80008ca:	627b      	str	r3, [r7, #36]	; 0x24
  pLayerCfg.FBStartAdress = 0xD0000000;
 80008cc:	f04f 4350 	mov.w	r3, #3489660928	; 0xd0000000
 80008d0:	62bb      	str	r3, [r7, #40]	; 0x28
  pLayerCfg.ImageWidth = 240;
 80008d2:	23f0      	movs	r3, #240	; 0xf0
 80008d4:	62fb      	str	r3, [r7, #44]	; 0x2c
  pLayerCfg.ImageHeight = 320;
 80008d6:	f44f 73a0 	mov.w	r3, #320	; 0x140
 80008da:	633b      	str	r3, [r7, #48]	; 0x30
  pLayerCfg.Backcolor.Blue = 0;
 80008dc:	2300      	movs	r3, #0
 80008de:	f887 3034 	strb.w	r3, [r7, #52]	; 0x34
  pLayerCfg.Backcolor.Green = 0;
 80008e2:	2300      	movs	r3, #0
 80008e4:	f887 3035 	strb.w	r3, [r7, #53]	; 0x35
  pLayerCfg.Backcolor.Red = 0;
 80008e8:	2300      	movs	r3, #0
 80008ea:	f887 3036 	strb.w	r3, [r7, #54]	; 0x36
  if (HAL_LTDC_ConfigLayer(&hltdc, &pLayerCfg, 0) != HAL_OK)
 80008ee:	1d3b      	adds	r3, r7, #4
 80008f0:	2200      	movs	r2, #0
 80008f2:	4619      	mov	r1, r3
 80008f4:	4805      	ldr	r0, [pc, #20]	; (800090c <MX_LTDC_Init+0xf8>)
 80008f6:	f003 fa23 	bl	8003d40 <HAL_LTDC_ConfigLayer>
 80008fa:	4603      	mov	r3, r0
 80008fc:	2b00      	cmp	r3, #0
 80008fe:	d001      	beq.n	8000904 <MX_LTDC_Init+0xf0>
  {
    Error_Handler();
 8000900:	f000 fa2a 	bl	8000d58 <Error_Handler>
  }
  /* USER CODE BEGIN LTDC_Init 2 */

  /* USER CODE END LTDC_Init 2 */

}
 8000904:	bf00      	nop
 8000906:	3738      	adds	r7, #56	; 0x38
 8000908:	46bd      	mov	sp, r7
 800090a:	bd80      	pop	{r7, pc}
 800090c:	2000012c 	.word	0x2000012c
 8000910:	40016800 	.word	0x40016800

08000914 <MX_SPI5_Init>:
  * @brief SPI5 Initialization Function
  * @param None
  * @retval None
  */
static void MX_SPI5_Init(void)
{
 8000914:	b580      	push	{r7, lr}
 8000916:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN SPI5_Init 1 */

  /* USER CODE END SPI5_Init 1 */
  /* SPI5 parameter configuration*/
  hspi5.Instance = SPI5;
 8000918:	4b17      	ldr	r3, [pc, #92]	; (8000978 <MX_SPI5_Init+0x64>)
 800091a:	4a18      	ldr	r2, [pc, #96]	; (800097c <MX_SPI5_Init+0x68>)
 800091c:	601a      	str	r2, [r3, #0]
  hspi5.Init.Mode = SPI_MODE_MASTER;
 800091e:	4b16      	ldr	r3, [pc, #88]	; (8000978 <MX_SPI5_Init+0x64>)
 8000920:	f44f 7282 	mov.w	r2, #260	; 0x104
 8000924:	605a      	str	r2, [r3, #4]
  hspi5.Init.Direction = SPI_DIRECTION_2LINES;
 8000926:	4b14      	ldr	r3, [pc, #80]	; (8000978 <MX_SPI5_Init+0x64>)
 8000928:	2200      	movs	r2, #0
 800092a:	609a      	str	r2, [r3, #8]
  hspi5.Init.DataSize = SPI_DATASIZE_8BIT;
 800092c:	4b12      	ldr	r3, [pc, #72]	; (8000978 <MX_SPI5_Init+0x64>)
 800092e:	2200      	movs	r2, #0
 8000930:	60da      	str	r2, [r3, #12]
  hspi5.Init.CLKPolarity = SPI_POLARITY_LOW;
 8000932:	4b11      	ldr	r3, [pc, #68]	; (8000978 <MX_SPI5_Init+0x64>)
 8000934:	2200      	movs	r2, #0
 8000936:	611a      	str	r2, [r3, #16]
  hspi5.Init.CLKPhase = SPI_PHASE_1EDGE;
 8000938:	4b0f      	ldr	r3, [pc, #60]	; (8000978 <MX_SPI5_Init+0x64>)
 800093a:	2200      	movs	r2, #0
 800093c:	615a      	str	r2, [r3, #20]
  hspi5.Init.NSS = SPI_NSS_SOFT;
 800093e:	4b0e      	ldr	r3, [pc, #56]	; (8000978 <MX_SPI5_Init+0x64>)
 8000940:	f44f 7200 	mov.w	r2, #512	; 0x200
 8000944:	619a      	str	r2, [r3, #24]
  hspi5.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_16;
 8000946:	4b0c      	ldr	r3, [pc, #48]	; (8000978 <MX_SPI5_Init+0x64>)
 8000948:	2218      	movs	r2, #24
 800094a:	61da      	str	r2, [r3, #28]
  hspi5.Init.FirstBit = SPI_FIRSTBIT_MSB;
 800094c:	4b0a      	ldr	r3, [pc, #40]	; (8000978 <MX_SPI5_Init+0x64>)
 800094e:	2200      	movs	r2, #0
 8000950:	621a      	str	r2, [r3, #32]
  hspi5.Init.TIMode = SPI_TIMODE_DISABLE;
 8000952:	4b09      	ldr	r3, [pc, #36]	; (8000978 <MX_SPI5_Init+0x64>)
 8000954:	2200      	movs	r2, #0
 8000956:	625a      	str	r2, [r3, #36]	; 0x24
  hspi5.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8000958:	4b07      	ldr	r3, [pc, #28]	; (8000978 <MX_SPI5_Init+0x64>)
 800095a:	2200      	movs	r2, #0
 800095c:	629a      	str	r2, [r3, #40]	; 0x28
  hspi5.Init.CRCPolynomial = 10;
 800095e:	4b06      	ldr	r3, [pc, #24]	; (8000978 <MX_SPI5_Init+0x64>)
 8000960:	220a      	movs	r2, #10
 8000962:	62da      	str	r2, [r3, #44]	; 0x2c
  if (HAL_SPI_Init(&hspi5) != HAL_OK)
 8000964:	4804      	ldr	r0, [pc, #16]	; (8000978 <MX_SPI5_Init+0x64>)
 8000966:	f004 fa7f 	bl	8004e68 <HAL_SPI_Init>
 800096a:	4603      	mov	r3, r0
 800096c:	2b00      	cmp	r3, #0
 800096e:	d001      	beq.n	8000974 <MX_SPI5_Init+0x60>
  {
    Error_Handler();
 8000970:	f000 f9f2 	bl	8000d58 <Error_Handler>
  }
  /* USER CODE BEGIN SPI5_Init 2 */

  /* USER CODE END SPI5_Init 2 */

}
 8000974:	bf00      	nop
 8000976:	bd80      	pop	{r7, pc}
 8000978:	200001d4 	.word	0x200001d4
 800097c:	40015000 	.word	0x40015000

08000980 <MX_TIM1_Init>:
  * @brief TIM1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM1_Init(void)
{
 8000980:	b580      	push	{r7, lr}
 8000982:	b086      	sub	sp, #24
 8000984:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM1_Init 0 */

  /* USER CODE END TIM1_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8000986:	f107 0308 	add.w	r3, r7, #8
 800098a:	2200      	movs	r2, #0
 800098c:	601a      	str	r2, [r3, #0]
 800098e:	605a      	str	r2, [r3, #4]
 8000990:	609a      	str	r2, [r3, #8]
 8000992:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8000994:	463b      	mov	r3, r7
 8000996:	2200      	movs	r2, #0
 8000998:	601a      	str	r2, [r3, #0]
 800099a:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM1_Init 1 */

  /* USER CODE END TIM1_Init 1 */
  htim1.Instance = TIM1;
 800099c:	4b1e      	ldr	r3, [pc, #120]	; (8000a18 <MX_TIM1_Init+0x98>)
 800099e:	4a1f      	ldr	r2, [pc, #124]	; (8000a1c <MX_TIM1_Init+0x9c>)
 80009a0:	601a      	str	r2, [r3, #0]
  htim1.Init.Prescaler = 0;
 80009a2:	4b1d      	ldr	r3, [pc, #116]	; (8000a18 <MX_TIM1_Init+0x98>)
 80009a4:	2200      	movs	r2, #0
 80009a6:	605a      	str	r2, [r3, #4]
  htim1.Init.CounterMode = TIM_COUNTERMODE_UP;
 80009a8:	4b1b      	ldr	r3, [pc, #108]	; (8000a18 <MX_TIM1_Init+0x98>)
 80009aa:	2200      	movs	r2, #0
 80009ac:	609a      	str	r2, [r3, #8]
  htim1.Init.Period = 65535;
 80009ae:	4b1a      	ldr	r3, [pc, #104]	; (8000a18 <MX_TIM1_Init+0x98>)
 80009b0:	f64f 72ff 	movw	r2, #65535	; 0xffff
 80009b4:	60da      	str	r2, [r3, #12]
  htim1.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80009b6:	4b18      	ldr	r3, [pc, #96]	; (8000a18 <MX_TIM1_Init+0x98>)
 80009b8:	2200      	movs	r2, #0
 80009ba:	611a      	str	r2, [r3, #16]
  htim1.Init.RepetitionCounter = 0;
 80009bc:	4b16      	ldr	r3, [pc, #88]	; (8000a18 <MX_TIM1_Init+0x98>)
 80009be:	2200      	movs	r2, #0
 80009c0:	615a      	str	r2, [r3, #20]
  htim1.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 80009c2:	4b15      	ldr	r3, [pc, #84]	; (8000a18 <MX_TIM1_Init+0x98>)
 80009c4:	2200      	movs	r2, #0
 80009c6:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim1) != HAL_OK)
 80009c8:	4813      	ldr	r0, [pc, #76]	; (8000a18 <MX_TIM1_Init+0x98>)
 80009ca:	f004 fad6 	bl	8004f7a <HAL_TIM_Base_Init>
 80009ce:	4603      	mov	r3, r0
 80009d0:	2b00      	cmp	r3, #0
 80009d2:	d001      	beq.n	80009d8 <MX_TIM1_Init+0x58>
  {
    Error_Handler();
 80009d4:	f000 f9c0 	bl	8000d58 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 80009d8:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80009dc:	60bb      	str	r3, [r7, #8]
  if (HAL_TIM_ConfigClockSource(&htim1, &sClockSourceConfig) != HAL_OK)
 80009de:	f107 0308 	add.w	r3, r7, #8
 80009e2:	4619      	mov	r1, r3
 80009e4:	480c      	ldr	r0, [pc, #48]	; (8000a18 <MX_TIM1_Init+0x98>)
 80009e6:	f004 fc8f 	bl	8005308 <HAL_TIM_ConfigClockSource>
 80009ea:	4603      	mov	r3, r0
 80009ec:	2b00      	cmp	r3, #0
 80009ee:	d001      	beq.n	80009f4 <MX_TIM1_Init+0x74>
  {
    Error_Handler();
 80009f0:	f000 f9b2 	bl	8000d58 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 80009f4:	2300      	movs	r3, #0
 80009f6:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 80009f8:	2300      	movs	r3, #0
 80009fa:	607b      	str	r3, [r7, #4]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim1, &sMasterConfig) != HAL_OK)
 80009fc:	463b      	mov	r3, r7
 80009fe:	4619      	mov	r1, r3
 8000a00:	4805      	ldr	r0, [pc, #20]	; (8000a18 <MX_TIM1_Init+0x98>)
 8000a02:	f004 feab 	bl	800575c <HAL_TIMEx_MasterConfigSynchronization>
 8000a06:	4603      	mov	r3, r0
 8000a08:	2b00      	cmp	r3, #0
 8000a0a:	d001      	beq.n	8000a10 <MX_TIM1_Init+0x90>
  {
    Error_Handler();
 8000a0c:	f000 f9a4 	bl	8000d58 <Error_Handler>
  }
  /* USER CODE BEGIN TIM1_Init 2 */

  /* USER CODE END TIM1_Init 2 */

}
 8000a10:	bf00      	nop
 8000a12:	3718      	adds	r7, #24
 8000a14:	46bd      	mov	sp, r7
 8000a16:	bd80      	pop	{r7, pc}
 8000a18:	2000022c 	.word	0x2000022c
 8000a1c:	40010000 	.word	0x40010000

08000a20 <MX_USART1_UART_Init>:
  * @brief USART1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART1_UART_Init(void)
{
 8000a20:	b580      	push	{r7, lr}
 8000a22:	af00      	add	r7, sp, #0
  /* USER CODE END USART1_Init 0 */

  /* USER CODE BEGIN USART1_Init 1 */

  /* USER CODE END USART1_Init 1 */
  huart1.Instance = USART1;
 8000a24:	4b11      	ldr	r3, [pc, #68]	; (8000a6c <MX_USART1_UART_Init+0x4c>)
 8000a26:	4a12      	ldr	r2, [pc, #72]	; (8000a70 <MX_USART1_UART_Init+0x50>)
 8000a28:	601a      	str	r2, [r3, #0]
  huart1.Init.BaudRate = 115200;
 8000a2a:	4b10      	ldr	r3, [pc, #64]	; (8000a6c <MX_USART1_UART_Init+0x4c>)
 8000a2c:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8000a30:	605a      	str	r2, [r3, #4]
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
 8000a32:	4b0e      	ldr	r3, [pc, #56]	; (8000a6c <MX_USART1_UART_Init+0x4c>)
 8000a34:	2200      	movs	r2, #0
 8000a36:	609a      	str	r2, [r3, #8]
  huart1.Init.StopBits = UART_STOPBITS_1;
 8000a38:	4b0c      	ldr	r3, [pc, #48]	; (8000a6c <MX_USART1_UART_Init+0x4c>)
 8000a3a:	2200      	movs	r2, #0
 8000a3c:	60da      	str	r2, [r3, #12]
  huart1.Init.Parity = UART_PARITY_NONE;
 8000a3e:	4b0b      	ldr	r3, [pc, #44]	; (8000a6c <MX_USART1_UART_Init+0x4c>)
 8000a40:	2200      	movs	r2, #0
 8000a42:	611a      	str	r2, [r3, #16]
  huart1.Init.Mode = UART_MODE_TX_RX;
 8000a44:	4b09      	ldr	r3, [pc, #36]	; (8000a6c <MX_USART1_UART_Init+0x4c>)
 8000a46:	220c      	movs	r2, #12
 8000a48:	615a      	str	r2, [r3, #20]
  huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8000a4a:	4b08      	ldr	r3, [pc, #32]	; (8000a6c <MX_USART1_UART_Init+0x4c>)
 8000a4c:	2200      	movs	r2, #0
 8000a4e:	619a      	str	r2, [r3, #24]
  huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 8000a50:	4b06      	ldr	r3, [pc, #24]	; (8000a6c <MX_USART1_UART_Init+0x4c>)
 8000a52:	2200      	movs	r2, #0
 8000a54:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart1) != HAL_OK)
 8000a56:	4805      	ldr	r0, [pc, #20]	; (8000a6c <MX_USART1_UART_Init+0x4c>)
 8000a58:	f004 ff10 	bl	800587c <HAL_UART_Init>
 8000a5c:	4603      	mov	r3, r0
 8000a5e:	2b00      	cmp	r3, #0
 8000a60:	d001      	beq.n	8000a66 <MX_USART1_UART_Init+0x46>
  {
    Error_Handler();
 8000a62:	f000 f979 	bl	8000d58 <Error_Handler>
  }
  /* USER CODE BEGIN USART1_Init 2 */

  /* USER CODE END USART1_Init 2 */

}
 8000a66:	bf00      	nop
 8000a68:	bd80      	pop	{r7, pc}
 8000a6a:	bf00      	nop
 8000a6c:	20000274 	.word	0x20000274
 8000a70:	40011000 	.word	0x40011000

08000a74 <MX_FMC_Init>:

/* FMC initialization function */
static void MX_FMC_Init(void)
{
 8000a74:	b580      	push	{r7, lr}
 8000a76:	b088      	sub	sp, #32
 8000a78:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN FMC_Init 0 */

  /* USER CODE END FMC_Init 0 */

  FMC_SDRAM_TimingTypeDef SdramTiming = {0};
 8000a7a:	1d3b      	adds	r3, r7, #4
 8000a7c:	2200      	movs	r2, #0
 8000a7e:	601a      	str	r2, [r3, #0]
 8000a80:	605a      	str	r2, [r3, #4]
 8000a82:	609a      	str	r2, [r3, #8]
 8000a84:	60da      	str	r2, [r3, #12]
 8000a86:	611a      	str	r2, [r3, #16]
 8000a88:	615a      	str	r2, [r3, #20]
 8000a8a:	619a      	str	r2, [r3, #24]

  /* USER CODE END FMC_Init 1 */

  /** Perform the SDRAM1 memory initialization sequence
  */
  hsdram1.Instance = FMC_SDRAM_DEVICE;
 8000a8c:	4b1f      	ldr	r3, [pc, #124]	; (8000b0c <MX_FMC_Init+0x98>)
 8000a8e:	4a20      	ldr	r2, [pc, #128]	; (8000b10 <MX_FMC_Init+0x9c>)
 8000a90:	601a      	str	r2, [r3, #0]
  /* hsdram1.Init */
  hsdram1.Init.SDBank = FMC_SDRAM_BANK2;
 8000a92:	4b1e      	ldr	r3, [pc, #120]	; (8000b0c <MX_FMC_Init+0x98>)
 8000a94:	2201      	movs	r2, #1
 8000a96:	605a      	str	r2, [r3, #4]
  hsdram1.Init.ColumnBitsNumber = FMC_SDRAM_COLUMN_BITS_NUM_8;
 8000a98:	4b1c      	ldr	r3, [pc, #112]	; (8000b0c <MX_FMC_Init+0x98>)
 8000a9a:	2200      	movs	r2, #0
 8000a9c:	609a      	str	r2, [r3, #8]
  hsdram1.Init.RowBitsNumber = FMC_SDRAM_ROW_BITS_NUM_12;
 8000a9e:	4b1b      	ldr	r3, [pc, #108]	; (8000b0c <MX_FMC_Init+0x98>)
 8000aa0:	2204      	movs	r2, #4
 8000aa2:	60da      	str	r2, [r3, #12]
  hsdram1.Init.MemoryDataWidth = FMC_SDRAM_MEM_BUS_WIDTH_16;
 8000aa4:	4b19      	ldr	r3, [pc, #100]	; (8000b0c <MX_FMC_Init+0x98>)
 8000aa6:	2210      	movs	r2, #16
 8000aa8:	611a      	str	r2, [r3, #16]
  hsdram1.Init.InternalBankNumber = FMC_SDRAM_INTERN_BANKS_NUM_4;
 8000aaa:	4b18      	ldr	r3, [pc, #96]	; (8000b0c <MX_FMC_Init+0x98>)
 8000aac:	2240      	movs	r2, #64	; 0x40
 8000aae:	615a      	str	r2, [r3, #20]
  hsdram1.Init.CASLatency = FMC_SDRAM_CAS_LATENCY_3;
 8000ab0:	4b16      	ldr	r3, [pc, #88]	; (8000b0c <MX_FMC_Init+0x98>)
 8000ab2:	f44f 72c0 	mov.w	r2, #384	; 0x180
 8000ab6:	619a      	str	r2, [r3, #24]
  hsdram1.Init.WriteProtection = FMC_SDRAM_WRITE_PROTECTION_DISABLE;
 8000ab8:	4b14      	ldr	r3, [pc, #80]	; (8000b0c <MX_FMC_Init+0x98>)
 8000aba:	2200      	movs	r2, #0
 8000abc:	61da      	str	r2, [r3, #28]
  hsdram1.Init.SDClockPeriod = FMC_SDRAM_CLOCK_PERIOD_2;
 8000abe:	4b13      	ldr	r3, [pc, #76]	; (8000b0c <MX_FMC_Init+0x98>)
 8000ac0:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8000ac4:	621a      	str	r2, [r3, #32]
  hsdram1.Init.ReadBurst = FMC_SDRAM_RBURST_DISABLE;
 8000ac6:	4b11      	ldr	r3, [pc, #68]	; (8000b0c <MX_FMC_Init+0x98>)
 8000ac8:	2200      	movs	r2, #0
 8000aca:	625a      	str	r2, [r3, #36]	; 0x24
  hsdram1.Init.ReadPipeDelay = FMC_SDRAM_RPIPE_DELAY_1;
 8000acc:	4b0f      	ldr	r3, [pc, #60]	; (8000b0c <MX_FMC_Init+0x98>)
 8000ace:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 8000ad2:	629a      	str	r2, [r3, #40]	; 0x28
  /* SdramTiming */
  SdramTiming.LoadToActiveDelay = 2;
 8000ad4:	2302      	movs	r3, #2
 8000ad6:	607b      	str	r3, [r7, #4]
  SdramTiming.ExitSelfRefreshDelay = 7;
 8000ad8:	2307      	movs	r3, #7
 8000ada:	60bb      	str	r3, [r7, #8]
  SdramTiming.SelfRefreshTime = 4;
 8000adc:	2304      	movs	r3, #4
 8000ade:	60fb      	str	r3, [r7, #12]
  SdramTiming.RowCycleDelay = 7;
 8000ae0:	2307      	movs	r3, #7
 8000ae2:	613b      	str	r3, [r7, #16]
  SdramTiming.WriteRecoveryTime = 3;
 8000ae4:	2303      	movs	r3, #3
 8000ae6:	617b      	str	r3, [r7, #20]
  SdramTiming.RPDelay = 2;
 8000ae8:	2302      	movs	r3, #2
 8000aea:	61bb      	str	r3, [r7, #24]
  SdramTiming.RCDDelay = 2;
 8000aec:	2302      	movs	r3, #2
 8000aee:	61fb      	str	r3, [r7, #28]

  if (HAL_SDRAM_Init(&hsdram1, &SdramTiming) != HAL_OK)
 8000af0:	1d3b      	adds	r3, r7, #4
 8000af2:	4619      	mov	r1, r3
 8000af4:	4805      	ldr	r0, [pc, #20]	; (8000b0c <MX_FMC_Init+0x98>)
 8000af6:	f004 f983 	bl	8004e00 <HAL_SDRAM_Init>
 8000afa:	4603      	mov	r3, r0
 8000afc:	2b00      	cmp	r3, #0
 8000afe:	d001      	beq.n	8000b04 <MX_FMC_Init+0x90>
  {
    Error_Handler( );
 8000b00:	f000 f92a 	bl	8000d58 <Error_Handler>
  }

  /* USER CODE BEGIN FMC_Init 2 */

  /* USER CODE END FMC_Init 2 */
}
 8000b04:	bf00      	nop
 8000b06:	3720      	adds	r7, #32
 8000b08:	46bd      	mov	sp, r7
 8000b0a:	bd80      	pop	{r7, pc}
 8000b0c:	200002b8 	.word	0x200002b8
 8000b10:	a0000140 	.word	0xa0000140

08000b14 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8000b14:	b580      	push	{r7, lr}
 8000b16:	b08e      	sub	sp, #56	; 0x38
 8000b18:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000b1a:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000b1e:	2200      	movs	r2, #0
 8000b20:	601a      	str	r2, [r3, #0]
 8000b22:	605a      	str	r2, [r3, #4]
 8000b24:	609a      	str	r2, [r3, #8]
 8000b26:	60da      	str	r2, [r3, #12]
 8000b28:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8000b2a:	2300      	movs	r3, #0
 8000b2c:	623b      	str	r3, [r7, #32]
 8000b2e:	4b7b      	ldr	r3, [pc, #492]	; (8000d1c <MX_GPIO_Init+0x208>)
 8000b30:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000b32:	4a7a      	ldr	r2, [pc, #488]	; (8000d1c <MX_GPIO_Init+0x208>)
 8000b34:	f043 0304 	orr.w	r3, r3, #4
 8000b38:	6313      	str	r3, [r2, #48]	; 0x30
 8000b3a:	4b78      	ldr	r3, [pc, #480]	; (8000d1c <MX_GPIO_Init+0x208>)
 8000b3c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000b3e:	f003 0304 	and.w	r3, r3, #4
 8000b42:	623b      	str	r3, [r7, #32]
 8000b44:	6a3b      	ldr	r3, [r7, #32]
  __HAL_RCC_GPIOF_CLK_ENABLE();
 8000b46:	2300      	movs	r3, #0
 8000b48:	61fb      	str	r3, [r7, #28]
 8000b4a:	4b74      	ldr	r3, [pc, #464]	; (8000d1c <MX_GPIO_Init+0x208>)
 8000b4c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000b4e:	4a73      	ldr	r2, [pc, #460]	; (8000d1c <MX_GPIO_Init+0x208>)
 8000b50:	f043 0320 	orr.w	r3, r3, #32
 8000b54:	6313      	str	r3, [r2, #48]	; 0x30
 8000b56:	4b71      	ldr	r3, [pc, #452]	; (8000d1c <MX_GPIO_Init+0x208>)
 8000b58:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000b5a:	f003 0320 	and.w	r3, r3, #32
 8000b5e:	61fb      	str	r3, [r7, #28]
 8000b60:	69fb      	ldr	r3, [r7, #28]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 8000b62:	2300      	movs	r3, #0
 8000b64:	61bb      	str	r3, [r7, #24]
 8000b66:	4b6d      	ldr	r3, [pc, #436]	; (8000d1c <MX_GPIO_Init+0x208>)
 8000b68:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000b6a:	4a6c      	ldr	r2, [pc, #432]	; (8000d1c <MX_GPIO_Init+0x208>)
 8000b6c:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8000b70:	6313      	str	r3, [r2, #48]	; 0x30
 8000b72:	4b6a      	ldr	r3, [pc, #424]	; (8000d1c <MX_GPIO_Init+0x208>)
 8000b74:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000b76:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8000b7a:	61bb      	str	r3, [r7, #24]
 8000b7c:	69bb      	ldr	r3, [r7, #24]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000b7e:	2300      	movs	r3, #0
 8000b80:	617b      	str	r3, [r7, #20]
 8000b82:	4b66      	ldr	r3, [pc, #408]	; (8000d1c <MX_GPIO_Init+0x208>)
 8000b84:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000b86:	4a65      	ldr	r2, [pc, #404]	; (8000d1c <MX_GPIO_Init+0x208>)
 8000b88:	f043 0301 	orr.w	r3, r3, #1
 8000b8c:	6313      	str	r3, [r2, #48]	; 0x30
 8000b8e:	4b63      	ldr	r3, [pc, #396]	; (8000d1c <MX_GPIO_Init+0x208>)
 8000b90:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000b92:	f003 0301 	and.w	r3, r3, #1
 8000b96:	617b      	str	r3, [r7, #20]
 8000b98:	697b      	ldr	r3, [r7, #20]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8000b9a:	2300      	movs	r3, #0
 8000b9c:	613b      	str	r3, [r7, #16]
 8000b9e:	4b5f      	ldr	r3, [pc, #380]	; (8000d1c <MX_GPIO_Init+0x208>)
 8000ba0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000ba2:	4a5e      	ldr	r2, [pc, #376]	; (8000d1c <MX_GPIO_Init+0x208>)
 8000ba4:	f043 0302 	orr.w	r3, r3, #2
 8000ba8:	6313      	str	r3, [r2, #48]	; 0x30
 8000baa:	4b5c      	ldr	r3, [pc, #368]	; (8000d1c <MX_GPIO_Init+0x208>)
 8000bac:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000bae:	f003 0302 	and.w	r3, r3, #2
 8000bb2:	613b      	str	r3, [r7, #16]
 8000bb4:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOG_CLK_ENABLE();
 8000bb6:	2300      	movs	r3, #0
 8000bb8:	60fb      	str	r3, [r7, #12]
 8000bba:	4b58      	ldr	r3, [pc, #352]	; (8000d1c <MX_GPIO_Init+0x208>)
 8000bbc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000bbe:	4a57      	ldr	r2, [pc, #348]	; (8000d1c <MX_GPIO_Init+0x208>)
 8000bc0:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8000bc4:	6313      	str	r3, [r2, #48]	; 0x30
 8000bc6:	4b55      	ldr	r3, [pc, #340]	; (8000d1c <MX_GPIO_Init+0x208>)
 8000bc8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000bca:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8000bce:	60fb      	str	r3, [r7, #12]
 8000bd0:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOE_CLK_ENABLE();
 8000bd2:	2300      	movs	r3, #0
 8000bd4:	60bb      	str	r3, [r7, #8]
 8000bd6:	4b51      	ldr	r3, [pc, #324]	; (8000d1c <MX_GPIO_Init+0x208>)
 8000bd8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000bda:	4a50      	ldr	r2, [pc, #320]	; (8000d1c <MX_GPIO_Init+0x208>)
 8000bdc:	f043 0310 	orr.w	r3, r3, #16
 8000be0:	6313      	str	r3, [r2, #48]	; 0x30
 8000be2:	4b4e      	ldr	r3, [pc, #312]	; (8000d1c <MX_GPIO_Init+0x208>)
 8000be4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000be6:	f003 0310 	and.w	r3, r3, #16
 8000bea:	60bb      	str	r3, [r7, #8]
 8000bec:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8000bee:	2300      	movs	r3, #0
 8000bf0:	607b      	str	r3, [r7, #4]
 8000bf2:	4b4a      	ldr	r3, [pc, #296]	; (8000d1c <MX_GPIO_Init+0x208>)
 8000bf4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000bf6:	4a49      	ldr	r2, [pc, #292]	; (8000d1c <MX_GPIO_Init+0x208>)
 8000bf8:	f043 0308 	orr.w	r3, r3, #8
 8000bfc:	6313      	str	r3, [r2, #48]	; 0x30
 8000bfe:	4b47      	ldr	r3, [pc, #284]	; (8000d1c <MX_GPIO_Init+0x208>)
 8000c00:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000c02:	f003 0308 	and.w	r3, r3, #8
 8000c06:	607b      	str	r3, [r7, #4]
 8000c08:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOC, NCS_MEMS_SPI_Pin|CSX_Pin|OTG_FS_PSO_Pin, GPIO_PIN_RESET);
 8000c0a:	2200      	movs	r2, #0
 8000c0c:	2116      	movs	r1, #22
 8000c0e:	4844      	ldr	r0, [pc, #272]	; (8000d20 <MX_GPIO_Init+0x20c>)
 8000c10:	f001 fc00 	bl	8002414 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(ACP_RST_GPIO_Port, ACP_RST_Pin, GPIO_PIN_RESET);
 8000c14:	2200      	movs	r2, #0
 8000c16:	2180      	movs	r1, #128	; 0x80
 8000c18:	4842      	ldr	r0, [pc, #264]	; (8000d24 <MX_GPIO_Init+0x210>)
 8000c1a:	f001 fbfb 	bl	8002414 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOD, RDX_Pin|WRX_DCX_Pin, GPIO_PIN_RESET);
 8000c1e:	2200      	movs	r2, #0
 8000c20:	f44f 5140 	mov.w	r1, #12288	; 0x3000
 8000c24:	4840      	ldr	r0, [pc, #256]	; (8000d28 <MX_GPIO_Init+0x214>)
 8000c26:	f001 fbf5 	bl	8002414 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOG, LD3_Pin|LD4_Pin, GPIO_PIN_RESET);
 8000c2a:	2200      	movs	r2, #0
 8000c2c:	f44f 41c0 	mov.w	r1, #24576	; 0x6000
 8000c30:	483e      	ldr	r0, [pc, #248]	; (8000d2c <MX_GPIO_Init+0x218>)
 8000c32:	f001 fbef 	bl	8002414 <HAL_GPIO_WritePin>

  /*Configure GPIO pins : NCS_MEMS_SPI_Pin CSX_Pin OTG_FS_PSO_Pin */
  GPIO_InitStruct.Pin = NCS_MEMS_SPI_Pin|CSX_Pin|OTG_FS_PSO_Pin;
 8000c36:	2316      	movs	r3, #22
 8000c38:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000c3a:	2301      	movs	r3, #1
 8000c3c:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000c3e:	2300      	movs	r3, #0
 8000c40:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000c42:	2300      	movs	r3, #0
 8000c44:	633b      	str	r3, [r7, #48]	; 0x30
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8000c46:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000c4a:	4619      	mov	r1, r3
 8000c4c:	4834      	ldr	r0, [pc, #208]	; (8000d20 <MX_GPIO_Init+0x20c>)
 8000c4e:	f001 fa35 	bl	80020bc <HAL_GPIO_Init>

  /*Configure GPIO pins : B1_Pin MEMS_INT1_Pin MEMS_INT2_Pin TP_INT1_Pin */
  GPIO_InitStruct.Pin = B1_Pin|MEMS_INT1_Pin|MEMS_INT2_Pin|TP_INT1_Pin;
 8000c52:	f248 0307 	movw	r3, #32775	; 0x8007
 8000c56:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_EVT_RISING;
 8000c58:	f44f 1390 	mov.w	r3, #1179648	; 0x120000
 8000c5c:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000c5e:	2300      	movs	r3, #0
 8000c60:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000c62:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000c66:	4619      	mov	r1, r3
 8000c68:	482e      	ldr	r0, [pc, #184]	; (8000d24 <MX_GPIO_Init+0x210>)
 8000c6a:	f001 fa27 	bl	80020bc <HAL_GPIO_Init>

  /*Configure GPIO pin : ACP_RST_Pin */
  GPIO_InitStruct.Pin = ACP_RST_Pin;
 8000c6e:	2380      	movs	r3, #128	; 0x80
 8000c70:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000c72:	2301      	movs	r3, #1
 8000c74:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000c76:	2300      	movs	r3, #0
 8000c78:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000c7a:	2300      	movs	r3, #0
 8000c7c:	633b      	str	r3, [r7, #48]	; 0x30
  HAL_GPIO_Init(ACP_RST_GPIO_Port, &GPIO_InitStruct);
 8000c7e:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000c82:	4619      	mov	r1, r3
 8000c84:	4827      	ldr	r0, [pc, #156]	; (8000d24 <MX_GPIO_Init+0x210>)
 8000c86:	f001 fa19 	bl	80020bc <HAL_GPIO_Init>

  /*Configure GPIO pin : OTG_FS_OC_Pin */
  GPIO_InitStruct.Pin = OTG_FS_OC_Pin;
 8000c8a:	2320      	movs	r3, #32
 8000c8c:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_EVT_RISING;
 8000c8e:	f44f 1390 	mov.w	r3, #1179648	; 0x120000
 8000c92:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000c94:	2300      	movs	r3, #0
 8000c96:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(OTG_FS_OC_GPIO_Port, &GPIO_InitStruct);
 8000c98:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000c9c:	4619      	mov	r1, r3
 8000c9e:	4820      	ldr	r0, [pc, #128]	; (8000d20 <MX_GPIO_Init+0x20c>)
 8000ca0:	f001 fa0c 	bl	80020bc <HAL_GPIO_Init>

  /*Configure GPIO pin : BOOT1_Pin */
  GPIO_InitStruct.Pin = BOOT1_Pin;
 8000ca4:	2304      	movs	r3, #4
 8000ca6:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000ca8:	2300      	movs	r3, #0
 8000caa:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000cac:	2300      	movs	r3, #0
 8000cae:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(BOOT1_GPIO_Port, &GPIO_InitStruct);
 8000cb0:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000cb4:	4619      	mov	r1, r3
 8000cb6:	481e      	ldr	r0, [pc, #120]	; (8000d30 <MX_GPIO_Init+0x21c>)
 8000cb8:	f001 fa00 	bl	80020bc <HAL_GPIO_Init>

  /*Configure GPIO pin : TE_Pin */
  GPIO_InitStruct.Pin = TE_Pin;
 8000cbc:	f44f 6300 	mov.w	r3, #2048	; 0x800
 8000cc0:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000cc2:	2300      	movs	r3, #0
 8000cc4:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000cc6:	2300      	movs	r3, #0
 8000cc8:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(TE_GPIO_Port, &GPIO_InitStruct);
 8000cca:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000cce:	4619      	mov	r1, r3
 8000cd0:	4815      	ldr	r0, [pc, #84]	; (8000d28 <MX_GPIO_Init+0x214>)
 8000cd2:	f001 f9f3 	bl	80020bc <HAL_GPIO_Init>

  /*Configure GPIO pins : RDX_Pin WRX_DCX_Pin */
  GPIO_InitStruct.Pin = RDX_Pin|WRX_DCX_Pin;
 8000cd6:	f44f 5340 	mov.w	r3, #12288	; 0x3000
 8000cda:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000cdc:	2301      	movs	r3, #1
 8000cde:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000ce0:	2300      	movs	r3, #0
 8000ce2:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000ce4:	2300      	movs	r3, #0
 8000ce6:	633b      	str	r3, [r7, #48]	; 0x30
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8000ce8:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000cec:	4619      	mov	r1, r3
 8000cee:	480e      	ldr	r0, [pc, #56]	; (8000d28 <MX_GPIO_Init+0x214>)
 8000cf0:	f001 f9e4 	bl	80020bc <HAL_GPIO_Init>

  /*Configure GPIO pins : LD3_Pin LD4_Pin */
  GPIO_InitStruct.Pin = LD3_Pin|LD4_Pin;
 8000cf4:	f44f 43c0 	mov.w	r3, #24576	; 0x6000
 8000cf8:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000cfa:	2301      	movs	r3, #1
 8000cfc:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000cfe:	2300      	movs	r3, #0
 8000d00:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000d02:	2300      	movs	r3, #0
 8000d04:	633b      	str	r3, [r7, #48]	; 0x30
  HAL_GPIO_Init(GPIOG, &GPIO_InitStruct);
 8000d06:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000d0a:	4619      	mov	r1, r3
 8000d0c:	4807      	ldr	r0, [pc, #28]	; (8000d2c <MX_GPIO_Init+0x218>)
 8000d0e:	f001 f9d5 	bl	80020bc <HAL_GPIO_Init>

}
 8000d12:	bf00      	nop
 8000d14:	3738      	adds	r7, #56	; 0x38
 8000d16:	46bd      	mov	sp, r7
 8000d18:	bd80      	pop	{r7, pc}
 8000d1a:	bf00      	nop
 8000d1c:	40023800 	.word	0x40023800
 8000d20:	40020800 	.word	0x40020800
 8000d24:	40020000 	.word	0x40020000
 8000d28:	40020c00 	.word	0x40020c00
 8000d2c:	40021800 	.word	0x40021800
 8000d30:	40020400 	.word	0x40020400

08000d34 <HAL_TIM_PeriodElapsedCallback>:
  * a global variable "uwTick" used as application time base.
  * @param  htim : TIM handle
  * @retval None
  */
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 8000d34:	b580      	push	{r7, lr}
 8000d36:	b082      	sub	sp, #8
 8000d38:	af00      	add	r7, sp, #0
 8000d3a:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN Callback 0 */

  /* USER CODE END Callback 0 */
  if (htim->Instance == TIM6) {
 8000d3c:	687b      	ldr	r3, [r7, #4]
 8000d3e:	681b      	ldr	r3, [r3, #0]
 8000d40:	4a04      	ldr	r2, [pc, #16]	; (8000d54 <HAL_TIM_PeriodElapsedCallback+0x20>)
 8000d42:	4293      	cmp	r3, r2
 8000d44:	d101      	bne.n	8000d4a <HAL_TIM_PeriodElapsedCallback+0x16>
    HAL_IncTick();
 8000d46:	f000 feaf 	bl	8001aa8 <HAL_IncTick>
  }
  /* USER CODE BEGIN Callback 1 */

  /* USER CODE END Callback 1 */
}
 8000d4a:	bf00      	nop
 8000d4c:	3708      	adds	r7, #8
 8000d4e:	46bd      	mov	sp, r7
 8000d50:	bd80      	pop	{r7, pc}
 8000d52:	bf00      	nop
 8000d54:	40001000 	.word	0x40001000

08000d58 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8000d58:	b480      	push	{r7}
 8000d5a:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8000d5c:	b672      	cpsid	i
}
 8000d5e:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8000d60:	e7fe      	b.n	8000d60 <Error_Handler+0x8>
	...

08000d64 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000d64:	b580      	push	{r7, lr}
 8000d66:	b082      	sub	sp, #8
 8000d68:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000d6a:	2300      	movs	r3, #0
 8000d6c:	607b      	str	r3, [r7, #4]
 8000d6e:	4b12      	ldr	r3, [pc, #72]	; (8000db8 <HAL_MspInit+0x54>)
 8000d70:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000d72:	4a11      	ldr	r2, [pc, #68]	; (8000db8 <HAL_MspInit+0x54>)
 8000d74:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8000d78:	6453      	str	r3, [r2, #68]	; 0x44
 8000d7a:	4b0f      	ldr	r3, [pc, #60]	; (8000db8 <HAL_MspInit+0x54>)
 8000d7c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000d7e:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8000d82:	607b      	str	r3, [r7, #4]
 8000d84:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8000d86:	2300      	movs	r3, #0
 8000d88:	603b      	str	r3, [r7, #0]
 8000d8a:	4b0b      	ldr	r3, [pc, #44]	; (8000db8 <HAL_MspInit+0x54>)
 8000d8c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000d8e:	4a0a      	ldr	r2, [pc, #40]	; (8000db8 <HAL_MspInit+0x54>)
 8000d90:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8000d94:	6413      	str	r3, [r2, #64]	; 0x40
 8000d96:	4b08      	ldr	r3, [pc, #32]	; (8000db8 <HAL_MspInit+0x54>)
 8000d98:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000d9a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000d9e:	603b      	str	r3, [r7, #0]
 8000da0:	683b      	ldr	r3, [r7, #0]

  /* System interrupt init*/
  /* PendSV_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(PendSV_IRQn, 15, 0);
 8000da2:	2200      	movs	r2, #0
 8000da4:	210f      	movs	r1, #15
 8000da6:	f06f 0001 	mvn.w	r0, #1
 8000daa:	f000 ff55 	bl	8001c58 <HAL_NVIC_SetPriority>

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8000dae:	bf00      	nop
 8000db0:	3708      	adds	r7, #8
 8000db2:	46bd      	mov	sp, r7
 8000db4:	bd80      	pop	{r7, pc}
 8000db6:	bf00      	nop
 8000db8:	40023800 	.word	0x40023800

08000dbc <HAL_CRC_MspInit>:
* This function configures the hardware resources used in this example
* @param hcrc: CRC handle pointer
* @retval None
*/
void HAL_CRC_MspInit(CRC_HandleTypeDef* hcrc)
{
 8000dbc:	b480      	push	{r7}
 8000dbe:	b085      	sub	sp, #20
 8000dc0:	af00      	add	r7, sp, #0
 8000dc2:	6078      	str	r0, [r7, #4]
  if(hcrc->Instance==CRC)
 8000dc4:	687b      	ldr	r3, [r7, #4]
 8000dc6:	681b      	ldr	r3, [r3, #0]
 8000dc8:	4a0b      	ldr	r2, [pc, #44]	; (8000df8 <HAL_CRC_MspInit+0x3c>)
 8000dca:	4293      	cmp	r3, r2
 8000dcc:	d10d      	bne.n	8000dea <HAL_CRC_MspInit+0x2e>
  {
  /* USER CODE BEGIN CRC_MspInit 0 */

  /* USER CODE END CRC_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_CRC_CLK_ENABLE();
 8000dce:	2300      	movs	r3, #0
 8000dd0:	60fb      	str	r3, [r7, #12]
 8000dd2:	4b0a      	ldr	r3, [pc, #40]	; (8000dfc <HAL_CRC_MspInit+0x40>)
 8000dd4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000dd6:	4a09      	ldr	r2, [pc, #36]	; (8000dfc <HAL_CRC_MspInit+0x40>)
 8000dd8:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 8000ddc:	6313      	str	r3, [r2, #48]	; 0x30
 8000dde:	4b07      	ldr	r3, [pc, #28]	; (8000dfc <HAL_CRC_MspInit+0x40>)
 8000de0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000de2:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8000de6:	60fb      	str	r3, [r7, #12]
 8000de8:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN CRC_MspInit 1 */

  /* USER CODE END CRC_MspInit 1 */
  }

}
 8000dea:	bf00      	nop
 8000dec:	3714      	adds	r7, #20
 8000dee:	46bd      	mov	sp, r7
 8000df0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000df4:	4770      	bx	lr
 8000df6:	bf00      	nop
 8000df8:	40023000 	.word	0x40023000
 8000dfc:	40023800 	.word	0x40023800

08000e00 <HAL_DMA2D_MspInit>:
* This function configures the hardware resources used in this example
* @param hdma2d: DMA2D handle pointer
* @retval None
*/
void HAL_DMA2D_MspInit(DMA2D_HandleTypeDef* hdma2d)
{
 8000e00:	b580      	push	{r7, lr}
 8000e02:	b084      	sub	sp, #16
 8000e04:	af00      	add	r7, sp, #0
 8000e06:	6078      	str	r0, [r7, #4]
  if(hdma2d->Instance==DMA2D)
 8000e08:	687b      	ldr	r3, [r7, #4]
 8000e0a:	681b      	ldr	r3, [r3, #0]
 8000e0c:	4a0e      	ldr	r2, [pc, #56]	; (8000e48 <HAL_DMA2D_MspInit+0x48>)
 8000e0e:	4293      	cmp	r3, r2
 8000e10:	d115      	bne.n	8000e3e <HAL_DMA2D_MspInit+0x3e>
  {
  /* USER CODE BEGIN DMA2D_MspInit 0 */

  /* USER CODE END DMA2D_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_DMA2D_CLK_ENABLE();
 8000e12:	2300      	movs	r3, #0
 8000e14:	60fb      	str	r3, [r7, #12]
 8000e16:	4b0d      	ldr	r3, [pc, #52]	; (8000e4c <HAL_DMA2D_MspInit+0x4c>)
 8000e18:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000e1a:	4a0c      	ldr	r2, [pc, #48]	; (8000e4c <HAL_DMA2D_MspInit+0x4c>)
 8000e1c:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
 8000e20:	6313      	str	r3, [r2, #48]	; 0x30
 8000e22:	4b0a      	ldr	r3, [pc, #40]	; (8000e4c <HAL_DMA2D_MspInit+0x4c>)
 8000e24:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000e26:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8000e2a:	60fb      	str	r3, [r7, #12]
 8000e2c:	68fb      	ldr	r3, [r7, #12]
    /* DMA2D interrupt Init */
    HAL_NVIC_SetPriority(DMA2D_IRQn, 5, 0);
 8000e2e:	2200      	movs	r2, #0
 8000e30:	2105      	movs	r1, #5
 8000e32:	205a      	movs	r0, #90	; 0x5a
 8000e34:	f000 ff10 	bl	8001c58 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(DMA2D_IRQn);
 8000e38:	205a      	movs	r0, #90	; 0x5a
 8000e3a:	f000 ff29 	bl	8001c90 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN DMA2D_MspInit 1 */

  /* USER CODE END DMA2D_MspInit 1 */
  }

}
 8000e3e:	bf00      	nop
 8000e40:	3710      	adds	r7, #16
 8000e42:	46bd      	mov	sp, r7
 8000e44:	bd80      	pop	{r7, pc}
 8000e46:	bf00      	nop
 8000e48:	4002b000 	.word	0x4002b000
 8000e4c:	40023800 	.word	0x40023800

08000e50 <HAL_I2C_MspInit>:
* This function configures the hardware resources used in this example
* @param hi2c: I2C handle pointer
* @retval None
*/
void HAL_I2C_MspInit(I2C_HandleTypeDef* hi2c)
{
 8000e50:	b580      	push	{r7, lr}
 8000e52:	b08a      	sub	sp, #40	; 0x28
 8000e54:	af00      	add	r7, sp, #0
 8000e56:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000e58:	f107 0314 	add.w	r3, r7, #20
 8000e5c:	2200      	movs	r2, #0
 8000e5e:	601a      	str	r2, [r3, #0]
 8000e60:	605a      	str	r2, [r3, #4]
 8000e62:	609a      	str	r2, [r3, #8]
 8000e64:	60da      	str	r2, [r3, #12]
 8000e66:	611a      	str	r2, [r3, #16]
  if(hi2c->Instance==I2C3)
 8000e68:	687b      	ldr	r3, [r7, #4]
 8000e6a:	681b      	ldr	r3, [r3, #0]
 8000e6c:	4a29      	ldr	r2, [pc, #164]	; (8000f14 <HAL_I2C_MspInit+0xc4>)
 8000e6e:	4293      	cmp	r3, r2
 8000e70:	d14b      	bne.n	8000f0a <HAL_I2C_MspInit+0xba>
  {
  /* USER CODE BEGIN I2C3_MspInit 0 */

  /* USER CODE END I2C3_MspInit 0 */

    __HAL_RCC_GPIOC_CLK_ENABLE();
 8000e72:	2300      	movs	r3, #0
 8000e74:	613b      	str	r3, [r7, #16]
 8000e76:	4b28      	ldr	r3, [pc, #160]	; (8000f18 <HAL_I2C_MspInit+0xc8>)
 8000e78:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000e7a:	4a27      	ldr	r2, [pc, #156]	; (8000f18 <HAL_I2C_MspInit+0xc8>)
 8000e7c:	f043 0304 	orr.w	r3, r3, #4
 8000e80:	6313      	str	r3, [r2, #48]	; 0x30
 8000e82:	4b25      	ldr	r3, [pc, #148]	; (8000f18 <HAL_I2C_MspInit+0xc8>)
 8000e84:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000e86:	f003 0304 	and.w	r3, r3, #4
 8000e8a:	613b      	str	r3, [r7, #16]
 8000e8c:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000e8e:	2300      	movs	r3, #0
 8000e90:	60fb      	str	r3, [r7, #12]
 8000e92:	4b21      	ldr	r3, [pc, #132]	; (8000f18 <HAL_I2C_MspInit+0xc8>)
 8000e94:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000e96:	4a20      	ldr	r2, [pc, #128]	; (8000f18 <HAL_I2C_MspInit+0xc8>)
 8000e98:	f043 0301 	orr.w	r3, r3, #1
 8000e9c:	6313      	str	r3, [r2, #48]	; 0x30
 8000e9e:	4b1e      	ldr	r3, [pc, #120]	; (8000f18 <HAL_I2C_MspInit+0xc8>)
 8000ea0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000ea2:	f003 0301 	and.w	r3, r3, #1
 8000ea6:	60fb      	str	r3, [r7, #12]
 8000ea8:	68fb      	ldr	r3, [r7, #12]
    /**I2C3 GPIO Configuration
    PC9     ------> I2C3_SDA
    PA8     ------> I2C3_SCL
    */
    GPIO_InitStruct.Pin = I2C3_SDA_Pin;
 8000eaa:	f44f 7300 	mov.w	r3, #512	; 0x200
 8000eae:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8000eb0:	2312      	movs	r3, #18
 8000eb2:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 8000eb4:	2301      	movs	r3, #1
 8000eb6:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000eb8:	2300      	movs	r3, #0
 8000eba:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C3;
 8000ebc:	2304      	movs	r3, #4
 8000ebe:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(I2C3_SDA_GPIO_Port, &GPIO_InitStruct);
 8000ec0:	f107 0314 	add.w	r3, r7, #20
 8000ec4:	4619      	mov	r1, r3
 8000ec6:	4815      	ldr	r0, [pc, #84]	; (8000f1c <HAL_I2C_MspInit+0xcc>)
 8000ec8:	f001 f8f8 	bl	80020bc <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = I2C3_SCL_Pin;
 8000ecc:	f44f 7380 	mov.w	r3, #256	; 0x100
 8000ed0:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8000ed2:	2312      	movs	r3, #18
 8000ed4:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 8000ed6:	2301      	movs	r3, #1
 8000ed8:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000eda:	2300      	movs	r3, #0
 8000edc:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C3;
 8000ede:	2304      	movs	r3, #4
 8000ee0:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(I2C3_SCL_GPIO_Port, &GPIO_InitStruct);
 8000ee2:	f107 0314 	add.w	r3, r7, #20
 8000ee6:	4619      	mov	r1, r3
 8000ee8:	480d      	ldr	r0, [pc, #52]	; (8000f20 <HAL_I2C_MspInit+0xd0>)
 8000eea:	f001 f8e7 	bl	80020bc <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_I2C3_CLK_ENABLE();
 8000eee:	2300      	movs	r3, #0
 8000ef0:	60bb      	str	r3, [r7, #8]
 8000ef2:	4b09      	ldr	r3, [pc, #36]	; (8000f18 <HAL_I2C_MspInit+0xc8>)
 8000ef4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000ef6:	4a08      	ldr	r2, [pc, #32]	; (8000f18 <HAL_I2C_MspInit+0xc8>)
 8000ef8:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
 8000efc:	6413      	str	r3, [r2, #64]	; 0x40
 8000efe:	4b06      	ldr	r3, [pc, #24]	; (8000f18 <HAL_I2C_MspInit+0xc8>)
 8000f00:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000f02:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8000f06:	60bb      	str	r3, [r7, #8]
 8000f08:	68bb      	ldr	r3, [r7, #8]
  /* USER CODE BEGIN I2C3_MspInit 1 */

  /* USER CODE END I2C3_MspInit 1 */
  }

}
 8000f0a:	bf00      	nop
 8000f0c:	3728      	adds	r7, #40	; 0x28
 8000f0e:	46bd      	mov	sp, r7
 8000f10:	bd80      	pop	{r7, pc}
 8000f12:	bf00      	nop
 8000f14:	40005c00 	.word	0x40005c00
 8000f18:	40023800 	.word	0x40023800
 8000f1c:	40020800 	.word	0x40020800
 8000f20:	40020000 	.word	0x40020000

08000f24 <HAL_LTDC_MspInit>:
* This function configures the hardware resources used in this example
* @param hltdc: LTDC handle pointer
* @retval None
*/
void HAL_LTDC_MspInit(LTDC_HandleTypeDef* hltdc)
{
 8000f24:	b580      	push	{r7, lr}
 8000f26:	b09a      	sub	sp, #104	; 0x68
 8000f28:	af00      	add	r7, sp, #0
 8000f2a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000f2c:	f107 0354 	add.w	r3, r7, #84	; 0x54
 8000f30:	2200      	movs	r2, #0
 8000f32:	601a      	str	r2, [r3, #0]
 8000f34:	605a      	str	r2, [r3, #4]
 8000f36:	609a      	str	r2, [r3, #8]
 8000f38:	60da      	str	r2, [r3, #12]
 8000f3a:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8000f3c:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000f40:	2230      	movs	r2, #48	; 0x30
 8000f42:	2100      	movs	r1, #0
 8000f44:	4618      	mov	r0, r3
 8000f46:	f008 fd15 	bl	8009974 <memset>
  if(hltdc->Instance==LTDC)
 8000f4a:	687b      	ldr	r3, [r7, #4]
 8000f4c:	681b      	ldr	r3, [r3, #0]
 8000f4e:	4a85      	ldr	r2, [pc, #532]	; (8001164 <HAL_LTDC_MspInit+0x240>)
 8000f50:	4293      	cmp	r3, r2
 8000f52:	f040 8102 	bne.w	800115a <HAL_LTDC_MspInit+0x236>

  /* USER CODE END LTDC_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_LTDC;
 8000f56:	2308      	movs	r3, #8
 8000f58:	627b      	str	r3, [r7, #36]	; 0x24
    PeriphClkInitStruct.PLLSAI.PLLSAIN = 50;
 8000f5a:	2332      	movs	r3, #50	; 0x32
 8000f5c:	637b      	str	r3, [r7, #52]	; 0x34
    PeriphClkInitStruct.PLLSAI.PLLSAIR = 2;
 8000f5e:	2302      	movs	r3, #2
 8000f60:	63fb      	str	r3, [r7, #60]	; 0x3c
    PeriphClkInitStruct.PLLSAIDivR = RCC_PLLSAIDIVR_2;
 8000f62:	2300      	movs	r3, #0
 8000f64:	64bb      	str	r3, [r7, #72]	; 0x48
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8000f66:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000f6a:	4618      	mov	r0, r3
 8000f6c:	f003 fd88 	bl	8004a80 <HAL_RCCEx_PeriphCLKConfig>
 8000f70:	4603      	mov	r3, r0
 8000f72:	2b00      	cmp	r3, #0
 8000f74:	d001      	beq.n	8000f7a <HAL_LTDC_MspInit+0x56>
    {
      Error_Handler();
 8000f76:	f7ff feef 	bl	8000d58 <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_LTDC_CLK_ENABLE();
 8000f7a:	2300      	movs	r3, #0
 8000f7c:	623b      	str	r3, [r7, #32]
 8000f7e:	4b7a      	ldr	r3, [pc, #488]	; (8001168 <HAL_LTDC_MspInit+0x244>)
 8000f80:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000f82:	4a79      	ldr	r2, [pc, #484]	; (8001168 <HAL_LTDC_MspInit+0x244>)
 8000f84:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 8000f88:	6453      	str	r3, [r2, #68]	; 0x44
 8000f8a:	4b77      	ldr	r3, [pc, #476]	; (8001168 <HAL_LTDC_MspInit+0x244>)
 8000f8c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000f8e:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 8000f92:	623b      	str	r3, [r7, #32]
 8000f94:	6a3b      	ldr	r3, [r7, #32]

    __HAL_RCC_GPIOF_CLK_ENABLE();
 8000f96:	2300      	movs	r3, #0
 8000f98:	61fb      	str	r3, [r7, #28]
 8000f9a:	4b73      	ldr	r3, [pc, #460]	; (8001168 <HAL_LTDC_MspInit+0x244>)
 8000f9c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000f9e:	4a72      	ldr	r2, [pc, #456]	; (8001168 <HAL_LTDC_MspInit+0x244>)
 8000fa0:	f043 0320 	orr.w	r3, r3, #32
 8000fa4:	6313      	str	r3, [r2, #48]	; 0x30
 8000fa6:	4b70      	ldr	r3, [pc, #448]	; (8001168 <HAL_LTDC_MspInit+0x244>)
 8000fa8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000faa:	f003 0320 	and.w	r3, r3, #32
 8000fae:	61fb      	str	r3, [r7, #28]
 8000fb0:	69fb      	ldr	r3, [r7, #28]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000fb2:	2300      	movs	r3, #0
 8000fb4:	61bb      	str	r3, [r7, #24]
 8000fb6:	4b6c      	ldr	r3, [pc, #432]	; (8001168 <HAL_LTDC_MspInit+0x244>)
 8000fb8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000fba:	4a6b      	ldr	r2, [pc, #428]	; (8001168 <HAL_LTDC_MspInit+0x244>)
 8000fbc:	f043 0301 	orr.w	r3, r3, #1
 8000fc0:	6313      	str	r3, [r2, #48]	; 0x30
 8000fc2:	4b69      	ldr	r3, [pc, #420]	; (8001168 <HAL_LTDC_MspInit+0x244>)
 8000fc4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000fc6:	f003 0301 	and.w	r3, r3, #1
 8000fca:	61bb      	str	r3, [r7, #24]
 8000fcc:	69bb      	ldr	r3, [r7, #24]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8000fce:	2300      	movs	r3, #0
 8000fd0:	617b      	str	r3, [r7, #20]
 8000fd2:	4b65      	ldr	r3, [pc, #404]	; (8001168 <HAL_LTDC_MspInit+0x244>)
 8000fd4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000fd6:	4a64      	ldr	r2, [pc, #400]	; (8001168 <HAL_LTDC_MspInit+0x244>)
 8000fd8:	f043 0302 	orr.w	r3, r3, #2
 8000fdc:	6313      	str	r3, [r2, #48]	; 0x30
 8000fde:	4b62      	ldr	r3, [pc, #392]	; (8001168 <HAL_LTDC_MspInit+0x244>)
 8000fe0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000fe2:	f003 0302 	and.w	r3, r3, #2
 8000fe6:	617b      	str	r3, [r7, #20]
 8000fe8:	697b      	ldr	r3, [r7, #20]
    __HAL_RCC_GPIOG_CLK_ENABLE();
 8000fea:	2300      	movs	r3, #0
 8000fec:	613b      	str	r3, [r7, #16]
 8000fee:	4b5e      	ldr	r3, [pc, #376]	; (8001168 <HAL_LTDC_MspInit+0x244>)
 8000ff0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000ff2:	4a5d      	ldr	r2, [pc, #372]	; (8001168 <HAL_LTDC_MspInit+0x244>)
 8000ff4:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8000ff8:	6313      	str	r3, [r2, #48]	; 0x30
 8000ffa:	4b5b      	ldr	r3, [pc, #364]	; (8001168 <HAL_LTDC_MspInit+0x244>)
 8000ffc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000ffe:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8001002:	613b      	str	r3, [r7, #16]
 8001004:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOC_CLK_ENABLE();
 8001006:	2300      	movs	r3, #0
 8001008:	60fb      	str	r3, [r7, #12]
 800100a:	4b57      	ldr	r3, [pc, #348]	; (8001168 <HAL_LTDC_MspInit+0x244>)
 800100c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800100e:	4a56      	ldr	r2, [pc, #344]	; (8001168 <HAL_LTDC_MspInit+0x244>)
 8001010:	f043 0304 	orr.w	r3, r3, #4
 8001014:	6313      	str	r3, [r2, #48]	; 0x30
 8001016:	4b54      	ldr	r3, [pc, #336]	; (8001168 <HAL_LTDC_MspInit+0x244>)
 8001018:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800101a:	f003 0304 	and.w	r3, r3, #4
 800101e:	60fb      	str	r3, [r7, #12]
 8001020:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOD_CLK_ENABLE();
 8001022:	2300      	movs	r3, #0
 8001024:	60bb      	str	r3, [r7, #8]
 8001026:	4b50      	ldr	r3, [pc, #320]	; (8001168 <HAL_LTDC_MspInit+0x244>)
 8001028:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800102a:	4a4f      	ldr	r2, [pc, #316]	; (8001168 <HAL_LTDC_MspInit+0x244>)
 800102c:	f043 0308 	orr.w	r3, r3, #8
 8001030:	6313      	str	r3, [r2, #48]	; 0x30
 8001032:	4b4d      	ldr	r3, [pc, #308]	; (8001168 <HAL_LTDC_MspInit+0x244>)
 8001034:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001036:	f003 0308 	and.w	r3, r3, #8
 800103a:	60bb      	str	r3, [r7, #8]
 800103c:	68bb      	ldr	r3, [r7, #8]
    PG11     ------> LTDC_B3
    PG12     ------> LTDC_B4
    PB8     ------> LTDC_B6
    PB9     ------> LTDC_B7
    */
    GPIO_InitStruct.Pin = ENABLE_Pin;
 800103e:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8001042:	657b      	str	r3, [r7, #84]	; 0x54
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001044:	2302      	movs	r3, #2
 8001046:	65bb      	str	r3, [r7, #88]	; 0x58
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001048:	2300      	movs	r3, #0
 800104a:	65fb      	str	r3, [r7, #92]	; 0x5c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800104c:	2300      	movs	r3, #0
 800104e:	663b      	str	r3, [r7, #96]	; 0x60
    GPIO_InitStruct.Alternate = GPIO_AF14_LTDC;
 8001050:	230e      	movs	r3, #14
 8001052:	667b      	str	r3, [r7, #100]	; 0x64
    HAL_GPIO_Init(ENABLE_GPIO_Port, &GPIO_InitStruct);
 8001054:	f107 0354 	add.w	r3, r7, #84	; 0x54
 8001058:	4619      	mov	r1, r3
 800105a:	4844      	ldr	r0, [pc, #272]	; (800116c <HAL_LTDC_MspInit+0x248>)
 800105c:	f001 f82e 	bl	80020bc <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = B5_Pin|VSYNC_Pin|G2_Pin|R4_Pin
 8001060:	f641 0358 	movw	r3, #6232	; 0x1858
 8001064:	657b      	str	r3, [r7, #84]	; 0x54
                          |R5_Pin;
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001066:	2302      	movs	r3, #2
 8001068:	65bb      	str	r3, [r7, #88]	; 0x58
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800106a:	2300      	movs	r3, #0
 800106c:	65fb      	str	r3, [r7, #92]	; 0x5c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800106e:	2300      	movs	r3, #0
 8001070:	663b      	str	r3, [r7, #96]	; 0x60
    GPIO_InitStruct.Alternate = GPIO_AF14_LTDC;
 8001072:	230e      	movs	r3, #14
 8001074:	667b      	str	r3, [r7, #100]	; 0x64
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001076:	f107 0354 	add.w	r3, r7, #84	; 0x54
 800107a:	4619      	mov	r1, r3
 800107c:	483c      	ldr	r0, [pc, #240]	; (8001170 <HAL_LTDC_MspInit+0x24c>)
 800107e:	f001 f81d 	bl	80020bc <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = R3_Pin|R6_Pin;
 8001082:	2303      	movs	r3, #3
 8001084:	657b      	str	r3, [r7, #84]	; 0x54
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001086:	2302      	movs	r3, #2
 8001088:	65bb      	str	r3, [r7, #88]	; 0x58
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800108a:	2300      	movs	r3, #0
 800108c:	65fb      	str	r3, [r7, #92]	; 0x5c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800108e:	2300      	movs	r3, #0
 8001090:	663b      	str	r3, [r7, #96]	; 0x60
    GPIO_InitStruct.Alternate = GPIO_AF9_LTDC;
 8001092:	2309      	movs	r3, #9
 8001094:	667b      	str	r3, [r7, #100]	; 0x64
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001096:	f107 0354 	add.w	r3, r7, #84	; 0x54
 800109a:	4619      	mov	r1, r3
 800109c:	4835      	ldr	r0, [pc, #212]	; (8001174 <HAL_LTDC_MspInit+0x250>)
 800109e:	f001 f80d 	bl	80020bc <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = G4_Pin|G5_Pin|B6_Pin|B7_Pin;
 80010a2:	f44f 6370 	mov.w	r3, #3840	; 0xf00
 80010a6:	657b      	str	r3, [r7, #84]	; 0x54
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80010a8:	2302      	movs	r3, #2
 80010aa:	65bb      	str	r3, [r7, #88]	; 0x58
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80010ac:	2300      	movs	r3, #0
 80010ae:	65fb      	str	r3, [r7, #92]	; 0x5c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80010b0:	2300      	movs	r3, #0
 80010b2:	663b      	str	r3, [r7, #96]	; 0x60
    GPIO_InitStruct.Alternate = GPIO_AF14_LTDC;
 80010b4:	230e      	movs	r3, #14
 80010b6:	667b      	str	r3, [r7, #100]	; 0x64
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80010b8:	f107 0354 	add.w	r3, r7, #84	; 0x54
 80010bc:	4619      	mov	r1, r3
 80010be:	482d      	ldr	r0, [pc, #180]	; (8001174 <HAL_LTDC_MspInit+0x250>)
 80010c0:	f000 fffc 	bl	80020bc <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = R7_Pin|DOTCLK_Pin|B3_Pin;
 80010c4:	f44f 630c 	mov.w	r3, #2240	; 0x8c0
 80010c8:	657b      	str	r3, [r7, #84]	; 0x54
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80010ca:	2302      	movs	r3, #2
 80010cc:	65bb      	str	r3, [r7, #88]	; 0x58
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80010ce:	2300      	movs	r3, #0
 80010d0:	65fb      	str	r3, [r7, #92]	; 0x5c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80010d2:	2300      	movs	r3, #0
 80010d4:	663b      	str	r3, [r7, #96]	; 0x60
    GPIO_InitStruct.Alternate = GPIO_AF14_LTDC;
 80010d6:	230e      	movs	r3, #14
 80010d8:	667b      	str	r3, [r7, #100]	; 0x64
    HAL_GPIO_Init(GPIOG, &GPIO_InitStruct);
 80010da:	f107 0354 	add.w	r3, r7, #84	; 0x54
 80010de:	4619      	mov	r1, r3
 80010e0:	4825      	ldr	r0, [pc, #148]	; (8001178 <HAL_LTDC_MspInit+0x254>)
 80010e2:	f000 ffeb 	bl	80020bc <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = HSYNC_Pin|G6_Pin|R2_Pin;
 80010e6:	f44f 6398 	mov.w	r3, #1216	; 0x4c0
 80010ea:	657b      	str	r3, [r7, #84]	; 0x54
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80010ec:	2302      	movs	r3, #2
 80010ee:	65bb      	str	r3, [r7, #88]	; 0x58
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80010f0:	2300      	movs	r3, #0
 80010f2:	65fb      	str	r3, [r7, #92]	; 0x5c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80010f4:	2300      	movs	r3, #0
 80010f6:	663b      	str	r3, [r7, #96]	; 0x60
    GPIO_InitStruct.Alternate = GPIO_AF14_LTDC;
 80010f8:	230e      	movs	r3, #14
 80010fa:	667b      	str	r3, [r7, #100]	; 0x64
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 80010fc:	f107 0354 	add.w	r3, r7, #84	; 0x54
 8001100:	4619      	mov	r1, r3
 8001102:	481e      	ldr	r0, [pc, #120]	; (800117c <HAL_LTDC_MspInit+0x258>)
 8001104:	f000 ffda 	bl	80020bc <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = G7_Pin|B2_Pin;
 8001108:	2348      	movs	r3, #72	; 0x48
 800110a:	657b      	str	r3, [r7, #84]	; 0x54
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800110c:	2302      	movs	r3, #2
 800110e:	65bb      	str	r3, [r7, #88]	; 0x58
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001110:	2300      	movs	r3, #0
 8001112:	65fb      	str	r3, [r7, #92]	; 0x5c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001114:	2300      	movs	r3, #0
 8001116:	663b      	str	r3, [r7, #96]	; 0x60
    GPIO_InitStruct.Alternate = GPIO_AF14_LTDC;
 8001118:	230e      	movs	r3, #14
 800111a:	667b      	str	r3, [r7, #100]	; 0x64
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 800111c:	f107 0354 	add.w	r3, r7, #84	; 0x54
 8001120:	4619      	mov	r1, r3
 8001122:	4817      	ldr	r0, [pc, #92]	; (8001180 <HAL_LTDC_MspInit+0x25c>)
 8001124:	f000 ffca 	bl	80020bc <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = G3_Pin|B4_Pin;
 8001128:	f44f 53a0 	mov.w	r3, #5120	; 0x1400
 800112c:	657b      	str	r3, [r7, #84]	; 0x54
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800112e:	2302      	movs	r3, #2
 8001130:	65bb      	str	r3, [r7, #88]	; 0x58
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001132:	2300      	movs	r3, #0
 8001134:	65fb      	str	r3, [r7, #92]	; 0x5c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001136:	2300      	movs	r3, #0
 8001138:	663b      	str	r3, [r7, #96]	; 0x60
    GPIO_InitStruct.Alternate = GPIO_AF9_LTDC;
 800113a:	2309      	movs	r3, #9
 800113c:	667b      	str	r3, [r7, #100]	; 0x64
    HAL_GPIO_Init(GPIOG, &GPIO_InitStruct);
 800113e:	f107 0354 	add.w	r3, r7, #84	; 0x54
 8001142:	4619      	mov	r1, r3
 8001144:	480c      	ldr	r0, [pc, #48]	; (8001178 <HAL_LTDC_MspInit+0x254>)
 8001146:	f000 ffb9 	bl	80020bc <HAL_GPIO_Init>

    /* LTDC interrupt Init */
    HAL_NVIC_SetPriority(LTDC_IRQn, 5, 0);
 800114a:	2200      	movs	r2, #0
 800114c:	2105      	movs	r1, #5
 800114e:	2058      	movs	r0, #88	; 0x58
 8001150:	f000 fd82 	bl	8001c58 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(LTDC_IRQn);
 8001154:	2058      	movs	r0, #88	; 0x58
 8001156:	f000 fd9b 	bl	8001c90 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN LTDC_MspInit 1 */

  /* USER CODE END LTDC_MspInit 1 */
  }

}
 800115a:	bf00      	nop
 800115c:	3768      	adds	r7, #104	; 0x68
 800115e:	46bd      	mov	sp, r7
 8001160:	bd80      	pop	{r7, pc}
 8001162:	bf00      	nop
 8001164:	40016800 	.word	0x40016800
 8001168:	40023800 	.word	0x40023800
 800116c:	40021400 	.word	0x40021400
 8001170:	40020000 	.word	0x40020000
 8001174:	40020400 	.word	0x40020400
 8001178:	40021800 	.word	0x40021800
 800117c:	40020800 	.word	0x40020800
 8001180:	40020c00 	.word	0x40020c00

08001184 <HAL_SPI_MspInit>:
* This function configures the hardware resources used in this example
* @param hspi: SPI handle pointer
* @retval None
*/
void HAL_SPI_MspInit(SPI_HandleTypeDef* hspi)
{
 8001184:	b580      	push	{r7, lr}
 8001186:	b08a      	sub	sp, #40	; 0x28
 8001188:	af00      	add	r7, sp, #0
 800118a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800118c:	f107 0314 	add.w	r3, r7, #20
 8001190:	2200      	movs	r2, #0
 8001192:	601a      	str	r2, [r3, #0]
 8001194:	605a      	str	r2, [r3, #4]
 8001196:	609a      	str	r2, [r3, #8]
 8001198:	60da      	str	r2, [r3, #12]
 800119a:	611a      	str	r2, [r3, #16]
  if(hspi->Instance==SPI5)
 800119c:	687b      	ldr	r3, [r7, #4]
 800119e:	681b      	ldr	r3, [r3, #0]
 80011a0:	4a19      	ldr	r2, [pc, #100]	; (8001208 <HAL_SPI_MspInit+0x84>)
 80011a2:	4293      	cmp	r3, r2
 80011a4:	d12c      	bne.n	8001200 <HAL_SPI_MspInit+0x7c>
  {
  /* USER CODE BEGIN SPI5_MspInit 0 */

  /* USER CODE END SPI5_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_SPI5_CLK_ENABLE();
 80011a6:	2300      	movs	r3, #0
 80011a8:	613b      	str	r3, [r7, #16]
 80011aa:	4b18      	ldr	r3, [pc, #96]	; (800120c <HAL_SPI_MspInit+0x88>)
 80011ac:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80011ae:	4a17      	ldr	r2, [pc, #92]	; (800120c <HAL_SPI_MspInit+0x88>)
 80011b0:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 80011b4:	6453      	str	r3, [r2, #68]	; 0x44
 80011b6:	4b15      	ldr	r3, [pc, #84]	; (800120c <HAL_SPI_MspInit+0x88>)
 80011b8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80011ba:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 80011be:	613b      	str	r3, [r7, #16]
 80011c0:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOF_CLK_ENABLE();
 80011c2:	2300      	movs	r3, #0
 80011c4:	60fb      	str	r3, [r7, #12]
 80011c6:	4b11      	ldr	r3, [pc, #68]	; (800120c <HAL_SPI_MspInit+0x88>)
 80011c8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80011ca:	4a10      	ldr	r2, [pc, #64]	; (800120c <HAL_SPI_MspInit+0x88>)
 80011cc:	f043 0320 	orr.w	r3, r3, #32
 80011d0:	6313      	str	r3, [r2, #48]	; 0x30
 80011d2:	4b0e      	ldr	r3, [pc, #56]	; (800120c <HAL_SPI_MspInit+0x88>)
 80011d4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80011d6:	f003 0320 	and.w	r3, r3, #32
 80011da:	60fb      	str	r3, [r7, #12]
 80011dc:	68fb      	ldr	r3, [r7, #12]
    /**SPI5 GPIO Configuration
    PF7     ------> SPI5_SCK
    PF8     ------> SPI5_MISO
    PF9     ------> SPI5_MOSI
    */
    GPIO_InitStruct.Pin = SPI5_SCK_Pin|SPI5_MISO_Pin|SPI5_MOSI_Pin;
 80011de:	f44f 7360 	mov.w	r3, #896	; 0x380
 80011e2:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80011e4:	2302      	movs	r3, #2
 80011e6:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80011e8:	2300      	movs	r3, #0
 80011ea:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80011ec:	2300      	movs	r3, #0
 80011ee:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI5;
 80011f0:	2305      	movs	r3, #5
 80011f2:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOF, &GPIO_InitStruct);
 80011f4:	f107 0314 	add.w	r3, r7, #20
 80011f8:	4619      	mov	r1, r3
 80011fa:	4805      	ldr	r0, [pc, #20]	; (8001210 <HAL_SPI_MspInit+0x8c>)
 80011fc:	f000 ff5e 	bl	80020bc <HAL_GPIO_Init>
  /* USER CODE BEGIN SPI5_MspInit 1 */

  /* USER CODE END SPI5_MspInit 1 */
  }

}
 8001200:	bf00      	nop
 8001202:	3728      	adds	r7, #40	; 0x28
 8001204:	46bd      	mov	sp, r7
 8001206:	bd80      	pop	{r7, pc}
 8001208:	40015000 	.word	0x40015000
 800120c:	40023800 	.word	0x40023800
 8001210:	40021400 	.word	0x40021400

08001214 <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 8001214:	b480      	push	{r7}
 8001216:	b085      	sub	sp, #20
 8001218:	af00      	add	r7, sp, #0
 800121a:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM1)
 800121c:	687b      	ldr	r3, [r7, #4]
 800121e:	681b      	ldr	r3, [r3, #0]
 8001220:	4a0b      	ldr	r2, [pc, #44]	; (8001250 <HAL_TIM_Base_MspInit+0x3c>)
 8001222:	4293      	cmp	r3, r2
 8001224:	d10d      	bne.n	8001242 <HAL_TIM_Base_MspInit+0x2e>
  {
  /* USER CODE BEGIN TIM1_MspInit 0 */

  /* USER CODE END TIM1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM1_CLK_ENABLE();
 8001226:	2300      	movs	r3, #0
 8001228:	60fb      	str	r3, [r7, #12]
 800122a:	4b0a      	ldr	r3, [pc, #40]	; (8001254 <HAL_TIM_Base_MspInit+0x40>)
 800122c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800122e:	4a09      	ldr	r2, [pc, #36]	; (8001254 <HAL_TIM_Base_MspInit+0x40>)
 8001230:	f043 0301 	orr.w	r3, r3, #1
 8001234:	6453      	str	r3, [r2, #68]	; 0x44
 8001236:	4b07      	ldr	r3, [pc, #28]	; (8001254 <HAL_TIM_Base_MspInit+0x40>)
 8001238:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800123a:	f003 0301 	and.w	r3, r3, #1
 800123e:	60fb      	str	r3, [r7, #12]
 8001240:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN TIM1_MspInit 1 */

  /* USER CODE END TIM1_MspInit 1 */
  }

}
 8001242:	bf00      	nop
 8001244:	3714      	adds	r7, #20
 8001246:	46bd      	mov	sp, r7
 8001248:	f85d 7b04 	ldr.w	r7, [sp], #4
 800124c:	4770      	bx	lr
 800124e:	bf00      	nop
 8001250:	40010000 	.word	0x40010000
 8001254:	40023800 	.word	0x40023800

08001258 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8001258:	b580      	push	{r7, lr}
 800125a:	b08a      	sub	sp, #40	; 0x28
 800125c:	af00      	add	r7, sp, #0
 800125e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001260:	f107 0314 	add.w	r3, r7, #20
 8001264:	2200      	movs	r2, #0
 8001266:	601a      	str	r2, [r3, #0]
 8001268:	605a      	str	r2, [r3, #4]
 800126a:	609a      	str	r2, [r3, #8]
 800126c:	60da      	str	r2, [r3, #12]
 800126e:	611a      	str	r2, [r3, #16]
  if(huart->Instance==USART1)
 8001270:	687b      	ldr	r3, [r7, #4]
 8001272:	681b      	ldr	r3, [r3, #0]
 8001274:	4a19      	ldr	r2, [pc, #100]	; (80012dc <HAL_UART_MspInit+0x84>)
 8001276:	4293      	cmp	r3, r2
 8001278:	d12c      	bne.n	80012d4 <HAL_UART_MspInit+0x7c>
  {
  /* USER CODE BEGIN USART1_MspInit 0 */

  /* USER CODE END USART1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART1_CLK_ENABLE();
 800127a:	2300      	movs	r3, #0
 800127c:	613b      	str	r3, [r7, #16]
 800127e:	4b18      	ldr	r3, [pc, #96]	; (80012e0 <HAL_UART_MspInit+0x88>)
 8001280:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001282:	4a17      	ldr	r2, [pc, #92]	; (80012e0 <HAL_UART_MspInit+0x88>)
 8001284:	f043 0310 	orr.w	r3, r3, #16
 8001288:	6453      	str	r3, [r2, #68]	; 0x44
 800128a:	4b15      	ldr	r3, [pc, #84]	; (80012e0 <HAL_UART_MspInit+0x88>)
 800128c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800128e:	f003 0310 	and.w	r3, r3, #16
 8001292:	613b      	str	r3, [r7, #16]
 8001294:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001296:	2300      	movs	r3, #0
 8001298:	60fb      	str	r3, [r7, #12]
 800129a:	4b11      	ldr	r3, [pc, #68]	; (80012e0 <HAL_UART_MspInit+0x88>)
 800129c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800129e:	4a10      	ldr	r2, [pc, #64]	; (80012e0 <HAL_UART_MspInit+0x88>)
 80012a0:	f043 0301 	orr.w	r3, r3, #1
 80012a4:	6313      	str	r3, [r2, #48]	; 0x30
 80012a6:	4b0e      	ldr	r3, [pc, #56]	; (80012e0 <HAL_UART_MspInit+0x88>)
 80012a8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80012aa:	f003 0301 	and.w	r3, r3, #1
 80012ae:	60fb      	str	r3, [r7, #12]
 80012b0:	68fb      	ldr	r3, [r7, #12]
    /**USART1 GPIO Configuration
    PA9     ------> USART1_TX
    PA10     ------> USART1_RX
    */
    GPIO_InitStruct.Pin = STLINK_RX_Pin|STLINK_TX_Pin;
 80012b2:	f44f 63c0 	mov.w	r3, #1536	; 0x600
 80012b6:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80012b8:	2302      	movs	r3, #2
 80012ba:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80012bc:	2300      	movs	r3, #0
 80012be:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80012c0:	2303      	movs	r3, #3
 80012c2:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF7_USART1;
 80012c4:	2307      	movs	r3, #7
 80012c6:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80012c8:	f107 0314 	add.w	r3, r7, #20
 80012cc:	4619      	mov	r1, r3
 80012ce:	4805      	ldr	r0, [pc, #20]	; (80012e4 <HAL_UART_MspInit+0x8c>)
 80012d0:	f000 fef4 	bl	80020bc <HAL_GPIO_Init>
  /* USER CODE BEGIN USART1_MspInit 1 */

  /* USER CODE END USART1_MspInit 1 */
  }

}
 80012d4:	bf00      	nop
 80012d6:	3728      	adds	r7, #40	; 0x28
 80012d8:	46bd      	mov	sp, r7
 80012da:	bd80      	pop	{r7, pc}
 80012dc:	40011000 	.word	0x40011000
 80012e0:	40023800 	.word	0x40023800
 80012e4:	40020000 	.word	0x40020000

080012e8 <HAL_FMC_MspInit>:

}

static uint32_t FMC_Initialized = 0;

static void HAL_FMC_MspInit(void){
 80012e8:	b580      	push	{r7, lr}
 80012ea:	b086      	sub	sp, #24
 80012ec:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN FMC_MspInit 0 */

  /* USER CODE END FMC_MspInit 0 */
  GPIO_InitTypeDef GPIO_InitStruct ={0};
 80012ee:	1d3b      	adds	r3, r7, #4
 80012f0:	2200      	movs	r2, #0
 80012f2:	601a      	str	r2, [r3, #0]
 80012f4:	605a      	str	r2, [r3, #4]
 80012f6:	609a      	str	r2, [r3, #8]
 80012f8:	60da      	str	r2, [r3, #12]
 80012fa:	611a      	str	r2, [r3, #16]
  if (FMC_Initialized) {
 80012fc:	4b3b      	ldr	r3, [pc, #236]	; (80013ec <HAL_FMC_MspInit+0x104>)
 80012fe:	681b      	ldr	r3, [r3, #0]
 8001300:	2b00      	cmp	r3, #0
 8001302:	d16f      	bne.n	80013e4 <HAL_FMC_MspInit+0xfc>
    return;
  }
  FMC_Initialized = 1;
 8001304:	4b39      	ldr	r3, [pc, #228]	; (80013ec <HAL_FMC_MspInit+0x104>)
 8001306:	2201      	movs	r2, #1
 8001308:	601a      	str	r2, [r3, #0]

  /* Peripheral clock enable */
  __HAL_RCC_FMC_CLK_ENABLE();
 800130a:	2300      	movs	r3, #0
 800130c:	603b      	str	r3, [r7, #0]
 800130e:	4b38      	ldr	r3, [pc, #224]	; (80013f0 <HAL_FMC_MspInit+0x108>)
 8001310:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8001312:	4a37      	ldr	r2, [pc, #220]	; (80013f0 <HAL_FMC_MspInit+0x108>)
 8001314:	f043 0301 	orr.w	r3, r3, #1
 8001318:	6393      	str	r3, [r2, #56]	; 0x38
 800131a:	4b35      	ldr	r3, [pc, #212]	; (80013f0 <HAL_FMC_MspInit+0x108>)
 800131c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800131e:	f003 0301 	and.w	r3, r3, #1
 8001322:	603b      	str	r3, [r7, #0]
 8001324:	683b      	ldr	r3, [r7, #0]
  PB5   ------> FMC_SDCKE1
  PB6   ------> FMC_SDNE1
  PE0   ------> FMC_NBL0
  PE1   ------> FMC_NBL1
  */
  GPIO_InitStruct.Pin = A0_Pin|A1_Pin|A2_Pin|A3_Pin
 8001326:	f64f 033f 	movw	r3, #63551	; 0xf83f
 800132a:	607b      	str	r3, [r7, #4]
                          |A4_Pin|A5_Pin|SDNRAS_Pin|A6_Pin
                          |A7_Pin|A8_Pin|A9_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800132c:	2302      	movs	r3, #2
 800132e:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001330:	2300      	movs	r3, #0
 8001332:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001334:	2303      	movs	r3, #3
 8001336:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Alternate = GPIO_AF12_FMC;
 8001338:	230c      	movs	r3, #12
 800133a:	617b      	str	r3, [r7, #20]
  HAL_GPIO_Init(GPIOF, &GPIO_InitStruct);
 800133c:	1d3b      	adds	r3, r7, #4
 800133e:	4619      	mov	r1, r3
 8001340:	482c      	ldr	r0, [pc, #176]	; (80013f4 <HAL_FMC_MspInit+0x10c>)
 8001342:	f000 febb 	bl	80020bc <HAL_GPIO_Init>

  GPIO_InitStruct.Pin = SDNWE_Pin;
 8001346:	2301      	movs	r3, #1
 8001348:	607b      	str	r3, [r7, #4]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800134a:	2302      	movs	r3, #2
 800134c:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800134e:	2300      	movs	r3, #0
 8001350:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001352:	2303      	movs	r3, #3
 8001354:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Alternate = GPIO_AF12_FMC;
 8001356:	230c      	movs	r3, #12
 8001358:	617b      	str	r3, [r7, #20]
  HAL_GPIO_Init(SDNWE_GPIO_Port, &GPIO_InitStruct);
 800135a:	1d3b      	adds	r3, r7, #4
 800135c:	4619      	mov	r1, r3
 800135e:	4826      	ldr	r0, [pc, #152]	; (80013f8 <HAL_FMC_MspInit+0x110>)
 8001360:	f000 feac 	bl	80020bc <HAL_GPIO_Init>

  GPIO_InitStruct.Pin = A10_Pin|A11_Pin|BA0_Pin|BA1_Pin
 8001364:	f248 1333 	movw	r3, #33075	; 0x8133
 8001368:	607b      	str	r3, [r7, #4]
                          |SDCLK_Pin|SDNCAS_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800136a:	2302      	movs	r3, #2
 800136c:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800136e:	2300      	movs	r3, #0
 8001370:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001372:	2303      	movs	r3, #3
 8001374:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Alternate = GPIO_AF12_FMC;
 8001376:	230c      	movs	r3, #12
 8001378:	617b      	str	r3, [r7, #20]
  HAL_GPIO_Init(GPIOG, &GPIO_InitStruct);
 800137a:	1d3b      	adds	r3, r7, #4
 800137c:	4619      	mov	r1, r3
 800137e:	481f      	ldr	r0, [pc, #124]	; (80013fc <HAL_FMC_MspInit+0x114>)
 8001380:	f000 fe9c 	bl	80020bc <HAL_GPIO_Init>

  GPIO_InitStruct.Pin = D4_Pin|D5_Pin|D6_Pin|D7_Pin
 8001384:	f64f 7383 	movw	r3, #65411	; 0xff83
 8001388:	607b      	str	r3, [r7, #4]
                          |D8_Pin|D9_Pin|D10_Pin|D11_Pin
                          |D12_Pin|NBL0_Pin|NBL1_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800138a:	2302      	movs	r3, #2
 800138c:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800138e:	2300      	movs	r3, #0
 8001390:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001392:	2303      	movs	r3, #3
 8001394:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Alternate = GPIO_AF12_FMC;
 8001396:	230c      	movs	r3, #12
 8001398:	617b      	str	r3, [r7, #20]
  HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 800139a:	1d3b      	adds	r3, r7, #4
 800139c:	4619      	mov	r1, r3
 800139e:	4818      	ldr	r0, [pc, #96]	; (8001400 <HAL_FMC_MspInit+0x118>)
 80013a0:	f000 fe8c 	bl	80020bc <HAL_GPIO_Init>

  GPIO_InitStruct.Pin = D13_Pin|D14_Pin|D15_Pin|D0_Pin
 80013a4:	f24c 7303 	movw	r3, #50947	; 0xc703
 80013a8:	607b      	str	r3, [r7, #4]
                          |D1_Pin|D2_Pin|D3_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80013aa:	2302      	movs	r3, #2
 80013ac:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80013ae:	2300      	movs	r3, #0
 80013b0:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80013b2:	2303      	movs	r3, #3
 80013b4:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Alternate = GPIO_AF12_FMC;
 80013b6:	230c      	movs	r3, #12
 80013b8:	617b      	str	r3, [r7, #20]
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 80013ba:	1d3b      	adds	r3, r7, #4
 80013bc:	4619      	mov	r1, r3
 80013be:	4811      	ldr	r0, [pc, #68]	; (8001404 <HAL_FMC_MspInit+0x11c>)
 80013c0:	f000 fe7c 	bl	80020bc <HAL_GPIO_Init>

  GPIO_InitStruct.Pin = SDCKE1_Pin|SDNE1_Pin;
 80013c4:	2360      	movs	r3, #96	; 0x60
 80013c6:	607b      	str	r3, [r7, #4]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80013c8:	2302      	movs	r3, #2
 80013ca:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80013cc:	2300      	movs	r3, #0
 80013ce:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80013d0:	2303      	movs	r3, #3
 80013d2:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Alternate = GPIO_AF12_FMC;
 80013d4:	230c      	movs	r3, #12
 80013d6:	617b      	str	r3, [r7, #20]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80013d8:	1d3b      	adds	r3, r7, #4
 80013da:	4619      	mov	r1, r3
 80013dc:	480a      	ldr	r0, [pc, #40]	; (8001408 <HAL_FMC_MspInit+0x120>)
 80013de:	f000 fe6d 	bl	80020bc <HAL_GPIO_Init>
 80013e2:	e000      	b.n	80013e6 <HAL_FMC_MspInit+0xfe>
    return;
 80013e4:	bf00      	nop

  /* USER CODE BEGIN FMC_MspInit 1 */

  /* USER CODE END FMC_MspInit 1 */
}
 80013e6:	3718      	adds	r7, #24
 80013e8:	46bd      	mov	sp, r7
 80013ea:	bd80      	pop	{r7, pc}
 80013ec:	200002ec 	.word	0x200002ec
 80013f0:	40023800 	.word	0x40023800
 80013f4:	40021400 	.word	0x40021400
 80013f8:	40020800 	.word	0x40020800
 80013fc:	40021800 	.word	0x40021800
 8001400:	40021000 	.word	0x40021000
 8001404:	40020c00 	.word	0x40020c00
 8001408:	40020400 	.word	0x40020400

0800140c <HAL_SDRAM_MspInit>:

void HAL_SDRAM_MspInit(SDRAM_HandleTypeDef* hsdram){
 800140c:	b580      	push	{r7, lr}
 800140e:	b082      	sub	sp, #8
 8001410:	af00      	add	r7, sp, #0
 8001412:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN SDRAM_MspInit 0 */

  /* USER CODE END SDRAM_MspInit 0 */
  HAL_FMC_MspInit();
 8001414:	f7ff ff68 	bl	80012e8 <HAL_FMC_MspInit>
  /* USER CODE BEGIN SDRAM_MspInit 1 */

  /* USER CODE END SDRAM_MspInit 1 */
}
 8001418:	bf00      	nop
 800141a:	3708      	adds	r7, #8
 800141c:	46bd      	mov	sp, r7
 800141e:	bd80      	pop	{r7, pc}

08001420 <HAL_InitTick>:
  *         reset by HAL_Init() or at any time when clock is configured, by HAL_RCC_ClockConfig().
  * @param  TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8001420:	b580      	push	{r7, lr}
 8001422:	b08e      	sub	sp, #56	; 0x38
 8001424:	af00      	add	r7, sp, #0
 8001426:	6078      	str	r0, [r7, #4]
  RCC_ClkInitTypeDef    clkconfig;
  uint32_t              uwTimclock, uwAPB1Prescaler = 0U;
 8001428:	2300      	movs	r3, #0
 800142a:	62fb      	str	r3, [r7, #44]	; 0x2c

  uint32_t              uwPrescalerValue = 0U;
 800142c:	2300      	movs	r3, #0
 800142e:	62bb      	str	r3, [r7, #40]	; 0x28
  uint32_t              pFLatency;
  HAL_StatusTypeDef     status;

  /* Enable TIM6 clock */
  __HAL_RCC_TIM6_CLK_ENABLE();
 8001430:	2300      	movs	r3, #0
 8001432:	60fb      	str	r3, [r7, #12]
 8001434:	4b33      	ldr	r3, [pc, #204]	; (8001504 <HAL_InitTick+0xe4>)
 8001436:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001438:	4a32      	ldr	r2, [pc, #200]	; (8001504 <HAL_InitTick+0xe4>)
 800143a:	f043 0310 	orr.w	r3, r3, #16
 800143e:	6413      	str	r3, [r2, #64]	; 0x40
 8001440:	4b30      	ldr	r3, [pc, #192]	; (8001504 <HAL_InitTick+0xe4>)
 8001442:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001444:	f003 0310 	and.w	r3, r3, #16
 8001448:	60fb      	str	r3, [r7, #12]
 800144a:	68fb      	ldr	r3, [r7, #12]

  /* Get clock configuration */
  HAL_RCC_GetClockConfig(&clkconfig, &pFLatency);
 800144c:	f107 0210 	add.w	r2, r7, #16
 8001450:	f107 0314 	add.w	r3, r7, #20
 8001454:	4611      	mov	r1, r2
 8001456:	4618      	mov	r0, r3
 8001458:	f003 fae0 	bl	8004a1c <HAL_RCC_GetClockConfig>

  /* Get APB1 prescaler */
  uwAPB1Prescaler = clkconfig.APB1CLKDivider;
 800145c:	6a3b      	ldr	r3, [r7, #32]
 800145e:	62fb      	str	r3, [r7, #44]	; 0x2c
  /* Compute TIM6 clock */
  if (uwAPB1Prescaler == RCC_HCLK_DIV1)
 8001460:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8001462:	2b00      	cmp	r3, #0
 8001464:	d103      	bne.n	800146e <HAL_InitTick+0x4e>
  {
    uwTimclock = HAL_RCC_GetPCLK1Freq();
 8001466:	f003 fab1 	bl	80049cc <HAL_RCC_GetPCLK1Freq>
 800146a:	6378      	str	r0, [r7, #52]	; 0x34
 800146c:	e004      	b.n	8001478 <HAL_InitTick+0x58>
  }
  else
  {
    uwTimclock = 2UL * HAL_RCC_GetPCLK1Freq();
 800146e:	f003 faad 	bl	80049cc <HAL_RCC_GetPCLK1Freq>
 8001472:	4603      	mov	r3, r0
 8001474:	005b      	lsls	r3, r3, #1
 8001476:	637b      	str	r3, [r7, #52]	; 0x34
  }

  /* Compute the prescaler value to have TIM6 counter clock equal to 1MHz */
  uwPrescalerValue = (uint32_t) ((uwTimclock / 1000000U) - 1U);
 8001478:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800147a:	4a23      	ldr	r2, [pc, #140]	; (8001508 <HAL_InitTick+0xe8>)
 800147c:	fba2 2303 	umull	r2, r3, r2, r3
 8001480:	0c9b      	lsrs	r3, r3, #18
 8001482:	3b01      	subs	r3, #1
 8001484:	62bb      	str	r3, [r7, #40]	; 0x28

  /* Initialize TIM6 */
  htim6.Instance = TIM6;
 8001486:	4b21      	ldr	r3, [pc, #132]	; (800150c <HAL_InitTick+0xec>)
 8001488:	4a21      	ldr	r2, [pc, #132]	; (8001510 <HAL_InitTick+0xf0>)
 800148a:	601a      	str	r2, [r3, #0]
  + Period = [(TIM6CLK/1000) - 1]. to have a (1/1000) s time base.
  + Prescaler = (uwTimclock/1000000 - 1) to have a 1MHz counter clock.
  + ClockDivision = 0
  + Counter direction = Up
  */
  htim6.Init.Period = (1000000U / 1000U) - 1U;
 800148c:	4b1f      	ldr	r3, [pc, #124]	; (800150c <HAL_InitTick+0xec>)
 800148e:	f240 32e7 	movw	r2, #999	; 0x3e7
 8001492:	60da      	str	r2, [r3, #12]
  htim6.Init.Prescaler = uwPrescalerValue;
 8001494:	4a1d      	ldr	r2, [pc, #116]	; (800150c <HAL_InitTick+0xec>)
 8001496:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8001498:	6053      	str	r3, [r2, #4]
  htim6.Init.ClockDivision = 0;
 800149a:	4b1c      	ldr	r3, [pc, #112]	; (800150c <HAL_InitTick+0xec>)
 800149c:	2200      	movs	r2, #0
 800149e:	611a      	str	r2, [r3, #16]
  htim6.Init.CounterMode = TIM_COUNTERMODE_UP;
 80014a0:	4b1a      	ldr	r3, [pc, #104]	; (800150c <HAL_InitTick+0xec>)
 80014a2:	2200      	movs	r2, #0
 80014a4:	609a      	str	r2, [r3, #8]
  htim6.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 80014a6:	4b19      	ldr	r3, [pc, #100]	; (800150c <HAL_InitTick+0xec>)
 80014a8:	2200      	movs	r2, #0
 80014aa:	619a      	str	r2, [r3, #24]

  status = HAL_TIM_Base_Init(&htim6);
 80014ac:	4817      	ldr	r0, [pc, #92]	; (800150c <HAL_InitTick+0xec>)
 80014ae:	f003 fd64 	bl	8004f7a <HAL_TIM_Base_Init>
 80014b2:	4603      	mov	r3, r0
 80014b4:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
  if (status == HAL_OK)
 80014b8:	f897 3033 	ldrb.w	r3, [r7, #51]	; 0x33
 80014bc:	2b00      	cmp	r3, #0
 80014be:	d11b      	bne.n	80014f8 <HAL_InitTick+0xd8>
  {
    /* Start the TIM time Base generation in interrupt mode */
    status = HAL_TIM_Base_Start_IT(&htim6);
 80014c0:	4812      	ldr	r0, [pc, #72]	; (800150c <HAL_InitTick+0xec>)
 80014c2:	f003 fda9 	bl	8005018 <HAL_TIM_Base_Start_IT>
 80014c6:	4603      	mov	r3, r0
 80014c8:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
    if (status == HAL_OK)
 80014cc:	f897 3033 	ldrb.w	r3, [r7, #51]	; 0x33
 80014d0:	2b00      	cmp	r3, #0
 80014d2:	d111      	bne.n	80014f8 <HAL_InitTick+0xd8>
    {
    /* Enable the TIM6 global Interrupt */
        HAL_NVIC_EnableIRQ(TIM6_DAC_IRQn);
 80014d4:	2036      	movs	r0, #54	; 0x36
 80014d6:	f000 fbdb 	bl	8001c90 <HAL_NVIC_EnableIRQ>
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 80014da:	687b      	ldr	r3, [r7, #4]
 80014dc:	2b0f      	cmp	r3, #15
 80014de:	d808      	bhi.n	80014f2 <HAL_InitTick+0xd2>
      {
        /* Configure the TIM IRQ priority */
        HAL_NVIC_SetPriority(TIM6_DAC_IRQn, TickPriority, 0U);
 80014e0:	2200      	movs	r2, #0
 80014e2:	6879      	ldr	r1, [r7, #4]
 80014e4:	2036      	movs	r0, #54	; 0x36
 80014e6:	f000 fbb7 	bl	8001c58 <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 80014ea:	4a0a      	ldr	r2, [pc, #40]	; (8001514 <HAL_InitTick+0xf4>)
 80014ec:	687b      	ldr	r3, [r7, #4]
 80014ee:	6013      	str	r3, [r2, #0]
 80014f0:	e002      	b.n	80014f8 <HAL_InitTick+0xd8>
      }
      else
      {
        status = HAL_ERROR;
 80014f2:	2301      	movs	r3, #1
 80014f4:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
      }
    }
  }

 /* Return function status */
  return status;
 80014f8:	f897 3033 	ldrb.w	r3, [r7, #51]	; 0x33
}
 80014fc:	4618      	mov	r0, r3
 80014fe:	3738      	adds	r7, #56	; 0x38
 8001500:	46bd      	mov	sp, r7
 8001502:	bd80      	pop	{r7, pc}
 8001504:	40023800 	.word	0x40023800
 8001508:	431bde83 	.word	0x431bde83
 800150c:	200002f0 	.word	0x200002f0
 8001510:	40001000 	.word	0x40001000
 8001514:	20000004 	.word	0x20000004

08001518 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8001518:	b480      	push	{r7}
 800151a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 800151c:	e7fe      	b.n	800151c <NMI_Handler+0x4>

0800151e <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 800151e:	b480      	push	{r7}
 8001520:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8001522:	e7fe      	b.n	8001522 <HardFault_Handler+0x4>

08001524 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8001524:	b480      	push	{r7}
 8001526:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8001528:	e7fe      	b.n	8001528 <MemManage_Handler+0x4>

0800152a <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 800152a:	b480      	push	{r7}
 800152c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 800152e:	e7fe      	b.n	800152e <BusFault_Handler+0x4>

08001530 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8001530:	b480      	push	{r7}
 8001532:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8001534:	e7fe      	b.n	8001534 <UsageFault_Handler+0x4>

08001536 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8001536:	b480      	push	{r7}
 8001538:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 800153a:	bf00      	nop
 800153c:	46bd      	mov	sp, r7
 800153e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001542:	4770      	bx	lr

08001544 <TIM6_DAC_IRQHandler>:

/**
  * @brief This function handles TIM6 global interrupt, DAC1 and DAC2 underrun error interrupts.
  */
void TIM6_DAC_IRQHandler(void)
{
 8001544:	b580      	push	{r7, lr}
 8001546:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM6_DAC_IRQn 0 */

  /* USER CODE END TIM6_DAC_IRQn 0 */
  HAL_TIM_IRQHandler(&htim6);
 8001548:	4802      	ldr	r0, [pc, #8]	; (8001554 <TIM6_DAC_IRQHandler+0x10>)
 800154a:	f003 fdd5 	bl	80050f8 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM6_DAC_IRQn 1 */

  /* USER CODE END TIM6_DAC_IRQn 1 */
}
 800154e:	bf00      	nop
 8001550:	bd80      	pop	{r7, pc}
 8001552:	bf00      	nop
 8001554:	200002f0 	.word	0x200002f0

08001558 <OTG_HS_IRQHandler>:

/**
  * @brief This function handles USB On The Go HS global interrupt.
  */
void OTG_HS_IRQHandler(void)
{
 8001558:	b580      	push	{r7, lr}
 800155a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN OTG_HS_IRQn 0 */

  /* USER CODE END OTG_HS_IRQn 0 */
  HAL_HCD_IRQHandler(&hhcd_USB_OTG_HS);
 800155c:	4802      	ldr	r0, [pc, #8]	; (8001568 <OTG_HS_IRQHandler+0x10>)
 800155e:	f000 ff72 	bl	8002446 <HAL_HCD_IRQHandler>
  /* USER CODE BEGIN OTG_HS_IRQn 1 */

  /* USER CODE END OTG_HS_IRQn 1 */
}
 8001562:	bf00      	nop
 8001564:	bd80      	pop	{r7, pc}
 8001566:	bf00      	nop
 8001568:	200090d8 	.word	0x200090d8

0800156c <LTDC_IRQHandler>:

/**
  * @brief This function handles LTDC global interrupt.
  */
void LTDC_IRQHandler(void)
{
 800156c:	b580      	push	{r7, lr}
 800156e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN LTDC_IRQn 0 */

  /* USER CODE END LTDC_IRQn 0 */
  HAL_LTDC_IRQHandler(&hltdc);
 8001570:	4802      	ldr	r0, [pc, #8]	; (800157c <LTDC_IRQHandler+0x10>)
 8001572:	f002 fb23 	bl	8003bbc <HAL_LTDC_IRQHandler>
  /* USER CODE BEGIN LTDC_IRQn 1 */

  /* USER CODE END LTDC_IRQn 1 */
}
 8001576:	bf00      	nop
 8001578:	bd80      	pop	{r7, pc}
 800157a:	bf00      	nop
 800157c:	2000012c 	.word	0x2000012c

08001580 <DMA2D_IRQHandler>:

/**
  * @brief This function handles DMA2D global interrupt.
  */
void DMA2D_IRQHandler(void)
{
 8001580:	b580      	push	{r7, lr}
 8001582:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA2D_IRQn 0 */

  /* USER CODE END DMA2D_IRQn 0 */
  HAL_DMA2D_IRQHandler(&hdma2d);
 8001584:	4802      	ldr	r0, [pc, #8]	; (8001590 <DMA2D_IRQHandler+0x10>)
 8001586:	f000 fbf6 	bl	8001d76 <HAL_DMA2D_IRQHandler>
  /* USER CODE BEGIN DMA2D_IRQn 1 */

  /* USER CODE END DMA2D_IRQn 1 */
}
 800158a:	bf00      	nop
 800158c:	bd80      	pop	{r7, pc}
 800158e:	bf00      	nop
 8001590:	20000098 	.word	0x20000098

08001594 <_read>:
  _kill(status, -1);
  while (1) {}    /* Make sure we hang here */
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 8001594:	b580      	push	{r7, lr}
 8001596:	b086      	sub	sp, #24
 8001598:	af00      	add	r7, sp, #0
 800159a:	60f8      	str	r0, [r7, #12]
 800159c:	60b9      	str	r1, [r7, #8]
 800159e:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 80015a0:	2300      	movs	r3, #0
 80015a2:	617b      	str	r3, [r7, #20]
 80015a4:	e00a      	b.n	80015bc <_read+0x28>
  {
    *ptr++ = __io_getchar();
 80015a6:	f3af 8000 	nop.w
 80015aa:	4601      	mov	r1, r0
 80015ac:	68bb      	ldr	r3, [r7, #8]
 80015ae:	1c5a      	adds	r2, r3, #1
 80015b0:	60ba      	str	r2, [r7, #8]
 80015b2:	b2ca      	uxtb	r2, r1
 80015b4:	701a      	strb	r2, [r3, #0]
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 80015b6:	697b      	ldr	r3, [r7, #20]
 80015b8:	3301      	adds	r3, #1
 80015ba:	617b      	str	r3, [r7, #20]
 80015bc:	697a      	ldr	r2, [r7, #20]
 80015be:	687b      	ldr	r3, [r7, #4]
 80015c0:	429a      	cmp	r2, r3
 80015c2:	dbf0      	blt.n	80015a6 <_read+0x12>
  }

  return len;
 80015c4:	687b      	ldr	r3, [r7, #4]
}
 80015c6:	4618      	mov	r0, r3
 80015c8:	3718      	adds	r7, #24
 80015ca:	46bd      	mov	sp, r7
 80015cc:	bd80      	pop	{r7, pc}

080015ce <_close>:
  }
  return len;
}

int _close(int file)
{
 80015ce:	b480      	push	{r7}
 80015d0:	b083      	sub	sp, #12
 80015d2:	af00      	add	r7, sp, #0
 80015d4:	6078      	str	r0, [r7, #4]
  (void)file;
  return -1;
 80015d6:	f04f 33ff 	mov.w	r3, #4294967295
}
 80015da:	4618      	mov	r0, r3
 80015dc:	370c      	adds	r7, #12
 80015de:	46bd      	mov	sp, r7
 80015e0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80015e4:	4770      	bx	lr

080015e6 <_fstat>:


int _fstat(int file, struct stat *st)
{
 80015e6:	b480      	push	{r7}
 80015e8:	b083      	sub	sp, #12
 80015ea:	af00      	add	r7, sp, #0
 80015ec:	6078      	str	r0, [r7, #4]
 80015ee:	6039      	str	r1, [r7, #0]
  (void)file;
  st->st_mode = S_IFCHR;
 80015f0:	683b      	ldr	r3, [r7, #0]
 80015f2:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 80015f6:	605a      	str	r2, [r3, #4]
  return 0;
 80015f8:	2300      	movs	r3, #0
}
 80015fa:	4618      	mov	r0, r3
 80015fc:	370c      	adds	r7, #12
 80015fe:	46bd      	mov	sp, r7
 8001600:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001604:	4770      	bx	lr

08001606 <_isatty>:

int _isatty(int file)
{
 8001606:	b480      	push	{r7}
 8001608:	b083      	sub	sp, #12
 800160a:	af00      	add	r7, sp, #0
 800160c:	6078      	str	r0, [r7, #4]
  (void)file;
  return 1;
 800160e:	2301      	movs	r3, #1
}
 8001610:	4618      	mov	r0, r3
 8001612:	370c      	adds	r7, #12
 8001614:	46bd      	mov	sp, r7
 8001616:	f85d 7b04 	ldr.w	r7, [sp], #4
 800161a:	4770      	bx	lr

0800161c <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 800161c:	b480      	push	{r7}
 800161e:	b085      	sub	sp, #20
 8001620:	af00      	add	r7, sp, #0
 8001622:	60f8      	str	r0, [r7, #12]
 8001624:	60b9      	str	r1, [r7, #8]
 8001626:	607a      	str	r2, [r7, #4]
  (void)file;
  (void)ptr;
  (void)dir;
  return 0;
 8001628:	2300      	movs	r3, #0
}
 800162a:	4618      	mov	r0, r3
 800162c:	3714      	adds	r7, #20
 800162e:	46bd      	mov	sp, r7
 8001630:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001634:	4770      	bx	lr
	...

08001638 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8001638:	b580      	push	{r7, lr}
 800163a:	b086      	sub	sp, #24
 800163c:	af00      	add	r7, sp, #0
 800163e:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8001640:	4a14      	ldr	r2, [pc, #80]	; (8001694 <_sbrk+0x5c>)
 8001642:	4b15      	ldr	r3, [pc, #84]	; (8001698 <_sbrk+0x60>)
 8001644:	1ad3      	subs	r3, r2, r3
 8001646:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8001648:	697b      	ldr	r3, [r7, #20]
 800164a:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 800164c:	4b13      	ldr	r3, [pc, #76]	; (800169c <_sbrk+0x64>)
 800164e:	681b      	ldr	r3, [r3, #0]
 8001650:	2b00      	cmp	r3, #0
 8001652:	d102      	bne.n	800165a <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8001654:	4b11      	ldr	r3, [pc, #68]	; (800169c <_sbrk+0x64>)
 8001656:	4a12      	ldr	r2, [pc, #72]	; (80016a0 <_sbrk+0x68>)
 8001658:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 800165a:	4b10      	ldr	r3, [pc, #64]	; (800169c <_sbrk+0x64>)
 800165c:	681a      	ldr	r2, [r3, #0]
 800165e:	687b      	ldr	r3, [r7, #4]
 8001660:	4413      	add	r3, r2
 8001662:	693a      	ldr	r2, [r7, #16]
 8001664:	429a      	cmp	r2, r3
 8001666:	d207      	bcs.n	8001678 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8001668:	f008 f94c 	bl	8009904 <__errno>
 800166c:	4603      	mov	r3, r0
 800166e:	220c      	movs	r2, #12
 8001670:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8001672:	f04f 33ff 	mov.w	r3, #4294967295
 8001676:	e009      	b.n	800168c <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8001678:	4b08      	ldr	r3, [pc, #32]	; (800169c <_sbrk+0x64>)
 800167a:	681b      	ldr	r3, [r3, #0]
 800167c:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 800167e:	4b07      	ldr	r3, [pc, #28]	; (800169c <_sbrk+0x64>)
 8001680:	681a      	ldr	r2, [r3, #0]
 8001682:	687b      	ldr	r3, [r7, #4]
 8001684:	4413      	add	r3, r2
 8001686:	4a05      	ldr	r2, [pc, #20]	; (800169c <_sbrk+0x64>)
 8001688:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 800168a:	68fb      	ldr	r3, [r7, #12]
}
 800168c:	4618      	mov	r0, r3
 800168e:	3718      	adds	r7, #24
 8001690:	46bd      	mov	sp, r7
 8001692:	bd80      	pop	{r7, pc}
 8001694:	20030000 	.word	0x20030000
 8001698:	00000400 	.word	0x00000400
 800169c:	20000338 	.word	0x20000338
 80016a0:	200093f0 	.word	0x200093f0

080016a4 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 80016a4:	b480      	push	{r7}
 80016a6:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 80016a8:	4b06      	ldr	r3, [pc, #24]	; (80016c4 <SystemInit+0x20>)
 80016aa:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80016ae:	4a05      	ldr	r2, [pc, #20]	; (80016c4 <SystemInit+0x20>)
 80016b0:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 80016b4:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 80016b8:	bf00      	nop
 80016ba:	46bd      	mov	sp, r7
 80016bc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80016c0:	4770      	bx	lr
 80016c2:	bf00      	nop
 80016c4:	e000ed00 	.word	0xe000ed00

080016c8 <tm_initialize>:


/* This function called from main performs basic RTOS initialization,
   calls the test initialization function, and then starts the RTOS function. */
void tm_initialize(void (*test_initialization_function)(void))
{
 80016c8:	b580      	push	{r7, lr}
 80016ca:	b082      	sub	sp, #8
 80016cc:	af00      	add	r7, sp, #0
 80016ce:	6078      	str	r0, [r7, #4]
    /* Save the test initialization function. */
    tm_initialization_function = test_initialization_function;
 80016d0:	4a04      	ldr	r2, [pc, #16]	; (80016e4 <tm_initialize+0x1c>)
 80016d2:	687b      	ldr	r3, [r7, #4]
 80016d4:	6013      	str	r3, [r2, #0]

    /* Call the previously defined initialization function. */
    (tm_initialization_function)();
 80016d6:	4b03      	ldr	r3, [pc, #12]	; (80016e4 <tm_initialize+0x1c>)
 80016d8:	681b      	ldr	r3, [r3, #0]
 80016da:	4798      	blx	r3
}
 80016dc:	bf00      	nop
 80016de:	3708      	adds	r7, #8
 80016e0:	46bd      	mov	sp, r7
 80016e2:	bd80      	pop	{r7, pc}
 80016e4:	20000364 	.word	0x20000364

080016e8 <tm_thread_create>:
/* This function takes a thread ID and priority and attempts to create the
   file in the underlying RTOS. Valid priorities range from 1 through 255,
   where 1 is the highest priority and 255 is the lowest. If successful,
   the function should return TM_SUCCESS. Otherwise, TM_ERROR should be returned. */
int tm_thread_create(int thread_id, int priority, void (*entry_function)(void))
{
 80016e8:	b580      	push	{r7, lr}
 80016ea:	b0a6      	sub	sp, #152	; 0x98
 80016ec:	af00      	add	r7, sp, #0
 80016ee:	60f8      	str	r0, [r7, #12]
 80016f0:	60b9      	str	r1, [r7, #8]
 80016f2:	607a      	str	r2, [r7, #4]
	// Remember the actual thread entry.
	   // tm_thread_entry_functions[thread_id] = entry_function;
	    char str[100];
	    sprintf(str, "%d",thread_id);
 80016f4:	f107 0334 	add.w	r3, r7, #52	; 0x34
 80016f8:	68fa      	ldr	r2, [r7, #12]
 80016fa:	4919      	ldr	r1, [pc, #100]	; (8001760 <tm_thread_create+0x78>)
 80016fc:	4618      	mov	r0, r3
 80016fe:	f008 fabf 	bl	8009c80 <siprintf>

	    // Create the thread under CMSIS-RTOS.
	    osThreadAttr_t thread_attr = {
 8001702:	f107 0310 	add.w	r3, r7, #16
 8001706:	2224      	movs	r2, #36	; 0x24
 8001708:	2100      	movs	r1, #0
 800170a:	4618      	mov	r0, r3
 800170c:	f008 f932 	bl	8009974 <memset>
 8001710:	f107 0334 	add.w	r3, r7, #52	; 0x34
 8001714:	613b      	str	r3, [r7, #16]
 8001716:	f44f 6300 	mov.w	r3, #2048	; 0x800
 800171a:	627b      	str	r3, [r7, #36]	; 0x24
 800171c:	68bb      	ldr	r3, [r7, #8]
 800171e:	62bb      	str	r3, [r7, #40]	; 0x28
	        .name = str,
	        //.stack_mem = tm_thread_stack_area[thread_id],
	        .stack_size = 2*1024,
	        .priority = priority
	    };
	    tm_thread_array[thread_id] = osThreadNew((osThreadFunc_t)entry_function, NULL, &thread_attr);
 8001720:	f107 0310 	add.w	r3, r7, #16
 8001724:	461a      	mov	r2, r3
 8001726:	2100      	movs	r1, #0
 8001728:	6878      	ldr	r0, [r7, #4]
 800172a:	f005 f971 	bl	8006a10 <osThreadNew>
 800172e:	4602      	mov	r2, r0
 8001730:	490c      	ldr	r1, [pc, #48]	; (8001764 <tm_thread_create+0x7c>)
 8001732:	68fb      	ldr	r3, [r7, #12]
 8001734:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

	    // Determine if the thread create was successful.
	    if (tm_thread_array[thread_id] != NULL)
 8001738:	4a0a      	ldr	r2, [pc, #40]	; (8001764 <tm_thread_create+0x7c>)
 800173a:	68fb      	ldr	r3, [r7, #12]
 800173c:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001740:	2b00      	cmp	r3, #0
 8001742:	d004      	beq.n	800174e <tm_thread_create+0x66>
	    {
	    	printf("done\r\n");
 8001744:	4808      	ldr	r0, [pc, #32]	; (8001768 <tm_thread_create+0x80>)
 8001746:	f008 fa83 	bl	8009c50 <puts>
	    	return TM_SUCCESS;
 800174a:	2300      	movs	r3, #0
 800174c:	e003      	b.n	8001756 <tm_thread_create+0x6e>
	    }

	    else
	    {
	    	printf("failed\r\n");
 800174e:	4807      	ldr	r0, [pc, #28]	; (800176c <tm_thread_create+0x84>)
 8001750:	f008 fa7e 	bl	8009c50 <puts>
	    	 return TM_ERROR;
 8001754:	2301      	movs	r3, #1
	    }
}
 8001756:	4618      	mov	r0, r3
 8001758:	3798      	adds	r7, #152	; 0x98
 800175a:	46bd      	mov	sp, r7
 800175c:	bd80      	pop	{r7, pc}
 800175e:	bf00      	nop
 8001760:	0800ad40 	.word	0x0800ad40
 8001764:	2000033c 	.word	0x2000033c
 8001768:	0800ad44 	.word	0x0800ad44
 800176c:	0800ad4c 	.word	0x0800ad4c

08001770 <tm_thread_resume>:


/* This function resumes the specified thread.  If successful, the function should
   return TM_SUCCESS. Otherwise, TM_ERROR should be returned.  */
int tm_thread_resume(int thread_id)
{
 8001770:	b580      	push	{r7, lr}
 8001772:	b082      	sub	sp, #8
 8001774:	af00      	add	r7, sp, #0
 8001776:	6078      	str	r0, [r7, #4]
    /* Resume the thread with the specified ID. */
    if (osThreadResume(tm_thread_array[thread_id]) == osOK) {
 8001778:	4a08      	ldr	r2, [pc, #32]	; (800179c <tm_thread_resume+0x2c>)
 800177a:	687b      	ldr	r3, [r7, #4]
 800177c:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001780:	4618      	mov	r0, r3
 8001782:	f005 f9f8 	bl	8006b76 <osThreadResume>
 8001786:	4603      	mov	r3, r0
 8001788:	2b00      	cmp	r3, #0
 800178a:	d101      	bne.n	8001790 <tm_thread_resume+0x20>
        /* Thread resume successful. */
        return TM_SUCCESS;
 800178c:	2300      	movs	r3, #0
 800178e:	e000      	b.n	8001792 <tm_thread_resume+0x22>
    }
    /* Thread resume failed. */
    return TM_ERROR;
 8001790:	2301      	movs	r3, #1
}
 8001792:	4618      	mov	r0, r3
 8001794:	3708      	adds	r7, #8
 8001796:	46bd      	mov	sp, r7
 8001798:	bd80      	pop	{r7, pc}
 800179a:	bf00      	nop
 800179c:	2000033c 	.word	0x2000033c

080017a0 <tm_thread_suspend>:


/* This function suspends the specified thread.  If successful, the function should
   return TM_SUCCESS. Otherwise, TM_ERROR should be returned.  */
int  tm_thread_suspend(int thread_id)
{
 80017a0:	b580      	push	{r7, lr}
 80017a2:	b082      	sub	sp, #8
 80017a4:	af00      	add	r7, sp, #0
 80017a6:	6078      	str	r0, [r7, #4]


	    /* Determine if the thread suspend was successful.  */
	    if (osThreadSuspend(tm_thread_array[thread_id]) == osOK)
 80017a8:	4a08      	ldr	r2, [pc, #32]	; (80017cc <tm_thread_suspend+0x2c>)
 80017aa:	687b      	ldr	r3, [r7, #4]
 80017ac:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80017b0:	4618      	mov	r0, r3
 80017b2:	f005 f9bf 	bl	8006b34 <osThreadSuspend>
 80017b6:	4603      	mov	r3, r0
 80017b8:	2b00      	cmp	r3, #0
 80017ba:	d101      	bne.n	80017c0 <tm_thread_suspend+0x20>
	        return TM_SUCCESS;
 80017bc:	2300      	movs	r3, #0
 80017be:	e000      	b.n	80017c2 <tm_thread_suspend+0x22>
	    else
	        return TM_ERROR;
 80017c0:	2301      	movs	r3, #1
}
 80017c2:	4618      	mov	r0, r3
 80017c4:	3708      	adds	r7, #8
 80017c6:	46bd      	mov	sp, r7
 80017c8:	bd80      	pop	{r7, pc}
 80017ca:	bf00      	nop
 80017cc:	2000033c 	.word	0x2000033c

080017d0 <tm_thread_sleep>:

/* This function suspends the specified thread for the specified number
   of seconds.  If successful, the function should return TM_SUCCESS.
   Otherwise, TM_ERROR should be returned.  */
void tm_thread_sleep(int seconds)
{
 80017d0:	b580      	push	{r7, lr}
 80017d2:	b082      	sub	sp, #8
 80017d4:	af00      	add	r7, sp, #0
 80017d6:	6078      	str	r0, [r7, #4]
	 osDelay(seconds * 1000);
 80017d8:	687b      	ldr	r3, [r7, #4]
 80017da:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 80017de:	fb02 f303 	mul.w	r3, r2, r3
 80017e2:	4618      	mov	r0, r3
 80017e4:	f005 f9e8 	bl	8006bb8 <osDelay>
}
 80017e8:	bf00      	nop
 80017ea:	3708      	adds	r7, #8
 80017ec:	46bd      	mov	sp, r7
 80017ee:	bd80      	pop	{r7, pc}

080017f0 <tm_main>:


/* Define main entry point.  */

void tm_main()
{
 80017f0:	b580      	push	{r7, lr}
 80017f2:	af00      	add	r7, sp, #0

    /* Initialize the test.  */
	printf("****This test is running on the STM32F429I Discovery with CMSIS_RTOS_v2 on top of FreeRTOS **** \n\r");
 80017f4:	4803      	ldr	r0, [pc, #12]	; (8001804 <tm_main+0x14>)
 80017f6:	f008 f9a5 	bl	8009b44 <iprintf>
    tm_initialize(tm_preemptive_scheduling_initialize);
 80017fa:	4803      	ldr	r0, [pc, #12]	; (8001808 <tm_main+0x18>)
 80017fc:	f7ff ff64 	bl	80016c8 <tm_initialize>
}
 8001800:	bf00      	nop
 8001802:	bd80      	pop	{r7, pc}
 8001804:	0800ad54 	.word	0x0800ad54
 8001808:	0800180d 	.word	0x0800180d

0800180c <tm_preemptive_scheduling_initialize>:


/* Define the preemptive scheduling test initialization.  */

void  tm_preemptive_scheduling_initialize(void)
{
 800180c:	b580      	push	{r7, lr}
 800180e:	af00      	add	r7, sp, #0

    /* Create thread 0 at priority 6.  */
    tm_thread_create(0, 6, tm_preemptive_thread_0_entry);
 8001810:	4a12      	ldr	r2, [pc, #72]	; (800185c <tm_preemptive_scheduling_initialize+0x50>)
 8001812:	2106      	movs	r1, #6
 8001814:	2000      	movs	r0, #0
 8001816:	f7ff ff67 	bl	80016e8 <tm_thread_create>

    /* Create thread 1 at priority 7.  */
    tm_thread_create(1, 7, tm_preemptive_thread_1_entry);
 800181a:	4a11      	ldr	r2, [pc, #68]	; (8001860 <tm_preemptive_scheduling_initialize+0x54>)
 800181c:	2107      	movs	r1, #7
 800181e:	2001      	movs	r0, #1
 8001820:	f7ff ff62 	bl	80016e8 <tm_thread_create>

    /* Create thread 2 at priority 8.  */
    tm_thread_create(2, 8, tm_preemptive_thread_2_entry);
 8001824:	4a0f      	ldr	r2, [pc, #60]	; (8001864 <tm_preemptive_scheduling_initialize+0x58>)
 8001826:	2108      	movs	r1, #8
 8001828:	2002      	movs	r0, #2
 800182a:	f7ff ff5d 	bl	80016e8 <tm_thread_create>

    /* Create thread 3 at priority 9.  */
    tm_thread_create(3, 9, tm_preemptive_thread_3_entry);
 800182e:	4a0e      	ldr	r2, [pc, #56]	; (8001868 <tm_preemptive_scheduling_initialize+0x5c>)
 8001830:	2109      	movs	r1, #9
 8001832:	2003      	movs	r0, #3
 8001834:	f7ff ff58 	bl	80016e8 <tm_thread_create>

    /* Create thread 4 at priority 10.  */
    tm_thread_create(4, 10, tm_preemptive_thread_4_entry);
 8001838:	4a0c      	ldr	r2, [pc, #48]	; (800186c <tm_preemptive_scheduling_initialize+0x60>)
 800183a:	210a      	movs	r1, #10
 800183c:	2004      	movs	r0, #4
 800183e:	f7ff ff53 	bl	80016e8 <tm_thread_create>

    /* Resume just thread 0.  */
    tm_thread_resume(0);
 8001842:	2000      	movs	r0, #0
 8001844:	f7ff ff94 	bl	8001770 <tm_thread_resume>

    /* Create the reporting thread. It will preempt the other 
       threads and print out the test results.  */
    tm_thread_create(5, 12, tm_preemptive_thread_report);
 8001848:	4a09      	ldr	r2, [pc, #36]	; (8001870 <tm_preemptive_scheduling_initialize+0x64>)
 800184a:	210c      	movs	r1, #12
 800184c:	2005      	movs	r0, #5
 800184e:	f7ff ff4b 	bl	80016e8 <tm_thread_create>
    tm_thread_resume(5);
 8001852:	2005      	movs	r0, #5
 8001854:	f7ff ff8c 	bl	8001770 <tm_thread_resume>
}
 8001858:	bf00      	nop
 800185a:	bd80      	pop	{r7, pc}
 800185c:	08001875 	.word	0x08001875
 8001860:	08001891 	.word	0x08001891
 8001864:	080018b1 	.word	0x080018b1
 8001868:	080018d1 	.word	0x080018d1
 800186c:	080018f1 	.word	0x080018f1
 8001870:	0800190d 	.word	0x0800190d

08001874 <tm_preemptive_thread_0_entry>:


/* Define the first preemptive thread.  */
void  tm_preemptive_thread_0_entry(void)
{
 8001874:	b580      	push	{r7, lr}
 8001876:	af00      	add	r7, sp, #0

    while(1)
    {

        /* Resume thread 1.  */
        tm_thread_resume(1);
 8001878:	2001      	movs	r0, #1
 800187a:	f7ff ff79 	bl	8001770 <tm_thread_resume>

        /* We won't get back here until threads 1, 2, 3, and 4 all execute and
           self-suspend.  */

        /* Increment this thread's counter.  */
        tm_preemptive_thread_0_counter++;
 800187e:	4b03      	ldr	r3, [pc, #12]	; (800188c <tm_preemptive_thread_0_entry+0x18>)
 8001880:	681b      	ldr	r3, [r3, #0]
 8001882:	3301      	adds	r3, #1
 8001884:	4a01      	ldr	r2, [pc, #4]	; (800188c <tm_preemptive_thread_0_entry+0x18>)
 8001886:	6013      	str	r3, [r2, #0]
        tm_thread_resume(1);
 8001888:	e7f6      	b.n	8001878 <tm_preemptive_thread_0_entry+0x4>
 800188a:	bf00      	nop
 800188c:	20000368 	.word	0x20000368

08001890 <tm_preemptive_thread_1_entry>:
    }
}

/* Define the second preemptive thread.  */
void  tm_preemptive_thread_1_entry(void)
{
 8001890:	b580      	push	{r7, lr}
 8001892:	af00      	add	r7, sp, #0

    while(1)
    {

        /* Resume thread 2.  */
        tm_thread_resume(2);
 8001894:	2002      	movs	r0, #2
 8001896:	f7ff ff6b 	bl	8001770 <tm_thread_resume>

        /* We won't get back here until threads 2, 3, and 4 all execute and
           self-suspend.  */

        /* Increment this thread's counter.  */
        tm_preemptive_thread_1_counter++;
 800189a:	4b04      	ldr	r3, [pc, #16]	; (80018ac <tm_preemptive_thread_1_entry+0x1c>)
 800189c:	681b      	ldr	r3, [r3, #0]
 800189e:	3301      	adds	r3, #1
 80018a0:	4a02      	ldr	r2, [pc, #8]	; (80018ac <tm_preemptive_thread_1_entry+0x1c>)
 80018a2:	6013      	str	r3, [r2, #0]

        /* Suspend self!  */
        tm_thread_suspend(1);
 80018a4:	2001      	movs	r0, #1
 80018a6:	f7ff ff7b 	bl	80017a0 <tm_thread_suspend>
        tm_thread_resume(2);
 80018aa:	e7f3      	b.n	8001894 <tm_preemptive_thread_1_entry+0x4>
 80018ac:	2000036c 	.word	0x2000036c

080018b0 <tm_preemptive_thread_2_entry>:
    }
}

/* Define the third preemptive thread.  */
void  tm_preemptive_thread_2_entry(void)
{
 80018b0:	b580      	push	{r7, lr}
 80018b2:	af00      	add	r7, sp, #0

    while(1)
    {

        /* Resume thread 3.  */
        tm_thread_resume(3);
 80018b4:	2003      	movs	r0, #3
 80018b6:	f7ff ff5b 	bl	8001770 <tm_thread_resume>

        /* We won't get back here until threads 3 and 4 execute and
           self-suspend.  */

        /* Increment this thread's counter.  */
        tm_preemptive_thread_2_counter++;
 80018ba:	4b04      	ldr	r3, [pc, #16]	; (80018cc <tm_preemptive_thread_2_entry+0x1c>)
 80018bc:	681b      	ldr	r3, [r3, #0]
 80018be:	3301      	adds	r3, #1
 80018c0:	4a02      	ldr	r2, [pc, #8]	; (80018cc <tm_preemptive_thread_2_entry+0x1c>)
 80018c2:	6013      	str	r3, [r2, #0]

        /* Suspend self!  */
        tm_thread_suspend(2);
 80018c4:	2002      	movs	r0, #2
 80018c6:	f7ff ff6b 	bl	80017a0 <tm_thread_suspend>
        tm_thread_resume(3);
 80018ca:	e7f3      	b.n	80018b4 <tm_preemptive_thread_2_entry+0x4>
 80018cc:	20000370 	.word	0x20000370

080018d0 <tm_preemptive_thread_3_entry>:
}


/* Define the fourth preemptive thread.  */
void  tm_preemptive_thread_3_entry(void)
{
 80018d0:	b580      	push	{r7, lr}
 80018d2:	af00      	add	r7, sp, #0

    while(1)
    {

        /* Resume thread 4.  */
        tm_thread_resume(4);
 80018d4:	2004      	movs	r0, #4
 80018d6:	f7ff ff4b 	bl	8001770 <tm_thread_resume>

        /* We won't get back here until thread 4 executes and
           self-suspends.  */

        /* Increment this thread's counter.  */
        tm_preemptive_thread_3_counter++;
 80018da:	4b04      	ldr	r3, [pc, #16]	; (80018ec <tm_preemptive_thread_3_entry+0x1c>)
 80018dc:	681b      	ldr	r3, [r3, #0]
 80018de:	3301      	adds	r3, #1
 80018e0:	4a02      	ldr	r2, [pc, #8]	; (80018ec <tm_preemptive_thread_3_entry+0x1c>)
 80018e2:	6013      	str	r3, [r2, #0]

        /* Suspend self!  */
        tm_thread_suspend(3);
 80018e4:	2003      	movs	r0, #3
 80018e6:	f7ff ff5b 	bl	80017a0 <tm_thread_suspend>
        tm_thread_resume(4);
 80018ea:	e7f3      	b.n	80018d4 <tm_preemptive_thread_3_entry+0x4>
 80018ec:	20000374 	.word	0x20000374

080018f0 <tm_preemptive_thread_4_entry>:
}


/* Define the fifth preemptive thread.  */
void  tm_preemptive_thread_4_entry(void)
{
 80018f0:	b580      	push	{r7, lr}
 80018f2:	af00      	add	r7, sp, #0

    while(1)
    {

        /* Increment this thread's counter.  */
        tm_preemptive_thread_4_counter++;
 80018f4:	4b04      	ldr	r3, [pc, #16]	; (8001908 <tm_preemptive_thread_4_entry+0x18>)
 80018f6:	681b      	ldr	r3, [r3, #0]
 80018f8:	3301      	adds	r3, #1
 80018fa:	4a03      	ldr	r2, [pc, #12]	; (8001908 <tm_preemptive_thread_4_entry+0x18>)
 80018fc:	6013      	str	r3, [r2, #0]

        /* Self suspend thread 4.  */
        tm_thread_suspend(4);
 80018fe:	2004      	movs	r0, #4
 8001900:	f7ff ff4e 	bl	80017a0 <tm_thread_suspend>
        tm_preemptive_thread_4_counter++;
 8001904:	e7f6      	b.n	80018f4 <tm_preemptive_thread_4_entry+0x4>
 8001906:	bf00      	nop
 8001908:	20000378 	.word	0x20000378

0800190c <tm_preemptive_thread_report>:
}


/* Define the preemptive test reporting thread.  */
void  tm_preemptive_thread_report(void)
{
 800190c:	b580      	push	{r7, lr}
 800190e:	b084      	sub	sp, #16
 8001910:	af00      	add	r7, sp, #0
unsigned long   last_total;
unsigned long   average;


    /* Initialize the last total.  */
    last_total =  0;
 8001912:	2300      	movs	r3, #0
 8001914:	60bb      	str	r3, [r7, #8]

    /* Initialize the relative time.  */
    relative_time =  0;
 8001916:	2300      	movs	r3, #0
 8001918:	60fb      	str	r3, [r7, #12]

    while(1)
    {

        /* Sleep to allow the test to run.  */
        tm_thread_sleep(TM_TEST_DURATION);
 800191a:	201e      	movs	r0, #30
 800191c:	f7ff ff58 	bl	80017d0 <tm_thread_sleep>

        /* Increment the relative time.  */
        relative_time =  relative_time + TM_TEST_DURATION;
 8001920:	68fb      	ldr	r3, [r7, #12]
 8001922:	331e      	adds	r3, #30
 8001924:	60fb      	str	r3, [r7, #12]

        /* Print results to the stdio window.  */
        printf("**** Thread-Metric Preemptive Scheduling Test **** Relative Time: %lu\n\r", relative_time);
 8001926:	68f9      	ldr	r1, [r7, #12]
 8001928:	4830      	ldr	r0, [pc, #192]	; (80019ec <tm_preemptive_thread_report+0xe0>)
 800192a:	f008 f90b 	bl	8009b44 <iprintf>

        /* Calculate the total of all the counters.  */
        total =  tm_preemptive_thread_0_counter + tm_preemptive_thread_1_counter + tm_preemptive_thread_2_counter
 800192e:	4b30      	ldr	r3, [pc, #192]	; (80019f0 <tm_preemptive_thread_report+0xe4>)
 8001930:	681a      	ldr	r2, [r3, #0]
 8001932:	4b30      	ldr	r3, [pc, #192]	; (80019f4 <tm_preemptive_thread_report+0xe8>)
 8001934:	681b      	ldr	r3, [r3, #0]
 8001936:	441a      	add	r2, r3
 8001938:	4b2f      	ldr	r3, [pc, #188]	; (80019f8 <tm_preemptive_thread_report+0xec>)
 800193a:	681b      	ldr	r3, [r3, #0]
 800193c:	441a      	add	r2, r3
                    + tm_preemptive_thread_3_counter + tm_preemptive_thread_4_counter;
 800193e:	4b2f      	ldr	r3, [pc, #188]	; (80019fc <tm_preemptive_thread_report+0xf0>)
 8001940:	681b      	ldr	r3, [r3, #0]
 8001942:	441a      	add	r2, r3
 8001944:	4b2e      	ldr	r3, [pc, #184]	; (8001a00 <tm_preemptive_thread_report+0xf4>)
 8001946:	681b      	ldr	r3, [r3, #0]
        total =  tm_preemptive_thread_0_counter + tm_preemptive_thread_1_counter + tm_preemptive_thread_2_counter
 8001948:	4413      	add	r3, r2
 800194a:	607b      	str	r3, [r7, #4]

        /* Calculate the average of all the counters.  */
        average =  total/5;
 800194c:	687b      	ldr	r3, [r7, #4]
 800194e:	4a2d      	ldr	r2, [pc, #180]	; (8001a04 <tm_preemptive_thread_report+0xf8>)
 8001950:	fba2 2303 	umull	r2, r3, r2, r3
 8001954:	089b      	lsrs	r3, r3, #2
 8001956:	603b      	str	r3, [r7, #0]

        /* See if there are any errors.  */
        if ((tm_preemptive_thread_0_counter < (average - 1)) || 
 8001958:	683b      	ldr	r3, [r7, #0]
 800195a:	1e5a      	subs	r2, r3, #1
 800195c:	4b24      	ldr	r3, [pc, #144]	; (80019f0 <tm_preemptive_thread_report+0xe4>)
 800195e:	681b      	ldr	r3, [r3, #0]
 8001960:	429a      	cmp	r2, r3
 8001962:	d835      	bhi.n	80019d0 <tm_preemptive_thread_report+0xc4>
            (tm_preemptive_thread_0_counter > (average + 1)) ||
 8001964:	683b      	ldr	r3, [r7, #0]
 8001966:	1c5a      	adds	r2, r3, #1
 8001968:	4b21      	ldr	r3, [pc, #132]	; (80019f0 <tm_preemptive_thread_report+0xe4>)
 800196a:	681b      	ldr	r3, [r3, #0]
        if ((tm_preemptive_thread_0_counter < (average - 1)) || 
 800196c:	429a      	cmp	r2, r3
 800196e:	d32f      	bcc.n	80019d0 <tm_preemptive_thread_report+0xc4>
            (tm_preemptive_thread_1_counter < (average - 1)) || 
 8001970:	683b      	ldr	r3, [r7, #0]
 8001972:	1e5a      	subs	r2, r3, #1
 8001974:	4b1f      	ldr	r3, [pc, #124]	; (80019f4 <tm_preemptive_thread_report+0xe8>)
 8001976:	681b      	ldr	r3, [r3, #0]
            (tm_preemptive_thread_0_counter > (average + 1)) ||
 8001978:	429a      	cmp	r2, r3
 800197a:	d829      	bhi.n	80019d0 <tm_preemptive_thread_report+0xc4>
            (tm_preemptive_thread_1_counter > (average + 1)) ||
 800197c:	683b      	ldr	r3, [r7, #0]
 800197e:	1c5a      	adds	r2, r3, #1
 8001980:	4b1c      	ldr	r3, [pc, #112]	; (80019f4 <tm_preemptive_thread_report+0xe8>)
 8001982:	681b      	ldr	r3, [r3, #0]
            (tm_preemptive_thread_1_counter < (average - 1)) || 
 8001984:	429a      	cmp	r2, r3
 8001986:	d323      	bcc.n	80019d0 <tm_preemptive_thread_report+0xc4>
            (tm_preemptive_thread_2_counter < (average - 1)) || 
 8001988:	683b      	ldr	r3, [r7, #0]
 800198a:	1e5a      	subs	r2, r3, #1
 800198c:	4b1a      	ldr	r3, [pc, #104]	; (80019f8 <tm_preemptive_thread_report+0xec>)
 800198e:	681b      	ldr	r3, [r3, #0]
            (tm_preemptive_thread_1_counter > (average + 1)) ||
 8001990:	429a      	cmp	r2, r3
 8001992:	d81d      	bhi.n	80019d0 <tm_preemptive_thread_report+0xc4>
            (tm_preemptive_thread_2_counter > (average + 1)) ||
 8001994:	683b      	ldr	r3, [r7, #0]
 8001996:	1c5a      	adds	r2, r3, #1
 8001998:	4b17      	ldr	r3, [pc, #92]	; (80019f8 <tm_preemptive_thread_report+0xec>)
 800199a:	681b      	ldr	r3, [r3, #0]
            (tm_preemptive_thread_2_counter < (average - 1)) || 
 800199c:	429a      	cmp	r2, r3
 800199e:	d317      	bcc.n	80019d0 <tm_preemptive_thread_report+0xc4>
            (tm_preemptive_thread_3_counter < (average - 1)) || 
 80019a0:	683b      	ldr	r3, [r7, #0]
 80019a2:	1e5a      	subs	r2, r3, #1
 80019a4:	4b15      	ldr	r3, [pc, #84]	; (80019fc <tm_preemptive_thread_report+0xf0>)
 80019a6:	681b      	ldr	r3, [r3, #0]
            (tm_preemptive_thread_2_counter > (average + 1)) ||
 80019a8:	429a      	cmp	r2, r3
 80019aa:	d811      	bhi.n	80019d0 <tm_preemptive_thread_report+0xc4>
            (tm_preemptive_thread_3_counter > (average + 1)) ||
 80019ac:	683b      	ldr	r3, [r7, #0]
 80019ae:	1c5a      	adds	r2, r3, #1
 80019b0:	4b12      	ldr	r3, [pc, #72]	; (80019fc <tm_preemptive_thread_report+0xf0>)
 80019b2:	681b      	ldr	r3, [r3, #0]
            (tm_preemptive_thread_3_counter < (average - 1)) || 
 80019b4:	429a      	cmp	r2, r3
 80019b6:	d30b      	bcc.n	80019d0 <tm_preemptive_thread_report+0xc4>
            (tm_preemptive_thread_4_counter < (average - 1)) || 
 80019b8:	683b      	ldr	r3, [r7, #0]
 80019ba:	1e5a      	subs	r2, r3, #1
 80019bc:	4b10      	ldr	r3, [pc, #64]	; (8001a00 <tm_preemptive_thread_report+0xf4>)
 80019be:	681b      	ldr	r3, [r3, #0]
            (tm_preemptive_thread_3_counter > (average + 1)) ||
 80019c0:	429a      	cmp	r2, r3
 80019c2:	d805      	bhi.n	80019d0 <tm_preemptive_thread_report+0xc4>
            (tm_preemptive_thread_4_counter > (average + 1)))
 80019c4:	683b      	ldr	r3, [r7, #0]
 80019c6:	1c5a      	adds	r2, r3, #1
 80019c8:	4b0d      	ldr	r3, [pc, #52]	; (8001a00 <tm_preemptive_thread_report+0xf4>)
 80019ca:	681b      	ldr	r3, [r3, #0]
            (tm_preemptive_thread_4_counter < (average - 1)) || 
 80019cc:	429a      	cmp	r2, r3
 80019ce:	d202      	bcs.n	80019d6 <tm_preemptive_thread_report+0xca>
        {

            printf("ERROR: Invalid counter value(s). Preemptive counters should not be more that 1 different than the average!\n\r");
 80019d0:	480d      	ldr	r0, [pc, #52]	; (8001a08 <tm_preemptive_thread_report+0xfc>)
 80019d2:	f008 f8b7 	bl	8009b44 <iprintf>
        }

        /* Show the time period total.  */
        printf("Time Period Total:  %lu\n\n\r", total - last_total);
 80019d6:	687a      	ldr	r2, [r7, #4]
 80019d8:	68bb      	ldr	r3, [r7, #8]
 80019da:	1ad3      	subs	r3, r2, r3
 80019dc:	4619      	mov	r1, r3
 80019de:	480b      	ldr	r0, [pc, #44]	; (8001a0c <tm_preemptive_thread_report+0x100>)
 80019e0:	f008 f8b0 	bl	8009b44 <iprintf>

        /* Save the last total.  */
        last_total =  total;
 80019e4:	687b      	ldr	r3, [r7, #4]
 80019e6:	60bb      	str	r3, [r7, #8]
        tm_thread_sleep(TM_TEST_DURATION);
 80019e8:	e797      	b.n	800191a <tm_preemptive_thread_report+0xe>
 80019ea:	bf00      	nop
 80019ec:	0800adb8 	.word	0x0800adb8
 80019f0:	20000368 	.word	0x20000368
 80019f4:	2000036c 	.word	0x2000036c
 80019f8:	20000370 	.word	0x20000370
 80019fc:	20000374 	.word	0x20000374
 8001a00:	20000378 	.word	0x20000378
 8001a04:	cccccccd 	.word	0xcccccccd
 8001a08:	0800ae00 	.word	0x0800ae00
 8001a0c:	0800ae70 	.word	0x0800ae70

08001a10 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler: 
  ldr   sp, =_estack       /* set stack pointer */
 8001a10:	f8df d034 	ldr.w	sp, [pc, #52]	; 8001a48 <LoopFillZerobss+0x12>
 
/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 8001a14:	480d      	ldr	r0, [pc, #52]	; (8001a4c <LoopFillZerobss+0x16>)
  ldr r1, =_edata
 8001a16:	490e      	ldr	r1, [pc, #56]	; (8001a50 <LoopFillZerobss+0x1a>)
  ldr r2, =_sidata
 8001a18:	4a0e      	ldr	r2, [pc, #56]	; (8001a54 <LoopFillZerobss+0x1e>)
  movs r3, #0
 8001a1a:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8001a1c:	e002      	b.n	8001a24 <LoopCopyDataInit>

08001a1e <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8001a1e:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8001a20:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8001a22:	3304      	adds	r3, #4

08001a24 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8001a24:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8001a26:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8001a28:	d3f9      	bcc.n	8001a1e <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8001a2a:	4a0b      	ldr	r2, [pc, #44]	; (8001a58 <LoopFillZerobss+0x22>)
  ldr r4, =_ebss
 8001a2c:	4c0b      	ldr	r4, [pc, #44]	; (8001a5c <LoopFillZerobss+0x26>)
  movs r3, #0
 8001a2e:	2300      	movs	r3, #0
  b LoopFillZerobss
 8001a30:	e001      	b.n	8001a36 <LoopFillZerobss>

08001a32 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8001a32:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8001a34:	3204      	adds	r2, #4

08001a36 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8001a36:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8001a38:	d3fb      	bcc.n	8001a32 <FillZerobss>

/* Call the clock system initialization function.*/
  bl  SystemInit   
 8001a3a:	f7ff fe33 	bl	80016a4 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8001a3e:	f007 ff67 	bl	8009910 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8001a42:	f7fe fdd7 	bl	80005f4 <main>
  bx  lr    
 8001a46:	4770      	bx	lr
  ldr   sp, =_estack       /* set stack pointer */
 8001a48:	20030000 	.word	0x20030000
  ldr r0, =_sdata
 8001a4c:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8001a50:	20000074 	.word	0x20000074
  ldr r2, =_sidata
 8001a54:	0800af64 	.word	0x0800af64
  ldr r2, =_sbss
 8001a58:	20000074 	.word	0x20000074
  ldr r4, =_ebss
 8001a5c:	200093ec 	.word	0x200093ec

08001a60 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8001a60:	e7fe      	b.n	8001a60 <ADC_IRQHandler>
	...

08001a64 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8001a64:	b580      	push	{r7, lr}
 8001a66:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 8001a68:	4b0e      	ldr	r3, [pc, #56]	; (8001aa4 <HAL_Init+0x40>)
 8001a6a:	681b      	ldr	r3, [r3, #0]
 8001a6c:	4a0d      	ldr	r2, [pc, #52]	; (8001aa4 <HAL_Init+0x40>)
 8001a6e:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8001a72:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 8001a74:	4b0b      	ldr	r3, [pc, #44]	; (8001aa4 <HAL_Init+0x40>)
 8001a76:	681b      	ldr	r3, [r3, #0]
 8001a78:	4a0a      	ldr	r2, [pc, #40]	; (8001aa4 <HAL_Init+0x40>)
 8001a7a:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8001a7e:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8001a80:	4b08      	ldr	r3, [pc, #32]	; (8001aa4 <HAL_Init+0x40>)
 8001a82:	681b      	ldr	r3, [r3, #0]
 8001a84:	4a07      	ldr	r2, [pc, #28]	; (8001aa4 <HAL_Init+0x40>)
 8001a86:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8001a8a:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8001a8c:	2003      	movs	r0, #3
 8001a8e:	f000 f8d8 	bl	8001c42 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8001a92:	2000      	movs	r0, #0
 8001a94:	f7ff fcc4 	bl	8001420 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8001a98:	f7ff f964 	bl	8000d64 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8001a9c:	2300      	movs	r3, #0
}
 8001a9e:	4618      	mov	r0, r3
 8001aa0:	bd80      	pop	{r7, pc}
 8001aa2:	bf00      	nop
 8001aa4:	40023c00 	.word	0x40023c00

08001aa8 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8001aa8:	b480      	push	{r7}
 8001aaa:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8001aac:	4b06      	ldr	r3, [pc, #24]	; (8001ac8 <HAL_IncTick+0x20>)
 8001aae:	781b      	ldrb	r3, [r3, #0]
 8001ab0:	461a      	mov	r2, r3
 8001ab2:	4b06      	ldr	r3, [pc, #24]	; (8001acc <HAL_IncTick+0x24>)
 8001ab4:	681b      	ldr	r3, [r3, #0]
 8001ab6:	4413      	add	r3, r2
 8001ab8:	4a04      	ldr	r2, [pc, #16]	; (8001acc <HAL_IncTick+0x24>)
 8001aba:	6013      	str	r3, [r2, #0]
}
 8001abc:	bf00      	nop
 8001abe:	46bd      	mov	sp, r7
 8001ac0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ac4:	4770      	bx	lr
 8001ac6:	bf00      	nop
 8001ac8:	20000008 	.word	0x20000008
 8001acc:	2000037c 	.word	0x2000037c

08001ad0 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8001ad0:	b480      	push	{r7}
 8001ad2:	af00      	add	r7, sp, #0
  return uwTick;
 8001ad4:	4b03      	ldr	r3, [pc, #12]	; (8001ae4 <HAL_GetTick+0x14>)
 8001ad6:	681b      	ldr	r3, [r3, #0]
}
 8001ad8:	4618      	mov	r0, r3
 8001ada:	46bd      	mov	sp, r7
 8001adc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ae0:	4770      	bx	lr
 8001ae2:	bf00      	nop
 8001ae4:	2000037c 	.word	0x2000037c

08001ae8 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001ae8:	b480      	push	{r7}
 8001aea:	b085      	sub	sp, #20
 8001aec:	af00      	add	r7, sp, #0
 8001aee:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8001af0:	687b      	ldr	r3, [r7, #4]
 8001af2:	f003 0307 	and.w	r3, r3, #7
 8001af6:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8001af8:	4b0c      	ldr	r3, [pc, #48]	; (8001b2c <__NVIC_SetPriorityGrouping+0x44>)
 8001afa:	68db      	ldr	r3, [r3, #12]
 8001afc:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8001afe:	68ba      	ldr	r2, [r7, #8]
 8001b00:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8001b04:	4013      	ands	r3, r2
 8001b06:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8001b08:	68fb      	ldr	r3, [r7, #12]
 8001b0a:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8001b0c:	68bb      	ldr	r3, [r7, #8]
 8001b0e:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8001b10:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8001b14:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8001b18:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8001b1a:	4a04      	ldr	r2, [pc, #16]	; (8001b2c <__NVIC_SetPriorityGrouping+0x44>)
 8001b1c:	68bb      	ldr	r3, [r7, #8]
 8001b1e:	60d3      	str	r3, [r2, #12]
}
 8001b20:	bf00      	nop
 8001b22:	3714      	adds	r7, #20
 8001b24:	46bd      	mov	sp, r7
 8001b26:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b2a:	4770      	bx	lr
 8001b2c:	e000ed00 	.word	0xe000ed00

08001b30 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8001b30:	b480      	push	{r7}
 8001b32:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8001b34:	4b04      	ldr	r3, [pc, #16]	; (8001b48 <__NVIC_GetPriorityGrouping+0x18>)
 8001b36:	68db      	ldr	r3, [r3, #12]
 8001b38:	0a1b      	lsrs	r3, r3, #8
 8001b3a:	f003 0307 	and.w	r3, r3, #7
}
 8001b3e:	4618      	mov	r0, r3
 8001b40:	46bd      	mov	sp, r7
 8001b42:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b46:	4770      	bx	lr
 8001b48:	e000ed00 	.word	0xe000ed00

08001b4c <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001b4c:	b480      	push	{r7}
 8001b4e:	b083      	sub	sp, #12
 8001b50:	af00      	add	r7, sp, #0
 8001b52:	4603      	mov	r3, r0
 8001b54:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001b56:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001b5a:	2b00      	cmp	r3, #0
 8001b5c:	db0b      	blt.n	8001b76 <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8001b5e:	79fb      	ldrb	r3, [r7, #7]
 8001b60:	f003 021f 	and.w	r2, r3, #31
 8001b64:	4907      	ldr	r1, [pc, #28]	; (8001b84 <__NVIC_EnableIRQ+0x38>)
 8001b66:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001b6a:	095b      	lsrs	r3, r3, #5
 8001b6c:	2001      	movs	r0, #1
 8001b6e:	fa00 f202 	lsl.w	r2, r0, r2
 8001b72:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 8001b76:	bf00      	nop
 8001b78:	370c      	adds	r7, #12
 8001b7a:	46bd      	mov	sp, r7
 8001b7c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b80:	4770      	bx	lr
 8001b82:	bf00      	nop
 8001b84:	e000e100 	.word	0xe000e100

08001b88 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8001b88:	b480      	push	{r7}
 8001b8a:	b083      	sub	sp, #12
 8001b8c:	af00      	add	r7, sp, #0
 8001b8e:	4603      	mov	r3, r0
 8001b90:	6039      	str	r1, [r7, #0]
 8001b92:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001b94:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001b98:	2b00      	cmp	r3, #0
 8001b9a:	db0a      	blt.n	8001bb2 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001b9c:	683b      	ldr	r3, [r7, #0]
 8001b9e:	b2da      	uxtb	r2, r3
 8001ba0:	490c      	ldr	r1, [pc, #48]	; (8001bd4 <__NVIC_SetPriority+0x4c>)
 8001ba2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001ba6:	0112      	lsls	r2, r2, #4
 8001ba8:	b2d2      	uxtb	r2, r2
 8001baa:	440b      	add	r3, r1
 8001bac:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8001bb0:	e00a      	b.n	8001bc8 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001bb2:	683b      	ldr	r3, [r7, #0]
 8001bb4:	b2da      	uxtb	r2, r3
 8001bb6:	4908      	ldr	r1, [pc, #32]	; (8001bd8 <__NVIC_SetPriority+0x50>)
 8001bb8:	79fb      	ldrb	r3, [r7, #7]
 8001bba:	f003 030f 	and.w	r3, r3, #15
 8001bbe:	3b04      	subs	r3, #4
 8001bc0:	0112      	lsls	r2, r2, #4
 8001bc2:	b2d2      	uxtb	r2, r2
 8001bc4:	440b      	add	r3, r1
 8001bc6:	761a      	strb	r2, [r3, #24]
}
 8001bc8:	bf00      	nop
 8001bca:	370c      	adds	r7, #12
 8001bcc:	46bd      	mov	sp, r7
 8001bce:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001bd2:	4770      	bx	lr
 8001bd4:	e000e100 	.word	0xe000e100
 8001bd8:	e000ed00 	.word	0xe000ed00

08001bdc <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8001bdc:	b480      	push	{r7}
 8001bde:	b089      	sub	sp, #36	; 0x24
 8001be0:	af00      	add	r7, sp, #0
 8001be2:	60f8      	str	r0, [r7, #12]
 8001be4:	60b9      	str	r1, [r7, #8]
 8001be6:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8001be8:	68fb      	ldr	r3, [r7, #12]
 8001bea:	f003 0307 	and.w	r3, r3, #7
 8001bee:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8001bf0:	69fb      	ldr	r3, [r7, #28]
 8001bf2:	f1c3 0307 	rsb	r3, r3, #7
 8001bf6:	2b04      	cmp	r3, #4
 8001bf8:	bf28      	it	cs
 8001bfa:	2304      	movcs	r3, #4
 8001bfc:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8001bfe:	69fb      	ldr	r3, [r7, #28]
 8001c00:	3304      	adds	r3, #4
 8001c02:	2b06      	cmp	r3, #6
 8001c04:	d902      	bls.n	8001c0c <NVIC_EncodePriority+0x30>
 8001c06:	69fb      	ldr	r3, [r7, #28]
 8001c08:	3b03      	subs	r3, #3
 8001c0a:	e000      	b.n	8001c0e <NVIC_EncodePriority+0x32>
 8001c0c:	2300      	movs	r3, #0
 8001c0e:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001c10:	f04f 32ff 	mov.w	r2, #4294967295
 8001c14:	69bb      	ldr	r3, [r7, #24]
 8001c16:	fa02 f303 	lsl.w	r3, r2, r3
 8001c1a:	43da      	mvns	r2, r3
 8001c1c:	68bb      	ldr	r3, [r7, #8]
 8001c1e:	401a      	ands	r2, r3
 8001c20:	697b      	ldr	r3, [r7, #20]
 8001c22:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8001c24:	f04f 31ff 	mov.w	r1, #4294967295
 8001c28:	697b      	ldr	r3, [r7, #20]
 8001c2a:	fa01 f303 	lsl.w	r3, r1, r3
 8001c2e:	43d9      	mvns	r1, r3
 8001c30:	687b      	ldr	r3, [r7, #4]
 8001c32:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001c34:	4313      	orrs	r3, r2
         );
}
 8001c36:	4618      	mov	r0, r3
 8001c38:	3724      	adds	r7, #36	; 0x24
 8001c3a:	46bd      	mov	sp, r7
 8001c3c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c40:	4770      	bx	lr

08001c42 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001c42:	b580      	push	{r7, lr}
 8001c44:	b082      	sub	sp, #8
 8001c46:	af00      	add	r7, sp, #0
 8001c48:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8001c4a:	6878      	ldr	r0, [r7, #4]
 8001c4c:	f7ff ff4c 	bl	8001ae8 <__NVIC_SetPriorityGrouping>
}
 8001c50:	bf00      	nop
 8001c52:	3708      	adds	r7, #8
 8001c54:	46bd      	mov	sp, r7
 8001c56:	bd80      	pop	{r7, pc}

08001c58 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8001c58:	b580      	push	{r7, lr}
 8001c5a:	b086      	sub	sp, #24
 8001c5c:	af00      	add	r7, sp, #0
 8001c5e:	4603      	mov	r3, r0
 8001c60:	60b9      	str	r1, [r7, #8]
 8001c62:	607a      	str	r2, [r7, #4]
 8001c64:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8001c66:	2300      	movs	r3, #0
 8001c68:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8001c6a:	f7ff ff61 	bl	8001b30 <__NVIC_GetPriorityGrouping>
 8001c6e:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8001c70:	687a      	ldr	r2, [r7, #4]
 8001c72:	68b9      	ldr	r1, [r7, #8]
 8001c74:	6978      	ldr	r0, [r7, #20]
 8001c76:	f7ff ffb1 	bl	8001bdc <NVIC_EncodePriority>
 8001c7a:	4602      	mov	r2, r0
 8001c7c:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8001c80:	4611      	mov	r1, r2
 8001c82:	4618      	mov	r0, r3
 8001c84:	f7ff ff80 	bl	8001b88 <__NVIC_SetPriority>
}
 8001c88:	bf00      	nop
 8001c8a:	3718      	adds	r7, #24
 8001c8c:	46bd      	mov	sp, r7
 8001c8e:	bd80      	pop	{r7, pc}

08001c90 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001c90:	b580      	push	{r7, lr}
 8001c92:	b082      	sub	sp, #8
 8001c94:	af00      	add	r7, sp, #0
 8001c96:	4603      	mov	r3, r0
 8001c98:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8001c9a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001c9e:	4618      	mov	r0, r3
 8001ca0:	f7ff ff54 	bl	8001b4c <__NVIC_EnableIRQ>
}
 8001ca4:	bf00      	nop
 8001ca6:	3708      	adds	r7, #8
 8001ca8:	46bd      	mov	sp, r7
 8001caa:	bd80      	pop	{r7, pc}

08001cac <HAL_CRC_Init>:
  *         parameters in the CRC_InitTypeDef and create the associated handle.
  * @param  hcrc CRC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CRC_Init(CRC_HandleTypeDef *hcrc)
{
 8001cac:	b580      	push	{r7, lr}
 8001cae:	b082      	sub	sp, #8
 8001cb0:	af00      	add	r7, sp, #0
 8001cb2:	6078      	str	r0, [r7, #4]
  /* Check the CRC handle allocation */
  if (hcrc == NULL)
 8001cb4:	687b      	ldr	r3, [r7, #4]
 8001cb6:	2b00      	cmp	r3, #0
 8001cb8:	d101      	bne.n	8001cbe <HAL_CRC_Init+0x12>
  {
    return HAL_ERROR;
 8001cba:	2301      	movs	r3, #1
 8001cbc:	e00e      	b.n	8001cdc <HAL_CRC_Init+0x30>
  }

  /* Check the parameters */
  assert_param(IS_CRC_ALL_INSTANCE(hcrc->Instance));

  if (hcrc->State == HAL_CRC_STATE_RESET)
 8001cbe:	687b      	ldr	r3, [r7, #4]
 8001cc0:	795b      	ldrb	r3, [r3, #5]
 8001cc2:	b2db      	uxtb	r3, r3
 8001cc4:	2b00      	cmp	r3, #0
 8001cc6:	d105      	bne.n	8001cd4 <HAL_CRC_Init+0x28>
  {
    /* Allocate lock resource and initialize it */
    hcrc->Lock = HAL_UNLOCKED;
 8001cc8:	687b      	ldr	r3, [r7, #4]
 8001cca:	2200      	movs	r2, #0
 8001ccc:	711a      	strb	r2, [r3, #4]
    /* Init the low level hardware */
    HAL_CRC_MspInit(hcrc);
 8001cce:	6878      	ldr	r0, [r7, #4]
 8001cd0:	f7ff f874 	bl	8000dbc <HAL_CRC_MspInit>
  }

  /* Change CRC peripheral state */
  hcrc->State = HAL_CRC_STATE_READY;
 8001cd4:	687b      	ldr	r3, [r7, #4]
 8001cd6:	2201      	movs	r2, #1
 8001cd8:	715a      	strb	r2, [r3, #5]

  /* Return function status */
  return HAL_OK;
 8001cda:	2300      	movs	r3, #0
}
 8001cdc:	4618      	mov	r0, r3
 8001cde:	3708      	adds	r7, #8
 8001ce0:	46bd      	mov	sp, r7
 8001ce2:	bd80      	pop	{r7, pc}

08001ce4 <HAL_DMA2D_Init>:
  * @param  hdma2d pointer to a DMA2D_HandleTypeDef structure that contains
  *                 the configuration information for the DMA2D.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA2D_Init(DMA2D_HandleTypeDef *hdma2d)
{
 8001ce4:	b580      	push	{r7, lr}
 8001ce6:	b082      	sub	sp, #8
 8001ce8:	af00      	add	r7, sp, #0
 8001cea:	6078      	str	r0, [r7, #4]
  /* Check the DMA2D peripheral state */
  if (hdma2d == NULL)
 8001cec:	687b      	ldr	r3, [r7, #4]
 8001cee:	2b00      	cmp	r3, #0
 8001cf0:	d101      	bne.n	8001cf6 <HAL_DMA2D_Init+0x12>
  {
    return HAL_ERROR;
 8001cf2:	2301      	movs	r3, #1
 8001cf4:	e03b      	b.n	8001d6e <HAL_DMA2D_Init+0x8a>

    /* Init the low level hardware */
    hdma2d->MspInitCallback(hdma2d);
  }
#else
  if (hdma2d->State == HAL_DMA2D_STATE_RESET)
 8001cf6:	687b      	ldr	r3, [r7, #4]
 8001cf8:	f893 3039 	ldrb.w	r3, [r3, #57]	; 0x39
 8001cfc:	b2db      	uxtb	r3, r3
 8001cfe:	2b00      	cmp	r3, #0
 8001d00:	d106      	bne.n	8001d10 <HAL_DMA2D_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hdma2d->Lock = HAL_UNLOCKED;
 8001d02:	687b      	ldr	r3, [r7, #4]
 8001d04:	2200      	movs	r2, #0
 8001d06:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
    /* Init the low level hardware */
    HAL_DMA2D_MspInit(hdma2d);
 8001d0a:	6878      	ldr	r0, [r7, #4]
 8001d0c:	f7ff f878 	bl	8000e00 <HAL_DMA2D_MspInit>
  }
#endif /* (USE_HAL_DMA2D_REGISTER_CALLBACKS) */

  /* Change DMA2D peripheral state */
  hdma2d->State = HAL_DMA2D_STATE_BUSY;
 8001d10:	687b      	ldr	r3, [r7, #4]
 8001d12:	2202      	movs	r2, #2
 8001d14:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

  /* DMA2D CR register configuration -------------------------------------------*/
  MODIFY_REG(hdma2d->Instance->CR, DMA2D_CR_MODE, hdma2d->Init.Mode);
 8001d18:	687b      	ldr	r3, [r7, #4]
 8001d1a:	681b      	ldr	r3, [r3, #0]
 8001d1c:	681b      	ldr	r3, [r3, #0]
 8001d1e:	f423 3140 	bic.w	r1, r3, #196608	; 0x30000
 8001d22:	687b      	ldr	r3, [r7, #4]
 8001d24:	685a      	ldr	r2, [r3, #4]
 8001d26:	687b      	ldr	r3, [r7, #4]
 8001d28:	681b      	ldr	r3, [r3, #0]
 8001d2a:	430a      	orrs	r2, r1
 8001d2c:	601a      	str	r2, [r3, #0]

  /* DMA2D OPFCCR register configuration ---------------------------------------*/
  MODIFY_REG(hdma2d->Instance->OPFCCR, DMA2D_OPFCCR_CM, hdma2d->Init.ColorMode);
 8001d2e:	687b      	ldr	r3, [r7, #4]
 8001d30:	681b      	ldr	r3, [r3, #0]
 8001d32:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8001d34:	f023 0107 	bic.w	r1, r3, #7
 8001d38:	687b      	ldr	r3, [r7, #4]
 8001d3a:	689a      	ldr	r2, [r3, #8]
 8001d3c:	687b      	ldr	r3, [r7, #4]
 8001d3e:	681b      	ldr	r3, [r3, #0]
 8001d40:	430a      	orrs	r2, r1
 8001d42:	635a      	str	r2, [r3, #52]	; 0x34

  /* DMA2D OOR register configuration ------------------------------------------*/
  MODIFY_REG(hdma2d->Instance->OOR, DMA2D_OOR_LO, hdma2d->Init.OutputOffset);
 8001d44:	687b      	ldr	r3, [r7, #4]
 8001d46:	681b      	ldr	r3, [r3, #0]
 8001d48:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001d4a:	f423 537f 	bic.w	r3, r3, #16320	; 0x3fc0
 8001d4e:	f023 033f 	bic.w	r3, r3, #63	; 0x3f
 8001d52:	687a      	ldr	r2, [r7, #4]
 8001d54:	68d1      	ldr	r1, [r2, #12]
 8001d56:	687a      	ldr	r2, [r7, #4]
 8001d58:	6812      	ldr	r2, [r2, #0]
 8001d5a:	430b      	orrs	r3, r1
 8001d5c:	6413      	str	r3, [r2, #64]	; 0x40


  /* Update error code */
  hdma2d->ErrorCode = HAL_DMA2D_ERROR_NONE;
 8001d5e:	687b      	ldr	r3, [r7, #4]
 8001d60:	2200      	movs	r2, #0
 8001d62:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Initialize the DMA2D state*/
  hdma2d->State  = HAL_DMA2D_STATE_READY;
 8001d64:	687b      	ldr	r3, [r7, #4]
 8001d66:	2201      	movs	r2, #1
 8001d68:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

  return HAL_OK;
 8001d6c:	2300      	movs	r3, #0
}
 8001d6e:	4618      	mov	r0, r3
 8001d70:	3708      	adds	r7, #8
 8001d72:	46bd      	mov	sp, r7
 8001d74:	bd80      	pop	{r7, pc}

08001d76 <HAL_DMA2D_IRQHandler>:
  * @param  hdma2d Pointer to a DMA2D_HandleTypeDef structure that contains
  *                 the configuration information for the DMA2D.
  * @retval HAL status
  */
void HAL_DMA2D_IRQHandler(DMA2D_HandleTypeDef *hdma2d)
{
 8001d76:	b580      	push	{r7, lr}
 8001d78:	b084      	sub	sp, #16
 8001d7a:	af00      	add	r7, sp, #0
 8001d7c:	6078      	str	r0, [r7, #4]
  uint32_t isrflags = READ_REG(hdma2d->Instance->ISR);
 8001d7e:	687b      	ldr	r3, [r7, #4]
 8001d80:	681b      	ldr	r3, [r3, #0]
 8001d82:	685b      	ldr	r3, [r3, #4]
 8001d84:	60fb      	str	r3, [r7, #12]
  uint32_t crflags = READ_REG(hdma2d->Instance->CR);
 8001d86:	687b      	ldr	r3, [r7, #4]
 8001d88:	681b      	ldr	r3, [r3, #0]
 8001d8a:	681b      	ldr	r3, [r3, #0]
 8001d8c:	60bb      	str	r3, [r7, #8]

  /* Transfer Error Interrupt management ***************************************/
  if ((isrflags & DMA2D_FLAG_TE) != 0U)
 8001d8e:	68fb      	ldr	r3, [r7, #12]
 8001d90:	f003 0301 	and.w	r3, r3, #1
 8001d94:	2b00      	cmp	r3, #0
 8001d96:	d026      	beq.n	8001de6 <HAL_DMA2D_IRQHandler+0x70>
  {
    if ((crflags & DMA2D_IT_TE) != 0U)
 8001d98:	68bb      	ldr	r3, [r7, #8]
 8001d9a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001d9e:	2b00      	cmp	r3, #0
 8001da0:	d021      	beq.n	8001de6 <HAL_DMA2D_IRQHandler+0x70>
    {
      /* Disable the transfer Error interrupt */
      __HAL_DMA2D_DISABLE_IT(hdma2d, DMA2D_IT_TE);
 8001da2:	687b      	ldr	r3, [r7, #4]
 8001da4:	681b      	ldr	r3, [r3, #0]
 8001da6:	681a      	ldr	r2, [r3, #0]
 8001da8:	687b      	ldr	r3, [r7, #4]
 8001daa:	681b      	ldr	r3, [r3, #0]
 8001dac:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8001db0:	601a      	str	r2, [r3, #0]

      /* Update error code */
      hdma2d->ErrorCode |= HAL_DMA2D_ERROR_TE;
 8001db2:	687b      	ldr	r3, [r7, #4]
 8001db4:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8001db6:	f043 0201 	orr.w	r2, r3, #1
 8001dba:	687b      	ldr	r3, [r7, #4]
 8001dbc:	63da      	str	r2, [r3, #60]	; 0x3c

      /* Clear the transfer error flag */
      __HAL_DMA2D_CLEAR_FLAG(hdma2d, DMA2D_FLAG_TE);
 8001dbe:	687b      	ldr	r3, [r7, #4]
 8001dc0:	681b      	ldr	r3, [r3, #0]
 8001dc2:	2201      	movs	r2, #1
 8001dc4:	609a      	str	r2, [r3, #8]

      /* Change DMA2D state */
      hdma2d->State = HAL_DMA2D_STATE_ERROR;
 8001dc6:	687b      	ldr	r3, [r7, #4]
 8001dc8:	2204      	movs	r2, #4
 8001dca:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

      /* Process Unlocked */
      __HAL_UNLOCK(hdma2d);
 8001dce:	687b      	ldr	r3, [r7, #4]
 8001dd0:	2200      	movs	r2, #0
 8001dd2:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

      if (hdma2d->XferErrorCallback != NULL)
 8001dd6:	687b      	ldr	r3, [r7, #4]
 8001dd8:	695b      	ldr	r3, [r3, #20]
 8001dda:	2b00      	cmp	r3, #0
 8001ddc:	d003      	beq.n	8001de6 <HAL_DMA2D_IRQHandler+0x70>
      {
        /* Transfer error Callback */
        hdma2d->XferErrorCallback(hdma2d);
 8001dde:	687b      	ldr	r3, [r7, #4]
 8001de0:	695b      	ldr	r3, [r3, #20]
 8001de2:	6878      	ldr	r0, [r7, #4]
 8001de4:	4798      	blx	r3
      }
    }
  }
  /* Configuration Error Interrupt management **********************************/
  if ((isrflags & DMA2D_FLAG_CE) != 0U)
 8001de6:	68fb      	ldr	r3, [r7, #12]
 8001de8:	f003 0320 	and.w	r3, r3, #32
 8001dec:	2b00      	cmp	r3, #0
 8001dee:	d026      	beq.n	8001e3e <HAL_DMA2D_IRQHandler+0xc8>
  {
    if ((crflags & DMA2D_IT_CE) != 0U)
 8001df0:	68bb      	ldr	r3, [r7, #8]
 8001df2:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8001df6:	2b00      	cmp	r3, #0
 8001df8:	d021      	beq.n	8001e3e <HAL_DMA2D_IRQHandler+0xc8>
    {
      /* Disable the Configuration Error interrupt */
      __HAL_DMA2D_DISABLE_IT(hdma2d, DMA2D_IT_CE);
 8001dfa:	687b      	ldr	r3, [r7, #4]
 8001dfc:	681b      	ldr	r3, [r3, #0]
 8001dfe:	681a      	ldr	r2, [r3, #0]
 8001e00:	687b      	ldr	r3, [r7, #4]
 8001e02:	681b      	ldr	r3, [r3, #0]
 8001e04:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8001e08:	601a      	str	r2, [r3, #0]

      /* Clear the Configuration error flag */
      __HAL_DMA2D_CLEAR_FLAG(hdma2d, DMA2D_FLAG_CE);
 8001e0a:	687b      	ldr	r3, [r7, #4]
 8001e0c:	681b      	ldr	r3, [r3, #0]
 8001e0e:	2220      	movs	r2, #32
 8001e10:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma2d->ErrorCode |= HAL_DMA2D_ERROR_CE;
 8001e12:	687b      	ldr	r3, [r7, #4]
 8001e14:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8001e16:	f043 0202 	orr.w	r2, r3, #2
 8001e1a:	687b      	ldr	r3, [r7, #4]
 8001e1c:	63da      	str	r2, [r3, #60]	; 0x3c

      /* Change DMA2D state */
      hdma2d->State = HAL_DMA2D_STATE_ERROR;
 8001e1e:	687b      	ldr	r3, [r7, #4]
 8001e20:	2204      	movs	r2, #4
 8001e22:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

      /* Process Unlocked */
      __HAL_UNLOCK(hdma2d);
 8001e26:	687b      	ldr	r3, [r7, #4]
 8001e28:	2200      	movs	r2, #0
 8001e2a:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

      if (hdma2d->XferErrorCallback != NULL)
 8001e2e:	687b      	ldr	r3, [r7, #4]
 8001e30:	695b      	ldr	r3, [r3, #20]
 8001e32:	2b00      	cmp	r3, #0
 8001e34:	d003      	beq.n	8001e3e <HAL_DMA2D_IRQHandler+0xc8>
      {
        /* Transfer error Callback */
        hdma2d->XferErrorCallback(hdma2d);
 8001e36:	687b      	ldr	r3, [r7, #4]
 8001e38:	695b      	ldr	r3, [r3, #20]
 8001e3a:	6878      	ldr	r0, [r7, #4]
 8001e3c:	4798      	blx	r3
      }
    }
  }
  /* CLUT access Error Interrupt management ***********************************/
  if ((isrflags & DMA2D_FLAG_CAE) != 0U)
 8001e3e:	68fb      	ldr	r3, [r7, #12]
 8001e40:	f003 0308 	and.w	r3, r3, #8
 8001e44:	2b00      	cmp	r3, #0
 8001e46:	d026      	beq.n	8001e96 <HAL_DMA2D_IRQHandler+0x120>
  {
    if ((crflags & DMA2D_IT_CAE) != 0U)
 8001e48:	68bb      	ldr	r3, [r7, #8]
 8001e4a:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8001e4e:	2b00      	cmp	r3, #0
 8001e50:	d021      	beq.n	8001e96 <HAL_DMA2D_IRQHandler+0x120>
    {
      /* Disable the CLUT access error interrupt */
      __HAL_DMA2D_DISABLE_IT(hdma2d, DMA2D_IT_CAE);
 8001e52:	687b      	ldr	r3, [r7, #4]
 8001e54:	681b      	ldr	r3, [r3, #0]
 8001e56:	681a      	ldr	r2, [r3, #0]
 8001e58:	687b      	ldr	r3, [r7, #4]
 8001e5a:	681b      	ldr	r3, [r3, #0]
 8001e5c:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8001e60:	601a      	str	r2, [r3, #0]

      /* Clear the CLUT access error flag */
      __HAL_DMA2D_CLEAR_FLAG(hdma2d, DMA2D_FLAG_CAE);
 8001e62:	687b      	ldr	r3, [r7, #4]
 8001e64:	681b      	ldr	r3, [r3, #0]
 8001e66:	2208      	movs	r2, #8
 8001e68:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma2d->ErrorCode |= HAL_DMA2D_ERROR_CAE;
 8001e6a:	687b      	ldr	r3, [r7, #4]
 8001e6c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8001e6e:	f043 0204 	orr.w	r2, r3, #4
 8001e72:	687b      	ldr	r3, [r7, #4]
 8001e74:	63da      	str	r2, [r3, #60]	; 0x3c

      /* Change DMA2D state */
      hdma2d->State = HAL_DMA2D_STATE_ERROR;
 8001e76:	687b      	ldr	r3, [r7, #4]
 8001e78:	2204      	movs	r2, #4
 8001e7a:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

      /* Process Unlocked */
      __HAL_UNLOCK(hdma2d);
 8001e7e:	687b      	ldr	r3, [r7, #4]
 8001e80:	2200      	movs	r2, #0
 8001e82:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

      if (hdma2d->XferErrorCallback != NULL)
 8001e86:	687b      	ldr	r3, [r7, #4]
 8001e88:	695b      	ldr	r3, [r3, #20]
 8001e8a:	2b00      	cmp	r3, #0
 8001e8c:	d003      	beq.n	8001e96 <HAL_DMA2D_IRQHandler+0x120>
      {
        /* Transfer error Callback */
        hdma2d->XferErrorCallback(hdma2d);
 8001e8e:	687b      	ldr	r3, [r7, #4]
 8001e90:	695b      	ldr	r3, [r3, #20]
 8001e92:	6878      	ldr	r0, [r7, #4]
 8001e94:	4798      	blx	r3
      }
    }
  }
  /* Transfer watermark Interrupt management **********************************/
  if ((isrflags & DMA2D_FLAG_TW) != 0U)
 8001e96:	68fb      	ldr	r3, [r7, #12]
 8001e98:	f003 0304 	and.w	r3, r3, #4
 8001e9c:	2b00      	cmp	r3, #0
 8001e9e:	d013      	beq.n	8001ec8 <HAL_DMA2D_IRQHandler+0x152>
  {
    if ((crflags & DMA2D_IT_TW) != 0U)
 8001ea0:	68bb      	ldr	r3, [r7, #8]
 8001ea2:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8001ea6:	2b00      	cmp	r3, #0
 8001ea8:	d00e      	beq.n	8001ec8 <HAL_DMA2D_IRQHandler+0x152>
    {
      /* Disable the transfer watermark interrupt */
      __HAL_DMA2D_DISABLE_IT(hdma2d, DMA2D_IT_TW);
 8001eaa:	687b      	ldr	r3, [r7, #4]
 8001eac:	681b      	ldr	r3, [r3, #0]
 8001eae:	681a      	ldr	r2, [r3, #0]
 8001eb0:	687b      	ldr	r3, [r7, #4]
 8001eb2:	681b      	ldr	r3, [r3, #0]
 8001eb4:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8001eb8:	601a      	str	r2, [r3, #0]

      /* Clear the transfer watermark flag */
      __HAL_DMA2D_CLEAR_FLAG(hdma2d, DMA2D_FLAG_TW);
 8001eba:	687b      	ldr	r3, [r7, #4]
 8001ebc:	681b      	ldr	r3, [r3, #0]
 8001ebe:	2204      	movs	r2, #4
 8001ec0:	609a      	str	r2, [r3, #8]

      /* Transfer watermark Callback */
#if (USE_HAL_DMA2D_REGISTER_CALLBACKS == 1)
      hdma2d->LineEventCallback(hdma2d);
#else
      HAL_DMA2D_LineEventCallback(hdma2d);
 8001ec2:	6878      	ldr	r0, [r7, #4]
 8001ec4:	f000 f853 	bl	8001f6e <HAL_DMA2D_LineEventCallback>
#endif /* USE_HAL_DMA2D_REGISTER_CALLBACKS */

    }
  }
  /* Transfer Complete Interrupt management ************************************/
  if ((isrflags & DMA2D_FLAG_TC) != 0U)
 8001ec8:	68fb      	ldr	r3, [r7, #12]
 8001eca:	f003 0302 	and.w	r3, r3, #2
 8001ece:	2b00      	cmp	r3, #0
 8001ed0:	d024      	beq.n	8001f1c <HAL_DMA2D_IRQHandler+0x1a6>
  {
    if ((crflags & DMA2D_IT_TC) != 0U)
 8001ed2:	68bb      	ldr	r3, [r7, #8]
 8001ed4:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8001ed8:	2b00      	cmp	r3, #0
 8001eda:	d01f      	beq.n	8001f1c <HAL_DMA2D_IRQHandler+0x1a6>
    {
      /* Disable the transfer complete interrupt */
      __HAL_DMA2D_DISABLE_IT(hdma2d, DMA2D_IT_TC);
 8001edc:	687b      	ldr	r3, [r7, #4]
 8001ede:	681b      	ldr	r3, [r3, #0]
 8001ee0:	681a      	ldr	r2, [r3, #0]
 8001ee2:	687b      	ldr	r3, [r7, #4]
 8001ee4:	681b      	ldr	r3, [r3, #0]
 8001ee6:	f422 7200 	bic.w	r2, r2, #512	; 0x200
 8001eea:	601a      	str	r2, [r3, #0]

      /* Clear the transfer complete flag */
      __HAL_DMA2D_CLEAR_FLAG(hdma2d, DMA2D_FLAG_TC);
 8001eec:	687b      	ldr	r3, [r7, #4]
 8001eee:	681b      	ldr	r3, [r3, #0]
 8001ef0:	2202      	movs	r2, #2
 8001ef2:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma2d->ErrorCode |= HAL_DMA2D_ERROR_NONE;
 8001ef4:	687b      	ldr	r3, [r7, #4]
 8001ef6:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8001ef8:	687b      	ldr	r3, [r7, #4]
 8001efa:	63da      	str	r2, [r3, #60]	; 0x3c

      /* Change DMA2D state */
      hdma2d->State = HAL_DMA2D_STATE_READY;
 8001efc:	687b      	ldr	r3, [r7, #4]
 8001efe:	2201      	movs	r2, #1
 8001f00:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

      /* Process Unlocked */
      __HAL_UNLOCK(hdma2d);
 8001f04:	687b      	ldr	r3, [r7, #4]
 8001f06:	2200      	movs	r2, #0
 8001f08:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

      if (hdma2d->XferCpltCallback != NULL)
 8001f0c:	687b      	ldr	r3, [r7, #4]
 8001f0e:	691b      	ldr	r3, [r3, #16]
 8001f10:	2b00      	cmp	r3, #0
 8001f12:	d003      	beq.n	8001f1c <HAL_DMA2D_IRQHandler+0x1a6>
      {
        /* Transfer complete Callback */
        hdma2d->XferCpltCallback(hdma2d);
 8001f14:	687b      	ldr	r3, [r7, #4]
 8001f16:	691b      	ldr	r3, [r3, #16]
 8001f18:	6878      	ldr	r0, [r7, #4]
 8001f1a:	4798      	blx	r3
      }
    }
  }
  /* CLUT Transfer Complete Interrupt management ******************************/
  if ((isrflags & DMA2D_FLAG_CTC) != 0U)
 8001f1c:	68fb      	ldr	r3, [r7, #12]
 8001f1e:	f003 0310 	and.w	r3, r3, #16
 8001f22:	2b00      	cmp	r3, #0
 8001f24:	d01f      	beq.n	8001f66 <HAL_DMA2D_IRQHandler+0x1f0>
  {
    if ((crflags & DMA2D_IT_CTC) != 0U)
 8001f26:	68bb      	ldr	r3, [r7, #8]
 8001f28:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8001f2c:	2b00      	cmp	r3, #0
 8001f2e:	d01a      	beq.n	8001f66 <HAL_DMA2D_IRQHandler+0x1f0>
    {
      /* Disable the CLUT transfer complete interrupt */
      __HAL_DMA2D_DISABLE_IT(hdma2d, DMA2D_IT_CTC);
 8001f30:	687b      	ldr	r3, [r7, #4]
 8001f32:	681b      	ldr	r3, [r3, #0]
 8001f34:	681a      	ldr	r2, [r3, #0]
 8001f36:	687b      	ldr	r3, [r7, #4]
 8001f38:	681b      	ldr	r3, [r3, #0]
 8001f3a:	f422 5280 	bic.w	r2, r2, #4096	; 0x1000
 8001f3e:	601a      	str	r2, [r3, #0]

      /* Clear the CLUT transfer complete flag */
      __HAL_DMA2D_CLEAR_FLAG(hdma2d, DMA2D_FLAG_CTC);
 8001f40:	687b      	ldr	r3, [r7, #4]
 8001f42:	681b      	ldr	r3, [r3, #0]
 8001f44:	2210      	movs	r2, #16
 8001f46:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma2d->ErrorCode |= HAL_DMA2D_ERROR_NONE;
 8001f48:	687b      	ldr	r3, [r7, #4]
 8001f4a:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8001f4c:	687b      	ldr	r3, [r7, #4]
 8001f4e:	63da      	str	r2, [r3, #60]	; 0x3c

      /* Change DMA2D state */
      hdma2d->State = HAL_DMA2D_STATE_READY;
 8001f50:	687b      	ldr	r3, [r7, #4]
 8001f52:	2201      	movs	r2, #1
 8001f54:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

      /* Process Unlocked */
      __HAL_UNLOCK(hdma2d);
 8001f58:	687b      	ldr	r3, [r7, #4]
 8001f5a:	2200      	movs	r2, #0
 8001f5c:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

      /* CLUT Transfer complete Callback */
#if (USE_HAL_DMA2D_REGISTER_CALLBACKS == 1)
      hdma2d->CLUTLoadingCpltCallback(hdma2d);
#else
      HAL_DMA2D_CLUTLoadingCpltCallback(hdma2d);
 8001f60:	6878      	ldr	r0, [r7, #4]
 8001f62:	f000 f80e 	bl	8001f82 <HAL_DMA2D_CLUTLoadingCpltCallback>
#endif /* USE_HAL_DMA2D_REGISTER_CALLBACKS */
    }
  }

}
 8001f66:	bf00      	nop
 8001f68:	3710      	adds	r7, #16
 8001f6a:	46bd      	mov	sp, r7
 8001f6c:	bd80      	pop	{r7, pc}

08001f6e <HAL_DMA2D_LineEventCallback>:
  * @param  hdma2d pointer to a DMA2D_HandleTypeDef structure that contains
  *                 the configuration information for the DMA2D.
  * @retval None
  */
__weak void HAL_DMA2D_LineEventCallback(DMA2D_HandleTypeDef *hdma2d)
{
 8001f6e:	b480      	push	{r7}
 8001f70:	b083      	sub	sp, #12
 8001f72:	af00      	add	r7, sp, #0
 8001f74:	6078      	str	r0, [r7, #4]
  UNUSED(hdma2d);

  /* NOTE : This function should not be modified; when the callback is needed,
            the HAL_DMA2D_LineEventCallback can be implemented in the user file.
   */
}
 8001f76:	bf00      	nop
 8001f78:	370c      	adds	r7, #12
 8001f7a:	46bd      	mov	sp, r7
 8001f7c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f80:	4770      	bx	lr

08001f82 <HAL_DMA2D_CLUTLoadingCpltCallback>:
  * @param  hdma2d pointer to a DMA2D_HandleTypeDef structure that contains
  *                 the configuration information for the DMA2D.
  * @retval None
  */
__weak void HAL_DMA2D_CLUTLoadingCpltCallback(DMA2D_HandleTypeDef *hdma2d)
{
 8001f82:	b480      	push	{r7}
 8001f84:	b083      	sub	sp, #12
 8001f86:	af00      	add	r7, sp, #0
 8001f88:	6078      	str	r0, [r7, #4]
  UNUSED(hdma2d);

  /* NOTE : This function should not be modified; when the callback is needed,
            the HAL_DMA2D_CLUTLoadingCpltCallback can be implemented in the user file.
   */
}
 8001f8a:	bf00      	nop
 8001f8c:	370c      	adds	r7, #12
 8001f8e:	46bd      	mov	sp, r7
 8001f90:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f94:	4770      	bx	lr
	...

08001f98 <HAL_DMA2D_ConfigLayer>:
  *                   This parameter can be one of the following values:
  *                   DMA2D_BACKGROUND_LAYER(0) / DMA2D_FOREGROUND_LAYER(1)
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA2D_ConfigLayer(DMA2D_HandleTypeDef *hdma2d, uint32_t LayerIdx)
{
 8001f98:	b480      	push	{r7}
 8001f9a:	b087      	sub	sp, #28
 8001f9c:	af00      	add	r7, sp, #0
 8001f9e:	6078      	str	r0, [r7, #4]
 8001fa0:	6039      	str	r1, [r7, #0]
  uint32_t regValue;

  /* Check the parameters */
  assert_param(IS_DMA2D_LAYER(LayerIdx));
  assert_param(IS_DMA2D_OFFSET(hdma2d->LayerCfg[LayerIdx].InputOffset));
  if (hdma2d->Init.Mode != DMA2D_R2M)
 8001fa2:	687b      	ldr	r3, [r7, #4]
 8001fa4:	685b      	ldr	r3, [r3, #4]
 8001fa6:	f5b3 3f40 	cmp.w	r3, #196608	; 0x30000
      assert_param(IS_DMA2D_ALPHA_MODE(hdma2d->LayerCfg[LayerIdx].AlphaMode));
    }
  }

  /* Process locked */
  __HAL_LOCK(hdma2d);
 8001faa:	687b      	ldr	r3, [r7, #4]
 8001fac:	f893 3038 	ldrb.w	r3, [r3, #56]	; 0x38
 8001fb0:	2b01      	cmp	r3, #1
 8001fb2:	d101      	bne.n	8001fb8 <HAL_DMA2D_ConfigLayer+0x20>
 8001fb4:	2302      	movs	r3, #2
 8001fb6:	e079      	b.n	80020ac <HAL_DMA2D_ConfigLayer+0x114>
 8001fb8:	687b      	ldr	r3, [r7, #4]
 8001fba:	2201      	movs	r2, #1
 8001fbc:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

  /* Change DMA2D peripheral state */
  hdma2d->State = HAL_DMA2D_STATE_BUSY;
 8001fc0:	687b      	ldr	r3, [r7, #4]
 8001fc2:	2202      	movs	r2, #2
 8001fc4:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

  pLayerCfg = &hdma2d->LayerCfg[LayerIdx];
 8001fc8:	683b      	ldr	r3, [r7, #0]
 8001fca:	011b      	lsls	r3, r3, #4
 8001fcc:	3318      	adds	r3, #24
 8001fce:	687a      	ldr	r2, [r7, #4]
 8001fd0:	4413      	add	r3, r2
 8001fd2:	613b      	str	r3, [r7, #16]

  /* Prepare the value to be written to the BGPFCCR or FGPFCCR register */
  regValue = pLayerCfg->InputColorMode | (pLayerCfg->AlphaMode << DMA2D_BGPFCCR_AM_Pos);
 8001fd4:	693b      	ldr	r3, [r7, #16]
 8001fd6:	685a      	ldr	r2, [r3, #4]
 8001fd8:	693b      	ldr	r3, [r7, #16]
 8001fda:	689b      	ldr	r3, [r3, #8]
 8001fdc:	041b      	lsls	r3, r3, #16
 8001fde:	4313      	orrs	r3, r2
 8001fe0:	617b      	str	r3, [r7, #20]
  regMask  = DMA2D_BGPFCCR_CM | DMA2D_BGPFCCR_AM | DMA2D_BGPFCCR_ALPHA;
 8001fe2:	4b35      	ldr	r3, [pc, #212]	; (80020b8 <HAL_DMA2D_ConfigLayer+0x120>)
 8001fe4:	60fb      	str	r3, [r7, #12]


  if ((pLayerCfg->InputColorMode == DMA2D_INPUT_A4) || (pLayerCfg->InputColorMode == DMA2D_INPUT_A8))
 8001fe6:	693b      	ldr	r3, [r7, #16]
 8001fe8:	685b      	ldr	r3, [r3, #4]
 8001fea:	2b0a      	cmp	r3, #10
 8001fec:	d003      	beq.n	8001ff6 <HAL_DMA2D_ConfigLayer+0x5e>
 8001fee:	693b      	ldr	r3, [r7, #16]
 8001ff0:	685b      	ldr	r3, [r3, #4]
 8001ff2:	2b09      	cmp	r3, #9
 8001ff4:	d107      	bne.n	8002006 <HAL_DMA2D_ConfigLayer+0x6e>
  {
    regValue |= (pLayerCfg->InputAlpha & DMA2D_BGPFCCR_ALPHA);
 8001ff6:	693b      	ldr	r3, [r7, #16]
 8001ff8:	68db      	ldr	r3, [r3, #12]
 8001ffa:	f003 437f 	and.w	r3, r3, #4278190080	; 0xff000000
 8001ffe:	697a      	ldr	r2, [r7, #20]
 8002000:	4313      	orrs	r3, r2
 8002002:	617b      	str	r3, [r7, #20]
 8002004:	e005      	b.n	8002012 <HAL_DMA2D_ConfigLayer+0x7a>
  }
  else
  {
    regValue |= (pLayerCfg->InputAlpha << DMA2D_BGPFCCR_ALPHA_Pos);
 8002006:	693b      	ldr	r3, [r7, #16]
 8002008:	68db      	ldr	r3, [r3, #12]
 800200a:	061b      	lsls	r3, r3, #24
 800200c:	697a      	ldr	r2, [r7, #20]
 800200e:	4313      	orrs	r3, r2
 8002010:	617b      	str	r3, [r7, #20]
  }

  /* Configure the background DMA2D layer */
  if (LayerIdx == DMA2D_BACKGROUND_LAYER)
 8002012:	683b      	ldr	r3, [r7, #0]
 8002014:	2b00      	cmp	r3, #0
 8002016:	d120      	bne.n	800205a <HAL_DMA2D_ConfigLayer+0xc2>
  {
    /* Write DMA2D BGPFCCR register */
    MODIFY_REG(hdma2d->Instance->BGPFCCR, regMask, regValue);
 8002018:	687b      	ldr	r3, [r7, #4]
 800201a:	681b      	ldr	r3, [r3, #0]
 800201c:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 800201e:	68fb      	ldr	r3, [r7, #12]
 8002020:	43db      	mvns	r3, r3
 8002022:	ea02 0103 	and.w	r1, r2, r3
 8002026:	687b      	ldr	r3, [r7, #4]
 8002028:	681b      	ldr	r3, [r3, #0]
 800202a:	697a      	ldr	r2, [r7, #20]
 800202c:	430a      	orrs	r2, r1
 800202e:	625a      	str	r2, [r3, #36]	; 0x24

    /* DMA2D BGOR register configuration -------------------------------------*/
    WRITE_REG(hdma2d->Instance->BGOR, pLayerCfg->InputOffset);
 8002030:	687b      	ldr	r3, [r7, #4]
 8002032:	681b      	ldr	r3, [r3, #0]
 8002034:	693a      	ldr	r2, [r7, #16]
 8002036:	6812      	ldr	r2, [r2, #0]
 8002038:	619a      	str	r2, [r3, #24]

    /* DMA2D BGCOLR register configuration -------------------------------------*/
    if ((pLayerCfg->InputColorMode == DMA2D_INPUT_A4) || (pLayerCfg->InputColorMode == DMA2D_INPUT_A8))
 800203a:	693b      	ldr	r3, [r7, #16]
 800203c:	685b      	ldr	r3, [r3, #4]
 800203e:	2b0a      	cmp	r3, #10
 8002040:	d003      	beq.n	800204a <HAL_DMA2D_ConfigLayer+0xb2>
 8002042:	693b      	ldr	r3, [r7, #16]
 8002044:	685b      	ldr	r3, [r3, #4]
 8002046:	2b09      	cmp	r3, #9
 8002048:	d127      	bne.n	800209a <HAL_DMA2D_ConfigLayer+0x102>
    {
      WRITE_REG(hdma2d->Instance->BGCOLR, pLayerCfg->InputAlpha & (DMA2D_BGCOLR_BLUE | DMA2D_BGCOLR_GREEN | \
 800204a:	693b      	ldr	r3, [r7, #16]
 800204c:	68da      	ldr	r2, [r3, #12]
 800204e:	687b      	ldr	r3, [r7, #4]
 8002050:	681b      	ldr	r3, [r3, #0]
 8002052:	f022 427f 	bic.w	r2, r2, #4278190080	; 0xff000000
 8002056:	629a      	str	r2, [r3, #40]	; 0x28
 8002058:	e01f      	b.n	800209a <HAL_DMA2D_ConfigLayer+0x102>
  else
  {


    /* Write DMA2D FGPFCCR register */
    MODIFY_REG(hdma2d->Instance->FGPFCCR, regMask, regValue);
 800205a:	687b      	ldr	r3, [r7, #4]
 800205c:	681b      	ldr	r3, [r3, #0]
 800205e:	69da      	ldr	r2, [r3, #28]
 8002060:	68fb      	ldr	r3, [r7, #12]
 8002062:	43db      	mvns	r3, r3
 8002064:	ea02 0103 	and.w	r1, r2, r3
 8002068:	687b      	ldr	r3, [r7, #4]
 800206a:	681b      	ldr	r3, [r3, #0]
 800206c:	697a      	ldr	r2, [r7, #20]
 800206e:	430a      	orrs	r2, r1
 8002070:	61da      	str	r2, [r3, #28]

    /* DMA2D FGOR register configuration -------------------------------------*/
    WRITE_REG(hdma2d->Instance->FGOR, pLayerCfg->InputOffset);
 8002072:	687b      	ldr	r3, [r7, #4]
 8002074:	681b      	ldr	r3, [r3, #0]
 8002076:	693a      	ldr	r2, [r7, #16]
 8002078:	6812      	ldr	r2, [r2, #0]
 800207a:	611a      	str	r2, [r3, #16]

    /* DMA2D FGCOLR register configuration -------------------------------------*/
    if ((pLayerCfg->InputColorMode == DMA2D_INPUT_A4) || (pLayerCfg->InputColorMode == DMA2D_INPUT_A8))
 800207c:	693b      	ldr	r3, [r7, #16]
 800207e:	685b      	ldr	r3, [r3, #4]
 8002080:	2b0a      	cmp	r3, #10
 8002082:	d003      	beq.n	800208c <HAL_DMA2D_ConfigLayer+0xf4>
 8002084:	693b      	ldr	r3, [r7, #16]
 8002086:	685b      	ldr	r3, [r3, #4]
 8002088:	2b09      	cmp	r3, #9
 800208a:	d106      	bne.n	800209a <HAL_DMA2D_ConfigLayer+0x102>
    {
      WRITE_REG(hdma2d->Instance->FGCOLR, pLayerCfg->InputAlpha & (DMA2D_FGCOLR_BLUE | DMA2D_FGCOLR_GREEN | \
 800208c:	693b      	ldr	r3, [r7, #16]
 800208e:	68da      	ldr	r2, [r3, #12]
 8002090:	687b      	ldr	r3, [r7, #4]
 8002092:	681b      	ldr	r3, [r3, #0]
 8002094:	f022 427f 	bic.w	r2, r2, #4278190080	; 0xff000000
 8002098:	621a      	str	r2, [r3, #32]
                                                                   DMA2D_FGCOLR_RED));
    }
  }
  /* Initialize the DMA2D state*/
  hdma2d->State = HAL_DMA2D_STATE_READY;
 800209a:	687b      	ldr	r3, [r7, #4]
 800209c:	2201      	movs	r2, #1
 800209e:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

  /* Process unlocked */
  __HAL_UNLOCK(hdma2d);
 80020a2:	687b      	ldr	r3, [r7, #4]
 80020a4:	2200      	movs	r2, #0
 80020a6:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

  return HAL_OK;
 80020aa:	2300      	movs	r3, #0
}
 80020ac:	4618      	mov	r0, r3
 80020ae:	371c      	adds	r7, #28
 80020b0:	46bd      	mov	sp, r7
 80020b2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80020b6:	4770      	bx	lr
 80020b8:	ff03000f 	.word	0xff03000f

080020bc <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 80020bc:	b480      	push	{r7}
 80020be:	b089      	sub	sp, #36	; 0x24
 80020c0:	af00      	add	r7, sp, #0
 80020c2:	6078      	str	r0, [r7, #4]
 80020c4:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 80020c6:	2300      	movs	r3, #0
 80020c8:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 80020ca:	2300      	movs	r3, #0
 80020cc:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 80020ce:	2300      	movs	r3, #0
 80020d0:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 80020d2:	2300      	movs	r3, #0
 80020d4:	61fb      	str	r3, [r7, #28]
 80020d6:	e177      	b.n	80023c8 <HAL_GPIO_Init+0x30c>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 80020d8:	2201      	movs	r2, #1
 80020da:	69fb      	ldr	r3, [r7, #28]
 80020dc:	fa02 f303 	lsl.w	r3, r2, r3
 80020e0:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 80020e2:	683b      	ldr	r3, [r7, #0]
 80020e4:	681b      	ldr	r3, [r3, #0]
 80020e6:	697a      	ldr	r2, [r7, #20]
 80020e8:	4013      	ands	r3, r2
 80020ea:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 80020ec:	693a      	ldr	r2, [r7, #16]
 80020ee:	697b      	ldr	r3, [r7, #20]
 80020f0:	429a      	cmp	r2, r3
 80020f2:	f040 8166 	bne.w	80023c2 <HAL_GPIO_Init+0x306>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 80020f6:	683b      	ldr	r3, [r7, #0]
 80020f8:	685b      	ldr	r3, [r3, #4]
 80020fa:	f003 0303 	and.w	r3, r3, #3
 80020fe:	2b01      	cmp	r3, #1
 8002100:	d005      	beq.n	800210e <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8002102:	683b      	ldr	r3, [r7, #0]
 8002104:	685b      	ldr	r3, [r3, #4]
 8002106:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 800210a:	2b02      	cmp	r3, #2
 800210c:	d130      	bne.n	8002170 <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 800210e:	687b      	ldr	r3, [r7, #4]
 8002110:	689b      	ldr	r3, [r3, #8]
 8002112:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 8002114:	69fb      	ldr	r3, [r7, #28]
 8002116:	005b      	lsls	r3, r3, #1
 8002118:	2203      	movs	r2, #3
 800211a:	fa02 f303 	lsl.w	r3, r2, r3
 800211e:	43db      	mvns	r3, r3
 8002120:	69ba      	ldr	r2, [r7, #24]
 8002122:	4013      	ands	r3, r2
 8002124:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8002126:	683b      	ldr	r3, [r7, #0]
 8002128:	68da      	ldr	r2, [r3, #12]
 800212a:	69fb      	ldr	r3, [r7, #28]
 800212c:	005b      	lsls	r3, r3, #1
 800212e:	fa02 f303 	lsl.w	r3, r2, r3
 8002132:	69ba      	ldr	r2, [r7, #24]
 8002134:	4313      	orrs	r3, r2
 8002136:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8002138:	687b      	ldr	r3, [r7, #4]
 800213a:	69ba      	ldr	r2, [r7, #24]
 800213c:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 800213e:	687b      	ldr	r3, [r7, #4]
 8002140:	685b      	ldr	r3, [r3, #4]
 8002142:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8002144:	2201      	movs	r2, #1
 8002146:	69fb      	ldr	r3, [r7, #28]
 8002148:	fa02 f303 	lsl.w	r3, r2, r3
 800214c:	43db      	mvns	r3, r3
 800214e:	69ba      	ldr	r2, [r7, #24]
 8002150:	4013      	ands	r3, r2
 8002152:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8002154:	683b      	ldr	r3, [r7, #0]
 8002156:	685b      	ldr	r3, [r3, #4]
 8002158:	091b      	lsrs	r3, r3, #4
 800215a:	f003 0201 	and.w	r2, r3, #1
 800215e:	69fb      	ldr	r3, [r7, #28]
 8002160:	fa02 f303 	lsl.w	r3, r2, r3
 8002164:	69ba      	ldr	r2, [r7, #24]
 8002166:	4313      	orrs	r3, r2
 8002168:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 800216a:	687b      	ldr	r3, [r7, #4]
 800216c:	69ba      	ldr	r2, [r7, #24]
 800216e:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8002170:	683b      	ldr	r3, [r7, #0]
 8002172:	685b      	ldr	r3, [r3, #4]
 8002174:	f003 0303 	and.w	r3, r3, #3
 8002178:	2b03      	cmp	r3, #3
 800217a:	d017      	beq.n	80021ac <HAL_GPIO_Init+0xf0>
      {
        /* Check the parameters */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
        
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 800217c:	687b      	ldr	r3, [r7, #4]
 800217e:	68db      	ldr	r3, [r3, #12]
 8002180:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 8002182:	69fb      	ldr	r3, [r7, #28]
 8002184:	005b      	lsls	r3, r3, #1
 8002186:	2203      	movs	r2, #3
 8002188:	fa02 f303 	lsl.w	r3, r2, r3
 800218c:	43db      	mvns	r3, r3
 800218e:	69ba      	ldr	r2, [r7, #24]
 8002190:	4013      	ands	r3, r2
 8002192:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8002194:	683b      	ldr	r3, [r7, #0]
 8002196:	689a      	ldr	r2, [r3, #8]
 8002198:	69fb      	ldr	r3, [r7, #28]
 800219a:	005b      	lsls	r3, r3, #1
 800219c:	fa02 f303 	lsl.w	r3, r2, r3
 80021a0:	69ba      	ldr	r2, [r7, #24]
 80021a2:	4313      	orrs	r3, r2
 80021a4:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 80021a6:	687b      	ldr	r3, [r7, #4]
 80021a8:	69ba      	ldr	r2, [r7, #24]
 80021aa:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 80021ac:	683b      	ldr	r3, [r7, #0]
 80021ae:	685b      	ldr	r3, [r3, #4]
 80021b0:	f003 0303 	and.w	r3, r3, #3
 80021b4:	2b02      	cmp	r3, #2
 80021b6:	d123      	bne.n	8002200 <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 80021b8:	69fb      	ldr	r3, [r7, #28]
 80021ba:	08da      	lsrs	r2, r3, #3
 80021bc:	687b      	ldr	r3, [r7, #4]
 80021be:	3208      	adds	r2, #8
 80021c0:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80021c4:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 80021c6:	69fb      	ldr	r3, [r7, #28]
 80021c8:	f003 0307 	and.w	r3, r3, #7
 80021cc:	009b      	lsls	r3, r3, #2
 80021ce:	220f      	movs	r2, #15
 80021d0:	fa02 f303 	lsl.w	r3, r2, r3
 80021d4:	43db      	mvns	r3, r3
 80021d6:	69ba      	ldr	r2, [r7, #24]
 80021d8:	4013      	ands	r3, r2
 80021da:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 80021dc:	683b      	ldr	r3, [r7, #0]
 80021de:	691a      	ldr	r2, [r3, #16]
 80021e0:	69fb      	ldr	r3, [r7, #28]
 80021e2:	f003 0307 	and.w	r3, r3, #7
 80021e6:	009b      	lsls	r3, r3, #2
 80021e8:	fa02 f303 	lsl.w	r3, r2, r3
 80021ec:	69ba      	ldr	r2, [r7, #24]
 80021ee:	4313      	orrs	r3, r2
 80021f0:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 80021f2:	69fb      	ldr	r3, [r7, #28]
 80021f4:	08da      	lsrs	r2, r3, #3
 80021f6:	687b      	ldr	r3, [r7, #4]
 80021f8:	3208      	adds	r2, #8
 80021fa:	69b9      	ldr	r1, [r7, #24]
 80021fc:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8002200:	687b      	ldr	r3, [r7, #4]
 8002202:	681b      	ldr	r3, [r3, #0]
 8002204:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 8002206:	69fb      	ldr	r3, [r7, #28]
 8002208:	005b      	lsls	r3, r3, #1
 800220a:	2203      	movs	r2, #3
 800220c:	fa02 f303 	lsl.w	r3, r2, r3
 8002210:	43db      	mvns	r3, r3
 8002212:	69ba      	ldr	r2, [r7, #24]
 8002214:	4013      	ands	r3, r2
 8002216:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8002218:	683b      	ldr	r3, [r7, #0]
 800221a:	685b      	ldr	r3, [r3, #4]
 800221c:	f003 0203 	and.w	r2, r3, #3
 8002220:	69fb      	ldr	r3, [r7, #28]
 8002222:	005b      	lsls	r3, r3, #1
 8002224:	fa02 f303 	lsl.w	r3, r2, r3
 8002228:	69ba      	ldr	r2, [r7, #24]
 800222a:	4313      	orrs	r3, r2
 800222c:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 800222e:	687b      	ldr	r3, [r7, #4]
 8002230:	69ba      	ldr	r2, [r7, #24]
 8002232:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 8002234:	683b      	ldr	r3, [r7, #0]
 8002236:	685b      	ldr	r3, [r3, #4]
 8002238:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 800223c:	2b00      	cmp	r3, #0
 800223e:	f000 80c0 	beq.w	80023c2 <HAL_GPIO_Init+0x306>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8002242:	2300      	movs	r3, #0
 8002244:	60fb      	str	r3, [r7, #12]
 8002246:	4b66      	ldr	r3, [pc, #408]	; (80023e0 <HAL_GPIO_Init+0x324>)
 8002248:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800224a:	4a65      	ldr	r2, [pc, #404]	; (80023e0 <HAL_GPIO_Init+0x324>)
 800224c:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8002250:	6453      	str	r3, [r2, #68]	; 0x44
 8002252:	4b63      	ldr	r3, [pc, #396]	; (80023e0 <HAL_GPIO_Init+0x324>)
 8002254:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002256:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800225a:	60fb      	str	r3, [r7, #12]
 800225c:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 800225e:	4a61      	ldr	r2, [pc, #388]	; (80023e4 <HAL_GPIO_Init+0x328>)
 8002260:	69fb      	ldr	r3, [r7, #28]
 8002262:	089b      	lsrs	r3, r3, #2
 8002264:	3302      	adds	r3, #2
 8002266:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800226a:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 800226c:	69fb      	ldr	r3, [r7, #28]
 800226e:	f003 0303 	and.w	r3, r3, #3
 8002272:	009b      	lsls	r3, r3, #2
 8002274:	220f      	movs	r2, #15
 8002276:	fa02 f303 	lsl.w	r3, r2, r3
 800227a:	43db      	mvns	r3, r3
 800227c:	69ba      	ldr	r2, [r7, #24]
 800227e:	4013      	ands	r3, r2
 8002280:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 8002282:	687b      	ldr	r3, [r7, #4]
 8002284:	4a58      	ldr	r2, [pc, #352]	; (80023e8 <HAL_GPIO_Init+0x32c>)
 8002286:	4293      	cmp	r3, r2
 8002288:	d037      	beq.n	80022fa <HAL_GPIO_Init+0x23e>
 800228a:	687b      	ldr	r3, [r7, #4]
 800228c:	4a57      	ldr	r2, [pc, #348]	; (80023ec <HAL_GPIO_Init+0x330>)
 800228e:	4293      	cmp	r3, r2
 8002290:	d031      	beq.n	80022f6 <HAL_GPIO_Init+0x23a>
 8002292:	687b      	ldr	r3, [r7, #4]
 8002294:	4a56      	ldr	r2, [pc, #344]	; (80023f0 <HAL_GPIO_Init+0x334>)
 8002296:	4293      	cmp	r3, r2
 8002298:	d02b      	beq.n	80022f2 <HAL_GPIO_Init+0x236>
 800229a:	687b      	ldr	r3, [r7, #4]
 800229c:	4a55      	ldr	r2, [pc, #340]	; (80023f4 <HAL_GPIO_Init+0x338>)
 800229e:	4293      	cmp	r3, r2
 80022a0:	d025      	beq.n	80022ee <HAL_GPIO_Init+0x232>
 80022a2:	687b      	ldr	r3, [r7, #4]
 80022a4:	4a54      	ldr	r2, [pc, #336]	; (80023f8 <HAL_GPIO_Init+0x33c>)
 80022a6:	4293      	cmp	r3, r2
 80022a8:	d01f      	beq.n	80022ea <HAL_GPIO_Init+0x22e>
 80022aa:	687b      	ldr	r3, [r7, #4]
 80022ac:	4a53      	ldr	r2, [pc, #332]	; (80023fc <HAL_GPIO_Init+0x340>)
 80022ae:	4293      	cmp	r3, r2
 80022b0:	d019      	beq.n	80022e6 <HAL_GPIO_Init+0x22a>
 80022b2:	687b      	ldr	r3, [r7, #4]
 80022b4:	4a52      	ldr	r2, [pc, #328]	; (8002400 <HAL_GPIO_Init+0x344>)
 80022b6:	4293      	cmp	r3, r2
 80022b8:	d013      	beq.n	80022e2 <HAL_GPIO_Init+0x226>
 80022ba:	687b      	ldr	r3, [r7, #4]
 80022bc:	4a51      	ldr	r2, [pc, #324]	; (8002404 <HAL_GPIO_Init+0x348>)
 80022be:	4293      	cmp	r3, r2
 80022c0:	d00d      	beq.n	80022de <HAL_GPIO_Init+0x222>
 80022c2:	687b      	ldr	r3, [r7, #4]
 80022c4:	4a50      	ldr	r2, [pc, #320]	; (8002408 <HAL_GPIO_Init+0x34c>)
 80022c6:	4293      	cmp	r3, r2
 80022c8:	d007      	beq.n	80022da <HAL_GPIO_Init+0x21e>
 80022ca:	687b      	ldr	r3, [r7, #4]
 80022cc:	4a4f      	ldr	r2, [pc, #316]	; (800240c <HAL_GPIO_Init+0x350>)
 80022ce:	4293      	cmp	r3, r2
 80022d0:	d101      	bne.n	80022d6 <HAL_GPIO_Init+0x21a>
 80022d2:	2309      	movs	r3, #9
 80022d4:	e012      	b.n	80022fc <HAL_GPIO_Init+0x240>
 80022d6:	230a      	movs	r3, #10
 80022d8:	e010      	b.n	80022fc <HAL_GPIO_Init+0x240>
 80022da:	2308      	movs	r3, #8
 80022dc:	e00e      	b.n	80022fc <HAL_GPIO_Init+0x240>
 80022de:	2307      	movs	r3, #7
 80022e0:	e00c      	b.n	80022fc <HAL_GPIO_Init+0x240>
 80022e2:	2306      	movs	r3, #6
 80022e4:	e00a      	b.n	80022fc <HAL_GPIO_Init+0x240>
 80022e6:	2305      	movs	r3, #5
 80022e8:	e008      	b.n	80022fc <HAL_GPIO_Init+0x240>
 80022ea:	2304      	movs	r3, #4
 80022ec:	e006      	b.n	80022fc <HAL_GPIO_Init+0x240>
 80022ee:	2303      	movs	r3, #3
 80022f0:	e004      	b.n	80022fc <HAL_GPIO_Init+0x240>
 80022f2:	2302      	movs	r3, #2
 80022f4:	e002      	b.n	80022fc <HAL_GPIO_Init+0x240>
 80022f6:	2301      	movs	r3, #1
 80022f8:	e000      	b.n	80022fc <HAL_GPIO_Init+0x240>
 80022fa:	2300      	movs	r3, #0
 80022fc:	69fa      	ldr	r2, [r7, #28]
 80022fe:	f002 0203 	and.w	r2, r2, #3
 8002302:	0092      	lsls	r2, r2, #2
 8002304:	4093      	lsls	r3, r2
 8002306:	69ba      	ldr	r2, [r7, #24]
 8002308:	4313      	orrs	r3, r2
 800230a:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 800230c:	4935      	ldr	r1, [pc, #212]	; (80023e4 <HAL_GPIO_Init+0x328>)
 800230e:	69fb      	ldr	r3, [r7, #28]
 8002310:	089b      	lsrs	r3, r3, #2
 8002312:	3302      	adds	r3, #2
 8002314:	69ba      	ldr	r2, [r7, #24]
 8002316:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 800231a:	4b3d      	ldr	r3, [pc, #244]	; (8002410 <HAL_GPIO_Init+0x354>)
 800231c:	689b      	ldr	r3, [r3, #8]
 800231e:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8002320:	693b      	ldr	r3, [r7, #16]
 8002322:	43db      	mvns	r3, r3
 8002324:	69ba      	ldr	r2, [r7, #24]
 8002326:	4013      	ands	r3, r2
 8002328:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 800232a:	683b      	ldr	r3, [r7, #0]
 800232c:	685b      	ldr	r3, [r3, #4]
 800232e:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8002332:	2b00      	cmp	r3, #0
 8002334:	d003      	beq.n	800233e <HAL_GPIO_Init+0x282>
        {
          temp |= iocurrent;
 8002336:	69ba      	ldr	r2, [r7, #24]
 8002338:	693b      	ldr	r3, [r7, #16]
 800233a:	4313      	orrs	r3, r2
 800233c:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 800233e:	4a34      	ldr	r2, [pc, #208]	; (8002410 <HAL_GPIO_Init+0x354>)
 8002340:	69bb      	ldr	r3, [r7, #24]
 8002342:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8002344:	4b32      	ldr	r3, [pc, #200]	; (8002410 <HAL_GPIO_Init+0x354>)
 8002346:	68db      	ldr	r3, [r3, #12]
 8002348:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 800234a:	693b      	ldr	r3, [r7, #16]
 800234c:	43db      	mvns	r3, r3
 800234e:	69ba      	ldr	r2, [r7, #24]
 8002350:	4013      	ands	r3, r2
 8002352:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 8002354:	683b      	ldr	r3, [r7, #0]
 8002356:	685b      	ldr	r3, [r3, #4]
 8002358:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 800235c:	2b00      	cmp	r3, #0
 800235e:	d003      	beq.n	8002368 <HAL_GPIO_Init+0x2ac>
        {
          temp |= iocurrent;
 8002360:	69ba      	ldr	r2, [r7, #24]
 8002362:	693b      	ldr	r3, [r7, #16]
 8002364:	4313      	orrs	r3, r2
 8002366:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 8002368:	4a29      	ldr	r2, [pc, #164]	; (8002410 <HAL_GPIO_Init+0x354>)
 800236a:	69bb      	ldr	r3, [r7, #24]
 800236c:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 800236e:	4b28      	ldr	r3, [pc, #160]	; (8002410 <HAL_GPIO_Init+0x354>)
 8002370:	685b      	ldr	r3, [r3, #4]
 8002372:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8002374:	693b      	ldr	r3, [r7, #16]
 8002376:	43db      	mvns	r3, r3
 8002378:	69ba      	ldr	r2, [r7, #24]
 800237a:	4013      	ands	r3, r2
 800237c:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 800237e:	683b      	ldr	r3, [r7, #0]
 8002380:	685b      	ldr	r3, [r3, #4]
 8002382:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002386:	2b00      	cmp	r3, #0
 8002388:	d003      	beq.n	8002392 <HAL_GPIO_Init+0x2d6>
        {
          temp |= iocurrent;
 800238a:	69ba      	ldr	r2, [r7, #24]
 800238c:	693b      	ldr	r3, [r7, #16]
 800238e:	4313      	orrs	r3, r2
 8002390:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 8002392:	4a1f      	ldr	r2, [pc, #124]	; (8002410 <HAL_GPIO_Init+0x354>)
 8002394:	69bb      	ldr	r3, [r7, #24]
 8002396:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8002398:	4b1d      	ldr	r3, [pc, #116]	; (8002410 <HAL_GPIO_Init+0x354>)
 800239a:	681b      	ldr	r3, [r3, #0]
 800239c:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 800239e:	693b      	ldr	r3, [r7, #16]
 80023a0:	43db      	mvns	r3, r3
 80023a2:	69ba      	ldr	r2, [r7, #24]
 80023a4:	4013      	ands	r3, r2
 80023a6:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 80023a8:	683b      	ldr	r3, [r7, #0]
 80023aa:	685b      	ldr	r3, [r3, #4]
 80023ac:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80023b0:	2b00      	cmp	r3, #0
 80023b2:	d003      	beq.n	80023bc <HAL_GPIO_Init+0x300>
        {
          temp |= iocurrent;
 80023b4:	69ba      	ldr	r2, [r7, #24]
 80023b6:	693b      	ldr	r3, [r7, #16]
 80023b8:	4313      	orrs	r3, r2
 80023ba:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 80023bc:	4a14      	ldr	r2, [pc, #80]	; (8002410 <HAL_GPIO_Init+0x354>)
 80023be:	69bb      	ldr	r3, [r7, #24]
 80023c0:	6013      	str	r3, [r2, #0]
  for(position = 0U; position < GPIO_NUMBER; position++)
 80023c2:	69fb      	ldr	r3, [r7, #28]
 80023c4:	3301      	adds	r3, #1
 80023c6:	61fb      	str	r3, [r7, #28]
 80023c8:	69fb      	ldr	r3, [r7, #28]
 80023ca:	2b0f      	cmp	r3, #15
 80023cc:	f67f ae84 	bls.w	80020d8 <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 80023d0:	bf00      	nop
 80023d2:	bf00      	nop
 80023d4:	3724      	adds	r7, #36	; 0x24
 80023d6:	46bd      	mov	sp, r7
 80023d8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80023dc:	4770      	bx	lr
 80023de:	bf00      	nop
 80023e0:	40023800 	.word	0x40023800
 80023e4:	40013800 	.word	0x40013800
 80023e8:	40020000 	.word	0x40020000
 80023ec:	40020400 	.word	0x40020400
 80023f0:	40020800 	.word	0x40020800
 80023f4:	40020c00 	.word	0x40020c00
 80023f8:	40021000 	.word	0x40021000
 80023fc:	40021400 	.word	0x40021400
 8002400:	40021800 	.word	0x40021800
 8002404:	40021c00 	.word	0x40021c00
 8002408:	40022000 	.word	0x40022000
 800240c:	40022400 	.word	0x40022400
 8002410:	40013c00 	.word	0x40013c00

08002414 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8002414:	b480      	push	{r7}
 8002416:	b083      	sub	sp, #12
 8002418:	af00      	add	r7, sp, #0
 800241a:	6078      	str	r0, [r7, #4]
 800241c:	460b      	mov	r3, r1
 800241e:	807b      	strh	r3, [r7, #2]
 8002420:	4613      	mov	r3, r2
 8002422:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8002424:	787b      	ldrb	r3, [r7, #1]
 8002426:	2b00      	cmp	r3, #0
 8002428:	d003      	beq.n	8002432 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 800242a:	887a      	ldrh	r2, [r7, #2]
 800242c:	687b      	ldr	r3, [r7, #4]
 800242e:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 8002430:	e003      	b.n	800243a <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 8002432:	887b      	ldrh	r3, [r7, #2]
 8002434:	041a      	lsls	r2, r3, #16
 8002436:	687b      	ldr	r3, [r7, #4]
 8002438:	619a      	str	r2, [r3, #24]
}
 800243a:	bf00      	nop
 800243c:	370c      	adds	r7, #12
 800243e:	46bd      	mov	sp, r7
 8002440:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002444:	4770      	bx	lr

08002446 <HAL_HCD_IRQHandler>:
  * @brief  Handle HCD interrupt request.
  * @param  hhcd HCD handle
  * @retval None
  */
void HAL_HCD_IRQHandler(HCD_HandleTypeDef *hhcd)
{
 8002446:	b580      	push	{r7, lr}
 8002448:	b086      	sub	sp, #24
 800244a:	af00      	add	r7, sp, #0
 800244c:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx = hhcd->Instance;
 800244e:	687b      	ldr	r3, [r7, #4]
 8002450:	681b      	ldr	r3, [r3, #0]
 8002452:	613b      	str	r3, [r7, #16]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8002454:	693b      	ldr	r3, [r7, #16]
 8002456:	60fb      	str	r3, [r7, #12]
  uint32_t i;
  uint32_t interrupt;

  /* Ensure that we are in device mode */
  if (USB_GetMode(hhcd->Instance) == USB_OTG_MODE_HOST)
 8002458:	687b      	ldr	r3, [r7, #4]
 800245a:	681b      	ldr	r3, [r3, #0]
 800245c:	4618      	mov	r0, r3
 800245e:	f003 ff86 	bl	800636e <USB_GetMode>
 8002462:	4603      	mov	r3, r0
 8002464:	2b01      	cmp	r3, #1
 8002466:	f040 80f6 	bne.w	8002656 <HAL_HCD_IRQHandler+0x210>
  {
    /* Avoid spurious interrupt */
    if (__HAL_HCD_IS_INVALID_INTERRUPT(hhcd))
 800246a:	687b      	ldr	r3, [r7, #4]
 800246c:	681b      	ldr	r3, [r3, #0]
 800246e:	4618      	mov	r0, r3
 8002470:	f003 ff6a 	bl	8006348 <USB_ReadInterrupts>
 8002474:	4603      	mov	r3, r0
 8002476:	2b00      	cmp	r3, #0
 8002478:	f000 80ec 	beq.w	8002654 <HAL_HCD_IRQHandler+0x20e>
    {
      return;
    }

    if (__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_PXFR_INCOMPISOOUT))
 800247c:	687b      	ldr	r3, [r7, #4]
 800247e:	681b      	ldr	r3, [r3, #0]
 8002480:	4618      	mov	r0, r3
 8002482:	f003 ff61 	bl	8006348 <USB_ReadInterrupts>
 8002486:	4603      	mov	r3, r0
 8002488:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 800248c:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 8002490:	d104      	bne.n	800249c <HAL_HCD_IRQHandler+0x56>
    {
      /* Incorrect mode, acknowledge the interrupt */
      __HAL_HCD_CLEAR_FLAG(hhcd, USB_OTG_GINTSTS_PXFR_INCOMPISOOUT);
 8002492:	687b      	ldr	r3, [r7, #4]
 8002494:	681b      	ldr	r3, [r3, #0]
 8002496:	f44f 1200 	mov.w	r2, #2097152	; 0x200000
 800249a:	615a      	str	r2, [r3, #20]
    }

    if (__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_IISOIXFR))
 800249c:	687b      	ldr	r3, [r7, #4]
 800249e:	681b      	ldr	r3, [r3, #0]
 80024a0:	4618      	mov	r0, r3
 80024a2:	f003 ff51 	bl	8006348 <USB_ReadInterrupts>
 80024a6:	4603      	mov	r3, r0
 80024a8:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 80024ac:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 80024b0:	d104      	bne.n	80024bc <HAL_HCD_IRQHandler+0x76>
    {
      /* Incorrect mode, acknowledge the interrupt */
      __HAL_HCD_CLEAR_FLAG(hhcd, USB_OTG_GINTSTS_IISOIXFR);
 80024b2:	687b      	ldr	r3, [r7, #4]
 80024b4:	681b      	ldr	r3, [r3, #0]
 80024b6:	f44f 1280 	mov.w	r2, #1048576	; 0x100000
 80024ba:	615a      	str	r2, [r3, #20]
    }

    if (__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_PTXFE))
 80024bc:	687b      	ldr	r3, [r7, #4]
 80024be:	681b      	ldr	r3, [r3, #0]
 80024c0:	4618      	mov	r0, r3
 80024c2:	f003 ff41 	bl	8006348 <USB_ReadInterrupts>
 80024c6:	4603      	mov	r3, r0
 80024c8:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 80024cc:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 80024d0:	d104      	bne.n	80024dc <HAL_HCD_IRQHandler+0x96>
    {
      /* Incorrect mode, acknowledge the interrupt */
      __HAL_HCD_CLEAR_FLAG(hhcd, USB_OTG_GINTSTS_PTXFE);
 80024d2:	687b      	ldr	r3, [r7, #4]
 80024d4:	681b      	ldr	r3, [r3, #0]
 80024d6:	f04f 6280 	mov.w	r2, #67108864	; 0x4000000
 80024da:	615a      	str	r2, [r3, #20]
    }

    if (__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_MMIS))
 80024dc:	687b      	ldr	r3, [r7, #4]
 80024de:	681b      	ldr	r3, [r3, #0]
 80024e0:	4618      	mov	r0, r3
 80024e2:	f003 ff31 	bl	8006348 <USB_ReadInterrupts>
 80024e6:	4603      	mov	r3, r0
 80024e8:	f003 0302 	and.w	r3, r3, #2
 80024ec:	2b02      	cmp	r3, #2
 80024ee:	d103      	bne.n	80024f8 <HAL_HCD_IRQHandler+0xb2>
    {
      /* Incorrect mode, acknowledge the interrupt */
      __HAL_HCD_CLEAR_FLAG(hhcd, USB_OTG_GINTSTS_MMIS);
 80024f0:	687b      	ldr	r3, [r7, #4]
 80024f2:	681b      	ldr	r3, [r3, #0]
 80024f4:	2202      	movs	r2, #2
 80024f6:	615a      	str	r2, [r3, #20]
    }

    /* Handle Host Disconnect Interrupts */
    if (__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_DISCINT))
 80024f8:	687b      	ldr	r3, [r7, #4]
 80024fa:	681b      	ldr	r3, [r3, #0]
 80024fc:	4618      	mov	r0, r3
 80024fe:	f003 ff23 	bl	8006348 <USB_ReadInterrupts>
 8002502:	4603      	mov	r3, r0
 8002504:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8002508:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 800250c:	d11c      	bne.n	8002548 <HAL_HCD_IRQHandler+0x102>
    {
      __HAL_HCD_CLEAR_FLAG(hhcd, USB_OTG_GINTSTS_DISCINT);
 800250e:	687b      	ldr	r3, [r7, #4]
 8002510:	681b      	ldr	r3, [r3, #0]
 8002512:	f04f 5200 	mov.w	r2, #536870912	; 0x20000000
 8002516:	615a      	str	r2, [r3, #20]

      if ((USBx_HPRT0 & USB_OTG_HPRT_PCSTS) == 0U)
 8002518:	68fb      	ldr	r3, [r7, #12]
 800251a:	f503 6388 	add.w	r3, r3, #1088	; 0x440
 800251e:	681b      	ldr	r3, [r3, #0]
 8002520:	f003 0301 	and.w	r3, r3, #1
 8002524:	2b00      	cmp	r3, #0
 8002526:	d10f      	bne.n	8002548 <HAL_HCD_IRQHandler+0x102>
      {
        /* Flush USB Fifo */
        (void)USB_FlushTxFifo(USBx, 0x10U);
 8002528:	2110      	movs	r1, #16
 800252a:	6938      	ldr	r0, [r7, #16]
 800252c:	f003 fe50 	bl	80061d0 <USB_FlushTxFifo>
        (void)USB_FlushRxFifo(USBx);
 8002530:	6938      	ldr	r0, [r7, #16]
 8002532:	f003 fe81 	bl	8006238 <USB_FlushRxFifo>

        /* Restore FS Clock */
        (void)USB_InitFSLSPClkSel(hhcd->Instance, HCFG_48_MHZ);
 8002536:	687b      	ldr	r3, [r7, #4]
 8002538:	681b      	ldr	r3, [r3, #0]
 800253a:	2101      	movs	r1, #1
 800253c:	4618      	mov	r0, r3
 800253e:	f003 ff24 	bl	800638a <USB_InitFSLSPClkSel>

        /* Handle Host Port Disconnect Interrupt */
#if (USE_HAL_HCD_REGISTER_CALLBACKS == 1U)
        hhcd->DisconnectCallback(hhcd);
#else
        HAL_HCD_Disconnect_Callback(hhcd);
 8002542:	6878      	ldr	r0, [r7, #4]
 8002544:	f007 f95a 	bl	80097fc <HAL_HCD_Disconnect_Callback>
#endif /* USE_HAL_HCD_REGISTER_CALLBACKS */
      }
    }

    /* Handle Host Port Interrupts */
    if (__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_HPRTINT))
 8002548:	687b      	ldr	r3, [r7, #4]
 800254a:	681b      	ldr	r3, [r3, #0]
 800254c:	4618      	mov	r0, r3
 800254e:	f003 fefb 	bl	8006348 <USB_ReadInterrupts>
 8002552:	4603      	mov	r3, r0
 8002554:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8002558:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 800255c:	d102      	bne.n	8002564 <HAL_HCD_IRQHandler+0x11e>
    {
      HCD_Port_IRQHandler(hhcd);
 800255e:	6878      	ldr	r0, [r7, #4]
 8002560:	f001 f829 	bl	80035b6 <HCD_Port_IRQHandler>
    }

    /* Handle Host SOF Interrupt */
    if (__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_SOF))
 8002564:	687b      	ldr	r3, [r7, #4]
 8002566:	681b      	ldr	r3, [r3, #0]
 8002568:	4618      	mov	r0, r3
 800256a:	f003 feed 	bl	8006348 <USB_ReadInterrupts>
 800256e:	4603      	mov	r3, r0
 8002570:	f003 0308 	and.w	r3, r3, #8
 8002574:	2b08      	cmp	r3, #8
 8002576:	d106      	bne.n	8002586 <HAL_HCD_IRQHandler+0x140>
    {
#if (USE_HAL_HCD_REGISTER_CALLBACKS == 1U)
      hhcd->SOFCallback(hhcd);
#else
      HAL_HCD_SOF_Callback(hhcd);
 8002578:	6878      	ldr	r0, [r7, #4]
 800257a:	f007 f923 	bl	80097c4 <HAL_HCD_SOF_Callback>
#endif /* USE_HAL_HCD_REGISTER_CALLBACKS */

      __HAL_HCD_CLEAR_FLAG(hhcd, USB_OTG_GINTSTS_SOF);
 800257e:	687b      	ldr	r3, [r7, #4]
 8002580:	681b      	ldr	r3, [r3, #0]
 8002582:	2208      	movs	r2, #8
 8002584:	615a      	str	r2, [r3, #20]
    }

    /* Handle Rx Queue Level Interrupts */
    if ((__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_RXFLVL)) != 0U)
 8002586:	687b      	ldr	r3, [r7, #4]
 8002588:	681b      	ldr	r3, [r3, #0]
 800258a:	4618      	mov	r0, r3
 800258c:	f003 fedc 	bl	8006348 <USB_ReadInterrupts>
 8002590:	4603      	mov	r3, r0
 8002592:	f003 0310 	and.w	r3, r3, #16
 8002596:	2b10      	cmp	r3, #16
 8002598:	d101      	bne.n	800259e <HAL_HCD_IRQHandler+0x158>
 800259a:	2301      	movs	r3, #1
 800259c:	e000      	b.n	80025a0 <HAL_HCD_IRQHandler+0x15a>
 800259e:	2300      	movs	r3, #0
 80025a0:	2b00      	cmp	r3, #0
 80025a2:	d012      	beq.n	80025ca <HAL_HCD_IRQHandler+0x184>
    {
      USB_MASK_INTERRUPT(hhcd->Instance, USB_OTG_GINTSTS_RXFLVL);
 80025a4:	687b      	ldr	r3, [r7, #4]
 80025a6:	681b      	ldr	r3, [r3, #0]
 80025a8:	699a      	ldr	r2, [r3, #24]
 80025aa:	687b      	ldr	r3, [r7, #4]
 80025ac:	681b      	ldr	r3, [r3, #0]
 80025ae:	f022 0210 	bic.w	r2, r2, #16
 80025b2:	619a      	str	r2, [r3, #24]

      HCD_RXQLVL_IRQHandler(hhcd);
 80025b4:	6878      	ldr	r0, [r7, #4]
 80025b6:	f000 ff2c 	bl	8003412 <HCD_RXQLVL_IRQHandler>

      USB_UNMASK_INTERRUPT(hhcd->Instance, USB_OTG_GINTSTS_RXFLVL);
 80025ba:	687b      	ldr	r3, [r7, #4]
 80025bc:	681b      	ldr	r3, [r3, #0]
 80025be:	699a      	ldr	r2, [r3, #24]
 80025c0:	687b      	ldr	r3, [r7, #4]
 80025c2:	681b      	ldr	r3, [r3, #0]
 80025c4:	f042 0210 	orr.w	r2, r2, #16
 80025c8:	619a      	str	r2, [r3, #24]
    }

    /* Handle Host channel Interrupt */
    if (__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_HCINT))
 80025ca:	687b      	ldr	r3, [r7, #4]
 80025cc:	681b      	ldr	r3, [r3, #0]
 80025ce:	4618      	mov	r0, r3
 80025d0:	f003 feba 	bl	8006348 <USB_ReadInterrupts>
 80025d4:	4603      	mov	r3, r0
 80025d6:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80025da:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 80025de:	d13a      	bne.n	8002656 <HAL_HCD_IRQHandler+0x210>
    {
      interrupt = USB_HC_ReadInterrupt(hhcd->Instance);
 80025e0:	687b      	ldr	r3, [r7, #4]
 80025e2:	681b      	ldr	r3, [r3, #0]
 80025e4:	4618      	mov	r0, r3
 80025e6:	f003 ff0a 	bl	80063fe <USB_HC_ReadInterrupt>
 80025ea:	60b8      	str	r0, [r7, #8]
      for (i = 0U; i < hhcd->Init.Host_channels; i++)
 80025ec:	2300      	movs	r3, #0
 80025ee:	617b      	str	r3, [r7, #20]
 80025f0:	e025      	b.n	800263e <HAL_HCD_IRQHandler+0x1f8>
      {
        if ((interrupt & (1UL << (i & 0xFU))) != 0U)
 80025f2:	697b      	ldr	r3, [r7, #20]
 80025f4:	f003 030f 	and.w	r3, r3, #15
 80025f8:	68ba      	ldr	r2, [r7, #8]
 80025fa:	fa22 f303 	lsr.w	r3, r2, r3
 80025fe:	f003 0301 	and.w	r3, r3, #1
 8002602:	2b00      	cmp	r3, #0
 8002604:	d018      	beq.n	8002638 <HAL_HCD_IRQHandler+0x1f2>
        {
          if ((USBx_HC(i)->HCCHAR & USB_OTG_HCCHAR_EPDIR) == USB_OTG_HCCHAR_EPDIR)
 8002606:	697b      	ldr	r3, [r7, #20]
 8002608:	015a      	lsls	r2, r3, #5
 800260a:	68fb      	ldr	r3, [r7, #12]
 800260c:	4413      	add	r3, r2
 800260e:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002612:	681b      	ldr	r3, [r3, #0]
 8002614:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8002618:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800261c:	d106      	bne.n	800262c <HAL_HCD_IRQHandler+0x1e6>
          {
            HCD_HC_IN_IRQHandler(hhcd, (uint8_t)i);
 800261e:	697b      	ldr	r3, [r7, #20]
 8002620:	b2db      	uxtb	r3, r3
 8002622:	4619      	mov	r1, r3
 8002624:	6878      	ldr	r0, [r7, #4]
 8002626:	f000 f836 	bl	8002696 <HCD_HC_IN_IRQHandler>
 800262a:	e005      	b.n	8002638 <HAL_HCD_IRQHandler+0x1f2>
          }
          else
          {
            HCD_HC_OUT_IRQHandler(hhcd, (uint8_t)i);
 800262c:	697b      	ldr	r3, [r7, #20]
 800262e:	b2db      	uxtb	r3, r3
 8002630:	4619      	mov	r1, r3
 8002632:	6878      	ldr	r0, [r7, #4]
 8002634:	f000 fb84 	bl	8002d40 <HCD_HC_OUT_IRQHandler>
      for (i = 0U; i < hhcd->Init.Host_channels; i++)
 8002638:	697b      	ldr	r3, [r7, #20]
 800263a:	3301      	adds	r3, #1
 800263c:	617b      	str	r3, [r7, #20]
 800263e:	687b      	ldr	r3, [r7, #4]
 8002640:	689b      	ldr	r3, [r3, #8]
 8002642:	697a      	ldr	r2, [r7, #20]
 8002644:	429a      	cmp	r2, r3
 8002646:	d3d4      	bcc.n	80025f2 <HAL_HCD_IRQHandler+0x1ac>
          }
        }
      }
      __HAL_HCD_CLEAR_FLAG(hhcd, USB_OTG_GINTSTS_HCINT);
 8002648:	687b      	ldr	r3, [r7, #4]
 800264a:	681b      	ldr	r3, [r3, #0]
 800264c:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 8002650:	615a      	str	r2, [r3, #20]
 8002652:	e000      	b.n	8002656 <HAL_HCD_IRQHandler+0x210>
      return;
 8002654:	bf00      	nop
    }
  }
}
 8002656:	3718      	adds	r7, #24
 8002658:	46bd      	mov	sp, r7
 800265a:	bd80      	pop	{r7, pc}

0800265c <HAL_HCD_Stop>:
  * @param  hhcd HCD handle
  * @retval HAL status
  */

HAL_StatusTypeDef HAL_HCD_Stop(HCD_HandleTypeDef *hhcd)
{
 800265c:	b580      	push	{r7, lr}
 800265e:	b082      	sub	sp, #8
 8002660:	af00      	add	r7, sp, #0
 8002662:	6078      	str	r0, [r7, #4]
  __HAL_LOCK(hhcd);
 8002664:	687b      	ldr	r3, [r7, #4]
 8002666:	f893 32f8 	ldrb.w	r3, [r3, #760]	; 0x2f8
 800266a:	2b01      	cmp	r3, #1
 800266c:	d101      	bne.n	8002672 <HAL_HCD_Stop+0x16>
 800266e:	2302      	movs	r3, #2
 8002670:	e00d      	b.n	800268e <HAL_HCD_Stop+0x32>
 8002672:	687b      	ldr	r3, [r7, #4]
 8002674:	2201      	movs	r2, #1
 8002676:	f883 22f8 	strb.w	r2, [r3, #760]	; 0x2f8
  (void)USB_StopHost(hhcd->Instance);
 800267a:	687b      	ldr	r3, [r7, #4]
 800267c:	681b      	ldr	r3, [r3, #0]
 800267e:	4618      	mov	r0, r3
 8002680:	f003 ffca 	bl	8006618 <USB_StopHost>
  __HAL_UNLOCK(hhcd);
 8002684:	687b      	ldr	r3, [r7, #4]
 8002686:	2200      	movs	r2, #0
 8002688:	f883 22f8 	strb.w	r2, [r3, #760]	; 0x2f8

  return HAL_OK;
 800268c:	2300      	movs	r3, #0
}
 800268e:	4618      	mov	r0, r3
 8002690:	3708      	adds	r7, #8
 8002692:	46bd      	mov	sp, r7
 8002694:	bd80      	pop	{r7, pc}

08002696 <HCD_HC_IN_IRQHandler>:
  * @param  chnum Channel number.
  *         This parameter can be a value from 1 to 15
  * @retval none
  */
static void HCD_HC_IN_IRQHandler(HCD_HandleTypeDef *hhcd, uint8_t chnum)
{
 8002696:	b580      	push	{r7, lr}
 8002698:	b086      	sub	sp, #24
 800269a:	af00      	add	r7, sp, #0
 800269c:	6078      	str	r0, [r7, #4]
 800269e:	460b      	mov	r3, r1
 80026a0:	70fb      	strb	r3, [r7, #3]
  USB_OTG_GlobalTypeDef *USBx = hhcd->Instance;
 80026a2:	687b      	ldr	r3, [r7, #4]
 80026a4:	681b      	ldr	r3, [r3, #0]
 80026a6:	617b      	str	r3, [r7, #20]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80026a8:	697b      	ldr	r3, [r7, #20]
 80026aa:	613b      	str	r3, [r7, #16]
  uint32_t ch_num = (uint32_t)chnum;
 80026ac:	78fb      	ldrb	r3, [r7, #3]
 80026ae:	60fb      	str	r3, [r7, #12]

  uint32_t tmpreg;

  if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_AHBERR) == USB_OTG_HCINT_AHBERR)
 80026b0:	68fb      	ldr	r3, [r7, #12]
 80026b2:	015a      	lsls	r2, r3, #5
 80026b4:	693b      	ldr	r3, [r7, #16]
 80026b6:	4413      	add	r3, r2
 80026b8:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80026bc:	689b      	ldr	r3, [r3, #8]
 80026be:	f003 0304 	and.w	r3, r3, #4
 80026c2:	2b04      	cmp	r3, #4
 80026c4:	d11a      	bne.n	80026fc <HCD_HC_IN_IRQHandler+0x66>
  {
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_AHBERR);
 80026c6:	68fb      	ldr	r3, [r7, #12]
 80026c8:	015a      	lsls	r2, r3, #5
 80026ca:	693b      	ldr	r3, [r7, #16]
 80026cc:	4413      	add	r3, r2
 80026ce:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80026d2:	461a      	mov	r2, r3
 80026d4:	2304      	movs	r3, #4
 80026d6:	6093      	str	r3, [r2, #8]
    hhcd->hc[ch_num].state = HC_XACTERR;
 80026d8:	687a      	ldr	r2, [r7, #4]
 80026da:	68fb      	ldr	r3, [r7, #12]
 80026dc:	212c      	movs	r1, #44	; 0x2c
 80026de:	fb01 f303 	mul.w	r3, r1, r3
 80026e2:	4413      	add	r3, r2
 80026e4:	3361      	adds	r3, #97	; 0x61
 80026e6:	2206      	movs	r2, #6
 80026e8:	701a      	strb	r2, [r3, #0]
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 80026ea:	687b      	ldr	r3, [r7, #4]
 80026ec:	681b      	ldr	r3, [r3, #0]
 80026ee:	68fa      	ldr	r2, [r7, #12]
 80026f0:	b2d2      	uxtb	r2, r2
 80026f2:	4611      	mov	r1, r2
 80026f4:	4618      	mov	r0, r3
 80026f6:	f003 fe93 	bl	8006420 <USB_HC_Halt>
 80026fa:	e0af      	b.n	800285c <HCD_HC_IN_IRQHandler+0x1c6>
  }
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_BBERR) == USB_OTG_HCINT_BBERR)
 80026fc:	68fb      	ldr	r3, [r7, #12]
 80026fe:	015a      	lsls	r2, r3, #5
 8002700:	693b      	ldr	r3, [r7, #16]
 8002702:	4413      	add	r3, r2
 8002704:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002708:	689b      	ldr	r3, [r3, #8]
 800270a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800270e:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8002712:	d11b      	bne.n	800274c <HCD_HC_IN_IRQHandler+0xb6>
  {
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_BBERR);
 8002714:	68fb      	ldr	r3, [r7, #12]
 8002716:	015a      	lsls	r2, r3, #5
 8002718:	693b      	ldr	r3, [r7, #16]
 800271a:	4413      	add	r3, r2
 800271c:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002720:	461a      	mov	r2, r3
 8002722:	f44f 7380 	mov.w	r3, #256	; 0x100
 8002726:	6093      	str	r3, [r2, #8]
    hhcd->hc[ch_num].state = HC_BBLERR;
 8002728:	687a      	ldr	r2, [r7, #4]
 800272a:	68fb      	ldr	r3, [r7, #12]
 800272c:	212c      	movs	r1, #44	; 0x2c
 800272e:	fb01 f303 	mul.w	r3, r1, r3
 8002732:	4413      	add	r3, r2
 8002734:	3361      	adds	r3, #97	; 0x61
 8002736:	2207      	movs	r2, #7
 8002738:	701a      	strb	r2, [r3, #0]
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 800273a:	687b      	ldr	r3, [r7, #4]
 800273c:	681b      	ldr	r3, [r3, #0]
 800273e:	68fa      	ldr	r2, [r7, #12]
 8002740:	b2d2      	uxtb	r2, r2
 8002742:	4611      	mov	r1, r2
 8002744:	4618      	mov	r0, r3
 8002746:	f003 fe6b 	bl	8006420 <USB_HC_Halt>
 800274a:	e087      	b.n	800285c <HCD_HC_IN_IRQHandler+0x1c6>
  }
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_ACK) == USB_OTG_HCINT_ACK)
 800274c:	68fb      	ldr	r3, [r7, #12]
 800274e:	015a      	lsls	r2, r3, #5
 8002750:	693b      	ldr	r3, [r7, #16]
 8002752:	4413      	add	r3, r2
 8002754:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002758:	689b      	ldr	r3, [r3, #8]
 800275a:	f003 0320 	and.w	r3, r3, #32
 800275e:	2b20      	cmp	r3, #32
 8002760:	d109      	bne.n	8002776 <HCD_HC_IN_IRQHandler+0xe0>
  {
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_ACK);
 8002762:	68fb      	ldr	r3, [r7, #12]
 8002764:	015a      	lsls	r2, r3, #5
 8002766:	693b      	ldr	r3, [r7, #16]
 8002768:	4413      	add	r3, r2
 800276a:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800276e:	461a      	mov	r2, r3
 8002770:	2320      	movs	r3, #32
 8002772:	6093      	str	r3, [r2, #8]
 8002774:	e072      	b.n	800285c <HCD_HC_IN_IRQHandler+0x1c6>
  }
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_STALL) == USB_OTG_HCINT_STALL)
 8002776:	68fb      	ldr	r3, [r7, #12]
 8002778:	015a      	lsls	r2, r3, #5
 800277a:	693b      	ldr	r3, [r7, #16]
 800277c:	4413      	add	r3, r2
 800277e:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002782:	689b      	ldr	r3, [r3, #8]
 8002784:	f003 0308 	and.w	r3, r3, #8
 8002788:	2b08      	cmp	r3, #8
 800278a:	d11a      	bne.n	80027c2 <HCD_HC_IN_IRQHandler+0x12c>
  {
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_STALL);
 800278c:	68fb      	ldr	r3, [r7, #12]
 800278e:	015a      	lsls	r2, r3, #5
 8002790:	693b      	ldr	r3, [r7, #16]
 8002792:	4413      	add	r3, r2
 8002794:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002798:	461a      	mov	r2, r3
 800279a:	2308      	movs	r3, #8
 800279c:	6093      	str	r3, [r2, #8]
    hhcd->hc[ch_num].state = HC_STALL;
 800279e:	687a      	ldr	r2, [r7, #4]
 80027a0:	68fb      	ldr	r3, [r7, #12]
 80027a2:	212c      	movs	r1, #44	; 0x2c
 80027a4:	fb01 f303 	mul.w	r3, r1, r3
 80027a8:	4413      	add	r3, r2
 80027aa:	3361      	adds	r3, #97	; 0x61
 80027ac:	2205      	movs	r2, #5
 80027ae:	701a      	strb	r2, [r3, #0]
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 80027b0:	687b      	ldr	r3, [r7, #4]
 80027b2:	681b      	ldr	r3, [r3, #0]
 80027b4:	68fa      	ldr	r2, [r7, #12]
 80027b6:	b2d2      	uxtb	r2, r2
 80027b8:	4611      	mov	r1, r2
 80027ba:	4618      	mov	r0, r3
 80027bc:	f003 fe30 	bl	8006420 <USB_HC_Halt>
 80027c0:	e04c      	b.n	800285c <HCD_HC_IN_IRQHandler+0x1c6>
  }
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_DTERR) == USB_OTG_HCINT_DTERR)
 80027c2:	68fb      	ldr	r3, [r7, #12]
 80027c4:	015a      	lsls	r2, r3, #5
 80027c6:	693b      	ldr	r3, [r7, #16]
 80027c8:	4413      	add	r3, r2
 80027ca:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80027ce:	689b      	ldr	r3, [r3, #8]
 80027d0:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80027d4:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80027d8:	d11b      	bne.n	8002812 <HCD_HC_IN_IRQHandler+0x17c>
  {
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_DTERR);
 80027da:	68fb      	ldr	r3, [r7, #12]
 80027dc:	015a      	lsls	r2, r3, #5
 80027de:	693b      	ldr	r3, [r7, #16]
 80027e0:	4413      	add	r3, r2
 80027e2:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80027e6:	461a      	mov	r2, r3
 80027e8:	f44f 6380 	mov.w	r3, #1024	; 0x400
 80027ec:	6093      	str	r3, [r2, #8]
    hhcd->hc[ch_num].state = HC_DATATGLERR;
 80027ee:	687a      	ldr	r2, [r7, #4]
 80027f0:	68fb      	ldr	r3, [r7, #12]
 80027f2:	212c      	movs	r1, #44	; 0x2c
 80027f4:	fb01 f303 	mul.w	r3, r1, r3
 80027f8:	4413      	add	r3, r2
 80027fa:	3361      	adds	r3, #97	; 0x61
 80027fc:	2208      	movs	r2, #8
 80027fe:	701a      	strb	r2, [r3, #0]
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 8002800:	687b      	ldr	r3, [r7, #4]
 8002802:	681b      	ldr	r3, [r3, #0]
 8002804:	68fa      	ldr	r2, [r7, #12]
 8002806:	b2d2      	uxtb	r2, r2
 8002808:	4611      	mov	r1, r2
 800280a:	4618      	mov	r0, r3
 800280c:	f003 fe08 	bl	8006420 <USB_HC_Halt>
 8002810:	e024      	b.n	800285c <HCD_HC_IN_IRQHandler+0x1c6>
  }
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_TXERR) == USB_OTG_HCINT_TXERR)
 8002812:	68fb      	ldr	r3, [r7, #12]
 8002814:	015a      	lsls	r2, r3, #5
 8002816:	693b      	ldr	r3, [r7, #16]
 8002818:	4413      	add	r3, r2
 800281a:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800281e:	689b      	ldr	r3, [r3, #8]
 8002820:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002824:	2b80      	cmp	r3, #128	; 0x80
 8002826:	d119      	bne.n	800285c <HCD_HC_IN_IRQHandler+0x1c6>
  {
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_TXERR);
 8002828:	68fb      	ldr	r3, [r7, #12]
 800282a:	015a      	lsls	r2, r3, #5
 800282c:	693b      	ldr	r3, [r7, #16]
 800282e:	4413      	add	r3, r2
 8002830:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002834:	461a      	mov	r2, r3
 8002836:	2380      	movs	r3, #128	; 0x80
 8002838:	6093      	str	r3, [r2, #8]
    hhcd->hc[ch_num].state = HC_XACTERR;
 800283a:	687a      	ldr	r2, [r7, #4]
 800283c:	68fb      	ldr	r3, [r7, #12]
 800283e:	212c      	movs	r1, #44	; 0x2c
 8002840:	fb01 f303 	mul.w	r3, r1, r3
 8002844:	4413      	add	r3, r2
 8002846:	3361      	adds	r3, #97	; 0x61
 8002848:	2206      	movs	r2, #6
 800284a:	701a      	strb	r2, [r3, #0]
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 800284c:	687b      	ldr	r3, [r7, #4]
 800284e:	681b      	ldr	r3, [r3, #0]
 8002850:	68fa      	ldr	r2, [r7, #12]
 8002852:	b2d2      	uxtb	r2, r2
 8002854:	4611      	mov	r1, r2
 8002856:	4618      	mov	r0, r3
 8002858:	f003 fde2 	bl	8006420 <USB_HC_Halt>
  else
  {
    /* ... */
  }

  if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_FRMOR) == USB_OTG_HCINT_FRMOR)
 800285c:	68fb      	ldr	r3, [r7, #12]
 800285e:	015a      	lsls	r2, r3, #5
 8002860:	693b      	ldr	r3, [r7, #16]
 8002862:	4413      	add	r3, r2
 8002864:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002868:	689b      	ldr	r3, [r3, #8]
 800286a:	f403 7300 	and.w	r3, r3, #512	; 0x200
 800286e:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8002872:	d112      	bne.n	800289a <HCD_HC_IN_IRQHandler+0x204>
  {
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 8002874:	687b      	ldr	r3, [r7, #4]
 8002876:	681b      	ldr	r3, [r3, #0]
 8002878:	68fa      	ldr	r2, [r7, #12]
 800287a:	b2d2      	uxtb	r2, r2
 800287c:	4611      	mov	r1, r2
 800287e:	4618      	mov	r0, r3
 8002880:	f003 fdce 	bl	8006420 <USB_HC_Halt>
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_FRMOR);
 8002884:	68fb      	ldr	r3, [r7, #12]
 8002886:	015a      	lsls	r2, r3, #5
 8002888:	693b      	ldr	r3, [r7, #16]
 800288a:	4413      	add	r3, r2
 800288c:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002890:	461a      	mov	r2, r3
 8002892:	f44f 7300 	mov.w	r3, #512	; 0x200
 8002896:	6093      	str	r3, [r2, #8]
  }
  else
  {
    /* ... */
  }
}
 8002898:	e24e      	b.n	8002d38 <HCD_HC_IN_IRQHandler+0x6a2>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_XFRC) == USB_OTG_HCINT_XFRC)
 800289a:	68fb      	ldr	r3, [r7, #12]
 800289c:	015a      	lsls	r2, r3, #5
 800289e:	693b      	ldr	r3, [r7, #16]
 80028a0:	4413      	add	r3, r2
 80028a2:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80028a6:	689b      	ldr	r3, [r3, #8]
 80028a8:	f003 0301 	and.w	r3, r3, #1
 80028ac:	2b01      	cmp	r3, #1
 80028ae:	f040 80df 	bne.w	8002a70 <HCD_HC_IN_IRQHandler+0x3da>
    if (hhcd->Init.dma_enable != 0U)
 80028b2:	687b      	ldr	r3, [r7, #4]
 80028b4:	691b      	ldr	r3, [r3, #16]
 80028b6:	2b00      	cmp	r3, #0
 80028b8:	d019      	beq.n	80028ee <HCD_HC_IN_IRQHandler+0x258>
      hhcd->hc[ch_num].xfer_count = hhcd->hc[ch_num].XferSize - \
 80028ba:	687a      	ldr	r2, [r7, #4]
 80028bc:	68fb      	ldr	r3, [r7, #12]
 80028be:	212c      	movs	r1, #44	; 0x2c
 80028c0:	fb01 f303 	mul.w	r3, r1, r3
 80028c4:	4413      	add	r3, r2
 80028c6:	3348      	adds	r3, #72	; 0x48
 80028c8:	681a      	ldr	r2, [r3, #0]
                                    (USBx_HC(ch_num)->HCTSIZ & USB_OTG_HCTSIZ_XFRSIZ);
 80028ca:	68fb      	ldr	r3, [r7, #12]
 80028cc:	0159      	lsls	r1, r3, #5
 80028ce:	693b      	ldr	r3, [r7, #16]
 80028d0:	440b      	add	r3, r1
 80028d2:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80028d6:	691b      	ldr	r3, [r3, #16]
 80028d8:	f3c3 0312 	ubfx	r3, r3, #0, #19
      hhcd->hc[ch_num].xfer_count = hhcd->hc[ch_num].XferSize - \
 80028dc:	1ad2      	subs	r2, r2, r3
 80028de:	6879      	ldr	r1, [r7, #4]
 80028e0:	68fb      	ldr	r3, [r7, #12]
 80028e2:	202c      	movs	r0, #44	; 0x2c
 80028e4:	fb00 f303 	mul.w	r3, r0, r3
 80028e8:	440b      	add	r3, r1
 80028ea:	3350      	adds	r3, #80	; 0x50
 80028ec:	601a      	str	r2, [r3, #0]
    hhcd->hc[ch_num].state = HC_XFRC;
 80028ee:	687a      	ldr	r2, [r7, #4]
 80028f0:	68fb      	ldr	r3, [r7, #12]
 80028f2:	212c      	movs	r1, #44	; 0x2c
 80028f4:	fb01 f303 	mul.w	r3, r1, r3
 80028f8:	4413      	add	r3, r2
 80028fa:	3361      	adds	r3, #97	; 0x61
 80028fc:	2201      	movs	r2, #1
 80028fe:	701a      	strb	r2, [r3, #0]
    hhcd->hc[ch_num].ErrCnt = 0U;
 8002900:	687a      	ldr	r2, [r7, #4]
 8002902:	68fb      	ldr	r3, [r7, #12]
 8002904:	212c      	movs	r1, #44	; 0x2c
 8002906:	fb01 f303 	mul.w	r3, r1, r3
 800290a:	4413      	add	r3, r2
 800290c:	335c      	adds	r3, #92	; 0x5c
 800290e:	2200      	movs	r2, #0
 8002910:	601a      	str	r2, [r3, #0]
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_XFRC);
 8002912:	68fb      	ldr	r3, [r7, #12]
 8002914:	015a      	lsls	r2, r3, #5
 8002916:	693b      	ldr	r3, [r7, #16]
 8002918:	4413      	add	r3, r2
 800291a:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800291e:	461a      	mov	r2, r3
 8002920:	2301      	movs	r3, #1
 8002922:	6093      	str	r3, [r2, #8]
    if ((hhcd->hc[ch_num].ep_type == EP_TYPE_CTRL) ||
 8002924:	687a      	ldr	r2, [r7, #4]
 8002926:	68fb      	ldr	r3, [r7, #12]
 8002928:	212c      	movs	r1, #44	; 0x2c
 800292a:	fb01 f303 	mul.w	r3, r1, r3
 800292e:	4413      	add	r3, r2
 8002930:	333f      	adds	r3, #63	; 0x3f
 8002932:	781b      	ldrb	r3, [r3, #0]
 8002934:	2b00      	cmp	r3, #0
 8002936:	d009      	beq.n	800294c <HCD_HC_IN_IRQHandler+0x2b6>
        (hhcd->hc[ch_num].ep_type == EP_TYPE_BULK))
 8002938:	687a      	ldr	r2, [r7, #4]
 800293a:	68fb      	ldr	r3, [r7, #12]
 800293c:	212c      	movs	r1, #44	; 0x2c
 800293e:	fb01 f303 	mul.w	r3, r1, r3
 8002942:	4413      	add	r3, r2
 8002944:	333f      	adds	r3, #63	; 0x3f
 8002946:	781b      	ldrb	r3, [r3, #0]
    if ((hhcd->hc[ch_num].ep_type == EP_TYPE_CTRL) ||
 8002948:	2b02      	cmp	r3, #2
 800294a:	d111      	bne.n	8002970 <HCD_HC_IN_IRQHandler+0x2da>
      (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 800294c:	687b      	ldr	r3, [r7, #4]
 800294e:	681b      	ldr	r3, [r3, #0]
 8002950:	68fa      	ldr	r2, [r7, #12]
 8002952:	b2d2      	uxtb	r2, r2
 8002954:	4611      	mov	r1, r2
 8002956:	4618      	mov	r0, r3
 8002958:	f003 fd62 	bl	8006420 <USB_HC_Halt>
      __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_NAK);
 800295c:	68fb      	ldr	r3, [r7, #12]
 800295e:	015a      	lsls	r2, r3, #5
 8002960:	693b      	ldr	r3, [r7, #16]
 8002962:	4413      	add	r3, r2
 8002964:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002968:	461a      	mov	r2, r3
 800296a:	2310      	movs	r3, #16
 800296c:	6093      	str	r3, [r2, #8]
 800296e:	e03a      	b.n	80029e6 <HCD_HC_IN_IRQHandler+0x350>
    else if ((hhcd->hc[ch_num].ep_type == EP_TYPE_INTR) ||
 8002970:	687a      	ldr	r2, [r7, #4]
 8002972:	68fb      	ldr	r3, [r7, #12]
 8002974:	212c      	movs	r1, #44	; 0x2c
 8002976:	fb01 f303 	mul.w	r3, r1, r3
 800297a:	4413      	add	r3, r2
 800297c:	333f      	adds	r3, #63	; 0x3f
 800297e:	781b      	ldrb	r3, [r3, #0]
 8002980:	2b03      	cmp	r3, #3
 8002982:	d009      	beq.n	8002998 <HCD_HC_IN_IRQHandler+0x302>
             (hhcd->hc[ch_num].ep_type == EP_TYPE_ISOC))
 8002984:	687a      	ldr	r2, [r7, #4]
 8002986:	68fb      	ldr	r3, [r7, #12]
 8002988:	212c      	movs	r1, #44	; 0x2c
 800298a:	fb01 f303 	mul.w	r3, r1, r3
 800298e:	4413      	add	r3, r2
 8002990:	333f      	adds	r3, #63	; 0x3f
 8002992:	781b      	ldrb	r3, [r3, #0]
    else if ((hhcd->hc[ch_num].ep_type == EP_TYPE_INTR) ||
 8002994:	2b01      	cmp	r3, #1
 8002996:	d126      	bne.n	80029e6 <HCD_HC_IN_IRQHandler+0x350>
      USBx_HC(ch_num)->HCCHAR |= USB_OTG_HCCHAR_ODDFRM;
 8002998:	68fb      	ldr	r3, [r7, #12]
 800299a:	015a      	lsls	r2, r3, #5
 800299c:	693b      	ldr	r3, [r7, #16]
 800299e:	4413      	add	r3, r2
 80029a0:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80029a4:	681b      	ldr	r3, [r3, #0]
 80029a6:	68fa      	ldr	r2, [r7, #12]
 80029a8:	0151      	lsls	r1, r2, #5
 80029aa:	693a      	ldr	r2, [r7, #16]
 80029ac:	440a      	add	r2, r1
 80029ae:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 80029b2:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 80029b6:	6013      	str	r3, [r2, #0]
      hhcd->hc[ch_num].urb_state = URB_DONE;
 80029b8:	687a      	ldr	r2, [r7, #4]
 80029ba:	68fb      	ldr	r3, [r7, #12]
 80029bc:	212c      	movs	r1, #44	; 0x2c
 80029be:	fb01 f303 	mul.w	r3, r1, r3
 80029c2:	4413      	add	r3, r2
 80029c4:	3360      	adds	r3, #96	; 0x60
 80029c6:	2201      	movs	r2, #1
 80029c8:	701a      	strb	r2, [r3, #0]
      HAL_HCD_HC_NotifyURBChange_Callback(hhcd, (uint8_t)ch_num, hhcd->hc[ch_num].urb_state);
 80029ca:	68fb      	ldr	r3, [r7, #12]
 80029cc:	b2d9      	uxtb	r1, r3
 80029ce:	687a      	ldr	r2, [r7, #4]
 80029d0:	68fb      	ldr	r3, [r7, #12]
 80029d2:	202c      	movs	r0, #44	; 0x2c
 80029d4:	fb00 f303 	mul.w	r3, r0, r3
 80029d8:	4413      	add	r3, r2
 80029da:	3360      	adds	r3, #96	; 0x60
 80029dc:	781b      	ldrb	r3, [r3, #0]
 80029de:	461a      	mov	r2, r3
 80029e0:	6878      	ldr	r0, [r7, #4]
 80029e2:	f006 ff19 	bl	8009818 <HAL_HCD_HC_NotifyURBChange_Callback>
    if (hhcd->Init.dma_enable == 1U)
 80029e6:	687b      	ldr	r3, [r7, #4]
 80029e8:	691b      	ldr	r3, [r3, #16]
 80029ea:	2b01      	cmp	r3, #1
 80029ec:	d12b      	bne.n	8002a46 <HCD_HC_IN_IRQHandler+0x3b0>
      if (((hhcd->hc[ch_num].XferSize / hhcd->hc[ch_num].max_packet) & 1U) != 0U)
 80029ee:	687a      	ldr	r2, [r7, #4]
 80029f0:	68fb      	ldr	r3, [r7, #12]
 80029f2:	212c      	movs	r1, #44	; 0x2c
 80029f4:	fb01 f303 	mul.w	r3, r1, r3
 80029f8:	4413      	add	r3, r2
 80029fa:	3348      	adds	r3, #72	; 0x48
 80029fc:	681b      	ldr	r3, [r3, #0]
 80029fe:	6879      	ldr	r1, [r7, #4]
 8002a00:	68fa      	ldr	r2, [r7, #12]
 8002a02:	202c      	movs	r0, #44	; 0x2c
 8002a04:	fb00 f202 	mul.w	r2, r0, r2
 8002a08:	440a      	add	r2, r1
 8002a0a:	3240      	adds	r2, #64	; 0x40
 8002a0c:	8812      	ldrh	r2, [r2, #0]
 8002a0e:	fbb3 f3f2 	udiv	r3, r3, r2
 8002a12:	f003 0301 	and.w	r3, r3, #1
 8002a16:	2b00      	cmp	r3, #0
 8002a18:	f000 818e 	beq.w	8002d38 <HCD_HC_IN_IRQHandler+0x6a2>
        hhcd->hc[ch_num].toggle_in ^= 1U;
 8002a1c:	687a      	ldr	r2, [r7, #4]
 8002a1e:	68fb      	ldr	r3, [r7, #12]
 8002a20:	212c      	movs	r1, #44	; 0x2c
 8002a22:	fb01 f303 	mul.w	r3, r1, r3
 8002a26:	4413      	add	r3, r2
 8002a28:	3354      	adds	r3, #84	; 0x54
 8002a2a:	781b      	ldrb	r3, [r3, #0]
 8002a2c:	f083 0301 	eor.w	r3, r3, #1
 8002a30:	b2d8      	uxtb	r0, r3
 8002a32:	687a      	ldr	r2, [r7, #4]
 8002a34:	68fb      	ldr	r3, [r7, #12]
 8002a36:	212c      	movs	r1, #44	; 0x2c
 8002a38:	fb01 f303 	mul.w	r3, r1, r3
 8002a3c:	4413      	add	r3, r2
 8002a3e:	3354      	adds	r3, #84	; 0x54
 8002a40:	4602      	mov	r2, r0
 8002a42:	701a      	strb	r2, [r3, #0]
}
 8002a44:	e178      	b.n	8002d38 <HCD_HC_IN_IRQHandler+0x6a2>
      hhcd->hc[ch_num].toggle_in ^= 1U;
 8002a46:	687a      	ldr	r2, [r7, #4]
 8002a48:	68fb      	ldr	r3, [r7, #12]
 8002a4a:	212c      	movs	r1, #44	; 0x2c
 8002a4c:	fb01 f303 	mul.w	r3, r1, r3
 8002a50:	4413      	add	r3, r2
 8002a52:	3354      	adds	r3, #84	; 0x54
 8002a54:	781b      	ldrb	r3, [r3, #0]
 8002a56:	f083 0301 	eor.w	r3, r3, #1
 8002a5a:	b2d8      	uxtb	r0, r3
 8002a5c:	687a      	ldr	r2, [r7, #4]
 8002a5e:	68fb      	ldr	r3, [r7, #12]
 8002a60:	212c      	movs	r1, #44	; 0x2c
 8002a62:	fb01 f303 	mul.w	r3, r1, r3
 8002a66:	4413      	add	r3, r2
 8002a68:	3354      	adds	r3, #84	; 0x54
 8002a6a:	4602      	mov	r2, r0
 8002a6c:	701a      	strb	r2, [r3, #0]
}
 8002a6e:	e163      	b.n	8002d38 <HCD_HC_IN_IRQHandler+0x6a2>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_CHH) == USB_OTG_HCINT_CHH)
 8002a70:	68fb      	ldr	r3, [r7, #12]
 8002a72:	015a      	lsls	r2, r3, #5
 8002a74:	693b      	ldr	r3, [r7, #16]
 8002a76:	4413      	add	r3, r2
 8002a78:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002a7c:	689b      	ldr	r3, [r3, #8]
 8002a7e:	f003 0302 	and.w	r3, r3, #2
 8002a82:	2b02      	cmp	r3, #2
 8002a84:	f040 80f6 	bne.w	8002c74 <HCD_HC_IN_IRQHandler+0x5de>
    if (hhcd->hc[ch_num].state == HC_XFRC)
 8002a88:	687a      	ldr	r2, [r7, #4]
 8002a8a:	68fb      	ldr	r3, [r7, #12]
 8002a8c:	212c      	movs	r1, #44	; 0x2c
 8002a8e:	fb01 f303 	mul.w	r3, r1, r3
 8002a92:	4413      	add	r3, r2
 8002a94:	3361      	adds	r3, #97	; 0x61
 8002a96:	781b      	ldrb	r3, [r3, #0]
 8002a98:	2b01      	cmp	r3, #1
 8002a9a:	d109      	bne.n	8002ab0 <HCD_HC_IN_IRQHandler+0x41a>
      hhcd->hc[ch_num].urb_state = URB_DONE;
 8002a9c:	687a      	ldr	r2, [r7, #4]
 8002a9e:	68fb      	ldr	r3, [r7, #12]
 8002aa0:	212c      	movs	r1, #44	; 0x2c
 8002aa2:	fb01 f303 	mul.w	r3, r1, r3
 8002aa6:	4413      	add	r3, r2
 8002aa8:	3360      	adds	r3, #96	; 0x60
 8002aaa:	2201      	movs	r2, #1
 8002aac:	701a      	strb	r2, [r3, #0]
 8002aae:	e0c9      	b.n	8002c44 <HCD_HC_IN_IRQHandler+0x5ae>
    else if (hhcd->hc[ch_num].state == HC_STALL)
 8002ab0:	687a      	ldr	r2, [r7, #4]
 8002ab2:	68fb      	ldr	r3, [r7, #12]
 8002ab4:	212c      	movs	r1, #44	; 0x2c
 8002ab6:	fb01 f303 	mul.w	r3, r1, r3
 8002aba:	4413      	add	r3, r2
 8002abc:	3361      	adds	r3, #97	; 0x61
 8002abe:	781b      	ldrb	r3, [r3, #0]
 8002ac0:	2b05      	cmp	r3, #5
 8002ac2:	d109      	bne.n	8002ad8 <HCD_HC_IN_IRQHandler+0x442>
      hhcd->hc[ch_num].urb_state = URB_STALL;
 8002ac4:	687a      	ldr	r2, [r7, #4]
 8002ac6:	68fb      	ldr	r3, [r7, #12]
 8002ac8:	212c      	movs	r1, #44	; 0x2c
 8002aca:	fb01 f303 	mul.w	r3, r1, r3
 8002ace:	4413      	add	r3, r2
 8002ad0:	3360      	adds	r3, #96	; 0x60
 8002ad2:	2205      	movs	r2, #5
 8002ad4:	701a      	strb	r2, [r3, #0]
 8002ad6:	e0b5      	b.n	8002c44 <HCD_HC_IN_IRQHandler+0x5ae>
    else if ((hhcd->hc[ch_num].state == HC_XACTERR) ||
 8002ad8:	687a      	ldr	r2, [r7, #4]
 8002ada:	68fb      	ldr	r3, [r7, #12]
 8002adc:	212c      	movs	r1, #44	; 0x2c
 8002ade:	fb01 f303 	mul.w	r3, r1, r3
 8002ae2:	4413      	add	r3, r2
 8002ae4:	3361      	adds	r3, #97	; 0x61
 8002ae6:	781b      	ldrb	r3, [r3, #0]
 8002ae8:	2b06      	cmp	r3, #6
 8002aea:	d009      	beq.n	8002b00 <HCD_HC_IN_IRQHandler+0x46a>
             (hhcd->hc[ch_num].state == HC_DATATGLERR))
 8002aec:	687a      	ldr	r2, [r7, #4]
 8002aee:	68fb      	ldr	r3, [r7, #12]
 8002af0:	212c      	movs	r1, #44	; 0x2c
 8002af2:	fb01 f303 	mul.w	r3, r1, r3
 8002af6:	4413      	add	r3, r2
 8002af8:	3361      	adds	r3, #97	; 0x61
 8002afa:	781b      	ldrb	r3, [r3, #0]
    else if ((hhcd->hc[ch_num].state == HC_XACTERR) ||
 8002afc:	2b08      	cmp	r3, #8
 8002afe:	d150      	bne.n	8002ba2 <HCD_HC_IN_IRQHandler+0x50c>
      hhcd->hc[ch_num].ErrCnt++;
 8002b00:	687a      	ldr	r2, [r7, #4]
 8002b02:	68fb      	ldr	r3, [r7, #12]
 8002b04:	212c      	movs	r1, #44	; 0x2c
 8002b06:	fb01 f303 	mul.w	r3, r1, r3
 8002b0a:	4413      	add	r3, r2
 8002b0c:	335c      	adds	r3, #92	; 0x5c
 8002b0e:	681b      	ldr	r3, [r3, #0]
 8002b10:	1c5a      	adds	r2, r3, #1
 8002b12:	6879      	ldr	r1, [r7, #4]
 8002b14:	68fb      	ldr	r3, [r7, #12]
 8002b16:	202c      	movs	r0, #44	; 0x2c
 8002b18:	fb00 f303 	mul.w	r3, r0, r3
 8002b1c:	440b      	add	r3, r1
 8002b1e:	335c      	adds	r3, #92	; 0x5c
 8002b20:	601a      	str	r2, [r3, #0]
      if (hhcd->hc[ch_num].ErrCnt > 2U)
 8002b22:	687a      	ldr	r2, [r7, #4]
 8002b24:	68fb      	ldr	r3, [r7, #12]
 8002b26:	212c      	movs	r1, #44	; 0x2c
 8002b28:	fb01 f303 	mul.w	r3, r1, r3
 8002b2c:	4413      	add	r3, r2
 8002b2e:	335c      	adds	r3, #92	; 0x5c
 8002b30:	681b      	ldr	r3, [r3, #0]
 8002b32:	2b02      	cmp	r3, #2
 8002b34:	d912      	bls.n	8002b5c <HCD_HC_IN_IRQHandler+0x4c6>
        hhcd->hc[ch_num].ErrCnt = 0U;
 8002b36:	687a      	ldr	r2, [r7, #4]
 8002b38:	68fb      	ldr	r3, [r7, #12]
 8002b3a:	212c      	movs	r1, #44	; 0x2c
 8002b3c:	fb01 f303 	mul.w	r3, r1, r3
 8002b40:	4413      	add	r3, r2
 8002b42:	335c      	adds	r3, #92	; 0x5c
 8002b44:	2200      	movs	r2, #0
 8002b46:	601a      	str	r2, [r3, #0]
        hhcd->hc[ch_num].urb_state = URB_ERROR;
 8002b48:	687a      	ldr	r2, [r7, #4]
 8002b4a:	68fb      	ldr	r3, [r7, #12]
 8002b4c:	212c      	movs	r1, #44	; 0x2c
 8002b4e:	fb01 f303 	mul.w	r3, r1, r3
 8002b52:	4413      	add	r3, r2
 8002b54:	3360      	adds	r3, #96	; 0x60
 8002b56:	2204      	movs	r2, #4
 8002b58:	701a      	strb	r2, [r3, #0]
      if (hhcd->hc[ch_num].ErrCnt > 2U)
 8002b5a:	e073      	b.n	8002c44 <HCD_HC_IN_IRQHandler+0x5ae>
        hhcd->hc[ch_num].urb_state = URB_NOTREADY;
 8002b5c:	687a      	ldr	r2, [r7, #4]
 8002b5e:	68fb      	ldr	r3, [r7, #12]
 8002b60:	212c      	movs	r1, #44	; 0x2c
 8002b62:	fb01 f303 	mul.w	r3, r1, r3
 8002b66:	4413      	add	r3, r2
 8002b68:	3360      	adds	r3, #96	; 0x60
 8002b6a:	2202      	movs	r2, #2
 8002b6c:	701a      	strb	r2, [r3, #0]
        tmpreg = USBx_HC(ch_num)->HCCHAR;
 8002b6e:	68fb      	ldr	r3, [r7, #12]
 8002b70:	015a      	lsls	r2, r3, #5
 8002b72:	693b      	ldr	r3, [r7, #16]
 8002b74:	4413      	add	r3, r2
 8002b76:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002b7a:	681b      	ldr	r3, [r3, #0]
 8002b7c:	60bb      	str	r3, [r7, #8]
        tmpreg &= ~USB_OTG_HCCHAR_CHDIS;
 8002b7e:	68bb      	ldr	r3, [r7, #8]
 8002b80:	f023 4380 	bic.w	r3, r3, #1073741824	; 0x40000000
 8002b84:	60bb      	str	r3, [r7, #8]
        tmpreg |= USB_OTG_HCCHAR_CHENA;
 8002b86:	68bb      	ldr	r3, [r7, #8]
 8002b88:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8002b8c:	60bb      	str	r3, [r7, #8]
        USBx_HC(ch_num)->HCCHAR = tmpreg;
 8002b8e:	68fb      	ldr	r3, [r7, #12]
 8002b90:	015a      	lsls	r2, r3, #5
 8002b92:	693b      	ldr	r3, [r7, #16]
 8002b94:	4413      	add	r3, r2
 8002b96:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002b9a:	461a      	mov	r2, r3
 8002b9c:	68bb      	ldr	r3, [r7, #8]
 8002b9e:	6013      	str	r3, [r2, #0]
      if (hhcd->hc[ch_num].ErrCnt > 2U)
 8002ba0:	e050      	b.n	8002c44 <HCD_HC_IN_IRQHandler+0x5ae>
    else if (hhcd->hc[ch_num].state == HC_NAK)
 8002ba2:	687a      	ldr	r2, [r7, #4]
 8002ba4:	68fb      	ldr	r3, [r7, #12]
 8002ba6:	212c      	movs	r1, #44	; 0x2c
 8002ba8:	fb01 f303 	mul.w	r3, r1, r3
 8002bac:	4413      	add	r3, r2
 8002bae:	3361      	adds	r3, #97	; 0x61
 8002bb0:	781b      	ldrb	r3, [r3, #0]
 8002bb2:	2b03      	cmp	r3, #3
 8002bb4:	d122      	bne.n	8002bfc <HCD_HC_IN_IRQHandler+0x566>
      hhcd->hc[ch_num].urb_state  = URB_NOTREADY;
 8002bb6:	687a      	ldr	r2, [r7, #4]
 8002bb8:	68fb      	ldr	r3, [r7, #12]
 8002bba:	212c      	movs	r1, #44	; 0x2c
 8002bbc:	fb01 f303 	mul.w	r3, r1, r3
 8002bc0:	4413      	add	r3, r2
 8002bc2:	3360      	adds	r3, #96	; 0x60
 8002bc4:	2202      	movs	r2, #2
 8002bc6:	701a      	strb	r2, [r3, #0]
      tmpreg = USBx_HC(ch_num)->HCCHAR;
 8002bc8:	68fb      	ldr	r3, [r7, #12]
 8002bca:	015a      	lsls	r2, r3, #5
 8002bcc:	693b      	ldr	r3, [r7, #16]
 8002bce:	4413      	add	r3, r2
 8002bd0:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002bd4:	681b      	ldr	r3, [r3, #0]
 8002bd6:	60bb      	str	r3, [r7, #8]
      tmpreg &= ~USB_OTG_HCCHAR_CHDIS;
 8002bd8:	68bb      	ldr	r3, [r7, #8]
 8002bda:	f023 4380 	bic.w	r3, r3, #1073741824	; 0x40000000
 8002bde:	60bb      	str	r3, [r7, #8]
      tmpreg |= USB_OTG_HCCHAR_CHENA;
 8002be0:	68bb      	ldr	r3, [r7, #8]
 8002be2:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8002be6:	60bb      	str	r3, [r7, #8]
      USBx_HC(ch_num)->HCCHAR = tmpreg;
 8002be8:	68fb      	ldr	r3, [r7, #12]
 8002bea:	015a      	lsls	r2, r3, #5
 8002bec:	693b      	ldr	r3, [r7, #16]
 8002bee:	4413      	add	r3, r2
 8002bf0:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002bf4:	461a      	mov	r2, r3
 8002bf6:	68bb      	ldr	r3, [r7, #8]
 8002bf8:	6013      	str	r3, [r2, #0]
 8002bfa:	e023      	b.n	8002c44 <HCD_HC_IN_IRQHandler+0x5ae>
    else if (hhcd->hc[ch_num].state == HC_BBLERR)
 8002bfc:	687a      	ldr	r2, [r7, #4]
 8002bfe:	68fb      	ldr	r3, [r7, #12]
 8002c00:	212c      	movs	r1, #44	; 0x2c
 8002c02:	fb01 f303 	mul.w	r3, r1, r3
 8002c06:	4413      	add	r3, r2
 8002c08:	3361      	adds	r3, #97	; 0x61
 8002c0a:	781b      	ldrb	r3, [r3, #0]
 8002c0c:	2b07      	cmp	r3, #7
 8002c0e:	d119      	bne.n	8002c44 <HCD_HC_IN_IRQHandler+0x5ae>
      hhcd->hc[ch_num].ErrCnt++;
 8002c10:	687a      	ldr	r2, [r7, #4]
 8002c12:	68fb      	ldr	r3, [r7, #12]
 8002c14:	212c      	movs	r1, #44	; 0x2c
 8002c16:	fb01 f303 	mul.w	r3, r1, r3
 8002c1a:	4413      	add	r3, r2
 8002c1c:	335c      	adds	r3, #92	; 0x5c
 8002c1e:	681b      	ldr	r3, [r3, #0]
 8002c20:	1c5a      	adds	r2, r3, #1
 8002c22:	6879      	ldr	r1, [r7, #4]
 8002c24:	68fb      	ldr	r3, [r7, #12]
 8002c26:	202c      	movs	r0, #44	; 0x2c
 8002c28:	fb00 f303 	mul.w	r3, r0, r3
 8002c2c:	440b      	add	r3, r1
 8002c2e:	335c      	adds	r3, #92	; 0x5c
 8002c30:	601a      	str	r2, [r3, #0]
      hhcd->hc[ch_num].urb_state = URB_ERROR;
 8002c32:	687a      	ldr	r2, [r7, #4]
 8002c34:	68fb      	ldr	r3, [r7, #12]
 8002c36:	212c      	movs	r1, #44	; 0x2c
 8002c38:	fb01 f303 	mul.w	r3, r1, r3
 8002c3c:	4413      	add	r3, r2
 8002c3e:	3360      	adds	r3, #96	; 0x60
 8002c40:	2204      	movs	r2, #4
 8002c42:	701a      	strb	r2, [r3, #0]
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_CHH);
 8002c44:	68fb      	ldr	r3, [r7, #12]
 8002c46:	015a      	lsls	r2, r3, #5
 8002c48:	693b      	ldr	r3, [r7, #16]
 8002c4a:	4413      	add	r3, r2
 8002c4c:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002c50:	461a      	mov	r2, r3
 8002c52:	2302      	movs	r3, #2
 8002c54:	6093      	str	r3, [r2, #8]
    HAL_HCD_HC_NotifyURBChange_Callback(hhcd, (uint8_t)ch_num, hhcd->hc[ch_num].urb_state);
 8002c56:	68fb      	ldr	r3, [r7, #12]
 8002c58:	b2d9      	uxtb	r1, r3
 8002c5a:	687a      	ldr	r2, [r7, #4]
 8002c5c:	68fb      	ldr	r3, [r7, #12]
 8002c5e:	202c      	movs	r0, #44	; 0x2c
 8002c60:	fb00 f303 	mul.w	r3, r0, r3
 8002c64:	4413      	add	r3, r2
 8002c66:	3360      	adds	r3, #96	; 0x60
 8002c68:	781b      	ldrb	r3, [r3, #0]
 8002c6a:	461a      	mov	r2, r3
 8002c6c:	6878      	ldr	r0, [r7, #4]
 8002c6e:	f006 fdd3 	bl	8009818 <HAL_HCD_HC_NotifyURBChange_Callback>
}
 8002c72:	e061      	b.n	8002d38 <HCD_HC_IN_IRQHandler+0x6a2>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_NAK) == USB_OTG_HCINT_NAK)
 8002c74:	68fb      	ldr	r3, [r7, #12]
 8002c76:	015a      	lsls	r2, r3, #5
 8002c78:	693b      	ldr	r3, [r7, #16]
 8002c7a:	4413      	add	r3, r2
 8002c7c:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002c80:	689b      	ldr	r3, [r3, #8]
 8002c82:	f003 0310 	and.w	r3, r3, #16
 8002c86:	2b10      	cmp	r3, #16
 8002c88:	d156      	bne.n	8002d38 <HCD_HC_IN_IRQHandler+0x6a2>
    if (hhcd->hc[ch_num].ep_type == EP_TYPE_INTR)
 8002c8a:	687a      	ldr	r2, [r7, #4]
 8002c8c:	68fb      	ldr	r3, [r7, #12]
 8002c8e:	212c      	movs	r1, #44	; 0x2c
 8002c90:	fb01 f303 	mul.w	r3, r1, r3
 8002c94:	4413      	add	r3, r2
 8002c96:	333f      	adds	r3, #63	; 0x3f
 8002c98:	781b      	ldrb	r3, [r3, #0]
 8002c9a:	2b03      	cmp	r3, #3
 8002c9c:	d111      	bne.n	8002cc2 <HCD_HC_IN_IRQHandler+0x62c>
      hhcd->hc[ch_num].ErrCnt = 0U;
 8002c9e:	687a      	ldr	r2, [r7, #4]
 8002ca0:	68fb      	ldr	r3, [r7, #12]
 8002ca2:	212c      	movs	r1, #44	; 0x2c
 8002ca4:	fb01 f303 	mul.w	r3, r1, r3
 8002ca8:	4413      	add	r3, r2
 8002caa:	335c      	adds	r3, #92	; 0x5c
 8002cac:	2200      	movs	r2, #0
 8002cae:	601a      	str	r2, [r3, #0]
      (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 8002cb0:	687b      	ldr	r3, [r7, #4]
 8002cb2:	681b      	ldr	r3, [r3, #0]
 8002cb4:	68fa      	ldr	r2, [r7, #12]
 8002cb6:	b2d2      	uxtb	r2, r2
 8002cb8:	4611      	mov	r1, r2
 8002cba:	4618      	mov	r0, r3
 8002cbc:	f003 fbb0 	bl	8006420 <USB_HC_Halt>
 8002cc0:	e031      	b.n	8002d26 <HCD_HC_IN_IRQHandler+0x690>
    else if ((hhcd->hc[ch_num].ep_type == EP_TYPE_CTRL) ||
 8002cc2:	687a      	ldr	r2, [r7, #4]
 8002cc4:	68fb      	ldr	r3, [r7, #12]
 8002cc6:	212c      	movs	r1, #44	; 0x2c
 8002cc8:	fb01 f303 	mul.w	r3, r1, r3
 8002ccc:	4413      	add	r3, r2
 8002cce:	333f      	adds	r3, #63	; 0x3f
 8002cd0:	781b      	ldrb	r3, [r3, #0]
 8002cd2:	2b00      	cmp	r3, #0
 8002cd4:	d009      	beq.n	8002cea <HCD_HC_IN_IRQHandler+0x654>
             (hhcd->hc[ch_num].ep_type == EP_TYPE_BULK))
 8002cd6:	687a      	ldr	r2, [r7, #4]
 8002cd8:	68fb      	ldr	r3, [r7, #12]
 8002cda:	212c      	movs	r1, #44	; 0x2c
 8002cdc:	fb01 f303 	mul.w	r3, r1, r3
 8002ce0:	4413      	add	r3, r2
 8002ce2:	333f      	adds	r3, #63	; 0x3f
 8002ce4:	781b      	ldrb	r3, [r3, #0]
    else if ((hhcd->hc[ch_num].ep_type == EP_TYPE_CTRL) ||
 8002ce6:	2b02      	cmp	r3, #2
 8002ce8:	d11d      	bne.n	8002d26 <HCD_HC_IN_IRQHandler+0x690>
      hhcd->hc[ch_num].ErrCnt = 0U;
 8002cea:	687a      	ldr	r2, [r7, #4]
 8002cec:	68fb      	ldr	r3, [r7, #12]
 8002cee:	212c      	movs	r1, #44	; 0x2c
 8002cf0:	fb01 f303 	mul.w	r3, r1, r3
 8002cf4:	4413      	add	r3, r2
 8002cf6:	335c      	adds	r3, #92	; 0x5c
 8002cf8:	2200      	movs	r2, #0
 8002cfa:	601a      	str	r2, [r3, #0]
      if (hhcd->Init.dma_enable == 0U)
 8002cfc:	687b      	ldr	r3, [r7, #4]
 8002cfe:	691b      	ldr	r3, [r3, #16]
 8002d00:	2b00      	cmp	r3, #0
 8002d02:	d110      	bne.n	8002d26 <HCD_HC_IN_IRQHandler+0x690>
        hhcd->hc[ch_num].state = HC_NAK;
 8002d04:	687a      	ldr	r2, [r7, #4]
 8002d06:	68fb      	ldr	r3, [r7, #12]
 8002d08:	212c      	movs	r1, #44	; 0x2c
 8002d0a:	fb01 f303 	mul.w	r3, r1, r3
 8002d0e:	4413      	add	r3, r2
 8002d10:	3361      	adds	r3, #97	; 0x61
 8002d12:	2203      	movs	r2, #3
 8002d14:	701a      	strb	r2, [r3, #0]
        (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 8002d16:	687b      	ldr	r3, [r7, #4]
 8002d18:	681b      	ldr	r3, [r3, #0]
 8002d1a:	68fa      	ldr	r2, [r7, #12]
 8002d1c:	b2d2      	uxtb	r2, r2
 8002d1e:	4611      	mov	r1, r2
 8002d20:	4618      	mov	r0, r3
 8002d22:	f003 fb7d 	bl	8006420 <USB_HC_Halt>
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_NAK);
 8002d26:	68fb      	ldr	r3, [r7, #12]
 8002d28:	015a      	lsls	r2, r3, #5
 8002d2a:	693b      	ldr	r3, [r7, #16]
 8002d2c:	4413      	add	r3, r2
 8002d2e:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002d32:	461a      	mov	r2, r3
 8002d34:	2310      	movs	r3, #16
 8002d36:	6093      	str	r3, [r2, #8]
}
 8002d38:	bf00      	nop
 8002d3a:	3718      	adds	r7, #24
 8002d3c:	46bd      	mov	sp, r7
 8002d3e:	bd80      	pop	{r7, pc}

08002d40 <HCD_HC_OUT_IRQHandler>:
  * @param  chnum Channel number.
  *         This parameter can be a value from 1 to 15
  * @retval none
  */
static void HCD_HC_OUT_IRQHandler(HCD_HandleTypeDef *hhcd, uint8_t chnum)
{
 8002d40:	b580      	push	{r7, lr}
 8002d42:	b088      	sub	sp, #32
 8002d44:	af00      	add	r7, sp, #0
 8002d46:	6078      	str	r0, [r7, #4]
 8002d48:	460b      	mov	r3, r1
 8002d4a:	70fb      	strb	r3, [r7, #3]
  USB_OTG_GlobalTypeDef *USBx = hhcd->Instance;
 8002d4c:	687b      	ldr	r3, [r7, #4]
 8002d4e:	681b      	ldr	r3, [r3, #0]
 8002d50:	61fb      	str	r3, [r7, #28]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8002d52:	69fb      	ldr	r3, [r7, #28]
 8002d54:	61bb      	str	r3, [r7, #24]
  uint32_t ch_num = (uint32_t)chnum;
 8002d56:	78fb      	ldrb	r3, [r7, #3]
 8002d58:	617b      	str	r3, [r7, #20]
  uint32_t tmpreg;
  uint32_t num_packets;

  if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_AHBERR) == USB_OTG_HCINT_AHBERR)
 8002d5a:	697b      	ldr	r3, [r7, #20]
 8002d5c:	015a      	lsls	r2, r3, #5
 8002d5e:	69bb      	ldr	r3, [r7, #24]
 8002d60:	4413      	add	r3, r2
 8002d62:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002d66:	689b      	ldr	r3, [r3, #8]
 8002d68:	f003 0304 	and.w	r3, r3, #4
 8002d6c:	2b04      	cmp	r3, #4
 8002d6e:	d11a      	bne.n	8002da6 <HCD_HC_OUT_IRQHandler+0x66>
  {
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_AHBERR);
 8002d70:	697b      	ldr	r3, [r7, #20]
 8002d72:	015a      	lsls	r2, r3, #5
 8002d74:	69bb      	ldr	r3, [r7, #24]
 8002d76:	4413      	add	r3, r2
 8002d78:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002d7c:	461a      	mov	r2, r3
 8002d7e:	2304      	movs	r3, #4
 8002d80:	6093      	str	r3, [r2, #8]
    hhcd->hc[ch_num].state = HC_XACTERR;
 8002d82:	687a      	ldr	r2, [r7, #4]
 8002d84:	697b      	ldr	r3, [r7, #20]
 8002d86:	212c      	movs	r1, #44	; 0x2c
 8002d88:	fb01 f303 	mul.w	r3, r1, r3
 8002d8c:	4413      	add	r3, r2
 8002d8e:	3361      	adds	r3, #97	; 0x61
 8002d90:	2206      	movs	r2, #6
 8002d92:	701a      	strb	r2, [r3, #0]
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 8002d94:	687b      	ldr	r3, [r7, #4]
 8002d96:	681b      	ldr	r3, [r3, #0]
 8002d98:	697a      	ldr	r2, [r7, #20]
 8002d9a:	b2d2      	uxtb	r2, r2
 8002d9c:	4611      	mov	r1, r2
 8002d9e:	4618      	mov	r0, r3
 8002da0:	f003 fb3e 	bl	8006420 <USB_HC_Halt>
  }
  else
  {
    /* ... */
  }
}
 8002da4:	e331      	b.n	800340a <HCD_HC_OUT_IRQHandler+0x6ca>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_ACK) == USB_OTG_HCINT_ACK)
 8002da6:	697b      	ldr	r3, [r7, #20]
 8002da8:	015a      	lsls	r2, r3, #5
 8002daa:	69bb      	ldr	r3, [r7, #24]
 8002dac:	4413      	add	r3, r2
 8002dae:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002db2:	689b      	ldr	r3, [r3, #8]
 8002db4:	f003 0320 	and.w	r3, r3, #32
 8002db8:	2b20      	cmp	r3, #32
 8002dba:	d12e      	bne.n	8002e1a <HCD_HC_OUT_IRQHandler+0xda>
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_ACK);
 8002dbc:	697b      	ldr	r3, [r7, #20]
 8002dbe:	015a      	lsls	r2, r3, #5
 8002dc0:	69bb      	ldr	r3, [r7, #24]
 8002dc2:	4413      	add	r3, r2
 8002dc4:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002dc8:	461a      	mov	r2, r3
 8002dca:	2320      	movs	r3, #32
 8002dcc:	6093      	str	r3, [r2, #8]
    if (hhcd->hc[ch_num].do_ping == 1U)
 8002dce:	687a      	ldr	r2, [r7, #4]
 8002dd0:	697b      	ldr	r3, [r7, #20]
 8002dd2:	212c      	movs	r1, #44	; 0x2c
 8002dd4:	fb01 f303 	mul.w	r3, r1, r3
 8002dd8:	4413      	add	r3, r2
 8002dda:	333d      	adds	r3, #61	; 0x3d
 8002ddc:	781b      	ldrb	r3, [r3, #0]
 8002dde:	2b01      	cmp	r3, #1
 8002de0:	f040 8313 	bne.w	800340a <HCD_HC_OUT_IRQHandler+0x6ca>
      hhcd->hc[ch_num].do_ping = 0U;
 8002de4:	687a      	ldr	r2, [r7, #4]
 8002de6:	697b      	ldr	r3, [r7, #20]
 8002de8:	212c      	movs	r1, #44	; 0x2c
 8002dea:	fb01 f303 	mul.w	r3, r1, r3
 8002dee:	4413      	add	r3, r2
 8002df0:	333d      	adds	r3, #61	; 0x3d
 8002df2:	2200      	movs	r2, #0
 8002df4:	701a      	strb	r2, [r3, #0]
      hhcd->hc[ch_num].urb_state = URB_NOTREADY;
 8002df6:	687a      	ldr	r2, [r7, #4]
 8002df8:	697b      	ldr	r3, [r7, #20]
 8002dfa:	212c      	movs	r1, #44	; 0x2c
 8002dfc:	fb01 f303 	mul.w	r3, r1, r3
 8002e00:	4413      	add	r3, r2
 8002e02:	3360      	adds	r3, #96	; 0x60
 8002e04:	2202      	movs	r2, #2
 8002e06:	701a      	strb	r2, [r3, #0]
      (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 8002e08:	687b      	ldr	r3, [r7, #4]
 8002e0a:	681b      	ldr	r3, [r3, #0]
 8002e0c:	697a      	ldr	r2, [r7, #20]
 8002e0e:	b2d2      	uxtb	r2, r2
 8002e10:	4611      	mov	r1, r2
 8002e12:	4618      	mov	r0, r3
 8002e14:	f003 fb04 	bl	8006420 <USB_HC_Halt>
}
 8002e18:	e2f7      	b.n	800340a <HCD_HC_OUT_IRQHandler+0x6ca>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_FRMOR) == USB_OTG_HCINT_FRMOR)
 8002e1a:	697b      	ldr	r3, [r7, #20]
 8002e1c:	015a      	lsls	r2, r3, #5
 8002e1e:	69bb      	ldr	r3, [r7, #24]
 8002e20:	4413      	add	r3, r2
 8002e22:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002e26:	689b      	ldr	r3, [r3, #8]
 8002e28:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8002e2c:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8002e30:	d112      	bne.n	8002e58 <HCD_HC_OUT_IRQHandler+0x118>
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_FRMOR);
 8002e32:	697b      	ldr	r3, [r7, #20]
 8002e34:	015a      	lsls	r2, r3, #5
 8002e36:	69bb      	ldr	r3, [r7, #24]
 8002e38:	4413      	add	r3, r2
 8002e3a:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002e3e:	461a      	mov	r2, r3
 8002e40:	f44f 7300 	mov.w	r3, #512	; 0x200
 8002e44:	6093      	str	r3, [r2, #8]
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 8002e46:	687b      	ldr	r3, [r7, #4]
 8002e48:	681b      	ldr	r3, [r3, #0]
 8002e4a:	697a      	ldr	r2, [r7, #20]
 8002e4c:	b2d2      	uxtb	r2, r2
 8002e4e:	4611      	mov	r1, r2
 8002e50:	4618      	mov	r0, r3
 8002e52:	f003 fae5 	bl	8006420 <USB_HC_Halt>
}
 8002e56:	e2d8      	b.n	800340a <HCD_HC_OUT_IRQHandler+0x6ca>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_XFRC) == USB_OTG_HCINT_XFRC)
 8002e58:	697b      	ldr	r3, [r7, #20]
 8002e5a:	015a      	lsls	r2, r3, #5
 8002e5c:	69bb      	ldr	r3, [r7, #24]
 8002e5e:	4413      	add	r3, r2
 8002e60:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002e64:	689b      	ldr	r3, [r3, #8]
 8002e66:	f003 0301 	and.w	r3, r3, #1
 8002e6a:	2b01      	cmp	r3, #1
 8002e6c:	d140      	bne.n	8002ef0 <HCD_HC_OUT_IRQHandler+0x1b0>
    hhcd->hc[ch_num].ErrCnt = 0U;
 8002e6e:	687a      	ldr	r2, [r7, #4]
 8002e70:	697b      	ldr	r3, [r7, #20]
 8002e72:	212c      	movs	r1, #44	; 0x2c
 8002e74:	fb01 f303 	mul.w	r3, r1, r3
 8002e78:	4413      	add	r3, r2
 8002e7a:	335c      	adds	r3, #92	; 0x5c
 8002e7c:	2200      	movs	r2, #0
 8002e7e:	601a      	str	r2, [r3, #0]
    if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_NYET) == USB_OTG_HCINT_NYET)
 8002e80:	697b      	ldr	r3, [r7, #20]
 8002e82:	015a      	lsls	r2, r3, #5
 8002e84:	69bb      	ldr	r3, [r7, #24]
 8002e86:	4413      	add	r3, r2
 8002e88:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002e8c:	689b      	ldr	r3, [r3, #8]
 8002e8e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002e92:	2b40      	cmp	r3, #64	; 0x40
 8002e94:	d111      	bne.n	8002eba <HCD_HC_OUT_IRQHandler+0x17a>
      hhcd->hc[ch_num].do_ping = 1U;
 8002e96:	687a      	ldr	r2, [r7, #4]
 8002e98:	697b      	ldr	r3, [r7, #20]
 8002e9a:	212c      	movs	r1, #44	; 0x2c
 8002e9c:	fb01 f303 	mul.w	r3, r1, r3
 8002ea0:	4413      	add	r3, r2
 8002ea2:	333d      	adds	r3, #61	; 0x3d
 8002ea4:	2201      	movs	r2, #1
 8002ea6:	701a      	strb	r2, [r3, #0]
      __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_NYET);
 8002ea8:	697b      	ldr	r3, [r7, #20]
 8002eaa:	015a      	lsls	r2, r3, #5
 8002eac:	69bb      	ldr	r3, [r7, #24]
 8002eae:	4413      	add	r3, r2
 8002eb0:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002eb4:	461a      	mov	r2, r3
 8002eb6:	2340      	movs	r3, #64	; 0x40
 8002eb8:	6093      	str	r3, [r2, #8]
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_XFRC);
 8002eba:	697b      	ldr	r3, [r7, #20]
 8002ebc:	015a      	lsls	r2, r3, #5
 8002ebe:	69bb      	ldr	r3, [r7, #24]
 8002ec0:	4413      	add	r3, r2
 8002ec2:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002ec6:	461a      	mov	r2, r3
 8002ec8:	2301      	movs	r3, #1
 8002eca:	6093      	str	r3, [r2, #8]
    hhcd->hc[ch_num].state = HC_XFRC;
 8002ecc:	687a      	ldr	r2, [r7, #4]
 8002ece:	697b      	ldr	r3, [r7, #20]
 8002ed0:	212c      	movs	r1, #44	; 0x2c
 8002ed2:	fb01 f303 	mul.w	r3, r1, r3
 8002ed6:	4413      	add	r3, r2
 8002ed8:	3361      	adds	r3, #97	; 0x61
 8002eda:	2201      	movs	r2, #1
 8002edc:	701a      	strb	r2, [r3, #0]
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 8002ede:	687b      	ldr	r3, [r7, #4]
 8002ee0:	681b      	ldr	r3, [r3, #0]
 8002ee2:	697a      	ldr	r2, [r7, #20]
 8002ee4:	b2d2      	uxtb	r2, r2
 8002ee6:	4611      	mov	r1, r2
 8002ee8:	4618      	mov	r0, r3
 8002eea:	f003 fa99 	bl	8006420 <USB_HC_Halt>
}
 8002eee:	e28c      	b.n	800340a <HCD_HC_OUT_IRQHandler+0x6ca>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_NYET) == USB_OTG_HCINT_NYET)
 8002ef0:	697b      	ldr	r3, [r7, #20]
 8002ef2:	015a      	lsls	r2, r3, #5
 8002ef4:	69bb      	ldr	r3, [r7, #24]
 8002ef6:	4413      	add	r3, r2
 8002ef8:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002efc:	689b      	ldr	r3, [r3, #8]
 8002efe:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002f02:	2b40      	cmp	r3, #64	; 0x40
 8002f04:	d12c      	bne.n	8002f60 <HCD_HC_OUT_IRQHandler+0x220>
    hhcd->hc[ch_num].state = HC_NYET;
 8002f06:	687a      	ldr	r2, [r7, #4]
 8002f08:	697b      	ldr	r3, [r7, #20]
 8002f0a:	212c      	movs	r1, #44	; 0x2c
 8002f0c:	fb01 f303 	mul.w	r3, r1, r3
 8002f10:	4413      	add	r3, r2
 8002f12:	3361      	adds	r3, #97	; 0x61
 8002f14:	2204      	movs	r2, #4
 8002f16:	701a      	strb	r2, [r3, #0]
    hhcd->hc[ch_num].do_ping = 1U;
 8002f18:	687a      	ldr	r2, [r7, #4]
 8002f1a:	697b      	ldr	r3, [r7, #20]
 8002f1c:	212c      	movs	r1, #44	; 0x2c
 8002f1e:	fb01 f303 	mul.w	r3, r1, r3
 8002f22:	4413      	add	r3, r2
 8002f24:	333d      	adds	r3, #61	; 0x3d
 8002f26:	2201      	movs	r2, #1
 8002f28:	701a      	strb	r2, [r3, #0]
    hhcd->hc[ch_num].ErrCnt = 0U;
 8002f2a:	687a      	ldr	r2, [r7, #4]
 8002f2c:	697b      	ldr	r3, [r7, #20]
 8002f2e:	212c      	movs	r1, #44	; 0x2c
 8002f30:	fb01 f303 	mul.w	r3, r1, r3
 8002f34:	4413      	add	r3, r2
 8002f36:	335c      	adds	r3, #92	; 0x5c
 8002f38:	2200      	movs	r2, #0
 8002f3a:	601a      	str	r2, [r3, #0]
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 8002f3c:	687b      	ldr	r3, [r7, #4]
 8002f3e:	681b      	ldr	r3, [r3, #0]
 8002f40:	697a      	ldr	r2, [r7, #20]
 8002f42:	b2d2      	uxtb	r2, r2
 8002f44:	4611      	mov	r1, r2
 8002f46:	4618      	mov	r0, r3
 8002f48:	f003 fa6a 	bl	8006420 <USB_HC_Halt>
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_NYET);
 8002f4c:	697b      	ldr	r3, [r7, #20]
 8002f4e:	015a      	lsls	r2, r3, #5
 8002f50:	69bb      	ldr	r3, [r7, #24]
 8002f52:	4413      	add	r3, r2
 8002f54:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002f58:	461a      	mov	r2, r3
 8002f5a:	2340      	movs	r3, #64	; 0x40
 8002f5c:	6093      	str	r3, [r2, #8]
}
 8002f5e:	e254      	b.n	800340a <HCD_HC_OUT_IRQHandler+0x6ca>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_STALL) == USB_OTG_HCINT_STALL)
 8002f60:	697b      	ldr	r3, [r7, #20]
 8002f62:	015a      	lsls	r2, r3, #5
 8002f64:	69bb      	ldr	r3, [r7, #24]
 8002f66:	4413      	add	r3, r2
 8002f68:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002f6c:	689b      	ldr	r3, [r3, #8]
 8002f6e:	f003 0308 	and.w	r3, r3, #8
 8002f72:	2b08      	cmp	r3, #8
 8002f74:	d11a      	bne.n	8002fac <HCD_HC_OUT_IRQHandler+0x26c>
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_STALL);
 8002f76:	697b      	ldr	r3, [r7, #20]
 8002f78:	015a      	lsls	r2, r3, #5
 8002f7a:	69bb      	ldr	r3, [r7, #24]
 8002f7c:	4413      	add	r3, r2
 8002f7e:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002f82:	461a      	mov	r2, r3
 8002f84:	2308      	movs	r3, #8
 8002f86:	6093      	str	r3, [r2, #8]
    hhcd->hc[ch_num].state = HC_STALL;
 8002f88:	687a      	ldr	r2, [r7, #4]
 8002f8a:	697b      	ldr	r3, [r7, #20]
 8002f8c:	212c      	movs	r1, #44	; 0x2c
 8002f8e:	fb01 f303 	mul.w	r3, r1, r3
 8002f92:	4413      	add	r3, r2
 8002f94:	3361      	adds	r3, #97	; 0x61
 8002f96:	2205      	movs	r2, #5
 8002f98:	701a      	strb	r2, [r3, #0]
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 8002f9a:	687b      	ldr	r3, [r7, #4]
 8002f9c:	681b      	ldr	r3, [r3, #0]
 8002f9e:	697a      	ldr	r2, [r7, #20]
 8002fa0:	b2d2      	uxtb	r2, r2
 8002fa2:	4611      	mov	r1, r2
 8002fa4:	4618      	mov	r0, r3
 8002fa6:	f003 fa3b 	bl	8006420 <USB_HC_Halt>
}
 8002faa:	e22e      	b.n	800340a <HCD_HC_OUT_IRQHandler+0x6ca>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_NAK) == USB_OTG_HCINT_NAK)
 8002fac:	697b      	ldr	r3, [r7, #20]
 8002fae:	015a      	lsls	r2, r3, #5
 8002fb0:	69bb      	ldr	r3, [r7, #24]
 8002fb2:	4413      	add	r3, r2
 8002fb4:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002fb8:	689b      	ldr	r3, [r3, #8]
 8002fba:	f003 0310 	and.w	r3, r3, #16
 8002fbe:	2b10      	cmp	r3, #16
 8002fc0:	d140      	bne.n	8003044 <HCD_HC_OUT_IRQHandler+0x304>
    hhcd->hc[ch_num].ErrCnt = 0U;
 8002fc2:	687a      	ldr	r2, [r7, #4]
 8002fc4:	697b      	ldr	r3, [r7, #20]
 8002fc6:	212c      	movs	r1, #44	; 0x2c
 8002fc8:	fb01 f303 	mul.w	r3, r1, r3
 8002fcc:	4413      	add	r3, r2
 8002fce:	335c      	adds	r3, #92	; 0x5c
 8002fd0:	2200      	movs	r2, #0
 8002fd2:	601a      	str	r2, [r3, #0]
    hhcd->hc[ch_num].state = HC_NAK;
 8002fd4:	687a      	ldr	r2, [r7, #4]
 8002fd6:	697b      	ldr	r3, [r7, #20]
 8002fd8:	212c      	movs	r1, #44	; 0x2c
 8002fda:	fb01 f303 	mul.w	r3, r1, r3
 8002fde:	4413      	add	r3, r2
 8002fe0:	3361      	adds	r3, #97	; 0x61
 8002fe2:	2203      	movs	r2, #3
 8002fe4:	701a      	strb	r2, [r3, #0]
    if (hhcd->hc[ch_num].do_ping == 0U)
 8002fe6:	687a      	ldr	r2, [r7, #4]
 8002fe8:	697b      	ldr	r3, [r7, #20]
 8002fea:	212c      	movs	r1, #44	; 0x2c
 8002fec:	fb01 f303 	mul.w	r3, r1, r3
 8002ff0:	4413      	add	r3, r2
 8002ff2:	333d      	adds	r3, #61	; 0x3d
 8002ff4:	781b      	ldrb	r3, [r3, #0]
 8002ff6:	2b00      	cmp	r3, #0
 8002ff8:	d112      	bne.n	8003020 <HCD_HC_OUT_IRQHandler+0x2e0>
      if (hhcd->hc[ch_num].speed == HCD_DEVICE_SPEED_HIGH)
 8002ffa:	687a      	ldr	r2, [r7, #4]
 8002ffc:	697b      	ldr	r3, [r7, #20]
 8002ffe:	212c      	movs	r1, #44	; 0x2c
 8003000:	fb01 f303 	mul.w	r3, r1, r3
 8003004:	4413      	add	r3, r2
 8003006:	333c      	adds	r3, #60	; 0x3c
 8003008:	781b      	ldrb	r3, [r3, #0]
 800300a:	2b00      	cmp	r3, #0
 800300c:	d108      	bne.n	8003020 <HCD_HC_OUT_IRQHandler+0x2e0>
        hhcd->hc[ch_num].do_ping = 1U;
 800300e:	687a      	ldr	r2, [r7, #4]
 8003010:	697b      	ldr	r3, [r7, #20]
 8003012:	212c      	movs	r1, #44	; 0x2c
 8003014:	fb01 f303 	mul.w	r3, r1, r3
 8003018:	4413      	add	r3, r2
 800301a:	333d      	adds	r3, #61	; 0x3d
 800301c:	2201      	movs	r2, #1
 800301e:	701a      	strb	r2, [r3, #0]
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 8003020:	687b      	ldr	r3, [r7, #4]
 8003022:	681b      	ldr	r3, [r3, #0]
 8003024:	697a      	ldr	r2, [r7, #20]
 8003026:	b2d2      	uxtb	r2, r2
 8003028:	4611      	mov	r1, r2
 800302a:	4618      	mov	r0, r3
 800302c:	f003 f9f8 	bl	8006420 <USB_HC_Halt>
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_NAK);
 8003030:	697b      	ldr	r3, [r7, #20]
 8003032:	015a      	lsls	r2, r3, #5
 8003034:	69bb      	ldr	r3, [r7, #24]
 8003036:	4413      	add	r3, r2
 8003038:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800303c:	461a      	mov	r2, r3
 800303e:	2310      	movs	r3, #16
 8003040:	6093      	str	r3, [r2, #8]
}
 8003042:	e1e2      	b.n	800340a <HCD_HC_OUT_IRQHandler+0x6ca>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_TXERR) == USB_OTG_HCINT_TXERR)
 8003044:	697b      	ldr	r3, [r7, #20]
 8003046:	015a      	lsls	r2, r3, #5
 8003048:	69bb      	ldr	r3, [r7, #24]
 800304a:	4413      	add	r3, r2
 800304c:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8003050:	689b      	ldr	r3, [r3, #8]
 8003052:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003056:	2b80      	cmp	r3, #128	; 0x80
 8003058:	d164      	bne.n	8003124 <HCD_HC_OUT_IRQHandler+0x3e4>
    if (hhcd->Init.dma_enable == 0U)
 800305a:	687b      	ldr	r3, [r7, #4]
 800305c:	691b      	ldr	r3, [r3, #16]
 800305e:	2b00      	cmp	r3, #0
 8003060:	d111      	bne.n	8003086 <HCD_HC_OUT_IRQHandler+0x346>
      hhcd->hc[ch_num].state = HC_XACTERR;
 8003062:	687a      	ldr	r2, [r7, #4]
 8003064:	697b      	ldr	r3, [r7, #20]
 8003066:	212c      	movs	r1, #44	; 0x2c
 8003068:	fb01 f303 	mul.w	r3, r1, r3
 800306c:	4413      	add	r3, r2
 800306e:	3361      	adds	r3, #97	; 0x61
 8003070:	2206      	movs	r2, #6
 8003072:	701a      	strb	r2, [r3, #0]
      (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 8003074:	687b      	ldr	r3, [r7, #4]
 8003076:	681b      	ldr	r3, [r3, #0]
 8003078:	697a      	ldr	r2, [r7, #20]
 800307a:	b2d2      	uxtb	r2, r2
 800307c:	4611      	mov	r1, r2
 800307e:	4618      	mov	r0, r3
 8003080:	f003 f9ce 	bl	8006420 <USB_HC_Halt>
 8003084:	e044      	b.n	8003110 <HCD_HC_OUT_IRQHandler+0x3d0>
      hhcd->hc[ch_num].ErrCnt++;
 8003086:	687a      	ldr	r2, [r7, #4]
 8003088:	697b      	ldr	r3, [r7, #20]
 800308a:	212c      	movs	r1, #44	; 0x2c
 800308c:	fb01 f303 	mul.w	r3, r1, r3
 8003090:	4413      	add	r3, r2
 8003092:	335c      	adds	r3, #92	; 0x5c
 8003094:	681b      	ldr	r3, [r3, #0]
 8003096:	1c5a      	adds	r2, r3, #1
 8003098:	6879      	ldr	r1, [r7, #4]
 800309a:	697b      	ldr	r3, [r7, #20]
 800309c:	202c      	movs	r0, #44	; 0x2c
 800309e:	fb00 f303 	mul.w	r3, r0, r3
 80030a2:	440b      	add	r3, r1
 80030a4:	335c      	adds	r3, #92	; 0x5c
 80030a6:	601a      	str	r2, [r3, #0]
      if (hhcd->hc[ch_num].ErrCnt > 2U)
 80030a8:	687a      	ldr	r2, [r7, #4]
 80030aa:	697b      	ldr	r3, [r7, #20]
 80030ac:	212c      	movs	r1, #44	; 0x2c
 80030ae:	fb01 f303 	mul.w	r3, r1, r3
 80030b2:	4413      	add	r3, r2
 80030b4:	335c      	adds	r3, #92	; 0x5c
 80030b6:	681b      	ldr	r3, [r3, #0]
 80030b8:	2b02      	cmp	r3, #2
 80030ba:	d920      	bls.n	80030fe <HCD_HC_OUT_IRQHandler+0x3be>
        hhcd->hc[ch_num].ErrCnt = 0U;
 80030bc:	687a      	ldr	r2, [r7, #4]
 80030be:	697b      	ldr	r3, [r7, #20]
 80030c0:	212c      	movs	r1, #44	; 0x2c
 80030c2:	fb01 f303 	mul.w	r3, r1, r3
 80030c6:	4413      	add	r3, r2
 80030c8:	335c      	adds	r3, #92	; 0x5c
 80030ca:	2200      	movs	r2, #0
 80030cc:	601a      	str	r2, [r3, #0]
        hhcd->hc[ch_num].urb_state = URB_ERROR;
 80030ce:	687a      	ldr	r2, [r7, #4]
 80030d0:	697b      	ldr	r3, [r7, #20]
 80030d2:	212c      	movs	r1, #44	; 0x2c
 80030d4:	fb01 f303 	mul.w	r3, r1, r3
 80030d8:	4413      	add	r3, r2
 80030da:	3360      	adds	r3, #96	; 0x60
 80030dc:	2204      	movs	r2, #4
 80030de:	701a      	strb	r2, [r3, #0]
        HAL_HCD_HC_NotifyURBChange_Callback(hhcd, (uint8_t)ch_num, hhcd->hc[ch_num].urb_state);
 80030e0:	697b      	ldr	r3, [r7, #20]
 80030e2:	b2d9      	uxtb	r1, r3
 80030e4:	687a      	ldr	r2, [r7, #4]
 80030e6:	697b      	ldr	r3, [r7, #20]
 80030e8:	202c      	movs	r0, #44	; 0x2c
 80030ea:	fb00 f303 	mul.w	r3, r0, r3
 80030ee:	4413      	add	r3, r2
 80030f0:	3360      	adds	r3, #96	; 0x60
 80030f2:	781b      	ldrb	r3, [r3, #0]
 80030f4:	461a      	mov	r2, r3
 80030f6:	6878      	ldr	r0, [r7, #4]
 80030f8:	f006 fb8e 	bl	8009818 <HAL_HCD_HC_NotifyURBChange_Callback>
 80030fc:	e008      	b.n	8003110 <HCD_HC_OUT_IRQHandler+0x3d0>
        hhcd->hc[ch_num].urb_state = URB_NOTREADY;
 80030fe:	687a      	ldr	r2, [r7, #4]
 8003100:	697b      	ldr	r3, [r7, #20]
 8003102:	212c      	movs	r1, #44	; 0x2c
 8003104:	fb01 f303 	mul.w	r3, r1, r3
 8003108:	4413      	add	r3, r2
 800310a:	3360      	adds	r3, #96	; 0x60
 800310c:	2202      	movs	r2, #2
 800310e:	701a      	strb	r2, [r3, #0]
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_TXERR);
 8003110:	697b      	ldr	r3, [r7, #20]
 8003112:	015a      	lsls	r2, r3, #5
 8003114:	69bb      	ldr	r3, [r7, #24]
 8003116:	4413      	add	r3, r2
 8003118:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800311c:	461a      	mov	r2, r3
 800311e:	2380      	movs	r3, #128	; 0x80
 8003120:	6093      	str	r3, [r2, #8]
}
 8003122:	e172      	b.n	800340a <HCD_HC_OUT_IRQHandler+0x6ca>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_DTERR) == USB_OTG_HCINT_DTERR)
 8003124:	697b      	ldr	r3, [r7, #20]
 8003126:	015a      	lsls	r2, r3, #5
 8003128:	69bb      	ldr	r3, [r7, #24]
 800312a:	4413      	add	r3, r2
 800312c:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8003130:	689b      	ldr	r3, [r3, #8]
 8003132:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8003136:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800313a:	d11b      	bne.n	8003174 <HCD_HC_OUT_IRQHandler+0x434>
    hhcd->hc[ch_num].state = HC_DATATGLERR;
 800313c:	687a      	ldr	r2, [r7, #4]
 800313e:	697b      	ldr	r3, [r7, #20]
 8003140:	212c      	movs	r1, #44	; 0x2c
 8003142:	fb01 f303 	mul.w	r3, r1, r3
 8003146:	4413      	add	r3, r2
 8003148:	3361      	adds	r3, #97	; 0x61
 800314a:	2208      	movs	r2, #8
 800314c:	701a      	strb	r2, [r3, #0]
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 800314e:	687b      	ldr	r3, [r7, #4]
 8003150:	681b      	ldr	r3, [r3, #0]
 8003152:	697a      	ldr	r2, [r7, #20]
 8003154:	b2d2      	uxtb	r2, r2
 8003156:	4611      	mov	r1, r2
 8003158:	4618      	mov	r0, r3
 800315a:	f003 f961 	bl	8006420 <USB_HC_Halt>
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_DTERR);
 800315e:	697b      	ldr	r3, [r7, #20]
 8003160:	015a      	lsls	r2, r3, #5
 8003162:	69bb      	ldr	r3, [r7, #24]
 8003164:	4413      	add	r3, r2
 8003166:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800316a:	461a      	mov	r2, r3
 800316c:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8003170:	6093      	str	r3, [r2, #8]
}
 8003172:	e14a      	b.n	800340a <HCD_HC_OUT_IRQHandler+0x6ca>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_CHH) == USB_OTG_HCINT_CHH)
 8003174:	697b      	ldr	r3, [r7, #20]
 8003176:	015a      	lsls	r2, r3, #5
 8003178:	69bb      	ldr	r3, [r7, #24]
 800317a:	4413      	add	r3, r2
 800317c:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8003180:	689b      	ldr	r3, [r3, #8]
 8003182:	f003 0302 	and.w	r3, r3, #2
 8003186:	2b02      	cmp	r3, #2
 8003188:	f040 813f 	bne.w	800340a <HCD_HC_OUT_IRQHandler+0x6ca>
    if (hhcd->hc[ch_num].state == HC_XFRC)
 800318c:	687a      	ldr	r2, [r7, #4]
 800318e:	697b      	ldr	r3, [r7, #20]
 8003190:	212c      	movs	r1, #44	; 0x2c
 8003192:	fb01 f303 	mul.w	r3, r1, r3
 8003196:	4413      	add	r3, r2
 8003198:	3361      	adds	r3, #97	; 0x61
 800319a:	781b      	ldrb	r3, [r3, #0]
 800319c:	2b01      	cmp	r3, #1
 800319e:	d17d      	bne.n	800329c <HCD_HC_OUT_IRQHandler+0x55c>
      hhcd->hc[ch_num].urb_state  = URB_DONE;
 80031a0:	687a      	ldr	r2, [r7, #4]
 80031a2:	697b      	ldr	r3, [r7, #20]
 80031a4:	212c      	movs	r1, #44	; 0x2c
 80031a6:	fb01 f303 	mul.w	r3, r1, r3
 80031aa:	4413      	add	r3, r2
 80031ac:	3360      	adds	r3, #96	; 0x60
 80031ae:	2201      	movs	r2, #1
 80031b0:	701a      	strb	r2, [r3, #0]
      if ((hhcd->hc[ch_num].ep_type == EP_TYPE_BULK) ||
 80031b2:	687a      	ldr	r2, [r7, #4]
 80031b4:	697b      	ldr	r3, [r7, #20]
 80031b6:	212c      	movs	r1, #44	; 0x2c
 80031b8:	fb01 f303 	mul.w	r3, r1, r3
 80031bc:	4413      	add	r3, r2
 80031be:	333f      	adds	r3, #63	; 0x3f
 80031c0:	781b      	ldrb	r3, [r3, #0]
 80031c2:	2b02      	cmp	r3, #2
 80031c4:	d00a      	beq.n	80031dc <HCD_HC_OUT_IRQHandler+0x49c>
          (hhcd->hc[ch_num].ep_type == EP_TYPE_INTR))
 80031c6:	687a      	ldr	r2, [r7, #4]
 80031c8:	697b      	ldr	r3, [r7, #20]
 80031ca:	212c      	movs	r1, #44	; 0x2c
 80031cc:	fb01 f303 	mul.w	r3, r1, r3
 80031d0:	4413      	add	r3, r2
 80031d2:	333f      	adds	r3, #63	; 0x3f
 80031d4:	781b      	ldrb	r3, [r3, #0]
      if ((hhcd->hc[ch_num].ep_type == EP_TYPE_BULK) ||
 80031d6:	2b03      	cmp	r3, #3
 80031d8:	f040 8100 	bne.w	80033dc <HCD_HC_OUT_IRQHandler+0x69c>
        if (hhcd->Init.dma_enable == 0U)
 80031dc:	687b      	ldr	r3, [r7, #4]
 80031de:	691b      	ldr	r3, [r3, #16]
 80031e0:	2b00      	cmp	r3, #0
 80031e2:	d113      	bne.n	800320c <HCD_HC_OUT_IRQHandler+0x4cc>
          hhcd->hc[ch_num].toggle_out ^= 1U;
 80031e4:	687a      	ldr	r2, [r7, #4]
 80031e6:	697b      	ldr	r3, [r7, #20]
 80031e8:	212c      	movs	r1, #44	; 0x2c
 80031ea:	fb01 f303 	mul.w	r3, r1, r3
 80031ee:	4413      	add	r3, r2
 80031f0:	3355      	adds	r3, #85	; 0x55
 80031f2:	781b      	ldrb	r3, [r3, #0]
 80031f4:	f083 0301 	eor.w	r3, r3, #1
 80031f8:	b2d8      	uxtb	r0, r3
 80031fa:	687a      	ldr	r2, [r7, #4]
 80031fc:	697b      	ldr	r3, [r7, #20]
 80031fe:	212c      	movs	r1, #44	; 0x2c
 8003200:	fb01 f303 	mul.w	r3, r1, r3
 8003204:	4413      	add	r3, r2
 8003206:	3355      	adds	r3, #85	; 0x55
 8003208:	4602      	mov	r2, r0
 800320a:	701a      	strb	r2, [r3, #0]
        if ((hhcd->Init.dma_enable == 1U) && (hhcd->hc[ch_num].xfer_len > 0U))
 800320c:	687b      	ldr	r3, [r7, #4]
 800320e:	691b      	ldr	r3, [r3, #16]
 8003210:	2b01      	cmp	r3, #1
 8003212:	f040 80e3 	bne.w	80033dc <HCD_HC_OUT_IRQHandler+0x69c>
 8003216:	687a      	ldr	r2, [r7, #4]
 8003218:	697b      	ldr	r3, [r7, #20]
 800321a:	212c      	movs	r1, #44	; 0x2c
 800321c:	fb01 f303 	mul.w	r3, r1, r3
 8003220:	4413      	add	r3, r2
 8003222:	334c      	adds	r3, #76	; 0x4c
 8003224:	681b      	ldr	r3, [r3, #0]
 8003226:	2b00      	cmp	r3, #0
 8003228:	f000 80d8 	beq.w	80033dc <HCD_HC_OUT_IRQHandler+0x69c>
          num_packets = (hhcd->hc[ch_num].xfer_len + hhcd->hc[ch_num].max_packet - 1U) / hhcd->hc[ch_num].max_packet;
 800322c:	687a      	ldr	r2, [r7, #4]
 800322e:	697b      	ldr	r3, [r7, #20]
 8003230:	212c      	movs	r1, #44	; 0x2c
 8003232:	fb01 f303 	mul.w	r3, r1, r3
 8003236:	4413      	add	r3, r2
 8003238:	334c      	adds	r3, #76	; 0x4c
 800323a:	681b      	ldr	r3, [r3, #0]
 800323c:	6879      	ldr	r1, [r7, #4]
 800323e:	697a      	ldr	r2, [r7, #20]
 8003240:	202c      	movs	r0, #44	; 0x2c
 8003242:	fb00 f202 	mul.w	r2, r0, r2
 8003246:	440a      	add	r2, r1
 8003248:	3240      	adds	r2, #64	; 0x40
 800324a:	8812      	ldrh	r2, [r2, #0]
 800324c:	4413      	add	r3, r2
 800324e:	3b01      	subs	r3, #1
 8003250:	6879      	ldr	r1, [r7, #4]
 8003252:	697a      	ldr	r2, [r7, #20]
 8003254:	202c      	movs	r0, #44	; 0x2c
 8003256:	fb00 f202 	mul.w	r2, r0, r2
 800325a:	440a      	add	r2, r1
 800325c:	3240      	adds	r2, #64	; 0x40
 800325e:	8812      	ldrh	r2, [r2, #0]
 8003260:	fbb3 f3f2 	udiv	r3, r3, r2
 8003264:	60fb      	str	r3, [r7, #12]
          if ((num_packets & 1U) != 0U)
 8003266:	68fb      	ldr	r3, [r7, #12]
 8003268:	f003 0301 	and.w	r3, r3, #1
 800326c:	2b00      	cmp	r3, #0
 800326e:	f000 80b5 	beq.w	80033dc <HCD_HC_OUT_IRQHandler+0x69c>
            hhcd->hc[ch_num].toggle_out ^= 1U;
 8003272:	687a      	ldr	r2, [r7, #4]
 8003274:	697b      	ldr	r3, [r7, #20]
 8003276:	212c      	movs	r1, #44	; 0x2c
 8003278:	fb01 f303 	mul.w	r3, r1, r3
 800327c:	4413      	add	r3, r2
 800327e:	3355      	adds	r3, #85	; 0x55
 8003280:	781b      	ldrb	r3, [r3, #0]
 8003282:	f083 0301 	eor.w	r3, r3, #1
 8003286:	b2d8      	uxtb	r0, r3
 8003288:	687a      	ldr	r2, [r7, #4]
 800328a:	697b      	ldr	r3, [r7, #20]
 800328c:	212c      	movs	r1, #44	; 0x2c
 800328e:	fb01 f303 	mul.w	r3, r1, r3
 8003292:	4413      	add	r3, r2
 8003294:	3355      	adds	r3, #85	; 0x55
 8003296:	4602      	mov	r2, r0
 8003298:	701a      	strb	r2, [r3, #0]
 800329a:	e09f      	b.n	80033dc <HCD_HC_OUT_IRQHandler+0x69c>
    else if (hhcd->hc[ch_num].state == HC_NAK)
 800329c:	687a      	ldr	r2, [r7, #4]
 800329e:	697b      	ldr	r3, [r7, #20]
 80032a0:	212c      	movs	r1, #44	; 0x2c
 80032a2:	fb01 f303 	mul.w	r3, r1, r3
 80032a6:	4413      	add	r3, r2
 80032a8:	3361      	adds	r3, #97	; 0x61
 80032aa:	781b      	ldrb	r3, [r3, #0]
 80032ac:	2b03      	cmp	r3, #3
 80032ae:	d109      	bne.n	80032c4 <HCD_HC_OUT_IRQHandler+0x584>
      hhcd->hc[ch_num].urb_state = URB_NOTREADY;
 80032b0:	687a      	ldr	r2, [r7, #4]
 80032b2:	697b      	ldr	r3, [r7, #20]
 80032b4:	212c      	movs	r1, #44	; 0x2c
 80032b6:	fb01 f303 	mul.w	r3, r1, r3
 80032ba:	4413      	add	r3, r2
 80032bc:	3360      	adds	r3, #96	; 0x60
 80032be:	2202      	movs	r2, #2
 80032c0:	701a      	strb	r2, [r3, #0]
 80032c2:	e08b      	b.n	80033dc <HCD_HC_OUT_IRQHandler+0x69c>
    else if (hhcd->hc[ch_num].state == HC_NYET)
 80032c4:	687a      	ldr	r2, [r7, #4]
 80032c6:	697b      	ldr	r3, [r7, #20]
 80032c8:	212c      	movs	r1, #44	; 0x2c
 80032ca:	fb01 f303 	mul.w	r3, r1, r3
 80032ce:	4413      	add	r3, r2
 80032d0:	3361      	adds	r3, #97	; 0x61
 80032d2:	781b      	ldrb	r3, [r3, #0]
 80032d4:	2b04      	cmp	r3, #4
 80032d6:	d109      	bne.n	80032ec <HCD_HC_OUT_IRQHandler+0x5ac>
      hhcd->hc[ch_num].urb_state  = URB_NOTREADY;
 80032d8:	687a      	ldr	r2, [r7, #4]
 80032da:	697b      	ldr	r3, [r7, #20]
 80032dc:	212c      	movs	r1, #44	; 0x2c
 80032de:	fb01 f303 	mul.w	r3, r1, r3
 80032e2:	4413      	add	r3, r2
 80032e4:	3360      	adds	r3, #96	; 0x60
 80032e6:	2202      	movs	r2, #2
 80032e8:	701a      	strb	r2, [r3, #0]
 80032ea:	e077      	b.n	80033dc <HCD_HC_OUT_IRQHandler+0x69c>
    else if (hhcd->hc[ch_num].state == HC_STALL)
 80032ec:	687a      	ldr	r2, [r7, #4]
 80032ee:	697b      	ldr	r3, [r7, #20]
 80032f0:	212c      	movs	r1, #44	; 0x2c
 80032f2:	fb01 f303 	mul.w	r3, r1, r3
 80032f6:	4413      	add	r3, r2
 80032f8:	3361      	adds	r3, #97	; 0x61
 80032fa:	781b      	ldrb	r3, [r3, #0]
 80032fc:	2b05      	cmp	r3, #5
 80032fe:	d109      	bne.n	8003314 <HCD_HC_OUT_IRQHandler+0x5d4>
      hhcd->hc[ch_num].urb_state  = URB_STALL;
 8003300:	687a      	ldr	r2, [r7, #4]
 8003302:	697b      	ldr	r3, [r7, #20]
 8003304:	212c      	movs	r1, #44	; 0x2c
 8003306:	fb01 f303 	mul.w	r3, r1, r3
 800330a:	4413      	add	r3, r2
 800330c:	3360      	adds	r3, #96	; 0x60
 800330e:	2205      	movs	r2, #5
 8003310:	701a      	strb	r2, [r3, #0]
 8003312:	e063      	b.n	80033dc <HCD_HC_OUT_IRQHandler+0x69c>
    else if ((hhcd->hc[ch_num].state == HC_XACTERR) ||
 8003314:	687a      	ldr	r2, [r7, #4]
 8003316:	697b      	ldr	r3, [r7, #20]
 8003318:	212c      	movs	r1, #44	; 0x2c
 800331a:	fb01 f303 	mul.w	r3, r1, r3
 800331e:	4413      	add	r3, r2
 8003320:	3361      	adds	r3, #97	; 0x61
 8003322:	781b      	ldrb	r3, [r3, #0]
 8003324:	2b06      	cmp	r3, #6
 8003326:	d009      	beq.n	800333c <HCD_HC_OUT_IRQHandler+0x5fc>
             (hhcd->hc[ch_num].state == HC_DATATGLERR))
 8003328:	687a      	ldr	r2, [r7, #4]
 800332a:	697b      	ldr	r3, [r7, #20]
 800332c:	212c      	movs	r1, #44	; 0x2c
 800332e:	fb01 f303 	mul.w	r3, r1, r3
 8003332:	4413      	add	r3, r2
 8003334:	3361      	adds	r3, #97	; 0x61
 8003336:	781b      	ldrb	r3, [r3, #0]
    else if ((hhcd->hc[ch_num].state == HC_XACTERR) ||
 8003338:	2b08      	cmp	r3, #8
 800333a:	d14f      	bne.n	80033dc <HCD_HC_OUT_IRQHandler+0x69c>
      hhcd->hc[ch_num].ErrCnt++;
 800333c:	687a      	ldr	r2, [r7, #4]
 800333e:	697b      	ldr	r3, [r7, #20]
 8003340:	212c      	movs	r1, #44	; 0x2c
 8003342:	fb01 f303 	mul.w	r3, r1, r3
 8003346:	4413      	add	r3, r2
 8003348:	335c      	adds	r3, #92	; 0x5c
 800334a:	681b      	ldr	r3, [r3, #0]
 800334c:	1c5a      	adds	r2, r3, #1
 800334e:	6879      	ldr	r1, [r7, #4]
 8003350:	697b      	ldr	r3, [r7, #20]
 8003352:	202c      	movs	r0, #44	; 0x2c
 8003354:	fb00 f303 	mul.w	r3, r0, r3
 8003358:	440b      	add	r3, r1
 800335a:	335c      	adds	r3, #92	; 0x5c
 800335c:	601a      	str	r2, [r3, #0]
      if (hhcd->hc[ch_num].ErrCnt > 2U)
 800335e:	687a      	ldr	r2, [r7, #4]
 8003360:	697b      	ldr	r3, [r7, #20]
 8003362:	212c      	movs	r1, #44	; 0x2c
 8003364:	fb01 f303 	mul.w	r3, r1, r3
 8003368:	4413      	add	r3, r2
 800336a:	335c      	adds	r3, #92	; 0x5c
 800336c:	681b      	ldr	r3, [r3, #0]
 800336e:	2b02      	cmp	r3, #2
 8003370:	d912      	bls.n	8003398 <HCD_HC_OUT_IRQHandler+0x658>
        hhcd->hc[ch_num].ErrCnt = 0U;
 8003372:	687a      	ldr	r2, [r7, #4]
 8003374:	697b      	ldr	r3, [r7, #20]
 8003376:	212c      	movs	r1, #44	; 0x2c
 8003378:	fb01 f303 	mul.w	r3, r1, r3
 800337c:	4413      	add	r3, r2
 800337e:	335c      	adds	r3, #92	; 0x5c
 8003380:	2200      	movs	r2, #0
 8003382:	601a      	str	r2, [r3, #0]
        hhcd->hc[ch_num].urb_state = URB_ERROR;
 8003384:	687a      	ldr	r2, [r7, #4]
 8003386:	697b      	ldr	r3, [r7, #20]
 8003388:	212c      	movs	r1, #44	; 0x2c
 800338a:	fb01 f303 	mul.w	r3, r1, r3
 800338e:	4413      	add	r3, r2
 8003390:	3360      	adds	r3, #96	; 0x60
 8003392:	2204      	movs	r2, #4
 8003394:	701a      	strb	r2, [r3, #0]
 8003396:	e021      	b.n	80033dc <HCD_HC_OUT_IRQHandler+0x69c>
        hhcd->hc[ch_num].urb_state = URB_NOTREADY;
 8003398:	687a      	ldr	r2, [r7, #4]
 800339a:	697b      	ldr	r3, [r7, #20]
 800339c:	212c      	movs	r1, #44	; 0x2c
 800339e:	fb01 f303 	mul.w	r3, r1, r3
 80033a2:	4413      	add	r3, r2
 80033a4:	3360      	adds	r3, #96	; 0x60
 80033a6:	2202      	movs	r2, #2
 80033a8:	701a      	strb	r2, [r3, #0]
        tmpreg = USBx_HC(ch_num)->HCCHAR;
 80033aa:	697b      	ldr	r3, [r7, #20]
 80033ac:	015a      	lsls	r2, r3, #5
 80033ae:	69bb      	ldr	r3, [r7, #24]
 80033b0:	4413      	add	r3, r2
 80033b2:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80033b6:	681b      	ldr	r3, [r3, #0]
 80033b8:	613b      	str	r3, [r7, #16]
        tmpreg &= ~USB_OTG_HCCHAR_CHDIS;
 80033ba:	693b      	ldr	r3, [r7, #16]
 80033bc:	f023 4380 	bic.w	r3, r3, #1073741824	; 0x40000000
 80033c0:	613b      	str	r3, [r7, #16]
        tmpreg |= USB_OTG_HCCHAR_CHENA;
 80033c2:	693b      	ldr	r3, [r7, #16]
 80033c4:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 80033c8:	613b      	str	r3, [r7, #16]
        USBx_HC(ch_num)->HCCHAR = tmpreg;
 80033ca:	697b      	ldr	r3, [r7, #20]
 80033cc:	015a      	lsls	r2, r3, #5
 80033ce:	69bb      	ldr	r3, [r7, #24]
 80033d0:	4413      	add	r3, r2
 80033d2:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80033d6:	461a      	mov	r2, r3
 80033d8:	693b      	ldr	r3, [r7, #16]
 80033da:	6013      	str	r3, [r2, #0]
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_CHH);
 80033dc:	697b      	ldr	r3, [r7, #20]
 80033de:	015a      	lsls	r2, r3, #5
 80033e0:	69bb      	ldr	r3, [r7, #24]
 80033e2:	4413      	add	r3, r2
 80033e4:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80033e8:	461a      	mov	r2, r3
 80033ea:	2302      	movs	r3, #2
 80033ec:	6093      	str	r3, [r2, #8]
    HAL_HCD_HC_NotifyURBChange_Callback(hhcd, (uint8_t)ch_num, hhcd->hc[ch_num].urb_state);
 80033ee:	697b      	ldr	r3, [r7, #20]
 80033f0:	b2d9      	uxtb	r1, r3
 80033f2:	687a      	ldr	r2, [r7, #4]
 80033f4:	697b      	ldr	r3, [r7, #20]
 80033f6:	202c      	movs	r0, #44	; 0x2c
 80033f8:	fb00 f303 	mul.w	r3, r0, r3
 80033fc:	4413      	add	r3, r2
 80033fe:	3360      	adds	r3, #96	; 0x60
 8003400:	781b      	ldrb	r3, [r3, #0]
 8003402:	461a      	mov	r2, r3
 8003404:	6878      	ldr	r0, [r7, #4]
 8003406:	f006 fa07 	bl	8009818 <HAL_HCD_HC_NotifyURBChange_Callback>
}
 800340a:	bf00      	nop
 800340c:	3720      	adds	r7, #32
 800340e:	46bd      	mov	sp, r7
 8003410:	bd80      	pop	{r7, pc}

08003412 <HCD_RXQLVL_IRQHandler>:
  * @brief  Handle Rx Queue Level interrupt requests.
  * @param  hhcd HCD handle
  * @retval none
  */
static void HCD_RXQLVL_IRQHandler(HCD_HandleTypeDef *hhcd)
{
 8003412:	b580      	push	{r7, lr}
 8003414:	b08a      	sub	sp, #40	; 0x28
 8003416:	af00      	add	r7, sp, #0
 8003418:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx = hhcd->Instance;
 800341a:	687b      	ldr	r3, [r7, #4]
 800341c:	681b      	ldr	r3, [r3, #0]
 800341e:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t USBx_BASE = (uint32_t)USBx;
 8003420:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003422:	623b      	str	r3, [r7, #32]
  uint32_t GrxstspReg;
  uint32_t xferSizePktCnt;
  uint32_t tmpreg;
  uint32_t ch_num;

  GrxstspReg = hhcd->Instance->GRXSTSP;
 8003424:	687b      	ldr	r3, [r7, #4]
 8003426:	681b      	ldr	r3, [r3, #0]
 8003428:	6a1b      	ldr	r3, [r3, #32]
 800342a:	61fb      	str	r3, [r7, #28]
  ch_num = GrxstspReg & USB_OTG_GRXSTSP_EPNUM;
 800342c:	69fb      	ldr	r3, [r7, #28]
 800342e:	f003 030f 	and.w	r3, r3, #15
 8003432:	61bb      	str	r3, [r7, #24]
  pktsts = (GrxstspReg & USB_OTG_GRXSTSP_PKTSTS) >> 17;
 8003434:	69fb      	ldr	r3, [r7, #28]
 8003436:	0c5b      	lsrs	r3, r3, #17
 8003438:	f003 030f 	and.w	r3, r3, #15
 800343c:	617b      	str	r3, [r7, #20]
  pktcnt = (GrxstspReg & USB_OTG_GRXSTSP_BCNT) >> 4;
 800343e:	69fb      	ldr	r3, [r7, #28]
 8003440:	091b      	lsrs	r3, r3, #4
 8003442:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8003446:	613b      	str	r3, [r7, #16]

  switch (pktsts)
 8003448:	697b      	ldr	r3, [r7, #20]
 800344a:	2b02      	cmp	r3, #2
 800344c:	d004      	beq.n	8003458 <HCD_RXQLVL_IRQHandler+0x46>
 800344e:	697b      	ldr	r3, [r7, #20]
 8003450:	2b05      	cmp	r3, #5
 8003452:	f000 80a9 	beq.w	80035a8 <HCD_RXQLVL_IRQHandler+0x196>
      break;

    case GRXSTS_PKTSTS_IN_XFER_COMP:
    case GRXSTS_PKTSTS_CH_HALTED:
    default:
      break;
 8003456:	e0aa      	b.n	80035ae <HCD_RXQLVL_IRQHandler+0x19c>
      if ((pktcnt > 0U) && (hhcd->hc[ch_num].xfer_buff != (void *)0))
 8003458:	693b      	ldr	r3, [r7, #16]
 800345a:	2b00      	cmp	r3, #0
 800345c:	f000 80a6 	beq.w	80035ac <HCD_RXQLVL_IRQHandler+0x19a>
 8003460:	687a      	ldr	r2, [r7, #4]
 8003462:	69bb      	ldr	r3, [r7, #24]
 8003464:	212c      	movs	r1, #44	; 0x2c
 8003466:	fb01 f303 	mul.w	r3, r1, r3
 800346a:	4413      	add	r3, r2
 800346c:	3344      	adds	r3, #68	; 0x44
 800346e:	681b      	ldr	r3, [r3, #0]
 8003470:	2b00      	cmp	r3, #0
 8003472:	f000 809b 	beq.w	80035ac <HCD_RXQLVL_IRQHandler+0x19a>
        if ((hhcd->hc[ch_num].xfer_count + pktcnt) <= hhcd->hc[ch_num].xfer_len)
 8003476:	687a      	ldr	r2, [r7, #4]
 8003478:	69bb      	ldr	r3, [r7, #24]
 800347a:	212c      	movs	r1, #44	; 0x2c
 800347c:	fb01 f303 	mul.w	r3, r1, r3
 8003480:	4413      	add	r3, r2
 8003482:	3350      	adds	r3, #80	; 0x50
 8003484:	681a      	ldr	r2, [r3, #0]
 8003486:	693b      	ldr	r3, [r7, #16]
 8003488:	441a      	add	r2, r3
 800348a:	6879      	ldr	r1, [r7, #4]
 800348c:	69bb      	ldr	r3, [r7, #24]
 800348e:	202c      	movs	r0, #44	; 0x2c
 8003490:	fb00 f303 	mul.w	r3, r0, r3
 8003494:	440b      	add	r3, r1
 8003496:	334c      	adds	r3, #76	; 0x4c
 8003498:	681b      	ldr	r3, [r3, #0]
 800349a:	429a      	cmp	r2, r3
 800349c:	d87a      	bhi.n	8003594 <HCD_RXQLVL_IRQHandler+0x182>
          (void)USB_ReadPacket(hhcd->Instance,
 800349e:	687b      	ldr	r3, [r7, #4]
 80034a0:	6818      	ldr	r0, [r3, #0]
 80034a2:	687a      	ldr	r2, [r7, #4]
 80034a4:	69bb      	ldr	r3, [r7, #24]
 80034a6:	212c      	movs	r1, #44	; 0x2c
 80034a8:	fb01 f303 	mul.w	r3, r1, r3
 80034ac:	4413      	add	r3, r2
 80034ae:	3344      	adds	r3, #68	; 0x44
 80034b0:	681b      	ldr	r3, [r3, #0]
 80034b2:	693a      	ldr	r2, [r7, #16]
 80034b4:	b292      	uxth	r2, r2
 80034b6:	4619      	mov	r1, r3
 80034b8:	f002 feee 	bl	8006298 <USB_ReadPacket>
          hhcd->hc[ch_num].xfer_buff += pktcnt;
 80034bc:	687a      	ldr	r2, [r7, #4]
 80034be:	69bb      	ldr	r3, [r7, #24]
 80034c0:	212c      	movs	r1, #44	; 0x2c
 80034c2:	fb01 f303 	mul.w	r3, r1, r3
 80034c6:	4413      	add	r3, r2
 80034c8:	3344      	adds	r3, #68	; 0x44
 80034ca:	681a      	ldr	r2, [r3, #0]
 80034cc:	693b      	ldr	r3, [r7, #16]
 80034ce:	441a      	add	r2, r3
 80034d0:	6879      	ldr	r1, [r7, #4]
 80034d2:	69bb      	ldr	r3, [r7, #24]
 80034d4:	202c      	movs	r0, #44	; 0x2c
 80034d6:	fb00 f303 	mul.w	r3, r0, r3
 80034da:	440b      	add	r3, r1
 80034dc:	3344      	adds	r3, #68	; 0x44
 80034de:	601a      	str	r2, [r3, #0]
          hhcd->hc[ch_num].xfer_count += pktcnt;
 80034e0:	687a      	ldr	r2, [r7, #4]
 80034e2:	69bb      	ldr	r3, [r7, #24]
 80034e4:	212c      	movs	r1, #44	; 0x2c
 80034e6:	fb01 f303 	mul.w	r3, r1, r3
 80034ea:	4413      	add	r3, r2
 80034ec:	3350      	adds	r3, #80	; 0x50
 80034ee:	681a      	ldr	r2, [r3, #0]
 80034f0:	693b      	ldr	r3, [r7, #16]
 80034f2:	441a      	add	r2, r3
 80034f4:	6879      	ldr	r1, [r7, #4]
 80034f6:	69bb      	ldr	r3, [r7, #24]
 80034f8:	202c      	movs	r0, #44	; 0x2c
 80034fa:	fb00 f303 	mul.w	r3, r0, r3
 80034fe:	440b      	add	r3, r1
 8003500:	3350      	adds	r3, #80	; 0x50
 8003502:	601a      	str	r2, [r3, #0]
          xferSizePktCnt = (USBx_HC(ch_num)->HCTSIZ & USB_OTG_HCTSIZ_PKTCNT) >> 19;
 8003504:	69bb      	ldr	r3, [r7, #24]
 8003506:	015a      	lsls	r2, r3, #5
 8003508:	6a3b      	ldr	r3, [r7, #32]
 800350a:	4413      	add	r3, r2
 800350c:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8003510:	691b      	ldr	r3, [r3, #16]
 8003512:	0cdb      	lsrs	r3, r3, #19
 8003514:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8003518:	60fb      	str	r3, [r7, #12]
          if ((hhcd->hc[ch_num].max_packet == pktcnt) && (xferSizePktCnt > 0U))
 800351a:	687a      	ldr	r2, [r7, #4]
 800351c:	69bb      	ldr	r3, [r7, #24]
 800351e:	212c      	movs	r1, #44	; 0x2c
 8003520:	fb01 f303 	mul.w	r3, r1, r3
 8003524:	4413      	add	r3, r2
 8003526:	3340      	adds	r3, #64	; 0x40
 8003528:	881b      	ldrh	r3, [r3, #0]
 800352a:	461a      	mov	r2, r3
 800352c:	693b      	ldr	r3, [r7, #16]
 800352e:	4293      	cmp	r3, r2
 8003530:	d13c      	bne.n	80035ac <HCD_RXQLVL_IRQHandler+0x19a>
 8003532:	68fb      	ldr	r3, [r7, #12]
 8003534:	2b00      	cmp	r3, #0
 8003536:	d039      	beq.n	80035ac <HCD_RXQLVL_IRQHandler+0x19a>
            tmpreg = USBx_HC(ch_num)->HCCHAR;
 8003538:	69bb      	ldr	r3, [r7, #24]
 800353a:	015a      	lsls	r2, r3, #5
 800353c:	6a3b      	ldr	r3, [r7, #32]
 800353e:	4413      	add	r3, r2
 8003540:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8003544:	681b      	ldr	r3, [r3, #0]
 8003546:	60bb      	str	r3, [r7, #8]
            tmpreg &= ~USB_OTG_HCCHAR_CHDIS;
 8003548:	68bb      	ldr	r3, [r7, #8]
 800354a:	f023 4380 	bic.w	r3, r3, #1073741824	; 0x40000000
 800354e:	60bb      	str	r3, [r7, #8]
            tmpreg |= USB_OTG_HCCHAR_CHENA;
 8003550:	68bb      	ldr	r3, [r7, #8]
 8003552:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8003556:	60bb      	str	r3, [r7, #8]
            USBx_HC(ch_num)->HCCHAR = tmpreg;
 8003558:	69bb      	ldr	r3, [r7, #24]
 800355a:	015a      	lsls	r2, r3, #5
 800355c:	6a3b      	ldr	r3, [r7, #32]
 800355e:	4413      	add	r3, r2
 8003560:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8003564:	461a      	mov	r2, r3
 8003566:	68bb      	ldr	r3, [r7, #8]
 8003568:	6013      	str	r3, [r2, #0]
            hhcd->hc[ch_num].toggle_in ^= 1U;
 800356a:	687a      	ldr	r2, [r7, #4]
 800356c:	69bb      	ldr	r3, [r7, #24]
 800356e:	212c      	movs	r1, #44	; 0x2c
 8003570:	fb01 f303 	mul.w	r3, r1, r3
 8003574:	4413      	add	r3, r2
 8003576:	3354      	adds	r3, #84	; 0x54
 8003578:	781b      	ldrb	r3, [r3, #0]
 800357a:	f083 0301 	eor.w	r3, r3, #1
 800357e:	b2d8      	uxtb	r0, r3
 8003580:	687a      	ldr	r2, [r7, #4]
 8003582:	69bb      	ldr	r3, [r7, #24]
 8003584:	212c      	movs	r1, #44	; 0x2c
 8003586:	fb01 f303 	mul.w	r3, r1, r3
 800358a:	4413      	add	r3, r2
 800358c:	3354      	adds	r3, #84	; 0x54
 800358e:	4602      	mov	r2, r0
 8003590:	701a      	strb	r2, [r3, #0]
      break;
 8003592:	e00b      	b.n	80035ac <HCD_RXQLVL_IRQHandler+0x19a>
          hhcd->hc[ch_num].urb_state = URB_ERROR;
 8003594:	687a      	ldr	r2, [r7, #4]
 8003596:	69bb      	ldr	r3, [r7, #24]
 8003598:	212c      	movs	r1, #44	; 0x2c
 800359a:	fb01 f303 	mul.w	r3, r1, r3
 800359e:	4413      	add	r3, r2
 80035a0:	3360      	adds	r3, #96	; 0x60
 80035a2:	2204      	movs	r2, #4
 80035a4:	701a      	strb	r2, [r3, #0]
      break;
 80035a6:	e001      	b.n	80035ac <HCD_RXQLVL_IRQHandler+0x19a>
      break;
 80035a8:	bf00      	nop
 80035aa:	e000      	b.n	80035ae <HCD_RXQLVL_IRQHandler+0x19c>
      break;
 80035ac:	bf00      	nop
  }
}
 80035ae:	bf00      	nop
 80035b0:	3728      	adds	r7, #40	; 0x28
 80035b2:	46bd      	mov	sp, r7
 80035b4:	bd80      	pop	{r7, pc}

080035b6 <HCD_Port_IRQHandler>:
  * @brief  Handle Host Port interrupt requests.
  * @param  hhcd HCD handle
  * @retval None
  */
static void HCD_Port_IRQHandler(HCD_HandleTypeDef *hhcd)
{
 80035b6:	b580      	push	{r7, lr}
 80035b8:	b086      	sub	sp, #24
 80035ba:	af00      	add	r7, sp, #0
 80035bc:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx = hhcd->Instance;
 80035be:	687b      	ldr	r3, [r7, #4]
 80035c0:	681b      	ldr	r3, [r3, #0]
 80035c2:	617b      	str	r3, [r7, #20]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80035c4:	697b      	ldr	r3, [r7, #20]
 80035c6:	613b      	str	r3, [r7, #16]
  __IO uint32_t hprt0;
  __IO uint32_t hprt0_dup;

  /* Handle Host Port Interrupts */
  hprt0 = USBx_HPRT0;
 80035c8:	693b      	ldr	r3, [r7, #16]
 80035ca:	f503 6388 	add.w	r3, r3, #1088	; 0x440
 80035ce:	681b      	ldr	r3, [r3, #0]
 80035d0:	60fb      	str	r3, [r7, #12]
  hprt0_dup = USBx_HPRT0;
 80035d2:	693b      	ldr	r3, [r7, #16]
 80035d4:	f503 6388 	add.w	r3, r3, #1088	; 0x440
 80035d8:	681b      	ldr	r3, [r3, #0]
 80035da:	60bb      	str	r3, [r7, #8]

  hprt0_dup &= ~(USB_OTG_HPRT_PENA | USB_OTG_HPRT_PCDET | \
 80035dc:	68bb      	ldr	r3, [r7, #8]
 80035de:	f023 032e 	bic.w	r3, r3, #46	; 0x2e
 80035e2:	60bb      	str	r3, [r7, #8]
                 USB_OTG_HPRT_PENCHNG | USB_OTG_HPRT_POCCHNG);

  /* Check whether Port Connect detected */
  if ((hprt0 & USB_OTG_HPRT_PCDET) == USB_OTG_HPRT_PCDET)
 80035e4:	68fb      	ldr	r3, [r7, #12]
 80035e6:	f003 0302 	and.w	r3, r3, #2
 80035ea:	2b02      	cmp	r3, #2
 80035ec:	d10b      	bne.n	8003606 <HCD_Port_IRQHandler+0x50>
  {
    if ((hprt0 & USB_OTG_HPRT_PCSTS) == USB_OTG_HPRT_PCSTS)
 80035ee:	68fb      	ldr	r3, [r7, #12]
 80035f0:	f003 0301 	and.w	r3, r3, #1
 80035f4:	2b01      	cmp	r3, #1
 80035f6:	d102      	bne.n	80035fe <HCD_Port_IRQHandler+0x48>
    {
#if (USE_HAL_HCD_REGISTER_CALLBACKS == 1U)
      hhcd->ConnectCallback(hhcd);
#else
      HAL_HCD_Connect_Callback(hhcd);
 80035f8:	6878      	ldr	r0, [r7, #4]
 80035fa:	f006 f8f1 	bl	80097e0 <HAL_HCD_Connect_Callback>
#endif /* USE_HAL_HCD_REGISTER_CALLBACKS */
    }
    hprt0_dup |= USB_OTG_HPRT_PCDET;
 80035fe:	68bb      	ldr	r3, [r7, #8]
 8003600:	f043 0302 	orr.w	r3, r3, #2
 8003604:	60bb      	str	r3, [r7, #8]
  }

  /* Check whether Port Enable Changed */
  if ((hprt0 & USB_OTG_HPRT_PENCHNG) == USB_OTG_HPRT_PENCHNG)
 8003606:	68fb      	ldr	r3, [r7, #12]
 8003608:	f003 0308 	and.w	r3, r3, #8
 800360c:	2b08      	cmp	r3, #8
 800360e:	d132      	bne.n	8003676 <HCD_Port_IRQHandler+0xc0>
  {
    hprt0_dup |= USB_OTG_HPRT_PENCHNG;
 8003610:	68bb      	ldr	r3, [r7, #8]
 8003612:	f043 0308 	orr.w	r3, r3, #8
 8003616:	60bb      	str	r3, [r7, #8]

    if ((hprt0 & USB_OTG_HPRT_PENA) == USB_OTG_HPRT_PENA)
 8003618:	68fb      	ldr	r3, [r7, #12]
 800361a:	f003 0304 	and.w	r3, r3, #4
 800361e:	2b04      	cmp	r3, #4
 8003620:	d126      	bne.n	8003670 <HCD_Port_IRQHandler+0xba>
    {
      if (hhcd->Init.phy_itface  == USB_OTG_EMBEDDED_PHY)
 8003622:	687b      	ldr	r3, [r7, #4]
 8003624:	699b      	ldr	r3, [r3, #24]
 8003626:	2b02      	cmp	r3, #2
 8003628:	d113      	bne.n	8003652 <HCD_Port_IRQHandler+0x9c>
      {
        if ((hprt0 & USB_OTG_HPRT_PSPD) == (HPRT0_PRTSPD_LOW_SPEED << 17))
 800362a:	68fb      	ldr	r3, [r7, #12]
 800362c:	f403 23c0 	and.w	r3, r3, #393216	; 0x60000
 8003630:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 8003634:	d106      	bne.n	8003644 <HCD_Port_IRQHandler+0x8e>
        {
          (void)USB_InitFSLSPClkSel(hhcd->Instance, HCFG_6_MHZ);
 8003636:	687b      	ldr	r3, [r7, #4]
 8003638:	681b      	ldr	r3, [r3, #0]
 800363a:	2102      	movs	r1, #2
 800363c:	4618      	mov	r0, r3
 800363e:	f002 fea4 	bl	800638a <USB_InitFSLSPClkSel>
 8003642:	e011      	b.n	8003668 <HCD_Port_IRQHandler+0xb2>
        }
        else
        {
          (void)USB_InitFSLSPClkSel(hhcd->Instance, HCFG_48_MHZ);
 8003644:	687b      	ldr	r3, [r7, #4]
 8003646:	681b      	ldr	r3, [r3, #0]
 8003648:	2101      	movs	r1, #1
 800364a:	4618      	mov	r0, r3
 800364c:	f002 fe9d 	bl	800638a <USB_InitFSLSPClkSel>
 8003650:	e00a      	b.n	8003668 <HCD_Port_IRQHandler+0xb2>
        }
      }
      else
      {
        if (hhcd->Init.speed == HCD_SPEED_FULL)
 8003652:	687b      	ldr	r3, [r7, #4]
 8003654:	68db      	ldr	r3, [r3, #12]
 8003656:	2b01      	cmp	r3, #1
 8003658:	d106      	bne.n	8003668 <HCD_Port_IRQHandler+0xb2>
        {
          USBx_HOST->HFIR = 60000U;
 800365a:	693b      	ldr	r3, [r7, #16]
 800365c:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8003660:	461a      	mov	r2, r3
 8003662:	f64e 2360 	movw	r3, #60000	; 0xea60
 8003666:	6053      	str	r3, [r2, #4]
        }
      }
#if (USE_HAL_HCD_REGISTER_CALLBACKS == 1U)
      hhcd->PortEnabledCallback(hhcd);
#else
      HAL_HCD_PortEnabled_Callback(hhcd);
 8003668:	6878      	ldr	r0, [r7, #4]
 800366a:	f006 f8e7 	bl	800983c <HAL_HCD_PortEnabled_Callback>
 800366e:	e002      	b.n	8003676 <HCD_Port_IRQHandler+0xc0>
    else
    {
#if (USE_HAL_HCD_REGISTER_CALLBACKS == 1U)
      hhcd->PortDisabledCallback(hhcd);
#else
      HAL_HCD_PortDisabled_Callback(hhcd);
 8003670:	6878      	ldr	r0, [r7, #4]
 8003672:	f006 f8f1 	bl	8009858 <HAL_HCD_PortDisabled_Callback>
#endif /* USE_HAL_HCD_REGISTER_CALLBACKS */
    }
  }

  /* Check for an overcurrent */
  if ((hprt0 & USB_OTG_HPRT_POCCHNG) == USB_OTG_HPRT_POCCHNG)
 8003676:	68fb      	ldr	r3, [r7, #12]
 8003678:	f003 0320 	and.w	r3, r3, #32
 800367c:	2b20      	cmp	r3, #32
 800367e:	d103      	bne.n	8003688 <HCD_Port_IRQHandler+0xd2>
  {
    hprt0_dup |= USB_OTG_HPRT_POCCHNG;
 8003680:	68bb      	ldr	r3, [r7, #8]
 8003682:	f043 0320 	orr.w	r3, r3, #32
 8003686:	60bb      	str	r3, [r7, #8]
  }

  /* Clear Port Interrupts */
  USBx_HPRT0 = hprt0_dup;
 8003688:	693b      	ldr	r3, [r7, #16]
 800368a:	f503 6388 	add.w	r3, r3, #1088	; 0x440
 800368e:	461a      	mov	r2, r3
 8003690:	68bb      	ldr	r3, [r7, #8]
 8003692:	6013      	str	r3, [r2, #0]
}
 8003694:	bf00      	nop
 8003696:	3718      	adds	r7, #24
 8003698:	46bd      	mov	sp, r7
 800369a:	bd80      	pop	{r7, pc}

0800369c <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 800369c:	b580      	push	{r7, lr}
 800369e:	b084      	sub	sp, #16
 80036a0:	af00      	add	r7, sp, #0
 80036a2:	6078      	str	r0, [r7, #4]
  uint32_t freqrange;
  uint32_t pclk1;

  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 80036a4:	687b      	ldr	r3, [r7, #4]
 80036a6:	2b00      	cmp	r3, #0
 80036a8:	d101      	bne.n	80036ae <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 80036aa:	2301      	movs	r3, #1
 80036ac:	e12b      	b.n	8003906 <HAL_I2C_Init+0x26a>
  assert_param(IS_I2C_DUAL_ADDRESS(hi2c->Init.DualAddressMode));
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 80036ae:	687b      	ldr	r3, [r7, #4]
 80036b0:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80036b4:	b2db      	uxtb	r3, r3
 80036b6:	2b00      	cmp	r3, #0
 80036b8:	d106      	bne.n	80036c8 <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 80036ba:	687b      	ldr	r3, [r7, #4]
 80036bc:	2200      	movs	r2, #0
 80036be:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_I2C_MspInit(hi2c);
 80036c2:	6878      	ldr	r0, [r7, #4]
 80036c4:	f7fd fbc4 	bl	8000e50 <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 80036c8:	687b      	ldr	r3, [r7, #4]
 80036ca:	2224      	movs	r2, #36	; 0x24
 80036cc:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 80036d0:	687b      	ldr	r3, [r7, #4]
 80036d2:	681b      	ldr	r3, [r3, #0]
 80036d4:	681a      	ldr	r2, [r3, #0]
 80036d6:	687b      	ldr	r3, [r7, #4]
 80036d8:	681b      	ldr	r3, [r3, #0]
 80036da:	f022 0201 	bic.w	r2, r2, #1
 80036de:	601a      	str	r2, [r3, #0]

  /*Reset I2C*/
  hi2c->Instance->CR1 |= I2C_CR1_SWRST;
 80036e0:	687b      	ldr	r3, [r7, #4]
 80036e2:	681b      	ldr	r3, [r3, #0]
 80036e4:	681a      	ldr	r2, [r3, #0]
 80036e6:	687b      	ldr	r3, [r7, #4]
 80036e8:	681b      	ldr	r3, [r3, #0]
 80036ea:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 80036ee:	601a      	str	r2, [r3, #0]
  hi2c->Instance->CR1 &= ~I2C_CR1_SWRST;
 80036f0:	687b      	ldr	r3, [r7, #4]
 80036f2:	681b      	ldr	r3, [r3, #0]
 80036f4:	681a      	ldr	r2, [r3, #0]
 80036f6:	687b      	ldr	r3, [r7, #4]
 80036f8:	681b      	ldr	r3, [r3, #0]
 80036fa:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 80036fe:	601a      	str	r2, [r3, #0]

  /* Get PCLK1 frequency */
  pclk1 = HAL_RCC_GetPCLK1Freq();
 8003700:	f001 f964 	bl	80049cc <HAL_RCC_GetPCLK1Freq>
 8003704:	60f8      	str	r0, [r7, #12]

  /* Check the minimum allowed PCLK1 frequency */
  if (I2C_MIN_PCLK_FREQ(pclk1, hi2c->Init.ClockSpeed) == 1U)
 8003706:	687b      	ldr	r3, [r7, #4]
 8003708:	685b      	ldr	r3, [r3, #4]
 800370a:	4a81      	ldr	r2, [pc, #516]	; (8003910 <HAL_I2C_Init+0x274>)
 800370c:	4293      	cmp	r3, r2
 800370e:	d807      	bhi.n	8003720 <HAL_I2C_Init+0x84>
 8003710:	68fb      	ldr	r3, [r7, #12]
 8003712:	4a80      	ldr	r2, [pc, #512]	; (8003914 <HAL_I2C_Init+0x278>)
 8003714:	4293      	cmp	r3, r2
 8003716:	bf94      	ite	ls
 8003718:	2301      	movls	r3, #1
 800371a:	2300      	movhi	r3, #0
 800371c:	b2db      	uxtb	r3, r3
 800371e:	e006      	b.n	800372e <HAL_I2C_Init+0x92>
 8003720:	68fb      	ldr	r3, [r7, #12]
 8003722:	4a7d      	ldr	r2, [pc, #500]	; (8003918 <HAL_I2C_Init+0x27c>)
 8003724:	4293      	cmp	r3, r2
 8003726:	bf94      	ite	ls
 8003728:	2301      	movls	r3, #1
 800372a:	2300      	movhi	r3, #0
 800372c:	b2db      	uxtb	r3, r3
 800372e:	2b00      	cmp	r3, #0
 8003730:	d001      	beq.n	8003736 <HAL_I2C_Init+0x9a>
  {
    return HAL_ERROR;
 8003732:	2301      	movs	r3, #1
 8003734:	e0e7      	b.n	8003906 <HAL_I2C_Init+0x26a>
  }

  /* Calculate frequency range */
  freqrange = I2C_FREQRANGE(pclk1);
 8003736:	68fb      	ldr	r3, [r7, #12]
 8003738:	4a78      	ldr	r2, [pc, #480]	; (800391c <HAL_I2C_Init+0x280>)
 800373a:	fba2 2303 	umull	r2, r3, r2, r3
 800373e:	0c9b      	lsrs	r3, r3, #18
 8003740:	60bb      	str	r3, [r7, #8]

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Frequency range */
  MODIFY_REG(hi2c->Instance->CR2, I2C_CR2_FREQ, freqrange);
 8003742:	687b      	ldr	r3, [r7, #4]
 8003744:	681b      	ldr	r3, [r3, #0]
 8003746:	685b      	ldr	r3, [r3, #4]
 8003748:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 800374c:	687b      	ldr	r3, [r7, #4]
 800374e:	681b      	ldr	r3, [r3, #0]
 8003750:	68ba      	ldr	r2, [r7, #8]
 8003752:	430a      	orrs	r2, r1
 8003754:	605a      	str	r2, [r3, #4]

  /*---------------------------- I2Cx TRISE Configuration --------------------*/
  /* Configure I2Cx: Rise Time */
  MODIFY_REG(hi2c->Instance->TRISE, I2C_TRISE_TRISE, I2C_RISE_TIME(freqrange, hi2c->Init.ClockSpeed));
 8003756:	687b      	ldr	r3, [r7, #4]
 8003758:	681b      	ldr	r3, [r3, #0]
 800375a:	6a1b      	ldr	r3, [r3, #32]
 800375c:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 8003760:	687b      	ldr	r3, [r7, #4]
 8003762:	685b      	ldr	r3, [r3, #4]
 8003764:	4a6a      	ldr	r2, [pc, #424]	; (8003910 <HAL_I2C_Init+0x274>)
 8003766:	4293      	cmp	r3, r2
 8003768:	d802      	bhi.n	8003770 <HAL_I2C_Init+0xd4>
 800376a:	68bb      	ldr	r3, [r7, #8]
 800376c:	3301      	adds	r3, #1
 800376e:	e009      	b.n	8003784 <HAL_I2C_Init+0xe8>
 8003770:	68bb      	ldr	r3, [r7, #8]
 8003772:	f44f 7296 	mov.w	r2, #300	; 0x12c
 8003776:	fb02 f303 	mul.w	r3, r2, r3
 800377a:	4a69      	ldr	r2, [pc, #420]	; (8003920 <HAL_I2C_Init+0x284>)
 800377c:	fba2 2303 	umull	r2, r3, r2, r3
 8003780:	099b      	lsrs	r3, r3, #6
 8003782:	3301      	adds	r3, #1
 8003784:	687a      	ldr	r2, [r7, #4]
 8003786:	6812      	ldr	r2, [r2, #0]
 8003788:	430b      	orrs	r3, r1
 800378a:	6213      	str	r3, [r2, #32]

  /*---------------------------- I2Cx CCR Configuration ----------------------*/
  /* Configure I2Cx: Speed */
  MODIFY_REG(hi2c->Instance->CCR, (I2C_CCR_FS | I2C_CCR_DUTY | I2C_CCR_CCR), I2C_SPEED(pclk1, hi2c->Init.ClockSpeed, hi2c->Init.DutyCycle));
 800378c:	687b      	ldr	r3, [r7, #4]
 800378e:	681b      	ldr	r3, [r3, #0]
 8003790:	69db      	ldr	r3, [r3, #28]
 8003792:	f423 424f 	bic.w	r2, r3, #52992	; 0xcf00
 8003796:	f022 02ff 	bic.w	r2, r2, #255	; 0xff
 800379a:	687b      	ldr	r3, [r7, #4]
 800379c:	685b      	ldr	r3, [r3, #4]
 800379e:	495c      	ldr	r1, [pc, #368]	; (8003910 <HAL_I2C_Init+0x274>)
 80037a0:	428b      	cmp	r3, r1
 80037a2:	d819      	bhi.n	80037d8 <HAL_I2C_Init+0x13c>
 80037a4:	68fb      	ldr	r3, [r7, #12]
 80037a6:	1e59      	subs	r1, r3, #1
 80037a8:	687b      	ldr	r3, [r7, #4]
 80037aa:	685b      	ldr	r3, [r3, #4]
 80037ac:	005b      	lsls	r3, r3, #1
 80037ae:	fbb1 f3f3 	udiv	r3, r1, r3
 80037b2:	1c59      	adds	r1, r3, #1
 80037b4:	f640 73fc 	movw	r3, #4092	; 0xffc
 80037b8:	400b      	ands	r3, r1
 80037ba:	2b00      	cmp	r3, #0
 80037bc:	d00a      	beq.n	80037d4 <HAL_I2C_Init+0x138>
 80037be:	68fb      	ldr	r3, [r7, #12]
 80037c0:	1e59      	subs	r1, r3, #1
 80037c2:	687b      	ldr	r3, [r7, #4]
 80037c4:	685b      	ldr	r3, [r3, #4]
 80037c6:	005b      	lsls	r3, r3, #1
 80037c8:	fbb1 f3f3 	udiv	r3, r1, r3
 80037cc:	3301      	adds	r3, #1
 80037ce:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80037d2:	e051      	b.n	8003878 <HAL_I2C_Init+0x1dc>
 80037d4:	2304      	movs	r3, #4
 80037d6:	e04f      	b.n	8003878 <HAL_I2C_Init+0x1dc>
 80037d8:	687b      	ldr	r3, [r7, #4]
 80037da:	689b      	ldr	r3, [r3, #8]
 80037dc:	2b00      	cmp	r3, #0
 80037de:	d111      	bne.n	8003804 <HAL_I2C_Init+0x168>
 80037e0:	68fb      	ldr	r3, [r7, #12]
 80037e2:	1e58      	subs	r0, r3, #1
 80037e4:	687b      	ldr	r3, [r7, #4]
 80037e6:	6859      	ldr	r1, [r3, #4]
 80037e8:	460b      	mov	r3, r1
 80037ea:	005b      	lsls	r3, r3, #1
 80037ec:	440b      	add	r3, r1
 80037ee:	fbb0 f3f3 	udiv	r3, r0, r3
 80037f2:	3301      	adds	r3, #1
 80037f4:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80037f8:	2b00      	cmp	r3, #0
 80037fa:	bf0c      	ite	eq
 80037fc:	2301      	moveq	r3, #1
 80037fe:	2300      	movne	r3, #0
 8003800:	b2db      	uxtb	r3, r3
 8003802:	e012      	b.n	800382a <HAL_I2C_Init+0x18e>
 8003804:	68fb      	ldr	r3, [r7, #12]
 8003806:	1e58      	subs	r0, r3, #1
 8003808:	687b      	ldr	r3, [r7, #4]
 800380a:	6859      	ldr	r1, [r3, #4]
 800380c:	460b      	mov	r3, r1
 800380e:	009b      	lsls	r3, r3, #2
 8003810:	440b      	add	r3, r1
 8003812:	0099      	lsls	r1, r3, #2
 8003814:	440b      	add	r3, r1
 8003816:	fbb0 f3f3 	udiv	r3, r0, r3
 800381a:	3301      	adds	r3, #1
 800381c:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8003820:	2b00      	cmp	r3, #0
 8003822:	bf0c      	ite	eq
 8003824:	2301      	moveq	r3, #1
 8003826:	2300      	movne	r3, #0
 8003828:	b2db      	uxtb	r3, r3
 800382a:	2b00      	cmp	r3, #0
 800382c:	d001      	beq.n	8003832 <HAL_I2C_Init+0x196>
 800382e:	2301      	movs	r3, #1
 8003830:	e022      	b.n	8003878 <HAL_I2C_Init+0x1dc>
 8003832:	687b      	ldr	r3, [r7, #4]
 8003834:	689b      	ldr	r3, [r3, #8]
 8003836:	2b00      	cmp	r3, #0
 8003838:	d10e      	bne.n	8003858 <HAL_I2C_Init+0x1bc>
 800383a:	68fb      	ldr	r3, [r7, #12]
 800383c:	1e58      	subs	r0, r3, #1
 800383e:	687b      	ldr	r3, [r7, #4]
 8003840:	6859      	ldr	r1, [r3, #4]
 8003842:	460b      	mov	r3, r1
 8003844:	005b      	lsls	r3, r3, #1
 8003846:	440b      	add	r3, r1
 8003848:	fbb0 f3f3 	udiv	r3, r0, r3
 800384c:	3301      	adds	r3, #1
 800384e:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8003852:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8003856:	e00f      	b.n	8003878 <HAL_I2C_Init+0x1dc>
 8003858:	68fb      	ldr	r3, [r7, #12]
 800385a:	1e58      	subs	r0, r3, #1
 800385c:	687b      	ldr	r3, [r7, #4]
 800385e:	6859      	ldr	r1, [r3, #4]
 8003860:	460b      	mov	r3, r1
 8003862:	009b      	lsls	r3, r3, #2
 8003864:	440b      	add	r3, r1
 8003866:	0099      	lsls	r1, r3, #2
 8003868:	440b      	add	r3, r1
 800386a:	fbb0 f3f3 	udiv	r3, r0, r3
 800386e:	3301      	adds	r3, #1
 8003870:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8003874:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8003878:	6879      	ldr	r1, [r7, #4]
 800387a:	6809      	ldr	r1, [r1, #0]
 800387c:	4313      	orrs	r3, r2
 800387e:	61cb      	str	r3, [r1, #28]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  MODIFY_REG(hi2c->Instance->CR1, (I2C_CR1_ENGC | I2C_CR1_NOSTRETCH), (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode));
 8003880:	687b      	ldr	r3, [r7, #4]
 8003882:	681b      	ldr	r3, [r3, #0]
 8003884:	681b      	ldr	r3, [r3, #0]
 8003886:	f023 01c0 	bic.w	r1, r3, #192	; 0xc0
 800388a:	687b      	ldr	r3, [r7, #4]
 800388c:	69da      	ldr	r2, [r3, #28]
 800388e:	687b      	ldr	r3, [r7, #4]
 8003890:	6a1b      	ldr	r3, [r3, #32]
 8003892:	431a      	orrs	r2, r3
 8003894:	687b      	ldr	r3, [r7, #4]
 8003896:	681b      	ldr	r3, [r3, #0]
 8003898:	430a      	orrs	r2, r1
 800389a:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Configure I2Cx: Own Address1 and addressing mode */
  MODIFY_REG(hi2c->Instance->OAR1, (I2C_OAR1_ADDMODE | I2C_OAR1_ADD8_9 | I2C_OAR1_ADD1_7 | I2C_OAR1_ADD0), (hi2c->Init.AddressingMode | hi2c->Init.OwnAddress1));
 800389c:	687b      	ldr	r3, [r7, #4]
 800389e:	681b      	ldr	r3, [r3, #0]
 80038a0:	689b      	ldr	r3, [r3, #8]
 80038a2:	f423 4303 	bic.w	r3, r3, #33536	; 0x8300
 80038a6:	f023 03ff 	bic.w	r3, r3, #255	; 0xff
 80038aa:	687a      	ldr	r2, [r7, #4]
 80038ac:	6911      	ldr	r1, [r2, #16]
 80038ae:	687a      	ldr	r2, [r7, #4]
 80038b0:	68d2      	ldr	r2, [r2, #12]
 80038b2:	4311      	orrs	r1, r2
 80038b4:	687a      	ldr	r2, [r7, #4]
 80038b6:	6812      	ldr	r2, [r2, #0]
 80038b8:	430b      	orrs	r3, r1
 80038ba:	6093      	str	r3, [r2, #8]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Configure I2Cx: Dual mode and Own Address2 */
  MODIFY_REG(hi2c->Instance->OAR2, (I2C_OAR2_ENDUAL | I2C_OAR2_ADD2), (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2));
 80038bc:	687b      	ldr	r3, [r7, #4]
 80038be:	681b      	ldr	r3, [r3, #0]
 80038c0:	68db      	ldr	r3, [r3, #12]
 80038c2:	f023 01ff 	bic.w	r1, r3, #255	; 0xff
 80038c6:	687b      	ldr	r3, [r7, #4]
 80038c8:	695a      	ldr	r2, [r3, #20]
 80038ca:	687b      	ldr	r3, [r7, #4]
 80038cc:	699b      	ldr	r3, [r3, #24]
 80038ce:	431a      	orrs	r2, r3
 80038d0:	687b      	ldr	r3, [r7, #4]
 80038d2:	681b      	ldr	r3, [r3, #0]
 80038d4:	430a      	orrs	r2, r1
 80038d6:	60da      	str	r2, [r3, #12]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 80038d8:	687b      	ldr	r3, [r7, #4]
 80038da:	681b      	ldr	r3, [r3, #0]
 80038dc:	681a      	ldr	r2, [r3, #0]
 80038de:	687b      	ldr	r3, [r7, #4]
 80038e0:	681b      	ldr	r3, [r3, #0]
 80038e2:	f042 0201 	orr.w	r2, r2, #1
 80038e6:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 80038e8:	687b      	ldr	r3, [r7, #4]
 80038ea:	2200      	movs	r2, #0
 80038ec:	641a      	str	r2, [r3, #64]	; 0x40
  hi2c->State = HAL_I2C_STATE_READY;
 80038ee:	687b      	ldr	r3, [r7, #4]
 80038f0:	2220      	movs	r2, #32
 80038f2:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  hi2c->PreviousState = I2C_STATE_NONE;
 80038f6:	687b      	ldr	r3, [r7, #4]
 80038f8:	2200      	movs	r2, #0
 80038fa:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 80038fc:	687b      	ldr	r3, [r7, #4]
 80038fe:	2200      	movs	r2, #0
 8003900:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 8003904:	2300      	movs	r3, #0
}
 8003906:	4618      	mov	r0, r3
 8003908:	3710      	adds	r7, #16
 800390a:	46bd      	mov	sp, r7
 800390c:	bd80      	pop	{r7, pc}
 800390e:	bf00      	nop
 8003910:	000186a0 	.word	0x000186a0
 8003914:	001e847f 	.word	0x001e847f
 8003918:	003d08ff 	.word	0x003d08ff
 800391c:	431bde83 	.word	0x431bde83
 8003920:	10624dd3 	.word	0x10624dd3

08003924 <HAL_I2CEx_ConfigAnalogFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  AnalogFilter new state of the Analog filter.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigAnalogFilter(I2C_HandleTypeDef *hi2c, uint32_t AnalogFilter)
{
 8003924:	b480      	push	{r7}
 8003926:	b083      	sub	sp, #12
 8003928:	af00      	add	r7, sp, #0
 800392a:	6078      	str	r0, [r7, #4]
 800392c:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_ANALOG_FILTER(AnalogFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 800392e:	687b      	ldr	r3, [r7, #4]
 8003930:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8003934:	b2db      	uxtb	r3, r3
 8003936:	2b20      	cmp	r3, #32
 8003938:	d129      	bne.n	800398e <HAL_I2CEx_ConfigAnalogFilter+0x6a>
  {
    hi2c->State = HAL_I2C_STATE_BUSY;
 800393a:	687b      	ldr	r3, [r7, #4]
 800393c:	2224      	movs	r2, #36	; 0x24
 800393e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 8003942:	687b      	ldr	r3, [r7, #4]
 8003944:	681b      	ldr	r3, [r3, #0]
 8003946:	681a      	ldr	r2, [r3, #0]
 8003948:	687b      	ldr	r3, [r7, #4]
 800394a:	681b      	ldr	r3, [r3, #0]
 800394c:	f022 0201 	bic.w	r2, r2, #1
 8003950:	601a      	str	r2, [r3, #0]

    /* Reset I2Cx ANOFF bit */
    hi2c->Instance->FLTR &= ~(I2C_FLTR_ANOFF);
 8003952:	687b      	ldr	r3, [r7, #4]
 8003954:	681b      	ldr	r3, [r3, #0]
 8003956:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8003958:	687b      	ldr	r3, [r7, #4]
 800395a:	681b      	ldr	r3, [r3, #0]
 800395c:	f022 0210 	bic.w	r2, r2, #16
 8003960:	625a      	str	r2, [r3, #36]	; 0x24

    /* Disable the analog filter */
    hi2c->Instance->FLTR |= AnalogFilter;
 8003962:	687b      	ldr	r3, [r7, #4]
 8003964:	681b      	ldr	r3, [r3, #0]
 8003966:	6a59      	ldr	r1, [r3, #36]	; 0x24
 8003968:	687b      	ldr	r3, [r7, #4]
 800396a:	681b      	ldr	r3, [r3, #0]
 800396c:	683a      	ldr	r2, [r7, #0]
 800396e:	430a      	orrs	r2, r1
 8003970:	625a      	str	r2, [r3, #36]	; 0x24

    __HAL_I2C_ENABLE(hi2c);
 8003972:	687b      	ldr	r3, [r7, #4]
 8003974:	681b      	ldr	r3, [r3, #0]
 8003976:	681a      	ldr	r2, [r3, #0]
 8003978:	687b      	ldr	r3, [r7, #4]
 800397a:	681b      	ldr	r3, [r3, #0]
 800397c:	f042 0201 	orr.w	r2, r2, #1
 8003980:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8003982:	687b      	ldr	r3, [r7, #4]
 8003984:	2220      	movs	r2, #32
 8003986:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    return HAL_OK;
 800398a:	2300      	movs	r3, #0
 800398c:	e000      	b.n	8003990 <HAL_I2CEx_ConfigAnalogFilter+0x6c>
  }
  else
  {
    return HAL_BUSY;
 800398e:	2302      	movs	r3, #2
  }
}
 8003990:	4618      	mov	r0, r3
 8003992:	370c      	adds	r7, #12
 8003994:	46bd      	mov	sp, r7
 8003996:	f85d 7b04 	ldr.w	r7, [sp], #4
 800399a:	4770      	bx	lr

0800399c <HAL_I2CEx_ConfigDigitalFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  DigitalFilter Coefficient of digital noise filter between 0x00 and 0x0F.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigDigitalFilter(I2C_HandleTypeDef *hi2c, uint32_t DigitalFilter)
{
 800399c:	b480      	push	{r7}
 800399e:	b085      	sub	sp, #20
 80039a0:	af00      	add	r7, sp, #0
 80039a2:	6078      	str	r0, [r7, #4]
 80039a4:	6039      	str	r1, [r7, #0]
  uint16_t tmpreg = 0;
 80039a6:	2300      	movs	r3, #0
 80039a8:	81fb      	strh	r3, [r7, #14]

  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_DIGITAL_FILTER(DigitalFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 80039aa:	687b      	ldr	r3, [r7, #4]
 80039ac:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80039b0:	b2db      	uxtb	r3, r3
 80039b2:	2b20      	cmp	r3, #32
 80039b4:	d12a      	bne.n	8003a0c <HAL_I2CEx_ConfigDigitalFilter+0x70>
  {
    hi2c->State = HAL_I2C_STATE_BUSY;
 80039b6:	687b      	ldr	r3, [r7, #4]
 80039b8:	2224      	movs	r2, #36	; 0x24
 80039ba:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 80039be:	687b      	ldr	r3, [r7, #4]
 80039c0:	681b      	ldr	r3, [r3, #0]
 80039c2:	681a      	ldr	r2, [r3, #0]
 80039c4:	687b      	ldr	r3, [r7, #4]
 80039c6:	681b      	ldr	r3, [r3, #0]
 80039c8:	f022 0201 	bic.w	r2, r2, #1
 80039cc:	601a      	str	r2, [r3, #0]

    /* Get the old register value */
    tmpreg = hi2c->Instance->FLTR;
 80039ce:	687b      	ldr	r3, [r7, #4]
 80039d0:	681b      	ldr	r3, [r3, #0]
 80039d2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80039d4:	81fb      	strh	r3, [r7, #14]

    /* Reset I2Cx DNF bit [3:0] */
    tmpreg &= ~(I2C_FLTR_DNF);
 80039d6:	89fb      	ldrh	r3, [r7, #14]
 80039d8:	f023 030f 	bic.w	r3, r3, #15
 80039dc:	81fb      	strh	r3, [r7, #14]

    /* Set I2Cx DNF coefficient */
    tmpreg |= DigitalFilter;
 80039de:	683b      	ldr	r3, [r7, #0]
 80039e0:	b29a      	uxth	r2, r3
 80039e2:	89fb      	ldrh	r3, [r7, #14]
 80039e4:	4313      	orrs	r3, r2
 80039e6:	81fb      	strh	r3, [r7, #14]

    /* Store the new register value */
    hi2c->Instance->FLTR = tmpreg;
 80039e8:	687b      	ldr	r3, [r7, #4]
 80039ea:	681b      	ldr	r3, [r3, #0]
 80039ec:	89fa      	ldrh	r2, [r7, #14]
 80039ee:	625a      	str	r2, [r3, #36]	; 0x24

    __HAL_I2C_ENABLE(hi2c);
 80039f0:	687b      	ldr	r3, [r7, #4]
 80039f2:	681b      	ldr	r3, [r3, #0]
 80039f4:	681a      	ldr	r2, [r3, #0]
 80039f6:	687b      	ldr	r3, [r7, #4]
 80039f8:	681b      	ldr	r3, [r3, #0]
 80039fa:	f042 0201 	orr.w	r2, r2, #1
 80039fe:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8003a00:	687b      	ldr	r3, [r7, #4]
 8003a02:	2220      	movs	r2, #32
 8003a04:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    return HAL_OK;
 8003a08:	2300      	movs	r3, #0
 8003a0a:	e000      	b.n	8003a0e <HAL_I2CEx_ConfigDigitalFilter+0x72>
  }
  else
  {
    return HAL_BUSY;
 8003a0c:	2302      	movs	r3, #2
  }
}
 8003a0e:	4618      	mov	r0, r3
 8003a10:	3714      	adds	r7, #20
 8003a12:	46bd      	mov	sp, r7
 8003a14:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003a18:	4770      	bx	lr
	...

08003a1c <HAL_LTDC_Init>:
  * @param  hltdc  pointer to a LTDC_HandleTypeDef structure that contains
  *                the configuration information for the LTDC.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_LTDC_Init(LTDC_HandleTypeDef *hltdc)
{
 8003a1c:	b580      	push	{r7, lr}
 8003a1e:	b084      	sub	sp, #16
 8003a20:	af00      	add	r7, sp, #0
 8003a22:	6078      	str	r0, [r7, #4]
  uint32_t tmp;
  uint32_t tmp1;

  /* Check the LTDC peripheral state */
  if (hltdc == NULL)
 8003a24:	687b      	ldr	r3, [r7, #4]
 8003a26:	2b00      	cmp	r3, #0
 8003a28:	d101      	bne.n	8003a2e <HAL_LTDC_Init+0x12>
  {
    return HAL_ERROR;
 8003a2a:	2301      	movs	r3, #1
 8003a2c:	e0bf      	b.n	8003bae <HAL_LTDC_Init+0x192>
    }
    /* Init the low level hardware */
    hltdc->MspInitCallback(hltdc);
  }
#else
  if (hltdc->State == HAL_LTDC_STATE_RESET)
 8003a2e:	687b      	ldr	r3, [r7, #4]
 8003a30:	f893 30a1 	ldrb.w	r3, [r3, #161]	; 0xa1
 8003a34:	b2db      	uxtb	r3, r3
 8003a36:	2b00      	cmp	r3, #0
 8003a38:	d106      	bne.n	8003a48 <HAL_LTDC_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hltdc->Lock = HAL_UNLOCKED;
 8003a3a:	687b      	ldr	r3, [r7, #4]
 8003a3c:	2200      	movs	r2, #0
 8003a3e:	f883 20a0 	strb.w	r2, [r3, #160]	; 0xa0
    /* Init the low level hardware */
    HAL_LTDC_MspInit(hltdc);
 8003a42:	6878      	ldr	r0, [r7, #4]
 8003a44:	f7fd fa6e 	bl	8000f24 <HAL_LTDC_MspInit>
  }
#endif /* USE_HAL_LTDC_REGISTER_CALLBACKS */

  /* Change LTDC peripheral state */
  hltdc->State = HAL_LTDC_STATE_BUSY;
 8003a48:	687b      	ldr	r3, [r7, #4]
 8003a4a:	2202      	movs	r2, #2
 8003a4c:	f883 20a1 	strb.w	r2, [r3, #161]	; 0xa1

  /* Configure the HS, VS, DE and PC polarity */
  hltdc->Instance->GCR &= ~(LTDC_GCR_HSPOL | LTDC_GCR_VSPOL | LTDC_GCR_DEPOL | LTDC_GCR_PCPOL);
 8003a50:	687b      	ldr	r3, [r7, #4]
 8003a52:	681b      	ldr	r3, [r3, #0]
 8003a54:	699a      	ldr	r2, [r3, #24]
 8003a56:	687b      	ldr	r3, [r7, #4]
 8003a58:	681b      	ldr	r3, [r3, #0]
 8003a5a:	f022 4270 	bic.w	r2, r2, #4026531840	; 0xf0000000
 8003a5e:	619a      	str	r2, [r3, #24]
  hltdc->Instance->GCR |= (uint32_t)(hltdc->Init.HSPolarity | hltdc->Init.VSPolarity | \
 8003a60:	687b      	ldr	r3, [r7, #4]
 8003a62:	681b      	ldr	r3, [r3, #0]
 8003a64:	6999      	ldr	r1, [r3, #24]
 8003a66:	687b      	ldr	r3, [r7, #4]
 8003a68:	685a      	ldr	r2, [r3, #4]
 8003a6a:	687b      	ldr	r3, [r7, #4]
 8003a6c:	689b      	ldr	r3, [r3, #8]
 8003a6e:	431a      	orrs	r2, r3
                                     hltdc->Init.DEPolarity | hltdc->Init.PCPolarity);
 8003a70:	687b      	ldr	r3, [r7, #4]
 8003a72:	68db      	ldr	r3, [r3, #12]
  hltdc->Instance->GCR |= (uint32_t)(hltdc->Init.HSPolarity | hltdc->Init.VSPolarity | \
 8003a74:	431a      	orrs	r2, r3
                                     hltdc->Init.DEPolarity | hltdc->Init.PCPolarity);
 8003a76:	687b      	ldr	r3, [r7, #4]
 8003a78:	691b      	ldr	r3, [r3, #16]
 8003a7a:	431a      	orrs	r2, r3
  hltdc->Instance->GCR |= (uint32_t)(hltdc->Init.HSPolarity | hltdc->Init.VSPolarity | \
 8003a7c:	687b      	ldr	r3, [r7, #4]
 8003a7e:	681b      	ldr	r3, [r3, #0]
 8003a80:	430a      	orrs	r2, r1
 8003a82:	619a      	str	r2, [r3, #24]

  /* Set Synchronization size */
  hltdc->Instance->SSCR &= ~(LTDC_SSCR_VSH | LTDC_SSCR_HSW);
 8003a84:	687b      	ldr	r3, [r7, #4]
 8003a86:	681b      	ldr	r3, [r3, #0]
 8003a88:	6899      	ldr	r1, [r3, #8]
 8003a8a:	687b      	ldr	r3, [r7, #4]
 8003a8c:	681a      	ldr	r2, [r3, #0]
 8003a8e:	4b4a      	ldr	r3, [pc, #296]	; (8003bb8 <HAL_LTDC_Init+0x19c>)
 8003a90:	400b      	ands	r3, r1
 8003a92:	6093      	str	r3, [r2, #8]
  tmp = (hltdc->Init.HorizontalSync << 16U);
 8003a94:	687b      	ldr	r3, [r7, #4]
 8003a96:	695b      	ldr	r3, [r3, #20]
 8003a98:	041b      	lsls	r3, r3, #16
 8003a9a:	60fb      	str	r3, [r7, #12]
  hltdc->Instance->SSCR |= (tmp | hltdc->Init.VerticalSync);
 8003a9c:	687b      	ldr	r3, [r7, #4]
 8003a9e:	681b      	ldr	r3, [r3, #0]
 8003aa0:	6899      	ldr	r1, [r3, #8]
 8003aa2:	687b      	ldr	r3, [r7, #4]
 8003aa4:	699a      	ldr	r2, [r3, #24]
 8003aa6:	68fb      	ldr	r3, [r7, #12]
 8003aa8:	431a      	orrs	r2, r3
 8003aaa:	687b      	ldr	r3, [r7, #4]
 8003aac:	681b      	ldr	r3, [r3, #0]
 8003aae:	430a      	orrs	r2, r1
 8003ab0:	609a      	str	r2, [r3, #8]

  /* Set Accumulated Back porch */
  hltdc->Instance->BPCR &= ~(LTDC_BPCR_AVBP | LTDC_BPCR_AHBP);
 8003ab2:	687b      	ldr	r3, [r7, #4]
 8003ab4:	681b      	ldr	r3, [r3, #0]
 8003ab6:	68d9      	ldr	r1, [r3, #12]
 8003ab8:	687b      	ldr	r3, [r7, #4]
 8003aba:	681a      	ldr	r2, [r3, #0]
 8003abc:	4b3e      	ldr	r3, [pc, #248]	; (8003bb8 <HAL_LTDC_Init+0x19c>)
 8003abe:	400b      	ands	r3, r1
 8003ac0:	60d3      	str	r3, [r2, #12]
  tmp = (hltdc->Init.AccumulatedHBP << 16U);
 8003ac2:	687b      	ldr	r3, [r7, #4]
 8003ac4:	69db      	ldr	r3, [r3, #28]
 8003ac6:	041b      	lsls	r3, r3, #16
 8003ac8:	60fb      	str	r3, [r7, #12]
  hltdc->Instance->BPCR |= (tmp | hltdc->Init.AccumulatedVBP);
 8003aca:	687b      	ldr	r3, [r7, #4]
 8003acc:	681b      	ldr	r3, [r3, #0]
 8003ace:	68d9      	ldr	r1, [r3, #12]
 8003ad0:	687b      	ldr	r3, [r7, #4]
 8003ad2:	6a1a      	ldr	r2, [r3, #32]
 8003ad4:	68fb      	ldr	r3, [r7, #12]
 8003ad6:	431a      	orrs	r2, r3
 8003ad8:	687b      	ldr	r3, [r7, #4]
 8003ada:	681b      	ldr	r3, [r3, #0]
 8003adc:	430a      	orrs	r2, r1
 8003ade:	60da      	str	r2, [r3, #12]

  /* Set Accumulated Active Width */
  hltdc->Instance->AWCR &= ~(LTDC_AWCR_AAH | LTDC_AWCR_AAW);
 8003ae0:	687b      	ldr	r3, [r7, #4]
 8003ae2:	681b      	ldr	r3, [r3, #0]
 8003ae4:	6919      	ldr	r1, [r3, #16]
 8003ae6:	687b      	ldr	r3, [r7, #4]
 8003ae8:	681a      	ldr	r2, [r3, #0]
 8003aea:	4b33      	ldr	r3, [pc, #204]	; (8003bb8 <HAL_LTDC_Init+0x19c>)
 8003aec:	400b      	ands	r3, r1
 8003aee:	6113      	str	r3, [r2, #16]
  tmp = (hltdc->Init.AccumulatedActiveW << 16U);
 8003af0:	687b      	ldr	r3, [r7, #4]
 8003af2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003af4:	041b      	lsls	r3, r3, #16
 8003af6:	60fb      	str	r3, [r7, #12]
  hltdc->Instance->AWCR |= (tmp | hltdc->Init.AccumulatedActiveH);
 8003af8:	687b      	ldr	r3, [r7, #4]
 8003afa:	681b      	ldr	r3, [r3, #0]
 8003afc:	6919      	ldr	r1, [r3, #16]
 8003afe:	687b      	ldr	r3, [r7, #4]
 8003b00:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8003b02:	68fb      	ldr	r3, [r7, #12]
 8003b04:	431a      	orrs	r2, r3
 8003b06:	687b      	ldr	r3, [r7, #4]
 8003b08:	681b      	ldr	r3, [r3, #0]
 8003b0a:	430a      	orrs	r2, r1
 8003b0c:	611a      	str	r2, [r3, #16]

  /* Set Total Width */
  hltdc->Instance->TWCR &= ~(LTDC_TWCR_TOTALH | LTDC_TWCR_TOTALW);
 8003b0e:	687b      	ldr	r3, [r7, #4]
 8003b10:	681b      	ldr	r3, [r3, #0]
 8003b12:	6959      	ldr	r1, [r3, #20]
 8003b14:	687b      	ldr	r3, [r7, #4]
 8003b16:	681a      	ldr	r2, [r3, #0]
 8003b18:	4b27      	ldr	r3, [pc, #156]	; (8003bb8 <HAL_LTDC_Init+0x19c>)
 8003b1a:	400b      	ands	r3, r1
 8003b1c:	6153      	str	r3, [r2, #20]
  tmp = (hltdc->Init.TotalWidth << 16U);
 8003b1e:	687b      	ldr	r3, [r7, #4]
 8003b20:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003b22:	041b      	lsls	r3, r3, #16
 8003b24:	60fb      	str	r3, [r7, #12]
  hltdc->Instance->TWCR |= (tmp | hltdc->Init.TotalHeigh);
 8003b26:	687b      	ldr	r3, [r7, #4]
 8003b28:	681b      	ldr	r3, [r3, #0]
 8003b2a:	6959      	ldr	r1, [r3, #20]
 8003b2c:	687b      	ldr	r3, [r7, #4]
 8003b2e:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8003b30:	68fb      	ldr	r3, [r7, #12]
 8003b32:	431a      	orrs	r2, r3
 8003b34:	687b      	ldr	r3, [r7, #4]
 8003b36:	681b      	ldr	r3, [r3, #0]
 8003b38:	430a      	orrs	r2, r1
 8003b3a:	615a      	str	r2, [r3, #20]

  /* Set the background color value */
  tmp = ((uint32_t)(hltdc->Init.Backcolor.Green) << 8U);
 8003b3c:	687b      	ldr	r3, [r7, #4]
 8003b3e:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8003b42:	021b      	lsls	r3, r3, #8
 8003b44:	60fb      	str	r3, [r7, #12]
  tmp1 = ((uint32_t)(hltdc->Init.Backcolor.Red) << 16U);
 8003b46:	687b      	ldr	r3, [r7, #4]
 8003b48:	f893 3036 	ldrb.w	r3, [r3, #54]	; 0x36
 8003b4c:	041b      	lsls	r3, r3, #16
 8003b4e:	60bb      	str	r3, [r7, #8]
  hltdc->Instance->BCCR &= ~(LTDC_BCCR_BCBLUE | LTDC_BCCR_BCGREEN | LTDC_BCCR_BCRED);
 8003b50:	687b      	ldr	r3, [r7, #4]
 8003b52:	681b      	ldr	r3, [r3, #0]
 8003b54:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8003b56:	687b      	ldr	r3, [r7, #4]
 8003b58:	681b      	ldr	r3, [r3, #0]
 8003b5a:	f002 427f 	and.w	r2, r2, #4278190080	; 0xff000000
 8003b5e:	62da      	str	r2, [r3, #44]	; 0x2c
  hltdc->Instance->BCCR |= (tmp1 | tmp | hltdc->Init.Backcolor.Blue);
 8003b60:	687b      	ldr	r3, [r7, #4]
 8003b62:	681b      	ldr	r3, [r3, #0]
 8003b64:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 8003b66:	68ba      	ldr	r2, [r7, #8]
 8003b68:	68fb      	ldr	r3, [r7, #12]
 8003b6a:	4313      	orrs	r3, r2
 8003b6c:	687a      	ldr	r2, [r7, #4]
 8003b6e:	f892 2034 	ldrb.w	r2, [r2, #52]	; 0x34
 8003b72:	431a      	orrs	r2, r3
 8003b74:	687b      	ldr	r3, [r7, #4]
 8003b76:	681b      	ldr	r3, [r3, #0]
 8003b78:	430a      	orrs	r2, r1
 8003b7a:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Enable the Transfer Error and FIFO underrun interrupts */
  __HAL_LTDC_ENABLE_IT(hltdc, LTDC_IT_TE | LTDC_IT_FU);
 8003b7c:	687b      	ldr	r3, [r7, #4]
 8003b7e:	681b      	ldr	r3, [r3, #0]
 8003b80:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8003b82:	687b      	ldr	r3, [r7, #4]
 8003b84:	681b      	ldr	r3, [r3, #0]
 8003b86:	f042 0206 	orr.w	r2, r2, #6
 8003b8a:	635a      	str	r2, [r3, #52]	; 0x34

  /* Enable LTDC by setting LTDCEN bit */
  __HAL_LTDC_ENABLE(hltdc);
 8003b8c:	687b      	ldr	r3, [r7, #4]
 8003b8e:	681b      	ldr	r3, [r3, #0]
 8003b90:	699a      	ldr	r2, [r3, #24]
 8003b92:	687b      	ldr	r3, [r7, #4]
 8003b94:	681b      	ldr	r3, [r3, #0]
 8003b96:	f042 0201 	orr.w	r2, r2, #1
 8003b9a:	619a      	str	r2, [r3, #24]

  /* Initialize the error code */
  hltdc->ErrorCode = HAL_LTDC_ERROR_NONE;
 8003b9c:	687b      	ldr	r3, [r7, #4]
 8003b9e:	2200      	movs	r2, #0
 8003ba0:	f8c3 20a4 	str.w	r2, [r3, #164]	; 0xa4

  /* Initialize the LTDC state*/
  hltdc->State = HAL_LTDC_STATE_READY;
 8003ba4:	687b      	ldr	r3, [r7, #4]
 8003ba6:	2201      	movs	r2, #1
 8003ba8:	f883 20a1 	strb.w	r2, [r3, #161]	; 0xa1

  return HAL_OK;
 8003bac:	2300      	movs	r3, #0
}
 8003bae:	4618      	mov	r0, r3
 8003bb0:	3710      	adds	r7, #16
 8003bb2:	46bd      	mov	sp, r7
 8003bb4:	bd80      	pop	{r7, pc}
 8003bb6:	bf00      	nop
 8003bb8:	f000f800 	.word	0xf000f800

08003bbc <HAL_LTDC_IRQHandler>:
  * @param  hltdc  pointer to a LTDC_HandleTypeDef structure that contains
  *                the configuration information for the LTDC.
  * @retval HAL status
  */
void HAL_LTDC_IRQHandler(LTDC_HandleTypeDef *hltdc)
{
 8003bbc:	b580      	push	{r7, lr}
 8003bbe:	b084      	sub	sp, #16
 8003bc0:	af00      	add	r7, sp, #0
 8003bc2:	6078      	str	r0, [r7, #4]
  uint32_t isrflags  = READ_REG(hltdc->Instance->ISR);
 8003bc4:	687b      	ldr	r3, [r7, #4]
 8003bc6:	681b      	ldr	r3, [r3, #0]
 8003bc8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003bca:	60fb      	str	r3, [r7, #12]
  uint32_t itsources = READ_REG(hltdc->Instance->IER);
 8003bcc:	687b      	ldr	r3, [r7, #4]
 8003bce:	681b      	ldr	r3, [r3, #0]
 8003bd0:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8003bd2:	60bb      	str	r3, [r7, #8]

  /* Transfer Error Interrupt management ***************************************/
  if (((isrflags & LTDC_ISR_TERRIF) != 0U) && ((itsources & LTDC_IER_TERRIE) != 0U))
 8003bd4:	68fb      	ldr	r3, [r7, #12]
 8003bd6:	f003 0304 	and.w	r3, r3, #4
 8003bda:	2b00      	cmp	r3, #0
 8003bdc:	d023      	beq.n	8003c26 <HAL_LTDC_IRQHandler+0x6a>
 8003bde:	68bb      	ldr	r3, [r7, #8]
 8003be0:	f003 0304 	and.w	r3, r3, #4
 8003be4:	2b00      	cmp	r3, #0
 8003be6:	d01e      	beq.n	8003c26 <HAL_LTDC_IRQHandler+0x6a>
  {
    /* Disable the transfer Error interrupt */
    __HAL_LTDC_DISABLE_IT(hltdc, LTDC_IT_TE);
 8003be8:	687b      	ldr	r3, [r7, #4]
 8003bea:	681b      	ldr	r3, [r3, #0]
 8003bec:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8003bee:	687b      	ldr	r3, [r7, #4]
 8003bf0:	681b      	ldr	r3, [r3, #0]
 8003bf2:	f022 0204 	bic.w	r2, r2, #4
 8003bf6:	635a      	str	r2, [r3, #52]	; 0x34

    /* Clear the transfer error flag */
    __HAL_LTDC_CLEAR_FLAG(hltdc, LTDC_FLAG_TE);
 8003bf8:	687b      	ldr	r3, [r7, #4]
 8003bfa:	681b      	ldr	r3, [r3, #0]
 8003bfc:	2204      	movs	r2, #4
 8003bfe:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Update error code */
    hltdc->ErrorCode |= HAL_LTDC_ERROR_TE;
 8003c00:	687b      	ldr	r3, [r7, #4]
 8003c02:	f8d3 30a4 	ldr.w	r3, [r3, #164]	; 0xa4
 8003c06:	f043 0201 	orr.w	r2, r3, #1
 8003c0a:	687b      	ldr	r3, [r7, #4]
 8003c0c:	f8c3 20a4 	str.w	r2, [r3, #164]	; 0xa4

    /* Change LTDC state */
    hltdc->State = HAL_LTDC_STATE_ERROR;
 8003c10:	687b      	ldr	r3, [r7, #4]
 8003c12:	2204      	movs	r2, #4
 8003c14:	f883 20a1 	strb.w	r2, [r3, #161]	; 0xa1

    /* Process unlocked */
    __HAL_UNLOCK(hltdc);
 8003c18:	687b      	ldr	r3, [r7, #4]
 8003c1a:	2200      	movs	r2, #0
 8003c1c:	f883 20a0 	strb.w	r2, [r3, #160]	; 0xa0
#if (USE_HAL_LTDC_REGISTER_CALLBACKS == 1)
    /*Call registered error callback*/
    hltdc->ErrorCallback(hltdc);
#else
    /* Call legacy error callback*/
    HAL_LTDC_ErrorCallback(hltdc);
 8003c20:	6878      	ldr	r0, [r7, #4]
 8003c22:	f000 f86f 	bl	8003d04 <HAL_LTDC_ErrorCallback>
#endif /* USE_HAL_LTDC_REGISTER_CALLBACKS */
  }

  /* FIFO underrun Interrupt management ***************************************/
  if (((isrflags & LTDC_ISR_FUIF) != 0U) && ((itsources & LTDC_IER_FUIE) != 0U))
 8003c26:	68fb      	ldr	r3, [r7, #12]
 8003c28:	f003 0302 	and.w	r3, r3, #2
 8003c2c:	2b00      	cmp	r3, #0
 8003c2e:	d023      	beq.n	8003c78 <HAL_LTDC_IRQHandler+0xbc>
 8003c30:	68bb      	ldr	r3, [r7, #8]
 8003c32:	f003 0302 	and.w	r3, r3, #2
 8003c36:	2b00      	cmp	r3, #0
 8003c38:	d01e      	beq.n	8003c78 <HAL_LTDC_IRQHandler+0xbc>
  {
    /* Disable the FIFO underrun interrupt */
    __HAL_LTDC_DISABLE_IT(hltdc, LTDC_IT_FU);
 8003c3a:	687b      	ldr	r3, [r7, #4]
 8003c3c:	681b      	ldr	r3, [r3, #0]
 8003c3e:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8003c40:	687b      	ldr	r3, [r7, #4]
 8003c42:	681b      	ldr	r3, [r3, #0]
 8003c44:	f022 0202 	bic.w	r2, r2, #2
 8003c48:	635a      	str	r2, [r3, #52]	; 0x34

    /* Clear the FIFO underrun flag */
    __HAL_LTDC_CLEAR_FLAG(hltdc, LTDC_FLAG_FU);
 8003c4a:	687b      	ldr	r3, [r7, #4]
 8003c4c:	681b      	ldr	r3, [r3, #0]
 8003c4e:	2202      	movs	r2, #2
 8003c50:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Update error code */
    hltdc->ErrorCode |= HAL_LTDC_ERROR_FU;
 8003c52:	687b      	ldr	r3, [r7, #4]
 8003c54:	f8d3 30a4 	ldr.w	r3, [r3, #164]	; 0xa4
 8003c58:	f043 0202 	orr.w	r2, r3, #2
 8003c5c:	687b      	ldr	r3, [r7, #4]
 8003c5e:	f8c3 20a4 	str.w	r2, [r3, #164]	; 0xa4

    /* Change LTDC state */
    hltdc->State = HAL_LTDC_STATE_ERROR;
 8003c62:	687b      	ldr	r3, [r7, #4]
 8003c64:	2204      	movs	r2, #4
 8003c66:	f883 20a1 	strb.w	r2, [r3, #161]	; 0xa1

    /* Process unlocked */
    __HAL_UNLOCK(hltdc);
 8003c6a:	687b      	ldr	r3, [r7, #4]
 8003c6c:	2200      	movs	r2, #0
 8003c6e:	f883 20a0 	strb.w	r2, [r3, #160]	; 0xa0
#if (USE_HAL_LTDC_REGISTER_CALLBACKS == 1)
    /*Call registered error callback*/
    hltdc->ErrorCallback(hltdc);
#else
    /* Call legacy error callback*/
    HAL_LTDC_ErrorCallback(hltdc);
 8003c72:	6878      	ldr	r0, [r7, #4]
 8003c74:	f000 f846 	bl	8003d04 <HAL_LTDC_ErrorCallback>
#endif /* USE_HAL_LTDC_REGISTER_CALLBACKS */
  }

  /* Line Interrupt management ************************************************/
  if (((isrflags & LTDC_ISR_LIF) != 0U) && ((itsources & LTDC_IER_LIE) != 0U))
 8003c78:	68fb      	ldr	r3, [r7, #12]
 8003c7a:	f003 0301 	and.w	r3, r3, #1
 8003c7e:	2b00      	cmp	r3, #0
 8003c80:	d01b      	beq.n	8003cba <HAL_LTDC_IRQHandler+0xfe>
 8003c82:	68bb      	ldr	r3, [r7, #8]
 8003c84:	f003 0301 	and.w	r3, r3, #1
 8003c88:	2b00      	cmp	r3, #0
 8003c8a:	d016      	beq.n	8003cba <HAL_LTDC_IRQHandler+0xfe>
  {
    /* Disable the Line interrupt */
    __HAL_LTDC_DISABLE_IT(hltdc, LTDC_IT_LI);
 8003c8c:	687b      	ldr	r3, [r7, #4]
 8003c8e:	681b      	ldr	r3, [r3, #0]
 8003c90:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8003c92:	687b      	ldr	r3, [r7, #4]
 8003c94:	681b      	ldr	r3, [r3, #0]
 8003c96:	f022 0201 	bic.w	r2, r2, #1
 8003c9a:	635a      	str	r2, [r3, #52]	; 0x34

    /* Clear the Line interrupt flag */
    __HAL_LTDC_CLEAR_FLAG(hltdc, LTDC_FLAG_LI);
 8003c9c:	687b      	ldr	r3, [r7, #4]
 8003c9e:	681b      	ldr	r3, [r3, #0]
 8003ca0:	2201      	movs	r2, #1
 8003ca2:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Change LTDC state */
    hltdc->State = HAL_LTDC_STATE_READY;
 8003ca4:	687b      	ldr	r3, [r7, #4]
 8003ca6:	2201      	movs	r2, #1
 8003ca8:	f883 20a1 	strb.w	r2, [r3, #161]	; 0xa1

    /* Process unlocked */
    __HAL_UNLOCK(hltdc);
 8003cac:	687b      	ldr	r3, [r7, #4]
 8003cae:	2200      	movs	r2, #0
 8003cb0:	f883 20a0 	strb.w	r2, [r3, #160]	; 0xa0
#if (USE_HAL_LTDC_REGISTER_CALLBACKS == 1)
    /*Call registered Line Event callback */
    hltdc->LineEventCallback(hltdc);
#else
    /*Call Legacy Line Event callback */
    HAL_LTDC_LineEventCallback(hltdc);
 8003cb4:	6878      	ldr	r0, [r7, #4]
 8003cb6:	f000 f82f 	bl	8003d18 <HAL_LTDC_LineEventCallback>
#endif /* USE_HAL_LTDC_REGISTER_CALLBACKS */
  }

  /* Register reload Interrupt management ***************************************/
  if (((isrflags & LTDC_ISR_RRIF) != 0U) && ((itsources & LTDC_IER_RRIE) != 0U))
 8003cba:	68fb      	ldr	r3, [r7, #12]
 8003cbc:	f003 0308 	and.w	r3, r3, #8
 8003cc0:	2b00      	cmp	r3, #0
 8003cc2:	d01b      	beq.n	8003cfc <HAL_LTDC_IRQHandler+0x140>
 8003cc4:	68bb      	ldr	r3, [r7, #8]
 8003cc6:	f003 0308 	and.w	r3, r3, #8
 8003cca:	2b00      	cmp	r3, #0
 8003ccc:	d016      	beq.n	8003cfc <HAL_LTDC_IRQHandler+0x140>
  {
    /* Disable the register reload interrupt */
    __HAL_LTDC_DISABLE_IT(hltdc, LTDC_IT_RR);
 8003cce:	687b      	ldr	r3, [r7, #4]
 8003cd0:	681b      	ldr	r3, [r3, #0]
 8003cd2:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8003cd4:	687b      	ldr	r3, [r7, #4]
 8003cd6:	681b      	ldr	r3, [r3, #0]
 8003cd8:	f022 0208 	bic.w	r2, r2, #8
 8003cdc:	635a      	str	r2, [r3, #52]	; 0x34

    /* Clear the register reload flag */
    __HAL_LTDC_CLEAR_FLAG(hltdc, LTDC_FLAG_RR);
 8003cde:	687b      	ldr	r3, [r7, #4]
 8003ce0:	681b      	ldr	r3, [r3, #0]
 8003ce2:	2208      	movs	r2, #8
 8003ce4:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Change LTDC state */
    hltdc->State = HAL_LTDC_STATE_READY;
 8003ce6:	687b      	ldr	r3, [r7, #4]
 8003ce8:	2201      	movs	r2, #1
 8003cea:	f883 20a1 	strb.w	r2, [r3, #161]	; 0xa1

    /* Process unlocked */
    __HAL_UNLOCK(hltdc);
 8003cee:	687b      	ldr	r3, [r7, #4]
 8003cf0:	2200      	movs	r2, #0
 8003cf2:	f883 20a0 	strb.w	r2, [r3, #160]	; 0xa0
#if (USE_HAL_LTDC_REGISTER_CALLBACKS == 1)
    /*Call registered reload Event callback */
    hltdc->ReloadEventCallback(hltdc);
#else
    /*Call Legacy Reload Event callback */
    HAL_LTDC_ReloadEventCallback(hltdc);
 8003cf6:	6878      	ldr	r0, [r7, #4]
 8003cf8:	f000 f818 	bl	8003d2c <HAL_LTDC_ReloadEventCallback>
#endif /* USE_HAL_LTDC_REGISTER_CALLBACKS */
  }
}
 8003cfc:	bf00      	nop
 8003cfe:	3710      	adds	r7, #16
 8003d00:	46bd      	mov	sp, r7
 8003d02:	bd80      	pop	{r7, pc}

08003d04 <HAL_LTDC_ErrorCallback>:
  * @param  hltdc  pointer to a LTDC_HandleTypeDef structure that contains
  *                the configuration information for the LTDC.
  * @retval None
  */
__weak void HAL_LTDC_ErrorCallback(LTDC_HandleTypeDef *hltdc)
{
 8003d04:	b480      	push	{r7}
 8003d06:	b083      	sub	sp, #12
 8003d08:	af00      	add	r7, sp, #0
 8003d0a:	6078      	str	r0, [r7, #4]
  UNUSED(hltdc);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_LTDC_ErrorCallback could be implemented in the user file
   */
}
 8003d0c:	bf00      	nop
 8003d0e:	370c      	adds	r7, #12
 8003d10:	46bd      	mov	sp, r7
 8003d12:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003d16:	4770      	bx	lr

08003d18 <HAL_LTDC_LineEventCallback>:
  * @param  hltdc  pointer to a LTDC_HandleTypeDef structure that contains
  *                the configuration information for the LTDC.
  * @retval None
  */
__weak void HAL_LTDC_LineEventCallback(LTDC_HandleTypeDef *hltdc)
{
 8003d18:	b480      	push	{r7}
 8003d1a:	b083      	sub	sp, #12
 8003d1c:	af00      	add	r7, sp, #0
 8003d1e:	6078      	str	r0, [r7, #4]
  UNUSED(hltdc);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_LTDC_LineEventCallback could be implemented in the user file
   */
}
 8003d20:	bf00      	nop
 8003d22:	370c      	adds	r7, #12
 8003d24:	46bd      	mov	sp, r7
 8003d26:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003d2a:	4770      	bx	lr

08003d2c <HAL_LTDC_ReloadEventCallback>:
  * @param  hltdc  pointer to a LTDC_HandleTypeDef structure that contains
  *                the configuration information for the LTDC.
  * @retval None
  */
__weak void HAL_LTDC_ReloadEventCallback(LTDC_HandleTypeDef *hltdc)
{
 8003d2c:	b480      	push	{r7}
 8003d2e:	b083      	sub	sp, #12
 8003d30:	af00      	add	r7, sp, #0
 8003d32:	6078      	str	r0, [r7, #4]
  UNUSED(hltdc);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_LTDC_ReloadEvenCallback could be implemented in the user file
   */
}
 8003d34:	bf00      	nop
 8003d36:	370c      	adds	r7, #12
 8003d38:	46bd      	mov	sp, r7
 8003d3a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003d3e:	4770      	bx	lr

08003d40 <HAL_LTDC_ConfigLayer>:
  *                    This parameter can be one of the following values:
  *                    LTDC_LAYER_1 (0) or LTDC_LAYER_2 (1)
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_LTDC_ConfigLayer(LTDC_HandleTypeDef *hltdc, LTDC_LayerCfgTypeDef *pLayerCfg, uint32_t LayerIdx)
{
 8003d40:	b5b0      	push	{r4, r5, r7, lr}
 8003d42:	b084      	sub	sp, #16
 8003d44:	af00      	add	r7, sp, #0
 8003d46:	60f8      	str	r0, [r7, #12]
 8003d48:	60b9      	str	r1, [r7, #8]
 8003d4a:	607a      	str	r2, [r7, #4]
  assert_param(IS_LTDC_BLENDING_FACTOR2(pLayerCfg->BlendingFactor2));
  assert_param(IS_LTDC_CFBLL(pLayerCfg->ImageWidth));
  assert_param(IS_LTDC_CFBLNBR(pLayerCfg->ImageHeight));

  /* Process locked */
  __HAL_LOCK(hltdc);
 8003d4c:	68fb      	ldr	r3, [r7, #12]
 8003d4e:	f893 30a0 	ldrb.w	r3, [r3, #160]	; 0xa0
 8003d52:	2b01      	cmp	r3, #1
 8003d54:	d101      	bne.n	8003d5a <HAL_LTDC_ConfigLayer+0x1a>
 8003d56:	2302      	movs	r3, #2
 8003d58:	e02c      	b.n	8003db4 <HAL_LTDC_ConfigLayer+0x74>
 8003d5a:	68fb      	ldr	r3, [r7, #12]
 8003d5c:	2201      	movs	r2, #1
 8003d5e:	f883 20a0 	strb.w	r2, [r3, #160]	; 0xa0

  /* Change LTDC peripheral state */
  hltdc->State = HAL_LTDC_STATE_BUSY;
 8003d62:	68fb      	ldr	r3, [r7, #12]
 8003d64:	2202      	movs	r2, #2
 8003d66:	f883 20a1 	strb.w	r2, [r3, #161]	; 0xa1

  /* Copy new layer configuration into handle structure */
  hltdc->LayerCfg[LayerIdx] = *pLayerCfg;
 8003d6a:	68fa      	ldr	r2, [r7, #12]
 8003d6c:	687b      	ldr	r3, [r7, #4]
 8003d6e:	2134      	movs	r1, #52	; 0x34
 8003d70:	fb01 f303 	mul.w	r3, r1, r3
 8003d74:	4413      	add	r3, r2
 8003d76:	f103 0238 	add.w	r2, r3, #56	; 0x38
 8003d7a:	68bb      	ldr	r3, [r7, #8]
 8003d7c:	4614      	mov	r4, r2
 8003d7e:	461d      	mov	r5, r3
 8003d80:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8003d82:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8003d84:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8003d86:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8003d88:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8003d8a:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8003d8c:	682b      	ldr	r3, [r5, #0]
 8003d8e:	6023      	str	r3, [r4, #0]

  /* Configure the LTDC Layer */
  LTDC_SetConfig(hltdc, pLayerCfg, LayerIdx);
 8003d90:	687a      	ldr	r2, [r7, #4]
 8003d92:	68b9      	ldr	r1, [r7, #8]
 8003d94:	68f8      	ldr	r0, [r7, #12]
 8003d96:	f000 f811 	bl	8003dbc <LTDC_SetConfig>

  /* Set the Immediate Reload type */
  hltdc->Instance->SRCR = LTDC_SRCR_IMR;
 8003d9a:	68fb      	ldr	r3, [r7, #12]
 8003d9c:	681b      	ldr	r3, [r3, #0]
 8003d9e:	2201      	movs	r2, #1
 8003da0:	625a      	str	r2, [r3, #36]	; 0x24

  /* Initialize the LTDC state*/
  hltdc->State  = HAL_LTDC_STATE_READY;
 8003da2:	68fb      	ldr	r3, [r7, #12]
 8003da4:	2201      	movs	r2, #1
 8003da6:	f883 20a1 	strb.w	r2, [r3, #161]	; 0xa1

  /* Process unlocked */
  __HAL_UNLOCK(hltdc);
 8003daa:	68fb      	ldr	r3, [r7, #12]
 8003dac:	2200      	movs	r2, #0
 8003dae:	f883 20a0 	strb.w	r2, [r3, #160]	; 0xa0

  return HAL_OK;
 8003db2:	2300      	movs	r3, #0
}
 8003db4:	4618      	mov	r0, r3
 8003db6:	3710      	adds	r7, #16
 8003db8:	46bd      	mov	sp, r7
 8003dba:	bdb0      	pop	{r4, r5, r7, pc}

08003dbc <LTDC_SetConfig>:
  * @param  LayerIdx  LTDC Layer index.
  *                   This parameter can be one of the following values: LTDC_LAYER_1 (0) or LTDC_LAYER_2 (1)
  * @retval None
  */
static void LTDC_SetConfig(LTDC_HandleTypeDef *hltdc, LTDC_LayerCfgTypeDef *pLayerCfg, uint32_t LayerIdx)
{
 8003dbc:	b480      	push	{r7}
 8003dbe:	b089      	sub	sp, #36	; 0x24
 8003dc0:	af00      	add	r7, sp, #0
 8003dc2:	60f8      	str	r0, [r7, #12]
 8003dc4:	60b9      	str	r1, [r7, #8]
 8003dc6:	607a      	str	r2, [r7, #4]
  uint32_t tmp;
  uint32_t tmp1;
  uint32_t tmp2;

  /* Configure the horizontal start and stop position */
  tmp = ((pLayerCfg->WindowX1 + ((hltdc->Instance->BPCR & LTDC_BPCR_AHBP) >> 16U)) << 16U);
 8003dc8:	68bb      	ldr	r3, [r7, #8]
 8003dca:	685a      	ldr	r2, [r3, #4]
 8003dcc:	68fb      	ldr	r3, [r7, #12]
 8003dce:	681b      	ldr	r3, [r3, #0]
 8003dd0:	68db      	ldr	r3, [r3, #12]
 8003dd2:	0c1b      	lsrs	r3, r3, #16
 8003dd4:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8003dd8:	4413      	add	r3, r2
 8003dda:	041b      	lsls	r3, r3, #16
 8003ddc:	61fb      	str	r3, [r7, #28]
  LTDC_LAYER(hltdc, LayerIdx)->WHPCR &= ~(LTDC_LxWHPCR_WHSTPOS | LTDC_LxWHPCR_WHSPPOS);
 8003dde:	68fb      	ldr	r3, [r7, #12]
 8003de0:	681b      	ldr	r3, [r3, #0]
 8003de2:	461a      	mov	r2, r3
 8003de4:	687b      	ldr	r3, [r7, #4]
 8003de6:	01db      	lsls	r3, r3, #7
 8003de8:	4413      	add	r3, r2
 8003dea:	3384      	adds	r3, #132	; 0x84
 8003dec:	685b      	ldr	r3, [r3, #4]
 8003dee:	68fa      	ldr	r2, [r7, #12]
 8003df0:	6812      	ldr	r2, [r2, #0]
 8003df2:	4611      	mov	r1, r2
 8003df4:	687a      	ldr	r2, [r7, #4]
 8003df6:	01d2      	lsls	r2, r2, #7
 8003df8:	440a      	add	r2, r1
 8003dfa:	3284      	adds	r2, #132	; 0x84
 8003dfc:	f403 4370 	and.w	r3, r3, #61440	; 0xf000
 8003e00:	6053      	str	r3, [r2, #4]
  LTDC_LAYER(hltdc, LayerIdx)->WHPCR = ((pLayerCfg->WindowX0 + \
 8003e02:	68bb      	ldr	r3, [r7, #8]
 8003e04:	681a      	ldr	r2, [r3, #0]
                                         ((hltdc->Instance->BPCR & LTDC_BPCR_AHBP) >> 16U) + 1U) | tmp);
 8003e06:	68fb      	ldr	r3, [r7, #12]
 8003e08:	681b      	ldr	r3, [r3, #0]
 8003e0a:	68db      	ldr	r3, [r3, #12]
 8003e0c:	0c1b      	lsrs	r3, r3, #16
 8003e0e:	f3c3 030b 	ubfx	r3, r3, #0, #12
  LTDC_LAYER(hltdc, LayerIdx)->WHPCR = ((pLayerCfg->WindowX0 + \
 8003e12:	4413      	add	r3, r2
                                         ((hltdc->Instance->BPCR & LTDC_BPCR_AHBP) >> 16U) + 1U) | tmp);
 8003e14:	1c5a      	adds	r2, r3, #1
  LTDC_LAYER(hltdc, LayerIdx)->WHPCR = ((pLayerCfg->WindowX0 + \
 8003e16:	68fb      	ldr	r3, [r7, #12]
 8003e18:	681b      	ldr	r3, [r3, #0]
 8003e1a:	4619      	mov	r1, r3
 8003e1c:	687b      	ldr	r3, [r7, #4]
 8003e1e:	01db      	lsls	r3, r3, #7
 8003e20:	440b      	add	r3, r1
 8003e22:	3384      	adds	r3, #132	; 0x84
 8003e24:	4619      	mov	r1, r3
                                         ((hltdc->Instance->BPCR & LTDC_BPCR_AHBP) >> 16U) + 1U) | tmp);
 8003e26:	69fb      	ldr	r3, [r7, #28]
 8003e28:	4313      	orrs	r3, r2
  LTDC_LAYER(hltdc, LayerIdx)->WHPCR = ((pLayerCfg->WindowX0 + \
 8003e2a:	604b      	str	r3, [r1, #4]

  /* Configure the vertical start and stop position */
  tmp = ((pLayerCfg->WindowY1 + (hltdc->Instance->BPCR & LTDC_BPCR_AVBP)) << 16U);
 8003e2c:	68bb      	ldr	r3, [r7, #8]
 8003e2e:	68da      	ldr	r2, [r3, #12]
 8003e30:	68fb      	ldr	r3, [r7, #12]
 8003e32:	681b      	ldr	r3, [r3, #0]
 8003e34:	68db      	ldr	r3, [r3, #12]
 8003e36:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8003e3a:	4413      	add	r3, r2
 8003e3c:	041b      	lsls	r3, r3, #16
 8003e3e:	61fb      	str	r3, [r7, #28]
  LTDC_LAYER(hltdc, LayerIdx)->WVPCR &= ~(LTDC_LxWVPCR_WVSTPOS | LTDC_LxWVPCR_WVSPPOS);
 8003e40:	68fb      	ldr	r3, [r7, #12]
 8003e42:	681b      	ldr	r3, [r3, #0]
 8003e44:	461a      	mov	r2, r3
 8003e46:	687b      	ldr	r3, [r7, #4]
 8003e48:	01db      	lsls	r3, r3, #7
 8003e4a:	4413      	add	r3, r2
 8003e4c:	3384      	adds	r3, #132	; 0x84
 8003e4e:	689b      	ldr	r3, [r3, #8]
 8003e50:	68fa      	ldr	r2, [r7, #12]
 8003e52:	6812      	ldr	r2, [r2, #0]
 8003e54:	4611      	mov	r1, r2
 8003e56:	687a      	ldr	r2, [r7, #4]
 8003e58:	01d2      	lsls	r2, r2, #7
 8003e5a:	440a      	add	r2, r1
 8003e5c:	3284      	adds	r2, #132	; 0x84
 8003e5e:	f403 4370 	and.w	r3, r3, #61440	; 0xf000
 8003e62:	6093      	str	r3, [r2, #8]
  LTDC_LAYER(hltdc, LayerIdx)->WVPCR  = ((pLayerCfg->WindowY0 + (hltdc->Instance->BPCR & LTDC_BPCR_AVBP) + 1U) | tmp);
 8003e64:	68bb      	ldr	r3, [r7, #8]
 8003e66:	689a      	ldr	r2, [r3, #8]
 8003e68:	68fb      	ldr	r3, [r7, #12]
 8003e6a:	681b      	ldr	r3, [r3, #0]
 8003e6c:	68db      	ldr	r3, [r3, #12]
 8003e6e:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8003e72:	4413      	add	r3, r2
 8003e74:	1c5a      	adds	r2, r3, #1
 8003e76:	68fb      	ldr	r3, [r7, #12]
 8003e78:	681b      	ldr	r3, [r3, #0]
 8003e7a:	4619      	mov	r1, r3
 8003e7c:	687b      	ldr	r3, [r7, #4]
 8003e7e:	01db      	lsls	r3, r3, #7
 8003e80:	440b      	add	r3, r1
 8003e82:	3384      	adds	r3, #132	; 0x84
 8003e84:	4619      	mov	r1, r3
 8003e86:	69fb      	ldr	r3, [r7, #28]
 8003e88:	4313      	orrs	r3, r2
 8003e8a:	608b      	str	r3, [r1, #8]

  /* Specifies the pixel format */
  LTDC_LAYER(hltdc, LayerIdx)->PFCR &= ~(LTDC_LxPFCR_PF);
 8003e8c:	68fb      	ldr	r3, [r7, #12]
 8003e8e:	681b      	ldr	r3, [r3, #0]
 8003e90:	461a      	mov	r2, r3
 8003e92:	687b      	ldr	r3, [r7, #4]
 8003e94:	01db      	lsls	r3, r3, #7
 8003e96:	4413      	add	r3, r2
 8003e98:	3384      	adds	r3, #132	; 0x84
 8003e9a:	691b      	ldr	r3, [r3, #16]
 8003e9c:	68fa      	ldr	r2, [r7, #12]
 8003e9e:	6812      	ldr	r2, [r2, #0]
 8003ea0:	4611      	mov	r1, r2
 8003ea2:	687a      	ldr	r2, [r7, #4]
 8003ea4:	01d2      	lsls	r2, r2, #7
 8003ea6:	440a      	add	r2, r1
 8003ea8:	3284      	adds	r2, #132	; 0x84
 8003eaa:	f023 0307 	bic.w	r3, r3, #7
 8003eae:	6113      	str	r3, [r2, #16]
  LTDC_LAYER(hltdc, LayerIdx)->PFCR = (pLayerCfg->PixelFormat);
 8003eb0:	68fb      	ldr	r3, [r7, #12]
 8003eb2:	681b      	ldr	r3, [r3, #0]
 8003eb4:	461a      	mov	r2, r3
 8003eb6:	687b      	ldr	r3, [r7, #4]
 8003eb8:	01db      	lsls	r3, r3, #7
 8003eba:	4413      	add	r3, r2
 8003ebc:	3384      	adds	r3, #132	; 0x84
 8003ebe:	461a      	mov	r2, r3
 8003ec0:	68bb      	ldr	r3, [r7, #8]
 8003ec2:	691b      	ldr	r3, [r3, #16]
 8003ec4:	6113      	str	r3, [r2, #16]

  /* Configure the default color values */
  tmp = ((uint32_t)(pLayerCfg->Backcolor.Green) << 8U);
 8003ec6:	68bb      	ldr	r3, [r7, #8]
 8003ec8:	f893 3031 	ldrb.w	r3, [r3, #49]	; 0x31
 8003ecc:	021b      	lsls	r3, r3, #8
 8003ece:	61fb      	str	r3, [r7, #28]
  tmp1 = ((uint32_t)(pLayerCfg->Backcolor.Red) << 16U);
 8003ed0:	68bb      	ldr	r3, [r7, #8]
 8003ed2:	f893 3032 	ldrb.w	r3, [r3, #50]	; 0x32
 8003ed6:	041b      	lsls	r3, r3, #16
 8003ed8:	61bb      	str	r3, [r7, #24]
  tmp2 = (pLayerCfg->Alpha0 << 24U);
 8003eda:	68bb      	ldr	r3, [r7, #8]
 8003edc:	699b      	ldr	r3, [r3, #24]
 8003ede:	061b      	lsls	r3, r3, #24
 8003ee0:	617b      	str	r3, [r7, #20]
  LTDC_LAYER(hltdc, LayerIdx)->DCCR &= ~(LTDC_LxDCCR_DCBLUE | LTDC_LxDCCR_DCGREEN | LTDC_LxDCCR_DCRED |
 8003ee2:	68fb      	ldr	r3, [r7, #12]
 8003ee4:	681b      	ldr	r3, [r3, #0]
 8003ee6:	461a      	mov	r2, r3
 8003ee8:	687b      	ldr	r3, [r7, #4]
 8003eea:	01db      	lsls	r3, r3, #7
 8003eec:	4413      	add	r3, r2
 8003eee:	3384      	adds	r3, #132	; 0x84
 8003ef0:	699b      	ldr	r3, [r3, #24]
 8003ef2:	68fb      	ldr	r3, [r7, #12]
 8003ef4:	681b      	ldr	r3, [r3, #0]
 8003ef6:	461a      	mov	r2, r3
 8003ef8:	687b      	ldr	r3, [r7, #4]
 8003efa:	01db      	lsls	r3, r3, #7
 8003efc:	4413      	add	r3, r2
 8003efe:	3384      	adds	r3, #132	; 0x84
 8003f00:	461a      	mov	r2, r3
 8003f02:	2300      	movs	r3, #0
 8003f04:	6193      	str	r3, [r2, #24]
                                         LTDC_LxDCCR_DCALPHA);
  LTDC_LAYER(hltdc, LayerIdx)->DCCR = (pLayerCfg->Backcolor.Blue | tmp | tmp1 | tmp2);
 8003f06:	68bb      	ldr	r3, [r7, #8]
 8003f08:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 8003f0c:	461a      	mov	r2, r3
 8003f0e:	69fb      	ldr	r3, [r7, #28]
 8003f10:	431a      	orrs	r2, r3
 8003f12:	69bb      	ldr	r3, [r7, #24]
 8003f14:	431a      	orrs	r2, r3
 8003f16:	68fb      	ldr	r3, [r7, #12]
 8003f18:	681b      	ldr	r3, [r3, #0]
 8003f1a:	4619      	mov	r1, r3
 8003f1c:	687b      	ldr	r3, [r7, #4]
 8003f1e:	01db      	lsls	r3, r3, #7
 8003f20:	440b      	add	r3, r1
 8003f22:	3384      	adds	r3, #132	; 0x84
 8003f24:	4619      	mov	r1, r3
 8003f26:	697b      	ldr	r3, [r7, #20]
 8003f28:	4313      	orrs	r3, r2
 8003f2a:	618b      	str	r3, [r1, #24]

  /* Specifies the constant alpha value */
  LTDC_LAYER(hltdc, LayerIdx)->CACR &= ~(LTDC_LxCACR_CONSTA);
 8003f2c:	68fb      	ldr	r3, [r7, #12]
 8003f2e:	681b      	ldr	r3, [r3, #0]
 8003f30:	461a      	mov	r2, r3
 8003f32:	687b      	ldr	r3, [r7, #4]
 8003f34:	01db      	lsls	r3, r3, #7
 8003f36:	4413      	add	r3, r2
 8003f38:	3384      	adds	r3, #132	; 0x84
 8003f3a:	695b      	ldr	r3, [r3, #20]
 8003f3c:	68fa      	ldr	r2, [r7, #12]
 8003f3e:	6812      	ldr	r2, [r2, #0]
 8003f40:	4611      	mov	r1, r2
 8003f42:	687a      	ldr	r2, [r7, #4]
 8003f44:	01d2      	lsls	r2, r2, #7
 8003f46:	440a      	add	r2, r1
 8003f48:	3284      	adds	r2, #132	; 0x84
 8003f4a:	f023 03ff 	bic.w	r3, r3, #255	; 0xff
 8003f4e:	6153      	str	r3, [r2, #20]
  LTDC_LAYER(hltdc, LayerIdx)->CACR = (pLayerCfg->Alpha);
 8003f50:	68fb      	ldr	r3, [r7, #12]
 8003f52:	681b      	ldr	r3, [r3, #0]
 8003f54:	461a      	mov	r2, r3
 8003f56:	687b      	ldr	r3, [r7, #4]
 8003f58:	01db      	lsls	r3, r3, #7
 8003f5a:	4413      	add	r3, r2
 8003f5c:	3384      	adds	r3, #132	; 0x84
 8003f5e:	461a      	mov	r2, r3
 8003f60:	68bb      	ldr	r3, [r7, #8]
 8003f62:	695b      	ldr	r3, [r3, #20]
 8003f64:	6153      	str	r3, [r2, #20]

  /* Specifies the blending factors */
  LTDC_LAYER(hltdc, LayerIdx)->BFCR &= ~(LTDC_LxBFCR_BF2 | LTDC_LxBFCR_BF1);
 8003f66:	68fb      	ldr	r3, [r7, #12]
 8003f68:	681b      	ldr	r3, [r3, #0]
 8003f6a:	461a      	mov	r2, r3
 8003f6c:	687b      	ldr	r3, [r7, #4]
 8003f6e:	01db      	lsls	r3, r3, #7
 8003f70:	4413      	add	r3, r2
 8003f72:	3384      	adds	r3, #132	; 0x84
 8003f74:	69db      	ldr	r3, [r3, #28]
 8003f76:	68fa      	ldr	r2, [r7, #12]
 8003f78:	6812      	ldr	r2, [r2, #0]
 8003f7a:	4611      	mov	r1, r2
 8003f7c:	687a      	ldr	r2, [r7, #4]
 8003f7e:	01d2      	lsls	r2, r2, #7
 8003f80:	440a      	add	r2, r1
 8003f82:	3284      	adds	r2, #132	; 0x84
 8003f84:	f423 63e0 	bic.w	r3, r3, #1792	; 0x700
 8003f88:	f023 0307 	bic.w	r3, r3, #7
 8003f8c:	61d3      	str	r3, [r2, #28]
  LTDC_LAYER(hltdc, LayerIdx)->BFCR = (pLayerCfg->BlendingFactor1 | pLayerCfg->BlendingFactor2);
 8003f8e:	68bb      	ldr	r3, [r7, #8]
 8003f90:	69da      	ldr	r2, [r3, #28]
 8003f92:	68bb      	ldr	r3, [r7, #8]
 8003f94:	6a1b      	ldr	r3, [r3, #32]
 8003f96:	68f9      	ldr	r1, [r7, #12]
 8003f98:	6809      	ldr	r1, [r1, #0]
 8003f9a:	4608      	mov	r0, r1
 8003f9c:	6879      	ldr	r1, [r7, #4]
 8003f9e:	01c9      	lsls	r1, r1, #7
 8003fa0:	4401      	add	r1, r0
 8003fa2:	3184      	adds	r1, #132	; 0x84
 8003fa4:	4313      	orrs	r3, r2
 8003fa6:	61cb      	str	r3, [r1, #28]

  /* Configure the color frame buffer start address */
  LTDC_LAYER(hltdc, LayerIdx)->CFBAR &= ~(LTDC_LxCFBAR_CFBADD);
 8003fa8:	68fb      	ldr	r3, [r7, #12]
 8003faa:	681b      	ldr	r3, [r3, #0]
 8003fac:	461a      	mov	r2, r3
 8003fae:	687b      	ldr	r3, [r7, #4]
 8003fb0:	01db      	lsls	r3, r3, #7
 8003fb2:	4413      	add	r3, r2
 8003fb4:	3384      	adds	r3, #132	; 0x84
 8003fb6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003fb8:	68fb      	ldr	r3, [r7, #12]
 8003fba:	681b      	ldr	r3, [r3, #0]
 8003fbc:	461a      	mov	r2, r3
 8003fbe:	687b      	ldr	r3, [r7, #4]
 8003fc0:	01db      	lsls	r3, r3, #7
 8003fc2:	4413      	add	r3, r2
 8003fc4:	3384      	adds	r3, #132	; 0x84
 8003fc6:	461a      	mov	r2, r3
 8003fc8:	2300      	movs	r3, #0
 8003fca:	6293      	str	r3, [r2, #40]	; 0x28
  LTDC_LAYER(hltdc, LayerIdx)->CFBAR = (pLayerCfg->FBStartAdress);
 8003fcc:	68fb      	ldr	r3, [r7, #12]
 8003fce:	681b      	ldr	r3, [r3, #0]
 8003fd0:	461a      	mov	r2, r3
 8003fd2:	687b      	ldr	r3, [r7, #4]
 8003fd4:	01db      	lsls	r3, r3, #7
 8003fd6:	4413      	add	r3, r2
 8003fd8:	3384      	adds	r3, #132	; 0x84
 8003fda:	461a      	mov	r2, r3
 8003fdc:	68bb      	ldr	r3, [r7, #8]
 8003fde:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003fe0:	6293      	str	r3, [r2, #40]	; 0x28

  if (pLayerCfg->PixelFormat == LTDC_PIXEL_FORMAT_ARGB8888)
 8003fe2:	68bb      	ldr	r3, [r7, #8]
 8003fe4:	691b      	ldr	r3, [r3, #16]
 8003fe6:	2b00      	cmp	r3, #0
 8003fe8:	d102      	bne.n	8003ff0 <LTDC_SetConfig+0x234>
  {
    tmp = 4U;
 8003fea:	2304      	movs	r3, #4
 8003fec:	61fb      	str	r3, [r7, #28]
 8003fee:	e01b      	b.n	8004028 <LTDC_SetConfig+0x26c>
  }
  else if (pLayerCfg->PixelFormat == LTDC_PIXEL_FORMAT_RGB888)
 8003ff0:	68bb      	ldr	r3, [r7, #8]
 8003ff2:	691b      	ldr	r3, [r3, #16]
 8003ff4:	2b01      	cmp	r3, #1
 8003ff6:	d102      	bne.n	8003ffe <LTDC_SetConfig+0x242>
  {
    tmp = 3U;
 8003ff8:	2303      	movs	r3, #3
 8003ffa:	61fb      	str	r3, [r7, #28]
 8003ffc:	e014      	b.n	8004028 <LTDC_SetConfig+0x26c>
  }
  else if ((pLayerCfg->PixelFormat == LTDC_PIXEL_FORMAT_ARGB4444) || \
 8003ffe:	68bb      	ldr	r3, [r7, #8]
 8004000:	691b      	ldr	r3, [r3, #16]
 8004002:	2b04      	cmp	r3, #4
 8004004:	d00b      	beq.n	800401e <LTDC_SetConfig+0x262>
           (pLayerCfg->PixelFormat == LTDC_PIXEL_FORMAT_RGB565)   || \
 8004006:	68bb      	ldr	r3, [r7, #8]
 8004008:	691b      	ldr	r3, [r3, #16]
  else if ((pLayerCfg->PixelFormat == LTDC_PIXEL_FORMAT_ARGB4444) || \
 800400a:	2b02      	cmp	r3, #2
 800400c:	d007      	beq.n	800401e <LTDC_SetConfig+0x262>
           (pLayerCfg->PixelFormat == LTDC_PIXEL_FORMAT_ARGB1555) || \
 800400e:	68bb      	ldr	r3, [r7, #8]
 8004010:	691b      	ldr	r3, [r3, #16]
           (pLayerCfg->PixelFormat == LTDC_PIXEL_FORMAT_RGB565)   || \
 8004012:	2b03      	cmp	r3, #3
 8004014:	d003      	beq.n	800401e <LTDC_SetConfig+0x262>
           (pLayerCfg->PixelFormat == LTDC_PIXEL_FORMAT_AL88))
 8004016:	68bb      	ldr	r3, [r7, #8]
 8004018:	691b      	ldr	r3, [r3, #16]
           (pLayerCfg->PixelFormat == LTDC_PIXEL_FORMAT_ARGB1555) || \
 800401a:	2b07      	cmp	r3, #7
 800401c:	d102      	bne.n	8004024 <LTDC_SetConfig+0x268>
  {
    tmp = 2U;
 800401e:	2302      	movs	r3, #2
 8004020:	61fb      	str	r3, [r7, #28]
 8004022:	e001      	b.n	8004028 <LTDC_SetConfig+0x26c>
  }
  else
  {
    tmp = 1U;
 8004024:	2301      	movs	r3, #1
 8004026:	61fb      	str	r3, [r7, #28]
  }

  /* Configure the color frame buffer pitch in byte */
  LTDC_LAYER(hltdc, LayerIdx)->CFBLR  &= ~(LTDC_LxCFBLR_CFBLL | LTDC_LxCFBLR_CFBP);
 8004028:	68fb      	ldr	r3, [r7, #12]
 800402a:	681b      	ldr	r3, [r3, #0]
 800402c:	461a      	mov	r2, r3
 800402e:	687b      	ldr	r3, [r7, #4]
 8004030:	01db      	lsls	r3, r3, #7
 8004032:	4413      	add	r3, r2
 8004034:	3384      	adds	r3, #132	; 0x84
 8004036:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004038:	68fa      	ldr	r2, [r7, #12]
 800403a:	6812      	ldr	r2, [r2, #0]
 800403c:	4611      	mov	r1, r2
 800403e:	687a      	ldr	r2, [r7, #4]
 8004040:	01d2      	lsls	r2, r2, #7
 8004042:	440a      	add	r2, r1
 8004044:	3284      	adds	r2, #132	; 0x84
 8004046:	f003 23e0 	and.w	r3, r3, #3758153728	; 0xe000e000
 800404a:	62d3      	str	r3, [r2, #44]	; 0x2c
  LTDC_LAYER(hltdc, LayerIdx)->CFBLR  = (((pLayerCfg->ImageWidth * tmp) << 16U) | \
 800404c:	68bb      	ldr	r3, [r7, #8]
 800404e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004050:	69fa      	ldr	r2, [r7, #28]
 8004052:	fb02 f303 	mul.w	r3, r2, r3
 8004056:	041a      	lsls	r2, r3, #16
                                         (((pLayerCfg->WindowX1 - pLayerCfg->WindowX0) * tmp)  + 3U));
 8004058:	68bb      	ldr	r3, [r7, #8]
 800405a:	6859      	ldr	r1, [r3, #4]
 800405c:	68bb      	ldr	r3, [r7, #8]
 800405e:	681b      	ldr	r3, [r3, #0]
 8004060:	1acb      	subs	r3, r1, r3
 8004062:	69f9      	ldr	r1, [r7, #28]
 8004064:	fb01 f303 	mul.w	r3, r1, r3
 8004068:	3303      	adds	r3, #3
  LTDC_LAYER(hltdc, LayerIdx)->CFBLR  = (((pLayerCfg->ImageWidth * tmp) << 16U) | \
 800406a:	68f9      	ldr	r1, [r7, #12]
 800406c:	6809      	ldr	r1, [r1, #0]
 800406e:	4608      	mov	r0, r1
 8004070:	6879      	ldr	r1, [r7, #4]
 8004072:	01c9      	lsls	r1, r1, #7
 8004074:	4401      	add	r1, r0
 8004076:	3184      	adds	r1, #132	; 0x84
 8004078:	4313      	orrs	r3, r2
 800407a:	62cb      	str	r3, [r1, #44]	; 0x2c
  /* Configure the frame buffer line number */
  LTDC_LAYER(hltdc, LayerIdx)->CFBLNR  &= ~(LTDC_LxCFBLNR_CFBLNBR);
 800407c:	68fb      	ldr	r3, [r7, #12]
 800407e:	681b      	ldr	r3, [r3, #0]
 8004080:	461a      	mov	r2, r3
 8004082:	687b      	ldr	r3, [r7, #4]
 8004084:	01db      	lsls	r3, r3, #7
 8004086:	4413      	add	r3, r2
 8004088:	3384      	adds	r3, #132	; 0x84
 800408a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800408c:	68fa      	ldr	r2, [r7, #12]
 800408e:	6812      	ldr	r2, [r2, #0]
 8004090:	4611      	mov	r1, r2
 8004092:	687a      	ldr	r2, [r7, #4]
 8004094:	01d2      	lsls	r2, r2, #7
 8004096:	440a      	add	r2, r1
 8004098:	3284      	adds	r2, #132	; 0x84
 800409a:	f423 63ff 	bic.w	r3, r3, #2040	; 0x7f8
 800409e:	f023 0307 	bic.w	r3, r3, #7
 80040a2:	6313      	str	r3, [r2, #48]	; 0x30
  LTDC_LAYER(hltdc, LayerIdx)->CFBLNR  = (pLayerCfg->ImageHeight);
 80040a4:	68fb      	ldr	r3, [r7, #12]
 80040a6:	681b      	ldr	r3, [r3, #0]
 80040a8:	461a      	mov	r2, r3
 80040aa:	687b      	ldr	r3, [r7, #4]
 80040ac:	01db      	lsls	r3, r3, #7
 80040ae:	4413      	add	r3, r2
 80040b0:	3384      	adds	r3, #132	; 0x84
 80040b2:	461a      	mov	r2, r3
 80040b4:	68bb      	ldr	r3, [r7, #8]
 80040b6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80040b8:	6313      	str	r3, [r2, #48]	; 0x30

  /* Enable LTDC_Layer by setting LEN bit */
  LTDC_LAYER(hltdc, LayerIdx)->CR |= (uint32_t)LTDC_LxCR_LEN;
 80040ba:	68fb      	ldr	r3, [r7, #12]
 80040bc:	681b      	ldr	r3, [r3, #0]
 80040be:	461a      	mov	r2, r3
 80040c0:	687b      	ldr	r3, [r7, #4]
 80040c2:	01db      	lsls	r3, r3, #7
 80040c4:	4413      	add	r3, r2
 80040c6:	3384      	adds	r3, #132	; 0x84
 80040c8:	681b      	ldr	r3, [r3, #0]
 80040ca:	68fa      	ldr	r2, [r7, #12]
 80040cc:	6812      	ldr	r2, [r2, #0]
 80040ce:	4611      	mov	r1, r2
 80040d0:	687a      	ldr	r2, [r7, #4]
 80040d2:	01d2      	lsls	r2, r2, #7
 80040d4:	440a      	add	r2, r1
 80040d6:	3284      	adds	r2, #132	; 0x84
 80040d8:	f043 0301 	orr.w	r3, r3, #1
 80040dc:	6013      	str	r3, [r2, #0]
}
 80040de:	bf00      	nop
 80040e0:	3724      	adds	r7, #36	; 0x24
 80040e2:	46bd      	mov	sp, r7
 80040e4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80040e8:	4770      	bx	lr
	...

080040ec <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 80040ec:	b580      	push	{r7, lr}
 80040ee:	b086      	sub	sp, #24
 80040f0:	af00      	add	r7, sp, #0
 80040f2:	6078      	str	r0, [r7, #4]
  uint32_t tickstart, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 80040f4:	687b      	ldr	r3, [r7, #4]
 80040f6:	2b00      	cmp	r3, #0
 80040f8:	d101      	bne.n	80040fe <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 80040fa:	2301      	movs	r3, #1
 80040fc:	e267      	b.n	80045ce <HAL_RCC_OscConfig+0x4e2>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 80040fe:	687b      	ldr	r3, [r7, #4]
 8004100:	681b      	ldr	r3, [r3, #0]
 8004102:	f003 0301 	and.w	r3, r3, #1
 8004106:	2b00      	cmp	r3, #0
 8004108:	d075      	beq.n	80041f6 <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 800410a:	4b88      	ldr	r3, [pc, #544]	; (800432c <HAL_RCC_OscConfig+0x240>)
 800410c:	689b      	ldr	r3, [r3, #8]
 800410e:	f003 030c 	and.w	r3, r3, #12
 8004112:	2b04      	cmp	r3, #4
 8004114:	d00c      	beq.n	8004130 <HAL_RCC_OscConfig+0x44>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8004116:	4b85      	ldr	r3, [pc, #532]	; (800432c <HAL_RCC_OscConfig+0x240>)
 8004118:	689b      	ldr	r3, [r3, #8]
 800411a:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 800411e:	2b08      	cmp	r3, #8
 8004120:	d112      	bne.n	8004148 <HAL_RCC_OscConfig+0x5c>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8004122:	4b82      	ldr	r3, [pc, #520]	; (800432c <HAL_RCC_OscConfig+0x240>)
 8004124:	685b      	ldr	r3, [r3, #4]
 8004126:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800412a:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 800412e:	d10b      	bne.n	8004148 <HAL_RCC_OscConfig+0x5c>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8004130:	4b7e      	ldr	r3, [pc, #504]	; (800432c <HAL_RCC_OscConfig+0x240>)
 8004132:	681b      	ldr	r3, [r3, #0]
 8004134:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8004138:	2b00      	cmp	r3, #0
 800413a:	d05b      	beq.n	80041f4 <HAL_RCC_OscConfig+0x108>
 800413c:	687b      	ldr	r3, [r7, #4]
 800413e:	685b      	ldr	r3, [r3, #4]
 8004140:	2b00      	cmp	r3, #0
 8004142:	d157      	bne.n	80041f4 <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 8004144:	2301      	movs	r3, #1
 8004146:	e242      	b.n	80045ce <HAL_RCC_OscConfig+0x4e2>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8004148:	687b      	ldr	r3, [r7, #4]
 800414a:	685b      	ldr	r3, [r3, #4]
 800414c:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8004150:	d106      	bne.n	8004160 <HAL_RCC_OscConfig+0x74>
 8004152:	4b76      	ldr	r3, [pc, #472]	; (800432c <HAL_RCC_OscConfig+0x240>)
 8004154:	681b      	ldr	r3, [r3, #0]
 8004156:	4a75      	ldr	r2, [pc, #468]	; (800432c <HAL_RCC_OscConfig+0x240>)
 8004158:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800415c:	6013      	str	r3, [r2, #0]
 800415e:	e01d      	b.n	800419c <HAL_RCC_OscConfig+0xb0>
 8004160:	687b      	ldr	r3, [r7, #4]
 8004162:	685b      	ldr	r3, [r3, #4]
 8004164:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8004168:	d10c      	bne.n	8004184 <HAL_RCC_OscConfig+0x98>
 800416a:	4b70      	ldr	r3, [pc, #448]	; (800432c <HAL_RCC_OscConfig+0x240>)
 800416c:	681b      	ldr	r3, [r3, #0]
 800416e:	4a6f      	ldr	r2, [pc, #444]	; (800432c <HAL_RCC_OscConfig+0x240>)
 8004170:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8004174:	6013      	str	r3, [r2, #0]
 8004176:	4b6d      	ldr	r3, [pc, #436]	; (800432c <HAL_RCC_OscConfig+0x240>)
 8004178:	681b      	ldr	r3, [r3, #0]
 800417a:	4a6c      	ldr	r2, [pc, #432]	; (800432c <HAL_RCC_OscConfig+0x240>)
 800417c:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8004180:	6013      	str	r3, [r2, #0]
 8004182:	e00b      	b.n	800419c <HAL_RCC_OscConfig+0xb0>
 8004184:	4b69      	ldr	r3, [pc, #420]	; (800432c <HAL_RCC_OscConfig+0x240>)
 8004186:	681b      	ldr	r3, [r3, #0]
 8004188:	4a68      	ldr	r2, [pc, #416]	; (800432c <HAL_RCC_OscConfig+0x240>)
 800418a:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800418e:	6013      	str	r3, [r2, #0]
 8004190:	4b66      	ldr	r3, [pc, #408]	; (800432c <HAL_RCC_OscConfig+0x240>)
 8004192:	681b      	ldr	r3, [r3, #0]
 8004194:	4a65      	ldr	r2, [pc, #404]	; (800432c <HAL_RCC_OscConfig+0x240>)
 8004196:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 800419a:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 800419c:	687b      	ldr	r3, [r7, #4]
 800419e:	685b      	ldr	r3, [r3, #4]
 80041a0:	2b00      	cmp	r3, #0
 80041a2:	d013      	beq.n	80041cc <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80041a4:	f7fd fc94 	bl	8001ad0 <HAL_GetTick>
 80041a8:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80041aa:	e008      	b.n	80041be <HAL_RCC_OscConfig+0xd2>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 80041ac:	f7fd fc90 	bl	8001ad0 <HAL_GetTick>
 80041b0:	4602      	mov	r2, r0
 80041b2:	693b      	ldr	r3, [r7, #16]
 80041b4:	1ad3      	subs	r3, r2, r3
 80041b6:	2b64      	cmp	r3, #100	; 0x64
 80041b8:	d901      	bls.n	80041be <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 80041ba:	2303      	movs	r3, #3
 80041bc:	e207      	b.n	80045ce <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80041be:	4b5b      	ldr	r3, [pc, #364]	; (800432c <HAL_RCC_OscConfig+0x240>)
 80041c0:	681b      	ldr	r3, [r3, #0]
 80041c2:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80041c6:	2b00      	cmp	r3, #0
 80041c8:	d0f0      	beq.n	80041ac <HAL_RCC_OscConfig+0xc0>
 80041ca:	e014      	b.n	80041f6 <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80041cc:	f7fd fc80 	bl	8001ad0 <HAL_GetTick>
 80041d0:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80041d2:	e008      	b.n	80041e6 <HAL_RCC_OscConfig+0xfa>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 80041d4:	f7fd fc7c 	bl	8001ad0 <HAL_GetTick>
 80041d8:	4602      	mov	r2, r0
 80041da:	693b      	ldr	r3, [r7, #16]
 80041dc:	1ad3      	subs	r3, r2, r3
 80041de:	2b64      	cmp	r3, #100	; 0x64
 80041e0:	d901      	bls.n	80041e6 <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 80041e2:	2303      	movs	r3, #3
 80041e4:	e1f3      	b.n	80045ce <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80041e6:	4b51      	ldr	r3, [pc, #324]	; (800432c <HAL_RCC_OscConfig+0x240>)
 80041e8:	681b      	ldr	r3, [r3, #0]
 80041ea:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80041ee:	2b00      	cmp	r3, #0
 80041f0:	d1f0      	bne.n	80041d4 <HAL_RCC_OscConfig+0xe8>
 80041f2:	e000      	b.n	80041f6 <HAL_RCC_OscConfig+0x10a>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80041f4:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 80041f6:	687b      	ldr	r3, [r7, #4]
 80041f8:	681b      	ldr	r3, [r3, #0]
 80041fa:	f003 0302 	and.w	r3, r3, #2
 80041fe:	2b00      	cmp	r3, #0
 8004200:	d063      	beq.n	80042ca <HAL_RCC_OscConfig+0x1de>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 8004202:	4b4a      	ldr	r3, [pc, #296]	; (800432c <HAL_RCC_OscConfig+0x240>)
 8004204:	689b      	ldr	r3, [r3, #8]
 8004206:	f003 030c 	and.w	r3, r3, #12
 800420a:	2b00      	cmp	r3, #0
 800420c:	d00b      	beq.n	8004226 <HAL_RCC_OscConfig+0x13a>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 800420e:	4b47      	ldr	r3, [pc, #284]	; (800432c <HAL_RCC_OscConfig+0x240>)
 8004210:	689b      	ldr	r3, [r3, #8]
 8004212:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 8004216:	2b08      	cmp	r3, #8
 8004218:	d11c      	bne.n	8004254 <HAL_RCC_OscConfig+0x168>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 800421a:	4b44      	ldr	r3, [pc, #272]	; (800432c <HAL_RCC_OscConfig+0x240>)
 800421c:	685b      	ldr	r3, [r3, #4]
 800421e:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8004222:	2b00      	cmp	r3, #0
 8004224:	d116      	bne.n	8004254 <HAL_RCC_OscConfig+0x168>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8004226:	4b41      	ldr	r3, [pc, #260]	; (800432c <HAL_RCC_OscConfig+0x240>)
 8004228:	681b      	ldr	r3, [r3, #0]
 800422a:	f003 0302 	and.w	r3, r3, #2
 800422e:	2b00      	cmp	r3, #0
 8004230:	d005      	beq.n	800423e <HAL_RCC_OscConfig+0x152>
 8004232:	687b      	ldr	r3, [r7, #4]
 8004234:	68db      	ldr	r3, [r3, #12]
 8004236:	2b01      	cmp	r3, #1
 8004238:	d001      	beq.n	800423e <HAL_RCC_OscConfig+0x152>
      {
        return HAL_ERROR;
 800423a:	2301      	movs	r3, #1
 800423c:	e1c7      	b.n	80045ce <HAL_RCC_OscConfig+0x4e2>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800423e:	4b3b      	ldr	r3, [pc, #236]	; (800432c <HAL_RCC_OscConfig+0x240>)
 8004240:	681b      	ldr	r3, [r3, #0]
 8004242:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8004246:	687b      	ldr	r3, [r7, #4]
 8004248:	691b      	ldr	r3, [r3, #16]
 800424a:	00db      	lsls	r3, r3, #3
 800424c:	4937      	ldr	r1, [pc, #220]	; (800432c <HAL_RCC_OscConfig+0x240>)
 800424e:	4313      	orrs	r3, r2
 8004250:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8004252:	e03a      	b.n	80042ca <HAL_RCC_OscConfig+0x1de>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 8004254:	687b      	ldr	r3, [r7, #4]
 8004256:	68db      	ldr	r3, [r3, #12]
 8004258:	2b00      	cmp	r3, #0
 800425a:	d020      	beq.n	800429e <HAL_RCC_OscConfig+0x1b2>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 800425c:	4b34      	ldr	r3, [pc, #208]	; (8004330 <HAL_RCC_OscConfig+0x244>)
 800425e:	2201      	movs	r2, #1
 8004260:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004262:	f7fd fc35 	bl	8001ad0 <HAL_GetTick>
 8004266:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8004268:	e008      	b.n	800427c <HAL_RCC_OscConfig+0x190>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 800426a:	f7fd fc31 	bl	8001ad0 <HAL_GetTick>
 800426e:	4602      	mov	r2, r0
 8004270:	693b      	ldr	r3, [r7, #16]
 8004272:	1ad3      	subs	r3, r2, r3
 8004274:	2b02      	cmp	r3, #2
 8004276:	d901      	bls.n	800427c <HAL_RCC_OscConfig+0x190>
          {
            return HAL_TIMEOUT;
 8004278:	2303      	movs	r3, #3
 800427a:	e1a8      	b.n	80045ce <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800427c:	4b2b      	ldr	r3, [pc, #172]	; (800432c <HAL_RCC_OscConfig+0x240>)
 800427e:	681b      	ldr	r3, [r3, #0]
 8004280:	f003 0302 	and.w	r3, r3, #2
 8004284:	2b00      	cmp	r3, #0
 8004286:	d0f0      	beq.n	800426a <HAL_RCC_OscConfig+0x17e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8004288:	4b28      	ldr	r3, [pc, #160]	; (800432c <HAL_RCC_OscConfig+0x240>)
 800428a:	681b      	ldr	r3, [r3, #0]
 800428c:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8004290:	687b      	ldr	r3, [r7, #4]
 8004292:	691b      	ldr	r3, [r3, #16]
 8004294:	00db      	lsls	r3, r3, #3
 8004296:	4925      	ldr	r1, [pc, #148]	; (800432c <HAL_RCC_OscConfig+0x240>)
 8004298:	4313      	orrs	r3, r2
 800429a:	600b      	str	r3, [r1, #0]
 800429c:	e015      	b.n	80042ca <HAL_RCC_OscConfig+0x1de>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 800429e:	4b24      	ldr	r3, [pc, #144]	; (8004330 <HAL_RCC_OscConfig+0x244>)
 80042a0:	2200      	movs	r2, #0
 80042a2:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80042a4:	f7fd fc14 	bl	8001ad0 <HAL_GetTick>
 80042a8:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80042aa:	e008      	b.n	80042be <HAL_RCC_OscConfig+0x1d2>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 80042ac:	f7fd fc10 	bl	8001ad0 <HAL_GetTick>
 80042b0:	4602      	mov	r2, r0
 80042b2:	693b      	ldr	r3, [r7, #16]
 80042b4:	1ad3      	subs	r3, r2, r3
 80042b6:	2b02      	cmp	r3, #2
 80042b8:	d901      	bls.n	80042be <HAL_RCC_OscConfig+0x1d2>
          {
            return HAL_TIMEOUT;
 80042ba:	2303      	movs	r3, #3
 80042bc:	e187      	b.n	80045ce <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80042be:	4b1b      	ldr	r3, [pc, #108]	; (800432c <HAL_RCC_OscConfig+0x240>)
 80042c0:	681b      	ldr	r3, [r3, #0]
 80042c2:	f003 0302 	and.w	r3, r3, #2
 80042c6:	2b00      	cmp	r3, #0
 80042c8:	d1f0      	bne.n	80042ac <HAL_RCC_OscConfig+0x1c0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 80042ca:	687b      	ldr	r3, [r7, #4]
 80042cc:	681b      	ldr	r3, [r3, #0]
 80042ce:	f003 0308 	and.w	r3, r3, #8
 80042d2:	2b00      	cmp	r3, #0
 80042d4:	d036      	beq.n	8004344 <HAL_RCC_OscConfig+0x258>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 80042d6:	687b      	ldr	r3, [r7, #4]
 80042d8:	695b      	ldr	r3, [r3, #20]
 80042da:	2b00      	cmp	r3, #0
 80042dc:	d016      	beq.n	800430c <HAL_RCC_OscConfig+0x220>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 80042de:	4b15      	ldr	r3, [pc, #84]	; (8004334 <HAL_RCC_OscConfig+0x248>)
 80042e0:	2201      	movs	r2, #1
 80042e2:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80042e4:	f7fd fbf4 	bl	8001ad0 <HAL_GetTick>
 80042e8:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80042ea:	e008      	b.n	80042fe <HAL_RCC_OscConfig+0x212>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 80042ec:	f7fd fbf0 	bl	8001ad0 <HAL_GetTick>
 80042f0:	4602      	mov	r2, r0
 80042f2:	693b      	ldr	r3, [r7, #16]
 80042f4:	1ad3      	subs	r3, r2, r3
 80042f6:	2b02      	cmp	r3, #2
 80042f8:	d901      	bls.n	80042fe <HAL_RCC_OscConfig+0x212>
        {
          return HAL_TIMEOUT;
 80042fa:	2303      	movs	r3, #3
 80042fc:	e167      	b.n	80045ce <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80042fe:	4b0b      	ldr	r3, [pc, #44]	; (800432c <HAL_RCC_OscConfig+0x240>)
 8004300:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8004302:	f003 0302 	and.w	r3, r3, #2
 8004306:	2b00      	cmp	r3, #0
 8004308:	d0f0      	beq.n	80042ec <HAL_RCC_OscConfig+0x200>
 800430a:	e01b      	b.n	8004344 <HAL_RCC_OscConfig+0x258>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 800430c:	4b09      	ldr	r3, [pc, #36]	; (8004334 <HAL_RCC_OscConfig+0x248>)
 800430e:	2200      	movs	r2, #0
 8004310:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8004312:	f7fd fbdd 	bl	8001ad0 <HAL_GetTick>
 8004316:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8004318:	e00e      	b.n	8004338 <HAL_RCC_OscConfig+0x24c>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 800431a:	f7fd fbd9 	bl	8001ad0 <HAL_GetTick>
 800431e:	4602      	mov	r2, r0
 8004320:	693b      	ldr	r3, [r7, #16]
 8004322:	1ad3      	subs	r3, r2, r3
 8004324:	2b02      	cmp	r3, #2
 8004326:	d907      	bls.n	8004338 <HAL_RCC_OscConfig+0x24c>
        {
          return HAL_TIMEOUT;
 8004328:	2303      	movs	r3, #3
 800432a:	e150      	b.n	80045ce <HAL_RCC_OscConfig+0x4e2>
 800432c:	40023800 	.word	0x40023800
 8004330:	42470000 	.word	0x42470000
 8004334:	42470e80 	.word	0x42470e80
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8004338:	4b88      	ldr	r3, [pc, #544]	; (800455c <HAL_RCC_OscConfig+0x470>)
 800433a:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800433c:	f003 0302 	and.w	r3, r3, #2
 8004340:	2b00      	cmp	r3, #0
 8004342:	d1ea      	bne.n	800431a <HAL_RCC_OscConfig+0x22e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8004344:	687b      	ldr	r3, [r7, #4]
 8004346:	681b      	ldr	r3, [r3, #0]
 8004348:	f003 0304 	and.w	r3, r3, #4
 800434c:	2b00      	cmp	r3, #0
 800434e:	f000 8097 	beq.w	8004480 <HAL_RCC_OscConfig+0x394>
  {
    FlagStatus       pwrclkchanged = RESET;
 8004352:	2300      	movs	r3, #0
 8004354:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8004356:	4b81      	ldr	r3, [pc, #516]	; (800455c <HAL_RCC_OscConfig+0x470>)
 8004358:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800435a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800435e:	2b00      	cmp	r3, #0
 8004360:	d10f      	bne.n	8004382 <HAL_RCC_OscConfig+0x296>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8004362:	2300      	movs	r3, #0
 8004364:	60bb      	str	r3, [r7, #8]
 8004366:	4b7d      	ldr	r3, [pc, #500]	; (800455c <HAL_RCC_OscConfig+0x470>)
 8004368:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800436a:	4a7c      	ldr	r2, [pc, #496]	; (800455c <HAL_RCC_OscConfig+0x470>)
 800436c:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8004370:	6413      	str	r3, [r2, #64]	; 0x40
 8004372:	4b7a      	ldr	r3, [pc, #488]	; (800455c <HAL_RCC_OscConfig+0x470>)
 8004374:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004376:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800437a:	60bb      	str	r3, [r7, #8]
 800437c:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 800437e:	2301      	movs	r3, #1
 8004380:	75fb      	strb	r3, [r7, #23]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8004382:	4b77      	ldr	r3, [pc, #476]	; (8004560 <HAL_RCC_OscConfig+0x474>)
 8004384:	681b      	ldr	r3, [r3, #0]
 8004386:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800438a:	2b00      	cmp	r3, #0
 800438c:	d118      	bne.n	80043c0 <HAL_RCC_OscConfig+0x2d4>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 800438e:	4b74      	ldr	r3, [pc, #464]	; (8004560 <HAL_RCC_OscConfig+0x474>)
 8004390:	681b      	ldr	r3, [r3, #0]
 8004392:	4a73      	ldr	r2, [pc, #460]	; (8004560 <HAL_RCC_OscConfig+0x474>)
 8004394:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8004398:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 800439a:	f7fd fb99 	bl	8001ad0 <HAL_GetTick>
 800439e:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80043a0:	e008      	b.n	80043b4 <HAL_RCC_OscConfig+0x2c8>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80043a2:	f7fd fb95 	bl	8001ad0 <HAL_GetTick>
 80043a6:	4602      	mov	r2, r0
 80043a8:	693b      	ldr	r3, [r7, #16]
 80043aa:	1ad3      	subs	r3, r2, r3
 80043ac:	2b02      	cmp	r3, #2
 80043ae:	d901      	bls.n	80043b4 <HAL_RCC_OscConfig+0x2c8>
        {
          return HAL_TIMEOUT;
 80043b0:	2303      	movs	r3, #3
 80043b2:	e10c      	b.n	80045ce <HAL_RCC_OscConfig+0x4e2>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80043b4:	4b6a      	ldr	r3, [pc, #424]	; (8004560 <HAL_RCC_OscConfig+0x474>)
 80043b6:	681b      	ldr	r3, [r3, #0]
 80043b8:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80043bc:	2b00      	cmp	r3, #0
 80043be:	d0f0      	beq.n	80043a2 <HAL_RCC_OscConfig+0x2b6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 80043c0:	687b      	ldr	r3, [r7, #4]
 80043c2:	689b      	ldr	r3, [r3, #8]
 80043c4:	2b01      	cmp	r3, #1
 80043c6:	d106      	bne.n	80043d6 <HAL_RCC_OscConfig+0x2ea>
 80043c8:	4b64      	ldr	r3, [pc, #400]	; (800455c <HAL_RCC_OscConfig+0x470>)
 80043ca:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80043cc:	4a63      	ldr	r2, [pc, #396]	; (800455c <HAL_RCC_OscConfig+0x470>)
 80043ce:	f043 0301 	orr.w	r3, r3, #1
 80043d2:	6713      	str	r3, [r2, #112]	; 0x70
 80043d4:	e01c      	b.n	8004410 <HAL_RCC_OscConfig+0x324>
 80043d6:	687b      	ldr	r3, [r7, #4]
 80043d8:	689b      	ldr	r3, [r3, #8]
 80043da:	2b05      	cmp	r3, #5
 80043dc:	d10c      	bne.n	80043f8 <HAL_RCC_OscConfig+0x30c>
 80043de:	4b5f      	ldr	r3, [pc, #380]	; (800455c <HAL_RCC_OscConfig+0x470>)
 80043e0:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80043e2:	4a5e      	ldr	r2, [pc, #376]	; (800455c <HAL_RCC_OscConfig+0x470>)
 80043e4:	f043 0304 	orr.w	r3, r3, #4
 80043e8:	6713      	str	r3, [r2, #112]	; 0x70
 80043ea:	4b5c      	ldr	r3, [pc, #368]	; (800455c <HAL_RCC_OscConfig+0x470>)
 80043ec:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80043ee:	4a5b      	ldr	r2, [pc, #364]	; (800455c <HAL_RCC_OscConfig+0x470>)
 80043f0:	f043 0301 	orr.w	r3, r3, #1
 80043f4:	6713      	str	r3, [r2, #112]	; 0x70
 80043f6:	e00b      	b.n	8004410 <HAL_RCC_OscConfig+0x324>
 80043f8:	4b58      	ldr	r3, [pc, #352]	; (800455c <HAL_RCC_OscConfig+0x470>)
 80043fa:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80043fc:	4a57      	ldr	r2, [pc, #348]	; (800455c <HAL_RCC_OscConfig+0x470>)
 80043fe:	f023 0301 	bic.w	r3, r3, #1
 8004402:	6713      	str	r3, [r2, #112]	; 0x70
 8004404:	4b55      	ldr	r3, [pc, #340]	; (800455c <HAL_RCC_OscConfig+0x470>)
 8004406:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004408:	4a54      	ldr	r2, [pc, #336]	; (800455c <HAL_RCC_OscConfig+0x470>)
 800440a:	f023 0304 	bic.w	r3, r3, #4
 800440e:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8004410:	687b      	ldr	r3, [r7, #4]
 8004412:	689b      	ldr	r3, [r3, #8]
 8004414:	2b00      	cmp	r3, #0
 8004416:	d015      	beq.n	8004444 <HAL_RCC_OscConfig+0x358>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8004418:	f7fd fb5a 	bl	8001ad0 <HAL_GetTick>
 800441c:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800441e:	e00a      	b.n	8004436 <HAL_RCC_OscConfig+0x34a>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8004420:	f7fd fb56 	bl	8001ad0 <HAL_GetTick>
 8004424:	4602      	mov	r2, r0
 8004426:	693b      	ldr	r3, [r7, #16]
 8004428:	1ad3      	subs	r3, r2, r3
 800442a:	f241 3288 	movw	r2, #5000	; 0x1388
 800442e:	4293      	cmp	r3, r2
 8004430:	d901      	bls.n	8004436 <HAL_RCC_OscConfig+0x34a>
        {
          return HAL_TIMEOUT;
 8004432:	2303      	movs	r3, #3
 8004434:	e0cb      	b.n	80045ce <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8004436:	4b49      	ldr	r3, [pc, #292]	; (800455c <HAL_RCC_OscConfig+0x470>)
 8004438:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800443a:	f003 0302 	and.w	r3, r3, #2
 800443e:	2b00      	cmp	r3, #0
 8004440:	d0ee      	beq.n	8004420 <HAL_RCC_OscConfig+0x334>
 8004442:	e014      	b.n	800446e <HAL_RCC_OscConfig+0x382>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8004444:	f7fd fb44 	bl	8001ad0 <HAL_GetTick>
 8004448:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 800444a:	e00a      	b.n	8004462 <HAL_RCC_OscConfig+0x376>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 800444c:	f7fd fb40 	bl	8001ad0 <HAL_GetTick>
 8004450:	4602      	mov	r2, r0
 8004452:	693b      	ldr	r3, [r7, #16]
 8004454:	1ad3      	subs	r3, r2, r3
 8004456:	f241 3288 	movw	r2, #5000	; 0x1388
 800445a:	4293      	cmp	r3, r2
 800445c:	d901      	bls.n	8004462 <HAL_RCC_OscConfig+0x376>
        {
          return HAL_TIMEOUT;
 800445e:	2303      	movs	r3, #3
 8004460:	e0b5      	b.n	80045ce <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8004462:	4b3e      	ldr	r3, [pc, #248]	; (800455c <HAL_RCC_OscConfig+0x470>)
 8004464:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004466:	f003 0302 	and.w	r3, r3, #2
 800446a:	2b00      	cmp	r3, #0
 800446c:	d1ee      	bne.n	800444c <HAL_RCC_OscConfig+0x360>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 800446e:	7dfb      	ldrb	r3, [r7, #23]
 8004470:	2b01      	cmp	r3, #1
 8004472:	d105      	bne.n	8004480 <HAL_RCC_OscConfig+0x394>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8004474:	4b39      	ldr	r3, [pc, #228]	; (800455c <HAL_RCC_OscConfig+0x470>)
 8004476:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004478:	4a38      	ldr	r2, [pc, #224]	; (800455c <HAL_RCC_OscConfig+0x470>)
 800447a:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 800447e:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8004480:	687b      	ldr	r3, [r7, #4]
 8004482:	699b      	ldr	r3, [r3, #24]
 8004484:	2b00      	cmp	r3, #0
 8004486:	f000 80a1 	beq.w	80045cc <HAL_RCC_OscConfig+0x4e0>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 800448a:	4b34      	ldr	r3, [pc, #208]	; (800455c <HAL_RCC_OscConfig+0x470>)
 800448c:	689b      	ldr	r3, [r3, #8]
 800448e:	f003 030c 	and.w	r3, r3, #12
 8004492:	2b08      	cmp	r3, #8
 8004494:	d05c      	beq.n	8004550 <HAL_RCC_OscConfig+0x464>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8004496:	687b      	ldr	r3, [r7, #4]
 8004498:	699b      	ldr	r3, [r3, #24]
 800449a:	2b02      	cmp	r3, #2
 800449c:	d141      	bne.n	8004522 <HAL_RCC_OscConfig+0x436>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800449e:	4b31      	ldr	r3, [pc, #196]	; (8004564 <HAL_RCC_OscConfig+0x478>)
 80044a0:	2200      	movs	r2, #0
 80044a2:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80044a4:	f7fd fb14 	bl	8001ad0 <HAL_GetTick>
 80044a8:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80044aa:	e008      	b.n	80044be <HAL_RCC_OscConfig+0x3d2>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80044ac:	f7fd fb10 	bl	8001ad0 <HAL_GetTick>
 80044b0:	4602      	mov	r2, r0
 80044b2:	693b      	ldr	r3, [r7, #16]
 80044b4:	1ad3      	subs	r3, r2, r3
 80044b6:	2b02      	cmp	r3, #2
 80044b8:	d901      	bls.n	80044be <HAL_RCC_OscConfig+0x3d2>
          {
            return HAL_TIMEOUT;
 80044ba:	2303      	movs	r3, #3
 80044bc:	e087      	b.n	80045ce <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80044be:	4b27      	ldr	r3, [pc, #156]	; (800455c <HAL_RCC_OscConfig+0x470>)
 80044c0:	681b      	ldr	r3, [r3, #0]
 80044c2:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80044c6:	2b00      	cmp	r3, #0
 80044c8:	d1f0      	bne.n	80044ac <HAL_RCC_OscConfig+0x3c0>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 80044ca:	687b      	ldr	r3, [r7, #4]
 80044cc:	69da      	ldr	r2, [r3, #28]
 80044ce:	687b      	ldr	r3, [r7, #4]
 80044d0:	6a1b      	ldr	r3, [r3, #32]
 80044d2:	431a      	orrs	r2, r3
 80044d4:	687b      	ldr	r3, [r7, #4]
 80044d6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80044d8:	019b      	lsls	r3, r3, #6
 80044da:	431a      	orrs	r2, r3
 80044dc:	687b      	ldr	r3, [r7, #4]
 80044de:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80044e0:	085b      	lsrs	r3, r3, #1
 80044e2:	3b01      	subs	r3, #1
 80044e4:	041b      	lsls	r3, r3, #16
 80044e6:	431a      	orrs	r2, r3
 80044e8:	687b      	ldr	r3, [r7, #4]
 80044ea:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80044ec:	061b      	lsls	r3, r3, #24
 80044ee:	491b      	ldr	r1, [pc, #108]	; (800455c <HAL_RCC_OscConfig+0x470>)
 80044f0:	4313      	orrs	r3, r2
 80044f2:	604b      	str	r3, [r1, #4]
                                 RCC_OscInitStruct->PLL.PLLM                                                 | \
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)             | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos) | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 80044f4:	4b1b      	ldr	r3, [pc, #108]	; (8004564 <HAL_RCC_OscConfig+0x478>)
 80044f6:	2201      	movs	r2, #1
 80044f8:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80044fa:	f7fd fae9 	bl	8001ad0 <HAL_GetTick>
 80044fe:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8004500:	e008      	b.n	8004514 <HAL_RCC_OscConfig+0x428>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8004502:	f7fd fae5 	bl	8001ad0 <HAL_GetTick>
 8004506:	4602      	mov	r2, r0
 8004508:	693b      	ldr	r3, [r7, #16]
 800450a:	1ad3      	subs	r3, r2, r3
 800450c:	2b02      	cmp	r3, #2
 800450e:	d901      	bls.n	8004514 <HAL_RCC_OscConfig+0x428>
          {
            return HAL_TIMEOUT;
 8004510:	2303      	movs	r3, #3
 8004512:	e05c      	b.n	80045ce <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8004514:	4b11      	ldr	r3, [pc, #68]	; (800455c <HAL_RCC_OscConfig+0x470>)
 8004516:	681b      	ldr	r3, [r3, #0]
 8004518:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800451c:	2b00      	cmp	r3, #0
 800451e:	d0f0      	beq.n	8004502 <HAL_RCC_OscConfig+0x416>
 8004520:	e054      	b.n	80045cc <HAL_RCC_OscConfig+0x4e0>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8004522:	4b10      	ldr	r3, [pc, #64]	; (8004564 <HAL_RCC_OscConfig+0x478>)
 8004524:	2200      	movs	r2, #0
 8004526:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8004528:	f7fd fad2 	bl	8001ad0 <HAL_GetTick>
 800452c:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800452e:	e008      	b.n	8004542 <HAL_RCC_OscConfig+0x456>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8004530:	f7fd face 	bl	8001ad0 <HAL_GetTick>
 8004534:	4602      	mov	r2, r0
 8004536:	693b      	ldr	r3, [r7, #16]
 8004538:	1ad3      	subs	r3, r2, r3
 800453a:	2b02      	cmp	r3, #2
 800453c:	d901      	bls.n	8004542 <HAL_RCC_OscConfig+0x456>
          {
            return HAL_TIMEOUT;
 800453e:	2303      	movs	r3, #3
 8004540:	e045      	b.n	80045ce <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8004542:	4b06      	ldr	r3, [pc, #24]	; (800455c <HAL_RCC_OscConfig+0x470>)
 8004544:	681b      	ldr	r3, [r3, #0]
 8004546:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800454a:	2b00      	cmp	r3, #0
 800454c:	d1f0      	bne.n	8004530 <HAL_RCC_OscConfig+0x444>
 800454e:	e03d      	b.n	80045cc <HAL_RCC_OscConfig+0x4e0>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8004550:	687b      	ldr	r3, [r7, #4]
 8004552:	699b      	ldr	r3, [r3, #24]
 8004554:	2b01      	cmp	r3, #1
 8004556:	d107      	bne.n	8004568 <HAL_RCC_OscConfig+0x47c>
      {
        return HAL_ERROR;
 8004558:	2301      	movs	r3, #1
 800455a:	e038      	b.n	80045ce <HAL_RCC_OscConfig+0x4e2>
 800455c:	40023800 	.word	0x40023800
 8004560:	40007000 	.word	0x40007000
 8004564:	42470060 	.word	0x42470060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 8004568:	4b1b      	ldr	r3, [pc, #108]	; (80045d8 <HAL_RCC_OscConfig+0x4ec>)
 800456a:	685b      	ldr	r3, [r3, #4]
 800456c:	60fb      	str	r3, [r7, #12]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
#else
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 800456e:	687b      	ldr	r3, [r7, #4]
 8004570:	699b      	ldr	r3, [r3, #24]
 8004572:	2b01      	cmp	r3, #1
 8004574:	d028      	beq.n	80045c8 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8004576:	68fb      	ldr	r3, [r7, #12]
 8004578:	f403 0280 	and.w	r2, r3, #4194304	; 0x400000
 800457c:	687b      	ldr	r3, [r7, #4]
 800457e:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8004580:	429a      	cmp	r2, r3
 8004582:	d121      	bne.n	80045c8 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8004584:	68fb      	ldr	r3, [r7, #12]
 8004586:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 800458a:	687b      	ldr	r3, [r7, #4]
 800458c:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800458e:	429a      	cmp	r2, r3
 8004590:	d11a      	bne.n	80045c8 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8004592:	68fa      	ldr	r2, [r7, #12]
 8004594:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 8004598:	4013      	ands	r3, r2
 800459a:	687a      	ldr	r2, [r7, #4]
 800459c:	6a52      	ldr	r2, [r2, #36]	; 0x24
 800459e:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 80045a0:	4293      	cmp	r3, r2
 80045a2:	d111      	bne.n	80045c8 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 80045a4:	68fb      	ldr	r3, [r7, #12]
 80045a6:	f403 3240 	and.w	r2, r3, #196608	; 0x30000
 80045aa:	687b      	ldr	r3, [r7, #4]
 80045ac:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80045ae:	085b      	lsrs	r3, r3, #1
 80045b0:	3b01      	subs	r3, #1
 80045b2:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 80045b4:	429a      	cmp	r2, r3
 80045b6:	d107      	bne.n	80045c8 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
 80045b8:	68fb      	ldr	r3, [r7, #12]
 80045ba:	f003 6270 	and.w	r2, r3, #251658240	; 0xf000000
 80045be:	687b      	ldr	r3, [r7, #4]
 80045c0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80045c2:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 80045c4:	429a      	cmp	r2, r3
 80045c6:	d001      	beq.n	80045cc <HAL_RCC_OscConfig+0x4e0>
#endif
        {
          return HAL_ERROR;
 80045c8:	2301      	movs	r3, #1
 80045ca:	e000      	b.n	80045ce <HAL_RCC_OscConfig+0x4e2>
        }
      }
    }
  }
  return HAL_OK;
 80045cc:	2300      	movs	r3, #0
}
 80045ce:	4618      	mov	r0, r3
 80045d0:	3718      	adds	r7, #24
 80045d2:	46bd      	mov	sp, r7
 80045d4:	bd80      	pop	{r7, pc}
 80045d6:	bf00      	nop
 80045d8:	40023800 	.word	0x40023800

080045dc <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 80045dc:	b580      	push	{r7, lr}
 80045de:	b084      	sub	sp, #16
 80045e0:	af00      	add	r7, sp, #0
 80045e2:	6078      	str	r0, [r7, #4]
 80045e4:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 80045e6:	687b      	ldr	r3, [r7, #4]
 80045e8:	2b00      	cmp	r3, #0
 80045ea:	d101      	bne.n	80045f0 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 80045ec:	2301      	movs	r3, #1
 80045ee:	e0cc      	b.n	800478a <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 80045f0:	4b68      	ldr	r3, [pc, #416]	; (8004794 <HAL_RCC_ClockConfig+0x1b8>)
 80045f2:	681b      	ldr	r3, [r3, #0]
 80045f4:	f003 030f 	and.w	r3, r3, #15
 80045f8:	683a      	ldr	r2, [r7, #0]
 80045fa:	429a      	cmp	r2, r3
 80045fc:	d90c      	bls.n	8004618 <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80045fe:	4b65      	ldr	r3, [pc, #404]	; (8004794 <HAL_RCC_ClockConfig+0x1b8>)
 8004600:	683a      	ldr	r2, [r7, #0]
 8004602:	b2d2      	uxtb	r2, r2
 8004604:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8004606:	4b63      	ldr	r3, [pc, #396]	; (8004794 <HAL_RCC_ClockConfig+0x1b8>)
 8004608:	681b      	ldr	r3, [r3, #0]
 800460a:	f003 030f 	and.w	r3, r3, #15
 800460e:	683a      	ldr	r2, [r7, #0]
 8004610:	429a      	cmp	r2, r3
 8004612:	d001      	beq.n	8004618 <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 8004614:	2301      	movs	r3, #1
 8004616:	e0b8      	b.n	800478a <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8004618:	687b      	ldr	r3, [r7, #4]
 800461a:	681b      	ldr	r3, [r3, #0]
 800461c:	f003 0302 	and.w	r3, r3, #2
 8004620:	2b00      	cmp	r3, #0
 8004622:	d020      	beq.n	8004666 <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8004624:	687b      	ldr	r3, [r7, #4]
 8004626:	681b      	ldr	r3, [r3, #0]
 8004628:	f003 0304 	and.w	r3, r3, #4
 800462c:	2b00      	cmp	r3, #0
 800462e:	d005      	beq.n	800463c <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8004630:	4b59      	ldr	r3, [pc, #356]	; (8004798 <HAL_RCC_ClockConfig+0x1bc>)
 8004632:	689b      	ldr	r3, [r3, #8]
 8004634:	4a58      	ldr	r2, [pc, #352]	; (8004798 <HAL_RCC_ClockConfig+0x1bc>)
 8004636:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 800463a:	6093      	str	r3, [r2, #8]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800463c:	687b      	ldr	r3, [r7, #4]
 800463e:	681b      	ldr	r3, [r3, #0]
 8004640:	f003 0308 	and.w	r3, r3, #8
 8004644:	2b00      	cmp	r3, #0
 8004646:	d005      	beq.n	8004654 <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8004648:	4b53      	ldr	r3, [pc, #332]	; (8004798 <HAL_RCC_ClockConfig+0x1bc>)
 800464a:	689b      	ldr	r3, [r3, #8]
 800464c:	4a52      	ldr	r2, [pc, #328]	; (8004798 <HAL_RCC_ClockConfig+0x1bc>)
 800464e:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 8004652:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8004654:	4b50      	ldr	r3, [pc, #320]	; (8004798 <HAL_RCC_ClockConfig+0x1bc>)
 8004656:	689b      	ldr	r3, [r3, #8]
 8004658:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 800465c:	687b      	ldr	r3, [r7, #4]
 800465e:	689b      	ldr	r3, [r3, #8]
 8004660:	494d      	ldr	r1, [pc, #308]	; (8004798 <HAL_RCC_ClockConfig+0x1bc>)
 8004662:	4313      	orrs	r3, r2
 8004664:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8004666:	687b      	ldr	r3, [r7, #4]
 8004668:	681b      	ldr	r3, [r3, #0]
 800466a:	f003 0301 	and.w	r3, r3, #1
 800466e:	2b00      	cmp	r3, #0
 8004670:	d044      	beq.n	80046fc <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8004672:	687b      	ldr	r3, [r7, #4]
 8004674:	685b      	ldr	r3, [r3, #4]
 8004676:	2b01      	cmp	r3, #1
 8004678:	d107      	bne.n	800468a <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800467a:	4b47      	ldr	r3, [pc, #284]	; (8004798 <HAL_RCC_ClockConfig+0x1bc>)
 800467c:	681b      	ldr	r3, [r3, #0]
 800467e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8004682:	2b00      	cmp	r3, #0
 8004684:	d119      	bne.n	80046ba <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8004686:	2301      	movs	r3, #1
 8004688:	e07f      	b.n	800478a <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 800468a:	687b      	ldr	r3, [r7, #4]
 800468c:	685b      	ldr	r3, [r3, #4]
 800468e:	2b02      	cmp	r3, #2
 8004690:	d003      	beq.n	800469a <HAL_RCC_ClockConfig+0xbe>
            (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 8004692:	687b      	ldr	r3, [r7, #4]
 8004694:	685b      	ldr	r3, [r3, #4]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8004696:	2b03      	cmp	r3, #3
 8004698:	d107      	bne.n	80046aa <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800469a:	4b3f      	ldr	r3, [pc, #252]	; (8004798 <HAL_RCC_ClockConfig+0x1bc>)
 800469c:	681b      	ldr	r3, [r3, #0]
 800469e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80046a2:	2b00      	cmp	r3, #0
 80046a4:	d109      	bne.n	80046ba <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80046a6:	2301      	movs	r3, #1
 80046a8:	e06f      	b.n	800478a <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80046aa:	4b3b      	ldr	r3, [pc, #236]	; (8004798 <HAL_RCC_ClockConfig+0x1bc>)
 80046ac:	681b      	ldr	r3, [r3, #0]
 80046ae:	f003 0302 	and.w	r3, r3, #2
 80046b2:	2b00      	cmp	r3, #0
 80046b4:	d101      	bne.n	80046ba <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80046b6:	2301      	movs	r3, #1
 80046b8:	e067      	b.n	800478a <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 80046ba:	4b37      	ldr	r3, [pc, #220]	; (8004798 <HAL_RCC_ClockConfig+0x1bc>)
 80046bc:	689b      	ldr	r3, [r3, #8]
 80046be:	f023 0203 	bic.w	r2, r3, #3
 80046c2:	687b      	ldr	r3, [r7, #4]
 80046c4:	685b      	ldr	r3, [r3, #4]
 80046c6:	4934      	ldr	r1, [pc, #208]	; (8004798 <HAL_RCC_ClockConfig+0x1bc>)
 80046c8:	4313      	orrs	r3, r2
 80046ca:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 80046cc:	f7fd fa00 	bl	8001ad0 <HAL_GetTick>
 80046d0:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80046d2:	e00a      	b.n	80046ea <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 80046d4:	f7fd f9fc 	bl	8001ad0 <HAL_GetTick>
 80046d8:	4602      	mov	r2, r0
 80046da:	68fb      	ldr	r3, [r7, #12]
 80046dc:	1ad3      	subs	r3, r2, r3
 80046de:	f241 3288 	movw	r2, #5000	; 0x1388
 80046e2:	4293      	cmp	r3, r2
 80046e4:	d901      	bls.n	80046ea <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 80046e6:	2303      	movs	r3, #3
 80046e8:	e04f      	b.n	800478a <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80046ea:	4b2b      	ldr	r3, [pc, #172]	; (8004798 <HAL_RCC_ClockConfig+0x1bc>)
 80046ec:	689b      	ldr	r3, [r3, #8]
 80046ee:	f003 020c 	and.w	r2, r3, #12
 80046f2:	687b      	ldr	r3, [r7, #4]
 80046f4:	685b      	ldr	r3, [r3, #4]
 80046f6:	009b      	lsls	r3, r3, #2
 80046f8:	429a      	cmp	r2, r3
 80046fa:	d1eb      	bne.n	80046d4 <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 80046fc:	4b25      	ldr	r3, [pc, #148]	; (8004794 <HAL_RCC_ClockConfig+0x1b8>)
 80046fe:	681b      	ldr	r3, [r3, #0]
 8004700:	f003 030f 	and.w	r3, r3, #15
 8004704:	683a      	ldr	r2, [r7, #0]
 8004706:	429a      	cmp	r2, r3
 8004708:	d20c      	bcs.n	8004724 <HAL_RCC_ClockConfig+0x148>
  {
     /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800470a:	4b22      	ldr	r3, [pc, #136]	; (8004794 <HAL_RCC_ClockConfig+0x1b8>)
 800470c:	683a      	ldr	r2, [r7, #0]
 800470e:	b2d2      	uxtb	r2, r2
 8004710:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8004712:	4b20      	ldr	r3, [pc, #128]	; (8004794 <HAL_RCC_ClockConfig+0x1b8>)
 8004714:	681b      	ldr	r3, [r3, #0]
 8004716:	f003 030f 	and.w	r3, r3, #15
 800471a:	683a      	ldr	r2, [r7, #0]
 800471c:	429a      	cmp	r2, r3
 800471e:	d001      	beq.n	8004724 <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 8004720:	2301      	movs	r3, #1
 8004722:	e032      	b.n	800478a <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8004724:	687b      	ldr	r3, [r7, #4]
 8004726:	681b      	ldr	r3, [r3, #0]
 8004728:	f003 0304 	and.w	r3, r3, #4
 800472c:	2b00      	cmp	r3, #0
 800472e:	d008      	beq.n	8004742 <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8004730:	4b19      	ldr	r3, [pc, #100]	; (8004798 <HAL_RCC_ClockConfig+0x1bc>)
 8004732:	689b      	ldr	r3, [r3, #8]
 8004734:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 8004738:	687b      	ldr	r3, [r7, #4]
 800473a:	68db      	ldr	r3, [r3, #12]
 800473c:	4916      	ldr	r1, [pc, #88]	; (8004798 <HAL_RCC_ClockConfig+0x1bc>)
 800473e:	4313      	orrs	r3, r2
 8004740:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8004742:	687b      	ldr	r3, [r7, #4]
 8004744:	681b      	ldr	r3, [r3, #0]
 8004746:	f003 0308 	and.w	r3, r3, #8
 800474a:	2b00      	cmp	r3, #0
 800474c:	d009      	beq.n	8004762 <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 800474e:	4b12      	ldr	r3, [pc, #72]	; (8004798 <HAL_RCC_ClockConfig+0x1bc>)
 8004750:	689b      	ldr	r3, [r3, #8]
 8004752:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 8004756:	687b      	ldr	r3, [r7, #4]
 8004758:	691b      	ldr	r3, [r3, #16]
 800475a:	00db      	lsls	r3, r3, #3
 800475c:	490e      	ldr	r1, [pc, #56]	; (8004798 <HAL_RCC_ClockConfig+0x1bc>)
 800475e:	4313      	orrs	r3, r2
 8004760:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 8004762:	f000 f821 	bl	80047a8 <HAL_RCC_GetSysClockFreq>
 8004766:	4602      	mov	r2, r0
 8004768:	4b0b      	ldr	r3, [pc, #44]	; (8004798 <HAL_RCC_ClockConfig+0x1bc>)
 800476a:	689b      	ldr	r3, [r3, #8]
 800476c:	091b      	lsrs	r3, r3, #4
 800476e:	f003 030f 	and.w	r3, r3, #15
 8004772:	490a      	ldr	r1, [pc, #40]	; (800479c <HAL_RCC_ClockConfig+0x1c0>)
 8004774:	5ccb      	ldrb	r3, [r1, r3]
 8004776:	fa22 f303 	lsr.w	r3, r2, r3
 800477a:	4a09      	ldr	r2, [pc, #36]	; (80047a0 <HAL_RCC_ClockConfig+0x1c4>)
 800477c:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick (uwTickPrio);
 800477e:	4b09      	ldr	r3, [pc, #36]	; (80047a4 <HAL_RCC_ClockConfig+0x1c8>)
 8004780:	681b      	ldr	r3, [r3, #0]
 8004782:	4618      	mov	r0, r3
 8004784:	f7fc fe4c 	bl	8001420 <HAL_InitTick>

  return HAL_OK;
 8004788:	2300      	movs	r3, #0
}
 800478a:	4618      	mov	r0, r3
 800478c:	3710      	adds	r7, #16
 800478e:	46bd      	mov	sp, r7
 8004790:	bd80      	pop	{r7, pc}
 8004792:	bf00      	nop
 8004794:	40023c00 	.word	0x40023c00
 8004798:	40023800 	.word	0x40023800
 800479c:	0800aea4 	.word	0x0800aea4
 80047a0:	20000000 	.word	0x20000000
 80047a4:	20000004 	.word	0x20000004

080047a8 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 80047a8:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 80047ac:	b094      	sub	sp, #80	; 0x50
 80047ae:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U, pllvco = 0U, pllp = 0U;
 80047b0:	2300      	movs	r3, #0
 80047b2:	647b      	str	r3, [r7, #68]	; 0x44
 80047b4:	2300      	movs	r3, #0
 80047b6:	64fb      	str	r3, [r7, #76]	; 0x4c
 80047b8:	2300      	movs	r3, #0
 80047ba:	643b      	str	r3, [r7, #64]	; 0x40
  uint32_t sysclockfreq = 0U;
 80047bc:	2300      	movs	r3, #0
 80047be:	64bb      	str	r3, [r7, #72]	; 0x48

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 80047c0:	4b79      	ldr	r3, [pc, #484]	; (80049a8 <HAL_RCC_GetSysClockFreq+0x200>)
 80047c2:	689b      	ldr	r3, [r3, #8]
 80047c4:	f003 030c 	and.w	r3, r3, #12
 80047c8:	2b08      	cmp	r3, #8
 80047ca:	d00d      	beq.n	80047e8 <HAL_RCC_GetSysClockFreq+0x40>
 80047cc:	2b08      	cmp	r3, #8
 80047ce:	f200 80e1 	bhi.w	8004994 <HAL_RCC_GetSysClockFreq+0x1ec>
 80047d2:	2b00      	cmp	r3, #0
 80047d4:	d002      	beq.n	80047dc <HAL_RCC_GetSysClockFreq+0x34>
 80047d6:	2b04      	cmp	r3, #4
 80047d8:	d003      	beq.n	80047e2 <HAL_RCC_GetSysClockFreq+0x3a>
 80047da:	e0db      	b.n	8004994 <HAL_RCC_GetSysClockFreq+0x1ec>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 80047dc:	4b73      	ldr	r3, [pc, #460]	; (80049ac <HAL_RCC_GetSysClockFreq+0x204>)
 80047de:	64bb      	str	r3, [r7, #72]	; 0x48
       break;
 80047e0:	e0db      	b.n	800499a <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 80047e2:	4b73      	ldr	r3, [pc, #460]	; (80049b0 <HAL_RCC_GetSysClockFreq+0x208>)
 80047e4:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 80047e6:	e0d8      	b.n	800499a <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 80047e8:	4b6f      	ldr	r3, [pc, #444]	; (80049a8 <HAL_RCC_GetSysClockFreq+0x200>)
 80047ea:	685b      	ldr	r3, [r3, #4]
 80047ec:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 80047f0:	647b      	str	r3, [r7, #68]	; 0x44
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 80047f2:	4b6d      	ldr	r3, [pc, #436]	; (80049a8 <HAL_RCC_GetSysClockFreq+0x200>)
 80047f4:	685b      	ldr	r3, [r3, #4]
 80047f6:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80047fa:	2b00      	cmp	r3, #0
 80047fc:	d063      	beq.n	80048c6 <HAL_RCC_GetSysClockFreq+0x11e>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 80047fe:	4b6a      	ldr	r3, [pc, #424]	; (80049a8 <HAL_RCC_GetSysClockFreq+0x200>)
 8004800:	685b      	ldr	r3, [r3, #4]
 8004802:	099b      	lsrs	r3, r3, #6
 8004804:	2200      	movs	r2, #0
 8004806:	63bb      	str	r3, [r7, #56]	; 0x38
 8004808:	63fa      	str	r2, [r7, #60]	; 0x3c
 800480a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800480c:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8004810:	633b      	str	r3, [r7, #48]	; 0x30
 8004812:	2300      	movs	r3, #0
 8004814:	637b      	str	r3, [r7, #52]	; 0x34
 8004816:	e9d7 450c 	ldrd	r4, r5, [r7, #48]	; 0x30
 800481a:	4622      	mov	r2, r4
 800481c:	462b      	mov	r3, r5
 800481e:	f04f 0000 	mov.w	r0, #0
 8004822:	f04f 0100 	mov.w	r1, #0
 8004826:	0159      	lsls	r1, r3, #5
 8004828:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 800482c:	0150      	lsls	r0, r2, #5
 800482e:	4602      	mov	r2, r0
 8004830:	460b      	mov	r3, r1
 8004832:	4621      	mov	r1, r4
 8004834:	1a51      	subs	r1, r2, r1
 8004836:	6139      	str	r1, [r7, #16]
 8004838:	4629      	mov	r1, r5
 800483a:	eb63 0301 	sbc.w	r3, r3, r1
 800483e:	617b      	str	r3, [r7, #20]
 8004840:	f04f 0200 	mov.w	r2, #0
 8004844:	f04f 0300 	mov.w	r3, #0
 8004848:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 800484c:	4659      	mov	r1, fp
 800484e:	018b      	lsls	r3, r1, #6
 8004850:	4651      	mov	r1, sl
 8004852:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 8004856:	4651      	mov	r1, sl
 8004858:	018a      	lsls	r2, r1, #6
 800485a:	4651      	mov	r1, sl
 800485c:	ebb2 0801 	subs.w	r8, r2, r1
 8004860:	4659      	mov	r1, fp
 8004862:	eb63 0901 	sbc.w	r9, r3, r1
 8004866:	f04f 0200 	mov.w	r2, #0
 800486a:	f04f 0300 	mov.w	r3, #0
 800486e:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 8004872:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 8004876:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 800487a:	4690      	mov	r8, r2
 800487c:	4699      	mov	r9, r3
 800487e:	4623      	mov	r3, r4
 8004880:	eb18 0303 	adds.w	r3, r8, r3
 8004884:	60bb      	str	r3, [r7, #8]
 8004886:	462b      	mov	r3, r5
 8004888:	eb49 0303 	adc.w	r3, r9, r3
 800488c:	60fb      	str	r3, [r7, #12]
 800488e:	f04f 0200 	mov.w	r2, #0
 8004892:	f04f 0300 	mov.w	r3, #0
 8004896:	e9d7 4502 	ldrd	r4, r5, [r7, #8]
 800489a:	4629      	mov	r1, r5
 800489c:	024b      	lsls	r3, r1, #9
 800489e:	4621      	mov	r1, r4
 80048a0:	ea43 53d1 	orr.w	r3, r3, r1, lsr #23
 80048a4:	4621      	mov	r1, r4
 80048a6:	024a      	lsls	r2, r1, #9
 80048a8:	4610      	mov	r0, r2
 80048aa:	4619      	mov	r1, r3
 80048ac:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80048ae:	2200      	movs	r2, #0
 80048b0:	62bb      	str	r3, [r7, #40]	; 0x28
 80048b2:	62fa      	str	r2, [r7, #44]	; 0x2c
 80048b4:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 80048b8:	f7fb fcea 	bl	8000290 <__aeabi_uldivmod>
 80048bc:	4602      	mov	r2, r0
 80048be:	460b      	mov	r3, r1
 80048c0:	4613      	mov	r3, r2
 80048c2:	64fb      	str	r3, [r7, #76]	; 0x4c
 80048c4:	e058      	b.n	8004978 <HAL_RCC_GetSysClockFreq+0x1d0>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 80048c6:	4b38      	ldr	r3, [pc, #224]	; (80049a8 <HAL_RCC_GetSysClockFreq+0x200>)
 80048c8:	685b      	ldr	r3, [r3, #4]
 80048ca:	099b      	lsrs	r3, r3, #6
 80048cc:	2200      	movs	r2, #0
 80048ce:	4618      	mov	r0, r3
 80048d0:	4611      	mov	r1, r2
 80048d2:	f3c0 0308 	ubfx	r3, r0, #0, #9
 80048d6:	623b      	str	r3, [r7, #32]
 80048d8:	2300      	movs	r3, #0
 80048da:	627b      	str	r3, [r7, #36]	; 0x24
 80048dc:	e9d7 8908 	ldrd	r8, r9, [r7, #32]
 80048e0:	4642      	mov	r2, r8
 80048e2:	464b      	mov	r3, r9
 80048e4:	f04f 0000 	mov.w	r0, #0
 80048e8:	f04f 0100 	mov.w	r1, #0
 80048ec:	0159      	lsls	r1, r3, #5
 80048ee:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 80048f2:	0150      	lsls	r0, r2, #5
 80048f4:	4602      	mov	r2, r0
 80048f6:	460b      	mov	r3, r1
 80048f8:	4641      	mov	r1, r8
 80048fa:	ebb2 0a01 	subs.w	sl, r2, r1
 80048fe:	4649      	mov	r1, r9
 8004900:	eb63 0b01 	sbc.w	fp, r3, r1
 8004904:	f04f 0200 	mov.w	r2, #0
 8004908:	f04f 0300 	mov.w	r3, #0
 800490c:	ea4f 138b 	mov.w	r3, fp, lsl #6
 8004910:	ea43 639a 	orr.w	r3, r3, sl, lsr #26
 8004914:	ea4f 128a 	mov.w	r2, sl, lsl #6
 8004918:	ebb2 040a 	subs.w	r4, r2, sl
 800491c:	eb63 050b 	sbc.w	r5, r3, fp
 8004920:	f04f 0200 	mov.w	r2, #0
 8004924:	f04f 0300 	mov.w	r3, #0
 8004928:	00eb      	lsls	r3, r5, #3
 800492a:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 800492e:	00e2      	lsls	r2, r4, #3
 8004930:	4614      	mov	r4, r2
 8004932:	461d      	mov	r5, r3
 8004934:	4643      	mov	r3, r8
 8004936:	18e3      	adds	r3, r4, r3
 8004938:	603b      	str	r3, [r7, #0]
 800493a:	464b      	mov	r3, r9
 800493c:	eb45 0303 	adc.w	r3, r5, r3
 8004940:	607b      	str	r3, [r7, #4]
 8004942:	f04f 0200 	mov.w	r2, #0
 8004946:	f04f 0300 	mov.w	r3, #0
 800494a:	e9d7 4500 	ldrd	r4, r5, [r7]
 800494e:	4629      	mov	r1, r5
 8004950:	028b      	lsls	r3, r1, #10
 8004952:	4621      	mov	r1, r4
 8004954:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 8004958:	4621      	mov	r1, r4
 800495a:	028a      	lsls	r2, r1, #10
 800495c:	4610      	mov	r0, r2
 800495e:	4619      	mov	r1, r3
 8004960:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8004962:	2200      	movs	r2, #0
 8004964:	61bb      	str	r3, [r7, #24]
 8004966:	61fa      	str	r2, [r7, #28]
 8004968:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 800496c:	f7fb fc90 	bl	8000290 <__aeabi_uldivmod>
 8004970:	4602      	mov	r2, r0
 8004972:	460b      	mov	r3, r1
 8004974:	4613      	mov	r3, r2
 8004976:	64fb      	str	r3, [r7, #76]	; 0x4c
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 8004978:	4b0b      	ldr	r3, [pc, #44]	; (80049a8 <HAL_RCC_GetSysClockFreq+0x200>)
 800497a:	685b      	ldr	r3, [r3, #4]
 800497c:	0c1b      	lsrs	r3, r3, #16
 800497e:	f003 0303 	and.w	r3, r3, #3
 8004982:	3301      	adds	r3, #1
 8004984:	005b      	lsls	r3, r3, #1
 8004986:	643b      	str	r3, [r7, #64]	; 0x40

      sysclockfreq = pllvco/pllp;
 8004988:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 800498a:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800498c:	fbb2 f3f3 	udiv	r3, r2, r3
 8004990:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 8004992:	e002      	b.n	800499a <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 8004994:	4b05      	ldr	r3, [pc, #20]	; (80049ac <HAL_RCC_GetSysClockFreq+0x204>)
 8004996:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 8004998:	bf00      	nop
    }
  }
  return sysclockfreq;
 800499a:	6cbb      	ldr	r3, [r7, #72]	; 0x48
}
 800499c:	4618      	mov	r0, r3
 800499e:	3750      	adds	r7, #80	; 0x50
 80049a0:	46bd      	mov	sp, r7
 80049a2:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 80049a6:	bf00      	nop
 80049a8:	40023800 	.word	0x40023800
 80049ac:	00f42400 	.word	0x00f42400
 80049b0:	007a1200 	.word	0x007a1200

080049b4 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 80049b4:	b480      	push	{r7}
 80049b6:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 80049b8:	4b03      	ldr	r3, [pc, #12]	; (80049c8 <HAL_RCC_GetHCLKFreq+0x14>)
 80049ba:	681b      	ldr	r3, [r3, #0]
}
 80049bc:	4618      	mov	r0, r3
 80049be:	46bd      	mov	sp, r7
 80049c0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80049c4:	4770      	bx	lr
 80049c6:	bf00      	nop
 80049c8:	20000000 	.word	0x20000000

080049cc <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 80049cc:	b580      	push	{r7, lr}
 80049ce:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1)>> RCC_CFGR_PPRE1_Pos]);
 80049d0:	f7ff fff0 	bl	80049b4 <HAL_RCC_GetHCLKFreq>
 80049d4:	4602      	mov	r2, r0
 80049d6:	4b05      	ldr	r3, [pc, #20]	; (80049ec <HAL_RCC_GetPCLK1Freq+0x20>)
 80049d8:	689b      	ldr	r3, [r3, #8]
 80049da:	0a9b      	lsrs	r3, r3, #10
 80049dc:	f003 0307 	and.w	r3, r3, #7
 80049e0:	4903      	ldr	r1, [pc, #12]	; (80049f0 <HAL_RCC_GetPCLK1Freq+0x24>)
 80049e2:	5ccb      	ldrb	r3, [r1, r3]
 80049e4:	fa22 f303 	lsr.w	r3, r2, r3
}
 80049e8:	4618      	mov	r0, r3
 80049ea:	bd80      	pop	{r7, pc}
 80049ec:	40023800 	.word	0x40023800
 80049f0:	0800aeb4 	.word	0x0800aeb4

080049f4 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 80049f4:	b580      	push	{r7, lr}
 80049f6:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2)>> RCC_CFGR_PPRE2_Pos]);
 80049f8:	f7ff ffdc 	bl	80049b4 <HAL_RCC_GetHCLKFreq>
 80049fc:	4602      	mov	r2, r0
 80049fe:	4b05      	ldr	r3, [pc, #20]	; (8004a14 <HAL_RCC_GetPCLK2Freq+0x20>)
 8004a00:	689b      	ldr	r3, [r3, #8]
 8004a02:	0b5b      	lsrs	r3, r3, #13
 8004a04:	f003 0307 	and.w	r3, r3, #7
 8004a08:	4903      	ldr	r1, [pc, #12]	; (8004a18 <HAL_RCC_GetPCLK2Freq+0x24>)
 8004a0a:	5ccb      	ldrb	r3, [r1, r3]
 8004a0c:	fa22 f303 	lsr.w	r3, r2, r3
}
 8004a10:	4618      	mov	r0, r3
 8004a12:	bd80      	pop	{r7, pc}
 8004a14:	40023800 	.word	0x40023800
 8004a18:	0800aeb4 	.word	0x0800aeb4

08004a1c <HAL_RCC_GetClockConfig>:
  * will be configured.
  * @param  pFLatency Pointer on the Flash Latency.
  * @retval None
  */
void HAL_RCC_GetClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t *pFLatency)
{
 8004a1c:	b480      	push	{r7}
 8004a1e:	b083      	sub	sp, #12
 8004a20:	af00      	add	r7, sp, #0
 8004a22:	6078      	str	r0, [r7, #4]
 8004a24:	6039      	str	r1, [r7, #0]
  /* Set all possible values for the Clock type parameter --------------------*/
  RCC_ClkInitStruct->ClockType = RCC_CLOCKTYPE_SYSCLK | RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_PCLK1 | RCC_CLOCKTYPE_PCLK2;
 8004a26:	687b      	ldr	r3, [r7, #4]
 8004a28:	220f      	movs	r2, #15
 8004a2a:	601a      	str	r2, [r3, #0]

  /* Get the SYSCLK configuration --------------------------------------------*/
  RCC_ClkInitStruct->SYSCLKSource = (uint32_t)(RCC->CFGR & RCC_CFGR_SW);
 8004a2c:	4b12      	ldr	r3, [pc, #72]	; (8004a78 <HAL_RCC_GetClockConfig+0x5c>)
 8004a2e:	689b      	ldr	r3, [r3, #8]
 8004a30:	f003 0203 	and.w	r2, r3, #3
 8004a34:	687b      	ldr	r3, [r7, #4]
 8004a36:	605a      	str	r2, [r3, #4]

  /* Get the HCLK configuration ----------------------------------------------*/
  RCC_ClkInitStruct->AHBCLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_HPRE);
 8004a38:	4b0f      	ldr	r3, [pc, #60]	; (8004a78 <HAL_RCC_GetClockConfig+0x5c>)
 8004a3a:	689b      	ldr	r3, [r3, #8]
 8004a3c:	f003 02f0 	and.w	r2, r3, #240	; 0xf0
 8004a40:	687b      	ldr	r3, [r7, #4]
 8004a42:	609a      	str	r2, [r3, #8]

  /* Get the APB1 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB1CLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_PPRE1);
 8004a44:	4b0c      	ldr	r3, [pc, #48]	; (8004a78 <HAL_RCC_GetClockConfig+0x5c>)
 8004a46:	689b      	ldr	r3, [r3, #8]
 8004a48:	f403 52e0 	and.w	r2, r3, #7168	; 0x1c00
 8004a4c:	687b      	ldr	r3, [r7, #4]
 8004a4e:	60da      	str	r2, [r3, #12]

  /* Get the APB2 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB2CLKDivider = (uint32_t)((RCC->CFGR & RCC_CFGR_PPRE2) >> 3U);
 8004a50:	4b09      	ldr	r3, [pc, #36]	; (8004a78 <HAL_RCC_GetClockConfig+0x5c>)
 8004a52:	689b      	ldr	r3, [r3, #8]
 8004a54:	08db      	lsrs	r3, r3, #3
 8004a56:	f403 52e0 	and.w	r2, r3, #7168	; 0x1c00
 8004a5a:	687b      	ldr	r3, [r7, #4]
 8004a5c:	611a      	str	r2, [r3, #16]

  /* Get the Flash Wait State (Latency) configuration ------------------------*/
  *pFLatency = (uint32_t)(FLASH->ACR & FLASH_ACR_LATENCY);
 8004a5e:	4b07      	ldr	r3, [pc, #28]	; (8004a7c <HAL_RCC_GetClockConfig+0x60>)
 8004a60:	681b      	ldr	r3, [r3, #0]
 8004a62:	f003 020f 	and.w	r2, r3, #15
 8004a66:	683b      	ldr	r3, [r7, #0]
 8004a68:	601a      	str	r2, [r3, #0]
}
 8004a6a:	bf00      	nop
 8004a6c:	370c      	adds	r7, #12
 8004a6e:	46bd      	mov	sp, r7
 8004a70:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004a74:	4770      	bx	lr
 8004a76:	bf00      	nop
 8004a78:	40023800 	.word	0x40023800
 8004a7c:	40023c00 	.word	0x40023c00

08004a80 <HAL_RCCEx_PeriphCLKConfig>:
  *         the backup registers) and RCC_BDCR register are set to their reset values.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8004a80:	b580      	push	{r7, lr}
 8004a82:	b086      	sub	sp, #24
 8004a84:	af00      	add	r7, sp, #0
 8004a86:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 8004a88:	2300      	movs	r3, #0
 8004a8a:	617b      	str	r3, [r7, #20]
  uint32_t tmpreg1 = 0U;
 8004a8c:	2300      	movs	r3, #0
 8004a8e:	613b      	str	r3, [r7, #16]

  /*----------------------- SAI/I2S Configuration (PLLI2S) -------------------*/
  /*----------------------- Common configuration SAI/I2S ---------------------*/
  /* In Case of SAI or I2S Clock Configuration through PLLI2S, PLLI2SN division
     factor is common parameters for both peripherals */
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == RCC_PERIPHCLK_I2S) ||
 8004a90:	687b      	ldr	r3, [r7, #4]
 8004a92:	681b      	ldr	r3, [r3, #0]
 8004a94:	f003 0301 	and.w	r3, r3, #1
 8004a98:	2b00      	cmp	r3, #0
 8004a9a:	d10b      	bne.n	8004ab4 <HAL_RCCEx_PeriphCLKConfig+0x34>
     (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI_PLLI2S) == RCC_PERIPHCLK_SAI_PLLI2S) ||
 8004a9c:	687b      	ldr	r3, [r7, #4]
 8004a9e:	681b      	ldr	r3, [r3, #0]
 8004aa0:	f003 0302 	and.w	r3, r3, #2
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == RCC_PERIPHCLK_I2S) ||
 8004aa4:	2b00      	cmp	r3, #0
 8004aa6:	d105      	bne.n	8004ab4 <HAL_RCCEx_PeriphCLKConfig+0x34>
     (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLLI2S) == RCC_PERIPHCLK_PLLI2S))
 8004aa8:	687b      	ldr	r3, [r7, #4]
 8004aaa:	681b      	ldr	r3, [r3, #0]
 8004aac:	f003 0340 	and.w	r3, r3, #64	; 0x40
     (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI_PLLI2S) == RCC_PERIPHCLK_SAI_PLLI2S) ||
 8004ab0:	2b00      	cmp	r3, #0
 8004ab2:	d075      	beq.n	8004ba0 <HAL_RCCEx_PeriphCLKConfig+0x120>
  {
    /* check for Parameters */
    assert_param(IS_RCC_PLLI2SN_VALUE(PeriphClkInit->PLLI2S.PLLI2SN));

    /* Disable the PLLI2S */
    __HAL_RCC_PLLI2S_DISABLE();
 8004ab4:	4b91      	ldr	r3, [pc, #580]	; (8004cfc <HAL_RCCEx_PeriphCLKConfig+0x27c>)
 8004ab6:	2200      	movs	r2, #0
 8004ab8:	601a      	str	r2, [r3, #0]
    /* Get tick */
    tickstart = HAL_GetTick();
 8004aba:	f7fd f809 	bl	8001ad0 <HAL_GetTick>
 8004abe:	6178      	str	r0, [r7, #20]
    /* Wait till PLLI2S is disabled */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  != RESET)
 8004ac0:	e008      	b.n	8004ad4 <HAL_RCCEx_PeriphCLKConfig+0x54>
    {
      if((HAL_GetTick() - tickstart ) > PLLI2S_TIMEOUT_VALUE)
 8004ac2:	f7fd f805 	bl	8001ad0 <HAL_GetTick>
 8004ac6:	4602      	mov	r2, r0
 8004ac8:	697b      	ldr	r3, [r7, #20]
 8004aca:	1ad3      	subs	r3, r2, r3
 8004acc:	2b02      	cmp	r3, #2
 8004ace:	d901      	bls.n	8004ad4 <HAL_RCCEx_PeriphCLKConfig+0x54>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 8004ad0:	2303      	movs	r3, #3
 8004ad2:	e189      	b.n	8004de8 <HAL_RCCEx_PeriphCLKConfig+0x368>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  != RESET)
 8004ad4:	4b8a      	ldr	r3, [pc, #552]	; (8004d00 <HAL_RCCEx_PeriphCLKConfig+0x280>)
 8004ad6:	681b      	ldr	r3, [r3, #0]
 8004ad8:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8004adc:	2b00      	cmp	r3, #0
 8004ade:	d1f0      	bne.n	8004ac2 <HAL_RCCEx_PeriphCLKConfig+0x42>
    }

    /*---------------------------- I2S configuration -------------------------*/
    /* In Case of I2S Clock Configuration through PLLI2S, PLLI2SR must be added
      only for I2S configuration */
    if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == (RCC_PERIPHCLK_I2S))
 8004ae0:	687b      	ldr	r3, [r7, #4]
 8004ae2:	681b      	ldr	r3, [r3, #0]
 8004ae4:	f003 0301 	and.w	r3, r3, #1
 8004ae8:	2b00      	cmp	r3, #0
 8004aea:	d009      	beq.n	8004b00 <HAL_RCCEx_PeriphCLKConfig+0x80>
      /* check for Parameters */
      assert_param(IS_RCC_PLLI2SR_VALUE(PeriphClkInit->PLLI2S.PLLI2SR));
      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO = f(VCO clock) = f(PLLI2S clock input) * (PLLI2SN/PLLM) */
      /* I2SCLK = f(PLLI2S clock output) = f(VCO clock) / PLLI2SR */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN , PeriphClkInit->PLLI2S.PLLI2SR);
 8004aec:	687b      	ldr	r3, [r7, #4]
 8004aee:	685b      	ldr	r3, [r3, #4]
 8004af0:	019a      	lsls	r2, r3, #6
 8004af2:	687b      	ldr	r3, [r7, #4]
 8004af4:	689b      	ldr	r3, [r3, #8]
 8004af6:	071b      	lsls	r3, r3, #28
 8004af8:	4981      	ldr	r1, [pc, #516]	; (8004d00 <HAL_RCCEx_PeriphCLKConfig+0x280>)
 8004afa:	4313      	orrs	r3, r2
 8004afc:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84
    }

    /*---------------------------- SAI configuration -------------------------*/
    /* In Case of SAI Clock Configuration through PLLI2S, PLLI2SQ and PLLI2S_DIVQ must
       be added only for SAI configuration */
    if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI_PLLI2S) == (RCC_PERIPHCLK_SAI_PLLI2S))
 8004b00:	687b      	ldr	r3, [r7, #4]
 8004b02:	681b      	ldr	r3, [r3, #0]
 8004b04:	f003 0302 	and.w	r3, r3, #2
 8004b08:	2b00      	cmp	r3, #0
 8004b0a:	d01f      	beq.n	8004b4c <HAL_RCCEx_PeriphCLKConfig+0xcc>
      /* Check the PLLI2S division factors */
      assert_param(IS_RCC_PLLI2SQ_VALUE(PeriphClkInit->PLLI2S.PLLI2SQ));
      assert_param(IS_RCC_PLLI2S_DIVQ_VALUE(PeriphClkInit->PLLI2SDivQ));

      /* Read PLLI2SR value from PLLI2SCFGR register (this value is not need for SAI configuration) */
      tmpreg1 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SR) >> RCC_PLLI2SCFGR_PLLI2SR_Pos);
 8004b0c:	4b7c      	ldr	r3, [pc, #496]	; (8004d00 <HAL_RCCEx_PeriphCLKConfig+0x280>)
 8004b0e:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8004b12:	0f1b      	lsrs	r3, r3, #28
 8004b14:	f003 0307 	and.w	r3, r3, #7
 8004b18:	613b      	str	r3, [r7, #16]
      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO Input  = PLL_SOURCE/PLLM */
      /* PLLI2S_VCO Output = PLLI2S_VCO Input * PLLI2SN */
      /* SAI_CLK(first level) = PLLI2S_VCO Output/PLLI2SQ */
      __HAL_RCC_PLLI2S_SAICLK_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN , PeriphClkInit->PLLI2S.PLLI2SQ , tmpreg1);
 8004b1a:	687b      	ldr	r3, [r7, #4]
 8004b1c:	685b      	ldr	r3, [r3, #4]
 8004b1e:	019a      	lsls	r2, r3, #6
 8004b20:	687b      	ldr	r3, [r7, #4]
 8004b22:	68db      	ldr	r3, [r3, #12]
 8004b24:	061b      	lsls	r3, r3, #24
 8004b26:	431a      	orrs	r2, r3
 8004b28:	693b      	ldr	r3, [r7, #16]
 8004b2a:	071b      	lsls	r3, r3, #28
 8004b2c:	4974      	ldr	r1, [pc, #464]	; (8004d00 <HAL_RCCEx_PeriphCLKConfig+0x280>)
 8004b2e:	4313      	orrs	r3, r2
 8004b30:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84
      /* SAI_CLK_x = SAI_CLK(first level)/PLLI2SDIVQ */
      __HAL_RCC_PLLI2S_PLLSAICLKDIVQ_CONFIG(PeriphClkInit->PLLI2SDivQ);
 8004b34:	4b72      	ldr	r3, [pc, #456]	; (8004d00 <HAL_RCCEx_PeriphCLKConfig+0x280>)
 8004b36:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8004b3a:	f023 021f 	bic.w	r2, r3, #31
 8004b3e:	687b      	ldr	r3, [r7, #4]
 8004b40:	69db      	ldr	r3, [r3, #28]
 8004b42:	3b01      	subs	r3, #1
 8004b44:	496e      	ldr	r1, [pc, #440]	; (8004d00 <HAL_RCCEx_PeriphCLKConfig+0x280>)
 8004b46:	4313      	orrs	r3, r2
 8004b48:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
    }

    /*----------------- In Case of PLLI2S is just selected  -----------------*/
    if((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_PLLI2S) == RCC_PERIPHCLK_PLLI2S)
 8004b4c:	687b      	ldr	r3, [r7, #4]
 8004b4e:	681b      	ldr	r3, [r3, #0]
 8004b50:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004b54:	2b00      	cmp	r3, #0
 8004b56:	d00d      	beq.n	8004b74 <HAL_RCCEx_PeriphCLKConfig+0xf4>
      /* Check for Parameters */
      assert_param(IS_RCC_PLLI2SQ_VALUE(PeriphClkInit->PLLI2S.PLLI2SQ));
      assert_param(IS_RCC_PLLI2SR_VALUE(PeriphClkInit->PLLI2S.PLLI2SR));

      /* Configure the PLLI2S multiplication and division factors */
      __HAL_RCC_PLLI2S_SAICLK_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN, PeriphClkInit->PLLI2S.PLLI2SQ, PeriphClkInit->PLLI2S.PLLI2SR);
 8004b58:	687b      	ldr	r3, [r7, #4]
 8004b5a:	685b      	ldr	r3, [r3, #4]
 8004b5c:	019a      	lsls	r2, r3, #6
 8004b5e:	687b      	ldr	r3, [r7, #4]
 8004b60:	68db      	ldr	r3, [r3, #12]
 8004b62:	061b      	lsls	r3, r3, #24
 8004b64:	431a      	orrs	r2, r3
 8004b66:	687b      	ldr	r3, [r7, #4]
 8004b68:	689b      	ldr	r3, [r3, #8]
 8004b6a:	071b      	lsls	r3, r3, #28
 8004b6c:	4964      	ldr	r1, [pc, #400]	; (8004d00 <HAL_RCCEx_PeriphCLKConfig+0x280>)
 8004b6e:	4313      	orrs	r3, r2
 8004b70:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84
    }

    /* Enable the PLLI2S */
    __HAL_RCC_PLLI2S_ENABLE();
 8004b74:	4b61      	ldr	r3, [pc, #388]	; (8004cfc <HAL_RCCEx_PeriphCLKConfig+0x27c>)
 8004b76:	2201      	movs	r2, #1
 8004b78:	601a      	str	r2, [r3, #0]
    /* Get tick */
    tickstart = HAL_GetTick();
 8004b7a:	f7fc ffa9 	bl	8001ad0 <HAL_GetTick>
 8004b7e:	6178      	str	r0, [r7, #20]
    /* Wait till PLLI2S is ready */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
 8004b80:	e008      	b.n	8004b94 <HAL_RCCEx_PeriphCLKConfig+0x114>
    {
      if((HAL_GetTick() - tickstart ) > PLLI2S_TIMEOUT_VALUE)
 8004b82:	f7fc ffa5 	bl	8001ad0 <HAL_GetTick>
 8004b86:	4602      	mov	r2, r0
 8004b88:	697b      	ldr	r3, [r7, #20]
 8004b8a:	1ad3      	subs	r3, r2, r3
 8004b8c:	2b02      	cmp	r3, #2
 8004b8e:	d901      	bls.n	8004b94 <HAL_RCCEx_PeriphCLKConfig+0x114>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 8004b90:	2303      	movs	r3, #3
 8004b92:	e129      	b.n	8004de8 <HAL_RCCEx_PeriphCLKConfig+0x368>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
 8004b94:	4b5a      	ldr	r3, [pc, #360]	; (8004d00 <HAL_RCCEx_PeriphCLKConfig+0x280>)
 8004b96:	681b      	ldr	r3, [r3, #0]
 8004b98:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8004b9c:	2b00      	cmp	r3, #0
 8004b9e:	d0f0      	beq.n	8004b82 <HAL_RCCEx_PeriphCLKConfig+0x102>

  /*----------------------- SAI/LTDC Configuration (PLLSAI) ------------------*/
  /*----------------------- Common configuration SAI/LTDC --------------------*/
  /* In Case of SAI or LTDC Clock Configuration through PLLSAI, PLLSAIN division
     factor is common parameters for both peripherals */
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI_PLLSAI) == RCC_PERIPHCLK_SAI_PLLSAI) ||
 8004ba0:	687b      	ldr	r3, [r7, #4]
 8004ba2:	681b      	ldr	r3, [r3, #0]
 8004ba4:	f003 0304 	and.w	r3, r3, #4
 8004ba8:	2b00      	cmp	r3, #0
 8004baa:	d105      	bne.n	8004bb8 <HAL_RCCEx_PeriphCLKConfig+0x138>
     (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LTDC) == RCC_PERIPHCLK_LTDC))
 8004bac:	687b      	ldr	r3, [r7, #4]
 8004bae:	681b      	ldr	r3, [r3, #0]
 8004bb0:	f003 0308 	and.w	r3, r3, #8
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI_PLLSAI) == RCC_PERIPHCLK_SAI_PLLSAI) ||
 8004bb4:	2b00      	cmp	r3, #0
 8004bb6:	d079      	beq.n	8004cac <HAL_RCCEx_PeriphCLKConfig+0x22c>
  {
    /* Check the PLLSAI division factors */
    assert_param(IS_RCC_PLLSAIN_VALUE(PeriphClkInit->PLLSAI.PLLSAIN));

    /* Disable PLLSAI Clock */
    __HAL_RCC_PLLSAI_DISABLE();
 8004bb8:	4b52      	ldr	r3, [pc, #328]	; (8004d04 <HAL_RCCEx_PeriphCLKConfig+0x284>)
 8004bba:	2200      	movs	r2, #0
 8004bbc:	601a      	str	r2, [r3, #0]
    /* Get tick */
    tickstart = HAL_GetTick();
 8004bbe:	f7fc ff87 	bl	8001ad0 <HAL_GetTick>
 8004bc2:	6178      	str	r0, [r7, #20]
    /* Wait till PLLSAI is disabled */
    while(__HAL_RCC_PLLSAI_GET_FLAG() != RESET)
 8004bc4:	e008      	b.n	8004bd8 <HAL_RCCEx_PeriphCLKConfig+0x158>
    {
      if((HAL_GetTick() - tickstart ) > PLLSAI_TIMEOUT_VALUE)
 8004bc6:	f7fc ff83 	bl	8001ad0 <HAL_GetTick>
 8004bca:	4602      	mov	r2, r0
 8004bcc:	697b      	ldr	r3, [r7, #20]
 8004bce:	1ad3      	subs	r3, r2, r3
 8004bd0:	2b02      	cmp	r3, #2
 8004bd2:	d901      	bls.n	8004bd8 <HAL_RCCEx_PeriphCLKConfig+0x158>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 8004bd4:	2303      	movs	r3, #3
 8004bd6:	e107      	b.n	8004de8 <HAL_RCCEx_PeriphCLKConfig+0x368>
    while(__HAL_RCC_PLLSAI_GET_FLAG() != RESET)
 8004bd8:	4b49      	ldr	r3, [pc, #292]	; (8004d00 <HAL_RCCEx_PeriphCLKConfig+0x280>)
 8004bda:	681b      	ldr	r3, [r3, #0]
 8004bdc:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8004be0:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8004be4:	d0ef      	beq.n	8004bc6 <HAL_RCCEx_PeriphCLKConfig+0x146>
    }

    /*---------------------------- SAI configuration -------------------------*/
    /* In Case of SAI Clock Configuration through PLLSAI, PLLSAIQ and PLLSAI_DIVQ must
       be added only for SAI configuration */
    if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI_PLLSAI) == (RCC_PERIPHCLK_SAI_PLLSAI))
 8004be6:	687b      	ldr	r3, [r7, #4]
 8004be8:	681b      	ldr	r3, [r3, #0]
 8004bea:	f003 0304 	and.w	r3, r3, #4
 8004bee:	2b00      	cmp	r3, #0
 8004bf0:	d020      	beq.n	8004c34 <HAL_RCCEx_PeriphCLKConfig+0x1b4>
    {
      assert_param(IS_RCC_PLLSAIQ_VALUE(PeriphClkInit->PLLSAI.PLLSAIQ));
      assert_param(IS_RCC_PLLSAI_DIVQ_VALUE(PeriphClkInit->PLLSAIDivQ));

      /* Read PLLSAIR value from PLLSAICFGR register (this value is not need for SAI configuration) */
      tmpreg1 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIR) >> RCC_PLLSAICFGR_PLLSAIR_Pos);
 8004bf2:	4b43      	ldr	r3, [pc, #268]	; (8004d00 <HAL_RCCEx_PeriphCLKConfig+0x280>)
 8004bf4:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004bf8:	0f1b      	lsrs	r3, r3, #28
 8004bfa:	f003 0307 	and.w	r3, r3, #7
 8004bfe:	613b      	str	r3, [r7, #16]
      /* PLLSAI_VCO Input  = PLL_SOURCE/PLLM */
      /* PLLSAI_VCO Output = PLLSAI_VCO Input * PLLSAIN */
      /* SAI_CLK(first level) = PLLSAI_VCO Output/PLLSAIQ */
      __HAL_RCC_PLLSAI_CONFIG(PeriphClkInit->PLLSAI.PLLSAIN , PeriphClkInit->PLLSAI.PLLSAIQ, tmpreg1);
 8004c00:	687b      	ldr	r3, [r7, #4]
 8004c02:	691b      	ldr	r3, [r3, #16]
 8004c04:	019a      	lsls	r2, r3, #6
 8004c06:	687b      	ldr	r3, [r7, #4]
 8004c08:	695b      	ldr	r3, [r3, #20]
 8004c0a:	061b      	lsls	r3, r3, #24
 8004c0c:	431a      	orrs	r2, r3
 8004c0e:	693b      	ldr	r3, [r7, #16]
 8004c10:	071b      	lsls	r3, r3, #28
 8004c12:	493b      	ldr	r1, [pc, #236]	; (8004d00 <HAL_RCCEx_PeriphCLKConfig+0x280>)
 8004c14:	4313      	orrs	r3, r2
 8004c16:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
      /* SAI_CLK_x = SAI_CLK(first level)/PLLSAIDIVQ */
      __HAL_RCC_PLLSAI_PLLSAICLKDIVQ_CONFIG(PeriphClkInit->PLLSAIDivQ);
 8004c1a:	4b39      	ldr	r3, [pc, #228]	; (8004d00 <HAL_RCCEx_PeriphCLKConfig+0x280>)
 8004c1c:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8004c20:	f423 52f8 	bic.w	r2, r3, #7936	; 0x1f00
 8004c24:	687b      	ldr	r3, [r7, #4]
 8004c26:	6a1b      	ldr	r3, [r3, #32]
 8004c28:	3b01      	subs	r3, #1
 8004c2a:	021b      	lsls	r3, r3, #8
 8004c2c:	4934      	ldr	r1, [pc, #208]	; (8004d00 <HAL_RCCEx_PeriphCLKConfig+0x280>)
 8004c2e:	4313      	orrs	r3, r2
 8004c30:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
    }

    /*---------------------------- LTDC configuration ------------------------*/
    if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LTDC) == (RCC_PERIPHCLK_LTDC))
 8004c34:	687b      	ldr	r3, [r7, #4]
 8004c36:	681b      	ldr	r3, [r3, #0]
 8004c38:	f003 0308 	and.w	r3, r3, #8
 8004c3c:	2b00      	cmp	r3, #0
 8004c3e:	d01e      	beq.n	8004c7e <HAL_RCCEx_PeriphCLKConfig+0x1fe>
    {
      assert_param(IS_RCC_PLLSAIR_VALUE(PeriphClkInit->PLLSAI.PLLSAIR));
      assert_param(IS_RCC_PLLSAI_DIVR_VALUE(PeriphClkInit->PLLSAIDivR));

      /* Read PLLSAIR value from PLLSAICFGR register (this value is not need for SAI configuration) */
      tmpreg1 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIQ) >> RCC_PLLSAICFGR_PLLSAIQ_Pos);
 8004c40:	4b2f      	ldr	r3, [pc, #188]	; (8004d00 <HAL_RCCEx_PeriphCLKConfig+0x280>)
 8004c42:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004c46:	0e1b      	lsrs	r3, r3, #24
 8004c48:	f003 030f 	and.w	r3, r3, #15
 8004c4c:	613b      	str	r3, [r7, #16]
      /* PLLSAI_VCO Input  = PLL_SOURCE/PLLM */
      /* PLLSAI_VCO Output = PLLSAI_VCO Input * PLLSAIN */
      /* LTDC_CLK(first level) = PLLSAI_VCO Output/PLLSAIR */
      __HAL_RCC_PLLSAI_CONFIG(PeriphClkInit->PLLSAI.PLLSAIN , tmpreg1, PeriphClkInit->PLLSAI.PLLSAIR);
 8004c4e:	687b      	ldr	r3, [r7, #4]
 8004c50:	691b      	ldr	r3, [r3, #16]
 8004c52:	019a      	lsls	r2, r3, #6
 8004c54:	693b      	ldr	r3, [r7, #16]
 8004c56:	061b      	lsls	r3, r3, #24
 8004c58:	431a      	orrs	r2, r3
 8004c5a:	687b      	ldr	r3, [r7, #4]
 8004c5c:	699b      	ldr	r3, [r3, #24]
 8004c5e:	071b      	lsls	r3, r3, #28
 8004c60:	4927      	ldr	r1, [pc, #156]	; (8004d00 <HAL_RCCEx_PeriphCLKConfig+0x280>)
 8004c62:	4313      	orrs	r3, r2
 8004c64:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
      /* LTDC_CLK = LTDC_CLK(first level)/PLLSAIDIVR */
      __HAL_RCC_PLLSAI_PLLSAICLKDIVR_CONFIG(PeriphClkInit->PLLSAIDivR);
 8004c68:	4b25      	ldr	r3, [pc, #148]	; (8004d00 <HAL_RCCEx_PeriphCLKConfig+0x280>)
 8004c6a:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8004c6e:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 8004c72:	687b      	ldr	r3, [r7, #4]
 8004c74:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004c76:	4922      	ldr	r1, [pc, #136]	; (8004d00 <HAL_RCCEx_PeriphCLKConfig+0x280>)
 8004c78:	4313      	orrs	r3, r2
 8004c7a:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
    }
    /* Enable PLLSAI Clock */
    __HAL_RCC_PLLSAI_ENABLE();
 8004c7e:	4b21      	ldr	r3, [pc, #132]	; (8004d04 <HAL_RCCEx_PeriphCLKConfig+0x284>)
 8004c80:	2201      	movs	r2, #1
 8004c82:	601a      	str	r2, [r3, #0]
    /* Get tick */
    tickstart = HAL_GetTick();
 8004c84:	f7fc ff24 	bl	8001ad0 <HAL_GetTick>
 8004c88:	6178      	str	r0, [r7, #20]
    /* Wait till PLLSAI is ready */
    while(__HAL_RCC_PLLSAI_GET_FLAG() == RESET)
 8004c8a:	e008      	b.n	8004c9e <HAL_RCCEx_PeriphCLKConfig+0x21e>
    {
      if((HAL_GetTick() - tickstart ) > PLLSAI_TIMEOUT_VALUE)
 8004c8c:	f7fc ff20 	bl	8001ad0 <HAL_GetTick>
 8004c90:	4602      	mov	r2, r0
 8004c92:	697b      	ldr	r3, [r7, #20]
 8004c94:	1ad3      	subs	r3, r2, r3
 8004c96:	2b02      	cmp	r3, #2
 8004c98:	d901      	bls.n	8004c9e <HAL_RCCEx_PeriphCLKConfig+0x21e>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 8004c9a:	2303      	movs	r3, #3
 8004c9c:	e0a4      	b.n	8004de8 <HAL_RCCEx_PeriphCLKConfig+0x368>
    while(__HAL_RCC_PLLSAI_GET_FLAG() == RESET)
 8004c9e:	4b18      	ldr	r3, [pc, #96]	; (8004d00 <HAL_RCCEx_PeriphCLKConfig+0x280>)
 8004ca0:	681b      	ldr	r3, [r3, #0]
 8004ca2:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8004ca6:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8004caa:	d1ef      	bne.n	8004c8c <HAL_RCCEx_PeriphCLKConfig+0x20c>
    }
  }
  /*--------------------------------------------------------------------------*/

  /*---------------------------- RTC configuration ---------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == (RCC_PERIPHCLK_RTC))
 8004cac:	687b      	ldr	r3, [r7, #4]
 8004cae:	681b      	ldr	r3, [r3, #0]
 8004cb0:	f003 0320 	and.w	r3, r3, #32
 8004cb4:	2b00      	cmp	r3, #0
 8004cb6:	f000 808b 	beq.w	8004dd0 <HAL_RCCEx_PeriphCLKConfig+0x350>
  {
    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock*/
    __HAL_RCC_PWR_CLK_ENABLE();
 8004cba:	2300      	movs	r3, #0
 8004cbc:	60fb      	str	r3, [r7, #12]
 8004cbe:	4b10      	ldr	r3, [pc, #64]	; (8004d00 <HAL_RCCEx_PeriphCLKConfig+0x280>)
 8004cc0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004cc2:	4a0f      	ldr	r2, [pc, #60]	; (8004d00 <HAL_RCCEx_PeriphCLKConfig+0x280>)
 8004cc4:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8004cc8:	6413      	str	r3, [r2, #64]	; 0x40
 8004cca:	4b0d      	ldr	r3, [pc, #52]	; (8004d00 <HAL_RCCEx_PeriphCLKConfig+0x280>)
 8004ccc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004cce:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8004cd2:	60fb      	str	r3, [r7, #12]
 8004cd4:	68fb      	ldr	r3, [r7, #12]

    /* Enable write access to Backup domain */
    PWR->CR |= PWR_CR_DBP;
 8004cd6:	4b0c      	ldr	r3, [pc, #48]	; (8004d08 <HAL_RCCEx_PeriphCLKConfig+0x288>)
 8004cd8:	681b      	ldr	r3, [r3, #0]
 8004cda:	4a0b      	ldr	r2, [pc, #44]	; (8004d08 <HAL_RCCEx_PeriphCLKConfig+0x288>)
 8004cdc:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8004ce0:	6013      	str	r3, [r2, #0]

    /* Get tick */
    tickstart = HAL_GetTick();
 8004ce2:	f7fc fef5 	bl	8001ad0 <HAL_GetTick>
 8004ce6:	6178      	str	r0, [r7, #20]

    while((PWR->CR & PWR_CR_DBP) == RESET)
 8004ce8:	e010      	b.n	8004d0c <HAL_RCCEx_PeriphCLKConfig+0x28c>
    {
      if((HAL_GetTick() - tickstart ) > RCC_DBP_TIMEOUT_VALUE)
 8004cea:	f7fc fef1 	bl	8001ad0 <HAL_GetTick>
 8004cee:	4602      	mov	r2, r0
 8004cf0:	697b      	ldr	r3, [r7, #20]
 8004cf2:	1ad3      	subs	r3, r2, r3
 8004cf4:	2b02      	cmp	r3, #2
 8004cf6:	d909      	bls.n	8004d0c <HAL_RCCEx_PeriphCLKConfig+0x28c>
      {
        return HAL_TIMEOUT;
 8004cf8:	2303      	movs	r3, #3
 8004cfa:	e075      	b.n	8004de8 <HAL_RCCEx_PeriphCLKConfig+0x368>
 8004cfc:	42470068 	.word	0x42470068
 8004d00:	40023800 	.word	0x40023800
 8004d04:	42470070 	.word	0x42470070
 8004d08:	40007000 	.word	0x40007000
    while((PWR->CR & PWR_CR_DBP) == RESET)
 8004d0c:	4b38      	ldr	r3, [pc, #224]	; (8004df0 <HAL_RCCEx_PeriphCLKConfig+0x370>)
 8004d0e:	681b      	ldr	r3, [r3, #0]
 8004d10:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004d14:	2b00      	cmp	r3, #0
 8004d16:	d0e8      	beq.n	8004cea <HAL_RCCEx_PeriphCLKConfig+0x26a>
      }
    }
    /* Reset the Backup domain only if the RTC Clock source selection is modified from reset value */
    tmpreg1 = (RCC->BDCR & RCC_BDCR_RTCSEL);
 8004d18:	4b36      	ldr	r3, [pc, #216]	; (8004df4 <HAL_RCCEx_PeriphCLKConfig+0x374>)
 8004d1a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004d1c:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8004d20:	613b      	str	r3, [r7, #16]
    if((tmpreg1 != 0x00000000U) && ((tmpreg1) != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 8004d22:	693b      	ldr	r3, [r7, #16]
 8004d24:	2b00      	cmp	r3, #0
 8004d26:	d02f      	beq.n	8004d88 <HAL_RCCEx_PeriphCLKConfig+0x308>
 8004d28:	687b      	ldr	r3, [r7, #4]
 8004d2a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004d2c:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8004d30:	693a      	ldr	r2, [r7, #16]
 8004d32:	429a      	cmp	r2, r3
 8004d34:	d028      	beq.n	8004d88 <HAL_RCCEx_PeriphCLKConfig+0x308>
    {
      /* Store the content of BDCR register before the reset of Backup Domain */
      tmpreg1 = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 8004d36:	4b2f      	ldr	r3, [pc, #188]	; (8004df4 <HAL_RCCEx_PeriphCLKConfig+0x374>)
 8004d38:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004d3a:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8004d3e:	613b      	str	r3, [r7, #16]
      /* RTC Clock selection can be changed only if the Backup Domain is reset */
      __HAL_RCC_BACKUPRESET_FORCE();
 8004d40:	4b2d      	ldr	r3, [pc, #180]	; (8004df8 <HAL_RCCEx_PeriphCLKConfig+0x378>)
 8004d42:	2201      	movs	r2, #1
 8004d44:	601a      	str	r2, [r3, #0]
      __HAL_RCC_BACKUPRESET_RELEASE();
 8004d46:	4b2c      	ldr	r3, [pc, #176]	; (8004df8 <HAL_RCCEx_PeriphCLKConfig+0x378>)
 8004d48:	2200      	movs	r2, #0
 8004d4a:	601a      	str	r2, [r3, #0]
      /* Restore the Content of BDCR register */
      RCC->BDCR = tmpreg1;
 8004d4c:	4a29      	ldr	r2, [pc, #164]	; (8004df4 <HAL_RCCEx_PeriphCLKConfig+0x374>)
 8004d4e:	693b      	ldr	r3, [r7, #16]
 8004d50:	6713      	str	r3, [r2, #112]	; 0x70

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if(HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSEON))
 8004d52:	4b28      	ldr	r3, [pc, #160]	; (8004df4 <HAL_RCCEx_PeriphCLKConfig+0x374>)
 8004d54:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004d56:	f003 0301 	and.w	r3, r3, #1
 8004d5a:	2b01      	cmp	r3, #1
 8004d5c:	d114      	bne.n	8004d88 <HAL_RCCEx_PeriphCLKConfig+0x308>
      {
        /* Get tick */
        tickstart = HAL_GetTick();
 8004d5e:	f7fc feb7 	bl	8001ad0 <HAL_GetTick>
 8004d62:	6178      	str	r0, [r7, #20]

        /* Wait till LSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8004d64:	e00a      	b.n	8004d7c <HAL_RCCEx_PeriphCLKConfig+0x2fc>
        {
          if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8004d66:	f7fc feb3 	bl	8001ad0 <HAL_GetTick>
 8004d6a:	4602      	mov	r2, r0
 8004d6c:	697b      	ldr	r3, [r7, #20]
 8004d6e:	1ad3      	subs	r3, r2, r3
 8004d70:	f241 3288 	movw	r2, #5000	; 0x1388
 8004d74:	4293      	cmp	r3, r2
 8004d76:	d901      	bls.n	8004d7c <HAL_RCCEx_PeriphCLKConfig+0x2fc>
          {
            return HAL_TIMEOUT;
 8004d78:	2303      	movs	r3, #3
 8004d7a:	e035      	b.n	8004de8 <HAL_RCCEx_PeriphCLKConfig+0x368>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8004d7c:	4b1d      	ldr	r3, [pc, #116]	; (8004df4 <HAL_RCCEx_PeriphCLKConfig+0x374>)
 8004d7e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004d80:	f003 0302 	and.w	r3, r3, #2
 8004d84:	2b00      	cmp	r3, #0
 8004d86:	d0ee      	beq.n	8004d66 <HAL_RCCEx_PeriphCLKConfig+0x2e6>
          }
        }
      }
    }
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8004d88:	687b      	ldr	r3, [r7, #4]
 8004d8a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004d8c:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8004d90:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8004d94:	d10d      	bne.n	8004db2 <HAL_RCCEx_PeriphCLKConfig+0x332>
 8004d96:	4b17      	ldr	r3, [pc, #92]	; (8004df4 <HAL_RCCEx_PeriphCLKConfig+0x374>)
 8004d98:	689b      	ldr	r3, [r3, #8]
 8004d9a:	f423 12f8 	bic.w	r2, r3, #2031616	; 0x1f0000
 8004d9e:	687b      	ldr	r3, [r7, #4]
 8004da0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004da2:	f023 4370 	bic.w	r3, r3, #4026531840	; 0xf0000000
 8004da6:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8004daa:	4912      	ldr	r1, [pc, #72]	; (8004df4 <HAL_RCCEx_PeriphCLKConfig+0x374>)
 8004dac:	4313      	orrs	r3, r2
 8004dae:	608b      	str	r3, [r1, #8]
 8004db0:	e005      	b.n	8004dbe <HAL_RCCEx_PeriphCLKConfig+0x33e>
 8004db2:	4b10      	ldr	r3, [pc, #64]	; (8004df4 <HAL_RCCEx_PeriphCLKConfig+0x374>)
 8004db4:	689b      	ldr	r3, [r3, #8]
 8004db6:	4a0f      	ldr	r2, [pc, #60]	; (8004df4 <HAL_RCCEx_PeriphCLKConfig+0x374>)
 8004db8:	f423 13f8 	bic.w	r3, r3, #2031616	; 0x1f0000
 8004dbc:	6093      	str	r3, [r2, #8]
 8004dbe:	4b0d      	ldr	r3, [pc, #52]	; (8004df4 <HAL_RCCEx_PeriphCLKConfig+0x374>)
 8004dc0:	6f1a      	ldr	r2, [r3, #112]	; 0x70
 8004dc2:	687b      	ldr	r3, [r7, #4]
 8004dc4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004dc6:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8004dca:	490a      	ldr	r1, [pc, #40]	; (8004df4 <HAL_RCCEx_PeriphCLKConfig+0x374>)
 8004dcc:	4313      	orrs	r3, r2
 8004dce:	670b      	str	r3, [r1, #112]	; 0x70
  }
  /*--------------------------------------------------------------------------*/

  /*---------------------------- TIM configuration ---------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM) == (RCC_PERIPHCLK_TIM))
 8004dd0:	687b      	ldr	r3, [r7, #4]
 8004dd2:	681b      	ldr	r3, [r3, #0]
 8004dd4:	f003 0310 	and.w	r3, r3, #16
 8004dd8:	2b00      	cmp	r3, #0
 8004dda:	d004      	beq.n	8004de6 <HAL_RCCEx_PeriphCLKConfig+0x366>
  {
    __HAL_RCC_TIMCLKPRESCALER(PeriphClkInit->TIMPresSelection);
 8004ddc:	687b      	ldr	r3, [r7, #4]
 8004dde:	f893 202c 	ldrb.w	r2, [r3, #44]	; 0x2c
 8004de2:	4b06      	ldr	r3, [pc, #24]	; (8004dfc <HAL_RCCEx_PeriphCLKConfig+0x37c>)
 8004de4:	601a      	str	r2, [r3, #0]
  }
  return HAL_OK;
 8004de6:	2300      	movs	r3, #0
}
 8004de8:	4618      	mov	r0, r3
 8004dea:	3718      	adds	r7, #24
 8004dec:	46bd      	mov	sp, r7
 8004dee:	bd80      	pop	{r7, pc}
 8004df0:	40007000 	.word	0x40007000
 8004df4:	40023800 	.word	0x40023800
 8004df8:	42470e40 	.word	0x42470e40
 8004dfc:	424711e0 	.word	0x424711e0

08004e00 <HAL_SDRAM_Init>:
  *                the configuration information for SDRAM module.
  * @param  Timing Pointer to SDRAM control timing structure
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SDRAM_Init(SDRAM_HandleTypeDef *hsdram, FMC_SDRAM_TimingTypeDef *Timing)
{
 8004e00:	b580      	push	{r7, lr}
 8004e02:	b082      	sub	sp, #8
 8004e04:	af00      	add	r7, sp, #0
 8004e06:	6078      	str	r0, [r7, #4]
 8004e08:	6039      	str	r1, [r7, #0]
  /* Check the SDRAM handle parameter */
  if (hsdram == NULL)
 8004e0a:	687b      	ldr	r3, [r7, #4]
 8004e0c:	2b00      	cmp	r3, #0
 8004e0e:	d101      	bne.n	8004e14 <HAL_SDRAM_Init+0x14>
  {
    return HAL_ERROR;
 8004e10:	2301      	movs	r3, #1
 8004e12:	e025      	b.n	8004e60 <HAL_SDRAM_Init+0x60>
  }

  if (hsdram->State == HAL_SDRAM_STATE_RESET)
 8004e14:	687b      	ldr	r3, [r7, #4]
 8004e16:	f893 302c 	ldrb.w	r3, [r3, #44]	; 0x2c
 8004e1a:	b2db      	uxtb	r3, r3
 8004e1c:	2b00      	cmp	r3, #0
 8004e1e:	d106      	bne.n	8004e2e <HAL_SDRAM_Init+0x2e>
  {
    /* Allocate lock resource and initialize it */
    hsdram->Lock = HAL_UNLOCKED;
 8004e20:	687b      	ldr	r3, [r7, #4]
 8004e22:	2200      	movs	r2, #0
 8004e24:	f883 202d 	strb.w	r2, [r3, #45]	; 0x2d

    /* Init the low level hardware */
    hsdram->MspInitCallback(hsdram);
#else
    /* Initialize the low level hardware (MSP) */
    HAL_SDRAM_MspInit(hsdram);
 8004e28:	6878      	ldr	r0, [r7, #4]
 8004e2a:	f7fc faef 	bl	800140c <HAL_SDRAM_MspInit>
#endif /* USE_HAL_SDRAM_REGISTER_CALLBACKS */
  }

  /* Initialize the SDRAM controller state */
  hsdram->State = HAL_SDRAM_STATE_BUSY;
 8004e2e:	687b      	ldr	r3, [r7, #4]
 8004e30:	2202      	movs	r2, #2
 8004e32:	f883 202c 	strb.w	r2, [r3, #44]	; 0x2c

  /* Initialize SDRAM control Interface */
  (void)FMC_SDRAM_Init(hsdram->Instance, &(hsdram->Init));
 8004e36:	687b      	ldr	r3, [r7, #4]
 8004e38:	681a      	ldr	r2, [r3, #0]
 8004e3a:	687b      	ldr	r3, [r7, #4]
 8004e3c:	3304      	adds	r3, #4
 8004e3e:	4619      	mov	r1, r3
 8004e40:	4610      	mov	r0, r2
 8004e42:	f001 f8dd 	bl	8006000 <FMC_SDRAM_Init>

  /* Initialize SDRAM timing Interface */
  (void)FMC_SDRAM_Timing_Init(hsdram->Instance, Timing, hsdram->Init.SDBank);
 8004e46:	687b      	ldr	r3, [r7, #4]
 8004e48:	6818      	ldr	r0, [r3, #0]
 8004e4a:	687b      	ldr	r3, [r7, #4]
 8004e4c:	685b      	ldr	r3, [r3, #4]
 8004e4e:	461a      	mov	r2, r3
 8004e50:	6839      	ldr	r1, [r7, #0]
 8004e52:	f001 f932 	bl	80060ba <FMC_SDRAM_Timing_Init>
  /* Update the SDRAM controller state */
  hsdram->State = HAL_SDRAM_STATE_READY;
 8004e56:	687b      	ldr	r3, [r7, #4]
 8004e58:	2201      	movs	r2, #1
 8004e5a:	f883 202c 	strb.w	r2, [r3, #44]	; 0x2c

  return HAL_OK;
 8004e5e:	2300      	movs	r3, #0
}
 8004e60:	4618      	mov	r0, r3
 8004e62:	3708      	adds	r7, #8
 8004e64:	46bd      	mov	sp, r7
 8004e66:	bd80      	pop	{r7, pc}

08004e68 <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 8004e68:	b580      	push	{r7, lr}
 8004e6a:	b082      	sub	sp, #8
 8004e6c:	af00      	add	r7, sp, #0
 8004e6e:	6078      	str	r0, [r7, #4]
  /* Check the SPI handle allocation */
  if (hspi == NULL)
 8004e70:	687b      	ldr	r3, [r7, #4]
 8004e72:	2b00      	cmp	r3, #0
 8004e74:	d101      	bne.n	8004e7a <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 8004e76:	2301      	movs	r3, #1
 8004e78:	e07b      	b.n	8004f72 <HAL_SPI_Init+0x10a>
  assert_param(IS_SPI_DATASIZE(hspi->Init.DataSize));
  assert_param(IS_SPI_NSS(hspi->Init.NSS));
  assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
  assert_param(IS_SPI_FIRST_BIT(hspi->Init.FirstBit));
  assert_param(IS_SPI_TIMODE(hspi->Init.TIMode));
  if (hspi->Init.TIMode == SPI_TIMODE_DISABLE)
 8004e7a:	687b      	ldr	r3, [r7, #4]
 8004e7c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004e7e:	2b00      	cmp	r3, #0
 8004e80:	d108      	bne.n	8004e94 <HAL_SPI_Init+0x2c>
  {
    assert_param(IS_SPI_CPOL(hspi->Init.CLKPolarity));
    assert_param(IS_SPI_CPHA(hspi->Init.CLKPhase));

    if (hspi->Init.Mode == SPI_MODE_MASTER)
 8004e82:	687b      	ldr	r3, [r7, #4]
 8004e84:	685b      	ldr	r3, [r3, #4]
 8004e86:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8004e8a:	d009      	beq.n	8004ea0 <HAL_SPI_Init+0x38>
      assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
    }
    else
    {
      /* Baudrate prescaler not use in Motoraola Slave mode. force to default value */
      hspi->Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 8004e8c:	687b      	ldr	r3, [r7, #4]
 8004e8e:	2200      	movs	r2, #0
 8004e90:	61da      	str	r2, [r3, #28]
 8004e92:	e005      	b.n	8004ea0 <HAL_SPI_Init+0x38>
  else
  {
    assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));

    /* Force polarity and phase to TI protocaol requirements */
    hspi->Init.CLKPolarity = SPI_POLARITY_LOW;
 8004e94:	687b      	ldr	r3, [r7, #4]
 8004e96:	2200      	movs	r2, #0
 8004e98:	611a      	str	r2, [r3, #16]
    hspi->Init.CLKPhase    = SPI_PHASE_1EDGE;
 8004e9a:	687b      	ldr	r3, [r7, #4]
 8004e9c:	2200      	movs	r2, #0
 8004e9e:	615a      	str	r2, [r3, #20]
  if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8004ea0:	687b      	ldr	r3, [r7, #4]
 8004ea2:	2200      	movs	r2, #0
 8004ea4:	629a      	str	r2, [r3, #40]	; 0x28
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 8004ea6:	687b      	ldr	r3, [r7, #4]
 8004ea8:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8004eac:	b2db      	uxtb	r3, r3
 8004eae:	2b00      	cmp	r3, #0
 8004eb0:	d106      	bne.n	8004ec0 <HAL_SPI_Init+0x58>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 8004eb2:	687b      	ldr	r3, [r7, #4]
 8004eb4:	2200      	movs	r2, #0
 8004eb6:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 8004eba:	6878      	ldr	r0, [r7, #4]
 8004ebc:	f7fc f962 	bl	8001184 <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 8004ec0:	687b      	ldr	r3, [r7, #4]
 8004ec2:	2202      	movs	r2, #2
 8004ec4:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 8004ec8:	687b      	ldr	r3, [r7, #4]
 8004eca:	681b      	ldr	r3, [r3, #0]
 8004ecc:	681a      	ldr	r2, [r3, #0]
 8004ece:	687b      	ldr	r3, [r7, #4]
 8004ed0:	681b      	ldr	r3, [r3, #0]
 8004ed2:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8004ed6:	601a      	str	r2, [r3, #0]

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Data size, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, ((hspi->Init.Mode & (SPI_CR1_MSTR | SPI_CR1_SSI)) |
 8004ed8:	687b      	ldr	r3, [r7, #4]
 8004eda:	685b      	ldr	r3, [r3, #4]
 8004edc:	f403 7282 	and.w	r2, r3, #260	; 0x104
 8004ee0:	687b      	ldr	r3, [r7, #4]
 8004ee2:	689b      	ldr	r3, [r3, #8]
 8004ee4:	f403 4304 	and.w	r3, r3, #33792	; 0x8400
 8004ee8:	431a      	orrs	r2, r3
 8004eea:	687b      	ldr	r3, [r7, #4]
 8004eec:	68db      	ldr	r3, [r3, #12]
 8004eee:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8004ef2:	431a      	orrs	r2, r3
 8004ef4:	687b      	ldr	r3, [r7, #4]
 8004ef6:	691b      	ldr	r3, [r3, #16]
 8004ef8:	f003 0302 	and.w	r3, r3, #2
 8004efc:	431a      	orrs	r2, r3
 8004efe:	687b      	ldr	r3, [r7, #4]
 8004f00:	695b      	ldr	r3, [r3, #20]
 8004f02:	f003 0301 	and.w	r3, r3, #1
 8004f06:	431a      	orrs	r2, r3
 8004f08:	687b      	ldr	r3, [r7, #4]
 8004f0a:	699b      	ldr	r3, [r3, #24]
 8004f0c:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8004f10:	431a      	orrs	r2, r3
 8004f12:	687b      	ldr	r3, [r7, #4]
 8004f14:	69db      	ldr	r3, [r3, #28]
 8004f16:	f003 0338 	and.w	r3, r3, #56	; 0x38
 8004f1a:	431a      	orrs	r2, r3
 8004f1c:	687b      	ldr	r3, [r7, #4]
 8004f1e:	6a1b      	ldr	r3, [r3, #32]
 8004f20:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8004f24:	ea42 0103 	orr.w	r1, r2, r3
 8004f28:	687b      	ldr	r3, [r7, #4]
 8004f2a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004f2c:	f403 5200 	and.w	r2, r3, #8192	; 0x2000
 8004f30:	687b      	ldr	r3, [r7, #4]
 8004f32:	681b      	ldr	r3, [r3, #0]
 8004f34:	430a      	orrs	r2, r1
 8004f36:	601a      	str	r2, [r3, #0]
                                  (hspi->Init.BaudRatePrescaler & SPI_CR1_BR_Msk) |
                                  (hspi->Init.FirstBit  & SPI_CR1_LSBFIRST) |
                                  (hspi->Init.CRCCalculation & SPI_CR1_CRCEN)));

  /* Configure : NSS management, TI Mode */
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) | (hspi->Init.TIMode & SPI_CR2_FRF)));
 8004f38:	687b      	ldr	r3, [r7, #4]
 8004f3a:	699b      	ldr	r3, [r3, #24]
 8004f3c:	0c1b      	lsrs	r3, r3, #16
 8004f3e:	f003 0104 	and.w	r1, r3, #4
 8004f42:	687b      	ldr	r3, [r7, #4]
 8004f44:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004f46:	f003 0210 	and.w	r2, r3, #16
 8004f4a:	687b      	ldr	r3, [r7, #4]
 8004f4c:	681b      	ldr	r3, [r3, #0]
 8004f4e:	430a      	orrs	r2, r1
 8004f50:	605a      	str	r2, [r3, #4]
  }
#endif /* USE_SPI_CRC */

#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 8004f52:	687b      	ldr	r3, [r7, #4]
 8004f54:	681b      	ldr	r3, [r3, #0]
 8004f56:	69da      	ldr	r2, [r3, #28]
 8004f58:	687b      	ldr	r3, [r7, #4]
 8004f5a:	681b      	ldr	r3, [r3, #0]
 8004f5c:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8004f60:	61da      	str	r2, [r3, #28]
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 8004f62:	687b      	ldr	r3, [r7, #4]
 8004f64:	2200      	movs	r2, #0
 8004f66:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->State     = HAL_SPI_STATE_READY;
 8004f68:	687b      	ldr	r3, [r7, #4]
 8004f6a:	2201      	movs	r2, #1
 8004f6c:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

  return HAL_OK;
 8004f70:	2300      	movs	r3, #0
}
 8004f72:	4618      	mov	r0, r3
 8004f74:	3708      	adds	r7, #8
 8004f76:	46bd      	mov	sp, r7
 8004f78:	bd80      	pop	{r7, pc}

08004f7a <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8004f7a:	b580      	push	{r7, lr}
 8004f7c:	b082      	sub	sp, #8
 8004f7e:	af00      	add	r7, sp, #0
 8004f80:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8004f82:	687b      	ldr	r3, [r7, #4]
 8004f84:	2b00      	cmp	r3, #0
 8004f86:	d101      	bne.n	8004f8c <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8004f88:	2301      	movs	r3, #1
 8004f8a:	e041      	b.n	8005010 <HAL_TIM_Base_Init+0x96>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8004f8c:	687b      	ldr	r3, [r7, #4]
 8004f8e:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8004f92:	b2db      	uxtb	r3, r3
 8004f94:	2b00      	cmp	r3, #0
 8004f96:	d106      	bne.n	8004fa6 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8004f98:	687b      	ldr	r3, [r7, #4]
 8004f9a:	2200      	movs	r2, #0
 8004f9c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8004fa0:	6878      	ldr	r0, [r7, #4]
 8004fa2:	f7fc f937 	bl	8001214 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8004fa6:	687b      	ldr	r3, [r7, #4]
 8004fa8:	2202      	movs	r2, #2
 8004faa:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8004fae:	687b      	ldr	r3, [r7, #4]
 8004fb0:	681a      	ldr	r2, [r3, #0]
 8004fb2:	687b      	ldr	r3, [r7, #4]
 8004fb4:	3304      	adds	r3, #4
 8004fb6:	4619      	mov	r1, r3
 8004fb8:	4610      	mov	r0, r2
 8004fba:	f000 fa95 	bl	80054e8 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8004fbe:	687b      	ldr	r3, [r7, #4]
 8004fc0:	2201      	movs	r2, #1
 8004fc2:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8004fc6:	687b      	ldr	r3, [r7, #4]
 8004fc8:	2201      	movs	r2, #1
 8004fca:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8004fce:	687b      	ldr	r3, [r7, #4]
 8004fd0:	2201      	movs	r2, #1
 8004fd2:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8004fd6:	687b      	ldr	r3, [r7, #4]
 8004fd8:	2201      	movs	r2, #1
 8004fda:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8004fde:	687b      	ldr	r3, [r7, #4]
 8004fe0:	2201      	movs	r2, #1
 8004fe2:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8004fe6:	687b      	ldr	r3, [r7, #4]
 8004fe8:	2201      	movs	r2, #1
 8004fea:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8004fee:	687b      	ldr	r3, [r7, #4]
 8004ff0:	2201      	movs	r2, #1
 8004ff2:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 8004ff6:	687b      	ldr	r3, [r7, #4]
 8004ff8:	2201      	movs	r2, #1
 8004ffa:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8004ffe:	687b      	ldr	r3, [r7, #4]
 8005000:	2201      	movs	r2, #1
 8005002:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8005006:	687b      	ldr	r3, [r7, #4]
 8005008:	2201      	movs	r2, #1
 800500a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 800500e:	2300      	movs	r3, #0
}
 8005010:	4618      	mov	r0, r3
 8005012:	3708      	adds	r7, #8
 8005014:	46bd      	mov	sp, r7
 8005016:	bd80      	pop	{r7, pc}

08005018 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 8005018:	b480      	push	{r7}
 800501a:	b085      	sub	sp, #20
 800501c:	af00      	add	r7, sp, #0
 800501e:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8005020:	687b      	ldr	r3, [r7, #4]
 8005022:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8005026:	b2db      	uxtb	r3, r3
 8005028:	2b01      	cmp	r3, #1
 800502a:	d001      	beq.n	8005030 <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 800502c:	2301      	movs	r3, #1
 800502e:	e04e      	b.n	80050ce <HAL_TIM_Base_Start_IT+0xb6>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8005030:	687b      	ldr	r3, [r7, #4]
 8005032:	2202      	movs	r2, #2
 8005034:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 8005038:	687b      	ldr	r3, [r7, #4]
 800503a:	681b      	ldr	r3, [r3, #0]
 800503c:	68da      	ldr	r2, [r3, #12]
 800503e:	687b      	ldr	r3, [r7, #4]
 8005040:	681b      	ldr	r3, [r3, #0]
 8005042:	f042 0201 	orr.w	r2, r2, #1
 8005046:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8005048:	687b      	ldr	r3, [r7, #4]
 800504a:	681b      	ldr	r3, [r3, #0]
 800504c:	4a23      	ldr	r2, [pc, #140]	; (80050dc <HAL_TIM_Base_Start_IT+0xc4>)
 800504e:	4293      	cmp	r3, r2
 8005050:	d022      	beq.n	8005098 <HAL_TIM_Base_Start_IT+0x80>
 8005052:	687b      	ldr	r3, [r7, #4]
 8005054:	681b      	ldr	r3, [r3, #0]
 8005056:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800505a:	d01d      	beq.n	8005098 <HAL_TIM_Base_Start_IT+0x80>
 800505c:	687b      	ldr	r3, [r7, #4]
 800505e:	681b      	ldr	r3, [r3, #0]
 8005060:	4a1f      	ldr	r2, [pc, #124]	; (80050e0 <HAL_TIM_Base_Start_IT+0xc8>)
 8005062:	4293      	cmp	r3, r2
 8005064:	d018      	beq.n	8005098 <HAL_TIM_Base_Start_IT+0x80>
 8005066:	687b      	ldr	r3, [r7, #4]
 8005068:	681b      	ldr	r3, [r3, #0]
 800506a:	4a1e      	ldr	r2, [pc, #120]	; (80050e4 <HAL_TIM_Base_Start_IT+0xcc>)
 800506c:	4293      	cmp	r3, r2
 800506e:	d013      	beq.n	8005098 <HAL_TIM_Base_Start_IT+0x80>
 8005070:	687b      	ldr	r3, [r7, #4]
 8005072:	681b      	ldr	r3, [r3, #0]
 8005074:	4a1c      	ldr	r2, [pc, #112]	; (80050e8 <HAL_TIM_Base_Start_IT+0xd0>)
 8005076:	4293      	cmp	r3, r2
 8005078:	d00e      	beq.n	8005098 <HAL_TIM_Base_Start_IT+0x80>
 800507a:	687b      	ldr	r3, [r7, #4]
 800507c:	681b      	ldr	r3, [r3, #0]
 800507e:	4a1b      	ldr	r2, [pc, #108]	; (80050ec <HAL_TIM_Base_Start_IT+0xd4>)
 8005080:	4293      	cmp	r3, r2
 8005082:	d009      	beq.n	8005098 <HAL_TIM_Base_Start_IT+0x80>
 8005084:	687b      	ldr	r3, [r7, #4]
 8005086:	681b      	ldr	r3, [r3, #0]
 8005088:	4a19      	ldr	r2, [pc, #100]	; (80050f0 <HAL_TIM_Base_Start_IT+0xd8>)
 800508a:	4293      	cmp	r3, r2
 800508c:	d004      	beq.n	8005098 <HAL_TIM_Base_Start_IT+0x80>
 800508e:	687b      	ldr	r3, [r7, #4]
 8005090:	681b      	ldr	r3, [r3, #0]
 8005092:	4a18      	ldr	r2, [pc, #96]	; (80050f4 <HAL_TIM_Base_Start_IT+0xdc>)
 8005094:	4293      	cmp	r3, r2
 8005096:	d111      	bne.n	80050bc <HAL_TIM_Base_Start_IT+0xa4>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8005098:	687b      	ldr	r3, [r7, #4]
 800509a:	681b      	ldr	r3, [r3, #0]
 800509c:	689b      	ldr	r3, [r3, #8]
 800509e:	f003 0307 	and.w	r3, r3, #7
 80050a2:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80050a4:	68fb      	ldr	r3, [r7, #12]
 80050a6:	2b06      	cmp	r3, #6
 80050a8:	d010      	beq.n	80050cc <HAL_TIM_Base_Start_IT+0xb4>
    {
      __HAL_TIM_ENABLE(htim);
 80050aa:	687b      	ldr	r3, [r7, #4]
 80050ac:	681b      	ldr	r3, [r3, #0]
 80050ae:	681a      	ldr	r2, [r3, #0]
 80050b0:	687b      	ldr	r3, [r7, #4]
 80050b2:	681b      	ldr	r3, [r3, #0]
 80050b4:	f042 0201 	orr.w	r2, r2, #1
 80050b8:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80050ba:	e007      	b.n	80050cc <HAL_TIM_Base_Start_IT+0xb4>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 80050bc:	687b      	ldr	r3, [r7, #4]
 80050be:	681b      	ldr	r3, [r3, #0]
 80050c0:	681a      	ldr	r2, [r3, #0]
 80050c2:	687b      	ldr	r3, [r7, #4]
 80050c4:	681b      	ldr	r3, [r3, #0]
 80050c6:	f042 0201 	orr.w	r2, r2, #1
 80050ca:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 80050cc:	2300      	movs	r3, #0
}
 80050ce:	4618      	mov	r0, r3
 80050d0:	3714      	adds	r7, #20
 80050d2:	46bd      	mov	sp, r7
 80050d4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80050d8:	4770      	bx	lr
 80050da:	bf00      	nop
 80050dc:	40010000 	.word	0x40010000
 80050e0:	40000400 	.word	0x40000400
 80050e4:	40000800 	.word	0x40000800
 80050e8:	40000c00 	.word	0x40000c00
 80050ec:	40010400 	.word	0x40010400
 80050f0:	40014000 	.word	0x40014000
 80050f4:	40001800 	.word	0x40001800

080050f8 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 80050f8:	b580      	push	{r7, lr}
 80050fa:	b082      	sub	sp, #8
 80050fc:	af00      	add	r7, sp, #0
 80050fe:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 8005100:	687b      	ldr	r3, [r7, #4]
 8005102:	681b      	ldr	r3, [r3, #0]
 8005104:	691b      	ldr	r3, [r3, #16]
 8005106:	f003 0302 	and.w	r3, r3, #2
 800510a:	2b02      	cmp	r3, #2
 800510c:	d122      	bne.n	8005154 <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 800510e:	687b      	ldr	r3, [r7, #4]
 8005110:	681b      	ldr	r3, [r3, #0]
 8005112:	68db      	ldr	r3, [r3, #12]
 8005114:	f003 0302 	and.w	r3, r3, #2
 8005118:	2b02      	cmp	r3, #2
 800511a:	d11b      	bne.n	8005154 <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 800511c:	687b      	ldr	r3, [r7, #4]
 800511e:	681b      	ldr	r3, [r3, #0]
 8005120:	f06f 0202 	mvn.w	r2, #2
 8005124:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8005126:	687b      	ldr	r3, [r7, #4]
 8005128:	2201      	movs	r2, #1
 800512a:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 800512c:	687b      	ldr	r3, [r7, #4]
 800512e:	681b      	ldr	r3, [r3, #0]
 8005130:	699b      	ldr	r3, [r3, #24]
 8005132:	f003 0303 	and.w	r3, r3, #3
 8005136:	2b00      	cmp	r3, #0
 8005138:	d003      	beq.n	8005142 <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 800513a:	6878      	ldr	r0, [r7, #4]
 800513c:	f000 f9b5 	bl	80054aa <HAL_TIM_IC_CaptureCallback>
 8005140:	e005      	b.n	800514e <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 8005142:	6878      	ldr	r0, [r7, #4]
 8005144:	f000 f9a7 	bl	8005496 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8005148:	6878      	ldr	r0, [r7, #4]
 800514a:	f000 f9b8 	bl	80054be <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800514e:	687b      	ldr	r3, [r7, #4]
 8005150:	2200      	movs	r2, #0
 8005152:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 8005154:	687b      	ldr	r3, [r7, #4]
 8005156:	681b      	ldr	r3, [r3, #0]
 8005158:	691b      	ldr	r3, [r3, #16]
 800515a:	f003 0304 	and.w	r3, r3, #4
 800515e:	2b04      	cmp	r3, #4
 8005160:	d122      	bne.n	80051a8 <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 8005162:	687b      	ldr	r3, [r7, #4]
 8005164:	681b      	ldr	r3, [r3, #0]
 8005166:	68db      	ldr	r3, [r3, #12]
 8005168:	f003 0304 	and.w	r3, r3, #4
 800516c:	2b04      	cmp	r3, #4
 800516e:	d11b      	bne.n	80051a8 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 8005170:	687b      	ldr	r3, [r7, #4]
 8005172:	681b      	ldr	r3, [r3, #0]
 8005174:	f06f 0204 	mvn.w	r2, #4
 8005178:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 800517a:	687b      	ldr	r3, [r7, #4]
 800517c:	2202      	movs	r2, #2
 800517e:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8005180:	687b      	ldr	r3, [r7, #4]
 8005182:	681b      	ldr	r3, [r3, #0]
 8005184:	699b      	ldr	r3, [r3, #24]
 8005186:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800518a:	2b00      	cmp	r3, #0
 800518c:	d003      	beq.n	8005196 <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800518e:	6878      	ldr	r0, [r7, #4]
 8005190:	f000 f98b 	bl	80054aa <HAL_TIM_IC_CaptureCallback>
 8005194:	e005      	b.n	80051a2 <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8005196:	6878      	ldr	r0, [r7, #4]
 8005198:	f000 f97d 	bl	8005496 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800519c:	6878      	ldr	r0, [r7, #4]
 800519e:	f000 f98e 	bl	80054be <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80051a2:	687b      	ldr	r3, [r7, #4]
 80051a4:	2200      	movs	r2, #0
 80051a6:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 80051a8:	687b      	ldr	r3, [r7, #4]
 80051aa:	681b      	ldr	r3, [r3, #0]
 80051ac:	691b      	ldr	r3, [r3, #16]
 80051ae:	f003 0308 	and.w	r3, r3, #8
 80051b2:	2b08      	cmp	r3, #8
 80051b4:	d122      	bne.n	80051fc <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 80051b6:	687b      	ldr	r3, [r7, #4]
 80051b8:	681b      	ldr	r3, [r3, #0]
 80051ba:	68db      	ldr	r3, [r3, #12]
 80051bc:	f003 0308 	and.w	r3, r3, #8
 80051c0:	2b08      	cmp	r3, #8
 80051c2:	d11b      	bne.n	80051fc <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 80051c4:	687b      	ldr	r3, [r7, #4]
 80051c6:	681b      	ldr	r3, [r3, #0]
 80051c8:	f06f 0208 	mvn.w	r2, #8
 80051cc:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 80051ce:	687b      	ldr	r3, [r7, #4]
 80051d0:	2204      	movs	r2, #4
 80051d2:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 80051d4:	687b      	ldr	r3, [r7, #4]
 80051d6:	681b      	ldr	r3, [r3, #0]
 80051d8:	69db      	ldr	r3, [r3, #28]
 80051da:	f003 0303 	and.w	r3, r3, #3
 80051de:	2b00      	cmp	r3, #0
 80051e0:	d003      	beq.n	80051ea <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80051e2:	6878      	ldr	r0, [r7, #4]
 80051e4:	f000 f961 	bl	80054aa <HAL_TIM_IC_CaptureCallback>
 80051e8:	e005      	b.n	80051f6 <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80051ea:	6878      	ldr	r0, [r7, #4]
 80051ec:	f000 f953 	bl	8005496 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80051f0:	6878      	ldr	r0, [r7, #4]
 80051f2:	f000 f964 	bl	80054be <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80051f6:	687b      	ldr	r3, [r7, #4]
 80051f8:	2200      	movs	r2, #0
 80051fa:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 80051fc:	687b      	ldr	r3, [r7, #4]
 80051fe:	681b      	ldr	r3, [r3, #0]
 8005200:	691b      	ldr	r3, [r3, #16]
 8005202:	f003 0310 	and.w	r3, r3, #16
 8005206:	2b10      	cmp	r3, #16
 8005208:	d122      	bne.n	8005250 <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 800520a:	687b      	ldr	r3, [r7, #4]
 800520c:	681b      	ldr	r3, [r3, #0]
 800520e:	68db      	ldr	r3, [r3, #12]
 8005210:	f003 0310 	and.w	r3, r3, #16
 8005214:	2b10      	cmp	r3, #16
 8005216:	d11b      	bne.n	8005250 <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 8005218:	687b      	ldr	r3, [r7, #4]
 800521a:	681b      	ldr	r3, [r3, #0]
 800521c:	f06f 0210 	mvn.w	r2, #16
 8005220:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8005222:	687b      	ldr	r3, [r7, #4]
 8005224:	2208      	movs	r2, #8
 8005226:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8005228:	687b      	ldr	r3, [r7, #4]
 800522a:	681b      	ldr	r3, [r3, #0]
 800522c:	69db      	ldr	r3, [r3, #28]
 800522e:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8005232:	2b00      	cmp	r3, #0
 8005234:	d003      	beq.n	800523e <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8005236:	6878      	ldr	r0, [r7, #4]
 8005238:	f000 f937 	bl	80054aa <HAL_TIM_IC_CaptureCallback>
 800523c:	e005      	b.n	800524a <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800523e:	6878      	ldr	r0, [r7, #4]
 8005240:	f000 f929 	bl	8005496 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8005244:	6878      	ldr	r0, [r7, #4]
 8005246:	f000 f93a 	bl	80054be <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800524a:	687b      	ldr	r3, [r7, #4]
 800524c:	2200      	movs	r2, #0
 800524e:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 8005250:	687b      	ldr	r3, [r7, #4]
 8005252:	681b      	ldr	r3, [r3, #0]
 8005254:	691b      	ldr	r3, [r3, #16]
 8005256:	f003 0301 	and.w	r3, r3, #1
 800525a:	2b01      	cmp	r3, #1
 800525c:	d10e      	bne.n	800527c <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 800525e:	687b      	ldr	r3, [r7, #4]
 8005260:	681b      	ldr	r3, [r3, #0]
 8005262:	68db      	ldr	r3, [r3, #12]
 8005264:	f003 0301 	and.w	r3, r3, #1
 8005268:	2b01      	cmp	r3, #1
 800526a:	d107      	bne.n	800527c <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 800526c:	687b      	ldr	r3, [r7, #4]
 800526e:	681b      	ldr	r3, [r3, #0]
 8005270:	f06f 0201 	mvn.w	r2, #1
 8005274:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 8005276:	6878      	ldr	r0, [r7, #4]
 8005278:	f7fb fd5c 	bl	8000d34 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 800527c:	687b      	ldr	r3, [r7, #4]
 800527e:	681b      	ldr	r3, [r3, #0]
 8005280:	691b      	ldr	r3, [r3, #16]
 8005282:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8005286:	2b80      	cmp	r3, #128	; 0x80
 8005288:	d10e      	bne.n	80052a8 <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 800528a:	687b      	ldr	r3, [r7, #4]
 800528c:	681b      	ldr	r3, [r3, #0]
 800528e:	68db      	ldr	r3, [r3, #12]
 8005290:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8005294:	2b80      	cmp	r3, #128	; 0x80
 8005296:	d107      	bne.n	80052a8 <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 8005298:	687b      	ldr	r3, [r7, #4]
 800529a:	681b      	ldr	r3, [r3, #0]
 800529c:	f06f 0280 	mvn.w	r2, #128	; 0x80
 80052a0:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 80052a2:	6878      	ldr	r0, [r7, #4]
 80052a4:	f000 fae0 	bl	8005868 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 80052a8:	687b      	ldr	r3, [r7, #4]
 80052aa:	681b      	ldr	r3, [r3, #0]
 80052ac:	691b      	ldr	r3, [r3, #16]
 80052ae:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80052b2:	2b40      	cmp	r3, #64	; 0x40
 80052b4:	d10e      	bne.n	80052d4 <HAL_TIM_IRQHandler+0x1dc>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 80052b6:	687b      	ldr	r3, [r7, #4]
 80052b8:	681b      	ldr	r3, [r3, #0]
 80052ba:	68db      	ldr	r3, [r3, #12]
 80052bc:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80052c0:	2b40      	cmp	r3, #64	; 0x40
 80052c2:	d107      	bne.n	80052d4 <HAL_TIM_IRQHandler+0x1dc>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 80052c4:	687b      	ldr	r3, [r7, #4]
 80052c6:	681b      	ldr	r3, [r3, #0]
 80052c8:	f06f 0240 	mvn.w	r2, #64	; 0x40
 80052cc:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 80052ce:	6878      	ldr	r0, [r7, #4]
 80052d0:	f000 f8ff 	bl	80054d2 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 80052d4:	687b      	ldr	r3, [r7, #4]
 80052d6:	681b      	ldr	r3, [r3, #0]
 80052d8:	691b      	ldr	r3, [r3, #16]
 80052da:	f003 0320 	and.w	r3, r3, #32
 80052de:	2b20      	cmp	r3, #32
 80052e0:	d10e      	bne.n	8005300 <HAL_TIM_IRQHandler+0x208>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 80052e2:	687b      	ldr	r3, [r7, #4]
 80052e4:	681b      	ldr	r3, [r3, #0]
 80052e6:	68db      	ldr	r3, [r3, #12]
 80052e8:	f003 0320 	and.w	r3, r3, #32
 80052ec:	2b20      	cmp	r3, #32
 80052ee:	d107      	bne.n	8005300 <HAL_TIM_IRQHandler+0x208>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 80052f0:	687b      	ldr	r3, [r7, #4]
 80052f2:	681b      	ldr	r3, [r3, #0]
 80052f4:	f06f 0220 	mvn.w	r2, #32
 80052f8:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 80052fa:	6878      	ldr	r0, [r7, #4]
 80052fc:	f000 faaa 	bl	8005854 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 8005300:	bf00      	nop
 8005302:	3708      	adds	r7, #8
 8005304:	46bd      	mov	sp, r7
 8005306:	bd80      	pop	{r7, pc}

08005308 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 8005308:	b580      	push	{r7, lr}
 800530a:	b084      	sub	sp, #16
 800530c:	af00      	add	r7, sp, #0
 800530e:	6078      	str	r0, [r7, #4]
 8005310:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8005312:	2300      	movs	r3, #0
 8005314:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 8005316:	687b      	ldr	r3, [r7, #4]
 8005318:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800531c:	2b01      	cmp	r3, #1
 800531e:	d101      	bne.n	8005324 <HAL_TIM_ConfigClockSource+0x1c>
 8005320:	2302      	movs	r3, #2
 8005322:	e0b4      	b.n	800548e <HAL_TIM_ConfigClockSource+0x186>
 8005324:	687b      	ldr	r3, [r7, #4]
 8005326:	2201      	movs	r2, #1
 8005328:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 800532c:	687b      	ldr	r3, [r7, #4]
 800532e:	2202      	movs	r2, #2
 8005330:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 8005334:	687b      	ldr	r3, [r7, #4]
 8005336:	681b      	ldr	r3, [r3, #0]
 8005338:	689b      	ldr	r3, [r3, #8]
 800533a:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 800533c:	68bb      	ldr	r3, [r7, #8]
 800533e:	f023 0377 	bic.w	r3, r3, #119	; 0x77
 8005342:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8005344:	68bb      	ldr	r3, [r7, #8]
 8005346:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 800534a:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 800534c:	687b      	ldr	r3, [r7, #4]
 800534e:	681b      	ldr	r3, [r3, #0]
 8005350:	68ba      	ldr	r2, [r7, #8]
 8005352:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 8005354:	683b      	ldr	r3, [r7, #0]
 8005356:	681b      	ldr	r3, [r3, #0]
 8005358:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800535c:	d03e      	beq.n	80053dc <HAL_TIM_ConfigClockSource+0xd4>
 800535e:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8005362:	f200 8087 	bhi.w	8005474 <HAL_TIM_ConfigClockSource+0x16c>
 8005366:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800536a:	f000 8086 	beq.w	800547a <HAL_TIM_ConfigClockSource+0x172>
 800536e:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8005372:	d87f      	bhi.n	8005474 <HAL_TIM_ConfigClockSource+0x16c>
 8005374:	2b70      	cmp	r3, #112	; 0x70
 8005376:	d01a      	beq.n	80053ae <HAL_TIM_ConfigClockSource+0xa6>
 8005378:	2b70      	cmp	r3, #112	; 0x70
 800537a:	d87b      	bhi.n	8005474 <HAL_TIM_ConfigClockSource+0x16c>
 800537c:	2b60      	cmp	r3, #96	; 0x60
 800537e:	d050      	beq.n	8005422 <HAL_TIM_ConfigClockSource+0x11a>
 8005380:	2b60      	cmp	r3, #96	; 0x60
 8005382:	d877      	bhi.n	8005474 <HAL_TIM_ConfigClockSource+0x16c>
 8005384:	2b50      	cmp	r3, #80	; 0x50
 8005386:	d03c      	beq.n	8005402 <HAL_TIM_ConfigClockSource+0xfa>
 8005388:	2b50      	cmp	r3, #80	; 0x50
 800538a:	d873      	bhi.n	8005474 <HAL_TIM_ConfigClockSource+0x16c>
 800538c:	2b40      	cmp	r3, #64	; 0x40
 800538e:	d058      	beq.n	8005442 <HAL_TIM_ConfigClockSource+0x13a>
 8005390:	2b40      	cmp	r3, #64	; 0x40
 8005392:	d86f      	bhi.n	8005474 <HAL_TIM_ConfigClockSource+0x16c>
 8005394:	2b30      	cmp	r3, #48	; 0x30
 8005396:	d064      	beq.n	8005462 <HAL_TIM_ConfigClockSource+0x15a>
 8005398:	2b30      	cmp	r3, #48	; 0x30
 800539a:	d86b      	bhi.n	8005474 <HAL_TIM_ConfigClockSource+0x16c>
 800539c:	2b20      	cmp	r3, #32
 800539e:	d060      	beq.n	8005462 <HAL_TIM_ConfigClockSource+0x15a>
 80053a0:	2b20      	cmp	r3, #32
 80053a2:	d867      	bhi.n	8005474 <HAL_TIM_ConfigClockSource+0x16c>
 80053a4:	2b00      	cmp	r3, #0
 80053a6:	d05c      	beq.n	8005462 <HAL_TIM_ConfigClockSource+0x15a>
 80053a8:	2b10      	cmp	r3, #16
 80053aa:	d05a      	beq.n	8005462 <HAL_TIM_ConfigClockSource+0x15a>
 80053ac:	e062      	b.n	8005474 <HAL_TIM_ConfigClockSource+0x16c>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 80053ae:	687b      	ldr	r3, [r7, #4]
 80053b0:	6818      	ldr	r0, [r3, #0]
 80053b2:	683b      	ldr	r3, [r7, #0]
 80053b4:	6899      	ldr	r1, [r3, #8]
 80053b6:	683b      	ldr	r3, [r7, #0]
 80053b8:	685a      	ldr	r2, [r3, #4]
 80053ba:	683b      	ldr	r3, [r7, #0]
 80053bc:	68db      	ldr	r3, [r3, #12]
 80053be:	f000 f9ad 	bl	800571c <TIM_ETR_SetConfig>
                        sClockSourceConfig->ClockPrescaler,
                        sClockSourceConfig->ClockPolarity,
                        sClockSourceConfig->ClockFilter);

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 80053c2:	687b      	ldr	r3, [r7, #4]
 80053c4:	681b      	ldr	r3, [r3, #0]
 80053c6:	689b      	ldr	r3, [r3, #8]
 80053c8:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 80053ca:	68bb      	ldr	r3, [r7, #8]
 80053cc:	f043 0377 	orr.w	r3, r3, #119	; 0x77
 80053d0:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 80053d2:	687b      	ldr	r3, [r7, #4]
 80053d4:	681b      	ldr	r3, [r3, #0]
 80053d6:	68ba      	ldr	r2, [r7, #8]
 80053d8:	609a      	str	r2, [r3, #8]
      break;
 80053da:	e04f      	b.n	800547c <HAL_TIM_ConfigClockSource+0x174>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 80053dc:	687b      	ldr	r3, [r7, #4]
 80053de:	6818      	ldr	r0, [r3, #0]
 80053e0:	683b      	ldr	r3, [r7, #0]
 80053e2:	6899      	ldr	r1, [r3, #8]
 80053e4:	683b      	ldr	r3, [r7, #0]
 80053e6:	685a      	ldr	r2, [r3, #4]
 80053e8:	683b      	ldr	r3, [r7, #0]
 80053ea:	68db      	ldr	r3, [r3, #12]
 80053ec:	f000 f996 	bl	800571c <TIM_ETR_SetConfig>
                        sClockSourceConfig->ClockPrescaler,
                        sClockSourceConfig->ClockPolarity,
                        sClockSourceConfig->ClockFilter);
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 80053f0:	687b      	ldr	r3, [r7, #4]
 80053f2:	681b      	ldr	r3, [r3, #0]
 80053f4:	689a      	ldr	r2, [r3, #8]
 80053f6:	687b      	ldr	r3, [r7, #4]
 80053f8:	681b      	ldr	r3, [r3, #0]
 80053fa:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 80053fe:	609a      	str	r2, [r3, #8]
      break;
 8005400:	e03c      	b.n	800547c <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8005402:	687b      	ldr	r3, [r7, #4]
 8005404:	6818      	ldr	r0, [r3, #0]
 8005406:	683b      	ldr	r3, [r7, #0]
 8005408:	6859      	ldr	r1, [r3, #4]
 800540a:	683b      	ldr	r3, [r7, #0]
 800540c:	68db      	ldr	r3, [r3, #12]
 800540e:	461a      	mov	r2, r3
 8005410:	f000 f90a 	bl	8005628 <TIM_TI1_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 8005414:	687b      	ldr	r3, [r7, #4]
 8005416:	681b      	ldr	r3, [r3, #0]
 8005418:	2150      	movs	r1, #80	; 0x50
 800541a:	4618      	mov	r0, r3
 800541c:	f000 f963 	bl	80056e6 <TIM_ITRx_SetConfig>
      break;
 8005420:	e02c      	b.n	800547c <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 8005422:	687b      	ldr	r3, [r7, #4]
 8005424:	6818      	ldr	r0, [r3, #0]
 8005426:	683b      	ldr	r3, [r7, #0]
 8005428:	6859      	ldr	r1, [r3, #4]
 800542a:	683b      	ldr	r3, [r7, #0]
 800542c:	68db      	ldr	r3, [r3, #12]
 800542e:	461a      	mov	r2, r3
 8005430:	f000 f929 	bl	8005686 <TIM_TI2_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 8005434:	687b      	ldr	r3, [r7, #4]
 8005436:	681b      	ldr	r3, [r3, #0]
 8005438:	2160      	movs	r1, #96	; 0x60
 800543a:	4618      	mov	r0, r3
 800543c:	f000 f953 	bl	80056e6 <TIM_ITRx_SetConfig>
      break;
 8005440:	e01c      	b.n	800547c <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8005442:	687b      	ldr	r3, [r7, #4]
 8005444:	6818      	ldr	r0, [r3, #0]
 8005446:	683b      	ldr	r3, [r7, #0]
 8005448:	6859      	ldr	r1, [r3, #4]
 800544a:	683b      	ldr	r3, [r7, #0]
 800544c:	68db      	ldr	r3, [r3, #12]
 800544e:	461a      	mov	r2, r3
 8005450:	f000 f8ea 	bl	8005628 <TIM_TI1_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 8005454:	687b      	ldr	r3, [r7, #4]
 8005456:	681b      	ldr	r3, [r3, #0]
 8005458:	2140      	movs	r1, #64	; 0x40
 800545a:	4618      	mov	r0, r3
 800545c:	f000 f943 	bl	80056e6 <TIM_ITRx_SetConfig>
      break;
 8005460:	e00c      	b.n	800547c <HAL_TIM_ConfigClockSource+0x174>
    case TIM_CLOCKSOURCE_ITR3:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_ITRX_INSTANCE(htim->Instance));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 8005462:	687b      	ldr	r3, [r7, #4]
 8005464:	681a      	ldr	r2, [r3, #0]
 8005466:	683b      	ldr	r3, [r7, #0]
 8005468:	681b      	ldr	r3, [r3, #0]
 800546a:	4619      	mov	r1, r3
 800546c:	4610      	mov	r0, r2
 800546e:	f000 f93a 	bl	80056e6 <TIM_ITRx_SetConfig>
      break;
 8005472:	e003      	b.n	800547c <HAL_TIM_ConfigClockSource+0x174>
    }

    default:
      status = HAL_ERROR;
 8005474:	2301      	movs	r3, #1
 8005476:	73fb      	strb	r3, [r7, #15]
      break;
 8005478:	e000      	b.n	800547c <HAL_TIM_ConfigClockSource+0x174>
      break;
 800547a:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 800547c:	687b      	ldr	r3, [r7, #4]
 800547e:	2201      	movs	r2, #1
 8005480:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8005484:	687b      	ldr	r3, [r7, #4]
 8005486:	2200      	movs	r2, #0
 8005488:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 800548c:	7bfb      	ldrb	r3, [r7, #15]
}
 800548e:	4618      	mov	r0, r3
 8005490:	3710      	adds	r7, #16
 8005492:	46bd      	mov	sp, r7
 8005494:	bd80      	pop	{r7, pc}

08005496 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 8005496:	b480      	push	{r7}
 8005498:	b083      	sub	sp, #12
 800549a:	af00      	add	r7, sp, #0
 800549c:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 800549e:	bf00      	nop
 80054a0:	370c      	adds	r7, #12
 80054a2:	46bd      	mov	sp, r7
 80054a4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80054a8:	4770      	bx	lr

080054aa <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 80054aa:	b480      	push	{r7}
 80054ac:	b083      	sub	sp, #12
 80054ae:	af00      	add	r7, sp, #0
 80054b0:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 80054b2:	bf00      	nop
 80054b4:	370c      	adds	r7, #12
 80054b6:	46bd      	mov	sp, r7
 80054b8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80054bc:	4770      	bx	lr

080054be <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 80054be:	b480      	push	{r7}
 80054c0:	b083      	sub	sp, #12
 80054c2:	af00      	add	r7, sp, #0
 80054c4:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 80054c6:	bf00      	nop
 80054c8:	370c      	adds	r7, #12
 80054ca:	46bd      	mov	sp, r7
 80054cc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80054d0:	4770      	bx	lr

080054d2 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 80054d2:	b480      	push	{r7}
 80054d4:	b083      	sub	sp, #12
 80054d6:	af00      	add	r7, sp, #0
 80054d8:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 80054da:	bf00      	nop
 80054dc:	370c      	adds	r7, #12
 80054de:	46bd      	mov	sp, r7
 80054e0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80054e4:	4770      	bx	lr
	...

080054e8 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 80054e8:	b480      	push	{r7}
 80054ea:	b085      	sub	sp, #20
 80054ec:	af00      	add	r7, sp, #0
 80054ee:	6078      	str	r0, [r7, #4]
 80054f0:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 80054f2:	687b      	ldr	r3, [r7, #4]
 80054f4:	681b      	ldr	r3, [r3, #0]
 80054f6:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 80054f8:	687b      	ldr	r3, [r7, #4]
 80054fa:	4a40      	ldr	r2, [pc, #256]	; (80055fc <TIM_Base_SetConfig+0x114>)
 80054fc:	4293      	cmp	r3, r2
 80054fe:	d013      	beq.n	8005528 <TIM_Base_SetConfig+0x40>
 8005500:	687b      	ldr	r3, [r7, #4]
 8005502:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8005506:	d00f      	beq.n	8005528 <TIM_Base_SetConfig+0x40>
 8005508:	687b      	ldr	r3, [r7, #4]
 800550a:	4a3d      	ldr	r2, [pc, #244]	; (8005600 <TIM_Base_SetConfig+0x118>)
 800550c:	4293      	cmp	r3, r2
 800550e:	d00b      	beq.n	8005528 <TIM_Base_SetConfig+0x40>
 8005510:	687b      	ldr	r3, [r7, #4]
 8005512:	4a3c      	ldr	r2, [pc, #240]	; (8005604 <TIM_Base_SetConfig+0x11c>)
 8005514:	4293      	cmp	r3, r2
 8005516:	d007      	beq.n	8005528 <TIM_Base_SetConfig+0x40>
 8005518:	687b      	ldr	r3, [r7, #4]
 800551a:	4a3b      	ldr	r2, [pc, #236]	; (8005608 <TIM_Base_SetConfig+0x120>)
 800551c:	4293      	cmp	r3, r2
 800551e:	d003      	beq.n	8005528 <TIM_Base_SetConfig+0x40>
 8005520:	687b      	ldr	r3, [r7, #4]
 8005522:	4a3a      	ldr	r2, [pc, #232]	; (800560c <TIM_Base_SetConfig+0x124>)
 8005524:	4293      	cmp	r3, r2
 8005526:	d108      	bne.n	800553a <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8005528:	68fb      	ldr	r3, [r7, #12]
 800552a:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800552e:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8005530:	683b      	ldr	r3, [r7, #0]
 8005532:	685b      	ldr	r3, [r3, #4]
 8005534:	68fa      	ldr	r2, [r7, #12]
 8005536:	4313      	orrs	r3, r2
 8005538:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 800553a:	687b      	ldr	r3, [r7, #4]
 800553c:	4a2f      	ldr	r2, [pc, #188]	; (80055fc <TIM_Base_SetConfig+0x114>)
 800553e:	4293      	cmp	r3, r2
 8005540:	d02b      	beq.n	800559a <TIM_Base_SetConfig+0xb2>
 8005542:	687b      	ldr	r3, [r7, #4]
 8005544:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8005548:	d027      	beq.n	800559a <TIM_Base_SetConfig+0xb2>
 800554a:	687b      	ldr	r3, [r7, #4]
 800554c:	4a2c      	ldr	r2, [pc, #176]	; (8005600 <TIM_Base_SetConfig+0x118>)
 800554e:	4293      	cmp	r3, r2
 8005550:	d023      	beq.n	800559a <TIM_Base_SetConfig+0xb2>
 8005552:	687b      	ldr	r3, [r7, #4]
 8005554:	4a2b      	ldr	r2, [pc, #172]	; (8005604 <TIM_Base_SetConfig+0x11c>)
 8005556:	4293      	cmp	r3, r2
 8005558:	d01f      	beq.n	800559a <TIM_Base_SetConfig+0xb2>
 800555a:	687b      	ldr	r3, [r7, #4]
 800555c:	4a2a      	ldr	r2, [pc, #168]	; (8005608 <TIM_Base_SetConfig+0x120>)
 800555e:	4293      	cmp	r3, r2
 8005560:	d01b      	beq.n	800559a <TIM_Base_SetConfig+0xb2>
 8005562:	687b      	ldr	r3, [r7, #4]
 8005564:	4a29      	ldr	r2, [pc, #164]	; (800560c <TIM_Base_SetConfig+0x124>)
 8005566:	4293      	cmp	r3, r2
 8005568:	d017      	beq.n	800559a <TIM_Base_SetConfig+0xb2>
 800556a:	687b      	ldr	r3, [r7, #4]
 800556c:	4a28      	ldr	r2, [pc, #160]	; (8005610 <TIM_Base_SetConfig+0x128>)
 800556e:	4293      	cmp	r3, r2
 8005570:	d013      	beq.n	800559a <TIM_Base_SetConfig+0xb2>
 8005572:	687b      	ldr	r3, [r7, #4]
 8005574:	4a27      	ldr	r2, [pc, #156]	; (8005614 <TIM_Base_SetConfig+0x12c>)
 8005576:	4293      	cmp	r3, r2
 8005578:	d00f      	beq.n	800559a <TIM_Base_SetConfig+0xb2>
 800557a:	687b      	ldr	r3, [r7, #4]
 800557c:	4a26      	ldr	r2, [pc, #152]	; (8005618 <TIM_Base_SetConfig+0x130>)
 800557e:	4293      	cmp	r3, r2
 8005580:	d00b      	beq.n	800559a <TIM_Base_SetConfig+0xb2>
 8005582:	687b      	ldr	r3, [r7, #4]
 8005584:	4a25      	ldr	r2, [pc, #148]	; (800561c <TIM_Base_SetConfig+0x134>)
 8005586:	4293      	cmp	r3, r2
 8005588:	d007      	beq.n	800559a <TIM_Base_SetConfig+0xb2>
 800558a:	687b      	ldr	r3, [r7, #4]
 800558c:	4a24      	ldr	r2, [pc, #144]	; (8005620 <TIM_Base_SetConfig+0x138>)
 800558e:	4293      	cmp	r3, r2
 8005590:	d003      	beq.n	800559a <TIM_Base_SetConfig+0xb2>
 8005592:	687b      	ldr	r3, [r7, #4]
 8005594:	4a23      	ldr	r2, [pc, #140]	; (8005624 <TIM_Base_SetConfig+0x13c>)
 8005596:	4293      	cmp	r3, r2
 8005598:	d108      	bne.n	80055ac <TIM_Base_SetConfig+0xc4>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 800559a:	68fb      	ldr	r3, [r7, #12]
 800559c:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80055a0:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 80055a2:	683b      	ldr	r3, [r7, #0]
 80055a4:	68db      	ldr	r3, [r3, #12]
 80055a6:	68fa      	ldr	r2, [r7, #12]
 80055a8:	4313      	orrs	r3, r2
 80055aa:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 80055ac:	68fb      	ldr	r3, [r7, #12]
 80055ae:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 80055b2:	683b      	ldr	r3, [r7, #0]
 80055b4:	695b      	ldr	r3, [r3, #20]
 80055b6:	4313      	orrs	r3, r2
 80055b8:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 80055ba:	687b      	ldr	r3, [r7, #4]
 80055bc:	68fa      	ldr	r2, [r7, #12]
 80055be:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 80055c0:	683b      	ldr	r3, [r7, #0]
 80055c2:	689a      	ldr	r2, [r3, #8]
 80055c4:	687b      	ldr	r3, [r7, #4]
 80055c6:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 80055c8:	683b      	ldr	r3, [r7, #0]
 80055ca:	681a      	ldr	r2, [r3, #0]
 80055cc:	687b      	ldr	r3, [r7, #4]
 80055ce:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 80055d0:	687b      	ldr	r3, [r7, #4]
 80055d2:	4a0a      	ldr	r2, [pc, #40]	; (80055fc <TIM_Base_SetConfig+0x114>)
 80055d4:	4293      	cmp	r3, r2
 80055d6:	d003      	beq.n	80055e0 <TIM_Base_SetConfig+0xf8>
 80055d8:	687b      	ldr	r3, [r7, #4]
 80055da:	4a0c      	ldr	r2, [pc, #48]	; (800560c <TIM_Base_SetConfig+0x124>)
 80055dc:	4293      	cmp	r3, r2
 80055de:	d103      	bne.n	80055e8 <TIM_Base_SetConfig+0x100>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 80055e0:	683b      	ldr	r3, [r7, #0]
 80055e2:	691a      	ldr	r2, [r3, #16]
 80055e4:	687b      	ldr	r3, [r7, #4]
 80055e6:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 80055e8:	687b      	ldr	r3, [r7, #4]
 80055ea:	2201      	movs	r2, #1
 80055ec:	615a      	str	r2, [r3, #20]
}
 80055ee:	bf00      	nop
 80055f0:	3714      	adds	r7, #20
 80055f2:	46bd      	mov	sp, r7
 80055f4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80055f8:	4770      	bx	lr
 80055fa:	bf00      	nop
 80055fc:	40010000 	.word	0x40010000
 8005600:	40000400 	.word	0x40000400
 8005604:	40000800 	.word	0x40000800
 8005608:	40000c00 	.word	0x40000c00
 800560c:	40010400 	.word	0x40010400
 8005610:	40014000 	.word	0x40014000
 8005614:	40014400 	.word	0x40014400
 8005618:	40014800 	.word	0x40014800
 800561c:	40001800 	.word	0x40001800
 8005620:	40001c00 	.word	0x40001c00
 8005624:	40002000 	.word	0x40002000

08005628 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8005628:	b480      	push	{r7}
 800562a:	b087      	sub	sp, #28
 800562c:	af00      	add	r7, sp, #0
 800562e:	60f8      	str	r0, [r7, #12]
 8005630:	60b9      	str	r1, [r7, #8]
 8005632:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 8005634:	68fb      	ldr	r3, [r7, #12]
 8005636:	6a1b      	ldr	r3, [r3, #32]
 8005638:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 800563a:	68fb      	ldr	r3, [r7, #12]
 800563c:	6a1b      	ldr	r3, [r3, #32]
 800563e:	f023 0201 	bic.w	r2, r3, #1
 8005642:	68fb      	ldr	r3, [r7, #12]
 8005644:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8005646:	68fb      	ldr	r3, [r7, #12]
 8005648:	699b      	ldr	r3, [r3, #24]
 800564a:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 800564c:	693b      	ldr	r3, [r7, #16]
 800564e:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8005652:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 8005654:	687b      	ldr	r3, [r7, #4]
 8005656:	011b      	lsls	r3, r3, #4
 8005658:	693a      	ldr	r2, [r7, #16]
 800565a:	4313      	orrs	r3, r2
 800565c:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 800565e:	697b      	ldr	r3, [r7, #20]
 8005660:	f023 030a 	bic.w	r3, r3, #10
 8005664:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 8005666:	697a      	ldr	r2, [r7, #20]
 8005668:	68bb      	ldr	r3, [r7, #8]
 800566a:	4313      	orrs	r3, r2
 800566c:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 800566e:	68fb      	ldr	r3, [r7, #12]
 8005670:	693a      	ldr	r2, [r7, #16]
 8005672:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8005674:	68fb      	ldr	r3, [r7, #12]
 8005676:	697a      	ldr	r2, [r7, #20]
 8005678:	621a      	str	r2, [r3, #32]
}
 800567a:	bf00      	nop
 800567c:	371c      	adds	r7, #28
 800567e:	46bd      	mov	sp, r7
 8005680:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005684:	4770      	bx	lr

08005686 <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8005686:	b480      	push	{r7}
 8005688:	b087      	sub	sp, #28
 800568a:	af00      	add	r7, sp, #0
 800568c:	60f8      	str	r0, [r7, #12]
 800568e:	60b9      	str	r1, [r7, #8]
 8005690:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8005692:	68fb      	ldr	r3, [r7, #12]
 8005694:	6a1b      	ldr	r3, [r3, #32]
 8005696:	f023 0210 	bic.w	r2, r3, #16
 800569a:	68fb      	ldr	r3, [r7, #12]
 800569c:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 800569e:	68fb      	ldr	r3, [r7, #12]
 80056a0:	699b      	ldr	r3, [r3, #24]
 80056a2:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 80056a4:	68fb      	ldr	r3, [r7, #12]
 80056a6:	6a1b      	ldr	r3, [r3, #32]
 80056a8:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 80056aa:	697b      	ldr	r3, [r7, #20]
 80056ac:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 80056b0:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 80056b2:	687b      	ldr	r3, [r7, #4]
 80056b4:	031b      	lsls	r3, r3, #12
 80056b6:	697a      	ldr	r2, [r7, #20]
 80056b8:	4313      	orrs	r3, r2
 80056ba:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 80056bc:	693b      	ldr	r3, [r7, #16]
 80056be:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 80056c2:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity << 4U);
 80056c4:	68bb      	ldr	r3, [r7, #8]
 80056c6:	011b      	lsls	r3, r3, #4
 80056c8:	693a      	ldr	r2, [r7, #16]
 80056ca:	4313      	orrs	r3, r2
 80056cc:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 80056ce:	68fb      	ldr	r3, [r7, #12]
 80056d0:	697a      	ldr	r2, [r7, #20]
 80056d2:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 80056d4:	68fb      	ldr	r3, [r7, #12]
 80056d6:	693a      	ldr	r2, [r7, #16]
 80056d8:	621a      	str	r2, [r3, #32]
}
 80056da:	bf00      	nop
 80056dc:	371c      	adds	r7, #28
 80056de:	46bd      	mov	sp, r7
 80056e0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80056e4:	4770      	bx	lr

080056e6 <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 80056e6:	b480      	push	{r7}
 80056e8:	b085      	sub	sp, #20
 80056ea:	af00      	add	r7, sp, #0
 80056ec:	6078      	str	r0, [r7, #4]
 80056ee:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 80056f0:	687b      	ldr	r3, [r7, #4]
 80056f2:	689b      	ldr	r3, [r3, #8]
 80056f4:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 80056f6:	68fb      	ldr	r3, [r7, #12]
 80056f8:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80056fc:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 80056fe:	683a      	ldr	r2, [r7, #0]
 8005700:	68fb      	ldr	r3, [r7, #12]
 8005702:	4313      	orrs	r3, r2
 8005704:	f043 0307 	orr.w	r3, r3, #7
 8005708:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 800570a:	687b      	ldr	r3, [r7, #4]
 800570c:	68fa      	ldr	r2, [r7, #12]
 800570e:	609a      	str	r2, [r3, #8]
}
 8005710:	bf00      	nop
 8005712:	3714      	adds	r7, #20
 8005714:	46bd      	mov	sp, r7
 8005716:	f85d 7b04 	ldr.w	r7, [sp], #4
 800571a:	4770      	bx	lr

0800571c <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 800571c:	b480      	push	{r7}
 800571e:	b087      	sub	sp, #28
 8005720:	af00      	add	r7, sp, #0
 8005722:	60f8      	str	r0, [r7, #12]
 8005724:	60b9      	str	r1, [r7, #8]
 8005726:	607a      	str	r2, [r7, #4]
 8005728:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 800572a:	68fb      	ldr	r3, [r7, #12]
 800572c:	689b      	ldr	r3, [r3, #8]
 800572e:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8005730:	697b      	ldr	r3, [r7, #20]
 8005732:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8005736:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 8005738:	683b      	ldr	r3, [r7, #0]
 800573a:	021a      	lsls	r2, r3, #8
 800573c:	687b      	ldr	r3, [r7, #4]
 800573e:	431a      	orrs	r2, r3
 8005740:	68bb      	ldr	r3, [r7, #8]
 8005742:	4313      	orrs	r3, r2
 8005744:	697a      	ldr	r2, [r7, #20]
 8005746:	4313      	orrs	r3, r2
 8005748:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 800574a:	68fb      	ldr	r3, [r7, #12]
 800574c:	697a      	ldr	r2, [r7, #20]
 800574e:	609a      	str	r2, [r3, #8]
}
 8005750:	bf00      	nop
 8005752:	371c      	adds	r7, #28
 8005754:	46bd      	mov	sp, r7
 8005756:	f85d 7b04 	ldr.w	r7, [sp], #4
 800575a:	4770      	bx	lr

0800575c <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        TIM_MasterConfigTypeDef *sMasterConfig)
{
 800575c:	b480      	push	{r7}
 800575e:	b085      	sub	sp, #20
 8005760:	af00      	add	r7, sp, #0
 8005762:	6078      	str	r0, [r7, #4]
 8005764:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 8005766:	687b      	ldr	r3, [r7, #4]
 8005768:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800576c:	2b01      	cmp	r3, #1
 800576e:	d101      	bne.n	8005774 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8005770:	2302      	movs	r3, #2
 8005772:	e05a      	b.n	800582a <HAL_TIMEx_MasterConfigSynchronization+0xce>
 8005774:	687b      	ldr	r3, [r7, #4]
 8005776:	2201      	movs	r2, #1
 8005778:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 800577c:	687b      	ldr	r3, [r7, #4]
 800577e:	2202      	movs	r2, #2
 8005780:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8005784:	687b      	ldr	r3, [r7, #4]
 8005786:	681b      	ldr	r3, [r3, #0]
 8005788:	685b      	ldr	r3, [r3, #4]
 800578a:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 800578c:	687b      	ldr	r3, [r7, #4]
 800578e:	681b      	ldr	r3, [r3, #0]
 8005790:	689b      	ldr	r3, [r3, #8]
 8005792:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8005794:	68fb      	ldr	r3, [r7, #12]
 8005796:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800579a:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 800579c:	683b      	ldr	r3, [r7, #0]
 800579e:	681b      	ldr	r3, [r3, #0]
 80057a0:	68fa      	ldr	r2, [r7, #12]
 80057a2:	4313      	orrs	r3, r2
 80057a4:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 80057a6:	687b      	ldr	r3, [r7, #4]
 80057a8:	681b      	ldr	r3, [r3, #0]
 80057aa:	68fa      	ldr	r2, [r7, #12]
 80057ac:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 80057ae:	687b      	ldr	r3, [r7, #4]
 80057b0:	681b      	ldr	r3, [r3, #0]
 80057b2:	4a21      	ldr	r2, [pc, #132]	; (8005838 <HAL_TIMEx_MasterConfigSynchronization+0xdc>)
 80057b4:	4293      	cmp	r3, r2
 80057b6:	d022      	beq.n	80057fe <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 80057b8:	687b      	ldr	r3, [r7, #4]
 80057ba:	681b      	ldr	r3, [r3, #0]
 80057bc:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80057c0:	d01d      	beq.n	80057fe <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 80057c2:	687b      	ldr	r3, [r7, #4]
 80057c4:	681b      	ldr	r3, [r3, #0]
 80057c6:	4a1d      	ldr	r2, [pc, #116]	; (800583c <HAL_TIMEx_MasterConfigSynchronization+0xe0>)
 80057c8:	4293      	cmp	r3, r2
 80057ca:	d018      	beq.n	80057fe <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 80057cc:	687b      	ldr	r3, [r7, #4]
 80057ce:	681b      	ldr	r3, [r3, #0]
 80057d0:	4a1b      	ldr	r2, [pc, #108]	; (8005840 <HAL_TIMEx_MasterConfigSynchronization+0xe4>)
 80057d2:	4293      	cmp	r3, r2
 80057d4:	d013      	beq.n	80057fe <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 80057d6:	687b      	ldr	r3, [r7, #4]
 80057d8:	681b      	ldr	r3, [r3, #0]
 80057da:	4a1a      	ldr	r2, [pc, #104]	; (8005844 <HAL_TIMEx_MasterConfigSynchronization+0xe8>)
 80057dc:	4293      	cmp	r3, r2
 80057de:	d00e      	beq.n	80057fe <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 80057e0:	687b      	ldr	r3, [r7, #4]
 80057e2:	681b      	ldr	r3, [r3, #0]
 80057e4:	4a18      	ldr	r2, [pc, #96]	; (8005848 <HAL_TIMEx_MasterConfigSynchronization+0xec>)
 80057e6:	4293      	cmp	r3, r2
 80057e8:	d009      	beq.n	80057fe <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 80057ea:	687b      	ldr	r3, [r7, #4]
 80057ec:	681b      	ldr	r3, [r3, #0]
 80057ee:	4a17      	ldr	r2, [pc, #92]	; (800584c <HAL_TIMEx_MasterConfigSynchronization+0xf0>)
 80057f0:	4293      	cmp	r3, r2
 80057f2:	d004      	beq.n	80057fe <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 80057f4:	687b      	ldr	r3, [r7, #4]
 80057f6:	681b      	ldr	r3, [r3, #0]
 80057f8:	4a15      	ldr	r2, [pc, #84]	; (8005850 <HAL_TIMEx_MasterConfigSynchronization+0xf4>)
 80057fa:	4293      	cmp	r3, r2
 80057fc:	d10c      	bne.n	8005818 <HAL_TIMEx_MasterConfigSynchronization+0xbc>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 80057fe:	68bb      	ldr	r3, [r7, #8]
 8005800:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8005804:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8005806:	683b      	ldr	r3, [r7, #0]
 8005808:	685b      	ldr	r3, [r3, #4]
 800580a:	68ba      	ldr	r2, [r7, #8]
 800580c:	4313      	orrs	r3, r2
 800580e:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8005810:	687b      	ldr	r3, [r7, #4]
 8005812:	681b      	ldr	r3, [r3, #0]
 8005814:	68ba      	ldr	r2, [r7, #8]
 8005816:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8005818:	687b      	ldr	r3, [r7, #4]
 800581a:	2201      	movs	r2, #1
 800581c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8005820:	687b      	ldr	r3, [r7, #4]
 8005822:	2200      	movs	r2, #0
 8005824:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8005828:	2300      	movs	r3, #0
}
 800582a:	4618      	mov	r0, r3
 800582c:	3714      	adds	r7, #20
 800582e:	46bd      	mov	sp, r7
 8005830:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005834:	4770      	bx	lr
 8005836:	bf00      	nop
 8005838:	40010000 	.word	0x40010000
 800583c:	40000400 	.word	0x40000400
 8005840:	40000800 	.word	0x40000800
 8005844:	40000c00 	.word	0x40000c00
 8005848:	40010400 	.word	0x40010400
 800584c:	40014000 	.word	0x40014000
 8005850:	40001800 	.word	0x40001800

08005854 <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 8005854:	b480      	push	{r7}
 8005856:	b083      	sub	sp, #12
 8005858:	af00      	add	r7, sp, #0
 800585a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 800585c:	bf00      	nop
 800585e:	370c      	adds	r7, #12
 8005860:	46bd      	mov	sp, r7
 8005862:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005866:	4770      	bx	lr

08005868 <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 8005868:	b480      	push	{r7}
 800586a:	b083      	sub	sp, #12
 800586c:	af00      	add	r7, sp, #0
 800586e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 8005870:	bf00      	nop
 8005872:	370c      	adds	r7, #12
 8005874:	46bd      	mov	sp, r7
 8005876:	f85d 7b04 	ldr.w	r7, [sp], #4
 800587a:	4770      	bx	lr

0800587c <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 800587c:	b580      	push	{r7, lr}
 800587e:	b082      	sub	sp, #8
 8005880:	af00      	add	r7, sp, #0
 8005882:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8005884:	687b      	ldr	r3, [r7, #4]
 8005886:	2b00      	cmp	r3, #0
 8005888:	d101      	bne.n	800588e <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 800588a:	2301      	movs	r3, #1
 800588c:	e03f      	b.n	800590e <HAL_UART_Init+0x92>
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));

  if (huart->gState == HAL_UART_STATE_RESET)
 800588e:	687b      	ldr	r3, [r7, #4]
 8005890:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8005894:	b2db      	uxtb	r3, r3
 8005896:	2b00      	cmp	r3, #0
 8005898:	d106      	bne.n	80058a8 <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 800589a:	687b      	ldr	r3, [r7, #4]
 800589c:	2200      	movs	r2, #0
 800589e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 80058a2:	6878      	ldr	r0, [r7, #4]
 80058a4:	f7fb fcd8 	bl	8001258 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 80058a8:	687b      	ldr	r3, [r7, #4]
 80058aa:	2224      	movs	r2, #36	; 0x24
 80058ac:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 80058b0:	687b      	ldr	r3, [r7, #4]
 80058b2:	681b      	ldr	r3, [r3, #0]
 80058b4:	68da      	ldr	r2, [r3, #12]
 80058b6:	687b      	ldr	r3, [r7, #4]
 80058b8:	681b      	ldr	r3, [r3, #0]
 80058ba:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 80058be:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 80058c0:	6878      	ldr	r0, [r7, #4]
 80058c2:	f000 f929 	bl	8005b18 <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 80058c6:	687b      	ldr	r3, [r7, #4]
 80058c8:	681b      	ldr	r3, [r3, #0]
 80058ca:	691a      	ldr	r2, [r3, #16]
 80058cc:	687b      	ldr	r3, [r7, #4]
 80058ce:	681b      	ldr	r3, [r3, #0]
 80058d0:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 80058d4:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 80058d6:	687b      	ldr	r3, [r7, #4]
 80058d8:	681b      	ldr	r3, [r3, #0]
 80058da:	695a      	ldr	r2, [r3, #20]
 80058dc:	687b      	ldr	r3, [r7, #4]
 80058de:	681b      	ldr	r3, [r3, #0]
 80058e0:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 80058e4:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 80058e6:	687b      	ldr	r3, [r7, #4]
 80058e8:	681b      	ldr	r3, [r3, #0]
 80058ea:	68da      	ldr	r2, [r3, #12]
 80058ec:	687b      	ldr	r3, [r7, #4]
 80058ee:	681b      	ldr	r3, [r3, #0]
 80058f0:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 80058f4:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 80058f6:	687b      	ldr	r3, [r7, #4]
 80058f8:	2200      	movs	r2, #0
 80058fa:	641a      	str	r2, [r3, #64]	; 0x40
  huart->gState = HAL_UART_STATE_READY;
 80058fc:	687b      	ldr	r3, [r7, #4]
 80058fe:	2220      	movs	r2, #32
 8005900:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  huart->RxState = HAL_UART_STATE_READY;
 8005904:	687b      	ldr	r3, [r7, #4]
 8005906:	2220      	movs	r2, #32
 8005908:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 800590c:	2300      	movs	r3, #0
}
 800590e:	4618      	mov	r0, r3
 8005910:	3708      	adds	r7, #8
 8005912:	46bd      	mov	sp, r7
 8005914:	bd80      	pop	{r7, pc}

08005916 <HAL_UART_Transmit>:
  * @param  Size  Amount of data elements (u8 or u16) to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8005916:	b580      	push	{r7, lr}
 8005918:	b08a      	sub	sp, #40	; 0x28
 800591a:	af02      	add	r7, sp, #8
 800591c:	60f8      	str	r0, [r7, #12]
 800591e:	60b9      	str	r1, [r7, #8]
 8005920:	603b      	str	r3, [r7, #0]
 8005922:	4613      	mov	r3, r2
 8005924:	80fb      	strh	r3, [r7, #6]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart = 0U;
 8005926:	2300      	movs	r3, #0
 8005928:	617b      	str	r3, [r7, #20]

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 800592a:	68fb      	ldr	r3, [r7, #12]
 800592c:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8005930:	b2db      	uxtb	r3, r3
 8005932:	2b20      	cmp	r3, #32
 8005934:	d17c      	bne.n	8005a30 <HAL_UART_Transmit+0x11a>
  {
    if ((pData == NULL) || (Size == 0U))
 8005936:	68bb      	ldr	r3, [r7, #8]
 8005938:	2b00      	cmp	r3, #0
 800593a:	d002      	beq.n	8005942 <HAL_UART_Transmit+0x2c>
 800593c:	88fb      	ldrh	r3, [r7, #6]
 800593e:	2b00      	cmp	r3, #0
 8005940:	d101      	bne.n	8005946 <HAL_UART_Transmit+0x30>
    {
      return  HAL_ERROR;
 8005942:	2301      	movs	r3, #1
 8005944:	e075      	b.n	8005a32 <HAL_UART_Transmit+0x11c>
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 8005946:	68fb      	ldr	r3, [r7, #12]
 8005948:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800594c:	2b01      	cmp	r3, #1
 800594e:	d101      	bne.n	8005954 <HAL_UART_Transmit+0x3e>
 8005950:	2302      	movs	r3, #2
 8005952:	e06e      	b.n	8005a32 <HAL_UART_Transmit+0x11c>
 8005954:	68fb      	ldr	r3, [r7, #12]
 8005956:	2201      	movs	r2, #1
 8005958:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 800595c:	68fb      	ldr	r3, [r7, #12]
 800595e:	2200      	movs	r2, #0
 8005960:	641a      	str	r2, [r3, #64]	; 0x40
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8005962:	68fb      	ldr	r3, [r7, #12]
 8005964:	2221      	movs	r2, #33	; 0x21
 8005966:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 800596a:	f7fc f8b1 	bl	8001ad0 <HAL_GetTick>
 800596e:	6178      	str	r0, [r7, #20]

    huart->TxXferSize = Size;
 8005970:	68fb      	ldr	r3, [r7, #12]
 8005972:	88fa      	ldrh	r2, [r7, #6]
 8005974:	849a      	strh	r2, [r3, #36]	; 0x24
    huart->TxXferCount = Size;
 8005976:	68fb      	ldr	r3, [r7, #12]
 8005978:	88fa      	ldrh	r2, [r7, #6]
 800597a:	84da      	strh	r2, [r3, #38]	; 0x26

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 800597c:	68fb      	ldr	r3, [r7, #12]
 800597e:	689b      	ldr	r3, [r3, #8]
 8005980:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8005984:	d108      	bne.n	8005998 <HAL_UART_Transmit+0x82>
 8005986:	68fb      	ldr	r3, [r7, #12]
 8005988:	691b      	ldr	r3, [r3, #16]
 800598a:	2b00      	cmp	r3, #0
 800598c:	d104      	bne.n	8005998 <HAL_UART_Transmit+0x82>
    {
      pdata8bits  = NULL;
 800598e:	2300      	movs	r3, #0
 8005990:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 8005992:	68bb      	ldr	r3, [r7, #8]
 8005994:	61bb      	str	r3, [r7, #24]
 8005996:	e003      	b.n	80059a0 <HAL_UART_Transmit+0x8a>
    }
    else
    {
      pdata8bits  = pData;
 8005998:	68bb      	ldr	r3, [r7, #8]
 800599a:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 800599c:	2300      	movs	r3, #0
 800599e:	61bb      	str	r3, [r7, #24]
    }

    /* Process Unlocked */
    __HAL_UNLOCK(huart);
 80059a0:	68fb      	ldr	r3, [r7, #12]
 80059a2:	2200      	movs	r2, #0
 80059a4:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    while (huart->TxXferCount > 0U)
 80059a8:	e02a      	b.n	8005a00 <HAL_UART_Transmit+0xea>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 80059aa:	683b      	ldr	r3, [r7, #0]
 80059ac:	9300      	str	r3, [sp, #0]
 80059ae:	697b      	ldr	r3, [r7, #20]
 80059b0:	2200      	movs	r2, #0
 80059b2:	2180      	movs	r1, #128	; 0x80
 80059b4:	68f8      	ldr	r0, [r7, #12]
 80059b6:	f000 f840 	bl	8005a3a <UART_WaitOnFlagUntilTimeout>
 80059ba:	4603      	mov	r3, r0
 80059bc:	2b00      	cmp	r3, #0
 80059be:	d001      	beq.n	80059c4 <HAL_UART_Transmit+0xae>
      {
        return HAL_TIMEOUT;
 80059c0:	2303      	movs	r3, #3
 80059c2:	e036      	b.n	8005a32 <HAL_UART_Transmit+0x11c>
      }
      if (pdata8bits == NULL)
 80059c4:	69fb      	ldr	r3, [r7, #28]
 80059c6:	2b00      	cmp	r3, #0
 80059c8:	d10b      	bne.n	80059e2 <HAL_UART_Transmit+0xcc>
      {
        huart->Instance->DR = (uint16_t)(*pdata16bits & 0x01FFU);
 80059ca:	69bb      	ldr	r3, [r7, #24]
 80059cc:	881b      	ldrh	r3, [r3, #0]
 80059ce:	461a      	mov	r2, r3
 80059d0:	68fb      	ldr	r3, [r7, #12]
 80059d2:	681b      	ldr	r3, [r3, #0]
 80059d4:	f3c2 0208 	ubfx	r2, r2, #0, #9
 80059d8:	605a      	str	r2, [r3, #4]
        pdata16bits++;
 80059da:	69bb      	ldr	r3, [r7, #24]
 80059dc:	3302      	adds	r3, #2
 80059de:	61bb      	str	r3, [r7, #24]
 80059e0:	e007      	b.n	80059f2 <HAL_UART_Transmit+0xdc>
      }
      else
      {
        huart->Instance->DR = (uint8_t)(*pdata8bits & 0xFFU);
 80059e2:	69fb      	ldr	r3, [r7, #28]
 80059e4:	781a      	ldrb	r2, [r3, #0]
 80059e6:	68fb      	ldr	r3, [r7, #12]
 80059e8:	681b      	ldr	r3, [r3, #0]
 80059ea:	605a      	str	r2, [r3, #4]
        pdata8bits++;
 80059ec:	69fb      	ldr	r3, [r7, #28]
 80059ee:	3301      	adds	r3, #1
 80059f0:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 80059f2:	68fb      	ldr	r3, [r7, #12]
 80059f4:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 80059f6:	b29b      	uxth	r3, r3
 80059f8:	3b01      	subs	r3, #1
 80059fa:	b29a      	uxth	r2, r3
 80059fc:	68fb      	ldr	r3, [r7, #12]
 80059fe:	84da      	strh	r2, [r3, #38]	; 0x26
    while (huart->TxXferCount > 0U)
 8005a00:	68fb      	ldr	r3, [r7, #12]
 8005a02:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 8005a04:	b29b      	uxth	r3, r3
 8005a06:	2b00      	cmp	r3, #0
 8005a08:	d1cf      	bne.n	80059aa <HAL_UART_Transmit+0x94>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 8005a0a:	683b      	ldr	r3, [r7, #0]
 8005a0c:	9300      	str	r3, [sp, #0]
 8005a0e:	697b      	ldr	r3, [r7, #20]
 8005a10:	2200      	movs	r2, #0
 8005a12:	2140      	movs	r1, #64	; 0x40
 8005a14:	68f8      	ldr	r0, [r7, #12]
 8005a16:	f000 f810 	bl	8005a3a <UART_WaitOnFlagUntilTimeout>
 8005a1a:	4603      	mov	r3, r0
 8005a1c:	2b00      	cmp	r3, #0
 8005a1e:	d001      	beq.n	8005a24 <HAL_UART_Transmit+0x10e>
    {
      return HAL_TIMEOUT;
 8005a20:	2303      	movs	r3, #3
 8005a22:	e006      	b.n	8005a32 <HAL_UART_Transmit+0x11c>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 8005a24:	68fb      	ldr	r3, [r7, #12]
 8005a26:	2220      	movs	r2, #32
 8005a28:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    return HAL_OK;
 8005a2c:	2300      	movs	r3, #0
 8005a2e:	e000      	b.n	8005a32 <HAL_UART_Transmit+0x11c>
  }
  else
  {
    return HAL_BUSY;
 8005a30:	2302      	movs	r3, #2
  }
}
 8005a32:	4618      	mov	r0, r3
 8005a34:	3720      	adds	r7, #32
 8005a36:	46bd      	mov	sp, r7
 8005a38:	bd80      	pop	{r7, pc}

08005a3a <UART_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                                     uint32_t Tickstart, uint32_t Timeout)
{
 8005a3a:	b580      	push	{r7, lr}
 8005a3c:	b090      	sub	sp, #64	; 0x40
 8005a3e:	af00      	add	r7, sp, #0
 8005a40:	60f8      	str	r0, [r7, #12]
 8005a42:	60b9      	str	r1, [r7, #8]
 8005a44:	603b      	str	r3, [r7, #0]
 8005a46:	4613      	mov	r3, r2
 8005a48:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8005a4a:	e050      	b.n	8005aee <UART_WaitOnFlagUntilTimeout+0xb4>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8005a4c:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8005a4e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005a52:	d04c      	beq.n	8005aee <UART_WaitOnFlagUntilTimeout+0xb4>
    {
      if ((Timeout == 0U) || ((HAL_GetTick() - Tickstart) > Timeout))
 8005a54:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8005a56:	2b00      	cmp	r3, #0
 8005a58:	d007      	beq.n	8005a6a <UART_WaitOnFlagUntilTimeout+0x30>
 8005a5a:	f7fc f839 	bl	8001ad0 <HAL_GetTick>
 8005a5e:	4602      	mov	r2, r0
 8005a60:	683b      	ldr	r3, [r7, #0]
 8005a62:	1ad3      	subs	r3, r2, r3
 8005a64:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8005a66:	429a      	cmp	r2, r3
 8005a68:	d241      	bcs.n	8005aee <UART_WaitOnFlagUntilTimeout+0xb4>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts for the interrupt process */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 8005a6a:	68fb      	ldr	r3, [r7, #12]
 8005a6c:	681b      	ldr	r3, [r3, #0]
 8005a6e:	330c      	adds	r3, #12
 8005a70:	62bb      	str	r3, [r7, #40]	; 0x28
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005a72:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005a74:	e853 3f00 	ldrex	r3, [r3]
 8005a78:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 8005a7a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005a7c:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 8005a80:	63fb      	str	r3, [r7, #60]	; 0x3c
 8005a82:	68fb      	ldr	r3, [r7, #12]
 8005a84:	681b      	ldr	r3, [r3, #0]
 8005a86:	330c      	adds	r3, #12
 8005a88:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 8005a8a:	637a      	str	r2, [r7, #52]	; 0x34
 8005a8c:	633b      	str	r3, [r7, #48]	; 0x30
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005a8e:	6b39      	ldr	r1, [r7, #48]	; 0x30
 8005a90:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8005a92:	e841 2300 	strex	r3, r2, [r1]
 8005a96:	62fb      	str	r3, [r7, #44]	; 0x2c
   return(result);
 8005a98:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005a9a:	2b00      	cmp	r3, #0
 8005a9c:	d1e5      	bne.n	8005a6a <UART_WaitOnFlagUntilTimeout+0x30>
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8005a9e:	68fb      	ldr	r3, [r7, #12]
 8005aa0:	681b      	ldr	r3, [r3, #0]
 8005aa2:	3314      	adds	r3, #20
 8005aa4:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005aa6:	697b      	ldr	r3, [r7, #20]
 8005aa8:	e853 3f00 	ldrex	r3, [r3]
 8005aac:	613b      	str	r3, [r7, #16]
   return(result);
 8005aae:	693b      	ldr	r3, [r7, #16]
 8005ab0:	f023 0301 	bic.w	r3, r3, #1
 8005ab4:	63bb      	str	r3, [r7, #56]	; 0x38
 8005ab6:	68fb      	ldr	r3, [r7, #12]
 8005ab8:	681b      	ldr	r3, [r3, #0]
 8005aba:	3314      	adds	r3, #20
 8005abc:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8005abe:	623a      	str	r2, [r7, #32]
 8005ac0:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005ac2:	69f9      	ldr	r1, [r7, #28]
 8005ac4:	6a3a      	ldr	r2, [r7, #32]
 8005ac6:	e841 2300 	strex	r3, r2, [r1]
 8005aca:	61bb      	str	r3, [r7, #24]
   return(result);
 8005acc:	69bb      	ldr	r3, [r7, #24]
 8005ace:	2b00      	cmp	r3, #0
 8005ad0:	d1e5      	bne.n	8005a9e <UART_WaitOnFlagUntilTimeout+0x64>

        huart->gState  = HAL_UART_STATE_READY;
 8005ad2:	68fb      	ldr	r3, [r7, #12]
 8005ad4:	2220      	movs	r2, #32
 8005ad6:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        huart->RxState = HAL_UART_STATE_READY;
 8005ada:	68fb      	ldr	r3, [r7, #12]
 8005adc:	2220      	movs	r2, #32
 8005ade:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

        /* Process Unlocked */
        __HAL_UNLOCK(huart);
 8005ae2:	68fb      	ldr	r3, [r7, #12]
 8005ae4:	2200      	movs	r2, #0
 8005ae6:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_TIMEOUT;
 8005aea:	2303      	movs	r3, #3
 8005aec:	e00f      	b.n	8005b0e <UART_WaitOnFlagUntilTimeout+0xd4>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8005aee:	68fb      	ldr	r3, [r7, #12]
 8005af0:	681b      	ldr	r3, [r3, #0]
 8005af2:	681a      	ldr	r2, [r3, #0]
 8005af4:	68bb      	ldr	r3, [r7, #8]
 8005af6:	4013      	ands	r3, r2
 8005af8:	68ba      	ldr	r2, [r7, #8]
 8005afa:	429a      	cmp	r2, r3
 8005afc:	bf0c      	ite	eq
 8005afe:	2301      	moveq	r3, #1
 8005b00:	2300      	movne	r3, #0
 8005b02:	b2db      	uxtb	r3, r3
 8005b04:	461a      	mov	r2, r3
 8005b06:	79fb      	ldrb	r3, [r7, #7]
 8005b08:	429a      	cmp	r2, r3
 8005b0a:	d09f      	beq.n	8005a4c <UART_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 8005b0c:	2300      	movs	r3, #0
}
 8005b0e:	4618      	mov	r0, r3
 8005b10:	3740      	adds	r7, #64	; 0x40
 8005b12:	46bd      	mov	sp, r7
 8005b14:	bd80      	pop	{r7, pc}
	...

08005b18 <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 8005b18:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8005b1c:	b0c0      	sub	sp, #256	; 0x100
 8005b1e:	af00      	add	r7, sp, #0
 8005b20:	f8c7 00f4 	str.w	r0, [r7, #244]	; 0xf4
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8005b24:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8005b28:	681b      	ldr	r3, [r3, #0]
 8005b2a:	691b      	ldr	r3, [r3, #16]
 8005b2c:	f423 5040 	bic.w	r0, r3, #12288	; 0x3000
 8005b30:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8005b34:	68d9      	ldr	r1, [r3, #12]
 8005b36:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8005b3a:	681a      	ldr	r2, [r3, #0]
 8005b3c:	ea40 0301 	orr.w	r3, r0, r1
 8005b40:	6113      	str	r3, [r2, #16]
     Set the M bits according to huart->Init.WordLength value
     Set PCE and PS bits according to huart->Init.Parity value
     Set TE and RE bits according to huart->Init.Mode value
     Set OVER8 bit according to huart->Init.OverSampling value */

  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 8005b42:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8005b46:	689a      	ldr	r2, [r3, #8]
 8005b48:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8005b4c:	691b      	ldr	r3, [r3, #16]
 8005b4e:	431a      	orrs	r2, r3
 8005b50:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8005b54:	695b      	ldr	r3, [r3, #20]
 8005b56:	431a      	orrs	r2, r3
 8005b58:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8005b5c:	69db      	ldr	r3, [r3, #28]
 8005b5e:	4313      	orrs	r3, r2
 8005b60:	f8c7 30f8 	str.w	r3, [r7, #248]	; 0xf8
  MODIFY_REG(huart->Instance->CR1,
 8005b64:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8005b68:	681b      	ldr	r3, [r3, #0]
 8005b6a:	68db      	ldr	r3, [r3, #12]
 8005b6c:	f423 4116 	bic.w	r1, r3, #38400	; 0x9600
 8005b70:	f021 010c 	bic.w	r1, r1, #12
 8005b74:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8005b78:	681a      	ldr	r2, [r3, #0]
 8005b7a:	f8d7 30f8 	ldr.w	r3, [r7, #248]	; 0xf8
 8005b7e:	430b      	orrs	r3, r1
 8005b80:	60d3      	str	r3, [r2, #12]
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 8005b82:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8005b86:	681b      	ldr	r3, [r3, #0]
 8005b88:	695b      	ldr	r3, [r3, #20]
 8005b8a:	f423 7040 	bic.w	r0, r3, #768	; 0x300
 8005b8e:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8005b92:	6999      	ldr	r1, [r3, #24]
 8005b94:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8005b98:	681a      	ldr	r2, [r3, #0]
 8005b9a:	ea40 0301 	orr.w	r3, r0, r1
 8005b9e:	6153      	str	r3, [r2, #20]
    if ((huart->Instance == USART1) || (huart->Instance == USART6) || (huart->Instance == UART9) || (huart->Instance == UART10))
    {
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#elif defined(USART6)
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 8005ba0:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8005ba4:	681a      	ldr	r2, [r3, #0]
 8005ba6:	4b8f      	ldr	r3, [pc, #572]	; (8005de4 <UART_SetConfig+0x2cc>)
 8005ba8:	429a      	cmp	r2, r3
 8005baa:	d005      	beq.n	8005bb8 <UART_SetConfig+0xa0>
 8005bac:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8005bb0:	681a      	ldr	r2, [r3, #0]
 8005bb2:	4b8d      	ldr	r3, [pc, #564]	; (8005de8 <UART_SetConfig+0x2d0>)
 8005bb4:	429a      	cmp	r2, r3
 8005bb6:	d104      	bne.n	8005bc2 <UART_SetConfig+0xaa>
    {
      pclk = HAL_RCC_GetPCLK2Freq();
 8005bb8:	f7fe ff1c 	bl	80049f4 <HAL_RCC_GetPCLK2Freq>
 8005bbc:	f8c7 00fc 	str.w	r0, [r7, #252]	; 0xfc
 8005bc0:	e003      	b.n	8005bca <UART_SetConfig+0xb2>
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#endif /* USART6 */
    else
    {
      pclk = HAL_RCC_GetPCLK1Freq();
 8005bc2:	f7fe ff03 	bl	80049cc <HAL_RCC_GetPCLK1Freq>
 8005bc6:	f8c7 00fc 	str.w	r0, [r7, #252]	; 0xfc
    }
  /*-------------------------- USART BRR Configuration ---------------------*/
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8005bca:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8005bce:	69db      	ldr	r3, [r3, #28]
 8005bd0:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8005bd4:	f040 810c 	bne.w	8005df0 <UART_SetConfig+0x2d8>
  {
    huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 8005bd8:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8005bdc:	2200      	movs	r2, #0
 8005bde:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
 8005be2:	f8c7 20ec 	str.w	r2, [r7, #236]	; 0xec
 8005be6:	e9d7 453a 	ldrd	r4, r5, [r7, #232]	; 0xe8
 8005bea:	4622      	mov	r2, r4
 8005bec:	462b      	mov	r3, r5
 8005bee:	1891      	adds	r1, r2, r2
 8005bf0:	65b9      	str	r1, [r7, #88]	; 0x58
 8005bf2:	415b      	adcs	r3, r3
 8005bf4:	65fb      	str	r3, [r7, #92]	; 0x5c
 8005bf6:	e9d7 2316 	ldrd	r2, r3, [r7, #88]	; 0x58
 8005bfa:	4621      	mov	r1, r4
 8005bfc:	eb12 0801 	adds.w	r8, r2, r1
 8005c00:	4629      	mov	r1, r5
 8005c02:	eb43 0901 	adc.w	r9, r3, r1
 8005c06:	f04f 0200 	mov.w	r2, #0
 8005c0a:	f04f 0300 	mov.w	r3, #0
 8005c0e:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 8005c12:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 8005c16:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 8005c1a:	4690      	mov	r8, r2
 8005c1c:	4699      	mov	r9, r3
 8005c1e:	4623      	mov	r3, r4
 8005c20:	eb18 0303 	adds.w	r3, r8, r3
 8005c24:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
 8005c28:	462b      	mov	r3, r5
 8005c2a:	eb49 0303 	adc.w	r3, r9, r3
 8005c2e:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
 8005c32:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8005c36:	685b      	ldr	r3, [r3, #4]
 8005c38:	2200      	movs	r2, #0
 8005c3a:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
 8005c3e:	f8c7 20dc 	str.w	r2, [r7, #220]	; 0xdc
 8005c42:	e9d7 1236 	ldrd	r1, r2, [r7, #216]	; 0xd8
 8005c46:	460b      	mov	r3, r1
 8005c48:	18db      	adds	r3, r3, r3
 8005c4a:	653b      	str	r3, [r7, #80]	; 0x50
 8005c4c:	4613      	mov	r3, r2
 8005c4e:	eb42 0303 	adc.w	r3, r2, r3
 8005c52:	657b      	str	r3, [r7, #84]	; 0x54
 8005c54:	e9d7 2314 	ldrd	r2, r3, [r7, #80]	; 0x50
 8005c58:	e9d7 0138 	ldrd	r0, r1, [r7, #224]	; 0xe0
 8005c5c:	f7fa fb18 	bl	8000290 <__aeabi_uldivmod>
 8005c60:	4602      	mov	r2, r0
 8005c62:	460b      	mov	r3, r1
 8005c64:	4b61      	ldr	r3, [pc, #388]	; (8005dec <UART_SetConfig+0x2d4>)
 8005c66:	fba3 2302 	umull	r2, r3, r3, r2
 8005c6a:	095b      	lsrs	r3, r3, #5
 8005c6c:	011c      	lsls	r4, r3, #4
 8005c6e:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8005c72:	2200      	movs	r2, #0
 8005c74:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 8005c78:	f8c7 20d4 	str.w	r2, [r7, #212]	; 0xd4
 8005c7c:	e9d7 8934 	ldrd	r8, r9, [r7, #208]	; 0xd0
 8005c80:	4642      	mov	r2, r8
 8005c82:	464b      	mov	r3, r9
 8005c84:	1891      	adds	r1, r2, r2
 8005c86:	64b9      	str	r1, [r7, #72]	; 0x48
 8005c88:	415b      	adcs	r3, r3
 8005c8a:	64fb      	str	r3, [r7, #76]	; 0x4c
 8005c8c:	e9d7 2312 	ldrd	r2, r3, [r7, #72]	; 0x48
 8005c90:	4641      	mov	r1, r8
 8005c92:	eb12 0a01 	adds.w	sl, r2, r1
 8005c96:	4649      	mov	r1, r9
 8005c98:	eb43 0b01 	adc.w	fp, r3, r1
 8005c9c:	f04f 0200 	mov.w	r2, #0
 8005ca0:	f04f 0300 	mov.w	r3, #0
 8005ca4:	ea4f 03cb 	mov.w	r3, fp, lsl #3
 8005ca8:	ea43 735a 	orr.w	r3, r3, sl, lsr #29
 8005cac:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 8005cb0:	4692      	mov	sl, r2
 8005cb2:	469b      	mov	fp, r3
 8005cb4:	4643      	mov	r3, r8
 8005cb6:	eb1a 0303 	adds.w	r3, sl, r3
 8005cba:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 8005cbe:	464b      	mov	r3, r9
 8005cc0:	eb4b 0303 	adc.w	r3, fp, r3
 8005cc4:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
 8005cc8:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8005ccc:	685b      	ldr	r3, [r3, #4]
 8005cce:	2200      	movs	r2, #0
 8005cd0:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 8005cd4:	f8c7 20c4 	str.w	r2, [r7, #196]	; 0xc4
 8005cd8:	e9d7 1230 	ldrd	r1, r2, [r7, #192]	; 0xc0
 8005cdc:	460b      	mov	r3, r1
 8005cde:	18db      	adds	r3, r3, r3
 8005ce0:	643b      	str	r3, [r7, #64]	; 0x40
 8005ce2:	4613      	mov	r3, r2
 8005ce4:	eb42 0303 	adc.w	r3, r2, r3
 8005ce8:	647b      	str	r3, [r7, #68]	; 0x44
 8005cea:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	; 0x40
 8005cee:	e9d7 0132 	ldrd	r0, r1, [r7, #200]	; 0xc8
 8005cf2:	f7fa facd 	bl	8000290 <__aeabi_uldivmod>
 8005cf6:	4602      	mov	r2, r0
 8005cf8:	460b      	mov	r3, r1
 8005cfa:	4611      	mov	r1, r2
 8005cfc:	4b3b      	ldr	r3, [pc, #236]	; (8005dec <UART_SetConfig+0x2d4>)
 8005cfe:	fba3 2301 	umull	r2, r3, r3, r1
 8005d02:	095b      	lsrs	r3, r3, #5
 8005d04:	2264      	movs	r2, #100	; 0x64
 8005d06:	fb02 f303 	mul.w	r3, r2, r3
 8005d0a:	1acb      	subs	r3, r1, r3
 8005d0c:	00db      	lsls	r3, r3, #3
 8005d0e:	f103 0232 	add.w	r2, r3, #50	; 0x32
 8005d12:	4b36      	ldr	r3, [pc, #216]	; (8005dec <UART_SetConfig+0x2d4>)
 8005d14:	fba3 2302 	umull	r2, r3, r3, r2
 8005d18:	095b      	lsrs	r3, r3, #5
 8005d1a:	005b      	lsls	r3, r3, #1
 8005d1c:	f403 73f8 	and.w	r3, r3, #496	; 0x1f0
 8005d20:	441c      	add	r4, r3
 8005d22:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8005d26:	2200      	movs	r2, #0
 8005d28:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 8005d2c:	f8c7 20bc 	str.w	r2, [r7, #188]	; 0xbc
 8005d30:	e9d7 892e 	ldrd	r8, r9, [r7, #184]	; 0xb8
 8005d34:	4642      	mov	r2, r8
 8005d36:	464b      	mov	r3, r9
 8005d38:	1891      	adds	r1, r2, r2
 8005d3a:	63b9      	str	r1, [r7, #56]	; 0x38
 8005d3c:	415b      	adcs	r3, r3
 8005d3e:	63fb      	str	r3, [r7, #60]	; 0x3c
 8005d40:	e9d7 230e 	ldrd	r2, r3, [r7, #56]	; 0x38
 8005d44:	4641      	mov	r1, r8
 8005d46:	1851      	adds	r1, r2, r1
 8005d48:	6339      	str	r1, [r7, #48]	; 0x30
 8005d4a:	4649      	mov	r1, r9
 8005d4c:	414b      	adcs	r3, r1
 8005d4e:	637b      	str	r3, [r7, #52]	; 0x34
 8005d50:	f04f 0200 	mov.w	r2, #0
 8005d54:	f04f 0300 	mov.w	r3, #0
 8005d58:	e9d7 ab0c 	ldrd	sl, fp, [r7, #48]	; 0x30
 8005d5c:	4659      	mov	r1, fp
 8005d5e:	00cb      	lsls	r3, r1, #3
 8005d60:	4651      	mov	r1, sl
 8005d62:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8005d66:	4651      	mov	r1, sl
 8005d68:	00ca      	lsls	r2, r1, #3
 8005d6a:	4610      	mov	r0, r2
 8005d6c:	4619      	mov	r1, r3
 8005d6e:	4603      	mov	r3, r0
 8005d70:	4642      	mov	r2, r8
 8005d72:	189b      	adds	r3, r3, r2
 8005d74:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 8005d78:	464b      	mov	r3, r9
 8005d7a:	460a      	mov	r2, r1
 8005d7c:	eb42 0303 	adc.w	r3, r2, r3
 8005d80:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 8005d84:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8005d88:	685b      	ldr	r3, [r3, #4]
 8005d8a:	2200      	movs	r2, #0
 8005d8c:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
 8005d90:	f8c7 20ac 	str.w	r2, [r7, #172]	; 0xac
 8005d94:	e9d7 122a 	ldrd	r1, r2, [r7, #168]	; 0xa8
 8005d98:	460b      	mov	r3, r1
 8005d9a:	18db      	adds	r3, r3, r3
 8005d9c:	62bb      	str	r3, [r7, #40]	; 0x28
 8005d9e:	4613      	mov	r3, r2
 8005da0:	eb42 0303 	adc.w	r3, r2, r3
 8005da4:	62fb      	str	r3, [r7, #44]	; 0x2c
 8005da6:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 8005daa:	e9d7 012c 	ldrd	r0, r1, [r7, #176]	; 0xb0
 8005dae:	f7fa fa6f 	bl	8000290 <__aeabi_uldivmod>
 8005db2:	4602      	mov	r2, r0
 8005db4:	460b      	mov	r3, r1
 8005db6:	4b0d      	ldr	r3, [pc, #52]	; (8005dec <UART_SetConfig+0x2d4>)
 8005db8:	fba3 1302 	umull	r1, r3, r3, r2
 8005dbc:	095b      	lsrs	r3, r3, #5
 8005dbe:	2164      	movs	r1, #100	; 0x64
 8005dc0:	fb01 f303 	mul.w	r3, r1, r3
 8005dc4:	1ad3      	subs	r3, r2, r3
 8005dc6:	00db      	lsls	r3, r3, #3
 8005dc8:	3332      	adds	r3, #50	; 0x32
 8005dca:	4a08      	ldr	r2, [pc, #32]	; (8005dec <UART_SetConfig+0x2d4>)
 8005dcc:	fba2 2303 	umull	r2, r3, r2, r3
 8005dd0:	095b      	lsrs	r3, r3, #5
 8005dd2:	f003 0207 	and.w	r2, r3, #7
 8005dd6:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8005dda:	681b      	ldr	r3, [r3, #0]
 8005ddc:	4422      	add	r2, r4
 8005dde:	609a      	str	r2, [r3, #8]
  }
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
}
 8005de0:	e105      	b.n	8005fee <UART_SetConfig+0x4d6>
 8005de2:	bf00      	nop
 8005de4:	40011000 	.word	0x40011000
 8005de8:	40011400 	.word	0x40011400
 8005dec:	51eb851f 	.word	0x51eb851f
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 8005df0:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8005df4:	2200      	movs	r2, #0
 8005df6:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
 8005dfa:	f8c7 20a4 	str.w	r2, [r7, #164]	; 0xa4
 8005dfe:	e9d7 8928 	ldrd	r8, r9, [r7, #160]	; 0xa0
 8005e02:	4642      	mov	r2, r8
 8005e04:	464b      	mov	r3, r9
 8005e06:	1891      	adds	r1, r2, r2
 8005e08:	6239      	str	r1, [r7, #32]
 8005e0a:	415b      	adcs	r3, r3
 8005e0c:	627b      	str	r3, [r7, #36]	; 0x24
 8005e0e:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 8005e12:	4641      	mov	r1, r8
 8005e14:	1854      	adds	r4, r2, r1
 8005e16:	4649      	mov	r1, r9
 8005e18:	eb43 0501 	adc.w	r5, r3, r1
 8005e1c:	f04f 0200 	mov.w	r2, #0
 8005e20:	f04f 0300 	mov.w	r3, #0
 8005e24:	00eb      	lsls	r3, r5, #3
 8005e26:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8005e2a:	00e2      	lsls	r2, r4, #3
 8005e2c:	4614      	mov	r4, r2
 8005e2e:	461d      	mov	r5, r3
 8005e30:	4643      	mov	r3, r8
 8005e32:	18e3      	adds	r3, r4, r3
 8005e34:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
 8005e38:	464b      	mov	r3, r9
 8005e3a:	eb45 0303 	adc.w	r3, r5, r3
 8005e3e:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
 8005e42:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8005e46:	685b      	ldr	r3, [r3, #4]
 8005e48:	2200      	movs	r2, #0
 8005e4a:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
 8005e4e:	f8c7 2094 	str.w	r2, [r7, #148]	; 0x94
 8005e52:	f04f 0200 	mov.w	r2, #0
 8005e56:	f04f 0300 	mov.w	r3, #0
 8005e5a:	e9d7 4524 	ldrd	r4, r5, [r7, #144]	; 0x90
 8005e5e:	4629      	mov	r1, r5
 8005e60:	008b      	lsls	r3, r1, #2
 8005e62:	4621      	mov	r1, r4
 8005e64:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8005e68:	4621      	mov	r1, r4
 8005e6a:	008a      	lsls	r2, r1, #2
 8005e6c:	e9d7 0126 	ldrd	r0, r1, [r7, #152]	; 0x98
 8005e70:	f7fa fa0e 	bl	8000290 <__aeabi_uldivmod>
 8005e74:	4602      	mov	r2, r0
 8005e76:	460b      	mov	r3, r1
 8005e78:	4b60      	ldr	r3, [pc, #384]	; (8005ffc <UART_SetConfig+0x4e4>)
 8005e7a:	fba3 2302 	umull	r2, r3, r3, r2
 8005e7e:	095b      	lsrs	r3, r3, #5
 8005e80:	011c      	lsls	r4, r3, #4
 8005e82:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8005e86:	2200      	movs	r2, #0
 8005e88:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
 8005e8c:	f8c7 208c 	str.w	r2, [r7, #140]	; 0x8c
 8005e90:	e9d7 8922 	ldrd	r8, r9, [r7, #136]	; 0x88
 8005e94:	4642      	mov	r2, r8
 8005e96:	464b      	mov	r3, r9
 8005e98:	1891      	adds	r1, r2, r2
 8005e9a:	61b9      	str	r1, [r7, #24]
 8005e9c:	415b      	adcs	r3, r3
 8005e9e:	61fb      	str	r3, [r7, #28]
 8005ea0:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8005ea4:	4641      	mov	r1, r8
 8005ea6:	1851      	adds	r1, r2, r1
 8005ea8:	6139      	str	r1, [r7, #16]
 8005eaa:	4649      	mov	r1, r9
 8005eac:	414b      	adcs	r3, r1
 8005eae:	617b      	str	r3, [r7, #20]
 8005eb0:	f04f 0200 	mov.w	r2, #0
 8005eb4:	f04f 0300 	mov.w	r3, #0
 8005eb8:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 8005ebc:	4659      	mov	r1, fp
 8005ebe:	00cb      	lsls	r3, r1, #3
 8005ec0:	4651      	mov	r1, sl
 8005ec2:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8005ec6:	4651      	mov	r1, sl
 8005ec8:	00ca      	lsls	r2, r1, #3
 8005eca:	4610      	mov	r0, r2
 8005ecc:	4619      	mov	r1, r3
 8005ece:	4603      	mov	r3, r0
 8005ed0:	4642      	mov	r2, r8
 8005ed2:	189b      	adds	r3, r3, r2
 8005ed4:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
 8005ed8:	464b      	mov	r3, r9
 8005eda:	460a      	mov	r2, r1
 8005edc:	eb42 0303 	adc.w	r3, r2, r3
 8005ee0:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
 8005ee4:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8005ee8:	685b      	ldr	r3, [r3, #4]
 8005eea:	2200      	movs	r2, #0
 8005eec:	67bb      	str	r3, [r7, #120]	; 0x78
 8005eee:	67fa      	str	r2, [r7, #124]	; 0x7c
 8005ef0:	f04f 0200 	mov.w	r2, #0
 8005ef4:	f04f 0300 	mov.w	r3, #0
 8005ef8:	e9d7 891e 	ldrd	r8, r9, [r7, #120]	; 0x78
 8005efc:	4649      	mov	r1, r9
 8005efe:	008b      	lsls	r3, r1, #2
 8005f00:	4641      	mov	r1, r8
 8005f02:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8005f06:	4641      	mov	r1, r8
 8005f08:	008a      	lsls	r2, r1, #2
 8005f0a:	e9d7 0120 	ldrd	r0, r1, [r7, #128]	; 0x80
 8005f0e:	f7fa f9bf 	bl	8000290 <__aeabi_uldivmod>
 8005f12:	4602      	mov	r2, r0
 8005f14:	460b      	mov	r3, r1
 8005f16:	4b39      	ldr	r3, [pc, #228]	; (8005ffc <UART_SetConfig+0x4e4>)
 8005f18:	fba3 1302 	umull	r1, r3, r3, r2
 8005f1c:	095b      	lsrs	r3, r3, #5
 8005f1e:	2164      	movs	r1, #100	; 0x64
 8005f20:	fb01 f303 	mul.w	r3, r1, r3
 8005f24:	1ad3      	subs	r3, r2, r3
 8005f26:	011b      	lsls	r3, r3, #4
 8005f28:	3332      	adds	r3, #50	; 0x32
 8005f2a:	4a34      	ldr	r2, [pc, #208]	; (8005ffc <UART_SetConfig+0x4e4>)
 8005f2c:	fba2 2303 	umull	r2, r3, r2, r3
 8005f30:	095b      	lsrs	r3, r3, #5
 8005f32:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8005f36:	441c      	add	r4, r3
 8005f38:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8005f3c:	2200      	movs	r2, #0
 8005f3e:	673b      	str	r3, [r7, #112]	; 0x70
 8005f40:	677a      	str	r2, [r7, #116]	; 0x74
 8005f42:	e9d7 891c 	ldrd	r8, r9, [r7, #112]	; 0x70
 8005f46:	4642      	mov	r2, r8
 8005f48:	464b      	mov	r3, r9
 8005f4a:	1891      	adds	r1, r2, r2
 8005f4c:	60b9      	str	r1, [r7, #8]
 8005f4e:	415b      	adcs	r3, r3
 8005f50:	60fb      	str	r3, [r7, #12]
 8005f52:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 8005f56:	4641      	mov	r1, r8
 8005f58:	1851      	adds	r1, r2, r1
 8005f5a:	6039      	str	r1, [r7, #0]
 8005f5c:	4649      	mov	r1, r9
 8005f5e:	414b      	adcs	r3, r1
 8005f60:	607b      	str	r3, [r7, #4]
 8005f62:	f04f 0200 	mov.w	r2, #0
 8005f66:	f04f 0300 	mov.w	r3, #0
 8005f6a:	e9d7 ab00 	ldrd	sl, fp, [r7]
 8005f6e:	4659      	mov	r1, fp
 8005f70:	00cb      	lsls	r3, r1, #3
 8005f72:	4651      	mov	r1, sl
 8005f74:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8005f78:	4651      	mov	r1, sl
 8005f7a:	00ca      	lsls	r2, r1, #3
 8005f7c:	4610      	mov	r0, r2
 8005f7e:	4619      	mov	r1, r3
 8005f80:	4603      	mov	r3, r0
 8005f82:	4642      	mov	r2, r8
 8005f84:	189b      	adds	r3, r3, r2
 8005f86:	66bb      	str	r3, [r7, #104]	; 0x68
 8005f88:	464b      	mov	r3, r9
 8005f8a:	460a      	mov	r2, r1
 8005f8c:	eb42 0303 	adc.w	r3, r2, r3
 8005f90:	66fb      	str	r3, [r7, #108]	; 0x6c
 8005f92:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8005f96:	685b      	ldr	r3, [r3, #4]
 8005f98:	2200      	movs	r2, #0
 8005f9a:	663b      	str	r3, [r7, #96]	; 0x60
 8005f9c:	667a      	str	r2, [r7, #100]	; 0x64
 8005f9e:	f04f 0200 	mov.w	r2, #0
 8005fa2:	f04f 0300 	mov.w	r3, #0
 8005fa6:	e9d7 8918 	ldrd	r8, r9, [r7, #96]	; 0x60
 8005faa:	4649      	mov	r1, r9
 8005fac:	008b      	lsls	r3, r1, #2
 8005fae:	4641      	mov	r1, r8
 8005fb0:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8005fb4:	4641      	mov	r1, r8
 8005fb6:	008a      	lsls	r2, r1, #2
 8005fb8:	e9d7 011a 	ldrd	r0, r1, [r7, #104]	; 0x68
 8005fbc:	f7fa f968 	bl	8000290 <__aeabi_uldivmod>
 8005fc0:	4602      	mov	r2, r0
 8005fc2:	460b      	mov	r3, r1
 8005fc4:	4b0d      	ldr	r3, [pc, #52]	; (8005ffc <UART_SetConfig+0x4e4>)
 8005fc6:	fba3 1302 	umull	r1, r3, r3, r2
 8005fca:	095b      	lsrs	r3, r3, #5
 8005fcc:	2164      	movs	r1, #100	; 0x64
 8005fce:	fb01 f303 	mul.w	r3, r1, r3
 8005fd2:	1ad3      	subs	r3, r2, r3
 8005fd4:	011b      	lsls	r3, r3, #4
 8005fd6:	3332      	adds	r3, #50	; 0x32
 8005fd8:	4a08      	ldr	r2, [pc, #32]	; (8005ffc <UART_SetConfig+0x4e4>)
 8005fda:	fba2 2303 	umull	r2, r3, r2, r3
 8005fde:	095b      	lsrs	r3, r3, #5
 8005fe0:	f003 020f 	and.w	r2, r3, #15
 8005fe4:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8005fe8:	681b      	ldr	r3, [r3, #0]
 8005fea:	4422      	add	r2, r4
 8005fec:	609a      	str	r2, [r3, #8]
}
 8005fee:	bf00      	nop
 8005ff0:	f507 7780 	add.w	r7, r7, #256	; 0x100
 8005ff4:	46bd      	mov	sp, r7
 8005ff6:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8005ffa:	bf00      	nop
 8005ffc:	51eb851f 	.word	0x51eb851f

08006000 <FMC_SDRAM_Init>:
  * @param  Device Pointer to SDRAM device instance
  * @param  Init Pointer to SDRAM Initialization structure
  * @retval HAL status
  */
HAL_StatusTypeDef FMC_SDRAM_Init(FMC_SDRAM_TypeDef *Device, FMC_SDRAM_InitTypeDef *Init)
{
 8006000:	b480      	push	{r7}
 8006002:	b083      	sub	sp, #12
 8006004:	af00      	add	r7, sp, #0
 8006006:	6078      	str	r0, [r7, #4]
 8006008:	6039      	str	r1, [r7, #0]
  assert_param(IS_FMC_SDCLOCK_PERIOD(Init->SDClockPeriod));
  assert_param(IS_FMC_READ_BURST(Init->ReadBurst));
  assert_param(IS_FMC_READPIPE_DELAY(Init->ReadPipeDelay));

  /* Set SDRAM bank configuration parameters */
  if (Init->SDBank == FMC_SDRAM_BANK1)
 800600a:	683b      	ldr	r3, [r7, #0]
 800600c:	681b      	ldr	r3, [r3, #0]
 800600e:	2b00      	cmp	r3, #0
 8006010:	d123      	bne.n	800605a <FMC_SDRAM_Init+0x5a>
  {
    MODIFY_REG(Device->SDCR[FMC_SDRAM_BANK1],
 8006012:	687b      	ldr	r3, [r7, #4]
 8006014:	681b      	ldr	r3, [r3, #0]
 8006016:	f423 43ff 	bic.w	r3, r3, #32640	; 0x7f80
 800601a:	f023 037f 	bic.w	r3, r3, #127	; 0x7f
 800601e:	683a      	ldr	r2, [r7, #0]
 8006020:	6851      	ldr	r1, [r2, #4]
 8006022:	683a      	ldr	r2, [r7, #0]
 8006024:	6892      	ldr	r2, [r2, #8]
 8006026:	4311      	orrs	r1, r2
 8006028:	683a      	ldr	r2, [r7, #0]
 800602a:	68d2      	ldr	r2, [r2, #12]
 800602c:	4311      	orrs	r1, r2
 800602e:	683a      	ldr	r2, [r7, #0]
 8006030:	6912      	ldr	r2, [r2, #16]
 8006032:	4311      	orrs	r1, r2
 8006034:	683a      	ldr	r2, [r7, #0]
 8006036:	6952      	ldr	r2, [r2, #20]
 8006038:	4311      	orrs	r1, r2
 800603a:	683a      	ldr	r2, [r7, #0]
 800603c:	6992      	ldr	r2, [r2, #24]
 800603e:	4311      	orrs	r1, r2
 8006040:	683a      	ldr	r2, [r7, #0]
 8006042:	69d2      	ldr	r2, [r2, #28]
 8006044:	4311      	orrs	r1, r2
 8006046:	683a      	ldr	r2, [r7, #0]
 8006048:	6a12      	ldr	r2, [r2, #32]
 800604a:	4311      	orrs	r1, r2
 800604c:	683a      	ldr	r2, [r7, #0]
 800604e:	6a52      	ldr	r2, [r2, #36]	; 0x24
 8006050:	430a      	orrs	r2, r1
 8006052:	431a      	orrs	r2, r3
 8006054:	687b      	ldr	r3, [r7, #4]
 8006056:	601a      	str	r2, [r3, #0]
 8006058:	e028      	b.n	80060ac <FMC_SDRAM_Init+0xac>
                Init->ReadBurst          |
                Init->ReadPipeDelay));
  }
  else /* FMC_Bank2_SDRAM */
  {
    MODIFY_REG(Device->SDCR[FMC_SDRAM_BANK1],
 800605a:	687b      	ldr	r3, [r7, #4]
 800605c:	681b      	ldr	r3, [r3, #0]
 800605e:	f423 42f8 	bic.w	r2, r3, #31744	; 0x7c00
 8006062:	683b      	ldr	r3, [r7, #0]
 8006064:	69d9      	ldr	r1, [r3, #28]
 8006066:	683b      	ldr	r3, [r7, #0]
 8006068:	6a1b      	ldr	r3, [r3, #32]
 800606a:	4319      	orrs	r1, r3
 800606c:	683b      	ldr	r3, [r7, #0]
 800606e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006070:	430b      	orrs	r3, r1
 8006072:	431a      	orrs	r2, r3
 8006074:	687b      	ldr	r3, [r7, #4]
 8006076:	601a      	str	r2, [r3, #0]
               FMC_SDCR1_RPIPE,
               (Init->SDClockPeriod      |
                Init->ReadBurst          |
                Init->ReadPipeDelay));

    MODIFY_REG(Device->SDCR[FMC_SDRAM_BANK2],
 8006078:	687b      	ldr	r3, [r7, #4]
 800607a:	685b      	ldr	r3, [r3, #4]
 800607c:	f423 43ff 	bic.w	r3, r3, #32640	; 0x7f80
 8006080:	f023 037f 	bic.w	r3, r3, #127	; 0x7f
 8006084:	683a      	ldr	r2, [r7, #0]
 8006086:	6851      	ldr	r1, [r2, #4]
 8006088:	683a      	ldr	r2, [r7, #0]
 800608a:	6892      	ldr	r2, [r2, #8]
 800608c:	4311      	orrs	r1, r2
 800608e:	683a      	ldr	r2, [r7, #0]
 8006090:	68d2      	ldr	r2, [r2, #12]
 8006092:	4311      	orrs	r1, r2
 8006094:	683a      	ldr	r2, [r7, #0]
 8006096:	6912      	ldr	r2, [r2, #16]
 8006098:	4311      	orrs	r1, r2
 800609a:	683a      	ldr	r2, [r7, #0]
 800609c:	6952      	ldr	r2, [r2, #20]
 800609e:	4311      	orrs	r1, r2
 80060a0:	683a      	ldr	r2, [r7, #0]
 80060a2:	6992      	ldr	r2, [r2, #24]
 80060a4:	430a      	orrs	r2, r1
 80060a6:	431a      	orrs	r2, r3
 80060a8:	687b      	ldr	r3, [r7, #4]
 80060aa:	605a      	str	r2, [r3, #4]
                Init->InternalBankNumber |
                Init->CASLatency         |
                Init->WriteProtection));
  }

  return HAL_OK;
 80060ac:	2300      	movs	r3, #0
}
 80060ae:	4618      	mov	r0, r3
 80060b0:	370c      	adds	r7, #12
 80060b2:	46bd      	mov	sp, r7
 80060b4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80060b8:	4770      	bx	lr

080060ba <FMC_SDRAM_Timing_Init>:
  * @param  Bank SDRAM bank number
  * @retval HAL status
  */
HAL_StatusTypeDef FMC_SDRAM_Timing_Init(FMC_SDRAM_TypeDef *Device,
                                        FMC_SDRAM_TimingTypeDef *Timing, uint32_t Bank)
{
 80060ba:	b480      	push	{r7}
 80060bc:	b085      	sub	sp, #20
 80060be:	af00      	add	r7, sp, #0
 80060c0:	60f8      	str	r0, [r7, #12]
 80060c2:	60b9      	str	r1, [r7, #8]
 80060c4:	607a      	str	r2, [r7, #4]
  assert_param(IS_FMC_RP_DELAY(Timing->RPDelay));
  assert_param(IS_FMC_RCD_DELAY(Timing->RCDDelay));
  assert_param(IS_FMC_SDRAM_BANK(Bank));

  /* Set SDRAM device timing parameters */
  if (Bank == FMC_SDRAM_BANK1)
 80060c6:	687b      	ldr	r3, [r7, #4]
 80060c8:	2b00      	cmp	r3, #0
 80060ca:	d128      	bne.n	800611e <FMC_SDRAM_Timing_Init+0x64>
  {
    MODIFY_REG(Device->SDTR[FMC_SDRAM_BANK1],
 80060cc:	68fb      	ldr	r3, [r7, #12]
 80060ce:	689b      	ldr	r3, [r3, #8]
 80060d0:	f003 4270 	and.w	r2, r3, #4026531840	; 0xf0000000
 80060d4:	68bb      	ldr	r3, [r7, #8]
 80060d6:	681b      	ldr	r3, [r3, #0]
 80060d8:	1e59      	subs	r1, r3, #1
 80060da:	68bb      	ldr	r3, [r7, #8]
 80060dc:	685b      	ldr	r3, [r3, #4]
 80060de:	3b01      	subs	r3, #1
 80060e0:	011b      	lsls	r3, r3, #4
 80060e2:	4319      	orrs	r1, r3
 80060e4:	68bb      	ldr	r3, [r7, #8]
 80060e6:	689b      	ldr	r3, [r3, #8]
 80060e8:	3b01      	subs	r3, #1
 80060ea:	021b      	lsls	r3, r3, #8
 80060ec:	4319      	orrs	r1, r3
 80060ee:	68bb      	ldr	r3, [r7, #8]
 80060f0:	68db      	ldr	r3, [r3, #12]
 80060f2:	3b01      	subs	r3, #1
 80060f4:	031b      	lsls	r3, r3, #12
 80060f6:	4319      	orrs	r1, r3
 80060f8:	68bb      	ldr	r3, [r7, #8]
 80060fa:	691b      	ldr	r3, [r3, #16]
 80060fc:	3b01      	subs	r3, #1
 80060fe:	041b      	lsls	r3, r3, #16
 8006100:	4319      	orrs	r1, r3
 8006102:	68bb      	ldr	r3, [r7, #8]
 8006104:	695b      	ldr	r3, [r3, #20]
 8006106:	3b01      	subs	r3, #1
 8006108:	051b      	lsls	r3, r3, #20
 800610a:	4319      	orrs	r1, r3
 800610c:	68bb      	ldr	r3, [r7, #8]
 800610e:	699b      	ldr	r3, [r3, #24]
 8006110:	3b01      	subs	r3, #1
 8006112:	061b      	lsls	r3, r3, #24
 8006114:	430b      	orrs	r3, r1
 8006116:	431a      	orrs	r2, r3
 8006118:	68fb      	ldr	r3, [r7, #12]
 800611a:	609a      	str	r2, [r3, #8]
 800611c:	e02f      	b.n	800617e <FMC_SDRAM_Timing_Init+0xc4>
                (((Timing->RPDelay) - 1U)              << FMC_SDTR1_TRP_Pos)  |
                (((Timing->RCDDelay) - 1U)             << FMC_SDTR1_TRCD_Pos)));
  }
  else /* FMC_Bank2_SDRAM */
  {
    MODIFY_REG(Device->SDTR[FMC_SDRAM_BANK1],
 800611e:	68fb      	ldr	r3, [r7, #12]
 8006120:	689b      	ldr	r3, [r3, #8]
 8006122:	f423 0370 	bic.w	r3, r3, #15728640	; 0xf00000
 8006126:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 800612a:	68ba      	ldr	r2, [r7, #8]
 800612c:	68d2      	ldr	r2, [r2, #12]
 800612e:	3a01      	subs	r2, #1
 8006130:	0311      	lsls	r1, r2, #12
 8006132:	68ba      	ldr	r2, [r7, #8]
 8006134:	6952      	ldr	r2, [r2, #20]
 8006136:	3a01      	subs	r2, #1
 8006138:	0512      	lsls	r2, r2, #20
 800613a:	430a      	orrs	r2, r1
 800613c:	431a      	orrs	r2, r3
 800613e:	68fb      	ldr	r3, [r7, #12]
 8006140:	609a      	str	r2, [r3, #8]
               FMC_SDTR1_TRC |
               FMC_SDTR1_TRP,
               (((Timing->RowCycleDelay) - 1U)         << FMC_SDTR1_TRC_Pos)  |
               (((Timing->RPDelay) - 1U)               << FMC_SDTR1_TRP_Pos));

    MODIFY_REG(Device->SDTR[FMC_SDRAM_BANK2],
 8006142:	68fb      	ldr	r3, [r7, #12]
 8006144:	68db      	ldr	r3, [r3, #12]
 8006146:	f003 4270 	and.w	r2, r3, #4026531840	; 0xf0000000
 800614a:	68bb      	ldr	r3, [r7, #8]
 800614c:	681b      	ldr	r3, [r3, #0]
 800614e:	1e59      	subs	r1, r3, #1
 8006150:	68bb      	ldr	r3, [r7, #8]
 8006152:	685b      	ldr	r3, [r3, #4]
 8006154:	3b01      	subs	r3, #1
 8006156:	011b      	lsls	r3, r3, #4
 8006158:	4319      	orrs	r1, r3
 800615a:	68bb      	ldr	r3, [r7, #8]
 800615c:	689b      	ldr	r3, [r3, #8]
 800615e:	3b01      	subs	r3, #1
 8006160:	021b      	lsls	r3, r3, #8
 8006162:	4319      	orrs	r1, r3
 8006164:	68bb      	ldr	r3, [r7, #8]
 8006166:	691b      	ldr	r3, [r3, #16]
 8006168:	3b01      	subs	r3, #1
 800616a:	041b      	lsls	r3, r3, #16
 800616c:	4319      	orrs	r1, r3
 800616e:	68bb      	ldr	r3, [r7, #8]
 8006170:	699b      	ldr	r3, [r3, #24]
 8006172:	3b01      	subs	r3, #1
 8006174:	061b      	lsls	r3, r3, #24
 8006176:	430b      	orrs	r3, r1
 8006178:	431a      	orrs	r2, r3
 800617a:	68fb      	ldr	r3, [r7, #12]
 800617c:	60da      	str	r2, [r3, #12]
                (((Timing->SelfRefreshTime) - 1U)      << FMC_SDTR1_TRAS_Pos) |
                (((Timing->WriteRecoveryTime) - 1U)    << FMC_SDTR1_TWR_Pos)  |
                (((Timing->RCDDelay) - 1U)             << FMC_SDTR1_TRCD_Pos)));
  }

  return HAL_OK;
 800617e:	2300      	movs	r3, #0
}
 8006180:	4618      	mov	r0, r3
 8006182:	3714      	adds	r7, #20
 8006184:	46bd      	mov	sp, r7
 8006186:	f85d 7b04 	ldr.w	r7, [sp], #4
 800618a:	4770      	bx	lr

0800618c <USB_EnableGlobalInt>:
  *         Enables the controller's Global Int in the AHB Config reg
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EnableGlobalInt(USB_OTG_GlobalTypeDef *USBx)
{
 800618c:	b480      	push	{r7}
 800618e:	b083      	sub	sp, #12
 8006190:	af00      	add	r7, sp, #0
 8006192:	6078      	str	r0, [r7, #4]
  USBx->GAHBCFG |= USB_OTG_GAHBCFG_GINT;
 8006194:	687b      	ldr	r3, [r7, #4]
 8006196:	689b      	ldr	r3, [r3, #8]
 8006198:	f043 0201 	orr.w	r2, r3, #1
 800619c:	687b      	ldr	r3, [r7, #4]
 800619e:	609a      	str	r2, [r3, #8]
  return HAL_OK;
 80061a0:	2300      	movs	r3, #0
}
 80061a2:	4618      	mov	r0, r3
 80061a4:	370c      	adds	r7, #12
 80061a6:	46bd      	mov	sp, r7
 80061a8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80061ac:	4770      	bx	lr

080061ae <USB_DisableGlobalInt>:
  *         Disable the controller's Global Int in the AHB Config reg
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DisableGlobalInt(USB_OTG_GlobalTypeDef *USBx)
{
 80061ae:	b480      	push	{r7}
 80061b0:	b083      	sub	sp, #12
 80061b2:	af00      	add	r7, sp, #0
 80061b4:	6078      	str	r0, [r7, #4]
  USBx->GAHBCFG &= ~USB_OTG_GAHBCFG_GINT;
 80061b6:	687b      	ldr	r3, [r7, #4]
 80061b8:	689b      	ldr	r3, [r3, #8]
 80061ba:	f023 0201 	bic.w	r2, r3, #1
 80061be:	687b      	ldr	r3, [r7, #4]
 80061c0:	609a      	str	r2, [r3, #8]
  return HAL_OK;
 80061c2:	2300      	movs	r3, #0
}
 80061c4:	4618      	mov	r0, r3
 80061c6:	370c      	adds	r7, #12
 80061c8:	46bd      	mov	sp, r7
 80061ca:	f85d 7b04 	ldr.w	r7, [sp], #4
 80061ce:	4770      	bx	lr

080061d0 <USB_FlushTxFifo>:
  *         This parameter can be a value from 1 to 15
            15 means Flush all Tx FIFOs
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushTxFifo(USB_OTG_GlobalTypeDef *USBx, uint32_t num)
{
 80061d0:	b480      	push	{r7}
 80061d2:	b085      	sub	sp, #20
 80061d4:	af00      	add	r7, sp, #0
 80061d6:	6078      	str	r0, [r7, #4]
 80061d8:	6039      	str	r1, [r7, #0]
  __IO uint32_t count = 0U;
 80061da:	2300      	movs	r3, #0
 80061dc:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 80061de:	68fb      	ldr	r3, [r7, #12]
 80061e0:	3301      	adds	r3, #1
 80061e2:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 80061e4:	68fb      	ldr	r3, [r7, #12]
 80061e6:	4a13      	ldr	r2, [pc, #76]	; (8006234 <USB_FlushTxFifo+0x64>)
 80061e8:	4293      	cmp	r3, r2
 80061ea:	d901      	bls.n	80061f0 <USB_FlushTxFifo+0x20>
    {
      return HAL_TIMEOUT;
 80061ec:	2303      	movs	r3, #3
 80061ee:	e01b      	b.n	8006228 <USB_FlushTxFifo+0x58>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 80061f0:	687b      	ldr	r3, [r7, #4]
 80061f2:	691b      	ldr	r3, [r3, #16]
 80061f4:	2b00      	cmp	r3, #0
 80061f6:	daf2      	bge.n	80061de <USB_FlushTxFifo+0xe>

  /* Flush TX Fifo */
  count = 0U;
 80061f8:	2300      	movs	r3, #0
 80061fa:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL = (USB_OTG_GRSTCTL_TXFFLSH | (num << 6));
 80061fc:	683b      	ldr	r3, [r7, #0]
 80061fe:	019b      	lsls	r3, r3, #6
 8006200:	f043 0220 	orr.w	r2, r3, #32
 8006204:	687b      	ldr	r3, [r7, #4]
 8006206:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 8006208:	68fb      	ldr	r3, [r7, #12]
 800620a:	3301      	adds	r3, #1
 800620c:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 800620e:	68fb      	ldr	r3, [r7, #12]
 8006210:	4a08      	ldr	r2, [pc, #32]	; (8006234 <USB_FlushTxFifo+0x64>)
 8006212:	4293      	cmp	r3, r2
 8006214:	d901      	bls.n	800621a <USB_FlushTxFifo+0x4a>
    {
      return HAL_TIMEOUT;
 8006216:	2303      	movs	r3, #3
 8006218:	e006      	b.n	8006228 <USB_FlushTxFifo+0x58>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_TXFFLSH) == USB_OTG_GRSTCTL_TXFFLSH);
 800621a:	687b      	ldr	r3, [r7, #4]
 800621c:	691b      	ldr	r3, [r3, #16]
 800621e:	f003 0320 	and.w	r3, r3, #32
 8006222:	2b20      	cmp	r3, #32
 8006224:	d0f0      	beq.n	8006208 <USB_FlushTxFifo+0x38>

  return HAL_OK;
 8006226:	2300      	movs	r3, #0
}
 8006228:	4618      	mov	r0, r3
 800622a:	3714      	adds	r7, #20
 800622c:	46bd      	mov	sp, r7
 800622e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006232:	4770      	bx	lr
 8006234:	00030d40 	.word	0x00030d40

08006238 <USB_FlushRxFifo>:
  * @brief  USB_FlushRxFifo  Flush Rx FIFO
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushRxFifo(USB_OTG_GlobalTypeDef *USBx)
{
 8006238:	b480      	push	{r7}
 800623a:	b085      	sub	sp, #20
 800623c:	af00      	add	r7, sp, #0
 800623e:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 8006240:	2300      	movs	r3, #0
 8006242:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 8006244:	68fb      	ldr	r3, [r7, #12]
 8006246:	3301      	adds	r3, #1
 8006248:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 800624a:	68fb      	ldr	r3, [r7, #12]
 800624c:	4a11      	ldr	r2, [pc, #68]	; (8006294 <USB_FlushRxFifo+0x5c>)
 800624e:	4293      	cmp	r3, r2
 8006250:	d901      	bls.n	8006256 <USB_FlushRxFifo+0x1e>
    {
      return HAL_TIMEOUT;
 8006252:	2303      	movs	r3, #3
 8006254:	e018      	b.n	8006288 <USB_FlushRxFifo+0x50>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 8006256:	687b      	ldr	r3, [r7, #4]
 8006258:	691b      	ldr	r3, [r3, #16]
 800625a:	2b00      	cmp	r3, #0
 800625c:	daf2      	bge.n	8006244 <USB_FlushRxFifo+0xc>

  /* Flush RX Fifo */
  count = 0U;
 800625e:	2300      	movs	r3, #0
 8006260:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL = USB_OTG_GRSTCTL_RXFFLSH;
 8006262:	687b      	ldr	r3, [r7, #4]
 8006264:	2210      	movs	r2, #16
 8006266:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 8006268:	68fb      	ldr	r3, [r7, #12]
 800626a:	3301      	adds	r3, #1
 800626c:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 800626e:	68fb      	ldr	r3, [r7, #12]
 8006270:	4a08      	ldr	r2, [pc, #32]	; (8006294 <USB_FlushRxFifo+0x5c>)
 8006272:	4293      	cmp	r3, r2
 8006274:	d901      	bls.n	800627a <USB_FlushRxFifo+0x42>
    {
      return HAL_TIMEOUT;
 8006276:	2303      	movs	r3, #3
 8006278:	e006      	b.n	8006288 <USB_FlushRxFifo+0x50>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_RXFFLSH) == USB_OTG_GRSTCTL_RXFFLSH);
 800627a:	687b      	ldr	r3, [r7, #4]
 800627c:	691b      	ldr	r3, [r3, #16]
 800627e:	f003 0310 	and.w	r3, r3, #16
 8006282:	2b10      	cmp	r3, #16
 8006284:	d0f0      	beq.n	8006268 <USB_FlushRxFifo+0x30>

  return HAL_OK;
 8006286:	2300      	movs	r3, #0
}
 8006288:	4618      	mov	r0, r3
 800628a:	3714      	adds	r7, #20
 800628c:	46bd      	mov	sp, r7
 800628e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006292:	4770      	bx	lr
 8006294:	00030d40 	.word	0x00030d40

08006298 <USB_ReadPacket>:
  * @param  dest  source pointer
  * @param  len  Number of bytes to read
  * @retval pointer to destination buffer
  */
void *USB_ReadPacket(USB_OTG_GlobalTypeDef *USBx, uint8_t *dest, uint16_t len)
{
 8006298:	b480      	push	{r7}
 800629a:	b08b      	sub	sp, #44	; 0x2c
 800629c:	af00      	add	r7, sp, #0
 800629e:	60f8      	str	r0, [r7, #12]
 80062a0:	60b9      	str	r1, [r7, #8]
 80062a2:	4613      	mov	r3, r2
 80062a4:	80fb      	strh	r3, [r7, #6]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80062a6:	68fb      	ldr	r3, [r7, #12]
 80062a8:	61bb      	str	r3, [r7, #24]
  uint8_t *pDest = dest;
 80062aa:	68bb      	ldr	r3, [r7, #8]
 80062ac:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t pData;
  uint32_t i;
  uint32_t count32b = (uint32_t)len >> 2U;
 80062ae:	88fb      	ldrh	r3, [r7, #6]
 80062b0:	089b      	lsrs	r3, r3, #2
 80062b2:	b29b      	uxth	r3, r3
 80062b4:	617b      	str	r3, [r7, #20]
  uint16_t remaining_bytes = len % 4U;
 80062b6:	88fb      	ldrh	r3, [r7, #6]
 80062b8:	f003 0303 	and.w	r3, r3, #3
 80062bc:	83fb      	strh	r3, [r7, #30]

  for (i = 0U; i < count32b; i++)
 80062be:	2300      	movs	r3, #0
 80062c0:	623b      	str	r3, [r7, #32]
 80062c2:	e014      	b.n	80062ee <USB_ReadPacket+0x56>
  {
    __UNALIGNED_UINT32_WRITE(pDest, USBx_DFIFO(0U));
 80062c4:	69bb      	ldr	r3, [r7, #24]
 80062c6:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80062ca:	681a      	ldr	r2, [r3, #0]
 80062cc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80062ce:	601a      	str	r2, [r3, #0]
    pDest++;
 80062d0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80062d2:	3301      	adds	r3, #1
 80062d4:	627b      	str	r3, [r7, #36]	; 0x24
    pDest++;
 80062d6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80062d8:	3301      	adds	r3, #1
 80062da:	627b      	str	r3, [r7, #36]	; 0x24
    pDest++;
 80062dc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80062de:	3301      	adds	r3, #1
 80062e0:	627b      	str	r3, [r7, #36]	; 0x24
    pDest++;
 80062e2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80062e4:	3301      	adds	r3, #1
 80062e6:	627b      	str	r3, [r7, #36]	; 0x24
  for (i = 0U; i < count32b; i++)
 80062e8:	6a3b      	ldr	r3, [r7, #32]
 80062ea:	3301      	adds	r3, #1
 80062ec:	623b      	str	r3, [r7, #32]
 80062ee:	6a3a      	ldr	r2, [r7, #32]
 80062f0:	697b      	ldr	r3, [r7, #20]
 80062f2:	429a      	cmp	r2, r3
 80062f4:	d3e6      	bcc.n	80062c4 <USB_ReadPacket+0x2c>
  }

  /* When Number of data is not word aligned, read the remaining byte */
  if (remaining_bytes != 0U)
 80062f6:	8bfb      	ldrh	r3, [r7, #30]
 80062f8:	2b00      	cmp	r3, #0
 80062fa:	d01e      	beq.n	800633a <USB_ReadPacket+0xa2>
  {
    i = 0U;
 80062fc:	2300      	movs	r3, #0
 80062fe:	623b      	str	r3, [r7, #32]
    __UNALIGNED_UINT32_WRITE(&pData, USBx_DFIFO(0U));
 8006300:	69bb      	ldr	r3, [r7, #24]
 8006302:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8006306:	461a      	mov	r2, r3
 8006308:	f107 0310 	add.w	r3, r7, #16
 800630c:	6812      	ldr	r2, [r2, #0]
 800630e:	601a      	str	r2, [r3, #0]

    do
    {
      *(uint8_t *)pDest = (uint8_t)(pData >> (8U * (uint8_t)(i)));
 8006310:	693a      	ldr	r2, [r7, #16]
 8006312:	6a3b      	ldr	r3, [r7, #32]
 8006314:	b2db      	uxtb	r3, r3
 8006316:	00db      	lsls	r3, r3, #3
 8006318:	fa22 f303 	lsr.w	r3, r2, r3
 800631c:	b2da      	uxtb	r2, r3
 800631e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006320:	701a      	strb	r2, [r3, #0]
      i++;
 8006322:	6a3b      	ldr	r3, [r7, #32]
 8006324:	3301      	adds	r3, #1
 8006326:	623b      	str	r3, [r7, #32]
      pDest++;
 8006328:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800632a:	3301      	adds	r3, #1
 800632c:	627b      	str	r3, [r7, #36]	; 0x24
      remaining_bytes--;
 800632e:	8bfb      	ldrh	r3, [r7, #30]
 8006330:	3b01      	subs	r3, #1
 8006332:	83fb      	strh	r3, [r7, #30]
    } while (remaining_bytes != 0U);
 8006334:	8bfb      	ldrh	r3, [r7, #30]
 8006336:	2b00      	cmp	r3, #0
 8006338:	d1ea      	bne.n	8006310 <USB_ReadPacket+0x78>
  }

  return ((void *)pDest);
 800633a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
}
 800633c:	4618      	mov	r0, r3
 800633e:	372c      	adds	r7, #44	; 0x2c
 8006340:	46bd      	mov	sp, r7
 8006342:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006346:	4770      	bx	lr

08006348 <USB_ReadInterrupts>:
  * @brief  USB_ReadInterrupts: return the global USB interrupt status
  * @param  USBx  Selected device
  * @retval HAL status
  */
uint32_t  USB_ReadInterrupts(USB_OTG_GlobalTypeDef *USBx)
{
 8006348:	b480      	push	{r7}
 800634a:	b085      	sub	sp, #20
 800634c:	af00      	add	r7, sp, #0
 800634e:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;

  tmpreg = USBx->GINTSTS;
 8006350:	687b      	ldr	r3, [r7, #4]
 8006352:	695b      	ldr	r3, [r3, #20]
 8006354:	60fb      	str	r3, [r7, #12]
  tmpreg &= USBx->GINTMSK;
 8006356:	687b      	ldr	r3, [r7, #4]
 8006358:	699b      	ldr	r3, [r3, #24]
 800635a:	68fa      	ldr	r2, [r7, #12]
 800635c:	4013      	ands	r3, r2
 800635e:	60fb      	str	r3, [r7, #12]

  return tmpreg;
 8006360:	68fb      	ldr	r3, [r7, #12]
}
 8006362:	4618      	mov	r0, r3
 8006364:	3714      	adds	r7, #20
 8006366:	46bd      	mov	sp, r7
 8006368:	f85d 7b04 	ldr.w	r7, [sp], #4
 800636c:	4770      	bx	lr

0800636e <USB_GetMode>:
  *          This parameter can be one of these values:
  *           0 : Host
  *           1 : Device
  */
uint32_t USB_GetMode(USB_OTG_GlobalTypeDef *USBx)
{
 800636e:	b480      	push	{r7}
 8006370:	b083      	sub	sp, #12
 8006372:	af00      	add	r7, sp, #0
 8006374:	6078      	str	r0, [r7, #4]
  return ((USBx->GINTSTS) & 0x1U);
 8006376:	687b      	ldr	r3, [r7, #4]
 8006378:	695b      	ldr	r3, [r3, #20]
 800637a:	f003 0301 	and.w	r3, r3, #1
}
 800637e:	4618      	mov	r0, r3
 8006380:	370c      	adds	r7, #12
 8006382:	46bd      	mov	sp, r7
 8006384:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006388:	4770      	bx	lr

0800638a <USB_InitFSLSPClkSel>:
  *           HCFG_48_MHZ : Full Speed 48 MHz Clock
  *           HCFG_6_MHZ : Low Speed 6 MHz Clock
  * @retval HAL status
  */
HAL_StatusTypeDef USB_InitFSLSPClkSel(USB_OTG_GlobalTypeDef *USBx, uint8_t freq)
{
 800638a:	b480      	push	{r7}
 800638c:	b085      	sub	sp, #20
 800638e:	af00      	add	r7, sp, #0
 8006390:	6078      	str	r0, [r7, #4]
 8006392:	460b      	mov	r3, r1
 8006394:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8006396:	687b      	ldr	r3, [r7, #4]
 8006398:	60fb      	str	r3, [r7, #12]

  USBx_HOST->HCFG &= ~(USB_OTG_HCFG_FSLSPCS);
 800639a:	68fb      	ldr	r3, [r7, #12]
 800639c:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 80063a0:	681b      	ldr	r3, [r3, #0]
 80063a2:	68fa      	ldr	r2, [r7, #12]
 80063a4:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 80063a8:	f023 0303 	bic.w	r3, r3, #3
 80063ac:	6013      	str	r3, [r2, #0]
  USBx_HOST->HCFG |= (uint32_t)freq & USB_OTG_HCFG_FSLSPCS;
 80063ae:	68fb      	ldr	r3, [r7, #12]
 80063b0:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 80063b4:	681a      	ldr	r2, [r3, #0]
 80063b6:	78fb      	ldrb	r3, [r7, #3]
 80063b8:	f003 0303 	and.w	r3, r3, #3
 80063bc:	68f9      	ldr	r1, [r7, #12]
 80063be:	f501 6180 	add.w	r1, r1, #1024	; 0x400
 80063c2:	4313      	orrs	r3, r2
 80063c4:	600b      	str	r3, [r1, #0]

  if (freq == HCFG_48_MHZ)
 80063c6:	78fb      	ldrb	r3, [r7, #3]
 80063c8:	2b01      	cmp	r3, #1
 80063ca:	d107      	bne.n	80063dc <USB_InitFSLSPClkSel+0x52>
  {
    USBx_HOST->HFIR = 48000U;
 80063cc:	68fb      	ldr	r3, [r7, #12]
 80063ce:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 80063d2:	461a      	mov	r2, r3
 80063d4:	f64b 3380 	movw	r3, #48000	; 0xbb80
 80063d8:	6053      	str	r3, [r2, #4]
 80063da:	e009      	b.n	80063f0 <USB_InitFSLSPClkSel+0x66>
  }
  else if (freq == HCFG_6_MHZ)
 80063dc:	78fb      	ldrb	r3, [r7, #3]
 80063de:	2b02      	cmp	r3, #2
 80063e0:	d106      	bne.n	80063f0 <USB_InitFSLSPClkSel+0x66>
  {
    USBx_HOST->HFIR = 6000U;
 80063e2:	68fb      	ldr	r3, [r7, #12]
 80063e4:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 80063e8:	461a      	mov	r2, r3
 80063ea:	f241 7370 	movw	r3, #6000	; 0x1770
 80063ee:	6053      	str	r3, [r2, #4]
  else
  {
    /* ... */
  }

  return HAL_OK;
 80063f0:	2300      	movs	r3, #0
}
 80063f2:	4618      	mov	r0, r3
 80063f4:	3714      	adds	r7, #20
 80063f6:	46bd      	mov	sp, r7
 80063f8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80063fc:	4770      	bx	lr

080063fe <USB_HC_ReadInterrupt>:
  * @brief Read all host channel interrupts status
  * @param  USBx  Selected device
  * @retval HAL state
  */
uint32_t USB_HC_ReadInterrupt(USB_OTG_GlobalTypeDef *USBx)
{
 80063fe:	b480      	push	{r7}
 8006400:	b085      	sub	sp, #20
 8006402:	af00      	add	r7, sp, #0
 8006404:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8006406:	687b      	ldr	r3, [r7, #4]
 8006408:	60fb      	str	r3, [r7, #12]

  return ((USBx_HOST->HAINT) & 0xFFFFU);
 800640a:	68fb      	ldr	r3, [r7, #12]
 800640c:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8006410:	695b      	ldr	r3, [r3, #20]
 8006412:	b29b      	uxth	r3, r3
}
 8006414:	4618      	mov	r0, r3
 8006416:	3714      	adds	r7, #20
 8006418:	46bd      	mov	sp, r7
 800641a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800641e:	4770      	bx	lr

08006420 <USB_HC_Halt>:
  * @param  hc_num  Host Channel number
  *         This parameter can be a value from 1 to 15
  * @retval HAL state
  */
HAL_StatusTypeDef USB_HC_Halt(USB_OTG_GlobalTypeDef *USBx, uint8_t hc_num)
{
 8006420:	b480      	push	{r7}
 8006422:	b089      	sub	sp, #36	; 0x24
 8006424:	af00      	add	r7, sp, #0
 8006426:	6078      	str	r0, [r7, #4]
 8006428:	460b      	mov	r3, r1
 800642a:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800642c:	687b      	ldr	r3, [r7, #4]
 800642e:	61fb      	str	r3, [r7, #28]
  uint32_t hcnum = (uint32_t)hc_num;
 8006430:	78fb      	ldrb	r3, [r7, #3]
 8006432:	61bb      	str	r3, [r7, #24]
  __IO uint32_t count = 0U;
 8006434:	2300      	movs	r3, #0
 8006436:	60fb      	str	r3, [r7, #12]
  uint32_t HcEpType = (USBx_HC(hcnum)->HCCHAR & USB_OTG_HCCHAR_EPTYP) >> 18;
 8006438:	69bb      	ldr	r3, [r7, #24]
 800643a:	015a      	lsls	r2, r3, #5
 800643c:	69fb      	ldr	r3, [r7, #28]
 800643e:	4413      	add	r3, r2
 8006440:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8006444:	681b      	ldr	r3, [r3, #0]
 8006446:	0c9b      	lsrs	r3, r3, #18
 8006448:	f003 0303 	and.w	r3, r3, #3
 800644c:	617b      	str	r3, [r7, #20]
  uint32_t ChannelEna = (USBx_HC(hcnum)->HCCHAR & USB_OTG_HCCHAR_CHENA) >> 31;
 800644e:	69bb      	ldr	r3, [r7, #24]
 8006450:	015a      	lsls	r2, r3, #5
 8006452:	69fb      	ldr	r3, [r7, #28]
 8006454:	4413      	add	r3, r2
 8006456:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800645a:	681b      	ldr	r3, [r3, #0]
 800645c:	0fdb      	lsrs	r3, r3, #31
 800645e:	f003 0301 	and.w	r3, r3, #1
 8006462:	613b      	str	r3, [r7, #16]

  if (((USBx->GAHBCFG & USB_OTG_GAHBCFG_DMAEN) == USB_OTG_GAHBCFG_DMAEN) &&
 8006464:	687b      	ldr	r3, [r7, #4]
 8006466:	689b      	ldr	r3, [r3, #8]
 8006468:	f003 0320 	and.w	r3, r3, #32
 800646c:	2b20      	cmp	r3, #32
 800646e:	d104      	bne.n	800647a <USB_HC_Halt+0x5a>
 8006470:	693b      	ldr	r3, [r7, #16]
 8006472:	2b00      	cmp	r3, #0
 8006474:	d101      	bne.n	800647a <USB_HC_Halt+0x5a>
      (ChannelEna == 0U))
  {
    return HAL_OK;
 8006476:	2300      	movs	r3, #0
 8006478:	e0c8      	b.n	800660c <USB_HC_Halt+0x1ec>
  }

  /* Check for space in the request queue to issue the halt. */
  if ((HcEpType == HCCHAR_CTRL) || (HcEpType == HCCHAR_BULK))
 800647a:	697b      	ldr	r3, [r7, #20]
 800647c:	2b00      	cmp	r3, #0
 800647e:	d002      	beq.n	8006486 <USB_HC_Halt+0x66>
 8006480:	697b      	ldr	r3, [r7, #20]
 8006482:	2b02      	cmp	r3, #2
 8006484:	d163      	bne.n	800654e <USB_HC_Halt+0x12e>
  {
    USBx_HC(hcnum)->HCCHAR |= USB_OTG_HCCHAR_CHDIS;
 8006486:	69bb      	ldr	r3, [r7, #24]
 8006488:	015a      	lsls	r2, r3, #5
 800648a:	69fb      	ldr	r3, [r7, #28]
 800648c:	4413      	add	r3, r2
 800648e:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8006492:	681b      	ldr	r3, [r3, #0]
 8006494:	69ba      	ldr	r2, [r7, #24]
 8006496:	0151      	lsls	r1, r2, #5
 8006498:	69fa      	ldr	r2, [r7, #28]
 800649a:	440a      	add	r2, r1
 800649c:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 80064a0:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 80064a4:	6013      	str	r3, [r2, #0]

    if ((USBx->GAHBCFG & USB_OTG_GAHBCFG_DMAEN) == 0U)
 80064a6:	687b      	ldr	r3, [r7, #4]
 80064a8:	689b      	ldr	r3, [r3, #8]
 80064aa:	f003 0320 	and.w	r3, r3, #32
 80064ae:	2b00      	cmp	r3, #0
 80064b0:	f040 80ab 	bne.w	800660a <USB_HC_Halt+0x1ea>
    {
      if ((USBx->HNPTXSTS & (0xFFU << 16)) == 0U)
 80064b4:	687b      	ldr	r3, [r7, #4]
 80064b6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80064b8:	f403 037f 	and.w	r3, r3, #16711680	; 0xff0000
 80064bc:	2b00      	cmp	r3, #0
 80064be:	d133      	bne.n	8006528 <USB_HC_Halt+0x108>
      {
        USBx_HC(hcnum)->HCCHAR &= ~USB_OTG_HCCHAR_CHENA;
 80064c0:	69bb      	ldr	r3, [r7, #24]
 80064c2:	015a      	lsls	r2, r3, #5
 80064c4:	69fb      	ldr	r3, [r7, #28]
 80064c6:	4413      	add	r3, r2
 80064c8:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80064cc:	681b      	ldr	r3, [r3, #0]
 80064ce:	69ba      	ldr	r2, [r7, #24]
 80064d0:	0151      	lsls	r1, r2, #5
 80064d2:	69fa      	ldr	r2, [r7, #28]
 80064d4:	440a      	add	r2, r1
 80064d6:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 80064da:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 80064de:	6013      	str	r3, [r2, #0]
        USBx_HC(hcnum)->HCCHAR |= USB_OTG_HCCHAR_CHENA;
 80064e0:	69bb      	ldr	r3, [r7, #24]
 80064e2:	015a      	lsls	r2, r3, #5
 80064e4:	69fb      	ldr	r3, [r7, #28]
 80064e6:	4413      	add	r3, r2
 80064e8:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80064ec:	681b      	ldr	r3, [r3, #0]
 80064ee:	69ba      	ldr	r2, [r7, #24]
 80064f0:	0151      	lsls	r1, r2, #5
 80064f2:	69fa      	ldr	r2, [r7, #28]
 80064f4:	440a      	add	r2, r1
 80064f6:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 80064fa:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 80064fe:	6013      	str	r3, [r2, #0]
        do
        {
          count++;
 8006500:	68fb      	ldr	r3, [r7, #12]
 8006502:	3301      	adds	r3, #1
 8006504:	60fb      	str	r3, [r7, #12]

          if (count > 1000U)
 8006506:	68fb      	ldr	r3, [r7, #12]
 8006508:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 800650c:	d81d      	bhi.n	800654a <USB_HC_Halt+0x12a>
          {
            break;
          }
        } while ((USBx_HC(hcnum)->HCCHAR & USB_OTG_HCCHAR_CHENA) == USB_OTG_HCCHAR_CHENA);
 800650e:	69bb      	ldr	r3, [r7, #24]
 8006510:	015a      	lsls	r2, r3, #5
 8006512:	69fb      	ldr	r3, [r7, #28]
 8006514:	4413      	add	r3, r2
 8006516:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800651a:	681b      	ldr	r3, [r3, #0]
 800651c:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8006520:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8006524:	d0ec      	beq.n	8006500 <USB_HC_Halt+0xe0>
    if ((USBx->GAHBCFG & USB_OTG_GAHBCFG_DMAEN) == 0U)
 8006526:	e070      	b.n	800660a <USB_HC_Halt+0x1ea>
      }
      else
      {
        USBx_HC(hcnum)->HCCHAR |= USB_OTG_HCCHAR_CHENA;
 8006528:	69bb      	ldr	r3, [r7, #24]
 800652a:	015a      	lsls	r2, r3, #5
 800652c:	69fb      	ldr	r3, [r7, #28]
 800652e:	4413      	add	r3, r2
 8006530:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8006534:	681b      	ldr	r3, [r3, #0]
 8006536:	69ba      	ldr	r2, [r7, #24]
 8006538:	0151      	lsls	r1, r2, #5
 800653a:	69fa      	ldr	r2, [r7, #28]
 800653c:	440a      	add	r2, r1
 800653e:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8006542:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8006546:	6013      	str	r3, [r2, #0]
    if ((USBx->GAHBCFG & USB_OTG_GAHBCFG_DMAEN) == 0U)
 8006548:	e05f      	b.n	800660a <USB_HC_Halt+0x1ea>
            break;
 800654a:	bf00      	nop
    if ((USBx->GAHBCFG & USB_OTG_GAHBCFG_DMAEN) == 0U)
 800654c:	e05d      	b.n	800660a <USB_HC_Halt+0x1ea>
      }
    }
  }
  else
  {
    USBx_HC(hcnum)->HCCHAR |= USB_OTG_HCCHAR_CHDIS;
 800654e:	69bb      	ldr	r3, [r7, #24]
 8006550:	015a      	lsls	r2, r3, #5
 8006552:	69fb      	ldr	r3, [r7, #28]
 8006554:	4413      	add	r3, r2
 8006556:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800655a:	681b      	ldr	r3, [r3, #0]
 800655c:	69ba      	ldr	r2, [r7, #24]
 800655e:	0151      	lsls	r1, r2, #5
 8006560:	69fa      	ldr	r2, [r7, #28]
 8006562:	440a      	add	r2, r1
 8006564:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8006568:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 800656c:	6013      	str	r3, [r2, #0]

    if ((USBx_HOST->HPTXSTS & (0xFFU << 16)) == 0U)
 800656e:	69fb      	ldr	r3, [r7, #28]
 8006570:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8006574:	691b      	ldr	r3, [r3, #16]
 8006576:	f403 037f 	and.w	r3, r3, #16711680	; 0xff0000
 800657a:	2b00      	cmp	r3, #0
 800657c:	d133      	bne.n	80065e6 <USB_HC_Halt+0x1c6>
    {
      USBx_HC(hcnum)->HCCHAR &= ~USB_OTG_HCCHAR_CHENA;
 800657e:	69bb      	ldr	r3, [r7, #24]
 8006580:	015a      	lsls	r2, r3, #5
 8006582:	69fb      	ldr	r3, [r7, #28]
 8006584:	4413      	add	r3, r2
 8006586:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800658a:	681b      	ldr	r3, [r3, #0]
 800658c:	69ba      	ldr	r2, [r7, #24]
 800658e:	0151      	lsls	r1, r2, #5
 8006590:	69fa      	ldr	r2, [r7, #28]
 8006592:	440a      	add	r2, r1
 8006594:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8006598:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 800659c:	6013      	str	r3, [r2, #0]
      USBx_HC(hcnum)->HCCHAR |= USB_OTG_HCCHAR_CHENA;
 800659e:	69bb      	ldr	r3, [r7, #24]
 80065a0:	015a      	lsls	r2, r3, #5
 80065a2:	69fb      	ldr	r3, [r7, #28]
 80065a4:	4413      	add	r3, r2
 80065a6:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80065aa:	681b      	ldr	r3, [r3, #0]
 80065ac:	69ba      	ldr	r2, [r7, #24]
 80065ae:	0151      	lsls	r1, r2, #5
 80065b0:	69fa      	ldr	r2, [r7, #28]
 80065b2:	440a      	add	r2, r1
 80065b4:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 80065b8:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 80065bc:	6013      	str	r3, [r2, #0]
      do
      {
        count++;
 80065be:	68fb      	ldr	r3, [r7, #12]
 80065c0:	3301      	adds	r3, #1
 80065c2:	60fb      	str	r3, [r7, #12]

        if (count > 1000U)
 80065c4:	68fb      	ldr	r3, [r7, #12]
 80065c6:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 80065ca:	d81d      	bhi.n	8006608 <USB_HC_Halt+0x1e8>
        {
          break;
        }
      } while ((USBx_HC(hcnum)->HCCHAR & USB_OTG_HCCHAR_CHENA) == USB_OTG_HCCHAR_CHENA);
 80065cc:	69bb      	ldr	r3, [r7, #24]
 80065ce:	015a      	lsls	r2, r3, #5
 80065d0:	69fb      	ldr	r3, [r7, #28]
 80065d2:	4413      	add	r3, r2
 80065d4:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80065d8:	681b      	ldr	r3, [r3, #0]
 80065da:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 80065de:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 80065e2:	d0ec      	beq.n	80065be <USB_HC_Halt+0x19e>
 80065e4:	e011      	b.n	800660a <USB_HC_Halt+0x1ea>
    }
    else
    {
      USBx_HC(hcnum)->HCCHAR |= USB_OTG_HCCHAR_CHENA;
 80065e6:	69bb      	ldr	r3, [r7, #24]
 80065e8:	015a      	lsls	r2, r3, #5
 80065ea:	69fb      	ldr	r3, [r7, #28]
 80065ec:	4413      	add	r3, r2
 80065ee:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80065f2:	681b      	ldr	r3, [r3, #0]
 80065f4:	69ba      	ldr	r2, [r7, #24]
 80065f6:	0151      	lsls	r1, r2, #5
 80065f8:	69fa      	ldr	r2, [r7, #28]
 80065fa:	440a      	add	r2, r1
 80065fc:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8006600:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8006604:	6013      	str	r3, [r2, #0]
 8006606:	e000      	b.n	800660a <USB_HC_Halt+0x1ea>
          break;
 8006608:	bf00      	nop
    }
  }

  return HAL_OK;
 800660a:	2300      	movs	r3, #0
}
 800660c:	4618      	mov	r0, r3
 800660e:	3724      	adds	r7, #36	; 0x24
 8006610:	46bd      	mov	sp, r7
 8006612:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006616:	4770      	bx	lr

08006618 <USB_StopHost>:
  * @brief  Stop Host Core
  * @param  USBx  Selected device
  * @retval HAL state
  */
HAL_StatusTypeDef USB_StopHost(USB_OTG_GlobalTypeDef *USBx)
{
 8006618:	b580      	push	{r7, lr}
 800661a:	b088      	sub	sp, #32
 800661c:	af00      	add	r7, sp, #0
 800661e:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef ret = HAL_OK;
 8006620:	2300      	movs	r3, #0
 8006622:	77fb      	strb	r3, [r7, #31]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8006624:	687b      	ldr	r3, [r7, #4]
 8006626:	617b      	str	r3, [r7, #20]
  __IO uint32_t count = 0U;
 8006628:	2300      	movs	r3, #0
 800662a:	60fb      	str	r3, [r7, #12]
  uint32_t value;
  uint32_t i;

  (void)USB_DisableGlobalInt(USBx);
 800662c:	6878      	ldr	r0, [r7, #4]
 800662e:	f7ff fdbe 	bl	80061ae <USB_DisableGlobalInt>

  /* Flush USB FIFO */
  if (USB_FlushTxFifo(USBx, 0x10U) != HAL_OK) /* all Tx FIFOs */
 8006632:	2110      	movs	r1, #16
 8006634:	6878      	ldr	r0, [r7, #4]
 8006636:	f7ff fdcb 	bl	80061d0 <USB_FlushTxFifo>
 800663a:	4603      	mov	r3, r0
 800663c:	2b00      	cmp	r3, #0
 800663e:	d001      	beq.n	8006644 <USB_StopHost+0x2c>
  {
    ret = HAL_ERROR;
 8006640:	2301      	movs	r3, #1
 8006642:	77fb      	strb	r3, [r7, #31]
  }

  if (USB_FlushRxFifo(USBx) != HAL_OK)
 8006644:	6878      	ldr	r0, [r7, #4]
 8006646:	f7ff fdf7 	bl	8006238 <USB_FlushRxFifo>
 800664a:	4603      	mov	r3, r0
 800664c:	2b00      	cmp	r3, #0
 800664e:	d001      	beq.n	8006654 <USB_StopHost+0x3c>
  {
    ret = HAL_ERROR;
 8006650:	2301      	movs	r3, #1
 8006652:	77fb      	strb	r3, [r7, #31]
  }

  /* Flush out any leftover queued requests. */
  for (i = 0U; i <= 15U; i++)
 8006654:	2300      	movs	r3, #0
 8006656:	61bb      	str	r3, [r7, #24]
 8006658:	e01f      	b.n	800669a <USB_StopHost+0x82>
  {
    value = USBx_HC(i)->HCCHAR;
 800665a:	69bb      	ldr	r3, [r7, #24]
 800665c:	015a      	lsls	r2, r3, #5
 800665e:	697b      	ldr	r3, [r7, #20]
 8006660:	4413      	add	r3, r2
 8006662:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8006666:	681b      	ldr	r3, [r3, #0]
 8006668:	613b      	str	r3, [r7, #16]
    value |=  USB_OTG_HCCHAR_CHDIS;
 800666a:	693b      	ldr	r3, [r7, #16]
 800666c:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 8006670:	613b      	str	r3, [r7, #16]
    value &= ~USB_OTG_HCCHAR_CHENA;
 8006672:	693b      	ldr	r3, [r7, #16]
 8006674:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 8006678:	613b      	str	r3, [r7, #16]
    value &= ~USB_OTG_HCCHAR_EPDIR;
 800667a:	693b      	ldr	r3, [r7, #16]
 800667c:	f423 4300 	bic.w	r3, r3, #32768	; 0x8000
 8006680:	613b      	str	r3, [r7, #16]
    USBx_HC(i)->HCCHAR = value;
 8006682:	69bb      	ldr	r3, [r7, #24]
 8006684:	015a      	lsls	r2, r3, #5
 8006686:	697b      	ldr	r3, [r7, #20]
 8006688:	4413      	add	r3, r2
 800668a:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800668e:	461a      	mov	r2, r3
 8006690:	693b      	ldr	r3, [r7, #16]
 8006692:	6013      	str	r3, [r2, #0]
  for (i = 0U; i <= 15U; i++)
 8006694:	69bb      	ldr	r3, [r7, #24]
 8006696:	3301      	adds	r3, #1
 8006698:	61bb      	str	r3, [r7, #24]
 800669a:	69bb      	ldr	r3, [r7, #24]
 800669c:	2b0f      	cmp	r3, #15
 800669e:	d9dc      	bls.n	800665a <USB_StopHost+0x42>
  }

  /* Halt all channels to put them into a known state. */
  for (i = 0U; i <= 15U; i++)
 80066a0:	2300      	movs	r3, #0
 80066a2:	61bb      	str	r3, [r7, #24]
 80066a4:	e034      	b.n	8006710 <USB_StopHost+0xf8>
  {
    value = USBx_HC(i)->HCCHAR;
 80066a6:	69bb      	ldr	r3, [r7, #24]
 80066a8:	015a      	lsls	r2, r3, #5
 80066aa:	697b      	ldr	r3, [r7, #20]
 80066ac:	4413      	add	r3, r2
 80066ae:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80066b2:	681b      	ldr	r3, [r3, #0]
 80066b4:	613b      	str	r3, [r7, #16]
    value |= USB_OTG_HCCHAR_CHDIS;
 80066b6:	693b      	ldr	r3, [r7, #16]
 80066b8:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 80066bc:	613b      	str	r3, [r7, #16]
    value |= USB_OTG_HCCHAR_CHENA;
 80066be:	693b      	ldr	r3, [r7, #16]
 80066c0:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 80066c4:	613b      	str	r3, [r7, #16]
    value &= ~USB_OTG_HCCHAR_EPDIR;
 80066c6:	693b      	ldr	r3, [r7, #16]
 80066c8:	f423 4300 	bic.w	r3, r3, #32768	; 0x8000
 80066cc:	613b      	str	r3, [r7, #16]
    USBx_HC(i)->HCCHAR = value;
 80066ce:	69bb      	ldr	r3, [r7, #24]
 80066d0:	015a      	lsls	r2, r3, #5
 80066d2:	697b      	ldr	r3, [r7, #20]
 80066d4:	4413      	add	r3, r2
 80066d6:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80066da:	461a      	mov	r2, r3
 80066dc:	693b      	ldr	r3, [r7, #16]
 80066de:	6013      	str	r3, [r2, #0]

    do
    {
      count++;
 80066e0:	68fb      	ldr	r3, [r7, #12]
 80066e2:	3301      	adds	r3, #1
 80066e4:	60fb      	str	r3, [r7, #12]

      if (count > 1000U)
 80066e6:	68fb      	ldr	r3, [r7, #12]
 80066e8:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 80066ec:	d80c      	bhi.n	8006708 <USB_StopHost+0xf0>
      {
        break;
      }
    } while ((USBx_HC(i)->HCCHAR & USB_OTG_HCCHAR_CHENA) == USB_OTG_HCCHAR_CHENA);
 80066ee:	69bb      	ldr	r3, [r7, #24]
 80066f0:	015a      	lsls	r2, r3, #5
 80066f2:	697b      	ldr	r3, [r7, #20]
 80066f4:	4413      	add	r3, r2
 80066f6:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80066fa:	681b      	ldr	r3, [r3, #0]
 80066fc:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8006700:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8006704:	d0ec      	beq.n	80066e0 <USB_StopHost+0xc8>
 8006706:	e000      	b.n	800670a <USB_StopHost+0xf2>
        break;
 8006708:	bf00      	nop
  for (i = 0U; i <= 15U; i++)
 800670a:	69bb      	ldr	r3, [r7, #24]
 800670c:	3301      	adds	r3, #1
 800670e:	61bb      	str	r3, [r7, #24]
 8006710:	69bb      	ldr	r3, [r7, #24]
 8006712:	2b0f      	cmp	r3, #15
 8006714:	d9c7      	bls.n	80066a6 <USB_StopHost+0x8e>
  }

  /* Clear any pending Host interrupts */
  USBx_HOST->HAINT = 0xFFFFFFFFU;
 8006716:	697b      	ldr	r3, [r7, #20]
 8006718:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 800671c:	461a      	mov	r2, r3
 800671e:	f04f 33ff 	mov.w	r3, #4294967295
 8006722:	6153      	str	r3, [r2, #20]
  USBx->GINTSTS = 0xFFFFFFFFU;
 8006724:	687b      	ldr	r3, [r7, #4]
 8006726:	f04f 32ff 	mov.w	r2, #4294967295
 800672a:	615a      	str	r2, [r3, #20]

  (void)USB_EnableGlobalInt(USBx);
 800672c:	6878      	ldr	r0, [r7, #4]
 800672e:	f7ff fd2d 	bl	800618c <USB_EnableGlobalInt>

  return ret;
 8006732:	7ffb      	ldrb	r3, [r7, #31]
}
 8006734:	4618      	mov	r0, r3
 8006736:	3720      	adds	r7, #32
 8006738:	46bd      	mov	sp, r7
 800673a:	bd80      	pop	{r7, pc}

0800673c <USBH_LL_IncTimer>:
  *         Increment Host Timer tick
  * @param  phost: Host Handle
  * @retval None
  */
void  USBH_LL_IncTimer(USBH_HandleTypeDef *phost)
{
 800673c:	b580      	push	{r7, lr}
 800673e:	b082      	sub	sp, #8
 8006740:	af00      	add	r7, sp, #0
 8006742:	6078      	str	r0, [r7, #4]
  phost->Timer++;
 8006744:	687b      	ldr	r3, [r7, #4]
 8006746:	f8d3 33c4 	ldr.w	r3, [r3, #964]	; 0x3c4
 800674a:	1c5a      	adds	r2, r3, #1
 800674c:	687b      	ldr	r3, [r7, #4]
 800674e:	f8c3 23c4 	str.w	r2, [r3, #964]	; 0x3c4
  USBH_HandleSof(phost);
 8006752:	6878      	ldr	r0, [r7, #4]
 8006754:	f000 f804 	bl	8006760 <USBH_HandleSof>
}
 8006758:	bf00      	nop
 800675a:	3708      	adds	r7, #8
 800675c:	46bd      	mov	sp, r7
 800675e:	bd80      	pop	{r7, pc}

08006760 <USBH_HandleSof>:
  *         Call SOF process
  * @param  phost: Host Handle
  * @retval None
  */
static void  USBH_HandleSof(USBH_HandleTypeDef *phost)
{
 8006760:	b580      	push	{r7, lr}
 8006762:	b082      	sub	sp, #8
 8006764:	af00      	add	r7, sp, #0
 8006766:	6078      	str	r0, [r7, #4]
  if ((phost->gState == HOST_CLASS) && (phost->pActiveClass != NULL))
 8006768:	687b      	ldr	r3, [r7, #4]
 800676a:	781b      	ldrb	r3, [r3, #0]
 800676c:	b2db      	uxtb	r3, r3
 800676e:	2b0b      	cmp	r3, #11
 8006770:	d10a      	bne.n	8006788 <USBH_HandleSof+0x28>
 8006772:	687b      	ldr	r3, [r7, #4]
 8006774:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 8006778:	2b00      	cmp	r3, #0
 800677a:	d005      	beq.n	8006788 <USBH_HandleSof+0x28>
  {
    phost->pActiveClass->SOFProcess(phost);
 800677c:	687b      	ldr	r3, [r7, #4]
 800677e:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 8006782:	699b      	ldr	r3, [r3, #24]
 8006784:	6878      	ldr	r0, [r7, #4]
 8006786:	4798      	blx	r3
  }
}
 8006788:	bf00      	nop
 800678a:	3708      	adds	r7, #8
 800678c:	46bd      	mov	sp, r7
 800678e:	bd80      	pop	{r7, pc}

08006790 <USBH_LL_PortEnabled>:
  *         Port Enabled
  * @param  phost: Host Handle
  * @retval None
  */
void USBH_LL_PortEnabled(USBH_HandleTypeDef *phost)
{
 8006790:	b580      	push	{r7, lr}
 8006792:	b082      	sub	sp, #8
 8006794:	af00      	add	r7, sp, #0
 8006796:	6078      	str	r0, [r7, #4]
  phost->device.PortEnabled = 1U;
 8006798:	687b      	ldr	r3, [r7, #4]
 800679a:	2201      	movs	r2, #1
 800679c:	f883 2323 	strb.w	r2, [r3, #803]	; 0x323

#if (USBH_USE_OS == 1U)
  phost->os_msg = (uint32_t)USBH_PORT_EVENT;
 80067a0:	687b      	ldr	r3, [r7, #4]
 80067a2:	2201      	movs	r2, #1
 80067a4:	f8c3 23e0 	str.w	r2, [r3, #992]	; 0x3e0
#if (osCMSIS < 0x20000U)
  (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
#else
  (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
 80067a8:	687b      	ldr	r3, [r7, #4]
 80067aa:	f8d3 03d8 	ldr.w	r0, [r3, #984]	; 0x3d8
 80067ae:	687b      	ldr	r3, [r7, #4]
 80067b0:	f503 7178 	add.w	r1, r3, #992	; 0x3e0
 80067b4:	2300      	movs	r3, #0
 80067b6:	2200      	movs	r2, #0
 80067b8:	f000 fa1a 	bl	8006bf0 <osMessageQueuePut>
#endif
#endif

  return;
 80067bc:	bf00      	nop
}
 80067be:	3708      	adds	r7, #8
 80067c0:	46bd      	mov	sp, r7
 80067c2:	bd80      	pop	{r7, pc}

080067c4 <USBH_LL_PortDisabled>:
  *         Port Disabled
  * @param  phost: Host Handle
  * @retval None
  */
void USBH_LL_PortDisabled(USBH_HandleTypeDef *phost)
{
 80067c4:	b480      	push	{r7}
 80067c6:	b083      	sub	sp, #12
 80067c8:	af00      	add	r7, sp, #0
 80067ca:	6078      	str	r0, [r7, #4]
  phost->device.PortEnabled = 0U;
 80067cc:	687b      	ldr	r3, [r7, #4]
 80067ce:	2200      	movs	r2, #0
 80067d0:	f883 2323 	strb.w	r2, [r3, #803]	; 0x323

  return;
 80067d4:	bf00      	nop
}
 80067d6:	370c      	adds	r7, #12
 80067d8:	46bd      	mov	sp, r7
 80067da:	f85d 7b04 	ldr.w	r7, [sp], #4
 80067de:	4770      	bx	lr

080067e0 <USBH_LL_Connect>:
  *         Handle USB Host connexion event
  * @param  phost: Host Handle
  * @retval USBH_Status
  */
USBH_StatusTypeDef  USBH_LL_Connect(USBH_HandleTypeDef *phost)
{
 80067e0:	b580      	push	{r7, lr}
 80067e2:	b082      	sub	sp, #8
 80067e4:	af00      	add	r7, sp, #0
 80067e6:	6078      	str	r0, [r7, #4]
  phost->device.is_connected = 1U;
 80067e8:	687b      	ldr	r3, [r7, #4]
 80067ea:	2201      	movs	r2, #1
 80067ec:	f883 2320 	strb.w	r2, [r3, #800]	; 0x320
  phost->device.is_disconnected = 0U;
 80067f0:	687b      	ldr	r3, [r7, #4]
 80067f2:	2200      	movs	r2, #0
 80067f4:	f883 2321 	strb.w	r2, [r3, #801]	; 0x321
  phost->device.is_ReEnumerated = 0U;
 80067f8:	687b      	ldr	r3, [r7, #4]
 80067fa:	2200      	movs	r2, #0
 80067fc:	f883 2322 	strb.w	r2, [r3, #802]	; 0x322


#if (USBH_USE_OS == 1U)
  phost->os_msg = (uint32_t)USBH_PORT_EVENT;
 8006800:	687b      	ldr	r3, [r7, #4]
 8006802:	2201      	movs	r2, #1
 8006804:	f8c3 23e0 	str.w	r2, [r3, #992]	; 0x3e0
#if (osCMSIS < 0x20000U)
  (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
#else
  (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
 8006808:	687b      	ldr	r3, [r7, #4]
 800680a:	f8d3 03d8 	ldr.w	r0, [r3, #984]	; 0x3d8
 800680e:	687b      	ldr	r3, [r7, #4]
 8006810:	f503 7178 	add.w	r1, r3, #992	; 0x3e0
 8006814:	2300      	movs	r3, #0
 8006816:	2200      	movs	r2, #0
 8006818:	f000 f9ea 	bl	8006bf0 <osMessageQueuePut>
#endif
#endif

  return USBH_OK;
 800681c:	2300      	movs	r3, #0
}
 800681e:	4618      	mov	r0, r3
 8006820:	3708      	adds	r7, #8
 8006822:	46bd      	mov	sp, r7
 8006824:	bd80      	pop	{r7, pc}

08006826 <USBH_LL_Disconnect>:
  *         Handle USB Host disconnection event
  * @param  phost: Host Handle
  * @retval USBH_Status
  */
USBH_StatusTypeDef  USBH_LL_Disconnect(USBH_HandleTypeDef *phost)
{
 8006826:	b580      	push	{r7, lr}
 8006828:	b082      	sub	sp, #8
 800682a:	af00      	add	r7, sp, #0
 800682c:	6078      	str	r0, [r7, #4]
  /* update device connection states */
  phost->device.is_disconnected = 1U;
 800682e:	687b      	ldr	r3, [r7, #4]
 8006830:	2201      	movs	r2, #1
 8006832:	f883 2321 	strb.w	r2, [r3, #801]	; 0x321
  phost->device.is_connected = 0U;
 8006836:	687b      	ldr	r3, [r7, #4]
 8006838:	2200      	movs	r2, #0
 800683a:	f883 2320 	strb.w	r2, [r3, #800]	; 0x320
  phost->device.PortEnabled = 0U;
 800683e:	687b      	ldr	r3, [r7, #4]
 8006840:	2200      	movs	r2, #0
 8006842:	f883 2323 	strb.w	r2, [r3, #803]	; 0x323

  /* Stop Host */
  (void)USBH_LL_Stop(phost);
 8006846:	6878      	ldr	r0, [r7, #4]
 8006848:	f003 f814 	bl	8009874 <USBH_LL_Stop>

  /* FRee Control Pipes */
  (void)USBH_FreePipe(phost, phost->Control.pipe_in);
 800684c:	687b      	ldr	r3, [r7, #4]
 800684e:	791b      	ldrb	r3, [r3, #4]
 8006850:	4619      	mov	r1, r3
 8006852:	6878      	ldr	r0, [r7, #4]
 8006854:	f000 f830 	bl	80068b8 <USBH_FreePipe>
  (void)USBH_FreePipe(phost, phost->Control.pipe_out);
 8006858:	687b      	ldr	r3, [r7, #4]
 800685a:	795b      	ldrb	r3, [r3, #5]
 800685c:	4619      	mov	r1, r3
 800685e:	6878      	ldr	r0, [r7, #4]
 8006860:	f000 f82a 	bl	80068b8 <USBH_FreePipe>
#if (USBH_USE_OS == 1U)
  phost->os_msg = (uint32_t)USBH_PORT_EVENT;
 8006864:	687b      	ldr	r3, [r7, #4]
 8006866:	2201      	movs	r2, #1
 8006868:	f8c3 23e0 	str.w	r2, [r3, #992]	; 0x3e0
#if (osCMSIS < 0x20000U)
  (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
#else
  (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
 800686c:	687b      	ldr	r3, [r7, #4]
 800686e:	f8d3 03d8 	ldr.w	r0, [r3, #984]	; 0x3d8
 8006872:	687b      	ldr	r3, [r7, #4]
 8006874:	f503 7178 	add.w	r1, r3, #992	; 0x3e0
 8006878:	2300      	movs	r3, #0
 800687a:	2200      	movs	r2, #0
 800687c:	f000 f9b8 	bl	8006bf0 <osMessageQueuePut>
#endif
#endif

  return USBH_OK;
 8006880:	2300      	movs	r3, #0
}
 8006882:	4618      	mov	r0, r3
 8006884:	3708      	adds	r7, #8
 8006886:	46bd      	mov	sp, r7
 8006888:	bd80      	pop	{r7, pc}

0800688a <USBH_LL_NotifyURBChange>:
  *         Notify URB state Change
  * @param  phost: Host handle
  * @retval USBH Status
  */
USBH_StatusTypeDef  USBH_LL_NotifyURBChange(USBH_HandleTypeDef *phost)
{
 800688a:	b580      	push	{r7, lr}
 800688c:	b082      	sub	sp, #8
 800688e:	af00      	add	r7, sp, #0
 8006890:	6078      	str	r0, [r7, #4]
  phost->os_msg = (uint32_t)USBH_PORT_EVENT;
 8006892:	687b      	ldr	r3, [r7, #4]
 8006894:	2201      	movs	r2, #1
 8006896:	f8c3 23e0 	str.w	r2, [r3, #992]	; 0x3e0

#if (osCMSIS < 0x20000U)
  (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
#else
  (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
 800689a:	687b      	ldr	r3, [r7, #4]
 800689c:	f8d3 03d8 	ldr.w	r0, [r3, #984]	; 0x3d8
 80068a0:	687b      	ldr	r3, [r7, #4]
 80068a2:	f503 7178 	add.w	r1, r3, #992	; 0x3e0
 80068a6:	2300      	movs	r3, #0
 80068a8:	2200      	movs	r2, #0
 80068aa:	f000 f9a1 	bl	8006bf0 <osMessageQueuePut>
#endif

  return USBH_OK;
 80068ae:	2300      	movs	r3, #0
}
 80068b0:	4618      	mov	r0, r3
 80068b2:	3708      	adds	r7, #8
 80068b4:	46bd      	mov	sp, r7
 80068b6:	bd80      	pop	{r7, pc}

080068b8 <USBH_FreePipe>:
  * @param  phost: Host Handle
  * @param  idx: Pipe number to be freed
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_FreePipe(USBH_HandleTypeDef *phost, uint8_t idx)
{
 80068b8:	b480      	push	{r7}
 80068ba:	b083      	sub	sp, #12
 80068bc:	af00      	add	r7, sp, #0
 80068be:	6078      	str	r0, [r7, #4]
 80068c0:	460b      	mov	r3, r1
 80068c2:	70fb      	strb	r3, [r7, #3]
  if (idx < USBH_MAX_PIPES_NBR)
 80068c4:	78fb      	ldrb	r3, [r7, #3]
 80068c6:	2b0f      	cmp	r3, #15
 80068c8:	d80d      	bhi.n	80068e6 <USBH_FreePipe+0x2e>
  {
    phost->Pipes[idx] &= 0x7FFFU;
 80068ca:	78fb      	ldrb	r3, [r7, #3]
 80068cc:	687a      	ldr	r2, [r7, #4]
 80068ce:	33e0      	adds	r3, #224	; 0xe0
 80068d0:	009b      	lsls	r3, r3, #2
 80068d2:	4413      	add	r3, r2
 80068d4:	685a      	ldr	r2, [r3, #4]
 80068d6:	78fb      	ldrb	r3, [r7, #3]
 80068d8:	f3c2 020e 	ubfx	r2, r2, #0, #15
 80068dc:	6879      	ldr	r1, [r7, #4]
 80068de:	33e0      	adds	r3, #224	; 0xe0
 80068e0:	009b      	lsls	r3, r3, #2
 80068e2:	440b      	add	r3, r1
 80068e4:	605a      	str	r2, [r3, #4]
  }

  return USBH_OK;
 80068e6:	2300      	movs	r3, #0
}
 80068e8:	4618      	mov	r0, r3
 80068ea:	370c      	adds	r7, #12
 80068ec:	46bd      	mov	sp, r7
 80068ee:	f85d 7b04 	ldr.w	r7, [sp], #4
 80068f2:	4770      	bx	lr

080068f4 <__NVIC_SetPriority>:
{
 80068f4:	b480      	push	{r7}
 80068f6:	b083      	sub	sp, #12
 80068f8:	af00      	add	r7, sp, #0
 80068fa:	4603      	mov	r3, r0
 80068fc:	6039      	str	r1, [r7, #0]
 80068fe:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8006900:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8006904:	2b00      	cmp	r3, #0
 8006906:	db0a      	blt.n	800691e <__NVIC_SetPriority+0x2a>
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8006908:	683b      	ldr	r3, [r7, #0]
 800690a:	b2da      	uxtb	r2, r3
 800690c:	490c      	ldr	r1, [pc, #48]	; (8006940 <__NVIC_SetPriority+0x4c>)
 800690e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8006912:	0112      	lsls	r2, r2, #4
 8006914:	b2d2      	uxtb	r2, r2
 8006916:	440b      	add	r3, r1
 8006918:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
}
 800691c:	e00a      	b.n	8006934 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800691e:	683b      	ldr	r3, [r7, #0]
 8006920:	b2da      	uxtb	r2, r3
 8006922:	4908      	ldr	r1, [pc, #32]	; (8006944 <__NVIC_SetPriority+0x50>)
 8006924:	79fb      	ldrb	r3, [r7, #7]
 8006926:	f003 030f 	and.w	r3, r3, #15
 800692a:	3b04      	subs	r3, #4
 800692c:	0112      	lsls	r2, r2, #4
 800692e:	b2d2      	uxtb	r2, r2
 8006930:	440b      	add	r3, r1
 8006932:	761a      	strb	r2, [r3, #24]
}
 8006934:	bf00      	nop
 8006936:	370c      	adds	r7, #12
 8006938:	46bd      	mov	sp, r7
 800693a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800693e:	4770      	bx	lr
 8006940:	e000e100 	.word	0xe000e100
 8006944:	e000ed00 	.word	0xe000ed00

08006948 <SysTick_Handler>:

/*
  SysTick handler implementation that also clears overflow flag.
*/
#if (USE_CUSTOM_SYSTICK_HANDLER_IMPLEMENTATION == 0)
void SysTick_Handler (void) {
 8006948:	b580      	push	{r7, lr}
 800694a:	af00      	add	r7, sp, #0
  /* Clear overflow flag */
  SysTick->CTRL;
 800694c:	4b05      	ldr	r3, [pc, #20]	; (8006964 <SysTick_Handler+0x1c>)
 800694e:	681b      	ldr	r3, [r3, #0]

  if (xTaskGetSchedulerState() != taskSCHEDULER_NOT_STARTED) {
 8006950:	f001 fece 	bl	80086f0 <xTaskGetSchedulerState>
 8006954:	4603      	mov	r3, r0
 8006956:	2b01      	cmp	r3, #1
 8006958:	d001      	beq.n	800695e <SysTick_Handler+0x16>
    /* Call tick handler */
    xPortSysTickHandler();
 800695a:	f002 fcb5 	bl	80092c8 <xPortSysTickHandler>
  }
}
 800695e:	bf00      	nop
 8006960:	bd80      	pop	{r7, pc}
 8006962:	bf00      	nop
 8006964:	e000e010 	.word	0xe000e010

08006968 <SVC_Setup>:
#endif /* SysTick */

/*
  Setup SVC to reset value.
*/
__STATIC_INLINE void SVC_Setup (void) {
 8006968:	b580      	push	{r7, lr}
 800696a:	af00      	add	r7, sp, #0
#if (__ARM_ARCH_7A__ == 0U)
  /* Service Call interrupt might be configured before kernel start     */
  /* and when its priority is lower or equal to BASEPRI, svc intruction */
  /* causes a Hard Fault.                                               */
  NVIC_SetPriority (SVCall_IRQ_NBR, 0U);
 800696c:	2100      	movs	r1, #0
 800696e:	f06f 0004 	mvn.w	r0, #4
 8006972:	f7ff ffbf 	bl	80068f4 <__NVIC_SetPriority>
#endif
}
 8006976:	bf00      	nop
 8006978:	bd80      	pop	{r7, pc}
	...

0800697c <osKernelInitialize>:
static uint32_t OS_Tick_GetOverflow (void);
/* Get OS Tick interval */
static uint32_t OS_Tick_GetInterval (void);
/*---------------------------------------------------------------------------*/

osStatus_t osKernelInitialize (void) {
 800697c:	b480      	push	{r7}
 800697e:	b083      	sub	sp, #12
 8006980:	af00      	add	r7, sp, #0
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8006982:	f3ef 8305 	mrs	r3, IPSR
 8006986:	603b      	str	r3, [r7, #0]
  return(result);
 8006988:	683b      	ldr	r3, [r7, #0]
  osStatus_t stat;

  if (IS_IRQ()) {
 800698a:	2b00      	cmp	r3, #0
 800698c:	d003      	beq.n	8006996 <osKernelInitialize+0x1a>
    stat = osErrorISR;
 800698e:	f06f 0305 	mvn.w	r3, #5
 8006992:	607b      	str	r3, [r7, #4]
 8006994:	e00c      	b.n	80069b0 <osKernelInitialize+0x34>
  }
  else {
    if (KernelState == osKernelInactive) {
 8006996:	4b0a      	ldr	r3, [pc, #40]	; (80069c0 <osKernelInitialize+0x44>)
 8006998:	681b      	ldr	r3, [r3, #0]
 800699a:	2b00      	cmp	r3, #0
 800699c:	d105      	bne.n	80069aa <osKernelInitialize+0x2e>
        EvrFreeRTOSSetup(0U);
      #endif
      #if defined(USE_FreeRTOS_HEAP_5) && (HEAP_5_REGION_SETUP == 1)
        vPortDefineHeapRegions (configHEAP_5_REGIONS);
      #endif
      KernelState = osKernelReady;
 800699e:	4b08      	ldr	r3, [pc, #32]	; (80069c0 <osKernelInitialize+0x44>)
 80069a0:	2201      	movs	r2, #1
 80069a2:	601a      	str	r2, [r3, #0]
      stat = osOK;
 80069a4:	2300      	movs	r3, #0
 80069a6:	607b      	str	r3, [r7, #4]
 80069a8:	e002      	b.n	80069b0 <osKernelInitialize+0x34>
    } else {
      stat = osError;
 80069aa:	f04f 33ff 	mov.w	r3, #4294967295
 80069ae:	607b      	str	r3, [r7, #4]
    }
  }

  return (stat);
 80069b0:	687b      	ldr	r3, [r7, #4]
}
 80069b2:	4618      	mov	r0, r3
 80069b4:	370c      	adds	r7, #12
 80069b6:	46bd      	mov	sp, r7
 80069b8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80069bc:	4770      	bx	lr
 80069be:	bf00      	nop
 80069c0:	20000380 	.word	0x20000380

080069c4 <osKernelStart>:
  }

  return (state);
}

osStatus_t osKernelStart (void) {
 80069c4:	b580      	push	{r7, lr}
 80069c6:	b082      	sub	sp, #8
 80069c8:	af00      	add	r7, sp, #0
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 80069ca:	f3ef 8305 	mrs	r3, IPSR
 80069ce:	603b      	str	r3, [r7, #0]
  return(result);
 80069d0:	683b      	ldr	r3, [r7, #0]
  osStatus_t stat;

  if (IS_IRQ()) {
 80069d2:	2b00      	cmp	r3, #0
 80069d4:	d003      	beq.n	80069de <osKernelStart+0x1a>
    stat = osErrorISR;
 80069d6:	f06f 0305 	mvn.w	r3, #5
 80069da:	607b      	str	r3, [r7, #4]
 80069dc:	e010      	b.n	8006a00 <osKernelStart+0x3c>
  }
  else {
    if (KernelState == osKernelReady) {
 80069de:	4b0b      	ldr	r3, [pc, #44]	; (8006a0c <osKernelStart+0x48>)
 80069e0:	681b      	ldr	r3, [r3, #0]
 80069e2:	2b01      	cmp	r3, #1
 80069e4:	d109      	bne.n	80069fa <osKernelStart+0x36>
      /* Ensure SVC priority is at the reset value */
      SVC_Setup();
 80069e6:	f7ff ffbf 	bl	8006968 <SVC_Setup>
      /* Change state to enable IRQ masking check */
      KernelState = osKernelRunning;
 80069ea:	4b08      	ldr	r3, [pc, #32]	; (8006a0c <osKernelStart+0x48>)
 80069ec:	2202      	movs	r2, #2
 80069ee:	601a      	str	r2, [r3, #0]
      /* Start the kernel scheduler */
      vTaskStartScheduler();
 80069f0:	f001 fa10 	bl	8007e14 <vTaskStartScheduler>
      stat = osOK;
 80069f4:	2300      	movs	r3, #0
 80069f6:	607b      	str	r3, [r7, #4]
 80069f8:	e002      	b.n	8006a00 <osKernelStart+0x3c>
    } else {
      stat = osError;
 80069fa:	f04f 33ff 	mov.w	r3, #4294967295
 80069fe:	607b      	str	r3, [r7, #4]
    }
  }

  return (stat);
 8006a00:	687b      	ldr	r3, [r7, #4]
}
 8006a02:	4618      	mov	r0, r3
 8006a04:	3708      	adds	r7, #8
 8006a06:	46bd      	mov	sp, r7
 8006a08:	bd80      	pop	{r7, pc}
 8006a0a:	bf00      	nop
 8006a0c:	20000380 	.word	0x20000380

08006a10 <osThreadNew>:
  return (configCPU_CLOCK_HZ);
}

/*---------------------------------------------------------------------------*/

osThreadId_t osThreadNew (osThreadFunc_t func, void *argument, const osThreadAttr_t *attr) {
 8006a10:	b580      	push	{r7, lr}
 8006a12:	b08e      	sub	sp, #56	; 0x38
 8006a14:	af04      	add	r7, sp, #16
 8006a16:	60f8      	str	r0, [r7, #12]
 8006a18:	60b9      	str	r1, [r7, #8]
 8006a1a:	607a      	str	r2, [r7, #4]
  uint32_t stack;
  TaskHandle_t hTask;
  UBaseType_t prio;
  int32_t mem;

  hTask = NULL;
 8006a1c:	2300      	movs	r3, #0
 8006a1e:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8006a20:	f3ef 8305 	mrs	r3, IPSR
 8006a24:	617b      	str	r3, [r7, #20]
  return(result);
 8006a26:	697b      	ldr	r3, [r7, #20]

  if (!IS_IRQ() && (func != NULL)) {
 8006a28:	2b00      	cmp	r3, #0
 8006a2a:	d17e      	bne.n	8006b2a <osThreadNew+0x11a>
 8006a2c:	68fb      	ldr	r3, [r7, #12]
 8006a2e:	2b00      	cmp	r3, #0
 8006a30:	d07b      	beq.n	8006b2a <osThreadNew+0x11a>
    stack = configMINIMAL_STACK_SIZE;
 8006a32:	2380      	movs	r3, #128	; 0x80
 8006a34:	623b      	str	r3, [r7, #32]
    prio  = (UBaseType_t)osPriorityNormal;
 8006a36:	2318      	movs	r3, #24
 8006a38:	61fb      	str	r3, [r7, #28]

    name = NULL;
 8006a3a:	2300      	movs	r3, #0
 8006a3c:	627b      	str	r3, [r7, #36]	; 0x24
    mem  = -1;
 8006a3e:	f04f 33ff 	mov.w	r3, #4294967295
 8006a42:	61bb      	str	r3, [r7, #24]

    if (attr != NULL) {
 8006a44:	687b      	ldr	r3, [r7, #4]
 8006a46:	2b00      	cmp	r3, #0
 8006a48:	d045      	beq.n	8006ad6 <osThreadNew+0xc6>
      if (attr->name != NULL) {
 8006a4a:	687b      	ldr	r3, [r7, #4]
 8006a4c:	681b      	ldr	r3, [r3, #0]
 8006a4e:	2b00      	cmp	r3, #0
 8006a50:	d002      	beq.n	8006a58 <osThreadNew+0x48>
        name = attr->name;
 8006a52:	687b      	ldr	r3, [r7, #4]
 8006a54:	681b      	ldr	r3, [r3, #0]
 8006a56:	627b      	str	r3, [r7, #36]	; 0x24
      }
      if (attr->priority != osPriorityNone) {
 8006a58:	687b      	ldr	r3, [r7, #4]
 8006a5a:	699b      	ldr	r3, [r3, #24]
 8006a5c:	2b00      	cmp	r3, #0
 8006a5e:	d002      	beq.n	8006a66 <osThreadNew+0x56>
        prio = (UBaseType_t)attr->priority;
 8006a60:	687b      	ldr	r3, [r7, #4]
 8006a62:	699b      	ldr	r3, [r3, #24]
 8006a64:	61fb      	str	r3, [r7, #28]
      }

      if ((prio < osPriorityIdle) || (prio > osPriorityISR) || ((attr->attr_bits & osThreadJoinable) == osThreadJoinable)) {
 8006a66:	69fb      	ldr	r3, [r7, #28]
 8006a68:	2b00      	cmp	r3, #0
 8006a6a:	d008      	beq.n	8006a7e <osThreadNew+0x6e>
 8006a6c:	69fb      	ldr	r3, [r7, #28]
 8006a6e:	2b38      	cmp	r3, #56	; 0x38
 8006a70:	d805      	bhi.n	8006a7e <osThreadNew+0x6e>
 8006a72:	687b      	ldr	r3, [r7, #4]
 8006a74:	685b      	ldr	r3, [r3, #4]
 8006a76:	f003 0301 	and.w	r3, r3, #1
 8006a7a:	2b00      	cmp	r3, #0
 8006a7c:	d001      	beq.n	8006a82 <osThreadNew+0x72>
        return (NULL);
 8006a7e:	2300      	movs	r3, #0
 8006a80:	e054      	b.n	8006b2c <osThreadNew+0x11c>
      }

      if (attr->stack_size > 0U) {
 8006a82:	687b      	ldr	r3, [r7, #4]
 8006a84:	695b      	ldr	r3, [r3, #20]
 8006a86:	2b00      	cmp	r3, #0
 8006a88:	d003      	beq.n	8006a92 <osThreadNew+0x82>
        /* In FreeRTOS stack is not in bytes, but in sizeof(StackType_t) which is 4 on ARM ports.       */
        /* Stack size should be therefore 4 byte aligned in order to avoid division caused side effects */
        stack = attr->stack_size / sizeof(StackType_t);
 8006a8a:	687b      	ldr	r3, [r7, #4]
 8006a8c:	695b      	ldr	r3, [r3, #20]
 8006a8e:	089b      	lsrs	r3, r3, #2
 8006a90:	623b      	str	r3, [r7, #32]
      }

      if ((attr->cb_mem    != NULL) && (attr->cb_size    >= sizeof(StaticTask_t)) &&
 8006a92:	687b      	ldr	r3, [r7, #4]
 8006a94:	689b      	ldr	r3, [r3, #8]
 8006a96:	2b00      	cmp	r3, #0
 8006a98:	d00e      	beq.n	8006ab8 <osThreadNew+0xa8>
 8006a9a:	687b      	ldr	r3, [r7, #4]
 8006a9c:	68db      	ldr	r3, [r3, #12]
 8006a9e:	2b5f      	cmp	r3, #95	; 0x5f
 8006aa0:	d90a      	bls.n	8006ab8 <osThreadNew+0xa8>
          (attr->stack_mem != NULL) && (attr->stack_size >  0U)) {
 8006aa2:	687b      	ldr	r3, [r7, #4]
 8006aa4:	691b      	ldr	r3, [r3, #16]
      if ((attr->cb_mem    != NULL) && (attr->cb_size    >= sizeof(StaticTask_t)) &&
 8006aa6:	2b00      	cmp	r3, #0
 8006aa8:	d006      	beq.n	8006ab8 <osThreadNew+0xa8>
          (attr->stack_mem != NULL) && (attr->stack_size >  0U)) {
 8006aaa:	687b      	ldr	r3, [r7, #4]
 8006aac:	695b      	ldr	r3, [r3, #20]
 8006aae:	2b00      	cmp	r3, #0
 8006ab0:	d002      	beq.n	8006ab8 <osThreadNew+0xa8>
        mem = 1;
 8006ab2:	2301      	movs	r3, #1
 8006ab4:	61bb      	str	r3, [r7, #24]
 8006ab6:	e010      	b.n	8006ada <osThreadNew+0xca>
      }
      else {
        if ((attr->cb_mem == NULL) && (attr->cb_size == 0U) && (attr->stack_mem == NULL)) {
 8006ab8:	687b      	ldr	r3, [r7, #4]
 8006aba:	689b      	ldr	r3, [r3, #8]
 8006abc:	2b00      	cmp	r3, #0
 8006abe:	d10c      	bne.n	8006ada <osThreadNew+0xca>
 8006ac0:	687b      	ldr	r3, [r7, #4]
 8006ac2:	68db      	ldr	r3, [r3, #12]
 8006ac4:	2b00      	cmp	r3, #0
 8006ac6:	d108      	bne.n	8006ada <osThreadNew+0xca>
 8006ac8:	687b      	ldr	r3, [r7, #4]
 8006aca:	691b      	ldr	r3, [r3, #16]
 8006acc:	2b00      	cmp	r3, #0
 8006ace:	d104      	bne.n	8006ada <osThreadNew+0xca>
          mem = 0;
 8006ad0:	2300      	movs	r3, #0
 8006ad2:	61bb      	str	r3, [r7, #24]
 8006ad4:	e001      	b.n	8006ada <osThreadNew+0xca>
        }
      }
    }
    else {
      mem = 0;
 8006ad6:	2300      	movs	r3, #0
 8006ad8:	61bb      	str	r3, [r7, #24]
    }

    if (mem == 1) {
 8006ada:	69bb      	ldr	r3, [r7, #24]
 8006adc:	2b01      	cmp	r3, #1
 8006ade:	d110      	bne.n	8006b02 <osThreadNew+0xf2>
      #if (configSUPPORT_STATIC_ALLOCATION == 1)
        hTask = xTaskCreateStatic ((TaskFunction_t)func, name, stack, argument, prio, (StackType_t  *)attr->stack_mem,
 8006ae0:	687b      	ldr	r3, [r7, #4]
 8006ae2:	691b      	ldr	r3, [r3, #16]
                                                                                      (StaticTask_t *)attr->cb_mem);
 8006ae4:	687a      	ldr	r2, [r7, #4]
 8006ae6:	6892      	ldr	r2, [r2, #8]
        hTask = xTaskCreateStatic ((TaskFunction_t)func, name, stack, argument, prio, (StackType_t  *)attr->stack_mem,
 8006ae8:	9202      	str	r2, [sp, #8]
 8006aea:	9301      	str	r3, [sp, #4]
 8006aec:	69fb      	ldr	r3, [r7, #28]
 8006aee:	9300      	str	r3, [sp, #0]
 8006af0:	68bb      	ldr	r3, [r7, #8]
 8006af2:	6a3a      	ldr	r2, [r7, #32]
 8006af4:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8006af6:	68f8      	ldr	r0, [r7, #12]
 8006af8:	f000 feae 	bl	8007858 <xTaskCreateStatic>
 8006afc:	4603      	mov	r3, r0
 8006afe:	613b      	str	r3, [r7, #16]
 8006b00:	e013      	b.n	8006b2a <osThreadNew+0x11a>
      #endif
    }
    else {
      if (mem == 0) {
 8006b02:	69bb      	ldr	r3, [r7, #24]
 8006b04:	2b00      	cmp	r3, #0
 8006b06:	d110      	bne.n	8006b2a <osThreadNew+0x11a>
        #if (configSUPPORT_DYNAMIC_ALLOCATION == 1)
          if (xTaskCreate ((TaskFunction_t)func, name, (uint16_t)stack, argument, prio, &hTask) != pdPASS) {
 8006b08:	6a3b      	ldr	r3, [r7, #32]
 8006b0a:	b29a      	uxth	r2, r3
 8006b0c:	f107 0310 	add.w	r3, r7, #16
 8006b10:	9301      	str	r3, [sp, #4]
 8006b12:	69fb      	ldr	r3, [r7, #28]
 8006b14:	9300      	str	r3, [sp, #0]
 8006b16:	68bb      	ldr	r3, [r7, #8]
 8006b18:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8006b1a:	68f8      	ldr	r0, [r7, #12]
 8006b1c:	f000 fef9 	bl	8007912 <xTaskCreate>
 8006b20:	4603      	mov	r3, r0
 8006b22:	2b01      	cmp	r3, #1
 8006b24:	d001      	beq.n	8006b2a <osThreadNew+0x11a>
            hTask = NULL;
 8006b26:	2300      	movs	r3, #0
 8006b28:	613b      	str	r3, [r7, #16]
        #endif
      }
    }
  }

  return ((osThreadId_t)hTask);
 8006b2a:	693b      	ldr	r3, [r7, #16]
}
 8006b2c:	4618      	mov	r0, r3
 8006b2e:	3728      	adds	r7, #40	; 0x28
 8006b30:	46bd      	mov	sp, r7
 8006b32:	bd80      	pop	{r7, pc}

08006b34 <osThreadSuspend>:

  return (stat);
}

#if (configUSE_OS2_THREAD_SUSPEND_RESUME == 1)
osStatus_t osThreadSuspend (osThreadId_t thread_id) {
 8006b34:	b580      	push	{r7, lr}
 8006b36:	b086      	sub	sp, #24
 8006b38:	af00      	add	r7, sp, #0
 8006b3a:	6078      	str	r0, [r7, #4]
  TaskHandle_t hTask = (TaskHandle_t)thread_id;
 8006b3c:	687b      	ldr	r3, [r7, #4]
 8006b3e:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8006b40:	f3ef 8305 	mrs	r3, IPSR
 8006b44:	60fb      	str	r3, [r7, #12]
  return(result);
 8006b46:	68fb      	ldr	r3, [r7, #12]
  osStatus_t stat;

  if (IS_IRQ()) {
 8006b48:	2b00      	cmp	r3, #0
 8006b4a:	d003      	beq.n	8006b54 <osThreadSuspend+0x20>
    stat = osErrorISR;
 8006b4c:	f06f 0305 	mvn.w	r3, #5
 8006b50:	617b      	str	r3, [r7, #20]
 8006b52:	e00b      	b.n	8006b6c <osThreadSuspend+0x38>
  }
  else if (hTask == NULL) {
 8006b54:	693b      	ldr	r3, [r7, #16]
 8006b56:	2b00      	cmp	r3, #0
 8006b58:	d103      	bne.n	8006b62 <osThreadSuspend+0x2e>
    stat = osErrorParameter;
 8006b5a:	f06f 0303 	mvn.w	r3, #3
 8006b5e:	617b      	str	r3, [r7, #20]
 8006b60:	e004      	b.n	8006b6c <osThreadSuspend+0x38>
  }
  else {
    stat = osOK;
 8006b62:	2300      	movs	r3, #0
 8006b64:	617b      	str	r3, [r7, #20]
    vTaskSuspend (hTask);
 8006b66:	6938      	ldr	r0, [r7, #16]
 8006b68:	f001 f84e 	bl	8007c08 <vTaskSuspend>
  }

  return (stat);
 8006b6c:	697b      	ldr	r3, [r7, #20]
}
 8006b6e:	4618      	mov	r0, r3
 8006b70:	3718      	adds	r7, #24
 8006b72:	46bd      	mov	sp, r7
 8006b74:	bd80      	pop	{r7, pc}

08006b76 <osThreadResume>:

osStatus_t osThreadResume (osThreadId_t thread_id) {
 8006b76:	b580      	push	{r7, lr}
 8006b78:	b086      	sub	sp, #24
 8006b7a:	af00      	add	r7, sp, #0
 8006b7c:	6078      	str	r0, [r7, #4]
  TaskHandle_t hTask = (TaskHandle_t)thread_id;
 8006b7e:	687b      	ldr	r3, [r7, #4]
 8006b80:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8006b82:	f3ef 8305 	mrs	r3, IPSR
 8006b86:	60fb      	str	r3, [r7, #12]
  return(result);
 8006b88:	68fb      	ldr	r3, [r7, #12]
  osStatus_t stat;

  if (IS_IRQ()) {
 8006b8a:	2b00      	cmp	r3, #0
 8006b8c:	d003      	beq.n	8006b96 <osThreadResume+0x20>
    stat = osErrorISR;
 8006b8e:	f06f 0305 	mvn.w	r3, #5
 8006b92:	617b      	str	r3, [r7, #20]
 8006b94:	e00b      	b.n	8006bae <osThreadResume+0x38>
  }
  else if (hTask == NULL) {
 8006b96:	693b      	ldr	r3, [r7, #16]
 8006b98:	2b00      	cmp	r3, #0
 8006b9a:	d103      	bne.n	8006ba4 <osThreadResume+0x2e>
    stat = osErrorParameter;
 8006b9c:	f06f 0303 	mvn.w	r3, #3
 8006ba0:	617b      	str	r3, [r7, #20]
 8006ba2:	e004      	b.n	8006bae <osThreadResume+0x38>
  }
  else {
    stat = osOK;
 8006ba4:	2300      	movs	r3, #0
 8006ba6:	617b      	str	r3, [r7, #20]
    vTaskResume (hTask);
 8006ba8:	6938      	ldr	r0, [r7, #16]
 8006baa:	f001 f8d5 	bl	8007d58 <vTaskResume>
  }

  return (stat);
 8006bae:	697b      	ldr	r3, [r7, #20]
}
 8006bb0:	4618      	mov	r0, r3
 8006bb2:	3718      	adds	r7, #24
 8006bb4:	46bd      	mov	sp, r7
 8006bb6:	bd80      	pop	{r7, pc}

08006bb8 <osDelay>:
  /* Return flags before clearing */
  return (rflags);
}
#endif /* (configUSE_OS2_THREAD_FLAGS == 1) */

osStatus_t osDelay (uint32_t ticks) {
 8006bb8:	b580      	push	{r7, lr}
 8006bba:	b084      	sub	sp, #16
 8006bbc:	af00      	add	r7, sp, #0
 8006bbe:	6078      	str	r0, [r7, #4]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8006bc0:	f3ef 8305 	mrs	r3, IPSR
 8006bc4:	60bb      	str	r3, [r7, #8]
  return(result);
 8006bc6:	68bb      	ldr	r3, [r7, #8]
  osStatus_t stat;

  if (IS_IRQ()) {
 8006bc8:	2b00      	cmp	r3, #0
 8006bca:	d003      	beq.n	8006bd4 <osDelay+0x1c>
    stat = osErrorISR;
 8006bcc:	f06f 0305 	mvn.w	r3, #5
 8006bd0:	60fb      	str	r3, [r7, #12]
 8006bd2:	e007      	b.n	8006be4 <osDelay+0x2c>
  }
  else {
    stat = osOK;
 8006bd4:	2300      	movs	r3, #0
 8006bd6:	60fb      	str	r3, [r7, #12]

    if (ticks != 0U) {
 8006bd8:	687b      	ldr	r3, [r7, #4]
 8006bda:	2b00      	cmp	r3, #0
 8006bdc:	d002      	beq.n	8006be4 <osDelay+0x2c>
      vTaskDelay(ticks);
 8006bde:	6878      	ldr	r0, [r7, #4]
 8006be0:	f000 ffde 	bl	8007ba0 <vTaskDelay>
    }
  }

  return (stat);
 8006be4:	68fb      	ldr	r3, [r7, #12]
}
 8006be6:	4618      	mov	r0, r3
 8006be8:	3710      	adds	r7, #16
 8006bea:	46bd      	mov	sp, r7
 8006bec:	bd80      	pop	{r7, pc}
	...

08006bf0 <osMessageQueuePut>:
  }

  return ((osMessageQueueId_t)hQueue);
}

osStatus_t osMessageQueuePut (osMessageQueueId_t mq_id, const void *msg_ptr, uint8_t msg_prio, uint32_t timeout) {
 8006bf0:	b580      	push	{r7, lr}
 8006bf2:	b088      	sub	sp, #32
 8006bf4:	af00      	add	r7, sp, #0
 8006bf6:	60f8      	str	r0, [r7, #12]
 8006bf8:	60b9      	str	r1, [r7, #8]
 8006bfa:	603b      	str	r3, [r7, #0]
 8006bfc:	4613      	mov	r3, r2
 8006bfe:	71fb      	strb	r3, [r7, #7]
  QueueHandle_t hQueue = (QueueHandle_t)mq_id;
 8006c00:	68fb      	ldr	r3, [r7, #12]
 8006c02:	61bb      	str	r3, [r7, #24]
  osStatus_t stat;
  BaseType_t yield;

  (void)msg_prio; /* Message priority is ignored */

  stat = osOK;
 8006c04:	2300      	movs	r3, #0
 8006c06:	61fb      	str	r3, [r7, #28]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8006c08:	f3ef 8305 	mrs	r3, IPSR
 8006c0c:	617b      	str	r3, [r7, #20]
  return(result);
 8006c0e:	697b      	ldr	r3, [r7, #20]

  if (IS_IRQ()) {
 8006c10:	2b00      	cmp	r3, #0
 8006c12:	d028      	beq.n	8006c66 <osMessageQueuePut+0x76>
    if ((hQueue == NULL) || (msg_ptr == NULL) || (timeout != 0U)) {
 8006c14:	69bb      	ldr	r3, [r7, #24]
 8006c16:	2b00      	cmp	r3, #0
 8006c18:	d005      	beq.n	8006c26 <osMessageQueuePut+0x36>
 8006c1a:	68bb      	ldr	r3, [r7, #8]
 8006c1c:	2b00      	cmp	r3, #0
 8006c1e:	d002      	beq.n	8006c26 <osMessageQueuePut+0x36>
 8006c20:	683b      	ldr	r3, [r7, #0]
 8006c22:	2b00      	cmp	r3, #0
 8006c24:	d003      	beq.n	8006c2e <osMessageQueuePut+0x3e>
      stat = osErrorParameter;
 8006c26:	f06f 0303 	mvn.w	r3, #3
 8006c2a:	61fb      	str	r3, [r7, #28]
 8006c2c:	e038      	b.n	8006ca0 <osMessageQueuePut+0xb0>
    }
    else {
      yield = pdFALSE;
 8006c2e:	2300      	movs	r3, #0
 8006c30:	613b      	str	r3, [r7, #16]

      if (xQueueSendToBackFromISR (hQueue, msg_ptr, &yield) != pdTRUE) {
 8006c32:	f107 0210 	add.w	r2, r7, #16
 8006c36:	2300      	movs	r3, #0
 8006c38:	68b9      	ldr	r1, [r7, #8]
 8006c3a:	69b8      	ldr	r0, [r7, #24]
 8006c3c:	f000 fb22 	bl	8007284 <xQueueGenericSendFromISR>
 8006c40:	4603      	mov	r3, r0
 8006c42:	2b01      	cmp	r3, #1
 8006c44:	d003      	beq.n	8006c4e <osMessageQueuePut+0x5e>
        stat = osErrorResource;
 8006c46:	f06f 0302 	mvn.w	r3, #2
 8006c4a:	61fb      	str	r3, [r7, #28]
 8006c4c:	e028      	b.n	8006ca0 <osMessageQueuePut+0xb0>
      } else {
        portYIELD_FROM_ISR (yield);
 8006c4e:	693b      	ldr	r3, [r7, #16]
 8006c50:	2b00      	cmp	r3, #0
 8006c52:	d025      	beq.n	8006ca0 <osMessageQueuePut+0xb0>
 8006c54:	4b15      	ldr	r3, [pc, #84]	; (8006cac <osMessageQueuePut+0xbc>)
 8006c56:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8006c5a:	601a      	str	r2, [r3, #0]
 8006c5c:	f3bf 8f4f 	dsb	sy
 8006c60:	f3bf 8f6f 	isb	sy
 8006c64:	e01c      	b.n	8006ca0 <osMessageQueuePut+0xb0>
      }
    }
  }
  else {
    if ((hQueue == NULL) || (msg_ptr == NULL)) {
 8006c66:	69bb      	ldr	r3, [r7, #24]
 8006c68:	2b00      	cmp	r3, #0
 8006c6a:	d002      	beq.n	8006c72 <osMessageQueuePut+0x82>
 8006c6c:	68bb      	ldr	r3, [r7, #8]
 8006c6e:	2b00      	cmp	r3, #0
 8006c70:	d103      	bne.n	8006c7a <osMessageQueuePut+0x8a>
      stat = osErrorParameter;
 8006c72:	f06f 0303 	mvn.w	r3, #3
 8006c76:	61fb      	str	r3, [r7, #28]
 8006c78:	e012      	b.n	8006ca0 <osMessageQueuePut+0xb0>
    }
    else {
      if (xQueueSendToBack (hQueue, msg_ptr, (TickType_t)timeout) != pdPASS) {
 8006c7a:	2300      	movs	r3, #0
 8006c7c:	683a      	ldr	r2, [r7, #0]
 8006c7e:	68b9      	ldr	r1, [r7, #8]
 8006c80:	69b8      	ldr	r0, [r7, #24]
 8006c82:	f000 fa01 	bl	8007088 <xQueueGenericSend>
 8006c86:	4603      	mov	r3, r0
 8006c88:	2b01      	cmp	r3, #1
 8006c8a:	d009      	beq.n	8006ca0 <osMessageQueuePut+0xb0>
        if (timeout != 0U) {
 8006c8c:	683b      	ldr	r3, [r7, #0]
 8006c8e:	2b00      	cmp	r3, #0
 8006c90:	d003      	beq.n	8006c9a <osMessageQueuePut+0xaa>
          stat = osErrorTimeout;
 8006c92:	f06f 0301 	mvn.w	r3, #1
 8006c96:	61fb      	str	r3, [r7, #28]
 8006c98:	e002      	b.n	8006ca0 <osMessageQueuePut+0xb0>
        } else {
          stat = osErrorResource;
 8006c9a:	f06f 0302 	mvn.w	r3, #2
 8006c9e:	61fb      	str	r3, [r7, #28]
        }
      }
    }
  }

  return (stat);
 8006ca0:	69fb      	ldr	r3, [r7, #28]
}
 8006ca2:	4618      	mov	r0, r3
 8006ca4:	3720      	adds	r7, #32
 8006ca6:	46bd      	mov	sp, r7
 8006ca8:	bd80      	pop	{r7, pc}
 8006caa:	bf00      	nop
 8006cac:	e000ed04 	.word	0xe000ed04

08006cb0 <vApplicationGetIdleTaskMemory>:

/*
  vApplicationGetIdleTaskMemory gets called when configSUPPORT_STATIC_ALLOCATION
  equals to 1 and is required for static memory allocation support.
*/
__WEAK void vApplicationGetIdleTaskMemory (StaticTask_t **ppxIdleTaskTCBBuffer, StackType_t **ppxIdleTaskStackBuffer, uint32_t *pulIdleTaskStackSize) {
 8006cb0:	b480      	push	{r7}
 8006cb2:	b085      	sub	sp, #20
 8006cb4:	af00      	add	r7, sp, #0
 8006cb6:	60f8      	str	r0, [r7, #12]
 8006cb8:	60b9      	str	r1, [r7, #8]
 8006cba:	607a      	str	r2, [r7, #4]
  /* Idle task control block and stack */
  static StaticTask_t Idle_TCB;
  static StackType_t  Idle_Stack[configMINIMAL_STACK_SIZE];

  *ppxIdleTaskTCBBuffer   = &Idle_TCB;
 8006cbc:	68fb      	ldr	r3, [r7, #12]
 8006cbe:	4a07      	ldr	r2, [pc, #28]	; (8006cdc <vApplicationGetIdleTaskMemory+0x2c>)
 8006cc0:	601a      	str	r2, [r3, #0]
  *ppxIdleTaskStackBuffer = &Idle_Stack[0];
 8006cc2:	68bb      	ldr	r3, [r7, #8]
 8006cc4:	4a06      	ldr	r2, [pc, #24]	; (8006ce0 <vApplicationGetIdleTaskMemory+0x30>)
 8006cc6:	601a      	str	r2, [r3, #0]
  *pulIdleTaskStackSize   = (uint32_t)configMINIMAL_STACK_SIZE;
 8006cc8:	687b      	ldr	r3, [r7, #4]
 8006cca:	2280      	movs	r2, #128	; 0x80
 8006ccc:	601a      	str	r2, [r3, #0]
}
 8006cce:	bf00      	nop
 8006cd0:	3714      	adds	r7, #20
 8006cd2:	46bd      	mov	sp, r7
 8006cd4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006cd8:	4770      	bx	lr
 8006cda:	bf00      	nop
 8006cdc:	20000384 	.word	0x20000384
 8006ce0:	200003e4 	.word	0x200003e4

08006ce4 <vApplicationGetTimerTaskMemory>:

/*
  vApplicationGetTimerTaskMemory gets called when configSUPPORT_STATIC_ALLOCATION
  equals to 1 and is required for static memory allocation support.
*/
__WEAK void vApplicationGetTimerTaskMemory (StaticTask_t **ppxTimerTaskTCBBuffer, StackType_t **ppxTimerTaskStackBuffer, uint32_t *pulTimerTaskStackSize) {
 8006ce4:	b480      	push	{r7}
 8006ce6:	b085      	sub	sp, #20
 8006ce8:	af00      	add	r7, sp, #0
 8006cea:	60f8      	str	r0, [r7, #12]
 8006cec:	60b9      	str	r1, [r7, #8]
 8006cee:	607a      	str	r2, [r7, #4]
  /* Timer task control block and stack */
  static StaticTask_t Timer_TCB;
  static StackType_t  Timer_Stack[configTIMER_TASK_STACK_DEPTH];

  *ppxTimerTaskTCBBuffer   = &Timer_TCB;
 8006cf0:	68fb      	ldr	r3, [r7, #12]
 8006cf2:	4a07      	ldr	r2, [pc, #28]	; (8006d10 <vApplicationGetTimerTaskMemory+0x2c>)
 8006cf4:	601a      	str	r2, [r3, #0]
  *ppxTimerTaskStackBuffer = &Timer_Stack[0];
 8006cf6:	68bb      	ldr	r3, [r7, #8]
 8006cf8:	4a06      	ldr	r2, [pc, #24]	; (8006d14 <vApplicationGetTimerTaskMemory+0x30>)
 8006cfa:	601a      	str	r2, [r3, #0]
  *pulTimerTaskStackSize   = (uint32_t)configTIMER_TASK_STACK_DEPTH;
 8006cfc:	687b      	ldr	r3, [r7, #4]
 8006cfe:	f44f 7280 	mov.w	r2, #256	; 0x100
 8006d02:	601a      	str	r2, [r3, #0]
}
 8006d04:	bf00      	nop
 8006d06:	3714      	adds	r7, #20
 8006d08:	46bd      	mov	sp, r7
 8006d0a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006d0e:	4770      	bx	lr
 8006d10:	200005e4 	.word	0x200005e4
 8006d14:	20000644 	.word	0x20000644

08006d18 <vListInitialise>:
/*-----------------------------------------------------------
 * PUBLIC LIST API documented in list.h
 *----------------------------------------------------------*/

void vListInitialise( List_t * const pxList )
{
 8006d18:	b480      	push	{r7}
 8006d1a:	b083      	sub	sp, #12
 8006d1c:	af00      	add	r7, sp, #0
 8006d1e:	6078      	str	r0, [r7, #4]
	/* The list structure contains a list item which is used to mark the
	end of the list.  To initialise the list the list end is inserted
	as the only list entry. */
	pxList->pxIndex = ( ListItem_t * ) &( pxList->xListEnd );			/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8006d20:	687b      	ldr	r3, [r7, #4]
 8006d22:	f103 0208 	add.w	r2, r3, #8
 8006d26:	687b      	ldr	r3, [r7, #4]
 8006d28:	605a      	str	r2, [r3, #4]

	/* The list end value is the highest possible value in the list to
	ensure it remains at the end of the list. */
	pxList->xListEnd.xItemValue = portMAX_DELAY;
 8006d2a:	687b      	ldr	r3, [r7, #4]
 8006d2c:	f04f 32ff 	mov.w	r2, #4294967295
 8006d30:	609a      	str	r2, [r3, #8]

	/* The list end next and previous pointers point to itself so we know
	when the list is empty. */
	pxList->xListEnd.pxNext = ( ListItem_t * ) &( pxList->xListEnd );	/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8006d32:	687b      	ldr	r3, [r7, #4]
 8006d34:	f103 0208 	add.w	r2, r3, #8
 8006d38:	687b      	ldr	r3, [r7, #4]
 8006d3a:	60da      	str	r2, [r3, #12]
	pxList->xListEnd.pxPrevious = ( ListItem_t * ) &( pxList->xListEnd );/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8006d3c:	687b      	ldr	r3, [r7, #4]
 8006d3e:	f103 0208 	add.w	r2, r3, #8
 8006d42:	687b      	ldr	r3, [r7, #4]
 8006d44:	611a      	str	r2, [r3, #16]

	pxList->uxNumberOfItems = ( UBaseType_t ) 0U;
 8006d46:	687b      	ldr	r3, [r7, #4]
 8006d48:	2200      	movs	r2, #0
 8006d4a:	601a      	str	r2, [r3, #0]

	/* Write known values into the list if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_LIST_INTEGRITY_CHECK_1_VALUE( pxList );
	listSET_LIST_INTEGRITY_CHECK_2_VALUE( pxList );
}
 8006d4c:	bf00      	nop
 8006d4e:	370c      	adds	r7, #12
 8006d50:	46bd      	mov	sp, r7
 8006d52:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006d56:	4770      	bx	lr

08006d58 <vListInitialiseItem>:
/*-----------------------------------------------------------*/

void vListInitialiseItem( ListItem_t * const pxItem )
{
 8006d58:	b480      	push	{r7}
 8006d5a:	b083      	sub	sp, #12
 8006d5c:	af00      	add	r7, sp, #0
 8006d5e:	6078      	str	r0, [r7, #4]
	/* Make sure the list item is not recorded as being on a list. */
	pxItem->pxContainer = NULL;
 8006d60:	687b      	ldr	r3, [r7, #4]
 8006d62:	2200      	movs	r2, #0
 8006d64:	611a      	str	r2, [r3, #16]

	/* Write known values into the list item if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_FIRST_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
	listSET_SECOND_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
}
 8006d66:	bf00      	nop
 8006d68:	370c      	adds	r7, #12
 8006d6a:	46bd      	mov	sp, r7
 8006d6c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006d70:	4770      	bx	lr

08006d72 <vListInsertEnd>:
/*-----------------------------------------------------------*/

void vListInsertEnd( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 8006d72:	b480      	push	{r7}
 8006d74:	b085      	sub	sp, #20
 8006d76:	af00      	add	r7, sp, #0
 8006d78:	6078      	str	r0, [r7, #4]
 8006d7a:	6039      	str	r1, [r7, #0]
ListItem_t * const pxIndex = pxList->pxIndex;
 8006d7c:	687b      	ldr	r3, [r7, #4]
 8006d7e:	685b      	ldr	r3, [r3, #4]
 8006d80:	60fb      	str	r3, [r7, #12]
	listTEST_LIST_ITEM_INTEGRITY( pxNewListItem );

	/* Insert a new list item into pxList, but rather than sort the list,
	makes the new list item the last item to be removed by a call to
	listGET_OWNER_OF_NEXT_ENTRY(). */
	pxNewListItem->pxNext = pxIndex;
 8006d82:	683b      	ldr	r3, [r7, #0]
 8006d84:	68fa      	ldr	r2, [r7, #12]
 8006d86:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxPrevious = pxIndex->pxPrevious;
 8006d88:	68fb      	ldr	r3, [r7, #12]
 8006d8a:	689a      	ldr	r2, [r3, #8]
 8006d8c:	683b      	ldr	r3, [r7, #0]
 8006d8e:	609a      	str	r2, [r3, #8]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	pxIndex->pxPrevious->pxNext = pxNewListItem;
 8006d90:	68fb      	ldr	r3, [r7, #12]
 8006d92:	689b      	ldr	r3, [r3, #8]
 8006d94:	683a      	ldr	r2, [r7, #0]
 8006d96:	605a      	str	r2, [r3, #4]
	pxIndex->pxPrevious = pxNewListItem;
 8006d98:	68fb      	ldr	r3, [r7, #12]
 8006d9a:	683a      	ldr	r2, [r7, #0]
 8006d9c:	609a      	str	r2, [r3, #8]

	/* Remember which list the item is in. */
	pxNewListItem->pxContainer = pxList;
 8006d9e:	683b      	ldr	r3, [r7, #0]
 8006da0:	687a      	ldr	r2, [r7, #4]
 8006da2:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 8006da4:	687b      	ldr	r3, [r7, #4]
 8006da6:	681b      	ldr	r3, [r3, #0]
 8006da8:	1c5a      	adds	r2, r3, #1
 8006daa:	687b      	ldr	r3, [r7, #4]
 8006dac:	601a      	str	r2, [r3, #0]
}
 8006dae:	bf00      	nop
 8006db0:	3714      	adds	r7, #20
 8006db2:	46bd      	mov	sp, r7
 8006db4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006db8:	4770      	bx	lr

08006dba <vListInsert>:
/*-----------------------------------------------------------*/

void vListInsert( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 8006dba:	b480      	push	{r7}
 8006dbc:	b085      	sub	sp, #20
 8006dbe:	af00      	add	r7, sp, #0
 8006dc0:	6078      	str	r0, [r7, #4]
 8006dc2:	6039      	str	r1, [r7, #0]
ListItem_t *pxIterator;
const TickType_t xValueOfInsertion = pxNewListItem->xItemValue;
 8006dc4:	683b      	ldr	r3, [r7, #0]
 8006dc6:	681b      	ldr	r3, [r3, #0]
 8006dc8:	60bb      	str	r3, [r7, #8]
	new list item should be placed after it.  This ensures that TCBs which are
	stored in ready lists (all of which have the same xItemValue value) get a
	share of the CPU.  However, if the xItemValue is the same as the back marker
	the iteration loop below will not end.  Therefore the value is checked
	first, and the algorithm slightly modified if necessary. */
	if( xValueOfInsertion == portMAX_DELAY )
 8006dca:	68bb      	ldr	r3, [r7, #8]
 8006dcc:	f1b3 3fff 	cmp.w	r3, #4294967295
 8006dd0:	d103      	bne.n	8006dda <vListInsert+0x20>
	{
		pxIterator = pxList->xListEnd.pxPrevious;
 8006dd2:	687b      	ldr	r3, [r7, #4]
 8006dd4:	691b      	ldr	r3, [r3, #16]
 8006dd6:	60fb      	str	r3, [r7, #12]
 8006dd8:	e00c      	b.n	8006df4 <vListInsert+0x3a>
			4) Using a queue or semaphore before it has been initialised or
			   before the scheduler has been started (are interrupts firing
			   before vTaskStartScheduler() has been called?).
		**********************************************************************/

		for( pxIterator = ( ListItem_t * ) &( pxList->xListEnd ); pxIterator->pxNext->xItemValue <= xValueOfInsertion; pxIterator = pxIterator->pxNext ) /*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. *//*lint !e440 The iterator moves to a different value, not xValueOfInsertion. */
 8006dda:	687b      	ldr	r3, [r7, #4]
 8006ddc:	3308      	adds	r3, #8
 8006dde:	60fb      	str	r3, [r7, #12]
 8006de0:	e002      	b.n	8006de8 <vListInsert+0x2e>
 8006de2:	68fb      	ldr	r3, [r7, #12]
 8006de4:	685b      	ldr	r3, [r3, #4]
 8006de6:	60fb      	str	r3, [r7, #12]
 8006de8:	68fb      	ldr	r3, [r7, #12]
 8006dea:	685b      	ldr	r3, [r3, #4]
 8006dec:	681b      	ldr	r3, [r3, #0]
 8006dee:	68ba      	ldr	r2, [r7, #8]
 8006df0:	429a      	cmp	r2, r3
 8006df2:	d2f6      	bcs.n	8006de2 <vListInsert+0x28>
			/* There is nothing to do here, just iterating to the wanted
			insertion position. */
		}
	}

	pxNewListItem->pxNext = pxIterator->pxNext;
 8006df4:	68fb      	ldr	r3, [r7, #12]
 8006df6:	685a      	ldr	r2, [r3, #4]
 8006df8:	683b      	ldr	r3, [r7, #0]
 8006dfa:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxNext->pxPrevious = pxNewListItem;
 8006dfc:	683b      	ldr	r3, [r7, #0]
 8006dfe:	685b      	ldr	r3, [r3, #4]
 8006e00:	683a      	ldr	r2, [r7, #0]
 8006e02:	609a      	str	r2, [r3, #8]
	pxNewListItem->pxPrevious = pxIterator;
 8006e04:	683b      	ldr	r3, [r7, #0]
 8006e06:	68fa      	ldr	r2, [r7, #12]
 8006e08:	609a      	str	r2, [r3, #8]
	pxIterator->pxNext = pxNewListItem;
 8006e0a:	68fb      	ldr	r3, [r7, #12]
 8006e0c:	683a      	ldr	r2, [r7, #0]
 8006e0e:	605a      	str	r2, [r3, #4]

	/* Remember which list the item is in.  This allows fast removal of the
	item later. */
	pxNewListItem->pxContainer = pxList;
 8006e10:	683b      	ldr	r3, [r7, #0]
 8006e12:	687a      	ldr	r2, [r7, #4]
 8006e14:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 8006e16:	687b      	ldr	r3, [r7, #4]
 8006e18:	681b      	ldr	r3, [r3, #0]
 8006e1a:	1c5a      	adds	r2, r3, #1
 8006e1c:	687b      	ldr	r3, [r7, #4]
 8006e1e:	601a      	str	r2, [r3, #0]
}
 8006e20:	bf00      	nop
 8006e22:	3714      	adds	r7, #20
 8006e24:	46bd      	mov	sp, r7
 8006e26:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006e2a:	4770      	bx	lr

08006e2c <uxListRemove>:
/*-----------------------------------------------------------*/

UBaseType_t uxListRemove( ListItem_t * const pxItemToRemove )
{
 8006e2c:	b480      	push	{r7}
 8006e2e:	b085      	sub	sp, #20
 8006e30:	af00      	add	r7, sp, #0
 8006e32:	6078      	str	r0, [r7, #4]
/* The list item knows which list it is in.  Obtain the list from the list
item. */
List_t * const pxList = pxItemToRemove->pxContainer;
 8006e34:	687b      	ldr	r3, [r7, #4]
 8006e36:	691b      	ldr	r3, [r3, #16]
 8006e38:	60fb      	str	r3, [r7, #12]

	pxItemToRemove->pxNext->pxPrevious = pxItemToRemove->pxPrevious;
 8006e3a:	687b      	ldr	r3, [r7, #4]
 8006e3c:	685b      	ldr	r3, [r3, #4]
 8006e3e:	687a      	ldr	r2, [r7, #4]
 8006e40:	6892      	ldr	r2, [r2, #8]
 8006e42:	609a      	str	r2, [r3, #8]
	pxItemToRemove->pxPrevious->pxNext = pxItemToRemove->pxNext;
 8006e44:	687b      	ldr	r3, [r7, #4]
 8006e46:	689b      	ldr	r3, [r3, #8]
 8006e48:	687a      	ldr	r2, [r7, #4]
 8006e4a:	6852      	ldr	r2, [r2, #4]
 8006e4c:	605a      	str	r2, [r3, #4]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	/* Make sure the index is left pointing to a valid item. */
	if( pxList->pxIndex == pxItemToRemove )
 8006e4e:	68fb      	ldr	r3, [r7, #12]
 8006e50:	685b      	ldr	r3, [r3, #4]
 8006e52:	687a      	ldr	r2, [r7, #4]
 8006e54:	429a      	cmp	r2, r3
 8006e56:	d103      	bne.n	8006e60 <uxListRemove+0x34>
	{
		pxList->pxIndex = pxItemToRemove->pxPrevious;
 8006e58:	687b      	ldr	r3, [r7, #4]
 8006e5a:	689a      	ldr	r2, [r3, #8]
 8006e5c:	68fb      	ldr	r3, [r7, #12]
 8006e5e:	605a      	str	r2, [r3, #4]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxItemToRemove->pxContainer = NULL;
 8006e60:	687b      	ldr	r3, [r7, #4]
 8006e62:	2200      	movs	r2, #0
 8006e64:	611a      	str	r2, [r3, #16]
	( pxList->uxNumberOfItems )--;
 8006e66:	68fb      	ldr	r3, [r7, #12]
 8006e68:	681b      	ldr	r3, [r3, #0]
 8006e6a:	1e5a      	subs	r2, r3, #1
 8006e6c:	68fb      	ldr	r3, [r7, #12]
 8006e6e:	601a      	str	r2, [r3, #0]

	return pxList->uxNumberOfItems;
 8006e70:	68fb      	ldr	r3, [r7, #12]
 8006e72:	681b      	ldr	r3, [r3, #0]
}
 8006e74:	4618      	mov	r0, r3
 8006e76:	3714      	adds	r7, #20
 8006e78:	46bd      	mov	sp, r7
 8006e7a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006e7e:	4770      	bx	lr

08006e80 <xQueueGenericReset>:
	}														\
	taskEXIT_CRITICAL()
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericReset( QueueHandle_t xQueue, BaseType_t xNewQueue )
{
 8006e80:	b580      	push	{r7, lr}
 8006e82:	b084      	sub	sp, #16
 8006e84:	af00      	add	r7, sp, #0
 8006e86:	6078      	str	r0, [r7, #4]
 8006e88:	6039      	str	r1, [r7, #0]
Queue_t * const pxQueue = xQueue;
 8006e8a:	687b      	ldr	r3, [r7, #4]
 8006e8c:	60fb      	str	r3, [r7, #12]

	configASSERT( pxQueue );
 8006e8e:	68fb      	ldr	r3, [r7, #12]
 8006e90:	2b00      	cmp	r3, #0
 8006e92:	d10a      	bne.n	8006eaa <xQueueGenericReset+0x2a>

portFORCE_INLINE static void vPortRaiseBASEPRI( void )
{
uint32_t ulNewBASEPRI;

	__asm volatile
 8006e94:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006e98:	f383 8811 	msr	BASEPRI, r3
 8006e9c:	f3bf 8f6f 	isb	sy
 8006ea0:	f3bf 8f4f 	dsb	sy
 8006ea4:	60bb      	str	r3, [r7, #8]
		"	msr basepri, %0											\n" \
		"	isb														\n" \
		"	dsb														\n" \
		:"=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
	);
}
 8006ea6:	bf00      	nop
 8006ea8:	e7fe      	b.n	8006ea8 <xQueueGenericReset+0x28>

	taskENTER_CRITICAL();
 8006eaa:	f002 f97b 	bl	80091a4 <vPortEnterCritical>
	{
		pxQueue->u.xQueue.pcTail = pxQueue->pcHead + ( pxQueue->uxLength * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 8006eae:	68fb      	ldr	r3, [r7, #12]
 8006eb0:	681a      	ldr	r2, [r3, #0]
 8006eb2:	68fb      	ldr	r3, [r7, #12]
 8006eb4:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8006eb6:	68f9      	ldr	r1, [r7, #12]
 8006eb8:	6c09      	ldr	r1, [r1, #64]	; 0x40
 8006eba:	fb01 f303 	mul.w	r3, r1, r3
 8006ebe:	441a      	add	r2, r3
 8006ec0:	68fb      	ldr	r3, [r7, #12]
 8006ec2:	609a      	str	r2, [r3, #8]
		pxQueue->uxMessagesWaiting = ( UBaseType_t ) 0U;
 8006ec4:	68fb      	ldr	r3, [r7, #12]
 8006ec6:	2200      	movs	r2, #0
 8006ec8:	639a      	str	r2, [r3, #56]	; 0x38
		pxQueue->pcWriteTo = pxQueue->pcHead;
 8006eca:	68fb      	ldr	r3, [r7, #12]
 8006ecc:	681a      	ldr	r2, [r3, #0]
 8006ece:	68fb      	ldr	r3, [r7, #12]
 8006ed0:	605a      	str	r2, [r3, #4]
		pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead + ( ( pxQueue->uxLength - 1U ) * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 8006ed2:	68fb      	ldr	r3, [r7, #12]
 8006ed4:	681a      	ldr	r2, [r3, #0]
 8006ed6:	68fb      	ldr	r3, [r7, #12]
 8006ed8:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8006eda:	3b01      	subs	r3, #1
 8006edc:	68f9      	ldr	r1, [r7, #12]
 8006ede:	6c09      	ldr	r1, [r1, #64]	; 0x40
 8006ee0:	fb01 f303 	mul.w	r3, r1, r3
 8006ee4:	441a      	add	r2, r3
 8006ee6:	68fb      	ldr	r3, [r7, #12]
 8006ee8:	60da      	str	r2, [r3, #12]
		pxQueue->cRxLock = queueUNLOCKED;
 8006eea:	68fb      	ldr	r3, [r7, #12]
 8006eec:	22ff      	movs	r2, #255	; 0xff
 8006eee:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
		pxQueue->cTxLock = queueUNLOCKED;
 8006ef2:	68fb      	ldr	r3, [r7, #12]
 8006ef4:	22ff      	movs	r2, #255	; 0xff
 8006ef6:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

		if( xNewQueue == pdFALSE )
 8006efa:	683b      	ldr	r3, [r7, #0]
 8006efc:	2b00      	cmp	r3, #0
 8006efe:	d114      	bne.n	8006f2a <xQueueGenericReset+0xaa>
			/* If there are tasks blocked waiting to read from the queue, then
			the tasks will remain blocked as after this function exits the queue
			will still be empty.  If there are tasks blocked waiting to write to
			the queue, then one should be unblocked as after this function exits
			it will be possible to write to it. */
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8006f00:	68fb      	ldr	r3, [r7, #12]
 8006f02:	691b      	ldr	r3, [r3, #16]
 8006f04:	2b00      	cmp	r3, #0
 8006f06:	d01a      	beq.n	8006f3e <xQueueGenericReset+0xbe>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8006f08:	68fb      	ldr	r3, [r7, #12]
 8006f0a:	3310      	adds	r3, #16
 8006f0c:	4618      	mov	r0, r3
 8006f0e:	f001 fa2f 	bl	8008370 <xTaskRemoveFromEventList>
 8006f12:	4603      	mov	r3, r0
 8006f14:	2b00      	cmp	r3, #0
 8006f16:	d012      	beq.n	8006f3e <xQueueGenericReset+0xbe>
				{
					queueYIELD_IF_USING_PREEMPTION();
 8006f18:	4b0c      	ldr	r3, [pc, #48]	; (8006f4c <xQueueGenericReset+0xcc>)
 8006f1a:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8006f1e:	601a      	str	r2, [r3, #0]
 8006f20:	f3bf 8f4f 	dsb	sy
 8006f24:	f3bf 8f6f 	isb	sy
 8006f28:	e009      	b.n	8006f3e <xQueueGenericReset+0xbe>
			}
		}
		else
		{
			/* Ensure the event queues start in the correct state. */
			vListInitialise( &( pxQueue->xTasksWaitingToSend ) );
 8006f2a:	68fb      	ldr	r3, [r7, #12]
 8006f2c:	3310      	adds	r3, #16
 8006f2e:	4618      	mov	r0, r3
 8006f30:	f7ff fef2 	bl	8006d18 <vListInitialise>
			vListInitialise( &( pxQueue->xTasksWaitingToReceive ) );
 8006f34:	68fb      	ldr	r3, [r7, #12]
 8006f36:	3324      	adds	r3, #36	; 0x24
 8006f38:	4618      	mov	r0, r3
 8006f3a:	f7ff feed 	bl	8006d18 <vListInitialise>
		}
	}
	taskEXIT_CRITICAL();
 8006f3e:	f002 f961 	bl	8009204 <vPortExitCritical>

	/* A value is returned for calling semantic consistency with previous
	versions. */
	return pdPASS;
 8006f42:	2301      	movs	r3, #1
}
 8006f44:	4618      	mov	r0, r3
 8006f46:	3710      	adds	r7, #16
 8006f48:	46bd      	mov	sp, r7
 8006f4a:	bd80      	pop	{r7, pc}
 8006f4c:	e000ed04 	.word	0xe000ed04

08006f50 <xQueueGenericCreateStatic>:
/*-----------------------------------------------------------*/

#if( configSUPPORT_STATIC_ALLOCATION == 1 )

	QueueHandle_t xQueueGenericCreateStatic( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, StaticQueue_t *pxStaticQueue, const uint8_t ucQueueType )
	{
 8006f50:	b580      	push	{r7, lr}
 8006f52:	b08e      	sub	sp, #56	; 0x38
 8006f54:	af02      	add	r7, sp, #8
 8006f56:	60f8      	str	r0, [r7, #12]
 8006f58:	60b9      	str	r1, [r7, #8]
 8006f5a:	607a      	str	r2, [r7, #4]
 8006f5c:	603b      	str	r3, [r7, #0]
	Queue_t *pxNewQueue;

		configASSERT( uxQueueLength > ( UBaseType_t ) 0 );
 8006f5e:	68fb      	ldr	r3, [r7, #12]
 8006f60:	2b00      	cmp	r3, #0
 8006f62:	d10a      	bne.n	8006f7a <xQueueGenericCreateStatic+0x2a>
	__asm volatile
 8006f64:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006f68:	f383 8811 	msr	BASEPRI, r3
 8006f6c:	f3bf 8f6f 	isb	sy
 8006f70:	f3bf 8f4f 	dsb	sy
 8006f74:	62bb      	str	r3, [r7, #40]	; 0x28
}
 8006f76:	bf00      	nop
 8006f78:	e7fe      	b.n	8006f78 <xQueueGenericCreateStatic+0x28>

		/* The StaticQueue_t structure and the queue storage area must be
		supplied. */
		configASSERT( pxStaticQueue != NULL );
 8006f7a:	683b      	ldr	r3, [r7, #0]
 8006f7c:	2b00      	cmp	r3, #0
 8006f7e:	d10a      	bne.n	8006f96 <xQueueGenericCreateStatic+0x46>
	__asm volatile
 8006f80:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006f84:	f383 8811 	msr	BASEPRI, r3
 8006f88:	f3bf 8f6f 	isb	sy
 8006f8c:	f3bf 8f4f 	dsb	sy
 8006f90:	627b      	str	r3, [r7, #36]	; 0x24
}
 8006f92:	bf00      	nop
 8006f94:	e7fe      	b.n	8006f94 <xQueueGenericCreateStatic+0x44>

		/* A queue storage area should be provided if the item size is not 0, and
		should not be provided if the item size is 0. */
		configASSERT( !( ( pucQueueStorage != NULL ) && ( uxItemSize == 0 ) ) );
 8006f96:	687b      	ldr	r3, [r7, #4]
 8006f98:	2b00      	cmp	r3, #0
 8006f9a:	d002      	beq.n	8006fa2 <xQueueGenericCreateStatic+0x52>
 8006f9c:	68bb      	ldr	r3, [r7, #8]
 8006f9e:	2b00      	cmp	r3, #0
 8006fa0:	d001      	beq.n	8006fa6 <xQueueGenericCreateStatic+0x56>
 8006fa2:	2301      	movs	r3, #1
 8006fa4:	e000      	b.n	8006fa8 <xQueueGenericCreateStatic+0x58>
 8006fa6:	2300      	movs	r3, #0
 8006fa8:	2b00      	cmp	r3, #0
 8006faa:	d10a      	bne.n	8006fc2 <xQueueGenericCreateStatic+0x72>
	__asm volatile
 8006fac:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006fb0:	f383 8811 	msr	BASEPRI, r3
 8006fb4:	f3bf 8f6f 	isb	sy
 8006fb8:	f3bf 8f4f 	dsb	sy
 8006fbc:	623b      	str	r3, [r7, #32]
}
 8006fbe:	bf00      	nop
 8006fc0:	e7fe      	b.n	8006fc0 <xQueueGenericCreateStatic+0x70>
		configASSERT( !( ( pucQueueStorage == NULL ) && ( uxItemSize != 0 ) ) );
 8006fc2:	687b      	ldr	r3, [r7, #4]
 8006fc4:	2b00      	cmp	r3, #0
 8006fc6:	d102      	bne.n	8006fce <xQueueGenericCreateStatic+0x7e>
 8006fc8:	68bb      	ldr	r3, [r7, #8]
 8006fca:	2b00      	cmp	r3, #0
 8006fcc:	d101      	bne.n	8006fd2 <xQueueGenericCreateStatic+0x82>
 8006fce:	2301      	movs	r3, #1
 8006fd0:	e000      	b.n	8006fd4 <xQueueGenericCreateStatic+0x84>
 8006fd2:	2300      	movs	r3, #0
 8006fd4:	2b00      	cmp	r3, #0
 8006fd6:	d10a      	bne.n	8006fee <xQueueGenericCreateStatic+0x9e>
	__asm volatile
 8006fd8:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006fdc:	f383 8811 	msr	BASEPRI, r3
 8006fe0:	f3bf 8f6f 	isb	sy
 8006fe4:	f3bf 8f4f 	dsb	sy
 8006fe8:	61fb      	str	r3, [r7, #28]
}
 8006fea:	bf00      	nop
 8006fec:	e7fe      	b.n	8006fec <xQueueGenericCreateStatic+0x9c>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticQueue_t or StaticSemaphore_t equals the size of
			the real queue and semaphore structures. */
			volatile size_t xSize = sizeof( StaticQueue_t );
 8006fee:	2350      	movs	r3, #80	; 0x50
 8006ff0:	617b      	str	r3, [r7, #20]
			configASSERT( xSize == sizeof( Queue_t ) );
 8006ff2:	697b      	ldr	r3, [r7, #20]
 8006ff4:	2b50      	cmp	r3, #80	; 0x50
 8006ff6:	d00a      	beq.n	800700e <xQueueGenericCreateStatic+0xbe>
	__asm volatile
 8006ff8:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006ffc:	f383 8811 	msr	BASEPRI, r3
 8007000:	f3bf 8f6f 	isb	sy
 8007004:	f3bf 8f4f 	dsb	sy
 8007008:	61bb      	str	r3, [r7, #24]
}
 800700a:	bf00      	nop
 800700c:	e7fe      	b.n	800700c <xQueueGenericCreateStatic+0xbc>
			( void ) xSize; /* Keeps lint quiet when configASSERT() is not defined. */
 800700e:	697b      	ldr	r3, [r7, #20]
		#endif /* configASSERT_DEFINED */

		/* The address of a statically allocated queue was passed in, use it.
		The address of a statically allocated storage area was also passed in
		but is already set. */
		pxNewQueue = ( Queue_t * ) pxStaticQueue; /*lint !e740 !e9087 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 8007010:	683b      	ldr	r3, [r7, #0]
 8007012:	62fb      	str	r3, [r7, #44]	; 0x2c

		if( pxNewQueue != NULL )
 8007014:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007016:	2b00      	cmp	r3, #0
 8007018:	d00d      	beq.n	8007036 <xQueueGenericCreateStatic+0xe6>
			#if( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
			{
				/* Queues can be allocated wither statically or dynamically, so
				note this queue was allocated statically in case the queue is
				later deleted. */
				pxNewQueue->ucStaticallyAllocated = pdTRUE;
 800701a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800701c:	2201      	movs	r2, #1
 800701e:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
			}
			#endif /* configSUPPORT_DYNAMIC_ALLOCATION */

			prvInitialiseNewQueue( uxQueueLength, uxItemSize, pucQueueStorage, ucQueueType, pxNewQueue );
 8007022:	f897 2038 	ldrb.w	r2, [r7, #56]	; 0x38
 8007026:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007028:	9300      	str	r3, [sp, #0]
 800702a:	4613      	mov	r3, r2
 800702c:	687a      	ldr	r2, [r7, #4]
 800702e:	68b9      	ldr	r1, [r7, #8]
 8007030:	68f8      	ldr	r0, [r7, #12]
 8007032:	f000 f805 	bl	8007040 <prvInitialiseNewQueue>
		{
			traceQUEUE_CREATE_FAILED( ucQueueType );
			mtCOVERAGE_TEST_MARKER();
		}

		return pxNewQueue;
 8007036:	6afb      	ldr	r3, [r7, #44]	; 0x2c
	}
 8007038:	4618      	mov	r0, r3
 800703a:	3730      	adds	r7, #48	; 0x30
 800703c:	46bd      	mov	sp, r7
 800703e:	bd80      	pop	{r7, pc}

08007040 <prvInitialiseNewQueue>:

#endif /* configSUPPORT_STATIC_ALLOCATION */
/*-----------------------------------------------------------*/

static void prvInitialiseNewQueue( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, const uint8_t ucQueueType, Queue_t *pxNewQueue )
{
 8007040:	b580      	push	{r7, lr}
 8007042:	b084      	sub	sp, #16
 8007044:	af00      	add	r7, sp, #0
 8007046:	60f8      	str	r0, [r7, #12]
 8007048:	60b9      	str	r1, [r7, #8]
 800704a:	607a      	str	r2, [r7, #4]
 800704c:	70fb      	strb	r3, [r7, #3]
	/* Remove compiler warnings about unused parameters should
	configUSE_TRACE_FACILITY not be set to 1. */
	( void ) ucQueueType;

	if( uxItemSize == ( UBaseType_t ) 0 )
 800704e:	68bb      	ldr	r3, [r7, #8]
 8007050:	2b00      	cmp	r3, #0
 8007052:	d103      	bne.n	800705c <prvInitialiseNewQueue+0x1c>
	{
		/* No RAM was allocated for the queue storage area, but PC head cannot
		be set to NULL because NULL is used as a key to say the queue is used as
		a mutex.  Therefore just set pcHead to point to the queue as a benign
		value that is known to be within the memory map. */
		pxNewQueue->pcHead = ( int8_t * ) pxNewQueue;
 8007054:	69bb      	ldr	r3, [r7, #24]
 8007056:	69ba      	ldr	r2, [r7, #24]
 8007058:	601a      	str	r2, [r3, #0]
 800705a:	e002      	b.n	8007062 <prvInitialiseNewQueue+0x22>
	}
	else
	{
		/* Set the head to the start of the queue storage area. */
		pxNewQueue->pcHead = ( int8_t * ) pucQueueStorage;
 800705c:	69bb      	ldr	r3, [r7, #24]
 800705e:	687a      	ldr	r2, [r7, #4]
 8007060:	601a      	str	r2, [r3, #0]
	}

	/* Initialise the queue members as described where the queue type is
	defined. */
	pxNewQueue->uxLength = uxQueueLength;
 8007062:	69bb      	ldr	r3, [r7, #24]
 8007064:	68fa      	ldr	r2, [r7, #12]
 8007066:	63da      	str	r2, [r3, #60]	; 0x3c
	pxNewQueue->uxItemSize = uxItemSize;
 8007068:	69bb      	ldr	r3, [r7, #24]
 800706a:	68ba      	ldr	r2, [r7, #8]
 800706c:	641a      	str	r2, [r3, #64]	; 0x40
	( void ) xQueueGenericReset( pxNewQueue, pdTRUE );
 800706e:	2101      	movs	r1, #1
 8007070:	69b8      	ldr	r0, [r7, #24]
 8007072:	f7ff ff05 	bl	8006e80 <xQueueGenericReset>

	#if ( configUSE_TRACE_FACILITY == 1 )
	{
		pxNewQueue->ucQueueType = ucQueueType;
 8007076:	69bb      	ldr	r3, [r7, #24]
 8007078:	78fa      	ldrb	r2, [r7, #3]
 800707a:	f883 204c 	strb.w	r2, [r3, #76]	; 0x4c
		pxNewQueue->pxQueueSetContainer = NULL;
	}
	#endif /* configUSE_QUEUE_SETS */

	traceQUEUE_CREATE( pxNewQueue );
}
 800707e:	bf00      	nop
 8007080:	3710      	adds	r7, #16
 8007082:	46bd      	mov	sp, r7
 8007084:	bd80      	pop	{r7, pc}
	...

08007088 <xQueueGenericSend>:

#endif /* ( ( configUSE_COUNTING_SEMAPHORES == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) ) */
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSend( QueueHandle_t xQueue, const void * const pvItemToQueue, TickType_t xTicksToWait, const BaseType_t xCopyPosition )
{
 8007088:	b580      	push	{r7, lr}
 800708a:	b08e      	sub	sp, #56	; 0x38
 800708c:	af00      	add	r7, sp, #0
 800708e:	60f8      	str	r0, [r7, #12]
 8007090:	60b9      	str	r1, [r7, #8]
 8007092:	607a      	str	r2, [r7, #4]
 8007094:	603b      	str	r3, [r7, #0]
BaseType_t xEntryTimeSet = pdFALSE, xYieldRequired;
 8007096:	2300      	movs	r3, #0
 8007098:	637b      	str	r3, [r7, #52]	; 0x34
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 800709a:	68fb      	ldr	r3, [r7, #12]
 800709c:	633b      	str	r3, [r7, #48]	; 0x30

	configASSERT( pxQueue );
 800709e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80070a0:	2b00      	cmp	r3, #0
 80070a2:	d10a      	bne.n	80070ba <xQueueGenericSend+0x32>
	__asm volatile
 80070a4:	f04f 0350 	mov.w	r3, #80	; 0x50
 80070a8:	f383 8811 	msr	BASEPRI, r3
 80070ac:	f3bf 8f6f 	isb	sy
 80070b0:	f3bf 8f4f 	dsb	sy
 80070b4:	62bb      	str	r3, [r7, #40]	; 0x28
}
 80070b6:	bf00      	nop
 80070b8:	e7fe      	b.n	80070b8 <xQueueGenericSend+0x30>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 80070ba:	68bb      	ldr	r3, [r7, #8]
 80070bc:	2b00      	cmp	r3, #0
 80070be:	d103      	bne.n	80070c8 <xQueueGenericSend+0x40>
 80070c0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80070c2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80070c4:	2b00      	cmp	r3, #0
 80070c6:	d101      	bne.n	80070cc <xQueueGenericSend+0x44>
 80070c8:	2301      	movs	r3, #1
 80070ca:	e000      	b.n	80070ce <xQueueGenericSend+0x46>
 80070cc:	2300      	movs	r3, #0
 80070ce:	2b00      	cmp	r3, #0
 80070d0:	d10a      	bne.n	80070e8 <xQueueGenericSend+0x60>
	__asm volatile
 80070d2:	f04f 0350 	mov.w	r3, #80	; 0x50
 80070d6:	f383 8811 	msr	BASEPRI, r3
 80070da:	f3bf 8f6f 	isb	sy
 80070de:	f3bf 8f4f 	dsb	sy
 80070e2:	627b      	str	r3, [r7, #36]	; 0x24
}
 80070e4:	bf00      	nop
 80070e6:	e7fe      	b.n	80070e6 <xQueueGenericSend+0x5e>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 80070e8:	683b      	ldr	r3, [r7, #0]
 80070ea:	2b02      	cmp	r3, #2
 80070ec:	d103      	bne.n	80070f6 <xQueueGenericSend+0x6e>
 80070ee:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80070f0:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80070f2:	2b01      	cmp	r3, #1
 80070f4:	d101      	bne.n	80070fa <xQueueGenericSend+0x72>
 80070f6:	2301      	movs	r3, #1
 80070f8:	e000      	b.n	80070fc <xQueueGenericSend+0x74>
 80070fa:	2300      	movs	r3, #0
 80070fc:	2b00      	cmp	r3, #0
 80070fe:	d10a      	bne.n	8007116 <xQueueGenericSend+0x8e>
	__asm volatile
 8007100:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007104:	f383 8811 	msr	BASEPRI, r3
 8007108:	f3bf 8f6f 	isb	sy
 800710c:	f3bf 8f4f 	dsb	sy
 8007110:	623b      	str	r3, [r7, #32]
}
 8007112:	bf00      	nop
 8007114:	e7fe      	b.n	8007114 <xQueueGenericSend+0x8c>
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 8007116:	f001 faeb 	bl	80086f0 <xTaskGetSchedulerState>
 800711a:	4603      	mov	r3, r0
 800711c:	2b00      	cmp	r3, #0
 800711e:	d102      	bne.n	8007126 <xQueueGenericSend+0x9e>
 8007120:	687b      	ldr	r3, [r7, #4]
 8007122:	2b00      	cmp	r3, #0
 8007124:	d101      	bne.n	800712a <xQueueGenericSend+0xa2>
 8007126:	2301      	movs	r3, #1
 8007128:	e000      	b.n	800712c <xQueueGenericSend+0xa4>
 800712a:	2300      	movs	r3, #0
 800712c:	2b00      	cmp	r3, #0
 800712e:	d10a      	bne.n	8007146 <xQueueGenericSend+0xbe>
	__asm volatile
 8007130:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007134:	f383 8811 	msr	BASEPRI, r3
 8007138:	f3bf 8f6f 	isb	sy
 800713c:	f3bf 8f4f 	dsb	sy
 8007140:	61fb      	str	r3, [r7, #28]
}
 8007142:	bf00      	nop
 8007144:	e7fe      	b.n	8007144 <xQueueGenericSend+0xbc>
	/*lint -save -e904 This function relaxes the coding standard somewhat to
	allow return statements within the function itself.  This is done in the
	interest of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 8007146:	f002 f82d 	bl	80091a4 <vPortEnterCritical>
		{
			/* Is there room on the queue now?  The running task must be the
			highest priority task wanting to access the queue.  If the head item
			in the queue is to be overwritten then it does not matter if the
			queue is full. */
			if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 800714a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800714c:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800714e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007150:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8007152:	429a      	cmp	r2, r3
 8007154:	d302      	bcc.n	800715c <xQueueGenericSend+0xd4>
 8007156:	683b      	ldr	r3, [r7, #0]
 8007158:	2b02      	cmp	r3, #2
 800715a:	d129      	bne.n	80071b0 <xQueueGenericSend+0x128>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					xYieldRequired = prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 800715c:	683a      	ldr	r2, [r7, #0]
 800715e:	68b9      	ldr	r1, [r7, #8]
 8007160:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8007162:	f000 fa0b 	bl	800757c <prvCopyDataToQueue>
 8007166:	62f8      	str	r0, [r7, #44]	; 0x2c

					/* If there was a task waiting for data to arrive on the
					queue then unblock it now. */
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8007168:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800716a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800716c:	2b00      	cmp	r3, #0
 800716e:	d010      	beq.n	8007192 <xQueueGenericSend+0x10a>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8007170:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007172:	3324      	adds	r3, #36	; 0x24
 8007174:	4618      	mov	r0, r3
 8007176:	f001 f8fb 	bl	8008370 <xTaskRemoveFromEventList>
 800717a:	4603      	mov	r3, r0
 800717c:	2b00      	cmp	r3, #0
 800717e:	d013      	beq.n	80071a8 <xQueueGenericSend+0x120>
						{
							/* The unblocked task has a priority higher than
							our own so yield immediately.  Yes it is ok to do
							this from within the critical section - the kernel
							takes care of that. */
							queueYIELD_IF_USING_PREEMPTION();
 8007180:	4b3f      	ldr	r3, [pc, #252]	; (8007280 <xQueueGenericSend+0x1f8>)
 8007182:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8007186:	601a      	str	r2, [r3, #0]
 8007188:	f3bf 8f4f 	dsb	sy
 800718c:	f3bf 8f6f 	isb	sy
 8007190:	e00a      	b.n	80071a8 <xQueueGenericSend+0x120>
						else
						{
							mtCOVERAGE_TEST_MARKER();
						}
					}
					else if( xYieldRequired != pdFALSE )
 8007192:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007194:	2b00      	cmp	r3, #0
 8007196:	d007      	beq.n	80071a8 <xQueueGenericSend+0x120>
					{
						/* This path is a special case that will only get
						executed if the task was holding multiple mutexes and
						the mutexes were given back in an order that is
						different to that in which they were taken. */
						queueYIELD_IF_USING_PREEMPTION();
 8007198:	4b39      	ldr	r3, [pc, #228]	; (8007280 <xQueueGenericSend+0x1f8>)
 800719a:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800719e:	601a      	str	r2, [r3, #0]
 80071a0:	f3bf 8f4f 	dsb	sy
 80071a4:	f3bf 8f6f 	isb	sy
						mtCOVERAGE_TEST_MARKER();
					}
				}
				#endif /* configUSE_QUEUE_SETS */

				taskEXIT_CRITICAL();
 80071a8:	f002 f82c 	bl	8009204 <vPortExitCritical>
				return pdPASS;
 80071ac:	2301      	movs	r3, #1
 80071ae:	e063      	b.n	8007278 <xQueueGenericSend+0x1f0>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 80071b0:	687b      	ldr	r3, [r7, #4]
 80071b2:	2b00      	cmp	r3, #0
 80071b4:	d103      	bne.n	80071be <xQueueGenericSend+0x136>
				{
					/* The queue was full and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 80071b6:	f002 f825 	bl	8009204 <vPortExitCritical>

					/* Return to the original privilege level before exiting
					the function. */
					traceQUEUE_SEND_FAILED( pxQueue );
					return errQUEUE_FULL;
 80071ba:	2300      	movs	r3, #0
 80071bc:	e05c      	b.n	8007278 <xQueueGenericSend+0x1f0>
				}
				else if( xEntryTimeSet == pdFALSE )
 80071be:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80071c0:	2b00      	cmp	r3, #0
 80071c2:	d106      	bne.n	80071d2 <xQueueGenericSend+0x14a>
				{
					/* The queue was full and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 80071c4:	f107 0314 	add.w	r3, r7, #20
 80071c8:	4618      	mov	r0, r3
 80071ca:	f001 f935 	bl	8008438 <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 80071ce:	2301      	movs	r3, #1
 80071d0:	637b      	str	r3, [r7, #52]	; 0x34
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 80071d2:	f002 f817 	bl	8009204 <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 80071d6:	f000 fe83 	bl	8007ee0 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 80071da:	f001 ffe3 	bl	80091a4 <vPortEnterCritical>
 80071de:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80071e0:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 80071e4:	b25b      	sxtb	r3, r3
 80071e6:	f1b3 3fff 	cmp.w	r3, #4294967295
 80071ea:	d103      	bne.n	80071f4 <xQueueGenericSend+0x16c>
 80071ec:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80071ee:	2200      	movs	r2, #0
 80071f0:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 80071f4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80071f6:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 80071fa:	b25b      	sxtb	r3, r3
 80071fc:	f1b3 3fff 	cmp.w	r3, #4294967295
 8007200:	d103      	bne.n	800720a <xQueueGenericSend+0x182>
 8007202:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007204:	2200      	movs	r2, #0
 8007206:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 800720a:	f001 fffb 	bl	8009204 <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 800720e:	1d3a      	adds	r2, r7, #4
 8007210:	f107 0314 	add.w	r3, r7, #20
 8007214:	4611      	mov	r1, r2
 8007216:	4618      	mov	r0, r3
 8007218:	f001 f924 	bl	8008464 <xTaskCheckForTimeOut>
 800721c:	4603      	mov	r3, r0
 800721e:	2b00      	cmp	r3, #0
 8007220:	d124      	bne.n	800726c <xQueueGenericSend+0x1e4>
		{
			if( prvIsQueueFull( pxQueue ) != pdFALSE )
 8007222:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8007224:	f000 faa2 	bl	800776c <prvIsQueueFull>
 8007228:	4603      	mov	r3, r0
 800722a:	2b00      	cmp	r3, #0
 800722c:	d018      	beq.n	8007260 <xQueueGenericSend+0x1d8>
			{
				traceBLOCKING_ON_QUEUE_SEND( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToSend ), xTicksToWait );
 800722e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007230:	3310      	adds	r3, #16
 8007232:	687a      	ldr	r2, [r7, #4]
 8007234:	4611      	mov	r1, r2
 8007236:	4618      	mov	r0, r3
 8007238:	f001 f84a 	bl	80082d0 <vTaskPlaceOnEventList>
				/* Unlocking the queue means queue events can effect the
				event list.  It is possible that interrupts occurring now
				remove this task from the event list again - but as the
				scheduler is suspended the task will go onto the pending
				ready last instead of the actual ready list. */
				prvUnlockQueue( pxQueue );
 800723c:	6b38      	ldr	r0, [r7, #48]	; 0x30
 800723e:	f000 fa2d 	bl	800769c <prvUnlockQueue>
				/* Resuming the scheduler will move tasks from the pending
				ready list into the ready list - so it is feasible that this
				task is already in a ready list before it yields - in which
				case the yield will not cause a context switch unless there
				is also a higher priority task in the pending ready list. */
				if( xTaskResumeAll() == pdFALSE )
 8007242:	f000 fe5b 	bl	8007efc <xTaskResumeAll>
 8007246:	4603      	mov	r3, r0
 8007248:	2b00      	cmp	r3, #0
 800724a:	f47f af7c 	bne.w	8007146 <xQueueGenericSend+0xbe>
				{
					portYIELD_WITHIN_API();
 800724e:	4b0c      	ldr	r3, [pc, #48]	; (8007280 <xQueueGenericSend+0x1f8>)
 8007250:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8007254:	601a      	str	r2, [r3, #0]
 8007256:	f3bf 8f4f 	dsb	sy
 800725a:	f3bf 8f6f 	isb	sy
 800725e:	e772      	b.n	8007146 <xQueueGenericSend+0xbe>
				}
			}
			else
			{
				/* Try again. */
				prvUnlockQueue( pxQueue );
 8007260:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8007262:	f000 fa1b 	bl	800769c <prvUnlockQueue>
				( void ) xTaskResumeAll();
 8007266:	f000 fe49 	bl	8007efc <xTaskResumeAll>
 800726a:	e76c      	b.n	8007146 <xQueueGenericSend+0xbe>
			}
		}
		else
		{
			/* The timeout has expired. */
			prvUnlockQueue( pxQueue );
 800726c:	6b38      	ldr	r0, [r7, #48]	; 0x30
 800726e:	f000 fa15 	bl	800769c <prvUnlockQueue>
			( void ) xTaskResumeAll();
 8007272:	f000 fe43 	bl	8007efc <xTaskResumeAll>

			traceQUEUE_SEND_FAILED( pxQueue );
			return errQUEUE_FULL;
 8007276:	2300      	movs	r3, #0
		}
	} /*lint -restore */
}
 8007278:	4618      	mov	r0, r3
 800727a:	3738      	adds	r7, #56	; 0x38
 800727c:	46bd      	mov	sp, r7
 800727e:	bd80      	pop	{r7, pc}
 8007280:	e000ed04 	.word	0xe000ed04

08007284 <xQueueGenericSendFromISR>:
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSendFromISR( QueueHandle_t xQueue, const void * const pvItemToQueue, BaseType_t * const pxHigherPriorityTaskWoken, const BaseType_t xCopyPosition )
{
 8007284:	b580      	push	{r7, lr}
 8007286:	b090      	sub	sp, #64	; 0x40
 8007288:	af00      	add	r7, sp, #0
 800728a:	60f8      	str	r0, [r7, #12]
 800728c:	60b9      	str	r1, [r7, #8]
 800728e:	607a      	str	r2, [r7, #4]
 8007290:	603b      	str	r3, [r7, #0]
BaseType_t xReturn;
UBaseType_t uxSavedInterruptStatus;
Queue_t * const pxQueue = xQueue;
 8007292:	68fb      	ldr	r3, [r7, #12]
 8007294:	63bb      	str	r3, [r7, #56]	; 0x38

	configASSERT( pxQueue );
 8007296:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007298:	2b00      	cmp	r3, #0
 800729a:	d10a      	bne.n	80072b2 <xQueueGenericSendFromISR+0x2e>
	__asm volatile
 800729c:	f04f 0350 	mov.w	r3, #80	; 0x50
 80072a0:	f383 8811 	msr	BASEPRI, r3
 80072a4:	f3bf 8f6f 	isb	sy
 80072a8:	f3bf 8f4f 	dsb	sy
 80072ac:	62bb      	str	r3, [r7, #40]	; 0x28
}
 80072ae:	bf00      	nop
 80072b0:	e7fe      	b.n	80072b0 <xQueueGenericSendFromISR+0x2c>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 80072b2:	68bb      	ldr	r3, [r7, #8]
 80072b4:	2b00      	cmp	r3, #0
 80072b6:	d103      	bne.n	80072c0 <xQueueGenericSendFromISR+0x3c>
 80072b8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80072ba:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80072bc:	2b00      	cmp	r3, #0
 80072be:	d101      	bne.n	80072c4 <xQueueGenericSendFromISR+0x40>
 80072c0:	2301      	movs	r3, #1
 80072c2:	e000      	b.n	80072c6 <xQueueGenericSendFromISR+0x42>
 80072c4:	2300      	movs	r3, #0
 80072c6:	2b00      	cmp	r3, #0
 80072c8:	d10a      	bne.n	80072e0 <xQueueGenericSendFromISR+0x5c>
	__asm volatile
 80072ca:	f04f 0350 	mov.w	r3, #80	; 0x50
 80072ce:	f383 8811 	msr	BASEPRI, r3
 80072d2:	f3bf 8f6f 	isb	sy
 80072d6:	f3bf 8f4f 	dsb	sy
 80072da:	627b      	str	r3, [r7, #36]	; 0x24
}
 80072dc:	bf00      	nop
 80072de:	e7fe      	b.n	80072de <xQueueGenericSendFromISR+0x5a>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 80072e0:	683b      	ldr	r3, [r7, #0]
 80072e2:	2b02      	cmp	r3, #2
 80072e4:	d103      	bne.n	80072ee <xQueueGenericSendFromISR+0x6a>
 80072e6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80072e8:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80072ea:	2b01      	cmp	r3, #1
 80072ec:	d101      	bne.n	80072f2 <xQueueGenericSendFromISR+0x6e>
 80072ee:	2301      	movs	r3, #1
 80072f0:	e000      	b.n	80072f4 <xQueueGenericSendFromISR+0x70>
 80072f2:	2300      	movs	r3, #0
 80072f4:	2b00      	cmp	r3, #0
 80072f6:	d10a      	bne.n	800730e <xQueueGenericSendFromISR+0x8a>
	__asm volatile
 80072f8:	f04f 0350 	mov.w	r3, #80	; 0x50
 80072fc:	f383 8811 	msr	BASEPRI, r3
 8007300:	f3bf 8f6f 	isb	sy
 8007304:	f3bf 8f4f 	dsb	sy
 8007308:	623b      	str	r3, [r7, #32]
}
 800730a:	bf00      	nop
 800730c:	e7fe      	b.n	800730c <xQueueGenericSendFromISR+0x88>
	that have been assigned a priority at or (logically) below the maximum
	system call	interrupt priority.  FreeRTOS maintains a separate interrupt
	safe API to ensure interrupt entry is as fast and as simple as possible.
	More information (albeit Cortex-M specific) is provided on the following
	link: http://www.freertos.org/RTOS-Cortex-M3-M4.html */
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 800730e:	f002 f82b 	bl	8009368 <vPortValidateInterruptPriority>

portFORCE_INLINE static uint32_t ulPortRaiseBASEPRI( void )
{
uint32_t ulOriginalBASEPRI, ulNewBASEPRI;

	__asm volatile
 8007312:	f3ef 8211 	mrs	r2, BASEPRI
 8007316:	f04f 0350 	mov.w	r3, #80	; 0x50
 800731a:	f383 8811 	msr	BASEPRI, r3
 800731e:	f3bf 8f6f 	isb	sy
 8007322:	f3bf 8f4f 	dsb	sy
 8007326:	61fa      	str	r2, [r7, #28]
 8007328:	61bb      	str	r3, [r7, #24]
		:"=r" (ulOriginalBASEPRI), "=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
	);

	/* This return will not be reached but is necessary to prevent compiler
	warnings. */
	return ulOriginalBASEPRI;
 800732a:	69fb      	ldr	r3, [r7, #28]
	/* Similar to xQueueGenericSend, except without blocking if there is no room
	in the queue.  Also don't directly wake a task that was blocked on a queue
	read, instead return a flag to say whether a context switch is required or
	not (i.e. has a task with a higher priority than us been woken by this
	post). */
	uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 800732c:	637b      	str	r3, [r7, #52]	; 0x34
	{
		if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 800732e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007330:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8007332:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007334:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8007336:	429a      	cmp	r2, r3
 8007338:	d302      	bcc.n	8007340 <xQueueGenericSendFromISR+0xbc>
 800733a:	683b      	ldr	r3, [r7, #0]
 800733c:	2b02      	cmp	r3, #2
 800733e:	d12f      	bne.n	80073a0 <xQueueGenericSendFromISR+0x11c>
		{
			const int8_t cTxLock = pxQueue->cTxLock;
 8007340:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007342:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8007346:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
			const UBaseType_t uxPreviousMessagesWaiting = pxQueue->uxMessagesWaiting;
 800734a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800734c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800734e:	62fb      	str	r3, [r7, #44]	; 0x2c
			/* Semaphores use xQueueGiveFromISR(), so pxQueue will not be a
			semaphore or mutex.  That means prvCopyDataToQueue() cannot result
			in a task disinheriting a priority and prvCopyDataToQueue() can be
			called here even though the disinherit function does not check if
			the scheduler is suspended before accessing the ready lists. */
			( void ) prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 8007350:	683a      	ldr	r2, [r7, #0]
 8007352:	68b9      	ldr	r1, [r7, #8]
 8007354:	6bb8      	ldr	r0, [r7, #56]	; 0x38
 8007356:	f000 f911 	bl	800757c <prvCopyDataToQueue>

			/* The event list is not altered if the queue is locked.  This will
			be done when the queue is unlocked later. */
			if( cTxLock == queueUNLOCKED )
 800735a:	f997 3033 	ldrsb.w	r3, [r7, #51]	; 0x33
 800735e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8007362:	d112      	bne.n	800738a <xQueueGenericSendFromISR+0x106>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8007364:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007366:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007368:	2b00      	cmp	r3, #0
 800736a:	d016      	beq.n	800739a <xQueueGenericSendFromISR+0x116>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 800736c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800736e:	3324      	adds	r3, #36	; 0x24
 8007370:	4618      	mov	r0, r3
 8007372:	f000 fffd 	bl	8008370 <xTaskRemoveFromEventList>
 8007376:	4603      	mov	r3, r0
 8007378:	2b00      	cmp	r3, #0
 800737a:	d00e      	beq.n	800739a <xQueueGenericSendFromISR+0x116>
						{
							/* The task waiting has a higher priority so record that a
							context	switch is required. */
							if( pxHigherPriorityTaskWoken != NULL )
 800737c:	687b      	ldr	r3, [r7, #4]
 800737e:	2b00      	cmp	r3, #0
 8007380:	d00b      	beq.n	800739a <xQueueGenericSendFromISR+0x116>
							{
								*pxHigherPriorityTaskWoken = pdTRUE;
 8007382:	687b      	ldr	r3, [r7, #4]
 8007384:	2201      	movs	r2, #1
 8007386:	601a      	str	r2, [r3, #0]
 8007388:	e007      	b.n	800739a <xQueueGenericSendFromISR+0x116>
			}
			else
			{
				/* Increment the lock count so the task that unlocks the queue
				knows that data was posted while it was locked. */
				pxQueue->cTxLock = ( int8_t ) ( cTxLock + 1 );
 800738a:	f897 3033 	ldrb.w	r3, [r7, #51]	; 0x33
 800738e:	3301      	adds	r3, #1
 8007390:	b2db      	uxtb	r3, r3
 8007392:	b25a      	sxtb	r2, r3
 8007394:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007396:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
			}

			xReturn = pdPASS;
 800739a:	2301      	movs	r3, #1
 800739c:	63fb      	str	r3, [r7, #60]	; 0x3c
		{
 800739e:	e001      	b.n	80073a4 <xQueueGenericSendFromISR+0x120>
		}
		else
		{
			traceQUEUE_SEND_FROM_ISR_FAILED( pxQueue );
			xReturn = errQUEUE_FULL;
 80073a0:	2300      	movs	r3, #0
 80073a2:	63fb      	str	r3, [r7, #60]	; 0x3c
 80073a4:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80073a6:	617b      	str	r3, [r7, #20]
}
/*-----------------------------------------------------------*/

portFORCE_INLINE static void vPortSetBASEPRI( uint32_t ulNewMaskValue )
{
	__asm volatile
 80073a8:	697b      	ldr	r3, [r7, #20]
 80073aa:	f383 8811 	msr	BASEPRI, r3
	(
		"	msr basepri, %0	" :: "r" ( ulNewMaskValue ) : "memory"
	);
}
 80073ae:	bf00      	nop
		}
	}
	portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

	return xReturn;
 80073b0:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
}
 80073b2:	4618      	mov	r0, r3
 80073b4:	3740      	adds	r7, #64	; 0x40
 80073b6:	46bd      	mov	sp, r7
 80073b8:	bd80      	pop	{r7, pc}
	...

080073bc <xQueueReceive>:
	return xReturn;
}
/*-----------------------------------------------------------*/

BaseType_t xQueueReceive( QueueHandle_t xQueue, void * const pvBuffer, TickType_t xTicksToWait )
{
 80073bc:	b580      	push	{r7, lr}
 80073be:	b08c      	sub	sp, #48	; 0x30
 80073c0:	af00      	add	r7, sp, #0
 80073c2:	60f8      	str	r0, [r7, #12]
 80073c4:	60b9      	str	r1, [r7, #8]
 80073c6:	607a      	str	r2, [r7, #4]
BaseType_t xEntryTimeSet = pdFALSE;
 80073c8:	2300      	movs	r3, #0
 80073ca:	62fb      	str	r3, [r7, #44]	; 0x2c
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 80073cc:	68fb      	ldr	r3, [r7, #12]
 80073ce:	62bb      	str	r3, [r7, #40]	; 0x28

	/* Check the pointer is not NULL. */
	configASSERT( ( pxQueue ) );
 80073d0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80073d2:	2b00      	cmp	r3, #0
 80073d4:	d10a      	bne.n	80073ec <xQueueReceive+0x30>
	__asm volatile
 80073d6:	f04f 0350 	mov.w	r3, #80	; 0x50
 80073da:	f383 8811 	msr	BASEPRI, r3
 80073de:	f3bf 8f6f 	isb	sy
 80073e2:	f3bf 8f4f 	dsb	sy
 80073e6:	623b      	str	r3, [r7, #32]
}
 80073e8:	bf00      	nop
 80073ea:	e7fe      	b.n	80073ea <xQueueReceive+0x2e>

	/* The buffer into which data is received can only be NULL if the data size
	is zero (so no data is copied into the buffer. */
	configASSERT( !( ( ( pvBuffer ) == NULL ) && ( ( pxQueue )->uxItemSize != ( UBaseType_t ) 0U ) ) );
 80073ec:	68bb      	ldr	r3, [r7, #8]
 80073ee:	2b00      	cmp	r3, #0
 80073f0:	d103      	bne.n	80073fa <xQueueReceive+0x3e>
 80073f2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80073f4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80073f6:	2b00      	cmp	r3, #0
 80073f8:	d101      	bne.n	80073fe <xQueueReceive+0x42>
 80073fa:	2301      	movs	r3, #1
 80073fc:	e000      	b.n	8007400 <xQueueReceive+0x44>
 80073fe:	2300      	movs	r3, #0
 8007400:	2b00      	cmp	r3, #0
 8007402:	d10a      	bne.n	800741a <xQueueReceive+0x5e>
	__asm volatile
 8007404:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007408:	f383 8811 	msr	BASEPRI, r3
 800740c:	f3bf 8f6f 	isb	sy
 8007410:	f3bf 8f4f 	dsb	sy
 8007414:	61fb      	str	r3, [r7, #28]
}
 8007416:	bf00      	nop
 8007418:	e7fe      	b.n	8007418 <xQueueReceive+0x5c>

	/* Cannot block if the scheduler is suspended. */
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 800741a:	f001 f969 	bl	80086f0 <xTaskGetSchedulerState>
 800741e:	4603      	mov	r3, r0
 8007420:	2b00      	cmp	r3, #0
 8007422:	d102      	bne.n	800742a <xQueueReceive+0x6e>
 8007424:	687b      	ldr	r3, [r7, #4]
 8007426:	2b00      	cmp	r3, #0
 8007428:	d101      	bne.n	800742e <xQueueReceive+0x72>
 800742a:	2301      	movs	r3, #1
 800742c:	e000      	b.n	8007430 <xQueueReceive+0x74>
 800742e:	2300      	movs	r3, #0
 8007430:	2b00      	cmp	r3, #0
 8007432:	d10a      	bne.n	800744a <xQueueReceive+0x8e>
	__asm volatile
 8007434:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007438:	f383 8811 	msr	BASEPRI, r3
 800743c:	f3bf 8f6f 	isb	sy
 8007440:	f3bf 8f4f 	dsb	sy
 8007444:	61bb      	str	r3, [r7, #24]
}
 8007446:	bf00      	nop
 8007448:	e7fe      	b.n	8007448 <xQueueReceive+0x8c>
	/*lint -save -e904  This function relaxes the coding standard somewhat to
	allow return statements within the function itself.  This is done in the
	interest of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 800744a:	f001 feab 	bl	80091a4 <vPortEnterCritical>
		{
			const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 800744e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007450:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007452:	627b      	str	r3, [r7, #36]	; 0x24

			/* Is there data in the queue now?  To be running the calling task
			must be the highest priority task wanting to access the queue. */
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 8007454:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007456:	2b00      	cmp	r3, #0
 8007458:	d01f      	beq.n	800749a <xQueueReceive+0xde>
			{
				/* Data available, remove one item. */
				prvCopyDataFromQueue( pxQueue, pvBuffer );
 800745a:	68b9      	ldr	r1, [r7, #8]
 800745c:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800745e:	f000 f8f7 	bl	8007650 <prvCopyDataFromQueue>
				traceQUEUE_RECEIVE( pxQueue );
				pxQueue->uxMessagesWaiting = uxMessagesWaiting - ( UBaseType_t ) 1;
 8007462:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007464:	1e5a      	subs	r2, r3, #1
 8007466:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007468:	639a      	str	r2, [r3, #56]	; 0x38

				/* There is now space in the queue, were any tasks waiting to
				post to the queue?  If so, unblock the highest priority waiting
				task. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 800746a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800746c:	691b      	ldr	r3, [r3, #16]
 800746e:	2b00      	cmp	r3, #0
 8007470:	d00f      	beq.n	8007492 <xQueueReceive+0xd6>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8007472:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007474:	3310      	adds	r3, #16
 8007476:	4618      	mov	r0, r3
 8007478:	f000 ff7a 	bl	8008370 <xTaskRemoveFromEventList>
 800747c:	4603      	mov	r3, r0
 800747e:	2b00      	cmp	r3, #0
 8007480:	d007      	beq.n	8007492 <xQueueReceive+0xd6>
					{
						queueYIELD_IF_USING_PREEMPTION();
 8007482:	4b3d      	ldr	r3, [pc, #244]	; (8007578 <xQueueReceive+0x1bc>)
 8007484:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8007488:	601a      	str	r2, [r3, #0]
 800748a:	f3bf 8f4f 	dsb	sy
 800748e:	f3bf 8f6f 	isb	sy
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				taskEXIT_CRITICAL();
 8007492:	f001 feb7 	bl	8009204 <vPortExitCritical>
				return pdPASS;
 8007496:	2301      	movs	r3, #1
 8007498:	e069      	b.n	800756e <xQueueReceive+0x1b2>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 800749a:	687b      	ldr	r3, [r7, #4]
 800749c:	2b00      	cmp	r3, #0
 800749e:	d103      	bne.n	80074a8 <xQueueReceive+0xec>
				{
					/* The queue was empty and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 80074a0:	f001 feb0 	bl	8009204 <vPortExitCritical>
					traceQUEUE_RECEIVE_FAILED( pxQueue );
					return errQUEUE_EMPTY;
 80074a4:	2300      	movs	r3, #0
 80074a6:	e062      	b.n	800756e <xQueueReceive+0x1b2>
				}
				else if( xEntryTimeSet == pdFALSE )
 80074a8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80074aa:	2b00      	cmp	r3, #0
 80074ac:	d106      	bne.n	80074bc <xQueueReceive+0x100>
				{
					/* The queue was empty and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 80074ae:	f107 0310 	add.w	r3, r7, #16
 80074b2:	4618      	mov	r0, r3
 80074b4:	f000 ffc0 	bl	8008438 <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 80074b8:	2301      	movs	r3, #1
 80074ba:	62fb      	str	r3, [r7, #44]	; 0x2c
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 80074bc:	f001 fea2 	bl	8009204 <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 80074c0:	f000 fd0e 	bl	8007ee0 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 80074c4:	f001 fe6e 	bl	80091a4 <vPortEnterCritical>
 80074c8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80074ca:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 80074ce:	b25b      	sxtb	r3, r3
 80074d0:	f1b3 3fff 	cmp.w	r3, #4294967295
 80074d4:	d103      	bne.n	80074de <xQueueReceive+0x122>
 80074d6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80074d8:	2200      	movs	r2, #0
 80074da:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 80074de:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80074e0:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 80074e4:	b25b      	sxtb	r3, r3
 80074e6:	f1b3 3fff 	cmp.w	r3, #4294967295
 80074ea:	d103      	bne.n	80074f4 <xQueueReceive+0x138>
 80074ec:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80074ee:	2200      	movs	r2, #0
 80074f0:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 80074f4:	f001 fe86 	bl	8009204 <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 80074f8:	1d3a      	adds	r2, r7, #4
 80074fa:	f107 0310 	add.w	r3, r7, #16
 80074fe:	4611      	mov	r1, r2
 8007500:	4618      	mov	r0, r3
 8007502:	f000 ffaf 	bl	8008464 <xTaskCheckForTimeOut>
 8007506:	4603      	mov	r3, r0
 8007508:	2b00      	cmp	r3, #0
 800750a:	d123      	bne.n	8007554 <xQueueReceive+0x198>
		{
			/* The timeout has not expired.  If the queue is still empty place
			the task on the list of tasks waiting to receive from the queue. */
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 800750c:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800750e:	f000 f917 	bl	8007740 <prvIsQueueEmpty>
 8007512:	4603      	mov	r3, r0
 8007514:	2b00      	cmp	r3, #0
 8007516:	d017      	beq.n	8007548 <xQueueReceive+0x18c>
			{
				traceBLOCKING_ON_QUEUE_RECEIVE( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait );
 8007518:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800751a:	3324      	adds	r3, #36	; 0x24
 800751c:	687a      	ldr	r2, [r7, #4]
 800751e:	4611      	mov	r1, r2
 8007520:	4618      	mov	r0, r3
 8007522:	f000 fed5 	bl	80082d0 <vTaskPlaceOnEventList>
				prvUnlockQueue( pxQueue );
 8007526:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8007528:	f000 f8b8 	bl	800769c <prvUnlockQueue>
				if( xTaskResumeAll() == pdFALSE )
 800752c:	f000 fce6 	bl	8007efc <xTaskResumeAll>
 8007530:	4603      	mov	r3, r0
 8007532:	2b00      	cmp	r3, #0
 8007534:	d189      	bne.n	800744a <xQueueReceive+0x8e>
				{
					portYIELD_WITHIN_API();
 8007536:	4b10      	ldr	r3, [pc, #64]	; (8007578 <xQueueReceive+0x1bc>)
 8007538:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800753c:	601a      	str	r2, [r3, #0]
 800753e:	f3bf 8f4f 	dsb	sy
 8007542:	f3bf 8f6f 	isb	sy
 8007546:	e780      	b.n	800744a <xQueueReceive+0x8e>
			}
			else
			{
				/* The queue contains data again.  Loop back to try and read the
				data. */
				prvUnlockQueue( pxQueue );
 8007548:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800754a:	f000 f8a7 	bl	800769c <prvUnlockQueue>
				( void ) xTaskResumeAll();
 800754e:	f000 fcd5 	bl	8007efc <xTaskResumeAll>
 8007552:	e77a      	b.n	800744a <xQueueReceive+0x8e>
		}
		else
		{
			/* Timed out.  If there is no data in the queue exit, otherwise loop
			back and attempt to read the data. */
			prvUnlockQueue( pxQueue );
 8007554:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8007556:	f000 f8a1 	bl	800769c <prvUnlockQueue>
			( void ) xTaskResumeAll();
 800755a:	f000 fccf 	bl	8007efc <xTaskResumeAll>

			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 800755e:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8007560:	f000 f8ee 	bl	8007740 <prvIsQueueEmpty>
 8007564:	4603      	mov	r3, r0
 8007566:	2b00      	cmp	r3, #0
 8007568:	f43f af6f 	beq.w	800744a <xQueueReceive+0x8e>
			{
				traceQUEUE_RECEIVE_FAILED( pxQueue );
				return errQUEUE_EMPTY;
 800756c:	2300      	movs	r3, #0
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	} /*lint -restore */
}
 800756e:	4618      	mov	r0, r3
 8007570:	3730      	adds	r7, #48	; 0x30
 8007572:	46bd      	mov	sp, r7
 8007574:	bd80      	pop	{r7, pc}
 8007576:	bf00      	nop
 8007578:	e000ed04 	.word	0xe000ed04

0800757c <prvCopyDataToQueue>:

#endif /* configUSE_MUTEXES */
/*-----------------------------------------------------------*/

static BaseType_t prvCopyDataToQueue( Queue_t * const pxQueue, const void *pvItemToQueue, const BaseType_t xPosition )
{
 800757c:	b580      	push	{r7, lr}
 800757e:	b086      	sub	sp, #24
 8007580:	af00      	add	r7, sp, #0
 8007582:	60f8      	str	r0, [r7, #12]
 8007584:	60b9      	str	r1, [r7, #8]
 8007586:	607a      	str	r2, [r7, #4]
BaseType_t xReturn = pdFALSE;
 8007588:	2300      	movs	r3, #0
 800758a:	617b      	str	r3, [r7, #20]
UBaseType_t uxMessagesWaiting;

	/* This function is called from a critical section. */

	uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 800758c:	68fb      	ldr	r3, [r7, #12]
 800758e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007590:	613b      	str	r3, [r7, #16]

	if( pxQueue->uxItemSize == ( UBaseType_t ) 0 )
 8007592:	68fb      	ldr	r3, [r7, #12]
 8007594:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007596:	2b00      	cmp	r3, #0
 8007598:	d10d      	bne.n	80075b6 <prvCopyDataToQueue+0x3a>
	{
		#if ( configUSE_MUTEXES == 1 )
		{
			if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 800759a:	68fb      	ldr	r3, [r7, #12]
 800759c:	681b      	ldr	r3, [r3, #0]
 800759e:	2b00      	cmp	r3, #0
 80075a0:	d14d      	bne.n	800763e <prvCopyDataToQueue+0xc2>
			{
				/* The mutex is no longer being held. */
				xReturn = xTaskPriorityDisinherit( pxQueue->u.xSemaphore.xMutexHolder );
 80075a2:	68fb      	ldr	r3, [r7, #12]
 80075a4:	689b      	ldr	r3, [r3, #8]
 80075a6:	4618      	mov	r0, r3
 80075a8:	f001 f8c0 	bl	800872c <xTaskPriorityDisinherit>
 80075ac:	6178      	str	r0, [r7, #20]
				pxQueue->u.xSemaphore.xMutexHolder = NULL;
 80075ae:	68fb      	ldr	r3, [r7, #12]
 80075b0:	2200      	movs	r2, #0
 80075b2:	609a      	str	r2, [r3, #8]
 80075b4:	e043      	b.n	800763e <prvCopyDataToQueue+0xc2>
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configUSE_MUTEXES */
	}
	else if( xPosition == queueSEND_TO_BACK )
 80075b6:	687b      	ldr	r3, [r7, #4]
 80075b8:	2b00      	cmp	r3, #0
 80075ba:	d119      	bne.n	80075f0 <prvCopyDataToQueue+0x74>
	{
		( void ) memcpy( ( void * ) pxQueue->pcWriteTo, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports, plus previous logic ensures a null pointer can only be passed to memcpy() if the copy size is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 80075bc:	68fb      	ldr	r3, [r7, #12]
 80075be:	6858      	ldr	r0, [r3, #4]
 80075c0:	68fb      	ldr	r3, [r7, #12]
 80075c2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80075c4:	461a      	mov	r2, r3
 80075c6:	68b9      	ldr	r1, [r7, #8]
 80075c8:	f002 f9c6 	bl	8009958 <memcpy>
		pxQueue->pcWriteTo += pxQueue->uxItemSize; /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 80075cc:	68fb      	ldr	r3, [r7, #12]
 80075ce:	685a      	ldr	r2, [r3, #4]
 80075d0:	68fb      	ldr	r3, [r7, #12]
 80075d2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80075d4:	441a      	add	r2, r3
 80075d6:	68fb      	ldr	r3, [r7, #12]
 80075d8:	605a      	str	r2, [r3, #4]
		if( pxQueue->pcWriteTo >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 80075da:	68fb      	ldr	r3, [r7, #12]
 80075dc:	685a      	ldr	r2, [r3, #4]
 80075de:	68fb      	ldr	r3, [r7, #12]
 80075e0:	689b      	ldr	r3, [r3, #8]
 80075e2:	429a      	cmp	r2, r3
 80075e4:	d32b      	bcc.n	800763e <prvCopyDataToQueue+0xc2>
		{
			pxQueue->pcWriteTo = pxQueue->pcHead;
 80075e6:	68fb      	ldr	r3, [r7, #12]
 80075e8:	681a      	ldr	r2, [r3, #0]
 80075ea:	68fb      	ldr	r3, [r7, #12]
 80075ec:	605a      	str	r2, [r3, #4]
 80075ee:	e026      	b.n	800763e <prvCopyDataToQueue+0xc2>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	else
	{
		( void ) memcpy( ( void * ) pxQueue->u.xQueue.pcReadFrom, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e9087 !e418 MISRA exception as the casts are only redundant for some ports.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes.  Assert checks null pointer only used when length is 0. */
 80075f0:	68fb      	ldr	r3, [r7, #12]
 80075f2:	68d8      	ldr	r0, [r3, #12]
 80075f4:	68fb      	ldr	r3, [r7, #12]
 80075f6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80075f8:	461a      	mov	r2, r3
 80075fa:	68b9      	ldr	r1, [r7, #8]
 80075fc:	f002 f9ac 	bl	8009958 <memcpy>
		pxQueue->u.xQueue.pcReadFrom -= pxQueue->uxItemSize;
 8007600:	68fb      	ldr	r3, [r7, #12]
 8007602:	68da      	ldr	r2, [r3, #12]
 8007604:	68fb      	ldr	r3, [r7, #12]
 8007606:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007608:	425b      	negs	r3, r3
 800760a:	441a      	add	r2, r3
 800760c:	68fb      	ldr	r3, [r7, #12]
 800760e:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.xQueue.pcReadFrom < pxQueue->pcHead ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 8007610:	68fb      	ldr	r3, [r7, #12]
 8007612:	68da      	ldr	r2, [r3, #12]
 8007614:	68fb      	ldr	r3, [r7, #12]
 8007616:	681b      	ldr	r3, [r3, #0]
 8007618:	429a      	cmp	r2, r3
 800761a:	d207      	bcs.n	800762c <prvCopyDataToQueue+0xb0>
		{
			pxQueue->u.xQueue.pcReadFrom = ( pxQueue->u.xQueue.pcTail - pxQueue->uxItemSize );
 800761c:	68fb      	ldr	r3, [r7, #12]
 800761e:	689a      	ldr	r2, [r3, #8]
 8007620:	68fb      	ldr	r3, [r7, #12]
 8007622:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007624:	425b      	negs	r3, r3
 8007626:	441a      	add	r2, r3
 8007628:	68fb      	ldr	r3, [r7, #12]
 800762a:	60da      	str	r2, [r3, #12]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		if( xPosition == queueOVERWRITE )
 800762c:	687b      	ldr	r3, [r7, #4]
 800762e:	2b02      	cmp	r3, #2
 8007630:	d105      	bne.n	800763e <prvCopyDataToQueue+0xc2>
		{
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 8007632:	693b      	ldr	r3, [r7, #16]
 8007634:	2b00      	cmp	r3, #0
 8007636:	d002      	beq.n	800763e <prvCopyDataToQueue+0xc2>
			{
				/* An item is not being added but overwritten, so subtract
				one from the recorded number of items in the queue so when
				one is added again below the number of recorded items remains
				correct. */
				--uxMessagesWaiting;
 8007638:	693b      	ldr	r3, [r7, #16]
 800763a:	3b01      	subs	r3, #1
 800763c:	613b      	str	r3, [r7, #16]
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	pxQueue->uxMessagesWaiting = uxMessagesWaiting + ( UBaseType_t ) 1;
 800763e:	693b      	ldr	r3, [r7, #16]
 8007640:	1c5a      	adds	r2, r3, #1
 8007642:	68fb      	ldr	r3, [r7, #12]
 8007644:	639a      	str	r2, [r3, #56]	; 0x38

	return xReturn;
 8007646:	697b      	ldr	r3, [r7, #20]
}
 8007648:	4618      	mov	r0, r3
 800764a:	3718      	adds	r7, #24
 800764c:	46bd      	mov	sp, r7
 800764e:	bd80      	pop	{r7, pc}

08007650 <prvCopyDataFromQueue>:
/*-----------------------------------------------------------*/

static void prvCopyDataFromQueue( Queue_t * const pxQueue, void * const pvBuffer )
{
 8007650:	b580      	push	{r7, lr}
 8007652:	b082      	sub	sp, #8
 8007654:	af00      	add	r7, sp, #0
 8007656:	6078      	str	r0, [r7, #4]
 8007658:	6039      	str	r1, [r7, #0]
	if( pxQueue->uxItemSize != ( UBaseType_t ) 0 )
 800765a:	687b      	ldr	r3, [r7, #4]
 800765c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800765e:	2b00      	cmp	r3, #0
 8007660:	d018      	beq.n	8007694 <prvCopyDataFromQueue+0x44>
	{
		pxQueue->u.xQueue.pcReadFrom += pxQueue->uxItemSize; /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 8007662:	687b      	ldr	r3, [r7, #4]
 8007664:	68da      	ldr	r2, [r3, #12]
 8007666:	687b      	ldr	r3, [r7, #4]
 8007668:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800766a:	441a      	add	r2, r3
 800766c:	687b      	ldr	r3, [r7, #4]
 800766e:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.xQueue.pcReadFrom >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as use of the relational operator is the cleanest solutions. */
 8007670:	687b      	ldr	r3, [r7, #4]
 8007672:	68da      	ldr	r2, [r3, #12]
 8007674:	687b      	ldr	r3, [r7, #4]
 8007676:	689b      	ldr	r3, [r3, #8]
 8007678:	429a      	cmp	r2, r3
 800767a:	d303      	bcc.n	8007684 <prvCopyDataFromQueue+0x34>
		{
			pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead;
 800767c:	687b      	ldr	r3, [r7, #4]
 800767e:	681a      	ldr	r2, [r3, #0]
 8007680:	687b      	ldr	r3, [r7, #4]
 8007682:	60da      	str	r2, [r3, #12]
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
		( void ) memcpy( ( void * ) pvBuffer, ( void * ) pxQueue->u.xQueue.pcReadFrom, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports.  Also previous logic ensures a null pointer can only be passed to memcpy() when the count is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 8007684:	687b      	ldr	r3, [r7, #4]
 8007686:	68d9      	ldr	r1, [r3, #12]
 8007688:	687b      	ldr	r3, [r7, #4]
 800768a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800768c:	461a      	mov	r2, r3
 800768e:	6838      	ldr	r0, [r7, #0]
 8007690:	f002 f962 	bl	8009958 <memcpy>
	}
}
 8007694:	bf00      	nop
 8007696:	3708      	adds	r7, #8
 8007698:	46bd      	mov	sp, r7
 800769a:	bd80      	pop	{r7, pc}

0800769c <prvUnlockQueue>:
/*-----------------------------------------------------------*/

static void prvUnlockQueue( Queue_t * const pxQueue )
{
 800769c:	b580      	push	{r7, lr}
 800769e:	b084      	sub	sp, #16
 80076a0:	af00      	add	r7, sp, #0
 80076a2:	6078      	str	r0, [r7, #4]

	/* The lock counts contains the number of extra data items placed or
	removed from the queue while the queue was locked.  When a queue is
	locked items can be added or removed, but the event lists cannot be
	updated. */
	taskENTER_CRITICAL();
 80076a4:	f001 fd7e 	bl	80091a4 <vPortEnterCritical>
	{
		int8_t cTxLock = pxQueue->cTxLock;
 80076a8:	687b      	ldr	r3, [r7, #4]
 80076aa:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 80076ae:	73fb      	strb	r3, [r7, #15]

		/* See if data was added to the queue while it was locked. */
		while( cTxLock > queueLOCKED_UNMODIFIED )
 80076b0:	e011      	b.n	80076d6 <prvUnlockQueue+0x3a>
			}
			#else /* configUSE_QUEUE_SETS */
			{
				/* Tasks that are removed from the event list will get added to
				the pending ready list as the scheduler is still suspended. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 80076b2:	687b      	ldr	r3, [r7, #4]
 80076b4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80076b6:	2b00      	cmp	r3, #0
 80076b8:	d012      	beq.n	80076e0 <prvUnlockQueue+0x44>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 80076ba:	687b      	ldr	r3, [r7, #4]
 80076bc:	3324      	adds	r3, #36	; 0x24
 80076be:	4618      	mov	r0, r3
 80076c0:	f000 fe56 	bl	8008370 <xTaskRemoveFromEventList>
 80076c4:	4603      	mov	r3, r0
 80076c6:	2b00      	cmp	r3, #0
 80076c8:	d001      	beq.n	80076ce <prvUnlockQueue+0x32>
					{
						/* The task waiting has a higher priority so record that
						a context switch is required. */
						vTaskMissedYield();
 80076ca:	f000 ff2d 	bl	8008528 <vTaskMissedYield>
					break;
				}
			}
			#endif /* configUSE_QUEUE_SETS */

			--cTxLock;
 80076ce:	7bfb      	ldrb	r3, [r7, #15]
 80076d0:	3b01      	subs	r3, #1
 80076d2:	b2db      	uxtb	r3, r3
 80076d4:	73fb      	strb	r3, [r7, #15]
		while( cTxLock > queueLOCKED_UNMODIFIED )
 80076d6:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80076da:	2b00      	cmp	r3, #0
 80076dc:	dce9      	bgt.n	80076b2 <prvUnlockQueue+0x16>
 80076de:	e000      	b.n	80076e2 <prvUnlockQueue+0x46>
					break;
 80076e0:	bf00      	nop
		}

		pxQueue->cTxLock = queueUNLOCKED;
 80076e2:	687b      	ldr	r3, [r7, #4]
 80076e4:	22ff      	movs	r2, #255	; 0xff
 80076e6:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
	}
	taskEXIT_CRITICAL();
 80076ea:	f001 fd8b 	bl	8009204 <vPortExitCritical>

	/* Do the same for the Rx lock. */
	taskENTER_CRITICAL();
 80076ee:	f001 fd59 	bl	80091a4 <vPortEnterCritical>
	{
		int8_t cRxLock = pxQueue->cRxLock;
 80076f2:	687b      	ldr	r3, [r7, #4]
 80076f4:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 80076f8:	73bb      	strb	r3, [r7, #14]

		while( cRxLock > queueLOCKED_UNMODIFIED )
 80076fa:	e011      	b.n	8007720 <prvUnlockQueue+0x84>
		{
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 80076fc:	687b      	ldr	r3, [r7, #4]
 80076fe:	691b      	ldr	r3, [r3, #16]
 8007700:	2b00      	cmp	r3, #0
 8007702:	d012      	beq.n	800772a <prvUnlockQueue+0x8e>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8007704:	687b      	ldr	r3, [r7, #4]
 8007706:	3310      	adds	r3, #16
 8007708:	4618      	mov	r0, r3
 800770a:	f000 fe31 	bl	8008370 <xTaskRemoveFromEventList>
 800770e:	4603      	mov	r3, r0
 8007710:	2b00      	cmp	r3, #0
 8007712:	d001      	beq.n	8007718 <prvUnlockQueue+0x7c>
				{
					vTaskMissedYield();
 8007714:	f000 ff08 	bl	8008528 <vTaskMissedYield>
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				--cRxLock;
 8007718:	7bbb      	ldrb	r3, [r7, #14]
 800771a:	3b01      	subs	r3, #1
 800771c:	b2db      	uxtb	r3, r3
 800771e:	73bb      	strb	r3, [r7, #14]
		while( cRxLock > queueLOCKED_UNMODIFIED )
 8007720:	f997 300e 	ldrsb.w	r3, [r7, #14]
 8007724:	2b00      	cmp	r3, #0
 8007726:	dce9      	bgt.n	80076fc <prvUnlockQueue+0x60>
 8007728:	e000      	b.n	800772c <prvUnlockQueue+0x90>
			}
			else
			{
				break;
 800772a:	bf00      	nop
			}
		}

		pxQueue->cRxLock = queueUNLOCKED;
 800772c:	687b      	ldr	r3, [r7, #4]
 800772e:	22ff      	movs	r2, #255	; 0xff
 8007730:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
	}
	taskEXIT_CRITICAL();
 8007734:	f001 fd66 	bl	8009204 <vPortExitCritical>
}
 8007738:	bf00      	nop
 800773a:	3710      	adds	r7, #16
 800773c:	46bd      	mov	sp, r7
 800773e:	bd80      	pop	{r7, pc}

08007740 <prvIsQueueEmpty>:
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueEmpty( const Queue_t *pxQueue )
{
 8007740:	b580      	push	{r7, lr}
 8007742:	b084      	sub	sp, #16
 8007744:	af00      	add	r7, sp, #0
 8007746:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 8007748:	f001 fd2c 	bl	80091a4 <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t )  0 )
 800774c:	687b      	ldr	r3, [r7, #4]
 800774e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007750:	2b00      	cmp	r3, #0
 8007752:	d102      	bne.n	800775a <prvIsQueueEmpty+0x1a>
		{
			xReturn = pdTRUE;
 8007754:	2301      	movs	r3, #1
 8007756:	60fb      	str	r3, [r7, #12]
 8007758:	e001      	b.n	800775e <prvIsQueueEmpty+0x1e>
		}
		else
		{
			xReturn = pdFALSE;
 800775a:	2300      	movs	r3, #0
 800775c:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 800775e:	f001 fd51 	bl	8009204 <vPortExitCritical>

	return xReturn;
 8007762:	68fb      	ldr	r3, [r7, #12]
}
 8007764:	4618      	mov	r0, r3
 8007766:	3710      	adds	r7, #16
 8007768:	46bd      	mov	sp, r7
 800776a:	bd80      	pop	{r7, pc}

0800776c <prvIsQueueFull>:
	return xReturn;
} /*lint !e818 xQueue could not be pointer to const because it is a typedef. */
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueFull( const Queue_t *pxQueue )
{
 800776c:	b580      	push	{r7, lr}
 800776e:	b084      	sub	sp, #16
 8007770:	af00      	add	r7, sp, #0
 8007772:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 8007774:	f001 fd16 	bl	80091a4 <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == pxQueue->uxLength )
 8007778:	687b      	ldr	r3, [r7, #4]
 800777a:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800777c:	687b      	ldr	r3, [r7, #4]
 800777e:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8007780:	429a      	cmp	r2, r3
 8007782:	d102      	bne.n	800778a <prvIsQueueFull+0x1e>
		{
			xReturn = pdTRUE;
 8007784:	2301      	movs	r3, #1
 8007786:	60fb      	str	r3, [r7, #12]
 8007788:	e001      	b.n	800778e <prvIsQueueFull+0x22>
		}
		else
		{
			xReturn = pdFALSE;
 800778a:	2300      	movs	r3, #0
 800778c:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 800778e:	f001 fd39 	bl	8009204 <vPortExitCritical>

	return xReturn;
 8007792:	68fb      	ldr	r3, [r7, #12]
}
 8007794:	4618      	mov	r0, r3
 8007796:	3710      	adds	r7, #16
 8007798:	46bd      	mov	sp, r7
 800779a:	bd80      	pop	{r7, pc}

0800779c <vQueueAddToRegistry>:
/*-----------------------------------------------------------*/

#if ( configQUEUE_REGISTRY_SIZE > 0 )

	void vQueueAddToRegistry( QueueHandle_t xQueue, const char *pcQueueName ) /*lint !e971 Unqualified char types are allowed for strings and single characters only. */
	{
 800779c:	b480      	push	{r7}
 800779e:	b085      	sub	sp, #20
 80077a0:	af00      	add	r7, sp, #0
 80077a2:	6078      	str	r0, [r7, #4]
 80077a4:	6039      	str	r1, [r7, #0]
	UBaseType_t ux;

		/* See if there is an empty space in the registry.  A NULL name denotes
		a free slot. */
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 80077a6:	2300      	movs	r3, #0
 80077a8:	60fb      	str	r3, [r7, #12]
 80077aa:	e014      	b.n	80077d6 <vQueueAddToRegistry+0x3a>
		{
			if( xQueueRegistry[ ux ].pcQueueName == NULL )
 80077ac:	4a0f      	ldr	r2, [pc, #60]	; (80077ec <vQueueAddToRegistry+0x50>)
 80077ae:	68fb      	ldr	r3, [r7, #12]
 80077b0:	f852 3033 	ldr.w	r3, [r2, r3, lsl #3]
 80077b4:	2b00      	cmp	r3, #0
 80077b6:	d10b      	bne.n	80077d0 <vQueueAddToRegistry+0x34>
			{
				/* Store the information on this queue. */
				xQueueRegistry[ ux ].pcQueueName = pcQueueName;
 80077b8:	490c      	ldr	r1, [pc, #48]	; (80077ec <vQueueAddToRegistry+0x50>)
 80077ba:	68fb      	ldr	r3, [r7, #12]
 80077bc:	683a      	ldr	r2, [r7, #0]
 80077be:	f841 2033 	str.w	r2, [r1, r3, lsl #3]
				xQueueRegistry[ ux ].xHandle = xQueue;
 80077c2:	4a0a      	ldr	r2, [pc, #40]	; (80077ec <vQueueAddToRegistry+0x50>)
 80077c4:	68fb      	ldr	r3, [r7, #12]
 80077c6:	00db      	lsls	r3, r3, #3
 80077c8:	4413      	add	r3, r2
 80077ca:	687a      	ldr	r2, [r7, #4]
 80077cc:	605a      	str	r2, [r3, #4]

				traceQUEUE_REGISTRY_ADD( xQueue, pcQueueName );
				break;
 80077ce:	e006      	b.n	80077de <vQueueAddToRegistry+0x42>
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 80077d0:	68fb      	ldr	r3, [r7, #12]
 80077d2:	3301      	adds	r3, #1
 80077d4:	60fb      	str	r3, [r7, #12]
 80077d6:	68fb      	ldr	r3, [r7, #12]
 80077d8:	2b07      	cmp	r3, #7
 80077da:	d9e7      	bls.n	80077ac <vQueueAddToRegistry+0x10>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	}
 80077dc:	bf00      	nop
 80077de:	bf00      	nop
 80077e0:	3714      	adds	r7, #20
 80077e2:	46bd      	mov	sp, r7
 80077e4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80077e8:	4770      	bx	lr
 80077ea:	bf00      	nop
 80077ec:	20000a44 	.word	0x20000a44

080077f0 <vQueueWaitForMessageRestricted>:
/*-----------------------------------------------------------*/

#if ( configUSE_TIMERS == 1 )

	void vQueueWaitForMessageRestricted( QueueHandle_t xQueue, TickType_t xTicksToWait, const BaseType_t xWaitIndefinitely )
	{
 80077f0:	b580      	push	{r7, lr}
 80077f2:	b086      	sub	sp, #24
 80077f4:	af00      	add	r7, sp, #0
 80077f6:	60f8      	str	r0, [r7, #12]
 80077f8:	60b9      	str	r1, [r7, #8]
 80077fa:	607a      	str	r2, [r7, #4]
	Queue_t * const pxQueue = xQueue;
 80077fc:	68fb      	ldr	r3, [r7, #12]
 80077fe:	617b      	str	r3, [r7, #20]
		will not actually cause the task to block, just place it on a blocked
		list.  It will not block until the scheduler is unlocked - at which
		time a yield will be performed.  If an item is added to the queue while
		the queue is locked, and the calling task blocks on the queue, then the
		calling task will be immediately unblocked when the queue is unlocked. */
		prvLockQueue( pxQueue );
 8007800:	f001 fcd0 	bl	80091a4 <vPortEnterCritical>
 8007804:	697b      	ldr	r3, [r7, #20]
 8007806:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 800780a:	b25b      	sxtb	r3, r3
 800780c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8007810:	d103      	bne.n	800781a <vQueueWaitForMessageRestricted+0x2a>
 8007812:	697b      	ldr	r3, [r7, #20]
 8007814:	2200      	movs	r2, #0
 8007816:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 800781a:	697b      	ldr	r3, [r7, #20]
 800781c:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8007820:	b25b      	sxtb	r3, r3
 8007822:	f1b3 3fff 	cmp.w	r3, #4294967295
 8007826:	d103      	bne.n	8007830 <vQueueWaitForMessageRestricted+0x40>
 8007828:	697b      	ldr	r3, [r7, #20]
 800782a:	2200      	movs	r2, #0
 800782c:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8007830:	f001 fce8 	bl	8009204 <vPortExitCritical>
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t ) 0U )
 8007834:	697b      	ldr	r3, [r7, #20]
 8007836:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007838:	2b00      	cmp	r3, #0
 800783a:	d106      	bne.n	800784a <vQueueWaitForMessageRestricted+0x5a>
		{
			/* There is nothing in the queue, block for the specified period. */
			vTaskPlaceOnEventListRestricted( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait, xWaitIndefinitely );
 800783c:	697b      	ldr	r3, [r7, #20]
 800783e:	3324      	adds	r3, #36	; 0x24
 8007840:	687a      	ldr	r2, [r7, #4]
 8007842:	68b9      	ldr	r1, [r7, #8]
 8007844:	4618      	mov	r0, r3
 8007846:	f000 fd67 	bl	8008318 <vTaskPlaceOnEventListRestricted>
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
		prvUnlockQueue( pxQueue );
 800784a:	6978      	ldr	r0, [r7, #20]
 800784c:	f7ff ff26 	bl	800769c <prvUnlockQueue>
	}
 8007850:	bf00      	nop
 8007852:	3718      	adds	r7, #24
 8007854:	46bd      	mov	sp, r7
 8007856:	bd80      	pop	{r7, pc}

08007858 <xTaskCreateStatic>:
									const uint32_t ulStackDepth,
									void * const pvParameters,
									UBaseType_t uxPriority,
									StackType_t * const puxStackBuffer,
									StaticTask_t * const pxTaskBuffer )
	{
 8007858:	b580      	push	{r7, lr}
 800785a:	b08e      	sub	sp, #56	; 0x38
 800785c:	af04      	add	r7, sp, #16
 800785e:	60f8      	str	r0, [r7, #12]
 8007860:	60b9      	str	r1, [r7, #8]
 8007862:	607a      	str	r2, [r7, #4]
 8007864:	603b      	str	r3, [r7, #0]
	TCB_t *pxNewTCB;
	TaskHandle_t xReturn;

		configASSERT( puxStackBuffer != NULL );
 8007866:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8007868:	2b00      	cmp	r3, #0
 800786a:	d10a      	bne.n	8007882 <xTaskCreateStatic+0x2a>
	__asm volatile
 800786c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007870:	f383 8811 	msr	BASEPRI, r3
 8007874:	f3bf 8f6f 	isb	sy
 8007878:	f3bf 8f4f 	dsb	sy
 800787c:	623b      	str	r3, [r7, #32]
}
 800787e:	bf00      	nop
 8007880:	e7fe      	b.n	8007880 <xTaskCreateStatic+0x28>
		configASSERT( pxTaskBuffer != NULL );
 8007882:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007884:	2b00      	cmp	r3, #0
 8007886:	d10a      	bne.n	800789e <xTaskCreateStatic+0x46>
	__asm volatile
 8007888:	f04f 0350 	mov.w	r3, #80	; 0x50
 800788c:	f383 8811 	msr	BASEPRI, r3
 8007890:	f3bf 8f6f 	isb	sy
 8007894:	f3bf 8f4f 	dsb	sy
 8007898:	61fb      	str	r3, [r7, #28]
}
 800789a:	bf00      	nop
 800789c:	e7fe      	b.n	800789c <xTaskCreateStatic+0x44>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticTask_t equals the size of the real task
			structure. */
			volatile size_t xSize = sizeof( StaticTask_t );
 800789e:	2360      	movs	r3, #96	; 0x60
 80078a0:	613b      	str	r3, [r7, #16]
			configASSERT( xSize == sizeof( TCB_t ) );
 80078a2:	693b      	ldr	r3, [r7, #16]
 80078a4:	2b60      	cmp	r3, #96	; 0x60
 80078a6:	d00a      	beq.n	80078be <xTaskCreateStatic+0x66>
	__asm volatile
 80078a8:	f04f 0350 	mov.w	r3, #80	; 0x50
 80078ac:	f383 8811 	msr	BASEPRI, r3
 80078b0:	f3bf 8f6f 	isb	sy
 80078b4:	f3bf 8f4f 	dsb	sy
 80078b8:	61bb      	str	r3, [r7, #24]
}
 80078ba:	bf00      	nop
 80078bc:	e7fe      	b.n	80078bc <xTaskCreateStatic+0x64>
			( void ) xSize; /* Prevent lint warning when configASSERT() is not used. */
 80078be:	693b      	ldr	r3, [r7, #16]
		}
		#endif /* configASSERT_DEFINED */


		if( ( pxTaskBuffer != NULL ) && ( puxStackBuffer != NULL ) )
 80078c0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80078c2:	2b00      	cmp	r3, #0
 80078c4:	d01e      	beq.n	8007904 <xTaskCreateStatic+0xac>
 80078c6:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80078c8:	2b00      	cmp	r3, #0
 80078ca:	d01b      	beq.n	8007904 <xTaskCreateStatic+0xac>
		{
			/* The memory used for the task's TCB and stack are passed into this
			function - use them. */
			pxNewTCB = ( TCB_t * ) pxTaskBuffer; /*lint !e740 !e9087 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 80078cc:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80078ce:	627b      	str	r3, [r7, #36]	; 0x24
			pxNewTCB->pxStack = ( StackType_t * ) puxStackBuffer;
 80078d0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80078d2:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 80078d4:	631a      	str	r2, [r3, #48]	; 0x30

			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 !e9029 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created statically in case the task is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskSTATICALLY_ALLOCATED_STACK_AND_TCB;
 80078d6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80078d8:	2202      	movs	r2, #2
 80078da:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d
			}
			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

			prvInitialiseNewTask( pxTaskCode, pcName, ulStackDepth, pvParameters, uxPriority, &xReturn, pxNewTCB, NULL );
 80078de:	2300      	movs	r3, #0
 80078e0:	9303      	str	r3, [sp, #12]
 80078e2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80078e4:	9302      	str	r3, [sp, #8]
 80078e6:	f107 0314 	add.w	r3, r7, #20
 80078ea:	9301      	str	r3, [sp, #4]
 80078ec:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80078ee:	9300      	str	r3, [sp, #0]
 80078f0:	683b      	ldr	r3, [r7, #0]
 80078f2:	687a      	ldr	r2, [r7, #4]
 80078f4:	68b9      	ldr	r1, [r7, #8]
 80078f6:	68f8      	ldr	r0, [r7, #12]
 80078f8:	f000 f850 	bl	800799c <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 80078fc:	6a78      	ldr	r0, [r7, #36]	; 0x24
 80078fe:	f000 f8df 	bl	8007ac0 <prvAddNewTaskToReadyList>
 8007902:	e001      	b.n	8007908 <xTaskCreateStatic+0xb0>
		}
		else
		{
			xReturn = NULL;
 8007904:	2300      	movs	r3, #0
 8007906:	617b      	str	r3, [r7, #20]
		}

		return xReturn;
 8007908:	697b      	ldr	r3, [r7, #20]
	}
 800790a:	4618      	mov	r0, r3
 800790c:	3728      	adds	r7, #40	; 0x28
 800790e:	46bd      	mov	sp, r7
 8007910:	bd80      	pop	{r7, pc}

08007912 <xTaskCreate>:
							const char * const pcName,		/*lint !e971 Unqualified char types are allowed for strings and single characters only. */
							const configSTACK_DEPTH_TYPE usStackDepth,
							void * const pvParameters,
							UBaseType_t uxPriority,
							TaskHandle_t * const pxCreatedTask )
	{
 8007912:	b580      	push	{r7, lr}
 8007914:	b08c      	sub	sp, #48	; 0x30
 8007916:	af04      	add	r7, sp, #16
 8007918:	60f8      	str	r0, [r7, #12]
 800791a:	60b9      	str	r1, [r7, #8]
 800791c:	603b      	str	r3, [r7, #0]
 800791e:	4613      	mov	r3, r2
 8007920:	80fb      	strh	r3, [r7, #6]
		#else /* portSTACK_GROWTH */
		{
		StackType_t *pxStack;

			/* Allocate space for the stack used by the task being created. */
			pxStack = pvPortMalloc( ( ( ( size_t ) usStackDepth ) * sizeof( StackType_t ) ) ); /*lint !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack and this allocation is the stack. */
 8007922:	88fb      	ldrh	r3, [r7, #6]
 8007924:	009b      	lsls	r3, r3, #2
 8007926:	4618      	mov	r0, r3
 8007928:	f001 fd5e 	bl	80093e8 <pvPortMalloc>
 800792c:	6178      	str	r0, [r7, #20]

			if( pxStack != NULL )
 800792e:	697b      	ldr	r3, [r7, #20]
 8007930:	2b00      	cmp	r3, #0
 8007932:	d00e      	beq.n	8007952 <xTaskCreate+0x40>
			{
				/* Allocate space for the TCB. */
				pxNewTCB = ( TCB_t * ) pvPortMalloc( sizeof( TCB_t ) ); /*lint !e9087 !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack, and the first member of TCB_t is always a pointer to the task's stack. */
 8007934:	2060      	movs	r0, #96	; 0x60
 8007936:	f001 fd57 	bl	80093e8 <pvPortMalloc>
 800793a:	61f8      	str	r0, [r7, #28]

				if( pxNewTCB != NULL )
 800793c:	69fb      	ldr	r3, [r7, #28]
 800793e:	2b00      	cmp	r3, #0
 8007940:	d003      	beq.n	800794a <xTaskCreate+0x38>
				{
					/* Store the stack location in the TCB. */
					pxNewTCB->pxStack = pxStack;
 8007942:	69fb      	ldr	r3, [r7, #28]
 8007944:	697a      	ldr	r2, [r7, #20]
 8007946:	631a      	str	r2, [r3, #48]	; 0x30
 8007948:	e005      	b.n	8007956 <xTaskCreate+0x44>
				}
				else
				{
					/* The stack cannot be used as the TCB was not created.  Free
					it again. */
					vPortFree( pxStack );
 800794a:	6978      	ldr	r0, [r7, #20]
 800794c:	f001 fe1c 	bl	8009588 <vPortFree>
 8007950:	e001      	b.n	8007956 <xTaskCreate+0x44>
				}
			}
			else
			{
				pxNewTCB = NULL;
 8007952:	2300      	movs	r3, #0
 8007954:	61fb      	str	r3, [r7, #28]
			}
		}
		#endif /* portSTACK_GROWTH */

		if( pxNewTCB != NULL )
 8007956:	69fb      	ldr	r3, [r7, #28]
 8007958:	2b00      	cmp	r3, #0
 800795a:	d017      	beq.n	800798c <xTaskCreate+0x7a>
		{
			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e9029 !e731 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created dynamically in case it is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB;
 800795c:	69fb      	ldr	r3, [r7, #28]
 800795e:	2200      	movs	r2, #0
 8007960:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d
			}
			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

			prvInitialiseNewTask( pxTaskCode, pcName, ( uint32_t ) usStackDepth, pvParameters, uxPriority, pxCreatedTask, pxNewTCB, NULL );
 8007964:	88fa      	ldrh	r2, [r7, #6]
 8007966:	2300      	movs	r3, #0
 8007968:	9303      	str	r3, [sp, #12]
 800796a:	69fb      	ldr	r3, [r7, #28]
 800796c:	9302      	str	r3, [sp, #8]
 800796e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007970:	9301      	str	r3, [sp, #4]
 8007972:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007974:	9300      	str	r3, [sp, #0]
 8007976:	683b      	ldr	r3, [r7, #0]
 8007978:	68b9      	ldr	r1, [r7, #8]
 800797a:	68f8      	ldr	r0, [r7, #12]
 800797c:	f000 f80e 	bl	800799c <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 8007980:	69f8      	ldr	r0, [r7, #28]
 8007982:	f000 f89d 	bl	8007ac0 <prvAddNewTaskToReadyList>
			xReturn = pdPASS;
 8007986:	2301      	movs	r3, #1
 8007988:	61bb      	str	r3, [r7, #24]
 800798a:	e002      	b.n	8007992 <xTaskCreate+0x80>
		}
		else
		{
			xReturn = errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY;
 800798c:	f04f 33ff 	mov.w	r3, #4294967295
 8007990:	61bb      	str	r3, [r7, #24]
		}

		return xReturn;
 8007992:	69bb      	ldr	r3, [r7, #24]
	}
 8007994:	4618      	mov	r0, r3
 8007996:	3720      	adds	r7, #32
 8007998:	46bd      	mov	sp, r7
 800799a:	bd80      	pop	{r7, pc}

0800799c <prvInitialiseNewTask>:
									void * const pvParameters,
									UBaseType_t uxPriority,
									TaskHandle_t * const pxCreatedTask,
									TCB_t *pxNewTCB,
									const MemoryRegion_t * const xRegions )
{
 800799c:	b580      	push	{r7, lr}
 800799e:	b088      	sub	sp, #32
 80079a0:	af00      	add	r7, sp, #0
 80079a2:	60f8      	str	r0, [r7, #12]
 80079a4:	60b9      	str	r1, [r7, #8]
 80079a6:	607a      	str	r2, [r7, #4]
 80079a8:	603b      	str	r3, [r7, #0]

	/* Avoid dependency on memset() if it is not required. */
	#if( tskSET_NEW_STACKS_TO_KNOWN_VALUE == 1 )
	{
		/* Fill the stack with a known value to assist debugging. */
		( void ) memset( pxNewTCB->pxStack, ( int ) tskSTACK_FILL_BYTE, ( size_t ) ulStackDepth * sizeof( StackType_t ) );
 80079aa:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80079ac:	6b18      	ldr	r0, [r3, #48]	; 0x30
 80079ae:	687b      	ldr	r3, [r7, #4]
 80079b0:	009b      	lsls	r3, r3, #2
 80079b2:	461a      	mov	r2, r3
 80079b4:	21a5      	movs	r1, #165	; 0xa5
 80079b6:	f001 ffdd 	bl	8009974 <memset>
	grows from high memory to low (as per the 80x86) or vice versa.
	portSTACK_GROWTH is used to make the result positive or negative as required
	by the port. */
	#if( portSTACK_GROWTH < 0 )
	{
		pxTopOfStack = &( pxNewTCB->pxStack[ ulStackDepth - ( uint32_t ) 1 ] );
 80079ba:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80079bc:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 80079be:	687b      	ldr	r3, [r7, #4]
 80079c0:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
 80079c4:	3b01      	subs	r3, #1
 80079c6:	009b      	lsls	r3, r3, #2
 80079c8:	4413      	add	r3, r2
 80079ca:	61bb      	str	r3, [r7, #24]
		pxTopOfStack = ( StackType_t * ) ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack ) & ( ~( ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) ) ); /*lint !e923 !e9033 !e9078 MISRA exception.  Avoiding casts between pointers and integers is not practical.  Size differences accounted for using portPOINTER_SIZE_TYPE type.  Checked by assert(). */
 80079cc:	69bb      	ldr	r3, [r7, #24]
 80079ce:	f023 0307 	bic.w	r3, r3, #7
 80079d2:	61bb      	str	r3, [r7, #24]

		/* Check the alignment of the calculated top of stack is correct. */
		configASSERT( ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack & ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) == 0UL ) );
 80079d4:	69bb      	ldr	r3, [r7, #24]
 80079d6:	f003 0307 	and.w	r3, r3, #7
 80079da:	2b00      	cmp	r3, #0
 80079dc:	d00a      	beq.n	80079f4 <prvInitialiseNewTask+0x58>
	__asm volatile
 80079de:	f04f 0350 	mov.w	r3, #80	; 0x50
 80079e2:	f383 8811 	msr	BASEPRI, r3
 80079e6:	f3bf 8f6f 	isb	sy
 80079ea:	f3bf 8f4f 	dsb	sy
 80079ee:	617b      	str	r3, [r7, #20]
}
 80079f0:	bf00      	nop
 80079f2:	e7fe      	b.n	80079f2 <prvInitialiseNewTask+0x56>
		pxNewTCB->pxEndOfStack = pxNewTCB->pxStack + ( ulStackDepth - ( uint32_t ) 1 );
	}
	#endif /* portSTACK_GROWTH */

	/* Store the task name in the TCB. */
	if( pcName != NULL )
 80079f4:	68bb      	ldr	r3, [r7, #8]
 80079f6:	2b00      	cmp	r3, #0
 80079f8:	d01f      	beq.n	8007a3a <prvInitialiseNewTask+0x9e>
	{
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 80079fa:	2300      	movs	r3, #0
 80079fc:	61fb      	str	r3, [r7, #28]
 80079fe:	e012      	b.n	8007a26 <prvInitialiseNewTask+0x8a>
		{
			pxNewTCB->pcTaskName[ x ] = pcName[ x ];
 8007a00:	68ba      	ldr	r2, [r7, #8]
 8007a02:	69fb      	ldr	r3, [r7, #28]
 8007a04:	4413      	add	r3, r2
 8007a06:	7819      	ldrb	r1, [r3, #0]
 8007a08:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8007a0a:	69fb      	ldr	r3, [r7, #28]
 8007a0c:	4413      	add	r3, r2
 8007a0e:	3334      	adds	r3, #52	; 0x34
 8007a10:	460a      	mov	r2, r1
 8007a12:	701a      	strb	r2, [r3, #0]

			/* Don't copy all configMAX_TASK_NAME_LEN if the string is shorter than
			configMAX_TASK_NAME_LEN characters just in case the memory after the
			string is not accessible (extremely unlikely). */
			if( pcName[ x ] == ( char ) 0x00 )
 8007a14:	68ba      	ldr	r2, [r7, #8]
 8007a16:	69fb      	ldr	r3, [r7, #28]
 8007a18:	4413      	add	r3, r2
 8007a1a:	781b      	ldrb	r3, [r3, #0]
 8007a1c:	2b00      	cmp	r3, #0
 8007a1e:	d006      	beq.n	8007a2e <prvInitialiseNewTask+0x92>
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 8007a20:	69fb      	ldr	r3, [r7, #28]
 8007a22:	3301      	adds	r3, #1
 8007a24:	61fb      	str	r3, [r7, #28]
 8007a26:	69fb      	ldr	r3, [r7, #28]
 8007a28:	2b0f      	cmp	r3, #15
 8007a2a:	d9e9      	bls.n	8007a00 <prvInitialiseNewTask+0x64>
 8007a2c:	e000      	b.n	8007a30 <prvInitialiseNewTask+0x94>
			{
				break;
 8007a2e:	bf00      	nop
			}
		}

		/* Ensure the name string is terminated in the case that the string length
		was greater or equal to configMAX_TASK_NAME_LEN. */
		pxNewTCB->pcTaskName[ configMAX_TASK_NAME_LEN - 1 ] = '\0';
 8007a30:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007a32:	2200      	movs	r2, #0
 8007a34:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 8007a38:	e003      	b.n	8007a42 <prvInitialiseNewTask+0xa6>
	}
	else
	{
		/* The task has not been given a name, so just ensure there is a NULL
		terminator when it is read out. */
		pxNewTCB->pcTaskName[ 0 ] = 0x00;
 8007a3a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007a3c:	2200      	movs	r2, #0
 8007a3e:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
	}

	/* This is used as an array index so must ensure it's not too large.  First
	remove the privilege bit if one is present. */
	if( uxPriority >= ( UBaseType_t ) configMAX_PRIORITIES )
 8007a42:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007a44:	2b37      	cmp	r3, #55	; 0x37
 8007a46:	d901      	bls.n	8007a4c <prvInitialiseNewTask+0xb0>
	{
		uxPriority = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) 1U;
 8007a48:	2337      	movs	r3, #55	; 0x37
 8007a4a:	62bb      	str	r3, [r7, #40]	; 0x28
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxNewTCB->uxPriority = uxPriority;
 8007a4c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007a4e:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8007a50:	62da      	str	r2, [r3, #44]	; 0x2c
	#if ( configUSE_MUTEXES == 1 )
	{
		pxNewTCB->uxBasePriority = uxPriority;
 8007a52:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007a54:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8007a56:	64da      	str	r2, [r3, #76]	; 0x4c
		pxNewTCB->uxMutexesHeld = 0;
 8007a58:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007a5a:	2200      	movs	r2, #0
 8007a5c:	651a      	str	r2, [r3, #80]	; 0x50
	}
	#endif /* configUSE_MUTEXES */

	vListInitialiseItem( &( pxNewTCB->xStateListItem ) );
 8007a5e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007a60:	3304      	adds	r3, #4
 8007a62:	4618      	mov	r0, r3
 8007a64:	f7ff f978 	bl	8006d58 <vListInitialiseItem>
	vListInitialiseItem( &( pxNewTCB->xEventListItem ) );
 8007a68:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007a6a:	3318      	adds	r3, #24
 8007a6c:	4618      	mov	r0, r3
 8007a6e:	f7ff f973 	bl	8006d58 <vListInitialiseItem>

	/* Set the pxNewTCB as a link back from the ListItem_t.  This is so we can get
	back to	the containing TCB from a generic item in a list. */
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xStateListItem ), pxNewTCB );
 8007a72:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007a74:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8007a76:	611a      	str	r2, [r3, #16]

	/* Event lists are always in priority order. */
	listSET_LIST_ITEM_VALUE( &( pxNewTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8007a78:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007a7a:	f1c3 0238 	rsb	r2, r3, #56	; 0x38
 8007a7e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007a80:	619a      	str	r2, [r3, #24]
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xEventListItem ), pxNewTCB );
 8007a82:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007a84:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8007a86:	625a      	str	r2, [r3, #36]	; 0x24
	}
	#endif /* portCRITICAL_NESTING_IN_TCB */

	#if ( configUSE_APPLICATION_TASK_TAG == 1 )
	{
		pxNewTCB->pxTaskTag = NULL;
 8007a88:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007a8a:	2200      	movs	r2, #0
 8007a8c:	655a      	str	r2, [r3, #84]	; 0x54
	}
	#endif

	#if ( configUSE_TASK_NOTIFICATIONS == 1 )
	{
		pxNewTCB->ulNotifiedValue = 0;
 8007a8e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007a90:	2200      	movs	r2, #0
 8007a92:	659a      	str	r2, [r3, #88]	; 0x58
		pxNewTCB->ucNotifyState = taskNOT_WAITING_NOTIFICATION;
 8007a94:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007a96:	2200      	movs	r2, #0
 8007a98:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c
			}
			#endif /* portSTACK_GROWTH */
		}
		#else /* portHAS_STACK_OVERFLOW_CHECKING */
		{
			pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters );
 8007a9c:	683a      	ldr	r2, [r7, #0]
 8007a9e:	68f9      	ldr	r1, [r7, #12]
 8007aa0:	69b8      	ldr	r0, [r7, #24]
 8007aa2:	f001 fa53 	bl	8008f4c <pxPortInitialiseStack>
 8007aa6:	4602      	mov	r2, r0
 8007aa8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007aaa:	601a      	str	r2, [r3, #0]
		}
		#endif /* portHAS_STACK_OVERFLOW_CHECKING */
	}
	#endif /* portUSING_MPU_WRAPPERS */

	if( pxCreatedTask != NULL )
 8007aac:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007aae:	2b00      	cmp	r3, #0
 8007ab0:	d002      	beq.n	8007ab8 <prvInitialiseNewTask+0x11c>
	{
		/* Pass the handle out in an anonymous way.  The handle can be used to
		change the created task's priority, delete the created task, etc.*/
		*pxCreatedTask = ( TaskHandle_t ) pxNewTCB;
 8007ab2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007ab4:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8007ab6:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 8007ab8:	bf00      	nop
 8007aba:	3720      	adds	r7, #32
 8007abc:	46bd      	mov	sp, r7
 8007abe:	bd80      	pop	{r7, pc}

08007ac0 <prvAddNewTaskToReadyList>:
/*-----------------------------------------------------------*/

static void prvAddNewTaskToReadyList( TCB_t *pxNewTCB )
{
 8007ac0:	b580      	push	{r7, lr}
 8007ac2:	b082      	sub	sp, #8
 8007ac4:	af00      	add	r7, sp, #0
 8007ac6:	6078      	str	r0, [r7, #4]
	/* Ensure interrupts don't access the task lists while the lists are being
	updated. */
	taskENTER_CRITICAL();
 8007ac8:	f001 fb6c 	bl	80091a4 <vPortEnterCritical>
	{
		uxCurrentNumberOfTasks++;
 8007acc:	4b2d      	ldr	r3, [pc, #180]	; (8007b84 <prvAddNewTaskToReadyList+0xc4>)
 8007ace:	681b      	ldr	r3, [r3, #0]
 8007ad0:	3301      	adds	r3, #1
 8007ad2:	4a2c      	ldr	r2, [pc, #176]	; (8007b84 <prvAddNewTaskToReadyList+0xc4>)
 8007ad4:	6013      	str	r3, [r2, #0]
		if( pxCurrentTCB == NULL )
 8007ad6:	4b2c      	ldr	r3, [pc, #176]	; (8007b88 <prvAddNewTaskToReadyList+0xc8>)
 8007ad8:	681b      	ldr	r3, [r3, #0]
 8007ada:	2b00      	cmp	r3, #0
 8007adc:	d109      	bne.n	8007af2 <prvAddNewTaskToReadyList+0x32>
		{
			/* There are no other tasks, or all the other tasks are in
			the suspended state - make this the current task. */
			pxCurrentTCB = pxNewTCB;
 8007ade:	4a2a      	ldr	r2, [pc, #168]	; (8007b88 <prvAddNewTaskToReadyList+0xc8>)
 8007ae0:	687b      	ldr	r3, [r7, #4]
 8007ae2:	6013      	str	r3, [r2, #0]

			if( uxCurrentNumberOfTasks == ( UBaseType_t ) 1 )
 8007ae4:	4b27      	ldr	r3, [pc, #156]	; (8007b84 <prvAddNewTaskToReadyList+0xc4>)
 8007ae6:	681b      	ldr	r3, [r3, #0]
 8007ae8:	2b01      	cmp	r3, #1
 8007aea:	d110      	bne.n	8007b0e <prvAddNewTaskToReadyList+0x4e>
			{
				/* This is the first task to be created so do the preliminary
				initialisation required.  We will not recover if this call
				fails, but we will report the failure. */
				prvInitialiseTaskLists();
 8007aec:	f000 fd42 	bl	8008574 <prvInitialiseTaskLists>
 8007af0:	e00d      	b.n	8007b0e <prvAddNewTaskToReadyList+0x4e>
		else
		{
			/* If the scheduler is not already running, make this task the
			current task if it is the highest priority task to be created
			so far. */
			if( xSchedulerRunning == pdFALSE )
 8007af2:	4b26      	ldr	r3, [pc, #152]	; (8007b8c <prvAddNewTaskToReadyList+0xcc>)
 8007af4:	681b      	ldr	r3, [r3, #0]
 8007af6:	2b00      	cmp	r3, #0
 8007af8:	d109      	bne.n	8007b0e <prvAddNewTaskToReadyList+0x4e>
			{
				if( pxCurrentTCB->uxPriority <= pxNewTCB->uxPriority )
 8007afa:	4b23      	ldr	r3, [pc, #140]	; (8007b88 <prvAddNewTaskToReadyList+0xc8>)
 8007afc:	681b      	ldr	r3, [r3, #0]
 8007afe:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8007b00:	687b      	ldr	r3, [r7, #4]
 8007b02:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007b04:	429a      	cmp	r2, r3
 8007b06:	d802      	bhi.n	8007b0e <prvAddNewTaskToReadyList+0x4e>
				{
					pxCurrentTCB = pxNewTCB;
 8007b08:	4a1f      	ldr	r2, [pc, #124]	; (8007b88 <prvAddNewTaskToReadyList+0xc8>)
 8007b0a:	687b      	ldr	r3, [r7, #4]
 8007b0c:	6013      	str	r3, [r2, #0]
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}

		uxTaskNumber++;
 8007b0e:	4b20      	ldr	r3, [pc, #128]	; (8007b90 <prvAddNewTaskToReadyList+0xd0>)
 8007b10:	681b      	ldr	r3, [r3, #0]
 8007b12:	3301      	adds	r3, #1
 8007b14:	4a1e      	ldr	r2, [pc, #120]	; (8007b90 <prvAddNewTaskToReadyList+0xd0>)
 8007b16:	6013      	str	r3, [r2, #0]

		#if ( configUSE_TRACE_FACILITY == 1 )
		{
			/* Add a counter into the TCB for tracing only. */
			pxNewTCB->uxTCBNumber = uxTaskNumber;
 8007b18:	4b1d      	ldr	r3, [pc, #116]	; (8007b90 <prvAddNewTaskToReadyList+0xd0>)
 8007b1a:	681a      	ldr	r2, [r3, #0]
 8007b1c:	687b      	ldr	r3, [r7, #4]
 8007b1e:	645a      	str	r2, [r3, #68]	; 0x44
		}
		#endif /* configUSE_TRACE_FACILITY */
		traceTASK_CREATE( pxNewTCB );

		prvAddTaskToReadyList( pxNewTCB );
 8007b20:	687b      	ldr	r3, [r7, #4]
 8007b22:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8007b24:	4b1b      	ldr	r3, [pc, #108]	; (8007b94 <prvAddNewTaskToReadyList+0xd4>)
 8007b26:	681b      	ldr	r3, [r3, #0]
 8007b28:	429a      	cmp	r2, r3
 8007b2a:	d903      	bls.n	8007b34 <prvAddNewTaskToReadyList+0x74>
 8007b2c:	687b      	ldr	r3, [r7, #4]
 8007b2e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007b30:	4a18      	ldr	r2, [pc, #96]	; (8007b94 <prvAddNewTaskToReadyList+0xd4>)
 8007b32:	6013      	str	r3, [r2, #0]
 8007b34:	687b      	ldr	r3, [r7, #4]
 8007b36:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8007b38:	4613      	mov	r3, r2
 8007b3a:	009b      	lsls	r3, r3, #2
 8007b3c:	4413      	add	r3, r2
 8007b3e:	009b      	lsls	r3, r3, #2
 8007b40:	4a15      	ldr	r2, [pc, #84]	; (8007b98 <prvAddNewTaskToReadyList+0xd8>)
 8007b42:	441a      	add	r2, r3
 8007b44:	687b      	ldr	r3, [r7, #4]
 8007b46:	3304      	adds	r3, #4
 8007b48:	4619      	mov	r1, r3
 8007b4a:	4610      	mov	r0, r2
 8007b4c:	f7ff f911 	bl	8006d72 <vListInsertEnd>

		portSETUP_TCB( pxNewTCB );
	}
	taskEXIT_CRITICAL();
 8007b50:	f001 fb58 	bl	8009204 <vPortExitCritical>

	if( xSchedulerRunning != pdFALSE )
 8007b54:	4b0d      	ldr	r3, [pc, #52]	; (8007b8c <prvAddNewTaskToReadyList+0xcc>)
 8007b56:	681b      	ldr	r3, [r3, #0]
 8007b58:	2b00      	cmp	r3, #0
 8007b5a:	d00e      	beq.n	8007b7a <prvAddNewTaskToReadyList+0xba>
	{
		/* If the created task is of a higher priority than the current task
		then it should run now. */
		if( pxCurrentTCB->uxPriority < pxNewTCB->uxPriority )
 8007b5c:	4b0a      	ldr	r3, [pc, #40]	; (8007b88 <prvAddNewTaskToReadyList+0xc8>)
 8007b5e:	681b      	ldr	r3, [r3, #0]
 8007b60:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8007b62:	687b      	ldr	r3, [r7, #4]
 8007b64:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007b66:	429a      	cmp	r2, r3
 8007b68:	d207      	bcs.n	8007b7a <prvAddNewTaskToReadyList+0xba>
		{
			taskYIELD_IF_USING_PREEMPTION();
 8007b6a:	4b0c      	ldr	r3, [pc, #48]	; (8007b9c <prvAddNewTaskToReadyList+0xdc>)
 8007b6c:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8007b70:	601a      	str	r2, [r3, #0]
 8007b72:	f3bf 8f4f 	dsb	sy
 8007b76:	f3bf 8f6f 	isb	sy
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 8007b7a:	bf00      	nop
 8007b7c:	3708      	adds	r7, #8
 8007b7e:	46bd      	mov	sp, r7
 8007b80:	bd80      	pop	{r7, pc}
 8007b82:	bf00      	nop
 8007b84:	20000f58 	.word	0x20000f58
 8007b88:	20000a84 	.word	0x20000a84
 8007b8c:	20000f64 	.word	0x20000f64
 8007b90:	20000f74 	.word	0x20000f74
 8007b94:	20000f60 	.word	0x20000f60
 8007b98:	20000a88 	.word	0x20000a88
 8007b9c:	e000ed04 	.word	0xe000ed04

08007ba0 <vTaskDelay>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelay == 1 )

	void vTaskDelay( const TickType_t xTicksToDelay )
	{
 8007ba0:	b580      	push	{r7, lr}
 8007ba2:	b084      	sub	sp, #16
 8007ba4:	af00      	add	r7, sp, #0
 8007ba6:	6078      	str	r0, [r7, #4]
	BaseType_t xAlreadyYielded = pdFALSE;
 8007ba8:	2300      	movs	r3, #0
 8007baa:	60fb      	str	r3, [r7, #12]

		/* A delay time of zero just forces a reschedule. */
		if( xTicksToDelay > ( TickType_t ) 0U )
 8007bac:	687b      	ldr	r3, [r7, #4]
 8007bae:	2b00      	cmp	r3, #0
 8007bb0:	d017      	beq.n	8007be2 <vTaskDelay+0x42>
		{
			configASSERT( uxSchedulerSuspended == 0 );
 8007bb2:	4b13      	ldr	r3, [pc, #76]	; (8007c00 <vTaskDelay+0x60>)
 8007bb4:	681b      	ldr	r3, [r3, #0]
 8007bb6:	2b00      	cmp	r3, #0
 8007bb8:	d00a      	beq.n	8007bd0 <vTaskDelay+0x30>
	__asm volatile
 8007bba:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007bbe:	f383 8811 	msr	BASEPRI, r3
 8007bc2:	f3bf 8f6f 	isb	sy
 8007bc6:	f3bf 8f4f 	dsb	sy
 8007bca:	60bb      	str	r3, [r7, #8]
}
 8007bcc:	bf00      	nop
 8007bce:	e7fe      	b.n	8007bce <vTaskDelay+0x2e>
			vTaskSuspendAll();
 8007bd0:	f000 f986 	bl	8007ee0 <vTaskSuspendAll>
				list or removed from the blocked list until the scheduler
				is resumed.

				This task cannot be in an event list as it is the currently
				executing task. */
				prvAddCurrentTaskToDelayedList( xTicksToDelay, pdFALSE );
 8007bd4:	2100      	movs	r1, #0
 8007bd6:	6878      	ldr	r0, [r7, #4]
 8007bd8:	f000 fe16 	bl	8008808 <prvAddCurrentTaskToDelayedList>
			}
			xAlreadyYielded = xTaskResumeAll();
 8007bdc:	f000 f98e 	bl	8007efc <xTaskResumeAll>
 8007be0:	60f8      	str	r0, [r7, #12]
			mtCOVERAGE_TEST_MARKER();
		}

		/* Force a reschedule if xTaskResumeAll has not already done so, we may
		have put ourselves to sleep. */
		if( xAlreadyYielded == pdFALSE )
 8007be2:	68fb      	ldr	r3, [r7, #12]
 8007be4:	2b00      	cmp	r3, #0
 8007be6:	d107      	bne.n	8007bf8 <vTaskDelay+0x58>
		{
			portYIELD_WITHIN_API();
 8007be8:	4b06      	ldr	r3, [pc, #24]	; (8007c04 <vTaskDelay+0x64>)
 8007bea:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8007bee:	601a      	str	r2, [r3, #0]
 8007bf0:	f3bf 8f4f 	dsb	sy
 8007bf4:	f3bf 8f6f 	isb	sy
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
 8007bf8:	bf00      	nop
 8007bfa:	3710      	adds	r7, #16
 8007bfc:	46bd      	mov	sp, r7
 8007bfe:	bd80      	pop	{r7, pc}
 8007c00:	20000f80 	.word	0x20000f80
 8007c04:	e000ed04 	.word	0xe000ed04

08007c08 <vTaskSuspend>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskSuspend == 1 )

	void vTaskSuspend( TaskHandle_t xTaskToSuspend )
	{
 8007c08:	b580      	push	{r7, lr}
 8007c0a:	b084      	sub	sp, #16
 8007c0c:	af00      	add	r7, sp, #0
 8007c0e:	6078      	str	r0, [r7, #4]
	TCB_t *pxTCB;

		taskENTER_CRITICAL();
 8007c10:	f001 fac8 	bl	80091a4 <vPortEnterCritical>
		{
			/* If null is passed in here then it is the running task that is
			being suspended. */
			pxTCB = prvGetTCBFromHandle( xTaskToSuspend );
 8007c14:	687b      	ldr	r3, [r7, #4]
 8007c16:	2b00      	cmp	r3, #0
 8007c18:	d102      	bne.n	8007c20 <vTaskSuspend+0x18>
 8007c1a:	4b30      	ldr	r3, [pc, #192]	; (8007cdc <vTaskSuspend+0xd4>)
 8007c1c:	681b      	ldr	r3, [r3, #0]
 8007c1e:	e000      	b.n	8007c22 <vTaskSuspend+0x1a>
 8007c20:	687b      	ldr	r3, [r7, #4]
 8007c22:	60fb      	str	r3, [r7, #12]

			traceTASK_SUSPEND( pxTCB );

			/* Remove task from the ready/delayed list and place in the
			suspended list. */
			if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 8007c24:	68fb      	ldr	r3, [r7, #12]
 8007c26:	3304      	adds	r3, #4
 8007c28:	4618      	mov	r0, r3
 8007c2a:	f7ff f8ff 	bl	8006e2c <uxListRemove>
			{
				mtCOVERAGE_TEST_MARKER();
			}

			/* Is the task waiting on an event also? */
			if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
 8007c2e:	68fb      	ldr	r3, [r7, #12]
 8007c30:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8007c32:	2b00      	cmp	r3, #0
 8007c34:	d004      	beq.n	8007c40 <vTaskSuspend+0x38>
			{
				( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 8007c36:	68fb      	ldr	r3, [r7, #12]
 8007c38:	3318      	adds	r3, #24
 8007c3a:	4618      	mov	r0, r3
 8007c3c:	f7ff f8f6 	bl	8006e2c <uxListRemove>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}

			vListInsertEnd( &xSuspendedTaskList, &( pxTCB->xStateListItem ) );
 8007c40:	68fb      	ldr	r3, [r7, #12]
 8007c42:	3304      	adds	r3, #4
 8007c44:	4619      	mov	r1, r3
 8007c46:	4826      	ldr	r0, [pc, #152]	; (8007ce0 <vTaskSuspend+0xd8>)
 8007c48:	f7ff f893 	bl	8006d72 <vListInsertEnd>

			#if( configUSE_TASK_NOTIFICATIONS == 1 )
			{
				if( pxTCB->ucNotifyState == taskWAITING_NOTIFICATION )
 8007c4c:	68fb      	ldr	r3, [r7, #12]
 8007c4e:	f893 305c 	ldrb.w	r3, [r3, #92]	; 0x5c
 8007c52:	b2db      	uxtb	r3, r3
 8007c54:	2b01      	cmp	r3, #1
 8007c56:	d103      	bne.n	8007c60 <vTaskSuspend+0x58>
				{
					/* The task was blocked to wait for a notification, but is
					now suspended, so no notification was received. */
					pxTCB->ucNotifyState = taskNOT_WAITING_NOTIFICATION;
 8007c58:	68fb      	ldr	r3, [r7, #12]
 8007c5a:	2200      	movs	r2, #0
 8007c5c:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c
				}
			}
			#endif
		}
		taskEXIT_CRITICAL();
 8007c60:	f001 fad0 	bl	8009204 <vPortExitCritical>

		if( xSchedulerRunning != pdFALSE )
 8007c64:	4b1f      	ldr	r3, [pc, #124]	; (8007ce4 <vTaskSuspend+0xdc>)
 8007c66:	681b      	ldr	r3, [r3, #0]
 8007c68:	2b00      	cmp	r3, #0
 8007c6a:	d005      	beq.n	8007c78 <vTaskSuspend+0x70>
		{
			/* Reset the next expected unblock time in case it referred to the
			task that is now in the Suspended state. */
			taskENTER_CRITICAL();
 8007c6c:	f001 fa9a 	bl	80091a4 <vPortEnterCritical>
			{
				prvResetNextTaskUnblockTime();
 8007c70:	f000 fd1e 	bl	80086b0 <prvResetNextTaskUnblockTime>
			}
			taskEXIT_CRITICAL();
 8007c74:	f001 fac6 	bl	8009204 <vPortExitCritical>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		if( pxTCB == pxCurrentTCB )
 8007c78:	4b18      	ldr	r3, [pc, #96]	; (8007cdc <vTaskSuspend+0xd4>)
 8007c7a:	681b      	ldr	r3, [r3, #0]
 8007c7c:	68fa      	ldr	r2, [r7, #12]
 8007c7e:	429a      	cmp	r2, r3
 8007c80:	d127      	bne.n	8007cd2 <vTaskSuspend+0xca>
		{
			if( xSchedulerRunning != pdFALSE )
 8007c82:	4b18      	ldr	r3, [pc, #96]	; (8007ce4 <vTaskSuspend+0xdc>)
 8007c84:	681b      	ldr	r3, [r3, #0]
 8007c86:	2b00      	cmp	r3, #0
 8007c88:	d017      	beq.n	8007cba <vTaskSuspend+0xb2>
			{
				/* The current task has just been suspended. */
				configASSERT( uxSchedulerSuspended == 0 );
 8007c8a:	4b17      	ldr	r3, [pc, #92]	; (8007ce8 <vTaskSuspend+0xe0>)
 8007c8c:	681b      	ldr	r3, [r3, #0]
 8007c8e:	2b00      	cmp	r3, #0
 8007c90:	d00a      	beq.n	8007ca8 <vTaskSuspend+0xa0>
	__asm volatile
 8007c92:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007c96:	f383 8811 	msr	BASEPRI, r3
 8007c9a:	f3bf 8f6f 	isb	sy
 8007c9e:	f3bf 8f4f 	dsb	sy
 8007ca2:	60bb      	str	r3, [r7, #8]
}
 8007ca4:	bf00      	nop
 8007ca6:	e7fe      	b.n	8007ca6 <vTaskSuspend+0x9e>
				portYIELD_WITHIN_API();
 8007ca8:	4b10      	ldr	r3, [pc, #64]	; (8007cec <vTaskSuspend+0xe4>)
 8007caa:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8007cae:	601a      	str	r2, [r3, #0]
 8007cb0:	f3bf 8f4f 	dsb	sy
 8007cb4:	f3bf 8f6f 	isb	sy
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
 8007cb8:	e00b      	b.n	8007cd2 <vTaskSuspend+0xca>
				if( listCURRENT_LIST_LENGTH( &xSuspendedTaskList ) == uxCurrentNumberOfTasks ) /*lint !e931 Right has no side effect, just volatile. */
 8007cba:	4b09      	ldr	r3, [pc, #36]	; (8007ce0 <vTaskSuspend+0xd8>)
 8007cbc:	681a      	ldr	r2, [r3, #0]
 8007cbe:	4b0c      	ldr	r3, [pc, #48]	; (8007cf0 <vTaskSuspend+0xe8>)
 8007cc0:	681b      	ldr	r3, [r3, #0]
 8007cc2:	429a      	cmp	r2, r3
 8007cc4:	d103      	bne.n	8007cce <vTaskSuspend+0xc6>
					pxCurrentTCB = NULL;
 8007cc6:	4b05      	ldr	r3, [pc, #20]	; (8007cdc <vTaskSuspend+0xd4>)
 8007cc8:	2200      	movs	r2, #0
 8007cca:	601a      	str	r2, [r3, #0]
	}
 8007ccc:	e001      	b.n	8007cd2 <vTaskSuspend+0xca>
					vTaskSwitchContext();
 8007cce:	f000 fa7d 	bl	80081cc <vTaskSwitchContext>
	}
 8007cd2:	bf00      	nop
 8007cd4:	3710      	adds	r7, #16
 8007cd6:	46bd      	mov	sp, r7
 8007cd8:	bd80      	pop	{r7, pc}
 8007cda:	bf00      	nop
 8007cdc:	20000a84 	.word	0x20000a84
 8007ce0:	20000f44 	.word	0x20000f44
 8007ce4:	20000f64 	.word	0x20000f64
 8007ce8:	20000f80 	.word	0x20000f80
 8007cec:	e000ed04 	.word	0xe000ed04
 8007cf0:	20000f58 	.word	0x20000f58

08007cf4 <prvTaskIsTaskSuspended>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskSuspend == 1 )

	static BaseType_t prvTaskIsTaskSuspended( const TaskHandle_t xTask )
	{
 8007cf4:	b480      	push	{r7}
 8007cf6:	b087      	sub	sp, #28
 8007cf8:	af00      	add	r7, sp, #0
 8007cfa:	6078      	str	r0, [r7, #4]
	BaseType_t xReturn = pdFALSE;
 8007cfc:	2300      	movs	r3, #0
 8007cfe:	617b      	str	r3, [r7, #20]
	const TCB_t * const pxTCB = xTask;
 8007d00:	687b      	ldr	r3, [r7, #4]
 8007d02:	613b      	str	r3, [r7, #16]

		/* Accesses xPendingReadyList so must be called from a critical
		section. */

		/* It does not make sense to check if the calling task is suspended. */
		configASSERT( xTask );
 8007d04:	687b      	ldr	r3, [r7, #4]
 8007d06:	2b00      	cmp	r3, #0
 8007d08:	d10a      	bne.n	8007d20 <prvTaskIsTaskSuspended+0x2c>
	__asm volatile
 8007d0a:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007d0e:	f383 8811 	msr	BASEPRI, r3
 8007d12:	f3bf 8f6f 	isb	sy
 8007d16:	f3bf 8f4f 	dsb	sy
 8007d1a:	60fb      	str	r3, [r7, #12]
}
 8007d1c:	bf00      	nop
 8007d1e:	e7fe      	b.n	8007d1e <prvTaskIsTaskSuspended+0x2a>

		/* Is the task being resumed actually in the suspended list? */
		if( listIS_CONTAINED_WITHIN( &xSuspendedTaskList, &( pxTCB->xStateListItem ) ) != pdFALSE )
 8007d20:	693b      	ldr	r3, [r7, #16]
 8007d22:	695b      	ldr	r3, [r3, #20]
 8007d24:	4a0a      	ldr	r2, [pc, #40]	; (8007d50 <prvTaskIsTaskSuspended+0x5c>)
 8007d26:	4293      	cmp	r3, r2
 8007d28:	d10a      	bne.n	8007d40 <prvTaskIsTaskSuspended+0x4c>
		{
			/* Has the task already been resumed from within an ISR? */
			if( listIS_CONTAINED_WITHIN( &xPendingReadyList, &( pxTCB->xEventListItem ) ) == pdFALSE )
 8007d2a:	693b      	ldr	r3, [r7, #16]
 8007d2c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8007d2e:	4a09      	ldr	r2, [pc, #36]	; (8007d54 <prvTaskIsTaskSuspended+0x60>)
 8007d30:	4293      	cmp	r3, r2
 8007d32:	d005      	beq.n	8007d40 <prvTaskIsTaskSuspended+0x4c>
			{
				/* Is it in the suspended list because it is in the	Suspended
				state, or because is is blocked with no timeout? */
				if( listIS_CONTAINED_WITHIN( NULL, &( pxTCB->xEventListItem ) ) != pdFALSE ) /*lint !e961.  The cast is only redundant when NULL is used. */
 8007d34:	693b      	ldr	r3, [r7, #16]
 8007d36:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8007d38:	2b00      	cmp	r3, #0
 8007d3a:	d101      	bne.n	8007d40 <prvTaskIsTaskSuspended+0x4c>
				{
					xReturn = pdTRUE;
 8007d3c:	2301      	movs	r3, #1
 8007d3e:	617b      	str	r3, [r7, #20]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		return xReturn;
 8007d40:	697b      	ldr	r3, [r7, #20]
	} /*lint !e818 xTask cannot be a pointer to const because it is a typedef. */
 8007d42:	4618      	mov	r0, r3
 8007d44:	371c      	adds	r7, #28
 8007d46:	46bd      	mov	sp, r7
 8007d48:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007d4c:	4770      	bx	lr
 8007d4e:	bf00      	nop
 8007d50:	20000f44 	.word	0x20000f44
 8007d54:	20000f18 	.word	0x20000f18

08007d58 <vTaskResume>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskSuspend == 1 )

	void vTaskResume( TaskHandle_t xTaskToResume )
	{
 8007d58:	b580      	push	{r7, lr}
 8007d5a:	b084      	sub	sp, #16
 8007d5c:	af00      	add	r7, sp, #0
 8007d5e:	6078      	str	r0, [r7, #4]
	TCB_t * const pxTCB = xTaskToResume;
 8007d60:	687b      	ldr	r3, [r7, #4]
 8007d62:	60fb      	str	r3, [r7, #12]

		/* It does not make sense to resume the calling task. */
		configASSERT( xTaskToResume );
 8007d64:	687b      	ldr	r3, [r7, #4]
 8007d66:	2b00      	cmp	r3, #0
 8007d68:	d10a      	bne.n	8007d80 <vTaskResume+0x28>
	__asm volatile
 8007d6a:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007d6e:	f383 8811 	msr	BASEPRI, r3
 8007d72:	f3bf 8f6f 	isb	sy
 8007d76:	f3bf 8f4f 	dsb	sy
 8007d7a:	60bb      	str	r3, [r7, #8]
}
 8007d7c:	bf00      	nop
 8007d7e:	e7fe      	b.n	8007d7e <vTaskResume+0x26>

		/* The parameter cannot be NULL as it is impossible to resume the
		currently executing task. */
		if( ( pxTCB != pxCurrentTCB ) && ( pxTCB != NULL ) )
 8007d80:	4b20      	ldr	r3, [pc, #128]	; (8007e04 <vTaskResume+0xac>)
 8007d82:	681b      	ldr	r3, [r3, #0]
 8007d84:	68fa      	ldr	r2, [r7, #12]
 8007d86:	429a      	cmp	r2, r3
 8007d88:	d038      	beq.n	8007dfc <vTaskResume+0xa4>
 8007d8a:	68fb      	ldr	r3, [r7, #12]
 8007d8c:	2b00      	cmp	r3, #0
 8007d8e:	d035      	beq.n	8007dfc <vTaskResume+0xa4>
		{
			taskENTER_CRITICAL();
 8007d90:	f001 fa08 	bl	80091a4 <vPortEnterCritical>
			{
				if( prvTaskIsTaskSuspended( pxTCB ) != pdFALSE )
 8007d94:	68f8      	ldr	r0, [r7, #12]
 8007d96:	f7ff ffad 	bl	8007cf4 <prvTaskIsTaskSuspended>
 8007d9a:	4603      	mov	r3, r0
 8007d9c:	2b00      	cmp	r3, #0
 8007d9e:	d02b      	beq.n	8007df8 <vTaskResume+0xa0>
				{
					traceTASK_RESUME( pxTCB );

					/* The ready list can be accessed even if the scheduler is
					suspended because this is inside a critical section. */
					( void ) uxListRemove(  &( pxTCB->xStateListItem ) );
 8007da0:	68fb      	ldr	r3, [r7, #12]
 8007da2:	3304      	adds	r3, #4
 8007da4:	4618      	mov	r0, r3
 8007da6:	f7ff f841 	bl	8006e2c <uxListRemove>
					prvAddTaskToReadyList( pxTCB );
 8007daa:	68fb      	ldr	r3, [r7, #12]
 8007dac:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8007dae:	4b16      	ldr	r3, [pc, #88]	; (8007e08 <vTaskResume+0xb0>)
 8007db0:	681b      	ldr	r3, [r3, #0]
 8007db2:	429a      	cmp	r2, r3
 8007db4:	d903      	bls.n	8007dbe <vTaskResume+0x66>
 8007db6:	68fb      	ldr	r3, [r7, #12]
 8007db8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007dba:	4a13      	ldr	r2, [pc, #76]	; (8007e08 <vTaskResume+0xb0>)
 8007dbc:	6013      	str	r3, [r2, #0]
 8007dbe:	68fb      	ldr	r3, [r7, #12]
 8007dc0:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8007dc2:	4613      	mov	r3, r2
 8007dc4:	009b      	lsls	r3, r3, #2
 8007dc6:	4413      	add	r3, r2
 8007dc8:	009b      	lsls	r3, r3, #2
 8007dca:	4a10      	ldr	r2, [pc, #64]	; (8007e0c <vTaskResume+0xb4>)
 8007dcc:	441a      	add	r2, r3
 8007dce:	68fb      	ldr	r3, [r7, #12]
 8007dd0:	3304      	adds	r3, #4
 8007dd2:	4619      	mov	r1, r3
 8007dd4:	4610      	mov	r0, r2
 8007dd6:	f7fe ffcc 	bl	8006d72 <vListInsertEnd>

					/* A higher priority task may have just been resumed. */
					if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 8007dda:	68fb      	ldr	r3, [r7, #12]
 8007ddc:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8007dde:	4b09      	ldr	r3, [pc, #36]	; (8007e04 <vTaskResume+0xac>)
 8007de0:	681b      	ldr	r3, [r3, #0]
 8007de2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007de4:	429a      	cmp	r2, r3
 8007de6:	d307      	bcc.n	8007df8 <vTaskResume+0xa0>
					{
						/* This yield may not cause the task just resumed to run,
						but will leave the lists in the correct state for the
						next yield. */
						taskYIELD_IF_USING_PREEMPTION();
 8007de8:	4b09      	ldr	r3, [pc, #36]	; (8007e10 <vTaskResume+0xb8>)
 8007dea:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8007dee:	601a      	str	r2, [r3, #0]
 8007df0:	f3bf 8f4f 	dsb	sy
 8007df4:	f3bf 8f6f 	isb	sy
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}
			}
			taskEXIT_CRITICAL();
 8007df8:	f001 fa04 	bl	8009204 <vPortExitCritical>
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
 8007dfc:	bf00      	nop
 8007dfe:	3710      	adds	r7, #16
 8007e00:	46bd      	mov	sp, r7
 8007e02:	bd80      	pop	{r7, pc}
 8007e04:	20000a84 	.word	0x20000a84
 8007e08:	20000f60 	.word	0x20000f60
 8007e0c:	20000a88 	.word	0x20000a88
 8007e10:	e000ed04 	.word	0xe000ed04

08007e14 <vTaskStartScheduler>:

#endif /* ( ( INCLUDE_xTaskResumeFromISR == 1 ) && ( INCLUDE_vTaskSuspend == 1 ) ) */
/*-----------------------------------------------------------*/

void vTaskStartScheduler( void )
{
 8007e14:	b580      	push	{r7, lr}
 8007e16:	b08a      	sub	sp, #40	; 0x28
 8007e18:	af04      	add	r7, sp, #16
BaseType_t xReturn;

	/* Add the idle task at the lowest priority. */
	#if( configSUPPORT_STATIC_ALLOCATION == 1 )
	{
		StaticTask_t *pxIdleTaskTCBBuffer = NULL;
 8007e1a:	2300      	movs	r3, #0
 8007e1c:	60bb      	str	r3, [r7, #8]
		StackType_t *pxIdleTaskStackBuffer = NULL;
 8007e1e:	2300      	movs	r3, #0
 8007e20:	607b      	str	r3, [r7, #4]
		uint32_t ulIdleTaskStackSize;

		/* The Idle task is created using user provided RAM - obtain the
		address of the RAM then create the idle task. */
		vApplicationGetIdleTaskMemory( &pxIdleTaskTCBBuffer, &pxIdleTaskStackBuffer, &ulIdleTaskStackSize );
 8007e22:	463a      	mov	r2, r7
 8007e24:	1d39      	adds	r1, r7, #4
 8007e26:	f107 0308 	add.w	r3, r7, #8
 8007e2a:	4618      	mov	r0, r3
 8007e2c:	f7fe ff40 	bl	8006cb0 <vApplicationGetIdleTaskMemory>
		xIdleTaskHandle = xTaskCreateStatic(	prvIdleTask,
 8007e30:	6839      	ldr	r1, [r7, #0]
 8007e32:	687b      	ldr	r3, [r7, #4]
 8007e34:	68ba      	ldr	r2, [r7, #8]
 8007e36:	9202      	str	r2, [sp, #8]
 8007e38:	9301      	str	r3, [sp, #4]
 8007e3a:	2300      	movs	r3, #0
 8007e3c:	9300      	str	r3, [sp, #0]
 8007e3e:	2300      	movs	r3, #0
 8007e40:	460a      	mov	r2, r1
 8007e42:	4921      	ldr	r1, [pc, #132]	; (8007ec8 <vTaskStartScheduler+0xb4>)
 8007e44:	4821      	ldr	r0, [pc, #132]	; (8007ecc <vTaskStartScheduler+0xb8>)
 8007e46:	f7ff fd07 	bl	8007858 <xTaskCreateStatic>
 8007e4a:	4603      	mov	r3, r0
 8007e4c:	4a20      	ldr	r2, [pc, #128]	; (8007ed0 <vTaskStartScheduler+0xbc>)
 8007e4e:	6013      	str	r3, [r2, #0]
												( void * ) NULL, /*lint !e961.  The cast is not redundant for all compilers. */
												portPRIVILEGE_BIT, /* In effect ( tskIDLE_PRIORITY | portPRIVILEGE_BIT ), but tskIDLE_PRIORITY is zero. */
												pxIdleTaskStackBuffer,
												pxIdleTaskTCBBuffer ); /*lint !e961 MISRA exception, justified as it is not a redundant explicit cast to all supported compilers. */

		if( xIdleTaskHandle != NULL )
 8007e50:	4b1f      	ldr	r3, [pc, #124]	; (8007ed0 <vTaskStartScheduler+0xbc>)
 8007e52:	681b      	ldr	r3, [r3, #0]
 8007e54:	2b00      	cmp	r3, #0
 8007e56:	d002      	beq.n	8007e5e <vTaskStartScheduler+0x4a>
		{
			xReturn = pdPASS;
 8007e58:	2301      	movs	r3, #1
 8007e5a:	617b      	str	r3, [r7, #20]
 8007e5c:	e001      	b.n	8007e62 <vTaskStartScheduler+0x4e>
		}
		else
		{
			xReturn = pdFAIL;
 8007e5e:	2300      	movs	r3, #0
 8007e60:	617b      	str	r3, [r7, #20]
	}
	#endif /* configSUPPORT_STATIC_ALLOCATION */

	#if ( configUSE_TIMERS == 1 )
	{
		if( xReturn == pdPASS )
 8007e62:	697b      	ldr	r3, [r7, #20]
 8007e64:	2b01      	cmp	r3, #1
 8007e66:	d102      	bne.n	8007e6e <vTaskStartScheduler+0x5a>
		{
			xReturn = xTimerCreateTimerTask();
 8007e68:	f000 fd22 	bl	80088b0 <xTimerCreateTimerTask>
 8007e6c:	6178      	str	r0, [r7, #20]
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif /* configUSE_TIMERS */

	if( xReturn == pdPASS )
 8007e6e:	697b      	ldr	r3, [r7, #20]
 8007e70:	2b01      	cmp	r3, #1
 8007e72:	d116      	bne.n	8007ea2 <vTaskStartScheduler+0x8e>
	__asm volatile
 8007e74:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007e78:	f383 8811 	msr	BASEPRI, r3
 8007e7c:	f3bf 8f6f 	isb	sy
 8007e80:	f3bf 8f4f 	dsb	sy
 8007e84:	613b      	str	r3, [r7, #16]
}
 8007e86:	bf00      	nop
			for additional information. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */

		xNextTaskUnblockTime = portMAX_DELAY;
 8007e88:	4b12      	ldr	r3, [pc, #72]	; (8007ed4 <vTaskStartScheduler+0xc0>)
 8007e8a:	f04f 32ff 	mov.w	r2, #4294967295
 8007e8e:	601a      	str	r2, [r3, #0]
		xSchedulerRunning = pdTRUE;
 8007e90:	4b11      	ldr	r3, [pc, #68]	; (8007ed8 <vTaskStartScheduler+0xc4>)
 8007e92:	2201      	movs	r2, #1
 8007e94:	601a      	str	r2, [r3, #0]
		xTickCount = ( TickType_t ) configINITIAL_TICK_COUNT;
 8007e96:	4b11      	ldr	r3, [pc, #68]	; (8007edc <vTaskStartScheduler+0xc8>)
 8007e98:	2200      	movs	r2, #0
 8007e9a:	601a      	str	r2, [r3, #0]

		traceTASK_SWITCHED_IN();

		/* Setting up the timer tick is hardware specific and thus in the
		portable interface. */
		if( xPortStartScheduler() != pdFALSE )
 8007e9c:	f001 f8e0 	bl	8009060 <xPortStartScheduler>
	}

	/* Prevent compiler warnings if INCLUDE_xTaskGetIdleTaskHandle is set to 0,
	meaning xIdleTaskHandle is not used anywhere else. */
	( void ) xIdleTaskHandle;
}
 8007ea0:	e00e      	b.n	8007ec0 <vTaskStartScheduler+0xac>
		configASSERT( xReturn != errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY );
 8007ea2:	697b      	ldr	r3, [r7, #20]
 8007ea4:	f1b3 3fff 	cmp.w	r3, #4294967295
 8007ea8:	d10a      	bne.n	8007ec0 <vTaskStartScheduler+0xac>
	__asm volatile
 8007eaa:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007eae:	f383 8811 	msr	BASEPRI, r3
 8007eb2:	f3bf 8f6f 	isb	sy
 8007eb6:	f3bf 8f4f 	dsb	sy
 8007eba:	60fb      	str	r3, [r7, #12]
}
 8007ebc:	bf00      	nop
 8007ebe:	e7fe      	b.n	8007ebe <vTaskStartScheduler+0xaa>
}
 8007ec0:	bf00      	nop
 8007ec2:	3718      	adds	r7, #24
 8007ec4:	46bd      	mov	sp, r7
 8007ec6:	bd80      	pop	{r7, pc}
 8007ec8:	0800ae8c 	.word	0x0800ae8c
 8007ecc:	08008541 	.word	0x08008541
 8007ed0:	20000f7c 	.word	0x20000f7c
 8007ed4:	20000f78 	.word	0x20000f78
 8007ed8:	20000f64 	.word	0x20000f64
 8007edc:	20000f5c 	.word	0x20000f5c

08007ee0 <vTaskSuspendAll>:
	vPortEndScheduler();
}
/*----------------------------------------------------------*/

void vTaskSuspendAll( void )
{
 8007ee0:	b480      	push	{r7}
 8007ee2:	af00      	add	r7, sp, #0
	do not otherwise exhibit real time behaviour. */
	portSOFTWARE_BARRIER();

	/* The scheduler is suspended if uxSchedulerSuspended is non-zero.  An increment
	is used to allow calls to vTaskSuspendAll() to nest. */
	++uxSchedulerSuspended;
 8007ee4:	4b04      	ldr	r3, [pc, #16]	; (8007ef8 <vTaskSuspendAll+0x18>)
 8007ee6:	681b      	ldr	r3, [r3, #0]
 8007ee8:	3301      	adds	r3, #1
 8007eea:	4a03      	ldr	r2, [pc, #12]	; (8007ef8 <vTaskSuspendAll+0x18>)
 8007eec:	6013      	str	r3, [r2, #0]

	/* Enforces ordering for ports and optimised compilers that may otherwise place
	the above increment elsewhere. */
	portMEMORY_BARRIER();
}
 8007eee:	bf00      	nop
 8007ef0:	46bd      	mov	sp, r7
 8007ef2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007ef6:	4770      	bx	lr
 8007ef8:	20000f80 	.word	0x20000f80

08007efc <xTaskResumeAll>:

#endif /* configUSE_TICKLESS_IDLE */
/*----------------------------------------------------------*/

BaseType_t xTaskResumeAll( void )
{
 8007efc:	b580      	push	{r7, lr}
 8007efe:	b084      	sub	sp, #16
 8007f00:	af00      	add	r7, sp, #0
TCB_t *pxTCB = NULL;
 8007f02:	2300      	movs	r3, #0
 8007f04:	60fb      	str	r3, [r7, #12]
BaseType_t xAlreadyYielded = pdFALSE;
 8007f06:	2300      	movs	r3, #0
 8007f08:	60bb      	str	r3, [r7, #8]

	/* If uxSchedulerSuspended is zero then this function does not match a
	previous call to vTaskSuspendAll(). */
	configASSERT( uxSchedulerSuspended );
 8007f0a:	4b42      	ldr	r3, [pc, #264]	; (8008014 <xTaskResumeAll+0x118>)
 8007f0c:	681b      	ldr	r3, [r3, #0]
 8007f0e:	2b00      	cmp	r3, #0
 8007f10:	d10a      	bne.n	8007f28 <xTaskResumeAll+0x2c>
	__asm volatile
 8007f12:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007f16:	f383 8811 	msr	BASEPRI, r3
 8007f1a:	f3bf 8f6f 	isb	sy
 8007f1e:	f3bf 8f4f 	dsb	sy
 8007f22:	603b      	str	r3, [r7, #0]
}
 8007f24:	bf00      	nop
 8007f26:	e7fe      	b.n	8007f26 <xTaskResumeAll+0x2a>
	/* It is possible that an ISR caused a task to be removed from an event
	list while the scheduler was suspended.  If this was the case then the
	removed task will have been added to the xPendingReadyList.  Once the
	scheduler has been resumed it is safe to move all the pending ready
	tasks from this list into their appropriate ready list. */
	taskENTER_CRITICAL();
 8007f28:	f001 f93c 	bl	80091a4 <vPortEnterCritical>
	{
		--uxSchedulerSuspended;
 8007f2c:	4b39      	ldr	r3, [pc, #228]	; (8008014 <xTaskResumeAll+0x118>)
 8007f2e:	681b      	ldr	r3, [r3, #0]
 8007f30:	3b01      	subs	r3, #1
 8007f32:	4a38      	ldr	r2, [pc, #224]	; (8008014 <xTaskResumeAll+0x118>)
 8007f34:	6013      	str	r3, [r2, #0]

		if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8007f36:	4b37      	ldr	r3, [pc, #220]	; (8008014 <xTaskResumeAll+0x118>)
 8007f38:	681b      	ldr	r3, [r3, #0]
 8007f3a:	2b00      	cmp	r3, #0
 8007f3c:	d162      	bne.n	8008004 <xTaskResumeAll+0x108>
		{
			if( uxCurrentNumberOfTasks > ( UBaseType_t ) 0U )
 8007f3e:	4b36      	ldr	r3, [pc, #216]	; (8008018 <xTaskResumeAll+0x11c>)
 8007f40:	681b      	ldr	r3, [r3, #0]
 8007f42:	2b00      	cmp	r3, #0
 8007f44:	d05e      	beq.n	8008004 <xTaskResumeAll+0x108>
			{
				/* Move any readied tasks from the pending list into the
				appropriate ready list. */
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 8007f46:	e02f      	b.n	8007fa8 <xTaskResumeAll+0xac>
				{
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xPendingReadyList ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8007f48:	4b34      	ldr	r3, [pc, #208]	; (800801c <xTaskResumeAll+0x120>)
 8007f4a:	68db      	ldr	r3, [r3, #12]
 8007f4c:	68db      	ldr	r3, [r3, #12]
 8007f4e:	60fb      	str	r3, [r7, #12]
					( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 8007f50:	68fb      	ldr	r3, [r7, #12]
 8007f52:	3318      	adds	r3, #24
 8007f54:	4618      	mov	r0, r3
 8007f56:	f7fe ff69 	bl	8006e2c <uxListRemove>
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8007f5a:	68fb      	ldr	r3, [r7, #12]
 8007f5c:	3304      	adds	r3, #4
 8007f5e:	4618      	mov	r0, r3
 8007f60:	f7fe ff64 	bl	8006e2c <uxListRemove>
					prvAddTaskToReadyList( pxTCB );
 8007f64:	68fb      	ldr	r3, [r7, #12]
 8007f66:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8007f68:	4b2d      	ldr	r3, [pc, #180]	; (8008020 <xTaskResumeAll+0x124>)
 8007f6a:	681b      	ldr	r3, [r3, #0]
 8007f6c:	429a      	cmp	r2, r3
 8007f6e:	d903      	bls.n	8007f78 <xTaskResumeAll+0x7c>
 8007f70:	68fb      	ldr	r3, [r7, #12]
 8007f72:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007f74:	4a2a      	ldr	r2, [pc, #168]	; (8008020 <xTaskResumeAll+0x124>)
 8007f76:	6013      	str	r3, [r2, #0]
 8007f78:	68fb      	ldr	r3, [r7, #12]
 8007f7a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8007f7c:	4613      	mov	r3, r2
 8007f7e:	009b      	lsls	r3, r3, #2
 8007f80:	4413      	add	r3, r2
 8007f82:	009b      	lsls	r3, r3, #2
 8007f84:	4a27      	ldr	r2, [pc, #156]	; (8008024 <xTaskResumeAll+0x128>)
 8007f86:	441a      	add	r2, r3
 8007f88:	68fb      	ldr	r3, [r7, #12]
 8007f8a:	3304      	adds	r3, #4
 8007f8c:	4619      	mov	r1, r3
 8007f8e:	4610      	mov	r0, r2
 8007f90:	f7fe feef 	bl	8006d72 <vListInsertEnd>

					/* If the moved task has a priority higher than the current
					task then a yield must be performed. */
					if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 8007f94:	68fb      	ldr	r3, [r7, #12]
 8007f96:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8007f98:	4b23      	ldr	r3, [pc, #140]	; (8008028 <xTaskResumeAll+0x12c>)
 8007f9a:	681b      	ldr	r3, [r3, #0]
 8007f9c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007f9e:	429a      	cmp	r2, r3
 8007fa0:	d302      	bcc.n	8007fa8 <xTaskResumeAll+0xac>
					{
						xYieldPending = pdTRUE;
 8007fa2:	4b22      	ldr	r3, [pc, #136]	; (800802c <xTaskResumeAll+0x130>)
 8007fa4:	2201      	movs	r2, #1
 8007fa6:	601a      	str	r2, [r3, #0]
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 8007fa8:	4b1c      	ldr	r3, [pc, #112]	; (800801c <xTaskResumeAll+0x120>)
 8007faa:	681b      	ldr	r3, [r3, #0]
 8007fac:	2b00      	cmp	r3, #0
 8007fae:	d1cb      	bne.n	8007f48 <xTaskResumeAll+0x4c>
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( pxTCB != NULL )
 8007fb0:	68fb      	ldr	r3, [r7, #12]
 8007fb2:	2b00      	cmp	r3, #0
 8007fb4:	d001      	beq.n	8007fba <xTaskResumeAll+0xbe>
					which may have prevented the next unblock time from being
					re-calculated, in which case re-calculate it now.  Mainly
					important for low power tickless implementations, where
					this can prevent an unnecessary exit from low power
					state. */
					prvResetNextTaskUnblockTime();
 8007fb6:	f000 fb7b 	bl	80086b0 <prvResetNextTaskUnblockTime>
				/* If any ticks occurred while the scheduler was suspended then
				they should be processed now.  This ensures the tick count does
				not	slip, and that any delayed tasks are resumed at the correct
				time. */
				{
					TickType_t xPendedCounts = xPendedTicks; /* Non-volatile copy. */
 8007fba:	4b1d      	ldr	r3, [pc, #116]	; (8008030 <xTaskResumeAll+0x134>)
 8007fbc:	681b      	ldr	r3, [r3, #0]
 8007fbe:	607b      	str	r3, [r7, #4]

					if( xPendedCounts > ( TickType_t ) 0U )
 8007fc0:	687b      	ldr	r3, [r7, #4]
 8007fc2:	2b00      	cmp	r3, #0
 8007fc4:	d010      	beq.n	8007fe8 <xTaskResumeAll+0xec>
					{
						do
						{
							if( xTaskIncrementTick() != pdFALSE )
 8007fc6:	f000 f847 	bl	8008058 <xTaskIncrementTick>
 8007fca:	4603      	mov	r3, r0
 8007fcc:	2b00      	cmp	r3, #0
 8007fce:	d002      	beq.n	8007fd6 <xTaskResumeAll+0xda>
							{
								xYieldPending = pdTRUE;
 8007fd0:	4b16      	ldr	r3, [pc, #88]	; (800802c <xTaskResumeAll+0x130>)
 8007fd2:	2201      	movs	r2, #1
 8007fd4:	601a      	str	r2, [r3, #0]
							}
							else
							{
								mtCOVERAGE_TEST_MARKER();
							}
							--xPendedCounts;
 8007fd6:	687b      	ldr	r3, [r7, #4]
 8007fd8:	3b01      	subs	r3, #1
 8007fda:	607b      	str	r3, [r7, #4]
						} while( xPendedCounts > ( TickType_t ) 0U );
 8007fdc:	687b      	ldr	r3, [r7, #4]
 8007fde:	2b00      	cmp	r3, #0
 8007fe0:	d1f1      	bne.n	8007fc6 <xTaskResumeAll+0xca>

						xPendedTicks = 0;
 8007fe2:	4b13      	ldr	r3, [pc, #76]	; (8008030 <xTaskResumeAll+0x134>)
 8007fe4:	2200      	movs	r2, #0
 8007fe6:	601a      	str	r2, [r3, #0]
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( xYieldPending != pdFALSE )
 8007fe8:	4b10      	ldr	r3, [pc, #64]	; (800802c <xTaskResumeAll+0x130>)
 8007fea:	681b      	ldr	r3, [r3, #0]
 8007fec:	2b00      	cmp	r3, #0
 8007fee:	d009      	beq.n	8008004 <xTaskResumeAll+0x108>
				{
					#if( configUSE_PREEMPTION != 0 )
					{
						xAlreadyYielded = pdTRUE;
 8007ff0:	2301      	movs	r3, #1
 8007ff2:	60bb      	str	r3, [r7, #8]
					}
					#endif
					taskYIELD_IF_USING_PREEMPTION();
 8007ff4:	4b0f      	ldr	r3, [pc, #60]	; (8008034 <xTaskResumeAll+0x138>)
 8007ff6:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8007ffa:	601a      	str	r2, [r3, #0]
 8007ffc:	f3bf 8f4f 	dsb	sy
 8008000:	f3bf 8f6f 	isb	sy
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 8008004:	f001 f8fe 	bl	8009204 <vPortExitCritical>

	return xAlreadyYielded;
 8008008:	68bb      	ldr	r3, [r7, #8]
}
 800800a:	4618      	mov	r0, r3
 800800c:	3710      	adds	r7, #16
 800800e:	46bd      	mov	sp, r7
 8008010:	bd80      	pop	{r7, pc}
 8008012:	bf00      	nop
 8008014:	20000f80 	.word	0x20000f80
 8008018:	20000f58 	.word	0x20000f58
 800801c:	20000f18 	.word	0x20000f18
 8008020:	20000f60 	.word	0x20000f60
 8008024:	20000a88 	.word	0x20000a88
 8008028:	20000a84 	.word	0x20000a84
 800802c:	20000f6c 	.word	0x20000f6c
 8008030:	20000f68 	.word	0x20000f68
 8008034:	e000ed04 	.word	0xe000ed04

08008038 <xTaskGetTickCount>:
/*-----------------------------------------------------------*/

TickType_t xTaskGetTickCount( void )
{
 8008038:	b480      	push	{r7}
 800803a:	b083      	sub	sp, #12
 800803c:	af00      	add	r7, sp, #0
TickType_t xTicks;

	/* Critical section required if running on a 16 bit processor. */
	portTICK_TYPE_ENTER_CRITICAL();
	{
		xTicks = xTickCount;
 800803e:	4b05      	ldr	r3, [pc, #20]	; (8008054 <xTaskGetTickCount+0x1c>)
 8008040:	681b      	ldr	r3, [r3, #0]
 8008042:	607b      	str	r3, [r7, #4]
	}
	portTICK_TYPE_EXIT_CRITICAL();

	return xTicks;
 8008044:	687b      	ldr	r3, [r7, #4]
}
 8008046:	4618      	mov	r0, r3
 8008048:	370c      	adds	r7, #12
 800804a:	46bd      	mov	sp, r7
 800804c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008050:	4770      	bx	lr
 8008052:	bf00      	nop
 8008054:	20000f5c 	.word	0x20000f5c

08008058 <xTaskIncrementTick>:

#endif /* INCLUDE_xTaskAbortDelay */
/*----------------------------------------------------------*/

BaseType_t xTaskIncrementTick( void )
{
 8008058:	b580      	push	{r7, lr}
 800805a:	b086      	sub	sp, #24
 800805c:	af00      	add	r7, sp, #0
TCB_t * pxTCB;
TickType_t xItemValue;
BaseType_t xSwitchRequired = pdFALSE;
 800805e:	2300      	movs	r3, #0
 8008060:	617b      	str	r3, [r7, #20]

	/* Called by the portable layer each time a tick interrupt occurs.
	Increments the tick then checks to see if the new tick value will cause any
	tasks to be unblocked. */
	traceTASK_INCREMENT_TICK( xTickCount );
	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8008062:	4b4f      	ldr	r3, [pc, #316]	; (80081a0 <xTaskIncrementTick+0x148>)
 8008064:	681b      	ldr	r3, [r3, #0]
 8008066:	2b00      	cmp	r3, #0
 8008068:	f040 808f 	bne.w	800818a <xTaskIncrementTick+0x132>
	{
		/* Minor optimisation.  The tick count cannot change in this
		block. */
		const TickType_t xConstTickCount = xTickCount + ( TickType_t ) 1;
 800806c:	4b4d      	ldr	r3, [pc, #308]	; (80081a4 <xTaskIncrementTick+0x14c>)
 800806e:	681b      	ldr	r3, [r3, #0]
 8008070:	3301      	adds	r3, #1
 8008072:	613b      	str	r3, [r7, #16]

		/* Increment the RTOS tick, switching the delayed and overflowed
		delayed lists if it wraps to 0. */
		xTickCount = xConstTickCount;
 8008074:	4a4b      	ldr	r2, [pc, #300]	; (80081a4 <xTaskIncrementTick+0x14c>)
 8008076:	693b      	ldr	r3, [r7, #16]
 8008078:	6013      	str	r3, [r2, #0]

		if( xConstTickCount == ( TickType_t ) 0U ) /*lint !e774 'if' does not always evaluate to false as it is looking for an overflow. */
 800807a:	693b      	ldr	r3, [r7, #16]
 800807c:	2b00      	cmp	r3, #0
 800807e:	d120      	bne.n	80080c2 <xTaskIncrementTick+0x6a>
		{
			taskSWITCH_DELAYED_LISTS();
 8008080:	4b49      	ldr	r3, [pc, #292]	; (80081a8 <xTaskIncrementTick+0x150>)
 8008082:	681b      	ldr	r3, [r3, #0]
 8008084:	681b      	ldr	r3, [r3, #0]
 8008086:	2b00      	cmp	r3, #0
 8008088:	d00a      	beq.n	80080a0 <xTaskIncrementTick+0x48>
	__asm volatile
 800808a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800808e:	f383 8811 	msr	BASEPRI, r3
 8008092:	f3bf 8f6f 	isb	sy
 8008096:	f3bf 8f4f 	dsb	sy
 800809a:	603b      	str	r3, [r7, #0]
}
 800809c:	bf00      	nop
 800809e:	e7fe      	b.n	800809e <xTaskIncrementTick+0x46>
 80080a0:	4b41      	ldr	r3, [pc, #260]	; (80081a8 <xTaskIncrementTick+0x150>)
 80080a2:	681b      	ldr	r3, [r3, #0]
 80080a4:	60fb      	str	r3, [r7, #12]
 80080a6:	4b41      	ldr	r3, [pc, #260]	; (80081ac <xTaskIncrementTick+0x154>)
 80080a8:	681b      	ldr	r3, [r3, #0]
 80080aa:	4a3f      	ldr	r2, [pc, #252]	; (80081a8 <xTaskIncrementTick+0x150>)
 80080ac:	6013      	str	r3, [r2, #0]
 80080ae:	4a3f      	ldr	r2, [pc, #252]	; (80081ac <xTaskIncrementTick+0x154>)
 80080b0:	68fb      	ldr	r3, [r7, #12]
 80080b2:	6013      	str	r3, [r2, #0]
 80080b4:	4b3e      	ldr	r3, [pc, #248]	; (80081b0 <xTaskIncrementTick+0x158>)
 80080b6:	681b      	ldr	r3, [r3, #0]
 80080b8:	3301      	adds	r3, #1
 80080ba:	4a3d      	ldr	r2, [pc, #244]	; (80081b0 <xTaskIncrementTick+0x158>)
 80080bc:	6013      	str	r3, [r2, #0]
 80080be:	f000 faf7 	bl	80086b0 <prvResetNextTaskUnblockTime>

		/* See if this tick has made a timeout expire.  Tasks are stored in
		the	queue in the order of their wake time - meaning once one task
		has been found whose block time has not expired there is no need to
		look any further down the list. */
		if( xConstTickCount >= xNextTaskUnblockTime )
 80080c2:	4b3c      	ldr	r3, [pc, #240]	; (80081b4 <xTaskIncrementTick+0x15c>)
 80080c4:	681b      	ldr	r3, [r3, #0]
 80080c6:	693a      	ldr	r2, [r7, #16]
 80080c8:	429a      	cmp	r2, r3
 80080ca:	d349      	bcc.n	8008160 <xTaskIncrementTick+0x108>
		{
			for( ;; )
			{
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 80080cc:	4b36      	ldr	r3, [pc, #216]	; (80081a8 <xTaskIncrementTick+0x150>)
 80080ce:	681b      	ldr	r3, [r3, #0]
 80080d0:	681b      	ldr	r3, [r3, #0]
 80080d2:	2b00      	cmp	r3, #0
 80080d4:	d104      	bne.n	80080e0 <xTaskIncrementTick+0x88>
					/* The delayed list is empty.  Set xNextTaskUnblockTime
					to the maximum possible value so it is extremely
					unlikely that the
					if( xTickCount >= xNextTaskUnblockTime ) test will pass
					next time through. */
					xNextTaskUnblockTime = portMAX_DELAY; /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 80080d6:	4b37      	ldr	r3, [pc, #220]	; (80081b4 <xTaskIncrementTick+0x15c>)
 80080d8:	f04f 32ff 	mov.w	r2, #4294967295
 80080dc:	601a      	str	r2, [r3, #0]
					break;
 80080de:	e03f      	b.n	8008160 <xTaskIncrementTick+0x108>
				{
					/* The delayed list is not empty, get the value of the
					item at the head of the delayed list.  This is the time
					at which the task at the head of the delayed list must
					be removed from the Blocked state. */
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 80080e0:	4b31      	ldr	r3, [pc, #196]	; (80081a8 <xTaskIncrementTick+0x150>)
 80080e2:	681b      	ldr	r3, [r3, #0]
 80080e4:	68db      	ldr	r3, [r3, #12]
 80080e6:	68db      	ldr	r3, [r3, #12]
 80080e8:	60bb      	str	r3, [r7, #8]
					xItemValue = listGET_LIST_ITEM_VALUE( &( pxTCB->xStateListItem ) );
 80080ea:	68bb      	ldr	r3, [r7, #8]
 80080ec:	685b      	ldr	r3, [r3, #4]
 80080ee:	607b      	str	r3, [r7, #4]

					if( xConstTickCount < xItemValue )
 80080f0:	693a      	ldr	r2, [r7, #16]
 80080f2:	687b      	ldr	r3, [r7, #4]
 80080f4:	429a      	cmp	r2, r3
 80080f6:	d203      	bcs.n	8008100 <xTaskIncrementTick+0xa8>
						/* It is not time to unblock this item yet, but the
						item value is the time at which the task at the head
						of the blocked list must be removed from the Blocked
						state -	so record the item value in
						xNextTaskUnblockTime. */
						xNextTaskUnblockTime = xItemValue;
 80080f8:	4a2e      	ldr	r2, [pc, #184]	; (80081b4 <xTaskIncrementTick+0x15c>)
 80080fa:	687b      	ldr	r3, [r7, #4]
 80080fc:	6013      	str	r3, [r2, #0]
						break; /*lint !e9011 Code structure here is deedmed easier to understand with multiple breaks. */
 80080fe:	e02f      	b.n	8008160 <xTaskIncrementTick+0x108>
					{
						mtCOVERAGE_TEST_MARKER();
					}

					/* It is time to remove the item from the Blocked state. */
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8008100:	68bb      	ldr	r3, [r7, #8]
 8008102:	3304      	adds	r3, #4
 8008104:	4618      	mov	r0, r3
 8008106:	f7fe fe91 	bl	8006e2c <uxListRemove>

					/* Is the task waiting on an event also?  If so remove
					it from the event list. */
					if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
 800810a:	68bb      	ldr	r3, [r7, #8]
 800810c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800810e:	2b00      	cmp	r3, #0
 8008110:	d004      	beq.n	800811c <xTaskIncrementTick+0xc4>
					{
						( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 8008112:	68bb      	ldr	r3, [r7, #8]
 8008114:	3318      	adds	r3, #24
 8008116:	4618      	mov	r0, r3
 8008118:	f7fe fe88 	bl	8006e2c <uxListRemove>
						mtCOVERAGE_TEST_MARKER();
					}

					/* Place the unblocked task into the appropriate ready
					list. */
					prvAddTaskToReadyList( pxTCB );
 800811c:	68bb      	ldr	r3, [r7, #8]
 800811e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8008120:	4b25      	ldr	r3, [pc, #148]	; (80081b8 <xTaskIncrementTick+0x160>)
 8008122:	681b      	ldr	r3, [r3, #0]
 8008124:	429a      	cmp	r2, r3
 8008126:	d903      	bls.n	8008130 <xTaskIncrementTick+0xd8>
 8008128:	68bb      	ldr	r3, [r7, #8]
 800812a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800812c:	4a22      	ldr	r2, [pc, #136]	; (80081b8 <xTaskIncrementTick+0x160>)
 800812e:	6013      	str	r3, [r2, #0]
 8008130:	68bb      	ldr	r3, [r7, #8]
 8008132:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8008134:	4613      	mov	r3, r2
 8008136:	009b      	lsls	r3, r3, #2
 8008138:	4413      	add	r3, r2
 800813a:	009b      	lsls	r3, r3, #2
 800813c:	4a1f      	ldr	r2, [pc, #124]	; (80081bc <xTaskIncrementTick+0x164>)
 800813e:	441a      	add	r2, r3
 8008140:	68bb      	ldr	r3, [r7, #8]
 8008142:	3304      	adds	r3, #4
 8008144:	4619      	mov	r1, r3
 8008146:	4610      	mov	r0, r2
 8008148:	f7fe fe13 	bl	8006d72 <vListInsertEnd>
					{
						/* Preemption is on, but a context switch should
						only be performed if the unblocked task has a
						priority that is equal to or higher than the
						currently executing task. */
						if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 800814c:	68bb      	ldr	r3, [r7, #8]
 800814e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8008150:	4b1b      	ldr	r3, [pc, #108]	; (80081c0 <xTaskIncrementTick+0x168>)
 8008152:	681b      	ldr	r3, [r3, #0]
 8008154:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8008156:	429a      	cmp	r2, r3
 8008158:	d3b8      	bcc.n	80080cc <xTaskIncrementTick+0x74>
						{
							xSwitchRequired = pdTRUE;
 800815a:	2301      	movs	r3, #1
 800815c:	617b      	str	r3, [r7, #20]
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 800815e:	e7b5      	b.n	80080cc <xTaskIncrementTick+0x74>
		/* Tasks of equal priority to the currently running task will share
		processing time (time slice) if preemption is on, and the application
		writer has not explicitly turned time slicing off. */
		#if ( ( configUSE_PREEMPTION == 1 ) && ( configUSE_TIME_SLICING == 1 ) )
		{
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ pxCurrentTCB->uxPriority ] ) ) > ( UBaseType_t ) 1 )
 8008160:	4b17      	ldr	r3, [pc, #92]	; (80081c0 <xTaskIncrementTick+0x168>)
 8008162:	681b      	ldr	r3, [r3, #0]
 8008164:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8008166:	4915      	ldr	r1, [pc, #84]	; (80081bc <xTaskIncrementTick+0x164>)
 8008168:	4613      	mov	r3, r2
 800816a:	009b      	lsls	r3, r3, #2
 800816c:	4413      	add	r3, r2
 800816e:	009b      	lsls	r3, r3, #2
 8008170:	440b      	add	r3, r1
 8008172:	681b      	ldr	r3, [r3, #0]
 8008174:	2b01      	cmp	r3, #1
 8008176:	d901      	bls.n	800817c <xTaskIncrementTick+0x124>
			{
				xSwitchRequired = pdTRUE;
 8008178:	2301      	movs	r3, #1
 800817a:	617b      	str	r3, [r7, #20]
		}
		#endif /* configUSE_TICK_HOOK */

		#if ( configUSE_PREEMPTION == 1 )
		{
			if( xYieldPending != pdFALSE )
 800817c:	4b11      	ldr	r3, [pc, #68]	; (80081c4 <xTaskIncrementTick+0x16c>)
 800817e:	681b      	ldr	r3, [r3, #0]
 8008180:	2b00      	cmp	r3, #0
 8008182:	d007      	beq.n	8008194 <xTaskIncrementTick+0x13c>
			{
				xSwitchRequired = pdTRUE;
 8008184:	2301      	movs	r3, #1
 8008186:	617b      	str	r3, [r7, #20]
 8008188:	e004      	b.n	8008194 <xTaskIncrementTick+0x13c>
		}
		#endif /* configUSE_PREEMPTION */
	}
	else
	{
		++xPendedTicks;
 800818a:	4b0f      	ldr	r3, [pc, #60]	; (80081c8 <xTaskIncrementTick+0x170>)
 800818c:	681b      	ldr	r3, [r3, #0]
 800818e:	3301      	adds	r3, #1
 8008190:	4a0d      	ldr	r2, [pc, #52]	; (80081c8 <xTaskIncrementTick+0x170>)
 8008192:	6013      	str	r3, [r2, #0]
			vApplicationTickHook();
		}
		#endif
	}

	return xSwitchRequired;
 8008194:	697b      	ldr	r3, [r7, #20]
}
 8008196:	4618      	mov	r0, r3
 8008198:	3718      	adds	r7, #24
 800819a:	46bd      	mov	sp, r7
 800819c:	bd80      	pop	{r7, pc}
 800819e:	bf00      	nop
 80081a0:	20000f80 	.word	0x20000f80
 80081a4:	20000f5c 	.word	0x20000f5c
 80081a8:	20000f10 	.word	0x20000f10
 80081ac:	20000f14 	.word	0x20000f14
 80081b0:	20000f70 	.word	0x20000f70
 80081b4:	20000f78 	.word	0x20000f78
 80081b8:	20000f60 	.word	0x20000f60
 80081bc:	20000a88 	.word	0x20000a88
 80081c0:	20000a84 	.word	0x20000a84
 80081c4:	20000f6c 	.word	0x20000f6c
 80081c8:	20000f68 	.word	0x20000f68

080081cc <vTaskSwitchContext>:

#endif /* configUSE_APPLICATION_TASK_TAG */
/*-----------------------------------------------------------*/

void vTaskSwitchContext( void )
{
 80081cc:	b580      	push	{r7, lr}
 80081ce:	b086      	sub	sp, #24
 80081d0:	af00      	add	r7, sp, #0
	if( uxSchedulerSuspended != ( UBaseType_t ) pdFALSE )
 80081d2:	4b3a      	ldr	r3, [pc, #232]	; (80082bc <vTaskSwitchContext+0xf0>)
 80081d4:	681b      	ldr	r3, [r3, #0]
 80081d6:	2b00      	cmp	r3, #0
 80081d8:	d003      	beq.n	80081e2 <vTaskSwitchContext+0x16>
	{
		/* The scheduler is currently suspended - do not allow a context
		switch. */
		xYieldPending = pdTRUE;
 80081da:	4b39      	ldr	r3, [pc, #228]	; (80082c0 <vTaskSwitchContext+0xf4>)
 80081dc:	2201      	movs	r2, #1
 80081de:	601a      	str	r2, [r3, #0]
			for additional information. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */
	}
}
 80081e0:	e068      	b.n	80082b4 <vTaskSwitchContext+0xe8>
		xYieldPending = pdFALSE;
 80081e2:	4b37      	ldr	r3, [pc, #220]	; (80082c0 <vTaskSwitchContext+0xf4>)
 80081e4:	2200      	movs	r2, #0
 80081e6:	601a      	str	r2, [r3, #0]
		taskCHECK_FOR_STACK_OVERFLOW();
 80081e8:	4b36      	ldr	r3, [pc, #216]	; (80082c4 <vTaskSwitchContext+0xf8>)
 80081ea:	681b      	ldr	r3, [r3, #0]
 80081ec:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80081ee:	613b      	str	r3, [r7, #16]
 80081f0:	f04f 33a5 	mov.w	r3, #2779096485	; 0xa5a5a5a5
 80081f4:	60fb      	str	r3, [r7, #12]
 80081f6:	693b      	ldr	r3, [r7, #16]
 80081f8:	681b      	ldr	r3, [r3, #0]
 80081fa:	68fa      	ldr	r2, [r7, #12]
 80081fc:	429a      	cmp	r2, r3
 80081fe:	d111      	bne.n	8008224 <vTaskSwitchContext+0x58>
 8008200:	693b      	ldr	r3, [r7, #16]
 8008202:	3304      	adds	r3, #4
 8008204:	681b      	ldr	r3, [r3, #0]
 8008206:	68fa      	ldr	r2, [r7, #12]
 8008208:	429a      	cmp	r2, r3
 800820a:	d10b      	bne.n	8008224 <vTaskSwitchContext+0x58>
 800820c:	693b      	ldr	r3, [r7, #16]
 800820e:	3308      	adds	r3, #8
 8008210:	681b      	ldr	r3, [r3, #0]
 8008212:	68fa      	ldr	r2, [r7, #12]
 8008214:	429a      	cmp	r2, r3
 8008216:	d105      	bne.n	8008224 <vTaskSwitchContext+0x58>
 8008218:	693b      	ldr	r3, [r7, #16]
 800821a:	330c      	adds	r3, #12
 800821c:	681b      	ldr	r3, [r3, #0]
 800821e:	68fa      	ldr	r2, [r7, #12]
 8008220:	429a      	cmp	r2, r3
 8008222:	d008      	beq.n	8008236 <vTaskSwitchContext+0x6a>
 8008224:	4b27      	ldr	r3, [pc, #156]	; (80082c4 <vTaskSwitchContext+0xf8>)
 8008226:	681a      	ldr	r2, [r3, #0]
 8008228:	4b26      	ldr	r3, [pc, #152]	; (80082c4 <vTaskSwitchContext+0xf8>)
 800822a:	681b      	ldr	r3, [r3, #0]
 800822c:	3334      	adds	r3, #52	; 0x34
 800822e:	4619      	mov	r1, r3
 8008230:	4610      	mov	r0, r2
 8008232:	f7f8 f9b6 	bl	80005a2 <vApplicationStackOverflowHook>
		taskSELECT_HIGHEST_PRIORITY_TASK(); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8008236:	4b24      	ldr	r3, [pc, #144]	; (80082c8 <vTaskSwitchContext+0xfc>)
 8008238:	681b      	ldr	r3, [r3, #0]
 800823a:	617b      	str	r3, [r7, #20]
 800823c:	e010      	b.n	8008260 <vTaskSwitchContext+0x94>
 800823e:	697b      	ldr	r3, [r7, #20]
 8008240:	2b00      	cmp	r3, #0
 8008242:	d10a      	bne.n	800825a <vTaskSwitchContext+0x8e>
	__asm volatile
 8008244:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008248:	f383 8811 	msr	BASEPRI, r3
 800824c:	f3bf 8f6f 	isb	sy
 8008250:	f3bf 8f4f 	dsb	sy
 8008254:	607b      	str	r3, [r7, #4]
}
 8008256:	bf00      	nop
 8008258:	e7fe      	b.n	8008258 <vTaskSwitchContext+0x8c>
 800825a:	697b      	ldr	r3, [r7, #20]
 800825c:	3b01      	subs	r3, #1
 800825e:	617b      	str	r3, [r7, #20]
 8008260:	491a      	ldr	r1, [pc, #104]	; (80082cc <vTaskSwitchContext+0x100>)
 8008262:	697a      	ldr	r2, [r7, #20]
 8008264:	4613      	mov	r3, r2
 8008266:	009b      	lsls	r3, r3, #2
 8008268:	4413      	add	r3, r2
 800826a:	009b      	lsls	r3, r3, #2
 800826c:	440b      	add	r3, r1
 800826e:	681b      	ldr	r3, [r3, #0]
 8008270:	2b00      	cmp	r3, #0
 8008272:	d0e4      	beq.n	800823e <vTaskSwitchContext+0x72>
 8008274:	697a      	ldr	r2, [r7, #20]
 8008276:	4613      	mov	r3, r2
 8008278:	009b      	lsls	r3, r3, #2
 800827a:	4413      	add	r3, r2
 800827c:	009b      	lsls	r3, r3, #2
 800827e:	4a13      	ldr	r2, [pc, #76]	; (80082cc <vTaskSwitchContext+0x100>)
 8008280:	4413      	add	r3, r2
 8008282:	60bb      	str	r3, [r7, #8]
 8008284:	68bb      	ldr	r3, [r7, #8]
 8008286:	685b      	ldr	r3, [r3, #4]
 8008288:	685a      	ldr	r2, [r3, #4]
 800828a:	68bb      	ldr	r3, [r7, #8]
 800828c:	605a      	str	r2, [r3, #4]
 800828e:	68bb      	ldr	r3, [r7, #8]
 8008290:	685a      	ldr	r2, [r3, #4]
 8008292:	68bb      	ldr	r3, [r7, #8]
 8008294:	3308      	adds	r3, #8
 8008296:	429a      	cmp	r2, r3
 8008298:	d104      	bne.n	80082a4 <vTaskSwitchContext+0xd8>
 800829a:	68bb      	ldr	r3, [r7, #8]
 800829c:	685b      	ldr	r3, [r3, #4]
 800829e:	685a      	ldr	r2, [r3, #4]
 80082a0:	68bb      	ldr	r3, [r7, #8]
 80082a2:	605a      	str	r2, [r3, #4]
 80082a4:	68bb      	ldr	r3, [r7, #8]
 80082a6:	685b      	ldr	r3, [r3, #4]
 80082a8:	68db      	ldr	r3, [r3, #12]
 80082aa:	4a06      	ldr	r2, [pc, #24]	; (80082c4 <vTaskSwitchContext+0xf8>)
 80082ac:	6013      	str	r3, [r2, #0]
 80082ae:	4a06      	ldr	r2, [pc, #24]	; (80082c8 <vTaskSwitchContext+0xfc>)
 80082b0:	697b      	ldr	r3, [r7, #20]
 80082b2:	6013      	str	r3, [r2, #0]
}
 80082b4:	bf00      	nop
 80082b6:	3718      	adds	r7, #24
 80082b8:	46bd      	mov	sp, r7
 80082ba:	bd80      	pop	{r7, pc}
 80082bc:	20000f80 	.word	0x20000f80
 80082c0:	20000f6c 	.word	0x20000f6c
 80082c4:	20000a84 	.word	0x20000a84
 80082c8:	20000f60 	.word	0x20000f60
 80082cc:	20000a88 	.word	0x20000a88

080082d0 <vTaskPlaceOnEventList>:
/*-----------------------------------------------------------*/

void vTaskPlaceOnEventList( List_t * const pxEventList, const TickType_t xTicksToWait )
{
 80082d0:	b580      	push	{r7, lr}
 80082d2:	b084      	sub	sp, #16
 80082d4:	af00      	add	r7, sp, #0
 80082d6:	6078      	str	r0, [r7, #4]
 80082d8:	6039      	str	r1, [r7, #0]
	configASSERT( pxEventList );
 80082da:	687b      	ldr	r3, [r7, #4]
 80082dc:	2b00      	cmp	r3, #0
 80082de:	d10a      	bne.n	80082f6 <vTaskPlaceOnEventList+0x26>
	__asm volatile
 80082e0:	f04f 0350 	mov.w	r3, #80	; 0x50
 80082e4:	f383 8811 	msr	BASEPRI, r3
 80082e8:	f3bf 8f6f 	isb	sy
 80082ec:	f3bf 8f4f 	dsb	sy
 80082f0:	60fb      	str	r3, [r7, #12]
}
 80082f2:	bf00      	nop
 80082f4:	e7fe      	b.n	80082f4 <vTaskPlaceOnEventList+0x24>

	/* Place the event list item of the TCB in the appropriate event list.
	This is placed in the list in priority order so the highest priority task
	is the first to be woken by the event.  The queue that contains the event
	list is locked, preventing simultaneous access from interrupts. */
	vListInsert( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 80082f6:	4b07      	ldr	r3, [pc, #28]	; (8008314 <vTaskPlaceOnEventList+0x44>)
 80082f8:	681b      	ldr	r3, [r3, #0]
 80082fa:	3318      	adds	r3, #24
 80082fc:	4619      	mov	r1, r3
 80082fe:	6878      	ldr	r0, [r7, #4]
 8008300:	f7fe fd5b 	bl	8006dba <vListInsert>

	prvAddCurrentTaskToDelayedList( xTicksToWait, pdTRUE );
 8008304:	2101      	movs	r1, #1
 8008306:	6838      	ldr	r0, [r7, #0]
 8008308:	f000 fa7e 	bl	8008808 <prvAddCurrentTaskToDelayedList>
}
 800830c:	bf00      	nop
 800830e:	3710      	adds	r7, #16
 8008310:	46bd      	mov	sp, r7
 8008312:	bd80      	pop	{r7, pc}
 8008314:	20000a84 	.word	0x20000a84

08008318 <vTaskPlaceOnEventListRestricted>:
/*-----------------------------------------------------------*/

#if( configUSE_TIMERS == 1 )

	void vTaskPlaceOnEventListRestricted( List_t * const pxEventList, TickType_t xTicksToWait, const BaseType_t xWaitIndefinitely )
	{
 8008318:	b580      	push	{r7, lr}
 800831a:	b086      	sub	sp, #24
 800831c:	af00      	add	r7, sp, #0
 800831e:	60f8      	str	r0, [r7, #12]
 8008320:	60b9      	str	r1, [r7, #8]
 8008322:	607a      	str	r2, [r7, #4]
		configASSERT( pxEventList );
 8008324:	68fb      	ldr	r3, [r7, #12]
 8008326:	2b00      	cmp	r3, #0
 8008328:	d10a      	bne.n	8008340 <vTaskPlaceOnEventListRestricted+0x28>
	__asm volatile
 800832a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800832e:	f383 8811 	msr	BASEPRI, r3
 8008332:	f3bf 8f6f 	isb	sy
 8008336:	f3bf 8f4f 	dsb	sy
 800833a:	617b      	str	r3, [r7, #20]
}
 800833c:	bf00      	nop
 800833e:	e7fe      	b.n	800833e <vTaskPlaceOnEventListRestricted+0x26>

		/* Place the event list item of the TCB in the appropriate event list.
		In this case it is assume that this is the only task that is going to
		be waiting on this event list, so the faster vListInsertEnd() function
		can be used in place of vListInsert. */
		vListInsertEnd( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 8008340:	4b0a      	ldr	r3, [pc, #40]	; (800836c <vTaskPlaceOnEventListRestricted+0x54>)
 8008342:	681b      	ldr	r3, [r3, #0]
 8008344:	3318      	adds	r3, #24
 8008346:	4619      	mov	r1, r3
 8008348:	68f8      	ldr	r0, [r7, #12]
 800834a:	f7fe fd12 	bl	8006d72 <vListInsertEnd>

		/* If the task should block indefinitely then set the block time to a
		value that will be recognised as an indefinite delay inside the
		prvAddCurrentTaskToDelayedList() function. */
		if( xWaitIndefinitely != pdFALSE )
 800834e:	687b      	ldr	r3, [r7, #4]
 8008350:	2b00      	cmp	r3, #0
 8008352:	d002      	beq.n	800835a <vTaskPlaceOnEventListRestricted+0x42>
		{
			xTicksToWait = portMAX_DELAY;
 8008354:	f04f 33ff 	mov.w	r3, #4294967295
 8008358:	60bb      	str	r3, [r7, #8]
		}

		traceTASK_DELAY_UNTIL( ( xTickCount + xTicksToWait ) );
		prvAddCurrentTaskToDelayedList( xTicksToWait, xWaitIndefinitely );
 800835a:	6879      	ldr	r1, [r7, #4]
 800835c:	68b8      	ldr	r0, [r7, #8]
 800835e:	f000 fa53 	bl	8008808 <prvAddCurrentTaskToDelayedList>
	}
 8008362:	bf00      	nop
 8008364:	3718      	adds	r7, #24
 8008366:	46bd      	mov	sp, r7
 8008368:	bd80      	pop	{r7, pc}
 800836a:	bf00      	nop
 800836c:	20000a84 	.word	0x20000a84

08008370 <xTaskRemoveFromEventList>:

#endif /* configUSE_TIMERS */
/*-----------------------------------------------------------*/

BaseType_t xTaskRemoveFromEventList( const List_t * const pxEventList )
{
 8008370:	b580      	push	{r7, lr}
 8008372:	b086      	sub	sp, #24
 8008374:	af00      	add	r7, sp, #0
 8008376:	6078      	str	r0, [r7, #4]
	get called - the lock count on the queue will get modified instead.  This
	means exclusive access to the event list is guaranteed here.

	This function assumes that a check has already been made to ensure that
	pxEventList is not empty. */
	pxUnblockedTCB = listGET_OWNER_OF_HEAD_ENTRY( pxEventList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8008378:	687b      	ldr	r3, [r7, #4]
 800837a:	68db      	ldr	r3, [r3, #12]
 800837c:	68db      	ldr	r3, [r3, #12]
 800837e:	613b      	str	r3, [r7, #16]
	configASSERT( pxUnblockedTCB );
 8008380:	693b      	ldr	r3, [r7, #16]
 8008382:	2b00      	cmp	r3, #0
 8008384:	d10a      	bne.n	800839c <xTaskRemoveFromEventList+0x2c>
	__asm volatile
 8008386:	f04f 0350 	mov.w	r3, #80	; 0x50
 800838a:	f383 8811 	msr	BASEPRI, r3
 800838e:	f3bf 8f6f 	isb	sy
 8008392:	f3bf 8f4f 	dsb	sy
 8008396:	60fb      	str	r3, [r7, #12]
}
 8008398:	bf00      	nop
 800839a:	e7fe      	b.n	800839a <xTaskRemoveFromEventList+0x2a>
	( void ) uxListRemove( &( pxUnblockedTCB->xEventListItem ) );
 800839c:	693b      	ldr	r3, [r7, #16]
 800839e:	3318      	adds	r3, #24
 80083a0:	4618      	mov	r0, r3
 80083a2:	f7fe fd43 	bl	8006e2c <uxListRemove>

	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 80083a6:	4b1e      	ldr	r3, [pc, #120]	; (8008420 <xTaskRemoveFromEventList+0xb0>)
 80083a8:	681b      	ldr	r3, [r3, #0]
 80083aa:	2b00      	cmp	r3, #0
 80083ac:	d11d      	bne.n	80083ea <xTaskRemoveFromEventList+0x7a>
	{
		( void ) uxListRemove( &( pxUnblockedTCB->xStateListItem ) );
 80083ae:	693b      	ldr	r3, [r7, #16]
 80083b0:	3304      	adds	r3, #4
 80083b2:	4618      	mov	r0, r3
 80083b4:	f7fe fd3a 	bl	8006e2c <uxListRemove>
		prvAddTaskToReadyList( pxUnblockedTCB );
 80083b8:	693b      	ldr	r3, [r7, #16]
 80083ba:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80083bc:	4b19      	ldr	r3, [pc, #100]	; (8008424 <xTaskRemoveFromEventList+0xb4>)
 80083be:	681b      	ldr	r3, [r3, #0]
 80083c0:	429a      	cmp	r2, r3
 80083c2:	d903      	bls.n	80083cc <xTaskRemoveFromEventList+0x5c>
 80083c4:	693b      	ldr	r3, [r7, #16]
 80083c6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80083c8:	4a16      	ldr	r2, [pc, #88]	; (8008424 <xTaskRemoveFromEventList+0xb4>)
 80083ca:	6013      	str	r3, [r2, #0]
 80083cc:	693b      	ldr	r3, [r7, #16]
 80083ce:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80083d0:	4613      	mov	r3, r2
 80083d2:	009b      	lsls	r3, r3, #2
 80083d4:	4413      	add	r3, r2
 80083d6:	009b      	lsls	r3, r3, #2
 80083d8:	4a13      	ldr	r2, [pc, #76]	; (8008428 <xTaskRemoveFromEventList+0xb8>)
 80083da:	441a      	add	r2, r3
 80083dc:	693b      	ldr	r3, [r7, #16]
 80083de:	3304      	adds	r3, #4
 80083e0:	4619      	mov	r1, r3
 80083e2:	4610      	mov	r0, r2
 80083e4:	f7fe fcc5 	bl	8006d72 <vListInsertEnd>
 80083e8:	e005      	b.n	80083f6 <xTaskRemoveFromEventList+0x86>
	}
	else
	{
		/* The delayed and ready lists cannot be accessed, so hold this task
		pending until the scheduler is resumed. */
		vListInsertEnd( &( xPendingReadyList ), &( pxUnblockedTCB->xEventListItem ) );
 80083ea:	693b      	ldr	r3, [r7, #16]
 80083ec:	3318      	adds	r3, #24
 80083ee:	4619      	mov	r1, r3
 80083f0:	480e      	ldr	r0, [pc, #56]	; (800842c <xTaskRemoveFromEventList+0xbc>)
 80083f2:	f7fe fcbe 	bl	8006d72 <vListInsertEnd>
	}

	if( pxUnblockedTCB->uxPriority > pxCurrentTCB->uxPriority )
 80083f6:	693b      	ldr	r3, [r7, #16]
 80083f8:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80083fa:	4b0d      	ldr	r3, [pc, #52]	; (8008430 <xTaskRemoveFromEventList+0xc0>)
 80083fc:	681b      	ldr	r3, [r3, #0]
 80083fe:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8008400:	429a      	cmp	r2, r3
 8008402:	d905      	bls.n	8008410 <xTaskRemoveFromEventList+0xa0>
	{
		/* Return true if the task removed from the event list has a higher
		priority than the calling task.  This allows the calling task to know if
		it should force a context switch now. */
		xReturn = pdTRUE;
 8008404:	2301      	movs	r3, #1
 8008406:	617b      	str	r3, [r7, #20]

		/* Mark that a yield is pending in case the user is not using the
		"xHigherPriorityTaskWoken" parameter to an ISR safe FreeRTOS function. */
		xYieldPending = pdTRUE;
 8008408:	4b0a      	ldr	r3, [pc, #40]	; (8008434 <xTaskRemoveFromEventList+0xc4>)
 800840a:	2201      	movs	r2, #1
 800840c:	601a      	str	r2, [r3, #0]
 800840e:	e001      	b.n	8008414 <xTaskRemoveFromEventList+0xa4>
	}
	else
	{
		xReturn = pdFALSE;
 8008410:	2300      	movs	r3, #0
 8008412:	617b      	str	r3, [r7, #20]
	}

	return xReturn;
 8008414:	697b      	ldr	r3, [r7, #20]
}
 8008416:	4618      	mov	r0, r3
 8008418:	3718      	adds	r7, #24
 800841a:	46bd      	mov	sp, r7
 800841c:	bd80      	pop	{r7, pc}
 800841e:	bf00      	nop
 8008420:	20000f80 	.word	0x20000f80
 8008424:	20000f60 	.word	0x20000f60
 8008428:	20000a88 	.word	0x20000a88
 800842c:	20000f18 	.word	0x20000f18
 8008430:	20000a84 	.word	0x20000a84
 8008434:	20000f6c 	.word	0x20000f6c

08008438 <vTaskInternalSetTimeOutState>:
	taskEXIT_CRITICAL();
}
/*-----------------------------------------------------------*/

void vTaskInternalSetTimeOutState( TimeOut_t * const pxTimeOut )
{
 8008438:	b480      	push	{r7}
 800843a:	b083      	sub	sp, #12
 800843c:	af00      	add	r7, sp, #0
 800843e:	6078      	str	r0, [r7, #4]
	/* For internal use only as it does not use a critical section. */
	pxTimeOut->xOverflowCount = xNumOfOverflows;
 8008440:	4b06      	ldr	r3, [pc, #24]	; (800845c <vTaskInternalSetTimeOutState+0x24>)
 8008442:	681a      	ldr	r2, [r3, #0]
 8008444:	687b      	ldr	r3, [r7, #4]
 8008446:	601a      	str	r2, [r3, #0]
	pxTimeOut->xTimeOnEntering = xTickCount;
 8008448:	4b05      	ldr	r3, [pc, #20]	; (8008460 <vTaskInternalSetTimeOutState+0x28>)
 800844a:	681a      	ldr	r2, [r3, #0]
 800844c:	687b      	ldr	r3, [r7, #4]
 800844e:	605a      	str	r2, [r3, #4]
}
 8008450:	bf00      	nop
 8008452:	370c      	adds	r7, #12
 8008454:	46bd      	mov	sp, r7
 8008456:	f85d 7b04 	ldr.w	r7, [sp], #4
 800845a:	4770      	bx	lr
 800845c:	20000f70 	.word	0x20000f70
 8008460:	20000f5c 	.word	0x20000f5c

08008464 <xTaskCheckForTimeOut>:
/*-----------------------------------------------------------*/

BaseType_t xTaskCheckForTimeOut( TimeOut_t * const pxTimeOut, TickType_t * const pxTicksToWait )
{
 8008464:	b580      	push	{r7, lr}
 8008466:	b088      	sub	sp, #32
 8008468:	af00      	add	r7, sp, #0
 800846a:	6078      	str	r0, [r7, #4]
 800846c:	6039      	str	r1, [r7, #0]
BaseType_t xReturn;

	configASSERT( pxTimeOut );
 800846e:	687b      	ldr	r3, [r7, #4]
 8008470:	2b00      	cmp	r3, #0
 8008472:	d10a      	bne.n	800848a <xTaskCheckForTimeOut+0x26>
	__asm volatile
 8008474:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008478:	f383 8811 	msr	BASEPRI, r3
 800847c:	f3bf 8f6f 	isb	sy
 8008480:	f3bf 8f4f 	dsb	sy
 8008484:	613b      	str	r3, [r7, #16]
}
 8008486:	bf00      	nop
 8008488:	e7fe      	b.n	8008488 <xTaskCheckForTimeOut+0x24>
	configASSERT( pxTicksToWait );
 800848a:	683b      	ldr	r3, [r7, #0]
 800848c:	2b00      	cmp	r3, #0
 800848e:	d10a      	bne.n	80084a6 <xTaskCheckForTimeOut+0x42>
	__asm volatile
 8008490:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008494:	f383 8811 	msr	BASEPRI, r3
 8008498:	f3bf 8f6f 	isb	sy
 800849c:	f3bf 8f4f 	dsb	sy
 80084a0:	60fb      	str	r3, [r7, #12]
}
 80084a2:	bf00      	nop
 80084a4:	e7fe      	b.n	80084a4 <xTaskCheckForTimeOut+0x40>

	taskENTER_CRITICAL();
 80084a6:	f000 fe7d 	bl	80091a4 <vPortEnterCritical>
	{
		/* Minor optimisation.  The tick count cannot change in this block. */
		const TickType_t xConstTickCount = xTickCount;
 80084aa:	4b1d      	ldr	r3, [pc, #116]	; (8008520 <xTaskCheckForTimeOut+0xbc>)
 80084ac:	681b      	ldr	r3, [r3, #0]
 80084ae:	61bb      	str	r3, [r7, #24]
		const TickType_t xElapsedTime = xConstTickCount - pxTimeOut->xTimeOnEntering;
 80084b0:	687b      	ldr	r3, [r7, #4]
 80084b2:	685b      	ldr	r3, [r3, #4]
 80084b4:	69ba      	ldr	r2, [r7, #24]
 80084b6:	1ad3      	subs	r3, r2, r3
 80084b8:	617b      	str	r3, [r7, #20]
			}
			else
		#endif

		#if ( INCLUDE_vTaskSuspend == 1 )
			if( *pxTicksToWait == portMAX_DELAY )
 80084ba:	683b      	ldr	r3, [r7, #0]
 80084bc:	681b      	ldr	r3, [r3, #0]
 80084be:	f1b3 3fff 	cmp.w	r3, #4294967295
 80084c2:	d102      	bne.n	80084ca <xTaskCheckForTimeOut+0x66>
			{
				/* If INCLUDE_vTaskSuspend is set to 1 and the block time
				specified is the maximum block time then the task should block
				indefinitely, and therefore never time out. */
				xReturn = pdFALSE;
 80084c4:	2300      	movs	r3, #0
 80084c6:	61fb      	str	r3, [r7, #28]
 80084c8:	e023      	b.n	8008512 <xTaskCheckForTimeOut+0xae>
			}
			else
		#endif

		if( ( xNumOfOverflows != pxTimeOut->xOverflowCount ) && ( xConstTickCount >= pxTimeOut->xTimeOnEntering ) ) /*lint !e525 Indentation preferred as is to make code within pre-processor directives clearer. */
 80084ca:	687b      	ldr	r3, [r7, #4]
 80084cc:	681a      	ldr	r2, [r3, #0]
 80084ce:	4b15      	ldr	r3, [pc, #84]	; (8008524 <xTaskCheckForTimeOut+0xc0>)
 80084d0:	681b      	ldr	r3, [r3, #0]
 80084d2:	429a      	cmp	r2, r3
 80084d4:	d007      	beq.n	80084e6 <xTaskCheckForTimeOut+0x82>
 80084d6:	687b      	ldr	r3, [r7, #4]
 80084d8:	685b      	ldr	r3, [r3, #4]
 80084da:	69ba      	ldr	r2, [r7, #24]
 80084dc:	429a      	cmp	r2, r3
 80084de:	d302      	bcc.n	80084e6 <xTaskCheckForTimeOut+0x82>
			/* The tick count is greater than the time at which
			vTaskSetTimeout() was called, but has also overflowed since
			vTaskSetTimeOut() was called.  It must have wrapped all the way
			around and gone past again. This passed since vTaskSetTimeout()
			was called. */
			xReturn = pdTRUE;
 80084e0:	2301      	movs	r3, #1
 80084e2:	61fb      	str	r3, [r7, #28]
 80084e4:	e015      	b.n	8008512 <xTaskCheckForTimeOut+0xae>
		}
		else if( xElapsedTime < *pxTicksToWait ) /*lint !e961 Explicit casting is only redundant with some compilers, whereas others require it to prevent integer conversion errors. */
 80084e6:	683b      	ldr	r3, [r7, #0]
 80084e8:	681b      	ldr	r3, [r3, #0]
 80084ea:	697a      	ldr	r2, [r7, #20]
 80084ec:	429a      	cmp	r2, r3
 80084ee:	d20b      	bcs.n	8008508 <xTaskCheckForTimeOut+0xa4>
		{
			/* Not a genuine timeout. Adjust parameters for time remaining. */
			*pxTicksToWait -= xElapsedTime;
 80084f0:	683b      	ldr	r3, [r7, #0]
 80084f2:	681a      	ldr	r2, [r3, #0]
 80084f4:	697b      	ldr	r3, [r7, #20]
 80084f6:	1ad2      	subs	r2, r2, r3
 80084f8:	683b      	ldr	r3, [r7, #0]
 80084fa:	601a      	str	r2, [r3, #0]
			vTaskInternalSetTimeOutState( pxTimeOut );
 80084fc:	6878      	ldr	r0, [r7, #4]
 80084fe:	f7ff ff9b 	bl	8008438 <vTaskInternalSetTimeOutState>
			xReturn = pdFALSE;
 8008502:	2300      	movs	r3, #0
 8008504:	61fb      	str	r3, [r7, #28]
 8008506:	e004      	b.n	8008512 <xTaskCheckForTimeOut+0xae>
		}
		else
		{
			*pxTicksToWait = 0;
 8008508:	683b      	ldr	r3, [r7, #0]
 800850a:	2200      	movs	r2, #0
 800850c:	601a      	str	r2, [r3, #0]
			xReturn = pdTRUE;
 800850e:	2301      	movs	r3, #1
 8008510:	61fb      	str	r3, [r7, #28]
		}
	}
	taskEXIT_CRITICAL();
 8008512:	f000 fe77 	bl	8009204 <vPortExitCritical>

	return xReturn;
 8008516:	69fb      	ldr	r3, [r7, #28]
}
 8008518:	4618      	mov	r0, r3
 800851a:	3720      	adds	r7, #32
 800851c:	46bd      	mov	sp, r7
 800851e:	bd80      	pop	{r7, pc}
 8008520:	20000f5c 	.word	0x20000f5c
 8008524:	20000f70 	.word	0x20000f70

08008528 <vTaskMissedYield>:
/*-----------------------------------------------------------*/

void vTaskMissedYield( void )
{
 8008528:	b480      	push	{r7}
 800852a:	af00      	add	r7, sp, #0
	xYieldPending = pdTRUE;
 800852c:	4b03      	ldr	r3, [pc, #12]	; (800853c <vTaskMissedYield+0x14>)
 800852e:	2201      	movs	r2, #1
 8008530:	601a      	str	r2, [r3, #0]
}
 8008532:	bf00      	nop
 8008534:	46bd      	mov	sp, r7
 8008536:	f85d 7b04 	ldr.w	r7, [sp], #4
 800853a:	4770      	bx	lr
 800853c:	20000f6c 	.word	0x20000f6c

08008540 <prvIdleTask>:
 *
 * void prvIdleTask( void *pvParameters );
 *
 */
static portTASK_FUNCTION( prvIdleTask, pvParameters )
{
 8008540:	b580      	push	{r7, lr}
 8008542:	b082      	sub	sp, #8
 8008544:	af00      	add	r7, sp, #0
 8008546:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* See if any tasks have deleted themselves - if so then the idle task
		is responsible for freeing the deleted task's TCB and stack. */
		prvCheckTasksWaitingTermination();
 8008548:	f000 f854 	bl	80085f4 <prvCheckTasksWaitingTermination>

			A critical region is not required here as we are just reading from
			the list, and an occasional incorrect value will not matter.  If
			the ready list at the idle priority contains more than one task
			then a task other than the idle task is ready to execute. */
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ tskIDLE_PRIORITY ] ) ) > ( UBaseType_t ) 1 )
 800854c:	4b07      	ldr	r3, [pc, #28]	; (800856c <prvIdleTask+0x2c>)
 800854e:	681b      	ldr	r3, [r3, #0]
 8008550:	2b01      	cmp	r3, #1
 8008552:	d907      	bls.n	8008564 <prvIdleTask+0x24>
			{
				taskYIELD();
 8008554:	4b06      	ldr	r3, [pc, #24]	; (8008570 <prvIdleTask+0x30>)
 8008556:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800855a:	601a      	str	r2, [r3, #0]
 800855c:	f3bf 8f4f 	dsb	sy
 8008560:	f3bf 8f6f 	isb	sy
			/* Call the user defined function from within the idle task.  This
			allows the application designer to add background functionality
			without the overhead of a separate task.
			NOTE: vApplicationIdleHook() MUST NOT, UNDER ANY CIRCUMSTANCES,
			CALL A FUNCTION THAT MIGHT BLOCK. */
			vApplicationIdleHook();
 8008564:	f7f8 f816 	bl	8000594 <vApplicationIdleHook>
		prvCheckTasksWaitingTermination();
 8008568:	e7ee      	b.n	8008548 <prvIdleTask+0x8>
 800856a:	bf00      	nop
 800856c:	20000a88 	.word	0x20000a88
 8008570:	e000ed04 	.word	0xe000ed04

08008574 <prvInitialiseTaskLists>:

#endif /* portUSING_MPU_WRAPPERS */
/*-----------------------------------------------------------*/

static void prvInitialiseTaskLists( void )
{
 8008574:	b580      	push	{r7, lr}
 8008576:	b082      	sub	sp, #8
 8008578:	af00      	add	r7, sp, #0
UBaseType_t uxPriority;

	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 800857a:	2300      	movs	r3, #0
 800857c:	607b      	str	r3, [r7, #4]
 800857e:	e00c      	b.n	800859a <prvInitialiseTaskLists+0x26>
	{
		vListInitialise( &( pxReadyTasksLists[ uxPriority ] ) );
 8008580:	687a      	ldr	r2, [r7, #4]
 8008582:	4613      	mov	r3, r2
 8008584:	009b      	lsls	r3, r3, #2
 8008586:	4413      	add	r3, r2
 8008588:	009b      	lsls	r3, r3, #2
 800858a:	4a12      	ldr	r2, [pc, #72]	; (80085d4 <prvInitialiseTaskLists+0x60>)
 800858c:	4413      	add	r3, r2
 800858e:	4618      	mov	r0, r3
 8008590:	f7fe fbc2 	bl	8006d18 <vListInitialise>
	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 8008594:	687b      	ldr	r3, [r7, #4]
 8008596:	3301      	adds	r3, #1
 8008598:	607b      	str	r3, [r7, #4]
 800859a:	687b      	ldr	r3, [r7, #4]
 800859c:	2b37      	cmp	r3, #55	; 0x37
 800859e:	d9ef      	bls.n	8008580 <prvInitialiseTaskLists+0xc>
	}

	vListInitialise( &xDelayedTaskList1 );
 80085a0:	480d      	ldr	r0, [pc, #52]	; (80085d8 <prvInitialiseTaskLists+0x64>)
 80085a2:	f7fe fbb9 	bl	8006d18 <vListInitialise>
	vListInitialise( &xDelayedTaskList2 );
 80085a6:	480d      	ldr	r0, [pc, #52]	; (80085dc <prvInitialiseTaskLists+0x68>)
 80085a8:	f7fe fbb6 	bl	8006d18 <vListInitialise>
	vListInitialise( &xPendingReadyList );
 80085ac:	480c      	ldr	r0, [pc, #48]	; (80085e0 <prvInitialiseTaskLists+0x6c>)
 80085ae:	f7fe fbb3 	bl	8006d18 <vListInitialise>

	#if ( INCLUDE_vTaskDelete == 1 )
	{
		vListInitialise( &xTasksWaitingTermination );
 80085b2:	480c      	ldr	r0, [pc, #48]	; (80085e4 <prvInitialiseTaskLists+0x70>)
 80085b4:	f7fe fbb0 	bl	8006d18 <vListInitialise>
	}
	#endif /* INCLUDE_vTaskDelete */

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		vListInitialise( &xSuspendedTaskList );
 80085b8:	480b      	ldr	r0, [pc, #44]	; (80085e8 <prvInitialiseTaskLists+0x74>)
 80085ba:	f7fe fbad 	bl	8006d18 <vListInitialise>
	}
	#endif /* INCLUDE_vTaskSuspend */

	/* Start with pxDelayedTaskList using list1 and the pxOverflowDelayedTaskList
	using list2. */
	pxDelayedTaskList = &xDelayedTaskList1;
 80085be:	4b0b      	ldr	r3, [pc, #44]	; (80085ec <prvInitialiseTaskLists+0x78>)
 80085c0:	4a05      	ldr	r2, [pc, #20]	; (80085d8 <prvInitialiseTaskLists+0x64>)
 80085c2:	601a      	str	r2, [r3, #0]
	pxOverflowDelayedTaskList = &xDelayedTaskList2;
 80085c4:	4b0a      	ldr	r3, [pc, #40]	; (80085f0 <prvInitialiseTaskLists+0x7c>)
 80085c6:	4a05      	ldr	r2, [pc, #20]	; (80085dc <prvInitialiseTaskLists+0x68>)
 80085c8:	601a      	str	r2, [r3, #0]
}
 80085ca:	bf00      	nop
 80085cc:	3708      	adds	r7, #8
 80085ce:	46bd      	mov	sp, r7
 80085d0:	bd80      	pop	{r7, pc}
 80085d2:	bf00      	nop
 80085d4:	20000a88 	.word	0x20000a88
 80085d8:	20000ee8 	.word	0x20000ee8
 80085dc:	20000efc 	.word	0x20000efc
 80085e0:	20000f18 	.word	0x20000f18
 80085e4:	20000f2c 	.word	0x20000f2c
 80085e8:	20000f44 	.word	0x20000f44
 80085ec:	20000f10 	.word	0x20000f10
 80085f0:	20000f14 	.word	0x20000f14

080085f4 <prvCheckTasksWaitingTermination>:
/*-----------------------------------------------------------*/

static void prvCheckTasksWaitingTermination( void )
{
 80085f4:	b580      	push	{r7, lr}
 80085f6:	b082      	sub	sp, #8
 80085f8:	af00      	add	r7, sp, #0
	{
		TCB_t *pxTCB;

		/* uxDeletedTasksWaitingCleanUp is used to prevent taskENTER_CRITICAL()
		being called too often in the idle task. */
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 80085fa:	e019      	b.n	8008630 <prvCheckTasksWaitingTermination+0x3c>
		{
			taskENTER_CRITICAL();
 80085fc:	f000 fdd2 	bl	80091a4 <vPortEnterCritical>
			{
				pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xTasksWaitingTermination ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8008600:	4b10      	ldr	r3, [pc, #64]	; (8008644 <prvCheckTasksWaitingTermination+0x50>)
 8008602:	68db      	ldr	r3, [r3, #12]
 8008604:	68db      	ldr	r3, [r3, #12]
 8008606:	607b      	str	r3, [r7, #4]
				( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8008608:	687b      	ldr	r3, [r7, #4]
 800860a:	3304      	adds	r3, #4
 800860c:	4618      	mov	r0, r3
 800860e:	f7fe fc0d 	bl	8006e2c <uxListRemove>
				--uxCurrentNumberOfTasks;
 8008612:	4b0d      	ldr	r3, [pc, #52]	; (8008648 <prvCheckTasksWaitingTermination+0x54>)
 8008614:	681b      	ldr	r3, [r3, #0]
 8008616:	3b01      	subs	r3, #1
 8008618:	4a0b      	ldr	r2, [pc, #44]	; (8008648 <prvCheckTasksWaitingTermination+0x54>)
 800861a:	6013      	str	r3, [r2, #0]
				--uxDeletedTasksWaitingCleanUp;
 800861c:	4b0b      	ldr	r3, [pc, #44]	; (800864c <prvCheckTasksWaitingTermination+0x58>)
 800861e:	681b      	ldr	r3, [r3, #0]
 8008620:	3b01      	subs	r3, #1
 8008622:	4a0a      	ldr	r2, [pc, #40]	; (800864c <prvCheckTasksWaitingTermination+0x58>)
 8008624:	6013      	str	r3, [r2, #0]
			}
			taskEXIT_CRITICAL();
 8008626:	f000 fded 	bl	8009204 <vPortExitCritical>

			prvDeleteTCB( pxTCB );
 800862a:	6878      	ldr	r0, [r7, #4]
 800862c:	f000 f810 	bl	8008650 <prvDeleteTCB>
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 8008630:	4b06      	ldr	r3, [pc, #24]	; (800864c <prvCheckTasksWaitingTermination+0x58>)
 8008632:	681b      	ldr	r3, [r3, #0]
 8008634:	2b00      	cmp	r3, #0
 8008636:	d1e1      	bne.n	80085fc <prvCheckTasksWaitingTermination+0x8>
		}
	}
	#endif /* INCLUDE_vTaskDelete */
}
 8008638:	bf00      	nop
 800863a:	bf00      	nop
 800863c:	3708      	adds	r7, #8
 800863e:	46bd      	mov	sp, r7
 8008640:	bd80      	pop	{r7, pc}
 8008642:	bf00      	nop
 8008644:	20000f2c 	.word	0x20000f2c
 8008648:	20000f58 	.word	0x20000f58
 800864c:	20000f40 	.word	0x20000f40

08008650 <prvDeleteTCB>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelete == 1 )

	static void prvDeleteTCB( TCB_t *pxTCB )
	{
 8008650:	b580      	push	{r7, lr}
 8008652:	b084      	sub	sp, #16
 8008654:	af00      	add	r7, sp, #0
 8008656:	6078      	str	r0, [r7, #4]
		#elif( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 !e9029 Macro has been consolidated for readability reasons. */
		{
			/* The task could have been allocated statically or dynamically, so
			check what was statically allocated before trying to free the
			memory. */
			if( pxTCB->ucStaticallyAllocated == tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB )
 8008658:	687b      	ldr	r3, [r7, #4]
 800865a:	f893 305d 	ldrb.w	r3, [r3, #93]	; 0x5d
 800865e:	2b00      	cmp	r3, #0
 8008660:	d108      	bne.n	8008674 <prvDeleteTCB+0x24>
			{
				/* Both the stack and TCB were allocated dynamically, so both
				must be freed. */
				vPortFree( pxTCB->pxStack );
 8008662:	687b      	ldr	r3, [r7, #4]
 8008664:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8008666:	4618      	mov	r0, r3
 8008668:	f000 ff8e 	bl	8009588 <vPortFree>
				vPortFree( pxTCB );
 800866c:	6878      	ldr	r0, [r7, #4]
 800866e:	f000 ff8b 	bl	8009588 <vPortFree>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
	}
 8008672:	e018      	b.n	80086a6 <prvDeleteTCB+0x56>
			else if( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_ONLY )
 8008674:	687b      	ldr	r3, [r7, #4]
 8008676:	f893 305d 	ldrb.w	r3, [r3, #93]	; 0x5d
 800867a:	2b01      	cmp	r3, #1
 800867c:	d103      	bne.n	8008686 <prvDeleteTCB+0x36>
				vPortFree( pxTCB );
 800867e:	6878      	ldr	r0, [r7, #4]
 8008680:	f000 ff82 	bl	8009588 <vPortFree>
	}
 8008684:	e00f      	b.n	80086a6 <prvDeleteTCB+0x56>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
 8008686:	687b      	ldr	r3, [r7, #4]
 8008688:	f893 305d 	ldrb.w	r3, [r3, #93]	; 0x5d
 800868c:	2b02      	cmp	r3, #2
 800868e:	d00a      	beq.n	80086a6 <prvDeleteTCB+0x56>
	__asm volatile
 8008690:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008694:	f383 8811 	msr	BASEPRI, r3
 8008698:	f3bf 8f6f 	isb	sy
 800869c:	f3bf 8f4f 	dsb	sy
 80086a0:	60fb      	str	r3, [r7, #12]
}
 80086a2:	bf00      	nop
 80086a4:	e7fe      	b.n	80086a4 <prvDeleteTCB+0x54>
	}
 80086a6:	bf00      	nop
 80086a8:	3710      	adds	r7, #16
 80086aa:	46bd      	mov	sp, r7
 80086ac:	bd80      	pop	{r7, pc}
	...

080086b0 <prvResetNextTaskUnblockTime>:

#endif /* INCLUDE_vTaskDelete */
/*-----------------------------------------------------------*/

static void prvResetNextTaskUnblockTime( void )
{
 80086b0:	b480      	push	{r7}
 80086b2:	b083      	sub	sp, #12
 80086b4:	af00      	add	r7, sp, #0
TCB_t *pxTCB;

	if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 80086b6:	4b0c      	ldr	r3, [pc, #48]	; (80086e8 <prvResetNextTaskUnblockTime+0x38>)
 80086b8:	681b      	ldr	r3, [r3, #0]
 80086ba:	681b      	ldr	r3, [r3, #0]
 80086bc:	2b00      	cmp	r3, #0
 80086be:	d104      	bne.n	80086ca <prvResetNextTaskUnblockTime+0x1a>
	{
		/* The new current delayed list is empty.  Set xNextTaskUnblockTime to
		the maximum possible value so it is	extremely unlikely that the
		if( xTickCount >= xNextTaskUnblockTime ) test will pass until
		there is an item in the delayed list. */
		xNextTaskUnblockTime = portMAX_DELAY;
 80086c0:	4b0a      	ldr	r3, [pc, #40]	; (80086ec <prvResetNextTaskUnblockTime+0x3c>)
 80086c2:	f04f 32ff 	mov.w	r2, #4294967295
 80086c6:	601a      	str	r2, [r3, #0]
		which the task at the head of the delayed list should be removed
		from the Blocked state. */
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
	}
}
 80086c8:	e008      	b.n	80086dc <prvResetNextTaskUnblockTime+0x2c>
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 80086ca:	4b07      	ldr	r3, [pc, #28]	; (80086e8 <prvResetNextTaskUnblockTime+0x38>)
 80086cc:	681b      	ldr	r3, [r3, #0]
 80086ce:	68db      	ldr	r3, [r3, #12]
 80086d0:	68db      	ldr	r3, [r3, #12]
 80086d2:	607b      	str	r3, [r7, #4]
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
 80086d4:	687b      	ldr	r3, [r7, #4]
 80086d6:	685b      	ldr	r3, [r3, #4]
 80086d8:	4a04      	ldr	r2, [pc, #16]	; (80086ec <prvResetNextTaskUnblockTime+0x3c>)
 80086da:	6013      	str	r3, [r2, #0]
}
 80086dc:	bf00      	nop
 80086de:	370c      	adds	r7, #12
 80086e0:	46bd      	mov	sp, r7
 80086e2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80086e6:	4770      	bx	lr
 80086e8:	20000f10 	.word	0x20000f10
 80086ec:	20000f78 	.word	0x20000f78

080086f0 <xTaskGetSchedulerState>:
/*-----------------------------------------------------------*/

#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )

	BaseType_t xTaskGetSchedulerState( void )
	{
 80086f0:	b480      	push	{r7}
 80086f2:	b083      	sub	sp, #12
 80086f4:	af00      	add	r7, sp, #0
	BaseType_t xReturn;

		if( xSchedulerRunning == pdFALSE )
 80086f6:	4b0b      	ldr	r3, [pc, #44]	; (8008724 <xTaskGetSchedulerState+0x34>)
 80086f8:	681b      	ldr	r3, [r3, #0]
 80086fa:	2b00      	cmp	r3, #0
 80086fc:	d102      	bne.n	8008704 <xTaskGetSchedulerState+0x14>
		{
			xReturn = taskSCHEDULER_NOT_STARTED;
 80086fe:	2301      	movs	r3, #1
 8008700:	607b      	str	r3, [r7, #4]
 8008702:	e008      	b.n	8008716 <xTaskGetSchedulerState+0x26>
		}
		else
		{
			if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8008704:	4b08      	ldr	r3, [pc, #32]	; (8008728 <xTaskGetSchedulerState+0x38>)
 8008706:	681b      	ldr	r3, [r3, #0]
 8008708:	2b00      	cmp	r3, #0
 800870a:	d102      	bne.n	8008712 <xTaskGetSchedulerState+0x22>
			{
				xReturn = taskSCHEDULER_RUNNING;
 800870c:	2302      	movs	r3, #2
 800870e:	607b      	str	r3, [r7, #4]
 8008710:	e001      	b.n	8008716 <xTaskGetSchedulerState+0x26>
			}
			else
			{
				xReturn = taskSCHEDULER_SUSPENDED;
 8008712:	2300      	movs	r3, #0
 8008714:	607b      	str	r3, [r7, #4]
			}
		}

		return xReturn;
 8008716:	687b      	ldr	r3, [r7, #4]
	}
 8008718:	4618      	mov	r0, r3
 800871a:	370c      	adds	r7, #12
 800871c:	46bd      	mov	sp, r7
 800871e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008722:	4770      	bx	lr
 8008724:	20000f64 	.word	0x20000f64
 8008728:	20000f80 	.word	0x20000f80

0800872c <xTaskPriorityDisinherit>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	BaseType_t xTaskPriorityDisinherit( TaskHandle_t const pxMutexHolder )
	{
 800872c:	b580      	push	{r7, lr}
 800872e:	b086      	sub	sp, #24
 8008730:	af00      	add	r7, sp, #0
 8008732:	6078      	str	r0, [r7, #4]
	TCB_t * const pxTCB = pxMutexHolder;
 8008734:	687b      	ldr	r3, [r7, #4]
 8008736:	613b      	str	r3, [r7, #16]
	BaseType_t xReturn = pdFALSE;
 8008738:	2300      	movs	r3, #0
 800873a:	617b      	str	r3, [r7, #20]

		if( pxMutexHolder != NULL )
 800873c:	687b      	ldr	r3, [r7, #4]
 800873e:	2b00      	cmp	r3, #0
 8008740:	d056      	beq.n	80087f0 <xTaskPriorityDisinherit+0xc4>
		{
			/* A task can only have an inherited priority if it holds the mutex.
			If the mutex is held by a task then it cannot be given from an
			interrupt, and if a mutex is given by the holding task then it must
			be the running state task. */
			configASSERT( pxTCB == pxCurrentTCB );
 8008742:	4b2e      	ldr	r3, [pc, #184]	; (80087fc <xTaskPriorityDisinherit+0xd0>)
 8008744:	681b      	ldr	r3, [r3, #0]
 8008746:	693a      	ldr	r2, [r7, #16]
 8008748:	429a      	cmp	r2, r3
 800874a:	d00a      	beq.n	8008762 <xTaskPriorityDisinherit+0x36>
	__asm volatile
 800874c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008750:	f383 8811 	msr	BASEPRI, r3
 8008754:	f3bf 8f6f 	isb	sy
 8008758:	f3bf 8f4f 	dsb	sy
 800875c:	60fb      	str	r3, [r7, #12]
}
 800875e:	bf00      	nop
 8008760:	e7fe      	b.n	8008760 <xTaskPriorityDisinherit+0x34>
			configASSERT( pxTCB->uxMutexesHeld );
 8008762:	693b      	ldr	r3, [r7, #16]
 8008764:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8008766:	2b00      	cmp	r3, #0
 8008768:	d10a      	bne.n	8008780 <xTaskPriorityDisinherit+0x54>
	__asm volatile
 800876a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800876e:	f383 8811 	msr	BASEPRI, r3
 8008772:	f3bf 8f6f 	isb	sy
 8008776:	f3bf 8f4f 	dsb	sy
 800877a:	60bb      	str	r3, [r7, #8]
}
 800877c:	bf00      	nop
 800877e:	e7fe      	b.n	800877e <xTaskPriorityDisinherit+0x52>
			( pxTCB->uxMutexesHeld )--;
 8008780:	693b      	ldr	r3, [r7, #16]
 8008782:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8008784:	1e5a      	subs	r2, r3, #1
 8008786:	693b      	ldr	r3, [r7, #16]
 8008788:	651a      	str	r2, [r3, #80]	; 0x50

			/* Has the holder of the mutex inherited the priority of another
			task? */
			if( pxTCB->uxPriority != pxTCB->uxBasePriority )
 800878a:	693b      	ldr	r3, [r7, #16]
 800878c:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800878e:	693b      	ldr	r3, [r7, #16]
 8008790:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8008792:	429a      	cmp	r2, r3
 8008794:	d02c      	beq.n	80087f0 <xTaskPriorityDisinherit+0xc4>
			{
				/* Only disinherit if no other mutexes are held. */
				if( pxTCB->uxMutexesHeld == ( UBaseType_t ) 0 )
 8008796:	693b      	ldr	r3, [r7, #16]
 8008798:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800879a:	2b00      	cmp	r3, #0
 800879c:	d128      	bne.n	80087f0 <xTaskPriorityDisinherit+0xc4>
					/* A task can only have an inherited priority if it holds
					the mutex.  If the mutex is held by a task then it cannot be
					given from an interrupt, and if a mutex is given by the
					holding task then it must be the running state task.  Remove
					the holding task from the ready/delayed list. */
					if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 800879e:	693b      	ldr	r3, [r7, #16]
 80087a0:	3304      	adds	r3, #4
 80087a2:	4618      	mov	r0, r3
 80087a4:	f7fe fb42 	bl	8006e2c <uxListRemove>
					}

					/* Disinherit the priority before adding the task into the
					new	ready list. */
					traceTASK_PRIORITY_DISINHERIT( pxTCB, pxTCB->uxBasePriority );
					pxTCB->uxPriority = pxTCB->uxBasePriority;
 80087a8:	693b      	ldr	r3, [r7, #16]
 80087aa:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 80087ac:	693b      	ldr	r3, [r7, #16]
 80087ae:	62da      	str	r2, [r3, #44]	; 0x2c

					/* Reset the event list item value.  It cannot be in use for
					any other purpose if this task is running, and it must be
					running to give back the mutex. */
					listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxTCB->uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 80087b0:	693b      	ldr	r3, [r7, #16]
 80087b2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80087b4:	f1c3 0238 	rsb	r2, r3, #56	; 0x38
 80087b8:	693b      	ldr	r3, [r7, #16]
 80087ba:	619a      	str	r2, [r3, #24]
					prvAddTaskToReadyList( pxTCB );
 80087bc:	693b      	ldr	r3, [r7, #16]
 80087be:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80087c0:	4b0f      	ldr	r3, [pc, #60]	; (8008800 <xTaskPriorityDisinherit+0xd4>)
 80087c2:	681b      	ldr	r3, [r3, #0]
 80087c4:	429a      	cmp	r2, r3
 80087c6:	d903      	bls.n	80087d0 <xTaskPriorityDisinherit+0xa4>
 80087c8:	693b      	ldr	r3, [r7, #16]
 80087ca:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80087cc:	4a0c      	ldr	r2, [pc, #48]	; (8008800 <xTaskPriorityDisinherit+0xd4>)
 80087ce:	6013      	str	r3, [r2, #0]
 80087d0:	693b      	ldr	r3, [r7, #16]
 80087d2:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80087d4:	4613      	mov	r3, r2
 80087d6:	009b      	lsls	r3, r3, #2
 80087d8:	4413      	add	r3, r2
 80087da:	009b      	lsls	r3, r3, #2
 80087dc:	4a09      	ldr	r2, [pc, #36]	; (8008804 <xTaskPriorityDisinherit+0xd8>)
 80087de:	441a      	add	r2, r3
 80087e0:	693b      	ldr	r3, [r7, #16]
 80087e2:	3304      	adds	r3, #4
 80087e4:	4619      	mov	r1, r3
 80087e6:	4610      	mov	r0, r2
 80087e8:	f7fe fac3 	bl	8006d72 <vListInsertEnd>
					in an order different to that in which they were taken.
					If a context switch did not occur when the first mutex was
					returned, even if a task was waiting on it, then a context
					switch should occur when the last mutex is returned whether
					a task is waiting on it or not. */
					xReturn = pdTRUE;
 80087ec:	2301      	movs	r3, #1
 80087ee:	617b      	str	r3, [r7, #20]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		return xReturn;
 80087f0:	697b      	ldr	r3, [r7, #20]
	}
 80087f2:	4618      	mov	r0, r3
 80087f4:	3718      	adds	r7, #24
 80087f6:	46bd      	mov	sp, r7
 80087f8:	bd80      	pop	{r7, pc}
 80087fa:	bf00      	nop
 80087fc:	20000a84 	.word	0x20000a84
 8008800:	20000f60 	.word	0x20000f60
 8008804:	20000a88 	.word	0x20000a88

08008808 <prvAddCurrentTaskToDelayedList>:

#endif
/*-----------------------------------------------------------*/

static void prvAddCurrentTaskToDelayedList( TickType_t xTicksToWait, const BaseType_t xCanBlockIndefinitely )
{
 8008808:	b580      	push	{r7, lr}
 800880a:	b084      	sub	sp, #16
 800880c:	af00      	add	r7, sp, #0
 800880e:	6078      	str	r0, [r7, #4]
 8008810:	6039      	str	r1, [r7, #0]
TickType_t xTimeToWake;
const TickType_t xConstTickCount = xTickCount;
 8008812:	4b21      	ldr	r3, [pc, #132]	; (8008898 <prvAddCurrentTaskToDelayedList+0x90>)
 8008814:	681b      	ldr	r3, [r3, #0]
 8008816:	60fb      	str	r3, [r7, #12]
	}
	#endif

	/* Remove the task from the ready list before adding it to the blocked list
	as the same list item is used for both lists. */
	if( uxListRemove( &( pxCurrentTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 8008818:	4b20      	ldr	r3, [pc, #128]	; (800889c <prvAddCurrentTaskToDelayedList+0x94>)
 800881a:	681b      	ldr	r3, [r3, #0]
 800881c:	3304      	adds	r3, #4
 800881e:	4618      	mov	r0, r3
 8008820:	f7fe fb04 	bl	8006e2c <uxListRemove>
		mtCOVERAGE_TEST_MARKER();
	}

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		if( ( xTicksToWait == portMAX_DELAY ) && ( xCanBlockIndefinitely != pdFALSE ) )
 8008824:	687b      	ldr	r3, [r7, #4]
 8008826:	f1b3 3fff 	cmp.w	r3, #4294967295
 800882a:	d10a      	bne.n	8008842 <prvAddCurrentTaskToDelayedList+0x3a>
 800882c:	683b      	ldr	r3, [r7, #0]
 800882e:	2b00      	cmp	r3, #0
 8008830:	d007      	beq.n	8008842 <prvAddCurrentTaskToDelayedList+0x3a>
		{
			/* Add the task to the suspended task list instead of a delayed task
			list to ensure it is not woken by a timing event.  It will block
			indefinitely. */
			vListInsertEnd( &xSuspendedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8008832:	4b1a      	ldr	r3, [pc, #104]	; (800889c <prvAddCurrentTaskToDelayedList+0x94>)
 8008834:	681b      	ldr	r3, [r3, #0]
 8008836:	3304      	adds	r3, #4
 8008838:	4619      	mov	r1, r3
 800883a:	4819      	ldr	r0, [pc, #100]	; (80088a0 <prvAddCurrentTaskToDelayedList+0x98>)
 800883c:	f7fe fa99 	bl	8006d72 <vListInsertEnd>

		/* Avoid compiler warning when INCLUDE_vTaskSuspend is not 1. */
		( void ) xCanBlockIndefinitely;
	}
	#endif /* INCLUDE_vTaskSuspend */
}
 8008840:	e026      	b.n	8008890 <prvAddCurrentTaskToDelayedList+0x88>
			xTimeToWake = xConstTickCount + xTicksToWait;
 8008842:	68fa      	ldr	r2, [r7, #12]
 8008844:	687b      	ldr	r3, [r7, #4]
 8008846:	4413      	add	r3, r2
 8008848:	60bb      	str	r3, [r7, #8]
			listSET_LIST_ITEM_VALUE( &( pxCurrentTCB->xStateListItem ), xTimeToWake );
 800884a:	4b14      	ldr	r3, [pc, #80]	; (800889c <prvAddCurrentTaskToDelayedList+0x94>)
 800884c:	681b      	ldr	r3, [r3, #0]
 800884e:	68ba      	ldr	r2, [r7, #8]
 8008850:	605a      	str	r2, [r3, #4]
			if( xTimeToWake < xConstTickCount )
 8008852:	68ba      	ldr	r2, [r7, #8]
 8008854:	68fb      	ldr	r3, [r7, #12]
 8008856:	429a      	cmp	r2, r3
 8008858:	d209      	bcs.n	800886e <prvAddCurrentTaskToDelayedList+0x66>
				vListInsert( pxOverflowDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 800885a:	4b12      	ldr	r3, [pc, #72]	; (80088a4 <prvAddCurrentTaskToDelayedList+0x9c>)
 800885c:	681a      	ldr	r2, [r3, #0]
 800885e:	4b0f      	ldr	r3, [pc, #60]	; (800889c <prvAddCurrentTaskToDelayedList+0x94>)
 8008860:	681b      	ldr	r3, [r3, #0]
 8008862:	3304      	adds	r3, #4
 8008864:	4619      	mov	r1, r3
 8008866:	4610      	mov	r0, r2
 8008868:	f7fe faa7 	bl	8006dba <vListInsert>
}
 800886c:	e010      	b.n	8008890 <prvAddCurrentTaskToDelayedList+0x88>
				vListInsert( pxDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 800886e:	4b0e      	ldr	r3, [pc, #56]	; (80088a8 <prvAddCurrentTaskToDelayedList+0xa0>)
 8008870:	681a      	ldr	r2, [r3, #0]
 8008872:	4b0a      	ldr	r3, [pc, #40]	; (800889c <prvAddCurrentTaskToDelayedList+0x94>)
 8008874:	681b      	ldr	r3, [r3, #0]
 8008876:	3304      	adds	r3, #4
 8008878:	4619      	mov	r1, r3
 800887a:	4610      	mov	r0, r2
 800887c:	f7fe fa9d 	bl	8006dba <vListInsert>
				if( xTimeToWake < xNextTaskUnblockTime )
 8008880:	4b0a      	ldr	r3, [pc, #40]	; (80088ac <prvAddCurrentTaskToDelayedList+0xa4>)
 8008882:	681b      	ldr	r3, [r3, #0]
 8008884:	68ba      	ldr	r2, [r7, #8]
 8008886:	429a      	cmp	r2, r3
 8008888:	d202      	bcs.n	8008890 <prvAddCurrentTaskToDelayedList+0x88>
					xNextTaskUnblockTime = xTimeToWake;
 800888a:	4a08      	ldr	r2, [pc, #32]	; (80088ac <prvAddCurrentTaskToDelayedList+0xa4>)
 800888c:	68bb      	ldr	r3, [r7, #8]
 800888e:	6013      	str	r3, [r2, #0]
}
 8008890:	bf00      	nop
 8008892:	3710      	adds	r7, #16
 8008894:	46bd      	mov	sp, r7
 8008896:	bd80      	pop	{r7, pc}
 8008898:	20000f5c 	.word	0x20000f5c
 800889c:	20000a84 	.word	0x20000a84
 80088a0:	20000f44 	.word	0x20000f44
 80088a4:	20000f14 	.word	0x20000f14
 80088a8:	20000f10 	.word	0x20000f10
 80088ac:	20000f78 	.word	0x20000f78

080088b0 <xTimerCreateTimerTask>:
									TimerCallbackFunction_t pxCallbackFunction,
									Timer_t *pxNewTimer ) PRIVILEGED_FUNCTION;
/*-----------------------------------------------------------*/

BaseType_t xTimerCreateTimerTask( void )
{
 80088b0:	b580      	push	{r7, lr}
 80088b2:	b08a      	sub	sp, #40	; 0x28
 80088b4:	af04      	add	r7, sp, #16
BaseType_t xReturn = pdFAIL;
 80088b6:	2300      	movs	r3, #0
 80088b8:	617b      	str	r3, [r7, #20]

	/* This function is called when the scheduler is started if
	configUSE_TIMERS is set to 1.  Check that the infrastructure used by the
	timer service task has been created/initialised.  If timers have already
	been created then the initialisation will already have been performed. */
	prvCheckForValidListAndQueue();
 80088ba:	f000 fb07 	bl	8008ecc <prvCheckForValidListAndQueue>

	if( xTimerQueue != NULL )
 80088be:	4b1c      	ldr	r3, [pc, #112]	; (8008930 <xTimerCreateTimerTask+0x80>)
 80088c0:	681b      	ldr	r3, [r3, #0]
 80088c2:	2b00      	cmp	r3, #0
 80088c4:	d021      	beq.n	800890a <xTimerCreateTimerTask+0x5a>
	{
		#if( configSUPPORT_STATIC_ALLOCATION == 1 )
		{
			StaticTask_t *pxTimerTaskTCBBuffer = NULL;
 80088c6:	2300      	movs	r3, #0
 80088c8:	60fb      	str	r3, [r7, #12]
			StackType_t *pxTimerTaskStackBuffer = NULL;
 80088ca:	2300      	movs	r3, #0
 80088cc:	60bb      	str	r3, [r7, #8]
			uint32_t ulTimerTaskStackSize;

			vApplicationGetTimerTaskMemory( &pxTimerTaskTCBBuffer, &pxTimerTaskStackBuffer, &ulTimerTaskStackSize );
 80088ce:	1d3a      	adds	r2, r7, #4
 80088d0:	f107 0108 	add.w	r1, r7, #8
 80088d4:	f107 030c 	add.w	r3, r7, #12
 80088d8:	4618      	mov	r0, r3
 80088da:	f7fe fa03 	bl	8006ce4 <vApplicationGetTimerTaskMemory>
			xTimerTaskHandle = xTaskCreateStatic(	prvTimerTask,
 80088de:	6879      	ldr	r1, [r7, #4]
 80088e0:	68bb      	ldr	r3, [r7, #8]
 80088e2:	68fa      	ldr	r2, [r7, #12]
 80088e4:	9202      	str	r2, [sp, #8]
 80088e6:	9301      	str	r3, [sp, #4]
 80088e8:	2302      	movs	r3, #2
 80088ea:	9300      	str	r3, [sp, #0]
 80088ec:	2300      	movs	r3, #0
 80088ee:	460a      	mov	r2, r1
 80088f0:	4910      	ldr	r1, [pc, #64]	; (8008934 <xTimerCreateTimerTask+0x84>)
 80088f2:	4811      	ldr	r0, [pc, #68]	; (8008938 <xTimerCreateTimerTask+0x88>)
 80088f4:	f7fe ffb0 	bl	8007858 <xTaskCreateStatic>
 80088f8:	4603      	mov	r3, r0
 80088fa:	4a10      	ldr	r2, [pc, #64]	; (800893c <xTimerCreateTimerTask+0x8c>)
 80088fc:	6013      	str	r3, [r2, #0]
													NULL,
													( ( UBaseType_t ) configTIMER_TASK_PRIORITY ) | portPRIVILEGE_BIT,
													pxTimerTaskStackBuffer,
													pxTimerTaskTCBBuffer );

			if( xTimerTaskHandle != NULL )
 80088fe:	4b0f      	ldr	r3, [pc, #60]	; (800893c <xTimerCreateTimerTask+0x8c>)
 8008900:	681b      	ldr	r3, [r3, #0]
 8008902:	2b00      	cmp	r3, #0
 8008904:	d001      	beq.n	800890a <xTimerCreateTimerTask+0x5a>
			{
				xReturn = pdPASS;
 8008906:	2301      	movs	r3, #1
 8008908:	617b      	str	r3, [r7, #20]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	configASSERT( xReturn );
 800890a:	697b      	ldr	r3, [r7, #20]
 800890c:	2b00      	cmp	r3, #0
 800890e:	d10a      	bne.n	8008926 <xTimerCreateTimerTask+0x76>
	__asm volatile
 8008910:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008914:	f383 8811 	msr	BASEPRI, r3
 8008918:	f3bf 8f6f 	isb	sy
 800891c:	f3bf 8f4f 	dsb	sy
 8008920:	613b      	str	r3, [r7, #16]
}
 8008922:	bf00      	nop
 8008924:	e7fe      	b.n	8008924 <xTimerCreateTimerTask+0x74>
	return xReturn;
 8008926:	697b      	ldr	r3, [r7, #20]
}
 8008928:	4618      	mov	r0, r3
 800892a:	3718      	adds	r7, #24
 800892c:	46bd      	mov	sp, r7
 800892e:	bd80      	pop	{r7, pc}
 8008930:	20000fb4 	.word	0x20000fb4
 8008934:	0800ae94 	.word	0x0800ae94
 8008938:	08008a75 	.word	0x08008a75
 800893c:	20000fb8 	.word	0x20000fb8

08008940 <xTimerGenericCommand>:
	}
}
/*-----------------------------------------------------------*/

BaseType_t xTimerGenericCommand( TimerHandle_t xTimer, const BaseType_t xCommandID, const TickType_t xOptionalValue, BaseType_t * const pxHigherPriorityTaskWoken, const TickType_t xTicksToWait )
{
 8008940:	b580      	push	{r7, lr}
 8008942:	b08a      	sub	sp, #40	; 0x28
 8008944:	af00      	add	r7, sp, #0
 8008946:	60f8      	str	r0, [r7, #12]
 8008948:	60b9      	str	r1, [r7, #8]
 800894a:	607a      	str	r2, [r7, #4]
 800894c:	603b      	str	r3, [r7, #0]
BaseType_t xReturn = pdFAIL;
 800894e:	2300      	movs	r3, #0
 8008950:	627b      	str	r3, [r7, #36]	; 0x24
DaemonTaskMessage_t xMessage;

	configASSERT( xTimer );
 8008952:	68fb      	ldr	r3, [r7, #12]
 8008954:	2b00      	cmp	r3, #0
 8008956:	d10a      	bne.n	800896e <xTimerGenericCommand+0x2e>
	__asm volatile
 8008958:	f04f 0350 	mov.w	r3, #80	; 0x50
 800895c:	f383 8811 	msr	BASEPRI, r3
 8008960:	f3bf 8f6f 	isb	sy
 8008964:	f3bf 8f4f 	dsb	sy
 8008968:	623b      	str	r3, [r7, #32]
}
 800896a:	bf00      	nop
 800896c:	e7fe      	b.n	800896c <xTimerGenericCommand+0x2c>

	/* Send a message to the timer service task to perform a particular action
	on a particular timer definition. */
	if( xTimerQueue != NULL )
 800896e:	4b1a      	ldr	r3, [pc, #104]	; (80089d8 <xTimerGenericCommand+0x98>)
 8008970:	681b      	ldr	r3, [r3, #0]
 8008972:	2b00      	cmp	r3, #0
 8008974:	d02a      	beq.n	80089cc <xTimerGenericCommand+0x8c>
	{
		/* Send a command to the timer service task to start the xTimer timer. */
		xMessage.xMessageID = xCommandID;
 8008976:	68bb      	ldr	r3, [r7, #8]
 8008978:	613b      	str	r3, [r7, #16]
		xMessage.u.xTimerParameters.xMessageValue = xOptionalValue;
 800897a:	687b      	ldr	r3, [r7, #4]
 800897c:	617b      	str	r3, [r7, #20]
		xMessage.u.xTimerParameters.pxTimer = xTimer;
 800897e:	68fb      	ldr	r3, [r7, #12]
 8008980:	61bb      	str	r3, [r7, #24]

		if( xCommandID < tmrFIRST_FROM_ISR_COMMAND )
 8008982:	68bb      	ldr	r3, [r7, #8]
 8008984:	2b05      	cmp	r3, #5
 8008986:	dc18      	bgt.n	80089ba <xTimerGenericCommand+0x7a>
		{
			if( xTaskGetSchedulerState() == taskSCHEDULER_RUNNING )
 8008988:	f7ff feb2 	bl	80086f0 <xTaskGetSchedulerState>
 800898c:	4603      	mov	r3, r0
 800898e:	2b02      	cmp	r3, #2
 8008990:	d109      	bne.n	80089a6 <xTimerGenericCommand+0x66>
			{
				xReturn = xQueueSendToBack( xTimerQueue, &xMessage, xTicksToWait );
 8008992:	4b11      	ldr	r3, [pc, #68]	; (80089d8 <xTimerGenericCommand+0x98>)
 8008994:	6818      	ldr	r0, [r3, #0]
 8008996:	f107 0110 	add.w	r1, r7, #16
 800899a:	2300      	movs	r3, #0
 800899c:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800899e:	f7fe fb73 	bl	8007088 <xQueueGenericSend>
 80089a2:	6278      	str	r0, [r7, #36]	; 0x24
 80089a4:	e012      	b.n	80089cc <xTimerGenericCommand+0x8c>
			}
			else
			{
				xReturn = xQueueSendToBack( xTimerQueue, &xMessage, tmrNO_DELAY );
 80089a6:	4b0c      	ldr	r3, [pc, #48]	; (80089d8 <xTimerGenericCommand+0x98>)
 80089a8:	6818      	ldr	r0, [r3, #0]
 80089aa:	f107 0110 	add.w	r1, r7, #16
 80089ae:	2300      	movs	r3, #0
 80089b0:	2200      	movs	r2, #0
 80089b2:	f7fe fb69 	bl	8007088 <xQueueGenericSend>
 80089b6:	6278      	str	r0, [r7, #36]	; 0x24
 80089b8:	e008      	b.n	80089cc <xTimerGenericCommand+0x8c>
			}
		}
		else
		{
			xReturn = xQueueSendToBackFromISR( xTimerQueue, &xMessage, pxHigherPriorityTaskWoken );
 80089ba:	4b07      	ldr	r3, [pc, #28]	; (80089d8 <xTimerGenericCommand+0x98>)
 80089bc:	6818      	ldr	r0, [r3, #0]
 80089be:	f107 0110 	add.w	r1, r7, #16
 80089c2:	2300      	movs	r3, #0
 80089c4:	683a      	ldr	r2, [r7, #0]
 80089c6:	f7fe fc5d 	bl	8007284 <xQueueGenericSendFromISR>
 80089ca:	6278      	str	r0, [r7, #36]	; 0x24
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	return xReturn;
 80089cc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
}
 80089ce:	4618      	mov	r0, r3
 80089d0:	3728      	adds	r7, #40	; 0x28
 80089d2:	46bd      	mov	sp, r7
 80089d4:	bd80      	pop	{r7, pc}
 80089d6:	bf00      	nop
 80089d8:	20000fb4 	.word	0x20000fb4

080089dc <prvProcessExpiredTimer>:
	return pxTimer->pcTimerName;
}
/*-----------------------------------------------------------*/

static void prvProcessExpiredTimer( const TickType_t xNextExpireTime, const TickType_t xTimeNow )
{
 80089dc:	b580      	push	{r7, lr}
 80089de:	b088      	sub	sp, #32
 80089e0:	af02      	add	r7, sp, #8
 80089e2:	6078      	str	r0, [r7, #4]
 80089e4:	6039      	str	r1, [r7, #0]
BaseType_t xResult;
Timer_t * const pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList ); /*lint !e9087 !e9079 void * is used as this macro is used with tasks and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 80089e6:	4b22      	ldr	r3, [pc, #136]	; (8008a70 <prvProcessExpiredTimer+0x94>)
 80089e8:	681b      	ldr	r3, [r3, #0]
 80089ea:	68db      	ldr	r3, [r3, #12]
 80089ec:	68db      	ldr	r3, [r3, #12]
 80089ee:	617b      	str	r3, [r7, #20]

	/* Remove the timer from the list of active timers.  A check has already
	been performed to ensure the list is not empty. */
	( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 80089f0:	697b      	ldr	r3, [r7, #20]
 80089f2:	3304      	adds	r3, #4
 80089f4:	4618      	mov	r0, r3
 80089f6:	f7fe fa19 	bl	8006e2c <uxListRemove>
	traceTIMER_EXPIRED( pxTimer );

	/* If the timer is an auto-reload timer then calculate the next
	expiry time and re-insert the timer in the list of active timers. */
	if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 80089fa:	697b      	ldr	r3, [r7, #20]
 80089fc:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8008a00:	f003 0304 	and.w	r3, r3, #4
 8008a04:	2b00      	cmp	r3, #0
 8008a06:	d022      	beq.n	8008a4e <prvProcessExpiredTimer+0x72>
	{
		/* The timer is inserted into a list using a time relative to anything
		other than the current time.  It will therefore be inserted into the
		correct list relative to the time this task thinks it is now. */
		if( prvInsertTimerInActiveList( pxTimer, ( xNextExpireTime + pxTimer->xTimerPeriodInTicks ), xTimeNow, xNextExpireTime ) != pdFALSE )
 8008a08:	697b      	ldr	r3, [r7, #20]
 8008a0a:	699a      	ldr	r2, [r3, #24]
 8008a0c:	687b      	ldr	r3, [r7, #4]
 8008a0e:	18d1      	adds	r1, r2, r3
 8008a10:	687b      	ldr	r3, [r7, #4]
 8008a12:	683a      	ldr	r2, [r7, #0]
 8008a14:	6978      	ldr	r0, [r7, #20]
 8008a16:	f000 f8d1 	bl	8008bbc <prvInsertTimerInActiveList>
 8008a1a:	4603      	mov	r3, r0
 8008a1c:	2b00      	cmp	r3, #0
 8008a1e:	d01f      	beq.n	8008a60 <prvProcessExpiredTimer+0x84>
		{
			/* The timer expired before it was added to the active timer
			list.  Reload it now.  */
			xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
 8008a20:	2300      	movs	r3, #0
 8008a22:	9300      	str	r3, [sp, #0]
 8008a24:	2300      	movs	r3, #0
 8008a26:	687a      	ldr	r2, [r7, #4]
 8008a28:	2100      	movs	r1, #0
 8008a2a:	6978      	ldr	r0, [r7, #20]
 8008a2c:	f7ff ff88 	bl	8008940 <xTimerGenericCommand>
 8008a30:	6138      	str	r0, [r7, #16]
			configASSERT( xResult );
 8008a32:	693b      	ldr	r3, [r7, #16]
 8008a34:	2b00      	cmp	r3, #0
 8008a36:	d113      	bne.n	8008a60 <prvProcessExpiredTimer+0x84>
	__asm volatile
 8008a38:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008a3c:	f383 8811 	msr	BASEPRI, r3
 8008a40:	f3bf 8f6f 	isb	sy
 8008a44:	f3bf 8f4f 	dsb	sy
 8008a48:	60fb      	str	r3, [r7, #12]
}
 8008a4a:	bf00      	nop
 8008a4c:	e7fe      	b.n	8008a4c <prvProcessExpiredTimer+0x70>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	else
	{
		pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 8008a4e:	697b      	ldr	r3, [r7, #20]
 8008a50:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8008a54:	f023 0301 	bic.w	r3, r3, #1
 8008a58:	b2da      	uxtb	r2, r3
 8008a5a:	697b      	ldr	r3, [r7, #20]
 8008a5c:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
		mtCOVERAGE_TEST_MARKER();
	}

	/* Call the timer callback. */
	pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 8008a60:	697b      	ldr	r3, [r7, #20]
 8008a62:	6a1b      	ldr	r3, [r3, #32]
 8008a64:	6978      	ldr	r0, [r7, #20]
 8008a66:	4798      	blx	r3
}
 8008a68:	bf00      	nop
 8008a6a:	3718      	adds	r7, #24
 8008a6c:	46bd      	mov	sp, r7
 8008a6e:	bd80      	pop	{r7, pc}
 8008a70:	20000fac 	.word	0x20000fac

08008a74 <prvTimerTask>:
/*-----------------------------------------------------------*/

static portTASK_FUNCTION( prvTimerTask, pvParameters )
{
 8008a74:	b580      	push	{r7, lr}
 8008a76:	b084      	sub	sp, #16
 8008a78:	af00      	add	r7, sp, #0
 8008a7a:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* Query the timers list to see if it contains any timers, and if so,
		obtain the time at which the next timer will expire. */
		xNextExpireTime = prvGetNextExpireTime( &xListWasEmpty );
 8008a7c:	f107 0308 	add.w	r3, r7, #8
 8008a80:	4618      	mov	r0, r3
 8008a82:	f000 f857 	bl	8008b34 <prvGetNextExpireTime>
 8008a86:	60f8      	str	r0, [r7, #12]

		/* If a timer has expired, process it.  Otherwise, block this task
		until either a timer does expire, or a command is received. */
		prvProcessTimerOrBlockTask( xNextExpireTime, xListWasEmpty );
 8008a88:	68bb      	ldr	r3, [r7, #8]
 8008a8a:	4619      	mov	r1, r3
 8008a8c:	68f8      	ldr	r0, [r7, #12]
 8008a8e:	f000 f803 	bl	8008a98 <prvProcessTimerOrBlockTask>

		/* Empty the command queue. */
		prvProcessReceivedCommands();
 8008a92:	f000 f8d5 	bl	8008c40 <prvProcessReceivedCommands>
		xNextExpireTime = prvGetNextExpireTime( &xListWasEmpty );
 8008a96:	e7f1      	b.n	8008a7c <prvTimerTask+0x8>

08008a98 <prvProcessTimerOrBlockTask>:
	}
}
/*-----------------------------------------------------------*/

static void prvProcessTimerOrBlockTask( const TickType_t xNextExpireTime, BaseType_t xListWasEmpty )
{
 8008a98:	b580      	push	{r7, lr}
 8008a9a:	b084      	sub	sp, #16
 8008a9c:	af00      	add	r7, sp, #0
 8008a9e:	6078      	str	r0, [r7, #4]
 8008aa0:	6039      	str	r1, [r7, #0]
TickType_t xTimeNow;
BaseType_t xTimerListsWereSwitched;

	vTaskSuspendAll();
 8008aa2:	f7ff fa1d 	bl	8007ee0 <vTaskSuspendAll>
		/* Obtain the time now to make an assessment as to whether the timer
		has expired or not.  If obtaining the time causes the lists to switch
		then don't process this timer as any timers that remained in the list
		when the lists were switched will have been processed within the
		prvSampleTimeNow() function. */
		xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
 8008aa6:	f107 0308 	add.w	r3, r7, #8
 8008aaa:	4618      	mov	r0, r3
 8008aac:	f000 f866 	bl	8008b7c <prvSampleTimeNow>
 8008ab0:	60f8      	str	r0, [r7, #12]
		if( xTimerListsWereSwitched == pdFALSE )
 8008ab2:	68bb      	ldr	r3, [r7, #8]
 8008ab4:	2b00      	cmp	r3, #0
 8008ab6:	d130      	bne.n	8008b1a <prvProcessTimerOrBlockTask+0x82>
		{
			/* The tick count has not overflowed, has the timer expired? */
			if( ( xListWasEmpty == pdFALSE ) && ( xNextExpireTime <= xTimeNow ) )
 8008ab8:	683b      	ldr	r3, [r7, #0]
 8008aba:	2b00      	cmp	r3, #0
 8008abc:	d10a      	bne.n	8008ad4 <prvProcessTimerOrBlockTask+0x3c>
 8008abe:	687a      	ldr	r2, [r7, #4]
 8008ac0:	68fb      	ldr	r3, [r7, #12]
 8008ac2:	429a      	cmp	r2, r3
 8008ac4:	d806      	bhi.n	8008ad4 <prvProcessTimerOrBlockTask+0x3c>
			{
				( void ) xTaskResumeAll();
 8008ac6:	f7ff fa19 	bl	8007efc <xTaskResumeAll>
				prvProcessExpiredTimer( xNextExpireTime, xTimeNow );
 8008aca:	68f9      	ldr	r1, [r7, #12]
 8008acc:	6878      	ldr	r0, [r7, #4]
 8008ace:	f7ff ff85 	bl	80089dc <prvProcessExpiredTimer>
		else
		{
			( void ) xTaskResumeAll();
		}
	}
}
 8008ad2:	e024      	b.n	8008b1e <prvProcessTimerOrBlockTask+0x86>
				if( xListWasEmpty != pdFALSE )
 8008ad4:	683b      	ldr	r3, [r7, #0]
 8008ad6:	2b00      	cmp	r3, #0
 8008ad8:	d008      	beq.n	8008aec <prvProcessTimerOrBlockTask+0x54>
					xListWasEmpty = listLIST_IS_EMPTY( pxOverflowTimerList );
 8008ada:	4b13      	ldr	r3, [pc, #76]	; (8008b28 <prvProcessTimerOrBlockTask+0x90>)
 8008adc:	681b      	ldr	r3, [r3, #0]
 8008ade:	681b      	ldr	r3, [r3, #0]
 8008ae0:	2b00      	cmp	r3, #0
 8008ae2:	d101      	bne.n	8008ae8 <prvProcessTimerOrBlockTask+0x50>
 8008ae4:	2301      	movs	r3, #1
 8008ae6:	e000      	b.n	8008aea <prvProcessTimerOrBlockTask+0x52>
 8008ae8:	2300      	movs	r3, #0
 8008aea:	603b      	str	r3, [r7, #0]
				vQueueWaitForMessageRestricted( xTimerQueue, ( xNextExpireTime - xTimeNow ), xListWasEmpty );
 8008aec:	4b0f      	ldr	r3, [pc, #60]	; (8008b2c <prvProcessTimerOrBlockTask+0x94>)
 8008aee:	6818      	ldr	r0, [r3, #0]
 8008af0:	687a      	ldr	r2, [r7, #4]
 8008af2:	68fb      	ldr	r3, [r7, #12]
 8008af4:	1ad3      	subs	r3, r2, r3
 8008af6:	683a      	ldr	r2, [r7, #0]
 8008af8:	4619      	mov	r1, r3
 8008afa:	f7fe fe79 	bl	80077f0 <vQueueWaitForMessageRestricted>
				if( xTaskResumeAll() == pdFALSE )
 8008afe:	f7ff f9fd 	bl	8007efc <xTaskResumeAll>
 8008b02:	4603      	mov	r3, r0
 8008b04:	2b00      	cmp	r3, #0
 8008b06:	d10a      	bne.n	8008b1e <prvProcessTimerOrBlockTask+0x86>
					portYIELD_WITHIN_API();
 8008b08:	4b09      	ldr	r3, [pc, #36]	; (8008b30 <prvProcessTimerOrBlockTask+0x98>)
 8008b0a:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8008b0e:	601a      	str	r2, [r3, #0]
 8008b10:	f3bf 8f4f 	dsb	sy
 8008b14:	f3bf 8f6f 	isb	sy
}
 8008b18:	e001      	b.n	8008b1e <prvProcessTimerOrBlockTask+0x86>
			( void ) xTaskResumeAll();
 8008b1a:	f7ff f9ef 	bl	8007efc <xTaskResumeAll>
}
 8008b1e:	bf00      	nop
 8008b20:	3710      	adds	r7, #16
 8008b22:	46bd      	mov	sp, r7
 8008b24:	bd80      	pop	{r7, pc}
 8008b26:	bf00      	nop
 8008b28:	20000fb0 	.word	0x20000fb0
 8008b2c:	20000fb4 	.word	0x20000fb4
 8008b30:	e000ed04 	.word	0xe000ed04

08008b34 <prvGetNextExpireTime>:
/*-----------------------------------------------------------*/

static TickType_t prvGetNextExpireTime( BaseType_t * const pxListWasEmpty )
{
 8008b34:	b480      	push	{r7}
 8008b36:	b085      	sub	sp, #20
 8008b38:	af00      	add	r7, sp, #0
 8008b3a:	6078      	str	r0, [r7, #4]
	the timer with the nearest expiry time will expire.  If there are no
	active timers then just set the next expire time to 0.  That will cause
	this task to unblock when the tick count overflows, at which point the
	timer lists will be switched and the next expiry time can be
	re-assessed.  */
	*pxListWasEmpty = listLIST_IS_EMPTY( pxCurrentTimerList );
 8008b3c:	4b0e      	ldr	r3, [pc, #56]	; (8008b78 <prvGetNextExpireTime+0x44>)
 8008b3e:	681b      	ldr	r3, [r3, #0]
 8008b40:	681b      	ldr	r3, [r3, #0]
 8008b42:	2b00      	cmp	r3, #0
 8008b44:	d101      	bne.n	8008b4a <prvGetNextExpireTime+0x16>
 8008b46:	2201      	movs	r2, #1
 8008b48:	e000      	b.n	8008b4c <prvGetNextExpireTime+0x18>
 8008b4a:	2200      	movs	r2, #0
 8008b4c:	687b      	ldr	r3, [r7, #4]
 8008b4e:	601a      	str	r2, [r3, #0]
	if( *pxListWasEmpty == pdFALSE )
 8008b50:	687b      	ldr	r3, [r7, #4]
 8008b52:	681b      	ldr	r3, [r3, #0]
 8008b54:	2b00      	cmp	r3, #0
 8008b56:	d105      	bne.n	8008b64 <prvGetNextExpireTime+0x30>
	{
		xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 8008b58:	4b07      	ldr	r3, [pc, #28]	; (8008b78 <prvGetNextExpireTime+0x44>)
 8008b5a:	681b      	ldr	r3, [r3, #0]
 8008b5c:	68db      	ldr	r3, [r3, #12]
 8008b5e:	681b      	ldr	r3, [r3, #0]
 8008b60:	60fb      	str	r3, [r7, #12]
 8008b62:	e001      	b.n	8008b68 <prvGetNextExpireTime+0x34>
	}
	else
	{
		/* Ensure the task unblocks when the tick count rolls over. */
		xNextExpireTime = ( TickType_t ) 0U;
 8008b64:	2300      	movs	r3, #0
 8008b66:	60fb      	str	r3, [r7, #12]
	}

	return xNextExpireTime;
 8008b68:	68fb      	ldr	r3, [r7, #12]
}
 8008b6a:	4618      	mov	r0, r3
 8008b6c:	3714      	adds	r7, #20
 8008b6e:	46bd      	mov	sp, r7
 8008b70:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008b74:	4770      	bx	lr
 8008b76:	bf00      	nop
 8008b78:	20000fac 	.word	0x20000fac

08008b7c <prvSampleTimeNow>:
/*-----------------------------------------------------------*/

static TickType_t prvSampleTimeNow( BaseType_t * const pxTimerListsWereSwitched )
{
 8008b7c:	b580      	push	{r7, lr}
 8008b7e:	b084      	sub	sp, #16
 8008b80:	af00      	add	r7, sp, #0
 8008b82:	6078      	str	r0, [r7, #4]
TickType_t xTimeNow;
PRIVILEGED_DATA static TickType_t xLastTime = ( TickType_t ) 0U; /*lint !e956 Variable is only accessible to one task. */

	xTimeNow = xTaskGetTickCount();
 8008b84:	f7ff fa58 	bl	8008038 <xTaskGetTickCount>
 8008b88:	60f8      	str	r0, [r7, #12]

	if( xTimeNow < xLastTime )
 8008b8a:	4b0b      	ldr	r3, [pc, #44]	; (8008bb8 <prvSampleTimeNow+0x3c>)
 8008b8c:	681b      	ldr	r3, [r3, #0]
 8008b8e:	68fa      	ldr	r2, [r7, #12]
 8008b90:	429a      	cmp	r2, r3
 8008b92:	d205      	bcs.n	8008ba0 <prvSampleTimeNow+0x24>
	{
		prvSwitchTimerLists();
 8008b94:	f000 f936 	bl	8008e04 <prvSwitchTimerLists>
		*pxTimerListsWereSwitched = pdTRUE;
 8008b98:	687b      	ldr	r3, [r7, #4]
 8008b9a:	2201      	movs	r2, #1
 8008b9c:	601a      	str	r2, [r3, #0]
 8008b9e:	e002      	b.n	8008ba6 <prvSampleTimeNow+0x2a>
	}
	else
	{
		*pxTimerListsWereSwitched = pdFALSE;
 8008ba0:	687b      	ldr	r3, [r7, #4]
 8008ba2:	2200      	movs	r2, #0
 8008ba4:	601a      	str	r2, [r3, #0]
	}

	xLastTime = xTimeNow;
 8008ba6:	4a04      	ldr	r2, [pc, #16]	; (8008bb8 <prvSampleTimeNow+0x3c>)
 8008ba8:	68fb      	ldr	r3, [r7, #12]
 8008baa:	6013      	str	r3, [r2, #0]

	return xTimeNow;
 8008bac:	68fb      	ldr	r3, [r7, #12]
}
 8008bae:	4618      	mov	r0, r3
 8008bb0:	3710      	adds	r7, #16
 8008bb2:	46bd      	mov	sp, r7
 8008bb4:	bd80      	pop	{r7, pc}
 8008bb6:	bf00      	nop
 8008bb8:	20000fbc 	.word	0x20000fbc

08008bbc <prvInsertTimerInActiveList>:
/*-----------------------------------------------------------*/

static BaseType_t prvInsertTimerInActiveList( Timer_t * const pxTimer, const TickType_t xNextExpiryTime, const TickType_t xTimeNow, const TickType_t xCommandTime )
{
 8008bbc:	b580      	push	{r7, lr}
 8008bbe:	b086      	sub	sp, #24
 8008bc0:	af00      	add	r7, sp, #0
 8008bc2:	60f8      	str	r0, [r7, #12]
 8008bc4:	60b9      	str	r1, [r7, #8]
 8008bc6:	607a      	str	r2, [r7, #4]
 8008bc8:	603b      	str	r3, [r7, #0]
BaseType_t xProcessTimerNow = pdFALSE;
 8008bca:	2300      	movs	r3, #0
 8008bcc:	617b      	str	r3, [r7, #20]

	listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xNextExpiryTime );
 8008bce:	68fb      	ldr	r3, [r7, #12]
 8008bd0:	68ba      	ldr	r2, [r7, #8]
 8008bd2:	605a      	str	r2, [r3, #4]
	listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
 8008bd4:	68fb      	ldr	r3, [r7, #12]
 8008bd6:	68fa      	ldr	r2, [r7, #12]
 8008bd8:	611a      	str	r2, [r3, #16]

	if( xNextExpiryTime <= xTimeNow )
 8008bda:	68ba      	ldr	r2, [r7, #8]
 8008bdc:	687b      	ldr	r3, [r7, #4]
 8008bde:	429a      	cmp	r2, r3
 8008be0:	d812      	bhi.n	8008c08 <prvInsertTimerInActiveList+0x4c>
	{
		/* Has the expiry time elapsed between the command to start/reset a
		timer was issued, and the time the command was processed? */
		if( ( ( TickType_t ) ( xTimeNow - xCommandTime ) ) >= pxTimer->xTimerPeriodInTicks ) /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8008be2:	687a      	ldr	r2, [r7, #4]
 8008be4:	683b      	ldr	r3, [r7, #0]
 8008be6:	1ad2      	subs	r2, r2, r3
 8008be8:	68fb      	ldr	r3, [r7, #12]
 8008bea:	699b      	ldr	r3, [r3, #24]
 8008bec:	429a      	cmp	r2, r3
 8008bee:	d302      	bcc.n	8008bf6 <prvInsertTimerInActiveList+0x3a>
		{
			/* The time between a command being issued and the command being
			processed actually exceeds the timers period.  */
			xProcessTimerNow = pdTRUE;
 8008bf0:	2301      	movs	r3, #1
 8008bf2:	617b      	str	r3, [r7, #20]
 8008bf4:	e01b      	b.n	8008c2e <prvInsertTimerInActiveList+0x72>
		}
		else
		{
			vListInsert( pxOverflowTimerList, &( pxTimer->xTimerListItem ) );
 8008bf6:	4b10      	ldr	r3, [pc, #64]	; (8008c38 <prvInsertTimerInActiveList+0x7c>)
 8008bf8:	681a      	ldr	r2, [r3, #0]
 8008bfa:	68fb      	ldr	r3, [r7, #12]
 8008bfc:	3304      	adds	r3, #4
 8008bfe:	4619      	mov	r1, r3
 8008c00:	4610      	mov	r0, r2
 8008c02:	f7fe f8da 	bl	8006dba <vListInsert>
 8008c06:	e012      	b.n	8008c2e <prvInsertTimerInActiveList+0x72>
		}
	}
	else
	{
		if( ( xTimeNow < xCommandTime ) && ( xNextExpiryTime >= xCommandTime ) )
 8008c08:	687a      	ldr	r2, [r7, #4]
 8008c0a:	683b      	ldr	r3, [r7, #0]
 8008c0c:	429a      	cmp	r2, r3
 8008c0e:	d206      	bcs.n	8008c1e <prvInsertTimerInActiveList+0x62>
 8008c10:	68ba      	ldr	r2, [r7, #8]
 8008c12:	683b      	ldr	r3, [r7, #0]
 8008c14:	429a      	cmp	r2, r3
 8008c16:	d302      	bcc.n	8008c1e <prvInsertTimerInActiveList+0x62>
		{
			/* If, since the command was issued, the tick count has overflowed
			but the expiry time has not, then the timer must have already passed
			its expiry time and should be processed immediately. */
			xProcessTimerNow = pdTRUE;
 8008c18:	2301      	movs	r3, #1
 8008c1a:	617b      	str	r3, [r7, #20]
 8008c1c:	e007      	b.n	8008c2e <prvInsertTimerInActiveList+0x72>
		}
		else
		{
			vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
 8008c1e:	4b07      	ldr	r3, [pc, #28]	; (8008c3c <prvInsertTimerInActiveList+0x80>)
 8008c20:	681a      	ldr	r2, [r3, #0]
 8008c22:	68fb      	ldr	r3, [r7, #12]
 8008c24:	3304      	adds	r3, #4
 8008c26:	4619      	mov	r1, r3
 8008c28:	4610      	mov	r0, r2
 8008c2a:	f7fe f8c6 	bl	8006dba <vListInsert>
		}
	}

	return xProcessTimerNow;
 8008c2e:	697b      	ldr	r3, [r7, #20]
}
 8008c30:	4618      	mov	r0, r3
 8008c32:	3718      	adds	r7, #24
 8008c34:	46bd      	mov	sp, r7
 8008c36:	bd80      	pop	{r7, pc}
 8008c38:	20000fb0 	.word	0x20000fb0
 8008c3c:	20000fac 	.word	0x20000fac

08008c40 <prvProcessReceivedCommands>:
/*-----------------------------------------------------------*/

static void	prvProcessReceivedCommands( void )
{
 8008c40:	b580      	push	{r7, lr}
 8008c42:	b08e      	sub	sp, #56	; 0x38
 8008c44:	af02      	add	r7, sp, #8
DaemonTaskMessage_t xMessage;
Timer_t *pxTimer;
BaseType_t xTimerListsWereSwitched, xResult;
TickType_t xTimeNow;

	while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
 8008c46:	e0ca      	b.n	8008dde <prvProcessReceivedCommands+0x19e>
	{
		#if ( INCLUDE_xTimerPendFunctionCall == 1 )
		{
			/* Negative commands are pended function calls rather than timer
			commands. */
			if( xMessage.xMessageID < ( BaseType_t ) 0 )
 8008c48:	687b      	ldr	r3, [r7, #4]
 8008c4a:	2b00      	cmp	r3, #0
 8008c4c:	da18      	bge.n	8008c80 <prvProcessReceivedCommands+0x40>
			{
				const CallbackParameters_t * const pxCallback = &( xMessage.u.xCallbackParameters );
 8008c4e:	1d3b      	adds	r3, r7, #4
 8008c50:	3304      	adds	r3, #4
 8008c52:	62fb      	str	r3, [r7, #44]	; 0x2c

				/* The timer uses the xCallbackParameters member to request a
				callback be executed.  Check the callback is not NULL. */
				configASSERT( pxCallback );
 8008c54:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8008c56:	2b00      	cmp	r3, #0
 8008c58:	d10a      	bne.n	8008c70 <prvProcessReceivedCommands+0x30>
	__asm volatile
 8008c5a:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008c5e:	f383 8811 	msr	BASEPRI, r3
 8008c62:	f3bf 8f6f 	isb	sy
 8008c66:	f3bf 8f4f 	dsb	sy
 8008c6a:	61fb      	str	r3, [r7, #28]
}
 8008c6c:	bf00      	nop
 8008c6e:	e7fe      	b.n	8008c6e <prvProcessReceivedCommands+0x2e>

				/* Call the function. */
				pxCallback->pxCallbackFunction( pxCallback->pvParameter1, pxCallback->ulParameter2 );
 8008c70:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8008c72:	681b      	ldr	r3, [r3, #0]
 8008c74:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8008c76:	6850      	ldr	r0, [r2, #4]
 8008c78:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8008c7a:	6892      	ldr	r2, [r2, #8]
 8008c7c:	4611      	mov	r1, r2
 8008c7e:	4798      	blx	r3
		}
		#endif /* INCLUDE_xTimerPendFunctionCall */

		/* Commands that are positive are timer commands rather than pended
		function calls. */
		if( xMessage.xMessageID >= ( BaseType_t ) 0 )
 8008c80:	687b      	ldr	r3, [r7, #4]
 8008c82:	2b00      	cmp	r3, #0
 8008c84:	f2c0 80aa 	blt.w	8008ddc <prvProcessReceivedCommands+0x19c>
		{
			/* The messages uses the xTimerParameters member to work on a
			software timer. */
			pxTimer = xMessage.u.xTimerParameters.pxTimer;
 8008c88:	68fb      	ldr	r3, [r7, #12]
 8008c8a:	62bb      	str	r3, [r7, #40]	; 0x28

			if( listIS_CONTAINED_WITHIN( NULL, &( pxTimer->xTimerListItem ) ) == pdFALSE ) /*lint !e961. The cast is only redundant when NULL is passed into the macro. */
 8008c8c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008c8e:	695b      	ldr	r3, [r3, #20]
 8008c90:	2b00      	cmp	r3, #0
 8008c92:	d004      	beq.n	8008c9e <prvProcessReceivedCommands+0x5e>
			{
				/* The timer is in a list, remove it. */
				( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 8008c94:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008c96:	3304      	adds	r3, #4
 8008c98:	4618      	mov	r0, r3
 8008c9a:	f7fe f8c7 	bl	8006e2c <uxListRemove>
			it must be present in the function call.  prvSampleTimeNow() must be
			called after the message is received from xTimerQueue so there is no
			possibility of a higher priority task adding a message to the message
			queue with a time that is ahead of the timer daemon task (because it
			pre-empted the timer daemon task after the xTimeNow value was set). */
			xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
 8008c9e:	463b      	mov	r3, r7
 8008ca0:	4618      	mov	r0, r3
 8008ca2:	f7ff ff6b 	bl	8008b7c <prvSampleTimeNow>
 8008ca6:	6278      	str	r0, [r7, #36]	; 0x24

			switch( xMessage.xMessageID )
 8008ca8:	687b      	ldr	r3, [r7, #4]
 8008caa:	2b09      	cmp	r3, #9
 8008cac:	f200 8097 	bhi.w	8008dde <prvProcessReceivedCommands+0x19e>
 8008cb0:	a201      	add	r2, pc, #4	; (adr r2, 8008cb8 <prvProcessReceivedCommands+0x78>)
 8008cb2:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8008cb6:	bf00      	nop
 8008cb8:	08008ce1 	.word	0x08008ce1
 8008cbc:	08008ce1 	.word	0x08008ce1
 8008cc0:	08008ce1 	.word	0x08008ce1
 8008cc4:	08008d55 	.word	0x08008d55
 8008cc8:	08008d69 	.word	0x08008d69
 8008ccc:	08008db3 	.word	0x08008db3
 8008cd0:	08008ce1 	.word	0x08008ce1
 8008cd4:	08008ce1 	.word	0x08008ce1
 8008cd8:	08008d55 	.word	0x08008d55
 8008cdc:	08008d69 	.word	0x08008d69
				case tmrCOMMAND_START_FROM_ISR :
				case tmrCOMMAND_RESET :
				case tmrCOMMAND_RESET_FROM_ISR :
				case tmrCOMMAND_START_DONT_TRACE :
					/* Start or restart a timer. */
					pxTimer->ucStatus |= tmrSTATUS_IS_ACTIVE;
 8008ce0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008ce2:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8008ce6:	f043 0301 	orr.w	r3, r3, #1
 8008cea:	b2da      	uxtb	r2, r3
 8008cec:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008cee:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
					if( prvInsertTimerInActiveList( pxTimer,  xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, xTimeNow, xMessage.u.xTimerParameters.xMessageValue ) != pdFALSE )
 8008cf2:	68ba      	ldr	r2, [r7, #8]
 8008cf4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008cf6:	699b      	ldr	r3, [r3, #24]
 8008cf8:	18d1      	adds	r1, r2, r3
 8008cfa:	68bb      	ldr	r3, [r7, #8]
 8008cfc:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8008cfe:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8008d00:	f7ff ff5c 	bl	8008bbc <prvInsertTimerInActiveList>
 8008d04:	4603      	mov	r3, r0
 8008d06:	2b00      	cmp	r3, #0
 8008d08:	d069      	beq.n	8008dde <prvProcessReceivedCommands+0x19e>
					{
						/* The timer expired before it was added to the active
						timer list.  Process it now. */
						pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 8008d0a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008d0c:	6a1b      	ldr	r3, [r3, #32]
 8008d0e:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8008d10:	4798      	blx	r3
						traceTIMER_EXPIRED( pxTimer );

						if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 8008d12:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008d14:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8008d18:	f003 0304 	and.w	r3, r3, #4
 8008d1c:	2b00      	cmp	r3, #0
 8008d1e:	d05e      	beq.n	8008dde <prvProcessReceivedCommands+0x19e>
						{
							xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, NULL, tmrNO_DELAY );
 8008d20:	68ba      	ldr	r2, [r7, #8]
 8008d22:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008d24:	699b      	ldr	r3, [r3, #24]
 8008d26:	441a      	add	r2, r3
 8008d28:	2300      	movs	r3, #0
 8008d2a:	9300      	str	r3, [sp, #0]
 8008d2c:	2300      	movs	r3, #0
 8008d2e:	2100      	movs	r1, #0
 8008d30:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8008d32:	f7ff fe05 	bl	8008940 <xTimerGenericCommand>
 8008d36:	6238      	str	r0, [r7, #32]
							configASSERT( xResult );
 8008d38:	6a3b      	ldr	r3, [r7, #32]
 8008d3a:	2b00      	cmp	r3, #0
 8008d3c:	d14f      	bne.n	8008dde <prvProcessReceivedCommands+0x19e>
	__asm volatile
 8008d3e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008d42:	f383 8811 	msr	BASEPRI, r3
 8008d46:	f3bf 8f6f 	isb	sy
 8008d4a:	f3bf 8f4f 	dsb	sy
 8008d4e:	61bb      	str	r3, [r7, #24]
}
 8008d50:	bf00      	nop
 8008d52:	e7fe      	b.n	8008d52 <prvProcessReceivedCommands+0x112>
					break;

				case tmrCOMMAND_STOP :
				case tmrCOMMAND_STOP_FROM_ISR :
					/* The timer has already been removed from the active list. */
					pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 8008d54:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008d56:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8008d5a:	f023 0301 	bic.w	r3, r3, #1
 8008d5e:	b2da      	uxtb	r2, r3
 8008d60:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008d62:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
					break;
 8008d66:	e03a      	b.n	8008dde <prvProcessReceivedCommands+0x19e>

				case tmrCOMMAND_CHANGE_PERIOD :
				case tmrCOMMAND_CHANGE_PERIOD_FROM_ISR :
					pxTimer->ucStatus |= tmrSTATUS_IS_ACTIVE;
 8008d68:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008d6a:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8008d6e:	f043 0301 	orr.w	r3, r3, #1
 8008d72:	b2da      	uxtb	r2, r3
 8008d74:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008d76:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
					pxTimer->xTimerPeriodInTicks = xMessage.u.xTimerParameters.xMessageValue;
 8008d7a:	68ba      	ldr	r2, [r7, #8]
 8008d7c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008d7e:	619a      	str	r2, [r3, #24]
					configASSERT( ( pxTimer->xTimerPeriodInTicks > 0 ) );
 8008d80:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008d82:	699b      	ldr	r3, [r3, #24]
 8008d84:	2b00      	cmp	r3, #0
 8008d86:	d10a      	bne.n	8008d9e <prvProcessReceivedCommands+0x15e>
	__asm volatile
 8008d88:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008d8c:	f383 8811 	msr	BASEPRI, r3
 8008d90:	f3bf 8f6f 	isb	sy
 8008d94:	f3bf 8f4f 	dsb	sy
 8008d98:	617b      	str	r3, [r7, #20]
}
 8008d9a:	bf00      	nop
 8008d9c:	e7fe      	b.n	8008d9c <prvProcessReceivedCommands+0x15c>
					be longer or shorter than the old one.  The command time is
					therefore set to the current time, and as the period cannot
					be zero the next expiry time can only be in the future,
					meaning (unlike for the xTimerStart() case above) there is
					no fail case that needs to be handled here. */
					( void ) prvInsertTimerInActiveList( pxTimer, ( xTimeNow + pxTimer->xTimerPeriodInTicks ), xTimeNow, xTimeNow );
 8008d9e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008da0:	699a      	ldr	r2, [r3, #24]
 8008da2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008da4:	18d1      	adds	r1, r2, r3
 8008da6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008da8:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8008daa:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8008dac:	f7ff ff06 	bl	8008bbc <prvInsertTimerInActiveList>
					break;
 8008db0:	e015      	b.n	8008dde <prvProcessReceivedCommands+0x19e>
					#if ( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
					{
						/* The timer has already been removed from the active list,
						just free up the memory if the memory was dynamically
						allocated. */
						if( ( pxTimer->ucStatus & tmrSTATUS_IS_STATICALLY_ALLOCATED ) == ( uint8_t ) 0 )
 8008db2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008db4:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8008db8:	f003 0302 	and.w	r3, r3, #2
 8008dbc:	2b00      	cmp	r3, #0
 8008dbe:	d103      	bne.n	8008dc8 <prvProcessReceivedCommands+0x188>
						{
							vPortFree( pxTimer );
 8008dc0:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8008dc2:	f000 fbe1 	bl	8009588 <vPortFree>
 8008dc6:	e00a      	b.n	8008dde <prvProcessReceivedCommands+0x19e>
						}
						else
						{
							pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 8008dc8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008dca:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8008dce:	f023 0301 	bic.w	r3, r3, #1
 8008dd2:	b2da      	uxtb	r2, r3
 8008dd4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008dd6:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
						no need to free the memory - just mark the timer as
						"not active". */
						pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
					}
					#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
					break;
 8008dda:	e000      	b.n	8008dde <prvProcessReceivedCommands+0x19e>

				default	:
					/* Don't expect to get here. */
					break;
			}
		}
 8008ddc:	bf00      	nop
	while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
 8008dde:	4b08      	ldr	r3, [pc, #32]	; (8008e00 <prvProcessReceivedCommands+0x1c0>)
 8008de0:	681b      	ldr	r3, [r3, #0]
 8008de2:	1d39      	adds	r1, r7, #4
 8008de4:	2200      	movs	r2, #0
 8008de6:	4618      	mov	r0, r3
 8008de8:	f7fe fae8 	bl	80073bc <xQueueReceive>
 8008dec:	4603      	mov	r3, r0
 8008dee:	2b00      	cmp	r3, #0
 8008df0:	f47f af2a 	bne.w	8008c48 <prvProcessReceivedCommands+0x8>
	}
}
 8008df4:	bf00      	nop
 8008df6:	bf00      	nop
 8008df8:	3730      	adds	r7, #48	; 0x30
 8008dfa:	46bd      	mov	sp, r7
 8008dfc:	bd80      	pop	{r7, pc}
 8008dfe:	bf00      	nop
 8008e00:	20000fb4 	.word	0x20000fb4

08008e04 <prvSwitchTimerLists>:
/*-----------------------------------------------------------*/

static void prvSwitchTimerLists( void )
{
 8008e04:	b580      	push	{r7, lr}
 8008e06:	b088      	sub	sp, #32
 8008e08:	af02      	add	r7, sp, #8

	/* The tick count has overflowed.  The timer lists must be switched.
	If there are any timers still referenced from the current timer list
	then they must have expired and should be processed before the lists
	are switched. */
	while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
 8008e0a:	e048      	b.n	8008e9e <prvSwitchTimerLists+0x9a>
	{
		xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 8008e0c:	4b2d      	ldr	r3, [pc, #180]	; (8008ec4 <prvSwitchTimerLists+0xc0>)
 8008e0e:	681b      	ldr	r3, [r3, #0]
 8008e10:	68db      	ldr	r3, [r3, #12]
 8008e12:	681b      	ldr	r3, [r3, #0]
 8008e14:	613b      	str	r3, [r7, #16]

		/* Remove the timer from the list. */
		pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList ); /*lint !e9087 !e9079 void * is used as this macro is used with tasks and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8008e16:	4b2b      	ldr	r3, [pc, #172]	; (8008ec4 <prvSwitchTimerLists+0xc0>)
 8008e18:	681b      	ldr	r3, [r3, #0]
 8008e1a:	68db      	ldr	r3, [r3, #12]
 8008e1c:	68db      	ldr	r3, [r3, #12]
 8008e1e:	60fb      	str	r3, [r7, #12]
		( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 8008e20:	68fb      	ldr	r3, [r7, #12]
 8008e22:	3304      	adds	r3, #4
 8008e24:	4618      	mov	r0, r3
 8008e26:	f7fe f801 	bl	8006e2c <uxListRemove>
		traceTIMER_EXPIRED( pxTimer );

		/* Execute its callback, then send a command to restart the timer if
		it is an auto-reload timer.  It cannot be restarted here as the lists
		have not yet been switched. */
		pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 8008e2a:	68fb      	ldr	r3, [r7, #12]
 8008e2c:	6a1b      	ldr	r3, [r3, #32]
 8008e2e:	68f8      	ldr	r0, [r7, #12]
 8008e30:	4798      	blx	r3

		if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 8008e32:	68fb      	ldr	r3, [r7, #12]
 8008e34:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8008e38:	f003 0304 	and.w	r3, r3, #4
 8008e3c:	2b00      	cmp	r3, #0
 8008e3e:	d02e      	beq.n	8008e9e <prvSwitchTimerLists+0x9a>
			the timer going into the same timer list then it has already expired
			and the timer should be re-inserted into the current list so it is
			processed again within this loop.  Otherwise a command should be sent
			to restart the timer to ensure it is only inserted into a list after
			the lists have been swapped. */
			xReloadTime = ( xNextExpireTime + pxTimer->xTimerPeriodInTicks );
 8008e40:	68fb      	ldr	r3, [r7, #12]
 8008e42:	699b      	ldr	r3, [r3, #24]
 8008e44:	693a      	ldr	r2, [r7, #16]
 8008e46:	4413      	add	r3, r2
 8008e48:	60bb      	str	r3, [r7, #8]
			if( xReloadTime > xNextExpireTime )
 8008e4a:	68ba      	ldr	r2, [r7, #8]
 8008e4c:	693b      	ldr	r3, [r7, #16]
 8008e4e:	429a      	cmp	r2, r3
 8008e50:	d90e      	bls.n	8008e70 <prvSwitchTimerLists+0x6c>
			{
				listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xReloadTime );
 8008e52:	68fb      	ldr	r3, [r7, #12]
 8008e54:	68ba      	ldr	r2, [r7, #8]
 8008e56:	605a      	str	r2, [r3, #4]
				listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
 8008e58:	68fb      	ldr	r3, [r7, #12]
 8008e5a:	68fa      	ldr	r2, [r7, #12]
 8008e5c:	611a      	str	r2, [r3, #16]
				vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
 8008e5e:	4b19      	ldr	r3, [pc, #100]	; (8008ec4 <prvSwitchTimerLists+0xc0>)
 8008e60:	681a      	ldr	r2, [r3, #0]
 8008e62:	68fb      	ldr	r3, [r7, #12]
 8008e64:	3304      	adds	r3, #4
 8008e66:	4619      	mov	r1, r3
 8008e68:	4610      	mov	r0, r2
 8008e6a:	f7fd ffa6 	bl	8006dba <vListInsert>
 8008e6e:	e016      	b.n	8008e9e <prvSwitchTimerLists+0x9a>
			}
			else
			{
				xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
 8008e70:	2300      	movs	r3, #0
 8008e72:	9300      	str	r3, [sp, #0]
 8008e74:	2300      	movs	r3, #0
 8008e76:	693a      	ldr	r2, [r7, #16]
 8008e78:	2100      	movs	r1, #0
 8008e7a:	68f8      	ldr	r0, [r7, #12]
 8008e7c:	f7ff fd60 	bl	8008940 <xTimerGenericCommand>
 8008e80:	6078      	str	r0, [r7, #4]
				configASSERT( xResult );
 8008e82:	687b      	ldr	r3, [r7, #4]
 8008e84:	2b00      	cmp	r3, #0
 8008e86:	d10a      	bne.n	8008e9e <prvSwitchTimerLists+0x9a>
	__asm volatile
 8008e88:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008e8c:	f383 8811 	msr	BASEPRI, r3
 8008e90:	f3bf 8f6f 	isb	sy
 8008e94:	f3bf 8f4f 	dsb	sy
 8008e98:	603b      	str	r3, [r7, #0]
}
 8008e9a:	bf00      	nop
 8008e9c:	e7fe      	b.n	8008e9c <prvSwitchTimerLists+0x98>
	while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
 8008e9e:	4b09      	ldr	r3, [pc, #36]	; (8008ec4 <prvSwitchTimerLists+0xc0>)
 8008ea0:	681b      	ldr	r3, [r3, #0]
 8008ea2:	681b      	ldr	r3, [r3, #0]
 8008ea4:	2b00      	cmp	r3, #0
 8008ea6:	d1b1      	bne.n	8008e0c <prvSwitchTimerLists+0x8>
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	pxTemp = pxCurrentTimerList;
 8008ea8:	4b06      	ldr	r3, [pc, #24]	; (8008ec4 <prvSwitchTimerLists+0xc0>)
 8008eaa:	681b      	ldr	r3, [r3, #0]
 8008eac:	617b      	str	r3, [r7, #20]
	pxCurrentTimerList = pxOverflowTimerList;
 8008eae:	4b06      	ldr	r3, [pc, #24]	; (8008ec8 <prvSwitchTimerLists+0xc4>)
 8008eb0:	681b      	ldr	r3, [r3, #0]
 8008eb2:	4a04      	ldr	r2, [pc, #16]	; (8008ec4 <prvSwitchTimerLists+0xc0>)
 8008eb4:	6013      	str	r3, [r2, #0]
	pxOverflowTimerList = pxTemp;
 8008eb6:	4a04      	ldr	r2, [pc, #16]	; (8008ec8 <prvSwitchTimerLists+0xc4>)
 8008eb8:	697b      	ldr	r3, [r7, #20]
 8008eba:	6013      	str	r3, [r2, #0]
}
 8008ebc:	bf00      	nop
 8008ebe:	3718      	adds	r7, #24
 8008ec0:	46bd      	mov	sp, r7
 8008ec2:	bd80      	pop	{r7, pc}
 8008ec4:	20000fac 	.word	0x20000fac
 8008ec8:	20000fb0 	.word	0x20000fb0

08008ecc <prvCheckForValidListAndQueue>:
/*-----------------------------------------------------------*/

static void prvCheckForValidListAndQueue( void )
{
 8008ecc:	b580      	push	{r7, lr}
 8008ece:	b082      	sub	sp, #8
 8008ed0:	af02      	add	r7, sp, #8
	/* Check that the list from which active timers are referenced, and the
	queue used to communicate with the timer service, have been
	initialised. */
	taskENTER_CRITICAL();
 8008ed2:	f000 f967 	bl	80091a4 <vPortEnterCritical>
	{
		if( xTimerQueue == NULL )
 8008ed6:	4b15      	ldr	r3, [pc, #84]	; (8008f2c <prvCheckForValidListAndQueue+0x60>)
 8008ed8:	681b      	ldr	r3, [r3, #0]
 8008eda:	2b00      	cmp	r3, #0
 8008edc:	d120      	bne.n	8008f20 <prvCheckForValidListAndQueue+0x54>
		{
			vListInitialise( &xActiveTimerList1 );
 8008ede:	4814      	ldr	r0, [pc, #80]	; (8008f30 <prvCheckForValidListAndQueue+0x64>)
 8008ee0:	f7fd ff1a 	bl	8006d18 <vListInitialise>
			vListInitialise( &xActiveTimerList2 );
 8008ee4:	4813      	ldr	r0, [pc, #76]	; (8008f34 <prvCheckForValidListAndQueue+0x68>)
 8008ee6:	f7fd ff17 	bl	8006d18 <vListInitialise>
			pxCurrentTimerList = &xActiveTimerList1;
 8008eea:	4b13      	ldr	r3, [pc, #76]	; (8008f38 <prvCheckForValidListAndQueue+0x6c>)
 8008eec:	4a10      	ldr	r2, [pc, #64]	; (8008f30 <prvCheckForValidListAndQueue+0x64>)
 8008eee:	601a      	str	r2, [r3, #0]
			pxOverflowTimerList = &xActiveTimerList2;
 8008ef0:	4b12      	ldr	r3, [pc, #72]	; (8008f3c <prvCheckForValidListAndQueue+0x70>)
 8008ef2:	4a10      	ldr	r2, [pc, #64]	; (8008f34 <prvCheckForValidListAndQueue+0x68>)
 8008ef4:	601a      	str	r2, [r3, #0]
				/* The timer queue is allocated statically in case
				configSUPPORT_DYNAMIC_ALLOCATION is 0. */
				static StaticQueue_t xStaticTimerQueue; /*lint !e956 Ok to declare in this manner to prevent additional conditional compilation guards in other locations. */
				static uint8_t ucStaticTimerQueueStorage[ ( size_t ) configTIMER_QUEUE_LENGTH * sizeof( DaemonTaskMessage_t ) ]; /*lint !e956 Ok to declare in this manner to prevent additional conditional compilation guards in other locations. */

				xTimerQueue = xQueueCreateStatic( ( UBaseType_t ) configTIMER_QUEUE_LENGTH, ( UBaseType_t ) sizeof( DaemonTaskMessage_t ), &( ucStaticTimerQueueStorage[ 0 ] ), &xStaticTimerQueue );
 8008ef6:	2300      	movs	r3, #0
 8008ef8:	9300      	str	r3, [sp, #0]
 8008efa:	4b11      	ldr	r3, [pc, #68]	; (8008f40 <prvCheckForValidListAndQueue+0x74>)
 8008efc:	4a11      	ldr	r2, [pc, #68]	; (8008f44 <prvCheckForValidListAndQueue+0x78>)
 8008efe:	2110      	movs	r1, #16
 8008f00:	200a      	movs	r0, #10
 8008f02:	f7fe f825 	bl	8006f50 <xQueueGenericCreateStatic>
 8008f06:	4603      	mov	r3, r0
 8008f08:	4a08      	ldr	r2, [pc, #32]	; (8008f2c <prvCheckForValidListAndQueue+0x60>)
 8008f0a:	6013      	str	r3, [r2, #0]
			}
			#endif

			#if ( configQUEUE_REGISTRY_SIZE > 0 )
			{
				if( xTimerQueue != NULL )
 8008f0c:	4b07      	ldr	r3, [pc, #28]	; (8008f2c <prvCheckForValidListAndQueue+0x60>)
 8008f0e:	681b      	ldr	r3, [r3, #0]
 8008f10:	2b00      	cmp	r3, #0
 8008f12:	d005      	beq.n	8008f20 <prvCheckForValidListAndQueue+0x54>
				{
					vQueueAddToRegistry( xTimerQueue, "TmrQ" );
 8008f14:	4b05      	ldr	r3, [pc, #20]	; (8008f2c <prvCheckForValidListAndQueue+0x60>)
 8008f16:	681b      	ldr	r3, [r3, #0]
 8008f18:	490b      	ldr	r1, [pc, #44]	; (8008f48 <prvCheckForValidListAndQueue+0x7c>)
 8008f1a:	4618      	mov	r0, r3
 8008f1c:	f7fe fc3e 	bl	800779c <vQueueAddToRegistry>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 8008f20:	f000 f970 	bl	8009204 <vPortExitCritical>
}
 8008f24:	bf00      	nop
 8008f26:	46bd      	mov	sp, r7
 8008f28:	bd80      	pop	{r7, pc}
 8008f2a:	bf00      	nop
 8008f2c:	20000fb4 	.word	0x20000fb4
 8008f30:	20000f84 	.word	0x20000f84
 8008f34:	20000f98 	.word	0x20000f98
 8008f38:	20000fac 	.word	0x20000fac
 8008f3c:	20000fb0 	.word	0x20000fb0
 8008f40:	20001060 	.word	0x20001060
 8008f44:	20000fc0 	.word	0x20000fc0
 8008f48:	0800ae9c 	.word	0x0800ae9c

08008f4c <pxPortInitialiseStack>:

/*
 * See header file for description.
 */
StackType_t *pxPortInitialiseStack( StackType_t *pxTopOfStack, TaskFunction_t pxCode, void *pvParameters )
{
 8008f4c:	b480      	push	{r7}
 8008f4e:	b085      	sub	sp, #20
 8008f50:	af00      	add	r7, sp, #0
 8008f52:	60f8      	str	r0, [r7, #12]
 8008f54:	60b9      	str	r1, [r7, #8]
 8008f56:	607a      	str	r2, [r7, #4]
	/* Simulate the stack frame as it would be created by a context switch
	interrupt. */

	/* Offset added to account for the way the MCU uses the stack on entry/exit
	of interrupts, and to ensure alignment. */
	pxTopOfStack--;
 8008f58:	68fb      	ldr	r3, [r7, #12]
 8008f5a:	3b04      	subs	r3, #4
 8008f5c:	60fb      	str	r3, [r7, #12]

	*pxTopOfStack = portINITIAL_XPSR;	/* xPSR */
 8008f5e:	68fb      	ldr	r3, [r7, #12]
 8008f60:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 8008f64:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 8008f66:	68fb      	ldr	r3, [r7, #12]
 8008f68:	3b04      	subs	r3, #4
 8008f6a:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( ( StackType_t ) pxCode ) & portSTART_ADDRESS_MASK;	/* PC */
 8008f6c:	68bb      	ldr	r3, [r7, #8]
 8008f6e:	f023 0201 	bic.w	r2, r3, #1
 8008f72:	68fb      	ldr	r3, [r7, #12]
 8008f74:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 8008f76:	68fb      	ldr	r3, [r7, #12]
 8008f78:	3b04      	subs	r3, #4
 8008f7a:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) portTASK_RETURN_ADDRESS;	/* LR */
 8008f7c:	4a0c      	ldr	r2, [pc, #48]	; (8008fb0 <pxPortInitialiseStack+0x64>)
 8008f7e:	68fb      	ldr	r3, [r7, #12]
 8008f80:	601a      	str	r2, [r3, #0]

	/* Save code space by skipping register initialisation. */
	pxTopOfStack -= 5;	/* R12, R3, R2 and R1. */
 8008f82:	68fb      	ldr	r3, [r7, #12]
 8008f84:	3b14      	subs	r3, #20
 8008f86:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) pvParameters;	/* R0 */
 8008f88:	687a      	ldr	r2, [r7, #4]
 8008f8a:	68fb      	ldr	r3, [r7, #12]
 8008f8c:	601a      	str	r2, [r3, #0]

	/* A save method is being used that requires each task to maintain its
	own exec return value. */
	pxTopOfStack--;
 8008f8e:	68fb      	ldr	r3, [r7, #12]
 8008f90:	3b04      	subs	r3, #4
 8008f92:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = portINITIAL_EXC_RETURN;
 8008f94:	68fb      	ldr	r3, [r7, #12]
 8008f96:	f06f 0202 	mvn.w	r2, #2
 8008f9a:	601a      	str	r2, [r3, #0]

	pxTopOfStack -= 8;	/* R11, R10, R9, R8, R7, R6, R5 and R4. */
 8008f9c:	68fb      	ldr	r3, [r7, #12]
 8008f9e:	3b20      	subs	r3, #32
 8008fa0:	60fb      	str	r3, [r7, #12]

	return pxTopOfStack;
 8008fa2:	68fb      	ldr	r3, [r7, #12]
}
 8008fa4:	4618      	mov	r0, r3
 8008fa6:	3714      	adds	r7, #20
 8008fa8:	46bd      	mov	sp, r7
 8008faa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008fae:	4770      	bx	lr
 8008fb0:	08008fb5 	.word	0x08008fb5

08008fb4 <prvTaskExitError>:
/*-----------------------------------------------------------*/

static void prvTaskExitError( void )
{
 8008fb4:	b480      	push	{r7}
 8008fb6:	b085      	sub	sp, #20
 8008fb8:	af00      	add	r7, sp, #0
volatile uint32_t ulDummy = 0;
 8008fba:	2300      	movs	r3, #0
 8008fbc:	607b      	str	r3, [r7, #4]
	its caller as there is nothing to return to.  If a task wants to exit it
	should instead call vTaskDelete( NULL ).

	Artificially force an assert() to be triggered if configASSERT() is
	defined, then stop here so application writers can catch the error. */
	configASSERT( uxCriticalNesting == ~0UL );
 8008fbe:	4b12      	ldr	r3, [pc, #72]	; (8009008 <prvTaskExitError+0x54>)
 8008fc0:	681b      	ldr	r3, [r3, #0]
 8008fc2:	f1b3 3fff 	cmp.w	r3, #4294967295
 8008fc6:	d00a      	beq.n	8008fde <prvTaskExitError+0x2a>
	__asm volatile
 8008fc8:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008fcc:	f383 8811 	msr	BASEPRI, r3
 8008fd0:	f3bf 8f6f 	isb	sy
 8008fd4:	f3bf 8f4f 	dsb	sy
 8008fd8:	60fb      	str	r3, [r7, #12]
}
 8008fda:	bf00      	nop
 8008fdc:	e7fe      	b.n	8008fdc <prvTaskExitError+0x28>
	__asm volatile
 8008fde:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008fe2:	f383 8811 	msr	BASEPRI, r3
 8008fe6:	f3bf 8f6f 	isb	sy
 8008fea:	f3bf 8f4f 	dsb	sy
 8008fee:	60bb      	str	r3, [r7, #8]
}
 8008ff0:	bf00      	nop
	portDISABLE_INTERRUPTS();
	while( ulDummy == 0 )
 8008ff2:	bf00      	nop
 8008ff4:	687b      	ldr	r3, [r7, #4]
 8008ff6:	2b00      	cmp	r3, #0
 8008ff8:	d0fc      	beq.n	8008ff4 <prvTaskExitError+0x40>
		about code appearing after this function is called - making ulDummy
		volatile makes the compiler think the function could return and
		therefore not output an 'unreachable code' warning for code that appears
		after it. */
	}
}
 8008ffa:	bf00      	nop
 8008ffc:	bf00      	nop
 8008ffe:	3714      	adds	r7, #20
 8009000:	46bd      	mov	sp, r7
 8009002:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009006:	4770      	bx	lr
 8009008:	2000000c 	.word	0x2000000c
 800900c:	00000000 	.word	0x00000000

08009010 <SVC_Handler>:
/*-----------------------------------------------------------*/

void vPortSVCHandler( void )
{
	__asm volatile (
 8009010:	4b07      	ldr	r3, [pc, #28]	; (8009030 <pxCurrentTCBConst2>)
 8009012:	6819      	ldr	r1, [r3, #0]
 8009014:	6808      	ldr	r0, [r1, #0]
 8009016:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800901a:	f380 8809 	msr	PSP, r0
 800901e:	f3bf 8f6f 	isb	sy
 8009022:	f04f 0000 	mov.w	r0, #0
 8009026:	f380 8811 	msr	BASEPRI, r0
 800902a:	4770      	bx	lr
 800902c:	f3af 8000 	nop.w

08009030 <pxCurrentTCBConst2>:
 8009030:	20000a84 	.word	0x20000a84
					"	bx r14							\n"
					"									\n"
					"	.align 4						\n"
					"pxCurrentTCBConst2: .word pxCurrentTCB				\n"
				);
}
 8009034:	bf00      	nop
 8009036:	bf00      	nop

08009038 <prvPortStartFirstTask>:
{
	/* Start the first task.  This also clears the bit that indicates the FPU is
	in use in case the FPU was used before the scheduler was started - which
	would otherwise result in the unnecessary leaving of space in the SVC stack
	for lazy saving of FPU registers. */
	__asm volatile(
 8009038:	4808      	ldr	r0, [pc, #32]	; (800905c <prvPortStartFirstTask+0x24>)
 800903a:	6800      	ldr	r0, [r0, #0]
 800903c:	6800      	ldr	r0, [r0, #0]
 800903e:	f380 8808 	msr	MSP, r0
 8009042:	f04f 0000 	mov.w	r0, #0
 8009046:	f380 8814 	msr	CONTROL, r0
 800904a:	b662      	cpsie	i
 800904c:	b661      	cpsie	f
 800904e:	f3bf 8f4f 	dsb	sy
 8009052:	f3bf 8f6f 	isb	sy
 8009056:	df00      	svc	0
 8009058:	bf00      	nop
					" dsb					\n"
					" isb					\n"
					" svc 0					\n" /* System call to start first task. */
					" nop					\n"
				);
}
 800905a:	bf00      	nop
 800905c:	e000ed08 	.word	0xe000ed08

08009060 <xPortStartScheduler>:

/*
 * See header file for description.
 */
BaseType_t xPortStartScheduler( void )
{
 8009060:	b580      	push	{r7, lr}
 8009062:	b086      	sub	sp, #24
 8009064:	af00      	add	r7, sp, #0
	configASSERT( configMAX_SYSCALL_INTERRUPT_PRIORITY );

	/* This port can be used on all revisions of the Cortex-M7 core other than
	the r0p1 parts.  r0p1 parts should use the port from the
	/source/portable/GCC/ARM_CM7/r0p1 directory. */
	configASSERT( portCPUID != portCORTEX_M7_r0p1_ID );
 8009066:	4b46      	ldr	r3, [pc, #280]	; (8009180 <xPortStartScheduler+0x120>)
 8009068:	681b      	ldr	r3, [r3, #0]
 800906a:	4a46      	ldr	r2, [pc, #280]	; (8009184 <xPortStartScheduler+0x124>)
 800906c:	4293      	cmp	r3, r2
 800906e:	d10a      	bne.n	8009086 <xPortStartScheduler+0x26>
	__asm volatile
 8009070:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009074:	f383 8811 	msr	BASEPRI, r3
 8009078:	f3bf 8f6f 	isb	sy
 800907c:	f3bf 8f4f 	dsb	sy
 8009080:	613b      	str	r3, [r7, #16]
}
 8009082:	bf00      	nop
 8009084:	e7fe      	b.n	8009084 <xPortStartScheduler+0x24>
	configASSERT( portCPUID != portCORTEX_M7_r0p0_ID );
 8009086:	4b3e      	ldr	r3, [pc, #248]	; (8009180 <xPortStartScheduler+0x120>)
 8009088:	681b      	ldr	r3, [r3, #0]
 800908a:	4a3f      	ldr	r2, [pc, #252]	; (8009188 <xPortStartScheduler+0x128>)
 800908c:	4293      	cmp	r3, r2
 800908e:	d10a      	bne.n	80090a6 <xPortStartScheduler+0x46>
	__asm volatile
 8009090:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009094:	f383 8811 	msr	BASEPRI, r3
 8009098:	f3bf 8f6f 	isb	sy
 800909c:	f3bf 8f4f 	dsb	sy
 80090a0:	60fb      	str	r3, [r7, #12]
}
 80090a2:	bf00      	nop
 80090a4:	e7fe      	b.n	80090a4 <xPortStartScheduler+0x44>

	#if( configASSERT_DEFINED == 1 )
	{
		volatile uint32_t ulOriginalPriority;
		volatile uint8_t * const pucFirstUserPriorityRegister = ( volatile uint8_t * const ) ( portNVIC_IP_REGISTERS_OFFSET_16 + portFIRST_USER_INTERRUPT_NUMBER );
 80090a6:	4b39      	ldr	r3, [pc, #228]	; (800918c <xPortStartScheduler+0x12c>)
 80090a8:	617b      	str	r3, [r7, #20]
		functions can be called.  ISR safe functions are those that end in
		"FromISR".  FreeRTOS maintains separate thread and ISR API functions to
		ensure interrupt entry is as fast and simple as possible.

		Save the interrupt priority value that is about to be clobbered. */
		ulOriginalPriority = *pucFirstUserPriorityRegister;
 80090aa:	697b      	ldr	r3, [r7, #20]
 80090ac:	781b      	ldrb	r3, [r3, #0]
 80090ae:	b2db      	uxtb	r3, r3
 80090b0:	607b      	str	r3, [r7, #4]

		/* Determine the number of priority bits available.  First write to all
		possible bits. */
		*pucFirstUserPriorityRegister = portMAX_8_BIT_VALUE;
 80090b2:	697b      	ldr	r3, [r7, #20]
 80090b4:	22ff      	movs	r2, #255	; 0xff
 80090b6:	701a      	strb	r2, [r3, #0]

		/* Read the value back to see how many bits stuck. */
		ucMaxPriorityValue = *pucFirstUserPriorityRegister;
 80090b8:	697b      	ldr	r3, [r7, #20]
 80090ba:	781b      	ldrb	r3, [r3, #0]
 80090bc:	b2db      	uxtb	r3, r3
 80090be:	70fb      	strb	r3, [r7, #3]

		/* Use the same mask on the maximum system call priority. */
		ucMaxSysCallPriority = configMAX_SYSCALL_INTERRUPT_PRIORITY & ucMaxPriorityValue;
 80090c0:	78fb      	ldrb	r3, [r7, #3]
 80090c2:	b2db      	uxtb	r3, r3
 80090c4:	f003 0350 	and.w	r3, r3, #80	; 0x50
 80090c8:	b2da      	uxtb	r2, r3
 80090ca:	4b31      	ldr	r3, [pc, #196]	; (8009190 <xPortStartScheduler+0x130>)
 80090cc:	701a      	strb	r2, [r3, #0]

		/* Calculate the maximum acceptable priority group value for the number
		of bits read back. */
		ulMaxPRIGROUPValue = portMAX_PRIGROUP_BITS;
 80090ce:	4b31      	ldr	r3, [pc, #196]	; (8009194 <xPortStartScheduler+0x134>)
 80090d0:	2207      	movs	r2, #7
 80090d2:	601a      	str	r2, [r3, #0]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 80090d4:	e009      	b.n	80090ea <xPortStartScheduler+0x8a>
		{
			ulMaxPRIGROUPValue--;
 80090d6:	4b2f      	ldr	r3, [pc, #188]	; (8009194 <xPortStartScheduler+0x134>)
 80090d8:	681b      	ldr	r3, [r3, #0]
 80090da:	3b01      	subs	r3, #1
 80090dc:	4a2d      	ldr	r2, [pc, #180]	; (8009194 <xPortStartScheduler+0x134>)
 80090de:	6013      	str	r3, [r2, #0]
			ucMaxPriorityValue <<= ( uint8_t ) 0x01;
 80090e0:	78fb      	ldrb	r3, [r7, #3]
 80090e2:	b2db      	uxtb	r3, r3
 80090e4:	005b      	lsls	r3, r3, #1
 80090e6:	b2db      	uxtb	r3, r3
 80090e8:	70fb      	strb	r3, [r7, #3]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 80090ea:	78fb      	ldrb	r3, [r7, #3]
 80090ec:	b2db      	uxtb	r3, r3
 80090ee:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80090f2:	2b80      	cmp	r3, #128	; 0x80
 80090f4:	d0ef      	beq.n	80090d6 <xPortStartScheduler+0x76>
		#ifdef configPRIO_BITS
		{
			/* Check the FreeRTOS configuration that defines the number of
			priority bits matches the number of priority bits actually queried
			from the hardware. */
			configASSERT( ( portMAX_PRIGROUP_BITS - ulMaxPRIGROUPValue ) == configPRIO_BITS );
 80090f6:	4b27      	ldr	r3, [pc, #156]	; (8009194 <xPortStartScheduler+0x134>)
 80090f8:	681b      	ldr	r3, [r3, #0]
 80090fa:	f1c3 0307 	rsb	r3, r3, #7
 80090fe:	2b04      	cmp	r3, #4
 8009100:	d00a      	beq.n	8009118 <xPortStartScheduler+0xb8>
	__asm volatile
 8009102:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009106:	f383 8811 	msr	BASEPRI, r3
 800910a:	f3bf 8f6f 	isb	sy
 800910e:	f3bf 8f4f 	dsb	sy
 8009112:	60bb      	str	r3, [r7, #8]
}
 8009114:	bf00      	nop
 8009116:	e7fe      	b.n	8009116 <xPortStartScheduler+0xb6>
		}
		#endif

		/* Shift the priority group value back to its position within the AIRCR
		register. */
		ulMaxPRIGROUPValue <<= portPRIGROUP_SHIFT;
 8009118:	4b1e      	ldr	r3, [pc, #120]	; (8009194 <xPortStartScheduler+0x134>)
 800911a:	681b      	ldr	r3, [r3, #0]
 800911c:	021b      	lsls	r3, r3, #8
 800911e:	4a1d      	ldr	r2, [pc, #116]	; (8009194 <xPortStartScheduler+0x134>)
 8009120:	6013      	str	r3, [r2, #0]
		ulMaxPRIGROUPValue &= portPRIORITY_GROUP_MASK;
 8009122:	4b1c      	ldr	r3, [pc, #112]	; (8009194 <xPortStartScheduler+0x134>)
 8009124:	681b      	ldr	r3, [r3, #0]
 8009126:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 800912a:	4a1a      	ldr	r2, [pc, #104]	; (8009194 <xPortStartScheduler+0x134>)
 800912c:	6013      	str	r3, [r2, #0]

		/* Restore the clobbered interrupt priority register to its original
		value. */
		*pucFirstUserPriorityRegister = ulOriginalPriority;
 800912e:	687b      	ldr	r3, [r7, #4]
 8009130:	b2da      	uxtb	r2, r3
 8009132:	697b      	ldr	r3, [r7, #20]
 8009134:	701a      	strb	r2, [r3, #0]
	}
	#endif /* conifgASSERT_DEFINED */

	/* Make PendSV and SysTick the lowest priority interrupts. */
	portNVIC_SYSPRI2_REG |= portNVIC_PENDSV_PRI;
 8009136:	4b18      	ldr	r3, [pc, #96]	; (8009198 <xPortStartScheduler+0x138>)
 8009138:	681b      	ldr	r3, [r3, #0]
 800913a:	4a17      	ldr	r2, [pc, #92]	; (8009198 <xPortStartScheduler+0x138>)
 800913c:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8009140:	6013      	str	r3, [r2, #0]
	portNVIC_SYSPRI2_REG |= portNVIC_SYSTICK_PRI;
 8009142:	4b15      	ldr	r3, [pc, #84]	; (8009198 <xPortStartScheduler+0x138>)
 8009144:	681b      	ldr	r3, [r3, #0]
 8009146:	4a14      	ldr	r2, [pc, #80]	; (8009198 <xPortStartScheduler+0x138>)
 8009148:	f043 4370 	orr.w	r3, r3, #4026531840	; 0xf0000000
 800914c:	6013      	str	r3, [r2, #0]

	/* Start the timer that generates the tick ISR.  Interrupts are disabled
	here already. */
	vPortSetupTimerInterrupt();
 800914e:	f000 f8dd 	bl	800930c <vPortSetupTimerInterrupt>

	/* Initialise the critical nesting count ready for the first task. */
	uxCriticalNesting = 0;
 8009152:	4b12      	ldr	r3, [pc, #72]	; (800919c <xPortStartScheduler+0x13c>)
 8009154:	2200      	movs	r2, #0
 8009156:	601a      	str	r2, [r3, #0]

	/* Ensure the VFP is enabled - it should be anyway. */
	vPortEnableVFP();
 8009158:	f000 f8fc 	bl	8009354 <vPortEnableVFP>

	/* Lazy save always. */
	*( portFPCCR ) |= portASPEN_AND_LSPEN_BITS;
 800915c:	4b10      	ldr	r3, [pc, #64]	; (80091a0 <xPortStartScheduler+0x140>)
 800915e:	681b      	ldr	r3, [r3, #0]
 8009160:	4a0f      	ldr	r2, [pc, #60]	; (80091a0 <xPortStartScheduler+0x140>)
 8009162:	f043 4340 	orr.w	r3, r3, #3221225472	; 0xc0000000
 8009166:	6013      	str	r3, [r2, #0]

	/* Start the first task. */
	prvPortStartFirstTask();
 8009168:	f7ff ff66 	bl	8009038 <prvPortStartFirstTask>
	exit error function to prevent compiler warnings about a static function
	not being called in the case that the application writer overrides this
	functionality by defining configTASK_RETURN_ADDRESS.  Call
	vTaskSwitchContext() so link time optimisation does not remove the
	symbol. */
	vTaskSwitchContext();
 800916c:	f7ff f82e 	bl	80081cc <vTaskSwitchContext>
	prvTaskExitError();
 8009170:	f7ff ff20 	bl	8008fb4 <prvTaskExitError>

	/* Should not get here! */
	return 0;
 8009174:	2300      	movs	r3, #0
}
 8009176:	4618      	mov	r0, r3
 8009178:	3718      	adds	r7, #24
 800917a:	46bd      	mov	sp, r7
 800917c:	bd80      	pop	{r7, pc}
 800917e:	bf00      	nop
 8009180:	e000ed00 	.word	0xe000ed00
 8009184:	410fc271 	.word	0x410fc271
 8009188:	410fc270 	.word	0x410fc270
 800918c:	e000e400 	.word	0xe000e400
 8009190:	200010b0 	.word	0x200010b0
 8009194:	200010b4 	.word	0x200010b4
 8009198:	e000ed20 	.word	0xe000ed20
 800919c:	2000000c 	.word	0x2000000c
 80091a0:	e000ef34 	.word	0xe000ef34

080091a4 <vPortEnterCritical>:
	configASSERT( uxCriticalNesting == 1000UL );
}
/*-----------------------------------------------------------*/

void vPortEnterCritical( void )
{
 80091a4:	b480      	push	{r7}
 80091a6:	b083      	sub	sp, #12
 80091a8:	af00      	add	r7, sp, #0
	__asm volatile
 80091aa:	f04f 0350 	mov.w	r3, #80	; 0x50
 80091ae:	f383 8811 	msr	BASEPRI, r3
 80091b2:	f3bf 8f6f 	isb	sy
 80091b6:	f3bf 8f4f 	dsb	sy
 80091ba:	607b      	str	r3, [r7, #4]
}
 80091bc:	bf00      	nop
	portDISABLE_INTERRUPTS();
	uxCriticalNesting++;
 80091be:	4b0f      	ldr	r3, [pc, #60]	; (80091fc <vPortEnterCritical+0x58>)
 80091c0:	681b      	ldr	r3, [r3, #0]
 80091c2:	3301      	adds	r3, #1
 80091c4:	4a0d      	ldr	r2, [pc, #52]	; (80091fc <vPortEnterCritical+0x58>)
 80091c6:	6013      	str	r3, [r2, #0]
	/* This is not the interrupt safe version of the enter critical function so
	assert() if it is being called from an interrupt context.  Only API
	functions that end in "FromISR" can be used in an interrupt.  Only assert if
	the critical nesting count is 1 to protect against recursive calls if the
	assert function also uses a critical section. */
	if( uxCriticalNesting == 1 )
 80091c8:	4b0c      	ldr	r3, [pc, #48]	; (80091fc <vPortEnterCritical+0x58>)
 80091ca:	681b      	ldr	r3, [r3, #0]
 80091cc:	2b01      	cmp	r3, #1
 80091ce:	d10f      	bne.n	80091f0 <vPortEnterCritical+0x4c>
	{
		configASSERT( ( portNVIC_INT_CTRL_REG & portVECTACTIVE_MASK ) == 0 );
 80091d0:	4b0b      	ldr	r3, [pc, #44]	; (8009200 <vPortEnterCritical+0x5c>)
 80091d2:	681b      	ldr	r3, [r3, #0]
 80091d4:	b2db      	uxtb	r3, r3
 80091d6:	2b00      	cmp	r3, #0
 80091d8:	d00a      	beq.n	80091f0 <vPortEnterCritical+0x4c>
	__asm volatile
 80091da:	f04f 0350 	mov.w	r3, #80	; 0x50
 80091de:	f383 8811 	msr	BASEPRI, r3
 80091e2:	f3bf 8f6f 	isb	sy
 80091e6:	f3bf 8f4f 	dsb	sy
 80091ea:	603b      	str	r3, [r7, #0]
}
 80091ec:	bf00      	nop
 80091ee:	e7fe      	b.n	80091ee <vPortEnterCritical+0x4a>
	}
}
 80091f0:	bf00      	nop
 80091f2:	370c      	adds	r7, #12
 80091f4:	46bd      	mov	sp, r7
 80091f6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80091fa:	4770      	bx	lr
 80091fc:	2000000c 	.word	0x2000000c
 8009200:	e000ed04 	.word	0xe000ed04

08009204 <vPortExitCritical>:
/*-----------------------------------------------------------*/

void vPortExitCritical( void )
{
 8009204:	b480      	push	{r7}
 8009206:	b083      	sub	sp, #12
 8009208:	af00      	add	r7, sp, #0
	configASSERT( uxCriticalNesting );
 800920a:	4b12      	ldr	r3, [pc, #72]	; (8009254 <vPortExitCritical+0x50>)
 800920c:	681b      	ldr	r3, [r3, #0]
 800920e:	2b00      	cmp	r3, #0
 8009210:	d10a      	bne.n	8009228 <vPortExitCritical+0x24>
	__asm volatile
 8009212:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009216:	f383 8811 	msr	BASEPRI, r3
 800921a:	f3bf 8f6f 	isb	sy
 800921e:	f3bf 8f4f 	dsb	sy
 8009222:	607b      	str	r3, [r7, #4]
}
 8009224:	bf00      	nop
 8009226:	e7fe      	b.n	8009226 <vPortExitCritical+0x22>
	uxCriticalNesting--;
 8009228:	4b0a      	ldr	r3, [pc, #40]	; (8009254 <vPortExitCritical+0x50>)
 800922a:	681b      	ldr	r3, [r3, #0]
 800922c:	3b01      	subs	r3, #1
 800922e:	4a09      	ldr	r2, [pc, #36]	; (8009254 <vPortExitCritical+0x50>)
 8009230:	6013      	str	r3, [r2, #0]
	if( uxCriticalNesting == 0 )
 8009232:	4b08      	ldr	r3, [pc, #32]	; (8009254 <vPortExitCritical+0x50>)
 8009234:	681b      	ldr	r3, [r3, #0]
 8009236:	2b00      	cmp	r3, #0
 8009238:	d105      	bne.n	8009246 <vPortExitCritical+0x42>
 800923a:	2300      	movs	r3, #0
 800923c:	603b      	str	r3, [r7, #0]
	__asm volatile
 800923e:	683b      	ldr	r3, [r7, #0]
 8009240:	f383 8811 	msr	BASEPRI, r3
}
 8009244:	bf00      	nop
	{
		portENABLE_INTERRUPTS();
	}
}
 8009246:	bf00      	nop
 8009248:	370c      	adds	r7, #12
 800924a:	46bd      	mov	sp, r7
 800924c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009250:	4770      	bx	lr
 8009252:	bf00      	nop
 8009254:	2000000c 	.word	0x2000000c
	...

08009260 <PendSV_Handler>:

void xPortPendSVHandler( void )
{
	/* This is a naked function. */

	__asm volatile
 8009260:	f3ef 8009 	mrs	r0, PSP
 8009264:	f3bf 8f6f 	isb	sy
 8009268:	4b15      	ldr	r3, [pc, #84]	; (80092c0 <pxCurrentTCBConst>)
 800926a:	681a      	ldr	r2, [r3, #0]
 800926c:	f01e 0f10 	tst.w	lr, #16
 8009270:	bf08      	it	eq
 8009272:	ed20 8a10 	vstmdbeq	r0!, {s16-s31}
 8009276:	e920 4ff0 	stmdb	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800927a:	6010      	str	r0, [r2, #0]
 800927c:	e92d 0009 	stmdb	sp!, {r0, r3}
 8009280:	f04f 0050 	mov.w	r0, #80	; 0x50
 8009284:	f380 8811 	msr	BASEPRI, r0
 8009288:	f3bf 8f4f 	dsb	sy
 800928c:	f3bf 8f6f 	isb	sy
 8009290:	f7fe ff9c 	bl	80081cc <vTaskSwitchContext>
 8009294:	f04f 0000 	mov.w	r0, #0
 8009298:	f380 8811 	msr	BASEPRI, r0
 800929c:	bc09      	pop	{r0, r3}
 800929e:	6819      	ldr	r1, [r3, #0]
 80092a0:	6808      	ldr	r0, [r1, #0]
 80092a2:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80092a6:	f01e 0f10 	tst.w	lr, #16
 80092aa:	bf08      	it	eq
 80092ac:	ecb0 8a10 	vldmiaeq	r0!, {s16-s31}
 80092b0:	f380 8809 	msr	PSP, r0
 80092b4:	f3bf 8f6f 	isb	sy
 80092b8:	4770      	bx	lr
 80092ba:	bf00      	nop
 80092bc:	f3af 8000 	nop.w

080092c0 <pxCurrentTCBConst>:
 80092c0:	20000a84 	.word	0x20000a84
	"										\n"
	"	.align 4							\n"
	"pxCurrentTCBConst: .word pxCurrentTCB	\n"
	::"i"(configMAX_SYSCALL_INTERRUPT_PRIORITY)
	);
}
 80092c4:	bf00      	nop
 80092c6:	bf00      	nop

080092c8 <xPortSysTickHandler>:
/*-----------------------------------------------------------*/

void xPortSysTickHandler( void )
{
 80092c8:	b580      	push	{r7, lr}
 80092ca:	b082      	sub	sp, #8
 80092cc:	af00      	add	r7, sp, #0
	__asm volatile
 80092ce:	f04f 0350 	mov.w	r3, #80	; 0x50
 80092d2:	f383 8811 	msr	BASEPRI, r3
 80092d6:	f3bf 8f6f 	isb	sy
 80092da:	f3bf 8f4f 	dsb	sy
 80092de:	607b      	str	r3, [r7, #4]
}
 80092e0:	bf00      	nop
	save and then restore the interrupt mask value as its value is already
	known. */
	portDISABLE_INTERRUPTS();
	{
		/* Increment the RTOS tick. */
		if( xTaskIncrementTick() != pdFALSE )
 80092e2:	f7fe feb9 	bl	8008058 <xTaskIncrementTick>
 80092e6:	4603      	mov	r3, r0
 80092e8:	2b00      	cmp	r3, #0
 80092ea:	d003      	beq.n	80092f4 <xPortSysTickHandler+0x2c>
		{
			/* A context switch is required.  Context switching is performed in
			the PendSV interrupt.  Pend the PendSV interrupt. */
			portNVIC_INT_CTRL_REG = portNVIC_PENDSVSET_BIT;
 80092ec:	4b06      	ldr	r3, [pc, #24]	; (8009308 <xPortSysTickHandler+0x40>)
 80092ee:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80092f2:	601a      	str	r2, [r3, #0]
 80092f4:	2300      	movs	r3, #0
 80092f6:	603b      	str	r3, [r7, #0]
	__asm volatile
 80092f8:	683b      	ldr	r3, [r7, #0]
 80092fa:	f383 8811 	msr	BASEPRI, r3
}
 80092fe:	bf00      	nop
		}
	}
	portENABLE_INTERRUPTS();
}
 8009300:	bf00      	nop
 8009302:	3708      	adds	r7, #8
 8009304:	46bd      	mov	sp, r7
 8009306:	bd80      	pop	{r7, pc}
 8009308:	e000ed04 	.word	0xe000ed04

0800930c <vPortSetupTimerInterrupt>:
/*
 * Setup the systick timer to generate the tick interrupts at the required
 * frequency.
 */
__attribute__(( weak )) void vPortSetupTimerInterrupt( void )
{
 800930c:	b480      	push	{r7}
 800930e:	af00      	add	r7, sp, #0
		ulStoppedTimerCompensation = portMISSED_COUNTS_FACTOR / ( configCPU_CLOCK_HZ / configSYSTICK_CLOCK_HZ );
	}
	#endif /* configUSE_TICKLESS_IDLE */

	/* Stop and clear the SysTick. */
	portNVIC_SYSTICK_CTRL_REG = 0UL;
 8009310:	4b0b      	ldr	r3, [pc, #44]	; (8009340 <vPortSetupTimerInterrupt+0x34>)
 8009312:	2200      	movs	r2, #0
 8009314:	601a      	str	r2, [r3, #0]
	portNVIC_SYSTICK_CURRENT_VALUE_REG = 0UL;
 8009316:	4b0b      	ldr	r3, [pc, #44]	; (8009344 <vPortSetupTimerInterrupt+0x38>)
 8009318:	2200      	movs	r2, #0
 800931a:	601a      	str	r2, [r3, #0]

	/* Configure SysTick to interrupt at the requested rate. */
	portNVIC_SYSTICK_LOAD_REG = ( configSYSTICK_CLOCK_HZ / configTICK_RATE_HZ ) - 1UL;
 800931c:	4b0a      	ldr	r3, [pc, #40]	; (8009348 <vPortSetupTimerInterrupt+0x3c>)
 800931e:	681b      	ldr	r3, [r3, #0]
 8009320:	4a0a      	ldr	r2, [pc, #40]	; (800934c <vPortSetupTimerInterrupt+0x40>)
 8009322:	fba2 2303 	umull	r2, r3, r2, r3
 8009326:	099b      	lsrs	r3, r3, #6
 8009328:	4a09      	ldr	r2, [pc, #36]	; (8009350 <vPortSetupTimerInterrupt+0x44>)
 800932a:	3b01      	subs	r3, #1
 800932c:	6013      	str	r3, [r2, #0]
	portNVIC_SYSTICK_CTRL_REG = ( portNVIC_SYSTICK_CLK_BIT | portNVIC_SYSTICK_INT_BIT | portNVIC_SYSTICK_ENABLE_BIT );
 800932e:	4b04      	ldr	r3, [pc, #16]	; (8009340 <vPortSetupTimerInterrupt+0x34>)
 8009330:	2207      	movs	r2, #7
 8009332:	601a      	str	r2, [r3, #0]
}
 8009334:	bf00      	nop
 8009336:	46bd      	mov	sp, r7
 8009338:	f85d 7b04 	ldr.w	r7, [sp], #4
 800933c:	4770      	bx	lr
 800933e:	bf00      	nop
 8009340:	e000e010 	.word	0xe000e010
 8009344:	e000e018 	.word	0xe000e018
 8009348:	20000000 	.word	0x20000000
 800934c:	10624dd3 	.word	0x10624dd3
 8009350:	e000e014 	.word	0xe000e014

08009354 <vPortEnableVFP>:
/*-----------------------------------------------------------*/

/* This is a naked function. */
static void vPortEnableVFP( void )
{
	__asm volatile
 8009354:	f8df 000c 	ldr.w	r0, [pc, #12]	; 8009364 <vPortEnableVFP+0x10>
 8009358:	6801      	ldr	r1, [r0, #0]
 800935a:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 800935e:	6001      	str	r1, [r0, #0]
 8009360:	4770      	bx	lr
		"								\n"
		"	orr r1, r1, #( 0xf << 20 )	\n" /* Enable CP10 and CP11 coprocessors, then save back. */
		"	str r1, [r0]				\n"
		"	bx r14						"
	);
}
 8009362:	bf00      	nop
 8009364:	e000ed88 	.word	0xe000ed88

08009368 <vPortValidateInterruptPriority>:
/*-----------------------------------------------------------*/

#if( configASSERT_DEFINED == 1 )

	void vPortValidateInterruptPriority( void )
	{
 8009368:	b480      	push	{r7}
 800936a:	b085      	sub	sp, #20
 800936c:	af00      	add	r7, sp, #0
	uint32_t ulCurrentInterrupt;
	uint8_t ucCurrentPriority;

		/* Obtain the number of the currently executing interrupt. */
		__asm volatile( "mrs %0, ipsr" : "=r"( ulCurrentInterrupt ) :: "memory" );
 800936e:	f3ef 8305 	mrs	r3, IPSR
 8009372:	60fb      	str	r3, [r7, #12]

		/* Is the interrupt number a user defined interrupt? */
		if( ulCurrentInterrupt >= portFIRST_USER_INTERRUPT_NUMBER )
 8009374:	68fb      	ldr	r3, [r7, #12]
 8009376:	2b0f      	cmp	r3, #15
 8009378:	d914      	bls.n	80093a4 <vPortValidateInterruptPriority+0x3c>
		{
			/* Look up the interrupt's priority. */
			ucCurrentPriority = pcInterruptPriorityRegisters[ ulCurrentInterrupt ];
 800937a:	4a17      	ldr	r2, [pc, #92]	; (80093d8 <vPortValidateInterruptPriority+0x70>)
 800937c:	68fb      	ldr	r3, [r7, #12]
 800937e:	4413      	add	r3, r2
 8009380:	781b      	ldrb	r3, [r3, #0]
 8009382:	72fb      	strb	r3, [r7, #11]
			interrupt entry is as fast and simple as possible.

			The following links provide detailed information:
			http://www.freertos.org/RTOS-Cortex-M3-M4.html
			http://www.freertos.org/FAQHelp.html */
			configASSERT( ucCurrentPriority >= ucMaxSysCallPriority );
 8009384:	4b15      	ldr	r3, [pc, #84]	; (80093dc <vPortValidateInterruptPriority+0x74>)
 8009386:	781b      	ldrb	r3, [r3, #0]
 8009388:	7afa      	ldrb	r2, [r7, #11]
 800938a:	429a      	cmp	r2, r3
 800938c:	d20a      	bcs.n	80093a4 <vPortValidateInterruptPriority+0x3c>
	__asm volatile
 800938e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009392:	f383 8811 	msr	BASEPRI, r3
 8009396:	f3bf 8f6f 	isb	sy
 800939a:	f3bf 8f4f 	dsb	sy
 800939e:	607b      	str	r3, [r7, #4]
}
 80093a0:	bf00      	nop
 80093a2:	e7fe      	b.n	80093a2 <vPortValidateInterruptPriority+0x3a>
		configuration then the correct setting can be achieved on all Cortex-M
		devices by calling NVIC_SetPriorityGrouping( 0 ); before starting the
		scheduler.  Note however that some vendor specific peripheral libraries
		assume a non-zero priority group setting, in which cases using a value
		of zero will result in unpredictable behaviour. */
		configASSERT( ( portAIRCR_REG & portPRIORITY_GROUP_MASK ) <= ulMaxPRIGROUPValue );
 80093a4:	4b0e      	ldr	r3, [pc, #56]	; (80093e0 <vPortValidateInterruptPriority+0x78>)
 80093a6:	681b      	ldr	r3, [r3, #0]
 80093a8:	f403 62e0 	and.w	r2, r3, #1792	; 0x700
 80093ac:	4b0d      	ldr	r3, [pc, #52]	; (80093e4 <vPortValidateInterruptPriority+0x7c>)
 80093ae:	681b      	ldr	r3, [r3, #0]
 80093b0:	429a      	cmp	r2, r3
 80093b2:	d90a      	bls.n	80093ca <vPortValidateInterruptPriority+0x62>
	__asm volatile
 80093b4:	f04f 0350 	mov.w	r3, #80	; 0x50
 80093b8:	f383 8811 	msr	BASEPRI, r3
 80093bc:	f3bf 8f6f 	isb	sy
 80093c0:	f3bf 8f4f 	dsb	sy
 80093c4:	603b      	str	r3, [r7, #0]
}
 80093c6:	bf00      	nop
 80093c8:	e7fe      	b.n	80093c8 <vPortValidateInterruptPriority+0x60>
	}
 80093ca:	bf00      	nop
 80093cc:	3714      	adds	r7, #20
 80093ce:	46bd      	mov	sp, r7
 80093d0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80093d4:	4770      	bx	lr
 80093d6:	bf00      	nop
 80093d8:	e000e3f0 	.word	0xe000e3f0
 80093dc:	200010b0 	.word	0x200010b0
 80093e0:	e000ed0c 	.word	0xe000ed0c
 80093e4:	200010b4 	.word	0x200010b4

080093e8 <pvPortMalloc>:
static size_t xBlockAllocatedBit = 0;

/*-----------------------------------------------------------*/

void *pvPortMalloc( size_t xWantedSize )
{
 80093e8:	b580      	push	{r7, lr}
 80093ea:	b08a      	sub	sp, #40	; 0x28
 80093ec:	af00      	add	r7, sp, #0
 80093ee:	6078      	str	r0, [r7, #4]
BlockLink_t *pxBlock, *pxPreviousBlock, *pxNewBlockLink;
void *pvReturn = NULL;
 80093f0:	2300      	movs	r3, #0
 80093f2:	61fb      	str	r3, [r7, #28]

	vTaskSuspendAll();
 80093f4:	f7fe fd74 	bl	8007ee0 <vTaskSuspendAll>
	{
		/* If this is the first call to malloc then the heap will require
		initialisation to setup the list of free blocks. */
		if( pxEnd == NULL )
 80093f8:	4b5d      	ldr	r3, [pc, #372]	; (8009570 <pvPortMalloc+0x188>)
 80093fa:	681b      	ldr	r3, [r3, #0]
 80093fc:	2b00      	cmp	r3, #0
 80093fe:	d101      	bne.n	8009404 <pvPortMalloc+0x1c>
		{
			prvHeapInit();
 8009400:	f000 f924 	bl	800964c <prvHeapInit>

		/* Check the requested block size is not so large that the top bit is
		set.  The top bit of the block size member of the BlockLink_t structure
		is used to determine who owns the block - the application or the
		kernel, so it must be free. */
		if( ( xWantedSize & xBlockAllocatedBit ) == 0 )
 8009404:	4b5b      	ldr	r3, [pc, #364]	; (8009574 <pvPortMalloc+0x18c>)
 8009406:	681a      	ldr	r2, [r3, #0]
 8009408:	687b      	ldr	r3, [r7, #4]
 800940a:	4013      	ands	r3, r2
 800940c:	2b00      	cmp	r3, #0
 800940e:	f040 8093 	bne.w	8009538 <pvPortMalloc+0x150>
		{
			/* The wanted size is increased so it can contain a BlockLink_t
			structure in addition to the requested amount of bytes. */
			if( xWantedSize > 0 )
 8009412:	687b      	ldr	r3, [r7, #4]
 8009414:	2b00      	cmp	r3, #0
 8009416:	d01d      	beq.n	8009454 <pvPortMalloc+0x6c>
			{
				xWantedSize += xHeapStructSize;
 8009418:	2208      	movs	r2, #8
 800941a:	687b      	ldr	r3, [r7, #4]
 800941c:	4413      	add	r3, r2
 800941e:	607b      	str	r3, [r7, #4]

				/* Ensure that blocks are always aligned to the required number
				of bytes. */
				if( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) != 0x00 )
 8009420:	687b      	ldr	r3, [r7, #4]
 8009422:	f003 0307 	and.w	r3, r3, #7
 8009426:	2b00      	cmp	r3, #0
 8009428:	d014      	beq.n	8009454 <pvPortMalloc+0x6c>
				{
					/* Byte alignment required. */
					xWantedSize += ( portBYTE_ALIGNMENT - ( xWantedSize & portBYTE_ALIGNMENT_MASK ) );
 800942a:	687b      	ldr	r3, [r7, #4]
 800942c:	f023 0307 	bic.w	r3, r3, #7
 8009430:	3308      	adds	r3, #8
 8009432:	607b      	str	r3, [r7, #4]
					configASSERT( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) == 0 );
 8009434:	687b      	ldr	r3, [r7, #4]
 8009436:	f003 0307 	and.w	r3, r3, #7
 800943a:	2b00      	cmp	r3, #0
 800943c:	d00a      	beq.n	8009454 <pvPortMalloc+0x6c>
	__asm volatile
 800943e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009442:	f383 8811 	msr	BASEPRI, r3
 8009446:	f3bf 8f6f 	isb	sy
 800944a:	f3bf 8f4f 	dsb	sy
 800944e:	617b      	str	r3, [r7, #20]
}
 8009450:	bf00      	nop
 8009452:	e7fe      	b.n	8009452 <pvPortMalloc+0x6a>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}

			if( ( xWantedSize > 0 ) && ( xWantedSize <= xFreeBytesRemaining ) )
 8009454:	687b      	ldr	r3, [r7, #4]
 8009456:	2b00      	cmp	r3, #0
 8009458:	d06e      	beq.n	8009538 <pvPortMalloc+0x150>
 800945a:	4b47      	ldr	r3, [pc, #284]	; (8009578 <pvPortMalloc+0x190>)
 800945c:	681b      	ldr	r3, [r3, #0]
 800945e:	687a      	ldr	r2, [r7, #4]
 8009460:	429a      	cmp	r2, r3
 8009462:	d869      	bhi.n	8009538 <pvPortMalloc+0x150>
			{
				/* Traverse the list from the start	(lowest address) block until
				one	of adequate size is found. */
				pxPreviousBlock = &xStart;
 8009464:	4b45      	ldr	r3, [pc, #276]	; (800957c <pvPortMalloc+0x194>)
 8009466:	623b      	str	r3, [r7, #32]
				pxBlock = xStart.pxNextFreeBlock;
 8009468:	4b44      	ldr	r3, [pc, #272]	; (800957c <pvPortMalloc+0x194>)
 800946a:	681b      	ldr	r3, [r3, #0]
 800946c:	627b      	str	r3, [r7, #36]	; 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 800946e:	e004      	b.n	800947a <pvPortMalloc+0x92>
				{
					pxPreviousBlock = pxBlock;
 8009470:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009472:	623b      	str	r3, [r7, #32]
					pxBlock = pxBlock->pxNextFreeBlock;
 8009474:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009476:	681b      	ldr	r3, [r3, #0]
 8009478:	627b      	str	r3, [r7, #36]	; 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 800947a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800947c:	685b      	ldr	r3, [r3, #4]
 800947e:	687a      	ldr	r2, [r7, #4]
 8009480:	429a      	cmp	r2, r3
 8009482:	d903      	bls.n	800948c <pvPortMalloc+0xa4>
 8009484:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009486:	681b      	ldr	r3, [r3, #0]
 8009488:	2b00      	cmp	r3, #0
 800948a:	d1f1      	bne.n	8009470 <pvPortMalloc+0x88>
				}

				/* If the end marker was reached then a block of adequate size
				was	not found. */
				if( pxBlock != pxEnd )
 800948c:	4b38      	ldr	r3, [pc, #224]	; (8009570 <pvPortMalloc+0x188>)
 800948e:	681b      	ldr	r3, [r3, #0]
 8009490:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8009492:	429a      	cmp	r2, r3
 8009494:	d050      	beq.n	8009538 <pvPortMalloc+0x150>
				{
					/* Return the memory space pointed to - jumping over the
					BlockLink_t structure at its start. */
					pvReturn = ( void * ) ( ( ( uint8_t * ) pxPreviousBlock->pxNextFreeBlock ) + xHeapStructSize );
 8009496:	6a3b      	ldr	r3, [r7, #32]
 8009498:	681b      	ldr	r3, [r3, #0]
 800949a:	2208      	movs	r2, #8
 800949c:	4413      	add	r3, r2
 800949e:	61fb      	str	r3, [r7, #28]

					/* This block is being returned for use so must be taken out
					of the list of free blocks. */
					pxPreviousBlock->pxNextFreeBlock = pxBlock->pxNextFreeBlock;
 80094a0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80094a2:	681a      	ldr	r2, [r3, #0]
 80094a4:	6a3b      	ldr	r3, [r7, #32]
 80094a6:	601a      	str	r2, [r3, #0]

					/* If the block is larger than required it can be split into
					two. */
					if( ( pxBlock->xBlockSize - xWantedSize ) > heapMINIMUM_BLOCK_SIZE )
 80094a8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80094aa:	685a      	ldr	r2, [r3, #4]
 80094ac:	687b      	ldr	r3, [r7, #4]
 80094ae:	1ad2      	subs	r2, r2, r3
 80094b0:	2308      	movs	r3, #8
 80094b2:	005b      	lsls	r3, r3, #1
 80094b4:	429a      	cmp	r2, r3
 80094b6:	d91f      	bls.n	80094f8 <pvPortMalloc+0x110>
					{
						/* This block is to be split into two.  Create a new
						block following the number of bytes requested. The void
						cast is used to prevent byte alignment warnings from the
						compiler. */
						pxNewBlockLink = ( void * ) ( ( ( uint8_t * ) pxBlock ) + xWantedSize );
 80094b8:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80094ba:	687b      	ldr	r3, [r7, #4]
 80094bc:	4413      	add	r3, r2
 80094be:	61bb      	str	r3, [r7, #24]
						configASSERT( ( ( ( size_t ) pxNewBlockLink ) & portBYTE_ALIGNMENT_MASK ) == 0 );
 80094c0:	69bb      	ldr	r3, [r7, #24]
 80094c2:	f003 0307 	and.w	r3, r3, #7
 80094c6:	2b00      	cmp	r3, #0
 80094c8:	d00a      	beq.n	80094e0 <pvPortMalloc+0xf8>
	__asm volatile
 80094ca:	f04f 0350 	mov.w	r3, #80	; 0x50
 80094ce:	f383 8811 	msr	BASEPRI, r3
 80094d2:	f3bf 8f6f 	isb	sy
 80094d6:	f3bf 8f4f 	dsb	sy
 80094da:	613b      	str	r3, [r7, #16]
}
 80094dc:	bf00      	nop
 80094de:	e7fe      	b.n	80094de <pvPortMalloc+0xf6>

						/* Calculate the sizes of two blocks split from the
						single block. */
						pxNewBlockLink->xBlockSize = pxBlock->xBlockSize - xWantedSize;
 80094e0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80094e2:	685a      	ldr	r2, [r3, #4]
 80094e4:	687b      	ldr	r3, [r7, #4]
 80094e6:	1ad2      	subs	r2, r2, r3
 80094e8:	69bb      	ldr	r3, [r7, #24]
 80094ea:	605a      	str	r2, [r3, #4]
						pxBlock->xBlockSize = xWantedSize;
 80094ec:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80094ee:	687a      	ldr	r2, [r7, #4]
 80094f0:	605a      	str	r2, [r3, #4]

						/* Insert the new block into the list of free blocks. */
						prvInsertBlockIntoFreeList( pxNewBlockLink );
 80094f2:	69b8      	ldr	r0, [r7, #24]
 80094f4:	f000 f90c 	bl	8009710 <prvInsertBlockIntoFreeList>
					else
					{
						mtCOVERAGE_TEST_MARKER();
					}

					xFreeBytesRemaining -= pxBlock->xBlockSize;
 80094f8:	4b1f      	ldr	r3, [pc, #124]	; (8009578 <pvPortMalloc+0x190>)
 80094fa:	681a      	ldr	r2, [r3, #0]
 80094fc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80094fe:	685b      	ldr	r3, [r3, #4]
 8009500:	1ad3      	subs	r3, r2, r3
 8009502:	4a1d      	ldr	r2, [pc, #116]	; (8009578 <pvPortMalloc+0x190>)
 8009504:	6013      	str	r3, [r2, #0]

					if( xFreeBytesRemaining < xMinimumEverFreeBytesRemaining )
 8009506:	4b1c      	ldr	r3, [pc, #112]	; (8009578 <pvPortMalloc+0x190>)
 8009508:	681a      	ldr	r2, [r3, #0]
 800950a:	4b1d      	ldr	r3, [pc, #116]	; (8009580 <pvPortMalloc+0x198>)
 800950c:	681b      	ldr	r3, [r3, #0]
 800950e:	429a      	cmp	r2, r3
 8009510:	d203      	bcs.n	800951a <pvPortMalloc+0x132>
					{
						xMinimumEverFreeBytesRemaining = xFreeBytesRemaining;
 8009512:	4b19      	ldr	r3, [pc, #100]	; (8009578 <pvPortMalloc+0x190>)
 8009514:	681b      	ldr	r3, [r3, #0]
 8009516:	4a1a      	ldr	r2, [pc, #104]	; (8009580 <pvPortMalloc+0x198>)
 8009518:	6013      	str	r3, [r2, #0]
						mtCOVERAGE_TEST_MARKER();
					}

					/* The block is being returned - it is allocated and owned
					by the application and has no "next" block. */
					pxBlock->xBlockSize |= xBlockAllocatedBit;
 800951a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800951c:	685a      	ldr	r2, [r3, #4]
 800951e:	4b15      	ldr	r3, [pc, #84]	; (8009574 <pvPortMalloc+0x18c>)
 8009520:	681b      	ldr	r3, [r3, #0]
 8009522:	431a      	orrs	r2, r3
 8009524:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009526:	605a      	str	r2, [r3, #4]
					pxBlock->pxNextFreeBlock = NULL;
 8009528:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800952a:	2200      	movs	r2, #0
 800952c:	601a      	str	r2, [r3, #0]
					xNumberOfSuccessfulAllocations++;
 800952e:	4b15      	ldr	r3, [pc, #84]	; (8009584 <pvPortMalloc+0x19c>)
 8009530:	681b      	ldr	r3, [r3, #0]
 8009532:	3301      	adds	r3, #1
 8009534:	4a13      	ldr	r2, [pc, #76]	; (8009584 <pvPortMalloc+0x19c>)
 8009536:	6013      	str	r3, [r2, #0]
			mtCOVERAGE_TEST_MARKER();
		}

		traceMALLOC( pvReturn, xWantedSize );
	}
	( void ) xTaskResumeAll();
 8009538:	f7fe fce0 	bl	8007efc <xTaskResumeAll>

	#if( configUSE_MALLOC_FAILED_HOOK == 1 )
	{
		if( pvReturn == NULL )
 800953c:	69fb      	ldr	r3, [r7, #28]
 800953e:	2b00      	cmp	r3, #0
 8009540:	d101      	bne.n	8009546 <pvPortMalloc+0x15e>
		{
			extern void vApplicationMallocFailedHook( void );
			vApplicationMallocFailedHook();
 8009542:	f7f7 f839 	bl	80005b8 <vApplicationMallocFailedHook>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif

	configASSERT( ( ( ( size_t ) pvReturn ) & ( size_t ) portBYTE_ALIGNMENT_MASK ) == 0 );
 8009546:	69fb      	ldr	r3, [r7, #28]
 8009548:	f003 0307 	and.w	r3, r3, #7
 800954c:	2b00      	cmp	r3, #0
 800954e:	d00a      	beq.n	8009566 <pvPortMalloc+0x17e>
	__asm volatile
 8009550:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009554:	f383 8811 	msr	BASEPRI, r3
 8009558:	f3bf 8f6f 	isb	sy
 800955c:	f3bf 8f4f 	dsb	sy
 8009560:	60fb      	str	r3, [r7, #12]
}
 8009562:	bf00      	nop
 8009564:	e7fe      	b.n	8009564 <pvPortMalloc+0x17c>
	return pvReturn;
 8009566:	69fb      	ldr	r3, [r7, #28]
}
 8009568:	4618      	mov	r0, r3
 800956a:	3728      	adds	r7, #40	; 0x28
 800956c:	46bd      	mov	sp, r7
 800956e:	bd80      	pop	{r7, pc}
 8009570:	200090c0 	.word	0x200090c0
 8009574:	200090d4 	.word	0x200090d4
 8009578:	200090c4 	.word	0x200090c4
 800957c:	200090b8 	.word	0x200090b8
 8009580:	200090c8 	.word	0x200090c8
 8009584:	200090cc 	.word	0x200090cc

08009588 <vPortFree>:
/*-----------------------------------------------------------*/

void vPortFree( void *pv )
{
 8009588:	b580      	push	{r7, lr}
 800958a:	b086      	sub	sp, #24
 800958c:	af00      	add	r7, sp, #0
 800958e:	6078      	str	r0, [r7, #4]
uint8_t *puc = ( uint8_t * ) pv;
 8009590:	687b      	ldr	r3, [r7, #4]
 8009592:	617b      	str	r3, [r7, #20]
BlockLink_t *pxLink;

	if( pv != NULL )
 8009594:	687b      	ldr	r3, [r7, #4]
 8009596:	2b00      	cmp	r3, #0
 8009598:	d04d      	beq.n	8009636 <vPortFree+0xae>
	{
		/* The memory being freed will have an BlockLink_t structure immediately
		before it. */
		puc -= xHeapStructSize;
 800959a:	2308      	movs	r3, #8
 800959c:	425b      	negs	r3, r3
 800959e:	697a      	ldr	r2, [r7, #20]
 80095a0:	4413      	add	r3, r2
 80095a2:	617b      	str	r3, [r7, #20]

		/* This casting is to keep the compiler from issuing warnings. */
		pxLink = ( void * ) puc;
 80095a4:	697b      	ldr	r3, [r7, #20]
 80095a6:	613b      	str	r3, [r7, #16]

		/* Check the block is actually allocated. */
		configASSERT( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 );
 80095a8:	693b      	ldr	r3, [r7, #16]
 80095aa:	685a      	ldr	r2, [r3, #4]
 80095ac:	4b24      	ldr	r3, [pc, #144]	; (8009640 <vPortFree+0xb8>)
 80095ae:	681b      	ldr	r3, [r3, #0]
 80095b0:	4013      	ands	r3, r2
 80095b2:	2b00      	cmp	r3, #0
 80095b4:	d10a      	bne.n	80095cc <vPortFree+0x44>
	__asm volatile
 80095b6:	f04f 0350 	mov.w	r3, #80	; 0x50
 80095ba:	f383 8811 	msr	BASEPRI, r3
 80095be:	f3bf 8f6f 	isb	sy
 80095c2:	f3bf 8f4f 	dsb	sy
 80095c6:	60fb      	str	r3, [r7, #12]
}
 80095c8:	bf00      	nop
 80095ca:	e7fe      	b.n	80095ca <vPortFree+0x42>
		configASSERT( pxLink->pxNextFreeBlock == NULL );
 80095cc:	693b      	ldr	r3, [r7, #16]
 80095ce:	681b      	ldr	r3, [r3, #0]
 80095d0:	2b00      	cmp	r3, #0
 80095d2:	d00a      	beq.n	80095ea <vPortFree+0x62>
	__asm volatile
 80095d4:	f04f 0350 	mov.w	r3, #80	; 0x50
 80095d8:	f383 8811 	msr	BASEPRI, r3
 80095dc:	f3bf 8f6f 	isb	sy
 80095e0:	f3bf 8f4f 	dsb	sy
 80095e4:	60bb      	str	r3, [r7, #8]
}
 80095e6:	bf00      	nop
 80095e8:	e7fe      	b.n	80095e8 <vPortFree+0x60>

		if( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 )
 80095ea:	693b      	ldr	r3, [r7, #16]
 80095ec:	685a      	ldr	r2, [r3, #4]
 80095ee:	4b14      	ldr	r3, [pc, #80]	; (8009640 <vPortFree+0xb8>)
 80095f0:	681b      	ldr	r3, [r3, #0]
 80095f2:	4013      	ands	r3, r2
 80095f4:	2b00      	cmp	r3, #0
 80095f6:	d01e      	beq.n	8009636 <vPortFree+0xae>
		{
			if( pxLink->pxNextFreeBlock == NULL )
 80095f8:	693b      	ldr	r3, [r7, #16]
 80095fa:	681b      	ldr	r3, [r3, #0]
 80095fc:	2b00      	cmp	r3, #0
 80095fe:	d11a      	bne.n	8009636 <vPortFree+0xae>
			{
				/* The block is being returned to the heap - it is no longer
				allocated. */
				pxLink->xBlockSize &= ~xBlockAllocatedBit;
 8009600:	693b      	ldr	r3, [r7, #16]
 8009602:	685a      	ldr	r2, [r3, #4]
 8009604:	4b0e      	ldr	r3, [pc, #56]	; (8009640 <vPortFree+0xb8>)
 8009606:	681b      	ldr	r3, [r3, #0]
 8009608:	43db      	mvns	r3, r3
 800960a:	401a      	ands	r2, r3
 800960c:	693b      	ldr	r3, [r7, #16]
 800960e:	605a      	str	r2, [r3, #4]

				vTaskSuspendAll();
 8009610:	f7fe fc66 	bl	8007ee0 <vTaskSuspendAll>
				{
					/* Add this block to the list of free blocks. */
					xFreeBytesRemaining += pxLink->xBlockSize;
 8009614:	693b      	ldr	r3, [r7, #16]
 8009616:	685a      	ldr	r2, [r3, #4]
 8009618:	4b0a      	ldr	r3, [pc, #40]	; (8009644 <vPortFree+0xbc>)
 800961a:	681b      	ldr	r3, [r3, #0]
 800961c:	4413      	add	r3, r2
 800961e:	4a09      	ldr	r2, [pc, #36]	; (8009644 <vPortFree+0xbc>)
 8009620:	6013      	str	r3, [r2, #0]
					traceFREE( pv, pxLink->xBlockSize );
					prvInsertBlockIntoFreeList( ( ( BlockLink_t * ) pxLink ) );
 8009622:	6938      	ldr	r0, [r7, #16]
 8009624:	f000 f874 	bl	8009710 <prvInsertBlockIntoFreeList>
					xNumberOfSuccessfulFrees++;
 8009628:	4b07      	ldr	r3, [pc, #28]	; (8009648 <vPortFree+0xc0>)
 800962a:	681b      	ldr	r3, [r3, #0]
 800962c:	3301      	adds	r3, #1
 800962e:	4a06      	ldr	r2, [pc, #24]	; (8009648 <vPortFree+0xc0>)
 8009630:	6013      	str	r3, [r2, #0]
				}
				( void ) xTaskResumeAll();
 8009632:	f7fe fc63 	bl	8007efc <xTaskResumeAll>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
}
 8009636:	bf00      	nop
 8009638:	3718      	adds	r7, #24
 800963a:	46bd      	mov	sp, r7
 800963c:	bd80      	pop	{r7, pc}
 800963e:	bf00      	nop
 8009640:	200090d4 	.word	0x200090d4
 8009644:	200090c4 	.word	0x200090c4
 8009648:	200090d0 	.word	0x200090d0

0800964c <prvHeapInit>:
	/* This just exists to keep the linker quiet. */
}
/*-----------------------------------------------------------*/

static void prvHeapInit( void )
{
 800964c:	b480      	push	{r7}
 800964e:	b085      	sub	sp, #20
 8009650:	af00      	add	r7, sp, #0
BlockLink_t *pxFirstFreeBlock;
uint8_t *pucAlignedHeap;
size_t uxAddress;
size_t xTotalHeapSize = configTOTAL_HEAP_SIZE;
 8009652:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8009656:	60bb      	str	r3, [r7, #8]

	/* Ensure the heap starts on a correctly aligned boundary. */
	uxAddress = ( size_t ) ucHeap;
 8009658:	4b27      	ldr	r3, [pc, #156]	; (80096f8 <prvHeapInit+0xac>)
 800965a:	60fb      	str	r3, [r7, #12]

	if( ( uxAddress & portBYTE_ALIGNMENT_MASK ) != 0 )
 800965c:	68fb      	ldr	r3, [r7, #12]
 800965e:	f003 0307 	and.w	r3, r3, #7
 8009662:	2b00      	cmp	r3, #0
 8009664:	d00c      	beq.n	8009680 <prvHeapInit+0x34>
	{
		uxAddress += ( portBYTE_ALIGNMENT - 1 );
 8009666:	68fb      	ldr	r3, [r7, #12]
 8009668:	3307      	adds	r3, #7
 800966a:	60fb      	str	r3, [r7, #12]
		uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 800966c:	68fb      	ldr	r3, [r7, #12]
 800966e:	f023 0307 	bic.w	r3, r3, #7
 8009672:	60fb      	str	r3, [r7, #12]
		xTotalHeapSize -= uxAddress - ( size_t ) ucHeap;
 8009674:	68ba      	ldr	r2, [r7, #8]
 8009676:	68fb      	ldr	r3, [r7, #12]
 8009678:	1ad3      	subs	r3, r2, r3
 800967a:	4a1f      	ldr	r2, [pc, #124]	; (80096f8 <prvHeapInit+0xac>)
 800967c:	4413      	add	r3, r2
 800967e:	60bb      	str	r3, [r7, #8]
	}

	pucAlignedHeap = ( uint8_t * ) uxAddress;
 8009680:	68fb      	ldr	r3, [r7, #12]
 8009682:	607b      	str	r3, [r7, #4]

	/* xStart is used to hold a pointer to the first item in the list of free
	blocks.  The void cast is used to prevent compiler warnings. */
	xStart.pxNextFreeBlock = ( void * ) pucAlignedHeap;
 8009684:	4a1d      	ldr	r2, [pc, #116]	; (80096fc <prvHeapInit+0xb0>)
 8009686:	687b      	ldr	r3, [r7, #4]
 8009688:	6013      	str	r3, [r2, #0]
	xStart.xBlockSize = ( size_t ) 0;
 800968a:	4b1c      	ldr	r3, [pc, #112]	; (80096fc <prvHeapInit+0xb0>)
 800968c:	2200      	movs	r2, #0
 800968e:	605a      	str	r2, [r3, #4]

	/* pxEnd is used to mark the end of the list of free blocks and is inserted
	at the end of the heap space. */
	uxAddress = ( ( size_t ) pucAlignedHeap ) + xTotalHeapSize;
 8009690:	687b      	ldr	r3, [r7, #4]
 8009692:	68ba      	ldr	r2, [r7, #8]
 8009694:	4413      	add	r3, r2
 8009696:	60fb      	str	r3, [r7, #12]
	uxAddress -= xHeapStructSize;
 8009698:	2208      	movs	r2, #8
 800969a:	68fb      	ldr	r3, [r7, #12]
 800969c:	1a9b      	subs	r3, r3, r2
 800969e:	60fb      	str	r3, [r7, #12]
	uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 80096a0:	68fb      	ldr	r3, [r7, #12]
 80096a2:	f023 0307 	bic.w	r3, r3, #7
 80096a6:	60fb      	str	r3, [r7, #12]
	pxEnd = ( void * ) uxAddress;
 80096a8:	68fb      	ldr	r3, [r7, #12]
 80096aa:	4a15      	ldr	r2, [pc, #84]	; (8009700 <prvHeapInit+0xb4>)
 80096ac:	6013      	str	r3, [r2, #0]
	pxEnd->xBlockSize = 0;
 80096ae:	4b14      	ldr	r3, [pc, #80]	; (8009700 <prvHeapInit+0xb4>)
 80096b0:	681b      	ldr	r3, [r3, #0]
 80096b2:	2200      	movs	r2, #0
 80096b4:	605a      	str	r2, [r3, #4]
	pxEnd->pxNextFreeBlock = NULL;
 80096b6:	4b12      	ldr	r3, [pc, #72]	; (8009700 <prvHeapInit+0xb4>)
 80096b8:	681b      	ldr	r3, [r3, #0]
 80096ba:	2200      	movs	r2, #0
 80096bc:	601a      	str	r2, [r3, #0]

	/* To start with there is a single free block that is sized to take up the
	entire heap space, minus the space taken by pxEnd. */
	pxFirstFreeBlock = ( void * ) pucAlignedHeap;
 80096be:	687b      	ldr	r3, [r7, #4]
 80096c0:	603b      	str	r3, [r7, #0]
	pxFirstFreeBlock->xBlockSize = uxAddress - ( size_t ) pxFirstFreeBlock;
 80096c2:	683b      	ldr	r3, [r7, #0]
 80096c4:	68fa      	ldr	r2, [r7, #12]
 80096c6:	1ad2      	subs	r2, r2, r3
 80096c8:	683b      	ldr	r3, [r7, #0]
 80096ca:	605a      	str	r2, [r3, #4]
	pxFirstFreeBlock->pxNextFreeBlock = pxEnd;
 80096cc:	4b0c      	ldr	r3, [pc, #48]	; (8009700 <prvHeapInit+0xb4>)
 80096ce:	681a      	ldr	r2, [r3, #0]
 80096d0:	683b      	ldr	r3, [r7, #0]
 80096d2:	601a      	str	r2, [r3, #0]

	/* Only one block exists - and it covers the entire usable heap space. */
	xMinimumEverFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 80096d4:	683b      	ldr	r3, [r7, #0]
 80096d6:	685b      	ldr	r3, [r3, #4]
 80096d8:	4a0a      	ldr	r2, [pc, #40]	; (8009704 <prvHeapInit+0xb8>)
 80096da:	6013      	str	r3, [r2, #0]
	xFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 80096dc:	683b      	ldr	r3, [r7, #0]
 80096de:	685b      	ldr	r3, [r3, #4]
 80096e0:	4a09      	ldr	r2, [pc, #36]	; (8009708 <prvHeapInit+0xbc>)
 80096e2:	6013      	str	r3, [r2, #0]

	/* Work out the position of the top bit in a size_t variable. */
	xBlockAllocatedBit = ( ( size_t ) 1 ) << ( ( sizeof( size_t ) * heapBITS_PER_BYTE ) - 1 );
 80096e4:	4b09      	ldr	r3, [pc, #36]	; (800970c <prvHeapInit+0xc0>)
 80096e6:	f04f 4200 	mov.w	r2, #2147483648	; 0x80000000
 80096ea:	601a      	str	r2, [r3, #0]
}
 80096ec:	bf00      	nop
 80096ee:	3714      	adds	r7, #20
 80096f0:	46bd      	mov	sp, r7
 80096f2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80096f6:	4770      	bx	lr
 80096f8:	200010b8 	.word	0x200010b8
 80096fc:	200090b8 	.word	0x200090b8
 8009700:	200090c0 	.word	0x200090c0
 8009704:	200090c8 	.word	0x200090c8
 8009708:	200090c4 	.word	0x200090c4
 800970c:	200090d4 	.word	0x200090d4

08009710 <prvInsertBlockIntoFreeList>:
/*-----------------------------------------------------------*/

static void prvInsertBlockIntoFreeList( BlockLink_t *pxBlockToInsert )
{
 8009710:	b480      	push	{r7}
 8009712:	b085      	sub	sp, #20
 8009714:	af00      	add	r7, sp, #0
 8009716:	6078      	str	r0, [r7, #4]
BlockLink_t *pxIterator;
uint8_t *puc;

	/* Iterate through the list until a block is found that has a higher address
	than the block being inserted. */
	for( pxIterator = &xStart; pxIterator->pxNextFreeBlock < pxBlockToInsert; pxIterator = pxIterator->pxNextFreeBlock )
 8009718:	4b28      	ldr	r3, [pc, #160]	; (80097bc <prvInsertBlockIntoFreeList+0xac>)
 800971a:	60fb      	str	r3, [r7, #12]
 800971c:	e002      	b.n	8009724 <prvInsertBlockIntoFreeList+0x14>
 800971e:	68fb      	ldr	r3, [r7, #12]
 8009720:	681b      	ldr	r3, [r3, #0]
 8009722:	60fb      	str	r3, [r7, #12]
 8009724:	68fb      	ldr	r3, [r7, #12]
 8009726:	681b      	ldr	r3, [r3, #0]
 8009728:	687a      	ldr	r2, [r7, #4]
 800972a:	429a      	cmp	r2, r3
 800972c:	d8f7      	bhi.n	800971e <prvInsertBlockIntoFreeList+0xe>
		/* Nothing to do here, just iterate to the right position. */
	}

	/* Do the block being inserted, and the block it is being inserted after
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxIterator;
 800972e:	68fb      	ldr	r3, [r7, #12]
 8009730:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxIterator->xBlockSize ) == ( uint8_t * ) pxBlockToInsert )
 8009732:	68fb      	ldr	r3, [r7, #12]
 8009734:	685b      	ldr	r3, [r3, #4]
 8009736:	68ba      	ldr	r2, [r7, #8]
 8009738:	4413      	add	r3, r2
 800973a:	687a      	ldr	r2, [r7, #4]
 800973c:	429a      	cmp	r2, r3
 800973e:	d108      	bne.n	8009752 <prvInsertBlockIntoFreeList+0x42>
	{
		pxIterator->xBlockSize += pxBlockToInsert->xBlockSize;
 8009740:	68fb      	ldr	r3, [r7, #12]
 8009742:	685a      	ldr	r2, [r3, #4]
 8009744:	687b      	ldr	r3, [r7, #4]
 8009746:	685b      	ldr	r3, [r3, #4]
 8009748:	441a      	add	r2, r3
 800974a:	68fb      	ldr	r3, [r7, #12]
 800974c:	605a      	str	r2, [r3, #4]
		pxBlockToInsert = pxIterator;
 800974e:	68fb      	ldr	r3, [r7, #12]
 8009750:	607b      	str	r3, [r7, #4]
		mtCOVERAGE_TEST_MARKER();
	}

	/* Do the block being inserted, and the block it is being inserted before
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxBlockToInsert;
 8009752:	687b      	ldr	r3, [r7, #4]
 8009754:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxBlockToInsert->xBlockSize ) == ( uint8_t * ) pxIterator->pxNextFreeBlock )
 8009756:	687b      	ldr	r3, [r7, #4]
 8009758:	685b      	ldr	r3, [r3, #4]
 800975a:	68ba      	ldr	r2, [r7, #8]
 800975c:	441a      	add	r2, r3
 800975e:	68fb      	ldr	r3, [r7, #12]
 8009760:	681b      	ldr	r3, [r3, #0]
 8009762:	429a      	cmp	r2, r3
 8009764:	d118      	bne.n	8009798 <prvInsertBlockIntoFreeList+0x88>
	{
		if( pxIterator->pxNextFreeBlock != pxEnd )
 8009766:	68fb      	ldr	r3, [r7, #12]
 8009768:	681a      	ldr	r2, [r3, #0]
 800976a:	4b15      	ldr	r3, [pc, #84]	; (80097c0 <prvInsertBlockIntoFreeList+0xb0>)
 800976c:	681b      	ldr	r3, [r3, #0]
 800976e:	429a      	cmp	r2, r3
 8009770:	d00d      	beq.n	800978e <prvInsertBlockIntoFreeList+0x7e>
		{
			/* Form one big block from the two blocks. */
			pxBlockToInsert->xBlockSize += pxIterator->pxNextFreeBlock->xBlockSize;
 8009772:	687b      	ldr	r3, [r7, #4]
 8009774:	685a      	ldr	r2, [r3, #4]
 8009776:	68fb      	ldr	r3, [r7, #12]
 8009778:	681b      	ldr	r3, [r3, #0]
 800977a:	685b      	ldr	r3, [r3, #4]
 800977c:	441a      	add	r2, r3
 800977e:	687b      	ldr	r3, [r7, #4]
 8009780:	605a      	str	r2, [r3, #4]
			pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock->pxNextFreeBlock;
 8009782:	68fb      	ldr	r3, [r7, #12]
 8009784:	681b      	ldr	r3, [r3, #0]
 8009786:	681a      	ldr	r2, [r3, #0]
 8009788:	687b      	ldr	r3, [r7, #4]
 800978a:	601a      	str	r2, [r3, #0]
 800978c:	e008      	b.n	80097a0 <prvInsertBlockIntoFreeList+0x90>
		}
		else
		{
			pxBlockToInsert->pxNextFreeBlock = pxEnd;
 800978e:	4b0c      	ldr	r3, [pc, #48]	; (80097c0 <prvInsertBlockIntoFreeList+0xb0>)
 8009790:	681a      	ldr	r2, [r3, #0]
 8009792:	687b      	ldr	r3, [r7, #4]
 8009794:	601a      	str	r2, [r3, #0]
 8009796:	e003      	b.n	80097a0 <prvInsertBlockIntoFreeList+0x90>
		}
	}
	else
	{
		pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock;
 8009798:	68fb      	ldr	r3, [r7, #12]
 800979a:	681a      	ldr	r2, [r3, #0]
 800979c:	687b      	ldr	r3, [r7, #4]
 800979e:	601a      	str	r2, [r3, #0]

	/* If the block being inserted plugged a gab, so was merged with the block
	before and the block after, then it's pxNextFreeBlock pointer will have
	already been set, and should not be set here as that would make it point
	to itself. */
	if( pxIterator != pxBlockToInsert )
 80097a0:	68fa      	ldr	r2, [r7, #12]
 80097a2:	687b      	ldr	r3, [r7, #4]
 80097a4:	429a      	cmp	r2, r3
 80097a6:	d002      	beq.n	80097ae <prvInsertBlockIntoFreeList+0x9e>
	{
		pxIterator->pxNextFreeBlock = pxBlockToInsert;
 80097a8:	68fb      	ldr	r3, [r7, #12]
 80097aa:	687a      	ldr	r2, [r7, #4]
 80097ac:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 80097ae:	bf00      	nop
 80097b0:	3714      	adds	r7, #20
 80097b2:	46bd      	mov	sp, r7
 80097b4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80097b8:	4770      	bx	lr
 80097ba:	bf00      	nop
 80097bc:	200090b8 	.word	0x200090b8
 80097c0:	200090c0 	.word	0x200090c0

080097c4 <HAL_HCD_SOF_Callback>:
  * @brief  SOF callback.
  * @param  hhcd: HCD handle
  * @retval None
  */
void HAL_HCD_SOF_Callback(HCD_HandleTypeDef *hhcd)
{
 80097c4:	b580      	push	{r7, lr}
 80097c6:	b082      	sub	sp, #8
 80097c8:	af00      	add	r7, sp, #0
 80097ca:	6078      	str	r0, [r7, #4]
  USBH_LL_IncTimer(hhcd->pData);
 80097cc:	687b      	ldr	r3, [r7, #4]
 80097ce:	f8d3 3300 	ldr.w	r3, [r3, #768]	; 0x300
 80097d2:	4618      	mov	r0, r3
 80097d4:	f7fc ffb2 	bl	800673c <USBH_LL_IncTimer>
}
 80097d8:	bf00      	nop
 80097da:	3708      	adds	r7, #8
 80097dc:	46bd      	mov	sp, r7
 80097de:	bd80      	pop	{r7, pc}

080097e0 <HAL_HCD_Connect_Callback>:
  * @brief  SOF callback.
  * @param  hhcd: HCD handle
  * @retval None
  */
void HAL_HCD_Connect_Callback(HCD_HandleTypeDef *hhcd)
{
 80097e0:	b580      	push	{r7, lr}
 80097e2:	b082      	sub	sp, #8
 80097e4:	af00      	add	r7, sp, #0
 80097e6:	6078      	str	r0, [r7, #4]
  USBH_LL_Connect(hhcd->pData);
 80097e8:	687b      	ldr	r3, [r7, #4]
 80097ea:	f8d3 3300 	ldr.w	r3, [r3, #768]	; 0x300
 80097ee:	4618      	mov	r0, r3
 80097f0:	f7fc fff6 	bl	80067e0 <USBH_LL_Connect>
}
 80097f4:	bf00      	nop
 80097f6:	3708      	adds	r7, #8
 80097f8:	46bd      	mov	sp, r7
 80097fa:	bd80      	pop	{r7, pc}

080097fc <HAL_HCD_Disconnect_Callback>:
  * @brief  SOF callback.
  * @param  hhcd: HCD handle
  * @retval None
  */
void HAL_HCD_Disconnect_Callback(HCD_HandleTypeDef *hhcd)
{
 80097fc:	b580      	push	{r7, lr}
 80097fe:	b082      	sub	sp, #8
 8009800:	af00      	add	r7, sp, #0
 8009802:	6078      	str	r0, [r7, #4]
  USBH_LL_Disconnect(hhcd->pData);
 8009804:	687b      	ldr	r3, [r7, #4]
 8009806:	f8d3 3300 	ldr.w	r3, [r3, #768]	; 0x300
 800980a:	4618      	mov	r0, r3
 800980c:	f7fd f80b 	bl	8006826 <USBH_LL_Disconnect>
}
 8009810:	bf00      	nop
 8009812:	3708      	adds	r7, #8
 8009814:	46bd      	mov	sp, r7
 8009816:	bd80      	pop	{r7, pc}

08009818 <HAL_HCD_HC_NotifyURBChange_Callback>:
  * @param  chnum: channel number
  * @param  urb_state: state
  * @retval None
  */
void HAL_HCD_HC_NotifyURBChange_Callback(HCD_HandleTypeDef *hhcd, uint8_t chnum, HCD_URBStateTypeDef urb_state)
{
 8009818:	b580      	push	{r7, lr}
 800981a:	b082      	sub	sp, #8
 800981c:	af00      	add	r7, sp, #0
 800981e:	6078      	str	r0, [r7, #4]
 8009820:	460b      	mov	r3, r1
 8009822:	70fb      	strb	r3, [r7, #3]
 8009824:	4613      	mov	r3, r2
 8009826:	70bb      	strb	r3, [r7, #2]
  /* To be used with OS to sync URB state with the global state machine */
#if (USBH_USE_OS == 1)
  USBH_LL_NotifyURBChange(hhcd->pData);
 8009828:	687b      	ldr	r3, [r7, #4]
 800982a:	f8d3 3300 	ldr.w	r3, [r3, #768]	; 0x300
 800982e:	4618      	mov	r0, r3
 8009830:	f7fd f82b 	bl	800688a <USBH_LL_NotifyURBChange>
#endif
}
 8009834:	bf00      	nop
 8009836:	3708      	adds	r7, #8
 8009838:	46bd      	mov	sp, r7
 800983a:	bd80      	pop	{r7, pc}

0800983c <HAL_HCD_PortEnabled_Callback>:
* @brief  Port Port Enabled callback.
  * @param  hhcd: HCD handle
  * @retval None
  */
void HAL_HCD_PortEnabled_Callback(HCD_HandleTypeDef *hhcd)
{
 800983c:	b580      	push	{r7, lr}
 800983e:	b082      	sub	sp, #8
 8009840:	af00      	add	r7, sp, #0
 8009842:	6078      	str	r0, [r7, #4]
  USBH_LL_PortEnabled(hhcd->pData);
 8009844:	687b      	ldr	r3, [r7, #4]
 8009846:	f8d3 3300 	ldr.w	r3, [r3, #768]	; 0x300
 800984a:	4618      	mov	r0, r3
 800984c:	f7fc ffa0 	bl	8006790 <USBH_LL_PortEnabled>
}
 8009850:	bf00      	nop
 8009852:	3708      	adds	r7, #8
 8009854:	46bd      	mov	sp, r7
 8009856:	bd80      	pop	{r7, pc}

08009858 <HAL_HCD_PortDisabled_Callback>:
  * @brief  Port Port Disabled callback.
  * @param  hhcd: HCD handle
  * @retval None
  */
void HAL_HCD_PortDisabled_Callback(HCD_HandleTypeDef *hhcd)
{
 8009858:	b580      	push	{r7, lr}
 800985a:	b082      	sub	sp, #8
 800985c:	af00      	add	r7, sp, #0
 800985e:	6078      	str	r0, [r7, #4]
  USBH_LL_PortDisabled(hhcd->pData);
 8009860:	687b      	ldr	r3, [r7, #4]
 8009862:	f8d3 3300 	ldr.w	r3, [r3, #768]	; 0x300
 8009866:	4618      	mov	r0, r3
 8009868:	f7fc ffac 	bl	80067c4 <USBH_LL_PortDisabled>
}
 800986c:	bf00      	nop
 800986e:	3708      	adds	r7, #8
 8009870:	46bd      	mov	sp, r7
 8009872:	bd80      	pop	{r7, pc}

08009874 <USBH_LL_Stop>:
  * @brief  Stop the low level portion of the host driver.
  * @param  phost: Host handle
  * @retval USBH status
  */
USBH_StatusTypeDef USBH_LL_Stop(USBH_HandleTypeDef *phost)
{
 8009874:	b580      	push	{r7, lr}
 8009876:	b084      	sub	sp, #16
 8009878:	af00      	add	r7, sp, #0
 800987a:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800987c:	2300      	movs	r3, #0
 800987e:	73fb      	strb	r3, [r7, #15]
  USBH_StatusTypeDef usb_status = USBH_OK;
 8009880:	2300      	movs	r3, #0
 8009882:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_HCD_Stop(phost->pData);
 8009884:	687b      	ldr	r3, [r7, #4]
 8009886:	f8d3 33d0 	ldr.w	r3, [r3, #976]	; 0x3d0
 800988a:	4618      	mov	r0, r3
 800988c:	f7f8 fee6 	bl	800265c <HAL_HCD_Stop>
 8009890:	4603      	mov	r3, r0
 8009892:	73fb      	strb	r3, [r7, #15]

  usb_status = USBH_Get_USB_Status(hal_status);
 8009894:	7bfb      	ldrb	r3, [r7, #15]
 8009896:	4618      	mov	r0, r3
 8009898:	f000 f808 	bl	80098ac <USBH_Get_USB_Status>
 800989c:	4603      	mov	r3, r0
 800989e:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 80098a0:	7bbb      	ldrb	r3, [r7, #14]
}
 80098a2:	4618      	mov	r0, r3
 80098a4:	3710      	adds	r7, #16
 80098a6:	46bd      	mov	sp, r7
 80098a8:	bd80      	pop	{r7, pc}
	...

080098ac <USBH_Get_USB_Status>:
  * @brief  Returns the USB status depending on the HAL status:
  * @param  hal_status: HAL status
  * @retval USB status
  */
USBH_StatusTypeDef USBH_Get_USB_Status(HAL_StatusTypeDef hal_status)
{
 80098ac:	b480      	push	{r7}
 80098ae:	b085      	sub	sp, #20
 80098b0:	af00      	add	r7, sp, #0
 80098b2:	4603      	mov	r3, r0
 80098b4:	71fb      	strb	r3, [r7, #7]
  USBH_StatusTypeDef usb_status = USBH_OK;
 80098b6:	2300      	movs	r3, #0
 80098b8:	73fb      	strb	r3, [r7, #15]

  switch (hal_status)
 80098ba:	79fb      	ldrb	r3, [r7, #7]
 80098bc:	2b03      	cmp	r3, #3
 80098be:	d817      	bhi.n	80098f0 <USBH_Get_USB_Status+0x44>
 80098c0:	a201      	add	r2, pc, #4	; (adr r2, 80098c8 <USBH_Get_USB_Status+0x1c>)
 80098c2:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80098c6:	bf00      	nop
 80098c8:	080098d9 	.word	0x080098d9
 80098cc:	080098df 	.word	0x080098df
 80098d0:	080098e5 	.word	0x080098e5
 80098d4:	080098eb 	.word	0x080098eb
  {
    case HAL_OK :
      usb_status = USBH_OK;
 80098d8:	2300      	movs	r3, #0
 80098da:	73fb      	strb	r3, [r7, #15]
    break;
 80098dc:	e00b      	b.n	80098f6 <USBH_Get_USB_Status+0x4a>
    case HAL_ERROR :
      usb_status = USBH_FAIL;
 80098de:	2302      	movs	r3, #2
 80098e0:	73fb      	strb	r3, [r7, #15]
    break;
 80098e2:	e008      	b.n	80098f6 <USBH_Get_USB_Status+0x4a>
    case HAL_BUSY :
      usb_status = USBH_BUSY;
 80098e4:	2301      	movs	r3, #1
 80098e6:	73fb      	strb	r3, [r7, #15]
    break;
 80098e8:	e005      	b.n	80098f6 <USBH_Get_USB_Status+0x4a>
    case HAL_TIMEOUT :
      usb_status = USBH_FAIL;
 80098ea:	2302      	movs	r3, #2
 80098ec:	73fb      	strb	r3, [r7, #15]
    break;
 80098ee:	e002      	b.n	80098f6 <USBH_Get_USB_Status+0x4a>
    default :
      usb_status = USBH_FAIL;
 80098f0:	2302      	movs	r3, #2
 80098f2:	73fb      	strb	r3, [r7, #15]
    break;
 80098f4:	bf00      	nop
  }
  return usb_status;
 80098f6:	7bfb      	ldrb	r3, [r7, #15]
}
 80098f8:	4618      	mov	r0, r3
 80098fa:	3714      	adds	r7, #20
 80098fc:	46bd      	mov	sp, r7
 80098fe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009902:	4770      	bx	lr

08009904 <__errno>:
 8009904:	4b01      	ldr	r3, [pc, #4]	; (800990c <__errno+0x8>)
 8009906:	6818      	ldr	r0, [r3, #0]
 8009908:	4770      	bx	lr
 800990a:	bf00      	nop
 800990c:	20000010 	.word	0x20000010

08009910 <__libc_init_array>:
 8009910:	b570      	push	{r4, r5, r6, lr}
 8009912:	4d0d      	ldr	r5, [pc, #52]	; (8009948 <__libc_init_array+0x38>)
 8009914:	4c0d      	ldr	r4, [pc, #52]	; (800994c <__libc_init_array+0x3c>)
 8009916:	1b64      	subs	r4, r4, r5
 8009918:	10a4      	asrs	r4, r4, #2
 800991a:	2600      	movs	r6, #0
 800991c:	42a6      	cmp	r6, r4
 800991e:	d109      	bne.n	8009934 <__libc_init_array+0x24>
 8009920:	4d0b      	ldr	r5, [pc, #44]	; (8009950 <__libc_init_array+0x40>)
 8009922:	4c0c      	ldr	r4, [pc, #48]	; (8009954 <__libc_init_array+0x44>)
 8009924:	f001 fa00 	bl	800ad28 <_init>
 8009928:	1b64      	subs	r4, r4, r5
 800992a:	10a4      	asrs	r4, r4, #2
 800992c:	2600      	movs	r6, #0
 800992e:	42a6      	cmp	r6, r4
 8009930:	d105      	bne.n	800993e <__libc_init_array+0x2e>
 8009932:	bd70      	pop	{r4, r5, r6, pc}
 8009934:	f855 3b04 	ldr.w	r3, [r5], #4
 8009938:	4798      	blx	r3
 800993a:	3601      	adds	r6, #1
 800993c:	e7ee      	b.n	800991c <__libc_init_array+0xc>
 800993e:	f855 3b04 	ldr.w	r3, [r5], #4
 8009942:	4798      	blx	r3
 8009944:	3601      	adds	r6, #1
 8009946:	e7f2      	b.n	800992e <__libc_init_array+0x1e>
 8009948:	0800af5c 	.word	0x0800af5c
 800994c:	0800af5c 	.word	0x0800af5c
 8009950:	0800af5c 	.word	0x0800af5c
 8009954:	0800af60 	.word	0x0800af60

08009958 <memcpy>:
 8009958:	440a      	add	r2, r1
 800995a:	4291      	cmp	r1, r2
 800995c:	f100 33ff 	add.w	r3, r0, #4294967295
 8009960:	d100      	bne.n	8009964 <memcpy+0xc>
 8009962:	4770      	bx	lr
 8009964:	b510      	push	{r4, lr}
 8009966:	f811 4b01 	ldrb.w	r4, [r1], #1
 800996a:	f803 4f01 	strb.w	r4, [r3, #1]!
 800996e:	4291      	cmp	r1, r2
 8009970:	d1f9      	bne.n	8009966 <memcpy+0xe>
 8009972:	bd10      	pop	{r4, pc}

08009974 <memset>:
 8009974:	4402      	add	r2, r0
 8009976:	4603      	mov	r3, r0
 8009978:	4293      	cmp	r3, r2
 800997a:	d100      	bne.n	800997e <memset+0xa>
 800997c:	4770      	bx	lr
 800997e:	f803 1b01 	strb.w	r1, [r3], #1
 8009982:	e7f9      	b.n	8009978 <memset+0x4>

08009984 <_free_r>:
 8009984:	b537      	push	{r0, r1, r2, r4, r5, lr}
 8009986:	2900      	cmp	r1, #0
 8009988:	d044      	beq.n	8009a14 <_free_r+0x90>
 800998a:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800998e:	9001      	str	r0, [sp, #4]
 8009990:	2b00      	cmp	r3, #0
 8009992:	f1a1 0404 	sub.w	r4, r1, #4
 8009996:	bfb8      	it	lt
 8009998:	18e4      	addlt	r4, r4, r3
 800999a:	f000 fc71 	bl	800a280 <__malloc_lock>
 800999e:	4a1e      	ldr	r2, [pc, #120]	; (8009a18 <_free_r+0x94>)
 80099a0:	9801      	ldr	r0, [sp, #4]
 80099a2:	6813      	ldr	r3, [r2, #0]
 80099a4:	b933      	cbnz	r3, 80099b4 <_free_r+0x30>
 80099a6:	6063      	str	r3, [r4, #4]
 80099a8:	6014      	str	r4, [r2, #0]
 80099aa:	b003      	add	sp, #12
 80099ac:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 80099b0:	f000 bc6c 	b.w	800a28c <__malloc_unlock>
 80099b4:	42a3      	cmp	r3, r4
 80099b6:	d908      	bls.n	80099ca <_free_r+0x46>
 80099b8:	6825      	ldr	r5, [r4, #0]
 80099ba:	1961      	adds	r1, r4, r5
 80099bc:	428b      	cmp	r3, r1
 80099be:	bf01      	itttt	eq
 80099c0:	6819      	ldreq	r1, [r3, #0]
 80099c2:	685b      	ldreq	r3, [r3, #4]
 80099c4:	1949      	addeq	r1, r1, r5
 80099c6:	6021      	streq	r1, [r4, #0]
 80099c8:	e7ed      	b.n	80099a6 <_free_r+0x22>
 80099ca:	461a      	mov	r2, r3
 80099cc:	685b      	ldr	r3, [r3, #4]
 80099ce:	b10b      	cbz	r3, 80099d4 <_free_r+0x50>
 80099d0:	42a3      	cmp	r3, r4
 80099d2:	d9fa      	bls.n	80099ca <_free_r+0x46>
 80099d4:	6811      	ldr	r1, [r2, #0]
 80099d6:	1855      	adds	r5, r2, r1
 80099d8:	42a5      	cmp	r5, r4
 80099da:	d10b      	bne.n	80099f4 <_free_r+0x70>
 80099dc:	6824      	ldr	r4, [r4, #0]
 80099de:	4421      	add	r1, r4
 80099e0:	1854      	adds	r4, r2, r1
 80099e2:	42a3      	cmp	r3, r4
 80099e4:	6011      	str	r1, [r2, #0]
 80099e6:	d1e0      	bne.n	80099aa <_free_r+0x26>
 80099e8:	681c      	ldr	r4, [r3, #0]
 80099ea:	685b      	ldr	r3, [r3, #4]
 80099ec:	6053      	str	r3, [r2, #4]
 80099ee:	4421      	add	r1, r4
 80099f0:	6011      	str	r1, [r2, #0]
 80099f2:	e7da      	b.n	80099aa <_free_r+0x26>
 80099f4:	d902      	bls.n	80099fc <_free_r+0x78>
 80099f6:	230c      	movs	r3, #12
 80099f8:	6003      	str	r3, [r0, #0]
 80099fa:	e7d6      	b.n	80099aa <_free_r+0x26>
 80099fc:	6825      	ldr	r5, [r4, #0]
 80099fe:	1961      	adds	r1, r4, r5
 8009a00:	428b      	cmp	r3, r1
 8009a02:	bf04      	itt	eq
 8009a04:	6819      	ldreq	r1, [r3, #0]
 8009a06:	685b      	ldreq	r3, [r3, #4]
 8009a08:	6063      	str	r3, [r4, #4]
 8009a0a:	bf04      	itt	eq
 8009a0c:	1949      	addeq	r1, r1, r5
 8009a0e:	6021      	streq	r1, [r4, #0]
 8009a10:	6054      	str	r4, [r2, #4]
 8009a12:	e7ca      	b.n	80099aa <_free_r+0x26>
 8009a14:	b003      	add	sp, #12
 8009a16:	bd30      	pop	{r4, r5, pc}
 8009a18:	200093dc 	.word	0x200093dc

08009a1c <sbrk_aligned>:
 8009a1c:	b570      	push	{r4, r5, r6, lr}
 8009a1e:	4e0e      	ldr	r6, [pc, #56]	; (8009a58 <sbrk_aligned+0x3c>)
 8009a20:	460c      	mov	r4, r1
 8009a22:	6831      	ldr	r1, [r6, #0]
 8009a24:	4605      	mov	r5, r0
 8009a26:	b911      	cbnz	r1, 8009a2e <sbrk_aligned+0x12>
 8009a28:	f000 f91a 	bl	8009c60 <_sbrk_r>
 8009a2c:	6030      	str	r0, [r6, #0]
 8009a2e:	4621      	mov	r1, r4
 8009a30:	4628      	mov	r0, r5
 8009a32:	f000 f915 	bl	8009c60 <_sbrk_r>
 8009a36:	1c43      	adds	r3, r0, #1
 8009a38:	d00a      	beq.n	8009a50 <sbrk_aligned+0x34>
 8009a3a:	1cc4      	adds	r4, r0, #3
 8009a3c:	f024 0403 	bic.w	r4, r4, #3
 8009a40:	42a0      	cmp	r0, r4
 8009a42:	d007      	beq.n	8009a54 <sbrk_aligned+0x38>
 8009a44:	1a21      	subs	r1, r4, r0
 8009a46:	4628      	mov	r0, r5
 8009a48:	f000 f90a 	bl	8009c60 <_sbrk_r>
 8009a4c:	3001      	adds	r0, #1
 8009a4e:	d101      	bne.n	8009a54 <sbrk_aligned+0x38>
 8009a50:	f04f 34ff 	mov.w	r4, #4294967295
 8009a54:	4620      	mov	r0, r4
 8009a56:	bd70      	pop	{r4, r5, r6, pc}
 8009a58:	200093e0 	.word	0x200093e0

08009a5c <_malloc_r>:
 8009a5c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8009a60:	1ccd      	adds	r5, r1, #3
 8009a62:	f025 0503 	bic.w	r5, r5, #3
 8009a66:	3508      	adds	r5, #8
 8009a68:	2d0c      	cmp	r5, #12
 8009a6a:	bf38      	it	cc
 8009a6c:	250c      	movcc	r5, #12
 8009a6e:	2d00      	cmp	r5, #0
 8009a70:	4607      	mov	r7, r0
 8009a72:	db01      	blt.n	8009a78 <_malloc_r+0x1c>
 8009a74:	42a9      	cmp	r1, r5
 8009a76:	d905      	bls.n	8009a84 <_malloc_r+0x28>
 8009a78:	230c      	movs	r3, #12
 8009a7a:	603b      	str	r3, [r7, #0]
 8009a7c:	2600      	movs	r6, #0
 8009a7e:	4630      	mov	r0, r6
 8009a80:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8009a84:	4e2e      	ldr	r6, [pc, #184]	; (8009b40 <_malloc_r+0xe4>)
 8009a86:	f000 fbfb 	bl	800a280 <__malloc_lock>
 8009a8a:	6833      	ldr	r3, [r6, #0]
 8009a8c:	461c      	mov	r4, r3
 8009a8e:	bb34      	cbnz	r4, 8009ade <_malloc_r+0x82>
 8009a90:	4629      	mov	r1, r5
 8009a92:	4638      	mov	r0, r7
 8009a94:	f7ff ffc2 	bl	8009a1c <sbrk_aligned>
 8009a98:	1c43      	adds	r3, r0, #1
 8009a9a:	4604      	mov	r4, r0
 8009a9c:	d14d      	bne.n	8009b3a <_malloc_r+0xde>
 8009a9e:	6834      	ldr	r4, [r6, #0]
 8009aa0:	4626      	mov	r6, r4
 8009aa2:	2e00      	cmp	r6, #0
 8009aa4:	d140      	bne.n	8009b28 <_malloc_r+0xcc>
 8009aa6:	6823      	ldr	r3, [r4, #0]
 8009aa8:	4631      	mov	r1, r6
 8009aaa:	4638      	mov	r0, r7
 8009aac:	eb04 0803 	add.w	r8, r4, r3
 8009ab0:	f000 f8d6 	bl	8009c60 <_sbrk_r>
 8009ab4:	4580      	cmp	r8, r0
 8009ab6:	d13a      	bne.n	8009b2e <_malloc_r+0xd2>
 8009ab8:	6821      	ldr	r1, [r4, #0]
 8009aba:	3503      	adds	r5, #3
 8009abc:	1a6d      	subs	r5, r5, r1
 8009abe:	f025 0503 	bic.w	r5, r5, #3
 8009ac2:	3508      	adds	r5, #8
 8009ac4:	2d0c      	cmp	r5, #12
 8009ac6:	bf38      	it	cc
 8009ac8:	250c      	movcc	r5, #12
 8009aca:	4629      	mov	r1, r5
 8009acc:	4638      	mov	r0, r7
 8009ace:	f7ff ffa5 	bl	8009a1c <sbrk_aligned>
 8009ad2:	3001      	adds	r0, #1
 8009ad4:	d02b      	beq.n	8009b2e <_malloc_r+0xd2>
 8009ad6:	6823      	ldr	r3, [r4, #0]
 8009ad8:	442b      	add	r3, r5
 8009ada:	6023      	str	r3, [r4, #0]
 8009adc:	e00e      	b.n	8009afc <_malloc_r+0xa0>
 8009ade:	6822      	ldr	r2, [r4, #0]
 8009ae0:	1b52      	subs	r2, r2, r5
 8009ae2:	d41e      	bmi.n	8009b22 <_malloc_r+0xc6>
 8009ae4:	2a0b      	cmp	r2, #11
 8009ae6:	d916      	bls.n	8009b16 <_malloc_r+0xba>
 8009ae8:	1961      	adds	r1, r4, r5
 8009aea:	42a3      	cmp	r3, r4
 8009aec:	6025      	str	r5, [r4, #0]
 8009aee:	bf18      	it	ne
 8009af0:	6059      	strne	r1, [r3, #4]
 8009af2:	6863      	ldr	r3, [r4, #4]
 8009af4:	bf08      	it	eq
 8009af6:	6031      	streq	r1, [r6, #0]
 8009af8:	5162      	str	r2, [r4, r5]
 8009afa:	604b      	str	r3, [r1, #4]
 8009afc:	4638      	mov	r0, r7
 8009afe:	f104 060b 	add.w	r6, r4, #11
 8009b02:	f000 fbc3 	bl	800a28c <__malloc_unlock>
 8009b06:	f026 0607 	bic.w	r6, r6, #7
 8009b0a:	1d23      	adds	r3, r4, #4
 8009b0c:	1af2      	subs	r2, r6, r3
 8009b0e:	d0b6      	beq.n	8009a7e <_malloc_r+0x22>
 8009b10:	1b9b      	subs	r3, r3, r6
 8009b12:	50a3      	str	r3, [r4, r2]
 8009b14:	e7b3      	b.n	8009a7e <_malloc_r+0x22>
 8009b16:	6862      	ldr	r2, [r4, #4]
 8009b18:	42a3      	cmp	r3, r4
 8009b1a:	bf0c      	ite	eq
 8009b1c:	6032      	streq	r2, [r6, #0]
 8009b1e:	605a      	strne	r2, [r3, #4]
 8009b20:	e7ec      	b.n	8009afc <_malloc_r+0xa0>
 8009b22:	4623      	mov	r3, r4
 8009b24:	6864      	ldr	r4, [r4, #4]
 8009b26:	e7b2      	b.n	8009a8e <_malloc_r+0x32>
 8009b28:	4634      	mov	r4, r6
 8009b2a:	6876      	ldr	r6, [r6, #4]
 8009b2c:	e7b9      	b.n	8009aa2 <_malloc_r+0x46>
 8009b2e:	230c      	movs	r3, #12
 8009b30:	603b      	str	r3, [r7, #0]
 8009b32:	4638      	mov	r0, r7
 8009b34:	f000 fbaa 	bl	800a28c <__malloc_unlock>
 8009b38:	e7a1      	b.n	8009a7e <_malloc_r+0x22>
 8009b3a:	6025      	str	r5, [r4, #0]
 8009b3c:	e7de      	b.n	8009afc <_malloc_r+0xa0>
 8009b3e:	bf00      	nop
 8009b40:	200093dc 	.word	0x200093dc

08009b44 <iprintf>:
 8009b44:	b40f      	push	{r0, r1, r2, r3}
 8009b46:	4b0a      	ldr	r3, [pc, #40]	; (8009b70 <iprintf+0x2c>)
 8009b48:	b513      	push	{r0, r1, r4, lr}
 8009b4a:	681c      	ldr	r4, [r3, #0]
 8009b4c:	b124      	cbz	r4, 8009b58 <iprintf+0x14>
 8009b4e:	69a3      	ldr	r3, [r4, #24]
 8009b50:	b913      	cbnz	r3, 8009b58 <iprintf+0x14>
 8009b52:	4620      	mov	r0, r4
 8009b54:	f000 fa8e 	bl	800a074 <__sinit>
 8009b58:	ab05      	add	r3, sp, #20
 8009b5a:	9a04      	ldr	r2, [sp, #16]
 8009b5c:	68a1      	ldr	r1, [r4, #8]
 8009b5e:	9301      	str	r3, [sp, #4]
 8009b60:	4620      	mov	r0, r4
 8009b62:	f000 fd1f 	bl	800a5a4 <_vfiprintf_r>
 8009b66:	b002      	add	sp, #8
 8009b68:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8009b6c:	b004      	add	sp, #16
 8009b6e:	4770      	bx	lr
 8009b70:	20000010 	.word	0x20000010

08009b74 <_puts_r>:
 8009b74:	b570      	push	{r4, r5, r6, lr}
 8009b76:	460e      	mov	r6, r1
 8009b78:	4605      	mov	r5, r0
 8009b7a:	b118      	cbz	r0, 8009b84 <_puts_r+0x10>
 8009b7c:	6983      	ldr	r3, [r0, #24]
 8009b7e:	b90b      	cbnz	r3, 8009b84 <_puts_r+0x10>
 8009b80:	f000 fa78 	bl	800a074 <__sinit>
 8009b84:	69ab      	ldr	r3, [r5, #24]
 8009b86:	68ac      	ldr	r4, [r5, #8]
 8009b88:	b913      	cbnz	r3, 8009b90 <_puts_r+0x1c>
 8009b8a:	4628      	mov	r0, r5
 8009b8c:	f000 fa72 	bl	800a074 <__sinit>
 8009b90:	4b2c      	ldr	r3, [pc, #176]	; (8009c44 <_puts_r+0xd0>)
 8009b92:	429c      	cmp	r4, r3
 8009b94:	d120      	bne.n	8009bd8 <_puts_r+0x64>
 8009b96:	686c      	ldr	r4, [r5, #4]
 8009b98:	6e63      	ldr	r3, [r4, #100]	; 0x64
 8009b9a:	07db      	lsls	r3, r3, #31
 8009b9c:	d405      	bmi.n	8009baa <_puts_r+0x36>
 8009b9e:	89a3      	ldrh	r3, [r4, #12]
 8009ba0:	0598      	lsls	r0, r3, #22
 8009ba2:	d402      	bmi.n	8009baa <_puts_r+0x36>
 8009ba4:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8009ba6:	f000 fb03 	bl	800a1b0 <__retarget_lock_acquire_recursive>
 8009baa:	89a3      	ldrh	r3, [r4, #12]
 8009bac:	0719      	lsls	r1, r3, #28
 8009bae:	d51d      	bpl.n	8009bec <_puts_r+0x78>
 8009bb0:	6923      	ldr	r3, [r4, #16]
 8009bb2:	b1db      	cbz	r3, 8009bec <_puts_r+0x78>
 8009bb4:	3e01      	subs	r6, #1
 8009bb6:	68a3      	ldr	r3, [r4, #8]
 8009bb8:	f816 1f01 	ldrb.w	r1, [r6, #1]!
 8009bbc:	3b01      	subs	r3, #1
 8009bbe:	60a3      	str	r3, [r4, #8]
 8009bc0:	bb39      	cbnz	r1, 8009c12 <_puts_r+0x9e>
 8009bc2:	2b00      	cmp	r3, #0
 8009bc4:	da38      	bge.n	8009c38 <_puts_r+0xc4>
 8009bc6:	4622      	mov	r2, r4
 8009bc8:	210a      	movs	r1, #10
 8009bca:	4628      	mov	r0, r5
 8009bcc:	f000 f878 	bl	8009cc0 <__swbuf_r>
 8009bd0:	3001      	adds	r0, #1
 8009bd2:	d011      	beq.n	8009bf8 <_puts_r+0x84>
 8009bd4:	250a      	movs	r5, #10
 8009bd6:	e011      	b.n	8009bfc <_puts_r+0x88>
 8009bd8:	4b1b      	ldr	r3, [pc, #108]	; (8009c48 <_puts_r+0xd4>)
 8009bda:	429c      	cmp	r4, r3
 8009bdc:	d101      	bne.n	8009be2 <_puts_r+0x6e>
 8009bde:	68ac      	ldr	r4, [r5, #8]
 8009be0:	e7da      	b.n	8009b98 <_puts_r+0x24>
 8009be2:	4b1a      	ldr	r3, [pc, #104]	; (8009c4c <_puts_r+0xd8>)
 8009be4:	429c      	cmp	r4, r3
 8009be6:	bf08      	it	eq
 8009be8:	68ec      	ldreq	r4, [r5, #12]
 8009bea:	e7d5      	b.n	8009b98 <_puts_r+0x24>
 8009bec:	4621      	mov	r1, r4
 8009bee:	4628      	mov	r0, r5
 8009bf0:	f000 f8b8 	bl	8009d64 <__swsetup_r>
 8009bf4:	2800      	cmp	r0, #0
 8009bf6:	d0dd      	beq.n	8009bb4 <_puts_r+0x40>
 8009bf8:	f04f 35ff 	mov.w	r5, #4294967295
 8009bfc:	6e63      	ldr	r3, [r4, #100]	; 0x64
 8009bfe:	07da      	lsls	r2, r3, #31
 8009c00:	d405      	bmi.n	8009c0e <_puts_r+0x9a>
 8009c02:	89a3      	ldrh	r3, [r4, #12]
 8009c04:	059b      	lsls	r3, r3, #22
 8009c06:	d402      	bmi.n	8009c0e <_puts_r+0x9a>
 8009c08:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8009c0a:	f000 fad2 	bl	800a1b2 <__retarget_lock_release_recursive>
 8009c0e:	4628      	mov	r0, r5
 8009c10:	bd70      	pop	{r4, r5, r6, pc}
 8009c12:	2b00      	cmp	r3, #0
 8009c14:	da04      	bge.n	8009c20 <_puts_r+0xac>
 8009c16:	69a2      	ldr	r2, [r4, #24]
 8009c18:	429a      	cmp	r2, r3
 8009c1a:	dc06      	bgt.n	8009c2a <_puts_r+0xb6>
 8009c1c:	290a      	cmp	r1, #10
 8009c1e:	d004      	beq.n	8009c2a <_puts_r+0xb6>
 8009c20:	6823      	ldr	r3, [r4, #0]
 8009c22:	1c5a      	adds	r2, r3, #1
 8009c24:	6022      	str	r2, [r4, #0]
 8009c26:	7019      	strb	r1, [r3, #0]
 8009c28:	e7c5      	b.n	8009bb6 <_puts_r+0x42>
 8009c2a:	4622      	mov	r2, r4
 8009c2c:	4628      	mov	r0, r5
 8009c2e:	f000 f847 	bl	8009cc0 <__swbuf_r>
 8009c32:	3001      	adds	r0, #1
 8009c34:	d1bf      	bne.n	8009bb6 <_puts_r+0x42>
 8009c36:	e7df      	b.n	8009bf8 <_puts_r+0x84>
 8009c38:	6823      	ldr	r3, [r4, #0]
 8009c3a:	250a      	movs	r5, #10
 8009c3c:	1c5a      	adds	r2, r3, #1
 8009c3e:	6022      	str	r2, [r4, #0]
 8009c40:	701d      	strb	r5, [r3, #0]
 8009c42:	e7db      	b.n	8009bfc <_puts_r+0x88>
 8009c44:	0800aee0 	.word	0x0800aee0
 8009c48:	0800af00 	.word	0x0800af00
 8009c4c:	0800aec0 	.word	0x0800aec0

08009c50 <puts>:
 8009c50:	4b02      	ldr	r3, [pc, #8]	; (8009c5c <puts+0xc>)
 8009c52:	4601      	mov	r1, r0
 8009c54:	6818      	ldr	r0, [r3, #0]
 8009c56:	f7ff bf8d 	b.w	8009b74 <_puts_r>
 8009c5a:	bf00      	nop
 8009c5c:	20000010 	.word	0x20000010

08009c60 <_sbrk_r>:
 8009c60:	b538      	push	{r3, r4, r5, lr}
 8009c62:	4d06      	ldr	r5, [pc, #24]	; (8009c7c <_sbrk_r+0x1c>)
 8009c64:	2300      	movs	r3, #0
 8009c66:	4604      	mov	r4, r0
 8009c68:	4608      	mov	r0, r1
 8009c6a:	602b      	str	r3, [r5, #0]
 8009c6c:	f7f7 fce4 	bl	8001638 <_sbrk>
 8009c70:	1c43      	adds	r3, r0, #1
 8009c72:	d102      	bne.n	8009c7a <_sbrk_r+0x1a>
 8009c74:	682b      	ldr	r3, [r5, #0]
 8009c76:	b103      	cbz	r3, 8009c7a <_sbrk_r+0x1a>
 8009c78:	6023      	str	r3, [r4, #0]
 8009c7a:	bd38      	pop	{r3, r4, r5, pc}
 8009c7c:	200093e8 	.word	0x200093e8

08009c80 <siprintf>:
 8009c80:	b40e      	push	{r1, r2, r3}
 8009c82:	b500      	push	{lr}
 8009c84:	b09c      	sub	sp, #112	; 0x70
 8009c86:	ab1d      	add	r3, sp, #116	; 0x74
 8009c88:	9002      	str	r0, [sp, #8]
 8009c8a:	9006      	str	r0, [sp, #24]
 8009c8c:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
 8009c90:	4809      	ldr	r0, [pc, #36]	; (8009cb8 <siprintf+0x38>)
 8009c92:	9107      	str	r1, [sp, #28]
 8009c94:	9104      	str	r1, [sp, #16]
 8009c96:	4909      	ldr	r1, [pc, #36]	; (8009cbc <siprintf+0x3c>)
 8009c98:	f853 2b04 	ldr.w	r2, [r3], #4
 8009c9c:	9105      	str	r1, [sp, #20]
 8009c9e:	6800      	ldr	r0, [r0, #0]
 8009ca0:	9301      	str	r3, [sp, #4]
 8009ca2:	a902      	add	r1, sp, #8
 8009ca4:	f000 fb54 	bl	800a350 <_svfiprintf_r>
 8009ca8:	9b02      	ldr	r3, [sp, #8]
 8009caa:	2200      	movs	r2, #0
 8009cac:	701a      	strb	r2, [r3, #0]
 8009cae:	b01c      	add	sp, #112	; 0x70
 8009cb0:	f85d eb04 	ldr.w	lr, [sp], #4
 8009cb4:	b003      	add	sp, #12
 8009cb6:	4770      	bx	lr
 8009cb8:	20000010 	.word	0x20000010
 8009cbc:	ffff0208 	.word	0xffff0208

08009cc0 <__swbuf_r>:
 8009cc0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8009cc2:	460e      	mov	r6, r1
 8009cc4:	4614      	mov	r4, r2
 8009cc6:	4605      	mov	r5, r0
 8009cc8:	b118      	cbz	r0, 8009cd2 <__swbuf_r+0x12>
 8009cca:	6983      	ldr	r3, [r0, #24]
 8009ccc:	b90b      	cbnz	r3, 8009cd2 <__swbuf_r+0x12>
 8009cce:	f000 f9d1 	bl	800a074 <__sinit>
 8009cd2:	4b21      	ldr	r3, [pc, #132]	; (8009d58 <__swbuf_r+0x98>)
 8009cd4:	429c      	cmp	r4, r3
 8009cd6:	d12b      	bne.n	8009d30 <__swbuf_r+0x70>
 8009cd8:	686c      	ldr	r4, [r5, #4]
 8009cda:	69a3      	ldr	r3, [r4, #24]
 8009cdc:	60a3      	str	r3, [r4, #8]
 8009cde:	89a3      	ldrh	r3, [r4, #12]
 8009ce0:	071a      	lsls	r2, r3, #28
 8009ce2:	d52f      	bpl.n	8009d44 <__swbuf_r+0x84>
 8009ce4:	6923      	ldr	r3, [r4, #16]
 8009ce6:	b36b      	cbz	r3, 8009d44 <__swbuf_r+0x84>
 8009ce8:	6923      	ldr	r3, [r4, #16]
 8009cea:	6820      	ldr	r0, [r4, #0]
 8009cec:	1ac0      	subs	r0, r0, r3
 8009cee:	6963      	ldr	r3, [r4, #20]
 8009cf0:	b2f6      	uxtb	r6, r6
 8009cf2:	4283      	cmp	r3, r0
 8009cf4:	4637      	mov	r7, r6
 8009cf6:	dc04      	bgt.n	8009d02 <__swbuf_r+0x42>
 8009cf8:	4621      	mov	r1, r4
 8009cfa:	4628      	mov	r0, r5
 8009cfc:	f000 f926 	bl	8009f4c <_fflush_r>
 8009d00:	bb30      	cbnz	r0, 8009d50 <__swbuf_r+0x90>
 8009d02:	68a3      	ldr	r3, [r4, #8]
 8009d04:	3b01      	subs	r3, #1
 8009d06:	60a3      	str	r3, [r4, #8]
 8009d08:	6823      	ldr	r3, [r4, #0]
 8009d0a:	1c5a      	adds	r2, r3, #1
 8009d0c:	6022      	str	r2, [r4, #0]
 8009d0e:	701e      	strb	r6, [r3, #0]
 8009d10:	6963      	ldr	r3, [r4, #20]
 8009d12:	3001      	adds	r0, #1
 8009d14:	4283      	cmp	r3, r0
 8009d16:	d004      	beq.n	8009d22 <__swbuf_r+0x62>
 8009d18:	89a3      	ldrh	r3, [r4, #12]
 8009d1a:	07db      	lsls	r3, r3, #31
 8009d1c:	d506      	bpl.n	8009d2c <__swbuf_r+0x6c>
 8009d1e:	2e0a      	cmp	r6, #10
 8009d20:	d104      	bne.n	8009d2c <__swbuf_r+0x6c>
 8009d22:	4621      	mov	r1, r4
 8009d24:	4628      	mov	r0, r5
 8009d26:	f000 f911 	bl	8009f4c <_fflush_r>
 8009d2a:	b988      	cbnz	r0, 8009d50 <__swbuf_r+0x90>
 8009d2c:	4638      	mov	r0, r7
 8009d2e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8009d30:	4b0a      	ldr	r3, [pc, #40]	; (8009d5c <__swbuf_r+0x9c>)
 8009d32:	429c      	cmp	r4, r3
 8009d34:	d101      	bne.n	8009d3a <__swbuf_r+0x7a>
 8009d36:	68ac      	ldr	r4, [r5, #8]
 8009d38:	e7cf      	b.n	8009cda <__swbuf_r+0x1a>
 8009d3a:	4b09      	ldr	r3, [pc, #36]	; (8009d60 <__swbuf_r+0xa0>)
 8009d3c:	429c      	cmp	r4, r3
 8009d3e:	bf08      	it	eq
 8009d40:	68ec      	ldreq	r4, [r5, #12]
 8009d42:	e7ca      	b.n	8009cda <__swbuf_r+0x1a>
 8009d44:	4621      	mov	r1, r4
 8009d46:	4628      	mov	r0, r5
 8009d48:	f000 f80c 	bl	8009d64 <__swsetup_r>
 8009d4c:	2800      	cmp	r0, #0
 8009d4e:	d0cb      	beq.n	8009ce8 <__swbuf_r+0x28>
 8009d50:	f04f 37ff 	mov.w	r7, #4294967295
 8009d54:	e7ea      	b.n	8009d2c <__swbuf_r+0x6c>
 8009d56:	bf00      	nop
 8009d58:	0800aee0 	.word	0x0800aee0
 8009d5c:	0800af00 	.word	0x0800af00
 8009d60:	0800aec0 	.word	0x0800aec0

08009d64 <__swsetup_r>:
 8009d64:	4b32      	ldr	r3, [pc, #200]	; (8009e30 <__swsetup_r+0xcc>)
 8009d66:	b570      	push	{r4, r5, r6, lr}
 8009d68:	681d      	ldr	r5, [r3, #0]
 8009d6a:	4606      	mov	r6, r0
 8009d6c:	460c      	mov	r4, r1
 8009d6e:	b125      	cbz	r5, 8009d7a <__swsetup_r+0x16>
 8009d70:	69ab      	ldr	r3, [r5, #24]
 8009d72:	b913      	cbnz	r3, 8009d7a <__swsetup_r+0x16>
 8009d74:	4628      	mov	r0, r5
 8009d76:	f000 f97d 	bl	800a074 <__sinit>
 8009d7a:	4b2e      	ldr	r3, [pc, #184]	; (8009e34 <__swsetup_r+0xd0>)
 8009d7c:	429c      	cmp	r4, r3
 8009d7e:	d10f      	bne.n	8009da0 <__swsetup_r+0x3c>
 8009d80:	686c      	ldr	r4, [r5, #4]
 8009d82:	89a3      	ldrh	r3, [r4, #12]
 8009d84:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 8009d88:	0719      	lsls	r1, r3, #28
 8009d8a:	d42c      	bmi.n	8009de6 <__swsetup_r+0x82>
 8009d8c:	06dd      	lsls	r5, r3, #27
 8009d8e:	d411      	bmi.n	8009db4 <__swsetup_r+0x50>
 8009d90:	2309      	movs	r3, #9
 8009d92:	6033      	str	r3, [r6, #0]
 8009d94:	f042 0340 	orr.w	r3, r2, #64	; 0x40
 8009d98:	81a3      	strh	r3, [r4, #12]
 8009d9a:	f04f 30ff 	mov.w	r0, #4294967295
 8009d9e:	e03e      	b.n	8009e1e <__swsetup_r+0xba>
 8009da0:	4b25      	ldr	r3, [pc, #148]	; (8009e38 <__swsetup_r+0xd4>)
 8009da2:	429c      	cmp	r4, r3
 8009da4:	d101      	bne.n	8009daa <__swsetup_r+0x46>
 8009da6:	68ac      	ldr	r4, [r5, #8]
 8009da8:	e7eb      	b.n	8009d82 <__swsetup_r+0x1e>
 8009daa:	4b24      	ldr	r3, [pc, #144]	; (8009e3c <__swsetup_r+0xd8>)
 8009dac:	429c      	cmp	r4, r3
 8009dae:	bf08      	it	eq
 8009db0:	68ec      	ldreq	r4, [r5, #12]
 8009db2:	e7e6      	b.n	8009d82 <__swsetup_r+0x1e>
 8009db4:	0758      	lsls	r0, r3, #29
 8009db6:	d512      	bpl.n	8009dde <__swsetup_r+0x7a>
 8009db8:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8009dba:	b141      	cbz	r1, 8009dce <__swsetup_r+0x6a>
 8009dbc:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8009dc0:	4299      	cmp	r1, r3
 8009dc2:	d002      	beq.n	8009dca <__swsetup_r+0x66>
 8009dc4:	4630      	mov	r0, r6
 8009dc6:	f7ff fddd 	bl	8009984 <_free_r>
 8009dca:	2300      	movs	r3, #0
 8009dcc:	6363      	str	r3, [r4, #52]	; 0x34
 8009dce:	89a3      	ldrh	r3, [r4, #12]
 8009dd0:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 8009dd4:	81a3      	strh	r3, [r4, #12]
 8009dd6:	2300      	movs	r3, #0
 8009dd8:	6063      	str	r3, [r4, #4]
 8009dda:	6923      	ldr	r3, [r4, #16]
 8009ddc:	6023      	str	r3, [r4, #0]
 8009dde:	89a3      	ldrh	r3, [r4, #12]
 8009de0:	f043 0308 	orr.w	r3, r3, #8
 8009de4:	81a3      	strh	r3, [r4, #12]
 8009de6:	6923      	ldr	r3, [r4, #16]
 8009de8:	b94b      	cbnz	r3, 8009dfe <__swsetup_r+0x9a>
 8009dea:	89a3      	ldrh	r3, [r4, #12]
 8009dec:	f403 7320 	and.w	r3, r3, #640	; 0x280
 8009df0:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8009df4:	d003      	beq.n	8009dfe <__swsetup_r+0x9a>
 8009df6:	4621      	mov	r1, r4
 8009df8:	4630      	mov	r0, r6
 8009dfa:	f000 fa01 	bl	800a200 <__smakebuf_r>
 8009dfe:	89a0      	ldrh	r0, [r4, #12]
 8009e00:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 8009e04:	f010 0301 	ands.w	r3, r0, #1
 8009e08:	d00a      	beq.n	8009e20 <__swsetup_r+0xbc>
 8009e0a:	2300      	movs	r3, #0
 8009e0c:	60a3      	str	r3, [r4, #8]
 8009e0e:	6963      	ldr	r3, [r4, #20]
 8009e10:	425b      	negs	r3, r3
 8009e12:	61a3      	str	r3, [r4, #24]
 8009e14:	6923      	ldr	r3, [r4, #16]
 8009e16:	b943      	cbnz	r3, 8009e2a <__swsetup_r+0xc6>
 8009e18:	f010 0080 	ands.w	r0, r0, #128	; 0x80
 8009e1c:	d1ba      	bne.n	8009d94 <__swsetup_r+0x30>
 8009e1e:	bd70      	pop	{r4, r5, r6, pc}
 8009e20:	0781      	lsls	r1, r0, #30
 8009e22:	bf58      	it	pl
 8009e24:	6963      	ldrpl	r3, [r4, #20]
 8009e26:	60a3      	str	r3, [r4, #8]
 8009e28:	e7f4      	b.n	8009e14 <__swsetup_r+0xb0>
 8009e2a:	2000      	movs	r0, #0
 8009e2c:	e7f7      	b.n	8009e1e <__swsetup_r+0xba>
 8009e2e:	bf00      	nop
 8009e30:	20000010 	.word	0x20000010
 8009e34:	0800aee0 	.word	0x0800aee0
 8009e38:	0800af00 	.word	0x0800af00
 8009e3c:	0800aec0 	.word	0x0800aec0

08009e40 <__sflush_r>:
 8009e40:	898a      	ldrh	r2, [r1, #12]
 8009e42:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8009e46:	4605      	mov	r5, r0
 8009e48:	0710      	lsls	r0, r2, #28
 8009e4a:	460c      	mov	r4, r1
 8009e4c:	d458      	bmi.n	8009f00 <__sflush_r+0xc0>
 8009e4e:	684b      	ldr	r3, [r1, #4]
 8009e50:	2b00      	cmp	r3, #0
 8009e52:	dc05      	bgt.n	8009e60 <__sflush_r+0x20>
 8009e54:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 8009e56:	2b00      	cmp	r3, #0
 8009e58:	dc02      	bgt.n	8009e60 <__sflush_r+0x20>
 8009e5a:	2000      	movs	r0, #0
 8009e5c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8009e60:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 8009e62:	2e00      	cmp	r6, #0
 8009e64:	d0f9      	beq.n	8009e5a <__sflush_r+0x1a>
 8009e66:	2300      	movs	r3, #0
 8009e68:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 8009e6c:	682f      	ldr	r7, [r5, #0]
 8009e6e:	602b      	str	r3, [r5, #0]
 8009e70:	d032      	beq.n	8009ed8 <__sflush_r+0x98>
 8009e72:	6d60      	ldr	r0, [r4, #84]	; 0x54
 8009e74:	89a3      	ldrh	r3, [r4, #12]
 8009e76:	075a      	lsls	r2, r3, #29
 8009e78:	d505      	bpl.n	8009e86 <__sflush_r+0x46>
 8009e7a:	6863      	ldr	r3, [r4, #4]
 8009e7c:	1ac0      	subs	r0, r0, r3
 8009e7e:	6b63      	ldr	r3, [r4, #52]	; 0x34
 8009e80:	b10b      	cbz	r3, 8009e86 <__sflush_r+0x46>
 8009e82:	6c23      	ldr	r3, [r4, #64]	; 0x40
 8009e84:	1ac0      	subs	r0, r0, r3
 8009e86:	2300      	movs	r3, #0
 8009e88:	4602      	mov	r2, r0
 8009e8a:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 8009e8c:	6a21      	ldr	r1, [r4, #32]
 8009e8e:	4628      	mov	r0, r5
 8009e90:	47b0      	blx	r6
 8009e92:	1c43      	adds	r3, r0, #1
 8009e94:	89a3      	ldrh	r3, [r4, #12]
 8009e96:	d106      	bne.n	8009ea6 <__sflush_r+0x66>
 8009e98:	6829      	ldr	r1, [r5, #0]
 8009e9a:	291d      	cmp	r1, #29
 8009e9c:	d82c      	bhi.n	8009ef8 <__sflush_r+0xb8>
 8009e9e:	4a2a      	ldr	r2, [pc, #168]	; (8009f48 <__sflush_r+0x108>)
 8009ea0:	40ca      	lsrs	r2, r1
 8009ea2:	07d6      	lsls	r6, r2, #31
 8009ea4:	d528      	bpl.n	8009ef8 <__sflush_r+0xb8>
 8009ea6:	2200      	movs	r2, #0
 8009ea8:	6062      	str	r2, [r4, #4]
 8009eaa:	04d9      	lsls	r1, r3, #19
 8009eac:	6922      	ldr	r2, [r4, #16]
 8009eae:	6022      	str	r2, [r4, #0]
 8009eb0:	d504      	bpl.n	8009ebc <__sflush_r+0x7c>
 8009eb2:	1c42      	adds	r2, r0, #1
 8009eb4:	d101      	bne.n	8009eba <__sflush_r+0x7a>
 8009eb6:	682b      	ldr	r3, [r5, #0]
 8009eb8:	b903      	cbnz	r3, 8009ebc <__sflush_r+0x7c>
 8009eba:	6560      	str	r0, [r4, #84]	; 0x54
 8009ebc:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8009ebe:	602f      	str	r7, [r5, #0]
 8009ec0:	2900      	cmp	r1, #0
 8009ec2:	d0ca      	beq.n	8009e5a <__sflush_r+0x1a>
 8009ec4:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8009ec8:	4299      	cmp	r1, r3
 8009eca:	d002      	beq.n	8009ed2 <__sflush_r+0x92>
 8009ecc:	4628      	mov	r0, r5
 8009ece:	f7ff fd59 	bl	8009984 <_free_r>
 8009ed2:	2000      	movs	r0, #0
 8009ed4:	6360      	str	r0, [r4, #52]	; 0x34
 8009ed6:	e7c1      	b.n	8009e5c <__sflush_r+0x1c>
 8009ed8:	6a21      	ldr	r1, [r4, #32]
 8009eda:	2301      	movs	r3, #1
 8009edc:	4628      	mov	r0, r5
 8009ede:	47b0      	blx	r6
 8009ee0:	1c41      	adds	r1, r0, #1
 8009ee2:	d1c7      	bne.n	8009e74 <__sflush_r+0x34>
 8009ee4:	682b      	ldr	r3, [r5, #0]
 8009ee6:	2b00      	cmp	r3, #0
 8009ee8:	d0c4      	beq.n	8009e74 <__sflush_r+0x34>
 8009eea:	2b1d      	cmp	r3, #29
 8009eec:	d001      	beq.n	8009ef2 <__sflush_r+0xb2>
 8009eee:	2b16      	cmp	r3, #22
 8009ef0:	d101      	bne.n	8009ef6 <__sflush_r+0xb6>
 8009ef2:	602f      	str	r7, [r5, #0]
 8009ef4:	e7b1      	b.n	8009e5a <__sflush_r+0x1a>
 8009ef6:	89a3      	ldrh	r3, [r4, #12]
 8009ef8:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8009efc:	81a3      	strh	r3, [r4, #12]
 8009efe:	e7ad      	b.n	8009e5c <__sflush_r+0x1c>
 8009f00:	690f      	ldr	r7, [r1, #16]
 8009f02:	2f00      	cmp	r7, #0
 8009f04:	d0a9      	beq.n	8009e5a <__sflush_r+0x1a>
 8009f06:	0793      	lsls	r3, r2, #30
 8009f08:	680e      	ldr	r6, [r1, #0]
 8009f0a:	bf08      	it	eq
 8009f0c:	694b      	ldreq	r3, [r1, #20]
 8009f0e:	600f      	str	r7, [r1, #0]
 8009f10:	bf18      	it	ne
 8009f12:	2300      	movne	r3, #0
 8009f14:	eba6 0807 	sub.w	r8, r6, r7
 8009f18:	608b      	str	r3, [r1, #8]
 8009f1a:	f1b8 0f00 	cmp.w	r8, #0
 8009f1e:	dd9c      	ble.n	8009e5a <__sflush_r+0x1a>
 8009f20:	6a21      	ldr	r1, [r4, #32]
 8009f22:	6aa6      	ldr	r6, [r4, #40]	; 0x28
 8009f24:	4643      	mov	r3, r8
 8009f26:	463a      	mov	r2, r7
 8009f28:	4628      	mov	r0, r5
 8009f2a:	47b0      	blx	r6
 8009f2c:	2800      	cmp	r0, #0
 8009f2e:	dc06      	bgt.n	8009f3e <__sflush_r+0xfe>
 8009f30:	89a3      	ldrh	r3, [r4, #12]
 8009f32:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8009f36:	81a3      	strh	r3, [r4, #12]
 8009f38:	f04f 30ff 	mov.w	r0, #4294967295
 8009f3c:	e78e      	b.n	8009e5c <__sflush_r+0x1c>
 8009f3e:	4407      	add	r7, r0
 8009f40:	eba8 0800 	sub.w	r8, r8, r0
 8009f44:	e7e9      	b.n	8009f1a <__sflush_r+0xda>
 8009f46:	bf00      	nop
 8009f48:	20400001 	.word	0x20400001

08009f4c <_fflush_r>:
 8009f4c:	b538      	push	{r3, r4, r5, lr}
 8009f4e:	690b      	ldr	r3, [r1, #16]
 8009f50:	4605      	mov	r5, r0
 8009f52:	460c      	mov	r4, r1
 8009f54:	b913      	cbnz	r3, 8009f5c <_fflush_r+0x10>
 8009f56:	2500      	movs	r5, #0
 8009f58:	4628      	mov	r0, r5
 8009f5a:	bd38      	pop	{r3, r4, r5, pc}
 8009f5c:	b118      	cbz	r0, 8009f66 <_fflush_r+0x1a>
 8009f5e:	6983      	ldr	r3, [r0, #24]
 8009f60:	b90b      	cbnz	r3, 8009f66 <_fflush_r+0x1a>
 8009f62:	f000 f887 	bl	800a074 <__sinit>
 8009f66:	4b14      	ldr	r3, [pc, #80]	; (8009fb8 <_fflush_r+0x6c>)
 8009f68:	429c      	cmp	r4, r3
 8009f6a:	d11b      	bne.n	8009fa4 <_fflush_r+0x58>
 8009f6c:	686c      	ldr	r4, [r5, #4]
 8009f6e:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8009f72:	2b00      	cmp	r3, #0
 8009f74:	d0ef      	beq.n	8009f56 <_fflush_r+0xa>
 8009f76:	6e62      	ldr	r2, [r4, #100]	; 0x64
 8009f78:	07d0      	lsls	r0, r2, #31
 8009f7a:	d404      	bmi.n	8009f86 <_fflush_r+0x3a>
 8009f7c:	0599      	lsls	r1, r3, #22
 8009f7e:	d402      	bmi.n	8009f86 <_fflush_r+0x3a>
 8009f80:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8009f82:	f000 f915 	bl	800a1b0 <__retarget_lock_acquire_recursive>
 8009f86:	4628      	mov	r0, r5
 8009f88:	4621      	mov	r1, r4
 8009f8a:	f7ff ff59 	bl	8009e40 <__sflush_r>
 8009f8e:	6e63      	ldr	r3, [r4, #100]	; 0x64
 8009f90:	07da      	lsls	r2, r3, #31
 8009f92:	4605      	mov	r5, r0
 8009f94:	d4e0      	bmi.n	8009f58 <_fflush_r+0xc>
 8009f96:	89a3      	ldrh	r3, [r4, #12]
 8009f98:	059b      	lsls	r3, r3, #22
 8009f9a:	d4dd      	bmi.n	8009f58 <_fflush_r+0xc>
 8009f9c:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8009f9e:	f000 f908 	bl	800a1b2 <__retarget_lock_release_recursive>
 8009fa2:	e7d9      	b.n	8009f58 <_fflush_r+0xc>
 8009fa4:	4b05      	ldr	r3, [pc, #20]	; (8009fbc <_fflush_r+0x70>)
 8009fa6:	429c      	cmp	r4, r3
 8009fa8:	d101      	bne.n	8009fae <_fflush_r+0x62>
 8009faa:	68ac      	ldr	r4, [r5, #8]
 8009fac:	e7df      	b.n	8009f6e <_fflush_r+0x22>
 8009fae:	4b04      	ldr	r3, [pc, #16]	; (8009fc0 <_fflush_r+0x74>)
 8009fb0:	429c      	cmp	r4, r3
 8009fb2:	bf08      	it	eq
 8009fb4:	68ec      	ldreq	r4, [r5, #12]
 8009fb6:	e7da      	b.n	8009f6e <_fflush_r+0x22>
 8009fb8:	0800aee0 	.word	0x0800aee0
 8009fbc:	0800af00 	.word	0x0800af00
 8009fc0:	0800aec0 	.word	0x0800aec0

08009fc4 <std>:
 8009fc4:	2300      	movs	r3, #0
 8009fc6:	b510      	push	{r4, lr}
 8009fc8:	4604      	mov	r4, r0
 8009fca:	e9c0 3300 	strd	r3, r3, [r0]
 8009fce:	e9c0 3304 	strd	r3, r3, [r0, #16]
 8009fd2:	6083      	str	r3, [r0, #8]
 8009fd4:	8181      	strh	r1, [r0, #12]
 8009fd6:	6643      	str	r3, [r0, #100]	; 0x64
 8009fd8:	81c2      	strh	r2, [r0, #14]
 8009fda:	6183      	str	r3, [r0, #24]
 8009fdc:	4619      	mov	r1, r3
 8009fde:	2208      	movs	r2, #8
 8009fe0:	305c      	adds	r0, #92	; 0x5c
 8009fe2:	f7ff fcc7 	bl	8009974 <memset>
 8009fe6:	4b05      	ldr	r3, [pc, #20]	; (8009ffc <std+0x38>)
 8009fe8:	6263      	str	r3, [r4, #36]	; 0x24
 8009fea:	4b05      	ldr	r3, [pc, #20]	; (800a000 <std+0x3c>)
 8009fec:	62a3      	str	r3, [r4, #40]	; 0x28
 8009fee:	4b05      	ldr	r3, [pc, #20]	; (800a004 <std+0x40>)
 8009ff0:	62e3      	str	r3, [r4, #44]	; 0x2c
 8009ff2:	4b05      	ldr	r3, [pc, #20]	; (800a008 <std+0x44>)
 8009ff4:	6224      	str	r4, [r4, #32]
 8009ff6:	6323      	str	r3, [r4, #48]	; 0x30
 8009ff8:	bd10      	pop	{r4, pc}
 8009ffa:	bf00      	nop
 8009ffc:	0800ab2d 	.word	0x0800ab2d
 800a000:	0800ab4f 	.word	0x0800ab4f
 800a004:	0800ab87 	.word	0x0800ab87
 800a008:	0800abab 	.word	0x0800abab

0800a00c <_cleanup_r>:
 800a00c:	4901      	ldr	r1, [pc, #4]	; (800a014 <_cleanup_r+0x8>)
 800a00e:	f000 b8af 	b.w	800a170 <_fwalk_reent>
 800a012:	bf00      	nop
 800a014:	08009f4d 	.word	0x08009f4d

0800a018 <__sfmoreglue>:
 800a018:	b570      	push	{r4, r5, r6, lr}
 800a01a:	2268      	movs	r2, #104	; 0x68
 800a01c:	1e4d      	subs	r5, r1, #1
 800a01e:	4355      	muls	r5, r2
 800a020:	460e      	mov	r6, r1
 800a022:	f105 0174 	add.w	r1, r5, #116	; 0x74
 800a026:	f7ff fd19 	bl	8009a5c <_malloc_r>
 800a02a:	4604      	mov	r4, r0
 800a02c:	b140      	cbz	r0, 800a040 <__sfmoreglue+0x28>
 800a02e:	2100      	movs	r1, #0
 800a030:	e9c0 1600 	strd	r1, r6, [r0]
 800a034:	300c      	adds	r0, #12
 800a036:	60a0      	str	r0, [r4, #8]
 800a038:	f105 0268 	add.w	r2, r5, #104	; 0x68
 800a03c:	f7ff fc9a 	bl	8009974 <memset>
 800a040:	4620      	mov	r0, r4
 800a042:	bd70      	pop	{r4, r5, r6, pc}

0800a044 <__sfp_lock_acquire>:
 800a044:	4801      	ldr	r0, [pc, #4]	; (800a04c <__sfp_lock_acquire+0x8>)
 800a046:	f000 b8b3 	b.w	800a1b0 <__retarget_lock_acquire_recursive>
 800a04a:	bf00      	nop
 800a04c:	200093e5 	.word	0x200093e5

0800a050 <__sfp_lock_release>:
 800a050:	4801      	ldr	r0, [pc, #4]	; (800a058 <__sfp_lock_release+0x8>)
 800a052:	f000 b8ae 	b.w	800a1b2 <__retarget_lock_release_recursive>
 800a056:	bf00      	nop
 800a058:	200093e5 	.word	0x200093e5

0800a05c <__sinit_lock_acquire>:
 800a05c:	4801      	ldr	r0, [pc, #4]	; (800a064 <__sinit_lock_acquire+0x8>)
 800a05e:	f000 b8a7 	b.w	800a1b0 <__retarget_lock_acquire_recursive>
 800a062:	bf00      	nop
 800a064:	200093e6 	.word	0x200093e6

0800a068 <__sinit_lock_release>:
 800a068:	4801      	ldr	r0, [pc, #4]	; (800a070 <__sinit_lock_release+0x8>)
 800a06a:	f000 b8a2 	b.w	800a1b2 <__retarget_lock_release_recursive>
 800a06e:	bf00      	nop
 800a070:	200093e6 	.word	0x200093e6

0800a074 <__sinit>:
 800a074:	b510      	push	{r4, lr}
 800a076:	4604      	mov	r4, r0
 800a078:	f7ff fff0 	bl	800a05c <__sinit_lock_acquire>
 800a07c:	69a3      	ldr	r3, [r4, #24]
 800a07e:	b11b      	cbz	r3, 800a088 <__sinit+0x14>
 800a080:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800a084:	f7ff bff0 	b.w	800a068 <__sinit_lock_release>
 800a088:	e9c4 3312 	strd	r3, r3, [r4, #72]	; 0x48
 800a08c:	6523      	str	r3, [r4, #80]	; 0x50
 800a08e:	4b13      	ldr	r3, [pc, #76]	; (800a0dc <__sinit+0x68>)
 800a090:	4a13      	ldr	r2, [pc, #76]	; (800a0e0 <__sinit+0x6c>)
 800a092:	681b      	ldr	r3, [r3, #0]
 800a094:	62a2      	str	r2, [r4, #40]	; 0x28
 800a096:	42a3      	cmp	r3, r4
 800a098:	bf04      	itt	eq
 800a09a:	2301      	moveq	r3, #1
 800a09c:	61a3      	streq	r3, [r4, #24]
 800a09e:	4620      	mov	r0, r4
 800a0a0:	f000 f820 	bl	800a0e4 <__sfp>
 800a0a4:	6060      	str	r0, [r4, #4]
 800a0a6:	4620      	mov	r0, r4
 800a0a8:	f000 f81c 	bl	800a0e4 <__sfp>
 800a0ac:	60a0      	str	r0, [r4, #8]
 800a0ae:	4620      	mov	r0, r4
 800a0b0:	f000 f818 	bl	800a0e4 <__sfp>
 800a0b4:	2200      	movs	r2, #0
 800a0b6:	60e0      	str	r0, [r4, #12]
 800a0b8:	2104      	movs	r1, #4
 800a0ba:	6860      	ldr	r0, [r4, #4]
 800a0bc:	f7ff ff82 	bl	8009fc4 <std>
 800a0c0:	68a0      	ldr	r0, [r4, #8]
 800a0c2:	2201      	movs	r2, #1
 800a0c4:	2109      	movs	r1, #9
 800a0c6:	f7ff ff7d 	bl	8009fc4 <std>
 800a0ca:	68e0      	ldr	r0, [r4, #12]
 800a0cc:	2202      	movs	r2, #2
 800a0ce:	2112      	movs	r1, #18
 800a0d0:	f7ff ff78 	bl	8009fc4 <std>
 800a0d4:	2301      	movs	r3, #1
 800a0d6:	61a3      	str	r3, [r4, #24]
 800a0d8:	e7d2      	b.n	800a080 <__sinit+0xc>
 800a0da:	bf00      	nop
 800a0dc:	0800aebc 	.word	0x0800aebc
 800a0e0:	0800a00d 	.word	0x0800a00d

0800a0e4 <__sfp>:
 800a0e4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800a0e6:	4607      	mov	r7, r0
 800a0e8:	f7ff ffac 	bl	800a044 <__sfp_lock_acquire>
 800a0ec:	4b1e      	ldr	r3, [pc, #120]	; (800a168 <__sfp+0x84>)
 800a0ee:	681e      	ldr	r6, [r3, #0]
 800a0f0:	69b3      	ldr	r3, [r6, #24]
 800a0f2:	b913      	cbnz	r3, 800a0fa <__sfp+0x16>
 800a0f4:	4630      	mov	r0, r6
 800a0f6:	f7ff ffbd 	bl	800a074 <__sinit>
 800a0fa:	3648      	adds	r6, #72	; 0x48
 800a0fc:	e9d6 3401 	ldrd	r3, r4, [r6, #4]
 800a100:	3b01      	subs	r3, #1
 800a102:	d503      	bpl.n	800a10c <__sfp+0x28>
 800a104:	6833      	ldr	r3, [r6, #0]
 800a106:	b30b      	cbz	r3, 800a14c <__sfp+0x68>
 800a108:	6836      	ldr	r6, [r6, #0]
 800a10a:	e7f7      	b.n	800a0fc <__sfp+0x18>
 800a10c:	f9b4 500c 	ldrsh.w	r5, [r4, #12]
 800a110:	b9d5      	cbnz	r5, 800a148 <__sfp+0x64>
 800a112:	4b16      	ldr	r3, [pc, #88]	; (800a16c <__sfp+0x88>)
 800a114:	60e3      	str	r3, [r4, #12]
 800a116:	f104 0058 	add.w	r0, r4, #88	; 0x58
 800a11a:	6665      	str	r5, [r4, #100]	; 0x64
 800a11c:	f000 f847 	bl	800a1ae <__retarget_lock_init_recursive>
 800a120:	f7ff ff96 	bl	800a050 <__sfp_lock_release>
 800a124:	e9c4 5501 	strd	r5, r5, [r4, #4]
 800a128:	e9c4 5504 	strd	r5, r5, [r4, #16]
 800a12c:	6025      	str	r5, [r4, #0]
 800a12e:	61a5      	str	r5, [r4, #24]
 800a130:	2208      	movs	r2, #8
 800a132:	4629      	mov	r1, r5
 800a134:	f104 005c 	add.w	r0, r4, #92	; 0x5c
 800a138:	f7ff fc1c 	bl	8009974 <memset>
 800a13c:	e9c4 550d 	strd	r5, r5, [r4, #52]	; 0x34
 800a140:	e9c4 5512 	strd	r5, r5, [r4, #72]	; 0x48
 800a144:	4620      	mov	r0, r4
 800a146:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800a148:	3468      	adds	r4, #104	; 0x68
 800a14a:	e7d9      	b.n	800a100 <__sfp+0x1c>
 800a14c:	2104      	movs	r1, #4
 800a14e:	4638      	mov	r0, r7
 800a150:	f7ff ff62 	bl	800a018 <__sfmoreglue>
 800a154:	4604      	mov	r4, r0
 800a156:	6030      	str	r0, [r6, #0]
 800a158:	2800      	cmp	r0, #0
 800a15a:	d1d5      	bne.n	800a108 <__sfp+0x24>
 800a15c:	f7ff ff78 	bl	800a050 <__sfp_lock_release>
 800a160:	230c      	movs	r3, #12
 800a162:	603b      	str	r3, [r7, #0]
 800a164:	e7ee      	b.n	800a144 <__sfp+0x60>
 800a166:	bf00      	nop
 800a168:	0800aebc 	.word	0x0800aebc
 800a16c:	ffff0001 	.word	0xffff0001

0800a170 <_fwalk_reent>:
 800a170:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800a174:	4606      	mov	r6, r0
 800a176:	4688      	mov	r8, r1
 800a178:	f100 0448 	add.w	r4, r0, #72	; 0x48
 800a17c:	2700      	movs	r7, #0
 800a17e:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 800a182:	f1b9 0901 	subs.w	r9, r9, #1
 800a186:	d505      	bpl.n	800a194 <_fwalk_reent+0x24>
 800a188:	6824      	ldr	r4, [r4, #0]
 800a18a:	2c00      	cmp	r4, #0
 800a18c:	d1f7      	bne.n	800a17e <_fwalk_reent+0xe>
 800a18e:	4638      	mov	r0, r7
 800a190:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800a194:	89ab      	ldrh	r3, [r5, #12]
 800a196:	2b01      	cmp	r3, #1
 800a198:	d907      	bls.n	800a1aa <_fwalk_reent+0x3a>
 800a19a:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 800a19e:	3301      	adds	r3, #1
 800a1a0:	d003      	beq.n	800a1aa <_fwalk_reent+0x3a>
 800a1a2:	4629      	mov	r1, r5
 800a1a4:	4630      	mov	r0, r6
 800a1a6:	47c0      	blx	r8
 800a1a8:	4307      	orrs	r7, r0
 800a1aa:	3568      	adds	r5, #104	; 0x68
 800a1ac:	e7e9      	b.n	800a182 <_fwalk_reent+0x12>

0800a1ae <__retarget_lock_init_recursive>:
 800a1ae:	4770      	bx	lr

0800a1b0 <__retarget_lock_acquire_recursive>:
 800a1b0:	4770      	bx	lr

0800a1b2 <__retarget_lock_release_recursive>:
 800a1b2:	4770      	bx	lr

0800a1b4 <__swhatbuf_r>:
 800a1b4:	b570      	push	{r4, r5, r6, lr}
 800a1b6:	460e      	mov	r6, r1
 800a1b8:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800a1bc:	2900      	cmp	r1, #0
 800a1be:	b096      	sub	sp, #88	; 0x58
 800a1c0:	4614      	mov	r4, r2
 800a1c2:	461d      	mov	r5, r3
 800a1c4:	da08      	bge.n	800a1d8 <__swhatbuf_r+0x24>
 800a1c6:	f9b6 300c 	ldrsh.w	r3, [r6, #12]
 800a1ca:	2200      	movs	r2, #0
 800a1cc:	602a      	str	r2, [r5, #0]
 800a1ce:	061a      	lsls	r2, r3, #24
 800a1d0:	d410      	bmi.n	800a1f4 <__swhatbuf_r+0x40>
 800a1d2:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800a1d6:	e00e      	b.n	800a1f6 <__swhatbuf_r+0x42>
 800a1d8:	466a      	mov	r2, sp
 800a1da:	f000 fd0d 	bl	800abf8 <_fstat_r>
 800a1de:	2800      	cmp	r0, #0
 800a1e0:	dbf1      	blt.n	800a1c6 <__swhatbuf_r+0x12>
 800a1e2:	9a01      	ldr	r2, [sp, #4]
 800a1e4:	f402 4270 	and.w	r2, r2, #61440	; 0xf000
 800a1e8:	f5a2 5300 	sub.w	r3, r2, #8192	; 0x2000
 800a1ec:	425a      	negs	r2, r3
 800a1ee:	415a      	adcs	r2, r3
 800a1f0:	602a      	str	r2, [r5, #0]
 800a1f2:	e7ee      	b.n	800a1d2 <__swhatbuf_r+0x1e>
 800a1f4:	2340      	movs	r3, #64	; 0x40
 800a1f6:	2000      	movs	r0, #0
 800a1f8:	6023      	str	r3, [r4, #0]
 800a1fa:	b016      	add	sp, #88	; 0x58
 800a1fc:	bd70      	pop	{r4, r5, r6, pc}
	...

0800a200 <__smakebuf_r>:
 800a200:	898b      	ldrh	r3, [r1, #12]
 800a202:	b573      	push	{r0, r1, r4, r5, r6, lr}
 800a204:	079d      	lsls	r5, r3, #30
 800a206:	4606      	mov	r6, r0
 800a208:	460c      	mov	r4, r1
 800a20a:	d507      	bpl.n	800a21c <__smakebuf_r+0x1c>
 800a20c:	f104 0347 	add.w	r3, r4, #71	; 0x47
 800a210:	6023      	str	r3, [r4, #0]
 800a212:	6123      	str	r3, [r4, #16]
 800a214:	2301      	movs	r3, #1
 800a216:	6163      	str	r3, [r4, #20]
 800a218:	b002      	add	sp, #8
 800a21a:	bd70      	pop	{r4, r5, r6, pc}
 800a21c:	ab01      	add	r3, sp, #4
 800a21e:	466a      	mov	r2, sp
 800a220:	f7ff ffc8 	bl	800a1b4 <__swhatbuf_r>
 800a224:	9900      	ldr	r1, [sp, #0]
 800a226:	4605      	mov	r5, r0
 800a228:	4630      	mov	r0, r6
 800a22a:	f7ff fc17 	bl	8009a5c <_malloc_r>
 800a22e:	b948      	cbnz	r0, 800a244 <__smakebuf_r+0x44>
 800a230:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800a234:	059a      	lsls	r2, r3, #22
 800a236:	d4ef      	bmi.n	800a218 <__smakebuf_r+0x18>
 800a238:	f023 0303 	bic.w	r3, r3, #3
 800a23c:	f043 0302 	orr.w	r3, r3, #2
 800a240:	81a3      	strh	r3, [r4, #12]
 800a242:	e7e3      	b.n	800a20c <__smakebuf_r+0xc>
 800a244:	4b0d      	ldr	r3, [pc, #52]	; (800a27c <__smakebuf_r+0x7c>)
 800a246:	62b3      	str	r3, [r6, #40]	; 0x28
 800a248:	89a3      	ldrh	r3, [r4, #12]
 800a24a:	6020      	str	r0, [r4, #0]
 800a24c:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800a250:	81a3      	strh	r3, [r4, #12]
 800a252:	9b00      	ldr	r3, [sp, #0]
 800a254:	6163      	str	r3, [r4, #20]
 800a256:	9b01      	ldr	r3, [sp, #4]
 800a258:	6120      	str	r0, [r4, #16]
 800a25a:	b15b      	cbz	r3, 800a274 <__smakebuf_r+0x74>
 800a25c:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800a260:	4630      	mov	r0, r6
 800a262:	f000 fcdb 	bl	800ac1c <_isatty_r>
 800a266:	b128      	cbz	r0, 800a274 <__smakebuf_r+0x74>
 800a268:	89a3      	ldrh	r3, [r4, #12]
 800a26a:	f023 0303 	bic.w	r3, r3, #3
 800a26e:	f043 0301 	orr.w	r3, r3, #1
 800a272:	81a3      	strh	r3, [r4, #12]
 800a274:	89a0      	ldrh	r0, [r4, #12]
 800a276:	4305      	orrs	r5, r0
 800a278:	81a5      	strh	r5, [r4, #12]
 800a27a:	e7cd      	b.n	800a218 <__smakebuf_r+0x18>
 800a27c:	0800a00d 	.word	0x0800a00d

0800a280 <__malloc_lock>:
 800a280:	4801      	ldr	r0, [pc, #4]	; (800a288 <__malloc_lock+0x8>)
 800a282:	f7ff bf95 	b.w	800a1b0 <__retarget_lock_acquire_recursive>
 800a286:	bf00      	nop
 800a288:	200093e4 	.word	0x200093e4

0800a28c <__malloc_unlock>:
 800a28c:	4801      	ldr	r0, [pc, #4]	; (800a294 <__malloc_unlock+0x8>)
 800a28e:	f7ff bf90 	b.w	800a1b2 <__retarget_lock_release_recursive>
 800a292:	bf00      	nop
 800a294:	200093e4 	.word	0x200093e4

0800a298 <__ssputs_r>:
 800a298:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800a29c:	688e      	ldr	r6, [r1, #8]
 800a29e:	429e      	cmp	r6, r3
 800a2a0:	4682      	mov	sl, r0
 800a2a2:	460c      	mov	r4, r1
 800a2a4:	4690      	mov	r8, r2
 800a2a6:	461f      	mov	r7, r3
 800a2a8:	d838      	bhi.n	800a31c <__ssputs_r+0x84>
 800a2aa:	898a      	ldrh	r2, [r1, #12]
 800a2ac:	f412 6f90 	tst.w	r2, #1152	; 0x480
 800a2b0:	d032      	beq.n	800a318 <__ssputs_r+0x80>
 800a2b2:	6825      	ldr	r5, [r4, #0]
 800a2b4:	6909      	ldr	r1, [r1, #16]
 800a2b6:	eba5 0901 	sub.w	r9, r5, r1
 800a2ba:	6965      	ldr	r5, [r4, #20]
 800a2bc:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 800a2c0:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 800a2c4:	3301      	adds	r3, #1
 800a2c6:	444b      	add	r3, r9
 800a2c8:	106d      	asrs	r5, r5, #1
 800a2ca:	429d      	cmp	r5, r3
 800a2cc:	bf38      	it	cc
 800a2ce:	461d      	movcc	r5, r3
 800a2d0:	0553      	lsls	r3, r2, #21
 800a2d2:	d531      	bpl.n	800a338 <__ssputs_r+0xa0>
 800a2d4:	4629      	mov	r1, r5
 800a2d6:	f7ff fbc1 	bl	8009a5c <_malloc_r>
 800a2da:	4606      	mov	r6, r0
 800a2dc:	b950      	cbnz	r0, 800a2f4 <__ssputs_r+0x5c>
 800a2de:	230c      	movs	r3, #12
 800a2e0:	f8ca 3000 	str.w	r3, [sl]
 800a2e4:	89a3      	ldrh	r3, [r4, #12]
 800a2e6:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800a2ea:	81a3      	strh	r3, [r4, #12]
 800a2ec:	f04f 30ff 	mov.w	r0, #4294967295
 800a2f0:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800a2f4:	6921      	ldr	r1, [r4, #16]
 800a2f6:	464a      	mov	r2, r9
 800a2f8:	f7ff fb2e 	bl	8009958 <memcpy>
 800a2fc:	89a3      	ldrh	r3, [r4, #12]
 800a2fe:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 800a302:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800a306:	81a3      	strh	r3, [r4, #12]
 800a308:	6126      	str	r6, [r4, #16]
 800a30a:	6165      	str	r5, [r4, #20]
 800a30c:	444e      	add	r6, r9
 800a30e:	eba5 0509 	sub.w	r5, r5, r9
 800a312:	6026      	str	r6, [r4, #0]
 800a314:	60a5      	str	r5, [r4, #8]
 800a316:	463e      	mov	r6, r7
 800a318:	42be      	cmp	r6, r7
 800a31a:	d900      	bls.n	800a31e <__ssputs_r+0x86>
 800a31c:	463e      	mov	r6, r7
 800a31e:	6820      	ldr	r0, [r4, #0]
 800a320:	4632      	mov	r2, r6
 800a322:	4641      	mov	r1, r8
 800a324:	f000 fc9c 	bl	800ac60 <memmove>
 800a328:	68a3      	ldr	r3, [r4, #8]
 800a32a:	1b9b      	subs	r3, r3, r6
 800a32c:	60a3      	str	r3, [r4, #8]
 800a32e:	6823      	ldr	r3, [r4, #0]
 800a330:	4433      	add	r3, r6
 800a332:	6023      	str	r3, [r4, #0]
 800a334:	2000      	movs	r0, #0
 800a336:	e7db      	b.n	800a2f0 <__ssputs_r+0x58>
 800a338:	462a      	mov	r2, r5
 800a33a:	f000 fcab 	bl	800ac94 <_realloc_r>
 800a33e:	4606      	mov	r6, r0
 800a340:	2800      	cmp	r0, #0
 800a342:	d1e1      	bne.n	800a308 <__ssputs_r+0x70>
 800a344:	6921      	ldr	r1, [r4, #16]
 800a346:	4650      	mov	r0, sl
 800a348:	f7ff fb1c 	bl	8009984 <_free_r>
 800a34c:	e7c7      	b.n	800a2de <__ssputs_r+0x46>
	...

0800a350 <_svfiprintf_r>:
 800a350:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800a354:	4698      	mov	r8, r3
 800a356:	898b      	ldrh	r3, [r1, #12]
 800a358:	061b      	lsls	r3, r3, #24
 800a35a:	b09d      	sub	sp, #116	; 0x74
 800a35c:	4607      	mov	r7, r0
 800a35e:	460d      	mov	r5, r1
 800a360:	4614      	mov	r4, r2
 800a362:	d50e      	bpl.n	800a382 <_svfiprintf_r+0x32>
 800a364:	690b      	ldr	r3, [r1, #16]
 800a366:	b963      	cbnz	r3, 800a382 <_svfiprintf_r+0x32>
 800a368:	2140      	movs	r1, #64	; 0x40
 800a36a:	f7ff fb77 	bl	8009a5c <_malloc_r>
 800a36e:	6028      	str	r0, [r5, #0]
 800a370:	6128      	str	r0, [r5, #16]
 800a372:	b920      	cbnz	r0, 800a37e <_svfiprintf_r+0x2e>
 800a374:	230c      	movs	r3, #12
 800a376:	603b      	str	r3, [r7, #0]
 800a378:	f04f 30ff 	mov.w	r0, #4294967295
 800a37c:	e0d1      	b.n	800a522 <_svfiprintf_r+0x1d2>
 800a37e:	2340      	movs	r3, #64	; 0x40
 800a380:	616b      	str	r3, [r5, #20]
 800a382:	2300      	movs	r3, #0
 800a384:	9309      	str	r3, [sp, #36]	; 0x24
 800a386:	2320      	movs	r3, #32
 800a388:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 800a38c:	f8cd 800c 	str.w	r8, [sp, #12]
 800a390:	2330      	movs	r3, #48	; 0x30
 800a392:	f8df 81a8 	ldr.w	r8, [pc, #424]	; 800a53c <_svfiprintf_r+0x1ec>
 800a396:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 800a39a:	f04f 0901 	mov.w	r9, #1
 800a39e:	4623      	mov	r3, r4
 800a3a0:	469a      	mov	sl, r3
 800a3a2:	f813 2b01 	ldrb.w	r2, [r3], #1
 800a3a6:	b10a      	cbz	r2, 800a3ac <_svfiprintf_r+0x5c>
 800a3a8:	2a25      	cmp	r2, #37	; 0x25
 800a3aa:	d1f9      	bne.n	800a3a0 <_svfiprintf_r+0x50>
 800a3ac:	ebba 0b04 	subs.w	fp, sl, r4
 800a3b0:	d00b      	beq.n	800a3ca <_svfiprintf_r+0x7a>
 800a3b2:	465b      	mov	r3, fp
 800a3b4:	4622      	mov	r2, r4
 800a3b6:	4629      	mov	r1, r5
 800a3b8:	4638      	mov	r0, r7
 800a3ba:	f7ff ff6d 	bl	800a298 <__ssputs_r>
 800a3be:	3001      	adds	r0, #1
 800a3c0:	f000 80aa 	beq.w	800a518 <_svfiprintf_r+0x1c8>
 800a3c4:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800a3c6:	445a      	add	r2, fp
 800a3c8:	9209      	str	r2, [sp, #36]	; 0x24
 800a3ca:	f89a 3000 	ldrb.w	r3, [sl]
 800a3ce:	2b00      	cmp	r3, #0
 800a3d0:	f000 80a2 	beq.w	800a518 <_svfiprintf_r+0x1c8>
 800a3d4:	2300      	movs	r3, #0
 800a3d6:	f04f 32ff 	mov.w	r2, #4294967295
 800a3da:	e9cd 2305 	strd	r2, r3, [sp, #20]
 800a3de:	f10a 0a01 	add.w	sl, sl, #1
 800a3e2:	9304      	str	r3, [sp, #16]
 800a3e4:	9307      	str	r3, [sp, #28]
 800a3e6:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 800a3ea:	931a      	str	r3, [sp, #104]	; 0x68
 800a3ec:	4654      	mov	r4, sl
 800a3ee:	2205      	movs	r2, #5
 800a3f0:	f814 1b01 	ldrb.w	r1, [r4], #1
 800a3f4:	4851      	ldr	r0, [pc, #324]	; (800a53c <_svfiprintf_r+0x1ec>)
 800a3f6:	f7f5 fefb 	bl	80001f0 <memchr>
 800a3fa:	9a04      	ldr	r2, [sp, #16]
 800a3fc:	b9d8      	cbnz	r0, 800a436 <_svfiprintf_r+0xe6>
 800a3fe:	06d0      	lsls	r0, r2, #27
 800a400:	bf44      	itt	mi
 800a402:	2320      	movmi	r3, #32
 800a404:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800a408:	0711      	lsls	r1, r2, #28
 800a40a:	bf44      	itt	mi
 800a40c:	232b      	movmi	r3, #43	; 0x2b
 800a40e:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800a412:	f89a 3000 	ldrb.w	r3, [sl]
 800a416:	2b2a      	cmp	r3, #42	; 0x2a
 800a418:	d015      	beq.n	800a446 <_svfiprintf_r+0xf6>
 800a41a:	9a07      	ldr	r2, [sp, #28]
 800a41c:	4654      	mov	r4, sl
 800a41e:	2000      	movs	r0, #0
 800a420:	f04f 0c0a 	mov.w	ip, #10
 800a424:	4621      	mov	r1, r4
 800a426:	f811 3b01 	ldrb.w	r3, [r1], #1
 800a42a:	3b30      	subs	r3, #48	; 0x30
 800a42c:	2b09      	cmp	r3, #9
 800a42e:	d94e      	bls.n	800a4ce <_svfiprintf_r+0x17e>
 800a430:	b1b0      	cbz	r0, 800a460 <_svfiprintf_r+0x110>
 800a432:	9207      	str	r2, [sp, #28]
 800a434:	e014      	b.n	800a460 <_svfiprintf_r+0x110>
 800a436:	eba0 0308 	sub.w	r3, r0, r8
 800a43a:	fa09 f303 	lsl.w	r3, r9, r3
 800a43e:	4313      	orrs	r3, r2
 800a440:	9304      	str	r3, [sp, #16]
 800a442:	46a2      	mov	sl, r4
 800a444:	e7d2      	b.n	800a3ec <_svfiprintf_r+0x9c>
 800a446:	9b03      	ldr	r3, [sp, #12]
 800a448:	1d19      	adds	r1, r3, #4
 800a44a:	681b      	ldr	r3, [r3, #0]
 800a44c:	9103      	str	r1, [sp, #12]
 800a44e:	2b00      	cmp	r3, #0
 800a450:	bfbb      	ittet	lt
 800a452:	425b      	neglt	r3, r3
 800a454:	f042 0202 	orrlt.w	r2, r2, #2
 800a458:	9307      	strge	r3, [sp, #28]
 800a45a:	9307      	strlt	r3, [sp, #28]
 800a45c:	bfb8      	it	lt
 800a45e:	9204      	strlt	r2, [sp, #16]
 800a460:	7823      	ldrb	r3, [r4, #0]
 800a462:	2b2e      	cmp	r3, #46	; 0x2e
 800a464:	d10c      	bne.n	800a480 <_svfiprintf_r+0x130>
 800a466:	7863      	ldrb	r3, [r4, #1]
 800a468:	2b2a      	cmp	r3, #42	; 0x2a
 800a46a:	d135      	bne.n	800a4d8 <_svfiprintf_r+0x188>
 800a46c:	9b03      	ldr	r3, [sp, #12]
 800a46e:	1d1a      	adds	r2, r3, #4
 800a470:	681b      	ldr	r3, [r3, #0]
 800a472:	9203      	str	r2, [sp, #12]
 800a474:	2b00      	cmp	r3, #0
 800a476:	bfb8      	it	lt
 800a478:	f04f 33ff 	movlt.w	r3, #4294967295
 800a47c:	3402      	adds	r4, #2
 800a47e:	9305      	str	r3, [sp, #20]
 800a480:	f8df a0c8 	ldr.w	sl, [pc, #200]	; 800a54c <_svfiprintf_r+0x1fc>
 800a484:	7821      	ldrb	r1, [r4, #0]
 800a486:	2203      	movs	r2, #3
 800a488:	4650      	mov	r0, sl
 800a48a:	f7f5 feb1 	bl	80001f0 <memchr>
 800a48e:	b140      	cbz	r0, 800a4a2 <_svfiprintf_r+0x152>
 800a490:	2340      	movs	r3, #64	; 0x40
 800a492:	eba0 000a 	sub.w	r0, r0, sl
 800a496:	fa03 f000 	lsl.w	r0, r3, r0
 800a49a:	9b04      	ldr	r3, [sp, #16]
 800a49c:	4303      	orrs	r3, r0
 800a49e:	3401      	adds	r4, #1
 800a4a0:	9304      	str	r3, [sp, #16]
 800a4a2:	f814 1b01 	ldrb.w	r1, [r4], #1
 800a4a6:	4826      	ldr	r0, [pc, #152]	; (800a540 <_svfiprintf_r+0x1f0>)
 800a4a8:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 800a4ac:	2206      	movs	r2, #6
 800a4ae:	f7f5 fe9f 	bl	80001f0 <memchr>
 800a4b2:	2800      	cmp	r0, #0
 800a4b4:	d038      	beq.n	800a528 <_svfiprintf_r+0x1d8>
 800a4b6:	4b23      	ldr	r3, [pc, #140]	; (800a544 <_svfiprintf_r+0x1f4>)
 800a4b8:	bb1b      	cbnz	r3, 800a502 <_svfiprintf_r+0x1b2>
 800a4ba:	9b03      	ldr	r3, [sp, #12]
 800a4bc:	3307      	adds	r3, #7
 800a4be:	f023 0307 	bic.w	r3, r3, #7
 800a4c2:	3308      	adds	r3, #8
 800a4c4:	9303      	str	r3, [sp, #12]
 800a4c6:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800a4c8:	4433      	add	r3, r6
 800a4ca:	9309      	str	r3, [sp, #36]	; 0x24
 800a4cc:	e767      	b.n	800a39e <_svfiprintf_r+0x4e>
 800a4ce:	fb0c 3202 	mla	r2, ip, r2, r3
 800a4d2:	460c      	mov	r4, r1
 800a4d4:	2001      	movs	r0, #1
 800a4d6:	e7a5      	b.n	800a424 <_svfiprintf_r+0xd4>
 800a4d8:	2300      	movs	r3, #0
 800a4da:	3401      	adds	r4, #1
 800a4dc:	9305      	str	r3, [sp, #20]
 800a4de:	4619      	mov	r1, r3
 800a4e0:	f04f 0c0a 	mov.w	ip, #10
 800a4e4:	4620      	mov	r0, r4
 800a4e6:	f810 2b01 	ldrb.w	r2, [r0], #1
 800a4ea:	3a30      	subs	r2, #48	; 0x30
 800a4ec:	2a09      	cmp	r2, #9
 800a4ee:	d903      	bls.n	800a4f8 <_svfiprintf_r+0x1a8>
 800a4f0:	2b00      	cmp	r3, #0
 800a4f2:	d0c5      	beq.n	800a480 <_svfiprintf_r+0x130>
 800a4f4:	9105      	str	r1, [sp, #20]
 800a4f6:	e7c3      	b.n	800a480 <_svfiprintf_r+0x130>
 800a4f8:	fb0c 2101 	mla	r1, ip, r1, r2
 800a4fc:	4604      	mov	r4, r0
 800a4fe:	2301      	movs	r3, #1
 800a500:	e7f0      	b.n	800a4e4 <_svfiprintf_r+0x194>
 800a502:	ab03      	add	r3, sp, #12
 800a504:	9300      	str	r3, [sp, #0]
 800a506:	462a      	mov	r2, r5
 800a508:	4b0f      	ldr	r3, [pc, #60]	; (800a548 <_svfiprintf_r+0x1f8>)
 800a50a:	a904      	add	r1, sp, #16
 800a50c:	4638      	mov	r0, r7
 800a50e:	f3af 8000 	nop.w
 800a512:	1c42      	adds	r2, r0, #1
 800a514:	4606      	mov	r6, r0
 800a516:	d1d6      	bne.n	800a4c6 <_svfiprintf_r+0x176>
 800a518:	89ab      	ldrh	r3, [r5, #12]
 800a51a:	065b      	lsls	r3, r3, #25
 800a51c:	f53f af2c 	bmi.w	800a378 <_svfiprintf_r+0x28>
 800a520:	9809      	ldr	r0, [sp, #36]	; 0x24
 800a522:	b01d      	add	sp, #116	; 0x74
 800a524:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800a528:	ab03      	add	r3, sp, #12
 800a52a:	9300      	str	r3, [sp, #0]
 800a52c:	462a      	mov	r2, r5
 800a52e:	4b06      	ldr	r3, [pc, #24]	; (800a548 <_svfiprintf_r+0x1f8>)
 800a530:	a904      	add	r1, sp, #16
 800a532:	4638      	mov	r0, r7
 800a534:	f000 f9d4 	bl	800a8e0 <_printf_i>
 800a538:	e7eb      	b.n	800a512 <_svfiprintf_r+0x1c2>
 800a53a:	bf00      	nop
 800a53c:	0800af20 	.word	0x0800af20
 800a540:	0800af2a 	.word	0x0800af2a
 800a544:	00000000 	.word	0x00000000
 800a548:	0800a299 	.word	0x0800a299
 800a54c:	0800af26 	.word	0x0800af26

0800a550 <__sfputc_r>:
 800a550:	6893      	ldr	r3, [r2, #8]
 800a552:	3b01      	subs	r3, #1
 800a554:	2b00      	cmp	r3, #0
 800a556:	b410      	push	{r4}
 800a558:	6093      	str	r3, [r2, #8]
 800a55a:	da08      	bge.n	800a56e <__sfputc_r+0x1e>
 800a55c:	6994      	ldr	r4, [r2, #24]
 800a55e:	42a3      	cmp	r3, r4
 800a560:	db01      	blt.n	800a566 <__sfputc_r+0x16>
 800a562:	290a      	cmp	r1, #10
 800a564:	d103      	bne.n	800a56e <__sfputc_r+0x1e>
 800a566:	f85d 4b04 	ldr.w	r4, [sp], #4
 800a56a:	f7ff bba9 	b.w	8009cc0 <__swbuf_r>
 800a56e:	6813      	ldr	r3, [r2, #0]
 800a570:	1c58      	adds	r0, r3, #1
 800a572:	6010      	str	r0, [r2, #0]
 800a574:	7019      	strb	r1, [r3, #0]
 800a576:	4608      	mov	r0, r1
 800a578:	f85d 4b04 	ldr.w	r4, [sp], #4
 800a57c:	4770      	bx	lr

0800a57e <__sfputs_r>:
 800a57e:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800a580:	4606      	mov	r6, r0
 800a582:	460f      	mov	r7, r1
 800a584:	4614      	mov	r4, r2
 800a586:	18d5      	adds	r5, r2, r3
 800a588:	42ac      	cmp	r4, r5
 800a58a:	d101      	bne.n	800a590 <__sfputs_r+0x12>
 800a58c:	2000      	movs	r0, #0
 800a58e:	e007      	b.n	800a5a0 <__sfputs_r+0x22>
 800a590:	f814 1b01 	ldrb.w	r1, [r4], #1
 800a594:	463a      	mov	r2, r7
 800a596:	4630      	mov	r0, r6
 800a598:	f7ff ffda 	bl	800a550 <__sfputc_r>
 800a59c:	1c43      	adds	r3, r0, #1
 800a59e:	d1f3      	bne.n	800a588 <__sfputs_r+0xa>
 800a5a0:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

0800a5a4 <_vfiprintf_r>:
 800a5a4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800a5a8:	460d      	mov	r5, r1
 800a5aa:	b09d      	sub	sp, #116	; 0x74
 800a5ac:	4614      	mov	r4, r2
 800a5ae:	4698      	mov	r8, r3
 800a5b0:	4606      	mov	r6, r0
 800a5b2:	b118      	cbz	r0, 800a5bc <_vfiprintf_r+0x18>
 800a5b4:	6983      	ldr	r3, [r0, #24]
 800a5b6:	b90b      	cbnz	r3, 800a5bc <_vfiprintf_r+0x18>
 800a5b8:	f7ff fd5c 	bl	800a074 <__sinit>
 800a5bc:	4b89      	ldr	r3, [pc, #548]	; (800a7e4 <_vfiprintf_r+0x240>)
 800a5be:	429d      	cmp	r5, r3
 800a5c0:	d11b      	bne.n	800a5fa <_vfiprintf_r+0x56>
 800a5c2:	6875      	ldr	r5, [r6, #4]
 800a5c4:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 800a5c6:	07d9      	lsls	r1, r3, #31
 800a5c8:	d405      	bmi.n	800a5d6 <_vfiprintf_r+0x32>
 800a5ca:	89ab      	ldrh	r3, [r5, #12]
 800a5cc:	059a      	lsls	r2, r3, #22
 800a5ce:	d402      	bmi.n	800a5d6 <_vfiprintf_r+0x32>
 800a5d0:	6da8      	ldr	r0, [r5, #88]	; 0x58
 800a5d2:	f7ff fded 	bl	800a1b0 <__retarget_lock_acquire_recursive>
 800a5d6:	89ab      	ldrh	r3, [r5, #12]
 800a5d8:	071b      	lsls	r3, r3, #28
 800a5da:	d501      	bpl.n	800a5e0 <_vfiprintf_r+0x3c>
 800a5dc:	692b      	ldr	r3, [r5, #16]
 800a5de:	b9eb      	cbnz	r3, 800a61c <_vfiprintf_r+0x78>
 800a5e0:	4629      	mov	r1, r5
 800a5e2:	4630      	mov	r0, r6
 800a5e4:	f7ff fbbe 	bl	8009d64 <__swsetup_r>
 800a5e8:	b1c0      	cbz	r0, 800a61c <_vfiprintf_r+0x78>
 800a5ea:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 800a5ec:	07dc      	lsls	r4, r3, #31
 800a5ee:	d50e      	bpl.n	800a60e <_vfiprintf_r+0x6a>
 800a5f0:	f04f 30ff 	mov.w	r0, #4294967295
 800a5f4:	b01d      	add	sp, #116	; 0x74
 800a5f6:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800a5fa:	4b7b      	ldr	r3, [pc, #492]	; (800a7e8 <_vfiprintf_r+0x244>)
 800a5fc:	429d      	cmp	r5, r3
 800a5fe:	d101      	bne.n	800a604 <_vfiprintf_r+0x60>
 800a600:	68b5      	ldr	r5, [r6, #8]
 800a602:	e7df      	b.n	800a5c4 <_vfiprintf_r+0x20>
 800a604:	4b79      	ldr	r3, [pc, #484]	; (800a7ec <_vfiprintf_r+0x248>)
 800a606:	429d      	cmp	r5, r3
 800a608:	bf08      	it	eq
 800a60a:	68f5      	ldreq	r5, [r6, #12]
 800a60c:	e7da      	b.n	800a5c4 <_vfiprintf_r+0x20>
 800a60e:	89ab      	ldrh	r3, [r5, #12]
 800a610:	0598      	lsls	r0, r3, #22
 800a612:	d4ed      	bmi.n	800a5f0 <_vfiprintf_r+0x4c>
 800a614:	6da8      	ldr	r0, [r5, #88]	; 0x58
 800a616:	f7ff fdcc 	bl	800a1b2 <__retarget_lock_release_recursive>
 800a61a:	e7e9      	b.n	800a5f0 <_vfiprintf_r+0x4c>
 800a61c:	2300      	movs	r3, #0
 800a61e:	9309      	str	r3, [sp, #36]	; 0x24
 800a620:	2320      	movs	r3, #32
 800a622:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 800a626:	f8cd 800c 	str.w	r8, [sp, #12]
 800a62a:	2330      	movs	r3, #48	; 0x30
 800a62c:	f8df 81c0 	ldr.w	r8, [pc, #448]	; 800a7f0 <_vfiprintf_r+0x24c>
 800a630:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 800a634:	f04f 0901 	mov.w	r9, #1
 800a638:	4623      	mov	r3, r4
 800a63a:	469a      	mov	sl, r3
 800a63c:	f813 2b01 	ldrb.w	r2, [r3], #1
 800a640:	b10a      	cbz	r2, 800a646 <_vfiprintf_r+0xa2>
 800a642:	2a25      	cmp	r2, #37	; 0x25
 800a644:	d1f9      	bne.n	800a63a <_vfiprintf_r+0x96>
 800a646:	ebba 0b04 	subs.w	fp, sl, r4
 800a64a:	d00b      	beq.n	800a664 <_vfiprintf_r+0xc0>
 800a64c:	465b      	mov	r3, fp
 800a64e:	4622      	mov	r2, r4
 800a650:	4629      	mov	r1, r5
 800a652:	4630      	mov	r0, r6
 800a654:	f7ff ff93 	bl	800a57e <__sfputs_r>
 800a658:	3001      	adds	r0, #1
 800a65a:	f000 80aa 	beq.w	800a7b2 <_vfiprintf_r+0x20e>
 800a65e:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800a660:	445a      	add	r2, fp
 800a662:	9209      	str	r2, [sp, #36]	; 0x24
 800a664:	f89a 3000 	ldrb.w	r3, [sl]
 800a668:	2b00      	cmp	r3, #0
 800a66a:	f000 80a2 	beq.w	800a7b2 <_vfiprintf_r+0x20e>
 800a66e:	2300      	movs	r3, #0
 800a670:	f04f 32ff 	mov.w	r2, #4294967295
 800a674:	e9cd 2305 	strd	r2, r3, [sp, #20]
 800a678:	f10a 0a01 	add.w	sl, sl, #1
 800a67c:	9304      	str	r3, [sp, #16]
 800a67e:	9307      	str	r3, [sp, #28]
 800a680:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 800a684:	931a      	str	r3, [sp, #104]	; 0x68
 800a686:	4654      	mov	r4, sl
 800a688:	2205      	movs	r2, #5
 800a68a:	f814 1b01 	ldrb.w	r1, [r4], #1
 800a68e:	4858      	ldr	r0, [pc, #352]	; (800a7f0 <_vfiprintf_r+0x24c>)
 800a690:	f7f5 fdae 	bl	80001f0 <memchr>
 800a694:	9a04      	ldr	r2, [sp, #16]
 800a696:	b9d8      	cbnz	r0, 800a6d0 <_vfiprintf_r+0x12c>
 800a698:	06d1      	lsls	r1, r2, #27
 800a69a:	bf44      	itt	mi
 800a69c:	2320      	movmi	r3, #32
 800a69e:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800a6a2:	0713      	lsls	r3, r2, #28
 800a6a4:	bf44      	itt	mi
 800a6a6:	232b      	movmi	r3, #43	; 0x2b
 800a6a8:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800a6ac:	f89a 3000 	ldrb.w	r3, [sl]
 800a6b0:	2b2a      	cmp	r3, #42	; 0x2a
 800a6b2:	d015      	beq.n	800a6e0 <_vfiprintf_r+0x13c>
 800a6b4:	9a07      	ldr	r2, [sp, #28]
 800a6b6:	4654      	mov	r4, sl
 800a6b8:	2000      	movs	r0, #0
 800a6ba:	f04f 0c0a 	mov.w	ip, #10
 800a6be:	4621      	mov	r1, r4
 800a6c0:	f811 3b01 	ldrb.w	r3, [r1], #1
 800a6c4:	3b30      	subs	r3, #48	; 0x30
 800a6c6:	2b09      	cmp	r3, #9
 800a6c8:	d94e      	bls.n	800a768 <_vfiprintf_r+0x1c4>
 800a6ca:	b1b0      	cbz	r0, 800a6fa <_vfiprintf_r+0x156>
 800a6cc:	9207      	str	r2, [sp, #28]
 800a6ce:	e014      	b.n	800a6fa <_vfiprintf_r+0x156>
 800a6d0:	eba0 0308 	sub.w	r3, r0, r8
 800a6d4:	fa09 f303 	lsl.w	r3, r9, r3
 800a6d8:	4313      	orrs	r3, r2
 800a6da:	9304      	str	r3, [sp, #16]
 800a6dc:	46a2      	mov	sl, r4
 800a6de:	e7d2      	b.n	800a686 <_vfiprintf_r+0xe2>
 800a6e0:	9b03      	ldr	r3, [sp, #12]
 800a6e2:	1d19      	adds	r1, r3, #4
 800a6e4:	681b      	ldr	r3, [r3, #0]
 800a6e6:	9103      	str	r1, [sp, #12]
 800a6e8:	2b00      	cmp	r3, #0
 800a6ea:	bfbb      	ittet	lt
 800a6ec:	425b      	neglt	r3, r3
 800a6ee:	f042 0202 	orrlt.w	r2, r2, #2
 800a6f2:	9307      	strge	r3, [sp, #28]
 800a6f4:	9307      	strlt	r3, [sp, #28]
 800a6f6:	bfb8      	it	lt
 800a6f8:	9204      	strlt	r2, [sp, #16]
 800a6fa:	7823      	ldrb	r3, [r4, #0]
 800a6fc:	2b2e      	cmp	r3, #46	; 0x2e
 800a6fe:	d10c      	bne.n	800a71a <_vfiprintf_r+0x176>
 800a700:	7863      	ldrb	r3, [r4, #1]
 800a702:	2b2a      	cmp	r3, #42	; 0x2a
 800a704:	d135      	bne.n	800a772 <_vfiprintf_r+0x1ce>
 800a706:	9b03      	ldr	r3, [sp, #12]
 800a708:	1d1a      	adds	r2, r3, #4
 800a70a:	681b      	ldr	r3, [r3, #0]
 800a70c:	9203      	str	r2, [sp, #12]
 800a70e:	2b00      	cmp	r3, #0
 800a710:	bfb8      	it	lt
 800a712:	f04f 33ff 	movlt.w	r3, #4294967295
 800a716:	3402      	adds	r4, #2
 800a718:	9305      	str	r3, [sp, #20]
 800a71a:	f8df a0e4 	ldr.w	sl, [pc, #228]	; 800a800 <_vfiprintf_r+0x25c>
 800a71e:	7821      	ldrb	r1, [r4, #0]
 800a720:	2203      	movs	r2, #3
 800a722:	4650      	mov	r0, sl
 800a724:	f7f5 fd64 	bl	80001f0 <memchr>
 800a728:	b140      	cbz	r0, 800a73c <_vfiprintf_r+0x198>
 800a72a:	2340      	movs	r3, #64	; 0x40
 800a72c:	eba0 000a 	sub.w	r0, r0, sl
 800a730:	fa03 f000 	lsl.w	r0, r3, r0
 800a734:	9b04      	ldr	r3, [sp, #16]
 800a736:	4303      	orrs	r3, r0
 800a738:	3401      	adds	r4, #1
 800a73a:	9304      	str	r3, [sp, #16]
 800a73c:	f814 1b01 	ldrb.w	r1, [r4], #1
 800a740:	482c      	ldr	r0, [pc, #176]	; (800a7f4 <_vfiprintf_r+0x250>)
 800a742:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 800a746:	2206      	movs	r2, #6
 800a748:	f7f5 fd52 	bl	80001f0 <memchr>
 800a74c:	2800      	cmp	r0, #0
 800a74e:	d03f      	beq.n	800a7d0 <_vfiprintf_r+0x22c>
 800a750:	4b29      	ldr	r3, [pc, #164]	; (800a7f8 <_vfiprintf_r+0x254>)
 800a752:	bb1b      	cbnz	r3, 800a79c <_vfiprintf_r+0x1f8>
 800a754:	9b03      	ldr	r3, [sp, #12]
 800a756:	3307      	adds	r3, #7
 800a758:	f023 0307 	bic.w	r3, r3, #7
 800a75c:	3308      	adds	r3, #8
 800a75e:	9303      	str	r3, [sp, #12]
 800a760:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800a762:	443b      	add	r3, r7
 800a764:	9309      	str	r3, [sp, #36]	; 0x24
 800a766:	e767      	b.n	800a638 <_vfiprintf_r+0x94>
 800a768:	fb0c 3202 	mla	r2, ip, r2, r3
 800a76c:	460c      	mov	r4, r1
 800a76e:	2001      	movs	r0, #1
 800a770:	e7a5      	b.n	800a6be <_vfiprintf_r+0x11a>
 800a772:	2300      	movs	r3, #0
 800a774:	3401      	adds	r4, #1
 800a776:	9305      	str	r3, [sp, #20]
 800a778:	4619      	mov	r1, r3
 800a77a:	f04f 0c0a 	mov.w	ip, #10
 800a77e:	4620      	mov	r0, r4
 800a780:	f810 2b01 	ldrb.w	r2, [r0], #1
 800a784:	3a30      	subs	r2, #48	; 0x30
 800a786:	2a09      	cmp	r2, #9
 800a788:	d903      	bls.n	800a792 <_vfiprintf_r+0x1ee>
 800a78a:	2b00      	cmp	r3, #0
 800a78c:	d0c5      	beq.n	800a71a <_vfiprintf_r+0x176>
 800a78e:	9105      	str	r1, [sp, #20]
 800a790:	e7c3      	b.n	800a71a <_vfiprintf_r+0x176>
 800a792:	fb0c 2101 	mla	r1, ip, r1, r2
 800a796:	4604      	mov	r4, r0
 800a798:	2301      	movs	r3, #1
 800a79a:	e7f0      	b.n	800a77e <_vfiprintf_r+0x1da>
 800a79c:	ab03      	add	r3, sp, #12
 800a79e:	9300      	str	r3, [sp, #0]
 800a7a0:	462a      	mov	r2, r5
 800a7a2:	4b16      	ldr	r3, [pc, #88]	; (800a7fc <_vfiprintf_r+0x258>)
 800a7a4:	a904      	add	r1, sp, #16
 800a7a6:	4630      	mov	r0, r6
 800a7a8:	f3af 8000 	nop.w
 800a7ac:	4607      	mov	r7, r0
 800a7ae:	1c78      	adds	r0, r7, #1
 800a7b0:	d1d6      	bne.n	800a760 <_vfiprintf_r+0x1bc>
 800a7b2:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 800a7b4:	07d9      	lsls	r1, r3, #31
 800a7b6:	d405      	bmi.n	800a7c4 <_vfiprintf_r+0x220>
 800a7b8:	89ab      	ldrh	r3, [r5, #12]
 800a7ba:	059a      	lsls	r2, r3, #22
 800a7bc:	d402      	bmi.n	800a7c4 <_vfiprintf_r+0x220>
 800a7be:	6da8      	ldr	r0, [r5, #88]	; 0x58
 800a7c0:	f7ff fcf7 	bl	800a1b2 <__retarget_lock_release_recursive>
 800a7c4:	89ab      	ldrh	r3, [r5, #12]
 800a7c6:	065b      	lsls	r3, r3, #25
 800a7c8:	f53f af12 	bmi.w	800a5f0 <_vfiprintf_r+0x4c>
 800a7cc:	9809      	ldr	r0, [sp, #36]	; 0x24
 800a7ce:	e711      	b.n	800a5f4 <_vfiprintf_r+0x50>
 800a7d0:	ab03      	add	r3, sp, #12
 800a7d2:	9300      	str	r3, [sp, #0]
 800a7d4:	462a      	mov	r2, r5
 800a7d6:	4b09      	ldr	r3, [pc, #36]	; (800a7fc <_vfiprintf_r+0x258>)
 800a7d8:	a904      	add	r1, sp, #16
 800a7da:	4630      	mov	r0, r6
 800a7dc:	f000 f880 	bl	800a8e0 <_printf_i>
 800a7e0:	e7e4      	b.n	800a7ac <_vfiprintf_r+0x208>
 800a7e2:	bf00      	nop
 800a7e4:	0800aee0 	.word	0x0800aee0
 800a7e8:	0800af00 	.word	0x0800af00
 800a7ec:	0800aec0 	.word	0x0800aec0
 800a7f0:	0800af20 	.word	0x0800af20
 800a7f4:	0800af2a 	.word	0x0800af2a
 800a7f8:	00000000 	.word	0x00000000
 800a7fc:	0800a57f 	.word	0x0800a57f
 800a800:	0800af26 	.word	0x0800af26

0800a804 <_printf_common>:
 800a804:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800a808:	4616      	mov	r6, r2
 800a80a:	4699      	mov	r9, r3
 800a80c:	688a      	ldr	r2, [r1, #8]
 800a80e:	690b      	ldr	r3, [r1, #16]
 800a810:	f8dd 8020 	ldr.w	r8, [sp, #32]
 800a814:	4293      	cmp	r3, r2
 800a816:	bfb8      	it	lt
 800a818:	4613      	movlt	r3, r2
 800a81a:	6033      	str	r3, [r6, #0]
 800a81c:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 800a820:	4607      	mov	r7, r0
 800a822:	460c      	mov	r4, r1
 800a824:	b10a      	cbz	r2, 800a82a <_printf_common+0x26>
 800a826:	3301      	adds	r3, #1
 800a828:	6033      	str	r3, [r6, #0]
 800a82a:	6823      	ldr	r3, [r4, #0]
 800a82c:	0699      	lsls	r1, r3, #26
 800a82e:	bf42      	ittt	mi
 800a830:	6833      	ldrmi	r3, [r6, #0]
 800a832:	3302      	addmi	r3, #2
 800a834:	6033      	strmi	r3, [r6, #0]
 800a836:	6825      	ldr	r5, [r4, #0]
 800a838:	f015 0506 	ands.w	r5, r5, #6
 800a83c:	d106      	bne.n	800a84c <_printf_common+0x48>
 800a83e:	f104 0a19 	add.w	sl, r4, #25
 800a842:	68e3      	ldr	r3, [r4, #12]
 800a844:	6832      	ldr	r2, [r6, #0]
 800a846:	1a9b      	subs	r3, r3, r2
 800a848:	42ab      	cmp	r3, r5
 800a84a:	dc26      	bgt.n	800a89a <_printf_common+0x96>
 800a84c:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 800a850:	1e13      	subs	r3, r2, #0
 800a852:	6822      	ldr	r2, [r4, #0]
 800a854:	bf18      	it	ne
 800a856:	2301      	movne	r3, #1
 800a858:	0692      	lsls	r2, r2, #26
 800a85a:	d42b      	bmi.n	800a8b4 <_printf_common+0xb0>
 800a85c:	f104 0243 	add.w	r2, r4, #67	; 0x43
 800a860:	4649      	mov	r1, r9
 800a862:	4638      	mov	r0, r7
 800a864:	47c0      	blx	r8
 800a866:	3001      	adds	r0, #1
 800a868:	d01e      	beq.n	800a8a8 <_printf_common+0xa4>
 800a86a:	6823      	ldr	r3, [r4, #0]
 800a86c:	68e5      	ldr	r5, [r4, #12]
 800a86e:	6832      	ldr	r2, [r6, #0]
 800a870:	f003 0306 	and.w	r3, r3, #6
 800a874:	2b04      	cmp	r3, #4
 800a876:	bf08      	it	eq
 800a878:	1aad      	subeq	r5, r5, r2
 800a87a:	68a3      	ldr	r3, [r4, #8]
 800a87c:	6922      	ldr	r2, [r4, #16]
 800a87e:	bf0c      	ite	eq
 800a880:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 800a884:	2500      	movne	r5, #0
 800a886:	4293      	cmp	r3, r2
 800a888:	bfc4      	itt	gt
 800a88a:	1a9b      	subgt	r3, r3, r2
 800a88c:	18ed      	addgt	r5, r5, r3
 800a88e:	2600      	movs	r6, #0
 800a890:	341a      	adds	r4, #26
 800a892:	42b5      	cmp	r5, r6
 800a894:	d11a      	bne.n	800a8cc <_printf_common+0xc8>
 800a896:	2000      	movs	r0, #0
 800a898:	e008      	b.n	800a8ac <_printf_common+0xa8>
 800a89a:	2301      	movs	r3, #1
 800a89c:	4652      	mov	r2, sl
 800a89e:	4649      	mov	r1, r9
 800a8a0:	4638      	mov	r0, r7
 800a8a2:	47c0      	blx	r8
 800a8a4:	3001      	adds	r0, #1
 800a8a6:	d103      	bne.n	800a8b0 <_printf_common+0xac>
 800a8a8:	f04f 30ff 	mov.w	r0, #4294967295
 800a8ac:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800a8b0:	3501      	adds	r5, #1
 800a8b2:	e7c6      	b.n	800a842 <_printf_common+0x3e>
 800a8b4:	18e1      	adds	r1, r4, r3
 800a8b6:	1c5a      	adds	r2, r3, #1
 800a8b8:	2030      	movs	r0, #48	; 0x30
 800a8ba:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 800a8be:	4422      	add	r2, r4
 800a8c0:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 800a8c4:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 800a8c8:	3302      	adds	r3, #2
 800a8ca:	e7c7      	b.n	800a85c <_printf_common+0x58>
 800a8cc:	2301      	movs	r3, #1
 800a8ce:	4622      	mov	r2, r4
 800a8d0:	4649      	mov	r1, r9
 800a8d2:	4638      	mov	r0, r7
 800a8d4:	47c0      	blx	r8
 800a8d6:	3001      	adds	r0, #1
 800a8d8:	d0e6      	beq.n	800a8a8 <_printf_common+0xa4>
 800a8da:	3601      	adds	r6, #1
 800a8dc:	e7d9      	b.n	800a892 <_printf_common+0x8e>
	...

0800a8e0 <_printf_i>:
 800a8e0:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 800a8e4:	7e0f      	ldrb	r7, [r1, #24]
 800a8e6:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 800a8e8:	2f78      	cmp	r7, #120	; 0x78
 800a8ea:	4691      	mov	r9, r2
 800a8ec:	4680      	mov	r8, r0
 800a8ee:	460c      	mov	r4, r1
 800a8f0:	469a      	mov	sl, r3
 800a8f2:	f101 0243 	add.w	r2, r1, #67	; 0x43
 800a8f6:	d807      	bhi.n	800a908 <_printf_i+0x28>
 800a8f8:	2f62      	cmp	r7, #98	; 0x62
 800a8fa:	d80a      	bhi.n	800a912 <_printf_i+0x32>
 800a8fc:	2f00      	cmp	r7, #0
 800a8fe:	f000 80d8 	beq.w	800aab2 <_printf_i+0x1d2>
 800a902:	2f58      	cmp	r7, #88	; 0x58
 800a904:	f000 80a3 	beq.w	800aa4e <_printf_i+0x16e>
 800a908:	f104 0542 	add.w	r5, r4, #66	; 0x42
 800a90c:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 800a910:	e03a      	b.n	800a988 <_printf_i+0xa8>
 800a912:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 800a916:	2b15      	cmp	r3, #21
 800a918:	d8f6      	bhi.n	800a908 <_printf_i+0x28>
 800a91a:	a101      	add	r1, pc, #4	; (adr r1, 800a920 <_printf_i+0x40>)
 800a91c:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 800a920:	0800a979 	.word	0x0800a979
 800a924:	0800a98d 	.word	0x0800a98d
 800a928:	0800a909 	.word	0x0800a909
 800a92c:	0800a909 	.word	0x0800a909
 800a930:	0800a909 	.word	0x0800a909
 800a934:	0800a909 	.word	0x0800a909
 800a938:	0800a98d 	.word	0x0800a98d
 800a93c:	0800a909 	.word	0x0800a909
 800a940:	0800a909 	.word	0x0800a909
 800a944:	0800a909 	.word	0x0800a909
 800a948:	0800a909 	.word	0x0800a909
 800a94c:	0800aa99 	.word	0x0800aa99
 800a950:	0800a9bd 	.word	0x0800a9bd
 800a954:	0800aa7b 	.word	0x0800aa7b
 800a958:	0800a909 	.word	0x0800a909
 800a95c:	0800a909 	.word	0x0800a909
 800a960:	0800aabb 	.word	0x0800aabb
 800a964:	0800a909 	.word	0x0800a909
 800a968:	0800a9bd 	.word	0x0800a9bd
 800a96c:	0800a909 	.word	0x0800a909
 800a970:	0800a909 	.word	0x0800a909
 800a974:	0800aa83 	.word	0x0800aa83
 800a978:	682b      	ldr	r3, [r5, #0]
 800a97a:	1d1a      	adds	r2, r3, #4
 800a97c:	681b      	ldr	r3, [r3, #0]
 800a97e:	602a      	str	r2, [r5, #0]
 800a980:	f104 0542 	add.w	r5, r4, #66	; 0x42
 800a984:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 800a988:	2301      	movs	r3, #1
 800a98a:	e0a3      	b.n	800aad4 <_printf_i+0x1f4>
 800a98c:	6820      	ldr	r0, [r4, #0]
 800a98e:	6829      	ldr	r1, [r5, #0]
 800a990:	0606      	lsls	r6, r0, #24
 800a992:	f101 0304 	add.w	r3, r1, #4
 800a996:	d50a      	bpl.n	800a9ae <_printf_i+0xce>
 800a998:	680e      	ldr	r6, [r1, #0]
 800a99a:	602b      	str	r3, [r5, #0]
 800a99c:	2e00      	cmp	r6, #0
 800a99e:	da03      	bge.n	800a9a8 <_printf_i+0xc8>
 800a9a0:	232d      	movs	r3, #45	; 0x2d
 800a9a2:	4276      	negs	r6, r6
 800a9a4:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800a9a8:	485e      	ldr	r0, [pc, #376]	; (800ab24 <_printf_i+0x244>)
 800a9aa:	230a      	movs	r3, #10
 800a9ac:	e019      	b.n	800a9e2 <_printf_i+0x102>
 800a9ae:	680e      	ldr	r6, [r1, #0]
 800a9b0:	602b      	str	r3, [r5, #0]
 800a9b2:	f010 0f40 	tst.w	r0, #64	; 0x40
 800a9b6:	bf18      	it	ne
 800a9b8:	b236      	sxthne	r6, r6
 800a9ba:	e7ef      	b.n	800a99c <_printf_i+0xbc>
 800a9bc:	682b      	ldr	r3, [r5, #0]
 800a9be:	6820      	ldr	r0, [r4, #0]
 800a9c0:	1d19      	adds	r1, r3, #4
 800a9c2:	6029      	str	r1, [r5, #0]
 800a9c4:	0601      	lsls	r1, r0, #24
 800a9c6:	d501      	bpl.n	800a9cc <_printf_i+0xec>
 800a9c8:	681e      	ldr	r6, [r3, #0]
 800a9ca:	e002      	b.n	800a9d2 <_printf_i+0xf2>
 800a9cc:	0646      	lsls	r6, r0, #25
 800a9ce:	d5fb      	bpl.n	800a9c8 <_printf_i+0xe8>
 800a9d0:	881e      	ldrh	r6, [r3, #0]
 800a9d2:	4854      	ldr	r0, [pc, #336]	; (800ab24 <_printf_i+0x244>)
 800a9d4:	2f6f      	cmp	r7, #111	; 0x6f
 800a9d6:	bf0c      	ite	eq
 800a9d8:	2308      	moveq	r3, #8
 800a9da:	230a      	movne	r3, #10
 800a9dc:	2100      	movs	r1, #0
 800a9de:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 800a9e2:	6865      	ldr	r5, [r4, #4]
 800a9e4:	60a5      	str	r5, [r4, #8]
 800a9e6:	2d00      	cmp	r5, #0
 800a9e8:	bfa2      	ittt	ge
 800a9ea:	6821      	ldrge	r1, [r4, #0]
 800a9ec:	f021 0104 	bicge.w	r1, r1, #4
 800a9f0:	6021      	strge	r1, [r4, #0]
 800a9f2:	b90e      	cbnz	r6, 800a9f8 <_printf_i+0x118>
 800a9f4:	2d00      	cmp	r5, #0
 800a9f6:	d04d      	beq.n	800aa94 <_printf_i+0x1b4>
 800a9f8:	4615      	mov	r5, r2
 800a9fa:	fbb6 f1f3 	udiv	r1, r6, r3
 800a9fe:	fb03 6711 	mls	r7, r3, r1, r6
 800aa02:	5dc7      	ldrb	r7, [r0, r7]
 800aa04:	f805 7d01 	strb.w	r7, [r5, #-1]!
 800aa08:	4637      	mov	r7, r6
 800aa0a:	42bb      	cmp	r3, r7
 800aa0c:	460e      	mov	r6, r1
 800aa0e:	d9f4      	bls.n	800a9fa <_printf_i+0x11a>
 800aa10:	2b08      	cmp	r3, #8
 800aa12:	d10b      	bne.n	800aa2c <_printf_i+0x14c>
 800aa14:	6823      	ldr	r3, [r4, #0]
 800aa16:	07de      	lsls	r6, r3, #31
 800aa18:	d508      	bpl.n	800aa2c <_printf_i+0x14c>
 800aa1a:	6923      	ldr	r3, [r4, #16]
 800aa1c:	6861      	ldr	r1, [r4, #4]
 800aa1e:	4299      	cmp	r1, r3
 800aa20:	bfde      	ittt	le
 800aa22:	2330      	movle	r3, #48	; 0x30
 800aa24:	f805 3c01 	strble.w	r3, [r5, #-1]
 800aa28:	f105 35ff 	addle.w	r5, r5, #4294967295
 800aa2c:	1b52      	subs	r2, r2, r5
 800aa2e:	6122      	str	r2, [r4, #16]
 800aa30:	f8cd a000 	str.w	sl, [sp]
 800aa34:	464b      	mov	r3, r9
 800aa36:	aa03      	add	r2, sp, #12
 800aa38:	4621      	mov	r1, r4
 800aa3a:	4640      	mov	r0, r8
 800aa3c:	f7ff fee2 	bl	800a804 <_printf_common>
 800aa40:	3001      	adds	r0, #1
 800aa42:	d14c      	bne.n	800aade <_printf_i+0x1fe>
 800aa44:	f04f 30ff 	mov.w	r0, #4294967295
 800aa48:	b004      	add	sp, #16
 800aa4a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800aa4e:	4835      	ldr	r0, [pc, #212]	; (800ab24 <_printf_i+0x244>)
 800aa50:	f881 7045 	strb.w	r7, [r1, #69]	; 0x45
 800aa54:	6829      	ldr	r1, [r5, #0]
 800aa56:	6823      	ldr	r3, [r4, #0]
 800aa58:	f851 6b04 	ldr.w	r6, [r1], #4
 800aa5c:	6029      	str	r1, [r5, #0]
 800aa5e:	061d      	lsls	r5, r3, #24
 800aa60:	d514      	bpl.n	800aa8c <_printf_i+0x1ac>
 800aa62:	07df      	lsls	r7, r3, #31
 800aa64:	bf44      	itt	mi
 800aa66:	f043 0320 	orrmi.w	r3, r3, #32
 800aa6a:	6023      	strmi	r3, [r4, #0]
 800aa6c:	b91e      	cbnz	r6, 800aa76 <_printf_i+0x196>
 800aa6e:	6823      	ldr	r3, [r4, #0]
 800aa70:	f023 0320 	bic.w	r3, r3, #32
 800aa74:	6023      	str	r3, [r4, #0]
 800aa76:	2310      	movs	r3, #16
 800aa78:	e7b0      	b.n	800a9dc <_printf_i+0xfc>
 800aa7a:	6823      	ldr	r3, [r4, #0]
 800aa7c:	f043 0320 	orr.w	r3, r3, #32
 800aa80:	6023      	str	r3, [r4, #0]
 800aa82:	2378      	movs	r3, #120	; 0x78
 800aa84:	4828      	ldr	r0, [pc, #160]	; (800ab28 <_printf_i+0x248>)
 800aa86:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 800aa8a:	e7e3      	b.n	800aa54 <_printf_i+0x174>
 800aa8c:	0659      	lsls	r1, r3, #25
 800aa8e:	bf48      	it	mi
 800aa90:	b2b6      	uxthmi	r6, r6
 800aa92:	e7e6      	b.n	800aa62 <_printf_i+0x182>
 800aa94:	4615      	mov	r5, r2
 800aa96:	e7bb      	b.n	800aa10 <_printf_i+0x130>
 800aa98:	682b      	ldr	r3, [r5, #0]
 800aa9a:	6826      	ldr	r6, [r4, #0]
 800aa9c:	6961      	ldr	r1, [r4, #20]
 800aa9e:	1d18      	adds	r0, r3, #4
 800aaa0:	6028      	str	r0, [r5, #0]
 800aaa2:	0635      	lsls	r5, r6, #24
 800aaa4:	681b      	ldr	r3, [r3, #0]
 800aaa6:	d501      	bpl.n	800aaac <_printf_i+0x1cc>
 800aaa8:	6019      	str	r1, [r3, #0]
 800aaaa:	e002      	b.n	800aab2 <_printf_i+0x1d2>
 800aaac:	0670      	lsls	r0, r6, #25
 800aaae:	d5fb      	bpl.n	800aaa8 <_printf_i+0x1c8>
 800aab0:	8019      	strh	r1, [r3, #0]
 800aab2:	2300      	movs	r3, #0
 800aab4:	6123      	str	r3, [r4, #16]
 800aab6:	4615      	mov	r5, r2
 800aab8:	e7ba      	b.n	800aa30 <_printf_i+0x150>
 800aaba:	682b      	ldr	r3, [r5, #0]
 800aabc:	1d1a      	adds	r2, r3, #4
 800aabe:	602a      	str	r2, [r5, #0]
 800aac0:	681d      	ldr	r5, [r3, #0]
 800aac2:	6862      	ldr	r2, [r4, #4]
 800aac4:	2100      	movs	r1, #0
 800aac6:	4628      	mov	r0, r5
 800aac8:	f7f5 fb92 	bl	80001f0 <memchr>
 800aacc:	b108      	cbz	r0, 800aad2 <_printf_i+0x1f2>
 800aace:	1b40      	subs	r0, r0, r5
 800aad0:	6060      	str	r0, [r4, #4]
 800aad2:	6863      	ldr	r3, [r4, #4]
 800aad4:	6123      	str	r3, [r4, #16]
 800aad6:	2300      	movs	r3, #0
 800aad8:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800aadc:	e7a8      	b.n	800aa30 <_printf_i+0x150>
 800aade:	6923      	ldr	r3, [r4, #16]
 800aae0:	462a      	mov	r2, r5
 800aae2:	4649      	mov	r1, r9
 800aae4:	4640      	mov	r0, r8
 800aae6:	47d0      	blx	sl
 800aae8:	3001      	adds	r0, #1
 800aaea:	d0ab      	beq.n	800aa44 <_printf_i+0x164>
 800aaec:	6823      	ldr	r3, [r4, #0]
 800aaee:	079b      	lsls	r3, r3, #30
 800aaf0:	d413      	bmi.n	800ab1a <_printf_i+0x23a>
 800aaf2:	68e0      	ldr	r0, [r4, #12]
 800aaf4:	9b03      	ldr	r3, [sp, #12]
 800aaf6:	4298      	cmp	r0, r3
 800aaf8:	bfb8      	it	lt
 800aafa:	4618      	movlt	r0, r3
 800aafc:	e7a4      	b.n	800aa48 <_printf_i+0x168>
 800aafe:	2301      	movs	r3, #1
 800ab00:	4632      	mov	r2, r6
 800ab02:	4649      	mov	r1, r9
 800ab04:	4640      	mov	r0, r8
 800ab06:	47d0      	blx	sl
 800ab08:	3001      	adds	r0, #1
 800ab0a:	d09b      	beq.n	800aa44 <_printf_i+0x164>
 800ab0c:	3501      	adds	r5, #1
 800ab0e:	68e3      	ldr	r3, [r4, #12]
 800ab10:	9903      	ldr	r1, [sp, #12]
 800ab12:	1a5b      	subs	r3, r3, r1
 800ab14:	42ab      	cmp	r3, r5
 800ab16:	dcf2      	bgt.n	800aafe <_printf_i+0x21e>
 800ab18:	e7eb      	b.n	800aaf2 <_printf_i+0x212>
 800ab1a:	2500      	movs	r5, #0
 800ab1c:	f104 0619 	add.w	r6, r4, #25
 800ab20:	e7f5      	b.n	800ab0e <_printf_i+0x22e>
 800ab22:	bf00      	nop
 800ab24:	0800af31 	.word	0x0800af31
 800ab28:	0800af42 	.word	0x0800af42

0800ab2c <__sread>:
 800ab2c:	b510      	push	{r4, lr}
 800ab2e:	460c      	mov	r4, r1
 800ab30:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800ab34:	f000 f8de 	bl	800acf4 <_read_r>
 800ab38:	2800      	cmp	r0, #0
 800ab3a:	bfab      	itete	ge
 800ab3c:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 800ab3e:	89a3      	ldrhlt	r3, [r4, #12]
 800ab40:	181b      	addge	r3, r3, r0
 800ab42:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 800ab46:	bfac      	ite	ge
 800ab48:	6563      	strge	r3, [r4, #84]	; 0x54
 800ab4a:	81a3      	strhlt	r3, [r4, #12]
 800ab4c:	bd10      	pop	{r4, pc}

0800ab4e <__swrite>:
 800ab4e:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800ab52:	461f      	mov	r7, r3
 800ab54:	898b      	ldrh	r3, [r1, #12]
 800ab56:	05db      	lsls	r3, r3, #23
 800ab58:	4605      	mov	r5, r0
 800ab5a:	460c      	mov	r4, r1
 800ab5c:	4616      	mov	r6, r2
 800ab5e:	d505      	bpl.n	800ab6c <__swrite+0x1e>
 800ab60:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800ab64:	2302      	movs	r3, #2
 800ab66:	2200      	movs	r2, #0
 800ab68:	f000 f868 	bl	800ac3c <_lseek_r>
 800ab6c:	89a3      	ldrh	r3, [r4, #12]
 800ab6e:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800ab72:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 800ab76:	81a3      	strh	r3, [r4, #12]
 800ab78:	4632      	mov	r2, r6
 800ab7a:	463b      	mov	r3, r7
 800ab7c:	4628      	mov	r0, r5
 800ab7e:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800ab82:	f000 b817 	b.w	800abb4 <_write_r>

0800ab86 <__sseek>:
 800ab86:	b510      	push	{r4, lr}
 800ab88:	460c      	mov	r4, r1
 800ab8a:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800ab8e:	f000 f855 	bl	800ac3c <_lseek_r>
 800ab92:	1c43      	adds	r3, r0, #1
 800ab94:	89a3      	ldrh	r3, [r4, #12]
 800ab96:	bf15      	itete	ne
 800ab98:	6560      	strne	r0, [r4, #84]	; 0x54
 800ab9a:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 800ab9e:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 800aba2:	81a3      	strheq	r3, [r4, #12]
 800aba4:	bf18      	it	ne
 800aba6:	81a3      	strhne	r3, [r4, #12]
 800aba8:	bd10      	pop	{r4, pc}

0800abaa <__sclose>:
 800abaa:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800abae:	f000 b813 	b.w	800abd8 <_close_r>
	...

0800abb4 <_write_r>:
 800abb4:	b538      	push	{r3, r4, r5, lr}
 800abb6:	4d07      	ldr	r5, [pc, #28]	; (800abd4 <_write_r+0x20>)
 800abb8:	4604      	mov	r4, r0
 800abba:	4608      	mov	r0, r1
 800abbc:	4611      	mov	r1, r2
 800abbe:	2200      	movs	r2, #0
 800abc0:	602a      	str	r2, [r5, #0]
 800abc2:	461a      	mov	r2, r3
 800abc4:	f7f5 fd00 	bl	80005c8 <_write>
 800abc8:	1c43      	adds	r3, r0, #1
 800abca:	d102      	bne.n	800abd2 <_write_r+0x1e>
 800abcc:	682b      	ldr	r3, [r5, #0]
 800abce:	b103      	cbz	r3, 800abd2 <_write_r+0x1e>
 800abd0:	6023      	str	r3, [r4, #0]
 800abd2:	bd38      	pop	{r3, r4, r5, pc}
 800abd4:	200093e8 	.word	0x200093e8

0800abd8 <_close_r>:
 800abd8:	b538      	push	{r3, r4, r5, lr}
 800abda:	4d06      	ldr	r5, [pc, #24]	; (800abf4 <_close_r+0x1c>)
 800abdc:	2300      	movs	r3, #0
 800abde:	4604      	mov	r4, r0
 800abe0:	4608      	mov	r0, r1
 800abe2:	602b      	str	r3, [r5, #0]
 800abe4:	f7f6 fcf3 	bl	80015ce <_close>
 800abe8:	1c43      	adds	r3, r0, #1
 800abea:	d102      	bne.n	800abf2 <_close_r+0x1a>
 800abec:	682b      	ldr	r3, [r5, #0]
 800abee:	b103      	cbz	r3, 800abf2 <_close_r+0x1a>
 800abf0:	6023      	str	r3, [r4, #0]
 800abf2:	bd38      	pop	{r3, r4, r5, pc}
 800abf4:	200093e8 	.word	0x200093e8

0800abf8 <_fstat_r>:
 800abf8:	b538      	push	{r3, r4, r5, lr}
 800abfa:	4d07      	ldr	r5, [pc, #28]	; (800ac18 <_fstat_r+0x20>)
 800abfc:	2300      	movs	r3, #0
 800abfe:	4604      	mov	r4, r0
 800ac00:	4608      	mov	r0, r1
 800ac02:	4611      	mov	r1, r2
 800ac04:	602b      	str	r3, [r5, #0]
 800ac06:	f7f6 fcee 	bl	80015e6 <_fstat>
 800ac0a:	1c43      	adds	r3, r0, #1
 800ac0c:	d102      	bne.n	800ac14 <_fstat_r+0x1c>
 800ac0e:	682b      	ldr	r3, [r5, #0]
 800ac10:	b103      	cbz	r3, 800ac14 <_fstat_r+0x1c>
 800ac12:	6023      	str	r3, [r4, #0]
 800ac14:	bd38      	pop	{r3, r4, r5, pc}
 800ac16:	bf00      	nop
 800ac18:	200093e8 	.word	0x200093e8

0800ac1c <_isatty_r>:
 800ac1c:	b538      	push	{r3, r4, r5, lr}
 800ac1e:	4d06      	ldr	r5, [pc, #24]	; (800ac38 <_isatty_r+0x1c>)
 800ac20:	2300      	movs	r3, #0
 800ac22:	4604      	mov	r4, r0
 800ac24:	4608      	mov	r0, r1
 800ac26:	602b      	str	r3, [r5, #0]
 800ac28:	f7f6 fced 	bl	8001606 <_isatty>
 800ac2c:	1c43      	adds	r3, r0, #1
 800ac2e:	d102      	bne.n	800ac36 <_isatty_r+0x1a>
 800ac30:	682b      	ldr	r3, [r5, #0]
 800ac32:	b103      	cbz	r3, 800ac36 <_isatty_r+0x1a>
 800ac34:	6023      	str	r3, [r4, #0]
 800ac36:	bd38      	pop	{r3, r4, r5, pc}
 800ac38:	200093e8 	.word	0x200093e8

0800ac3c <_lseek_r>:
 800ac3c:	b538      	push	{r3, r4, r5, lr}
 800ac3e:	4d07      	ldr	r5, [pc, #28]	; (800ac5c <_lseek_r+0x20>)
 800ac40:	4604      	mov	r4, r0
 800ac42:	4608      	mov	r0, r1
 800ac44:	4611      	mov	r1, r2
 800ac46:	2200      	movs	r2, #0
 800ac48:	602a      	str	r2, [r5, #0]
 800ac4a:	461a      	mov	r2, r3
 800ac4c:	f7f6 fce6 	bl	800161c <_lseek>
 800ac50:	1c43      	adds	r3, r0, #1
 800ac52:	d102      	bne.n	800ac5a <_lseek_r+0x1e>
 800ac54:	682b      	ldr	r3, [r5, #0]
 800ac56:	b103      	cbz	r3, 800ac5a <_lseek_r+0x1e>
 800ac58:	6023      	str	r3, [r4, #0]
 800ac5a:	bd38      	pop	{r3, r4, r5, pc}
 800ac5c:	200093e8 	.word	0x200093e8

0800ac60 <memmove>:
 800ac60:	4288      	cmp	r0, r1
 800ac62:	b510      	push	{r4, lr}
 800ac64:	eb01 0402 	add.w	r4, r1, r2
 800ac68:	d902      	bls.n	800ac70 <memmove+0x10>
 800ac6a:	4284      	cmp	r4, r0
 800ac6c:	4623      	mov	r3, r4
 800ac6e:	d807      	bhi.n	800ac80 <memmove+0x20>
 800ac70:	1e43      	subs	r3, r0, #1
 800ac72:	42a1      	cmp	r1, r4
 800ac74:	d008      	beq.n	800ac88 <memmove+0x28>
 800ac76:	f811 2b01 	ldrb.w	r2, [r1], #1
 800ac7a:	f803 2f01 	strb.w	r2, [r3, #1]!
 800ac7e:	e7f8      	b.n	800ac72 <memmove+0x12>
 800ac80:	4402      	add	r2, r0
 800ac82:	4601      	mov	r1, r0
 800ac84:	428a      	cmp	r2, r1
 800ac86:	d100      	bne.n	800ac8a <memmove+0x2a>
 800ac88:	bd10      	pop	{r4, pc}
 800ac8a:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 800ac8e:	f802 4d01 	strb.w	r4, [r2, #-1]!
 800ac92:	e7f7      	b.n	800ac84 <memmove+0x24>

0800ac94 <_realloc_r>:
 800ac94:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800ac98:	4680      	mov	r8, r0
 800ac9a:	4614      	mov	r4, r2
 800ac9c:	460e      	mov	r6, r1
 800ac9e:	b921      	cbnz	r1, 800acaa <_realloc_r+0x16>
 800aca0:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800aca4:	4611      	mov	r1, r2
 800aca6:	f7fe bed9 	b.w	8009a5c <_malloc_r>
 800acaa:	b92a      	cbnz	r2, 800acb8 <_realloc_r+0x24>
 800acac:	f7fe fe6a 	bl	8009984 <_free_r>
 800acb0:	4625      	mov	r5, r4
 800acb2:	4628      	mov	r0, r5
 800acb4:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800acb8:	f000 f82e 	bl	800ad18 <_malloc_usable_size_r>
 800acbc:	4284      	cmp	r4, r0
 800acbe:	4607      	mov	r7, r0
 800acc0:	d802      	bhi.n	800acc8 <_realloc_r+0x34>
 800acc2:	ebb4 0f50 	cmp.w	r4, r0, lsr #1
 800acc6:	d812      	bhi.n	800acee <_realloc_r+0x5a>
 800acc8:	4621      	mov	r1, r4
 800acca:	4640      	mov	r0, r8
 800accc:	f7fe fec6 	bl	8009a5c <_malloc_r>
 800acd0:	4605      	mov	r5, r0
 800acd2:	2800      	cmp	r0, #0
 800acd4:	d0ed      	beq.n	800acb2 <_realloc_r+0x1e>
 800acd6:	42bc      	cmp	r4, r7
 800acd8:	4622      	mov	r2, r4
 800acda:	4631      	mov	r1, r6
 800acdc:	bf28      	it	cs
 800acde:	463a      	movcs	r2, r7
 800ace0:	f7fe fe3a 	bl	8009958 <memcpy>
 800ace4:	4631      	mov	r1, r6
 800ace6:	4640      	mov	r0, r8
 800ace8:	f7fe fe4c 	bl	8009984 <_free_r>
 800acec:	e7e1      	b.n	800acb2 <_realloc_r+0x1e>
 800acee:	4635      	mov	r5, r6
 800acf0:	e7df      	b.n	800acb2 <_realloc_r+0x1e>
	...

0800acf4 <_read_r>:
 800acf4:	b538      	push	{r3, r4, r5, lr}
 800acf6:	4d07      	ldr	r5, [pc, #28]	; (800ad14 <_read_r+0x20>)
 800acf8:	4604      	mov	r4, r0
 800acfa:	4608      	mov	r0, r1
 800acfc:	4611      	mov	r1, r2
 800acfe:	2200      	movs	r2, #0
 800ad00:	602a      	str	r2, [r5, #0]
 800ad02:	461a      	mov	r2, r3
 800ad04:	f7f6 fc46 	bl	8001594 <_read>
 800ad08:	1c43      	adds	r3, r0, #1
 800ad0a:	d102      	bne.n	800ad12 <_read_r+0x1e>
 800ad0c:	682b      	ldr	r3, [r5, #0]
 800ad0e:	b103      	cbz	r3, 800ad12 <_read_r+0x1e>
 800ad10:	6023      	str	r3, [r4, #0]
 800ad12:	bd38      	pop	{r3, r4, r5, pc}
 800ad14:	200093e8 	.word	0x200093e8

0800ad18 <_malloc_usable_size_r>:
 800ad18:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800ad1c:	1f18      	subs	r0, r3, #4
 800ad1e:	2b00      	cmp	r3, #0
 800ad20:	bfbc      	itt	lt
 800ad22:	580b      	ldrlt	r3, [r1, r0]
 800ad24:	18c0      	addlt	r0, r0, r3
 800ad26:	4770      	bx	lr

0800ad28 <_init>:
 800ad28:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800ad2a:	bf00      	nop
 800ad2c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800ad2e:	bc08      	pop	{r3}
 800ad30:	469e      	mov	lr, r3
 800ad32:	4770      	bx	lr

0800ad34 <_fini>:
 800ad34:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800ad36:	bf00      	nop
 800ad38:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800ad3a:	bc08      	pop	{r3}
 800ad3c:	469e      	mov	lr, r3
 800ad3e:	4770      	bx	lr
