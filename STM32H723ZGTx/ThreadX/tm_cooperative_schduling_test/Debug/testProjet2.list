
testProjet2.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000002cc  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00008728  080002d0  080002d0  000102d0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000214  080089f8  080089f8  000189f8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM          00000008  08008c0c  08008c0c  00018c0c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  4 .init_array   00000004  08008c14  08008c14  00018c14  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  5 .fini_array   00000004  08008c18  08008c18  00018c18  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  6 .data         00000078  24000000  08008c1c  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .RxDecripSection 00000060  24000078  08008c94  00020078  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .TxDecripSection 00000060  240000d8  08008cf4  000200d8  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          000065bc  24000138  08008d54  00020138  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  240066f4  08008d54  000266f4  2**0
                  ALLOC
 11 .ARM.attributes 0000002e  00000000  00000000  00020138  2**0
                  CONTENTS, READONLY
 12 .debug_info   0001dc0b  00000000  00000000  00020166  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00004658  00000000  00000000  0003dd71  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00001150  00000000  00000000  000423d0  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 00000e90  00000000  00000000  00043520  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  0003735a  00000000  00000000  000443b0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   0001b08d  00000000  00000000  0007b70a  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    0014ed10  00000000  00000000  00096797  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000050  00000000  00000000  001e54a7  2**0
                  CONTENTS, READONLY
 20 .debug_frame  000045c0  00000000  00000000  001e54f8  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080002d0 <__do_global_dtors_aux>:
 80002d0:	b510      	push	{r4, lr}
 80002d2:	4c05      	ldr	r4, [pc, #20]	; (80002e8 <__do_global_dtors_aux+0x18>)
 80002d4:	7823      	ldrb	r3, [r4, #0]
 80002d6:	b933      	cbnz	r3, 80002e6 <__do_global_dtors_aux+0x16>
 80002d8:	4b04      	ldr	r3, [pc, #16]	; (80002ec <__do_global_dtors_aux+0x1c>)
 80002da:	b113      	cbz	r3, 80002e2 <__do_global_dtors_aux+0x12>
 80002dc:	4804      	ldr	r0, [pc, #16]	; (80002f0 <__do_global_dtors_aux+0x20>)
 80002de:	f3af 8000 	nop.w
 80002e2:	2301      	movs	r3, #1
 80002e4:	7023      	strb	r3, [r4, #0]
 80002e6:	bd10      	pop	{r4, pc}
 80002e8:	24000138 	.word	0x24000138
 80002ec:	00000000 	.word	0x00000000
 80002f0:	080089e0 	.word	0x080089e0

080002f4 <frame_dummy>:
 80002f4:	b508      	push	{r3, lr}
 80002f6:	4b03      	ldr	r3, [pc, #12]	; (8000304 <frame_dummy+0x10>)
 80002f8:	b11b      	cbz	r3, 8000302 <frame_dummy+0xe>
 80002fa:	4903      	ldr	r1, [pc, #12]	; (8000308 <frame_dummy+0x14>)
 80002fc:	4803      	ldr	r0, [pc, #12]	; (800030c <frame_dummy+0x18>)
 80002fe:	f3af 8000 	nop.w
 8000302:	bd08      	pop	{r3, pc}
 8000304:	00000000 	.word	0x00000000
 8000308:	2400013c 	.word	0x2400013c
 800030c:	080089e0 	.word	0x080089e0

08000310 <_tx_initialize_low_level>:
    .thumb_func
_tx_initialize_low_level:
@
@    /* Disable interrupts during ThreadX initialization.  */
@
    CPSID   i
 8000310:	b672      	cpsid	i
    STR     r1, [r0]                                @ Setup first unused memory pointer
#endif
@
@    /* Setup Vector Table Offset Register.  */
@
    MOV     r0, #0xE000E000                         @ Build address of NVIC registers
 8000312:	f04f 20e0 	mov.w	r0, #3758153728	; 0xe000e000
    LDR     r1, =g_pfnVectors                           @ Pickup address of vector table
 8000316:	4919      	ldr	r1, [pc, #100]	; (800037c <__tx_DBGHandler+0x4>)
    STR     r1, [r0, #0xD08]                        @ Set vector table address
 8000318:	f8c0 1d08 	str.w	r1, [r0, #3336]	; 0xd08
@
@    /* Set system stack pointer from vector value.  */
@
    LDR     r0, =_tx_thread_system_stack_ptr        @ Build address of system stack pointer
 800031c:	4818      	ldr	r0, [pc, #96]	; (8000380 <__tx_DBGHandler+0x8>)
    LDR     r1, =g_pfnVectors                           @ Pickup address of vector table
 800031e:	4917      	ldr	r1, [pc, #92]	; (800037c <__tx_DBGHandler+0x4>)
    LDR     r1, [r1]                                @ Pickup reset stack pointer
 8000320:	6809      	ldr	r1, [r1, #0]
    STR     r1, [r0]                                @ Save system stack pointer
 8000322:	6001      	str	r1, [r0, #0]
@
@    /* Enable the cycle count register.  */
@
    LDR     r0, =0xE0001000                         @ Build address of DWT register
 8000324:	4817      	ldr	r0, [pc, #92]	; (8000384 <__tx_DBGHandler+0xc>)
    LDR     r1, [r0]                                @ Pickup the current value
 8000326:	6801      	ldr	r1, [r0, #0]
    ORR     r1, r1, #1                              @ Set the CYCCNTENA bit
 8000328:	f041 0101 	orr.w	r1, r1, #1
    STR     r1, [r0]                                @ Enable the cycle count register
 800032c:	6001      	str	r1, [r0, #0]
@
@    /* Configure SysTick for 100Hz clock, or 16384 cycles if no reference.  */
@
    MOV     r0, #0xE000E000                         @ Build address of NVIC registers
 800032e:	f04f 20e0 	mov.w	r0, #3758153728	; 0xe000e000
    LDR     r1, =SYSTICK_CYCLES
 8000332:	4915      	ldr	r1, [pc, #84]	; (8000388 <__tx_DBGHandler+0x10>)
    STR     r1, [r0, #0x14]                         @ Setup SysTick Reload Value
 8000334:	6141      	str	r1, [r0, #20]
    MOV     r1, #0x7                                @ Build SysTick Control Enable Value
 8000336:	f04f 0107 	mov.w	r1, #7
    STR     r1, [r0, #0x10]                         @ Setup SysTick Control
 800033a:	6101      	str	r1, [r0, #16]
@
@    /* Configure handler priorities.  */
@
    LDR     r1, =0x00000000                         @ Rsrv, UsgF, BusF, MemM
 800033c:	f04f 0100 	mov.w	r1, #0
    STR     r1, [r0, #0xD18]                        @ Setup System Handlers 4-7 Priority Registers
 8000340:	f8c0 1d18 	str.w	r1, [r0, #3352]	; 0xd18

    LDR     r1, =0xFF000000                         @ SVCl, Rsrv, Rsrv, Rsrv
 8000344:	f04f 417f 	mov.w	r1, #4278190080	; 0xff000000
    STR     r1, [r0, #0xD1C]                        @ Setup System Handlers 8-11 Priority Registers
 8000348:	f8c0 1d1c 	str.w	r1, [r0, #3356]	; 0xd1c
                                                    @ Note: SVC must be lowest priority, which is 0xFF

    LDR     r1, =0x40FF0000                         @ SysT, PnSV, Rsrv, DbgM
 800034c:	490f      	ldr	r1, [pc, #60]	; (800038c <__tx_DBGHandler+0x14>)
    STR     r1, [r0, #0xD20]                        @ Setup System Handlers 12-15 Priority Registers
 800034e:	f8c0 1d20 	str.w	r1, [r0, #3360]	; 0xd20
                                                    @ Note: PnSV must be lowest priority, which is 0xFF
@
@    /* Return to caller.  */
@
    BX      lr
 8000352:	4770      	bx	lr

08000354 <__tx_BadHandler>:
@/* Define shells for each of the unused vectors.  */
@
    .global  __tx_BadHandler
    .thumb_func
__tx_BadHandler:
    B       __tx_BadHandler
 8000354:	f7ff bffe 	b.w	8000354 <__tx_BadHandler>

08000358 <__tx_HardfaultHandler>:
@ /* added to catch the hardfault */

    .global  __tx_HardfaultHandler
    .thumb_func
__tx_HardfaultHandler:
    B       __tx_HardfaultHandler
 8000358:	f7ff bffe 	b.w	8000358 <__tx_HardfaultHandler>

0800035c <__tx_SVCallHandler>:
@ /* added to catch the SVC */

    .global  __tx_SVCallHandler
    .thumb_func
__tx_SVCallHandler:
    B       __tx_SVCallHandler
 800035c:	f7ff bffe 	b.w	800035c <__tx_SVCallHandler>

08000360 <__tx_IntHandler>:
    .global  __tx_IntHandler
    .thumb_func
__tx_IntHandler:
@ VOID InterruptHandler (VOID)
@ {
    PUSH    {r0, lr}
 8000360:	b501      	push	{r0, lr}
@    /* BL <your C Function>.... */

#ifdef TX_EXECUTION_PROFILE_ENABLE
    BL      _tx_execution_isr_exit              @ Call the ISR exit function
#endif
    POP     {r0, lr}
 8000362:	e8bd 4001 	ldmia.w	sp!, {r0, lr}
    BX      LR
 8000366:	4770      	bx	lr

08000368 <SysTick_Handler>:
    .thumb_func
SysTick_Handler:
@ VOID TimerInterruptHandler (VOID)
@ {
@
    PUSH    {r0, lr}
 8000368:	b501      	push	{r0, lr}
#ifdef TX_EXECUTION_PROFILE_ENABLE
    BL      _tx_execution_isr_enter             @ Call the ISR enter function
#endif
    BL      _tx_timer_interrupt
 800036a:	f000 f899 	bl	80004a0 <_tx_timer_interrupt>
#ifdef TX_EXECUTION_PROFILE_ENABLE
    BL      _tx_execution_isr_exit              @ Call the ISR exit function
#endif
    POP     {r0, lr}
 800036e:	e8bd 4001 	ldmia.w	sp!, {r0, lr}
    BX      LR
 8000372:	4770      	bx	lr

08000374 <__tx_NMIHandler>:

@ /* NMI, DBG handlers */
    .global  __tx_NMIHandler
    .thumb_func
__tx_NMIHandler:
    B       __tx_NMIHandler
 8000374:	f7ff bffe 	b.w	8000374 <__tx_NMIHandler>

08000378 <__tx_DBGHandler>:

    .global  __tx_DBGHandler
    .thumb_func
__tx_DBGHandler:
    B       __tx_DBGHandler
 8000378:	f7ff bffe 	b.w	8000378 <__tx_DBGHandler>
    LDR     r1, =g_pfnVectors                           @ Pickup address of vector table
 800037c:	08000000 	.word	0x08000000
    LDR     r0, =_tx_thread_system_stack_ptr        @ Build address of system stack pointer
 8000380:	240060d4 	.word	0x240060d4
    LDR     r0, =0xE0001000                         @ Build address of DWT register
 8000384:	e0001000 	.word	0xe0001000
    LDR     r1, =SYSTICK_CYCLES
 8000388:	0053ec5f 	.word	0x0053ec5f
    LDR     r1, =0x40FF0000                         @ SysT, PnSV, Rsrv, DbgM
 800038c:	40ff0000 	.word	0x40ff0000

08000390 <_tx_thread_schedule>:
       from the first schedule request. Subsequent scheduling occurs
       from the PendSV handling routine below. */

    /* Clear the preempt-disable flag to enable rescheduling after initialization on Cortex-M targets.  */

    MOV     r0, #0                                  // Build value for TX_FALSE
 8000390:	f04f 0000 	mov.w	r0, #0
    LDR     r2, =_tx_thread_preempt_disable         // Build address of preempt disable flag
 8000394:	4a2e      	ldr	r2, [pc, #184]	; (8000450 <tx_thread_fpu_disable+0x2>)
    STR     r0, [r2, #0]                            // Clear preempt disable flag
 8000396:	6010      	str	r0, [r2, #0]

    /* Clear CONTROL.FPCA bit so VFP registers aren't unnecessarily stacked.  */

#ifdef __ARM_FP
    MRS     r0, CONTROL                             // Pickup current CONTROL register
 8000398:	f3ef 8014 	mrs	r0, CONTROL
    BIC     r0, r0, #4                              // Clear the FPCA bit
 800039c:	f020 0004 	bic.w	r0, r0, #4
    MSR     CONTROL, r0                             // Setup new CONTROL register
 80003a0:	f380 8814 	msr	CONTROL, r0
#endif

    /* Enable interrupts */
    CPSIE   i
 80003a4:	b662      	cpsie	i

    /* Enter the scheduler for the first time.  */

    MOV     r0, #0x10000000                         // Load PENDSVSET bit
 80003a6:	f04f 5080 	mov.w	r0, #268435456	; 0x10000000
    MOV     r1, #0xE000E000                         // Load NVIC base
 80003aa:	f04f 21e0 	mov.w	r1, #3758153728	; 0xe000e000
    STR     r0, [r1, #0xD04]                        // Set PENDSVBIT in ICSR
 80003ae:	f8c1 0d04 	str.w	r0, [r1, #3332]	; 0xd04
    DSB                                             // Complete all memory accesses
 80003b2:	f3bf 8f4f 	dsb	sy
    ISB                                             // Flush pipeline
 80003b6:	f3bf 8f6f 	isb	sy

080003ba <__tx_wait_here>:

    /* Wait here for the PendSV to take place.  */

__tx_wait_here:
    B       __tx_wait_here                          // Wait for the PendSV to happen
 80003ba:	e7fe      	b.n	80003ba <__tx_wait_here>

080003bc <PendSV_Handler>:
#else
    CPSIE   i                                       // Enable interrupts
#endif  /* TX_PORT_USE_BASEPRI */
#endif  /* EXECUTION PROFILE */

    LDR     r0, =_tx_thread_current_ptr             // Build current thread pointer address
 80003bc:	4825      	ldr	r0, [pc, #148]	; (8000454 <tx_thread_fpu_disable+0x6>)
    LDR     r2, =_tx_thread_execute_ptr             // Build execute thread pointer address
 80003be:	4a26      	ldr	r2, [pc, #152]	; (8000458 <tx_thread_fpu_disable+0xa>)
    MOV     r3, #0                                  // Build NULL value
 80003c0:	f04f 0300 	mov.w	r3, #0
    LDR     r1, [r0]                                // Pickup current thread pointer
 80003c4:	6801      	ldr	r1, [r0, #0]

    /* Determine if there is a current thread to finish preserving.  */

    CBZ     r1, __tx_ts_new                         // If NULL, skip preservation
 80003c6:	b191      	cbz	r1, 80003ee <__tx_ts_new>

    /* Recover PSP and preserve current thread context.  */

    STR     r3, [r0]                                // Set _tx_thread_current_ptr to NULL
 80003c8:	6003      	str	r3, [r0, #0]
    MRS     r12, PSP                                // Pickup PSP pointer (thread's stack pointer)
 80003ca:	f3ef 8c09 	mrs	ip, PSP
    STMDB   r12!, {r4-r11}                          // Save its remaining registers
 80003ce:	e92c 0ff0 	stmdb	ip!, {r4, r5, r6, r7, r8, r9, sl, fp}
#ifdef __ARM_FP
    TST     LR, #0x10                               // Determine if the VFP extended frame is present
 80003d2:	f01e 0f10 	tst.w	lr, #16
    BNE     _skip_vfp_save
 80003d6:	d101      	bne.n	80003dc <_skip_vfp_save>
    VSTMDB  r12!,{s16-s31}                          // Yes, save additional VFP registers
 80003d8:	ed2c 8a10 	vstmdb	ip!, {s16-s31}

080003dc <_skip_vfp_save>:
_skip_vfp_save:
#endif
    LDR     r4, =_tx_timer_time_slice               // Build address of time-slice variable
 80003dc:	4c1f      	ldr	r4, [pc, #124]	; (800045c <tx_thread_fpu_disable+0xe>)
    STMDB   r12!, {LR}                              // Save LR on the stack
 80003de:	f84c ed04 	str.w	lr, [ip, #-4]!

    /* Determine if time-slice is active. If it isn't, skip time handling processing.  */

    LDR     r5, [r4]                                // Pickup current time-slice
 80003e2:	6825      	ldr	r5, [r4, #0]
    STR     r12, [r1, #8]                           // Save the thread stack pointer
 80003e4:	f8c1 c008 	str.w	ip, [r1, #8]
    CBZ     r5, __tx_ts_new                         // If not active, skip processing
 80003e8:	b10d      	cbz	r5, 80003ee <__tx_ts_new>

    /* Time-slice is active, save the current thread's time-slice and clear the global time-slice variable.  */

    STR     r5, [r1, #24]                           // Save current time-slice
 80003ea:	618d      	str	r5, [r1, #24]

    /* Clear the global time-slice.  */

    STR     r3, [r4]                                // Clear time-slice
 80003ec:	6023      	str	r3, [r4, #0]

080003ee <__tx_ts_new>:

#ifdef TX_PORT_USE_BASEPRI
    LDR     r1, =TX_PORT_BASEPRI                    // Mask interrupt priorities =< TX_PORT_BASEPRI
    MSR     BASEPRI, r1
#else
    CPSID   i                                       // Disable interrupts
 80003ee:	b672      	cpsid	i
#endif
    LDR     r1, [r2]                                // Is there another thread ready to execute?
 80003f0:	6811      	ldr	r1, [r2, #0]
    CBZ     r1, __tx_ts_wait                        // No, skip to the wait processing
 80003f2:	b1b1      	cbz	r1, 8000422 <__tx_ts_wait>

    /* Yes, another thread is ready for else, make the current thread the new thread.  */

    STR     r1, [r0]                                // Setup the current thread pointer to the new thread
 80003f4:	6001      	str	r1, [r0, #0]
#ifdef TX_PORT_USE_BASEPRI
    MOV     r4, #0                                  // Disable BASEPRI masking (enable interrupts)
    MSR     BASEPRI, r4
#else
    CPSIE   i                                       // Enable interrupts
 80003f6:	b662      	cpsie	i

080003f8 <__tx_ts_restore>:
#endif

    /* Increment the thread run count.  */

__tx_ts_restore:
    LDR     r7, [r1, #4]                            // Pickup the current thread run count
 80003f8:	684f      	ldr	r7, [r1, #4]
    LDR     r4, =_tx_timer_time_slice               // Build address of time-slice variable
 80003fa:	4c18      	ldr	r4, [pc, #96]	; (800045c <tx_thread_fpu_disable+0xe>)
    LDR     r5, [r1, #24]                           // Pickup thread's current time-slice
 80003fc:	698d      	ldr	r5, [r1, #24]
    ADD     r7, r7, #1                              // Increment the thread run count
 80003fe:	f107 0701 	add.w	r7, r7, #1
    STR     r7, [r1, #4]                            // Store the new run count
 8000402:	604f      	str	r7, [r1, #4]

    /* Setup global time-slice with thread's current time-slice.  */

    STR     r5, [r4]                                // Setup global time-slice
 8000404:	6025      	str	r5, [r4, #0]
    POP     {r0, r1}                                // Recover r0 and r1
#endif

    /* Restore the thread context and PSP.  */

    LDR     r12, [r1, #8]                           // Pickup thread's stack pointer
 8000406:	f8d1 c008 	ldr.w	ip, [r1, #8]
    LDMIA   r12!, {LR}                              // Pickup LR
 800040a:	f85c eb04 	ldr.w	lr, [ip], #4
#ifdef __ARM_FP
    TST     LR, #0x10                               // Determine if the VFP extended frame is present
 800040e:	f01e 0f10 	tst.w	lr, #16
    BNE     _skip_vfp_restore                       // If not, skip VFP restore
 8000412:	d101      	bne.n	8000418 <_skip_vfp_restore>
    VLDMIA  r12!, {s16-s31}                         // Yes, restore additional VFP registers
 8000414:	ecbc 8a10 	vldmia	ip!, {s16-s31}

08000418 <_skip_vfp_restore>:
_skip_vfp_restore:
#endif
    LDMIA   r12!, {r4-r11}                          // Recover thread's registers
 8000418:	e8bc 0ff0 	ldmia.w	ip!, {r4, r5, r6, r7, r8, r9, sl, fp}
    MSR     PSP, r12                                // Setup the thread's stack pointer
 800041c:	f38c 8809 	msr	PSP, ip

    /* Return to thread.  */

    BX      lr                                      // Return to thread!
 8000420:	4770      	bx	lr

08000422 <__tx_ts_wait>:
__tx_ts_wait:
#ifdef TX_PORT_USE_BASEPRI
    LDR     r1, =TX_PORT_BASEPRI                    // Mask interrupt priorities =< TX_PORT_BASEPRI
    MSR     BASEPRI, r1
#else
    CPSID   i                                       // Disable interrupts
 8000422:	b672      	cpsid	i
#endif
    LDR     r1, [r2]                                // Pickup the next thread to execute pointer
 8000424:	6811      	ldr	r1, [r2, #0]
    STR     r1, [r0]                                // Store it in the current pointer
 8000426:	6001      	str	r1, [r0, #0]
    CBNZ    r1, __tx_ts_ready                       // If non-NULL, a new thread is ready!
 8000428:	b949      	cbnz	r1, 800043e <__tx_ts_ready>

#ifdef TX_LOW_POWER
    PUSH    {r0-r3}
 800042a:	b40f      	push	{r0, r1, r2, r3}
    BL      tx_low_power_enter                      // Possibly enter low power mode
 800042c:	f007 fa32 	bl	8007894 <tx_low_power_enter>
    POP     {r0-r3}
 8000430:	bc0f      	pop	{r0, r1, r2, r3}
    WFI                                             // Wait for interrupt
    ISB                                             // Ensure pipeline is flushed
#endif

#ifdef TX_LOW_POWER
    PUSH    {r0-r3}
 8000432:	b40f      	push	{r0, r1, r2, r3}
    BL      tx_low_power_exit                       // Exit low power mode
 8000434:	f007 fa4a 	bl	80078cc <tx_low_power_exit>
    POP     {r0-r3}
 8000438:	bc0f      	pop	{r0, r1, r2, r3}

#ifdef TX_PORT_USE_BASEPRI
    MOV     r4, #0                                  // Disable BASEPRI masking (enable interrupts)
    MSR     BASEPRI, r4
#else
    CPSIE   i                                       // Enable interrupts
 800043a:	b662      	cpsie	i
#endif
    B       __tx_ts_wait                            // Loop to continue waiting
 800043c:	e7f1      	b.n	8000422 <__tx_ts_wait>

0800043e <__tx_ts_ready>:

    /* At this point, we have a new thread ready to go. Clear any newly pended PendSV - since we are
       already in the handler!  */

__tx_ts_ready:
    MOV     r7, #0x08000000                         // Build clear PendSV value
 800043e:	f04f 6700 	mov.w	r7, #134217728	; 0x8000000
    MOV     r8, #0xE000E000                         // Build base NVIC address
 8000442:	f04f 28e0 	mov.w	r8, #3758153728	; 0xe000e000
    STR     r7, [r8, #0xD04]                        // Clear any PendSV
 8000446:	f8c8 7d04 	str.w	r7, [r8, #3332]	; 0xd04
    /* Re-enable interrupts and restore new thread.  */
#ifdef TX_PORT_USE_BASEPRI
    MOV     r4, #0                                  // Disable BASEPRI masking (enable interrupts)
    MSR     BASEPRI, r4
#else
    CPSIE   i                                       // Enable interrupts
 800044a:	b662      	cpsie	i
#endif
    B       __tx_ts_restore                         // Restore the thread
 800044c:	e7d4      	b.n	80003f8 <__tx_ts_restore>

0800044e <tx_thread_fpu_disable>:
tx_thread_fpu_disable:

    /* Automatic VPF logic is supported, this function is present only for
       backward compatibility purposes and therefore simply returns.  */

    BX      LR                                      // Return to caller
 800044e:	4770      	bx	lr
    LDR     r2, =_tx_thread_preempt_disable         // Build address of preempt disable flag
 8000450:	24006170 	.word	0x24006170
    LDR     r0, =_tx_thread_current_ptr             // Build current thread pointer address
 8000454:	240060d8 	.word	0x240060d8
    LDR     r2, =_tx_thread_execute_ptr             // Build execute thread pointer address
 8000458:	240060dc 	.word	0x240060dc
    LDR     r4, =_tx_timer_time_slice               // Build address of time-slice variable
 800045c:	240066dc 	.word	0x240066dc

08000460 <_tx_thread_stack_build>:
                       pc          Initial value for pc
                       xPSR        Initial value for xPSR

    Stack Bottom: (higher memory address)  */

    LDR     r2, [r0, #16]                           // Pickup end of stack area
 8000460:	6902      	ldr	r2, [r0, #16]
    BIC     r2, r2, #0x7                            // Align frame for 8-byte alignment
 8000462:	f022 0207 	bic.w	r2, r2, #7
    SUB     r2, r2, #68                             // Subtract frame size
 8000466:	f1a2 0244 	sub.w	r2, r2, #68	; 0x44
    LDR     r3, =0xFFFFFFFD                         // Build initial LR value
 800046a:	f06f 0302 	mvn.w	r3, #2
    STR     r3, [r2, #0]                            // Save on the stack
 800046e:	6013      	str	r3, [r2, #0]

    /* Actually build the stack frame.  */

    MOV     r3, #0                                  // Build initial register value
 8000470:	f04f 0300 	mov.w	r3, #0
    STR     r3, [r2, #4]                            // Store initial r4
 8000474:	6053      	str	r3, [r2, #4]
    STR     r3, [r2, #8]                            // Store initial r5
 8000476:	6093      	str	r3, [r2, #8]
    STR     r3, [r2, #12]                           // Store initial r6
 8000478:	60d3      	str	r3, [r2, #12]
    STR     r3, [r2, #16]                           // Store initial r7
 800047a:	6113      	str	r3, [r2, #16]
    STR     r3, [r2, #20]                           // Store initial r8
 800047c:	6153      	str	r3, [r2, #20]
    STR     r3, [r2, #24]                           // Store initial r9
 800047e:	6193      	str	r3, [r2, #24]
    STR     r3, [r2, #28]                           // Store initial r10
 8000480:	61d3      	str	r3, [r2, #28]
    STR     r3, [r2, #32]                           // Store initial r11
 8000482:	6213      	str	r3, [r2, #32]

    /* Hardware stack follows.  */

    STR     r3, [r2, #36]                           // Store initial r0
 8000484:	6253      	str	r3, [r2, #36]	; 0x24
    STR     r3, [r2, #40]                           // Store initial r1
 8000486:	6293      	str	r3, [r2, #40]	; 0x28
    STR     r3, [r2, #44]                           // Store initial r2
 8000488:	62d3      	str	r3, [r2, #44]	; 0x2c
    STR     r3, [r2, #48]                           // Store initial r3
 800048a:	6313      	str	r3, [r2, #48]	; 0x30
    STR     r3, [r2, #52]                           // Store initial r12
 800048c:	6353      	str	r3, [r2, #52]	; 0x34
    MOV     r3, #0xFFFFFFFF                         // Poison EXC_RETURN value
 800048e:	f04f 33ff 	mov.w	r3, #4294967295
    STR     r3, [r2, #56]                           // Store initial lr
 8000492:	6393      	str	r3, [r2, #56]	; 0x38
    STR     r1, [r2, #60]                           // Store initial pc
 8000494:	63d1      	str	r1, [r2, #60]	; 0x3c
    MOV     r3, #0x01000000                         // Only T-bit need be set
 8000496:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
    STR     r3, [r2, #64]                           // Store initial xPSR
 800049a:	6413      	str	r3, [r2, #64]	; 0x40

    /* Setup stack pointer.  */
    // thread_ptr -> tx_thread_stack_ptr =  r2;

    STR     r2, [r0, #8]                            // Save stack pointer in thread's
 800049c:	6082      	str	r2, [r0, #8]
                                                    //   control block
    BX      lr                                      // Return to caller
 800049e:	4770      	bx	lr

080004a0 <_tx_timer_interrupt>:
       for use.  */

    /* Increment the system clock.  */
    // _tx_timer_system_clock++;

    LDR     r1, =_tx_timer_system_clock             // Pickup address of system clock
 80004a0:	4922      	ldr	r1, [pc, #136]	; (800052c <__tx_timer_nothing_expired+0x6>)
    LDR     r0, [r1, #0]                            // Pickup system clock
 80004a2:	6808      	ldr	r0, [r1, #0]
    ADD     r0, r0, #1                              // Increment system clock
 80004a4:	f100 0001 	add.w	r0, r0, #1
    STR     r0, [r1, #0]                            // Store new system clock
 80004a8:	6008      	str	r0, [r1, #0]

    /* Test for time-slice expiration.  */
    // if (_tx_timer_time_slice)
    // {

    LDR     r3, =_tx_timer_time_slice               // Pickup address of time-slice
 80004aa:	4b21      	ldr	r3, [pc, #132]	; (8000530 <__tx_timer_nothing_expired+0xa>)
    LDR     r2, [r3, #0]                            // Pickup time-slice
 80004ac:	681a      	ldr	r2, [r3, #0]
    CBZ     r2, __tx_timer_no_time_slice            // Is it non-active?
 80004ae:	b13a      	cbz	r2, 80004c0 <__tx_timer_no_time_slice>
                                                    // Yes, skip time-slice processing

       /* Decrement the time_slice.  */
       // _tx_timer_time_slice--;

    SUB     r2, r2, #1                              // Decrement the time-slice
 80004b0:	f1a2 0201 	sub.w	r2, r2, #1
    STR     r2, [r3, #0]                            // Store new time-slice value
 80004b4:	601a      	str	r2, [r3, #0]

       /* Check for expiration.  */
       // if (__tx_timer_time_slice == 0)

    CBNZ    r2, __tx_timer_no_time_slice            // Has it expired?
 80004b6:	b91a      	cbnz	r2, 80004c0 <__tx_timer_no_time_slice>
                                                    // No, skip expiration processing

       /* Set the time-slice expired flag.  */
       // _tx_timer_expired_time_slice =  TX_TRUE;

    LDR     r3, =_tx_timer_expired_time_slice       // Pickup address of expired flag
 80004b8:	4b1e      	ldr	r3, [pc, #120]	; (8000534 <__tx_timer_nothing_expired+0xe>)
    MOV     r0, #1                                  // Build expired value
 80004ba:	f04f 0001 	mov.w	r0, #1
    STR     r0, [r3, #0]                            // Set time-slice expiration flag
 80004be:	6018      	str	r0, [r3, #0]

080004c0 <__tx_timer_no_time_slice>:

    /* Test for timer expiration.  */
    // if (*_tx_timer_current_ptr)
    // {

    LDR     r1, =_tx_timer_current_ptr              // Pickup current timer pointer address
 80004c0:	491d      	ldr	r1, [pc, #116]	; (8000538 <__tx_timer_nothing_expired+0x12>)
    LDR     r0, [r1, #0]                            // Pickup current timer
 80004c2:	6808      	ldr	r0, [r1, #0]
    LDR     r2, [r0, #0]                            // Pickup timer list entry
 80004c4:	6802      	ldr	r2, [r0, #0]
    CBZ     r2, __tx_timer_no_timer                 // Is there anything in the list?
 80004c6:	b122      	cbz	r2, 80004d2 <__tx_timer_no_timer>
                                                    // No, just increment the timer

        /* Set expiration flag.  */
        // _tx_timer_expired =  TX_TRUE;

    LDR     r3, =_tx_timer_expired                  // Pickup expiration flag address
 80004c8:	4b1c      	ldr	r3, [pc, #112]	; (800053c <__tx_timer_nothing_expired+0x16>)
    MOV     r2, #1                                  // Build expired value
 80004ca:	f04f 0201 	mov.w	r2, #1
    STR     r2, [r3, #0]                            // Set expired flag
 80004ce:	601a      	str	r2, [r3, #0]
    B       __tx_timer_done                         // Finished timer processing
 80004d0:	e008      	b.n	80004e4 <__tx_timer_done>

080004d2 <__tx_timer_no_timer>:
__tx_timer_no_timer:

        /* No timer expired, increment the timer pointer.  */
        // _tx_timer_current_ptr++;

    ADD     r0, r0, #4                              // Move to next timer
 80004d2:	f100 0004 	add.w	r0, r0, #4

        /* Check for wrap-around.  */
        // if (_tx_timer_current_ptr == _tx_timer_list_end)

    LDR     r3, =_tx_timer_list_end                 // Pickup addr of timer list end
 80004d6:	4b1a      	ldr	r3, [pc, #104]	; (8000540 <__tx_timer_nothing_expired+0x1a>)
    LDR     r2, [r3, #0]                            // Pickup list end
 80004d8:	681a      	ldr	r2, [r3, #0]
    CMP     r0, r2                                  // Are we at list end?
 80004da:	4290      	cmp	r0, r2
    BNE     __tx_timer_skip_wrap                    // No, skip wrap-around logic
 80004dc:	d101      	bne.n	80004e2 <__tx_timer_skip_wrap>

            /* Wrap to beginning of list.  */
            // _tx_timer_current_ptr =  _tx_timer_list_start;

    LDR     r3, =_tx_timer_list_start               // Pickup addr of timer list start
 80004de:	4b19      	ldr	r3, [pc, #100]	; (8000544 <__tx_timer_nothing_expired+0x1e>)
    LDR     r0, [r3, #0]                            // Set current pointer to list start
 80004e0:	6818      	ldr	r0, [r3, #0]

080004e2 <__tx_timer_skip_wrap>:

__tx_timer_skip_wrap:

    STR     r0, [r1, #0]                            // Store new current timer pointer
 80004e2:	6008      	str	r0, [r1, #0]

080004e4 <__tx_timer_done>:

    /* See if anything has expired.  */
    // if ((_tx_timer_expired_time_slice) || (_tx_timer_expired))
    // {

    LDR     r3, =_tx_timer_expired_time_slice       // Pickup addr of expired flag
 80004e4:	4b13      	ldr	r3, [pc, #76]	; (8000534 <__tx_timer_nothing_expired+0xe>)
    LDR     r2, [r3, #0]                            // Pickup time-slice expired flag
 80004e6:	681a      	ldr	r2, [r3, #0]
    CBNZ    r2, __tx_something_expired              // Did a time-slice expire?
 80004e8:	b912      	cbnz	r2, 80004f0 <__tx_something_expired>
                                                    // If non-zero, time-slice expired
    LDR     r1, =_tx_timer_expired                  // Pickup addr of other expired flag
 80004ea:	4914      	ldr	r1, [pc, #80]	; (800053c <__tx_timer_nothing_expired+0x16>)
    LDR     r0, [r1, #0]                            // Pickup timer expired flag
 80004ec:	6808      	ldr	r0, [r1, #0]
    CBZ     r0, __tx_timer_nothing_expired          // Did a timer expire?
 80004ee:	b1d0      	cbz	r0, 8000526 <__tx_timer_nothing_expired>

080004f0 <__tx_something_expired>:
                                                    // No, nothing expired

__tx_something_expired:

    STMDB   sp!, {r0, lr}                           // Save the lr register on the stack
 80004f0:	e92d 4001 	stmdb	sp!, {r0, lr}

    /* Did a timer expire?  */
    // if (_tx_timer_expired)
    // {

    LDR     r1, =_tx_timer_expired                  // Pickup addr of expired flag
 80004f4:	4911      	ldr	r1, [pc, #68]	; (800053c <__tx_timer_nothing_expired+0x16>)
    LDR     r0, [r1, #0]                            // Pickup timer expired flag
 80004f6:	6808      	ldr	r0, [r1, #0]
    CBZ     r0, __tx_timer_dont_activate            // Check for timer expiration
 80004f8:	b108      	cbz	r0, 80004fe <__tx_timer_dont_activate>
                                                    // If not set, skip timer activation

        /* Process timer expiration.  */
        // _tx_timer_expiration_process();

    BL      _tx_timer_expiration_process            // Call the timer expiration handling routine
 80004fa:	f006 fef5 	bl	80072e8 <_tx_timer_expiration_process>

080004fe <__tx_timer_dont_activate>:

    /* Did time slice expire?  */
    // if (_tx_timer_expired_time_slice)
    // {

    LDR     r3, =_tx_timer_expired_time_slice       // Pickup addr of time-slice expired
 80004fe:	4b0d      	ldr	r3, [pc, #52]	; (8000534 <__tx_timer_nothing_expired+0xe>)
    LDR     r2, [r3, #0]                            // Pickup the actual flag
 8000500:	681a      	ldr	r2, [r3, #0]
    CBZ     r2, __tx_timer_not_ts_expiration        // See if the flag is set
 8000502:	b172      	cbz	r2, 8000522 <__tx_timer_not_ts_expiration>
                                                    // No, skip time-slice processing

        /* Time slice interrupted thread.  */
        // _tx_thread_time_slice();

    BL      _tx_thread_time_slice                   // Call time-slice processing
 8000504:	f006 fe62 	bl	80071cc <_tx_thread_time_slice>
    LDR     r0, =_tx_thread_preempt_disable         // Build address of preempt disable flag
 8000508:	480f      	ldr	r0, [pc, #60]	; (8000548 <__tx_timer_nothing_expired+0x22>)
    LDR     r1, [r0]                                // Is the preempt disable flag set?
 800050a:	6801      	ldr	r1, [r0, #0]
    CBNZ    r1, __tx_timer_skip_time_slice          // Yes, skip the PendSV logic
 800050c:	b949      	cbnz	r1, 8000522 <__tx_timer_not_ts_expiration>
    LDR     r0, =_tx_thread_current_ptr             // Build current thread pointer address
 800050e:	480f      	ldr	r0, [pc, #60]	; (800054c <__tx_timer_nothing_expired+0x26>)
    LDR     r1, [r0]                                // Pickup the current thread pointer
 8000510:	6801      	ldr	r1, [r0, #0]
    LDR     r2, =_tx_thread_execute_ptr             // Build execute thread pointer address
 8000512:	4a0f      	ldr	r2, [pc, #60]	; (8000550 <__tx_timer_nothing_expired+0x2a>)
    LDR     r3, [r2]                                // Pickup the execute thread pointer
 8000514:	6813      	ldr	r3, [r2, #0]
    LDR     r0, =0xE000ED04                         // Build address of control register
 8000516:	480f      	ldr	r0, [pc, #60]	; (8000554 <__tx_timer_nothing_expired+0x2e>)
    LDR     r2, =0x10000000                         // Build value for PendSV bit
 8000518:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
    CMP     r1, r3                                  // Are they the same?
 800051c:	4299      	cmp	r1, r3
    BEQ     __tx_timer_skip_time_slice              // If the same, there was no time-slice performed
 800051e:	d000      	beq.n	8000522 <__tx_timer_not_ts_expiration>
    STR     r2, [r0]                                // Not the same, issue the PendSV for preemption
 8000520:	6002      	str	r2, [r0, #0]

08000522 <__tx_timer_not_ts_expiration>:

    // }

__tx_timer_not_ts_expiration:

    LDMIA   sp!, {r0, lr}                           // Recover lr register (r0 is just there for
 8000522:	e8bd 4001 	ldmia.w	sp!, {r0, lr}

08000526 <__tx_timer_nothing_expired>:

    // }

__tx_timer_nothing_expired:

    DSB                                             // Complete all memory access
 8000526:	f3bf 8f4f 	dsb	sy
    BX      lr                                      // Return to caller
 800052a:	4770      	bx	lr
    LDR     r1, =_tx_timer_system_clock             // Pickup address of system clock
 800052c:	2400617c 	.word	0x2400617c
    LDR     r3, =_tx_timer_time_slice               // Pickup address of time-slice
 8000530:	240066dc 	.word	0x240066dc
    LDR     r3, =_tx_timer_expired_time_slice       // Pickup address of expired flag
 8000534:	24006180 	.word	0x24006180
    LDR     r1, =_tx_timer_current_ptr              // Pickup current timer pointer address
 8000538:	2400620c 	.word	0x2400620c
    LDR     r3, =_tx_timer_expired                  // Pickup expiration flag address
 800053c:	24006210 	.word	0x24006210
    LDR     r3, =_tx_timer_list_end                 // Pickup addr of timer list end
 8000540:	24006208 	.word	0x24006208
    LDR     r3, =_tx_timer_list_start               // Pickup addr of timer list start
 8000544:	24006204 	.word	0x24006204
    LDR     r0, =_tx_thread_preempt_disable         // Build address of preempt disable flag
 8000548:	24006170 	.word	0x24006170
    LDR     r0, =_tx_thread_current_ptr             // Build current thread pointer address
 800054c:	240060d8 	.word	0x240060d8
    LDR     r2, =_tx_thread_execute_ptr             // Build execute thread pointer address
 8000550:	240060dc 	.word	0x240060dc
    LDR     r0, =0xE000ED04                         // Build address of control register
 8000554:	e000ed04 	.word	0xe000ed04
	...

08000560 <memchr>:
 8000560:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 8000564:	2a10      	cmp	r2, #16
 8000566:	db2b      	blt.n	80005c0 <memchr+0x60>
 8000568:	f010 0f07 	tst.w	r0, #7
 800056c:	d008      	beq.n	8000580 <memchr+0x20>
 800056e:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000572:	3a01      	subs	r2, #1
 8000574:	428b      	cmp	r3, r1
 8000576:	d02d      	beq.n	80005d4 <memchr+0x74>
 8000578:	f010 0f07 	tst.w	r0, #7
 800057c:	b342      	cbz	r2, 80005d0 <memchr+0x70>
 800057e:	d1f6      	bne.n	800056e <memchr+0xe>
 8000580:	b4f0      	push	{r4, r5, r6, r7}
 8000582:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000586:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800058a:	f022 0407 	bic.w	r4, r2, #7
 800058e:	f07f 0700 	mvns.w	r7, #0
 8000592:	2300      	movs	r3, #0
 8000594:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000598:	3c08      	subs	r4, #8
 800059a:	ea85 0501 	eor.w	r5, r5, r1
 800059e:	ea86 0601 	eor.w	r6, r6, r1
 80005a2:	fa85 f547 	uadd8	r5, r5, r7
 80005a6:	faa3 f587 	sel	r5, r3, r7
 80005aa:	fa86 f647 	uadd8	r6, r6, r7
 80005ae:	faa5 f687 	sel	r6, r5, r7
 80005b2:	b98e      	cbnz	r6, 80005d8 <memchr+0x78>
 80005b4:	d1ee      	bne.n	8000594 <memchr+0x34>
 80005b6:	bcf0      	pop	{r4, r5, r6, r7}
 80005b8:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 80005bc:	f002 0207 	and.w	r2, r2, #7
 80005c0:	b132      	cbz	r2, 80005d0 <memchr+0x70>
 80005c2:	f810 3b01 	ldrb.w	r3, [r0], #1
 80005c6:	3a01      	subs	r2, #1
 80005c8:	ea83 0301 	eor.w	r3, r3, r1
 80005cc:	b113      	cbz	r3, 80005d4 <memchr+0x74>
 80005ce:	d1f8      	bne.n	80005c2 <memchr+0x62>
 80005d0:	2000      	movs	r0, #0
 80005d2:	4770      	bx	lr
 80005d4:	3801      	subs	r0, #1
 80005d6:	4770      	bx	lr
 80005d8:	2d00      	cmp	r5, #0
 80005da:	bf06      	itte	eq
 80005dc:	4635      	moveq	r5, r6
 80005de:	3803      	subeq	r0, #3
 80005e0:	3807      	subne	r0, #7
 80005e2:	f015 0f01 	tst.w	r5, #1
 80005e6:	d107      	bne.n	80005f8 <memchr+0x98>
 80005e8:	3001      	adds	r0, #1
 80005ea:	f415 7f80 	tst.w	r5, #256	; 0x100
 80005ee:	bf02      	ittt	eq
 80005f0:	3001      	addeq	r0, #1
 80005f2:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 80005f6:	3001      	addeq	r0, #1
 80005f8:	bcf0      	pop	{r4, r5, r6, r7}
 80005fa:	3801      	subs	r0, #1
 80005fc:	4770      	bx	lr
 80005fe:	bf00      	nop

08000600 <__aeabi_uldivmod>:
 8000600:	b953      	cbnz	r3, 8000618 <__aeabi_uldivmod+0x18>
 8000602:	b94a      	cbnz	r2, 8000618 <__aeabi_uldivmod+0x18>
 8000604:	2900      	cmp	r1, #0
 8000606:	bf08      	it	eq
 8000608:	2800      	cmpeq	r0, #0
 800060a:	bf1c      	itt	ne
 800060c:	f04f 31ff 	movne.w	r1, #4294967295
 8000610:	f04f 30ff 	movne.w	r0, #4294967295
 8000614:	f000 b974 	b.w	8000900 <__aeabi_idiv0>
 8000618:	f1ad 0c08 	sub.w	ip, sp, #8
 800061c:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000620:	f000 f806 	bl	8000630 <__udivmoddi4>
 8000624:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000628:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 800062c:	b004      	add	sp, #16
 800062e:	4770      	bx	lr

08000630 <__udivmoddi4>:
 8000630:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000634:	9d08      	ldr	r5, [sp, #32]
 8000636:	4604      	mov	r4, r0
 8000638:	468e      	mov	lr, r1
 800063a:	2b00      	cmp	r3, #0
 800063c:	d14d      	bne.n	80006da <__udivmoddi4+0xaa>
 800063e:	428a      	cmp	r2, r1
 8000640:	4694      	mov	ip, r2
 8000642:	d969      	bls.n	8000718 <__udivmoddi4+0xe8>
 8000644:	fab2 f282 	clz	r2, r2
 8000648:	b152      	cbz	r2, 8000660 <__udivmoddi4+0x30>
 800064a:	fa01 f302 	lsl.w	r3, r1, r2
 800064e:	f1c2 0120 	rsb	r1, r2, #32
 8000652:	fa20 f101 	lsr.w	r1, r0, r1
 8000656:	fa0c fc02 	lsl.w	ip, ip, r2
 800065a:	ea41 0e03 	orr.w	lr, r1, r3
 800065e:	4094      	lsls	r4, r2
 8000660:	ea4f 481c 	mov.w	r8, ip, lsr #16
 8000664:	0c21      	lsrs	r1, r4, #16
 8000666:	fbbe f6f8 	udiv	r6, lr, r8
 800066a:	fa1f f78c 	uxth.w	r7, ip
 800066e:	fb08 e316 	mls	r3, r8, r6, lr
 8000672:	ea41 4303 	orr.w	r3, r1, r3, lsl #16
 8000676:	fb06 f107 	mul.w	r1, r6, r7
 800067a:	4299      	cmp	r1, r3
 800067c:	d90a      	bls.n	8000694 <__udivmoddi4+0x64>
 800067e:	eb1c 0303 	adds.w	r3, ip, r3
 8000682:	f106 30ff 	add.w	r0, r6, #4294967295
 8000686:	f080 811f 	bcs.w	80008c8 <__udivmoddi4+0x298>
 800068a:	4299      	cmp	r1, r3
 800068c:	f240 811c 	bls.w	80008c8 <__udivmoddi4+0x298>
 8000690:	3e02      	subs	r6, #2
 8000692:	4463      	add	r3, ip
 8000694:	1a5b      	subs	r3, r3, r1
 8000696:	b2a4      	uxth	r4, r4
 8000698:	fbb3 f0f8 	udiv	r0, r3, r8
 800069c:	fb08 3310 	mls	r3, r8, r0, r3
 80006a0:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 80006a4:	fb00 f707 	mul.w	r7, r0, r7
 80006a8:	42a7      	cmp	r7, r4
 80006aa:	d90a      	bls.n	80006c2 <__udivmoddi4+0x92>
 80006ac:	eb1c 0404 	adds.w	r4, ip, r4
 80006b0:	f100 33ff 	add.w	r3, r0, #4294967295
 80006b4:	f080 810a 	bcs.w	80008cc <__udivmoddi4+0x29c>
 80006b8:	42a7      	cmp	r7, r4
 80006ba:	f240 8107 	bls.w	80008cc <__udivmoddi4+0x29c>
 80006be:	4464      	add	r4, ip
 80006c0:	3802      	subs	r0, #2
 80006c2:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 80006c6:	1be4      	subs	r4, r4, r7
 80006c8:	2600      	movs	r6, #0
 80006ca:	b11d      	cbz	r5, 80006d4 <__udivmoddi4+0xa4>
 80006cc:	40d4      	lsrs	r4, r2
 80006ce:	2300      	movs	r3, #0
 80006d0:	e9c5 4300 	strd	r4, r3, [r5]
 80006d4:	4631      	mov	r1, r6
 80006d6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80006da:	428b      	cmp	r3, r1
 80006dc:	d909      	bls.n	80006f2 <__udivmoddi4+0xc2>
 80006de:	2d00      	cmp	r5, #0
 80006e0:	f000 80ef 	beq.w	80008c2 <__udivmoddi4+0x292>
 80006e4:	2600      	movs	r6, #0
 80006e6:	e9c5 0100 	strd	r0, r1, [r5]
 80006ea:	4630      	mov	r0, r6
 80006ec:	4631      	mov	r1, r6
 80006ee:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80006f2:	fab3 f683 	clz	r6, r3
 80006f6:	2e00      	cmp	r6, #0
 80006f8:	d14a      	bne.n	8000790 <__udivmoddi4+0x160>
 80006fa:	428b      	cmp	r3, r1
 80006fc:	d302      	bcc.n	8000704 <__udivmoddi4+0xd4>
 80006fe:	4282      	cmp	r2, r0
 8000700:	f200 80f9 	bhi.w	80008f6 <__udivmoddi4+0x2c6>
 8000704:	1a84      	subs	r4, r0, r2
 8000706:	eb61 0303 	sbc.w	r3, r1, r3
 800070a:	2001      	movs	r0, #1
 800070c:	469e      	mov	lr, r3
 800070e:	2d00      	cmp	r5, #0
 8000710:	d0e0      	beq.n	80006d4 <__udivmoddi4+0xa4>
 8000712:	e9c5 4e00 	strd	r4, lr, [r5]
 8000716:	e7dd      	b.n	80006d4 <__udivmoddi4+0xa4>
 8000718:	b902      	cbnz	r2, 800071c <__udivmoddi4+0xec>
 800071a:	deff      	udf	#255	; 0xff
 800071c:	fab2 f282 	clz	r2, r2
 8000720:	2a00      	cmp	r2, #0
 8000722:	f040 8092 	bne.w	800084a <__udivmoddi4+0x21a>
 8000726:	eba1 010c 	sub.w	r1, r1, ip
 800072a:	ea4f 471c 	mov.w	r7, ip, lsr #16
 800072e:	fa1f fe8c 	uxth.w	lr, ip
 8000732:	2601      	movs	r6, #1
 8000734:	0c20      	lsrs	r0, r4, #16
 8000736:	fbb1 f3f7 	udiv	r3, r1, r7
 800073a:	fb07 1113 	mls	r1, r7, r3, r1
 800073e:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 8000742:	fb0e f003 	mul.w	r0, lr, r3
 8000746:	4288      	cmp	r0, r1
 8000748:	d908      	bls.n	800075c <__udivmoddi4+0x12c>
 800074a:	eb1c 0101 	adds.w	r1, ip, r1
 800074e:	f103 38ff 	add.w	r8, r3, #4294967295
 8000752:	d202      	bcs.n	800075a <__udivmoddi4+0x12a>
 8000754:	4288      	cmp	r0, r1
 8000756:	f200 80cb 	bhi.w	80008f0 <__udivmoddi4+0x2c0>
 800075a:	4643      	mov	r3, r8
 800075c:	1a09      	subs	r1, r1, r0
 800075e:	b2a4      	uxth	r4, r4
 8000760:	fbb1 f0f7 	udiv	r0, r1, r7
 8000764:	fb07 1110 	mls	r1, r7, r0, r1
 8000768:	ea44 4401 	orr.w	r4, r4, r1, lsl #16
 800076c:	fb0e fe00 	mul.w	lr, lr, r0
 8000770:	45a6      	cmp	lr, r4
 8000772:	d908      	bls.n	8000786 <__udivmoddi4+0x156>
 8000774:	eb1c 0404 	adds.w	r4, ip, r4
 8000778:	f100 31ff 	add.w	r1, r0, #4294967295
 800077c:	d202      	bcs.n	8000784 <__udivmoddi4+0x154>
 800077e:	45a6      	cmp	lr, r4
 8000780:	f200 80bb 	bhi.w	80008fa <__udivmoddi4+0x2ca>
 8000784:	4608      	mov	r0, r1
 8000786:	eba4 040e 	sub.w	r4, r4, lr
 800078a:	ea40 4003 	orr.w	r0, r0, r3, lsl #16
 800078e:	e79c      	b.n	80006ca <__udivmoddi4+0x9a>
 8000790:	f1c6 0720 	rsb	r7, r6, #32
 8000794:	40b3      	lsls	r3, r6
 8000796:	fa22 fc07 	lsr.w	ip, r2, r7
 800079a:	ea4c 0c03 	orr.w	ip, ip, r3
 800079e:	fa20 f407 	lsr.w	r4, r0, r7
 80007a2:	fa01 f306 	lsl.w	r3, r1, r6
 80007a6:	431c      	orrs	r4, r3
 80007a8:	40f9      	lsrs	r1, r7
 80007aa:	ea4f 491c 	mov.w	r9, ip, lsr #16
 80007ae:	fa00 f306 	lsl.w	r3, r0, r6
 80007b2:	fbb1 f8f9 	udiv	r8, r1, r9
 80007b6:	0c20      	lsrs	r0, r4, #16
 80007b8:	fa1f fe8c 	uxth.w	lr, ip
 80007bc:	fb09 1118 	mls	r1, r9, r8, r1
 80007c0:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 80007c4:	fb08 f00e 	mul.w	r0, r8, lr
 80007c8:	4288      	cmp	r0, r1
 80007ca:	fa02 f206 	lsl.w	r2, r2, r6
 80007ce:	d90b      	bls.n	80007e8 <__udivmoddi4+0x1b8>
 80007d0:	eb1c 0101 	adds.w	r1, ip, r1
 80007d4:	f108 3aff 	add.w	sl, r8, #4294967295
 80007d8:	f080 8088 	bcs.w	80008ec <__udivmoddi4+0x2bc>
 80007dc:	4288      	cmp	r0, r1
 80007de:	f240 8085 	bls.w	80008ec <__udivmoddi4+0x2bc>
 80007e2:	f1a8 0802 	sub.w	r8, r8, #2
 80007e6:	4461      	add	r1, ip
 80007e8:	1a09      	subs	r1, r1, r0
 80007ea:	b2a4      	uxth	r4, r4
 80007ec:	fbb1 f0f9 	udiv	r0, r1, r9
 80007f0:	fb09 1110 	mls	r1, r9, r0, r1
 80007f4:	ea44 4101 	orr.w	r1, r4, r1, lsl #16
 80007f8:	fb00 fe0e 	mul.w	lr, r0, lr
 80007fc:	458e      	cmp	lr, r1
 80007fe:	d908      	bls.n	8000812 <__udivmoddi4+0x1e2>
 8000800:	eb1c 0101 	adds.w	r1, ip, r1
 8000804:	f100 34ff 	add.w	r4, r0, #4294967295
 8000808:	d26c      	bcs.n	80008e4 <__udivmoddi4+0x2b4>
 800080a:	458e      	cmp	lr, r1
 800080c:	d96a      	bls.n	80008e4 <__udivmoddi4+0x2b4>
 800080e:	3802      	subs	r0, #2
 8000810:	4461      	add	r1, ip
 8000812:	ea40 4008 	orr.w	r0, r0, r8, lsl #16
 8000816:	fba0 9402 	umull	r9, r4, r0, r2
 800081a:	eba1 010e 	sub.w	r1, r1, lr
 800081e:	42a1      	cmp	r1, r4
 8000820:	46c8      	mov	r8, r9
 8000822:	46a6      	mov	lr, r4
 8000824:	d356      	bcc.n	80008d4 <__udivmoddi4+0x2a4>
 8000826:	d053      	beq.n	80008d0 <__udivmoddi4+0x2a0>
 8000828:	b15d      	cbz	r5, 8000842 <__udivmoddi4+0x212>
 800082a:	ebb3 0208 	subs.w	r2, r3, r8
 800082e:	eb61 010e 	sbc.w	r1, r1, lr
 8000832:	fa01 f707 	lsl.w	r7, r1, r7
 8000836:	fa22 f306 	lsr.w	r3, r2, r6
 800083a:	40f1      	lsrs	r1, r6
 800083c:	431f      	orrs	r7, r3
 800083e:	e9c5 7100 	strd	r7, r1, [r5]
 8000842:	2600      	movs	r6, #0
 8000844:	4631      	mov	r1, r6
 8000846:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800084a:	f1c2 0320 	rsb	r3, r2, #32
 800084e:	40d8      	lsrs	r0, r3
 8000850:	fa0c fc02 	lsl.w	ip, ip, r2
 8000854:	fa21 f303 	lsr.w	r3, r1, r3
 8000858:	4091      	lsls	r1, r2
 800085a:	4301      	orrs	r1, r0
 800085c:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000860:	fa1f fe8c 	uxth.w	lr, ip
 8000864:	fbb3 f0f7 	udiv	r0, r3, r7
 8000868:	fb07 3610 	mls	r6, r7, r0, r3
 800086c:	0c0b      	lsrs	r3, r1, #16
 800086e:	ea43 4306 	orr.w	r3, r3, r6, lsl #16
 8000872:	fb00 f60e 	mul.w	r6, r0, lr
 8000876:	429e      	cmp	r6, r3
 8000878:	fa04 f402 	lsl.w	r4, r4, r2
 800087c:	d908      	bls.n	8000890 <__udivmoddi4+0x260>
 800087e:	eb1c 0303 	adds.w	r3, ip, r3
 8000882:	f100 38ff 	add.w	r8, r0, #4294967295
 8000886:	d22f      	bcs.n	80008e8 <__udivmoddi4+0x2b8>
 8000888:	429e      	cmp	r6, r3
 800088a:	d92d      	bls.n	80008e8 <__udivmoddi4+0x2b8>
 800088c:	3802      	subs	r0, #2
 800088e:	4463      	add	r3, ip
 8000890:	1b9b      	subs	r3, r3, r6
 8000892:	b289      	uxth	r1, r1
 8000894:	fbb3 f6f7 	udiv	r6, r3, r7
 8000898:	fb07 3316 	mls	r3, r7, r6, r3
 800089c:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 80008a0:	fb06 f30e 	mul.w	r3, r6, lr
 80008a4:	428b      	cmp	r3, r1
 80008a6:	d908      	bls.n	80008ba <__udivmoddi4+0x28a>
 80008a8:	eb1c 0101 	adds.w	r1, ip, r1
 80008ac:	f106 38ff 	add.w	r8, r6, #4294967295
 80008b0:	d216      	bcs.n	80008e0 <__udivmoddi4+0x2b0>
 80008b2:	428b      	cmp	r3, r1
 80008b4:	d914      	bls.n	80008e0 <__udivmoddi4+0x2b0>
 80008b6:	3e02      	subs	r6, #2
 80008b8:	4461      	add	r1, ip
 80008ba:	1ac9      	subs	r1, r1, r3
 80008bc:	ea46 4600 	orr.w	r6, r6, r0, lsl #16
 80008c0:	e738      	b.n	8000734 <__udivmoddi4+0x104>
 80008c2:	462e      	mov	r6, r5
 80008c4:	4628      	mov	r0, r5
 80008c6:	e705      	b.n	80006d4 <__udivmoddi4+0xa4>
 80008c8:	4606      	mov	r6, r0
 80008ca:	e6e3      	b.n	8000694 <__udivmoddi4+0x64>
 80008cc:	4618      	mov	r0, r3
 80008ce:	e6f8      	b.n	80006c2 <__udivmoddi4+0x92>
 80008d0:	454b      	cmp	r3, r9
 80008d2:	d2a9      	bcs.n	8000828 <__udivmoddi4+0x1f8>
 80008d4:	ebb9 0802 	subs.w	r8, r9, r2
 80008d8:	eb64 0e0c 	sbc.w	lr, r4, ip
 80008dc:	3801      	subs	r0, #1
 80008de:	e7a3      	b.n	8000828 <__udivmoddi4+0x1f8>
 80008e0:	4646      	mov	r6, r8
 80008e2:	e7ea      	b.n	80008ba <__udivmoddi4+0x28a>
 80008e4:	4620      	mov	r0, r4
 80008e6:	e794      	b.n	8000812 <__udivmoddi4+0x1e2>
 80008e8:	4640      	mov	r0, r8
 80008ea:	e7d1      	b.n	8000890 <__udivmoddi4+0x260>
 80008ec:	46d0      	mov	r8, sl
 80008ee:	e77b      	b.n	80007e8 <__udivmoddi4+0x1b8>
 80008f0:	3b02      	subs	r3, #2
 80008f2:	4461      	add	r1, ip
 80008f4:	e732      	b.n	800075c <__udivmoddi4+0x12c>
 80008f6:	4630      	mov	r0, r6
 80008f8:	e709      	b.n	800070e <__udivmoddi4+0xde>
 80008fa:	4464      	add	r4, ip
 80008fc:	3802      	subs	r0, #2
 80008fe:	e742      	b.n	8000786 <__udivmoddi4+0x156>

08000900 <__aeabi_idiv0>:
 8000900:	4770      	bx	lr
 8000902:	bf00      	nop

08000904 <tx_application_define>:
  * @brief  Define the initial system.
  * @param  first_unused_memory : Pointer to the first unused memory
  * @retval None
  */
VOID tx_application_define(VOID *first_unused_memory)
{
 8000904:	b580      	push	{r7, lr}
 8000906:	b086      	sub	sp, #24
 8000908:	af02      	add	r7, sp, #8
 800090a:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN  tx_application_define_1*/

  /* USER CODE END  tx_application_define_1 */
#if (USE_STATIC_ALLOCATION == 1)
  UINT status = TX_SUCCESS;
 800090c:	2300      	movs	r3, #0
 800090e:	60fb      	str	r3, [r7, #12]
  VOID *memory_ptr;

  if (tx_byte_pool_create(&tx_app_byte_pool, "Tx App memory pool", tx_byte_pool_buffer, TX_APP_MEM_POOL_SIZE) != TX_SUCCESS)
 8000910:	2334      	movs	r3, #52	; 0x34
 8000912:	9300      	str	r3, [sp, #0]
 8000914:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8000918:	4a0a      	ldr	r2, [pc, #40]	; (8000944 <tx_application_define+0x40>)
 800091a:	490b      	ldr	r1, [pc, #44]	; (8000948 <tx_application_define+0x44>)
 800091c:	480b      	ldr	r0, [pc, #44]	; (800094c <tx_application_define+0x48>)
 800091e:	f006 ff19 	bl	8007754 <_txe_byte_pool_create>
 8000922:	4603      	mov	r3, r0
 8000924:	2b00      	cmp	r3, #0
 8000926:	d109      	bne.n	800093c <tx_application_define+0x38>
  {
    /* USER CODE BEGIN TX_Byte_Pool_Success */

    /* USER CODE END TX_Byte_Pool_Success */

    memory_ptr = (VOID *)&tx_app_byte_pool;
 8000928:	4b08      	ldr	r3, [pc, #32]	; (800094c <tx_application_define+0x48>)
 800092a:	60bb      	str	r3, [r7, #8]
    status = App_ThreadX_Init(memory_ptr);
 800092c:	68b8      	ldr	r0, [r7, #8]
 800092e:	f000 f80f 	bl	8000950 <App_ThreadX_Init>
 8000932:	60f8      	str	r0, [r7, #12]
    if (status != TX_SUCCESS)
 8000934:	68fb      	ldr	r3, [r7, #12]
 8000936:	2b00      	cmp	r3, #0
 8000938:	d000      	beq.n	800093c <tx_application_define+0x38>
    {
      /* USER CODE BEGIN  App_ThreadX_Init_Error */
      while(1)
 800093a:	e7fe      	b.n	800093a <tx_application_define+0x36>
  /* USER CODE BEGIN DYNAMIC_MEM_ALLOC */
  (void)first_unused_memory;
  /* USER CODE END DYNAMIC_MEM_ALLOC */
#endif

}
 800093c:	bf00      	nop
 800093e:	3710      	adds	r7, #16
 8000940:	46bd      	mov	sp, r7
 8000942:	bd80      	pop	{r7, pc}
 8000944:	24000154 	.word	0x24000154
 8000948:	080089f8 	.word	0x080089f8
 800094c:	24000554 	.word	0x24000554

08000950 <App_ThreadX_Init>:
  * @brief  Application ThreadX Initialization.
  * @param memory_ptr: memory pointer
  * @retval int
  */
UINT App_ThreadX_Init(VOID *memory_ptr)
{
 8000950:	b580      	push	{r7, lr}
 8000952:	b084      	sub	sp, #16
 8000954:	af00      	add	r7, sp, #0
 8000956:	6078      	str	r0, [r7, #4]
  UINT ret = TX_SUCCESS;
 8000958:	2300      	movs	r3, #0
 800095a:	60fb      	str	r3, [r7, #12]

  /* USER CODE BEGIN App_ThreadX_MEM_POOL */
  printf("***This test is running on the STM32H723ZG Nucleo with ThreadX_RTOS *** \n\r");
 800095c:	4804      	ldr	r0, [pc, #16]	; (8000970 <App_ThreadX_Init+0x20>)
 800095e:	f007 f8b1 	bl	8007ac4 <iprintf>
  tm_main();
 8000962:	f000 fd73 	bl	800144c <tm_main>

  /* USER CODE BEGIN App_ThreadX_Init */

  /* USER CODE END App_ThreadX_Init */

  return ret;
 8000966:	68fb      	ldr	r3, [r7, #12]
}
 8000968:	4618      	mov	r0, r3
 800096a:	3710      	adds	r7, #16
 800096c:	46bd      	mov	sp, r7
 800096e:	bd80      	pop	{r7, pc}
 8000970:	08008a0c 	.word	0x08008a0c

08000974 <MX_ThreadX_Init>:
  * @brief  Function that implements the kernel's initialization.
  * @param  None
  * @retval None
  */
void MX_ThreadX_Init(void)
{
 8000974:	b580      	push	{r7, lr}
 8000976:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN  Before_Kernel_Start */

  /* USER CODE END  Before_Kernel_Start */

  tx_kernel_enter();
 8000978:	f005 fede 	bl	8006738 <_tx_initialize_kernel_enter>

  /* USER CODE BEGIN  Kernel_Start_Error */

  /* USER CODE END  Kernel_Start_Error */
}
 800097c:	bf00      	nop
 800097e:	bd80      	pop	{r7, pc}

08000980 <_write>:
#define PUTCHAR_PROTOTYPE int __io_putchar(int ch)
/* USER CODE END PFP */

/* Private user code ---------------------------------------------------------*/
/* USER CODE BEGIN 0 */
int _write(int file, char *ptr, int len) {
 8000980:	b580      	push	{r7, lr}
 8000982:	b084      	sub	sp, #16
 8000984:	af00      	add	r7, sp, #0
 8000986:	60f8      	str	r0, [r7, #12]
 8000988:	60b9      	str	r1, [r7, #8]
 800098a:	607a      	str	r2, [r7, #4]
  HAL_UART_Transmit(&huart3, (uint8_t*) ptr, len, HAL_MAX_DELAY);
 800098c:	687b      	ldr	r3, [r7, #4]
 800098e:	b29a      	uxth	r2, r3
 8000990:	f04f 33ff 	mov.w	r3, #4294967295
 8000994:	68b9      	ldr	r1, [r7, #8]
 8000996:	4804      	ldr	r0, [pc, #16]	; (80009a8 <_write+0x28>)
 8000998:	f004 fbdc 	bl	8005154 <HAL_UART_Transmit>
  return len;
 800099c:	687b      	ldr	r3, [r7, #4]
}
 800099e:	4618      	mov	r0, r3
 80009a0:	3710      	adds	r7, #16
 80009a2:	46bd      	mov	sp, r7
 80009a4:	bd80      	pop	{r7, pc}
 80009a6:	bf00      	nop
 80009a8:	24000704 	.word	0x24000704

080009ac <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 80009ac:	b580      	push	{r7, lr}
 80009ae:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 80009b0:	f000 fec2 	bl	8001738 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 80009b4:	f000 f80e 	bl	80009d4 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 80009b8:	f000 f96a 	bl	8000c90 <MX_GPIO_Init>
  MX_ETH_Init();
 80009bc:	f000 f87a 	bl	8000ab4 <MX_ETH_Init>
  MX_USART3_UART_Init();
 80009c0:	f000 f912 	bl	8000be8 <MX_USART3_UART_Init>
  MX_USB_OTG_HS_USB_Init();
 80009c4:	f000 f95c 	bl	8000c80 <MX_USB_OTG_HS_USB_Init>
  MX_USART2_UART_Init();
 80009c8:	f000 f8c0 	bl	8000b4c <MX_USART2_UART_Init>
  /* USER CODE BEGIN 2 */

  /* USER CODE END 2 */

  MX_ThreadX_Init();
 80009cc:	f7ff ffd2 	bl	8000974 <MX_ThreadX_Init>

  /* We should never get here as control is now taken by the scheduler */
  /* Infinite loop */
  /* USER CODE BEGIN WHILE */

  while (1)
 80009d0:	e7fe      	b.n	80009d0 <main+0x24>
	...

080009d4 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 80009d4:	b580      	push	{r7, lr}
 80009d6:	b09c      	sub	sp, #112	; 0x70
 80009d8:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 80009da:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80009de:	224c      	movs	r2, #76	; 0x4c
 80009e0:	2100      	movs	r1, #0
 80009e2:	4618      	mov	r0, r3
 80009e4:	f007 f866 	bl	8007ab4 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 80009e8:	1d3b      	adds	r3, r7, #4
 80009ea:	2220      	movs	r2, #32
 80009ec:	2100      	movs	r1, #0
 80009ee:	4618      	mov	r0, r3
 80009f0:	f007 f860 	bl	8007ab4 <memset>

  /** Supply configuration update enable
  */
  HAL_PWREx_ConfigSupply(PWR_LDO_SUPPLY);
 80009f4:	2002      	movs	r0, #2
 80009f6:	f001 fdfb 	bl	80025f0 <HAL_PWREx_ConfigSupply>

  /** Configure the main internal regulator output voltage
  */
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE0);
 80009fa:	2300      	movs	r3, #0
 80009fc:	603b      	str	r3, [r7, #0]
 80009fe:	4b2c      	ldr	r3, [pc, #176]	; (8000ab0 <SystemClock_Config+0xdc>)
 8000a00:	699b      	ldr	r3, [r3, #24]
 8000a02:	4a2b      	ldr	r2, [pc, #172]	; (8000ab0 <SystemClock_Config+0xdc>)
 8000a04:	f423 4340 	bic.w	r3, r3, #49152	; 0xc000
 8000a08:	6193      	str	r3, [r2, #24]
 8000a0a:	4b29      	ldr	r3, [pc, #164]	; (8000ab0 <SystemClock_Config+0xdc>)
 8000a0c:	699b      	ldr	r3, [r3, #24]
 8000a0e:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 8000a12:	603b      	str	r3, [r7, #0]
 8000a14:	683b      	ldr	r3, [r7, #0]

  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_VOSRDY)) {}
 8000a16:	bf00      	nop
 8000a18:	4b25      	ldr	r3, [pc, #148]	; (8000ab0 <SystemClock_Config+0xdc>)
 8000a1a:	699b      	ldr	r3, [r3, #24]
 8000a1c:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8000a20:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8000a24:	d1f8      	bne.n	8000a18 <SystemClock_Config+0x44>

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI48|RCC_OSCILLATORTYPE_HSE;
 8000a26:	2321      	movs	r3, #33	; 0x21
 8000a28:	627b      	str	r3, [r7, #36]	; 0x24
  RCC_OscInitStruct.HSEState = RCC_HSE_BYPASS;
 8000a2a:	f44f 23a0 	mov.w	r3, #327680	; 0x50000
 8000a2e:	62bb      	str	r3, [r7, #40]	; 0x28
  RCC_OscInitStruct.HSI48State = RCC_HSI48_ON;
 8000a30:	2301      	movs	r3, #1
 8000a32:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8000a34:	2302      	movs	r3, #2
 8000a36:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 8000a38:	2302      	movs	r3, #2
 8000a3a:	64fb      	str	r3, [r7, #76]	; 0x4c
  RCC_OscInitStruct.PLL.PLLM = 4;
 8000a3c:	2304      	movs	r3, #4
 8000a3e:	653b      	str	r3, [r7, #80]	; 0x50
  RCC_OscInitStruct.PLL.PLLN = 275;
 8000a40:	f240 1313 	movw	r3, #275	; 0x113
 8000a44:	657b      	str	r3, [r7, #84]	; 0x54
  RCC_OscInitStruct.PLL.PLLP = 1;
 8000a46:	2301      	movs	r3, #1
 8000a48:	65bb      	str	r3, [r7, #88]	; 0x58
  RCC_OscInitStruct.PLL.PLLQ = 4;
 8000a4a:	2304      	movs	r3, #4
 8000a4c:	65fb      	str	r3, [r7, #92]	; 0x5c
  RCC_OscInitStruct.PLL.PLLR = 2;
 8000a4e:	2302      	movs	r3, #2
 8000a50:	663b      	str	r3, [r7, #96]	; 0x60
  RCC_OscInitStruct.PLL.PLLRGE = RCC_PLL1VCIRANGE_1;
 8000a52:	2304      	movs	r3, #4
 8000a54:	667b      	str	r3, [r7, #100]	; 0x64
  RCC_OscInitStruct.PLL.PLLVCOSEL = RCC_PLL1VCOWIDE;
 8000a56:	2300      	movs	r3, #0
 8000a58:	66bb      	str	r3, [r7, #104]	; 0x68
  RCC_OscInitStruct.PLL.PLLFRACN = 0;
 8000a5a:	2300      	movs	r3, #0
 8000a5c:	66fb      	str	r3, [r7, #108]	; 0x6c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000a5e:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000a62:	4618      	mov	r0, r3
 8000a64:	f001 fdfe 	bl	8002664 <HAL_RCC_OscConfig>
 8000a68:	4603      	mov	r3, r0
 8000a6a:	2b00      	cmp	r3, #0
 8000a6c:	d001      	beq.n	8000a72 <SystemClock_Config+0x9e>
  {
    Error_Handler();
 8000a6e:	f000 fa0b 	bl	8000e88 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000a72:	233f      	movs	r3, #63	; 0x3f
 8000a74:	607b      	str	r3, [r7, #4]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2
                              |RCC_CLOCKTYPE_D3PCLK1|RCC_CLOCKTYPE_D1PCLK1;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8000a76:	2303      	movs	r3, #3
 8000a78:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.SYSCLKDivider = RCC_SYSCLK_DIV1;
 8000a7a:	2300      	movs	r3, #0
 8000a7c:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_HCLK_DIV2;
 8000a7e:	2308      	movs	r3, #8
 8000a80:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB3CLKDivider = RCC_APB3_DIV2;
 8000a82:	2340      	movs	r3, #64	; 0x40
 8000a84:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_APB1_DIV2;
 8000a86:	2340      	movs	r3, #64	; 0x40
 8000a88:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_APB2_DIV2;
 8000a8a:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8000a8e:	61fb      	str	r3, [r7, #28]
  RCC_ClkInitStruct.APB4CLKDivider = RCC_APB4_DIV2;
 8000a90:	2340      	movs	r3, #64	; 0x40
 8000a92:	623b      	str	r3, [r7, #32]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_3) != HAL_OK)
 8000a94:	1d3b      	adds	r3, r7, #4
 8000a96:	2103      	movs	r1, #3
 8000a98:	4618      	mov	r0, r3
 8000a9a:	f002 f9bd 	bl	8002e18 <HAL_RCC_ClockConfig>
 8000a9e:	4603      	mov	r3, r0
 8000aa0:	2b00      	cmp	r3, #0
 8000aa2:	d001      	beq.n	8000aa8 <SystemClock_Config+0xd4>
  {
    Error_Handler();
 8000aa4:	f000 f9f0 	bl	8000e88 <Error_Handler>
  }
}
 8000aa8:	bf00      	nop
 8000aaa:	3770      	adds	r7, #112	; 0x70
 8000aac:	46bd      	mov	sp, r7
 8000aae:	bd80      	pop	{r7, pc}
 8000ab0:	58024800 	.word	0x58024800

08000ab4 <MX_ETH_Init>:
  * @brief ETH Initialization Function
  * @param None
  * @retval None
  */
static void MX_ETH_Init(void)
{
 8000ab4:	b580      	push	{r7, lr}
 8000ab6:	af00      	add	r7, sp, #0
   static uint8_t MACAddr[6];

  /* USER CODE BEGIN ETH_Init 1 */

  /* USER CODE END ETH_Init 1 */
  heth.Instance = ETH;
 8000ab8:	4b1e      	ldr	r3, [pc, #120]	; (8000b34 <MX_ETH_Init+0x80>)
 8000aba:	4a1f      	ldr	r2, [pc, #124]	; (8000b38 <MX_ETH_Init+0x84>)
 8000abc:	601a      	str	r2, [r3, #0]
  MACAddr[0] = 0x00;
 8000abe:	4b1f      	ldr	r3, [pc, #124]	; (8000b3c <MX_ETH_Init+0x88>)
 8000ac0:	2200      	movs	r2, #0
 8000ac2:	701a      	strb	r2, [r3, #0]
  MACAddr[1] = 0x80;
 8000ac4:	4b1d      	ldr	r3, [pc, #116]	; (8000b3c <MX_ETH_Init+0x88>)
 8000ac6:	2280      	movs	r2, #128	; 0x80
 8000ac8:	705a      	strb	r2, [r3, #1]
  MACAddr[2] = 0xE1;
 8000aca:	4b1c      	ldr	r3, [pc, #112]	; (8000b3c <MX_ETH_Init+0x88>)
 8000acc:	22e1      	movs	r2, #225	; 0xe1
 8000ace:	709a      	strb	r2, [r3, #2]
  MACAddr[3] = 0x00;
 8000ad0:	4b1a      	ldr	r3, [pc, #104]	; (8000b3c <MX_ETH_Init+0x88>)
 8000ad2:	2200      	movs	r2, #0
 8000ad4:	70da      	strb	r2, [r3, #3]
  MACAddr[4] = 0x00;
 8000ad6:	4b19      	ldr	r3, [pc, #100]	; (8000b3c <MX_ETH_Init+0x88>)
 8000ad8:	2200      	movs	r2, #0
 8000ada:	711a      	strb	r2, [r3, #4]
  MACAddr[5] = 0x00;
 8000adc:	4b17      	ldr	r3, [pc, #92]	; (8000b3c <MX_ETH_Init+0x88>)
 8000ade:	2200      	movs	r2, #0
 8000ae0:	715a      	strb	r2, [r3, #5]
  heth.Init.MACAddr = &MACAddr[0];
 8000ae2:	4b14      	ldr	r3, [pc, #80]	; (8000b34 <MX_ETH_Init+0x80>)
 8000ae4:	4a15      	ldr	r2, [pc, #84]	; (8000b3c <MX_ETH_Init+0x88>)
 8000ae6:	605a      	str	r2, [r3, #4]
  heth.Init.MediaInterface = HAL_ETH_RMII_MODE;
 8000ae8:	4b12      	ldr	r3, [pc, #72]	; (8000b34 <MX_ETH_Init+0x80>)
 8000aea:	2201      	movs	r2, #1
 8000aec:	721a      	strb	r2, [r3, #8]
  heth.Init.TxDesc = DMATxDscrTab;
 8000aee:	4b11      	ldr	r3, [pc, #68]	; (8000b34 <MX_ETH_Init+0x80>)
 8000af0:	4a13      	ldr	r2, [pc, #76]	; (8000b40 <MX_ETH_Init+0x8c>)
 8000af2:	60da      	str	r2, [r3, #12]
  heth.Init.RxDesc = DMARxDscrTab;
 8000af4:	4b0f      	ldr	r3, [pc, #60]	; (8000b34 <MX_ETH_Init+0x80>)
 8000af6:	4a13      	ldr	r2, [pc, #76]	; (8000b44 <MX_ETH_Init+0x90>)
 8000af8:	611a      	str	r2, [r3, #16]
  heth.Init.RxBuffLen = 1536;
 8000afa:	4b0e      	ldr	r3, [pc, #56]	; (8000b34 <MX_ETH_Init+0x80>)
 8000afc:	f44f 62c0 	mov.w	r2, #1536	; 0x600
 8000b00:	615a      	str	r2, [r3, #20]

  /* USER CODE BEGIN MACADDRESS */

  /* USER CODE END MACADDRESS */

  if (HAL_ETH_Init(&heth) != HAL_OK)
 8000b02:	480c      	ldr	r0, [pc, #48]	; (8000b34 <MX_ETH_Init+0x80>)
 8000b04:	f000 ff8e 	bl	8001a24 <HAL_ETH_Init>
 8000b08:	4603      	mov	r3, r0
 8000b0a:	2b00      	cmp	r3, #0
 8000b0c:	d001      	beq.n	8000b12 <MX_ETH_Init+0x5e>
  {
    Error_Handler();
 8000b0e:	f000 f9bb 	bl	8000e88 <Error_Handler>
  }

  memset(&TxConfig, 0 , sizeof(ETH_TxPacketConfig));
 8000b12:	2238      	movs	r2, #56	; 0x38
 8000b14:	2100      	movs	r1, #0
 8000b16:	480c      	ldr	r0, [pc, #48]	; (8000b48 <MX_ETH_Init+0x94>)
 8000b18:	f006 ffcc 	bl	8007ab4 <memset>
  TxConfig.Attributes = ETH_TX_PACKETS_FEATURES_CSUM | ETH_TX_PACKETS_FEATURES_CRCPAD;
 8000b1c:	4b0a      	ldr	r3, [pc, #40]	; (8000b48 <MX_ETH_Init+0x94>)
 8000b1e:	2221      	movs	r2, #33	; 0x21
 8000b20:	601a      	str	r2, [r3, #0]
  TxConfig.ChecksumCtrl = ETH_CHECKSUM_IPHDR_PAYLOAD_INSERT_PHDR_CALC;
 8000b22:	4b09      	ldr	r3, [pc, #36]	; (8000b48 <MX_ETH_Init+0x94>)
 8000b24:	f44f 3240 	mov.w	r2, #196608	; 0x30000
 8000b28:	615a      	str	r2, [r3, #20]
  TxConfig.CRCPadCtrl = ETH_CRC_PAD_INSERT;
 8000b2a:	4b07      	ldr	r3, [pc, #28]	; (8000b48 <MX_ETH_Init+0x94>)
 8000b2c:	2200      	movs	r2, #0
 8000b2e:	611a      	str	r2, [r3, #16]
  /* USER CODE BEGIN ETH_Init 2 */

  /* USER CODE END ETH_Init 2 */

}
 8000b30:	bf00      	nop
 8000b32:	bd80      	pop	{r7, pc}
 8000b34:	240005c0 	.word	0x240005c0
 8000b38:	40028000 	.word	0x40028000
 8000b3c:	24000798 	.word	0x24000798
 8000b40:	240000d8 	.word	0x240000d8
 8000b44:	24000078 	.word	0x24000078
 8000b48:	24000588 	.word	0x24000588

08000b4c <MX_USART2_UART_Init>:
  * @brief USART2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART2_UART_Init(void)
{
 8000b4c:	b580      	push	{r7, lr}
 8000b4e:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 8000b50:	4b23      	ldr	r3, [pc, #140]	; (8000be0 <MX_USART2_UART_Init+0x94>)
 8000b52:	4a24      	ldr	r2, [pc, #144]	; (8000be4 <MX_USART2_UART_Init+0x98>)
 8000b54:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 115200;
 8000b56:	4b22      	ldr	r3, [pc, #136]	; (8000be0 <MX_USART2_UART_Init+0x94>)
 8000b58:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8000b5c:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_7B;
 8000b5e:	4b20      	ldr	r3, [pc, #128]	; (8000be0 <MX_USART2_UART_Init+0x94>)
 8000b60:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8000b64:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 8000b66:	4b1e      	ldr	r3, [pc, #120]	; (8000be0 <MX_USART2_UART_Init+0x94>)
 8000b68:	2200      	movs	r2, #0
 8000b6a:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 8000b6c:	4b1c      	ldr	r3, [pc, #112]	; (8000be0 <MX_USART2_UART_Init+0x94>)
 8000b6e:	2200      	movs	r2, #0
 8000b70:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 8000b72:	4b1b      	ldr	r3, [pc, #108]	; (8000be0 <MX_USART2_UART_Init+0x94>)
 8000b74:	220c      	movs	r2, #12
 8000b76:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8000b78:	4b19      	ldr	r3, [pc, #100]	; (8000be0 <MX_USART2_UART_Init+0x94>)
 8000b7a:	2200      	movs	r2, #0
 8000b7c:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 8000b7e:	4b18      	ldr	r3, [pc, #96]	; (8000be0 <MX_USART2_UART_Init+0x94>)
 8000b80:	2200      	movs	r2, #0
 8000b82:	61da      	str	r2, [r3, #28]
  huart2.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8000b84:	4b16      	ldr	r3, [pc, #88]	; (8000be0 <MX_USART2_UART_Init+0x94>)
 8000b86:	2200      	movs	r2, #0
 8000b88:	621a      	str	r2, [r3, #32]
  huart2.Init.ClockPrescaler = UART_PRESCALER_DIV1;
 8000b8a:	4b15      	ldr	r3, [pc, #84]	; (8000be0 <MX_USART2_UART_Init+0x94>)
 8000b8c:	2200      	movs	r2, #0
 8000b8e:	625a      	str	r2, [r3, #36]	; 0x24
  huart2.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8000b90:	4b13      	ldr	r3, [pc, #76]	; (8000be0 <MX_USART2_UART_Init+0x94>)
 8000b92:	2200      	movs	r2, #0
 8000b94:	629a      	str	r2, [r3, #40]	; 0x28
  if (HAL_UART_Init(&huart2) != HAL_OK)
 8000b96:	4812      	ldr	r0, [pc, #72]	; (8000be0 <MX_USART2_UART_Init+0x94>)
 8000b98:	f004 fa8c 	bl	80050b4 <HAL_UART_Init>
 8000b9c:	4603      	mov	r3, r0
 8000b9e:	2b00      	cmp	r3, #0
 8000ba0:	d001      	beq.n	8000ba6 <MX_USART2_UART_Init+0x5a>
  {
    Error_Handler();
 8000ba2:	f000 f971 	bl	8000e88 <Error_Handler>
  }
  if (HAL_UARTEx_SetTxFifoThreshold(&huart2, UART_TXFIFO_THRESHOLD_1_8) != HAL_OK)
 8000ba6:	2100      	movs	r1, #0
 8000ba8:	480d      	ldr	r0, [pc, #52]	; (8000be0 <MX_USART2_UART_Init+0x94>)
 8000baa:	f005 fc20 	bl	80063ee <HAL_UARTEx_SetTxFifoThreshold>
 8000bae:	4603      	mov	r3, r0
 8000bb0:	2b00      	cmp	r3, #0
 8000bb2:	d001      	beq.n	8000bb8 <MX_USART2_UART_Init+0x6c>
  {
    Error_Handler();
 8000bb4:	f000 f968 	bl	8000e88 <Error_Handler>
  }
  if (HAL_UARTEx_SetRxFifoThreshold(&huart2, UART_RXFIFO_THRESHOLD_1_8) != HAL_OK)
 8000bb8:	2100      	movs	r1, #0
 8000bba:	4809      	ldr	r0, [pc, #36]	; (8000be0 <MX_USART2_UART_Init+0x94>)
 8000bbc:	f005 fc55 	bl	800646a <HAL_UARTEx_SetRxFifoThreshold>
 8000bc0:	4603      	mov	r3, r0
 8000bc2:	2b00      	cmp	r3, #0
 8000bc4:	d001      	beq.n	8000bca <MX_USART2_UART_Init+0x7e>
  {
    Error_Handler();
 8000bc6:	f000 f95f 	bl	8000e88 <Error_Handler>
  }
  if (HAL_UARTEx_DisableFifoMode(&huart2) != HAL_OK)
 8000bca:	4805      	ldr	r0, [pc, #20]	; (8000be0 <MX_USART2_UART_Init+0x94>)
 8000bcc:	f005 fbd6 	bl	800637c <HAL_UARTEx_DisableFifoMode>
 8000bd0:	4603      	mov	r3, r0
 8000bd2:	2b00      	cmp	r3, #0
 8000bd4:	d001      	beq.n	8000bda <MX_USART2_UART_Init+0x8e>
  {
    Error_Handler();
 8000bd6:	f000 f957 	bl	8000e88 <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 8000bda:	bf00      	nop
 8000bdc:	bd80      	pop	{r7, pc}
 8000bde:	bf00      	nop
 8000be0:	24000670 	.word	0x24000670
 8000be4:	40004400 	.word	0x40004400

08000be8 <MX_USART3_UART_Init>:
  * @brief USART3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART3_UART_Init(void)
{
 8000be8:	b580      	push	{r7, lr}
 8000bea:	af00      	add	r7, sp, #0
  /* USER CODE END USART3_Init 0 */

  /* USER CODE BEGIN USART3_Init 1 */

  /* USER CODE END USART3_Init 1 */
  huart3.Instance = USART3;
 8000bec:	4b22      	ldr	r3, [pc, #136]	; (8000c78 <MX_USART3_UART_Init+0x90>)
 8000bee:	4a23      	ldr	r2, [pc, #140]	; (8000c7c <MX_USART3_UART_Init+0x94>)
 8000bf0:	601a      	str	r2, [r3, #0]
  huart3.Init.BaudRate = 115200;
 8000bf2:	4b21      	ldr	r3, [pc, #132]	; (8000c78 <MX_USART3_UART_Init+0x90>)
 8000bf4:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8000bf8:	605a      	str	r2, [r3, #4]
  huart3.Init.WordLength = UART_WORDLENGTH_8B;
 8000bfa:	4b1f      	ldr	r3, [pc, #124]	; (8000c78 <MX_USART3_UART_Init+0x90>)
 8000bfc:	2200      	movs	r2, #0
 8000bfe:	609a      	str	r2, [r3, #8]
  huart3.Init.StopBits = UART_STOPBITS_1;
 8000c00:	4b1d      	ldr	r3, [pc, #116]	; (8000c78 <MX_USART3_UART_Init+0x90>)
 8000c02:	2200      	movs	r2, #0
 8000c04:	60da      	str	r2, [r3, #12]
  huart3.Init.Parity = UART_PARITY_NONE;
 8000c06:	4b1c      	ldr	r3, [pc, #112]	; (8000c78 <MX_USART3_UART_Init+0x90>)
 8000c08:	2200      	movs	r2, #0
 8000c0a:	611a      	str	r2, [r3, #16]
  huart3.Init.Mode = UART_MODE_TX_RX;
 8000c0c:	4b1a      	ldr	r3, [pc, #104]	; (8000c78 <MX_USART3_UART_Init+0x90>)
 8000c0e:	220c      	movs	r2, #12
 8000c10:	615a      	str	r2, [r3, #20]
  huart3.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8000c12:	4b19      	ldr	r3, [pc, #100]	; (8000c78 <MX_USART3_UART_Init+0x90>)
 8000c14:	2200      	movs	r2, #0
 8000c16:	619a      	str	r2, [r3, #24]
  huart3.Init.OverSampling = UART_OVERSAMPLING_16;
 8000c18:	4b17      	ldr	r3, [pc, #92]	; (8000c78 <MX_USART3_UART_Init+0x90>)
 8000c1a:	2200      	movs	r2, #0
 8000c1c:	61da      	str	r2, [r3, #28]
  huart3.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8000c1e:	4b16      	ldr	r3, [pc, #88]	; (8000c78 <MX_USART3_UART_Init+0x90>)
 8000c20:	2200      	movs	r2, #0
 8000c22:	621a      	str	r2, [r3, #32]
  huart3.Init.ClockPrescaler = UART_PRESCALER_DIV1;
 8000c24:	4b14      	ldr	r3, [pc, #80]	; (8000c78 <MX_USART3_UART_Init+0x90>)
 8000c26:	2200      	movs	r2, #0
 8000c28:	625a      	str	r2, [r3, #36]	; 0x24
  huart3.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8000c2a:	4b13      	ldr	r3, [pc, #76]	; (8000c78 <MX_USART3_UART_Init+0x90>)
 8000c2c:	2200      	movs	r2, #0
 8000c2e:	629a      	str	r2, [r3, #40]	; 0x28
  if (HAL_UART_Init(&huart3) != HAL_OK)
 8000c30:	4811      	ldr	r0, [pc, #68]	; (8000c78 <MX_USART3_UART_Init+0x90>)
 8000c32:	f004 fa3f 	bl	80050b4 <HAL_UART_Init>
 8000c36:	4603      	mov	r3, r0
 8000c38:	2b00      	cmp	r3, #0
 8000c3a:	d001      	beq.n	8000c40 <MX_USART3_UART_Init+0x58>
  {
    Error_Handler();
 8000c3c:	f000 f924 	bl	8000e88 <Error_Handler>
  }
  if (HAL_UARTEx_SetTxFifoThreshold(&huart3, UART_TXFIFO_THRESHOLD_1_8) != HAL_OK)
 8000c40:	2100      	movs	r1, #0
 8000c42:	480d      	ldr	r0, [pc, #52]	; (8000c78 <MX_USART3_UART_Init+0x90>)
 8000c44:	f005 fbd3 	bl	80063ee <HAL_UARTEx_SetTxFifoThreshold>
 8000c48:	4603      	mov	r3, r0
 8000c4a:	2b00      	cmp	r3, #0
 8000c4c:	d001      	beq.n	8000c52 <MX_USART3_UART_Init+0x6a>
  {
    Error_Handler();
 8000c4e:	f000 f91b 	bl	8000e88 <Error_Handler>
  }
  if (HAL_UARTEx_SetRxFifoThreshold(&huart3, UART_RXFIFO_THRESHOLD_1_8) != HAL_OK)
 8000c52:	2100      	movs	r1, #0
 8000c54:	4808      	ldr	r0, [pc, #32]	; (8000c78 <MX_USART3_UART_Init+0x90>)
 8000c56:	f005 fc08 	bl	800646a <HAL_UARTEx_SetRxFifoThreshold>
 8000c5a:	4603      	mov	r3, r0
 8000c5c:	2b00      	cmp	r3, #0
 8000c5e:	d001      	beq.n	8000c64 <MX_USART3_UART_Init+0x7c>
  {
    Error_Handler();
 8000c60:	f000 f912 	bl	8000e88 <Error_Handler>
  }
  if (HAL_UARTEx_DisableFifoMode(&huart3) != HAL_OK)
 8000c64:	4804      	ldr	r0, [pc, #16]	; (8000c78 <MX_USART3_UART_Init+0x90>)
 8000c66:	f005 fb89 	bl	800637c <HAL_UARTEx_DisableFifoMode>
 8000c6a:	4603      	mov	r3, r0
 8000c6c:	2b00      	cmp	r3, #0
 8000c6e:	d001      	beq.n	8000c74 <MX_USART3_UART_Init+0x8c>
  {
    Error_Handler();
 8000c70:	f000 f90a 	bl	8000e88 <Error_Handler>
  }
  /* USER CODE BEGIN USART3_Init 2 */

  /* USER CODE END USART3_Init 2 */

}
 8000c74:	bf00      	nop
 8000c76:	bd80      	pop	{r7, pc}
 8000c78:	24000704 	.word	0x24000704
 8000c7c:	40004800 	.word	0x40004800

08000c80 <MX_USB_OTG_HS_USB_Init>:
  * @brief USB_OTG_HS Initialization Function
  * @param None
  * @retval None
  */
static void MX_USB_OTG_HS_USB_Init(void)
{
 8000c80:	b480      	push	{r7}
 8000c82:	af00      	add	r7, sp, #0
  /* USER CODE END USB_OTG_HS_Init 1 */
  /* USER CODE BEGIN USB_OTG_HS_Init 2 */

  /* USER CODE END USB_OTG_HS_Init 2 */

}
 8000c84:	bf00      	nop
 8000c86:	46bd      	mov	sp, r7
 8000c88:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000c8c:	4770      	bx	lr
	...

08000c90 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8000c90:	b580      	push	{r7, lr}
 8000c92:	b08c      	sub	sp, #48	; 0x30
 8000c94:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000c96:	f107 031c 	add.w	r3, r7, #28
 8000c9a:	2200      	movs	r2, #0
 8000c9c:	601a      	str	r2, [r3, #0]
 8000c9e:	605a      	str	r2, [r3, #4]
 8000ca0:	609a      	str	r2, [r3, #8]
 8000ca2:	60da      	str	r2, [r3, #12]
 8000ca4:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8000ca6:	4b71      	ldr	r3, [pc, #452]	; (8000e6c <MX_GPIO_Init+0x1dc>)
 8000ca8:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000cac:	4a6f      	ldr	r2, [pc, #444]	; (8000e6c <MX_GPIO_Init+0x1dc>)
 8000cae:	f043 0304 	orr.w	r3, r3, #4
 8000cb2:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8000cb6:	4b6d      	ldr	r3, [pc, #436]	; (8000e6c <MX_GPIO_Init+0x1dc>)
 8000cb8:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000cbc:	f003 0304 	and.w	r3, r3, #4
 8000cc0:	61bb      	str	r3, [r7, #24]
 8000cc2:	69bb      	ldr	r3, [r7, #24]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 8000cc4:	4b69      	ldr	r3, [pc, #420]	; (8000e6c <MX_GPIO_Init+0x1dc>)
 8000cc6:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000cca:	4a68      	ldr	r2, [pc, #416]	; (8000e6c <MX_GPIO_Init+0x1dc>)
 8000ccc:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8000cd0:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8000cd4:	4b65      	ldr	r3, [pc, #404]	; (8000e6c <MX_GPIO_Init+0x1dc>)
 8000cd6:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000cda:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8000cde:	617b      	str	r3, [r7, #20]
 8000ce0:	697b      	ldr	r3, [r7, #20]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000ce2:	4b62      	ldr	r3, [pc, #392]	; (8000e6c <MX_GPIO_Init+0x1dc>)
 8000ce4:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000ce8:	4a60      	ldr	r2, [pc, #384]	; (8000e6c <MX_GPIO_Init+0x1dc>)
 8000cea:	f043 0301 	orr.w	r3, r3, #1
 8000cee:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8000cf2:	4b5e      	ldr	r3, [pc, #376]	; (8000e6c <MX_GPIO_Init+0x1dc>)
 8000cf4:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000cf8:	f003 0301 	and.w	r3, r3, #1
 8000cfc:	613b      	str	r3, [r7, #16]
 8000cfe:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8000d00:	4b5a      	ldr	r3, [pc, #360]	; (8000e6c <MX_GPIO_Init+0x1dc>)
 8000d02:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000d06:	4a59      	ldr	r2, [pc, #356]	; (8000e6c <MX_GPIO_Init+0x1dc>)
 8000d08:	f043 0302 	orr.w	r3, r3, #2
 8000d0c:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8000d10:	4b56      	ldr	r3, [pc, #344]	; (8000e6c <MX_GPIO_Init+0x1dc>)
 8000d12:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000d16:	f003 0302 	and.w	r3, r3, #2
 8000d1a:	60fb      	str	r3, [r7, #12]
 8000d1c:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8000d1e:	4b53      	ldr	r3, [pc, #332]	; (8000e6c <MX_GPIO_Init+0x1dc>)
 8000d20:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000d24:	4a51      	ldr	r2, [pc, #324]	; (8000e6c <MX_GPIO_Init+0x1dc>)
 8000d26:	f043 0308 	orr.w	r3, r3, #8
 8000d2a:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8000d2e:	4b4f      	ldr	r3, [pc, #316]	; (8000e6c <MX_GPIO_Init+0x1dc>)
 8000d30:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000d34:	f003 0308 	and.w	r3, r3, #8
 8000d38:	60bb      	str	r3, [r7, #8]
 8000d3a:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOG_CLK_ENABLE();
 8000d3c:	4b4b      	ldr	r3, [pc, #300]	; (8000e6c <MX_GPIO_Init+0x1dc>)
 8000d3e:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000d42:	4a4a      	ldr	r2, [pc, #296]	; (8000e6c <MX_GPIO_Init+0x1dc>)
 8000d44:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8000d48:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8000d4c:	4b47      	ldr	r3, [pc, #284]	; (8000e6c <MX_GPIO_Init+0x1dc>)
 8000d4e:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000d52:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8000d56:	607b      	str	r3, [r7, #4]
 8000d58:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOE_CLK_ENABLE();
 8000d5a:	4b44      	ldr	r3, [pc, #272]	; (8000e6c <MX_GPIO_Init+0x1dc>)
 8000d5c:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000d60:	4a42      	ldr	r2, [pc, #264]	; (8000e6c <MX_GPIO_Init+0x1dc>)
 8000d62:	f043 0310 	orr.w	r3, r3, #16
 8000d66:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8000d6a:	4b40      	ldr	r3, [pc, #256]	; (8000e6c <MX_GPIO_Init+0x1dc>)
 8000d6c:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000d70:	f003 0310 	and.w	r3, r3, #16
 8000d74:	603b      	str	r3, [r7, #0]
 8000d76:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, LED_GREEN_Pin|LED_RED_Pin, GPIO_PIN_RESET);
 8000d78:	2200      	movs	r2, #0
 8000d7a:	f244 0101 	movw	r1, #16385	; 0x4001
 8000d7e:	483c      	ldr	r0, [pc, #240]	; (8000e70 <MX_GPIO_Init+0x1e0>)
 8000d80:	f001 fc1c 	bl	80025bc <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(USB_FS_PWR_EN_GPIO_Port, USB_FS_PWR_EN_Pin, GPIO_PIN_RESET);
 8000d84:	2200      	movs	r2, #0
 8000d86:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8000d8a:	483a      	ldr	r0, [pc, #232]	; (8000e74 <MX_GPIO_Init+0x1e4>)
 8000d8c:	f001 fc16 	bl	80025bc <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(LED_YELLOW_GPIO_Port, LED_YELLOW_Pin, GPIO_PIN_RESET);
 8000d90:	2200      	movs	r2, #0
 8000d92:	2102      	movs	r1, #2
 8000d94:	4838      	ldr	r0, [pc, #224]	; (8000e78 <MX_GPIO_Init+0x1e8>)
 8000d96:	f001 fc11 	bl	80025bc <HAL_GPIO_WritePin>

  /*Configure GPIO pin : B1_Pin */
  GPIO_InitStruct.Pin = B1_Pin;
 8000d9a:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8000d9e:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000da0:	2300      	movs	r3, #0
 8000da2:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000da4:	2300      	movs	r3, #0
 8000da6:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(B1_GPIO_Port, &GPIO_InitStruct);
 8000da8:	f107 031c 	add.w	r3, r7, #28
 8000dac:	4619      	mov	r1, r3
 8000dae:	4833      	ldr	r0, [pc, #204]	; (8000e7c <MX_GPIO_Init+0x1ec>)
 8000db0:	f001 fa5c 	bl	800226c <HAL_GPIO_Init>

  /*Configure GPIO pins : LED_GREEN_Pin LED_RED_Pin */
  GPIO_InitStruct.Pin = LED_GREEN_Pin|LED_RED_Pin;
 8000db4:	f244 0301 	movw	r3, #16385	; 0x4001
 8000db8:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000dba:	2301      	movs	r3, #1
 8000dbc:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000dbe:	2300      	movs	r3, #0
 8000dc0:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000dc2:	2300      	movs	r3, #0
 8000dc4:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000dc6:	f107 031c 	add.w	r3, r7, #28
 8000dca:	4619      	mov	r1, r3
 8000dcc:	4828      	ldr	r0, [pc, #160]	; (8000e70 <MX_GPIO_Init+0x1e0>)
 8000dce:	f001 fa4d 	bl	800226c <HAL_GPIO_Init>

  /*Configure GPIO pin : USB_FS_PWR_EN_Pin */
  GPIO_InitStruct.Pin = USB_FS_PWR_EN_Pin;
 8000dd2:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8000dd6:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000dd8:	2301      	movs	r3, #1
 8000dda:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000ddc:	2300      	movs	r3, #0
 8000dde:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000de0:	2300      	movs	r3, #0
 8000de2:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(USB_FS_PWR_EN_GPIO_Port, &GPIO_InitStruct);
 8000de4:	f107 031c 	add.w	r3, r7, #28
 8000de8:	4619      	mov	r1, r3
 8000dea:	4822      	ldr	r0, [pc, #136]	; (8000e74 <MX_GPIO_Init+0x1e4>)
 8000dec:	f001 fa3e 	bl	800226c <HAL_GPIO_Init>

  /*Configure GPIO pin : USB_FS_OVCR_Pin */
  GPIO_InitStruct.Pin = USB_FS_OVCR_Pin;
 8000df0:	2380      	movs	r3, #128	; 0x80
 8000df2:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 8000df4:	f44f 1388 	mov.w	r3, #1114112	; 0x110000
 8000df8:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000dfa:	2300      	movs	r3, #0
 8000dfc:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(USB_FS_OVCR_GPIO_Port, &GPIO_InitStruct);
 8000dfe:	f107 031c 	add.w	r3, r7, #28
 8000e02:	4619      	mov	r1, r3
 8000e04:	481e      	ldr	r0, [pc, #120]	; (8000e80 <MX_GPIO_Init+0x1f0>)
 8000e06:	f001 fa31 	bl	800226c <HAL_GPIO_Init>

  /*Configure GPIO pin : USB_FS_VBUS_Pin */
  GPIO_InitStruct.Pin = USB_FS_VBUS_Pin;
 8000e0a:	f44f 7300 	mov.w	r3, #512	; 0x200
 8000e0e:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000e10:	2300      	movs	r3, #0
 8000e12:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000e14:	2300      	movs	r3, #0
 8000e16:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(USB_FS_VBUS_GPIO_Port, &GPIO_InitStruct);
 8000e18:	f107 031c 	add.w	r3, r7, #28
 8000e1c:	4619      	mov	r1, r3
 8000e1e:	4819      	ldr	r0, [pc, #100]	; (8000e84 <MX_GPIO_Init+0x1f4>)
 8000e20:	f001 fa24 	bl	800226c <HAL_GPIO_Init>

  /*Configure GPIO pin : USB_FS_ID_Pin */
  GPIO_InitStruct.Pin = USB_FS_ID_Pin;
 8000e24:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8000e28:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000e2a:	2302      	movs	r3, #2
 8000e2c:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000e2e:	2300      	movs	r3, #0
 8000e30:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000e32:	2300      	movs	r3, #0
 8000e34:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Alternate = GPIO_AF10_OTG1_HS;
 8000e36:	230a      	movs	r3, #10
 8000e38:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(USB_FS_ID_GPIO_Port, &GPIO_InitStruct);
 8000e3a:	f107 031c 	add.w	r3, r7, #28
 8000e3e:	4619      	mov	r1, r3
 8000e40:	4810      	ldr	r0, [pc, #64]	; (8000e84 <MX_GPIO_Init+0x1f4>)
 8000e42:	f001 fa13 	bl	800226c <HAL_GPIO_Init>

  /*Configure GPIO pin : LED_YELLOW_Pin */
  GPIO_InitStruct.Pin = LED_YELLOW_Pin;
 8000e46:	2302      	movs	r3, #2
 8000e48:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000e4a:	2301      	movs	r3, #1
 8000e4c:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000e4e:	2300      	movs	r3, #0
 8000e50:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000e52:	2300      	movs	r3, #0
 8000e54:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(LED_YELLOW_GPIO_Port, &GPIO_InitStruct);
 8000e56:	f107 031c 	add.w	r3, r7, #28
 8000e5a:	4619      	mov	r1, r3
 8000e5c:	4806      	ldr	r0, [pc, #24]	; (8000e78 <MX_GPIO_Init+0x1e8>)
 8000e5e:	f001 fa05 	bl	800226c <HAL_GPIO_Init>

}
 8000e62:	bf00      	nop
 8000e64:	3730      	adds	r7, #48	; 0x30
 8000e66:	46bd      	mov	sp, r7
 8000e68:	bd80      	pop	{r7, pc}
 8000e6a:	bf00      	nop
 8000e6c:	58024400 	.word	0x58024400
 8000e70:	58020400 	.word	0x58020400
 8000e74:	58020c00 	.word	0x58020c00
 8000e78:	58021000 	.word	0x58021000
 8000e7c:	58020800 	.word	0x58020800
 8000e80:	58021800 	.word	0x58021800
 8000e84:	58020000 	.word	0x58020000

08000e88 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8000e88:	b480      	push	{r7}
 8000e8a:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8000e8c:	b672      	cpsid	i
}
 8000e8e:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8000e90:	e7fe      	b.n	8000e90 <Error_Handler+0x8>
	...

08000e94 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000e94:	b480      	push	{r7}
 8000e96:	b083      	sub	sp, #12
 8000e98:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000e9a:	4b0a      	ldr	r3, [pc, #40]	; (8000ec4 <HAL_MspInit+0x30>)
 8000e9c:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 8000ea0:	4a08      	ldr	r2, [pc, #32]	; (8000ec4 <HAL_MspInit+0x30>)
 8000ea2:	f043 0302 	orr.w	r3, r3, #2
 8000ea6:	f8c2 30f4 	str.w	r3, [r2, #244]	; 0xf4
 8000eaa:	4b06      	ldr	r3, [pc, #24]	; (8000ec4 <HAL_MspInit+0x30>)
 8000eac:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 8000eb0:	f003 0302 	and.w	r3, r3, #2
 8000eb4:	607b      	str	r3, [r7, #4]
 8000eb6:	687b      	ldr	r3, [r7, #4]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8000eb8:	bf00      	nop
 8000eba:	370c      	adds	r7, #12
 8000ebc:	46bd      	mov	sp, r7
 8000ebe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000ec2:	4770      	bx	lr
 8000ec4:	58024400 	.word	0x58024400

08000ec8 <HAL_ETH_MspInit>:
* This function configures the hardware resources used in this example
* @param heth: ETH handle pointer
* @retval None
*/
void HAL_ETH_MspInit(ETH_HandleTypeDef* heth)
{
 8000ec8:	b580      	push	{r7, lr}
 8000eca:	b08e      	sub	sp, #56	; 0x38
 8000ecc:	af00      	add	r7, sp, #0
 8000ece:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000ed0:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000ed4:	2200      	movs	r2, #0
 8000ed6:	601a      	str	r2, [r3, #0]
 8000ed8:	605a      	str	r2, [r3, #4]
 8000eda:	609a      	str	r2, [r3, #8]
 8000edc:	60da      	str	r2, [r3, #12]
 8000ede:	611a      	str	r2, [r3, #16]
  if(heth->Instance==ETH)
 8000ee0:	687b      	ldr	r3, [r7, #4]
 8000ee2:	681b      	ldr	r3, [r3, #0]
 8000ee4:	4a59      	ldr	r2, [pc, #356]	; (800104c <HAL_ETH_MspInit+0x184>)
 8000ee6:	4293      	cmp	r3, r2
 8000ee8:	f040 80ab 	bne.w	8001042 <HAL_ETH_MspInit+0x17a>
  {
  /* USER CODE BEGIN ETH_MspInit 0 */

  /* USER CODE END ETH_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_ETH1MAC_CLK_ENABLE();
 8000eec:	4b58      	ldr	r3, [pc, #352]	; (8001050 <HAL_ETH_MspInit+0x188>)
 8000eee:	f8d3 30d8 	ldr.w	r3, [r3, #216]	; 0xd8
 8000ef2:	4a57      	ldr	r2, [pc, #348]	; (8001050 <HAL_ETH_MspInit+0x188>)
 8000ef4:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8000ef8:	f8c2 30d8 	str.w	r3, [r2, #216]	; 0xd8
 8000efc:	4b54      	ldr	r3, [pc, #336]	; (8001050 <HAL_ETH_MspInit+0x188>)
 8000efe:	f8d3 30d8 	ldr.w	r3, [r3, #216]	; 0xd8
 8000f02:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8000f06:	623b      	str	r3, [r7, #32]
 8000f08:	6a3b      	ldr	r3, [r7, #32]
    __HAL_RCC_ETH1TX_CLK_ENABLE();
 8000f0a:	4b51      	ldr	r3, [pc, #324]	; (8001050 <HAL_ETH_MspInit+0x188>)
 8000f0c:	f8d3 30d8 	ldr.w	r3, [r3, #216]	; 0xd8
 8000f10:	4a4f      	ldr	r2, [pc, #316]	; (8001050 <HAL_ETH_MspInit+0x188>)
 8000f12:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8000f16:	f8c2 30d8 	str.w	r3, [r2, #216]	; 0xd8
 8000f1a:	4b4d      	ldr	r3, [pc, #308]	; (8001050 <HAL_ETH_MspInit+0x188>)
 8000f1c:	f8d3 30d8 	ldr.w	r3, [r3, #216]	; 0xd8
 8000f20:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8000f24:	61fb      	str	r3, [r7, #28]
 8000f26:	69fb      	ldr	r3, [r7, #28]
    __HAL_RCC_ETH1RX_CLK_ENABLE();
 8000f28:	4b49      	ldr	r3, [pc, #292]	; (8001050 <HAL_ETH_MspInit+0x188>)
 8000f2a:	f8d3 30d8 	ldr.w	r3, [r3, #216]	; 0xd8
 8000f2e:	4a48      	ldr	r2, [pc, #288]	; (8001050 <HAL_ETH_MspInit+0x188>)
 8000f30:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8000f34:	f8c2 30d8 	str.w	r3, [r2, #216]	; 0xd8
 8000f38:	4b45      	ldr	r3, [pc, #276]	; (8001050 <HAL_ETH_MspInit+0x188>)
 8000f3a:	f8d3 30d8 	ldr.w	r3, [r3, #216]	; 0xd8
 8000f3e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8000f42:	61bb      	str	r3, [r7, #24]
 8000f44:	69bb      	ldr	r3, [r7, #24]

    __HAL_RCC_GPIOC_CLK_ENABLE();
 8000f46:	4b42      	ldr	r3, [pc, #264]	; (8001050 <HAL_ETH_MspInit+0x188>)
 8000f48:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000f4c:	4a40      	ldr	r2, [pc, #256]	; (8001050 <HAL_ETH_MspInit+0x188>)
 8000f4e:	f043 0304 	orr.w	r3, r3, #4
 8000f52:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8000f56:	4b3e      	ldr	r3, [pc, #248]	; (8001050 <HAL_ETH_MspInit+0x188>)
 8000f58:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000f5c:	f003 0304 	and.w	r3, r3, #4
 8000f60:	617b      	str	r3, [r7, #20]
 8000f62:	697b      	ldr	r3, [r7, #20]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000f64:	4b3a      	ldr	r3, [pc, #232]	; (8001050 <HAL_ETH_MspInit+0x188>)
 8000f66:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000f6a:	4a39      	ldr	r2, [pc, #228]	; (8001050 <HAL_ETH_MspInit+0x188>)
 8000f6c:	f043 0301 	orr.w	r3, r3, #1
 8000f70:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8000f74:	4b36      	ldr	r3, [pc, #216]	; (8001050 <HAL_ETH_MspInit+0x188>)
 8000f76:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000f7a:	f003 0301 	and.w	r3, r3, #1
 8000f7e:	613b      	str	r3, [r7, #16]
 8000f80:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8000f82:	4b33      	ldr	r3, [pc, #204]	; (8001050 <HAL_ETH_MspInit+0x188>)
 8000f84:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000f88:	4a31      	ldr	r2, [pc, #196]	; (8001050 <HAL_ETH_MspInit+0x188>)
 8000f8a:	f043 0302 	orr.w	r3, r3, #2
 8000f8e:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8000f92:	4b2f      	ldr	r3, [pc, #188]	; (8001050 <HAL_ETH_MspInit+0x188>)
 8000f94:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000f98:	f003 0302 	and.w	r3, r3, #2
 8000f9c:	60fb      	str	r3, [r7, #12]
 8000f9e:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOG_CLK_ENABLE();
 8000fa0:	4b2b      	ldr	r3, [pc, #172]	; (8001050 <HAL_ETH_MspInit+0x188>)
 8000fa2:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000fa6:	4a2a      	ldr	r2, [pc, #168]	; (8001050 <HAL_ETH_MspInit+0x188>)
 8000fa8:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8000fac:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8000fb0:	4b27      	ldr	r3, [pc, #156]	; (8001050 <HAL_ETH_MspInit+0x188>)
 8000fb2:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000fb6:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8000fba:	60bb      	str	r3, [r7, #8]
 8000fbc:	68bb      	ldr	r3, [r7, #8]
    PC5     ------> ETH_RXD1
    PB13     ------> ETH_TXD1
    PG11     ------> ETH_TX_EN
    PG13     ------> ETH_TXD0
    */
    GPIO_InitStruct.Pin = RMII_MDC_Pin|RMII_RXD0_Pin|RMII_RXD1_Pin;
 8000fbe:	2332      	movs	r3, #50	; 0x32
 8000fc0:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000fc2:	2302      	movs	r3, #2
 8000fc4:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000fc6:	2300      	movs	r3, #0
 8000fc8:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000fca:	2300      	movs	r3, #0
 8000fcc:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 8000fce:	230b      	movs	r3, #11
 8000fd0:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8000fd2:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000fd6:	4619      	mov	r1, r3
 8000fd8:	481e      	ldr	r0, [pc, #120]	; (8001054 <HAL_ETH_MspInit+0x18c>)
 8000fda:	f001 f947 	bl	800226c <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = RMII_REF_CLK_Pin|RMII_MDIO_Pin|RMII_CRS_DV_Pin;
 8000fde:	2386      	movs	r3, #134	; 0x86
 8000fe0:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000fe2:	2302      	movs	r3, #2
 8000fe4:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000fe6:	2300      	movs	r3, #0
 8000fe8:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000fea:	2300      	movs	r3, #0
 8000fec:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 8000fee:	230b      	movs	r3, #11
 8000ff0:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000ff2:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000ff6:	4619      	mov	r1, r3
 8000ff8:	4817      	ldr	r0, [pc, #92]	; (8001058 <HAL_ETH_MspInit+0x190>)
 8000ffa:	f001 f937 	bl	800226c <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = RMII_TXD1_Pin;
 8000ffe:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8001002:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001004:	2302      	movs	r3, #2
 8001006:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001008:	2300      	movs	r3, #0
 800100a:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800100c:	2300      	movs	r3, #0
 800100e:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 8001010:	230b      	movs	r3, #11
 8001012:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(RMII_TXD1_GPIO_Port, &GPIO_InitStruct);
 8001014:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8001018:	4619      	mov	r1, r3
 800101a:	4810      	ldr	r0, [pc, #64]	; (800105c <HAL_ETH_MspInit+0x194>)
 800101c:	f001 f926 	bl	800226c <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = RMII_TX_EN_Pin|RMII_TXD0_Pin;
 8001020:	f44f 5320 	mov.w	r3, #10240	; 0x2800
 8001024:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001026:	2302      	movs	r3, #2
 8001028:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800102a:	2300      	movs	r3, #0
 800102c:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800102e:	2300      	movs	r3, #0
 8001030:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 8001032:	230b      	movs	r3, #11
 8001034:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOG, &GPIO_InitStruct);
 8001036:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800103a:	4619      	mov	r1, r3
 800103c:	4808      	ldr	r0, [pc, #32]	; (8001060 <HAL_ETH_MspInit+0x198>)
 800103e:	f001 f915 	bl	800226c <HAL_GPIO_Init>
  /* USER CODE BEGIN ETH_MspInit 1 */

  /* USER CODE END ETH_MspInit 1 */
  }

}
 8001042:	bf00      	nop
 8001044:	3738      	adds	r7, #56	; 0x38
 8001046:	46bd      	mov	sp, r7
 8001048:	bd80      	pop	{r7, pc}
 800104a:	bf00      	nop
 800104c:	40028000 	.word	0x40028000
 8001050:	58024400 	.word	0x58024400
 8001054:	58020800 	.word	0x58020800
 8001058:	58020000 	.word	0x58020000
 800105c:	58020400 	.word	0x58020400
 8001060:	58021800 	.word	0x58021800

08001064 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8001064:	b580      	push	{r7, lr}
 8001066:	b0bc      	sub	sp, #240	; 0xf0
 8001068:	af00      	add	r7, sp, #0
 800106a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800106c:	f107 03dc 	add.w	r3, r7, #220	; 0xdc
 8001070:	2200      	movs	r2, #0
 8001072:	601a      	str	r2, [r3, #0]
 8001074:	605a      	str	r2, [r3, #4]
 8001076:	609a      	str	r2, [r3, #8]
 8001078:	60da      	str	r2, [r3, #12]
 800107a:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 800107c:	f107 0320 	add.w	r3, r7, #32
 8001080:	22b8      	movs	r2, #184	; 0xb8
 8001082:	2100      	movs	r1, #0
 8001084:	4618      	mov	r0, r3
 8001086:	f006 fd15 	bl	8007ab4 <memset>
  if(huart->Instance==USART2)
 800108a:	687b      	ldr	r3, [r7, #4]
 800108c:	681b      	ldr	r3, [r3, #0]
 800108e:	4a5f      	ldr	r2, [pc, #380]	; (800120c <HAL_UART_MspInit+0x1a8>)
 8001090:	4293      	cmp	r3, r2
 8001092:	d16a      	bne.n	800116a <HAL_UART_MspInit+0x106>

  /* USER CODE END USART2_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_USART2;
 8001094:	f04f 0202 	mov.w	r2, #2
 8001098:	f04f 0300 	mov.w	r3, #0
 800109c:	e9c7 2308 	strd	r2, r3, [r7, #32]
    PeriphClkInitStruct.Usart234578ClockSelection = RCC_USART234578CLKSOURCE_D2PCLK1;
 80010a0:	2300      	movs	r3, #0
 80010a2:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 80010a6:	f107 0320 	add.w	r3, r7, #32
 80010aa:	4618      	mov	r0, r3
 80010ac:	f002 fa40 	bl	8003530 <HAL_RCCEx_PeriphCLKConfig>
 80010b0:	4603      	mov	r3, r0
 80010b2:	2b00      	cmp	r3, #0
 80010b4:	d001      	beq.n	80010ba <HAL_UART_MspInit+0x56>
    {
      Error_Handler();
 80010b6:	f7ff fee7 	bl	8000e88 <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_USART2_CLK_ENABLE();
 80010ba:	4b55      	ldr	r3, [pc, #340]	; (8001210 <HAL_UART_MspInit+0x1ac>)
 80010bc:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 80010c0:	4a53      	ldr	r2, [pc, #332]	; (8001210 <HAL_UART_MspInit+0x1ac>)
 80010c2:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80010c6:	f8c2 30e8 	str.w	r3, [r2, #232]	; 0xe8
 80010ca:	4b51      	ldr	r3, [pc, #324]	; (8001210 <HAL_UART_MspInit+0x1ac>)
 80010cc:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 80010d0:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80010d4:	61fb      	str	r3, [r7, #28]
 80010d6:	69fb      	ldr	r3, [r7, #28]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 80010d8:	4b4d      	ldr	r3, [pc, #308]	; (8001210 <HAL_UART_MspInit+0x1ac>)
 80010da:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80010de:	4a4c      	ldr	r2, [pc, #304]	; (8001210 <HAL_UART_MspInit+0x1ac>)
 80010e0:	f043 0301 	orr.w	r3, r3, #1
 80010e4:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 80010e8:	4b49      	ldr	r3, [pc, #292]	; (8001210 <HAL_UART_MspInit+0x1ac>)
 80010ea:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80010ee:	f003 0301 	and.w	r3, r3, #1
 80010f2:	61bb      	str	r3, [r7, #24]
 80010f4:	69bb      	ldr	r3, [r7, #24]
    __HAL_RCC_GPIOD_CLK_ENABLE();
 80010f6:	4b46      	ldr	r3, [pc, #280]	; (8001210 <HAL_UART_MspInit+0x1ac>)
 80010f8:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80010fc:	4a44      	ldr	r2, [pc, #272]	; (8001210 <HAL_UART_MspInit+0x1ac>)
 80010fe:	f043 0308 	orr.w	r3, r3, #8
 8001102:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8001106:	4b42      	ldr	r3, [pc, #264]	; (8001210 <HAL_UART_MspInit+0x1ac>)
 8001108:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 800110c:	f003 0308 	and.w	r3, r3, #8
 8001110:	617b      	str	r3, [r7, #20]
 8001112:	697b      	ldr	r3, [r7, #20]
    /**USART2 GPIO Configuration
    PA3     ------> USART2_RX
    PD5     ------> USART2_TX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_3;
 8001114:	2308      	movs	r3, #8
 8001116:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800111a:	2302      	movs	r3, #2
 800111c:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001120:	2300      	movs	r3, #0
 8001122:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001126:	2300      	movs	r3, #0
 8001128:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 800112c:	2307      	movs	r3, #7
 800112e:	f8c7 30ec 	str.w	r3, [r7, #236]	; 0xec
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001132:	f107 03dc 	add.w	r3, r7, #220	; 0xdc
 8001136:	4619      	mov	r1, r3
 8001138:	4836      	ldr	r0, [pc, #216]	; (8001214 <HAL_UART_MspInit+0x1b0>)
 800113a:	f001 f897 	bl	800226c <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_5;
 800113e:	2320      	movs	r3, #32
 8001140:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001144:	2302      	movs	r3, #2
 8001146:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800114a:	2300      	movs	r3, #0
 800114c:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001150:	2300      	movs	r3, #0
 8001152:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 8001156:	2307      	movs	r3, #7
 8001158:	f8c7 30ec 	str.w	r3, [r7, #236]	; 0xec
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 800115c:	f107 03dc 	add.w	r3, r7, #220	; 0xdc
 8001160:	4619      	mov	r1, r3
 8001162:	482d      	ldr	r0, [pc, #180]	; (8001218 <HAL_UART_MspInit+0x1b4>)
 8001164:	f001 f882 	bl	800226c <HAL_GPIO_Init>
  /* USER CODE BEGIN USART3_MspInit 1 */

  /* USER CODE END USART3_MspInit 1 */
  }

}
 8001168:	e04b      	b.n	8001202 <HAL_UART_MspInit+0x19e>
  else if(huart->Instance==USART3)
 800116a:	687b      	ldr	r3, [r7, #4]
 800116c:	681b      	ldr	r3, [r3, #0]
 800116e:	4a2b      	ldr	r2, [pc, #172]	; (800121c <HAL_UART_MspInit+0x1b8>)
 8001170:	4293      	cmp	r3, r2
 8001172:	d146      	bne.n	8001202 <HAL_UART_MspInit+0x19e>
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_USART3;
 8001174:	f04f 0202 	mov.w	r2, #2
 8001178:	f04f 0300 	mov.w	r3, #0
 800117c:	e9c7 2308 	strd	r2, r3, [r7, #32]
    PeriphClkInitStruct.Usart234578ClockSelection = RCC_USART234578CLKSOURCE_D2PCLK1;
 8001180:	2300      	movs	r3, #0
 8001182:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8001186:	f107 0320 	add.w	r3, r7, #32
 800118a:	4618      	mov	r0, r3
 800118c:	f002 f9d0 	bl	8003530 <HAL_RCCEx_PeriphCLKConfig>
 8001190:	4603      	mov	r3, r0
 8001192:	2b00      	cmp	r3, #0
 8001194:	d001      	beq.n	800119a <HAL_UART_MspInit+0x136>
      Error_Handler();
 8001196:	f7ff fe77 	bl	8000e88 <Error_Handler>
    __HAL_RCC_USART3_CLK_ENABLE();
 800119a:	4b1d      	ldr	r3, [pc, #116]	; (8001210 <HAL_UART_MspInit+0x1ac>)
 800119c:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 80011a0:	4a1b      	ldr	r2, [pc, #108]	; (8001210 <HAL_UART_MspInit+0x1ac>)
 80011a2:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 80011a6:	f8c2 30e8 	str.w	r3, [r2, #232]	; 0xe8
 80011aa:	4b19      	ldr	r3, [pc, #100]	; (8001210 <HAL_UART_MspInit+0x1ac>)
 80011ac:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 80011b0:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 80011b4:	613b      	str	r3, [r7, #16]
 80011b6:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOD_CLK_ENABLE();
 80011b8:	4b15      	ldr	r3, [pc, #84]	; (8001210 <HAL_UART_MspInit+0x1ac>)
 80011ba:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80011be:	4a14      	ldr	r2, [pc, #80]	; (8001210 <HAL_UART_MspInit+0x1ac>)
 80011c0:	f043 0308 	orr.w	r3, r3, #8
 80011c4:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 80011c8:	4b11      	ldr	r3, [pc, #68]	; (8001210 <HAL_UART_MspInit+0x1ac>)
 80011ca:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80011ce:	f003 0308 	and.w	r3, r3, #8
 80011d2:	60fb      	str	r3, [r7, #12]
 80011d4:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = STLK_VCP_RX_Pin|STLK_VCP_TX_Pin;
 80011d6:	f44f 7340 	mov.w	r3, #768	; 0x300
 80011da:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80011de:	2302      	movs	r3, #2
 80011e0:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80011e4:	2300      	movs	r3, #0
 80011e6:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80011ea:	2300      	movs	r3, #0
 80011ec:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
    GPIO_InitStruct.Alternate = GPIO_AF7_USART3;
 80011f0:	2307      	movs	r3, #7
 80011f2:	f8c7 30ec 	str.w	r3, [r7, #236]	; 0xec
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 80011f6:	f107 03dc 	add.w	r3, r7, #220	; 0xdc
 80011fa:	4619      	mov	r1, r3
 80011fc:	4806      	ldr	r0, [pc, #24]	; (8001218 <HAL_UART_MspInit+0x1b4>)
 80011fe:	f001 f835 	bl	800226c <HAL_GPIO_Init>
}
 8001202:	bf00      	nop
 8001204:	37f0      	adds	r7, #240	; 0xf0
 8001206:	46bd      	mov	sp, r7
 8001208:	bd80      	pop	{r7, pc}
 800120a:	bf00      	nop
 800120c:	40004400 	.word	0x40004400
 8001210:	58024400 	.word	0x58024400
 8001214:	58020000 	.word	0x58020000
 8001218:	58020c00 	.word	0x58020c00
 800121c:	40004800 	.word	0x40004800

08001220 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8001220:	b480      	push	{r7}
 8001222:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8001224:	e7fe      	b.n	8001224 <NMI_Handler+0x4>

08001226 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8001226:	b480      	push	{r7}
 8001228:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 800122a:	e7fe      	b.n	800122a <HardFault_Handler+0x4>

0800122c <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 800122c:	b480      	push	{r7}
 800122e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8001230:	e7fe      	b.n	8001230 <MemManage_Handler+0x4>

08001232 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8001232:	b480      	push	{r7}
 8001234:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8001236:	e7fe      	b.n	8001236 <BusFault_Handler+0x4>

08001238 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8001238:	b480      	push	{r7}
 800123a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 800123c:	e7fe      	b.n	800123c <UsageFault_Handler+0x4>

0800123e <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 800123e:	b480      	push	{r7}
 8001240:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8001242:	bf00      	nop
 8001244:	46bd      	mov	sp, r7
 8001246:	f85d 7b04 	ldr.w	r7, [sp], #4
 800124a:	4770      	bx	lr

0800124c <_read>:
  _kill(status, -1);
  while (1) {}    /* Make sure we hang here */
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 800124c:	b580      	push	{r7, lr}
 800124e:	b086      	sub	sp, #24
 8001250:	af00      	add	r7, sp, #0
 8001252:	60f8      	str	r0, [r7, #12]
 8001254:	60b9      	str	r1, [r7, #8]
 8001256:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001258:	2300      	movs	r3, #0
 800125a:	617b      	str	r3, [r7, #20]
 800125c:	e00a      	b.n	8001274 <_read+0x28>
  {
    *ptr++ = __io_getchar();
 800125e:	f3af 8000 	nop.w
 8001262:	4601      	mov	r1, r0
 8001264:	68bb      	ldr	r3, [r7, #8]
 8001266:	1c5a      	adds	r2, r3, #1
 8001268:	60ba      	str	r2, [r7, #8]
 800126a:	b2ca      	uxtb	r2, r1
 800126c:	701a      	strb	r2, [r3, #0]
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 800126e:	697b      	ldr	r3, [r7, #20]
 8001270:	3301      	adds	r3, #1
 8001272:	617b      	str	r3, [r7, #20]
 8001274:	697a      	ldr	r2, [r7, #20]
 8001276:	687b      	ldr	r3, [r7, #4]
 8001278:	429a      	cmp	r2, r3
 800127a:	dbf0      	blt.n	800125e <_read+0x12>
  }

  return len;
 800127c:	687b      	ldr	r3, [r7, #4]
}
 800127e:	4618      	mov	r0, r3
 8001280:	3718      	adds	r7, #24
 8001282:	46bd      	mov	sp, r7
 8001284:	bd80      	pop	{r7, pc}

08001286 <_close>:
  }
  return len;
}

int _close(int file)
{
 8001286:	b480      	push	{r7}
 8001288:	b083      	sub	sp, #12
 800128a:	af00      	add	r7, sp, #0
 800128c:	6078      	str	r0, [r7, #4]
  (void)file;
  return -1;
 800128e:	f04f 33ff 	mov.w	r3, #4294967295
}
 8001292:	4618      	mov	r0, r3
 8001294:	370c      	adds	r7, #12
 8001296:	46bd      	mov	sp, r7
 8001298:	f85d 7b04 	ldr.w	r7, [sp], #4
 800129c:	4770      	bx	lr

0800129e <_fstat>:


int _fstat(int file, struct stat *st)
{
 800129e:	b480      	push	{r7}
 80012a0:	b083      	sub	sp, #12
 80012a2:	af00      	add	r7, sp, #0
 80012a4:	6078      	str	r0, [r7, #4]
 80012a6:	6039      	str	r1, [r7, #0]
  (void)file;
  st->st_mode = S_IFCHR;
 80012a8:	683b      	ldr	r3, [r7, #0]
 80012aa:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 80012ae:	605a      	str	r2, [r3, #4]
  return 0;
 80012b0:	2300      	movs	r3, #0
}
 80012b2:	4618      	mov	r0, r3
 80012b4:	370c      	adds	r7, #12
 80012b6:	46bd      	mov	sp, r7
 80012b8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80012bc:	4770      	bx	lr

080012be <_isatty>:

int _isatty(int file)
{
 80012be:	b480      	push	{r7}
 80012c0:	b083      	sub	sp, #12
 80012c2:	af00      	add	r7, sp, #0
 80012c4:	6078      	str	r0, [r7, #4]
  (void)file;
  return 1;
 80012c6:	2301      	movs	r3, #1
}
 80012c8:	4618      	mov	r0, r3
 80012ca:	370c      	adds	r7, #12
 80012cc:	46bd      	mov	sp, r7
 80012ce:	f85d 7b04 	ldr.w	r7, [sp], #4
 80012d2:	4770      	bx	lr

080012d4 <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 80012d4:	b480      	push	{r7}
 80012d6:	b085      	sub	sp, #20
 80012d8:	af00      	add	r7, sp, #0
 80012da:	60f8      	str	r0, [r7, #12]
 80012dc:	60b9      	str	r1, [r7, #8]
 80012de:	607a      	str	r2, [r7, #4]
  (void)file;
  (void)ptr;
  (void)dir;
  return 0;
 80012e0:	2300      	movs	r3, #0
}
 80012e2:	4618      	mov	r0, r3
 80012e4:	3714      	adds	r7, #20
 80012e6:	46bd      	mov	sp, r7
 80012e8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80012ec:	4770      	bx	lr
	...

080012f0 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 80012f0:	b580      	push	{r7, lr}
 80012f2:	b086      	sub	sp, #24
 80012f4:	af00      	add	r7, sp, #0
 80012f6:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 80012f8:	4a14      	ldr	r2, [pc, #80]	; (800134c <_sbrk+0x5c>)
 80012fa:	4b15      	ldr	r3, [pc, #84]	; (8001350 <_sbrk+0x60>)
 80012fc:	1ad3      	subs	r3, r2, r3
 80012fe:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8001300:	697b      	ldr	r3, [r7, #20]
 8001302:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8001304:	4b13      	ldr	r3, [pc, #76]	; (8001354 <_sbrk+0x64>)
 8001306:	681b      	ldr	r3, [r3, #0]
 8001308:	2b00      	cmp	r3, #0
 800130a:	d102      	bne.n	8001312 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 800130c:	4b11      	ldr	r3, [pc, #68]	; (8001354 <_sbrk+0x64>)
 800130e:	4a12      	ldr	r2, [pc, #72]	; (8001358 <_sbrk+0x68>)
 8001310:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8001312:	4b10      	ldr	r3, [pc, #64]	; (8001354 <_sbrk+0x64>)
 8001314:	681a      	ldr	r2, [r3, #0]
 8001316:	687b      	ldr	r3, [r7, #4]
 8001318:	4413      	add	r3, r2
 800131a:	693a      	ldr	r2, [r7, #16]
 800131c:	429a      	cmp	r2, r3
 800131e:	d207      	bcs.n	8001330 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8001320:	f006 fb9e 	bl	8007a60 <__errno>
 8001324:	4603      	mov	r3, r0
 8001326:	220c      	movs	r2, #12
 8001328:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 800132a:	f04f 33ff 	mov.w	r3, #4294967295
 800132e:	e009      	b.n	8001344 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8001330:	4b08      	ldr	r3, [pc, #32]	; (8001354 <_sbrk+0x64>)
 8001332:	681b      	ldr	r3, [r3, #0]
 8001334:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8001336:	4b07      	ldr	r3, [pc, #28]	; (8001354 <_sbrk+0x64>)
 8001338:	681a      	ldr	r2, [r3, #0]
 800133a:	687b      	ldr	r3, [r7, #4]
 800133c:	4413      	add	r3, r2
 800133e:	4a05      	ldr	r2, [pc, #20]	; (8001354 <_sbrk+0x64>)
 8001340:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8001342:	68fb      	ldr	r3, [r7, #12]
}
 8001344:	4618      	mov	r0, r3
 8001346:	3718      	adds	r7, #24
 8001348:	46bd      	mov	sp, r7
 800134a:	bd80      	pop	{r7, pc}
 800134c:	24050000 	.word	0x24050000
 8001350:	00000400 	.word	0x00000400
 8001354:	240007a0 	.word	0x240007a0
 8001358:	240066f8 	.word	0x240066f8

0800135c <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 800135c:	b480      	push	{r7}
 800135e:	af00      	add	r7, sp, #0
 __IO uint32_t tmpreg;
#endif /* DATA_IN_D2_SRAM */

  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << (10*2))|(3UL << (11*2)));  /* set CP10 and CP11 Full Access */
 8001360:	4b32      	ldr	r3, [pc, #200]	; (800142c <SystemInit+0xd0>)
 8001362:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8001366:	4a31      	ldr	r2, [pc, #196]	; (800142c <SystemInit+0xd0>)
 8001368:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 800136c:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
  #endif
  /* Reset the RCC clock configuration to the default reset state ------------*/

   /* Increasing the CPU frequency */
  if(FLASH_LATENCY_DEFAULT  > (READ_BIT((FLASH->ACR), FLASH_ACR_LATENCY)))
 8001370:	4b2f      	ldr	r3, [pc, #188]	; (8001430 <SystemInit+0xd4>)
 8001372:	681b      	ldr	r3, [r3, #0]
 8001374:	f003 030f 	and.w	r3, r3, #15
 8001378:	2b06      	cmp	r3, #6
 800137a:	d807      	bhi.n	800138c <SystemInit+0x30>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    MODIFY_REG(FLASH->ACR, FLASH_ACR_LATENCY, (uint32_t)(FLASH_LATENCY_DEFAULT));
 800137c:	4b2c      	ldr	r3, [pc, #176]	; (8001430 <SystemInit+0xd4>)
 800137e:	681b      	ldr	r3, [r3, #0]
 8001380:	f023 030f 	bic.w	r3, r3, #15
 8001384:	4a2a      	ldr	r2, [pc, #168]	; (8001430 <SystemInit+0xd4>)
 8001386:	f043 0307 	orr.w	r3, r3, #7
 800138a:	6013      	str	r3, [r2, #0]
  }

  /* Set HSION bit */
  RCC->CR |= RCC_CR_HSION;
 800138c:	4b29      	ldr	r3, [pc, #164]	; (8001434 <SystemInit+0xd8>)
 800138e:	681b      	ldr	r3, [r3, #0]
 8001390:	4a28      	ldr	r2, [pc, #160]	; (8001434 <SystemInit+0xd8>)
 8001392:	f043 0301 	orr.w	r3, r3, #1
 8001396:	6013      	str	r3, [r2, #0]

  /* Reset CFGR register */
  RCC->CFGR = 0x00000000;
 8001398:	4b26      	ldr	r3, [pc, #152]	; (8001434 <SystemInit+0xd8>)
 800139a:	2200      	movs	r2, #0
 800139c:	611a      	str	r2, [r3, #16]

  /* Reset HSEON, HSECSSON, CSION, HSI48ON, CSIKERON, PLL1ON, PLL2ON and PLL3ON bits */
  RCC->CR &= 0xEAF6ED7FU;
 800139e:	4b25      	ldr	r3, [pc, #148]	; (8001434 <SystemInit+0xd8>)
 80013a0:	681a      	ldr	r2, [r3, #0]
 80013a2:	4924      	ldr	r1, [pc, #144]	; (8001434 <SystemInit+0xd8>)
 80013a4:	4b24      	ldr	r3, [pc, #144]	; (8001438 <SystemInit+0xdc>)
 80013a6:	4013      	ands	r3, r2
 80013a8:	600b      	str	r3, [r1, #0]

   /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLASH_LATENCY_DEFAULT  < (READ_BIT((FLASH->ACR), FLASH_ACR_LATENCY)))
 80013aa:	4b21      	ldr	r3, [pc, #132]	; (8001430 <SystemInit+0xd4>)
 80013ac:	681b      	ldr	r3, [r3, #0]
 80013ae:	f003 0308 	and.w	r3, r3, #8
 80013b2:	2b00      	cmp	r3, #0
 80013b4:	d007      	beq.n	80013c6 <SystemInit+0x6a>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    MODIFY_REG(FLASH->ACR, FLASH_ACR_LATENCY, (uint32_t)(FLASH_LATENCY_DEFAULT));
 80013b6:	4b1e      	ldr	r3, [pc, #120]	; (8001430 <SystemInit+0xd4>)
 80013b8:	681b      	ldr	r3, [r3, #0]
 80013ba:	f023 030f 	bic.w	r3, r3, #15
 80013be:	4a1c      	ldr	r2, [pc, #112]	; (8001430 <SystemInit+0xd4>)
 80013c0:	f043 0307 	orr.w	r3, r3, #7
 80013c4:	6013      	str	r3, [r2, #0]
  }

#if defined(D3_SRAM_BASE)
  /* Reset D1CFGR register */
  RCC->D1CFGR = 0x00000000;
 80013c6:	4b1b      	ldr	r3, [pc, #108]	; (8001434 <SystemInit+0xd8>)
 80013c8:	2200      	movs	r2, #0
 80013ca:	619a      	str	r2, [r3, #24]

  /* Reset D2CFGR register */
  RCC->D2CFGR = 0x00000000;
 80013cc:	4b19      	ldr	r3, [pc, #100]	; (8001434 <SystemInit+0xd8>)
 80013ce:	2200      	movs	r2, #0
 80013d0:	61da      	str	r2, [r3, #28]

  /* Reset D3CFGR register */
  RCC->D3CFGR = 0x00000000;
 80013d2:	4b18      	ldr	r3, [pc, #96]	; (8001434 <SystemInit+0xd8>)
 80013d4:	2200      	movs	r2, #0
 80013d6:	621a      	str	r2, [r3, #32]

  /* Reset SRDCFGR register */
  RCC->SRDCFGR = 0x00000000;
#endif
  /* Reset PLLCKSELR register */
  RCC->PLLCKSELR = 0x02020200;
 80013d8:	4b16      	ldr	r3, [pc, #88]	; (8001434 <SystemInit+0xd8>)
 80013da:	4a18      	ldr	r2, [pc, #96]	; (800143c <SystemInit+0xe0>)
 80013dc:	629a      	str	r2, [r3, #40]	; 0x28

  /* Reset PLLCFGR register */
  RCC->PLLCFGR = 0x01FF0000;
 80013de:	4b15      	ldr	r3, [pc, #84]	; (8001434 <SystemInit+0xd8>)
 80013e0:	4a17      	ldr	r2, [pc, #92]	; (8001440 <SystemInit+0xe4>)
 80013e2:	62da      	str	r2, [r3, #44]	; 0x2c
  /* Reset PLL1DIVR register */
  RCC->PLL1DIVR = 0x01010280;
 80013e4:	4b13      	ldr	r3, [pc, #76]	; (8001434 <SystemInit+0xd8>)
 80013e6:	4a17      	ldr	r2, [pc, #92]	; (8001444 <SystemInit+0xe8>)
 80013e8:	631a      	str	r2, [r3, #48]	; 0x30
  /* Reset PLL1FRACR register */
  RCC->PLL1FRACR = 0x00000000;
 80013ea:	4b12      	ldr	r3, [pc, #72]	; (8001434 <SystemInit+0xd8>)
 80013ec:	2200      	movs	r2, #0
 80013ee:	635a      	str	r2, [r3, #52]	; 0x34

  /* Reset PLL2DIVR register */
  RCC->PLL2DIVR = 0x01010280;
 80013f0:	4b10      	ldr	r3, [pc, #64]	; (8001434 <SystemInit+0xd8>)
 80013f2:	4a14      	ldr	r2, [pc, #80]	; (8001444 <SystemInit+0xe8>)
 80013f4:	639a      	str	r2, [r3, #56]	; 0x38

  /* Reset PLL2FRACR register */

  RCC->PLL2FRACR = 0x00000000;
 80013f6:	4b0f      	ldr	r3, [pc, #60]	; (8001434 <SystemInit+0xd8>)
 80013f8:	2200      	movs	r2, #0
 80013fa:	63da      	str	r2, [r3, #60]	; 0x3c
  /* Reset PLL3DIVR register */
  RCC->PLL3DIVR = 0x01010280;
 80013fc:	4b0d      	ldr	r3, [pc, #52]	; (8001434 <SystemInit+0xd8>)
 80013fe:	4a11      	ldr	r2, [pc, #68]	; (8001444 <SystemInit+0xe8>)
 8001400:	641a      	str	r2, [r3, #64]	; 0x40

  /* Reset PLL3FRACR register */
  RCC->PLL3FRACR = 0x00000000;
 8001402:	4b0c      	ldr	r3, [pc, #48]	; (8001434 <SystemInit+0xd8>)
 8001404:	2200      	movs	r2, #0
 8001406:	645a      	str	r2, [r3, #68]	; 0x44

  /* Reset HSEBYP bit */
  RCC->CR &= 0xFFFBFFFFU;
 8001408:	4b0a      	ldr	r3, [pc, #40]	; (8001434 <SystemInit+0xd8>)
 800140a:	681b      	ldr	r3, [r3, #0]
 800140c:	4a09      	ldr	r2, [pc, #36]	; (8001434 <SystemInit+0xd8>)
 800140e:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8001412:	6013      	str	r3, [r2, #0]

  /* Disable all interrupts */
  RCC->CIER = 0x00000000;
 8001414:	4b07      	ldr	r3, [pc, #28]	; (8001434 <SystemInit+0xd8>)
 8001416:	2200      	movs	r2, #0
 8001418:	661a      	str	r2, [r3, #96]	; 0x60
  /*
   * Disable the FMC bank1 (enabled after reset).
   * This, prevents CPU speculation access on this bank which blocks the use of FMC during
   * 24us. During this time the others FMC master (such as LTDC) cannot use it!
   */
  FMC_Bank1_R->BTCR[0] = 0x000030D2;
 800141a:	4b0b      	ldr	r3, [pc, #44]	; (8001448 <SystemInit+0xec>)
 800141c:	f243 02d2 	movw	r2, #12498	; 0x30d2
 8001420:	601a      	str	r2, [r3, #0]
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal D1 AXI-RAM or in Internal FLASH */
#endif /* USER_VECT_TAB_ADDRESS */

#endif /*DUAL_CORE && CORE_CM4*/
}
 8001422:	bf00      	nop
 8001424:	46bd      	mov	sp, r7
 8001426:	f85d 7b04 	ldr.w	r7, [sp], #4
 800142a:	4770      	bx	lr
 800142c:	e000ed00 	.word	0xe000ed00
 8001430:	52002000 	.word	0x52002000
 8001434:	58024400 	.word	0x58024400
 8001438:	eaf6ed7f 	.word	0xeaf6ed7f
 800143c:	02020200 	.word	0x02020200
 8001440:	01ff0000 	.word	0x01ff0000
 8001444:	01010280 	.word	0x01010280
 8001448:	52004000 	.word	0x52004000

0800144c <tm_main>:


/* Define main entry point.  */

void tm_main()
{
 800144c:	b580      	push	{r7, lr}
 800144e:	af00      	add	r7, sp, #0

    /* Initialize the test.  */
    tm_initialize(tm_interrupt_preemption_processing_initialize);
 8001450:	4802      	ldr	r0, [pc, #8]	; (800145c <tm_main+0x10>)
 8001452:	f000 f8a1 	bl	8001598 <tm_initialize>
}
 8001456:	bf00      	nop
 8001458:	bd80      	pop	{r7, pc}
 800145a:	bf00      	nop
 800145c:	08001461 	.word	0x08001461

08001460 <tm_interrupt_preemption_processing_initialize>:


/* Define the interrupt processing test initialization.  */

void  tm_interrupt_preemption_processing_initialize(void)
{
 8001460:	b580      	push	{r7, lr}
 8001462:	af00      	add	r7, sp, #0

    /* Create interrupt thread at priority 3.  */
    tm_thread_create(0, 3, tm_interrupt_preemption_thread_0_entry);
 8001464:	4a0b      	ldr	r2, [pc, #44]	; (8001494 <tm_interrupt_preemption_processing_initialize+0x34>)
 8001466:	2103      	movs	r1, #3
 8001468:	2000      	movs	r0, #0
 800146a:	f000 f8a5 	bl	80015b8 <tm_thread_create>

    /* Create thread that generates the interrupt at priority 10.  */
    tm_thread_create(1, 10, tm_interrupt_preemption_thread_1_entry);
 800146e:	4a0a      	ldr	r2, [pc, #40]	; (8001498 <tm_interrupt_preemption_processing_initialize+0x38>)
 8001470:	210a      	movs	r1, #10
 8001472:	2001      	movs	r0, #1
 8001474:	f000 f8a0 	bl	80015b8 <tm_thread_create>

    /* Resume just thread 1.  */
    tm_thread_resume(1);
 8001478:	2001      	movs	r0, #1
 800147a:	f000 f8dd 	bl	8001638 <tm_thread_resume>

    /* Create the reporting thread. It will preempt the other 
       threads and print out the test results.  */
    tm_thread_create(5, 2, tm_interrupt_preemption_thread_report);
 800147e:	4a07      	ldr	r2, [pc, #28]	; (800149c <tm_interrupt_preemption_processing_initialize+0x3c>)
 8001480:	2102      	movs	r1, #2
 8001482:	2005      	movs	r0, #5
 8001484:	f000 f898 	bl	80015b8 <tm_thread_create>
    tm_thread_resume(5);
 8001488:	2005      	movs	r0, #5
 800148a:	f000 f8d5 	bl	8001638 <tm_thread_resume>
}
 800148e:	bf00      	nop
 8001490:	bd80      	pop	{r7, pc}
 8001492:	bf00      	nop
 8001494:	080014a1 	.word	0x080014a1
 8001498:	080014bd 	.word	0x080014bd
 800149c:	080014d5 	.word	0x080014d5

080014a0 <tm_interrupt_preemption_thread_0_entry>:


/* Define the interrupt thread.  This thread is resumed from the 
   interrupt handler.  It runs and suspends.  */
void  tm_interrupt_preemption_thread_0_entry(void)
{
 80014a0:	b580      	push	{r7, lr}
 80014a2:	af00      	add	r7, sp, #0

    while(1)
    {

        /* Increment this thread's counter.  */
        tm_interrupt_preemption_thread_0_counter++;
 80014a4:	4b04      	ldr	r3, [pc, #16]	; (80014b8 <tm_interrupt_preemption_thread_0_entry+0x18>)
 80014a6:	681b      	ldr	r3, [r3, #0]
 80014a8:	3301      	adds	r3, #1
 80014aa:	4a03      	ldr	r2, [pc, #12]	; (80014b8 <tm_interrupt_preemption_thread_0_entry+0x18>)
 80014ac:	6013      	str	r3, [r2, #0]

        /* Suspend. This will allow the thread generating the 
           interrupt to run again.  */
        tm_thread_suspend(0);
 80014ae:	2000      	movs	r0, #0
 80014b0:	f000 f8dc 	bl	800166c <tm_thread_suspend>
        tm_interrupt_preemption_thread_0_counter++;
 80014b4:	e7f6      	b.n	80014a4 <tm_interrupt_preemption_thread_0_entry+0x4>
 80014b6:	bf00      	nop
 80014b8:	240007a4 	.word	0x240007a4

080014bc <tm_interrupt_preemption_thread_1_entry>:
    }
}

/* Define the thread that generates the interrupt.  */
void  tm_interrupt_preemption_thread_1_entry(void)
{
 80014bc:	b480      	push	{r7}
 80014be:	af00      	add	r7, sp, #0
    {

        /* Force an interrupt. The underlying RTOS must see that the 
           the interrupt handler is called from the appropriate software
           interrupt or trap. */
        TM_CAUSE_INTERRUPT
 80014c0:	df00      	svc	0
        /* We won't get back here until the interrupt processing is complete,
           including the execution of the higher priority thread made ready
           by the interrupt.  */

        /* Increment this thread's counter.  */
        tm_interrupt_preemption_thread_1_counter++;
 80014c2:	4b03      	ldr	r3, [pc, #12]	; (80014d0 <tm_interrupt_preemption_thread_1_entry+0x14>)
 80014c4:	681b      	ldr	r3, [r3, #0]
 80014c6:	3301      	adds	r3, #1
 80014c8:	4a01      	ldr	r2, [pc, #4]	; (80014d0 <tm_interrupt_preemption_thread_1_entry+0x14>)
 80014ca:	6013      	str	r3, [r2, #0]
        TM_CAUSE_INTERRUPT
 80014cc:	e7f8      	b.n	80014c0 <tm_interrupt_preemption_thread_1_entry+0x4>
 80014ce:	bf00      	nop
 80014d0:	240007a8 	.word	0x240007a8

080014d4 <tm_interrupt_preemption_thread_report>:
}


/* Define the interrupt test reporting thread.  */
void  tm_interrupt_preemption_thread_report(void)
{
 80014d4:	b580      	push	{r7, lr}
 80014d6:	b084      	sub	sp, #16
 80014d8:	af00      	add	r7, sp, #0
unsigned long   last_total;
unsigned long   average;


    /* Initialize the last total.  */
    last_total =  0;
 80014da:	2300      	movs	r3, #0
 80014dc:	60bb      	str	r3, [r7, #8]

    /* Initialize the relative time.  */
    relative_time =  0;
 80014de:	2300      	movs	r3, #0
 80014e0:	60fb      	str	r3, [r7, #12]

    while(1)
    {

        /* Sleep to allow the test to run.  */
        tm_thread_sleep(TM_TEST_DURATION);
 80014e2:	201e      	movs	r0, #30
 80014e4:	f000 f8dc 	bl	80016a0 <tm_thread_sleep>

        /* Increment the relative time.  */
        relative_time =  relative_time + TM_TEST_DURATION;
 80014e8:	68fb      	ldr	r3, [r7, #12]
 80014ea:	331e      	adds	r3, #30
 80014ec:	60fb      	str	r3, [r7, #12]

        /* Print results to the stdio window.  */
        printf("**** Thread-Metric Interrupt Preemption Processing Test **** Relative Time: %lu\n\r", relative_time);
 80014ee:	68f9      	ldr	r1, [r7, #12]
 80014f0:	4822      	ldr	r0, [pc, #136]	; (800157c <tm_interrupt_preemption_thread_report+0xa8>)
 80014f2:	f006 fae7 	bl	8007ac4 <iprintf>

        /* Calculate the total of all the counters.  */
        total =  tm_interrupt_preemption_thread_0_counter + tm_interrupt_preemption_thread_1_counter + tm_interrupt_preemption_handler_counter;
 80014f6:	4b22      	ldr	r3, [pc, #136]	; (8001580 <tm_interrupt_preemption_thread_report+0xac>)
 80014f8:	681a      	ldr	r2, [r3, #0]
 80014fa:	4b22      	ldr	r3, [pc, #136]	; (8001584 <tm_interrupt_preemption_thread_report+0xb0>)
 80014fc:	681b      	ldr	r3, [r3, #0]
 80014fe:	441a      	add	r2, r3
 8001500:	4b21      	ldr	r3, [pc, #132]	; (8001588 <tm_interrupt_preemption_thread_report+0xb4>)
 8001502:	681b      	ldr	r3, [r3, #0]
 8001504:	4413      	add	r3, r2
 8001506:	607b      	str	r3, [r7, #4]

        /* Calculate the average of all the counters.  */
        average =  total/3;
 8001508:	687b      	ldr	r3, [r7, #4]
 800150a:	4a20      	ldr	r2, [pc, #128]	; (800158c <tm_interrupt_preemption_thread_report+0xb8>)
 800150c:	fba2 2303 	umull	r2, r3, r2, r3
 8001510:	085b      	lsrs	r3, r3, #1
 8001512:	603b      	str	r3, [r7, #0]

        /* See if there are any errors.  */
        if ((tm_interrupt_preemption_thread_0_counter < (average - 1)) || 
 8001514:	683b      	ldr	r3, [r7, #0]
 8001516:	1e5a      	subs	r2, r3, #1
 8001518:	4b19      	ldr	r3, [pc, #100]	; (8001580 <tm_interrupt_preemption_thread_report+0xac>)
 800151a:	681b      	ldr	r3, [r3, #0]
 800151c:	429a      	cmp	r2, r3
 800151e:	d81d      	bhi.n	800155c <tm_interrupt_preemption_thread_report+0x88>
            (tm_interrupt_preemption_thread_0_counter > (average + 1)) ||
 8001520:	683b      	ldr	r3, [r7, #0]
 8001522:	1c5a      	adds	r2, r3, #1
 8001524:	4b16      	ldr	r3, [pc, #88]	; (8001580 <tm_interrupt_preemption_thread_report+0xac>)
 8001526:	681b      	ldr	r3, [r3, #0]
        if ((tm_interrupt_preemption_thread_0_counter < (average - 1)) || 
 8001528:	429a      	cmp	r2, r3
 800152a:	d317      	bcc.n	800155c <tm_interrupt_preemption_thread_report+0x88>
            (tm_interrupt_preemption_thread_1_counter < (average - 1)) || 
 800152c:	683b      	ldr	r3, [r7, #0]
 800152e:	1e5a      	subs	r2, r3, #1
 8001530:	4b14      	ldr	r3, [pc, #80]	; (8001584 <tm_interrupt_preemption_thread_report+0xb0>)
 8001532:	681b      	ldr	r3, [r3, #0]
            (tm_interrupt_preemption_thread_0_counter > (average + 1)) ||
 8001534:	429a      	cmp	r2, r3
 8001536:	d811      	bhi.n	800155c <tm_interrupt_preemption_thread_report+0x88>
            (tm_interrupt_preemption_thread_1_counter > (average + 1)) ||
 8001538:	683b      	ldr	r3, [r7, #0]
 800153a:	1c5a      	adds	r2, r3, #1
 800153c:	4b11      	ldr	r3, [pc, #68]	; (8001584 <tm_interrupt_preemption_thread_report+0xb0>)
 800153e:	681b      	ldr	r3, [r3, #0]
            (tm_interrupt_preemption_thread_1_counter < (average - 1)) || 
 8001540:	429a      	cmp	r2, r3
 8001542:	d30b      	bcc.n	800155c <tm_interrupt_preemption_thread_report+0x88>
            (tm_interrupt_preemption_handler_counter < (average - 1)) || 
 8001544:	683b      	ldr	r3, [r7, #0]
 8001546:	1e5a      	subs	r2, r3, #1
 8001548:	4b0f      	ldr	r3, [pc, #60]	; (8001588 <tm_interrupt_preemption_thread_report+0xb4>)
 800154a:	681b      	ldr	r3, [r3, #0]
            (tm_interrupt_preemption_thread_1_counter > (average + 1)) ||
 800154c:	429a      	cmp	r2, r3
 800154e:	d805      	bhi.n	800155c <tm_interrupt_preemption_thread_report+0x88>
            (tm_interrupt_preemption_handler_counter > (average + 1)))
 8001550:	683b      	ldr	r3, [r7, #0]
 8001552:	1c5a      	adds	r2, r3, #1
 8001554:	4b0c      	ldr	r3, [pc, #48]	; (8001588 <tm_interrupt_preemption_thread_report+0xb4>)
 8001556:	681b      	ldr	r3, [r3, #0]
            (tm_interrupt_preemption_handler_counter < (average - 1)) || 
 8001558:	429a      	cmp	r2, r3
 800155a:	d202      	bcs.n	8001562 <tm_interrupt_preemption_thread_report+0x8e>
        {

            printf("ERROR: Invalid counter value(s). Interrupt processing test has failed!\n\r");
 800155c:	480c      	ldr	r0, [pc, #48]	; (8001590 <tm_interrupt_preemption_thread_report+0xbc>)
 800155e:	f006 fab1 	bl	8007ac4 <iprintf>
        }

        /* Show the total interrupts for the time period.  */
        printf("Time Period Total:  %lu\n\n\r", tm_interrupt_preemption_handler_counter - last_total);
 8001562:	4b09      	ldr	r3, [pc, #36]	; (8001588 <tm_interrupt_preemption_thread_report+0xb4>)
 8001564:	681a      	ldr	r2, [r3, #0]
 8001566:	68bb      	ldr	r3, [r7, #8]
 8001568:	1ad3      	subs	r3, r2, r3
 800156a:	4619      	mov	r1, r3
 800156c:	4809      	ldr	r0, [pc, #36]	; (8001594 <tm_interrupt_preemption_thread_report+0xc0>)
 800156e:	f006 faa9 	bl	8007ac4 <iprintf>

        /* Save the last total number of interrupts.  */
        last_total =  tm_interrupt_preemption_handler_counter;
 8001572:	4b05      	ldr	r3, [pc, #20]	; (8001588 <tm_interrupt_preemption_thread_report+0xb4>)
 8001574:	681b      	ldr	r3, [r3, #0]
 8001576:	60bb      	str	r3, [r7, #8]
        tm_thread_sleep(TM_TEST_DURATION);
 8001578:	e7b3      	b.n	80014e2 <tm_interrupt_preemption_thread_report+0xe>
 800157a:	bf00      	nop
 800157c:	08008a58 	.word	0x08008a58
 8001580:	240007a4 	.word	0x240007a4
 8001584:	240007a8 	.word	0x240007a8
 8001588:	240007ac 	.word	0x240007ac
 800158c:	aaaaaaab 	.word	0xaaaaaaab
 8001590:	08008aac 	.word	0x08008aac
 8001594:	08008af8 	.word	0x08008af8

08001598 <tm_initialize>:


/* This function called from main performs basic RTOS initialization,
   calls the test initialization function, and then starts the RTOS function.  */
void  tm_initialize(void (*test_initialization_function)(void))
{
 8001598:	b580      	push	{r7, lr}
 800159a:	b082      	sub	sp, #8
 800159c:	af00      	add	r7, sp, #0
 800159e:	6078      	str	r0, [r7, #4]

    /* Save the test initialization function.  */
    tm_initialization_function =  test_initialization_function;
 80015a0:	4a04      	ldr	r2, [pc, #16]	; (80015b4 <tm_initialize+0x1c>)
 80015a2:	687b      	ldr	r3, [r7, #4]
 80015a4:	6013      	str	r3, [r2, #0]

    /* Call the previously defined initialization function.  */
    (tm_initialization_function)();
 80015a6:	4b03      	ldr	r3, [pc, #12]	; (80015b4 <tm_initialize+0x1c>)
 80015a8:	681b      	ldr	r3, [r3, #0]
 80015aa:	4798      	blx	r3
}
 80015ac:	bf00      	nop
 80015ae:	3708      	adds	r7, #8
 80015b0:	46bd      	mov	sp, r7
 80015b2:	bd80      	pop	{r7, pc}
 80015b4:	24006098 	.word	0x24006098

080015b8 <tm_thread_create>:
/* This function takes a thread ID and priority and attempts to create the
   file in the underlying RTOS.  Valid priorities range from 1 through 31,
   where 1 is the highest priority and 31 is the lowest. If successful,
   the function should return TM_SUCCESS. Otherwise, TM_ERROR should be returned.   */
int  tm_thread_create(int thread_id, int priority, void (*entry_function)(void))
{
 80015b8:	b5b0      	push	{r4, r5, r7, lr}
 80015ba:	b08c      	sub	sp, #48	; 0x30
 80015bc:	af06      	add	r7, sp, #24
 80015be:	60f8      	str	r0, [r7, #12]
 80015c0:	60b9      	str	r1, [r7, #8]
 80015c2:	607a      	str	r2, [r7, #4]

UINT    status;

    /* Remember the actual thread entry.  */
    tm_thread_entry_functions[thread_id] =  (void *) entry_function;
 80015c4:	4917      	ldr	r1, [pc, #92]	; (8001624 <tm_thread_create+0x6c>)
 80015c6:	68fb      	ldr	r3, [r7, #12]
 80015c8:	687a      	ldr	r2, [r7, #4]
 80015ca:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

    /* Create the thread under ThreadX.  */
    status =  tx_thread_create(&tm_thread_array[thread_id], "Thread-Metric test", tm_thread_entry, (ULONG) thread_id,
 80015ce:	68fb      	ldr	r3, [r7, #12]
 80015d0:	22b0      	movs	r2, #176	; 0xb0
 80015d2:	fb02 f303 	mul.w	r3, r2, r3
 80015d6:	4a14      	ldr	r2, [pc, #80]	; (8001628 <tm_thread_create+0x70>)
 80015d8:	1898      	adds	r0, r3, r2
 80015da:	68fc      	ldr	r4, [r7, #12]
                    &tm_thread_stack_area[thread_id*TM_THREADX_THREAD_STACK_SIZE], TM_THREADX_THREAD_STACK_SIZE,
 80015dc:	68fb      	ldr	r3, [r7, #12]
 80015de:	f44f 6203 	mov.w	r2, #2096	; 0x830
 80015e2:	fb02 f303 	mul.w	r3, r2, r3
 80015e6:	4a11      	ldr	r2, [pc, #68]	; (800162c <tm_thread_create+0x74>)
 80015e8:	4413      	add	r3, r2
    status =  tx_thread_create(&tm_thread_array[thread_id], "Thread-Metric test", tm_thread_entry, (ULONG) thread_id,
 80015ea:	68ba      	ldr	r2, [r7, #8]
 80015ec:	68b9      	ldr	r1, [r7, #8]
 80015ee:	2500      	movs	r5, #0
 80015f0:	9505      	str	r5, [sp, #20]
 80015f2:	2500      	movs	r5, #0
 80015f4:	9504      	str	r5, [sp, #16]
 80015f6:	9103      	str	r1, [sp, #12]
 80015f8:	9202      	str	r2, [sp, #8]
 80015fa:	f44f 6203 	mov.w	r2, #2096	; 0x830
 80015fe:	9201      	str	r2, [sp, #4]
 8001600:	9300      	str	r3, [sp, #0]
 8001602:	4623      	mov	r3, r4
 8001604:	4a0a      	ldr	r2, [pc, #40]	; (8001630 <tm_thread_create+0x78>)
 8001606:	490b      	ldr	r1, [pc, #44]	; (8001634 <tm_thread_create+0x7c>)
 8001608:	f005 f8c0 	bl	800678c <_tx_thread_create>
 800160c:	6178      	str	r0, [r7, #20]
                    (UINT) priority, (UINT) priority, TX_NO_TIME_SLICE, TX_DONT_START);

    /* Determine if the thread create was successful.  */
    if (status == TX_SUCCESS)
 800160e:	697b      	ldr	r3, [r7, #20]
 8001610:	2b00      	cmp	r3, #0
 8001612:	d101      	bne.n	8001618 <tm_thread_create+0x60>
        return(TM_SUCCESS);
 8001614:	2300      	movs	r3, #0
 8001616:	e000      	b.n	800161a <tm_thread_create+0x62>
    else
        return(TM_ERROR);
 8001618:	2301      	movs	r3, #1
}
 800161a:	4618      	mov	r0, r3
 800161c:	3718      	adds	r7, #24
 800161e:	46bd      	mov	sp, r7
 8001620:	bdb0      	pop	{r4, r5, r7, pc}
 8001622:	bf00      	nop
 8001624:	24006070 	.word	0x24006070
 8001628:	240007b0 	.word	0x240007b0
 800162c:	24000e90 	.word	0x24000e90
 8001630:	080016c1 	.word	0x080016c1
 8001634:	08008b14 	.word	0x08008b14

08001638 <tm_thread_resume>:


/* This function resumes the specified thread.  If successful, the function should
   return TM_SUCCESS. Otherwise, TM_ERROR should be returned.  */
int  tm_thread_resume(int thread_id)
{
 8001638:	b580      	push	{r7, lr}
 800163a:	b084      	sub	sp, #16
 800163c:	af00      	add	r7, sp, #0
 800163e:	6078      	str	r0, [r7, #4]

UINT    status;


    /* Attempt to resume the thread.  */
    status =  tx_thread_resume(&tm_thread_array[thread_id]);
 8001640:	687b      	ldr	r3, [r7, #4]
 8001642:	22b0      	movs	r2, #176	; 0xb0
 8001644:	fb02 f303 	mul.w	r3, r2, r3
 8001648:	4a07      	ldr	r2, [pc, #28]	; (8001668 <tm_thread_resume+0x30>)
 800164a:	4413      	add	r3, r2
 800164c:	4618      	mov	r0, r3
 800164e:	f005 f9cf 	bl	80069f0 <_tx_thread_resume>
 8001652:	60f8      	str	r0, [r7, #12]

    /* Determine if the thread resume was successful.  */
    if (status == TX_SUCCESS)
 8001654:	68fb      	ldr	r3, [r7, #12]
 8001656:	2b00      	cmp	r3, #0
 8001658:	d101      	bne.n	800165e <tm_thread_resume+0x26>
        return(TM_SUCCESS);
 800165a:	2300      	movs	r3, #0
 800165c:	e000      	b.n	8001660 <tm_thread_resume+0x28>
    else
        return(TM_ERROR);
 800165e:	2301      	movs	r3, #1
}
 8001660:	4618      	mov	r0, r3
 8001662:	3710      	adds	r7, #16
 8001664:	46bd      	mov	sp, r7
 8001666:	bd80      	pop	{r7, pc}
 8001668:	240007b0 	.word	0x240007b0

0800166c <tm_thread_suspend>:


/* This function suspends the specified thread.  If successful, the function should
   return TM_SUCCESS. Otherwise, TM_ERROR should be returned.  */
int  tm_thread_suspend(int thread_id)
{
 800166c:	b580      	push	{r7, lr}
 800166e:	b084      	sub	sp, #16
 8001670:	af00      	add	r7, sp, #0
 8001672:	6078      	str	r0, [r7, #4]

UINT    status;


    /* Attempt to suspend the thread.  */
    status =  tx_thread_suspend(&tm_thread_array[thread_id]);
 8001674:	687b      	ldr	r3, [r7, #4]
 8001676:	22b0      	movs	r2, #176	; 0xb0
 8001678:	fb02 f303 	mul.w	r3, r2, r3
 800167c:	4a07      	ldr	r2, [pc, #28]	; (800169c <tm_thread_suspend+0x30>)
 800167e:	4413      	add	r3, r2
 8001680:	4618      	mov	r0, r3
 8001682:	f005 fae1 	bl	8006c48 <_tx_thread_suspend>
 8001686:	60f8      	str	r0, [r7, #12]

    /* Determine if the thread suspend was successful.  */
    if (status == TX_SUCCESS)
 8001688:	68fb      	ldr	r3, [r7, #12]
 800168a:	2b00      	cmp	r3, #0
 800168c:	d101      	bne.n	8001692 <tm_thread_suspend+0x26>
        return(TM_SUCCESS);
 800168e:	2300      	movs	r3, #0
 8001690:	e000      	b.n	8001694 <tm_thread_suspend+0x28>
    else
        return(TM_ERROR);
 8001692:	2301      	movs	r3, #1
}
 8001694:	4618      	mov	r0, r3
 8001696:	3710      	adds	r7, #16
 8001698:	46bd      	mov	sp, r7
 800169a:	bd80      	pop	{r7, pc}
 800169c:	240007b0 	.word	0x240007b0

080016a0 <tm_thread_sleep>:

/* This function suspends the specified thread for the specified number
   of seconds.  If successful, the function should return TM_SUCCESS.
   Otherwise, TM_ERROR should be returned.  */
void tm_thread_sleep(int seconds)
{
 80016a0:	b580      	push	{r7, lr}
 80016a2:	b082      	sub	sp, #8
 80016a4:	af00      	add	r7, sp, #0
 80016a6:	6078      	str	r0, [r7, #4]

    /* Attempt to sleep.  */
    tx_thread_sleep(((UINT) seconds)*TM_THREADX_TICKS_PER_SECOND);
 80016a8:	687b      	ldr	r3, [r7, #4]
 80016aa:	2264      	movs	r2, #100	; 0x64
 80016ac:	fb02 f303 	mul.w	r3, r2, r3
 80016b0:	4618      	mov	r0, r3
 80016b2:	f005 fa49 	bl	8006b48 <_tx_thread_sleep>
}
 80016b6:	bf00      	nop
 80016b8:	3708      	adds	r7, #8
 80016ba:	46bd      	mov	sp, r7
 80016bc:	bd80      	pop	{r7, pc}
	...

080016c0 <tm_thread_entry>:


/* This is the ThreadX thread entry.  It is going to call the Thread-Metric
   entry function saved earlier.  */
VOID  tm_thread_entry(ULONG thread_input)
{
 80016c0:	b580      	push	{r7, lr}
 80016c2:	b084      	sub	sp, #16
 80016c4:	af00      	add	r7, sp, #0
 80016c6:	6078      	str	r0, [r7, #4]

void (*entry_function)(void);


    /* Pickup the entry function from the saved array.  */
    entry_function =  (void (*)(void)) tm_thread_entry_functions[thread_input];
 80016c8:	4a05      	ldr	r2, [pc, #20]	; (80016e0 <tm_thread_entry+0x20>)
 80016ca:	687b      	ldr	r3, [r7, #4]
 80016cc:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80016d0:	60fb      	str	r3, [r7, #12]

    /* Call the entry function.   */
    (entry_function)();
 80016d2:	68fb      	ldr	r3, [r7, #12]
 80016d4:	4798      	blx	r3
}
 80016d6:	bf00      	nop
 80016d8:	3710      	adds	r7, #16
 80016da:	46bd      	mov	sp, r7
 80016dc:	bd80      	pop	{r7, pc}
 80016de:	bf00      	nop
 80016e0:	24006070 	.word	0x24006070

080016e4 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:
  ldr   sp, =_estack      /* set stack pointer */
 80016e4:	f8df d034 	ldr.w	sp, [pc, #52]	; 800171c <LoopFillZerobss+0xe>

/* Call the clock system initialization function.*/
  bl  SystemInit
 80016e8:	f7ff fe38 	bl	800135c <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 80016ec:	480c      	ldr	r0, [pc, #48]	; (8001720 <LoopFillZerobss+0x12>)
  ldr r1, =_edata
 80016ee:	490d      	ldr	r1, [pc, #52]	; (8001724 <LoopFillZerobss+0x16>)
  ldr r2, =_sidata
 80016f0:	4a0d      	ldr	r2, [pc, #52]	; (8001728 <LoopFillZerobss+0x1a>)
  movs r3, #0
 80016f2:	2300      	movs	r3, #0
  b LoopCopyDataInit
 80016f4:	e002      	b.n	80016fc <LoopCopyDataInit>

080016f6 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 80016f6:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 80016f8:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 80016fa:	3304      	adds	r3, #4

080016fc <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 80016fc:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 80016fe:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8001700:	d3f9      	bcc.n	80016f6 <CopyDataInit>
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8001702:	4a0a      	ldr	r2, [pc, #40]	; (800172c <LoopFillZerobss+0x1e>)
  ldr r4, =_ebss
 8001704:	4c0a      	ldr	r4, [pc, #40]	; (8001730 <LoopFillZerobss+0x22>)
  movs r3, #0
 8001706:	2300      	movs	r3, #0
  b LoopFillZerobss
 8001708:	e001      	b.n	800170e <LoopFillZerobss>

0800170a <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 800170a:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 800170c:	3204      	adds	r2, #4

0800170e <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 800170e:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8001710:	d3fb      	bcc.n	800170a <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 8001712:	f006 f9ab 	bl	8007a6c <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8001716:	f7ff f949 	bl	80009ac <main>
  bx  lr
 800171a:	4770      	bx	lr
  ldr   sp, =_estack      /* set stack pointer */
 800171c:	24050000 	.word	0x24050000
  ldr r0, =_sdata
 8001720:	24000000 	.word	0x24000000
  ldr r1, =_edata
 8001724:	24000078 	.word	0x24000078
  ldr r2, =_sidata
 8001728:	08008c1c 	.word	0x08008c1c
  ldr r2, =_sbss
 800172c:	24000138 	.word	0x24000138
  ldr r4, =_ebss
 8001730:	240066f4 	.word	0x240066f4

08001734 <ADC3_IRQHandler>:
 * @retval None
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8001734:	e7fe      	b.n	8001734 <ADC3_IRQHandler>
	...

08001738 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8001738:	b580      	push	{r7, lr}
 800173a:	b082      	sub	sp, #8
 800173c:	af00      	add	r7, sp, #0
   __HAL_ART_CONFIG_BASE_ADDRESS(0x08100000UL);  /* Configure the Cortex-M4 ART Base address to the Flash Bank 2 : */
   __HAL_ART_ENABLE();                           /* Enable the Cortex-M4 ART */
#endif /* DUAL_CORE &&  CORE_CM4 */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 800173e:	2003      	movs	r0, #3
 8001740:	f000 f93e 	bl	80019c0 <HAL_NVIC_SetPriorityGrouping>

  /* Update the SystemCoreClock global variable */
#if defined(RCC_D1CFGR_D1CPRE)
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE)>> RCC_D1CFGR_D1CPRE_Pos]) & 0x1FU);
 8001744:	f001 fd1e 	bl	8003184 <HAL_RCC_GetSysClockFreq>
 8001748:	4602      	mov	r2, r0
 800174a:	4b15      	ldr	r3, [pc, #84]	; (80017a0 <HAL_Init+0x68>)
 800174c:	699b      	ldr	r3, [r3, #24]
 800174e:	0a1b      	lsrs	r3, r3, #8
 8001750:	f003 030f 	and.w	r3, r3, #15
 8001754:	4913      	ldr	r1, [pc, #76]	; (80017a4 <HAL_Init+0x6c>)
 8001756:	5ccb      	ldrb	r3, [r1, r3]
 8001758:	f003 031f 	and.w	r3, r3, #31
 800175c:	fa22 f303 	lsr.w	r3, r2, r3
 8001760:	607b      	str	r3, [r7, #4]
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->CDCFGR1 & RCC_CDCFGR1_CDCPRE)>> RCC_CDCFGR1_CDCPRE_Pos]) & 0x1FU);
#endif

  /* Update the SystemD2Clock global variable */
#if defined(RCC_D1CFGR_HPRE)
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE)>> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
 8001762:	4b0f      	ldr	r3, [pc, #60]	; (80017a0 <HAL_Init+0x68>)
 8001764:	699b      	ldr	r3, [r3, #24]
 8001766:	f003 030f 	and.w	r3, r3, #15
 800176a:	4a0e      	ldr	r2, [pc, #56]	; (80017a4 <HAL_Init+0x6c>)
 800176c:	5cd3      	ldrb	r3, [r2, r3]
 800176e:	f003 031f 	and.w	r3, r3, #31
 8001772:	687a      	ldr	r2, [r7, #4]
 8001774:	fa22 f303 	lsr.w	r3, r2, r3
 8001778:	4a0b      	ldr	r2, [pc, #44]	; (80017a8 <HAL_Init+0x70>)
 800177a:	6013      	str	r3, [r2, #0]
#endif

#if defined(DUAL_CORE) && defined(CORE_CM4)
  SystemCoreClock = SystemD2Clock;
#else
  SystemCoreClock = common_system_clock;
 800177c:	4a0b      	ldr	r2, [pc, #44]	; (80017ac <HAL_Init+0x74>)
 800177e:	687b      	ldr	r3, [r7, #4]
 8001780:	6013      	str	r3, [r2, #0]
#endif /* DUAL_CORE && CORE_CM4 */

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  if(HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 8001782:	2000      	movs	r0, #0
 8001784:	f000 f814 	bl	80017b0 <HAL_InitTick>
 8001788:	4603      	mov	r3, r0
 800178a:	2b00      	cmp	r3, #0
 800178c:	d001      	beq.n	8001792 <HAL_Init+0x5a>
  {
    return HAL_ERROR;
 800178e:	2301      	movs	r3, #1
 8001790:	e002      	b.n	8001798 <HAL_Init+0x60>
  }

  /* Init the low level hardware */
  HAL_MspInit();
 8001792:	f7ff fb7f 	bl	8000e94 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8001796:	2300      	movs	r3, #0
}
 8001798:	4618      	mov	r0, r3
 800179a:	3708      	adds	r7, #8
 800179c:	46bd      	mov	sp, r7
 800179e:	bd80      	pop	{r7, pc}
 80017a0:	58024400 	.word	0x58024400
 80017a4:	08008b3c 	.word	0x08008b3c
 80017a8:	24000004 	.word	0x24000004
 80017ac:	24000000 	.word	0x24000000

080017b0 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 80017b0:	b580      	push	{r7, lr}
 80017b2:	b082      	sub	sp, #8
 80017b4:	af00      	add	r7, sp, #0
 80017b6:	6078      	str	r0, [r7, #4]
  /* Check uwTickFreq for MisraC 2012 (even if uwTickFreq is a enum type that don't take the value zero)*/
  if((uint32_t)uwTickFreq == 0UL)
 80017b8:	4b15      	ldr	r3, [pc, #84]	; (8001810 <HAL_InitTick+0x60>)
 80017ba:	781b      	ldrb	r3, [r3, #0]
 80017bc:	2b00      	cmp	r3, #0
 80017be:	d101      	bne.n	80017c4 <HAL_InitTick+0x14>
  {
    return HAL_ERROR;
 80017c0:	2301      	movs	r3, #1
 80017c2:	e021      	b.n	8001808 <HAL_InitTick+0x58>
  }

    /* Configure the SysTick to have interrupt in 1ms time basis*/
    if (HAL_SYSTICK_Config(SystemCoreClock / (1000UL / (uint32_t)uwTickFreq)) > 0U)
 80017c4:	4b13      	ldr	r3, [pc, #76]	; (8001814 <HAL_InitTick+0x64>)
 80017c6:	681a      	ldr	r2, [r3, #0]
 80017c8:	4b11      	ldr	r3, [pc, #68]	; (8001810 <HAL_InitTick+0x60>)
 80017ca:	781b      	ldrb	r3, [r3, #0]
 80017cc:	4619      	mov	r1, r3
 80017ce:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 80017d2:	fbb3 f3f1 	udiv	r3, r3, r1
 80017d6:	fbb2 f3f3 	udiv	r3, r2, r3
 80017da:	4618      	mov	r0, r3
 80017dc:	f000 f915 	bl	8001a0a <HAL_SYSTICK_Config>
 80017e0:	4603      	mov	r3, r0
 80017e2:	2b00      	cmp	r3, #0
 80017e4:	d001      	beq.n	80017ea <HAL_InitTick+0x3a>
    {
      return HAL_ERROR;
 80017e6:	2301      	movs	r3, #1
 80017e8:	e00e      	b.n	8001808 <HAL_InitTick+0x58>
    }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 80017ea:	687b      	ldr	r3, [r7, #4]
 80017ec:	2b0f      	cmp	r3, #15
 80017ee:	d80a      	bhi.n	8001806 <HAL_InitTick+0x56>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 80017f0:	2200      	movs	r2, #0
 80017f2:	6879      	ldr	r1, [r7, #4]
 80017f4:	f04f 30ff 	mov.w	r0, #4294967295
 80017f8:	f000 f8ed 	bl	80019d6 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 80017fc:	4a06      	ldr	r2, [pc, #24]	; (8001818 <HAL_InitTick+0x68>)
 80017fe:	687b      	ldr	r3, [r7, #4]
 8001800:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8001802:	2300      	movs	r3, #0
 8001804:	e000      	b.n	8001808 <HAL_InitTick+0x58>
    return HAL_ERROR;
 8001806:	2301      	movs	r3, #1
}
 8001808:	4618      	mov	r0, r3
 800180a:	3708      	adds	r7, #8
 800180c:	46bd      	mov	sp, r7
 800180e:	bd80      	pop	{r7, pc}
 8001810:	2400000c 	.word	0x2400000c
 8001814:	24000000 	.word	0x24000000
 8001818:	24000008 	.word	0x24000008

0800181c <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 800181c:	b480      	push	{r7}
 800181e:	af00      	add	r7, sp, #0
  return uwTick;
 8001820:	4b03      	ldr	r3, [pc, #12]	; (8001830 <HAL_GetTick+0x14>)
 8001822:	681b      	ldr	r3, [r3, #0]
}
 8001824:	4618      	mov	r0, r3
 8001826:	46bd      	mov	sp, r7
 8001828:	f85d 7b04 	ldr.w	r7, [sp], #4
 800182c:	4770      	bx	lr
 800182e:	bf00      	nop
 8001830:	2400609c 	.word	0x2400609c

08001834 <HAL_SYSCFG_ETHInterfaceSelect>:
  *   @arg SYSCFG_ETH_MII : Select the Media Independent Interface
  *   @arg SYSCFG_ETH_RMII: Select the Reduced Media Independent Interface
  * @retval None
  */
void HAL_SYSCFG_ETHInterfaceSelect(uint32_t SYSCFG_ETHInterface)
{
 8001834:	b480      	push	{r7}
 8001836:	b083      	sub	sp, #12
 8001838:	af00      	add	r7, sp, #0
 800183a:	6078      	str	r0, [r7, #4]
  /* Check the parameter */
  assert_param(IS_SYSCFG_ETHERNET_CONFIG(SYSCFG_ETHInterface));

  MODIFY_REG(SYSCFG->PMCR, SYSCFG_PMCR_EPIS_SEL, (uint32_t)(SYSCFG_ETHInterface));
 800183c:	4b06      	ldr	r3, [pc, #24]	; (8001858 <HAL_SYSCFG_ETHInterfaceSelect+0x24>)
 800183e:	685b      	ldr	r3, [r3, #4]
 8001840:	f423 0260 	bic.w	r2, r3, #14680064	; 0xe00000
 8001844:	4904      	ldr	r1, [pc, #16]	; (8001858 <HAL_SYSCFG_ETHInterfaceSelect+0x24>)
 8001846:	687b      	ldr	r3, [r7, #4]
 8001848:	4313      	orrs	r3, r2
 800184a:	604b      	str	r3, [r1, #4]
}
 800184c:	bf00      	nop
 800184e:	370c      	adds	r7, #12
 8001850:	46bd      	mov	sp, r7
 8001852:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001856:	4770      	bx	lr
 8001858:	58000400 	.word	0x58000400

0800185c <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 800185c:	b480      	push	{r7}
 800185e:	b085      	sub	sp, #20
 8001860:	af00      	add	r7, sp, #0
 8001862:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8001864:	687b      	ldr	r3, [r7, #4]
 8001866:	f003 0307 	and.w	r3, r3, #7
 800186a:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 800186c:	4b0b      	ldr	r3, [pc, #44]	; (800189c <__NVIC_SetPriorityGrouping+0x40>)
 800186e:	68db      	ldr	r3, [r3, #12]
 8001870:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8001872:	68ba      	ldr	r2, [r7, #8]
 8001874:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8001878:	4013      	ands	r3, r2
 800187a:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 800187c:	68fb      	ldr	r3, [r7, #12]
 800187e:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8001880:	68bb      	ldr	r3, [r7, #8]
 8001882:	431a      	orrs	r2, r3
  reg_value  =  (reg_value                                   |
 8001884:	4b06      	ldr	r3, [pc, #24]	; (80018a0 <__NVIC_SetPriorityGrouping+0x44>)
 8001886:	4313      	orrs	r3, r2
 8001888:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 800188a:	4a04      	ldr	r2, [pc, #16]	; (800189c <__NVIC_SetPriorityGrouping+0x40>)
 800188c:	68bb      	ldr	r3, [r7, #8]
 800188e:	60d3      	str	r3, [r2, #12]
}
 8001890:	bf00      	nop
 8001892:	3714      	adds	r7, #20
 8001894:	46bd      	mov	sp, r7
 8001896:	f85d 7b04 	ldr.w	r7, [sp], #4
 800189a:	4770      	bx	lr
 800189c:	e000ed00 	.word	0xe000ed00
 80018a0:	05fa0000 	.word	0x05fa0000

080018a4 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 80018a4:	b480      	push	{r7}
 80018a6:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 80018a8:	4b04      	ldr	r3, [pc, #16]	; (80018bc <__NVIC_GetPriorityGrouping+0x18>)
 80018aa:	68db      	ldr	r3, [r3, #12]
 80018ac:	0a1b      	lsrs	r3, r3, #8
 80018ae:	f003 0307 	and.w	r3, r3, #7
}
 80018b2:	4618      	mov	r0, r3
 80018b4:	46bd      	mov	sp, r7
 80018b6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80018ba:	4770      	bx	lr
 80018bc:	e000ed00 	.word	0xe000ed00

080018c0 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 80018c0:	b480      	push	{r7}
 80018c2:	b083      	sub	sp, #12
 80018c4:	af00      	add	r7, sp, #0
 80018c6:	4603      	mov	r3, r0
 80018c8:	6039      	str	r1, [r7, #0]
 80018ca:	80fb      	strh	r3, [r7, #6]
  if ((int32_t)(IRQn) >= 0)
 80018cc:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 80018d0:	2b00      	cmp	r3, #0
 80018d2:	db0a      	blt.n	80018ea <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]                = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80018d4:	683b      	ldr	r3, [r7, #0]
 80018d6:	b2da      	uxtb	r2, r3
 80018d8:	490c      	ldr	r1, [pc, #48]	; (800190c <__NVIC_SetPriority+0x4c>)
 80018da:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 80018de:	0112      	lsls	r2, r2, #4
 80018e0:	b2d2      	uxtb	r2, r2
 80018e2:	440b      	add	r3, r1
 80018e4:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 80018e8:	e00a      	b.n	8001900 <__NVIC_SetPriority+0x40>
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80018ea:	683b      	ldr	r3, [r7, #0]
 80018ec:	b2da      	uxtb	r2, r3
 80018ee:	4908      	ldr	r1, [pc, #32]	; (8001910 <__NVIC_SetPriority+0x50>)
 80018f0:	88fb      	ldrh	r3, [r7, #6]
 80018f2:	f003 030f 	and.w	r3, r3, #15
 80018f6:	3b04      	subs	r3, #4
 80018f8:	0112      	lsls	r2, r2, #4
 80018fa:	b2d2      	uxtb	r2, r2
 80018fc:	440b      	add	r3, r1
 80018fe:	761a      	strb	r2, [r3, #24]
}
 8001900:	bf00      	nop
 8001902:	370c      	adds	r7, #12
 8001904:	46bd      	mov	sp, r7
 8001906:	f85d 7b04 	ldr.w	r7, [sp], #4
 800190a:	4770      	bx	lr
 800190c:	e000e100 	.word	0xe000e100
 8001910:	e000ed00 	.word	0xe000ed00

08001914 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8001914:	b480      	push	{r7}
 8001916:	b089      	sub	sp, #36	; 0x24
 8001918:	af00      	add	r7, sp, #0
 800191a:	60f8      	str	r0, [r7, #12]
 800191c:	60b9      	str	r1, [r7, #8]
 800191e:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8001920:	68fb      	ldr	r3, [r7, #12]
 8001922:	f003 0307 	and.w	r3, r3, #7
 8001926:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8001928:	69fb      	ldr	r3, [r7, #28]
 800192a:	f1c3 0307 	rsb	r3, r3, #7
 800192e:	2b04      	cmp	r3, #4
 8001930:	bf28      	it	cs
 8001932:	2304      	movcs	r3, #4
 8001934:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8001936:	69fb      	ldr	r3, [r7, #28]
 8001938:	3304      	adds	r3, #4
 800193a:	2b06      	cmp	r3, #6
 800193c:	d902      	bls.n	8001944 <NVIC_EncodePriority+0x30>
 800193e:	69fb      	ldr	r3, [r7, #28]
 8001940:	3b03      	subs	r3, #3
 8001942:	e000      	b.n	8001946 <NVIC_EncodePriority+0x32>
 8001944:	2300      	movs	r3, #0
 8001946:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001948:	f04f 32ff 	mov.w	r2, #4294967295
 800194c:	69bb      	ldr	r3, [r7, #24]
 800194e:	fa02 f303 	lsl.w	r3, r2, r3
 8001952:	43da      	mvns	r2, r3
 8001954:	68bb      	ldr	r3, [r7, #8]
 8001956:	401a      	ands	r2, r3
 8001958:	697b      	ldr	r3, [r7, #20]
 800195a:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 800195c:	f04f 31ff 	mov.w	r1, #4294967295
 8001960:	697b      	ldr	r3, [r7, #20]
 8001962:	fa01 f303 	lsl.w	r3, r1, r3
 8001966:	43d9      	mvns	r1, r3
 8001968:	687b      	ldr	r3, [r7, #4]
 800196a:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 800196c:	4313      	orrs	r3, r2
         );
}
 800196e:	4618      	mov	r0, r3
 8001970:	3724      	adds	r7, #36	; 0x24
 8001972:	46bd      	mov	sp, r7
 8001974:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001978:	4770      	bx	lr
	...

0800197c <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 800197c:	b580      	push	{r7, lr}
 800197e:	b082      	sub	sp, #8
 8001980:	af00      	add	r7, sp, #0
 8001982:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8001984:	687b      	ldr	r3, [r7, #4]
 8001986:	3b01      	subs	r3, #1
 8001988:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 800198c:	d301      	bcc.n	8001992 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 800198e:	2301      	movs	r3, #1
 8001990:	e00f      	b.n	80019b2 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8001992:	4a0a      	ldr	r2, [pc, #40]	; (80019bc <SysTick_Config+0x40>)
 8001994:	687b      	ldr	r3, [r7, #4]
 8001996:	3b01      	subs	r3, #1
 8001998:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 800199a:	210f      	movs	r1, #15
 800199c:	f04f 30ff 	mov.w	r0, #4294967295
 80019a0:	f7ff ff8e 	bl	80018c0 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 80019a4:	4b05      	ldr	r3, [pc, #20]	; (80019bc <SysTick_Config+0x40>)
 80019a6:	2200      	movs	r2, #0
 80019a8:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 80019aa:	4b04      	ldr	r3, [pc, #16]	; (80019bc <SysTick_Config+0x40>)
 80019ac:	2207      	movs	r2, #7
 80019ae:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 80019b0:	2300      	movs	r3, #0
}
 80019b2:	4618      	mov	r0, r3
 80019b4:	3708      	adds	r7, #8
 80019b6:	46bd      	mov	sp, r7
 80019b8:	bd80      	pop	{r7, pc}
 80019ba:	bf00      	nop
 80019bc:	e000e010 	.word	0xe000e010

080019c0 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80019c0:	b580      	push	{r7, lr}
 80019c2:	b082      	sub	sp, #8
 80019c4:	af00      	add	r7, sp, #0
 80019c6:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 80019c8:	6878      	ldr	r0, [r7, #4]
 80019ca:	f7ff ff47 	bl	800185c <__NVIC_SetPriorityGrouping>
}
 80019ce:	bf00      	nop
 80019d0:	3708      	adds	r7, #8
 80019d2:	46bd      	mov	sp, r7
 80019d4:	bd80      	pop	{r7, pc}

080019d6 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80019d6:	b580      	push	{r7, lr}
 80019d8:	b086      	sub	sp, #24
 80019da:	af00      	add	r7, sp, #0
 80019dc:	4603      	mov	r3, r0
 80019de:	60b9      	str	r1, [r7, #8]
 80019e0:	607a      	str	r2, [r7, #4]
 80019e2:	81fb      	strh	r3, [r7, #14]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 80019e4:	f7ff ff5e 	bl	80018a4 <__NVIC_GetPriorityGrouping>
 80019e8:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 80019ea:	687a      	ldr	r2, [r7, #4]
 80019ec:	68b9      	ldr	r1, [r7, #8]
 80019ee:	6978      	ldr	r0, [r7, #20]
 80019f0:	f7ff ff90 	bl	8001914 <NVIC_EncodePriority>
 80019f4:	4602      	mov	r2, r0
 80019f6:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 80019fa:	4611      	mov	r1, r2
 80019fc:	4618      	mov	r0, r3
 80019fe:	f7ff ff5f 	bl	80018c0 <__NVIC_SetPriority>
}
 8001a02:	bf00      	nop
 8001a04:	3718      	adds	r7, #24
 8001a06:	46bd      	mov	sp, r7
 8001a08:	bd80      	pop	{r7, pc}

08001a0a <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status   - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8001a0a:	b580      	push	{r7, lr}
 8001a0c:	b082      	sub	sp, #8
 8001a0e:	af00      	add	r7, sp, #0
 8001a10:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8001a12:	6878      	ldr	r0, [r7, #4]
 8001a14:	f7ff ffb2 	bl	800197c <SysTick_Config>
 8001a18:	4603      	mov	r3, r0
}
 8001a1a:	4618      	mov	r0, r3
 8001a1c:	3708      	adds	r7, #8
 8001a1e:	46bd      	mov	sp, r7
 8001a20:	bd80      	pop	{r7, pc}
	...

08001a24 <HAL_ETH_Init>:
  * @param  heth: pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ETH_Init(ETH_HandleTypeDef *heth)
{
 8001a24:	b580      	push	{r7, lr}
 8001a26:	b084      	sub	sp, #16
 8001a28:	af00      	add	r7, sp, #0
 8001a2a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  if (heth == NULL)
 8001a2c:	687b      	ldr	r3, [r7, #4]
 8001a2e:	2b00      	cmp	r3, #0
 8001a30:	d101      	bne.n	8001a36 <HAL_ETH_Init+0x12>
  {
    return HAL_ERROR;
 8001a32:	2301      	movs	r3, #1
 8001a34:	e0cf      	b.n	8001bd6 <HAL_ETH_Init+0x1b2>
  }
  if (heth->gState == HAL_ETH_STATE_RESET)
 8001a36:	687b      	ldr	r3, [r7, #4]
 8001a38:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8001a3c:	2b00      	cmp	r3, #0
 8001a3e:	d106      	bne.n	8001a4e <HAL_ETH_Init+0x2a>
  {
    heth->gState = HAL_ETH_STATE_BUSY;
 8001a40:	687b      	ldr	r3, [r7, #4]
 8001a42:	2223      	movs	r2, #35	; 0x23
 8001a44:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

    /* Init the low level hardware */
    heth->MspInitCallback(heth);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC. */
    HAL_ETH_MspInit(heth);
 8001a48:	6878      	ldr	r0, [r7, #4]
 8001a4a:	f7ff fa3d 	bl	8000ec8 <HAL_ETH_MspInit>

#endif /* (USE_HAL_ETH_REGISTER_CALLBACKS) */
  }

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001a4e:	4b64      	ldr	r3, [pc, #400]	; (8001be0 <HAL_ETH_Init+0x1bc>)
 8001a50:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 8001a54:	4a62      	ldr	r2, [pc, #392]	; (8001be0 <HAL_ETH_Init+0x1bc>)
 8001a56:	f043 0302 	orr.w	r3, r3, #2
 8001a5a:	f8c2 30f4 	str.w	r3, [r2, #244]	; 0xf4
 8001a5e:	4b60      	ldr	r3, [pc, #384]	; (8001be0 <HAL_ETH_Init+0x1bc>)
 8001a60:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 8001a64:	f003 0302 	and.w	r3, r3, #2
 8001a68:	60bb      	str	r3, [r7, #8]
 8001a6a:	68bb      	ldr	r3, [r7, #8]

  if (heth->Init.MediaInterface == HAL_ETH_MII_MODE)
 8001a6c:	687b      	ldr	r3, [r7, #4]
 8001a6e:	7a1b      	ldrb	r3, [r3, #8]
 8001a70:	2b00      	cmp	r3, #0
 8001a72:	d103      	bne.n	8001a7c <HAL_ETH_Init+0x58>
  {
    HAL_SYSCFG_ETHInterfaceSelect(SYSCFG_ETH_MII);
 8001a74:	2000      	movs	r0, #0
 8001a76:	f7ff fedd 	bl	8001834 <HAL_SYSCFG_ETHInterfaceSelect>
 8001a7a:	e003      	b.n	8001a84 <HAL_ETH_Init+0x60>
  }
  else
  {
    HAL_SYSCFG_ETHInterfaceSelect(SYSCFG_ETH_RMII);
 8001a7c:	f44f 0000 	mov.w	r0, #8388608	; 0x800000
 8001a80:	f7ff fed8 	bl	8001834 <HAL_SYSCFG_ETHInterfaceSelect>
  }

  /* Dummy read to sync with ETH */
  (void)SYSCFG->PMCR;
 8001a84:	4b57      	ldr	r3, [pc, #348]	; (8001be4 <HAL_ETH_Init+0x1c0>)
 8001a86:	685b      	ldr	r3, [r3, #4]

  /* Ethernet Software reset */
  /* Set the SWR bit: resets all MAC subsystem internal registers and logic */
  /* After reset all the registers holds their respective reset values */
  SET_BIT(heth->Instance->DMAMR, ETH_DMAMR_SWR);
 8001a88:	687b      	ldr	r3, [r7, #4]
 8001a8a:	681b      	ldr	r3, [r3, #0]
 8001a8c:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8001a90:	681b      	ldr	r3, [r3, #0]
 8001a92:	687a      	ldr	r2, [r7, #4]
 8001a94:	6812      	ldr	r2, [r2, #0]
 8001a96:	f043 0301 	orr.w	r3, r3, #1
 8001a9a:	f502 5280 	add.w	r2, r2, #4096	; 0x1000
 8001a9e:	6013      	str	r3, [r2, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 8001aa0:	f7ff febc 	bl	800181c <HAL_GetTick>
 8001aa4:	60f8      	str	r0, [r7, #12]

  /* Wait for software reset */
  while (READ_BIT(heth->Instance->DMAMR, ETH_DMAMR_SWR) > 0U)
 8001aa6:	e011      	b.n	8001acc <HAL_ETH_Init+0xa8>
  {
    if (((HAL_GetTick() - tickstart) > ETH_SWRESET_TIMEOUT))
 8001aa8:	f7ff feb8 	bl	800181c <HAL_GetTick>
 8001aac:	4602      	mov	r2, r0
 8001aae:	68fb      	ldr	r3, [r7, #12]
 8001ab0:	1ad3      	subs	r3, r2, r3
 8001ab2:	f5b3 7ffa 	cmp.w	r3, #500	; 0x1f4
 8001ab6:	d909      	bls.n	8001acc <HAL_ETH_Init+0xa8>
    {
      /* Set Error Code */
      heth->ErrorCode = HAL_ETH_ERROR_TIMEOUT;
 8001ab8:	687b      	ldr	r3, [r7, #4]
 8001aba:	2204      	movs	r2, #4
 8001abc:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
      /* Set State as Error */
      heth->gState = HAL_ETH_STATE_ERROR;
 8001ac0:	687b      	ldr	r3, [r7, #4]
 8001ac2:	22e0      	movs	r2, #224	; 0xe0
 8001ac4:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
      /* Return Error */
      return HAL_ERROR;
 8001ac8:	2301      	movs	r3, #1
 8001aca:	e084      	b.n	8001bd6 <HAL_ETH_Init+0x1b2>
  while (READ_BIT(heth->Instance->DMAMR, ETH_DMAMR_SWR) > 0U)
 8001acc:	687b      	ldr	r3, [r7, #4]
 8001ace:	681b      	ldr	r3, [r3, #0]
 8001ad0:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8001ad4:	681b      	ldr	r3, [r3, #0]
 8001ad6:	f003 0301 	and.w	r3, r3, #1
 8001ada:	2b00      	cmp	r3, #0
 8001adc:	d1e4      	bne.n	8001aa8 <HAL_ETH_Init+0x84>
    }
  }

  /*------------------ MDIO CSR Clock Range Configuration --------------------*/
  HAL_ETH_SetMDIOClockRange(heth);
 8001ade:	6878      	ldr	r0, [r7, #4]
 8001ae0:	f000 f886 	bl	8001bf0 <HAL_ETH_SetMDIOClockRange>

  /*------------------ MAC LPI 1US Tic Counter Configuration --------------------*/
  WRITE_REG(heth->Instance->MAC1USTCR, (((uint32_t)HAL_RCC_GetHCLKFreq() / ETH_MAC_US_TICK) - 1U));
 8001ae4:	f001 fcc8 	bl	8003478 <HAL_RCC_GetHCLKFreq>
 8001ae8:	4603      	mov	r3, r0
 8001aea:	4a3f      	ldr	r2, [pc, #252]	; (8001be8 <HAL_ETH_Init+0x1c4>)
 8001aec:	fba2 2303 	umull	r2, r3, r2, r3
 8001af0:	0c9a      	lsrs	r2, r3, #18
 8001af2:	687b      	ldr	r3, [r7, #4]
 8001af4:	681b      	ldr	r3, [r3, #0]
 8001af6:	3a01      	subs	r2, #1
 8001af8:	f8c3 20dc 	str.w	r2, [r3, #220]	; 0xdc

  /*------------------ MAC, MTL and DMA default Configuration ----------------*/
  ETH_MACDMAConfig(heth);
 8001afc:	6878      	ldr	r0, [r7, #4]
 8001afe:	f000 fa71 	bl	8001fe4 <ETH_MACDMAConfig>

  /* SET DSL to 64 bit */
  MODIFY_REG(heth->Instance->DMACCR, ETH_DMACCR_DSL, ETH_DMACCR_DSL_64BIT);
 8001b02:	687b      	ldr	r3, [r7, #4]
 8001b04:	681b      	ldr	r3, [r3, #0]
 8001b06:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8001b0a:	f8d3 3100 	ldr.w	r3, [r3, #256]	; 0x100
 8001b0e:	f423 13e0 	bic.w	r3, r3, #1835008	; 0x1c0000
 8001b12:	687a      	ldr	r2, [r7, #4]
 8001b14:	6812      	ldr	r2, [r2, #0]
 8001b16:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 8001b1a:	f502 5280 	add.w	r2, r2, #4096	; 0x1000
 8001b1e:	f8c2 3100 	str.w	r3, [r2, #256]	; 0x100

  /* Set Receive Buffers Length (must be a multiple of 4) */
  if ((heth->Init.RxBuffLen % 0x4U) != 0x0U)
 8001b22:	687b      	ldr	r3, [r7, #4]
 8001b24:	695b      	ldr	r3, [r3, #20]
 8001b26:	f003 0303 	and.w	r3, r3, #3
 8001b2a:	2b00      	cmp	r3, #0
 8001b2c:	d009      	beq.n	8001b42 <HAL_ETH_Init+0x11e>
  {
    /* Set Error Code */
    heth->ErrorCode = HAL_ETH_ERROR_PARAM;
 8001b2e:	687b      	ldr	r3, [r7, #4]
 8001b30:	2201      	movs	r2, #1
 8001b32:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
    /* Set State as Error */
    heth->gState = HAL_ETH_STATE_ERROR;
 8001b36:	687b      	ldr	r3, [r7, #4]
 8001b38:	22e0      	movs	r2, #224	; 0xe0
 8001b3a:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
    /* Return Error */
    return HAL_ERROR;
 8001b3e:	2301      	movs	r3, #1
 8001b40:	e049      	b.n	8001bd6 <HAL_ETH_Init+0x1b2>
  }
  else
  {
    MODIFY_REG(heth->Instance->DMACRCR, ETH_DMACRCR_RBSZ, ((heth->Init.RxBuffLen) << 1));
 8001b42:	687b      	ldr	r3, [r7, #4]
 8001b44:	681b      	ldr	r3, [r3, #0]
 8001b46:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8001b4a:	f8d3 2108 	ldr.w	r2, [r3, #264]	; 0x108
 8001b4e:	4b27      	ldr	r3, [pc, #156]	; (8001bec <HAL_ETH_Init+0x1c8>)
 8001b50:	4013      	ands	r3, r2
 8001b52:	687a      	ldr	r2, [r7, #4]
 8001b54:	6952      	ldr	r2, [r2, #20]
 8001b56:	0051      	lsls	r1, r2, #1
 8001b58:	687a      	ldr	r2, [r7, #4]
 8001b5a:	6812      	ldr	r2, [r2, #0]
 8001b5c:	430b      	orrs	r3, r1
 8001b5e:	f502 5280 	add.w	r2, r2, #4096	; 0x1000
 8001b62:	f8c2 3108 	str.w	r3, [r2, #264]	; 0x108
  }

  /*------------------ DMA Tx Descriptors Configuration ----------------------*/
  ETH_DMATxDescListInit(heth);
 8001b66:	6878      	ldr	r0, [r7, #4]
 8001b68:	f000 fad9 	bl	800211e <ETH_DMATxDescListInit>

  /*------------------ DMA Rx Descriptors Configuration ----------------------*/
  ETH_DMARxDescListInit(heth);
 8001b6c:	6878      	ldr	r0, [r7, #4]
 8001b6e:	f000 fb1f 	bl	80021b0 <ETH_DMARxDescListInit>

  /*--------------------- ETHERNET MAC Address Configuration ------------------*/
  /* Set MAC addr bits 32 to 47 */
  heth->Instance->MACA0HR = (((uint32_t)(heth->Init.MACAddr[5]) << 8) | (uint32_t)heth->Init.MACAddr[4]);
 8001b72:	687b      	ldr	r3, [r7, #4]
 8001b74:	685b      	ldr	r3, [r3, #4]
 8001b76:	3305      	adds	r3, #5
 8001b78:	781b      	ldrb	r3, [r3, #0]
 8001b7a:	021a      	lsls	r2, r3, #8
 8001b7c:	687b      	ldr	r3, [r7, #4]
 8001b7e:	685b      	ldr	r3, [r3, #4]
 8001b80:	3304      	adds	r3, #4
 8001b82:	781b      	ldrb	r3, [r3, #0]
 8001b84:	4619      	mov	r1, r3
 8001b86:	687b      	ldr	r3, [r7, #4]
 8001b88:	681b      	ldr	r3, [r3, #0]
 8001b8a:	430a      	orrs	r2, r1
 8001b8c:	f8c3 2300 	str.w	r2, [r3, #768]	; 0x300
  /* Set MAC addr bits 0 to 31 */
  heth->Instance->MACA0LR = (((uint32_t)(heth->Init.MACAddr[3]) << 24) | ((uint32_t)(heth->Init.MACAddr[2]) << 16) |
 8001b90:	687b      	ldr	r3, [r7, #4]
 8001b92:	685b      	ldr	r3, [r3, #4]
 8001b94:	3303      	adds	r3, #3
 8001b96:	781b      	ldrb	r3, [r3, #0]
 8001b98:	061a      	lsls	r2, r3, #24
 8001b9a:	687b      	ldr	r3, [r7, #4]
 8001b9c:	685b      	ldr	r3, [r3, #4]
 8001b9e:	3302      	adds	r3, #2
 8001ba0:	781b      	ldrb	r3, [r3, #0]
 8001ba2:	041b      	lsls	r3, r3, #16
 8001ba4:	431a      	orrs	r2, r3
                             ((uint32_t)(heth->Init.MACAddr[1]) << 8) | (uint32_t)heth->Init.MACAddr[0]);
 8001ba6:	687b      	ldr	r3, [r7, #4]
 8001ba8:	685b      	ldr	r3, [r3, #4]
 8001baa:	3301      	adds	r3, #1
 8001bac:	781b      	ldrb	r3, [r3, #0]
 8001bae:	021b      	lsls	r3, r3, #8
  heth->Instance->MACA0LR = (((uint32_t)(heth->Init.MACAddr[3]) << 24) | ((uint32_t)(heth->Init.MACAddr[2]) << 16) |
 8001bb0:	431a      	orrs	r2, r3
                             ((uint32_t)(heth->Init.MACAddr[1]) << 8) | (uint32_t)heth->Init.MACAddr[0]);
 8001bb2:	687b      	ldr	r3, [r7, #4]
 8001bb4:	685b      	ldr	r3, [r3, #4]
 8001bb6:	781b      	ldrb	r3, [r3, #0]
 8001bb8:	4619      	mov	r1, r3
  heth->Instance->MACA0LR = (((uint32_t)(heth->Init.MACAddr[3]) << 24) | ((uint32_t)(heth->Init.MACAddr[2]) << 16) |
 8001bba:	687b      	ldr	r3, [r7, #4]
 8001bbc:	681b      	ldr	r3, [r3, #0]
                             ((uint32_t)(heth->Init.MACAddr[1]) << 8) | (uint32_t)heth->Init.MACAddr[0]);
 8001bbe:	430a      	orrs	r2, r1
  heth->Instance->MACA0LR = (((uint32_t)(heth->Init.MACAddr[3]) << 24) | ((uint32_t)(heth->Init.MACAddr[2]) << 16) |
 8001bc0:	f8c3 2304 	str.w	r2, [r3, #772]	; 0x304

  heth->ErrorCode = HAL_ETH_ERROR_NONE;
 8001bc4:	687b      	ldr	r3, [r7, #4]
 8001bc6:	2200      	movs	r2, #0
 8001bc8:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
  heth->gState = HAL_ETH_STATE_READY;
 8001bcc:	687b      	ldr	r3, [r7, #4]
 8001bce:	2210      	movs	r2, #16
 8001bd0:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  return HAL_OK;
 8001bd4:	2300      	movs	r3, #0
}
 8001bd6:	4618      	mov	r0, r3
 8001bd8:	3710      	adds	r7, #16
 8001bda:	46bd      	mov	sp, r7
 8001bdc:	bd80      	pop	{r7, pc}
 8001bde:	bf00      	nop
 8001be0:	58024400 	.word	0x58024400
 8001be4:	58000400 	.word	0x58000400
 8001be8:	431bde83 	.word	0x431bde83
 8001bec:	ffff8001 	.word	0xffff8001

08001bf0 <HAL_ETH_SetMDIOClockRange>:
  * @param  heth: pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval None
  */
void HAL_ETH_SetMDIOClockRange(ETH_HandleTypeDef *heth)
{
 8001bf0:	b580      	push	{r7, lr}
 8001bf2:	b084      	sub	sp, #16
 8001bf4:	af00      	add	r7, sp, #0
 8001bf6:	6078      	str	r0, [r7, #4]
  uint32_t hclk;
  uint32_t tmpreg;

  /* Get the ETHERNET MACMDIOAR value */
  tmpreg = (heth->Instance)->MACMDIOAR;
 8001bf8:	687b      	ldr	r3, [r7, #4]
 8001bfa:	681b      	ldr	r3, [r3, #0]
 8001bfc:	f8d3 3200 	ldr.w	r3, [r3, #512]	; 0x200
 8001c00:	60fb      	str	r3, [r7, #12]

  /* Clear CSR Clock Range bits */
  tmpreg &= ~ETH_MACMDIOAR_CR;
 8001c02:	68fb      	ldr	r3, [r7, #12]
 8001c04:	f423 6370 	bic.w	r3, r3, #3840	; 0xf00
 8001c08:	60fb      	str	r3, [r7, #12]

  /* Get hclk frequency value */
  hclk = HAL_RCC_GetHCLKFreq();
 8001c0a:	f001 fc35 	bl	8003478 <HAL_RCC_GetHCLKFreq>
 8001c0e:	60b8      	str	r0, [r7, #8]

  /* Set CR bits depending on hclk value */
  if ((hclk >= 20000000U) && (hclk < 35000000U))
 8001c10:	68bb      	ldr	r3, [r7, #8]
 8001c12:	4a1e      	ldr	r2, [pc, #120]	; (8001c8c <HAL_ETH_SetMDIOClockRange+0x9c>)
 8001c14:	4293      	cmp	r3, r2
 8001c16:	d908      	bls.n	8001c2a <HAL_ETH_SetMDIOClockRange+0x3a>
 8001c18:	68bb      	ldr	r3, [r7, #8]
 8001c1a:	4a1d      	ldr	r2, [pc, #116]	; (8001c90 <HAL_ETH_SetMDIOClockRange+0xa0>)
 8001c1c:	4293      	cmp	r3, r2
 8001c1e:	d804      	bhi.n	8001c2a <HAL_ETH_SetMDIOClockRange+0x3a>
  {
    /* CSR Clock Range between 20-35 MHz */
    tmpreg |= (uint32_t)ETH_MACMDIOAR_CR_DIV16;
 8001c20:	68fb      	ldr	r3, [r7, #12]
 8001c22:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8001c26:	60fb      	str	r3, [r7, #12]
 8001c28:	e027      	b.n	8001c7a <HAL_ETH_SetMDIOClockRange+0x8a>
  }
  else if ((hclk >= 35000000U) && (hclk < 60000000U))
 8001c2a:	68bb      	ldr	r3, [r7, #8]
 8001c2c:	4a18      	ldr	r2, [pc, #96]	; (8001c90 <HAL_ETH_SetMDIOClockRange+0xa0>)
 8001c2e:	4293      	cmp	r3, r2
 8001c30:	d908      	bls.n	8001c44 <HAL_ETH_SetMDIOClockRange+0x54>
 8001c32:	68bb      	ldr	r3, [r7, #8]
 8001c34:	4a17      	ldr	r2, [pc, #92]	; (8001c94 <HAL_ETH_SetMDIOClockRange+0xa4>)
 8001c36:	4293      	cmp	r3, r2
 8001c38:	d204      	bcs.n	8001c44 <HAL_ETH_SetMDIOClockRange+0x54>
  {
    /* CSR Clock Range between 35-60 MHz */
    tmpreg |= (uint32_t)ETH_MACMDIOAR_CR_DIV26;
 8001c3a:	68fb      	ldr	r3, [r7, #12]
 8001c3c:	f443 7340 	orr.w	r3, r3, #768	; 0x300
 8001c40:	60fb      	str	r3, [r7, #12]
 8001c42:	e01a      	b.n	8001c7a <HAL_ETH_SetMDIOClockRange+0x8a>
  }
  else if ((hclk >= 60000000U) && (hclk < 100000000U))
 8001c44:	68bb      	ldr	r3, [r7, #8]
 8001c46:	4a13      	ldr	r2, [pc, #76]	; (8001c94 <HAL_ETH_SetMDIOClockRange+0xa4>)
 8001c48:	4293      	cmp	r3, r2
 8001c4a:	d303      	bcc.n	8001c54 <HAL_ETH_SetMDIOClockRange+0x64>
 8001c4c:	68bb      	ldr	r3, [r7, #8]
 8001c4e:	4a12      	ldr	r2, [pc, #72]	; (8001c98 <HAL_ETH_SetMDIOClockRange+0xa8>)
 8001c50:	4293      	cmp	r3, r2
 8001c52:	d911      	bls.n	8001c78 <HAL_ETH_SetMDIOClockRange+0x88>
  {
    /* CSR Clock Range between 60-100 MHz */
    tmpreg |= (uint32_t)ETH_MACMDIOAR_CR_DIV42;
  }
  else if ((hclk >= 100000000U) && (hclk < 150000000U))
 8001c54:	68bb      	ldr	r3, [r7, #8]
 8001c56:	4a10      	ldr	r2, [pc, #64]	; (8001c98 <HAL_ETH_SetMDIOClockRange+0xa8>)
 8001c58:	4293      	cmp	r3, r2
 8001c5a:	d908      	bls.n	8001c6e <HAL_ETH_SetMDIOClockRange+0x7e>
 8001c5c:	68bb      	ldr	r3, [r7, #8]
 8001c5e:	4a0f      	ldr	r2, [pc, #60]	; (8001c9c <HAL_ETH_SetMDIOClockRange+0xac>)
 8001c60:	4293      	cmp	r3, r2
 8001c62:	d804      	bhi.n	8001c6e <HAL_ETH_SetMDIOClockRange+0x7e>
  {
    /* CSR Clock Range between 100-150 MHz */
    tmpreg |= (uint32_t)ETH_MACMDIOAR_CR_DIV62;
 8001c64:	68fb      	ldr	r3, [r7, #12]
 8001c66:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8001c6a:	60fb      	str	r3, [r7, #12]
 8001c6c:	e005      	b.n	8001c7a <HAL_ETH_SetMDIOClockRange+0x8a>
  }
  else /* (hclk >= 150000000)&&(hclk <= 200000000) */
  {
    /* CSR Clock Range between 150-200 MHz */
    tmpreg |= (uint32_t)ETH_MACMDIOAR_CR_DIV102;
 8001c6e:	68fb      	ldr	r3, [r7, #12]
 8001c70:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8001c74:	60fb      	str	r3, [r7, #12]
 8001c76:	e000      	b.n	8001c7a <HAL_ETH_SetMDIOClockRange+0x8a>
    tmpreg |= (uint32_t)ETH_MACMDIOAR_CR_DIV42;
 8001c78:	bf00      	nop
  }

  /* Configure the CSR Clock Range */
  (heth->Instance)->MACMDIOAR = (uint32_t)tmpreg;
 8001c7a:	687b      	ldr	r3, [r7, #4]
 8001c7c:	681b      	ldr	r3, [r3, #0]
 8001c7e:	68fa      	ldr	r2, [r7, #12]
 8001c80:	f8c3 2200 	str.w	r2, [r3, #512]	; 0x200
}
 8001c84:	bf00      	nop
 8001c86:	3710      	adds	r7, #16
 8001c88:	46bd      	mov	sp, r7
 8001c8a:	bd80      	pop	{r7, pc}
 8001c8c:	01312cff 	.word	0x01312cff
 8001c90:	02160ebf 	.word	0x02160ebf
 8001c94:	03938700 	.word	0x03938700
 8001c98:	05f5e0ff 	.word	0x05f5e0ff
 8001c9c:	08f0d17f 	.word	0x08f0d17f

08001ca0 <ETH_SetMACConfig>:
  * @{
  */


static void ETH_SetMACConfig(ETH_HandleTypeDef *heth,  ETH_MACConfigTypeDef *macconf)
{
 8001ca0:	b480      	push	{r7}
 8001ca2:	b085      	sub	sp, #20
 8001ca4:	af00      	add	r7, sp, #0
 8001ca6:	6078      	str	r0, [r7, #4]
 8001ca8:	6039      	str	r1, [r7, #0]
  uint32_t macregval;

  /*------------------------ MACCR Configuration --------------------*/
  macregval = (macconf->InterPacketGapVal |
 8001caa:	683b      	ldr	r3, [r7, #0]
 8001cac:	689a      	ldr	r2, [r3, #8]
               macconf->SourceAddrControl |
 8001cae:	683b      	ldr	r3, [r7, #0]
 8001cb0:	681b      	ldr	r3, [r3, #0]
  macregval = (macconf->InterPacketGapVal |
 8001cb2:	431a      	orrs	r2, r3
               ((uint32_t)macconf->ChecksumOffload << 27) |
 8001cb4:	683b      	ldr	r3, [r7, #0]
 8001cb6:	791b      	ldrb	r3, [r3, #4]
 8001cb8:	06db      	lsls	r3, r3, #27
               macconf->SourceAddrControl |
 8001cba:	431a      	orrs	r2, r3
               ((uint32_t)macconf->GiantPacketSizeLimitControl << 23) |
 8001cbc:	683b      	ldr	r3, [r7, #0]
 8001cbe:	7b1b      	ldrb	r3, [r3, #12]
 8001cc0:	05db      	lsls	r3, r3, #23
               ((uint32_t)macconf->ChecksumOffload << 27) |
 8001cc2:	431a      	orrs	r2, r3
               ((uint32_t)macconf->Support2KPacket  << 22) |
 8001cc4:	683b      	ldr	r3, [r7, #0]
 8001cc6:	7b5b      	ldrb	r3, [r3, #13]
 8001cc8:	059b      	lsls	r3, r3, #22
               ((uint32_t)macconf->GiantPacketSizeLimitControl << 23) |
 8001cca:	431a      	orrs	r2, r3
               ((uint32_t)macconf->CRCStripTypePacket << 21) |
 8001ccc:	683b      	ldr	r3, [r7, #0]
 8001cce:	7b9b      	ldrb	r3, [r3, #14]
 8001cd0:	055b      	lsls	r3, r3, #21
               ((uint32_t)macconf->Support2KPacket  << 22) |
 8001cd2:	431a      	orrs	r2, r3
               ((uint32_t)macconf->AutomaticPadCRCStrip << 20) |
 8001cd4:	683b      	ldr	r3, [r7, #0]
 8001cd6:	7bdb      	ldrb	r3, [r3, #15]
 8001cd8:	051b      	lsls	r3, r3, #20
               ((uint32_t)macconf->CRCStripTypePacket << 21) |
 8001cda:	4313      	orrs	r3, r2
               ((uint32_t)((macconf->Watchdog == DISABLE) ? 1U : 0U) << 19) |
 8001cdc:	683a      	ldr	r2, [r7, #0]
 8001cde:	7c12      	ldrb	r2, [r2, #16]
 8001ce0:	2a00      	cmp	r2, #0
 8001ce2:	d102      	bne.n	8001cea <ETH_SetMACConfig+0x4a>
 8001ce4:	f44f 2200 	mov.w	r2, #524288	; 0x80000
 8001ce8:	e000      	b.n	8001cec <ETH_SetMACConfig+0x4c>
 8001cea:	2200      	movs	r2, #0
               ((uint32_t)macconf->AutomaticPadCRCStrip << 20) |
 8001cec:	4313      	orrs	r3, r2
               ((uint32_t)((macconf->Jabber == DISABLE) ? 1U : 0U) << 17) |
 8001cee:	683a      	ldr	r2, [r7, #0]
 8001cf0:	7c52      	ldrb	r2, [r2, #17]
 8001cf2:	2a00      	cmp	r2, #0
 8001cf4:	d102      	bne.n	8001cfc <ETH_SetMACConfig+0x5c>
 8001cf6:	f44f 3200 	mov.w	r2, #131072	; 0x20000
 8001cfa:	e000      	b.n	8001cfe <ETH_SetMACConfig+0x5e>
 8001cfc:	2200      	movs	r2, #0
               ((uint32_t)((macconf->Watchdog == DISABLE) ? 1U : 0U) << 19) |
 8001cfe:	431a      	orrs	r2, r3
               ((uint32_t)macconf->JumboPacket << 16) |
 8001d00:	683b      	ldr	r3, [r7, #0]
 8001d02:	7c9b      	ldrb	r3, [r3, #18]
 8001d04:	041b      	lsls	r3, r3, #16
               ((uint32_t)((macconf->Jabber == DISABLE) ? 1U : 0U) << 17) |
 8001d06:	431a      	orrs	r2, r3
               macconf->Speed |
 8001d08:	683b      	ldr	r3, [r7, #0]
 8001d0a:	695b      	ldr	r3, [r3, #20]
               ((uint32_t)macconf->JumboPacket << 16) |
 8001d0c:	431a      	orrs	r2, r3
               macconf->DuplexMode |
 8001d0e:	683b      	ldr	r3, [r7, #0]
 8001d10:	699b      	ldr	r3, [r3, #24]
               macconf->Speed |
 8001d12:	431a      	orrs	r2, r3
               ((uint32_t)macconf->LoopbackMode << 12) |
 8001d14:	683b      	ldr	r3, [r7, #0]
 8001d16:	7f1b      	ldrb	r3, [r3, #28]
 8001d18:	031b      	lsls	r3, r3, #12
               macconf->DuplexMode |
 8001d1a:	431a      	orrs	r2, r3
               ((uint32_t)macconf->CarrierSenseBeforeTransmit << 11) |
 8001d1c:	683b      	ldr	r3, [r7, #0]
 8001d1e:	7f5b      	ldrb	r3, [r3, #29]
 8001d20:	02db      	lsls	r3, r3, #11
               ((uint32_t)macconf->LoopbackMode << 12) |
 8001d22:	4313      	orrs	r3, r2
               ((uint32_t)((macconf->ReceiveOwn == DISABLE) ? 1U : 0U) << 10) |
 8001d24:	683a      	ldr	r2, [r7, #0]
 8001d26:	7f92      	ldrb	r2, [r2, #30]
 8001d28:	2a00      	cmp	r2, #0
 8001d2a:	d102      	bne.n	8001d32 <ETH_SetMACConfig+0x92>
 8001d2c:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8001d30:	e000      	b.n	8001d34 <ETH_SetMACConfig+0x94>
 8001d32:	2200      	movs	r2, #0
               ((uint32_t)macconf->CarrierSenseBeforeTransmit << 11) |
 8001d34:	431a      	orrs	r2, r3
               ((uint32_t)macconf->CarrierSenseDuringTransmit << 9) |
 8001d36:	683b      	ldr	r3, [r7, #0]
 8001d38:	7fdb      	ldrb	r3, [r3, #31]
 8001d3a:	025b      	lsls	r3, r3, #9
               ((uint32_t)((macconf->ReceiveOwn == DISABLE) ? 1U : 0U) << 10) |
 8001d3c:	4313      	orrs	r3, r2
               ((uint32_t)((macconf->RetryTransmission == DISABLE) ? 1U : 0U) << 8) |
 8001d3e:	683a      	ldr	r2, [r7, #0]
 8001d40:	f892 2020 	ldrb.w	r2, [r2, #32]
 8001d44:	2a00      	cmp	r2, #0
 8001d46:	d102      	bne.n	8001d4e <ETH_SetMACConfig+0xae>
 8001d48:	f44f 7280 	mov.w	r2, #256	; 0x100
 8001d4c:	e000      	b.n	8001d50 <ETH_SetMACConfig+0xb0>
 8001d4e:	2200      	movs	r2, #0
               ((uint32_t)macconf->CarrierSenseDuringTransmit << 9) |
 8001d50:	431a      	orrs	r2, r3
               macconf->BackOffLimit |
 8001d52:	683b      	ldr	r3, [r7, #0]
 8001d54:	6a5b      	ldr	r3, [r3, #36]	; 0x24
               ((uint32_t)((macconf->RetryTransmission == DISABLE) ? 1U : 0U) << 8) |
 8001d56:	431a      	orrs	r2, r3
               ((uint32_t)macconf->DeferralCheck << 4) |
 8001d58:	683b      	ldr	r3, [r7, #0]
 8001d5a:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8001d5e:	011b      	lsls	r3, r3, #4
               macconf->BackOffLimit |
 8001d60:	431a      	orrs	r2, r3
               macconf->PreambleLength);
 8001d62:	683b      	ldr	r3, [r7, #0]
 8001d64:	6adb      	ldr	r3, [r3, #44]	; 0x2c
  macregval = (macconf->InterPacketGapVal |
 8001d66:	4313      	orrs	r3, r2
 8001d68:	60fb      	str	r3, [r7, #12]

  /* Write to MACCR */
  MODIFY_REG(heth->Instance->MACCR, ETH_MACCR_MASK, macregval);
 8001d6a:	687b      	ldr	r3, [r7, #4]
 8001d6c:	681b      	ldr	r3, [r3, #0]
 8001d6e:	681a      	ldr	r2, [r3, #0]
 8001d70:	4b56      	ldr	r3, [pc, #344]	; (8001ecc <ETH_SetMACConfig+0x22c>)
 8001d72:	4013      	ands	r3, r2
 8001d74:	687a      	ldr	r2, [r7, #4]
 8001d76:	6812      	ldr	r2, [r2, #0]
 8001d78:	68f9      	ldr	r1, [r7, #12]
 8001d7a:	430b      	orrs	r3, r1
 8001d7c:	6013      	str	r3, [r2, #0]

  /*------------------------ MACECR Configuration --------------------*/
  macregval = ((macconf->ExtendedInterPacketGapVal << 25) |
 8001d7e:	683b      	ldr	r3, [r7, #0]
 8001d80:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8001d82:	065a      	lsls	r2, r3, #25
               ((uint32_t)macconf->ExtendedInterPacketGap << 24) |
 8001d84:	683b      	ldr	r3, [r7, #0]
 8001d86:	f893 3038 	ldrb.w	r3, [r3, #56]	; 0x38
 8001d8a:	061b      	lsls	r3, r3, #24
  macregval = ((macconf->ExtendedInterPacketGapVal << 25) |
 8001d8c:	431a      	orrs	r2, r3
               ((uint32_t)macconf->UnicastSlowProtocolPacketDetect << 18) |
 8001d8e:	683b      	ldr	r3, [r7, #0]
 8001d90:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 8001d94:	049b      	lsls	r3, r3, #18
               ((uint32_t)macconf->ExtendedInterPacketGap << 24) |
 8001d96:	431a      	orrs	r2, r3
               ((uint32_t)macconf->SlowProtocolDetect << 17) |
 8001d98:	683b      	ldr	r3, [r7, #0]
 8001d9a:	f893 3031 	ldrb.w	r3, [r3, #49]	; 0x31
 8001d9e:	045b      	lsls	r3, r3, #17
               ((uint32_t)macconf->UnicastSlowProtocolPacketDetect << 18) |
 8001da0:	4313      	orrs	r3, r2
               ((uint32_t)((macconf->CRCCheckingRxPackets == DISABLE) ? 1U : 0U) << 16) |
 8001da2:	683a      	ldr	r2, [r7, #0]
 8001da4:	f892 2032 	ldrb.w	r2, [r2, #50]	; 0x32
 8001da8:	2a00      	cmp	r2, #0
 8001daa:	d102      	bne.n	8001db2 <ETH_SetMACConfig+0x112>
 8001dac:	f44f 3280 	mov.w	r2, #65536	; 0x10000
 8001db0:	e000      	b.n	8001db4 <ETH_SetMACConfig+0x114>
 8001db2:	2200      	movs	r2, #0
               ((uint32_t)macconf->SlowProtocolDetect << 17) |
 8001db4:	431a      	orrs	r2, r3
               macconf->GiantPacketSizeLimit);
 8001db6:	683b      	ldr	r3, [r7, #0]
 8001db8:	6b5b      	ldr	r3, [r3, #52]	; 0x34
  macregval = ((macconf->ExtendedInterPacketGapVal << 25) |
 8001dba:	4313      	orrs	r3, r2
 8001dbc:	60fb      	str	r3, [r7, #12]

  /* Write to MACECR */
  MODIFY_REG(heth->Instance->MACECR, ETH_MACECR_MASK, macregval);
 8001dbe:	687b      	ldr	r3, [r7, #4]
 8001dc0:	681b      	ldr	r3, [r3, #0]
 8001dc2:	685a      	ldr	r2, [r3, #4]
 8001dc4:	4b42      	ldr	r3, [pc, #264]	; (8001ed0 <ETH_SetMACConfig+0x230>)
 8001dc6:	4013      	ands	r3, r2
 8001dc8:	687a      	ldr	r2, [r7, #4]
 8001dca:	6812      	ldr	r2, [r2, #0]
 8001dcc:	68f9      	ldr	r1, [r7, #12]
 8001dce:	430b      	orrs	r3, r1
 8001dd0:	6053      	str	r3, [r2, #4]

  /*------------------------ MACWTR Configuration --------------------*/
  macregval = (((uint32_t)macconf->ProgrammableWatchdog << 8) |
 8001dd2:	683b      	ldr	r3, [r7, #0]
 8001dd4:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8001dd8:	021a      	lsls	r2, r3, #8
               macconf->WatchdogTimeout);
 8001dda:	683b      	ldr	r3, [r7, #0]
 8001ddc:	6c5b      	ldr	r3, [r3, #68]	; 0x44
  macregval = (((uint32_t)macconf->ProgrammableWatchdog << 8) |
 8001dde:	4313      	orrs	r3, r2
 8001de0:	60fb      	str	r3, [r7, #12]

  /* Write to MACWTR */
  MODIFY_REG(heth->Instance->MACWTR, ETH_MACWTR_MASK, macregval);
 8001de2:	687b      	ldr	r3, [r7, #4]
 8001de4:	681b      	ldr	r3, [r3, #0]
 8001de6:	68da      	ldr	r2, [r3, #12]
 8001de8:	4b3a      	ldr	r3, [pc, #232]	; (8001ed4 <ETH_SetMACConfig+0x234>)
 8001dea:	4013      	ands	r3, r2
 8001dec:	687a      	ldr	r2, [r7, #4]
 8001dee:	6812      	ldr	r2, [r2, #0]
 8001df0:	68f9      	ldr	r1, [r7, #12]
 8001df2:	430b      	orrs	r3, r1
 8001df4:	60d3      	str	r3, [r2, #12]

  /*------------------------ MACTFCR Configuration --------------------*/
  macregval = (((uint32_t)macconf->TransmitFlowControl << 1) |
 8001df6:	683b      	ldr	r3, [r7, #0]
 8001df8:	f893 3054 	ldrb.w	r3, [r3, #84]	; 0x54
 8001dfc:	005a      	lsls	r2, r3, #1
               macconf->PauseLowThreshold |
 8001dfe:	683b      	ldr	r3, [r7, #0]
 8001e00:	6d1b      	ldr	r3, [r3, #80]	; 0x50
  macregval = (((uint32_t)macconf->TransmitFlowControl << 1) |
 8001e02:	4313      	orrs	r3, r2
               ((uint32_t)((macconf->ZeroQuantaPause == DISABLE) ? 1U : 0U) << 7) |
 8001e04:	683a      	ldr	r2, [r7, #0]
 8001e06:	f892 204c 	ldrb.w	r2, [r2, #76]	; 0x4c
 8001e0a:	2a00      	cmp	r2, #0
 8001e0c:	d101      	bne.n	8001e12 <ETH_SetMACConfig+0x172>
 8001e0e:	2280      	movs	r2, #128	; 0x80
 8001e10:	e000      	b.n	8001e14 <ETH_SetMACConfig+0x174>
 8001e12:	2200      	movs	r2, #0
               macconf->PauseLowThreshold |
 8001e14:	431a      	orrs	r2, r3
               (macconf->PauseTime << 16));
 8001e16:	683b      	ldr	r3, [r7, #0]
 8001e18:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8001e1a:	041b      	lsls	r3, r3, #16
  macregval = (((uint32_t)macconf->TransmitFlowControl << 1) |
 8001e1c:	4313      	orrs	r3, r2
 8001e1e:	60fb      	str	r3, [r7, #12]

  /* Write to MACTFCR */
  MODIFY_REG(heth->Instance->MACTFCR, ETH_MACTFCR_MASK, macregval);
 8001e20:	687b      	ldr	r3, [r7, #4]
 8001e22:	681b      	ldr	r3, [r3, #0]
 8001e24:	6f1a      	ldr	r2, [r3, #112]	; 0x70
 8001e26:	f64f 730d 	movw	r3, #65293	; 0xff0d
 8001e2a:	4013      	ands	r3, r2
 8001e2c:	687a      	ldr	r2, [r7, #4]
 8001e2e:	6812      	ldr	r2, [r2, #0]
 8001e30:	68f9      	ldr	r1, [r7, #12]
 8001e32:	430b      	orrs	r3, r1
 8001e34:	6713      	str	r3, [r2, #112]	; 0x70

  /*------------------------ MACRFCR Configuration --------------------*/
  macregval = ((uint32_t)macconf->ReceiveFlowControl |
 8001e36:	683b      	ldr	r3, [r7, #0]
 8001e38:	f893 3056 	ldrb.w	r3, [r3, #86]	; 0x56
 8001e3c:	461a      	mov	r2, r3
               ((uint32_t)macconf->UnicastPausePacketDetect << 1));
 8001e3e:	683b      	ldr	r3, [r7, #0]
 8001e40:	f893 3055 	ldrb.w	r3, [r3, #85]	; 0x55
 8001e44:	005b      	lsls	r3, r3, #1
  macregval = ((uint32_t)macconf->ReceiveFlowControl |
 8001e46:	4313      	orrs	r3, r2
 8001e48:	60fb      	str	r3, [r7, #12]

  /* Write to MACRFCR */
  MODIFY_REG(heth->Instance->MACRFCR, ETH_MACRFCR_MASK, macregval);
 8001e4a:	687b      	ldr	r3, [r7, #4]
 8001e4c:	681b      	ldr	r3, [r3, #0]
 8001e4e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8001e52:	f023 0103 	bic.w	r1, r3, #3
 8001e56:	687b      	ldr	r3, [r7, #4]
 8001e58:	681b      	ldr	r3, [r3, #0]
 8001e5a:	68fa      	ldr	r2, [r7, #12]
 8001e5c:	430a      	orrs	r2, r1
 8001e5e:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90

  /*------------------------ MTLTQOMR Configuration --------------------*/
  /* Write to MTLTQOMR */
  MODIFY_REG(heth->Instance->MTLTQOMR, ETH_MTLTQOMR_MASK, macconf->TransmitQueueMode);
 8001e62:	687b      	ldr	r3, [r7, #4]
 8001e64:	681b      	ldr	r3, [r3, #0]
 8001e66:	f8d3 3d00 	ldr.w	r3, [r3, #3328]	; 0xd00
 8001e6a:	f023 0172 	bic.w	r1, r3, #114	; 0x72
 8001e6e:	683b      	ldr	r3, [r7, #0]
 8001e70:	6d9a      	ldr	r2, [r3, #88]	; 0x58
 8001e72:	687b      	ldr	r3, [r7, #4]
 8001e74:	681b      	ldr	r3, [r3, #0]
 8001e76:	430a      	orrs	r2, r1
 8001e78:	f8c3 2d00 	str.w	r2, [r3, #3328]	; 0xd00

  /*------------------------ MTLRQOMR Configuration --------------------*/
  macregval = (macconf->ReceiveQueueMode |
 8001e7c:	683b      	ldr	r3, [r7, #0]
 8001e7e:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
               ((uint32_t)((macconf->DropTCPIPChecksumErrorPacket == DISABLE) ? 1U : 0U) << 6) |
 8001e80:	683a      	ldr	r2, [r7, #0]
 8001e82:	f892 2060 	ldrb.w	r2, [r2, #96]	; 0x60
 8001e86:	2a00      	cmp	r2, #0
 8001e88:	d101      	bne.n	8001e8e <ETH_SetMACConfig+0x1ee>
 8001e8a:	2240      	movs	r2, #64	; 0x40
 8001e8c:	e000      	b.n	8001e90 <ETH_SetMACConfig+0x1f0>
 8001e8e:	2200      	movs	r2, #0
  macregval = (macconf->ReceiveQueueMode |
 8001e90:	431a      	orrs	r2, r3
               ((uint32_t)macconf->ForwardRxErrorPacket << 4) |
 8001e92:	683b      	ldr	r3, [r7, #0]
 8001e94:	f893 3061 	ldrb.w	r3, [r3, #97]	; 0x61
 8001e98:	011b      	lsls	r3, r3, #4
               ((uint32_t)((macconf->DropTCPIPChecksumErrorPacket == DISABLE) ? 1U : 0U) << 6) |
 8001e9a:	431a      	orrs	r2, r3
               ((uint32_t)macconf->ForwardRxUndersizedGoodPacket << 3));
 8001e9c:	683b      	ldr	r3, [r7, #0]
 8001e9e:	f893 3062 	ldrb.w	r3, [r3, #98]	; 0x62
 8001ea2:	00db      	lsls	r3, r3, #3
  macregval = (macconf->ReceiveQueueMode |
 8001ea4:	4313      	orrs	r3, r2
 8001ea6:	60fb      	str	r3, [r7, #12]

  /* Write to MTLRQOMR */
  MODIFY_REG(heth->Instance->MTLRQOMR, ETH_MTLRQOMR_MASK, macregval);
 8001ea8:	687b      	ldr	r3, [r7, #4]
 8001eaa:	681b      	ldr	r3, [r3, #0]
 8001eac:	f8d3 3d30 	ldr.w	r3, [r3, #3376]	; 0xd30
 8001eb0:	f023 017b 	bic.w	r1, r3, #123	; 0x7b
 8001eb4:	687b      	ldr	r3, [r7, #4]
 8001eb6:	681b      	ldr	r3, [r3, #0]
 8001eb8:	68fa      	ldr	r2, [r7, #12]
 8001eba:	430a      	orrs	r2, r1
 8001ebc:	f8c3 2d30 	str.w	r2, [r3, #3376]	; 0xd30
}
 8001ec0:	bf00      	nop
 8001ec2:	3714      	adds	r7, #20
 8001ec4:	46bd      	mov	sp, r7
 8001ec6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001eca:	4770      	bx	lr
 8001ecc:	00048083 	.word	0x00048083
 8001ed0:	c0f88000 	.word	0xc0f88000
 8001ed4:	fffffef0 	.word	0xfffffef0

08001ed8 <ETH_SetDMAConfig>:

static void ETH_SetDMAConfig(ETH_HandleTypeDef *heth,  ETH_DMAConfigTypeDef *dmaconf)
{
 8001ed8:	b480      	push	{r7}
 8001eda:	b085      	sub	sp, #20
 8001edc:	af00      	add	r7, sp, #0
 8001ede:	6078      	str	r0, [r7, #4]
 8001ee0:	6039      	str	r1, [r7, #0]
  uint32_t dmaregval;

  /*------------------------ DMAMR Configuration --------------------*/
  MODIFY_REG(heth->Instance->DMAMR, ETH_DMAMR_MASK, dmaconf->DMAArbitration);
 8001ee2:	687b      	ldr	r3, [r7, #4]
 8001ee4:	681b      	ldr	r3, [r3, #0]
 8001ee6:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8001eea:	681a      	ldr	r2, [r3, #0]
 8001eec:	4b38      	ldr	r3, [pc, #224]	; (8001fd0 <ETH_SetDMAConfig+0xf8>)
 8001eee:	4013      	ands	r3, r2
 8001ef0:	683a      	ldr	r2, [r7, #0]
 8001ef2:	6811      	ldr	r1, [r2, #0]
 8001ef4:	687a      	ldr	r2, [r7, #4]
 8001ef6:	6812      	ldr	r2, [r2, #0]
 8001ef8:	430b      	orrs	r3, r1
 8001efa:	f502 5280 	add.w	r2, r2, #4096	; 0x1000
 8001efe:	6013      	str	r3, [r2, #0]

  /*------------------------ DMASBMR Configuration --------------------*/
  dmaregval = (((uint32_t)dmaconf->AddressAlignedBeats << 12) |
 8001f00:	683b      	ldr	r3, [r7, #0]
 8001f02:	791b      	ldrb	r3, [r3, #4]
 8001f04:	031a      	lsls	r2, r3, #12
               dmaconf->BurstMode |
 8001f06:	683b      	ldr	r3, [r7, #0]
 8001f08:	689b      	ldr	r3, [r3, #8]
  dmaregval = (((uint32_t)dmaconf->AddressAlignedBeats << 12) |
 8001f0a:	431a      	orrs	r2, r3
               ((uint32_t)dmaconf->RebuildINCRxBurst << 15));
 8001f0c:	683b      	ldr	r3, [r7, #0]
 8001f0e:	7b1b      	ldrb	r3, [r3, #12]
 8001f10:	03db      	lsls	r3, r3, #15
  dmaregval = (((uint32_t)dmaconf->AddressAlignedBeats << 12) |
 8001f12:	4313      	orrs	r3, r2
 8001f14:	60fb      	str	r3, [r7, #12]

  MODIFY_REG(heth->Instance->DMASBMR, ETH_DMASBMR_MASK, dmaregval);
 8001f16:	687b      	ldr	r3, [r7, #4]
 8001f18:	681b      	ldr	r3, [r3, #0]
 8001f1a:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8001f1e:	685a      	ldr	r2, [r3, #4]
 8001f20:	4b2c      	ldr	r3, [pc, #176]	; (8001fd4 <ETH_SetDMAConfig+0xfc>)
 8001f22:	4013      	ands	r3, r2
 8001f24:	687a      	ldr	r2, [r7, #4]
 8001f26:	6812      	ldr	r2, [r2, #0]
 8001f28:	68f9      	ldr	r1, [r7, #12]
 8001f2a:	430b      	orrs	r3, r1
 8001f2c:	f502 5280 	add.w	r2, r2, #4096	; 0x1000
 8001f30:	6053      	str	r3, [r2, #4]

  /*------------------------ DMACCR Configuration --------------------*/
  dmaregval = (((uint32_t)dmaconf->PBLx8Mode << 16) |
 8001f32:	683b      	ldr	r3, [r7, #0]
 8001f34:	7b5b      	ldrb	r3, [r3, #13]
 8001f36:	041a      	lsls	r2, r3, #16
               dmaconf->MaximumSegmentSize);
 8001f38:	683b      	ldr	r3, [r7, #0]
 8001f3a:	6a1b      	ldr	r3, [r3, #32]
  dmaregval = (((uint32_t)dmaconf->PBLx8Mode << 16) |
 8001f3c:	4313      	orrs	r3, r2
 8001f3e:	60fb      	str	r3, [r7, #12]

  MODIFY_REG(heth->Instance->DMACCR, ETH_DMACCR_MASK, dmaregval);
 8001f40:	687b      	ldr	r3, [r7, #4]
 8001f42:	681b      	ldr	r3, [r3, #0]
 8001f44:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8001f48:	f8d3 2100 	ldr.w	r2, [r3, #256]	; 0x100
 8001f4c:	4b22      	ldr	r3, [pc, #136]	; (8001fd8 <ETH_SetDMAConfig+0x100>)
 8001f4e:	4013      	ands	r3, r2
 8001f50:	687a      	ldr	r2, [r7, #4]
 8001f52:	6812      	ldr	r2, [r2, #0]
 8001f54:	68f9      	ldr	r1, [r7, #12]
 8001f56:	430b      	orrs	r3, r1
 8001f58:	f502 5280 	add.w	r2, r2, #4096	; 0x1000
 8001f5c:	f8c2 3100 	str.w	r3, [r2, #256]	; 0x100

  /*------------------------ DMACTCR Configuration --------------------*/
  dmaregval = (dmaconf->TxDMABurstLength |
 8001f60:	683b      	ldr	r3, [r7, #0]
 8001f62:	691a      	ldr	r2, [r3, #16]
               ((uint32_t)dmaconf->SecondPacketOperate << 4) |
 8001f64:	683b      	ldr	r3, [r7, #0]
 8001f66:	7d1b      	ldrb	r3, [r3, #20]
 8001f68:	011b      	lsls	r3, r3, #4
  dmaregval = (dmaconf->TxDMABurstLength |
 8001f6a:	431a      	orrs	r2, r3
               ((uint32_t)dmaconf->TCPSegmentation << 12));
 8001f6c:	683b      	ldr	r3, [r7, #0]
 8001f6e:	7f5b      	ldrb	r3, [r3, #29]
 8001f70:	031b      	lsls	r3, r3, #12
  dmaregval = (dmaconf->TxDMABurstLength |
 8001f72:	4313      	orrs	r3, r2
 8001f74:	60fb      	str	r3, [r7, #12]

  MODIFY_REG(heth->Instance->DMACTCR, ETH_DMACTCR_MASK, dmaregval);
 8001f76:	687b      	ldr	r3, [r7, #4]
 8001f78:	681b      	ldr	r3, [r3, #0]
 8001f7a:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8001f7e:	f8d3 2104 	ldr.w	r2, [r3, #260]	; 0x104
 8001f82:	4b16      	ldr	r3, [pc, #88]	; (8001fdc <ETH_SetDMAConfig+0x104>)
 8001f84:	4013      	ands	r3, r2
 8001f86:	687a      	ldr	r2, [r7, #4]
 8001f88:	6812      	ldr	r2, [r2, #0]
 8001f8a:	68f9      	ldr	r1, [r7, #12]
 8001f8c:	430b      	orrs	r3, r1
 8001f8e:	f502 5280 	add.w	r2, r2, #4096	; 0x1000
 8001f92:	f8c2 3104 	str.w	r3, [r2, #260]	; 0x104

  /*------------------------ DMACRCR Configuration --------------------*/
  dmaregval = (((uint32_t)dmaconf->FlushRxPacket  << 31) |
 8001f96:	683b      	ldr	r3, [r7, #0]
 8001f98:	7f1b      	ldrb	r3, [r3, #28]
 8001f9a:	07da      	lsls	r2, r3, #31
               dmaconf->RxDMABurstLength);
 8001f9c:	683b      	ldr	r3, [r7, #0]
 8001f9e:	699b      	ldr	r3, [r3, #24]
  dmaregval = (((uint32_t)dmaconf->FlushRxPacket  << 31) |
 8001fa0:	4313      	orrs	r3, r2
 8001fa2:	60fb      	str	r3, [r7, #12]

  /* Write to DMACRCR */
  MODIFY_REG(heth->Instance->DMACRCR, ETH_DMACRCR_MASK, dmaregval);
 8001fa4:	687b      	ldr	r3, [r7, #4]
 8001fa6:	681b      	ldr	r3, [r3, #0]
 8001fa8:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8001fac:	f8d3 2108 	ldr.w	r2, [r3, #264]	; 0x108
 8001fb0:	4b0b      	ldr	r3, [pc, #44]	; (8001fe0 <ETH_SetDMAConfig+0x108>)
 8001fb2:	4013      	ands	r3, r2
 8001fb4:	687a      	ldr	r2, [r7, #4]
 8001fb6:	6812      	ldr	r2, [r2, #0]
 8001fb8:	68f9      	ldr	r1, [r7, #12]
 8001fba:	430b      	orrs	r3, r1
 8001fbc:	f502 5280 	add.w	r2, r2, #4096	; 0x1000
 8001fc0:	f8c2 3108 	str.w	r3, [r2, #264]	; 0x108
}
 8001fc4:	bf00      	nop
 8001fc6:	3714      	adds	r7, #20
 8001fc8:	46bd      	mov	sp, r7
 8001fca:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001fce:	4770      	bx	lr
 8001fd0:	ffff87fd 	.word	0xffff87fd
 8001fd4:	ffff2ffe 	.word	0xffff2ffe
 8001fd8:	fffec000 	.word	0xfffec000
 8001fdc:	ffc0efef 	.word	0xffc0efef
 8001fe0:	7fc0ffff 	.word	0x7fc0ffff

08001fe4 <ETH_MACDMAConfig>:
  * @param  heth: pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval HAL status
  */
static void ETH_MACDMAConfig(ETH_HandleTypeDef *heth)
{
 8001fe4:	b580      	push	{r7, lr}
 8001fe6:	b0a4      	sub	sp, #144	; 0x90
 8001fe8:	af00      	add	r7, sp, #0
 8001fea:	6078      	str	r0, [r7, #4]
  ETH_MACConfigTypeDef macDefaultConf;
  ETH_DMAConfigTypeDef dmaDefaultConf;

  /*--------------- ETHERNET MAC registers default Configuration --------------*/
  macDefaultConf.AutomaticPadCRCStrip = ENABLE;
 8001fec:	2301      	movs	r3, #1
 8001fee:	f887 303b 	strb.w	r3, [r7, #59]	; 0x3b
  macDefaultConf.BackOffLimit = ETH_BACKOFFLIMIT_10;
 8001ff2:	2300      	movs	r3, #0
 8001ff4:	653b      	str	r3, [r7, #80]	; 0x50
  macDefaultConf.CarrierSenseBeforeTransmit = DISABLE;
 8001ff6:	2300      	movs	r3, #0
 8001ff8:	f887 3049 	strb.w	r3, [r7, #73]	; 0x49
  macDefaultConf.CarrierSenseDuringTransmit = DISABLE;
 8001ffc:	2300      	movs	r3, #0
 8001ffe:	f887 304b 	strb.w	r3, [r7, #75]	; 0x4b
  macDefaultConf.ChecksumOffload = ENABLE;
 8002002:	2301      	movs	r3, #1
 8002004:	f887 3030 	strb.w	r3, [r7, #48]	; 0x30
  macDefaultConf.CRCCheckingRxPackets = ENABLE;
 8002008:	2301      	movs	r3, #1
 800200a:	f887 305e 	strb.w	r3, [r7, #94]	; 0x5e
  macDefaultConf.CRCStripTypePacket = ENABLE;
 800200e:	2301      	movs	r3, #1
 8002010:	f887 303a 	strb.w	r3, [r7, #58]	; 0x3a
  macDefaultConf.DeferralCheck = DISABLE;
 8002014:	2300      	movs	r3, #0
 8002016:	f887 3054 	strb.w	r3, [r7, #84]	; 0x54
  macDefaultConf.DropTCPIPChecksumErrorPacket = ENABLE;
 800201a:	2301      	movs	r3, #1
 800201c:	f887 308c 	strb.w	r3, [r7, #140]	; 0x8c
  macDefaultConf.DuplexMode = ETH_FULLDUPLEX_MODE;
 8002020:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8002024:	647b      	str	r3, [r7, #68]	; 0x44
  macDefaultConf.ExtendedInterPacketGap = DISABLE;
 8002026:	2300      	movs	r3, #0
 8002028:	f887 3064 	strb.w	r3, [r7, #100]	; 0x64
  macDefaultConf.ExtendedInterPacketGapVal = 0x0;
 800202c:	2300      	movs	r3, #0
 800202e:	66bb      	str	r3, [r7, #104]	; 0x68
  macDefaultConf.ForwardRxErrorPacket = DISABLE;
 8002030:	2300      	movs	r3, #0
 8002032:	f887 308d 	strb.w	r3, [r7, #141]	; 0x8d
  macDefaultConf.ForwardRxUndersizedGoodPacket = DISABLE;
 8002036:	2300      	movs	r3, #0
 8002038:	f887 308e 	strb.w	r3, [r7, #142]	; 0x8e
  macDefaultConf.GiantPacketSizeLimit = 0x618;
 800203c:	f44f 63c3 	mov.w	r3, #1560	; 0x618
 8002040:	663b      	str	r3, [r7, #96]	; 0x60
  macDefaultConf.GiantPacketSizeLimitControl = DISABLE;
 8002042:	2300      	movs	r3, #0
 8002044:	f887 3038 	strb.w	r3, [r7, #56]	; 0x38
  macDefaultConf.InterPacketGapVal = ETH_INTERPACKETGAP_96BIT;
 8002048:	2300      	movs	r3, #0
 800204a:	637b      	str	r3, [r7, #52]	; 0x34
  macDefaultConf.Jabber = ENABLE;
 800204c:	2301      	movs	r3, #1
 800204e:	f887 303d 	strb.w	r3, [r7, #61]	; 0x3d
  macDefaultConf.JumboPacket = DISABLE;
 8002052:	2300      	movs	r3, #0
 8002054:	f887 303e 	strb.w	r3, [r7, #62]	; 0x3e
  macDefaultConf.LoopbackMode = DISABLE;
 8002058:	2300      	movs	r3, #0
 800205a:	f887 3048 	strb.w	r3, [r7, #72]	; 0x48
  macDefaultConf.PauseLowThreshold = ETH_PAUSELOWTHRESHOLD_MINUS_4;
 800205e:	2300      	movs	r3, #0
 8002060:	67fb      	str	r3, [r7, #124]	; 0x7c
  macDefaultConf.PauseTime = 0x0;
 8002062:	2300      	movs	r3, #0
 8002064:	677b      	str	r3, [r7, #116]	; 0x74
  macDefaultConf.PreambleLength = ETH_PREAMBLELENGTH_7;
 8002066:	2300      	movs	r3, #0
 8002068:	65bb      	str	r3, [r7, #88]	; 0x58
  macDefaultConf.ProgrammableWatchdog = DISABLE;
 800206a:	2300      	movs	r3, #0
 800206c:	f887 306c 	strb.w	r3, [r7, #108]	; 0x6c
  macDefaultConf.ReceiveFlowControl = DISABLE;
 8002070:	2300      	movs	r3, #0
 8002072:	f887 3082 	strb.w	r3, [r7, #130]	; 0x82
  macDefaultConf.ReceiveOwn = ENABLE;
 8002076:	2301      	movs	r3, #1
 8002078:	f887 304a 	strb.w	r3, [r7, #74]	; 0x4a
  macDefaultConf.ReceiveQueueMode = ETH_RECEIVESTOREFORWARD;
 800207c:	2320      	movs	r3, #32
 800207e:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
  macDefaultConf.RetryTransmission = ENABLE;
 8002082:	2301      	movs	r3, #1
 8002084:	f887 304c 	strb.w	r3, [r7, #76]	; 0x4c
  macDefaultConf.SlowProtocolDetect = DISABLE;
 8002088:	2300      	movs	r3, #0
 800208a:	f887 305d 	strb.w	r3, [r7, #93]	; 0x5d
  macDefaultConf.SourceAddrControl = ETH_SOURCEADDRESS_REPLACE_ADDR0;
 800208e:	f04f 5340 	mov.w	r3, #805306368	; 0x30000000
 8002092:	62fb      	str	r3, [r7, #44]	; 0x2c
  macDefaultConf.Speed = ETH_SPEED_100M;
 8002094:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 8002098:	643b      	str	r3, [r7, #64]	; 0x40
  macDefaultConf.Support2KPacket = DISABLE;
 800209a:	2300      	movs	r3, #0
 800209c:	f887 3039 	strb.w	r3, [r7, #57]	; 0x39
  macDefaultConf.TransmitQueueMode = ETH_TRANSMITSTOREFORWARD;
 80020a0:	2302      	movs	r3, #2
 80020a2:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
  macDefaultConf.TransmitFlowControl = DISABLE;
 80020a6:	2300      	movs	r3, #0
 80020a8:	f887 3080 	strb.w	r3, [r7, #128]	; 0x80
  macDefaultConf.UnicastPausePacketDetect = DISABLE;
 80020ac:	2300      	movs	r3, #0
 80020ae:	f887 3081 	strb.w	r3, [r7, #129]	; 0x81
  macDefaultConf.UnicastSlowProtocolPacketDetect = DISABLE;
 80020b2:	2300      	movs	r3, #0
 80020b4:	f887 305c 	strb.w	r3, [r7, #92]	; 0x5c
  macDefaultConf.Watchdog = ENABLE;
 80020b8:	2301      	movs	r3, #1
 80020ba:	f887 303c 	strb.w	r3, [r7, #60]	; 0x3c
  macDefaultConf.WatchdogTimeout =  ETH_MACWTR_WTO_2KB;
 80020be:	2300      	movs	r3, #0
 80020c0:	673b      	str	r3, [r7, #112]	; 0x70
  macDefaultConf.ZeroQuantaPause = ENABLE;
 80020c2:	2301      	movs	r3, #1
 80020c4:	f887 3078 	strb.w	r3, [r7, #120]	; 0x78

  /* MAC default configuration */
  ETH_SetMACConfig(heth, &macDefaultConf);
 80020c8:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 80020cc:	4619      	mov	r1, r3
 80020ce:	6878      	ldr	r0, [r7, #4]
 80020d0:	f7ff fde6 	bl	8001ca0 <ETH_SetMACConfig>

  /*--------------- ETHERNET DMA registers default Configuration --------------*/
  dmaDefaultConf.AddressAlignedBeats = ENABLE;
 80020d4:	2301      	movs	r3, #1
 80020d6:	733b      	strb	r3, [r7, #12]
  dmaDefaultConf.BurstMode = ETH_BURSTLENGTH_FIXED;
 80020d8:	2301      	movs	r3, #1
 80020da:	613b      	str	r3, [r7, #16]
  dmaDefaultConf.DMAArbitration = ETH_DMAARBITRATION_RX1_TX1;
 80020dc:	2300      	movs	r3, #0
 80020de:	60bb      	str	r3, [r7, #8]
  dmaDefaultConf.FlushRxPacket = DISABLE;
 80020e0:	2300      	movs	r3, #0
 80020e2:	f887 3024 	strb.w	r3, [r7, #36]	; 0x24
  dmaDefaultConf.PBLx8Mode = DISABLE;
 80020e6:	2300      	movs	r3, #0
 80020e8:	757b      	strb	r3, [r7, #21]
  dmaDefaultConf.RebuildINCRxBurst = DISABLE;
 80020ea:	2300      	movs	r3, #0
 80020ec:	753b      	strb	r3, [r7, #20]
  dmaDefaultConf.RxDMABurstLength = ETH_RXDMABURSTLENGTH_32BEAT;
 80020ee:	f44f 1300 	mov.w	r3, #2097152	; 0x200000
 80020f2:	623b      	str	r3, [r7, #32]
  dmaDefaultConf.SecondPacketOperate = DISABLE;
 80020f4:	2300      	movs	r3, #0
 80020f6:	773b      	strb	r3, [r7, #28]
  dmaDefaultConf.TxDMABurstLength = ETH_TXDMABURSTLENGTH_32BEAT;
 80020f8:	f44f 1300 	mov.w	r3, #2097152	; 0x200000
 80020fc:	61bb      	str	r3, [r7, #24]
  dmaDefaultConf.TCPSegmentation = DISABLE;
 80020fe:	2300      	movs	r3, #0
 8002100:	f887 3025 	strb.w	r3, [r7, #37]	; 0x25
  dmaDefaultConf.MaximumSegmentSize = ETH_SEGMENT_SIZE_DEFAULT;
 8002104:	f44f 7306 	mov.w	r3, #536	; 0x218
 8002108:	62bb      	str	r3, [r7, #40]	; 0x28

  /* DMA default configuration */
  ETH_SetDMAConfig(heth, &dmaDefaultConf);
 800210a:	f107 0308 	add.w	r3, r7, #8
 800210e:	4619      	mov	r1, r3
 8002110:	6878      	ldr	r0, [r7, #4]
 8002112:	f7ff fee1 	bl	8001ed8 <ETH_SetDMAConfig>
}
 8002116:	bf00      	nop
 8002118:	3790      	adds	r7, #144	; 0x90
 800211a:	46bd      	mov	sp, r7
 800211c:	bd80      	pop	{r7, pc}

0800211e <ETH_DMATxDescListInit>:
  * @param  heth: pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval None
  */
static void ETH_DMATxDescListInit(ETH_HandleTypeDef *heth)
{
 800211e:	b480      	push	{r7}
 8002120:	b085      	sub	sp, #20
 8002122:	af00      	add	r7, sp, #0
 8002124:	6078      	str	r0, [r7, #4]
  ETH_DMADescTypeDef *dmatxdesc;
  uint32_t i;

  /* Fill each DMATxDesc descriptor with the right values */
  for (i = 0; i < (uint32_t)ETH_TX_DESC_CNT; i++)
 8002126:	2300      	movs	r3, #0
 8002128:	60fb      	str	r3, [r7, #12]
 800212a:	e01d      	b.n	8002168 <ETH_DMATxDescListInit+0x4a>
  {
    dmatxdesc = heth->Init.TxDesc + i;
 800212c:	687b      	ldr	r3, [r7, #4]
 800212e:	68d9      	ldr	r1, [r3, #12]
 8002130:	68fa      	ldr	r2, [r7, #12]
 8002132:	4613      	mov	r3, r2
 8002134:	005b      	lsls	r3, r3, #1
 8002136:	4413      	add	r3, r2
 8002138:	00db      	lsls	r3, r3, #3
 800213a:	440b      	add	r3, r1
 800213c:	60bb      	str	r3, [r7, #8]

    WRITE_REG(dmatxdesc->DESC0, 0x0);
 800213e:	68bb      	ldr	r3, [r7, #8]
 8002140:	2200      	movs	r2, #0
 8002142:	601a      	str	r2, [r3, #0]
    WRITE_REG(dmatxdesc->DESC1, 0x0);
 8002144:	68bb      	ldr	r3, [r7, #8]
 8002146:	2200      	movs	r2, #0
 8002148:	605a      	str	r2, [r3, #4]
    WRITE_REG(dmatxdesc->DESC2, 0x0);
 800214a:	68bb      	ldr	r3, [r7, #8]
 800214c:	2200      	movs	r2, #0
 800214e:	609a      	str	r2, [r3, #8]
    WRITE_REG(dmatxdesc->DESC3, 0x0);
 8002150:	68bb      	ldr	r3, [r7, #8]
 8002152:	2200      	movs	r2, #0
 8002154:	60da      	str	r2, [r3, #12]

    WRITE_REG(heth->TxDescList.TxDesc[i], (uint32_t)dmatxdesc);
 8002156:	68b9      	ldr	r1, [r7, #8]
 8002158:	687b      	ldr	r3, [r7, #4]
 800215a:	68fa      	ldr	r2, [r7, #12]
 800215c:	3206      	adds	r2, #6
 800215e:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
  for (i = 0; i < (uint32_t)ETH_TX_DESC_CNT; i++)
 8002162:	68fb      	ldr	r3, [r7, #12]
 8002164:	3301      	adds	r3, #1
 8002166:	60fb      	str	r3, [r7, #12]
 8002168:	68fb      	ldr	r3, [r7, #12]
 800216a:	2b03      	cmp	r3, #3
 800216c:	d9de      	bls.n	800212c <ETH_DMATxDescListInit+0xe>

  }

  heth->TxDescList.CurTxDesc = 0;
 800216e:	687b      	ldr	r3, [r7, #4]
 8002170:	2200      	movs	r2, #0
 8002172:	629a      	str	r2, [r3, #40]	; 0x28

  /* Set Transmit Descriptor Ring Length */
  WRITE_REG(heth->Instance->DMACTDRLR, (ETH_TX_DESC_CNT - 1U));
 8002174:	687b      	ldr	r3, [r7, #4]
 8002176:	681b      	ldr	r3, [r3, #0]
 8002178:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800217c:	461a      	mov	r2, r3
 800217e:	2303      	movs	r3, #3
 8002180:	f8c2 312c 	str.w	r3, [r2, #300]	; 0x12c

  /* Set Transmit Descriptor List Address */
  WRITE_REG(heth->Instance->DMACTDLAR, (uint32_t) heth->Init.TxDesc);
 8002184:	687b      	ldr	r3, [r7, #4]
 8002186:	68da      	ldr	r2, [r3, #12]
 8002188:	687b      	ldr	r3, [r7, #4]
 800218a:	681b      	ldr	r3, [r3, #0]
 800218c:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8002190:	f8c3 2114 	str.w	r2, [r3, #276]	; 0x114

  /* Set Transmit Descriptor Tail pointer */
  WRITE_REG(heth->Instance->DMACTDTPR, (uint32_t) heth->Init.TxDesc);
 8002194:	687b      	ldr	r3, [r7, #4]
 8002196:	68da      	ldr	r2, [r3, #12]
 8002198:	687b      	ldr	r3, [r7, #4]
 800219a:	681b      	ldr	r3, [r3, #0]
 800219c:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80021a0:	f8c3 2120 	str.w	r2, [r3, #288]	; 0x120
}
 80021a4:	bf00      	nop
 80021a6:	3714      	adds	r7, #20
 80021a8:	46bd      	mov	sp, r7
 80021aa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80021ae:	4770      	bx	lr

080021b0 <ETH_DMARxDescListInit>:
  * @param  heth: pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval None
  */
static void ETH_DMARxDescListInit(ETH_HandleTypeDef *heth)
{
 80021b0:	b480      	push	{r7}
 80021b2:	b085      	sub	sp, #20
 80021b4:	af00      	add	r7, sp, #0
 80021b6:	6078      	str	r0, [r7, #4]
  ETH_DMADescTypeDef *dmarxdesc;
  uint32_t i;

  for (i = 0; i < (uint32_t)ETH_RX_DESC_CNT; i++)
 80021b8:	2300      	movs	r3, #0
 80021ba:	60fb      	str	r3, [r7, #12]
 80021bc:	e023      	b.n	8002206 <ETH_DMARxDescListInit+0x56>
  {
    dmarxdesc =  heth->Init.RxDesc + i;
 80021be:	687b      	ldr	r3, [r7, #4]
 80021c0:	6919      	ldr	r1, [r3, #16]
 80021c2:	68fa      	ldr	r2, [r7, #12]
 80021c4:	4613      	mov	r3, r2
 80021c6:	005b      	lsls	r3, r3, #1
 80021c8:	4413      	add	r3, r2
 80021ca:	00db      	lsls	r3, r3, #3
 80021cc:	440b      	add	r3, r1
 80021ce:	60bb      	str	r3, [r7, #8]

    WRITE_REG(dmarxdesc->DESC0, 0x0);
 80021d0:	68bb      	ldr	r3, [r7, #8]
 80021d2:	2200      	movs	r2, #0
 80021d4:	601a      	str	r2, [r3, #0]
    WRITE_REG(dmarxdesc->DESC1, 0x0);
 80021d6:	68bb      	ldr	r3, [r7, #8]
 80021d8:	2200      	movs	r2, #0
 80021da:	605a      	str	r2, [r3, #4]
    WRITE_REG(dmarxdesc->DESC2, 0x0);
 80021dc:	68bb      	ldr	r3, [r7, #8]
 80021de:	2200      	movs	r2, #0
 80021e0:	609a      	str	r2, [r3, #8]
    WRITE_REG(dmarxdesc->DESC3, 0x0);
 80021e2:	68bb      	ldr	r3, [r7, #8]
 80021e4:	2200      	movs	r2, #0
 80021e6:	60da      	str	r2, [r3, #12]
    WRITE_REG(dmarxdesc->BackupAddr0, 0x0);
 80021e8:	68bb      	ldr	r3, [r7, #8]
 80021ea:	2200      	movs	r2, #0
 80021ec:	611a      	str	r2, [r3, #16]
    WRITE_REG(dmarxdesc->BackupAddr1, 0x0);
 80021ee:	68bb      	ldr	r3, [r7, #8]
 80021f0:	2200      	movs	r2, #0
 80021f2:	615a      	str	r2, [r3, #20]


    /* Set Rx descritors addresses */
    WRITE_REG(heth->RxDescList.RxDesc[i], (uint32_t)dmarxdesc);
 80021f4:	68b9      	ldr	r1, [r7, #8]
 80021f6:	687b      	ldr	r3, [r7, #4]
 80021f8:	68fa      	ldr	r2, [r7, #12]
 80021fa:	3212      	adds	r2, #18
 80021fc:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
  for (i = 0; i < (uint32_t)ETH_RX_DESC_CNT; i++)
 8002200:	68fb      	ldr	r3, [r7, #12]
 8002202:	3301      	adds	r3, #1
 8002204:	60fb      	str	r3, [r7, #12]
 8002206:	68fb      	ldr	r3, [r7, #12]
 8002208:	2b03      	cmp	r3, #3
 800220a:	d9d8      	bls.n	80021be <ETH_DMARxDescListInit+0xe>

  }

  WRITE_REG(heth->RxDescList.RxDescIdx, 0);
 800220c:	687b      	ldr	r3, [r7, #4]
 800220e:	2200      	movs	r2, #0
 8002210:	65da      	str	r2, [r3, #92]	; 0x5c
  WRITE_REG(heth->RxDescList.RxDescCnt, 0);
 8002212:	687b      	ldr	r3, [r7, #4]
 8002214:	2200      	movs	r2, #0
 8002216:	661a      	str	r2, [r3, #96]	; 0x60
  WRITE_REG(heth->RxDescList.RxBuildDescIdx, 0);
 8002218:	687b      	ldr	r3, [r7, #4]
 800221a:	2200      	movs	r2, #0
 800221c:	669a      	str	r2, [r3, #104]	; 0x68
  WRITE_REG(heth->RxDescList.RxBuildDescCnt, 0);
 800221e:	687b      	ldr	r3, [r7, #4]
 8002220:	2200      	movs	r2, #0
 8002222:	66da      	str	r2, [r3, #108]	; 0x6c
  WRITE_REG(heth->RxDescList.ItMode, 0);
 8002224:	687b      	ldr	r3, [r7, #4]
 8002226:	2200      	movs	r2, #0
 8002228:	659a      	str	r2, [r3, #88]	; 0x58

  /* Set Receive Descriptor Ring Length */
  WRITE_REG(heth->Instance->DMACRDRLR, ((uint32_t)(ETH_RX_DESC_CNT - 1U)));
 800222a:	687b      	ldr	r3, [r7, #4]
 800222c:	681b      	ldr	r3, [r3, #0]
 800222e:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8002232:	461a      	mov	r2, r3
 8002234:	2303      	movs	r3, #3
 8002236:	f8c2 3130 	str.w	r3, [r2, #304]	; 0x130

  /* Set Receive Descriptor List Address */
  WRITE_REG(heth->Instance->DMACRDLAR, (uint32_t) heth->Init.RxDesc);
 800223a:	687b      	ldr	r3, [r7, #4]
 800223c:	691a      	ldr	r2, [r3, #16]
 800223e:	687b      	ldr	r3, [r7, #4]
 8002240:	681b      	ldr	r3, [r3, #0]
 8002242:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8002246:	f8c3 211c 	str.w	r2, [r3, #284]	; 0x11c

  /* Set Receive Descriptor Tail pointer Address */
  WRITE_REG(heth->Instance->DMACRDTPR, ((uint32_t)(heth->Init.RxDesc + (uint32_t)(ETH_RX_DESC_CNT - 1U))));
 800224a:	687b      	ldr	r3, [r7, #4]
 800224c:	691b      	ldr	r3, [r3, #16]
 800224e:	f103 0248 	add.w	r2, r3, #72	; 0x48
 8002252:	687b      	ldr	r3, [r7, #4]
 8002254:	681b      	ldr	r3, [r3, #0]
 8002256:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800225a:	f8c3 2128 	str.w	r2, [r3, #296]	; 0x128
}
 800225e:	bf00      	nop
 8002260:	3714      	adds	r7, #20
 8002262:	46bd      	mov	sp, r7
 8002264:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002268:	4770      	bx	lr
	...

0800226c <HAL_GPIO_Init>:
  * @param  GPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 800226c:	b480      	push	{r7}
 800226e:	b089      	sub	sp, #36	; 0x24
 8002270:	af00      	add	r7, sp, #0
 8002272:	6078      	str	r0, [r7, #4]
 8002274:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00U;
 8002276:	2300      	movs	r3, #0
 8002278:	61fb      	str	r3, [r7, #28]
  EXTI_Core_TypeDef *EXTI_CurrentCPU;

#if defined(DUAL_CORE) && defined(CORE_CM4)
  EXTI_CurrentCPU = EXTI_D2; /* EXTI for CM4 CPU */
#else
  EXTI_CurrentCPU = EXTI_D1; /* EXTI for CM7 CPU */
 800227a:	4b86      	ldr	r3, [pc, #536]	; (8002494 <HAL_GPIO_Init+0x228>)
 800227c:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00U)
 800227e:	e18c      	b.n	800259a <HAL_GPIO_Init+0x32e>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1UL << position);
 8002280:	683b      	ldr	r3, [r7, #0]
 8002282:	681a      	ldr	r2, [r3, #0]
 8002284:	2101      	movs	r1, #1
 8002286:	69fb      	ldr	r3, [r7, #28]
 8002288:	fa01 f303 	lsl.w	r3, r1, r3
 800228c:	4013      	ands	r3, r2
 800228e:	613b      	str	r3, [r7, #16]

    if (iocurrent != 0x00U)
 8002290:	693b      	ldr	r3, [r7, #16]
 8002292:	2b00      	cmp	r3, #0
 8002294:	f000 817e 	beq.w	8002594 <HAL_GPIO_Init+0x328>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if (((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 8002298:	683b      	ldr	r3, [r7, #0]
 800229a:	685b      	ldr	r3, [r3, #4]
 800229c:	f003 0303 	and.w	r3, r3, #3
 80022a0:	2b01      	cmp	r3, #1
 80022a2:	d005      	beq.n	80022b0 <HAL_GPIO_Init+0x44>
 80022a4:	683b      	ldr	r3, [r7, #0]
 80022a6:	685b      	ldr	r3, [r3, #4]
 80022a8:	f003 0303 	and.w	r3, r3, #3
 80022ac:	2b02      	cmp	r3, #2
 80022ae:	d130      	bne.n	8002312 <HAL_GPIO_Init+0xa6>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));

        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 80022b0:	687b      	ldr	r3, [r7, #4]
 80022b2:	689b      	ldr	r3, [r3, #8]
 80022b4:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2U));
 80022b6:	69fb      	ldr	r3, [r7, #28]
 80022b8:	005b      	lsls	r3, r3, #1
 80022ba:	2203      	movs	r2, #3
 80022bc:	fa02 f303 	lsl.w	r3, r2, r3
 80022c0:	43db      	mvns	r3, r3
 80022c2:	69ba      	ldr	r2, [r7, #24]
 80022c4:	4013      	ands	r3, r2
 80022c6:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 80022c8:	683b      	ldr	r3, [r7, #0]
 80022ca:	68da      	ldr	r2, [r3, #12]
 80022cc:	69fb      	ldr	r3, [r7, #28]
 80022ce:	005b      	lsls	r3, r3, #1
 80022d0:	fa02 f303 	lsl.w	r3, r2, r3
 80022d4:	69ba      	ldr	r2, [r7, #24]
 80022d6:	4313      	orrs	r3, r2
 80022d8:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 80022da:	687b      	ldr	r3, [r7, #4]
 80022dc:	69ba      	ldr	r2, [r7, #24]
 80022de:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 80022e0:	687b      	ldr	r3, [r7, #4]
 80022e2:	685b      	ldr	r3, [r3, #4]
 80022e4:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 80022e6:	2201      	movs	r2, #1
 80022e8:	69fb      	ldr	r3, [r7, #28]
 80022ea:	fa02 f303 	lsl.w	r3, r2, r3
 80022ee:	43db      	mvns	r3, r3
 80022f0:	69ba      	ldr	r2, [r7, #24]
 80022f2:	4013      	ands	r3, r2
 80022f4:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 80022f6:	683b      	ldr	r3, [r7, #0]
 80022f8:	685b      	ldr	r3, [r3, #4]
 80022fa:	091b      	lsrs	r3, r3, #4
 80022fc:	f003 0201 	and.w	r2, r3, #1
 8002300:	69fb      	ldr	r3, [r7, #28]
 8002302:	fa02 f303 	lsl.w	r3, r2, r3
 8002306:	69ba      	ldr	r2, [r7, #24]
 8002308:	4313      	orrs	r3, r2
 800230a:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 800230c:	687b      	ldr	r3, [r7, #4]
 800230e:	69ba      	ldr	r2, [r7, #24]
 8002310:	605a      	str	r2, [r3, #4]
      }

      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8002312:	683b      	ldr	r3, [r7, #0]
 8002314:	685b      	ldr	r3, [r3, #4]
 8002316:	f003 0303 	and.w	r3, r3, #3
 800231a:	2b03      	cmp	r3, #3
 800231c:	d017      	beq.n	800234e <HAL_GPIO_Init+0xe2>
      {
       /* Check the Pull parameter */
       assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

      /* Activate the Pull-up or Pull down resistor for the current IO */
      temp = GPIOx->PUPDR;
 800231e:	687b      	ldr	r3, [r7, #4]
 8002320:	68db      	ldr	r3, [r3, #12]
 8002322:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 8002324:	69fb      	ldr	r3, [r7, #28]
 8002326:	005b      	lsls	r3, r3, #1
 8002328:	2203      	movs	r2, #3
 800232a:	fa02 f303 	lsl.w	r3, r2, r3
 800232e:	43db      	mvns	r3, r3
 8002330:	69ba      	ldr	r2, [r7, #24]
 8002332:	4013      	ands	r3, r2
 8002334:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Pull) << (position * 2U));
 8002336:	683b      	ldr	r3, [r7, #0]
 8002338:	689a      	ldr	r2, [r3, #8]
 800233a:	69fb      	ldr	r3, [r7, #28]
 800233c:	005b      	lsls	r3, r3, #1
 800233e:	fa02 f303 	lsl.w	r3, r2, r3
 8002342:	69ba      	ldr	r2, [r7, #24]
 8002344:	4313      	orrs	r3, r2
 8002346:	61bb      	str	r3, [r7, #24]
      GPIOx->PUPDR = temp;
 8002348:	687b      	ldr	r3, [r7, #4]
 800234a:	69ba      	ldr	r2, [r7, #24]
 800234c:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 800234e:	683b      	ldr	r3, [r7, #0]
 8002350:	685b      	ldr	r3, [r3, #4]
 8002352:	f003 0303 	and.w	r3, r3, #3
 8002356:	2b02      	cmp	r3, #2
 8002358:	d123      	bne.n	80023a2 <HAL_GPIO_Init+0x136>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 800235a:	69fb      	ldr	r3, [r7, #28]
 800235c:	08da      	lsrs	r2, r3, #3
 800235e:	687b      	ldr	r3, [r7, #4]
 8002360:	3208      	adds	r2, #8
 8002362:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8002366:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((position & 0x07U) * 4U));
 8002368:	69fb      	ldr	r3, [r7, #28]
 800236a:	f003 0307 	and.w	r3, r3, #7
 800236e:	009b      	lsls	r3, r3, #2
 8002370:	220f      	movs	r2, #15
 8002372:	fa02 f303 	lsl.w	r3, r2, r3
 8002376:	43db      	mvns	r3, r3
 8002378:	69ba      	ldr	r2, [r7, #24]
 800237a:	4013      	ands	r3, r2
 800237c:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07U) * 4U));
 800237e:	683b      	ldr	r3, [r7, #0]
 8002380:	691a      	ldr	r2, [r3, #16]
 8002382:	69fb      	ldr	r3, [r7, #28]
 8002384:	f003 0307 	and.w	r3, r3, #7
 8002388:	009b      	lsls	r3, r3, #2
 800238a:	fa02 f303 	lsl.w	r3, r2, r3
 800238e:	69ba      	ldr	r2, [r7, #24]
 8002390:	4313      	orrs	r3, r2
 8002392:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 8002394:	69fb      	ldr	r3, [r7, #28]
 8002396:	08da      	lsrs	r2, r3, #3
 8002398:	687b      	ldr	r3, [r7, #4]
 800239a:	3208      	adds	r2, #8
 800239c:	69b9      	ldr	r1, [r7, #24]
 800239e:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 80023a2:	687b      	ldr	r3, [r7, #4]
 80023a4:	681b      	ldr	r3, [r3, #0]
 80023a6:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2U));
 80023a8:	69fb      	ldr	r3, [r7, #28]
 80023aa:	005b      	lsls	r3, r3, #1
 80023ac:	2203      	movs	r2, #3
 80023ae:	fa02 f303 	lsl.w	r3, r2, r3
 80023b2:	43db      	mvns	r3, r3
 80023b4:	69ba      	ldr	r2, [r7, #24]
 80023b6:	4013      	ands	r3, r2
 80023b8:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 80023ba:	683b      	ldr	r3, [r7, #0]
 80023bc:	685b      	ldr	r3, [r3, #4]
 80023be:	f003 0203 	and.w	r2, r3, #3
 80023c2:	69fb      	ldr	r3, [r7, #28]
 80023c4:	005b      	lsls	r3, r3, #1
 80023c6:	fa02 f303 	lsl.w	r3, r2, r3
 80023ca:	69ba      	ldr	r2, [r7, #24]
 80023cc:	4313      	orrs	r3, r2
 80023ce:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 80023d0:	687b      	ldr	r3, [r7, #4]
 80023d2:	69ba      	ldr	r2, [r7, #24]
 80023d4:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 80023d6:	683b      	ldr	r3, [r7, #0]
 80023d8:	685b      	ldr	r3, [r3, #4]
 80023da:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 80023de:	2b00      	cmp	r3, #0
 80023e0:	f000 80d8 	beq.w	8002594 <HAL_GPIO_Init+0x328>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 80023e4:	4b2c      	ldr	r3, [pc, #176]	; (8002498 <HAL_GPIO_Init+0x22c>)
 80023e6:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 80023ea:	4a2b      	ldr	r2, [pc, #172]	; (8002498 <HAL_GPIO_Init+0x22c>)
 80023ec:	f043 0302 	orr.w	r3, r3, #2
 80023f0:	f8c2 30f4 	str.w	r3, [r2, #244]	; 0xf4
 80023f4:	4b28      	ldr	r3, [pc, #160]	; (8002498 <HAL_GPIO_Init+0x22c>)
 80023f6:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 80023fa:	f003 0302 	and.w	r3, r3, #2
 80023fe:	60fb      	str	r3, [r7, #12]
 8002400:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 8002402:	4a26      	ldr	r2, [pc, #152]	; (800249c <HAL_GPIO_Init+0x230>)
 8002404:	69fb      	ldr	r3, [r7, #28]
 8002406:	089b      	lsrs	r3, r3, #2
 8002408:	3302      	adds	r3, #2
 800240a:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800240e:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FUL << (4U * (position & 0x03U)));
 8002410:	69fb      	ldr	r3, [r7, #28]
 8002412:	f003 0303 	and.w	r3, r3, #3
 8002416:	009b      	lsls	r3, r3, #2
 8002418:	220f      	movs	r2, #15
 800241a:	fa02 f303 	lsl.w	r3, r2, r3
 800241e:	43db      	mvns	r3, r3
 8002420:	69ba      	ldr	r2, [r7, #24]
 8002422:	4013      	ands	r3, r2
 8002424:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4U * (position & 0x03U)));
 8002426:	687b      	ldr	r3, [r7, #4]
 8002428:	4a1d      	ldr	r2, [pc, #116]	; (80024a0 <HAL_GPIO_Init+0x234>)
 800242a:	4293      	cmp	r3, r2
 800242c:	d04a      	beq.n	80024c4 <HAL_GPIO_Init+0x258>
 800242e:	687b      	ldr	r3, [r7, #4]
 8002430:	4a1c      	ldr	r2, [pc, #112]	; (80024a4 <HAL_GPIO_Init+0x238>)
 8002432:	4293      	cmp	r3, r2
 8002434:	d02b      	beq.n	800248e <HAL_GPIO_Init+0x222>
 8002436:	687b      	ldr	r3, [r7, #4]
 8002438:	4a1b      	ldr	r2, [pc, #108]	; (80024a8 <HAL_GPIO_Init+0x23c>)
 800243a:	4293      	cmp	r3, r2
 800243c:	d025      	beq.n	800248a <HAL_GPIO_Init+0x21e>
 800243e:	687b      	ldr	r3, [r7, #4]
 8002440:	4a1a      	ldr	r2, [pc, #104]	; (80024ac <HAL_GPIO_Init+0x240>)
 8002442:	4293      	cmp	r3, r2
 8002444:	d01f      	beq.n	8002486 <HAL_GPIO_Init+0x21a>
 8002446:	687b      	ldr	r3, [r7, #4]
 8002448:	4a19      	ldr	r2, [pc, #100]	; (80024b0 <HAL_GPIO_Init+0x244>)
 800244a:	4293      	cmp	r3, r2
 800244c:	d019      	beq.n	8002482 <HAL_GPIO_Init+0x216>
 800244e:	687b      	ldr	r3, [r7, #4]
 8002450:	4a18      	ldr	r2, [pc, #96]	; (80024b4 <HAL_GPIO_Init+0x248>)
 8002452:	4293      	cmp	r3, r2
 8002454:	d013      	beq.n	800247e <HAL_GPIO_Init+0x212>
 8002456:	687b      	ldr	r3, [r7, #4]
 8002458:	4a17      	ldr	r2, [pc, #92]	; (80024b8 <HAL_GPIO_Init+0x24c>)
 800245a:	4293      	cmp	r3, r2
 800245c:	d00d      	beq.n	800247a <HAL_GPIO_Init+0x20e>
 800245e:	687b      	ldr	r3, [r7, #4]
 8002460:	4a16      	ldr	r2, [pc, #88]	; (80024bc <HAL_GPIO_Init+0x250>)
 8002462:	4293      	cmp	r3, r2
 8002464:	d007      	beq.n	8002476 <HAL_GPIO_Init+0x20a>
 8002466:	687b      	ldr	r3, [r7, #4]
 8002468:	4a15      	ldr	r2, [pc, #84]	; (80024c0 <HAL_GPIO_Init+0x254>)
 800246a:	4293      	cmp	r3, r2
 800246c:	d101      	bne.n	8002472 <HAL_GPIO_Init+0x206>
 800246e:	2309      	movs	r3, #9
 8002470:	e029      	b.n	80024c6 <HAL_GPIO_Init+0x25a>
 8002472:	230a      	movs	r3, #10
 8002474:	e027      	b.n	80024c6 <HAL_GPIO_Init+0x25a>
 8002476:	2307      	movs	r3, #7
 8002478:	e025      	b.n	80024c6 <HAL_GPIO_Init+0x25a>
 800247a:	2306      	movs	r3, #6
 800247c:	e023      	b.n	80024c6 <HAL_GPIO_Init+0x25a>
 800247e:	2305      	movs	r3, #5
 8002480:	e021      	b.n	80024c6 <HAL_GPIO_Init+0x25a>
 8002482:	2304      	movs	r3, #4
 8002484:	e01f      	b.n	80024c6 <HAL_GPIO_Init+0x25a>
 8002486:	2303      	movs	r3, #3
 8002488:	e01d      	b.n	80024c6 <HAL_GPIO_Init+0x25a>
 800248a:	2302      	movs	r3, #2
 800248c:	e01b      	b.n	80024c6 <HAL_GPIO_Init+0x25a>
 800248e:	2301      	movs	r3, #1
 8002490:	e019      	b.n	80024c6 <HAL_GPIO_Init+0x25a>
 8002492:	bf00      	nop
 8002494:	58000080 	.word	0x58000080
 8002498:	58024400 	.word	0x58024400
 800249c:	58000400 	.word	0x58000400
 80024a0:	58020000 	.word	0x58020000
 80024a4:	58020400 	.word	0x58020400
 80024a8:	58020800 	.word	0x58020800
 80024ac:	58020c00 	.word	0x58020c00
 80024b0:	58021000 	.word	0x58021000
 80024b4:	58021400 	.word	0x58021400
 80024b8:	58021800 	.word	0x58021800
 80024bc:	58021c00 	.word	0x58021c00
 80024c0:	58022400 	.word	0x58022400
 80024c4:	2300      	movs	r3, #0
 80024c6:	69fa      	ldr	r2, [r7, #28]
 80024c8:	f002 0203 	and.w	r2, r2, #3
 80024cc:	0092      	lsls	r2, r2, #2
 80024ce:	4093      	lsls	r3, r2
 80024d0:	69ba      	ldr	r2, [r7, #24]
 80024d2:	4313      	orrs	r3, r2
 80024d4:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 80024d6:	4938      	ldr	r1, [pc, #224]	; (80025b8 <HAL_GPIO_Init+0x34c>)
 80024d8:	69fb      	ldr	r3, [r7, #28]
 80024da:	089b      	lsrs	r3, r3, #2
 80024dc:	3302      	adds	r3, #2
 80024de:	69ba      	ldr	r2, [r7, #24]
 80024e0:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 80024e4:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80024e8:	681b      	ldr	r3, [r3, #0]
 80024ea:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 80024ec:	693b      	ldr	r3, [r7, #16]
 80024ee:	43db      	mvns	r3, r3
 80024f0:	69ba      	ldr	r2, [r7, #24]
 80024f2:	4013      	ands	r3, r2
 80024f4:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 80024f6:	683b      	ldr	r3, [r7, #0]
 80024f8:	685b      	ldr	r3, [r3, #4]
 80024fa:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 80024fe:	2b00      	cmp	r3, #0
 8002500:	d003      	beq.n	800250a <HAL_GPIO_Init+0x29e>
        {
          temp |= iocurrent;
 8002502:	69ba      	ldr	r2, [r7, #24]
 8002504:	693b      	ldr	r3, [r7, #16]
 8002506:	4313      	orrs	r3, r2
 8002508:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR1 = temp;
 800250a:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 800250e:	69bb      	ldr	r3, [r7, #24]
 8002510:	6013      	str	r3, [r2, #0]

        temp = EXTI->FTSR1;
 8002512:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8002516:	685b      	ldr	r3, [r3, #4]
 8002518:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 800251a:	693b      	ldr	r3, [r7, #16]
 800251c:	43db      	mvns	r3, r3
 800251e:	69ba      	ldr	r2, [r7, #24]
 8002520:	4013      	ands	r3, r2
 8002522:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 8002524:	683b      	ldr	r3, [r7, #0]
 8002526:	685b      	ldr	r3, [r3, #4]
 8002528:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 800252c:	2b00      	cmp	r3, #0
 800252e:	d003      	beq.n	8002538 <HAL_GPIO_Init+0x2cc>
        {
          temp |= iocurrent;
 8002530:	69ba      	ldr	r2, [r7, #24]
 8002532:	693b      	ldr	r3, [r7, #16]
 8002534:	4313      	orrs	r3, r2
 8002536:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR1 = temp;
 8002538:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 800253c:	69bb      	ldr	r3, [r7, #24]
 800253e:	6053      	str	r3, [r2, #4]

        temp = EXTI_CurrentCPU->EMR1;
 8002540:	697b      	ldr	r3, [r7, #20]
 8002542:	685b      	ldr	r3, [r3, #4]
 8002544:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 8002546:	693b      	ldr	r3, [r7, #16]
 8002548:	43db      	mvns	r3, r3
 800254a:	69ba      	ldr	r2, [r7, #24]
 800254c:	4013      	ands	r3, r2
 800254e:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 8002550:	683b      	ldr	r3, [r7, #0]
 8002552:	685b      	ldr	r3, [r3, #4]
 8002554:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002558:	2b00      	cmp	r3, #0
 800255a:	d003      	beq.n	8002564 <HAL_GPIO_Init+0x2f8>
        {
          temp |= iocurrent;
 800255c:	69ba      	ldr	r2, [r7, #24]
 800255e:	693b      	ldr	r3, [r7, #16]
 8002560:	4313      	orrs	r3, r2
 8002562:	61bb      	str	r3, [r7, #24]
        }
        EXTI_CurrentCPU->EMR1 = temp;
 8002564:	697b      	ldr	r3, [r7, #20]
 8002566:	69ba      	ldr	r2, [r7, #24]
 8002568:	605a      	str	r2, [r3, #4]

        /* Clear EXTI line configuration */
        temp = EXTI_CurrentCPU->IMR1;
 800256a:	697b      	ldr	r3, [r7, #20]
 800256c:	681b      	ldr	r3, [r3, #0]
 800256e:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 8002570:	693b      	ldr	r3, [r7, #16]
 8002572:	43db      	mvns	r3, r3
 8002574:	69ba      	ldr	r2, [r7, #24]
 8002576:	4013      	ands	r3, r2
 8002578:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 800257a:	683b      	ldr	r3, [r7, #0]
 800257c:	685b      	ldr	r3, [r3, #4]
 800257e:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8002582:	2b00      	cmp	r3, #0
 8002584:	d003      	beq.n	800258e <HAL_GPIO_Init+0x322>
        {
          temp |= iocurrent;
 8002586:	69ba      	ldr	r2, [r7, #24]
 8002588:	693b      	ldr	r3, [r7, #16]
 800258a:	4313      	orrs	r3, r2
 800258c:	61bb      	str	r3, [r7, #24]
        }
        EXTI_CurrentCPU->IMR1 = temp;
 800258e:	697b      	ldr	r3, [r7, #20]
 8002590:	69ba      	ldr	r2, [r7, #24]
 8002592:	601a      	str	r2, [r3, #0]
      }
    }

    position++;
 8002594:	69fb      	ldr	r3, [r7, #28]
 8002596:	3301      	adds	r3, #1
 8002598:	61fb      	str	r3, [r7, #28]
  while (((GPIO_Init->Pin) >> position) != 0x00U)
 800259a:	683b      	ldr	r3, [r7, #0]
 800259c:	681a      	ldr	r2, [r3, #0]
 800259e:	69fb      	ldr	r3, [r7, #28]
 80025a0:	fa22 f303 	lsr.w	r3, r2, r3
 80025a4:	2b00      	cmp	r3, #0
 80025a6:	f47f ae6b 	bne.w	8002280 <HAL_GPIO_Init+0x14>
  }
}
 80025aa:	bf00      	nop
 80025ac:	bf00      	nop
 80025ae:	3724      	adds	r7, #36	; 0x24
 80025b0:	46bd      	mov	sp, r7
 80025b2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80025b6:	4770      	bx	lr
 80025b8:	58000400 	.word	0x58000400

080025bc <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 80025bc:	b480      	push	{r7}
 80025be:	b083      	sub	sp, #12
 80025c0:	af00      	add	r7, sp, #0
 80025c2:	6078      	str	r0, [r7, #4]
 80025c4:	460b      	mov	r3, r1
 80025c6:	807b      	strh	r3, [r7, #2]
 80025c8:	4613      	mov	r3, r2
 80025ca:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 80025cc:	787b      	ldrb	r3, [r7, #1]
 80025ce:	2b00      	cmp	r3, #0
 80025d0:	d003      	beq.n	80025da <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 80025d2:	887a      	ldrh	r2, [r7, #2]
 80025d4:	687b      	ldr	r3, [r7, #4]
 80025d6:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << GPIO_NUMBER;
  }
}
 80025d8:	e003      	b.n	80025e2 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << GPIO_NUMBER;
 80025da:	887b      	ldrh	r3, [r7, #2]
 80025dc:	041a      	lsls	r2, r3, #16
 80025de:	687b      	ldr	r3, [r7, #4]
 80025e0:	619a      	str	r2, [r3, #24]
}
 80025e2:	bf00      	nop
 80025e4:	370c      	adds	r7, #12
 80025e6:	46bd      	mov	sp, r7
 80025e8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80025ec:	4770      	bx	lr
	...

080025f0 <HAL_PWREx_ConfigSupply>:
  *         PWR_SMPS_2V5_SUPPLIES_EXT are used only for lines that supports SMPS
  *         regulator.
  * @retval HAL status.
  */
HAL_StatusTypeDef HAL_PWREx_ConfigSupply (uint32_t SupplySource)
{
 80025f0:	b580      	push	{r7, lr}
 80025f2:	b084      	sub	sp, #16
 80025f4:	af00      	add	r7, sp, #0
 80025f6:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param (IS_PWR_SUPPLY (SupplySource));

  /* Check if supply source was configured */
#if defined (PWR_FLAG_SCUEN)
  if (__HAL_PWR_GET_FLAG (PWR_FLAG_SCUEN) == 0U)
 80025f8:	4b19      	ldr	r3, [pc, #100]	; (8002660 <HAL_PWREx_ConfigSupply+0x70>)
 80025fa:	68db      	ldr	r3, [r3, #12]
 80025fc:	f003 0304 	and.w	r3, r3, #4
 8002600:	2b04      	cmp	r3, #4
 8002602:	d00a      	beq.n	800261a <HAL_PWREx_ConfigSupply+0x2a>
#else
  if ((PWR->CR3 & (PWR_CR3_SMPSEN | PWR_CR3_LDOEN | PWR_CR3_BYPASS)) != (PWR_CR3_SMPSEN | PWR_CR3_LDOEN))
#endif /* defined (PWR_FLAG_SCUEN) */
  {
    /* Check supply configuration */
    if ((PWR->CR3 & PWR_SUPPLY_CONFIG_MASK) != SupplySource)
 8002604:	4b16      	ldr	r3, [pc, #88]	; (8002660 <HAL_PWREx_ConfigSupply+0x70>)
 8002606:	68db      	ldr	r3, [r3, #12]
 8002608:	f003 0307 	and.w	r3, r3, #7
 800260c:	687a      	ldr	r2, [r7, #4]
 800260e:	429a      	cmp	r2, r3
 8002610:	d001      	beq.n	8002616 <HAL_PWREx_ConfigSupply+0x26>
    {
      /* Supply configuration update locked, can't apply a new supply config */
      return HAL_ERROR;
 8002612:	2301      	movs	r3, #1
 8002614:	e01f      	b.n	8002656 <HAL_PWREx_ConfigSupply+0x66>
    else
    {
      /* Supply configuration update locked, but new supply configuration
         matches with old supply configuration : nothing to do
      */
      return HAL_OK;
 8002616:	2300      	movs	r3, #0
 8002618:	e01d      	b.n	8002656 <HAL_PWREx_ConfigSupply+0x66>
    }
  }

  /* Set the power supply configuration */
  MODIFY_REG (PWR->CR3, PWR_SUPPLY_CONFIG_MASK, SupplySource);
 800261a:	4b11      	ldr	r3, [pc, #68]	; (8002660 <HAL_PWREx_ConfigSupply+0x70>)
 800261c:	68db      	ldr	r3, [r3, #12]
 800261e:	f023 0207 	bic.w	r2, r3, #7
 8002622:	490f      	ldr	r1, [pc, #60]	; (8002660 <HAL_PWREx_ConfigSupply+0x70>)
 8002624:	687b      	ldr	r3, [r7, #4]
 8002626:	4313      	orrs	r3, r2
 8002628:	60cb      	str	r3, [r1, #12]

  /* Get tick */
  tickstart = HAL_GetTick ();
 800262a:	f7ff f8f7 	bl	800181c <HAL_GetTick>
 800262e:	60f8      	str	r0, [r7, #12]

  /* Wait till voltage level flag is set */
  while (__HAL_PWR_GET_FLAG (PWR_FLAG_ACTVOSRDY) == 0U)
 8002630:	e009      	b.n	8002646 <HAL_PWREx_ConfigSupply+0x56>
  {
    if ((HAL_GetTick () - tickstart) > PWR_FLAG_SETTING_DELAY)
 8002632:	f7ff f8f3 	bl	800181c <HAL_GetTick>
 8002636:	4602      	mov	r2, r0
 8002638:	68fb      	ldr	r3, [r7, #12]
 800263a:	1ad3      	subs	r3, r2, r3
 800263c:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8002640:	d901      	bls.n	8002646 <HAL_PWREx_ConfigSupply+0x56>
    {
      return HAL_ERROR;
 8002642:	2301      	movs	r3, #1
 8002644:	e007      	b.n	8002656 <HAL_PWREx_ConfigSupply+0x66>
  while (__HAL_PWR_GET_FLAG (PWR_FLAG_ACTVOSRDY) == 0U)
 8002646:	4b06      	ldr	r3, [pc, #24]	; (8002660 <HAL_PWREx_ConfigSupply+0x70>)
 8002648:	685b      	ldr	r3, [r3, #4]
 800264a:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 800264e:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8002652:	d1ee      	bne.n	8002632 <HAL_PWREx_ConfigSupply+0x42>
      }
    }
  }
#endif /* defined (SMPS) */

  return HAL_OK;
 8002654:	2300      	movs	r3, #0
}
 8002656:	4618      	mov	r0, r3
 8002658:	3710      	adds	r7, #16
 800265a:	46bd      	mov	sp, r7
 800265c:	bd80      	pop	{r7, pc}
 800265e:	bf00      	nop
 8002660:	58024800 	.word	0x58024800

08002664 <HAL_RCC_OscConfig>:
  *         supported by this function. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8002664:	b580      	push	{r7, lr}
 8002666:	b08c      	sub	sp, #48	; 0x30
 8002668:	af00      	add	r7, sp, #0
 800266a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t temp1_pllckcfg, temp2_pllckcfg;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 800266c:	687b      	ldr	r3, [r7, #4]
 800266e:	2b00      	cmp	r3, #0
 8002670:	d101      	bne.n	8002676 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8002672:	2301      	movs	r3, #1
 8002674:	e3c8      	b.n	8002e08 <HAL_RCC_OscConfig+0x7a4>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8002676:	687b      	ldr	r3, [r7, #4]
 8002678:	681b      	ldr	r3, [r3, #0]
 800267a:	f003 0301 	and.w	r3, r3, #1
 800267e:	2b00      	cmp	r3, #0
 8002680:	f000 8087 	beq.w	8002792 <HAL_RCC_OscConfig+0x12e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 8002684:	4b88      	ldr	r3, [pc, #544]	; (80028a8 <HAL_RCC_OscConfig+0x244>)
 8002686:	691b      	ldr	r3, [r3, #16]
 8002688:	f003 0338 	and.w	r3, r3, #56	; 0x38
 800268c:	62fb      	str	r3, [r7, #44]	; 0x2c
    const uint32_t temp_pllckselr = RCC->PLLCKSELR;
 800268e:	4b86      	ldr	r3, [pc, #536]	; (80028a8 <HAL_RCC_OscConfig+0x244>)
 8002690:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002692:	62bb      	str	r3, [r7, #40]	; 0x28
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if ((temp_sysclksrc == RCC_CFGR_SWS_HSE) || ((temp_sysclksrc == RCC_CFGR_SWS_PLL1) && ((temp_pllckselr & RCC_PLLCKSELR_PLLSRC) == RCC_PLLCKSELR_PLLSRC_HSE)))
 8002694:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002696:	2b10      	cmp	r3, #16
 8002698:	d007      	beq.n	80026aa <HAL_RCC_OscConfig+0x46>
 800269a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800269c:	2b18      	cmp	r3, #24
 800269e:	d110      	bne.n	80026c2 <HAL_RCC_OscConfig+0x5e>
 80026a0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80026a2:	f003 0303 	and.w	r3, r3, #3
 80026a6:	2b02      	cmp	r3, #2
 80026a8:	d10b      	bne.n	80026c2 <HAL_RCC_OscConfig+0x5e>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80026aa:	4b7f      	ldr	r3, [pc, #508]	; (80028a8 <HAL_RCC_OscConfig+0x244>)
 80026ac:	681b      	ldr	r3, [r3, #0]
 80026ae:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80026b2:	2b00      	cmp	r3, #0
 80026b4:	d06c      	beq.n	8002790 <HAL_RCC_OscConfig+0x12c>
 80026b6:	687b      	ldr	r3, [r7, #4]
 80026b8:	685b      	ldr	r3, [r3, #4]
 80026ba:	2b00      	cmp	r3, #0
 80026bc:	d168      	bne.n	8002790 <HAL_RCC_OscConfig+0x12c>
      {
        return HAL_ERROR;
 80026be:	2301      	movs	r3, #1
 80026c0:	e3a2      	b.n	8002e08 <HAL_RCC_OscConfig+0x7a4>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 80026c2:	687b      	ldr	r3, [r7, #4]
 80026c4:	685b      	ldr	r3, [r3, #4]
 80026c6:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80026ca:	d106      	bne.n	80026da <HAL_RCC_OscConfig+0x76>
 80026cc:	4b76      	ldr	r3, [pc, #472]	; (80028a8 <HAL_RCC_OscConfig+0x244>)
 80026ce:	681b      	ldr	r3, [r3, #0]
 80026d0:	4a75      	ldr	r2, [pc, #468]	; (80028a8 <HAL_RCC_OscConfig+0x244>)
 80026d2:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80026d6:	6013      	str	r3, [r2, #0]
 80026d8:	e02e      	b.n	8002738 <HAL_RCC_OscConfig+0xd4>
 80026da:	687b      	ldr	r3, [r7, #4]
 80026dc:	685b      	ldr	r3, [r3, #4]
 80026de:	2b00      	cmp	r3, #0
 80026e0:	d10c      	bne.n	80026fc <HAL_RCC_OscConfig+0x98>
 80026e2:	4b71      	ldr	r3, [pc, #452]	; (80028a8 <HAL_RCC_OscConfig+0x244>)
 80026e4:	681b      	ldr	r3, [r3, #0]
 80026e6:	4a70      	ldr	r2, [pc, #448]	; (80028a8 <HAL_RCC_OscConfig+0x244>)
 80026e8:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80026ec:	6013      	str	r3, [r2, #0]
 80026ee:	4b6e      	ldr	r3, [pc, #440]	; (80028a8 <HAL_RCC_OscConfig+0x244>)
 80026f0:	681b      	ldr	r3, [r3, #0]
 80026f2:	4a6d      	ldr	r2, [pc, #436]	; (80028a8 <HAL_RCC_OscConfig+0x244>)
 80026f4:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 80026f8:	6013      	str	r3, [r2, #0]
 80026fa:	e01d      	b.n	8002738 <HAL_RCC_OscConfig+0xd4>
 80026fc:	687b      	ldr	r3, [r7, #4]
 80026fe:	685b      	ldr	r3, [r3, #4]
 8002700:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8002704:	d10c      	bne.n	8002720 <HAL_RCC_OscConfig+0xbc>
 8002706:	4b68      	ldr	r3, [pc, #416]	; (80028a8 <HAL_RCC_OscConfig+0x244>)
 8002708:	681b      	ldr	r3, [r3, #0]
 800270a:	4a67      	ldr	r2, [pc, #412]	; (80028a8 <HAL_RCC_OscConfig+0x244>)
 800270c:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8002710:	6013      	str	r3, [r2, #0]
 8002712:	4b65      	ldr	r3, [pc, #404]	; (80028a8 <HAL_RCC_OscConfig+0x244>)
 8002714:	681b      	ldr	r3, [r3, #0]
 8002716:	4a64      	ldr	r2, [pc, #400]	; (80028a8 <HAL_RCC_OscConfig+0x244>)
 8002718:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800271c:	6013      	str	r3, [r2, #0]
 800271e:	e00b      	b.n	8002738 <HAL_RCC_OscConfig+0xd4>
 8002720:	4b61      	ldr	r3, [pc, #388]	; (80028a8 <HAL_RCC_OscConfig+0x244>)
 8002722:	681b      	ldr	r3, [r3, #0]
 8002724:	4a60      	ldr	r2, [pc, #384]	; (80028a8 <HAL_RCC_OscConfig+0x244>)
 8002726:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800272a:	6013      	str	r3, [r2, #0]
 800272c:	4b5e      	ldr	r3, [pc, #376]	; (80028a8 <HAL_RCC_OscConfig+0x244>)
 800272e:	681b      	ldr	r3, [r3, #0]
 8002730:	4a5d      	ldr	r2, [pc, #372]	; (80028a8 <HAL_RCC_OscConfig+0x244>)
 8002732:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8002736:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8002738:	687b      	ldr	r3, [r7, #4]
 800273a:	685b      	ldr	r3, [r3, #4]
 800273c:	2b00      	cmp	r3, #0
 800273e:	d013      	beq.n	8002768 <HAL_RCC_OscConfig+0x104>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002740:	f7ff f86c 	bl	800181c <HAL_GetTick>
 8002744:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 8002746:	e008      	b.n	800275a <HAL_RCC_OscConfig+0xf6>
        {
          if ((uint32_t)(HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8002748:	f7ff f868 	bl	800181c <HAL_GetTick>
 800274c:	4602      	mov	r2, r0
 800274e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002750:	1ad3      	subs	r3, r2, r3
 8002752:	2b64      	cmp	r3, #100	; 0x64
 8002754:	d901      	bls.n	800275a <HAL_RCC_OscConfig+0xf6>
          {
            return HAL_TIMEOUT;
 8002756:	2303      	movs	r3, #3
 8002758:	e356      	b.n	8002e08 <HAL_RCC_OscConfig+0x7a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 800275a:	4b53      	ldr	r3, [pc, #332]	; (80028a8 <HAL_RCC_OscConfig+0x244>)
 800275c:	681b      	ldr	r3, [r3, #0]
 800275e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002762:	2b00      	cmp	r3, #0
 8002764:	d0f0      	beq.n	8002748 <HAL_RCC_OscConfig+0xe4>
 8002766:	e014      	b.n	8002792 <HAL_RCC_OscConfig+0x12e>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002768:	f7ff f858 	bl	800181c <HAL_GetTick>
 800276c:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till HSE is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U)
 800276e:	e008      	b.n	8002782 <HAL_RCC_OscConfig+0x11e>
        {
          if ((uint32_t)(HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8002770:	f7ff f854 	bl	800181c <HAL_GetTick>
 8002774:	4602      	mov	r2, r0
 8002776:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002778:	1ad3      	subs	r3, r2, r3
 800277a:	2b64      	cmp	r3, #100	; 0x64
 800277c:	d901      	bls.n	8002782 <HAL_RCC_OscConfig+0x11e>
          {
            return HAL_TIMEOUT;
 800277e:	2303      	movs	r3, #3
 8002780:	e342      	b.n	8002e08 <HAL_RCC_OscConfig+0x7a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U)
 8002782:	4b49      	ldr	r3, [pc, #292]	; (80028a8 <HAL_RCC_OscConfig+0x244>)
 8002784:	681b      	ldr	r3, [r3, #0]
 8002786:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800278a:	2b00      	cmp	r3, #0
 800278c:	d1f0      	bne.n	8002770 <HAL_RCC_OscConfig+0x10c>
 800278e:	e000      	b.n	8002792 <HAL_RCC_OscConfig+0x12e>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8002790:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8002792:	687b      	ldr	r3, [r7, #4]
 8002794:	681b      	ldr	r3, [r3, #0]
 8002796:	f003 0302 	and.w	r3, r3, #2
 800279a:	2b00      	cmp	r3, #0
 800279c:	f000 808c 	beq.w	80028b8 <HAL_RCC_OscConfig+0x254>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSICALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* When the HSI is used as system clock it will not be disabled */
    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 80027a0:	4b41      	ldr	r3, [pc, #260]	; (80028a8 <HAL_RCC_OscConfig+0x244>)
 80027a2:	691b      	ldr	r3, [r3, #16]
 80027a4:	f003 0338 	and.w	r3, r3, #56	; 0x38
 80027a8:	623b      	str	r3, [r7, #32]
    const uint32_t temp_pllckselr = RCC->PLLCKSELR;
 80027aa:	4b3f      	ldr	r3, [pc, #252]	; (80028a8 <HAL_RCC_OscConfig+0x244>)
 80027ac:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80027ae:	61fb      	str	r3, [r7, #28]
    if ((temp_sysclksrc == RCC_CFGR_SWS_HSI) || ((temp_sysclksrc == RCC_CFGR_SWS_PLL1) && ((temp_pllckselr & RCC_PLLCKSELR_PLLSRC) == RCC_PLLCKSELR_PLLSRC_HSI)))
 80027b0:	6a3b      	ldr	r3, [r7, #32]
 80027b2:	2b00      	cmp	r3, #0
 80027b4:	d007      	beq.n	80027c6 <HAL_RCC_OscConfig+0x162>
 80027b6:	6a3b      	ldr	r3, [r7, #32]
 80027b8:	2b18      	cmp	r3, #24
 80027ba:	d137      	bne.n	800282c <HAL_RCC_OscConfig+0x1c8>
 80027bc:	69fb      	ldr	r3, [r7, #28]
 80027be:	f003 0303 	and.w	r3, r3, #3
 80027c2:	2b00      	cmp	r3, #0
 80027c4:	d132      	bne.n	800282c <HAL_RCC_OscConfig+0x1c8>
    {
      /* When HSI is used as system clock it will not be disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 80027c6:	4b38      	ldr	r3, [pc, #224]	; (80028a8 <HAL_RCC_OscConfig+0x244>)
 80027c8:	681b      	ldr	r3, [r3, #0]
 80027ca:	f003 0304 	and.w	r3, r3, #4
 80027ce:	2b00      	cmp	r3, #0
 80027d0:	d005      	beq.n	80027de <HAL_RCC_OscConfig+0x17a>
 80027d2:	687b      	ldr	r3, [r7, #4]
 80027d4:	68db      	ldr	r3, [r3, #12]
 80027d6:	2b00      	cmp	r3, #0
 80027d8:	d101      	bne.n	80027de <HAL_RCC_OscConfig+0x17a>
      {
        return HAL_ERROR;
 80027da:	2301      	movs	r3, #1
 80027dc:	e314      	b.n	8002e08 <HAL_RCC_OscConfig+0x7a4>
      }
      /* Otherwise, only HSI division and calibration are allowed */
      else
      {
        /* Enable the Internal High Speed oscillator (HSI, HSIDIV2, HSIDIV4, or HSIDIV8) */
        __HAL_RCC_HSI_CONFIG(RCC_OscInitStruct->HSIState);
 80027de:	4b32      	ldr	r3, [pc, #200]	; (80028a8 <HAL_RCC_OscConfig+0x244>)
 80027e0:	681b      	ldr	r3, [r3, #0]
 80027e2:	f023 0219 	bic.w	r2, r3, #25
 80027e6:	687b      	ldr	r3, [r7, #4]
 80027e8:	68db      	ldr	r3, [r3, #12]
 80027ea:	492f      	ldr	r1, [pc, #188]	; (80028a8 <HAL_RCC_OscConfig+0x244>)
 80027ec:	4313      	orrs	r3, r2
 80027ee:	600b      	str	r3, [r1, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80027f0:	f7ff f814 	bl	800181c <HAL_GetTick>
 80027f4:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 80027f6:	e008      	b.n	800280a <HAL_RCC_OscConfig+0x1a6>
        {
          if ((uint32_t)(HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80027f8:	f7ff f810 	bl	800181c <HAL_GetTick>
 80027fc:	4602      	mov	r2, r0
 80027fe:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002800:	1ad3      	subs	r3, r2, r3
 8002802:	2b02      	cmp	r3, #2
 8002804:	d901      	bls.n	800280a <HAL_RCC_OscConfig+0x1a6>
          {
            return HAL_TIMEOUT;
 8002806:	2303      	movs	r3, #3
 8002808:	e2fe      	b.n	8002e08 <HAL_RCC_OscConfig+0x7a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 800280a:	4b27      	ldr	r3, [pc, #156]	; (80028a8 <HAL_RCC_OscConfig+0x244>)
 800280c:	681b      	ldr	r3, [r3, #0]
 800280e:	f003 0304 	and.w	r3, r3, #4
 8002812:	2b00      	cmp	r3, #0
 8002814:	d0f0      	beq.n	80027f8 <HAL_RCC_OscConfig+0x194>
          }
        }
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002816:	4b24      	ldr	r3, [pc, #144]	; (80028a8 <HAL_RCC_OscConfig+0x244>)
 8002818:	685b      	ldr	r3, [r3, #4]
 800281a:	f023 42fe 	bic.w	r2, r3, #2130706432	; 0x7f000000
 800281e:	687b      	ldr	r3, [r7, #4]
 8002820:	691b      	ldr	r3, [r3, #16]
 8002822:	061b      	lsls	r3, r3, #24
 8002824:	4920      	ldr	r1, [pc, #128]	; (80028a8 <HAL_RCC_OscConfig+0x244>)
 8002826:	4313      	orrs	r3, r2
 8002828:	604b      	str	r3, [r1, #4]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 800282a:	e045      	b.n	80028b8 <HAL_RCC_OscConfig+0x254>
    }

    else
    {
      /* Check the HSI State */
      if ((RCC_OscInitStruct->HSIState) != RCC_HSI_OFF)
 800282c:	687b      	ldr	r3, [r7, #4]
 800282e:	68db      	ldr	r3, [r3, #12]
 8002830:	2b00      	cmp	r3, #0
 8002832:	d026      	beq.n	8002882 <HAL_RCC_OscConfig+0x21e>
      {
        /* Enable the Internal High Speed oscillator (HSI, HSIDIV2,HSIDIV4, or HSIDIV8) */
        __HAL_RCC_HSI_CONFIG(RCC_OscInitStruct->HSIState);
 8002834:	4b1c      	ldr	r3, [pc, #112]	; (80028a8 <HAL_RCC_OscConfig+0x244>)
 8002836:	681b      	ldr	r3, [r3, #0]
 8002838:	f023 0219 	bic.w	r2, r3, #25
 800283c:	687b      	ldr	r3, [r7, #4]
 800283e:	68db      	ldr	r3, [r3, #12]
 8002840:	4919      	ldr	r1, [pc, #100]	; (80028a8 <HAL_RCC_OscConfig+0x244>)
 8002842:	4313      	orrs	r3, r2
 8002844:	600b      	str	r3, [r1, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002846:	f7fe ffe9 	bl	800181c <HAL_GetTick>
 800284a:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 800284c:	e008      	b.n	8002860 <HAL_RCC_OscConfig+0x1fc>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 800284e:	f7fe ffe5 	bl	800181c <HAL_GetTick>
 8002852:	4602      	mov	r2, r0
 8002854:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002856:	1ad3      	subs	r3, r2, r3
 8002858:	2b02      	cmp	r3, #2
 800285a:	d901      	bls.n	8002860 <HAL_RCC_OscConfig+0x1fc>
          {
            return HAL_TIMEOUT;
 800285c:	2303      	movs	r3, #3
 800285e:	e2d3      	b.n	8002e08 <HAL_RCC_OscConfig+0x7a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 8002860:	4b11      	ldr	r3, [pc, #68]	; (80028a8 <HAL_RCC_OscConfig+0x244>)
 8002862:	681b      	ldr	r3, [r3, #0]
 8002864:	f003 0304 	and.w	r3, r3, #4
 8002868:	2b00      	cmp	r3, #0
 800286a:	d0f0      	beq.n	800284e <HAL_RCC_OscConfig+0x1ea>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800286c:	4b0e      	ldr	r3, [pc, #56]	; (80028a8 <HAL_RCC_OscConfig+0x244>)
 800286e:	685b      	ldr	r3, [r3, #4]
 8002870:	f023 42fe 	bic.w	r2, r3, #2130706432	; 0x7f000000
 8002874:	687b      	ldr	r3, [r7, #4]
 8002876:	691b      	ldr	r3, [r3, #16]
 8002878:	061b      	lsls	r3, r3, #24
 800287a:	490b      	ldr	r1, [pc, #44]	; (80028a8 <HAL_RCC_OscConfig+0x244>)
 800287c:	4313      	orrs	r3, r2
 800287e:	604b      	str	r3, [r1, #4]
 8002880:	e01a      	b.n	80028b8 <HAL_RCC_OscConfig+0x254>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8002882:	4b09      	ldr	r3, [pc, #36]	; (80028a8 <HAL_RCC_OscConfig+0x244>)
 8002884:	681b      	ldr	r3, [r3, #0]
 8002886:	4a08      	ldr	r2, [pc, #32]	; (80028a8 <HAL_RCC_OscConfig+0x244>)
 8002888:	f023 0301 	bic.w	r3, r3, #1
 800288c:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800288e:	f7fe ffc5 	bl	800181c <HAL_GetTick>
 8002892:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till HSI is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U)
 8002894:	e00a      	b.n	80028ac <HAL_RCC_OscConfig+0x248>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8002896:	f7fe ffc1 	bl	800181c <HAL_GetTick>
 800289a:	4602      	mov	r2, r0
 800289c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800289e:	1ad3      	subs	r3, r2, r3
 80028a0:	2b02      	cmp	r3, #2
 80028a2:	d903      	bls.n	80028ac <HAL_RCC_OscConfig+0x248>
          {
            return HAL_TIMEOUT;
 80028a4:	2303      	movs	r3, #3
 80028a6:	e2af      	b.n	8002e08 <HAL_RCC_OscConfig+0x7a4>
 80028a8:	58024400 	.word	0x58024400
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U)
 80028ac:	4b96      	ldr	r3, [pc, #600]	; (8002b08 <HAL_RCC_OscConfig+0x4a4>)
 80028ae:	681b      	ldr	r3, [r3, #0]
 80028b0:	f003 0304 	and.w	r3, r3, #4
 80028b4:	2b00      	cmp	r3, #0
 80028b6:	d1ee      	bne.n	8002896 <HAL_RCC_OscConfig+0x232>
        }
      }
    }
  }
  /*----------------------------- CSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_CSI) == RCC_OSCILLATORTYPE_CSI)
 80028b8:	687b      	ldr	r3, [r7, #4]
 80028ba:	681b      	ldr	r3, [r3, #0]
 80028bc:	f003 0310 	and.w	r3, r3, #16
 80028c0:	2b00      	cmp	r3, #0
 80028c2:	d06a      	beq.n	800299a <HAL_RCC_OscConfig+0x336>
    /* Check the parameters */
    assert_param(IS_RCC_CSI(RCC_OscInitStruct->CSIState));
    assert_param(IS_RCC_CSICALIBRATION_VALUE(RCC_OscInitStruct->CSICalibrationValue));

    /* When the CSI is used as system clock it will not disabled */
    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 80028c4:	4b90      	ldr	r3, [pc, #576]	; (8002b08 <HAL_RCC_OscConfig+0x4a4>)
 80028c6:	691b      	ldr	r3, [r3, #16]
 80028c8:	f003 0338 	and.w	r3, r3, #56	; 0x38
 80028cc:	61bb      	str	r3, [r7, #24]
    const uint32_t temp_pllckselr = RCC->PLLCKSELR;
 80028ce:	4b8e      	ldr	r3, [pc, #568]	; (8002b08 <HAL_RCC_OscConfig+0x4a4>)
 80028d0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80028d2:	617b      	str	r3, [r7, #20]
    if ((temp_sysclksrc == RCC_CFGR_SWS_CSI) || ((temp_sysclksrc == RCC_CFGR_SWS_PLL1) && ((temp_pllckselr & RCC_PLLCKSELR_PLLSRC) == RCC_PLLCKSELR_PLLSRC_CSI)))
 80028d4:	69bb      	ldr	r3, [r7, #24]
 80028d6:	2b08      	cmp	r3, #8
 80028d8:	d007      	beq.n	80028ea <HAL_RCC_OscConfig+0x286>
 80028da:	69bb      	ldr	r3, [r7, #24]
 80028dc:	2b18      	cmp	r3, #24
 80028de:	d11b      	bne.n	8002918 <HAL_RCC_OscConfig+0x2b4>
 80028e0:	697b      	ldr	r3, [r7, #20]
 80028e2:	f003 0303 	and.w	r3, r3, #3
 80028e6:	2b01      	cmp	r3, #1
 80028e8:	d116      	bne.n	8002918 <HAL_RCC_OscConfig+0x2b4>
    {
      /* When CSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U) && (RCC_OscInitStruct->CSIState != RCC_CSI_ON))
 80028ea:	4b87      	ldr	r3, [pc, #540]	; (8002b08 <HAL_RCC_OscConfig+0x4a4>)
 80028ec:	681b      	ldr	r3, [r3, #0]
 80028ee:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80028f2:	2b00      	cmp	r3, #0
 80028f4:	d005      	beq.n	8002902 <HAL_RCC_OscConfig+0x29e>
 80028f6:	687b      	ldr	r3, [r7, #4]
 80028f8:	69db      	ldr	r3, [r3, #28]
 80028fa:	2b80      	cmp	r3, #128	; 0x80
 80028fc:	d001      	beq.n	8002902 <HAL_RCC_OscConfig+0x29e>
      {
        return HAL_ERROR;
 80028fe:	2301      	movs	r3, #1
 8002900:	e282      	b.n	8002e08 <HAL_RCC_OscConfig+0x7a4>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (CSI) calibration value.*/
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->CSICalibrationValue);
 8002902:	4b81      	ldr	r3, [pc, #516]	; (8002b08 <HAL_RCC_OscConfig+0x4a4>)
 8002904:	68db      	ldr	r3, [r3, #12]
 8002906:	f023 527c 	bic.w	r2, r3, #1056964608	; 0x3f000000
 800290a:	687b      	ldr	r3, [r7, #4]
 800290c:	6a1b      	ldr	r3, [r3, #32]
 800290e:	061b      	lsls	r3, r3, #24
 8002910:	497d      	ldr	r1, [pc, #500]	; (8002b08 <HAL_RCC_OscConfig+0x4a4>)
 8002912:	4313      	orrs	r3, r2
 8002914:	60cb      	str	r3, [r1, #12]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U) && (RCC_OscInitStruct->CSIState != RCC_CSI_ON))
 8002916:	e040      	b.n	800299a <HAL_RCC_OscConfig+0x336>
      }
    }
    else
    {
      /* Check the CSI State */
      if ((RCC_OscInitStruct->CSIState) != RCC_CSI_OFF)
 8002918:	687b      	ldr	r3, [r7, #4]
 800291a:	69db      	ldr	r3, [r3, #28]
 800291c:	2b00      	cmp	r3, #0
 800291e:	d023      	beq.n	8002968 <HAL_RCC_OscConfig+0x304>
      {
        /* Enable the Internal High Speed oscillator (CSI). */
        __HAL_RCC_CSI_ENABLE();
 8002920:	4b79      	ldr	r3, [pc, #484]	; (8002b08 <HAL_RCC_OscConfig+0x4a4>)
 8002922:	681b      	ldr	r3, [r3, #0]
 8002924:	4a78      	ldr	r2, [pc, #480]	; (8002b08 <HAL_RCC_OscConfig+0x4a4>)
 8002926:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800292a:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800292c:	f7fe ff76 	bl	800181c <HAL_GetTick>
 8002930:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till CSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) == 0U)
 8002932:	e008      	b.n	8002946 <HAL_RCC_OscConfig+0x2e2>
        {
          if ((HAL_GetTick() - tickstart) > CSI_TIMEOUT_VALUE)
 8002934:	f7fe ff72 	bl	800181c <HAL_GetTick>
 8002938:	4602      	mov	r2, r0
 800293a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800293c:	1ad3      	subs	r3, r2, r3
 800293e:	2b02      	cmp	r3, #2
 8002940:	d901      	bls.n	8002946 <HAL_RCC_OscConfig+0x2e2>
          {
            return HAL_TIMEOUT;
 8002942:	2303      	movs	r3, #3
 8002944:	e260      	b.n	8002e08 <HAL_RCC_OscConfig+0x7a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) == 0U)
 8002946:	4b70      	ldr	r3, [pc, #448]	; (8002b08 <HAL_RCC_OscConfig+0x4a4>)
 8002948:	681b      	ldr	r3, [r3, #0]
 800294a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800294e:	2b00      	cmp	r3, #0
 8002950:	d0f0      	beq.n	8002934 <HAL_RCC_OscConfig+0x2d0>
          }
        }

        /* Adjusts the Internal High Speed oscillator (CSI) calibration value.*/
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->CSICalibrationValue);
 8002952:	4b6d      	ldr	r3, [pc, #436]	; (8002b08 <HAL_RCC_OscConfig+0x4a4>)
 8002954:	68db      	ldr	r3, [r3, #12]
 8002956:	f023 527c 	bic.w	r2, r3, #1056964608	; 0x3f000000
 800295a:	687b      	ldr	r3, [r7, #4]
 800295c:	6a1b      	ldr	r3, [r3, #32]
 800295e:	061b      	lsls	r3, r3, #24
 8002960:	4969      	ldr	r1, [pc, #420]	; (8002b08 <HAL_RCC_OscConfig+0x4a4>)
 8002962:	4313      	orrs	r3, r2
 8002964:	60cb      	str	r3, [r1, #12]
 8002966:	e018      	b.n	800299a <HAL_RCC_OscConfig+0x336>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (CSI). */
        __HAL_RCC_CSI_DISABLE();
 8002968:	4b67      	ldr	r3, [pc, #412]	; (8002b08 <HAL_RCC_OscConfig+0x4a4>)
 800296a:	681b      	ldr	r3, [r3, #0]
 800296c:	4a66      	ldr	r2, [pc, #408]	; (8002b08 <HAL_RCC_OscConfig+0x4a4>)
 800296e:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8002972:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002974:	f7fe ff52 	bl	800181c <HAL_GetTick>
 8002978:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till CSI is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U)
 800297a:	e008      	b.n	800298e <HAL_RCC_OscConfig+0x32a>
        {
          if ((HAL_GetTick() - tickstart) > CSI_TIMEOUT_VALUE)
 800297c:	f7fe ff4e 	bl	800181c <HAL_GetTick>
 8002980:	4602      	mov	r2, r0
 8002982:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002984:	1ad3      	subs	r3, r2, r3
 8002986:	2b02      	cmp	r3, #2
 8002988:	d901      	bls.n	800298e <HAL_RCC_OscConfig+0x32a>
          {
            return HAL_TIMEOUT;
 800298a:	2303      	movs	r3, #3
 800298c:	e23c      	b.n	8002e08 <HAL_RCC_OscConfig+0x7a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U)
 800298e:	4b5e      	ldr	r3, [pc, #376]	; (8002b08 <HAL_RCC_OscConfig+0x4a4>)
 8002990:	681b      	ldr	r3, [r3, #0]
 8002992:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002996:	2b00      	cmp	r3, #0
 8002998:	d1f0      	bne.n	800297c <HAL_RCC_OscConfig+0x318>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 800299a:	687b      	ldr	r3, [r7, #4]
 800299c:	681b      	ldr	r3, [r3, #0]
 800299e:	f003 0308 	and.w	r3, r3, #8
 80029a2:	2b00      	cmp	r3, #0
 80029a4:	d036      	beq.n	8002a14 <HAL_RCC_OscConfig+0x3b0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if ((RCC_OscInitStruct->LSIState) != RCC_LSI_OFF)
 80029a6:	687b      	ldr	r3, [r7, #4]
 80029a8:	695b      	ldr	r3, [r3, #20]
 80029aa:	2b00      	cmp	r3, #0
 80029ac:	d019      	beq.n	80029e2 <HAL_RCC_OscConfig+0x37e>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 80029ae:	4b56      	ldr	r3, [pc, #344]	; (8002b08 <HAL_RCC_OscConfig+0x4a4>)
 80029b0:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80029b2:	4a55      	ldr	r2, [pc, #340]	; (8002b08 <HAL_RCC_OscConfig+0x4a4>)
 80029b4:	f043 0301 	orr.w	r3, r3, #1
 80029b8:	6753      	str	r3, [r2, #116]	; 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80029ba:	f7fe ff2f 	bl	800181c <HAL_GetTick>
 80029be:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == 0U)
 80029c0:	e008      	b.n	80029d4 <HAL_RCC_OscConfig+0x370>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 80029c2:	f7fe ff2b 	bl	800181c <HAL_GetTick>
 80029c6:	4602      	mov	r2, r0
 80029c8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80029ca:	1ad3      	subs	r3, r2, r3
 80029cc:	2b02      	cmp	r3, #2
 80029ce:	d901      	bls.n	80029d4 <HAL_RCC_OscConfig+0x370>
        {
          return HAL_TIMEOUT;
 80029d0:	2303      	movs	r3, #3
 80029d2:	e219      	b.n	8002e08 <HAL_RCC_OscConfig+0x7a4>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == 0U)
 80029d4:	4b4c      	ldr	r3, [pc, #304]	; (8002b08 <HAL_RCC_OscConfig+0x4a4>)
 80029d6:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80029d8:	f003 0302 	and.w	r3, r3, #2
 80029dc:	2b00      	cmp	r3, #0
 80029de:	d0f0      	beq.n	80029c2 <HAL_RCC_OscConfig+0x35e>
 80029e0:	e018      	b.n	8002a14 <HAL_RCC_OscConfig+0x3b0>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 80029e2:	4b49      	ldr	r3, [pc, #292]	; (8002b08 <HAL_RCC_OscConfig+0x4a4>)
 80029e4:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80029e6:	4a48      	ldr	r2, [pc, #288]	; (8002b08 <HAL_RCC_OscConfig+0x4a4>)
 80029e8:	f023 0301 	bic.w	r3, r3, #1
 80029ec:	6753      	str	r3, [r2, #116]	; 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80029ee:	f7fe ff15 	bl	800181c <HAL_GetTick>
 80029f2:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != 0U)
 80029f4:	e008      	b.n	8002a08 <HAL_RCC_OscConfig+0x3a4>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 80029f6:	f7fe ff11 	bl	800181c <HAL_GetTick>
 80029fa:	4602      	mov	r2, r0
 80029fc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80029fe:	1ad3      	subs	r3, r2, r3
 8002a00:	2b02      	cmp	r3, #2
 8002a02:	d901      	bls.n	8002a08 <HAL_RCC_OscConfig+0x3a4>
        {
          return HAL_TIMEOUT;
 8002a04:	2303      	movs	r3, #3
 8002a06:	e1ff      	b.n	8002e08 <HAL_RCC_OscConfig+0x7a4>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != 0U)
 8002a08:	4b3f      	ldr	r3, [pc, #252]	; (8002b08 <HAL_RCC_OscConfig+0x4a4>)
 8002a0a:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8002a0c:	f003 0302 	and.w	r3, r3, #2
 8002a10:	2b00      	cmp	r3, #0
 8002a12:	d1f0      	bne.n	80029f6 <HAL_RCC_OscConfig+0x392>
      }
    }
  }

  /*------------------------------ HSI48 Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI48) == RCC_OSCILLATORTYPE_HSI48)
 8002a14:	687b      	ldr	r3, [r7, #4]
 8002a16:	681b      	ldr	r3, [r3, #0]
 8002a18:	f003 0320 	and.w	r3, r3, #32
 8002a1c:	2b00      	cmp	r3, #0
 8002a1e:	d036      	beq.n	8002a8e <HAL_RCC_OscConfig+0x42a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSI48(RCC_OscInitStruct->HSI48State));

    /* Check the HSI48 State */
    if ((RCC_OscInitStruct->HSI48State) != RCC_HSI48_OFF)
 8002a20:	687b      	ldr	r3, [r7, #4]
 8002a22:	699b      	ldr	r3, [r3, #24]
 8002a24:	2b00      	cmp	r3, #0
 8002a26:	d019      	beq.n	8002a5c <HAL_RCC_OscConfig+0x3f8>
    {
      /* Enable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_ENABLE();
 8002a28:	4b37      	ldr	r3, [pc, #220]	; (8002b08 <HAL_RCC_OscConfig+0x4a4>)
 8002a2a:	681b      	ldr	r3, [r3, #0]
 8002a2c:	4a36      	ldr	r2, [pc, #216]	; (8002b08 <HAL_RCC_OscConfig+0x4a4>)
 8002a2e:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 8002a32:	6013      	str	r3, [r2, #0]

      /* Get time-out */
      tickstart = HAL_GetTick();
 8002a34:	f7fe fef2 	bl	800181c <HAL_GetTick>
 8002a38:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till HSI48 is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) == 0U)
 8002a3a:	e008      	b.n	8002a4e <HAL_RCC_OscConfig+0x3ea>
      {
        if ((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 8002a3c:	f7fe feee 	bl	800181c <HAL_GetTick>
 8002a40:	4602      	mov	r2, r0
 8002a42:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002a44:	1ad3      	subs	r3, r2, r3
 8002a46:	2b02      	cmp	r3, #2
 8002a48:	d901      	bls.n	8002a4e <HAL_RCC_OscConfig+0x3ea>
        {
          return HAL_TIMEOUT;
 8002a4a:	2303      	movs	r3, #3
 8002a4c:	e1dc      	b.n	8002e08 <HAL_RCC_OscConfig+0x7a4>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) == 0U)
 8002a4e:	4b2e      	ldr	r3, [pc, #184]	; (8002b08 <HAL_RCC_OscConfig+0x4a4>)
 8002a50:	681b      	ldr	r3, [r3, #0]
 8002a52:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8002a56:	2b00      	cmp	r3, #0
 8002a58:	d0f0      	beq.n	8002a3c <HAL_RCC_OscConfig+0x3d8>
 8002a5a:	e018      	b.n	8002a8e <HAL_RCC_OscConfig+0x42a>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_DISABLE();
 8002a5c:	4b2a      	ldr	r3, [pc, #168]	; (8002b08 <HAL_RCC_OscConfig+0x4a4>)
 8002a5e:	681b      	ldr	r3, [r3, #0]
 8002a60:	4a29      	ldr	r2, [pc, #164]	; (8002b08 <HAL_RCC_OscConfig+0x4a4>)
 8002a62:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8002a66:	6013      	str	r3, [r2, #0]

      /* Get time-out */
      tickstart = HAL_GetTick();
 8002a68:	f7fe fed8 	bl	800181c <HAL_GetTick>
 8002a6c:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till HSI48 is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) != 0U)
 8002a6e:	e008      	b.n	8002a82 <HAL_RCC_OscConfig+0x41e>
      {
        if ((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 8002a70:	f7fe fed4 	bl	800181c <HAL_GetTick>
 8002a74:	4602      	mov	r2, r0
 8002a76:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002a78:	1ad3      	subs	r3, r2, r3
 8002a7a:	2b02      	cmp	r3, #2
 8002a7c:	d901      	bls.n	8002a82 <HAL_RCC_OscConfig+0x41e>
        {
          return HAL_TIMEOUT;
 8002a7e:	2303      	movs	r3, #3
 8002a80:	e1c2      	b.n	8002e08 <HAL_RCC_OscConfig+0x7a4>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) != 0U)
 8002a82:	4b21      	ldr	r3, [pc, #132]	; (8002b08 <HAL_RCC_OscConfig+0x4a4>)
 8002a84:	681b      	ldr	r3, [r3, #0]
 8002a86:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8002a8a:	2b00      	cmp	r3, #0
 8002a8c:	d1f0      	bne.n	8002a70 <HAL_RCC_OscConfig+0x40c>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8002a8e:	687b      	ldr	r3, [r7, #4]
 8002a90:	681b      	ldr	r3, [r3, #0]
 8002a92:	f003 0304 	and.w	r3, r3, #4
 8002a96:	2b00      	cmp	r3, #0
 8002a98:	f000 8086 	beq.w	8002ba8 <HAL_RCC_OscConfig+0x544>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Enable write access to Backup domain */
    PWR->CR1 |= PWR_CR1_DBP;
 8002a9c:	4b1b      	ldr	r3, [pc, #108]	; (8002b0c <HAL_RCC_OscConfig+0x4a8>)
 8002a9e:	681b      	ldr	r3, [r3, #0]
 8002aa0:	4a1a      	ldr	r2, [pc, #104]	; (8002b0c <HAL_RCC_OscConfig+0x4a8>)
 8002aa2:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8002aa6:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 8002aa8:	f7fe feb8 	bl	800181c <HAL_GetTick>
 8002aac:	6278      	str	r0, [r7, #36]	; 0x24

    while ((PWR->CR1 & PWR_CR1_DBP) == 0U)
 8002aae:	e008      	b.n	8002ac2 <HAL_RCC_OscConfig+0x45e>
    {
      if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8002ab0:	f7fe feb4 	bl	800181c <HAL_GetTick>
 8002ab4:	4602      	mov	r2, r0
 8002ab6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002ab8:	1ad3      	subs	r3, r2, r3
 8002aba:	2b64      	cmp	r3, #100	; 0x64
 8002abc:	d901      	bls.n	8002ac2 <HAL_RCC_OscConfig+0x45e>
      {
        return HAL_TIMEOUT;
 8002abe:	2303      	movs	r3, #3
 8002ac0:	e1a2      	b.n	8002e08 <HAL_RCC_OscConfig+0x7a4>
    while ((PWR->CR1 & PWR_CR1_DBP) == 0U)
 8002ac2:	4b12      	ldr	r3, [pc, #72]	; (8002b0c <HAL_RCC_OscConfig+0x4a8>)
 8002ac4:	681b      	ldr	r3, [r3, #0]
 8002ac6:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002aca:	2b00      	cmp	r3, #0
 8002acc:	d0f0      	beq.n	8002ab0 <HAL_RCC_OscConfig+0x44c>
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8002ace:	687b      	ldr	r3, [r7, #4]
 8002ad0:	689b      	ldr	r3, [r3, #8]
 8002ad2:	2b01      	cmp	r3, #1
 8002ad4:	d106      	bne.n	8002ae4 <HAL_RCC_OscConfig+0x480>
 8002ad6:	4b0c      	ldr	r3, [pc, #48]	; (8002b08 <HAL_RCC_OscConfig+0x4a4>)
 8002ad8:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002ada:	4a0b      	ldr	r2, [pc, #44]	; (8002b08 <HAL_RCC_OscConfig+0x4a4>)
 8002adc:	f043 0301 	orr.w	r3, r3, #1
 8002ae0:	6713      	str	r3, [r2, #112]	; 0x70
 8002ae2:	e032      	b.n	8002b4a <HAL_RCC_OscConfig+0x4e6>
 8002ae4:	687b      	ldr	r3, [r7, #4]
 8002ae6:	689b      	ldr	r3, [r3, #8]
 8002ae8:	2b00      	cmp	r3, #0
 8002aea:	d111      	bne.n	8002b10 <HAL_RCC_OscConfig+0x4ac>
 8002aec:	4b06      	ldr	r3, [pc, #24]	; (8002b08 <HAL_RCC_OscConfig+0x4a4>)
 8002aee:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002af0:	4a05      	ldr	r2, [pc, #20]	; (8002b08 <HAL_RCC_OscConfig+0x4a4>)
 8002af2:	f023 0301 	bic.w	r3, r3, #1
 8002af6:	6713      	str	r3, [r2, #112]	; 0x70
 8002af8:	4b03      	ldr	r3, [pc, #12]	; (8002b08 <HAL_RCC_OscConfig+0x4a4>)
 8002afa:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002afc:	4a02      	ldr	r2, [pc, #8]	; (8002b08 <HAL_RCC_OscConfig+0x4a4>)
 8002afe:	f023 0304 	bic.w	r3, r3, #4
 8002b02:	6713      	str	r3, [r2, #112]	; 0x70
 8002b04:	e021      	b.n	8002b4a <HAL_RCC_OscConfig+0x4e6>
 8002b06:	bf00      	nop
 8002b08:	58024400 	.word	0x58024400
 8002b0c:	58024800 	.word	0x58024800
 8002b10:	687b      	ldr	r3, [r7, #4]
 8002b12:	689b      	ldr	r3, [r3, #8]
 8002b14:	2b05      	cmp	r3, #5
 8002b16:	d10c      	bne.n	8002b32 <HAL_RCC_OscConfig+0x4ce>
 8002b18:	4b83      	ldr	r3, [pc, #524]	; (8002d28 <HAL_RCC_OscConfig+0x6c4>)
 8002b1a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002b1c:	4a82      	ldr	r2, [pc, #520]	; (8002d28 <HAL_RCC_OscConfig+0x6c4>)
 8002b1e:	f043 0304 	orr.w	r3, r3, #4
 8002b22:	6713      	str	r3, [r2, #112]	; 0x70
 8002b24:	4b80      	ldr	r3, [pc, #512]	; (8002d28 <HAL_RCC_OscConfig+0x6c4>)
 8002b26:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002b28:	4a7f      	ldr	r2, [pc, #508]	; (8002d28 <HAL_RCC_OscConfig+0x6c4>)
 8002b2a:	f043 0301 	orr.w	r3, r3, #1
 8002b2e:	6713      	str	r3, [r2, #112]	; 0x70
 8002b30:	e00b      	b.n	8002b4a <HAL_RCC_OscConfig+0x4e6>
 8002b32:	4b7d      	ldr	r3, [pc, #500]	; (8002d28 <HAL_RCC_OscConfig+0x6c4>)
 8002b34:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002b36:	4a7c      	ldr	r2, [pc, #496]	; (8002d28 <HAL_RCC_OscConfig+0x6c4>)
 8002b38:	f023 0301 	bic.w	r3, r3, #1
 8002b3c:	6713      	str	r3, [r2, #112]	; 0x70
 8002b3e:	4b7a      	ldr	r3, [pc, #488]	; (8002d28 <HAL_RCC_OscConfig+0x6c4>)
 8002b40:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002b42:	4a79      	ldr	r2, [pc, #484]	; (8002d28 <HAL_RCC_OscConfig+0x6c4>)
 8002b44:	f023 0304 	bic.w	r3, r3, #4
 8002b48:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if ((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8002b4a:	687b      	ldr	r3, [r7, #4]
 8002b4c:	689b      	ldr	r3, [r3, #8]
 8002b4e:	2b00      	cmp	r3, #0
 8002b50:	d015      	beq.n	8002b7e <HAL_RCC_OscConfig+0x51a>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002b52:	f7fe fe63 	bl	800181c <HAL_GetTick>
 8002b56:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 8002b58:	e00a      	b.n	8002b70 <HAL_RCC_OscConfig+0x50c>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8002b5a:	f7fe fe5f 	bl	800181c <HAL_GetTick>
 8002b5e:	4602      	mov	r2, r0
 8002b60:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002b62:	1ad3      	subs	r3, r2, r3
 8002b64:	f241 3288 	movw	r2, #5000	; 0x1388
 8002b68:	4293      	cmp	r3, r2
 8002b6a:	d901      	bls.n	8002b70 <HAL_RCC_OscConfig+0x50c>
        {
          return HAL_TIMEOUT;
 8002b6c:	2303      	movs	r3, #3
 8002b6e:	e14b      	b.n	8002e08 <HAL_RCC_OscConfig+0x7a4>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 8002b70:	4b6d      	ldr	r3, [pc, #436]	; (8002d28 <HAL_RCC_OscConfig+0x6c4>)
 8002b72:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002b74:	f003 0302 	and.w	r3, r3, #2
 8002b78:	2b00      	cmp	r3, #0
 8002b7a:	d0ee      	beq.n	8002b5a <HAL_RCC_OscConfig+0x4f6>
 8002b7c:	e014      	b.n	8002ba8 <HAL_RCC_OscConfig+0x544>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002b7e:	f7fe fe4d 	bl	800181c <HAL_GetTick>
 8002b82:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till LSE is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != 0U)
 8002b84:	e00a      	b.n	8002b9c <HAL_RCC_OscConfig+0x538>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8002b86:	f7fe fe49 	bl	800181c <HAL_GetTick>
 8002b8a:	4602      	mov	r2, r0
 8002b8c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002b8e:	1ad3      	subs	r3, r2, r3
 8002b90:	f241 3288 	movw	r2, #5000	; 0x1388
 8002b94:	4293      	cmp	r3, r2
 8002b96:	d901      	bls.n	8002b9c <HAL_RCC_OscConfig+0x538>
        {
          return HAL_TIMEOUT;
 8002b98:	2303      	movs	r3, #3
 8002b9a:	e135      	b.n	8002e08 <HAL_RCC_OscConfig+0x7a4>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != 0U)
 8002b9c:	4b62      	ldr	r3, [pc, #392]	; (8002d28 <HAL_RCC_OscConfig+0x6c4>)
 8002b9e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002ba0:	f003 0302 	and.w	r3, r3, #2
 8002ba4:	2b00      	cmp	r3, #0
 8002ba6:	d1ee      	bne.n	8002b86 <HAL_RCC_OscConfig+0x522>
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8002ba8:	687b      	ldr	r3, [r7, #4]
 8002baa:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002bac:	2b00      	cmp	r3, #0
 8002bae:	f000 812a 	beq.w	8002e06 <HAL_RCC_OscConfig+0x7a2>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL1)
 8002bb2:	4b5d      	ldr	r3, [pc, #372]	; (8002d28 <HAL_RCC_OscConfig+0x6c4>)
 8002bb4:	691b      	ldr	r3, [r3, #16]
 8002bb6:	f003 0338 	and.w	r3, r3, #56	; 0x38
 8002bba:	2b18      	cmp	r3, #24
 8002bbc:	f000 80ba 	beq.w	8002d34 <HAL_RCC_OscConfig+0x6d0>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8002bc0:	687b      	ldr	r3, [r7, #4]
 8002bc2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002bc4:	2b02      	cmp	r3, #2
 8002bc6:	f040 8095 	bne.w	8002cf4 <HAL_RCC_OscConfig+0x690>
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));
        assert_param(IS_RCC_PLLFRACN_VALUE(RCC_OscInitStruct->PLL.PLLFRACN));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8002bca:	4b57      	ldr	r3, [pc, #348]	; (8002d28 <HAL_RCC_OscConfig+0x6c4>)
 8002bcc:	681b      	ldr	r3, [r3, #0]
 8002bce:	4a56      	ldr	r2, [pc, #344]	; (8002d28 <HAL_RCC_OscConfig+0x6c4>)
 8002bd0:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8002bd4:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002bd6:	f7fe fe21 	bl	800181c <HAL_GetTick>
 8002bda:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 8002bdc:	e008      	b.n	8002bf0 <HAL_RCC_OscConfig+0x58c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8002bde:	f7fe fe1d 	bl	800181c <HAL_GetTick>
 8002be2:	4602      	mov	r2, r0
 8002be4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002be6:	1ad3      	subs	r3, r2, r3
 8002be8:	2b02      	cmp	r3, #2
 8002bea:	d901      	bls.n	8002bf0 <HAL_RCC_OscConfig+0x58c>
          {
            return HAL_TIMEOUT;
 8002bec:	2303      	movs	r3, #3
 8002bee:	e10b      	b.n	8002e08 <HAL_RCC_OscConfig+0x7a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 8002bf0:	4b4d      	ldr	r3, [pc, #308]	; (8002d28 <HAL_RCC_OscConfig+0x6c4>)
 8002bf2:	681b      	ldr	r3, [r3, #0]
 8002bf4:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002bf8:	2b00      	cmp	r3, #0
 8002bfa:	d1f0      	bne.n	8002bde <HAL_RCC_OscConfig+0x57a>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8002bfc:	4b4a      	ldr	r3, [pc, #296]	; (8002d28 <HAL_RCC_OscConfig+0x6c4>)
 8002bfe:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8002c00:	4b4a      	ldr	r3, [pc, #296]	; (8002d2c <HAL_RCC_OscConfig+0x6c8>)
 8002c02:	4013      	ands	r3, r2
 8002c04:	687a      	ldr	r2, [r7, #4]
 8002c06:	6a91      	ldr	r1, [r2, #40]	; 0x28
 8002c08:	687a      	ldr	r2, [r7, #4]
 8002c0a:	6ad2      	ldr	r2, [r2, #44]	; 0x2c
 8002c0c:	0112      	lsls	r2, r2, #4
 8002c0e:	430a      	orrs	r2, r1
 8002c10:	4945      	ldr	r1, [pc, #276]	; (8002d28 <HAL_RCC_OscConfig+0x6c4>)
 8002c12:	4313      	orrs	r3, r2
 8002c14:	628b      	str	r3, [r1, #40]	; 0x28
 8002c16:	687b      	ldr	r3, [r7, #4]
 8002c18:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002c1a:	3b01      	subs	r3, #1
 8002c1c:	f3c3 0208 	ubfx	r2, r3, #0, #9
 8002c20:	687b      	ldr	r3, [r7, #4]
 8002c22:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8002c24:	3b01      	subs	r3, #1
 8002c26:	025b      	lsls	r3, r3, #9
 8002c28:	b29b      	uxth	r3, r3
 8002c2a:	431a      	orrs	r2, r3
 8002c2c:	687b      	ldr	r3, [r7, #4]
 8002c2e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002c30:	3b01      	subs	r3, #1
 8002c32:	041b      	lsls	r3, r3, #16
 8002c34:	f403 03fe 	and.w	r3, r3, #8323072	; 0x7f0000
 8002c38:	431a      	orrs	r2, r3
 8002c3a:	687b      	ldr	r3, [r7, #4]
 8002c3c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002c3e:	3b01      	subs	r3, #1
 8002c40:	061b      	lsls	r3, r3, #24
 8002c42:	f003 43fe 	and.w	r3, r3, #2130706432	; 0x7f000000
 8002c46:	4938      	ldr	r1, [pc, #224]	; (8002d28 <HAL_RCC_OscConfig+0x6c4>)
 8002c48:	4313      	orrs	r3, r2
 8002c4a:	630b      	str	r3, [r1, #48]	; 0x30
                             RCC_OscInitStruct->PLL.PLLP,
                             RCC_OscInitStruct->PLL.PLLQ,
                             RCC_OscInitStruct->PLL.PLLR);

        /* Disable PLLFRACN . */
        __HAL_RCC_PLLFRACN_DISABLE();
 8002c4c:	4b36      	ldr	r3, [pc, #216]	; (8002d28 <HAL_RCC_OscConfig+0x6c4>)
 8002c4e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002c50:	4a35      	ldr	r2, [pc, #212]	; (8002d28 <HAL_RCC_OscConfig+0x6c4>)
 8002c52:	f023 0301 	bic.w	r3, r3, #1
 8002c56:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* Configure PLL PLL1FRACN */
        __HAL_RCC_PLLFRACN_CONFIG(RCC_OscInitStruct->PLL.PLLFRACN);
 8002c58:	4b33      	ldr	r3, [pc, #204]	; (8002d28 <HAL_RCC_OscConfig+0x6c4>)
 8002c5a:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8002c5c:	4b34      	ldr	r3, [pc, #208]	; (8002d30 <HAL_RCC_OscConfig+0x6cc>)
 8002c5e:	4013      	ands	r3, r2
 8002c60:	687a      	ldr	r2, [r7, #4]
 8002c62:	6c92      	ldr	r2, [r2, #72]	; 0x48
 8002c64:	00d2      	lsls	r2, r2, #3
 8002c66:	4930      	ldr	r1, [pc, #192]	; (8002d28 <HAL_RCC_OscConfig+0x6c4>)
 8002c68:	4313      	orrs	r3, r2
 8002c6a:	634b      	str	r3, [r1, #52]	; 0x34

        /* Select PLL1 input reference frequency range: VCI */
        __HAL_RCC_PLL_VCIRANGE(RCC_OscInitStruct->PLL.PLLRGE) ;
 8002c6c:	4b2e      	ldr	r3, [pc, #184]	; (8002d28 <HAL_RCC_OscConfig+0x6c4>)
 8002c6e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002c70:	f023 020c 	bic.w	r2, r3, #12
 8002c74:	687b      	ldr	r3, [r7, #4]
 8002c76:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002c78:	492b      	ldr	r1, [pc, #172]	; (8002d28 <HAL_RCC_OscConfig+0x6c4>)
 8002c7a:	4313      	orrs	r3, r2
 8002c7c:	62cb      	str	r3, [r1, #44]	; 0x2c

        /* Select PLL1 output frequency range : VCO */
        __HAL_RCC_PLL_VCORANGE(RCC_OscInitStruct->PLL.PLLVCOSEL) ;
 8002c7e:	4b2a      	ldr	r3, [pc, #168]	; (8002d28 <HAL_RCC_OscConfig+0x6c4>)
 8002c80:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002c82:	f023 0202 	bic.w	r2, r3, #2
 8002c86:	687b      	ldr	r3, [r7, #4]
 8002c88:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002c8a:	4927      	ldr	r1, [pc, #156]	; (8002d28 <HAL_RCC_OscConfig+0x6c4>)
 8002c8c:	4313      	orrs	r3, r2
 8002c8e:	62cb      	str	r3, [r1, #44]	; 0x2c

        /* Enable PLL System Clock output. */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVP);
 8002c90:	4b25      	ldr	r3, [pc, #148]	; (8002d28 <HAL_RCC_OscConfig+0x6c4>)
 8002c92:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002c94:	4a24      	ldr	r2, [pc, #144]	; (8002d28 <HAL_RCC_OscConfig+0x6c4>)
 8002c96:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8002c9a:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* Enable PLL1Q Clock output. */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8002c9c:	4b22      	ldr	r3, [pc, #136]	; (8002d28 <HAL_RCC_OscConfig+0x6c4>)
 8002c9e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002ca0:	4a21      	ldr	r2, [pc, #132]	; (8002d28 <HAL_RCC_OscConfig+0x6c4>)
 8002ca2:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8002ca6:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* Enable PLL1R  Clock output. */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVR);
 8002ca8:	4b1f      	ldr	r3, [pc, #124]	; (8002d28 <HAL_RCC_OscConfig+0x6c4>)
 8002caa:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002cac:	4a1e      	ldr	r2, [pc, #120]	; (8002d28 <HAL_RCC_OscConfig+0x6c4>)
 8002cae:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8002cb2:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* Enable PLL1FRACN . */
        __HAL_RCC_PLLFRACN_ENABLE();
 8002cb4:	4b1c      	ldr	r3, [pc, #112]	; (8002d28 <HAL_RCC_OscConfig+0x6c4>)
 8002cb6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002cb8:	4a1b      	ldr	r2, [pc, #108]	; (8002d28 <HAL_RCC_OscConfig+0x6c4>)
 8002cba:	f043 0301 	orr.w	r3, r3, #1
 8002cbe:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8002cc0:	4b19      	ldr	r3, [pc, #100]	; (8002d28 <HAL_RCC_OscConfig+0x6c4>)
 8002cc2:	681b      	ldr	r3, [r3, #0]
 8002cc4:	4a18      	ldr	r2, [pc, #96]	; (8002d28 <HAL_RCC_OscConfig+0x6c4>)
 8002cc6:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8002cca:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002ccc:	f7fe fda6 	bl	800181c <HAL_GetTick>
 8002cd0:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 8002cd2:	e008      	b.n	8002ce6 <HAL_RCC_OscConfig+0x682>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8002cd4:	f7fe fda2 	bl	800181c <HAL_GetTick>
 8002cd8:	4602      	mov	r2, r0
 8002cda:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002cdc:	1ad3      	subs	r3, r2, r3
 8002cde:	2b02      	cmp	r3, #2
 8002ce0:	d901      	bls.n	8002ce6 <HAL_RCC_OscConfig+0x682>
          {
            return HAL_TIMEOUT;
 8002ce2:	2303      	movs	r3, #3
 8002ce4:	e090      	b.n	8002e08 <HAL_RCC_OscConfig+0x7a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 8002ce6:	4b10      	ldr	r3, [pc, #64]	; (8002d28 <HAL_RCC_OscConfig+0x6c4>)
 8002ce8:	681b      	ldr	r3, [r3, #0]
 8002cea:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002cee:	2b00      	cmp	r3, #0
 8002cf0:	d0f0      	beq.n	8002cd4 <HAL_RCC_OscConfig+0x670>
 8002cf2:	e088      	b.n	8002e06 <HAL_RCC_OscConfig+0x7a2>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8002cf4:	4b0c      	ldr	r3, [pc, #48]	; (8002d28 <HAL_RCC_OscConfig+0x6c4>)
 8002cf6:	681b      	ldr	r3, [r3, #0]
 8002cf8:	4a0b      	ldr	r2, [pc, #44]	; (8002d28 <HAL_RCC_OscConfig+0x6c4>)
 8002cfa:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8002cfe:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002d00:	f7fe fd8c 	bl	800181c <HAL_GetTick>
 8002d04:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 8002d06:	e008      	b.n	8002d1a <HAL_RCC_OscConfig+0x6b6>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8002d08:	f7fe fd88 	bl	800181c <HAL_GetTick>
 8002d0c:	4602      	mov	r2, r0
 8002d0e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002d10:	1ad3      	subs	r3, r2, r3
 8002d12:	2b02      	cmp	r3, #2
 8002d14:	d901      	bls.n	8002d1a <HAL_RCC_OscConfig+0x6b6>
          {
            return HAL_TIMEOUT;
 8002d16:	2303      	movs	r3, #3
 8002d18:	e076      	b.n	8002e08 <HAL_RCC_OscConfig+0x7a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 8002d1a:	4b03      	ldr	r3, [pc, #12]	; (8002d28 <HAL_RCC_OscConfig+0x6c4>)
 8002d1c:	681b      	ldr	r3, [r3, #0]
 8002d1e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002d22:	2b00      	cmp	r3, #0
 8002d24:	d1f0      	bne.n	8002d08 <HAL_RCC_OscConfig+0x6a4>
 8002d26:	e06e      	b.n	8002e06 <HAL_RCC_OscConfig+0x7a2>
 8002d28:	58024400 	.word	0x58024400
 8002d2c:	fffffc0c 	.word	0xfffffc0c
 8002d30:	ffff0007 	.word	0xffff0007
      }
    }
    else
    {
      /* Do not return HAL_ERROR if request repeats the current configuration */
      temp1_pllckcfg = RCC->PLLCKSELR;
 8002d34:	4b36      	ldr	r3, [pc, #216]	; (8002e10 <HAL_RCC_OscConfig+0x7ac>)
 8002d36:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002d38:	613b      	str	r3, [r7, #16]
      temp2_pllckcfg = RCC->PLL1DIVR;
 8002d3a:	4b35      	ldr	r3, [pc, #212]	; (8002e10 <HAL_RCC_OscConfig+0x7ac>)
 8002d3c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002d3e:	60fb      	str	r3, [r7, #12]
      if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8002d40:	687b      	ldr	r3, [r7, #4]
 8002d42:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002d44:	2b01      	cmp	r3, #1
 8002d46:	d031      	beq.n	8002dac <HAL_RCC_OscConfig+0x748>
          (READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8002d48:	693b      	ldr	r3, [r7, #16]
 8002d4a:	f003 0203 	and.w	r2, r3, #3
 8002d4e:	687b      	ldr	r3, [r7, #4]
 8002d50:	6a9b      	ldr	r3, [r3, #40]	; 0x28
      if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8002d52:	429a      	cmp	r2, r3
 8002d54:	d12a      	bne.n	8002dac <HAL_RCC_OscConfig+0x748>
          ((READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_DIVM1) >> RCC_PLLCKSELR_DIVM1_Pos) != RCC_OscInitStruct->PLL.PLLM) ||
 8002d56:	693b      	ldr	r3, [r7, #16]
 8002d58:	091b      	lsrs	r3, r3, #4
 8002d5a:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 8002d5e:	687b      	ldr	r3, [r7, #4]
 8002d60:	6adb      	ldr	r3, [r3, #44]	; 0x2c
          (READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8002d62:	429a      	cmp	r2, r3
 8002d64:	d122      	bne.n	8002dac <HAL_RCC_OscConfig+0x748>
          (READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_N1) != (RCC_OscInitStruct->PLL.PLLN - 1U)) ||
 8002d66:	68fb      	ldr	r3, [r7, #12]
 8002d68:	f3c3 0208 	ubfx	r2, r3, #0, #9
 8002d6c:	687b      	ldr	r3, [r7, #4]
 8002d6e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002d70:	3b01      	subs	r3, #1
          ((READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_DIVM1) >> RCC_PLLCKSELR_DIVM1_Pos) != RCC_OscInitStruct->PLL.PLLM) ||
 8002d72:	429a      	cmp	r2, r3
 8002d74:	d11a      	bne.n	8002dac <HAL_RCC_OscConfig+0x748>
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_P1) >> RCC_PLL1DIVR_P1_Pos) != (RCC_OscInitStruct->PLL.PLLP - 1U)) ||
 8002d76:	68fb      	ldr	r3, [r7, #12]
 8002d78:	0a5b      	lsrs	r3, r3, #9
 8002d7a:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 8002d7e:	687b      	ldr	r3, [r7, #4]
 8002d80:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8002d82:	3b01      	subs	r3, #1
          (READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_N1) != (RCC_OscInitStruct->PLL.PLLN - 1U)) ||
 8002d84:	429a      	cmp	r2, r3
 8002d86:	d111      	bne.n	8002dac <HAL_RCC_OscConfig+0x748>
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_Q1) >> RCC_PLL1DIVR_Q1_Pos) != (RCC_OscInitStruct->PLL.PLLQ - 1U)) ||
 8002d88:	68fb      	ldr	r3, [r7, #12]
 8002d8a:	0c1b      	lsrs	r3, r3, #16
 8002d8c:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 8002d90:	687b      	ldr	r3, [r7, #4]
 8002d92:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002d94:	3b01      	subs	r3, #1
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_P1) >> RCC_PLL1DIVR_P1_Pos) != (RCC_OscInitStruct->PLL.PLLP - 1U)) ||
 8002d96:	429a      	cmp	r2, r3
 8002d98:	d108      	bne.n	8002dac <HAL_RCC_OscConfig+0x748>
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_R1) >> RCC_PLL1DIVR_R1_Pos) != (RCC_OscInitStruct->PLL.PLLR - 1U)))
 8002d9a:	68fb      	ldr	r3, [r7, #12]
 8002d9c:	0e1b      	lsrs	r3, r3, #24
 8002d9e:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 8002da2:	687b      	ldr	r3, [r7, #4]
 8002da4:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002da6:	3b01      	subs	r3, #1
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_Q1) >> RCC_PLL1DIVR_Q1_Pos) != (RCC_OscInitStruct->PLL.PLLQ - 1U)) ||
 8002da8:	429a      	cmp	r2, r3
 8002daa:	d001      	beq.n	8002db0 <HAL_RCC_OscConfig+0x74c>
      {
        return HAL_ERROR;
 8002dac:	2301      	movs	r3, #1
 8002dae:	e02b      	b.n	8002e08 <HAL_RCC_OscConfig+0x7a4>
      }
      else
      {
        /* Check if only fractional part needs to be updated  */
        temp1_pllckcfg = ((RCC->PLL1FRACR & RCC_PLL1FRACR_FRACN1) >> RCC_PLL1FRACR_FRACN1_Pos);
 8002db0:	4b17      	ldr	r3, [pc, #92]	; (8002e10 <HAL_RCC_OscConfig+0x7ac>)
 8002db2:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8002db4:	08db      	lsrs	r3, r3, #3
 8002db6:	f3c3 030c 	ubfx	r3, r3, #0, #13
 8002dba:	613b      	str	r3, [r7, #16]
        if (RCC_OscInitStruct->PLL.PLLFRACN != temp1_pllckcfg)
 8002dbc:	687b      	ldr	r3, [r7, #4]
 8002dbe:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8002dc0:	693a      	ldr	r2, [r7, #16]
 8002dc2:	429a      	cmp	r2, r3
 8002dc4:	d01f      	beq.n	8002e06 <HAL_RCC_OscConfig+0x7a2>
        {
          assert_param(IS_RCC_PLLFRACN_VALUE(RCC_OscInitStruct->PLL.PLLFRACN));
          /* Disable PLL1FRACEN */
          __HAL_RCC_PLLFRACN_DISABLE();
 8002dc6:	4b12      	ldr	r3, [pc, #72]	; (8002e10 <HAL_RCC_OscConfig+0x7ac>)
 8002dc8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002dca:	4a11      	ldr	r2, [pc, #68]	; (8002e10 <HAL_RCC_OscConfig+0x7ac>)
 8002dcc:	f023 0301 	bic.w	r3, r3, #1
 8002dd0:	62d3      	str	r3, [r2, #44]	; 0x2c
          /* Get Start Tick*/
          tickstart = HAL_GetTick();
 8002dd2:	f7fe fd23 	bl	800181c <HAL_GetTick>
 8002dd6:	6278      	str	r0, [r7, #36]	; 0x24
          /* Wait at least 2 CK_REF (PLL input source divided by M) period to make sure next latched value will be taken into account. */
          while ((HAL_GetTick() - tickstart) < PLL_FRAC_TIMEOUT_VALUE)
 8002dd8:	bf00      	nop
 8002dda:	f7fe fd1f 	bl	800181c <HAL_GetTick>
 8002dde:	4602      	mov	r2, r0
 8002de0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002de2:	4293      	cmp	r3, r2
 8002de4:	d0f9      	beq.n	8002dda <HAL_RCC_OscConfig+0x776>
          {
          }
          /* Configure PLL1 PLL1FRACN */
          __HAL_RCC_PLLFRACN_CONFIG(RCC_OscInitStruct->PLL.PLLFRACN);
 8002de6:	4b0a      	ldr	r3, [pc, #40]	; (8002e10 <HAL_RCC_OscConfig+0x7ac>)
 8002de8:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8002dea:	4b0a      	ldr	r3, [pc, #40]	; (8002e14 <HAL_RCC_OscConfig+0x7b0>)
 8002dec:	4013      	ands	r3, r2
 8002dee:	687a      	ldr	r2, [r7, #4]
 8002df0:	6c92      	ldr	r2, [r2, #72]	; 0x48
 8002df2:	00d2      	lsls	r2, r2, #3
 8002df4:	4906      	ldr	r1, [pc, #24]	; (8002e10 <HAL_RCC_OscConfig+0x7ac>)
 8002df6:	4313      	orrs	r3, r2
 8002df8:	634b      	str	r3, [r1, #52]	; 0x34
          /* Enable PLL1FRACEN to latch new value. */
          __HAL_RCC_PLLFRACN_ENABLE();
 8002dfa:	4b05      	ldr	r3, [pc, #20]	; (8002e10 <HAL_RCC_OscConfig+0x7ac>)
 8002dfc:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002dfe:	4a04      	ldr	r2, [pc, #16]	; (8002e10 <HAL_RCC_OscConfig+0x7ac>)
 8002e00:	f043 0301 	orr.w	r3, r3, #1
 8002e04:	62d3      	str	r3, [r2, #44]	; 0x2c
        }
      }
    }
  }
  return HAL_OK;
 8002e06:	2300      	movs	r3, #0
}
 8002e08:	4618      	mov	r0, r3
 8002e0a:	3730      	adds	r7, #48	; 0x30
 8002e0c:	46bd      	mov	sp, r7
 8002e0e:	bd80      	pop	{r7, pc}
 8002e10:	58024400 	.word	0x58024400
 8002e14:	ffff0007 	.word	0xffff0007

08002e18 <HAL_RCC_ClockConfig>:
  *         D1CPRE[3:0] bits to ensure that  Domain1 core clock not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8002e18:	b580      	push	{r7, lr}
 8002e1a:	b086      	sub	sp, #24
 8002e1c:	af00      	add	r7, sp, #0
 8002e1e:	6078      	str	r0, [r7, #4]
 8002e20:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef halstatus;
  uint32_t tickstart;
  uint32_t common_system_clock;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 8002e22:	687b      	ldr	r3, [r7, #4]
 8002e24:	2b00      	cmp	r3, #0
 8002e26:	d101      	bne.n	8002e2c <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8002e28:	2301      	movs	r3, #1
 8002e2a:	e19c      	b.n	8003166 <HAL_RCC_ClockConfig+0x34e>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8002e2c:	4b8a      	ldr	r3, [pc, #552]	; (8003058 <HAL_RCC_ClockConfig+0x240>)
 8002e2e:	681b      	ldr	r3, [r3, #0]
 8002e30:	f003 030f 	and.w	r3, r3, #15
 8002e34:	683a      	ldr	r2, [r7, #0]
 8002e36:	429a      	cmp	r2, r3
 8002e38:	d910      	bls.n	8002e5c <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8002e3a:	4b87      	ldr	r3, [pc, #540]	; (8003058 <HAL_RCC_ClockConfig+0x240>)
 8002e3c:	681b      	ldr	r3, [r3, #0]
 8002e3e:	f023 020f 	bic.w	r2, r3, #15
 8002e42:	4985      	ldr	r1, [pc, #532]	; (8003058 <HAL_RCC_ClockConfig+0x240>)
 8002e44:	683b      	ldr	r3, [r7, #0]
 8002e46:	4313      	orrs	r3, r2
 8002e48:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8002e4a:	4b83      	ldr	r3, [pc, #524]	; (8003058 <HAL_RCC_ClockConfig+0x240>)
 8002e4c:	681b      	ldr	r3, [r3, #0]
 8002e4e:	f003 030f 	and.w	r3, r3, #15
 8002e52:	683a      	ldr	r2, [r7, #0]
 8002e54:	429a      	cmp	r2, r3
 8002e56:	d001      	beq.n	8002e5c <HAL_RCC_ClockConfig+0x44>
    {
      return HAL_ERROR;
 8002e58:	2301      	movs	r3, #1
 8002e5a:	e184      	b.n	8003166 <HAL_RCC_ClockConfig+0x34e>

  }

  /* Increasing the BUS frequency divider */
  /*-------------------------- D1PCLK1/CDPCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D1PCLK1) == RCC_CLOCKTYPE_D1PCLK1)
 8002e5c:	687b      	ldr	r3, [r7, #4]
 8002e5e:	681b      	ldr	r3, [r3, #0]
 8002e60:	f003 0304 	and.w	r3, r3, #4
 8002e64:	2b00      	cmp	r3, #0
 8002e66:	d010      	beq.n	8002e8a <HAL_RCC_ClockConfig+0x72>
  {
#if defined (RCC_D1CFGR_D1PPRE)
    if ((RCC_ClkInitStruct->APB3CLKDivider) > (RCC->D1CFGR & RCC_D1CFGR_D1PPRE))
 8002e68:	687b      	ldr	r3, [r7, #4]
 8002e6a:	691a      	ldr	r2, [r3, #16]
 8002e6c:	4b7b      	ldr	r3, [pc, #492]	; (800305c <HAL_RCC_ClockConfig+0x244>)
 8002e6e:	699b      	ldr	r3, [r3, #24]
 8002e70:	f003 0370 	and.w	r3, r3, #112	; 0x70
 8002e74:	429a      	cmp	r2, r3
 8002e76:	d908      	bls.n	8002e8a <HAL_RCC_ClockConfig+0x72>
    {
      assert_param(IS_RCC_D1PCLK1(RCC_ClkInitStruct->APB3CLKDivider));
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_D1PPRE, RCC_ClkInitStruct->APB3CLKDivider);
 8002e78:	4b78      	ldr	r3, [pc, #480]	; (800305c <HAL_RCC_ClockConfig+0x244>)
 8002e7a:	699b      	ldr	r3, [r3, #24]
 8002e7c:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 8002e80:	687b      	ldr	r3, [r7, #4]
 8002e82:	691b      	ldr	r3, [r3, #16]
 8002e84:	4975      	ldr	r1, [pc, #468]	; (800305c <HAL_RCC_ClockConfig+0x244>)
 8002e86:	4313      	orrs	r3, r2
 8002e88:	618b      	str	r3, [r1, #24]
    }
#endif
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8002e8a:	687b      	ldr	r3, [r7, #4]
 8002e8c:	681b      	ldr	r3, [r3, #0]
 8002e8e:	f003 0308 	and.w	r3, r3, #8
 8002e92:	2b00      	cmp	r3, #0
 8002e94:	d010      	beq.n	8002eb8 <HAL_RCC_ClockConfig+0xa0>
  {
#if defined (RCC_D2CFGR_D2PPRE1)
    if ((RCC_ClkInitStruct->APB1CLKDivider) > (RCC->D2CFGR & RCC_D2CFGR_D2PPRE1))
 8002e96:	687b      	ldr	r3, [r7, #4]
 8002e98:	695a      	ldr	r2, [r3, #20]
 8002e9a:	4b70      	ldr	r3, [pc, #448]	; (800305c <HAL_RCC_ClockConfig+0x244>)
 8002e9c:	69db      	ldr	r3, [r3, #28]
 8002e9e:	f003 0370 	and.w	r3, r3, #112	; 0x70
 8002ea2:	429a      	cmp	r2, r3
 8002ea4:	d908      	bls.n	8002eb8 <HAL_RCC_ClockConfig+0xa0>
    {
      assert_param(IS_RCC_PCLK1(RCC_ClkInitStruct->APB1CLKDivider));
      MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE1, (RCC_ClkInitStruct->APB1CLKDivider));
 8002ea6:	4b6d      	ldr	r3, [pc, #436]	; (800305c <HAL_RCC_ClockConfig+0x244>)
 8002ea8:	69db      	ldr	r3, [r3, #28]
 8002eaa:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 8002eae:	687b      	ldr	r3, [r7, #4]
 8002eb0:	695b      	ldr	r3, [r3, #20]
 8002eb2:	496a      	ldr	r1, [pc, #424]	; (800305c <HAL_RCC_ClockConfig+0x244>)
 8002eb4:	4313      	orrs	r3, r2
 8002eb6:	61cb      	str	r3, [r1, #28]
      MODIFY_REG(RCC->CDCFGR2, RCC_CDCFGR2_CDPPRE1, (RCC_ClkInitStruct->APB1CLKDivider));
    }
#endif
  }
  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8002eb8:	687b      	ldr	r3, [r7, #4]
 8002eba:	681b      	ldr	r3, [r3, #0]
 8002ebc:	f003 0310 	and.w	r3, r3, #16
 8002ec0:	2b00      	cmp	r3, #0
 8002ec2:	d010      	beq.n	8002ee6 <HAL_RCC_ClockConfig+0xce>
  {
#if defined(RCC_D2CFGR_D2PPRE2)
    if ((RCC_ClkInitStruct->APB2CLKDivider) > (RCC->D2CFGR & RCC_D2CFGR_D2PPRE2))
 8002ec4:	687b      	ldr	r3, [r7, #4]
 8002ec6:	699a      	ldr	r2, [r3, #24]
 8002ec8:	4b64      	ldr	r3, [pc, #400]	; (800305c <HAL_RCC_ClockConfig+0x244>)
 8002eca:	69db      	ldr	r3, [r3, #28]
 8002ecc:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 8002ed0:	429a      	cmp	r2, r3
 8002ed2:	d908      	bls.n	8002ee6 <HAL_RCC_ClockConfig+0xce>
    {
      assert_param(IS_RCC_PCLK2(RCC_ClkInitStruct->APB2CLKDivider));
      MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE2, (RCC_ClkInitStruct->APB2CLKDivider));
 8002ed4:	4b61      	ldr	r3, [pc, #388]	; (800305c <HAL_RCC_ClockConfig+0x244>)
 8002ed6:	69db      	ldr	r3, [r3, #28]
 8002ed8:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 8002edc:	687b      	ldr	r3, [r7, #4]
 8002ede:	699b      	ldr	r3, [r3, #24]
 8002ee0:	495e      	ldr	r1, [pc, #376]	; (800305c <HAL_RCC_ClockConfig+0x244>)
 8002ee2:	4313      	orrs	r3, r2
 8002ee4:	61cb      	str	r3, [r1, #28]
    }
#endif
  }

  /*-------------------------- D3PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D3PCLK1) == RCC_CLOCKTYPE_D3PCLK1)
 8002ee6:	687b      	ldr	r3, [r7, #4]
 8002ee8:	681b      	ldr	r3, [r3, #0]
 8002eea:	f003 0320 	and.w	r3, r3, #32
 8002eee:	2b00      	cmp	r3, #0
 8002ef0:	d010      	beq.n	8002f14 <HAL_RCC_ClockConfig+0xfc>
  {
#if defined(RCC_D3CFGR_D3PPRE)
    if ((RCC_ClkInitStruct->APB4CLKDivider) > (RCC->D3CFGR & RCC_D3CFGR_D3PPRE))
 8002ef2:	687b      	ldr	r3, [r7, #4]
 8002ef4:	69da      	ldr	r2, [r3, #28]
 8002ef6:	4b59      	ldr	r3, [pc, #356]	; (800305c <HAL_RCC_ClockConfig+0x244>)
 8002ef8:	6a1b      	ldr	r3, [r3, #32]
 8002efa:	f003 0370 	and.w	r3, r3, #112	; 0x70
 8002efe:	429a      	cmp	r2, r3
 8002f00:	d908      	bls.n	8002f14 <HAL_RCC_ClockConfig+0xfc>
    {
      assert_param(IS_RCC_D3PCLK1(RCC_ClkInitStruct->APB4CLKDivider));
      MODIFY_REG(RCC->D3CFGR, RCC_D3CFGR_D3PPRE, (RCC_ClkInitStruct->APB4CLKDivider));
 8002f02:	4b56      	ldr	r3, [pc, #344]	; (800305c <HAL_RCC_ClockConfig+0x244>)
 8002f04:	6a1b      	ldr	r3, [r3, #32]
 8002f06:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 8002f0a:	687b      	ldr	r3, [r7, #4]
 8002f0c:	69db      	ldr	r3, [r3, #28]
 8002f0e:	4953      	ldr	r1, [pc, #332]	; (800305c <HAL_RCC_ClockConfig+0x244>)
 8002f10:	4313      	orrs	r3, r2
 8002f12:	620b      	str	r3, [r1, #32]
    }
#endif
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8002f14:	687b      	ldr	r3, [r7, #4]
 8002f16:	681b      	ldr	r3, [r3, #0]
 8002f18:	f003 0302 	and.w	r3, r3, #2
 8002f1c:	2b00      	cmp	r3, #0
 8002f1e:	d010      	beq.n	8002f42 <HAL_RCC_ClockConfig+0x12a>
  {
#if defined (RCC_D1CFGR_HPRE)
    if ((RCC_ClkInitStruct->AHBCLKDivider) > (RCC->D1CFGR & RCC_D1CFGR_HPRE))
 8002f20:	687b      	ldr	r3, [r7, #4]
 8002f22:	68da      	ldr	r2, [r3, #12]
 8002f24:	4b4d      	ldr	r3, [pc, #308]	; (800305c <HAL_RCC_ClockConfig+0x244>)
 8002f26:	699b      	ldr	r3, [r3, #24]
 8002f28:	f003 030f 	and.w	r3, r3, #15
 8002f2c:	429a      	cmp	r2, r3
 8002f2e:	d908      	bls.n	8002f42 <HAL_RCC_ClockConfig+0x12a>
    {
      /* Set the new HCLK clock divider */
      assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8002f30:	4b4a      	ldr	r3, [pc, #296]	; (800305c <HAL_RCC_ClockConfig+0x244>)
 8002f32:	699b      	ldr	r3, [r3, #24]
 8002f34:	f023 020f 	bic.w	r2, r3, #15
 8002f38:	687b      	ldr	r3, [r7, #4]
 8002f3a:	68db      	ldr	r3, [r3, #12]
 8002f3c:	4947      	ldr	r1, [pc, #284]	; (800305c <HAL_RCC_ClockConfig+0x244>)
 8002f3e:	4313      	orrs	r3, r2
 8002f40:	618b      	str	r3, [r1, #24]
    }
#endif
  }

  /*------------------------- SYSCLK Configuration -------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8002f42:	687b      	ldr	r3, [r7, #4]
 8002f44:	681b      	ldr	r3, [r3, #0]
 8002f46:	f003 0301 	and.w	r3, r3, #1
 8002f4a:	2b00      	cmp	r3, #0
 8002f4c:	d055      	beq.n	8002ffa <HAL_RCC_ClockConfig+0x1e2>
  {
    assert_param(IS_RCC_SYSCLK(RCC_ClkInitStruct->SYSCLKDivider));
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));
#if defined(RCC_D1CFGR_D1CPRE)
    MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_D1CPRE, RCC_ClkInitStruct->SYSCLKDivider);
 8002f4e:	4b43      	ldr	r3, [pc, #268]	; (800305c <HAL_RCC_ClockConfig+0x244>)
 8002f50:	699b      	ldr	r3, [r3, #24]
 8002f52:	f423 6270 	bic.w	r2, r3, #3840	; 0xf00
 8002f56:	687b      	ldr	r3, [r7, #4]
 8002f58:	689b      	ldr	r3, [r3, #8]
 8002f5a:	4940      	ldr	r1, [pc, #256]	; (800305c <HAL_RCC_ClockConfig+0x244>)
 8002f5c:	4313      	orrs	r3, r2
 8002f5e:	618b      	str	r3, [r1, #24]
#else
    MODIFY_REG(RCC->CDCFGR1, RCC_CDCFGR1_CDCPRE, RCC_ClkInitStruct->SYSCLKDivider);
#endif
    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8002f60:	687b      	ldr	r3, [r7, #4]
 8002f62:	685b      	ldr	r3, [r3, #4]
 8002f64:	2b02      	cmp	r3, #2
 8002f66:	d107      	bne.n	8002f78 <HAL_RCC_ClockConfig+0x160>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 8002f68:	4b3c      	ldr	r3, [pc, #240]	; (800305c <HAL_RCC_ClockConfig+0x244>)
 8002f6a:	681b      	ldr	r3, [r3, #0]
 8002f6c:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002f70:	2b00      	cmp	r3, #0
 8002f72:	d121      	bne.n	8002fb8 <HAL_RCC_ClockConfig+0x1a0>
      {
        return HAL_ERROR;
 8002f74:	2301      	movs	r3, #1
 8002f76:	e0f6      	b.n	8003166 <HAL_RCC_ClockConfig+0x34e>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8002f78:	687b      	ldr	r3, [r7, #4]
 8002f7a:	685b      	ldr	r3, [r3, #4]
 8002f7c:	2b03      	cmp	r3, #3
 8002f7e:	d107      	bne.n	8002f90 <HAL_RCC_ClockConfig+0x178>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 8002f80:	4b36      	ldr	r3, [pc, #216]	; (800305c <HAL_RCC_ClockConfig+0x244>)
 8002f82:	681b      	ldr	r3, [r3, #0]
 8002f84:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002f88:	2b00      	cmp	r3, #0
 8002f8a:	d115      	bne.n	8002fb8 <HAL_RCC_ClockConfig+0x1a0>
      {
        return HAL_ERROR;
 8002f8c:	2301      	movs	r3, #1
 8002f8e:	e0ea      	b.n	8003166 <HAL_RCC_ClockConfig+0x34e>
      }
    }
    /* CSI is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_CSI)
 8002f90:	687b      	ldr	r3, [r7, #4]
 8002f92:	685b      	ldr	r3, [r3, #4]
 8002f94:	2b01      	cmp	r3, #1
 8002f96:	d107      	bne.n	8002fa8 <HAL_RCC_ClockConfig+0x190>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) == 0U)
 8002f98:	4b30      	ldr	r3, [pc, #192]	; (800305c <HAL_RCC_ClockConfig+0x244>)
 8002f9a:	681b      	ldr	r3, [r3, #0]
 8002f9c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002fa0:	2b00      	cmp	r3, #0
 8002fa2:	d109      	bne.n	8002fb8 <HAL_RCC_ClockConfig+0x1a0>
      {
        return HAL_ERROR;
 8002fa4:	2301      	movs	r3, #1
 8002fa6:	e0de      	b.n	8003166 <HAL_RCC_ClockConfig+0x34e>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 8002fa8:	4b2c      	ldr	r3, [pc, #176]	; (800305c <HAL_RCC_ClockConfig+0x244>)
 8002faa:	681b      	ldr	r3, [r3, #0]
 8002fac:	f003 0304 	and.w	r3, r3, #4
 8002fb0:	2b00      	cmp	r3, #0
 8002fb2:	d101      	bne.n	8002fb8 <HAL_RCC_ClockConfig+0x1a0>
      {
        return HAL_ERROR;
 8002fb4:	2301      	movs	r3, #1
 8002fb6:	e0d6      	b.n	8003166 <HAL_RCC_ClockConfig+0x34e>
      }
    }
    MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 8002fb8:	4b28      	ldr	r3, [pc, #160]	; (800305c <HAL_RCC_ClockConfig+0x244>)
 8002fba:	691b      	ldr	r3, [r3, #16]
 8002fbc:	f023 0207 	bic.w	r2, r3, #7
 8002fc0:	687b      	ldr	r3, [r7, #4]
 8002fc2:	685b      	ldr	r3, [r3, #4]
 8002fc4:	4925      	ldr	r1, [pc, #148]	; (800305c <HAL_RCC_ClockConfig+0x244>)
 8002fc6:	4313      	orrs	r3, r2
 8002fc8:	610b      	str	r3, [r1, #16]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8002fca:	f7fe fc27 	bl	800181c <HAL_GetTick>
 8002fce:	6178      	str	r0, [r7, #20]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8002fd0:	e00a      	b.n	8002fe8 <HAL_RCC_ClockConfig+0x1d0>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8002fd2:	f7fe fc23 	bl	800181c <HAL_GetTick>
 8002fd6:	4602      	mov	r2, r0
 8002fd8:	697b      	ldr	r3, [r7, #20]
 8002fda:	1ad3      	subs	r3, r2, r3
 8002fdc:	f241 3288 	movw	r2, #5000	; 0x1388
 8002fe0:	4293      	cmp	r3, r2
 8002fe2:	d901      	bls.n	8002fe8 <HAL_RCC_ClockConfig+0x1d0>
      {
        return HAL_TIMEOUT;
 8002fe4:	2303      	movs	r3, #3
 8002fe6:	e0be      	b.n	8003166 <HAL_RCC_ClockConfig+0x34e>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8002fe8:	4b1c      	ldr	r3, [pc, #112]	; (800305c <HAL_RCC_ClockConfig+0x244>)
 8002fea:	691b      	ldr	r3, [r3, #16]
 8002fec:	f003 0238 	and.w	r2, r3, #56	; 0x38
 8002ff0:	687b      	ldr	r3, [r7, #4]
 8002ff2:	685b      	ldr	r3, [r3, #4]
 8002ff4:	00db      	lsls	r3, r3, #3
 8002ff6:	429a      	cmp	r2, r3
 8002ff8:	d1eb      	bne.n	8002fd2 <HAL_RCC_ClockConfig+0x1ba>

  }

  /* Decreasing the BUS frequency divider */
  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8002ffa:	687b      	ldr	r3, [r7, #4]
 8002ffc:	681b      	ldr	r3, [r3, #0]
 8002ffe:	f003 0302 	and.w	r3, r3, #2
 8003002:	2b00      	cmp	r3, #0
 8003004:	d010      	beq.n	8003028 <HAL_RCC_ClockConfig+0x210>
  {
#if defined(RCC_D1CFGR_HPRE)
    if ((RCC_ClkInitStruct->AHBCLKDivider) < (RCC->D1CFGR & RCC_D1CFGR_HPRE))
 8003006:	687b      	ldr	r3, [r7, #4]
 8003008:	68da      	ldr	r2, [r3, #12]
 800300a:	4b14      	ldr	r3, [pc, #80]	; (800305c <HAL_RCC_ClockConfig+0x244>)
 800300c:	699b      	ldr	r3, [r3, #24]
 800300e:	f003 030f 	and.w	r3, r3, #15
 8003012:	429a      	cmp	r2, r3
 8003014:	d208      	bcs.n	8003028 <HAL_RCC_ClockConfig+0x210>
    {
      /* Set the new HCLK clock divider */
      assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8003016:	4b11      	ldr	r3, [pc, #68]	; (800305c <HAL_RCC_ClockConfig+0x244>)
 8003018:	699b      	ldr	r3, [r3, #24]
 800301a:	f023 020f 	bic.w	r2, r3, #15
 800301e:	687b      	ldr	r3, [r7, #4]
 8003020:	68db      	ldr	r3, [r3, #12]
 8003022:	490e      	ldr	r1, [pc, #56]	; (800305c <HAL_RCC_ClockConfig+0x244>)
 8003024:	4313      	orrs	r3, r2
 8003026:	618b      	str	r3, [r1, #24]
    }
#endif
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8003028:	4b0b      	ldr	r3, [pc, #44]	; (8003058 <HAL_RCC_ClockConfig+0x240>)
 800302a:	681b      	ldr	r3, [r3, #0]
 800302c:	f003 030f 	and.w	r3, r3, #15
 8003030:	683a      	ldr	r2, [r7, #0]
 8003032:	429a      	cmp	r2, r3
 8003034:	d214      	bcs.n	8003060 <HAL_RCC_ClockConfig+0x248>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8003036:	4b08      	ldr	r3, [pc, #32]	; (8003058 <HAL_RCC_ClockConfig+0x240>)
 8003038:	681b      	ldr	r3, [r3, #0]
 800303a:	f023 020f 	bic.w	r2, r3, #15
 800303e:	4906      	ldr	r1, [pc, #24]	; (8003058 <HAL_RCC_ClockConfig+0x240>)
 8003040:	683b      	ldr	r3, [r7, #0]
 8003042:	4313      	orrs	r3, r2
 8003044:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8003046:	4b04      	ldr	r3, [pc, #16]	; (8003058 <HAL_RCC_ClockConfig+0x240>)
 8003048:	681b      	ldr	r3, [r3, #0]
 800304a:	f003 030f 	and.w	r3, r3, #15
 800304e:	683a      	ldr	r2, [r7, #0]
 8003050:	429a      	cmp	r2, r3
 8003052:	d005      	beq.n	8003060 <HAL_RCC_ClockConfig+0x248>
    {
      return HAL_ERROR;
 8003054:	2301      	movs	r3, #1
 8003056:	e086      	b.n	8003166 <HAL_RCC_ClockConfig+0x34e>
 8003058:	52002000 	.word	0x52002000
 800305c:	58024400 	.word	0x58024400
    }
  }

  /*-------------------------- D1PCLK1/CDPCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D1PCLK1) == RCC_CLOCKTYPE_D1PCLK1)
 8003060:	687b      	ldr	r3, [r7, #4]
 8003062:	681b      	ldr	r3, [r3, #0]
 8003064:	f003 0304 	and.w	r3, r3, #4
 8003068:	2b00      	cmp	r3, #0
 800306a:	d010      	beq.n	800308e <HAL_RCC_ClockConfig+0x276>
  {
#if defined(RCC_D1CFGR_D1PPRE)
    if ((RCC_ClkInitStruct->APB3CLKDivider) < (RCC->D1CFGR & RCC_D1CFGR_D1PPRE))
 800306c:	687b      	ldr	r3, [r7, #4]
 800306e:	691a      	ldr	r2, [r3, #16]
 8003070:	4b3f      	ldr	r3, [pc, #252]	; (8003170 <HAL_RCC_ClockConfig+0x358>)
 8003072:	699b      	ldr	r3, [r3, #24]
 8003074:	f003 0370 	and.w	r3, r3, #112	; 0x70
 8003078:	429a      	cmp	r2, r3
 800307a:	d208      	bcs.n	800308e <HAL_RCC_ClockConfig+0x276>
    {
      assert_param(IS_RCC_D1PCLK1(RCC_ClkInitStruct->APB3CLKDivider));
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_D1PPRE, RCC_ClkInitStruct->APB3CLKDivider);
 800307c:	4b3c      	ldr	r3, [pc, #240]	; (8003170 <HAL_RCC_ClockConfig+0x358>)
 800307e:	699b      	ldr	r3, [r3, #24]
 8003080:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 8003084:	687b      	ldr	r3, [r7, #4]
 8003086:	691b      	ldr	r3, [r3, #16]
 8003088:	4939      	ldr	r1, [pc, #228]	; (8003170 <HAL_RCC_ClockConfig+0x358>)
 800308a:	4313      	orrs	r3, r2
 800308c:	618b      	str	r3, [r1, #24]
    }
#endif
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 800308e:	687b      	ldr	r3, [r7, #4]
 8003090:	681b      	ldr	r3, [r3, #0]
 8003092:	f003 0308 	and.w	r3, r3, #8
 8003096:	2b00      	cmp	r3, #0
 8003098:	d010      	beq.n	80030bc <HAL_RCC_ClockConfig+0x2a4>
  {
#if defined(RCC_D2CFGR_D2PPRE1)
    if ((RCC_ClkInitStruct->APB1CLKDivider) < (RCC->D2CFGR & RCC_D2CFGR_D2PPRE1))
 800309a:	687b      	ldr	r3, [r7, #4]
 800309c:	695a      	ldr	r2, [r3, #20]
 800309e:	4b34      	ldr	r3, [pc, #208]	; (8003170 <HAL_RCC_ClockConfig+0x358>)
 80030a0:	69db      	ldr	r3, [r3, #28]
 80030a2:	f003 0370 	and.w	r3, r3, #112	; 0x70
 80030a6:	429a      	cmp	r2, r3
 80030a8:	d208      	bcs.n	80030bc <HAL_RCC_ClockConfig+0x2a4>
    {
      assert_param(IS_RCC_PCLK1(RCC_ClkInitStruct->APB1CLKDivider));
      MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE1, (RCC_ClkInitStruct->APB1CLKDivider));
 80030aa:	4b31      	ldr	r3, [pc, #196]	; (8003170 <HAL_RCC_ClockConfig+0x358>)
 80030ac:	69db      	ldr	r3, [r3, #28]
 80030ae:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 80030b2:	687b      	ldr	r3, [r7, #4]
 80030b4:	695b      	ldr	r3, [r3, #20]
 80030b6:	492e      	ldr	r1, [pc, #184]	; (8003170 <HAL_RCC_ClockConfig+0x358>)
 80030b8:	4313      	orrs	r3, r2
 80030ba:	61cb      	str	r3, [r1, #28]
    }
#endif
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80030bc:	687b      	ldr	r3, [r7, #4]
 80030be:	681b      	ldr	r3, [r3, #0]
 80030c0:	f003 0310 	and.w	r3, r3, #16
 80030c4:	2b00      	cmp	r3, #0
 80030c6:	d010      	beq.n	80030ea <HAL_RCC_ClockConfig+0x2d2>
  {
#if defined (RCC_D2CFGR_D2PPRE2)
    if ((RCC_ClkInitStruct->APB2CLKDivider) < (RCC->D2CFGR & RCC_D2CFGR_D2PPRE2))
 80030c8:	687b      	ldr	r3, [r7, #4]
 80030ca:	699a      	ldr	r2, [r3, #24]
 80030cc:	4b28      	ldr	r3, [pc, #160]	; (8003170 <HAL_RCC_ClockConfig+0x358>)
 80030ce:	69db      	ldr	r3, [r3, #28]
 80030d0:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 80030d4:	429a      	cmp	r2, r3
 80030d6:	d208      	bcs.n	80030ea <HAL_RCC_ClockConfig+0x2d2>
    {
      assert_param(IS_RCC_PCLK2(RCC_ClkInitStruct->APB2CLKDivider));
      MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE2, (RCC_ClkInitStruct->APB2CLKDivider));
 80030d8:	4b25      	ldr	r3, [pc, #148]	; (8003170 <HAL_RCC_ClockConfig+0x358>)
 80030da:	69db      	ldr	r3, [r3, #28]
 80030dc:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 80030e0:	687b      	ldr	r3, [r7, #4]
 80030e2:	699b      	ldr	r3, [r3, #24]
 80030e4:	4922      	ldr	r1, [pc, #136]	; (8003170 <HAL_RCC_ClockConfig+0x358>)
 80030e6:	4313      	orrs	r3, r2
 80030e8:	61cb      	str	r3, [r1, #28]
    }
#endif
  }

  /*-------------------------- D3PCLK1/SRDPCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D3PCLK1) == RCC_CLOCKTYPE_D3PCLK1)
 80030ea:	687b      	ldr	r3, [r7, #4]
 80030ec:	681b      	ldr	r3, [r3, #0]
 80030ee:	f003 0320 	and.w	r3, r3, #32
 80030f2:	2b00      	cmp	r3, #0
 80030f4:	d010      	beq.n	8003118 <HAL_RCC_ClockConfig+0x300>
  {
#if defined(RCC_D3CFGR_D3PPRE)
    if ((RCC_ClkInitStruct->APB4CLKDivider) < (RCC->D3CFGR & RCC_D3CFGR_D3PPRE))
 80030f6:	687b      	ldr	r3, [r7, #4]
 80030f8:	69da      	ldr	r2, [r3, #28]
 80030fa:	4b1d      	ldr	r3, [pc, #116]	; (8003170 <HAL_RCC_ClockConfig+0x358>)
 80030fc:	6a1b      	ldr	r3, [r3, #32]
 80030fe:	f003 0370 	and.w	r3, r3, #112	; 0x70
 8003102:	429a      	cmp	r2, r3
 8003104:	d208      	bcs.n	8003118 <HAL_RCC_ClockConfig+0x300>
    {
      assert_param(IS_RCC_D3PCLK1(RCC_ClkInitStruct->APB4CLKDivider));
      MODIFY_REG(RCC->D3CFGR, RCC_D3CFGR_D3PPRE, (RCC_ClkInitStruct->APB4CLKDivider));
 8003106:	4b1a      	ldr	r3, [pc, #104]	; (8003170 <HAL_RCC_ClockConfig+0x358>)
 8003108:	6a1b      	ldr	r3, [r3, #32]
 800310a:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 800310e:	687b      	ldr	r3, [r7, #4]
 8003110:	69db      	ldr	r3, [r3, #28]
 8003112:	4917      	ldr	r1, [pc, #92]	; (8003170 <HAL_RCC_ClockConfig+0x358>)
 8003114:	4313      	orrs	r3, r2
 8003116:	620b      	str	r3, [r1, #32]
#endif
  }

  /* Update the SystemCoreClock global variable */
#if defined(RCC_D1CFGR_D1CPRE)
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE) >> RCC_D1CFGR_D1CPRE_Pos]) & 0x1FU);
 8003118:	f000 f834 	bl	8003184 <HAL_RCC_GetSysClockFreq>
 800311c:	4602      	mov	r2, r0
 800311e:	4b14      	ldr	r3, [pc, #80]	; (8003170 <HAL_RCC_ClockConfig+0x358>)
 8003120:	699b      	ldr	r3, [r3, #24]
 8003122:	0a1b      	lsrs	r3, r3, #8
 8003124:	f003 030f 	and.w	r3, r3, #15
 8003128:	4912      	ldr	r1, [pc, #72]	; (8003174 <HAL_RCC_ClockConfig+0x35c>)
 800312a:	5ccb      	ldrb	r3, [r1, r3]
 800312c:	f003 031f 	and.w	r3, r3, #31
 8003130:	fa22 f303 	lsr.w	r3, r2, r3
 8003134:	613b      	str	r3, [r7, #16]
#else
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->CDCFGR1 & RCC_CDCFGR1_CDCPRE) >> RCC_CDCFGR1_CDCPRE_Pos]) & 0x1FU);
#endif

#if defined(RCC_D1CFGR_HPRE)
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE) >> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
 8003136:	4b0e      	ldr	r3, [pc, #56]	; (8003170 <HAL_RCC_ClockConfig+0x358>)
 8003138:	699b      	ldr	r3, [r3, #24]
 800313a:	f003 030f 	and.w	r3, r3, #15
 800313e:	4a0d      	ldr	r2, [pc, #52]	; (8003174 <HAL_RCC_ClockConfig+0x35c>)
 8003140:	5cd3      	ldrb	r3, [r2, r3]
 8003142:	f003 031f 	and.w	r3, r3, #31
 8003146:	693a      	ldr	r2, [r7, #16]
 8003148:	fa22 f303 	lsr.w	r3, r2, r3
 800314c:	4a0a      	ldr	r2, [pc, #40]	; (8003178 <HAL_RCC_ClockConfig+0x360>)
 800314e:	6013      	str	r3, [r2, #0]
#endif

#if defined(DUAL_CORE) && defined(CORE_CM4)
  SystemCoreClock = SystemD2Clock;
#else
  SystemCoreClock = common_system_clock;
 8003150:	4a0a      	ldr	r2, [pc, #40]	; (800317c <HAL_RCC_ClockConfig+0x364>)
 8003152:	693b      	ldr	r3, [r7, #16]
 8003154:	6013      	str	r3, [r2, #0]
#endif /* DUAL_CORE && CORE_CM4 */

  /* Configure the source of time base considering new system clocks settings*/
  halstatus = HAL_InitTick(uwTickPrio);
 8003156:	4b0a      	ldr	r3, [pc, #40]	; (8003180 <HAL_RCC_ClockConfig+0x368>)
 8003158:	681b      	ldr	r3, [r3, #0]
 800315a:	4618      	mov	r0, r3
 800315c:	f7fe fb28 	bl	80017b0 <HAL_InitTick>
 8003160:	4603      	mov	r3, r0
 8003162:	73fb      	strb	r3, [r7, #15]

  return halstatus;
 8003164:	7bfb      	ldrb	r3, [r7, #15]
}
 8003166:	4618      	mov	r0, r3
 8003168:	3718      	adds	r7, #24
 800316a:	46bd      	mov	sp, r7
 800316c:	bd80      	pop	{r7, pc}
 800316e:	bf00      	nop
 8003170:	58024400 	.word	0x58024400
 8003174:	08008b3c 	.word	0x08008b3c
 8003178:	24000004 	.word	0x24000004
 800317c:	24000000 	.word	0x24000000
 8003180:	24000008 	.word	0x24000008

08003184 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8003184:	b480      	push	{r7}
 8003186:	b089      	sub	sp, #36	; 0x24
 8003188:	af00      	add	r7, sp, #0
  float_t fracn1, pllvco;
  uint32_t sysclockfreq;

  /* Get SYSCLK source -------------------------------------------------------*/

  switch (RCC->CFGR & RCC_CFGR_SWS)
 800318a:	4bb3      	ldr	r3, [pc, #716]	; (8003458 <HAL_RCC_GetSysClockFreq+0x2d4>)
 800318c:	691b      	ldr	r3, [r3, #16]
 800318e:	f003 0338 	and.w	r3, r3, #56	; 0x38
 8003192:	2b18      	cmp	r3, #24
 8003194:	f200 8155 	bhi.w	8003442 <HAL_RCC_GetSysClockFreq+0x2be>
 8003198:	a201      	add	r2, pc, #4	; (adr r2, 80031a0 <HAL_RCC_GetSysClockFreq+0x1c>)
 800319a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800319e:	bf00      	nop
 80031a0:	08003205 	.word	0x08003205
 80031a4:	08003443 	.word	0x08003443
 80031a8:	08003443 	.word	0x08003443
 80031ac:	08003443 	.word	0x08003443
 80031b0:	08003443 	.word	0x08003443
 80031b4:	08003443 	.word	0x08003443
 80031b8:	08003443 	.word	0x08003443
 80031bc:	08003443 	.word	0x08003443
 80031c0:	0800322b 	.word	0x0800322b
 80031c4:	08003443 	.word	0x08003443
 80031c8:	08003443 	.word	0x08003443
 80031cc:	08003443 	.word	0x08003443
 80031d0:	08003443 	.word	0x08003443
 80031d4:	08003443 	.word	0x08003443
 80031d8:	08003443 	.word	0x08003443
 80031dc:	08003443 	.word	0x08003443
 80031e0:	08003231 	.word	0x08003231
 80031e4:	08003443 	.word	0x08003443
 80031e8:	08003443 	.word	0x08003443
 80031ec:	08003443 	.word	0x08003443
 80031f0:	08003443 	.word	0x08003443
 80031f4:	08003443 	.word	0x08003443
 80031f8:	08003443 	.word	0x08003443
 80031fc:	08003443 	.word	0x08003443
 8003200:	08003237 	.word	0x08003237
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */

      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8003204:	4b94      	ldr	r3, [pc, #592]	; (8003458 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8003206:	681b      	ldr	r3, [r3, #0]
 8003208:	f003 0320 	and.w	r3, r3, #32
 800320c:	2b00      	cmp	r3, #0
 800320e:	d009      	beq.n	8003224 <HAL_RCC_GetSysClockFreq+0xa0>
      {
        sysclockfreq = (uint32_t)(HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 8003210:	4b91      	ldr	r3, [pc, #580]	; (8003458 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8003212:	681b      	ldr	r3, [r3, #0]
 8003214:	08db      	lsrs	r3, r3, #3
 8003216:	f003 0303 	and.w	r3, r3, #3
 800321a:	4a90      	ldr	r2, [pc, #576]	; (800345c <HAL_RCC_GetSysClockFreq+0x2d8>)
 800321c:	fa22 f303 	lsr.w	r3, r2, r3
 8003220:	61bb      	str	r3, [r7, #24]
      else
      {
        sysclockfreq = (uint32_t) HSI_VALUE;
      }

      break;
 8003222:	e111      	b.n	8003448 <HAL_RCC_GetSysClockFreq+0x2c4>
        sysclockfreq = (uint32_t) HSI_VALUE;
 8003224:	4b8d      	ldr	r3, [pc, #564]	; (800345c <HAL_RCC_GetSysClockFreq+0x2d8>)
 8003226:	61bb      	str	r3, [r7, #24]
      break;
 8003228:	e10e      	b.n	8003448 <HAL_RCC_GetSysClockFreq+0x2c4>

    case RCC_CFGR_SWS_CSI:  /* CSI used as system clock  source */
      sysclockfreq = CSI_VALUE;
 800322a:	4b8d      	ldr	r3, [pc, #564]	; (8003460 <HAL_RCC_GetSysClockFreq+0x2dc>)
 800322c:	61bb      	str	r3, [r7, #24]
      break;
 800322e:	e10b      	b.n	8003448 <HAL_RCC_GetSysClockFreq+0x2c4>

    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
      sysclockfreq = HSE_VALUE;
 8003230:	4b8c      	ldr	r3, [pc, #560]	; (8003464 <HAL_RCC_GetSysClockFreq+0x2e0>)
 8003232:	61bb      	str	r3, [r7, #24]
      break;
 8003234:	e108      	b.n	8003448 <HAL_RCC_GetSysClockFreq+0x2c4>
    case RCC_CFGR_SWS_PLL1:  /* PLL1 used as system clock  source */

      /* PLL_VCO = (HSE_VALUE or HSI_VALUE or CSI_VALUE/ PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLR
      */
      pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 8003236:	4b88      	ldr	r3, [pc, #544]	; (8003458 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8003238:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800323a:	f003 0303 	and.w	r3, r3, #3
 800323e:	617b      	str	r3, [r7, #20]
      pllm = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM1) >> 4)  ;
 8003240:	4b85      	ldr	r3, [pc, #532]	; (8003458 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8003242:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003244:	091b      	lsrs	r3, r3, #4
 8003246:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 800324a:	613b      	str	r3, [r7, #16]
      pllfracen = ((RCC-> PLLCFGR & RCC_PLLCFGR_PLL1FRACEN) >> RCC_PLLCFGR_PLL1FRACEN_Pos);
 800324c:	4b82      	ldr	r3, [pc, #520]	; (8003458 <HAL_RCC_GetSysClockFreq+0x2d4>)
 800324e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003250:	f003 0301 	and.w	r3, r3, #1
 8003254:	60fb      	str	r3, [r7, #12]
      fracn1 = (float_t)(uint32_t)(pllfracen * ((RCC->PLL1FRACR & RCC_PLL1FRACR_FRACN1) >> 3));
 8003256:	4b80      	ldr	r3, [pc, #512]	; (8003458 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8003258:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800325a:	08db      	lsrs	r3, r3, #3
 800325c:	f3c3 030c 	ubfx	r3, r3, #0, #13
 8003260:	68fa      	ldr	r2, [r7, #12]
 8003262:	fb02 f303 	mul.w	r3, r2, r3
 8003266:	ee07 3a90 	vmov	s15, r3
 800326a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800326e:	edc7 7a02 	vstr	s15, [r7, #8]

      if (pllm != 0U)
 8003272:	693b      	ldr	r3, [r7, #16]
 8003274:	2b00      	cmp	r3, #0
 8003276:	f000 80e1 	beq.w	800343c <HAL_RCC_GetSysClockFreq+0x2b8>
 800327a:	697b      	ldr	r3, [r7, #20]
 800327c:	2b02      	cmp	r3, #2
 800327e:	f000 8083 	beq.w	8003388 <HAL_RCC_GetSysClockFreq+0x204>
 8003282:	697b      	ldr	r3, [r7, #20]
 8003284:	2b02      	cmp	r3, #2
 8003286:	f200 80a1 	bhi.w	80033cc <HAL_RCC_GetSysClockFreq+0x248>
 800328a:	697b      	ldr	r3, [r7, #20]
 800328c:	2b00      	cmp	r3, #0
 800328e:	d003      	beq.n	8003298 <HAL_RCC_GetSysClockFreq+0x114>
 8003290:	697b      	ldr	r3, [r7, #20]
 8003292:	2b01      	cmp	r3, #1
 8003294:	d056      	beq.n	8003344 <HAL_RCC_GetSysClockFreq+0x1c0>
 8003296:	e099      	b.n	80033cc <HAL_RCC_GetSysClockFreq+0x248>
      {
        switch (pllsource)
        {
          case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */

            if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8003298:	4b6f      	ldr	r3, [pc, #444]	; (8003458 <HAL_RCC_GetSysClockFreq+0x2d4>)
 800329a:	681b      	ldr	r3, [r3, #0]
 800329c:	f003 0320 	and.w	r3, r3, #32
 80032a0:	2b00      	cmp	r3, #0
 80032a2:	d02d      	beq.n	8003300 <HAL_RCC_GetSysClockFreq+0x17c>
            {
              hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 80032a4:	4b6c      	ldr	r3, [pc, #432]	; (8003458 <HAL_RCC_GetSysClockFreq+0x2d4>)
 80032a6:	681b      	ldr	r3, [r3, #0]
 80032a8:	08db      	lsrs	r3, r3, #3
 80032aa:	f003 0303 	and.w	r3, r3, #3
 80032ae:	4a6b      	ldr	r2, [pc, #428]	; (800345c <HAL_RCC_GetSysClockFreq+0x2d8>)
 80032b0:	fa22 f303 	lsr.w	r3, r2, r3
 80032b4:	607b      	str	r3, [r7, #4]
              pllvco = ((float_t)hsivalue / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 80032b6:	687b      	ldr	r3, [r7, #4]
 80032b8:	ee07 3a90 	vmov	s15, r3
 80032bc:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80032c0:	693b      	ldr	r3, [r7, #16]
 80032c2:	ee07 3a90 	vmov	s15, r3
 80032c6:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80032ca:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 80032ce:	4b62      	ldr	r3, [pc, #392]	; (8003458 <HAL_RCC_GetSysClockFreq+0x2d4>)
 80032d0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80032d2:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80032d6:	ee07 3a90 	vmov	s15, r3
 80032da:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80032de:	ed97 6a02 	vldr	s12, [r7, #8]
 80032e2:	eddf 5a61 	vldr	s11, [pc, #388]	; 8003468 <HAL_RCC_GetSysClockFreq+0x2e4>
 80032e6:	eec6 7a25 	vdiv.f32	s15, s12, s11
 80032ea:	ee76 7aa7 	vadd.f32	s15, s13, s15
 80032ee:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 80032f2:	ee77 7aa6 	vadd.f32	s15, s15, s13
 80032f6:	ee67 7a27 	vmul.f32	s15, s14, s15
 80032fa:	edc7 7a07 	vstr	s15, [r7, #28]
            }
            else
            {
              pllvco = ((float_t)HSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
            }
            break;
 80032fe:	e087      	b.n	8003410 <HAL_RCC_GetSysClockFreq+0x28c>
              pllvco = ((float_t)HSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 8003300:	693b      	ldr	r3, [r7, #16]
 8003302:	ee07 3a90 	vmov	s15, r3
 8003306:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800330a:	eddf 6a58 	vldr	s13, [pc, #352]	; 800346c <HAL_RCC_GetSysClockFreq+0x2e8>
 800330e:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8003312:	4b51      	ldr	r3, [pc, #324]	; (8003458 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8003314:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003316:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800331a:	ee07 3a90 	vmov	s15, r3
 800331e:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8003322:	ed97 6a02 	vldr	s12, [r7, #8]
 8003326:	eddf 5a50 	vldr	s11, [pc, #320]	; 8003468 <HAL_RCC_GetSysClockFreq+0x2e4>
 800332a:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800332e:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8003332:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8003336:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800333a:	ee67 7a27 	vmul.f32	s15, s14, s15
 800333e:	edc7 7a07 	vstr	s15, [r7, #28]
            break;
 8003342:	e065      	b.n	8003410 <HAL_RCC_GetSysClockFreq+0x28c>

          case RCC_PLLSOURCE_CSI:  /* CSI used as PLL clock source */
            pllvco = ((float_t)CSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 8003344:	693b      	ldr	r3, [r7, #16]
 8003346:	ee07 3a90 	vmov	s15, r3
 800334a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800334e:	eddf 6a48 	vldr	s13, [pc, #288]	; 8003470 <HAL_RCC_GetSysClockFreq+0x2ec>
 8003352:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8003356:	4b40      	ldr	r3, [pc, #256]	; (8003458 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8003358:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800335a:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800335e:	ee07 3a90 	vmov	s15, r3
 8003362:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8003366:	ed97 6a02 	vldr	s12, [r7, #8]
 800336a:	eddf 5a3f 	vldr	s11, [pc, #252]	; 8003468 <HAL_RCC_GetSysClockFreq+0x2e4>
 800336e:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8003372:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8003376:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800337a:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800337e:	ee67 7a27 	vmul.f32	s15, s14, s15
 8003382:	edc7 7a07 	vstr	s15, [r7, #28]
            break;
 8003386:	e043      	b.n	8003410 <HAL_RCC_GetSysClockFreq+0x28c>

          case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
            pllvco = ((float_t)HSE_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 8003388:	693b      	ldr	r3, [r7, #16]
 800338a:	ee07 3a90 	vmov	s15, r3
 800338e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8003392:	eddf 6a38 	vldr	s13, [pc, #224]	; 8003474 <HAL_RCC_GetSysClockFreq+0x2f0>
 8003396:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800339a:	4b2f      	ldr	r3, [pc, #188]	; (8003458 <HAL_RCC_GetSysClockFreq+0x2d4>)
 800339c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800339e:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80033a2:	ee07 3a90 	vmov	s15, r3
 80033a6:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80033aa:	ed97 6a02 	vldr	s12, [r7, #8]
 80033ae:	eddf 5a2e 	vldr	s11, [pc, #184]	; 8003468 <HAL_RCC_GetSysClockFreq+0x2e4>
 80033b2:	eec6 7a25 	vdiv.f32	s15, s12, s11
 80033b6:	ee76 7aa7 	vadd.f32	s15, s13, s15
 80033ba:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 80033be:	ee77 7aa6 	vadd.f32	s15, s15, s13
 80033c2:	ee67 7a27 	vmul.f32	s15, s14, s15
 80033c6:	edc7 7a07 	vstr	s15, [r7, #28]
            break;
 80033ca:	e021      	b.n	8003410 <HAL_RCC_GetSysClockFreq+0x28c>

          default:
            pllvco = ((float_t)CSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 80033cc:	693b      	ldr	r3, [r7, #16]
 80033ce:	ee07 3a90 	vmov	s15, r3
 80033d2:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80033d6:	eddf 6a26 	vldr	s13, [pc, #152]	; 8003470 <HAL_RCC_GetSysClockFreq+0x2ec>
 80033da:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 80033de:	4b1e      	ldr	r3, [pc, #120]	; (8003458 <HAL_RCC_GetSysClockFreq+0x2d4>)
 80033e0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80033e2:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80033e6:	ee07 3a90 	vmov	s15, r3
 80033ea:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80033ee:	ed97 6a02 	vldr	s12, [r7, #8]
 80033f2:	eddf 5a1d 	vldr	s11, [pc, #116]	; 8003468 <HAL_RCC_GetSysClockFreq+0x2e4>
 80033f6:	eec6 7a25 	vdiv.f32	s15, s12, s11
 80033fa:	ee76 7aa7 	vadd.f32	s15, s13, s15
 80033fe:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8003402:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8003406:	ee67 7a27 	vmul.f32	s15, s14, s15
 800340a:	edc7 7a07 	vstr	s15, [r7, #28]
            break;
 800340e:	bf00      	nop
        }
        pllp = (((RCC->PLL1DIVR & RCC_PLL1DIVR_P1) >> 9) + 1U) ;
 8003410:	4b11      	ldr	r3, [pc, #68]	; (8003458 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8003412:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003414:	0a5b      	lsrs	r3, r3, #9
 8003416:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800341a:	3301      	adds	r3, #1
 800341c:	603b      	str	r3, [r7, #0]
        sysclockfreq = (uint32_t)(float_t)(pllvco / (float_t)pllp);
 800341e:	683b      	ldr	r3, [r7, #0]
 8003420:	ee07 3a90 	vmov	s15, r3
 8003424:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 8003428:	edd7 6a07 	vldr	s13, [r7, #28]
 800342c:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8003430:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8003434:	ee17 3a90 	vmov	r3, s15
 8003438:	61bb      	str	r3, [r7, #24]
      }
      else
      {
        sysclockfreq = 0U;
      }
      break;
 800343a:	e005      	b.n	8003448 <HAL_RCC_GetSysClockFreq+0x2c4>
        sysclockfreq = 0U;
 800343c:	2300      	movs	r3, #0
 800343e:	61bb      	str	r3, [r7, #24]
      break;
 8003440:	e002      	b.n	8003448 <HAL_RCC_GetSysClockFreq+0x2c4>

    default:
      sysclockfreq = CSI_VALUE;
 8003442:	4b07      	ldr	r3, [pc, #28]	; (8003460 <HAL_RCC_GetSysClockFreq+0x2dc>)
 8003444:	61bb      	str	r3, [r7, #24]
      break;
 8003446:	bf00      	nop
  }

  return sysclockfreq;
 8003448:	69bb      	ldr	r3, [r7, #24]
}
 800344a:	4618      	mov	r0, r3
 800344c:	3724      	adds	r7, #36	; 0x24
 800344e:	46bd      	mov	sp, r7
 8003450:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003454:	4770      	bx	lr
 8003456:	bf00      	nop
 8003458:	58024400 	.word	0x58024400
 800345c:	03d09000 	.word	0x03d09000
 8003460:	003d0900 	.word	0x003d0900
 8003464:	007a1200 	.word	0x007a1200
 8003468:	46000000 	.word	0x46000000
 800346c:	4c742400 	.word	0x4c742400
 8003470:	4a742400 	.word	0x4a742400
 8003474:	4af42400 	.word	0x4af42400

08003478 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemD2Clock CMSIS variable is used to store System domain2 Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8003478:	b580      	push	{r7, lr}
 800347a:	b082      	sub	sp, #8
 800347c:	af00      	add	r7, sp, #0
  uint32_t common_system_clock;

#if defined(RCC_D1CFGR_D1CPRE)
  common_system_clock = HAL_RCC_GetSysClockFreq() >> (D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE) >> RCC_D1CFGR_D1CPRE_Pos] & 0x1FU);
 800347e:	f7ff fe81 	bl	8003184 <HAL_RCC_GetSysClockFreq>
 8003482:	4602      	mov	r2, r0
 8003484:	4b10      	ldr	r3, [pc, #64]	; (80034c8 <HAL_RCC_GetHCLKFreq+0x50>)
 8003486:	699b      	ldr	r3, [r3, #24]
 8003488:	0a1b      	lsrs	r3, r3, #8
 800348a:	f003 030f 	and.w	r3, r3, #15
 800348e:	490f      	ldr	r1, [pc, #60]	; (80034cc <HAL_RCC_GetHCLKFreq+0x54>)
 8003490:	5ccb      	ldrb	r3, [r1, r3]
 8003492:	f003 031f 	and.w	r3, r3, #31
 8003496:	fa22 f303 	lsr.w	r3, r2, r3
 800349a:	607b      	str	r3, [r7, #4]
#else
  common_system_clock = HAL_RCC_GetSysClockFreq() >> (D1CorePrescTable[(RCC->CDCFGR1 & RCC_CDCFGR1_CDCPRE) >> RCC_CDCFGR1_CDCPRE_Pos] & 0x1FU);
#endif

#if defined(RCC_D1CFGR_HPRE)
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE) >> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
 800349c:	4b0a      	ldr	r3, [pc, #40]	; (80034c8 <HAL_RCC_GetHCLKFreq+0x50>)
 800349e:	699b      	ldr	r3, [r3, #24]
 80034a0:	f003 030f 	and.w	r3, r3, #15
 80034a4:	4a09      	ldr	r2, [pc, #36]	; (80034cc <HAL_RCC_GetHCLKFreq+0x54>)
 80034a6:	5cd3      	ldrb	r3, [r2, r3]
 80034a8:	f003 031f 	and.w	r3, r3, #31
 80034ac:	687a      	ldr	r2, [r7, #4]
 80034ae:	fa22 f303 	lsr.w	r3, r2, r3
 80034b2:	4a07      	ldr	r2, [pc, #28]	; (80034d0 <HAL_RCC_GetHCLKFreq+0x58>)
 80034b4:	6013      	str	r3, [r2, #0]
#endif

#if defined(DUAL_CORE) && defined(CORE_CM4)
  SystemCoreClock = SystemD2Clock;
#else
  SystemCoreClock = common_system_clock;
 80034b6:	4a07      	ldr	r2, [pc, #28]	; (80034d4 <HAL_RCC_GetHCLKFreq+0x5c>)
 80034b8:	687b      	ldr	r3, [r7, #4]
 80034ba:	6013      	str	r3, [r2, #0]
#endif /* DUAL_CORE && CORE_CM4 */

  return SystemD2Clock;
 80034bc:	4b04      	ldr	r3, [pc, #16]	; (80034d0 <HAL_RCC_GetHCLKFreq+0x58>)
 80034be:	681b      	ldr	r3, [r3, #0]
}
 80034c0:	4618      	mov	r0, r3
 80034c2:	3708      	adds	r7, #8
 80034c4:	46bd      	mov	sp, r7
 80034c6:	bd80      	pop	{r7, pc}
 80034c8:	58024400 	.word	0x58024400
 80034cc:	08008b3c 	.word	0x08008b3c
 80034d0:	24000004 	.word	0x24000004
 80034d4:	24000000 	.word	0x24000000

080034d8 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 80034d8:	b580      	push	{r7, lr}
 80034da:	af00      	add	r7, sp, #0
#if defined (RCC_D2CFGR_D2PPRE1)
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->D2CFGR & RCC_D2CFGR_D2PPRE1) >> RCC_D2CFGR_D2PPRE1_Pos]) & 0x1FU));
 80034dc:	f7ff ffcc 	bl	8003478 <HAL_RCC_GetHCLKFreq>
 80034e0:	4602      	mov	r2, r0
 80034e2:	4b06      	ldr	r3, [pc, #24]	; (80034fc <HAL_RCC_GetPCLK1Freq+0x24>)
 80034e4:	69db      	ldr	r3, [r3, #28]
 80034e6:	091b      	lsrs	r3, r3, #4
 80034e8:	f003 0307 	and.w	r3, r3, #7
 80034ec:	4904      	ldr	r1, [pc, #16]	; (8003500 <HAL_RCC_GetPCLK1Freq+0x28>)
 80034ee:	5ccb      	ldrb	r3, [r1, r3]
 80034f0:	f003 031f 	and.w	r3, r3, #31
 80034f4:	fa22 f303 	lsr.w	r3, r2, r3
#else
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->CDCFGR2 & RCC_CDCFGR2_CDPPRE1) >> RCC_CDCFGR2_CDPPRE1_Pos]) & 0x1FU));
#endif
}
 80034f8:	4618      	mov	r0, r3
 80034fa:	bd80      	pop	{r7, pc}
 80034fc:	58024400 	.word	0x58024400
 8003500:	08008b3c 	.word	0x08008b3c

08003504 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8003504:	b580      	push	{r7, lr}
 8003506:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
#if defined(RCC_D2CFGR_D2PPRE2)
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->D2CFGR & RCC_D2CFGR_D2PPRE2) >> RCC_D2CFGR_D2PPRE2_Pos]) & 0x1FU));
 8003508:	f7ff ffb6 	bl	8003478 <HAL_RCC_GetHCLKFreq>
 800350c:	4602      	mov	r2, r0
 800350e:	4b06      	ldr	r3, [pc, #24]	; (8003528 <HAL_RCC_GetPCLK2Freq+0x24>)
 8003510:	69db      	ldr	r3, [r3, #28]
 8003512:	0a1b      	lsrs	r3, r3, #8
 8003514:	f003 0307 	and.w	r3, r3, #7
 8003518:	4904      	ldr	r1, [pc, #16]	; (800352c <HAL_RCC_GetPCLK2Freq+0x28>)
 800351a:	5ccb      	ldrb	r3, [r1, r3]
 800351c:	f003 031f 	and.w	r3, r3, #31
 8003520:	fa22 f303 	lsr.w	r3, r2, r3
#else
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->CDCFGR2 & RCC_CDCFGR2_CDPPRE2) >> RCC_CDCFGR2_CDPPRE2_Pos]) & 0x1FU));
#endif
}
 8003524:	4618      	mov	r0, r3
 8003526:	bd80      	pop	{r7, pc}
 8003528:	58024400 	.word	0x58024400
 800352c:	08008b3c 	.word	0x08008b3c

08003530 <HAL_RCCEx_PeriphCLKConfig>:
  * (*) : Available on some STM32H7 lines only.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8003530:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8003534:	b0c6      	sub	sp, #280	; 0x118
 8003536:	af00      	add	r7, sp, #0
 8003538:	f8c7 0104 	str.w	r0, [r7, #260]	; 0x104
  uint32_t tmpreg;
  uint32_t tickstart;
  HAL_StatusTypeDef ret = HAL_OK;      /* Intermediate status */
 800353c:	2300      	movs	r3, #0
 800353e:	f887 3117 	strb.w	r3, [r7, #279]	; 0x117
  HAL_StatusTypeDef status = HAL_OK;   /* Final status */
 8003542:	2300      	movs	r3, #0
 8003544:	f887 3116 	strb.w	r3, [r7, #278]	; 0x116

  /*---------------------------- SPDIFRX configuration -------------------------------*/

  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPDIFRX) == RCC_PERIPHCLK_SPDIFRX)
 8003548:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800354c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003550:	f002 6400 	and.w	r4, r2, #134217728	; 0x8000000
 8003554:	2500      	movs	r5, #0
 8003556:	ea54 0305 	orrs.w	r3, r4, r5
 800355a:	d049      	beq.n	80035f0 <HAL_RCCEx_PeriphCLKConfig+0xc0>
  {

    switch (PeriphClkInit->SpdifrxClockSelection)
 800355c:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8003560:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8003562:	f5b3 1f40 	cmp.w	r3, #3145728	; 0x300000
 8003566:	d02f      	beq.n	80035c8 <HAL_RCCEx_PeriphCLKConfig+0x98>
 8003568:	f5b3 1f40 	cmp.w	r3, #3145728	; 0x300000
 800356c:	d828      	bhi.n	80035c0 <HAL_RCCEx_PeriphCLKConfig+0x90>
 800356e:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 8003572:	d01a      	beq.n	80035aa <HAL_RCCEx_PeriphCLKConfig+0x7a>
 8003574:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 8003578:	d822      	bhi.n	80035c0 <HAL_RCCEx_PeriphCLKConfig+0x90>
 800357a:	2b00      	cmp	r3, #0
 800357c:	d003      	beq.n	8003586 <HAL_RCCEx_PeriphCLKConfig+0x56>
 800357e:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8003582:	d007      	beq.n	8003594 <HAL_RCCEx_PeriphCLKConfig+0x64>
 8003584:	e01c      	b.n	80035c0 <HAL_RCCEx_PeriphCLKConfig+0x90>
    {
      case RCC_SPDIFRXCLKSOURCE_PLL:      /* PLL is used as clock source for SPDIFRX*/
        /* Enable PLL1Q Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8003586:	4bab      	ldr	r3, [pc, #684]	; (8003834 <HAL_RCCEx_PeriphCLKConfig+0x304>)
 8003588:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800358a:	4aaa      	ldr	r2, [pc, #680]	; (8003834 <HAL_RCCEx_PeriphCLKConfig+0x304>)
 800358c:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8003590:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* SPDIFRX clock source configuration done later after clock selection check */
        break;
 8003592:	e01a      	b.n	80035ca <HAL_RCCEx_PeriphCLKConfig+0x9a>

      case RCC_SPDIFRXCLKSOURCE_PLL2: /* PLL2 is used as clock source for SPDIFRX*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_R_UPDATE);
 8003594:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8003598:	3308      	adds	r3, #8
 800359a:	2102      	movs	r1, #2
 800359c:	4618      	mov	r0, r3
 800359e:	f001 fc25 	bl	8004dec <RCCEx_PLL2_Config>
 80035a2:	4603      	mov	r3, r0
 80035a4:	f887 3117 	strb.w	r3, [r7, #279]	; 0x117

        /* SPDIFRX clock source configuration done later after clock selection check */
        break;
 80035a8:	e00f      	b.n	80035ca <HAL_RCCEx_PeriphCLKConfig+0x9a>

      case RCC_SPDIFRXCLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPDIFRX*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 80035aa:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 80035ae:	3328      	adds	r3, #40	; 0x28
 80035b0:	2102      	movs	r1, #2
 80035b2:	4618      	mov	r0, r3
 80035b4:	f001 fccc 	bl	8004f50 <RCCEx_PLL3_Config>
 80035b8:	4603      	mov	r3, r0
 80035ba:	f887 3117 	strb.w	r3, [r7, #279]	; 0x117

        /* SPDIFRX clock source configuration done later after clock selection check */
        break;
 80035be:	e004      	b.n	80035ca <HAL_RCCEx_PeriphCLKConfig+0x9a>
        /* Internal OSC clock is used as source of SPDIFRX clock*/
        /* SPDIFRX clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 80035c0:	2301      	movs	r3, #1
 80035c2:	f887 3117 	strb.w	r3, [r7, #279]	; 0x117
        break;
 80035c6:	e000      	b.n	80035ca <HAL_RCCEx_PeriphCLKConfig+0x9a>
        break;
 80035c8:	bf00      	nop
    }

    if (ret == HAL_OK)
 80035ca:	f897 3117 	ldrb.w	r3, [r7, #279]	; 0x117
 80035ce:	2b00      	cmp	r3, #0
 80035d0:	d10a      	bne.n	80035e8 <HAL_RCCEx_PeriphCLKConfig+0xb8>
    {
      /* Set the source of SPDIFRX clock*/
      __HAL_RCC_SPDIFRX_CONFIG(PeriphClkInit->SpdifrxClockSelection);
 80035d2:	4b98      	ldr	r3, [pc, #608]	; (8003834 <HAL_RCCEx_PeriphCLKConfig+0x304>)
 80035d4:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80035d6:	f423 1140 	bic.w	r1, r3, #3145728	; 0x300000
 80035da:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 80035de:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 80035e0:	4a94      	ldr	r2, [pc, #592]	; (8003834 <HAL_RCCEx_PeriphCLKConfig+0x304>)
 80035e2:	430b      	orrs	r3, r1
 80035e4:	6513      	str	r3, [r2, #80]	; 0x50
 80035e6:	e003      	b.n	80035f0 <HAL_RCCEx_PeriphCLKConfig+0xc0>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80035e8:	f897 3117 	ldrb.w	r3, [r7, #279]	; 0x117
 80035ec:	f887 3116 	strb.w	r3, [r7, #278]	; 0x116
    }
  }

  /*---------------------------- SAI1 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1)
 80035f0:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 80035f4:	e9d3 2300 	ldrd	r2, r3, [r3]
 80035f8:	f402 7880 	and.w	r8, r2, #256	; 0x100
 80035fc:	f04f 0900 	mov.w	r9, #0
 8003600:	ea58 0309 	orrs.w	r3, r8, r9
 8003604:	d047      	beq.n	8003696 <HAL_RCCEx_PeriphCLKConfig+0x166>
  {
    switch (PeriphClkInit->Sai1ClockSelection)
 8003606:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800360a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800360c:	2b04      	cmp	r3, #4
 800360e:	d82a      	bhi.n	8003666 <HAL_RCCEx_PeriphCLKConfig+0x136>
 8003610:	a201      	add	r2, pc, #4	; (adr r2, 8003618 <HAL_RCCEx_PeriphCLKConfig+0xe8>)
 8003612:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003616:	bf00      	nop
 8003618:	0800362d 	.word	0x0800362d
 800361c:	0800363b 	.word	0x0800363b
 8003620:	08003651 	.word	0x08003651
 8003624:	0800366f 	.word	0x0800366f
 8003628:	0800366f 	.word	0x0800366f
    {
      case RCC_SAI1CLKSOURCE_PLL:      /* PLL is used as clock source for SAI1*/
        /* Enable SAI Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 800362c:	4b81      	ldr	r3, [pc, #516]	; (8003834 <HAL_RCCEx_PeriphCLKConfig+0x304>)
 800362e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003630:	4a80      	ldr	r2, [pc, #512]	; (8003834 <HAL_RCCEx_PeriphCLKConfig+0x304>)
 8003632:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8003636:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 8003638:	e01a      	b.n	8003670 <HAL_RCCEx_PeriphCLKConfig+0x140>

      case RCC_SAI1CLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI1*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 800363a:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800363e:	3308      	adds	r3, #8
 8003640:	2100      	movs	r1, #0
 8003642:	4618      	mov	r0, r3
 8003644:	f001 fbd2 	bl	8004dec <RCCEx_PLL2_Config>
 8003648:	4603      	mov	r3, r0
 800364a:	f887 3117 	strb.w	r3, [r7, #279]	; 0x117

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 800364e:	e00f      	b.n	8003670 <HAL_RCCEx_PeriphCLKConfig+0x140>

      case RCC_SAI1CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI1*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 8003650:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8003654:	3328      	adds	r3, #40	; 0x28
 8003656:	2100      	movs	r1, #0
 8003658:	4618      	mov	r0, r3
 800365a:	f001 fc79 	bl	8004f50 <RCCEx_PLL3_Config>
 800365e:	4603      	mov	r3, r0
 8003660:	f887 3117 	strb.w	r3, [r7, #279]	; 0x117

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 8003664:	e004      	b.n	8003670 <HAL_RCCEx_PeriphCLKConfig+0x140>
        /* HSI, HSE, or CSI oscillator is used as source of SAI1 clock */
        /* SAI1 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8003666:	2301      	movs	r3, #1
 8003668:	f887 3117 	strb.w	r3, [r7, #279]	; 0x117
        break;
 800366c:	e000      	b.n	8003670 <HAL_RCCEx_PeriphCLKConfig+0x140>
        break;
 800366e:	bf00      	nop
    }

    if (ret == HAL_OK)
 8003670:	f897 3117 	ldrb.w	r3, [r7, #279]	; 0x117
 8003674:	2b00      	cmp	r3, #0
 8003676:	d10a      	bne.n	800368e <HAL_RCCEx_PeriphCLKConfig+0x15e>
    {
      /* Set the source of SAI1 clock*/
      __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 8003678:	4b6e      	ldr	r3, [pc, #440]	; (8003834 <HAL_RCCEx_PeriphCLKConfig+0x304>)
 800367a:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800367c:	f023 0107 	bic.w	r1, r3, #7
 8003680:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8003684:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003686:	4a6b      	ldr	r2, [pc, #428]	; (8003834 <HAL_RCCEx_PeriphCLKConfig+0x304>)
 8003688:	430b      	orrs	r3, r1
 800368a:	6513      	str	r3, [r2, #80]	; 0x50
 800368c:	e003      	b.n	8003696 <HAL_RCCEx_PeriphCLKConfig+0x166>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800368e:	f897 3117 	ldrb.w	r3, [r7, #279]	; 0x117
 8003692:	f887 3116 	strb.w	r3, [r7, #278]	; 0x116
  }
#endif  /*SAI2B*/

#if defined(SAI4)
  /*---------------------------- SAI4A configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI4A) == RCC_PERIPHCLK_SAI4A)
 8003696:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800369a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800369e:	f402 6a80 	and.w	sl, r2, #1024	; 0x400
 80036a2:	f04f 0b00 	mov.w	fp, #0
 80036a6:	ea5a 030b 	orrs.w	r3, sl, fp
 80036aa:	d05b      	beq.n	8003764 <HAL_RCCEx_PeriphCLKConfig+0x234>
  {
    switch (PeriphClkInit->Sai4AClockSelection)
 80036ac:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 80036b0:	f8d3 30a4 	ldr.w	r3, [r3, #164]	; 0xa4
 80036b4:	f5b3 0f20 	cmp.w	r3, #10485760	; 0xa00000
 80036b8:	d03b      	beq.n	8003732 <HAL_RCCEx_PeriphCLKConfig+0x202>
 80036ba:	f5b3 0f20 	cmp.w	r3, #10485760	; 0xa00000
 80036be:	d834      	bhi.n	800372a <HAL_RCCEx_PeriphCLKConfig+0x1fa>
 80036c0:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 80036c4:	d037      	beq.n	8003736 <HAL_RCCEx_PeriphCLKConfig+0x206>
 80036c6:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 80036ca:	d82e      	bhi.n	800372a <HAL_RCCEx_PeriphCLKConfig+0x1fa>
 80036cc:	f5b3 0fc0 	cmp.w	r3, #6291456	; 0x600000
 80036d0:	d033      	beq.n	800373a <HAL_RCCEx_PeriphCLKConfig+0x20a>
 80036d2:	f5b3 0fc0 	cmp.w	r3, #6291456	; 0x600000
 80036d6:	d828      	bhi.n	800372a <HAL_RCCEx_PeriphCLKConfig+0x1fa>
 80036d8:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 80036dc:	d01a      	beq.n	8003714 <HAL_RCCEx_PeriphCLKConfig+0x1e4>
 80036de:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 80036e2:	d822      	bhi.n	800372a <HAL_RCCEx_PeriphCLKConfig+0x1fa>
 80036e4:	2b00      	cmp	r3, #0
 80036e6:	d003      	beq.n	80036f0 <HAL_RCCEx_PeriphCLKConfig+0x1c0>
 80036e8:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 80036ec:	d007      	beq.n	80036fe <HAL_RCCEx_PeriphCLKConfig+0x1ce>
 80036ee:	e01c      	b.n	800372a <HAL_RCCEx_PeriphCLKConfig+0x1fa>
    {
      case RCC_SAI4ACLKSOURCE_PLL:      /* PLL is used as clock source for SAI2*/
        /* Enable SAI Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 80036f0:	4b50      	ldr	r3, [pc, #320]	; (8003834 <HAL_RCCEx_PeriphCLKConfig+0x304>)
 80036f2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80036f4:	4a4f      	ldr	r2, [pc, #316]	; (8003834 <HAL_RCCEx_PeriphCLKConfig+0x304>)
 80036f6:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80036fa:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 80036fc:	e01e      	b.n	800373c <HAL_RCCEx_PeriphCLKConfig+0x20c>

      case RCC_SAI4ACLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI2*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 80036fe:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8003702:	3308      	adds	r3, #8
 8003704:	2100      	movs	r1, #0
 8003706:	4618      	mov	r0, r3
 8003708:	f001 fb70 	bl	8004dec <RCCEx_PLL2_Config>
 800370c:	4603      	mov	r3, r0
 800370e:	f887 3117 	strb.w	r3, [r7, #279]	; 0x117

        /* SAI2 clock source configuration done later after clock selection check */
        break;
 8003712:	e013      	b.n	800373c <HAL_RCCEx_PeriphCLKConfig+0x20c>

      case RCC_SAI4ACLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI2*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 8003714:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8003718:	3328      	adds	r3, #40	; 0x28
 800371a:	2100      	movs	r1, #0
 800371c:	4618      	mov	r0, r3
 800371e:	f001 fc17 	bl	8004f50 <RCCEx_PLL3_Config>
 8003722:	4603      	mov	r3, r0
 8003724:	f887 3117 	strb.w	r3, [r7, #279]	; 0x117

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 8003728:	e008      	b.n	800373c <HAL_RCCEx_PeriphCLKConfig+0x20c>
        /* SAI4A clock source configuration done later after clock selection check */
        break;
#endif /* RCC_VER_3_0 */

      default:
        ret = HAL_ERROR;
 800372a:	2301      	movs	r3, #1
 800372c:	f887 3117 	strb.w	r3, [r7, #279]	; 0x117
        break;
 8003730:	e004      	b.n	800373c <HAL_RCCEx_PeriphCLKConfig+0x20c>
        break;
 8003732:	bf00      	nop
 8003734:	e002      	b.n	800373c <HAL_RCCEx_PeriphCLKConfig+0x20c>
        break;
 8003736:	bf00      	nop
 8003738:	e000      	b.n	800373c <HAL_RCCEx_PeriphCLKConfig+0x20c>
        break;
 800373a:	bf00      	nop
    }

    if (ret == HAL_OK)
 800373c:	f897 3117 	ldrb.w	r3, [r7, #279]	; 0x117
 8003740:	2b00      	cmp	r3, #0
 8003742:	d10b      	bne.n	800375c <HAL_RCCEx_PeriphCLKConfig+0x22c>
    {
      /* Set the source of SAI4A clock*/
      __HAL_RCC_SAI4A_CONFIG(PeriphClkInit->Sai4AClockSelection);
 8003744:	4b3b      	ldr	r3, [pc, #236]	; (8003834 <HAL_RCCEx_PeriphCLKConfig+0x304>)
 8003746:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003748:	f423 0160 	bic.w	r1, r3, #14680064	; 0xe00000
 800374c:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8003750:	f8d3 30a4 	ldr.w	r3, [r3, #164]	; 0xa4
 8003754:	4a37      	ldr	r2, [pc, #220]	; (8003834 <HAL_RCCEx_PeriphCLKConfig+0x304>)
 8003756:	430b      	orrs	r3, r1
 8003758:	6593      	str	r3, [r2, #88]	; 0x58
 800375a:	e003      	b.n	8003764 <HAL_RCCEx_PeriphCLKConfig+0x234>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800375c:	f897 3117 	ldrb.w	r3, [r7, #279]	; 0x117
 8003760:	f887 3116 	strb.w	r3, [r7, #278]	; 0x116
    }
  }
  /*---------------------------- SAI4B configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI4B) == RCC_PERIPHCLK_SAI4B)
 8003764:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8003768:	e9d3 2300 	ldrd	r2, r3, [r3]
 800376c:	f402 6300 	and.w	r3, r2, #2048	; 0x800
 8003770:	f8c7 30f8 	str.w	r3, [r7, #248]	; 0xf8
 8003774:	2300      	movs	r3, #0
 8003776:	f8c7 30fc 	str.w	r3, [r7, #252]	; 0xfc
 800377a:	e9d7 123e 	ldrd	r1, r2, [r7, #248]	; 0xf8
 800377e:	460b      	mov	r3, r1
 8003780:	4313      	orrs	r3, r2
 8003782:	d05d      	beq.n	8003840 <HAL_RCCEx_PeriphCLKConfig+0x310>
  {
    switch (PeriphClkInit->Sai4BClockSelection)
 8003784:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8003788:	f8d3 30a8 	ldr.w	r3, [r3, #168]	; 0xa8
 800378c:	f1b3 6fa0 	cmp.w	r3, #83886080	; 0x5000000
 8003790:	d03b      	beq.n	800380a <HAL_RCCEx_PeriphCLKConfig+0x2da>
 8003792:	f1b3 6fa0 	cmp.w	r3, #83886080	; 0x5000000
 8003796:	d834      	bhi.n	8003802 <HAL_RCCEx_PeriphCLKConfig+0x2d2>
 8003798:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 800379c:	d037      	beq.n	800380e <HAL_RCCEx_PeriphCLKConfig+0x2de>
 800379e:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 80037a2:	d82e      	bhi.n	8003802 <HAL_RCCEx_PeriphCLKConfig+0x2d2>
 80037a4:	f1b3 7f40 	cmp.w	r3, #50331648	; 0x3000000
 80037a8:	d033      	beq.n	8003812 <HAL_RCCEx_PeriphCLKConfig+0x2e2>
 80037aa:	f1b3 7f40 	cmp.w	r3, #50331648	; 0x3000000
 80037ae:	d828      	bhi.n	8003802 <HAL_RCCEx_PeriphCLKConfig+0x2d2>
 80037b0:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 80037b4:	d01a      	beq.n	80037ec <HAL_RCCEx_PeriphCLKConfig+0x2bc>
 80037b6:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 80037ba:	d822      	bhi.n	8003802 <HAL_RCCEx_PeriphCLKConfig+0x2d2>
 80037bc:	2b00      	cmp	r3, #0
 80037be:	d003      	beq.n	80037c8 <HAL_RCCEx_PeriphCLKConfig+0x298>
 80037c0:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 80037c4:	d007      	beq.n	80037d6 <HAL_RCCEx_PeriphCLKConfig+0x2a6>
 80037c6:	e01c      	b.n	8003802 <HAL_RCCEx_PeriphCLKConfig+0x2d2>
    {
      case RCC_SAI4BCLKSOURCE_PLL:      /* PLL is used as clock source for SAI2*/
        /* Enable SAI Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 80037c8:	4b1a      	ldr	r3, [pc, #104]	; (8003834 <HAL_RCCEx_PeriphCLKConfig+0x304>)
 80037ca:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80037cc:	4a19      	ldr	r2, [pc, #100]	; (8003834 <HAL_RCCEx_PeriphCLKConfig+0x304>)
 80037ce:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80037d2:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 80037d4:	e01e      	b.n	8003814 <HAL_RCCEx_PeriphCLKConfig+0x2e4>

      case RCC_SAI4BCLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI2*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 80037d6:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 80037da:	3308      	adds	r3, #8
 80037dc:	2100      	movs	r1, #0
 80037de:	4618      	mov	r0, r3
 80037e0:	f001 fb04 	bl	8004dec <RCCEx_PLL2_Config>
 80037e4:	4603      	mov	r3, r0
 80037e6:	f887 3117 	strb.w	r3, [r7, #279]	; 0x117

        /* SAI2 clock source configuration done later after clock selection check */
        break;
 80037ea:	e013      	b.n	8003814 <HAL_RCCEx_PeriphCLKConfig+0x2e4>

      case RCC_SAI4BCLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI2*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 80037ec:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 80037f0:	3328      	adds	r3, #40	; 0x28
 80037f2:	2100      	movs	r1, #0
 80037f4:	4618      	mov	r0, r3
 80037f6:	f001 fbab 	bl	8004f50 <RCCEx_PLL3_Config>
 80037fa:	4603      	mov	r3, r0
 80037fc:	f887 3117 	strb.w	r3, [r7, #279]	; 0x117

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 8003800:	e008      	b.n	8003814 <HAL_RCCEx_PeriphCLKConfig+0x2e4>
        /* SAI4B clock source configuration done later after clock selection check */
        break;
#endif /* RCC_VER_3_0 */

      default:
        ret = HAL_ERROR;
 8003802:	2301      	movs	r3, #1
 8003804:	f887 3117 	strb.w	r3, [r7, #279]	; 0x117
        break;
 8003808:	e004      	b.n	8003814 <HAL_RCCEx_PeriphCLKConfig+0x2e4>
        break;
 800380a:	bf00      	nop
 800380c:	e002      	b.n	8003814 <HAL_RCCEx_PeriphCLKConfig+0x2e4>
        break;
 800380e:	bf00      	nop
 8003810:	e000      	b.n	8003814 <HAL_RCCEx_PeriphCLKConfig+0x2e4>
        break;
 8003812:	bf00      	nop
    }

    if (ret == HAL_OK)
 8003814:	f897 3117 	ldrb.w	r3, [r7, #279]	; 0x117
 8003818:	2b00      	cmp	r3, #0
 800381a:	d10d      	bne.n	8003838 <HAL_RCCEx_PeriphCLKConfig+0x308>
    {
      /* Set the source of SAI4B clock*/
      __HAL_RCC_SAI4B_CONFIG(PeriphClkInit->Sai4BClockSelection);
 800381c:	4b05      	ldr	r3, [pc, #20]	; (8003834 <HAL_RCCEx_PeriphCLKConfig+0x304>)
 800381e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003820:	f023 61e0 	bic.w	r1, r3, #117440512	; 0x7000000
 8003824:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8003828:	f8d3 30a8 	ldr.w	r3, [r3, #168]	; 0xa8
 800382c:	4a01      	ldr	r2, [pc, #4]	; (8003834 <HAL_RCCEx_PeriphCLKConfig+0x304>)
 800382e:	430b      	orrs	r3, r1
 8003830:	6593      	str	r3, [r2, #88]	; 0x58
 8003832:	e005      	b.n	8003840 <HAL_RCCEx_PeriphCLKConfig+0x310>
 8003834:	58024400 	.word	0x58024400
    }
    else
    {
      /* set overall return value */
      status = ret;
 8003838:	f897 3117 	ldrb.w	r3, [r7, #279]	; 0x117
 800383c:	f887 3116 	strb.w	r3, [r7, #278]	; 0x116
  }
#endif  /*QUADSPI*/

#if defined(OCTOSPI1) || defined(OCTOSPI2)
  /*---------------------------- OCTOSPI configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_OSPI) == RCC_PERIPHCLK_OSPI)
 8003840:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8003844:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003848:	f002 7300 	and.w	r3, r2, #33554432	; 0x2000000
 800384c:	f8c7 30f0 	str.w	r3, [r7, #240]	; 0xf0
 8003850:	2300      	movs	r3, #0
 8003852:	f8c7 30f4 	str.w	r3, [r7, #244]	; 0xf4
 8003856:	e9d7 123c 	ldrd	r1, r2, [r7, #240]	; 0xf0
 800385a:	460b      	mov	r3, r1
 800385c:	4313      	orrs	r3, r2
 800385e:	d03a      	beq.n	80038d6 <HAL_RCCEx_PeriphCLKConfig+0x3a6>
  {
    switch (PeriphClkInit->OspiClockSelection)
 8003860:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8003864:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8003866:	2b30      	cmp	r3, #48	; 0x30
 8003868:	d01f      	beq.n	80038aa <HAL_RCCEx_PeriphCLKConfig+0x37a>
 800386a:	2b30      	cmp	r3, #48	; 0x30
 800386c:	d819      	bhi.n	80038a2 <HAL_RCCEx_PeriphCLKConfig+0x372>
 800386e:	2b20      	cmp	r3, #32
 8003870:	d00c      	beq.n	800388c <HAL_RCCEx_PeriphCLKConfig+0x35c>
 8003872:	2b20      	cmp	r3, #32
 8003874:	d815      	bhi.n	80038a2 <HAL_RCCEx_PeriphCLKConfig+0x372>
 8003876:	2b00      	cmp	r3, #0
 8003878:	d019      	beq.n	80038ae <HAL_RCCEx_PeriphCLKConfig+0x37e>
 800387a:	2b10      	cmp	r3, #16
 800387c:	d111      	bne.n	80038a2 <HAL_RCCEx_PeriphCLKConfig+0x372>
    {
      case RCC_OSPICLKSOURCE_PLL:      /* PLL is used as clock source for OSPI*/
        /* Enable OSPI Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 800387e:	4baa      	ldr	r3, [pc, #680]	; (8003b28 <HAL_RCCEx_PeriphCLKConfig+0x5f8>)
 8003880:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003882:	4aa9      	ldr	r2, [pc, #676]	; (8003b28 <HAL_RCCEx_PeriphCLKConfig+0x5f8>)
 8003884:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8003888:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* OSPI clock source configuration done later after clock selection check */
        break;
 800388a:	e011      	b.n	80038b0 <HAL_RCCEx_PeriphCLKConfig+0x380>

      case RCC_OSPICLKSOURCE_PLL2: /* PLL2 is used as clock source for OSPI*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_R_UPDATE);
 800388c:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8003890:	3308      	adds	r3, #8
 8003892:	2102      	movs	r1, #2
 8003894:	4618      	mov	r0, r3
 8003896:	f001 faa9 	bl	8004dec <RCCEx_PLL2_Config>
 800389a:	4603      	mov	r3, r0
 800389c:	f887 3117 	strb.w	r3, [r7, #279]	; 0x117

        /* OSPI clock source configuration done later after clock selection check */
        break;
 80038a0:	e006      	b.n	80038b0 <HAL_RCCEx_PeriphCLKConfig+0x380>
      case RCC_OSPICLKSOURCE_HCLK:
        /* HCLK clock selected as OSPI kernel peripheral clock */
        break;

      default:
        ret = HAL_ERROR;
 80038a2:	2301      	movs	r3, #1
 80038a4:	f887 3117 	strb.w	r3, [r7, #279]	; 0x117
        break;
 80038a8:	e002      	b.n	80038b0 <HAL_RCCEx_PeriphCLKConfig+0x380>
        break;
 80038aa:	bf00      	nop
 80038ac:	e000      	b.n	80038b0 <HAL_RCCEx_PeriphCLKConfig+0x380>
        break;
 80038ae:	bf00      	nop
    }

    if (ret == HAL_OK)
 80038b0:	f897 3117 	ldrb.w	r3, [r7, #279]	; 0x117
 80038b4:	2b00      	cmp	r3, #0
 80038b6:	d10a      	bne.n	80038ce <HAL_RCCEx_PeriphCLKConfig+0x39e>
    {
      /* Set the source of OSPI clock*/
      __HAL_RCC_OSPI_CONFIG(PeriphClkInit->OspiClockSelection);
 80038b8:	4b9b      	ldr	r3, [pc, #620]	; (8003b28 <HAL_RCCEx_PeriphCLKConfig+0x5f8>)
 80038ba:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80038bc:	f023 0130 	bic.w	r1, r3, #48	; 0x30
 80038c0:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 80038c4:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80038c6:	4a98      	ldr	r2, [pc, #608]	; (8003b28 <HAL_RCCEx_PeriphCLKConfig+0x5f8>)
 80038c8:	430b      	orrs	r3, r1
 80038ca:	64d3      	str	r3, [r2, #76]	; 0x4c
 80038cc:	e003      	b.n	80038d6 <HAL_RCCEx_PeriphCLKConfig+0x3a6>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80038ce:	f897 3117 	ldrb.w	r3, [r7, #279]	; 0x117
 80038d2:	f887 3116 	strb.w	r3, [r7, #278]	; 0x116
    }
  }
#endif  /*OCTOSPI*/

  /*---------------------------- SPI1/2/3 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI123) == RCC_PERIPHCLK_SPI123)
 80038d6:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 80038da:	e9d3 2300 	ldrd	r2, r3, [r3]
 80038de:	f402 5380 	and.w	r3, r2, #4096	; 0x1000
 80038e2:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
 80038e6:	2300      	movs	r3, #0
 80038e8:	f8c7 30ec 	str.w	r3, [r7, #236]	; 0xec
 80038ec:	e9d7 123a 	ldrd	r1, r2, [r7, #232]	; 0xe8
 80038f0:	460b      	mov	r3, r1
 80038f2:	4313      	orrs	r3, r2
 80038f4:	d051      	beq.n	800399a <HAL_RCCEx_PeriphCLKConfig+0x46a>
  {
    switch (PeriphClkInit->Spi123ClockSelection)
 80038f6:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 80038fa:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80038fc:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8003900:	d035      	beq.n	800396e <HAL_RCCEx_PeriphCLKConfig+0x43e>
 8003902:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8003906:	d82e      	bhi.n	8003966 <HAL_RCCEx_PeriphCLKConfig+0x436>
 8003908:	f5b3 5f40 	cmp.w	r3, #12288	; 0x3000
 800390c:	d031      	beq.n	8003972 <HAL_RCCEx_PeriphCLKConfig+0x442>
 800390e:	f5b3 5f40 	cmp.w	r3, #12288	; 0x3000
 8003912:	d828      	bhi.n	8003966 <HAL_RCCEx_PeriphCLKConfig+0x436>
 8003914:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8003918:	d01a      	beq.n	8003950 <HAL_RCCEx_PeriphCLKConfig+0x420>
 800391a:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800391e:	d822      	bhi.n	8003966 <HAL_RCCEx_PeriphCLKConfig+0x436>
 8003920:	2b00      	cmp	r3, #0
 8003922:	d003      	beq.n	800392c <HAL_RCCEx_PeriphCLKConfig+0x3fc>
 8003924:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8003928:	d007      	beq.n	800393a <HAL_RCCEx_PeriphCLKConfig+0x40a>
 800392a:	e01c      	b.n	8003966 <HAL_RCCEx_PeriphCLKConfig+0x436>
    {
      case RCC_SPI123CLKSOURCE_PLL:      /* PLL is used as clock source for SPI1/2/3 */
        /* Enable SPI Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 800392c:	4b7e      	ldr	r3, [pc, #504]	; (8003b28 <HAL_RCCEx_PeriphCLKConfig+0x5f8>)
 800392e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003930:	4a7d      	ldr	r2, [pc, #500]	; (8003b28 <HAL_RCCEx_PeriphCLKConfig+0x5f8>)
 8003932:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8003936:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* SPI1/2/3 clock source configuration done later after clock selection check */
        break;
 8003938:	e01c      	b.n	8003974 <HAL_RCCEx_PeriphCLKConfig+0x444>

      case RCC_SPI123CLKSOURCE_PLL2: /* PLL2 is used as clock source for SPI1/2/3 */
        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 800393a:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800393e:	3308      	adds	r3, #8
 8003940:	2100      	movs	r1, #0
 8003942:	4618      	mov	r0, r3
 8003944:	f001 fa52 	bl	8004dec <RCCEx_PLL2_Config>
 8003948:	4603      	mov	r3, r0
 800394a:	f887 3117 	strb.w	r3, [r7, #279]	; 0x117

        /* SPI1/2/3 clock source configuration done later after clock selection check */
        break;
 800394e:	e011      	b.n	8003974 <HAL_RCCEx_PeriphCLKConfig+0x444>

      case RCC_SPI123CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPI1/2/3 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 8003950:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8003954:	3328      	adds	r3, #40	; 0x28
 8003956:	2100      	movs	r1, #0
 8003958:	4618      	mov	r0, r3
 800395a:	f001 faf9 	bl	8004f50 <RCCEx_PLL3_Config>
 800395e:	4603      	mov	r3, r0
 8003960:	f887 3117 	strb.w	r3, [r7, #279]	; 0x117

        /* SPI1/2/3 clock source configuration done later after clock selection check */
        break;
 8003964:	e006      	b.n	8003974 <HAL_RCCEx_PeriphCLKConfig+0x444>
        /* HSI, HSE, or CSI oscillator is used as source of SPI1/2/3 clock */
        /* SPI1/2/3 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8003966:	2301      	movs	r3, #1
 8003968:	f887 3117 	strb.w	r3, [r7, #279]	; 0x117
        break;
 800396c:	e002      	b.n	8003974 <HAL_RCCEx_PeriphCLKConfig+0x444>
        break;
 800396e:	bf00      	nop
 8003970:	e000      	b.n	8003974 <HAL_RCCEx_PeriphCLKConfig+0x444>
        break;
 8003972:	bf00      	nop
    }

    if (ret == HAL_OK)
 8003974:	f897 3117 	ldrb.w	r3, [r7, #279]	; 0x117
 8003978:	2b00      	cmp	r3, #0
 800397a:	d10a      	bne.n	8003992 <HAL_RCCEx_PeriphCLKConfig+0x462>
    {
      /* Set the source of SPI1/2/3 clock*/
      __HAL_RCC_SPI123_CONFIG(PeriphClkInit->Spi123ClockSelection);
 800397c:	4b6a      	ldr	r3, [pc, #424]	; (8003b28 <HAL_RCCEx_PeriphCLKConfig+0x5f8>)
 800397e:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8003980:	f423 41e0 	bic.w	r1, r3, #28672	; 0x7000
 8003984:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8003988:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800398a:	4a67      	ldr	r2, [pc, #412]	; (8003b28 <HAL_RCCEx_PeriphCLKConfig+0x5f8>)
 800398c:	430b      	orrs	r3, r1
 800398e:	6513      	str	r3, [r2, #80]	; 0x50
 8003990:	e003      	b.n	800399a <HAL_RCCEx_PeriphCLKConfig+0x46a>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8003992:	f897 3117 	ldrb.w	r3, [r7, #279]	; 0x117
 8003996:	f887 3116 	strb.w	r3, [r7, #278]	; 0x116
    }
  }

  /*---------------------------- SPI4/5 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI45) == RCC_PERIPHCLK_SPI45)
 800399a:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800399e:	e9d3 2300 	ldrd	r2, r3, [r3]
 80039a2:	f402 5300 	and.w	r3, r2, #8192	; 0x2000
 80039a6:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
 80039aa:	2300      	movs	r3, #0
 80039ac:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
 80039b0:	e9d7 1238 	ldrd	r1, r2, [r7, #224]	; 0xe0
 80039b4:	460b      	mov	r3, r1
 80039b6:	4313      	orrs	r3, r2
 80039b8:	d053      	beq.n	8003a62 <HAL_RCCEx_PeriphCLKConfig+0x532>
  {
    switch (PeriphClkInit->Spi45ClockSelection)
 80039ba:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 80039be:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80039c0:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 80039c4:	d033      	beq.n	8003a2e <HAL_RCCEx_PeriphCLKConfig+0x4fe>
 80039c6:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 80039ca:	d82c      	bhi.n	8003a26 <HAL_RCCEx_PeriphCLKConfig+0x4f6>
 80039cc:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 80039d0:	d02f      	beq.n	8003a32 <HAL_RCCEx_PeriphCLKConfig+0x502>
 80039d2:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 80039d6:	d826      	bhi.n	8003a26 <HAL_RCCEx_PeriphCLKConfig+0x4f6>
 80039d8:	f5b3 3f40 	cmp.w	r3, #196608	; 0x30000
 80039dc:	d02b      	beq.n	8003a36 <HAL_RCCEx_PeriphCLKConfig+0x506>
 80039de:	f5b3 3f40 	cmp.w	r3, #196608	; 0x30000
 80039e2:	d820      	bhi.n	8003a26 <HAL_RCCEx_PeriphCLKConfig+0x4f6>
 80039e4:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 80039e8:	d012      	beq.n	8003a10 <HAL_RCCEx_PeriphCLKConfig+0x4e0>
 80039ea:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 80039ee:	d81a      	bhi.n	8003a26 <HAL_RCCEx_PeriphCLKConfig+0x4f6>
 80039f0:	2b00      	cmp	r3, #0
 80039f2:	d022      	beq.n	8003a3a <HAL_RCCEx_PeriphCLKConfig+0x50a>
 80039f4:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80039f8:	d115      	bne.n	8003a26 <HAL_RCCEx_PeriphCLKConfig+0x4f6>
        /* SPI4/5 clock source configuration done later after clock selection check */
        break;

      case RCC_SPI45CLKSOURCE_PLL2: /* PLL2 is used as clock source for SPI4/5 */

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 80039fa:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 80039fe:	3308      	adds	r3, #8
 8003a00:	2101      	movs	r1, #1
 8003a02:	4618      	mov	r0, r3
 8003a04:	f001 f9f2 	bl	8004dec <RCCEx_PLL2_Config>
 8003a08:	4603      	mov	r3, r0
 8003a0a:	f887 3117 	strb.w	r3, [r7, #279]	; 0x117

        /* SPI4/5 clock source configuration done later after clock selection check */
        break;
 8003a0e:	e015      	b.n	8003a3c <HAL_RCCEx_PeriphCLKConfig+0x50c>
      case RCC_SPI45CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPI4/5 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 8003a10:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8003a14:	3328      	adds	r3, #40	; 0x28
 8003a16:	2101      	movs	r1, #1
 8003a18:	4618      	mov	r0, r3
 8003a1a:	f001 fa99 	bl	8004f50 <RCCEx_PLL3_Config>
 8003a1e:	4603      	mov	r3, r0
 8003a20:	f887 3117 	strb.w	r3, [r7, #279]	; 0x117
        /* SPI4/5 clock source configuration done later after clock selection check */
        break;
 8003a24:	e00a      	b.n	8003a3c <HAL_RCCEx_PeriphCLKConfig+0x50c>
        /* HSE,  oscillator is used as source of SPI4/5 clock */
        /* SPI4/5 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8003a26:	2301      	movs	r3, #1
 8003a28:	f887 3117 	strb.w	r3, [r7, #279]	; 0x117
        break;
 8003a2c:	e006      	b.n	8003a3c <HAL_RCCEx_PeriphCLKConfig+0x50c>
        break;
 8003a2e:	bf00      	nop
 8003a30:	e004      	b.n	8003a3c <HAL_RCCEx_PeriphCLKConfig+0x50c>
        break;
 8003a32:	bf00      	nop
 8003a34:	e002      	b.n	8003a3c <HAL_RCCEx_PeriphCLKConfig+0x50c>
        break;
 8003a36:	bf00      	nop
 8003a38:	e000      	b.n	8003a3c <HAL_RCCEx_PeriphCLKConfig+0x50c>
        break;
 8003a3a:	bf00      	nop
    }

    if (ret == HAL_OK)
 8003a3c:	f897 3117 	ldrb.w	r3, [r7, #279]	; 0x117
 8003a40:	2b00      	cmp	r3, #0
 8003a42:	d10a      	bne.n	8003a5a <HAL_RCCEx_PeriphCLKConfig+0x52a>
    {
      /* Set the source of SPI4/5 clock*/
      __HAL_RCC_SPI45_CONFIG(PeriphClkInit->Spi45ClockSelection);
 8003a44:	4b38      	ldr	r3, [pc, #224]	; (8003b28 <HAL_RCCEx_PeriphCLKConfig+0x5f8>)
 8003a46:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8003a48:	f423 21e0 	bic.w	r1, r3, #458752	; 0x70000
 8003a4c:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8003a50:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8003a52:	4a35      	ldr	r2, [pc, #212]	; (8003b28 <HAL_RCCEx_PeriphCLKConfig+0x5f8>)
 8003a54:	430b      	orrs	r3, r1
 8003a56:	6513      	str	r3, [r2, #80]	; 0x50
 8003a58:	e003      	b.n	8003a62 <HAL_RCCEx_PeriphCLKConfig+0x532>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8003a5a:	f897 3117 	ldrb.w	r3, [r7, #279]	; 0x117
 8003a5e:	f887 3116 	strb.w	r3, [r7, #278]	; 0x116
    }
  }

  /*---------------------------- SPI6 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI6) == RCC_PERIPHCLK_SPI6)
 8003a62:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8003a66:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003a6a:	f402 4380 	and.w	r3, r2, #16384	; 0x4000
 8003a6e:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
 8003a72:	2300      	movs	r3, #0
 8003a74:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
 8003a78:	e9d7 1236 	ldrd	r1, r2, [r7, #216]	; 0xd8
 8003a7c:	460b      	mov	r3, r1
 8003a7e:	4313      	orrs	r3, r2
 8003a80:	d058      	beq.n	8003b34 <HAL_RCCEx_PeriphCLKConfig+0x604>
  {
    switch (PeriphClkInit->Spi6ClockSelection)
 8003a82:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8003a86:	f8d3 30ac 	ldr.w	r3, [r3, #172]	; 0xac
 8003a8a:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8003a8e:	d033      	beq.n	8003af8 <HAL_RCCEx_PeriphCLKConfig+0x5c8>
 8003a90:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8003a94:	d82c      	bhi.n	8003af0 <HAL_RCCEx_PeriphCLKConfig+0x5c0>
 8003a96:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8003a9a:	d02f      	beq.n	8003afc <HAL_RCCEx_PeriphCLKConfig+0x5cc>
 8003a9c:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8003aa0:	d826      	bhi.n	8003af0 <HAL_RCCEx_PeriphCLKConfig+0x5c0>
 8003aa2:	f1b3 5f40 	cmp.w	r3, #805306368	; 0x30000000
 8003aa6:	d02b      	beq.n	8003b00 <HAL_RCCEx_PeriphCLKConfig+0x5d0>
 8003aa8:	f1b3 5f40 	cmp.w	r3, #805306368	; 0x30000000
 8003aac:	d820      	bhi.n	8003af0 <HAL_RCCEx_PeriphCLKConfig+0x5c0>
 8003aae:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8003ab2:	d012      	beq.n	8003ada <HAL_RCCEx_PeriphCLKConfig+0x5aa>
 8003ab4:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8003ab8:	d81a      	bhi.n	8003af0 <HAL_RCCEx_PeriphCLKConfig+0x5c0>
 8003aba:	2b00      	cmp	r3, #0
 8003abc:	d022      	beq.n	8003b04 <HAL_RCCEx_PeriphCLKConfig+0x5d4>
 8003abe:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8003ac2:	d115      	bne.n	8003af0 <HAL_RCCEx_PeriphCLKConfig+0x5c0>
        /* SPI6 clock source configuration done later after clock selection check */
        break;

      case RCC_SPI6CLKSOURCE_PLL2: /* PLL2 is used as clock source for SPI6*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 8003ac4:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8003ac8:	3308      	adds	r3, #8
 8003aca:	2101      	movs	r1, #1
 8003acc:	4618      	mov	r0, r3
 8003ace:	f001 f98d 	bl	8004dec <RCCEx_PLL2_Config>
 8003ad2:	4603      	mov	r3, r0
 8003ad4:	f887 3117 	strb.w	r3, [r7, #279]	; 0x117

        /* SPI6 clock source configuration done later after clock selection check */
        break;
 8003ad8:	e015      	b.n	8003b06 <HAL_RCCEx_PeriphCLKConfig+0x5d6>
      case RCC_SPI6CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPI6*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 8003ada:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8003ade:	3328      	adds	r3, #40	; 0x28
 8003ae0:	2101      	movs	r1, #1
 8003ae2:	4618      	mov	r0, r3
 8003ae4:	f001 fa34 	bl	8004f50 <RCCEx_PLL3_Config>
 8003ae8:	4603      	mov	r3, r0
 8003aea:	f887 3117 	strb.w	r3, [r7, #279]	; 0x117
        /* SPI6 clock source configuration done later after clock selection check */
        break;
 8003aee:	e00a      	b.n	8003b06 <HAL_RCCEx_PeriphCLKConfig+0x5d6>
        /* SPI6 clock source configuration done later after clock selection check */
        break;
#endif

      default:
        ret = HAL_ERROR;
 8003af0:	2301      	movs	r3, #1
 8003af2:	f887 3117 	strb.w	r3, [r7, #279]	; 0x117
        break;
 8003af6:	e006      	b.n	8003b06 <HAL_RCCEx_PeriphCLKConfig+0x5d6>
        break;
 8003af8:	bf00      	nop
 8003afa:	e004      	b.n	8003b06 <HAL_RCCEx_PeriphCLKConfig+0x5d6>
        break;
 8003afc:	bf00      	nop
 8003afe:	e002      	b.n	8003b06 <HAL_RCCEx_PeriphCLKConfig+0x5d6>
        break;
 8003b00:	bf00      	nop
 8003b02:	e000      	b.n	8003b06 <HAL_RCCEx_PeriphCLKConfig+0x5d6>
        break;
 8003b04:	bf00      	nop
    }

    if (ret == HAL_OK)
 8003b06:	f897 3117 	ldrb.w	r3, [r7, #279]	; 0x117
 8003b0a:	2b00      	cmp	r3, #0
 8003b0c:	d10e      	bne.n	8003b2c <HAL_RCCEx_PeriphCLKConfig+0x5fc>
    {
      /* Set the source of SPI6 clock*/
      __HAL_RCC_SPI6_CONFIG(PeriphClkInit->Spi6ClockSelection);
 8003b0e:	4b06      	ldr	r3, [pc, #24]	; (8003b28 <HAL_RCCEx_PeriphCLKConfig+0x5f8>)
 8003b10:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003b12:	f023 41e0 	bic.w	r1, r3, #1879048192	; 0x70000000
 8003b16:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8003b1a:	f8d3 30ac 	ldr.w	r3, [r3, #172]	; 0xac
 8003b1e:	4a02      	ldr	r2, [pc, #8]	; (8003b28 <HAL_RCCEx_PeriphCLKConfig+0x5f8>)
 8003b20:	430b      	orrs	r3, r1
 8003b22:	6593      	str	r3, [r2, #88]	; 0x58
 8003b24:	e006      	b.n	8003b34 <HAL_RCCEx_PeriphCLKConfig+0x604>
 8003b26:	bf00      	nop
 8003b28:	58024400 	.word	0x58024400
    }
    else
    {
      /* set overall return value */
      status = ret;
 8003b2c:	f897 3117 	ldrb.w	r3, [r7, #279]	; 0x117
 8003b30:	f887 3116 	strb.w	r3, [r7, #278]	; 0x116
  }
#endif /*DSI*/

#if defined(FDCAN1) || defined(FDCAN2)
  /*---------------------------- FDCAN configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_FDCAN) == RCC_PERIPHCLK_FDCAN)
 8003b34:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8003b38:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003b3c:	f402 4300 	and.w	r3, r2, #32768	; 0x8000
 8003b40:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 8003b44:	2300      	movs	r3, #0
 8003b46:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
 8003b4a:	e9d7 1234 	ldrd	r1, r2, [r7, #208]	; 0xd0
 8003b4e:	460b      	mov	r3, r1
 8003b50:	4313      	orrs	r3, r2
 8003b52:	d037      	beq.n	8003bc4 <HAL_RCCEx_PeriphCLKConfig+0x694>
  {
    switch (PeriphClkInit->FdcanClockSelection)
 8003b54:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8003b58:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8003b5a:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8003b5e:	d00e      	beq.n	8003b7e <HAL_RCCEx_PeriphCLKConfig+0x64e>
 8003b60:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8003b64:	d816      	bhi.n	8003b94 <HAL_RCCEx_PeriphCLKConfig+0x664>
 8003b66:	2b00      	cmp	r3, #0
 8003b68:	d018      	beq.n	8003b9c <HAL_RCCEx_PeriphCLKConfig+0x66c>
 8003b6a:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8003b6e:	d111      	bne.n	8003b94 <HAL_RCCEx_PeriphCLKConfig+0x664>
    {
      case RCC_FDCANCLKSOURCE_PLL:      /* PLL is used as clock source for FDCAN*/
        /* Enable FDCAN Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8003b70:	4bc4      	ldr	r3, [pc, #784]	; (8003e84 <HAL_RCCEx_PeriphCLKConfig+0x954>)
 8003b72:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003b74:	4ac3      	ldr	r2, [pc, #780]	; (8003e84 <HAL_RCCEx_PeriphCLKConfig+0x954>)
 8003b76:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8003b7a:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* FDCAN clock source configuration done later after clock selection check */
        break;
 8003b7c:	e00f      	b.n	8003b9e <HAL_RCCEx_PeriphCLKConfig+0x66e>

      case RCC_FDCANCLKSOURCE_PLL2: /* PLL2 is used as clock source for FDCAN*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 8003b7e:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8003b82:	3308      	adds	r3, #8
 8003b84:	2101      	movs	r1, #1
 8003b86:	4618      	mov	r0, r3
 8003b88:	f001 f930 	bl	8004dec <RCCEx_PLL2_Config>
 8003b8c:	4603      	mov	r3, r0
 8003b8e:	f887 3117 	strb.w	r3, [r7, #279]	; 0x117

        /* FDCAN clock source configuration done later after clock selection check */
        break;
 8003b92:	e004      	b.n	8003b9e <HAL_RCCEx_PeriphCLKConfig+0x66e>
        /* HSE is used as clock source for FDCAN*/
        /* FDCAN clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8003b94:	2301      	movs	r3, #1
 8003b96:	f887 3117 	strb.w	r3, [r7, #279]	; 0x117
        break;
 8003b9a:	e000      	b.n	8003b9e <HAL_RCCEx_PeriphCLKConfig+0x66e>
        break;
 8003b9c:	bf00      	nop
    }

    if (ret == HAL_OK)
 8003b9e:	f897 3117 	ldrb.w	r3, [r7, #279]	; 0x117
 8003ba2:	2b00      	cmp	r3, #0
 8003ba4:	d10a      	bne.n	8003bbc <HAL_RCCEx_PeriphCLKConfig+0x68c>
    {
      /* Set the source of FDCAN clock*/
      __HAL_RCC_FDCAN_CONFIG(PeriphClkInit->FdcanClockSelection);
 8003ba6:	4bb7      	ldr	r3, [pc, #732]	; (8003e84 <HAL_RCCEx_PeriphCLKConfig+0x954>)
 8003ba8:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8003baa:	f023 5140 	bic.w	r1, r3, #805306368	; 0x30000000
 8003bae:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8003bb2:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8003bb4:	4ab3      	ldr	r2, [pc, #716]	; (8003e84 <HAL_RCCEx_PeriphCLKConfig+0x954>)
 8003bb6:	430b      	orrs	r3, r1
 8003bb8:	6513      	str	r3, [r2, #80]	; 0x50
 8003bba:	e003      	b.n	8003bc4 <HAL_RCCEx_PeriphCLKConfig+0x694>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8003bbc:	f897 3117 	ldrb.w	r3, [r7, #279]	; 0x117
 8003bc0:	f887 3116 	strb.w	r3, [r7, #278]	; 0x116
    }
  }
#endif /*FDCAN1 || FDCAN2*/

  /*---------------------------- FMC configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_FMC) == RCC_PERIPHCLK_FMC)
 8003bc4:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8003bc8:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003bcc:	f002 7380 	and.w	r3, r2, #16777216	; 0x1000000
 8003bd0:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 8003bd4:	2300      	movs	r3, #0
 8003bd6:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
 8003bda:	e9d7 1232 	ldrd	r1, r2, [r7, #200]	; 0xc8
 8003bde:	460b      	mov	r3, r1
 8003be0:	4313      	orrs	r3, r2
 8003be2:	d039      	beq.n	8003c58 <HAL_RCCEx_PeriphCLKConfig+0x728>
  {
    switch (PeriphClkInit->FmcClockSelection)
 8003be4:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8003be8:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8003bea:	2b03      	cmp	r3, #3
 8003bec:	d81c      	bhi.n	8003c28 <HAL_RCCEx_PeriphCLKConfig+0x6f8>
 8003bee:	a201      	add	r2, pc, #4	; (adr r2, 8003bf4 <HAL_RCCEx_PeriphCLKConfig+0x6c4>)
 8003bf0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003bf4:	08003c31 	.word	0x08003c31
 8003bf8:	08003c05 	.word	0x08003c05
 8003bfc:	08003c13 	.word	0x08003c13
 8003c00:	08003c31 	.word	0x08003c31
    {
      case RCC_FMCCLKSOURCE_PLL:      /* PLL is used as clock source for FMC*/
        /* Enable FMC Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8003c04:	4b9f      	ldr	r3, [pc, #636]	; (8003e84 <HAL_RCCEx_PeriphCLKConfig+0x954>)
 8003c06:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003c08:	4a9e      	ldr	r2, [pc, #632]	; (8003e84 <HAL_RCCEx_PeriphCLKConfig+0x954>)
 8003c0a:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8003c0e:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* FMC clock source configuration done later after clock selection check */
        break;
 8003c10:	e00f      	b.n	8003c32 <HAL_RCCEx_PeriphCLKConfig+0x702>

      case RCC_FMCCLKSOURCE_PLL2: /* PLL2 is used as clock source for FMC*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_R_UPDATE);
 8003c12:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8003c16:	3308      	adds	r3, #8
 8003c18:	2102      	movs	r1, #2
 8003c1a:	4618      	mov	r0, r3
 8003c1c:	f001 f8e6 	bl	8004dec <RCCEx_PLL2_Config>
 8003c20:	4603      	mov	r3, r0
 8003c22:	f887 3117 	strb.w	r3, [r7, #279]	; 0x117

        /* FMC clock source configuration done later after clock selection check */
        break;
 8003c26:	e004      	b.n	8003c32 <HAL_RCCEx_PeriphCLKConfig+0x702>
      case RCC_FMCCLKSOURCE_HCLK:
        /* D1/CD HCLK  clock selected as FMC kernel peripheral clock */
        break;

      default:
        ret = HAL_ERROR;
 8003c28:	2301      	movs	r3, #1
 8003c2a:	f887 3117 	strb.w	r3, [r7, #279]	; 0x117
        break;
 8003c2e:	e000      	b.n	8003c32 <HAL_RCCEx_PeriphCLKConfig+0x702>
        break;
 8003c30:	bf00      	nop
    }

    if (ret == HAL_OK)
 8003c32:	f897 3117 	ldrb.w	r3, [r7, #279]	; 0x117
 8003c36:	2b00      	cmp	r3, #0
 8003c38:	d10a      	bne.n	8003c50 <HAL_RCCEx_PeriphCLKConfig+0x720>
    {
      /* Set the source of FMC clock*/
      __HAL_RCC_FMC_CONFIG(PeriphClkInit->FmcClockSelection);
 8003c3a:	4b92      	ldr	r3, [pc, #584]	; (8003e84 <HAL_RCCEx_PeriphCLKConfig+0x954>)
 8003c3c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8003c3e:	f023 0103 	bic.w	r1, r3, #3
 8003c42:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8003c46:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8003c48:	4a8e      	ldr	r2, [pc, #568]	; (8003e84 <HAL_RCCEx_PeriphCLKConfig+0x954>)
 8003c4a:	430b      	orrs	r3, r1
 8003c4c:	64d3      	str	r3, [r2, #76]	; 0x4c
 8003c4e:	e003      	b.n	8003c58 <HAL_RCCEx_PeriphCLKConfig+0x728>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8003c50:	f897 3117 	ldrb.w	r3, [r7, #279]	; 0x117
 8003c54:	f887 3116 	strb.w	r3, [r7, #278]	; 0x116
    }
  }

  /*---------------------------- RTC configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 8003c58:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8003c5c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003c60:	f402 0380 	and.w	r3, r2, #4194304	; 0x400000
 8003c64:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 8003c68:	2300      	movs	r3, #0
 8003c6a:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
 8003c6e:	e9d7 1230 	ldrd	r1, r2, [r7, #192]	; 0xc0
 8003c72:	460b      	mov	r3, r1
 8003c74:	4313      	orrs	r3, r2
 8003c76:	f000 8099 	beq.w	8003dac <HAL_RCCEx_PeriphCLKConfig+0x87c>
  {
    /* check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable write access to Backup domain */
    SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8003c7a:	4b83      	ldr	r3, [pc, #524]	; (8003e88 <HAL_RCCEx_PeriphCLKConfig+0x958>)
 8003c7c:	681b      	ldr	r3, [r3, #0]
 8003c7e:	4a82      	ldr	r2, [pc, #520]	; (8003e88 <HAL_RCCEx_PeriphCLKConfig+0x958>)
 8003c80:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8003c84:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 8003c86:	f7fd fdc9 	bl	800181c <HAL_GetTick>
 8003c8a:	f8c7 0110 	str.w	r0, [r7, #272]	; 0x110

    while ((PWR->CR1 & PWR_CR1_DBP) == 0U)
 8003c8e:	e00b      	b.n	8003ca8 <HAL_RCCEx_PeriphCLKConfig+0x778>
    {
      if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8003c90:	f7fd fdc4 	bl	800181c <HAL_GetTick>
 8003c94:	4602      	mov	r2, r0
 8003c96:	f8d7 3110 	ldr.w	r3, [r7, #272]	; 0x110
 8003c9a:	1ad3      	subs	r3, r2, r3
 8003c9c:	2b64      	cmp	r3, #100	; 0x64
 8003c9e:	d903      	bls.n	8003ca8 <HAL_RCCEx_PeriphCLKConfig+0x778>
      {
        ret = HAL_TIMEOUT;
 8003ca0:	2303      	movs	r3, #3
 8003ca2:	f887 3117 	strb.w	r3, [r7, #279]	; 0x117
        break;
 8003ca6:	e005      	b.n	8003cb4 <HAL_RCCEx_PeriphCLKConfig+0x784>
    while ((PWR->CR1 & PWR_CR1_DBP) == 0U)
 8003ca8:	4b77      	ldr	r3, [pc, #476]	; (8003e88 <HAL_RCCEx_PeriphCLKConfig+0x958>)
 8003caa:	681b      	ldr	r3, [r3, #0]
 8003cac:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003cb0:	2b00      	cmp	r3, #0
 8003cb2:	d0ed      	beq.n	8003c90 <HAL_RCCEx_PeriphCLKConfig+0x760>
      }
    }

    if (ret == HAL_OK)
 8003cb4:	f897 3117 	ldrb.w	r3, [r7, #279]	; 0x117
 8003cb8:	2b00      	cmp	r3, #0
 8003cba:	d173      	bne.n	8003da4 <HAL_RCCEx_PeriphCLKConfig+0x874>
    {
      /* Reset the Backup domain only if the RTC Clock source selection is modified */
      if ((RCC->BDCR & RCC_BDCR_RTCSEL) != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL))
 8003cbc:	4b71      	ldr	r3, [pc, #452]	; (8003e84 <HAL_RCCEx_PeriphCLKConfig+0x954>)
 8003cbe:	6f1a      	ldr	r2, [r3, #112]	; 0x70
 8003cc0:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8003cc4:	f8d3 30b0 	ldr.w	r3, [r3, #176]	; 0xb0
 8003cc8:	4053      	eors	r3, r2
 8003cca:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8003cce:	2b00      	cmp	r3, #0
 8003cd0:	d015      	beq.n	8003cfe <HAL_RCCEx_PeriphCLKConfig+0x7ce>
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        tmpreg = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 8003cd2:	4b6c      	ldr	r3, [pc, #432]	; (8003e84 <HAL_RCCEx_PeriphCLKConfig+0x954>)
 8003cd4:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003cd6:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8003cda:	f8c7 310c 	str.w	r3, [r7, #268]	; 0x10c
        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        __HAL_RCC_BACKUPRESET_FORCE();
 8003cde:	4b69      	ldr	r3, [pc, #420]	; (8003e84 <HAL_RCCEx_PeriphCLKConfig+0x954>)
 8003ce0:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003ce2:	4a68      	ldr	r2, [pc, #416]	; (8003e84 <HAL_RCCEx_PeriphCLKConfig+0x954>)
 8003ce4:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8003ce8:	6713      	str	r3, [r2, #112]	; 0x70
        __HAL_RCC_BACKUPRESET_RELEASE();
 8003cea:	4b66      	ldr	r3, [pc, #408]	; (8003e84 <HAL_RCCEx_PeriphCLKConfig+0x954>)
 8003cec:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003cee:	4a65      	ldr	r2, [pc, #404]	; (8003e84 <HAL_RCCEx_PeriphCLKConfig+0x954>)
 8003cf0:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8003cf4:	6713      	str	r3, [r2, #112]	; 0x70
        /* Restore the Content of BDCR register */
        RCC->BDCR = tmpreg;
 8003cf6:	4a63      	ldr	r2, [pc, #396]	; (8003e84 <HAL_RCCEx_PeriphCLKConfig+0x954>)
 8003cf8:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8003cfc:	6713      	str	r3, [r2, #112]	; 0x70
      }

      /* If LSE is selected as RTC clock source (and enabled prior to Backup Domain reset), wait for LSE reactivation */
      if (PeriphClkInit->RTCClockSelection == RCC_RTCCLKSOURCE_LSE)
 8003cfe:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8003d02:	f8d3 30b0 	ldr.w	r3, [r3, #176]	; 0xb0
 8003d06:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8003d0a:	d118      	bne.n	8003d3e <HAL_RCCEx_PeriphCLKConfig+0x80e>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003d0c:	f7fd fd86 	bl	800181c <HAL_GetTick>
 8003d10:	f8c7 0110 	str.w	r0, [r7, #272]	; 0x110

        /* Wait till LSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 8003d14:	e00d      	b.n	8003d32 <HAL_RCCEx_PeriphCLKConfig+0x802>
        {
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8003d16:	f7fd fd81 	bl	800181c <HAL_GetTick>
 8003d1a:	4602      	mov	r2, r0
 8003d1c:	f8d7 3110 	ldr.w	r3, [r7, #272]	; 0x110
 8003d20:	1ad2      	subs	r2, r2, r3
 8003d22:	f241 3388 	movw	r3, #5000	; 0x1388
 8003d26:	429a      	cmp	r2, r3
 8003d28:	d903      	bls.n	8003d32 <HAL_RCCEx_PeriphCLKConfig+0x802>
          {
            ret = HAL_TIMEOUT;
 8003d2a:	2303      	movs	r3, #3
 8003d2c:	f887 3117 	strb.w	r3, [r7, #279]	; 0x117
            break;
 8003d30:	e005      	b.n	8003d3e <HAL_RCCEx_PeriphCLKConfig+0x80e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 8003d32:	4b54      	ldr	r3, [pc, #336]	; (8003e84 <HAL_RCCEx_PeriphCLKConfig+0x954>)
 8003d34:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003d36:	f003 0302 	and.w	r3, r3, #2
 8003d3a:	2b00      	cmp	r3, #0
 8003d3c:	d0eb      	beq.n	8003d16 <HAL_RCCEx_PeriphCLKConfig+0x7e6>
          }
        }
      }

      if (ret == HAL_OK)
 8003d3e:	f897 3117 	ldrb.w	r3, [r7, #279]	; 0x117
 8003d42:	2b00      	cmp	r3, #0
 8003d44:	d129      	bne.n	8003d9a <HAL_RCCEx_PeriphCLKConfig+0x86a>
      {
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8003d46:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8003d4a:	f8d3 30b0 	ldr.w	r3, [r3, #176]	; 0xb0
 8003d4e:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8003d52:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8003d56:	d10e      	bne.n	8003d76 <HAL_RCCEx_PeriphCLKConfig+0x846>
 8003d58:	4b4a      	ldr	r3, [pc, #296]	; (8003e84 <HAL_RCCEx_PeriphCLKConfig+0x954>)
 8003d5a:	691b      	ldr	r3, [r3, #16]
 8003d5c:	f423 517c 	bic.w	r1, r3, #16128	; 0x3f00
 8003d60:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8003d64:	f8d3 30b0 	ldr.w	r3, [r3, #176]	; 0xb0
 8003d68:	091a      	lsrs	r2, r3, #4
 8003d6a:	4b48      	ldr	r3, [pc, #288]	; (8003e8c <HAL_RCCEx_PeriphCLKConfig+0x95c>)
 8003d6c:	4013      	ands	r3, r2
 8003d6e:	4a45      	ldr	r2, [pc, #276]	; (8003e84 <HAL_RCCEx_PeriphCLKConfig+0x954>)
 8003d70:	430b      	orrs	r3, r1
 8003d72:	6113      	str	r3, [r2, #16]
 8003d74:	e005      	b.n	8003d82 <HAL_RCCEx_PeriphCLKConfig+0x852>
 8003d76:	4b43      	ldr	r3, [pc, #268]	; (8003e84 <HAL_RCCEx_PeriphCLKConfig+0x954>)
 8003d78:	691b      	ldr	r3, [r3, #16]
 8003d7a:	4a42      	ldr	r2, [pc, #264]	; (8003e84 <HAL_RCCEx_PeriphCLKConfig+0x954>)
 8003d7c:	f423 537c 	bic.w	r3, r3, #16128	; 0x3f00
 8003d80:	6113      	str	r3, [r2, #16]
 8003d82:	4b40      	ldr	r3, [pc, #256]	; (8003e84 <HAL_RCCEx_PeriphCLKConfig+0x954>)
 8003d84:	6f19      	ldr	r1, [r3, #112]	; 0x70
 8003d86:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8003d8a:	f8d3 30b0 	ldr.w	r3, [r3, #176]	; 0xb0
 8003d8e:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8003d92:	4a3c      	ldr	r2, [pc, #240]	; (8003e84 <HAL_RCCEx_PeriphCLKConfig+0x954>)
 8003d94:	430b      	orrs	r3, r1
 8003d96:	6713      	str	r3, [r2, #112]	; 0x70
 8003d98:	e008      	b.n	8003dac <HAL_RCCEx_PeriphCLKConfig+0x87c>
      }
      else
      {
        /* set overall return value */
        status = ret;
 8003d9a:	f897 3117 	ldrb.w	r3, [r7, #279]	; 0x117
 8003d9e:	f887 3116 	strb.w	r3, [r7, #278]	; 0x116
 8003da2:	e003      	b.n	8003dac <HAL_RCCEx_PeriphCLKConfig+0x87c>
      }
    }
    else
    {
      /* set overall return value */
      status = ret;
 8003da4:	f897 3117 	ldrb.w	r3, [r7, #279]	; 0x117
 8003da8:	f887 3116 	strb.w	r3, [r7, #278]	; 0x116
    }
  }


  /*-------------------------- USART1/6 configuration --------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART16) == RCC_PERIPHCLK_USART16)
 8003dac:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8003db0:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003db4:	f002 0301 	and.w	r3, r2, #1
 8003db8:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 8003dbc:	2300      	movs	r3, #0
 8003dbe:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
 8003dc2:	e9d7 122e 	ldrd	r1, r2, [r7, #184]	; 0xb8
 8003dc6:	460b      	mov	r3, r1
 8003dc8:	4313      	orrs	r3, r2
 8003dca:	f000 808f 	beq.w	8003eec <HAL_RCCEx_PeriphCLKConfig+0x9bc>
  {
    switch (PeriphClkInit->Usart16ClockSelection)
 8003dce:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8003dd2:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8003dd4:	2b28      	cmp	r3, #40	; 0x28
 8003dd6:	d871      	bhi.n	8003ebc <HAL_RCCEx_PeriphCLKConfig+0x98c>
 8003dd8:	a201      	add	r2, pc, #4	; (adr r2, 8003de0 <HAL_RCCEx_PeriphCLKConfig+0x8b0>)
 8003dda:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003dde:	bf00      	nop
 8003de0:	08003ec5 	.word	0x08003ec5
 8003de4:	08003ebd 	.word	0x08003ebd
 8003de8:	08003ebd 	.word	0x08003ebd
 8003dec:	08003ebd 	.word	0x08003ebd
 8003df0:	08003ebd 	.word	0x08003ebd
 8003df4:	08003ebd 	.word	0x08003ebd
 8003df8:	08003ebd 	.word	0x08003ebd
 8003dfc:	08003ebd 	.word	0x08003ebd
 8003e00:	08003e91 	.word	0x08003e91
 8003e04:	08003ebd 	.word	0x08003ebd
 8003e08:	08003ebd 	.word	0x08003ebd
 8003e0c:	08003ebd 	.word	0x08003ebd
 8003e10:	08003ebd 	.word	0x08003ebd
 8003e14:	08003ebd 	.word	0x08003ebd
 8003e18:	08003ebd 	.word	0x08003ebd
 8003e1c:	08003ebd 	.word	0x08003ebd
 8003e20:	08003ea7 	.word	0x08003ea7
 8003e24:	08003ebd 	.word	0x08003ebd
 8003e28:	08003ebd 	.word	0x08003ebd
 8003e2c:	08003ebd 	.word	0x08003ebd
 8003e30:	08003ebd 	.word	0x08003ebd
 8003e34:	08003ebd 	.word	0x08003ebd
 8003e38:	08003ebd 	.word	0x08003ebd
 8003e3c:	08003ebd 	.word	0x08003ebd
 8003e40:	08003ec5 	.word	0x08003ec5
 8003e44:	08003ebd 	.word	0x08003ebd
 8003e48:	08003ebd 	.word	0x08003ebd
 8003e4c:	08003ebd 	.word	0x08003ebd
 8003e50:	08003ebd 	.word	0x08003ebd
 8003e54:	08003ebd 	.word	0x08003ebd
 8003e58:	08003ebd 	.word	0x08003ebd
 8003e5c:	08003ebd 	.word	0x08003ebd
 8003e60:	08003ec5 	.word	0x08003ec5
 8003e64:	08003ebd 	.word	0x08003ebd
 8003e68:	08003ebd 	.word	0x08003ebd
 8003e6c:	08003ebd 	.word	0x08003ebd
 8003e70:	08003ebd 	.word	0x08003ebd
 8003e74:	08003ebd 	.word	0x08003ebd
 8003e78:	08003ebd 	.word	0x08003ebd
 8003e7c:	08003ebd 	.word	0x08003ebd
 8003e80:	08003ec5 	.word	0x08003ec5
 8003e84:	58024400 	.word	0x58024400
 8003e88:	58024800 	.word	0x58024800
 8003e8c:	00ffffcf 	.word	0x00ffffcf
      case RCC_USART16CLKSOURCE_PCLK2: /* CD/D2 PCLK2 as clock source for USART1/6 */
        /* USART1/6 clock source configuration done later after clock selection check */
        break;

      case RCC_USART16CLKSOURCE_PLL2: /* PLL2 is used as clock source for USART1/6 */
        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 8003e90:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8003e94:	3308      	adds	r3, #8
 8003e96:	2101      	movs	r1, #1
 8003e98:	4618      	mov	r0, r3
 8003e9a:	f000 ffa7 	bl	8004dec <RCCEx_PLL2_Config>
 8003e9e:	4603      	mov	r3, r0
 8003ea0:	f887 3117 	strb.w	r3, [r7, #279]	; 0x117
        /* USART1/6 clock source configuration done later after clock selection check */
        break;
 8003ea4:	e00f      	b.n	8003ec6 <HAL_RCCEx_PeriphCLKConfig+0x996>

      case RCC_USART16CLKSOURCE_PLL3: /* PLL3 is used as clock source for USART1/6 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 8003ea6:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8003eaa:	3328      	adds	r3, #40	; 0x28
 8003eac:	2101      	movs	r1, #1
 8003eae:	4618      	mov	r0, r3
 8003eb0:	f001 f84e 	bl	8004f50 <RCCEx_PLL3_Config>
 8003eb4:	4603      	mov	r3, r0
 8003eb6:	f887 3117 	strb.w	r3, [r7, #279]	; 0x117
        /* USART1/6 clock source configuration done later after clock selection check */
        break;
 8003eba:	e004      	b.n	8003ec6 <HAL_RCCEx_PeriphCLKConfig+0x996>
        /* LSE,  oscillator is used as source of USART1/6 clock */
        /* USART1/6 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8003ebc:	2301      	movs	r3, #1
 8003ebe:	f887 3117 	strb.w	r3, [r7, #279]	; 0x117
        break;
 8003ec2:	e000      	b.n	8003ec6 <HAL_RCCEx_PeriphCLKConfig+0x996>
        break;
 8003ec4:	bf00      	nop
    }

    if (ret == HAL_OK)
 8003ec6:	f897 3117 	ldrb.w	r3, [r7, #279]	; 0x117
 8003eca:	2b00      	cmp	r3, #0
 8003ecc:	d10a      	bne.n	8003ee4 <HAL_RCCEx_PeriphCLKConfig+0x9b4>
    {
      /* Set the source of USART1/6 clock */
      __HAL_RCC_USART16_CONFIG(PeriphClkInit->Usart16ClockSelection);
 8003ece:	4bbf      	ldr	r3, [pc, #764]	; (80041cc <HAL_RCCEx_PeriphCLKConfig+0xc9c>)
 8003ed0:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003ed2:	f023 0138 	bic.w	r1, r3, #56	; 0x38
 8003ed6:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8003eda:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8003edc:	4abb      	ldr	r2, [pc, #748]	; (80041cc <HAL_RCCEx_PeriphCLKConfig+0xc9c>)
 8003ede:	430b      	orrs	r3, r1
 8003ee0:	6553      	str	r3, [r2, #84]	; 0x54
 8003ee2:	e003      	b.n	8003eec <HAL_RCCEx_PeriphCLKConfig+0x9bc>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8003ee4:	f897 3117 	ldrb.w	r3, [r7, #279]	; 0x117
 8003ee8:	f887 3116 	strb.w	r3, [r7, #278]	; 0x116
    }
  }

  /*-------------------------- USART2/3/4/5/7/8 Configuration --------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART234578) == RCC_PERIPHCLK_USART234578)
 8003eec:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8003ef0:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003ef4:	f002 0302 	and.w	r3, r2, #2
 8003ef8:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 8003efc:	2300      	movs	r3, #0
 8003efe:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 8003f02:	e9d7 122c 	ldrd	r1, r2, [r7, #176]	; 0xb0
 8003f06:	460b      	mov	r3, r1
 8003f08:	4313      	orrs	r3, r2
 8003f0a:	d041      	beq.n	8003f90 <HAL_RCCEx_PeriphCLKConfig+0xa60>
  {
    switch (PeriphClkInit->Usart234578ClockSelection)
 8003f0c:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8003f10:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8003f12:	2b05      	cmp	r3, #5
 8003f14:	d824      	bhi.n	8003f60 <HAL_RCCEx_PeriphCLKConfig+0xa30>
 8003f16:	a201      	add	r2, pc, #4	; (adr r2, 8003f1c <HAL_RCCEx_PeriphCLKConfig+0x9ec>)
 8003f18:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003f1c:	08003f69 	.word	0x08003f69
 8003f20:	08003f35 	.word	0x08003f35
 8003f24:	08003f4b 	.word	0x08003f4b
 8003f28:	08003f69 	.word	0x08003f69
 8003f2c:	08003f69 	.word	0x08003f69
 8003f30:	08003f69 	.word	0x08003f69
      case RCC_USART234578CLKSOURCE_PCLK1: /* CD/D2 PCLK1 as clock source for USART2/3/4/5/7/8 */
        /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
        break;

      case RCC_USART234578CLKSOURCE_PLL2: /* PLL2 is used as clock source for USART2/3/4/5/7/8 */
        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 8003f34:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8003f38:	3308      	adds	r3, #8
 8003f3a:	2101      	movs	r1, #1
 8003f3c:	4618      	mov	r0, r3
 8003f3e:	f000 ff55 	bl	8004dec <RCCEx_PLL2_Config>
 8003f42:	4603      	mov	r3, r0
 8003f44:	f887 3117 	strb.w	r3, [r7, #279]	; 0x117
        /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
        break;
 8003f48:	e00f      	b.n	8003f6a <HAL_RCCEx_PeriphCLKConfig+0xa3a>

      case RCC_USART234578CLKSOURCE_PLL3: /* PLL3 is used as clock source for USART2/3/4/5/7/8 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 8003f4a:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8003f4e:	3328      	adds	r3, #40	; 0x28
 8003f50:	2101      	movs	r1, #1
 8003f52:	4618      	mov	r0, r3
 8003f54:	f000 fffc 	bl	8004f50 <RCCEx_PLL3_Config>
 8003f58:	4603      	mov	r3, r0
 8003f5a:	f887 3117 	strb.w	r3, [r7, #279]	; 0x117
        /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
        break;
 8003f5e:	e004      	b.n	8003f6a <HAL_RCCEx_PeriphCLKConfig+0xa3a>
        /* LSE,  oscillator is used as source of USART2/3/4/5/7/8 clock */
        /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8003f60:	2301      	movs	r3, #1
 8003f62:	f887 3117 	strb.w	r3, [r7, #279]	; 0x117
        break;
 8003f66:	e000      	b.n	8003f6a <HAL_RCCEx_PeriphCLKConfig+0xa3a>
        break;
 8003f68:	bf00      	nop
    }

    if (ret == HAL_OK)
 8003f6a:	f897 3117 	ldrb.w	r3, [r7, #279]	; 0x117
 8003f6e:	2b00      	cmp	r3, #0
 8003f70:	d10a      	bne.n	8003f88 <HAL_RCCEx_PeriphCLKConfig+0xa58>
    {
      /* Set the source of USART2/3/4/5/7/8 clock */
      __HAL_RCC_USART234578_CONFIG(PeriphClkInit->Usart234578ClockSelection);
 8003f72:	4b96      	ldr	r3, [pc, #600]	; (80041cc <HAL_RCCEx_PeriphCLKConfig+0xc9c>)
 8003f74:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003f76:	f023 0107 	bic.w	r1, r3, #7
 8003f7a:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8003f7e:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8003f80:	4a92      	ldr	r2, [pc, #584]	; (80041cc <HAL_RCCEx_PeriphCLKConfig+0xc9c>)
 8003f82:	430b      	orrs	r3, r1
 8003f84:	6553      	str	r3, [r2, #84]	; 0x54
 8003f86:	e003      	b.n	8003f90 <HAL_RCCEx_PeriphCLKConfig+0xa60>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8003f88:	f897 3117 	ldrb.w	r3, [r7, #279]	; 0x117
 8003f8c:	f887 3116 	strb.w	r3, [r7, #278]	; 0x116
    }
  }

  /*-------------------------- LPUART1 Configuration -------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 8003f90:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8003f94:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003f98:	f002 0304 	and.w	r3, r2, #4
 8003f9c:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
 8003fa0:	2300      	movs	r3, #0
 8003fa2:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
 8003fa6:	e9d7 122a 	ldrd	r1, r2, [r7, #168]	; 0xa8
 8003faa:	460b      	mov	r3, r1
 8003fac:	4313      	orrs	r3, r2
 8003fae:	d044      	beq.n	800403a <HAL_RCCEx_PeriphCLKConfig+0xb0a>
  {
    switch (PeriphClkInit->Lpuart1ClockSelection)
 8003fb0:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8003fb4:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003fb8:	2b05      	cmp	r3, #5
 8003fba:	d825      	bhi.n	8004008 <HAL_RCCEx_PeriphCLKConfig+0xad8>
 8003fbc:	a201      	add	r2, pc, #4	; (adr r2, 8003fc4 <HAL_RCCEx_PeriphCLKConfig+0xa94>)
 8003fbe:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003fc2:	bf00      	nop
 8003fc4:	08004011 	.word	0x08004011
 8003fc8:	08003fdd 	.word	0x08003fdd
 8003fcc:	08003ff3 	.word	0x08003ff3
 8003fd0:	08004011 	.word	0x08004011
 8003fd4:	08004011 	.word	0x08004011
 8003fd8:	08004011 	.word	0x08004011
      case RCC_LPUART1CLKSOURCE_PCLK4: /* SRD/D3 PCLK1 (PCLK4) as clock source for LPUART1 */
        /* LPUART1 clock source configuration done later after clock selection check */
        break;

      case RCC_LPUART1CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPUART1 */
        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 8003fdc:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8003fe0:	3308      	adds	r3, #8
 8003fe2:	2101      	movs	r1, #1
 8003fe4:	4618      	mov	r0, r3
 8003fe6:	f000 ff01 	bl	8004dec <RCCEx_PLL2_Config>
 8003fea:	4603      	mov	r3, r0
 8003fec:	f887 3117 	strb.w	r3, [r7, #279]	; 0x117
        /* LPUART1 clock source configuration done later after clock selection check */
        break;
 8003ff0:	e00f      	b.n	8004012 <HAL_RCCEx_PeriphCLKConfig+0xae2>

      case RCC_LPUART1CLKSOURCE_PLL3: /* PLL3 is used as clock source for LPUART1 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 8003ff2:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8003ff6:	3328      	adds	r3, #40	; 0x28
 8003ff8:	2101      	movs	r1, #1
 8003ffa:	4618      	mov	r0, r3
 8003ffc:	f000 ffa8 	bl	8004f50 <RCCEx_PLL3_Config>
 8004000:	4603      	mov	r3, r0
 8004002:	f887 3117 	strb.w	r3, [r7, #279]	; 0x117
        /* LPUART1 clock source configuration done later after clock selection check */
        break;
 8004006:	e004      	b.n	8004012 <HAL_RCCEx_PeriphCLKConfig+0xae2>
        /* LSE,  oscillator is used as source of LPUART1 clock */
        /* LPUART1 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8004008:	2301      	movs	r3, #1
 800400a:	f887 3117 	strb.w	r3, [r7, #279]	; 0x117
        break;
 800400e:	e000      	b.n	8004012 <HAL_RCCEx_PeriphCLKConfig+0xae2>
        break;
 8004010:	bf00      	nop
    }

    if (ret == HAL_OK)
 8004012:	f897 3117 	ldrb.w	r3, [r7, #279]	; 0x117
 8004016:	2b00      	cmp	r3, #0
 8004018:	d10b      	bne.n	8004032 <HAL_RCCEx_PeriphCLKConfig+0xb02>
    {
      /* Set the source of LPUART1 clock */
      __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 800401a:	4b6c      	ldr	r3, [pc, #432]	; (80041cc <HAL_RCCEx_PeriphCLKConfig+0xc9c>)
 800401c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800401e:	f023 0107 	bic.w	r1, r3, #7
 8004022:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8004026:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800402a:	4a68      	ldr	r2, [pc, #416]	; (80041cc <HAL_RCCEx_PeriphCLKConfig+0xc9c>)
 800402c:	430b      	orrs	r3, r1
 800402e:	6593      	str	r3, [r2, #88]	; 0x58
 8004030:	e003      	b.n	800403a <HAL_RCCEx_PeriphCLKConfig+0xb0a>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8004032:	f897 3117 	ldrb.w	r3, [r7, #279]	; 0x117
 8004036:	f887 3116 	strb.w	r3, [r7, #278]	; 0x116
    }
  }

  /*---------------------------- LPTIM1 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == RCC_PERIPHCLK_LPTIM1)
 800403a:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800403e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004042:	f002 0320 	and.w	r3, r2, #32
 8004046:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
 800404a:	2300      	movs	r3, #0
 800404c:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
 8004050:	e9d7 1228 	ldrd	r1, r2, [r7, #160]	; 0xa0
 8004054:	460b      	mov	r3, r1
 8004056:	4313      	orrs	r3, r2
 8004058:	d055      	beq.n	8004106 <HAL_RCCEx_PeriphCLKConfig+0xbd6>
  {
    switch (PeriphClkInit->Lptim1ClockSelection)
 800405a:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800405e:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8004062:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8004066:	d033      	beq.n	80040d0 <HAL_RCCEx_PeriphCLKConfig+0xba0>
 8004068:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 800406c:	d82c      	bhi.n	80040c8 <HAL_RCCEx_PeriphCLKConfig+0xb98>
 800406e:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8004072:	d02f      	beq.n	80040d4 <HAL_RCCEx_PeriphCLKConfig+0xba4>
 8004074:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8004078:	d826      	bhi.n	80040c8 <HAL_RCCEx_PeriphCLKConfig+0xb98>
 800407a:	f1b3 5f40 	cmp.w	r3, #805306368	; 0x30000000
 800407e:	d02b      	beq.n	80040d8 <HAL_RCCEx_PeriphCLKConfig+0xba8>
 8004080:	f1b3 5f40 	cmp.w	r3, #805306368	; 0x30000000
 8004084:	d820      	bhi.n	80040c8 <HAL_RCCEx_PeriphCLKConfig+0xb98>
 8004086:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 800408a:	d012      	beq.n	80040b2 <HAL_RCCEx_PeriphCLKConfig+0xb82>
 800408c:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8004090:	d81a      	bhi.n	80040c8 <HAL_RCCEx_PeriphCLKConfig+0xb98>
 8004092:	2b00      	cmp	r3, #0
 8004094:	d022      	beq.n	80040dc <HAL_RCCEx_PeriphCLKConfig+0xbac>
 8004096:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 800409a:	d115      	bne.n	80040c8 <HAL_RCCEx_PeriphCLKConfig+0xb98>
        /* LPTIM1 clock source configuration done later after clock selection check */
        break;

      case RCC_LPTIM1CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPTIM1*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 800409c:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 80040a0:	3308      	adds	r3, #8
 80040a2:	2100      	movs	r1, #0
 80040a4:	4618      	mov	r0, r3
 80040a6:	f000 fea1 	bl	8004dec <RCCEx_PLL2_Config>
 80040aa:	4603      	mov	r3, r0
 80040ac:	f887 3117 	strb.w	r3, [r7, #279]	; 0x117

        /* LPTIM1 clock source configuration done later after clock selection check */
        break;
 80040b0:	e015      	b.n	80040de <HAL_RCCEx_PeriphCLKConfig+0xbae>

      case RCC_LPTIM1CLKSOURCE_PLL3:  /* PLL3 is used as clock source for LPTIM1*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 80040b2:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 80040b6:	3328      	adds	r3, #40	; 0x28
 80040b8:	2102      	movs	r1, #2
 80040ba:	4618      	mov	r0, r3
 80040bc:	f000 ff48 	bl	8004f50 <RCCEx_PLL3_Config>
 80040c0:	4603      	mov	r3, r0
 80040c2:	f887 3117 	strb.w	r3, [r7, #279]	; 0x117

        /* LPTIM1 clock source configuration done later after clock selection check */
        break;
 80040c6:	e00a      	b.n	80040de <HAL_RCCEx_PeriphCLKConfig+0xbae>
        /* HSI, HSE, or CSI oscillator is used as source of LPTIM1 clock */
        /* LPTIM1 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 80040c8:	2301      	movs	r3, #1
 80040ca:	f887 3117 	strb.w	r3, [r7, #279]	; 0x117
        break;
 80040ce:	e006      	b.n	80040de <HAL_RCCEx_PeriphCLKConfig+0xbae>
        break;
 80040d0:	bf00      	nop
 80040d2:	e004      	b.n	80040de <HAL_RCCEx_PeriphCLKConfig+0xbae>
        break;
 80040d4:	bf00      	nop
 80040d6:	e002      	b.n	80040de <HAL_RCCEx_PeriphCLKConfig+0xbae>
        break;
 80040d8:	bf00      	nop
 80040da:	e000      	b.n	80040de <HAL_RCCEx_PeriphCLKConfig+0xbae>
        break;
 80040dc:	bf00      	nop
    }

    if (ret == HAL_OK)
 80040de:	f897 3117 	ldrb.w	r3, [r7, #279]	; 0x117
 80040e2:	2b00      	cmp	r3, #0
 80040e4:	d10b      	bne.n	80040fe <HAL_RCCEx_PeriphCLKConfig+0xbce>
    {
      /* Set the source of LPTIM1 clock*/
      __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 80040e6:	4b39      	ldr	r3, [pc, #228]	; (80041cc <HAL_RCCEx_PeriphCLKConfig+0xc9c>)
 80040e8:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80040ea:	f023 41e0 	bic.w	r1, r3, #1879048192	; 0x70000000
 80040ee:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 80040f2:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 80040f6:	4a35      	ldr	r2, [pc, #212]	; (80041cc <HAL_RCCEx_PeriphCLKConfig+0xc9c>)
 80040f8:	430b      	orrs	r3, r1
 80040fa:	6553      	str	r3, [r2, #84]	; 0x54
 80040fc:	e003      	b.n	8004106 <HAL_RCCEx_PeriphCLKConfig+0xbd6>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80040fe:	f897 3117 	ldrb.w	r3, [r7, #279]	; 0x117
 8004102:	f887 3116 	strb.w	r3, [r7, #278]	; 0x116
    }
  }

  /*---------------------------- LPTIM2 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM2) == RCC_PERIPHCLK_LPTIM2)
 8004106:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800410a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800410e:	f002 0340 	and.w	r3, r2, #64	; 0x40
 8004112:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
 8004116:	2300      	movs	r3, #0
 8004118:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
 800411c:	e9d7 1226 	ldrd	r1, r2, [r7, #152]	; 0x98
 8004120:	460b      	mov	r3, r1
 8004122:	4313      	orrs	r3, r2
 8004124:	d058      	beq.n	80041d8 <HAL_RCCEx_PeriphCLKConfig+0xca8>
  {
    switch (PeriphClkInit->Lptim2ClockSelection)
 8004126:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800412a:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 800412e:	f5b3 5fa0 	cmp.w	r3, #5120	; 0x1400
 8004132:	d033      	beq.n	800419c <HAL_RCCEx_PeriphCLKConfig+0xc6c>
 8004134:	f5b3 5fa0 	cmp.w	r3, #5120	; 0x1400
 8004138:	d82c      	bhi.n	8004194 <HAL_RCCEx_PeriphCLKConfig+0xc64>
 800413a:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800413e:	d02f      	beq.n	80041a0 <HAL_RCCEx_PeriphCLKConfig+0xc70>
 8004140:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8004144:	d826      	bhi.n	8004194 <HAL_RCCEx_PeriphCLKConfig+0xc64>
 8004146:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 800414a:	d02b      	beq.n	80041a4 <HAL_RCCEx_PeriphCLKConfig+0xc74>
 800414c:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 8004150:	d820      	bhi.n	8004194 <HAL_RCCEx_PeriphCLKConfig+0xc64>
 8004152:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8004156:	d012      	beq.n	800417e <HAL_RCCEx_PeriphCLKConfig+0xc4e>
 8004158:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 800415c:	d81a      	bhi.n	8004194 <HAL_RCCEx_PeriphCLKConfig+0xc64>
 800415e:	2b00      	cmp	r3, #0
 8004160:	d022      	beq.n	80041a8 <HAL_RCCEx_PeriphCLKConfig+0xc78>
 8004162:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8004166:	d115      	bne.n	8004194 <HAL_RCCEx_PeriphCLKConfig+0xc64>
        /* LPTIM2 clock source configuration done later after clock selection check */
        break;

      case RCC_LPTIM2CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPTIM2*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 8004168:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800416c:	3308      	adds	r3, #8
 800416e:	2100      	movs	r1, #0
 8004170:	4618      	mov	r0, r3
 8004172:	f000 fe3b 	bl	8004dec <RCCEx_PLL2_Config>
 8004176:	4603      	mov	r3, r0
 8004178:	f887 3117 	strb.w	r3, [r7, #279]	; 0x117

        /* LPTIM2 clock source configuration done later after clock selection check */
        break;
 800417c:	e015      	b.n	80041aa <HAL_RCCEx_PeriphCLKConfig+0xc7a>

      case RCC_LPTIM2CLKSOURCE_PLL3:  /* PLL3 is used as clock source for LPTIM2*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 800417e:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8004182:	3328      	adds	r3, #40	; 0x28
 8004184:	2102      	movs	r1, #2
 8004186:	4618      	mov	r0, r3
 8004188:	f000 fee2 	bl	8004f50 <RCCEx_PLL3_Config>
 800418c:	4603      	mov	r3, r0
 800418e:	f887 3117 	strb.w	r3, [r7, #279]	; 0x117

        /* LPTIM2 clock source configuration done later after clock selection check */
        break;
 8004192:	e00a      	b.n	80041aa <HAL_RCCEx_PeriphCLKConfig+0xc7a>
        /* HSI, HSE, or CSI oscillator is used as source of LPTIM2 clock */
        /* LPTIM2 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8004194:	2301      	movs	r3, #1
 8004196:	f887 3117 	strb.w	r3, [r7, #279]	; 0x117
        break;
 800419a:	e006      	b.n	80041aa <HAL_RCCEx_PeriphCLKConfig+0xc7a>
        break;
 800419c:	bf00      	nop
 800419e:	e004      	b.n	80041aa <HAL_RCCEx_PeriphCLKConfig+0xc7a>
        break;
 80041a0:	bf00      	nop
 80041a2:	e002      	b.n	80041aa <HAL_RCCEx_PeriphCLKConfig+0xc7a>
        break;
 80041a4:	bf00      	nop
 80041a6:	e000      	b.n	80041aa <HAL_RCCEx_PeriphCLKConfig+0xc7a>
        break;
 80041a8:	bf00      	nop
    }

    if (ret == HAL_OK)
 80041aa:	f897 3117 	ldrb.w	r3, [r7, #279]	; 0x117
 80041ae:	2b00      	cmp	r3, #0
 80041b0:	d10e      	bne.n	80041d0 <HAL_RCCEx_PeriphCLKConfig+0xca0>
    {
      /* Set the source of LPTIM2 clock*/
      __HAL_RCC_LPTIM2_CONFIG(PeriphClkInit->Lptim2ClockSelection);
 80041b2:	4b06      	ldr	r3, [pc, #24]	; (80041cc <HAL_RCCEx_PeriphCLKConfig+0xc9c>)
 80041b4:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80041b6:	f423 51e0 	bic.w	r1, r3, #7168	; 0x1c00
 80041ba:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 80041be:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 80041c2:	4a02      	ldr	r2, [pc, #8]	; (80041cc <HAL_RCCEx_PeriphCLKConfig+0xc9c>)
 80041c4:	430b      	orrs	r3, r1
 80041c6:	6593      	str	r3, [r2, #88]	; 0x58
 80041c8:	e006      	b.n	80041d8 <HAL_RCCEx_PeriphCLKConfig+0xca8>
 80041ca:	bf00      	nop
 80041cc:	58024400 	.word	0x58024400
    }
    else
    {
      /* set overall return value */
      status = ret;
 80041d0:	f897 3117 	ldrb.w	r3, [r7, #279]	; 0x117
 80041d4:	f887 3116 	strb.w	r3, [r7, #278]	; 0x116
    }
  }

  /*---------------------------- LPTIM345 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM345) == RCC_PERIPHCLK_LPTIM345)
 80041d8:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 80041dc:	e9d3 2300 	ldrd	r2, r3, [r3]
 80041e0:	f002 0380 	and.w	r3, r2, #128	; 0x80
 80041e4:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
 80041e8:	2300      	movs	r3, #0
 80041ea:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
 80041ee:	e9d7 1224 	ldrd	r1, r2, [r7, #144]	; 0x90
 80041f2:	460b      	mov	r3, r1
 80041f4:	4313      	orrs	r3, r2
 80041f6:	d055      	beq.n	80042a4 <HAL_RCCEx_PeriphCLKConfig+0xd74>
  {
    switch (PeriphClkInit->Lptim345ClockSelection)
 80041f8:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 80041fc:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 8004200:	f5b3 4f20 	cmp.w	r3, #40960	; 0xa000
 8004204:	d033      	beq.n	800426e <HAL_RCCEx_PeriphCLKConfig+0xd3e>
 8004206:	f5b3 4f20 	cmp.w	r3, #40960	; 0xa000
 800420a:	d82c      	bhi.n	8004266 <HAL_RCCEx_PeriphCLKConfig+0xd36>
 800420c:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8004210:	d02f      	beq.n	8004272 <HAL_RCCEx_PeriphCLKConfig+0xd42>
 8004212:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8004216:	d826      	bhi.n	8004266 <HAL_RCCEx_PeriphCLKConfig+0xd36>
 8004218:	f5b3 4fc0 	cmp.w	r3, #24576	; 0x6000
 800421c:	d02b      	beq.n	8004276 <HAL_RCCEx_PeriphCLKConfig+0xd46>
 800421e:	f5b3 4fc0 	cmp.w	r3, #24576	; 0x6000
 8004222:	d820      	bhi.n	8004266 <HAL_RCCEx_PeriphCLKConfig+0xd36>
 8004224:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8004228:	d012      	beq.n	8004250 <HAL_RCCEx_PeriphCLKConfig+0xd20>
 800422a:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 800422e:	d81a      	bhi.n	8004266 <HAL_RCCEx_PeriphCLKConfig+0xd36>
 8004230:	2b00      	cmp	r3, #0
 8004232:	d022      	beq.n	800427a <HAL_RCCEx_PeriphCLKConfig+0xd4a>
 8004234:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8004238:	d115      	bne.n	8004266 <HAL_RCCEx_PeriphCLKConfig+0xd36>
      case RCC_LPTIM345CLKSOURCE_PCLK4:      /* SRD/D3 PCLK1 (PCLK4) as clock source for LPTIM3/4/5 */
        /* LPTIM3/4/5 clock source configuration done later after clock selection check */
        break;

      case RCC_LPTIM345CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPTIM3/4/5 */
        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 800423a:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800423e:	3308      	adds	r3, #8
 8004240:	2100      	movs	r1, #0
 8004242:	4618      	mov	r0, r3
 8004244:	f000 fdd2 	bl	8004dec <RCCEx_PLL2_Config>
 8004248:	4603      	mov	r3, r0
 800424a:	f887 3117 	strb.w	r3, [r7, #279]	; 0x117

        /* LPTIM3/4/5 clock source configuration done later after clock selection check */
        break;
 800424e:	e015      	b.n	800427c <HAL_RCCEx_PeriphCLKConfig+0xd4c>

      case RCC_LPTIM345CLKSOURCE_PLL3:  /* PLL3 is used as clock source for LPTIM3/4/5 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 8004250:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8004254:	3328      	adds	r3, #40	; 0x28
 8004256:	2102      	movs	r1, #2
 8004258:	4618      	mov	r0, r3
 800425a:	f000 fe79 	bl	8004f50 <RCCEx_PLL3_Config>
 800425e:	4603      	mov	r3, r0
 8004260:	f887 3117 	strb.w	r3, [r7, #279]	; 0x117

        /* LPTIM3/4/5 clock source configuration done later after clock selection check */
        break;
 8004264:	e00a      	b.n	800427c <HAL_RCCEx_PeriphCLKConfig+0xd4c>
        /* HSI, HSE, or CSI oscillator is used as source of LPTIM3/4/5 clock */
        /* LPTIM3/4/5 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8004266:	2301      	movs	r3, #1
 8004268:	f887 3117 	strb.w	r3, [r7, #279]	; 0x117
        break;
 800426c:	e006      	b.n	800427c <HAL_RCCEx_PeriphCLKConfig+0xd4c>
        break;
 800426e:	bf00      	nop
 8004270:	e004      	b.n	800427c <HAL_RCCEx_PeriphCLKConfig+0xd4c>
        break;
 8004272:	bf00      	nop
 8004274:	e002      	b.n	800427c <HAL_RCCEx_PeriphCLKConfig+0xd4c>
        break;
 8004276:	bf00      	nop
 8004278:	e000      	b.n	800427c <HAL_RCCEx_PeriphCLKConfig+0xd4c>
        break;
 800427a:	bf00      	nop
    }

    if (ret == HAL_OK)
 800427c:	f897 3117 	ldrb.w	r3, [r7, #279]	; 0x117
 8004280:	2b00      	cmp	r3, #0
 8004282:	d10b      	bne.n	800429c <HAL_RCCEx_PeriphCLKConfig+0xd6c>
    {
      /* Set the source of LPTIM3/4/5 clock */
      __HAL_RCC_LPTIM345_CONFIG(PeriphClkInit->Lptim345ClockSelection);
 8004284:	4ba0      	ldr	r3, [pc, #640]	; (8004508 <HAL_RCCEx_PeriphCLKConfig+0xfd8>)
 8004286:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8004288:	f423 4160 	bic.w	r1, r3, #57344	; 0xe000
 800428c:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8004290:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 8004294:	4a9c      	ldr	r2, [pc, #624]	; (8004508 <HAL_RCCEx_PeriphCLKConfig+0xfd8>)
 8004296:	430b      	orrs	r3, r1
 8004298:	6593      	str	r3, [r2, #88]	; 0x58
 800429a:	e003      	b.n	80042a4 <HAL_RCCEx_PeriphCLKConfig+0xd74>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800429c:	f897 3117 	ldrb.w	r3, [r7, #279]	; 0x117
 80042a0:	f887 3116 	strb.w	r3, [r7, #278]	; 0x116
    }
  }

  /*------------------------------ I2C1/2/3/5* Configuration ------------------------*/
#if defined(I2C5)
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1235) == RCC_PERIPHCLK_I2C1235)
 80042a4:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 80042a8:	e9d3 2300 	ldrd	r2, r3, [r3]
 80042ac:	f002 0308 	and.w	r3, r2, #8
 80042b0:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
 80042b4:	2300      	movs	r3, #0
 80042b6:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
 80042ba:	e9d7 1222 	ldrd	r1, r2, [r7, #136]	; 0x88
 80042be:	460b      	mov	r3, r1
 80042c0:	4313      	orrs	r3, r2
 80042c2:	d01e      	beq.n	8004302 <HAL_RCCEx_PeriphCLKConfig+0xdd2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1235CLKSOURCE(PeriphClkInit->I2c1235ClockSelection));

    if ((PeriphClkInit->I2c1235ClockSelection) == RCC_I2C1235CLKSOURCE_PLL3)
 80042c4:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 80042c8:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 80042cc:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80042d0:	d10c      	bne.n	80042ec <HAL_RCCEx_PeriphCLKConfig+0xdbc>
    {
      if (RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE) != HAL_OK)
 80042d2:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 80042d6:	3328      	adds	r3, #40	; 0x28
 80042d8:	2102      	movs	r1, #2
 80042da:	4618      	mov	r0, r3
 80042dc:	f000 fe38 	bl	8004f50 <RCCEx_PLL3_Config>
 80042e0:	4603      	mov	r3, r0
 80042e2:	2b00      	cmp	r3, #0
 80042e4:	d002      	beq.n	80042ec <HAL_RCCEx_PeriphCLKConfig+0xdbc>
      {
        status = HAL_ERROR;
 80042e6:	2301      	movs	r3, #1
 80042e8:	f887 3116 	strb.w	r3, [r7, #278]	; 0x116
      }
    }

    __HAL_RCC_I2C1235_CONFIG(PeriphClkInit->I2c1235ClockSelection);
 80042ec:	4b86      	ldr	r3, [pc, #536]	; (8004508 <HAL_RCCEx_PeriphCLKConfig+0xfd8>)
 80042ee:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80042f0:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 80042f4:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 80042f8:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 80042fc:	4a82      	ldr	r2, [pc, #520]	; (8004508 <HAL_RCCEx_PeriphCLKConfig+0xfd8>)
 80042fe:	430b      	orrs	r3, r1
 8004300:	6553      	str	r3, [r2, #84]	; 0x54

  }
#endif /* I2C5 */

  /*------------------------------ I2C4 Configuration ------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C4) == RCC_PERIPHCLK_I2C4)
 8004302:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8004306:	e9d3 2300 	ldrd	r2, r3, [r3]
 800430a:	f002 0310 	and.w	r3, r2, #16
 800430e:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
 8004312:	2300      	movs	r3, #0
 8004314:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
 8004318:	e9d7 1220 	ldrd	r1, r2, [r7, #128]	; 0x80
 800431c:	460b      	mov	r3, r1
 800431e:	4313      	orrs	r3, r2
 8004320:	d01e      	beq.n	8004360 <HAL_RCCEx_PeriphCLKConfig+0xe30>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C4CLKSOURCE(PeriphClkInit->I2c4ClockSelection));

    if ((PeriphClkInit->I2c4ClockSelection) == RCC_I2C4CLKSOURCE_PLL3)
 8004322:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8004326:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 800432a:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800432e:	d10c      	bne.n	800434a <HAL_RCCEx_PeriphCLKConfig+0xe1a>
    {
      if (RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE) != HAL_OK)
 8004330:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8004334:	3328      	adds	r3, #40	; 0x28
 8004336:	2102      	movs	r1, #2
 8004338:	4618      	mov	r0, r3
 800433a:	f000 fe09 	bl	8004f50 <RCCEx_PLL3_Config>
 800433e:	4603      	mov	r3, r0
 8004340:	2b00      	cmp	r3, #0
 8004342:	d002      	beq.n	800434a <HAL_RCCEx_PeriphCLKConfig+0xe1a>
      {
        status = HAL_ERROR;
 8004344:	2301      	movs	r3, #1
 8004346:	f887 3116 	strb.w	r3, [r7, #278]	; 0x116
      }
    }

    __HAL_RCC_I2C4_CONFIG(PeriphClkInit->I2c4ClockSelection);
 800434a:	4b6f      	ldr	r3, [pc, #444]	; (8004508 <HAL_RCCEx_PeriphCLKConfig+0xfd8>)
 800434c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800434e:	f423 7140 	bic.w	r1, r3, #768	; 0x300
 8004352:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8004356:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 800435a:	4a6b      	ldr	r2, [pc, #428]	; (8004508 <HAL_RCCEx_PeriphCLKConfig+0xfd8>)
 800435c:	430b      	orrs	r3, r1
 800435e:	6593      	str	r3, [r2, #88]	; 0x58

  }

  /*---------------------------- ADC configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 8004360:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8004364:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004368:	f402 2300 	and.w	r3, r2, #524288	; 0x80000
 800436c:	67bb      	str	r3, [r7, #120]	; 0x78
 800436e:	2300      	movs	r3, #0
 8004370:	67fb      	str	r3, [r7, #124]	; 0x7c
 8004372:	e9d7 121e 	ldrd	r1, r2, [r7, #120]	; 0x78
 8004376:	460b      	mov	r3, r1
 8004378:	4313      	orrs	r3, r2
 800437a:	d03e      	beq.n	80043fa <HAL_RCCEx_PeriphCLKConfig+0xeca>
  {
    switch (PeriphClkInit->AdcClockSelection)
 800437c:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8004380:	f8d3 30a0 	ldr.w	r3, [r3, #160]	; 0xa0
 8004384:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8004388:	d022      	beq.n	80043d0 <HAL_RCCEx_PeriphCLKConfig+0xea0>
 800438a:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 800438e:	d81b      	bhi.n	80043c8 <HAL_RCCEx_PeriphCLKConfig+0xe98>
 8004390:	2b00      	cmp	r3, #0
 8004392:	d003      	beq.n	800439c <HAL_RCCEx_PeriphCLKConfig+0xe6c>
 8004394:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8004398:	d00b      	beq.n	80043b2 <HAL_RCCEx_PeriphCLKConfig+0xe82>
 800439a:	e015      	b.n	80043c8 <HAL_RCCEx_PeriphCLKConfig+0xe98>
    {

      case RCC_ADCCLKSOURCE_PLL2: /* PLL2 is used as clock source for ADC*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 800439c:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 80043a0:	3308      	adds	r3, #8
 80043a2:	2100      	movs	r1, #0
 80043a4:	4618      	mov	r0, r3
 80043a6:	f000 fd21 	bl	8004dec <RCCEx_PLL2_Config>
 80043aa:	4603      	mov	r3, r0
 80043ac:	f887 3117 	strb.w	r3, [r7, #279]	; 0x117

        /* ADC clock source configuration done later after clock selection check */
        break;
 80043b0:	e00f      	b.n	80043d2 <HAL_RCCEx_PeriphCLKConfig+0xea2>

      case RCC_ADCCLKSOURCE_PLL3:  /* PLL3 is used as clock source for ADC*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 80043b2:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 80043b6:	3328      	adds	r3, #40	; 0x28
 80043b8:	2102      	movs	r1, #2
 80043ba:	4618      	mov	r0, r3
 80043bc:	f000 fdc8 	bl	8004f50 <RCCEx_PLL3_Config>
 80043c0:	4603      	mov	r3, r0
 80043c2:	f887 3117 	strb.w	r3, [r7, #279]	; 0x117

        /* ADC clock source configuration done later after clock selection check */
        break;
 80043c6:	e004      	b.n	80043d2 <HAL_RCCEx_PeriphCLKConfig+0xea2>
        /* HSI, HSE, or CSI oscillator is used as source of ADC clock */
        /* ADC clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 80043c8:	2301      	movs	r3, #1
 80043ca:	f887 3117 	strb.w	r3, [r7, #279]	; 0x117
        break;
 80043ce:	e000      	b.n	80043d2 <HAL_RCCEx_PeriphCLKConfig+0xea2>
        break;
 80043d0:	bf00      	nop
    }

    if (ret == HAL_OK)
 80043d2:	f897 3117 	ldrb.w	r3, [r7, #279]	; 0x117
 80043d6:	2b00      	cmp	r3, #0
 80043d8:	d10b      	bne.n	80043f2 <HAL_RCCEx_PeriphCLKConfig+0xec2>
    {
      /* Set the source of ADC clock*/
      __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 80043da:	4b4b      	ldr	r3, [pc, #300]	; (8004508 <HAL_RCCEx_PeriphCLKConfig+0xfd8>)
 80043dc:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80043de:	f423 3140 	bic.w	r1, r3, #196608	; 0x30000
 80043e2:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 80043e6:	f8d3 30a0 	ldr.w	r3, [r3, #160]	; 0xa0
 80043ea:	4a47      	ldr	r2, [pc, #284]	; (8004508 <HAL_RCCEx_PeriphCLKConfig+0xfd8>)
 80043ec:	430b      	orrs	r3, r1
 80043ee:	6593      	str	r3, [r2, #88]	; 0x58
 80043f0:	e003      	b.n	80043fa <HAL_RCCEx_PeriphCLKConfig+0xeca>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80043f2:	f897 3117 	ldrb.w	r3, [r7, #279]	; 0x117
 80043f6:	f887 3116 	strb.w	r3, [r7, #278]	; 0x116
    }
  }

  /*------------------------------ USB Configuration -------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == RCC_PERIPHCLK_USB)
 80043fa:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 80043fe:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004402:	f402 2380 	and.w	r3, r2, #262144	; 0x40000
 8004406:	673b      	str	r3, [r7, #112]	; 0x70
 8004408:	2300      	movs	r3, #0
 800440a:	677b      	str	r3, [r7, #116]	; 0x74
 800440c:	e9d7 121c 	ldrd	r1, r2, [r7, #112]	; 0x70
 8004410:	460b      	mov	r3, r1
 8004412:	4313      	orrs	r3, r2
 8004414:	d03b      	beq.n	800448e <HAL_RCCEx_PeriphCLKConfig+0xf5e>
  {

    switch (PeriphClkInit->UsbClockSelection)
 8004416:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800441a:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800441e:	f5b3 1f40 	cmp.w	r3, #3145728	; 0x300000
 8004422:	d01f      	beq.n	8004464 <HAL_RCCEx_PeriphCLKConfig+0xf34>
 8004424:	f5b3 1f40 	cmp.w	r3, #3145728	; 0x300000
 8004428:	d818      	bhi.n	800445c <HAL_RCCEx_PeriphCLKConfig+0xf2c>
 800442a:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 800442e:	d003      	beq.n	8004438 <HAL_RCCEx_PeriphCLKConfig+0xf08>
 8004430:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 8004434:	d007      	beq.n	8004446 <HAL_RCCEx_PeriphCLKConfig+0xf16>
 8004436:	e011      	b.n	800445c <HAL_RCCEx_PeriphCLKConfig+0xf2c>
    {
      case RCC_USBCLKSOURCE_PLL:      /* PLL is used as clock source for USB*/
        /* Enable USB Clock output generated form System USB . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8004438:	4b33      	ldr	r3, [pc, #204]	; (8004508 <HAL_RCCEx_PeriphCLKConfig+0xfd8>)
 800443a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800443c:	4a32      	ldr	r2, [pc, #200]	; (8004508 <HAL_RCCEx_PeriphCLKConfig+0xfd8>)
 800443e:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8004442:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* USB clock source configuration done later after clock selection check */
        break;
 8004444:	e00f      	b.n	8004466 <HAL_RCCEx_PeriphCLKConfig+0xf36>

      case RCC_USBCLKSOURCE_PLL3: /* PLL3 is used as clock source for USB*/

        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 8004446:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800444a:	3328      	adds	r3, #40	; 0x28
 800444c:	2101      	movs	r1, #1
 800444e:	4618      	mov	r0, r3
 8004450:	f000 fd7e 	bl	8004f50 <RCCEx_PLL3_Config>
 8004454:	4603      	mov	r3, r0
 8004456:	f887 3117 	strb.w	r3, [r7, #279]	; 0x117

        /* USB clock source configuration done later after clock selection check */
        break;
 800445a:	e004      	b.n	8004466 <HAL_RCCEx_PeriphCLKConfig+0xf36>
        /* HSI48 oscillator is used as source of USB clock */
        /* USB clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 800445c:	2301      	movs	r3, #1
 800445e:	f887 3117 	strb.w	r3, [r7, #279]	; 0x117
        break;
 8004462:	e000      	b.n	8004466 <HAL_RCCEx_PeriphCLKConfig+0xf36>
        break;
 8004464:	bf00      	nop
    }

    if (ret == HAL_OK)
 8004466:	f897 3117 	ldrb.w	r3, [r7, #279]	; 0x117
 800446a:	2b00      	cmp	r3, #0
 800446c:	d10b      	bne.n	8004486 <HAL_RCCEx_PeriphCLKConfig+0xf56>
    {
      /* Set the source of USB clock*/
      __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 800446e:	4b26      	ldr	r3, [pc, #152]	; (8004508 <HAL_RCCEx_PeriphCLKConfig+0xfd8>)
 8004470:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004472:	f423 1140 	bic.w	r1, r3, #3145728	; 0x300000
 8004476:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800447a:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800447e:	4a22      	ldr	r2, [pc, #136]	; (8004508 <HAL_RCCEx_PeriphCLKConfig+0xfd8>)
 8004480:	430b      	orrs	r3, r1
 8004482:	6553      	str	r3, [r2, #84]	; 0x54
 8004484:	e003      	b.n	800448e <HAL_RCCEx_PeriphCLKConfig+0xf5e>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8004486:	f897 3117 	ldrb.w	r3, [r7, #279]	; 0x117
 800448a:	f887 3116 	strb.w	r3, [r7, #278]	; 0x116
    }

  }

  /*------------------------------------- SDMMC Configuration ------------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC) == RCC_PERIPHCLK_SDMMC)
 800448e:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8004492:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004496:	f402 3380 	and.w	r3, r2, #65536	; 0x10000
 800449a:	66bb      	str	r3, [r7, #104]	; 0x68
 800449c:	2300      	movs	r3, #0
 800449e:	66fb      	str	r3, [r7, #108]	; 0x6c
 80044a0:	e9d7 121a 	ldrd	r1, r2, [r7, #104]	; 0x68
 80044a4:	460b      	mov	r3, r1
 80044a6:	4313      	orrs	r3, r2
 80044a8:	d034      	beq.n	8004514 <HAL_RCCEx_PeriphCLKConfig+0xfe4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SDMMC(PeriphClkInit->SdmmcClockSelection));

    switch (PeriphClkInit->SdmmcClockSelection)
 80044aa:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 80044ae:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80044b0:	2b00      	cmp	r3, #0
 80044b2:	d003      	beq.n	80044bc <HAL_RCCEx_PeriphCLKConfig+0xf8c>
 80044b4:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80044b8:	d007      	beq.n	80044ca <HAL_RCCEx_PeriphCLKConfig+0xf9a>
 80044ba:	e011      	b.n	80044e0 <HAL_RCCEx_PeriphCLKConfig+0xfb0>
    {
      case RCC_SDMMCCLKSOURCE_PLL:      /* PLL is used as clock source for SDMMC*/
        /* Enable SDMMC Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 80044bc:	4b12      	ldr	r3, [pc, #72]	; (8004508 <HAL_RCCEx_PeriphCLKConfig+0xfd8>)
 80044be:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80044c0:	4a11      	ldr	r2, [pc, #68]	; (8004508 <HAL_RCCEx_PeriphCLKConfig+0xfd8>)
 80044c2:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80044c6:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* SDMMC clock source configuration done later after clock selection check */
        break;
 80044c8:	e00e      	b.n	80044e8 <HAL_RCCEx_PeriphCLKConfig+0xfb8>

      case RCC_SDMMCCLKSOURCE_PLL2: /* PLL2 is used as clock source for SDMMC*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_R_UPDATE);
 80044ca:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 80044ce:	3308      	adds	r3, #8
 80044d0:	2102      	movs	r1, #2
 80044d2:	4618      	mov	r0, r3
 80044d4:	f000 fc8a 	bl	8004dec <RCCEx_PLL2_Config>
 80044d8:	4603      	mov	r3, r0
 80044da:	f887 3117 	strb.w	r3, [r7, #279]	; 0x117

        /* SDMMC clock source configuration done later after clock selection check */
        break;
 80044de:	e003      	b.n	80044e8 <HAL_RCCEx_PeriphCLKConfig+0xfb8>

      default:
        ret = HAL_ERROR;
 80044e0:	2301      	movs	r3, #1
 80044e2:	f887 3117 	strb.w	r3, [r7, #279]	; 0x117
        break;
 80044e6:	bf00      	nop
    }

    if (ret == HAL_OK)
 80044e8:	f897 3117 	ldrb.w	r3, [r7, #279]	; 0x117
 80044ec:	2b00      	cmp	r3, #0
 80044ee:	d10d      	bne.n	800450c <HAL_RCCEx_PeriphCLKConfig+0xfdc>
    {
      /* Set the source of SDMMC clock*/
      __HAL_RCC_SDMMC_CONFIG(PeriphClkInit->SdmmcClockSelection);
 80044f0:	4b05      	ldr	r3, [pc, #20]	; (8004508 <HAL_RCCEx_PeriphCLKConfig+0xfd8>)
 80044f2:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80044f4:	f423 3180 	bic.w	r1, r3, #65536	; 0x10000
 80044f8:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 80044fc:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80044fe:	4a02      	ldr	r2, [pc, #8]	; (8004508 <HAL_RCCEx_PeriphCLKConfig+0xfd8>)
 8004500:	430b      	orrs	r3, r1
 8004502:	64d3      	str	r3, [r2, #76]	; 0x4c
 8004504:	e006      	b.n	8004514 <HAL_RCCEx_PeriphCLKConfig+0xfe4>
 8004506:	bf00      	nop
 8004508:	58024400 	.word	0x58024400
    }
    else
    {
      /* set overall return value */
      status = ret;
 800450c:	f897 3117 	ldrb.w	r3, [r7, #279]	; 0x117
 8004510:	f887 3116 	strb.w	r3, [r7, #278]	; 0x116
    }
  }

#if defined(LTDC)
  /*-------------------------------------- LTDC Configuration -----------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LTDC) == RCC_PERIPHCLK_LTDC)
 8004514:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8004518:	e9d3 2300 	ldrd	r2, r3, [r3]
 800451c:	f002 5300 	and.w	r3, r2, #536870912	; 0x20000000
 8004520:	663b      	str	r3, [r7, #96]	; 0x60
 8004522:	2300      	movs	r3, #0
 8004524:	667b      	str	r3, [r7, #100]	; 0x64
 8004526:	e9d7 1218 	ldrd	r1, r2, [r7, #96]	; 0x60
 800452a:	460b      	mov	r3, r1
 800452c:	4313      	orrs	r3, r2
 800452e:	d00c      	beq.n	800454a <HAL_RCCEx_PeriphCLKConfig+0x101a>
  {
    if (RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE) != HAL_OK)
 8004530:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8004534:	3328      	adds	r3, #40	; 0x28
 8004536:	2102      	movs	r1, #2
 8004538:	4618      	mov	r0, r3
 800453a:	f000 fd09 	bl	8004f50 <RCCEx_PLL3_Config>
 800453e:	4603      	mov	r3, r0
 8004540:	2b00      	cmp	r3, #0
 8004542:	d002      	beq.n	800454a <HAL_RCCEx_PeriphCLKConfig+0x101a>
    {
      status = HAL_ERROR;
 8004544:	2301      	movs	r3, #1
 8004546:	f887 3116 	strb.w	r3, [r7, #278]	; 0x116
    }
  }
#endif /* LTDC */

  /*------------------------------ RNG Configuration -------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG) == RCC_PERIPHCLK_RNG)
 800454a:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800454e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004552:	f402 3300 	and.w	r3, r2, #131072	; 0x20000
 8004556:	65bb      	str	r3, [r7, #88]	; 0x58
 8004558:	2300      	movs	r3, #0
 800455a:	65fb      	str	r3, [r7, #92]	; 0x5c
 800455c:	e9d7 1216 	ldrd	r1, r2, [r7, #88]	; 0x58
 8004560:	460b      	mov	r3, r1
 8004562:	4313      	orrs	r3, r2
 8004564:	d036      	beq.n	80045d4 <HAL_RCCEx_PeriphCLKConfig+0x10a4>
  {

    switch (PeriphClkInit->RngClockSelection)
 8004566:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800456a:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800456c:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8004570:	d018      	beq.n	80045a4 <HAL_RCCEx_PeriphCLKConfig+0x1074>
 8004572:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8004576:	d811      	bhi.n	800459c <HAL_RCCEx_PeriphCLKConfig+0x106c>
 8004578:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800457c:	d014      	beq.n	80045a8 <HAL_RCCEx_PeriphCLKConfig+0x1078>
 800457e:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8004582:	d80b      	bhi.n	800459c <HAL_RCCEx_PeriphCLKConfig+0x106c>
 8004584:	2b00      	cmp	r3, #0
 8004586:	d011      	beq.n	80045ac <HAL_RCCEx_PeriphCLKConfig+0x107c>
 8004588:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800458c:	d106      	bne.n	800459c <HAL_RCCEx_PeriphCLKConfig+0x106c>
    {
      case RCC_RNGCLKSOURCE_PLL:     /* PLL is used as clock source for RNG*/
        /* Enable RNG Clock output generated form System RNG . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 800458e:	4bb7      	ldr	r3, [pc, #732]	; (800486c <HAL_RCCEx_PeriphCLKConfig+0x133c>)
 8004590:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004592:	4ab6      	ldr	r2, [pc, #728]	; (800486c <HAL_RCCEx_PeriphCLKConfig+0x133c>)
 8004594:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8004598:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* RNG clock source configuration done later after clock selection check */
        break;
 800459a:	e008      	b.n	80045ae <HAL_RCCEx_PeriphCLKConfig+0x107e>
        /* HSI48 oscillator is used as source of RNG clock */
        /* RNG clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 800459c:	2301      	movs	r3, #1
 800459e:	f887 3117 	strb.w	r3, [r7, #279]	; 0x117
        break;
 80045a2:	e004      	b.n	80045ae <HAL_RCCEx_PeriphCLKConfig+0x107e>
        break;
 80045a4:	bf00      	nop
 80045a6:	e002      	b.n	80045ae <HAL_RCCEx_PeriphCLKConfig+0x107e>
        break;
 80045a8:	bf00      	nop
 80045aa:	e000      	b.n	80045ae <HAL_RCCEx_PeriphCLKConfig+0x107e>
        break;
 80045ac:	bf00      	nop
    }

    if (ret == HAL_OK)
 80045ae:	f897 3117 	ldrb.w	r3, [r7, #279]	; 0x117
 80045b2:	2b00      	cmp	r3, #0
 80045b4:	d10a      	bne.n	80045cc <HAL_RCCEx_PeriphCLKConfig+0x109c>
    {
      /* Set the source of RNG clock*/
      __HAL_RCC_RNG_CONFIG(PeriphClkInit->RngClockSelection);
 80045b6:	4bad      	ldr	r3, [pc, #692]	; (800486c <HAL_RCCEx_PeriphCLKConfig+0x133c>)
 80045b8:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80045ba:	f423 7140 	bic.w	r1, r3, #768	; 0x300
 80045be:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 80045c2:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 80045c4:	4aa9      	ldr	r2, [pc, #676]	; (800486c <HAL_RCCEx_PeriphCLKConfig+0x133c>)
 80045c6:	430b      	orrs	r3, r1
 80045c8:	6553      	str	r3, [r2, #84]	; 0x54
 80045ca:	e003      	b.n	80045d4 <HAL_RCCEx_PeriphCLKConfig+0x10a4>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80045cc:	f897 3117 	ldrb.w	r3, [r7, #279]	; 0x117
 80045d0:	f887 3116 	strb.w	r3, [r7, #278]	; 0x116
    }

  }

  /*------------------------------ SWPMI1 Configuration ------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SWPMI1) == RCC_PERIPHCLK_SWPMI1)
 80045d4:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 80045d8:	e9d3 2300 	ldrd	r2, r3, [r3]
 80045dc:	f402 1380 	and.w	r3, r2, #1048576	; 0x100000
 80045e0:	653b      	str	r3, [r7, #80]	; 0x50
 80045e2:	2300      	movs	r3, #0
 80045e4:	657b      	str	r3, [r7, #84]	; 0x54
 80045e6:	e9d7 1214 	ldrd	r1, r2, [r7, #80]	; 0x50
 80045ea:	460b      	mov	r3, r1
 80045ec:	4313      	orrs	r3, r2
 80045ee:	d009      	beq.n	8004604 <HAL_RCCEx_PeriphCLKConfig+0x10d4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SWPMI1CLKSOURCE(PeriphClkInit->Swpmi1ClockSelection));

    /* Configure the SWPMI1 interface clock source */
    __HAL_RCC_SWPMI1_CONFIG(PeriphClkInit->Swpmi1ClockSelection);
 80045f0:	4b9e      	ldr	r3, [pc, #632]	; (800486c <HAL_RCCEx_PeriphCLKConfig+0x133c>)
 80045f2:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80045f4:	f023 4100 	bic.w	r1, r3, #2147483648	; 0x80000000
 80045f8:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 80045fc:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80045fe:	4a9b      	ldr	r2, [pc, #620]	; (800486c <HAL_RCCEx_PeriphCLKConfig+0x133c>)
 8004600:	430b      	orrs	r3, r1
 8004602:	6513      	str	r3, [r2, #80]	; 0x50
    /* Configure the HRTIM1 clock source */
    __HAL_RCC_HRTIM1_CONFIG(PeriphClkInit->Hrtim1ClockSelection);
  }
#endif  /*HRTIM1*/
  /*------------------------------ DFSDM1 Configuration ------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DFSDM1) == RCC_PERIPHCLK_DFSDM1)
 8004604:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8004608:	e9d3 2300 	ldrd	r2, r3, [r3]
 800460c:	f402 1300 	and.w	r3, r2, #2097152	; 0x200000
 8004610:	64bb      	str	r3, [r7, #72]	; 0x48
 8004612:	2300      	movs	r3, #0
 8004614:	64fb      	str	r3, [r7, #76]	; 0x4c
 8004616:	e9d7 1212 	ldrd	r1, r2, [r7, #72]	; 0x48
 800461a:	460b      	mov	r3, r1
 800461c:	4313      	orrs	r3, r2
 800461e:	d009      	beq.n	8004634 <HAL_RCCEx_PeriphCLKConfig+0x1104>
  {
    /* Check the parameters */
    assert_param(IS_RCC_DFSDM1CLKSOURCE(PeriphClkInit->Dfsdm1ClockSelection));

    /* Configure the DFSDM1 interface clock source */
    __HAL_RCC_DFSDM1_CONFIG(PeriphClkInit->Dfsdm1ClockSelection);
 8004620:	4b92      	ldr	r3, [pc, #584]	; (800486c <HAL_RCCEx_PeriphCLKConfig+0x133c>)
 8004622:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8004624:	f023 7180 	bic.w	r1, r3, #16777216	; 0x1000000
 8004628:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800462c:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 800462e:	4a8f      	ldr	r2, [pc, #572]	; (800486c <HAL_RCCEx_PeriphCLKConfig+0x133c>)
 8004630:	430b      	orrs	r3, r1
 8004632:	6513      	str	r3, [r2, #80]	; 0x50
    __HAL_RCC_DFSDM2_CONFIG(PeriphClkInit->Dfsdm2ClockSelection);
  }
#endif  /* DFSDM2 */

  /*------------------------------------ TIM configuration --------------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM) == RCC_PERIPHCLK_TIM)
 8004634:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8004638:	e9d3 2300 	ldrd	r2, r3, [r3]
 800463c:	f002 4380 	and.w	r3, r2, #1073741824	; 0x40000000
 8004640:	643b      	str	r3, [r7, #64]	; 0x40
 8004642:	2300      	movs	r3, #0
 8004644:	647b      	str	r3, [r7, #68]	; 0x44
 8004646:	e9d7 1210 	ldrd	r1, r2, [r7, #64]	; 0x40
 800464a:	460b      	mov	r3, r1
 800464c:	4313      	orrs	r3, r2
 800464e:	d00e      	beq.n	800466e <HAL_RCCEx_PeriphCLKConfig+0x113e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIMPRES(PeriphClkInit->TIMPresSelection));

    /* Configure Timer Prescaler */
    __HAL_RCC_TIMCLKPRESCALER(PeriphClkInit->TIMPresSelection);
 8004650:	4b86      	ldr	r3, [pc, #536]	; (800486c <HAL_RCCEx_PeriphCLKConfig+0x133c>)
 8004652:	691b      	ldr	r3, [r3, #16]
 8004654:	4a85      	ldr	r2, [pc, #532]	; (800486c <HAL_RCCEx_PeriphCLKConfig+0x133c>)
 8004656:	f423 4300 	bic.w	r3, r3, #32768	; 0x8000
 800465a:	6113      	str	r3, [r2, #16]
 800465c:	4b83      	ldr	r3, [pc, #524]	; (800486c <HAL_RCCEx_PeriphCLKConfig+0x133c>)
 800465e:	6919      	ldr	r1, [r3, #16]
 8004660:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8004664:	f8d3 30b4 	ldr.w	r3, [r3, #180]	; 0xb4
 8004668:	4a80      	ldr	r2, [pc, #512]	; (800486c <HAL_RCCEx_PeriphCLKConfig+0x133c>)
 800466a:	430b      	orrs	r3, r1
 800466c:	6113      	str	r3, [r2, #16]
  }

  /*------------------------------------ CKPER configuration --------------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CKPER) == RCC_PERIPHCLK_CKPER)
 800466e:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8004672:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004676:	f002 4300 	and.w	r3, r2, #2147483648	; 0x80000000
 800467a:	63bb      	str	r3, [r7, #56]	; 0x38
 800467c:	2300      	movs	r3, #0
 800467e:	63fb      	str	r3, [r7, #60]	; 0x3c
 8004680:	e9d7 120e 	ldrd	r1, r2, [r7, #56]	; 0x38
 8004684:	460b      	mov	r3, r1
 8004686:	4313      	orrs	r3, r2
 8004688:	d009      	beq.n	800469e <HAL_RCCEx_PeriphCLKConfig+0x116e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CLKPSOURCE(PeriphClkInit->CkperClockSelection));

    /* Configure the CKPER clock source */
    __HAL_RCC_CLKP_CONFIG(PeriphClkInit->CkperClockSelection);
 800468a:	4b78      	ldr	r3, [pc, #480]	; (800486c <HAL_RCCEx_PeriphCLKConfig+0x133c>)
 800468c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800468e:	f023 5140 	bic.w	r1, r3, #805306368	; 0x30000000
 8004692:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8004696:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004698:	4a74      	ldr	r2, [pc, #464]	; (800486c <HAL_RCCEx_PeriphCLKConfig+0x133c>)
 800469a:	430b      	orrs	r3, r1
 800469c:	64d3      	str	r3, [r2, #76]	; 0x4c
  }

  /*------------------------------ CEC Configuration ------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CEC) == RCC_PERIPHCLK_CEC)
 800469e:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 80046a2:	e9d3 2300 	ldrd	r2, r3, [r3]
 80046a6:	f402 0300 	and.w	r3, r2, #8388608	; 0x800000
 80046aa:	633b      	str	r3, [r7, #48]	; 0x30
 80046ac:	2300      	movs	r3, #0
 80046ae:	637b      	str	r3, [r7, #52]	; 0x34
 80046b0:	e9d7 120c 	ldrd	r1, r2, [r7, #48]	; 0x30
 80046b4:	460b      	mov	r3, r1
 80046b6:	4313      	orrs	r3, r2
 80046b8:	d00a      	beq.n	80046d0 <HAL_RCCEx_PeriphCLKConfig+0x11a0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CECCLKSOURCE(PeriphClkInit->CecClockSelection));

    /* Configure the CEC interface clock source */
    __HAL_RCC_CEC_CONFIG(PeriphClkInit->CecClockSelection);
 80046ba:	4b6c      	ldr	r3, [pc, #432]	; (800486c <HAL_RCCEx_PeriphCLKConfig+0x133c>)
 80046bc:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80046be:	f423 0140 	bic.w	r1, r3, #12582912	; 0xc00000
 80046c2:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 80046c6:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80046ca:	4a68      	ldr	r2, [pc, #416]	; (800486c <HAL_RCCEx_PeriphCLKConfig+0x133c>)
 80046cc:	430b      	orrs	r3, r1
 80046ce:	6553      	str	r3, [r2, #84]	; 0x54
  }

  /*---------------------------- PLL2 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL2_DIVP) == RCC_PERIPHCLK_PLL2_DIVP)
 80046d0:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 80046d4:	e9d3 2300 	ldrd	r2, r3, [r3]
 80046d8:	2100      	movs	r1, #0
 80046da:	62b9      	str	r1, [r7, #40]	; 0x28
 80046dc:	f003 0301 	and.w	r3, r3, #1
 80046e0:	62fb      	str	r3, [r7, #44]	; 0x2c
 80046e2:	e9d7 120a 	ldrd	r1, r2, [r7, #40]	; 0x28
 80046e6:	460b      	mov	r3, r1
 80046e8:	4313      	orrs	r3, r2
 80046ea:	d011      	beq.n	8004710 <HAL_RCCEx_PeriphCLKConfig+0x11e0>
  {
    ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 80046ec:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 80046f0:	3308      	adds	r3, #8
 80046f2:	2100      	movs	r1, #0
 80046f4:	4618      	mov	r0, r3
 80046f6:	f000 fb79 	bl	8004dec <RCCEx_PLL2_Config>
 80046fa:	4603      	mov	r3, r0
 80046fc:	f887 3117 	strb.w	r3, [r7, #279]	; 0x117
    
    if (ret == HAL_OK)
 8004700:	f897 3117 	ldrb.w	r3, [r7, #279]	; 0x117
 8004704:	2b00      	cmp	r3, #0
 8004706:	d003      	beq.n	8004710 <HAL_RCCEx_PeriphCLKConfig+0x11e0>
      /*Nothing to do*/
    }
    else
    {
      /* set overall return value */
      status = ret;
 8004708:	f897 3117 	ldrb.w	r3, [r7, #279]	; 0x117
 800470c:	f887 3116 	strb.w	r3, [r7, #278]	; 0x116
    } 
  }
  
  
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL2_DIVQ) == RCC_PERIPHCLK_PLL2_DIVQ)
 8004710:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8004714:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004718:	2100      	movs	r1, #0
 800471a:	6239      	str	r1, [r7, #32]
 800471c:	f003 0302 	and.w	r3, r3, #2
 8004720:	627b      	str	r3, [r7, #36]	; 0x24
 8004722:	e9d7 1208 	ldrd	r1, r2, [r7, #32]
 8004726:	460b      	mov	r3, r1
 8004728:	4313      	orrs	r3, r2
 800472a:	d011      	beq.n	8004750 <HAL_RCCEx_PeriphCLKConfig+0x1220>
  {
    ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 800472c:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8004730:	3308      	adds	r3, #8
 8004732:	2101      	movs	r1, #1
 8004734:	4618      	mov	r0, r3
 8004736:	f000 fb59 	bl	8004dec <RCCEx_PLL2_Config>
 800473a:	4603      	mov	r3, r0
 800473c:	f887 3117 	strb.w	r3, [r7, #279]	; 0x117
    
    if (ret == HAL_OK)
 8004740:	f897 3117 	ldrb.w	r3, [r7, #279]	; 0x117
 8004744:	2b00      	cmp	r3, #0
 8004746:	d003      	beq.n	8004750 <HAL_RCCEx_PeriphCLKConfig+0x1220>
      /*Nothing to do*/
    }
    else
    {
      /* set overall return value */
      status = ret;
 8004748:	f897 3117 	ldrb.w	r3, [r7, #279]	; 0x117
 800474c:	f887 3116 	strb.w	r3, [r7, #278]	; 0x116
    }
  }
  
  
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL2_DIVR) == RCC_PERIPHCLK_PLL2_DIVR)
 8004750:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8004754:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004758:	2100      	movs	r1, #0
 800475a:	61b9      	str	r1, [r7, #24]
 800475c:	f003 0304 	and.w	r3, r3, #4
 8004760:	61fb      	str	r3, [r7, #28]
 8004762:	e9d7 1206 	ldrd	r1, r2, [r7, #24]
 8004766:	460b      	mov	r3, r1
 8004768:	4313      	orrs	r3, r2
 800476a:	d011      	beq.n	8004790 <HAL_RCCEx_PeriphCLKConfig+0x1260>
  {
    ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_R_UPDATE);
 800476c:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8004770:	3308      	adds	r3, #8
 8004772:	2102      	movs	r1, #2
 8004774:	4618      	mov	r0, r3
 8004776:	f000 fb39 	bl	8004dec <RCCEx_PLL2_Config>
 800477a:	4603      	mov	r3, r0
 800477c:	f887 3117 	strb.w	r3, [r7, #279]	; 0x117
    
    if (ret == HAL_OK)
 8004780:	f897 3117 	ldrb.w	r3, [r7, #279]	; 0x117
 8004784:	2b00      	cmp	r3, #0
 8004786:	d003      	beq.n	8004790 <HAL_RCCEx_PeriphCLKConfig+0x1260>
      /*Nothing to do*/
    }
    else
    {
      /* set overall return value */
      status = ret;
 8004788:	f897 3117 	ldrb.w	r3, [r7, #279]	; 0x117
 800478c:	f887 3116 	strb.w	r3, [r7, #278]	; 0x116
    }
  }
  

  /*---------------------------- PLL3 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL3_DIVP) == RCC_PERIPHCLK_PLL3_DIVP)
 8004790:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8004794:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004798:	2100      	movs	r1, #0
 800479a:	6139      	str	r1, [r7, #16]
 800479c:	f003 0308 	and.w	r3, r3, #8
 80047a0:	617b      	str	r3, [r7, #20]
 80047a2:	e9d7 1204 	ldrd	r1, r2, [r7, #16]
 80047a6:	460b      	mov	r3, r1
 80047a8:	4313      	orrs	r3, r2
 80047aa:	d011      	beq.n	80047d0 <HAL_RCCEx_PeriphCLKConfig+0x12a0>
  {
    ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 80047ac:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 80047b0:	3328      	adds	r3, #40	; 0x28
 80047b2:	2100      	movs	r1, #0
 80047b4:	4618      	mov	r0, r3
 80047b6:	f000 fbcb 	bl	8004f50 <RCCEx_PLL3_Config>
 80047ba:	4603      	mov	r3, r0
 80047bc:	f887 3117 	strb.w	r3, [r7, #279]	; 0x117
  
    if (ret == HAL_OK)
 80047c0:	f897 3117 	ldrb.w	r3, [r7, #279]	; 0x117
 80047c4:	2b00      	cmp	r3, #0
 80047c6:	d003      	beq.n	80047d0 <HAL_RCCEx_PeriphCLKConfig+0x12a0>
      /*Nothing to do*/
    }
    else
    {
      /* set overall return value */
      status = ret;
 80047c8:	f897 3117 	ldrb.w	r3, [r7, #279]	; 0x117
 80047cc:	f887 3116 	strb.w	r3, [r7, #278]	; 0x116
    }
  }
  
  
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL3_DIVQ) == RCC_PERIPHCLK_PLL3_DIVQ)
 80047d0:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 80047d4:	e9d3 2300 	ldrd	r2, r3, [r3]
 80047d8:	2100      	movs	r1, #0
 80047da:	60b9      	str	r1, [r7, #8]
 80047dc:	f003 0310 	and.w	r3, r3, #16
 80047e0:	60fb      	str	r3, [r7, #12]
 80047e2:	e9d7 1202 	ldrd	r1, r2, [r7, #8]
 80047e6:	460b      	mov	r3, r1
 80047e8:	4313      	orrs	r3, r2
 80047ea:	d011      	beq.n	8004810 <HAL_RCCEx_PeriphCLKConfig+0x12e0>
  {
    ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 80047ec:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 80047f0:	3328      	adds	r3, #40	; 0x28
 80047f2:	2101      	movs	r1, #1
 80047f4:	4618      	mov	r0, r3
 80047f6:	f000 fbab 	bl	8004f50 <RCCEx_PLL3_Config>
 80047fa:	4603      	mov	r3, r0
 80047fc:	f887 3117 	strb.w	r3, [r7, #279]	; 0x117
    
    if (ret == HAL_OK)
 8004800:	f897 3117 	ldrb.w	r3, [r7, #279]	; 0x117
 8004804:	2b00      	cmp	r3, #0
 8004806:	d003      	beq.n	8004810 <HAL_RCCEx_PeriphCLKConfig+0x12e0>
      /*Nothing to do*/
    }
    else
    {
      /* set overall return value */
      status = ret;
 8004808:	f897 3117 	ldrb.w	r3, [r7, #279]	; 0x117
 800480c:	f887 3116 	strb.w	r3, [r7, #278]	; 0x116
    }
  }
  
  
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL3_DIVR) == RCC_PERIPHCLK_PLL3_DIVR)
 8004810:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8004814:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004818:	2100      	movs	r1, #0
 800481a:	6039      	str	r1, [r7, #0]
 800481c:	f003 0320 	and.w	r3, r3, #32
 8004820:	607b      	str	r3, [r7, #4]
 8004822:	e9d7 1200 	ldrd	r1, r2, [r7]
 8004826:	460b      	mov	r3, r1
 8004828:	4313      	orrs	r3, r2
 800482a:	d011      	beq.n	8004850 <HAL_RCCEx_PeriphCLKConfig+0x1320>
  {
    ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 800482c:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8004830:	3328      	adds	r3, #40	; 0x28
 8004832:	2102      	movs	r1, #2
 8004834:	4618      	mov	r0, r3
 8004836:	f000 fb8b 	bl	8004f50 <RCCEx_PLL3_Config>
 800483a:	4603      	mov	r3, r0
 800483c:	f887 3117 	strb.w	r3, [r7, #279]	; 0x117
    
    if (ret == HAL_OK)
 8004840:	f897 3117 	ldrb.w	r3, [r7, #279]	; 0x117
 8004844:	2b00      	cmp	r3, #0
 8004846:	d003      	beq.n	8004850 <HAL_RCCEx_PeriphCLKConfig+0x1320>
      /*Nothing to do*/
    }
    else
    {
      /* set overall return value */
      status = ret;
 8004848:	f897 3117 	ldrb.w	r3, [r7, #279]	; 0x117
 800484c:	f887 3116 	strb.w	r3, [r7, #278]	; 0x116
    } 
  }

  if (status == HAL_OK)
 8004850:	f897 3116 	ldrb.w	r3, [r7, #278]	; 0x116
 8004854:	2b00      	cmp	r3, #0
 8004856:	d101      	bne.n	800485c <HAL_RCCEx_PeriphCLKConfig+0x132c>
  {
    return HAL_OK;
 8004858:	2300      	movs	r3, #0
 800485a:	e000      	b.n	800485e <HAL_RCCEx_PeriphCLKConfig+0x132e>
  }
  return HAL_ERROR;
 800485c:	2301      	movs	r3, #1
}
 800485e:	4618      	mov	r0, r3
 8004860:	f507 778c 	add.w	r7, r7, #280	; 0x118
 8004864:	46bd      	mov	sp, r7
 8004866:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 800486a:	bf00      	nop
 800486c:	58024400 	.word	0x58024400

08004870 <HAL_RCCEx_GetD3PCLK1Freq>:
  * @note   Each time D3PCLK1 changes, this function must be called to update the
  *         right D3PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval D3PCLK1 frequency
  */
uint32_t HAL_RCCEx_GetD3PCLK1Freq(void)
{
 8004870:	b580      	push	{r7, lr}
 8004872:	af00      	add	r7, sp, #0
#if defined(RCC_D3CFGR_D3PPRE)
  /* Get HCLK source and Compute D3PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> (D1CorePrescTable[(RCC->D3CFGR & RCC_D3CFGR_D3PPRE) >> RCC_D3CFGR_D3PPRE_Pos] & 0x1FU));
 8004874:	f7fe fe00 	bl	8003478 <HAL_RCC_GetHCLKFreq>
 8004878:	4602      	mov	r2, r0
 800487a:	4b06      	ldr	r3, [pc, #24]	; (8004894 <HAL_RCCEx_GetD3PCLK1Freq+0x24>)
 800487c:	6a1b      	ldr	r3, [r3, #32]
 800487e:	091b      	lsrs	r3, r3, #4
 8004880:	f003 0307 	and.w	r3, r3, #7
 8004884:	4904      	ldr	r1, [pc, #16]	; (8004898 <HAL_RCCEx_GetD3PCLK1Freq+0x28>)
 8004886:	5ccb      	ldrb	r3, [r1, r3]
 8004888:	f003 031f 	and.w	r3, r3, #31
 800488c:	fa22 f303 	lsr.w	r3, r2, r3
#else
  /* Get HCLK source and Compute D3PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> (D1CorePrescTable[(RCC->SRDCFGR & RCC_SRDCFGR_SRDPPRE) >> RCC_SRDCFGR_SRDPPRE_Pos] & 0x1FU));
#endif
}
 8004890:	4618      	mov	r0, r3
 8004892:	bd80      	pop	{r7, pc}
 8004894:	58024400 	.word	0x58024400
 8004898:	08008b3c 	.word	0x08008b3c

0800489c <HAL_RCCEx_GetPLL2ClockFreq>:
  *         right PLL2CLK value. Otherwise, any configuration based on this function will be incorrect.
  * @param  PLL2_Clocks structure.
  * @retval None
  */
void HAL_RCCEx_GetPLL2ClockFreq(PLL2_ClocksTypeDef *PLL2_Clocks)
{
 800489c:	b480      	push	{r7}
 800489e:	b089      	sub	sp, #36	; 0x24
 80048a0:	af00      	add	r7, sp, #0
 80048a2:	6078      	str	r0, [r7, #4]
  float_t fracn2, pll2vco;

  /* PLL_VCO = (HSE_VALUE or HSI_VALUE or CSI_VALUE/ PLL2M) * PLL2N
     PLL2xCLK = PLL2_VCO / PLL2x
  */
  pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 80048a4:	4ba1      	ldr	r3, [pc, #644]	; (8004b2c <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 80048a6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80048a8:	f003 0303 	and.w	r3, r3, #3
 80048ac:	61bb      	str	r3, [r7, #24]
  pll2m = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM2) >> 12);
 80048ae:	4b9f      	ldr	r3, [pc, #636]	; (8004b2c <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 80048b0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80048b2:	0b1b      	lsrs	r3, r3, #12
 80048b4:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 80048b8:	617b      	str	r3, [r7, #20]
  pll2fracen = (RCC->PLLCFGR & RCC_PLLCFGR_PLL2FRACEN) >> RCC_PLLCFGR_PLL2FRACEN_Pos;
 80048ba:	4b9c      	ldr	r3, [pc, #624]	; (8004b2c <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 80048bc:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80048be:	091b      	lsrs	r3, r3, #4
 80048c0:	f003 0301 	and.w	r3, r3, #1
 80048c4:	613b      	str	r3, [r7, #16]
  fracn2 = (float_t)(uint32_t)(pll2fracen * ((RCC->PLL2FRACR & RCC_PLL2FRACR_FRACN2) >> 3));
 80048c6:	4b99      	ldr	r3, [pc, #612]	; (8004b2c <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 80048c8:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80048ca:	08db      	lsrs	r3, r3, #3
 80048cc:	f3c3 030c 	ubfx	r3, r3, #0, #13
 80048d0:	693a      	ldr	r2, [r7, #16]
 80048d2:	fb02 f303 	mul.w	r3, r2, r3
 80048d6:	ee07 3a90 	vmov	s15, r3
 80048da:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80048de:	edc7 7a03 	vstr	s15, [r7, #12]

  if (pll2m != 0U)
 80048e2:	697b      	ldr	r3, [r7, #20]
 80048e4:	2b00      	cmp	r3, #0
 80048e6:	f000 8111 	beq.w	8004b0c <HAL_RCCEx_GetPLL2ClockFreq+0x270>
  {
    switch (pllsource)
 80048ea:	69bb      	ldr	r3, [r7, #24]
 80048ec:	2b02      	cmp	r3, #2
 80048ee:	f000 8083 	beq.w	80049f8 <HAL_RCCEx_GetPLL2ClockFreq+0x15c>
 80048f2:	69bb      	ldr	r3, [r7, #24]
 80048f4:	2b02      	cmp	r3, #2
 80048f6:	f200 80a1 	bhi.w	8004a3c <HAL_RCCEx_GetPLL2ClockFreq+0x1a0>
 80048fa:	69bb      	ldr	r3, [r7, #24]
 80048fc:	2b00      	cmp	r3, #0
 80048fe:	d003      	beq.n	8004908 <HAL_RCCEx_GetPLL2ClockFreq+0x6c>
 8004900:	69bb      	ldr	r3, [r7, #24]
 8004902:	2b01      	cmp	r3, #1
 8004904:	d056      	beq.n	80049b4 <HAL_RCCEx_GetPLL2ClockFreq+0x118>
 8004906:	e099      	b.n	8004a3c <HAL_RCCEx_GetPLL2ClockFreq+0x1a0>
    {

      case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */

        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8004908:	4b88      	ldr	r3, [pc, #544]	; (8004b2c <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 800490a:	681b      	ldr	r3, [r3, #0]
 800490c:	f003 0320 	and.w	r3, r3, #32
 8004910:	2b00      	cmp	r3, #0
 8004912:	d02d      	beq.n	8004970 <HAL_RCCEx_GetPLL2ClockFreq+0xd4>
        {
          hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 8004914:	4b85      	ldr	r3, [pc, #532]	; (8004b2c <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8004916:	681b      	ldr	r3, [r3, #0]
 8004918:	08db      	lsrs	r3, r3, #3
 800491a:	f003 0303 	and.w	r3, r3, #3
 800491e:	4a84      	ldr	r2, [pc, #528]	; (8004b30 <HAL_RCCEx_GetPLL2ClockFreq+0x294>)
 8004920:	fa22 f303 	lsr.w	r3, r2, r3
 8004924:	60bb      	str	r3, [r7, #8]
          pll2vco = ((float_t)hsivalue / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2 / (float_t)0x2000) + (float_t)1);
 8004926:	68bb      	ldr	r3, [r7, #8]
 8004928:	ee07 3a90 	vmov	s15, r3
 800492c:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8004930:	697b      	ldr	r3, [r7, #20]
 8004932:	ee07 3a90 	vmov	s15, r3
 8004936:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800493a:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800493e:	4b7b      	ldr	r3, [pc, #492]	; (8004b2c <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8004940:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004942:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8004946:	ee07 3a90 	vmov	s15, r3
 800494a:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800494e:	ed97 6a03 	vldr	s12, [r7, #12]
 8004952:	eddf 5a78 	vldr	s11, [pc, #480]	; 8004b34 <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 8004956:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800495a:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800495e:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8004962:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8004966:	ee67 7a27 	vmul.f32	s15, s14, s15
 800496a:	edc7 7a07 	vstr	s15, [r7, #28]
        }
        else
        {
          pll2vco = ((float_t)HSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2 / (float_t)0x2000) + (float_t)1);
        }
        break;
 800496e:	e087      	b.n	8004a80 <HAL_RCCEx_GetPLL2ClockFreq+0x1e4>
          pll2vco = ((float_t)HSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2 / (float_t)0x2000) + (float_t)1);
 8004970:	697b      	ldr	r3, [r7, #20]
 8004972:	ee07 3a90 	vmov	s15, r3
 8004976:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800497a:	eddf 6a6f 	vldr	s13, [pc, #444]	; 8004b38 <HAL_RCCEx_GetPLL2ClockFreq+0x29c>
 800497e:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8004982:	4b6a      	ldr	r3, [pc, #424]	; (8004b2c <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8004984:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004986:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800498a:	ee07 3a90 	vmov	s15, r3
 800498e:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8004992:	ed97 6a03 	vldr	s12, [r7, #12]
 8004996:	eddf 5a67 	vldr	s11, [pc, #412]	; 8004b34 <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 800499a:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800499e:	ee76 7aa7 	vadd.f32	s15, s13, s15
 80049a2:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 80049a6:	ee77 7aa6 	vadd.f32	s15, s15, s13
 80049aa:	ee67 7a27 	vmul.f32	s15, s14, s15
 80049ae:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 80049b2:	e065      	b.n	8004a80 <HAL_RCCEx_GetPLL2ClockFreq+0x1e4>

      case RCC_PLLSOURCE_CSI:  /* CSI used as PLL clock source */
        pll2vco = ((float_t)CSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2 / (float_t)0x2000) + (float_t)1);
 80049b4:	697b      	ldr	r3, [r7, #20]
 80049b6:	ee07 3a90 	vmov	s15, r3
 80049ba:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80049be:	eddf 6a5f 	vldr	s13, [pc, #380]	; 8004b3c <HAL_RCCEx_GetPLL2ClockFreq+0x2a0>
 80049c2:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 80049c6:	4b59      	ldr	r3, [pc, #356]	; (8004b2c <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 80049c8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80049ca:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80049ce:	ee07 3a90 	vmov	s15, r3
 80049d2:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80049d6:	ed97 6a03 	vldr	s12, [r7, #12]
 80049da:	eddf 5a56 	vldr	s11, [pc, #344]	; 8004b34 <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 80049de:	eec6 7a25 	vdiv.f32	s15, s12, s11
 80049e2:	ee76 7aa7 	vadd.f32	s15, s13, s15
 80049e6:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 80049ea:	ee77 7aa6 	vadd.f32	s15, s15, s13
 80049ee:	ee67 7a27 	vmul.f32	s15, s14, s15
 80049f2:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 80049f6:	e043      	b.n	8004a80 <HAL_RCCEx_GetPLL2ClockFreq+0x1e4>

      case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
        pll2vco = ((float_t)HSE_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2 / (float_t)0x2000) + (float_t)1);
 80049f8:	697b      	ldr	r3, [r7, #20]
 80049fa:	ee07 3a90 	vmov	s15, r3
 80049fe:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8004a02:	eddf 6a4f 	vldr	s13, [pc, #316]	; 8004b40 <HAL_RCCEx_GetPLL2ClockFreq+0x2a4>
 8004a06:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8004a0a:	4b48      	ldr	r3, [pc, #288]	; (8004b2c <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8004a0c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004a0e:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8004a12:	ee07 3a90 	vmov	s15, r3
 8004a16:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8004a1a:	ed97 6a03 	vldr	s12, [r7, #12]
 8004a1e:	eddf 5a45 	vldr	s11, [pc, #276]	; 8004b34 <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 8004a22:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8004a26:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8004a2a:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8004a2e:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8004a32:	ee67 7a27 	vmul.f32	s15, s14, s15
 8004a36:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 8004a3a:	e021      	b.n	8004a80 <HAL_RCCEx_GetPLL2ClockFreq+0x1e4>

      default:
        pll2vco = ((float_t)CSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2 / (float_t)0x2000) + (float_t)1);
 8004a3c:	697b      	ldr	r3, [r7, #20]
 8004a3e:	ee07 3a90 	vmov	s15, r3
 8004a42:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8004a46:	eddf 6a3d 	vldr	s13, [pc, #244]	; 8004b3c <HAL_RCCEx_GetPLL2ClockFreq+0x2a0>
 8004a4a:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8004a4e:	4b37      	ldr	r3, [pc, #220]	; (8004b2c <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8004a50:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004a52:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8004a56:	ee07 3a90 	vmov	s15, r3
 8004a5a:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8004a5e:	ed97 6a03 	vldr	s12, [r7, #12]
 8004a62:	eddf 5a34 	vldr	s11, [pc, #208]	; 8004b34 <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 8004a66:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8004a6a:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8004a6e:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8004a72:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8004a76:	ee67 7a27 	vmul.f32	s15, s14, s15
 8004a7a:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 8004a7e:	bf00      	nop
    }
    PLL2_Clocks->PLL2_P_Frequency = (uint32_t)(float_t)(pll2vco / ((float_t)(uint32_t)((RCC->PLL2DIVR & RCC_PLL2DIVR_P2) >> 9)  + (float_t)1)) ;
 8004a80:	4b2a      	ldr	r3, [pc, #168]	; (8004b2c <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8004a82:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004a84:	0a5b      	lsrs	r3, r3, #9
 8004a86:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8004a8a:	ee07 3a90 	vmov	s15, r3
 8004a8e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8004a92:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 8004a96:	ee37 7a87 	vadd.f32	s14, s15, s14
 8004a9a:	edd7 6a07 	vldr	s13, [r7, #28]
 8004a9e:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8004aa2:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8004aa6:	ee17 2a90 	vmov	r2, s15
 8004aaa:	687b      	ldr	r3, [r7, #4]
 8004aac:	601a      	str	r2, [r3, #0]
    PLL2_Clocks->PLL2_Q_Frequency = (uint32_t)(float_t)(pll2vco / ((float_t)(uint32_t)((RCC->PLL2DIVR & RCC_PLL2DIVR_Q2) >> 16) + (float_t)1)) ;
 8004aae:	4b1f      	ldr	r3, [pc, #124]	; (8004b2c <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8004ab0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004ab2:	0c1b      	lsrs	r3, r3, #16
 8004ab4:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8004ab8:	ee07 3a90 	vmov	s15, r3
 8004abc:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8004ac0:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 8004ac4:	ee37 7a87 	vadd.f32	s14, s15, s14
 8004ac8:	edd7 6a07 	vldr	s13, [r7, #28]
 8004acc:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8004ad0:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8004ad4:	ee17 2a90 	vmov	r2, s15
 8004ad8:	687b      	ldr	r3, [r7, #4]
 8004ada:	605a      	str	r2, [r3, #4]
    PLL2_Clocks->PLL2_R_Frequency = (uint32_t)(float_t)(pll2vco / ((float_t)(uint32_t)((RCC->PLL2DIVR & RCC_PLL2DIVR_R2) >> 24) + (float_t)1)) ;
 8004adc:	4b13      	ldr	r3, [pc, #76]	; (8004b2c <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8004ade:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004ae0:	0e1b      	lsrs	r3, r3, #24
 8004ae2:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8004ae6:	ee07 3a90 	vmov	s15, r3
 8004aea:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8004aee:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 8004af2:	ee37 7a87 	vadd.f32	s14, s15, s14
 8004af6:	edd7 6a07 	vldr	s13, [r7, #28]
 8004afa:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8004afe:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8004b02:	ee17 2a90 	vmov	r2, s15
 8004b06:	687b      	ldr	r3, [r7, #4]
 8004b08:	609a      	str	r2, [r3, #8]
  {
    PLL2_Clocks->PLL2_P_Frequency = 0U;
    PLL2_Clocks->PLL2_Q_Frequency = 0U;
    PLL2_Clocks->PLL2_R_Frequency = 0U;
  }
}
 8004b0a:	e008      	b.n	8004b1e <HAL_RCCEx_GetPLL2ClockFreq+0x282>
    PLL2_Clocks->PLL2_P_Frequency = 0U;
 8004b0c:	687b      	ldr	r3, [r7, #4]
 8004b0e:	2200      	movs	r2, #0
 8004b10:	601a      	str	r2, [r3, #0]
    PLL2_Clocks->PLL2_Q_Frequency = 0U;
 8004b12:	687b      	ldr	r3, [r7, #4]
 8004b14:	2200      	movs	r2, #0
 8004b16:	605a      	str	r2, [r3, #4]
    PLL2_Clocks->PLL2_R_Frequency = 0U;
 8004b18:	687b      	ldr	r3, [r7, #4]
 8004b1a:	2200      	movs	r2, #0
 8004b1c:	609a      	str	r2, [r3, #8]
}
 8004b1e:	bf00      	nop
 8004b20:	3724      	adds	r7, #36	; 0x24
 8004b22:	46bd      	mov	sp, r7
 8004b24:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004b28:	4770      	bx	lr
 8004b2a:	bf00      	nop
 8004b2c:	58024400 	.word	0x58024400
 8004b30:	03d09000 	.word	0x03d09000
 8004b34:	46000000 	.word	0x46000000
 8004b38:	4c742400 	.word	0x4c742400
 8004b3c:	4a742400 	.word	0x4a742400
 8004b40:	4af42400 	.word	0x4af42400

08004b44 <HAL_RCCEx_GetPLL3ClockFreq>:
  *         right PLL3CLK value. Otherwise, any configuration based on this function will be incorrect.
  * @param  PLL3_Clocks structure.
  * @retval None
  */
void HAL_RCCEx_GetPLL3ClockFreq(PLL3_ClocksTypeDef *PLL3_Clocks)
{
 8004b44:	b480      	push	{r7}
 8004b46:	b089      	sub	sp, #36	; 0x24
 8004b48:	af00      	add	r7, sp, #0
 8004b4a:	6078      	str	r0, [r7, #4]
  float_t fracn3, pll3vco;

  /* PLL3_VCO = (HSE_VALUE or HSI_VALUE or CSI_VALUE/ PLL3M) * PLL3N
     PLL3xCLK = PLL3_VCO / PLLxR
  */
  pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 8004b4c:	4ba1      	ldr	r3, [pc, #644]	; (8004dd4 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8004b4e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004b50:	f003 0303 	and.w	r3, r3, #3
 8004b54:	61bb      	str	r3, [r7, #24]
  pll3m = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM3) >> 20)  ;
 8004b56:	4b9f      	ldr	r3, [pc, #636]	; (8004dd4 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8004b58:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004b5a:	0d1b      	lsrs	r3, r3, #20
 8004b5c:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8004b60:	617b      	str	r3, [r7, #20]
  pll3fracen = (RCC->PLLCFGR & RCC_PLLCFGR_PLL3FRACEN) >> RCC_PLLCFGR_PLL3FRACEN_Pos;
 8004b62:	4b9c      	ldr	r3, [pc, #624]	; (8004dd4 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8004b64:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004b66:	0a1b      	lsrs	r3, r3, #8
 8004b68:	f003 0301 	and.w	r3, r3, #1
 8004b6c:	613b      	str	r3, [r7, #16]
  fracn3 = (float_t)(uint32_t)(pll3fracen * ((RCC->PLL3FRACR & RCC_PLL3FRACR_FRACN3) >> 3));
 8004b6e:	4b99      	ldr	r3, [pc, #612]	; (8004dd4 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8004b70:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004b72:	08db      	lsrs	r3, r3, #3
 8004b74:	f3c3 030c 	ubfx	r3, r3, #0, #13
 8004b78:	693a      	ldr	r2, [r7, #16]
 8004b7a:	fb02 f303 	mul.w	r3, r2, r3
 8004b7e:	ee07 3a90 	vmov	s15, r3
 8004b82:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8004b86:	edc7 7a03 	vstr	s15, [r7, #12]

  if (pll3m != 0U)
 8004b8a:	697b      	ldr	r3, [r7, #20]
 8004b8c:	2b00      	cmp	r3, #0
 8004b8e:	f000 8111 	beq.w	8004db4 <HAL_RCCEx_GetPLL3ClockFreq+0x270>
  {
    switch (pllsource)
 8004b92:	69bb      	ldr	r3, [r7, #24]
 8004b94:	2b02      	cmp	r3, #2
 8004b96:	f000 8083 	beq.w	8004ca0 <HAL_RCCEx_GetPLL3ClockFreq+0x15c>
 8004b9a:	69bb      	ldr	r3, [r7, #24]
 8004b9c:	2b02      	cmp	r3, #2
 8004b9e:	f200 80a1 	bhi.w	8004ce4 <HAL_RCCEx_GetPLL3ClockFreq+0x1a0>
 8004ba2:	69bb      	ldr	r3, [r7, #24]
 8004ba4:	2b00      	cmp	r3, #0
 8004ba6:	d003      	beq.n	8004bb0 <HAL_RCCEx_GetPLL3ClockFreq+0x6c>
 8004ba8:	69bb      	ldr	r3, [r7, #24]
 8004baa:	2b01      	cmp	r3, #1
 8004bac:	d056      	beq.n	8004c5c <HAL_RCCEx_GetPLL3ClockFreq+0x118>
 8004bae:	e099      	b.n	8004ce4 <HAL_RCCEx_GetPLL3ClockFreq+0x1a0>
    {
      case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */

        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8004bb0:	4b88      	ldr	r3, [pc, #544]	; (8004dd4 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8004bb2:	681b      	ldr	r3, [r3, #0]
 8004bb4:	f003 0320 	and.w	r3, r3, #32
 8004bb8:	2b00      	cmp	r3, #0
 8004bba:	d02d      	beq.n	8004c18 <HAL_RCCEx_GetPLL3ClockFreq+0xd4>
        {
          hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 8004bbc:	4b85      	ldr	r3, [pc, #532]	; (8004dd4 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8004bbe:	681b      	ldr	r3, [r3, #0]
 8004bc0:	08db      	lsrs	r3, r3, #3
 8004bc2:	f003 0303 	and.w	r3, r3, #3
 8004bc6:	4a84      	ldr	r2, [pc, #528]	; (8004dd8 <HAL_RCCEx_GetPLL3ClockFreq+0x294>)
 8004bc8:	fa22 f303 	lsr.w	r3, r2, r3
 8004bcc:	60bb      	str	r3, [r7, #8]
          pll3vco = ((float_t)hsivalue / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3 / (float_t)0x2000) + (float_t)1);
 8004bce:	68bb      	ldr	r3, [r7, #8]
 8004bd0:	ee07 3a90 	vmov	s15, r3
 8004bd4:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8004bd8:	697b      	ldr	r3, [r7, #20]
 8004bda:	ee07 3a90 	vmov	s15, r3
 8004bde:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8004be2:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8004be6:	4b7b      	ldr	r3, [pc, #492]	; (8004dd4 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8004be8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004bea:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8004bee:	ee07 3a90 	vmov	s15, r3
 8004bf2:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8004bf6:	ed97 6a03 	vldr	s12, [r7, #12]
 8004bfa:	eddf 5a78 	vldr	s11, [pc, #480]	; 8004ddc <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 8004bfe:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8004c02:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8004c06:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8004c0a:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8004c0e:	ee67 7a27 	vmul.f32	s15, s14, s15
 8004c12:	edc7 7a07 	vstr	s15, [r7, #28]
        }
        else
        {
          pll3vco = ((float_t)HSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3 / (float_t)0x2000) + (float_t)1);
        }
        break;
 8004c16:	e087      	b.n	8004d28 <HAL_RCCEx_GetPLL3ClockFreq+0x1e4>
          pll3vco = ((float_t)HSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3 / (float_t)0x2000) + (float_t)1);
 8004c18:	697b      	ldr	r3, [r7, #20]
 8004c1a:	ee07 3a90 	vmov	s15, r3
 8004c1e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8004c22:	eddf 6a6f 	vldr	s13, [pc, #444]	; 8004de0 <HAL_RCCEx_GetPLL3ClockFreq+0x29c>
 8004c26:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8004c2a:	4b6a      	ldr	r3, [pc, #424]	; (8004dd4 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8004c2c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004c2e:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8004c32:	ee07 3a90 	vmov	s15, r3
 8004c36:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8004c3a:	ed97 6a03 	vldr	s12, [r7, #12]
 8004c3e:	eddf 5a67 	vldr	s11, [pc, #412]	; 8004ddc <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 8004c42:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8004c46:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8004c4a:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8004c4e:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8004c52:	ee67 7a27 	vmul.f32	s15, s14, s15
 8004c56:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 8004c5a:	e065      	b.n	8004d28 <HAL_RCCEx_GetPLL3ClockFreq+0x1e4>
      case RCC_PLLSOURCE_CSI:  /* CSI used as PLL clock source */
        pll3vco = ((float_t)CSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3 / (float_t)0x2000) + (float_t)1);
 8004c5c:	697b      	ldr	r3, [r7, #20]
 8004c5e:	ee07 3a90 	vmov	s15, r3
 8004c62:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8004c66:	eddf 6a5f 	vldr	s13, [pc, #380]	; 8004de4 <HAL_RCCEx_GetPLL3ClockFreq+0x2a0>
 8004c6a:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8004c6e:	4b59      	ldr	r3, [pc, #356]	; (8004dd4 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8004c70:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004c72:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8004c76:	ee07 3a90 	vmov	s15, r3
 8004c7a:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8004c7e:	ed97 6a03 	vldr	s12, [r7, #12]
 8004c82:	eddf 5a56 	vldr	s11, [pc, #344]	; 8004ddc <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 8004c86:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8004c8a:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8004c8e:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8004c92:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8004c96:	ee67 7a27 	vmul.f32	s15, s14, s15
 8004c9a:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 8004c9e:	e043      	b.n	8004d28 <HAL_RCCEx_GetPLL3ClockFreq+0x1e4>

      case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
        pll3vco = ((float_t)HSE_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3 / (float_t)0x2000) + (float_t)1);
 8004ca0:	697b      	ldr	r3, [r7, #20]
 8004ca2:	ee07 3a90 	vmov	s15, r3
 8004ca6:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8004caa:	eddf 6a4f 	vldr	s13, [pc, #316]	; 8004de8 <HAL_RCCEx_GetPLL3ClockFreq+0x2a4>
 8004cae:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8004cb2:	4b48      	ldr	r3, [pc, #288]	; (8004dd4 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8004cb4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004cb6:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8004cba:	ee07 3a90 	vmov	s15, r3
 8004cbe:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8004cc2:	ed97 6a03 	vldr	s12, [r7, #12]
 8004cc6:	eddf 5a45 	vldr	s11, [pc, #276]	; 8004ddc <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 8004cca:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8004cce:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8004cd2:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8004cd6:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8004cda:	ee67 7a27 	vmul.f32	s15, s14, s15
 8004cde:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 8004ce2:	e021      	b.n	8004d28 <HAL_RCCEx_GetPLL3ClockFreq+0x1e4>

      default:
        pll3vco = ((float_t)CSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3 / (float_t)0x2000) + (float_t)1);
 8004ce4:	697b      	ldr	r3, [r7, #20]
 8004ce6:	ee07 3a90 	vmov	s15, r3
 8004cea:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8004cee:	eddf 6a3d 	vldr	s13, [pc, #244]	; 8004de4 <HAL_RCCEx_GetPLL3ClockFreq+0x2a0>
 8004cf2:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8004cf6:	4b37      	ldr	r3, [pc, #220]	; (8004dd4 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8004cf8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004cfa:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8004cfe:	ee07 3a90 	vmov	s15, r3
 8004d02:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8004d06:	ed97 6a03 	vldr	s12, [r7, #12]
 8004d0a:	eddf 5a34 	vldr	s11, [pc, #208]	; 8004ddc <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 8004d0e:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8004d12:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8004d16:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8004d1a:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8004d1e:	ee67 7a27 	vmul.f32	s15, s14, s15
 8004d22:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 8004d26:	bf00      	nop
    }
    PLL3_Clocks->PLL3_P_Frequency = (uint32_t)(float_t)(pll3vco / ((float_t)(uint32_t)((RCC->PLL3DIVR & RCC_PLL3DIVR_P3) >> 9)  + (float_t)1)) ;
 8004d28:	4b2a      	ldr	r3, [pc, #168]	; (8004dd4 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8004d2a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004d2c:	0a5b      	lsrs	r3, r3, #9
 8004d2e:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8004d32:	ee07 3a90 	vmov	s15, r3
 8004d36:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8004d3a:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 8004d3e:	ee37 7a87 	vadd.f32	s14, s15, s14
 8004d42:	edd7 6a07 	vldr	s13, [r7, #28]
 8004d46:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8004d4a:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8004d4e:	ee17 2a90 	vmov	r2, s15
 8004d52:	687b      	ldr	r3, [r7, #4]
 8004d54:	601a      	str	r2, [r3, #0]
    PLL3_Clocks->PLL3_Q_Frequency = (uint32_t)(float_t)(pll3vco / ((float_t)(uint32_t)((RCC->PLL3DIVR & RCC_PLL3DIVR_Q3) >> 16) + (float_t)1)) ;
 8004d56:	4b1f      	ldr	r3, [pc, #124]	; (8004dd4 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8004d58:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004d5a:	0c1b      	lsrs	r3, r3, #16
 8004d5c:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8004d60:	ee07 3a90 	vmov	s15, r3
 8004d64:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8004d68:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 8004d6c:	ee37 7a87 	vadd.f32	s14, s15, s14
 8004d70:	edd7 6a07 	vldr	s13, [r7, #28]
 8004d74:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8004d78:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8004d7c:	ee17 2a90 	vmov	r2, s15
 8004d80:	687b      	ldr	r3, [r7, #4]
 8004d82:	605a      	str	r2, [r3, #4]
    PLL3_Clocks->PLL3_R_Frequency = (uint32_t)(float_t)(pll3vco / ((float_t)(uint32_t)((RCC->PLL3DIVR & RCC_PLL3DIVR_R3) >> 24) + (float_t)1)) ;
 8004d84:	4b13      	ldr	r3, [pc, #76]	; (8004dd4 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8004d86:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004d88:	0e1b      	lsrs	r3, r3, #24
 8004d8a:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8004d8e:	ee07 3a90 	vmov	s15, r3
 8004d92:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8004d96:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 8004d9a:	ee37 7a87 	vadd.f32	s14, s15, s14
 8004d9e:	edd7 6a07 	vldr	s13, [r7, #28]
 8004da2:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8004da6:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8004daa:	ee17 2a90 	vmov	r2, s15
 8004dae:	687b      	ldr	r3, [r7, #4]
 8004db0:	609a      	str	r2, [r3, #8]
    PLL3_Clocks->PLL3_P_Frequency = 0U;
    PLL3_Clocks->PLL3_Q_Frequency = 0U;
    PLL3_Clocks->PLL3_R_Frequency = 0U;
  }

}
 8004db2:	e008      	b.n	8004dc6 <HAL_RCCEx_GetPLL3ClockFreq+0x282>
    PLL3_Clocks->PLL3_P_Frequency = 0U;
 8004db4:	687b      	ldr	r3, [r7, #4]
 8004db6:	2200      	movs	r2, #0
 8004db8:	601a      	str	r2, [r3, #0]
    PLL3_Clocks->PLL3_Q_Frequency = 0U;
 8004dba:	687b      	ldr	r3, [r7, #4]
 8004dbc:	2200      	movs	r2, #0
 8004dbe:	605a      	str	r2, [r3, #4]
    PLL3_Clocks->PLL3_R_Frequency = 0U;
 8004dc0:	687b      	ldr	r3, [r7, #4]
 8004dc2:	2200      	movs	r2, #0
 8004dc4:	609a      	str	r2, [r3, #8]
}
 8004dc6:	bf00      	nop
 8004dc8:	3724      	adds	r7, #36	; 0x24
 8004dca:	46bd      	mov	sp, r7
 8004dcc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004dd0:	4770      	bx	lr
 8004dd2:	bf00      	nop
 8004dd4:	58024400 	.word	0x58024400
 8004dd8:	03d09000 	.word	0x03d09000
 8004ddc:	46000000 	.word	0x46000000
 8004de0:	4c742400 	.word	0x4c742400
 8004de4:	4a742400 	.word	0x4a742400
 8004de8:	4af42400 	.word	0x4af42400

08004dec <RCCEx_PLL2_Config>:
  * @note   PLL2 is temporary disabled to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLL2_Config(RCC_PLL2InitTypeDef *pll2, uint32_t Divider)
{
 8004dec:	b580      	push	{r7, lr}
 8004dee:	b084      	sub	sp, #16
 8004df0:	af00      	add	r7, sp, #0
 8004df2:	6078      	str	r0, [r7, #4]
 8004df4:	6039      	str	r1, [r7, #0]

  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 8004df6:	2300      	movs	r3, #0
 8004df8:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLL2RGE_VALUE(pll2->PLL2RGE));
  assert_param(IS_RCC_PLL2VCO_VALUE(pll2->PLL2VCOSEL));
  assert_param(IS_RCC_PLLFRACN_VALUE(pll2->PLL2FRACN));

  /* Check that PLL2 OSC clock source is already set */
  if (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_NONE)
 8004dfa:	4b53      	ldr	r3, [pc, #332]	; (8004f48 <RCCEx_PLL2_Config+0x15c>)
 8004dfc:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004dfe:	f003 0303 	and.w	r3, r3, #3
 8004e02:	2b03      	cmp	r3, #3
 8004e04:	d101      	bne.n	8004e0a <RCCEx_PLL2_Config+0x1e>
  {
    return HAL_ERROR;
 8004e06:	2301      	movs	r3, #1
 8004e08:	e099      	b.n	8004f3e <RCCEx_PLL2_Config+0x152>


  else
  {
    /* Disable  PLL2. */
    __HAL_RCC_PLL2_DISABLE();
 8004e0a:	4b4f      	ldr	r3, [pc, #316]	; (8004f48 <RCCEx_PLL2_Config+0x15c>)
 8004e0c:	681b      	ldr	r3, [r3, #0]
 8004e0e:	4a4e      	ldr	r2, [pc, #312]	; (8004f48 <RCCEx_PLL2_Config+0x15c>)
 8004e10:	f023 6380 	bic.w	r3, r3, #67108864	; 0x4000000
 8004e14:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8004e16:	f7fc fd01 	bl	800181c <HAL_GetTick>
 8004e1a:	60b8      	str	r0, [r7, #8]

    /* Wait till PLL is disabled */
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) != 0U)
 8004e1c:	e008      	b.n	8004e30 <RCCEx_PLL2_Config+0x44>
    {
      if ((HAL_GetTick() - tickstart) > PLL2_TIMEOUT_VALUE)
 8004e1e:	f7fc fcfd 	bl	800181c <HAL_GetTick>
 8004e22:	4602      	mov	r2, r0
 8004e24:	68bb      	ldr	r3, [r7, #8]
 8004e26:	1ad3      	subs	r3, r2, r3
 8004e28:	2b02      	cmp	r3, #2
 8004e2a:	d901      	bls.n	8004e30 <RCCEx_PLL2_Config+0x44>
      {
        return HAL_TIMEOUT;
 8004e2c:	2303      	movs	r3, #3
 8004e2e:	e086      	b.n	8004f3e <RCCEx_PLL2_Config+0x152>
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) != 0U)
 8004e30:	4b45      	ldr	r3, [pc, #276]	; (8004f48 <RCCEx_PLL2_Config+0x15c>)
 8004e32:	681b      	ldr	r3, [r3, #0]
 8004e34:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8004e38:	2b00      	cmp	r3, #0
 8004e3a:	d1f0      	bne.n	8004e1e <RCCEx_PLL2_Config+0x32>
      }
    }

    /* Configure PLL2 multiplication and division factors. */
    __HAL_RCC_PLL2_CONFIG(pll2->PLL2M,
 8004e3c:	4b42      	ldr	r3, [pc, #264]	; (8004f48 <RCCEx_PLL2_Config+0x15c>)
 8004e3e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004e40:	f423 327c 	bic.w	r2, r3, #258048	; 0x3f000
 8004e44:	687b      	ldr	r3, [r7, #4]
 8004e46:	681b      	ldr	r3, [r3, #0]
 8004e48:	031b      	lsls	r3, r3, #12
 8004e4a:	493f      	ldr	r1, [pc, #252]	; (8004f48 <RCCEx_PLL2_Config+0x15c>)
 8004e4c:	4313      	orrs	r3, r2
 8004e4e:	628b      	str	r3, [r1, #40]	; 0x28
 8004e50:	687b      	ldr	r3, [r7, #4]
 8004e52:	685b      	ldr	r3, [r3, #4]
 8004e54:	3b01      	subs	r3, #1
 8004e56:	f3c3 0208 	ubfx	r2, r3, #0, #9
 8004e5a:	687b      	ldr	r3, [r7, #4]
 8004e5c:	689b      	ldr	r3, [r3, #8]
 8004e5e:	3b01      	subs	r3, #1
 8004e60:	025b      	lsls	r3, r3, #9
 8004e62:	b29b      	uxth	r3, r3
 8004e64:	431a      	orrs	r2, r3
 8004e66:	687b      	ldr	r3, [r7, #4]
 8004e68:	68db      	ldr	r3, [r3, #12]
 8004e6a:	3b01      	subs	r3, #1
 8004e6c:	041b      	lsls	r3, r3, #16
 8004e6e:	f403 03fe 	and.w	r3, r3, #8323072	; 0x7f0000
 8004e72:	431a      	orrs	r2, r3
 8004e74:	687b      	ldr	r3, [r7, #4]
 8004e76:	691b      	ldr	r3, [r3, #16]
 8004e78:	3b01      	subs	r3, #1
 8004e7a:	061b      	lsls	r3, r3, #24
 8004e7c:	f003 43fe 	and.w	r3, r3, #2130706432	; 0x7f000000
 8004e80:	4931      	ldr	r1, [pc, #196]	; (8004f48 <RCCEx_PLL2_Config+0x15c>)
 8004e82:	4313      	orrs	r3, r2
 8004e84:	638b      	str	r3, [r1, #56]	; 0x38
                          pll2->PLL2P,
                          pll2->PLL2Q,
                          pll2->PLL2R);

    /* Select PLL2 input reference frequency range: VCI */
    __HAL_RCC_PLL2_VCIRANGE(pll2->PLL2RGE) ;
 8004e86:	4b30      	ldr	r3, [pc, #192]	; (8004f48 <RCCEx_PLL2_Config+0x15c>)
 8004e88:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004e8a:	f023 02c0 	bic.w	r2, r3, #192	; 0xc0
 8004e8e:	687b      	ldr	r3, [r7, #4]
 8004e90:	695b      	ldr	r3, [r3, #20]
 8004e92:	492d      	ldr	r1, [pc, #180]	; (8004f48 <RCCEx_PLL2_Config+0x15c>)
 8004e94:	4313      	orrs	r3, r2
 8004e96:	62cb      	str	r3, [r1, #44]	; 0x2c

    /* Select PLL2 output frequency range : VCO */
    __HAL_RCC_PLL2_VCORANGE(pll2->PLL2VCOSEL) ;
 8004e98:	4b2b      	ldr	r3, [pc, #172]	; (8004f48 <RCCEx_PLL2_Config+0x15c>)
 8004e9a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004e9c:	f023 0220 	bic.w	r2, r3, #32
 8004ea0:	687b      	ldr	r3, [r7, #4]
 8004ea2:	699b      	ldr	r3, [r3, #24]
 8004ea4:	4928      	ldr	r1, [pc, #160]	; (8004f48 <RCCEx_PLL2_Config+0x15c>)
 8004ea6:	4313      	orrs	r3, r2
 8004ea8:	62cb      	str	r3, [r1, #44]	; 0x2c

    /* Disable PLL2FRACN . */
    __HAL_RCC_PLL2FRACN_DISABLE();
 8004eaa:	4b27      	ldr	r3, [pc, #156]	; (8004f48 <RCCEx_PLL2_Config+0x15c>)
 8004eac:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004eae:	4a26      	ldr	r2, [pc, #152]	; (8004f48 <RCCEx_PLL2_Config+0x15c>)
 8004eb0:	f023 0310 	bic.w	r3, r3, #16
 8004eb4:	62d3      	str	r3, [r2, #44]	; 0x2c

    /* Configures PLL2 clock Fractional Part Of The Multiplication Factor */
    __HAL_RCC_PLL2FRACN_CONFIG(pll2->PLL2FRACN);
 8004eb6:	4b24      	ldr	r3, [pc, #144]	; (8004f48 <RCCEx_PLL2_Config+0x15c>)
 8004eb8:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8004eba:	4b24      	ldr	r3, [pc, #144]	; (8004f4c <RCCEx_PLL2_Config+0x160>)
 8004ebc:	4013      	ands	r3, r2
 8004ebe:	687a      	ldr	r2, [r7, #4]
 8004ec0:	69d2      	ldr	r2, [r2, #28]
 8004ec2:	00d2      	lsls	r2, r2, #3
 8004ec4:	4920      	ldr	r1, [pc, #128]	; (8004f48 <RCCEx_PLL2_Config+0x15c>)
 8004ec6:	4313      	orrs	r3, r2
 8004ec8:	63cb      	str	r3, [r1, #60]	; 0x3c

    /* Enable PLL2FRACN . */
    __HAL_RCC_PLL2FRACN_ENABLE();
 8004eca:	4b1f      	ldr	r3, [pc, #124]	; (8004f48 <RCCEx_PLL2_Config+0x15c>)
 8004ecc:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004ece:	4a1e      	ldr	r2, [pc, #120]	; (8004f48 <RCCEx_PLL2_Config+0x15c>)
 8004ed0:	f043 0310 	orr.w	r3, r3, #16
 8004ed4:	62d3      	str	r3, [r2, #44]	; 0x2c

    /* Enable the PLL2 clock output */
    if (Divider == DIVIDER_P_UPDATE)
 8004ed6:	683b      	ldr	r3, [r7, #0]
 8004ed8:	2b00      	cmp	r3, #0
 8004eda:	d106      	bne.n	8004eea <RCCEx_PLL2_Config+0xfe>
    {
      __HAL_RCC_PLL2CLKOUT_ENABLE(RCC_PLL2_DIVP);
 8004edc:	4b1a      	ldr	r3, [pc, #104]	; (8004f48 <RCCEx_PLL2_Config+0x15c>)
 8004ede:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004ee0:	4a19      	ldr	r2, [pc, #100]	; (8004f48 <RCCEx_PLL2_Config+0x15c>)
 8004ee2:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 8004ee6:	62d3      	str	r3, [r2, #44]	; 0x2c
 8004ee8:	e00f      	b.n	8004f0a <RCCEx_PLL2_Config+0x11e>
    }
    else if (Divider == DIVIDER_Q_UPDATE)
 8004eea:	683b      	ldr	r3, [r7, #0]
 8004eec:	2b01      	cmp	r3, #1
 8004eee:	d106      	bne.n	8004efe <RCCEx_PLL2_Config+0x112>
    {
      __HAL_RCC_PLL2CLKOUT_ENABLE(RCC_PLL2_DIVQ);
 8004ef0:	4b15      	ldr	r3, [pc, #84]	; (8004f48 <RCCEx_PLL2_Config+0x15c>)
 8004ef2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004ef4:	4a14      	ldr	r2, [pc, #80]	; (8004f48 <RCCEx_PLL2_Config+0x15c>)
 8004ef6:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8004efa:	62d3      	str	r3, [r2, #44]	; 0x2c
 8004efc:	e005      	b.n	8004f0a <RCCEx_PLL2_Config+0x11e>
    }
    else
    {
      __HAL_RCC_PLL2CLKOUT_ENABLE(RCC_PLL2_DIVR);
 8004efe:	4b12      	ldr	r3, [pc, #72]	; (8004f48 <RCCEx_PLL2_Config+0x15c>)
 8004f00:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004f02:	4a11      	ldr	r2, [pc, #68]	; (8004f48 <RCCEx_PLL2_Config+0x15c>)
 8004f04:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 8004f08:	62d3      	str	r3, [r2, #44]	; 0x2c
    }

    /* Enable  PLL2. */
    __HAL_RCC_PLL2_ENABLE();
 8004f0a:	4b0f      	ldr	r3, [pc, #60]	; (8004f48 <RCCEx_PLL2_Config+0x15c>)
 8004f0c:	681b      	ldr	r3, [r3, #0]
 8004f0e:	4a0e      	ldr	r2, [pc, #56]	; (8004f48 <RCCEx_PLL2_Config+0x15c>)
 8004f10:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 8004f14:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8004f16:	f7fc fc81 	bl	800181c <HAL_GetTick>
 8004f1a:	60b8      	str	r0, [r7, #8]

    /* Wait till PLL2 is ready */
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) == 0U)
 8004f1c:	e008      	b.n	8004f30 <RCCEx_PLL2_Config+0x144>
    {
      if ((HAL_GetTick() - tickstart) > PLL2_TIMEOUT_VALUE)
 8004f1e:	f7fc fc7d 	bl	800181c <HAL_GetTick>
 8004f22:	4602      	mov	r2, r0
 8004f24:	68bb      	ldr	r3, [r7, #8]
 8004f26:	1ad3      	subs	r3, r2, r3
 8004f28:	2b02      	cmp	r3, #2
 8004f2a:	d901      	bls.n	8004f30 <RCCEx_PLL2_Config+0x144>
      {
        return HAL_TIMEOUT;
 8004f2c:	2303      	movs	r3, #3
 8004f2e:	e006      	b.n	8004f3e <RCCEx_PLL2_Config+0x152>
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) == 0U)
 8004f30:	4b05      	ldr	r3, [pc, #20]	; (8004f48 <RCCEx_PLL2_Config+0x15c>)
 8004f32:	681b      	ldr	r3, [r3, #0]
 8004f34:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8004f38:	2b00      	cmp	r3, #0
 8004f3a:	d0f0      	beq.n	8004f1e <RCCEx_PLL2_Config+0x132>
    }

  }


  return status;
 8004f3c:	7bfb      	ldrb	r3, [r7, #15]
}
 8004f3e:	4618      	mov	r0, r3
 8004f40:	3710      	adds	r7, #16
 8004f42:	46bd      	mov	sp, r7
 8004f44:	bd80      	pop	{r7, pc}
 8004f46:	bf00      	nop
 8004f48:	58024400 	.word	0x58024400
 8004f4c:	ffff0007 	.word	0xffff0007

08004f50 <RCCEx_PLL3_Config>:
  * @note   PLL3 is temporary disabled to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLL3_Config(RCC_PLL3InitTypeDef *pll3, uint32_t Divider)
{
 8004f50:	b580      	push	{r7, lr}
 8004f52:	b084      	sub	sp, #16
 8004f54:	af00      	add	r7, sp, #0
 8004f56:	6078      	str	r0, [r7, #4]
 8004f58:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 8004f5a:	2300      	movs	r3, #0
 8004f5c:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLL3RGE_VALUE(pll3->PLL3RGE));
  assert_param(IS_RCC_PLL3VCO_VALUE(pll3->PLL3VCOSEL));
  assert_param(IS_RCC_PLLFRACN_VALUE(pll3->PLL3FRACN));

  /* Check that PLL3 OSC clock source is already set */
  if (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_NONE)
 8004f5e:	4b53      	ldr	r3, [pc, #332]	; (80050ac <RCCEx_PLL3_Config+0x15c>)
 8004f60:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004f62:	f003 0303 	and.w	r3, r3, #3
 8004f66:	2b03      	cmp	r3, #3
 8004f68:	d101      	bne.n	8004f6e <RCCEx_PLL3_Config+0x1e>
  {
    return HAL_ERROR;
 8004f6a:	2301      	movs	r3, #1
 8004f6c:	e099      	b.n	80050a2 <RCCEx_PLL3_Config+0x152>


  else
  {
    /* Disable  PLL3. */
    __HAL_RCC_PLL3_DISABLE();
 8004f6e:	4b4f      	ldr	r3, [pc, #316]	; (80050ac <RCCEx_PLL3_Config+0x15c>)
 8004f70:	681b      	ldr	r3, [r3, #0]
 8004f72:	4a4e      	ldr	r2, [pc, #312]	; (80050ac <RCCEx_PLL3_Config+0x15c>)
 8004f74:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8004f78:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8004f7a:	f7fc fc4f 	bl	800181c <HAL_GetTick>
 8004f7e:	60b8      	str	r0, [r7, #8]
    /* Wait till PLL3 is ready */
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) != 0U)
 8004f80:	e008      	b.n	8004f94 <RCCEx_PLL3_Config+0x44>
    {
      if ((HAL_GetTick() - tickstart) > PLL3_TIMEOUT_VALUE)
 8004f82:	f7fc fc4b 	bl	800181c <HAL_GetTick>
 8004f86:	4602      	mov	r2, r0
 8004f88:	68bb      	ldr	r3, [r7, #8]
 8004f8a:	1ad3      	subs	r3, r2, r3
 8004f8c:	2b02      	cmp	r3, #2
 8004f8e:	d901      	bls.n	8004f94 <RCCEx_PLL3_Config+0x44>
      {
        return HAL_TIMEOUT;
 8004f90:	2303      	movs	r3, #3
 8004f92:	e086      	b.n	80050a2 <RCCEx_PLL3_Config+0x152>
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) != 0U)
 8004f94:	4b45      	ldr	r3, [pc, #276]	; (80050ac <RCCEx_PLL3_Config+0x15c>)
 8004f96:	681b      	ldr	r3, [r3, #0]
 8004f98:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8004f9c:	2b00      	cmp	r3, #0
 8004f9e:	d1f0      	bne.n	8004f82 <RCCEx_PLL3_Config+0x32>
      }
    }

    /* Configure the PLL3  multiplication and division factors. */
    __HAL_RCC_PLL3_CONFIG(pll3->PLL3M,
 8004fa0:	4b42      	ldr	r3, [pc, #264]	; (80050ac <RCCEx_PLL3_Config+0x15c>)
 8004fa2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004fa4:	f023 727c 	bic.w	r2, r3, #66060288	; 0x3f00000
 8004fa8:	687b      	ldr	r3, [r7, #4]
 8004faa:	681b      	ldr	r3, [r3, #0]
 8004fac:	051b      	lsls	r3, r3, #20
 8004fae:	493f      	ldr	r1, [pc, #252]	; (80050ac <RCCEx_PLL3_Config+0x15c>)
 8004fb0:	4313      	orrs	r3, r2
 8004fb2:	628b      	str	r3, [r1, #40]	; 0x28
 8004fb4:	687b      	ldr	r3, [r7, #4]
 8004fb6:	685b      	ldr	r3, [r3, #4]
 8004fb8:	3b01      	subs	r3, #1
 8004fba:	f3c3 0208 	ubfx	r2, r3, #0, #9
 8004fbe:	687b      	ldr	r3, [r7, #4]
 8004fc0:	689b      	ldr	r3, [r3, #8]
 8004fc2:	3b01      	subs	r3, #1
 8004fc4:	025b      	lsls	r3, r3, #9
 8004fc6:	b29b      	uxth	r3, r3
 8004fc8:	431a      	orrs	r2, r3
 8004fca:	687b      	ldr	r3, [r7, #4]
 8004fcc:	68db      	ldr	r3, [r3, #12]
 8004fce:	3b01      	subs	r3, #1
 8004fd0:	041b      	lsls	r3, r3, #16
 8004fd2:	f403 03fe 	and.w	r3, r3, #8323072	; 0x7f0000
 8004fd6:	431a      	orrs	r2, r3
 8004fd8:	687b      	ldr	r3, [r7, #4]
 8004fda:	691b      	ldr	r3, [r3, #16]
 8004fdc:	3b01      	subs	r3, #1
 8004fde:	061b      	lsls	r3, r3, #24
 8004fe0:	f003 43fe 	and.w	r3, r3, #2130706432	; 0x7f000000
 8004fe4:	4931      	ldr	r1, [pc, #196]	; (80050ac <RCCEx_PLL3_Config+0x15c>)
 8004fe6:	4313      	orrs	r3, r2
 8004fe8:	640b      	str	r3, [r1, #64]	; 0x40
                          pll3->PLL3P,
                          pll3->PLL3Q,
                          pll3->PLL3R);

    /* Select PLL3 input reference frequency range: VCI */
    __HAL_RCC_PLL3_VCIRANGE(pll3->PLL3RGE) ;
 8004fea:	4b30      	ldr	r3, [pc, #192]	; (80050ac <RCCEx_PLL3_Config+0x15c>)
 8004fec:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004fee:	f423 6240 	bic.w	r2, r3, #3072	; 0xc00
 8004ff2:	687b      	ldr	r3, [r7, #4]
 8004ff4:	695b      	ldr	r3, [r3, #20]
 8004ff6:	492d      	ldr	r1, [pc, #180]	; (80050ac <RCCEx_PLL3_Config+0x15c>)
 8004ff8:	4313      	orrs	r3, r2
 8004ffa:	62cb      	str	r3, [r1, #44]	; 0x2c

    /* Select PLL3 output frequency range : VCO */
    __HAL_RCC_PLL3_VCORANGE(pll3->PLL3VCOSEL) ;
 8004ffc:	4b2b      	ldr	r3, [pc, #172]	; (80050ac <RCCEx_PLL3_Config+0x15c>)
 8004ffe:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005000:	f423 7200 	bic.w	r2, r3, #512	; 0x200
 8005004:	687b      	ldr	r3, [r7, #4]
 8005006:	699b      	ldr	r3, [r3, #24]
 8005008:	4928      	ldr	r1, [pc, #160]	; (80050ac <RCCEx_PLL3_Config+0x15c>)
 800500a:	4313      	orrs	r3, r2
 800500c:	62cb      	str	r3, [r1, #44]	; 0x2c

    /* Disable PLL3FRACN . */
    __HAL_RCC_PLL3FRACN_DISABLE();
 800500e:	4b27      	ldr	r3, [pc, #156]	; (80050ac <RCCEx_PLL3_Config+0x15c>)
 8005010:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005012:	4a26      	ldr	r2, [pc, #152]	; (80050ac <RCCEx_PLL3_Config+0x15c>)
 8005014:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8005018:	62d3      	str	r3, [r2, #44]	; 0x2c

    /* Configures PLL3 clock Fractional Part Of The Multiplication Factor */
    __HAL_RCC_PLL3FRACN_CONFIG(pll3->PLL3FRACN);
 800501a:	4b24      	ldr	r3, [pc, #144]	; (80050ac <RCCEx_PLL3_Config+0x15c>)
 800501c:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 800501e:	4b24      	ldr	r3, [pc, #144]	; (80050b0 <RCCEx_PLL3_Config+0x160>)
 8005020:	4013      	ands	r3, r2
 8005022:	687a      	ldr	r2, [r7, #4]
 8005024:	69d2      	ldr	r2, [r2, #28]
 8005026:	00d2      	lsls	r2, r2, #3
 8005028:	4920      	ldr	r1, [pc, #128]	; (80050ac <RCCEx_PLL3_Config+0x15c>)
 800502a:	4313      	orrs	r3, r2
 800502c:	644b      	str	r3, [r1, #68]	; 0x44

    /* Enable PLL3FRACN . */
    __HAL_RCC_PLL3FRACN_ENABLE();
 800502e:	4b1f      	ldr	r3, [pc, #124]	; (80050ac <RCCEx_PLL3_Config+0x15c>)
 8005030:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005032:	4a1e      	ldr	r2, [pc, #120]	; (80050ac <RCCEx_PLL3_Config+0x15c>)
 8005034:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8005038:	62d3      	str	r3, [r2, #44]	; 0x2c

    /* Enable the PLL3 clock output */
    if (Divider == DIVIDER_P_UPDATE)
 800503a:	683b      	ldr	r3, [r7, #0]
 800503c:	2b00      	cmp	r3, #0
 800503e:	d106      	bne.n	800504e <RCCEx_PLL3_Config+0xfe>
    {
      __HAL_RCC_PLL3CLKOUT_ENABLE(RCC_PLL3_DIVP);
 8005040:	4b1a      	ldr	r3, [pc, #104]	; (80050ac <RCCEx_PLL3_Config+0x15c>)
 8005042:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005044:	4a19      	ldr	r2, [pc, #100]	; (80050ac <RCCEx_PLL3_Config+0x15c>)
 8005046:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 800504a:	62d3      	str	r3, [r2, #44]	; 0x2c
 800504c:	e00f      	b.n	800506e <RCCEx_PLL3_Config+0x11e>
    }
    else if (Divider == DIVIDER_Q_UPDATE)
 800504e:	683b      	ldr	r3, [r7, #0]
 8005050:	2b01      	cmp	r3, #1
 8005052:	d106      	bne.n	8005062 <RCCEx_PLL3_Config+0x112>
    {
      __HAL_RCC_PLL3CLKOUT_ENABLE(RCC_PLL3_DIVQ);
 8005054:	4b15      	ldr	r3, [pc, #84]	; (80050ac <RCCEx_PLL3_Config+0x15c>)
 8005056:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005058:	4a14      	ldr	r2, [pc, #80]	; (80050ac <RCCEx_PLL3_Config+0x15c>)
 800505a:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
 800505e:	62d3      	str	r3, [r2, #44]	; 0x2c
 8005060:	e005      	b.n	800506e <RCCEx_PLL3_Config+0x11e>
    }
    else
    {
      __HAL_RCC_PLL3CLKOUT_ENABLE(RCC_PLL3_DIVR);
 8005062:	4b12      	ldr	r3, [pc, #72]	; (80050ac <RCCEx_PLL3_Config+0x15c>)
 8005064:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005066:	4a11      	ldr	r2, [pc, #68]	; (80050ac <RCCEx_PLL3_Config+0x15c>)
 8005068:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 800506c:	62d3      	str	r3, [r2, #44]	; 0x2c
    }

    /* Enable  PLL3. */
    __HAL_RCC_PLL3_ENABLE();
 800506e:	4b0f      	ldr	r3, [pc, #60]	; (80050ac <RCCEx_PLL3_Config+0x15c>)
 8005070:	681b      	ldr	r3, [r3, #0]
 8005072:	4a0e      	ldr	r2, [pc, #56]	; (80050ac <RCCEx_PLL3_Config+0x15c>)
 8005074:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8005078:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 800507a:	f7fc fbcf 	bl	800181c <HAL_GetTick>
 800507e:	60b8      	str	r0, [r7, #8]

    /* Wait till PLL3 is ready */
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) == 0U)
 8005080:	e008      	b.n	8005094 <RCCEx_PLL3_Config+0x144>
    {
      if ((HAL_GetTick() - tickstart) > PLL3_TIMEOUT_VALUE)
 8005082:	f7fc fbcb 	bl	800181c <HAL_GetTick>
 8005086:	4602      	mov	r2, r0
 8005088:	68bb      	ldr	r3, [r7, #8]
 800508a:	1ad3      	subs	r3, r2, r3
 800508c:	2b02      	cmp	r3, #2
 800508e:	d901      	bls.n	8005094 <RCCEx_PLL3_Config+0x144>
      {
        return HAL_TIMEOUT;
 8005090:	2303      	movs	r3, #3
 8005092:	e006      	b.n	80050a2 <RCCEx_PLL3_Config+0x152>
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) == 0U)
 8005094:	4b05      	ldr	r3, [pc, #20]	; (80050ac <RCCEx_PLL3_Config+0x15c>)
 8005096:	681b      	ldr	r3, [r3, #0]
 8005098:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 800509c:	2b00      	cmp	r3, #0
 800509e:	d0f0      	beq.n	8005082 <RCCEx_PLL3_Config+0x132>
    }

  }


  return status;
 80050a0:	7bfb      	ldrb	r3, [r7, #15]
}
 80050a2:	4618      	mov	r0, r3
 80050a4:	3710      	adds	r7, #16
 80050a6:	46bd      	mov	sp, r7
 80050a8:	bd80      	pop	{r7, pc}
 80050aa:	bf00      	nop
 80050ac:	58024400 	.word	0x58024400
 80050b0:	ffff0007 	.word	0xffff0007

080050b4 <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 80050b4:	b580      	push	{r7, lr}
 80050b6:	b082      	sub	sp, #8
 80050b8:	af00      	add	r7, sp, #0
 80050ba:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 80050bc:	687b      	ldr	r3, [r7, #4]
 80050be:	2b00      	cmp	r3, #0
 80050c0:	d101      	bne.n	80050c6 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 80050c2:	2301      	movs	r3, #1
 80050c4:	e042      	b.n	800514c <HAL_UART_Init+0x98>
  {
    /* Check the parameters */
    assert_param((IS_UART_INSTANCE(huart->Instance)) || (IS_LPUART_INSTANCE(huart->Instance)));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 80050c6:	687b      	ldr	r3, [r7, #4]
 80050c8:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80050cc:	2b00      	cmp	r3, #0
 80050ce:	d106      	bne.n	80050de <HAL_UART_Init+0x2a>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 80050d0:	687b      	ldr	r3, [r7, #4]
 80050d2:	2200      	movs	r2, #0
 80050d4:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 80050d8:	6878      	ldr	r0, [r7, #4]
 80050da:	f7fb ffc3 	bl	8001064 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 80050de:	687b      	ldr	r3, [r7, #4]
 80050e0:	2224      	movs	r2, #36	; 0x24
 80050e2:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  __HAL_UART_DISABLE(huart);
 80050e6:	687b      	ldr	r3, [r7, #4]
 80050e8:	681b      	ldr	r3, [r3, #0]
 80050ea:	681a      	ldr	r2, [r3, #0]
 80050ec:	687b      	ldr	r3, [r7, #4]
 80050ee:	681b      	ldr	r3, [r3, #0]
 80050f0:	f022 0201 	bic.w	r2, r2, #1
 80050f4:	601a      	str	r2, [r3, #0]

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 80050f6:	6878      	ldr	r0, [r7, #4]
 80050f8:	f000 f8ba 	bl	8005270 <UART_SetConfig>
 80050fc:	4603      	mov	r3, r0
 80050fe:	2b01      	cmp	r3, #1
 8005100:	d101      	bne.n	8005106 <HAL_UART_Init+0x52>
  {
    return HAL_ERROR;
 8005102:	2301      	movs	r3, #1
 8005104:	e022      	b.n	800514c <HAL_UART_Init+0x98>
  }

  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 8005106:	687b      	ldr	r3, [r7, #4]
 8005108:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800510a:	2b00      	cmp	r3, #0
 800510c:	d002      	beq.n	8005114 <HAL_UART_Init+0x60>
  {
    UART_AdvFeatureConfig(huart);
 800510e:	6878      	ldr	r0, [r7, #4]
 8005110:	f000 ff1a 	bl	8005f48 <UART_AdvFeatureConfig>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8005114:	687b      	ldr	r3, [r7, #4]
 8005116:	681b      	ldr	r3, [r3, #0]
 8005118:	685a      	ldr	r2, [r3, #4]
 800511a:	687b      	ldr	r3, [r7, #4]
 800511c:	681b      	ldr	r3, [r3, #0]
 800511e:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 8005122:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8005124:	687b      	ldr	r3, [r7, #4]
 8005126:	681b      	ldr	r3, [r3, #0]
 8005128:	689a      	ldr	r2, [r3, #8]
 800512a:	687b      	ldr	r3, [r7, #4]
 800512c:	681b      	ldr	r3, [r3, #0]
 800512e:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 8005132:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 8005134:	687b      	ldr	r3, [r7, #4]
 8005136:	681b      	ldr	r3, [r3, #0]
 8005138:	681a      	ldr	r2, [r3, #0]
 800513a:	687b      	ldr	r3, [r7, #4]
 800513c:	681b      	ldr	r3, [r3, #0]
 800513e:	f042 0201 	orr.w	r2, r2, #1
 8005142:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 8005144:	6878      	ldr	r0, [r7, #4]
 8005146:	f000 ffa1 	bl	800608c <UART_CheckIdleState>
 800514a:	4603      	mov	r3, r0
}
 800514c:	4618      	mov	r0, r3
 800514e:	3708      	adds	r7, #8
 8005150:	46bd      	mov	sp, r7
 8005152:	bd80      	pop	{r7, pc}

08005154 <HAL_UART_Transmit>:
  * @param Size    Amount of data elements (u8 or u16) to be sent.
  * @param Timeout Timeout duration.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8005154:	b580      	push	{r7, lr}
 8005156:	b08a      	sub	sp, #40	; 0x28
 8005158:	af02      	add	r7, sp, #8
 800515a:	60f8      	str	r0, [r7, #12]
 800515c:	60b9      	str	r1, [r7, #8]
 800515e:	603b      	str	r3, [r7, #0]
 8005160:	4613      	mov	r3, r2
 8005162:	80fb      	strh	r3, [r7, #6]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart;

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8005164:	68fb      	ldr	r3, [r7, #12]
 8005166:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800516a:	2b20      	cmp	r3, #32
 800516c:	d17b      	bne.n	8005266 <HAL_UART_Transmit+0x112>
  {
    if ((pData == NULL) || (Size == 0U))
 800516e:	68bb      	ldr	r3, [r7, #8]
 8005170:	2b00      	cmp	r3, #0
 8005172:	d002      	beq.n	800517a <HAL_UART_Transmit+0x26>
 8005174:	88fb      	ldrh	r3, [r7, #6]
 8005176:	2b00      	cmp	r3, #0
 8005178:	d101      	bne.n	800517e <HAL_UART_Transmit+0x2a>
    {
      return  HAL_ERROR;
 800517a:	2301      	movs	r3, #1
 800517c:	e074      	b.n	8005268 <HAL_UART_Transmit+0x114>
    }

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 800517e:	68fb      	ldr	r3, [r7, #12]
 8005180:	2200      	movs	r2, #0
 8005182:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8005186:	68fb      	ldr	r3, [r7, #12]
 8005188:	2221      	movs	r2, #33	; 0x21
 800518a:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 800518e:	f7fc fb45 	bl	800181c <HAL_GetTick>
 8005192:	6178      	str	r0, [r7, #20]

    huart->TxXferSize  = Size;
 8005194:	68fb      	ldr	r3, [r7, #12]
 8005196:	88fa      	ldrh	r2, [r7, #6]
 8005198:	f8a3 2054 	strh.w	r2, [r3, #84]	; 0x54
    huart->TxXferCount = Size;
 800519c:	68fb      	ldr	r3, [r7, #12]
 800519e:	88fa      	ldrh	r2, [r7, #6]
 80051a0:	f8a3 2056 	strh.w	r2, [r3, #86]	; 0x56

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 80051a4:	68fb      	ldr	r3, [r7, #12]
 80051a6:	689b      	ldr	r3, [r3, #8]
 80051a8:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80051ac:	d108      	bne.n	80051c0 <HAL_UART_Transmit+0x6c>
 80051ae:	68fb      	ldr	r3, [r7, #12]
 80051b0:	691b      	ldr	r3, [r3, #16]
 80051b2:	2b00      	cmp	r3, #0
 80051b4:	d104      	bne.n	80051c0 <HAL_UART_Transmit+0x6c>
    {
      pdata8bits  = NULL;
 80051b6:	2300      	movs	r3, #0
 80051b8:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 80051ba:	68bb      	ldr	r3, [r7, #8]
 80051bc:	61bb      	str	r3, [r7, #24]
 80051be:	e003      	b.n	80051c8 <HAL_UART_Transmit+0x74>
    }
    else
    {
      pdata8bits  = pData;
 80051c0:	68bb      	ldr	r3, [r7, #8]
 80051c2:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 80051c4:	2300      	movs	r3, #0
 80051c6:	61bb      	str	r3, [r7, #24]
    }

    while (huart->TxXferCount > 0U)
 80051c8:	e030      	b.n	800522c <HAL_UART_Transmit+0xd8>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 80051ca:	683b      	ldr	r3, [r7, #0]
 80051cc:	9300      	str	r3, [sp, #0]
 80051ce:	697b      	ldr	r3, [r7, #20]
 80051d0:	2200      	movs	r2, #0
 80051d2:	2180      	movs	r1, #128	; 0x80
 80051d4:	68f8      	ldr	r0, [r7, #12]
 80051d6:	f001 f803 	bl	80061e0 <UART_WaitOnFlagUntilTimeout>
 80051da:	4603      	mov	r3, r0
 80051dc:	2b00      	cmp	r3, #0
 80051de:	d005      	beq.n	80051ec <HAL_UART_Transmit+0x98>
      {

        huart->gState = HAL_UART_STATE_READY;
 80051e0:	68fb      	ldr	r3, [r7, #12]
 80051e2:	2220      	movs	r2, #32
 80051e4:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

        return HAL_TIMEOUT;
 80051e8:	2303      	movs	r3, #3
 80051ea:	e03d      	b.n	8005268 <HAL_UART_Transmit+0x114>
      }
      if (pdata8bits == NULL)
 80051ec:	69fb      	ldr	r3, [r7, #28]
 80051ee:	2b00      	cmp	r3, #0
 80051f0:	d10b      	bne.n	800520a <HAL_UART_Transmit+0xb6>
      {
        huart->Instance->TDR = (uint16_t)(*pdata16bits & 0x01FFU);
 80051f2:	69bb      	ldr	r3, [r7, #24]
 80051f4:	881b      	ldrh	r3, [r3, #0]
 80051f6:	461a      	mov	r2, r3
 80051f8:	68fb      	ldr	r3, [r7, #12]
 80051fa:	681b      	ldr	r3, [r3, #0]
 80051fc:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8005200:	629a      	str	r2, [r3, #40]	; 0x28
        pdata16bits++;
 8005202:	69bb      	ldr	r3, [r7, #24]
 8005204:	3302      	adds	r3, #2
 8005206:	61bb      	str	r3, [r7, #24]
 8005208:	e007      	b.n	800521a <HAL_UART_Transmit+0xc6>
      }
      else
      {
        huart->Instance->TDR = (uint8_t)(*pdata8bits & 0xFFU);
 800520a:	69fb      	ldr	r3, [r7, #28]
 800520c:	781a      	ldrb	r2, [r3, #0]
 800520e:	68fb      	ldr	r3, [r7, #12]
 8005210:	681b      	ldr	r3, [r3, #0]
 8005212:	629a      	str	r2, [r3, #40]	; 0x28
        pdata8bits++;
 8005214:	69fb      	ldr	r3, [r7, #28]
 8005216:	3301      	adds	r3, #1
 8005218:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 800521a:	68fb      	ldr	r3, [r7, #12]
 800521c:	f8b3 3056 	ldrh.w	r3, [r3, #86]	; 0x56
 8005220:	b29b      	uxth	r3, r3
 8005222:	3b01      	subs	r3, #1
 8005224:	b29a      	uxth	r2, r3
 8005226:	68fb      	ldr	r3, [r7, #12]
 8005228:	f8a3 2056 	strh.w	r2, [r3, #86]	; 0x56
    while (huart->TxXferCount > 0U)
 800522c:	68fb      	ldr	r3, [r7, #12]
 800522e:	f8b3 3056 	ldrh.w	r3, [r3, #86]	; 0x56
 8005232:	b29b      	uxth	r3, r3
 8005234:	2b00      	cmp	r3, #0
 8005236:	d1c8      	bne.n	80051ca <HAL_UART_Transmit+0x76>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 8005238:	683b      	ldr	r3, [r7, #0]
 800523a:	9300      	str	r3, [sp, #0]
 800523c:	697b      	ldr	r3, [r7, #20]
 800523e:	2200      	movs	r2, #0
 8005240:	2140      	movs	r1, #64	; 0x40
 8005242:	68f8      	ldr	r0, [r7, #12]
 8005244:	f000 ffcc 	bl	80061e0 <UART_WaitOnFlagUntilTimeout>
 8005248:	4603      	mov	r3, r0
 800524a:	2b00      	cmp	r3, #0
 800524c:	d005      	beq.n	800525a <HAL_UART_Transmit+0x106>
    {
      huart->gState = HAL_UART_STATE_READY;
 800524e:	68fb      	ldr	r3, [r7, #12]
 8005250:	2220      	movs	r2, #32
 8005252:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

      return HAL_TIMEOUT;
 8005256:	2303      	movs	r3, #3
 8005258:	e006      	b.n	8005268 <HAL_UART_Transmit+0x114>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 800525a:	68fb      	ldr	r3, [r7, #12]
 800525c:	2220      	movs	r2, #32
 800525e:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

    return HAL_OK;
 8005262:	2300      	movs	r3, #0
 8005264:	e000      	b.n	8005268 <HAL_UART_Transmit+0x114>
  }
  else
  {
    return HAL_BUSY;
 8005266:	2302      	movs	r3, #2
  }
}
 8005268:	4618      	mov	r0, r3
 800526a:	3720      	adds	r7, #32
 800526c:	46bd      	mov	sp, r7
 800526e:	bd80      	pop	{r7, pc}

08005270 <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 8005270:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8005274:	b092      	sub	sp, #72	; 0x48
 8005276:	af00      	add	r7, sp, #0
 8005278:	6178      	str	r0, [r7, #20]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 800527a:	2300      	movs	r3, #0
 800527c:	f887 3042 	strb.w	r3, [r7, #66]	; 0x42
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 8005280:	697b      	ldr	r3, [r7, #20]
 8005282:	689a      	ldr	r2, [r3, #8]
 8005284:	697b      	ldr	r3, [r7, #20]
 8005286:	691b      	ldr	r3, [r3, #16]
 8005288:	431a      	orrs	r2, r3
 800528a:	697b      	ldr	r3, [r7, #20]
 800528c:	695b      	ldr	r3, [r3, #20]
 800528e:	431a      	orrs	r2, r3
 8005290:	697b      	ldr	r3, [r7, #20]
 8005292:	69db      	ldr	r3, [r3, #28]
 8005294:	4313      	orrs	r3, r2
 8005296:	647b      	str	r3, [r7, #68]	; 0x44
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 8005298:	697b      	ldr	r3, [r7, #20]
 800529a:	681b      	ldr	r3, [r3, #0]
 800529c:	681a      	ldr	r2, [r3, #0]
 800529e:	4bbe      	ldr	r3, [pc, #760]	; (8005598 <UART_SetConfig+0x328>)
 80052a0:	4013      	ands	r3, r2
 80052a2:	697a      	ldr	r2, [r7, #20]
 80052a4:	6812      	ldr	r2, [r2, #0]
 80052a6:	6c79      	ldr	r1, [r7, #68]	; 0x44
 80052a8:	430b      	orrs	r3, r1
 80052aa:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 80052ac:	697b      	ldr	r3, [r7, #20]
 80052ae:	681b      	ldr	r3, [r3, #0]
 80052b0:	685b      	ldr	r3, [r3, #4]
 80052b2:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 80052b6:	697b      	ldr	r3, [r7, #20]
 80052b8:	68da      	ldr	r2, [r3, #12]
 80052ba:	697b      	ldr	r3, [r7, #20]
 80052bc:	681b      	ldr	r3, [r3, #0]
 80052be:	430a      	orrs	r2, r1
 80052c0:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 80052c2:	697b      	ldr	r3, [r7, #20]
 80052c4:	699b      	ldr	r3, [r3, #24]
 80052c6:	647b      	str	r3, [r7, #68]	; 0x44

  if (!(UART_INSTANCE_LOWPOWER(huart)))
 80052c8:	697b      	ldr	r3, [r7, #20]
 80052ca:	681b      	ldr	r3, [r3, #0]
 80052cc:	4ab3      	ldr	r2, [pc, #716]	; (800559c <UART_SetConfig+0x32c>)
 80052ce:	4293      	cmp	r3, r2
 80052d0:	d004      	beq.n	80052dc <UART_SetConfig+0x6c>
  {
    tmpreg |= huart->Init.OneBitSampling;
 80052d2:	697b      	ldr	r3, [r7, #20]
 80052d4:	6a1b      	ldr	r3, [r3, #32]
 80052d6:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 80052d8:	4313      	orrs	r3, r2
 80052da:	647b      	str	r3, [r7, #68]	; 0x44
  }
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 80052dc:	697b      	ldr	r3, [r7, #20]
 80052de:	681b      	ldr	r3, [r3, #0]
 80052e0:	689a      	ldr	r2, [r3, #8]
 80052e2:	4baf      	ldr	r3, [pc, #700]	; (80055a0 <UART_SetConfig+0x330>)
 80052e4:	4013      	ands	r3, r2
 80052e6:	697a      	ldr	r2, [r7, #20]
 80052e8:	6812      	ldr	r2, [r2, #0]
 80052ea:	6c79      	ldr	r1, [r7, #68]	; 0x44
 80052ec:	430b      	orrs	r3, r1
 80052ee:	6093      	str	r3, [r2, #8]

  /*-------------------------- USART PRESC Configuration -----------------------*/
  /* Configure
  * - UART Clock Prescaler : set PRESCALER according to huart->Init.ClockPrescaler value */
  MODIFY_REG(huart->Instance->PRESC, USART_PRESC_PRESCALER, huart->Init.ClockPrescaler);
 80052f0:	697b      	ldr	r3, [r7, #20]
 80052f2:	681b      	ldr	r3, [r3, #0]
 80052f4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80052f6:	f023 010f 	bic.w	r1, r3, #15
 80052fa:	697b      	ldr	r3, [r7, #20]
 80052fc:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 80052fe:	697b      	ldr	r3, [r7, #20]
 8005300:	681b      	ldr	r3, [r3, #0]
 8005302:	430a      	orrs	r2, r1
 8005304:	62da      	str	r2, [r3, #44]	; 0x2c

  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 8005306:	697b      	ldr	r3, [r7, #20]
 8005308:	681b      	ldr	r3, [r3, #0]
 800530a:	4aa6      	ldr	r2, [pc, #664]	; (80055a4 <UART_SetConfig+0x334>)
 800530c:	4293      	cmp	r3, r2
 800530e:	d177      	bne.n	8005400 <UART_SetConfig+0x190>
 8005310:	4ba5      	ldr	r3, [pc, #660]	; (80055a8 <UART_SetConfig+0x338>)
 8005312:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8005314:	f003 0338 	and.w	r3, r3, #56	; 0x38
 8005318:	2b28      	cmp	r3, #40	; 0x28
 800531a:	d86d      	bhi.n	80053f8 <UART_SetConfig+0x188>
 800531c:	a201      	add	r2, pc, #4	; (adr r2, 8005324 <UART_SetConfig+0xb4>)
 800531e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005322:	bf00      	nop
 8005324:	080053c9 	.word	0x080053c9
 8005328:	080053f9 	.word	0x080053f9
 800532c:	080053f9 	.word	0x080053f9
 8005330:	080053f9 	.word	0x080053f9
 8005334:	080053f9 	.word	0x080053f9
 8005338:	080053f9 	.word	0x080053f9
 800533c:	080053f9 	.word	0x080053f9
 8005340:	080053f9 	.word	0x080053f9
 8005344:	080053d1 	.word	0x080053d1
 8005348:	080053f9 	.word	0x080053f9
 800534c:	080053f9 	.word	0x080053f9
 8005350:	080053f9 	.word	0x080053f9
 8005354:	080053f9 	.word	0x080053f9
 8005358:	080053f9 	.word	0x080053f9
 800535c:	080053f9 	.word	0x080053f9
 8005360:	080053f9 	.word	0x080053f9
 8005364:	080053d9 	.word	0x080053d9
 8005368:	080053f9 	.word	0x080053f9
 800536c:	080053f9 	.word	0x080053f9
 8005370:	080053f9 	.word	0x080053f9
 8005374:	080053f9 	.word	0x080053f9
 8005378:	080053f9 	.word	0x080053f9
 800537c:	080053f9 	.word	0x080053f9
 8005380:	080053f9 	.word	0x080053f9
 8005384:	080053e1 	.word	0x080053e1
 8005388:	080053f9 	.word	0x080053f9
 800538c:	080053f9 	.word	0x080053f9
 8005390:	080053f9 	.word	0x080053f9
 8005394:	080053f9 	.word	0x080053f9
 8005398:	080053f9 	.word	0x080053f9
 800539c:	080053f9 	.word	0x080053f9
 80053a0:	080053f9 	.word	0x080053f9
 80053a4:	080053e9 	.word	0x080053e9
 80053a8:	080053f9 	.word	0x080053f9
 80053ac:	080053f9 	.word	0x080053f9
 80053b0:	080053f9 	.word	0x080053f9
 80053b4:	080053f9 	.word	0x080053f9
 80053b8:	080053f9 	.word	0x080053f9
 80053bc:	080053f9 	.word	0x080053f9
 80053c0:	080053f9 	.word	0x080053f9
 80053c4:	080053f1 	.word	0x080053f1
 80053c8:	2301      	movs	r3, #1
 80053ca:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 80053ce:	e326      	b.n	8005a1e <UART_SetConfig+0x7ae>
 80053d0:	2304      	movs	r3, #4
 80053d2:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 80053d6:	e322      	b.n	8005a1e <UART_SetConfig+0x7ae>
 80053d8:	2308      	movs	r3, #8
 80053da:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 80053de:	e31e      	b.n	8005a1e <UART_SetConfig+0x7ae>
 80053e0:	2310      	movs	r3, #16
 80053e2:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 80053e6:	e31a      	b.n	8005a1e <UART_SetConfig+0x7ae>
 80053e8:	2320      	movs	r3, #32
 80053ea:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 80053ee:	e316      	b.n	8005a1e <UART_SetConfig+0x7ae>
 80053f0:	2340      	movs	r3, #64	; 0x40
 80053f2:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 80053f6:	e312      	b.n	8005a1e <UART_SetConfig+0x7ae>
 80053f8:	2380      	movs	r3, #128	; 0x80
 80053fa:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 80053fe:	e30e      	b.n	8005a1e <UART_SetConfig+0x7ae>
 8005400:	697b      	ldr	r3, [r7, #20]
 8005402:	681b      	ldr	r3, [r3, #0]
 8005404:	4a69      	ldr	r2, [pc, #420]	; (80055ac <UART_SetConfig+0x33c>)
 8005406:	4293      	cmp	r3, r2
 8005408:	d130      	bne.n	800546c <UART_SetConfig+0x1fc>
 800540a:	4b67      	ldr	r3, [pc, #412]	; (80055a8 <UART_SetConfig+0x338>)
 800540c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800540e:	f003 0307 	and.w	r3, r3, #7
 8005412:	2b05      	cmp	r3, #5
 8005414:	d826      	bhi.n	8005464 <UART_SetConfig+0x1f4>
 8005416:	a201      	add	r2, pc, #4	; (adr r2, 800541c <UART_SetConfig+0x1ac>)
 8005418:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800541c:	08005435 	.word	0x08005435
 8005420:	0800543d 	.word	0x0800543d
 8005424:	08005445 	.word	0x08005445
 8005428:	0800544d 	.word	0x0800544d
 800542c:	08005455 	.word	0x08005455
 8005430:	0800545d 	.word	0x0800545d
 8005434:	2300      	movs	r3, #0
 8005436:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800543a:	e2f0      	b.n	8005a1e <UART_SetConfig+0x7ae>
 800543c:	2304      	movs	r3, #4
 800543e:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8005442:	e2ec      	b.n	8005a1e <UART_SetConfig+0x7ae>
 8005444:	2308      	movs	r3, #8
 8005446:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800544a:	e2e8      	b.n	8005a1e <UART_SetConfig+0x7ae>
 800544c:	2310      	movs	r3, #16
 800544e:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8005452:	e2e4      	b.n	8005a1e <UART_SetConfig+0x7ae>
 8005454:	2320      	movs	r3, #32
 8005456:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800545a:	e2e0      	b.n	8005a1e <UART_SetConfig+0x7ae>
 800545c:	2340      	movs	r3, #64	; 0x40
 800545e:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8005462:	e2dc      	b.n	8005a1e <UART_SetConfig+0x7ae>
 8005464:	2380      	movs	r3, #128	; 0x80
 8005466:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800546a:	e2d8      	b.n	8005a1e <UART_SetConfig+0x7ae>
 800546c:	697b      	ldr	r3, [r7, #20]
 800546e:	681b      	ldr	r3, [r3, #0]
 8005470:	4a4f      	ldr	r2, [pc, #316]	; (80055b0 <UART_SetConfig+0x340>)
 8005472:	4293      	cmp	r3, r2
 8005474:	d130      	bne.n	80054d8 <UART_SetConfig+0x268>
 8005476:	4b4c      	ldr	r3, [pc, #304]	; (80055a8 <UART_SetConfig+0x338>)
 8005478:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800547a:	f003 0307 	and.w	r3, r3, #7
 800547e:	2b05      	cmp	r3, #5
 8005480:	d826      	bhi.n	80054d0 <UART_SetConfig+0x260>
 8005482:	a201      	add	r2, pc, #4	; (adr r2, 8005488 <UART_SetConfig+0x218>)
 8005484:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005488:	080054a1 	.word	0x080054a1
 800548c:	080054a9 	.word	0x080054a9
 8005490:	080054b1 	.word	0x080054b1
 8005494:	080054b9 	.word	0x080054b9
 8005498:	080054c1 	.word	0x080054c1
 800549c:	080054c9 	.word	0x080054c9
 80054a0:	2300      	movs	r3, #0
 80054a2:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 80054a6:	e2ba      	b.n	8005a1e <UART_SetConfig+0x7ae>
 80054a8:	2304      	movs	r3, #4
 80054aa:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 80054ae:	e2b6      	b.n	8005a1e <UART_SetConfig+0x7ae>
 80054b0:	2308      	movs	r3, #8
 80054b2:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 80054b6:	e2b2      	b.n	8005a1e <UART_SetConfig+0x7ae>
 80054b8:	2310      	movs	r3, #16
 80054ba:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 80054be:	e2ae      	b.n	8005a1e <UART_SetConfig+0x7ae>
 80054c0:	2320      	movs	r3, #32
 80054c2:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 80054c6:	e2aa      	b.n	8005a1e <UART_SetConfig+0x7ae>
 80054c8:	2340      	movs	r3, #64	; 0x40
 80054ca:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 80054ce:	e2a6      	b.n	8005a1e <UART_SetConfig+0x7ae>
 80054d0:	2380      	movs	r3, #128	; 0x80
 80054d2:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 80054d6:	e2a2      	b.n	8005a1e <UART_SetConfig+0x7ae>
 80054d8:	697b      	ldr	r3, [r7, #20]
 80054da:	681b      	ldr	r3, [r3, #0]
 80054dc:	4a35      	ldr	r2, [pc, #212]	; (80055b4 <UART_SetConfig+0x344>)
 80054de:	4293      	cmp	r3, r2
 80054e0:	d130      	bne.n	8005544 <UART_SetConfig+0x2d4>
 80054e2:	4b31      	ldr	r3, [pc, #196]	; (80055a8 <UART_SetConfig+0x338>)
 80054e4:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80054e6:	f003 0307 	and.w	r3, r3, #7
 80054ea:	2b05      	cmp	r3, #5
 80054ec:	d826      	bhi.n	800553c <UART_SetConfig+0x2cc>
 80054ee:	a201      	add	r2, pc, #4	; (adr r2, 80054f4 <UART_SetConfig+0x284>)
 80054f0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80054f4:	0800550d 	.word	0x0800550d
 80054f8:	08005515 	.word	0x08005515
 80054fc:	0800551d 	.word	0x0800551d
 8005500:	08005525 	.word	0x08005525
 8005504:	0800552d 	.word	0x0800552d
 8005508:	08005535 	.word	0x08005535
 800550c:	2300      	movs	r3, #0
 800550e:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8005512:	e284      	b.n	8005a1e <UART_SetConfig+0x7ae>
 8005514:	2304      	movs	r3, #4
 8005516:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800551a:	e280      	b.n	8005a1e <UART_SetConfig+0x7ae>
 800551c:	2308      	movs	r3, #8
 800551e:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8005522:	e27c      	b.n	8005a1e <UART_SetConfig+0x7ae>
 8005524:	2310      	movs	r3, #16
 8005526:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800552a:	e278      	b.n	8005a1e <UART_SetConfig+0x7ae>
 800552c:	2320      	movs	r3, #32
 800552e:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8005532:	e274      	b.n	8005a1e <UART_SetConfig+0x7ae>
 8005534:	2340      	movs	r3, #64	; 0x40
 8005536:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800553a:	e270      	b.n	8005a1e <UART_SetConfig+0x7ae>
 800553c:	2380      	movs	r3, #128	; 0x80
 800553e:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8005542:	e26c      	b.n	8005a1e <UART_SetConfig+0x7ae>
 8005544:	697b      	ldr	r3, [r7, #20]
 8005546:	681b      	ldr	r3, [r3, #0]
 8005548:	4a1b      	ldr	r2, [pc, #108]	; (80055b8 <UART_SetConfig+0x348>)
 800554a:	4293      	cmp	r3, r2
 800554c:	d142      	bne.n	80055d4 <UART_SetConfig+0x364>
 800554e:	4b16      	ldr	r3, [pc, #88]	; (80055a8 <UART_SetConfig+0x338>)
 8005550:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8005552:	f003 0307 	and.w	r3, r3, #7
 8005556:	2b05      	cmp	r3, #5
 8005558:	d838      	bhi.n	80055cc <UART_SetConfig+0x35c>
 800555a:	a201      	add	r2, pc, #4	; (adr r2, 8005560 <UART_SetConfig+0x2f0>)
 800555c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005560:	08005579 	.word	0x08005579
 8005564:	08005581 	.word	0x08005581
 8005568:	08005589 	.word	0x08005589
 800556c:	08005591 	.word	0x08005591
 8005570:	080055bd 	.word	0x080055bd
 8005574:	080055c5 	.word	0x080055c5
 8005578:	2300      	movs	r3, #0
 800557a:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800557e:	e24e      	b.n	8005a1e <UART_SetConfig+0x7ae>
 8005580:	2304      	movs	r3, #4
 8005582:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8005586:	e24a      	b.n	8005a1e <UART_SetConfig+0x7ae>
 8005588:	2308      	movs	r3, #8
 800558a:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800558e:	e246      	b.n	8005a1e <UART_SetConfig+0x7ae>
 8005590:	2310      	movs	r3, #16
 8005592:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8005596:	e242      	b.n	8005a1e <UART_SetConfig+0x7ae>
 8005598:	cfff69f3 	.word	0xcfff69f3
 800559c:	58000c00 	.word	0x58000c00
 80055a0:	11fff4ff 	.word	0x11fff4ff
 80055a4:	40011000 	.word	0x40011000
 80055a8:	58024400 	.word	0x58024400
 80055ac:	40004400 	.word	0x40004400
 80055b0:	40004800 	.word	0x40004800
 80055b4:	40004c00 	.word	0x40004c00
 80055b8:	40005000 	.word	0x40005000
 80055bc:	2320      	movs	r3, #32
 80055be:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 80055c2:	e22c      	b.n	8005a1e <UART_SetConfig+0x7ae>
 80055c4:	2340      	movs	r3, #64	; 0x40
 80055c6:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 80055ca:	e228      	b.n	8005a1e <UART_SetConfig+0x7ae>
 80055cc:	2380      	movs	r3, #128	; 0x80
 80055ce:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 80055d2:	e224      	b.n	8005a1e <UART_SetConfig+0x7ae>
 80055d4:	697b      	ldr	r3, [r7, #20]
 80055d6:	681b      	ldr	r3, [r3, #0]
 80055d8:	4ab1      	ldr	r2, [pc, #708]	; (80058a0 <UART_SetConfig+0x630>)
 80055da:	4293      	cmp	r3, r2
 80055dc:	d176      	bne.n	80056cc <UART_SetConfig+0x45c>
 80055de:	4bb1      	ldr	r3, [pc, #708]	; (80058a4 <UART_SetConfig+0x634>)
 80055e0:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80055e2:	f003 0338 	and.w	r3, r3, #56	; 0x38
 80055e6:	2b28      	cmp	r3, #40	; 0x28
 80055e8:	d86c      	bhi.n	80056c4 <UART_SetConfig+0x454>
 80055ea:	a201      	add	r2, pc, #4	; (adr r2, 80055f0 <UART_SetConfig+0x380>)
 80055ec:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80055f0:	08005695 	.word	0x08005695
 80055f4:	080056c5 	.word	0x080056c5
 80055f8:	080056c5 	.word	0x080056c5
 80055fc:	080056c5 	.word	0x080056c5
 8005600:	080056c5 	.word	0x080056c5
 8005604:	080056c5 	.word	0x080056c5
 8005608:	080056c5 	.word	0x080056c5
 800560c:	080056c5 	.word	0x080056c5
 8005610:	0800569d 	.word	0x0800569d
 8005614:	080056c5 	.word	0x080056c5
 8005618:	080056c5 	.word	0x080056c5
 800561c:	080056c5 	.word	0x080056c5
 8005620:	080056c5 	.word	0x080056c5
 8005624:	080056c5 	.word	0x080056c5
 8005628:	080056c5 	.word	0x080056c5
 800562c:	080056c5 	.word	0x080056c5
 8005630:	080056a5 	.word	0x080056a5
 8005634:	080056c5 	.word	0x080056c5
 8005638:	080056c5 	.word	0x080056c5
 800563c:	080056c5 	.word	0x080056c5
 8005640:	080056c5 	.word	0x080056c5
 8005644:	080056c5 	.word	0x080056c5
 8005648:	080056c5 	.word	0x080056c5
 800564c:	080056c5 	.word	0x080056c5
 8005650:	080056ad 	.word	0x080056ad
 8005654:	080056c5 	.word	0x080056c5
 8005658:	080056c5 	.word	0x080056c5
 800565c:	080056c5 	.word	0x080056c5
 8005660:	080056c5 	.word	0x080056c5
 8005664:	080056c5 	.word	0x080056c5
 8005668:	080056c5 	.word	0x080056c5
 800566c:	080056c5 	.word	0x080056c5
 8005670:	080056b5 	.word	0x080056b5
 8005674:	080056c5 	.word	0x080056c5
 8005678:	080056c5 	.word	0x080056c5
 800567c:	080056c5 	.word	0x080056c5
 8005680:	080056c5 	.word	0x080056c5
 8005684:	080056c5 	.word	0x080056c5
 8005688:	080056c5 	.word	0x080056c5
 800568c:	080056c5 	.word	0x080056c5
 8005690:	080056bd 	.word	0x080056bd
 8005694:	2301      	movs	r3, #1
 8005696:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800569a:	e1c0      	b.n	8005a1e <UART_SetConfig+0x7ae>
 800569c:	2304      	movs	r3, #4
 800569e:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 80056a2:	e1bc      	b.n	8005a1e <UART_SetConfig+0x7ae>
 80056a4:	2308      	movs	r3, #8
 80056a6:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 80056aa:	e1b8      	b.n	8005a1e <UART_SetConfig+0x7ae>
 80056ac:	2310      	movs	r3, #16
 80056ae:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 80056b2:	e1b4      	b.n	8005a1e <UART_SetConfig+0x7ae>
 80056b4:	2320      	movs	r3, #32
 80056b6:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 80056ba:	e1b0      	b.n	8005a1e <UART_SetConfig+0x7ae>
 80056bc:	2340      	movs	r3, #64	; 0x40
 80056be:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 80056c2:	e1ac      	b.n	8005a1e <UART_SetConfig+0x7ae>
 80056c4:	2380      	movs	r3, #128	; 0x80
 80056c6:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 80056ca:	e1a8      	b.n	8005a1e <UART_SetConfig+0x7ae>
 80056cc:	697b      	ldr	r3, [r7, #20]
 80056ce:	681b      	ldr	r3, [r3, #0]
 80056d0:	4a75      	ldr	r2, [pc, #468]	; (80058a8 <UART_SetConfig+0x638>)
 80056d2:	4293      	cmp	r3, r2
 80056d4:	d130      	bne.n	8005738 <UART_SetConfig+0x4c8>
 80056d6:	4b73      	ldr	r3, [pc, #460]	; (80058a4 <UART_SetConfig+0x634>)
 80056d8:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80056da:	f003 0307 	and.w	r3, r3, #7
 80056de:	2b05      	cmp	r3, #5
 80056e0:	d826      	bhi.n	8005730 <UART_SetConfig+0x4c0>
 80056e2:	a201      	add	r2, pc, #4	; (adr r2, 80056e8 <UART_SetConfig+0x478>)
 80056e4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80056e8:	08005701 	.word	0x08005701
 80056ec:	08005709 	.word	0x08005709
 80056f0:	08005711 	.word	0x08005711
 80056f4:	08005719 	.word	0x08005719
 80056f8:	08005721 	.word	0x08005721
 80056fc:	08005729 	.word	0x08005729
 8005700:	2300      	movs	r3, #0
 8005702:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8005706:	e18a      	b.n	8005a1e <UART_SetConfig+0x7ae>
 8005708:	2304      	movs	r3, #4
 800570a:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800570e:	e186      	b.n	8005a1e <UART_SetConfig+0x7ae>
 8005710:	2308      	movs	r3, #8
 8005712:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8005716:	e182      	b.n	8005a1e <UART_SetConfig+0x7ae>
 8005718:	2310      	movs	r3, #16
 800571a:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800571e:	e17e      	b.n	8005a1e <UART_SetConfig+0x7ae>
 8005720:	2320      	movs	r3, #32
 8005722:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8005726:	e17a      	b.n	8005a1e <UART_SetConfig+0x7ae>
 8005728:	2340      	movs	r3, #64	; 0x40
 800572a:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800572e:	e176      	b.n	8005a1e <UART_SetConfig+0x7ae>
 8005730:	2380      	movs	r3, #128	; 0x80
 8005732:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8005736:	e172      	b.n	8005a1e <UART_SetConfig+0x7ae>
 8005738:	697b      	ldr	r3, [r7, #20]
 800573a:	681b      	ldr	r3, [r3, #0]
 800573c:	4a5b      	ldr	r2, [pc, #364]	; (80058ac <UART_SetConfig+0x63c>)
 800573e:	4293      	cmp	r3, r2
 8005740:	d130      	bne.n	80057a4 <UART_SetConfig+0x534>
 8005742:	4b58      	ldr	r3, [pc, #352]	; (80058a4 <UART_SetConfig+0x634>)
 8005744:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8005746:	f003 0307 	and.w	r3, r3, #7
 800574a:	2b05      	cmp	r3, #5
 800574c:	d826      	bhi.n	800579c <UART_SetConfig+0x52c>
 800574e:	a201      	add	r2, pc, #4	; (adr r2, 8005754 <UART_SetConfig+0x4e4>)
 8005750:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005754:	0800576d 	.word	0x0800576d
 8005758:	08005775 	.word	0x08005775
 800575c:	0800577d 	.word	0x0800577d
 8005760:	08005785 	.word	0x08005785
 8005764:	0800578d 	.word	0x0800578d
 8005768:	08005795 	.word	0x08005795
 800576c:	2300      	movs	r3, #0
 800576e:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8005772:	e154      	b.n	8005a1e <UART_SetConfig+0x7ae>
 8005774:	2304      	movs	r3, #4
 8005776:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800577a:	e150      	b.n	8005a1e <UART_SetConfig+0x7ae>
 800577c:	2308      	movs	r3, #8
 800577e:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8005782:	e14c      	b.n	8005a1e <UART_SetConfig+0x7ae>
 8005784:	2310      	movs	r3, #16
 8005786:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800578a:	e148      	b.n	8005a1e <UART_SetConfig+0x7ae>
 800578c:	2320      	movs	r3, #32
 800578e:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8005792:	e144      	b.n	8005a1e <UART_SetConfig+0x7ae>
 8005794:	2340      	movs	r3, #64	; 0x40
 8005796:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800579a:	e140      	b.n	8005a1e <UART_SetConfig+0x7ae>
 800579c:	2380      	movs	r3, #128	; 0x80
 800579e:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 80057a2:	e13c      	b.n	8005a1e <UART_SetConfig+0x7ae>
 80057a4:	697b      	ldr	r3, [r7, #20]
 80057a6:	681b      	ldr	r3, [r3, #0]
 80057a8:	4a41      	ldr	r2, [pc, #260]	; (80058b0 <UART_SetConfig+0x640>)
 80057aa:	4293      	cmp	r3, r2
 80057ac:	f040 8082 	bne.w	80058b4 <UART_SetConfig+0x644>
 80057b0:	4b3c      	ldr	r3, [pc, #240]	; (80058a4 <UART_SetConfig+0x634>)
 80057b2:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80057b4:	f003 0338 	and.w	r3, r3, #56	; 0x38
 80057b8:	2b28      	cmp	r3, #40	; 0x28
 80057ba:	d86d      	bhi.n	8005898 <UART_SetConfig+0x628>
 80057bc:	a201      	add	r2, pc, #4	; (adr r2, 80057c4 <UART_SetConfig+0x554>)
 80057be:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80057c2:	bf00      	nop
 80057c4:	08005869 	.word	0x08005869
 80057c8:	08005899 	.word	0x08005899
 80057cc:	08005899 	.word	0x08005899
 80057d0:	08005899 	.word	0x08005899
 80057d4:	08005899 	.word	0x08005899
 80057d8:	08005899 	.word	0x08005899
 80057dc:	08005899 	.word	0x08005899
 80057e0:	08005899 	.word	0x08005899
 80057e4:	08005871 	.word	0x08005871
 80057e8:	08005899 	.word	0x08005899
 80057ec:	08005899 	.word	0x08005899
 80057f0:	08005899 	.word	0x08005899
 80057f4:	08005899 	.word	0x08005899
 80057f8:	08005899 	.word	0x08005899
 80057fc:	08005899 	.word	0x08005899
 8005800:	08005899 	.word	0x08005899
 8005804:	08005879 	.word	0x08005879
 8005808:	08005899 	.word	0x08005899
 800580c:	08005899 	.word	0x08005899
 8005810:	08005899 	.word	0x08005899
 8005814:	08005899 	.word	0x08005899
 8005818:	08005899 	.word	0x08005899
 800581c:	08005899 	.word	0x08005899
 8005820:	08005899 	.word	0x08005899
 8005824:	08005881 	.word	0x08005881
 8005828:	08005899 	.word	0x08005899
 800582c:	08005899 	.word	0x08005899
 8005830:	08005899 	.word	0x08005899
 8005834:	08005899 	.word	0x08005899
 8005838:	08005899 	.word	0x08005899
 800583c:	08005899 	.word	0x08005899
 8005840:	08005899 	.word	0x08005899
 8005844:	08005889 	.word	0x08005889
 8005848:	08005899 	.word	0x08005899
 800584c:	08005899 	.word	0x08005899
 8005850:	08005899 	.word	0x08005899
 8005854:	08005899 	.word	0x08005899
 8005858:	08005899 	.word	0x08005899
 800585c:	08005899 	.word	0x08005899
 8005860:	08005899 	.word	0x08005899
 8005864:	08005891 	.word	0x08005891
 8005868:	2301      	movs	r3, #1
 800586a:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800586e:	e0d6      	b.n	8005a1e <UART_SetConfig+0x7ae>
 8005870:	2304      	movs	r3, #4
 8005872:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8005876:	e0d2      	b.n	8005a1e <UART_SetConfig+0x7ae>
 8005878:	2308      	movs	r3, #8
 800587a:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800587e:	e0ce      	b.n	8005a1e <UART_SetConfig+0x7ae>
 8005880:	2310      	movs	r3, #16
 8005882:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8005886:	e0ca      	b.n	8005a1e <UART_SetConfig+0x7ae>
 8005888:	2320      	movs	r3, #32
 800588a:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800588e:	e0c6      	b.n	8005a1e <UART_SetConfig+0x7ae>
 8005890:	2340      	movs	r3, #64	; 0x40
 8005892:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8005896:	e0c2      	b.n	8005a1e <UART_SetConfig+0x7ae>
 8005898:	2380      	movs	r3, #128	; 0x80
 800589a:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800589e:	e0be      	b.n	8005a1e <UART_SetConfig+0x7ae>
 80058a0:	40011400 	.word	0x40011400
 80058a4:	58024400 	.word	0x58024400
 80058a8:	40007800 	.word	0x40007800
 80058ac:	40007c00 	.word	0x40007c00
 80058b0:	40011800 	.word	0x40011800
 80058b4:	697b      	ldr	r3, [r7, #20]
 80058b6:	681b      	ldr	r3, [r3, #0]
 80058b8:	4aad      	ldr	r2, [pc, #692]	; (8005b70 <UART_SetConfig+0x900>)
 80058ba:	4293      	cmp	r3, r2
 80058bc:	d176      	bne.n	80059ac <UART_SetConfig+0x73c>
 80058be:	4bad      	ldr	r3, [pc, #692]	; (8005b74 <UART_SetConfig+0x904>)
 80058c0:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80058c2:	f003 0338 	and.w	r3, r3, #56	; 0x38
 80058c6:	2b28      	cmp	r3, #40	; 0x28
 80058c8:	d86c      	bhi.n	80059a4 <UART_SetConfig+0x734>
 80058ca:	a201      	add	r2, pc, #4	; (adr r2, 80058d0 <UART_SetConfig+0x660>)
 80058cc:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80058d0:	08005975 	.word	0x08005975
 80058d4:	080059a5 	.word	0x080059a5
 80058d8:	080059a5 	.word	0x080059a5
 80058dc:	080059a5 	.word	0x080059a5
 80058e0:	080059a5 	.word	0x080059a5
 80058e4:	080059a5 	.word	0x080059a5
 80058e8:	080059a5 	.word	0x080059a5
 80058ec:	080059a5 	.word	0x080059a5
 80058f0:	0800597d 	.word	0x0800597d
 80058f4:	080059a5 	.word	0x080059a5
 80058f8:	080059a5 	.word	0x080059a5
 80058fc:	080059a5 	.word	0x080059a5
 8005900:	080059a5 	.word	0x080059a5
 8005904:	080059a5 	.word	0x080059a5
 8005908:	080059a5 	.word	0x080059a5
 800590c:	080059a5 	.word	0x080059a5
 8005910:	08005985 	.word	0x08005985
 8005914:	080059a5 	.word	0x080059a5
 8005918:	080059a5 	.word	0x080059a5
 800591c:	080059a5 	.word	0x080059a5
 8005920:	080059a5 	.word	0x080059a5
 8005924:	080059a5 	.word	0x080059a5
 8005928:	080059a5 	.word	0x080059a5
 800592c:	080059a5 	.word	0x080059a5
 8005930:	0800598d 	.word	0x0800598d
 8005934:	080059a5 	.word	0x080059a5
 8005938:	080059a5 	.word	0x080059a5
 800593c:	080059a5 	.word	0x080059a5
 8005940:	080059a5 	.word	0x080059a5
 8005944:	080059a5 	.word	0x080059a5
 8005948:	080059a5 	.word	0x080059a5
 800594c:	080059a5 	.word	0x080059a5
 8005950:	08005995 	.word	0x08005995
 8005954:	080059a5 	.word	0x080059a5
 8005958:	080059a5 	.word	0x080059a5
 800595c:	080059a5 	.word	0x080059a5
 8005960:	080059a5 	.word	0x080059a5
 8005964:	080059a5 	.word	0x080059a5
 8005968:	080059a5 	.word	0x080059a5
 800596c:	080059a5 	.word	0x080059a5
 8005970:	0800599d 	.word	0x0800599d
 8005974:	2301      	movs	r3, #1
 8005976:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800597a:	e050      	b.n	8005a1e <UART_SetConfig+0x7ae>
 800597c:	2304      	movs	r3, #4
 800597e:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8005982:	e04c      	b.n	8005a1e <UART_SetConfig+0x7ae>
 8005984:	2308      	movs	r3, #8
 8005986:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800598a:	e048      	b.n	8005a1e <UART_SetConfig+0x7ae>
 800598c:	2310      	movs	r3, #16
 800598e:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8005992:	e044      	b.n	8005a1e <UART_SetConfig+0x7ae>
 8005994:	2320      	movs	r3, #32
 8005996:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800599a:	e040      	b.n	8005a1e <UART_SetConfig+0x7ae>
 800599c:	2340      	movs	r3, #64	; 0x40
 800599e:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 80059a2:	e03c      	b.n	8005a1e <UART_SetConfig+0x7ae>
 80059a4:	2380      	movs	r3, #128	; 0x80
 80059a6:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 80059aa:	e038      	b.n	8005a1e <UART_SetConfig+0x7ae>
 80059ac:	697b      	ldr	r3, [r7, #20]
 80059ae:	681b      	ldr	r3, [r3, #0]
 80059b0:	4a71      	ldr	r2, [pc, #452]	; (8005b78 <UART_SetConfig+0x908>)
 80059b2:	4293      	cmp	r3, r2
 80059b4:	d130      	bne.n	8005a18 <UART_SetConfig+0x7a8>
 80059b6:	4b6f      	ldr	r3, [pc, #444]	; (8005b74 <UART_SetConfig+0x904>)
 80059b8:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80059ba:	f003 0307 	and.w	r3, r3, #7
 80059be:	2b05      	cmp	r3, #5
 80059c0:	d826      	bhi.n	8005a10 <UART_SetConfig+0x7a0>
 80059c2:	a201      	add	r2, pc, #4	; (adr r2, 80059c8 <UART_SetConfig+0x758>)
 80059c4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80059c8:	080059e1 	.word	0x080059e1
 80059cc:	080059e9 	.word	0x080059e9
 80059d0:	080059f1 	.word	0x080059f1
 80059d4:	080059f9 	.word	0x080059f9
 80059d8:	08005a01 	.word	0x08005a01
 80059dc:	08005a09 	.word	0x08005a09
 80059e0:	2302      	movs	r3, #2
 80059e2:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 80059e6:	e01a      	b.n	8005a1e <UART_SetConfig+0x7ae>
 80059e8:	2304      	movs	r3, #4
 80059ea:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 80059ee:	e016      	b.n	8005a1e <UART_SetConfig+0x7ae>
 80059f0:	2308      	movs	r3, #8
 80059f2:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 80059f6:	e012      	b.n	8005a1e <UART_SetConfig+0x7ae>
 80059f8:	2310      	movs	r3, #16
 80059fa:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 80059fe:	e00e      	b.n	8005a1e <UART_SetConfig+0x7ae>
 8005a00:	2320      	movs	r3, #32
 8005a02:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8005a06:	e00a      	b.n	8005a1e <UART_SetConfig+0x7ae>
 8005a08:	2340      	movs	r3, #64	; 0x40
 8005a0a:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8005a0e:	e006      	b.n	8005a1e <UART_SetConfig+0x7ae>
 8005a10:	2380      	movs	r3, #128	; 0x80
 8005a12:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8005a16:	e002      	b.n	8005a1e <UART_SetConfig+0x7ae>
 8005a18:	2380      	movs	r3, #128	; 0x80
 8005a1a:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43

  /* Check LPUART instance */
  if (UART_INSTANCE_LOWPOWER(huart))
 8005a1e:	697b      	ldr	r3, [r7, #20]
 8005a20:	681b      	ldr	r3, [r3, #0]
 8005a22:	4a55      	ldr	r2, [pc, #340]	; (8005b78 <UART_SetConfig+0x908>)
 8005a24:	4293      	cmp	r3, r2
 8005a26:	f040 80f8 	bne.w	8005c1a <UART_SetConfig+0x9aa>
  {
    /* Retrieve frequency clock */
    switch (clocksource)
 8005a2a:	f897 3043 	ldrb.w	r3, [r7, #67]	; 0x43
 8005a2e:	2b20      	cmp	r3, #32
 8005a30:	dc46      	bgt.n	8005ac0 <UART_SetConfig+0x850>
 8005a32:	2b02      	cmp	r3, #2
 8005a34:	db75      	blt.n	8005b22 <UART_SetConfig+0x8b2>
 8005a36:	3b02      	subs	r3, #2
 8005a38:	2b1e      	cmp	r3, #30
 8005a3a:	d872      	bhi.n	8005b22 <UART_SetConfig+0x8b2>
 8005a3c:	a201      	add	r2, pc, #4	; (adr r2, 8005a44 <UART_SetConfig+0x7d4>)
 8005a3e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005a42:	bf00      	nop
 8005a44:	08005ac7 	.word	0x08005ac7
 8005a48:	08005b23 	.word	0x08005b23
 8005a4c:	08005acf 	.word	0x08005acf
 8005a50:	08005b23 	.word	0x08005b23
 8005a54:	08005b23 	.word	0x08005b23
 8005a58:	08005b23 	.word	0x08005b23
 8005a5c:	08005adf 	.word	0x08005adf
 8005a60:	08005b23 	.word	0x08005b23
 8005a64:	08005b23 	.word	0x08005b23
 8005a68:	08005b23 	.word	0x08005b23
 8005a6c:	08005b23 	.word	0x08005b23
 8005a70:	08005b23 	.word	0x08005b23
 8005a74:	08005b23 	.word	0x08005b23
 8005a78:	08005b23 	.word	0x08005b23
 8005a7c:	08005aef 	.word	0x08005aef
 8005a80:	08005b23 	.word	0x08005b23
 8005a84:	08005b23 	.word	0x08005b23
 8005a88:	08005b23 	.word	0x08005b23
 8005a8c:	08005b23 	.word	0x08005b23
 8005a90:	08005b23 	.word	0x08005b23
 8005a94:	08005b23 	.word	0x08005b23
 8005a98:	08005b23 	.word	0x08005b23
 8005a9c:	08005b23 	.word	0x08005b23
 8005aa0:	08005b23 	.word	0x08005b23
 8005aa4:	08005b23 	.word	0x08005b23
 8005aa8:	08005b23 	.word	0x08005b23
 8005aac:	08005b23 	.word	0x08005b23
 8005ab0:	08005b23 	.word	0x08005b23
 8005ab4:	08005b23 	.word	0x08005b23
 8005ab8:	08005b23 	.word	0x08005b23
 8005abc:	08005b15 	.word	0x08005b15
 8005ac0:	2b40      	cmp	r3, #64	; 0x40
 8005ac2:	d02a      	beq.n	8005b1a <UART_SetConfig+0x8aa>
 8005ac4:	e02d      	b.n	8005b22 <UART_SetConfig+0x8b2>
    {
      case UART_CLOCKSOURCE_D3PCLK1:
        pclk = HAL_RCCEx_GetD3PCLK1Freq();
 8005ac6:	f7fe fed3 	bl	8004870 <HAL_RCCEx_GetD3PCLK1Freq>
 8005aca:	63f8      	str	r0, [r7, #60]	; 0x3c
        break;
 8005acc:	e02f      	b.n	8005b2e <UART_SetConfig+0x8be>
      case UART_CLOCKSOURCE_PLL2:
        HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 8005ace:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8005ad2:	4618      	mov	r0, r3
 8005ad4:	f7fe fee2 	bl	800489c <HAL_RCCEx_GetPLL2ClockFreq>
        pclk = pll2_clocks.PLL2_Q_Frequency;
 8005ad8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005ada:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 8005adc:	e027      	b.n	8005b2e <UART_SetConfig+0x8be>
      case UART_CLOCKSOURCE_PLL3:
        HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 8005ade:	f107 0318 	add.w	r3, r7, #24
 8005ae2:	4618      	mov	r0, r3
 8005ae4:	f7ff f82e 	bl	8004b44 <HAL_RCCEx_GetPLL3ClockFreq>
        pclk = pll3_clocks.PLL3_Q_Frequency;
 8005ae8:	69fb      	ldr	r3, [r7, #28]
 8005aea:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 8005aec:	e01f      	b.n	8005b2e <UART_SetConfig+0x8be>
      case UART_CLOCKSOURCE_HSI:
        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8005aee:	4b21      	ldr	r3, [pc, #132]	; (8005b74 <UART_SetConfig+0x904>)
 8005af0:	681b      	ldr	r3, [r3, #0]
 8005af2:	f003 0320 	and.w	r3, r3, #32
 8005af6:	2b00      	cmp	r3, #0
 8005af8:	d009      	beq.n	8005b0e <UART_SetConfig+0x89e>
        {
          pclk = (uint32_t)(HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3U));
 8005afa:	4b1e      	ldr	r3, [pc, #120]	; (8005b74 <UART_SetConfig+0x904>)
 8005afc:	681b      	ldr	r3, [r3, #0]
 8005afe:	08db      	lsrs	r3, r3, #3
 8005b00:	f003 0303 	and.w	r3, r3, #3
 8005b04:	4a1d      	ldr	r2, [pc, #116]	; (8005b7c <UART_SetConfig+0x90c>)
 8005b06:	fa22 f303 	lsr.w	r3, r2, r3
 8005b0a:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          pclk = (uint32_t) HSI_VALUE;
        }
        break;
 8005b0c:	e00f      	b.n	8005b2e <UART_SetConfig+0x8be>
          pclk = (uint32_t) HSI_VALUE;
 8005b0e:	4b1b      	ldr	r3, [pc, #108]	; (8005b7c <UART_SetConfig+0x90c>)
 8005b10:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 8005b12:	e00c      	b.n	8005b2e <UART_SetConfig+0x8be>
      case UART_CLOCKSOURCE_CSI:
        pclk = (uint32_t) CSI_VALUE;
 8005b14:	4b1a      	ldr	r3, [pc, #104]	; (8005b80 <UART_SetConfig+0x910>)
 8005b16:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 8005b18:	e009      	b.n	8005b2e <UART_SetConfig+0x8be>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8005b1a:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8005b1e:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 8005b20:	e005      	b.n	8005b2e <UART_SetConfig+0x8be>
      default:
        pclk = 0U;
 8005b22:	2300      	movs	r3, #0
 8005b24:	63fb      	str	r3, [r7, #60]	; 0x3c
        ret = HAL_ERROR;
 8005b26:	2301      	movs	r3, #1
 8005b28:	f887 3042 	strb.w	r3, [r7, #66]	; 0x42
        break;
 8005b2c:	bf00      	nop
    }

    /* If proper clock source reported */
    if (pclk != 0U)
 8005b2e:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8005b30:	2b00      	cmp	r3, #0
 8005b32:	f000 81ee 	beq.w	8005f12 <UART_SetConfig+0xca2>
    {
      /* Compute clock after Prescaler */
      lpuart_ker_ck_pres = (pclk / UARTPrescTable[huart->Init.ClockPrescaler]);
 8005b36:	697b      	ldr	r3, [r7, #20]
 8005b38:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005b3a:	4a12      	ldr	r2, [pc, #72]	; (8005b84 <UART_SetConfig+0x914>)
 8005b3c:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8005b40:	461a      	mov	r2, r3
 8005b42:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8005b44:	fbb3 f3f2 	udiv	r3, r3, r2
 8005b48:	633b      	str	r3, [r7, #48]	; 0x30

      /* Ensure that Frequency clock is in the range [3 * baudrate, 4096 * baudrate] */
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 8005b4a:	697b      	ldr	r3, [r7, #20]
 8005b4c:	685a      	ldr	r2, [r3, #4]
 8005b4e:	4613      	mov	r3, r2
 8005b50:	005b      	lsls	r3, r3, #1
 8005b52:	4413      	add	r3, r2
 8005b54:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8005b56:	429a      	cmp	r2, r3
 8005b58:	d305      	bcc.n	8005b66 <UART_SetConfig+0x8f6>
          (lpuart_ker_ck_pres > (4096U * huart->Init.BaudRate)))
 8005b5a:	697b      	ldr	r3, [r7, #20]
 8005b5c:	685b      	ldr	r3, [r3, #4]
 8005b5e:	031b      	lsls	r3, r3, #12
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 8005b60:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8005b62:	429a      	cmp	r2, r3
 8005b64:	d910      	bls.n	8005b88 <UART_SetConfig+0x918>
      {
        ret = HAL_ERROR;
 8005b66:	2301      	movs	r3, #1
 8005b68:	f887 3042 	strb.w	r3, [r7, #66]	; 0x42
 8005b6c:	e1d1      	b.n	8005f12 <UART_SetConfig+0xca2>
 8005b6e:	bf00      	nop
 8005b70:	40011c00 	.word	0x40011c00
 8005b74:	58024400 	.word	0x58024400
 8005b78:	58000c00 	.word	0x58000c00
 8005b7c:	03d09000 	.word	0x03d09000
 8005b80:	003d0900 	.word	0x003d0900
 8005b84:	08008b4c 	.word	0x08008b4c
      }
      else
      {
        /* Check computed UsartDiv value is in allocated range
           (it is forbidden to write values lower than 0x300 in the LPUART_BRR register) */
        usartdiv = (uint32_t)(UART_DIV_LPUART(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8005b88:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8005b8a:	2200      	movs	r2, #0
 8005b8c:	60bb      	str	r3, [r7, #8]
 8005b8e:	60fa      	str	r2, [r7, #12]
 8005b90:	697b      	ldr	r3, [r7, #20]
 8005b92:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005b94:	4ac0      	ldr	r2, [pc, #768]	; (8005e98 <UART_SetConfig+0xc28>)
 8005b96:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8005b9a:	b29b      	uxth	r3, r3
 8005b9c:	2200      	movs	r2, #0
 8005b9e:	603b      	str	r3, [r7, #0]
 8005ba0:	607a      	str	r2, [r7, #4]
 8005ba2:	e9d7 2300 	ldrd	r2, r3, [r7]
 8005ba6:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 8005baa:	f7fa fd29 	bl	8000600 <__aeabi_uldivmod>
 8005bae:	4602      	mov	r2, r0
 8005bb0:	460b      	mov	r3, r1
 8005bb2:	4610      	mov	r0, r2
 8005bb4:	4619      	mov	r1, r3
 8005bb6:	f04f 0200 	mov.w	r2, #0
 8005bba:	f04f 0300 	mov.w	r3, #0
 8005bbe:	020b      	lsls	r3, r1, #8
 8005bc0:	ea43 6310 	orr.w	r3, r3, r0, lsr #24
 8005bc4:	0202      	lsls	r2, r0, #8
 8005bc6:	6979      	ldr	r1, [r7, #20]
 8005bc8:	6849      	ldr	r1, [r1, #4]
 8005bca:	0849      	lsrs	r1, r1, #1
 8005bcc:	2000      	movs	r0, #0
 8005bce:	460c      	mov	r4, r1
 8005bd0:	4605      	mov	r5, r0
 8005bd2:	eb12 0804 	adds.w	r8, r2, r4
 8005bd6:	eb43 0905 	adc.w	r9, r3, r5
 8005bda:	697b      	ldr	r3, [r7, #20]
 8005bdc:	685b      	ldr	r3, [r3, #4]
 8005bde:	2200      	movs	r2, #0
 8005be0:	469a      	mov	sl, r3
 8005be2:	4693      	mov	fp, r2
 8005be4:	4652      	mov	r2, sl
 8005be6:	465b      	mov	r3, fp
 8005be8:	4640      	mov	r0, r8
 8005bea:	4649      	mov	r1, r9
 8005bec:	f7fa fd08 	bl	8000600 <__aeabi_uldivmod>
 8005bf0:	4602      	mov	r2, r0
 8005bf2:	460b      	mov	r3, r1
 8005bf4:	4613      	mov	r3, r2
 8005bf6:	63bb      	str	r3, [r7, #56]	; 0x38
        if ((usartdiv >= LPUART_BRR_MIN) && (usartdiv <= LPUART_BRR_MAX))
 8005bf8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005bfa:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8005bfe:	d308      	bcc.n	8005c12 <UART_SetConfig+0x9a2>
 8005c00:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005c02:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8005c06:	d204      	bcs.n	8005c12 <UART_SetConfig+0x9a2>
        {
          huart->Instance->BRR = usartdiv;
 8005c08:	697b      	ldr	r3, [r7, #20]
 8005c0a:	681b      	ldr	r3, [r3, #0]
 8005c0c:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8005c0e:	60da      	str	r2, [r3, #12]
 8005c10:	e17f      	b.n	8005f12 <UART_SetConfig+0xca2>
        }
        else
        {
          ret = HAL_ERROR;
 8005c12:	2301      	movs	r3, #1
 8005c14:	f887 3042 	strb.w	r3, [r7, #66]	; 0x42
 8005c18:	e17b      	b.n	8005f12 <UART_SetConfig+0xca2>
      } /* if ( (lpuart_ker_ck_pres < (3 * huart->Init.BaudRate) ) ||
                (lpuart_ker_ck_pres > (4096 * huart->Init.BaudRate) )) */
    } /* if (pclk != 0) */
  }
  /* Check UART Over Sampling to set Baud Rate Register */
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8005c1a:	697b      	ldr	r3, [r7, #20]
 8005c1c:	69db      	ldr	r3, [r3, #28]
 8005c1e:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8005c22:	f040 80bd 	bne.w	8005da0 <UART_SetConfig+0xb30>
  {
    switch (clocksource)
 8005c26:	f897 3043 	ldrb.w	r3, [r7, #67]	; 0x43
 8005c2a:	2b20      	cmp	r3, #32
 8005c2c:	dc48      	bgt.n	8005cc0 <UART_SetConfig+0xa50>
 8005c2e:	2b00      	cmp	r3, #0
 8005c30:	db7b      	blt.n	8005d2a <UART_SetConfig+0xaba>
 8005c32:	2b20      	cmp	r3, #32
 8005c34:	d879      	bhi.n	8005d2a <UART_SetConfig+0xaba>
 8005c36:	a201      	add	r2, pc, #4	; (adr r2, 8005c3c <UART_SetConfig+0x9cc>)
 8005c38:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005c3c:	08005cc7 	.word	0x08005cc7
 8005c40:	08005ccf 	.word	0x08005ccf
 8005c44:	08005d2b 	.word	0x08005d2b
 8005c48:	08005d2b 	.word	0x08005d2b
 8005c4c:	08005cd7 	.word	0x08005cd7
 8005c50:	08005d2b 	.word	0x08005d2b
 8005c54:	08005d2b 	.word	0x08005d2b
 8005c58:	08005d2b 	.word	0x08005d2b
 8005c5c:	08005ce7 	.word	0x08005ce7
 8005c60:	08005d2b 	.word	0x08005d2b
 8005c64:	08005d2b 	.word	0x08005d2b
 8005c68:	08005d2b 	.word	0x08005d2b
 8005c6c:	08005d2b 	.word	0x08005d2b
 8005c70:	08005d2b 	.word	0x08005d2b
 8005c74:	08005d2b 	.word	0x08005d2b
 8005c78:	08005d2b 	.word	0x08005d2b
 8005c7c:	08005cf7 	.word	0x08005cf7
 8005c80:	08005d2b 	.word	0x08005d2b
 8005c84:	08005d2b 	.word	0x08005d2b
 8005c88:	08005d2b 	.word	0x08005d2b
 8005c8c:	08005d2b 	.word	0x08005d2b
 8005c90:	08005d2b 	.word	0x08005d2b
 8005c94:	08005d2b 	.word	0x08005d2b
 8005c98:	08005d2b 	.word	0x08005d2b
 8005c9c:	08005d2b 	.word	0x08005d2b
 8005ca0:	08005d2b 	.word	0x08005d2b
 8005ca4:	08005d2b 	.word	0x08005d2b
 8005ca8:	08005d2b 	.word	0x08005d2b
 8005cac:	08005d2b 	.word	0x08005d2b
 8005cb0:	08005d2b 	.word	0x08005d2b
 8005cb4:	08005d2b 	.word	0x08005d2b
 8005cb8:	08005d2b 	.word	0x08005d2b
 8005cbc:	08005d1d 	.word	0x08005d1d
 8005cc0:	2b40      	cmp	r3, #64	; 0x40
 8005cc2:	d02e      	beq.n	8005d22 <UART_SetConfig+0xab2>
 8005cc4:	e031      	b.n	8005d2a <UART_SetConfig+0xaba>
    {
      case UART_CLOCKSOURCE_D2PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8005cc6:	f7fd fc07 	bl	80034d8 <HAL_RCC_GetPCLK1Freq>
 8005cca:	63f8      	str	r0, [r7, #60]	; 0x3c
        break;
 8005ccc:	e033      	b.n	8005d36 <UART_SetConfig+0xac6>
      case UART_CLOCKSOURCE_D2PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8005cce:	f7fd fc19 	bl	8003504 <HAL_RCC_GetPCLK2Freq>
 8005cd2:	63f8      	str	r0, [r7, #60]	; 0x3c
        break;
 8005cd4:	e02f      	b.n	8005d36 <UART_SetConfig+0xac6>
      case UART_CLOCKSOURCE_PLL2:
        HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 8005cd6:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8005cda:	4618      	mov	r0, r3
 8005cdc:	f7fe fdde 	bl	800489c <HAL_RCCEx_GetPLL2ClockFreq>
        pclk = pll2_clocks.PLL2_Q_Frequency;
 8005ce0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005ce2:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 8005ce4:	e027      	b.n	8005d36 <UART_SetConfig+0xac6>
      case UART_CLOCKSOURCE_PLL3:
        HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 8005ce6:	f107 0318 	add.w	r3, r7, #24
 8005cea:	4618      	mov	r0, r3
 8005cec:	f7fe ff2a 	bl	8004b44 <HAL_RCCEx_GetPLL3ClockFreq>
        pclk = pll3_clocks.PLL3_Q_Frequency;
 8005cf0:	69fb      	ldr	r3, [r7, #28]
 8005cf2:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 8005cf4:	e01f      	b.n	8005d36 <UART_SetConfig+0xac6>
      case UART_CLOCKSOURCE_HSI:
        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8005cf6:	4b69      	ldr	r3, [pc, #420]	; (8005e9c <UART_SetConfig+0xc2c>)
 8005cf8:	681b      	ldr	r3, [r3, #0]
 8005cfa:	f003 0320 	and.w	r3, r3, #32
 8005cfe:	2b00      	cmp	r3, #0
 8005d00:	d009      	beq.n	8005d16 <UART_SetConfig+0xaa6>
        {
          pclk = (uint32_t)(HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3U));
 8005d02:	4b66      	ldr	r3, [pc, #408]	; (8005e9c <UART_SetConfig+0xc2c>)
 8005d04:	681b      	ldr	r3, [r3, #0]
 8005d06:	08db      	lsrs	r3, r3, #3
 8005d08:	f003 0303 	and.w	r3, r3, #3
 8005d0c:	4a64      	ldr	r2, [pc, #400]	; (8005ea0 <UART_SetConfig+0xc30>)
 8005d0e:	fa22 f303 	lsr.w	r3, r2, r3
 8005d12:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          pclk = (uint32_t) HSI_VALUE;
        }
        break;
 8005d14:	e00f      	b.n	8005d36 <UART_SetConfig+0xac6>
          pclk = (uint32_t) HSI_VALUE;
 8005d16:	4b62      	ldr	r3, [pc, #392]	; (8005ea0 <UART_SetConfig+0xc30>)
 8005d18:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 8005d1a:	e00c      	b.n	8005d36 <UART_SetConfig+0xac6>
      case UART_CLOCKSOURCE_CSI:
        pclk = (uint32_t) CSI_VALUE;
 8005d1c:	4b61      	ldr	r3, [pc, #388]	; (8005ea4 <UART_SetConfig+0xc34>)
 8005d1e:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 8005d20:	e009      	b.n	8005d36 <UART_SetConfig+0xac6>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8005d22:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8005d26:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 8005d28:	e005      	b.n	8005d36 <UART_SetConfig+0xac6>
      default:
        pclk = 0U;
 8005d2a:	2300      	movs	r3, #0
 8005d2c:	63fb      	str	r3, [r7, #60]	; 0x3c
        ret = HAL_ERROR;
 8005d2e:	2301      	movs	r3, #1
 8005d30:	f887 3042 	strb.w	r3, [r7, #66]	; 0x42
        break;
 8005d34:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 8005d36:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8005d38:	2b00      	cmp	r3, #0
 8005d3a:	f000 80ea 	beq.w	8005f12 <UART_SetConfig+0xca2>
    {
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8005d3e:	697b      	ldr	r3, [r7, #20]
 8005d40:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005d42:	4a55      	ldr	r2, [pc, #340]	; (8005e98 <UART_SetConfig+0xc28>)
 8005d44:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8005d48:	461a      	mov	r2, r3
 8005d4a:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8005d4c:	fbb3 f3f2 	udiv	r3, r3, r2
 8005d50:	005a      	lsls	r2, r3, #1
 8005d52:	697b      	ldr	r3, [r7, #20]
 8005d54:	685b      	ldr	r3, [r3, #4]
 8005d56:	085b      	lsrs	r3, r3, #1
 8005d58:	441a      	add	r2, r3
 8005d5a:	697b      	ldr	r3, [r7, #20]
 8005d5c:	685b      	ldr	r3, [r3, #4]
 8005d5e:	fbb2 f3f3 	udiv	r3, r2, r3
 8005d62:	63bb      	str	r3, [r7, #56]	; 0x38
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8005d64:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005d66:	2b0f      	cmp	r3, #15
 8005d68:	d916      	bls.n	8005d98 <UART_SetConfig+0xb28>
 8005d6a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005d6c:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8005d70:	d212      	bcs.n	8005d98 <UART_SetConfig+0xb28>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 8005d72:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005d74:	b29b      	uxth	r3, r3
 8005d76:	f023 030f 	bic.w	r3, r3, #15
 8005d7a:	86fb      	strh	r3, [r7, #54]	; 0x36
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 8005d7c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005d7e:	085b      	lsrs	r3, r3, #1
 8005d80:	b29b      	uxth	r3, r3
 8005d82:	f003 0307 	and.w	r3, r3, #7
 8005d86:	b29a      	uxth	r2, r3
 8005d88:	8efb      	ldrh	r3, [r7, #54]	; 0x36
 8005d8a:	4313      	orrs	r3, r2
 8005d8c:	86fb      	strh	r3, [r7, #54]	; 0x36
        huart->Instance->BRR = brrtemp;
 8005d8e:	697b      	ldr	r3, [r7, #20]
 8005d90:	681b      	ldr	r3, [r3, #0]
 8005d92:	8efa      	ldrh	r2, [r7, #54]	; 0x36
 8005d94:	60da      	str	r2, [r3, #12]
 8005d96:	e0bc      	b.n	8005f12 <UART_SetConfig+0xca2>
      }
      else
      {
        ret = HAL_ERROR;
 8005d98:	2301      	movs	r3, #1
 8005d9a:	f887 3042 	strb.w	r3, [r7, #66]	; 0x42
 8005d9e:	e0b8      	b.n	8005f12 <UART_SetConfig+0xca2>
      }
    }
  }
  else
  {
    switch (clocksource)
 8005da0:	f897 3043 	ldrb.w	r3, [r7, #67]	; 0x43
 8005da4:	2b20      	cmp	r3, #32
 8005da6:	dc4b      	bgt.n	8005e40 <UART_SetConfig+0xbd0>
 8005da8:	2b00      	cmp	r3, #0
 8005daa:	f2c0 8087 	blt.w	8005ebc <UART_SetConfig+0xc4c>
 8005dae:	2b20      	cmp	r3, #32
 8005db0:	f200 8084 	bhi.w	8005ebc <UART_SetConfig+0xc4c>
 8005db4:	a201      	add	r2, pc, #4	; (adr r2, 8005dbc <UART_SetConfig+0xb4c>)
 8005db6:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005dba:	bf00      	nop
 8005dbc:	08005e47 	.word	0x08005e47
 8005dc0:	08005e4f 	.word	0x08005e4f
 8005dc4:	08005ebd 	.word	0x08005ebd
 8005dc8:	08005ebd 	.word	0x08005ebd
 8005dcc:	08005e57 	.word	0x08005e57
 8005dd0:	08005ebd 	.word	0x08005ebd
 8005dd4:	08005ebd 	.word	0x08005ebd
 8005dd8:	08005ebd 	.word	0x08005ebd
 8005ddc:	08005e67 	.word	0x08005e67
 8005de0:	08005ebd 	.word	0x08005ebd
 8005de4:	08005ebd 	.word	0x08005ebd
 8005de8:	08005ebd 	.word	0x08005ebd
 8005dec:	08005ebd 	.word	0x08005ebd
 8005df0:	08005ebd 	.word	0x08005ebd
 8005df4:	08005ebd 	.word	0x08005ebd
 8005df8:	08005ebd 	.word	0x08005ebd
 8005dfc:	08005e77 	.word	0x08005e77
 8005e00:	08005ebd 	.word	0x08005ebd
 8005e04:	08005ebd 	.word	0x08005ebd
 8005e08:	08005ebd 	.word	0x08005ebd
 8005e0c:	08005ebd 	.word	0x08005ebd
 8005e10:	08005ebd 	.word	0x08005ebd
 8005e14:	08005ebd 	.word	0x08005ebd
 8005e18:	08005ebd 	.word	0x08005ebd
 8005e1c:	08005ebd 	.word	0x08005ebd
 8005e20:	08005ebd 	.word	0x08005ebd
 8005e24:	08005ebd 	.word	0x08005ebd
 8005e28:	08005ebd 	.word	0x08005ebd
 8005e2c:	08005ebd 	.word	0x08005ebd
 8005e30:	08005ebd 	.word	0x08005ebd
 8005e34:	08005ebd 	.word	0x08005ebd
 8005e38:	08005ebd 	.word	0x08005ebd
 8005e3c:	08005eaf 	.word	0x08005eaf
 8005e40:	2b40      	cmp	r3, #64	; 0x40
 8005e42:	d037      	beq.n	8005eb4 <UART_SetConfig+0xc44>
 8005e44:	e03a      	b.n	8005ebc <UART_SetConfig+0xc4c>
    {
      case UART_CLOCKSOURCE_D2PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8005e46:	f7fd fb47 	bl	80034d8 <HAL_RCC_GetPCLK1Freq>
 8005e4a:	63f8      	str	r0, [r7, #60]	; 0x3c
        break;
 8005e4c:	e03c      	b.n	8005ec8 <UART_SetConfig+0xc58>
      case UART_CLOCKSOURCE_D2PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8005e4e:	f7fd fb59 	bl	8003504 <HAL_RCC_GetPCLK2Freq>
 8005e52:	63f8      	str	r0, [r7, #60]	; 0x3c
        break;
 8005e54:	e038      	b.n	8005ec8 <UART_SetConfig+0xc58>
      case UART_CLOCKSOURCE_PLL2:
        HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 8005e56:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8005e5a:	4618      	mov	r0, r3
 8005e5c:	f7fe fd1e 	bl	800489c <HAL_RCCEx_GetPLL2ClockFreq>
        pclk = pll2_clocks.PLL2_Q_Frequency;
 8005e60:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005e62:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 8005e64:	e030      	b.n	8005ec8 <UART_SetConfig+0xc58>
      case UART_CLOCKSOURCE_PLL3:
        HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 8005e66:	f107 0318 	add.w	r3, r7, #24
 8005e6a:	4618      	mov	r0, r3
 8005e6c:	f7fe fe6a 	bl	8004b44 <HAL_RCCEx_GetPLL3ClockFreq>
        pclk = pll3_clocks.PLL3_Q_Frequency;
 8005e70:	69fb      	ldr	r3, [r7, #28]
 8005e72:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 8005e74:	e028      	b.n	8005ec8 <UART_SetConfig+0xc58>
      case UART_CLOCKSOURCE_HSI:
        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8005e76:	4b09      	ldr	r3, [pc, #36]	; (8005e9c <UART_SetConfig+0xc2c>)
 8005e78:	681b      	ldr	r3, [r3, #0]
 8005e7a:	f003 0320 	and.w	r3, r3, #32
 8005e7e:	2b00      	cmp	r3, #0
 8005e80:	d012      	beq.n	8005ea8 <UART_SetConfig+0xc38>
        {
          pclk = (uint32_t)(HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3U));
 8005e82:	4b06      	ldr	r3, [pc, #24]	; (8005e9c <UART_SetConfig+0xc2c>)
 8005e84:	681b      	ldr	r3, [r3, #0]
 8005e86:	08db      	lsrs	r3, r3, #3
 8005e88:	f003 0303 	and.w	r3, r3, #3
 8005e8c:	4a04      	ldr	r2, [pc, #16]	; (8005ea0 <UART_SetConfig+0xc30>)
 8005e8e:	fa22 f303 	lsr.w	r3, r2, r3
 8005e92:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          pclk = (uint32_t) HSI_VALUE;
        }
        break;
 8005e94:	e018      	b.n	8005ec8 <UART_SetConfig+0xc58>
 8005e96:	bf00      	nop
 8005e98:	08008b4c 	.word	0x08008b4c
 8005e9c:	58024400 	.word	0x58024400
 8005ea0:	03d09000 	.word	0x03d09000
 8005ea4:	003d0900 	.word	0x003d0900
          pclk = (uint32_t) HSI_VALUE;
 8005ea8:	4b24      	ldr	r3, [pc, #144]	; (8005f3c <UART_SetConfig+0xccc>)
 8005eaa:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 8005eac:	e00c      	b.n	8005ec8 <UART_SetConfig+0xc58>
      case UART_CLOCKSOURCE_CSI:
        pclk = (uint32_t) CSI_VALUE;
 8005eae:	4b24      	ldr	r3, [pc, #144]	; (8005f40 <UART_SetConfig+0xcd0>)
 8005eb0:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 8005eb2:	e009      	b.n	8005ec8 <UART_SetConfig+0xc58>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8005eb4:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8005eb8:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 8005eba:	e005      	b.n	8005ec8 <UART_SetConfig+0xc58>
      default:
        pclk = 0U;
 8005ebc:	2300      	movs	r3, #0
 8005ebe:	63fb      	str	r3, [r7, #60]	; 0x3c
        ret = HAL_ERROR;
 8005ec0:	2301      	movs	r3, #1
 8005ec2:	f887 3042 	strb.w	r3, [r7, #66]	; 0x42
        break;
 8005ec6:	bf00      	nop
    }

    if (pclk != 0U)
 8005ec8:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8005eca:	2b00      	cmp	r3, #0
 8005ecc:	d021      	beq.n	8005f12 <UART_SetConfig+0xca2>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8005ece:	697b      	ldr	r3, [r7, #20]
 8005ed0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005ed2:	4a1c      	ldr	r2, [pc, #112]	; (8005f44 <UART_SetConfig+0xcd4>)
 8005ed4:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8005ed8:	461a      	mov	r2, r3
 8005eda:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8005edc:	fbb3 f2f2 	udiv	r2, r3, r2
 8005ee0:	697b      	ldr	r3, [r7, #20]
 8005ee2:	685b      	ldr	r3, [r3, #4]
 8005ee4:	085b      	lsrs	r3, r3, #1
 8005ee6:	441a      	add	r2, r3
 8005ee8:	697b      	ldr	r3, [r7, #20]
 8005eea:	685b      	ldr	r3, [r3, #4]
 8005eec:	fbb2 f3f3 	udiv	r3, r2, r3
 8005ef0:	63bb      	str	r3, [r7, #56]	; 0x38
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8005ef2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005ef4:	2b0f      	cmp	r3, #15
 8005ef6:	d909      	bls.n	8005f0c <UART_SetConfig+0xc9c>
 8005ef8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005efa:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8005efe:	d205      	bcs.n	8005f0c <UART_SetConfig+0xc9c>
      {
        huart->Instance->BRR = (uint16_t)usartdiv;
 8005f00:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005f02:	b29a      	uxth	r2, r3
 8005f04:	697b      	ldr	r3, [r7, #20]
 8005f06:	681b      	ldr	r3, [r3, #0]
 8005f08:	60da      	str	r2, [r3, #12]
 8005f0a:	e002      	b.n	8005f12 <UART_SetConfig+0xca2>
      }
      else
      {
        ret = HAL_ERROR;
 8005f0c:	2301      	movs	r3, #1
 8005f0e:	f887 3042 	strb.w	r3, [r7, #66]	; 0x42
      }
    }
  }

  /* Initialize the number of data to process during RX/TX ISR execution */
  huart->NbTxDataToProcess = 1;
 8005f12:	697b      	ldr	r3, [r7, #20]
 8005f14:	2201      	movs	r2, #1
 8005f16:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
  huart->NbRxDataToProcess = 1;
 8005f1a:	697b      	ldr	r3, [r7, #20]
 8005f1c:	2201      	movs	r2, #1
 8005f1e:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68

  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 8005f22:	697b      	ldr	r3, [r7, #20]
 8005f24:	2200      	movs	r2, #0
 8005f26:	675a      	str	r2, [r3, #116]	; 0x74
  huart->TxISR = NULL;
 8005f28:	697b      	ldr	r3, [r7, #20]
 8005f2a:	2200      	movs	r2, #0
 8005f2c:	679a      	str	r2, [r3, #120]	; 0x78

  return ret;
 8005f2e:	f897 3042 	ldrb.w	r3, [r7, #66]	; 0x42
}
 8005f32:	4618      	mov	r0, r3
 8005f34:	3748      	adds	r7, #72	; 0x48
 8005f36:	46bd      	mov	sp, r7
 8005f38:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8005f3c:	03d09000 	.word	0x03d09000
 8005f40:	003d0900 	.word	0x003d0900
 8005f44:	08008b4c 	.word	0x08008b4c

08005f48 <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 8005f48:	b480      	push	{r7}
 8005f4a:	b083      	sub	sp, #12
 8005f4c:	af00      	add	r7, sp, #0
 8005f4e:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 8005f50:	687b      	ldr	r3, [r7, #4]
 8005f52:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005f54:	f003 0301 	and.w	r3, r3, #1
 8005f58:	2b00      	cmp	r3, #0
 8005f5a:	d00a      	beq.n	8005f72 <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 8005f5c:	687b      	ldr	r3, [r7, #4]
 8005f5e:	681b      	ldr	r3, [r3, #0]
 8005f60:	685b      	ldr	r3, [r3, #4]
 8005f62:	f423 3100 	bic.w	r1, r3, #131072	; 0x20000
 8005f66:	687b      	ldr	r3, [r7, #4]
 8005f68:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8005f6a:	687b      	ldr	r3, [r7, #4]
 8005f6c:	681b      	ldr	r3, [r3, #0]
 8005f6e:	430a      	orrs	r2, r1
 8005f70:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 8005f72:	687b      	ldr	r3, [r7, #4]
 8005f74:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005f76:	f003 0302 	and.w	r3, r3, #2
 8005f7a:	2b00      	cmp	r3, #0
 8005f7c:	d00a      	beq.n	8005f94 <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 8005f7e:	687b      	ldr	r3, [r7, #4]
 8005f80:	681b      	ldr	r3, [r3, #0]
 8005f82:	685b      	ldr	r3, [r3, #4]
 8005f84:	f423 3180 	bic.w	r1, r3, #65536	; 0x10000
 8005f88:	687b      	ldr	r3, [r7, #4]
 8005f8a:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8005f8c:	687b      	ldr	r3, [r7, #4]
 8005f8e:	681b      	ldr	r3, [r3, #0]
 8005f90:	430a      	orrs	r2, r1
 8005f92:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 8005f94:	687b      	ldr	r3, [r7, #4]
 8005f96:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005f98:	f003 0304 	and.w	r3, r3, #4
 8005f9c:	2b00      	cmp	r3, #0
 8005f9e:	d00a      	beq.n	8005fb6 <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 8005fa0:	687b      	ldr	r3, [r7, #4]
 8005fa2:	681b      	ldr	r3, [r3, #0]
 8005fa4:	685b      	ldr	r3, [r3, #4]
 8005fa6:	f423 2180 	bic.w	r1, r3, #262144	; 0x40000
 8005faa:	687b      	ldr	r3, [r7, #4]
 8005fac:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8005fae:	687b      	ldr	r3, [r7, #4]
 8005fb0:	681b      	ldr	r3, [r3, #0]
 8005fb2:	430a      	orrs	r2, r1
 8005fb4:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 8005fb6:	687b      	ldr	r3, [r7, #4]
 8005fb8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005fba:	f003 0308 	and.w	r3, r3, #8
 8005fbe:	2b00      	cmp	r3, #0
 8005fc0:	d00a      	beq.n	8005fd8 <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 8005fc2:	687b      	ldr	r3, [r7, #4]
 8005fc4:	681b      	ldr	r3, [r3, #0]
 8005fc6:	685b      	ldr	r3, [r3, #4]
 8005fc8:	f423 4100 	bic.w	r1, r3, #32768	; 0x8000
 8005fcc:	687b      	ldr	r3, [r7, #4]
 8005fce:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8005fd0:	687b      	ldr	r3, [r7, #4]
 8005fd2:	681b      	ldr	r3, [r3, #0]
 8005fd4:	430a      	orrs	r2, r1
 8005fd6:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 8005fd8:	687b      	ldr	r3, [r7, #4]
 8005fda:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005fdc:	f003 0310 	and.w	r3, r3, #16
 8005fe0:	2b00      	cmp	r3, #0
 8005fe2:	d00a      	beq.n	8005ffa <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 8005fe4:	687b      	ldr	r3, [r7, #4]
 8005fe6:	681b      	ldr	r3, [r3, #0]
 8005fe8:	689b      	ldr	r3, [r3, #8]
 8005fea:	f423 5180 	bic.w	r1, r3, #4096	; 0x1000
 8005fee:	687b      	ldr	r3, [r7, #4]
 8005ff0:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8005ff2:	687b      	ldr	r3, [r7, #4]
 8005ff4:	681b      	ldr	r3, [r3, #0]
 8005ff6:	430a      	orrs	r2, r1
 8005ff8:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 8005ffa:	687b      	ldr	r3, [r7, #4]
 8005ffc:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005ffe:	f003 0320 	and.w	r3, r3, #32
 8006002:	2b00      	cmp	r3, #0
 8006004:	d00a      	beq.n	800601c <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 8006006:	687b      	ldr	r3, [r7, #4]
 8006008:	681b      	ldr	r3, [r3, #0]
 800600a:	689b      	ldr	r3, [r3, #8]
 800600c:	f423 5100 	bic.w	r1, r3, #8192	; 0x2000
 8006010:	687b      	ldr	r3, [r7, #4]
 8006012:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8006014:	687b      	ldr	r3, [r7, #4]
 8006016:	681b      	ldr	r3, [r3, #0]
 8006018:	430a      	orrs	r2, r1
 800601a:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 800601c:	687b      	ldr	r3, [r7, #4]
 800601e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006020:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8006024:	2b00      	cmp	r3, #0
 8006026:	d01a      	beq.n	800605e <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 8006028:	687b      	ldr	r3, [r7, #4]
 800602a:	681b      	ldr	r3, [r3, #0]
 800602c:	685b      	ldr	r3, [r3, #4]
 800602e:	f423 1180 	bic.w	r1, r3, #1048576	; 0x100000
 8006032:	687b      	ldr	r3, [r7, #4]
 8006034:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8006036:	687b      	ldr	r3, [r7, #4]
 8006038:	681b      	ldr	r3, [r3, #0]
 800603a:	430a      	orrs	r2, r1
 800603c:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 800603e:	687b      	ldr	r3, [r7, #4]
 8006040:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8006042:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8006046:	d10a      	bne.n	800605e <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 8006048:	687b      	ldr	r3, [r7, #4]
 800604a:	681b      	ldr	r3, [r3, #0]
 800604c:	685b      	ldr	r3, [r3, #4]
 800604e:	f423 01c0 	bic.w	r1, r3, #6291456	; 0x600000
 8006052:	687b      	ldr	r3, [r7, #4]
 8006054:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 8006056:	687b      	ldr	r3, [r7, #4]
 8006058:	681b      	ldr	r3, [r3, #0]
 800605a:	430a      	orrs	r2, r1
 800605c:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 800605e:	687b      	ldr	r3, [r7, #4]
 8006060:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006062:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8006066:	2b00      	cmp	r3, #0
 8006068:	d00a      	beq.n	8006080 <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 800606a:	687b      	ldr	r3, [r7, #4]
 800606c:	681b      	ldr	r3, [r3, #0]
 800606e:	685b      	ldr	r3, [r3, #4]
 8006070:	f423 2100 	bic.w	r1, r3, #524288	; 0x80000
 8006074:	687b      	ldr	r3, [r7, #4]
 8006076:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8006078:	687b      	ldr	r3, [r7, #4]
 800607a:	681b      	ldr	r3, [r3, #0]
 800607c:	430a      	orrs	r2, r1
 800607e:	605a      	str	r2, [r3, #4]
  }
}
 8006080:	bf00      	nop
 8006082:	370c      	adds	r7, #12
 8006084:	46bd      	mov	sp, r7
 8006086:	f85d 7b04 	ldr.w	r7, [sp], #4
 800608a:	4770      	bx	lr

0800608c <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 800608c:	b580      	push	{r7, lr}
 800608e:	b098      	sub	sp, #96	; 0x60
 8006090:	af02      	add	r7, sp, #8
 8006092:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8006094:	687b      	ldr	r3, [r7, #4]
 8006096:	2200      	movs	r2, #0
 8006098:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 800609c:	f7fb fbbe 	bl	800181c <HAL_GetTick>
 80060a0:	6578      	str	r0, [r7, #84]	; 0x54

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 80060a2:	687b      	ldr	r3, [r7, #4]
 80060a4:	681b      	ldr	r3, [r3, #0]
 80060a6:	681b      	ldr	r3, [r3, #0]
 80060a8:	f003 0308 	and.w	r3, r3, #8
 80060ac:	2b08      	cmp	r3, #8
 80060ae:	d12f      	bne.n	8006110 <UART_CheckIdleState+0x84>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 80060b0:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 80060b4:	9300      	str	r3, [sp, #0]
 80060b6:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80060b8:	2200      	movs	r2, #0
 80060ba:	f44f 1100 	mov.w	r1, #2097152	; 0x200000
 80060be:	6878      	ldr	r0, [r7, #4]
 80060c0:	f000 f88e 	bl	80061e0 <UART_WaitOnFlagUntilTimeout>
 80060c4:	4603      	mov	r3, r0
 80060c6:	2b00      	cmp	r3, #0
 80060c8:	d022      	beq.n	8006110 <UART_CheckIdleState+0x84>
    {
      /* Disable TXE interrupt for the interrupt process */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE_TXFNFIE));
 80060ca:	687b      	ldr	r3, [r7, #4]
 80060cc:	681b      	ldr	r3, [r3, #0]
 80060ce:	63bb      	str	r3, [r7, #56]	; 0x38
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80060d0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80060d2:	e853 3f00 	ldrex	r3, [r3]
 80060d6:	637b      	str	r3, [r7, #52]	; 0x34
   return(result);
 80060d8:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80060da:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 80060de:	653b      	str	r3, [r7, #80]	; 0x50
 80060e0:	687b      	ldr	r3, [r7, #4]
 80060e2:	681b      	ldr	r3, [r3, #0]
 80060e4:	461a      	mov	r2, r3
 80060e6:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80060e8:	647b      	str	r3, [r7, #68]	; 0x44
 80060ea:	643a      	str	r2, [r7, #64]	; 0x40
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80060ec:	6c39      	ldr	r1, [r7, #64]	; 0x40
 80060ee:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 80060f0:	e841 2300 	strex	r3, r2, [r1]
 80060f4:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 80060f6:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80060f8:	2b00      	cmp	r3, #0
 80060fa:	d1e6      	bne.n	80060ca <UART_CheckIdleState+0x3e>

      huart->gState = HAL_UART_STATE_READY;
 80060fc:	687b      	ldr	r3, [r7, #4]
 80060fe:	2220      	movs	r2, #32
 8006100:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

      __HAL_UNLOCK(huart);
 8006104:	687b      	ldr	r3, [r7, #4]
 8006106:	2200      	movs	r2, #0
 8006108:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

      /* Timeout occurred */
      return HAL_TIMEOUT;
 800610c:	2303      	movs	r3, #3
 800610e:	e063      	b.n	80061d8 <UART_CheckIdleState+0x14c>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 8006110:	687b      	ldr	r3, [r7, #4]
 8006112:	681b      	ldr	r3, [r3, #0]
 8006114:	681b      	ldr	r3, [r3, #0]
 8006116:	f003 0304 	and.w	r3, r3, #4
 800611a:	2b04      	cmp	r3, #4
 800611c:	d149      	bne.n	80061b2 <UART_CheckIdleState+0x126>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 800611e:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 8006122:	9300      	str	r3, [sp, #0]
 8006124:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8006126:	2200      	movs	r2, #0
 8006128:	f44f 0180 	mov.w	r1, #4194304	; 0x400000
 800612c:	6878      	ldr	r0, [r7, #4]
 800612e:	f000 f857 	bl	80061e0 <UART_WaitOnFlagUntilTimeout>
 8006132:	4603      	mov	r3, r0
 8006134:	2b00      	cmp	r3, #0
 8006136:	d03c      	beq.n	80061b2 <UART_CheckIdleState+0x126>
    {
      /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error)
      interrupts for the interrupt process */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 8006138:	687b      	ldr	r3, [r7, #4]
 800613a:	681b      	ldr	r3, [r3, #0]
 800613c:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800613e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006140:	e853 3f00 	ldrex	r3, [r3]
 8006144:	623b      	str	r3, [r7, #32]
   return(result);
 8006146:	6a3b      	ldr	r3, [r7, #32]
 8006148:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 800614c:	64fb      	str	r3, [r7, #76]	; 0x4c
 800614e:	687b      	ldr	r3, [r7, #4]
 8006150:	681b      	ldr	r3, [r3, #0]
 8006152:	461a      	mov	r2, r3
 8006154:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8006156:	633b      	str	r3, [r7, #48]	; 0x30
 8006158:	62fa      	str	r2, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800615a:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 800615c:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800615e:	e841 2300 	strex	r3, r2, [r1]
 8006162:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 8006164:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006166:	2b00      	cmp	r3, #0
 8006168:	d1e6      	bne.n	8006138 <UART_CheckIdleState+0xac>
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800616a:	687b      	ldr	r3, [r7, #4]
 800616c:	681b      	ldr	r3, [r3, #0]
 800616e:	3308      	adds	r3, #8
 8006170:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006172:	693b      	ldr	r3, [r7, #16]
 8006174:	e853 3f00 	ldrex	r3, [r3]
 8006178:	60fb      	str	r3, [r7, #12]
   return(result);
 800617a:	68fb      	ldr	r3, [r7, #12]
 800617c:	f023 0301 	bic.w	r3, r3, #1
 8006180:	64bb      	str	r3, [r7, #72]	; 0x48
 8006182:	687b      	ldr	r3, [r7, #4]
 8006184:	681b      	ldr	r3, [r3, #0]
 8006186:	3308      	adds	r3, #8
 8006188:	6cba      	ldr	r2, [r7, #72]	; 0x48
 800618a:	61fa      	str	r2, [r7, #28]
 800618c:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800618e:	69b9      	ldr	r1, [r7, #24]
 8006190:	69fa      	ldr	r2, [r7, #28]
 8006192:	e841 2300 	strex	r3, r2, [r1]
 8006196:	617b      	str	r3, [r7, #20]
   return(result);
 8006198:	697b      	ldr	r3, [r7, #20]
 800619a:	2b00      	cmp	r3, #0
 800619c:	d1e5      	bne.n	800616a <UART_CheckIdleState+0xde>

      huart->RxState = HAL_UART_STATE_READY;
 800619e:	687b      	ldr	r3, [r7, #4]
 80061a0:	2220      	movs	r2, #32
 80061a2:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c

      __HAL_UNLOCK(huart);
 80061a6:	687b      	ldr	r3, [r7, #4]
 80061a8:	2200      	movs	r2, #0
 80061aa:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

      /* Timeout occurred */
      return HAL_TIMEOUT;
 80061ae:	2303      	movs	r3, #3
 80061b0:	e012      	b.n	80061d8 <UART_CheckIdleState+0x14c>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 80061b2:	687b      	ldr	r3, [r7, #4]
 80061b4:	2220      	movs	r2, #32
 80061b6:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
  huart->RxState = HAL_UART_STATE_READY;
 80061ba:	687b      	ldr	r3, [r7, #4]
 80061bc:	2220      	movs	r2, #32
 80061be:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80061c2:	687b      	ldr	r3, [r7, #4]
 80061c4:	2200      	movs	r2, #0
 80061c6:	66da      	str	r2, [r3, #108]	; 0x6c
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 80061c8:	687b      	ldr	r3, [r7, #4]
 80061ca:	2200      	movs	r2, #0
 80061cc:	671a      	str	r2, [r3, #112]	; 0x70

  __HAL_UNLOCK(huart);
 80061ce:	687b      	ldr	r3, [r7, #4]
 80061d0:	2200      	movs	r2, #0
 80061d2:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

  return HAL_OK;
 80061d6:	2300      	movs	r3, #0
}
 80061d8:	4618      	mov	r0, r3
 80061da:	3758      	adds	r7, #88	; 0x58
 80061dc:	46bd      	mov	sp, r7
 80061de:	bd80      	pop	{r7, pc}

080061e0 <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 80061e0:	b580      	push	{r7, lr}
 80061e2:	b084      	sub	sp, #16
 80061e4:	af00      	add	r7, sp, #0
 80061e6:	60f8      	str	r0, [r7, #12]
 80061e8:	60b9      	str	r1, [r7, #8]
 80061ea:	603b      	str	r3, [r7, #0]
 80061ec:	4613      	mov	r3, r2
 80061ee:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 80061f0:	e049      	b.n	8006286 <UART_WaitOnFlagUntilTimeout+0xa6>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80061f2:	69bb      	ldr	r3, [r7, #24]
 80061f4:	f1b3 3fff 	cmp.w	r3, #4294967295
 80061f8:	d045      	beq.n	8006286 <UART_WaitOnFlagUntilTimeout+0xa6>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80061fa:	f7fb fb0f 	bl	800181c <HAL_GetTick>
 80061fe:	4602      	mov	r2, r0
 8006200:	683b      	ldr	r3, [r7, #0]
 8006202:	1ad3      	subs	r3, r2, r3
 8006204:	69ba      	ldr	r2, [r7, #24]
 8006206:	429a      	cmp	r2, r3
 8006208:	d302      	bcc.n	8006210 <UART_WaitOnFlagUntilTimeout+0x30>
 800620a:	69bb      	ldr	r3, [r7, #24]
 800620c:	2b00      	cmp	r3, #0
 800620e:	d101      	bne.n	8006214 <UART_WaitOnFlagUntilTimeout+0x34>
      {

        return HAL_TIMEOUT;
 8006210:	2303      	movs	r3, #3
 8006212:	e048      	b.n	80062a6 <UART_WaitOnFlagUntilTimeout+0xc6>
      }

      if (READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U)
 8006214:	68fb      	ldr	r3, [r7, #12]
 8006216:	681b      	ldr	r3, [r3, #0]
 8006218:	681b      	ldr	r3, [r3, #0]
 800621a:	f003 0304 	and.w	r3, r3, #4
 800621e:	2b00      	cmp	r3, #0
 8006220:	d031      	beq.n	8006286 <UART_WaitOnFlagUntilTimeout+0xa6>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_ORE) == SET)
 8006222:	68fb      	ldr	r3, [r7, #12]
 8006224:	681b      	ldr	r3, [r3, #0]
 8006226:	69db      	ldr	r3, [r3, #28]
 8006228:	f003 0308 	and.w	r3, r3, #8
 800622c:	2b08      	cmp	r3, #8
 800622e:	d110      	bne.n	8006252 <UART_WaitOnFlagUntilTimeout+0x72>
        {
           /* Clear Overrun Error flag*/
           __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 8006230:	68fb      	ldr	r3, [r7, #12]
 8006232:	681b      	ldr	r3, [r3, #0]
 8006234:	2208      	movs	r2, #8
 8006236:	621a      	str	r2, [r3, #32]

           /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts if ongoing */
           UART_EndRxTransfer(huart);
 8006238:	68f8      	ldr	r0, [r7, #12]
 800623a:	f000 f839 	bl	80062b0 <UART_EndRxTransfer>

           huart->ErrorCode = HAL_UART_ERROR_ORE;
 800623e:	68fb      	ldr	r3, [r7, #12]
 8006240:	2208      	movs	r2, #8
 8006242:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90

           /* Process Unlocked */
           __HAL_UNLOCK(huart);
 8006246:	68fb      	ldr	r3, [r7, #12]
 8006248:	2200      	movs	r2, #0
 800624a:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

           return HAL_ERROR;
 800624e:	2301      	movs	r3, #1
 8006250:	e029      	b.n	80062a6 <UART_WaitOnFlagUntilTimeout+0xc6>
        }
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 8006252:	68fb      	ldr	r3, [r7, #12]
 8006254:	681b      	ldr	r3, [r3, #0]
 8006256:	69db      	ldr	r3, [r3, #28]
 8006258:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 800625c:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8006260:	d111      	bne.n	8006286 <UART_WaitOnFlagUntilTimeout+0xa6>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 8006262:	68fb      	ldr	r3, [r7, #12]
 8006264:	681b      	ldr	r3, [r3, #0]
 8006266:	f44f 6200 	mov.w	r2, #2048	; 0x800
 800626a:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 800626c:	68f8      	ldr	r0, [r7, #12]
 800626e:	f000 f81f 	bl	80062b0 <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_RTO;
 8006272:	68fb      	ldr	r3, [r7, #12]
 8006274:	2220      	movs	r2, #32
 8006276:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 800627a:	68fb      	ldr	r3, [r7, #12]
 800627c:	2200      	movs	r2, #0
 800627e:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

          return HAL_TIMEOUT;
 8006282:	2303      	movs	r3, #3
 8006284:	e00f      	b.n	80062a6 <UART_WaitOnFlagUntilTimeout+0xc6>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8006286:	68fb      	ldr	r3, [r7, #12]
 8006288:	681b      	ldr	r3, [r3, #0]
 800628a:	69da      	ldr	r2, [r3, #28]
 800628c:	68bb      	ldr	r3, [r7, #8]
 800628e:	4013      	ands	r3, r2
 8006290:	68ba      	ldr	r2, [r7, #8]
 8006292:	429a      	cmp	r2, r3
 8006294:	bf0c      	ite	eq
 8006296:	2301      	moveq	r3, #1
 8006298:	2300      	movne	r3, #0
 800629a:	b2db      	uxtb	r3, r3
 800629c:	461a      	mov	r2, r3
 800629e:	79fb      	ldrb	r3, [r7, #7]
 80062a0:	429a      	cmp	r2, r3
 80062a2:	d0a6      	beq.n	80061f2 <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 80062a4:	2300      	movs	r3, #0
}
 80062a6:	4618      	mov	r0, r3
 80062a8:	3710      	adds	r7, #16
 80062aa:	46bd      	mov	sp, r7
 80062ac:	bd80      	pop	{r7, pc}
	...

080062b0 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 80062b0:	b480      	push	{r7}
 80062b2:	b095      	sub	sp, #84	; 0x54
 80062b4:	af00      	add	r7, sp, #0
 80062b6:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 80062b8:	687b      	ldr	r3, [r7, #4]
 80062ba:	681b      	ldr	r3, [r3, #0]
 80062bc:	637b      	str	r3, [r7, #52]	; 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80062be:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80062c0:	e853 3f00 	ldrex	r3, [r3]
 80062c4:	633b      	str	r3, [r7, #48]	; 0x30
   return(result);
 80062c6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80062c8:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 80062cc:	64fb      	str	r3, [r7, #76]	; 0x4c
 80062ce:	687b      	ldr	r3, [r7, #4]
 80062d0:	681b      	ldr	r3, [r3, #0]
 80062d2:	461a      	mov	r2, r3
 80062d4:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80062d6:	643b      	str	r3, [r7, #64]	; 0x40
 80062d8:	63fa      	str	r2, [r7, #60]	; 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80062da:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 80062dc:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 80062de:	e841 2300 	strex	r3, r2, [r1]
 80062e2:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 80062e4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80062e6:	2b00      	cmp	r3, #0
 80062e8:	d1e6      	bne.n	80062b8 <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 80062ea:	687b      	ldr	r3, [r7, #4]
 80062ec:	681b      	ldr	r3, [r3, #0]
 80062ee:	3308      	adds	r3, #8
 80062f0:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80062f2:	6a3b      	ldr	r3, [r7, #32]
 80062f4:	e853 3f00 	ldrex	r3, [r3]
 80062f8:	61fb      	str	r3, [r7, #28]
   return(result);
 80062fa:	69fa      	ldr	r2, [r7, #28]
 80062fc:	4b1e      	ldr	r3, [pc, #120]	; (8006378 <UART_EndRxTransfer+0xc8>)
 80062fe:	4013      	ands	r3, r2
 8006300:	64bb      	str	r3, [r7, #72]	; 0x48
 8006302:	687b      	ldr	r3, [r7, #4]
 8006304:	681b      	ldr	r3, [r3, #0]
 8006306:	3308      	adds	r3, #8
 8006308:	6cba      	ldr	r2, [r7, #72]	; 0x48
 800630a:	62fa      	str	r2, [r7, #44]	; 0x2c
 800630c:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800630e:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8006310:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8006312:	e841 2300 	strex	r3, r2, [r1]
 8006316:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 8006318:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800631a:	2b00      	cmp	r3, #0
 800631c:	d1e5      	bne.n	80062ea <UART_EndRxTransfer+0x3a>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800631e:	687b      	ldr	r3, [r7, #4]
 8006320:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8006322:	2b01      	cmp	r3, #1
 8006324:	d118      	bne.n	8006358 <UART_EndRxTransfer+0xa8>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8006326:	687b      	ldr	r3, [r7, #4]
 8006328:	681b      	ldr	r3, [r3, #0]
 800632a:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800632c:	68fb      	ldr	r3, [r7, #12]
 800632e:	e853 3f00 	ldrex	r3, [r3]
 8006332:	60bb      	str	r3, [r7, #8]
   return(result);
 8006334:	68bb      	ldr	r3, [r7, #8]
 8006336:	f023 0310 	bic.w	r3, r3, #16
 800633a:	647b      	str	r3, [r7, #68]	; 0x44
 800633c:	687b      	ldr	r3, [r7, #4]
 800633e:	681b      	ldr	r3, [r3, #0]
 8006340:	461a      	mov	r2, r3
 8006342:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8006344:	61bb      	str	r3, [r7, #24]
 8006346:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006348:	6979      	ldr	r1, [r7, #20]
 800634a:	69ba      	ldr	r2, [r7, #24]
 800634c:	e841 2300 	strex	r3, r2, [r1]
 8006350:	613b      	str	r3, [r7, #16]
   return(result);
 8006352:	693b      	ldr	r3, [r7, #16]
 8006354:	2b00      	cmp	r3, #0
 8006356:	d1e6      	bne.n	8006326 <UART_EndRxTransfer+0x76>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 8006358:	687b      	ldr	r3, [r7, #4]
 800635a:	2220      	movs	r2, #32
 800635c:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8006360:	687b      	ldr	r3, [r7, #4]
 8006362:	2200      	movs	r2, #0
 8006364:	66da      	str	r2, [r3, #108]	; 0x6c

  /* Reset RxIsr function pointer */
  huart->RxISR = NULL;
 8006366:	687b      	ldr	r3, [r7, #4]
 8006368:	2200      	movs	r2, #0
 800636a:	675a      	str	r2, [r3, #116]	; 0x74
}
 800636c:	bf00      	nop
 800636e:	3754      	adds	r7, #84	; 0x54
 8006370:	46bd      	mov	sp, r7
 8006372:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006376:	4770      	bx	lr
 8006378:	effffffe 	.word	0xeffffffe

0800637c <HAL_UARTEx_DisableFifoMode>:
  * @brief  Disable the FIFO mode.
  * @param huart      UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_DisableFifoMode(UART_HandleTypeDef *huart)
{
 800637c:	b480      	push	{r7}
 800637e:	b085      	sub	sp, #20
 8006380:	af00      	add	r7, sp, #0
 8006382:	6078      	str	r0, [r7, #4]

  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));

  /* Process Locked */
  __HAL_LOCK(huart);
 8006384:	687b      	ldr	r3, [r7, #4]
 8006386:	f893 3084 	ldrb.w	r3, [r3, #132]	; 0x84
 800638a:	2b01      	cmp	r3, #1
 800638c:	d101      	bne.n	8006392 <HAL_UARTEx_DisableFifoMode+0x16>
 800638e:	2302      	movs	r3, #2
 8006390:	e027      	b.n	80063e2 <HAL_UARTEx_DisableFifoMode+0x66>
 8006392:	687b      	ldr	r3, [r7, #4]
 8006394:	2201      	movs	r2, #1
 8006396:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

  huart->gState = HAL_UART_STATE_BUSY;
 800639a:	687b      	ldr	r3, [r7, #4]
 800639c:	2224      	movs	r2, #36	; 0x24
 800639e:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 80063a2:	687b      	ldr	r3, [r7, #4]
 80063a4:	681b      	ldr	r3, [r3, #0]
 80063a6:	681b      	ldr	r3, [r3, #0]
 80063a8:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 80063aa:	687b      	ldr	r3, [r7, #4]
 80063ac:	681b      	ldr	r3, [r3, #0]
 80063ae:	681a      	ldr	r2, [r3, #0]
 80063b0:	687b      	ldr	r3, [r7, #4]
 80063b2:	681b      	ldr	r3, [r3, #0]
 80063b4:	f022 0201 	bic.w	r2, r2, #1
 80063b8:	601a      	str	r2, [r3, #0]

  /* Enable FIFO mode */
  CLEAR_BIT(tmpcr1, USART_CR1_FIFOEN);
 80063ba:	68fb      	ldr	r3, [r7, #12]
 80063bc:	f023 5300 	bic.w	r3, r3, #536870912	; 0x20000000
 80063c0:	60fb      	str	r3, [r7, #12]
  huart->FifoMode = UART_FIFOMODE_DISABLE;
 80063c2:	687b      	ldr	r3, [r7, #4]
 80063c4:	2200      	movs	r2, #0
 80063c6:	665a      	str	r2, [r3, #100]	; 0x64

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 80063c8:	687b      	ldr	r3, [r7, #4]
 80063ca:	681b      	ldr	r3, [r3, #0]
 80063cc:	68fa      	ldr	r2, [r7, #12]
 80063ce:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 80063d0:	687b      	ldr	r3, [r7, #4]
 80063d2:	2220      	movs	r2, #32
 80063d4:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 80063d8:	687b      	ldr	r3, [r7, #4]
 80063da:	2200      	movs	r2, #0
 80063dc:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

  return HAL_OK;
 80063e0:	2300      	movs	r3, #0
}
 80063e2:	4618      	mov	r0, r3
 80063e4:	3714      	adds	r7, #20
 80063e6:	46bd      	mov	sp, r7
 80063e8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80063ec:	4770      	bx	lr

080063ee <HAL_UARTEx_SetTxFifoThreshold>:
  *            @arg @ref UART_TXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_TXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetTxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 80063ee:	b580      	push	{r7, lr}
 80063f0:	b084      	sub	sp, #16
 80063f2:	af00      	add	r7, sp, #0
 80063f4:	6078      	str	r0, [r7, #4]
 80063f6:	6039      	str	r1, [r7, #0]
  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_TXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 80063f8:	687b      	ldr	r3, [r7, #4]
 80063fa:	f893 3084 	ldrb.w	r3, [r3, #132]	; 0x84
 80063fe:	2b01      	cmp	r3, #1
 8006400:	d101      	bne.n	8006406 <HAL_UARTEx_SetTxFifoThreshold+0x18>
 8006402:	2302      	movs	r3, #2
 8006404:	e02d      	b.n	8006462 <HAL_UARTEx_SetTxFifoThreshold+0x74>
 8006406:	687b      	ldr	r3, [r7, #4]
 8006408:	2201      	movs	r2, #1
 800640a:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

  huart->gState = HAL_UART_STATE_BUSY;
 800640e:	687b      	ldr	r3, [r7, #4]
 8006410:	2224      	movs	r2, #36	; 0x24
 8006412:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 8006416:	687b      	ldr	r3, [r7, #4]
 8006418:	681b      	ldr	r3, [r3, #0]
 800641a:	681b      	ldr	r3, [r3, #0]
 800641c:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 800641e:	687b      	ldr	r3, [r7, #4]
 8006420:	681b      	ldr	r3, [r3, #0]
 8006422:	681a      	ldr	r2, [r3, #0]
 8006424:	687b      	ldr	r3, [r7, #4]
 8006426:	681b      	ldr	r3, [r3, #0]
 8006428:	f022 0201 	bic.w	r2, r2, #1
 800642c:	601a      	str	r2, [r3, #0]

  /* Update TX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_TXFTCFG, Threshold);
 800642e:	687b      	ldr	r3, [r7, #4]
 8006430:	681b      	ldr	r3, [r3, #0]
 8006432:	689b      	ldr	r3, [r3, #8]
 8006434:	f023 4160 	bic.w	r1, r3, #3758096384	; 0xe0000000
 8006438:	687b      	ldr	r3, [r7, #4]
 800643a:	681b      	ldr	r3, [r3, #0]
 800643c:	683a      	ldr	r2, [r7, #0]
 800643e:	430a      	orrs	r2, r1
 8006440:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 8006442:	6878      	ldr	r0, [r7, #4]
 8006444:	f000 f850 	bl	80064e8 <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 8006448:	687b      	ldr	r3, [r7, #4]
 800644a:	681b      	ldr	r3, [r3, #0]
 800644c:	68fa      	ldr	r2, [r7, #12]
 800644e:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 8006450:	687b      	ldr	r3, [r7, #4]
 8006452:	2220      	movs	r2, #32
 8006454:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 8006458:	687b      	ldr	r3, [r7, #4]
 800645a:	2200      	movs	r2, #0
 800645c:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

  return HAL_OK;
 8006460:	2300      	movs	r3, #0
}
 8006462:	4618      	mov	r0, r3
 8006464:	3710      	adds	r7, #16
 8006466:	46bd      	mov	sp, r7
 8006468:	bd80      	pop	{r7, pc}

0800646a <HAL_UARTEx_SetRxFifoThreshold>:
  *            @arg @ref UART_RXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_RXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetRxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 800646a:	b580      	push	{r7, lr}
 800646c:	b084      	sub	sp, #16
 800646e:	af00      	add	r7, sp, #0
 8006470:	6078      	str	r0, [r7, #4]
 8006472:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_RXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 8006474:	687b      	ldr	r3, [r7, #4]
 8006476:	f893 3084 	ldrb.w	r3, [r3, #132]	; 0x84
 800647a:	2b01      	cmp	r3, #1
 800647c:	d101      	bne.n	8006482 <HAL_UARTEx_SetRxFifoThreshold+0x18>
 800647e:	2302      	movs	r3, #2
 8006480:	e02d      	b.n	80064de <HAL_UARTEx_SetRxFifoThreshold+0x74>
 8006482:	687b      	ldr	r3, [r7, #4]
 8006484:	2201      	movs	r2, #1
 8006486:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

  huart->gState = HAL_UART_STATE_BUSY;
 800648a:	687b      	ldr	r3, [r7, #4]
 800648c:	2224      	movs	r2, #36	; 0x24
 800648e:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 8006492:	687b      	ldr	r3, [r7, #4]
 8006494:	681b      	ldr	r3, [r3, #0]
 8006496:	681b      	ldr	r3, [r3, #0]
 8006498:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 800649a:	687b      	ldr	r3, [r7, #4]
 800649c:	681b      	ldr	r3, [r3, #0]
 800649e:	681a      	ldr	r2, [r3, #0]
 80064a0:	687b      	ldr	r3, [r7, #4]
 80064a2:	681b      	ldr	r3, [r3, #0]
 80064a4:	f022 0201 	bic.w	r2, r2, #1
 80064a8:	601a      	str	r2, [r3, #0]

  /* Update RX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_RXFTCFG, Threshold);
 80064aa:	687b      	ldr	r3, [r7, #4]
 80064ac:	681b      	ldr	r3, [r3, #0]
 80064ae:	689b      	ldr	r3, [r3, #8]
 80064b0:	f023 6160 	bic.w	r1, r3, #234881024	; 0xe000000
 80064b4:	687b      	ldr	r3, [r7, #4]
 80064b6:	681b      	ldr	r3, [r3, #0]
 80064b8:	683a      	ldr	r2, [r7, #0]
 80064ba:	430a      	orrs	r2, r1
 80064bc:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 80064be:	6878      	ldr	r0, [r7, #4]
 80064c0:	f000 f812 	bl	80064e8 <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 80064c4:	687b      	ldr	r3, [r7, #4]
 80064c6:	681b      	ldr	r3, [r3, #0]
 80064c8:	68fa      	ldr	r2, [r7, #12]
 80064ca:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 80064cc:	687b      	ldr	r3, [r7, #4]
 80064ce:	2220      	movs	r2, #32
 80064d0:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 80064d4:	687b      	ldr	r3, [r7, #4]
 80064d6:	2200      	movs	r2, #0
 80064d8:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

  return HAL_OK;
 80064dc:	2300      	movs	r3, #0
}
 80064de:	4618      	mov	r0, r3
 80064e0:	3710      	adds	r7, #16
 80064e2:	46bd      	mov	sp, r7
 80064e4:	bd80      	pop	{r7, pc}
	...

080064e8 <UARTEx_SetNbDataToProcess>:
  *       the UART configuration registers.
  * @param huart UART handle.
  * @retval None
  */
static void UARTEx_SetNbDataToProcess(UART_HandleTypeDef *huart)
{
 80064e8:	b480      	push	{r7}
 80064ea:	b085      	sub	sp, #20
 80064ec:	af00      	add	r7, sp, #0
 80064ee:	6078      	str	r0, [r7, #4]
  uint8_t rx_fifo_threshold;
  uint8_t tx_fifo_threshold;
  static const uint8_t numerator[] = {1U, 1U, 1U, 3U, 7U, 1U, 0U, 0U};
  static const uint8_t denominator[] = {8U, 4U, 2U, 4U, 8U, 1U, 1U, 1U};

  if (huart->FifoMode == UART_FIFOMODE_DISABLE)
 80064f0:	687b      	ldr	r3, [r7, #4]
 80064f2:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 80064f4:	2b00      	cmp	r3, #0
 80064f6:	d108      	bne.n	800650a <UARTEx_SetNbDataToProcess+0x22>
  {
    huart->NbTxDataToProcess = 1U;
 80064f8:	687b      	ldr	r3, [r7, #4]
 80064fa:	2201      	movs	r2, #1
 80064fc:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
    huart->NbRxDataToProcess = 1U;
 8006500:	687b      	ldr	r3, [r7, #4]
 8006502:	2201      	movs	r2, #1
 8006504:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
                               (uint16_t)denominator[tx_fifo_threshold];
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
                               (uint16_t)denominator[rx_fifo_threshold];
  }
}
 8006508:	e031      	b.n	800656e <UARTEx_SetNbDataToProcess+0x86>
    rx_fifo_depth = RX_FIFO_DEPTH;
 800650a:	2310      	movs	r3, #16
 800650c:	73fb      	strb	r3, [r7, #15]
    tx_fifo_depth = TX_FIFO_DEPTH;
 800650e:	2310      	movs	r3, #16
 8006510:	73bb      	strb	r3, [r7, #14]
    rx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_RXFTCFG) >> USART_CR3_RXFTCFG_Pos);
 8006512:	687b      	ldr	r3, [r7, #4]
 8006514:	681b      	ldr	r3, [r3, #0]
 8006516:	689b      	ldr	r3, [r3, #8]
 8006518:	0e5b      	lsrs	r3, r3, #25
 800651a:	b2db      	uxtb	r3, r3
 800651c:	f003 0307 	and.w	r3, r3, #7
 8006520:	737b      	strb	r3, [r7, #13]
    tx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_TXFTCFG) >> USART_CR3_TXFTCFG_Pos);
 8006522:	687b      	ldr	r3, [r7, #4]
 8006524:	681b      	ldr	r3, [r3, #0]
 8006526:	689b      	ldr	r3, [r3, #8]
 8006528:	0f5b      	lsrs	r3, r3, #29
 800652a:	b2db      	uxtb	r3, r3
 800652c:	f003 0307 	and.w	r3, r3, #7
 8006530:	733b      	strb	r3, [r7, #12]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 8006532:	7bbb      	ldrb	r3, [r7, #14]
 8006534:	7b3a      	ldrb	r2, [r7, #12]
 8006536:	4911      	ldr	r1, [pc, #68]	; (800657c <UARTEx_SetNbDataToProcess+0x94>)
 8006538:	5c8a      	ldrb	r2, [r1, r2]
 800653a:	fb02 f303 	mul.w	r3, r2, r3
                               (uint16_t)denominator[tx_fifo_threshold];
 800653e:	7b3a      	ldrb	r2, [r7, #12]
 8006540:	490f      	ldr	r1, [pc, #60]	; (8006580 <UARTEx_SetNbDataToProcess+0x98>)
 8006542:	5c8a      	ldrb	r2, [r1, r2]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 8006544:	fb93 f3f2 	sdiv	r3, r3, r2
 8006548:	b29a      	uxth	r2, r3
 800654a:	687b      	ldr	r3, [r7, #4]
 800654c:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 8006550:	7bfb      	ldrb	r3, [r7, #15]
 8006552:	7b7a      	ldrb	r2, [r7, #13]
 8006554:	4909      	ldr	r1, [pc, #36]	; (800657c <UARTEx_SetNbDataToProcess+0x94>)
 8006556:	5c8a      	ldrb	r2, [r1, r2]
 8006558:	fb02 f303 	mul.w	r3, r2, r3
                               (uint16_t)denominator[rx_fifo_threshold];
 800655c:	7b7a      	ldrb	r2, [r7, #13]
 800655e:	4908      	ldr	r1, [pc, #32]	; (8006580 <UARTEx_SetNbDataToProcess+0x98>)
 8006560:	5c8a      	ldrb	r2, [r1, r2]
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 8006562:	fb93 f3f2 	sdiv	r3, r3, r2
 8006566:	b29a      	uxth	r2, r3
 8006568:	687b      	ldr	r3, [r7, #4]
 800656a:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68
}
 800656e:	bf00      	nop
 8006570:	3714      	adds	r7, #20
 8006572:	46bd      	mov	sp, r7
 8006574:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006578:	4770      	bx	lr
 800657a:	bf00      	nop
 800657c:	08008b64 	.word	0x08008b64
 8006580:	08008b6c 	.word	0x08008b6c

08006584 <_tx_byte_pool_create>:
/*  09-30-2020     Yuxin Zhou               Modified comment(s),          */
/*                                            resulting in version 6.1    */
/*                                                                        */
/**************************************************************************/
UINT  _tx_byte_pool_create(TX_BYTE_POOL *pool_ptr, CHAR *name_ptr, VOID *pool_start, ULONG pool_size)
{
 8006584:	b580      	push	{r7, lr}
 8006586:	b08e      	sub	sp, #56	; 0x38
 8006588:	af00      	add	r7, sp, #0
 800658a:	60f8      	str	r0, [r7, #12]
 800658c:	60b9      	str	r1, [r7, #8]
 800658e:	607a      	str	r2, [r7, #4]
 8006590:	603b      	str	r3, [r7, #0]
TX_BYTE_POOL        *previous_pool;
ALIGN_TYPE          *free_ptr;


    /* Initialize the byte pool control block to all zeros.  */
    TX_MEMSET(pool_ptr, 0, (sizeof(TX_BYTE_POOL)));
 8006592:	2234      	movs	r2, #52	; 0x34
 8006594:	2100      	movs	r1, #0
 8006596:	68f8      	ldr	r0, [r7, #12]
 8006598:	f001 fa8c 	bl	8007ab4 <memset>

    /* Round the pool size down to something that is evenly divisible by
       an ULONG.  */
    pool_size =   (pool_size/(sizeof(ALIGN_TYPE))) * (sizeof(ALIGN_TYPE));
 800659c:	683b      	ldr	r3, [r7, #0]
 800659e:	f023 0303 	bic.w	r3, r3, #3
 80065a2:	603b      	str	r3, [r7, #0]

    /* Setup the basic byte pool fields.  */
    pool_ptr -> tx_byte_pool_name =              name_ptr;
 80065a4:	68fb      	ldr	r3, [r7, #12]
 80065a6:	68ba      	ldr	r2, [r7, #8]
 80065a8:	605a      	str	r2, [r3, #4]

    /* Save the start and size of the pool.  */
    pool_ptr -> tx_byte_pool_start =   TX_VOID_TO_UCHAR_POINTER_CONVERT(pool_start);
 80065aa:	68fb      	ldr	r3, [r7, #12]
 80065ac:	687a      	ldr	r2, [r7, #4]
 80065ae:	619a      	str	r2, [r3, #24]
    pool_ptr -> tx_byte_pool_size =    pool_size;
 80065b0:	68fb      	ldr	r3, [r7, #12]
 80065b2:	683a      	ldr	r2, [r7, #0]
 80065b4:	61da      	str	r2, [r3, #28]

    /* Setup memory list to the beginning as well as the search pointer.  */
    pool_ptr -> tx_byte_pool_list =    TX_VOID_TO_UCHAR_POINTER_CONVERT(pool_start);
 80065b6:	68fb      	ldr	r3, [r7, #12]
 80065b8:	687a      	ldr	r2, [r7, #4]
 80065ba:	611a      	str	r2, [r3, #16]
    pool_ptr -> tx_byte_pool_search =  TX_VOID_TO_UCHAR_POINTER_CONVERT(pool_start);
 80065bc:	68fb      	ldr	r3, [r7, #12]
 80065be:	687a      	ldr	r2, [r7, #4]
 80065c0:	615a      	str	r2, [r3, #20]

    /* Initially, the pool will have two blocks.  One large block at the
       beginning that is available and a small allocated block at the end
       of the pool that is there just for the algorithm.  Be sure to count
       the available block's header in the available bytes count.  */
    pool_ptr -> tx_byte_pool_available =   pool_size - ((sizeof(VOID *)) + (sizeof(ALIGN_TYPE)));
 80065c2:	683b      	ldr	r3, [r7, #0]
 80065c4:	f1a3 0208 	sub.w	r2, r3, #8
 80065c8:	68fb      	ldr	r3, [r7, #12]
 80065ca:	609a      	str	r2, [r3, #8]
    pool_ptr -> tx_byte_pool_fragments =   ((UINT) 2);
 80065cc:	68fb      	ldr	r3, [r7, #12]
 80065ce:	2202      	movs	r2, #2
 80065d0:	60da      	str	r2, [r3, #12]
    /* Each block contains a "next" pointer that points to the next block in the pool followed by a ALIGN_TYPE
       field that contains either the constant TX_BYTE_BLOCK_FREE (if the block is free) or a pointer to the
       owning pool (if the block is allocated).  */

    /* Calculate the end of the pool's memory area.  */
    block_ptr =  TX_VOID_TO_UCHAR_POINTER_CONVERT(pool_start);
 80065d2:	687b      	ldr	r3, [r7, #4]
 80065d4:	637b      	str	r3, [r7, #52]	; 0x34
    block_ptr =  TX_UCHAR_POINTER_ADD(block_ptr, pool_size);
 80065d6:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 80065d8:	683b      	ldr	r3, [r7, #0]
 80065da:	4413      	add	r3, r2
 80065dc:	637b      	str	r3, [r7, #52]	; 0x34

    /* Backup the end of the pool pointer and build the pre-allocated block.  */
    block_ptr =  TX_UCHAR_POINTER_SUB(block_ptr, (sizeof(ALIGN_TYPE)));
 80065de:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80065e0:	3b04      	subs	r3, #4
 80065e2:	637b      	str	r3, [r7, #52]	; 0x34

    /* Cast the pool pointer into a ULONG.  */
    temp_ptr =             TX_BYTE_POOL_TO_UCHAR_POINTER_CONVERT(pool_ptr);
 80065e4:	68fb      	ldr	r3, [r7, #12]
 80065e6:	633b      	str	r3, [r7, #48]	; 0x30
    block_indirect_ptr =   TX_UCHAR_TO_INDIRECT_UCHAR_POINTER_CONVERT(block_ptr);
 80065e8:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80065ea:	62fb      	str	r3, [r7, #44]	; 0x2c
    *block_indirect_ptr =  temp_ptr;
 80065ec:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80065ee:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80065f0:	601a      	str	r2, [r3, #0]

    block_ptr =            TX_UCHAR_POINTER_SUB(block_ptr, (sizeof(UCHAR *)));
 80065f2:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80065f4:	3b04      	subs	r3, #4
 80065f6:	637b      	str	r3, [r7, #52]	; 0x34
    block_indirect_ptr =   TX_UCHAR_TO_INDIRECT_UCHAR_POINTER_CONVERT(block_ptr);
 80065f8:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80065fa:	62fb      	str	r3, [r7, #44]	; 0x2c
    *block_indirect_ptr =  TX_VOID_TO_UCHAR_POINTER_CONVERT(pool_start);
 80065fc:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80065fe:	687a      	ldr	r2, [r7, #4]
 8006600:	601a      	str	r2, [r3, #0]

    /* Now setup the large available block in the pool.  */
    temp_ptr =             TX_VOID_TO_UCHAR_POINTER_CONVERT(pool_start);
 8006602:	687b      	ldr	r3, [r7, #4]
 8006604:	633b      	str	r3, [r7, #48]	; 0x30
    block_indirect_ptr =   TX_UCHAR_TO_INDIRECT_UCHAR_POINTER_CONVERT(temp_ptr);
 8006606:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006608:	62fb      	str	r3, [r7, #44]	; 0x2c
    *block_indirect_ptr =  block_ptr;
 800660a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800660c:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 800660e:	601a      	str	r2, [r3, #0]
    block_ptr =            TX_VOID_TO_UCHAR_POINTER_CONVERT(pool_start);
 8006610:	687b      	ldr	r3, [r7, #4]
 8006612:	637b      	str	r3, [r7, #52]	; 0x34
    block_ptr =            TX_UCHAR_POINTER_ADD(block_ptr, (sizeof(UCHAR *)));
 8006614:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8006616:	3304      	adds	r3, #4
 8006618:	637b      	str	r3, [r7, #52]	; 0x34
    free_ptr =             TX_UCHAR_TO_ALIGN_TYPE_POINTER_CONVERT(block_ptr);
 800661a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800661c:	62bb      	str	r3, [r7, #40]	; 0x28
    *free_ptr =            TX_BYTE_BLOCK_FREE;
 800661e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006620:	4a1f      	ldr	r2, [pc, #124]	; (80066a0 <_tx_byte_pool_create+0x11c>)
 8006622:	601a      	str	r2, [r3, #0]

    /* Clear the owner id.  */
    pool_ptr -> tx_byte_pool_owner =  TX_NULL;
 8006624:	68fb      	ldr	r3, [r7, #12]
 8006626:	2200      	movs	r2, #0
 8006628:	621a      	str	r2, [r3, #32]
{
unsigned int posture;
#ifdef TX_PORT_USE_BASEPRI
    __asm__ volatile ("MRS  %0, BASEPRI ": "=r" (posture));
#else
    __asm__ volatile ("MRS  %0, PRIMASK ": "=r" (posture));
 800662a:	f3ef 8310 	mrs	r3, PRIMASK
 800662e:	61bb      	str	r3, [r7, #24]
#endif
    return(posture);
 8006630:	69bb      	ldr	r3, [r7, #24]

__attribute__( ( always_inline ) ) static inline unsigned int __disable_interrupts(void)
{
unsigned int int_posture;

    int_posture = __get_interrupt_posture();
 8006632:	617b      	str	r3, [r7, #20]

#ifdef TX_PORT_USE_BASEPRI
    __set_basepri_value(TX_PORT_BASEPRI);
#else
    __asm__ volatile ("CPSID i" : : : "memory");
 8006634:	b672      	cpsid	i
#endif
    return(int_posture);
 8006636:	697b      	ldr	r3, [r7, #20]

    /* Disable interrupts to place the byte pool on the created list.  */
    TX_DISABLE
 8006638:	627b      	str	r3, [r7, #36]	; 0x24

    /* Setup the byte pool ID to make it valid.  */
    pool_ptr -> tx_byte_pool_id =  TX_BYTE_POOL_ID;
 800663a:	68fb      	ldr	r3, [r7, #12]
 800663c:	4a19      	ldr	r2, [pc, #100]	; (80066a4 <_tx_byte_pool_create+0x120>)
 800663e:	601a      	str	r2, [r3, #0]

    /* Place the byte pool on the list of created byte pools.  First,
       check for an empty list.  */
    if (_tx_byte_pool_created_count == TX_EMPTY)
 8006640:	4b19      	ldr	r3, [pc, #100]	; (80066a8 <_tx_byte_pool_create+0x124>)
 8006642:	681b      	ldr	r3, [r3, #0]
 8006644:	2b00      	cmp	r3, #0
 8006646:	d109      	bne.n	800665c <_tx_byte_pool_create+0xd8>
    {

        /* The created byte pool list is empty.  Add byte pool to empty list.  */
        _tx_byte_pool_created_ptr =                  pool_ptr;
 8006648:	4a18      	ldr	r2, [pc, #96]	; (80066ac <_tx_byte_pool_create+0x128>)
 800664a:	68fb      	ldr	r3, [r7, #12]
 800664c:	6013      	str	r3, [r2, #0]
        pool_ptr -> tx_byte_pool_created_next =      pool_ptr;
 800664e:	68fb      	ldr	r3, [r7, #12]
 8006650:	68fa      	ldr	r2, [r7, #12]
 8006652:	62da      	str	r2, [r3, #44]	; 0x2c
        pool_ptr -> tx_byte_pool_created_previous =  pool_ptr;
 8006654:	68fb      	ldr	r3, [r7, #12]
 8006656:	68fa      	ldr	r2, [r7, #12]
 8006658:	631a      	str	r2, [r3, #48]	; 0x30
 800665a:	e011      	b.n	8006680 <_tx_byte_pool_create+0xfc>
    }
    else
    {

        /* This list is not NULL, add to the end of the list.  */
        next_pool =      _tx_byte_pool_created_ptr;
 800665c:	4b13      	ldr	r3, [pc, #76]	; (80066ac <_tx_byte_pool_create+0x128>)
 800665e:	681b      	ldr	r3, [r3, #0]
 8006660:	623b      	str	r3, [r7, #32]
        previous_pool =  next_pool -> tx_byte_pool_created_previous;
 8006662:	6a3b      	ldr	r3, [r7, #32]
 8006664:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006666:	61fb      	str	r3, [r7, #28]

        /* Place the new byte pool in the list.  */
        next_pool -> tx_byte_pool_created_previous =  pool_ptr;
 8006668:	6a3b      	ldr	r3, [r7, #32]
 800666a:	68fa      	ldr	r2, [r7, #12]
 800666c:	631a      	str	r2, [r3, #48]	; 0x30
        previous_pool -> tx_byte_pool_created_next =  pool_ptr;
 800666e:	69fb      	ldr	r3, [r7, #28]
 8006670:	68fa      	ldr	r2, [r7, #12]
 8006672:	62da      	str	r2, [r3, #44]	; 0x2c

        /* Setup this byte pool's created links.  */
        pool_ptr -> tx_byte_pool_created_previous =  previous_pool;
 8006674:	68fb      	ldr	r3, [r7, #12]
 8006676:	69fa      	ldr	r2, [r7, #28]
 8006678:	631a      	str	r2, [r3, #48]	; 0x30
        pool_ptr -> tx_byte_pool_created_next =      next_pool;
 800667a:	68fb      	ldr	r3, [r7, #12]
 800667c:	6a3a      	ldr	r2, [r7, #32]
 800667e:	62da      	str	r2, [r3, #44]	; 0x2c
    }

    /* Increment the number of created byte pools.  */
    _tx_byte_pool_created_count++;
 8006680:	4b09      	ldr	r3, [pc, #36]	; (80066a8 <_tx_byte_pool_create+0x124>)
 8006682:	681b      	ldr	r3, [r3, #0]
 8006684:	3301      	adds	r3, #1
 8006686:	4a08      	ldr	r2, [pc, #32]	; (80066a8 <_tx_byte_pool_create+0x124>)
 8006688:	6013      	str	r3, [r2, #0]
 800668a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800668c:	613b      	str	r3, [r7, #16]
    __asm__ volatile ("MSR  PRIMASK,%0": : "r" (int_posture): "memory");
 800668e:	693b      	ldr	r3, [r7, #16]
 8006690:	f383 8810 	msr	PRIMASK, r3
}
 8006694:	bf00      	nop

    /* Restore interrupts.  */
    TX_RESTORE

    /* Return TX_SUCCESS.  */
    return(TX_SUCCESS);
 8006696:	2300      	movs	r3, #0
}
 8006698:	4618      	mov	r0, r3
 800669a:	3738      	adds	r7, #56	; 0x38
 800669c:	46bd      	mov	sp, r7
 800669e:	bd80      	pop	{r7, pc}
 80066a0:	ffffeeee 	.word	0xffffeeee
 80066a4:	42595445 	.word	0x42595445
 80066a8:	240060cc 	.word	0x240060cc
 80066ac:	240060c8 	.word	0x240060c8

080066b0 <_tx_initialize_high_level>:
/*  09-30-2020     Yuxin Zhou               Modified comment(s),          */
/*                                            resulting in version 6.1    */
/*                                                                        */
/**************************************************************************/
VOID    _tx_initialize_high_level(VOID)
{
 80066b0:	b580      	push	{r7, lr}
 80066b2:	af00      	add	r7, sp, #0

    /* Initialize the event log, if enabled.  */
    TX_EL_INITIALIZE

    /* Call the thread control initialization function.  */
    _tx_thread_initialize();
 80066b4:	f000 f960 	bl	8006978 <_tx_thread_initialize>

#ifndef TX_NO_TIMER

    /* Call the timer control initialization function.  */
    _tx_timer_initialize();
 80066b8:	f000 fe38 	bl	800732c <_tx_timer_initialize>
#endif

#ifndef TX_DISABLE_REDUNDANT_CLEARING

    /* Call the semaphore initialization function.  */
    _tx_semaphore_initialize();
 80066bc:	4b12      	ldr	r3, [pc, #72]	; (8006708 <_tx_initialize_high_level+0x58>)
 80066be:	2200      	movs	r2, #0
 80066c0:	601a      	str	r2, [r3, #0]
 80066c2:	4b12      	ldr	r3, [pc, #72]	; (800670c <_tx_initialize_high_level+0x5c>)
 80066c4:	2200      	movs	r2, #0
 80066c6:	601a      	str	r2, [r3, #0]

    /* Call the queue initialization function.  */
    _tx_queue_initialize();
 80066c8:	4b11      	ldr	r3, [pc, #68]	; (8006710 <_tx_initialize_high_level+0x60>)
 80066ca:	2200      	movs	r2, #0
 80066cc:	601a      	str	r2, [r3, #0]
 80066ce:	4b11      	ldr	r3, [pc, #68]	; (8006714 <_tx_initialize_high_level+0x64>)
 80066d0:	2200      	movs	r2, #0
 80066d2:	601a      	str	r2, [r3, #0]

    /* Call the event flag initialization function.  */
    _tx_event_flags_initialize();
 80066d4:	4b10      	ldr	r3, [pc, #64]	; (8006718 <_tx_initialize_high_level+0x68>)
 80066d6:	2200      	movs	r2, #0
 80066d8:	601a      	str	r2, [r3, #0]
 80066da:	4b10      	ldr	r3, [pc, #64]	; (800671c <_tx_initialize_high_level+0x6c>)
 80066dc:	2200      	movs	r2, #0
 80066de:	601a      	str	r2, [r3, #0]

    /* Call the block pool initialization function.  */
    _tx_block_pool_initialize();
 80066e0:	4b0f      	ldr	r3, [pc, #60]	; (8006720 <_tx_initialize_high_level+0x70>)
 80066e2:	2200      	movs	r2, #0
 80066e4:	601a      	str	r2, [r3, #0]
 80066e6:	4b0f      	ldr	r3, [pc, #60]	; (8006724 <_tx_initialize_high_level+0x74>)
 80066e8:	2200      	movs	r2, #0
 80066ea:	601a      	str	r2, [r3, #0]

    /* Call the byte pool initialization function.  */
    _tx_byte_pool_initialize();
 80066ec:	4b0e      	ldr	r3, [pc, #56]	; (8006728 <_tx_initialize_high_level+0x78>)
 80066ee:	2200      	movs	r2, #0
 80066f0:	601a      	str	r2, [r3, #0]
 80066f2:	4b0e      	ldr	r3, [pc, #56]	; (800672c <_tx_initialize_high_level+0x7c>)
 80066f4:	2200      	movs	r2, #0
 80066f6:	601a      	str	r2, [r3, #0]

    /* Call the mutex initialization function.  */
    _tx_mutex_initialize();
 80066f8:	4b0d      	ldr	r3, [pc, #52]	; (8006730 <_tx_initialize_high_level+0x80>)
 80066fa:	2200      	movs	r2, #0
 80066fc:	601a      	str	r2, [r3, #0]
 80066fe:	4b0d      	ldr	r3, [pc, #52]	; (8006734 <_tx_initialize_high_level+0x84>)
 8006700:	2200      	movs	r2, #0
 8006702:	601a      	str	r2, [r3, #0]
#endif
}
 8006704:	bf00      	nop
 8006706:	bd80      	pop	{r7, pc}
 8006708:	240060a0 	.word	0x240060a0
 800670c:	240060a4 	.word	0x240060a4
 8006710:	240060a8 	.word	0x240060a8
 8006714:	240060ac 	.word	0x240060ac
 8006718:	240060b0 	.word	0x240060b0
 800671c:	240060b4 	.word	0x240060b4
 8006720:	240060c0 	.word	0x240060c0
 8006724:	240060c4 	.word	0x240060c4
 8006728:	240060c8 	.word	0x240060c8
 800672c:	240060cc 	.word	0x240060cc
 8006730:	240060b8 	.word	0x240060b8
 8006734:	240060bc 	.word	0x240060bc

08006738 <_tx_initialize_kernel_enter>:
/*                                            added EPK initialization,   */
/*                                            resulting in version 6.1.11 */
/*                                                                        */
/**************************************************************************/
VOID  _tx_initialize_kernel_enter(VOID)
{
 8006738:	b580      	push	{r7, lr}
 800673a:	af00      	add	r7, sp, #0

    /* Determine if the compiler has pre-initialized ThreadX.  */
    if (_tx_thread_system_state != TX_INITIALIZE_ALMOST_DONE)
 800673c:	4b10      	ldr	r3, [pc, #64]	; (8006780 <_tx_initialize_kernel_enter+0x48>)
 800673e:	681b      	ldr	r3, [r3, #0]
 8006740:	f113 3f0f 	cmn.w	r3, #252645135	; 0xf0f0f0f
 8006744:	d00c      	beq.n	8006760 <_tx_initialize_kernel_enter+0x28>
        /* No, the initialization still needs to take place.  */

        /* Ensure that the system state variable is set to indicate
           initialization is in progress.  Note that this variable is
           later used to represent interrupt nesting.  */
        _tx_thread_system_state =  TX_INITIALIZE_IN_PROGRESS;
 8006746:	4b0e      	ldr	r3, [pc, #56]	; (8006780 <_tx_initialize_kernel_enter+0x48>)
 8006748:	f04f 32f0 	mov.w	r2, #4042322160	; 0xf0f0f0f0
 800674c:	601a      	str	r2, [r3, #0]
        /* Call any port specific preprocessing.  */
        TX_PORT_SPECIFIC_PRE_INITIALIZATION

        /* Invoke the low-level initialization to handle all processor specific
           initialization issues.  */
        _tx_initialize_low_level();
 800674e:	f7f9 fddf 	bl	8000310 <_tx_initialize_low_level>

        /* Invoke the high-level initialization to exercise all of the
           ThreadX components and the application's initialization
           function.  */
        _tx_initialize_high_level();
 8006752:	f7ff ffad 	bl	80066b0 <_tx_initialize_high_level>

        /* Call any port specific post-processing.  */
        TX_PORT_SPECIFIC_POST_INITIALIZATION
 8006756:	4b0b      	ldr	r3, [pc, #44]	; (8006784 <_tx_initialize_kernel_enter+0x4c>)
 8006758:	681b      	ldr	r3, [r3, #0]
 800675a:	3301      	adds	r3, #1
 800675c:	4a09      	ldr	r2, [pc, #36]	; (8006784 <_tx_initialize_kernel_enter+0x4c>)
 800675e:	6013      	str	r3, [r2, #0]
    TX_INITIALIZE_KERNEL_ENTER_EXTENSION

    /* Ensure that the system state variable is set to indicate
       initialization is in progress.  Note that this variable is
       later used to represent interrupt nesting.  */
    _tx_thread_system_state =  TX_INITIALIZE_IN_PROGRESS;
 8006760:	4b07      	ldr	r3, [pc, #28]	; (8006780 <_tx_initialize_kernel_enter+0x48>)
 8006762:	f04f 32f0 	mov.w	r2, #4042322160	; 0xf0f0f0f0
 8006766:	601a      	str	r2, [r3, #0]

    /* Call the application provided initialization function.  Pass the
       first available memory address to it.  */
    tx_application_define(_tx_initialize_unused_memory);
 8006768:	4b07      	ldr	r3, [pc, #28]	; (8006788 <_tx_initialize_kernel_enter+0x50>)
 800676a:	681b      	ldr	r3, [r3, #0]
 800676c:	4618      	mov	r0, r3
 800676e:	f7fa f8c9 	bl	8000904 <tx_application_define>

    /* Set the system state in preparation for entering the thread
       scheduler.  */
    _tx_thread_system_state =  TX_INITIALIZE_IS_FINISHED;
 8006772:	4b03      	ldr	r3, [pc, #12]	; (8006780 <_tx_initialize_kernel_enter+0x48>)
 8006774:	2200      	movs	r2, #0
 8006776:	601a      	str	r2, [r3, #0]
    /* Initialize Execution Profile Kit.  */
    _tx_execution_initialize();
#endif

    /* Enter the scheduling loop to start executing threads!  */
    _tx_thread_schedule();
 8006778:	f7f9 fe0a 	bl	8000390 <_tx_thread_schedule>
#ifdef TX_SAFETY_CRITICAL

    /* If we ever get here, raise safety critical exception.  */
    TX_SAFETY_CRITICAL_EXCEPTION(__FILE__, __LINE__, 0);
#endif
}
 800677c:	bf00      	nop
 800677e:	bd80      	pop	{r7, pc}
 8006780:	24000010 	.word	0x24000010
 8006784:	24006170 	.word	0x24006170
 8006788:	240060d0 	.word	0x240060d0

0800678c <_tx_thread_create>:
/*                                                                        */
/**************************************************************************/
UINT  _tx_thread_create(TX_THREAD *thread_ptr, CHAR *name_ptr, VOID (*entry_function)(ULONG id), ULONG entry_input,
                            VOID *stack_start, ULONG stack_size, UINT priority, UINT preempt_threshold,
                            ULONG time_slice, UINT auto_start)
{
 800678c:	b580      	push	{r7, lr}
 800678e:	b092      	sub	sp, #72	; 0x48
 8006790:	af00      	add	r7, sp, #0
 8006792:	60f8      	str	r0, [r7, #12]
 8006794:	60b9      	str	r1, [r7, #8]
 8006796:	607a      	str	r2, [r7, #4]
 8006798:	603b      	str	r3, [r7, #0]
TX_INTERRUPT_SAVE_AREA

TX_THREAD               *next_thread;
TX_THREAD               *previous_thread;
TX_THREAD               *saved_thread_ptr;
UINT                    saved_threshold =  ((UINT) 0);
 800679a:	2300      	movs	r3, #0
 800679c:	643b      	str	r3, [r7, #64]	; 0x40
#ifndef TX_DISABLE_STACK_FILLING

    /* Set the thread stack to a pattern prior to creating the initial
       stack frame.  This pattern is used by the stack checking routines
       to see how much has been used.  */
    TX_MEMSET(stack_start, ((UCHAR) TX_STACK_FILL), stack_size);
 800679e:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 80067a0:	21ef      	movs	r1, #239	; 0xef
 80067a2:	6d38      	ldr	r0, [r7, #80]	; 0x50
 80067a4:	f001 f986 	bl	8007ab4 <memset>

    /* Prepare the thread control block prior to placing it on the created
       list.  */

    /* Initialize thread control block to all zeros.  */
    TX_MEMSET(thread_ptr, 0, (sizeof(TX_THREAD)));
 80067a8:	22b0      	movs	r2, #176	; 0xb0
 80067aa:	2100      	movs	r1, #0
 80067ac:	68f8      	ldr	r0, [r7, #12]
 80067ae:	f001 f981 	bl	8007ab4 <memset>

    /* Place the supplied parameters into the thread's control block.  */
    thread_ptr -> tx_thread_name =              name_ptr;
 80067b2:	68fb      	ldr	r3, [r7, #12]
 80067b4:	68ba      	ldr	r2, [r7, #8]
 80067b6:	629a      	str	r2, [r3, #40]	; 0x28
    thread_ptr -> tx_thread_entry =             entry_function;
 80067b8:	68fb      	ldr	r3, [r7, #12]
 80067ba:	687a      	ldr	r2, [r7, #4]
 80067bc:	645a      	str	r2, [r3, #68]	; 0x44
    thread_ptr -> tx_thread_entry_parameter =   entry_input;
 80067be:	68fb      	ldr	r3, [r7, #12]
 80067c0:	683a      	ldr	r2, [r7, #0]
 80067c2:	649a      	str	r2, [r3, #72]	; 0x48
    thread_ptr -> tx_thread_stack_start =       stack_start;
 80067c4:	68fb      	ldr	r3, [r7, #12]
 80067c6:	6d3a      	ldr	r2, [r7, #80]	; 0x50
 80067c8:	60da      	str	r2, [r3, #12]
    thread_ptr -> tx_thread_stack_size =        stack_size;
 80067ca:	68fb      	ldr	r3, [r7, #12]
 80067cc:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 80067ce:	615a      	str	r2, [r3, #20]
    thread_ptr -> tx_thread_priority =          priority;
 80067d0:	68fb      	ldr	r3, [r7, #12]
 80067d2:	6dba      	ldr	r2, [r7, #88]	; 0x58
 80067d4:	62da      	str	r2, [r3, #44]	; 0x2c
    thread_ptr -> tx_thread_user_priority =     priority;
 80067d6:	68fb      	ldr	r3, [r7, #12]
 80067d8:	6dba      	ldr	r2, [r7, #88]	; 0x58
 80067da:	f8c3 2094 	str.w	r2, [r3, #148]	; 0x94
    thread_ptr -> tx_thread_time_slice =        time_slice;
 80067de:	68fb      	ldr	r3, [r7, #12]
 80067e0:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 80067e2:	619a      	str	r2, [r3, #24]
    thread_ptr -> tx_thread_new_time_slice =    time_slice;
 80067e4:	68fb      	ldr	r3, [r7, #12]
 80067e6:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 80067e8:	61da      	str	r2, [r3, #28]
    thread_ptr -> tx_thread_inherit_priority =  ((UINT) TX_MAX_PRIORITIES);
 80067ea:	68fb      	ldr	r3, [r7, #12]
 80067ec:	2220      	movs	r2, #32
 80067ee:	f8c3 209c 	str.w	r2, [r3, #156]	; 0x9c

    /* Calculate the end of the thread's stack area.  */
    temp_ptr =  TX_VOID_TO_UCHAR_POINTER_CONVERT(stack_start);
 80067f2:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80067f4:	63fb      	str	r3, [r7, #60]	; 0x3c
    temp_ptr =  (TX_UCHAR_POINTER_ADD(temp_ptr, (stack_size - ((ULONG) 1))));
 80067f6:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80067f8:	3b01      	subs	r3, #1
 80067fa:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 80067fc:	4413      	add	r3, r2
 80067fe:	63fb      	str	r3, [r7, #60]	; 0x3c
    thread_ptr -> tx_thread_stack_end =         TX_UCHAR_TO_VOID_POINTER_CONVERT(temp_ptr);
 8006800:	68fb      	ldr	r3, [r7, #12]
 8006802:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 8006804:	611a      	str	r2, [r3, #16]
    thread_ptr -> tx_thread_preempt_threshold =       preempt_threshold;
    thread_ptr -> tx_thread_user_preempt_threshold =  preempt_threshold;
#else

    /* Preemption-threshold is disabled, determine if preemption-threshold was required.  */
    if (priority != preempt_threshold)
 8006806:	6dba      	ldr	r2, [r7, #88]	; 0x58
 8006808:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800680a:	429a      	cmp	r2, r3
 800680c:	d007      	beq.n	800681e <_tx_thread_create+0x92>
    {

        /* Preemption-threshold specified. Since specific preemption-threshold is not supported,
           disable all preemption.  */
        thread_ptr -> tx_thread_preempt_threshold =       ((UINT) 0);
 800680e:	68fb      	ldr	r3, [r7, #12]
 8006810:	2200      	movs	r2, #0
 8006812:	63da      	str	r2, [r3, #60]	; 0x3c
        thread_ptr -> tx_thread_user_preempt_threshold =  ((UINT) 0);
 8006814:	68fb      	ldr	r3, [r7, #12]
 8006816:	2200      	movs	r2, #0
 8006818:	f8c3 2098 	str.w	r2, [r3, #152]	; 0x98
 800681c:	e006      	b.n	800682c <_tx_thread_create+0xa0>
    }
    else
    {

        /* Preemption-threshold is not specified, just setup with the priority.  */
        thread_ptr -> tx_thread_preempt_threshold =       priority;
 800681e:	68fb      	ldr	r3, [r7, #12]
 8006820:	6dba      	ldr	r2, [r7, #88]	; 0x58
 8006822:	63da      	str	r2, [r3, #60]	; 0x3c
        thread_ptr -> tx_thread_user_preempt_threshold =  priority;
 8006824:	68fb      	ldr	r3, [r7, #12]
 8006826:	6dba      	ldr	r2, [r7, #88]	; 0x58
 8006828:	f8c3 2098 	str.w	r2, [r3, #152]	; 0x98
    }
#endif

    /* Now fill in the values that are required for thread initialization.  */
    thread_ptr -> tx_thread_state =  TX_SUSPENDED;
 800682c:	68fb      	ldr	r3, [r7, #12]
 800682e:	2203      	movs	r2, #3
 8006830:	631a      	str	r2, [r3, #48]	; 0x30

    /* Setup the necessary fields in the thread timer block.  */
    TX_THREAD_CREATE_TIMEOUT_SETUP(thread_ptr)
 8006832:	68fb      	ldr	r3, [r7, #12]
 8006834:	4a48      	ldr	r2, [pc, #288]	; (8006958 <_tx_thread_create+0x1cc>)
 8006836:	655a      	str	r2, [r3, #84]	; 0x54
 8006838:	68fa      	ldr	r2, [r7, #12]
 800683a:	68fb      	ldr	r3, [r7, #12]
 800683c:	659a      	str	r2, [r3, #88]	; 0x58
    TX_THREAD_CREATE_INTERNAL_EXTENSION(thread_ptr)

    /* Call the target specific stack frame building routine to build the
       thread's initial stack and to setup the actual stack pointer in the
       control block.  */
    _tx_thread_stack_build(thread_ptr, _tx_thread_shell_entry);
 800683e:	4947      	ldr	r1, [pc, #284]	; (800695c <_tx_thread_create+0x1d0>)
 8006840:	68f8      	ldr	r0, [r7, #12]
 8006842:	f7f9 fe0d 	bl	8000460 <_tx_thread_stack_build>
    __asm__ volatile ("MRS  %0, PRIMASK ": "=r" (posture));
 8006846:	f3ef 8310 	mrs	r3, PRIMASK
 800684a:	62fb      	str	r3, [r7, #44]	; 0x2c
    return(posture);
 800684c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
    int_posture = __get_interrupt_posture();
 800684e:	62bb      	str	r3, [r7, #40]	; 0x28
    __asm__ volatile ("CPSID i" : : : "memory");
 8006850:	b672      	cpsid	i
    return(int_posture);
 8006852:	6abb      	ldr	r3, [r7, #40]	; 0x28
    /* Setup the highest usage stack pointer.  */
    thread_ptr -> tx_thread_stack_highest_ptr =  thread_ptr -> tx_thread_stack_ptr;
#endif

    /* Prepare to make this thread a member of the created thread list.  */
    TX_DISABLE
 8006854:	63bb      	str	r3, [r7, #56]	; 0x38

    /* Load the thread ID field in the thread control block.  */
    thread_ptr -> tx_thread_id =  TX_THREAD_ID;
 8006856:	68fb      	ldr	r3, [r7, #12]
 8006858:	4a41      	ldr	r2, [pc, #260]	; (8006960 <_tx_thread_create+0x1d4>)
 800685a:	601a      	str	r2, [r3, #0]

    /* Place the thread on the list of created threads.  First,
       check for an empty list.  */
    if (_tx_thread_created_count == TX_EMPTY)
 800685c:	4b41      	ldr	r3, [pc, #260]	; (8006964 <_tx_thread_create+0x1d8>)
 800685e:	681b      	ldr	r3, [r3, #0]
 8006860:	2b00      	cmp	r3, #0
 8006862:	d10b      	bne.n	800687c <_tx_thread_create+0xf0>
    {

        /* The created thread list is empty.  Add thread to empty list.  */
        _tx_thread_created_ptr =                    thread_ptr;
 8006864:	4a40      	ldr	r2, [pc, #256]	; (8006968 <_tx_thread_create+0x1dc>)
 8006866:	68fb      	ldr	r3, [r7, #12]
 8006868:	6013      	str	r3, [r2, #0]
        thread_ptr -> tx_thread_created_next =      thread_ptr;
 800686a:	68fb      	ldr	r3, [r7, #12]
 800686c:	68fa      	ldr	r2, [r7, #12]
 800686e:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
        thread_ptr -> tx_thread_created_previous =  thread_ptr;
 8006872:	68fb      	ldr	r3, [r7, #12]
 8006874:	68fa      	ldr	r2, [r7, #12]
 8006876:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
 800687a:	e016      	b.n	80068aa <_tx_thread_create+0x11e>
    }
    else
    {

        /* This list is not NULL, add to the end of the list.  */
        next_thread =  _tx_thread_created_ptr;
 800687c:	4b3a      	ldr	r3, [pc, #232]	; (8006968 <_tx_thread_create+0x1dc>)
 800687e:	681b      	ldr	r3, [r3, #0]
 8006880:	637b      	str	r3, [r7, #52]	; 0x34
        previous_thread =  next_thread -> tx_thread_created_previous;
 8006882:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8006884:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8006888:	633b      	str	r3, [r7, #48]	; 0x30

        /* Place the new thread in the list.  */
        next_thread -> tx_thread_created_previous =  thread_ptr;
 800688a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800688c:	68fa      	ldr	r2, [r7, #12]
 800688e:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
        previous_thread -> tx_thread_created_next =  thread_ptr;
 8006892:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006894:	68fa      	ldr	r2, [r7, #12]
 8006896:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

        /* Setup this thread's created links.  */
        thread_ptr -> tx_thread_created_previous =  previous_thread;
 800689a:	68fb      	ldr	r3, [r7, #12]
 800689c:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800689e:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
        thread_ptr -> tx_thread_created_next =      next_thread;
 80068a2:	68fb      	ldr	r3, [r7, #12]
 80068a4:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 80068a6:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
    }

    /* Increment the thread created count.  */
    _tx_thread_created_count++;
 80068aa:	4b2e      	ldr	r3, [pc, #184]	; (8006964 <_tx_thread_create+0x1d8>)
 80068ac:	681b      	ldr	r3, [r3, #0]
 80068ae:	3301      	adds	r3, #1
 80068b0:	4a2c      	ldr	r2, [pc, #176]	; (8006964 <_tx_thread_create+0x1d8>)
 80068b2:	6013      	str	r3, [r2, #0]
    TX_EL_THREAD_CREATE_INSERT

#ifndef TX_NOT_INTERRUPTABLE

    /* Temporarily disable preemption.  */
    _tx_thread_preempt_disable++;
 80068b4:	4b2d      	ldr	r3, [pc, #180]	; (800696c <_tx_thread_create+0x1e0>)
 80068b6:	681b      	ldr	r3, [r3, #0]
 80068b8:	3301      	adds	r3, #1
 80068ba:	4a2c      	ldr	r2, [pc, #176]	; (800696c <_tx_thread_create+0x1e0>)
 80068bc:	6013      	str	r3, [r2, #0]
#endif

    /* Determine if an automatic start was requested.  If so, call the resume
       thread function and then check for a preemption condition.  */
    if (auto_start == TX_AUTO_START)
 80068be:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 80068c0:	2b01      	cmp	r3, #1
 80068c2:	d129      	bne.n	8006918 <_tx_thread_create+0x18c>
    __asm__ volatile (" MRS  %0,IPSR ": "=r" (ipsr_value) );
 80068c4:	f3ef 8305 	mrs	r3, IPSR
 80068c8:	627b      	str	r3, [r7, #36]	; 0x24
    return(ipsr_value);
 80068ca:	6a7a      	ldr	r2, [r7, #36]	; 0x24
    {

        /* Determine if the create call is being called from initialization.  */
        if (TX_THREAD_GET_SYSTEM_STATE() >= TX_INITIALIZE_IN_PROGRESS)
 80068cc:	4b28      	ldr	r3, [pc, #160]	; (8006970 <_tx_thread_create+0x1e4>)
 80068ce:	681b      	ldr	r3, [r3, #0]
 80068d0:	4313      	orrs	r3, r2
 80068d2:	f1b3 3ff0 	cmp.w	r3, #4042322160	; 0xf0f0f0f0
 80068d6:	d30d      	bcc.n	80068f4 <_tx_thread_create+0x168>

            /* Pickup the current thread execute pointer, which corresponds to the
               highest priority thread ready to execute.  Interrupt lockout is
               not required, since interrupts are assumed to be disabled during
               initialization.  */
            saved_thread_ptr =  _tx_thread_execute_ptr;
 80068d8:	4b26      	ldr	r3, [pc, #152]	; (8006974 <_tx_thread_create+0x1e8>)
 80068da:	681b      	ldr	r3, [r3, #0]
 80068dc:	647b      	str	r3, [r7, #68]	; 0x44

            /* Determine if there is thread ready for execution.  */
            if (saved_thread_ptr != TX_NULL)
 80068de:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80068e0:	2b00      	cmp	r3, #0
 80068e2:	d009      	beq.n	80068f8 <_tx_thread_create+0x16c>
            {

                /* Yes, a thread is ready for execution when initialization completes.  */

                /* Save the current preemption-threshold.  */
                saved_threshold =  saved_thread_ptr -> tx_thread_preempt_threshold;
 80068e4:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80068e6:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80068e8:	643b      	str	r3, [r7, #64]	; 0x40

                /* For initialization, temporarily set the preemption-threshold to the
                   priority level to make sure the highest-priority thread runs once
                   initialization is complete.  */
                saved_thread_ptr -> tx_thread_preempt_threshold =  saved_thread_ptr -> tx_thread_priority;
 80068ea:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80068ec:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80068ee:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80068f0:	63da      	str	r2, [r3, #60]	; 0x3c
 80068f2:	e001      	b.n	80068f8 <_tx_thread_create+0x16c>
        }
        else
        {

            /* Simply set the saved thread pointer to NULL.  */
            saved_thread_ptr =  TX_NULL;
 80068f4:	2300      	movs	r3, #0
 80068f6:	647b      	str	r3, [r7, #68]	; 0x44
 80068f8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80068fa:	623b      	str	r3, [r7, #32]
    __asm__ volatile ("MSR  PRIMASK,%0": : "r" (int_posture): "memory");
 80068fc:	6a3b      	ldr	r3, [r7, #32]
 80068fe:	f383 8810 	msr	PRIMASK, r3
}
 8006902:	bf00      	nop

        /* Perform any additional activities for tool or user purpose.  */
        TX_THREAD_CREATE_EXTENSION(thread_ptr)

        /* Call the resume thread function to make this thread ready.  */
        _tx_thread_system_resume(thread_ptr);
 8006904:	68f8      	ldr	r0, [r7, #12]
 8006906:	f000 fa49 	bl	8006d9c <_tx_thread_system_resume>
#endif

        /* Determine if the thread's preemption-threshold needs to be restored.  */
        if (saved_thread_ptr != TX_NULL)
 800690a:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800690c:	2b00      	cmp	r3, #0
 800690e:	d01e      	beq.n	800694e <_tx_thread_create+0x1c2>
        {

            /* Yes, restore the previous highest-priority thread's preemption-threshold. This
               can only happen if this routine is called from initialization.  */
            saved_thread_ptr -> tx_thread_preempt_threshold =  saved_threshold;
 8006910:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8006912:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 8006914:	63da      	str	r2, [r3, #60]	; 0x3c
 8006916:	e01a      	b.n	800694e <_tx_thread_create+0x1c2>
 8006918:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800691a:	613b      	str	r3, [r7, #16]
    __asm__ volatile ("MSR  PRIMASK,%0": : "r" (int_posture): "memory");
 800691c:	693b      	ldr	r3, [r7, #16]
 800691e:	f383 8810 	msr	PRIMASK, r3
}
 8006922:	bf00      	nop
    __asm__ volatile ("MRS  %0, PRIMASK ": "=r" (posture));
 8006924:	f3ef 8310 	mrs	r3, PRIMASK
 8006928:	61bb      	str	r3, [r7, #24]
    return(posture);
 800692a:	69bb      	ldr	r3, [r7, #24]
    int_posture = __get_interrupt_posture();
 800692c:	617b      	str	r3, [r7, #20]
    __asm__ volatile ("CPSID i" : : : "memory");
 800692e:	b672      	cpsid	i
    return(int_posture);
 8006930:	697b      	ldr	r3, [r7, #20]

        /* Perform any additional activities for tool or user purpose.  */
        TX_THREAD_CREATE_EXTENSION(thread_ptr)

        /* Disable interrupts.  */
        TX_DISABLE
 8006932:	63bb      	str	r3, [r7, #56]	; 0x38

        /* Re-enable preemption.  */
        _tx_thread_preempt_disable--;
 8006934:	4b0d      	ldr	r3, [pc, #52]	; (800696c <_tx_thread_create+0x1e0>)
 8006936:	681b      	ldr	r3, [r3, #0]
 8006938:	3b01      	subs	r3, #1
 800693a:	4a0c      	ldr	r2, [pc, #48]	; (800696c <_tx_thread_create+0x1e0>)
 800693c:	6013      	str	r3, [r2, #0]
 800693e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006940:	61fb      	str	r3, [r7, #28]
    __asm__ volatile ("MSR  PRIMASK,%0": : "r" (int_posture): "memory");
 8006942:	69fb      	ldr	r3, [r7, #28]
 8006944:	f383 8810 	msr	PRIMASK, r3
}
 8006948:	bf00      	nop

        /* Restore interrupts.  */
        TX_RESTORE

        /* Check for preemption.  */
        _tx_thread_system_preempt_check();
 800694a:	f000 f9ed 	bl	8006d28 <_tx_thread_system_preempt_check>
#endif
    }

    /* Always return a success.  */
    return(TX_SUCCESS);
 800694e:	2300      	movs	r3, #0
}
 8006950:	4618      	mov	r0, r3
 8006952:	3748      	adds	r7, #72	; 0x48
 8006954:	46bd      	mov	sp, r7
 8006956:	bd80      	pop	{r7, pc}
 8006958:	08007271 	.word	0x08007271
 800695c:	08006ab1 	.word	0x08006ab1
 8006960:	54485244 	.word	0x54485244
 8006964:	240060e4 	.word	0x240060e4
 8006968:	240060e0 	.word	0x240060e0
 800696c:	24006170 	.word	0x24006170
 8006970:	24000010 	.word	0x24000010
 8006974:	240060dc 	.word	0x240060dc

08006978 <_tx_thread_initialize>:
/*                                            stack check error handling, */
/*                                            resulting in version 6.1.9  */   
/*                                                                        */
/**************************************************************************/
VOID  _tx_thread_initialize(VOID)
{
 8006978:	b580      	push	{r7, lr}
 800697a:	af00      	add	r7, sp, #0
       respectively.  */

#ifndef TX_DISABLE_REDUNDANT_CLEARING

    /* Set current thread pointer to NULL.  */
    TX_THREAD_SET_CURRENT(TX_NULL)
 800697c:	4b12      	ldr	r3, [pc, #72]	; (80069c8 <_tx_thread_initialize+0x50>)
 800697e:	2200      	movs	r2, #0
 8006980:	601a      	str	r2, [r3, #0]

    /* Initialize the execute thread pointer to NULL.  */
    _tx_thread_execute_ptr =  TX_NULL;
 8006982:	4b12      	ldr	r3, [pc, #72]	; (80069cc <_tx_thread_initialize+0x54>)
 8006984:	2200      	movs	r2, #0
 8006986:	601a      	str	r2, [r3, #0]
 8006988:	4b11      	ldr	r3, [pc, #68]	; (80069d0 <_tx_thread_initialize+0x58>)
 800698a:	2200      	movs	r2, #0
 800698c:	601a      	str	r2, [r3, #0]
#endif
#endif

    /* Setup the highest priority variable to the max, indicating no thread is currently
       ready.  */
    _tx_thread_highest_priority =  ((UINT) TX_MAX_PRIORITIES);
 800698e:	4b11      	ldr	r3, [pc, #68]	; (80069d4 <_tx_thread_initialize+0x5c>)
 8006990:	2220      	movs	r2, #32
 8006992:	601a      	str	r2, [r3, #0]


#ifndef TX_DISABLE_REDUNDANT_CLEARING

    /* Initialize the array of priority head pointers.  */
    TX_MEMSET(&_tx_thread_priority_list[0], 0, (sizeof(_tx_thread_priority_list)));
 8006994:	2280      	movs	r2, #128	; 0x80
 8006996:	2100      	movs	r1, #0
 8006998:	480f      	ldr	r0, [pc, #60]	; (80069d8 <_tx_thread_initialize+0x60>)
 800699a:	f001 f88b 	bl	8007ab4 <memset>

    /* Initialize the head pointer of the created threads list and the
       number of threads created.  */
    _tx_thread_created_ptr =        TX_NULL;
 800699e:	4b0f      	ldr	r3, [pc, #60]	; (80069dc <_tx_thread_initialize+0x64>)
 80069a0:	2200      	movs	r2, #0
 80069a2:	601a      	str	r2, [r3, #0]
    _tx_thread_created_count =      TX_EMPTY;
 80069a4:	4b0e      	ldr	r3, [pc, #56]	; (80069e0 <_tx_thread_initialize+0x68>)
 80069a6:	2200      	movs	r2, #0
 80069a8:	601a      	str	r2, [r3, #0]

    /* Clear the global preempt disable variable.  */
    _tx_thread_preempt_disable =    ((UINT) 0);
 80069aa:	4b0e      	ldr	r3, [pc, #56]	; (80069e4 <_tx_thread_initialize+0x6c>)
 80069ac:	2200      	movs	r2, #0
 80069ae:	601a      	str	r2, [r3, #0]

    /* Initialize the thread mutex release function pointer.  */
    _tx_thread_mutex_release =      TX_NULL;
 80069b0:	4b0d      	ldr	r3, [pc, #52]	; (80069e8 <_tx_thread_initialize+0x70>)
 80069b2:	2200      	movs	r2, #0
 80069b4:	601a      	str	r2, [r3, #0]
#endif
#ifdef TX_DISABLE_REDUNDANT_CLEARING
                            | (((ULONG) 1) << 18)
#endif
#ifdef TX_DISABLE_NOTIFY_CALLBACKS
                            | (((ULONG) 1) << 17)
 80069b6:	4b0d      	ldr	r3, [pc, #52]	; (80069ec <_tx_thread_initialize+0x74>)
 80069b8:	681b      	ldr	r3, [r3, #0]
 80069ba:	f043 7385 	orr.w	r3, r3, #17432576	; 0x10a0000
    _tx_build_options =  _tx_build_options 
 80069be:	4a0b      	ldr	r2, [pc, #44]	; (80069ec <_tx_thread_initialize+0x74>)
 80069c0:	6013      	str	r3, [r2, #0]
#endif
#if TX_PORT_SPECIFIC_BUILD_OPTIONS != 0
                            | TX_PORT_SPECIFIC_BUILD_OPTIONS
#endif
                            ;
}
 80069c2:	bf00      	nop
 80069c4:	bd80      	pop	{r7, pc}
 80069c6:	bf00      	nop
 80069c8:	240060d8 	.word	0x240060d8
 80069cc:	240060dc 	.word	0x240060dc
 80069d0:	240060e8 	.word	0x240060e8
 80069d4:	240060ec 	.word	0x240060ec
 80069d8:	240060f0 	.word	0x240060f0
 80069dc:	240060e0 	.word	0x240060e0
 80069e0:	240060e4 	.word	0x240060e4
 80069e4:	24006170 	.word	0x24006170
 80069e8:	24006174 	.word	0x24006174
 80069ec:	24006178 	.word	0x24006178

080069f0 <_tx_thread_resume>:
/*  09-30-2020     Yuxin Zhou               Modified comment(s),          */
/*                                            resulting in version 6.1    */
/*                                                                        */
/**************************************************************************/
UINT  _tx_thread_resume(TX_THREAD *thread_ptr)
{
 80069f0:	b580      	push	{r7, lr}
 80069f2:	b08c      	sub	sp, #48	; 0x30
 80069f4:	af00      	add	r7, sp, #0
 80069f6:	6078      	str	r0, [r7, #4]

TX_INTERRUPT_SAVE_AREA

UINT        status;
TX_THREAD   *saved_thread_ptr;
UINT        saved_threshold =  ((UINT) 0);
 80069f8:	2300      	movs	r3, #0
 80069fa:	627b      	str	r3, [r7, #36]	; 0x24
    __asm__ volatile ("MRS  %0, PRIMASK ": "=r" (posture));
 80069fc:	f3ef 8310 	mrs	r3, PRIMASK
 8006a00:	61fb      	str	r3, [r7, #28]
    return(posture);
 8006a02:	69fb      	ldr	r3, [r7, #28]
    int_posture = __get_interrupt_posture();
 8006a04:	61bb      	str	r3, [r7, #24]
    __asm__ volatile ("CPSID i" : : : "memory");
 8006a06:	b672      	cpsid	i
    return(int_posture);
 8006a08:	69bb      	ldr	r3, [r7, #24]
    TX_THREAD_STACK_CHECK(thread_ptr)
#endif
#endif

    /* Lockout interrupts while the thread is being resumed.  */
    TX_DISABLE
 8006a0a:	623b      	str	r3, [r7, #32]
    /* Log this kernel call.  */
    TX_EL_THREAD_RESUME_INSERT

    /* Determine if the thread is suspended or in the process of suspending.
       If so, call the thread resume processing.  */
    if (thread_ptr -> tx_thread_state == TX_SUSPENDED)
 8006a0c:	687b      	ldr	r3, [r7, #4]
 8006a0e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006a10:	2b03      	cmp	r3, #3
 8006a12:	d12f      	bne.n	8006a74 <_tx_thread_resume+0x84>
    __asm__ volatile (" MRS  %0,IPSR ": "=r" (ipsr_value) );
 8006a14:	f3ef 8305 	mrs	r3, IPSR
 8006a18:	617b      	str	r3, [r7, #20]
    return(ipsr_value);
 8006a1a:	697a      	ldr	r2, [r7, #20]
    {

        /* Determine if the create call is being called from initialization.  */
        if (TX_THREAD_GET_SYSTEM_STATE() >= TX_INITIALIZE_IN_PROGRESS)
 8006a1c:	4b21      	ldr	r3, [pc, #132]	; (8006aa4 <_tx_thread_resume+0xb4>)
 8006a1e:	681b      	ldr	r3, [r3, #0]
 8006a20:	4313      	orrs	r3, r2
 8006a22:	f1b3 3ff0 	cmp.w	r3, #4042322160	; 0xf0f0f0f0
 8006a26:	d30d      	bcc.n	8006a44 <_tx_thread_resume+0x54>

            /* Pickup the current thread execute pointer, which corresponds to the
               highest priority thread ready to execute.  Interrupt lockout is
               not required, since interrupts are assumed to be disabled during
               initialization.  */
            saved_thread_ptr =  _tx_thread_execute_ptr;
 8006a28:	4b1f      	ldr	r3, [pc, #124]	; (8006aa8 <_tx_thread_resume+0xb8>)
 8006a2a:	681b      	ldr	r3, [r3, #0]
 8006a2c:	62bb      	str	r3, [r7, #40]	; 0x28

            /* Determine if there is thread ready for execution.  */
            if (saved_thread_ptr != TX_NULL)
 8006a2e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006a30:	2b00      	cmp	r3, #0
 8006a32:	d009      	beq.n	8006a48 <_tx_thread_resume+0x58>
            {

                /* Yes, a thread is ready for execution when initialization completes.  */

                /* Save the current preemption-threshold.  */
                saved_threshold =  saved_thread_ptr -> tx_thread_preempt_threshold;
 8006a34:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006a36:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8006a38:	627b      	str	r3, [r7, #36]	; 0x24

                /* For initialization, temporarily set the preemption-threshold to the
                   priority level to make sure the highest-priority thread runs once
                   initialization is complete.  */
                saved_thread_ptr -> tx_thread_preempt_threshold =  saved_thread_ptr -> tx_thread_priority;
 8006a3a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006a3c:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8006a3e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006a40:	63da      	str	r2, [r3, #60]	; 0x3c
 8006a42:	e001      	b.n	8006a48 <_tx_thread_resume+0x58>
        }
        else
        {

            /* Simply set the saved thread pointer to NULL.  */
            saved_thread_ptr =  TX_NULL;
 8006a44:	2300      	movs	r3, #0
 8006a46:	62bb      	str	r3, [r7, #40]	; 0x28
        /* Restore interrupts.  */
        TX_RESTORE
#else

        /* Temporarily disable preemption.  */
        _tx_thread_preempt_disable++;
 8006a48:	4b18      	ldr	r3, [pc, #96]	; (8006aac <_tx_thread_resume+0xbc>)
 8006a4a:	681b      	ldr	r3, [r3, #0]
 8006a4c:	3301      	adds	r3, #1
 8006a4e:	4a17      	ldr	r2, [pc, #92]	; (8006aac <_tx_thread_resume+0xbc>)
 8006a50:	6013      	str	r3, [r2, #0]
 8006a52:	6a3b      	ldr	r3, [r7, #32]
 8006a54:	613b      	str	r3, [r7, #16]
    __asm__ volatile ("MSR  PRIMASK,%0": : "r" (int_posture): "memory");
 8006a56:	693b      	ldr	r3, [r7, #16]
 8006a58:	f383 8810 	msr	PRIMASK, r3
}
 8006a5c:	bf00      	nop

        /* Restore interrupts.  */
        TX_RESTORE

        /* Call the actual resume service to resume the thread.  */
        _tx_thread_system_resume(thread_ptr);
 8006a5e:	6878      	ldr	r0, [r7, #4]
 8006a60:	f000 f99c 	bl	8006d9c <_tx_thread_system_resume>
#endif

        /* Determine if the thread's preemption-threshold needs to be restored.  */
        if (saved_thread_ptr != TX_NULL)
 8006a64:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006a66:	2b00      	cmp	r3, #0
 8006a68:	d002      	beq.n	8006a70 <_tx_thread_resume+0x80>
        {

            /* Yes, restore the previous highest-priority thread's preemption-threshold. This
               can only happen if this routine is called from initialization.  */
            saved_thread_ptr -> tx_thread_preempt_threshold =  saved_threshold;
 8006a6a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006a6c:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8006a6e:	63da      	str	r2, [r3, #60]	; 0x3c
        /* Setup successful return status.  */
        status =  TX_SUCCESS;
#else

        /* Return successful completion.  */
        return(TX_SUCCESS);
 8006a70:	2300      	movs	r3, #0
 8006a72:	e012      	b.n	8006a9a <_tx_thread_resume+0xaa>

        /* Setup successful return status.  */
        status =  TX_SUCCESS;
#endif
    }
    else if (thread_ptr -> tx_thread_delayed_suspend == TX_TRUE)
 8006a74:	687b      	ldr	r3, [r7, #4]
 8006a76:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8006a78:	2b01      	cmp	r3, #1
 8006a7a:	d105      	bne.n	8006a88 <_tx_thread_resume+0x98>
    {

        /* Clear the delayed suspension.  */
        thread_ptr -> tx_thread_delayed_suspend =  TX_FALSE;
 8006a7c:	687b      	ldr	r3, [r7, #4]
 8006a7e:	2200      	movs	r2, #0
 8006a80:	635a      	str	r2, [r3, #52]	; 0x34

        /* Setup delayed suspend lifted return status.  */
        status =  TX_SUSPEND_LIFTED;
 8006a82:	2319      	movs	r3, #25
 8006a84:	62fb      	str	r3, [r7, #44]	; 0x2c
 8006a86:	e001      	b.n	8006a8c <_tx_thread_resume+0x9c>
    }
    else
    {

        /* Setup invalid resume return status.  */
        status =  TX_RESUME_ERROR;
 8006a88:	2312      	movs	r3, #18
 8006a8a:	62fb      	str	r3, [r7, #44]	; 0x2c
 8006a8c:	6a3b      	ldr	r3, [r7, #32]
 8006a8e:	60fb      	str	r3, [r7, #12]
    __asm__ volatile ("MSR  PRIMASK,%0": : "r" (int_posture): "memory");
 8006a90:	68fb      	ldr	r3, [r7, #12]
 8006a92:	f383 8810 	msr	PRIMASK, r3
}
 8006a96:	bf00      	nop
        }
    }
#endif

    /* Return completion status. */
    return(status);
 8006a98:	6afb      	ldr	r3, [r7, #44]	; 0x2c
}
 8006a9a:	4618      	mov	r0, r3
 8006a9c:	3730      	adds	r7, #48	; 0x30
 8006a9e:	46bd      	mov	sp, r7
 8006aa0:	bd80      	pop	{r7, pc}
 8006aa2:	bf00      	nop
 8006aa4:	24000010 	.word	0x24000010
 8006aa8:	240060dc 	.word	0x240060dc
 8006aac:	24006170 	.word	0x24006170

08006ab0 <_tx_thread_shell_entry>:
/*  09-30-2020     Yuxin Zhou               Modified comment(s),          */
/*                                            resulting in version 6.1    */
/*                                                                        */
/**************************************************************************/
VOID  _tx_thread_shell_entry(VOID)
{
 8006ab0:	b580      	push	{r7, lr}
 8006ab2:	b088      	sub	sp, #32
 8006ab4:	af00      	add	r7, sp, #0
VOID            (*entry_exit_notify)(TX_THREAD *notify_thread_ptr, UINT type);
#endif


    /* Pickup thread pointer.  */
    TX_THREAD_GET_CURRENT(thread_ptr)
 8006ab6:	4b21      	ldr	r3, [pc, #132]	; (8006b3c <_tx_thread_shell_entry+0x8c>)
 8006ab8:	681b      	ldr	r3, [r3, #0]
 8006aba:	61fb      	str	r3, [r7, #28]
        (entry_exit_notify)(thread_ptr, TX_THREAD_ENTRY);
    }
#endif

    /* Call current thread's entry function.  */
    (thread_ptr -> tx_thread_entry) (thread_ptr -> tx_thread_entry_parameter);
 8006abc:	69fb      	ldr	r3, [r7, #28]
 8006abe:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8006ac0:	69fa      	ldr	r2, [r7, #28]
 8006ac2:	6c92      	ldr	r2, [r2, #72]	; 0x48
 8006ac4:	4610      	mov	r0, r2
 8006ac6:	4798      	blx	r3

    /* Suspend thread with a "completed" state.  */

    /* Determine if the application is using mutexes.  */
    if (_tx_thread_mutex_release != TX_NULL)
 8006ac8:	4b1d      	ldr	r3, [pc, #116]	; (8006b40 <_tx_thread_shell_entry+0x90>)
 8006aca:	681b      	ldr	r3, [r3, #0]
 8006acc:	2b00      	cmp	r3, #0
 8006ace:	d003      	beq.n	8006ad8 <_tx_thread_shell_entry+0x28>
    {

        /* Yes, call the mutex release function via a function pointer that
           is setup during mutex initialization.  */
        (_tx_thread_mutex_release)(thread_ptr);
 8006ad0:	4b1b      	ldr	r3, [pc, #108]	; (8006b40 <_tx_thread_shell_entry+0x90>)
 8006ad2:	681b      	ldr	r3, [r3, #0]
 8006ad4:	69f8      	ldr	r0, [r7, #28]
 8006ad6:	4798      	blx	r3
    __asm__ volatile ("MRS  %0, PRIMASK ": "=r" (posture));
 8006ad8:	f3ef 8310 	mrs	r3, PRIMASK
 8006adc:	607b      	str	r3, [r7, #4]
    return(posture);
 8006ade:	687b      	ldr	r3, [r7, #4]
    int_posture = __get_interrupt_posture();
 8006ae0:	603b      	str	r3, [r7, #0]
    __asm__ volatile ("CPSID i" : : : "memory");
 8006ae2:	b672      	cpsid	i
    return(int_posture);
 8006ae4:	683b      	ldr	r3, [r7, #0]
    }

    /* Lockout interrupts while the thread state is setup.  */
    TX_DISABLE
 8006ae6:	61bb      	str	r3, [r7, #24]
    entry_exit_notify =  thread_ptr -> tx_thread_entry_exit_notify;
#endif

    /* Set the status to suspending, in order to indicate the suspension
       is in progress.  */
    thread_ptr -> tx_thread_state =  TX_COMPLETED;
 8006ae8:	69fb      	ldr	r3, [r7, #28]
 8006aea:	2201      	movs	r2, #1
 8006aec:	631a      	str	r2, [r3, #48]	; 0x30
    /* Restore interrupts.  */
    TX_RESTORE
#else

    /* Set the suspending flag. */
    thread_ptr -> tx_thread_suspending =  TX_TRUE;
 8006aee:	69fb      	ldr	r3, [r7, #28]
 8006af0:	2201      	movs	r2, #1
 8006af2:	639a      	str	r2, [r3, #56]	; 0x38

    /* Setup for no timeout period.  */
    thread_ptr -> tx_thread_timer.tx_timer_internal_remaining_ticks =  ((ULONG) 0);
 8006af4:	69fb      	ldr	r3, [r7, #28]
 8006af6:	2200      	movs	r2, #0
 8006af8:	64da      	str	r2, [r3, #76]	; 0x4c

    /* Temporarily disable preemption.  */
    _tx_thread_preempt_disable++;
 8006afa:	4b12      	ldr	r3, [pc, #72]	; (8006b44 <_tx_thread_shell_entry+0x94>)
 8006afc:	681b      	ldr	r3, [r3, #0]
 8006afe:	3301      	adds	r3, #1
 8006b00:	4a10      	ldr	r2, [pc, #64]	; (8006b44 <_tx_thread_shell_entry+0x94>)
 8006b02:	6013      	str	r3, [r2, #0]
 8006b04:	69bb      	ldr	r3, [r7, #24]
 8006b06:	60bb      	str	r3, [r7, #8]
    __asm__ volatile ("MSR  PRIMASK,%0": : "r" (int_posture): "memory");
 8006b08:	68bb      	ldr	r3, [r7, #8]
 8006b0a:	f383 8810 	msr	PRIMASK, r3
}
 8006b0e:	bf00      	nop
    __asm__ volatile (" MRS  %0,CONTROL ": "=r" (control_value) );
 8006b10:	f3ef 8314 	mrs	r3, CONTROL
 8006b14:	60fb      	str	r3, [r7, #12]
    return(control_value);
 8006b16:	68fb      	ldr	r3, [r7, #12]

    /* Restore interrupts.  */
    TX_RESTORE

    /* Perform any additional activities for tool or user purpose.  */
    TX_THREAD_COMPLETED_EXTENSION(thread_ptr)
 8006b18:	617b      	str	r3, [r7, #20]
 8006b1a:	697b      	ldr	r3, [r7, #20]
 8006b1c:	f023 0304 	bic.w	r3, r3, #4
 8006b20:	617b      	str	r3, [r7, #20]
 8006b22:	697b      	ldr	r3, [r7, #20]
 8006b24:	613b      	str	r3, [r7, #16]
    __asm__ volatile (" MSR  CONTROL,%0": : "r" (control_value): "memory" );
 8006b26:	693b      	ldr	r3, [r7, #16]
 8006b28:	f383 8814 	msr	CONTROL, r3
}
 8006b2c:	bf00      	nop
        (entry_exit_notify)(thread_ptr, TX_THREAD_EXIT);
    }
#endif

    /* Call actual thread suspension routine.  */
    _tx_thread_system_suspend(thread_ptr);
 8006b2e:	69f8      	ldr	r0, [r7, #28]
 8006b30:	f000 fa34 	bl	8006f9c <_tx_thread_system_suspend>
#ifdef TX_SAFETY_CRITICAL

    /* If we ever get here, raise safety critical exception.  */
    TX_SAFETY_CRITICAL_EXCEPTION(__FILE__, __LINE__, 0);
#endif
}
 8006b34:	bf00      	nop
 8006b36:	3720      	adds	r7, #32
 8006b38:	46bd      	mov	sp, r7
 8006b3a:	bd80      	pop	{r7, pc}
 8006b3c:	240060d8 	.word	0x240060d8
 8006b40:	24006174 	.word	0x24006174
 8006b44:	24006170 	.word	0x24006170

08006b48 <_tx_thread_sleep>:
/*  09-30-2020     Yuxin Zhou               Modified comment(s),          */
/*                                            resulting in version 6.1    */
/*                                                                        */
/**************************************************************************/
UINT  _tx_thread_sleep(ULONG timer_ticks)
{
 8006b48:	b580      	push	{r7, lr}
 8006b4a:	b08e      	sub	sp, #56	; 0x38
 8006b4c:	af00      	add	r7, sp, #0
 8006b4e:	6078      	str	r0, [r7, #4]
    __asm__ volatile ("MRS  %0, PRIMASK ": "=r" (posture));
 8006b50:	f3ef 8310 	mrs	r3, PRIMASK
 8006b54:	62bb      	str	r3, [r7, #40]	; 0x28
    return(posture);
 8006b56:	6abb      	ldr	r3, [r7, #40]	; 0x28
    int_posture = __get_interrupt_posture();
 8006b58:	627b      	str	r3, [r7, #36]	; 0x24
    __asm__ volatile ("CPSID i" : : : "memory");
 8006b5a:	b672      	cpsid	i
    return(int_posture);
 8006b5c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
UINT            status;
TX_THREAD       *thread_ptr;


    /* Lockout interrupts while the thread is being resumed.  */
    TX_DISABLE
 8006b5e:	633b      	str	r3, [r7, #48]	; 0x30

    /* Pickup thread pointer.  */
    TX_THREAD_GET_CURRENT(thread_ptr)
 8006b60:	4b35      	ldr	r3, [pc, #212]	; (8006c38 <_tx_thread_sleep+0xf0>)
 8006b62:	681b      	ldr	r3, [r3, #0]
 8006b64:	62fb      	str	r3, [r7, #44]	; 0x2c

    /* Determine if this is a legal request.  */

    /* Is there a current thread?  */
    if (thread_ptr == TX_NULL)
 8006b66:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006b68:	2b00      	cmp	r3, #0
 8006b6a:	d108      	bne.n	8006b7e <_tx_thread_sleep+0x36>
 8006b6c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006b6e:	623b      	str	r3, [r7, #32]
    __asm__ volatile ("MSR  PRIMASK,%0": : "r" (int_posture): "memory");
 8006b70:	6a3b      	ldr	r3, [r7, #32]
 8006b72:	f383 8810 	msr	PRIMASK, r3
}
 8006b76:	bf00      	nop

        /* Restore interrupts.  */
        TX_RESTORE

        /* Illegal caller of this service.  */
        status =  TX_CALLER_ERROR;
 8006b78:	2313      	movs	r3, #19
 8006b7a:	637b      	str	r3, [r7, #52]	; 0x34
 8006b7c:	e056      	b.n	8006c2c <_tx_thread_sleep+0xe4>
    __asm__ volatile (" MRS  %0,IPSR ": "=r" (ipsr_value) );
 8006b7e:	f3ef 8305 	mrs	r3, IPSR
 8006b82:	61fb      	str	r3, [r7, #28]
    return(ipsr_value);
 8006b84:	69fa      	ldr	r2, [r7, #28]
    }

    /* Is the caller an ISR or Initialization?  */
    else if (TX_THREAD_GET_SYSTEM_STATE() != ((ULONG) 0))
 8006b86:	4b2d      	ldr	r3, [pc, #180]	; (8006c3c <_tx_thread_sleep+0xf4>)
 8006b88:	681b      	ldr	r3, [r3, #0]
 8006b8a:	4313      	orrs	r3, r2
 8006b8c:	2b00      	cmp	r3, #0
 8006b8e:	d008      	beq.n	8006ba2 <_tx_thread_sleep+0x5a>
 8006b90:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006b92:	61bb      	str	r3, [r7, #24]
    __asm__ volatile ("MSR  PRIMASK,%0": : "r" (int_posture): "memory");
 8006b94:	69bb      	ldr	r3, [r7, #24]
 8006b96:	f383 8810 	msr	PRIMASK, r3
}
 8006b9a:	bf00      	nop

        /* Restore interrupts.  */
        TX_RESTORE

        /* Illegal caller of this service.  */
        status =  TX_CALLER_ERROR;
 8006b9c:	2313      	movs	r3, #19
 8006b9e:	637b      	str	r3, [r7, #52]	; 0x34
 8006ba0:	e044      	b.n	8006c2c <_tx_thread_sleep+0xe4>
    }

#ifndef TX_TIMER_PROCESS_IN_ISR

    /* Is the caller the system timer thread?  */
    else if (thread_ptr == &_tx_timer_thread)
 8006ba2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006ba4:	4a26      	ldr	r2, [pc, #152]	; (8006c40 <_tx_thread_sleep+0xf8>)
 8006ba6:	4293      	cmp	r3, r2
 8006ba8:	d108      	bne.n	8006bbc <_tx_thread_sleep+0x74>
 8006baa:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006bac:	617b      	str	r3, [r7, #20]
    __asm__ volatile ("MSR  PRIMASK,%0": : "r" (int_posture): "memory");
 8006bae:	697b      	ldr	r3, [r7, #20]
 8006bb0:	f383 8810 	msr	PRIMASK, r3
}
 8006bb4:	bf00      	nop

        /* Restore interrupts.  */
        TX_RESTORE

        /* Illegal caller of this service.  */
        status =  TX_CALLER_ERROR;
 8006bb6:	2313      	movs	r3, #19
 8006bb8:	637b      	str	r3, [r7, #52]	; 0x34
 8006bba:	e037      	b.n	8006c2c <_tx_thread_sleep+0xe4>
    }
#endif

    /* Determine if the requested number of ticks is zero.  */
    else if (timer_ticks == ((ULONG) 0))
 8006bbc:	687b      	ldr	r3, [r7, #4]
 8006bbe:	2b00      	cmp	r3, #0
 8006bc0:	d108      	bne.n	8006bd4 <_tx_thread_sleep+0x8c>
 8006bc2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006bc4:	613b      	str	r3, [r7, #16]
    __asm__ volatile ("MSR  PRIMASK,%0": : "r" (int_posture): "memory");
 8006bc6:	693b      	ldr	r3, [r7, #16]
 8006bc8:	f383 8810 	msr	PRIMASK, r3
}
 8006bcc:	bf00      	nop

        /* Restore interrupts.  */
        TX_RESTORE

        /* Just return with a successful status.  */
        status =  TX_SUCCESS;
 8006bce:	2300      	movs	r3, #0
 8006bd0:	637b      	str	r3, [r7, #52]	; 0x34
 8006bd2:	e02b      	b.n	8006c2c <_tx_thread_sleep+0xe4>
    }
    else
    {

        /* Determine if the preempt disable flag is non-zero.  */
        if (_tx_thread_preempt_disable != ((UINT) 0))
 8006bd4:	4b1b      	ldr	r3, [pc, #108]	; (8006c44 <_tx_thread_sleep+0xfc>)
 8006bd6:	681b      	ldr	r3, [r3, #0]
 8006bd8:	2b00      	cmp	r3, #0
 8006bda:	d008      	beq.n	8006bee <_tx_thread_sleep+0xa6>
 8006bdc:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006bde:	60fb      	str	r3, [r7, #12]
    __asm__ volatile ("MSR  PRIMASK,%0": : "r" (int_posture): "memory");
 8006be0:	68fb      	ldr	r3, [r7, #12]
 8006be2:	f383 8810 	msr	PRIMASK, r3
}
 8006be6:	bf00      	nop

            /* Restore interrupts.  */
            TX_RESTORE

            /* Suspension is not allowed if the preempt disable flag is non-zero at this point - return error completion.  */
            status =  TX_CALLER_ERROR;
 8006be8:	2313      	movs	r3, #19
 8006bea:	637b      	str	r3, [r7, #52]	; 0x34
 8006bec:	e01e      	b.n	8006c2c <_tx_thread_sleep+0xe4>
            TX_EL_THREAD_SLEEP_INSERT

            /* Suspend the current thread.  */

            /* Set the state to suspended.  */
            thread_ptr -> tx_thread_state =    TX_SLEEP;
 8006bee:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006bf0:	2204      	movs	r2, #4
 8006bf2:	631a      	str	r2, [r3, #48]	; 0x30
            /* Restore interrupts.  */
            TX_RESTORE
#else

            /* Set the suspending flag. */
            thread_ptr -> tx_thread_suspending =  TX_TRUE;
 8006bf4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006bf6:	2201      	movs	r2, #1
 8006bf8:	639a      	str	r2, [r3, #56]	; 0x38

            /* Initialize the status to successful.  */
            thread_ptr -> tx_thread_suspend_status =  TX_SUCCESS;
 8006bfa:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006bfc:	2200      	movs	r2, #0
 8006bfe:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

            /* Setup the timeout period.  */
            thread_ptr -> tx_thread_timer.tx_timer_internal_remaining_ticks =  timer_ticks;
 8006c02:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006c04:	687a      	ldr	r2, [r7, #4]
 8006c06:	64da      	str	r2, [r3, #76]	; 0x4c

            /* Temporarily disable preemption.  */
            _tx_thread_preempt_disable++;
 8006c08:	4b0e      	ldr	r3, [pc, #56]	; (8006c44 <_tx_thread_sleep+0xfc>)
 8006c0a:	681b      	ldr	r3, [r3, #0]
 8006c0c:	3301      	adds	r3, #1
 8006c0e:	4a0d      	ldr	r2, [pc, #52]	; (8006c44 <_tx_thread_sleep+0xfc>)
 8006c10:	6013      	str	r3, [r2, #0]
 8006c12:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006c14:	60bb      	str	r3, [r7, #8]
    __asm__ volatile ("MSR  PRIMASK,%0": : "r" (int_posture): "memory");
 8006c16:	68bb      	ldr	r3, [r7, #8]
 8006c18:	f383 8810 	msr	PRIMASK, r3
}
 8006c1c:	bf00      	nop

            /* Restore interrupts.  */
            TX_RESTORE

            /* Call actual thread suspension routine.  */
            _tx_thread_system_suspend(thread_ptr);
 8006c1e:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 8006c20:	f000 f9bc 	bl	8006f9c <_tx_thread_system_suspend>
#endif

            /* Return status to the caller.  */
            status =  thread_ptr -> tx_thread_suspend_status;
 8006c24:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006c26:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8006c2a:	637b      	str	r3, [r7, #52]	; 0x34
        }
    }

    /* Return completion status.  */
    return(status);
 8006c2c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
}
 8006c2e:	4618      	mov	r0, r3
 8006c30:	3738      	adds	r7, #56	; 0x38
 8006c32:	46bd      	mov	sp, r7
 8006c34:	bd80      	pop	{r7, pc}
 8006c36:	bf00      	nop
 8006c38:	240060d8 	.word	0x240060d8
 8006c3c:	24000010 	.word	0x24000010
 8006c40:	24006220 	.word	0x24006220
 8006c44:	24006170 	.word	0x24006170

08006c48 <_tx_thread_suspend>:
/*                                            a MISRA compliance issue,   */
/*                                            resulting in version 6.1.1  */
/*                                                                        */
/**************************************************************************/
UINT  _tx_thread_suspend(TX_THREAD *thread_ptr)
{
 8006c48:	b580      	push	{r7, lr}
 8006c4a:	b08a      	sub	sp, #40	; 0x28
 8006c4c:	af00      	add	r7, sp, #0
 8006c4e:	6078      	str	r0, [r7, #4]
    __asm__ volatile ("MRS  %0, PRIMASK ": "=r" (posture));
 8006c50:	f3ef 8310 	mrs	r3, PRIMASK
 8006c54:	61bb      	str	r3, [r7, #24]
    return(posture);
 8006c56:	69bb      	ldr	r3, [r7, #24]
    int_posture = __get_interrupt_posture();
 8006c58:	617b      	str	r3, [r7, #20]
    __asm__ volatile ("CPSID i" : : : "memory");
 8006c5a:	b672      	cpsid	i
    return(int_posture);
 8006c5c:	697b      	ldr	r3, [r7, #20]


#ifndef TX_INLINE_THREAD_RESUME_SUSPEND

    /* Lockout interrupts while the thread is being suspended.  */
    TX_DISABLE
 8006c5e:	623b      	str	r3, [r7, #32]

    /* Pickup thread pointer.  */
    TX_THREAD_GET_CURRENT(current_thread)
 8006c60:	4b2e      	ldr	r3, [pc, #184]	; (8006d1c <_tx_thread_suspend+0xd4>)
 8006c62:	681b      	ldr	r3, [r3, #0]
 8006c64:	61fb      	str	r3, [r7, #28]

    /* Log this kernel call.  */
    TX_EL_THREAD_SUSPEND_INSERT

    /* Check the specified thread's current status.  */
    if (thread_ptr -> tx_thread_state == TX_READY)
 8006c66:	687b      	ldr	r3, [r7, #4]
 8006c68:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006c6a:	2b00      	cmp	r3, #0
 8006c6c:	d130      	bne.n	8006cd0 <_tx_thread_suspend+0x88>
    {

        /* Initialize status to success.  */
        status =  TX_SUCCESS;
 8006c6e:	2300      	movs	r3, #0
 8006c70:	627b      	str	r3, [r7, #36]	; 0x24
    __asm__ volatile (" MRS  %0,IPSR ": "=r" (ipsr_value) );
 8006c72:	f3ef 8305 	mrs	r3, IPSR
 8006c76:	613b      	str	r3, [r7, #16]
    return(ipsr_value);
 8006c78:	693a      	ldr	r2, [r7, #16]

        /* Determine if we are in a thread context.  */
        if (TX_THREAD_GET_SYSTEM_STATE() == ((ULONG) 0))
 8006c7a:	4b29      	ldr	r3, [pc, #164]	; (8006d20 <_tx_thread_suspend+0xd8>)
 8006c7c:	681b      	ldr	r3, [r3, #0]
 8006c7e:	4313      	orrs	r3, r2
 8006c80:	2b00      	cmp	r3, #0
 8006c82:	d109      	bne.n	8006c98 <_tx_thread_suspend+0x50>
        {

            /* Yes, we are in a thread context.  */

            /* Determine if the current thread is also the suspending thread.  */
            if (current_thread == thread_ptr)
 8006c84:	69fa      	ldr	r2, [r7, #28]
 8006c86:	687b      	ldr	r3, [r7, #4]
 8006c88:	429a      	cmp	r2, r3
 8006c8a:	d105      	bne.n	8006c98 <_tx_thread_suspend+0x50>
            {

                /* Now determine if the preempt disable flag is non-zero.  */
                if (_tx_thread_preempt_disable != ((UINT) 0))
 8006c8c:	4b25      	ldr	r3, [pc, #148]	; (8006d24 <_tx_thread_suspend+0xdc>)
 8006c8e:	681b      	ldr	r3, [r3, #0]
 8006c90:	2b00      	cmp	r3, #0
 8006c92:	d001      	beq.n	8006c98 <_tx_thread_suspend+0x50>
                {

                    /* Current thread cannot suspend when the preempt disable flag is non-zero,
                       return an error.  */
                    status =  TX_SUSPEND_ERROR;
 8006c94:	2314      	movs	r3, #20
 8006c96:	627b      	str	r3, [r7, #36]	; 0x24
                }
            }
        }

        /* Determine if the status is still successful.  */
        if (status == TX_SUCCESS)
 8006c98:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006c9a:	2b00      	cmp	r3, #0
 8006c9c:	d132      	bne.n	8006d04 <_tx_thread_suspend+0xbc>
        {

            /* Set the state to suspended.  */
            thread_ptr -> tx_thread_state =    TX_SUSPENDED;
 8006c9e:	687b      	ldr	r3, [r7, #4]
 8006ca0:	2203      	movs	r2, #3
 8006ca2:	631a      	str	r2, [r3, #48]	; 0x30
            /* Restore interrupts.  */
            TX_RESTORE
#else

            /* Set the suspending flag. */
            thread_ptr -> tx_thread_suspending =  TX_TRUE;
 8006ca4:	687b      	ldr	r3, [r7, #4]
 8006ca6:	2201      	movs	r2, #1
 8006ca8:	639a      	str	r2, [r3, #56]	; 0x38

            /* Setup for no timeout period.  */
            thread_ptr -> tx_thread_timer.tx_timer_internal_remaining_ticks =  ((ULONG) 0);
 8006caa:	687b      	ldr	r3, [r7, #4]
 8006cac:	2200      	movs	r2, #0
 8006cae:	64da      	str	r2, [r3, #76]	; 0x4c

            /* Temporarily disable preemption.  */
            _tx_thread_preempt_disable++;
 8006cb0:	4b1c      	ldr	r3, [pc, #112]	; (8006d24 <_tx_thread_suspend+0xdc>)
 8006cb2:	681b      	ldr	r3, [r3, #0]
 8006cb4:	3301      	adds	r3, #1
 8006cb6:	4a1b      	ldr	r2, [pc, #108]	; (8006d24 <_tx_thread_suspend+0xdc>)
 8006cb8:	6013      	str	r3, [r2, #0]
 8006cba:	6a3b      	ldr	r3, [r7, #32]
 8006cbc:	60fb      	str	r3, [r7, #12]
    __asm__ volatile ("MSR  PRIMASK,%0": : "r" (int_posture): "memory");
 8006cbe:	68fb      	ldr	r3, [r7, #12]
 8006cc0:	f383 8810 	msr	PRIMASK, r3
}
 8006cc4:	bf00      	nop

            /* Restore interrupts.  */
            TX_RESTORE

            /* Call actual thread suspension routine.  */
            _tx_thread_system_suspend(thread_ptr);
 8006cc6:	6878      	ldr	r0, [r7, #4]
 8006cc8:	f000 f968 	bl	8006f9c <_tx_thread_system_suspend>
            /* Return success.  */
            status =  TX_SUCCESS;
#else

            /* If MISRA is not enabled, return directly.  */
            return(TX_SUCCESS);
 8006ccc:	2300      	movs	r3, #0
 8006cce:	e020      	b.n	8006d12 <_tx_thread_suspend+0xca>
#endif
        }
    }
    else if (thread_ptr -> tx_thread_state == TX_TERMINATED)
 8006cd0:	687b      	ldr	r3, [r7, #4]
 8006cd2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006cd4:	2b02      	cmp	r3, #2
 8006cd6:	d102      	bne.n	8006cde <_tx_thread_suspend+0x96>
    {

        /* Thread is terminated.  */
        status =  TX_SUSPEND_ERROR;
 8006cd8:	2314      	movs	r3, #20
 8006cda:	627b      	str	r3, [r7, #36]	; 0x24
 8006cdc:	e012      	b.n	8006d04 <_tx_thread_suspend+0xbc>
    }
    else if (thread_ptr -> tx_thread_state == TX_COMPLETED)
 8006cde:	687b      	ldr	r3, [r7, #4]
 8006ce0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006ce2:	2b01      	cmp	r3, #1
 8006ce4:	d102      	bne.n	8006cec <_tx_thread_suspend+0xa4>
    {

        /* Thread is completed.  */
        status =  TX_SUSPEND_ERROR;
 8006ce6:	2314      	movs	r3, #20
 8006ce8:	627b      	str	r3, [r7, #36]	; 0x24
 8006cea:	e00b      	b.n	8006d04 <_tx_thread_suspend+0xbc>
    }
    else if (thread_ptr -> tx_thread_state == TX_SUSPENDED)
 8006cec:	687b      	ldr	r3, [r7, #4]
 8006cee:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006cf0:	2b03      	cmp	r3, #3
 8006cf2:	d102      	bne.n	8006cfa <_tx_thread_suspend+0xb2>
    {

        /* Already suspended, just set status to success.  */
        status =  TX_SUCCESS;
 8006cf4:	2300      	movs	r3, #0
 8006cf6:	627b      	str	r3, [r7, #36]	; 0x24
 8006cf8:	e004      	b.n	8006d04 <_tx_thread_suspend+0xbc>
    }
    else
    {

        /* Just set the delayed suspension flag.  */
        thread_ptr -> tx_thread_delayed_suspend =  TX_TRUE;
 8006cfa:	687b      	ldr	r3, [r7, #4]
 8006cfc:	2201      	movs	r2, #1
 8006cfe:	635a      	str	r2, [r3, #52]	; 0x34

        /* Set status to success.  */
        status =  TX_SUCCESS;
 8006d00:	2300      	movs	r3, #0
 8006d02:	627b      	str	r3, [r7, #36]	; 0x24
 8006d04:	6a3b      	ldr	r3, [r7, #32]
 8006d06:	60bb      	str	r3, [r7, #8]
    __asm__ volatile ("MSR  PRIMASK,%0": : "r" (int_posture): "memory");
 8006d08:	68bb      	ldr	r3, [r7, #8]
 8006d0a:	f383 8810 	msr	PRIMASK, r3
}
 8006d0e:	bf00      	nop
    /* Restore interrupts.  */
    TX_RESTORE

    /* Always return success, since this function does not perform error
       checking.  */
    return(status);
 8006d10:	6a7b      	ldr	r3, [r7, #36]	; 0x24
    TX_RESTORE

    /* Return completion status.  */
    return(status);
#endif
}
 8006d12:	4618      	mov	r0, r3
 8006d14:	3728      	adds	r7, #40	; 0x28
 8006d16:	46bd      	mov	sp, r7
 8006d18:	bd80      	pop	{r7, pc}
 8006d1a:	bf00      	nop
 8006d1c:	240060d8 	.word	0x240060d8
 8006d20:	24000010 	.word	0x24000010
 8006d24:	24006170 	.word	0x24006170

08006d28 <_tx_thread_system_preempt_check>:
/*  09-30-2020     Yuxin Zhou               Modified comment(s),          */
/*                                            resulting in version 6.1    */
/*                                                                        */
/**************************************************************************/
VOID  _tx_thread_system_preempt_check(VOID)
{
 8006d28:	b480      	push	{r7}
 8006d2a:	b089      	sub	sp, #36	; 0x24
 8006d2c:	af00      	add	r7, sp, #0
TX_THREAD       *current_thread;
TX_THREAD       *thread_ptr;


    /* Combine the system state and preempt disable flags into one for comparison.  */
    TX_THREAD_SYSTEM_RETURN_CHECK(combined_flags)
 8006d2e:	4b17      	ldr	r3, [pc, #92]	; (8006d8c <_tx_thread_system_preempt_check+0x64>)
 8006d30:	681b      	ldr	r3, [r3, #0]
 8006d32:	61fb      	str	r3, [r7, #28]

    /* Determine if we are in a system state (ISR or Initialization) or internal preemption is disabled.  */
    if (combined_flags == ((ULONG) 0))
 8006d34:	69fb      	ldr	r3, [r7, #28]
 8006d36:	2b00      	cmp	r3, #0
 8006d38:	d121      	bne.n	8006d7e <_tx_thread_system_preempt_check+0x56>
    {

        /* No, at thread execution level so continue checking for preemption.  */

        /* Pickup thread pointer.  */
        TX_THREAD_GET_CURRENT(current_thread)
 8006d3a:	4b15      	ldr	r3, [pc, #84]	; (8006d90 <_tx_thread_system_preempt_check+0x68>)
 8006d3c:	681b      	ldr	r3, [r3, #0]
 8006d3e:	61bb      	str	r3, [r7, #24]

        /* Pickup the next execute pointer.  */
        thread_ptr =  _tx_thread_execute_ptr;
 8006d40:	4b14      	ldr	r3, [pc, #80]	; (8006d94 <_tx_thread_system_preempt_check+0x6c>)
 8006d42:	681b      	ldr	r3, [r3, #0]
 8006d44:	617b      	str	r3, [r7, #20]

        /* Determine if preemption should take place.  */
        if (current_thread != thread_ptr)
 8006d46:	69ba      	ldr	r2, [r7, #24]
 8006d48:	697b      	ldr	r3, [r7, #20]
 8006d4a:	429a      	cmp	r2, r3
 8006d4c:	d017      	beq.n	8006d7e <_tx_thread_system_preempt_check+0x56>
__attribute__( ( always_inline ) ) static inline void _tx_thread_system_return_inline(void)
{
unsigned int interrupt_save;

    /* Set PendSV to invoke ThreadX scheduler.  */
    *((volatile ULONG *) 0xE000ED04) = ((ULONG) 0x10000000);
 8006d4e:	4b12      	ldr	r3, [pc, #72]	; (8006d98 <_tx_thread_system_preempt_check+0x70>)
 8006d50:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8006d54:	601a      	str	r2, [r3, #0]
    __asm__ volatile (" MRS  %0,IPSR ": "=r" (ipsr_value) );
 8006d56:	f3ef 8305 	mrs	r3, IPSR
 8006d5a:	613b      	str	r3, [r7, #16]
    return(ipsr_value);
 8006d5c:	693b      	ldr	r3, [r7, #16]
    if (__get_ipsr_value() == 0)
 8006d5e:	2b00      	cmp	r3, #0
 8006d60:	d10c      	bne.n	8006d7c <_tx_thread_system_preempt_check+0x54>
    __asm__ volatile ("MRS  %0, PRIMASK ": "=r" (posture));
 8006d62:	f3ef 8310 	mrs	r3, PRIMASK
 8006d66:	60fb      	str	r3, [r7, #12]
    return(posture);
 8006d68:	68fb      	ldr	r3, [r7, #12]
    {
        interrupt_save = __get_interrupt_posture();
 8006d6a:	60bb      	str	r3, [r7, #8]
    __asm__ volatile ("CPSIE  i": : : "memory");
 8006d6c:	b662      	cpsie	i
}
 8006d6e:	bf00      	nop
 8006d70:	68bb      	ldr	r3, [r7, #8]
 8006d72:	607b      	str	r3, [r7, #4]
    __asm__ volatile ("MSR  PRIMASK,%0": : "r" (int_posture): "memory");
 8006d74:	687b      	ldr	r3, [r7, #4]
 8006d76:	f383 8810 	msr	PRIMASK, r3
}
 8006d7a:	bf00      	nop
#else
        __enable_interrupts();
#endif
        __restore_interrupt(interrupt_save);
    }
}
 8006d7c:	bf00      	nop

            /* Return to the system so the higher priority thread can be scheduled.  */
            _tx_thread_system_return();
        }
    }
}
 8006d7e:	bf00      	nop
 8006d80:	3724      	adds	r7, #36	; 0x24
 8006d82:	46bd      	mov	sp, r7
 8006d84:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006d88:	4770      	bx	lr
 8006d8a:	bf00      	nop
 8006d8c:	24006170 	.word	0x24006170
 8006d90:	240060d8 	.word	0x240060d8
 8006d94:	240060dc 	.word	0x240060dc
 8006d98:	e000ed04 	.word	0xe000ed04

08006d9c <_tx_thread_system_resume>:
/*                                            resulting in version 6.1    */
/*                                                                        */
/**************************************************************************/
VOID  _tx_thread_system_resume(TX_THREAD *thread_ptr)
#ifndef TX_NOT_INTERRUPTABLE
{
 8006d9c:	b580      	push	{r7, lr}
 8006d9e:	b096      	sub	sp, #88	; 0x58
 8006da0:	af00      	add	r7, sp, #0
 8006da2:	6078      	str	r0, [r7, #4]
    __asm__ volatile ("MRS  %0, PRIMASK ": "=r" (posture));
 8006da4:	f3ef 8310 	mrs	r3, PRIMASK
 8006da8:	637b      	str	r3, [r7, #52]	; 0x34
    return(posture);
 8006daa:	6b7b      	ldr	r3, [r7, #52]	; 0x34
    int_posture = __get_interrupt_posture();
 8006dac:	633b      	str	r3, [r7, #48]	; 0x30
    __asm__ volatile ("CPSID i" : : : "memory");
 8006dae:	b672      	cpsid	i
    return(int_posture);
 8006db0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
    /* Check this thread's stack.  */
    TX_THREAD_STACK_CHECK(thread_ptr)
#endif

    /* Lockout interrupts while the thread is being resumed.  */
    TX_DISABLE
 8006db2:	657b      	str	r3, [r7, #84]	; 0x54

#ifndef TX_NO_TIMER

    /* Deactivate the timeout timer if necessary.  */
    if (thread_ptr -> tx_thread_timer.tx_timer_internal_list_head != TX_NULL)
 8006db4:	687b      	ldr	r3, [r7, #4]
 8006db6:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8006db8:	2b00      	cmp	r3, #0
 8006dba:	d005      	beq.n	8006dc8 <_tx_thread_system_resume+0x2c>
    {

        /* Deactivate the thread's timeout timer.  */
        _tx_timer_system_deactivate(&(thread_ptr -> tx_thread_timer));
 8006dbc:	687b      	ldr	r3, [r7, #4]
 8006dbe:	334c      	adds	r3, #76	; 0x4c
 8006dc0:	4618      	mov	r0, r3
 8006dc2:	f000 fb91 	bl	80074e8 <_tx_timer_system_deactivate>
 8006dc6:	e002      	b.n	8006dce <_tx_thread_system_resume+0x32>
    }
    else
    {

        /* Clear the remaining time to ensure timer doesn't get activated.  */
        thread_ptr -> tx_thread_timer.tx_timer_internal_remaining_ticks =  ((ULONG) 0);
 8006dc8:	687b      	ldr	r3, [r7, #4]
 8006dca:	2200      	movs	r2, #0
 8006dcc:	64da      	str	r2, [r3, #76]	; 0x4c
        time_stamp =  entry_ptr -> tx_trace_buffer_entry_time_stamp;
    }
#endif

    /* Decrease the preempt disabled count.  */
    _tx_thread_preempt_disable--;
 8006dce:	4b6c      	ldr	r3, [pc, #432]	; (8006f80 <_tx_thread_system_resume+0x1e4>)
 8006dd0:	681b      	ldr	r3, [r3, #0]
 8006dd2:	3b01      	subs	r3, #1
 8006dd4:	4a6a      	ldr	r2, [pc, #424]	; (8006f80 <_tx_thread_system_resume+0x1e4>)
 8006dd6:	6013      	str	r3, [r2, #0]

    /* Determine if the thread is in the process of suspending.  If so, the thread
       control block is already on the linked list so nothing needs to be done.  */
    if (thread_ptr -> tx_thread_suspending == TX_FALSE)
 8006dd8:	687b      	ldr	r3, [r7, #4]
 8006dda:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006ddc:	2b00      	cmp	r3, #0
 8006dde:	f040 8083 	bne.w	8006ee8 <_tx_thread_system_resume+0x14c>
    {

        /* Thread is not in the process of suspending. Now check to make sure the thread
           has not already been resumed.  */
        if (thread_ptr -> tx_thread_state != TX_READY)
 8006de2:	687b      	ldr	r3, [r7, #4]
 8006de4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006de6:	2b00      	cmp	r3, #0
 8006de8:	f000 8097 	beq.w	8006f1a <_tx_thread_system_resume+0x17e>
        {

            /* No, now check to see if the delayed suspension flag is set.  */
            if (thread_ptr -> tx_thread_delayed_suspend == TX_FALSE)
 8006dec:	687b      	ldr	r3, [r7, #4]
 8006dee:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8006df0:	2b00      	cmp	r3, #0
 8006df2:	d172      	bne.n	8006eda <_tx_thread_system_resume+0x13e>
                /* Resume the thread!  */

                /* Make this thread ready.  */

                /* Change the state to ready.  */
                thread_ptr -> tx_thread_state =  TX_READY;
 8006df4:	687b      	ldr	r3, [r7, #4]
 8006df6:	2200      	movs	r2, #0
 8006df8:	631a      	str	r2, [r3, #48]	; 0x30

                /* Pickup priority of thread.  */
                priority =  thread_ptr -> tx_thread_priority;
 8006dfa:	687b      	ldr	r3, [r7, #4]
 8006dfc:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006dfe:	653b      	str	r3, [r7, #80]	; 0x50
                thread_ptr -> tx_thread_performance_resume_count++;
#endif

                /* Determine if there are other threads at this priority that are
                   ready.  */
                head_ptr =  _tx_thread_priority_list[priority];
 8006e00:	4a60      	ldr	r2, [pc, #384]	; (8006f84 <_tx_thread_system_resume+0x1e8>)
 8006e02:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8006e04:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8006e08:	64fb      	str	r3, [r7, #76]	; 0x4c
                if (head_ptr == TX_NULL)
 8006e0a:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8006e0c:	2b00      	cmp	r3, #0
 8006e0e:	d154      	bne.n	8006eba <_tx_thread_system_resume+0x11e>
                {

                    /* First thread at this priority ready.  Add to the front of the list.  */
                    _tx_thread_priority_list[priority] =       thread_ptr;
 8006e10:	495c      	ldr	r1, [pc, #368]	; (8006f84 <_tx_thread_system_resume+0x1e8>)
 8006e12:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8006e14:	687a      	ldr	r2, [r7, #4]
 8006e16:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
                    thread_ptr -> tx_thread_ready_next =       thread_ptr;
 8006e1a:	687b      	ldr	r3, [r7, #4]
 8006e1c:	687a      	ldr	r2, [r7, #4]
 8006e1e:	621a      	str	r2, [r3, #32]
                    thread_ptr -> tx_thread_ready_previous =   thread_ptr;
 8006e20:	687b      	ldr	r3, [r7, #4]
 8006e22:	687a      	ldr	r2, [r7, #4]
 8006e24:	625a      	str	r2, [r3, #36]	; 0x24
                    TX_DIV32_BIT_SET(priority, priority_bit)
                    _tx_thread_priority_map_active =  _tx_thread_priority_map_active | priority_bit;
#endif

                    /* Or in the thread's priority bit.  */
                    TX_MOD32_BIT_SET(priority, priority_bit)
 8006e26:	2201      	movs	r2, #1
 8006e28:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8006e2a:	fa02 f303 	lsl.w	r3, r2, r3
 8006e2e:	647b      	str	r3, [r7, #68]	; 0x44
                    _tx_thread_priority_maps[MAP_INDEX] =  _tx_thread_priority_maps[MAP_INDEX] | priority_bit;
 8006e30:	4b55      	ldr	r3, [pc, #340]	; (8006f88 <_tx_thread_system_resume+0x1ec>)
 8006e32:	681a      	ldr	r2, [r3, #0]
 8006e34:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8006e36:	4313      	orrs	r3, r2
 8006e38:	4a53      	ldr	r2, [pc, #332]	; (8006f88 <_tx_thread_system_resume+0x1ec>)
 8006e3a:	6013      	str	r3, [r2, #0]

                    /* Determine if this newly ready thread is the highest priority.  */
                    if (priority < _tx_thread_highest_priority)
 8006e3c:	4b53      	ldr	r3, [pc, #332]	; (8006f8c <_tx_thread_system_resume+0x1f0>)
 8006e3e:	681b      	ldr	r3, [r3, #0]
 8006e40:	6d3a      	ldr	r2, [r7, #80]	; 0x50
 8006e42:	429a      	cmp	r2, r3
 8006e44:	d269      	bcs.n	8006f1a <_tx_thread_system_resume+0x17e>
                    {

                        /* A new highest priority thread is present. */

                        /* Update the highest priority variable.  */
                        _tx_thread_highest_priority =  priority;
 8006e46:	4a51      	ldr	r2, [pc, #324]	; (8006f8c <_tx_thread_system_resume+0x1f0>)
 8006e48:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8006e4a:	6013      	str	r3, [r2, #0]

                        /* Pickup the execute pointer. Since it is going to be referenced multiple
                           times, it is placed in a local variable.  */
                        execute_ptr =  _tx_thread_execute_ptr;
 8006e4c:	4b50      	ldr	r3, [pc, #320]	; (8006f90 <_tx_thread_system_resume+0x1f4>)
 8006e4e:	681b      	ldr	r3, [r3, #0]
 8006e50:	643b      	str	r3, [r7, #64]	; 0x40

                        /* Determine if no thread is currently executing.  */
                        if (execute_ptr == TX_NULL)
 8006e52:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8006e54:	2b00      	cmp	r3, #0
 8006e56:	d103      	bne.n	8006e60 <_tx_thread_system_resume+0xc4>
                        {

                            /* Simply setup the execute pointer.  */
                            _tx_thread_execute_ptr =  thread_ptr;
 8006e58:	4a4d      	ldr	r2, [pc, #308]	; (8006f90 <_tx_thread_system_resume+0x1f4>)
 8006e5a:	687b      	ldr	r3, [r7, #4]
 8006e5c:	6013      	str	r3, [r2, #0]
 8006e5e:	e05c      	b.n	8006f1a <_tx_thread_system_resume+0x17e>
                        {

                            /* Another thread has been scheduled for execution.  */

                            /* Check to see if this is a higher priority thread and determine if preemption is allowed.  */
                            if (priority < execute_ptr -> tx_thread_preempt_threshold)
 8006e60:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8006e62:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8006e64:	6d3a      	ldr	r2, [r7, #80]	; 0x50
 8006e66:	429a      	cmp	r2, r3
 8006e68:	d257      	bcs.n	8006f1a <_tx_thread_system_resume+0x17e>
                                execute_ptr -> tx_thread_performance_last_preempting_thread =  thread_ptr;

#endif

                                /* Yes, modify the execute thread pointer.  */
                                _tx_thread_execute_ptr =  thread_ptr;
 8006e6a:	4a49      	ldr	r2, [pc, #292]	; (8006f90 <_tx_thread_system_resume+0x1f4>)
 8006e6c:	687b      	ldr	r3, [r7, #4]
 8006e6e:	6013      	str	r3, [r2, #0]
 8006e70:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8006e72:	62fb      	str	r3, [r7, #44]	; 0x2c
    __asm__ volatile ("MSR  PRIMASK,%0": : "r" (int_posture): "memory");
 8006e74:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006e76:	f383 8810 	msr	PRIMASK, r3
}
 8006e7a:	bf00      	nop
                                TX_THREAD_STACK_CHECK(thread_ptr)
#endif

                                /* Now determine if preemption should take place. This is only possible if the current thread pointer is
                                   not the same as the execute thread pointer AND the system state and preempt disable flags are clear.  */
                                TX_THREAD_SYSTEM_RETURN_CHECK(combined_flags)
 8006e7c:	4b40      	ldr	r3, [pc, #256]	; (8006f80 <_tx_thread_system_resume+0x1e4>)
 8006e7e:	681b      	ldr	r3, [r3, #0]
 8006e80:	63fb      	str	r3, [r7, #60]	; 0x3c
                                if (combined_flags == ((ULONG) 0))
 8006e82:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8006e84:	2b00      	cmp	r3, #0
 8006e86:	d174      	bne.n	8006f72 <_tx_thread_system_resume+0x1d6>
    *((volatile ULONG *) 0xE000ED04) = ((ULONG) 0x10000000);
 8006e88:	4b42      	ldr	r3, [pc, #264]	; (8006f94 <_tx_thread_system_resume+0x1f8>)
 8006e8a:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8006e8e:	601a      	str	r2, [r3, #0]
    __asm__ volatile (" MRS  %0,IPSR ": "=r" (ipsr_value) );
 8006e90:	f3ef 8305 	mrs	r3, IPSR
 8006e94:	62bb      	str	r3, [r7, #40]	; 0x28
    return(ipsr_value);
 8006e96:	6abb      	ldr	r3, [r7, #40]	; 0x28
    if (__get_ipsr_value() == 0)
 8006e98:	2b00      	cmp	r3, #0
 8006e9a:	d10c      	bne.n	8006eb6 <_tx_thread_system_resume+0x11a>
    __asm__ volatile ("MRS  %0, PRIMASK ": "=r" (posture));
 8006e9c:	f3ef 8310 	mrs	r3, PRIMASK
 8006ea0:	627b      	str	r3, [r7, #36]	; 0x24
    return(posture);
 8006ea2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
        interrupt_save = __get_interrupt_posture();
 8006ea4:	623b      	str	r3, [r7, #32]
    __asm__ volatile ("CPSIE  i": : : "memory");
 8006ea6:	b662      	cpsie	i
}
 8006ea8:	bf00      	nop
 8006eaa:	6a3b      	ldr	r3, [r7, #32]
 8006eac:	61fb      	str	r3, [r7, #28]
    __asm__ volatile ("MSR  PRIMASK,%0": : "r" (int_posture): "memory");
 8006eae:	69fb      	ldr	r3, [r7, #28]
 8006eb0:	f383 8810 	msr	PRIMASK, r3
}
 8006eb4:	bf00      	nop
}
 8006eb6:	bf00      	nop
                                    /* Preemption is needed - return to the system!  */
                                    _tx_thread_system_return();
                                }

                                /* Return in-line when MISRA is not enabled.  */
                                return;
 8006eb8:	e05b      	b.n	8006f72 <_tx_thread_system_resume+0x1d6>
                {

                    /* No, there are other threads at this priority already ready.  */

                    /* Just add this thread to the priority list.  */
                    tail_ptr =                                 head_ptr -> tx_thread_ready_previous;
 8006eba:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8006ebc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006ebe:	64bb      	str	r3, [r7, #72]	; 0x48
                    tail_ptr -> tx_thread_ready_next =         thread_ptr;
 8006ec0:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8006ec2:	687a      	ldr	r2, [r7, #4]
 8006ec4:	621a      	str	r2, [r3, #32]
                    head_ptr -> tx_thread_ready_previous =     thread_ptr;
 8006ec6:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8006ec8:	687a      	ldr	r2, [r7, #4]
 8006eca:	625a      	str	r2, [r3, #36]	; 0x24
                    thread_ptr -> tx_thread_ready_previous =   tail_ptr;
 8006ecc:	687b      	ldr	r3, [r7, #4]
 8006ece:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8006ed0:	625a      	str	r2, [r3, #36]	; 0x24
                    thread_ptr -> tx_thread_ready_next =       head_ptr;
 8006ed2:	687b      	ldr	r3, [r7, #4]
 8006ed4:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 8006ed6:	621a      	str	r2, [r3, #32]
 8006ed8:	e01f      	b.n	8006f1a <_tx_thread_system_resume+0x17e>
            /* Else, delayed suspend flag was set.  */
            else
            {

                /* Clear the delayed suspend flag and change the state.  */
                thread_ptr -> tx_thread_delayed_suspend =  TX_FALSE;
 8006eda:	687b      	ldr	r3, [r7, #4]
 8006edc:	2200      	movs	r2, #0
 8006ede:	635a      	str	r2, [r3, #52]	; 0x34
                thread_ptr -> tx_thread_state =            TX_SUSPENDED;
 8006ee0:	687b      	ldr	r3, [r7, #4]
 8006ee2:	2203      	movs	r2, #3
 8006ee4:	631a      	str	r2, [r3, #48]	; 0x30
 8006ee6:	e018      	b.n	8006f1a <_tx_thread_system_resume+0x17e>
        /* A resumption occurred in the middle of a previous thread suspension.  */

        /* Make sure the type of suspension under way is not a terminate or
           thread completion.  In either of these cases, do not void the
           interrupted suspension processing.  */
        if (thread_ptr -> tx_thread_state != TX_COMPLETED)
 8006ee8:	687b      	ldr	r3, [r7, #4]
 8006eea:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006eec:	2b01      	cmp	r3, #1
 8006eee:	d014      	beq.n	8006f1a <_tx_thread_system_resume+0x17e>
        {

            /* Make sure the thread isn't terminated.  */
            if (thread_ptr -> tx_thread_state != TX_TERMINATED)
 8006ef0:	687b      	ldr	r3, [r7, #4]
 8006ef2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006ef4:	2b02      	cmp	r3, #2
 8006ef6:	d010      	beq.n	8006f1a <_tx_thread_system_resume+0x17e>
            {

                /* No, now check to see if the delayed suspension flag is set.  */
                if (thread_ptr -> tx_thread_delayed_suspend == TX_FALSE)
 8006ef8:	687b      	ldr	r3, [r7, #4]
 8006efa:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8006efc:	2b00      	cmp	r3, #0
 8006efe:	d106      	bne.n	8006f0e <_tx_thread_system_resume+0x172>
                {

                    /* Clear the suspending flag.  */
                    thread_ptr -> tx_thread_suspending =   TX_FALSE;
 8006f00:	687b      	ldr	r3, [r7, #4]
 8006f02:	2200      	movs	r2, #0
 8006f04:	639a      	str	r2, [r3, #56]	; 0x38

                    /* Restore the state to ready.  */
                    thread_ptr -> tx_thread_state =        TX_READY;
 8006f06:	687b      	ldr	r3, [r7, #4]
 8006f08:	2200      	movs	r2, #0
 8006f0a:	631a      	str	r2, [r3, #48]	; 0x30
 8006f0c:	e005      	b.n	8006f1a <_tx_thread_system_resume+0x17e>
                }
                else
                {

                    /* Clear the delayed suspend flag and change the state.  */
                    thread_ptr -> tx_thread_delayed_suspend =  TX_FALSE;
 8006f0e:	687b      	ldr	r3, [r7, #4]
 8006f10:	2200      	movs	r2, #0
 8006f12:	635a      	str	r2, [r3, #52]	; 0x34
                    thread_ptr -> tx_thread_state =            TX_SUSPENDED;
 8006f14:	687b      	ldr	r3, [r7, #4]
 8006f16:	2203      	movs	r2, #3
 8006f18:	631a      	str	r2, [r3, #48]	; 0x30
        }
    }
#endif

    /* Pickup thread pointer.  */
    TX_THREAD_GET_CURRENT(current_thread)
 8006f1a:	4b1f      	ldr	r3, [pc, #124]	; (8006f98 <_tx_thread_system_resume+0x1fc>)
 8006f1c:	681b      	ldr	r3, [r3, #0]
 8006f1e:	63bb      	str	r3, [r7, #56]	; 0x38
 8006f20:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8006f22:	61bb      	str	r3, [r7, #24]
    __asm__ volatile ("MSR  PRIMASK,%0": : "r" (int_posture): "memory");
 8006f24:	69bb      	ldr	r3, [r7, #24]
 8006f26:	f383 8810 	msr	PRIMASK, r3
}
 8006f2a:	bf00      	nop

    /* Restore interrupts.  */
    TX_RESTORE

    /* Determine if a preemption condition is present.  */
    if (current_thread != _tx_thread_execute_ptr)
 8006f2c:	4b18      	ldr	r3, [pc, #96]	; (8006f90 <_tx_thread_system_resume+0x1f4>)
 8006f2e:	681b      	ldr	r3, [r3, #0]
 8006f30:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8006f32:	429a      	cmp	r2, r3
 8006f34:	d020      	beq.n	8006f78 <_tx_thread_system_resume+0x1dc>
        TX_THREAD_STACK_CHECK(thread_ptr)
#endif

        /* Now determine if preemption should take place. This is only possible if the current thread pointer is
           not the same as the execute thread pointer AND the system state and preempt disable flags are clear.  */
        TX_THREAD_SYSTEM_RETURN_CHECK(combined_flags)
 8006f36:	4b12      	ldr	r3, [pc, #72]	; (8006f80 <_tx_thread_system_resume+0x1e4>)
 8006f38:	681b      	ldr	r3, [r3, #0]
 8006f3a:	63fb      	str	r3, [r7, #60]	; 0x3c
        if (combined_flags == ((ULONG) 0))
 8006f3c:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8006f3e:	2b00      	cmp	r3, #0
 8006f40:	d11a      	bne.n	8006f78 <_tx_thread_system_resume+0x1dc>
    *((volatile ULONG *) 0xE000ED04) = ((ULONG) 0x10000000);
 8006f42:	4b14      	ldr	r3, [pc, #80]	; (8006f94 <_tx_thread_system_resume+0x1f8>)
 8006f44:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8006f48:	601a      	str	r2, [r3, #0]
    __asm__ volatile (" MRS  %0,IPSR ": "=r" (ipsr_value) );
 8006f4a:	f3ef 8305 	mrs	r3, IPSR
 8006f4e:	617b      	str	r3, [r7, #20]
    return(ipsr_value);
 8006f50:	697b      	ldr	r3, [r7, #20]
    if (__get_ipsr_value() == 0)
 8006f52:	2b00      	cmp	r3, #0
 8006f54:	d10f      	bne.n	8006f76 <_tx_thread_system_resume+0x1da>
    __asm__ volatile ("MRS  %0, PRIMASK ": "=r" (posture));
 8006f56:	f3ef 8310 	mrs	r3, PRIMASK
 8006f5a:	613b      	str	r3, [r7, #16]
    return(posture);
 8006f5c:	693b      	ldr	r3, [r7, #16]
        interrupt_save = __get_interrupt_posture();
 8006f5e:	60fb      	str	r3, [r7, #12]
    __asm__ volatile ("CPSIE  i": : : "memory");
 8006f60:	b662      	cpsie	i
}
 8006f62:	bf00      	nop
 8006f64:	68fb      	ldr	r3, [r7, #12]
 8006f66:	60bb      	str	r3, [r7, #8]
    __asm__ volatile ("MSR  PRIMASK,%0": : "r" (int_posture): "memory");
 8006f68:	68bb      	ldr	r3, [r7, #8]
 8006f6a:	f383 8810 	msr	PRIMASK, r3
}
 8006f6e:	bf00      	nop
}
 8006f70:	e001      	b.n	8006f76 <_tx_thread_system_resume+0x1da>
                                return;
 8006f72:	bf00      	nop
 8006f74:	e000      	b.n	8006f78 <_tx_thread_system_resume+0x1dc>
 8006f76:	bf00      	nop

            /* Preemption is needed - return to the system!  */
            _tx_thread_system_return();
        }
    }
}
 8006f78:	3758      	adds	r7, #88	; 0x58
 8006f7a:	46bd      	mov	sp, r7
 8006f7c:	bd80      	pop	{r7, pc}
 8006f7e:	bf00      	nop
 8006f80:	24006170 	.word	0x24006170
 8006f84:	240060f0 	.word	0x240060f0
 8006f88:	240060e8 	.word	0x240060e8
 8006f8c:	240060ec 	.word	0x240060ec
 8006f90:	240060dc 	.word	0x240060dc
 8006f94:	e000ed04 	.word	0xe000ed04
 8006f98:	240060d8 	.word	0x240060d8

08006f9c <_tx_thread_system_suspend>:
/*                                            resulting in version 6.1    */
/*                                                                        */
/**************************************************************************/
VOID  _tx_thread_system_suspend(TX_THREAD *thread_ptr)
#ifndef TX_NOT_INTERRUPTABLE
{
 8006f9c:	b580      	push	{r7, lr}
 8006f9e:	b09e      	sub	sp, #120	; 0x78
 8006fa0:	af00      	add	r7, sp, #0
 8006fa2:	6078      	str	r0, [r7, #4]
TX_TRACE_BUFFER_ENTRY       *entry_ptr;
ULONG                       time_stamp =  ((ULONG) 0);
#endif

    /* Pickup thread pointer.  */
    TX_THREAD_GET_CURRENT(current_thread)
 8006fa4:	4b81      	ldr	r3, [pc, #516]	; (80071ac <_tx_thread_system_suspend+0x210>)
 8006fa6:	681b      	ldr	r3, [r3, #0]
 8006fa8:	677b      	str	r3, [r7, #116]	; 0x74
    __asm__ volatile ("MRS  %0, PRIMASK ": "=r" (posture));
 8006faa:	f3ef 8310 	mrs	r3, PRIMASK
 8006fae:	64fb      	str	r3, [r7, #76]	; 0x4c
    return(posture);
 8006fb0:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
    int_posture = __get_interrupt_posture();
 8006fb2:	64bb      	str	r3, [r7, #72]	; 0x48
    __asm__ volatile ("CPSID i" : : : "memory");
 8006fb4:	b672      	cpsid	i
    return(int_posture);
 8006fb6:	6cbb      	ldr	r3, [r7, #72]	; 0x48
    /* Check this thread's stack.  */
    TX_THREAD_STACK_CHECK(thread_ptr)
#endif

    /* Lockout interrupts while the thread is being suspended.  */
    TX_DISABLE
 8006fb8:	673b      	str	r3, [r7, #112]	; 0x70

#ifndef TX_NO_TIMER

    /* Is the current thread suspending?  */
    if (thread_ptr == current_thread)
 8006fba:	687a      	ldr	r2, [r7, #4]
 8006fbc:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8006fbe:	429a      	cmp	r2, r3
 8006fc0:	d112      	bne.n	8006fe8 <_tx_thread_system_suspend+0x4c>
    {

        /* Pickup the wait option.  */
        timeout =  thread_ptr -> tx_thread_timer.tx_timer_internal_remaining_ticks;
 8006fc2:	687b      	ldr	r3, [r7, #4]
 8006fc4:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8006fc6:	66fb      	str	r3, [r7, #108]	; 0x6c

        /* Determine if an activation is needed.  */
        if (timeout != TX_NO_WAIT)
 8006fc8:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8006fca:	2b00      	cmp	r3, #0
 8006fcc:	d008      	beq.n	8006fe0 <_tx_thread_system_suspend+0x44>
        {

            /* Make sure the suspension is not a wait-forever.  */
            if (timeout != TX_WAIT_FOREVER)
 8006fce:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8006fd0:	f1b3 3fff 	cmp.w	r3, #4294967295
 8006fd4:	d004      	beq.n	8006fe0 <_tx_thread_system_suspend+0x44>
            {

                /* Activate the thread timer with the timeout value setup in the caller.  */
                _tx_timer_system_activate(&(thread_ptr -> tx_thread_timer));
 8006fd6:	687b      	ldr	r3, [r7, #4]
 8006fd8:	334c      	adds	r3, #76	; 0x4c
 8006fda:	4618      	mov	r0, r3
 8006fdc:	f000 fa22 	bl	8007424 <_tx_timer_system_activate>
            }
        }

        /* Yes, reset time slice for current thread.  */
        _tx_timer_time_slice =  thread_ptr -> tx_thread_new_time_slice;
 8006fe0:	687b      	ldr	r3, [r7, #4]
 8006fe2:	69db      	ldr	r3, [r3, #28]
 8006fe4:	4a72      	ldr	r2, [pc, #456]	; (80071b0 <_tx_thread_system_suspend+0x214>)
 8006fe6:	6013      	str	r3, [r2, #0]
    }
#endif

    /* Decrease the preempt disabled count.  */
    _tx_thread_preempt_disable--;
 8006fe8:	4b72      	ldr	r3, [pc, #456]	; (80071b4 <_tx_thread_system_suspend+0x218>)
 8006fea:	681b      	ldr	r3, [r3, #0]
 8006fec:	3b01      	subs	r3, #1
 8006fee:	4a71      	ldr	r2, [pc, #452]	; (80071b4 <_tx_thread_system_suspend+0x218>)
 8006ff0:	6013      	str	r3, [r2, #0]
    _tx_thread_performance_suspend_count++;
#endif

    /* Check to make sure the thread suspending flag is still set.  If not, it
       has already been resumed.  */
    if (thread_ptr -> tx_thread_suspending == TX_TRUE)
 8006ff2:	687b      	ldr	r3, [r7, #4]
 8006ff4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006ff6:	2b01      	cmp	r3, #1
 8006ff8:	f040 80a6 	bne.w	8007148 <_tx_thread_system_suspend+0x1ac>
            time_stamp =  entry_ptr -> tx_trace_buffer_entry_time_stamp;
        }
#endif

        /* Actually suspend this thread.  But first, clear the suspending flag.  */
        thread_ptr -> tx_thread_suspending =  TX_FALSE;
 8006ffc:	687b      	ldr	r3, [r7, #4]
 8006ffe:	2200      	movs	r2, #0
 8007000:	639a      	str	r2, [r3, #56]	; 0x38

        /* Pickup priority of thread.  */
        priority =  thread_ptr -> tx_thread_priority;
 8007002:	687b      	ldr	r3, [r7, #4]
 8007004:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007006:	66bb      	str	r3, [r7, #104]	; 0x68

        /* Pickup the next ready thread pointer.  */
        ready_next =      thread_ptr -> tx_thread_ready_next;
 8007008:	687b      	ldr	r3, [r7, #4]
 800700a:	6a1b      	ldr	r3, [r3, #32]
 800700c:	667b      	str	r3, [r7, #100]	; 0x64

        /* Determine if there are other threads at this priority that are
           ready.  */
        if (ready_next != thread_ptr)
 800700e:	6e7a      	ldr	r2, [r7, #100]	; 0x64
 8007010:	687b      	ldr	r3, [r7, #4]
 8007012:	429a      	cmp	r2, r3
 8007014:	d015      	beq.n	8007042 <_tx_thread_system_suspend+0xa6>
        {

            /* Yes, there are other threads at this priority ready.  */

            /* Pickup the previous ready thread pointer.  */
            ready_previous =  thread_ptr -> tx_thread_ready_previous;
 8007016:	687b      	ldr	r3, [r7, #4]
 8007018:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800701a:	653b      	str	r3, [r7, #80]	; 0x50

            /* Just remove this thread from the priority list.  */
            ready_next -> tx_thread_ready_previous =    ready_previous;
 800701c:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 800701e:	6d3a      	ldr	r2, [r7, #80]	; 0x50
 8007020:	625a      	str	r2, [r3, #36]	; 0x24
            ready_previous -> tx_thread_ready_next =    ready_next;
 8007022:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8007024:	6e7a      	ldr	r2, [r7, #100]	; 0x64
 8007026:	621a      	str	r2, [r3, #32]

            /* Determine if this is the head of the priority list.  */
            if (_tx_thread_priority_list[priority] == thread_ptr)
 8007028:	4a63      	ldr	r2, [pc, #396]	; (80071b8 <_tx_thread_system_suspend+0x21c>)
 800702a:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 800702c:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8007030:	687a      	ldr	r2, [r7, #4]
 8007032:	429a      	cmp	r2, r3
 8007034:	d157      	bne.n	80070e6 <_tx_thread_system_suspend+0x14a>
            {

                /* Update the head pointer of this priority list.  */
                _tx_thread_priority_list[priority] =  ready_next;
 8007036:	4960      	ldr	r1, [pc, #384]	; (80071b8 <_tx_thread_system_suspend+0x21c>)
 8007038:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 800703a:	6e7a      	ldr	r2, [r7, #100]	; 0x64
 800703c:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
 8007040:	e051      	b.n	80070e6 <_tx_thread_system_suspend+0x14a>
        else
        {

            /* This is the only thread at this priority ready to run.  Set the head
               pointer to NULL.  */
            _tx_thread_priority_list[priority] =    TX_NULL;
 8007042:	4a5d      	ldr	r2, [pc, #372]	; (80071b8 <_tx_thread_system_suspend+0x21c>)
 8007044:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8007046:	2100      	movs	r1, #0
 8007048:	f842 1023 	str.w	r1, [r2, r3, lsl #2]
            /* Calculate the index into the bit map array.  */
            map_index =  priority/((UINT) 32);
#endif

            /* Clear this priority bit in the ready priority bit map.  */
            TX_MOD32_BIT_SET(priority, priority_bit)
 800704c:	2201      	movs	r2, #1
 800704e:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8007050:	fa02 f303 	lsl.w	r3, r2, r3
 8007054:	663b      	str	r3, [r7, #96]	; 0x60
            _tx_thread_priority_maps[MAP_INDEX] =  _tx_thread_priority_maps[MAP_INDEX] & (~(priority_bit));
 8007056:	4b59      	ldr	r3, [pc, #356]	; (80071bc <_tx_thread_system_suspend+0x220>)
 8007058:	681a      	ldr	r2, [r3, #0]
 800705a:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 800705c:	43db      	mvns	r3, r3
 800705e:	4013      	ands	r3, r2
 8007060:	4a56      	ldr	r2, [pc, #344]	; (80071bc <_tx_thread_system_suspend+0x220>)
 8007062:	6013      	str	r3, [r2, #0]
            /* Calculate the base priority as well.  */
            base_priority =  map_index * ((UINT) 32);
#else

            /* Setup the base priority to zero.  */
            base_priority =   ((UINT) 0);
 8007064:	2300      	movs	r3, #0
 8007066:	65fb      	str	r3, [r7, #92]	; 0x5c
#endif

            /* Setup working variable for the priority map.  */
            priority_map =    _tx_thread_priority_maps[MAP_INDEX];
 8007068:	4b54      	ldr	r3, [pc, #336]	; (80071bc <_tx_thread_system_suspend+0x220>)
 800706a:	681b      	ldr	r3, [r3, #0]
 800706c:	65bb      	str	r3, [r7, #88]	; 0x58

            /* Make a quick check for no other threads ready for execution.  */
            if (priority_map == ((ULONG) 0))
 800706e:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8007070:	2b00      	cmp	r3, #0
 8007072:	d12b      	bne.n	80070cc <_tx_thread_system_suspend+0x130>
            {

                /* Nothing else is ready.  Set highest priority and execute thread
                   accordingly.  */
                _tx_thread_highest_priority =  ((UINT) TX_MAX_PRIORITIES);
 8007074:	4b52      	ldr	r3, [pc, #328]	; (80071c0 <_tx_thread_system_suspend+0x224>)
 8007076:	2220      	movs	r2, #32
 8007078:	601a      	str	r2, [r3, #0]
                _tx_thread_execute_ptr =       TX_NULL;
 800707a:	4b52      	ldr	r3, [pc, #328]	; (80071c4 <_tx_thread_system_suspend+0x228>)
 800707c:	2200      	movs	r2, #0
 800707e:	601a      	str	r2, [r3, #0]
 8007080:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8007082:	647b      	str	r3, [r7, #68]	; 0x44
    __asm__ volatile ("MSR  PRIMASK,%0": : "r" (int_posture): "memory");
 8007084:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8007086:	f383 8810 	msr	PRIMASK, r3
}
 800708a:	bf00      	nop
                /* Restore interrupts.  */
                TX_RESTORE

                /* Determine if preemption should take place. This is only possible if the current thread pointer is
                   not the same as the execute thread pointer AND the system state and preempt disable flags are clear.  */
                TX_THREAD_SYSTEM_RETURN_CHECK(combined_flags)
 800708c:	4b49      	ldr	r3, [pc, #292]	; (80071b4 <_tx_thread_system_suspend+0x218>)
 800708e:	681b      	ldr	r3, [r3, #0]
 8007090:	657b      	str	r3, [r7, #84]	; 0x54
                if (combined_flags == ((ULONG) 0))
 8007092:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8007094:	2b00      	cmp	r3, #0
 8007096:	f040 8081 	bne.w	800719c <_tx_thread_system_suspend+0x200>
    *((volatile ULONG *) 0xE000ED04) = ((ULONG) 0x10000000);
 800709a:	4b4b      	ldr	r3, [pc, #300]	; (80071c8 <_tx_thread_system_suspend+0x22c>)
 800709c:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80070a0:	601a      	str	r2, [r3, #0]
    __asm__ volatile (" MRS  %0,IPSR ": "=r" (ipsr_value) );
 80070a2:	f3ef 8305 	mrs	r3, IPSR
 80070a6:	643b      	str	r3, [r7, #64]	; 0x40
    return(ipsr_value);
 80070a8:	6c3b      	ldr	r3, [r7, #64]	; 0x40
    if (__get_ipsr_value() == 0)
 80070aa:	2b00      	cmp	r3, #0
 80070ac:	d10c      	bne.n	80070c8 <_tx_thread_system_suspend+0x12c>
    __asm__ volatile ("MRS  %0, PRIMASK ": "=r" (posture));
 80070ae:	f3ef 8310 	mrs	r3, PRIMASK
 80070b2:	63fb      	str	r3, [r7, #60]	; 0x3c
    return(posture);
 80070b4:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
        interrupt_save = __get_interrupt_posture();
 80070b6:	63bb      	str	r3, [r7, #56]	; 0x38
    __asm__ volatile ("CPSIE  i": : : "memory");
 80070b8:	b662      	cpsie	i
}
 80070ba:	bf00      	nop
 80070bc:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80070be:	637b      	str	r3, [r7, #52]	; 0x34
    __asm__ volatile ("MSR  PRIMASK,%0": : "r" (int_posture): "memory");
 80070c0:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80070c2:	f383 8810 	msr	PRIMASK, r3
}
 80070c6:	bf00      	nop
}
 80070c8:	bf00      	nop
                    /* Preemption is needed - return to the system!  */
                    _tx_thread_system_return();
                }

                /* Return to caller.  */
                return;
 80070ca:	e067      	b.n	800719c <_tx_thread_system_suspend+0x200>
            {

                /* Other threads at different priority levels are ready to run.  */

                /* Calculate the lowest bit set in the priority map. */
                TX_LOWEST_SET_BIT_CALCULATE(priority_map, priority_bit)
 80070cc:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 80070ce:	fa93 f3a3 	rbit	r3, r3
 80070d2:	65bb      	str	r3, [r7, #88]	; 0x58
 80070d4:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 80070d6:	fab3 f383 	clz	r3, r3
 80070da:	663b      	str	r3, [r7, #96]	; 0x60

                /* Setup the next highest priority variable.  */
                _tx_thread_highest_priority =  base_priority + ((UINT) priority_bit);
 80070dc:	6dfa      	ldr	r2, [r7, #92]	; 0x5c
 80070de:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 80070e0:	4413      	add	r3, r2
 80070e2:	4a37      	ldr	r2, [pc, #220]	; (80071c0 <_tx_thread_system_suspend+0x224>)
 80070e4:	6013      	str	r3, [r2, #0]
            }
        }

        /* Determine if the suspending thread is the thread designated to execute.  */
        if (thread_ptr == _tx_thread_execute_ptr)
 80070e6:	4b37      	ldr	r3, [pc, #220]	; (80071c4 <_tx_thread_system_suspend+0x228>)
 80070e8:	681b      	ldr	r3, [r3, #0]
 80070ea:	687a      	ldr	r2, [r7, #4]
 80070ec:	429a      	cmp	r2, r3
 80070ee:	d12b      	bne.n	8007148 <_tx_thread_system_suspend+0x1ac>
        {

            /* Pickup the highest priority thread to execute.  */
            _tx_thread_execute_ptr =  _tx_thread_priority_list[_tx_thread_highest_priority];
 80070f0:	4b33      	ldr	r3, [pc, #204]	; (80071c0 <_tx_thread_system_suspend+0x224>)
 80070f2:	681b      	ldr	r3, [r3, #0]
 80070f4:	4a30      	ldr	r2, [pc, #192]	; (80071b8 <_tx_thread_system_suspend+0x21c>)
 80070f6:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80070fa:	4a32      	ldr	r2, [pc, #200]	; (80071c4 <_tx_thread_system_suspend+0x228>)
 80070fc:	6013      	str	r3, [r2, #0]
 80070fe:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8007100:	633b      	str	r3, [r7, #48]	; 0x30
    __asm__ volatile ("MSR  PRIMASK,%0": : "r" (int_posture): "memory");
 8007102:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007104:	f383 8810 	msr	PRIMASK, r3
}
 8007108:	bf00      	nop
            /* Restore interrupts.  */
            TX_RESTORE

            /* Determine if preemption should take place. This is only possible if the current thread pointer is
               not the same as the execute thread pointer AND the system state and preempt disable flags are clear.  */
            TX_THREAD_SYSTEM_RETURN_CHECK(combined_flags)
 800710a:	4b2a      	ldr	r3, [pc, #168]	; (80071b4 <_tx_thread_system_suspend+0x218>)
 800710c:	681b      	ldr	r3, [r3, #0]
 800710e:	657b      	str	r3, [r7, #84]	; 0x54
            if (combined_flags == ((ULONG) 0))
 8007110:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8007112:	2b00      	cmp	r3, #0
 8007114:	d144      	bne.n	80071a0 <_tx_thread_system_suspend+0x204>
    *((volatile ULONG *) 0xE000ED04) = ((ULONG) 0x10000000);
 8007116:	4b2c      	ldr	r3, [pc, #176]	; (80071c8 <_tx_thread_system_suspend+0x22c>)
 8007118:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800711c:	601a      	str	r2, [r3, #0]
    __asm__ volatile (" MRS  %0,IPSR ": "=r" (ipsr_value) );
 800711e:	f3ef 8305 	mrs	r3, IPSR
 8007122:	62fb      	str	r3, [r7, #44]	; 0x2c
    return(ipsr_value);
 8007124:	6afb      	ldr	r3, [r7, #44]	; 0x2c
    if (__get_ipsr_value() == 0)
 8007126:	2b00      	cmp	r3, #0
 8007128:	d10c      	bne.n	8007144 <_tx_thread_system_suspend+0x1a8>
    __asm__ volatile ("MRS  %0, PRIMASK ": "=r" (posture));
 800712a:	f3ef 8310 	mrs	r3, PRIMASK
 800712e:	62bb      	str	r3, [r7, #40]	; 0x28
    return(posture);
 8007130:	6abb      	ldr	r3, [r7, #40]	; 0x28
        interrupt_save = __get_interrupt_posture();
 8007132:	627b      	str	r3, [r7, #36]	; 0x24
    __asm__ volatile ("CPSIE  i": : : "memory");
 8007134:	b662      	cpsie	i
}
 8007136:	bf00      	nop
 8007138:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800713a:	623b      	str	r3, [r7, #32]
    __asm__ volatile ("MSR  PRIMASK,%0": : "r" (int_posture): "memory");
 800713c:	6a3b      	ldr	r3, [r7, #32]
 800713e:	f383 8810 	msr	PRIMASK, r3
}
 8007142:	bf00      	nop
}
 8007144:	bf00      	nop
                /* Preemption is needed - return to the system!  */
                _tx_thread_system_return();
            }

            /* Return to caller.  */
            return;
 8007146:	e02b      	b.n	80071a0 <_tx_thread_system_suspend+0x204>
 8007148:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 800714a:	61fb      	str	r3, [r7, #28]
    __asm__ volatile ("MSR  PRIMASK,%0": : "r" (int_posture): "memory");
 800714c:	69fb      	ldr	r3, [r7, #28]
 800714e:	f383 8810 	msr	PRIMASK, r3
}
 8007152:	bf00      	nop

    /* Restore interrupts.  */
    TX_RESTORE

    /* Determine if a preemption condition is present.  */
    if (current_thread != _tx_thread_execute_ptr)
 8007154:	4b1b      	ldr	r3, [pc, #108]	; (80071c4 <_tx_thread_system_suspend+0x228>)
 8007156:	681b      	ldr	r3, [r3, #0]
 8007158:	6f7a      	ldr	r2, [r7, #116]	; 0x74
 800715a:	429a      	cmp	r2, r3
 800715c:	d022      	beq.n	80071a4 <_tx_thread_system_suspend+0x208>
        TX_THREAD_STACK_CHECK(thread_ptr)
#endif

        /* Determine if preemption should take place. This is only possible if the current thread pointer is
           not the same as the execute thread pointer AND the system state and preempt disable flags are clear.  */
        TX_THREAD_SYSTEM_RETURN_CHECK(combined_flags)
 800715e:	4b15      	ldr	r3, [pc, #84]	; (80071b4 <_tx_thread_system_suspend+0x218>)
 8007160:	681b      	ldr	r3, [r3, #0]
 8007162:	657b      	str	r3, [r7, #84]	; 0x54
        if (combined_flags == ((ULONG) 0))
 8007164:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8007166:	2b00      	cmp	r3, #0
 8007168:	d11c      	bne.n	80071a4 <_tx_thread_system_suspend+0x208>
    *((volatile ULONG *) 0xE000ED04) = ((ULONG) 0x10000000);
 800716a:	4b17      	ldr	r3, [pc, #92]	; (80071c8 <_tx_thread_system_suspend+0x22c>)
 800716c:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8007170:	601a      	str	r2, [r3, #0]
    __asm__ volatile (" MRS  %0,IPSR ": "=r" (ipsr_value) );
 8007172:	f3ef 8305 	mrs	r3, IPSR
 8007176:	61bb      	str	r3, [r7, #24]
    return(ipsr_value);
 8007178:	69bb      	ldr	r3, [r7, #24]
    if (__get_ipsr_value() == 0)
 800717a:	2b00      	cmp	r3, #0
 800717c:	d10c      	bne.n	8007198 <_tx_thread_system_suspend+0x1fc>
    __asm__ volatile ("MRS  %0, PRIMASK ": "=r" (posture));
 800717e:	f3ef 8310 	mrs	r3, PRIMASK
 8007182:	617b      	str	r3, [r7, #20]
    return(posture);
 8007184:	697b      	ldr	r3, [r7, #20]
        interrupt_save = __get_interrupt_posture();
 8007186:	613b      	str	r3, [r7, #16]
    __asm__ volatile ("CPSIE  i": : : "memory");
 8007188:	b662      	cpsie	i
}
 800718a:	bf00      	nop
 800718c:	693b      	ldr	r3, [r7, #16]
 800718e:	60fb      	str	r3, [r7, #12]
    __asm__ volatile ("MSR  PRIMASK,%0": : "r" (int_posture): "memory");
 8007190:	68fb      	ldr	r3, [r7, #12]
 8007192:	f383 8810 	msr	PRIMASK, r3
}
 8007196:	bf00      	nop
}
 8007198:	bf00      	nop
            _tx_thread_system_return();
        }
    }

    /* Return to caller.  */
    return;
 800719a:	e003      	b.n	80071a4 <_tx_thread_system_suspend+0x208>
                return;
 800719c:	bf00      	nop
 800719e:	e002      	b.n	80071a6 <_tx_thread_system_suspend+0x20a>
            return;
 80071a0:	bf00      	nop
 80071a2:	e000      	b.n	80071a6 <_tx_thread_system_suspend+0x20a>
    return;
 80071a4:	bf00      	nop
}
 80071a6:	3778      	adds	r7, #120	; 0x78
 80071a8:	46bd      	mov	sp, r7
 80071aa:	bd80      	pop	{r7, pc}
 80071ac:	240060d8 	.word	0x240060d8
 80071b0:	240066dc 	.word	0x240066dc
 80071b4:	24006170 	.word	0x24006170
 80071b8:	240060f0 	.word	0x240060f0
 80071bc:	240060e8 	.word	0x240060e8
 80071c0:	240060ec 	.word	0x240060ec
 80071c4:	240060dc 	.word	0x240060dc
 80071c8:	e000ed04 	.word	0xe000ed04

080071cc <_tx_thread_time_slice>:
/*                                            TX_NO_TIMER is defined,     */
/*                                            resulting in version 6.1    */
/*                                                                        */
/**************************************************************************/
VOID  _tx_thread_time_slice(VOID)
{
 80071cc:	b480      	push	{r7}
 80071ce:	b087      	sub	sp, #28
 80071d0:	af00      	add	r7, sp, #0
ULONG           system_state;
UINT            preempt_disable;
#endif

    /* Pickup thread pointer.  */
    TX_THREAD_GET_CURRENT(thread_ptr)
 80071d2:	4b21      	ldr	r3, [pc, #132]	; (8007258 <_tx_thread_time_slice+0x8c>)
 80071d4:	681b      	ldr	r3, [r3, #0]
 80071d6:	617b      	str	r3, [r7, #20]
    __asm__ volatile ("MRS  %0, PRIMASK ": "=r" (posture));
 80071d8:	f3ef 8310 	mrs	r3, PRIMASK
 80071dc:	60fb      	str	r3, [r7, #12]
    return(posture);
 80071de:	68fb      	ldr	r3, [r7, #12]
    int_posture = __get_interrupt_posture();
 80071e0:	60bb      	str	r3, [r7, #8]
    __asm__ volatile ("CPSID i" : : : "memory");
 80071e2:	b672      	cpsid	i
    return(int_posture);
 80071e4:	68bb      	ldr	r3, [r7, #8]
    /* Set the next thread pointer to NULL.  */
    next_thread_ptr =  TX_NULL;
#endif

    /* Lockout interrupts while the time-slice is evaluated.  */
    TX_DISABLE
 80071e6:	613b      	str	r3, [r7, #16]

    /* Clear the expired time-slice flag.  */
    _tx_timer_expired_time_slice =  TX_FALSE;
 80071e8:	4b1c      	ldr	r3, [pc, #112]	; (800725c <_tx_thread_time_slice+0x90>)
 80071ea:	2200      	movs	r2, #0
 80071ec:	601a      	str	r2, [r3, #0]

    /* Make sure the thread pointer is valid.  */
    if (thread_ptr != TX_NULL)
 80071ee:	697b      	ldr	r3, [r7, #20]
 80071f0:	2b00      	cmp	r3, #0
 80071f2:	d024      	beq.n	800723e <_tx_thread_time_slice+0x72>
    {

        /* Make sure the thread is still active, i.e. not suspended.  */
        if (thread_ptr -> tx_thread_state == TX_READY)
 80071f4:	697b      	ldr	r3, [r7, #20]
 80071f6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80071f8:	2b00      	cmp	r3, #0
 80071fa:	d120      	bne.n	800723e <_tx_thread_time_slice+0x72>
        {

            /* Setup a fresh time-slice for the thread.  */
            thread_ptr -> tx_thread_time_slice =  thread_ptr -> tx_thread_new_time_slice;
 80071fc:	697b      	ldr	r3, [r7, #20]
 80071fe:	69da      	ldr	r2, [r3, #28]
 8007200:	697b      	ldr	r3, [r7, #20]
 8007202:	619a      	str	r2, [r3, #24]

            /* Reset the actual time-slice variable.  */
            _tx_timer_time_slice =  thread_ptr -> tx_thread_time_slice;
 8007204:	697b      	ldr	r3, [r7, #20]
 8007206:	699b      	ldr	r3, [r3, #24]
 8007208:	4a15      	ldr	r2, [pc, #84]	; (8007260 <_tx_thread_time_slice+0x94>)
 800720a:	6013      	str	r3, [r2, #0]

            /* Determine if there is another thread at the same priority and preemption-threshold
               is not set.  Preemption-threshold overrides time-slicing.  */
            if (thread_ptr -> tx_thread_ready_next != thread_ptr)
 800720c:	697b      	ldr	r3, [r7, #20]
 800720e:	6a1b      	ldr	r3, [r3, #32]
 8007210:	697a      	ldr	r2, [r7, #20]
 8007212:	429a      	cmp	r2, r3
 8007214:	d013      	beq.n	800723e <_tx_thread_time_slice+0x72>
            {

                /* Check to see if preemption-threshold is not being used.  */
                if (thread_ptr -> tx_thread_priority == thread_ptr -> tx_thread_preempt_threshold)
 8007216:	697b      	ldr	r3, [r7, #20]
 8007218:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800721a:	697b      	ldr	r3, [r7, #20]
 800721c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800721e:	429a      	cmp	r2, r3
 8007220:	d10d      	bne.n	800723e <_tx_thread_time_slice+0x72>

                    /* Preemption-threshold is not being used by this thread.  */

                    /* There is another thread at this priority, make it the highest at
                       this priority level.  */
                    _tx_thread_priority_list[thread_ptr -> tx_thread_priority] =  thread_ptr -> tx_thread_ready_next;
 8007222:	697b      	ldr	r3, [r7, #20]
 8007224:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007226:	697a      	ldr	r2, [r7, #20]
 8007228:	6a12      	ldr	r2, [r2, #32]
 800722a:	490e      	ldr	r1, [pc, #56]	; (8007264 <_tx_thread_time_slice+0x98>)
 800722c:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

                    /* Designate the highest priority thread as the one to execute.  Don't use this
                       thread's priority as an index just in case a higher priority thread is now
                       ready!  */
                    _tx_thread_execute_ptr =  _tx_thread_priority_list[_tx_thread_highest_priority];
 8007230:	4b0d      	ldr	r3, [pc, #52]	; (8007268 <_tx_thread_time_slice+0x9c>)
 8007232:	681b      	ldr	r3, [r3, #0]
 8007234:	4a0b      	ldr	r2, [pc, #44]	; (8007264 <_tx_thread_time_slice+0x98>)
 8007236:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800723a:	4a0c      	ldr	r2, [pc, #48]	; (800726c <_tx_thread_time_slice+0xa0>)
 800723c:	6013      	str	r3, [r2, #0]
 800723e:	693b      	ldr	r3, [r7, #16]
 8007240:	607b      	str	r3, [r7, #4]
    __asm__ volatile ("MSR  PRIMASK,%0": : "r" (int_posture): "memory");
 8007242:	687b      	ldr	r3, [r7, #4]
 8007244:	f383 8810 	msr	PRIMASK, r3
}
 8007248:	bf00      	nop

        /* Yes, check this thread's stack.  */
        TX_THREAD_STACK_CHECK(next_thread_ptr)
    }
#endif
}
 800724a:	bf00      	nop
 800724c:	371c      	adds	r7, #28
 800724e:	46bd      	mov	sp, r7
 8007250:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007254:	4770      	bx	lr
 8007256:	bf00      	nop
 8007258:	240060d8 	.word	0x240060d8
 800725c:	24006180 	.word	0x24006180
 8007260:	240066dc 	.word	0x240066dc
 8007264:	240060f0 	.word	0x240060f0
 8007268:	240060ec 	.word	0x240060ec
 800726c:	240060dc 	.word	0x240060dc

08007270 <_tx_thread_timeout>:
/*  09-30-2020     Yuxin Zhou               Modified comment(s),          */
/*                                            resulting in version 6.1    */
/*                                                                        */
/**************************************************************************/
VOID  _tx_thread_timeout(ULONG timeout_input)
{
 8007270:	b580      	push	{r7, lr}
 8007272:	b08a      	sub	sp, #40	; 0x28
 8007274:	af00      	add	r7, sp, #0
 8007276:	6078      	str	r0, [r7, #4]
VOID            (*suspend_cleanup)(struct TX_THREAD_STRUCT *suspend_thread_ptr, ULONG suspension_sequence);
ULONG           suspension_sequence;


    /* Pickup the thread pointer.  */
    TX_THREAD_TIMEOUT_POINTER_SETUP(thread_ptr)
 8007278:	687b      	ldr	r3, [r7, #4]
 800727a:	627b      	str	r3, [r7, #36]	; 0x24
    __asm__ volatile ("MRS  %0, PRIMASK ": "=r" (posture));
 800727c:	f3ef 8310 	mrs	r3, PRIMASK
 8007280:	617b      	str	r3, [r7, #20]
    return(posture);
 8007282:	697b      	ldr	r3, [r7, #20]
    int_posture = __get_interrupt_posture();
 8007284:	613b      	str	r3, [r7, #16]
    __asm__ volatile ("CPSID i" : : : "memory");
 8007286:	b672      	cpsid	i
    return(int_posture);
 8007288:	693b      	ldr	r3, [r7, #16]

    /* Disable interrupts.  */
    TX_DISABLE
 800728a:	623b      	str	r3, [r7, #32]

    /* Determine how the thread is currently suspended.  */
    if (thread_ptr -> tx_thread_state == TX_SLEEP)
 800728c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800728e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8007290:	2b04      	cmp	r3, #4
 8007292:	d10e      	bne.n	80072b2 <_tx_thread_timeout+0x42>
        /* Restore interrupts.  */
        TX_RESTORE
#else

        /* Increment the disable preemption flag.  */
        _tx_thread_preempt_disable++;
 8007294:	4b13      	ldr	r3, [pc, #76]	; (80072e4 <_tx_thread_timeout+0x74>)
 8007296:	681b      	ldr	r3, [r3, #0]
 8007298:	3301      	adds	r3, #1
 800729a:	4a12      	ldr	r2, [pc, #72]	; (80072e4 <_tx_thread_timeout+0x74>)
 800729c:	6013      	str	r3, [r2, #0]
 800729e:	6a3b      	ldr	r3, [r7, #32]
 80072a0:	60fb      	str	r3, [r7, #12]
    __asm__ volatile ("MSR  PRIMASK,%0": : "r" (int_posture): "memory");
 80072a2:	68fb      	ldr	r3, [r7, #12]
 80072a4:	f383 8810 	msr	PRIMASK, r3
}
 80072a8:	bf00      	nop

        /* Restore interrupts.  */
        TX_RESTORE

        /* Lift the suspension on the sleeping thread.  */
        _tx_thread_system_resume(thread_ptr);
 80072aa:	6a78      	ldr	r0, [r7, #36]	; 0x24
 80072ac:	f7ff fd76 	bl	8006d9c <_tx_thread_system_resume>

        /* Restore interrupts.  */
        TX_RESTORE
#endif
    }
}
 80072b0:	e013      	b.n	80072da <_tx_thread_timeout+0x6a>
        suspend_cleanup =  thread_ptr -> tx_thread_suspend_cleanup;
 80072b2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80072b4:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 80072b6:	61fb      	str	r3, [r7, #28]
        suspension_sequence =  thread_ptr -> tx_thread_suspension_sequence;
 80072b8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80072ba:	f8d3 30ac 	ldr.w	r3, [r3, #172]	; 0xac
 80072be:	61bb      	str	r3, [r7, #24]
 80072c0:	6a3b      	ldr	r3, [r7, #32]
 80072c2:	60bb      	str	r3, [r7, #8]
    __asm__ volatile ("MSR  PRIMASK,%0": : "r" (int_posture): "memory");
 80072c4:	68bb      	ldr	r3, [r7, #8]
 80072c6:	f383 8810 	msr	PRIMASK, r3
}
 80072ca:	bf00      	nop
        if (suspend_cleanup != TX_NULL)
 80072cc:	69fb      	ldr	r3, [r7, #28]
 80072ce:	2b00      	cmp	r3, #0
 80072d0:	d003      	beq.n	80072da <_tx_thread_timeout+0x6a>
            (suspend_cleanup)(thread_ptr, suspension_sequence);
 80072d2:	69fb      	ldr	r3, [r7, #28]
 80072d4:	69b9      	ldr	r1, [r7, #24]
 80072d6:	6a78      	ldr	r0, [r7, #36]	; 0x24
 80072d8:	4798      	blx	r3
}
 80072da:	bf00      	nop
 80072dc:	3728      	adds	r7, #40	; 0x28
 80072de:	46bd      	mov	sp, r7
 80072e0:	bd80      	pop	{r7, pc}
 80072e2:	bf00      	nop
 80072e4:	24006170 	.word	0x24006170

080072e8 <_tx_timer_expiration_process>:
/*                                            TX_NO_TIMER is defined,     */
/*                                            resulting in version 6.1    */
/*                                                                        */
/**************************************************************************/
VOID  _tx_timer_expiration_process(VOID)
{
 80072e8:	b580      	push	{r7, lr}
 80072ea:	b084      	sub	sp, #16
 80072ec:	af00      	add	r7, sp, #0
    __asm__ volatile ("MRS  %0, PRIMASK ": "=r" (posture));
 80072ee:	f3ef 8310 	mrs	r3, PRIMASK
 80072f2:	607b      	str	r3, [r7, #4]
    return(posture);
 80072f4:	687b      	ldr	r3, [r7, #4]
    int_posture = __get_interrupt_posture();
 80072f6:	603b      	str	r3, [r7, #0]
    __asm__ volatile ("CPSID i" : : : "memory");
 80072f8:	b672      	cpsid	i
    return(int_posture);
 80072fa:	683b      	ldr	r3, [r7, #0]

    /* Don't process in the ISR, wakeup the system timer thread to process the
       timer expiration.  */

    /* Disable interrupts.  */
    TX_DISABLE
 80072fc:	60fb      	str	r3, [r7, #12]
    /* Restore interrupts.  */
    TX_RESTORE
#else

    /* Increment the preempt disable flag.  */
    _tx_thread_preempt_disable++;
 80072fe:	4b09      	ldr	r3, [pc, #36]	; (8007324 <_tx_timer_expiration_process+0x3c>)
 8007300:	681b      	ldr	r3, [r3, #0]
 8007302:	3301      	adds	r3, #1
 8007304:	4a07      	ldr	r2, [pc, #28]	; (8007324 <_tx_timer_expiration_process+0x3c>)
 8007306:	6013      	str	r3, [r2, #0]
 8007308:	68fb      	ldr	r3, [r7, #12]
 800730a:	60bb      	str	r3, [r7, #8]
    __asm__ volatile ("MSR  PRIMASK,%0": : "r" (int_posture): "memory");
 800730c:	68bb      	ldr	r3, [r7, #8]
 800730e:	f383 8810 	msr	PRIMASK, r3
}
 8007312:	bf00      	nop

    /* Restore interrupts.  */
    TX_RESTORE

    /* Call the system resume function to activate the timer thread.  */
    _tx_thread_system_resume(&_tx_timer_thread);
 8007314:	4804      	ldr	r0, [pc, #16]	; (8007328 <_tx_timer_expiration_process+0x40>)
 8007316:	f7ff fd41 	bl	8006d9c <_tx_thread_system_resume>
    }

    /* Restore interrupts.  */
    TX_RESTORE
#endif
}
 800731a:	bf00      	nop
 800731c:	3710      	adds	r7, #16
 800731e:	46bd      	mov	sp, r7
 8007320:	bd80      	pop	{r7, pc}
 8007322:	bf00      	nop
 8007324:	24006170 	.word	0x24006170
 8007328:	24006220 	.word	0x24006220

0800732c <_tx_timer_initialize>:
/*  09-30-2020     Yuxin Zhou               Modified comment(s),          */
/*                                            resulting in version 6.1    */
/*                                                                        */
/**************************************************************************/
VOID  _tx_timer_initialize(VOID)
{
 800732c:	b590      	push	{r4, r7, lr}
 800732e:	b089      	sub	sp, #36	; 0x24
 8007330:	af06      	add	r7, sp, #24
#endif

#ifndef TX_DISABLE_REDUNDANT_CLEARING

    /* Initialize the system clock to 0.  */
    _tx_timer_system_clock =  ((ULONG) 0);
 8007332:	4b28      	ldr	r3, [pc, #160]	; (80073d4 <_tx_timer_initialize+0xa8>)
 8007334:	2200      	movs	r2, #0
 8007336:	601a      	str	r2, [r3, #0]

    /* Initialize the time-slice value to 0 to make sure it is disabled.  */
    _tx_timer_time_slice =  ((ULONG) 0);
 8007338:	4b27      	ldr	r3, [pc, #156]	; (80073d8 <_tx_timer_initialize+0xac>)
 800733a:	2200      	movs	r2, #0
 800733c:	601a      	str	r2, [r3, #0]

    /* Clear the expired flags.  */
    _tx_timer_expired_time_slice =  TX_FALSE;
 800733e:	4b27      	ldr	r3, [pc, #156]	; (80073dc <_tx_timer_initialize+0xb0>)
 8007340:	2200      	movs	r2, #0
 8007342:	601a      	str	r2, [r3, #0]
    _tx_timer_expired =             TX_FALSE;
 8007344:	4b26      	ldr	r3, [pc, #152]	; (80073e0 <_tx_timer_initialize+0xb4>)
 8007346:	2200      	movs	r2, #0
 8007348:	601a      	str	r2, [r3, #0]

    /* Set the currently expired timer being processed pointer to NULL.  */
    _tx_timer_expired_timer_ptr =  TX_NULL;
 800734a:	4b26      	ldr	r3, [pc, #152]	; (80073e4 <_tx_timer_initialize+0xb8>)
 800734c:	2200      	movs	r2, #0
 800734e:	601a      	str	r2, [r3, #0]

    /* Initialize the thread and application timer management control structures.  */

    /* First, initialize the timer list.  */
    TX_MEMSET(&_tx_timer_list[0], 0, (sizeof(_tx_timer_list)));
 8007350:	2280      	movs	r2, #128	; 0x80
 8007352:	2100      	movs	r1, #0
 8007354:	4824      	ldr	r0, [pc, #144]	; (80073e8 <_tx_timer_initialize+0xbc>)
 8007356:	f000 fbad 	bl	8007ab4 <memset>
#endif

    /* Initialize all of the list pointers.  */
    _tx_timer_list_start =   &_tx_timer_list[0];
 800735a:	4b24      	ldr	r3, [pc, #144]	; (80073ec <_tx_timer_initialize+0xc0>)
 800735c:	4a22      	ldr	r2, [pc, #136]	; (80073e8 <_tx_timer_initialize+0xbc>)
 800735e:	601a      	str	r2, [r3, #0]
    _tx_timer_current_ptr =  &_tx_timer_list[0];
 8007360:	4b23      	ldr	r3, [pc, #140]	; (80073f0 <_tx_timer_initialize+0xc4>)
 8007362:	4a21      	ldr	r2, [pc, #132]	; (80073e8 <_tx_timer_initialize+0xbc>)
 8007364:	601a      	str	r2, [r3, #0]

    /* Set the timer list end pointer to one past the actual timer list.  This is done
       to make the timer interrupt handling in assembly language a little easier.  */
    _tx_timer_list_end =     &_tx_timer_list[TX_TIMER_ENTRIES-((ULONG) 1)];
 8007366:	4b23      	ldr	r3, [pc, #140]	; (80073f4 <_tx_timer_initialize+0xc8>)
 8007368:	4a23      	ldr	r2, [pc, #140]	; (80073f8 <_tx_timer_initialize+0xcc>)
 800736a:	601a      	str	r2, [r3, #0]
    _tx_timer_list_end =     TX_TIMER_POINTER_ADD(_tx_timer_list_end, ((ULONG) 1));
 800736c:	4b21      	ldr	r3, [pc, #132]	; (80073f4 <_tx_timer_initialize+0xc8>)
 800736e:	681b      	ldr	r3, [r3, #0]
 8007370:	3304      	adds	r3, #4
 8007372:	4a20      	ldr	r2, [pc, #128]	; (80073f4 <_tx_timer_initialize+0xc8>)
 8007374:	6013      	str	r3, [r2, #0]

#ifndef TX_TIMER_PROCESS_IN_ISR

    /* Setup the variables associated with the system timer thread's stack and
       priority.  */
    _tx_timer_stack_start =  (VOID *) &_tx_timer_thread_stack_area[0];
 8007376:	4b21      	ldr	r3, [pc, #132]	; (80073fc <_tx_timer_initialize+0xd0>)
 8007378:	4a21      	ldr	r2, [pc, #132]	; (8007400 <_tx_timer_initialize+0xd4>)
 800737a:	601a      	str	r2, [r3, #0]
    _tx_timer_stack_size =   ((ULONG) TX_TIMER_THREAD_STACK_SIZE);
 800737c:	4b21      	ldr	r3, [pc, #132]	; (8007404 <_tx_timer_initialize+0xd8>)
 800737e:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8007382:	601a      	str	r2, [r3, #0]
    _tx_timer_priority =     ((UINT) TX_TIMER_THREAD_PRIORITY);
 8007384:	4b20      	ldr	r3, [pc, #128]	; (8007408 <_tx_timer_initialize+0xdc>)
 8007386:	2200      	movs	r2, #0
 8007388:	601a      	str	r2, [r3, #0]
       low-level initialization component.  */
    do
    {

        /* Create the system timer thread.  */
        status =  _tx_thread_create(&_tx_timer_thread,
 800738a:	4b1c      	ldr	r3, [pc, #112]	; (80073fc <_tx_timer_initialize+0xd0>)
 800738c:	681b      	ldr	r3, [r3, #0]
 800738e:	4a1d      	ldr	r2, [pc, #116]	; (8007404 <_tx_timer_initialize+0xd8>)
 8007390:	6812      	ldr	r2, [r2, #0]
 8007392:	491d      	ldr	r1, [pc, #116]	; (8007408 <_tx_timer_initialize+0xdc>)
 8007394:	6809      	ldr	r1, [r1, #0]
 8007396:	481c      	ldr	r0, [pc, #112]	; (8007408 <_tx_timer_initialize+0xdc>)
 8007398:	6800      	ldr	r0, [r0, #0]
 800739a:	2400      	movs	r4, #0
 800739c:	9405      	str	r4, [sp, #20]
 800739e:	2400      	movs	r4, #0
 80073a0:	9404      	str	r4, [sp, #16]
 80073a2:	9003      	str	r0, [sp, #12]
 80073a4:	9102      	str	r1, [sp, #8]
 80073a6:	9201      	str	r2, [sp, #4]
 80073a8:	9300      	str	r3, [sp, #0]
 80073aa:	4b18      	ldr	r3, [pc, #96]	; (800740c <_tx_timer_initialize+0xe0>)
 80073ac:	4a18      	ldr	r2, [pc, #96]	; (8007410 <_tx_timer_initialize+0xe4>)
 80073ae:	4919      	ldr	r1, [pc, #100]	; (8007414 <_tx_timer_initialize+0xe8>)
 80073b0:	4819      	ldr	r0, [pc, #100]	; (8007418 <_tx_timer_initialize+0xec>)
 80073b2:	f7ff f9eb 	bl	800678c <_tx_thread_create>
 80073b6:	6078      	str	r0, [r7, #4]
#endif

        /* Define timer initialize extension.  */
        TX_TIMER_INITIALIZE_EXTENSION(status)

    } while (status != TX_SUCCESS);
 80073b8:	687b      	ldr	r3, [r7, #4]
 80073ba:	2b00      	cmp	r3, #0
 80073bc:	d1e5      	bne.n	800738a <_tx_timer_initialize+0x5e>
#endif

#ifndef TX_DISABLE_REDUNDANT_CLEARING

    /* Initialize the head pointer of the created application timer list.  */
    _tx_timer_created_ptr =  TX_NULL;
 80073be:	4b17      	ldr	r3, [pc, #92]	; (800741c <_tx_timer_initialize+0xf0>)
 80073c0:	2200      	movs	r2, #0
 80073c2:	601a      	str	r2, [r3, #0]

    /* Set the created count to zero.  */
    _tx_timer_created_count =  TX_EMPTY;
 80073c4:	4b16      	ldr	r3, [pc, #88]	; (8007420 <_tx_timer_initialize+0xf4>)
 80073c6:	2200      	movs	r2, #0
 80073c8:	601a      	str	r2, [r3, #0]
    _tx_timer_performance_expiration_count =         ((ULONG) 0);
    _tx_timer_performance__expiration_adjust_count =  ((ULONG) 0);
#endif
#endif
#endif
}
 80073ca:	bf00      	nop
 80073cc:	370c      	adds	r7, #12
 80073ce:	46bd      	mov	sp, r7
 80073d0:	bd90      	pop	{r4, r7, pc}
 80073d2:	bf00      	nop
 80073d4:	2400617c 	.word	0x2400617c
 80073d8:	240066dc 	.word	0x240066dc
 80073dc:	24006180 	.word	0x24006180
 80073e0:	24006210 	.word	0x24006210
 80073e4:	2400621c 	.word	0x2400621c
 80073e8:	24006184 	.word	0x24006184
 80073ec:	24006204 	.word	0x24006204
 80073f0:	2400620c 	.word	0x2400620c
 80073f4:	24006208 	.word	0x24006208
 80073f8:	24006200 	.word	0x24006200
 80073fc:	240062d0 	.word	0x240062d0
 8007400:	240062dc 	.word	0x240062dc
 8007404:	240062d4 	.word	0x240062d4
 8007408:	240062d8 	.word	0x240062d8
 800740c:	4154494d 	.word	0x4154494d
 8007410:	08007559 	.word	0x08007559
 8007414:	08008b28 	.word	0x08008b28
 8007418:	24006220 	.word	0x24006220
 800741c:	24006214 	.word	0x24006214
 8007420:	24006218 	.word	0x24006218

08007424 <_tx_timer_system_activate>:
/*                                            TX_NO_TIMER is defined,     */
/*                                            resulting in version 6.1    */
/*                                                                        */
/**************************************************************************/
VOID  _tx_timer_system_activate(TX_TIMER_INTERNAL *timer_ptr)
{
 8007424:	b480      	push	{r7}
 8007426:	b089      	sub	sp, #36	; 0x24
 8007428:	af00      	add	r7, sp, #0
 800742a:	6078      	str	r0, [r7, #4]
ULONG                       remaining_ticks;
ULONG                       expiration_time;


    /* Pickup the remaining ticks.  */
    remaining_ticks =  timer_ptr -> tx_timer_internal_remaining_ticks;
 800742c:	687b      	ldr	r3, [r7, #4]
 800742e:	681b      	ldr	r3, [r3, #0]
 8007430:	617b      	str	r3, [r7, #20]

    /* Determine if there is a timer to activate.  */
    if (remaining_ticks != ((ULONG) 0))
 8007432:	697b      	ldr	r3, [r7, #20]
 8007434:	2b00      	cmp	r3, #0
 8007436:	d04a      	beq.n	80074ce <_tx_timer_system_activate+0xaa>
    {

        /* Determine if the timer is set to wait forever.  */
        if (remaining_ticks != TX_WAIT_FOREVER)
 8007438:	697b      	ldr	r3, [r7, #20]
 800743a:	f1b3 3fff 	cmp.w	r3, #4294967295
 800743e:	d046      	beq.n	80074ce <_tx_timer_system_activate+0xaa>
        {

            /* Valid timer activate request.  */

            /* Determine if the timer still needs activation.  */
            if (timer_ptr -> tx_timer_internal_list_head == TX_NULL)
 8007440:	687b      	ldr	r3, [r7, #4]
 8007442:	699b      	ldr	r3, [r3, #24]
 8007444:	2b00      	cmp	r3, #0
 8007446:	d142      	bne.n	80074ce <_tx_timer_system_activate+0xaa>
            {

                /* Activate the timer.  */

                /* Calculate the amount of time remaining for the timer.  */
                if (remaining_ticks > TX_TIMER_ENTRIES)
 8007448:	697b      	ldr	r3, [r7, #20]
 800744a:	2b20      	cmp	r3, #32
 800744c:	d902      	bls.n	8007454 <_tx_timer_system_activate+0x30>
                {

                    /* Set expiration time to the maximum number of entries.  */
                    expiration_time =  TX_TIMER_ENTRIES - ((ULONG) 1);
 800744e:	231f      	movs	r3, #31
 8007450:	61bb      	str	r3, [r7, #24]
 8007452:	e002      	b.n	800745a <_tx_timer_system_activate+0x36>
                {

                    /* Timer value fits in the timer entries.  */

                    /* Set the expiration time.  */
                    expiration_time =  (remaining_ticks - ((ULONG) 1));
 8007454:	697b      	ldr	r3, [r7, #20]
 8007456:	3b01      	subs	r3, #1
 8007458:	61bb      	str	r3, [r7, #24]

                /* At this point, we are ready to put the timer on one of
                   the timer lists.  */

                /* Calculate the proper place for the timer.  */
                timer_list =  TX_TIMER_POINTER_ADD(_tx_timer_current_ptr, expiration_time);
 800745a:	4b20      	ldr	r3, [pc, #128]	; (80074dc <_tx_timer_system_activate+0xb8>)
 800745c:	681a      	ldr	r2, [r3, #0]
 800745e:	69bb      	ldr	r3, [r7, #24]
 8007460:	009b      	lsls	r3, r3, #2
 8007462:	4413      	add	r3, r2
 8007464:	61fb      	str	r3, [r7, #28]
                if (TX_TIMER_INDIRECT_TO_VOID_POINTER_CONVERT(timer_list) >= TX_TIMER_INDIRECT_TO_VOID_POINTER_CONVERT(_tx_timer_list_end))
 8007466:	4b1e      	ldr	r3, [pc, #120]	; (80074e0 <_tx_timer_system_activate+0xbc>)
 8007468:	681b      	ldr	r3, [r3, #0]
 800746a:	69fa      	ldr	r2, [r7, #28]
 800746c:	429a      	cmp	r2, r3
 800746e:	d30b      	bcc.n	8007488 <_tx_timer_system_activate+0x64>
                {

                    /* Wrap from the beginning of the list.  */
                    delta =  TX_TIMER_POINTER_DIF(timer_list, _tx_timer_list_end);
 8007470:	4b1b      	ldr	r3, [pc, #108]	; (80074e0 <_tx_timer_system_activate+0xbc>)
 8007472:	681b      	ldr	r3, [r3, #0]
 8007474:	69fa      	ldr	r2, [r7, #28]
 8007476:	1ad3      	subs	r3, r2, r3
 8007478:	109b      	asrs	r3, r3, #2
 800747a:	613b      	str	r3, [r7, #16]
                    timer_list =  TX_TIMER_POINTER_ADD(_tx_timer_list_start, delta);
 800747c:	4b19      	ldr	r3, [pc, #100]	; (80074e4 <_tx_timer_system_activate+0xc0>)
 800747e:	681a      	ldr	r2, [r3, #0]
 8007480:	693b      	ldr	r3, [r7, #16]
 8007482:	009b      	lsls	r3, r3, #2
 8007484:	4413      	add	r3, r2
 8007486:	61fb      	str	r3, [r7, #28]
                }

                /* Now put the timer on this list.  */
                if ((*timer_list) == TX_NULL)
 8007488:	69fb      	ldr	r3, [r7, #28]
 800748a:	681b      	ldr	r3, [r3, #0]
 800748c:	2b00      	cmp	r3, #0
 800748e:	d109      	bne.n	80074a4 <_tx_timer_system_activate+0x80>
                {

                    /* This list is NULL, just put the new timer on it.  */

                    /* Setup the links in this timer.  */
                    timer_ptr -> tx_timer_internal_active_next =      timer_ptr;
 8007490:	687b      	ldr	r3, [r7, #4]
 8007492:	687a      	ldr	r2, [r7, #4]
 8007494:	611a      	str	r2, [r3, #16]
                    timer_ptr -> tx_timer_internal_active_previous =  timer_ptr;
 8007496:	687b      	ldr	r3, [r7, #4]
 8007498:	687a      	ldr	r2, [r7, #4]
 800749a:	615a      	str	r2, [r3, #20]

                    /* Setup the list head pointer.  */
                    *timer_list =  timer_ptr;
 800749c:	69fb      	ldr	r3, [r7, #28]
 800749e:	687a      	ldr	r2, [r7, #4]
 80074a0:	601a      	str	r2, [r3, #0]
 80074a2:	e011      	b.n	80074c8 <_tx_timer_system_activate+0xa4>
                }
                else
                {

                    /* This list is not NULL, add current timer to the end. */
                    next_timer =                                        *timer_list;
 80074a4:	69fb      	ldr	r3, [r7, #28]
 80074a6:	681b      	ldr	r3, [r3, #0]
 80074a8:	60fb      	str	r3, [r7, #12]
                    previous_timer =                                    next_timer -> tx_timer_internal_active_previous;
 80074aa:	68fb      	ldr	r3, [r7, #12]
 80074ac:	695b      	ldr	r3, [r3, #20]
 80074ae:	60bb      	str	r3, [r7, #8]
                    previous_timer -> tx_timer_internal_active_next =   timer_ptr;
 80074b0:	68bb      	ldr	r3, [r7, #8]
 80074b2:	687a      	ldr	r2, [r7, #4]
 80074b4:	611a      	str	r2, [r3, #16]
                    next_timer -> tx_timer_internal_active_previous =   timer_ptr;
 80074b6:	68fb      	ldr	r3, [r7, #12]
 80074b8:	687a      	ldr	r2, [r7, #4]
 80074ba:	615a      	str	r2, [r3, #20]
                    timer_ptr -> tx_timer_internal_active_next =        next_timer;
 80074bc:	687b      	ldr	r3, [r7, #4]
 80074be:	68fa      	ldr	r2, [r7, #12]
 80074c0:	611a      	str	r2, [r3, #16]
                    timer_ptr -> tx_timer_internal_active_previous =    previous_timer;
 80074c2:	687b      	ldr	r3, [r7, #4]
 80074c4:	68ba      	ldr	r2, [r7, #8]
 80074c6:	615a      	str	r2, [r3, #20]
                }

                /* Setup list head pointer.  */
                timer_ptr -> tx_timer_internal_list_head =  timer_list;
 80074c8:	687b      	ldr	r3, [r7, #4]
 80074ca:	69fa      	ldr	r2, [r7, #28]
 80074cc:	619a      	str	r2, [r3, #24]
            }
        }
    }
}
 80074ce:	bf00      	nop
 80074d0:	3724      	adds	r7, #36	; 0x24
 80074d2:	46bd      	mov	sp, r7
 80074d4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80074d8:	4770      	bx	lr
 80074da:	bf00      	nop
 80074dc:	2400620c 	.word	0x2400620c
 80074e0:	24006208 	.word	0x24006208
 80074e4:	24006204 	.word	0x24006204

080074e8 <_tx_timer_system_deactivate>:
/*  09-30-2020     Yuxin Zhou               Modified comment(s),          */
/*                                            resulting in version 6.1    */
/*                                                                        */
/**************************************************************************/
VOID  _tx_timer_system_deactivate(TX_TIMER_INTERNAL *timer_ptr)
{
 80074e8:	b480      	push	{r7}
 80074ea:	b087      	sub	sp, #28
 80074ec:	af00      	add	r7, sp, #0
 80074ee:	6078      	str	r0, [r7, #4]
TX_TIMER_INTERNAL   *next_timer;
TX_TIMER_INTERNAL   *previous_timer;


    /* Pickup the list head pointer.  */
    list_head =  timer_ptr -> tx_timer_internal_list_head;
 80074f0:	687b      	ldr	r3, [r7, #4]
 80074f2:	699b      	ldr	r3, [r3, #24]
 80074f4:	617b      	str	r3, [r7, #20]

    /* Determine if the timer still needs deactivation.  */
    if (list_head != TX_NULL)
 80074f6:	697b      	ldr	r3, [r7, #20]
 80074f8:	2b00      	cmp	r3, #0
 80074fa:	d026      	beq.n	800754a <_tx_timer_system_deactivate+0x62>
    {

        /* Deactivate the timer.  */

        /* Pickup the next active timer.  */
        next_timer =  timer_ptr -> tx_timer_internal_active_next;
 80074fc:	687b      	ldr	r3, [r7, #4]
 80074fe:	691b      	ldr	r3, [r3, #16]
 8007500:	613b      	str	r3, [r7, #16]

        /* See if this is the only timer in the list.  */
        if (timer_ptr == next_timer)
 8007502:	687a      	ldr	r2, [r7, #4]
 8007504:	693b      	ldr	r3, [r7, #16]
 8007506:	429a      	cmp	r2, r3
 8007508:	d108      	bne.n	800751c <_tx_timer_system_deactivate+0x34>
        {

            /* Yes, the only timer on the list.  */

            /* Determine if the head pointer needs to be updated.  */
            if (*(list_head) == timer_ptr)
 800750a:	697b      	ldr	r3, [r7, #20]
 800750c:	681b      	ldr	r3, [r3, #0]
 800750e:	687a      	ldr	r2, [r7, #4]
 8007510:	429a      	cmp	r2, r3
 8007512:	d117      	bne.n	8007544 <_tx_timer_system_deactivate+0x5c>
            {

                /* Update the head pointer.  */
                *(list_head) =  TX_NULL;
 8007514:	697b      	ldr	r3, [r7, #20]
 8007516:	2200      	movs	r2, #0
 8007518:	601a      	str	r2, [r3, #0]
 800751a:	e013      	b.n	8007544 <_tx_timer_system_deactivate+0x5c>
        {

            /* At least one more timer is on the same expiration list.  */

            /* Update the links of the adjacent timers.  */
            previous_timer =                                   timer_ptr -> tx_timer_internal_active_previous;
 800751c:	687b      	ldr	r3, [r7, #4]
 800751e:	695b      	ldr	r3, [r3, #20]
 8007520:	60fb      	str	r3, [r7, #12]
            next_timer -> tx_timer_internal_active_previous =  previous_timer;
 8007522:	693b      	ldr	r3, [r7, #16]
 8007524:	68fa      	ldr	r2, [r7, #12]
 8007526:	615a      	str	r2, [r3, #20]
            previous_timer -> tx_timer_internal_active_next =  next_timer;
 8007528:	68fb      	ldr	r3, [r7, #12]
 800752a:	693a      	ldr	r2, [r7, #16]
 800752c:	611a      	str	r2, [r3, #16]

            /* Determine if the head pointer needs to be updated.  */
            if (*(list_head) == timer_ptr)
 800752e:	697b      	ldr	r3, [r7, #20]
 8007530:	681b      	ldr	r3, [r3, #0]
 8007532:	687a      	ldr	r2, [r7, #4]
 8007534:	429a      	cmp	r2, r3
 8007536:	d105      	bne.n	8007544 <_tx_timer_system_deactivate+0x5c>
            {

                /* Update the next timer in the list with the list head pointer.  */
                next_timer -> tx_timer_internal_list_head =  list_head;
 8007538:	693b      	ldr	r3, [r7, #16]
 800753a:	697a      	ldr	r2, [r7, #20]
 800753c:	619a      	str	r2, [r3, #24]

                /* Update the head pointer.  */
                *(list_head) =  next_timer;
 800753e:	697b      	ldr	r3, [r7, #20]
 8007540:	693a      	ldr	r2, [r7, #16]
 8007542:	601a      	str	r2, [r3, #0]
            }
        }

        /* Clear the timer's list head pointer.  */
        timer_ptr -> tx_timer_internal_list_head =  TX_NULL;
 8007544:	687b      	ldr	r3, [r7, #4]
 8007546:	2200      	movs	r2, #0
 8007548:	619a      	str	r2, [r3, #24]
    }
}
 800754a:	bf00      	nop
 800754c:	371c      	adds	r7, #28
 800754e:	46bd      	mov	sp, r7
 8007550:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007554:	4770      	bx	lr
	...

08007558 <_tx_timer_thread_entry>:
/*                                            resulting in version 6.1    */
/*                                                                        */
/**************************************************************************/
#ifndef TX_TIMER_PROCESS_IN_ISR
VOID  _tx_timer_thread_entry(ULONG timer_thread_input)
{
 8007558:	b580      	push	{r7, lr}
 800755a:	b098      	sub	sp, #96	; 0x60
 800755c:	af00      	add	r7, sp, #0
 800755e:	6078      	str	r0, [r7, #4]
TX_TIMER_INTERNAL           *reactivate_timer;
TX_TIMER_INTERNAL           *next_timer;
TX_TIMER_INTERNAL           *previous_timer;
TX_TIMER_INTERNAL           *current_timer;
VOID                        (*timeout_function)(ULONG id);
ULONG                       timeout_param =  ((ULONG) 0);
 8007560:	2300      	movs	r3, #0
 8007562:	657b      	str	r3, [r7, #84]	; 0x54
#endif


    /* Make sure the timer input is correct.  This also gets rid of the
       silly compiler warnings.  */
    if (timer_thread_input == TX_TIMER_ID)
 8007564:	687b      	ldr	r3, [r7, #4]
 8007566:	4a73      	ldr	r2, [pc, #460]	; (8007734 <_tx_timer_thread_entry+0x1dc>)
 8007568:	4293      	cmp	r3, r2
 800756a:	f040 80de 	bne.w	800772a <_tx_timer_thread_entry+0x1d2>
    __asm__ volatile ("MRS  %0, PRIMASK ": "=r" (posture));
 800756e:	f3ef 8310 	mrs	r3, PRIMASK
 8007572:	643b      	str	r3, [r7, #64]	; 0x40
    return(posture);
 8007574:	6c3b      	ldr	r3, [r7, #64]	; 0x40
    int_posture = __get_interrupt_posture();
 8007576:	63fb      	str	r3, [r7, #60]	; 0x3c
    __asm__ volatile ("CPSID i" : : : "memory");
 8007578:	b672      	cpsid	i
    return(int_posture);
 800757a:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
        {

            /* First, move the current list pointer and clear the timer
               expired value.  This allows the interrupt handling portion
               to continue looking for timer expirations.  */
            TX_DISABLE
 800757c:	65fb      	str	r3, [r7, #92]	; 0x5c

            /* Save the current timer expiration list pointer.  */
            expired_timers =  *_tx_timer_current_ptr;
 800757e:	4b6e      	ldr	r3, [pc, #440]	; (8007738 <_tx_timer_thread_entry+0x1e0>)
 8007580:	681b      	ldr	r3, [r3, #0]
 8007582:	681b      	ldr	r3, [r3, #0]
 8007584:	60fb      	str	r3, [r7, #12]

            /* Modify the head pointer in the first timer in the list, if there
               is one!  */
            if (expired_timers != TX_NULL)
 8007586:	68fb      	ldr	r3, [r7, #12]
 8007588:	2b00      	cmp	r3, #0
 800758a:	d003      	beq.n	8007594 <_tx_timer_thread_entry+0x3c>
            {

                expired_timers -> tx_timer_internal_list_head =  &expired_timers;
 800758c:	68fb      	ldr	r3, [r7, #12]
 800758e:	f107 020c 	add.w	r2, r7, #12
 8007592:	619a      	str	r2, [r3, #24]
            }

            /* Set the current list pointer to NULL.  */
            *_tx_timer_current_ptr =  TX_NULL;
 8007594:	4b68      	ldr	r3, [pc, #416]	; (8007738 <_tx_timer_thread_entry+0x1e0>)
 8007596:	681b      	ldr	r3, [r3, #0]
 8007598:	2200      	movs	r2, #0
 800759a:	601a      	str	r2, [r3, #0]

            /* Move the current pointer up one timer entry wrap if we get to
               the end of the list.  */
            _tx_timer_current_ptr =  TX_TIMER_POINTER_ADD(_tx_timer_current_ptr, 1);
 800759c:	4b66      	ldr	r3, [pc, #408]	; (8007738 <_tx_timer_thread_entry+0x1e0>)
 800759e:	681b      	ldr	r3, [r3, #0]
 80075a0:	3304      	adds	r3, #4
 80075a2:	4a65      	ldr	r2, [pc, #404]	; (8007738 <_tx_timer_thread_entry+0x1e0>)
 80075a4:	6013      	str	r3, [r2, #0]
            if (_tx_timer_current_ptr == _tx_timer_list_end)
 80075a6:	4b64      	ldr	r3, [pc, #400]	; (8007738 <_tx_timer_thread_entry+0x1e0>)
 80075a8:	681a      	ldr	r2, [r3, #0]
 80075aa:	4b64      	ldr	r3, [pc, #400]	; (800773c <_tx_timer_thread_entry+0x1e4>)
 80075ac:	681b      	ldr	r3, [r3, #0]
 80075ae:	429a      	cmp	r2, r3
 80075b0:	d103      	bne.n	80075ba <_tx_timer_thread_entry+0x62>
            {

                _tx_timer_current_ptr =  _tx_timer_list_start;
 80075b2:	4b63      	ldr	r3, [pc, #396]	; (8007740 <_tx_timer_thread_entry+0x1e8>)
 80075b4:	681b      	ldr	r3, [r3, #0]
 80075b6:	4a60      	ldr	r2, [pc, #384]	; (8007738 <_tx_timer_thread_entry+0x1e0>)
 80075b8:	6013      	str	r3, [r2, #0]
            }

            /* Clear the expired flag.  */
            _tx_timer_expired =  TX_FALSE;
 80075ba:	4b62      	ldr	r3, [pc, #392]	; (8007744 <_tx_timer_thread_entry+0x1ec>)
 80075bc:	2200      	movs	r2, #0
 80075be:	601a      	str	r2, [r3, #0]
 80075c0:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 80075c2:	633b      	str	r3, [r7, #48]	; 0x30
    __asm__ volatile ("MSR  PRIMASK,%0": : "r" (int_posture): "memory");
 80075c4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80075c6:	f383 8810 	msr	PRIMASK, r3
}
 80075ca:	bf00      	nop
    __asm__ volatile ("MRS  %0, PRIMASK ": "=r" (posture));
 80075cc:	f3ef 8310 	mrs	r3, PRIMASK
 80075d0:	63bb      	str	r3, [r7, #56]	; 0x38
    return(posture);
 80075d2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
    int_posture = __get_interrupt_posture();
 80075d4:	637b      	str	r3, [r7, #52]	; 0x34
    __asm__ volatile ("CPSID i" : : : "memory");
 80075d6:	b672      	cpsid	i
    return(int_posture);
 80075d8:	6b7b      	ldr	r3, [r7, #52]	; 0x34

            /* Restore interrupts temporarily.  */
            TX_RESTORE

            /* Disable interrupts again.  */
            TX_DISABLE
 80075da:	65fb      	str	r3, [r7, #92]	; 0x5c

            /* Next, process the expiration of the associated timers at this
               time slot.  */
            while (expired_timers != TX_NULL)
 80075dc:	e07f      	b.n	80076de <_tx_timer_thread_entry+0x186>
            {

                /* Something is on the list.  Remove it and process the expiration.  */
                current_timer =  expired_timers;
 80075de:	68fb      	ldr	r3, [r7, #12]
 80075e0:	64fb      	str	r3, [r7, #76]	; 0x4c

                /* Pickup the next timer.  */
                next_timer =  expired_timers -> tx_timer_internal_active_next;
 80075e2:	68fb      	ldr	r3, [r7, #12]
 80075e4:	691b      	ldr	r3, [r3, #16]
 80075e6:	64bb      	str	r3, [r7, #72]	; 0x48

                /* Set the reactivate_timer to NULL.  */
                reactivate_timer =  TX_NULL;
 80075e8:	2300      	movs	r3, #0
 80075ea:	60bb      	str	r3, [r7, #8]

                /* Determine if this is the only timer.  */
                if (current_timer == next_timer)
 80075ec:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 80075ee:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 80075f0:	429a      	cmp	r2, r3
 80075f2:	d102      	bne.n	80075fa <_tx_timer_thread_entry+0xa2>
                {

                    /* Yes, this is the only timer in the list.  */

                    /* Set the head pointer to NULL.  */
                    expired_timers =  TX_NULL;
 80075f4:	2300      	movs	r3, #0
 80075f6:	60fb      	str	r3, [r7, #12]
 80075f8:	e00e      	b.n	8007618 <_tx_timer_thread_entry+0xc0>
                {

                    /* No, not the only expired timer.  */

                    /* Remove this timer from the expired list.  */
                    previous_timer =                                   current_timer -> tx_timer_internal_active_previous;
 80075fa:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80075fc:	695b      	ldr	r3, [r3, #20]
 80075fe:	647b      	str	r3, [r7, #68]	; 0x44
                    next_timer -> tx_timer_internal_active_previous =  previous_timer;
 8007600:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8007602:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8007604:	615a      	str	r2, [r3, #20]
                    previous_timer -> tx_timer_internal_active_next =  next_timer;
 8007606:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8007608:	6cba      	ldr	r2, [r7, #72]	; 0x48
 800760a:	611a      	str	r2, [r3, #16]

                    /* Modify the next timer's list head to point at the current list head.  */
                    next_timer -> tx_timer_internal_list_head =  &expired_timers;
 800760c:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800760e:	f107 020c 	add.w	r2, r7, #12
 8007612:	619a      	str	r2, [r3, #24]

                    /* Set the list head pointer.  */
                    expired_timers =  next_timer;
 8007614:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8007616:	60fb      	str	r3, [r7, #12]

                /* In any case, the timer is now off of the expired list.  */

                /* Determine if the timer has expired or if it is just a really
                   big timer that needs to be placed in the list again.  */
                if (current_timer -> tx_timer_internal_remaining_ticks > TX_TIMER_ENTRIES)
 8007618:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800761a:	681b      	ldr	r3, [r3, #0]
 800761c:	2b20      	cmp	r3, #32
 800761e:	d911      	bls.n	8007644 <_tx_timer_thread_entry+0xec>
                    }
#endif

                    /* Decrement the remaining ticks of the timer.  */
                    current_timer -> tx_timer_internal_remaining_ticks =
                            current_timer -> tx_timer_internal_remaining_ticks - TX_TIMER_ENTRIES;
 8007620:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8007622:	681b      	ldr	r3, [r3, #0]
 8007624:	f1a3 0220 	sub.w	r2, r3, #32
                    current_timer -> tx_timer_internal_remaining_ticks =
 8007628:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800762a:	601a      	str	r2, [r3, #0]

                    /* Set the timeout function to NULL in order to bypass the
                       expiration.  */
                    timeout_function =  TX_NULL;
 800762c:	2300      	movs	r3, #0
 800762e:	65bb      	str	r3, [r7, #88]	; 0x58

                    /* Make the timer appear that it is still active while interrupts
                       are enabled.  This will permit proper processing of a timer
                       deactivate from an ISR.  */
                    current_timer -> tx_timer_internal_list_head =    &reactivate_timer;
 8007630:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8007632:	f107 0208 	add.w	r2, r7, #8
 8007636:	619a      	str	r2, [r3, #24]
                    current_timer -> tx_timer_internal_active_next =  current_timer;
 8007638:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800763a:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 800763c:	611a      	str	r2, [r3, #16]

                    /* Setup the temporary timer list head pointer.  */
                    reactivate_timer =  current_timer;
 800763e:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8007640:	60bb      	str	r3, [r7, #8]
 8007642:	e01a      	b.n	800767a <_tx_timer_thread_entry+0x122>
                    }
#endif

                    /* Copy the calling function and ID into local variables before interrupts
                       are re-enabled.  */
                    timeout_function =  current_timer -> tx_timer_internal_timeout_function;
 8007644:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8007646:	689b      	ldr	r3, [r3, #8]
 8007648:	65bb      	str	r3, [r7, #88]	; 0x58
                    timeout_param =     current_timer -> tx_timer_internal_timeout_param;
 800764a:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800764c:	68db      	ldr	r3, [r3, #12]
 800764e:	657b      	str	r3, [r7, #84]	; 0x54

                    /* Copy the reinitialize ticks into the remaining ticks.  */
                    current_timer -> tx_timer_internal_remaining_ticks =  current_timer -> tx_timer_internal_re_initialize_ticks;
 8007650:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8007652:	685a      	ldr	r2, [r3, #4]
 8007654:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8007656:	601a      	str	r2, [r3, #0]

                    /* Determine if the timer should be reactivated.  */
                    if (current_timer -> tx_timer_internal_remaining_ticks != ((ULONG) 0))
 8007658:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800765a:	681b      	ldr	r3, [r3, #0]
 800765c:	2b00      	cmp	r3, #0
 800765e:	d009      	beq.n	8007674 <_tx_timer_thread_entry+0x11c>

                        /* Make the timer appear that it is still active while processing
                           the expiration routine and with interrupts enabled.  This will
                           permit proper processing of a timer deactivate from both the
                           expiration routine and an ISR.  */
                        current_timer -> tx_timer_internal_list_head =    &reactivate_timer;
 8007660:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8007662:	f107 0208 	add.w	r2, r7, #8
 8007666:	619a      	str	r2, [r3, #24]
                        current_timer -> tx_timer_internal_active_next =  current_timer;
 8007668:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800766a:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 800766c:	611a      	str	r2, [r3, #16]

                        /* Setup the temporary timer list head pointer.  */
                        reactivate_timer =  current_timer;
 800766e:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8007670:	60bb      	str	r3, [r7, #8]
 8007672:	e002      	b.n	800767a <_tx_timer_thread_entry+0x122>
                    else
                    {

                        /* Set the list pointer of this timer to NULL.  This is used to indicate
                           the timer is no longer active.  */
                        current_timer -> tx_timer_internal_list_head =  TX_NULL;
 8007674:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8007676:	2200      	movs	r2, #0
 8007678:	619a      	str	r2, [r3, #24]
                    }
                }

                /* Set pointer to indicate the expired timer that is currently being processed.  */
                _tx_timer_expired_timer_ptr =  current_timer;
 800767a:	4a33      	ldr	r2, [pc, #204]	; (8007748 <_tx_timer_thread_entry+0x1f0>)
 800767c:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800767e:	6013      	str	r3, [r2, #0]
 8007680:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8007682:	62fb      	str	r3, [r7, #44]	; 0x2c
    __asm__ volatile ("MSR  PRIMASK,%0": : "r" (int_posture): "memory");
 8007684:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007686:	f383 8810 	msr	PRIMASK, r3
}
 800768a:	bf00      	nop

                /* Restore interrupts for timer expiration call.  */
                TX_RESTORE

                /* Call the timer-expiration function, if non-NULL.  */
                if (timeout_function != TX_NULL)
 800768c:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 800768e:	2b00      	cmp	r3, #0
 8007690:	d002      	beq.n	8007698 <_tx_timer_thread_entry+0x140>
                {

                    (timeout_function) (timeout_param);
 8007692:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8007694:	6d78      	ldr	r0, [r7, #84]	; 0x54
 8007696:	4798      	blx	r3
    __asm__ volatile ("MRS  %0, PRIMASK ": "=r" (posture));
 8007698:	f3ef 8310 	mrs	r3, PRIMASK
 800769c:	62bb      	str	r3, [r7, #40]	; 0x28
    return(posture);
 800769e:	6abb      	ldr	r3, [r7, #40]	; 0x28
    int_posture = __get_interrupt_posture();
 80076a0:	627b      	str	r3, [r7, #36]	; 0x24
    __asm__ volatile ("CPSID i" : : : "memory");
 80076a2:	b672      	cpsid	i
    return(int_posture);
 80076a4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
                }

                /* Lockout interrupts again.  */
                TX_DISABLE
 80076a6:	65fb      	str	r3, [r7, #92]	; 0x5c

                /* Clear expired timer pointer.  */
                _tx_timer_expired_timer_ptr =  TX_NULL;
 80076a8:	4b27      	ldr	r3, [pc, #156]	; (8007748 <_tx_timer_thread_entry+0x1f0>)
 80076aa:	2200      	movs	r2, #0
 80076ac:	601a      	str	r2, [r3, #0]

                /* Determine if the timer needs to be reactivated.  */
                if (reactivate_timer == current_timer)
 80076ae:	68bb      	ldr	r3, [r7, #8]
 80076b0:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 80076b2:	429a      	cmp	r2, r3
 80076b4:	d105      	bne.n	80076c2 <_tx_timer_thread_entry+0x16a>
#else

                    /* Reactivate through the timer activate function.  */

                    /* Clear the list head for the timer activate call.  */
                    current_timer -> tx_timer_internal_list_head = TX_NULL;
 80076b6:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80076b8:	2200      	movs	r2, #0
 80076ba:	619a      	str	r2, [r3, #24]

                    /* Activate the current timer.  */
                    _tx_timer_system_activate(current_timer);
 80076bc:	6cf8      	ldr	r0, [r7, #76]	; 0x4c
 80076be:	f7ff feb1 	bl	8007424 <_tx_timer_system_activate>
 80076c2:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 80076c4:	61bb      	str	r3, [r7, #24]
    __asm__ volatile ("MSR  PRIMASK,%0": : "r" (int_posture): "memory");
 80076c6:	69bb      	ldr	r3, [r7, #24]
 80076c8:	f383 8810 	msr	PRIMASK, r3
}
 80076cc:	bf00      	nop
    __asm__ volatile ("MRS  %0, PRIMASK ": "=r" (posture));
 80076ce:	f3ef 8310 	mrs	r3, PRIMASK
 80076d2:	623b      	str	r3, [r7, #32]
    return(posture);
 80076d4:	6a3b      	ldr	r3, [r7, #32]
    int_posture = __get_interrupt_posture();
 80076d6:	61fb      	str	r3, [r7, #28]
    __asm__ volatile ("CPSID i" : : : "memory");
 80076d8:	b672      	cpsid	i
    return(int_posture);
 80076da:	69fb      	ldr	r3, [r7, #28]

                /* Restore interrupts.  */
                TX_RESTORE

                /* Lockout interrupts again.  */
                TX_DISABLE
 80076dc:	65fb      	str	r3, [r7, #92]	; 0x5c
            while (expired_timers != TX_NULL)
 80076de:	68fb      	ldr	r3, [r7, #12]
 80076e0:	2b00      	cmp	r3, #0
 80076e2:	f47f af7c 	bne.w	80075de <_tx_timer_thread_entry+0x86>

            /* Finally, suspend this thread and wait for the next expiration.  */

            /* Determine if another expiration took place while we were in this
               thread.  If so, process another expiration.  */
            if (_tx_timer_expired == TX_FALSE)
 80076e6:	4b17      	ldr	r3, [pc, #92]	; (8007744 <_tx_timer_thread_entry+0x1ec>)
 80076e8:	681b      	ldr	r3, [r3, #0]
 80076ea:	2b00      	cmp	r3, #0
 80076ec:	d116      	bne.n	800771c <_tx_timer_thread_entry+0x1c4>
            {

                /* Otherwise, no timer expiration, so suspend the thread.  */

                /* Build pointer to the timer thread.  */
                thread_ptr =  &_tx_timer_thread;
 80076ee:	4b17      	ldr	r3, [pc, #92]	; (800774c <_tx_timer_thread_entry+0x1f4>)
 80076f0:	653b      	str	r3, [r7, #80]	; 0x50

                /* Set the status to suspending, in order to indicate the
                   suspension is in progress.  */
                thread_ptr -> tx_thread_state =  TX_SUSPENDED;
 80076f2:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80076f4:	2203      	movs	r2, #3
 80076f6:	631a      	str	r2, [r3, #48]	; 0x30
                /* Restore interrupts.  */
                TX_RESTORE
#else

                /* Set the suspending flag. */
                thread_ptr -> tx_thread_suspending =  TX_TRUE;
 80076f8:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80076fa:	2201      	movs	r2, #1
 80076fc:	639a      	str	r2, [r3, #56]	; 0x38

                /* Increment the preempt disable count prior to suspending.  */
                _tx_thread_preempt_disable++;
 80076fe:	4b14      	ldr	r3, [pc, #80]	; (8007750 <_tx_timer_thread_entry+0x1f8>)
 8007700:	681b      	ldr	r3, [r3, #0]
 8007702:	3301      	adds	r3, #1
 8007704:	4a12      	ldr	r2, [pc, #72]	; (8007750 <_tx_timer_thread_entry+0x1f8>)
 8007706:	6013      	str	r3, [r2, #0]
 8007708:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800770a:	617b      	str	r3, [r7, #20]
    __asm__ volatile ("MSR  PRIMASK,%0": : "r" (int_posture): "memory");
 800770c:	697b      	ldr	r3, [r7, #20]
 800770e:	f383 8810 	msr	PRIMASK, r3
}
 8007712:	bf00      	nop

                /* Restore interrupts.  */
                TX_RESTORE

                /* Call actual thread suspension routine.  */
                _tx_thread_system_suspend(thread_ptr);
 8007714:	6d38      	ldr	r0, [r7, #80]	; 0x50
 8007716:	f7ff fc41 	bl	8006f9c <_tx_thread_system_suspend>
 800771a:	e728      	b.n	800756e <_tx_timer_thread_entry+0x16>
 800771c:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800771e:	613b      	str	r3, [r7, #16]
    __asm__ volatile ("MSR  PRIMASK,%0": : "r" (int_posture): "memory");
 8007720:	693b      	ldr	r3, [r7, #16]
 8007722:	f383 8810 	msr	PRIMASK, r3
}
 8007726:	bf00      	nop
            TX_DISABLE
 8007728:	e721      	b.n	800756e <_tx_timer_thread_entry+0x16>

    /* If we ever get here, raise safety critical exception.  */
    TX_SAFETY_CRITICAL_EXCEPTION(__FILE__, __LINE__, 0);
#endif

}
 800772a:	bf00      	nop
 800772c:	3760      	adds	r7, #96	; 0x60
 800772e:	46bd      	mov	sp, r7
 8007730:	bd80      	pop	{r7, pc}
 8007732:	bf00      	nop
 8007734:	4154494d 	.word	0x4154494d
 8007738:	2400620c 	.word	0x2400620c
 800773c:	24006208 	.word	0x24006208
 8007740:	24006204 	.word	0x24006204
 8007744:	24006210 	.word	0x24006210
 8007748:	2400621c 	.word	0x2400621c
 800774c:	24006220 	.word	0x24006220
 8007750:	24006170 	.word	0x24006170

08007754 <_txe_byte_pool_create>:
/*  09-30-2020     Yuxin Zhou               Modified comment(s),          */
/*                                            resulting in version 6.1    */
/*                                                                        */
/**************************************************************************/
UINT  _txe_byte_pool_create(TX_BYTE_POOL *pool_ptr, CHAR *name_ptr, VOID *pool_start, ULONG pool_size, UINT pool_control_block_size)
{
 8007754:	b580      	push	{r7, lr}
 8007756:	b092      	sub	sp, #72	; 0x48
 8007758:	af00      	add	r7, sp, #0
 800775a:	60f8      	str	r0, [r7, #12]
 800775c:	60b9      	str	r1, [r7, #8]
 800775e:	607a      	str	r2, [r7, #4]
 8007760:	603b      	str	r3, [r7, #0]
TX_THREAD       *thread_ptr;
#endif


    /* Default status to success.  */
    status =  TX_SUCCESS;
 8007762:	2300      	movs	r3, #0
 8007764:	647b      	str	r3, [r7, #68]	; 0x44

    /* Check for an invalid byte pool pointer.  */
    if (pool_ptr == TX_NULL)
 8007766:	68fb      	ldr	r3, [r7, #12]
 8007768:	2b00      	cmp	r3, #0
 800776a:	d102      	bne.n	8007772 <_txe_byte_pool_create+0x1e>
    {

        /* Byte pool pointer is invalid, return appropriate error code.  */
        status =  TX_POOL_ERROR;
 800776c:	2302      	movs	r3, #2
 800776e:	647b      	str	r3, [r7, #68]	; 0x44
 8007770:	e075      	b.n	800785e <_txe_byte_pool_create+0x10a>
    }

    /* Now see if the pool control block size is valid.  */
    else if (pool_control_block_size != (sizeof(TX_BYTE_POOL)))
 8007772:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8007774:	2b34      	cmp	r3, #52	; 0x34
 8007776:	d002      	beq.n	800777e <_txe_byte_pool_create+0x2a>
    {

        /* Byte pool pointer is invalid, return appropriate error code.  */
        status =  TX_POOL_ERROR;
 8007778:	2302      	movs	r3, #2
 800777a:	647b      	str	r3, [r7, #68]	; 0x44
 800777c:	e06f      	b.n	800785e <_txe_byte_pool_create+0x10a>
    __asm__ volatile ("MRS  %0, PRIMASK ": "=r" (posture));
 800777e:	f3ef 8310 	mrs	r3, PRIMASK
 8007782:	62fb      	str	r3, [r7, #44]	; 0x2c
    return(posture);
 8007784:	6afb      	ldr	r3, [r7, #44]	; 0x2c
    int_posture = __get_interrupt_posture();
 8007786:	62bb      	str	r3, [r7, #40]	; 0x28
    __asm__ volatile ("CPSID i" : : : "memory");
 8007788:	b672      	cpsid	i
    return(int_posture);
 800778a:	6abb      	ldr	r3, [r7, #40]	; 0x28
    }
    else
    {

        /* Disable interrupts.  */
        TX_DISABLE
 800778c:	63bb      	str	r3, [r7, #56]	; 0x38

        /* Increment the preempt disable flag.  */
        _tx_thread_preempt_disable++;
 800778e:	4b3b      	ldr	r3, [pc, #236]	; (800787c <_txe_byte_pool_create+0x128>)
 8007790:	681b      	ldr	r3, [r3, #0]
 8007792:	3301      	adds	r3, #1
 8007794:	4a39      	ldr	r2, [pc, #228]	; (800787c <_txe_byte_pool_create+0x128>)
 8007796:	6013      	str	r3, [r2, #0]
 8007798:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800779a:	633b      	str	r3, [r7, #48]	; 0x30
    __asm__ volatile ("MSR  PRIMASK,%0": : "r" (int_posture): "memory");
 800779c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800779e:	f383 8810 	msr	PRIMASK, r3
}
 80077a2:	bf00      	nop

        /* Restore interrupts.  */
        TX_RESTORE

        /* Next see if it is already in the created list.  */
        next_pool =   _tx_byte_pool_created_ptr;
 80077a4:	4b36      	ldr	r3, [pc, #216]	; (8007880 <_txe_byte_pool_create+0x12c>)
 80077a6:	681b      	ldr	r3, [r3, #0]
 80077a8:	63fb      	str	r3, [r7, #60]	; 0x3c
        for (i = ((ULONG) 0); i < _tx_byte_pool_created_count; i++)
 80077aa:	2300      	movs	r3, #0
 80077ac:	643b      	str	r3, [r7, #64]	; 0x40
 80077ae:	e009      	b.n	80077c4 <_txe_byte_pool_create+0x70>
        {

            /* Determine if this byte pool matches the pool in the list.  */
            if (pool_ptr == next_pool)
 80077b0:	68fa      	ldr	r2, [r7, #12]
 80077b2:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80077b4:	429a      	cmp	r2, r3
 80077b6:	d00b      	beq.n	80077d0 <_txe_byte_pool_create+0x7c>
            }
            else
            {

                /* Move to the next pool.  */
                next_pool =  next_pool -> tx_byte_pool_created_next;
 80077b8:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80077ba:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80077bc:	63fb      	str	r3, [r7, #60]	; 0x3c
        for (i = ((ULONG) 0); i < _tx_byte_pool_created_count; i++)
 80077be:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80077c0:	3301      	adds	r3, #1
 80077c2:	643b      	str	r3, [r7, #64]	; 0x40
 80077c4:	4b2f      	ldr	r3, [pc, #188]	; (8007884 <_txe_byte_pool_create+0x130>)
 80077c6:	681b      	ldr	r3, [r3, #0]
 80077c8:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 80077ca:	429a      	cmp	r2, r3
 80077cc:	d3f0      	bcc.n	80077b0 <_txe_byte_pool_create+0x5c>
 80077ce:	e000      	b.n	80077d2 <_txe_byte_pool_create+0x7e>
                break;
 80077d0:	bf00      	nop
    __asm__ volatile ("MRS  %0, PRIMASK ": "=r" (posture));
 80077d2:	f3ef 8310 	mrs	r3, PRIMASK
 80077d6:	623b      	str	r3, [r7, #32]
    return(posture);
 80077d8:	6a3b      	ldr	r3, [r7, #32]
    int_posture = __get_interrupt_posture();
 80077da:	61fb      	str	r3, [r7, #28]
    __asm__ volatile ("CPSID i" : : : "memory");
 80077dc:	b672      	cpsid	i
    return(int_posture);
 80077de:	69fb      	ldr	r3, [r7, #28]
            }
        }

        /* Disable interrupts.  */
        TX_DISABLE
 80077e0:	63bb      	str	r3, [r7, #56]	; 0x38

        /* Decrement the preempt disable flag.  */
        _tx_thread_preempt_disable--;
 80077e2:	4b26      	ldr	r3, [pc, #152]	; (800787c <_txe_byte_pool_create+0x128>)
 80077e4:	681b      	ldr	r3, [r3, #0]
 80077e6:	3b01      	subs	r3, #1
 80077e8:	4a24      	ldr	r2, [pc, #144]	; (800787c <_txe_byte_pool_create+0x128>)
 80077ea:	6013      	str	r3, [r2, #0]
 80077ec:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80077ee:	627b      	str	r3, [r7, #36]	; 0x24
    __asm__ volatile ("MSR  PRIMASK,%0": : "r" (int_posture): "memory");
 80077f0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80077f2:	f383 8810 	msr	PRIMASK, r3
}
 80077f6:	bf00      	nop

        /* Restore interrupts.  */
        TX_RESTORE

        /* Check for preemption.  */
        _tx_thread_system_preempt_check();
 80077f8:	f7ff fa96 	bl	8006d28 <_tx_thread_system_preempt_check>

        /* At this point, check to see if there is a duplicate pool.  */
        if (pool_ptr == next_pool)
 80077fc:	68fa      	ldr	r2, [r7, #12]
 80077fe:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8007800:	429a      	cmp	r2, r3
 8007802:	d102      	bne.n	800780a <_txe_byte_pool_create+0xb6>
        {

            /* Pool is already created, return appropriate error code.  */
            status =  TX_POOL_ERROR;
 8007804:	2302      	movs	r3, #2
 8007806:	647b      	str	r3, [r7, #68]	; 0x44
 8007808:	e029      	b.n	800785e <_txe_byte_pool_create+0x10a>
        }

        /* Check for an invalid starting address.  */
        else if (pool_start == TX_NULL)
 800780a:	687b      	ldr	r3, [r7, #4]
 800780c:	2b00      	cmp	r3, #0
 800780e:	d102      	bne.n	8007816 <_txe_byte_pool_create+0xc2>
        {

            /* Null starting address pointer, return appropriate error.  */
            status =  TX_PTR_ERROR;
 8007810:	2303      	movs	r3, #3
 8007812:	647b      	str	r3, [r7, #68]	; 0x44
 8007814:	e023      	b.n	800785e <_txe_byte_pool_create+0x10a>
        }

        /* Check for invalid pool size.  */
        else if (pool_size < TX_BYTE_POOL_MIN)
 8007816:	683b      	ldr	r3, [r7, #0]
 8007818:	2b63      	cmp	r3, #99	; 0x63
 800781a:	d802      	bhi.n	8007822 <_txe_byte_pool_create+0xce>
        {

            /* Pool not big enough, return appropriate error.  */
            status =  TX_SIZE_ERROR;
 800781c:	2305      	movs	r3, #5
 800781e:	647b      	str	r3, [r7, #68]	; 0x44
 8007820:	e01d      	b.n	800785e <_txe_byte_pool_create+0x10a>
        {

#ifndef TX_TIMER_PROCESS_IN_ISR

            /* Pickup thread pointer.  */
            TX_THREAD_GET_CURRENT(thread_ptr)
 8007822:	4b19      	ldr	r3, [pc, #100]	; (8007888 <_txe_byte_pool_create+0x134>)
 8007824:	681b      	ldr	r3, [r3, #0]
 8007826:	637b      	str	r3, [r7, #52]	; 0x34

            /* Check for invalid caller of this function.  First check for a calling thread.  */
            if (thread_ptr == &_tx_timer_thread)
 8007828:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800782a:	4a18      	ldr	r2, [pc, #96]	; (800788c <_txe_byte_pool_create+0x138>)
 800782c:	4293      	cmp	r3, r2
 800782e:	d101      	bne.n	8007834 <_txe_byte_pool_create+0xe0>
            {

                /* Invalid caller of this function, return appropriate error code.  */
                status =  TX_CALLER_ERROR;
 8007830:	2313      	movs	r3, #19
 8007832:	647b      	str	r3, [r7, #68]	; 0x44
    __asm__ volatile (" MRS  %0,IPSR ": "=r" (ipsr_value) );
 8007834:	f3ef 8305 	mrs	r3, IPSR
 8007838:	61bb      	str	r3, [r7, #24]
    return(ipsr_value);
 800783a:	69ba      	ldr	r2, [r7, #24]
            }
#endif

            /* Check for interrupt call.  */
            if (TX_THREAD_GET_SYSTEM_STATE() != ((ULONG) 0))
 800783c:	4b14      	ldr	r3, [pc, #80]	; (8007890 <_txe_byte_pool_create+0x13c>)
 800783e:	681b      	ldr	r3, [r3, #0]
 8007840:	4313      	orrs	r3, r2
 8007842:	2b00      	cmp	r3, #0
 8007844:	d00b      	beq.n	800785e <_txe_byte_pool_create+0x10a>
    __asm__ volatile (" MRS  %0,IPSR ": "=r" (ipsr_value) );
 8007846:	f3ef 8305 	mrs	r3, IPSR
 800784a:	617b      	str	r3, [r7, #20]
    return(ipsr_value);
 800784c:	697a      	ldr	r2, [r7, #20]
            {

                /* Now, make sure the call is from an interrupt and not initialization.  */
                if (TX_THREAD_GET_SYSTEM_STATE() < TX_INITIALIZE_IN_PROGRESS)
 800784e:	4b10      	ldr	r3, [pc, #64]	; (8007890 <_txe_byte_pool_create+0x13c>)
 8007850:	681b      	ldr	r3, [r3, #0]
 8007852:	4313      	orrs	r3, r2
 8007854:	f1b3 3ff0 	cmp.w	r3, #4042322160	; 0xf0f0f0f0
 8007858:	d201      	bcs.n	800785e <_txe_byte_pool_create+0x10a>
                {

                    /* Invalid caller of this function, return appropriate error code.  */
                    status =  TX_CALLER_ERROR;
 800785a:	2313      	movs	r3, #19
 800785c:	647b      	str	r3, [r7, #68]	; 0x44
            }
        }
    }

    /* Determine if everything is okay.  */
    if (status == TX_SUCCESS)
 800785e:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8007860:	2b00      	cmp	r3, #0
 8007862:	d106      	bne.n	8007872 <_txe_byte_pool_create+0x11e>
    {

        /* Call actual byte pool create function.  */
        status =  _tx_byte_pool_create(pool_ptr, name_ptr, pool_start, pool_size);
 8007864:	683b      	ldr	r3, [r7, #0]
 8007866:	687a      	ldr	r2, [r7, #4]
 8007868:	68b9      	ldr	r1, [r7, #8]
 800786a:	68f8      	ldr	r0, [r7, #12]
 800786c:	f7fe fe8a 	bl	8006584 <_tx_byte_pool_create>
 8007870:	6478      	str	r0, [r7, #68]	; 0x44
    }

    /* Return completion status.  */
    return(status);
 8007872:	6c7b      	ldr	r3, [r7, #68]	; 0x44
}
 8007874:	4618      	mov	r0, r3
 8007876:	3748      	adds	r7, #72	; 0x48
 8007878:	46bd      	mov	sp, r7
 800787a:	bd80      	pop	{r7, pc}
 800787c:	24006170 	.word	0x24006170
 8007880:	240060c8 	.word	0x240060c8
 8007884:	240060cc 	.word	0x240060cc
 8007888:	240060d8 	.word	0x240060d8
 800788c:	24006220 	.word	0x24006220
 8007890:	24000010 	.word	0x24000010

08007894 <tx_low_power_enter>:
/*                                            compiler warning,           */
/*                                            resulting in version 6.1.6  */
/*                                                                        */
/**************************************************************************/
VOID  tx_low_power_enter(VOID)
{
 8007894:	b480      	push	{r7}
 8007896:	b085      	sub	sp, #20
 8007898:	af00      	add	r7, sp, #0
    __asm__ volatile ("MRS  %0, PRIMASK ": "=r" (posture));
 800789a:	f3ef 8310 	mrs	r3, PRIMASK
 800789e:	607b      	str	r3, [r7, #4]
    return(posture);
 80078a0:	687b      	ldr	r3, [r7, #4]
    int_posture = __get_interrupt_posture();
 80078a2:	603b      	str	r3, [r7, #0]
    __asm__ volatile ("CPSID i" : : : "memory");
 80078a4:	b672      	cpsid	i
    return(int_posture);
 80078a6:	683b      	ldr	r3, [r7, #0]
ULONG   tx_low_power_next_expiration;   /* The next timer experation (units of ThreadX timer ticks). */
ULONG   timers_active;
#endif

    /* Disable interrupts while we prepare for low power mode.  */
    TX_DISABLE
 80078a8:	60fb      	str	r3, [r7, #12]


    /* Set the flag indicating that low power has been entered. This 
       flag is checked in tx_low_power_exit to determine if the logic
       used to adjust the ThreadX time is required.  */
    tx_low_power_entered =  TX_TRUE;
 80078aa:	4b07      	ldr	r3, [pc, #28]	; (80078c8 <tx_low_power_enter+0x34>)
 80078ac:	2201      	movs	r2, #1
 80078ae:	601a      	str	r2, [r3, #0]
 80078b0:	68fb      	ldr	r3, [r7, #12]
 80078b2:	60bb      	str	r3, [r7, #8]
    __asm__ volatile ("MSR  PRIMASK,%0": : "r" (int_posture): "memory");
 80078b4:	68bb      	ldr	r3, [r7, #8]
 80078b6:	f383 8810 	msr	PRIMASK, r3
}
 80078ba:	bf00      	nop
#ifdef TX_LOW_POWER_USER_ENTER
    TX_LOW_POWER_USER_ENTER;
#endif

    /* If the low power code returns, this routine returns to the tx_thread_schedule loop.  */
}
 80078bc:	bf00      	nop
 80078be:	3714      	adds	r7, #20
 80078c0:	46bd      	mov	sp, r7
 80078c2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80078c6:	4770      	bx	lr
 80078c8:	240066e0 	.word	0x240066e0

080078cc <tx_low_power_exit>:
/*                                                                        */
/*  03-02-2021     William E. Lamie         Initial Version 6.1.5         */
/*                                                                        */
/**************************************************************************/
VOID  tx_low_power_exit(VOID)
{
 80078cc:	b580      	push	{r7, lr}
 80078ce:	b082      	sub	sp, #8
 80078d0:	af00      	add	r7, sp, #0
/* How many ticks to adjust ThreadX timers after exiting low power mode. */
ULONG   tx_low_power_adjust_ticks;


    /* Determine if the interrupt occurred in low power mode.  */
    if (tx_low_power_entered)
 80078d2:	4b09      	ldr	r3, [pc, #36]	; (80078f8 <tx_low_power_exit+0x2c>)
 80078d4:	681b      	ldr	r3, [r3, #0]
 80078d6:	2b00      	cmp	r3, #0
 80078d8:	d00a      	beq.n	80078f0 <tx_low_power_exit+0x24>
    {
        /* Yes, low power mode was interrupted.   */

        /* Clear the low power entered flag.  */
        tx_low_power_entered =  TX_FALSE;
 80078da:	4b07      	ldr	r3, [pc, #28]	; (80078f8 <tx_low_power_exit+0x2c>)
 80078dc:	2200      	movs	r2, #0
 80078de:	601a      	str	r2, [r3, #0]
#ifdef TX_LOW_POWER_USER_TIMER_ADJUST
        /* Call the user's low-power timer code to obtain the amount of time (in ticks)
           the system has been in low power mode. */
        tx_low_power_adjust_ticks = TX_LOW_POWER_USER_TIMER_ADJUST;
#else
        tx_low_power_adjust_ticks = (ULONG) 0;
 80078e0:	2300      	movs	r3, #0
 80078e2:	607b      	str	r3, [r7, #4]
#endif

        /* Determine if the ThreadX timer(s) needs incrementing.  */
        if (tx_low_power_adjust_ticks)
 80078e4:	687b      	ldr	r3, [r7, #4]
 80078e6:	2b00      	cmp	r3, #0
 80078e8:	d002      	beq.n	80078f0 <tx_low_power_exit+0x24>
        {
            /* Yes, the ThreadX timer(s) must be incremented.  */
            tx_time_increment(tx_low_power_adjust_ticks);
 80078ea:	6878      	ldr	r0, [r7, #4]
 80078ec:	f000 f806 	bl	80078fc <tx_time_increment>
        }
    }
}
 80078f0:	bf00      	nop
 80078f2:	3708      	adds	r7, #8
 80078f4:	46bd      	mov	sp, r7
 80078f6:	bd80      	pop	{r7, pc}
 80078f8:	240066e0 	.word	0x240066e0

080078fc <tx_time_increment>:
/*                                                                        */
/*  03-02-2021     William E. Lamie         Initial Version 6.1.5         */
/*                                                                        */
/**************************************************************************/
VOID  tx_time_increment(ULONG time_increment)
{
 80078fc:	b580      	push	{r7, lr}
 80078fe:	b08a      	sub	sp, #40	; 0x28
 8007900:	af00      	add	r7, sp, #0
 8007902:	6078      	str	r0, [r7, #4]
TX_TIMER_INTERNAL           *next_timer;
TX_TIMER_INTERNAL           *temp_list_head;


    /* Determine if there is any time increment.  */
    if (time_increment == 0)
 8007904:	687b      	ldr	r3, [r7, #4]
 8007906:	2b00      	cmp	r3, #0
 8007908:	f000 809b 	beq.w	8007a42 <tx_time_increment+0x146>
    __asm__ volatile ("MRS  %0, PRIMASK ": "=r" (posture));
 800790c:	f3ef 8310 	mrs	r3, PRIMASK
 8007910:	613b      	str	r3, [r7, #16]
    return(posture);
 8007912:	693b      	ldr	r3, [r7, #16]
    int_posture = __get_interrupt_posture();
 8007914:	60fb      	str	r3, [r7, #12]
    __asm__ volatile ("CPSID i" : : : "memory");
 8007916:	b672      	cpsid	i
    return(int_posture);
 8007918:	68fb      	ldr	r3, [r7, #12]
        /* Nothing to do, just return.  */
        return;
    }

    /* Disable interrupts.  */
    TX_DISABLE
 800791a:	617b      	str	r3, [r7, #20]

    /* Adjust the system clock.  */
    _tx_timer_system_clock =  _tx_timer_system_clock + time_increment;
 800791c:	4b4b      	ldr	r3, [pc, #300]	; (8007a4c <tx_time_increment+0x150>)
 800791e:	681a      	ldr	r2, [r3, #0]
 8007920:	687b      	ldr	r3, [r7, #4]
 8007922:	4413      	add	r3, r2
 8007924:	4a49      	ldr	r2, [pc, #292]	; (8007a4c <tx_time_increment+0x150>)
 8007926:	6013      	str	r3, [r2, #0]

    /* Adjust the time slice variable.  */
    if (_tx_timer_time_slice)
 8007928:	4b49      	ldr	r3, [pc, #292]	; (8007a50 <tx_time_increment+0x154>)
 800792a:	681b      	ldr	r3, [r3, #0]
 800792c:	2b00      	cmp	r3, #0
 800792e:	d00e      	beq.n	800794e <tx_time_increment+0x52>
    {
        /* Decrement the time-slice variable.  */
        if (_tx_timer_time_slice > time_increment)
 8007930:	4b47      	ldr	r3, [pc, #284]	; (8007a50 <tx_time_increment+0x154>)
 8007932:	681b      	ldr	r3, [r3, #0]
 8007934:	687a      	ldr	r2, [r7, #4]
 8007936:	429a      	cmp	r2, r3
 8007938:	d206      	bcs.n	8007948 <tx_time_increment+0x4c>
        {
            _tx_timer_time_slice =  _tx_timer_time_slice - time_increment;
 800793a:	4b45      	ldr	r3, [pc, #276]	; (8007a50 <tx_time_increment+0x154>)
 800793c:	681a      	ldr	r2, [r3, #0]
 800793e:	687b      	ldr	r3, [r7, #4]
 8007940:	1ad3      	subs	r3, r2, r3
 8007942:	4a43      	ldr	r2, [pc, #268]	; (8007a50 <tx_time_increment+0x154>)
 8007944:	6013      	str	r3, [r2, #0]
 8007946:	e002      	b.n	800794e <tx_time_increment+0x52>
        }
        else
        {
            _tx_timer_time_slice =  1;
 8007948:	4b41      	ldr	r3, [pc, #260]	; (8007a50 <tx_time_increment+0x154>)
 800794a:	2201      	movs	r2, #1
 800794c:	601a      	str	r2, [r3, #0]
        }
    }

    /* Calculate the proper place to position the timer.  */
    timer_list_head =  _tx_timer_current_ptr;
 800794e:	4b41      	ldr	r3, [pc, #260]	; (8007a54 <tx_time_increment+0x158>)
 8007950:	681b      	ldr	r3, [r3, #0]
 8007952:	623b      	str	r3, [r7, #32]

    /* Setup the temporary list pointer.  */
    temp_list_head =  TX_NULL;
 8007954:	2300      	movs	r3, #0
 8007956:	61bb      	str	r3, [r7, #24]

    /* Loop to pull all timers off the timer structure and put on the temporary list head.  */
    for (i = 0; i < TX_TIMER_ENTRIES; i++)
 8007958:	2300      	movs	r3, #0
 800795a:	627b      	str	r3, [r7, #36]	; 0x24
 800795c:	e046      	b.n	80079ec <tx_time_increment+0xf0>
    {
        /* Determine if there is a timer list in this entry.  */
        if (*timer_list_head)
 800795e:	6a3b      	ldr	r3, [r7, #32]
 8007960:	681b      	ldr	r3, [r3, #0]
 8007962:	2b00      	cmp	r3, #0
 8007964:	d034      	beq.n	80079d0 <tx_time_increment+0xd4>
        {
            /* Walk the list and update all the relative times to actual times.  */

            /* Setup the pointer to the expiration list.  */
            next_timer =  *timer_list_head;
 8007966:	6a3b      	ldr	r3, [r7, #32]
 8007968:	681b      	ldr	r3, [r3, #0]
 800796a:	61fb      	str	r3, [r7, #28]

            /* Loop through the timers active for this relative time slot (determined by i).  */
            do
            {
                /* Determine if the remaining time is larger than the list.  */
                if (next_timer -> tx_timer_internal_remaining_ticks > TX_TIMER_ENTRIES)
 800796c:	69fb      	ldr	r3, [r7, #28]
 800796e:	681b      	ldr	r3, [r3, #0]
 8007970:	2b20      	cmp	r3, #32
 8007972:	d908      	bls.n	8007986 <tx_time_increment+0x8a>
                {
                    /* Calculate the actual expiration time.  */
                    next_timer -> tx_timer_internal_remaining_ticks =
                                    next_timer -> tx_timer_internal_remaining_ticks - (TX_TIMER_ENTRIES - i) + 1;
 8007974:	69fb      	ldr	r3, [r7, #28]
 8007976:	681a      	ldr	r2, [r3, #0]
 8007978:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800797a:	4413      	add	r3, r2
 800797c:	f1a3 021f 	sub.w	r2, r3, #31
                    next_timer -> tx_timer_internal_remaining_ticks =
 8007980:	69fb      	ldr	r3, [r7, #28]
 8007982:	601a      	str	r2, [r3, #0]
 8007984:	e003      	b.n	800798e <tx_time_increment+0x92>
                }
                else
                {
                    /* Calculate the expiration time, which is simply the number of entries in this case.  */
                    next_timer -> tx_timer_internal_remaining_ticks =  i + 1;
 8007986:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007988:	1c5a      	adds	r2, r3, #1
 800798a:	69fb      	ldr	r3, [r7, #28]
 800798c:	601a      	str	r2, [r3, #0]
                }

                /* Move to the next entry in the timer list.  */
                next_timer =  next_timer -> tx_timer_internal_active_next;
 800798e:	69fb      	ldr	r3, [r7, #28]
 8007990:	691b      	ldr	r3, [r3, #16]
 8007992:	61fb      	str	r3, [r7, #28]

            } while (next_timer != *timer_list_head);
 8007994:	6a3b      	ldr	r3, [r7, #32]
 8007996:	681b      	ldr	r3, [r3, #0]
 8007998:	69fa      	ldr	r2, [r7, #28]
 800799a:	429a      	cmp	r2, r3
 800799c:	d1e6      	bne.n	800796c <tx_time_increment+0x70>

            /* NULL terminate the current timer list.  */
            ((*timer_list_head) -> tx_timer_internal_active_previous) -> tx_timer_internal_active_next =  TX_NULL;
 800799e:	6a3b      	ldr	r3, [r7, #32]
 80079a0:	681b      	ldr	r3, [r3, #0]
 80079a2:	695b      	ldr	r3, [r3, #20]
 80079a4:	2200      	movs	r2, #0
 80079a6:	611a      	str	r2, [r3, #16]

            /* Yes, determine if the temporary list is NULL.  */
            if (temp_list_head == TX_NULL)
 80079a8:	69bb      	ldr	r3, [r7, #24]
 80079aa:	2b00      	cmp	r3, #0
 80079ac:	d103      	bne.n	80079b6 <tx_time_increment+0xba>
            {
                /* First item on the list.  Move the entire linked list.  */
                temp_list_head =  *timer_list_head;
 80079ae:	6a3b      	ldr	r3, [r7, #32]
 80079b0:	681b      	ldr	r3, [r3, #0]
 80079b2:	61bb      	str	r3, [r7, #24]
 80079b4:	e009      	b.n	80079ca <tx_time_increment+0xce>
            }
            else
            {
                /* No, the temp list already has timers on it. Link the next timer list to the end.  */
                (temp_list_head -> tx_timer_internal_active_previous) -> tx_timer_internal_active_next =  *timer_list_head;
 80079b6:	69bb      	ldr	r3, [r7, #24]
 80079b8:	695b      	ldr	r3, [r3, #20]
 80079ba:	6a3a      	ldr	r2, [r7, #32]
 80079bc:	6812      	ldr	r2, [r2, #0]
 80079be:	611a      	str	r2, [r3, #16]

                /* Now update the previous to the new list's previous timer pointer.  */
                temp_list_head -> tx_timer_internal_active_previous =  (*timer_list_head) -> tx_timer_internal_active_previous;
 80079c0:	6a3b      	ldr	r3, [r7, #32]
 80079c2:	681b      	ldr	r3, [r3, #0]
 80079c4:	695a      	ldr	r2, [r3, #20]
 80079c6:	69bb      	ldr	r3, [r7, #24]
 80079c8:	615a      	str	r2, [r3, #20]
            }

            /* Now clear the current timer head pointer.  */
            *timer_list_head =  TX_NULL;
 80079ca:	6a3b      	ldr	r3, [r7, #32]
 80079cc:	2200      	movs	r2, #0
 80079ce:	601a      	str	r2, [r3, #0]
        }
        
        /* Move to next timer entry.  */
        timer_list_head++;
 80079d0:	6a3b      	ldr	r3, [r7, #32]
 80079d2:	3304      	adds	r3, #4
 80079d4:	623b      	str	r3, [r7, #32]

        /* Determine if a wrap around condition has occurred.  */
        if (timer_list_head >= _tx_timer_list_end)
 80079d6:	4b20      	ldr	r3, [pc, #128]	; (8007a58 <tx_time_increment+0x15c>)
 80079d8:	681b      	ldr	r3, [r3, #0]
 80079da:	6a3a      	ldr	r2, [r7, #32]
 80079dc:	429a      	cmp	r2, r3
 80079de:	d302      	bcc.n	80079e6 <tx_time_increment+0xea>
        {
            /* Wrap from the beginning of the list.  */
            timer_list_head =  _tx_timer_list_start;
 80079e0:	4b1e      	ldr	r3, [pc, #120]	; (8007a5c <tx_time_increment+0x160>)
 80079e2:	681b      	ldr	r3, [r3, #0]
 80079e4:	623b      	str	r3, [r7, #32]
    for (i = 0; i < TX_TIMER_ENTRIES; i++)
 80079e6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80079e8:	3301      	adds	r3, #1
 80079ea:	627b      	str	r3, [r7, #36]	; 0x24
 80079ec:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80079ee:	2b1f      	cmp	r3, #31
 80079f0:	d9b5      	bls.n	800795e <tx_time_increment+0x62>
        }
    }

    /* Set the current timer pointer to the beginning of the list.  */
    _tx_timer_current_ptr =  _tx_timer_list_start;
 80079f2:	4b1a      	ldr	r3, [pc, #104]	; (8007a5c <tx_time_increment+0x160>)
 80079f4:	681b      	ldr	r3, [r3, #0]
 80079f6:	4a17      	ldr	r2, [pc, #92]	; (8007a54 <tx_time_increment+0x158>)
 80079f8:	6013      	str	r3, [r2, #0]

    /* Loop to update and reinsert all the timers in the list.  */
    while (temp_list_head)
 80079fa:	e019      	b.n	8007a30 <tx_time_increment+0x134>
    {
        /* Pickup the next timer to update and reinsert.  */
        next_timer =  temp_list_head;
 80079fc:	69bb      	ldr	r3, [r7, #24]
 80079fe:	61fb      	str	r3, [r7, #28]

        /* Move the temp list head pointer to the next pointer.  */
        temp_list_head =  next_timer -> tx_timer_internal_active_next;
 8007a00:	69fb      	ldr	r3, [r7, #28]
 8007a02:	691b      	ldr	r3, [r3, #16]
 8007a04:	61bb      	str	r3, [r7, #24]

        /* Determine if the remaining time is greater than the time increment
           value - this is the normal case.  */
        if (next_timer -> tx_timer_internal_remaining_ticks > time_increment)
 8007a06:	69fb      	ldr	r3, [r7, #28]
 8007a08:	681b      	ldr	r3, [r3, #0]
 8007a0a:	687a      	ldr	r2, [r7, #4]
 8007a0c:	429a      	cmp	r2, r3
 8007a0e:	d206      	bcs.n	8007a1e <tx_time_increment+0x122>
        {
            /* Decrement the elapsed time.  */
            next_timer -> tx_timer_internal_remaining_ticks =  next_timer -> tx_timer_internal_remaining_ticks - time_increment;
 8007a10:	69fb      	ldr	r3, [r7, #28]
 8007a12:	681a      	ldr	r2, [r3, #0]
 8007a14:	687b      	ldr	r3, [r7, #4]
 8007a16:	1ad2      	subs	r2, r2, r3
 8007a18:	69fb      	ldr	r3, [r7, #28]
 8007a1a:	601a      	str	r2, [r3, #0]
 8007a1c:	e002      	b.n	8007a24 <tx_time_increment+0x128>
        }
        else
        {
            /* Simply set the expiration value to expire on the next tick.  */
            next_timer -> tx_timer_internal_remaining_ticks =  1;
 8007a1e:	69fb      	ldr	r3, [r7, #28]
 8007a20:	2201      	movs	r2, #1
 8007a22:	601a      	str	r2, [r3, #0]
        }

        /* Now clear the timer list head pointer for the timer activate function to work properly.  */
        next_timer -> tx_timer_internal_list_head =  TX_NULL;
 8007a24:	69fb      	ldr	r3, [r7, #28]
 8007a26:	2200      	movs	r2, #0
 8007a28:	619a      	str	r2, [r3, #24]

        /* Now re-insert the timer into the list.  */
        _tx_timer_system_activate(next_timer);
 8007a2a:	69f8      	ldr	r0, [r7, #28]
 8007a2c:	f7ff fcfa 	bl	8007424 <_tx_timer_system_activate>
    while (temp_list_head)
 8007a30:	69bb      	ldr	r3, [r7, #24]
 8007a32:	2b00      	cmp	r3, #0
 8007a34:	d1e2      	bne.n	80079fc <tx_time_increment+0x100>
 8007a36:	697b      	ldr	r3, [r7, #20]
 8007a38:	60bb      	str	r3, [r7, #8]
    __asm__ volatile ("MSR  PRIMASK,%0": : "r" (int_posture): "memory");
 8007a3a:	68bb      	ldr	r3, [r7, #8]
 8007a3c:	f383 8810 	msr	PRIMASK, r3
}
 8007a40:	e000      	b.n	8007a44 <tx_time_increment+0x148>
        return;
 8007a42:	bf00      	nop
    }

    /* Restore interrupts.  */
    TX_RESTORE
}
 8007a44:	3728      	adds	r7, #40	; 0x28
 8007a46:	46bd      	mov	sp, r7
 8007a48:	bd80      	pop	{r7, pc}
 8007a4a:	bf00      	nop
 8007a4c:	2400617c 	.word	0x2400617c
 8007a50:	240066dc 	.word	0x240066dc
 8007a54:	2400620c 	.word	0x2400620c
 8007a58:	24006208 	.word	0x24006208
 8007a5c:	24006204 	.word	0x24006204

08007a60 <__errno>:
 8007a60:	4b01      	ldr	r3, [pc, #4]	; (8007a68 <__errno+0x8>)
 8007a62:	6818      	ldr	r0, [r3, #0]
 8007a64:	4770      	bx	lr
 8007a66:	bf00      	nop
 8007a68:	24000014 	.word	0x24000014

08007a6c <__libc_init_array>:
 8007a6c:	b570      	push	{r4, r5, r6, lr}
 8007a6e:	4d0d      	ldr	r5, [pc, #52]	; (8007aa4 <__libc_init_array+0x38>)
 8007a70:	4c0d      	ldr	r4, [pc, #52]	; (8007aa8 <__libc_init_array+0x3c>)
 8007a72:	1b64      	subs	r4, r4, r5
 8007a74:	10a4      	asrs	r4, r4, #2
 8007a76:	2600      	movs	r6, #0
 8007a78:	42a6      	cmp	r6, r4
 8007a7a:	d109      	bne.n	8007a90 <__libc_init_array+0x24>
 8007a7c:	4d0b      	ldr	r5, [pc, #44]	; (8007aac <__libc_init_array+0x40>)
 8007a7e:	4c0c      	ldr	r4, [pc, #48]	; (8007ab0 <__libc_init_array+0x44>)
 8007a80:	f000 ffae 	bl	80089e0 <_init>
 8007a84:	1b64      	subs	r4, r4, r5
 8007a86:	10a4      	asrs	r4, r4, #2
 8007a88:	2600      	movs	r6, #0
 8007a8a:	42a6      	cmp	r6, r4
 8007a8c:	d105      	bne.n	8007a9a <__libc_init_array+0x2e>
 8007a8e:	bd70      	pop	{r4, r5, r6, pc}
 8007a90:	f855 3b04 	ldr.w	r3, [r5], #4
 8007a94:	4798      	blx	r3
 8007a96:	3601      	adds	r6, #1
 8007a98:	e7ee      	b.n	8007a78 <__libc_init_array+0xc>
 8007a9a:	f855 3b04 	ldr.w	r3, [r5], #4
 8007a9e:	4798      	blx	r3
 8007aa0:	3601      	adds	r6, #1
 8007aa2:	e7f2      	b.n	8007a8a <__libc_init_array+0x1e>
 8007aa4:	08008c14 	.word	0x08008c14
 8007aa8:	08008c14 	.word	0x08008c14
 8007aac:	08008c14 	.word	0x08008c14
 8007ab0:	08008c18 	.word	0x08008c18

08007ab4 <memset>:
 8007ab4:	4402      	add	r2, r0
 8007ab6:	4603      	mov	r3, r0
 8007ab8:	4293      	cmp	r3, r2
 8007aba:	d100      	bne.n	8007abe <memset+0xa>
 8007abc:	4770      	bx	lr
 8007abe:	f803 1b01 	strb.w	r1, [r3], #1
 8007ac2:	e7f9      	b.n	8007ab8 <memset+0x4>

08007ac4 <iprintf>:
 8007ac4:	b40f      	push	{r0, r1, r2, r3}
 8007ac6:	4b0a      	ldr	r3, [pc, #40]	; (8007af0 <iprintf+0x2c>)
 8007ac8:	b513      	push	{r0, r1, r4, lr}
 8007aca:	681c      	ldr	r4, [r3, #0]
 8007acc:	b124      	cbz	r4, 8007ad8 <iprintf+0x14>
 8007ace:	69a3      	ldr	r3, [r4, #24]
 8007ad0:	b913      	cbnz	r3, 8007ad8 <iprintf+0x14>
 8007ad2:	4620      	mov	r0, r4
 8007ad4:	f000 f866 	bl	8007ba4 <__sinit>
 8007ad8:	ab05      	add	r3, sp, #20
 8007ada:	9a04      	ldr	r2, [sp, #16]
 8007adc:	68a1      	ldr	r1, [r4, #8]
 8007ade:	9301      	str	r3, [sp, #4]
 8007ae0:	4620      	mov	r0, r4
 8007ae2:	f000 f9bd 	bl	8007e60 <_vfiprintf_r>
 8007ae6:	b002      	add	sp, #8
 8007ae8:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8007aec:	b004      	add	sp, #16
 8007aee:	4770      	bx	lr
 8007af0:	24000014 	.word	0x24000014

08007af4 <std>:
 8007af4:	2300      	movs	r3, #0
 8007af6:	b510      	push	{r4, lr}
 8007af8:	4604      	mov	r4, r0
 8007afa:	e9c0 3300 	strd	r3, r3, [r0]
 8007afe:	e9c0 3304 	strd	r3, r3, [r0, #16]
 8007b02:	6083      	str	r3, [r0, #8]
 8007b04:	8181      	strh	r1, [r0, #12]
 8007b06:	6643      	str	r3, [r0, #100]	; 0x64
 8007b08:	81c2      	strh	r2, [r0, #14]
 8007b0a:	6183      	str	r3, [r0, #24]
 8007b0c:	4619      	mov	r1, r3
 8007b0e:	2208      	movs	r2, #8
 8007b10:	305c      	adds	r0, #92	; 0x5c
 8007b12:	f7ff ffcf 	bl	8007ab4 <memset>
 8007b16:	4b05      	ldr	r3, [pc, #20]	; (8007b2c <std+0x38>)
 8007b18:	6263      	str	r3, [r4, #36]	; 0x24
 8007b1a:	4b05      	ldr	r3, [pc, #20]	; (8007b30 <std+0x3c>)
 8007b1c:	62a3      	str	r3, [r4, #40]	; 0x28
 8007b1e:	4b05      	ldr	r3, [pc, #20]	; (8007b34 <std+0x40>)
 8007b20:	62e3      	str	r3, [r4, #44]	; 0x2c
 8007b22:	4b05      	ldr	r3, [pc, #20]	; (8007b38 <std+0x44>)
 8007b24:	6224      	str	r4, [r4, #32]
 8007b26:	6323      	str	r3, [r4, #48]	; 0x30
 8007b28:	bd10      	pop	{r4, pc}
 8007b2a:	bf00      	nop
 8007b2c:	08008409 	.word	0x08008409
 8007b30:	0800842b 	.word	0x0800842b
 8007b34:	08008463 	.word	0x08008463
 8007b38:	08008487 	.word	0x08008487

08007b3c <_cleanup_r>:
 8007b3c:	4901      	ldr	r1, [pc, #4]	; (8007b44 <_cleanup_r+0x8>)
 8007b3e:	f000 b8af 	b.w	8007ca0 <_fwalk_reent>
 8007b42:	bf00      	nop
 8007b44:	08008761 	.word	0x08008761

08007b48 <__sfmoreglue>:
 8007b48:	b570      	push	{r4, r5, r6, lr}
 8007b4a:	2268      	movs	r2, #104	; 0x68
 8007b4c:	1e4d      	subs	r5, r1, #1
 8007b4e:	4355      	muls	r5, r2
 8007b50:	460e      	mov	r6, r1
 8007b52:	f105 0174 	add.w	r1, r5, #116	; 0x74
 8007b56:	f000 f8e5 	bl	8007d24 <_malloc_r>
 8007b5a:	4604      	mov	r4, r0
 8007b5c:	b140      	cbz	r0, 8007b70 <__sfmoreglue+0x28>
 8007b5e:	2100      	movs	r1, #0
 8007b60:	e9c0 1600 	strd	r1, r6, [r0]
 8007b64:	300c      	adds	r0, #12
 8007b66:	60a0      	str	r0, [r4, #8]
 8007b68:	f105 0268 	add.w	r2, r5, #104	; 0x68
 8007b6c:	f7ff ffa2 	bl	8007ab4 <memset>
 8007b70:	4620      	mov	r0, r4
 8007b72:	bd70      	pop	{r4, r5, r6, pc}

08007b74 <__sfp_lock_acquire>:
 8007b74:	4801      	ldr	r0, [pc, #4]	; (8007b7c <__sfp_lock_acquire+0x8>)
 8007b76:	f000 b8b3 	b.w	8007ce0 <__retarget_lock_acquire_recursive>
 8007b7a:	bf00      	nop
 8007b7c:	240066e5 	.word	0x240066e5

08007b80 <__sfp_lock_release>:
 8007b80:	4801      	ldr	r0, [pc, #4]	; (8007b88 <__sfp_lock_release+0x8>)
 8007b82:	f000 b8ae 	b.w	8007ce2 <__retarget_lock_release_recursive>
 8007b86:	bf00      	nop
 8007b88:	240066e5 	.word	0x240066e5

08007b8c <__sinit_lock_acquire>:
 8007b8c:	4801      	ldr	r0, [pc, #4]	; (8007b94 <__sinit_lock_acquire+0x8>)
 8007b8e:	f000 b8a7 	b.w	8007ce0 <__retarget_lock_acquire_recursive>
 8007b92:	bf00      	nop
 8007b94:	240066e6 	.word	0x240066e6

08007b98 <__sinit_lock_release>:
 8007b98:	4801      	ldr	r0, [pc, #4]	; (8007ba0 <__sinit_lock_release+0x8>)
 8007b9a:	f000 b8a2 	b.w	8007ce2 <__retarget_lock_release_recursive>
 8007b9e:	bf00      	nop
 8007ba0:	240066e6 	.word	0x240066e6

08007ba4 <__sinit>:
 8007ba4:	b510      	push	{r4, lr}
 8007ba6:	4604      	mov	r4, r0
 8007ba8:	f7ff fff0 	bl	8007b8c <__sinit_lock_acquire>
 8007bac:	69a3      	ldr	r3, [r4, #24]
 8007bae:	b11b      	cbz	r3, 8007bb8 <__sinit+0x14>
 8007bb0:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8007bb4:	f7ff bff0 	b.w	8007b98 <__sinit_lock_release>
 8007bb8:	e9c4 3312 	strd	r3, r3, [r4, #72]	; 0x48
 8007bbc:	6523      	str	r3, [r4, #80]	; 0x50
 8007bbe:	4b13      	ldr	r3, [pc, #76]	; (8007c0c <__sinit+0x68>)
 8007bc0:	4a13      	ldr	r2, [pc, #76]	; (8007c10 <__sinit+0x6c>)
 8007bc2:	681b      	ldr	r3, [r3, #0]
 8007bc4:	62a2      	str	r2, [r4, #40]	; 0x28
 8007bc6:	42a3      	cmp	r3, r4
 8007bc8:	bf04      	itt	eq
 8007bca:	2301      	moveq	r3, #1
 8007bcc:	61a3      	streq	r3, [r4, #24]
 8007bce:	4620      	mov	r0, r4
 8007bd0:	f000 f820 	bl	8007c14 <__sfp>
 8007bd4:	6060      	str	r0, [r4, #4]
 8007bd6:	4620      	mov	r0, r4
 8007bd8:	f000 f81c 	bl	8007c14 <__sfp>
 8007bdc:	60a0      	str	r0, [r4, #8]
 8007bde:	4620      	mov	r0, r4
 8007be0:	f000 f818 	bl	8007c14 <__sfp>
 8007be4:	2200      	movs	r2, #0
 8007be6:	60e0      	str	r0, [r4, #12]
 8007be8:	2104      	movs	r1, #4
 8007bea:	6860      	ldr	r0, [r4, #4]
 8007bec:	f7ff ff82 	bl	8007af4 <std>
 8007bf0:	68a0      	ldr	r0, [r4, #8]
 8007bf2:	2201      	movs	r2, #1
 8007bf4:	2109      	movs	r1, #9
 8007bf6:	f7ff ff7d 	bl	8007af4 <std>
 8007bfa:	68e0      	ldr	r0, [r4, #12]
 8007bfc:	2202      	movs	r2, #2
 8007bfe:	2112      	movs	r1, #18
 8007c00:	f7ff ff78 	bl	8007af4 <std>
 8007c04:	2301      	movs	r3, #1
 8007c06:	61a3      	str	r3, [r4, #24]
 8007c08:	e7d2      	b.n	8007bb0 <__sinit+0xc>
 8007c0a:	bf00      	nop
 8007c0c:	08008b74 	.word	0x08008b74
 8007c10:	08007b3d 	.word	0x08007b3d

08007c14 <__sfp>:
 8007c14:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8007c16:	4607      	mov	r7, r0
 8007c18:	f7ff ffac 	bl	8007b74 <__sfp_lock_acquire>
 8007c1c:	4b1e      	ldr	r3, [pc, #120]	; (8007c98 <__sfp+0x84>)
 8007c1e:	681e      	ldr	r6, [r3, #0]
 8007c20:	69b3      	ldr	r3, [r6, #24]
 8007c22:	b913      	cbnz	r3, 8007c2a <__sfp+0x16>
 8007c24:	4630      	mov	r0, r6
 8007c26:	f7ff ffbd 	bl	8007ba4 <__sinit>
 8007c2a:	3648      	adds	r6, #72	; 0x48
 8007c2c:	e9d6 3401 	ldrd	r3, r4, [r6, #4]
 8007c30:	3b01      	subs	r3, #1
 8007c32:	d503      	bpl.n	8007c3c <__sfp+0x28>
 8007c34:	6833      	ldr	r3, [r6, #0]
 8007c36:	b30b      	cbz	r3, 8007c7c <__sfp+0x68>
 8007c38:	6836      	ldr	r6, [r6, #0]
 8007c3a:	e7f7      	b.n	8007c2c <__sfp+0x18>
 8007c3c:	f9b4 500c 	ldrsh.w	r5, [r4, #12]
 8007c40:	b9d5      	cbnz	r5, 8007c78 <__sfp+0x64>
 8007c42:	4b16      	ldr	r3, [pc, #88]	; (8007c9c <__sfp+0x88>)
 8007c44:	60e3      	str	r3, [r4, #12]
 8007c46:	f104 0058 	add.w	r0, r4, #88	; 0x58
 8007c4a:	6665      	str	r5, [r4, #100]	; 0x64
 8007c4c:	f000 f847 	bl	8007cde <__retarget_lock_init_recursive>
 8007c50:	f7ff ff96 	bl	8007b80 <__sfp_lock_release>
 8007c54:	e9c4 5501 	strd	r5, r5, [r4, #4]
 8007c58:	e9c4 5504 	strd	r5, r5, [r4, #16]
 8007c5c:	6025      	str	r5, [r4, #0]
 8007c5e:	61a5      	str	r5, [r4, #24]
 8007c60:	2208      	movs	r2, #8
 8007c62:	4629      	mov	r1, r5
 8007c64:	f104 005c 	add.w	r0, r4, #92	; 0x5c
 8007c68:	f7ff ff24 	bl	8007ab4 <memset>
 8007c6c:	e9c4 550d 	strd	r5, r5, [r4, #52]	; 0x34
 8007c70:	e9c4 5512 	strd	r5, r5, [r4, #72]	; 0x48
 8007c74:	4620      	mov	r0, r4
 8007c76:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8007c78:	3468      	adds	r4, #104	; 0x68
 8007c7a:	e7d9      	b.n	8007c30 <__sfp+0x1c>
 8007c7c:	2104      	movs	r1, #4
 8007c7e:	4638      	mov	r0, r7
 8007c80:	f7ff ff62 	bl	8007b48 <__sfmoreglue>
 8007c84:	4604      	mov	r4, r0
 8007c86:	6030      	str	r0, [r6, #0]
 8007c88:	2800      	cmp	r0, #0
 8007c8a:	d1d5      	bne.n	8007c38 <__sfp+0x24>
 8007c8c:	f7ff ff78 	bl	8007b80 <__sfp_lock_release>
 8007c90:	230c      	movs	r3, #12
 8007c92:	603b      	str	r3, [r7, #0]
 8007c94:	e7ee      	b.n	8007c74 <__sfp+0x60>
 8007c96:	bf00      	nop
 8007c98:	08008b74 	.word	0x08008b74
 8007c9c:	ffff0001 	.word	0xffff0001

08007ca0 <_fwalk_reent>:
 8007ca0:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8007ca4:	4606      	mov	r6, r0
 8007ca6:	4688      	mov	r8, r1
 8007ca8:	f100 0448 	add.w	r4, r0, #72	; 0x48
 8007cac:	2700      	movs	r7, #0
 8007cae:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 8007cb2:	f1b9 0901 	subs.w	r9, r9, #1
 8007cb6:	d505      	bpl.n	8007cc4 <_fwalk_reent+0x24>
 8007cb8:	6824      	ldr	r4, [r4, #0]
 8007cba:	2c00      	cmp	r4, #0
 8007cbc:	d1f7      	bne.n	8007cae <_fwalk_reent+0xe>
 8007cbe:	4638      	mov	r0, r7
 8007cc0:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8007cc4:	89ab      	ldrh	r3, [r5, #12]
 8007cc6:	2b01      	cmp	r3, #1
 8007cc8:	d907      	bls.n	8007cda <_fwalk_reent+0x3a>
 8007cca:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 8007cce:	3301      	adds	r3, #1
 8007cd0:	d003      	beq.n	8007cda <_fwalk_reent+0x3a>
 8007cd2:	4629      	mov	r1, r5
 8007cd4:	4630      	mov	r0, r6
 8007cd6:	47c0      	blx	r8
 8007cd8:	4307      	orrs	r7, r0
 8007cda:	3568      	adds	r5, #104	; 0x68
 8007cdc:	e7e9      	b.n	8007cb2 <_fwalk_reent+0x12>

08007cde <__retarget_lock_init_recursive>:
 8007cde:	4770      	bx	lr

08007ce0 <__retarget_lock_acquire_recursive>:
 8007ce0:	4770      	bx	lr

08007ce2 <__retarget_lock_release_recursive>:
 8007ce2:	4770      	bx	lr

08007ce4 <sbrk_aligned>:
 8007ce4:	b570      	push	{r4, r5, r6, lr}
 8007ce6:	4e0e      	ldr	r6, [pc, #56]	; (8007d20 <sbrk_aligned+0x3c>)
 8007ce8:	460c      	mov	r4, r1
 8007cea:	6831      	ldr	r1, [r6, #0]
 8007cec:	4605      	mov	r5, r0
 8007cee:	b911      	cbnz	r1, 8007cf6 <sbrk_aligned+0x12>
 8007cf0:	f000 fb7a 	bl	80083e8 <_sbrk_r>
 8007cf4:	6030      	str	r0, [r6, #0]
 8007cf6:	4621      	mov	r1, r4
 8007cf8:	4628      	mov	r0, r5
 8007cfa:	f000 fb75 	bl	80083e8 <_sbrk_r>
 8007cfe:	1c43      	adds	r3, r0, #1
 8007d00:	d00a      	beq.n	8007d18 <sbrk_aligned+0x34>
 8007d02:	1cc4      	adds	r4, r0, #3
 8007d04:	f024 0403 	bic.w	r4, r4, #3
 8007d08:	42a0      	cmp	r0, r4
 8007d0a:	d007      	beq.n	8007d1c <sbrk_aligned+0x38>
 8007d0c:	1a21      	subs	r1, r4, r0
 8007d0e:	4628      	mov	r0, r5
 8007d10:	f000 fb6a 	bl	80083e8 <_sbrk_r>
 8007d14:	3001      	adds	r0, #1
 8007d16:	d101      	bne.n	8007d1c <sbrk_aligned+0x38>
 8007d18:	f04f 34ff 	mov.w	r4, #4294967295
 8007d1c:	4620      	mov	r0, r4
 8007d1e:	bd70      	pop	{r4, r5, r6, pc}
 8007d20:	240066ec 	.word	0x240066ec

08007d24 <_malloc_r>:
 8007d24:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8007d28:	1ccd      	adds	r5, r1, #3
 8007d2a:	f025 0503 	bic.w	r5, r5, #3
 8007d2e:	3508      	adds	r5, #8
 8007d30:	2d0c      	cmp	r5, #12
 8007d32:	bf38      	it	cc
 8007d34:	250c      	movcc	r5, #12
 8007d36:	2d00      	cmp	r5, #0
 8007d38:	4607      	mov	r7, r0
 8007d3a:	db01      	blt.n	8007d40 <_malloc_r+0x1c>
 8007d3c:	42a9      	cmp	r1, r5
 8007d3e:	d905      	bls.n	8007d4c <_malloc_r+0x28>
 8007d40:	230c      	movs	r3, #12
 8007d42:	603b      	str	r3, [r7, #0]
 8007d44:	2600      	movs	r6, #0
 8007d46:	4630      	mov	r0, r6
 8007d48:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8007d4c:	4e2e      	ldr	r6, [pc, #184]	; (8007e08 <_malloc_r+0xe4>)
 8007d4e:	f000 fdbb 	bl	80088c8 <__malloc_lock>
 8007d52:	6833      	ldr	r3, [r6, #0]
 8007d54:	461c      	mov	r4, r3
 8007d56:	bb34      	cbnz	r4, 8007da6 <_malloc_r+0x82>
 8007d58:	4629      	mov	r1, r5
 8007d5a:	4638      	mov	r0, r7
 8007d5c:	f7ff ffc2 	bl	8007ce4 <sbrk_aligned>
 8007d60:	1c43      	adds	r3, r0, #1
 8007d62:	4604      	mov	r4, r0
 8007d64:	d14d      	bne.n	8007e02 <_malloc_r+0xde>
 8007d66:	6834      	ldr	r4, [r6, #0]
 8007d68:	4626      	mov	r6, r4
 8007d6a:	2e00      	cmp	r6, #0
 8007d6c:	d140      	bne.n	8007df0 <_malloc_r+0xcc>
 8007d6e:	6823      	ldr	r3, [r4, #0]
 8007d70:	4631      	mov	r1, r6
 8007d72:	4638      	mov	r0, r7
 8007d74:	eb04 0803 	add.w	r8, r4, r3
 8007d78:	f000 fb36 	bl	80083e8 <_sbrk_r>
 8007d7c:	4580      	cmp	r8, r0
 8007d7e:	d13a      	bne.n	8007df6 <_malloc_r+0xd2>
 8007d80:	6821      	ldr	r1, [r4, #0]
 8007d82:	3503      	adds	r5, #3
 8007d84:	1a6d      	subs	r5, r5, r1
 8007d86:	f025 0503 	bic.w	r5, r5, #3
 8007d8a:	3508      	adds	r5, #8
 8007d8c:	2d0c      	cmp	r5, #12
 8007d8e:	bf38      	it	cc
 8007d90:	250c      	movcc	r5, #12
 8007d92:	4629      	mov	r1, r5
 8007d94:	4638      	mov	r0, r7
 8007d96:	f7ff ffa5 	bl	8007ce4 <sbrk_aligned>
 8007d9a:	3001      	adds	r0, #1
 8007d9c:	d02b      	beq.n	8007df6 <_malloc_r+0xd2>
 8007d9e:	6823      	ldr	r3, [r4, #0]
 8007da0:	442b      	add	r3, r5
 8007da2:	6023      	str	r3, [r4, #0]
 8007da4:	e00e      	b.n	8007dc4 <_malloc_r+0xa0>
 8007da6:	6822      	ldr	r2, [r4, #0]
 8007da8:	1b52      	subs	r2, r2, r5
 8007daa:	d41e      	bmi.n	8007dea <_malloc_r+0xc6>
 8007dac:	2a0b      	cmp	r2, #11
 8007dae:	d916      	bls.n	8007dde <_malloc_r+0xba>
 8007db0:	1961      	adds	r1, r4, r5
 8007db2:	42a3      	cmp	r3, r4
 8007db4:	6025      	str	r5, [r4, #0]
 8007db6:	bf18      	it	ne
 8007db8:	6059      	strne	r1, [r3, #4]
 8007dba:	6863      	ldr	r3, [r4, #4]
 8007dbc:	bf08      	it	eq
 8007dbe:	6031      	streq	r1, [r6, #0]
 8007dc0:	5162      	str	r2, [r4, r5]
 8007dc2:	604b      	str	r3, [r1, #4]
 8007dc4:	4638      	mov	r0, r7
 8007dc6:	f104 060b 	add.w	r6, r4, #11
 8007dca:	f000 fd83 	bl	80088d4 <__malloc_unlock>
 8007dce:	f026 0607 	bic.w	r6, r6, #7
 8007dd2:	1d23      	adds	r3, r4, #4
 8007dd4:	1af2      	subs	r2, r6, r3
 8007dd6:	d0b6      	beq.n	8007d46 <_malloc_r+0x22>
 8007dd8:	1b9b      	subs	r3, r3, r6
 8007dda:	50a3      	str	r3, [r4, r2]
 8007ddc:	e7b3      	b.n	8007d46 <_malloc_r+0x22>
 8007dde:	6862      	ldr	r2, [r4, #4]
 8007de0:	42a3      	cmp	r3, r4
 8007de2:	bf0c      	ite	eq
 8007de4:	6032      	streq	r2, [r6, #0]
 8007de6:	605a      	strne	r2, [r3, #4]
 8007de8:	e7ec      	b.n	8007dc4 <_malloc_r+0xa0>
 8007dea:	4623      	mov	r3, r4
 8007dec:	6864      	ldr	r4, [r4, #4]
 8007dee:	e7b2      	b.n	8007d56 <_malloc_r+0x32>
 8007df0:	4634      	mov	r4, r6
 8007df2:	6876      	ldr	r6, [r6, #4]
 8007df4:	e7b9      	b.n	8007d6a <_malloc_r+0x46>
 8007df6:	230c      	movs	r3, #12
 8007df8:	603b      	str	r3, [r7, #0]
 8007dfa:	4638      	mov	r0, r7
 8007dfc:	f000 fd6a 	bl	80088d4 <__malloc_unlock>
 8007e00:	e7a1      	b.n	8007d46 <_malloc_r+0x22>
 8007e02:	6025      	str	r5, [r4, #0]
 8007e04:	e7de      	b.n	8007dc4 <_malloc_r+0xa0>
 8007e06:	bf00      	nop
 8007e08:	240066e8 	.word	0x240066e8

08007e0c <__sfputc_r>:
 8007e0c:	6893      	ldr	r3, [r2, #8]
 8007e0e:	3b01      	subs	r3, #1
 8007e10:	2b00      	cmp	r3, #0
 8007e12:	b410      	push	{r4}
 8007e14:	6093      	str	r3, [r2, #8]
 8007e16:	da08      	bge.n	8007e2a <__sfputc_r+0x1e>
 8007e18:	6994      	ldr	r4, [r2, #24]
 8007e1a:	42a3      	cmp	r3, r4
 8007e1c:	db01      	blt.n	8007e22 <__sfputc_r+0x16>
 8007e1e:	290a      	cmp	r1, #10
 8007e20:	d103      	bne.n	8007e2a <__sfputc_r+0x1e>
 8007e22:	f85d 4b04 	ldr.w	r4, [sp], #4
 8007e26:	f000 bb33 	b.w	8008490 <__swbuf_r>
 8007e2a:	6813      	ldr	r3, [r2, #0]
 8007e2c:	1c58      	adds	r0, r3, #1
 8007e2e:	6010      	str	r0, [r2, #0]
 8007e30:	7019      	strb	r1, [r3, #0]
 8007e32:	4608      	mov	r0, r1
 8007e34:	f85d 4b04 	ldr.w	r4, [sp], #4
 8007e38:	4770      	bx	lr

08007e3a <__sfputs_r>:
 8007e3a:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8007e3c:	4606      	mov	r6, r0
 8007e3e:	460f      	mov	r7, r1
 8007e40:	4614      	mov	r4, r2
 8007e42:	18d5      	adds	r5, r2, r3
 8007e44:	42ac      	cmp	r4, r5
 8007e46:	d101      	bne.n	8007e4c <__sfputs_r+0x12>
 8007e48:	2000      	movs	r0, #0
 8007e4a:	e007      	b.n	8007e5c <__sfputs_r+0x22>
 8007e4c:	f814 1b01 	ldrb.w	r1, [r4], #1
 8007e50:	463a      	mov	r2, r7
 8007e52:	4630      	mov	r0, r6
 8007e54:	f7ff ffda 	bl	8007e0c <__sfputc_r>
 8007e58:	1c43      	adds	r3, r0, #1
 8007e5a:	d1f3      	bne.n	8007e44 <__sfputs_r+0xa>
 8007e5c:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

08007e60 <_vfiprintf_r>:
 8007e60:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8007e64:	460d      	mov	r5, r1
 8007e66:	b09d      	sub	sp, #116	; 0x74
 8007e68:	4614      	mov	r4, r2
 8007e6a:	4698      	mov	r8, r3
 8007e6c:	4606      	mov	r6, r0
 8007e6e:	b118      	cbz	r0, 8007e78 <_vfiprintf_r+0x18>
 8007e70:	6983      	ldr	r3, [r0, #24]
 8007e72:	b90b      	cbnz	r3, 8007e78 <_vfiprintf_r+0x18>
 8007e74:	f7ff fe96 	bl	8007ba4 <__sinit>
 8007e78:	4b89      	ldr	r3, [pc, #548]	; (80080a0 <_vfiprintf_r+0x240>)
 8007e7a:	429d      	cmp	r5, r3
 8007e7c:	d11b      	bne.n	8007eb6 <_vfiprintf_r+0x56>
 8007e7e:	6875      	ldr	r5, [r6, #4]
 8007e80:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8007e82:	07d9      	lsls	r1, r3, #31
 8007e84:	d405      	bmi.n	8007e92 <_vfiprintf_r+0x32>
 8007e86:	89ab      	ldrh	r3, [r5, #12]
 8007e88:	059a      	lsls	r2, r3, #22
 8007e8a:	d402      	bmi.n	8007e92 <_vfiprintf_r+0x32>
 8007e8c:	6da8      	ldr	r0, [r5, #88]	; 0x58
 8007e8e:	f7ff ff27 	bl	8007ce0 <__retarget_lock_acquire_recursive>
 8007e92:	89ab      	ldrh	r3, [r5, #12]
 8007e94:	071b      	lsls	r3, r3, #28
 8007e96:	d501      	bpl.n	8007e9c <_vfiprintf_r+0x3c>
 8007e98:	692b      	ldr	r3, [r5, #16]
 8007e9a:	b9eb      	cbnz	r3, 8007ed8 <_vfiprintf_r+0x78>
 8007e9c:	4629      	mov	r1, r5
 8007e9e:	4630      	mov	r0, r6
 8007ea0:	f000 fb5a 	bl	8008558 <__swsetup_r>
 8007ea4:	b1c0      	cbz	r0, 8007ed8 <_vfiprintf_r+0x78>
 8007ea6:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8007ea8:	07dc      	lsls	r4, r3, #31
 8007eaa:	d50e      	bpl.n	8007eca <_vfiprintf_r+0x6a>
 8007eac:	f04f 30ff 	mov.w	r0, #4294967295
 8007eb0:	b01d      	add	sp, #116	; 0x74
 8007eb2:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8007eb6:	4b7b      	ldr	r3, [pc, #492]	; (80080a4 <_vfiprintf_r+0x244>)
 8007eb8:	429d      	cmp	r5, r3
 8007eba:	d101      	bne.n	8007ec0 <_vfiprintf_r+0x60>
 8007ebc:	68b5      	ldr	r5, [r6, #8]
 8007ebe:	e7df      	b.n	8007e80 <_vfiprintf_r+0x20>
 8007ec0:	4b79      	ldr	r3, [pc, #484]	; (80080a8 <_vfiprintf_r+0x248>)
 8007ec2:	429d      	cmp	r5, r3
 8007ec4:	bf08      	it	eq
 8007ec6:	68f5      	ldreq	r5, [r6, #12]
 8007ec8:	e7da      	b.n	8007e80 <_vfiprintf_r+0x20>
 8007eca:	89ab      	ldrh	r3, [r5, #12]
 8007ecc:	0598      	lsls	r0, r3, #22
 8007ece:	d4ed      	bmi.n	8007eac <_vfiprintf_r+0x4c>
 8007ed0:	6da8      	ldr	r0, [r5, #88]	; 0x58
 8007ed2:	f7ff ff06 	bl	8007ce2 <__retarget_lock_release_recursive>
 8007ed6:	e7e9      	b.n	8007eac <_vfiprintf_r+0x4c>
 8007ed8:	2300      	movs	r3, #0
 8007eda:	9309      	str	r3, [sp, #36]	; 0x24
 8007edc:	2320      	movs	r3, #32
 8007ede:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 8007ee2:	f8cd 800c 	str.w	r8, [sp, #12]
 8007ee6:	2330      	movs	r3, #48	; 0x30
 8007ee8:	f8df 81c0 	ldr.w	r8, [pc, #448]	; 80080ac <_vfiprintf_r+0x24c>
 8007eec:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 8007ef0:	f04f 0901 	mov.w	r9, #1
 8007ef4:	4623      	mov	r3, r4
 8007ef6:	469a      	mov	sl, r3
 8007ef8:	f813 2b01 	ldrb.w	r2, [r3], #1
 8007efc:	b10a      	cbz	r2, 8007f02 <_vfiprintf_r+0xa2>
 8007efe:	2a25      	cmp	r2, #37	; 0x25
 8007f00:	d1f9      	bne.n	8007ef6 <_vfiprintf_r+0x96>
 8007f02:	ebba 0b04 	subs.w	fp, sl, r4
 8007f06:	d00b      	beq.n	8007f20 <_vfiprintf_r+0xc0>
 8007f08:	465b      	mov	r3, fp
 8007f0a:	4622      	mov	r2, r4
 8007f0c:	4629      	mov	r1, r5
 8007f0e:	4630      	mov	r0, r6
 8007f10:	f7ff ff93 	bl	8007e3a <__sfputs_r>
 8007f14:	3001      	adds	r0, #1
 8007f16:	f000 80aa 	beq.w	800806e <_vfiprintf_r+0x20e>
 8007f1a:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8007f1c:	445a      	add	r2, fp
 8007f1e:	9209      	str	r2, [sp, #36]	; 0x24
 8007f20:	f89a 3000 	ldrb.w	r3, [sl]
 8007f24:	2b00      	cmp	r3, #0
 8007f26:	f000 80a2 	beq.w	800806e <_vfiprintf_r+0x20e>
 8007f2a:	2300      	movs	r3, #0
 8007f2c:	f04f 32ff 	mov.w	r2, #4294967295
 8007f30:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8007f34:	f10a 0a01 	add.w	sl, sl, #1
 8007f38:	9304      	str	r3, [sp, #16]
 8007f3a:	9307      	str	r3, [sp, #28]
 8007f3c:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 8007f40:	931a      	str	r3, [sp, #104]	; 0x68
 8007f42:	4654      	mov	r4, sl
 8007f44:	2205      	movs	r2, #5
 8007f46:	f814 1b01 	ldrb.w	r1, [r4], #1
 8007f4a:	4858      	ldr	r0, [pc, #352]	; (80080ac <_vfiprintf_r+0x24c>)
 8007f4c:	f7f8 fb08 	bl	8000560 <memchr>
 8007f50:	9a04      	ldr	r2, [sp, #16]
 8007f52:	b9d8      	cbnz	r0, 8007f8c <_vfiprintf_r+0x12c>
 8007f54:	06d1      	lsls	r1, r2, #27
 8007f56:	bf44      	itt	mi
 8007f58:	2320      	movmi	r3, #32
 8007f5a:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8007f5e:	0713      	lsls	r3, r2, #28
 8007f60:	bf44      	itt	mi
 8007f62:	232b      	movmi	r3, #43	; 0x2b
 8007f64:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8007f68:	f89a 3000 	ldrb.w	r3, [sl]
 8007f6c:	2b2a      	cmp	r3, #42	; 0x2a
 8007f6e:	d015      	beq.n	8007f9c <_vfiprintf_r+0x13c>
 8007f70:	9a07      	ldr	r2, [sp, #28]
 8007f72:	4654      	mov	r4, sl
 8007f74:	2000      	movs	r0, #0
 8007f76:	f04f 0c0a 	mov.w	ip, #10
 8007f7a:	4621      	mov	r1, r4
 8007f7c:	f811 3b01 	ldrb.w	r3, [r1], #1
 8007f80:	3b30      	subs	r3, #48	; 0x30
 8007f82:	2b09      	cmp	r3, #9
 8007f84:	d94e      	bls.n	8008024 <_vfiprintf_r+0x1c4>
 8007f86:	b1b0      	cbz	r0, 8007fb6 <_vfiprintf_r+0x156>
 8007f88:	9207      	str	r2, [sp, #28]
 8007f8a:	e014      	b.n	8007fb6 <_vfiprintf_r+0x156>
 8007f8c:	eba0 0308 	sub.w	r3, r0, r8
 8007f90:	fa09 f303 	lsl.w	r3, r9, r3
 8007f94:	4313      	orrs	r3, r2
 8007f96:	9304      	str	r3, [sp, #16]
 8007f98:	46a2      	mov	sl, r4
 8007f9a:	e7d2      	b.n	8007f42 <_vfiprintf_r+0xe2>
 8007f9c:	9b03      	ldr	r3, [sp, #12]
 8007f9e:	1d19      	adds	r1, r3, #4
 8007fa0:	681b      	ldr	r3, [r3, #0]
 8007fa2:	9103      	str	r1, [sp, #12]
 8007fa4:	2b00      	cmp	r3, #0
 8007fa6:	bfbb      	ittet	lt
 8007fa8:	425b      	neglt	r3, r3
 8007faa:	f042 0202 	orrlt.w	r2, r2, #2
 8007fae:	9307      	strge	r3, [sp, #28]
 8007fb0:	9307      	strlt	r3, [sp, #28]
 8007fb2:	bfb8      	it	lt
 8007fb4:	9204      	strlt	r2, [sp, #16]
 8007fb6:	7823      	ldrb	r3, [r4, #0]
 8007fb8:	2b2e      	cmp	r3, #46	; 0x2e
 8007fba:	d10c      	bne.n	8007fd6 <_vfiprintf_r+0x176>
 8007fbc:	7863      	ldrb	r3, [r4, #1]
 8007fbe:	2b2a      	cmp	r3, #42	; 0x2a
 8007fc0:	d135      	bne.n	800802e <_vfiprintf_r+0x1ce>
 8007fc2:	9b03      	ldr	r3, [sp, #12]
 8007fc4:	1d1a      	adds	r2, r3, #4
 8007fc6:	681b      	ldr	r3, [r3, #0]
 8007fc8:	9203      	str	r2, [sp, #12]
 8007fca:	2b00      	cmp	r3, #0
 8007fcc:	bfb8      	it	lt
 8007fce:	f04f 33ff 	movlt.w	r3, #4294967295
 8007fd2:	3402      	adds	r4, #2
 8007fd4:	9305      	str	r3, [sp, #20]
 8007fd6:	f8df a0e4 	ldr.w	sl, [pc, #228]	; 80080bc <_vfiprintf_r+0x25c>
 8007fda:	7821      	ldrb	r1, [r4, #0]
 8007fdc:	2203      	movs	r2, #3
 8007fde:	4650      	mov	r0, sl
 8007fe0:	f7f8 fabe 	bl	8000560 <memchr>
 8007fe4:	b140      	cbz	r0, 8007ff8 <_vfiprintf_r+0x198>
 8007fe6:	2340      	movs	r3, #64	; 0x40
 8007fe8:	eba0 000a 	sub.w	r0, r0, sl
 8007fec:	fa03 f000 	lsl.w	r0, r3, r0
 8007ff0:	9b04      	ldr	r3, [sp, #16]
 8007ff2:	4303      	orrs	r3, r0
 8007ff4:	3401      	adds	r4, #1
 8007ff6:	9304      	str	r3, [sp, #16]
 8007ff8:	f814 1b01 	ldrb.w	r1, [r4], #1
 8007ffc:	482c      	ldr	r0, [pc, #176]	; (80080b0 <_vfiprintf_r+0x250>)
 8007ffe:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 8008002:	2206      	movs	r2, #6
 8008004:	f7f8 faac 	bl	8000560 <memchr>
 8008008:	2800      	cmp	r0, #0
 800800a:	d03f      	beq.n	800808c <_vfiprintf_r+0x22c>
 800800c:	4b29      	ldr	r3, [pc, #164]	; (80080b4 <_vfiprintf_r+0x254>)
 800800e:	bb1b      	cbnz	r3, 8008058 <_vfiprintf_r+0x1f8>
 8008010:	9b03      	ldr	r3, [sp, #12]
 8008012:	3307      	adds	r3, #7
 8008014:	f023 0307 	bic.w	r3, r3, #7
 8008018:	3308      	adds	r3, #8
 800801a:	9303      	str	r3, [sp, #12]
 800801c:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800801e:	443b      	add	r3, r7
 8008020:	9309      	str	r3, [sp, #36]	; 0x24
 8008022:	e767      	b.n	8007ef4 <_vfiprintf_r+0x94>
 8008024:	fb0c 3202 	mla	r2, ip, r2, r3
 8008028:	460c      	mov	r4, r1
 800802a:	2001      	movs	r0, #1
 800802c:	e7a5      	b.n	8007f7a <_vfiprintf_r+0x11a>
 800802e:	2300      	movs	r3, #0
 8008030:	3401      	adds	r4, #1
 8008032:	9305      	str	r3, [sp, #20]
 8008034:	4619      	mov	r1, r3
 8008036:	f04f 0c0a 	mov.w	ip, #10
 800803a:	4620      	mov	r0, r4
 800803c:	f810 2b01 	ldrb.w	r2, [r0], #1
 8008040:	3a30      	subs	r2, #48	; 0x30
 8008042:	2a09      	cmp	r2, #9
 8008044:	d903      	bls.n	800804e <_vfiprintf_r+0x1ee>
 8008046:	2b00      	cmp	r3, #0
 8008048:	d0c5      	beq.n	8007fd6 <_vfiprintf_r+0x176>
 800804a:	9105      	str	r1, [sp, #20]
 800804c:	e7c3      	b.n	8007fd6 <_vfiprintf_r+0x176>
 800804e:	fb0c 2101 	mla	r1, ip, r1, r2
 8008052:	4604      	mov	r4, r0
 8008054:	2301      	movs	r3, #1
 8008056:	e7f0      	b.n	800803a <_vfiprintf_r+0x1da>
 8008058:	ab03      	add	r3, sp, #12
 800805a:	9300      	str	r3, [sp, #0]
 800805c:	462a      	mov	r2, r5
 800805e:	4b16      	ldr	r3, [pc, #88]	; (80080b8 <_vfiprintf_r+0x258>)
 8008060:	a904      	add	r1, sp, #16
 8008062:	4630      	mov	r0, r6
 8008064:	f3af 8000 	nop.w
 8008068:	4607      	mov	r7, r0
 800806a:	1c78      	adds	r0, r7, #1
 800806c:	d1d6      	bne.n	800801c <_vfiprintf_r+0x1bc>
 800806e:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8008070:	07d9      	lsls	r1, r3, #31
 8008072:	d405      	bmi.n	8008080 <_vfiprintf_r+0x220>
 8008074:	89ab      	ldrh	r3, [r5, #12]
 8008076:	059a      	lsls	r2, r3, #22
 8008078:	d402      	bmi.n	8008080 <_vfiprintf_r+0x220>
 800807a:	6da8      	ldr	r0, [r5, #88]	; 0x58
 800807c:	f7ff fe31 	bl	8007ce2 <__retarget_lock_release_recursive>
 8008080:	89ab      	ldrh	r3, [r5, #12]
 8008082:	065b      	lsls	r3, r3, #25
 8008084:	f53f af12 	bmi.w	8007eac <_vfiprintf_r+0x4c>
 8008088:	9809      	ldr	r0, [sp, #36]	; 0x24
 800808a:	e711      	b.n	8007eb0 <_vfiprintf_r+0x50>
 800808c:	ab03      	add	r3, sp, #12
 800808e:	9300      	str	r3, [sp, #0]
 8008090:	462a      	mov	r2, r5
 8008092:	4b09      	ldr	r3, [pc, #36]	; (80080b8 <_vfiprintf_r+0x258>)
 8008094:	a904      	add	r1, sp, #16
 8008096:	4630      	mov	r0, r6
 8008098:	f000 f880 	bl	800819c <_printf_i>
 800809c:	e7e4      	b.n	8008068 <_vfiprintf_r+0x208>
 800809e:	bf00      	nop
 80080a0:	08008b98 	.word	0x08008b98
 80080a4:	08008bb8 	.word	0x08008bb8
 80080a8:	08008b78 	.word	0x08008b78
 80080ac:	08008bd8 	.word	0x08008bd8
 80080b0:	08008be2 	.word	0x08008be2
 80080b4:	00000000 	.word	0x00000000
 80080b8:	08007e3b 	.word	0x08007e3b
 80080bc:	08008bde 	.word	0x08008bde

080080c0 <_printf_common>:
 80080c0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80080c4:	4616      	mov	r6, r2
 80080c6:	4699      	mov	r9, r3
 80080c8:	688a      	ldr	r2, [r1, #8]
 80080ca:	690b      	ldr	r3, [r1, #16]
 80080cc:	f8dd 8020 	ldr.w	r8, [sp, #32]
 80080d0:	4293      	cmp	r3, r2
 80080d2:	bfb8      	it	lt
 80080d4:	4613      	movlt	r3, r2
 80080d6:	6033      	str	r3, [r6, #0]
 80080d8:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 80080dc:	4607      	mov	r7, r0
 80080de:	460c      	mov	r4, r1
 80080e0:	b10a      	cbz	r2, 80080e6 <_printf_common+0x26>
 80080e2:	3301      	adds	r3, #1
 80080e4:	6033      	str	r3, [r6, #0]
 80080e6:	6823      	ldr	r3, [r4, #0]
 80080e8:	0699      	lsls	r1, r3, #26
 80080ea:	bf42      	ittt	mi
 80080ec:	6833      	ldrmi	r3, [r6, #0]
 80080ee:	3302      	addmi	r3, #2
 80080f0:	6033      	strmi	r3, [r6, #0]
 80080f2:	6825      	ldr	r5, [r4, #0]
 80080f4:	f015 0506 	ands.w	r5, r5, #6
 80080f8:	d106      	bne.n	8008108 <_printf_common+0x48>
 80080fa:	f104 0a19 	add.w	sl, r4, #25
 80080fe:	68e3      	ldr	r3, [r4, #12]
 8008100:	6832      	ldr	r2, [r6, #0]
 8008102:	1a9b      	subs	r3, r3, r2
 8008104:	42ab      	cmp	r3, r5
 8008106:	dc26      	bgt.n	8008156 <_printf_common+0x96>
 8008108:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 800810c:	1e13      	subs	r3, r2, #0
 800810e:	6822      	ldr	r2, [r4, #0]
 8008110:	bf18      	it	ne
 8008112:	2301      	movne	r3, #1
 8008114:	0692      	lsls	r2, r2, #26
 8008116:	d42b      	bmi.n	8008170 <_printf_common+0xb0>
 8008118:	f104 0243 	add.w	r2, r4, #67	; 0x43
 800811c:	4649      	mov	r1, r9
 800811e:	4638      	mov	r0, r7
 8008120:	47c0      	blx	r8
 8008122:	3001      	adds	r0, #1
 8008124:	d01e      	beq.n	8008164 <_printf_common+0xa4>
 8008126:	6823      	ldr	r3, [r4, #0]
 8008128:	68e5      	ldr	r5, [r4, #12]
 800812a:	6832      	ldr	r2, [r6, #0]
 800812c:	f003 0306 	and.w	r3, r3, #6
 8008130:	2b04      	cmp	r3, #4
 8008132:	bf08      	it	eq
 8008134:	1aad      	subeq	r5, r5, r2
 8008136:	68a3      	ldr	r3, [r4, #8]
 8008138:	6922      	ldr	r2, [r4, #16]
 800813a:	bf0c      	ite	eq
 800813c:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8008140:	2500      	movne	r5, #0
 8008142:	4293      	cmp	r3, r2
 8008144:	bfc4      	itt	gt
 8008146:	1a9b      	subgt	r3, r3, r2
 8008148:	18ed      	addgt	r5, r5, r3
 800814a:	2600      	movs	r6, #0
 800814c:	341a      	adds	r4, #26
 800814e:	42b5      	cmp	r5, r6
 8008150:	d11a      	bne.n	8008188 <_printf_common+0xc8>
 8008152:	2000      	movs	r0, #0
 8008154:	e008      	b.n	8008168 <_printf_common+0xa8>
 8008156:	2301      	movs	r3, #1
 8008158:	4652      	mov	r2, sl
 800815a:	4649      	mov	r1, r9
 800815c:	4638      	mov	r0, r7
 800815e:	47c0      	blx	r8
 8008160:	3001      	adds	r0, #1
 8008162:	d103      	bne.n	800816c <_printf_common+0xac>
 8008164:	f04f 30ff 	mov.w	r0, #4294967295
 8008168:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800816c:	3501      	adds	r5, #1
 800816e:	e7c6      	b.n	80080fe <_printf_common+0x3e>
 8008170:	18e1      	adds	r1, r4, r3
 8008172:	1c5a      	adds	r2, r3, #1
 8008174:	2030      	movs	r0, #48	; 0x30
 8008176:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 800817a:	4422      	add	r2, r4
 800817c:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 8008180:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 8008184:	3302      	adds	r3, #2
 8008186:	e7c7      	b.n	8008118 <_printf_common+0x58>
 8008188:	2301      	movs	r3, #1
 800818a:	4622      	mov	r2, r4
 800818c:	4649      	mov	r1, r9
 800818e:	4638      	mov	r0, r7
 8008190:	47c0      	blx	r8
 8008192:	3001      	adds	r0, #1
 8008194:	d0e6      	beq.n	8008164 <_printf_common+0xa4>
 8008196:	3601      	adds	r6, #1
 8008198:	e7d9      	b.n	800814e <_printf_common+0x8e>
	...

0800819c <_printf_i>:
 800819c:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 80081a0:	7e0f      	ldrb	r7, [r1, #24]
 80081a2:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 80081a4:	2f78      	cmp	r7, #120	; 0x78
 80081a6:	4691      	mov	r9, r2
 80081a8:	4680      	mov	r8, r0
 80081aa:	460c      	mov	r4, r1
 80081ac:	469a      	mov	sl, r3
 80081ae:	f101 0243 	add.w	r2, r1, #67	; 0x43
 80081b2:	d807      	bhi.n	80081c4 <_printf_i+0x28>
 80081b4:	2f62      	cmp	r7, #98	; 0x62
 80081b6:	d80a      	bhi.n	80081ce <_printf_i+0x32>
 80081b8:	2f00      	cmp	r7, #0
 80081ba:	f000 80d8 	beq.w	800836e <_printf_i+0x1d2>
 80081be:	2f58      	cmp	r7, #88	; 0x58
 80081c0:	f000 80a3 	beq.w	800830a <_printf_i+0x16e>
 80081c4:	f104 0542 	add.w	r5, r4, #66	; 0x42
 80081c8:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 80081cc:	e03a      	b.n	8008244 <_printf_i+0xa8>
 80081ce:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 80081d2:	2b15      	cmp	r3, #21
 80081d4:	d8f6      	bhi.n	80081c4 <_printf_i+0x28>
 80081d6:	a101      	add	r1, pc, #4	; (adr r1, 80081dc <_printf_i+0x40>)
 80081d8:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 80081dc:	08008235 	.word	0x08008235
 80081e0:	08008249 	.word	0x08008249
 80081e4:	080081c5 	.word	0x080081c5
 80081e8:	080081c5 	.word	0x080081c5
 80081ec:	080081c5 	.word	0x080081c5
 80081f0:	080081c5 	.word	0x080081c5
 80081f4:	08008249 	.word	0x08008249
 80081f8:	080081c5 	.word	0x080081c5
 80081fc:	080081c5 	.word	0x080081c5
 8008200:	080081c5 	.word	0x080081c5
 8008204:	080081c5 	.word	0x080081c5
 8008208:	08008355 	.word	0x08008355
 800820c:	08008279 	.word	0x08008279
 8008210:	08008337 	.word	0x08008337
 8008214:	080081c5 	.word	0x080081c5
 8008218:	080081c5 	.word	0x080081c5
 800821c:	08008377 	.word	0x08008377
 8008220:	080081c5 	.word	0x080081c5
 8008224:	08008279 	.word	0x08008279
 8008228:	080081c5 	.word	0x080081c5
 800822c:	080081c5 	.word	0x080081c5
 8008230:	0800833f 	.word	0x0800833f
 8008234:	682b      	ldr	r3, [r5, #0]
 8008236:	1d1a      	adds	r2, r3, #4
 8008238:	681b      	ldr	r3, [r3, #0]
 800823a:	602a      	str	r2, [r5, #0]
 800823c:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8008240:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 8008244:	2301      	movs	r3, #1
 8008246:	e0a3      	b.n	8008390 <_printf_i+0x1f4>
 8008248:	6820      	ldr	r0, [r4, #0]
 800824a:	6829      	ldr	r1, [r5, #0]
 800824c:	0606      	lsls	r6, r0, #24
 800824e:	f101 0304 	add.w	r3, r1, #4
 8008252:	d50a      	bpl.n	800826a <_printf_i+0xce>
 8008254:	680e      	ldr	r6, [r1, #0]
 8008256:	602b      	str	r3, [r5, #0]
 8008258:	2e00      	cmp	r6, #0
 800825a:	da03      	bge.n	8008264 <_printf_i+0xc8>
 800825c:	232d      	movs	r3, #45	; 0x2d
 800825e:	4276      	negs	r6, r6
 8008260:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8008264:	485e      	ldr	r0, [pc, #376]	; (80083e0 <_printf_i+0x244>)
 8008266:	230a      	movs	r3, #10
 8008268:	e019      	b.n	800829e <_printf_i+0x102>
 800826a:	680e      	ldr	r6, [r1, #0]
 800826c:	602b      	str	r3, [r5, #0]
 800826e:	f010 0f40 	tst.w	r0, #64	; 0x40
 8008272:	bf18      	it	ne
 8008274:	b236      	sxthne	r6, r6
 8008276:	e7ef      	b.n	8008258 <_printf_i+0xbc>
 8008278:	682b      	ldr	r3, [r5, #0]
 800827a:	6820      	ldr	r0, [r4, #0]
 800827c:	1d19      	adds	r1, r3, #4
 800827e:	6029      	str	r1, [r5, #0]
 8008280:	0601      	lsls	r1, r0, #24
 8008282:	d501      	bpl.n	8008288 <_printf_i+0xec>
 8008284:	681e      	ldr	r6, [r3, #0]
 8008286:	e002      	b.n	800828e <_printf_i+0xf2>
 8008288:	0646      	lsls	r6, r0, #25
 800828a:	d5fb      	bpl.n	8008284 <_printf_i+0xe8>
 800828c:	881e      	ldrh	r6, [r3, #0]
 800828e:	4854      	ldr	r0, [pc, #336]	; (80083e0 <_printf_i+0x244>)
 8008290:	2f6f      	cmp	r7, #111	; 0x6f
 8008292:	bf0c      	ite	eq
 8008294:	2308      	moveq	r3, #8
 8008296:	230a      	movne	r3, #10
 8008298:	2100      	movs	r1, #0
 800829a:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 800829e:	6865      	ldr	r5, [r4, #4]
 80082a0:	60a5      	str	r5, [r4, #8]
 80082a2:	2d00      	cmp	r5, #0
 80082a4:	bfa2      	ittt	ge
 80082a6:	6821      	ldrge	r1, [r4, #0]
 80082a8:	f021 0104 	bicge.w	r1, r1, #4
 80082ac:	6021      	strge	r1, [r4, #0]
 80082ae:	b90e      	cbnz	r6, 80082b4 <_printf_i+0x118>
 80082b0:	2d00      	cmp	r5, #0
 80082b2:	d04d      	beq.n	8008350 <_printf_i+0x1b4>
 80082b4:	4615      	mov	r5, r2
 80082b6:	fbb6 f1f3 	udiv	r1, r6, r3
 80082ba:	fb03 6711 	mls	r7, r3, r1, r6
 80082be:	5dc7      	ldrb	r7, [r0, r7]
 80082c0:	f805 7d01 	strb.w	r7, [r5, #-1]!
 80082c4:	4637      	mov	r7, r6
 80082c6:	42bb      	cmp	r3, r7
 80082c8:	460e      	mov	r6, r1
 80082ca:	d9f4      	bls.n	80082b6 <_printf_i+0x11a>
 80082cc:	2b08      	cmp	r3, #8
 80082ce:	d10b      	bne.n	80082e8 <_printf_i+0x14c>
 80082d0:	6823      	ldr	r3, [r4, #0]
 80082d2:	07de      	lsls	r6, r3, #31
 80082d4:	d508      	bpl.n	80082e8 <_printf_i+0x14c>
 80082d6:	6923      	ldr	r3, [r4, #16]
 80082d8:	6861      	ldr	r1, [r4, #4]
 80082da:	4299      	cmp	r1, r3
 80082dc:	bfde      	ittt	le
 80082de:	2330      	movle	r3, #48	; 0x30
 80082e0:	f805 3c01 	strble.w	r3, [r5, #-1]
 80082e4:	f105 35ff 	addle.w	r5, r5, #4294967295
 80082e8:	1b52      	subs	r2, r2, r5
 80082ea:	6122      	str	r2, [r4, #16]
 80082ec:	f8cd a000 	str.w	sl, [sp]
 80082f0:	464b      	mov	r3, r9
 80082f2:	aa03      	add	r2, sp, #12
 80082f4:	4621      	mov	r1, r4
 80082f6:	4640      	mov	r0, r8
 80082f8:	f7ff fee2 	bl	80080c0 <_printf_common>
 80082fc:	3001      	adds	r0, #1
 80082fe:	d14c      	bne.n	800839a <_printf_i+0x1fe>
 8008300:	f04f 30ff 	mov.w	r0, #4294967295
 8008304:	b004      	add	sp, #16
 8008306:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800830a:	4835      	ldr	r0, [pc, #212]	; (80083e0 <_printf_i+0x244>)
 800830c:	f881 7045 	strb.w	r7, [r1, #69]	; 0x45
 8008310:	6829      	ldr	r1, [r5, #0]
 8008312:	6823      	ldr	r3, [r4, #0]
 8008314:	f851 6b04 	ldr.w	r6, [r1], #4
 8008318:	6029      	str	r1, [r5, #0]
 800831a:	061d      	lsls	r5, r3, #24
 800831c:	d514      	bpl.n	8008348 <_printf_i+0x1ac>
 800831e:	07df      	lsls	r7, r3, #31
 8008320:	bf44      	itt	mi
 8008322:	f043 0320 	orrmi.w	r3, r3, #32
 8008326:	6023      	strmi	r3, [r4, #0]
 8008328:	b91e      	cbnz	r6, 8008332 <_printf_i+0x196>
 800832a:	6823      	ldr	r3, [r4, #0]
 800832c:	f023 0320 	bic.w	r3, r3, #32
 8008330:	6023      	str	r3, [r4, #0]
 8008332:	2310      	movs	r3, #16
 8008334:	e7b0      	b.n	8008298 <_printf_i+0xfc>
 8008336:	6823      	ldr	r3, [r4, #0]
 8008338:	f043 0320 	orr.w	r3, r3, #32
 800833c:	6023      	str	r3, [r4, #0]
 800833e:	2378      	movs	r3, #120	; 0x78
 8008340:	4828      	ldr	r0, [pc, #160]	; (80083e4 <_printf_i+0x248>)
 8008342:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 8008346:	e7e3      	b.n	8008310 <_printf_i+0x174>
 8008348:	0659      	lsls	r1, r3, #25
 800834a:	bf48      	it	mi
 800834c:	b2b6      	uxthmi	r6, r6
 800834e:	e7e6      	b.n	800831e <_printf_i+0x182>
 8008350:	4615      	mov	r5, r2
 8008352:	e7bb      	b.n	80082cc <_printf_i+0x130>
 8008354:	682b      	ldr	r3, [r5, #0]
 8008356:	6826      	ldr	r6, [r4, #0]
 8008358:	6961      	ldr	r1, [r4, #20]
 800835a:	1d18      	adds	r0, r3, #4
 800835c:	6028      	str	r0, [r5, #0]
 800835e:	0635      	lsls	r5, r6, #24
 8008360:	681b      	ldr	r3, [r3, #0]
 8008362:	d501      	bpl.n	8008368 <_printf_i+0x1cc>
 8008364:	6019      	str	r1, [r3, #0]
 8008366:	e002      	b.n	800836e <_printf_i+0x1d2>
 8008368:	0670      	lsls	r0, r6, #25
 800836a:	d5fb      	bpl.n	8008364 <_printf_i+0x1c8>
 800836c:	8019      	strh	r1, [r3, #0]
 800836e:	2300      	movs	r3, #0
 8008370:	6123      	str	r3, [r4, #16]
 8008372:	4615      	mov	r5, r2
 8008374:	e7ba      	b.n	80082ec <_printf_i+0x150>
 8008376:	682b      	ldr	r3, [r5, #0]
 8008378:	1d1a      	adds	r2, r3, #4
 800837a:	602a      	str	r2, [r5, #0]
 800837c:	681d      	ldr	r5, [r3, #0]
 800837e:	6862      	ldr	r2, [r4, #4]
 8008380:	2100      	movs	r1, #0
 8008382:	4628      	mov	r0, r5
 8008384:	f7f8 f8ec 	bl	8000560 <memchr>
 8008388:	b108      	cbz	r0, 800838e <_printf_i+0x1f2>
 800838a:	1b40      	subs	r0, r0, r5
 800838c:	6060      	str	r0, [r4, #4]
 800838e:	6863      	ldr	r3, [r4, #4]
 8008390:	6123      	str	r3, [r4, #16]
 8008392:	2300      	movs	r3, #0
 8008394:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8008398:	e7a8      	b.n	80082ec <_printf_i+0x150>
 800839a:	6923      	ldr	r3, [r4, #16]
 800839c:	462a      	mov	r2, r5
 800839e:	4649      	mov	r1, r9
 80083a0:	4640      	mov	r0, r8
 80083a2:	47d0      	blx	sl
 80083a4:	3001      	adds	r0, #1
 80083a6:	d0ab      	beq.n	8008300 <_printf_i+0x164>
 80083a8:	6823      	ldr	r3, [r4, #0]
 80083aa:	079b      	lsls	r3, r3, #30
 80083ac:	d413      	bmi.n	80083d6 <_printf_i+0x23a>
 80083ae:	68e0      	ldr	r0, [r4, #12]
 80083b0:	9b03      	ldr	r3, [sp, #12]
 80083b2:	4298      	cmp	r0, r3
 80083b4:	bfb8      	it	lt
 80083b6:	4618      	movlt	r0, r3
 80083b8:	e7a4      	b.n	8008304 <_printf_i+0x168>
 80083ba:	2301      	movs	r3, #1
 80083bc:	4632      	mov	r2, r6
 80083be:	4649      	mov	r1, r9
 80083c0:	4640      	mov	r0, r8
 80083c2:	47d0      	blx	sl
 80083c4:	3001      	adds	r0, #1
 80083c6:	d09b      	beq.n	8008300 <_printf_i+0x164>
 80083c8:	3501      	adds	r5, #1
 80083ca:	68e3      	ldr	r3, [r4, #12]
 80083cc:	9903      	ldr	r1, [sp, #12]
 80083ce:	1a5b      	subs	r3, r3, r1
 80083d0:	42ab      	cmp	r3, r5
 80083d2:	dcf2      	bgt.n	80083ba <_printf_i+0x21e>
 80083d4:	e7eb      	b.n	80083ae <_printf_i+0x212>
 80083d6:	2500      	movs	r5, #0
 80083d8:	f104 0619 	add.w	r6, r4, #25
 80083dc:	e7f5      	b.n	80083ca <_printf_i+0x22e>
 80083de:	bf00      	nop
 80083e0:	08008be9 	.word	0x08008be9
 80083e4:	08008bfa 	.word	0x08008bfa

080083e8 <_sbrk_r>:
 80083e8:	b538      	push	{r3, r4, r5, lr}
 80083ea:	4d06      	ldr	r5, [pc, #24]	; (8008404 <_sbrk_r+0x1c>)
 80083ec:	2300      	movs	r3, #0
 80083ee:	4604      	mov	r4, r0
 80083f0:	4608      	mov	r0, r1
 80083f2:	602b      	str	r3, [r5, #0]
 80083f4:	f7f8 ff7c 	bl	80012f0 <_sbrk>
 80083f8:	1c43      	adds	r3, r0, #1
 80083fa:	d102      	bne.n	8008402 <_sbrk_r+0x1a>
 80083fc:	682b      	ldr	r3, [r5, #0]
 80083fe:	b103      	cbz	r3, 8008402 <_sbrk_r+0x1a>
 8008400:	6023      	str	r3, [r4, #0]
 8008402:	bd38      	pop	{r3, r4, r5, pc}
 8008404:	240066f0 	.word	0x240066f0

08008408 <__sread>:
 8008408:	b510      	push	{r4, lr}
 800840a:	460c      	mov	r4, r1
 800840c:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8008410:	f000 fab2 	bl	8008978 <_read_r>
 8008414:	2800      	cmp	r0, #0
 8008416:	bfab      	itete	ge
 8008418:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 800841a:	89a3      	ldrhlt	r3, [r4, #12]
 800841c:	181b      	addge	r3, r3, r0
 800841e:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 8008422:	bfac      	ite	ge
 8008424:	6563      	strge	r3, [r4, #84]	; 0x54
 8008426:	81a3      	strhlt	r3, [r4, #12]
 8008428:	bd10      	pop	{r4, pc}

0800842a <__swrite>:
 800842a:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800842e:	461f      	mov	r7, r3
 8008430:	898b      	ldrh	r3, [r1, #12]
 8008432:	05db      	lsls	r3, r3, #23
 8008434:	4605      	mov	r5, r0
 8008436:	460c      	mov	r4, r1
 8008438:	4616      	mov	r6, r2
 800843a:	d505      	bpl.n	8008448 <__swrite+0x1e>
 800843c:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8008440:	2302      	movs	r3, #2
 8008442:	2200      	movs	r2, #0
 8008444:	f000 f9c8 	bl	80087d8 <_lseek_r>
 8008448:	89a3      	ldrh	r3, [r4, #12]
 800844a:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800844e:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8008452:	81a3      	strh	r3, [r4, #12]
 8008454:	4632      	mov	r2, r6
 8008456:	463b      	mov	r3, r7
 8008458:	4628      	mov	r0, r5
 800845a:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800845e:	f000 b869 	b.w	8008534 <_write_r>

08008462 <__sseek>:
 8008462:	b510      	push	{r4, lr}
 8008464:	460c      	mov	r4, r1
 8008466:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800846a:	f000 f9b5 	bl	80087d8 <_lseek_r>
 800846e:	1c43      	adds	r3, r0, #1
 8008470:	89a3      	ldrh	r3, [r4, #12]
 8008472:	bf15      	itete	ne
 8008474:	6560      	strne	r0, [r4, #84]	; 0x54
 8008476:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 800847a:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 800847e:	81a3      	strheq	r3, [r4, #12]
 8008480:	bf18      	it	ne
 8008482:	81a3      	strhne	r3, [r4, #12]
 8008484:	bd10      	pop	{r4, pc}

08008486 <__sclose>:
 8008486:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800848a:	f000 b8d3 	b.w	8008634 <_close_r>
	...

08008490 <__swbuf_r>:
 8008490:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8008492:	460e      	mov	r6, r1
 8008494:	4614      	mov	r4, r2
 8008496:	4605      	mov	r5, r0
 8008498:	b118      	cbz	r0, 80084a2 <__swbuf_r+0x12>
 800849a:	6983      	ldr	r3, [r0, #24]
 800849c:	b90b      	cbnz	r3, 80084a2 <__swbuf_r+0x12>
 800849e:	f7ff fb81 	bl	8007ba4 <__sinit>
 80084a2:	4b21      	ldr	r3, [pc, #132]	; (8008528 <__swbuf_r+0x98>)
 80084a4:	429c      	cmp	r4, r3
 80084a6:	d12b      	bne.n	8008500 <__swbuf_r+0x70>
 80084a8:	686c      	ldr	r4, [r5, #4]
 80084aa:	69a3      	ldr	r3, [r4, #24]
 80084ac:	60a3      	str	r3, [r4, #8]
 80084ae:	89a3      	ldrh	r3, [r4, #12]
 80084b0:	071a      	lsls	r2, r3, #28
 80084b2:	d52f      	bpl.n	8008514 <__swbuf_r+0x84>
 80084b4:	6923      	ldr	r3, [r4, #16]
 80084b6:	b36b      	cbz	r3, 8008514 <__swbuf_r+0x84>
 80084b8:	6923      	ldr	r3, [r4, #16]
 80084ba:	6820      	ldr	r0, [r4, #0]
 80084bc:	1ac0      	subs	r0, r0, r3
 80084be:	6963      	ldr	r3, [r4, #20]
 80084c0:	b2f6      	uxtb	r6, r6
 80084c2:	4283      	cmp	r3, r0
 80084c4:	4637      	mov	r7, r6
 80084c6:	dc04      	bgt.n	80084d2 <__swbuf_r+0x42>
 80084c8:	4621      	mov	r1, r4
 80084ca:	4628      	mov	r0, r5
 80084cc:	f000 f948 	bl	8008760 <_fflush_r>
 80084d0:	bb30      	cbnz	r0, 8008520 <__swbuf_r+0x90>
 80084d2:	68a3      	ldr	r3, [r4, #8]
 80084d4:	3b01      	subs	r3, #1
 80084d6:	60a3      	str	r3, [r4, #8]
 80084d8:	6823      	ldr	r3, [r4, #0]
 80084da:	1c5a      	adds	r2, r3, #1
 80084dc:	6022      	str	r2, [r4, #0]
 80084de:	701e      	strb	r6, [r3, #0]
 80084e0:	6963      	ldr	r3, [r4, #20]
 80084e2:	3001      	adds	r0, #1
 80084e4:	4283      	cmp	r3, r0
 80084e6:	d004      	beq.n	80084f2 <__swbuf_r+0x62>
 80084e8:	89a3      	ldrh	r3, [r4, #12]
 80084ea:	07db      	lsls	r3, r3, #31
 80084ec:	d506      	bpl.n	80084fc <__swbuf_r+0x6c>
 80084ee:	2e0a      	cmp	r6, #10
 80084f0:	d104      	bne.n	80084fc <__swbuf_r+0x6c>
 80084f2:	4621      	mov	r1, r4
 80084f4:	4628      	mov	r0, r5
 80084f6:	f000 f933 	bl	8008760 <_fflush_r>
 80084fa:	b988      	cbnz	r0, 8008520 <__swbuf_r+0x90>
 80084fc:	4638      	mov	r0, r7
 80084fe:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8008500:	4b0a      	ldr	r3, [pc, #40]	; (800852c <__swbuf_r+0x9c>)
 8008502:	429c      	cmp	r4, r3
 8008504:	d101      	bne.n	800850a <__swbuf_r+0x7a>
 8008506:	68ac      	ldr	r4, [r5, #8]
 8008508:	e7cf      	b.n	80084aa <__swbuf_r+0x1a>
 800850a:	4b09      	ldr	r3, [pc, #36]	; (8008530 <__swbuf_r+0xa0>)
 800850c:	429c      	cmp	r4, r3
 800850e:	bf08      	it	eq
 8008510:	68ec      	ldreq	r4, [r5, #12]
 8008512:	e7ca      	b.n	80084aa <__swbuf_r+0x1a>
 8008514:	4621      	mov	r1, r4
 8008516:	4628      	mov	r0, r5
 8008518:	f000 f81e 	bl	8008558 <__swsetup_r>
 800851c:	2800      	cmp	r0, #0
 800851e:	d0cb      	beq.n	80084b8 <__swbuf_r+0x28>
 8008520:	f04f 37ff 	mov.w	r7, #4294967295
 8008524:	e7ea      	b.n	80084fc <__swbuf_r+0x6c>
 8008526:	bf00      	nop
 8008528:	08008b98 	.word	0x08008b98
 800852c:	08008bb8 	.word	0x08008bb8
 8008530:	08008b78 	.word	0x08008b78

08008534 <_write_r>:
 8008534:	b538      	push	{r3, r4, r5, lr}
 8008536:	4d07      	ldr	r5, [pc, #28]	; (8008554 <_write_r+0x20>)
 8008538:	4604      	mov	r4, r0
 800853a:	4608      	mov	r0, r1
 800853c:	4611      	mov	r1, r2
 800853e:	2200      	movs	r2, #0
 8008540:	602a      	str	r2, [r5, #0]
 8008542:	461a      	mov	r2, r3
 8008544:	f7f8 fa1c 	bl	8000980 <_write>
 8008548:	1c43      	adds	r3, r0, #1
 800854a:	d102      	bne.n	8008552 <_write_r+0x1e>
 800854c:	682b      	ldr	r3, [r5, #0]
 800854e:	b103      	cbz	r3, 8008552 <_write_r+0x1e>
 8008550:	6023      	str	r3, [r4, #0]
 8008552:	bd38      	pop	{r3, r4, r5, pc}
 8008554:	240066f0 	.word	0x240066f0

08008558 <__swsetup_r>:
 8008558:	4b32      	ldr	r3, [pc, #200]	; (8008624 <__swsetup_r+0xcc>)
 800855a:	b570      	push	{r4, r5, r6, lr}
 800855c:	681d      	ldr	r5, [r3, #0]
 800855e:	4606      	mov	r6, r0
 8008560:	460c      	mov	r4, r1
 8008562:	b125      	cbz	r5, 800856e <__swsetup_r+0x16>
 8008564:	69ab      	ldr	r3, [r5, #24]
 8008566:	b913      	cbnz	r3, 800856e <__swsetup_r+0x16>
 8008568:	4628      	mov	r0, r5
 800856a:	f7ff fb1b 	bl	8007ba4 <__sinit>
 800856e:	4b2e      	ldr	r3, [pc, #184]	; (8008628 <__swsetup_r+0xd0>)
 8008570:	429c      	cmp	r4, r3
 8008572:	d10f      	bne.n	8008594 <__swsetup_r+0x3c>
 8008574:	686c      	ldr	r4, [r5, #4]
 8008576:	89a3      	ldrh	r3, [r4, #12]
 8008578:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 800857c:	0719      	lsls	r1, r3, #28
 800857e:	d42c      	bmi.n	80085da <__swsetup_r+0x82>
 8008580:	06dd      	lsls	r5, r3, #27
 8008582:	d411      	bmi.n	80085a8 <__swsetup_r+0x50>
 8008584:	2309      	movs	r3, #9
 8008586:	6033      	str	r3, [r6, #0]
 8008588:	f042 0340 	orr.w	r3, r2, #64	; 0x40
 800858c:	81a3      	strh	r3, [r4, #12]
 800858e:	f04f 30ff 	mov.w	r0, #4294967295
 8008592:	e03e      	b.n	8008612 <__swsetup_r+0xba>
 8008594:	4b25      	ldr	r3, [pc, #148]	; (800862c <__swsetup_r+0xd4>)
 8008596:	429c      	cmp	r4, r3
 8008598:	d101      	bne.n	800859e <__swsetup_r+0x46>
 800859a:	68ac      	ldr	r4, [r5, #8]
 800859c:	e7eb      	b.n	8008576 <__swsetup_r+0x1e>
 800859e:	4b24      	ldr	r3, [pc, #144]	; (8008630 <__swsetup_r+0xd8>)
 80085a0:	429c      	cmp	r4, r3
 80085a2:	bf08      	it	eq
 80085a4:	68ec      	ldreq	r4, [r5, #12]
 80085a6:	e7e6      	b.n	8008576 <__swsetup_r+0x1e>
 80085a8:	0758      	lsls	r0, r3, #29
 80085aa:	d512      	bpl.n	80085d2 <__swsetup_r+0x7a>
 80085ac:	6b61      	ldr	r1, [r4, #52]	; 0x34
 80085ae:	b141      	cbz	r1, 80085c2 <__swsetup_r+0x6a>
 80085b0:	f104 0344 	add.w	r3, r4, #68	; 0x44
 80085b4:	4299      	cmp	r1, r3
 80085b6:	d002      	beq.n	80085be <__swsetup_r+0x66>
 80085b8:	4630      	mov	r0, r6
 80085ba:	f000 f991 	bl	80088e0 <_free_r>
 80085be:	2300      	movs	r3, #0
 80085c0:	6363      	str	r3, [r4, #52]	; 0x34
 80085c2:	89a3      	ldrh	r3, [r4, #12]
 80085c4:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 80085c8:	81a3      	strh	r3, [r4, #12]
 80085ca:	2300      	movs	r3, #0
 80085cc:	6063      	str	r3, [r4, #4]
 80085ce:	6923      	ldr	r3, [r4, #16]
 80085d0:	6023      	str	r3, [r4, #0]
 80085d2:	89a3      	ldrh	r3, [r4, #12]
 80085d4:	f043 0308 	orr.w	r3, r3, #8
 80085d8:	81a3      	strh	r3, [r4, #12]
 80085da:	6923      	ldr	r3, [r4, #16]
 80085dc:	b94b      	cbnz	r3, 80085f2 <__swsetup_r+0x9a>
 80085de:	89a3      	ldrh	r3, [r4, #12]
 80085e0:	f403 7320 	and.w	r3, r3, #640	; 0x280
 80085e4:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80085e8:	d003      	beq.n	80085f2 <__swsetup_r+0x9a>
 80085ea:	4621      	mov	r1, r4
 80085ec:	4630      	mov	r0, r6
 80085ee:	f000 f92b 	bl	8008848 <__smakebuf_r>
 80085f2:	89a0      	ldrh	r0, [r4, #12]
 80085f4:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 80085f8:	f010 0301 	ands.w	r3, r0, #1
 80085fc:	d00a      	beq.n	8008614 <__swsetup_r+0xbc>
 80085fe:	2300      	movs	r3, #0
 8008600:	60a3      	str	r3, [r4, #8]
 8008602:	6963      	ldr	r3, [r4, #20]
 8008604:	425b      	negs	r3, r3
 8008606:	61a3      	str	r3, [r4, #24]
 8008608:	6923      	ldr	r3, [r4, #16]
 800860a:	b943      	cbnz	r3, 800861e <__swsetup_r+0xc6>
 800860c:	f010 0080 	ands.w	r0, r0, #128	; 0x80
 8008610:	d1ba      	bne.n	8008588 <__swsetup_r+0x30>
 8008612:	bd70      	pop	{r4, r5, r6, pc}
 8008614:	0781      	lsls	r1, r0, #30
 8008616:	bf58      	it	pl
 8008618:	6963      	ldrpl	r3, [r4, #20]
 800861a:	60a3      	str	r3, [r4, #8]
 800861c:	e7f4      	b.n	8008608 <__swsetup_r+0xb0>
 800861e:	2000      	movs	r0, #0
 8008620:	e7f7      	b.n	8008612 <__swsetup_r+0xba>
 8008622:	bf00      	nop
 8008624:	24000014 	.word	0x24000014
 8008628:	08008b98 	.word	0x08008b98
 800862c:	08008bb8 	.word	0x08008bb8
 8008630:	08008b78 	.word	0x08008b78

08008634 <_close_r>:
 8008634:	b538      	push	{r3, r4, r5, lr}
 8008636:	4d06      	ldr	r5, [pc, #24]	; (8008650 <_close_r+0x1c>)
 8008638:	2300      	movs	r3, #0
 800863a:	4604      	mov	r4, r0
 800863c:	4608      	mov	r0, r1
 800863e:	602b      	str	r3, [r5, #0]
 8008640:	f7f8 fe21 	bl	8001286 <_close>
 8008644:	1c43      	adds	r3, r0, #1
 8008646:	d102      	bne.n	800864e <_close_r+0x1a>
 8008648:	682b      	ldr	r3, [r5, #0]
 800864a:	b103      	cbz	r3, 800864e <_close_r+0x1a>
 800864c:	6023      	str	r3, [r4, #0]
 800864e:	bd38      	pop	{r3, r4, r5, pc}
 8008650:	240066f0 	.word	0x240066f0

08008654 <__sflush_r>:
 8008654:	898a      	ldrh	r2, [r1, #12]
 8008656:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800865a:	4605      	mov	r5, r0
 800865c:	0710      	lsls	r0, r2, #28
 800865e:	460c      	mov	r4, r1
 8008660:	d458      	bmi.n	8008714 <__sflush_r+0xc0>
 8008662:	684b      	ldr	r3, [r1, #4]
 8008664:	2b00      	cmp	r3, #0
 8008666:	dc05      	bgt.n	8008674 <__sflush_r+0x20>
 8008668:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 800866a:	2b00      	cmp	r3, #0
 800866c:	dc02      	bgt.n	8008674 <__sflush_r+0x20>
 800866e:	2000      	movs	r0, #0
 8008670:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8008674:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 8008676:	2e00      	cmp	r6, #0
 8008678:	d0f9      	beq.n	800866e <__sflush_r+0x1a>
 800867a:	2300      	movs	r3, #0
 800867c:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 8008680:	682f      	ldr	r7, [r5, #0]
 8008682:	602b      	str	r3, [r5, #0]
 8008684:	d032      	beq.n	80086ec <__sflush_r+0x98>
 8008686:	6d60      	ldr	r0, [r4, #84]	; 0x54
 8008688:	89a3      	ldrh	r3, [r4, #12]
 800868a:	075a      	lsls	r2, r3, #29
 800868c:	d505      	bpl.n	800869a <__sflush_r+0x46>
 800868e:	6863      	ldr	r3, [r4, #4]
 8008690:	1ac0      	subs	r0, r0, r3
 8008692:	6b63      	ldr	r3, [r4, #52]	; 0x34
 8008694:	b10b      	cbz	r3, 800869a <__sflush_r+0x46>
 8008696:	6c23      	ldr	r3, [r4, #64]	; 0x40
 8008698:	1ac0      	subs	r0, r0, r3
 800869a:	2300      	movs	r3, #0
 800869c:	4602      	mov	r2, r0
 800869e:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 80086a0:	6a21      	ldr	r1, [r4, #32]
 80086a2:	4628      	mov	r0, r5
 80086a4:	47b0      	blx	r6
 80086a6:	1c43      	adds	r3, r0, #1
 80086a8:	89a3      	ldrh	r3, [r4, #12]
 80086aa:	d106      	bne.n	80086ba <__sflush_r+0x66>
 80086ac:	6829      	ldr	r1, [r5, #0]
 80086ae:	291d      	cmp	r1, #29
 80086b0:	d82c      	bhi.n	800870c <__sflush_r+0xb8>
 80086b2:	4a2a      	ldr	r2, [pc, #168]	; (800875c <__sflush_r+0x108>)
 80086b4:	40ca      	lsrs	r2, r1
 80086b6:	07d6      	lsls	r6, r2, #31
 80086b8:	d528      	bpl.n	800870c <__sflush_r+0xb8>
 80086ba:	2200      	movs	r2, #0
 80086bc:	6062      	str	r2, [r4, #4]
 80086be:	04d9      	lsls	r1, r3, #19
 80086c0:	6922      	ldr	r2, [r4, #16]
 80086c2:	6022      	str	r2, [r4, #0]
 80086c4:	d504      	bpl.n	80086d0 <__sflush_r+0x7c>
 80086c6:	1c42      	adds	r2, r0, #1
 80086c8:	d101      	bne.n	80086ce <__sflush_r+0x7a>
 80086ca:	682b      	ldr	r3, [r5, #0]
 80086cc:	b903      	cbnz	r3, 80086d0 <__sflush_r+0x7c>
 80086ce:	6560      	str	r0, [r4, #84]	; 0x54
 80086d0:	6b61      	ldr	r1, [r4, #52]	; 0x34
 80086d2:	602f      	str	r7, [r5, #0]
 80086d4:	2900      	cmp	r1, #0
 80086d6:	d0ca      	beq.n	800866e <__sflush_r+0x1a>
 80086d8:	f104 0344 	add.w	r3, r4, #68	; 0x44
 80086dc:	4299      	cmp	r1, r3
 80086de:	d002      	beq.n	80086e6 <__sflush_r+0x92>
 80086e0:	4628      	mov	r0, r5
 80086e2:	f000 f8fd 	bl	80088e0 <_free_r>
 80086e6:	2000      	movs	r0, #0
 80086e8:	6360      	str	r0, [r4, #52]	; 0x34
 80086ea:	e7c1      	b.n	8008670 <__sflush_r+0x1c>
 80086ec:	6a21      	ldr	r1, [r4, #32]
 80086ee:	2301      	movs	r3, #1
 80086f0:	4628      	mov	r0, r5
 80086f2:	47b0      	blx	r6
 80086f4:	1c41      	adds	r1, r0, #1
 80086f6:	d1c7      	bne.n	8008688 <__sflush_r+0x34>
 80086f8:	682b      	ldr	r3, [r5, #0]
 80086fa:	2b00      	cmp	r3, #0
 80086fc:	d0c4      	beq.n	8008688 <__sflush_r+0x34>
 80086fe:	2b1d      	cmp	r3, #29
 8008700:	d001      	beq.n	8008706 <__sflush_r+0xb2>
 8008702:	2b16      	cmp	r3, #22
 8008704:	d101      	bne.n	800870a <__sflush_r+0xb6>
 8008706:	602f      	str	r7, [r5, #0]
 8008708:	e7b1      	b.n	800866e <__sflush_r+0x1a>
 800870a:	89a3      	ldrh	r3, [r4, #12]
 800870c:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8008710:	81a3      	strh	r3, [r4, #12]
 8008712:	e7ad      	b.n	8008670 <__sflush_r+0x1c>
 8008714:	690f      	ldr	r7, [r1, #16]
 8008716:	2f00      	cmp	r7, #0
 8008718:	d0a9      	beq.n	800866e <__sflush_r+0x1a>
 800871a:	0793      	lsls	r3, r2, #30
 800871c:	680e      	ldr	r6, [r1, #0]
 800871e:	bf08      	it	eq
 8008720:	694b      	ldreq	r3, [r1, #20]
 8008722:	600f      	str	r7, [r1, #0]
 8008724:	bf18      	it	ne
 8008726:	2300      	movne	r3, #0
 8008728:	eba6 0807 	sub.w	r8, r6, r7
 800872c:	608b      	str	r3, [r1, #8]
 800872e:	f1b8 0f00 	cmp.w	r8, #0
 8008732:	dd9c      	ble.n	800866e <__sflush_r+0x1a>
 8008734:	6a21      	ldr	r1, [r4, #32]
 8008736:	6aa6      	ldr	r6, [r4, #40]	; 0x28
 8008738:	4643      	mov	r3, r8
 800873a:	463a      	mov	r2, r7
 800873c:	4628      	mov	r0, r5
 800873e:	47b0      	blx	r6
 8008740:	2800      	cmp	r0, #0
 8008742:	dc06      	bgt.n	8008752 <__sflush_r+0xfe>
 8008744:	89a3      	ldrh	r3, [r4, #12]
 8008746:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800874a:	81a3      	strh	r3, [r4, #12]
 800874c:	f04f 30ff 	mov.w	r0, #4294967295
 8008750:	e78e      	b.n	8008670 <__sflush_r+0x1c>
 8008752:	4407      	add	r7, r0
 8008754:	eba8 0800 	sub.w	r8, r8, r0
 8008758:	e7e9      	b.n	800872e <__sflush_r+0xda>
 800875a:	bf00      	nop
 800875c:	20400001 	.word	0x20400001

08008760 <_fflush_r>:
 8008760:	b538      	push	{r3, r4, r5, lr}
 8008762:	690b      	ldr	r3, [r1, #16]
 8008764:	4605      	mov	r5, r0
 8008766:	460c      	mov	r4, r1
 8008768:	b913      	cbnz	r3, 8008770 <_fflush_r+0x10>
 800876a:	2500      	movs	r5, #0
 800876c:	4628      	mov	r0, r5
 800876e:	bd38      	pop	{r3, r4, r5, pc}
 8008770:	b118      	cbz	r0, 800877a <_fflush_r+0x1a>
 8008772:	6983      	ldr	r3, [r0, #24]
 8008774:	b90b      	cbnz	r3, 800877a <_fflush_r+0x1a>
 8008776:	f7ff fa15 	bl	8007ba4 <__sinit>
 800877a:	4b14      	ldr	r3, [pc, #80]	; (80087cc <_fflush_r+0x6c>)
 800877c:	429c      	cmp	r4, r3
 800877e:	d11b      	bne.n	80087b8 <_fflush_r+0x58>
 8008780:	686c      	ldr	r4, [r5, #4]
 8008782:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8008786:	2b00      	cmp	r3, #0
 8008788:	d0ef      	beq.n	800876a <_fflush_r+0xa>
 800878a:	6e62      	ldr	r2, [r4, #100]	; 0x64
 800878c:	07d0      	lsls	r0, r2, #31
 800878e:	d404      	bmi.n	800879a <_fflush_r+0x3a>
 8008790:	0599      	lsls	r1, r3, #22
 8008792:	d402      	bmi.n	800879a <_fflush_r+0x3a>
 8008794:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8008796:	f7ff faa3 	bl	8007ce0 <__retarget_lock_acquire_recursive>
 800879a:	4628      	mov	r0, r5
 800879c:	4621      	mov	r1, r4
 800879e:	f7ff ff59 	bl	8008654 <__sflush_r>
 80087a2:	6e63      	ldr	r3, [r4, #100]	; 0x64
 80087a4:	07da      	lsls	r2, r3, #31
 80087a6:	4605      	mov	r5, r0
 80087a8:	d4e0      	bmi.n	800876c <_fflush_r+0xc>
 80087aa:	89a3      	ldrh	r3, [r4, #12]
 80087ac:	059b      	lsls	r3, r3, #22
 80087ae:	d4dd      	bmi.n	800876c <_fflush_r+0xc>
 80087b0:	6da0      	ldr	r0, [r4, #88]	; 0x58
 80087b2:	f7ff fa96 	bl	8007ce2 <__retarget_lock_release_recursive>
 80087b6:	e7d9      	b.n	800876c <_fflush_r+0xc>
 80087b8:	4b05      	ldr	r3, [pc, #20]	; (80087d0 <_fflush_r+0x70>)
 80087ba:	429c      	cmp	r4, r3
 80087bc:	d101      	bne.n	80087c2 <_fflush_r+0x62>
 80087be:	68ac      	ldr	r4, [r5, #8]
 80087c0:	e7df      	b.n	8008782 <_fflush_r+0x22>
 80087c2:	4b04      	ldr	r3, [pc, #16]	; (80087d4 <_fflush_r+0x74>)
 80087c4:	429c      	cmp	r4, r3
 80087c6:	bf08      	it	eq
 80087c8:	68ec      	ldreq	r4, [r5, #12]
 80087ca:	e7da      	b.n	8008782 <_fflush_r+0x22>
 80087cc:	08008b98 	.word	0x08008b98
 80087d0:	08008bb8 	.word	0x08008bb8
 80087d4:	08008b78 	.word	0x08008b78

080087d8 <_lseek_r>:
 80087d8:	b538      	push	{r3, r4, r5, lr}
 80087da:	4d07      	ldr	r5, [pc, #28]	; (80087f8 <_lseek_r+0x20>)
 80087dc:	4604      	mov	r4, r0
 80087de:	4608      	mov	r0, r1
 80087e0:	4611      	mov	r1, r2
 80087e2:	2200      	movs	r2, #0
 80087e4:	602a      	str	r2, [r5, #0]
 80087e6:	461a      	mov	r2, r3
 80087e8:	f7f8 fd74 	bl	80012d4 <_lseek>
 80087ec:	1c43      	adds	r3, r0, #1
 80087ee:	d102      	bne.n	80087f6 <_lseek_r+0x1e>
 80087f0:	682b      	ldr	r3, [r5, #0]
 80087f2:	b103      	cbz	r3, 80087f6 <_lseek_r+0x1e>
 80087f4:	6023      	str	r3, [r4, #0]
 80087f6:	bd38      	pop	{r3, r4, r5, pc}
 80087f8:	240066f0 	.word	0x240066f0

080087fc <__swhatbuf_r>:
 80087fc:	b570      	push	{r4, r5, r6, lr}
 80087fe:	460e      	mov	r6, r1
 8008800:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8008804:	2900      	cmp	r1, #0
 8008806:	b096      	sub	sp, #88	; 0x58
 8008808:	4614      	mov	r4, r2
 800880a:	461d      	mov	r5, r3
 800880c:	da08      	bge.n	8008820 <__swhatbuf_r+0x24>
 800880e:	f9b6 300c 	ldrsh.w	r3, [r6, #12]
 8008812:	2200      	movs	r2, #0
 8008814:	602a      	str	r2, [r5, #0]
 8008816:	061a      	lsls	r2, r3, #24
 8008818:	d410      	bmi.n	800883c <__swhatbuf_r+0x40>
 800881a:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800881e:	e00e      	b.n	800883e <__swhatbuf_r+0x42>
 8008820:	466a      	mov	r2, sp
 8008822:	f000 f8bb 	bl	800899c <_fstat_r>
 8008826:	2800      	cmp	r0, #0
 8008828:	dbf1      	blt.n	800880e <__swhatbuf_r+0x12>
 800882a:	9a01      	ldr	r2, [sp, #4]
 800882c:	f402 4270 	and.w	r2, r2, #61440	; 0xf000
 8008830:	f5a2 5300 	sub.w	r3, r2, #8192	; 0x2000
 8008834:	425a      	negs	r2, r3
 8008836:	415a      	adcs	r2, r3
 8008838:	602a      	str	r2, [r5, #0]
 800883a:	e7ee      	b.n	800881a <__swhatbuf_r+0x1e>
 800883c:	2340      	movs	r3, #64	; 0x40
 800883e:	2000      	movs	r0, #0
 8008840:	6023      	str	r3, [r4, #0]
 8008842:	b016      	add	sp, #88	; 0x58
 8008844:	bd70      	pop	{r4, r5, r6, pc}
	...

08008848 <__smakebuf_r>:
 8008848:	898b      	ldrh	r3, [r1, #12]
 800884a:	b573      	push	{r0, r1, r4, r5, r6, lr}
 800884c:	079d      	lsls	r5, r3, #30
 800884e:	4606      	mov	r6, r0
 8008850:	460c      	mov	r4, r1
 8008852:	d507      	bpl.n	8008864 <__smakebuf_r+0x1c>
 8008854:	f104 0347 	add.w	r3, r4, #71	; 0x47
 8008858:	6023      	str	r3, [r4, #0]
 800885a:	6123      	str	r3, [r4, #16]
 800885c:	2301      	movs	r3, #1
 800885e:	6163      	str	r3, [r4, #20]
 8008860:	b002      	add	sp, #8
 8008862:	bd70      	pop	{r4, r5, r6, pc}
 8008864:	ab01      	add	r3, sp, #4
 8008866:	466a      	mov	r2, sp
 8008868:	f7ff ffc8 	bl	80087fc <__swhatbuf_r>
 800886c:	9900      	ldr	r1, [sp, #0]
 800886e:	4605      	mov	r5, r0
 8008870:	4630      	mov	r0, r6
 8008872:	f7ff fa57 	bl	8007d24 <_malloc_r>
 8008876:	b948      	cbnz	r0, 800888c <__smakebuf_r+0x44>
 8008878:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800887c:	059a      	lsls	r2, r3, #22
 800887e:	d4ef      	bmi.n	8008860 <__smakebuf_r+0x18>
 8008880:	f023 0303 	bic.w	r3, r3, #3
 8008884:	f043 0302 	orr.w	r3, r3, #2
 8008888:	81a3      	strh	r3, [r4, #12]
 800888a:	e7e3      	b.n	8008854 <__smakebuf_r+0xc>
 800888c:	4b0d      	ldr	r3, [pc, #52]	; (80088c4 <__smakebuf_r+0x7c>)
 800888e:	62b3      	str	r3, [r6, #40]	; 0x28
 8008890:	89a3      	ldrh	r3, [r4, #12]
 8008892:	6020      	str	r0, [r4, #0]
 8008894:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8008898:	81a3      	strh	r3, [r4, #12]
 800889a:	9b00      	ldr	r3, [sp, #0]
 800889c:	6163      	str	r3, [r4, #20]
 800889e:	9b01      	ldr	r3, [sp, #4]
 80088a0:	6120      	str	r0, [r4, #16]
 80088a2:	b15b      	cbz	r3, 80088bc <__smakebuf_r+0x74>
 80088a4:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 80088a8:	4630      	mov	r0, r6
 80088aa:	f000 f889 	bl	80089c0 <_isatty_r>
 80088ae:	b128      	cbz	r0, 80088bc <__smakebuf_r+0x74>
 80088b0:	89a3      	ldrh	r3, [r4, #12]
 80088b2:	f023 0303 	bic.w	r3, r3, #3
 80088b6:	f043 0301 	orr.w	r3, r3, #1
 80088ba:	81a3      	strh	r3, [r4, #12]
 80088bc:	89a0      	ldrh	r0, [r4, #12]
 80088be:	4305      	orrs	r5, r0
 80088c0:	81a5      	strh	r5, [r4, #12]
 80088c2:	e7cd      	b.n	8008860 <__smakebuf_r+0x18>
 80088c4:	08007b3d 	.word	0x08007b3d

080088c8 <__malloc_lock>:
 80088c8:	4801      	ldr	r0, [pc, #4]	; (80088d0 <__malloc_lock+0x8>)
 80088ca:	f7ff ba09 	b.w	8007ce0 <__retarget_lock_acquire_recursive>
 80088ce:	bf00      	nop
 80088d0:	240066e4 	.word	0x240066e4

080088d4 <__malloc_unlock>:
 80088d4:	4801      	ldr	r0, [pc, #4]	; (80088dc <__malloc_unlock+0x8>)
 80088d6:	f7ff ba04 	b.w	8007ce2 <__retarget_lock_release_recursive>
 80088da:	bf00      	nop
 80088dc:	240066e4 	.word	0x240066e4

080088e0 <_free_r>:
 80088e0:	b537      	push	{r0, r1, r2, r4, r5, lr}
 80088e2:	2900      	cmp	r1, #0
 80088e4:	d044      	beq.n	8008970 <_free_r+0x90>
 80088e6:	f851 3c04 	ldr.w	r3, [r1, #-4]
 80088ea:	9001      	str	r0, [sp, #4]
 80088ec:	2b00      	cmp	r3, #0
 80088ee:	f1a1 0404 	sub.w	r4, r1, #4
 80088f2:	bfb8      	it	lt
 80088f4:	18e4      	addlt	r4, r4, r3
 80088f6:	f7ff ffe7 	bl	80088c8 <__malloc_lock>
 80088fa:	4a1e      	ldr	r2, [pc, #120]	; (8008974 <_free_r+0x94>)
 80088fc:	9801      	ldr	r0, [sp, #4]
 80088fe:	6813      	ldr	r3, [r2, #0]
 8008900:	b933      	cbnz	r3, 8008910 <_free_r+0x30>
 8008902:	6063      	str	r3, [r4, #4]
 8008904:	6014      	str	r4, [r2, #0]
 8008906:	b003      	add	sp, #12
 8008908:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 800890c:	f7ff bfe2 	b.w	80088d4 <__malloc_unlock>
 8008910:	42a3      	cmp	r3, r4
 8008912:	d908      	bls.n	8008926 <_free_r+0x46>
 8008914:	6825      	ldr	r5, [r4, #0]
 8008916:	1961      	adds	r1, r4, r5
 8008918:	428b      	cmp	r3, r1
 800891a:	bf01      	itttt	eq
 800891c:	6819      	ldreq	r1, [r3, #0]
 800891e:	685b      	ldreq	r3, [r3, #4]
 8008920:	1949      	addeq	r1, r1, r5
 8008922:	6021      	streq	r1, [r4, #0]
 8008924:	e7ed      	b.n	8008902 <_free_r+0x22>
 8008926:	461a      	mov	r2, r3
 8008928:	685b      	ldr	r3, [r3, #4]
 800892a:	b10b      	cbz	r3, 8008930 <_free_r+0x50>
 800892c:	42a3      	cmp	r3, r4
 800892e:	d9fa      	bls.n	8008926 <_free_r+0x46>
 8008930:	6811      	ldr	r1, [r2, #0]
 8008932:	1855      	adds	r5, r2, r1
 8008934:	42a5      	cmp	r5, r4
 8008936:	d10b      	bne.n	8008950 <_free_r+0x70>
 8008938:	6824      	ldr	r4, [r4, #0]
 800893a:	4421      	add	r1, r4
 800893c:	1854      	adds	r4, r2, r1
 800893e:	42a3      	cmp	r3, r4
 8008940:	6011      	str	r1, [r2, #0]
 8008942:	d1e0      	bne.n	8008906 <_free_r+0x26>
 8008944:	681c      	ldr	r4, [r3, #0]
 8008946:	685b      	ldr	r3, [r3, #4]
 8008948:	6053      	str	r3, [r2, #4]
 800894a:	4421      	add	r1, r4
 800894c:	6011      	str	r1, [r2, #0]
 800894e:	e7da      	b.n	8008906 <_free_r+0x26>
 8008950:	d902      	bls.n	8008958 <_free_r+0x78>
 8008952:	230c      	movs	r3, #12
 8008954:	6003      	str	r3, [r0, #0]
 8008956:	e7d6      	b.n	8008906 <_free_r+0x26>
 8008958:	6825      	ldr	r5, [r4, #0]
 800895a:	1961      	adds	r1, r4, r5
 800895c:	428b      	cmp	r3, r1
 800895e:	bf04      	itt	eq
 8008960:	6819      	ldreq	r1, [r3, #0]
 8008962:	685b      	ldreq	r3, [r3, #4]
 8008964:	6063      	str	r3, [r4, #4]
 8008966:	bf04      	itt	eq
 8008968:	1949      	addeq	r1, r1, r5
 800896a:	6021      	streq	r1, [r4, #0]
 800896c:	6054      	str	r4, [r2, #4]
 800896e:	e7ca      	b.n	8008906 <_free_r+0x26>
 8008970:	b003      	add	sp, #12
 8008972:	bd30      	pop	{r4, r5, pc}
 8008974:	240066e8 	.word	0x240066e8

08008978 <_read_r>:
 8008978:	b538      	push	{r3, r4, r5, lr}
 800897a:	4d07      	ldr	r5, [pc, #28]	; (8008998 <_read_r+0x20>)
 800897c:	4604      	mov	r4, r0
 800897e:	4608      	mov	r0, r1
 8008980:	4611      	mov	r1, r2
 8008982:	2200      	movs	r2, #0
 8008984:	602a      	str	r2, [r5, #0]
 8008986:	461a      	mov	r2, r3
 8008988:	f7f8 fc60 	bl	800124c <_read>
 800898c:	1c43      	adds	r3, r0, #1
 800898e:	d102      	bne.n	8008996 <_read_r+0x1e>
 8008990:	682b      	ldr	r3, [r5, #0]
 8008992:	b103      	cbz	r3, 8008996 <_read_r+0x1e>
 8008994:	6023      	str	r3, [r4, #0]
 8008996:	bd38      	pop	{r3, r4, r5, pc}
 8008998:	240066f0 	.word	0x240066f0

0800899c <_fstat_r>:
 800899c:	b538      	push	{r3, r4, r5, lr}
 800899e:	4d07      	ldr	r5, [pc, #28]	; (80089bc <_fstat_r+0x20>)
 80089a0:	2300      	movs	r3, #0
 80089a2:	4604      	mov	r4, r0
 80089a4:	4608      	mov	r0, r1
 80089a6:	4611      	mov	r1, r2
 80089a8:	602b      	str	r3, [r5, #0]
 80089aa:	f7f8 fc78 	bl	800129e <_fstat>
 80089ae:	1c43      	adds	r3, r0, #1
 80089b0:	d102      	bne.n	80089b8 <_fstat_r+0x1c>
 80089b2:	682b      	ldr	r3, [r5, #0]
 80089b4:	b103      	cbz	r3, 80089b8 <_fstat_r+0x1c>
 80089b6:	6023      	str	r3, [r4, #0]
 80089b8:	bd38      	pop	{r3, r4, r5, pc}
 80089ba:	bf00      	nop
 80089bc:	240066f0 	.word	0x240066f0

080089c0 <_isatty_r>:
 80089c0:	b538      	push	{r3, r4, r5, lr}
 80089c2:	4d06      	ldr	r5, [pc, #24]	; (80089dc <_isatty_r+0x1c>)
 80089c4:	2300      	movs	r3, #0
 80089c6:	4604      	mov	r4, r0
 80089c8:	4608      	mov	r0, r1
 80089ca:	602b      	str	r3, [r5, #0]
 80089cc:	f7f8 fc77 	bl	80012be <_isatty>
 80089d0:	1c43      	adds	r3, r0, #1
 80089d2:	d102      	bne.n	80089da <_isatty_r+0x1a>
 80089d4:	682b      	ldr	r3, [r5, #0]
 80089d6:	b103      	cbz	r3, 80089da <_isatty_r+0x1a>
 80089d8:	6023      	str	r3, [r4, #0]
 80089da:	bd38      	pop	{r3, r4, r5, pc}
 80089dc:	240066f0 	.word	0x240066f0

080089e0 <_init>:
 80089e0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80089e2:	bf00      	nop
 80089e4:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80089e6:	bc08      	pop	{r3}
 80089e8:	469e      	mov	lr, r3
 80089ea:	4770      	bx	lr

080089ec <_fini>:
 80089ec:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80089ee:	bf00      	nop
 80089f0:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80089f2:	bc08      	pop	{r3}
 80089f4:	469e      	mov	lr, r3
 80089f6:	4770      	bx	lr
