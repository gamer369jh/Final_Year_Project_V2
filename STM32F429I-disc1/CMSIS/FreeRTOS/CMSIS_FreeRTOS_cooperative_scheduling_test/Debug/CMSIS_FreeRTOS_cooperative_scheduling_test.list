
CMSIS_FreeRTOS_cooperative_scheduling_test.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001ac  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000aad0  080001b0  080001b0  000101b0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000002f0  0800ac80  0800ac80  0001ac80  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0800af70  0800af70  00020074  2**0
                  CONTENTS
  4 .ARM          00000008  0800af70  0800af70  0001af70  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  0800af78  0800af78  00020074  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0800af78  0800af78  0001af78  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  0800af7c  0800af7c  0001af7c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000074  20000000  0800af80  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .ccmram       00000000  10000000  10000000  00020074  2**0
                  CONTENTS
 10 .bss          00009378  20000074  20000074  00020074  2**2
                  ALLOC
 11 ._user_heap_stack 00000604  200093ec  200093ec  00020074  2**0
                  ALLOC
 12 .ARM.attributes 00000030  00000000  00000000  00020074  2**0
                  CONTENTS, READONLY
 13 .debug_info   0002bb79  00000000  00000000  000200a4  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 000057e6  00000000  00000000  0004bc1d  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 00002490  00000000  00000000  00051408  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_ranges 00002270  00000000  00000000  00053898  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  0002af32  00000000  00000000  00055b08  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   0002a2a1  00000000  00000000  00080a3a  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    000f6d64  00000000  00000000  000aacdb  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .comment      00000050  00000000  00000000  001a1a3f  2**0
                  CONTENTS, READONLY
 21 .debug_frame  0000a5b4  00000000  00000000  001a1a90  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001b0 <__do_global_dtors_aux>:
 80001b0:	b510      	push	{r4, lr}
 80001b2:	4c05      	ldr	r4, [pc, #20]	; (80001c8 <__do_global_dtors_aux+0x18>)
 80001b4:	7823      	ldrb	r3, [r4, #0]
 80001b6:	b933      	cbnz	r3, 80001c6 <__do_global_dtors_aux+0x16>
 80001b8:	4b04      	ldr	r3, [pc, #16]	; (80001cc <__do_global_dtors_aux+0x1c>)
 80001ba:	b113      	cbz	r3, 80001c2 <__do_global_dtors_aux+0x12>
 80001bc:	4804      	ldr	r0, [pc, #16]	; (80001d0 <__do_global_dtors_aux+0x20>)
 80001be:	f3af 8000 	nop.w
 80001c2:	2301      	movs	r3, #1
 80001c4:	7023      	strb	r3, [r4, #0]
 80001c6:	bd10      	pop	{r4, pc}
 80001c8:	20000074 	.word	0x20000074
 80001cc:	00000000 	.word	0x00000000
 80001d0:	0800ac68 	.word	0x0800ac68

080001d4 <frame_dummy>:
 80001d4:	b508      	push	{r3, lr}
 80001d6:	4b03      	ldr	r3, [pc, #12]	; (80001e4 <frame_dummy+0x10>)
 80001d8:	b11b      	cbz	r3, 80001e2 <frame_dummy+0xe>
 80001da:	4903      	ldr	r1, [pc, #12]	; (80001e8 <frame_dummy+0x14>)
 80001dc:	4803      	ldr	r0, [pc, #12]	; (80001ec <frame_dummy+0x18>)
 80001de:	f3af 8000 	nop.w
 80001e2:	bd08      	pop	{r3, pc}
 80001e4:	00000000 	.word	0x00000000
 80001e8:	20000078 	.word	0x20000078
 80001ec:	0800ac68 	.word	0x0800ac68

080001f0 <memchr>:
 80001f0:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 80001f4:	2a10      	cmp	r2, #16
 80001f6:	db2b      	blt.n	8000250 <memchr+0x60>
 80001f8:	f010 0f07 	tst.w	r0, #7
 80001fc:	d008      	beq.n	8000210 <memchr+0x20>
 80001fe:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000202:	3a01      	subs	r2, #1
 8000204:	428b      	cmp	r3, r1
 8000206:	d02d      	beq.n	8000264 <memchr+0x74>
 8000208:	f010 0f07 	tst.w	r0, #7
 800020c:	b342      	cbz	r2, 8000260 <memchr+0x70>
 800020e:	d1f6      	bne.n	80001fe <memchr+0xe>
 8000210:	b4f0      	push	{r4, r5, r6, r7}
 8000212:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000216:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800021a:	f022 0407 	bic.w	r4, r2, #7
 800021e:	f07f 0700 	mvns.w	r7, #0
 8000222:	2300      	movs	r3, #0
 8000224:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000228:	3c08      	subs	r4, #8
 800022a:	ea85 0501 	eor.w	r5, r5, r1
 800022e:	ea86 0601 	eor.w	r6, r6, r1
 8000232:	fa85 f547 	uadd8	r5, r5, r7
 8000236:	faa3 f587 	sel	r5, r3, r7
 800023a:	fa86 f647 	uadd8	r6, r6, r7
 800023e:	faa5 f687 	sel	r6, r5, r7
 8000242:	b98e      	cbnz	r6, 8000268 <memchr+0x78>
 8000244:	d1ee      	bne.n	8000224 <memchr+0x34>
 8000246:	bcf0      	pop	{r4, r5, r6, r7}
 8000248:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800024c:	f002 0207 	and.w	r2, r2, #7
 8000250:	b132      	cbz	r2, 8000260 <memchr+0x70>
 8000252:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000256:	3a01      	subs	r2, #1
 8000258:	ea83 0301 	eor.w	r3, r3, r1
 800025c:	b113      	cbz	r3, 8000264 <memchr+0x74>
 800025e:	d1f8      	bne.n	8000252 <memchr+0x62>
 8000260:	2000      	movs	r0, #0
 8000262:	4770      	bx	lr
 8000264:	3801      	subs	r0, #1
 8000266:	4770      	bx	lr
 8000268:	2d00      	cmp	r5, #0
 800026a:	bf06      	itte	eq
 800026c:	4635      	moveq	r5, r6
 800026e:	3803      	subeq	r0, #3
 8000270:	3807      	subne	r0, #7
 8000272:	f015 0f01 	tst.w	r5, #1
 8000276:	d107      	bne.n	8000288 <memchr+0x98>
 8000278:	3001      	adds	r0, #1
 800027a:	f415 7f80 	tst.w	r5, #256	; 0x100
 800027e:	bf02      	ittt	eq
 8000280:	3001      	addeq	r0, #1
 8000282:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 8000286:	3001      	addeq	r0, #1
 8000288:	bcf0      	pop	{r4, r5, r6, r7}
 800028a:	3801      	subs	r0, #1
 800028c:	4770      	bx	lr
 800028e:	bf00      	nop

08000290 <__aeabi_uldivmod>:
 8000290:	b953      	cbnz	r3, 80002a8 <__aeabi_uldivmod+0x18>
 8000292:	b94a      	cbnz	r2, 80002a8 <__aeabi_uldivmod+0x18>
 8000294:	2900      	cmp	r1, #0
 8000296:	bf08      	it	eq
 8000298:	2800      	cmpeq	r0, #0
 800029a:	bf1c      	itt	ne
 800029c:	f04f 31ff 	movne.w	r1, #4294967295
 80002a0:	f04f 30ff 	movne.w	r0, #4294967295
 80002a4:	f000 b974 	b.w	8000590 <__aeabi_idiv0>
 80002a8:	f1ad 0c08 	sub.w	ip, sp, #8
 80002ac:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 80002b0:	f000 f806 	bl	80002c0 <__udivmoddi4>
 80002b4:	f8dd e004 	ldr.w	lr, [sp, #4]
 80002b8:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80002bc:	b004      	add	sp, #16
 80002be:	4770      	bx	lr

080002c0 <__udivmoddi4>:
 80002c0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80002c4:	9d08      	ldr	r5, [sp, #32]
 80002c6:	4604      	mov	r4, r0
 80002c8:	468e      	mov	lr, r1
 80002ca:	2b00      	cmp	r3, #0
 80002cc:	d14d      	bne.n	800036a <__udivmoddi4+0xaa>
 80002ce:	428a      	cmp	r2, r1
 80002d0:	4694      	mov	ip, r2
 80002d2:	d969      	bls.n	80003a8 <__udivmoddi4+0xe8>
 80002d4:	fab2 f282 	clz	r2, r2
 80002d8:	b152      	cbz	r2, 80002f0 <__udivmoddi4+0x30>
 80002da:	fa01 f302 	lsl.w	r3, r1, r2
 80002de:	f1c2 0120 	rsb	r1, r2, #32
 80002e2:	fa20 f101 	lsr.w	r1, r0, r1
 80002e6:	fa0c fc02 	lsl.w	ip, ip, r2
 80002ea:	ea41 0e03 	orr.w	lr, r1, r3
 80002ee:	4094      	lsls	r4, r2
 80002f0:	ea4f 481c 	mov.w	r8, ip, lsr #16
 80002f4:	0c21      	lsrs	r1, r4, #16
 80002f6:	fbbe f6f8 	udiv	r6, lr, r8
 80002fa:	fa1f f78c 	uxth.w	r7, ip
 80002fe:	fb08 e316 	mls	r3, r8, r6, lr
 8000302:	ea41 4303 	orr.w	r3, r1, r3, lsl #16
 8000306:	fb06 f107 	mul.w	r1, r6, r7
 800030a:	4299      	cmp	r1, r3
 800030c:	d90a      	bls.n	8000324 <__udivmoddi4+0x64>
 800030e:	eb1c 0303 	adds.w	r3, ip, r3
 8000312:	f106 30ff 	add.w	r0, r6, #4294967295
 8000316:	f080 811f 	bcs.w	8000558 <__udivmoddi4+0x298>
 800031a:	4299      	cmp	r1, r3
 800031c:	f240 811c 	bls.w	8000558 <__udivmoddi4+0x298>
 8000320:	3e02      	subs	r6, #2
 8000322:	4463      	add	r3, ip
 8000324:	1a5b      	subs	r3, r3, r1
 8000326:	b2a4      	uxth	r4, r4
 8000328:	fbb3 f0f8 	udiv	r0, r3, r8
 800032c:	fb08 3310 	mls	r3, r8, r0, r3
 8000330:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000334:	fb00 f707 	mul.w	r7, r0, r7
 8000338:	42a7      	cmp	r7, r4
 800033a:	d90a      	bls.n	8000352 <__udivmoddi4+0x92>
 800033c:	eb1c 0404 	adds.w	r4, ip, r4
 8000340:	f100 33ff 	add.w	r3, r0, #4294967295
 8000344:	f080 810a 	bcs.w	800055c <__udivmoddi4+0x29c>
 8000348:	42a7      	cmp	r7, r4
 800034a:	f240 8107 	bls.w	800055c <__udivmoddi4+0x29c>
 800034e:	4464      	add	r4, ip
 8000350:	3802      	subs	r0, #2
 8000352:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 8000356:	1be4      	subs	r4, r4, r7
 8000358:	2600      	movs	r6, #0
 800035a:	b11d      	cbz	r5, 8000364 <__udivmoddi4+0xa4>
 800035c:	40d4      	lsrs	r4, r2
 800035e:	2300      	movs	r3, #0
 8000360:	e9c5 4300 	strd	r4, r3, [r5]
 8000364:	4631      	mov	r1, r6
 8000366:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800036a:	428b      	cmp	r3, r1
 800036c:	d909      	bls.n	8000382 <__udivmoddi4+0xc2>
 800036e:	2d00      	cmp	r5, #0
 8000370:	f000 80ef 	beq.w	8000552 <__udivmoddi4+0x292>
 8000374:	2600      	movs	r6, #0
 8000376:	e9c5 0100 	strd	r0, r1, [r5]
 800037a:	4630      	mov	r0, r6
 800037c:	4631      	mov	r1, r6
 800037e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000382:	fab3 f683 	clz	r6, r3
 8000386:	2e00      	cmp	r6, #0
 8000388:	d14a      	bne.n	8000420 <__udivmoddi4+0x160>
 800038a:	428b      	cmp	r3, r1
 800038c:	d302      	bcc.n	8000394 <__udivmoddi4+0xd4>
 800038e:	4282      	cmp	r2, r0
 8000390:	f200 80f9 	bhi.w	8000586 <__udivmoddi4+0x2c6>
 8000394:	1a84      	subs	r4, r0, r2
 8000396:	eb61 0303 	sbc.w	r3, r1, r3
 800039a:	2001      	movs	r0, #1
 800039c:	469e      	mov	lr, r3
 800039e:	2d00      	cmp	r5, #0
 80003a0:	d0e0      	beq.n	8000364 <__udivmoddi4+0xa4>
 80003a2:	e9c5 4e00 	strd	r4, lr, [r5]
 80003a6:	e7dd      	b.n	8000364 <__udivmoddi4+0xa4>
 80003a8:	b902      	cbnz	r2, 80003ac <__udivmoddi4+0xec>
 80003aa:	deff      	udf	#255	; 0xff
 80003ac:	fab2 f282 	clz	r2, r2
 80003b0:	2a00      	cmp	r2, #0
 80003b2:	f040 8092 	bne.w	80004da <__udivmoddi4+0x21a>
 80003b6:	eba1 010c 	sub.w	r1, r1, ip
 80003ba:	ea4f 471c 	mov.w	r7, ip, lsr #16
 80003be:	fa1f fe8c 	uxth.w	lr, ip
 80003c2:	2601      	movs	r6, #1
 80003c4:	0c20      	lsrs	r0, r4, #16
 80003c6:	fbb1 f3f7 	udiv	r3, r1, r7
 80003ca:	fb07 1113 	mls	r1, r7, r3, r1
 80003ce:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 80003d2:	fb0e f003 	mul.w	r0, lr, r3
 80003d6:	4288      	cmp	r0, r1
 80003d8:	d908      	bls.n	80003ec <__udivmoddi4+0x12c>
 80003da:	eb1c 0101 	adds.w	r1, ip, r1
 80003de:	f103 38ff 	add.w	r8, r3, #4294967295
 80003e2:	d202      	bcs.n	80003ea <__udivmoddi4+0x12a>
 80003e4:	4288      	cmp	r0, r1
 80003e6:	f200 80cb 	bhi.w	8000580 <__udivmoddi4+0x2c0>
 80003ea:	4643      	mov	r3, r8
 80003ec:	1a09      	subs	r1, r1, r0
 80003ee:	b2a4      	uxth	r4, r4
 80003f0:	fbb1 f0f7 	udiv	r0, r1, r7
 80003f4:	fb07 1110 	mls	r1, r7, r0, r1
 80003f8:	ea44 4401 	orr.w	r4, r4, r1, lsl #16
 80003fc:	fb0e fe00 	mul.w	lr, lr, r0
 8000400:	45a6      	cmp	lr, r4
 8000402:	d908      	bls.n	8000416 <__udivmoddi4+0x156>
 8000404:	eb1c 0404 	adds.w	r4, ip, r4
 8000408:	f100 31ff 	add.w	r1, r0, #4294967295
 800040c:	d202      	bcs.n	8000414 <__udivmoddi4+0x154>
 800040e:	45a6      	cmp	lr, r4
 8000410:	f200 80bb 	bhi.w	800058a <__udivmoddi4+0x2ca>
 8000414:	4608      	mov	r0, r1
 8000416:	eba4 040e 	sub.w	r4, r4, lr
 800041a:	ea40 4003 	orr.w	r0, r0, r3, lsl #16
 800041e:	e79c      	b.n	800035a <__udivmoddi4+0x9a>
 8000420:	f1c6 0720 	rsb	r7, r6, #32
 8000424:	40b3      	lsls	r3, r6
 8000426:	fa22 fc07 	lsr.w	ip, r2, r7
 800042a:	ea4c 0c03 	orr.w	ip, ip, r3
 800042e:	fa20 f407 	lsr.w	r4, r0, r7
 8000432:	fa01 f306 	lsl.w	r3, r1, r6
 8000436:	431c      	orrs	r4, r3
 8000438:	40f9      	lsrs	r1, r7
 800043a:	ea4f 491c 	mov.w	r9, ip, lsr #16
 800043e:	fa00 f306 	lsl.w	r3, r0, r6
 8000442:	fbb1 f8f9 	udiv	r8, r1, r9
 8000446:	0c20      	lsrs	r0, r4, #16
 8000448:	fa1f fe8c 	uxth.w	lr, ip
 800044c:	fb09 1118 	mls	r1, r9, r8, r1
 8000450:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 8000454:	fb08 f00e 	mul.w	r0, r8, lr
 8000458:	4288      	cmp	r0, r1
 800045a:	fa02 f206 	lsl.w	r2, r2, r6
 800045e:	d90b      	bls.n	8000478 <__udivmoddi4+0x1b8>
 8000460:	eb1c 0101 	adds.w	r1, ip, r1
 8000464:	f108 3aff 	add.w	sl, r8, #4294967295
 8000468:	f080 8088 	bcs.w	800057c <__udivmoddi4+0x2bc>
 800046c:	4288      	cmp	r0, r1
 800046e:	f240 8085 	bls.w	800057c <__udivmoddi4+0x2bc>
 8000472:	f1a8 0802 	sub.w	r8, r8, #2
 8000476:	4461      	add	r1, ip
 8000478:	1a09      	subs	r1, r1, r0
 800047a:	b2a4      	uxth	r4, r4
 800047c:	fbb1 f0f9 	udiv	r0, r1, r9
 8000480:	fb09 1110 	mls	r1, r9, r0, r1
 8000484:	ea44 4101 	orr.w	r1, r4, r1, lsl #16
 8000488:	fb00 fe0e 	mul.w	lr, r0, lr
 800048c:	458e      	cmp	lr, r1
 800048e:	d908      	bls.n	80004a2 <__udivmoddi4+0x1e2>
 8000490:	eb1c 0101 	adds.w	r1, ip, r1
 8000494:	f100 34ff 	add.w	r4, r0, #4294967295
 8000498:	d26c      	bcs.n	8000574 <__udivmoddi4+0x2b4>
 800049a:	458e      	cmp	lr, r1
 800049c:	d96a      	bls.n	8000574 <__udivmoddi4+0x2b4>
 800049e:	3802      	subs	r0, #2
 80004a0:	4461      	add	r1, ip
 80004a2:	ea40 4008 	orr.w	r0, r0, r8, lsl #16
 80004a6:	fba0 9402 	umull	r9, r4, r0, r2
 80004aa:	eba1 010e 	sub.w	r1, r1, lr
 80004ae:	42a1      	cmp	r1, r4
 80004b0:	46c8      	mov	r8, r9
 80004b2:	46a6      	mov	lr, r4
 80004b4:	d356      	bcc.n	8000564 <__udivmoddi4+0x2a4>
 80004b6:	d053      	beq.n	8000560 <__udivmoddi4+0x2a0>
 80004b8:	b15d      	cbz	r5, 80004d2 <__udivmoddi4+0x212>
 80004ba:	ebb3 0208 	subs.w	r2, r3, r8
 80004be:	eb61 010e 	sbc.w	r1, r1, lr
 80004c2:	fa01 f707 	lsl.w	r7, r1, r7
 80004c6:	fa22 f306 	lsr.w	r3, r2, r6
 80004ca:	40f1      	lsrs	r1, r6
 80004cc:	431f      	orrs	r7, r3
 80004ce:	e9c5 7100 	strd	r7, r1, [r5]
 80004d2:	2600      	movs	r6, #0
 80004d4:	4631      	mov	r1, r6
 80004d6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80004da:	f1c2 0320 	rsb	r3, r2, #32
 80004de:	40d8      	lsrs	r0, r3
 80004e0:	fa0c fc02 	lsl.w	ip, ip, r2
 80004e4:	fa21 f303 	lsr.w	r3, r1, r3
 80004e8:	4091      	lsls	r1, r2
 80004ea:	4301      	orrs	r1, r0
 80004ec:	ea4f 471c 	mov.w	r7, ip, lsr #16
 80004f0:	fa1f fe8c 	uxth.w	lr, ip
 80004f4:	fbb3 f0f7 	udiv	r0, r3, r7
 80004f8:	fb07 3610 	mls	r6, r7, r0, r3
 80004fc:	0c0b      	lsrs	r3, r1, #16
 80004fe:	ea43 4306 	orr.w	r3, r3, r6, lsl #16
 8000502:	fb00 f60e 	mul.w	r6, r0, lr
 8000506:	429e      	cmp	r6, r3
 8000508:	fa04 f402 	lsl.w	r4, r4, r2
 800050c:	d908      	bls.n	8000520 <__udivmoddi4+0x260>
 800050e:	eb1c 0303 	adds.w	r3, ip, r3
 8000512:	f100 38ff 	add.w	r8, r0, #4294967295
 8000516:	d22f      	bcs.n	8000578 <__udivmoddi4+0x2b8>
 8000518:	429e      	cmp	r6, r3
 800051a:	d92d      	bls.n	8000578 <__udivmoddi4+0x2b8>
 800051c:	3802      	subs	r0, #2
 800051e:	4463      	add	r3, ip
 8000520:	1b9b      	subs	r3, r3, r6
 8000522:	b289      	uxth	r1, r1
 8000524:	fbb3 f6f7 	udiv	r6, r3, r7
 8000528:	fb07 3316 	mls	r3, r7, r6, r3
 800052c:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000530:	fb06 f30e 	mul.w	r3, r6, lr
 8000534:	428b      	cmp	r3, r1
 8000536:	d908      	bls.n	800054a <__udivmoddi4+0x28a>
 8000538:	eb1c 0101 	adds.w	r1, ip, r1
 800053c:	f106 38ff 	add.w	r8, r6, #4294967295
 8000540:	d216      	bcs.n	8000570 <__udivmoddi4+0x2b0>
 8000542:	428b      	cmp	r3, r1
 8000544:	d914      	bls.n	8000570 <__udivmoddi4+0x2b0>
 8000546:	3e02      	subs	r6, #2
 8000548:	4461      	add	r1, ip
 800054a:	1ac9      	subs	r1, r1, r3
 800054c:	ea46 4600 	orr.w	r6, r6, r0, lsl #16
 8000550:	e738      	b.n	80003c4 <__udivmoddi4+0x104>
 8000552:	462e      	mov	r6, r5
 8000554:	4628      	mov	r0, r5
 8000556:	e705      	b.n	8000364 <__udivmoddi4+0xa4>
 8000558:	4606      	mov	r6, r0
 800055a:	e6e3      	b.n	8000324 <__udivmoddi4+0x64>
 800055c:	4618      	mov	r0, r3
 800055e:	e6f8      	b.n	8000352 <__udivmoddi4+0x92>
 8000560:	454b      	cmp	r3, r9
 8000562:	d2a9      	bcs.n	80004b8 <__udivmoddi4+0x1f8>
 8000564:	ebb9 0802 	subs.w	r8, r9, r2
 8000568:	eb64 0e0c 	sbc.w	lr, r4, ip
 800056c:	3801      	subs	r0, #1
 800056e:	e7a3      	b.n	80004b8 <__udivmoddi4+0x1f8>
 8000570:	4646      	mov	r6, r8
 8000572:	e7ea      	b.n	800054a <__udivmoddi4+0x28a>
 8000574:	4620      	mov	r0, r4
 8000576:	e794      	b.n	80004a2 <__udivmoddi4+0x1e2>
 8000578:	4640      	mov	r0, r8
 800057a:	e7d1      	b.n	8000520 <__udivmoddi4+0x260>
 800057c:	46d0      	mov	r8, sl
 800057e:	e77b      	b.n	8000478 <__udivmoddi4+0x1b8>
 8000580:	3b02      	subs	r3, #2
 8000582:	4461      	add	r1, ip
 8000584:	e732      	b.n	80003ec <__udivmoddi4+0x12c>
 8000586:	4630      	mov	r0, r6
 8000588:	e709      	b.n	800039e <__udivmoddi4+0xde>
 800058a:	4464      	add	r4, ip
 800058c:	3802      	subs	r0, #2
 800058e:	e742      	b.n	8000416 <__udivmoddi4+0x156>

08000590 <__aeabi_idiv0>:
 8000590:	4770      	bx	lr
 8000592:	bf00      	nop

08000594 <vApplicationIdleHook>:
void vApplicationStackOverflowHook(xTaskHandle xTask, signed char *pcTaskName);
void vApplicationMallocFailedHook(void);

/* USER CODE BEGIN 2 */
void vApplicationIdleHook( void )
{
 8000594:	b480      	push	{r7}
 8000596:	af00      	add	r7, sp, #0
   specified, or call vTaskDelay()). If the application makes use of the
   vTaskDelete() API function (as this demo application does) then it is also
   important that vApplicationIdleHook() is permitted to return to its calling
   function, because it is the responsibility of the idle task to clean up
   memory allocated by the kernel to any task that has since been deleted. */
}
 8000598:	bf00      	nop
 800059a:	46bd      	mov	sp, r7
 800059c:	f85d 7b04 	ldr.w	r7, [sp], #4
 80005a0:	4770      	bx	lr

080005a2 <vApplicationStackOverflowHook>:
/* USER CODE END 2 */

/* USER CODE BEGIN 4 */
void vApplicationStackOverflowHook(xTaskHandle xTask, signed char *pcTaskName)
{
 80005a2:	b480      	push	{r7}
 80005a4:	b083      	sub	sp, #12
 80005a6:	af00      	add	r7, sp, #0
 80005a8:	6078      	str	r0, [r7, #4]
 80005aa:	6039      	str	r1, [r7, #0]
   /* Run time stack overflow checking is performed if
   configCHECK_FOR_STACK_OVERFLOW is defined to 1 or 2. This hook function is
   called if a stack overflow is detected. */
}
 80005ac:	bf00      	nop
 80005ae:	370c      	adds	r7, #12
 80005b0:	46bd      	mov	sp, r7
 80005b2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80005b6:	4770      	bx	lr

080005b8 <vApplicationMallocFailedHook>:
/* USER CODE END 4 */

/* USER CODE BEGIN 5 */
void vApplicationMallocFailedHook(void)
{
 80005b8:	b480      	push	{r7}
 80005ba:	af00      	add	r7, sp, #0
   demo application. If heap_1.c or heap_2.c are used, then the size of the
   heap available to pvPortMalloc() is defined by configTOTAL_HEAP_SIZE in
   FreeRTOSConfig.h, and the xPortGetFreeHeapSize() API function can be used
   to query the size of free heap space that remains (although it does not
   provide information on how the remaining heap might be fragmented). */
}
 80005bc:	bf00      	nop
 80005be:	46bd      	mov	sp, r7
 80005c0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80005c4:	4770      	bx	lr
	...

080005c8 <_write>:
#define PUTCHAR_PROTOTYPE int __io_putchar(int ch)
/* USER CODE END PFP */

/* Private user code ---------------------------------------------------------*/
/* USER CODE BEGIN 0 */
int _write(int file, char *ptr, int len) {
 80005c8:	b580      	push	{r7, lr}
 80005ca:	b084      	sub	sp, #16
 80005cc:	af00      	add	r7, sp, #0
 80005ce:	60f8      	str	r0, [r7, #12]
 80005d0:	60b9      	str	r1, [r7, #8]
 80005d2:	607a      	str	r2, [r7, #4]
  HAL_UART_Transmit(&huart1, (uint8_t*) ptr, len, HAL_MAX_DELAY);
 80005d4:	687b      	ldr	r3, [r7, #4]
 80005d6:	b29a      	uxth	r2, r3
 80005d8:	f04f 33ff 	mov.w	r3, #4294967295
 80005dc:	68b9      	ldr	r1, [r7, #8]
 80005de:	4804      	ldr	r0, [pc, #16]	; (80005f0 <_write+0x28>)
 80005e0:	f005 f9af 	bl	8005942 <HAL_UART_Transmit>
  return len;
 80005e4:	687b      	ldr	r3, [r7, #4]
}
 80005e6:	4618      	mov	r0, r3
 80005e8:	3710      	adds	r7, #16
 80005ea:	46bd      	mov	sp, r7
 80005ec:	bd80      	pop	{r7, pc}
 80005ee:	bf00      	nop
 80005f0:	20000274 	.word	0x20000274

080005f4 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 80005f4:	b580      	push	{r7, lr}
 80005f6:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 80005f8:	f001 fa4a 	bl	8001a90 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 80005fc:	f000 f81a 	bl	8000634 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000600:	f000 fa88 	bl	8000b14 <MX_GPIO_Init>
  MX_CRC_Init();
 8000604:	f000 f880 	bl	8000708 <MX_CRC_Init>
  MX_DMA2D_Init();
 8000608:	f000 f892 	bl	8000730 <MX_DMA2D_Init>
  MX_FMC_Init();
 800060c:	f000 fa32 	bl	8000a74 <MX_FMC_Init>
  MX_I2C3_Init();
 8000610:	f000 f8c0 	bl	8000794 <MX_I2C3_Init>
  MX_LTDC_Init();
 8000614:	f000 f8fe 	bl	8000814 <MX_LTDC_Init>
  MX_SPI5_Init();
 8000618:	f000 f97c 	bl	8000914 <MX_SPI5_Init>
  MX_TIM1_Init();
 800061c:	f000 f9b0 	bl	8000980 <MX_TIM1_Init>
  MX_USART1_UART_Init();
 8000620:	f000 f9fe 	bl	8000a20 <MX_USART1_UART_Init>


  /* USER CODE END 2 */

  /* Init scheduler */
  osKernelInitialize();
 8000624:	f006 f9c0 	bl	80069a8 <osKernelInitialize>
* in the root directory of this software component.
* If no LICENSE file comes with this software, it is provided AS-IS.
*
******************************************************************************
*/
  tm_main();
 8000628:	f001 f84e 	bl	80016c8 <tm_main>
/**
* @}
*/

  /* Start scheduler */
  osKernelStart();
 800062c:	f006 f9e0 	bl	80069f0 <osKernelStart>

  /* We should never get here as control is now taken by the scheduler */
  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
 8000630:	e7fe      	b.n	8000630 <main+0x3c>
	...

08000634 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000634:	b580      	push	{r7, lr}
 8000636:	b094      	sub	sp, #80	; 0x50
 8000638:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 800063a:	f107 0320 	add.w	r3, r7, #32
 800063e:	2230      	movs	r2, #48	; 0x30
 8000640:	2100      	movs	r1, #0
 8000642:	4618      	mov	r0, r3
 8000644:	f009 f936 	bl	80098b4 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000648:	f107 030c 	add.w	r3, r7, #12
 800064c:	2200      	movs	r2, #0
 800064e:	601a      	str	r2, [r3, #0]
 8000650:	605a      	str	r2, [r3, #4]
 8000652:	609a      	str	r2, [r3, #8]
 8000654:	60da      	str	r2, [r3, #12]
 8000656:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 8000658:	2300      	movs	r3, #0
 800065a:	60bb      	str	r3, [r7, #8]
 800065c:	4b28      	ldr	r3, [pc, #160]	; (8000700 <SystemClock_Config+0xcc>)
 800065e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000660:	4a27      	ldr	r2, [pc, #156]	; (8000700 <SystemClock_Config+0xcc>)
 8000662:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8000666:	6413      	str	r3, [r2, #64]	; 0x40
 8000668:	4b25      	ldr	r3, [pc, #148]	; (8000700 <SystemClock_Config+0xcc>)
 800066a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800066c:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000670:	60bb      	str	r3, [r7, #8]
 8000672:	68bb      	ldr	r3, [r7, #8]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE3);
 8000674:	2300      	movs	r3, #0
 8000676:	607b      	str	r3, [r7, #4]
 8000678:	4b22      	ldr	r3, [pc, #136]	; (8000704 <SystemClock_Config+0xd0>)
 800067a:	681b      	ldr	r3, [r3, #0]
 800067c:	f423 4340 	bic.w	r3, r3, #49152	; 0xc000
 8000680:	4a20      	ldr	r2, [pc, #128]	; (8000704 <SystemClock_Config+0xd0>)
 8000682:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8000686:	6013      	str	r3, [r2, #0]
 8000688:	4b1e      	ldr	r3, [pc, #120]	; (8000704 <SystemClock_Config+0xd0>)
 800068a:	681b      	ldr	r3, [r3, #0]
 800068c:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 8000690:	607b      	str	r3, [r7, #4]
 8000692:	687b      	ldr	r3, [r7, #4]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 8000694:	2301      	movs	r3, #1
 8000696:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 8000698:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 800069c:	627b      	str	r3, [r7, #36]	; 0x24
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 800069e:	2302      	movs	r3, #2
 80006a0:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 80006a2:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 80006a6:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLM = 4;
 80006a8:	2304      	movs	r3, #4
 80006aa:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLN = 72;
 80006ac:	2348      	movs	r3, #72	; 0x48
 80006ae:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 80006b0:	2302      	movs	r3, #2
 80006b2:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLQ = 3;
 80006b4:	2303      	movs	r3, #3
 80006b6:	64fb      	str	r3, [r7, #76]	; 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80006b8:	f107 0320 	add.w	r3, r7, #32
 80006bc:	4618      	mov	r0, r3
 80006be:	f003 fd2b 	bl	8004118 <HAL_RCC_OscConfig>
 80006c2:	4603      	mov	r3, r0
 80006c4:	2b00      	cmp	r3, #0
 80006c6:	d001      	beq.n	80006cc <SystemClock_Config+0x98>
  {
    Error_Handler();
 80006c8:	f000 fb46 	bl	8000d58 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 80006cc:	230f      	movs	r3, #15
 80006ce:	60fb      	str	r3, [r7, #12]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 80006d0:	2302      	movs	r3, #2
 80006d2:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 80006d4:	2300      	movs	r3, #0
 80006d6:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 80006d8:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80006dc:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 80006de:	2300      	movs	r3, #0
 80006e0:	61fb      	str	r3, [r7, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 80006e2:	f107 030c 	add.w	r3, r7, #12
 80006e6:	2102      	movs	r1, #2
 80006e8:	4618      	mov	r0, r3
 80006ea:	f003 ff8d 	bl	8004608 <HAL_RCC_ClockConfig>
 80006ee:	4603      	mov	r3, r0
 80006f0:	2b00      	cmp	r3, #0
 80006f2:	d001      	beq.n	80006f8 <SystemClock_Config+0xc4>
  {
    Error_Handler();
 80006f4:	f000 fb30 	bl	8000d58 <Error_Handler>
  }
}
 80006f8:	bf00      	nop
 80006fa:	3750      	adds	r7, #80	; 0x50
 80006fc:	46bd      	mov	sp, r7
 80006fe:	bd80      	pop	{r7, pc}
 8000700:	40023800 	.word	0x40023800
 8000704:	40007000 	.word	0x40007000

08000708 <MX_CRC_Init>:
  * @brief CRC Initialization Function
  * @param None
  * @retval None
  */
static void MX_CRC_Init(void)
{
 8000708:	b580      	push	{r7, lr}
 800070a:	af00      	add	r7, sp, #0
  /* USER CODE END CRC_Init 0 */

  /* USER CODE BEGIN CRC_Init 1 */

  /* USER CODE END CRC_Init 1 */
  hcrc.Instance = CRC;
 800070c:	4b06      	ldr	r3, [pc, #24]	; (8000728 <MX_CRC_Init+0x20>)
 800070e:	4a07      	ldr	r2, [pc, #28]	; (800072c <MX_CRC_Init+0x24>)
 8000710:	601a      	str	r2, [r3, #0]
  if (HAL_CRC_Init(&hcrc) != HAL_OK)
 8000712:	4805      	ldr	r0, [pc, #20]	; (8000728 <MX_CRC_Init+0x20>)
 8000714:	f001 fae0 	bl	8001cd8 <HAL_CRC_Init>
 8000718:	4603      	mov	r3, r0
 800071a:	2b00      	cmp	r3, #0
 800071c:	d001      	beq.n	8000722 <MX_CRC_Init+0x1a>
  {
    Error_Handler();
 800071e:	f000 fb1b 	bl	8000d58 <Error_Handler>
  }
  /* USER CODE BEGIN CRC_Init 2 */

  /* USER CODE END CRC_Init 2 */

}
 8000722:	bf00      	nop
 8000724:	bd80      	pop	{r7, pc}
 8000726:	bf00      	nop
 8000728:	20000090 	.word	0x20000090
 800072c:	40023000 	.word	0x40023000

08000730 <MX_DMA2D_Init>:
  * @brief DMA2D Initialization Function
  * @param None
  * @retval None
  */
static void MX_DMA2D_Init(void)
{
 8000730:	b580      	push	{r7, lr}
 8000732:	af00      	add	r7, sp, #0
  /* USER CODE END DMA2D_Init 0 */

  /* USER CODE BEGIN DMA2D_Init 1 */

  /* USER CODE END DMA2D_Init 1 */
  hdma2d.Instance = DMA2D;
 8000734:	4b15      	ldr	r3, [pc, #84]	; (800078c <MX_DMA2D_Init+0x5c>)
 8000736:	4a16      	ldr	r2, [pc, #88]	; (8000790 <MX_DMA2D_Init+0x60>)
 8000738:	601a      	str	r2, [r3, #0]
  hdma2d.Init.Mode = DMA2D_M2M;
 800073a:	4b14      	ldr	r3, [pc, #80]	; (800078c <MX_DMA2D_Init+0x5c>)
 800073c:	2200      	movs	r2, #0
 800073e:	605a      	str	r2, [r3, #4]
  hdma2d.Init.ColorMode = DMA2D_OUTPUT_ARGB8888;
 8000740:	4b12      	ldr	r3, [pc, #72]	; (800078c <MX_DMA2D_Init+0x5c>)
 8000742:	2200      	movs	r2, #0
 8000744:	609a      	str	r2, [r3, #8]
  hdma2d.Init.OutputOffset = 0;
 8000746:	4b11      	ldr	r3, [pc, #68]	; (800078c <MX_DMA2D_Init+0x5c>)
 8000748:	2200      	movs	r2, #0
 800074a:	60da      	str	r2, [r3, #12]
  hdma2d.LayerCfg[1].InputOffset = 0;
 800074c:	4b0f      	ldr	r3, [pc, #60]	; (800078c <MX_DMA2D_Init+0x5c>)
 800074e:	2200      	movs	r2, #0
 8000750:	629a      	str	r2, [r3, #40]	; 0x28
  hdma2d.LayerCfg[1].InputColorMode = DMA2D_INPUT_ARGB8888;
 8000752:	4b0e      	ldr	r3, [pc, #56]	; (800078c <MX_DMA2D_Init+0x5c>)
 8000754:	2200      	movs	r2, #0
 8000756:	62da      	str	r2, [r3, #44]	; 0x2c
  hdma2d.LayerCfg[1].AlphaMode = DMA2D_NO_MODIF_ALPHA;
 8000758:	4b0c      	ldr	r3, [pc, #48]	; (800078c <MX_DMA2D_Init+0x5c>)
 800075a:	2200      	movs	r2, #0
 800075c:	631a      	str	r2, [r3, #48]	; 0x30
  hdma2d.LayerCfg[1].InputAlpha = 0;
 800075e:	4b0b      	ldr	r3, [pc, #44]	; (800078c <MX_DMA2D_Init+0x5c>)
 8000760:	2200      	movs	r2, #0
 8000762:	635a      	str	r2, [r3, #52]	; 0x34
  if (HAL_DMA2D_Init(&hdma2d) != HAL_OK)
 8000764:	4809      	ldr	r0, [pc, #36]	; (800078c <MX_DMA2D_Init+0x5c>)
 8000766:	f001 fad3 	bl	8001d10 <HAL_DMA2D_Init>
 800076a:	4603      	mov	r3, r0
 800076c:	2b00      	cmp	r3, #0
 800076e:	d001      	beq.n	8000774 <MX_DMA2D_Init+0x44>
  {
    Error_Handler();
 8000770:	f000 faf2 	bl	8000d58 <Error_Handler>
  }
  if (HAL_DMA2D_ConfigLayer(&hdma2d, 1) != HAL_OK)
 8000774:	2101      	movs	r1, #1
 8000776:	4805      	ldr	r0, [pc, #20]	; (800078c <MX_DMA2D_Init+0x5c>)
 8000778:	f001 fc24 	bl	8001fc4 <HAL_DMA2D_ConfigLayer>
 800077c:	4603      	mov	r3, r0
 800077e:	2b00      	cmp	r3, #0
 8000780:	d001      	beq.n	8000786 <MX_DMA2D_Init+0x56>
  {
    Error_Handler();
 8000782:	f000 fae9 	bl	8000d58 <Error_Handler>
  }
  /* USER CODE BEGIN DMA2D_Init 2 */

  /* USER CODE END DMA2D_Init 2 */

}
 8000786:	bf00      	nop
 8000788:	bd80      	pop	{r7, pc}
 800078a:	bf00      	nop
 800078c:	20000098 	.word	0x20000098
 8000790:	4002b000 	.word	0x4002b000

08000794 <MX_I2C3_Init>:
  * @brief I2C3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C3_Init(void)
{
 8000794:	b580      	push	{r7, lr}
 8000796:	af00      	add	r7, sp, #0
  /* USER CODE END I2C3_Init 0 */

  /* USER CODE BEGIN I2C3_Init 1 */

  /* USER CODE END I2C3_Init 1 */
  hi2c3.Instance = I2C3;
 8000798:	4b1b      	ldr	r3, [pc, #108]	; (8000808 <MX_I2C3_Init+0x74>)
 800079a:	4a1c      	ldr	r2, [pc, #112]	; (800080c <MX_I2C3_Init+0x78>)
 800079c:	601a      	str	r2, [r3, #0]
  hi2c3.Init.ClockSpeed = 100000;
 800079e:	4b1a      	ldr	r3, [pc, #104]	; (8000808 <MX_I2C3_Init+0x74>)
 80007a0:	4a1b      	ldr	r2, [pc, #108]	; (8000810 <MX_I2C3_Init+0x7c>)
 80007a2:	605a      	str	r2, [r3, #4]
  hi2c3.Init.DutyCycle = I2C_DUTYCYCLE_2;
 80007a4:	4b18      	ldr	r3, [pc, #96]	; (8000808 <MX_I2C3_Init+0x74>)
 80007a6:	2200      	movs	r2, #0
 80007a8:	609a      	str	r2, [r3, #8]
  hi2c3.Init.OwnAddress1 = 0;
 80007aa:	4b17      	ldr	r3, [pc, #92]	; (8000808 <MX_I2C3_Init+0x74>)
 80007ac:	2200      	movs	r2, #0
 80007ae:	60da      	str	r2, [r3, #12]
  hi2c3.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 80007b0:	4b15      	ldr	r3, [pc, #84]	; (8000808 <MX_I2C3_Init+0x74>)
 80007b2:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 80007b6:	611a      	str	r2, [r3, #16]
  hi2c3.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 80007b8:	4b13      	ldr	r3, [pc, #76]	; (8000808 <MX_I2C3_Init+0x74>)
 80007ba:	2200      	movs	r2, #0
 80007bc:	615a      	str	r2, [r3, #20]
  hi2c3.Init.OwnAddress2 = 0;
 80007be:	4b12      	ldr	r3, [pc, #72]	; (8000808 <MX_I2C3_Init+0x74>)
 80007c0:	2200      	movs	r2, #0
 80007c2:	619a      	str	r2, [r3, #24]
  hi2c3.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 80007c4:	4b10      	ldr	r3, [pc, #64]	; (8000808 <MX_I2C3_Init+0x74>)
 80007c6:	2200      	movs	r2, #0
 80007c8:	61da      	str	r2, [r3, #28]
  hi2c3.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 80007ca:	4b0f      	ldr	r3, [pc, #60]	; (8000808 <MX_I2C3_Init+0x74>)
 80007cc:	2200      	movs	r2, #0
 80007ce:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c3) != HAL_OK)
 80007d0:	480d      	ldr	r0, [pc, #52]	; (8000808 <MX_I2C3_Init+0x74>)
 80007d2:	f002 ff79 	bl	80036c8 <HAL_I2C_Init>
 80007d6:	4603      	mov	r3, r0
 80007d8:	2b00      	cmp	r3, #0
 80007da:	d001      	beq.n	80007e0 <MX_I2C3_Init+0x4c>
  {
    Error_Handler();
 80007dc:	f000 fabc 	bl	8000d58 <Error_Handler>
  }

  /** Configure Analogue filter
  */
  if (HAL_I2CEx_ConfigAnalogFilter(&hi2c3, I2C_ANALOGFILTER_ENABLE) != HAL_OK)
 80007e0:	2100      	movs	r1, #0
 80007e2:	4809      	ldr	r0, [pc, #36]	; (8000808 <MX_I2C3_Init+0x74>)
 80007e4:	f003 f8b4 	bl	8003950 <HAL_I2CEx_ConfigAnalogFilter>
 80007e8:	4603      	mov	r3, r0
 80007ea:	2b00      	cmp	r3, #0
 80007ec:	d001      	beq.n	80007f2 <MX_I2C3_Init+0x5e>
  {
    Error_Handler();
 80007ee:	f000 fab3 	bl	8000d58 <Error_Handler>
  }

  /** Configure Digital filter
  */
  if (HAL_I2CEx_ConfigDigitalFilter(&hi2c3, 0) != HAL_OK)
 80007f2:	2100      	movs	r1, #0
 80007f4:	4804      	ldr	r0, [pc, #16]	; (8000808 <MX_I2C3_Init+0x74>)
 80007f6:	f003 f8e7 	bl	80039c8 <HAL_I2CEx_ConfigDigitalFilter>
 80007fa:	4603      	mov	r3, r0
 80007fc:	2b00      	cmp	r3, #0
 80007fe:	d001      	beq.n	8000804 <MX_I2C3_Init+0x70>
  {
    Error_Handler();
 8000800:	f000 faaa 	bl	8000d58 <Error_Handler>
  }
  /* USER CODE BEGIN I2C3_Init 2 */

  /* USER CODE END I2C3_Init 2 */

}
 8000804:	bf00      	nop
 8000806:	bd80      	pop	{r7, pc}
 8000808:	200000d8 	.word	0x200000d8
 800080c:	40005c00 	.word	0x40005c00
 8000810:	000186a0 	.word	0x000186a0

08000814 <MX_LTDC_Init>:
  * @brief LTDC Initialization Function
  * @param None
  * @retval None
  */
static void MX_LTDC_Init(void)
{
 8000814:	b580      	push	{r7, lr}
 8000816:	b08e      	sub	sp, #56	; 0x38
 8000818:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN LTDC_Init 0 */

  /* USER CODE END LTDC_Init 0 */

  LTDC_LayerCfgTypeDef pLayerCfg = {0};
 800081a:	1d3b      	adds	r3, r7, #4
 800081c:	2234      	movs	r2, #52	; 0x34
 800081e:	2100      	movs	r1, #0
 8000820:	4618      	mov	r0, r3
 8000822:	f009 f847 	bl	80098b4 <memset>

  /* USER CODE BEGIN LTDC_Init 1 */

  /* USER CODE END LTDC_Init 1 */
  hltdc.Instance = LTDC;
 8000826:	4b39      	ldr	r3, [pc, #228]	; (800090c <MX_LTDC_Init+0xf8>)
 8000828:	4a39      	ldr	r2, [pc, #228]	; (8000910 <MX_LTDC_Init+0xfc>)
 800082a:	601a      	str	r2, [r3, #0]
  hltdc.Init.HSPolarity = LTDC_HSPOLARITY_AL;
 800082c:	4b37      	ldr	r3, [pc, #220]	; (800090c <MX_LTDC_Init+0xf8>)
 800082e:	2200      	movs	r2, #0
 8000830:	605a      	str	r2, [r3, #4]
  hltdc.Init.VSPolarity = LTDC_VSPOLARITY_AL;
 8000832:	4b36      	ldr	r3, [pc, #216]	; (800090c <MX_LTDC_Init+0xf8>)
 8000834:	2200      	movs	r2, #0
 8000836:	609a      	str	r2, [r3, #8]
  hltdc.Init.DEPolarity = LTDC_DEPOLARITY_AL;
 8000838:	4b34      	ldr	r3, [pc, #208]	; (800090c <MX_LTDC_Init+0xf8>)
 800083a:	2200      	movs	r2, #0
 800083c:	60da      	str	r2, [r3, #12]
  hltdc.Init.PCPolarity = LTDC_PCPOLARITY_IPC;
 800083e:	4b33      	ldr	r3, [pc, #204]	; (800090c <MX_LTDC_Init+0xf8>)
 8000840:	2200      	movs	r2, #0
 8000842:	611a      	str	r2, [r3, #16]
  hltdc.Init.HorizontalSync = 9;
 8000844:	4b31      	ldr	r3, [pc, #196]	; (800090c <MX_LTDC_Init+0xf8>)
 8000846:	2209      	movs	r2, #9
 8000848:	615a      	str	r2, [r3, #20]
  hltdc.Init.VerticalSync = 1;
 800084a:	4b30      	ldr	r3, [pc, #192]	; (800090c <MX_LTDC_Init+0xf8>)
 800084c:	2201      	movs	r2, #1
 800084e:	619a      	str	r2, [r3, #24]
  hltdc.Init.AccumulatedHBP = 29;
 8000850:	4b2e      	ldr	r3, [pc, #184]	; (800090c <MX_LTDC_Init+0xf8>)
 8000852:	221d      	movs	r2, #29
 8000854:	61da      	str	r2, [r3, #28]
  hltdc.Init.AccumulatedVBP = 3;
 8000856:	4b2d      	ldr	r3, [pc, #180]	; (800090c <MX_LTDC_Init+0xf8>)
 8000858:	2203      	movs	r2, #3
 800085a:	621a      	str	r2, [r3, #32]
  hltdc.Init.AccumulatedActiveW = 269;
 800085c:	4b2b      	ldr	r3, [pc, #172]	; (800090c <MX_LTDC_Init+0xf8>)
 800085e:	f240 120d 	movw	r2, #269	; 0x10d
 8000862:	625a      	str	r2, [r3, #36]	; 0x24
  hltdc.Init.AccumulatedActiveH = 323;
 8000864:	4b29      	ldr	r3, [pc, #164]	; (800090c <MX_LTDC_Init+0xf8>)
 8000866:	f240 1243 	movw	r2, #323	; 0x143
 800086a:	629a      	str	r2, [r3, #40]	; 0x28
  hltdc.Init.TotalWidth = 279;
 800086c:	4b27      	ldr	r3, [pc, #156]	; (800090c <MX_LTDC_Init+0xf8>)
 800086e:	f240 1217 	movw	r2, #279	; 0x117
 8000872:	62da      	str	r2, [r3, #44]	; 0x2c
  hltdc.Init.TotalHeigh = 327;
 8000874:	4b25      	ldr	r3, [pc, #148]	; (800090c <MX_LTDC_Init+0xf8>)
 8000876:	f240 1247 	movw	r2, #327	; 0x147
 800087a:	631a      	str	r2, [r3, #48]	; 0x30
  hltdc.Init.Backcolor.Blue = 0;
 800087c:	4b23      	ldr	r3, [pc, #140]	; (800090c <MX_LTDC_Init+0xf8>)
 800087e:	2200      	movs	r2, #0
 8000880:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  hltdc.Init.Backcolor.Green = 0;
 8000884:	4b21      	ldr	r3, [pc, #132]	; (800090c <MX_LTDC_Init+0xf8>)
 8000886:	2200      	movs	r2, #0
 8000888:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
  hltdc.Init.Backcolor.Red = 0;
 800088c:	4b1f      	ldr	r3, [pc, #124]	; (800090c <MX_LTDC_Init+0xf8>)
 800088e:	2200      	movs	r2, #0
 8000890:	f883 2036 	strb.w	r2, [r3, #54]	; 0x36
  if (HAL_LTDC_Init(&hltdc) != HAL_OK)
 8000894:	481d      	ldr	r0, [pc, #116]	; (800090c <MX_LTDC_Init+0xf8>)
 8000896:	f003 f8d7 	bl	8003a48 <HAL_LTDC_Init>
 800089a:	4603      	mov	r3, r0
 800089c:	2b00      	cmp	r3, #0
 800089e:	d001      	beq.n	80008a4 <MX_LTDC_Init+0x90>
  {
    Error_Handler();
 80008a0:	f000 fa5a 	bl	8000d58 <Error_Handler>
  }
  pLayerCfg.WindowX0 = 0;
 80008a4:	2300      	movs	r3, #0
 80008a6:	607b      	str	r3, [r7, #4]
  pLayerCfg.WindowX1 = 240;
 80008a8:	23f0      	movs	r3, #240	; 0xf0
 80008aa:	60bb      	str	r3, [r7, #8]
  pLayerCfg.WindowY0 = 0;
 80008ac:	2300      	movs	r3, #0
 80008ae:	60fb      	str	r3, [r7, #12]
  pLayerCfg.WindowY1 = 320;
 80008b0:	f44f 73a0 	mov.w	r3, #320	; 0x140
 80008b4:	613b      	str	r3, [r7, #16]
  pLayerCfg.PixelFormat = LTDC_PIXEL_FORMAT_RGB565;
 80008b6:	2302      	movs	r3, #2
 80008b8:	617b      	str	r3, [r7, #20]
  pLayerCfg.Alpha = 255;
 80008ba:	23ff      	movs	r3, #255	; 0xff
 80008bc:	61bb      	str	r3, [r7, #24]
  pLayerCfg.Alpha0 = 0;
 80008be:	2300      	movs	r3, #0
 80008c0:	61fb      	str	r3, [r7, #28]
  pLayerCfg.BlendingFactor1 = LTDC_BLENDING_FACTOR1_PAxCA;
 80008c2:	f44f 63c0 	mov.w	r3, #1536	; 0x600
 80008c6:	623b      	str	r3, [r7, #32]
  pLayerCfg.BlendingFactor2 = LTDC_BLENDING_FACTOR2_PAxCA;
 80008c8:	2307      	movs	r3, #7
 80008ca:	627b      	str	r3, [r7, #36]	; 0x24
  pLayerCfg.FBStartAdress = 0xD0000000;
 80008cc:	f04f 4350 	mov.w	r3, #3489660928	; 0xd0000000
 80008d0:	62bb      	str	r3, [r7, #40]	; 0x28
  pLayerCfg.ImageWidth = 240;
 80008d2:	23f0      	movs	r3, #240	; 0xf0
 80008d4:	62fb      	str	r3, [r7, #44]	; 0x2c
  pLayerCfg.ImageHeight = 320;
 80008d6:	f44f 73a0 	mov.w	r3, #320	; 0x140
 80008da:	633b      	str	r3, [r7, #48]	; 0x30
  pLayerCfg.Backcolor.Blue = 0;
 80008dc:	2300      	movs	r3, #0
 80008de:	f887 3034 	strb.w	r3, [r7, #52]	; 0x34
  pLayerCfg.Backcolor.Green = 0;
 80008e2:	2300      	movs	r3, #0
 80008e4:	f887 3035 	strb.w	r3, [r7, #53]	; 0x35
  pLayerCfg.Backcolor.Red = 0;
 80008e8:	2300      	movs	r3, #0
 80008ea:	f887 3036 	strb.w	r3, [r7, #54]	; 0x36
  if (HAL_LTDC_ConfigLayer(&hltdc, &pLayerCfg, 0) != HAL_OK)
 80008ee:	1d3b      	adds	r3, r7, #4
 80008f0:	2200      	movs	r2, #0
 80008f2:	4619      	mov	r1, r3
 80008f4:	4805      	ldr	r0, [pc, #20]	; (800090c <MX_LTDC_Init+0xf8>)
 80008f6:	f003 fa39 	bl	8003d6c <HAL_LTDC_ConfigLayer>
 80008fa:	4603      	mov	r3, r0
 80008fc:	2b00      	cmp	r3, #0
 80008fe:	d001      	beq.n	8000904 <MX_LTDC_Init+0xf0>
  {
    Error_Handler();
 8000900:	f000 fa2a 	bl	8000d58 <Error_Handler>
  }
  /* USER CODE BEGIN LTDC_Init 2 */

  /* USER CODE END LTDC_Init 2 */

}
 8000904:	bf00      	nop
 8000906:	3738      	adds	r7, #56	; 0x38
 8000908:	46bd      	mov	sp, r7
 800090a:	bd80      	pop	{r7, pc}
 800090c:	2000012c 	.word	0x2000012c
 8000910:	40016800 	.word	0x40016800

08000914 <MX_SPI5_Init>:
  * @brief SPI5 Initialization Function
  * @param None
  * @retval None
  */
static void MX_SPI5_Init(void)
{
 8000914:	b580      	push	{r7, lr}
 8000916:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN SPI5_Init 1 */

  /* USER CODE END SPI5_Init 1 */
  /* SPI5 parameter configuration*/
  hspi5.Instance = SPI5;
 8000918:	4b17      	ldr	r3, [pc, #92]	; (8000978 <MX_SPI5_Init+0x64>)
 800091a:	4a18      	ldr	r2, [pc, #96]	; (800097c <MX_SPI5_Init+0x68>)
 800091c:	601a      	str	r2, [r3, #0]
  hspi5.Init.Mode = SPI_MODE_MASTER;
 800091e:	4b16      	ldr	r3, [pc, #88]	; (8000978 <MX_SPI5_Init+0x64>)
 8000920:	f44f 7282 	mov.w	r2, #260	; 0x104
 8000924:	605a      	str	r2, [r3, #4]
  hspi5.Init.Direction = SPI_DIRECTION_2LINES;
 8000926:	4b14      	ldr	r3, [pc, #80]	; (8000978 <MX_SPI5_Init+0x64>)
 8000928:	2200      	movs	r2, #0
 800092a:	609a      	str	r2, [r3, #8]
  hspi5.Init.DataSize = SPI_DATASIZE_8BIT;
 800092c:	4b12      	ldr	r3, [pc, #72]	; (8000978 <MX_SPI5_Init+0x64>)
 800092e:	2200      	movs	r2, #0
 8000930:	60da      	str	r2, [r3, #12]
  hspi5.Init.CLKPolarity = SPI_POLARITY_LOW;
 8000932:	4b11      	ldr	r3, [pc, #68]	; (8000978 <MX_SPI5_Init+0x64>)
 8000934:	2200      	movs	r2, #0
 8000936:	611a      	str	r2, [r3, #16]
  hspi5.Init.CLKPhase = SPI_PHASE_1EDGE;
 8000938:	4b0f      	ldr	r3, [pc, #60]	; (8000978 <MX_SPI5_Init+0x64>)
 800093a:	2200      	movs	r2, #0
 800093c:	615a      	str	r2, [r3, #20]
  hspi5.Init.NSS = SPI_NSS_SOFT;
 800093e:	4b0e      	ldr	r3, [pc, #56]	; (8000978 <MX_SPI5_Init+0x64>)
 8000940:	f44f 7200 	mov.w	r2, #512	; 0x200
 8000944:	619a      	str	r2, [r3, #24]
  hspi5.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_16;
 8000946:	4b0c      	ldr	r3, [pc, #48]	; (8000978 <MX_SPI5_Init+0x64>)
 8000948:	2218      	movs	r2, #24
 800094a:	61da      	str	r2, [r3, #28]
  hspi5.Init.FirstBit = SPI_FIRSTBIT_MSB;
 800094c:	4b0a      	ldr	r3, [pc, #40]	; (8000978 <MX_SPI5_Init+0x64>)
 800094e:	2200      	movs	r2, #0
 8000950:	621a      	str	r2, [r3, #32]
  hspi5.Init.TIMode = SPI_TIMODE_DISABLE;
 8000952:	4b09      	ldr	r3, [pc, #36]	; (8000978 <MX_SPI5_Init+0x64>)
 8000954:	2200      	movs	r2, #0
 8000956:	625a      	str	r2, [r3, #36]	; 0x24
  hspi5.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8000958:	4b07      	ldr	r3, [pc, #28]	; (8000978 <MX_SPI5_Init+0x64>)
 800095a:	2200      	movs	r2, #0
 800095c:	629a      	str	r2, [r3, #40]	; 0x28
  hspi5.Init.CRCPolynomial = 10;
 800095e:	4b06      	ldr	r3, [pc, #24]	; (8000978 <MX_SPI5_Init+0x64>)
 8000960:	220a      	movs	r2, #10
 8000962:	62da      	str	r2, [r3, #44]	; 0x2c
  if (HAL_SPI_Init(&hspi5) != HAL_OK)
 8000964:	4804      	ldr	r0, [pc, #16]	; (8000978 <MX_SPI5_Init+0x64>)
 8000966:	f004 fa95 	bl	8004e94 <HAL_SPI_Init>
 800096a:	4603      	mov	r3, r0
 800096c:	2b00      	cmp	r3, #0
 800096e:	d001      	beq.n	8000974 <MX_SPI5_Init+0x60>
  {
    Error_Handler();
 8000970:	f000 f9f2 	bl	8000d58 <Error_Handler>
  }
  /* USER CODE BEGIN SPI5_Init 2 */

  /* USER CODE END SPI5_Init 2 */

}
 8000974:	bf00      	nop
 8000976:	bd80      	pop	{r7, pc}
 8000978:	200001d4 	.word	0x200001d4
 800097c:	40015000 	.word	0x40015000

08000980 <MX_TIM1_Init>:
  * @brief TIM1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM1_Init(void)
{
 8000980:	b580      	push	{r7, lr}
 8000982:	b086      	sub	sp, #24
 8000984:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM1_Init 0 */

  /* USER CODE END TIM1_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8000986:	f107 0308 	add.w	r3, r7, #8
 800098a:	2200      	movs	r2, #0
 800098c:	601a      	str	r2, [r3, #0]
 800098e:	605a      	str	r2, [r3, #4]
 8000990:	609a      	str	r2, [r3, #8]
 8000992:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8000994:	463b      	mov	r3, r7
 8000996:	2200      	movs	r2, #0
 8000998:	601a      	str	r2, [r3, #0]
 800099a:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM1_Init 1 */

  /* USER CODE END TIM1_Init 1 */
  htim1.Instance = TIM1;
 800099c:	4b1e      	ldr	r3, [pc, #120]	; (8000a18 <MX_TIM1_Init+0x98>)
 800099e:	4a1f      	ldr	r2, [pc, #124]	; (8000a1c <MX_TIM1_Init+0x9c>)
 80009a0:	601a      	str	r2, [r3, #0]
  htim1.Init.Prescaler = 0;
 80009a2:	4b1d      	ldr	r3, [pc, #116]	; (8000a18 <MX_TIM1_Init+0x98>)
 80009a4:	2200      	movs	r2, #0
 80009a6:	605a      	str	r2, [r3, #4]
  htim1.Init.CounterMode = TIM_COUNTERMODE_UP;
 80009a8:	4b1b      	ldr	r3, [pc, #108]	; (8000a18 <MX_TIM1_Init+0x98>)
 80009aa:	2200      	movs	r2, #0
 80009ac:	609a      	str	r2, [r3, #8]
  htim1.Init.Period = 65535;
 80009ae:	4b1a      	ldr	r3, [pc, #104]	; (8000a18 <MX_TIM1_Init+0x98>)
 80009b0:	f64f 72ff 	movw	r2, #65535	; 0xffff
 80009b4:	60da      	str	r2, [r3, #12]
  htim1.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80009b6:	4b18      	ldr	r3, [pc, #96]	; (8000a18 <MX_TIM1_Init+0x98>)
 80009b8:	2200      	movs	r2, #0
 80009ba:	611a      	str	r2, [r3, #16]
  htim1.Init.RepetitionCounter = 0;
 80009bc:	4b16      	ldr	r3, [pc, #88]	; (8000a18 <MX_TIM1_Init+0x98>)
 80009be:	2200      	movs	r2, #0
 80009c0:	615a      	str	r2, [r3, #20]
  htim1.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 80009c2:	4b15      	ldr	r3, [pc, #84]	; (8000a18 <MX_TIM1_Init+0x98>)
 80009c4:	2200      	movs	r2, #0
 80009c6:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim1) != HAL_OK)
 80009c8:	4813      	ldr	r0, [pc, #76]	; (8000a18 <MX_TIM1_Init+0x98>)
 80009ca:	f004 faec 	bl	8004fa6 <HAL_TIM_Base_Init>
 80009ce:	4603      	mov	r3, r0
 80009d0:	2b00      	cmp	r3, #0
 80009d2:	d001      	beq.n	80009d8 <MX_TIM1_Init+0x58>
  {
    Error_Handler();
 80009d4:	f000 f9c0 	bl	8000d58 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 80009d8:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80009dc:	60bb      	str	r3, [r7, #8]
  if (HAL_TIM_ConfigClockSource(&htim1, &sClockSourceConfig) != HAL_OK)
 80009de:	f107 0308 	add.w	r3, r7, #8
 80009e2:	4619      	mov	r1, r3
 80009e4:	480c      	ldr	r0, [pc, #48]	; (8000a18 <MX_TIM1_Init+0x98>)
 80009e6:	f004 fca5 	bl	8005334 <HAL_TIM_ConfigClockSource>
 80009ea:	4603      	mov	r3, r0
 80009ec:	2b00      	cmp	r3, #0
 80009ee:	d001      	beq.n	80009f4 <MX_TIM1_Init+0x74>
  {
    Error_Handler();
 80009f0:	f000 f9b2 	bl	8000d58 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 80009f4:	2300      	movs	r3, #0
 80009f6:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 80009f8:	2300      	movs	r3, #0
 80009fa:	607b      	str	r3, [r7, #4]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim1, &sMasterConfig) != HAL_OK)
 80009fc:	463b      	mov	r3, r7
 80009fe:	4619      	mov	r1, r3
 8000a00:	4805      	ldr	r0, [pc, #20]	; (8000a18 <MX_TIM1_Init+0x98>)
 8000a02:	f004 fec1 	bl	8005788 <HAL_TIMEx_MasterConfigSynchronization>
 8000a06:	4603      	mov	r3, r0
 8000a08:	2b00      	cmp	r3, #0
 8000a0a:	d001      	beq.n	8000a10 <MX_TIM1_Init+0x90>
  {
    Error_Handler();
 8000a0c:	f000 f9a4 	bl	8000d58 <Error_Handler>
  }
  /* USER CODE BEGIN TIM1_Init 2 */

  /* USER CODE END TIM1_Init 2 */

}
 8000a10:	bf00      	nop
 8000a12:	3718      	adds	r7, #24
 8000a14:	46bd      	mov	sp, r7
 8000a16:	bd80      	pop	{r7, pc}
 8000a18:	2000022c 	.word	0x2000022c
 8000a1c:	40010000 	.word	0x40010000

08000a20 <MX_USART1_UART_Init>:
  * @brief USART1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART1_UART_Init(void)
{
 8000a20:	b580      	push	{r7, lr}
 8000a22:	af00      	add	r7, sp, #0
  /* USER CODE END USART1_Init 0 */

  /* USER CODE BEGIN USART1_Init 1 */

  /* USER CODE END USART1_Init 1 */
  huart1.Instance = USART1;
 8000a24:	4b11      	ldr	r3, [pc, #68]	; (8000a6c <MX_USART1_UART_Init+0x4c>)
 8000a26:	4a12      	ldr	r2, [pc, #72]	; (8000a70 <MX_USART1_UART_Init+0x50>)
 8000a28:	601a      	str	r2, [r3, #0]
  huart1.Init.BaudRate = 115200;
 8000a2a:	4b10      	ldr	r3, [pc, #64]	; (8000a6c <MX_USART1_UART_Init+0x4c>)
 8000a2c:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8000a30:	605a      	str	r2, [r3, #4]
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
 8000a32:	4b0e      	ldr	r3, [pc, #56]	; (8000a6c <MX_USART1_UART_Init+0x4c>)
 8000a34:	2200      	movs	r2, #0
 8000a36:	609a      	str	r2, [r3, #8]
  huart1.Init.StopBits = UART_STOPBITS_1;
 8000a38:	4b0c      	ldr	r3, [pc, #48]	; (8000a6c <MX_USART1_UART_Init+0x4c>)
 8000a3a:	2200      	movs	r2, #0
 8000a3c:	60da      	str	r2, [r3, #12]
  huart1.Init.Parity = UART_PARITY_NONE;
 8000a3e:	4b0b      	ldr	r3, [pc, #44]	; (8000a6c <MX_USART1_UART_Init+0x4c>)
 8000a40:	2200      	movs	r2, #0
 8000a42:	611a      	str	r2, [r3, #16]
  huart1.Init.Mode = UART_MODE_TX_RX;
 8000a44:	4b09      	ldr	r3, [pc, #36]	; (8000a6c <MX_USART1_UART_Init+0x4c>)
 8000a46:	220c      	movs	r2, #12
 8000a48:	615a      	str	r2, [r3, #20]
  huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8000a4a:	4b08      	ldr	r3, [pc, #32]	; (8000a6c <MX_USART1_UART_Init+0x4c>)
 8000a4c:	2200      	movs	r2, #0
 8000a4e:	619a      	str	r2, [r3, #24]
  huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 8000a50:	4b06      	ldr	r3, [pc, #24]	; (8000a6c <MX_USART1_UART_Init+0x4c>)
 8000a52:	2200      	movs	r2, #0
 8000a54:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart1) != HAL_OK)
 8000a56:	4805      	ldr	r0, [pc, #20]	; (8000a6c <MX_USART1_UART_Init+0x4c>)
 8000a58:	f004 ff26 	bl	80058a8 <HAL_UART_Init>
 8000a5c:	4603      	mov	r3, r0
 8000a5e:	2b00      	cmp	r3, #0
 8000a60:	d001      	beq.n	8000a66 <MX_USART1_UART_Init+0x46>
  {
    Error_Handler();
 8000a62:	f000 f979 	bl	8000d58 <Error_Handler>
  }
  /* USER CODE BEGIN USART1_Init 2 */

  /* USER CODE END USART1_Init 2 */

}
 8000a66:	bf00      	nop
 8000a68:	bd80      	pop	{r7, pc}
 8000a6a:	bf00      	nop
 8000a6c:	20000274 	.word	0x20000274
 8000a70:	40011000 	.word	0x40011000

08000a74 <MX_FMC_Init>:

/* FMC initialization function */
static void MX_FMC_Init(void)
{
 8000a74:	b580      	push	{r7, lr}
 8000a76:	b088      	sub	sp, #32
 8000a78:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN FMC_Init 0 */

  /* USER CODE END FMC_Init 0 */

  FMC_SDRAM_TimingTypeDef SdramTiming = {0};
 8000a7a:	1d3b      	adds	r3, r7, #4
 8000a7c:	2200      	movs	r2, #0
 8000a7e:	601a      	str	r2, [r3, #0]
 8000a80:	605a      	str	r2, [r3, #4]
 8000a82:	609a      	str	r2, [r3, #8]
 8000a84:	60da      	str	r2, [r3, #12]
 8000a86:	611a      	str	r2, [r3, #16]
 8000a88:	615a      	str	r2, [r3, #20]
 8000a8a:	619a      	str	r2, [r3, #24]

  /* USER CODE END FMC_Init 1 */

  /** Perform the SDRAM1 memory initialization sequence
  */
  hsdram1.Instance = FMC_SDRAM_DEVICE;
 8000a8c:	4b1f      	ldr	r3, [pc, #124]	; (8000b0c <MX_FMC_Init+0x98>)
 8000a8e:	4a20      	ldr	r2, [pc, #128]	; (8000b10 <MX_FMC_Init+0x9c>)
 8000a90:	601a      	str	r2, [r3, #0]
  /* hsdram1.Init */
  hsdram1.Init.SDBank = FMC_SDRAM_BANK2;
 8000a92:	4b1e      	ldr	r3, [pc, #120]	; (8000b0c <MX_FMC_Init+0x98>)
 8000a94:	2201      	movs	r2, #1
 8000a96:	605a      	str	r2, [r3, #4]
  hsdram1.Init.ColumnBitsNumber = FMC_SDRAM_COLUMN_BITS_NUM_8;
 8000a98:	4b1c      	ldr	r3, [pc, #112]	; (8000b0c <MX_FMC_Init+0x98>)
 8000a9a:	2200      	movs	r2, #0
 8000a9c:	609a      	str	r2, [r3, #8]
  hsdram1.Init.RowBitsNumber = FMC_SDRAM_ROW_BITS_NUM_12;
 8000a9e:	4b1b      	ldr	r3, [pc, #108]	; (8000b0c <MX_FMC_Init+0x98>)
 8000aa0:	2204      	movs	r2, #4
 8000aa2:	60da      	str	r2, [r3, #12]
  hsdram1.Init.MemoryDataWidth = FMC_SDRAM_MEM_BUS_WIDTH_16;
 8000aa4:	4b19      	ldr	r3, [pc, #100]	; (8000b0c <MX_FMC_Init+0x98>)
 8000aa6:	2210      	movs	r2, #16
 8000aa8:	611a      	str	r2, [r3, #16]
  hsdram1.Init.InternalBankNumber = FMC_SDRAM_INTERN_BANKS_NUM_4;
 8000aaa:	4b18      	ldr	r3, [pc, #96]	; (8000b0c <MX_FMC_Init+0x98>)
 8000aac:	2240      	movs	r2, #64	; 0x40
 8000aae:	615a      	str	r2, [r3, #20]
  hsdram1.Init.CASLatency = FMC_SDRAM_CAS_LATENCY_3;
 8000ab0:	4b16      	ldr	r3, [pc, #88]	; (8000b0c <MX_FMC_Init+0x98>)
 8000ab2:	f44f 72c0 	mov.w	r2, #384	; 0x180
 8000ab6:	619a      	str	r2, [r3, #24]
  hsdram1.Init.WriteProtection = FMC_SDRAM_WRITE_PROTECTION_DISABLE;
 8000ab8:	4b14      	ldr	r3, [pc, #80]	; (8000b0c <MX_FMC_Init+0x98>)
 8000aba:	2200      	movs	r2, #0
 8000abc:	61da      	str	r2, [r3, #28]
  hsdram1.Init.SDClockPeriod = FMC_SDRAM_CLOCK_PERIOD_2;
 8000abe:	4b13      	ldr	r3, [pc, #76]	; (8000b0c <MX_FMC_Init+0x98>)
 8000ac0:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8000ac4:	621a      	str	r2, [r3, #32]
  hsdram1.Init.ReadBurst = FMC_SDRAM_RBURST_DISABLE;
 8000ac6:	4b11      	ldr	r3, [pc, #68]	; (8000b0c <MX_FMC_Init+0x98>)
 8000ac8:	2200      	movs	r2, #0
 8000aca:	625a      	str	r2, [r3, #36]	; 0x24
  hsdram1.Init.ReadPipeDelay = FMC_SDRAM_RPIPE_DELAY_1;
 8000acc:	4b0f      	ldr	r3, [pc, #60]	; (8000b0c <MX_FMC_Init+0x98>)
 8000ace:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 8000ad2:	629a      	str	r2, [r3, #40]	; 0x28
  /* SdramTiming */
  SdramTiming.LoadToActiveDelay = 2;
 8000ad4:	2302      	movs	r3, #2
 8000ad6:	607b      	str	r3, [r7, #4]
  SdramTiming.ExitSelfRefreshDelay = 7;
 8000ad8:	2307      	movs	r3, #7
 8000ada:	60bb      	str	r3, [r7, #8]
  SdramTiming.SelfRefreshTime = 4;
 8000adc:	2304      	movs	r3, #4
 8000ade:	60fb      	str	r3, [r7, #12]
  SdramTiming.RowCycleDelay = 7;
 8000ae0:	2307      	movs	r3, #7
 8000ae2:	613b      	str	r3, [r7, #16]
  SdramTiming.WriteRecoveryTime = 3;
 8000ae4:	2303      	movs	r3, #3
 8000ae6:	617b      	str	r3, [r7, #20]
  SdramTiming.RPDelay = 2;
 8000ae8:	2302      	movs	r3, #2
 8000aea:	61bb      	str	r3, [r7, #24]
  SdramTiming.RCDDelay = 2;
 8000aec:	2302      	movs	r3, #2
 8000aee:	61fb      	str	r3, [r7, #28]

  if (HAL_SDRAM_Init(&hsdram1, &SdramTiming) != HAL_OK)
 8000af0:	1d3b      	adds	r3, r7, #4
 8000af2:	4619      	mov	r1, r3
 8000af4:	4805      	ldr	r0, [pc, #20]	; (8000b0c <MX_FMC_Init+0x98>)
 8000af6:	f004 f999 	bl	8004e2c <HAL_SDRAM_Init>
 8000afa:	4603      	mov	r3, r0
 8000afc:	2b00      	cmp	r3, #0
 8000afe:	d001      	beq.n	8000b04 <MX_FMC_Init+0x90>
  {
    Error_Handler( );
 8000b00:	f000 f92a 	bl	8000d58 <Error_Handler>
  }

  /* USER CODE BEGIN FMC_Init 2 */

  /* USER CODE END FMC_Init 2 */
}
 8000b04:	bf00      	nop
 8000b06:	3720      	adds	r7, #32
 8000b08:	46bd      	mov	sp, r7
 8000b0a:	bd80      	pop	{r7, pc}
 8000b0c:	200002b8 	.word	0x200002b8
 8000b10:	a0000140 	.word	0xa0000140

08000b14 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8000b14:	b580      	push	{r7, lr}
 8000b16:	b08e      	sub	sp, #56	; 0x38
 8000b18:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000b1a:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000b1e:	2200      	movs	r2, #0
 8000b20:	601a      	str	r2, [r3, #0]
 8000b22:	605a      	str	r2, [r3, #4]
 8000b24:	609a      	str	r2, [r3, #8]
 8000b26:	60da      	str	r2, [r3, #12]
 8000b28:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8000b2a:	2300      	movs	r3, #0
 8000b2c:	623b      	str	r3, [r7, #32]
 8000b2e:	4b7b      	ldr	r3, [pc, #492]	; (8000d1c <MX_GPIO_Init+0x208>)
 8000b30:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000b32:	4a7a      	ldr	r2, [pc, #488]	; (8000d1c <MX_GPIO_Init+0x208>)
 8000b34:	f043 0304 	orr.w	r3, r3, #4
 8000b38:	6313      	str	r3, [r2, #48]	; 0x30
 8000b3a:	4b78      	ldr	r3, [pc, #480]	; (8000d1c <MX_GPIO_Init+0x208>)
 8000b3c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000b3e:	f003 0304 	and.w	r3, r3, #4
 8000b42:	623b      	str	r3, [r7, #32]
 8000b44:	6a3b      	ldr	r3, [r7, #32]
  __HAL_RCC_GPIOF_CLK_ENABLE();
 8000b46:	2300      	movs	r3, #0
 8000b48:	61fb      	str	r3, [r7, #28]
 8000b4a:	4b74      	ldr	r3, [pc, #464]	; (8000d1c <MX_GPIO_Init+0x208>)
 8000b4c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000b4e:	4a73      	ldr	r2, [pc, #460]	; (8000d1c <MX_GPIO_Init+0x208>)
 8000b50:	f043 0320 	orr.w	r3, r3, #32
 8000b54:	6313      	str	r3, [r2, #48]	; 0x30
 8000b56:	4b71      	ldr	r3, [pc, #452]	; (8000d1c <MX_GPIO_Init+0x208>)
 8000b58:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000b5a:	f003 0320 	and.w	r3, r3, #32
 8000b5e:	61fb      	str	r3, [r7, #28]
 8000b60:	69fb      	ldr	r3, [r7, #28]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 8000b62:	2300      	movs	r3, #0
 8000b64:	61bb      	str	r3, [r7, #24]
 8000b66:	4b6d      	ldr	r3, [pc, #436]	; (8000d1c <MX_GPIO_Init+0x208>)
 8000b68:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000b6a:	4a6c      	ldr	r2, [pc, #432]	; (8000d1c <MX_GPIO_Init+0x208>)
 8000b6c:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8000b70:	6313      	str	r3, [r2, #48]	; 0x30
 8000b72:	4b6a      	ldr	r3, [pc, #424]	; (8000d1c <MX_GPIO_Init+0x208>)
 8000b74:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000b76:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8000b7a:	61bb      	str	r3, [r7, #24]
 8000b7c:	69bb      	ldr	r3, [r7, #24]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000b7e:	2300      	movs	r3, #0
 8000b80:	617b      	str	r3, [r7, #20]
 8000b82:	4b66      	ldr	r3, [pc, #408]	; (8000d1c <MX_GPIO_Init+0x208>)
 8000b84:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000b86:	4a65      	ldr	r2, [pc, #404]	; (8000d1c <MX_GPIO_Init+0x208>)
 8000b88:	f043 0301 	orr.w	r3, r3, #1
 8000b8c:	6313      	str	r3, [r2, #48]	; 0x30
 8000b8e:	4b63      	ldr	r3, [pc, #396]	; (8000d1c <MX_GPIO_Init+0x208>)
 8000b90:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000b92:	f003 0301 	and.w	r3, r3, #1
 8000b96:	617b      	str	r3, [r7, #20]
 8000b98:	697b      	ldr	r3, [r7, #20]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8000b9a:	2300      	movs	r3, #0
 8000b9c:	613b      	str	r3, [r7, #16]
 8000b9e:	4b5f      	ldr	r3, [pc, #380]	; (8000d1c <MX_GPIO_Init+0x208>)
 8000ba0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000ba2:	4a5e      	ldr	r2, [pc, #376]	; (8000d1c <MX_GPIO_Init+0x208>)
 8000ba4:	f043 0302 	orr.w	r3, r3, #2
 8000ba8:	6313      	str	r3, [r2, #48]	; 0x30
 8000baa:	4b5c      	ldr	r3, [pc, #368]	; (8000d1c <MX_GPIO_Init+0x208>)
 8000bac:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000bae:	f003 0302 	and.w	r3, r3, #2
 8000bb2:	613b      	str	r3, [r7, #16]
 8000bb4:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOG_CLK_ENABLE();
 8000bb6:	2300      	movs	r3, #0
 8000bb8:	60fb      	str	r3, [r7, #12]
 8000bba:	4b58      	ldr	r3, [pc, #352]	; (8000d1c <MX_GPIO_Init+0x208>)
 8000bbc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000bbe:	4a57      	ldr	r2, [pc, #348]	; (8000d1c <MX_GPIO_Init+0x208>)
 8000bc0:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8000bc4:	6313      	str	r3, [r2, #48]	; 0x30
 8000bc6:	4b55      	ldr	r3, [pc, #340]	; (8000d1c <MX_GPIO_Init+0x208>)
 8000bc8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000bca:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8000bce:	60fb      	str	r3, [r7, #12]
 8000bd0:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOE_CLK_ENABLE();
 8000bd2:	2300      	movs	r3, #0
 8000bd4:	60bb      	str	r3, [r7, #8]
 8000bd6:	4b51      	ldr	r3, [pc, #324]	; (8000d1c <MX_GPIO_Init+0x208>)
 8000bd8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000bda:	4a50      	ldr	r2, [pc, #320]	; (8000d1c <MX_GPIO_Init+0x208>)
 8000bdc:	f043 0310 	orr.w	r3, r3, #16
 8000be0:	6313      	str	r3, [r2, #48]	; 0x30
 8000be2:	4b4e      	ldr	r3, [pc, #312]	; (8000d1c <MX_GPIO_Init+0x208>)
 8000be4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000be6:	f003 0310 	and.w	r3, r3, #16
 8000bea:	60bb      	str	r3, [r7, #8]
 8000bec:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8000bee:	2300      	movs	r3, #0
 8000bf0:	607b      	str	r3, [r7, #4]
 8000bf2:	4b4a      	ldr	r3, [pc, #296]	; (8000d1c <MX_GPIO_Init+0x208>)
 8000bf4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000bf6:	4a49      	ldr	r2, [pc, #292]	; (8000d1c <MX_GPIO_Init+0x208>)
 8000bf8:	f043 0308 	orr.w	r3, r3, #8
 8000bfc:	6313      	str	r3, [r2, #48]	; 0x30
 8000bfe:	4b47      	ldr	r3, [pc, #284]	; (8000d1c <MX_GPIO_Init+0x208>)
 8000c00:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000c02:	f003 0308 	and.w	r3, r3, #8
 8000c06:	607b      	str	r3, [r7, #4]
 8000c08:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOC, NCS_MEMS_SPI_Pin|CSX_Pin|OTG_FS_PSO_Pin, GPIO_PIN_RESET);
 8000c0a:	2200      	movs	r2, #0
 8000c0c:	2116      	movs	r1, #22
 8000c0e:	4844      	ldr	r0, [pc, #272]	; (8000d20 <MX_GPIO_Init+0x20c>)
 8000c10:	f001 fc16 	bl	8002440 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(ACP_RST_GPIO_Port, ACP_RST_Pin, GPIO_PIN_RESET);
 8000c14:	2200      	movs	r2, #0
 8000c16:	2180      	movs	r1, #128	; 0x80
 8000c18:	4842      	ldr	r0, [pc, #264]	; (8000d24 <MX_GPIO_Init+0x210>)
 8000c1a:	f001 fc11 	bl	8002440 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOD, RDX_Pin|WRX_DCX_Pin, GPIO_PIN_RESET);
 8000c1e:	2200      	movs	r2, #0
 8000c20:	f44f 5140 	mov.w	r1, #12288	; 0x3000
 8000c24:	4840      	ldr	r0, [pc, #256]	; (8000d28 <MX_GPIO_Init+0x214>)
 8000c26:	f001 fc0b 	bl	8002440 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOG, LD3_Pin|LD4_Pin, GPIO_PIN_RESET);
 8000c2a:	2200      	movs	r2, #0
 8000c2c:	f44f 41c0 	mov.w	r1, #24576	; 0x6000
 8000c30:	483e      	ldr	r0, [pc, #248]	; (8000d2c <MX_GPIO_Init+0x218>)
 8000c32:	f001 fc05 	bl	8002440 <HAL_GPIO_WritePin>

  /*Configure GPIO pins : NCS_MEMS_SPI_Pin CSX_Pin OTG_FS_PSO_Pin */
  GPIO_InitStruct.Pin = NCS_MEMS_SPI_Pin|CSX_Pin|OTG_FS_PSO_Pin;
 8000c36:	2316      	movs	r3, #22
 8000c38:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000c3a:	2301      	movs	r3, #1
 8000c3c:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000c3e:	2300      	movs	r3, #0
 8000c40:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000c42:	2300      	movs	r3, #0
 8000c44:	633b      	str	r3, [r7, #48]	; 0x30
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8000c46:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000c4a:	4619      	mov	r1, r3
 8000c4c:	4834      	ldr	r0, [pc, #208]	; (8000d20 <MX_GPIO_Init+0x20c>)
 8000c4e:	f001 fa4b 	bl	80020e8 <HAL_GPIO_Init>

  /*Configure GPIO pins : B1_Pin MEMS_INT1_Pin MEMS_INT2_Pin TP_INT1_Pin */
  GPIO_InitStruct.Pin = B1_Pin|MEMS_INT1_Pin|MEMS_INT2_Pin|TP_INT1_Pin;
 8000c52:	f248 0307 	movw	r3, #32775	; 0x8007
 8000c56:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_EVT_RISING;
 8000c58:	f44f 1390 	mov.w	r3, #1179648	; 0x120000
 8000c5c:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000c5e:	2300      	movs	r3, #0
 8000c60:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000c62:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000c66:	4619      	mov	r1, r3
 8000c68:	482e      	ldr	r0, [pc, #184]	; (8000d24 <MX_GPIO_Init+0x210>)
 8000c6a:	f001 fa3d 	bl	80020e8 <HAL_GPIO_Init>

  /*Configure GPIO pin : ACP_RST_Pin */
  GPIO_InitStruct.Pin = ACP_RST_Pin;
 8000c6e:	2380      	movs	r3, #128	; 0x80
 8000c70:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000c72:	2301      	movs	r3, #1
 8000c74:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000c76:	2300      	movs	r3, #0
 8000c78:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000c7a:	2300      	movs	r3, #0
 8000c7c:	633b      	str	r3, [r7, #48]	; 0x30
  HAL_GPIO_Init(ACP_RST_GPIO_Port, &GPIO_InitStruct);
 8000c7e:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000c82:	4619      	mov	r1, r3
 8000c84:	4827      	ldr	r0, [pc, #156]	; (8000d24 <MX_GPIO_Init+0x210>)
 8000c86:	f001 fa2f 	bl	80020e8 <HAL_GPIO_Init>

  /*Configure GPIO pin : OTG_FS_OC_Pin */
  GPIO_InitStruct.Pin = OTG_FS_OC_Pin;
 8000c8a:	2320      	movs	r3, #32
 8000c8c:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_EVT_RISING;
 8000c8e:	f44f 1390 	mov.w	r3, #1179648	; 0x120000
 8000c92:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000c94:	2300      	movs	r3, #0
 8000c96:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(OTG_FS_OC_GPIO_Port, &GPIO_InitStruct);
 8000c98:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000c9c:	4619      	mov	r1, r3
 8000c9e:	4820      	ldr	r0, [pc, #128]	; (8000d20 <MX_GPIO_Init+0x20c>)
 8000ca0:	f001 fa22 	bl	80020e8 <HAL_GPIO_Init>

  /*Configure GPIO pin : BOOT1_Pin */
  GPIO_InitStruct.Pin = BOOT1_Pin;
 8000ca4:	2304      	movs	r3, #4
 8000ca6:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000ca8:	2300      	movs	r3, #0
 8000caa:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000cac:	2300      	movs	r3, #0
 8000cae:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(BOOT1_GPIO_Port, &GPIO_InitStruct);
 8000cb0:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000cb4:	4619      	mov	r1, r3
 8000cb6:	481e      	ldr	r0, [pc, #120]	; (8000d30 <MX_GPIO_Init+0x21c>)
 8000cb8:	f001 fa16 	bl	80020e8 <HAL_GPIO_Init>

  /*Configure GPIO pin : TE_Pin */
  GPIO_InitStruct.Pin = TE_Pin;
 8000cbc:	f44f 6300 	mov.w	r3, #2048	; 0x800
 8000cc0:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000cc2:	2300      	movs	r3, #0
 8000cc4:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000cc6:	2300      	movs	r3, #0
 8000cc8:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(TE_GPIO_Port, &GPIO_InitStruct);
 8000cca:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000cce:	4619      	mov	r1, r3
 8000cd0:	4815      	ldr	r0, [pc, #84]	; (8000d28 <MX_GPIO_Init+0x214>)
 8000cd2:	f001 fa09 	bl	80020e8 <HAL_GPIO_Init>

  /*Configure GPIO pins : RDX_Pin WRX_DCX_Pin */
  GPIO_InitStruct.Pin = RDX_Pin|WRX_DCX_Pin;
 8000cd6:	f44f 5340 	mov.w	r3, #12288	; 0x3000
 8000cda:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000cdc:	2301      	movs	r3, #1
 8000cde:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000ce0:	2300      	movs	r3, #0
 8000ce2:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000ce4:	2300      	movs	r3, #0
 8000ce6:	633b      	str	r3, [r7, #48]	; 0x30
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8000ce8:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000cec:	4619      	mov	r1, r3
 8000cee:	480e      	ldr	r0, [pc, #56]	; (8000d28 <MX_GPIO_Init+0x214>)
 8000cf0:	f001 f9fa 	bl	80020e8 <HAL_GPIO_Init>

  /*Configure GPIO pins : LD3_Pin LD4_Pin */
  GPIO_InitStruct.Pin = LD3_Pin|LD4_Pin;
 8000cf4:	f44f 43c0 	mov.w	r3, #24576	; 0x6000
 8000cf8:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000cfa:	2301      	movs	r3, #1
 8000cfc:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000cfe:	2300      	movs	r3, #0
 8000d00:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000d02:	2300      	movs	r3, #0
 8000d04:	633b      	str	r3, [r7, #48]	; 0x30
  HAL_GPIO_Init(GPIOG, &GPIO_InitStruct);
 8000d06:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000d0a:	4619      	mov	r1, r3
 8000d0c:	4807      	ldr	r0, [pc, #28]	; (8000d2c <MX_GPIO_Init+0x218>)
 8000d0e:	f001 f9eb 	bl	80020e8 <HAL_GPIO_Init>

}
 8000d12:	bf00      	nop
 8000d14:	3738      	adds	r7, #56	; 0x38
 8000d16:	46bd      	mov	sp, r7
 8000d18:	bd80      	pop	{r7, pc}
 8000d1a:	bf00      	nop
 8000d1c:	40023800 	.word	0x40023800
 8000d20:	40020800 	.word	0x40020800
 8000d24:	40020000 	.word	0x40020000
 8000d28:	40020c00 	.word	0x40020c00
 8000d2c:	40021800 	.word	0x40021800
 8000d30:	40020400 	.word	0x40020400

08000d34 <HAL_TIM_PeriodElapsedCallback>:
  * a global variable "uwTick" used as application time base.
  * @param  htim : TIM handle
  * @retval None
  */
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 8000d34:	b580      	push	{r7, lr}
 8000d36:	b082      	sub	sp, #8
 8000d38:	af00      	add	r7, sp, #0
 8000d3a:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN Callback 0 */

  /* USER CODE END Callback 0 */
  if (htim->Instance == TIM6) {
 8000d3c:	687b      	ldr	r3, [r7, #4]
 8000d3e:	681b      	ldr	r3, [r3, #0]
 8000d40:	4a04      	ldr	r2, [pc, #16]	; (8000d54 <HAL_TIM_PeriodElapsedCallback+0x20>)
 8000d42:	4293      	cmp	r3, r2
 8000d44:	d101      	bne.n	8000d4a <HAL_TIM_PeriodElapsedCallback+0x16>
    HAL_IncTick();
 8000d46:	f000 fec5 	bl	8001ad4 <HAL_IncTick>
  }
  /* USER CODE BEGIN Callback 1 */

  /* USER CODE END Callback 1 */
}
 8000d4a:	bf00      	nop
 8000d4c:	3708      	adds	r7, #8
 8000d4e:	46bd      	mov	sp, r7
 8000d50:	bd80      	pop	{r7, pc}
 8000d52:	bf00      	nop
 8000d54:	40001000 	.word	0x40001000

08000d58 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8000d58:	b480      	push	{r7}
 8000d5a:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8000d5c:	b672      	cpsid	i
}
 8000d5e:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8000d60:	e7fe      	b.n	8000d60 <Error_Handler+0x8>
	...

08000d64 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000d64:	b580      	push	{r7, lr}
 8000d66:	b082      	sub	sp, #8
 8000d68:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000d6a:	2300      	movs	r3, #0
 8000d6c:	607b      	str	r3, [r7, #4]
 8000d6e:	4b12      	ldr	r3, [pc, #72]	; (8000db8 <HAL_MspInit+0x54>)
 8000d70:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000d72:	4a11      	ldr	r2, [pc, #68]	; (8000db8 <HAL_MspInit+0x54>)
 8000d74:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8000d78:	6453      	str	r3, [r2, #68]	; 0x44
 8000d7a:	4b0f      	ldr	r3, [pc, #60]	; (8000db8 <HAL_MspInit+0x54>)
 8000d7c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000d7e:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8000d82:	607b      	str	r3, [r7, #4]
 8000d84:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8000d86:	2300      	movs	r3, #0
 8000d88:	603b      	str	r3, [r7, #0]
 8000d8a:	4b0b      	ldr	r3, [pc, #44]	; (8000db8 <HAL_MspInit+0x54>)
 8000d8c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000d8e:	4a0a      	ldr	r2, [pc, #40]	; (8000db8 <HAL_MspInit+0x54>)
 8000d90:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8000d94:	6413      	str	r3, [r2, #64]	; 0x40
 8000d96:	4b08      	ldr	r3, [pc, #32]	; (8000db8 <HAL_MspInit+0x54>)
 8000d98:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000d9a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000d9e:	603b      	str	r3, [r7, #0]
 8000da0:	683b      	ldr	r3, [r7, #0]

  /* System interrupt init*/
  /* PendSV_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(PendSV_IRQn, 15, 0);
 8000da2:	2200      	movs	r2, #0
 8000da4:	210f      	movs	r1, #15
 8000da6:	f06f 0001 	mvn.w	r0, #1
 8000daa:	f000 ff6b 	bl	8001c84 <HAL_NVIC_SetPriority>

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8000dae:	bf00      	nop
 8000db0:	3708      	adds	r7, #8
 8000db2:	46bd      	mov	sp, r7
 8000db4:	bd80      	pop	{r7, pc}
 8000db6:	bf00      	nop
 8000db8:	40023800 	.word	0x40023800

08000dbc <HAL_CRC_MspInit>:
* This function configures the hardware resources used in this example
* @param hcrc: CRC handle pointer
* @retval None
*/
void HAL_CRC_MspInit(CRC_HandleTypeDef* hcrc)
{
 8000dbc:	b480      	push	{r7}
 8000dbe:	b085      	sub	sp, #20
 8000dc0:	af00      	add	r7, sp, #0
 8000dc2:	6078      	str	r0, [r7, #4]
  if(hcrc->Instance==CRC)
 8000dc4:	687b      	ldr	r3, [r7, #4]
 8000dc6:	681b      	ldr	r3, [r3, #0]
 8000dc8:	4a0b      	ldr	r2, [pc, #44]	; (8000df8 <HAL_CRC_MspInit+0x3c>)
 8000dca:	4293      	cmp	r3, r2
 8000dcc:	d10d      	bne.n	8000dea <HAL_CRC_MspInit+0x2e>
  {
  /* USER CODE BEGIN CRC_MspInit 0 */

  /* USER CODE END CRC_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_CRC_CLK_ENABLE();
 8000dce:	2300      	movs	r3, #0
 8000dd0:	60fb      	str	r3, [r7, #12]
 8000dd2:	4b0a      	ldr	r3, [pc, #40]	; (8000dfc <HAL_CRC_MspInit+0x40>)
 8000dd4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000dd6:	4a09      	ldr	r2, [pc, #36]	; (8000dfc <HAL_CRC_MspInit+0x40>)
 8000dd8:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 8000ddc:	6313      	str	r3, [r2, #48]	; 0x30
 8000dde:	4b07      	ldr	r3, [pc, #28]	; (8000dfc <HAL_CRC_MspInit+0x40>)
 8000de0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000de2:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8000de6:	60fb      	str	r3, [r7, #12]
 8000de8:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN CRC_MspInit 1 */

  /* USER CODE END CRC_MspInit 1 */
  }

}
 8000dea:	bf00      	nop
 8000dec:	3714      	adds	r7, #20
 8000dee:	46bd      	mov	sp, r7
 8000df0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000df4:	4770      	bx	lr
 8000df6:	bf00      	nop
 8000df8:	40023000 	.word	0x40023000
 8000dfc:	40023800 	.word	0x40023800

08000e00 <HAL_DMA2D_MspInit>:
* This function configures the hardware resources used in this example
* @param hdma2d: DMA2D handle pointer
* @retval None
*/
void HAL_DMA2D_MspInit(DMA2D_HandleTypeDef* hdma2d)
{
 8000e00:	b580      	push	{r7, lr}
 8000e02:	b084      	sub	sp, #16
 8000e04:	af00      	add	r7, sp, #0
 8000e06:	6078      	str	r0, [r7, #4]
  if(hdma2d->Instance==DMA2D)
 8000e08:	687b      	ldr	r3, [r7, #4]
 8000e0a:	681b      	ldr	r3, [r3, #0]
 8000e0c:	4a0e      	ldr	r2, [pc, #56]	; (8000e48 <HAL_DMA2D_MspInit+0x48>)
 8000e0e:	4293      	cmp	r3, r2
 8000e10:	d115      	bne.n	8000e3e <HAL_DMA2D_MspInit+0x3e>
  {
  /* USER CODE BEGIN DMA2D_MspInit 0 */

  /* USER CODE END DMA2D_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_DMA2D_CLK_ENABLE();
 8000e12:	2300      	movs	r3, #0
 8000e14:	60fb      	str	r3, [r7, #12]
 8000e16:	4b0d      	ldr	r3, [pc, #52]	; (8000e4c <HAL_DMA2D_MspInit+0x4c>)
 8000e18:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000e1a:	4a0c      	ldr	r2, [pc, #48]	; (8000e4c <HAL_DMA2D_MspInit+0x4c>)
 8000e1c:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
 8000e20:	6313      	str	r3, [r2, #48]	; 0x30
 8000e22:	4b0a      	ldr	r3, [pc, #40]	; (8000e4c <HAL_DMA2D_MspInit+0x4c>)
 8000e24:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000e26:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8000e2a:	60fb      	str	r3, [r7, #12]
 8000e2c:	68fb      	ldr	r3, [r7, #12]
    /* DMA2D interrupt Init */
    HAL_NVIC_SetPriority(DMA2D_IRQn, 5, 0);
 8000e2e:	2200      	movs	r2, #0
 8000e30:	2105      	movs	r1, #5
 8000e32:	205a      	movs	r0, #90	; 0x5a
 8000e34:	f000 ff26 	bl	8001c84 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(DMA2D_IRQn);
 8000e38:	205a      	movs	r0, #90	; 0x5a
 8000e3a:	f000 ff3f 	bl	8001cbc <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN DMA2D_MspInit 1 */

  /* USER CODE END DMA2D_MspInit 1 */
  }

}
 8000e3e:	bf00      	nop
 8000e40:	3710      	adds	r7, #16
 8000e42:	46bd      	mov	sp, r7
 8000e44:	bd80      	pop	{r7, pc}
 8000e46:	bf00      	nop
 8000e48:	4002b000 	.word	0x4002b000
 8000e4c:	40023800 	.word	0x40023800

08000e50 <HAL_I2C_MspInit>:
* This function configures the hardware resources used in this example
* @param hi2c: I2C handle pointer
* @retval None
*/
void HAL_I2C_MspInit(I2C_HandleTypeDef* hi2c)
{
 8000e50:	b580      	push	{r7, lr}
 8000e52:	b08a      	sub	sp, #40	; 0x28
 8000e54:	af00      	add	r7, sp, #0
 8000e56:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000e58:	f107 0314 	add.w	r3, r7, #20
 8000e5c:	2200      	movs	r2, #0
 8000e5e:	601a      	str	r2, [r3, #0]
 8000e60:	605a      	str	r2, [r3, #4]
 8000e62:	609a      	str	r2, [r3, #8]
 8000e64:	60da      	str	r2, [r3, #12]
 8000e66:	611a      	str	r2, [r3, #16]
  if(hi2c->Instance==I2C3)
 8000e68:	687b      	ldr	r3, [r7, #4]
 8000e6a:	681b      	ldr	r3, [r3, #0]
 8000e6c:	4a29      	ldr	r2, [pc, #164]	; (8000f14 <HAL_I2C_MspInit+0xc4>)
 8000e6e:	4293      	cmp	r3, r2
 8000e70:	d14b      	bne.n	8000f0a <HAL_I2C_MspInit+0xba>
  {
  /* USER CODE BEGIN I2C3_MspInit 0 */

  /* USER CODE END I2C3_MspInit 0 */

    __HAL_RCC_GPIOC_CLK_ENABLE();
 8000e72:	2300      	movs	r3, #0
 8000e74:	613b      	str	r3, [r7, #16]
 8000e76:	4b28      	ldr	r3, [pc, #160]	; (8000f18 <HAL_I2C_MspInit+0xc8>)
 8000e78:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000e7a:	4a27      	ldr	r2, [pc, #156]	; (8000f18 <HAL_I2C_MspInit+0xc8>)
 8000e7c:	f043 0304 	orr.w	r3, r3, #4
 8000e80:	6313      	str	r3, [r2, #48]	; 0x30
 8000e82:	4b25      	ldr	r3, [pc, #148]	; (8000f18 <HAL_I2C_MspInit+0xc8>)
 8000e84:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000e86:	f003 0304 	and.w	r3, r3, #4
 8000e8a:	613b      	str	r3, [r7, #16]
 8000e8c:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000e8e:	2300      	movs	r3, #0
 8000e90:	60fb      	str	r3, [r7, #12]
 8000e92:	4b21      	ldr	r3, [pc, #132]	; (8000f18 <HAL_I2C_MspInit+0xc8>)
 8000e94:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000e96:	4a20      	ldr	r2, [pc, #128]	; (8000f18 <HAL_I2C_MspInit+0xc8>)
 8000e98:	f043 0301 	orr.w	r3, r3, #1
 8000e9c:	6313      	str	r3, [r2, #48]	; 0x30
 8000e9e:	4b1e      	ldr	r3, [pc, #120]	; (8000f18 <HAL_I2C_MspInit+0xc8>)
 8000ea0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000ea2:	f003 0301 	and.w	r3, r3, #1
 8000ea6:	60fb      	str	r3, [r7, #12]
 8000ea8:	68fb      	ldr	r3, [r7, #12]
    /**I2C3 GPIO Configuration
    PC9     ------> I2C3_SDA
    PA8     ------> I2C3_SCL
    */
    GPIO_InitStruct.Pin = I2C3_SDA_Pin;
 8000eaa:	f44f 7300 	mov.w	r3, #512	; 0x200
 8000eae:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8000eb0:	2312      	movs	r3, #18
 8000eb2:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 8000eb4:	2301      	movs	r3, #1
 8000eb6:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000eb8:	2300      	movs	r3, #0
 8000eba:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C3;
 8000ebc:	2304      	movs	r3, #4
 8000ebe:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(I2C3_SDA_GPIO_Port, &GPIO_InitStruct);
 8000ec0:	f107 0314 	add.w	r3, r7, #20
 8000ec4:	4619      	mov	r1, r3
 8000ec6:	4815      	ldr	r0, [pc, #84]	; (8000f1c <HAL_I2C_MspInit+0xcc>)
 8000ec8:	f001 f90e 	bl	80020e8 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = I2C3_SCL_Pin;
 8000ecc:	f44f 7380 	mov.w	r3, #256	; 0x100
 8000ed0:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8000ed2:	2312      	movs	r3, #18
 8000ed4:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 8000ed6:	2301      	movs	r3, #1
 8000ed8:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000eda:	2300      	movs	r3, #0
 8000edc:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C3;
 8000ede:	2304      	movs	r3, #4
 8000ee0:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(I2C3_SCL_GPIO_Port, &GPIO_InitStruct);
 8000ee2:	f107 0314 	add.w	r3, r7, #20
 8000ee6:	4619      	mov	r1, r3
 8000ee8:	480d      	ldr	r0, [pc, #52]	; (8000f20 <HAL_I2C_MspInit+0xd0>)
 8000eea:	f001 f8fd 	bl	80020e8 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_I2C3_CLK_ENABLE();
 8000eee:	2300      	movs	r3, #0
 8000ef0:	60bb      	str	r3, [r7, #8]
 8000ef2:	4b09      	ldr	r3, [pc, #36]	; (8000f18 <HAL_I2C_MspInit+0xc8>)
 8000ef4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000ef6:	4a08      	ldr	r2, [pc, #32]	; (8000f18 <HAL_I2C_MspInit+0xc8>)
 8000ef8:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
 8000efc:	6413      	str	r3, [r2, #64]	; 0x40
 8000efe:	4b06      	ldr	r3, [pc, #24]	; (8000f18 <HAL_I2C_MspInit+0xc8>)
 8000f00:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000f02:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8000f06:	60bb      	str	r3, [r7, #8]
 8000f08:	68bb      	ldr	r3, [r7, #8]
  /* USER CODE BEGIN I2C3_MspInit 1 */

  /* USER CODE END I2C3_MspInit 1 */
  }

}
 8000f0a:	bf00      	nop
 8000f0c:	3728      	adds	r7, #40	; 0x28
 8000f0e:	46bd      	mov	sp, r7
 8000f10:	bd80      	pop	{r7, pc}
 8000f12:	bf00      	nop
 8000f14:	40005c00 	.word	0x40005c00
 8000f18:	40023800 	.word	0x40023800
 8000f1c:	40020800 	.word	0x40020800
 8000f20:	40020000 	.word	0x40020000

08000f24 <HAL_LTDC_MspInit>:
* This function configures the hardware resources used in this example
* @param hltdc: LTDC handle pointer
* @retval None
*/
void HAL_LTDC_MspInit(LTDC_HandleTypeDef* hltdc)
{
 8000f24:	b580      	push	{r7, lr}
 8000f26:	b09a      	sub	sp, #104	; 0x68
 8000f28:	af00      	add	r7, sp, #0
 8000f2a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000f2c:	f107 0354 	add.w	r3, r7, #84	; 0x54
 8000f30:	2200      	movs	r2, #0
 8000f32:	601a      	str	r2, [r3, #0]
 8000f34:	605a      	str	r2, [r3, #4]
 8000f36:	609a      	str	r2, [r3, #8]
 8000f38:	60da      	str	r2, [r3, #12]
 8000f3a:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8000f3c:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000f40:	2230      	movs	r2, #48	; 0x30
 8000f42:	2100      	movs	r1, #0
 8000f44:	4618      	mov	r0, r3
 8000f46:	f008 fcb5 	bl	80098b4 <memset>
  if(hltdc->Instance==LTDC)
 8000f4a:	687b      	ldr	r3, [r7, #4]
 8000f4c:	681b      	ldr	r3, [r3, #0]
 8000f4e:	4a85      	ldr	r2, [pc, #532]	; (8001164 <HAL_LTDC_MspInit+0x240>)
 8000f50:	4293      	cmp	r3, r2
 8000f52:	f040 8102 	bne.w	800115a <HAL_LTDC_MspInit+0x236>

  /* USER CODE END LTDC_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_LTDC;
 8000f56:	2308      	movs	r3, #8
 8000f58:	627b      	str	r3, [r7, #36]	; 0x24
    PeriphClkInitStruct.PLLSAI.PLLSAIN = 50;
 8000f5a:	2332      	movs	r3, #50	; 0x32
 8000f5c:	637b      	str	r3, [r7, #52]	; 0x34
    PeriphClkInitStruct.PLLSAI.PLLSAIR = 2;
 8000f5e:	2302      	movs	r3, #2
 8000f60:	63fb      	str	r3, [r7, #60]	; 0x3c
    PeriphClkInitStruct.PLLSAIDivR = RCC_PLLSAIDIVR_2;
 8000f62:	2300      	movs	r3, #0
 8000f64:	64bb      	str	r3, [r7, #72]	; 0x48
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8000f66:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000f6a:	4618      	mov	r0, r3
 8000f6c:	f003 fd9e 	bl	8004aac <HAL_RCCEx_PeriphCLKConfig>
 8000f70:	4603      	mov	r3, r0
 8000f72:	2b00      	cmp	r3, #0
 8000f74:	d001      	beq.n	8000f7a <HAL_LTDC_MspInit+0x56>
    {
      Error_Handler();
 8000f76:	f7ff feef 	bl	8000d58 <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_LTDC_CLK_ENABLE();
 8000f7a:	2300      	movs	r3, #0
 8000f7c:	623b      	str	r3, [r7, #32]
 8000f7e:	4b7a      	ldr	r3, [pc, #488]	; (8001168 <HAL_LTDC_MspInit+0x244>)
 8000f80:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000f82:	4a79      	ldr	r2, [pc, #484]	; (8001168 <HAL_LTDC_MspInit+0x244>)
 8000f84:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 8000f88:	6453      	str	r3, [r2, #68]	; 0x44
 8000f8a:	4b77      	ldr	r3, [pc, #476]	; (8001168 <HAL_LTDC_MspInit+0x244>)
 8000f8c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000f8e:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 8000f92:	623b      	str	r3, [r7, #32]
 8000f94:	6a3b      	ldr	r3, [r7, #32]

    __HAL_RCC_GPIOF_CLK_ENABLE();
 8000f96:	2300      	movs	r3, #0
 8000f98:	61fb      	str	r3, [r7, #28]
 8000f9a:	4b73      	ldr	r3, [pc, #460]	; (8001168 <HAL_LTDC_MspInit+0x244>)
 8000f9c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000f9e:	4a72      	ldr	r2, [pc, #456]	; (8001168 <HAL_LTDC_MspInit+0x244>)
 8000fa0:	f043 0320 	orr.w	r3, r3, #32
 8000fa4:	6313      	str	r3, [r2, #48]	; 0x30
 8000fa6:	4b70      	ldr	r3, [pc, #448]	; (8001168 <HAL_LTDC_MspInit+0x244>)
 8000fa8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000faa:	f003 0320 	and.w	r3, r3, #32
 8000fae:	61fb      	str	r3, [r7, #28]
 8000fb0:	69fb      	ldr	r3, [r7, #28]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000fb2:	2300      	movs	r3, #0
 8000fb4:	61bb      	str	r3, [r7, #24]
 8000fb6:	4b6c      	ldr	r3, [pc, #432]	; (8001168 <HAL_LTDC_MspInit+0x244>)
 8000fb8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000fba:	4a6b      	ldr	r2, [pc, #428]	; (8001168 <HAL_LTDC_MspInit+0x244>)
 8000fbc:	f043 0301 	orr.w	r3, r3, #1
 8000fc0:	6313      	str	r3, [r2, #48]	; 0x30
 8000fc2:	4b69      	ldr	r3, [pc, #420]	; (8001168 <HAL_LTDC_MspInit+0x244>)
 8000fc4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000fc6:	f003 0301 	and.w	r3, r3, #1
 8000fca:	61bb      	str	r3, [r7, #24]
 8000fcc:	69bb      	ldr	r3, [r7, #24]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8000fce:	2300      	movs	r3, #0
 8000fd0:	617b      	str	r3, [r7, #20]
 8000fd2:	4b65      	ldr	r3, [pc, #404]	; (8001168 <HAL_LTDC_MspInit+0x244>)
 8000fd4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000fd6:	4a64      	ldr	r2, [pc, #400]	; (8001168 <HAL_LTDC_MspInit+0x244>)
 8000fd8:	f043 0302 	orr.w	r3, r3, #2
 8000fdc:	6313      	str	r3, [r2, #48]	; 0x30
 8000fde:	4b62      	ldr	r3, [pc, #392]	; (8001168 <HAL_LTDC_MspInit+0x244>)
 8000fe0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000fe2:	f003 0302 	and.w	r3, r3, #2
 8000fe6:	617b      	str	r3, [r7, #20]
 8000fe8:	697b      	ldr	r3, [r7, #20]
    __HAL_RCC_GPIOG_CLK_ENABLE();
 8000fea:	2300      	movs	r3, #0
 8000fec:	613b      	str	r3, [r7, #16]
 8000fee:	4b5e      	ldr	r3, [pc, #376]	; (8001168 <HAL_LTDC_MspInit+0x244>)
 8000ff0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000ff2:	4a5d      	ldr	r2, [pc, #372]	; (8001168 <HAL_LTDC_MspInit+0x244>)
 8000ff4:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8000ff8:	6313      	str	r3, [r2, #48]	; 0x30
 8000ffa:	4b5b      	ldr	r3, [pc, #364]	; (8001168 <HAL_LTDC_MspInit+0x244>)
 8000ffc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000ffe:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8001002:	613b      	str	r3, [r7, #16]
 8001004:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOC_CLK_ENABLE();
 8001006:	2300      	movs	r3, #0
 8001008:	60fb      	str	r3, [r7, #12]
 800100a:	4b57      	ldr	r3, [pc, #348]	; (8001168 <HAL_LTDC_MspInit+0x244>)
 800100c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800100e:	4a56      	ldr	r2, [pc, #344]	; (8001168 <HAL_LTDC_MspInit+0x244>)
 8001010:	f043 0304 	orr.w	r3, r3, #4
 8001014:	6313      	str	r3, [r2, #48]	; 0x30
 8001016:	4b54      	ldr	r3, [pc, #336]	; (8001168 <HAL_LTDC_MspInit+0x244>)
 8001018:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800101a:	f003 0304 	and.w	r3, r3, #4
 800101e:	60fb      	str	r3, [r7, #12]
 8001020:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOD_CLK_ENABLE();
 8001022:	2300      	movs	r3, #0
 8001024:	60bb      	str	r3, [r7, #8]
 8001026:	4b50      	ldr	r3, [pc, #320]	; (8001168 <HAL_LTDC_MspInit+0x244>)
 8001028:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800102a:	4a4f      	ldr	r2, [pc, #316]	; (8001168 <HAL_LTDC_MspInit+0x244>)
 800102c:	f043 0308 	orr.w	r3, r3, #8
 8001030:	6313      	str	r3, [r2, #48]	; 0x30
 8001032:	4b4d      	ldr	r3, [pc, #308]	; (8001168 <HAL_LTDC_MspInit+0x244>)
 8001034:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001036:	f003 0308 	and.w	r3, r3, #8
 800103a:	60bb      	str	r3, [r7, #8]
 800103c:	68bb      	ldr	r3, [r7, #8]
    PG11     ------> LTDC_B3
    PG12     ------> LTDC_B4
    PB8     ------> LTDC_B6
    PB9     ------> LTDC_B7
    */
    GPIO_InitStruct.Pin = ENABLE_Pin;
 800103e:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8001042:	657b      	str	r3, [r7, #84]	; 0x54
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001044:	2302      	movs	r3, #2
 8001046:	65bb      	str	r3, [r7, #88]	; 0x58
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001048:	2300      	movs	r3, #0
 800104a:	65fb      	str	r3, [r7, #92]	; 0x5c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800104c:	2300      	movs	r3, #0
 800104e:	663b      	str	r3, [r7, #96]	; 0x60
    GPIO_InitStruct.Alternate = GPIO_AF14_LTDC;
 8001050:	230e      	movs	r3, #14
 8001052:	667b      	str	r3, [r7, #100]	; 0x64
    HAL_GPIO_Init(ENABLE_GPIO_Port, &GPIO_InitStruct);
 8001054:	f107 0354 	add.w	r3, r7, #84	; 0x54
 8001058:	4619      	mov	r1, r3
 800105a:	4844      	ldr	r0, [pc, #272]	; (800116c <HAL_LTDC_MspInit+0x248>)
 800105c:	f001 f844 	bl	80020e8 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = B5_Pin|VSYNC_Pin|G2_Pin|R4_Pin
 8001060:	f641 0358 	movw	r3, #6232	; 0x1858
 8001064:	657b      	str	r3, [r7, #84]	; 0x54
                          |R5_Pin;
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001066:	2302      	movs	r3, #2
 8001068:	65bb      	str	r3, [r7, #88]	; 0x58
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800106a:	2300      	movs	r3, #0
 800106c:	65fb      	str	r3, [r7, #92]	; 0x5c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800106e:	2300      	movs	r3, #0
 8001070:	663b      	str	r3, [r7, #96]	; 0x60
    GPIO_InitStruct.Alternate = GPIO_AF14_LTDC;
 8001072:	230e      	movs	r3, #14
 8001074:	667b      	str	r3, [r7, #100]	; 0x64
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001076:	f107 0354 	add.w	r3, r7, #84	; 0x54
 800107a:	4619      	mov	r1, r3
 800107c:	483c      	ldr	r0, [pc, #240]	; (8001170 <HAL_LTDC_MspInit+0x24c>)
 800107e:	f001 f833 	bl	80020e8 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = R3_Pin|R6_Pin;
 8001082:	2303      	movs	r3, #3
 8001084:	657b      	str	r3, [r7, #84]	; 0x54
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001086:	2302      	movs	r3, #2
 8001088:	65bb      	str	r3, [r7, #88]	; 0x58
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800108a:	2300      	movs	r3, #0
 800108c:	65fb      	str	r3, [r7, #92]	; 0x5c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800108e:	2300      	movs	r3, #0
 8001090:	663b      	str	r3, [r7, #96]	; 0x60
    GPIO_InitStruct.Alternate = GPIO_AF9_LTDC;
 8001092:	2309      	movs	r3, #9
 8001094:	667b      	str	r3, [r7, #100]	; 0x64
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001096:	f107 0354 	add.w	r3, r7, #84	; 0x54
 800109a:	4619      	mov	r1, r3
 800109c:	4835      	ldr	r0, [pc, #212]	; (8001174 <HAL_LTDC_MspInit+0x250>)
 800109e:	f001 f823 	bl	80020e8 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = G4_Pin|G5_Pin|B6_Pin|B7_Pin;
 80010a2:	f44f 6370 	mov.w	r3, #3840	; 0xf00
 80010a6:	657b      	str	r3, [r7, #84]	; 0x54
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80010a8:	2302      	movs	r3, #2
 80010aa:	65bb      	str	r3, [r7, #88]	; 0x58
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80010ac:	2300      	movs	r3, #0
 80010ae:	65fb      	str	r3, [r7, #92]	; 0x5c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80010b0:	2300      	movs	r3, #0
 80010b2:	663b      	str	r3, [r7, #96]	; 0x60
    GPIO_InitStruct.Alternate = GPIO_AF14_LTDC;
 80010b4:	230e      	movs	r3, #14
 80010b6:	667b      	str	r3, [r7, #100]	; 0x64
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80010b8:	f107 0354 	add.w	r3, r7, #84	; 0x54
 80010bc:	4619      	mov	r1, r3
 80010be:	482d      	ldr	r0, [pc, #180]	; (8001174 <HAL_LTDC_MspInit+0x250>)
 80010c0:	f001 f812 	bl	80020e8 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = R7_Pin|DOTCLK_Pin|B3_Pin;
 80010c4:	f44f 630c 	mov.w	r3, #2240	; 0x8c0
 80010c8:	657b      	str	r3, [r7, #84]	; 0x54
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80010ca:	2302      	movs	r3, #2
 80010cc:	65bb      	str	r3, [r7, #88]	; 0x58
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80010ce:	2300      	movs	r3, #0
 80010d0:	65fb      	str	r3, [r7, #92]	; 0x5c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80010d2:	2300      	movs	r3, #0
 80010d4:	663b      	str	r3, [r7, #96]	; 0x60
    GPIO_InitStruct.Alternate = GPIO_AF14_LTDC;
 80010d6:	230e      	movs	r3, #14
 80010d8:	667b      	str	r3, [r7, #100]	; 0x64
    HAL_GPIO_Init(GPIOG, &GPIO_InitStruct);
 80010da:	f107 0354 	add.w	r3, r7, #84	; 0x54
 80010de:	4619      	mov	r1, r3
 80010e0:	4825      	ldr	r0, [pc, #148]	; (8001178 <HAL_LTDC_MspInit+0x254>)
 80010e2:	f001 f801 	bl	80020e8 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = HSYNC_Pin|G6_Pin|R2_Pin;
 80010e6:	f44f 6398 	mov.w	r3, #1216	; 0x4c0
 80010ea:	657b      	str	r3, [r7, #84]	; 0x54
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80010ec:	2302      	movs	r3, #2
 80010ee:	65bb      	str	r3, [r7, #88]	; 0x58
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80010f0:	2300      	movs	r3, #0
 80010f2:	65fb      	str	r3, [r7, #92]	; 0x5c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80010f4:	2300      	movs	r3, #0
 80010f6:	663b      	str	r3, [r7, #96]	; 0x60
    GPIO_InitStruct.Alternate = GPIO_AF14_LTDC;
 80010f8:	230e      	movs	r3, #14
 80010fa:	667b      	str	r3, [r7, #100]	; 0x64
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 80010fc:	f107 0354 	add.w	r3, r7, #84	; 0x54
 8001100:	4619      	mov	r1, r3
 8001102:	481e      	ldr	r0, [pc, #120]	; (800117c <HAL_LTDC_MspInit+0x258>)
 8001104:	f000 fff0 	bl	80020e8 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = G7_Pin|B2_Pin;
 8001108:	2348      	movs	r3, #72	; 0x48
 800110a:	657b      	str	r3, [r7, #84]	; 0x54
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800110c:	2302      	movs	r3, #2
 800110e:	65bb      	str	r3, [r7, #88]	; 0x58
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001110:	2300      	movs	r3, #0
 8001112:	65fb      	str	r3, [r7, #92]	; 0x5c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001114:	2300      	movs	r3, #0
 8001116:	663b      	str	r3, [r7, #96]	; 0x60
    GPIO_InitStruct.Alternate = GPIO_AF14_LTDC;
 8001118:	230e      	movs	r3, #14
 800111a:	667b      	str	r3, [r7, #100]	; 0x64
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 800111c:	f107 0354 	add.w	r3, r7, #84	; 0x54
 8001120:	4619      	mov	r1, r3
 8001122:	4817      	ldr	r0, [pc, #92]	; (8001180 <HAL_LTDC_MspInit+0x25c>)
 8001124:	f000 ffe0 	bl	80020e8 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = G3_Pin|B4_Pin;
 8001128:	f44f 53a0 	mov.w	r3, #5120	; 0x1400
 800112c:	657b      	str	r3, [r7, #84]	; 0x54
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800112e:	2302      	movs	r3, #2
 8001130:	65bb      	str	r3, [r7, #88]	; 0x58
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001132:	2300      	movs	r3, #0
 8001134:	65fb      	str	r3, [r7, #92]	; 0x5c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001136:	2300      	movs	r3, #0
 8001138:	663b      	str	r3, [r7, #96]	; 0x60
    GPIO_InitStruct.Alternate = GPIO_AF9_LTDC;
 800113a:	2309      	movs	r3, #9
 800113c:	667b      	str	r3, [r7, #100]	; 0x64
    HAL_GPIO_Init(GPIOG, &GPIO_InitStruct);
 800113e:	f107 0354 	add.w	r3, r7, #84	; 0x54
 8001142:	4619      	mov	r1, r3
 8001144:	480c      	ldr	r0, [pc, #48]	; (8001178 <HAL_LTDC_MspInit+0x254>)
 8001146:	f000 ffcf 	bl	80020e8 <HAL_GPIO_Init>

    /* LTDC interrupt Init */
    HAL_NVIC_SetPriority(LTDC_IRQn, 5, 0);
 800114a:	2200      	movs	r2, #0
 800114c:	2105      	movs	r1, #5
 800114e:	2058      	movs	r0, #88	; 0x58
 8001150:	f000 fd98 	bl	8001c84 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(LTDC_IRQn);
 8001154:	2058      	movs	r0, #88	; 0x58
 8001156:	f000 fdb1 	bl	8001cbc <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN LTDC_MspInit 1 */

  /* USER CODE END LTDC_MspInit 1 */
  }

}
 800115a:	bf00      	nop
 800115c:	3768      	adds	r7, #104	; 0x68
 800115e:	46bd      	mov	sp, r7
 8001160:	bd80      	pop	{r7, pc}
 8001162:	bf00      	nop
 8001164:	40016800 	.word	0x40016800
 8001168:	40023800 	.word	0x40023800
 800116c:	40021400 	.word	0x40021400
 8001170:	40020000 	.word	0x40020000
 8001174:	40020400 	.word	0x40020400
 8001178:	40021800 	.word	0x40021800
 800117c:	40020800 	.word	0x40020800
 8001180:	40020c00 	.word	0x40020c00

08001184 <HAL_SPI_MspInit>:
* This function configures the hardware resources used in this example
* @param hspi: SPI handle pointer
* @retval None
*/
void HAL_SPI_MspInit(SPI_HandleTypeDef* hspi)
{
 8001184:	b580      	push	{r7, lr}
 8001186:	b08a      	sub	sp, #40	; 0x28
 8001188:	af00      	add	r7, sp, #0
 800118a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800118c:	f107 0314 	add.w	r3, r7, #20
 8001190:	2200      	movs	r2, #0
 8001192:	601a      	str	r2, [r3, #0]
 8001194:	605a      	str	r2, [r3, #4]
 8001196:	609a      	str	r2, [r3, #8]
 8001198:	60da      	str	r2, [r3, #12]
 800119a:	611a      	str	r2, [r3, #16]
  if(hspi->Instance==SPI5)
 800119c:	687b      	ldr	r3, [r7, #4]
 800119e:	681b      	ldr	r3, [r3, #0]
 80011a0:	4a19      	ldr	r2, [pc, #100]	; (8001208 <HAL_SPI_MspInit+0x84>)
 80011a2:	4293      	cmp	r3, r2
 80011a4:	d12c      	bne.n	8001200 <HAL_SPI_MspInit+0x7c>
  {
  /* USER CODE BEGIN SPI5_MspInit 0 */

  /* USER CODE END SPI5_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_SPI5_CLK_ENABLE();
 80011a6:	2300      	movs	r3, #0
 80011a8:	613b      	str	r3, [r7, #16]
 80011aa:	4b18      	ldr	r3, [pc, #96]	; (800120c <HAL_SPI_MspInit+0x88>)
 80011ac:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80011ae:	4a17      	ldr	r2, [pc, #92]	; (800120c <HAL_SPI_MspInit+0x88>)
 80011b0:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 80011b4:	6453      	str	r3, [r2, #68]	; 0x44
 80011b6:	4b15      	ldr	r3, [pc, #84]	; (800120c <HAL_SPI_MspInit+0x88>)
 80011b8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80011ba:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 80011be:	613b      	str	r3, [r7, #16]
 80011c0:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOF_CLK_ENABLE();
 80011c2:	2300      	movs	r3, #0
 80011c4:	60fb      	str	r3, [r7, #12]
 80011c6:	4b11      	ldr	r3, [pc, #68]	; (800120c <HAL_SPI_MspInit+0x88>)
 80011c8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80011ca:	4a10      	ldr	r2, [pc, #64]	; (800120c <HAL_SPI_MspInit+0x88>)
 80011cc:	f043 0320 	orr.w	r3, r3, #32
 80011d0:	6313      	str	r3, [r2, #48]	; 0x30
 80011d2:	4b0e      	ldr	r3, [pc, #56]	; (800120c <HAL_SPI_MspInit+0x88>)
 80011d4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80011d6:	f003 0320 	and.w	r3, r3, #32
 80011da:	60fb      	str	r3, [r7, #12]
 80011dc:	68fb      	ldr	r3, [r7, #12]
    /**SPI5 GPIO Configuration
    PF7     ------> SPI5_SCK
    PF8     ------> SPI5_MISO
    PF9     ------> SPI5_MOSI
    */
    GPIO_InitStruct.Pin = SPI5_SCK_Pin|SPI5_MISO_Pin|SPI5_MOSI_Pin;
 80011de:	f44f 7360 	mov.w	r3, #896	; 0x380
 80011e2:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80011e4:	2302      	movs	r3, #2
 80011e6:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80011e8:	2300      	movs	r3, #0
 80011ea:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80011ec:	2300      	movs	r3, #0
 80011ee:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI5;
 80011f0:	2305      	movs	r3, #5
 80011f2:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOF, &GPIO_InitStruct);
 80011f4:	f107 0314 	add.w	r3, r7, #20
 80011f8:	4619      	mov	r1, r3
 80011fa:	4805      	ldr	r0, [pc, #20]	; (8001210 <HAL_SPI_MspInit+0x8c>)
 80011fc:	f000 ff74 	bl	80020e8 <HAL_GPIO_Init>
  /* USER CODE BEGIN SPI5_MspInit 1 */

  /* USER CODE END SPI5_MspInit 1 */
  }

}
 8001200:	bf00      	nop
 8001202:	3728      	adds	r7, #40	; 0x28
 8001204:	46bd      	mov	sp, r7
 8001206:	bd80      	pop	{r7, pc}
 8001208:	40015000 	.word	0x40015000
 800120c:	40023800 	.word	0x40023800
 8001210:	40021400 	.word	0x40021400

08001214 <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 8001214:	b480      	push	{r7}
 8001216:	b085      	sub	sp, #20
 8001218:	af00      	add	r7, sp, #0
 800121a:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM1)
 800121c:	687b      	ldr	r3, [r7, #4]
 800121e:	681b      	ldr	r3, [r3, #0]
 8001220:	4a0b      	ldr	r2, [pc, #44]	; (8001250 <HAL_TIM_Base_MspInit+0x3c>)
 8001222:	4293      	cmp	r3, r2
 8001224:	d10d      	bne.n	8001242 <HAL_TIM_Base_MspInit+0x2e>
  {
  /* USER CODE BEGIN TIM1_MspInit 0 */

  /* USER CODE END TIM1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM1_CLK_ENABLE();
 8001226:	2300      	movs	r3, #0
 8001228:	60fb      	str	r3, [r7, #12]
 800122a:	4b0a      	ldr	r3, [pc, #40]	; (8001254 <HAL_TIM_Base_MspInit+0x40>)
 800122c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800122e:	4a09      	ldr	r2, [pc, #36]	; (8001254 <HAL_TIM_Base_MspInit+0x40>)
 8001230:	f043 0301 	orr.w	r3, r3, #1
 8001234:	6453      	str	r3, [r2, #68]	; 0x44
 8001236:	4b07      	ldr	r3, [pc, #28]	; (8001254 <HAL_TIM_Base_MspInit+0x40>)
 8001238:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800123a:	f003 0301 	and.w	r3, r3, #1
 800123e:	60fb      	str	r3, [r7, #12]
 8001240:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN TIM1_MspInit 1 */

  /* USER CODE END TIM1_MspInit 1 */
  }

}
 8001242:	bf00      	nop
 8001244:	3714      	adds	r7, #20
 8001246:	46bd      	mov	sp, r7
 8001248:	f85d 7b04 	ldr.w	r7, [sp], #4
 800124c:	4770      	bx	lr
 800124e:	bf00      	nop
 8001250:	40010000 	.word	0x40010000
 8001254:	40023800 	.word	0x40023800

08001258 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8001258:	b580      	push	{r7, lr}
 800125a:	b08a      	sub	sp, #40	; 0x28
 800125c:	af00      	add	r7, sp, #0
 800125e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001260:	f107 0314 	add.w	r3, r7, #20
 8001264:	2200      	movs	r2, #0
 8001266:	601a      	str	r2, [r3, #0]
 8001268:	605a      	str	r2, [r3, #4]
 800126a:	609a      	str	r2, [r3, #8]
 800126c:	60da      	str	r2, [r3, #12]
 800126e:	611a      	str	r2, [r3, #16]
  if(huart->Instance==USART1)
 8001270:	687b      	ldr	r3, [r7, #4]
 8001272:	681b      	ldr	r3, [r3, #0]
 8001274:	4a19      	ldr	r2, [pc, #100]	; (80012dc <HAL_UART_MspInit+0x84>)
 8001276:	4293      	cmp	r3, r2
 8001278:	d12c      	bne.n	80012d4 <HAL_UART_MspInit+0x7c>
  {
  /* USER CODE BEGIN USART1_MspInit 0 */

  /* USER CODE END USART1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART1_CLK_ENABLE();
 800127a:	2300      	movs	r3, #0
 800127c:	613b      	str	r3, [r7, #16]
 800127e:	4b18      	ldr	r3, [pc, #96]	; (80012e0 <HAL_UART_MspInit+0x88>)
 8001280:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001282:	4a17      	ldr	r2, [pc, #92]	; (80012e0 <HAL_UART_MspInit+0x88>)
 8001284:	f043 0310 	orr.w	r3, r3, #16
 8001288:	6453      	str	r3, [r2, #68]	; 0x44
 800128a:	4b15      	ldr	r3, [pc, #84]	; (80012e0 <HAL_UART_MspInit+0x88>)
 800128c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800128e:	f003 0310 	and.w	r3, r3, #16
 8001292:	613b      	str	r3, [r7, #16]
 8001294:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001296:	2300      	movs	r3, #0
 8001298:	60fb      	str	r3, [r7, #12]
 800129a:	4b11      	ldr	r3, [pc, #68]	; (80012e0 <HAL_UART_MspInit+0x88>)
 800129c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800129e:	4a10      	ldr	r2, [pc, #64]	; (80012e0 <HAL_UART_MspInit+0x88>)
 80012a0:	f043 0301 	orr.w	r3, r3, #1
 80012a4:	6313      	str	r3, [r2, #48]	; 0x30
 80012a6:	4b0e      	ldr	r3, [pc, #56]	; (80012e0 <HAL_UART_MspInit+0x88>)
 80012a8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80012aa:	f003 0301 	and.w	r3, r3, #1
 80012ae:	60fb      	str	r3, [r7, #12]
 80012b0:	68fb      	ldr	r3, [r7, #12]
    /**USART1 GPIO Configuration
    PA9     ------> USART1_TX
    PA10     ------> USART1_RX
    */
    GPIO_InitStruct.Pin = STLINK_RX_Pin|STLINK_TX_Pin;
 80012b2:	f44f 63c0 	mov.w	r3, #1536	; 0x600
 80012b6:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80012b8:	2302      	movs	r3, #2
 80012ba:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80012bc:	2300      	movs	r3, #0
 80012be:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80012c0:	2303      	movs	r3, #3
 80012c2:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF7_USART1;
 80012c4:	2307      	movs	r3, #7
 80012c6:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80012c8:	f107 0314 	add.w	r3, r7, #20
 80012cc:	4619      	mov	r1, r3
 80012ce:	4805      	ldr	r0, [pc, #20]	; (80012e4 <HAL_UART_MspInit+0x8c>)
 80012d0:	f000 ff0a 	bl	80020e8 <HAL_GPIO_Init>
  /* USER CODE BEGIN USART1_MspInit 1 */

  /* USER CODE END USART1_MspInit 1 */
  }

}
 80012d4:	bf00      	nop
 80012d6:	3728      	adds	r7, #40	; 0x28
 80012d8:	46bd      	mov	sp, r7
 80012da:	bd80      	pop	{r7, pc}
 80012dc:	40011000 	.word	0x40011000
 80012e0:	40023800 	.word	0x40023800
 80012e4:	40020000 	.word	0x40020000

080012e8 <HAL_FMC_MspInit>:

}

static uint32_t FMC_Initialized = 0;

static void HAL_FMC_MspInit(void){
 80012e8:	b580      	push	{r7, lr}
 80012ea:	b086      	sub	sp, #24
 80012ec:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN FMC_MspInit 0 */

  /* USER CODE END FMC_MspInit 0 */
  GPIO_InitTypeDef GPIO_InitStruct ={0};
 80012ee:	1d3b      	adds	r3, r7, #4
 80012f0:	2200      	movs	r2, #0
 80012f2:	601a      	str	r2, [r3, #0]
 80012f4:	605a      	str	r2, [r3, #4]
 80012f6:	609a      	str	r2, [r3, #8]
 80012f8:	60da      	str	r2, [r3, #12]
 80012fa:	611a      	str	r2, [r3, #16]
  if (FMC_Initialized) {
 80012fc:	4b3b      	ldr	r3, [pc, #236]	; (80013ec <HAL_FMC_MspInit+0x104>)
 80012fe:	681b      	ldr	r3, [r3, #0]
 8001300:	2b00      	cmp	r3, #0
 8001302:	d16f      	bne.n	80013e4 <HAL_FMC_MspInit+0xfc>
    return;
  }
  FMC_Initialized = 1;
 8001304:	4b39      	ldr	r3, [pc, #228]	; (80013ec <HAL_FMC_MspInit+0x104>)
 8001306:	2201      	movs	r2, #1
 8001308:	601a      	str	r2, [r3, #0]

  /* Peripheral clock enable */
  __HAL_RCC_FMC_CLK_ENABLE();
 800130a:	2300      	movs	r3, #0
 800130c:	603b      	str	r3, [r7, #0]
 800130e:	4b38      	ldr	r3, [pc, #224]	; (80013f0 <HAL_FMC_MspInit+0x108>)
 8001310:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8001312:	4a37      	ldr	r2, [pc, #220]	; (80013f0 <HAL_FMC_MspInit+0x108>)
 8001314:	f043 0301 	orr.w	r3, r3, #1
 8001318:	6393      	str	r3, [r2, #56]	; 0x38
 800131a:	4b35      	ldr	r3, [pc, #212]	; (80013f0 <HAL_FMC_MspInit+0x108>)
 800131c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800131e:	f003 0301 	and.w	r3, r3, #1
 8001322:	603b      	str	r3, [r7, #0]
 8001324:	683b      	ldr	r3, [r7, #0]
  PB5   ------> FMC_SDCKE1
  PB6   ------> FMC_SDNE1
  PE0   ------> FMC_NBL0
  PE1   ------> FMC_NBL1
  */
  GPIO_InitStruct.Pin = A0_Pin|A1_Pin|A2_Pin|A3_Pin
 8001326:	f64f 033f 	movw	r3, #63551	; 0xf83f
 800132a:	607b      	str	r3, [r7, #4]
                          |A4_Pin|A5_Pin|SDNRAS_Pin|A6_Pin
                          |A7_Pin|A8_Pin|A9_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800132c:	2302      	movs	r3, #2
 800132e:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001330:	2300      	movs	r3, #0
 8001332:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001334:	2303      	movs	r3, #3
 8001336:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Alternate = GPIO_AF12_FMC;
 8001338:	230c      	movs	r3, #12
 800133a:	617b      	str	r3, [r7, #20]
  HAL_GPIO_Init(GPIOF, &GPIO_InitStruct);
 800133c:	1d3b      	adds	r3, r7, #4
 800133e:	4619      	mov	r1, r3
 8001340:	482c      	ldr	r0, [pc, #176]	; (80013f4 <HAL_FMC_MspInit+0x10c>)
 8001342:	f000 fed1 	bl	80020e8 <HAL_GPIO_Init>

  GPIO_InitStruct.Pin = SDNWE_Pin;
 8001346:	2301      	movs	r3, #1
 8001348:	607b      	str	r3, [r7, #4]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800134a:	2302      	movs	r3, #2
 800134c:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800134e:	2300      	movs	r3, #0
 8001350:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001352:	2303      	movs	r3, #3
 8001354:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Alternate = GPIO_AF12_FMC;
 8001356:	230c      	movs	r3, #12
 8001358:	617b      	str	r3, [r7, #20]
  HAL_GPIO_Init(SDNWE_GPIO_Port, &GPIO_InitStruct);
 800135a:	1d3b      	adds	r3, r7, #4
 800135c:	4619      	mov	r1, r3
 800135e:	4826      	ldr	r0, [pc, #152]	; (80013f8 <HAL_FMC_MspInit+0x110>)
 8001360:	f000 fec2 	bl	80020e8 <HAL_GPIO_Init>

  GPIO_InitStruct.Pin = A10_Pin|A11_Pin|BA0_Pin|BA1_Pin
 8001364:	f248 1333 	movw	r3, #33075	; 0x8133
 8001368:	607b      	str	r3, [r7, #4]
                          |SDCLK_Pin|SDNCAS_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800136a:	2302      	movs	r3, #2
 800136c:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800136e:	2300      	movs	r3, #0
 8001370:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001372:	2303      	movs	r3, #3
 8001374:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Alternate = GPIO_AF12_FMC;
 8001376:	230c      	movs	r3, #12
 8001378:	617b      	str	r3, [r7, #20]
  HAL_GPIO_Init(GPIOG, &GPIO_InitStruct);
 800137a:	1d3b      	adds	r3, r7, #4
 800137c:	4619      	mov	r1, r3
 800137e:	481f      	ldr	r0, [pc, #124]	; (80013fc <HAL_FMC_MspInit+0x114>)
 8001380:	f000 feb2 	bl	80020e8 <HAL_GPIO_Init>

  GPIO_InitStruct.Pin = D4_Pin|D5_Pin|D6_Pin|D7_Pin
 8001384:	f64f 7383 	movw	r3, #65411	; 0xff83
 8001388:	607b      	str	r3, [r7, #4]
                          |D8_Pin|D9_Pin|D10_Pin|D11_Pin
                          |D12_Pin|NBL0_Pin|NBL1_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800138a:	2302      	movs	r3, #2
 800138c:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800138e:	2300      	movs	r3, #0
 8001390:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001392:	2303      	movs	r3, #3
 8001394:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Alternate = GPIO_AF12_FMC;
 8001396:	230c      	movs	r3, #12
 8001398:	617b      	str	r3, [r7, #20]
  HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 800139a:	1d3b      	adds	r3, r7, #4
 800139c:	4619      	mov	r1, r3
 800139e:	4818      	ldr	r0, [pc, #96]	; (8001400 <HAL_FMC_MspInit+0x118>)
 80013a0:	f000 fea2 	bl	80020e8 <HAL_GPIO_Init>

  GPIO_InitStruct.Pin = D13_Pin|D14_Pin|D15_Pin|D0_Pin
 80013a4:	f24c 7303 	movw	r3, #50947	; 0xc703
 80013a8:	607b      	str	r3, [r7, #4]
                          |D1_Pin|D2_Pin|D3_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80013aa:	2302      	movs	r3, #2
 80013ac:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80013ae:	2300      	movs	r3, #0
 80013b0:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80013b2:	2303      	movs	r3, #3
 80013b4:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Alternate = GPIO_AF12_FMC;
 80013b6:	230c      	movs	r3, #12
 80013b8:	617b      	str	r3, [r7, #20]
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 80013ba:	1d3b      	adds	r3, r7, #4
 80013bc:	4619      	mov	r1, r3
 80013be:	4811      	ldr	r0, [pc, #68]	; (8001404 <HAL_FMC_MspInit+0x11c>)
 80013c0:	f000 fe92 	bl	80020e8 <HAL_GPIO_Init>

  GPIO_InitStruct.Pin = SDCKE1_Pin|SDNE1_Pin;
 80013c4:	2360      	movs	r3, #96	; 0x60
 80013c6:	607b      	str	r3, [r7, #4]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80013c8:	2302      	movs	r3, #2
 80013ca:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80013cc:	2300      	movs	r3, #0
 80013ce:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80013d0:	2303      	movs	r3, #3
 80013d2:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Alternate = GPIO_AF12_FMC;
 80013d4:	230c      	movs	r3, #12
 80013d6:	617b      	str	r3, [r7, #20]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80013d8:	1d3b      	adds	r3, r7, #4
 80013da:	4619      	mov	r1, r3
 80013dc:	480a      	ldr	r0, [pc, #40]	; (8001408 <HAL_FMC_MspInit+0x120>)
 80013de:	f000 fe83 	bl	80020e8 <HAL_GPIO_Init>
 80013e2:	e000      	b.n	80013e6 <HAL_FMC_MspInit+0xfe>
    return;
 80013e4:	bf00      	nop

  /* USER CODE BEGIN FMC_MspInit 1 */

  /* USER CODE END FMC_MspInit 1 */
}
 80013e6:	3718      	adds	r7, #24
 80013e8:	46bd      	mov	sp, r7
 80013ea:	bd80      	pop	{r7, pc}
 80013ec:	200002ec 	.word	0x200002ec
 80013f0:	40023800 	.word	0x40023800
 80013f4:	40021400 	.word	0x40021400
 80013f8:	40020800 	.word	0x40020800
 80013fc:	40021800 	.word	0x40021800
 8001400:	40021000 	.word	0x40021000
 8001404:	40020c00 	.word	0x40020c00
 8001408:	40020400 	.word	0x40020400

0800140c <HAL_SDRAM_MspInit>:

void HAL_SDRAM_MspInit(SDRAM_HandleTypeDef* hsdram){
 800140c:	b580      	push	{r7, lr}
 800140e:	b082      	sub	sp, #8
 8001410:	af00      	add	r7, sp, #0
 8001412:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN SDRAM_MspInit 0 */

  /* USER CODE END SDRAM_MspInit 0 */
  HAL_FMC_MspInit();
 8001414:	f7ff ff68 	bl	80012e8 <HAL_FMC_MspInit>
  /* USER CODE BEGIN SDRAM_MspInit 1 */

  /* USER CODE END SDRAM_MspInit 1 */
}
 8001418:	bf00      	nop
 800141a:	3708      	adds	r7, #8
 800141c:	46bd      	mov	sp, r7
 800141e:	bd80      	pop	{r7, pc}

08001420 <HAL_InitTick>:
  *         reset by HAL_Init() or at any time when clock is configured, by HAL_RCC_ClockConfig().
  * @param  TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8001420:	b580      	push	{r7, lr}
 8001422:	b08e      	sub	sp, #56	; 0x38
 8001424:	af00      	add	r7, sp, #0
 8001426:	6078      	str	r0, [r7, #4]
  RCC_ClkInitTypeDef    clkconfig;
  uint32_t              uwTimclock, uwAPB1Prescaler = 0U;
 8001428:	2300      	movs	r3, #0
 800142a:	62fb      	str	r3, [r7, #44]	; 0x2c

  uint32_t              uwPrescalerValue = 0U;
 800142c:	2300      	movs	r3, #0
 800142e:	62bb      	str	r3, [r7, #40]	; 0x28
  uint32_t              pFLatency;
  HAL_StatusTypeDef     status;

  /* Enable TIM6 clock */
  __HAL_RCC_TIM6_CLK_ENABLE();
 8001430:	2300      	movs	r3, #0
 8001432:	60fb      	str	r3, [r7, #12]
 8001434:	4b33      	ldr	r3, [pc, #204]	; (8001504 <HAL_InitTick+0xe4>)
 8001436:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001438:	4a32      	ldr	r2, [pc, #200]	; (8001504 <HAL_InitTick+0xe4>)
 800143a:	f043 0310 	orr.w	r3, r3, #16
 800143e:	6413      	str	r3, [r2, #64]	; 0x40
 8001440:	4b30      	ldr	r3, [pc, #192]	; (8001504 <HAL_InitTick+0xe4>)
 8001442:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001444:	f003 0310 	and.w	r3, r3, #16
 8001448:	60fb      	str	r3, [r7, #12]
 800144a:	68fb      	ldr	r3, [r7, #12]

  /* Get clock configuration */
  HAL_RCC_GetClockConfig(&clkconfig, &pFLatency);
 800144c:	f107 0210 	add.w	r2, r7, #16
 8001450:	f107 0314 	add.w	r3, r7, #20
 8001454:	4611      	mov	r1, r2
 8001456:	4618      	mov	r0, r3
 8001458:	f003 faf6 	bl	8004a48 <HAL_RCC_GetClockConfig>

  /* Get APB1 prescaler */
  uwAPB1Prescaler = clkconfig.APB1CLKDivider;
 800145c:	6a3b      	ldr	r3, [r7, #32]
 800145e:	62fb      	str	r3, [r7, #44]	; 0x2c
  /* Compute TIM6 clock */
  if (uwAPB1Prescaler == RCC_HCLK_DIV1)
 8001460:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8001462:	2b00      	cmp	r3, #0
 8001464:	d103      	bne.n	800146e <HAL_InitTick+0x4e>
  {
    uwTimclock = HAL_RCC_GetPCLK1Freq();
 8001466:	f003 fac7 	bl	80049f8 <HAL_RCC_GetPCLK1Freq>
 800146a:	6378      	str	r0, [r7, #52]	; 0x34
 800146c:	e004      	b.n	8001478 <HAL_InitTick+0x58>
  }
  else
  {
    uwTimclock = 2UL * HAL_RCC_GetPCLK1Freq();
 800146e:	f003 fac3 	bl	80049f8 <HAL_RCC_GetPCLK1Freq>
 8001472:	4603      	mov	r3, r0
 8001474:	005b      	lsls	r3, r3, #1
 8001476:	637b      	str	r3, [r7, #52]	; 0x34
  }

  /* Compute the prescaler value to have TIM6 counter clock equal to 1MHz */
  uwPrescalerValue = (uint32_t) ((uwTimclock / 1000000U) - 1U);
 8001478:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800147a:	4a23      	ldr	r2, [pc, #140]	; (8001508 <HAL_InitTick+0xe8>)
 800147c:	fba2 2303 	umull	r2, r3, r2, r3
 8001480:	0c9b      	lsrs	r3, r3, #18
 8001482:	3b01      	subs	r3, #1
 8001484:	62bb      	str	r3, [r7, #40]	; 0x28

  /* Initialize TIM6 */
  htim6.Instance = TIM6;
 8001486:	4b21      	ldr	r3, [pc, #132]	; (800150c <HAL_InitTick+0xec>)
 8001488:	4a21      	ldr	r2, [pc, #132]	; (8001510 <HAL_InitTick+0xf0>)
 800148a:	601a      	str	r2, [r3, #0]
  + Period = [(TIM6CLK/1000) - 1]. to have a (1/1000) s time base.
  + Prescaler = (uwTimclock/1000000 - 1) to have a 1MHz counter clock.
  + ClockDivision = 0
  + Counter direction = Up
  */
  htim6.Init.Period = (1000000U / 1000U) - 1U;
 800148c:	4b1f      	ldr	r3, [pc, #124]	; (800150c <HAL_InitTick+0xec>)
 800148e:	f240 32e7 	movw	r2, #999	; 0x3e7
 8001492:	60da      	str	r2, [r3, #12]
  htim6.Init.Prescaler = uwPrescalerValue;
 8001494:	4a1d      	ldr	r2, [pc, #116]	; (800150c <HAL_InitTick+0xec>)
 8001496:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8001498:	6053      	str	r3, [r2, #4]
  htim6.Init.ClockDivision = 0;
 800149a:	4b1c      	ldr	r3, [pc, #112]	; (800150c <HAL_InitTick+0xec>)
 800149c:	2200      	movs	r2, #0
 800149e:	611a      	str	r2, [r3, #16]
  htim6.Init.CounterMode = TIM_COUNTERMODE_UP;
 80014a0:	4b1a      	ldr	r3, [pc, #104]	; (800150c <HAL_InitTick+0xec>)
 80014a2:	2200      	movs	r2, #0
 80014a4:	609a      	str	r2, [r3, #8]
  htim6.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 80014a6:	4b19      	ldr	r3, [pc, #100]	; (800150c <HAL_InitTick+0xec>)
 80014a8:	2200      	movs	r2, #0
 80014aa:	619a      	str	r2, [r3, #24]

  status = HAL_TIM_Base_Init(&htim6);
 80014ac:	4817      	ldr	r0, [pc, #92]	; (800150c <HAL_InitTick+0xec>)
 80014ae:	f003 fd7a 	bl	8004fa6 <HAL_TIM_Base_Init>
 80014b2:	4603      	mov	r3, r0
 80014b4:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
  if (status == HAL_OK)
 80014b8:	f897 3033 	ldrb.w	r3, [r7, #51]	; 0x33
 80014bc:	2b00      	cmp	r3, #0
 80014be:	d11b      	bne.n	80014f8 <HAL_InitTick+0xd8>
  {
    /* Start the TIM time Base generation in interrupt mode */
    status = HAL_TIM_Base_Start_IT(&htim6);
 80014c0:	4812      	ldr	r0, [pc, #72]	; (800150c <HAL_InitTick+0xec>)
 80014c2:	f003 fdbf 	bl	8005044 <HAL_TIM_Base_Start_IT>
 80014c6:	4603      	mov	r3, r0
 80014c8:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
    if (status == HAL_OK)
 80014cc:	f897 3033 	ldrb.w	r3, [r7, #51]	; 0x33
 80014d0:	2b00      	cmp	r3, #0
 80014d2:	d111      	bne.n	80014f8 <HAL_InitTick+0xd8>
    {
    /* Enable the TIM6 global Interrupt */
        HAL_NVIC_EnableIRQ(TIM6_DAC_IRQn);
 80014d4:	2036      	movs	r0, #54	; 0x36
 80014d6:	f000 fbf1 	bl	8001cbc <HAL_NVIC_EnableIRQ>
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 80014da:	687b      	ldr	r3, [r7, #4]
 80014dc:	2b0f      	cmp	r3, #15
 80014de:	d808      	bhi.n	80014f2 <HAL_InitTick+0xd2>
      {
        /* Configure the TIM IRQ priority */
        HAL_NVIC_SetPriority(TIM6_DAC_IRQn, TickPriority, 0U);
 80014e0:	2200      	movs	r2, #0
 80014e2:	6879      	ldr	r1, [r7, #4]
 80014e4:	2036      	movs	r0, #54	; 0x36
 80014e6:	f000 fbcd 	bl	8001c84 <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 80014ea:	4a0a      	ldr	r2, [pc, #40]	; (8001514 <HAL_InitTick+0xf4>)
 80014ec:	687b      	ldr	r3, [r7, #4]
 80014ee:	6013      	str	r3, [r2, #0]
 80014f0:	e002      	b.n	80014f8 <HAL_InitTick+0xd8>
      }
      else
      {
        status = HAL_ERROR;
 80014f2:	2301      	movs	r3, #1
 80014f4:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
      }
    }
  }

 /* Return function status */
  return status;
 80014f8:	f897 3033 	ldrb.w	r3, [r7, #51]	; 0x33
}
 80014fc:	4618      	mov	r0, r3
 80014fe:	3738      	adds	r7, #56	; 0x38
 8001500:	46bd      	mov	sp, r7
 8001502:	bd80      	pop	{r7, pc}
 8001504:	40023800 	.word	0x40023800
 8001508:	431bde83 	.word	0x431bde83
 800150c:	200002f0 	.word	0x200002f0
 8001510:	40001000 	.word	0x40001000
 8001514:	20000004 	.word	0x20000004

08001518 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8001518:	b480      	push	{r7}
 800151a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 800151c:	e7fe      	b.n	800151c <NMI_Handler+0x4>

0800151e <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 800151e:	b480      	push	{r7}
 8001520:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8001522:	e7fe      	b.n	8001522 <HardFault_Handler+0x4>

08001524 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8001524:	b480      	push	{r7}
 8001526:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8001528:	e7fe      	b.n	8001528 <MemManage_Handler+0x4>

0800152a <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 800152a:	b480      	push	{r7}
 800152c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 800152e:	e7fe      	b.n	800152e <BusFault_Handler+0x4>

08001530 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8001530:	b480      	push	{r7}
 8001532:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8001534:	e7fe      	b.n	8001534 <UsageFault_Handler+0x4>

08001536 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8001536:	b480      	push	{r7}
 8001538:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 800153a:	bf00      	nop
 800153c:	46bd      	mov	sp, r7
 800153e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001542:	4770      	bx	lr

08001544 <TIM6_DAC_IRQHandler>:

/**
  * @brief This function handles TIM6 global interrupt, DAC1 and DAC2 underrun error interrupts.
  */
void TIM6_DAC_IRQHandler(void)
{
 8001544:	b580      	push	{r7, lr}
 8001546:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM6_DAC_IRQn 0 */

  /* USER CODE END TIM6_DAC_IRQn 0 */
  HAL_TIM_IRQHandler(&htim6);
 8001548:	4802      	ldr	r0, [pc, #8]	; (8001554 <TIM6_DAC_IRQHandler+0x10>)
 800154a:	f003 fdeb 	bl	8005124 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM6_DAC_IRQn 1 */

  /* USER CODE END TIM6_DAC_IRQn 1 */
}
 800154e:	bf00      	nop
 8001550:	bd80      	pop	{r7, pc}
 8001552:	bf00      	nop
 8001554:	200002f0 	.word	0x200002f0

08001558 <OTG_HS_IRQHandler>:

/**
  * @brief This function handles USB On The Go HS global interrupt.
  */
void OTG_HS_IRQHandler(void)
{
 8001558:	b580      	push	{r7, lr}
 800155a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN OTG_HS_IRQn 0 */

  /* USER CODE END OTG_HS_IRQn 0 */
  HAL_HCD_IRQHandler(&hhcd_USB_OTG_HS);
 800155c:	4802      	ldr	r0, [pc, #8]	; (8001568 <OTG_HS_IRQHandler+0x10>)
 800155e:	f000 ff88 	bl	8002472 <HAL_HCD_IRQHandler>
  /* USER CODE BEGIN OTG_HS_IRQn 1 */

  /* USER CODE END OTG_HS_IRQn 1 */
}
 8001562:	bf00      	nop
 8001564:	bd80      	pop	{r7, pc}
 8001566:	bf00      	nop
 8001568:	200090d8 	.word	0x200090d8

0800156c <LTDC_IRQHandler>:

/**
  * @brief This function handles LTDC global interrupt.
  */
void LTDC_IRQHandler(void)
{
 800156c:	b580      	push	{r7, lr}
 800156e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN LTDC_IRQn 0 */

  /* USER CODE END LTDC_IRQn 0 */
  HAL_LTDC_IRQHandler(&hltdc);
 8001570:	4802      	ldr	r0, [pc, #8]	; (800157c <LTDC_IRQHandler+0x10>)
 8001572:	f002 fb39 	bl	8003be8 <HAL_LTDC_IRQHandler>
  /* USER CODE BEGIN LTDC_IRQn 1 */

  /* USER CODE END LTDC_IRQn 1 */
}
 8001576:	bf00      	nop
 8001578:	bd80      	pop	{r7, pc}
 800157a:	bf00      	nop
 800157c:	2000012c 	.word	0x2000012c

08001580 <DMA2D_IRQHandler>:

/**
  * @brief This function handles DMA2D global interrupt.
  */
void DMA2D_IRQHandler(void)
{
 8001580:	b580      	push	{r7, lr}
 8001582:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA2D_IRQn 0 */

  /* USER CODE END DMA2D_IRQn 0 */
  HAL_DMA2D_IRQHandler(&hdma2d);
 8001584:	4802      	ldr	r0, [pc, #8]	; (8001590 <DMA2D_IRQHandler+0x10>)
 8001586:	f000 fc0c 	bl	8001da2 <HAL_DMA2D_IRQHandler>
  /* USER CODE BEGIN DMA2D_IRQn 1 */

  /* USER CODE END DMA2D_IRQn 1 */
}
 800158a:	bf00      	nop
 800158c:	bd80      	pop	{r7, pc}
 800158e:	bf00      	nop
 8001590:	20000098 	.word	0x20000098

08001594 <_read>:
  _kill(status, -1);
  while (1) {}    /* Make sure we hang here */
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 8001594:	b580      	push	{r7, lr}
 8001596:	b086      	sub	sp, #24
 8001598:	af00      	add	r7, sp, #0
 800159a:	60f8      	str	r0, [r7, #12]
 800159c:	60b9      	str	r1, [r7, #8]
 800159e:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 80015a0:	2300      	movs	r3, #0
 80015a2:	617b      	str	r3, [r7, #20]
 80015a4:	e00a      	b.n	80015bc <_read+0x28>
  {
    *ptr++ = __io_getchar();
 80015a6:	f3af 8000 	nop.w
 80015aa:	4601      	mov	r1, r0
 80015ac:	68bb      	ldr	r3, [r7, #8]
 80015ae:	1c5a      	adds	r2, r3, #1
 80015b0:	60ba      	str	r2, [r7, #8]
 80015b2:	b2ca      	uxtb	r2, r1
 80015b4:	701a      	strb	r2, [r3, #0]
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 80015b6:	697b      	ldr	r3, [r7, #20]
 80015b8:	3301      	adds	r3, #1
 80015ba:	617b      	str	r3, [r7, #20]
 80015bc:	697a      	ldr	r2, [r7, #20]
 80015be:	687b      	ldr	r3, [r7, #4]
 80015c0:	429a      	cmp	r2, r3
 80015c2:	dbf0      	blt.n	80015a6 <_read+0x12>
  }

  return len;
 80015c4:	687b      	ldr	r3, [r7, #4]
}
 80015c6:	4618      	mov	r0, r3
 80015c8:	3718      	adds	r7, #24
 80015ca:	46bd      	mov	sp, r7
 80015cc:	bd80      	pop	{r7, pc}

080015ce <_close>:
  }
  return len;
}

int _close(int file)
{
 80015ce:	b480      	push	{r7}
 80015d0:	b083      	sub	sp, #12
 80015d2:	af00      	add	r7, sp, #0
 80015d4:	6078      	str	r0, [r7, #4]
  (void)file;
  return -1;
 80015d6:	f04f 33ff 	mov.w	r3, #4294967295
}
 80015da:	4618      	mov	r0, r3
 80015dc:	370c      	adds	r7, #12
 80015de:	46bd      	mov	sp, r7
 80015e0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80015e4:	4770      	bx	lr

080015e6 <_fstat>:


int _fstat(int file, struct stat *st)
{
 80015e6:	b480      	push	{r7}
 80015e8:	b083      	sub	sp, #12
 80015ea:	af00      	add	r7, sp, #0
 80015ec:	6078      	str	r0, [r7, #4]
 80015ee:	6039      	str	r1, [r7, #0]
  (void)file;
  st->st_mode = S_IFCHR;
 80015f0:	683b      	ldr	r3, [r7, #0]
 80015f2:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 80015f6:	605a      	str	r2, [r3, #4]
  return 0;
 80015f8:	2300      	movs	r3, #0
}
 80015fa:	4618      	mov	r0, r3
 80015fc:	370c      	adds	r7, #12
 80015fe:	46bd      	mov	sp, r7
 8001600:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001604:	4770      	bx	lr

08001606 <_isatty>:

int _isatty(int file)
{
 8001606:	b480      	push	{r7}
 8001608:	b083      	sub	sp, #12
 800160a:	af00      	add	r7, sp, #0
 800160c:	6078      	str	r0, [r7, #4]
  (void)file;
  return 1;
 800160e:	2301      	movs	r3, #1
}
 8001610:	4618      	mov	r0, r3
 8001612:	370c      	adds	r7, #12
 8001614:	46bd      	mov	sp, r7
 8001616:	f85d 7b04 	ldr.w	r7, [sp], #4
 800161a:	4770      	bx	lr

0800161c <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 800161c:	b480      	push	{r7}
 800161e:	b085      	sub	sp, #20
 8001620:	af00      	add	r7, sp, #0
 8001622:	60f8      	str	r0, [r7, #12]
 8001624:	60b9      	str	r1, [r7, #8]
 8001626:	607a      	str	r2, [r7, #4]
  (void)file;
  (void)ptr;
  (void)dir;
  return 0;
 8001628:	2300      	movs	r3, #0
}
 800162a:	4618      	mov	r0, r3
 800162c:	3714      	adds	r7, #20
 800162e:	46bd      	mov	sp, r7
 8001630:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001634:	4770      	bx	lr
	...

08001638 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8001638:	b580      	push	{r7, lr}
 800163a:	b086      	sub	sp, #24
 800163c:	af00      	add	r7, sp, #0
 800163e:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8001640:	4a14      	ldr	r2, [pc, #80]	; (8001694 <_sbrk+0x5c>)
 8001642:	4b15      	ldr	r3, [pc, #84]	; (8001698 <_sbrk+0x60>)
 8001644:	1ad3      	subs	r3, r2, r3
 8001646:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8001648:	697b      	ldr	r3, [r7, #20]
 800164a:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 800164c:	4b13      	ldr	r3, [pc, #76]	; (800169c <_sbrk+0x64>)
 800164e:	681b      	ldr	r3, [r3, #0]
 8001650:	2b00      	cmp	r3, #0
 8001652:	d102      	bne.n	800165a <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8001654:	4b11      	ldr	r3, [pc, #68]	; (800169c <_sbrk+0x64>)
 8001656:	4a12      	ldr	r2, [pc, #72]	; (80016a0 <_sbrk+0x68>)
 8001658:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 800165a:	4b10      	ldr	r3, [pc, #64]	; (800169c <_sbrk+0x64>)
 800165c:	681a      	ldr	r2, [r3, #0]
 800165e:	687b      	ldr	r3, [r7, #4]
 8001660:	4413      	add	r3, r2
 8001662:	693a      	ldr	r2, [r7, #16]
 8001664:	429a      	cmp	r2, r3
 8001666:	d207      	bcs.n	8001678 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8001668:	f008 f8ec 	bl	8009844 <__errno>
 800166c:	4603      	mov	r3, r0
 800166e:	220c      	movs	r2, #12
 8001670:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8001672:	f04f 33ff 	mov.w	r3, #4294967295
 8001676:	e009      	b.n	800168c <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8001678:	4b08      	ldr	r3, [pc, #32]	; (800169c <_sbrk+0x64>)
 800167a:	681b      	ldr	r3, [r3, #0]
 800167c:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 800167e:	4b07      	ldr	r3, [pc, #28]	; (800169c <_sbrk+0x64>)
 8001680:	681a      	ldr	r2, [r3, #0]
 8001682:	687b      	ldr	r3, [r7, #4]
 8001684:	4413      	add	r3, r2
 8001686:	4a05      	ldr	r2, [pc, #20]	; (800169c <_sbrk+0x64>)
 8001688:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 800168a:	68fb      	ldr	r3, [r7, #12]
}
 800168c:	4618      	mov	r0, r3
 800168e:	3718      	adds	r7, #24
 8001690:	46bd      	mov	sp, r7
 8001692:	bd80      	pop	{r7, pc}
 8001694:	20030000 	.word	0x20030000
 8001698:	00000400 	.word	0x00000400
 800169c:	20000338 	.word	0x20000338
 80016a0:	200093f0 	.word	0x200093f0

080016a4 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 80016a4:	b480      	push	{r7}
 80016a6:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 80016a8:	4b06      	ldr	r3, [pc, #24]	; (80016c4 <SystemInit+0x20>)
 80016aa:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80016ae:	4a05      	ldr	r2, [pc, #20]	; (80016c4 <SystemInit+0x20>)
 80016b0:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 80016b4:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 80016b8:	bf00      	nop
 80016ba:	46bd      	mov	sp, r7
 80016bc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80016c0:	4770      	bx	lr
 80016c2:	bf00      	nop
 80016c4:	e000ed00 	.word	0xe000ed00

080016c8 <tm_main>:


/* Define main entry point.  */

void tm_main()
{
 80016c8:	b580      	push	{r7, lr}
 80016ca:	af00      	add	r7, sp, #0

    /* Initialize the test.  */
	printf("****This test is running on the STM32F429I Discovery with CMSIS_RTOS_v2 on top of FreeRTOS **** \n\r");
 80016cc:	4803      	ldr	r0, [pc, #12]	; (80016dc <tm_main+0x14>)
 80016ce:	f008 f9d9 	bl	8009a84 <iprintf>
    tm_initialize(tm_cooperative_scheduling_initialize);
 80016d2:	4803      	ldr	r0, [pc, #12]	; (80016e0 <tm_main+0x18>)
 80016d4:	f000 f92c 	bl	8001930 <tm_initialize>
}
 80016d8:	bf00      	nop
 80016da:	bd80      	pop	{r7, pc}
 80016dc:	0800ac80 	.word	0x0800ac80
 80016e0:	080016e5 	.word	0x080016e5

080016e4 <tm_cooperative_scheduling_initialize>:


/* Define the cooperative scheduling test initialization.  */

void  tm_cooperative_scheduling_initialize(void)
{
 80016e4:	b580      	push	{r7, lr}
 80016e6:	af00      	add	r7, sp, #0

    /* Create all 5 threads at priority 3.  */
    tm_thread_create(0, 3, tm_cooperative_thread_0_entry);
 80016e8:	4a18      	ldr	r2, [pc, #96]	; (800174c <tm_cooperative_scheduling_initialize+0x68>)
 80016ea:	2103      	movs	r1, #3
 80016ec:	2000      	movs	r0, #0
 80016ee:	f000 f92f 	bl	8001950 <tm_thread_create>
    tm_thread_create(1, 3, tm_cooperative_thread_1_entry);
 80016f2:	4a17      	ldr	r2, [pc, #92]	; (8001750 <tm_cooperative_scheduling_initialize+0x6c>)
 80016f4:	2103      	movs	r1, #3
 80016f6:	2001      	movs	r0, #1
 80016f8:	f000 f92a 	bl	8001950 <tm_thread_create>
    tm_thread_create(2, 3, tm_cooperative_thread_2_entry);
 80016fc:	4a15      	ldr	r2, [pc, #84]	; (8001754 <tm_cooperative_scheduling_initialize+0x70>)
 80016fe:	2103      	movs	r1, #3
 8001700:	2002      	movs	r0, #2
 8001702:	f000 f925 	bl	8001950 <tm_thread_create>
    tm_thread_create(3, 3, tm_cooperative_thread_3_entry);
 8001706:	4a14      	ldr	r2, [pc, #80]	; (8001758 <tm_cooperative_scheduling_initialize+0x74>)
 8001708:	2103      	movs	r1, #3
 800170a:	2003      	movs	r0, #3
 800170c:	f000 f920 	bl	8001950 <tm_thread_create>
    tm_thread_create(4, 3, tm_cooperative_thread_4_entry);
 8001710:	4a12      	ldr	r2, [pc, #72]	; (800175c <tm_cooperative_scheduling_initialize+0x78>)
 8001712:	2103      	movs	r1, #3
 8001714:	2004      	movs	r0, #4
 8001716:	f000 f91b 	bl	8001950 <tm_thread_create>

    /* Resume all 5 threads.  */
    tm_thread_resume(0);
 800171a:	2000      	movs	r0, #0
 800171c:	f000 f95c 	bl	80019d8 <tm_thread_resume>
    tm_thread_resume(1);
 8001720:	2001      	movs	r0, #1
 8001722:	f000 f959 	bl	80019d8 <tm_thread_resume>
    tm_thread_resume(2);
 8001726:	2002      	movs	r0, #2
 8001728:	f000 f956 	bl	80019d8 <tm_thread_resume>
    tm_thread_resume(3);
 800172c:	2003      	movs	r0, #3
 800172e:	f000 f953 	bl	80019d8 <tm_thread_resume>
    tm_thread_resume(4);
 8001732:	2004      	movs	r0, #4
 8001734:	f000 f950 	bl	80019d8 <tm_thread_resume>

    /* Create the reporting thread. It will preempt the other 
       threads and print out the test results.  */
    tm_thread_create(5, 12, tm_cooperative_thread_report);
 8001738:	4a09      	ldr	r2, [pc, #36]	; (8001760 <tm_cooperative_scheduling_initialize+0x7c>)
 800173a:	210c      	movs	r1, #12
 800173c:	2005      	movs	r0, #5
 800173e:	f000 f907 	bl	8001950 <tm_thread_create>
    tm_thread_resume(5);
 8001742:	2005      	movs	r0, #5
 8001744:	f000 f948 	bl	80019d8 <tm_thread_resume>
}
 8001748:	bf00      	nop
 800174a:	bd80      	pop	{r7, pc}
 800174c:	08001765 	.word	0x08001765
 8001750:	0800177d 	.word	0x0800177d
 8001754:	08001795 	.word	0x08001795
 8001758:	080017ad 	.word	0x080017ad
 800175c:	080017c5 	.word	0x080017c5
 8001760:	080017dd 	.word	0x080017dd

08001764 <tm_cooperative_thread_0_entry>:


/* Define the first cooperative thread.  */
void  tm_cooperative_thread_0_entry(void)
{
 8001764:	b580      	push	{r7, lr}
 8001766:	af00      	add	r7, sp, #0

    while(1)
    {
      
        /* Relinquish to all other threads at same priority.  */
        tm_thread_relinquish();
 8001768:	f000 f952 	bl	8001a10 <tm_thread_relinquish>

        /* Increment this thread's counter.  */
        tm_cooperative_thread_0_counter++;
 800176c:	4b02      	ldr	r3, [pc, #8]	; (8001778 <tm_cooperative_thread_0_entry+0x14>)
 800176e:	681b      	ldr	r3, [r3, #0]
 8001770:	3301      	adds	r3, #1
 8001772:	4a01      	ldr	r2, [pc, #4]	; (8001778 <tm_cooperative_thread_0_entry+0x14>)
 8001774:	6013      	str	r3, [r2, #0]
        tm_thread_relinquish();
 8001776:	e7f7      	b.n	8001768 <tm_cooperative_thread_0_entry+0x4>
 8001778:	2000033c 	.word	0x2000033c

0800177c <tm_cooperative_thread_1_entry>:
    }
}

/* Define the second cooperative thread.  */
void  tm_cooperative_thread_1_entry(void)
{
 800177c:	b580      	push	{r7, lr}
 800177e:	af00      	add	r7, sp, #0

    while(1)
    {

        /* Relinquish to all other threads at same priority.  */
        tm_thread_relinquish();
 8001780:	f000 f946 	bl	8001a10 <tm_thread_relinquish>

        /* Increment this thread's counter.  */
        tm_cooperative_thread_1_counter++;
 8001784:	4b02      	ldr	r3, [pc, #8]	; (8001790 <tm_cooperative_thread_1_entry+0x14>)
 8001786:	681b      	ldr	r3, [r3, #0]
 8001788:	3301      	adds	r3, #1
 800178a:	4a01      	ldr	r2, [pc, #4]	; (8001790 <tm_cooperative_thread_1_entry+0x14>)
 800178c:	6013      	str	r3, [r2, #0]
        tm_thread_relinquish();
 800178e:	e7f7      	b.n	8001780 <tm_cooperative_thread_1_entry+0x4>
 8001790:	20000340 	.word	0x20000340

08001794 <tm_cooperative_thread_2_entry>:
    }
}

/* Define the third cooperative thread.  */
void  tm_cooperative_thread_2_entry(void)
{
 8001794:	b580      	push	{r7, lr}
 8001796:	af00      	add	r7, sp, #0

    while(1)
    {

        /* Relinquish to all other threads at same priority.  */
        tm_thread_relinquish();
 8001798:	f000 f93a 	bl	8001a10 <tm_thread_relinquish>

        /* Increment this thread's counter.  */
        tm_cooperative_thread_2_counter++;
 800179c:	4b02      	ldr	r3, [pc, #8]	; (80017a8 <tm_cooperative_thread_2_entry+0x14>)
 800179e:	681b      	ldr	r3, [r3, #0]
 80017a0:	3301      	adds	r3, #1
 80017a2:	4a01      	ldr	r2, [pc, #4]	; (80017a8 <tm_cooperative_thread_2_entry+0x14>)
 80017a4:	6013      	str	r3, [r2, #0]
        tm_thread_relinquish();
 80017a6:	e7f7      	b.n	8001798 <tm_cooperative_thread_2_entry+0x4>
 80017a8:	20000344 	.word	0x20000344

080017ac <tm_cooperative_thread_3_entry>:
}


/* Define the fourth cooperative thread.  */
void  tm_cooperative_thread_3_entry(void)
{
 80017ac:	b580      	push	{r7, lr}
 80017ae:	af00      	add	r7, sp, #0

    while(1)
    {

        /* Relinquish to all other threads at same priority.  */
        tm_thread_relinquish();
 80017b0:	f000 f92e 	bl	8001a10 <tm_thread_relinquish>

        /* Increment this thread's counter.  */
        tm_cooperative_thread_3_counter++;
 80017b4:	4b02      	ldr	r3, [pc, #8]	; (80017c0 <tm_cooperative_thread_3_entry+0x14>)
 80017b6:	681b      	ldr	r3, [r3, #0]
 80017b8:	3301      	adds	r3, #1
 80017ba:	4a01      	ldr	r2, [pc, #4]	; (80017c0 <tm_cooperative_thread_3_entry+0x14>)
 80017bc:	6013      	str	r3, [r2, #0]
        tm_thread_relinquish();
 80017be:	e7f7      	b.n	80017b0 <tm_cooperative_thread_3_entry+0x4>
 80017c0:	20000348 	.word	0x20000348

080017c4 <tm_cooperative_thread_4_entry>:
}


/* Define the fifth cooperative thread.  */
void  tm_cooperative_thread_4_entry(void)
{
 80017c4:	b580      	push	{r7, lr}
 80017c6:	af00      	add	r7, sp, #0

    while(1)
    {

        /* Relinquish to all other threads at same priority.  */
        tm_thread_relinquish();
 80017c8:	f000 f922 	bl	8001a10 <tm_thread_relinquish>

        /* Increment this thread's counter.  */
        tm_cooperative_thread_4_counter++;
 80017cc:	4b02      	ldr	r3, [pc, #8]	; (80017d8 <tm_cooperative_thread_4_entry+0x14>)
 80017ce:	681b      	ldr	r3, [r3, #0]
 80017d0:	3301      	adds	r3, #1
 80017d2:	4a01      	ldr	r2, [pc, #4]	; (80017d8 <tm_cooperative_thread_4_entry+0x14>)
 80017d4:	6013      	str	r3, [r2, #0]
        tm_thread_relinquish();
 80017d6:	e7f7      	b.n	80017c8 <tm_cooperative_thread_4_entry+0x4>
 80017d8:	2000034c 	.word	0x2000034c

080017dc <tm_cooperative_thread_report>:
}


/* Define the cooperative test reporting thread.  */
void  tm_cooperative_thread_report(void)
{
 80017dc:	b580      	push	{r7, lr}
 80017de:	b084      	sub	sp, #16
 80017e0:	af00      	add	r7, sp, #0
unsigned long   relative_time;
unsigned long   last_total;
unsigned long   average;

    /* Initialize the last total.  */
    last_total =  0;
 80017e2:	2300      	movs	r3, #0
 80017e4:	60bb      	str	r3, [r7, #8]

    /* Initialize the relative time.  */
    relative_time =  0;
 80017e6:	2300      	movs	r3, #0
 80017e8:	60fb      	str	r3, [r7, #12]

    while(1)
    {

        /* Sleep to allow the test to run.  */
        tm_thread_sleep(TM_TEST_DURATION);
 80017ea:	201e      	movs	r0, #30
 80017ec:	f000 f916 	bl	8001a1c <tm_thread_sleep>

        /* Increment the relative time.  */
        relative_time =  relative_time + TM_TEST_DURATION;
 80017f0:	68fb      	ldr	r3, [r7, #12]
 80017f2:	331e      	adds	r3, #30
 80017f4:	60fb      	str	r3, [r7, #12]

        /* Print results to the stdio window.  */
        printf("**** Thread-Metric Cooperative Scheduling Test **** Relative Time: %lu\n\r", relative_time);
 80017f6:	68f9      	ldr	r1, [r7, #12]
 80017f8:	483f      	ldr	r0, [pc, #252]	; (80018f8 <tm_cooperative_thread_report+0x11c>)
 80017fa:	f008 f943 	bl	8009a84 <iprintf>

        /* Calculate the total of all the counters.  */
        total =  tm_cooperative_thread_0_counter + tm_cooperative_thread_1_counter + tm_cooperative_thread_2_counter
 80017fe:	4b3f      	ldr	r3, [pc, #252]	; (80018fc <tm_cooperative_thread_report+0x120>)
 8001800:	681a      	ldr	r2, [r3, #0]
 8001802:	4b3f      	ldr	r3, [pc, #252]	; (8001900 <tm_cooperative_thread_report+0x124>)
 8001804:	681b      	ldr	r3, [r3, #0]
 8001806:	441a      	add	r2, r3
 8001808:	4b3e      	ldr	r3, [pc, #248]	; (8001904 <tm_cooperative_thread_report+0x128>)
 800180a:	681b      	ldr	r3, [r3, #0]
 800180c:	441a      	add	r2, r3
                    + tm_cooperative_thread_3_counter + tm_cooperative_thread_4_counter;
 800180e:	4b3e      	ldr	r3, [pc, #248]	; (8001908 <tm_cooperative_thread_report+0x12c>)
 8001810:	681b      	ldr	r3, [r3, #0]
 8001812:	441a      	add	r2, r3
 8001814:	4b3d      	ldr	r3, [pc, #244]	; (800190c <tm_cooperative_thread_report+0x130>)
 8001816:	681b      	ldr	r3, [r3, #0]
        total =  tm_cooperative_thread_0_counter + tm_cooperative_thread_1_counter + tm_cooperative_thread_2_counter
 8001818:	4413      	add	r3, r2
 800181a:	607b      	str	r3, [r7, #4]

        /* Calculate the average of all the counters.  */
        average =  total/5;
 800181c:	687b      	ldr	r3, [r7, #4]
 800181e:	4a3c      	ldr	r2, [pc, #240]	; (8001910 <tm_cooperative_thread_report+0x134>)
 8001820:	fba2 2303 	umull	r2, r3, r2, r3
 8001824:	089b      	lsrs	r3, r3, #2
 8001826:	603b      	str	r3, [r7, #0]
		
		/* WCC - integrity check */
		printf("tm_cooperative_thread_0_counter: %d\n\r", tm_cooperative_thread_0_counter);
 8001828:	4b34      	ldr	r3, [pc, #208]	; (80018fc <tm_cooperative_thread_report+0x120>)
 800182a:	681b      	ldr	r3, [r3, #0]
 800182c:	4619      	mov	r1, r3
 800182e:	4839      	ldr	r0, [pc, #228]	; (8001914 <tm_cooperative_thread_report+0x138>)
 8001830:	f008 f928 	bl	8009a84 <iprintf>
		printf("tm_cooperative_thread_1_counter: %d\n\r", tm_cooperative_thread_1_counter);
 8001834:	4b32      	ldr	r3, [pc, #200]	; (8001900 <tm_cooperative_thread_report+0x124>)
 8001836:	681b      	ldr	r3, [r3, #0]
 8001838:	4619      	mov	r1, r3
 800183a:	4837      	ldr	r0, [pc, #220]	; (8001918 <tm_cooperative_thread_report+0x13c>)
 800183c:	f008 f922 	bl	8009a84 <iprintf>
		printf("tm_cooperative_thread_2_counter: %d\n\r", tm_cooperative_thread_2_counter);
 8001840:	4b30      	ldr	r3, [pc, #192]	; (8001904 <tm_cooperative_thread_report+0x128>)
 8001842:	681b      	ldr	r3, [r3, #0]
 8001844:	4619      	mov	r1, r3
 8001846:	4835      	ldr	r0, [pc, #212]	; (800191c <tm_cooperative_thread_report+0x140>)
 8001848:	f008 f91c 	bl	8009a84 <iprintf>
		printf("tm_cooperative_thread_3_counter: %d\n\r", tm_cooperative_thread_3_counter);
 800184c:	4b2e      	ldr	r3, [pc, #184]	; (8001908 <tm_cooperative_thread_report+0x12c>)
 800184e:	681b      	ldr	r3, [r3, #0]
 8001850:	4619      	mov	r1, r3
 8001852:	4833      	ldr	r0, [pc, #204]	; (8001920 <tm_cooperative_thread_report+0x144>)
 8001854:	f008 f916 	bl	8009a84 <iprintf>
		printf("tm_cooperative_thread_4_counter: %d\n\r", tm_cooperative_thread_4_counter);
 8001858:	4b2c      	ldr	r3, [pc, #176]	; (800190c <tm_cooperative_thread_report+0x130>)
 800185a:	681b      	ldr	r3, [r3, #0]
 800185c:	4619      	mov	r1, r3
 800185e:	4831      	ldr	r0, [pc, #196]	; (8001924 <tm_cooperative_thread_report+0x148>)
 8001860:	f008 f910 	bl	8009a84 <iprintf>

        /* See if there are any errors.  */
        if ((tm_cooperative_thread_0_counter < (average - 1)) || 
 8001864:	683b      	ldr	r3, [r7, #0]
 8001866:	1e5a      	subs	r2, r3, #1
 8001868:	4b24      	ldr	r3, [pc, #144]	; (80018fc <tm_cooperative_thread_report+0x120>)
 800186a:	681b      	ldr	r3, [r3, #0]
 800186c:	429a      	cmp	r2, r3
 800186e:	d835      	bhi.n	80018dc <tm_cooperative_thread_report+0x100>
            (tm_cooperative_thread_0_counter > (average + 1)) ||
 8001870:	683b      	ldr	r3, [r7, #0]
 8001872:	1c5a      	adds	r2, r3, #1
 8001874:	4b21      	ldr	r3, [pc, #132]	; (80018fc <tm_cooperative_thread_report+0x120>)
 8001876:	681b      	ldr	r3, [r3, #0]
        if ((tm_cooperative_thread_0_counter < (average - 1)) || 
 8001878:	429a      	cmp	r2, r3
 800187a:	d32f      	bcc.n	80018dc <tm_cooperative_thread_report+0x100>
            (tm_cooperative_thread_1_counter < (average - 1)) || 
 800187c:	683b      	ldr	r3, [r7, #0]
 800187e:	1e5a      	subs	r2, r3, #1
 8001880:	4b1f      	ldr	r3, [pc, #124]	; (8001900 <tm_cooperative_thread_report+0x124>)
 8001882:	681b      	ldr	r3, [r3, #0]
            (tm_cooperative_thread_0_counter > (average + 1)) ||
 8001884:	429a      	cmp	r2, r3
 8001886:	d829      	bhi.n	80018dc <tm_cooperative_thread_report+0x100>
            (tm_cooperative_thread_1_counter > (average + 1)) ||
 8001888:	683b      	ldr	r3, [r7, #0]
 800188a:	1c5a      	adds	r2, r3, #1
 800188c:	4b1c      	ldr	r3, [pc, #112]	; (8001900 <tm_cooperative_thread_report+0x124>)
 800188e:	681b      	ldr	r3, [r3, #0]
            (tm_cooperative_thread_1_counter < (average - 1)) || 
 8001890:	429a      	cmp	r2, r3
 8001892:	d323      	bcc.n	80018dc <tm_cooperative_thread_report+0x100>
            (tm_cooperative_thread_2_counter < (average - 1)) || 
 8001894:	683b      	ldr	r3, [r7, #0]
 8001896:	1e5a      	subs	r2, r3, #1
 8001898:	4b1a      	ldr	r3, [pc, #104]	; (8001904 <tm_cooperative_thread_report+0x128>)
 800189a:	681b      	ldr	r3, [r3, #0]
            (tm_cooperative_thread_1_counter > (average + 1)) ||
 800189c:	429a      	cmp	r2, r3
 800189e:	d81d      	bhi.n	80018dc <tm_cooperative_thread_report+0x100>
            (tm_cooperative_thread_2_counter > (average + 1)) ||
 80018a0:	683b      	ldr	r3, [r7, #0]
 80018a2:	1c5a      	adds	r2, r3, #1
 80018a4:	4b17      	ldr	r3, [pc, #92]	; (8001904 <tm_cooperative_thread_report+0x128>)
 80018a6:	681b      	ldr	r3, [r3, #0]
            (tm_cooperative_thread_2_counter < (average - 1)) || 
 80018a8:	429a      	cmp	r2, r3
 80018aa:	d317      	bcc.n	80018dc <tm_cooperative_thread_report+0x100>
            (tm_cooperative_thread_3_counter < (average - 1)) || 
 80018ac:	683b      	ldr	r3, [r7, #0]
 80018ae:	1e5a      	subs	r2, r3, #1
 80018b0:	4b15      	ldr	r3, [pc, #84]	; (8001908 <tm_cooperative_thread_report+0x12c>)
 80018b2:	681b      	ldr	r3, [r3, #0]
            (tm_cooperative_thread_2_counter > (average + 1)) ||
 80018b4:	429a      	cmp	r2, r3
 80018b6:	d811      	bhi.n	80018dc <tm_cooperative_thread_report+0x100>
            (tm_cooperative_thread_3_counter > (average + 1)) ||
 80018b8:	683b      	ldr	r3, [r7, #0]
 80018ba:	1c5a      	adds	r2, r3, #1
 80018bc:	4b12      	ldr	r3, [pc, #72]	; (8001908 <tm_cooperative_thread_report+0x12c>)
 80018be:	681b      	ldr	r3, [r3, #0]
            (tm_cooperative_thread_3_counter < (average - 1)) || 
 80018c0:	429a      	cmp	r2, r3
 80018c2:	d30b      	bcc.n	80018dc <tm_cooperative_thread_report+0x100>
            (tm_cooperative_thread_4_counter < (average - 1)) || 
 80018c4:	683b      	ldr	r3, [r7, #0]
 80018c6:	1e5a      	subs	r2, r3, #1
 80018c8:	4b10      	ldr	r3, [pc, #64]	; (800190c <tm_cooperative_thread_report+0x130>)
 80018ca:	681b      	ldr	r3, [r3, #0]
            (tm_cooperative_thread_3_counter > (average + 1)) ||
 80018cc:	429a      	cmp	r2, r3
 80018ce:	d805      	bhi.n	80018dc <tm_cooperative_thread_report+0x100>
            (tm_cooperative_thread_4_counter > (average + 1)))
 80018d0:	683b      	ldr	r3, [r7, #0]
 80018d2:	1c5a      	adds	r2, r3, #1
 80018d4:	4b0d      	ldr	r3, [pc, #52]	; (800190c <tm_cooperative_thread_report+0x130>)
 80018d6:	681b      	ldr	r3, [r3, #0]
            (tm_cooperative_thread_4_counter < (average - 1)) || 
 80018d8:	429a      	cmp	r2, r3
 80018da:	d202      	bcs.n	80018e2 <tm_cooperative_thread_report+0x106>
        {

            printf("ERROR: Invalid counter value(s). Cooperative counters should not be more that 1 different than the average!\n\r");
 80018dc:	4812      	ldr	r0, [pc, #72]	; (8001928 <tm_cooperative_thread_report+0x14c>)
 80018de:	f008 f8d1 	bl	8009a84 <iprintf>
        }

        /* Show the time period total.  */
        printf("Time Period Total:  %lu\n\n\r", total - last_total);
 80018e2:	687a      	ldr	r2, [r7, #4]
 80018e4:	68bb      	ldr	r3, [r7, #8]
 80018e6:	1ad3      	subs	r3, r2, r3
 80018e8:	4619      	mov	r1, r3
 80018ea:	4810      	ldr	r0, [pc, #64]	; (800192c <tm_cooperative_thread_report+0x150>)
 80018ec:	f008 f8ca 	bl	8009a84 <iprintf>

        /* Save the last total.  */
        last_total =  total;
 80018f0:	687b      	ldr	r3, [r7, #4]
 80018f2:	60bb      	str	r3, [r7, #8]
        tm_thread_sleep(TM_TEST_DURATION);
 80018f4:	e779      	b.n	80017ea <tm_cooperative_thread_report+0xe>
 80018f6:	bf00      	nop
 80018f8:	0800ace4 	.word	0x0800ace4
 80018fc:	2000033c 	.word	0x2000033c
 8001900:	20000340 	.word	0x20000340
 8001904:	20000344 	.word	0x20000344
 8001908:	20000348 	.word	0x20000348
 800190c:	2000034c 	.word	0x2000034c
 8001910:	cccccccd 	.word	0xcccccccd
 8001914:	0800ad30 	.word	0x0800ad30
 8001918:	0800ad58 	.word	0x0800ad58
 800191c:	0800ad80 	.word	0x0800ad80
 8001920:	0800ada8 	.word	0x0800ada8
 8001924:	0800add0 	.word	0x0800add0
 8001928:	0800adf8 	.word	0x0800adf8
 800192c:	0800ae68 	.word	0x0800ae68

08001930 <tm_initialize>:


/* This function called from main performs basic RTOS initialization,
   calls the test initialization function, and then starts the RTOS function. */
void tm_initialize(void (*test_initialization_function)(void))
{
 8001930:	b580      	push	{r7, lr}
 8001932:	b082      	sub	sp, #8
 8001934:	af00      	add	r7, sp, #0
 8001936:	6078      	str	r0, [r7, #4]
    /* Save the test initialization function. */
    tm_initialization_function = test_initialization_function;
 8001938:	4a04      	ldr	r2, [pc, #16]	; (800194c <tm_initialize+0x1c>)
 800193a:	687b      	ldr	r3, [r7, #4]
 800193c:	6013      	str	r3, [r2, #0]

    /* Call the previously defined initialization function. */
    (tm_initialization_function)();
 800193e:	4b03      	ldr	r3, [pc, #12]	; (800194c <tm_initialize+0x1c>)
 8001940:	681b      	ldr	r3, [r3, #0]
 8001942:	4798      	blx	r3
}
 8001944:	bf00      	nop
 8001946:	3708      	adds	r7, #8
 8001948:	46bd      	mov	sp, r7
 800194a:	bd80      	pop	{r7, pc}
 800194c:	20000378 	.word	0x20000378

08001950 <tm_thread_create>:
/* This function takes a thread ID and priority and attempts to create the
   file in the underlying RTOS. Valid priorities range from 1 through 255,
   where 1 is the highest priority and 255 is the lowest. If successful,
   the function should return TM_SUCCESS. Otherwise, TM_ERROR should be returned. */
int tm_thread_create(int thread_id, int priority, void (*entry_function)(void))
{
 8001950:	b580      	push	{r7, lr}
 8001952:	b0a6      	sub	sp, #152	; 0x98
 8001954:	af00      	add	r7, sp, #0
 8001956:	60f8      	str	r0, [r7, #12]
 8001958:	60b9      	str	r1, [r7, #8]
 800195a:	607a      	str	r2, [r7, #4]
	// Remember the actual thread entry.
	   // tm_thread_entry_functions[thread_id] = entry_function;
	    char str[100];
	    sprintf(str, "%d",thread_id);
 800195c:	f107 0334 	add.w	r3, r7, #52	; 0x34
 8001960:	68fa      	ldr	r2, [r7, #12]
 8001962:	4919      	ldr	r1, [pc, #100]	; (80019c8 <tm_thread_create+0x78>)
 8001964:	4618      	mov	r0, r3
 8001966:	f008 f92b 	bl	8009bc0 <siprintf>

	    // Create the thread under CMSIS-RTOS.
	    osThreadAttr_t thread_attr = {
 800196a:	f107 0310 	add.w	r3, r7, #16
 800196e:	2224      	movs	r2, #36	; 0x24
 8001970:	2100      	movs	r1, #0
 8001972:	4618      	mov	r0, r3
 8001974:	f007 ff9e 	bl	80098b4 <memset>
 8001978:	f107 0334 	add.w	r3, r7, #52	; 0x34
 800197c:	613b      	str	r3, [r7, #16]
 800197e:	f44f 6340 	mov.w	r3, #3072	; 0xc00
 8001982:	627b      	str	r3, [r7, #36]	; 0x24
 8001984:	68bb      	ldr	r3, [r7, #8]
 8001986:	62bb      	str	r3, [r7, #40]	; 0x28
	        .name = str,
	        //.stack_mem = tm_thread_stack_area[thread_id],
	        .stack_size = 3*1024,
	        .priority = priority
	    };
	    tm_thread_array[thread_id] = osThreadNew((osThreadFunc_t)entry_function, NULL, &thread_attr);
 8001988:	f107 0310 	add.w	r3, r7, #16
 800198c:	461a      	mov	r2, r3
 800198e:	2100      	movs	r1, #0
 8001990:	6878      	ldr	r0, [r7, #4]
 8001992:	f005 f853 	bl	8006a3c <osThreadNew>
 8001996:	4602      	mov	r2, r0
 8001998:	490c      	ldr	r1, [pc, #48]	; (80019cc <tm_thread_create+0x7c>)
 800199a:	68fb      	ldr	r3, [r7, #12]
 800199c:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

	    // Determine if the thread create was successful.
	    if (tm_thread_array[thread_id] != NULL)
 80019a0:	4a0a      	ldr	r2, [pc, #40]	; (80019cc <tm_thread_create+0x7c>)
 80019a2:	68fb      	ldr	r3, [r7, #12]
 80019a4:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80019a8:	2b00      	cmp	r3, #0
 80019aa:	d004      	beq.n	80019b6 <tm_thread_create+0x66>
	    {
	    	printf("done\r\n");
 80019ac:	4808      	ldr	r0, [pc, #32]	; (80019d0 <tm_thread_create+0x80>)
 80019ae:	f008 f8ef 	bl	8009b90 <puts>
	    	return TM_SUCCESS;
 80019b2:	2300      	movs	r3, #0
 80019b4:	e003      	b.n	80019be <tm_thread_create+0x6e>
	    }

	    else
	    {
	    	printf("failed\r\n");
 80019b6:	4807      	ldr	r0, [pc, #28]	; (80019d4 <tm_thread_create+0x84>)
 80019b8:	f008 f8ea 	bl	8009b90 <puts>
	    	 return TM_ERROR;
 80019bc:	2301      	movs	r3, #1
	    }
}
 80019be:	4618      	mov	r0, r3
 80019c0:	3798      	adds	r7, #152	; 0x98
 80019c2:	46bd      	mov	sp, r7
 80019c4:	bd80      	pop	{r7, pc}
 80019c6:	bf00      	nop
 80019c8:	0800ae84 	.word	0x0800ae84
 80019cc:	20000350 	.word	0x20000350
 80019d0:	0800ae88 	.word	0x0800ae88
 80019d4:	0800ae90 	.word	0x0800ae90

080019d8 <tm_thread_resume>:


/* This function resumes the specified thread.  If successful, the function should
   return TM_SUCCESS. Otherwise, TM_ERROR should be returned.  */
int tm_thread_resume(int thread_id)
{
 80019d8:	b580      	push	{r7, lr}
 80019da:	b082      	sub	sp, #8
 80019dc:	af00      	add	r7, sp, #0
 80019de:	6078      	str	r0, [r7, #4]
    /* Resume the thread with the specified ID. */
    if (osThreadResume(tm_thread_array[thread_id]) == osOK) {
 80019e0:	4a09      	ldr	r2, [pc, #36]	; (8001a08 <tm_thread_resume+0x30>)
 80019e2:	687b      	ldr	r3, [r7, #4]
 80019e4:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80019e8:	4618      	mov	r0, r3
 80019ea:	f005 f8d9 	bl	8006ba0 <osThreadResume>
 80019ee:	4603      	mov	r3, r0
 80019f0:	2b00      	cmp	r3, #0
 80019f2:	d101      	bne.n	80019f8 <tm_thread_resume+0x20>
        /* Thread resume successful. */
        return TM_SUCCESS;
 80019f4:	2300      	movs	r3, #0
 80019f6:	e003      	b.n	8001a00 <tm_thread_resume+0x28>
        printf("resumed\n\r");
    }
    else
    {
    	printf("not resumed\n\r");
 80019f8:	4804      	ldr	r0, [pc, #16]	; (8001a0c <tm_thread_resume+0x34>)
 80019fa:	f008 f843 	bl	8009a84 <iprintf>
    }
    /* Thread resume failed. */
    return TM_ERROR;
 80019fe:	2301      	movs	r3, #1
}
 8001a00:	4618      	mov	r0, r3
 8001a02:	3708      	adds	r7, #8
 8001a04:	46bd      	mov	sp, r7
 8001a06:	bd80      	pop	{r7, pc}
 8001a08:	20000350 	.word	0x20000350
 8001a0c:	0800ae98 	.word	0x0800ae98

08001a10 <tm_thread_relinquish>:


/* This function relinquishes to other ready threads at the same
   priority.  */
void tm_thread_relinquish(void)
{
 8001a10:	b580      	push	{r7, lr}
 8001a12:	af00      	add	r7, sp, #0
	osThreadYield();
 8001a14:	f005 f8a4 	bl	8006b60 <osThreadYield>
}
 8001a18:	bf00      	nop
 8001a1a:	bd80      	pop	{r7, pc}

08001a1c <tm_thread_sleep>:

/* This function suspends the specified thread for the specified number
   of seconds.  If successful, the function should return TM_SUCCESS.
   Otherwise, TM_ERROR should be returned.  */
void tm_thread_sleep(int seconds)
{
 8001a1c:	b580      	push	{r7, lr}
 8001a1e:	b082      	sub	sp, #8
 8001a20:	af00      	add	r7, sp, #0
 8001a22:	6078      	str	r0, [r7, #4]
	 osDelay(seconds * 1000);
 8001a24:	687b      	ldr	r3, [r7, #4]
 8001a26:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 8001a2a:	fb02 f303 	mul.w	r3, r2, r3
 8001a2e:	4618      	mov	r0, r3
 8001a30:	f005 f8d7 	bl	8006be2 <osDelay>
}
 8001a34:	bf00      	nop
 8001a36:	3708      	adds	r7, #8
 8001a38:	46bd      	mov	sp, r7
 8001a3a:	bd80      	pop	{r7, pc}

08001a3c <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler: 
  ldr   sp, =_estack       /* set stack pointer */
 8001a3c:	f8df d034 	ldr.w	sp, [pc, #52]	; 8001a74 <LoopFillZerobss+0x12>
 
/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 8001a40:	480d      	ldr	r0, [pc, #52]	; (8001a78 <LoopFillZerobss+0x16>)
  ldr r1, =_edata
 8001a42:	490e      	ldr	r1, [pc, #56]	; (8001a7c <LoopFillZerobss+0x1a>)
  ldr r2, =_sidata
 8001a44:	4a0e      	ldr	r2, [pc, #56]	; (8001a80 <LoopFillZerobss+0x1e>)
  movs r3, #0
 8001a46:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8001a48:	e002      	b.n	8001a50 <LoopCopyDataInit>

08001a4a <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8001a4a:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8001a4c:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8001a4e:	3304      	adds	r3, #4

08001a50 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8001a50:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8001a52:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8001a54:	d3f9      	bcc.n	8001a4a <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8001a56:	4a0b      	ldr	r2, [pc, #44]	; (8001a84 <LoopFillZerobss+0x22>)
  ldr r4, =_ebss
 8001a58:	4c0b      	ldr	r4, [pc, #44]	; (8001a88 <LoopFillZerobss+0x26>)
  movs r3, #0
 8001a5a:	2300      	movs	r3, #0
  b LoopFillZerobss
 8001a5c:	e001      	b.n	8001a62 <LoopFillZerobss>

08001a5e <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8001a5e:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8001a60:	3204      	adds	r2, #4

08001a62 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8001a62:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8001a64:	d3fb      	bcc.n	8001a5e <FillZerobss>

/* Call the clock system initialization function.*/
  bl  SystemInit   
 8001a66:	f7ff fe1d 	bl	80016a4 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8001a6a:	f007 fef1 	bl	8009850 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8001a6e:	f7fe fdc1 	bl	80005f4 <main>
  bx  lr    
 8001a72:	4770      	bx	lr
  ldr   sp, =_estack       /* set stack pointer */
 8001a74:	20030000 	.word	0x20030000
  ldr r0, =_sdata
 8001a78:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8001a7c:	20000074 	.word	0x20000074
  ldr r2, =_sidata
 8001a80:	0800af80 	.word	0x0800af80
  ldr r2, =_sbss
 8001a84:	20000074 	.word	0x20000074
  ldr r4, =_ebss
 8001a88:	200093ec 	.word	0x200093ec

08001a8c <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8001a8c:	e7fe      	b.n	8001a8c <ADC_IRQHandler>
	...

08001a90 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8001a90:	b580      	push	{r7, lr}
 8001a92:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 8001a94:	4b0e      	ldr	r3, [pc, #56]	; (8001ad0 <HAL_Init+0x40>)
 8001a96:	681b      	ldr	r3, [r3, #0]
 8001a98:	4a0d      	ldr	r2, [pc, #52]	; (8001ad0 <HAL_Init+0x40>)
 8001a9a:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8001a9e:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 8001aa0:	4b0b      	ldr	r3, [pc, #44]	; (8001ad0 <HAL_Init+0x40>)
 8001aa2:	681b      	ldr	r3, [r3, #0]
 8001aa4:	4a0a      	ldr	r2, [pc, #40]	; (8001ad0 <HAL_Init+0x40>)
 8001aa6:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8001aaa:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8001aac:	4b08      	ldr	r3, [pc, #32]	; (8001ad0 <HAL_Init+0x40>)
 8001aae:	681b      	ldr	r3, [r3, #0]
 8001ab0:	4a07      	ldr	r2, [pc, #28]	; (8001ad0 <HAL_Init+0x40>)
 8001ab2:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8001ab6:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8001ab8:	2003      	movs	r0, #3
 8001aba:	f000 f8d8 	bl	8001c6e <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8001abe:	2000      	movs	r0, #0
 8001ac0:	f7ff fcae 	bl	8001420 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8001ac4:	f7ff f94e 	bl	8000d64 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8001ac8:	2300      	movs	r3, #0
}
 8001aca:	4618      	mov	r0, r3
 8001acc:	bd80      	pop	{r7, pc}
 8001ace:	bf00      	nop
 8001ad0:	40023c00 	.word	0x40023c00

08001ad4 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8001ad4:	b480      	push	{r7}
 8001ad6:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8001ad8:	4b06      	ldr	r3, [pc, #24]	; (8001af4 <HAL_IncTick+0x20>)
 8001ada:	781b      	ldrb	r3, [r3, #0]
 8001adc:	461a      	mov	r2, r3
 8001ade:	4b06      	ldr	r3, [pc, #24]	; (8001af8 <HAL_IncTick+0x24>)
 8001ae0:	681b      	ldr	r3, [r3, #0]
 8001ae2:	4413      	add	r3, r2
 8001ae4:	4a04      	ldr	r2, [pc, #16]	; (8001af8 <HAL_IncTick+0x24>)
 8001ae6:	6013      	str	r3, [r2, #0]
}
 8001ae8:	bf00      	nop
 8001aea:	46bd      	mov	sp, r7
 8001aec:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001af0:	4770      	bx	lr
 8001af2:	bf00      	nop
 8001af4:	20000008 	.word	0x20000008
 8001af8:	2000037c 	.word	0x2000037c

08001afc <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8001afc:	b480      	push	{r7}
 8001afe:	af00      	add	r7, sp, #0
  return uwTick;
 8001b00:	4b03      	ldr	r3, [pc, #12]	; (8001b10 <HAL_GetTick+0x14>)
 8001b02:	681b      	ldr	r3, [r3, #0]
}
 8001b04:	4618      	mov	r0, r3
 8001b06:	46bd      	mov	sp, r7
 8001b08:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b0c:	4770      	bx	lr
 8001b0e:	bf00      	nop
 8001b10:	2000037c 	.word	0x2000037c

08001b14 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001b14:	b480      	push	{r7}
 8001b16:	b085      	sub	sp, #20
 8001b18:	af00      	add	r7, sp, #0
 8001b1a:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8001b1c:	687b      	ldr	r3, [r7, #4]
 8001b1e:	f003 0307 	and.w	r3, r3, #7
 8001b22:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8001b24:	4b0c      	ldr	r3, [pc, #48]	; (8001b58 <__NVIC_SetPriorityGrouping+0x44>)
 8001b26:	68db      	ldr	r3, [r3, #12]
 8001b28:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8001b2a:	68ba      	ldr	r2, [r7, #8]
 8001b2c:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8001b30:	4013      	ands	r3, r2
 8001b32:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8001b34:	68fb      	ldr	r3, [r7, #12]
 8001b36:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8001b38:	68bb      	ldr	r3, [r7, #8]
 8001b3a:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8001b3c:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8001b40:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8001b44:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8001b46:	4a04      	ldr	r2, [pc, #16]	; (8001b58 <__NVIC_SetPriorityGrouping+0x44>)
 8001b48:	68bb      	ldr	r3, [r7, #8]
 8001b4a:	60d3      	str	r3, [r2, #12]
}
 8001b4c:	bf00      	nop
 8001b4e:	3714      	adds	r7, #20
 8001b50:	46bd      	mov	sp, r7
 8001b52:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b56:	4770      	bx	lr
 8001b58:	e000ed00 	.word	0xe000ed00

08001b5c <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8001b5c:	b480      	push	{r7}
 8001b5e:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8001b60:	4b04      	ldr	r3, [pc, #16]	; (8001b74 <__NVIC_GetPriorityGrouping+0x18>)
 8001b62:	68db      	ldr	r3, [r3, #12]
 8001b64:	0a1b      	lsrs	r3, r3, #8
 8001b66:	f003 0307 	and.w	r3, r3, #7
}
 8001b6a:	4618      	mov	r0, r3
 8001b6c:	46bd      	mov	sp, r7
 8001b6e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b72:	4770      	bx	lr
 8001b74:	e000ed00 	.word	0xe000ed00

08001b78 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001b78:	b480      	push	{r7}
 8001b7a:	b083      	sub	sp, #12
 8001b7c:	af00      	add	r7, sp, #0
 8001b7e:	4603      	mov	r3, r0
 8001b80:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001b82:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001b86:	2b00      	cmp	r3, #0
 8001b88:	db0b      	blt.n	8001ba2 <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8001b8a:	79fb      	ldrb	r3, [r7, #7]
 8001b8c:	f003 021f 	and.w	r2, r3, #31
 8001b90:	4907      	ldr	r1, [pc, #28]	; (8001bb0 <__NVIC_EnableIRQ+0x38>)
 8001b92:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001b96:	095b      	lsrs	r3, r3, #5
 8001b98:	2001      	movs	r0, #1
 8001b9a:	fa00 f202 	lsl.w	r2, r0, r2
 8001b9e:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 8001ba2:	bf00      	nop
 8001ba4:	370c      	adds	r7, #12
 8001ba6:	46bd      	mov	sp, r7
 8001ba8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001bac:	4770      	bx	lr
 8001bae:	bf00      	nop
 8001bb0:	e000e100 	.word	0xe000e100

08001bb4 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8001bb4:	b480      	push	{r7}
 8001bb6:	b083      	sub	sp, #12
 8001bb8:	af00      	add	r7, sp, #0
 8001bba:	4603      	mov	r3, r0
 8001bbc:	6039      	str	r1, [r7, #0]
 8001bbe:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001bc0:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001bc4:	2b00      	cmp	r3, #0
 8001bc6:	db0a      	blt.n	8001bde <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001bc8:	683b      	ldr	r3, [r7, #0]
 8001bca:	b2da      	uxtb	r2, r3
 8001bcc:	490c      	ldr	r1, [pc, #48]	; (8001c00 <__NVIC_SetPriority+0x4c>)
 8001bce:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001bd2:	0112      	lsls	r2, r2, #4
 8001bd4:	b2d2      	uxtb	r2, r2
 8001bd6:	440b      	add	r3, r1
 8001bd8:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8001bdc:	e00a      	b.n	8001bf4 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001bde:	683b      	ldr	r3, [r7, #0]
 8001be0:	b2da      	uxtb	r2, r3
 8001be2:	4908      	ldr	r1, [pc, #32]	; (8001c04 <__NVIC_SetPriority+0x50>)
 8001be4:	79fb      	ldrb	r3, [r7, #7]
 8001be6:	f003 030f 	and.w	r3, r3, #15
 8001bea:	3b04      	subs	r3, #4
 8001bec:	0112      	lsls	r2, r2, #4
 8001bee:	b2d2      	uxtb	r2, r2
 8001bf0:	440b      	add	r3, r1
 8001bf2:	761a      	strb	r2, [r3, #24]
}
 8001bf4:	bf00      	nop
 8001bf6:	370c      	adds	r7, #12
 8001bf8:	46bd      	mov	sp, r7
 8001bfa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001bfe:	4770      	bx	lr
 8001c00:	e000e100 	.word	0xe000e100
 8001c04:	e000ed00 	.word	0xe000ed00

08001c08 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8001c08:	b480      	push	{r7}
 8001c0a:	b089      	sub	sp, #36	; 0x24
 8001c0c:	af00      	add	r7, sp, #0
 8001c0e:	60f8      	str	r0, [r7, #12]
 8001c10:	60b9      	str	r1, [r7, #8]
 8001c12:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8001c14:	68fb      	ldr	r3, [r7, #12]
 8001c16:	f003 0307 	and.w	r3, r3, #7
 8001c1a:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8001c1c:	69fb      	ldr	r3, [r7, #28]
 8001c1e:	f1c3 0307 	rsb	r3, r3, #7
 8001c22:	2b04      	cmp	r3, #4
 8001c24:	bf28      	it	cs
 8001c26:	2304      	movcs	r3, #4
 8001c28:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8001c2a:	69fb      	ldr	r3, [r7, #28]
 8001c2c:	3304      	adds	r3, #4
 8001c2e:	2b06      	cmp	r3, #6
 8001c30:	d902      	bls.n	8001c38 <NVIC_EncodePriority+0x30>
 8001c32:	69fb      	ldr	r3, [r7, #28]
 8001c34:	3b03      	subs	r3, #3
 8001c36:	e000      	b.n	8001c3a <NVIC_EncodePriority+0x32>
 8001c38:	2300      	movs	r3, #0
 8001c3a:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001c3c:	f04f 32ff 	mov.w	r2, #4294967295
 8001c40:	69bb      	ldr	r3, [r7, #24]
 8001c42:	fa02 f303 	lsl.w	r3, r2, r3
 8001c46:	43da      	mvns	r2, r3
 8001c48:	68bb      	ldr	r3, [r7, #8]
 8001c4a:	401a      	ands	r2, r3
 8001c4c:	697b      	ldr	r3, [r7, #20]
 8001c4e:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8001c50:	f04f 31ff 	mov.w	r1, #4294967295
 8001c54:	697b      	ldr	r3, [r7, #20]
 8001c56:	fa01 f303 	lsl.w	r3, r1, r3
 8001c5a:	43d9      	mvns	r1, r3
 8001c5c:	687b      	ldr	r3, [r7, #4]
 8001c5e:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001c60:	4313      	orrs	r3, r2
         );
}
 8001c62:	4618      	mov	r0, r3
 8001c64:	3724      	adds	r7, #36	; 0x24
 8001c66:	46bd      	mov	sp, r7
 8001c68:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c6c:	4770      	bx	lr

08001c6e <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001c6e:	b580      	push	{r7, lr}
 8001c70:	b082      	sub	sp, #8
 8001c72:	af00      	add	r7, sp, #0
 8001c74:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8001c76:	6878      	ldr	r0, [r7, #4]
 8001c78:	f7ff ff4c 	bl	8001b14 <__NVIC_SetPriorityGrouping>
}
 8001c7c:	bf00      	nop
 8001c7e:	3708      	adds	r7, #8
 8001c80:	46bd      	mov	sp, r7
 8001c82:	bd80      	pop	{r7, pc}

08001c84 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8001c84:	b580      	push	{r7, lr}
 8001c86:	b086      	sub	sp, #24
 8001c88:	af00      	add	r7, sp, #0
 8001c8a:	4603      	mov	r3, r0
 8001c8c:	60b9      	str	r1, [r7, #8]
 8001c8e:	607a      	str	r2, [r7, #4]
 8001c90:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8001c92:	2300      	movs	r3, #0
 8001c94:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8001c96:	f7ff ff61 	bl	8001b5c <__NVIC_GetPriorityGrouping>
 8001c9a:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8001c9c:	687a      	ldr	r2, [r7, #4]
 8001c9e:	68b9      	ldr	r1, [r7, #8]
 8001ca0:	6978      	ldr	r0, [r7, #20]
 8001ca2:	f7ff ffb1 	bl	8001c08 <NVIC_EncodePriority>
 8001ca6:	4602      	mov	r2, r0
 8001ca8:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8001cac:	4611      	mov	r1, r2
 8001cae:	4618      	mov	r0, r3
 8001cb0:	f7ff ff80 	bl	8001bb4 <__NVIC_SetPriority>
}
 8001cb4:	bf00      	nop
 8001cb6:	3718      	adds	r7, #24
 8001cb8:	46bd      	mov	sp, r7
 8001cba:	bd80      	pop	{r7, pc}

08001cbc <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001cbc:	b580      	push	{r7, lr}
 8001cbe:	b082      	sub	sp, #8
 8001cc0:	af00      	add	r7, sp, #0
 8001cc2:	4603      	mov	r3, r0
 8001cc4:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8001cc6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001cca:	4618      	mov	r0, r3
 8001ccc:	f7ff ff54 	bl	8001b78 <__NVIC_EnableIRQ>
}
 8001cd0:	bf00      	nop
 8001cd2:	3708      	adds	r7, #8
 8001cd4:	46bd      	mov	sp, r7
 8001cd6:	bd80      	pop	{r7, pc}

08001cd8 <HAL_CRC_Init>:
  *         parameters in the CRC_InitTypeDef and create the associated handle.
  * @param  hcrc CRC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CRC_Init(CRC_HandleTypeDef *hcrc)
{
 8001cd8:	b580      	push	{r7, lr}
 8001cda:	b082      	sub	sp, #8
 8001cdc:	af00      	add	r7, sp, #0
 8001cde:	6078      	str	r0, [r7, #4]
  /* Check the CRC handle allocation */
  if (hcrc == NULL)
 8001ce0:	687b      	ldr	r3, [r7, #4]
 8001ce2:	2b00      	cmp	r3, #0
 8001ce4:	d101      	bne.n	8001cea <HAL_CRC_Init+0x12>
  {
    return HAL_ERROR;
 8001ce6:	2301      	movs	r3, #1
 8001ce8:	e00e      	b.n	8001d08 <HAL_CRC_Init+0x30>
  }

  /* Check the parameters */
  assert_param(IS_CRC_ALL_INSTANCE(hcrc->Instance));

  if (hcrc->State == HAL_CRC_STATE_RESET)
 8001cea:	687b      	ldr	r3, [r7, #4]
 8001cec:	795b      	ldrb	r3, [r3, #5]
 8001cee:	b2db      	uxtb	r3, r3
 8001cf0:	2b00      	cmp	r3, #0
 8001cf2:	d105      	bne.n	8001d00 <HAL_CRC_Init+0x28>
  {
    /* Allocate lock resource and initialize it */
    hcrc->Lock = HAL_UNLOCKED;
 8001cf4:	687b      	ldr	r3, [r7, #4]
 8001cf6:	2200      	movs	r2, #0
 8001cf8:	711a      	strb	r2, [r3, #4]
    /* Init the low level hardware */
    HAL_CRC_MspInit(hcrc);
 8001cfa:	6878      	ldr	r0, [r7, #4]
 8001cfc:	f7ff f85e 	bl	8000dbc <HAL_CRC_MspInit>
  }

  /* Change CRC peripheral state */
  hcrc->State = HAL_CRC_STATE_READY;
 8001d00:	687b      	ldr	r3, [r7, #4]
 8001d02:	2201      	movs	r2, #1
 8001d04:	715a      	strb	r2, [r3, #5]

  /* Return function status */
  return HAL_OK;
 8001d06:	2300      	movs	r3, #0
}
 8001d08:	4618      	mov	r0, r3
 8001d0a:	3708      	adds	r7, #8
 8001d0c:	46bd      	mov	sp, r7
 8001d0e:	bd80      	pop	{r7, pc}

08001d10 <HAL_DMA2D_Init>:
  * @param  hdma2d pointer to a DMA2D_HandleTypeDef structure that contains
  *                 the configuration information for the DMA2D.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA2D_Init(DMA2D_HandleTypeDef *hdma2d)
{
 8001d10:	b580      	push	{r7, lr}
 8001d12:	b082      	sub	sp, #8
 8001d14:	af00      	add	r7, sp, #0
 8001d16:	6078      	str	r0, [r7, #4]
  /* Check the DMA2D peripheral state */
  if (hdma2d == NULL)
 8001d18:	687b      	ldr	r3, [r7, #4]
 8001d1a:	2b00      	cmp	r3, #0
 8001d1c:	d101      	bne.n	8001d22 <HAL_DMA2D_Init+0x12>
  {
    return HAL_ERROR;
 8001d1e:	2301      	movs	r3, #1
 8001d20:	e03b      	b.n	8001d9a <HAL_DMA2D_Init+0x8a>

    /* Init the low level hardware */
    hdma2d->MspInitCallback(hdma2d);
  }
#else
  if (hdma2d->State == HAL_DMA2D_STATE_RESET)
 8001d22:	687b      	ldr	r3, [r7, #4]
 8001d24:	f893 3039 	ldrb.w	r3, [r3, #57]	; 0x39
 8001d28:	b2db      	uxtb	r3, r3
 8001d2a:	2b00      	cmp	r3, #0
 8001d2c:	d106      	bne.n	8001d3c <HAL_DMA2D_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hdma2d->Lock = HAL_UNLOCKED;
 8001d2e:	687b      	ldr	r3, [r7, #4]
 8001d30:	2200      	movs	r2, #0
 8001d32:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
    /* Init the low level hardware */
    HAL_DMA2D_MspInit(hdma2d);
 8001d36:	6878      	ldr	r0, [r7, #4]
 8001d38:	f7ff f862 	bl	8000e00 <HAL_DMA2D_MspInit>
  }
#endif /* (USE_HAL_DMA2D_REGISTER_CALLBACKS) */

  /* Change DMA2D peripheral state */
  hdma2d->State = HAL_DMA2D_STATE_BUSY;
 8001d3c:	687b      	ldr	r3, [r7, #4]
 8001d3e:	2202      	movs	r2, #2
 8001d40:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

  /* DMA2D CR register configuration -------------------------------------------*/
  MODIFY_REG(hdma2d->Instance->CR, DMA2D_CR_MODE, hdma2d->Init.Mode);
 8001d44:	687b      	ldr	r3, [r7, #4]
 8001d46:	681b      	ldr	r3, [r3, #0]
 8001d48:	681b      	ldr	r3, [r3, #0]
 8001d4a:	f423 3140 	bic.w	r1, r3, #196608	; 0x30000
 8001d4e:	687b      	ldr	r3, [r7, #4]
 8001d50:	685a      	ldr	r2, [r3, #4]
 8001d52:	687b      	ldr	r3, [r7, #4]
 8001d54:	681b      	ldr	r3, [r3, #0]
 8001d56:	430a      	orrs	r2, r1
 8001d58:	601a      	str	r2, [r3, #0]

  /* DMA2D OPFCCR register configuration ---------------------------------------*/
  MODIFY_REG(hdma2d->Instance->OPFCCR, DMA2D_OPFCCR_CM, hdma2d->Init.ColorMode);
 8001d5a:	687b      	ldr	r3, [r7, #4]
 8001d5c:	681b      	ldr	r3, [r3, #0]
 8001d5e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8001d60:	f023 0107 	bic.w	r1, r3, #7
 8001d64:	687b      	ldr	r3, [r7, #4]
 8001d66:	689a      	ldr	r2, [r3, #8]
 8001d68:	687b      	ldr	r3, [r7, #4]
 8001d6a:	681b      	ldr	r3, [r3, #0]
 8001d6c:	430a      	orrs	r2, r1
 8001d6e:	635a      	str	r2, [r3, #52]	; 0x34

  /* DMA2D OOR register configuration ------------------------------------------*/
  MODIFY_REG(hdma2d->Instance->OOR, DMA2D_OOR_LO, hdma2d->Init.OutputOffset);
 8001d70:	687b      	ldr	r3, [r7, #4]
 8001d72:	681b      	ldr	r3, [r3, #0]
 8001d74:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001d76:	f423 537f 	bic.w	r3, r3, #16320	; 0x3fc0
 8001d7a:	f023 033f 	bic.w	r3, r3, #63	; 0x3f
 8001d7e:	687a      	ldr	r2, [r7, #4]
 8001d80:	68d1      	ldr	r1, [r2, #12]
 8001d82:	687a      	ldr	r2, [r7, #4]
 8001d84:	6812      	ldr	r2, [r2, #0]
 8001d86:	430b      	orrs	r3, r1
 8001d88:	6413      	str	r3, [r2, #64]	; 0x40


  /* Update error code */
  hdma2d->ErrorCode = HAL_DMA2D_ERROR_NONE;
 8001d8a:	687b      	ldr	r3, [r7, #4]
 8001d8c:	2200      	movs	r2, #0
 8001d8e:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Initialize the DMA2D state*/
  hdma2d->State  = HAL_DMA2D_STATE_READY;
 8001d90:	687b      	ldr	r3, [r7, #4]
 8001d92:	2201      	movs	r2, #1
 8001d94:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

  return HAL_OK;
 8001d98:	2300      	movs	r3, #0
}
 8001d9a:	4618      	mov	r0, r3
 8001d9c:	3708      	adds	r7, #8
 8001d9e:	46bd      	mov	sp, r7
 8001da0:	bd80      	pop	{r7, pc}

08001da2 <HAL_DMA2D_IRQHandler>:
  * @param  hdma2d Pointer to a DMA2D_HandleTypeDef structure that contains
  *                 the configuration information for the DMA2D.
  * @retval HAL status
  */
void HAL_DMA2D_IRQHandler(DMA2D_HandleTypeDef *hdma2d)
{
 8001da2:	b580      	push	{r7, lr}
 8001da4:	b084      	sub	sp, #16
 8001da6:	af00      	add	r7, sp, #0
 8001da8:	6078      	str	r0, [r7, #4]
  uint32_t isrflags = READ_REG(hdma2d->Instance->ISR);
 8001daa:	687b      	ldr	r3, [r7, #4]
 8001dac:	681b      	ldr	r3, [r3, #0]
 8001dae:	685b      	ldr	r3, [r3, #4]
 8001db0:	60fb      	str	r3, [r7, #12]
  uint32_t crflags = READ_REG(hdma2d->Instance->CR);
 8001db2:	687b      	ldr	r3, [r7, #4]
 8001db4:	681b      	ldr	r3, [r3, #0]
 8001db6:	681b      	ldr	r3, [r3, #0]
 8001db8:	60bb      	str	r3, [r7, #8]

  /* Transfer Error Interrupt management ***************************************/
  if ((isrflags & DMA2D_FLAG_TE) != 0U)
 8001dba:	68fb      	ldr	r3, [r7, #12]
 8001dbc:	f003 0301 	and.w	r3, r3, #1
 8001dc0:	2b00      	cmp	r3, #0
 8001dc2:	d026      	beq.n	8001e12 <HAL_DMA2D_IRQHandler+0x70>
  {
    if ((crflags & DMA2D_IT_TE) != 0U)
 8001dc4:	68bb      	ldr	r3, [r7, #8]
 8001dc6:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001dca:	2b00      	cmp	r3, #0
 8001dcc:	d021      	beq.n	8001e12 <HAL_DMA2D_IRQHandler+0x70>
    {
      /* Disable the transfer Error interrupt */
      __HAL_DMA2D_DISABLE_IT(hdma2d, DMA2D_IT_TE);
 8001dce:	687b      	ldr	r3, [r7, #4]
 8001dd0:	681b      	ldr	r3, [r3, #0]
 8001dd2:	681a      	ldr	r2, [r3, #0]
 8001dd4:	687b      	ldr	r3, [r7, #4]
 8001dd6:	681b      	ldr	r3, [r3, #0]
 8001dd8:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8001ddc:	601a      	str	r2, [r3, #0]

      /* Update error code */
      hdma2d->ErrorCode |= HAL_DMA2D_ERROR_TE;
 8001dde:	687b      	ldr	r3, [r7, #4]
 8001de0:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8001de2:	f043 0201 	orr.w	r2, r3, #1
 8001de6:	687b      	ldr	r3, [r7, #4]
 8001de8:	63da      	str	r2, [r3, #60]	; 0x3c

      /* Clear the transfer error flag */
      __HAL_DMA2D_CLEAR_FLAG(hdma2d, DMA2D_FLAG_TE);
 8001dea:	687b      	ldr	r3, [r7, #4]
 8001dec:	681b      	ldr	r3, [r3, #0]
 8001dee:	2201      	movs	r2, #1
 8001df0:	609a      	str	r2, [r3, #8]

      /* Change DMA2D state */
      hdma2d->State = HAL_DMA2D_STATE_ERROR;
 8001df2:	687b      	ldr	r3, [r7, #4]
 8001df4:	2204      	movs	r2, #4
 8001df6:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

      /* Process Unlocked */
      __HAL_UNLOCK(hdma2d);
 8001dfa:	687b      	ldr	r3, [r7, #4]
 8001dfc:	2200      	movs	r2, #0
 8001dfe:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

      if (hdma2d->XferErrorCallback != NULL)
 8001e02:	687b      	ldr	r3, [r7, #4]
 8001e04:	695b      	ldr	r3, [r3, #20]
 8001e06:	2b00      	cmp	r3, #0
 8001e08:	d003      	beq.n	8001e12 <HAL_DMA2D_IRQHandler+0x70>
      {
        /* Transfer error Callback */
        hdma2d->XferErrorCallback(hdma2d);
 8001e0a:	687b      	ldr	r3, [r7, #4]
 8001e0c:	695b      	ldr	r3, [r3, #20]
 8001e0e:	6878      	ldr	r0, [r7, #4]
 8001e10:	4798      	blx	r3
      }
    }
  }
  /* Configuration Error Interrupt management **********************************/
  if ((isrflags & DMA2D_FLAG_CE) != 0U)
 8001e12:	68fb      	ldr	r3, [r7, #12]
 8001e14:	f003 0320 	and.w	r3, r3, #32
 8001e18:	2b00      	cmp	r3, #0
 8001e1a:	d026      	beq.n	8001e6a <HAL_DMA2D_IRQHandler+0xc8>
  {
    if ((crflags & DMA2D_IT_CE) != 0U)
 8001e1c:	68bb      	ldr	r3, [r7, #8]
 8001e1e:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8001e22:	2b00      	cmp	r3, #0
 8001e24:	d021      	beq.n	8001e6a <HAL_DMA2D_IRQHandler+0xc8>
    {
      /* Disable the Configuration Error interrupt */
      __HAL_DMA2D_DISABLE_IT(hdma2d, DMA2D_IT_CE);
 8001e26:	687b      	ldr	r3, [r7, #4]
 8001e28:	681b      	ldr	r3, [r3, #0]
 8001e2a:	681a      	ldr	r2, [r3, #0]
 8001e2c:	687b      	ldr	r3, [r7, #4]
 8001e2e:	681b      	ldr	r3, [r3, #0]
 8001e30:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8001e34:	601a      	str	r2, [r3, #0]

      /* Clear the Configuration error flag */
      __HAL_DMA2D_CLEAR_FLAG(hdma2d, DMA2D_FLAG_CE);
 8001e36:	687b      	ldr	r3, [r7, #4]
 8001e38:	681b      	ldr	r3, [r3, #0]
 8001e3a:	2220      	movs	r2, #32
 8001e3c:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma2d->ErrorCode |= HAL_DMA2D_ERROR_CE;
 8001e3e:	687b      	ldr	r3, [r7, #4]
 8001e40:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8001e42:	f043 0202 	orr.w	r2, r3, #2
 8001e46:	687b      	ldr	r3, [r7, #4]
 8001e48:	63da      	str	r2, [r3, #60]	; 0x3c

      /* Change DMA2D state */
      hdma2d->State = HAL_DMA2D_STATE_ERROR;
 8001e4a:	687b      	ldr	r3, [r7, #4]
 8001e4c:	2204      	movs	r2, #4
 8001e4e:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

      /* Process Unlocked */
      __HAL_UNLOCK(hdma2d);
 8001e52:	687b      	ldr	r3, [r7, #4]
 8001e54:	2200      	movs	r2, #0
 8001e56:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

      if (hdma2d->XferErrorCallback != NULL)
 8001e5a:	687b      	ldr	r3, [r7, #4]
 8001e5c:	695b      	ldr	r3, [r3, #20]
 8001e5e:	2b00      	cmp	r3, #0
 8001e60:	d003      	beq.n	8001e6a <HAL_DMA2D_IRQHandler+0xc8>
      {
        /* Transfer error Callback */
        hdma2d->XferErrorCallback(hdma2d);
 8001e62:	687b      	ldr	r3, [r7, #4]
 8001e64:	695b      	ldr	r3, [r3, #20]
 8001e66:	6878      	ldr	r0, [r7, #4]
 8001e68:	4798      	blx	r3
      }
    }
  }
  /* CLUT access Error Interrupt management ***********************************/
  if ((isrflags & DMA2D_FLAG_CAE) != 0U)
 8001e6a:	68fb      	ldr	r3, [r7, #12]
 8001e6c:	f003 0308 	and.w	r3, r3, #8
 8001e70:	2b00      	cmp	r3, #0
 8001e72:	d026      	beq.n	8001ec2 <HAL_DMA2D_IRQHandler+0x120>
  {
    if ((crflags & DMA2D_IT_CAE) != 0U)
 8001e74:	68bb      	ldr	r3, [r7, #8]
 8001e76:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8001e7a:	2b00      	cmp	r3, #0
 8001e7c:	d021      	beq.n	8001ec2 <HAL_DMA2D_IRQHandler+0x120>
    {
      /* Disable the CLUT access error interrupt */
      __HAL_DMA2D_DISABLE_IT(hdma2d, DMA2D_IT_CAE);
 8001e7e:	687b      	ldr	r3, [r7, #4]
 8001e80:	681b      	ldr	r3, [r3, #0]
 8001e82:	681a      	ldr	r2, [r3, #0]
 8001e84:	687b      	ldr	r3, [r7, #4]
 8001e86:	681b      	ldr	r3, [r3, #0]
 8001e88:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8001e8c:	601a      	str	r2, [r3, #0]

      /* Clear the CLUT access error flag */
      __HAL_DMA2D_CLEAR_FLAG(hdma2d, DMA2D_FLAG_CAE);
 8001e8e:	687b      	ldr	r3, [r7, #4]
 8001e90:	681b      	ldr	r3, [r3, #0]
 8001e92:	2208      	movs	r2, #8
 8001e94:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma2d->ErrorCode |= HAL_DMA2D_ERROR_CAE;
 8001e96:	687b      	ldr	r3, [r7, #4]
 8001e98:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8001e9a:	f043 0204 	orr.w	r2, r3, #4
 8001e9e:	687b      	ldr	r3, [r7, #4]
 8001ea0:	63da      	str	r2, [r3, #60]	; 0x3c

      /* Change DMA2D state */
      hdma2d->State = HAL_DMA2D_STATE_ERROR;
 8001ea2:	687b      	ldr	r3, [r7, #4]
 8001ea4:	2204      	movs	r2, #4
 8001ea6:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

      /* Process Unlocked */
      __HAL_UNLOCK(hdma2d);
 8001eaa:	687b      	ldr	r3, [r7, #4]
 8001eac:	2200      	movs	r2, #0
 8001eae:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

      if (hdma2d->XferErrorCallback != NULL)
 8001eb2:	687b      	ldr	r3, [r7, #4]
 8001eb4:	695b      	ldr	r3, [r3, #20]
 8001eb6:	2b00      	cmp	r3, #0
 8001eb8:	d003      	beq.n	8001ec2 <HAL_DMA2D_IRQHandler+0x120>
      {
        /* Transfer error Callback */
        hdma2d->XferErrorCallback(hdma2d);
 8001eba:	687b      	ldr	r3, [r7, #4]
 8001ebc:	695b      	ldr	r3, [r3, #20]
 8001ebe:	6878      	ldr	r0, [r7, #4]
 8001ec0:	4798      	blx	r3
      }
    }
  }
  /* Transfer watermark Interrupt management **********************************/
  if ((isrflags & DMA2D_FLAG_TW) != 0U)
 8001ec2:	68fb      	ldr	r3, [r7, #12]
 8001ec4:	f003 0304 	and.w	r3, r3, #4
 8001ec8:	2b00      	cmp	r3, #0
 8001eca:	d013      	beq.n	8001ef4 <HAL_DMA2D_IRQHandler+0x152>
  {
    if ((crflags & DMA2D_IT_TW) != 0U)
 8001ecc:	68bb      	ldr	r3, [r7, #8]
 8001ece:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8001ed2:	2b00      	cmp	r3, #0
 8001ed4:	d00e      	beq.n	8001ef4 <HAL_DMA2D_IRQHandler+0x152>
    {
      /* Disable the transfer watermark interrupt */
      __HAL_DMA2D_DISABLE_IT(hdma2d, DMA2D_IT_TW);
 8001ed6:	687b      	ldr	r3, [r7, #4]
 8001ed8:	681b      	ldr	r3, [r3, #0]
 8001eda:	681a      	ldr	r2, [r3, #0]
 8001edc:	687b      	ldr	r3, [r7, #4]
 8001ede:	681b      	ldr	r3, [r3, #0]
 8001ee0:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8001ee4:	601a      	str	r2, [r3, #0]

      /* Clear the transfer watermark flag */
      __HAL_DMA2D_CLEAR_FLAG(hdma2d, DMA2D_FLAG_TW);
 8001ee6:	687b      	ldr	r3, [r7, #4]
 8001ee8:	681b      	ldr	r3, [r3, #0]
 8001eea:	2204      	movs	r2, #4
 8001eec:	609a      	str	r2, [r3, #8]

      /* Transfer watermark Callback */
#if (USE_HAL_DMA2D_REGISTER_CALLBACKS == 1)
      hdma2d->LineEventCallback(hdma2d);
#else
      HAL_DMA2D_LineEventCallback(hdma2d);
 8001eee:	6878      	ldr	r0, [r7, #4]
 8001ef0:	f000 f853 	bl	8001f9a <HAL_DMA2D_LineEventCallback>
#endif /* USE_HAL_DMA2D_REGISTER_CALLBACKS */

    }
  }
  /* Transfer Complete Interrupt management ************************************/
  if ((isrflags & DMA2D_FLAG_TC) != 0U)
 8001ef4:	68fb      	ldr	r3, [r7, #12]
 8001ef6:	f003 0302 	and.w	r3, r3, #2
 8001efa:	2b00      	cmp	r3, #0
 8001efc:	d024      	beq.n	8001f48 <HAL_DMA2D_IRQHandler+0x1a6>
  {
    if ((crflags & DMA2D_IT_TC) != 0U)
 8001efe:	68bb      	ldr	r3, [r7, #8]
 8001f00:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8001f04:	2b00      	cmp	r3, #0
 8001f06:	d01f      	beq.n	8001f48 <HAL_DMA2D_IRQHandler+0x1a6>
    {
      /* Disable the transfer complete interrupt */
      __HAL_DMA2D_DISABLE_IT(hdma2d, DMA2D_IT_TC);
 8001f08:	687b      	ldr	r3, [r7, #4]
 8001f0a:	681b      	ldr	r3, [r3, #0]
 8001f0c:	681a      	ldr	r2, [r3, #0]
 8001f0e:	687b      	ldr	r3, [r7, #4]
 8001f10:	681b      	ldr	r3, [r3, #0]
 8001f12:	f422 7200 	bic.w	r2, r2, #512	; 0x200
 8001f16:	601a      	str	r2, [r3, #0]

      /* Clear the transfer complete flag */
      __HAL_DMA2D_CLEAR_FLAG(hdma2d, DMA2D_FLAG_TC);
 8001f18:	687b      	ldr	r3, [r7, #4]
 8001f1a:	681b      	ldr	r3, [r3, #0]
 8001f1c:	2202      	movs	r2, #2
 8001f1e:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma2d->ErrorCode |= HAL_DMA2D_ERROR_NONE;
 8001f20:	687b      	ldr	r3, [r7, #4]
 8001f22:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8001f24:	687b      	ldr	r3, [r7, #4]
 8001f26:	63da      	str	r2, [r3, #60]	; 0x3c

      /* Change DMA2D state */
      hdma2d->State = HAL_DMA2D_STATE_READY;
 8001f28:	687b      	ldr	r3, [r7, #4]
 8001f2a:	2201      	movs	r2, #1
 8001f2c:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

      /* Process Unlocked */
      __HAL_UNLOCK(hdma2d);
 8001f30:	687b      	ldr	r3, [r7, #4]
 8001f32:	2200      	movs	r2, #0
 8001f34:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

      if (hdma2d->XferCpltCallback != NULL)
 8001f38:	687b      	ldr	r3, [r7, #4]
 8001f3a:	691b      	ldr	r3, [r3, #16]
 8001f3c:	2b00      	cmp	r3, #0
 8001f3e:	d003      	beq.n	8001f48 <HAL_DMA2D_IRQHandler+0x1a6>
      {
        /* Transfer complete Callback */
        hdma2d->XferCpltCallback(hdma2d);
 8001f40:	687b      	ldr	r3, [r7, #4]
 8001f42:	691b      	ldr	r3, [r3, #16]
 8001f44:	6878      	ldr	r0, [r7, #4]
 8001f46:	4798      	blx	r3
      }
    }
  }
  /* CLUT Transfer Complete Interrupt management ******************************/
  if ((isrflags & DMA2D_FLAG_CTC) != 0U)
 8001f48:	68fb      	ldr	r3, [r7, #12]
 8001f4a:	f003 0310 	and.w	r3, r3, #16
 8001f4e:	2b00      	cmp	r3, #0
 8001f50:	d01f      	beq.n	8001f92 <HAL_DMA2D_IRQHandler+0x1f0>
  {
    if ((crflags & DMA2D_IT_CTC) != 0U)
 8001f52:	68bb      	ldr	r3, [r7, #8]
 8001f54:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8001f58:	2b00      	cmp	r3, #0
 8001f5a:	d01a      	beq.n	8001f92 <HAL_DMA2D_IRQHandler+0x1f0>
    {
      /* Disable the CLUT transfer complete interrupt */
      __HAL_DMA2D_DISABLE_IT(hdma2d, DMA2D_IT_CTC);
 8001f5c:	687b      	ldr	r3, [r7, #4]
 8001f5e:	681b      	ldr	r3, [r3, #0]
 8001f60:	681a      	ldr	r2, [r3, #0]
 8001f62:	687b      	ldr	r3, [r7, #4]
 8001f64:	681b      	ldr	r3, [r3, #0]
 8001f66:	f422 5280 	bic.w	r2, r2, #4096	; 0x1000
 8001f6a:	601a      	str	r2, [r3, #0]

      /* Clear the CLUT transfer complete flag */
      __HAL_DMA2D_CLEAR_FLAG(hdma2d, DMA2D_FLAG_CTC);
 8001f6c:	687b      	ldr	r3, [r7, #4]
 8001f6e:	681b      	ldr	r3, [r3, #0]
 8001f70:	2210      	movs	r2, #16
 8001f72:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma2d->ErrorCode |= HAL_DMA2D_ERROR_NONE;
 8001f74:	687b      	ldr	r3, [r7, #4]
 8001f76:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8001f78:	687b      	ldr	r3, [r7, #4]
 8001f7a:	63da      	str	r2, [r3, #60]	; 0x3c

      /* Change DMA2D state */
      hdma2d->State = HAL_DMA2D_STATE_READY;
 8001f7c:	687b      	ldr	r3, [r7, #4]
 8001f7e:	2201      	movs	r2, #1
 8001f80:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

      /* Process Unlocked */
      __HAL_UNLOCK(hdma2d);
 8001f84:	687b      	ldr	r3, [r7, #4]
 8001f86:	2200      	movs	r2, #0
 8001f88:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

      /* CLUT Transfer complete Callback */
#if (USE_HAL_DMA2D_REGISTER_CALLBACKS == 1)
      hdma2d->CLUTLoadingCpltCallback(hdma2d);
#else
      HAL_DMA2D_CLUTLoadingCpltCallback(hdma2d);
 8001f8c:	6878      	ldr	r0, [r7, #4]
 8001f8e:	f000 f80e 	bl	8001fae <HAL_DMA2D_CLUTLoadingCpltCallback>
#endif /* USE_HAL_DMA2D_REGISTER_CALLBACKS */
    }
  }

}
 8001f92:	bf00      	nop
 8001f94:	3710      	adds	r7, #16
 8001f96:	46bd      	mov	sp, r7
 8001f98:	bd80      	pop	{r7, pc}

08001f9a <HAL_DMA2D_LineEventCallback>:
  * @param  hdma2d pointer to a DMA2D_HandleTypeDef structure that contains
  *                 the configuration information for the DMA2D.
  * @retval None
  */
__weak void HAL_DMA2D_LineEventCallback(DMA2D_HandleTypeDef *hdma2d)
{
 8001f9a:	b480      	push	{r7}
 8001f9c:	b083      	sub	sp, #12
 8001f9e:	af00      	add	r7, sp, #0
 8001fa0:	6078      	str	r0, [r7, #4]
  UNUSED(hdma2d);

  /* NOTE : This function should not be modified; when the callback is needed,
            the HAL_DMA2D_LineEventCallback can be implemented in the user file.
   */
}
 8001fa2:	bf00      	nop
 8001fa4:	370c      	adds	r7, #12
 8001fa6:	46bd      	mov	sp, r7
 8001fa8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001fac:	4770      	bx	lr

08001fae <HAL_DMA2D_CLUTLoadingCpltCallback>:
  * @param  hdma2d pointer to a DMA2D_HandleTypeDef structure that contains
  *                 the configuration information for the DMA2D.
  * @retval None
  */
__weak void HAL_DMA2D_CLUTLoadingCpltCallback(DMA2D_HandleTypeDef *hdma2d)
{
 8001fae:	b480      	push	{r7}
 8001fb0:	b083      	sub	sp, #12
 8001fb2:	af00      	add	r7, sp, #0
 8001fb4:	6078      	str	r0, [r7, #4]
  UNUSED(hdma2d);

  /* NOTE : This function should not be modified; when the callback is needed,
            the HAL_DMA2D_CLUTLoadingCpltCallback can be implemented in the user file.
   */
}
 8001fb6:	bf00      	nop
 8001fb8:	370c      	adds	r7, #12
 8001fba:	46bd      	mov	sp, r7
 8001fbc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001fc0:	4770      	bx	lr
	...

08001fc4 <HAL_DMA2D_ConfigLayer>:
  *                   This parameter can be one of the following values:
  *                   DMA2D_BACKGROUND_LAYER(0) / DMA2D_FOREGROUND_LAYER(1)
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA2D_ConfigLayer(DMA2D_HandleTypeDef *hdma2d, uint32_t LayerIdx)
{
 8001fc4:	b480      	push	{r7}
 8001fc6:	b087      	sub	sp, #28
 8001fc8:	af00      	add	r7, sp, #0
 8001fca:	6078      	str	r0, [r7, #4]
 8001fcc:	6039      	str	r1, [r7, #0]
  uint32_t regValue;

  /* Check the parameters */
  assert_param(IS_DMA2D_LAYER(LayerIdx));
  assert_param(IS_DMA2D_OFFSET(hdma2d->LayerCfg[LayerIdx].InputOffset));
  if (hdma2d->Init.Mode != DMA2D_R2M)
 8001fce:	687b      	ldr	r3, [r7, #4]
 8001fd0:	685b      	ldr	r3, [r3, #4]
 8001fd2:	f5b3 3f40 	cmp.w	r3, #196608	; 0x30000
      assert_param(IS_DMA2D_ALPHA_MODE(hdma2d->LayerCfg[LayerIdx].AlphaMode));
    }
  }

  /* Process locked */
  __HAL_LOCK(hdma2d);
 8001fd6:	687b      	ldr	r3, [r7, #4]
 8001fd8:	f893 3038 	ldrb.w	r3, [r3, #56]	; 0x38
 8001fdc:	2b01      	cmp	r3, #1
 8001fde:	d101      	bne.n	8001fe4 <HAL_DMA2D_ConfigLayer+0x20>
 8001fe0:	2302      	movs	r3, #2
 8001fe2:	e079      	b.n	80020d8 <HAL_DMA2D_ConfigLayer+0x114>
 8001fe4:	687b      	ldr	r3, [r7, #4]
 8001fe6:	2201      	movs	r2, #1
 8001fe8:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

  /* Change DMA2D peripheral state */
  hdma2d->State = HAL_DMA2D_STATE_BUSY;
 8001fec:	687b      	ldr	r3, [r7, #4]
 8001fee:	2202      	movs	r2, #2
 8001ff0:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

  pLayerCfg = &hdma2d->LayerCfg[LayerIdx];
 8001ff4:	683b      	ldr	r3, [r7, #0]
 8001ff6:	011b      	lsls	r3, r3, #4
 8001ff8:	3318      	adds	r3, #24
 8001ffa:	687a      	ldr	r2, [r7, #4]
 8001ffc:	4413      	add	r3, r2
 8001ffe:	613b      	str	r3, [r7, #16]

  /* Prepare the value to be written to the BGPFCCR or FGPFCCR register */
  regValue = pLayerCfg->InputColorMode | (pLayerCfg->AlphaMode << DMA2D_BGPFCCR_AM_Pos);
 8002000:	693b      	ldr	r3, [r7, #16]
 8002002:	685a      	ldr	r2, [r3, #4]
 8002004:	693b      	ldr	r3, [r7, #16]
 8002006:	689b      	ldr	r3, [r3, #8]
 8002008:	041b      	lsls	r3, r3, #16
 800200a:	4313      	orrs	r3, r2
 800200c:	617b      	str	r3, [r7, #20]
  regMask  = DMA2D_BGPFCCR_CM | DMA2D_BGPFCCR_AM | DMA2D_BGPFCCR_ALPHA;
 800200e:	4b35      	ldr	r3, [pc, #212]	; (80020e4 <HAL_DMA2D_ConfigLayer+0x120>)
 8002010:	60fb      	str	r3, [r7, #12]


  if ((pLayerCfg->InputColorMode == DMA2D_INPUT_A4) || (pLayerCfg->InputColorMode == DMA2D_INPUT_A8))
 8002012:	693b      	ldr	r3, [r7, #16]
 8002014:	685b      	ldr	r3, [r3, #4]
 8002016:	2b0a      	cmp	r3, #10
 8002018:	d003      	beq.n	8002022 <HAL_DMA2D_ConfigLayer+0x5e>
 800201a:	693b      	ldr	r3, [r7, #16]
 800201c:	685b      	ldr	r3, [r3, #4]
 800201e:	2b09      	cmp	r3, #9
 8002020:	d107      	bne.n	8002032 <HAL_DMA2D_ConfigLayer+0x6e>
  {
    regValue |= (pLayerCfg->InputAlpha & DMA2D_BGPFCCR_ALPHA);
 8002022:	693b      	ldr	r3, [r7, #16]
 8002024:	68db      	ldr	r3, [r3, #12]
 8002026:	f003 437f 	and.w	r3, r3, #4278190080	; 0xff000000
 800202a:	697a      	ldr	r2, [r7, #20]
 800202c:	4313      	orrs	r3, r2
 800202e:	617b      	str	r3, [r7, #20]
 8002030:	e005      	b.n	800203e <HAL_DMA2D_ConfigLayer+0x7a>
  }
  else
  {
    regValue |= (pLayerCfg->InputAlpha << DMA2D_BGPFCCR_ALPHA_Pos);
 8002032:	693b      	ldr	r3, [r7, #16]
 8002034:	68db      	ldr	r3, [r3, #12]
 8002036:	061b      	lsls	r3, r3, #24
 8002038:	697a      	ldr	r2, [r7, #20]
 800203a:	4313      	orrs	r3, r2
 800203c:	617b      	str	r3, [r7, #20]
  }

  /* Configure the background DMA2D layer */
  if (LayerIdx == DMA2D_BACKGROUND_LAYER)
 800203e:	683b      	ldr	r3, [r7, #0]
 8002040:	2b00      	cmp	r3, #0
 8002042:	d120      	bne.n	8002086 <HAL_DMA2D_ConfigLayer+0xc2>
  {
    /* Write DMA2D BGPFCCR register */
    MODIFY_REG(hdma2d->Instance->BGPFCCR, regMask, regValue);
 8002044:	687b      	ldr	r3, [r7, #4]
 8002046:	681b      	ldr	r3, [r3, #0]
 8002048:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 800204a:	68fb      	ldr	r3, [r7, #12]
 800204c:	43db      	mvns	r3, r3
 800204e:	ea02 0103 	and.w	r1, r2, r3
 8002052:	687b      	ldr	r3, [r7, #4]
 8002054:	681b      	ldr	r3, [r3, #0]
 8002056:	697a      	ldr	r2, [r7, #20]
 8002058:	430a      	orrs	r2, r1
 800205a:	625a      	str	r2, [r3, #36]	; 0x24

    /* DMA2D BGOR register configuration -------------------------------------*/
    WRITE_REG(hdma2d->Instance->BGOR, pLayerCfg->InputOffset);
 800205c:	687b      	ldr	r3, [r7, #4]
 800205e:	681b      	ldr	r3, [r3, #0]
 8002060:	693a      	ldr	r2, [r7, #16]
 8002062:	6812      	ldr	r2, [r2, #0]
 8002064:	619a      	str	r2, [r3, #24]

    /* DMA2D BGCOLR register configuration -------------------------------------*/
    if ((pLayerCfg->InputColorMode == DMA2D_INPUT_A4) || (pLayerCfg->InputColorMode == DMA2D_INPUT_A8))
 8002066:	693b      	ldr	r3, [r7, #16]
 8002068:	685b      	ldr	r3, [r3, #4]
 800206a:	2b0a      	cmp	r3, #10
 800206c:	d003      	beq.n	8002076 <HAL_DMA2D_ConfigLayer+0xb2>
 800206e:	693b      	ldr	r3, [r7, #16]
 8002070:	685b      	ldr	r3, [r3, #4]
 8002072:	2b09      	cmp	r3, #9
 8002074:	d127      	bne.n	80020c6 <HAL_DMA2D_ConfigLayer+0x102>
    {
      WRITE_REG(hdma2d->Instance->BGCOLR, pLayerCfg->InputAlpha & (DMA2D_BGCOLR_BLUE | DMA2D_BGCOLR_GREEN | \
 8002076:	693b      	ldr	r3, [r7, #16]
 8002078:	68da      	ldr	r2, [r3, #12]
 800207a:	687b      	ldr	r3, [r7, #4]
 800207c:	681b      	ldr	r3, [r3, #0]
 800207e:	f022 427f 	bic.w	r2, r2, #4278190080	; 0xff000000
 8002082:	629a      	str	r2, [r3, #40]	; 0x28
 8002084:	e01f      	b.n	80020c6 <HAL_DMA2D_ConfigLayer+0x102>
  else
  {


    /* Write DMA2D FGPFCCR register */
    MODIFY_REG(hdma2d->Instance->FGPFCCR, regMask, regValue);
 8002086:	687b      	ldr	r3, [r7, #4]
 8002088:	681b      	ldr	r3, [r3, #0]
 800208a:	69da      	ldr	r2, [r3, #28]
 800208c:	68fb      	ldr	r3, [r7, #12]
 800208e:	43db      	mvns	r3, r3
 8002090:	ea02 0103 	and.w	r1, r2, r3
 8002094:	687b      	ldr	r3, [r7, #4]
 8002096:	681b      	ldr	r3, [r3, #0]
 8002098:	697a      	ldr	r2, [r7, #20]
 800209a:	430a      	orrs	r2, r1
 800209c:	61da      	str	r2, [r3, #28]

    /* DMA2D FGOR register configuration -------------------------------------*/
    WRITE_REG(hdma2d->Instance->FGOR, pLayerCfg->InputOffset);
 800209e:	687b      	ldr	r3, [r7, #4]
 80020a0:	681b      	ldr	r3, [r3, #0]
 80020a2:	693a      	ldr	r2, [r7, #16]
 80020a4:	6812      	ldr	r2, [r2, #0]
 80020a6:	611a      	str	r2, [r3, #16]

    /* DMA2D FGCOLR register configuration -------------------------------------*/
    if ((pLayerCfg->InputColorMode == DMA2D_INPUT_A4) || (pLayerCfg->InputColorMode == DMA2D_INPUT_A8))
 80020a8:	693b      	ldr	r3, [r7, #16]
 80020aa:	685b      	ldr	r3, [r3, #4]
 80020ac:	2b0a      	cmp	r3, #10
 80020ae:	d003      	beq.n	80020b8 <HAL_DMA2D_ConfigLayer+0xf4>
 80020b0:	693b      	ldr	r3, [r7, #16]
 80020b2:	685b      	ldr	r3, [r3, #4]
 80020b4:	2b09      	cmp	r3, #9
 80020b6:	d106      	bne.n	80020c6 <HAL_DMA2D_ConfigLayer+0x102>
    {
      WRITE_REG(hdma2d->Instance->FGCOLR, pLayerCfg->InputAlpha & (DMA2D_FGCOLR_BLUE | DMA2D_FGCOLR_GREEN | \
 80020b8:	693b      	ldr	r3, [r7, #16]
 80020ba:	68da      	ldr	r2, [r3, #12]
 80020bc:	687b      	ldr	r3, [r7, #4]
 80020be:	681b      	ldr	r3, [r3, #0]
 80020c0:	f022 427f 	bic.w	r2, r2, #4278190080	; 0xff000000
 80020c4:	621a      	str	r2, [r3, #32]
                                                                   DMA2D_FGCOLR_RED));
    }
  }
  /* Initialize the DMA2D state*/
  hdma2d->State = HAL_DMA2D_STATE_READY;
 80020c6:	687b      	ldr	r3, [r7, #4]
 80020c8:	2201      	movs	r2, #1
 80020ca:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

  /* Process unlocked */
  __HAL_UNLOCK(hdma2d);
 80020ce:	687b      	ldr	r3, [r7, #4]
 80020d0:	2200      	movs	r2, #0
 80020d2:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

  return HAL_OK;
 80020d6:	2300      	movs	r3, #0
}
 80020d8:	4618      	mov	r0, r3
 80020da:	371c      	adds	r7, #28
 80020dc:	46bd      	mov	sp, r7
 80020de:	f85d 7b04 	ldr.w	r7, [sp], #4
 80020e2:	4770      	bx	lr
 80020e4:	ff03000f 	.word	0xff03000f

080020e8 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 80020e8:	b480      	push	{r7}
 80020ea:	b089      	sub	sp, #36	; 0x24
 80020ec:	af00      	add	r7, sp, #0
 80020ee:	6078      	str	r0, [r7, #4]
 80020f0:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 80020f2:	2300      	movs	r3, #0
 80020f4:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 80020f6:	2300      	movs	r3, #0
 80020f8:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 80020fa:	2300      	movs	r3, #0
 80020fc:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 80020fe:	2300      	movs	r3, #0
 8002100:	61fb      	str	r3, [r7, #28]
 8002102:	e177      	b.n	80023f4 <HAL_GPIO_Init+0x30c>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 8002104:	2201      	movs	r2, #1
 8002106:	69fb      	ldr	r3, [r7, #28]
 8002108:	fa02 f303 	lsl.w	r3, r2, r3
 800210c:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 800210e:	683b      	ldr	r3, [r7, #0]
 8002110:	681b      	ldr	r3, [r3, #0]
 8002112:	697a      	ldr	r2, [r7, #20]
 8002114:	4013      	ands	r3, r2
 8002116:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 8002118:	693a      	ldr	r2, [r7, #16]
 800211a:	697b      	ldr	r3, [r7, #20]
 800211c:	429a      	cmp	r2, r3
 800211e:	f040 8166 	bne.w	80023ee <HAL_GPIO_Init+0x306>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8002122:	683b      	ldr	r3, [r7, #0]
 8002124:	685b      	ldr	r3, [r3, #4]
 8002126:	f003 0303 	and.w	r3, r3, #3
 800212a:	2b01      	cmp	r3, #1
 800212c:	d005      	beq.n	800213a <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 800212e:	683b      	ldr	r3, [r7, #0]
 8002130:	685b      	ldr	r3, [r3, #4]
 8002132:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8002136:	2b02      	cmp	r3, #2
 8002138:	d130      	bne.n	800219c <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 800213a:	687b      	ldr	r3, [r7, #4]
 800213c:	689b      	ldr	r3, [r3, #8]
 800213e:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 8002140:	69fb      	ldr	r3, [r7, #28]
 8002142:	005b      	lsls	r3, r3, #1
 8002144:	2203      	movs	r2, #3
 8002146:	fa02 f303 	lsl.w	r3, r2, r3
 800214a:	43db      	mvns	r3, r3
 800214c:	69ba      	ldr	r2, [r7, #24]
 800214e:	4013      	ands	r3, r2
 8002150:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8002152:	683b      	ldr	r3, [r7, #0]
 8002154:	68da      	ldr	r2, [r3, #12]
 8002156:	69fb      	ldr	r3, [r7, #28]
 8002158:	005b      	lsls	r3, r3, #1
 800215a:	fa02 f303 	lsl.w	r3, r2, r3
 800215e:	69ba      	ldr	r2, [r7, #24]
 8002160:	4313      	orrs	r3, r2
 8002162:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8002164:	687b      	ldr	r3, [r7, #4]
 8002166:	69ba      	ldr	r2, [r7, #24]
 8002168:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 800216a:	687b      	ldr	r3, [r7, #4]
 800216c:	685b      	ldr	r3, [r3, #4]
 800216e:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8002170:	2201      	movs	r2, #1
 8002172:	69fb      	ldr	r3, [r7, #28]
 8002174:	fa02 f303 	lsl.w	r3, r2, r3
 8002178:	43db      	mvns	r3, r3
 800217a:	69ba      	ldr	r2, [r7, #24]
 800217c:	4013      	ands	r3, r2
 800217e:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8002180:	683b      	ldr	r3, [r7, #0]
 8002182:	685b      	ldr	r3, [r3, #4]
 8002184:	091b      	lsrs	r3, r3, #4
 8002186:	f003 0201 	and.w	r2, r3, #1
 800218a:	69fb      	ldr	r3, [r7, #28]
 800218c:	fa02 f303 	lsl.w	r3, r2, r3
 8002190:	69ba      	ldr	r2, [r7, #24]
 8002192:	4313      	orrs	r3, r2
 8002194:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8002196:	687b      	ldr	r3, [r7, #4]
 8002198:	69ba      	ldr	r2, [r7, #24]
 800219a:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 800219c:	683b      	ldr	r3, [r7, #0]
 800219e:	685b      	ldr	r3, [r3, #4]
 80021a0:	f003 0303 	and.w	r3, r3, #3
 80021a4:	2b03      	cmp	r3, #3
 80021a6:	d017      	beq.n	80021d8 <HAL_GPIO_Init+0xf0>
      {
        /* Check the parameters */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
        
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 80021a8:	687b      	ldr	r3, [r7, #4]
 80021aa:	68db      	ldr	r3, [r3, #12]
 80021ac:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 80021ae:	69fb      	ldr	r3, [r7, #28]
 80021b0:	005b      	lsls	r3, r3, #1
 80021b2:	2203      	movs	r2, #3
 80021b4:	fa02 f303 	lsl.w	r3, r2, r3
 80021b8:	43db      	mvns	r3, r3
 80021ba:	69ba      	ldr	r2, [r7, #24]
 80021bc:	4013      	ands	r3, r2
 80021be:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 80021c0:	683b      	ldr	r3, [r7, #0]
 80021c2:	689a      	ldr	r2, [r3, #8]
 80021c4:	69fb      	ldr	r3, [r7, #28]
 80021c6:	005b      	lsls	r3, r3, #1
 80021c8:	fa02 f303 	lsl.w	r3, r2, r3
 80021cc:	69ba      	ldr	r2, [r7, #24]
 80021ce:	4313      	orrs	r3, r2
 80021d0:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 80021d2:	687b      	ldr	r3, [r7, #4]
 80021d4:	69ba      	ldr	r2, [r7, #24]
 80021d6:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 80021d8:	683b      	ldr	r3, [r7, #0]
 80021da:	685b      	ldr	r3, [r3, #4]
 80021dc:	f003 0303 	and.w	r3, r3, #3
 80021e0:	2b02      	cmp	r3, #2
 80021e2:	d123      	bne.n	800222c <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 80021e4:	69fb      	ldr	r3, [r7, #28]
 80021e6:	08da      	lsrs	r2, r3, #3
 80021e8:	687b      	ldr	r3, [r7, #4]
 80021ea:	3208      	adds	r2, #8
 80021ec:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80021f0:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 80021f2:	69fb      	ldr	r3, [r7, #28]
 80021f4:	f003 0307 	and.w	r3, r3, #7
 80021f8:	009b      	lsls	r3, r3, #2
 80021fa:	220f      	movs	r2, #15
 80021fc:	fa02 f303 	lsl.w	r3, r2, r3
 8002200:	43db      	mvns	r3, r3
 8002202:	69ba      	ldr	r2, [r7, #24]
 8002204:	4013      	ands	r3, r2
 8002206:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 8002208:	683b      	ldr	r3, [r7, #0]
 800220a:	691a      	ldr	r2, [r3, #16]
 800220c:	69fb      	ldr	r3, [r7, #28]
 800220e:	f003 0307 	and.w	r3, r3, #7
 8002212:	009b      	lsls	r3, r3, #2
 8002214:	fa02 f303 	lsl.w	r3, r2, r3
 8002218:	69ba      	ldr	r2, [r7, #24]
 800221a:	4313      	orrs	r3, r2
 800221c:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 800221e:	69fb      	ldr	r3, [r7, #28]
 8002220:	08da      	lsrs	r2, r3, #3
 8002222:	687b      	ldr	r3, [r7, #4]
 8002224:	3208      	adds	r2, #8
 8002226:	69b9      	ldr	r1, [r7, #24]
 8002228:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 800222c:	687b      	ldr	r3, [r7, #4]
 800222e:	681b      	ldr	r3, [r3, #0]
 8002230:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 8002232:	69fb      	ldr	r3, [r7, #28]
 8002234:	005b      	lsls	r3, r3, #1
 8002236:	2203      	movs	r2, #3
 8002238:	fa02 f303 	lsl.w	r3, r2, r3
 800223c:	43db      	mvns	r3, r3
 800223e:	69ba      	ldr	r2, [r7, #24]
 8002240:	4013      	ands	r3, r2
 8002242:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8002244:	683b      	ldr	r3, [r7, #0]
 8002246:	685b      	ldr	r3, [r3, #4]
 8002248:	f003 0203 	and.w	r2, r3, #3
 800224c:	69fb      	ldr	r3, [r7, #28]
 800224e:	005b      	lsls	r3, r3, #1
 8002250:	fa02 f303 	lsl.w	r3, r2, r3
 8002254:	69ba      	ldr	r2, [r7, #24]
 8002256:	4313      	orrs	r3, r2
 8002258:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 800225a:	687b      	ldr	r3, [r7, #4]
 800225c:	69ba      	ldr	r2, [r7, #24]
 800225e:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 8002260:	683b      	ldr	r3, [r7, #0]
 8002262:	685b      	ldr	r3, [r3, #4]
 8002264:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8002268:	2b00      	cmp	r3, #0
 800226a:	f000 80c0 	beq.w	80023ee <HAL_GPIO_Init+0x306>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 800226e:	2300      	movs	r3, #0
 8002270:	60fb      	str	r3, [r7, #12]
 8002272:	4b66      	ldr	r3, [pc, #408]	; (800240c <HAL_GPIO_Init+0x324>)
 8002274:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002276:	4a65      	ldr	r2, [pc, #404]	; (800240c <HAL_GPIO_Init+0x324>)
 8002278:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 800227c:	6453      	str	r3, [r2, #68]	; 0x44
 800227e:	4b63      	ldr	r3, [pc, #396]	; (800240c <HAL_GPIO_Init+0x324>)
 8002280:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002282:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8002286:	60fb      	str	r3, [r7, #12]
 8002288:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 800228a:	4a61      	ldr	r2, [pc, #388]	; (8002410 <HAL_GPIO_Init+0x328>)
 800228c:	69fb      	ldr	r3, [r7, #28]
 800228e:	089b      	lsrs	r3, r3, #2
 8002290:	3302      	adds	r3, #2
 8002292:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8002296:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 8002298:	69fb      	ldr	r3, [r7, #28]
 800229a:	f003 0303 	and.w	r3, r3, #3
 800229e:	009b      	lsls	r3, r3, #2
 80022a0:	220f      	movs	r2, #15
 80022a2:	fa02 f303 	lsl.w	r3, r2, r3
 80022a6:	43db      	mvns	r3, r3
 80022a8:	69ba      	ldr	r2, [r7, #24]
 80022aa:	4013      	ands	r3, r2
 80022ac:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 80022ae:	687b      	ldr	r3, [r7, #4]
 80022b0:	4a58      	ldr	r2, [pc, #352]	; (8002414 <HAL_GPIO_Init+0x32c>)
 80022b2:	4293      	cmp	r3, r2
 80022b4:	d037      	beq.n	8002326 <HAL_GPIO_Init+0x23e>
 80022b6:	687b      	ldr	r3, [r7, #4]
 80022b8:	4a57      	ldr	r2, [pc, #348]	; (8002418 <HAL_GPIO_Init+0x330>)
 80022ba:	4293      	cmp	r3, r2
 80022bc:	d031      	beq.n	8002322 <HAL_GPIO_Init+0x23a>
 80022be:	687b      	ldr	r3, [r7, #4]
 80022c0:	4a56      	ldr	r2, [pc, #344]	; (800241c <HAL_GPIO_Init+0x334>)
 80022c2:	4293      	cmp	r3, r2
 80022c4:	d02b      	beq.n	800231e <HAL_GPIO_Init+0x236>
 80022c6:	687b      	ldr	r3, [r7, #4]
 80022c8:	4a55      	ldr	r2, [pc, #340]	; (8002420 <HAL_GPIO_Init+0x338>)
 80022ca:	4293      	cmp	r3, r2
 80022cc:	d025      	beq.n	800231a <HAL_GPIO_Init+0x232>
 80022ce:	687b      	ldr	r3, [r7, #4]
 80022d0:	4a54      	ldr	r2, [pc, #336]	; (8002424 <HAL_GPIO_Init+0x33c>)
 80022d2:	4293      	cmp	r3, r2
 80022d4:	d01f      	beq.n	8002316 <HAL_GPIO_Init+0x22e>
 80022d6:	687b      	ldr	r3, [r7, #4]
 80022d8:	4a53      	ldr	r2, [pc, #332]	; (8002428 <HAL_GPIO_Init+0x340>)
 80022da:	4293      	cmp	r3, r2
 80022dc:	d019      	beq.n	8002312 <HAL_GPIO_Init+0x22a>
 80022de:	687b      	ldr	r3, [r7, #4]
 80022e0:	4a52      	ldr	r2, [pc, #328]	; (800242c <HAL_GPIO_Init+0x344>)
 80022e2:	4293      	cmp	r3, r2
 80022e4:	d013      	beq.n	800230e <HAL_GPIO_Init+0x226>
 80022e6:	687b      	ldr	r3, [r7, #4]
 80022e8:	4a51      	ldr	r2, [pc, #324]	; (8002430 <HAL_GPIO_Init+0x348>)
 80022ea:	4293      	cmp	r3, r2
 80022ec:	d00d      	beq.n	800230a <HAL_GPIO_Init+0x222>
 80022ee:	687b      	ldr	r3, [r7, #4]
 80022f0:	4a50      	ldr	r2, [pc, #320]	; (8002434 <HAL_GPIO_Init+0x34c>)
 80022f2:	4293      	cmp	r3, r2
 80022f4:	d007      	beq.n	8002306 <HAL_GPIO_Init+0x21e>
 80022f6:	687b      	ldr	r3, [r7, #4]
 80022f8:	4a4f      	ldr	r2, [pc, #316]	; (8002438 <HAL_GPIO_Init+0x350>)
 80022fa:	4293      	cmp	r3, r2
 80022fc:	d101      	bne.n	8002302 <HAL_GPIO_Init+0x21a>
 80022fe:	2309      	movs	r3, #9
 8002300:	e012      	b.n	8002328 <HAL_GPIO_Init+0x240>
 8002302:	230a      	movs	r3, #10
 8002304:	e010      	b.n	8002328 <HAL_GPIO_Init+0x240>
 8002306:	2308      	movs	r3, #8
 8002308:	e00e      	b.n	8002328 <HAL_GPIO_Init+0x240>
 800230a:	2307      	movs	r3, #7
 800230c:	e00c      	b.n	8002328 <HAL_GPIO_Init+0x240>
 800230e:	2306      	movs	r3, #6
 8002310:	e00a      	b.n	8002328 <HAL_GPIO_Init+0x240>
 8002312:	2305      	movs	r3, #5
 8002314:	e008      	b.n	8002328 <HAL_GPIO_Init+0x240>
 8002316:	2304      	movs	r3, #4
 8002318:	e006      	b.n	8002328 <HAL_GPIO_Init+0x240>
 800231a:	2303      	movs	r3, #3
 800231c:	e004      	b.n	8002328 <HAL_GPIO_Init+0x240>
 800231e:	2302      	movs	r3, #2
 8002320:	e002      	b.n	8002328 <HAL_GPIO_Init+0x240>
 8002322:	2301      	movs	r3, #1
 8002324:	e000      	b.n	8002328 <HAL_GPIO_Init+0x240>
 8002326:	2300      	movs	r3, #0
 8002328:	69fa      	ldr	r2, [r7, #28]
 800232a:	f002 0203 	and.w	r2, r2, #3
 800232e:	0092      	lsls	r2, r2, #2
 8002330:	4093      	lsls	r3, r2
 8002332:	69ba      	ldr	r2, [r7, #24]
 8002334:	4313      	orrs	r3, r2
 8002336:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8002338:	4935      	ldr	r1, [pc, #212]	; (8002410 <HAL_GPIO_Init+0x328>)
 800233a:	69fb      	ldr	r3, [r7, #28]
 800233c:	089b      	lsrs	r3, r3, #2
 800233e:	3302      	adds	r3, #2
 8002340:	69ba      	ldr	r2, [r7, #24]
 8002342:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8002346:	4b3d      	ldr	r3, [pc, #244]	; (800243c <HAL_GPIO_Init+0x354>)
 8002348:	689b      	ldr	r3, [r3, #8]
 800234a:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 800234c:	693b      	ldr	r3, [r7, #16]
 800234e:	43db      	mvns	r3, r3
 8002350:	69ba      	ldr	r2, [r7, #24]
 8002352:	4013      	ands	r3, r2
 8002354:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 8002356:	683b      	ldr	r3, [r7, #0]
 8002358:	685b      	ldr	r3, [r3, #4]
 800235a:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 800235e:	2b00      	cmp	r3, #0
 8002360:	d003      	beq.n	800236a <HAL_GPIO_Init+0x282>
        {
          temp |= iocurrent;
 8002362:	69ba      	ldr	r2, [r7, #24]
 8002364:	693b      	ldr	r3, [r7, #16]
 8002366:	4313      	orrs	r3, r2
 8002368:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 800236a:	4a34      	ldr	r2, [pc, #208]	; (800243c <HAL_GPIO_Init+0x354>)
 800236c:	69bb      	ldr	r3, [r7, #24]
 800236e:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8002370:	4b32      	ldr	r3, [pc, #200]	; (800243c <HAL_GPIO_Init+0x354>)
 8002372:	68db      	ldr	r3, [r3, #12]
 8002374:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8002376:	693b      	ldr	r3, [r7, #16]
 8002378:	43db      	mvns	r3, r3
 800237a:	69ba      	ldr	r2, [r7, #24]
 800237c:	4013      	ands	r3, r2
 800237e:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 8002380:	683b      	ldr	r3, [r7, #0]
 8002382:	685b      	ldr	r3, [r3, #4]
 8002384:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8002388:	2b00      	cmp	r3, #0
 800238a:	d003      	beq.n	8002394 <HAL_GPIO_Init+0x2ac>
        {
          temp |= iocurrent;
 800238c:	69ba      	ldr	r2, [r7, #24]
 800238e:	693b      	ldr	r3, [r7, #16]
 8002390:	4313      	orrs	r3, r2
 8002392:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 8002394:	4a29      	ldr	r2, [pc, #164]	; (800243c <HAL_GPIO_Init+0x354>)
 8002396:	69bb      	ldr	r3, [r7, #24]
 8002398:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 800239a:	4b28      	ldr	r3, [pc, #160]	; (800243c <HAL_GPIO_Init+0x354>)
 800239c:	685b      	ldr	r3, [r3, #4]
 800239e:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80023a0:	693b      	ldr	r3, [r7, #16]
 80023a2:	43db      	mvns	r3, r3
 80023a4:	69ba      	ldr	r2, [r7, #24]
 80023a6:	4013      	ands	r3, r2
 80023a8:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 80023aa:	683b      	ldr	r3, [r7, #0]
 80023ac:	685b      	ldr	r3, [r3, #4]
 80023ae:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80023b2:	2b00      	cmp	r3, #0
 80023b4:	d003      	beq.n	80023be <HAL_GPIO_Init+0x2d6>
        {
          temp |= iocurrent;
 80023b6:	69ba      	ldr	r2, [r7, #24]
 80023b8:	693b      	ldr	r3, [r7, #16]
 80023ba:	4313      	orrs	r3, r2
 80023bc:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 80023be:	4a1f      	ldr	r2, [pc, #124]	; (800243c <HAL_GPIO_Init+0x354>)
 80023c0:	69bb      	ldr	r3, [r7, #24]
 80023c2:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 80023c4:	4b1d      	ldr	r3, [pc, #116]	; (800243c <HAL_GPIO_Init+0x354>)
 80023c6:	681b      	ldr	r3, [r3, #0]
 80023c8:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80023ca:	693b      	ldr	r3, [r7, #16]
 80023cc:	43db      	mvns	r3, r3
 80023ce:	69ba      	ldr	r2, [r7, #24]
 80023d0:	4013      	ands	r3, r2
 80023d2:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 80023d4:	683b      	ldr	r3, [r7, #0]
 80023d6:	685b      	ldr	r3, [r3, #4]
 80023d8:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80023dc:	2b00      	cmp	r3, #0
 80023de:	d003      	beq.n	80023e8 <HAL_GPIO_Init+0x300>
        {
          temp |= iocurrent;
 80023e0:	69ba      	ldr	r2, [r7, #24]
 80023e2:	693b      	ldr	r3, [r7, #16]
 80023e4:	4313      	orrs	r3, r2
 80023e6:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 80023e8:	4a14      	ldr	r2, [pc, #80]	; (800243c <HAL_GPIO_Init+0x354>)
 80023ea:	69bb      	ldr	r3, [r7, #24]
 80023ec:	6013      	str	r3, [r2, #0]
  for(position = 0U; position < GPIO_NUMBER; position++)
 80023ee:	69fb      	ldr	r3, [r7, #28]
 80023f0:	3301      	adds	r3, #1
 80023f2:	61fb      	str	r3, [r7, #28]
 80023f4:	69fb      	ldr	r3, [r7, #28]
 80023f6:	2b0f      	cmp	r3, #15
 80023f8:	f67f ae84 	bls.w	8002104 <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 80023fc:	bf00      	nop
 80023fe:	bf00      	nop
 8002400:	3724      	adds	r7, #36	; 0x24
 8002402:	46bd      	mov	sp, r7
 8002404:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002408:	4770      	bx	lr
 800240a:	bf00      	nop
 800240c:	40023800 	.word	0x40023800
 8002410:	40013800 	.word	0x40013800
 8002414:	40020000 	.word	0x40020000
 8002418:	40020400 	.word	0x40020400
 800241c:	40020800 	.word	0x40020800
 8002420:	40020c00 	.word	0x40020c00
 8002424:	40021000 	.word	0x40021000
 8002428:	40021400 	.word	0x40021400
 800242c:	40021800 	.word	0x40021800
 8002430:	40021c00 	.word	0x40021c00
 8002434:	40022000 	.word	0x40022000
 8002438:	40022400 	.word	0x40022400
 800243c:	40013c00 	.word	0x40013c00

08002440 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8002440:	b480      	push	{r7}
 8002442:	b083      	sub	sp, #12
 8002444:	af00      	add	r7, sp, #0
 8002446:	6078      	str	r0, [r7, #4]
 8002448:	460b      	mov	r3, r1
 800244a:	807b      	strh	r3, [r7, #2]
 800244c:	4613      	mov	r3, r2
 800244e:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8002450:	787b      	ldrb	r3, [r7, #1]
 8002452:	2b00      	cmp	r3, #0
 8002454:	d003      	beq.n	800245e <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8002456:	887a      	ldrh	r2, [r7, #2]
 8002458:	687b      	ldr	r3, [r7, #4]
 800245a:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 800245c:	e003      	b.n	8002466 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 800245e:	887b      	ldrh	r3, [r7, #2]
 8002460:	041a      	lsls	r2, r3, #16
 8002462:	687b      	ldr	r3, [r7, #4]
 8002464:	619a      	str	r2, [r3, #24]
}
 8002466:	bf00      	nop
 8002468:	370c      	adds	r7, #12
 800246a:	46bd      	mov	sp, r7
 800246c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002470:	4770      	bx	lr

08002472 <HAL_HCD_IRQHandler>:
  * @brief  Handle HCD interrupt request.
  * @param  hhcd HCD handle
  * @retval None
  */
void HAL_HCD_IRQHandler(HCD_HandleTypeDef *hhcd)
{
 8002472:	b580      	push	{r7, lr}
 8002474:	b086      	sub	sp, #24
 8002476:	af00      	add	r7, sp, #0
 8002478:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx = hhcd->Instance;
 800247a:	687b      	ldr	r3, [r7, #4]
 800247c:	681b      	ldr	r3, [r3, #0]
 800247e:	613b      	str	r3, [r7, #16]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8002480:	693b      	ldr	r3, [r7, #16]
 8002482:	60fb      	str	r3, [r7, #12]
  uint32_t i;
  uint32_t interrupt;

  /* Ensure that we are in device mode */
  if (USB_GetMode(hhcd->Instance) == USB_OTG_MODE_HOST)
 8002484:	687b      	ldr	r3, [r7, #4]
 8002486:	681b      	ldr	r3, [r3, #0]
 8002488:	4618      	mov	r0, r3
 800248a:	f003 ff86 	bl	800639a <USB_GetMode>
 800248e:	4603      	mov	r3, r0
 8002490:	2b01      	cmp	r3, #1
 8002492:	f040 80f6 	bne.w	8002682 <HAL_HCD_IRQHandler+0x210>
  {
    /* Avoid spurious interrupt */
    if (__HAL_HCD_IS_INVALID_INTERRUPT(hhcd))
 8002496:	687b      	ldr	r3, [r7, #4]
 8002498:	681b      	ldr	r3, [r3, #0]
 800249a:	4618      	mov	r0, r3
 800249c:	f003 ff6a 	bl	8006374 <USB_ReadInterrupts>
 80024a0:	4603      	mov	r3, r0
 80024a2:	2b00      	cmp	r3, #0
 80024a4:	f000 80ec 	beq.w	8002680 <HAL_HCD_IRQHandler+0x20e>
    {
      return;
    }

    if (__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_PXFR_INCOMPISOOUT))
 80024a8:	687b      	ldr	r3, [r7, #4]
 80024aa:	681b      	ldr	r3, [r3, #0]
 80024ac:	4618      	mov	r0, r3
 80024ae:	f003 ff61 	bl	8006374 <USB_ReadInterrupts>
 80024b2:	4603      	mov	r3, r0
 80024b4:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 80024b8:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 80024bc:	d104      	bne.n	80024c8 <HAL_HCD_IRQHandler+0x56>
    {
      /* Incorrect mode, acknowledge the interrupt */
      __HAL_HCD_CLEAR_FLAG(hhcd, USB_OTG_GINTSTS_PXFR_INCOMPISOOUT);
 80024be:	687b      	ldr	r3, [r7, #4]
 80024c0:	681b      	ldr	r3, [r3, #0]
 80024c2:	f44f 1200 	mov.w	r2, #2097152	; 0x200000
 80024c6:	615a      	str	r2, [r3, #20]
    }

    if (__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_IISOIXFR))
 80024c8:	687b      	ldr	r3, [r7, #4]
 80024ca:	681b      	ldr	r3, [r3, #0]
 80024cc:	4618      	mov	r0, r3
 80024ce:	f003 ff51 	bl	8006374 <USB_ReadInterrupts>
 80024d2:	4603      	mov	r3, r0
 80024d4:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 80024d8:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 80024dc:	d104      	bne.n	80024e8 <HAL_HCD_IRQHandler+0x76>
    {
      /* Incorrect mode, acknowledge the interrupt */
      __HAL_HCD_CLEAR_FLAG(hhcd, USB_OTG_GINTSTS_IISOIXFR);
 80024de:	687b      	ldr	r3, [r7, #4]
 80024e0:	681b      	ldr	r3, [r3, #0]
 80024e2:	f44f 1280 	mov.w	r2, #1048576	; 0x100000
 80024e6:	615a      	str	r2, [r3, #20]
    }

    if (__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_PTXFE))
 80024e8:	687b      	ldr	r3, [r7, #4]
 80024ea:	681b      	ldr	r3, [r3, #0]
 80024ec:	4618      	mov	r0, r3
 80024ee:	f003 ff41 	bl	8006374 <USB_ReadInterrupts>
 80024f2:	4603      	mov	r3, r0
 80024f4:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 80024f8:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 80024fc:	d104      	bne.n	8002508 <HAL_HCD_IRQHandler+0x96>
    {
      /* Incorrect mode, acknowledge the interrupt */
      __HAL_HCD_CLEAR_FLAG(hhcd, USB_OTG_GINTSTS_PTXFE);
 80024fe:	687b      	ldr	r3, [r7, #4]
 8002500:	681b      	ldr	r3, [r3, #0]
 8002502:	f04f 6280 	mov.w	r2, #67108864	; 0x4000000
 8002506:	615a      	str	r2, [r3, #20]
    }

    if (__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_MMIS))
 8002508:	687b      	ldr	r3, [r7, #4]
 800250a:	681b      	ldr	r3, [r3, #0]
 800250c:	4618      	mov	r0, r3
 800250e:	f003 ff31 	bl	8006374 <USB_ReadInterrupts>
 8002512:	4603      	mov	r3, r0
 8002514:	f003 0302 	and.w	r3, r3, #2
 8002518:	2b02      	cmp	r3, #2
 800251a:	d103      	bne.n	8002524 <HAL_HCD_IRQHandler+0xb2>
    {
      /* Incorrect mode, acknowledge the interrupt */
      __HAL_HCD_CLEAR_FLAG(hhcd, USB_OTG_GINTSTS_MMIS);
 800251c:	687b      	ldr	r3, [r7, #4]
 800251e:	681b      	ldr	r3, [r3, #0]
 8002520:	2202      	movs	r2, #2
 8002522:	615a      	str	r2, [r3, #20]
    }

    /* Handle Host Disconnect Interrupts */
    if (__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_DISCINT))
 8002524:	687b      	ldr	r3, [r7, #4]
 8002526:	681b      	ldr	r3, [r3, #0]
 8002528:	4618      	mov	r0, r3
 800252a:	f003 ff23 	bl	8006374 <USB_ReadInterrupts>
 800252e:	4603      	mov	r3, r0
 8002530:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8002534:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8002538:	d11c      	bne.n	8002574 <HAL_HCD_IRQHandler+0x102>
    {
      __HAL_HCD_CLEAR_FLAG(hhcd, USB_OTG_GINTSTS_DISCINT);
 800253a:	687b      	ldr	r3, [r7, #4]
 800253c:	681b      	ldr	r3, [r3, #0]
 800253e:	f04f 5200 	mov.w	r2, #536870912	; 0x20000000
 8002542:	615a      	str	r2, [r3, #20]

      if ((USBx_HPRT0 & USB_OTG_HPRT_PCSTS) == 0U)
 8002544:	68fb      	ldr	r3, [r7, #12]
 8002546:	f503 6388 	add.w	r3, r3, #1088	; 0x440
 800254a:	681b      	ldr	r3, [r3, #0]
 800254c:	f003 0301 	and.w	r3, r3, #1
 8002550:	2b00      	cmp	r3, #0
 8002552:	d10f      	bne.n	8002574 <HAL_HCD_IRQHandler+0x102>
      {
        /* Flush USB Fifo */
        (void)USB_FlushTxFifo(USBx, 0x10U);
 8002554:	2110      	movs	r1, #16
 8002556:	6938      	ldr	r0, [r7, #16]
 8002558:	f003 fe50 	bl	80061fc <USB_FlushTxFifo>
        (void)USB_FlushRxFifo(USBx);
 800255c:	6938      	ldr	r0, [r7, #16]
 800255e:	f003 fe81 	bl	8006264 <USB_FlushRxFifo>

        /* Restore FS Clock */
        (void)USB_InitFSLSPClkSel(hhcd->Instance, HCFG_48_MHZ);
 8002562:	687b      	ldr	r3, [r7, #4]
 8002564:	681b      	ldr	r3, [r3, #0]
 8002566:	2101      	movs	r1, #1
 8002568:	4618      	mov	r0, r3
 800256a:	f003 ff24 	bl	80063b6 <USB_InitFSLSPClkSel>

        /* Handle Host Port Disconnect Interrupt */
#if (USE_HAL_HCD_REGISTER_CALLBACKS == 1U)
        hhcd->DisconnectCallback(hhcd);
#else
        HAL_HCD_Disconnect_Callback(hhcd);
 800256e:	6878      	ldr	r0, [r7, #4]
 8002570:	f007 f8e4 	bl	800973c <HAL_HCD_Disconnect_Callback>
#endif /* USE_HAL_HCD_REGISTER_CALLBACKS */
      }
    }

    /* Handle Host Port Interrupts */
    if (__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_HPRTINT))
 8002574:	687b      	ldr	r3, [r7, #4]
 8002576:	681b      	ldr	r3, [r3, #0]
 8002578:	4618      	mov	r0, r3
 800257a:	f003 fefb 	bl	8006374 <USB_ReadInterrupts>
 800257e:	4603      	mov	r3, r0
 8002580:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8002584:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8002588:	d102      	bne.n	8002590 <HAL_HCD_IRQHandler+0x11e>
    {
      HCD_Port_IRQHandler(hhcd);
 800258a:	6878      	ldr	r0, [r7, #4]
 800258c:	f001 f829 	bl	80035e2 <HCD_Port_IRQHandler>
    }

    /* Handle Host SOF Interrupt */
    if (__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_SOF))
 8002590:	687b      	ldr	r3, [r7, #4]
 8002592:	681b      	ldr	r3, [r3, #0]
 8002594:	4618      	mov	r0, r3
 8002596:	f003 feed 	bl	8006374 <USB_ReadInterrupts>
 800259a:	4603      	mov	r3, r0
 800259c:	f003 0308 	and.w	r3, r3, #8
 80025a0:	2b08      	cmp	r3, #8
 80025a2:	d106      	bne.n	80025b2 <HAL_HCD_IRQHandler+0x140>
    {
#if (USE_HAL_HCD_REGISTER_CALLBACKS == 1U)
      hhcd->SOFCallback(hhcd);
#else
      HAL_HCD_SOF_Callback(hhcd);
 80025a4:	6878      	ldr	r0, [r7, #4]
 80025a6:	f007 f8ad 	bl	8009704 <HAL_HCD_SOF_Callback>
#endif /* USE_HAL_HCD_REGISTER_CALLBACKS */

      __HAL_HCD_CLEAR_FLAG(hhcd, USB_OTG_GINTSTS_SOF);
 80025aa:	687b      	ldr	r3, [r7, #4]
 80025ac:	681b      	ldr	r3, [r3, #0]
 80025ae:	2208      	movs	r2, #8
 80025b0:	615a      	str	r2, [r3, #20]
    }

    /* Handle Rx Queue Level Interrupts */
    if ((__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_RXFLVL)) != 0U)
 80025b2:	687b      	ldr	r3, [r7, #4]
 80025b4:	681b      	ldr	r3, [r3, #0]
 80025b6:	4618      	mov	r0, r3
 80025b8:	f003 fedc 	bl	8006374 <USB_ReadInterrupts>
 80025bc:	4603      	mov	r3, r0
 80025be:	f003 0310 	and.w	r3, r3, #16
 80025c2:	2b10      	cmp	r3, #16
 80025c4:	d101      	bne.n	80025ca <HAL_HCD_IRQHandler+0x158>
 80025c6:	2301      	movs	r3, #1
 80025c8:	e000      	b.n	80025cc <HAL_HCD_IRQHandler+0x15a>
 80025ca:	2300      	movs	r3, #0
 80025cc:	2b00      	cmp	r3, #0
 80025ce:	d012      	beq.n	80025f6 <HAL_HCD_IRQHandler+0x184>
    {
      USB_MASK_INTERRUPT(hhcd->Instance, USB_OTG_GINTSTS_RXFLVL);
 80025d0:	687b      	ldr	r3, [r7, #4]
 80025d2:	681b      	ldr	r3, [r3, #0]
 80025d4:	699a      	ldr	r2, [r3, #24]
 80025d6:	687b      	ldr	r3, [r7, #4]
 80025d8:	681b      	ldr	r3, [r3, #0]
 80025da:	f022 0210 	bic.w	r2, r2, #16
 80025de:	619a      	str	r2, [r3, #24]

      HCD_RXQLVL_IRQHandler(hhcd);
 80025e0:	6878      	ldr	r0, [r7, #4]
 80025e2:	f000 ff2c 	bl	800343e <HCD_RXQLVL_IRQHandler>

      USB_UNMASK_INTERRUPT(hhcd->Instance, USB_OTG_GINTSTS_RXFLVL);
 80025e6:	687b      	ldr	r3, [r7, #4]
 80025e8:	681b      	ldr	r3, [r3, #0]
 80025ea:	699a      	ldr	r2, [r3, #24]
 80025ec:	687b      	ldr	r3, [r7, #4]
 80025ee:	681b      	ldr	r3, [r3, #0]
 80025f0:	f042 0210 	orr.w	r2, r2, #16
 80025f4:	619a      	str	r2, [r3, #24]
    }

    /* Handle Host channel Interrupt */
    if (__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_HCINT))
 80025f6:	687b      	ldr	r3, [r7, #4]
 80025f8:	681b      	ldr	r3, [r3, #0]
 80025fa:	4618      	mov	r0, r3
 80025fc:	f003 feba 	bl	8006374 <USB_ReadInterrupts>
 8002600:	4603      	mov	r3, r0
 8002602:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002606:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 800260a:	d13a      	bne.n	8002682 <HAL_HCD_IRQHandler+0x210>
    {
      interrupt = USB_HC_ReadInterrupt(hhcd->Instance);
 800260c:	687b      	ldr	r3, [r7, #4]
 800260e:	681b      	ldr	r3, [r3, #0]
 8002610:	4618      	mov	r0, r3
 8002612:	f003 ff0a 	bl	800642a <USB_HC_ReadInterrupt>
 8002616:	60b8      	str	r0, [r7, #8]
      for (i = 0U; i < hhcd->Init.Host_channels; i++)
 8002618:	2300      	movs	r3, #0
 800261a:	617b      	str	r3, [r7, #20]
 800261c:	e025      	b.n	800266a <HAL_HCD_IRQHandler+0x1f8>
      {
        if ((interrupt & (1UL << (i & 0xFU))) != 0U)
 800261e:	697b      	ldr	r3, [r7, #20]
 8002620:	f003 030f 	and.w	r3, r3, #15
 8002624:	68ba      	ldr	r2, [r7, #8]
 8002626:	fa22 f303 	lsr.w	r3, r2, r3
 800262a:	f003 0301 	and.w	r3, r3, #1
 800262e:	2b00      	cmp	r3, #0
 8002630:	d018      	beq.n	8002664 <HAL_HCD_IRQHandler+0x1f2>
        {
          if ((USBx_HC(i)->HCCHAR & USB_OTG_HCCHAR_EPDIR) == USB_OTG_HCCHAR_EPDIR)
 8002632:	697b      	ldr	r3, [r7, #20]
 8002634:	015a      	lsls	r2, r3, #5
 8002636:	68fb      	ldr	r3, [r7, #12]
 8002638:	4413      	add	r3, r2
 800263a:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800263e:	681b      	ldr	r3, [r3, #0]
 8002640:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8002644:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8002648:	d106      	bne.n	8002658 <HAL_HCD_IRQHandler+0x1e6>
          {
            HCD_HC_IN_IRQHandler(hhcd, (uint8_t)i);
 800264a:	697b      	ldr	r3, [r7, #20]
 800264c:	b2db      	uxtb	r3, r3
 800264e:	4619      	mov	r1, r3
 8002650:	6878      	ldr	r0, [r7, #4]
 8002652:	f000 f836 	bl	80026c2 <HCD_HC_IN_IRQHandler>
 8002656:	e005      	b.n	8002664 <HAL_HCD_IRQHandler+0x1f2>
          }
          else
          {
            HCD_HC_OUT_IRQHandler(hhcd, (uint8_t)i);
 8002658:	697b      	ldr	r3, [r7, #20]
 800265a:	b2db      	uxtb	r3, r3
 800265c:	4619      	mov	r1, r3
 800265e:	6878      	ldr	r0, [r7, #4]
 8002660:	f000 fb84 	bl	8002d6c <HCD_HC_OUT_IRQHandler>
      for (i = 0U; i < hhcd->Init.Host_channels; i++)
 8002664:	697b      	ldr	r3, [r7, #20]
 8002666:	3301      	adds	r3, #1
 8002668:	617b      	str	r3, [r7, #20]
 800266a:	687b      	ldr	r3, [r7, #4]
 800266c:	689b      	ldr	r3, [r3, #8]
 800266e:	697a      	ldr	r2, [r7, #20]
 8002670:	429a      	cmp	r2, r3
 8002672:	d3d4      	bcc.n	800261e <HAL_HCD_IRQHandler+0x1ac>
          }
        }
      }
      __HAL_HCD_CLEAR_FLAG(hhcd, USB_OTG_GINTSTS_HCINT);
 8002674:	687b      	ldr	r3, [r7, #4]
 8002676:	681b      	ldr	r3, [r3, #0]
 8002678:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 800267c:	615a      	str	r2, [r3, #20]
 800267e:	e000      	b.n	8002682 <HAL_HCD_IRQHandler+0x210>
      return;
 8002680:	bf00      	nop
    }
  }
}
 8002682:	3718      	adds	r7, #24
 8002684:	46bd      	mov	sp, r7
 8002686:	bd80      	pop	{r7, pc}

08002688 <HAL_HCD_Stop>:
  * @param  hhcd HCD handle
  * @retval HAL status
  */

HAL_StatusTypeDef HAL_HCD_Stop(HCD_HandleTypeDef *hhcd)
{
 8002688:	b580      	push	{r7, lr}
 800268a:	b082      	sub	sp, #8
 800268c:	af00      	add	r7, sp, #0
 800268e:	6078      	str	r0, [r7, #4]
  __HAL_LOCK(hhcd);
 8002690:	687b      	ldr	r3, [r7, #4]
 8002692:	f893 32f8 	ldrb.w	r3, [r3, #760]	; 0x2f8
 8002696:	2b01      	cmp	r3, #1
 8002698:	d101      	bne.n	800269e <HAL_HCD_Stop+0x16>
 800269a:	2302      	movs	r3, #2
 800269c:	e00d      	b.n	80026ba <HAL_HCD_Stop+0x32>
 800269e:	687b      	ldr	r3, [r7, #4]
 80026a0:	2201      	movs	r2, #1
 80026a2:	f883 22f8 	strb.w	r2, [r3, #760]	; 0x2f8
  (void)USB_StopHost(hhcd->Instance);
 80026a6:	687b      	ldr	r3, [r7, #4]
 80026a8:	681b      	ldr	r3, [r3, #0]
 80026aa:	4618      	mov	r0, r3
 80026ac:	f003 ffca 	bl	8006644 <USB_StopHost>
  __HAL_UNLOCK(hhcd);
 80026b0:	687b      	ldr	r3, [r7, #4]
 80026b2:	2200      	movs	r2, #0
 80026b4:	f883 22f8 	strb.w	r2, [r3, #760]	; 0x2f8

  return HAL_OK;
 80026b8:	2300      	movs	r3, #0
}
 80026ba:	4618      	mov	r0, r3
 80026bc:	3708      	adds	r7, #8
 80026be:	46bd      	mov	sp, r7
 80026c0:	bd80      	pop	{r7, pc}

080026c2 <HCD_HC_IN_IRQHandler>:
  * @param  chnum Channel number.
  *         This parameter can be a value from 1 to 15
  * @retval none
  */
static void HCD_HC_IN_IRQHandler(HCD_HandleTypeDef *hhcd, uint8_t chnum)
{
 80026c2:	b580      	push	{r7, lr}
 80026c4:	b086      	sub	sp, #24
 80026c6:	af00      	add	r7, sp, #0
 80026c8:	6078      	str	r0, [r7, #4]
 80026ca:	460b      	mov	r3, r1
 80026cc:	70fb      	strb	r3, [r7, #3]
  USB_OTG_GlobalTypeDef *USBx = hhcd->Instance;
 80026ce:	687b      	ldr	r3, [r7, #4]
 80026d0:	681b      	ldr	r3, [r3, #0]
 80026d2:	617b      	str	r3, [r7, #20]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80026d4:	697b      	ldr	r3, [r7, #20]
 80026d6:	613b      	str	r3, [r7, #16]
  uint32_t ch_num = (uint32_t)chnum;
 80026d8:	78fb      	ldrb	r3, [r7, #3]
 80026da:	60fb      	str	r3, [r7, #12]

  uint32_t tmpreg;

  if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_AHBERR) == USB_OTG_HCINT_AHBERR)
 80026dc:	68fb      	ldr	r3, [r7, #12]
 80026de:	015a      	lsls	r2, r3, #5
 80026e0:	693b      	ldr	r3, [r7, #16]
 80026e2:	4413      	add	r3, r2
 80026e4:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80026e8:	689b      	ldr	r3, [r3, #8]
 80026ea:	f003 0304 	and.w	r3, r3, #4
 80026ee:	2b04      	cmp	r3, #4
 80026f0:	d11a      	bne.n	8002728 <HCD_HC_IN_IRQHandler+0x66>
  {
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_AHBERR);
 80026f2:	68fb      	ldr	r3, [r7, #12]
 80026f4:	015a      	lsls	r2, r3, #5
 80026f6:	693b      	ldr	r3, [r7, #16]
 80026f8:	4413      	add	r3, r2
 80026fa:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80026fe:	461a      	mov	r2, r3
 8002700:	2304      	movs	r3, #4
 8002702:	6093      	str	r3, [r2, #8]
    hhcd->hc[ch_num].state = HC_XACTERR;
 8002704:	687a      	ldr	r2, [r7, #4]
 8002706:	68fb      	ldr	r3, [r7, #12]
 8002708:	212c      	movs	r1, #44	; 0x2c
 800270a:	fb01 f303 	mul.w	r3, r1, r3
 800270e:	4413      	add	r3, r2
 8002710:	3361      	adds	r3, #97	; 0x61
 8002712:	2206      	movs	r2, #6
 8002714:	701a      	strb	r2, [r3, #0]
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 8002716:	687b      	ldr	r3, [r7, #4]
 8002718:	681b      	ldr	r3, [r3, #0]
 800271a:	68fa      	ldr	r2, [r7, #12]
 800271c:	b2d2      	uxtb	r2, r2
 800271e:	4611      	mov	r1, r2
 8002720:	4618      	mov	r0, r3
 8002722:	f003 fe93 	bl	800644c <USB_HC_Halt>
 8002726:	e0af      	b.n	8002888 <HCD_HC_IN_IRQHandler+0x1c6>
  }
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_BBERR) == USB_OTG_HCINT_BBERR)
 8002728:	68fb      	ldr	r3, [r7, #12]
 800272a:	015a      	lsls	r2, r3, #5
 800272c:	693b      	ldr	r3, [r7, #16]
 800272e:	4413      	add	r3, r2
 8002730:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002734:	689b      	ldr	r3, [r3, #8]
 8002736:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800273a:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800273e:	d11b      	bne.n	8002778 <HCD_HC_IN_IRQHandler+0xb6>
  {
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_BBERR);
 8002740:	68fb      	ldr	r3, [r7, #12]
 8002742:	015a      	lsls	r2, r3, #5
 8002744:	693b      	ldr	r3, [r7, #16]
 8002746:	4413      	add	r3, r2
 8002748:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800274c:	461a      	mov	r2, r3
 800274e:	f44f 7380 	mov.w	r3, #256	; 0x100
 8002752:	6093      	str	r3, [r2, #8]
    hhcd->hc[ch_num].state = HC_BBLERR;
 8002754:	687a      	ldr	r2, [r7, #4]
 8002756:	68fb      	ldr	r3, [r7, #12]
 8002758:	212c      	movs	r1, #44	; 0x2c
 800275a:	fb01 f303 	mul.w	r3, r1, r3
 800275e:	4413      	add	r3, r2
 8002760:	3361      	adds	r3, #97	; 0x61
 8002762:	2207      	movs	r2, #7
 8002764:	701a      	strb	r2, [r3, #0]
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 8002766:	687b      	ldr	r3, [r7, #4]
 8002768:	681b      	ldr	r3, [r3, #0]
 800276a:	68fa      	ldr	r2, [r7, #12]
 800276c:	b2d2      	uxtb	r2, r2
 800276e:	4611      	mov	r1, r2
 8002770:	4618      	mov	r0, r3
 8002772:	f003 fe6b 	bl	800644c <USB_HC_Halt>
 8002776:	e087      	b.n	8002888 <HCD_HC_IN_IRQHandler+0x1c6>
  }
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_ACK) == USB_OTG_HCINT_ACK)
 8002778:	68fb      	ldr	r3, [r7, #12]
 800277a:	015a      	lsls	r2, r3, #5
 800277c:	693b      	ldr	r3, [r7, #16]
 800277e:	4413      	add	r3, r2
 8002780:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002784:	689b      	ldr	r3, [r3, #8]
 8002786:	f003 0320 	and.w	r3, r3, #32
 800278a:	2b20      	cmp	r3, #32
 800278c:	d109      	bne.n	80027a2 <HCD_HC_IN_IRQHandler+0xe0>
  {
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_ACK);
 800278e:	68fb      	ldr	r3, [r7, #12]
 8002790:	015a      	lsls	r2, r3, #5
 8002792:	693b      	ldr	r3, [r7, #16]
 8002794:	4413      	add	r3, r2
 8002796:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800279a:	461a      	mov	r2, r3
 800279c:	2320      	movs	r3, #32
 800279e:	6093      	str	r3, [r2, #8]
 80027a0:	e072      	b.n	8002888 <HCD_HC_IN_IRQHandler+0x1c6>
  }
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_STALL) == USB_OTG_HCINT_STALL)
 80027a2:	68fb      	ldr	r3, [r7, #12]
 80027a4:	015a      	lsls	r2, r3, #5
 80027a6:	693b      	ldr	r3, [r7, #16]
 80027a8:	4413      	add	r3, r2
 80027aa:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80027ae:	689b      	ldr	r3, [r3, #8]
 80027b0:	f003 0308 	and.w	r3, r3, #8
 80027b4:	2b08      	cmp	r3, #8
 80027b6:	d11a      	bne.n	80027ee <HCD_HC_IN_IRQHandler+0x12c>
  {
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_STALL);
 80027b8:	68fb      	ldr	r3, [r7, #12]
 80027ba:	015a      	lsls	r2, r3, #5
 80027bc:	693b      	ldr	r3, [r7, #16]
 80027be:	4413      	add	r3, r2
 80027c0:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80027c4:	461a      	mov	r2, r3
 80027c6:	2308      	movs	r3, #8
 80027c8:	6093      	str	r3, [r2, #8]
    hhcd->hc[ch_num].state = HC_STALL;
 80027ca:	687a      	ldr	r2, [r7, #4]
 80027cc:	68fb      	ldr	r3, [r7, #12]
 80027ce:	212c      	movs	r1, #44	; 0x2c
 80027d0:	fb01 f303 	mul.w	r3, r1, r3
 80027d4:	4413      	add	r3, r2
 80027d6:	3361      	adds	r3, #97	; 0x61
 80027d8:	2205      	movs	r2, #5
 80027da:	701a      	strb	r2, [r3, #0]
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 80027dc:	687b      	ldr	r3, [r7, #4]
 80027de:	681b      	ldr	r3, [r3, #0]
 80027e0:	68fa      	ldr	r2, [r7, #12]
 80027e2:	b2d2      	uxtb	r2, r2
 80027e4:	4611      	mov	r1, r2
 80027e6:	4618      	mov	r0, r3
 80027e8:	f003 fe30 	bl	800644c <USB_HC_Halt>
 80027ec:	e04c      	b.n	8002888 <HCD_HC_IN_IRQHandler+0x1c6>
  }
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_DTERR) == USB_OTG_HCINT_DTERR)
 80027ee:	68fb      	ldr	r3, [r7, #12]
 80027f0:	015a      	lsls	r2, r3, #5
 80027f2:	693b      	ldr	r3, [r7, #16]
 80027f4:	4413      	add	r3, r2
 80027f6:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80027fa:	689b      	ldr	r3, [r3, #8]
 80027fc:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8002800:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8002804:	d11b      	bne.n	800283e <HCD_HC_IN_IRQHandler+0x17c>
  {
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_DTERR);
 8002806:	68fb      	ldr	r3, [r7, #12]
 8002808:	015a      	lsls	r2, r3, #5
 800280a:	693b      	ldr	r3, [r7, #16]
 800280c:	4413      	add	r3, r2
 800280e:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002812:	461a      	mov	r2, r3
 8002814:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8002818:	6093      	str	r3, [r2, #8]
    hhcd->hc[ch_num].state = HC_DATATGLERR;
 800281a:	687a      	ldr	r2, [r7, #4]
 800281c:	68fb      	ldr	r3, [r7, #12]
 800281e:	212c      	movs	r1, #44	; 0x2c
 8002820:	fb01 f303 	mul.w	r3, r1, r3
 8002824:	4413      	add	r3, r2
 8002826:	3361      	adds	r3, #97	; 0x61
 8002828:	2208      	movs	r2, #8
 800282a:	701a      	strb	r2, [r3, #0]
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 800282c:	687b      	ldr	r3, [r7, #4]
 800282e:	681b      	ldr	r3, [r3, #0]
 8002830:	68fa      	ldr	r2, [r7, #12]
 8002832:	b2d2      	uxtb	r2, r2
 8002834:	4611      	mov	r1, r2
 8002836:	4618      	mov	r0, r3
 8002838:	f003 fe08 	bl	800644c <USB_HC_Halt>
 800283c:	e024      	b.n	8002888 <HCD_HC_IN_IRQHandler+0x1c6>
  }
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_TXERR) == USB_OTG_HCINT_TXERR)
 800283e:	68fb      	ldr	r3, [r7, #12]
 8002840:	015a      	lsls	r2, r3, #5
 8002842:	693b      	ldr	r3, [r7, #16]
 8002844:	4413      	add	r3, r2
 8002846:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800284a:	689b      	ldr	r3, [r3, #8]
 800284c:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002850:	2b80      	cmp	r3, #128	; 0x80
 8002852:	d119      	bne.n	8002888 <HCD_HC_IN_IRQHandler+0x1c6>
  {
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_TXERR);
 8002854:	68fb      	ldr	r3, [r7, #12]
 8002856:	015a      	lsls	r2, r3, #5
 8002858:	693b      	ldr	r3, [r7, #16]
 800285a:	4413      	add	r3, r2
 800285c:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002860:	461a      	mov	r2, r3
 8002862:	2380      	movs	r3, #128	; 0x80
 8002864:	6093      	str	r3, [r2, #8]
    hhcd->hc[ch_num].state = HC_XACTERR;
 8002866:	687a      	ldr	r2, [r7, #4]
 8002868:	68fb      	ldr	r3, [r7, #12]
 800286a:	212c      	movs	r1, #44	; 0x2c
 800286c:	fb01 f303 	mul.w	r3, r1, r3
 8002870:	4413      	add	r3, r2
 8002872:	3361      	adds	r3, #97	; 0x61
 8002874:	2206      	movs	r2, #6
 8002876:	701a      	strb	r2, [r3, #0]
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 8002878:	687b      	ldr	r3, [r7, #4]
 800287a:	681b      	ldr	r3, [r3, #0]
 800287c:	68fa      	ldr	r2, [r7, #12]
 800287e:	b2d2      	uxtb	r2, r2
 8002880:	4611      	mov	r1, r2
 8002882:	4618      	mov	r0, r3
 8002884:	f003 fde2 	bl	800644c <USB_HC_Halt>
  else
  {
    /* ... */
  }

  if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_FRMOR) == USB_OTG_HCINT_FRMOR)
 8002888:	68fb      	ldr	r3, [r7, #12]
 800288a:	015a      	lsls	r2, r3, #5
 800288c:	693b      	ldr	r3, [r7, #16]
 800288e:	4413      	add	r3, r2
 8002890:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002894:	689b      	ldr	r3, [r3, #8]
 8002896:	f403 7300 	and.w	r3, r3, #512	; 0x200
 800289a:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800289e:	d112      	bne.n	80028c6 <HCD_HC_IN_IRQHandler+0x204>
  {
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 80028a0:	687b      	ldr	r3, [r7, #4]
 80028a2:	681b      	ldr	r3, [r3, #0]
 80028a4:	68fa      	ldr	r2, [r7, #12]
 80028a6:	b2d2      	uxtb	r2, r2
 80028a8:	4611      	mov	r1, r2
 80028aa:	4618      	mov	r0, r3
 80028ac:	f003 fdce 	bl	800644c <USB_HC_Halt>
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_FRMOR);
 80028b0:	68fb      	ldr	r3, [r7, #12]
 80028b2:	015a      	lsls	r2, r3, #5
 80028b4:	693b      	ldr	r3, [r7, #16]
 80028b6:	4413      	add	r3, r2
 80028b8:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80028bc:	461a      	mov	r2, r3
 80028be:	f44f 7300 	mov.w	r3, #512	; 0x200
 80028c2:	6093      	str	r3, [r2, #8]
  }
  else
  {
    /* ... */
  }
}
 80028c4:	e24e      	b.n	8002d64 <HCD_HC_IN_IRQHandler+0x6a2>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_XFRC) == USB_OTG_HCINT_XFRC)
 80028c6:	68fb      	ldr	r3, [r7, #12]
 80028c8:	015a      	lsls	r2, r3, #5
 80028ca:	693b      	ldr	r3, [r7, #16]
 80028cc:	4413      	add	r3, r2
 80028ce:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80028d2:	689b      	ldr	r3, [r3, #8]
 80028d4:	f003 0301 	and.w	r3, r3, #1
 80028d8:	2b01      	cmp	r3, #1
 80028da:	f040 80df 	bne.w	8002a9c <HCD_HC_IN_IRQHandler+0x3da>
    if (hhcd->Init.dma_enable != 0U)
 80028de:	687b      	ldr	r3, [r7, #4]
 80028e0:	691b      	ldr	r3, [r3, #16]
 80028e2:	2b00      	cmp	r3, #0
 80028e4:	d019      	beq.n	800291a <HCD_HC_IN_IRQHandler+0x258>
      hhcd->hc[ch_num].xfer_count = hhcd->hc[ch_num].XferSize - \
 80028e6:	687a      	ldr	r2, [r7, #4]
 80028e8:	68fb      	ldr	r3, [r7, #12]
 80028ea:	212c      	movs	r1, #44	; 0x2c
 80028ec:	fb01 f303 	mul.w	r3, r1, r3
 80028f0:	4413      	add	r3, r2
 80028f2:	3348      	adds	r3, #72	; 0x48
 80028f4:	681a      	ldr	r2, [r3, #0]
                                    (USBx_HC(ch_num)->HCTSIZ & USB_OTG_HCTSIZ_XFRSIZ);
 80028f6:	68fb      	ldr	r3, [r7, #12]
 80028f8:	0159      	lsls	r1, r3, #5
 80028fa:	693b      	ldr	r3, [r7, #16]
 80028fc:	440b      	add	r3, r1
 80028fe:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002902:	691b      	ldr	r3, [r3, #16]
 8002904:	f3c3 0312 	ubfx	r3, r3, #0, #19
      hhcd->hc[ch_num].xfer_count = hhcd->hc[ch_num].XferSize - \
 8002908:	1ad2      	subs	r2, r2, r3
 800290a:	6879      	ldr	r1, [r7, #4]
 800290c:	68fb      	ldr	r3, [r7, #12]
 800290e:	202c      	movs	r0, #44	; 0x2c
 8002910:	fb00 f303 	mul.w	r3, r0, r3
 8002914:	440b      	add	r3, r1
 8002916:	3350      	adds	r3, #80	; 0x50
 8002918:	601a      	str	r2, [r3, #0]
    hhcd->hc[ch_num].state = HC_XFRC;
 800291a:	687a      	ldr	r2, [r7, #4]
 800291c:	68fb      	ldr	r3, [r7, #12]
 800291e:	212c      	movs	r1, #44	; 0x2c
 8002920:	fb01 f303 	mul.w	r3, r1, r3
 8002924:	4413      	add	r3, r2
 8002926:	3361      	adds	r3, #97	; 0x61
 8002928:	2201      	movs	r2, #1
 800292a:	701a      	strb	r2, [r3, #0]
    hhcd->hc[ch_num].ErrCnt = 0U;
 800292c:	687a      	ldr	r2, [r7, #4]
 800292e:	68fb      	ldr	r3, [r7, #12]
 8002930:	212c      	movs	r1, #44	; 0x2c
 8002932:	fb01 f303 	mul.w	r3, r1, r3
 8002936:	4413      	add	r3, r2
 8002938:	335c      	adds	r3, #92	; 0x5c
 800293a:	2200      	movs	r2, #0
 800293c:	601a      	str	r2, [r3, #0]
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_XFRC);
 800293e:	68fb      	ldr	r3, [r7, #12]
 8002940:	015a      	lsls	r2, r3, #5
 8002942:	693b      	ldr	r3, [r7, #16]
 8002944:	4413      	add	r3, r2
 8002946:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800294a:	461a      	mov	r2, r3
 800294c:	2301      	movs	r3, #1
 800294e:	6093      	str	r3, [r2, #8]
    if ((hhcd->hc[ch_num].ep_type == EP_TYPE_CTRL) ||
 8002950:	687a      	ldr	r2, [r7, #4]
 8002952:	68fb      	ldr	r3, [r7, #12]
 8002954:	212c      	movs	r1, #44	; 0x2c
 8002956:	fb01 f303 	mul.w	r3, r1, r3
 800295a:	4413      	add	r3, r2
 800295c:	333f      	adds	r3, #63	; 0x3f
 800295e:	781b      	ldrb	r3, [r3, #0]
 8002960:	2b00      	cmp	r3, #0
 8002962:	d009      	beq.n	8002978 <HCD_HC_IN_IRQHandler+0x2b6>
        (hhcd->hc[ch_num].ep_type == EP_TYPE_BULK))
 8002964:	687a      	ldr	r2, [r7, #4]
 8002966:	68fb      	ldr	r3, [r7, #12]
 8002968:	212c      	movs	r1, #44	; 0x2c
 800296a:	fb01 f303 	mul.w	r3, r1, r3
 800296e:	4413      	add	r3, r2
 8002970:	333f      	adds	r3, #63	; 0x3f
 8002972:	781b      	ldrb	r3, [r3, #0]
    if ((hhcd->hc[ch_num].ep_type == EP_TYPE_CTRL) ||
 8002974:	2b02      	cmp	r3, #2
 8002976:	d111      	bne.n	800299c <HCD_HC_IN_IRQHandler+0x2da>
      (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 8002978:	687b      	ldr	r3, [r7, #4]
 800297a:	681b      	ldr	r3, [r3, #0]
 800297c:	68fa      	ldr	r2, [r7, #12]
 800297e:	b2d2      	uxtb	r2, r2
 8002980:	4611      	mov	r1, r2
 8002982:	4618      	mov	r0, r3
 8002984:	f003 fd62 	bl	800644c <USB_HC_Halt>
      __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_NAK);
 8002988:	68fb      	ldr	r3, [r7, #12]
 800298a:	015a      	lsls	r2, r3, #5
 800298c:	693b      	ldr	r3, [r7, #16]
 800298e:	4413      	add	r3, r2
 8002990:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002994:	461a      	mov	r2, r3
 8002996:	2310      	movs	r3, #16
 8002998:	6093      	str	r3, [r2, #8]
 800299a:	e03a      	b.n	8002a12 <HCD_HC_IN_IRQHandler+0x350>
    else if ((hhcd->hc[ch_num].ep_type == EP_TYPE_INTR) ||
 800299c:	687a      	ldr	r2, [r7, #4]
 800299e:	68fb      	ldr	r3, [r7, #12]
 80029a0:	212c      	movs	r1, #44	; 0x2c
 80029a2:	fb01 f303 	mul.w	r3, r1, r3
 80029a6:	4413      	add	r3, r2
 80029a8:	333f      	adds	r3, #63	; 0x3f
 80029aa:	781b      	ldrb	r3, [r3, #0]
 80029ac:	2b03      	cmp	r3, #3
 80029ae:	d009      	beq.n	80029c4 <HCD_HC_IN_IRQHandler+0x302>
             (hhcd->hc[ch_num].ep_type == EP_TYPE_ISOC))
 80029b0:	687a      	ldr	r2, [r7, #4]
 80029b2:	68fb      	ldr	r3, [r7, #12]
 80029b4:	212c      	movs	r1, #44	; 0x2c
 80029b6:	fb01 f303 	mul.w	r3, r1, r3
 80029ba:	4413      	add	r3, r2
 80029bc:	333f      	adds	r3, #63	; 0x3f
 80029be:	781b      	ldrb	r3, [r3, #0]
    else if ((hhcd->hc[ch_num].ep_type == EP_TYPE_INTR) ||
 80029c0:	2b01      	cmp	r3, #1
 80029c2:	d126      	bne.n	8002a12 <HCD_HC_IN_IRQHandler+0x350>
      USBx_HC(ch_num)->HCCHAR |= USB_OTG_HCCHAR_ODDFRM;
 80029c4:	68fb      	ldr	r3, [r7, #12]
 80029c6:	015a      	lsls	r2, r3, #5
 80029c8:	693b      	ldr	r3, [r7, #16]
 80029ca:	4413      	add	r3, r2
 80029cc:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80029d0:	681b      	ldr	r3, [r3, #0]
 80029d2:	68fa      	ldr	r2, [r7, #12]
 80029d4:	0151      	lsls	r1, r2, #5
 80029d6:	693a      	ldr	r2, [r7, #16]
 80029d8:	440a      	add	r2, r1
 80029da:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 80029de:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 80029e2:	6013      	str	r3, [r2, #0]
      hhcd->hc[ch_num].urb_state = URB_DONE;
 80029e4:	687a      	ldr	r2, [r7, #4]
 80029e6:	68fb      	ldr	r3, [r7, #12]
 80029e8:	212c      	movs	r1, #44	; 0x2c
 80029ea:	fb01 f303 	mul.w	r3, r1, r3
 80029ee:	4413      	add	r3, r2
 80029f0:	3360      	adds	r3, #96	; 0x60
 80029f2:	2201      	movs	r2, #1
 80029f4:	701a      	strb	r2, [r3, #0]
      HAL_HCD_HC_NotifyURBChange_Callback(hhcd, (uint8_t)ch_num, hhcd->hc[ch_num].urb_state);
 80029f6:	68fb      	ldr	r3, [r7, #12]
 80029f8:	b2d9      	uxtb	r1, r3
 80029fa:	687a      	ldr	r2, [r7, #4]
 80029fc:	68fb      	ldr	r3, [r7, #12]
 80029fe:	202c      	movs	r0, #44	; 0x2c
 8002a00:	fb00 f303 	mul.w	r3, r0, r3
 8002a04:	4413      	add	r3, r2
 8002a06:	3360      	adds	r3, #96	; 0x60
 8002a08:	781b      	ldrb	r3, [r3, #0]
 8002a0a:	461a      	mov	r2, r3
 8002a0c:	6878      	ldr	r0, [r7, #4]
 8002a0e:	f006 fea3 	bl	8009758 <HAL_HCD_HC_NotifyURBChange_Callback>
    if (hhcd->Init.dma_enable == 1U)
 8002a12:	687b      	ldr	r3, [r7, #4]
 8002a14:	691b      	ldr	r3, [r3, #16]
 8002a16:	2b01      	cmp	r3, #1
 8002a18:	d12b      	bne.n	8002a72 <HCD_HC_IN_IRQHandler+0x3b0>
      if (((hhcd->hc[ch_num].XferSize / hhcd->hc[ch_num].max_packet) & 1U) != 0U)
 8002a1a:	687a      	ldr	r2, [r7, #4]
 8002a1c:	68fb      	ldr	r3, [r7, #12]
 8002a1e:	212c      	movs	r1, #44	; 0x2c
 8002a20:	fb01 f303 	mul.w	r3, r1, r3
 8002a24:	4413      	add	r3, r2
 8002a26:	3348      	adds	r3, #72	; 0x48
 8002a28:	681b      	ldr	r3, [r3, #0]
 8002a2a:	6879      	ldr	r1, [r7, #4]
 8002a2c:	68fa      	ldr	r2, [r7, #12]
 8002a2e:	202c      	movs	r0, #44	; 0x2c
 8002a30:	fb00 f202 	mul.w	r2, r0, r2
 8002a34:	440a      	add	r2, r1
 8002a36:	3240      	adds	r2, #64	; 0x40
 8002a38:	8812      	ldrh	r2, [r2, #0]
 8002a3a:	fbb3 f3f2 	udiv	r3, r3, r2
 8002a3e:	f003 0301 	and.w	r3, r3, #1
 8002a42:	2b00      	cmp	r3, #0
 8002a44:	f000 818e 	beq.w	8002d64 <HCD_HC_IN_IRQHandler+0x6a2>
        hhcd->hc[ch_num].toggle_in ^= 1U;
 8002a48:	687a      	ldr	r2, [r7, #4]
 8002a4a:	68fb      	ldr	r3, [r7, #12]
 8002a4c:	212c      	movs	r1, #44	; 0x2c
 8002a4e:	fb01 f303 	mul.w	r3, r1, r3
 8002a52:	4413      	add	r3, r2
 8002a54:	3354      	adds	r3, #84	; 0x54
 8002a56:	781b      	ldrb	r3, [r3, #0]
 8002a58:	f083 0301 	eor.w	r3, r3, #1
 8002a5c:	b2d8      	uxtb	r0, r3
 8002a5e:	687a      	ldr	r2, [r7, #4]
 8002a60:	68fb      	ldr	r3, [r7, #12]
 8002a62:	212c      	movs	r1, #44	; 0x2c
 8002a64:	fb01 f303 	mul.w	r3, r1, r3
 8002a68:	4413      	add	r3, r2
 8002a6a:	3354      	adds	r3, #84	; 0x54
 8002a6c:	4602      	mov	r2, r0
 8002a6e:	701a      	strb	r2, [r3, #0]
}
 8002a70:	e178      	b.n	8002d64 <HCD_HC_IN_IRQHandler+0x6a2>
      hhcd->hc[ch_num].toggle_in ^= 1U;
 8002a72:	687a      	ldr	r2, [r7, #4]
 8002a74:	68fb      	ldr	r3, [r7, #12]
 8002a76:	212c      	movs	r1, #44	; 0x2c
 8002a78:	fb01 f303 	mul.w	r3, r1, r3
 8002a7c:	4413      	add	r3, r2
 8002a7e:	3354      	adds	r3, #84	; 0x54
 8002a80:	781b      	ldrb	r3, [r3, #0]
 8002a82:	f083 0301 	eor.w	r3, r3, #1
 8002a86:	b2d8      	uxtb	r0, r3
 8002a88:	687a      	ldr	r2, [r7, #4]
 8002a8a:	68fb      	ldr	r3, [r7, #12]
 8002a8c:	212c      	movs	r1, #44	; 0x2c
 8002a8e:	fb01 f303 	mul.w	r3, r1, r3
 8002a92:	4413      	add	r3, r2
 8002a94:	3354      	adds	r3, #84	; 0x54
 8002a96:	4602      	mov	r2, r0
 8002a98:	701a      	strb	r2, [r3, #0]
}
 8002a9a:	e163      	b.n	8002d64 <HCD_HC_IN_IRQHandler+0x6a2>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_CHH) == USB_OTG_HCINT_CHH)
 8002a9c:	68fb      	ldr	r3, [r7, #12]
 8002a9e:	015a      	lsls	r2, r3, #5
 8002aa0:	693b      	ldr	r3, [r7, #16]
 8002aa2:	4413      	add	r3, r2
 8002aa4:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002aa8:	689b      	ldr	r3, [r3, #8]
 8002aaa:	f003 0302 	and.w	r3, r3, #2
 8002aae:	2b02      	cmp	r3, #2
 8002ab0:	f040 80f6 	bne.w	8002ca0 <HCD_HC_IN_IRQHandler+0x5de>
    if (hhcd->hc[ch_num].state == HC_XFRC)
 8002ab4:	687a      	ldr	r2, [r7, #4]
 8002ab6:	68fb      	ldr	r3, [r7, #12]
 8002ab8:	212c      	movs	r1, #44	; 0x2c
 8002aba:	fb01 f303 	mul.w	r3, r1, r3
 8002abe:	4413      	add	r3, r2
 8002ac0:	3361      	adds	r3, #97	; 0x61
 8002ac2:	781b      	ldrb	r3, [r3, #0]
 8002ac4:	2b01      	cmp	r3, #1
 8002ac6:	d109      	bne.n	8002adc <HCD_HC_IN_IRQHandler+0x41a>
      hhcd->hc[ch_num].urb_state = URB_DONE;
 8002ac8:	687a      	ldr	r2, [r7, #4]
 8002aca:	68fb      	ldr	r3, [r7, #12]
 8002acc:	212c      	movs	r1, #44	; 0x2c
 8002ace:	fb01 f303 	mul.w	r3, r1, r3
 8002ad2:	4413      	add	r3, r2
 8002ad4:	3360      	adds	r3, #96	; 0x60
 8002ad6:	2201      	movs	r2, #1
 8002ad8:	701a      	strb	r2, [r3, #0]
 8002ada:	e0c9      	b.n	8002c70 <HCD_HC_IN_IRQHandler+0x5ae>
    else if (hhcd->hc[ch_num].state == HC_STALL)
 8002adc:	687a      	ldr	r2, [r7, #4]
 8002ade:	68fb      	ldr	r3, [r7, #12]
 8002ae0:	212c      	movs	r1, #44	; 0x2c
 8002ae2:	fb01 f303 	mul.w	r3, r1, r3
 8002ae6:	4413      	add	r3, r2
 8002ae8:	3361      	adds	r3, #97	; 0x61
 8002aea:	781b      	ldrb	r3, [r3, #0]
 8002aec:	2b05      	cmp	r3, #5
 8002aee:	d109      	bne.n	8002b04 <HCD_HC_IN_IRQHandler+0x442>
      hhcd->hc[ch_num].urb_state = URB_STALL;
 8002af0:	687a      	ldr	r2, [r7, #4]
 8002af2:	68fb      	ldr	r3, [r7, #12]
 8002af4:	212c      	movs	r1, #44	; 0x2c
 8002af6:	fb01 f303 	mul.w	r3, r1, r3
 8002afa:	4413      	add	r3, r2
 8002afc:	3360      	adds	r3, #96	; 0x60
 8002afe:	2205      	movs	r2, #5
 8002b00:	701a      	strb	r2, [r3, #0]
 8002b02:	e0b5      	b.n	8002c70 <HCD_HC_IN_IRQHandler+0x5ae>
    else if ((hhcd->hc[ch_num].state == HC_XACTERR) ||
 8002b04:	687a      	ldr	r2, [r7, #4]
 8002b06:	68fb      	ldr	r3, [r7, #12]
 8002b08:	212c      	movs	r1, #44	; 0x2c
 8002b0a:	fb01 f303 	mul.w	r3, r1, r3
 8002b0e:	4413      	add	r3, r2
 8002b10:	3361      	adds	r3, #97	; 0x61
 8002b12:	781b      	ldrb	r3, [r3, #0]
 8002b14:	2b06      	cmp	r3, #6
 8002b16:	d009      	beq.n	8002b2c <HCD_HC_IN_IRQHandler+0x46a>
             (hhcd->hc[ch_num].state == HC_DATATGLERR))
 8002b18:	687a      	ldr	r2, [r7, #4]
 8002b1a:	68fb      	ldr	r3, [r7, #12]
 8002b1c:	212c      	movs	r1, #44	; 0x2c
 8002b1e:	fb01 f303 	mul.w	r3, r1, r3
 8002b22:	4413      	add	r3, r2
 8002b24:	3361      	adds	r3, #97	; 0x61
 8002b26:	781b      	ldrb	r3, [r3, #0]
    else if ((hhcd->hc[ch_num].state == HC_XACTERR) ||
 8002b28:	2b08      	cmp	r3, #8
 8002b2a:	d150      	bne.n	8002bce <HCD_HC_IN_IRQHandler+0x50c>
      hhcd->hc[ch_num].ErrCnt++;
 8002b2c:	687a      	ldr	r2, [r7, #4]
 8002b2e:	68fb      	ldr	r3, [r7, #12]
 8002b30:	212c      	movs	r1, #44	; 0x2c
 8002b32:	fb01 f303 	mul.w	r3, r1, r3
 8002b36:	4413      	add	r3, r2
 8002b38:	335c      	adds	r3, #92	; 0x5c
 8002b3a:	681b      	ldr	r3, [r3, #0]
 8002b3c:	1c5a      	adds	r2, r3, #1
 8002b3e:	6879      	ldr	r1, [r7, #4]
 8002b40:	68fb      	ldr	r3, [r7, #12]
 8002b42:	202c      	movs	r0, #44	; 0x2c
 8002b44:	fb00 f303 	mul.w	r3, r0, r3
 8002b48:	440b      	add	r3, r1
 8002b4a:	335c      	adds	r3, #92	; 0x5c
 8002b4c:	601a      	str	r2, [r3, #0]
      if (hhcd->hc[ch_num].ErrCnt > 2U)
 8002b4e:	687a      	ldr	r2, [r7, #4]
 8002b50:	68fb      	ldr	r3, [r7, #12]
 8002b52:	212c      	movs	r1, #44	; 0x2c
 8002b54:	fb01 f303 	mul.w	r3, r1, r3
 8002b58:	4413      	add	r3, r2
 8002b5a:	335c      	adds	r3, #92	; 0x5c
 8002b5c:	681b      	ldr	r3, [r3, #0]
 8002b5e:	2b02      	cmp	r3, #2
 8002b60:	d912      	bls.n	8002b88 <HCD_HC_IN_IRQHandler+0x4c6>
        hhcd->hc[ch_num].ErrCnt = 0U;
 8002b62:	687a      	ldr	r2, [r7, #4]
 8002b64:	68fb      	ldr	r3, [r7, #12]
 8002b66:	212c      	movs	r1, #44	; 0x2c
 8002b68:	fb01 f303 	mul.w	r3, r1, r3
 8002b6c:	4413      	add	r3, r2
 8002b6e:	335c      	adds	r3, #92	; 0x5c
 8002b70:	2200      	movs	r2, #0
 8002b72:	601a      	str	r2, [r3, #0]
        hhcd->hc[ch_num].urb_state = URB_ERROR;
 8002b74:	687a      	ldr	r2, [r7, #4]
 8002b76:	68fb      	ldr	r3, [r7, #12]
 8002b78:	212c      	movs	r1, #44	; 0x2c
 8002b7a:	fb01 f303 	mul.w	r3, r1, r3
 8002b7e:	4413      	add	r3, r2
 8002b80:	3360      	adds	r3, #96	; 0x60
 8002b82:	2204      	movs	r2, #4
 8002b84:	701a      	strb	r2, [r3, #0]
      if (hhcd->hc[ch_num].ErrCnt > 2U)
 8002b86:	e073      	b.n	8002c70 <HCD_HC_IN_IRQHandler+0x5ae>
        hhcd->hc[ch_num].urb_state = URB_NOTREADY;
 8002b88:	687a      	ldr	r2, [r7, #4]
 8002b8a:	68fb      	ldr	r3, [r7, #12]
 8002b8c:	212c      	movs	r1, #44	; 0x2c
 8002b8e:	fb01 f303 	mul.w	r3, r1, r3
 8002b92:	4413      	add	r3, r2
 8002b94:	3360      	adds	r3, #96	; 0x60
 8002b96:	2202      	movs	r2, #2
 8002b98:	701a      	strb	r2, [r3, #0]
        tmpreg = USBx_HC(ch_num)->HCCHAR;
 8002b9a:	68fb      	ldr	r3, [r7, #12]
 8002b9c:	015a      	lsls	r2, r3, #5
 8002b9e:	693b      	ldr	r3, [r7, #16]
 8002ba0:	4413      	add	r3, r2
 8002ba2:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002ba6:	681b      	ldr	r3, [r3, #0]
 8002ba8:	60bb      	str	r3, [r7, #8]
        tmpreg &= ~USB_OTG_HCCHAR_CHDIS;
 8002baa:	68bb      	ldr	r3, [r7, #8]
 8002bac:	f023 4380 	bic.w	r3, r3, #1073741824	; 0x40000000
 8002bb0:	60bb      	str	r3, [r7, #8]
        tmpreg |= USB_OTG_HCCHAR_CHENA;
 8002bb2:	68bb      	ldr	r3, [r7, #8]
 8002bb4:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8002bb8:	60bb      	str	r3, [r7, #8]
        USBx_HC(ch_num)->HCCHAR = tmpreg;
 8002bba:	68fb      	ldr	r3, [r7, #12]
 8002bbc:	015a      	lsls	r2, r3, #5
 8002bbe:	693b      	ldr	r3, [r7, #16]
 8002bc0:	4413      	add	r3, r2
 8002bc2:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002bc6:	461a      	mov	r2, r3
 8002bc8:	68bb      	ldr	r3, [r7, #8]
 8002bca:	6013      	str	r3, [r2, #0]
      if (hhcd->hc[ch_num].ErrCnt > 2U)
 8002bcc:	e050      	b.n	8002c70 <HCD_HC_IN_IRQHandler+0x5ae>
    else if (hhcd->hc[ch_num].state == HC_NAK)
 8002bce:	687a      	ldr	r2, [r7, #4]
 8002bd0:	68fb      	ldr	r3, [r7, #12]
 8002bd2:	212c      	movs	r1, #44	; 0x2c
 8002bd4:	fb01 f303 	mul.w	r3, r1, r3
 8002bd8:	4413      	add	r3, r2
 8002bda:	3361      	adds	r3, #97	; 0x61
 8002bdc:	781b      	ldrb	r3, [r3, #0]
 8002bde:	2b03      	cmp	r3, #3
 8002be0:	d122      	bne.n	8002c28 <HCD_HC_IN_IRQHandler+0x566>
      hhcd->hc[ch_num].urb_state  = URB_NOTREADY;
 8002be2:	687a      	ldr	r2, [r7, #4]
 8002be4:	68fb      	ldr	r3, [r7, #12]
 8002be6:	212c      	movs	r1, #44	; 0x2c
 8002be8:	fb01 f303 	mul.w	r3, r1, r3
 8002bec:	4413      	add	r3, r2
 8002bee:	3360      	adds	r3, #96	; 0x60
 8002bf0:	2202      	movs	r2, #2
 8002bf2:	701a      	strb	r2, [r3, #0]
      tmpreg = USBx_HC(ch_num)->HCCHAR;
 8002bf4:	68fb      	ldr	r3, [r7, #12]
 8002bf6:	015a      	lsls	r2, r3, #5
 8002bf8:	693b      	ldr	r3, [r7, #16]
 8002bfa:	4413      	add	r3, r2
 8002bfc:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002c00:	681b      	ldr	r3, [r3, #0]
 8002c02:	60bb      	str	r3, [r7, #8]
      tmpreg &= ~USB_OTG_HCCHAR_CHDIS;
 8002c04:	68bb      	ldr	r3, [r7, #8]
 8002c06:	f023 4380 	bic.w	r3, r3, #1073741824	; 0x40000000
 8002c0a:	60bb      	str	r3, [r7, #8]
      tmpreg |= USB_OTG_HCCHAR_CHENA;
 8002c0c:	68bb      	ldr	r3, [r7, #8]
 8002c0e:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8002c12:	60bb      	str	r3, [r7, #8]
      USBx_HC(ch_num)->HCCHAR = tmpreg;
 8002c14:	68fb      	ldr	r3, [r7, #12]
 8002c16:	015a      	lsls	r2, r3, #5
 8002c18:	693b      	ldr	r3, [r7, #16]
 8002c1a:	4413      	add	r3, r2
 8002c1c:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002c20:	461a      	mov	r2, r3
 8002c22:	68bb      	ldr	r3, [r7, #8]
 8002c24:	6013      	str	r3, [r2, #0]
 8002c26:	e023      	b.n	8002c70 <HCD_HC_IN_IRQHandler+0x5ae>
    else if (hhcd->hc[ch_num].state == HC_BBLERR)
 8002c28:	687a      	ldr	r2, [r7, #4]
 8002c2a:	68fb      	ldr	r3, [r7, #12]
 8002c2c:	212c      	movs	r1, #44	; 0x2c
 8002c2e:	fb01 f303 	mul.w	r3, r1, r3
 8002c32:	4413      	add	r3, r2
 8002c34:	3361      	adds	r3, #97	; 0x61
 8002c36:	781b      	ldrb	r3, [r3, #0]
 8002c38:	2b07      	cmp	r3, #7
 8002c3a:	d119      	bne.n	8002c70 <HCD_HC_IN_IRQHandler+0x5ae>
      hhcd->hc[ch_num].ErrCnt++;
 8002c3c:	687a      	ldr	r2, [r7, #4]
 8002c3e:	68fb      	ldr	r3, [r7, #12]
 8002c40:	212c      	movs	r1, #44	; 0x2c
 8002c42:	fb01 f303 	mul.w	r3, r1, r3
 8002c46:	4413      	add	r3, r2
 8002c48:	335c      	adds	r3, #92	; 0x5c
 8002c4a:	681b      	ldr	r3, [r3, #0]
 8002c4c:	1c5a      	adds	r2, r3, #1
 8002c4e:	6879      	ldr	r1, [r7, #4]
 8002c50:	68fb      	ldr	r3, [r7, #12]
 8002c52:	202c      	movs	r0, #44	; 0x2c
 8002c54:	fb00 f303 	mul.w	r3, r0, r3
 8002c58:	440b      	add	r3, r1
 8002c5a:	335c      	adds	r3, #92	; 0x5c
 8002c5c:	601a      	str	r2, [r3, #0]
      hhcd->hc[ch_num].urb_state = URB_ERROR;
 8002c5e:	687a      	ldr	r2, [r7, #4]
 8002c60:	68fb      	ldr	r3, [r7, #12]
 8002c62:	212c      	movs	r1, #44	; 0x2c
 8002c64:	fb01 f303 	mul.w	r3, r1, r3
 8002c68:	4413      	add	r3, r2
 8002c6a:	3360      	adds	r3, #96	; 0x60
 8002c6c:	2204      	movs	r2, #4
 8002c6e:	701a      	strb	r2, [r3, #0]
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_CHH);
 8002c70:	68fb      	ldr	r3, [r7, #12]
 8002c72:	015a      	lsls	r2, r3, #5
 8002c74:	693b      	ldr	r3, [r7, #16]
 8002c76:	4413      	add	r3, r2
 8002c78:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002c7c:	461a      	mov	r2, r3
 8002c7e:	2302      	movs	r3, #2
 8002c80:	6093      	str	r3, [r2, #8]
    HAL_HCD_HC_NotifyURBChange_Callback(hhcd, (uint8_t)ch_num, hhcd->hc[ch_num].urb_state);
 8002c82:	68fb      	ldr	r3, [r7, #12]
 8002c84:	b2d9      	uxtb	r1, r3
 8002c86:	687a      	ldr	r2, [r7, #4]
 8002c88:	68fb      	ldr	r3, [r7, #12]
 8002c8a:	202c      	movs	r0, #44	; 0x2c
 8002c8c:	fb00 f303 	mul.w	r3, r0, r3
 8002c90:	4413      	add	r3, r2
 8002c92:	3360      	adds	r3, #96	; 0x60
 8002c94:	781b      	ldrb	r3, [r3, #0]
 8002c96:	461a      	mov	r2, r3
 8002c98:	6878      	ldr	r0, [r7, #4]
 8002c9a:	f006 fd5d 	bl	8009758 <HAL_HCD_HC_NotifyURBChange_Callback>
}
 8002c9e:	e061      	b.n	8002d64 <HCD_HC_IN_IRQHandler+0x6a2>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_NAK) == USB_OTG_HCINT_NAK)
 8002ca0:	68fb      	ldr	r3, [r7, #12]
 8002ca2:	015a      	lsls	r2, r3, #5
 8002ca4:	693b      	ldr	r3, [r7, #16]
 8002ca6:	4413      	add	r3, r2
 8002ca8:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002cac:	689b      	ldr	r3, [r3, #8]
 8002cae:	f003 0310 	and.w	r3, r3, #16
 8002cb2:	2b10      	cmp	r3, #16
 8002cb4:	d156      	bne.n	8002d64 <HCD_HC_IN_IRQHandler+0x6a2>
    if (hhcd->hc[ch_num].ep_type == EP_TYPE_INTR)
 8002cb6:	687a      	ldr	r2, [r7, #4]
 8002cb8:	68fb      	ldr	r3, [r7, #12]
 8002cba:	212c      	movs	r1, #44	; 0x2c
 8002cbc:	fb01 f303 	mul.w	r3, r1, r3
 8002cc0:	4413      	add	r3, r2
 8002cc2:	333f      	adds	r3, #63	; 0x3f
 8002cc4:	781b      	ldrb	r3, [r3, #0]
 8002cc6:	2b03      	cmp	r3, #3
 8002cc8:	d111      	bne.n	8002cee <HCD_HC_IN_IRQHandler+0x62c>
      hhcd->hc[ch_num].ErrCnt = 0U;
 8002cca:	687a      	ldr	r2, [r7, #4]
 8002ccc:	68fb      	ldr	r3, [r7, #12]
 8002cce:	212c      	movs	r1, #44	; 0x2c
 8002cd0:	fb01 f303 	mul.w	r3, r1, r3
 8002cd4:	4413      	add	r3, r2
 8002cd6:	335c      	adds	r3, #92	; 0x5c
 8002cd8:	2200      	movs	r2, #0
 8002cda:	601a      	str	r2, [r3, #0]
      (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 8002cdc:	687b      	ldr	r3, [r7, #4]
 8002cde:	681b      	ldr	r3, [r3, #0]
 8002ce0:	68fa      	ldr	r2, [r7, #12]
 8002ce2:	b2d2      	uxtb	r2, r2
 8002ce4:	4611      	mov	r1, r2
 8002ce6:	4618      	mov	r0, r3
 8002ce8:	f003 fbb0 	bl	800644c <USB_HC_Halt>
 8002cec:	e031      	b.n	8002d52 <HCD_HC_IN_IRQHandler+0x690>
    else if ((hhcd->hc[ch_num].ep_type == EP_TYPE_CTRL) ||
 8002cee:	687a      	ldr	r2, [r7, #4]
 8002cf0:	68fb      	ldr	r3, [r7, #12]
 8002cf2:	212c      	movs	r1, #44	; 0x2c
 8002cf4:	fb01 f303 	mul.w	r3, r1, r3
 8002cf8:	4413      	add	r3, r2
 8002cfa:	333f      	adds	r3, #63	; 0x3f
 8002cfc:	781b      	ldrb	r3, [r3, #0]
 8002cfe:	2b00      	cmp	r3, #0
 8002d00:	d009      	beq.n	8002d16 <HCD_HC_IN_IRQHandler+0x654>
             (hhcd->hc[ch_num].ep_type == EP_TYPE_BULK))
 8002d02:	687a      	ldr	r2, [r7, #4]
 8002d04:	68fb      	ldr	r3, [r7, #12]
 8002d06:	212c      	movs	r1, #44	; 0x2c
 8002d08:	fb01 f303 	mul.w	r3, r1, r3
 8002d0c:	4413      	add	r3, r2
 8002d0e:	333f      	adds	r3, #63	; 0x3f
 8002d10:	781b      	ldrb	r3, [r3, #0]
    else if ((hhcd->hc[ch_num].ep_type == EP_TYPE_CTRL) ||
 8002d12:	2b02      	cmp	r3, #2
 8002d14:	d11d      	bne.n	8002d52 <HCD_HC_IN_IRQHandler+0x690>
      hhcd->hc[ch_num].ErrCnt = 0U;
 8002d16:	687a      	ldr	r2, [r7, #4]
 8002d18:	68fb      	ldr	r3, [r7, #12]
 8002d1a:	212c      	movs	r1, #44	; 0x2c
 8002d1c:	fb01 f303 	mul.w	r3, r1, r3
 8002d20:	4413      	add	r3, r2
 8002d22:	335c      	adds	r3, #92	; 0x5c
 8002d24:	2200      	movs	r2, #0
 8002d26:	601a      	str	r2, [r3, #0]
      if (hhcd->Init.dma_enable == 0U)
 8002d28:	687b      	ldr	r3, [r7, #4]
 8002d2a:	691b      	ldr	r3, [r3, #16]
 8002d2c:	2b00      	cmp	r3, #0
 8002d2e:	d110      	bne.n	8002d52 <HCD_HC_IN_IRQHandler+0x690>
        hhcd->hc[ch_num].state = HC_NAK;
 8002d30:	687a      	ldr	r2, [r7, #4]
 8002d32:	68fb      	ldr	r3, [r7, #12]
 8002d34:	212c      	movs	r1, #44	; 0x2c
 8002d36:	fb01 f303 	mul.w	r3, r1, r3
 8002d3a:	4413      	add	r3, r2
 8002d3c:	3361      	adds	r3, #97	; 0x61
 8002d3e:	2203      	movs	r2, #3
 8002d40:	701a      	strb	r2, [r3, #0]
        (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 8002d42:	687b      	ldr	r3, [r7, #4]
 8002d44:	681b      	ldr	r3, [r3, #0]
 8002d46:	68fa      	ldr	r2, [r7, #12]
 8002d48:	b2d2      	uxtb	r2, r2
 8002d4a:	4611      	mov	r1, r2
 8002d4c:	4618      	mov	r0, r3
 8002d4e:	f003 fb7d 	bl	800644c <USB_HC_Halt>
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_NAK);
 8002d52:	68fb      	ldr	r3, [r7, #12]
 8002d54:	015a      	lsls	r2, r3, #5
 8002d56:	693b      	ldr	r3, [r7, #16]
 8002d58:	4413      	add	r3, r2
 8002d5a:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002d5e:	461a      	mov	r2, r3
 8002d60:	2310      	movs	r3, #16
 8002d62:	6093      	str	r3, [r2, #8]
}
 8002d64:	bf00      	nop
 8002d66:	3718      	adds	r7, #24
 8002d68:	46bd      	mov	sp, r7
 8002d6a:	bd80      	pop	{r7, pc}

08002d6c <HCD_HC_OUT_IRQHandler>:
  * @param  chnum Channel number.
  *         This parameter can be a value from 1 to 15
  * @retval none
  */
static void HCD_HC_OUT_IRQHandler(HCD_HandleTypeDef *hhcd, uint8_t chnum)
{
 8002d6c:	b580      	push	{r7, lr}
 8002d6e:	b088      	sub	sp, #32
 8002d70:	af00      	add	r7, sp, #0
 8002d72:	6078      	str	r0, [r7, #4]
 8002d74:	460b      	mov	r3, r1
 8002d76:	70fb      	strb	r3, [r7, #3]
  USB_OTG_GlobalTypeDef *USBx = hhcd->Instance;
 8002d78:	687b      	ldr	r3, [r7, #4]
 8002d7a:	681b      	ldr	r3, [r3, #0]
 8002d7c:	61fb      	str	r3, [r7, #28]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8002d7e:	69fb      	ldr	r3, [r7, #28]
 8002d80:	61bb      	str	r3, [r7, #24]
  uint32_t ch_num = (uint32_t)chnum;
 8002d82:	78fb      	ldrb	r3, [r7, #3]
 8002d84:	617b      	str	r3, [r7, #20]
  uint32_t tmpreg;
  uint32_t num_packets;

  if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_AHBERR) == USB_OTG_HCINT_AHBERR)
 8002d86:	697b      	ldr	r3, [r7, #20]
 8002d88:	015a      	lsls	r2, r3, #5
 8002d8a:	69bb      	ldr	r3, [r7, #24]
 8002d8c:	4413      	add	r3, r2
 8002d8e:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002d92:	689b      	ldr	r3, [r3, #8]
 8002d94:	f003 0304 	and.w	r3, r3, #4
 8002d98:	2b04      	cmp	r3, #4
 8002d9a:	d11a      	bne.n	8002dd2 <HCD_HC_OUT_IRQHandler+0x66>
  {
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_AHBERR);
 8002d9c:	697b      	ldr	r3, [r7, #20]
 8002d9e:	015a      	lsls	r2, r3, #5
 8002da0:	69bb      	ldr	r3, [r7, #24]
 8002da2:	4413      	add	r3, r2
 8002da4:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002da8:	461a      	mov	r2, r3
 8002daa:	2304      	movs	r3, #4
 8002dac:	6093      	str	r3, [r2, #8]
    hhcd->hc[ch_num].state = HC_XACTERR;
 8002dae:	687a      	ldr	r2, [r7, #4]
 8002db0:	697b      	ldr	r3, [r7, #20]
 8002db2:	212c      	movs	r1, #44	; 0x2c
 8002db4:	fb01 f303 	mul.w	r3, r1, r3
 8002db8:	4413      	add	r3, r2
 8002dba:	3361      	adds	r3, #97	; 0x61
 8002dbc:	2206      	movs	r2, #6
 8002dbe:	701a      	strb	r2, [r3, #0]
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 8002dc0:	687b      	ldr	r3, [r7, #4]
 8002dc2:	681b      	ldr	r3, [r3, #0]
 8002dc4:	697a      	ldr	r2, [r7, #20]
 8002dc6:	b2d2      	uxtb	r2, r2
 8002dc8:	4611      	mov	r1, r2
 8002dca:	4618      	mov	r0, r3
 8002dcc:	f003 fb3e 	bl	800644c <USB_HC_Halt>
  }
  else
  {
    /* ... */
  }
}
 8002dd0:	e331      	b.n	8003436 <HCD_HC_OUT_IRQHandler+0x6ca>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_ACK) == USB_OTG_HCINT_ACK)
 8002dd2:	697b      	ldr	r3, [r7, #20]
 8002dd4:	015a      	lsls	r2, r3, #5
 8002dd6:	69bb      	ldr	r3, [r7, #24]
 8002dd8:	4413      	add	r3, r2
 8002dda:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002dde:	689b      	ldr	r3, [r3, #8]
 8002de0:	f003 0320 	and.w	r3, r3, #32
 8002de4:	2b20      	cmp	r3, #32
 8002de6:	d12e      	bne.n	8002e46 <HCD_HC_OUT_IRQHandler+0xda>
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_ACK);
 8002de8:	697b      	ldr	r3, [r7, #20]
 8002dea:	015a      	lsls	r2, r3, #5
 8002dec:	69bb      	ldr	r3, [r7, #24]
 8002dee:	4413      	add	r3, r2
 8002df0:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002df4:	461a      	mov	r2, r3
 8002df6:	2320      	movs	r3, #32
 8002df8:	6093      	str	r3, [r2, #8]
    if (hhcd->hc[ch_num].do_ping == 1U)
 8002dfa:	687a      	ldr	r2, [r7, #4]
 8002dfc:	697b      	ldr	r3, [r7, #20]
 8002dfe:	212c      	movs	r1, #44	; 0x2c
 8002e00:	fb01 f303 	mul.w	r3, r1, r3
 8002e04:	4413      	add	r3, r2
 8002e06:	333d      	adds	r3, #61	; 0x3d
 8002e08:	781b      	ldrb	r3, [r3, #0]
 8002e0a:	2b01      	cmp	r3, #1
 8002e0c:	f040 8313 	bne.w	8003436 <HCD_HC_OUT_IRQHandler+0x6ca>
      hhcd->hc[ch_num].do_ping = 0U;
 8002e10:	687a      	ldr	r2, [r7, #4]
 8002e12:	697b      	ldr	r3, [r7, #20]
 8002e14:	212c      	movs	r1, #44	; 0x2c
 8002e16:	fb01 f303 	mul.w	r3, r1, r3
 8002e1a:	4413      	add	r3, r2
 8002e1c:	333d      	adds	r3, #61	; 0x3d
 8002e1e:	2200      	movs	r2, #0
 8002e20:	701a      	strb	r2, [r3, #0]
      hhcd->hc[ch_num].urb_state = URB_NOTREADY;
 8002e22:	687a      	ldr	r2, [r7, #4]
 8002e24:	697b      	ldr	r3, [r7, #20]
 8002e26:	212c      	movs	r1, #44	; 0x2c
 8002e28:	fb01 f303 	mul.w	r3, r1, r3
 8002e2c:	4413      	add	r3, r2
 8002e2e:	3360      	adds	r3, #96	; 0x60
 8002e30:	2202      	movs	r2, #2
 8002e32:	701a      	strb	r2, [r3, #0]
      (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 8002e34:	687b      	ldr	r3, [r7, #4]
 8002e36:	681b      	ldr	r3, [r3, #0]
 8002e38:	697a      	ldr	r2, [r7, #20]
 8002e3a:	b2d2      	uxtb	r2, r2
 8002e3c:	4611      	mov	r1, r2
 8002e3e:	4618      	mov	r0, r3
 8002e40:	f003 fb04 	bl	800644c <USB_HC_Halt>
}
 8002e44:	e2f7      	b.n	8003436 <HCD_HC_OUT_IRQHandler+0x6ca>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_FRMOR) == USB_OTG_HCINT_FRMOR)
 8002e46:	697b      	ldr	r3, [r7, #20]
 8002e48:	015a      	lsls	r2, r3, #5
 8002e4a:	69bb      	ldr	r3, [r7, #24]
 8002e4c:	4413      	add	r3, r2
 8002e4e:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002e52:	689b      	ldr	r3, [r3, #8]
 8002e54:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8002e58:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8002e5c:	d112      	bne.n	8002e84 <HCD_HC_OUT_IRQHandler+0x118>
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_FRMOR);
 8002e5e:	697b      	ldr	r3, [r7, #20]
 8002e60:	015a      	lsls	r2, r3, #5
 8002e62:	69bb      	ldr	r3, [r7, #24]
 8002e64:	4413      	add	r3, r2
 8002e66:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002e6a:	461a      	mov	r2, r3
 8002e6c:	f44f 7300 	mov.w	r3, #512	; 0x200
 8002e70:	6093      	str	r3, [r2, #8]
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 8002e72:	687b      	ldr	r3, [r7, #4]
 8002e74:	681b      	ldr	r3, [r3, #0]
 8002e76:	697a      	ldr	r2, [r7, #20]
 8002e78:	b2d2      	uxtb	r2, r2
 8002e7a:	4611      	mov	r1, r2
 8002e7c:	4618      	mov	r0, r3
 8002e7e:	f003 fae5 	bl	800644c <USB_HC_Halt>
}
 8002e82:	e2d8      	b.n	8003436 <HCD_HC_OUT_IRQHandler+0x6ca>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_XFRC) == USB_OTG_HCINT_XFRC)
 8002e84:	697b      	ldr	r3, [r7, #20]
 8002e86:	015a      	lsls	r2, r3, #5
 8002e88:	69bb      	ldr	r3, [r7, #24]
 8002e8a:	4413      	add	r3, r2
 8002e8c:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002e90:	689b      	ldr	r3, [r3, #8]
 8002e92:	f003 0301 	and.w	r3, r3, #1
 8002e96:	2b01      	cmp	r3, #1
 8002e98:	d140      	bne.n	8002f1c <HCD_HC_OUT_IRQHandler+0x1b0>
    hhcd->hc[ch_num].ErrCnt = 0U;
 8002e9a:	687a      	ldr	r2, [r7, #4]
 8002e9c:	697b      	ldr	r3, [r7, #20]
 8002e9e:	212c      	movs	r1, #44	; 0x2c
 8002ea0:	fb01 f303 	mul.w	r3, r1, r3
 8002ea4:	4413      	add	r3, r2
 8002ea6:	335c      	adds	r3, #92	; 0x5c
 8002ea8:	2200      	movs	r2, #0
 8002eaa:	601a      	str	r2, [r3, #0]
    if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_NYET) == USB_OTG_HCINT_NYET)
 8002eac:	697b      	ldr	r3, [r7, #20]
 8002eae:	015a      	lsls	r2, r3, #5
 8002eb0:	69bb      	ldr	r3, [r7, #24]
 8002eb2:	4413      	add	r3, r2
 8002eb4:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002eb8:	689b      	ldr	r3, [r3, #8]
 8002eba:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002ebe:	2b40      	cmp	r3, #64	; 0x40
 8002ec0:	d111      	bne.n	8002ee6 <HCD_HC_OUT_IRQHandler+0x17a>
      hhcd->hc[ch_num].do_ping = 1U;
 8002ec2:	687a      	ldr	r2, [r7, #4]
 8002ec4:	697b      	ldr	r3, [r7, #20]
 8002ec6:	212c      	movs	r1, #44	; 0x2c
 8002ec8:	fb01 f303 	mul.w	r3, r1, r3
 8002ecc:	4413      	add	r3, r2
 8002ece:	333d      	adds	r3, #61	; 0x3d
 8002ed0:	2201      	movs	r2, #1
 8002ed2:	701a      	strb	r2, [r3, #0]
      __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_NYET);
 8002ed4:	697b      	ldr	r3, [r7, #20]
 8002ed6:	015a      	lsls	r2, r3, #5
 8002ed8:	69bb      	ldr	r3, [r7, #24]
 8002eda:	4413      	add	r3, r2
 8002edc:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002ee0:	461a      	mov	r2, r3
 8002ee2:	2340      	movs	r3, #64	; 0x40
 8002ee4:	6093      	str	r3, [r2, #8]
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_XFRC);
 8002ee6:	697b      	ldr	r3, [r7, #20]
 8002ee8:	015a      	lsls	r2, r3, #5
 8002eea:	69bb      	ldr	r3, [r7, #24]
 8002eec:	4413      	add	r3, r2
 8002eee:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002ef2:	461a      	mov	r2, r3
 8002ef4:	2301      	movs	r3, #1
 8002ef6:	6093      	str	r3, [r2, #8]
    hhcd->hc[ch_num].state = HC_XFRC;
 8002ef8:	687a      	ldr	r2, [r7, #4]
 8002efa:	697b      	ldr	r3, [r7, #20]
 8002efc:	212c      	movs	r1, #44	; 0x2c
 8002efe:	fb01 f303 	mul.w	r3, r1, r3
 8002f02:	4413      	add	r3, r2
 8002f04:	3361      	adds	r3, #97	; 0x61
 8002f06:	2201      	movs	r2, #1
 8002f08:	701a      	strb	r2, [r3, #0]
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 8002f0a:	687b      	ldr	r3, [r7, #4]
 8002f0c:	681b      	ldr	r3, [r3, #0]
 8002f0e:	697a      	ldr	r2, [r7, #20]
 8002f10:	b2d2      	uxtb	r2, r2
 8002f12:	4611      	mov	r1, r2
 8002f14:	4618      	mov	r0, r3
 8002f16:	f003 fa99 	bl	800644c <USB_HC_Halt>
}
 8002f1a:	e28c      	b.n	8003436 <HCD_HC_OUT_IRQHandler+0x6ca>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_NYET) == USB_OTG_HCINT_NYET)
 8002f1c:	697b      	ldr	r3, [r7, #20]
 8002f1e:	015a      	lsls	r2, r3, #5
 8002f20:	69bb      	ldr	r3, [r7, #24]
 8002f22:	4413      	add	r3, r2
 8002f24:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002f28:	689b      	ldr	r3, [r3, #8]
 8002f2a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002f2e:	2b40      	cmp	r3, #64	; 0x40
 8002f30:	d12c      	bne.n	8002f8c <HCD_HC_OUT_IRQHandler+0x220>
    hhcd->hc[ch_num].state = HC_NYET;
 8002f32:	687a      	ldr	r2, [r7, #4]
 8002f34:	697b      	ldr	r3, [r7, #20]
 8002f36:	212c      	movs	r1, #44	; 0x2c
 8002f38:	fb01 f303 	mul.w	r3, r1, r3
 8002f3c:	4413      	add	r3, r2
 8002f3e:	3361      	adds	r3, #97	; 0x61
 8002f40:	2204      	movs	r2, #4
 8002f42:	701a      	strb	r2, [r3, #0]
    hhcd->hc[ch_num].do_ping = 1U;
 8002f44:	687a      	ldr	r2, [r7, #4]
 8002f46:	697b      	ldr	r3, [r7, #20]
 8002f48:	212c      	movs	r1, #44	; 0x2c
 8002f4a:	fb01 f303 	mul.w	r3, r1, r3
 8002f4e:	4413      	add	r3, r2
 8002f50:	333d      	adds	r3, #61	; 0x3d
 8002f52:	2201      	movs	r2, #1
 8002f54:	701a      	strb	r2, [r3, #0]
    hhcd->hc[ch_num].ErrCnt = 0U;
 8002f56:	687a      	ldr	r2, [r7, #4]
 8002f58:	697b      	ldr	r3, [r7, #20]
 8002f5a:	212c      	movs	r1, #44	; 0x2c
 8002f5c:	fb01 f303 	mul.w	r3, r1, r3
 8002f60:	4413      	add	r3, r2
 8002f62:	335c      	adds	r3, #92	; 0x5c
 8002f64:	2200      	movs	r2, #0
 8002f66:	601a      	str	r2, [r3, #0]
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 8002f68:	687b      	ldr	r3, [r7, #4]
 8002f6a:	681b      	ldr	r3, [r3, #0]
 8002f6c:	697a      	ldr	r2, [r7, #20]
 8002f6e:	b2d2      	uxtb	r2, r2
 8002f70:	4611      	mov	r1, r2
 8002f72:	4618      	mov	r0, r3
 8002f74:	f003 fa6a 	bl	800644c <USB_HC_Halt>
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_NYET);
 8002f78:	697b      	ldr	r3, [r7, #20]
 8002f7a:	015a      	lsls	r2, r3, #5
 8002f7c:	69bb      	ldr	r3, [r7, #24]
 8002f7e:	4413      	add	r3, r2
 8002f80:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002f84:	461a      	mov	r2, r3
 8002f86:	2340      	movs	r3, #64	; 0x40
 8002f88:	6093      	str	r3, [r2, #8]
}
 8002f8a:	e254      	b.n	8003436 <HCD_HC_OUT_IRQHandler+0x6ca>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_STALL) == USB_OTG_HCINT_STALL)
 8002f8c:	697b      	ldr	r3, [r7, #20]
 8002f8e:	015a      	lsls	r2, r3, #5
 8002f90:	69bb      	ldr	r3, [r7, #24]
 8002f92:	4413      	add	r3, r2
 8002f94:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002f98:	689b      	ldr	r3, [r3, #8]
 8002f9a:	f003 0308 	and.w	r3, r3, #8
 8002f9e:	2b08      	cmp	r3, #8
 8002fa0:	d11a      	bne.n	8002fd8 <HCD_HC_OUT_IRQHandler+0x26c>
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_STALL);
 8002fa2:	697b      	ldr	r3, [r7, #20]
 8002fa4:	015a      	lsls	r2, r3, #5
 8002fa6:	69bb      	ldr	r3, [r7, #24]
 8002fa8:	4413      	add	r3, r2
 8002faa:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002fae:	461a      	mov	r2, r3
 8002fb0:	2308      	movs	r3, #8
 8002fb2:	6093      	str	r3, [r2, #8]
    hhcd->hc[ch_num].state = HC_STALL;
 8002fb4:	687a      	ldr	r2, [r7, #4]
 8002fb6:	697b      	ldr	r3, [r7, #20]
 8002fb8:	212c      	movs	r1, #44	; 0x2c
 8002fba:	fb01 f303 	mul.w	r3, r1, r3
 8002fbe:	4413      	add	r3, r2
 8002fc0:	3361      	adds	r3, #97	; 0x61
 8002fc2:	2205      	movs	r2, #5
 8002fc4:	701a      	strb	r2, [r3, #0]
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 8002fc6:	687b      	ldr	r3, [r7, #4]
 8002fc8:	681b      	ldr	r3, [r3, #0]
 8002fca:	697a      	ldr	r2, [r7, #20]
 8002fcc:	b2d2      	uxtb	r2, r2
 8002fce:	4611      	mov	r1, r2
 8002fd0:	4618      	mov	r0, r3
 8002fd2:	f003 fa3b 	bl	800644c <USB_HC_Halt>
}
 8002fd6:	e22e      	b.n	8003436 <HCD_HC_OUT_IRQHandler+0x6ca>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_NAK) == USB_OTG_HCINT_NAK)
 8002fd8:	697b      	ldr	r3, [r7, #20]
 8002fda:	015a      	lsls	r2, r3, #5
 8002fdc:	69bb      	ldr	r3, [r7, #24]
 8002fde:	4413      	add	r3, r2
 8002fe0:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002fe4:	689b      	ldr	r3, [r3, #8]
 8002fe6:	f003 0310 	and.w	r3, r3, #16
 8002fea:	2b10      	cmp	r3, #16
 8002fec:	d140      	bne.n	8003070 <HCD_HC_OUT_IRQHandler+0x304>
    hhcd->hc[ch_num].ErrCnt = 0U;
 8002fee:	687a      	ldr	r2, [r7, #4]
 8002ff0:	697b      	ldr	r3, [r7, #20]
 8002ff2:	212c      	movs	r1, #44	; 0x2c
 8002ff4:	fb01 f303 	mul.w	r3, r1, r3
 8002ff8:	4413      	add	r3, r2
 8002ffa:	335c      	adds	r3, #92	; 0x5c
 8002ffc:	2200      	movs	r2, #0
 8002ffe:	601a      	str	r2, [r3, #0]
    hhcd->hc[ch_num].state = HC_NAK;
 8003000:	687a      	ldr	r2, [r7, #4]
 8003002:	697b      	ldr	r3, [r7, #20]
 8003004:	212c      	movs	r1, #44	; 0x2c
 8003006:	fb01 f303 	mul.w	r3, r1, r3
 800300a:	4413      	add	r3, r2
 800300c:	3361      	adds	r3, #97	; 0x61
 800300e:	2203      	movs	r2, #3
 8003010:	701a      	strb	r2, [r3, #0]
    if (hhcd->hc[ch_num].do_ping == 0U)
 8003012:	687a      	ldr	r2, [r7, #4]
 8003014:	697b      	ldr	r3, [r7, #20]
 8003016:	212c      	movs	r1, #44	; 0x2c
 8003018:	fb01 f303 	mul.w	r3, r1, r3
 800301c:	4413      	add	r3, r2
 800301e:	333d      	adds	r3, #61	; 0x3d
 8003020:	781b      	ldrb	r3, [r3, #0]
 8003022:	2b00      	cmp	r3, #0
 8003024:	d112      	bne.n	800304c <HCD_HC_OUT_IRQHandler+0x2e0>
      if (hhcd->hc[ch_num].speed == HCD_DEVICE_SPEED_HIGH)
 8003026:	687a      	ldr	r2, [r7, #4]
 8003028:	697b      	ldr	r3, [r7, #20]
 800302a:	212c      	movs	r1, #44	; 0x2c
 800302c:	fb01 f303 	mul.w	r3, r1, r3
 8003030:	4413      	add	r3, r2
 8003032:	333c      	adds	r3, #60	; 0x3c
 8003034:	781b      	ldrb	r3, [r3, #0]
 8003036:	2b00      	cmp	r3, #0
 8003038:	d108      	bne.n	800304c <HCD_HC_OUT_IRQHandler+0x2e0>
        hhcd->hc[ch_num].do_ping = 1U;
 800303a:	687a      	ldr	r2, [r7, #4]
 800303c:	697b      	ldr	r3, [r7, #20]
 800303e:	212c      	movs	r1, #44	; 0x2c
 8003040:	fb01 f303 	mul.w	r3, r1, r3
 8003044:	4413      	add	r3, r2
 8003046:	333d      	adds	r3, #61	; 0x3d
 8003048:	2201      	movs	r2, #1
 800304a:	701a      	strb	r2, [r3, #0]
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 800304c:	687b      	ldr	r3, [r7, #4]
 800304e:	681b      	ldr	r3, [r3, #0]
 8003050:	697a      	ldr	r2, [r7, #20]
 8003052:	b2d2      	uxtb	r2, r2
 8003054:	4611      	mov	r1, r2
 8003056:	4618      	mov	r0, r3
 8003058:	f003 f9f8 	bl	800644c <USB_HC_Halt>
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_NAK);
 800305c:	697b      	ldr	r3, [r7, #20]
 800305e:	015a      	lsls	r2, r3, #5
 8003060:	69bb      	ldr	r3, [r7, #24]
 8003062:	4413      	add	r3, r2
 8003064:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8003068:	461a      	mov	r2, r3
 800306a:	2310      	movs	r3, #16
 800306c:	6093      	str	r3, [r2, #8]
}
 800306e:	e1e2      	b.n	8003436 <HCD_HC_OUT_IRQHandler+0x6ca>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_TXERR) == USB_OTG_HCINT_TXERR)
 8003070:	697b      	ldr	r3, [r7, #20]
 8003072:	015a      	lsls	r2, r3, #5
 8003074:	69bb      	ldr	r3, [r7, #24]
 8003076:	4413      	add	r3, r2
 8003078:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800307c:	689b      	ldr	r3, [r3, #8]
 800307e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003082:	2b80      	cmp	r3, #128	; 0x80
 8003084:	d164      	bne.n	8003150 <HCD_HC_OUT_IRQHandler+0x3e4>
    if (hhcd->Init.dma_enable == 0U)
 8003086:	687b      	ldr	r3, [r7, #4]
 8003088:	691b      	ldr	r3, [r3, #16]
 800308a:	2b00      	cmp	r3, #0
 800308c:	d111      	bne.n	80030b2 <HCD_HC_OUT_IRQHandler+0x346>
      hhcd->hc[ch_num].state = HC_XACTERR;
 800308e:	687a      	ldr	r2, [r7, #4]
 8003090:	697b      	ldr	r3, [r7, #20]
 8003092:	212c      	movs	r1, #44	; 0x2c
 8003094:	fb01 f303 	mul.w	r3, r1, r3
 8003098:	4413      	add	r3, r2
 800309a:	3361      	adds	r3, #97	; 0x61
 800309c:	2206      	movs	r2, #6
 800309e:	701a      	strb	r2, [r3, #0]
      (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 80030a0:	687b      	ldr	r3, [r7, #4]
 80030a2:	681b      	ldr	r3, [r3, #0]
 80030a4:	697a      	ldr	r2, [r7, #20]
 80030a6:	b2d2      	uxtb	r2, r2
 80030a8:	4611      	mov	r1, r2
 80030aa:	4618      	mov	r0, r3
 80030ac:	f003 f9ce 	bl	800644c <USB_HC_Halt>
 80030b0:	e044      	b.n	800313c <HCD_HC_OUT_IRQHandler+0x3d0>
      hhcd->hc[ch_num].ErrCnt++;
 80030b2:	687a      	ldr	r2, [r7, #4]
 80030b4:	697b      	ldr	r3, [r7, #20]
 80030b6:	212c      	movs	r1, #44	; 0x2c
 80030b8:	fb01 f303 	mul.w	r3, r1, r3
 80030bc:	4413      	add	r3, r2
 80030be:	335c      	adds	r3, #92	; 0x5c
 80030c0:	681b      	ldr	r3, [r3, #0]
 80030c2:	1c5a      	adds	r2, r3, #1
 80030c4:	6879      	ldr	r1, [r7, #4]
 80030c6:	697b      	ldr	r3, [r7, #20]
 80030c8:	202c      	movs	r0, #44	; 0x2c
 80030ca:	fb00 f303 	mul.w	r3, r0, r3
 80030ce:	440b      	add	r3, r1
 80030d0:	335c      	adds	r3, #92	; 0x5c
 80030d2:	601a      	str	r2, [r3, #0]
      if (hhcd->hc[ch_num].ErrCnt > 2U)
 80030d4:	687a      	ldr	r2, [r7, #4]
 80030d6:	697b      	ldr	r3, [r7, #20]
 80030d8:	212c      	movs	r1, #44	; 0x2c
 80030da:	fb01 f303 	mul.w	r3, r1, r3
 80030de:	4413      	add	r3, r2
 80030e0:	335c      	adds	r3, #92	; 0x5c
 80030e2:	681b      	ldr	r3, [r3, #0]
 80030e4:	2b02      	cmp	r3, #2
 80030e6:	d920      	bls.n	800312a <HCD_HC_OUT_IRQHandler+0x3be>
        hhcd->hc[ch_num].ErrCnt = 0U;
 80030e8:	687a      	ldr	r2, [r7, #4]
 80030ea:	697b      	ldr	r3, [r7, #20]
 80030ec:	212c      	movs	r1, #44	; 0x2c
 80030ee:	fb01 f303 	mul.w	r3, r1, r3
 80030f2:	4413      	add	r3, r2
 80030f4:	335c      	adds	r3, #92	; 0x5c
 80030f6:	2200      	movs	r2, #0
 80030f8:	601a      	str	r2, [r3, #0]
        hhcd->hc[ch_num].urb_state = URB_ERROR;
 80030fa:	687a      	ldr	r2, [r7, #4]
 80030fc:	697b      	ldr	r3, [r7, #20]
 80030fe:	212c      	movs	r1, #44	; 0x2c
 8003100:	fb01 f303 	mul.w	r3, r1, r3
 8003104:	4413      	add	r3, r2
 8003106:	3360      	adds	r3, #96	; 0x60
 8003108:	2204      	movs	r2, #4
 800310a:	701a      	strb	r2, [r3, #0]
        HAL_HCD_HC_NotifyURBChange_Callback(hhcd, (uint8_t)ch_num, hhcd->hc[ch_num].urb_state);
 800310c:	697b      	ldr	r3, [r7, #20]
 800310e:	b2d9      	uxtb	r1, r3
 8003110:	687a      	ldr	r2, [r7, #4]
 8003112:	697b      	ldr	r3, [r7, #20]
 8003114:	202c      	movs	r0, #44	; 0x2c
 8003116:	fb00 f303 	mul.w	r3, r0, r3
 800311a:	4413      	add	r3, r2
 800311c:	3360      	adds	r3, #96	; 0x60
 800311e:	781b      	ldrb	r3, [r3, #0]
 8003120:	461a      	mov	r2, r3
 8003122:	6878      	ldr	r0, [r7, #4]
 8003124:	f006 fb18 	bl	8009758 <HAL_HCD_HC_NotifyURBChange_Callback>
 8003128:	e008      	b.n	800313c <HCD_HC_OUT_IRQHandler+0x3d0>
        hhcd->hc[ch_num].urb_state = URB_NOTREADY;
 800312a:	687a      	ldr	r2, [r7, #4]
 800312c:	697b      	ldr	r3, [r7, #20]
 800312e:	212c      	movs	r1, #44	; 0x2c
 8003130:	fb01 f303 	mul.w	r3, r1, r3
 8003134:	4413      	add	r3, r2
 8003136:	3360      	adds	r3, #96	; 0x60
 8003138:	2202      	movs	r2, #2
 800313a:	701a      	strb	r2, [r3, #0]
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_TXERR);
 800313c:	697b      	ldr	r3, [r7, #20]
 800313e:	015a      	lsls	r2, r3, #5
 8003140:	69bb      	ldr	r3, [r7, #24]
 8003142:	4413      	add	r3, r2
 8003144:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8003148:	461a      	mov	r2, r3
 800314a:	2380      	movs	r3, #128	; 0x80
 800314c:	6093      	str	r3, [r2, #8]
}
 800314e:	e172      	b.n	8003436 <HCD_HC_OUT_IRQHandler+0x6ca>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_DTERR) == USB_OTG_HCINT_DTERR)
 8003150:	697b      	ldr	r3, [r7, #20]
 8003152:	015a      	lsls	r2, r3, #5
 8003154:	69bb      	ldr	r3, [r7, #24]
 8003156:	4413      	add	r3, r2
 8003158:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800315c:	689b      	ldr	r3, [r3, #8]
 800315e:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8003162:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8003166:	d11b      	bne.n	80031a0 <HCD_HC_OUT_IRQHandler+0x434>
    hhcd->hc[ch_num].state = HC_DATATGLERR;
 8003168:	687a      	ldr	r2, [r7, #4]
 800316a:	697b      	ldr	r3, [r7, #20]
 800316c:	212c      	movs	r1, #44	; 0x2c
 800316e:	fb01 f303 	mul.w	r3, r1, r3
 8003172:	4413      	add	r3, r2
 8003174:	3361      	adds	r3, #97	; 0x61
 8003176:	2208      	movs	r2, #8
 8003178:	701a      	strb	r2, [r3, #0]
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 800317a:	687b      	ldr	r3, [r7, #4]
 800317c:	681b      	ldr	r3, [r3, #0]
 800317e:	697a      	ldr	r2, [r7, #20]
 8003180:	b2d2      	uxtb	r2, r2
 8003182:	4611      	mov	r1, r2
 8003184:	4618      	mov	r0, r3
 8003186:	f003 f961 	bl	800644c <USB_HC_Halt>
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_DTERR);
 800318a:	697b      	ldr	r3, [r7, #20]
 800318c:	015a      	lsls	r2, r3, #5
 800318e:	69bb      	ldr	r3, [r7, #24]
 8003190:	4413      	add	r3, r2
 8003192:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8003196:	461a      	mov	r2, r3
 8003198:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800319c:	6093      	str	r3, [r2, #8]
}
 800319e:	e14a      	b.n	8003436 <HCD_HC_OUT_IRQHandler+0x6ca>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_CHH) == USB_OTG_HCINT_CHH)
 80031a0:	697b      	ldr	r3, [r7, #20]
 80031a2:	015a      	lsls	r2, r3, #5
 80031a4:	69bb      	ldr	r3, [r7, #24]
 80031a6:	4413      	add	r3, r2
 80031a8:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80031ac:	689b      	ldr	r3, [r3, #8]
 80031ae:	f003 0302 	and.w	r3, r3, #2
 80031b2:	2b02      	cmp	r3, #2
 80031b4:	f040 813f 	bne.w	8003436 <HCD_HC_OUT_IRQHandler+0x6ca>
    if (hhcd->hc[ch_num].state == HC_XFRC)
 80031b8:	687a      	ldr	r2, [r7, #4]
 80031ba:	697b      	ldr	r3, [r7, #20]
 80031bc:	212c      	movs	r1, #44	; 0x2c
 80031be:	fb01 f303 	mul.w	r3, r1, r3
 80031c2:	4413      	add	r3, r2
 80031c4:	3361      	adds	r3, #97	; 0x61
 80031c6:	781b      	ldrb	r3, [r3, #0]
 80031c8:	2b01      	cmp	r3, #1
 80031ca:	d17d      	bne.n	80032c8 <HCD_HC_OUT_IRQHandler+0x55c>
      hhcd->hc[ch_num].urb_state  = URB_DONE;
 80031cc:	687a      	ldr	r2, [r7, #4]
 80031ce:	697b      	ldr	r3, [r7, #20]
 80031d0:	212c      	movs	r1, #44	; 0x2c
 80031d2:	fb01 f303 	mul.w	r3, r1, r3
 80031d6:	4413      	add	r3, r2
 80031d8:	3360      	adds	r3, #96	; 0x60
 80031da:	2201      	movs	r2, #1
 80031dc:	701a      	strb	r2, [r3, #0]
      if ((hhcd->hc[ch_num].ep_type == EP_TYPE_BULK) ||
 80031de:	687a      	ldr	r2, [r7, #4]
 80031e0:	697b      	ldr	r3, [r7, #20]
 80031e2:	212c      	movs	r1, #44	; 0x2c
 80031e4:	fb01 f303 	mul.w	r3, r1, r3
 80031e8:	4413      	add	r3, r2
 80031ea:	333f      	adds	r3, #63	; 0x3f
 80031ec:	781b      	ldrb	r3, [r3, #0]
 80031ee:	2b02      	cmp	r3, #2
 80031f0:	d00a      	beq.n	8003208 <HCD_HC_OUT_IRQHandler+0x49c>
          (hhcd->hc[ch_num].ep_type == EP_TYPE_INTR))
 80031f2:	687a      	ldr	r2, [r7, #4]
 80031f4:	697b      	ldr	r3, [r7, #20]
 80031f6:	212c      	movs	r1, #44	; 0x2c
 80031f8:	fb01 f303 	mul.w	r3, r1, r3
 80031fc:	4413      	add	r3, r2
 80031fe:	333f      	adds	r3, #63	; 0x3f
 8003200:	781b      	ldrb	r3, [r3, #0]
      if ((hhcd->hc[ch_num].ep_type == EP_TYPE_BULK) ||
 8003202:	2b03      	cmp	r3, #3
 8003204:	f040 8100 	bne.w	8003408 <HCD_HC_OUT_IRQHandler+0x69c>
        if (hhcd->Init.dma_enable == 0U)
 8003208:	687b      	ldr	r3, [r7, #4]
 800320a:	691b      	ldr	r3, [r3, #16]
 800320c:	2b00      	cmp	r3, #0
 800320e:	d113      	bne.n	8003238 <HCD_HC_OUT_IRQHandler+0x4cc>
          hhcd->hc[ch_num].toggle_out ^= 1U;
 8003210:	687a      	ldr	r2, [r7, #4]
 8003212:	697b      	ldr	r3, [r7, #20]
 8003214:	212c      	movs	r1, #44	; 0x2c
 8003216:	fb01 f303 	mul.w	r3, r1, r3
 800321a:	4413      	add	r3, r2
 800321c:	3355      	adds	r3, #85	; 0x55
 800321e:	781b      	ldrb	r3, [r3, #0]
 8003220:	f083 0301 	eor.w	r3, r3, #1
 8003224:	b2d8      	uxtb	r0, r3
 8003226:	687a      	ldr	r2, [r7, #4]
 8003228:	697b      	ldr	r3, [r7, #20]
 800322a:	212c      	movs	r1, #44	; 0x2c
 800322c:	fb01 f303 	mul.w	r3, r1, r3
 8003230:	4413      	add	r3, r2
 8003232:	3355      	adds	r3, #85	; 0x55
 8003234:	4602      	mov	r2, r0
 8003236:	701a      	strb	r2, [r3, #0]
        if ((hhcd->Init.dma_enable == 1U) && (hhcd->hc[ch_num].xfer_len > 0U))
 8003238:	687b      	ldr	r3, [r7, #4]
 800323a:	691b      	ldr	r3, [r3, #16]
 800323c:	2b01      	cmp	r3, #1
 800323e:	f040 80e3 	bne.w	8003408 <HCD_HC_OUT_IRQHandler+0x69c>
 8003242:	687a      	ldr	r2, [r7, #4]
 8003244:	697b      	ldr	r3, [r7, #20]
 8003246:	212c      	movs	r1, #44	; 0x2c
 8003248:	fb01 f303 	mul.w	r3, r1, r3
 800324c:	4413      	add	r3, r2
 800324e:	334c      	adds	r3, #76	; 0x4c
 8003250:	681b      	ldr	r3, [r3, #0]
 8003252:	2b00      	cmp	r3, #0
 8003254:	f000 80d8 	beq.w	8003408 <HCD_HC_OUT_IRQHandler+0x69c>
          num_packets = (hhcd->hc[ch_num].xfer_len + hhcd->hc[ch_num].max_packet - 1U) / hhcd->hc[ch_num].max_packet;
 8003258:	687a      	ldr	r2, [r7, #4]
 800325a:	697b      	ldr	r3, [r7, #20]
 800325c:	212c      	movs	r1, #44	; 0x2c
 800325e:	fb01 f303 	mul.w	r3, r1, r3
 8003262:	4413      	add	r3, r2
 8003264:	334c      	adds	r3, #76	; 0x4c
 8003266:	681b      	ldr	r3, [r3, #0]
 8003268:	6879      	ldr	r1, [r7, #4]
 800326a:	697a      	ldr	r2, [r7, #20]
 800326c:	202c      	movs	r0, #44	; 0x2c
 800326e:	fb00 f202 	mul.w	r2, r0, r2
 8003272:	440a      	add	r2, r1
 8003274:	3240      	adds	r2, #64	; 0x40
 8003276:	8812      	ldrh	r2, [r2, #0]
 8003278:	4413      	add	r3, r2
 800327a:	3b01      	subs	r3, #1
 800327c:	6879      	ldr	r1, [r7, #4]
 800327e:	697a      	ldr	r2, [r7, #20]
 8003280:	202c      	movs	r0, #44	; 0x2c
 8003282:	fb00 f202 	mul.w	r2, r0, r2
 8003286:	440a      	add	r2, r1
 8003288:	3240      	adds	r2, #64	; 0x40
 800328a:	8812      	ldrh	r2, [r2, #0]
 800328c:	fbb3 f3f2 	udiv	r3, r3, r2
 8003290:	60fb      	str	r3, [r7, #12]
          if ((num_packets & 1U) != 0U)
 8003292:	68fb      	ldr	r3, [r7, #12]
 8003294:	f003 0301 	and.w	r3, r3, #1
 8003298:	2b00      	cmp	r3, #0
 800329a:	f000 80b5 	beq.w	8003408 <HCD_HC_OUT_IRQHandler+0x69c>
            hhcd->hc[ch_num].toggle_out ^= 1U;
 800329e:	687a      	ldr	r2, [r7, #4]
 80032a0:	697b      	ldr	r3, [r7, #20]
 80032a2:	212c      	movs	r1, #44	; 0x2c
 80032a4:	fb01 f303 	mul.w	r3, r1, r3
 80032a8:	4413      	add	r3, r2
 80032aa:	3355      	adds	r3, #85	; 0x55
 80032ac:	781b      	ldrb	r3, [r3, #0]
 80032ae:	f083 0301 	eor.w	r3, r3, #1
 80032b2:	b2d8      	uxtb	r0, r3
 80032b4:	687a      	ldr	r2, [r7, #4]
 80032b6:	697b      	ldr	r3, [r7, #20]
 80032b8:	212c      	movs	r1, #44	; 0x2c
 80032ba:	fb01 f303 	mul.w	r3, r1, r3
 80032be:	4413      	add	r3, r2
 80032c0:	3355      	adds	r3, #85	; 0x55
 80032c2:	4602      	mov	r2, r0
 80032c4:	701a      	strb	r2, [r3, #0]
 80032c6:	e09f      	b.n	8003408 <HCD_HC_OUT_IRQHandler+0x69c>
    else if (hhcd->hc[ch_num].state == HC_NAK)
 80032c8:	687a      	ldr	r2, [r7, #4]
 80032ca:	697b      	ldr	r3, [r7, #20]
 80032cc:	212c      	movs	r1, #44	; 0x2c
 80032ce:	fb01 f303 	mul.w	r3, r1, r3
 80032d2:	4413      	add	r3, r2
 80032d4:	3361      	adds	r3, #97	; 0x61
 80032d6:	781b      	ldrb	r3, [r3, #0]
 80032d8:	2b03      	cmp	r3, #3
 80032da:	d109      	bne.n	80032f0 <HCD_HC_OUT_IRQHandler+0x584>
      hhcd->hc[ch_num].urb_state = URB_NOTREADY;
 80032dc:	687a      	ldr	r2, [r7, #4]
 80032de:	697b      	ldr	r3, [r7, #20]
 80032e0:	212c      	movs	r1, #44	; 0x2c
 80032e2:	fb01 f303 	mul.w	r3, r1, r3
 80032e6:	4413      	add	r3, r2
 80032e8:	3360      	adds	r3, #96	; 0x60
 80032ea:	2202      	movs	r2, #2
 80032ec:	701a      	strb	r2, [r3, #0]
 80032ee:	e08b      	b.n	8003408 <HCD_HC_OUT_IRQHandler+0x69c>
    else if (hhcd->hc[ch_num].state == HC_NYET)
 80032f0:	687a      	ldr	r2, [r7, #4]
 80032f2:	697b      	ldr	r3, [r7, #20]
 80032f4:	212c      	movs	r1, #44	; 0x2c
 80032f6:	fb01 f303 	mul.w	r3, r1, r3
 80032fa:	4413      	add	r3, r2
 80032fc:	3361      	adds	r3, #97	; 0x61
 80032fe:	781b      	ldrb	r3, [r3, #0]
 8003300:	2b04      	cmp	r3, #4
 8003302:	d109      	bne.n	8003318 <HCD_HC_OUT_IRQHandler+0x5ac>
      hhcd->hc[ch_num].urb_state  = URB_NOTREADY;
 8003304:	687a      	ldr	r2, [r7, #4]
 8003306:	697b      	ldr	r3, [r7, #20]
 8003308:	212c      	movs	r1, #44	; 0x2c
 800330a:	fb01 f303 	mul.w	r3, r1, r3
 800330e:	4413      	add	r3, r2
 8003310:	3360      	adds	r3, #96	; 0x60
 8003312:	2202      	movs	r2, #2
 8003314:	701a      	strb	r2, [r3, #0]
 8003316:	e077      	b.n	8003408 <HCD_HC_OUT_IRQHandler+0x69c>
    else if (hhcd->hc[ch_num].state == HC_STALL)
 8003318:	687a      	ldr	r2, [r7, #4]
 800331a:	697b      	ldr	r3, [r7, #20]
 800331c:	212c      	movs	r1, #44	; 0x2c
 800331e:	fb01 f303 	mul.w	r3, r1, r3
 8003322:	4413      	add	r3, r2
 8003324:	3361      	adds	r3, #97	; 0x61
 8003326:	781b      	ldrb	r3, [r3, #0]
 8003328:	2b05      	cmp	r3, #5
 800332a:	d109      	bne.n	8003340 <HCD_HC_OUT_IRQHandler+0x5d4>
      hhcd->hc[ch_num].urb_state  = URB_STALL;
 800332c:	687a      	ldr	r2, [r7, #4]
 800332e:	697b      	ldr	r3, [r7, #20]
 8003330:	212c      	movs	r1, #44	; 0x2c
 8003332:	fb01 f303 	mul.w	r3, r1, r3
 8003336:	4413      	add	r3, r2
 8003338:	3360      	adds	r3, #96	; 0x60
 800333a:	2205      	movs	r2, #5
 800333c:	701a      	strb	r2, [r3, #0]
 800333e:	e063      	b.n	8003408 <HCD_HC_OUT_IRQHandler+0x69c>
    else if ((hhcd->hc[ch_num].state == HC_XACTERR) ||
 8003340:	687a      	ldr	r2, [r7, #4]
 8003342:	697b      	ldr	r3, [r7, #20]
 8003344:	212c      	movs	r1, #44	; 0x2c
 8003346:	fb01 f303 	mul.w	r3, r1, r3
 800334a:	4413      	add	r3, r2
 800334c:	3361      	adds	r3, #97	; 0x61
 800334e:	781b      	ldrb	r3, [r3, #0]
 8003350:	2b06      	cmp	r3, #6
 8003352:	d009      	beq.n	8003368 <HCD_HC_OUT_IRQHandler+0x5fc>
             (hhcd->hc[ch_num].state == HC_DATATGLERR))
 8003354:	687a      	ldr	r2, [r7, #4]
 8003356:	697b      	ldr	r3, [r7, #20]
 8003358:	212c      	movs	r1, #44	; 0x2c
 800335a:	fb01 f303 	mul.w	r3, r1, r3
 800335e:	4413      	add	r3, r2
 8003360:	3361      	adds	r3, #97	; 0x61
 8003362:	781b      	ldrb	r3, [r3, #0]
    else if ((hhcd->hc[ch_num].state == HC_XACTERR) ||
 8003364:	2b08      	cmp	r3, #8
 8003366:	d14f      	bne.n	8003408 <HCD_HC_OUT_IRQHandler+0x69c>
      hhcd->hc[ch_num].ErrCnt++;
 8003368:	687a      	ldr	r2, [r7, #4]
 800336a:	697b      	ldr	r3, [r7, #20]
 800336c:	212c      	movs	r1, #44	; 0x2c
 800336e:	fb01 f303 	mul.w	r3, r1, r3
 8003372:	4413      	add	r3, r2
 8003374:	335c      	adds	r3, #92	; 0x5c
 8003376:	681b      	ldr	r3, [r3, #0]
 8003378:	1c5a      	adds	r2, r3, #1
 800337a:	6879      	ldr	r1, [r7, #4]
 800337c:	697b      	ldr	r3, [r7, #20]
 800337e:	202c      	movs	r0, #44	; 0x2c
 8003380:	fb00 f303 	mul.w	r3, r0, r3
 8003384:	440b      	add	r3, r1
 8003386:	335c      	adds	r3, #92	; 0x5c
 8003388:	601a      	str	r2, [r3, #0]
      if (hhcd->hc[ch_num].ErrCnt > 2U)
 800338a:	687a      	ldr	r2, [r7, #4]
 800338c:	697b      	ldr	r3, [r7, #20]
 800338e:	212c      	movs	r1, #44	; 0x2c
 8003390:	fb01 f303 	mul.w	r3, r1, r3
 8003394:	4413      	add	r3, r2
 8003396:	335c      	adds	r3, #92	; 0x5c
 8003398:	681b      	ldr	r3, [r3, #0]
 800339a:	2b02      	cmp	r3, #2
 800339c:	d912      	bls.n	80033c4 <HCD_HC_OUT_IRQHandler+0x658>
        hhcd->hc[ch_num].ErrCnt = 0U;
 800339e:	687a      	ldr	r2, [r7, #4]
 80033a0:	697b      	ldr	r3, [r7, #20]
 80033a2:	212c      	movs	r1, #44	; 0x2c
 80033a4:	fb01 f303 	mul.w	r3, r1, r3
 80033a8:	4413      	add	r3, r2
 80033aa:	335c      	adds	r3, #92	; 0x5c
 80033ac:	2200      	movs	r2, #0
 80033ae:	601a      	str	r2, [r3, #0]
        hhcd->hc[ch_num].urb_state = URB_ERROR;
 80033b0:	687a      	ldr	r2, [r7, #4]
 80033b2:	697b      	ldr	r3, [r7, #20]
 80033b4:	212c      	movs	r1, #44	; 0x2c
 80033b6:	fb01 f303 	mul.w	r3, r1, r3
 80033ba:	4413      	add	r3, r2
 80033bc:	3360      	adds	r3, #96	; 0x60
 80033be:	2204      	movs	r2, #4
 80033c0:	701a      	strb	r2, [r3, #0]
 80033c2:	e021      	b.n	8003408 <HCD_HC_OUT_IRQHandler+0x69c>
        hhcd->hc[ch_num].urb_state = URB_NOTREADY;
 80033c4:	687a      	ldr	r2, [r7, #4]
 80033c6:	697b      	ldr	r3, [r7, #20]
 80033c8:	212c      	movs	r1, #44	; 0x2c
 80033ca:	fb01 f303 	mul.w	r3, r1, r3
 80033ce:	4413      	add	r3, r2
 80033d0:	3360      	adds	r3, #96	; 0x60
 80033d2:	2202      	movs	r2, #2
 80033d4:	701a      	strb	r2, [r3, #0]
        tmpreg = USBx_HC(ch_num)->HCCHAR;
 80033d6:	697b      	ldr	r3, [r7, #20]
 80033d8:	015a      	lsls	r2, r3, #5
 80033da:	69bb      	ldr	r3, [r7, #24]
 80033dc:	4413      	add	r3, r2
 80033de:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80033e2:	681b      	ldr	r3, [r3, #0]
 80033e4:	613b      	str	r3, [r7, #16]
        tmpreg &= ~USB_OTG_HCCHAR_CHDIS;
 80033e6:	693b      	ldr	r3, [r7, #16]
 80033e8:	f023 4380 	bic.w	r3, r3, #1073741824	; 0x40000000
 80033ec:	613b      	str	r3, [r7, #16]
        tmpreg |= USB_OTG_HCCHAR_CHENA;
 80033ee:	693b      	ldr	r3, [r7, #16]
 80033f0:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 80033f4:	613b      	str	r3, [r7, #16]
        USBx_HC(ch_num)->HCCHAR = tmpreg;
 80033f6:	697b      	ldr	r3, [r7, #20]
 80033f8:	015a      	lsls	r2, r3, #5
 80033fa:	69bb      	ldr	r3, [r7, #24]
 80033fc:	4413      	add	r3, r2
 80033fe:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8003402:	461a      	mov	r2, r3
 8003404:	693b      	ldr	r3, [r7, #16]
 8003406:	6013      	str	r3, [r2, #0]
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_CHH);
 8003408:	697b      	ldr	r3, [r7, #20]
 800340a:	015a      	lsls	r2, r3, #5
 800340c:	69bb      	ldr	r3, [r7, #24]
 800340e:	4413      	add	r3, r2
 8003410:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8003414:	461a      	mov	r2, r3
 8003416:	2302      	movs	r3, #2
 8003418:	6093      	str	r3, [r2, #8]
    HAL_HCD_HC_NotifyURBChange_Callback(hhcd, (uint8_t)ch_num, hhcd->hc[ch_num].urb_state);
 800341a:	697b      	ldr	r3, [r7, #20]
 800341c:	b2d9      	uxtb	r1, r3
 800341e:	687a      	ldr	r2, [r7, #4]
 8003420:	697b      	ldr	r3, [r7, #20]
 8003422:	202c      	movs	r0, #44	; 0x2c
 8003424:	fb00 f303 	mul.w	r3, r0, r3
 8003428:	4413      	add	r3, r2
 800342a:	3360      	adds	r3, #96	; 0x60
 800342c:	781b      	ldrb	r3, [r3, #0]
 800342e:	461a      	mov	r2, r3
 8003430:	6878      	ldr	r0, [r7, #4]
 8003432:	f006 f991 	bl	8009758 <HAL_HCD_HC_NotifyURBChange_Callback>
}
 8003436:	bf00      	nop
 8003438:	3720      	adds	r7, #32
 800343a:	46bd      	mov	sp, r7
 800343c:	bd80      	pop	{r7, pc}

0800343e <HCD_RXQLVL_IRQHandler>:
  * @brief  Handle Rx Queue Level interrupt requests.
  * @param  hhcd HCD handle
  * @retval none
  */
static void HCD_RXQLVL_IRQHandler(HCD_HandleTypeDef *hhcd)
{
 800343e:	b580      	push	{r7, lr}
 8003440:	b08a      	sub	sp, #40	; 0x28
 8003442:	af00      	add	r7, sp, #0
 8003444:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx = hhcd->Instance;
 8003446:	687b      	ldr	r3, [r7, #4]
 8003448:	681b      	ldr	r3, [r3, #0]
 800344a:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t USBx_BASE = (uint32_t)USBx;
 800344c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800344e:	623b      	str	r3, [r7, #32]
  uint32_t GrxstspReg;
  uint32_t xferSizePktCnt;
  uint32_t tmpreg;
  uint32_t ch_num;

  GrxstspReg = hhcd->Instance->GRXSTSP;
 8003450:	687b      	ldr	r3, [r7, #4]
 8003452:	681b      	ldr	r3, [r3, #0]
 8003454:	6a1b      	ldr	r3, [r3, #32]
 8003456:	61fb      	str	r3, [r7, #28]
  ch_num = GrxstspReg & USB_OTG_GRXSTSP_EPNUM;
 8003458:	69fb      	ldr	r3, [r7, #28]
 800345a:	f003 030f 	and.w	r3, r3, #15
 800345e:	61bb      	str	r3, [r7, #24]
  pktsts = (GrxstspReg & USB_OTG_GRXSTSP_PKTSTS) >> 17;
 8003460:	69fb      	ldr	r3, [r7, #28]
 8003462:	0c5b      	lsrs	r3, r3, #17
 8003464:	f003 030f 	and.w	r3, r3, #15
 8003468:	617b      	str	r3, [r7, #20]
  pktcnt = (GrxstspReg & USB_OTG_GRXSTSP_BCNT) >> 4;
 800346a:	69fb      	ldr	r3, [r7, #28]
 800346c:	091b      	lsrs	r3, r3, #4
 800346e:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8003472:	613b      	str	r3, [r7, #16]

  switch (pktsts)
 8003474:	697b      	ldr	r3, [r7, #20]
 8003476:	2b02      	cmp	r3, #2
 8003478:	d004      	beq.n	8003484 <HCD_RXQLVL_IRQHandler+0x46>
 800347a:	697b      	ldr	r3, [r7, #20]
 800347c:	2b05      	cmp	r3, #5
 800347e:	f000 80a9 	beq.w	80035d4 <HCD_RXQLVL_IRQHandler+0x196>
      break;

    case GRXSTS_PKTSTS_IN_XFER_COMP:
    case GRXSTS_PKTSTS_CH_HALTED:
    default:
      break;
 8003482:	e0aa      	b.n	80035da <HCD_RXQLVL_IRQHandler+0x19c>
      if ((pktcnt > 0U) && (hhcd->hc[ch_num].xfer_buff != (void *)0))
 8003484:	693b      	ldr	r3, [r7, #16]
 8003486:	2b00      	cmp	r3, #0
 8003488:	f000 80a6 	beq.w	80035d8 <HCD_RXQLVL_IRQHandler+0x19a>
 800348c:	687a      	ldr	r2, [r7, #4]
 800348e:	69bb      	ldr	r3, [r7, #24]
 8003490:	212c      	movs	r1, #44	; 0x2c
 8003492:	fb01 f303 	mul.w	r3, r1, r3
 8003496:	4413      	add	r3, r2
 8003498:	3344      	adds	r3, #68	; 0x44
 800349a:	681b      	ldr	r3, [r3, #0]
 800349c:	2b00      	cmp	r3, #0
 800349e:	f000 809b 	beq.w	80035d8 <HCD_RXQLVL_IRQHandler+0x19a>
        if ((hhcd->hc[ch_num].xfer_count + pktcnt) <= hhcd->hc[ch_num].xfer_len)
 80034a2:	687a      	ldr	r2, [r7, #4]
 80034a4:	69bb      	ldr	r3, [r7, #24]
 80034a6:	212c      	movs	r1, #44	; 0x2c
 80034a8:	fb01 f303 	mul.w	r3, r1, r3
 80034ac:	4413      	add	r3, r2
 80034ae:	3350      	adds	r3, #80	; 0x50
 80034b0:	681a      	ldr	r2, [r3, #0]
 80034b2:	693b      	ldr	r3, [r7, #16]
 80034b4:	441a      	add	r2, r3
 80034b6:	6879      	ldr	r1, [r7, #4]
 80034b8:	69bb      	ldr	r3, [r7, #24]
 80034ba:	202c      	movs	r0, #44	; 0x2c
 80034bc:	fb00 f303 	mul.w	r3, r0, r3
 80034c0:	440b      	add	r3, r1
 80034c2:	334c      	adds	r3, #76	; 0x4c
 80034c4:	681b      	ldr	r3, [r3, #0]
 80034c6:	429a      	cmp	r2, r3
 80034c8:	d87a      	bhi.n	80035c0 <HCD_RXQLVL_IRQHandler+0x182>
          (void)USB_ReadPacket(hhcd->Instance,
 80034ca:	687b      	ldr	r3, [r7, #4]
 80034cc:	6818      	ldr	r0, [r3, #0]
 80034ce:	687a      	ldr	r2, [r7, #4]
 80034d0:	69bb      	ldr	r3, [r7, #24]
 80034d2:	212c      	movs	r1, #44	; 0x2c
 80034d4:	fb01 f303 	mul.w	r3, r1, r3
 80034d8:	4413      	add	r3, r2
 80034da:	3344      	adds	r3, #68	; 0x44
 80034dc:	681b      	ldr	r3, [r3, #0]
 80034de:	693a      	ldr	r2, [r7, #16]
 80034e0:	b292      	uxth	r2, r2
 80034e2:	4619      	mov	r1, r3
 80034e4:	f002 feee 	bl	80062c4 <USB_ReadPacket>
          hhcd->hc[ch_num].xfer_buff += pktcnt;
 80034e8:	687a      	ldr	r2, [r7, #4]
 80034ea:	69bb      	ldr	r3, [r7, #24]
 80034ec:	212c      	movs	r1, #44	; 0x2c
 80034ee:	fb01 f303 	mul.w	r3, r1, r3
 80034f2:	4413      	add	r3, r2
 80034f4:	3344      	adds	r3, #68	; 0x44
 80034f6:	681a      	ldr	r2, [r3, #0]
 80034f8:	693b      	ldr	r3, [r7, #16]
 80034fa:	441a      	add	r2, r3
 80034fc:	6879      	ldr	r1, [r7, #4]
 80034fe:	69bb      	ldr	r3, [r7, #24]
 8003500:	202c      	movs	r0, #44	; 0x2c
 8003502:	fb00 f303 	mul.w	r3, r0, r3
 8003506:	440b      	add	r3, r1
 8003508:	3344      	adds	r3, #68	; 0x44
 800350a:	601a      	str	r2, [r3, #0]
          hhcd->hc[ch_num].xfer_count += pktcnt;
 800350c:	687a      	ldr	r2, [r7, #4]
 800350e:	69bb      	ldr	r3, [r7, #24]
 8003510:	212c      	movs	r1, #44	; 0x2c
 8003512:	fb01 f303 	mul.w	r3, r1, r3
 8003516:	4413      	add	r3, r2
 8003518:	3350      	adds	r3, #80	; 0x50
 800351a:	681a      	ldr	r2, [r3, #0]
 800351c:	693b      	ldr	r3, [r7, #16]
 800351e:	441a      	add	r2, r3
 8003520:	6879      	ldr	r1, [r7, #4]
 8003522:	69bb      	ldr	r3, [r7, #24]
 8003524:	202c      	movs	r0, #44	; 0x2c
 8003526:	fb00 f303 	mul.w	r3, r0, r3
 800352a:	440b      	add	r3, r1
 800352c:	3350      	adds	r3, #80	; 0x50
 800352e:	601a      	str	r2, [r3, #0]
          xferSizePktCnt = (USBx_HC(ch_num)->HCTSIZ & USB_OTG_HCTSIZ_PKTCNT) >> 19;
 8003530:	69bb      	ldr	r3, [r7, #24]
 8003532:	015a      	lsls	r2, r3, #5
 8003534:	6a3b      	ldr	r3, [r7, #32]
 8003536:	4413      	add	r3, r2
 8003538:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800353c:	691b      	ldr	r3, [r3, #16]
 800353e:	0cdb      	lsrs	r3, r3, #19
 8003540:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8003544:	60fb      	str	r3, [r7, #12]
          if ((hhcd->hc[ch_num].max_packet == pktcnt) && (xferSizePktCnt > 0U))
 8003546:	687a      	ldr	r2, [r7, #4]
 8003548:	69bb      	ldr	r3, [r7, #24]
 800354a:	212c      	movs	r1, #44	; 0x2c
 800354c:	fb01 f303 	mul.w	r3, r1, r3
 8003550:	4413      	add	r3, r2
 8003552:	3340      	adds	r3, #64	; 0x40
 8003554:	881b      	ldrh	r3, [r3, #0]
 8003556:	461a      	mov	r2, r3
 8003558:	693b      	ldr	r3, [r7, #16]
 800355a:	4293      	cmp	r3, r2
 800355c:	d13c      	bne.n	80035d8 <HCD_RXQLVL_IRQHandler+0x19a>
 800355e:	68fb      	ldr	r3, [r7, #12]
 8003560:	2b00      	cmp	r3, #0
 8003562:	d039      	beq.n	80035d8 <HCD_RXQLVL_IRQHandler+0x19a>
            tmpreg = USBx_HC(ch_num)->HCCHAR;
 8003564:	69bb      	ldr	r3, [r7, #24]
 8003566:	015a      	lsls	r2, r3, #5
 8003568:	6a3b      	ldr	r3, [r7, #32]
 800356a:	4413      	add	r3, r2
 800356c:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8003570:	681b      	ldr	r3, [r3, #0]
 8003572:	60bb      	str	r3, [r7, #8]
            tmpreg &= ~USB_OTG_HCCHAR_CHDIS;
 8003574:	68bb      	ldr	r3, [r7, #8]
 8003576:	f023 4380 	bic.w	r3, r3, #1073741824	; 0x40000000
 800357a:	60bb      	str	r3, [r7, #8]
            tmpreg |= USB_OTG_HCCHAR_CHENA;
 800357c:	68bb      	ldr	r3, [r7, #8]
 800357e:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8003582:	60bb      	str	r3, [r7, #8]
            USBx_HC(ch_num)->HCCHAR = tmpreg;
 8003584:	69bb      	ldr	r3, [r7, #24]
 8003586:	015a      	lsls	r2, r3, #5
 8003588:	6a3b      	ldr	r3, [r7, #32]
 800358a:	4413      	add	r3, r2
 800358c:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8003590:	461a      	mov	r2, r3
 8003592:	68bb      	ldr	r3, [r7, #8]
 8003594:	6013      	str	r3, [r2, #0]
            hhcd->hc[ch_num].toggle_in ^= 1U;
 8003596:	687a      	ldr	r2, [r7, #4]
 8003598:	69bb      	ldr	r3, [r7, #24]
 800359a:	212c      	movs	r1, #44	; 0x2c
 800359c:	fb01 f303 	mul.w	r3, r1, r3
 80035a0:	4413      	add	r3, r2
 80035a2:	3354      	adds	r3, #84	; 0x54
 80035a4:	781b      	ldrb	r3, [r3, #0]
 80035a6:	f083 0301 	eor.w	r3, r3, #1
 80035aa:	b2d8      	uxtb	r0, r3
 80035ac:	687a      	ldr	r2, [r7, #4]
 80035ae:	69bb      	ldr	r3, [r7, #24]
 80035b0:	212c      	movs	r1, #44	; 0x2c
 80035b2:	fb01 f303 	mul.w	r3, r1, r3
 80035b6:	4413      	add	r3, r2
 80035b8:	3354      	adds	r3, #84	; 0x54
 80035ba:	4602      	mov	r2, r0
 80035bc:	701a      	strb	r2, [r3, #0]
      break;
 80035be:	e00b      	b.n	80035d8 <HCD_RXQLVL_IRQHandler+0x19a>
          hhcd->hc[ch_num].urb_state = URB_ERROR;
 80035c0:	687a      	ldr	r2, [r7, #4]
 80035c2:	69bb      	ldr	r3, [r7, #24]
 80035c4:	212c      	movs	r1, #44	; 0x2c
 80035c6:	fb01 f303 	mul.w	r3, r1, r3
 80035ca:	4413      	add	r3, r2
 80035cc:	3360      	adds	r3, #96	; 0x60
 80035ce:	2204      	movs	r2, #4
 80035d0:	701a      	strb	r2, [r3, #0]
      break;
 80035d2:	e001      	b.n	80035d8 <HCD_RXQLVL_IRQHandler+0x19a>
      break;
 80035d4:	bf00      	nop
 80035d6:	e000      	b.n	80035da <HCD_RXQLVL_IRQHandler+0x19c>
      break;
 80035d8:	bf00      	nop
  }
}
 80035da:	bf00      	nop
 80035dc:	3728      	adds	r7, #40	; 0x28
 80035de:	46bd      	mov	sp, r7
 80035e0:	bd80      	pop	{r7, pc}

080035e2 <HCD_Port_IRQHandler>:
  * @brief  Handle Host Port interrupt requests.
  * @param  hhcd HCD handle
  * @retval None
  */
static void HCD_Port_IRQHandler(HCD_HandleTypeDef *hhcd)
{
 80035e2:	b580      	push	{r7, lr}
 80035e4:	b086      	sub	sp, #24
 80035e6:	af00      	add	r7, sp, #0
 80035e8:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx = hhcd->Instance;
 80035ea:	687b      	ldr	r3, [r7, #4]
 80035ec:	681b      	ldr	r3, [r3, #0]
 80035ee:	617b      	str	r3, [r7, #20]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80035f0:	697b      	ldr	r3, [r7, #20]
 80035f2:	613b      	str	r3, [r7, #16]
  __IO uint32_t hprt0;
  __IO uint32_t hprt0_dup;

  /* Handle Host Port Interrupts */
  hprt0 = USBx_HPRT0;
 80035f4:	693b      	ldr	r3, [r7, #16]
 80035f6:	f503 6388 	add.w	r3, r3, #1088	; 0x440
 80035fa:	681b      	ldr	r3, [r3, #0]
 80035fc:	60fb      	str	r3, [r7, #12]
  hprt0_dup = USBx_HPRT0;
 80035fe:	693b      	ldr	r3, [r7, #16]
 8003600:	f503 6388 	add.w	r3, r3, #1088	; 0x440
 8003604:	681b      	ldr	r3, [r3, #0]
 8003606:	60bb      	str	r3, [r7, #8]

  hprt0_dup &= ~(USB_OTG_HPRT_PENA | USB_OTG_HPRT_PCDET | \
 8003608:	68bb      	ldr	r3, [r7, #8]
 800360a:	f023 032e 	bic.w	r3, r3, #46	; 0x2e
 800360e:	60bb      	str	r3, [r7, #8]
                 USB_OTG_HPRT_PENCHNG | USB_OTG_HPRT_POCCHNG);

  /* Check whether Port Connect detected */
  if ((hprt0 & USB_OTG_HPRT_PCDET) == USB_OTG_HPRT_PCDET)
 8003610:	68fb      	ldr	r3, [r7, #12]
 8003612:	f003 0302 	and.w	r3, r3, #2
 8003616:	2b02      	cmp	r3, #2
 8003618:	d10b      	bne.n	8003632 <HCD_Port_IRQHandler+0x50>
  {
    if ((hprt0 & USB_OTG_HPRT_PCSTS) == USB_OTG_HPRT_PCSTS)
 800361a:	68fb      	ldr	r3, [r7, #12]
 800361c:	f003 0301 	and.w	r3, r3, #1
 8003620:	2b01      	cmp	r3, #1
 8003622:	d102      	bne.n	800362a <HCD_Port_IRQHandler+0x48>
    {
#if (USE_HAL_HCD_REGISTER_CALLBACKS == 1U)
      hhcd->ConnectCallback(hhcd);
#else
      HAL_HCD_Connect_Callback(hhcd);
 8003624:	6878      	ldr	r0, [r7, #4]
 8003626:	f006 f87b 	bl	8009720 <HAL_HCD_Connect_Callback>
#endif /* USE_HAL_HCD_REGISTER_CALLBACKS */
    }
    hprt0_dup |= USB_OTG_HPRT_PCDET;
 800362a:	68bb      	ldr	r3, [r7, #8]
 800362c:	f043 0302 	orr.w	r3, r3, #2
 8003630:	60bb      	str	r3, [r7, #8]
  }

  /* Check whether Port Enable Changed */
  if ((hprt0 & USB_OTG_HPRT_PENCHNG) == USB_OTG_HPRT_PENCHNG)
 8003632:	68fb      	ldr	r3, [r7, #12]
 8003634:	f003 0308 	and.w	r3, r3, #8
 8003638:	2b08      	cmp	r3, #8
 800363a:	d132      	bne.n	80036a2 <HCD_Port_IRQHandler+0xc0>
  {
    hprt0_dup |= USB_OTG_HPRT_PENCHNG;
 800363c:	68bb      	ldr	r3, [r7, #8]
 800363e:	f043 0308 	orr.w	r3, r3, #8
 8003642:	60bb      	str	r3, [r7, #8]

    if ((hprt0 & USB_OTG_HPRT_PENA) == USB_OTG_HPRT_PENA)
 8003644:	68fb      	ldr	r3, [r7, #12]
 8003646:	f003 0304 	and.w	r3, r3, #4
 800364a:	2b04      	cmp	r3, #4
 800364c:	d126      	bne.n	800369c <HCD_Port_IRQHandler+0xba>
    {
      if (hhcd->Init.phy_itface  == USB_OTG_EMBEDDED_PHY)
 800364e:	687b      	ldr	r3, [r7, #4]
 8003650:	699b      	ldr	r3, [r3, #24]
 8003652:	2b02      	cmp	r3, #2
 8003654:	d113      	bne.n	800367e <HCD_Port_IRQHandler+0x9c>
      {
        if ((hprt0 & USB_OTG_HPRT_PSPD) == (HPRT0_PRTSPD_LOW_SPEED << 17))
 8003656:	68fb      	ldr	r3, [r7, #12]
 8003658:	f403 23c0 	and.w	r3, r3, #393216	; 0x60000
 800365c:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 8003660:	d106      	bne.n	8003670 <HCD_Port_IRQHandler+0x8e>
        {
          (void)USB_InitFSLSPClkSel(hhcd->Instance, HCFG_6_MHZ);
 8003662:	687b      	ldr	r3, [r7, #4]
 8003664:	681b      	ldr	r3, [r3, #0]
 8003666:	2102      	movs	r1, #2
 8003668:	4618      	mov	r0, r3
 800366a:	f002 fea4 	bl	80063b6 <USB_InitFSLSPClkSel>
 800366e:	e011      	b.n	8003694 <HCD_Port_IRQHandler+0xb2>
        }
        else
        {
          (void)USB_InitFSLSPClkSel(hhcd->Instance, HCFG_48_MHZ);
 8003670:	687b      	ldr	r3, [r7, #4]
 8003672:	681b      	ldr	r3, [r3, #0]
 8003674:	2101      	movs	r1, #1
 8003676:	4618      	mov	r0, r3
 8003678:	f002 fe9d 	bl	80063b6 <USB_InitFSLSPClkSel>
 800367c:	e00a      	b.n	8003694 <HCD_Port_IRQHandler+0xb2>
        }
      }
      else
      {
        if (hhcd->Init.speed == HCD_SPEED_FULL)
 800367e:	687b      	ldr	r3, [r7, #4]
 8003680:	68db      	ldr	r3, [r3, #12]
 8003682:	2b01      	cmp	r3, #1
 8003684:	d106      	bne.n	8003694 <HCD_Port_IRQHandler+0xb2>
        {
          USBx_HOST->HFIR = 60000U;
 8003686:	693b      	ldr	r3, [r7, #16]
 8003688:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 800368c:	461a      	mov	r2, r3
 800368e:	f64e 2360 	movw	r3, #60000	; 0xea60
 8003692:	6053      	str	r3, [r2, #4]
        }
      }
#if (USE_HAL_HCD_REGISTER_CALLBACKS == 1U)
      hhcd->PortEnabledCallback(hhcd);
#else
      HAL_HCD_PortEnabled_Callback(hhcd);
 8003694:	6878      	ldr	r0, [r7, #4]
 8003696:	f006 f871 	bl	800977c <HAL_HCD_PortEnabled_Callback>
 800369a:	e002      	b.n	80036a2 <HCD_Port_IRQHandler+0xc0>
    else
    {
#if (USE_HAL_HCD_REGISTER_CALLBACKS == 1U)
      hhcd->PortDisabledCallback(hhcd);
#else
      HAL_HCD_PortDisabled_Callback(hhcd);
 800369c:	6878      	ldr	r0, [r7, #4]
 800369e:	f006 f87b 	bl	8009798 <HAL_HCD_PortDisabled_Callback>
#endif /* USE_HAL_HCD_REGISTER_CALLBACKS */
    }
  }

  /* Check for an overcurrent */
  if ((hprt0 & USB_OTG_HPRT_POCCHNG) == USB_OTG_HPRT_POCCHNG)
 80036a2:	68fb      	ldr	r3, [r7, #12]
 80036a4:	f003 0320 	and.w	r3, r3, #32
 80036a8:	2b20      	cmp	r3, #32
 80036aa:	d103      	bne.n	80036b4 <HCD_Port_IRQHandler+0xd2>
  {
    hprt0_dup |= USB_OTG_HPRT_POCCHNG;
 80036ac:	68bb      	ldr	r3, [r7, #8]
 80036ae:	f043 0320 	orr.w	r3, r3, #32
 80036b2:	60bb      	str	r3, [r7, #8]
  }

  /* Clear Port Interrupts */
  USBx_HPRT0 = hprt0_dup;
 80036b4:	693b      	ldr	r3, [r7, #16]
 80036b6:	f503 6388 	add.w	r3, r3, #1088	; 0x440
 80036ba:	461a      	mov	r2, r3
 80036bc:	68bb      	ldr	r3, [r7, #8]
 80036be:	6013      	str	r3, [r2, #0]
}
 80036c0:	bf00      	nop
 80036c2:	3718      	adds	r7, #24
 80036c4:	46bd      	mov	sp, r7
 80036c6:	bd80      	pop	{r7, pc}

080036c8 <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 80036c8:	b580      	push	{r7, lr}
 80036ca:	b084      	sub	sp, #16
 80036cc:	af00      	add	r7, sp, #0
 80036ce:	6078      	str	r0, [r7, #4]
  uint32_t freqrange;
  uint32_t pclk1;

  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 80036d0:	687b      	ldr	r3, [r7, #4]
 80036d2:	2b00      	cmp	r3, #0
 80036d4:	d101      	bne.n	80036da <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 80036d6:	2301      	movs	r3, #1
 80036d8:	e12b      	b.n	8003932 <HAL_I2C_Init+0x26a>
  assert_param(IS_I2C_DUAL_ADDRESS(hi2c->Init.DualAddressMode));
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 80036da:	687b      	ldr	r3, [r7, #4]
 80036dc:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80036e0:	b2db      	uxtb	r3, r3
 80036e2:	2b00      	cmp	r3, #0
 80036e4:	d106      	bne.n	80036f4 <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 80036e6:	687b      	ldr	r3, [r7, #4]
 80036e8:	2200      	movs	r2, #0
 80036ea:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_I2C_MspInit(hi2c);
 80036ee:	6878      	ldr	r0, [r7, #4]
 80036f0:	f7fd fbae 	bl	8000e50 <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 80036f4:	687b      	ldr	r3, [r7, #4]
 80036f6:	2224      	movs	r2, #36	; 0x24
 80036f8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 80036fc:	687b      	ldr	r3, [r7, #4]
 80036fe:	681b      	ldr	r3, [r3, #0]
 8003700:	681a      	ldr	r2, [r3, #0]
 8003702:	687b      	ldr	r3, [r7, #4]
 8003704:	681b      	ldr	r3, [r3, #0]
 8003706:	f022 0201 	bic.w	r2, r2, #1
 800370a:	601a      	str	r2, [r3, #0]

  /*Reset I2C*/
  hi2c->Instance->CR1 |= I2C_CR1_SWRST;
 800370c:	687b      	ldr	r3, [r7, #4]
 800370e:	681b      	ldr	r3, [r3, #0]
 8003710:	681a      	ldr	r2, [r3, #0]
 8003712:	687b      	ldr	r3, [r7, #4]
 8003714:	681b      	ldr	r3, [r3, #0]
 8003716:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 800371a:	601a      	str	r2, [r3, #0]
  hi2c->Instance->CR1 &= ~I2C_CR1_SWRST;
 800371c:	687b      	ldr	r3, [r7, #4]
 800371e:	681b      	ldr	r3, [r3, #0]
 8003720:	681a      	ldr	r2, [r3, #0]
 8003722:	687b      	ldr	r3, [r7, #4]
 8003724:	681b      	ldr	r3, [r3, #0]
 8003726:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 800372a:	601a      	str	r2, [r3, #0]

  /* Get PCLK1 frequency */
  pclk1 = HAL_RCC_GetPCLK1Freq();
 800372c:	f001 f964 	bl	80049f8 <HAL_RCC_GetPCLK1Freq>
 8003730:	60f8      	str	r0, [r7, #12]

  /* Check the minimum allowed PCLK1 frequency */
  if (I2C_MIN_PCLK_FREQ(pclk1, hi2c->Init.ClockSpeed) == 1U)
 8003732:	687b      	ldr	r3, [r7, #4]
 8003734:	685b      	ldr	r3, [r3, #4]
 8003736:	4a81      	ldr	r2, [pc, #516]	; (800393c <HAL_I2C_Init+0x274>)
 8003738:	4293      	cmp	r3, r2
 800373a:	d807      	bhi.n	800374c <HAL_I2C_Init+0x84>
 800373c:	68fb      	ldr	r3, [r7, #12]
 800373e:	4a80      	ldr	r2, [pc, #512]	; (8003940 <HAL_I2C_Init+0x278>)
 8003740:	4293      	cmp	r3, r2
 8003742:	bf94      	ite	ls
 8003744:	2301      	movls	r3, #1
 8003746:	2300      	movhi	r3, #0
 8003748:	b2db      	uxtb	r3, r3
 800374a:	e006      	b.n	800375a <HAL_I2C_Init+0x92>
 800374c:	68fb      	ldr	r3, [r7, #12]
 800374e:	4a7d      	ldr	r2, [pc, #500]	; (8003944 <HAL_I2C_Init+0x27c>)
 8003750:	4293      	cmp	r3, r2
 8003752:	bf94      	ite	ls
 8003754:	2301      	movls	r3, #1
 8003756:	2300      	movhi	r3, #0
 8003758:	b2db      	uxtb	r3, r3
 800375a:	2b00      	cmp	r3, #0
 800375c:	d001      	beq.n	8003762 <HAL_I2C_Init+0x9a>
  {
    return HAL_ERROR;
 800375e:	2301      	movs	r3, #1
 8003760:	e0e7      	b.n	8003932 <HAL_I2C_Init+0x26a>
  }

  /* Calculate frequency range */
  freqrange = I2C_FREQRANGE(pclk1);
 8003762:	68fb      	ldr	r3, [r7, #12]
 8003764:	4a78      	ldr	r2, [pc, #480]	; (8003948 <HAL_I2C_Init+0x280>)
 8003766:	fba2 2303 	umull	r2, r3, r2, r3
 800376a:	0c9b      	lsrs	r3, r3, #18
 800376c:	60bb      	str	r3, [r7, #8]

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Frequency range */
  MODIFY_REG(hi2c->Instance->CR2, I2C_CR2_FREQ, freqrange);
 800376e:	687b      	ldr	r3, [r7, #4]
 8003770:	681b      	ldr	r3, [r3, #0]
 8003772:	685b      	ldr	r3, [r3, #4]
 8003774:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 8003778:	687b      	ldr	r3, [r7, #4]
 800377a:	681b      	ldr	r3, [r3, #0]
 800377c:	68ba      	ldr	r2, [r7, #8]
 800377e:	430a      	orrs	r2, r1
 8003780:	605a      	str	r2, [r3, #4]

  /*---------------------------- I2Cx TRISE Configuration --------------------*/
  /* Configure I2Cx: Rise Time */
  MODIFY_REG(hi2c->Instance->TRISE, I2C_TRISE_TRISE, I2C_RISE_TIME(freqrange, hi2c->Init.ClockSpeed));
 8003782:	687b      	ldr	r3, [r7, #4]
 8003784:	681b      	ldr	r3, [r3, #0]
 8003786:	6a1b      	ldr	r3, [r3, #32]
 8003788:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 800378c:	687b      	ldr	r3, [r7, #4]
 800378e:	685b      	ldr	r3, [r3, #4]
 8003790:	4a6a      	ldr	r2, [pc, #424]	; (800393c <HAL_I2C_Init+0x274>)
 8003792:	4293      	cmp	r3, r2
 8003794:	d802      	bhi.n	800379c <HAL_I2C_Init+0xd4>
 8003796:	68bb      	ldr	r3, [r7, #8]
 8003798:	3301      	adds	r3, #1
 800379a:	e009      	b.n	80037b0 <HAL_I2C_Init+0xe8>
 800379c:	68bb      	ldr	r3, [r7, #8]
 800379e:	f44f 7296 	mov.w	r2, #300	; 0x12c
 80037a2:	fb02 f303 	mul.w	r3, r2, r3
 80037a6:	4a69      	ldr	r2, [pc, #420]	; (800394c <HAL_I2C_Init+0x284>)
 80037a8:	fba2 2303 	umull	r2, r3, r2, r3
 80037ac:	099b      	lsrs	r3, r3, #6
 80037ae:	3301      	adds	r3, #1
 80037b0:	687a      	ldr	r2, [r7, #4]
 80037b2:	6812      	ldr	r2, [r2, #0]
 80037b4:	430b      	orrs	r3, r1
 80037b6:	6213      	str	r3, [r2, #32]

  /*---------------------------- I2Cx CCR Configuration ----------------------*/
  /* Configure I2Cx: Speed */
  MODIFY_REG(hi2c->Instance->CCR, (I2C_CCR_FS | I2C_CCR_DUTY | I2C_CCR_CCR), I2C_SPEED(pclk1, hi2c->Init.ClockSpeed, hi2c->Init.DutyCycle));
 80037b8:	687b      	ldr	r3, [r7, #4]
 80037ba:	681b      	ldr	r3, [r3, #0]
 80037bc:	69db      	ldr	r3, [r3, #28]
 80037be:	f423 424f 	bic.w	r2, r3, #52992	; 0xcf00
 80037c2:	f022 02ff 	bic.w	r2, r2, #255	; 0xff
 80037c6:	687b      	ldr	r3, [r7, #4]
 80037c8:	685b      	ldr	r3, [r3, #4]
 80037ca:	495c      	ldr	r1, [pc, #368]	; (800393c <HAL_I2C_Init+0x274>)
 80037cc:	428b      	cmp	r3, r1
 80037ce:	d819      	bhi.n	8003804 <HAL_I2C_Init+0x13c>
 80037d0:	68fb      	ldr	r3, [r7, #12]
 80037d2:	1e59      	subs	r1, r3, #1
 80037d4:	687b      	ldr	r3, [r7, #4]
 80037d6:	685b      	ldr	r3, [r3, #4]
 80037d8:	005b      	lsls	r3, r3, #1
 80037da:	fbb1 f3f3 	udiv	r3, r1, r3
 80037de:	1c59      	adds	r1, r3, #1
 80037e0:	f640 73fc 	movw	r3, #4092	; 0xffc
 80037e4:	400b      	ands	r3, r1
 80037e6:	2b00      	cmp	r3, #0
 80037e8:	d00a      	beq.n	8003800 <HAL_I2C_Init+0x138>
 80037ea:	68fb      	ldr	r3, [r7, #12]
 80037ec:	1e59      	subs	r1, r3, #1
 80037ee:	687b      	ldr	r3, [r7, #4]
 80037f0:	685b      	ldr	r3, [r3, #4]
 80037f2:	005b      	lsls	r3, r3, #1
 80037f4:	fbb1 f3f3 	udiv	r3, r1, r3
 80037f8:	3301      	adds	r3, #1
 80037fa:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80037fe:	e051      	b.n	80038a4 <HAL_I2C_Init+0x1dc>
 8003800:	2304      	movs	r3, #4
 8003802:	e04f      	b.n	80038a4 <HAL_I2C_Init+0x1dc>
 8003804:	687b      	ldr	r3, [r7, #4]
 8003806:	689b      	ldr	r3, [r3, #8]
 8003808:	2b00      	cmp	r3, #0
 800380a:	d111      	bne.n	8003830 <HAL_I2C_Init+0x168>
 800380c:	68fb      	ldr	r3, [r7, #12]
 800380e:	1e58      	subs	r0, r3, #1
 8003810:	687b      	ldr	r3, [r7, #4]
 8003812:	6859      	ldr	r1, [r3, #4]
 8003814:	460b      	mov	r3, r1
 8003816:	005b      	lsls	r3, r3, #1
 8003818:	440b      	add	r3, r1
 800381a:	fbb0 f3f3 	udiv	r3, r0, r3
 800381e:	3301      	adds	r3, #1
 8003820:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8003824:	2b00      	cmp	r3, #0
 8003826:	bf0c      	ite	eq
 8003828:	2301      	moveq	r3, #1
 800382a:	2300      	movne	r3, #0
 800382c:	b2db      	uxtb	r3, r3
 800382e:	e012      	b.n	8003856 <HAL_I2C_Init+0x18e>
 8003830:	68fb      	ldr	r3, [r7, #12]
 8003832:	1e58      	subs	r0, r3, #1
 8003834:	687b      	ldr	r3, [r7, #4]
 8003836:	6859      	ldr	r1, [r3, #4]
 8003838:	460b      	mov	r3, r1
 800383a:	009b      	lsls	r3, r3, #2
 800383c:	440b      	add	r3, r1
 800383e:	0099      	lsls	r1, r3, #2
 8003840:	440b      	add	r3, r1
 8003842:	fbb0 f3f3 	udiv	r3, r0, r3
 8003846:	3301      	adds	r3, #1
 8003848:	f3c3 030b 	ubfx	r3, r3, #0, #12
 800384c:	2b00      	cmp	r3, #0
 800384e:	bf0c      	ite	eq
 8003850:	2301      	moveq	r3, #1
 8003852:	2300      	movne	r3, #0
 8003854:	b2db      	uxtb	r3, r3
 8003856:	2b00      	cmp	r3, #0
 8003858:	d001      	beq.n	800385e <HAL_I2C_Init+0x196>
 800385a:	2301      	movs	r3, #1
 800385c:	e022      	b.n	80038a4 <HAL_I2C_Init+0x1dc>
 800385e:	687b      	ldr	r3, [r7, #4]
 8003860:	689b      	ldr	r3, [r3, #8]
 8003862:	2b00      	cmp	r3, #0
 8003864:	d10e      	bne.n	8003884 <HAL_I2C_Init+0x1bc>
 8003866:	68fb      	ldr	r3, [r7, #12]
 8003868:	1e58      	subs	r0, r3, #1
 800386a:	687b      	ldr	r3, [r7, #4]
 800386c:	6859      	ldr	r1, [r3, #4]
 800386e:	460b      	mov	r3, r1
 8003870:	005b      	lsls	r3, r3, #1
 8003872:	440b      	add	r3, r1
 8003874:	fbb0 f3f3 	udiv	r3, r0, r3
 8003878:	3301      	adds	r3, #1
 800387a:	f3c3 030b 	ubfx	r3, r3, #0, #12
 800387e:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8003882:	e00f      	b.n	80038a4 <HAL_I2C_Init+0x1dc>
 8003884:	68fb      	ldr	r3, [r7, #12]
 8003886:	1e58      	subs	r0, r3, #1
 8003888:	687b      	ldr	r3, [r7, #4]
 800388a:	6859      	ldr	r1, [r3, #4]
 800388c:	460b      	mov	r3, r1
 800388e:	009b      	lsls	r3, r3, #2
 8003890:	440b      	add	r3, r1
 8003892:	0099      	lsls	r1, r3, #2
 8003894:	440b      	add	r3, r1
 8003896:	fbb0 f3f3 	udiv	r3, r0, r3
 800389a:	3301      	adds	r3, #1
 800389c:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80038a0:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 80038a4:	6879      	ldr	r1, [r7, #4]
 80038a6:	6809      	ldr	r1, [r1, #0]
 80038a8:	4313      	orrs	r3, r2
 80038aa:	61cb      	str	r3, [r1, #28]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  MODIFY_REG(hi2c->Instance->CR1, (I2C_CR1_ENGC | I2C_CR1_NOSTRETCH), (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode));
 80038ac:	687b      	ldr	r3, [r7, #4]
 80038ae:	681b      	ldr	r3, [r3, #0]
 80038b0:	681b      	ldr	r3, [r3, #0]
 80038b2:	f023 01c0 	bic.w	r1, r3, #192	; 0xc0
 80038b6:	687b      	ldr	r3, [r7, #4]
 80038b8:	69da      	ldr	r2, [r3, #28]
 80038ba:	687b      	ldr	r3, [r7, #4]
 80038bc:	6a1b      	ldr	r3, [r3, #32]
 80038be:	431a      	orrs	r2, r3
 80038c0:	687b      	ldr	r3, [r7, #4]
 80038c2:	681b      	ldr	r3, [r3, #0]
 80038c4:	430a      	orrs	r2, r1
 80038c6:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Configure I2Cx: Own Address1 and addressing mode */
  MODIFY_REG(hi2c->Instance->OAR1, (I2C_OAR1_ADDMODE | I2C_OAR1_ADD8_9 | I2C_OAR1_ADD1_7 | I2C_OAR1_ADD0), (hi2c->Init.AddressingMode | hi2c->Init.OwnAddress1));
 80038c8:	687b      	ldr	r3, [r7, #4]
 80038ca:	681b      	ldr	r3, [r3, #0]
 80038cc:	689b      	ldr	r3, [r3, #8]
 80038ce:	f423 4303 	bic.w	r3, r3, #33536	; 0x8300
 80038d2:	f023 03ff 	bic.w	r3, r3, #255	; 0xff
 80038d6:	687a      	ldr	r2, [r7, #4]
 80038d8:	6911      	ldr	r1, [r2, #16]
 80038da:	687a      	ldr	r2, [r7, #4]
 80038dc:	68d2      	ldr	r2, [r2, #12]
 80038de:	4311      	orrs	r1, r2
 80038e0:	687a      	ldr	r2, [r7, #4]
 80038e2:	6812      	ldr	r2, [r2, #0]
 80038e4:	430b      	orrs	r3, r1
 80038e6:	6093      	str	r3, [r2, #8]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Configure I2Cx: Dual mode and Own Address2 */
  MODIFY_REG(hi2c->Instance->OAR2, (I2C_OAR2_ENDUAL | I2C_OAR2_ADD2), (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2));
 80038e8:	687b      	ldr	r3, [r7, #4]
 80038ea:	681b      	ldr	r3, [r3, #0]
 80038ec:	68db      	ldr	r3, [r3, #12]
 80038ee:	f023 01ff 	bic.w	r1, r3, #255	; 0xff
 80038f2:	687b      	ldr	r3, [r7, #4]
 80038f4:	695a      	ldr	r2, [r3, #20]
 80038f6:	687b      	ldr	r3, [r7, #4]
 80038f8:	699b      	ldr	r3, [r3, #24]
 80038fa:	431a      	orrs	r2, r3
 80038fc:	687b      	ldr	r3, [r7, #4]
 80038fe:	681b      	ldr	r3, [r3, #0]
 8003900:	430a      	orrs	r2, r1
 8003902:	60da      	str	r2, [r3, #12]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 8003904:	687b      	ldr	r3, [r7, #4]
 8003906:	681b      	ldr	r3, [r3, #0]
 8003908:	681a      	ldr	r2, [r3, #0]
 800390a:	687b      	ldr	r3, [r7, #4]
 800390c:	681b      	ldr	r3, [r3, #0]
 800390e:	f042 0201 	orr.w	r2, r2, #1
 8003912:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8003914:	687b      	ldr	r3, [r7, #4]
 8003916:	2200      	movs	r2, #0
 8003918:	641a      	str	r2, [r3, #64]	; 0x40
  hi2c->State = HAL_I2C_STATE_READY;
 800391a:	687b      	ldr	r3, [r7, #4]
 800391c:	2220      	movs	r2, #32
 800391e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  hi2c->PreviousState = I2C_STATE_NONE;
 8003922:	687b      	ldr	r3, [r7, #4]
 8003924:	2200      	movs	r2, #0
 8003926:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8003928:	687b      	ldr	r3, [r7, #4]
 800392a:	2200      	movs	r2, #0
 800392c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 8003930:	2300      	movs	r3, #0
}
 8003932:	4618      	mov	r0, r3
 8003934:	3710      	adds	r7, #16
 8003936:	46bd      	mov	sp, r7
 8003938:	bd80      	pop	{r7, pc}
 800393a:	bf00      	nop
 800393c:	000186a0 	.word	0x000186a0
 8003940:	001e847f 	.word	0x001e847f
 8003944:	003d08ff 	.word	0x003d08ff
 8003948:	431bde83 	.word	0x431bde83
 800394c:	10624dd3 	.word	0x10624dd3

08003950 <HAL_I2CEx_ConfigAnalogFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  AnalogFilter new state of the Analog filter.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigAnalogFilter(I2C_HandleTypeDef *hi2c, uint32_t AnalogFilter)
{
 8003950:	b480      	push	{r7}
 8003952:	b083      	sub	sp, #12
 8003954:	af00      	add	r7, sp, #0
 8003956:	6078      	str	r0, [r7, #4]
 8003958:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_ANALOG_FILTER(AnalogFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 800395a:	687b      	ldr	r3, [r7, #4]
 800395c:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8003960:	b2db      	uxtb	r3, r3
 8003962:	2b20      	cmp	r3, #32
 8003964:	d129      	bne.n	80039ba <HAL_I2CEx_ConfigAnalogFilter+0x6a>
  {
    hi2c->State = HAL_I2C_STATE_BUSY;
 8003966:	687b      	ldr	r3, [r7, #4]
 8003968:	2224      	movs	r2, #36	; 0x24
 800396a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 800396e:	687b      	ldr	r3, [r7, #4]
 8003970:	681b      	ldr	r3, [r3, #0]
 8003972:	681a      	ldr	r2, [r3, #0]
 8003974:	687b      	ldr	r3, [r7, #4]
 8003976:	681b      	ldr	r3, [r3, #0]
 8003978:	f022 0201 	bic.w	r2, r2, #1
 800397c:	601a      	str	r2, [r3, #0]

    /* Reset I2Cx ANOFF bit */
    hi2c->Instance->FLTR &= ~(I2C_FLTR_ANOFF);
 800397e:	687b      	ldr	r3, [r7, #4]
 8003980:	681b      	ldr	r3, [r3, #0]
 8003982:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8003984:	687b      	ldr	r3, [r7, #4]
 8003986:	681b      	ldr	r3, [r3, #0]
 8003988:	f022 0210 	bic.w	r2, r2, #16
 800398c:	625a      	str	r2, [r3, #36]	; 0x24

    /* Disable the analog filter */
    hi2c->Instance->FLTR |= AnalogFilter;
 800398e:	687b      	ldr	r3, [r7, #4]
 8003990:	681b      	ldr	r3, [r3, #0]
 8003992:	6a59      	ldr	r1, [r3, #36]	; 0x24
 8003994:	687b      	ldr	r3, [r7, #4]
 8003996:	681b      	ldr	r3, [r3, #0]
 8003998:	683a      	ldr	r2, [r7, #0]
 800399a:	430a      	orrs	r2, r1
 800399c:	625a      	str	r2, [r3, #36]	; 0x24

    __HAL_I2C_ENABLE(hi2c);
 800399e:	687b      	ldr	r3, [r7, #4]
 80039a0:	681b      	ldr	r3, [r3, #0]
 80039a2:	681a      	ldr	r2, [r3, #0]
 80039a4:	687b      	ldr	r3, [r7, #4]
 80039a6:	681b      	ldr	r3, [r3, #0]
 80039a8:	f042 0201 	orr.w	r2, r2, #1
 80039ac:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 80039ae:	687b      	ldr	r3, [r7, #4]
 80039b0:	2220      	movs	r2, #32
 80039b2:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    return HAL_OK;
 80039b6:	2300      	movs	r3, #0
 80039b8:	e000      	b.n	80039bc <HAL_I2CEx_ConfigAnalogFilter+0x6c>
  }
  else
  {
    return HAL_BUSY;
 80039ba:	2302      	movs	r3, #2
  }
}
 80039bc:	4618      	mov	r0, r3
 80039be:	370c      	adds	r7, #12
 80039c0:	46bd      	mov	sp, r7
 80039c2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80039c6:	4770      	bx	lr

080039c8 <HAL_I2CEx_ConfigDigitalFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  DigitalFilter Coefficient of digital noise filter between 0x00 and 0x0F.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigDigitalFilter(I2C_HandleTypeDef *hi2c, uint32_t DigitalFilter)
{
 80039c8:	b480      	push	{r7}
 80039ca:	b085      	sub	sp, #20
 80039cc:	af00      	add	r7, sp, #0
 80039ce:	6078      	str	r0, [r7, #4]
 80039d0:	6039      	str	r1, [r7, #0]
  uint16_t tmpreg = 0;
 80039d2:	2300      	movs	r3, #0
 80039d4:	81fb      	strh	r3, [r7, #14]

  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_DIGITAL_FILTER(DigitalFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 80039d6:	687b      	ldr	r3, [r7, #4]
 80039d8:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80039dc:	b2db      	uxtb	r3, r3
 80039de:	2b20      	cmp	r3, #32
 80039e0:	d12a      	bne.n	8003a38 <HAL_I2CEx_ConfigDigitalFilter+0x70>
  {
    hi2c->State = HAL_I2C_STATE_BUSY;
 80039e2:	687b      	ldr	r3, [r7, #4]
 80039e4:	2224      	movs	r2, #36	; 0x24
 80039e6:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 80039ea:	687b      	ldr	r3, [r7, #4]
 80039ec:	681b      	ldr	r3, [r3, #0]
 80039ee:	681a      	ldr	r2, [r3, #0]
 80039f0:	687b      	ldr	r3, [r7, #4]
 80039f2:	681b      	ldr	r3, [r3, #0]
 80039f4:	f022 0201 	bic.w	r2, r2, #1
 80039f8:	601a      	str	r2, [r3, #0]

    /* Get the old register value */
    tmpreg = hi2c->Instance->FLTR;
 80039fa:	687b      	ldr	r3, [r7, #4]
 80039fc:	681b      	ldr	r3, [r3, #0]
 80039fe:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003a00:	81fb      	strh	r3, [r7, #14]

    /* Reset I2Cx DNF bit [3:0] */
    tmpreg &= ~(I2C_FLTR_DNF);
 8003a02:	89fb      	ldrh	r3, [r7, #14]
 8003a04:	f023 030f 	bic.w	r3, r3, #15
 8003a08:	81fb      	strh	r3, [r7, #14]

    /* Set I2Cx DNF coefficient */
    tmpreg |= DigitalFilter;
 8003a0a:	683b      	ldr	r3, [r7, #0]
 8003a0c:	b29a      	uxth	r2, r3
 8003a0e:	89fb      	ldrh	r3, [r7, #14]
 8003a10:	4313      	orrs	r3, r2
 8003a12:	81fb      	strh	r3, [r7, #14]

    /* Store the new register value */
    hi2c->Instance->FLTR = tmpreg;
 8003a14:	687b      	ldr	r3, [r7, #4]
 8003a16:	681b      	ldr	r3, [r3, #0]
 8003a18:	89fa      	ldrh	r2, [r7, #14]
 8003a1a:	625a      	str	r2, [r3, #36]	; 0x24

    __HAL_I2C_ENABLE(hi2c);
 8003a1c:	687b      	ldr	r3, [r7, #4]
 8003a1e:	681b      	ldr	r3, [r3, #0]
 8003a20:	681a      	ldr	r2, [r3, #0]
 8003a22:	687b      	ldr	r3, [r7, #4]
 8003a24:	681b      	ldr	r3, [r3, #0]
 8003a26:	f042 0201 	orr.w	r2, r2, #1
 8003a2a:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8003a2c:	687b      	ldr	r3, [r7, #4]
 8003a2e:	2220      	movs	r2, #32
 8003a30:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    return HAL_OK;
 8003a34:	2300      	movs	r3, #0
 8003a36:	e000      	b.n	8003a3a <HAL_I2CEx_ConfigDigitalFilter+0x72>
  }
  else
  {
    return HAL_BUSY;
 8003a38:	2302      	movs	r3, #2
  }
}
 8003a3a:	4618      	mov	r0, r3
 8003a3c:	3714      	adds	r7, #20
 8003a3e:	46bd      	mov	sp, r7
 8003a40:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003a44:	4770      	bx	lr
	...

08003a48 <HAL_LTDC_Init>:
  * @param  hltdc  pointer to a LTDC_HandleTypeDef structure that contains
  *                the configuration information for the LTDC.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_LTDC_Init(LTDC_HandleTypeDef *hltdc)
{
 8003a48:	b580      	push	{r7, lr}
 8003a4a:	b084      	sub	sp, #16
 8003a4c:	af00      	add	r7, sp, #0
 8003a4e:	6078      	str	r0, [r7, #4]
  uint32_t tmp;
  uint32_t tmp1;

  /* Check the LTDC peripheral state */
  if (hltdc == NULL)
 8003a50:	687b      	ldr	r3, [r7, #4]
 8003a52:	2b00      	cmp	r3, #0
 8003a54:	d101      	bne.n	8003a5a <HAL_LTDC_Init+0x12>
  {
    return HAL_ERROR;
 8003a56:	2301      	movs	r3, #1
 8003a58:	e0bf      	b.n	8003bda <HAL_LTDC_Init+0x192>
    }
    /* Init the low level hardware */
    hltdc->MspInitCallback(hltdc);
  }
#else
  if (hltdc->State == HAL_LTDC_STATE_RESET)
 8003a5a:	687b      	ldr	r3, [r7, #4]
 8003a5c:	f893 30a1 	ldrb.w	r3, [r3, #161]	; 0xa1
 8003a60:	b2db      	uxtb	r3, r3
 8003a62:	2b00      	cmp	r3, #0
 8003a64:	d106      	bne.n	8003a74 <HAL_LTDC_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hltdc->Lock = HAL_UNLOCKED;
 8003a66:	687b      	ldr	r3, [r7, #4]
 8003a68:	2200      	movs	r2, #0
 8003a6a:	f883 20a0 	strb.w	r2, [r3, #160]	; 0xa0
    /* Init the low level hardware */
    HAL_LTDC_MspInit(hltdc);
 8003a6e:	6878      	ldr	r0, [r7, #4]
 8003a70:	f7fd fa58 	bl	8000f24 <HAL_LTDC_MspInit>
  }
#endif /* USE_HAL_LTDC_REGISTER_CALLBACKS */

  /* Change LTDC peripheral state */
  hltdc->State = HAL_LTDC_STATE_BUSY;
 8003a74:	687b      	ldr	r3, [r7, #4]
 8003a76:	2202      	movs	r2, #2
 8003a78:	f883 20a1 	strb.w	r2, [r3, #161]	; 0xa1

  /* Configure the HS, VS, DE and PC polarity */
  hltdc->Instance->GCR &= ~(LTDC_GCR_HSPOL | LTDC_GCR_VSPOL | LTDC_GCR_DEPOL | LTDC_GCR_PCPOL);
 8003a7c:	687b      	ldr	r3, [r7, #4]
 8003a7e:	681b      	ldr	r3, [r3, #0]
 8003a80:	699a      	ldr	r2, [r3, #24]
 8003a82:	687b      	ldr	r3, [r7, #4]
 8003a84:	681b      	ldr	r3, [r3, #0]
 8003a86:	f022 4270 	bic.w	r2, r2, #4026531840	; 0xf0000000
 8003a8a:	619a      	str	r2, [r3, #24]
  hltdc->Instance->GCR |= (uint32_t)(hltdc->Init.HSPolarity | hltdc->Init.VSPolarity | \
 8003a8c:	687b      	ldr	r3, [r7, #4]
 8003a8e:	681b      	ldr	r3, [r3, #0]
 8003a90:	6999      	ldr	r1, [r3, #24]
 8003a92:	687b      	ldr	r3, [r7, #4]
 8003a94:	685a      	ldr	r2, [r3, #4]
 8003a96:	687b      	ldr	r3, [r7, #4]
 8003a98:	689b      	ldr	r3, [r3, #8]
 8003a9a:	431a      	orrs	r2, r3
                                     hltdc->Init.DEPolarity | hltdc->Init.PCPolarity);
 8003a9c:	687b      	ldr	r3, [r7, #4]
 8003a9e:	68db      	ldr	r3, [r3, #12]
  hltdc->Instance->GCR |= (uint32_t)(hltdc->Init.HSPolarity | hltdc->Init.VSPolarity | \
 8003aa0:	431a      	orrs	r2, r3
                                     hltdc->Init.DEPolarity | hltdc->Init.PCPolarity);
 8003aa2:	687b      	ldr	r3, [r7, #4]
 8003aa4:	691b      	ldr	r3, [r3, #16]
 8003aa6:	431a      	orrs	r2, r3
  hltdc->Instance->GCR |= (uint32_t)(hltdc->Init.HSPolarity | hltdc->Init.VSPolarity | \
 8003aa8:	687b      	ldr	r3, [r7, #4]
 8003aaa:	681b      	ldr	r3, [r3, #0]
 8003aac:	430a      	orrs	r2, r1
 8003aae:	619a      	str	r2, [r3, #24]

  /* Set Synchronization size */
  hltdc->Instance->SSCR &= ~(LTDC_SSCR_VSH | LTDC_SSCR_HSW);
 8003ab0:	687b      	ldr	r3, [r7, #4]
 8003ab2:	681b      	ldr	r3, [r3, #0]
 8003ab4:	6899      	ldr	r1, [r3, #8]
 8003ab6:	687b      	ldr	r3, [r7, #4]
 8003ab8:	681a      	ldr	r2, [r3, #0]
 8003aba:	4b4a      	ldr	r3, [pc, #296]	; (8003be4 <HAL_LTDC_Init+0x19c>)
 8003abc:	400b      	ands	r3, r1
 8003abe:	6093      	str	r3, [r2, #8]
  tmp = (hltdc->Init.HorizontalSync << 16U);
 8003ac0:	687b      	ldr	r3, [r7, #4]
 8003ac2:	695b      	ldr	r3, [r3, #20]
 8003ac4:	041b      	lsls	r3, r3, #16
 8003ac6:	60fb      	str	r3, [r7, #12]
  hltdc->Instance->SSCR |= (tmp | hltdc->Init.VerticalSync);
 8003ac8:	687b      	ldr	r3, [r7, #4]
 8003aca:	681b      	ldr	r3, [r3, #0]
 8003acc:	6899      	ldr	r1, [r3, #8]
 8003ace:	687b      	ldr	r3, [r7, #4]
 8003ad0:	699a      	ldr	r2, [r3, #24]
 8003ad2:	68fb      	ldr	r3, [r7, #12]
 8003ad4:	431a      	orrs	r2, r3
 8003ad6:	687b      	ldr	r3, [r7, #4]
 8003ad8:	681b      	ldr	r3, [r3, #0]
 8003ada:	430a      	orrs	r2, r1
 8003adc:	609a      	str	r2, [r3, #8]

  /* Set Accumulated Back porch */
  hltdc->Instance->BPCR &= ~(LTDC_BPCR_AVBP | LTDC_BPCR_AHBP);
 8003ade:	687b      	ldr	r3, [r7, #4]
 8003ae0:	681b      	ldr	r3, [r3, #0]
 8003ae2:	68d9      	ldr	r1, [r3, #12]
 8003ae4:	687b      	ldr	r3, [r7, #4]
 8003ae6:	681a      	ldr	r2, [r3, #0]
 8003ae8:	4b3e      	ldr	r3, [pc, #248]	; (8003be4 <HAL_LTDC_Init+0x19c>)
 8003aea:	400b      	ands	r3, r1
 8003aec:	60d3      	str	r3, [r2, #12]
  tmp = (hltdc->Init.AccumulatedHBP << 16U);
 8003aee:	687b      	ldr	r3, [r7, #4]
 8003af0:	69db      	ldr	r3, [r3, #28]
 8003af2:	041b      	lsls	r3, r3, #16
 8003af4:	60fb      	str	r3, [r7, #12]
  hltdc->Instance->BPCR |= (tmp | hltdc->Init.AccumulatedVBP);
 8003af6:	687b      	ldr	r3, [r7, #4]
 8003af8:	681b      	ldr	r3, [r3, #0]
 8003afa:	68d9      	ldr	r1, [r3, #12]
 8003afc:	687b      	ldr	r3, [r7, #4]
 8003afe:	6a1a      	ldr	r2, [r3, #32]
 8003b00:	68fb      	ldr	r3, [r7, #12]
 8003b02:	431a      	orrs	r2, r3
 8003b04:	687b      	ldr	r3, [r7, #4]
 8003b06:	681b      	ldr	r3, [r3, #0]
 8003b08:	430a      	orrs	r2, r1
 8003b0a:	60da      	str	r2, [r3, #12]

  /* Set Accumulated Active Width */
  hltdc->Instance->AWCR &= ~(LTDC_AWCR_AAH | LTDC_AWCR_AAW);
 8003b0c:	687b      	ldr	r3, [r7, #4]
 8003b0e:	681b      	ldr	r3, [r3, #0]
 8003b10:	6919      	ldr	r1, [r3, #16]
 8003b12:	687b      	ldr	r3, [r7, #4]
 8003b14:	681a      	ldr	r2, [r3, #0]
 8003b16:	4b33      	ldr	r3, [pc, #204]	; (8003be4 <HAL_LTDC_Init+0x19c>)
 8003b18:	400b      	ands	r3, r1
 8003b1a:	6113      	str	r3, [r2, #16]
  tmp = (hltdc->Init.AccumulatedActiveW << 16U);
 8003b1c:	687b      	ldr	r3, [r7, #4]
 8003b1e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003b20:	041b      	lsls	r3, r3, #16
 8003b22:	60fb      	str	r3, [r7, #12]
  hltdc->Instance->AWCR |= (tmp | hltdc->Init.AccumulatedActiveH);
 8003b24:	687b      	ldr	r3, [r7, #4]
 8003b26:	681b      	ldr	r3, [r3, #0]
 8003b28:	6919      	ldr	r1, [r3, #16]
 8003b2a:	687b      	ldr	r3, [r7, #4]
 8003b2c:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8003b2e:	68fb      	ldr	r3, [r7, #12]
 8003b30:	431a      	orrs	r2, r3
 8003b32:	687b      	ldr	r3, [r7, #4]
 8003b34:	681b      	ldr	r3, [r3, #0]
 8003b36:	430a      	orrs	r2, r1
 8003b38:	611a      	str	r2, [r3, #16]

  /* Set Total Width */
  hltdc->Instance->TWCR &= ~(LTDC_TWCR_TOTALH | LTDC_TWCR_TOTALW);
 8003b3a:	687b      	ldr	r3, [r7, #4]
 8003b3c:	681b      	ldr	r3, [r3, #0]
 8003b3e:	6959      	ldr	r1, [r3, #20]
 8003b40:	687b      	ldr	r3, [r7, #4]
 8003b42:	681a      	ldr	r2, [r3, #0]
 8003b44:	4b27      	ldr	r3, [pc, #156]	; (8003be4 <HAL_LTDC_Init+0x19c>)
 8003b46:	400b      	ands	r3, r1
 8003b48:	6153      	str	r3, [r2, #20]
  tmp = (hltdc->Init.TotalWidth << 16U);
 8003b4a:	687b      	ldr	r3, [r7, #4]
 8003b4c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003b4e:	041b      	lsls	r3, r3, #16
 8003b50:	60fb      	str	r3, [r7, #12]
  hltdc->Instance->TWCR |= (tmp | hltdc->Init.TotalHeigh);
 8003b52:	687b      	ldr	r3, [r7, #4]
 8003b54:	681b      	ldr	r3, [r3, #0]
 8003b56:	6959      	ldr	r1, [r3, #20]
 8003b58:	687b      	ldr	r3, [r7, #4]
 8003b5a:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8003b5c:	68fb      	ldr	r3, [r7, #12]
 8003b5e:	431a      	orrs	r2, r3
 8003b60:	687b      	ldr	r3, [r7, #4]
 8003b62:	681b      	ldr	r3, [r3, #0]
 8003b64:	430a      	orrs	r2, r1
 8003b66:	615a      	str	r2, [r3, #20]

  /* Set the background color value */
  tmp = ((uint32_t)(hltdc->Init.Backcolor.Green) << 8U);
 8003b68:	687b      	ldr	r3, [r7, #4]
 8003b6a:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8003b6e:	021b      	lsls	r3, r3, #8
 8003b70:	60fb      	str	r3, [r7, #12]
  tmp1 = ((uint32_t)(hltdc->Init.Backcolor.Red) << 16U);
 8003b72:	687b      	ldr	r3, [r7, #4]
 8003b74:	f893 3036 	ldrb.w	r3, [r3, #54]	; 0x36
 8003b78:	041b      	lsls	r3, r3, #16
 8003b7a:	60bb      	str	r3, [r7, #8]
  hltdc->Instance->BCCR &= ~(LTDC_BCCR_BCBLUE | LTDC_BCCR_BCGREEN | LTDC_BCCR_BCRED);
 8003b7c:	687b      	ldr	r3, [r7, #4]
 8003b7e:	681b      	ldr	r3, [r3, #0]
 8003b80:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8003b82:	687b      	ldr	r3, [r7, #4]
 8003b84:	681b      	ldr	r3, [r3, #0]
 8003b86:	f002 427f 	and.w	r2, r2, #4278190080	; 0xff000000
 8003b8a:	62da      	str	r2, [r3, #44]	; 0x2c
  hltdc->Instance->BCCR |= (tmp1 | tmp | hltdc->Init.Backcolor.Blue);
 8003b8c:	687b      	ldr	r3, [r7, #4]
 8003b8e:	681b      	ldr	r3, [r3, #0]
 8003b90:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 8003b92:	68ba      	ldr	r2, [r7, #8]
 8003b94:	68fb      	ldr	r3, [r7, #12]
 8003b96:	4313      	orrs	r3, r2
 8003b98:	687a      	ldr	r2, [r7, #4]
 8003b9a:	f892 2034 	ldrb.w	r2, [r2, #52]	; 0x34
 8003b9e:	431a      	orrs	r2, r3
 8003ba0:	687b      	ldr	r3, [r7, #4]
 8003ba2:	681b      	ldr	r3, [r3, #0]
 8003ba4:	430a      	orrs	r2, r1
 8003ba6:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Enable the Transfer Error and FIFO underrun interrupts */
  __HAL_LTDC_ENABLE_IT(hltdc, LTDC_IT_TE | LTDC_IT_FU);
 8003ba8:	687b      	ldr	r3, [r7, #4]
 8003baa:	681b      	ldr	r3, [r3, #0]
 8003bac:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8003bae:	687b      	ldr	r3, [r7, #4]
 8003bb0:	681b      	ldr	r3, [r3, #0]
 8003bb2:	f042 0206 	orr.w	r2, r2, #6
 8003bb6:	635a      	str	r2, [r3, #52]	; 0x34

  /* Enable LTDC by setting LTDCEN bit */
  __HAL_LTDC_ENABLE(hltdc);
 8003bb8:	687b      	ldr	r3, [r7, #4]
 8003bba:	681b      	ldr	r3, [r3, #0]
 8003bbc:	699a      	ldr	r2, [r3, #24]
 8003bbe:	687b      	ldr	r3, [r7, #4]
 8003bc0:	681b      	ldr	r3, [r3, #0]
 8003bc2:	f042 0201 	orr.w	r2, r2, #1
 8003bc6:	619a      	str	r2, [r3, #24]

  /* Initialize the error code */
  hltdc->ErrorCode = HAL_LTDC_ERROR_NONE;
 8003bc8:	687b      	ldr	r3, [r7, #4]
 8003bca:	2200      	movs	r2, #0
 8003bcc:	f8c3 20a4 	str.w	r2, [r3, #164]	; 0xa4

  /* Initialize the LTDC state*/
  hltdc->State = HAL_LTDC_STATE_READY;
 8003bd0:	687b      	ldr	r3, [r7, #4]
 8003bd2:	2201      	movs	r2, #1
 8003bd4:	f883 20a1 	strb.w	r2, [r3, #161]	; 0xa1

  return HAL_OK;
 8003bd8:	2300      	movs	r3, #0
}
 8003bda:	4618      	mov	r0, r3
 8003bdc:	3710      	adds	r7, #16
 8003bde:	46bd      	mov	sp, r7
 8003be0:	bd80      	pop	{r7, pc}
 8003be2:	bf00      	nop
 8003be4:	f000f800 	.word	0xf000f800

08003be8 <HAL_LTDC_IRQHandler>:
  * @param  hltdc  pointer to a LTDC_HandleTypeDef structure that contains
  *                the configuration information for the LTDC.
  * @retval HAL status
  */
void HAL_LTDC_IRQHandler(LTDC_HandleTypeDef *hltdc)
{
 8003be8:	b580      	push	{r7, lr}
 8003bea:	b084      	sub	sp, #16
 8003bec:	af00      	add	r7, sp, #0
 8003bee:	6078      	str	r0, [r7, #4]
  uint32_t isrflags  = READ_REG(hltdc->Instance->ISR);
 8003bf0:	687b      	ldr	r3, [r7, #4]
 8003bf2:	681b      	ldr	r3, [r3, #0]
 8003bf4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003bf6:	60fb      	str	r3, [r7, #12]
  uint32_t itsources = READ_REG(hltdc->Instance->IER);
 8003bf8:	687b      	ldr	r3, [r7, #4]
 8003bfa:	681b      	ldr	r3, [r3, #0]
 8003bfc:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8003bfe:	60bb      	str	r3, [r7, #8]

  /* Transfer Error Interrupt management ***************************************/
  if (((isrflags & LTDC_ISR_TERRIF) != 0U) && ((itsources & LTDC_IER_TERRIE) != 0U))
 8003c00:	68fb      	ldr	r3, [r7, #12]
 8003c02:	f003 0304 	and.w	r3, r3, #4
 8003c06:	2b00      	cmp	r3, #0
 8003c08:	d023      	beq.n	8003c52 <HAL_LTDC_IRQHandler+0x6a>
 8003c0a:	68bb      	ldr	r3, [r7, #8]
 8003c0c:	f003 0304 	and.w	r3, r3, #4
 8003c10:	2b00      	cmp	r3, #0
 8003c12:	d01e      	beq.n	8003c52 <HAL_LTDC_IRQHandler+0x6a>
  {
    /* Disable the transfer Error interrupt */
    __HAL_LTDC_DISABLE_IT(hltdc, LTDC_IT_TE);
 8003c14:	687b      	ldr	r3, [r7, #4]
 8003c16:	681b      	ldr	r3, [r3, #0]
 8003c18:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8003c1a:	687b      	ldr	r3, [r7, #4]
 8003c1c:	681b      	ldr	r3, [r3, #0]
 8003c1e:	f022 0204 	bic.w	r2, r2, #4
 8003c22:	635a      	str	r2, [r3, #52]	; 0x34

    /* Clear the transfer error flag */
    __HAL_LTDC_CLEAR_FLAG(hltdc, LTDC_FLAG_TE);
 8003c24:	687b      	ldr	r3, [r7, #4]
 8003c26:	681b      	ldr	r3, [r3, #0]
 8003c28:	2204      	movs	r2, #4
 8003c2a:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Update error code */
    hltdc->ErrorCode |= HAL_LTDC_ERROR_TE;
 8003c2c:	687b      	ldr	r3, [r7, #4]
 8003c2e:	f8d3 30a4 	ldr.w	r3, [r3, #164]	; 0xa4
 8003c32:	f043 0201 	orr.w	r2, r3, #1
 8003c36:	687b      	ldr	r3, [r7, #4]
 8003c38:	f8c3 20a4 	str.w	r2, [r3, #164]	; 0xa4

    /* Change LTDC state */
    hltdc->State = HAL_LTDC_STATE_ERROR;
 8003c3c:	687b      	ldr	r3, [r7, #4]
 8003c3e:	2204      	movs	r2, #4
 8003c40:	f883 20a1 	strb.w	r2, [r3, #161]	; 0xa1

    /* Process unlocked */
    __HAL_UNLOCK(hltdc);
 8003c44:	687b      	ldr	r3, [r7, #4]
 8003c46:	2200      	movs	r2, #0
 8003c48:	f883 20a0 	strb.w	r2, [r3, #160]	; 0xa0
#if (USE_HAL_LTDC_REGISTER_CALLBACKS == 1)
    /*Call registered error callback*/
    hltdc->ErrorCallback(hltdc);
#else
    /* Call legacy error callback*/
    HAL_LTDC_ErrorCallback(hltdc);
 8003c4c:	6878      	ldr	r0, [r7, #4]
 8003c4e:	f000 f86f 	bl	8003d30 <HAL_LTDC_ErrorCallback>
#endif /* USE_HAL_LTDC_REGISTER_CALLBACKS */
  }

  /* FIFO underrun Interrupt management ***************************************/
  if (((isrflags & LTDC_ISR_FUIF) != 0U) && ((itsources & LTDC_IER_FUIE) != 0U))
 8003c52:	68fb      	ldr	r3, [r7, #12]
 8003c54:	f003 0302 	and.w	r3, r3, #2
 8003c58:	2b00      	cmp	r3, #0
 8003c5a:	d023      	beq.n	8003ca4 <HAL_LTDC_IRQHandler+0xbc>
 8003c5c:	68bb      	ldr	r3, [r7, #8]
 8003c5e:	f003 0302 	and.w	r3, r3, #2
 8003c62:	2b00      	cmp	r3, #0
 8003c64:	d01e      	beq.n	8003ca4 <HAL_LTDC_IRQHandler+0xbc>
  {
    /* Disable the FIFO underrun interrupt */
    __HAL_LTDC_DISABLE_IT(hltdc, LTDC_IT_FU);
 8003c66:	687b      	ldr	r3, [r7, #4]
 8003c68:	681b      	ldr	r3, [r3, #0]
 8003c6a:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8003c6c:	687b      	ldr	r3, [r7, #4]
 8003c6e:	681b      	ldr	r3, [r3, #0]
 8003c70:	f022 0202 	bic.w	r2, r2, #2
 8003c74:	635a      	str	r2, [r3, #52]	; 0x34

    /* Clear the FIFO underrun flag */
    __HAL_LTDC_CLEAR_FLAG(hltdc, LTDC_FLAG_FU);
 8003c76:	687b      	ldr	r3, [r7, #4]
 8003c78:	681b      	ldr	r3, [r3, #0]
 8003c7a:	2202      	movs	r2, #2
 8003c7c:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Update error code */
    hltdc->ErrorCode |= HAL_LTDC_ERROR_FU;
 8003c7e:	687b      	ldr	r3, [r7, #4]
 8003c80:	f8d3 30a4 	ldr.w	r3, [r3, #164]	; 0xa4
 8003c84:	f043 0202 	orr.w	r2, r3, #2
 8003c88:	687b      	ldr	r3, [r7, #4]
 8003c8a:	f8c3 20a4 	str.w	r2, [r3, #164]	; 0xa4

    /* Change LTDC state */
    hltdc->State = HAL_LTDC_STATE_ERROR;
 8003c8e:	687b      	ldr	r3, [r7, #4]
 8003c90:	2204      	movs	r2, #4
 8003c92:	f883 20a1 	strb.w	r2, [r3, #161]	; 0xa1

    /* Process unlocked */
    __HAL_UNLOCK(hltdc);
 8003c96:	687b      	ldr	r3, [r7, #4]
 8003c98:	2200      	movs	r2, #0
 8003c9a:	f883 20a0 	strb.w	r2, [r3, #160]	; 0xa0
#if (USE_HAL_LTDC_REGISTER_CALLBACKS == 1)
    /*Call registered error callback*/
    hltdc->ErrorCallback(hltdc);
#else
    /* Call legacy error callback*/
    HAL_LTDC_ErrorCallback(hltdc);
 8003c9e:	6878      	ldr	r0, [r7, #4]
 8003ca0:	f000 f846 	bl	8003d30 <HAL_LTDC_ErrorCallback>
#endif /* USE_HAL_LTDC_REGISTER_CALLBACKS */
  }

  /* Line Interrupt management ************************************************/
  if (((isrflags & LTDC_ISR_LIF) != 0U) && ((itsources & LTDC_IER_LIE) != 0U))
 8003ca4:	68fb      	ldr	r3, [r7, #12]
 8003ca6:	f003 0301 	and.w	r3, r3, #1
 8003caa:	2b00      	cmp	r3, #0
 8003cac:	d01b      	beq.n	8003ce6 <HAL_LTDC_IRQHandler+0xfe>
 8003cae:	68bb      	ldr	r3, [r7, #8]
 8003cb0:	f003 0301 	and.w	r3, r3, #1
 8003cb4:	2b00      	cmp	r3, #0
 8003cb6:	d016      	beq.n	8003ce6 <HAL_LTDC_IRQHandler+0xfe>
  {
    /* Disable the Line interrupt */
    __HAL_LTDC_DISABLE_IT(hltdc, LTDC_IT_LI);
 8003cb8:	687b      	ldr	r3, [r7, #4]
 8003cba:	681b      	ldr	r3, [r3, #0]
 8003cbc:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8003cbe:	687b      	ldr	r3, [r7, #4]
 8003cc0:	681b      	ldr	r3, [r3, #0]
 8003cc2:	f022 0201 	bic.w	r2, r2, #1
 8003cc6:	635a      	str	r2, [r3, #52]	; 0x34

    /* Clear the Line interrupt flag */
    __HAL_LTDC_CLEAR_FLAG(hltdc, LTDC_FLAG_LI);
 8003cc8:	687b      	ldr	r3, [r7, #4]
 8003cca:	681b      	ldr	r3, [r3, #0]
 8003ccc:	2201      	movs	r2, #1
 8003cce:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Change LTDC state */
    hltdc->State = HAL_LTDC_STATE_READY;
 8003cd0:	687b      	ldr	r3, [r7, #4]
 8003cd2:	2201      	movs	r2, #1
 8003cd4:	f883 20a1 	strb.w	r2, [r3, #161]	; 0xa1

    /* Process unlocked */
    __HAL_UNLOCK(hltdc);
 8003cd8:	687b      	ldr	r3, [r7, #4]
 8003cda:	2200      	movs	r2, #0
 8003cdc:	f883 20a0 	strb.w	r2, [r3, #160]	; 0xa0
#if (USE_HAL_LTDC_REGISTER_CALLBACKS == 1)
    /*Call registered Line Event callback */
    hltdc->LineEventCallback(hltdc);
#else
    /*Call Legacy Line Event callback */
    HAL_LTDC_LineEventCallback(hltdc);
 8003ce0:	6878      	ldr	r0, [r7, #4]
 8003ce2:	f000 f82f 	bl	8003d44 <HAL_LTDC_LineEventCallback>
#endif /* USE_HAL_LTDC_REGISTER_CALLBACKS */
  }

  /* Register reload Interrupt management ***************************************/
  if (((isrflags & LTDC_ISR_RRIF) != 0U) && ((itsources & LTDC_IER_RRIE) != 0U))
 8003ce6:	68fb      	ldr	r3, [r7, #12]
 8003ce8:	f003 0308 	and.w	r3, r3, #8
 8003cec:	2b00      	cmp	r3, #0
 8003cee:	d01b      	beq.n	8003d28 <HAL_LTDC_IRQHandler+0x140>
 8003cf0:	68bb      	ldr	r3, [r7, #8]
 8003cf2:	f003 0308 	and.w	r3, r3, #8
 8003cf6:	2b00      	cmp	r3, #0
 8003cf8:	d016      	beq.n	8003d28 <HAL_LTDC_IRQHandler+0x140>
  {
    /* Disable the register reload interrupt */
    __HAL_LTDC_DISABLE_IT(hltdc, LTDC_IT_RR);
 8003cfa:	687b      	ldr	r3, [r7, #4]
 8003cfc:	681b      	ldr	r3, [r3, #0]
 8003cfe:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8003d00:	687b      	ldr	r3, [r7, #4]
 8003d02:	681b      	ldr	r3, [r3, #0]
 8003d04:	f022 0208 	bic.w	r2, r2, #8
 8003d08:	635a      	str	r2, [r3, #52]	; 0x34

    /* Clear the register reload flag */
    __HAL_LTDC_CLEAR_FLAG(hltdc, LTDC_FLAG_RR);
 8003d0a:	687b      	ldr	r3, [r7, #4]
 8003d0c:	681b      	ldr	r3, [r3, #0]
 8003d0e:	2208      	movs	r2, #8
 8003d10:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Change LTDC state */
    hltdc->State = HAL_LTDC_STATE_READY;
 8003d12:	687b      	ldr	r3, [r7, #4]
 8003d14:	2201      	movs	r2, #1
 8003d16:	f883 20a1 	strb.w	r2, [r3, #161]	; 0xa1

    /* Process unlocked */
    __HAL_UNLOCK(hltdc);
 8003d1a:	687b      	ldr	r3, [r7, #4]
 8003d1c:	2200      	movs	r2, #0
 8003d1e:	f883 20a0 	strb.w	r2, [r3, #160]	; 0xa0
#if (USE_HAL_LTDC_REGISTER_CALLBACKS == 1)
    /*Call registered reload Event callback */
    hltdc->ReloadEventCallback(hltdc);
#else
    /*Call Legacy Reload Event callback */
    HAL_LTDC_ReloadEventCallback(hltdc);
 8003d22:	6878      	ldr	r0, [r7, #4]
 8003d24:	f000 f818 	bl	8003d58 <HAL_LTDC_ReloadEventCallback>
#endif /* USE_HAL_LTDC_REGISTER_CALLBACKS */
  }
}
 8003d28:	bf00      	nop
 8003d2a:	3710      	adds	r7, #16
 8003d2c:	46bd      	mov	sp, r7
 8003d2e:	bd80      	pop	{r7, pc}

08003d30 <HAL_LTDC_ErrorCallback>:
  * @param  hltdc  pointer to a LTDC_HandleTypeDef structure that contains
  *                the configuration information for the LTDC.
  * @retval None
  */
__weak void HAL_LTDC_ErrorCallback(LTDC_HandleTypeDef *hltdc)
{
 8003d30:	b480      	push	{r7}
 8003d32:	b083      	sub	sp, #12
 8003d34:	af00      	add	r7, sp, #0
 8003d36:	6078      	str	r0, [r7, #4]
  UNUSED(hltdc);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_LTDC_ErrorCallback could be implemented in the user file
   */
}
 8003d38:	bf00      	nop
 8003d3a:	370c      	adds	r7, #12
 8003d3c:	46bd      	mov	sp, r7
 8003d3e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003d42:	4770      	bx	lr

08003d44 <HAL_LTDC_LineEventCallback>:
  * @param  hltdc  pointer to a LTDC_HandleTypeDef structure that contains
  *                the configuration information for the LTDC.
  * @retval None
  */
__weak void HAL_LTDC_LineEventCallback(LTDC_HandleTypeDef *hltdc)
{
 8003d44:	b480      	push	{r7}
 8003d46:	b083      	sub	sp, #12
 8003d48:	af00      	add	r7, sp, #0
 8003d4a:	6078      	str	r0, [r7, #4]
  UNUSED(hltdc);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_LTDC_LineEventCallback could be implemented in the user file
   */
}
 8003d4c:	bf00      	nop
 8003d4e:	370c      	adds	r7, #12
 8003d50:	46bd      	mov	sp, r7
 8003d52:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003d56:	4770      	bx	lr

08003d58 <HAL_LTDC_ReloadEventCallback>:
  * @param  hltdc  pointer to a LTDC_HandleTypeDef structure that contains
  *                the configuration information for the LTDC.
  * @retval None
  */
__weak void HAL_LTDC_ReloadEventCallback(LTDC_HandleTypeDef *hltdc)
{
 8003d58:	b480      	push	{r7}
 8003d5a:	b083      	sub	sp, #12
 8003d5c:	af00      	add	r7, sp, #0
 8003d5e:	6078      	str	r0, [r7, #4]
  UNUSED(hltdc);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_LTDC_ReloadEvenCallback could be implemented in the user file
   */
}
 8003d60:	bf00      	nop
 8003d62:	370c      	adds	r7, #12
 8003d64:	46bd      	mov	sp, r7
 8003d66:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003d6a:	4770      	bx	lr

08003d6c <HAL_LTDC_ConfigLayer>:
  *                    This parameter can be one of the following values:
  *                    LTDC_LAYER_1 (0) or LTDC_LAYER_2 (1)
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_LTDC_ConfigLayer(LTDC_HandleTypeDef *hltdc, LTDC_LayerCfgTypeDef *pLayerCfg, uint32_t LayerIdx)
{
 8003d6c:	b5b0      	push	{r4, r5, r7, lr}
 8003d6e:	b084      	sub	sp, #16
 8003d70:	af00      	add	r7, sp, #0
 8003d72:	60f8      	str	r0, [r7, #12]
 8003d74:	60b9      	str	r1, [r7, #8]
 8003d76:	607a      	str	r2, [r7, #4]
  assert_param(IS_LTDC_BLENDING_FACTOR2(pLayerCfg->BlendingFactor2));
  assert_param(IS_LTDC_CFBLL(pLayerCfg->ImageWidth));
  assert_param(IS_LTDC_CFBLNBR(pLayerCfg->ImageHeight));

  /* Process locked */
  __HAL_LOCK(hltdc);
 8003d78:	68fb      	ldr	r3, [r7, #12]
 8003d7a:	f893 30a0 	ldrb.w	r3, [r3, #160]	; 0xa0
 8003d7e:	2b01      	cmp	r3, #1
 8003d80:	d101      	bne.n	8003d86 <HAL_LTDC_ConfigLayer+0x1a>
 8003d82:	2302      	movs	r3, #2
 8003d84:	e02c      	b.n	8003de0 <HAL_LTDC_ConfigLayer+0x74>
 8003d86:	68fb      	ldr	r3, [r7, #12]
 8003d88:	2201      	movs	r2, #1
 8003d8a:	f883 20a0 	strb.w	r2, [r3, #160]	; 0xa0

  /* Change LTDC peripheral state */
  hltdc->State = HAL_LTDC_STATE_BUSY;
 8003d8e:	68fb      	ldr	r3, [r7, #12]
 8003d90:	2202      	movs	r2, #2
 8003d92:	f883 20a1 	strb.w	r2, [r3, #161]	; 0xa1

  /* Copy new layer configuration into handle structure */
  hltdc->LayerCfg[LayerIdx] = *pLayerCfg;
 8003d96:	68fa      	ldr	r2, [r7, #12]
 8003d98:	687b      	ldr	r3, [r7, #4]
 8003d9a:	2134      	movs	r1, #52	; 0x34
 8003d9c:	fb01 f303 	mul.w	r3, r1, r3
 8003da0:	4413      	add	r3, r2
 8003da2:	f103 0238 	add.w	r2, r3, #56	; 0x38
 8003da6:	68bb      	ldr	r3, [r7, #8]
 8003da8:	4614      	mov	r4, r2
 8003daa:	461d      	mov	r5, r3
 8003dac:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8003dae:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8003db0:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8003db2:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8003db4:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8003db6:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8003db8:	682b      	ldr	r3, [r5, #0]
 8003dba:	6023      	str	r3, [r4, #0]

  /* Configure the LTDC Layer */
  LTDC_SetConfig(hltdc, pLayerCfg, LayerIdx);
 8003dbc:	687a      	ldr	r2, [r7, #4]
 8003dbe:	68b9      	ldr	r1, [r7, #8]
 8003dc0:	68f8      	ldr	r0, [r7, #12]
 8003dc2:	f000 f811 	bl	8003de8 <LTDC_SetConfig>

  /* Set the Immediate Reload type */
  hltdc->Instance->SRCR = LTDC_SRCR_IMR;
 8003dc6:	68fb      	ldr	r3, [r7, #12]
 8003dc8:	681b      	ldr	r3, [r3, #0]
 8003dca:	2201      	movs	r2, #1
 8003dcc:	625a      	str	r2, [r3, #36]	; 0x24

  /* Initialize the LTDC state*/
  hltdc->State  = HAL_LTDC_STATE_READY;
 8003dce:	68fb      	ldr	r3, [r7, #12]
 8003dd0:	2201      	movs	r2, #1
 8003dd2:	f883 20a1 	strb.w	r2, [r3, #161]	; 0xa1

  /* Process unlocked */
  __HAL_UNLOCK(hltdc);
 8003dd6:	68fb      	ldr	r3, [r7, #12]
 8003dd8:	2200      	movs	r2, #0
 8003dda:	f883 20a0 	strb.w	r2, [r3, #160]	; 0xa0

  return HAL_OK;
 8003dde:	2300      	movs	r3, #0
}
 8003de0:	4618      	mov	r0, r3
 8003de2:	3710      	adds	r7, #16
 8003de4:	46bd      	mov	sp, r7
 8003de6:	bdb0      	pop	{r4, r5, r7, pc}

08003de8 <LTDC_SetConfig>:
  * @param  LayerIdx  LTDC Layer index.
  *                   This parameter can be one of the following values: LTDC_LAYER_1 (0) or LTDC_LAYER_2 (1)
  * @retval None
  */
static void LTDC_SetConfig(LTDC_HandleTypeDef *hltdc, LTDC_LayerCfgTypeDef *pLayerCfg, uint32_t LayerIdx)
{
 8003de8:	b480      	push	{r7}
 8003dea:	b089      	sub	sp, #36	; 0x24
 8003dec:	af00      	add	r7, sp, #0
 8003dee:	60f8      	str	r0, [r7, #12]
 8003df0:	60b9      	str	r1, [r7, #8]
 8003df2:	607a      	str	r2, [r7, #4]
  uint32_t tmp;
  uint32_t tmp1;
  uint32_t tmp2;

  /* Configure the horizontal start and stop position */
  tmp = ((pLayerCfg->WindowX1 + ((hltdc->Instance->BPCR & LTDC_BPCR_AHBP) >> 16U)) << 16U);
 8003df4:	68bb      	ldr	r3, [r7, #8]
 8003df6:	685a      	ldr	r2, [r3, #4]
 8003df8:	68fb      	ldr	r3, [r7, #12]
 8003dfa:	681b      	ldr	r3, [r3, #0]
 8003dfc:	68db      	ldr	r3, [r3, #12]
 8003dfe:	0c1b      	lsrs	r3, r3, #16
 8003e00:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8003e04:	4413      	add	r3, r2
 8003e06:	041b      	lsls	r3, r3, #16
 8003e08:	61fb      	str	r3, [r7, #28]
  LTDC_LAYER(hltdc, LayerIdx)->WHPCR &= ~(LTDC_LxWHPCR_WHSTPOS | LTDC_LxWHPCR_WHSPPOS);
 8003e0a:	68fb      	ldr	r3, [r7, #12]
 8003e0c:	681b      	ldr	r3, [r3, #0]
 8003e0e:	461a      	mov	r2, r3
 8003e10:	687b      	ldr	r3, [r7, #4]
 8003e12:	01db      	lsls	r3, r3, #7
 8003e14:	4413      	add	r3, r2
 8003e16:	3384      	adds	r3, #132	; 0x84
 8003e18:	685b      	ldr	r3, [r3, #4]
 8003e1a:	68fa      	ldr	r2, [r7, #12]
 8003e1c:	6812      	ldr	r2, [r2, #0]
 8003e1e:	4611      	mov	r1, r2
 8003e20:	687a      	ldr	r2, [r7, #4]
 8003e22:	01d2      	lsls	r2, r2, #7
 8003e24:	440a      	add	r2, r1
 8003e26:	3284      	adds	r2, #132	; 0x84
 8003e28:	f403 4370 	and.w	r3, r3, #61440	; 0xf000
 8003e2c:	6053      	str	r3, [r2, #4]
  LTDC_LAYER(hltdc, LayerIdx)->WHPCR = ((pLayerCfg->WindowX0 + \
 8003e2e:	68bb      	ldr	r3, [r7, #8]
 8003e30:	681a      	ldr	r2, [r3, #0]
                                         ((hltdc->Instance->BPCR & LTDC_BPCR_AHBP) >> 16U) + 1U) | tmp);
 8003e32:	68fb      	ldr	r3, [r7, #12]
 8003e34:	681b      	ldr	r3, [r3, #0]
 8003e36:	68db      	ldr	r3, [r3, #12]
 8003e38:	0c1b      	lsrs	r3, r3, #16
 8003e3a:	f3c3 030b 	ubfx	r3, r3, #0, #12
  LTDC_LAYER(hltdc, LayerIdx)->WHPCR = ((pLayerCfg->WindowX0 + \
 8003e3e:	4413      	add	r3, r2
                                         ((hltdc->Instance->BPCR & LTDC_BPCR_AHBP) >> 16U) + 1U) | tmp);
 8003e40:	1c5a      	adds	r2, r3, #1
  LTDC_LAYER(hltdc, LayerIdx)->WHPCR = ((pLayerCfg->WindowX0 + \
 8003e42:	68fb      	ldr	r3, [r7, #12]
 8003e44:	681b      	ldr	r3, [r3, #0]
 8003e46:	4619      	mov	r1, r3
 8003e48:	687b      	ldr	r3, [r7, #4]
 8003e4a:	01db      	lsls	r3, r3, #7
 8003e4c:	440b      	add	r3, r1
 8003e4e:	3384      	adds	r3, #132	; 0x84
 8003e50:	4619      	mov	r1, r3
                                         ((hltdc->Instance->BPCR & LTDC_BPCR_AHBP) >> 16U) + 1U) | tmp);
 8003e52:	69fb      	ldr	r3, [r7, #28]
 8003e54:	4313      	orrs	r3, r2
  LTDC_LAYER(hltdc, LayerIdx)->WHPCR = ((pLayerCfg->WindowX0 + \
 8003e56:	604b      	str	r3, [r1, #4]

  /* Configure the vertical start and stop position */
  tmp = ((pLayerCfg->WindowY1 + (hltdc->Instance->BPCR & LTDC_BPCR_AVBP)) << 16U);
 8003e58:	68bb      	ldr	r3, [r7, #8]
 8003e5a:	68da      	ldr	r2, [r3, #12]
 8003e5c:	68fb      	ldr	r3, [r7, #12]
 8003e5e:	681b      	ldr	r3, [r3, #0]
 8003e60:	68db      	ldr	r3, [r3, #12]
 8003e62:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8003e66:	4413      	add	r3, r2
 8003e68:	041b      	lsls	r3, r3, #16
 8003e6a:	61fb      	str	r3, [r7, #28]
  LTDC_LAYER(hltdc, LayerIdx)->WVPCR &= ~(LTDC_LxWVPCR_WVSTPOS | LTDC_LxWVPCR_WVSPPOS);
 8003e6c:	68fb      	ldr	r3, [r7, #12]
 8003e6e:	681b      	ldr	r3, [r3, #0]
 8003e70:	461a      	mov	r2, r3
 8003e72:	687b      	ldr	r3, [r7, #4]
 8003e74:	01db      	lsls	r3, r3, #7
 8003e76:	4413      	add	r3, r2
 8003e78:	3384      	adds	r3, #132	; 0x84
 8003e7a:	689b      	ldr	r3, [r3, #8]
 8003e7c:	68fa      	ldr	r2, [r7, #12]
 8003e7e:	6812      	ldr	r2, [r2, #0]
 8003e80:	4611      	mov	r1, r2
 8003e82:	687a      	ldr	r2, [r7, #4]
 8003e84:	01d2      	lsls	r2, r2, #7
 8003e86:	440a      	add	r2, r1
 8003e88:	3284      	adds	r2, #132	; 0x84
 8003e8a:	f403 4370 	and.w	r3, r3, #61440	; 0xf000
 8003e8e:	6093      	str	r3, [r2, #8]
  LTDC_LAYER(hltdc, LayerIdx)->WVPCR  = ((pLayerCfg->WindowY0 + (hltdc->Instance->BPCR & LTDC_BPCR_AVBP) + 1U) | tmp);
 8003e90:	68bb      	ldr	r3, [r7, #8]
 8003e92:	689a      	ldr	r2, [r3, #8]
 8003e94:	68fb      	ldr	r3, [r7, #12]
 8003e96:	681b      	ldr	r3, [r3, #0]
 8003e98:	68db      	ldr	r3, [r3, #12]
 8003e9a:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8003e9e:	4413      	add	r3, r2
 8003ea0:	1c5a      	adds	r2, r3, #1
 8003ea2:	68fb      	ldr	r3, [r7, #12]
 8003ea4:	681b      	ldr	r3, [r3, #0]
 8003ea6:	4619      	mov	r1, r3
 8003ea8:	687b      	ldr	r3, [r7, #4]
 8003eaa:	01db      	lsls	r3, r3, #7
 8003eac:	440b      	add	r3, r1
 8003eae:	3384      	adds	r3, #132	; 0x84
 8003eb0:	4619      	mov	r1, r3
 8003eb2:	69fb      	ldr	r3, [r7, #28]
 8003eb4:	4313      	orrs	r3, r2
 8003eb6:	608b      	str	r3, [r1, #8]

  /* Specifies the pixel format */
  LTDC_LAYER(hltdc, LayerIdx)->PFCR &= ~(LTDC_LxPFCR_PF);
 8003eb8:	68fb      	ldr	r3, [r7, #12]
 8003eba:	681b      	ldr	r3, [r3, #0]
 8003ebc:	461a      	mov	r2, r3
 8003ebe:	687b      	ldr	r3, [r7, #4]
 8003ec0:	01db      	lsls	r3, r3, #7
 8003ec2:	4413      	add	r3, r2
 8003ec4:	3384      	adds	r3, #132	; 0x84
 8003ec6:	691b      	ldr	r3, [r3, #16]
 8003ec8:	68fa      	ldr	r2, [r7, #12]
 8003eca:	6812      	ldr	r2, [r2, #0]
 8003ecc:	4611      	mov	r1, r2
 8003ece:	687a      	ldr	r2, [r7, #4]
 8003ed0:	01d2      	lsls	r2, r2, #7
 8003ed2:	440a      	add	r2, r1
 8003ed4:	3284      	adds	r2, #132	; 0x84
 8003ed6:	f023 0307 	bic.w	r3, r3, #7
 8003eda:	6113      	str	r3, [r2, #16]
  LTDC_LAYER(hltdc, LayerIdx)->PFCR = (pLayerCfg->PixelFormat);
 8003edc:	68fb      	ldr	r3, [r7, #12]
 8003ede:	681b      	ldr	r3, [r3, #0]
 8003ee0:	461a      	mov	r2, r3
 8003ee2:	687b      	ldr	r3, [r7, #4]
 8003ee4:	01db      	lsls	r3, r3, #7
 8003ee6:	4413      	add	r3, r2
 8003ee8:	3384      	adds	r3, #132	; 0x84
 8003eea:	461a      	mov	r2, r3
 8003eec:	68bb      	ldr	r3, [r7, #8]
 8003eee:	691b      	ldr	r3, [r3, #16]
 8003ef0:	6113      	str	r3, [r2, #16]

  /* Configure the default color values */
  tmp = ((uint32_t)(pLayerCfg->Backcolor.Green) << 8U);
 8003ef2:	68bb      	ldr	r3, [r7, #8]
 8003ef4:	f893 3031 	ldrb.w	r3, [r3, #49]	; 0x31
 8003ef8:	021b      	lsls	r3, r3, #8
 8003efa:	61fb      	str	r3, [r7, #28]
  tmp1 = ((uint32_t)(pLayerCfg->Backcolor.Red) << 16U);
 8003efc:	68bb      	ldr	r3, [r7, #8]
 8003efe:	f893 3032 	ldrb.w	r3, [r3, #50]	; 0x32
 8003f02:	041b      	lsls	r3, r3, #16
 8003f04:	61bb      	str	r3, [r7, #24]
  tmp2 = (pLayerCfg->Alpha0 << 24U);
 8003f06:	68bb      	ldr	r3, [r7, #8]
 8003f08:	699b      	ldr	r3, [r3, #24]
 8003f0a:	061b      	lsls	r3, r3, #24
 8003f0c:	617b      	str	r3, [r7, #20]
  LTDC_LAYER(hltdc, LayerIdx)->DCCR &= ~(LTDC_LxDCCR_DCBLUE | LTDC_LxDCCR_DCGREEN | LTDC_LxDCCR_DCRED |
 8003f0e:	68fb      	ldr	r3, [r7, #12]
 8003f10:	681b      	ldr	r3, [r3, #0]
 8003f12:	461a      	mov	r2, r3
 8003f14:	687b      	ldr	r3, [r7, #4]
 8003f16:	01db      	lsls	r3, r3, #7
 8003f18:	4413      	add	r3, r2
 8003f1a:	3384      	adds	r3, #132	; 0x84
 8003f1c:	699b      	ldr	r3, [r3, #24]
 8003f1e:	68fb      	ldr	r3, [r7, #12]
 8003f20:	681b      	ldr	r3, [r3, #0]
 8003f22:	461a      	mov	r2, r3
 8003f24:	687b      	ldr	r3, [r7, #4]
 8003f26:	01db      	lsls	r3, r3, #7
 8003f28:	4413      	add	r3, r2
 8003f2a:	3384      	adds	r3, #132	; 0x84
 8003f2c:	461a      	mov	r2, r3
 8003f2e:	2300      	movs	r3, #0
 8003f30:	6193      	str	r3, [r2, #24]
                                         LTDC_LxDCCR_DCALPHA);
  LTDC_LAYER(hltdc, LayerIdx)->DCCR = (pLayerCfg->Backcolor.Blue | tmp | tmp1 | tmp2);
 8003f32:	68bb      	ldr	r3, [r7, #8]
 8003f34:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 8003f38:	461a      	mov	r2, r3
 8003f3a:	69fb      	ldr	r3, [r7, #28]
 8003f3c:	431a      	orrs	r2, r3
 8003f3e:	69bb      	ldr	r3, [r7, #24]
 8003f40:	431a      	orrs	r2, r3
 8003f42:	68fb      	ldr	r3, [r7, #12]
 8003f44:	681b      	ldr	r3, [r3, #0]
 8003f46:	4619      	mov	r1, r3
 8003f48:	687b      	ldr	r3, [r7, #4]
 8003f4a:	01db      	lsls	r3, r3, #7
 8003f4c:	440b      	add	r3, r1
 8003f4e:	3384      	adds	r3, #132	; 0x84
 8003f50:	4619      	mov	r1, r3
 8003f52:	697b      	ldr	r3, [r7, #20]
 8003f54:	4313      	orrs	r3, r2
 8003f56:	618b      	str	r3, [r1, #24]

  /* Specifies the constant alpha value */
  LTDC_LAYER(hltdc, LayerIdx)->CACR &= ~(LTDC_LxCACR_CONSTA);
 8003f58:	68fb      	ldr	r3, [r7, #12]
 8003f5a:	681b      	ldr	r3, [r3, #0]
 8003f5c:	461a      	mov	r2, r3
 8003f5e:	687b      	ldr	r3, [r7, #4]
 8003f60:	01db      	lsls	r3, r3, #7
 8003f62:	4413      	add	r3, r2
 8003f64:	3384      	adds	r3, #132	; 0x84
 8003f66:	695b      	ldr	r3, [r3, #20]
 8003f68:	68fa      	ldr	r2, [r7, #12]
 8003f6a:	6812      	ldr	r2, [r2, #0]
 8003f6c:	4611      	mov	r1, r2
 8003f6e:	687a      	ldr	r2, [r7, #4]
 8003f70:	01d2      	lsls	r2, r2, #7
 8003f72:	440a      	add	r2, r1
 8003f74:	3284      	adds	r2, #132	; 0x84
 8003f76:	f023 03ff 	bic.w	r3, r3, #255	; 0xff
 8003f7a:	6153      	str	r3, [r2, #20]
  LTDC_LAYER(hltdc, LayerIdx)->CACR = (pLayerCfg->Alpha);
 8003f7c:	68fb      	ldr	r3, [r7, #12]
 8003f7e:	681b      	ldr	r3, [r3, #0]
 8003f80:	461a      	mov	r2, r3
 8003f82:	687b      	ldr	r3, [r7, #4]
 8003f84:	01db      	lsls	r3, r3, #7
 8003f86:	4413      	add	r3, r2
 8003f88:	3384      	adds	r3, #132	; 0x84
 8003f8a:	461a      	mov	r2, r3
 8003f8c:	68bb      	ldr	r3, [r7, #8]
 8003f8e:	695b      	ldr	r3, [r3, #20]
 8003f90:	6153      	str	r3, [r2, #20]

  /* Specifies the blending factors */
  LTDC_LAYER(hltdc, LayerIdx)->BFCR &= ~(LTDC_LxBFCR_BF2 | LTDC_LxBFCR_BF1);
 8003f92:	68fb      	ldr	r3, [r7, #12]
 8003f94:	681b      	ldr	r3, [r3, #0]
 8003f96:	461a      	mov	r2, r3
 8003f98:	687b      	ldr	r3, [r7, #4]
 8003f9a:	01db      	lsls	r3, r3, #7
 8003f9c:	4413      	add	r3, r2
 8003f9e:	3384      	adds	r3, #132	; 0x84
 8003fa0:	69db      	ldr	r3, [r3, #28]
 8003fa2:	68fa      	ldr	r2, [r7, #12]
 8003fa4:	6812      	ldr	r2, [r2, #0]
 8003fa6:	4611      	mov	r1, r2
 8003fa8:	687a      	ldr	r2, [r7, #4]
 8003faa:	01d2      	lsls	r2, r2, #7
 8003fac:	440a      	add	r2, r1
 8003fae:	3284      	adds	r2, #132	; 0x84
 8003fb0:	f423 63e0 	bic.w	r3, r3, #1792	; 0x700
 8003fb4:	f023 0307 	bic.w	r3, r3, #7
 8003fb8:	61d3      	str	r3, [r2, #28]
  LTDC_LAYER(hltdc, LayerIdx)->BFCR = (pLayerCfg->BlendingFactor1 | pLayerCfg->BlendingFactor2);
 8003fba:	68bb      	ldr	r3, [r7, #8]
 8003fbc:	69da      	ldr	r2, [r3, #28]
 8003fbe:	68bb      	ldr	r3, [r7, #8]
 8003fc0:	6a1b      	ldr	r3, [r3, #32]
 8003fc2:	68f9      	ldr	r1, [r7, #12]
 8003fc4:	6809      	ldr	r1, [r1, #0]
 8003fc6:	4608      	mov	r0, r1
 8003fc8:	6879      	ldr	r1, [r7, #4]
 8003fca:	01c9      	lsls	r1, r1, #7
 8003fcc:	4401      	add	r1, r0
 8003fce:	3184      	adds	r1, #132	; 0x84
 8003fd0:	4313      	orrs	r3, r2
 8003fd2:	61cb      	str	r3, [r1, #28]

  /* Configure the color frame buffer start address */
  LTDC_LAYER(hltdc, LayerIdx)->CFBAR &= ~(LTDC_LxCFBAR_CFBADD);
 8003fd4:	68fb      	ldr	r3, [r7, #12]
 8003fd6:	681b      	ldr	r3, [r3, #0]
 8003fd8:	461a      	mov	r2, r3
 8003fda:	687b      	ldr	r3, [r7, #4]
 8003fdc:	01db      	lsls	r3, r3, #7
 8003fde:	4413      	add	r3, r2
 8003fe0:	3384      	adds	r3, #132	; 0x84
 8003fe2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003fe4:	68fb      	ldr	r3, [r7, #12]
 8003fe6:	681b      	ldr	r3, [r3, #0]
 8003fe8:	461a      	mov	r2, r3
 8003fea:	687b      	ldr	r3, [r7, #4]
 8003fec:	01db      	lsls	r3, r3, #7
 8003fee:	4413      	add	r3, r2
 8003ff0:	3384      	adds	r3, #132	; 0x84
 8003ff2:	461a      	mov	r2, r3
 8003ff4:	2300      	movs	r3, #0
 8003ff6:	6293      	str	r3, [r2, #40]	; 0x28
  LTDC_LAYER(hltdc, LayerIdx)->CFBAR = (pLayerCfg->FBStartAdress);
 8003ff8:	68fb      	ldr	r3, [r7, #12]
 8003ffa:	681b      	ldr	r3, [r3, #0]
 8003ffc:	461a      	mov	r2, r3
 8003ffe:	687b      	ldr	r3, [r7, #4]
 8004000:	01db      	lsls	r3, r3, #7
 8004002:	4413      	add	r3, r2
 8004004:	3384      	adds	r3, #132	; 0x84
 8004006:	461a      	mov	r2, r3
 8004008:	68bb      	ldr	r3, [r7, #8]
 800400a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800400c:	6293      	str	r3, [r2, #40]	; 0x28

  if (pLayerCfg->PixelFormat == LTDC_PIXEL_FORMAT_ARGB8888)
 800400e:	68bb      	ldr	r3, [r7, #8]
 8004010:	691b      	ldr	r3, [r3, #16]
 8004012:	2b00      	cmp	r3, #0
 8004014:	d102      	bne.n	800401c <LTDC_SetConfig+0x234>
  {
    tmp = 4U;
 8004016:	2304      	movs	r3, #4
 8004018:	61fb      	str	r3, [r7, #28]
 800401a:	e01b      	b.n	8004054 <LTDC_SetConfig+0x26c>
  }
  else if (pLayerCfg->PixelFormat == LTDC_PIXEL_FORMAT_RGB888)
 800401c:	68bb      	ldr	r3, [r7, #8]
 800401e:	691b      	ldr	r3, [r3, #16]
 8004020:	2b01      	cmp	r3, #1
 8004022:	d102      	bne.n	800402a <LTDC_SetConfig+0x242>
  {
    tmp = 3U;
 8004024:	2303      	movs	r3, #3
 8004026:	61fb      	str	r3, [r7, #28]
 8004028:	e014      	b.n	8004054 <LTDC_SetConfig+0x26c>
  }
  else if ((pLayerCfg->PixelFormat == LTDC_PIXEL_FORMAT_ARGB4444) || \
 800402a:	68bb      	ldr	r3, [r7, #8]
 800402c:	691b      	ldr	r3, [r3, #16]
 800402e:	2b04      	cmp	r3, #4
 8004030:	d00b      	beq.n	800404a <LTDC_SetConfig+0x262>
           (pLayerCfg->PixelFormat == LTDC_PIXEL_FORMAT_RGB565)   || \
 8004032:	68bb      	ldr	r3, [r7, #8]
 8004034:	691b      	ldr	r3, [r3, #16]
  else if ((pLayerCfg->PixelFormat == LTDC_PIXEL_FORMAT_ARGB4444) || \
 8004036:	2b02      	cmp	r3, #2
 8004038:	d007      	beq.n	800404a <LTDC_SetConfig+0x262>
           (pLayerCfg->PixelFormat == LTDC_PIXEL_FORMAT_ARGB1555) || \
 800403a:	68bb      	ldr	r3, [r7, #8]
 800403c:	691b      	ldr	r3, [r3, #16]
           (pLayerCfg->PixelFormat == LTDC_PIXEL_FORMAT_RGB565)   || \
 800403e:	2b03      	cmp	r3, #3
 8004040:	d003      	beq.n	800404a <LTDC_SetConfig+0x262>
           (pLayerCfg->PixelFormat == LTDC_PIXEL_FORMAT_AL88))
 8004042:	68bb      	ldr	r3, [r7, #8]
 8004044:	691b      	ldr	r3, [r3, #16]
           (pLayerCfg->PixelFormat == LTDC_PIXEL_FORMAT_ARGB1555) || \
 8004046:	2b07      	cmp	r3, #7
 8004048:	d102      	bne.n	8004050 <LTDC_SetConfig+0x268>
  {
    tmp = 2U;
 800404a:	2302      	movs	r3, #2
 800404c:	61fb      	str	r3, [r7, #28]
 800404e:	e001      	b.n	8004054 <LTDC_SetConfig+0x26c>
  }
  else
  {
    tmp = 1U;
 8004050:	2301      	movs	r3, #1
 8004052:	61fb      	str	r3, [r7, #28]
  }

  /* Configure the color frame buffer pitch in byte */
  LTDC_LAYER(hltdc, LayerIdx)->CFBLR  &= ~(LTDC_LxCFBLR_CFBLL | LTDC_LxCFBLR_CFBP);
 8004054:	68fb      	ldr	r3, [r7, #12]
 8004056:	681b      	ldr	r3, [r3, #0]
 8004058:	461a      	mov	r2, r3
 800405a:	687b      	ldr	r3, [r7, #4]
 800405c:	01db      	lsls	r3, r3, #7
 800405e:	4413      	add	r3, r2
 8004060:	3384      	adds	r3, #132	; 0x84
 8004062:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004064:	68fa      	ldr	r2, [r7, #12]
 8004066:	6812      	ldr	r2, [r2, #0]
 8004068:	4611      	mov	r1, r2
 800406a:	687a      	ldr	r2, [r7, #4]
 800406c:	01d2      	lsls	r2, r2, #7
 800406e:	440a      	add	r2, r1
 8004070:	3284      	adds	r2, #132	; 0x84
 8004072:	f003 23e0 	and.w	r3, r3, #3758153728	; 0xe000e000
 8004076:	62d3      	str	r3, [r2, #44]	; 0x2c
  LTDC_LAYER(hltdc, LayerIdx)->CFBLR  = (((pLayerCfg->ImageWidth * tmp) << 16U) | \
 8004078:	68bb      	ldr	r3, [r7, #8]
 800407a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800407c:	69fa      	ldr	r2, [r7, #28]
 800407e:	fb02 f303 	mul.w	r3, r2, r3
 8004082:	041a      	lsls	r2, r3, #16
                                         (((pLayerCfg->WindowX1 - pLayerCfg->WindowX0) * tmp)  + 3U));
 8004084:	68bb      	ldr	r3, [r7, #8]
 8004086:	6859      	ldr	r1, [r3, #4]
 8004088:	68bb      	ldr	r3, [r7, #8]
 800408a:	681b      	ldr	r3, [r3, #0]
 800408c:	1acb      	subs	r3, r1, r3
 800408e:	69f9      	ldr	r1, [r7, #28]
 8004090:	fb01 f303 	mul.w	r3, r1, r3
 8004094:	3303      	adds	r3, #3
  LTDC_LAYER(hltdc, LayerIdx)->CFBLR  = (((pLayerCfg->ImageWidth * tmp) << 16U) | \
 8004096:	68f9      	ldr	r1, [r7, #12]
 8004098:	6809      	ldr	r1, [r1, #0]
 800409a:	4608      	mov	r0, r1
 800409c:	6879      	ldr	r1, [r7, #4]
 800409e:	01c9      	lsls	r1, r1, #7
 80040a0:	4401      	add	r1, r0
 80040a2:	3184      	adds	r1, #132	; 0x84
 80040a4:	4313      	orrs	r3, r2
 80040a6:	62cb      	str	r3, [r1, #44]	; 0x2c
  /* Configure the frame buffer line number */
  LTDC_LAYER(hltdc, LayerIdx)->CFBLNR  &= ~(LTDC_LxCFBLNR_CFBLNBR);
 80040a8:	68fb      	ldr	r3, [r7, #12]
 80040aa:	681b      	ldr	r3, [r3, #0]
 80040ac:	461a      	mov	r2, r3
 80040ae:	687b      	ldr	r3, [r7, #4]
 80040b0:	01db      	lsls	r3, r3, #7
 80040b2:	4413      	add	r3, r2
 80040b4:	3384      	adds	r3, #132	; 0x84
 80040b6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80040b8:	68fa      	ldr	r2, [r7, #12]
 80040ba:	6812      	ldr	r2, [r2, #0]
 80040bc:	4611      	mov	r1, r2
 80040be:	687a      	ldr	r2, [r7, #4]
 80040c0:	01d2      	lsls	r2, r2, #7
 80040c2:	440a      	add	r2, r1
 80040c4:	3284      	adds	r2, #132	; 0x84
 80040c6:	f423 63ff 	bic.w	r3, r3, #2040	; 0x7f8
 80040ca:	f023 0307 	bic.w	r3, r3, #7
 80040ce:	6313      	str	r3, [r2, #48]	; 0x30
  LTDC_LAYER(hltdc, LayerIdx)->CFBLNR  = (pLayerCfg->ImageHeight);
 80040d0:	68fb      	ldr	r3, [r7, #12]
 80040d2:	681b      	ldr	r3, [r3, #0]
 80040d4:	461a      	mov	r2, r3
 80040d6:	687b      	ldr	r3, [r7, #4]
 80040d8:	01db      	lsls	r3, r3, #7
 80040da:	4413      	add	r3, r2
 80040dc:	3384      	adds	r3, #132	; 0x84
 80040de:	461a      	mov	r2, r3
 80040e0:	68bb      	ldr	r3, [r7, #8]
 80040e2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80040e4:	6313      	str	r3, [r2, #48]	; 0x30

  /* Enable LTDC_Layer by setting LEN bit */
  LTDC_LAYER(hltdc, LayerIdx)->CR |= (uint32_t)LTDC_LxCR_LEN;
 80040e6:	68fb      	ldr	r3, [r7, #12]
 80040e8:	681b      	ldr	r3, [r3, #0]
 80040ea:	461a      	mov	r2, r3
 80040ec:	687b      	ldr	r3, [r7, #4]
 80040ee:	01db      	lsls	r3, r3, #7
 80040f0:	4413      	add	r3, r2
 80040f2:	3384      	adds	r3, #132	; 0x84
 80040f4:	681b      	ldr	r3, [r3, #0]
 80040f6:	68fa      	ldr	r2, [r7, #12]
 80040f8:	6812      	ldr	r2, [r2, #0]
 80040fa:	4611      	mov	r1, r2
 80040fc:	687a      	ldr	r2, [r7, #4]
 80040fe:	01d2      	lsls	r2, r2, #7
 8004100:	440a      	add	r2, r1
 8004102:	3284      	adds	r2, #132	; 0x84
 8004104:	f043 0301 	orr.w	r3, r3, #1
 8004108:	6013      	str	r3, [r2, #0]
}
 800410a:	bf00      	nop
 800410c:	3724      	adds	r7, #36	; 0x24
 800410e:	46bd      	mov	sp, r7
 8004110:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004114:	4770      	bx	lr
	...

08004118 <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8004118:	b580      	push	{r7, lr}
 800411a:	b086      	sub	sp, #24
 800411c:	af00      	add	r7, sp, #0
 800411e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8004120:	687b      	ldr	r3, [r7, #4]
 8004122:	2b00      	cmp	r3, #0
 8004124:	d101      	bne.n	800412a <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8004126:	2301      	movs	r3, #1
 8004128:	e267      	b.n	80045fa <HAL_RCC_OscConfig+0x4e2>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 800412a:	687b      	ldr	r3, [r7, #4]
 800412c:	681b      	ldr	r3, [r3, #0]
 800412e:	f003 0301 	and.w	r3, r3, #1
 8004132:	2b00      	cmp	r3, #0
 8004134:	d075      	beq.n	8004222 <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 8004136:	4b88      	ldr	r3, [pc, #544]	; (8004358 <HAL_RCC_OscConfig+0x240>)
 8004138:	689b      	ldr	r3, [r3, #8]
 800413a:	f003 030c 	and.w	r3, r3, #12
 800413e:	2b04      	cmp	r3, #4
 8004140:	d00c      	beq.n	800415c <HAL_RCC_OscConfig+0x44>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8004142:	4b85      	ldr	r3, [pc, #532]	; (8004358 <HAL_RCC_OscConfig+0x240>)
 8004144:	689b      	ldr	r3, [r3, #8]
 8004146:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 800414a:	2b08      	cmp	r3, #8
 800414c:	d112      	bne.n	8004174 <HAL_RCC_OscConfig+0x5c>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 800414e:	4b82      	ldr	r3, [pc, #520]	; (8004358 <HAL_RCC_OscConfig+0x240>)
 8004150:	685b      	ldr	r3, [r3, #4]
 8004152:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8004156:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 800415a:	d10b      	bne.n	8004174 <HAL_RCC_OscConfig+0x5c>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800415c:	4b7e      	ldr	r3, [pc, #504]	; (8004358 <HAL_RCC_OscConfig+0x240>)
 800415e:	681b      	ldr	r3, [r3, #0]
 8004160:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8004164:	2b00      	cmp	r3, #0
 8004166:	d05b      	beq.n	8004220 <HAL_RCC_OscConfig+0x108>
 8004168:	687b      	ldr	r3, [r7, #4]
 800416a:	685b      	ldr	r3, [r3, #4]
 800416c:	2b00      	cmp	r3, #0
 800416e:	d157      	bne.n	8004220 <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 8004170:	2301      	movs	r3, #1
 8004172:	e242      	b.n	80045fa <HAL_RCC_OscConfig+0x4e2>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8004174:	687b      	ldr	r3, [r7, #4]
 8004176:	685b      	ldr	r3, [r3, #4]
 8004178:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800417c:	d106      	bne.n	800418c <HAL_RCC_OscConfig+0x74>
 800417e:	4b76      	ldr	r3, [pc, #472]	; (8004358 <HAL_RCC_OscConfig+0x240>)
 8004180:	681b      	ldr	r3, [r3, #0]
 8004182:	4a75      	ldr	r2, [pc, #468]	; (8004358 <HAL_RCC_OscConfig+0x240>)
 8004184:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8004188:	6013      	str	r3, [r2, #0]
 800418a:	e01d      	b.n	80041c8 <HAL_RCC_OscConfig+0xb0>
 800418c:	687b      	ldr	r3, [r7, #4]
 800418e:	685b      	ldr	r3, [r3, #4]
 8004190:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8004194:	d10c      	bne.n	80041b0 <HAL_RCC_OscConfig+0x98>
 8004196:	4b70      	ldr	r3, [pc, #448]	; (8004358 <HAL_RCC_OscConfig+0x240>)
 8004198:	681b      	ldr	r3, [r3, #0]
 800419a:	4a6f      	ldr	r2, [pc, #444]	; (8004358 <HAL_RCC_OscConfig+0x240>)
 800419c:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 80041a0:	6013      	str	r3, [r2, #0]
 80041a2:	4b6d      	ldr	r3, [pc, #436]	; (8004358 <HAL_RCC_OscConfig+0x240>)
 80041a4:	681b      	ldr	r3, [r3, #0]
 80041a6:	4a6c      	ldr	r2, [pc, #432]	; (8004358 <HAL_RCC_OscConfig+0x240>)
 80041a8:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80041ac:	6013      	str	r3, [r2, #0]
 80041ae:	e00b      	b.n	80041c8 <HAL_RCC_OscConfig+0xb0>
 80041b0:	4b69      	ldr	r3, [pc, #420]	; (8004358 <HAL_RCC_OscConfig+0x240>)
 80041b2:	681b      	ldr	r3, [r3, #0]
 80041b4:	4a68      	ldr	r2, [pc, #416]	; (8004358 <HAL_RCC_OscConfig+0x240>)
 80041b6:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80041ba:	6013      	str	r3, [r2, #0]
 80041bc:	4b66      	ldr	r3, [pc, #408]	; (8004358 <HAL_RCC_OscConfig+0x240>)
 80041be:	681b      	ldr	r3, [r3, #0]
 80041c0:	4a65      	ldr	r2, [pc, #404]	; (8004358 <HAL_RCC_OscConfig+0x240>)
 80041c2:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 80041c6:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 80041c8:	687b      	ldr	r3, [r7, #4]
 80041ca:	685b      	ldr	r3, [r3, #4]
 80041cc:	2b00      	cmp	r3, #0
 80041ce:	d013      	beq.n	80041f8 <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80041d0:	f7fd fc94 	bl	8001afc <HAL_GetTick>
 80041d4:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80041d6:	e008      	b.n	80041ea <HAL_RCC_OscConfig+0xd2>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 80041d8:	f7fd fc90 	bl	8001afc <HAL_GetTick>
 80041dc:	4602      	mov	r2, r0
 80041de:	693b      	ldr	r3, [r7, #16]
 80041e0:	1ad3      	subs	r3, r2, r3
 80041e2:	2b64      	cmp	r3, #100	; 0x64
 80041e4:	d901      	bls.n	80041ea <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 80041e6:	2303      	movs	r3, #3
 80041e8:	e207      	b.n	80045fa <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80041ea:	4b5b      	ldr	r3, [pc, #364]	; (8004358 <HAL_RCC_OscConfig+0x240>)
 80041ec:	681b      	ldr	r3, [r3, #0]
 80041ee:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80041f2:	2b00      	cmp	r3, #0
 80041f4:	d0f0      	beq.n	80041d8 <HAL_RCC_OscConfig+0xc0>
 80041f6:	e014      	b.n	8004222 <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80041f8:	f7fd fc80 	bl	8001afc <HAL_GetTick>
 80041fc:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80041fe:	e008      	b.n	8004212 <HAL_RCC_OscConfig+0xfa>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8004200:	f7fd fc7c 	bl	8001afc <HAL_GetTick>
 8004204:	4602      	mov	r2, r0
 8004206:	693b      	ldr	r3, [r7, #16]
 8004208:	1ad3      	subs	r3, r2, r3
 800420a:	2b64      	cmp	r3, #100	; 0x64
 800420c:	d901      	bls.n	8004212 <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 800420e:	2303      	movs	r3, #3
 8004210:	e1f3      	b.n	80045fa <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8004212:	4b51      	ldr	r3, [pc, #324]	; (8004358 <HAL_RCC_OscConfig+0x240>)
 8004214:	681b      	ldr	r3, [r3, #0]
 8004216:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800421a:	2b00      	cmp	r3, #0
 800421c:	d1f0      	bne.n	8004200 <HAL_RCC_OscConfig+0xe8>
 800421e:	e000      	b.n	8004222 <HAL_RCC_OscConfig+0x10a>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8004220:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8004222:	687b      	ldr	r3, [r7, #4]
 8004224:	681b      	ldr	r3, [r3, #0]
 8004226:	f003 0302 	and.w	r3, r3, #2
 800422a:	2b00      	cmp	r3, #0
 800422c:	d063      	beq.n	80042f6 <HAL_RCC_OscConfig+0x1de>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 800422e:	4b4a      	ldr	r3, [pc, #296]	; (8004358 <HAL_RCC_OscConfig+0x240>)
 8004230:	689b      	ldr	r3, [r3, #8]
 8004232:	f003 030c 	and.w	r3, r3, #12
 8004236:	2b00      	cmp	r3, #0
 8004238:	d00b      	beq.n	8004252 <HAL_RCC_OscConfig+0x13a>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 800423a:	4b47      	ldr	r3, [pc, #284]	; (8004358 <HAL_RCC_OscConfig+0x240>)
 800423c:	689b      	ldr	r3, [r3, #8]
 800423e:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 8004242:	2b08      	cmp	r3, #8
 8004244:	d11c      	bne.n	8004280 <HAL_RCC_OscConfig+0x168>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8004246:	4b44      	ldr	r3, [pc, #272]	; (8004358 <HAL_RCC_OscConfig+0x240>)
 8004248:	685b      	ldr	r3, [r3, #4]
 800424a:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800424e:	2b00      	cmp	r3, #0
 8004250:	d116      	bne.n	8004280 <HAL_RCC_OscConfig+0x168>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8004252:	4b41      	ldr	r3, [pc, #260]	; (8004358 <HAL_RCC_OscConfig+0x240>)
 8004254:	681b      	ldr	r3, [r3, #0]
 8004256:	f003 0302 	and.w	r3, r3, #2
 800425a:	2b00      	cmp	r3, #0
 800425c:	d005      	beq.n	800426a <HAL_RCC_OscConfig+0x152>
 800425e:	687b      	ldr	r3, [r7, #4]
 8004260:	68db      	ldr	r3, [r3, #12]
 8004262:	2b01      	cmp	r3, #1
 8004264:	d001      	beq.n	800426a <HAL_RCC_OscConfig+0x152>
      {
        return HAL_ERROR;
 8004266:	2301      	movs	r3, #1
 8004268:	e1c7      	b.n	80045fa <HAL_RCC_OscConfig+0x4e2>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800426a:	4b3b      	ldr	r3, [pc, #236]	; (8004358 <HAL_RCC_OscConfig+0x240>)
 800426c:	681b      	ldr	r3, [r3, #0]
 800426e:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8004272:	687b      	ldr	r3, [r7, #4]
 8004274:	691b      	ldr	r3, [r3, #16]
 8004276:	00db      	lsls	r3, r3, #3
 8004278:	4937      	ldr	r1, [pc, #220]	; (8004358 <HAL_RCC_OscConfig+0x240>)
 800427a:	4313      	orrs	r3, r2
 800427c:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800427e:	e03a      	b.n	80042f6 <HAL_RCC_OscConfig+0x1de>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 8004280:	687b      	ldr	r3, [r7, #4]
 8004282:	68db      	ldr	r3, [r3, #12]
 8004284:	2b00      	cmp	r3, #0
 8004286:	d020      	beq.n	80042ca <HAL_RCC_OscConfig+0x1b2>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8004288:	4b34      	ldr	r3, [pc, #208]	; (800435c <HAL_RCC_OscConfig+0x244>)
 800428a:	2201      	movs	r2, #1
 800428c:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800428e:	f7fd fc35 	bl	8001afc <HAL_GetTick>
 8004292:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8004294:	e008      	b.n	80042a8 <HAL_RCC_OscConfig+0x190>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8004296:	f7fd fc31 	bl	8001afc <HAL_GetTick>
 800429a:	4602      	mov	r2, r0
 800429c:	693b      	ldr	r3, [r7, #16]
 800429e:	1ad3      	subs	r3, r2, r3
 80042a0:	2b02      	cmp	r3, #2
 80042a2:	d901      	bls.n	80042a8 <HAL_RCC_OscConfig+0x190>
          {
            return HAL_TIMEOUT;
 80042a4:	2303      	movs	r3, #3
 80042a6:	e1a8      	b.n	80045fa <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80042a8:	4b2b      	ldr	r3, [pc, #172]	; (8004358 <HAL_RCC_OscConfig+0x240>)
 80042aa:	681b      	ldr	r3, [r3, #0]
 80042ac:	f003 0302 	and.w	r3, r3, #2
 80042b0:	2b00      	cmp	r3, #0
 80042b2:	d0f0      	beq.n	8004296 <HAL_RCC_OscConfig+0x17e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80042b4:	4b28      	ldr	r3, [pc, #160]	; (8004358 <HAL_RCC_OscConfig+0x240>)
 80042b6:	681b      	ldr	r3, [r3, #0]
 80042b8:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 80042bc:	687b      	ldr	r3, [r7, #4]
 80042be:	691b      	ldr	r3, [r3, #16]
 80042c0:	00db      	lsls	r3, r3, #3
 80042c2:	4925      	ldr	r1, [pc, #148]	; (8004358 <HAL_RCC_OscConfig+0x240>)
 80042c4:	4313      	orrs	r3, r2
 80042c6:	600b      	str	r3, [r1, #0]
 80042c8:	e015      	b.n	80042f6 <HAL_RCC_OscConfig+0x1de>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 80042ca:	4b24      	ldr	r3, [pc, #144]	; (800435c <HAL_RCC_OscConfig+0x244>)
 80042cc:	2200      	movs	r2, #0
 80042ce:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80042d0:	f7fd fc14 	bl	8001afc <HAL_GetTick>
 80042d4:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80042d6:	e008      	b.n	80042ea <HAL_RCC_OscConfig+0x1d2>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 80042d8:	f7fd fc10 	bl	8001afc <HAL_GetTick>
 80042dc:	4602      	mov	r2, r0
 80042de:	693b      	ldr	r3, [r7, #16]
 80042e0:	1ad3      	subs	r3, r2, r3
 80042e2:	2b02      	cmp	r3, #2
 80042e4:	d901      	bls.n	80042ea <HAL_RCC_OscConfig+0x1d2>
          {
            return HAL_TIMEOUT;
 80042e6:	2303      	movs	r3, #3
 80042e8:	e187      	b.n	80045fa <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80042ea:	4b1b      	ldr	r3, [pc, #108]	; (8004358 <HAL_RCC_OscConfig+0x240>)
 80042ec:	681b      	ldr	r3, [r3, #0]
 80042ee:	f003 0302 	and.w	r3, r3, #2
 80042f2:	2b00      	cmp	r3, #0
 80042f4:	d1f0      	bne.n	80042d8 <HAL_RCC_OscConfig+0x1c0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 80042f6:	687b      	ldr	r3, [r7, #4]
 80042f8:	681b      	ldr	r3, [r3, #0]
 80042fa:	f003 0308 	and.w	r3, r3, #8
 80042fe:	2b00      	cmp	r3, #0
 8004300:	d036      	beq.n	8004370 <HAL_RCC_OscConfig+0x258>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 8004302:	687b      	ldr	r3, [r7, #4]
 8004304:	695b      	ldr	r3, [r3, #20]
 8004306:	2b00      	cmp	r3, #0
 8004308:	d016      	beq.n	8004338 <HAL_RCC_OscConfig+0x220>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 800430a:	4b15      	ldr	r3, [pc, #84]	; (8004360 <HAL_RCC_OscConfig+0x248>)
 800430c:	2201      	movs	r2, #1
 800430e:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8004310:	f7fd fbf4 	bl	8001afc <HAL_GetTick>
 8004314:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8004316:	e008      	b.n	800432a <HAL_RCC_OscConfig+0x212>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8004318:	f7fd fbf0 	bl	8001afc <HAL_GetTick>
 800431c:	4602      	mov	r2, r0
 800431e:	693b      	ldr	r3, [r7, #16]
 8004320:	1ad3      	subs	r3, r2, r3
 8004322:	2b02      	cmp	r3, #2
 8004324:	d901      	bls.n	800432a <HAL_RCC_OscConfig+0x212>
        {
          return HAL_TIMEOUT;
 8004326:	2303      	movs	r3, #3
 8004328:	e167      	b.n	80045fa <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 800432a:	4b0b      	ldr	r3, [pc, #44]	; (8004358 <HAL_RCC_OscConfig+0x240>)
 800432c:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800432e:	f003 0302 	and.w	r3, r3, #2
 8004332:	2b00      	cmp	r3, #0
 8004334:	d0f0      	beq.n	8004318 <HAL_RCC_OscConfig+0x200>
 8004336:	e01b      	b.n	8004370 <HAL_RCC_OscConfig+0x258>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8004338:	4b09      	ldr	r3, [pc, #36]	; (8004360 <HAL_RCC_OscConfig+0x248>)
 800433a:	2200      	movs	r2, #0
 800433c:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800433e:	f7fd fbdd 	bl	8001afc <HAL_GetTick>
 8004342:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8004344:	e00e      	b.n	8004364 <HAL_RCC_OscConfig+0x24c>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8004346:	f7fd fbd9 	bl	8001afc <HAL_GetTick>
 800434a:	4602      	mov	r2, r0
 800434c:	693b      	ldr	r3, [r7, #16]
 800434e:	1ad3      	subs	r3, r2, r3
 8004350:	2b02      	cmp	r3, #2
 8004352:	d907      	bls.n	8004364 <HAL_RCC_OscConfig+0x24c>
        {
          return HAL_TIMEOUT;
 8004354:	2303      	movs	r3, #3
 8004356:	e150      	b.n	80045fa <HAL_RCC_OscConfig+0x4e2>
 8004358:	40023800 	.word	0x40023800
 800435c:	42470000 	.word	0x42470000
 8004360:	42470e80 	.word	0x42470e80
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8004364:	4b88      	ldr	r3, [pc, #544]	; (8004588 <HAL_RCC_OscConfig+0x470>)
 8004366:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8004368:	f003 0302 	and.w	r3, r3, #2
 800436c:	2b00      	cmp	r3, #0
 800436e:	d1ea      	bne.n	8004346 <HAL_RCC_OscConfig+0x22e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8004370:	687b      	ldr	r3, [r7, #4]
 8004372:	681b      	ldr	r3, [r3, #0]
 8004374:	f003 0304 	and.w	r3, r3, #4
 8004378:	2b00      	cmp	r3, #0
 800437a:	f000 8097 	beq.w	80044ac <HAL_RCC_OscConfig+0x394>
  {
    FlagStatus       pwrclkchanged = RESET;
 800437e:	2300      	movs	r3, #0
 8004380:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8004382:	4b81      	ldr	r3, [pc, #516]	; (8004588 <HAL_RCC_OscConfig+0x470>)
 8004384:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004386:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800438a:	2b00      	cmp	r3, #0
 800438c:	d10f      	bne.n	80043ae <HAL_RCC_OscConfig+0x296>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 800438e:	2300      	movs	r3, #0
 8004390:	60bb      	str	r3, [r7, #8]
 8004392:	4b7d      	ldr	r3, [pc, #500]	; (8004588 <HAL_RCC_OscConfig+0x470>)
 8004394:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004396:	4a7c      	ldr	r2, [pc, #496]	; (8004588 <HAL_RCC_OscConfig+0x470>)
 8004398:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800439c:	6413      	str	r3, [r2, #64]	; 0x40
 800439e:	4b7a      	ldr	r3, [pc, #488]	; (8004588 <HAL_RCC_OscConfig+0x470>)
 80043a0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80043a2:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80043a6:	60bb      	str	r3, [r7, #8]
 80043a8:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 80043aa:	2301      	movs	r3, #1
 80043ac:	75fb      	strb	r3, [r7, #23]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80043ae:	4b77      	ldr	r3, [pc, #476]	; (800458c <HAL_RCC_OscConfig+0x474>)
 80043b0:	681b      	ldr	r3, [r3, #0]
 80043b2:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80043b6:	2b00      	cmp	r3, #0
 80043b8:	d118      	bne.n	80043ec <HAL_RCC_OscConfig+0x2d4>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 80043ba:	4b74      	ldr	r3, [pc, #464]	; (800458c <HAL_RCC_OscConfig+0x474>)
 80043bc:	681b      	ldr	r3, [r3, #0]
 80043be:	4a73      	ldr	r2, [pc, #460]	; (800458c <HAL_RCC_OscConfig+0x474>)
 80043c0:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80043c4:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 80043c6:	f7fd fb99 	bl	8001afc <HAL_GetTick>
 80043ca:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80043cc:	e008      	b.n	80043e0 <HAL_RCC_OscConfig+0x2c8>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80043ce:	f7fd fb95 	bl	8001afc <HAL_GetTick>
 80043d2:	4602      	mov	r2, r0
 80043d4:	693b      	ldr	r3, [r7, #16]
 80043d6:	1ad3      	subs	r3, r2, r3
 80043d8:	2b02      	cmp	r3, #2
 80043da:	d901      	bls.n	80043e0 <HAL_RCC_OscConfig+0x2c8>
        {
          return HAL_TIMEOUT;
 80043dc:	2303      	movs	r3, #3
 80043de:	e10c      	b.n	80045fa <HAL_RCC_OscConfig+0x4e2>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80043e0:	4b6a      	ldr	r3, [pc, #424]	; (800458c <HAL_RCC_OscConfig+0x474>)
 80043e2:	681b      	ldr	r3, [r3, #0]
 80043e4:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80043e8:	2b00      	cmp	r3, #0
 80043ea:	d0f0      	beq.n	80043ce <HAL_RCC_OscConfig+0x2b6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 80043ec:	687b      	ldr	r3, [r7, #4]
 80043ee:	689b      	ldr	r3, [r3, #8]
 80043f0:	2b01      	cmp	r3, #1
 80043f2:	d106      	bne.n	8004402 <HAL_RCC_OscConfig+0x2ea>
 80043f4:	4b64      	ldr	r3, [pc, #400]	; (8004588 <HAL_RCC_OscConfig+0x470>)
 80043f6:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80043f8:	4a63      	ldr	r2, [pc, #396]	; (8004588 <HAL_RCC_OscConfig+0x470>)
 80043fa:	f043 0301 	orr.w	r3, r3, #1
 80043fe:	6713      	str	r3, [r2, #112]	; 0x70
 8004400:	e01c      	b.n	800443c <HAL_RCC_OscConfig+0x324>
 8004402:	687b      	ldr	r3, [r7, #4]
 8004404:	689b      	ldr	r3, [r3, #8]
 8004406:	2b05      	cmp	r3, #5
 8004408:	d10c      	bne.n	8004424 <HAL_RCC_OscConfig+0x30c>
 800440a:	4b5f      	ldr	r3, [pc, #380]	; (8004588 <HAL_RCC_OscConfig+0x470>)
 800440c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800440e:	4a5e      	ldr	r2, [pc, #376]	; (8004588 <HAL_RCC_OscConfig+0x470>)
 8004410:	f043 0304 	orr.w	r3, r3, #4
 8004414:	6713      	str	r3, [r2, #112]	; 0x70
 8004416:	4b5c      	ldr	r3, [pc, #368]	; (8004588 <HAL_RCC_OscConfig+0x470>)
 8004418:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800441a:	4a5b      	ldr	r2, [pc, #364]	; (8004588 <HAL_RCC_OscConfig+0x470>)
 800441c:	f043 0301 	orr.w	r3, r3, #1
 8004420:	6713      	str	r3, [r2, #112]	; 0x70
 8004422:	e00b      	b.n	800443c <HAL_RCC_OscConfig+0x324>
 8004424:	4b58      	ldr	r3, [pc, #352]	; (8004588 <HAL_RCC_OscConfig+0x470>)
 8004426:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004428:	4a57      	ldr	r2, [pc, #348]	; (8004588 <HAL_RCC_OscConfig+0x470>)
 800442a:	f023 0301 	bic.w	r3, r3, #1
 800442e:	6713      	str	r3, [r2, #112]	; 0x70
 8004430:	4b55      	ldr	r3, [pc, #340]	; (8004588 <HAL_RCC_OscConfig+0x470>)
 8004432:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004434:	4a54      	ldr	r2, [pc, #336]	; (8004588 <HAL_RCC_OscConfig+0x470>)
 8004436:	f023 0304 	bic.w	r3, r3, #4
 800443a:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 800443c:	687b      	ldr	r3, [r7, #4]
 800443e:	689b      	ldr	r3, [r3, #8]
 8004440:	2b00      	cmp	r3, #0
 8004442:	d015      	beq.n	8004470 <HAL_RCC_OscConfig+0x358>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8004444:	f7fd fb5a 	bl	8001afc <HAL_GetTick>
 8004448:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800444a:	e00a      	b.n	8004462 <HAL_RCC_OscConfig+0x34a>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 800444c:	f7fd fb56 	bl	8001afc <HAL_GetTick>
 8004450:	4602      	mov	r2, r0
 8004452:	693b      	ldr	r3, [r7, #16]
 8004454:	1ad3      	subs	r3, r2, r3
 8004456:	f241 3288 	movw	r2, #5000	; 0x1388
 800445a:	4293      	cmp	r3, r2
 800445c:	d901      	bls.n	8004462 <HAL_RCC_OscConfig+0x34a>
        {
          return HAL_TIMEOUT;
 800445e:	2303      	movs	r3, #3
 8004460:	e0cb      	b.n	80045fa <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8004462:	4b49      	ldr	r3, [pc, #292]	; (8004588 <HAL_RCC_OscConfig+0x470>)
 8004464:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004466:	f003 0302 	and.w	r3, r3, #2
 800446a:	2b00      	cmp	r3, #0
 800446c:	d0ee      	beq.n	800444c <HAL_RCC_OscConfig+0x334>
 800446e:	e014      	b.n	800449a <HAL_RCC_OscConfig+0x382>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8004470:	f7fd fb44 	bl	8001afc <HAL_GetTick>
 8004474:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8004476:	e00a      	b.n	800448e <HAL_RCC_OscConfig+0x376>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8004478:	f7fd fb40 	bl	8001afc <HAL_GetTick>
 800447c:	4602      	mov	r2, r0
 800447e:	693b      	ldr	r3, [r7, #16]
 8004480:	1ad3      	subs	r3, r2, r3
 8004482:	f241 3288 	movw	r2, #5000	; 0x1388
 8004486:	4293      	cmp	r3, r2
 8004488:	d901      	bls.n	800448e <HAL_RCC_OscConfig+0x376>
        {
          return HAL_TIMEOUT;
 800448a:	2303      	movs	r3, #3
 800448c:	e0b5      	b.n	80045fa <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 800448e:	4b3e      	ldr	r3, [pc, #248]	; (8004588 <HAL_RCC_OscConfig+0x470>)
 8004490:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004492:	f003 0302 	and.w	r3, r3, #2
 8004496:	2b00      	cmp	r3, #0
 8004498:	d1ee      	bne.n	8004478 <HAL_RCC_OscConfig+0x360>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 800449a:	7dfb      	ldrb	r3, [r7, #23]
 800449c:	2b01      	cmp	r3, #1
 800449e:	d105      	bne.n	80044ac <HAL_RCC_OscConfig+0x394>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 80044a0:	4b39      	ldr	r3, [pc, #228]	; (8004588 <HAL_RCC_OscConfig+0x470>)
 80044a2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80044a4:	4a38      	ldr	r2, [pc, #224]	; (8004588 <HAL_RCC_OscConfig+0x470>)
 80044a6:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 80044aa:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 80044ac:	687b      	ldr	r3, [r7, #4]
 80044ae:	699b      	ldr	r3, [r3, #24]
 80044b0:	2b00      	cmp	r3, #0
 80044b2:	f000 80a1 	beq.w	80045f8 <HAL_RCC_OscConfig+0x4e0>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 80044b6:	4b34      	ldr	r3, [pc, #208]	; (8004588 <HAL_RCC_OscConfig+0x470>)
 80044b8:	689b      	ldr	r3, [r3, #8]
 80044ba:	f003 030c 	and.w	r3, r3, #12
 80044be:	2b08      	cmp	r3, #8
 80044c0:	d05c      	beq.n	800457c <HAL_RCC_OscConfig+0x464>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 80044c2:	687b      	ldr	r3, [r7, #4]
 80044c4:	699b      	ldr	r3, [r3, #24]
 80044c6:	2b02      	cmp	r3, #2
 80044c8:	d141      	bne.n	800454e <HAL_RCC_OscConfig+0x436>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80044ca:	4b31      	ldr	r3, [pc, #196]	; (8004590 <HAL_RCC_OscConfig+0x478>)
 80044cc:	2200      	movs	r2, #0
 80044ce:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80044d0:	f7fd fb14 	bl	8001afc <HAL_GetTick>
 80044d4:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80044d6:	e008      	b.n	80044ea <HAL_RCC_OscConfig+0x3d2>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80044d8:	f7fd fb10 	bl	8001afc <HAL_GetTick>
 80044dc:	4602      	mov	r2, r0
 80044de:	693b      	ldr	r3, [r7, #16]
 80044e0:	1ad3      	subs	r3, r2, r3
 80044e2:	2b02      	cmp	r3, #2
 80044e4:	d901      	bls.n	80044ea <HAL_RCC_OscConfig+0x3d2>
          {
            return HAL_TIMEOUT;
 80044e6:	2303      	movs	r3, #3
 80044e8:	e087      	b.n	80045fa <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80044ea:	4b27      	ldr	r3, [pc, #156]	; (8004588 <HAL_RCC_OscConfig+0x470>)
 80044ec:	681b      	ldr	r3, [r3, #0]
 80044ee:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80044f2:	2b00      	cmp	r3, #0
 80044f4:	d1f0      	bne.n	80044d8 <HAL_RCC_OscConfig+0x3c0>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 80044f6:	687b      	ldr	r3, [r7, #4]
 80044f8:	69da      	ldr	r2, [r3, #28]
 80044fa:	687b      	ldr	r3, [r7, #4]
 80044fc:	6a1b      	ldr	r3, [r3, #32]
 80044fe:	431a      	orrs	r2, r3
 8004500:	687b      	ldr	r3, [r7, #4]
 8004502:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004504:	019b      	lsls	r3, r3, #6
 8004506:	431a      	orrs	r2, r3
 8004508:	687b      	ldr	r3, [r7, #4]
 800450a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800450c:	085b      	lsrs	r3, r3, #1
 800450e:	3b01      	subs	r3, #1
 8004510:	041b      	lsls	r3, r3, #16
 8004512:	431a      	orrs	r2, r3
 8004514:	687b      	ldr	r3, [r7, #4]
 8004516:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004518:	061b      	lsls	r3, r3, #24
 800451a:	491b      	ldr	r1, [pc, #108]	; (8004588 <HAL_RCC_OscConfig+0x470>)
 800451c:	4313      	orrs	r3, r2
 800451e:	604b      	str	r3, [r1, #4]
                                 RCC_OscInitStruct->PLL.PLLM                                                 | \
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)             | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos) | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8004520:	4b1b      	ldr	r3, [pc, #108]	; (8004590 <HAL_RCC_OscConfig+0x478>)
 8004522:	2201      	movs	r2, #1
 8004524:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8004526:	f7fd fae9 	bl	8001afc <HAL_GetTick>
 800452a:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800452c:	e008      	b.n	8004540 <HAL_RCC_OscConfig+0x428>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 800452e:	f7fd fae5 	bl	8001afc <HAL_GetTick>
 8004532:	4602      	mov	r2, r0
 8004534:	693b      	ldr	r3, [r7, #16]
 8004536:	1ad3      	subs	r3, r2, r3
 8004538:	2b02      	cmp	r3, #2
 800453a:	d901      	bls.n	8004540 <HAL_RCC_OscConfig+0x428>
          {
            return HAL_TIMEOUT;
 800453c:	2303      	movs	r3, #3
 800453e:	e05c      	b.n	80045fa <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8004540:	4b11      	ldr	r3, [pc, #68]	; (8004588 <HAL_RCC_OscConfig+0x470>)
 8004542:	681b      	ldr	r3, [r3, #0]
 8004544:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8004548:	2b00      	cmp	r3, #0
 800454a:	d0f0      	beq.n	800452e <HAL_RCC_OscConfig+0x416>
 800454c:	e054      	b.n	80045f8 <HAL_RCC_OscConfig+0x4e0>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800454e:	4b10      	ldr	r3, [pc, #64]	; (8004590 <HAL_RCC_OscConfig+0x478>)
 8004550:	2200      	movs	r2, #0
 8004552:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8004554:	f7fd fad2 	bl	8001afc <HAL_GetTick>
 8004558:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800455a:	e008      	b.n	800456e <HAL_RCC_OscConfig+0x456>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 800455c:	f7fd face 	bl	8001afc <HAL_GetTick>
 8004560:	4602      	mov	r2, r0
 8004562:	693b      	ldr	r3, [r7, #16]
 8004564:	1ad3      	subs	r3, r2, r3
 8004566:	2b02      	cmp	r3, #2
 8004568:	d901      	bls.n	800456e <HAL_RCC_OscConfig+0x456>
          {
            return HAL_TIMEOUT;
 800456a:	2303      	movs	r3, #3
 800456c:	e045      	b.n	80045fa <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800456e:	4b06      	ldr	r3, [pc, #24]	; (8004588 <HAL_RCC_OscConfig+0x470>)
 8004570:	681b      	ldr	r3, [r3, #0]
 8004572:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8004576:	2b00      	cmp	r3, #0
 8004578:	d1f0      	bne.n	800455c <HAL_RCC_OscConfig+0x444>
 800457a:	e03d      	b.n	80045f8 <HAL_RCC_OscConfig+0x4e0>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 800457c:	687b      	ldr	r3, [r7, #4]
 800457e:	699b      	ldr	r3, [r3, #24]
 8004580:	2b01      	cmp	r3, #1
 8004582:	d107      	bne.n	8004594 <HAL_RCC_OscConfig+0x47c>
      {
        return HAL_ERROR;
 8004584:	2301      	movs	r3, #1
 8004586:	e038      	b.n	80045fa <HAL_RCC_OscConfig+0x4e2>
 8004588:	40023800 	.word	0x40023800
 800458c:	40007000 	.word	0x40007000
 8004590:	42470060 	.word	0x42470060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 8004594:	4b1b      	ldr	r3, [pc, #108]	; (8004604 <HAL_RCC_OscConfig+0x4ec>)
 8004596:	685b      	ldr	r3, [r3, #4]
 8004598:	60fb      	str	r3, [r7, #12]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
#else
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 800459a:	687b      	ldr	r3, [r7, #4]
 800459c:	699b      	ldr	r3, [r3, #24]
 800459e:	2b01      	cmp	r3, #1
 80045a0:	d028      	beq.n	80045f4 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80045a2:	68fb      	ldr	r3, [r7, #12]
 80045a4:	f403 0280 	and.w	r2, r3, #4194304	; 0x400000
 80045a8:	687b      	ldr	r3, [r7, #4]
 80045aa:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 80045ac:	429a      	cmp	r2, r3
 80045ae:	d121      	bne.n	80045f4 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 80045b0:	68fb      	ldr	r3, [r7, #12]
 80045b2:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 80045b6:	687b      	ldr	r3, [r7, #4]
 80045b8:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80045ba:	429a      	cmp	r2, r3
 80045bc:	d11a      	bne.n	80045f4 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 80045be:	68fa      	ldr	r2, [r7, #12]
 80045c0:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 80045c4:	4013      	ands	r3, r2
 80045c6:	687a      	ldr	r2, [r7, #4]
 80045c8:	6a52      	ldr	r2, [r2, #36]	; 0x24
 80045ca:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 80045cc:	4293      	cmp	r3, r2
 80045ce:	d111      	bne.n	80045f4 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 80045d0:	68fb      	ldr	r3, [r7, #12]
 80045d2:	f403 3240 	and.w	r2, r3, #196608	; 0x30000
 80045d6:	687b      	ldr	r3, [r7, #4]
 80045d8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80045da:	085b      	lsrs	r3, r3, #1
 80045dc:	3b01      	subs	r3, #1
 80045de:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 80045e0:	429a      	cmp	r2, r3
 80045e2:	d107      	bne.n	80045f4 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
 80045e4:	68fb      	ldr	r3, [r7, #12]
 80045e6:	f003 6270 	and.w	r2, r3, #251658240	; 0xf000000
 80045ea:	687b      	ldr	r3, [r7, #4]
 80045ec:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80045ee:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 80045f0:	429a      	cmp	r2, r3
 80045f2:	d001      	beq.n	80045f8 <HAL_RCC_OscConfig+0x4e0>
#endif
        {
          return HAL_ERROR;
 80045f4:	2301      	movs	r3, #1
 80045f6:	e000      	b.n	80045fa <HAL_RCC_OscConfig+0x4e2>
        }
      }
    }
  }
  return HAL_OK;
 80045f8:	2300      	movs	r3, #0
}
 80045fa:	4618      	mov	r0, r3
 80045fc:	3718      	adds	r7, #24
 80045fe:	46bd      	mov	sp, r7
 8004600:	bd80      	pop	{r7, pc}
 8004602:	bf00      	nop
 8004604:	40023800 	.word	0x40023800

08004608 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8004608:	b580      	push	{r7, lr}
 800460a:	b084      	sub	sp, #16
 800460c:	af00      	add	r7, sp, #0
 800460e:	6078      	str	r0, [r7, #4]
 8004610:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8004612:	687b      	ldr	r3, [r7, #4]
 8004614:	2b00      	cmp	r3, #0
 8004616:	d101      	bne.n	800461c <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8004618:	2301      	movs	r3, #1
 800461a:	e0cc      	b.n	80047b6 <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 800461c:	4b68      	ldr	r3, [pc, #416]	; (80047c0 <HAL_RCC_ClockConfig+0x1b8>)
 800461e:	681b      	ldr	r3, [r3, #0]
 8004620:	f003 030f 	and.w	r3, r3, #15
 8004624:	683a      	ldr	r2, [r7, #0]
 8004626:	429a      	cmp	r2, r3
 8004628:	d90c      	bls.n	8004644 <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800462a:	4b65      	ldr	r3, [pc, #404]	; (80047c0 <HAL_RCC_ClockConfig+0x1b8>)
 800462c:	683a      	ldr	r2, [r7, #0]
 800462e:	b2d2      	uxtb	r2, r2
 8004630:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8004632:	4b63      	ldr	r3, [pc, #396]	; (80047c0 <HAL_RCC_ClockConfig+0x1b8>)
 8004634:	681b      	ldr	r3, [r3, #0]
 8004636:	f003 030f 	and.w	r3, r3, #15
 800463a:	683a      	ldr	r2, [r7, #0]
 800463c:	429a      	cmp	r2, r3
 800463e:	d001      	beq.n	8004644 <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 8004640:	2301      	movs	r3, #1
 8004642:	e0b8      	b.n	80047b6 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8004644:	687b      	ldr	r3, [r7, #4]
 8004646:	681b      	ldr	r3, [r3, #0]
 8004648:	f003 0302 	and.w	r3, r3, #2
 800464c:	2b00      	cmp	r3, #0
 800464e:	d020      	beq.n	8004692 <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8004650:	687b      	ldr	r3, [r7, #4]
 8004652:	681b      	ldr	r3, [r3, #0]
 8004654:	f003 0304 	and.w	r3, r3, #4
 8004658:	2b00      	cmp	r3, #0
 800465a:	d005      	beq.n	8004668 <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 800465c:	4b59      	ldr	r3, [pc, #356]	; (80047c4 <HAL_RCC_ClockConfig+0x1bc>)
 800465e:	689b      	ldr	r3, [r3, #8]
 8004660:	4a58      	ldr	r2, [pc, #352]	; (80047c4 <HAL_RCC_ClockConfig+0x1bc>)
 8004662:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 8004666:	6093      	str	r3, [r2, #8]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8004668:	687b      	ldr	r3, [r7, #4]
 800466a:	681b      	ldr	r3, [r3, #0]
 800466c:	f003 0308 	and.w	r3, r3, #8
 8004670:	2b00      	cmp	r3, #0
 8004672:	d005      	beq.n	8004680 <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8004674:	4b53      	ldr	r3, [pc, #332]	; (80047c4 <HAL_RCC_ClockConfig+0x1bc>)
 8004676:	689b      	ldr	r3, [r3, #8]
 8004678:	4a52      	ldr	r2, [pc, #328]	; (80047c4 <HAL_RCC_ClockConfig+0x1bc>)
 800467a:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 800467e:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8004680:	4b50      	ldr	r3, [pc, #320]	; (80047c4 <HAL_RCC_ClockConfig+0x1bc>)
 8004682:	689b      	ldr	r3, [r3, #8]
 8004684:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8004688:	687b      	ldr	r3, [r7, #4]
 800468a:	689b      	ldr	r3, [r3, #8]
 800468c:	494d      	ldr	r1, [pc, #308]	; (80047c4 <HAL_RCC_ClockConfig+0x1bc>)
 800468e:	4313      	orrs	r3, r2
 8004690:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8004692:	687b      	ldr	r3, [r7, #4]
 8004694:	681b      	ldr	r3, [r3, #0]
 8004696:	f003 0301 	and.w	r3, r3, #1
 800469a:	2b00      	cmp	r3, #0
 800469c:	d044      	beq.n	8004728 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 800469e:	687b      	ldr	r3, [r7, #4]
 80046a0:	685b      	ldr	r3, [r3, #4]
 80046a2:	2b01      	cmp	r3, #1
 80046a4:	d107      	bne.n	80046b6 <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80046a6:	4b47      	ldr	r3, [pc, #284]	; (80047c4 <HAL_RCC_ClockConfig+0x1bc>)
 80046a8:	681b      	ldr	r3, [r3, #0]
 80046aa:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80046ae:	2b00      	cmp	r3, #0
 80046b0:	d119      	bne.n	80046e6 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80046b2:	2301      	movs	r3, #1
 80046b4:	e07f      	b.n	80047b6 <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 80046b6:	687b      	ldr	r3, [r7, #4]
 80046b8:	685b      	ldr	r3, [r3, #4]
 80046ba:	2b02      	cmp	r3, #2
 80046bc:	d003      	beq.n	80046c6 <HAL_RCC_ClockConfig+0xbe>
            (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 80046be:	687b      	ldr	r3, [r7, #4]
 80046c0:	685b      	ldr	r3, [r3, #4]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 80046c2:	2b03      	cmp	r3, #3
 80046c4:	d107      	bne.n	80046d6 <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80046c6:	4b3f      	ldr	r3, [pc, #252]	; (80047c4 <HAL_RCC_ClockConfig+0x1bc>)
 80046c8:	681b      	ldr	r3, [r3, #0]
 80046ca:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80046ce:	2b00      	cmp	r3, #0
 80046d0:	d109      	bne.n	80046e6 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80046d2:	2301      	movs	r3, #1
 80046d4:	e06f      	b.n	80047b6 <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80046d6:	4b3b      	ldr	r3, [pc, #236]	; (80047c4 <HAL_RCC_ClockConfig+0x1bc>)
 80046d8:	681b      	ldr	r3, [r3, #0]
 80046da:	f003 0302 	and.w	r3, r3, #2
 80046de:	2b00      	cmp	r3, #0
 80046e0:	d101      	bne.n	80046e6 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80046e2:	2301      	movs	r3, #1
 80046e4:	e067      	b.n	80047b6 <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 80046e6:	4b37      	ldr	r3, [pc, #220]	; (80047c4 <HAL_RCC_ClockConfig+0x1bc>)
 80046e8:	689b      	ldr	r3, [r3, #8]
 80046ea:	f023 0203 	bic.w	r2, r3, #3
 80046ee:	687b      	ldr	r3, [r7, #4]
 80046f0:	685b      	ldr	r3, [r3, #4]
 80046f2:	4934      	ldr	r1, [pc, #208]	; (80047c4 <HAL_RCC_ClockConfig+0x1bc>)
 80046f4:	4313      	orrs	r3, r2
 80046f6:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 80046f8:	f7fd fa00 	bl	8001afc <HAL_GetTick>
 80046fc:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80046fe:	e00a      	b.n	8004716 <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8004700:	f7fd f9fc 	bl	8001afc <HAL_GetTick>
 8004704:	4602      	mov	r2, r0
 8004706:	68fb      	ldr	r3, [r7, #12]
 8004708:	1ad3      	subs	r3, r2, r3
 800470a:	f241 3288 	movw	r2, #5000	; 0x1388
 800470e:	4293      	cmp	r3, r2
 8004710:	d901      	bls.n	8004716 <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 8004712:	2303      	movs	r3, #3
 8004714:	e04f      	b.n	80047b6 <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8004716:	4b2b      	ldr	r3, [pc, #172]	; (80047c4 <HAL_RCC_ClockConfig+0x1bc>)
 8004718:	689b      	ldr	r3, [r3, #8]
 800471a:	f003 020c 	and.w	r2, r3, #12
 800471e:	687b      	ldr	r3, [r7, #4]
 8004720:	685b      	ldr	r3, [r3, #4]
 8004722:	009b      	lsls	r3, r3, #2
 8004724:	429a      	cmp	r2, r3
 8004726:	d1eb      	bne.n	8004700 <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8004728:	4b25      	ldr	r3, [pc, #148]	; (80047c0 <HAL_RCC_ClockConfig+0x1b8>)
 800472a:	681b      	ldr	r3, [r3, #0]
 800472c:	f003 030f 	and.w	r3, r3, #15
 8004730:	683a      	ldr	r2, [r7, #0]
 8004732:	429a      	cmp	r2, r3
 8004734:	d20c      	bcs.n	8004750 <HAL_RCC_ClockConfig+0x148>
  {
     /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8004736:	4b22      	ldr	r3, [pc, #136]	; (80047c0 <HAL_RCC_ClockConfig+0x1b8>)
 8004738:	683a      	ldr	r2, [r7, #0]
 800473a:	b2d2      	uxtb	r2, r2
 800473c:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 800473e:	4b20      	ldr	r3, [pc, #128]	; (80047c0 <HAL_RCC_ClockConfig+0x1b8>)
 8004740:	681b      	ldr	r3, [r3, #0]
 8004742:	f003 030f 	and.w	r3, r3, #15
 8004746:	683a      	ldr	r2, [r7, #0]
 8004748:	429a      	cmp	r2, r3
 800474a:	d001      	beq.n	8004750 <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 800474c:	2301      	movs	r3, #1
 800474e:	e032      	b.n	80047b6 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8004750:	687b      	ldr	r3, [r7, #4]
 8004752:	681b      	ldr	r3, [r3, #0]
 8004754:	f003 0304 	and.w	r3, r3, #4
 8004758:	2b00      	cmp	r3, #0
 800475a:	d008      	beq.n	800476e <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 800475c:	4b19      	ldr	r3, [pc, #100]	; (80047c4 <HAL_RCC_ClockConfig+0x1bc>)
 800475e:	689b      	ldr	r3, [r3, #8]
 8004760:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 8004764:	687b      	ldr	r3, [r7, #4]
 8004766:	68db      	ldr	r3, [r3, #12]
 8004768:	4916      	ldr	r1, [pc, #88]	; (80047c4 <HAL_RCC_ClockConfig+0x1bc>)
 800476a:	4313      	orrs	r3, r2
 800476c:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800476e:	687b      	ldr	r3, [r7, #4]
 8004770:	681b      	ldr	r3, [r3, #0]
 8004772:	f003 0308 	and.w	r3, r3, #8
 8004776:	2b00      	cmp	r3, #0
 8004778:	d009      	beq.n	800478e <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 800477a:	4b12      	ldr	r3, [pc, #72]	; (80047c4 <HAL_RCC_ClockConfig+0x1bc>)
 800477c:	689b      	ldr	r3, [r3, #8]
 800477e:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 8004782:	687b      	ldr	r3, [r7, #4]
 8004784:	691b      	ldr	r3, [r3, #16]
 8004786:	00db      	lsls	r3, r3, #3
 8004788:	490e      	ldr	r1, [pc, #56]	; (80047c4 <HAL_RCC_ClockConfig+0x1bc>)
 800478a:	4313      	orrs	r3, r2
 800478c:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 800478e:	f000 f821 	bl	80047d4 <HAL_RCC_GetSysClockFreq>
 8004792:	4602      	mov	r2, r0
 8004794:	4b0b      	ldr	r3, [pc, #44]	; (80047c4 <HAL_RCC_ClockConfig+0x1bc>)
 8004796:	689b      	ldr	r3, [r3, #8]
 8004798:	091b      	lsrs	r3, r3, #4
 800479a:	f003 030f 	and.w	r3, r3, #15
 800479e:	490a      	ldr	r1, [pc, #40]	; (80047c8 <HAL_RCC_ClockConfig+0x1c0>)
 80047a0:	5ccb      	ldrb	r3, [r1, r3]
 80047a2:	fa22 f303 	lsr.w	r3, r2, r3
 80047a6:	4a09      	ldr	r2, [pc, #36]	; (80047cc <HAL_RCC_ClockConfig+0x1c4>)
 80047a8:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick (uwTickPrio);
 80047aa:	4b09      	ldr	r3, [pc, #36]	; (80047d0 <HAL_RCC_ClockConfig+0x1c8>)
 80047ac:	681b      	ldr	r3, [r3, #0]
 80047ae:	4618      	mov	r0, r3
 80047b0:	f7fc fe36 	bl	8001420 <HAL_InitTick>

  return HAL_OK;
 80047b4:	2300      	movs	r3, #0
}
 80047b6:	4618      	mov	r0, r3
 80047b8:	3710      	adds	r7, #16
 80047ba:	46bd      	mov	sp, r7
 80047bc:	bd80      	pop	{r7, pc}
 80047be:	bf00      	nop
 80047c0:	40023c00 	.word	0x40023c00
 80047c4:	40023800 	.word	0x40023800
 80047c8:	0800aec0 	.word	0x0800aec0
 80047cc:	20000000 	.word	0x20000000
 80047d0:	20000004 	.word	0x20000004

080047d4 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 80047d4:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 80047d8:	b094      	sub	sp, #80	; 0x50
 80047da:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U, pllvco = 0U, pllp = 0U;
 80047dc:	2300      	movs	r3, #0
 80047de:	647b      	str	r3, [r7, #68]	; 0x44
 80047e0:	2300      	movs	r3, #0
 80047e2:	64fb      	str	r3, [r7, #76]	; 0x4c
 80047e4:	2300      	movs	r3, #0
 80047e6:	643b      	str	r3, [r7, #64]	; 0x40
  uint32_t sysclockfreq = 0U;
 80047e8:	2300      	movs	r3, #0
 80047ea:	64bb      	str	r3, [r7, #72]	; 0x48

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 80047ec:	4b79      	ldr	r3, [pc, #484]	; (80049d4 <HAL_RCC_GetSysClockFreq+0x200>)
 80047ee:	689b      	ldr	r3, [r3, #8]
 80047f0:	f003 030c 	and.w	r3, r3, #12
 80047f4:	2b08      	cmp	r3, #8
 80047f6:	d00d      	beq.n	8004814 <HAL_RCC_GetSysClockFreq+0x40>
 80047f8:	2b08      	cmp	r3, #8
 80047fa:	f200 80e1 	bhi.w	80049c0 <HAL_RCC_GetSysClockFreq+0x1ec>
 80047fe:	2b00      	cmp	r3, #0
 8004800:	d002      	beq.n	8004808 <HAL_RCC_GetSysClockFreq+0x34>
 8004802:	2b04      	cmp	r3, #4
 8004804:	d003      	beq.n	800480e <HAL_RCC_GetSysClockFreq+0x3a>
 8004806:	e0db      	b.n	80049c0 <HAL_RCC_GetSysClockFreq+0x1ec>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 8004808:	4b73      	ldr	r3, [pc, #460]	; (80049d8 <HAL_RCC_GetSysClockFreq+0x204>)
 800480a:	64bb      	str	r3, [r7, #72]	; 0x48
       break;
 800480c:	e0db      	b.n	80049c6 <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 800480e:	4b73      	ldr	r3, [pc, #460]	; (80049dc <HAL_RCC_GetSysClockFreq+0x208>)
 8004810:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 8004812:	e0d8      	b.n	80049c6 <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8004814:	4b6f      	ldr	r3, [pc, #444]	; (80049d4 <HAL_RCC_GetSysClockFreq+0x200>)
 8004816:	685b      	ldr	r3, [r3, #4]
 8004818:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 800481c:	647b      	str	r3, [r7, #68]	; 0x44
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 800481e:	4b6d      	ldr	r3, [pc, #436]	; (80049d4 <HAL_RCC_GetSysClockFreq+0x200>)
 8004820:	685b      	ldr	r3, [r3, #4]
 8004822:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8004826:	2b00      	cmp	r3, #0
 8004828:	d063      	beq.n	80048f2 <HAL_RCC_GetSysClockFreq+0x11e>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 800482a:	4b6a      	ldr	r3, [pc, #424]	; (80049d4 <HAL_RCC_GetSysClockFreq+0x200>)
 800482c:	685b      	ldr	r3, [r3, #4]
 800482e:	099b      	lsrs	r3, r3, #6
 8004830:	2200      	movs	r2, #0
 8004832:	63bb      	str	r3, [r7, #56]	; 0x38
 8004834:	63fa      	str	r2, [r7, #60]	; 0x3c
 8004836:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004838:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800483c:	633b      	str	r3, [r7, #48]	; 0x30
 800483e:	2300      	movs	r3, #0
 8004840:	637b      	str	r3, [r7, #52]	; 0x34
 8004842:	e9d7 450c 	ldrd	r4, r5, [r7, #48]	; 0x30
 8004846:	4622      	mov	r2, r4
 8004848:	462b      	mov	r3, r5
 800484a:	f04f 0000 	mov.w	r0, #0
 800484e:	f04f 0100 	mov.w	r1, #0
 8004852:	0159      	lsls	r1, r3, #5
 8004854:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8004858:	0150      	lsls	r0, r2, #5
 800485a:	4602      	mov	r2, r0
 800485c:	460b      	mov	r3, r1
 800485e:	4621      	mov	r1, r4
 8004860:	1a51      	subs	r1, r2, r1
 8004862:	6139      	str	r1, [r7, #16]
 8004864:	4629      	mov	r1, r5
 8004866:	eb63 0301 	sbc.w	r3, r3, r1
 800486a:	617b      	str	r3, [r7, #20]
 800486c:	f04f 0200 	mov.w	r2, #0
 8004870:	f04f 0300 	mov.w	r3, #0
 8004874:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 8004878:	4659      	mov	r1, fp
 800487a:	018b      	lsls	r3, r1, #6
 800487c:	4651      	mov	r1, sl
 800487e:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 8004882:	4651      	mov	r1, sl
 8004884:	018a      	lsls	r2, r1, #6
 8004886:	4651      	mov	r1, sl
 8004888:	ebb2 0801 	subs.w	r8, r2, r1
 800488c:	4659      	mov	r1, fp
 800488e:	eb63 0901 	sbc.w	r9, r3, r1
 8004892:	f04f 0200 	mov.w	r2, #0
 8004896:	f04f 0300 	mov.w	r3, #0
 800489a:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 800489e:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 80048a2:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 80048a6:	4690      	mov	r8, r2
 80048a8:	4699      	mov	r9, r3
 80048aa:	4623      	mov	r3, r4
 80048ac:	eb18 0303 	adds.w	r3, r8, r3
 80048b0:	60bb      	str	r3, [r7, #8]
 80048b2:	462b      	mov	r3, r5
 80048b4:	eb49 0303 	adc.w	r3, r9, r3
 80048b8:	60fb      	str	r3, [r7, #12]
 80048ba:	f04f 0200 	mov.w	r2, #0
 80048be:	f04f 0300 	mov.w	r3, #0
 80048c2:	e9d7 4502 	ldrd	r4, r5, [r7, #8]
 80048c6:	4629      	mov	r1, r5
 80048c8:	024b      	lsls	r3, r1, #9
 80048ca:	4621      	mov	r1, r4
 80048cc:	ea43 53d1 	orr.w	r3, r3, r1, lsr #23
 80048d0:	4621      	mov	r1, r4
 80048d2:	024a      	lsls	r2, r1, #9
 80048d4:	4610      	mov	r0, r2
 80048d6:	4619      	mov	r1, r3
 80048d8:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80048da:	2200      	movs	r2, #0
 80048dc:	62bb      	str	r3, [r7, #40]	; 0x28
 80048de:	62fa      	str	r2, [r7, #44]	; 0x2c
 80048e0:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 80048e4:	f7fb fcd4 	bl	8000290 <__aeabi_uldivmod>
 80048e8:	4602      	mov	r2, r0
 80048ea:	460b      	mov	r3, r1
 80048ec:	4613      	mov	r3, r2
 80048ee:	64fb      	str	r3, [r7, #76]	; 0x4c
 80048f0:	e058      	b.n	80049a4 <HAL_RCC_GetSysClockFreq+0x1d0>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 80048f2:	4b38      	ldr	r3, [pc, #224]	; (80049d4 <HAL_RCC_GetSysClockFreq+0x200>)
 80048f4:	685b      	ldr	r3, [r3, #4]
 80048f6:	099b      	lsrs	r3, r3, #6
 80048f8:	2200      	movs	r2, #0
 80048fa:	4618      	mov	r0, r3
 80048fc:	4611      	mov	r1, r2
 80048fe:	f3c0 0308 	ubfx	r3, r0, #0, #9
 8004902:	623b      	str	r3, [r7, #32]
 8004904:	2300      	movs	r3, #0
 8004906:	627b      	str	r3, [r7, #36]	; 0x24
 8004908:	e9d7 8908 	ldrd	r8, r9, [r7, #32]
 800490c:	4642      	mov	r2, r8
 800490e:	464b      	mov	r3, r9
 8004910:	f04f 0000 	mov.w	r0, #0
 8004914:	f04f 0100 	mov.w	r1, #0
 8004918:	0159      	lsls	r1, r3, #5
 800491a:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 800491e:	0150      	lsls	r0, r2, #5
 8004920:	4602      	mov	r2, r0
 8004922:	460b      	mov	r3, r1
 8004924:	4641      	mov	r1, r8
 8004926:	ebb2 0a01 	subs.w	sl, r2, r1
 800492a:	4649      	mov	r1, r9
 800492c:	eb63 0b01 	sbc.w	fp, r3, r1
 8004930:	f04f 0200 	mov.w	r2, #0
 8004934:	f04f 0300 	mov.w	r3, #0
 8004938:	ea4f 138b 	mov.w	r3, fp, lsl #6
 800493c:	ea43 639a 	orr.w	r3, r3, sl, lsr #26
 8004940:	ea4f 128a 	mov.w	r2, sl, lsl #6
 8004944:	ebb2 040a 	subs.w	r4, r2, sl
 8004948:	eb63 050b 	sbc.w	r5, r3, fp
 800494c:	f04f 0200 	mov.w	r2, #0
 8004950:	f04f 0300 	mov.w	r3, #0
 8004954:	00eb      	lsls	r3, r5, #3
 8004956:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 800495a:	00e2      	lsls	r2, r4, #3
 800495c:	4614      	mov	r4, r2
 800495e:	461d      	mov	r5, r3
 8004960:	4643      	mov	r3, r8
 8004962:	18e3      	adds	r3, r4, r3
 8004964:	603b      	str	r3, [r7, #0]
 8004966:	464b      	mov	r3, r9
 8004968:	eb45 0303 	adc.w	r3, r5, r3
 800496c:	607b      	str	r3, [r7, #4]
 800496e:	f04f 0200 	mov.w	r2, #0
 8004972:	f04f 0300 	mov.w	r3, #0
 8004976:	e9d7 4500 	ldrd	r4, r5, [r7]
 800497a:	4629      	mov	r1, r5
 800497c:	028b      	lsls	r3, r1, #10
 800497e:	4621      	mov	r1, r4
 8004980:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 8004984:	4621      	mov	r1, r4
 8004986:	028a      	lsls	r2, r1, #10
 8004988:	4610      	mov	r0, r2
 800498a:	4619      	mov	r1, r3
 800498c:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800498e:	2200      	movs	r2, #0
 8004990:	61bb      	str	r3, [r7, #24]
 8004992:	61fa      	str	r2, [r7, #28]
 8004994:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8004998:	f7fb fc7a 	bl	8000290 <__aeabi_uldivmod>
 800499c:	4602      	mov	r2, r0
 800499e:	460b      	mov	r3, r1
 80049a0:	4613      	mov	r3, r2
 80049a2:	64fb      	str	r3, [r7, #76]	; 0x4c
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 80049a4:	4b0b      	ldr	r3, [pc, #44]	; (80049d4 <HAL_RCC_GetSysClockFreq+0x200>)
 80049a6:	685b      	ldr	r3, [r3, #4]
 80049a8:	0c1b      	lsrs	r3, r3, #16
 80049aa:	f003 0303 	and.w	r3, r3, #3
 80049ae:	3301      	adds	r3, #1
 80049b0:	005b      	lsls	r3, r3, #1
 80049b2:	643b      	str	r3, [r7, #64]	; 0x40

      sysclockfreq = pllvco/pllp;
 80049b4:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 80049b6:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80049b8:	fbb2 f3f3 	udiv	r3, r2, r3
 80049bc:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 80049be:	e002      	b.n	80049c6 <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 80049c0:	4b05      	ldr	r3, [pc, #20]	; (80049d8 <HAL_RCC_GetSysClockFreq+0x204>)
 80049c2:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 80049c4:	bf00      	nop
    }
  }
  return sysclockfreq;
 80049c6:	6cbb      	ldr	r3, [r7, #72]	; 0x48
}
 80049c8:	4618      	mov	r0, r3
 80049ca:	3750      	adds	r7, #80	; 0x50
 80049cc:	46bd      	mov	sp, r7
 80049ce:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 80049d2:	bf00      	nop
 80049d4:	40023800 	.word	0x40023800
 80049d8:	00f42400 	.word	0x00f42400
 80049dc:	007a1200 	.word	0x007a1200

080049e0 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 80049e0:	b480      	push	{r7}
 80049e2:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 80049e4:	4b03      	ldr	r3, [pc, #12]	; (80049f4 <HAL_RCC_GetHCLKFreq+0x14>)
 80049e6:	681b      	ldr	r3, [r3, #0]
}
 80049e8:	4618      	mov	r0, r3
 80049ea:	46bd      	mov	sp, r7
 80049ec:	f85d 7b04 	ldr.w	r7, [sp], #4
 80049f0:	4770      	bx	lr
 80049f2:	bf00      	nop
 80049f4:	20000000 	.word	0x20000000

080049f8 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 80049f8:	b580      	push	{r7, lr}
 80049fa:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1)>> RCC_CFGR_PPRE1_Pos]);
 80049fc:	f7ff fff0 	bl	80049e0 <HAL_RCC_GetHCLKFreq>
 8004a00:	4602      	mov	r2, r0
 8004a02:	4b05      	ldr	r3, [pc, #20]	; (8004a18 <HAL_RCC_GetPCLK1Freq+0x20>)
 8004a04:	689b      	ldr	r3, [r3, #8]
 8004a06:	0a9b      	lsrs	r3, r3, #10
 8004a08:	f003 0307 	and.w	r3, r3, #7
 8004a0c:	4903      	ldr	r1, [pc, #12]	; (8004a1c <HAL_RCC_GetPCLK1Freq+0x24>)
 8004a0e:	5ccb      	ldrb	r3, [r1, r3]
 8004a10:	fa22 f303 	lsr.w	r3, r2, r3
}
 8004a14:	4618      	mov	r0, r3
 8004a16:	bd80      	pop	{r7, pc}
 8004a18:	40023800 	.word	0x40023800
 8004a1c:	0800aed0 	.word	0x0800aed0

08004a20 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8004a20:	b580      	push	{r7, lr}
 8004a22:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2)>> RCC_CFGR_PPRE2_Pos]);
 8004a24:	f7ff ffdc 	bl	80049e0 <HAL_RCC_GetHCLKFreq>
 8004a28:	4602      	mov	r2, r0
 8004a2a:	4b05      	ldr	r3, [pc, #20]	; (8004a40 <HAL_RCC_GetPCLK2Freq+0x20>)
 8004a2c:	689b      	ldr	r3, [r3, #8]
 8004a2e:	0b5b      	lsrs	r3, r3, #13
 8004a30:	f003 0307 	and.w	r3, r3, #7
 8004a34:	4903      	ldr	r1, [pc, #12]	; (8004a44 <HAL_RCC_GetPCLK2Freq+0x24>)
 8004a36:	5ccb      	ldrb	r3, [r1, r3]
 8004a38:	fa22 f303 	lsr.w	r3, r2, r3
}
 8004a3c:	4618      	mov	r0, r3
 8004a3e:	bd80      	pop	{r7, pc}
 8004a40:	40023800 	.word	0x40023800
 8004a44:	0800aed0 	.word	0x0800aed0

08004a48 <HAL_RCC_GetClockConfig>:
  * will be configured.
  * @param  pFLatency Pointer on the Flash Latency.
  * @retval None
  */
void HAL_RCC_GetClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t *pFLatency)
{
 8004a48:	b480      	push	{r7}
 8004a4a:	b083      	sub	sp, #12
 8004a4c:	af00      	add	r7, sp, #0
 8004a4e:	6078      	str	r0, [r7, #4]
 8004a50:	6039      	str	r1, [r7, #0]
  /* Set all possible values for the Clock type parameter --------------------*/
  RCC_ClkInitStruct->ClockType = RCC_CLOCKTYPE_SYSCLK | RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_PCLK1 | RCC_CLOCKTYPE_PCLK2;
 8004a52:	687b      	ldr	r3, [r7, #4]
 8004a54:	220f      	movs	r2, #15
 8004a56:	601a      	str	r2, [r3, #0]

  /* Get the SYSCLK configuration --------------------------------------------*/
  RCC_ClkInitStruct->SYSCLKSource = (uint32_t)(RCC->CFGR & RCC_CFGR_SW);
 8004a58:	4b12      	ldr	r3, [pc, #72]	; (8004aa4 <HAL_RCC_GetClockConfig+0x5c>)
 8004a5a:	689b      	ldr	r3, [r3, #8]
 8004a5c:	f003 0203 	and.w	r2, r3, #3
 8004a60:	687b      	ldr	r3, [r7, #4]
 8004a62:	605a      	str	r2, [r3, #4]

  /* Get the HCLK configuration ----------------------------------------------*/
  RCC_ClkInitStruct->AHBCLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_HPRE);
 8004a64:	4b0f      	ldr	r3, [pc, #60]	; (8004aa4 <HAL_RCC_GetClockConfig+0x5c>)
 8004a66:	689b      	ldr	r3, [r3, #8]
 8004a68:	f003 02f0 	and.w	r2, r3, #240	; 0xf0
 8004a6c:	687b      	ldr	r3, [r7, #4]
 8004a6e:	609a      	str	r2, [r3, #8]

  /* Get the APB1 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB1CLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_PPRE1);
 8004a70:	4b0c      	ldr	r3, [pc, #48]	; (8004aa4 <HAL_RCC_GetClockConfig+0x5c>)
 8004a72:	689b      	ldr	r3, [r3, #8]
 8004a74:	f403 52e0 	and.w	r2, r3, #7168	; 0x1c00
 8004a78:	687b      	ldr	r3, [r7, #4]
 8004a7a:	60da      	str	r2, [r3, #12]

  /* Get the APB2 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB2CLKDivider = (uint32_t)((RCC->CFGR & RCC_CFGR_PPRE2) >> 3U);
 8004a7c:	4b09      	ldr	r3, [pc, #36]	; (8004aa4 <HAL_RCC_GetClockConfig+0x5c>)
 8004a7e:	689b      	ldr	r3, [r3, #8]
 8004a80:	08db      	lsrs	r3, r3, #3
 8004a82:	f403 52e0 	and.w	r2, r3, #7168	; 0x1c00
 8004a86:	687b      	ldr	r3, [r7, #4]
 8004a88:	611a      	str	r2, [r3, #16]

  /* Get the Flash Wait State (Latency) configuration ------------------------*/
  *pFLatency = (uint32_t)(FLASH->ACR & FLASH_ACR_LATENCY);
 8004a8a:	4b07      	ldr	r3, [pc, #28]	; (8004aa8 <HAL_RCC_GetClockConfig+0x60>)
 8004a8c:	681b      	ldr	r3, [r3, #0]
 8004a8e:	f003 020f 	and.w	r2, r3, #15
 8004a92:	683b      	ldr	r3, [r7, #0]
 8004a94:	601a      	str	r2, [r3, #0]
}
 8004a96:	bf00      	nop
 8004a98:	370c      	adds	r7, #12
 8004a9a:	46bd      	mov	sp, r7
 8004a9c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004aa0:	4770      	bx	lr
 8004aa2:	bf00      	nop
 8004aa4:	40023800 	.word	0x40023800
 8004aa8:	40023c00 	.word	0x40023c00

08004aac <HAL_RCCEx_PeriphCLKConfig>:
  *         the backup registers) and RCC_BDCR register are set to their reset values.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8004aac:	b580      	push	{r7, lr}
 8004aae:	b086      	sub	sp, #24
 8004ab0:	af00      	add	r7, sp, #0
 8004ab2:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 8004ab4:	2300      	movs	r3, #0
 8004ab6:	617b      	str	r3, [r7, #20]
  uint32_t tmpreg1 = 0U;
 8004ab8:	2300      	movs	r3, #0
 8004aba:	613b      	str	r3, [r7, #16]

  /*----------------------- SAI/I2S Configuration (PLLI2S) -------------------*/
  /*----------------------- Common configuration SAI/I2S ---------------------*/
  /* In Case of SAI or I2S Clock Configuration through PLLI2S, PLLI2SN division
     factor is common parameters for both peripherals */
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == RCC_PERIPHCLK_I2S) ||
 8004abc:	687b      	ldr	r3, [r7, #4]
 8004abe:	681b      	ldr	r3, [r3, #0]
 8004ac0:	f003 0301 	and.w	r3, r3, #1
 8004ac4:	2b00      	cmp	r3, #0
 8004ac6:	d10b      	bne.n	8004ae0 <HAL_RCCEx_PeriphCLKConfig+0x34>
     (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI_PLLI2S) == RCC_PERIPHCLK_SAI_PLLI2S) ||
 8004ac8:	687b      	ldr	r3, [r7, #4]
 8004aca:	681b      	ldr	r3, [r3, #0]
 8004acc:	f003 0302 	and.w	r3, r3, #2
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == RCC_PERIPHCLK_I2S) ||
 8004ad0:	2b00      	cmp	r3, #0
 8004ad2:	d105      	bne.n	8004ae0 <HAL_RCCEx_PeriphCLKConfig+0x34>
     (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLLI2S) == RCC_PERIPHCLK_PLLI2S))
 8004ad4:	687b      	ldr	r3, [r7, #4]
 8004ad6:	681b      	ldr	r3, [r3, #0]
 8004ad8:	f003 0340 	and.w	r3, r3, #64	; 0x40
     (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI_PLLI2S) == RCC_PERIPHCLK_SAI_PLLI2S) ||
 8004adc:	2b00      	cmp	r3, #0
 8004ade:	d075      	beq.n	8004bcc <HAL_RCCEx_PeriphCLKConfig+0x120>
  {
    /* check for Parameters */
    assert_param(IS_RCC_PLLI2SN_VALUE(PeriphClkInit->PLLI2S.PLLI2SN));

    /* Disable the PLLI2S */
    __HAL_RCC_PLLI2S_DISABLE();
 8004ae0:	4b91      	ldr	r3, [pc, #580]	; (8004d28 <HAL_RCCEx_PeriphCLKConfig+0x27c>)
 8004ae2:	2200      	movs	r2, #0
 8004ae4:	601a      	str	r2, [r3, #0]
    /* Get tick */
    tickstart = HAL_GetTick();
 8004ae6:	f7fd f809 	bl	8001afc <HAL_GetTick>
 8004aea:	6178      	str	r0, [r7, #20]
    /* Wait till PLLI2S is disabled */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  != RESET)
 8004aec:	e008      	b.n	8004b00 <HAL_RCCEx_PeriphCLKConfig+0x54>
    {
      if((HAL_GetTick() - tickstart ) > PLLI2S_TIMEOUT_VALUE)
 8004aee:	f7fd f805 	bl	8001afc <HAL_GetTick>
 8004af2:	4602      	mov	r2, r0
 8004af4:	697b      	ldr	r3, [r7, #20]
 8004af6:	1ad3      	subs	r3, r2, r3
 8004af8:	2b02      	cmp	r3, #2
 8004afa:	d901      	bls.n	8004b00 <HAL_RCCEx_PeriphCLKConfig+0x54>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 8004afc:	2303      	movs	r3, #3
 8004afe:	e189      	b.n	8004e14 <HAL_RCCEx_PeriphCLKConfig+0x368>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  != RESET)
 8004b00:	4b8a      	ldr	r3, [pc, #552]	; (8004d2c <HAL_RCCEx_PeriphCLKConfig+0x280>)
 8004b02:	681b      	ldr	r3, [r3, #0]
 8004b04:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8004b08:	2b00      	cmp	r3, #0
 8004b0a:	d1f0      	bne.n	8004aee <HAL_RCCEx_PeriphCLKConfig+0x42>
    }

    /*---------------------------- I2S configuration -------------------------*/
    /* In Case of I2S Clock Configuration through PLLI2S, PLLI2SR must be added
      only for I2S configuration */
    if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == (RCC_PERIPHCLK_I2S))
 8004b0c:	687b      	ldr	r3, [r7, #4]
 8004b0e:	681b      	ldr	r3, [r3, #0]
 8004b10:	f003 0301 	and.w	r3, r3, #1
 8004b14:	2b00      	cmp	r3, #0
 8004b16:	d009      	beq.n	8004b2c <HAL_RCCEx_PeriphCLKConfig+0x80>
      /* check for Parameters */
      assert_param(IS_RCC_PLLI2SR_VALUE(PeriphClkInit->PLLI2S.PLLI2SR));
      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO = f(VCO clock) = f(PLLI2S clock input) * (PLLI2SN/PLLM) */
      /* I2SCLK = f(PLLI2S clock output) = f(VCO clock) / PLLI2SR */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN , PeriphClkInit->PLLI2S.PLLI2SR);
 8004b18:	687b      	ldr	r3, [r7, #4]
 8004b1a:	685b      	ldr	r3, [r3, #4]
 8004b1c:	019a      	lsls	r2, r3, #6
 8004b1e:	687b      	ldr	r3, [r7, #4]
 8004b20:	689b      	ldr	r3, [r3, #8]
 8004b22:	071b      	lsls	r3, r3, #28
 8004b24:	4981      	ldr	r1, [pc, #516]	; (8004d2c <HAL_RCCEx_PeriphCLKConfig+0x280>)
 8004b26:	4313      	orrs	r3, r2
 8004b28:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84
    }

    /*---------------------------- SAI configuration -------------------------*/
    /* In Case of SAI Clock Configuration through PLLI2S, PLLI2SQ and PLLI2S_DIVQ must
       be added only for SAI configuration */
    if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI_PLLI2S) == (RCC_PERIPHCLK_SAI_PLLI2S))
 8004b2c:	687b      	ldr	r3, [r7, #4]
 8004b2e:	681b      	ldr	r3, [r3, #0]
 8004b30:	f003 0302 	and.w	r3, r3, #2
 8004b34:	2b00      	cmp	r3, #0
 8004b36:	d01f      	beq.n	8004b78 <HAL_RCCEx_PeriphCLKConfig+0xcc>
      /* Check the PLLI2S division factors */
      assert_param(IS_RCC_PLLI2SQ_VALUE(PeriphClkInit->PLLI2S.PLLI2SQ));
      assert_param(IS_RCC_PLLI2S_DIVQ_VALUE(PeriphClkInit->PLLI2SDivQ));

      /* Read PLLI2SR value from PLLI2SCFGR register (this value is not need for SAI configuration) */
      tmpreg1 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SR) >> RCC_PLLI2SCFGR_PLLI2SR_Pos);
 8004b38:	4b7c      	ldr	r3, [pc, #496]	; (8004d2c <HAL_RCCEx_PeriphCLKConfig+0x280>)
 8004b3a:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8004b3e:	0f1b      	lsrs	r3, r3, #28
 8004b40:	f003 0307 	and.w	r3, r3, #7
 8004b44:	613b      	str	r3, [r7, #16]
      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO Input  = PLL_SOURCE/PLLM */
      /* PLLI2S_VCO Output = PLLI2S_VCO Input * PLLI2SN */
      /* SAI_CLK(first level) = PLLI2S_VCO Output/PLLI2SQ */
      __HAL_RCC_PLLI2S_SAICLK_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN , PeriphClkInit->PLLI2S.PLLI2SQ , tmpreg1);
 8004b46:	687b      	ldr	r3, [r7, #4]
 8004b48:	685b      	ldr	r3, [r3, #4]
 8004b4a:	019a      	lsls	r2, r3, #6
 8004b4c:	687b      	ldr	r3, [r7, #4]
 8004b4e:	68db      	ldr	r3, [r3, #12]
 8004b50:	061b      	lsls	r3, r3, #24
 8004b52:	431a      	orrs	r2, r3
 8004b54:	693b      	ldr	r3, [r7, #16]
 8004b56:	071b      	lsls	r3, r3, #28
 8004b58:	4974      	ldr	r1, [pc, #464]	; (8004d2c <HAL_RCCEx_PeriphCLKConfig+0x280>)
 8004b5a:	4313      	orrs	r3, r2
 8004b5c:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84
      /* SAI_CLK_x = SAI_CLK(first level)/PLLI2SDIVQ */
      __HAL_RCC_PLLI2S_PLLSAICLKDIVQ_CONFIG(PeriphClkInit->PLLI2SDivQ);
 8004b60:	4b72      	ldr	r3, [pc, #456]	; (8004d2c <HAL_RCCEx_PeriphCLKConfig+0x280>)
 8004b62:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8004b66:	f023 021f 	bic.w	r2, r3, #31
 8004b6a:	687b      	ldr	r3, [r7, #4]
 8004b6c:	69db      	ldr	r3, [r3, #28]
 8004b6e:	3b01      	subs	r3, #1
 8004b70:	496e      	ldr	r1, [pc, #440]	; (8004d2c <HAL_RCCEx_PeriphCLKConfig+0x280>)
 8004b72:	4313      	orrs	r3, r2
 8004b74:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
    }

    /*----------------- In Case of PLLI2S is just selected  -----------------*/
    if((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_PLLI2S) == RCC_PERIPHCLK_PLLI2S)
 8004b78:	687b      	ldr	r3, [r7, #4]
 8004b7a:	681b      	ldr	r3, [r3, #0]
 8004b7c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004b80:	2b00      	cmp	r3, #0
 8004b82:	d00d      	beq.n	8004ba0 <HAL_RCCEx_PeriphCLKConfig+0xf4>
      /* Check for Parameters */
      assert_param(IS_RCC_PLLI2SQ_VALUE(PeriphClkInit->PLLI2S.PLLI2SQ));
      assert_param(IS_RCC_PLLI2SR_VALUE(PeriphClkInit->PLLI2S.PLLI2SR));

      /* Configure the PLLI2S multiplication and division factors */
      __HAL_RCC_PLLI2S_SAICLK_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN, PeriphClkInit->PLLI2S.PLLI2SQ, PeriphClkInit->PLLI2S.PLLI2SR);
 8004b84:	687b      	ldr	r3, [r7, #4]
 8004b86:	685b      	ldr	r3, [r3, #4]
 8004b88:	019a      	lsls	r2, r3, #6
 8004b8a:	687b      	ldr	r3, [r7, #4]
 8004b8c:	68db      	ldr	r3, [r3, #12]
 8004b8e:	061b      	lsls	r3, r3, #24
 8004b90:	431a      	orrs	r2, r3
 8004b92:	687b      	ldr	r3, [r7, #4]
 8004b94:	689b      	ldr	r3, [r3, #8]
 8004b96:	071b      	lsls	r3, r3, #28
 8004b98:	4964      	ldr	r1, [pc, #400]	; (8004d2c <HAL_RCCEx_PeriphCLKConfig+0x280>)
 8004b9a:	4313      	orrs	r3, r2
 8004b9c:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84
    }

    /* Enable the PLLI2S */
    __HAL_RCC_PLLI2S_ENABLE();
 8004ba0:	4b61      	ldr	r3, [pc, #388]	; (8004d28 <HAL_RCCEx_PeriphCLKConfig+0x27c>)
 8004ba2:	2201      	movs	r2, #1
 8004ba4:	601a      	str	r2, [r3, #0]
    /* Get tick */
    tickstart = HAL_GetTick();
 8004ba6:	f7fc ffa9 	bl	8001afc <HAL_GetTick>
 8004baa:	6178      	str	r0, [r7, #20]
    /* Wait till PLLI2S is ready */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
 8004bac:	e008      	b.n	8004bc0 <HAL_RCCEx_PeriphCLKConfig+0x114>
    {
      if((HAL_GetTick() - tickstart ) > PLLI2S_TIMEOUT_VALUE)
 8004bae:	f7fc ffa5 	bl	8001afc <HAL_GetTick>
 8004bb2:	4602      	mov	r2, r0
 8004bb4:	697b      	ldr	r3, [r7, #20]
 8004bb6:	1ad3      	subs	r3, r2, r3
 8004bb8:	2b02      	cmp	r3, #2
 8004bba:	d901      	bls.n	8004bc0 <HAL_RCCEx_PeriphCLKConfig+0x114>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 8004bbc:	2303      	movs	r3, #3
 8004bbe:	e129      	b.n	8004e14 <HAL_RCCEx_PeriphCLKConfig+0x368>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
 8004bc0:	4b5a      	ldr	r3, [pc, #360]	; (8004d2c <HAL_RCCEx_PeriphCLKConfig+0x280>)
 8004bc2:	681b      	ldr	r3, [r3, #0]
 8004bc4:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8004bc8:	2b00      	cmp	r3, #0
 8004bca:	d0f0      	beq.n	8004bae <HAL_RCCEx_PeriphCLKConfig+0x102>

  /*----------------------- SAI/LTDC Configuration (PLLSAI) ------------------*/
  /*----------------------- Common configuration SAI/LTDC --------------------*/
  /* In Case of SAI or LTDC Clock Configuration through PLLSAI, PLLSAIN division
     factor is common parameters for both peripherals */
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI_PLLSAI) == RCC_PERIPHCLK_SAI_PLLSAI) ||
 8004bcc:	687b      	ldr	r3, [r7, #4]
 8004bce:	681b      	ldr	r3, [r3, #0]
 8004bd0:	f003 0304 	and.w	r3, r3, #4
 8004bd4:	2b00      	cmp	r3, #0
 8004bd6:	d105      	bne.n	8004be4 <HAL_RCCEx_PeriphCLKConfig+0x138>
     (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LTDC) == RCC_PERIPHCLK_LTDC))
 8004bd8:	687b      	ldr	r3, [r7, #4]
 8004bda:	681b      	ldr	r3, [r3, #0]
 8004bdc:	f003 0308 	and.w	r3, r3, #8
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI_PLLSAI) == RCC_PERIPHCLK_SAI_PLLSAI) ||
 8004be0:	2b00      	cmp	r3, #0
 8004be2:	d079      	beq.n	8004cd8 <HAL_RCCEx_PeriphCLKConfig+0x22c>
  {
    /* Check the PLLSAI division factors */
    assert_param(IS_RCC_PLLSAIN_VALUE(PeriphClkInit->PLLSAI.PLLSAIN));

    /* Disable PLLSAI Clock */
    __HAL_RCC_PLLSAI_DISABLE();
 8004be4:	4b52      	ldr	r3, [pc, #328]	; (8004d30 <HAL_RCCEx_PeriphCLKConfig+0x284>)
 8004be6:	2200      	movs	r2, #0
 8004be8:	601a      	str	r2, [r3, #0]
    /* Get tick */
    tickstart = HAL_GetTick();
 8004bea:	f7fc ff87 	bl	8001afc <HAL_GetTick>
 8004bee:	6178      	str	r0, [r7, #20]
    /* Wait till PLLSAI is disabled */
    while(__HAL_RCC_PLLSAI_GET_FLAG() != RESET)
 8004bf0:	e008      	b.n	8004c04 <HAL_RCCEx_PeriphCLKConfig+0x158>
    {
      if((HAL_GetTick() - tickstart ) > PLLSAI_TIMEOUT_VALUE)
 8004bf2:	f7fc ff83 	bl	8001afc <HAL_GetTick>
 8004bf6:	4602      	mov	r2, r0
 8004bf8:	697b      	ldr	r3, [r7, #20]
 8004bfa:	1ad3      	subs	r3, r2, r3
 8004bfc:	2b02      	cmp	r3, #2
 8004bfe:	d901      	bls.n	8004c04 <HAL_RCCEx_PeriphCLKConfig+0x158>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 8004c00:	2303      	movs	r3, #3
 8004c02:	e107      	b.n	8004e14 <HAL_RCCEx_PeriphCLKConfig+0x368>
    while(__HAL_RCC_PLLSAI_GET_FLAG() != RESET)
 8004c04:	4b49      	ldr	r3, [pc, #292]	; (8004d2c <HAL_RCCEx_PeriphCLKConfig+0x280>)
 8004c06:	681b      	ldr	r3, [r3, #0]
 8004c08:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8004c0c:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8004c10:	d0ef      	beq.n	8004bf2 <HAL_RCCEx_PeriphCLKConfig+0x146>
    }

    /*---------------------------- SAI configuration -------------------------*/
    /* In Case of SAI Clock Configuration through PLLSAI, PLLSAIQ and PLLSAI_DIVQ must
       be added only for SAI configuration */
    if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI_PLLSAI) == (RCC_PERIPHCLK_SAI_PLLSAI))
 8004c12:	687b      	ldr	r3, [r7, #4]
 8004c14:	681b      	ldr	r3, [r3, #0]
 8004c16:	f003 0304 	and.w	r3, r3, #4
 8004c1a:	2b00      	cmp	r3, #0
 8004c1c:	d020      	beq.n	8004c60 <HAL_RCCEx_PeriphCLKConfig+0x1b4>
    {
      assert_param(IS_RCC_PLLSAIQ_VALUE(PeriphClkInit->PLLSAI.PLLSAIQ));
      assert_param(IS_RCC_PLLSAI_DIVQ_VALUE(PeriphClkInit->PLLSAIDivQ));

      /* Read PLLSAIR value from PLLSAICFGR register (this value is not need for SAI configuration) */
      tmpreg1 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIR) >> RCC_PLLSAICFGR_PLLSAIR_Pos);
 8004c1e:	4b43      	ldr	r3, [pc, #268]	; (8004d2c <HAL_RCCEx_PeriphCLKConfig+0x280>)
 8004c20:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004c24:	0f1b      	lsrs	r3, r3, #28
 8004c26:	f003 0307 	and.w	r3, r3, #7
 8004c2a:	613b      	str	r3, [r7, #16]
      /* PLLSAI_VCO Input  = PLL_SOURCE/PLLM */
      /* PLLSAI_VCO Output = PLLSAI_VCO Input * PLLSAIN */
      /* SAI_CLK(first level) = PLLSAI_VCO Output/PLLSAIQ */
      __HAL_RCC_PLLSAI_CONFIG(PeriphClkInit->PLLSAI.PLLSAIN , PeriphClkInit->PLLSAI.PLLSAIQ, tmpreg1);
 8004c2c:	687b      	ldr	r3, [r7, #4]
 8004c2e:	691b      	ldr	r3, [r3, #16]
 8004c30:	019a      	lsls	r2, r3, #6
 8004c32:	687b      	ldr	r3, [r7, #4]
 8004c34:	695b      	ldr	r3, [r3, #20]
 8004c36:	061b      	lsls	r3, r3, #24
 8004c38:	431a      	orrs	r2, r3
 8004c3a:	693b      	ldr	r3, [r7, #16]
 8004c3c:	071b      	lsls	r3, r3, #28
 8004c3e:	493b      	ldr	r1, [pc, #236]	; (8004d2c <HAL_RCCEx_PeriphCLKConfig+0x280>)
 8004c40:	4313      	orrs	r3, r2
 8004c42:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
      /* SAI_CLK_x = SAI_CLK(first level)/PLLSAIDIVQ */
      __HAL_RCC_PLLSAI_PLLSAICLKDIVQ_CONFIG(PeriphClkInit->PLLSAIDivQ);
 8004c46:	4b39      	ldr	r3, [pc, #228]	; (8004d2c <HAL_RCCEx_PeriphCLKConfig+0x280>)
 8004c48:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8004c4c:	f423 52f8 	bic.w	r2, r3, #7936	; 0x1f00
 8004c50:	687b      	ldr	r3, [r7, #4]
 8004c52:	6a1b      	ldr	r3, [r3, #32]
 8004c54:	3b01      	subs	r3, #1
 8004c56:	021b      	lsls	r3, r3, #8
 8004c58:	4934      	ldr	r1, [pc, #208]	; (8004d2c <HAL_RCCEx_PeriphCLKConfig+0x280>)
 8004c5a:	4313      	orrs	r3, r2
 8004c5c:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
    }

    /*---------------------------- LTDC configuration ------------------------*/
    if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LTDC) == (RCC_PERIPHCLK_LTDC))
 8004c60:	687b      	ldr	r3, [r7, #4]
 8004c62:	681b      	ldr	r3, [r3, #0]
 8004c64:	f003 0308 	and.w	r3, r3, #8
 8004c68:	2b00      	cmp	r3, #0
 8004c6a:	d01e      	beq.n	8004caa <HAL_RCCEx_PeriphCLKConfig+0x1fe>
    {
      assert_param(IS_RCC_PLLSAIR_VALUE(PeriphClkInit->PLLSAI.PLLSAIR));
      assert_param(IS_RCC_PLLSAI_DIVR_VALUE(PeriphClkInit->PLLSAIDivR));

      /* Read PLLSAIR value from PLLSAICFGR register (this value is not need for SAI configuration) */
      tmpreg1 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIQ) >> RCC_PLLSAICFGR_PLLSAIQ_Pos);
 8004c6c:	4b2f      	ldr	r3, [pc, #188]	; (8004d2c <HAL_RCCEx_PeriphCLKConfig+0x280>)
 8004c6e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004c72:	0e1b      	lsrs	r3, r3, #24
 8004c74:	f003 030f 	and.w	r3, r3, #15
 8004c78:	613b      	str	r3, [r7, #16]
      /* PLLSAI_VCO Input  = PLL_SOURCE/PLLM */
      /* PLLSAI_VCO Output = PLLSAI_VCO Input * PLLSAIN */
      /* LTDC_CLK(first level) = PLLSAI_VCO Output/PLLSAIR */
      __HAL_RCC_PLLSAI_CONFIG(PeriphClkInit->PLLSAI.PLLSAIN , tmpreg1, PeriphClkInit->PLLSAI.PLLSAIR);
 8004c7a:	687b      	ldr	r3, [r7, #4]
 8004c7c:	691b      	ldr	r3, [r3, #16]
 8004c7e:	019a      	lsls	r2, r3, #6
 8004c80:	693b      	ldr	r3, [r7, #16]
 8004c82:	061b      	lsls	r3, r3, #24
 8004c84:	431a      	orrs	r2, r3
 8004c86:	687b      	ldr	r3, [r7, #4]
 8004c88:	699b      	ldr	r3, [r3, #24]
 8004c8a:	071b      	lsls	r3, r3, #28
 8004c8c:	4927      	ldr	r1, [pc, #156]	; (8004d2c <HAL_RCCEx_PeriphCLKConfig+0x280>)
 8004c8e:	4313      	orrs	r3, r2
 8004c90:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
      /* LTDC_CLK = LTDC_CLK(first level)/PLLSAIDIVR */
      __HAL_RCC_PLLSAI_PLLSAICLKDIVR_CONFIG(PeriphClkInit->PLLSAIDivR);
 8004c94:	4b25      	ldr	r3, [pc, #148]	; (8004d2c <HAL_RCCEx_PeriphCLKConfig+0x280>)
 8004c96:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8004c9a:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 8004c9e:	687b      	ldr	r3, [r7, #4]
 8004ca0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004ca2:	4922      	ldr	r1, [pc, #136]	; (8004d2c <HAL_RCCEx_PeriphCLKConfig+0x280>)
 8004ca4:	4313      	orrs	r3, r2
 8004ca6:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
    }
    /* Enable PLLSAI Clock */
    __HAL_RCC_PLLSAI_ENABLE();
 8004caa:	4b21      	ldr	r3, [pc, #132]	; (8004d30 <HAL_RCCEx_PeriphCLKConfig+0x284>)
 8004cac:	2201      	movs	r2, #1
 8004cae:	601a      	str	r2, [r3, #0]
    /* Get tick */
    tickstart = HAL_GetTick();
 8004cb0:	f7fc ff24 	bl	8001afc <HAL_GetTick>
 8004cb4:	6178      	str	r0, [r7, #20]
    /* Wait till PLLSAI is ready */
    while(__HAL_RCC_PLLSAI_GET_FLAG() == RESET)
 8004cb6:	e008      	b.n	8004cca <HAL_RCCEx_PeriphCLKConfig+0x21e>
    {
      if((HAL_GetTick() - tickstart ) > PLLSAI_TIMEOUT_VALUE)
 8004cb8:	f7fc ff20 	bl	8001afc <HAL_GetTick>
 8004cbc:	4602      	mov	r2, r0
 8004cbe:	697b      	ldr	r3, [r7, #20]
 8004cc0:	1ad3      	subs	r3, r2, r3
 8004cc2:	2b02      	cmp	r3, #2
 8004cc4:	d901      	bls.n	8004cca <HAL_RCCEx_PeriphCLKConfig+0x21e>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 8004cc6:	2303      	movs	r3, #3
 8004cc8:	e0a4      	b.n	8004e14 <HAL_RCCEx_PeriphCLKConfig+0x368>
    while(__HAL_RCC_PLLSAI_GET_FLAG() == RESET)
 8004cca:	4b18      	ldr	r3, [pc, #96]	; (8004d2c <HAL_RCCEx_PeriphCLKConfig+0x280>)
 8004ccc:	681b      	ldr	r3, [r3, #0]
 8004cce:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8004cd2:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8004cd6:	d1ef      	bne.n	8004cb8 <HAL_RCCEx_PeriphCLKConfig+0x20c>
    }
  }
  /*--------------------------------------------------------------------------*/

  /*---------------------------- RTC configuration ---------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == (RCC_PERIPHCLK_RTC))
 8004cd8:	687b      	ldr	r3, [r7, #4]
 8004cda:	681b      	ldr	r3, [r3, #0]
 8004cdc:	f003 0320 	and.w	r3, r3, #32
 8004ce0:	2b00      	cmp	r3, #0
 8004ce2:	f000 808b 	beq.w	8004dfc <HAL_RCCEx_PeriphCLKConfig+0x350>
  {
    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock*/
    __HAL_RCC_PWR_CLK_ENABLE();
 8004ce6:	2300      	movs	r3, #0
 8004ce8:	60fb      	str	r3, [r7, #12]
 8004cea:	4b10      	ldr	r3, [pc, #64]	; (8004d2c <HAL_RCCEx_PeriphCLKConfig+0x280>)
 8004cec:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004cee:	4a0f      	ldr	r2, [pc, #60]	; (8004d2c <HAL_RCCEx_PeriphCLKConfig+0x280>)
 8004cf0:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8004cf4:	6413      	str	r3, [r2, #64]	; 0x40
 8004cf6:	4b0d      	ldr	r3, [pc, #52]	; (8004d2c <HAL_RCCEx_PeriphCLKConfig+0x280>)
 8004cf8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004cfa:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8004cfe:	60fb      	str	r3, [r7, #12]
 8004d00:	68fb      	ldr	r3, [r7, #12]

    /* Enable write access to Backup domain */
    PWR->CR |= PWR_CR_DBP;
 8004d02:	4b0c      	ldr	r3, [pc, #48]	; (8004d34 <HAL_RCCEx_PeriphCLKConfig+0x288>)
 8004d04:	681b      	ldr	r3, [r3, #0]
 8004d06:	4a0b      	ldr	r2, [pc, #44]	; (8004d34 <HAL_RCCEx_PeriphCLKConfig+0x288>)
 8004d08:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8004d0c:	6013      	str	r3, [r2, #0]

    /* Get tick */
    tickstart = HAL_GetTick();
 8004d0e:	f7fc fef5 	bl	8001afc <HAL_GetTick>
 8004d12:	6178      	str	r0, [r7, #20]

    while((PWR->CR & PWR_CR_DBP) == RESET)
 8004d14:	e010      	b.n	8004d38 <HAL_RCCEx_PeriphCLKConfig+0x28c>
    {
      if((HAL_GetTick() - tickstart ) > RCC_DBP_TIMEOUT_VALUE)
 8004d16:	f7fc fef1 	bl	8001afc <HAL_GetTick>
 8004d1a:	4602      	mov	r2, r0
 8004d1c:	697b      	ldr	r3, [r7, #20]
 8004d1e:	1ad3      	subs	r3, r2, r3
 8004d20:	2b02      	cmp	r3, #2
 8004d22:	d909      	bls.n	8004d38 <HAL_RCCEx_PeriphCLKConfig+0x28c>
      {
        return HAL_TIMEOUT;
 8004d24:	2303      	movs	r3, #3
 8004d26:	e075      	b.n	8004e14 <HAL_RCCEx_PeriphCLKConfig+0x368>
 8004d28:	42470068 	.word	0x42470068
 8004d2c:	40023800 	.word	0x40023800
 8004d30:	42470070 	.word	0x42470070
 8004d34:	40007000 	.word	0x40007000
    while((PWR->CR & PWR_CR_DBP) == RESET)
 8004d38:	4b38      	ldr	r3, [pc, #224]	; (8004e1c <HAL_RCCEx_PeriphCLKConfig+0x370>)
 8004d3a:	681b      	ldr	r3, [r3, #0]
 8004d3c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004d40:	2b00      	cmp	r3, #0
 8004d42:	d0e8      	beq.n	8004d16 <HAL_RCCEx_PeriphCLKConfig+0x26a>
      }
    }
    /* Reset the Backup domain only if the RTC Clock source selection is modified from reset value */
    tmpreg1 = (RCC->BDCR & RCC_BDCR_RTCSEL);
 8004d44:	4b36      	ldr	r3, [pc, #216]	; (8004e20 <HAL_RCCEx_PeriphCLKConfig+0x374>)
 8004d46:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004d48:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8004d4c:	613b      	str	r3, [r7, #16]
    if((tmpreg1 != 0x00000000U) && ((tmpreg1) != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 8004d4e:	693b      	ldr	r3, [r7, #16]
 8004d50:	2b00      	cmp	r3, #0
 8004d52:	d02f      	beq.n	8004db4 <HAL_RCCEx_PeriphCLKConfig+0x308>
 8004d54:	687b      	ldr	r3, [r7, #4]
 8004d56:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004d58:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8004d5c:	693a      	ldr	r2, [r7, #16]
 8004d5e:	429a      	cmp	r2, r3
 8004d60:	d028      	beq.n	8004db4 <HAL_RCCEx_PeriphCLKConfig+0x308>
    {
      /* Store the content of BDCR register before the reset of Backup Domain */
      tmpreg1 = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 8004d62:	4b2f      	ldr	r3, [pc, #188]	; (8004e20 <HAL_RCCEx_PeriphCLKConfig+0x374>)
 8004d64:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004d66:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8004d6a:	613b      	str	r3, [r7, #16]
      /* RTC Clock selection can be changed only if the Backup Domain is reset */
      __HAL_RCC_BACKUPRESET_FORCE();
 8004d6c:	4b2d      	ldr	r3, [pc, #180]	; (8004e24 <HAL_RCCEx_PeriphCLKConfig+0x378>)
 8004d6e:	2201      	movs	r2, #1
 8004d70:	601a      	str	r2, [r3, #0]
      __HAL_RCC_BACKUPRESET_RELEASE();
 8004d72:	4b2c      	ldr	r3, [pc, #176]	; (8004e24 <HAL_RCCEx_PeriphCLKConfig+0x378>)
 8004d74:	2200      	movs	r2, #0
 8004d76:	601a      	str	r2, [r3, #0]
      /* Restore the Content of BDCR register */
      RCC->BDCR = tmpreg1;
 8004d78:	4a29      	ldr	r2, [pc, #164]	; (8004e20 <HAL_RCCEx_PeriphCLKConfig+0x374>)
 8004d7a:	693b      	ldr	r3, [r7, #16]
 8004d7c:	6713      	str	r3, [r2, #112]	; 0x70

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if(HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSEON))
 8004d7e:	4b28      	ldr	r3, [pc, #160]	; (8004e20 <HAL_RCCEx_PeriphCLKConfig+0x374>)
 8004d80:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004d82:	f003 0301 	and.w	r3, r3, #1
 8004d86:	2b01      	cmp	r3, #1
 8004d88:	d114      	bne.n	8004db4 <HAL_RCCEx_PeriphCLKConfig+0x308>
      {
        /* Get tick */
        tickstart = HAL_GetTick();
 8004d8a:	f7fc feb7 	bl	8001afc <HAL_GetTick>
 8004d8e:	6178      	str	r0, [r7, #20]

        /* Wait till LSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8004d90:	e00a      	b.n	8004da8 <HAL_RCCEx_PeriphCLKConfig+0x2fc>
        {
          if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8004d92:	f7fc feb3 	bl	8001afc <HAL_GetTick>
 8004d96:	4602      	mov	r2, r0
 8004d98:	697b      	ldr	r3, [r7, #20]
 8004d9a:	1ad3      	subs	r3, r2, r3
 8004d9c:	f241 3288 	movw	r2, #5000	; 0x1388
 8004da0:	4293      	cmp	r3, r2
 8004da2:	d901      	bls.n	8004da8 <HAL_RCCEx_PeriphCLKConfig+0x2fc>
          {
            return HAL_TIMEOUT;
 8004da4:	2303      	movs	r3, #3
 8004da6:	e035      	b.n	8004e14 <HAL_RCCEx_PeriphCLKConfig+0x368>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8004da8:	4b1d      	ldr	r3, [pc, #116]	; (8004e20 <HAL_RCCEx_PeriphCLKConfig+0x374>)
 8004daa:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004dac:	f003 0302 	and.w	r3, r3, #2
 8004db0:	2b00      	cmp	r3, #0
 8004db2:	d0ee      	beq.n	8004d92 <HAL_RCCEx_PeriphCLKConfig+0x2e6>
          }
        }
      }
    }
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8004db4:	687b      	ldr	r3, [r7, #4]
 8004db6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004db8:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8004dbc:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8004dc0:	d10d      	bne.n	8004dde <HAL_RCCEx_PeriphCLKConfig+0x332>
 8004dc2:	4b17      	ldr	r3, [pc, #92]	; (8004e20 <HAL_RCCEx_PeriphCLKConfig+0x374>)
 8004dc4:	689b      	ldr	r3, [r3, #8]
 8004dc6:	f423 12f8 	bic.w	r2, r3, #2031616	; 0x1f0000
 8004dca:	687b      	ldr	r3, [r7, #4]
 8004dcc:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004dce:	f023 4370 	bic.w	r3, r3, #4026531840	; 0xf0000000
 8004dd2:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8004dd6:	4912      	ldr	r1, [pc, #72]	; (8004e20 <HAL_RCCEx_PeriphCLKConfig+0x374>)
 8004dd8:	4313      	orrs	r3, r2
 8004dda:	608b      	str	r3, [r1, #8]
 8004ddc:	e005      	b.n	8004dea <HAL_RCCEx_PeriphCLKConfig+0x33e>
 8004dde:	4b10      	ldr	r3, [pc, #64]	; (8004e20 <HAL_RCCEx_PeriphCLKConfig+0x374>)
 8004de0:	689b      	ldr	r3, [r3, #8]
 8004de2:	4a0f      	ldr	r2, [pc, #60]	; (8004e20 <HAL_RCCEx_PeriphCLKConfig+0x374>)
 8004de4:	f423 13f8 	bic.w	r3, r3, #2031616	; 0x1f0000
 8004de8:	6093      	str	r3, [r2, #8]
 8004dea:	4b0d      	ldr	r3, [pc, #52]	; (8004e20 <HAL_RCCEx_PeriphCLKConfig+0x374>)
 8004dec:	6f1a      	ldr	r2, [r3, #112]	; 0x70
 8004dee:	687b      	ldr	r3, [r7, #4]
 8004df0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004df2:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8004df6:	490a      	ldr	r1, [pc, #40]	; (8004e20 <HAL_RCCEx_PeriphCLKConfig+0x374>)
 8004df8:	4313      	orrs	r3, r2
 8004dfa:	670b      	str	r3, [r1, #112]	; 0x70
  }
  /*--------------------------------------------------------------------------*/

  /*---------------------------- TIM configuration ---------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM) == (RCC_PERIPHCLK_TIM))
 8004dfc:	687b      	ldr	r3, [r7, #4]
 8004dfe:	681b      	ldr	r3, [r3, #0]
 8004e00:	f003 0310 	and.w	r3, r3, #16
 8004e04:	2b00      	cmp	r3, #0
 8004e06:	d004      	beq.n	8004e12 <HAL_RCCEx_PeriphCLKConfig+0x366>
  {
    __HAL_RCC_TIMCLKPRESCALER(PeriphClkInit->TIMPresSelection);
 8004e08:	687b      	ldr	r3, [r7, #4]
 8004e0a:	f893 202c 	ldrb.w	r2, [r3, #44]	; 0x2c
 8004e0e:	4b06      	ldr	r3, [pc, #24]	; (8004e28 <HAL_RCCEx_PeriphCLKConfig+0x37c>)
 8004e10:	601a      	str	r2, [r3, #0]
  }
  return HAL_OK;
 8004e12:	2300      	movs	r3, #0
}
 8004e14:	4618      	mov	r0, r3
 8004e16:	3718      	adds	r7, #24
 8004e18:	46bd      	mov	sp, r7
 8004e1a:	bd80      	pop	{r7, pc}
 8004e1c:	40007000 	.word	0x40007000
 8004e20:	40023800 	.word	0x40023800
 8004e24:	42470e40 	.word	0x42470e40
 8004e28:	424711e0 	.word	0x424711e0

08004e2c <HAL_SDRAM_Init>:
  *                the configuration information for SDRAM module.
  * @param  Timing Pointer to SDRAM control timing structure
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SDRAM_Init(SDRAM_HandleTypeDef *hsdram, FMC_SDRAM_TimingTypeDef *Timing)
{
 8004e2c:	b580      	push	{r7, lr}
 8004e2e:	b082      	sub	sp, #8
 8004e30:	af00      	add	r7, sp, #0
 8004e32:	6078      	str	r0, [r7, #4]
 8004e34:	6039      	str	r1, [r7, #0]
  /* Check the SDRAM handle parameter */
  if (hsdram == NULL)
 8004e36:	687b      	ldr	r3, [r7, #4]
 8004e38:	2b00      	cmp	r3, #0
 8004e3a:	d101      	bne.n	8004e40 <HAL_SDRAM_Init+0x14>
  {
    return HAL_ERROR;
 8004e3c:	2301      	movs	r3, #1
 8004e3e:	e025      	b.n	8004e8c <HAL_SDRAM_Init+0x60>
  }

  if (hsdram->State == HAL_SDRAM_STATE_RESET)
 8004e40:	687b      	ldr	r3, [r7, #4]
 8004e42:	f893 302c 	ldrb.w	r3, [r3, #44]	; 0x2c
 8004e46:	b2db      	uxtb	r3, r3
 8004e48:	2b00      	cmp	r3, #0
 8004e4a:	d106      	bne.n	8004e5a <HAL_SDRAM_Init+0x2e>
  {
    /* Allocate lock resource and initialize it */
    hsdram->Lock = HAL_UNLOCKED;
 8004e4c:	687b      	ldr	r3, [r7, #4]
 8004e4e:	2200      	movs	r2, #0
 8004e50:	f883 202d 	strb.w	r2, [r3, #45]	; 0x2d

    /* Init the low level hardware */
    hsdram->MspInitCallback(hsdram);
#else
    /* Initialize the low level hardware (MSP) */
    HAL_SDRAM_MspInit(hsdram);
 8004e54:	6878      	ldr	r0, [r7, #4]
 8004e56:	f7fc fad9 	bl	800140c <HAL_SDRAM_MspInit>
#endif /* USE_HAL_SDRAM_REGISTER_CALLBACKS */
  }

  /* Initialize the SDRAM controller state */
  hsdram->State = HAL_SDRAM_STATE_BUSY;
 8004e5a:	687b      	ldr	r3, [r7, #4]
 8004e5c:	2202      	movs	r2, #2
 8004e5e:	f883 202c 	strb.w	r2, [r3, #44]	; 0x2c

  /* Initialize SDRAM control Interface */
  (void)FMC_SDRAM_Init(hsdram->Instance, &(hsdram->Init));
 8004e62:	687b      	ldr	r3, [r7, #4]
 8004e64:	681a      	ldr	r2, [r3, #0]
 8004e66:	687b      	ldr	r3, [r7, #4]
 8004e68:	3304      	adds	r3, #4
 8004e6a:	4619      	mov	r1, r3
 8004e6c:	4610      	mov	r0, r2
 8004e6e:	f001 f8dd 	bl	800602c <FMC_SDRAM_Init>

  /* Initialize SDRAM timing Interface */
  (void)FMC_SDRAM_Timing_Init(hsdram->Instance, Timing, hsdram->Init.SDBank);
 8004e72:	687b      	ldr	r3, [r7, #4]
 8004e74:	6818      	ldr	r0, [r3, #0]
 8004e76:	687b      	ldr	r3, [r7, #4]
 8004e78:	685b      	ldr	r3, [r3, #4]
 8004e7a:	461a      	mov	r2, r3
 8004e7c:	6839      	ldr	r1, [r7, #0]
 8004e7e:	f001 f932 	bl	80060e6 <FMC_SDRAM_Timing_Init>
  /* Update the SDRAM controller state */
  hsdram->State = HAL_SDRAM_STATE_READY;
 8004e82:	687b      	ldr	r3, [r7, #4]
 8004e84:	2201      	movs	r2, #1
 8004e86:	f883 202c 	strb.w	r2, [r3, #44]	; 0x2c

  return HAL_OK;
 8004e8a:	2300      	movs	r3, #0
}
 8004e8c:	4618      	mov	r0, r3
 8004e8e:	3708      	adds	r7, #8
 8004e90:	46bd      	mov	sp, r7
 8004e92:	bd80      	pop	{r7, pc}

08004e94 <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 8004e94:	b580      	push	{r7, lr}
 8004e96:	b082      	sub	sp, #8
 8004e98:	af00      	add	r7, sp, #0
 8004e9a:	6078      	str	r0, [r7, #4]
  /* Check the SPI handle allocation */
  if (hspi == NULL)
 8004e9c:	687b      	ldr	r3, [r7, #4]
 8004e9e:	2b00      	cmp	r3, #0
 8004ea0:	d101      	bne.n	8004ea6 <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 8004ea2:	2301      	movs	r3, #1
 8004ea4:	e07b      	b.n	8004f9e <HAL_SPI_Init+0x10a>
  assert_param(IS_SPI_DATASIZE(hspi->Init.DataSize));
  assert_param(IS_SPI_NSS(hspi->Init.NSS));
  assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
  assert_param(IS_SPI_FIRST_BIT(hspi->Init.FirstBit));
  assert_param(IS_SPI_TIMODE(hspi->Init.TIMode));
  if (hspi->Init.TIMode == SPI_TIMODE_DISABLE)
 8004ea6:	687b      	ldr	r3, [r7, #4]
 8004ea8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004eaa:	2b00      	cmp	r3, #0
 8004eac:	d108      	bne.n	8004ec0 <HAL_SPI_Init+0x2c>
  {
    assert_param(IS_SPI_CPOL(hspi->Init.CLKPolarity));
    assert_param(IS_SPI_CPHA(hspi->Init.CLKPhase));

    if (hspi->Init.Mode == SPI_MODE_MASTER)
 8004eae:	687b      	ldr	r3, [r7, #4]
 8004eb0:	685b      	ldr	r3, [r3, #4]
 8004eb2:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8004eb6:	d009      	beq.n	8004ecc <HAL_SPI_Init+0x38>
      assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
    }
    else
    {
      /* Baudrate prescaler not use in Motoraola Slave mode. force to default value */
      hspi->Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 8004eb8:	687b      	ldr	r3, [r7, #4]
 8004eba:	2200      	movs	r2, #0
 8004ebc:	61da      	str	r2, [r3, #28]
 8004ebe:	e005      	b.n	8004ecc <HAL_SPI_Init+0x38>
  else
  {
    assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));

    /* Force polarity and phase to TI protocaol requirements */
    hspi->Init.CLKPolarity = SPI_POLARITY_LOW;
 8004ec0:	687b      	ldr	r3, [r7, #4]
 8004ec2:	2200      	movs	r2, #0
 8004ec4:	611a      	str	r2, [r3, #16]
    hspi->Init.CLKPhase    = SPI_PHASE_1EDGE;
 8004ec6:	687b      	ldr	r3, [r7, #4]
 8004ec8:	2200      	movs	r2, #0
 8004eca:	615a      	str	r2, [r3, #20]
  if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8004ecc:	687b      	ldr	r3, [r7, #4]
 8004ece:	2200      	movs	r2, #0
 8004ed0:	629a      	str	r2, [r3, #40]	; 0x28
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 8004ed2:	687b      	ldr	r3, [r7, #4]
 8004ed4:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8004ed8:	b2db      	uxtb	r3, r3
 8004eda:	2b00      	cmp	r3, #0
 8004edc:	d106      	bne.n	8004eec <HAL_SPI_Init+0x58>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 8004ede:	687b      	ldr	r3, [r7, #4]
 8004ee0:	2200      	movs	r2, #0
 8004ee2:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 8004ee6:	6878      	ldr	r0, [r7, #4]
 8004ee8:	f7fc f94c 	bl	8001184 <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 8004eec:	687b      	ldr	r3, [r7, #4]
 8004eee:	2202      	movs	r2, #2
 8004ef0:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 8004ef4:	687b      	ldr	r3, [r7, #4]
 8004ef6:	681b      	ldr	r3, [r3, #0]
 8004ef8:	681a      	ldr	r2, [r3, #0]
 8004efa:	687b      	ldr	r3, [r7, #4]
 8004efc:	681b      	ldr	r3, [r3, #0]
 8004efe:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8004f02:	601a      	str	r2, [r3, #0]

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Data size, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, ((hspi->Init.Mode & (SPI_CR1_MSTR | SPI_CR1_SSI)) |
 8004f04:	687b      	ldr	r3, [r7, #4]
 8004f06:	685b      	ldr	r3, [r3, #4]
 8004f08:	f403 7282 	and.w	r2, r3, #260	; 0x104
 8004f0c:	687b      	ldr	r3, [r7, #4]
 8004f0e:	689b      	ldr	r3, [r3, #8]
 8004f10:	f403 4304 	and.w	r3, r3, #33792	; 0x8400
 8004f14:	431a      	orrs	r2, r3
 8004f16:	687b      	ldr	r3, [r7, #4]
 8004f18:	68db      	ldr	r3, [r3, #12]
 8004f1a:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8004f1e:	431a      	orrs	r2, r3
 8004f20:	687b      	ldr	r3, [r7, #4]
 8004f22:	691b      	ldr	r3, [r3, #16]
 8004f24:	f003 0302 	and.w	r3, r3, #2
 8004f28:	431a      	orrs	r2, r3
 8004f2a:	687b      	ldr	r3, [r7, #4]
 8004f2c:	695b      	ldr	r3, [r3, #20]
 8004f2e:	f003 0301 	and.w	r3, r3, #1
 8004f32:	431a      	orrs	r2, r3
 8004f34:	687b      	ldr	r3, [r7, #4]
 8004f36:	699b      	ldr	r3, [r3, #24]
 8004f38:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8004f3c:	431a      	orrs	r2, r3
 8004f3e:	687b      	ldr	r3, [r7, #4]
 8004f40:	69db      	ldr	r3, [r3, #28]
 8004f42:	f003 0338 	and.w	r3, r3, #56	; 0x38
 8004f46:	431a      	orrs	r2, r3
 8004f48:	687b      	ldr	r3, [r7, #4]
 8004f4a:	6a1b      	ldr	r3, [r3, #32]
 8004f4c:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8004f50:	ea42 0103 	orr.w	r1, r2, r3
 8004f54:	687b      	ldr	r3, [r7, #4]
 8004f56:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004f58:	f403 5200 	and.w	r2, r3, #8192	; 0x2000
 8004f5c:	687b      	ldr	r3, [r7, #4]
 8004f5e:	681b      	ldr	r3, [r3, #0]
 8004f60:	430a      	orrs	r2, r1
 8004f62:	601a      	str	r2, [r3, #0]
                                  (hspi->Init.BaudRatePrescaler & SPI_CR1_BR_Msk) |
                                  (hspi->Init.FirstBit  & SPI_CR1_LSBFIRST) |
                                  (hspi->Init.CRCCalculation & SPI_CR1_CRCEN)));

  /* Configure : NSS management, TI Mode */
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) | (hspi->Init.TIMode & SPI_CR2_FRF)));
 8004f64:	687b      	ldr	r3, [r7, #4]
 8004f66:	699b      	ldr	r3, [r3, #24]
 8004f68:	0c1b      	lsrs	r3, r3, #16
 8004f6a:	f003 0104 	and.w	r1, r3, #4
 8004f6e:	687b      	ldr	r3, [r7, #4]
 8004f70:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004f72:	f003 0210 	and.w	r2, r3, #16
 8004f76:	687b      	ldr	r3, [r7, #4]
 8004f78:	681b      	ldr	r3, [r3, #0]
 8004f7a:	430a      	orrs	r2, r1
 8004f7c:	605a      	str	r2, [r3, #4]
  }
#endif /* USE_SPI_CRC */

#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 8004f7e:	687b      	ldr	r3, [r7, #4]
 8004f80:	681b      	ldr	r3, [r3, #0]
 8004f82:	69da      	ldr	r2, [r3, #28]
 8004f84:	687b      	ldr	r3, [r7, #4]
 8004f86:	681b      	ldr	r3, [r3, #0]
 8004f88:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8004f8c:	61da      	str	r2, [r3, #28]
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 8004f8e:	687b      	ldr	r3, [r7, #4]
 8004f90:	2200      	movs	r2, #0
 8004f92:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->State     = HAL_SPI_STATE_READY;
 8004f94:	687b      	ldr	r3, [r7, #4]
 8004f96:	2201      	movs	r2, #1
 8004f98:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

  return HAL_OK;
 8004f9c:	2300      	movs	r3, #0
}
 8004f9e:	4618      	mov	r0, r3
 8004fa0:	3708      	adds	r7, #8
 8004fa2:	46bd      	mov	sp, r7
 8004fa4:	bd80      	pop	{r7, pc}

08004fa6 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8004fa6:	b580      	push	{r7, lr}
 8004fa8:	b082      	sub	sp, #8
 8004faa:	af00      	add	r7, sp, #0
 8004fac:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8004fae:	687b      	ldr	r3, [r7, #4]
 8004fb0:	2b00      	cmp	r3, #0
 8004fb2:	d101      	bne.n	8004fb8 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8004fb4:	2301      	movs	r3, #1
 8004fb6:	e041      	b.n	800503c <HAL_TIM_Base_Init+0x96>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8004fb8:	687b      	ldr	r3, [r7, #4]
 8004fba:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8004fbe:	b2db      	uxtb	r3, r3
 8004fc0:	2b00      	cmp	r3, #0
 8004fc2:	d106      	bne.n	8004fd2 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8004fc4:	687b      	ldr	r3, [r7, #4]
 8004fc6:	2200      	movs	r2, #0
 8004fc8:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8004fcc:	6878      	ldr	r0, [r7, #4]
 8004fce:	f7fc f921 	bl	8001214 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8004fd2:	687b      	ldr	r3, [r7, #4]
 8004fd4:	2202      	movs	r2, #2
 8004fd6:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8004fda:	687b      	ldr	r3, [r7, #4]
 8004fdc:	681a      	ldr	r2, [r3, #0]
 8004fde:	687b      	ldr	r3, [r7, #4]
 8004fe0:	3304      	adds	r3, #4
 8004fe2:	4619      	mov	r1, r3
 8004fe4:	4610      	mov	r0, r2
 8004fe6:	f000 fa95 	bl	8005514 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8004fea:	687b      	ldr	r3, [r7, #4]
 8004fec:	2201      	movs	r2, #1
 8004fee:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8004ff2:	687b      	ldr	r3, [r7, #4]
 8004ff4:	2201      	movs	r2, #1
 8004ff6:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8004ffa:	687b      	ldr	r3, [r7, #4]
 8004ffc:	2201      	movs	r2, #1
 8004ffe:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8005002:	687b      	ldr	r3, [r7, #4]
 8005004:	2201      	movs	r2, #1
 8005006:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 800500a:	687b      	ldr	r3, [r7, #4]
 800500c:	2201      	movs	r2, #1
 800500e:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8005012:	687b      	ldr	r3, [r7, #4]
 8005014:	2201      	movs	r2, #1
 8005016:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 800501a:	687b      	ldr	r3, [r7, #4]
 800501c:	2201      	movs	r2, #1
 800501e:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 8005022:	687b      	ldr	r3, [r7, #4]
 8005024:	2201      	movs	r2, #1
 8005026:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 800502a:	687b      	ldr	r3, [r7, #4]
 800502c:	2201      	movs	r2, #1
 800502e:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8005032:	687b      	ldr	r3, [r7, #4]
 8005034:	2201      	movs	r2, #1
 8005036:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 800503a:	2300      	movs	r3, #0
}
 800503c:	4618      	mov	r0, r3
 800503e:	3708      	adds	r7, #8
 8005040:	46bd      	mov	sp, r7
 8005042:	bd80      	pop	{r7, pc}

08005044 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 8005044:	b480      	push	{r7}
 8005046:	b085      	sub	sp, #20
 8005048:	af00      	add	r7, sp, #0
 800504a:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 800504c:	687b      	ldr	r3, [r7, #4]
 800504e:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8005052:	b2db      	uxtb	r3, r3
 8005054:	2b01      	cmp	r3, #1
 8005056:	d001      	beq.n	800505c <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 8005058:	2301      	movs	r3, #1
 800505a:	e04e      	b.n	80050fa <HAL_TIM_Base_Start_IT+0xb6>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800505c:	687b      	ldr	r3, [r7, #4]
 800505e:	2202      	movs	r2, #2
 8005060:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 8005064:	687b      	ldr	r3, [r7, #4]
 8005066:	681b      	ldr	r3, [r3, #0]
 8005068:	68da      	ldr	r2, [r3, #12]
 800506a:	687b      	ldr	r3, [r7, #4]
 800506c:	681b      	ldr	r3, [r3, #0]
 800506e:	f042 0201 	orr.w	r2, r2, #1
 8005072:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8005074:	687b      	ldr	r3, [r7, #4]
 8005076:	681b      	ldr	r3, [r3, #0]
 8005078:	4a23      	ldr	r2, [pc, #140]	; (8005108 <HAL_TIM_Base_Start_IT+0xc4>)
 800507a:	4293      	cmp	r3, r2
 800507c:	d022      	beq.n	80050c4 <HAL_TIM_Base_Start_IT+0x80>
 800507e:	687b      	ldr	r3, [r7, #4]
 8005080:	681b      	ldr	r3, [r3, #0]
 8005082:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8005086:	d01d      	beq.n	80050c4 <HAL_TIM_Base_Start_IT+0x80>
 8005088:	687b      	ldr	r3, [r7, #4]
 800508a:	681b      	ldr	r3, [r3, #0]
 800508c:	4a1f      	ldr	r2, [pc, #124]	; (800510c <HAL_TIM_Base_Start_IT+0xc8>)
 800508e:	4293      	cmp	r3, r2
 8005090:	d018      	beq.n	80050c4 <HAL_TIM_Base_Start_IT+0x80>
 8005092:	687b      	ldr	r3, [r7, #4]
 8005094:	681b      	ldr	r3, [r3, #0]
 8005096:	4a1e      	ldr	r2, [pc, #120]	; (8005110 <HAL_TIM_Base_Start_IT+0xcc>)
 8005098:	4293      	cmp	r3, r2
 800509a:	d013      	beq.n	80050c4 <HAL_TIM_Base_Start_IT+0x80>
 800509c:	687b      	ldr	r3, [r7, #4]
 800509e:	681b      	ldr	r3, [r3, #0]
 80050a0:	4a1c      	ldr	r2, [pc, #112]	; (8005114 <HAL_TIM_Base_Start_IT+0xd0>)
 80050a2:	4293      	cmp	r3, r2
 80050a4:	d00e      	beq.n	80050c4 <HAL_TIM_Base_Start_IT+0x80>
 80050a6:	687b      	ldr	r3, [r7, #4]
 80050a8:	681b      	ldr	r3, [r3, #0]
 80050aa:	4a1b      	ldr	r2, [pc, #108]	; (8005118 <HAL_TIM_Base_Start_IT+0xd4>)
 80050ac:	4293      	cmp	r3, r2
 80050ae:	d009      	beq.n	80050c4 <HAL_TIM_Base_Start_IT+0x80>
 80050b0:	687b      	ldr	r3, [r7, #4]
 80050b2:	681b      	ldr	r3, [r3, #0]
 80050b4:	4a19      	ldr	r2, [pc, #100]	; (800511c <HAL_TIM_Base_Start_IT+0xd8>)
 80050b6:	4293      	cmp	r3, r2
 80050b8:	d004      	beq.n	80050c4 <HAL_TIM_Base_Start_IT+0x80>
 80050ba:	687b      	ldr	r3, [r7, #4]
 80050bc:	681b      	ldr	r3, [r3, #0]
 80050be:	4a18      	ldr	r2, [pc, #96]	; (8005120 <HAL_TIM_Base_Start_IT+0xdc>)
 80050c0:	4293      	cmp	r3, r2
 80050c2:	d111      	bne.n	80050e8 <HAL_TIM_Base_Start_IT+0xa4>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 80050c4:	687b      	ldr	r3, [r7, #4]
 80050c6:	681b      	ldr	r3, [r3, #0]
 80050c8:	689b      	ldr	r3, [r3, #8]
 80050ca:	f003 0307 	and.w	r3, r3, #7
 80050ce:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80050d0:	68fb      	ldr	r3, [r7, #12]
 80050d2:	2b06      	cmp	r3, #6
 80050d4:	d010      	beq.n	80050f8 <HAL_TIM_Base_Start_IT+0xb4>
    {
      __HAL_TIM_ENABLE(htim);
 80050d6:	687b      	ldr	r3, [r7, #4]
 80050d8:	681b      	ldr	r3, [r3, #0]
 80050da:	681a      	ldr	r2, [r3, #0]
 80050dc:	687b      	ldr	r3, [r7, #4]
 80050de:	681b      	ldr	r3, [r3, #0]
 80050e0:	f042 0201 	orr.w	r2, r2, #1
 80050e4:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80050e6:	e007      	b.n	80050f8 <HAL_TIM_Base_Start_IT+0xb4>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 80050e8:	687b      	ldr	r3, [r7, #4]
 80050ea:	681b      	ldr	r3, [r3, #0]
 80050ec:	681a      	ldr	r2, [r3, #0]
 80050ee:	687b      	ldr	r3, [r7, #4]
 80050f0:	681b      	ldr	r3, [r3, #0]
 80050f2:	f042 0201 	orr.w	r2, r2, #1
 80050f6:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 80050f8:	2300      	movs	r3, #0
}
 80050fa:	4618      	mov	r0, r3
 80050fc:	3714      	adds	r7, #20
 80050fe:	46bd      	mov	sp, r7
 8005100:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005104:	4770      	bx	lr
 8005106:	bf00      	nop
 8005108:	40010000 	.word	0x40010000
 800510c:	40000400 	.word	0x40000400
 8005110:	40000800 	.word	0x40000800
 8005114:	40000c00 	.word	0x40000c00
 8005118:	40010400 	.word	0x40010400
 800511c:	40014000 	.word	0x40014000
 8005120:	40001800 	.word	0x40001800

08005124 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8005124:	b580      	push	{r7, lr}
 8005126:	b082      	sub	sp, #8
 8005128:	af00      	add	r7, sp, #0
 800512a:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 800512c:	687b      	ldr	r3, [r7, #4]
 800512e:	681b      	ldr	r3, [r3, #0]
 8005130:	691b      	ldr	r3, [r3, #16]
 8005132:	f003 0302 	and.w	r3, r3, #2
 8005136:	2b02      	cmp	r3, #2
 8005138:	d122      	bne.n	8005180 <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 800513a:	687b      	ldr	r3, [r7, #4]
 800513c:	681b      	ldr	r3, [r3, #0]
 800513e:	68db      	ldr	r3, [r3, #12]
 8005140:	f003 0302 	and.w	r3, r3, #2
 8005144:	2b02      	cmp	r3, #2
 8005146:	d11b      	bne.n	8005180 <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 8005148:	687b      	ldr	r3, [r7, #4]
 800514a:	681b      	ldr	r3, [r3, #0]
 800514c:	f06f 0202 	mvn.w	r2, #2
 8005150:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8005152:	687b      	ldr	r3, [r7, #4]
 8005154:	2201      	movs	r2, #1
 8005156:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8005158:	687b      	ldr	r3, [r7, #4]
 800515a:	681b      	ldr	r3, [r3, #0]
 800515c:	699b      	ldr	r3, [r3, #24]
 800515e:	f003 0303 	and.w	r3, r3, #3
 8005162:	2b00      	cmp	r3, #0
 8005164:	d003      	beq.n	800516e <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 8005166:	6878      	ldr	r0, [r7, #4]
 8005168:	f000 f9b5 	bl	80054d6 <HAL_TIM_IC_CaptureCallback>
 800516c:	e005      	b.n	800517a <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 800516e:	6878      	ldr	r0, [r7, #4]
 8005170:	f000 f9a7 	bl	80054c2 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8005174:	6878      	ldr	r0, [r7, #4]
 8005176:	f000 f9b8 	bl	80054ea <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800517a:	687b      	ldr	r3, [r7, #4]
 800517c:	2200      	movs	r2, #0
 800517e:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 8005180:	687b      	ldr	r3, [r7, #4]
 8005182:	681b      	ldr	r3, [r3, #0]
 8005184:	691b      	ldr	r3, [r3, #16]
 8005186:	f003 0304 	and.w	r3, r3, #4
 800518a:	2b04      	cmp	r3, #4
 800518c:	d122      	bne.n	80051d4 <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 800518e:	687b      	ldr	r3, [r7, #4]
 8005190:	681b      	ldr	r3, [r3, #0]
 8005192:	68db      	ldr	r3, [r3, #12]
 8005194:	f003 0304 	and.w	r3, r3, #4
 8005198:	2b04      	cmp	r3, #4
 800519a:	d11b      	bne.n	80051d4 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 800519c:	687b      	ldr	r3, [r7, #4]
 800519e:	681b      	ldr	r3, [r3, #0]
 80051a0:	f06f 0204 	mvn.w	r2, #4
 80051a4:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 80051a6:	687b      	ldr	r3, [r7, #4]
 80051a8:	2202      	movs	r2, #2
 80051aa:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 80051ac:	687b      	ldr	r3, [r7, #4]
 80051ae:	681b      	ldr	r3, [r3, #0]
 80051b0:	699b      	ldr	r3, [r3, #24]
 80051b2:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80051b6:	2b00      	cmp	r3, #0
 80051b8:	d003      	beq.n	80051c2 <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80051ba:	6878      	ldr	r0, [r7, #4]
 80051bc:	f000 f98b 	bl	80054d6 <HAL_TIM_IC_CaptureCallback>
 80051c0:	e005      	b.n	80051ce <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80051c2:	6878      	ldr	r0, [r7, #4]
 80051c4:	f000 f97d 	bl	80054c2 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80051c8:	6878      	ldr	r0, [r7, #4]
 80051ca:	f000 f98e 	bl	80054ea <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80051ce:	687b      	ldr	r3, [r7, #4]
 80051d0:	2200      	movs	r2, #0
 80051d2:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 80051d4:	687b      	ldr	r3, [r7, #4]
 80051d6:	681b      	ldr	r3, [r3, #0]
 80051d8:	691b      	ldr	r3, [r3, #16]
 80051da:	f003 0308 	and.w	r3, r3, #8
 80051de:	2b08      	cmp	r3, #8
 80051e0:	d122      	bne.n	8005228 <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 80051e2:	687b      	ldr	r3, [r7, #4]
 80051e4:	681b      	ldr	r3, [r3, #0]
 80051e6:	68db      	ldr	r3, [r3, #12]
 80051e8:	f003 0308 	and.w	r3, r3, #8
 80051ec:	2b08      	cmp	r3, #8
 80051ee:	d11b      	bne.n	8005228 <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 80051f0:	687b      	ldr	r3, [r7, #4]
 80051f2:	681b      	ldr	r3, [r3, #0]
 80051f4:	f06f 0208 	mvn.w	r2, #8
 80051f8:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 80051fa:	687b      	ldr	r3, [r7, #4]
 80051fc:	2204      	movs	r2, #4
 80051fe:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8005200:	687b      	ldr	r3, [r7, #4]
 8005202:	681b      	ldr	r3, [r3, #0]
 8005204:	69db      	ldr	r3, [r3, #28]
 8005206:	f003 0303 	and.w	r3, r3, #3
 800520a:	2b00      	cmp	r3, #0
 800520c:	d003      	beq.n	8005216 <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800520e:	6878      	ldr	r0, [r7, #4]
 8005210:	f000 f961 	bl	80054d6 <HAL_TIM_IC_CaptureCallback>
 8005214:	e005      	b.n	8005222 <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8005216:	6878      	ldr	r0, [r7, #4]
 8005218:	f000 f953 	bl	80054c2 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800521c:	6878      	ldr	r0, [r7, #4]
 800521e:	f000 f964 	bl	80054ea <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8005222:	687b      	ldr	r3, [r7, #4]
 8005224:	2200      	movs	r2, #0
 8005226:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 8005228:	687b      	ldr	r3, [r7, #4]
 800522a:	681b      	ldr	r3, [r3, #0]
 800522c:	691b      	ldr	r3, [r3, #16]
 800522e:	f003 0310 	and.w	r3, r3, #16
 8005232:	2b10      	cmp	r3, #16
 8005234:	d122      	bne.n	800527c <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 8005236:	687b      	ldr	r3, [r7, #4]
 8005238:	681b      	ldr	r3, [r3, #0]
 800523a:	68db      	ldr	r3, [r3, #12]
 800523c:	f003 0310 	and.w	r3, r3, #16
 8005240:	2b10      	cmp	r3, #16
 8005242:	d11b      	bne.n	800527c <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 8005244:	687b      	ldr	r3, [r7, #4]
 8005246:	681b      	ldr	r3, [r3, #0]
 8005248:	f06f 0210 	mvn.w	r2, #16
 800524c:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 800524e:	687b      	ldr	r3, [r7, #4]
 8005250:	2208      	movs	r2, #8
 8005252:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8005254:	687b      	ldr	r3, [r7, #4]
 8005256:	681b      	ldr	r3, [r3, #0]
 8005258:	69db      	ldr	r3, [r3, #28]
 800525a:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800525e:	2b00      	cmp	r3, #0
 8005260:	d003      	beq.n	800526a <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8005262:	6878      	ldr	r0, [r7, #4]
 8005264:	f000 f937 	bl	80054d6 <HAL_TIM_IC_CaptureCallback>
 8005268:	e005      	b.n	8005276 <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800526a:	6878      	ldr	r0, [r7, #4]
 800526c:	f000 f929 	bl	80054c2 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8005270:	6878      	ldr	r0, [r7, #4]
 8005272:	f000 f93a 	bl	80054ea <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8005276:	687b      	ldr	r3, [r7, #4]
 8005278:	2200      	movs	r2, #0
 800527a:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 800527c:	687b      	ldr	r3, [r7, #4]
 800527e:	681b      	ldr	r3, [r3, #0]
 8005280:	691b      	ldr	r3, [r3, #16]
 8005282:	f003 0301 	and.w	r3, r3, #1
 8005286:	2b01      	cmp	r3, #1
 8005288:	d10e      	bne.n	80052a8 <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 800528a:	687b      	ldr	r3, [r7, #4]
 800528c:	681b      	ldr	r3, [r3, #0]
 800528e:	68db      	ldr	r3, [r3, #12]
 8005290:	f003 0301 	and.w	r3, r3, #1
 8005294:	2b01      	cmp	r3, #1
 8005296:	d107      	bne.n	80052a8 <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 8005298:	687b      	ldr	r3, [r7, #4]
 800529a:	681b      	ldr	r3, [r3, #0]
 800529c:	f06f 0201 	mvn.w	r2, #1
 80052a0:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 80052a2:	6878      	ldr	r0, [r7, #4]
 80052a4:	f7fb fd46 	bl	8000d34 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 80052a8:	687b      	ldr	r3, [r7, #4]
 80052aa:	681b      	ldr	r3, [r3, #0]
 80052ac:	691b      	ldr	r3, [r3, #16]
 80052ae:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80052b2:	2b80      	cmp	r3, #128	; 0x80
 80052b4:	d10e      	bne.n	80052d4 <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 80052b6:	687b      	ldr	r3, [r7, #4]
 80052b8:	681b      	ldr	r3, [r3, #0]
 80052ba:	68db      	ldr	r3, [r3, #12]
 80052bc:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80052c0:	2b80      	cmp	r3, #128	; 0x80
 80052c2:	d107      	bne.n	80052d4 <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 80052c4:	687b      	ldr	r3, [r7, #4]
 80052c6:	681b      	ldr	r3, [r3, #0]
 80052c8:	f06f 0280 	mvn.w	r2, #128	; 0x80
 80052cc:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 80052ce:	6878      	ldr	r0, [r7, #4]
 80052d0:	f000 fae0 	bl	8005894 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 80052d4:	687b      	ldr	r3, [r7, #4]
 80052d6:	681b      	ldr	r3, [r3, #0]
 80052d8:	691b      	ldr	r3, [r3, #16]
 80052da:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80052de:	2b40      	cmp	r3, #64	; 0x40
 80052e0:	d10e      	bne.n	8005300 <HAL_TIM_IRQHandler+0x1dc>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 80052e2:	687b      	ldr	r3, [r7, #4]
 80052e4:	681b      	ldr	r3, [r3, #0]
 80052e6:	68db      	ldr	r3, [r3, #12]
 80052e8:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80052ec:	2b40      	cmp	r3, #64	; 0x40
 80052ee:	d107      	bne.n	8005300 <HAL_TIM_IRQHandler+0x1dc>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 80052f0:	687b      	ldr	r3, [r7, #4]
 80052f2:	681b      	ldr	r3, [r3, #0]
 80052f4:	f06f 0240 	mvn.w	r2, #64	; 0x40
 80052f8:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 80052fa:	6878      	ldr	r0, [r7, #4]
 80052fc:	f000 f8ff 	bl	80054fe <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 8005300:	687b      	ldr	r3, [r7, #4]
 8005302:	681b      	ldr	r3, [r3, #0]
 8005304:	691b      	ldr	r3, [r3, #16]
 8005306:	f003 0320 	and.w	r3, r3, #32
 800530a:	2b20      	cmp	r3, #32
 800530c:	d10e      	bne.n	800532c <HAL_TIM_IRQHandler+0x208>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 800530e:	687b      	ldr	r3, [r7, #4]
 8005310:	681b      	ldr	r3, [r3, #0]
 8005312:	68db      	ldr	r3, [r3, #12]
 8005314:	f003 0320 	and.w	r3, r3, #32
 8005318:	2b20      	cmp	r3, #32
 800531a:	d107      	bne.n	800532c <HAL_TIM_IRQHandler+0x208>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 800531c:	687b      	ldr	r3, [r7, #4]
 800531e:	681b      	ldr	r3, [r3, #0]
 8005320:	f06f 0220 	mvn.w	r2, #32
 8005324:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 8005326:	6878      	ldr	r0, [r7, #4]
 8005328:	f000 faaa 	bl	8005880 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 800532c:	bf00      	nop
 800532e:	3708      	adds	r7, #8
 8005330:	46bd      	mov	sp, r7
 8005332:	bd80      	pop	{r7, pc}

08005334 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 8005334:	b580      	push	{r7, lr}
 8005336:	b084      	sub	sp, #16
 8005338:	af00      	add	r7, sp, #0
 800533a:	6078      	str	r0, [r7, #4]
 800533c:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 800533e:	2300      	movs	r3, #0
 8005340:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 8005342:	687b      	ldr	r3, [r7, #4]
 8005344:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8005348:	2b01      	cmp	r3, #1
 800534a:	d101      	bne.n	8005350 <HAL_TIM_ConfigClockSource+0x1c>
 800534c:	2302      	movs	r3, #2
 800534e:	e0b4      	b.n	80054ba <HAL_TIM_ConfigClockSource+0x186>
 8005350:	687b      	ldr	r3, [r7, #4]
 8005352:	2201      	movs	r2, #1
 8005354:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 8005358:	687b      	ldr	r3, [r7, #4]
 800535a:	2202      	movs	r2, #2
 800535c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 8005360:	687b      	ldr	r3, [r7, #4]
 8005362:	681b      	ldr	r3, [r3, #0]
 8005364:	689b      	ldr	r3, [r3, #8]
 8005366:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 8005368:	68bb      	ldr	r3, [r7, #8]
 800536a:	f023 0377 	bic.w	r3, r3, #119	; 0x77
 800536e:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8005370:	68bb      	ldr	r3, [r7, #8]
 8005372:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8005376:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 8005378:	687b      	ldr	r3, [r7, #4]
 800537a:	681b      	ldr	r3, [r3, #0]
 800537c:	68ba      	ldr	r2, [r7, #8]
 800537e:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 8005380:	683b      	ldr	r3, [r7, #0]
 8005382:	681b      	ldr	r3, [r3, #0]
 8005384:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8005388:	d03e      	beq.n	8005408 <HAL_TIM_ConfigClockSource+0xd4>
 800538a:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800538e:	f200 8087 	bhi.w	80054a0 <HAL_TIM_ConfigClockSource+0x16c>
 8005392:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8005396:	f000 8086 	beq.w	80054a6 <HAL_TIM_ConfigClockSource+0x172>
 800539a:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800539e:	d87f      	bhi.n	80054a0 <HAL_TIM_ConfigClockSource+0x16c>
 80053a0:	2b70      	cmp	r3, #112	; 0x70
 80053a2:	d01a      	beq.n	80053da <HAL_TIM_ConfigClockSource+0xa6>
 80053a4:	2b70      	cmp	r3, #112	; 0x70
 80053a6:	d87b      	bhi.n	80054a0 <HAL_TIM_ConfigClockSource+0x16c>
 80053a8:	2b60      	cmp	r3, #96	; 0x60
 80053aa:	d050      	beq.n	800544e <HAL_TIM_ConfigClockSource+0x11a>
 80053ac:	2b60      	cmp	r3, #96	; 0x60
 80053ae:	d877      	bhi.n	80054a0 <HAL_TIM_ConfigClockSource+0x16c>
 80053b0:	2b50      	cmp	r3, #80	; 0x50
 80053b2:	d03c      	beq.n	800542e <HAL_TIM_ConfigClockSource+0xfa>
 80053b4:	2b50      	cmp	r3, #80	; 0x50
 80053b6:	d873      	bhi.n	80054a0 <HAL_TIM_ConfigClockSource+0x16c>
 80053b8:	2b40      	cmp	r3, #64	; 0x40
 80053ba:	d058      	beq.n	800546e <HAL_TIM_ConfigClockSource+0x13a>
 80053bc:	2b40      	cmp	r3, #64	; 0x40
 80053be:	d86f      	bhi.n	80054a0 <HAL_TIM_ConfigClockSource+0x16c>
 80053c0:	2b30      	cmp	r3, #48	; 0x30
 80053c2:	d064      	beq.n	800548e <HAL_TIM_ConfigClockSource+0x15a>
 80053c4:	2b30      	cmp	r3, #48	; 0x30
 80053c6:	d86b      	bhi.n	80054a0 <HAL_TIM_ConfigClockSource+0x16c>
 80053c8:	2b20      	cmp	r3, #32
 80053ca:	d060      	beq.n	800548e <HAL_TIM_ConfigClockSource+0x15a>
 80053cc:	2b20      	cmp	r3, #32
 80053ce:	d867      	bhi.n	80054a0 <HAL_TIM_ConfigClockSource+0x16c>
 80053d0:	2b00      	cmp	r3, #0
 80053d2:	d05c      	beq.n	800548e <HAL_TIM_ConfigClockSource+0x15a>
 80053d4:	2b10      	cmp	r3, #16
 80053d6:	d05a      	beq.n	800548e <HAL_TIM_ConfigClockSource+0x15a>
 80053d8:	e062      	b.n	80054a0 <HAL_TIM_ConfigClockSource+0x16c>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 80053da:	687b      	ldr	r3, [r7, #4]
 80053dc:	6818      	ldr	r0, [r3, #0]
 80053de:	683b      	ldr	r3, [r7, #0]
 80053e0:	6899      	ldr	r1, [r3, #8]
 80053e2:	683b      	ldr	r3, [r7, #0]
 80053e4:	685a      	ldr	r2, [r3, #4]
 80053e6:	683b      	ldr	r3, [r7, #0]
 80053e8:	68db      	ldr	r3, [r3, #12]
 80053ea:	f000 f9ad 	bl	8005748 <TIM_ETR_SetConfig>
                        sClockSourceConfig->ClockPrescaler,
                        sClockSourceConfig->ClockPolarity,
                        sClockSourceConfig->ClockFilter);

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 80053ee:	687b      	ldr	r3, [r7, #4]
 80053f0:	681b      	ldr	r3, [r3, #0]
 80053f2:	689b      	ldr	r3, [r3, #8]
 80053f4:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 80053f6:	68bb      	ldr	r3, [r7, #8]
 80053f8:	f043 0377 	orr.w	r3, r3, #119	; 0x77
 80053fc:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 80053fe:	687b      	ldr	r3, [r7, #4]
 8005400:	681b      	ldr	r3, [r3, #0]
 8005402:	68ba      	ldr	r2, [r7, #8]
 8005404:	609a      	str	r2, [r3, #8]
      break;
 8005406:	e04f      	b.n	80054a8 <HAL_TIM_ConfigClockSource+0x174>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8005408:	687b      	ldr	r3, [r7, #4]
 800540a:	6818      	ldr	r0, [r3, #0]
 800540c:	683b      	ldr	r3, [r7, #0]
 800540e:	6899      	ldr	r1, [r3, #8]
 8005410:	683b      	ldr	r3, [r7, #0]
 8005412:	685a      	ldr	r2, [r3, #4]
 8005414:	683b      	ldr	r3, [r7, #0]
 8005416:	68db      	ldr	r3, [r3, #12]
 8005418:	f000 f996 	bl	8005748 <TIM_ETR_SetConfig>
                        sClockSourceConfig->ClockPrescaler,
                        sClockSourceConfig->ClockPolarity,
                        sClockSourceConfig->ClockFilter);
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 800541c:	687b      	ldr	r3, [r7, #4]
 800541e:	681b      	ldr	r3, [r3, #0]
 8005420:	689a      	ldr	r2, [r3, #8]
 8005422:	687b      	ldr	r3, [r7, #4]
 8005424:	681b      	ldr	r3, [r3, #0]
 8005426:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 800542a:	609a      	str	r2, [r3, #8]
      break;
 800542c:	e03c      	b.n	80054a8 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 800542e:	687b      	ldr	r3, [r7, #4]
 8005430:	6818      	ldr	r0, [r3, #0]
 8005432:	683b      	ldr	r3, [r7, #0]
 8005434:	6859      	ldr	r1, [r3, #4]
 8005436:	683b      	ldr	r3, [r7, #0]
 8005438:	68db      	ldr	r3, [r3, #12]
 800543a:	461a      	mov	r2, r3
 800543c:	f000 f90a 	bl	8005654 <TIM_TI1_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 8005440:	687b      	ldr	r3, [r7, #4]
 8005442:	681b      	ldr	r3, [r3, #0]
 8005444:	2150      	movs	r1, #80	; 0x50
 8005446:	4618      	mov	r0, r3
 8005448:	f000 f963 	bl	8005712 <TIM_ITRx_SetConfig>
      break;
 800544c:	e02c      	b.n	80054a8 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 800544e:	687b      	ldr	r3, [r7, #4]
 8005450:	6818      	ldr	r0, [r3, #0]
 8005452:	683b      	ldr	r3, [r7, #0]
 8005454:	6859      	ldr	r1, [r3, #4]
 8005456:	683b      	ldr	r3, [r7, #0]
 8005458:	68db      	ldr	r3, [r3, #12]
 800545a:	461a      	mov	r2, r3
 800545c:	f000 f929 	bl	80056b2 <TIM_TI2_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 8005460:	687b      	ldr	r3, [r7, #4]
 8005462:	681b      	ldr	r3, [r3, #0]
 8005464:	2160      	movs	r1, #96	; 0x60
 8005466:	4618      	mov	r0, r3
 8005468:	f000 f953 	bl	8005712 <TIM_ITRx_SetConfig>
      break;
 800546c:	e01c      	b.n	80054a8 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 800546e:	687b      	ldr	r3, [r7, #4]
 8005470:	6818      	ldr	r0, [r3, #0]
 8005472:	683b      	ldr	r3, [r7, #0]
 8005474:	6859      	ldr	r1, [r3, #4]
 8005476:	683b      	ldr	r3, [r7, #0]
 8005478:	68db      	ldr	r3, [r3, #12]
 800547a:	461a      	mov	r2, r3
 800547c:	f000 f8ea 	bl	8005654 <TIM_TI1_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 8005480:	687b      	ldr	r3, [r7, #4]
 8005482:	681b      	ldr	r3, [r3, #0]
 8005484:	2140      	movs	r1, #64	; 0x40
 8005486:	4618      	mov	r0, r3
 8005488:	f000 f943 	bl	8005712 <TIM_ITRx_SetConfig>
      break;
 800548c:	e00c      	b.n	80054a8 <HAL_TIM_ConfigClockSource+0x174>
    case TIM_CLOCKSOURCE_ITR3:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_ITRX_INSTANCE(htim->Instance));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 800548e:	687b      	ldr	r3, [r7, #4]
 8005490:	681a      	ldr	r2, [r3, #0]
 8005492:	683b      	ldr	r3, [r7, #0]
 8005494:	681b      	ldr	r3, [r3, #0]
 8005496:	4619      	mov	r1, r3
 8005498:	4610      	mov	r0, r2
 800549a:	f000 f93a 	bl	8005712 <TIM_ITRx_SetConfig>
      break;
 800549e:	e003      	b.n	80054a8 <HAL_TIM_ConfigClockSource+0x174>
    }

    default:
      status = HAL_ERROR;
 80054a0:	2301      	movs	r3, #1
 80054a2:	73fb      	strb	r3, [r7, #15]
      break;
 80054a4:	e000      	b.n	80054a8 <HAL_TIM_ConfigClockSource+0x174>
      break;
 80054a6:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 80054a8:	687b      	ldr	r3, [r7, #4]
 80054aa:	2201      	movs	r2, #1
 80054ac:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 80054b0:	687b      	ldr	r3, [r7, #4]
 80054b2:	2200      	movs	r2, #0
 80054b4:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 80054b8:	7bfb      	ldrb	r3, [r7, #15]
}
 80054ba:	4618      	mov	r0, r3
 80054bc:	3710      	adds	r7, #16
 80054be:	46bd      	mov	sp, r7
 80054c0:	bd80      	pop	{r7, pc}

080054c2 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 80054c2:	b480      	push	{r7}
 80054c4:	b083      	sub	sp, #12
 80054c6:	af00      	add	r7, sp, #0
 80054c8:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 80054ca:	bf00      	nop
 80054cc:	370c      	adds	r7, #12
 80054ce:	46bd      	mov	sp, r7
 80054d0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80054d4:	4770      	bx	lr

080054d6 <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 80054d6:	b480      	push	{r7}
 80054d8:	b083      	sub	sp, #12
 80054da:	af00      	add	r7, sp, #0
 80054dc:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 80054de:	bf00      	nop
 80054e0:	370c      	adds	r7, #12
 80054e2:	46bd      	mov	sp, r7
 80054e4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80054e8:	4770      	bx	lr

080054ea <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 80054ea:	b480      	push	{r7}
 80054ec:	b083      	sub	sp, #12
 80054ee:	af00      	add	r7, sp, #0
 80054f0:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 80054f2:	bf00      	nop
 80054f4:	370c      	adds	r7, #12
 80054f6:	46bd      	mov	sp, r7
 80054f8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80054fc:	4770      	bx	lr

080054fe <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 80054fe:	b480      	push	{r7}
 8005500:	b083      	sub	sp, #12
 8005502:	af00      	add	r7, sp, #0
 8005504:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 8005506:	bf00      	nop
 8005508:	370c      	adds	r7, #12
 800550a:	46bd      	mov	sp, r7
 800550c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005510:	4770      	bx	lr
	...

08005514 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 8005514:	b480      	push	{r7}
 8005516:	b085      	sub	sp, #20
 8005518:	af00      	add	r7, sp, #0
 800551a:	6078      	str	r0, [r7, #4]
 800551c:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 800551e:	687b      	ldr	r3, [r7, #4]
 8005520:	681b      	ldr	r3, [r3, #0]
 8005522:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8005524:	687b      	ldr	r3, [r7, #4]
 8005526:	4a40      	ldr	r2, [pc, #256]	; (8005628 <TIM_Base_SetConfig+0x114>)
 8005528:	4293      	cmp	r3, r2
 800552a:	d013      	beq.n	8005554 <TIM_Base_SetConfig+0x40>
 800552c:	687b      	ldr	r3, [r7, #4]
 800552e:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8005532:	d00f      	beq.n	8005554 <TIM_Base_SetConfig+0x40>
 8005534:	687b      	ldr	r3, [r7, #4]
 8005536:	4a3d      	ldr	r2, [pc, #244]	; (800562c <TIM_Base_SetConfig+0x118>)
 8005538:	4293      	cmp	r3, r2
 800553a:	d00b      	beq.n	8005554 <TIM_Base_SetConfig+0x40>
 800553c:	687b      	ldr	r3, [r7, #4]
 800553e:	4a3c      	ldr	r2, [pc, #240]	; (8005630 <TIM_Base_SetConfig+0x11c>)
 8005540:	4293      	cmp	r3, r2
 8005542:	d007      	beq.n	8005554 <TIM_Base_SetConfig+0x40>
 8005544:	687b      	ldr	r3, [r7, #4]
 8005546:	4a3b      	ldr	r2, [pc, #236]	; (8005634 <TIM_Base_SetConfig+0x120>)
 8005548:	4293      	cmp	r3, r2
 800554a:	d003      	beq.n	8005554 <TIM_Base_SetConfig+0x40>
 800554c:	687b      	ldr	r3, [r7, #4]
 800554e:	4a3a      	ldr	r2, [pc, #232]	; (8005638 <TIM_Base_SetConfig+0x124>)
 8005550:	4293      	cmp	r3, r2
 8005552:	d108      	bne.n	8005566 <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8005554:	68fb      	ldr	r3, [r7, #12]
 8005556:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800555a:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 800555c:	683b      	ldr	r3, [r7, #0]
 800555e:	685b      	ldr	r3, [r3, #4]
 8005560:	68fa      	ldr	r2, [r7, #12]
 8005562:	4313      	orrs	r3, r2
 8005564:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8005566:	687b      	ldr	r3, [r7, #4]
 8005568:	4a2f      	ldr	r2, [pc, #188]	; (8005628 <TIM_Base_SetConfig+0x114>)
 800556a:	4293      	cmp	r3, r2
 800556c:	d02b      	beq.n	80055c6 <TIM_Base_SetConfig+0xb2>
 800556e:	687b      	ldr	r3, [r7, #4]
 8005570:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8005574:	d027      	beq.n	80055c6 <TIM_Base_SetConfig+0xb2>
 8005576:	687b      	ldr	r3, [r7, #4]
 8005578:	4a2c      	ldr	r2, [pc, #176]	; (800562c <TIM_Base_SetConfig+0x118>)
 800557a:	4293      	cmp	r3, r2
 800557c:	d023      	beq.n	80055c6 <TIM_Base_SetConfig+0xb2>
 800557e:	687b      	ldr	r3, [r7, #4]
 8005580:	4a2b      	ldr	r2, [pc, #172]	; (8005630 <TIM_Base_SetConfig+0x11c>)
 8005582:	4293      	cmp	r3, r2
 8005584:	d01f      	beq.n	80055c6 <TIM_Base_SetConfig+0xb2>
 8005586:	687b      	ldr	r3, [r7, #4]
 8005588:	4a2a      	ldr	r2, [pc, #168]	; (8005634 <TIM_Base_SetConfig+0x120>)
 800558a:	4293      	cmp	r3, r2
 800558c:	d01b      	beq.n	80055c6 <TIM_Base_SetConfig+0xb2>
 800558e:	687b      	ldr	r3, [r7, #4]
 8005590:	4a29      	ldr	r2, [pc, #164]	; (8005638 <TIM_Base_SetConfig+0x124>)
 8005592:	4293      	cmp	r3, r2
 8005594:	d017      	beq.n	80055c6 <TIM_Base_SetConfig+0xb2>
 8005596:	687b      	ldr	r3, [r7, #4]
 8005598:	4a28      	ldr	r2, [pc, #160]	; (800563c <TIM_Base_SetConfig+0x128>)
 800559a:	4293      	cmp	r3, r2
 800559c:	d013      	beq.n	80055c6 <TIM_Base_SetConfig+0xb2>
 800559e:	687b      	ldr	r3, [r7, #4]
 80055a0:	4a27      	ldr	r2, [pc, #156]	; (8005640 <TIM_Base_SetConfig+0x12c>)
 80055a2:	4293      	cmp	r3, r2
 80055a4:	d00f      	beq.n	80055c6 <TIM_Base_SetConfig+0xb2>
 80055a6:	687b      	ldr	r3, [r7, #4]
 80055a8:	4a26      	ldr	r2, [pc, #152]	; (8005644 <TIM_Base_SetConfig+0x130>)
 80055aa:	4293      	cmp	r3, r2
 80055ac:	d00b      	beq.n	80055c6 <TIM_Base_SetConfig+0xb2>
 80055ae:	687b      	ldr	r3, [r7, #4]
 80055b0:	4a25      	ldr	r2, [pc, #148]	; (8005648 <TIM_Base_SetConfig+0x134>)
 80055b2:	4293      	cmp	r3, r2
 80055b4:	d007      	beq.n	80055c6 <TIM_Base_SetConfig+0xb2>
 80055b6:	687b      	ldr	r3, [r7, #4]
 80055b8:	4a24      	ldr	r2, [pc, #144]	; (800564c <TIM_Base_SetConfig+0x138>)
 80055ba:	4293      	cmp	r3, r2
 80055bc:	d003      	beq.n	80055c6 <TIM_Base_SetConfig+0xb2>
 80055be:	687b      	ldr	r3, [r7, #4]
 80055c0:	4a23      	ldr	r2, [pc, #140]	; (8005650 <TIM_Base_SetConfig+0x13c>)
 80055c2:	4293      	cmp	r3, r2
 80055c4:	d108      	bne.n	80055d8 <TIM_Base_SetConfig+0xc4>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 80055c6:	68fb      	ldr	r3, [r7, #12]
 80055c8:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80055cc:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 80055ce:	683b      	ldr	r3, [r7, #0]
 80055d0:	68db      	ldr	r3, [r3, #12]
 80055d2:	68fa      	ldr	r2, [r7, #12]
 80055d4:	4313      	orrs	r3, r2
 80055d6:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 80055d8:	68fb      	ldr	r3, [r7, #12]
 80055da:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 80055de:	683b      	ldr	r3, [r7, #0]
 80055e0:	695b      	ldr	r3, [r3, #20]
 80055e2:	4313      	orrs	r3, r2
 80055e4:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 80055e6:	687b      	ldr	r3, [r7, #4]
 80055e8:	68fa      	ldr	r2, [r7, #12]
 80055ea:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 80055ec:	683b      	ldr	r3, [r7, #0]
 80055ee:	689a      	ldr	r2, [r3, #8]
 80055f0:	687b      	ldr	r3, [r7, #4]
 80055f2:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 80055f4:	683b      	ldr	r3, [r7, #0]
 80055f6:	681a      	ldr	r2, [r3, #0]
 80055f8:	687b      	ldr	r3, [r7, #4]
 80055fa:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 80055fc:	687b      	ldr	r3, [r7, #4]
 80055fe:	4a0a      	ldr	r2, [pc, #40]	; (8005628 <TIM_Base_SetConfig+0x114>)
 8005600:	4293      	cmp	r3, r2
 8005602:	d003      	beq.n	800560c <TIM_Base_SetConfig+0xf8>
 8005604:	687b      	ldr	r3, [r7, #4]
 8005606:	4a0c      	ldr	r2, [pc, #48]	; (8005638 <TIM_Base_SetConfig+0x124>)
 8005608:	4293      	cmp	r3, r2
 800560a:	d103      	bne.n	8005614 <TIM_Base_SetConfig+0x100>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 800560c:	683b      	ldr	r3, [r7, #0]
 800560e:	691a      	ldr	r2, [r3, #16]
 8005610:	687b      	ldr	r3, [r7, #4]
 8005612:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8005614:	687b      	ldr	r3, [r7, #4]
 8005616:	2201      	movs	r2, #1
 8005618:	615a      	str	r2, [r3, #20]
}
 800561a:	bf00      	nop
 800561c:	3714      	adds	r7, #20
 800561e:	46bd      	mov	sp, r7
 8005620:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005624:	4770      	bx	lr
 8005626:	bf00      	nop
 8005628:	40010000 	.word	0x40010000
 800562c:	40000400 	.word	0x40000400
 8005630:	40000800 	.word	0x40000800
 8005634:	40000c00 	.word	0x40000c00
 8005638:	40010400 	.word	0x40010400
 800563c:	40014000 	.word	0x40014000
 8005640:	40014400 	.word	0x40014400
 8005644:	40014800 	.word	0x40014800
 8005648:	40001800 	.word	0x40001800
 800564c:	40001c00 	.word	0x40001c00
 8005650:	40002000 	.word	0x40002000

08005654 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8005654:	b480      	push	{r7}
 8005656:	b087      	sub	sp, #28
 8005658:	af00      	add	r7, sp, #0
 800565a:	60f8      	str	r0, [r7, #12]
 800565c:	60b9      	str	r1, [r7, #8]
 800565e:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 8005660:	68fb      	ldr	r3, [r7, #12]
 8005662:	6a1b      	ldr	r3, [r3, #32]
 8005664:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8005666:	68fb      	ldr	r3, [r7, #12]
 8005668:	6a1b      	ldr	r3, [r3, #32]
 800566a:	f023 0201 	bic.w	r2, r3, #1
 800566e:	68fb      	ldr	r3, [r7, #12]
 8005670:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8005672:	68fb      	ldr	r3, [r7, #12]
 8005674:	699b      	ldr	r3, [r3, #24]
 8005676:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8005678:	693b      	ldr	r3, [r7, #16]
 800567a:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 800567e:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 8005680:	687b      	ldr	r3, [r7, #4]
 8005682:	011b      	lsls	r3, r3, #4
 8005684:	693a      	ldr	r2, [r7, #16]
 8005686:	4313      	orrs	r3, r2
 8005688:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 800568a:	697b      	ldr	r3, [r7, #20]
 800568c:	f023 030a 	bic.w	r3, r3, #10
 8005690:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 8005692:	697a      	ldr	r2, [r7, #20]
 8005694:	68bb      	ldr	r3, [r7, #8]
 8005696:	4313      	orrs	r3, r2
 8005698:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 800569a:	68fb      	ldr	r3, [r7, #12]
 800569c:	693a      	ldr	r2, [r7, #16]
 800569e:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 80056a0:	68fb      	ldr	r3, [r7, #12]
 80056a2:	697a      	ldr	r2, [r7, #20]
 80056a4:	621a      	str	r2, [r3, #32]
}
 80056a6:	bf00      	nop
 80056a8:	371c      	adds	r7, #28
 80056aa:	46bd      	mov	sp, r7
 80056ac:	f85d 7b04 	ldr.w	r7, [sp], #4
 80056b0:	4770      	bx	lr

080056b2 <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 80056b2:	b480      	push	{r7}
 80056b4:	b087      	sub	sp, #28
 80056b6:	af00      	add	r7, sp, #0
 80056b8:	60f8      	str	r0, [r7, #12]
 80056ba:	60b9      	str	r1, [r7, #8]
 80056bc:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 80056be:	68fb      	ldr	r3, [r7, #12]
 80056c0:	6a1b      	ldr	r3, [r3, #32]
 80056c2:	f023 0210 	bic.w	r2, r3, #16
 80056c6:	68fb      	ldr	r3, [r7, #12]
 80056c8:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 80056ca:	68fb      	ldr	r3, [r7, #12]
 80056cc:	699b      	ldr	r3, [r3, #24]
 80056ce:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 80056d0:	68fb      	ldr	r3, [r7, #12]
 80056d2:	6a1b      	ldr	r3, [r3, #32]
 80056d4:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 80056d6:	697b      	ldr	r3, [r7, #20]
 80056d8:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 80056dc:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 80056de:	687b      	ldr	r3, [r7, #4]
 80056e0:	031b      	lsls	r3, r3, #12
 80056e2:	697a      	ldr	r2, [r7, #20]
 80056e4:	4313      	orrs	r3, r2
 80056e6:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 80056e8:	693b      	ldr	r3, [r7, #16]
 80056ea:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 80056ee:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity << 4U);
 80056f0:	68bb      	ldr	r3, [r7, #8]
 80056f2:	011b      	lsls	r3, r3, #4
 80056f4:	693a      	ldr	r2, [r7, #16]
 80056f6:	4313      	orrs	r3, r2
 80056f8:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 80056fa:	68fb      	ldr	r3, [r7, #12]
 80056fc:	697a      	ldr	r2, [r7, #20]
 80056fe:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8005700:	68fb      	ldr	r3, [r7, #12]
 8005702:	693a      	ldr	r2, [r7, #16]
 8005704:	621a      	str	r2, [r3, #32]
}
 8005706:	bf00      	nop
 8005708:	371c      	adds	r7, #28
 800570a:	46bd      	mov	sp, r7
 800570c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005710:	4770      	bx	lr

08005712 <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 8005712:	b480      	push	{r7}
 8005714:	b085      	sub	sp, #20
 8005716:	af00      	add	r7, sp, #0
 8005718:	6078      	str	r0, [r7, #4]
 800571a:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 800571c:	687b      	ldr	r3, [r7, #4]
 800571e:	689b      	ldr	r3, [r3, #8]
 8005720:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 8005722:	68fb      	ldr	r3, [r7, #12]
 8005724:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8005728:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 800572a:	683a      	ldr	r2, [r7, #0]
 800572c:	68fb      	ldr	r3, [r7, #12]
 800572e:	4313      	orrs	r3, r2
 8005730:	f043 0307 	orr.w	r3, r3, #7
 8005734:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8005736:	687b      	ldr	r3, [r7, #4]
 8005738:	68fa      	ldr	r2, [r7, #12]
 800573a:	609a      	str	r2, [r3, #8]
}
 800573c:	bf00      	nop
 800573e:	3714      	adds	r7, #20
 8005740:	46bd      	mov	sp, r7
 8005742:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005746:	4770      	bx	lr

08005748 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 8005748:	b480      	push	{r7}
 800574a:	b087      	sub	sp, #28
 800574c:	af00      	add	r7, sp, #0
 800574e:	60f8      	str	r0, [r7, #12]
 8005750:	60b9      	str	r1, [r7, #8]
 8005752:	607a      	str	r2, [r7, #4]
 8005754:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 8005756:	68fb      	ldr	r3, [r7, #12]
 8005758:	689b      	ldr	r3, [r3, #8]
 800575a:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 800575c:	697b      	ldr	r3, [r7, #20]
 800575e:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8005762:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 8005764:	683b      	ldr	r3, [r7, #0]
 8005766:	021a      	lsls	r2, r3, #8
 8005768:	687b      	ldr	r3, [r7, #4]
 800576a:	431a      	orrs	r2, r3
 800576c:	68bb      	ldr	r3, [r7, #8]
 800576e:	4313      	orrs	r3, r2
 8005770:	697a      	ldr	r2, [r7, #20]
 8005772:	4313      	orrs	r3, r2
 8005774:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8005776:	68fb      	ldr	r3, [r7, #12]
 8005778:	697a      	ldr	r2, [r7, #20]
 800577a:	609a      	str	r2, [r3, #8]
}
 800577c:	bf00      	nop
 800577e:	371c      	adds	r7, #28
 8005780:	46bd      	mov	sp, r7
 8005782:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005786:	4770      	bx	lr

08005788 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        TIM_MasterConfigTypeDef *sMasterConfig)
{
 8005788:	b480      	push	{r7}
 800578a:	b085      	sub	sp, #20
 800578c:	af00      	add	r7, sp, #0
 800578e:	6078      	str	r0, [r7, #4]
 8005790:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 8005792:	687b      	ldr	r3, [r7, #4]
 8005794:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8005798:	2b01      	cmp	r3, #1
 800579a:	d101      	bne.n	80057a0 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 800579c:	2302      	movs	r3, #2
 800579e:	e05a      	b.n	8005856 <HAL_TIMEx_MasterConfigSynchronization+0xce>
 80057a0:	687b      	ldr	r3, [r7, #4]
 80057a2:	2201      	movs	r2, #1
 80057a4:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 80057a8:	687b      	ldr	r3, [r7, #4]
 80057aa:	2202      	movs	r2, #2
 80057ac:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 80057b0:	687b      	ldr	r3, [r7, #4]
 80057b2:	681b      	ldr	r3, [r3, #0]
 80057b4:	685b      	ldr	r3, [r3, #4]
 80057b6:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 80057b8:	687b      	ldr	r3, [r7, #4]
 80057ba:	681b      	ldr	r3, [r3, #0]
 80057bc:	689b      	ldr	r3, [r3, #8]
 80057be:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 80057c0:	68fb      	ldr	r3, [r7, #12]
 80057c2:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80057c6:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 80057c8:	683b      	ldr	r3, [r7, #0]
 80057ca:	681b      	ldr	r3, [r3, #0]
 80057cc:	68fa      	ldr	r2, [r7, #12]
 80057ce:	4313      	orrs	r3, r2
 80057d0:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 80057d2:	687b      	ldr	r3, [r7, #4]
 80057d4:	681b      	ldr	r3, [r3, #0]
 80057d6:	68fa      	ldr	r2, [r7, #12]
 80057d8:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 80057da:	687b      	ldr	r3, [r7, #4]
 80057dc:	681b      	ldr	r3, [r3, #0]
 80057de:	4a21      	ldr	r2, [pc, #132]	; (8005864 <HAL_TIMEx_MasterConfigSynchronization+0xdc>)
 80057e0:	4293      	cmp	r3, r2
 80057e2:	d022      	beq.n	800582a <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 80057e4:	687b      	ldr	r3, [r7, #4]
 80057e6:	681b      	ldr	r3, [r3, #0]
 80057e8:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80057ec:	d01d      	beq.n	800582a <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 80057ee:	687b      	ldr	r3, [r7, #4]
 80057f0:	681b      	ldr	r3, [r3, #0]
 80057f2:	4a1d      	ldr	r2, [pc, #116]	; (8005868 <HAL_TIMEx_MasterConfigSynchronization+0xe0>)
 80057f4:	4293      	cmp	r3, r2
 80057f6:	d018      	beq.n	800582a <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 80057f8:	687b      	ldr	r3, [r7, #4]
 80057fa:	681b      	ldr	r3, [r3, #0]
 80057fc:	4a1b      	ldr	r2, [pc, #108]	; (800586c <HAL_TIMEx_MasterConfigSynchronization+0xe4>)
 80057fe:	4293      	cmp	r3, r2
 8005800:	d013      	beq.n	800582a <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8005802:	687b      	ldr	r3, [r7, #4]
 8005804:	681b      	ldr	r3, [r3, #0]
 8005806:	4a1a      	ldr	r2, [pc, #104]	; (8005870 <HAL_TIMEx_MasterConfigSynchronization+0xe8>)
 8005808:	4293      	cmp	r3, r2
 800580a:	d00e      	beq.n	800582a <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 800580c:	687b      	ldr	r3, [r7, #4]
 800580e:	681b      	ldr	r3, [r3, #0]
 8005810:	4a18      	ldr	r2, [pc, #96]	; (8005874 <HAL_TIMEx_MasterConfigSynchronization+0xec>)
 8005812:	4293      	cmp	r3, r2
 8005814:	d009      	beq.n	800582a <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8005816:	687b      	ldr	r3, [r7, #4]
 8005818:	681b      	ldr	r3, [r3, #0]
 800581a:	4a17      	ldr	r2, [pc, #92]	; (8005878 <HAL_TIMEx_MasterConfigSynchronization+0xf0>)
 800581c:	4293      	cmp	r3, r2
 800581e:	d004      	beq.n	800582a <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8005820:	687b      	ldr	r3, [r7, #4]
 8005822:	681b      	ldr	r3, [r3, #0]
 8005824:	4a15      	ldr	r2, [pc, #84]	; (800587c <HAL_TIMEx_MasterConfigSynchronization+0xf4>)
 8005826:	4293      	cmp	r3, r2
 8005828:	d10c      	bne.n	8005844 <HAL_TIMEx_MasterConfigSynchronization+0xbc>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 800582a:	68bb      	ldr	r3, [r7, #8]
 800582c:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8005830:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8005832:	683b      	ldr	r3, [r7, #0]
 8005834:	685b      	ldr	r3, [r3, #4]
 8005836:	68ba      	ldr	r2, [r7, #8]
 8005838:	4313      	orrs	r3, r2
 800583a:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 800583c:	687b      	ldr	r3, [r7, #4]
 800583e:	681b      	ldr	r3, [r3, #0]
 8005840:	68ba      	ldr	r2, [r7, #8]
 8005842:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8005844:	687b      	ldr	r3, [r7, #4]
 8005846:	2201      	movs	r2, #1
 8005848:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 800584c:	687b      	ldr	r3, [r7, #4]
 800584e:	2200      	movs	r2, #0
 8005850:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8005854:	2300      	movs	r3, #0
}
 8005856:	4618      	mov	r0, r3
 8005858:	3714      	adds	r7, #20
 800585a:	46bd      	mov	sp, r7
 800585c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005860:	4770      	bx	lr
 8005862:	bf00      	nop
 8005864:	40010000 	.word	0x40010000
 8005868:	40000400 	.word	0x40000400
 800586c:	40000800 	.word	0x40000800
 8005870:	40000c00 	.word	0x40000c00
 8005874:	40010400 	.word	0x40010400
 8005878:	40014000 	.word	0x40014000
 800587c:	40001800 	.word	0x40001800

08005880 <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 8005880:	b480      	push	{r7}
 8005882:	b083      	sub	sp, #12
 8005884:	af00      	add	r7, sp, #0
 8005886:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 8005888:	bf00      	nop
 800588a:	370c      	adds	r7, #12
 800588c:	46bd      	mov	sp, r7
 800588e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005892:	4770      	bx	lr

08005894 <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 8005894:	b480      	push	{r7}
 8005896:	b083      	sub	sp, #12
 8005898:	af00      	add	r7, sp, #0
 800589a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 800589c:	bf00      	nop
 800589e:	370c      	adds	r7, #12
 80058a0:	46bd      	mov	sp, r7
 80058a2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80058a6:	4770      	bx	lr

080058a8 <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 80058a8:	b580      	push	{r7, lr}
 80058aa:	b082      	sub	sp, #8
 80058ac:	af00      	add	r7, sp, #0
 80058ae:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 80058b0:	687b      	ldr	r3, [r7, #4]
 80058b2:	2b00      	cmp	r3, #0
 80058b4:	d101      	bne.n	80058ba <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 80058b6:	2301      	movs	r3, #1
 80058b8:	e03f      	b.n	800593a <HAL_UART_Init+0x92>
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));

  if (huart->gState == HAL_UART_STATE_RESET)
 80058ba:	687b      	ldr	r3, [r7, #4]
 80058bc:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80058c0:	b2db      	uxtb	r3, r3
 80058c2:	2b00      	cmp	r3, #0
 80058c4:	d106      	bne.n	80058d4 <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 80058c6:	687b      	ldr	r3, [r7, #4]
 80058c8:	2200      	movs	r2, #0
 80058ca:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 80058ce:	6878      	ldr	r0, [r7, #4]
 80058d0:	f7fb fcc2 	bl	8001258 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 80058d4:	687b      	ldr	r3, [r7, #4]
 80058d6:	2224      	movs	r2, #36	; 0x24
 80058d8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 80058dc:	687b      	ldr	r3, [r7, #4]
 80058de:	681b      	ldr	r3, [r3, #0]
 80058e0:	68da      	ldr	r2, [r3, #12]
 80058e2:	687b      	ldr	r3, [r7, #4]
 80058e4:	681b      	ldr	r3, [r3, #0]
 80058e6:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 80058ea:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 80058ec:	6878      	ldr	r0, [r7, #4]
 80058ee:	f000 f929 	bl	8005b44 <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 80058f2:	687b      	ldr	r3, [r7, #4]
 80058f4:	681b      	ldr	r3, [r3, #0]
 80058f6:	691a      	ldr	r2, [r3, #16]
 80058f8:	687b      	ldr	r3, [r7, #4]
 80058fa:	681b      	ldr	r3, [r3, #0]
 80058fc:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 8005900:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8005902:	687b      	ldr	r3, [r7, #4]
 8005904:	681b      	ldr	r3, [r3, #0]
 8005906:	695a      	ldr	r2, [r3, #20]
 8005908:	687b      	ldr	r3, [r7, #4]
 800590a:	681b      	ldr	r3, [r3, #0]
 800590c:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 8005910:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 8005912:	687b      	ldr	r3, [r7, #4]
 8005914:	681b      	ldr	r3, [r3, #0]
 8005916:	68da      	ldr	r2, [r3, #12]
 8005918:	687b      	ldr	r3, [r7, #4]
 800591a:	681b      	ldr	r3, [r3, #0]
 800591c:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8005920:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8005922:	687b      	ldr	r3, [r7, #4]
 8005924:	2200      	movs	r2, #0
 8005926:	641a      	str	r2, [r3, #64]	; 0x40
  huart->gState = HAL_UART_STATE_READY;
 8005928:	687b      	ldr	r3, [r7, #4]
 800592a:	2220      	movs	r2, #32
 800592c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  huart->RxState = HAL_UART_STATE_READY;
 8005930:	687b      	ldr	r3, [r7, #4]
 8005932:	2220      	movs	r2, #32
 8005934:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 8005938:	2300      	movs	r3, #0
}
 800593a:	4618      	mov	r0, r3
 800593c:	3708      	adds	r7, #8
 800593e:	46bd      	mov	sp, r7
 8005940:	bd80      	pop	{r7, pc}

08005942 <HAL_UART_Transmit>:
  * @param  Size  Amount of data elements (u8 or u16) to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8005942:	b580      	push	{r7, lr}
 8005944:	b08a      	sub	sp, #40	; 0x28
 8005946:	af02      	add	r7, sp, #8
 8005948:	60f8      	str	r0, [r7, #12]
 800594a:	60b9      	str	r1, [r7, #8]
 800594c:	603b      	str	r3, [r7, #0]
 800594e:	4613      	mov	r3, r2
 8005950:	80fb      	strh	r3, [r7, #6]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart = 0U;
 8005952:	2300      	movs	r3, #0
 8005954:	617b      	str	r3, [r7, #20]

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8005956:	68fb      	ldr	r3, [r7, #12]
 8005958:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800595c:	b2db      	uxtb	r3, r3
 800595e:	2b20      	cmp	r3, #32
 8005960:	d17c      	bne.n	8005a5c <HAL_UART_Transmit+0x11a>
  {
    if ((pData == NULL) || (Size == 0U))
 8005962:	68bb      	ldr	r3, [r7, #8]
 8005964:	2b00      	cmp	r3, #0
 8005966:	d002      	beq.n	800596e <HAL_UART_Transmit+0x2c>
 8005968:	88fb      	ldrh	r3, [r7, #6]
 800596a:	2b00      	cmp	r3, #0
 800596c:	d101      	bne.n	8005972 <HAL_UART_Transmit+0x30>
    {
      return  HAL_ERROR;
 800596e:	2301      	movs	r3, #1
 8005970:	e075      	b.n	8005a5e <HAL_UART_Transmit+0x11c>
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 8005972:	68fb      	ldr	r3, [r7, #12]
 8005974:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8005978:	2b01      	cmp	r3, #1
 800597a:	d101      	bne.n	8005980 <HAL_UART_Transmit+0x3e>
 800597c:	2302      	movs	r3, #2
 800597e:	e06e      	b.n	8005a5e <HAL_UART_Transmit+0x11c>
 8005980:	68fb      	ldr	r3, [r7, #12]
 8005982:	2201      	movs	r2, #1
 8005984:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8005988:	68fb      	ldr	r3, [r7, #12]
 800598a:	2200      	movs	r2, #0
 800598c:	641a      	str	r2, [r3, #64]	; 0x40
    huart->gState = HAL_UART_STATE_BUSY_TX;
 800598e:	68fb      	ldr	r3, [r7, #12]
 8005990:	2221      	movs	r2, #33	; 0x21
 8005992:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 8005996:	f7fc f8b1 	bl	8001afc <HAL_GetTick>
 800599a:	6178      	str	r0, [r7, #20]

    huart->TxXferSize = Size;
 800599c:	68fb      	ldr	r3, [r7, #12]
 800599e:	88fa      	ldrh	r2, [r7, #6]
 80059a0:	849a      	strh	r2, [r3, #36]	; 0x24
    huart->TxXferCount = Size;
 80059a2:	68fb      	ldr	r3, [r7, #12]
 80059a4:	88fa      	ldrh	r2, [r7, #6]
 80059a6:	84da      	strh	r2, [r3, #38]	; 0x26

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 80059a8:	68fb      	ldr	r3, [r7, #12]
 80059aa:	689b      	ldr	r3, [r3, #8]
 80059ac:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80059b0:	d108      	bne.n	80059c4 <HAL_UART_Transmit+0x82>
 80059b2:	68fb      	ldr	r3, [r7, #12]
 80059b4:	691b      	ldr	r3, [r3, #16]
 80059b6:	2b00      	cmp	r3, #0
 80059b8:	d104      	bne.n	80059c4 <HAL_UART_Transmit+0x82>
    {
      pdata8bits  = NULL;
 80059ba:	2300      	movs	r3, #0
 80059bc:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 80059be:	68bb      	ldr	r3, [r7, #8]
 80059c0:	61bb      	str	r3, [r7, #24]
 80059c2:	e003      	b.n	80059cc <HAL_UART_Transmit+0x8a>
    }
    else
    {
      pdata8bits  = pData;
 80059c4:	68bb      	ldr	r3, [r7, #8]
 80059c6:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 80059c8:	2300      	movs	r3, #0
 80059ca:	61bb      	str	r3, [r7, #24]
    }

    /* Process Unlocked */
    __HAL_UNLOCK(huart);
 80059cc:	68fb      	ldr	r3, [r7, #12]
 80059ce:	2200      	movs	r2, #0
 80059d0:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    while (huart->TxXferCount > 0U)
 80059d4:	e02a      	b.n	8005a2c <HAL_UART_Transmit+0xea>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 80059d6:	683b      	ldr	r3, [r7, #0]
 80059d8:	9300      	str	r3, [sp, #0]
 80059da:	697b      	ldr	r3, [r7, #20]
 80059dc:	2200      	movs	r2, #0
 80059de:	2180      	movs	r1, #128	; 0x80
 80059e0:	68f8      	ldr	r0, [r7, #12]
 80059e2:	f000 f840 	bl	8005a66 <UART_WaitOnFlagUntilTimeout>
 80059e6:	4603      	mov	r3, r0
 80059e8:	2b00      	cmp	r3, #0
 80059ea:	d001      	beq.n	80059f0 <HAL_UART_Transmit+0xae>
      {
        return HAL_TIMEOUT;
 80059ec:	2303      	movs	r3, #3
 80059ee:	e036      	b.n	8005a5e <HAL_UART_Transmit+0x11c>
      }
      if (pdata8bits == NULL)
 80059f0:	69fb      	ldr	r3, [r7, #28]
 80059f2:	2b00      	cmp	r3, #0
 80059f4:	d10b      	bne.n	8005a0e <HAL_UART_Transmit+0xcc>
      {
        huart->Instance->DR = (uint16_t)(*pdata16bits & 0x01FFU);
 80059f6:	69bb      	ldr	r3, [r7, #24]
 80059f8:	881b      	ldrh	r3, [r3, #0]
 80059fa:	461a      	mov	r2, r3
 80059fc:	68fb      	ldr	r3, [r7, #12]
 80059fe:	681b      	ldr	r3, [r3, #0]
 8005a00:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8005a04:	605a      	str	r2, [r3, #4]
        pdata16bits++;
 8005a06:	69bb      	ldr	r3, [r7, #24]
 8005a08:	3302      	adds	r3, #2
 8005a0a:	61bb      	str	r3, [r7, #24]
 8005a0c:	e007      	b.n	8005a1e <HAL_UART_Transmit+0xdc>
      }
      else
      {
        huart->Instance->DR = (uint8_t)(*pdata8bits & 0xFFU);
 8005a0e:	69fb      	ldr	r3, [r7, #28]
 8005a10:	781a      	ldrb	r2, [r3, #0]
 8005a12:	68fb      	ldr	r3, [r7, #12]
 8005a14:	681b      	ldr	r3, [r3, #0]
 8005a16:	605a      	str	r2, [r3, #4]
        pdata8bits++;
 8005a18:	69fb      	ldr	r3, [r7, #28]
 8005a1a:	3301      	adds	r3, #1
 8005a1c:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 8005a1e:	68fb      	ldr	r3, [r7, #12]
 8005a20:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 8005a22:	b29b      	uxth	r3, r3
 8005a24:	3b01      	subs	r3, #1
 8005a26:	b29a      	uxth	r2, r3
 8005a28:	68fb      	ldr	r3, [r7, #12]
 8005a2a:	84da      	strh	r2, [r3, #38]	; 0x26
    while (huart->TxXferCount > 0U)
 8005a2c:	68fb      	ldr	r3, [r7, #12]
 8005a2e:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 8005a30:	b29b      	uxth	r3, r3
 8005a32:	2b00      	cmp	r3, #0
 8005a34:	d1cf      	bne.n	80059d6 <HAL_UART_Transmit+0x94>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 8005a36:	683b      	ldr	r3, [r7, #0]
 8005a38:	9300      	str	r3, [sp, #0]
 8005a3a:	697b      	ldr	r3, [r7, #20]
 8005a3c:	2200      	movs	r2, #0
 8005a3e:	2140      	movs	r1, #64	; 0x40
 8005a40:	68f8      	ldr	r0, [r7, #12]
 8005a42:	f000 f810 	bl	8005a66 <UART_WaitOnFlagUntilTimeout>
 8005a46:	4603      	mov	r3, r0
 8005a48:	2b00      	cmp	r3, #0
 8005a4a:	d001      	beq.n	8005a50 <HAL_UART_Transmit+0x10e>
    {
      return HAL_TIMEOUT;
 8005a4c:	2303      	movs	r3, #3
 8005a4e:	e006      	b.n	8005a5e <HAL_UART_Transmit+0x11c>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 8005a50:	68fb      	ldr	r3, [r7, #12]
 8005a52:	2220      	movs	r2, #32
 8005a54:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    return HAL_OK;
 8005a58:	2300      	movs	r3, #0
 8005a5a:	e000      	b.n	8005a5e <HAL_UART_Transmit+0x11c>
  }
  else
  {
    return HAL_BUSY;
 8005a5c:	2302      	movs	r3, #2
  }
}
 8005a5e:	4618      	mov	r0, r3
 8005a60:	3720      	adds	r7, #32
 8005a62:	46bd      	mov	sp, r7
 8005a64:	bd80      	pop	{r7, pc}

08005a66 <UART_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                                     uint32_t Tickstart, uint32_t Timeout)
{
 8005a66:	b580      	push	{r7, lr}
 8005a68:	b090      	sub	sp, #64	; 0x40
 8005a6a:	af00      	add	r7, sp, #0
 8005a6c:	60f8      	str	r0, [r7, #12]
 8005a6e:	60b9      	str	r1, [r7, #8]
 8005a70:	603b      	str	r3, [r7, #0]
 8005a72:	4613      	mov	r3, r2
 8005a74:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8005a76:	e050      	b.n	8005b1a <UART_WaitOnFlagUntilTimeout+0xb4>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8005a78:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8005a7a:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005a7e:	d04c      	beq.n	8005b1a <UART_WaitOnFlagUntilTimeout+0xb4>
    {
      if ((Timeout == 0U) || ((HAL_GetTick() - Tickstart) > Timeout))
 8005a80:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8005a82:	2b00      	cmp	r3, #0
 8005a84:	d007      	beq.n	8005a96 <UART_WaitOnFlagUntilTimeout+0x30>
 8005a86:	f7fc f839 	bl	8001afc <HAL_GetTick>
 8005a8a:	4602      	mov	r2, r0
 8005a8c:	683b      	ldr	r3, [r7, #0]
 8005a8e:	1ad3      	subs	r3, r2, r3
 8005a90:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8005a92:	429a      	cmp	r2, r3
 8005a94:	d241      	bcs.n	8005b1a <UART_WaitOnFlagUntilTimeout+0xb4>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts for the interrupt process */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 8005a96:	68fb      	ldr	r3, [r7, #12]
 8005a98:	681b      	ldr	r3, [r3, #0]
 8005a9a:	330c      	adds	r3, #12
 8005a9c:	62bb      	str	r3, [r7, #40]	; 0x28
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005a9e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005aa0:	e853 3f00 	ldrex	r3, [r3]
 8005aa4:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 8005aa6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005aa8:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 8005aac:	63fb      	str	r3, [r7, #60]	; 0x3c
 8005aae:	68fb      	ldr	r3, [r7, #12]
 8005ab0:	681b      	ldr	r3, [r3, #0]
 8005ab2:	330c      	adds	r3, #12
 8005ab4:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 8005ab6:	637a      	str	r2, [r7, #52]	; 0x34
 8005ab8:	633b      	str	r3, [r7, #48]	; 0x30
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005aba:	6b39      	ldr	r1, [r7, #48]	; 0x30
 8005abc:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8005abe:	e841 2300 	strex	r3, r2, [r1]
 8005ac2:	62fb      	str	r3, [r7, #44]	; 0x2c
   return(result);
 8005ac4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005ac6:	2b00      	cmp	r3, #0
 8005ac8:	d1e5      	bne.n	8005a96 <UART_WaitOnFlagUntilTimeout+0x30>
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8005aca:	68fb      	ldr	r3, [r7, #12]
 8005acc:	681b      	ldr	r3, [r3, #0]
 8005ace:	3314      	adds	r3, #20
 8005ad0:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005ad2:	697b      	ldr	r3, [r7, #20]
 8005ad4:	e853 3f00 	ldrex	r3, [r3]
 8005ad8:	613b      	str	r3, [r7, #16]
   return(result);
 8005ada:	693b      	ldr	r3, [r7, #16]
 8005adc:	f023 0301 	bic.w	r3, r3, #1
 8005ae0:	63bb      	str	r3, [r7, #56]	; 0x38
 8005ae2:	68fb      	ldr	r3, [r7, #12]
 8005ae4:	681b      	ldr	r3, [r3, #0]
 8005ae6:	3314      	adds	r3, #20
 8005ae8:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8005aea:	623a      	str	r2, [r7, #32]
 8005aec:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005aee:	69f9      	ldr	r1, [r7, #28]
 8005af0:	6a3a      	ldr	r2, [r7, #32]
 8005af2:	e841 2300 	strex	r3, r2, [r1]
 8005af6:	61bb      	str	r3, [r7, #24]
   return(result);
 8005af8:	69bb      	ldr	r3, [r7, #24]
 8005afa:	2b00      	cmp	r3, #0
 8005afc:	d1e5      	bne.n	8005aca <UART_WaitOnFlagUntilTimeout+0x64>

        huart->gState  = HAL_UART_STATE_READY;
 8005afe:	68fb      	ldr	r3, [r7, #12]
 8005b00:	2220      	movs	r2, #32
 8005b02:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        huart->RxState = HAL_UART_STATE_READY;
 8005b06:	68fb      	ldr	r3, [r7, #12]
 8005b08:	2220      	movs	r2, #32
 8005b0a:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

        /* Process Unlocked */
        __HAL_UNLOCK(huart);
 8005b0e:	68fb      	ldr	r3, [r7, #12]
 8005b10:	2200      	movs	r2, #0
 8005b12:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_TIMEOUT;
 8005b16:	2303      	movs	r3, #3
 8005b18:	e00f      	b.n	8005b3a <UART_WaitOnFlagUntilTimeout+0xd4>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8005b1a:	68fb      	ldr	r3, [r7, #12]
 8005b1c:	681b      	ldr	r3, [r3, #0]
 8005b1e:	681a      	ldr	r2, [r3, #0]
 8005b20:	68bb      	ldr	r3, [r7, #8]
 8005b22:	4013      	ands	r3, r2
 8005b24:	68ba      	ldr	r2, [r7, #8]
 8005b26:	429a      	cmp	r2, r3
 8005b28:	bf0c      	ite	eq
 8005b2a:	2301      	moveq	r3, #1
 8005b2c:	2300      	movne	r3, #0
 8005b2e:	b2db      	uxtb	r3, r3
 8005b30:	461a      	mov	r2, r3
 8005b32:	79fb      	ldrb	r3, [r7, #7]
 8005b34:	429a      	cmp	r2, r3
 8005b36:	d09f      	beq.n	8005a78 <UART_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 8005b38:	2300      	movs	r3, #0
}
 8005b3a:	4618      	mov	r0, r3
 8005b3c:	3740      	adds	r7, #64	; 0x40
 8005b3e:	46bd      	mov	sp, r7
 8005b40:	bd80      	pop	{r7, pc}
	...

08005b44 <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 8005b44:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8005b48:	b0c0      	sub	sp, #256	; 0x100
 8005b4a:	af00      	add	r7, sp, #0
 8005b4c:	f8c7 00f4 	str.w	r0, [r7, #244]	; 0xf4
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8005b50:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8005b54:	681b      	ldr	r3, [r3, #0]
 8005b56:	691b      	ldr	r3, [r3, #16]
 8005b58:	f423 5040 	bic.w	r0, r3, #12288	; 0x3000
 8005b5c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8005b60:	68d9      	ldr	r1, [r3, #12]
 8005b62:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8005b66:	681a      	ldr	r2, [r3, #0]
 8005b68:	ea40 0301 	orr.w	r3, r0, r1
 8005b6c:	6113      	str	r3, [r2, #16]
     Set the M bits according to huart->Init.WordLength value
     Set PCE and PS bits according to huart->Init.Parity value
     Set TE and RE bits according to huart->Init.Mode value
     Set OVER8 bit according to huart->Init.OverSampling value */

  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 8005b6e:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8005b72:	689a      	ldr	r2, [r3, #8]
 8005b74:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8005b78:	691b      	ldr	r3, [r3, #16]
 8005b7a:	431a      	orrs	r2, r3
 8005b7c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8005b80:	695b      	ldr	r3, [r3, #20]
 8005b82:	431a      	orrs	r2, r3
 8005b84:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8005b88:	69db      	ldr	r3, [r3, #28]
 8005b8a:	4313      	orrs	r3, r2
 8005b8c:	f8c7 30f8 	str.w	r3, [r7, #248]	; 0xf8
  MODIFY_REG(huart->Instance->CR1,
 8005b90:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8005b94:	681b      	ldr	r3, [r3, #0]
 8005b96:	68db      	ldr	r3, [r3, #12]
 8005b98:	f423 4116 	bic.w	r1, r3, #38400	; 0x9600
 8005b9c:	f021 010c 	bic.w	r1, r1, #12
 8005ba0:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8005ba4:	681a      	ldr	r2, [r3, #0]
 8005ba6:	f8d7 30f8 	ldr.w	r3, [r7, #248]	; 0xf8
 8005baa:	430b      	orrs	r3, r1
 8005bac:	60d3      	str	r3, [r2, #12]
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 8005bae:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8005bb2:	681b      	ldr	r3, [r3, #0]
 8005bb4:	695b      	ldr	r3, [r3, #20]
 8005bb6:	f423 7040 	bic.w	r0, r3, #768	; 0x300
 8005bba:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8005bbe:	6999      	ldr	r1, [r3, #24]
 8005bc0:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8005bc4:	681a      	ldr	r2, [r3, #0]
 8005bc6:	ea40 0301 	orr.w	r3, r0, r1
 8005bca:	6153      	str	r3, [r2, #20]
    if ((huart->Instance == USART1) || (huart->Instance == USART6) || (huart->Instance == UART9) || (huart->Instance == UART10))
    {
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#elif defined(USART6)
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 8005bcc:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8005bd0:	681a      	ldr	r2, [r3, #0]
 8005bd2:	4b8f      	ldr	r3, [pc, #572]	; (8005e10 <UART_SetConfig+0x2cc>)
 8005bd4:	429a      	cmp	r2, r3
 8005bd6:	d005      	beq.n	8005be4 <UART_SetConfig+0xa0>
 8005bd8:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8005bdc:	681a      	ldr	r2, [r3, #0]
 8005bde:	4b8d      	ldr	r3, [pc, #564]	; (8005e14 <UART_SetConfig+0x2d0>)
 8005be0:	429a      	cmp	r2, r3
 8005be2:	d104      	bne.n	8005bee <UART_SetConfig+0xaa>
    {
      pclk = HAL_RCC_GetPCLK2Freq();
 8005be4:	f7fe ff1c 	bl	8004a20 <HAL_RCC_GetPCLK2Freq>
 8005be8:	f8c7 00fc 	str.w	r0, [r7, #252]	; 0xfc
 8005bec:	e003      	b.n	8005bf6 <UART_SetConfig+0xb2>
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#endif /* USART6 */
    else
    {
      pclk = HAL_RCC_GetPCLK1Freq();
 8005bee:	f7fe ff03 	bl	80049f8 <HAL_RCC_GetPCLK1Freq>
 8005bf2:	f8c7 00fc 	str.w	r0, [r7, #252]	; 0xfc
    }
  /*-------------------------- USART BRR Configuration ---------------------*/
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8005bf6:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8005bfa:	69db      	ldr	r3, [r3, #28]
 8005bfc:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8005c00:	f040 810c 	bne.w	8005e1c <UART_SetConfig+0x2d8>
  {
    huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 8005c04:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8005c08:	2200      	movs	r2, #0
 8005c0a:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
 8005c0e:	f8c7 20ec 	str.w	r2, [r7, #236]	; 0xec
 8005c12:	e9d7 453a 	ldrd	r4, r5, [r7, #232]	; 0xe8
 8005c16:	4622      	mov	r2, r4
 8005c18:	462b      	mov	r3, r5
 8005c1a:	1891      	adds	r1, r2, r2
 8005c1c:	65b9      	str	r1, [r7, #88]	; 0x58
 8005c1e:	415b      	adcs	r3, r3
 8005c20:	65fb      	str	r3, [r7, #92]	; 0x5c
 8005c22:	e9d7 2316 	ldrd	r2, r3, [r7, #88]	; 0x58
 8005c26:	4621      	mov	r1, r4
 8005c28:	eb12 0801 	adds.w	r8, r2, r1
 8005c2c:	4629      	mov	r1, r5
 8005c2e:	eb43 0901 	adc.w	r9, r3, r1
 8005c32:	f04f 0200 	mov.w	r2, #0
 8005c36:	f04f 0300 	mov.w	r3, #0
 8005c3a:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 8005c3e:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 8005c42:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 8005c46:	4690      	mov	r8, r2
 8005c48:	4699      	mov	r9, r3
 8005c4a:	4623      	mov	r3, r4
 8005c4c:	eb18 0303 	adds.w	r3, r8, r3
 8005c50:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
 8005c54:	462b      	mov	r3, r5
 8005c56:	eb49 0303 	adc.w	r3, r9, r3
 8005c5a:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
 8005c5e:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8005c62:	685b      	ldr	r3, [r3, #4]
 8005c64:	2200      	movs	r2, #0
 8005c66:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
 8005c6a:	f8c7 20dc 	str.w	r2, [r7, #220]	; 0xdc
 8005c6e:	e9d7 1236 	ldrd	r1, r2, [r7, #216]	; 0xd8
 8005c72:	460b      	mov	r3, r1
 8005c74:	18db      	adds	r3, r3, r3
 8005c76:	653b      	str	r3, [r7, #80]	; 0x50
 8005c78:	4613      	mov	r3, r2
 8005c7a:	eb42 0303 	adc.w	r3, r2, r3
 8005c7e:	657b      	str	r3, [r7, #84]	; 0x54
 8005c80:	e9d7 2314 	ldrd	r2, r3, [r7, #80]	; 0x50
 8005c84:	e9d7 0138 	ldrd	r0, r1, [r7, #224]	; 0xe0
 8005c88:	f7fa fb02 	bl	8000290 <__aeabi_uldivmod>
 8005c8c:	4602      	mov	r2, r0
 8005c8e:	460b      	mov	r3, r1
 8005c90:	4b61      	ldr	r3, [pc, #388]	; (8005e18 <UART_SetConfig+0x2d4>)
 8005c92:	fba3 2302 	umull	r2, r3, r3, r2
 8005c96:	095b      	lsrs	r3, r3, #5
 8005c98:	011c      	lsls	r4, r3, #4
 8005c9a:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8005c9e:	2200      	movs	r2, #0
 8005ca0:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 8005ca4:	f8c7 20d4 	str.w	r2, [r7, #212]	; 0xd4
 8005ca8:	e9d7 8934 	ldrd	r8, r9, [r7, #208]	; 0xd0
 8005cac:	4642      	mov	r2, r8
 8005cae:	464b      	mov	r3, r9
 8005cb0:	1891      	adds	r1, r2, r2
 8005cb2:	64b9      	str	r1, [r7, #72]	; 0x48
 8005cb4:	415b      	adcs	r3, r3
 8005cb6:	64fb      	str	r3, [r7, #76]	; 0x4c
 8005cb8:	e9d7 2312 	ldrd	r2, r3, [r7, #72]	; 0x48
 8005cbc:	4641      	mov	r1, r8
 8005cbe:	eb12 0a01 	adds.w	sl, r2, r1
 8005cc2:	4649      	mov	r1, r9
 8005cc4:	eb43 0b01 	adc.w	fp, r3, r1
 8005cc8:	f04f 0200 	mov.w	r2, #0
 8005ccc:	f04f 0300 	mov.w	r3, #0
 8005cd0:	ea4f 03cb 	mov.w	r3, fp, lsl #3
 8005cd4:	ea43 735a 	orr.w	r3, r3, sl, lsr #29
 8005cd8:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 8005cdc:	4692      	mov	sl, r2
 8005cde:	469b      	mov	fp, r3
 8005ce0:	4643      	mov	r3, r8
 8005ce2:	eb1a 0303 	adds.w	r3, sl, r3
 8005ce6:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 8005cea:	464b      	mov	r3, r9
 8005cec:	eb4b 0303 	adc.w	r3, fp, r3
 8005cf0:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
 8005cf4:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8005cf8:	685b      	ldr	r3, [r3, #4]
 8005cfa:	2200      	movs	r2, #0
 8005cfc:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 8005d00:	f8c7 20c4 	str.w	r2, [r7, #196]	; 0xc4
 8005d04:	e9d7 1230 	ldrd	r1, r2, [r7, #192]	; 0xc0
 8005d08:	460b      	mov	r3, r1
 8005d0a:	18db      	adds	r3, r3, r3
 8005d0c:	643b      	str	r3, [r7, #64]	; 0x40
 8005d0e:	4613      	mov	r3, r2
 8005d10:	eb42 0303 	adc.w	r3, r2, r3
 8005d14:	647b      	str	r3, [r7, #68]	; 0x44
 8005d16:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	; 0x40
 8005d1a:	e9d7 0132 	ldrd	r0, r1, [r7, #200]	; 0xc8
 8005d1e:	f7fa fab7 	bl	8000290 <__aeabi_uldivmod>
 8005d22:	4602      	mov	r2, r0
 8005d24:	460b      	mov	r3, r1
 8005d26:	4611      	mov	r1, r2
 8005d28:	4b3b      	ldr	r3, [pc, #236]	; (8005e18 <UART_SetConfig+0x2d4>)
 8005d2a:	fba3 2301 	umull	r2, r3, r3, r1
 8005d2e:	095b      	lsrs	r3, r3, #5
 8005d30:	2264      	movs	r2, #100	; 0x64
 8005d32:	fb02 f303 	mul.w	r3, r2, r3
 8005d36:	1acb      	subs	r3, r1, r3
 8005d38:	00db      	lsls	r3, r3, #3
 8005d3a:	f103 0232 	add.w	r2, r3, #50	; 0x32
 8005d3e:	4b36      	ldr	r3, [pc, #216]	; (8005e18 <UART_SetConfig+0x2d4>)
 8005d40:	fba3 2302 	umull	r2, r3, r3, r2
 8005d44:	095b      	lsrs	r3, r3, #5
 8005d46:	005b      	lsls	r3, r3, #1
 8005d48:	f403 73f8 	and.w	r3, r3, #496	; 0x1f0
 8005d4c:	441c      	add	r4, r3
 8005d4e:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8005d52:	2200      	movs	r2, #0
 8005d54:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 8005d58:	f8c7 20bc 	str.w	r2, [r7, #188]	; 0xbc
 8005d5c:	e9d7 892e 	ldrd	r8, r9, [r7, #184]	; 0xb8
 8005d60:	4642      	mov	r2, r8
 8005d62:	464b      	mov	r3, r9
 8005d64:	1891      	adds	r1, r2, r2
 8005d66:	63b9      	str	r1, [r7, #56]	; 0x38
 8005d68:	415b      	adcs	r3, r3
 8005d6a:	63fb      	str	r3, [r7, #60]	; 0x3c
 8005d6c:	e9d7 230e 	ldrd	r2, r3, [r7, #56]	; 0x38
 8005d70:	4641      	mov	r1, r8
 8005d72:	1851      	adds	r1, r2, r1
 8005d74:	6339      	str	r1, [r7, #48]	; 0x30
 8005d76:	4649      	mov	r1, r9
 8005d78:	414b      	adcs	r3, r1
 8005d7a:	637b      	str	r3, [r7, #52]	; 0x34
 8005d7c:	f04f 0200 	mov.w	r2, #0
 8005d80:	f04f 0300 	mov.w	r3, #0
 8005d84:	e9d7 ab0c 	ldrd	sl, fp, [r7, #48]	; 0x30
 8005d88:	4659      	mov	r1, fp
 8005d8a:	00cb      	lsls	r3, r1, #3
 8005d8c:	4651      	mov	r1, sl
 8005d8e:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8005d92:	4651      	mov	r1, sl
 8005d94:	00ca      	lsls	r2, r1, #3
 8005d96:	4610      	mov	r0, r2
 8005d98:	4619      	mov	r1, r3
 8005d9a:	4603      	mov	r3, r0
 8005d9c:	4642      	mov	r2, r8
 8005d9e:	189b      	adds	r3, r3, r2
 8005da0:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 8005da4:	464b      	mov	r3, r9
 8005da6:	460a      	mov	r2, r1
 8005da8:	eb42 0303 	adc.w	r3, r2, r3
 8005dac:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 8005db0:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8005db4:	685b      	ldr	r3, [r3, #4]
 8005db6:	2200      	movs	r2, #0
 8005db8:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
 8005dbc:	f8c7 20ac 	str.w	r2, [r7, #172]	; 0xac
 8005dc0:	e9d7 122a 	ldrd	r1, r2, [r7, #168]	; 0xa8
 8005dc4:	460b      	mov	r3, r1
 8005dc6:	18db      	adds	r3, r3, r3
 8005dc8:	62bb      	str	r3, [r7, #40]	; 0x28
 8005dca:	4613      	mov	r3, r2
 8005dcc:	eb42 0303 	adc.w	r3, r2, r3
 8005dd0:	62fb      	str	r3, [r7, #44]	; 0x2c
 8005dd2:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 8005dd6:	e9d7 012c 	ldrd	r0, r1, [r7, #176]	; 0xb0
 8005dda:	f7fa fa59 	bl	8000290 <__aeabi_uldivmod>
 8005dde:	4602      	mov	r2, r0
 8005de0:	460b      	mov	r3, r1
 8005de2:	4b0d      	ldr	r3, [pc, #52]	; (8005e18 <UART_SetConfig+0x2d4>)
 8005de4:	fba3 1302 	umull	r1, r3, r3, r2
 8005de8:	095b      	lsrs	r3, r3, #5
 8005dea:	2164      	movs	r1, #100	; 0x64
 8005dec:	fb01 f303 	mul.w	r3, r1, r3
 8005df0:	1ad3      	subs	r3, r2, r3
 8005df2:	00db      	lsls	r3, r3, #3
 8005df4:	3332      	adds	r3, #50	; 0x32
 8005df6:	4a08      	ldr	r2, [pc, #32]	; (8005e18 <UART_SetConfig+0x2d4>)
 8005df8:	fba2 2303 	umull	r2, r3, r2, r3
 8005dfc:	095b      	lsrs	r3, r3, #5
 8005dfe:	f003 0207 	and.w	r2, r3, #7
 8005e02:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8005e06:	681b      	ldr	r3, [r3, #0]
 8005e08:	4422      	add	r2, r4
 8005e0a:	609a      	str	r2, [r3, #8]
  }
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
}
 8005e0c:	e105      	b.n	800601a <UART_SetConfig+0x4d6>
 8005e0e:	bf00      	nop
 8005e10:	40011000 	.word	0x40011000
 8005e14:	40011400 	.word	0x40011400
 8005e18:	51eb851f 	.word	0x51eb851f
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 8005e1c:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8005e20:	2200      	movs	r2, #0
 8005e22:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
 8005e26:	f8c7 20a4 	str.w	r2, [r7, #164]	; 0xa4
 8005e2a:	e9d7 8928 	ldrd	r8, r9, [r7, #160]	; 0xa0
 8005e2e:	4642      	mov	r2, r8
 8005e30:	464b      	mov	r3, r9
 8005e32:	1891      	adds	r1, r2, r2
 8005e34:	6239      	str	r1, [r7, #32]
 8005e36:	415b      	adcs	r3, r3
 8005e38:	627b      	str	r3, [r7, #36]	; 0x24
 8005e3a:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 8005e3e:	4641      	mov	r1, r8
 8005e40:	1854      	adds	r4, r2, r1
 8005e42:	4649      	mov	r1, r9
 8005e44:	eb43 0501 	adc.w	r5, r3, r1
 8005e48:	f04f 0200 	mov.w	r2, #0
 8005e4c:	f04f 0300 	mov.w	r3, #0
 8005e50:	00eb      	lsls	r3, r5, #3
 8005e52:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8005e56:	00e2      	lsls	r2, r4, #3
 8005e58:	4614      	mov	r4, r2
 8005e5a:	461d      	mov	r5, r3
 8005e5c:	4643      	mov	r3, r8
 8005e5e:	18e3      	adds	r3, r4, r3
 8005e60:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
 8005e64:	464b      	mov	r3, r9
 8005e66:	eb45 0303 	adc.w	r3, r5, r3
 8005e6a:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
 8005e6e:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8005e72:	685b      	ldr	r3, [r3, #4]
 8005e74:	2200      	movs	r2, #0
 8005e76:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
 8005e7a:	f8c7 2094 	str.w	r2, [r7, #148]	; 0x94
 8005e7e:	f04f 0200 	mov.w	r2, #0
 8005e82:	f04f 0300 	mov.w	r3, #0
 8005e86:	e9d7 4524 	ldrd	r4, r5, [r7, #144]	; 0x90
 8005e8a:	4629      	mov	r1, r5
 8005e8c:	008b      	lsls	r3, r1, #2
 8005e8e:	4621      	mov	r1, r4
 8005e90:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8005e94:	4621      	mov	r1, r4
 8005e96:	008a      	lsls	r2, r1, #2
 8005e98:	e9d7 0126 	ldrd	r0, r1, [r7, #152]	; 0x98
 8005e9c:	f7fa f9f8 	bl	8000290 <__aeabi_uldivmod>
 8005ea0:	4602      	mov	r2, r0
 8005ea2:	460b      	mov	r3, r1
 8005ea4:	4b60      	ldr	r3, [pc, #384]	; (8006028 <UART_SetConfig+0x4e4>)
 8005ea6:	fba3 2302 	umull	r2, r3, r3, r2
 8005eaa:	095b      	lsrs	r3, r3, #5
 8005eac:	011c      	lsls	r4, r3, #4
 8005eae:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8005eb2:	2200      	movs	r2, #0
 8005eb4:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
 8005eb8:	f8c7 208c 	str.w	r2, [r7, #140]	; 0x8c
 8005ebc:	e9d7 8922 	ldrd	r8, r9, [r7, #136]	; 0x88
 8005ec0:	4642      	mov	r2, r8
 8005ec2:	464b      	mov	r3, r9
 8005ec4:	1891      	adds	r1, r2, r2
 8005ec6:	61b9      	str	r1, [r7, #24]
 8005ec8:	415b      	adcs	r3, r3
 8005eca:	61fb      	str	r3, [r7, #28]
 8005ecc:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8005ed0:	4641      	mov	r1, r8
 8005ed2:	1851      	adds	r1, r2, r1
 8005ed4:	6139      	str	r1, [r7, #16]
 8005ed6:	4649      	mov	r1, r9
 8005ed8:	414b      	adcs	r3, r1
 8005eda:	617b      	str	r3, [r7, #20]
 8005edc:	f04f 0200 	mov.w	r2, #0
 8005ee0:	f04f 0300 	mov.w	r3, #0
 8005ee4:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 8005ee8:	4659      	mov	r1, fp
 8005eea:	00cb      	lsls	r3, r1, #3
 8005eec:	4651      	mov	r1, sl
 8005eee:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8005ef2:	4651      	mov	r1, sl
 8005ef4:	00ca      	lsls	r2, r1, #3
 8005ef6:	4610      	mov	r0, r2
 8005ef8:	4619      	mov	r1, r3
 8005efa:	4603      	mov	r3, r0
 8005efc:	4642      	mov	r2, r8
 8005efe:	189b      	adds	r3, r3, r2
 8005f00:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
 8005f04:	464b      	mov	r3, r9
 8005f06:	460a      	mov	r2, r1
 8005f08:	eb42 0303 	adc.w	r3, r2, r3
 8005f0c:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
 8005f10:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8005f14:	685b      	ldr	r3, [r3, #4]
 8005f16:	2200      	movs	r2, #0
 8005f18:	67bb      	str	r3, [r7, #120]	; 0x78
 8005f1a:	67fa      	str	r2, [r7, #124]	; 0x7c
 8005f1c:	f04f 0200 	mov.w	r2, #0
 8005f20:	f04f 0300 	mov.w	r3, #0
 8005f24:	e9d7 891e 	ldrd	r8, r9, [r7, #120]	; 0x78
 8005f28:	4649      	mov	r1, r9
 8005f2a:	008b      	lsls	r3, r1, #2
 8005f2c:	4641      	mov	r1, r8
 8005f2e:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8005f32:	4641      	mov	r1, r8
 8005f34:	008a      	lsls	r2, r1, #2
 8005f36:	e9d7 0120 	ldrd	r0, r1, [r7, #128]	; 0x80
 8005f3a:	f7fa f9a9 	bl	8000290 <__aeabi_uldivmod>
 8005f3e:	4602      	mov	r2, r0
 8005f40:	460b      	mov	r3, r1
 8005f42:	4b39      	ldr	r3, [pc, #228]	; (8006028 <UART_SetConfig+0x4e4>)
 8005f44:	fba3 1302 	umull	r1, r3, r3, r2
 8005f48:	095b      	lsrs	r3, r3, #5
 8005f4a:	2164      	movs	r1, #100	; 0x64
 8005f4c:	fb01 f303 	mul.w	r3, r1, r3
 8005f50:	1ad3      	subs	r3, r2, r3
 8005f52:	011b      	lsls	r3, r3, #4
 8005f54:	3332      	adds	r3, #50	; 0x32
 8005f56:	4a34      	ldr	r2, [pc, #208]	; (8006028 <UART_SetConfig+0x4e4>)
 8005f58:	fba2 2303 	umull	r2, r3, r2, r3
 8005f5c:	095b      	lsrs	r3, r3, #5
 8005f5e:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8005f62:	441c      	add	r4, r3
 8005f64:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8005f68:	2200      	movs	r2, #0
 8005f6a:	673b      	str	r3, [r7, #112]	; 0x70
 8005f6c:	677a      	str	r2, [r7, #116]	; 0x74
 8005f6e:	e9d7 891c 	ldrd	r8, r9, [r7, #112]	; 0x70
 8005f72:	4642      	mov	r2, r8
 8005f74:	464b      	mov	r3, r9
 8005f76:	1891      	adds	r1, r2, r2
 8005f78:	60b9      	str	r1, [r7, #8]
 8005f7a:	415b      	adcs	r3, r3
 8005f7c:	60fb      	str	r3, [r7, #12]
 8005f7e:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 8005f82:	4641      	mov	r1, r8
 8005f84:	1851      	adds	r1, r2, r1
 8005f86:	6039      	str	r1, [r7, #0]
 8005f88:	4649      	mov	r1, r9
 8005f8a:	414b      	adcs	r3, r1
 8005f8c:	607b      	str	r3, [r7, #4]
 8005f8e:	f04f 0200 	mov.w	r2, #0
 8005f92:	f04f 0300 	mov.w	r3, #0
 8005f96:	e9d7 ab00 	ldrd	sl, fp, [r7]
 8005f9a:	4659      	mov	r1, fp
 8005f9c:	00cb      	lsls	r3, r1, #3
 8005f9e:	4651      	mov	r1, sl
 8005fa0:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8005fa4:	4651      	mov	r1, sl
 8005fa6:	00ca      	lsls	r2, r1, #3
 8005fa8:	4610      	mov	r0, r2
 8005faa:	4619      	mov	r1, r3
 8005fac:	4603      	mov	r3, r0
 8005fae:	4642      	mov	r2, r8
 8005fb0:	189b      	adds	r3, r3, r2
 8005fb2:	66bb      	str	r3, [r7, #104]	; 0x68
 8005fb4:	464b      	mov	r3, r9
 8005fb6:	460a      	mov	r2, r1
 8005fb8:	eb42 0303 	adc.w	r3, r2, r3
 8005fbc:	66fb      	str	r3, [r7, #108]	; 0x6c
 8005fbe:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8005fc2:	685b      	ldr	r3, [r3, #4]
 8005fc4:	2200      	movs	r2, #0
 8005fc6:	663b      	str	r3, [r7, #96]	; 0x60
 8005fc8:	667a      	str	r2, [r7, #100]	; 0x64
 8005fca:	f04f 0200 	mov.w	r2, #0
 8005fce:	f04f 0300 	mov.w	r3, #0
 8005fd2:	e9d7 8918 	ldrd	r8, r9, [r7, #96]	; 0x60
 8005fd6:	4649      	mov	r1, r9
 8005fd8:	008b      	lsls	r3, r1, #2
 8005fda:	4641      	mov	r1, r8
 8005fdc:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8005fe0:	4641      	mov	r1, r8
 8005fe2:	008a      	lsls	r2, r1, #2
 8005fe4:	e9d7 011a 	ldrd	r0, r1, [r7, #104]	; 0x68
 8005fe8:	f7fa f952 	bl	8000290 <__aeabi_uldivmod>
 8005fec:	4602      	mov	r2, r0
 8005fee:	460b      	mov	r3, r1
 8005ff0:	4b0d      	ldr	r3, [pc, #52]	; (8006028 <UART_SetConfig+0x4e4>)
 8005ff2:	fba3 1302 	umull	r1, r3, r3, r2
 8005ff6:	095b      	lsrs	r3, r3, #5
 8005ff8:	2164      	movs	r1, #100	; 0x64
 8005ffa:	fb01 f303 	mul.w	r3, r1, r3
 8005ffe:	1ad3      	subs	r3, r2, r3
 8006000:	011b      	lsls	r3, r3, #4
 8006002:	3332      	adds	r3, #50	; 0x32
 8006004:	4a08      	ldr	r2, [pc, #32]	; (8006028 <UART_SetConfig+0x4e4>)
 8006006:	fba2 2303 	umull	r2, r3, r2, r3
 800600a:	095b      	lsrs	r3, r3, #5
 800600c:	f003 020f 	and.w	r2, r3, #15
 8006010:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8006014:	681b      	ldr	r3, [r3, #0]
 8006016:	4422      	add	r2, r4
 8006018:	609a      	str	r2, [r3, #8]
}
 800601a:	bf00      	nop
 800601c:	f507 7780 	add.w	r7, r7, #256	; 0x100
 8006020:	46bd      	mov	sp, r7
 8006022:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8006026:	bf00      	nop
 8006028:	51eb851f 	.word	0x51eb851f

0800602c <FMC_SDRAM_Init>:
  * @param  Device Pointer to SDRAM device instance
  * @param  Init Pointer to SDRAM Initialization structure
  * @retval HAL status
  */
HAL_StatusTypeDef FMC_SDRAM_Init(FMC_SDRAM_TypeDef *Device, FMC_SDRAM_InitTypeDef *Init)
{
 800602c:	b480      	push	{r7}
 800602e:	b083      	sub	sp, #12
 8006030:	af00      	add	r7, sp, #0
 8006032:	6078      	str	r0, [r7, #4]
 8006034:	6039      	str	r1, [r7, #0]
  assert_param(IS_FMC_SDCLOCK_PERIOD(Init->SDClockPeriod));
  assert_param(IS_FMC_READ_BURST(Init->ReadBurst));
  assert_param(IS_FMC_READPIPE_DELAY(Init->ReadPipeDelay));

  /* Set SDRAM bank configuration parameters */
  if (Init->SDBank == FMC_SDRAM_BANK1)
 8006036:	683b      	ldr	r3, [r7, #0]
 8006038:	681b      	ldr	r3, [r3, #0]
 800603a:	2b00      	cmp	r3, #0
 800603c:	d123      	bne.n	8006086 <FMC_SDRAM_Init+0x5a>
  {
    MODIFY_REG(Device->SDCR[FMC_SDRAM_BANK1],
 800603e:	687b      	ldr	r3, [r7, #4]
 8006040:	681b      	ldr	r3, [r3, #0]
 8006042:	f423 43ff 	bic.w	r3, r3, #32640	; 0x7f80
 8006046:	f023 037f 	bic.w	r3, r3, #127	; 0x7f
 800604a:	683a      	ldr	r2, [r7, #0]
 800604c:	6851      	ldr	r1, [r2, #4]
 800604e:	683a      	ldr	r2, [r7, #0]
 8006050:	6892      	ldr	r2, [r2, #8]
 8006052:	4311      	orrs	r1, r2
 8006054:	683a      	ldr	r2, [r7, #0]
 8006056:	68d2      	ldr	r2, [r2, #12]
 8006058:	4311      	orrs	r1, r2
 800605a:	683a      	ldr	r2, [r7, #0]
 800605c:	6912      	ldr	r2, [r2, #16]
 800605e:	4311      	orrs	r1, r2
 8006060:	683a      	ldr	r2, [r7, #0]
 8006062:	6952      	ldr	r2, [r2, #20]
 8006064:	4311      	orrs	r1, r2
 8006066:	683a      	ldr	r2, [r7, #0]
 8006068:	6992      	ldr	r2, [r2, #24]
 800606a:	4311      	orrs	r1, r2
 800606c:	683a      	ldr	r2, [r7, #0]
 800606e:	69d2      	ldr	r2, [r2, #28]
 8006070:	4311      	orrs	r1, r2
 8006072:	683a      	ldr	r2, [r7, #0]
 8006074:	6a12      	ldr	r2, [r2, #32]
 8006076:	4311      	orrs	r1, r2
 8006078:	683a      	ldr	r2, [r7, #0]
 800607a:	6a52      	ldr	r2, [r2, #36]	; 0x24
 800607c:	430a      	orrs	r2, r1
 800607e:	431a      	orrs	r2, r3
 8006080:	687b      	ldr	r3, [r7, #4]
 8006082:	601a      	str	r2, [r3, #0]
 8006084:	e028      	b.n	80060d8 <FMC_SDRAM_Init+0xac>
                Init->ReadBurst          |
                Init->ReadPipeDelay));
  }
  else /* FMC_Bank2_SDRAM */
  {
    MODIFY_REG(Device->SDCR[FMC_SDRAM_BANK1],
 8006086:	687b      	ldr	r3, [r7, #4]
 8006088:	681b      	ldr	r3, [r3, #0]
 800608a:	f423 42f8 	bic.w	r2, r3, #31744	; 0x7c00
 800608e:	683b      	ldr	r3, [r7, #0]
 8006090:	69d9      	ldr	r1, [r3, #28]
 8006092:	683b      	ldr	r3, [r7, #0]
 8006094:	6a1b      	ldr	r3, [r3, #32]
 8006096:	4319      	orrs	r1, r3
 8006098:	683b      	ldr	r3, [r7, #0]
 800609a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800609c:	430b      	orrs	r3, r1
 800609e:	431a      	orrs	r2, r3
 80060a0:	687b      	ldr	r3, [r7, #4]
 80060a2:	601a      	str	r2, [r3, #0]
               FMC_SDCR1_RPIPE,
               (Init->SDClockPeriod      |
                Init->ReadBurst          |
                Init->ReadPipeDelay));

    MODIFY_REG(Device->SDCR[FMC_SDRAM_BANK2],
 80060a4:	687b      	ldr	r3, [r7, #4]
 80060a6:	685b      	ldr	r3, [r3, #4]
 80060a8:	f423 43ff 	bic.w	r3, r3, #32640	; 0x7f80
 80060ac:	f023 037f 	bic.w	r3, r3, #127	; 0x7f
 80060b0:	683a      	ldr	r2, [r7, #0]
 80060b2:	6851      	ldr	r1, [r2, #4]
 80060b4:	683a      	ldr	r2, [r7, #0]
 80060b6:	6892      	ldr	r2, [r2, #8]
 80060b8:	4311      	orrs	r1, r2
 80060ba:	683a      	ldr	r2, [r7, #0]
 80060bc:	68d2      	ldr	r2, [r2, #12]
 80060be:	4311      	orrs	r1, r2
 80060c0:	683a      	ldr	r2, [r7, #0]
 80060c2:	6912      	ldr	r2, [r2, #16]
 80060c4:	4311      	orrs	r1, r2
 80060c6:	683a      	ldr	r2, [r7, #0]
 80060c8:	6952      	ldr	r2, [r2, #20]
 80060ca:	4311      	orrs	r1, r2
 80060cc:	683a      	ldr	r2, [r7, #0]
 80060ce:	6992      	ldr	r2, [r2, #24]
 80060d0:	430a      	orrs	r2, r1
 80060d2:	431a      	orrs	r2, r3
 80060d4:	687b      	ldr	r3, [r7, #4]
 80060d6:	605a      	str	r2, [r3, #4]
                Init->InternalBankNumber |
                Init->CASLatency         |
                Init->WriteProtection));
  }

  return HAL_OK;
 80060d8:	2300      	movs	r3, #0
}
 80060da:	4618      	mov	r0, r3
 80060dc:	370c      	adds	r7, #12
 80060de:	46bd      	mov	sp, r7
 80060e0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80060e4:	4770      	bx	lr

080060e6 <FMC_SDRAM_Timing_Init>:
  * @param  Bank SDRAM bank number
  * @retval HAL status
  */
HAL_StatusTypeDef FMC_SDRAM_Timing_Init(FMC_SDRAM_TypeDef *Device,
                                        FMC_SDRAM_TimingTypeDef *Timing, uint32_t Bank)
{
 80060e6:	b480      	push	{r7}
 80060e8:	b085      	sub	sp, #20
 80060ea:	af00      	add	r7, sp, #0
 80060ec:	60f8      	str	r0, [r7, #12]
 80060ee:	60b9      	str	r1, [r7, #8]
 80060f0:	607a      	str	r2, [r7, #4]
  assert_param(IS_FMC_RP_DELAY(Timing->RPDelay));
  assert_param(IS_FMC_RCD_DELAY(Timing->RCDDelay));
  assert_param(IS_FMC_SDRAM_BANK(Bank));

  /* Set SDRAM device timing parameters */
  if (Bank == FMC_SDRAM_BANK1)
 80060f2:	687b      	ldr	r3, [r7, #4]
 80060f4:	2b00      	cmp	r3, #0
 80060f6:	d128      	bne.n	800614a <FMC_SDRAM_Timing_Init+0x64>
  {
    MODIFY_REG(Device->SDTR[FMC_SDRAM_BANK1],
 80060f8:	68fb      	ldr	r3, [r7, #12]
 80060fa:	689b      	ldr	r3, [r3, #8]
 80060fc:	f003 4270 	and.w	r2, r3, #4026531840	; 0xf0000000
 8006100:	68bb      	ldr	r3, [r7, #8]
 8006102:	681b      	ldr	r3, [r3, #0]
 8006104:	1e59      	subs	r1, r3, #1
 8006106:	68bb      	ldr	r3, [r7, #8]
 8006108:	685b      	ldr	r3, [r3, #4]
 800610a:	3b01      	subs	r3, #1
 800610c:	011b      	lsls	r3, r3, #4
 800610e:	4319      	orrs	r1, r3
 8006110:	68bb      	ldr	r3, [r7, #8]
 8006112:	689b      	ldr	r3, [r3, #8]
 8006114:	3b01      	subs	r3, #1
 8006116:	021b      	lsls	r3, r3, #8
 8006118:	4319      	orrs	r1, r3
 800611a:	68bb      	ldr	r3, [r7, #8]
 800611c:	68db      	ldr	r3, [r3, #12]
 800611e:	3b01      	subs	r3, #1
 8006120:	031b      	lsls	r3, r3, #12
 8006122:	4319      	orrs	r1, r3
 8006124:	68bb      	ldr	r3, [r7, #8]
 8006126:	691b      	ldr	r3, [r3, #16]
 8006128:	3b01      	subs	r3, #1
 800612a:	041b      	lsls	r3, r3, #16
 800612c:	4319      	orrs	r1, r3
 800612e:	68bb      	ldr	r3, [r7, #8]
 8006130:	695b      	ldr	r3, [r3, #20]
 8006132:	3b01      	subs	r3, #1
 8006134:	051b      	lsls	r3, r3, #20
 8006136:	4319      	orrs	r1, r3
 8006138:	68bb      	ldr	r3, [r7, #8]
 800613a:	699b      	ldr	r3, [r3, #24]
 800613c:	3b01      	subs	r3, #1
 800613e:	061b      	lsls	r3, r3, #24
 8006140:	430b      	orrs	r3, r1
 8006142:	431a      	orrs	r2, r3
 8006144:	68fb      	ldr	r3, [r7, #12]
 8006146:	609a      	str	r2, [r3, #8]
 8006148:	e02f      	b.n	80061aa <FMC_SDRAM_Timing_Init+0xc4>
                (((Timing->RPDelay) - 1U)              << FMC_SDTR1_TRP_Pos)  |
                (((Timing->RCDDelay) - 1U)             << FMC_SDTR1_TRCD_Pos)));
  }
  else /* FMC_Bank2_SDRAM */
  {
    MODIFY_REG(Device->SDTR[FMC_SDRAM_BANK1],
 800614a:	68fb      	ldr	r3, [r7, #12]
 800614c:	689b      	ldr	r3, [r3, #8]
 800614e:	f423 0370 	bic.w	r3, r3, #15728640	; 0xf00000
 8006152:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 8006156:	68ba      	ldr	r2, [r7, #8]
 8006158:	68d2      	ldr	r2, [r2, #12]
 800615a:	3a01      	subs	r2, #1
 800615c:	0311      	lsls	r1, r2, #12
 800615e:	68ba      	ldr	r2, [r7, #8]
 8006160:	6952      	ldr	r2, [r2, #20]
 8006162:	3a01      	subs	r2, #1
 8006164:	0512      	lsls	r2, r2, #20
 8006166:	430a      	orrs	r2, r1
 8006168:	431a      	orrs	r2, r3
 800616a:	68fb      	ldr	r3, [r7, #12]
 800616c:	609a      	str	r2, [r3, #8]
               FMC_SDTR1_TRC |
               FMC_SDTR1_TRP,
               (((Timing->RowCycleDelay) - 1U)         << FMC_SDTR1_TRC_Pos)  |
               (((Timing->RPDelay) - 1U)               << FMC_SDTR1_TRP_Pos));

    MODIFY_REG(Device->SDTR[FMC_SDRAM_BANK2],
 800616e:	68fb      	ldr	r3, [r7, #12]
 8006170:	68db      	ldr	r3, [r3, #12]
 8006172:	f003 4270 	and.w	r2, r3, #4026531840	; 0xf0000000
 8006176:	68bb      	ldr	r3, [r7, #8]
 8006178:	681b      	ldr	r3, [r3, #0]
 800617a:	1e59      	subs	r1, r3, #1
 800617c:	68bb      	ldr	r3, [r7, #8]
 800617e:	685b      	ldr	r3, [r3, #4]
 8006180:	3b01      	subs	r3, #1
 8006182:	011b      	lsls	r3, r3, #4
 8006184:	4319      	orrs	r1, r3
 8006186:	68bb      	ldr	r3, [r7, #8]
 8006188:	689b      	ldr	r3, [r3, #8]
 800618a:	3b01      	subs	r3, #1
 800618c:	021b      	lsls	r3, r3, #8
 800618e:	4319      	orrs	r1, r3
 8006190:	68bb      	ldr	r3, [r7, #8]
 8006192:	691b      	ldr	r3, [r3, #16]
 8006194:	3b01      	subs	r3, #1
 8006196:	041b      	lsls	r3, r3, #16
 8006198:	4319      	orrs	r1, r3
 800619a:	68bb      	ldr	r3, [r7, #8]
 800619c:	699b      	ldr	r3, [r3, #24]
 800619e:	3b01      	subs	r3, #1
 80061a0:	061b      	lsls	r3, r3, #24
 80061a2:	430b      	orrs	r3, r1
 80061a4:	431a      	orrs	r2, r3
 80061a6:	68fb      	ldr	r3, [r7, #12]
 80061a8:	60da      	str	r2, [r3, #12]
                (((Timing->SelfRefreshTime) - 1U)      << FMC_SDTR1_TRAS_Pos) |
                (((Timing->WriteRecoveryTime) - 1U)    << FMC_SDTR1_TWR_Pos)  |
                (((Timing->RCDDelay) - 1U)             << FMC_SDTR1_TRCD_Pos)));
  }

  return HAL_OK;
 80061aa:	2300      	movs	r3, #0
}
 80061ac:	4618      	mov	r0, r3
 80061ae:	3714      	adds	r7, #20
 80061b0:	46bd      	mov	sp, r7
 80061b2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80061b6:	4770      	bx	lr

080061b8 <USB_EnableGlobalInt>:
  *         Enables the controller's Global Int in the AHB Config reg
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EnableGlobalInt(USB_OTG_GlobalTypeDef *USBx)
{
 80061b8:	b480      	push	{r7}
 80061ba:	b083      	sub	sp, #12
 80061bc:	af00      	add	r7, sp, #0
 80061be:	6078      	str	r0, [r7, #4]
  USBx->GAHBCFG |= USB_OTG_GAHBCFG_GINT;
 80061c0:	687b      	ldr	r3, [r7, #4]
 80061c2:	689b      	ldr	r3, [r3, #8]
 80061c4:	f043 0201 	orr.w	r2, r3, #1
 80061c8:	687b      	ldr	r3, [r7, #4]
 80061ca:	609a      	str	r2, [r3, #8]
  return HAL_OK;
 80061cc:	2300      	movs	r3, #0
}
 80061ce:	4618      	mov	r0, r3
 80061d0:	370c      	adds	r7, #12
 80061d2:	46bd      	mov	sp, r7
 80061d4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80061d8:	4770      	bx	lr

080061da <USB_DisableGlobalInt>:
  *         Disable the controller's Global Int in the AHB Config reg
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DisableGlobalInt(USB_OTG_GlobalTypeDef *USBx)
{
 80061da:	b480      	push	{r7}
 80061dc:	b083      	sub	sp, #12
 80061de:	af00      	add	r7, sp, #0
 80061e0:	6078      	str	r0, [r7, #4]
  USBx->GAHBCFG &= ~USB_OTG_GAHBCFG_GINT;
 80061e2:	687b      	ldr	r3, [r7, #4]
 80061e4:	689b      	ldr	r3, [r3, #8]
 80061e6:	f023 0201 	bic.w	r2, r3, #1
 80061ea:	687b      	ldr	r3, [r7, #4]
 80061ec:	609a      	str	r2, [r3, #8]
  return HAL_OK;
 80061ee:	2300      	movs	r3, #0
}
 80061f0:	4618      	mov	r0, r3
 80061f2:	370c      	adds	r7, #12
 80061f4:	46bd      	mov	sp, r7
 80061f6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80061fa:	4770      	bx	lr

080061fc <USB_FlushTxFifo>:
  *         This parameter can be a value from 1 to 15
            15 means Flush all Tx FIFOs
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushTxFifo(USB_OTG_GlobalTypeDef *USBx, uint32_t num)
{
 80061fc:	b480      	push	{r7}
 80061fe:	b085      	sub	sp, #20
 8006200:	af00      	add	r7, sp, #0
 8006202:	6078      	str	r0, [r7, #4]
 8006204:	6039      	str	r1, [r7, #0]
  __IO uint32_t count = 0U;
 8006206:	2300      	movs	r3, #0
 8006208:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 800620a:	68fb      	ldr	r3, [r7, #12]
 800620c:	3301      	adds	r3, #1
 800620e:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 8006210:	68fb      	ldr	r3, [r7, #12]
 8006212:	4a13      	ldr	r2, [pc, #76]	; (8006260 <USB_FlushTxFifo+0x64>)
 8006214:	4293      	cmp	r3, r2
 8006216:	d901      	bls.n	800621c <USB_FlushTxFifo+0x20>
    {
      return HAL_TIMEOUT;
 8006218:	2303      	movs	r3, #3
 800621a:	e01b      	b.n	8006254 <USB_FlushTxFifo+0x58>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 800621c:	687b      	ldr	r3, [r7, #4]
 800621e:	691b      	ldr	r3, [r3, #16]
 8006220:	2b00      	cmp	r3, #0
 8006222:	daf2      	bge.n	800620a <USB_FlushTxFifo+0xe>

  /* Flush TX Fifo */
  count = 0U;
 8006224:	2300      	movs	r3, #0
 8006226:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL = (USB_OTG_GRSTCTL_TXFFLSH | (num << 6));
 8006228:	683b      	ldr	r3, [r7, #0]
 800622a:	019b      	lsls	r3, r3, #6
 800622c:	f043 0220 	orr.w	r2, r3, #32
 8006230:	687b      	ldr	r3, [r7, #4]
 8006232:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 8006234:	68fb      	ldr	r3, [r7, #12]
 8006236:	3301      	adds	r3, #1
 8006238:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 800623a:	68fb      	ldr	r3, [r7, #12]
 800623c:	4a08      	ldr	r2, [pc, #32]	; (8006260 <USB_FlushTxFifo+0x64>)
 800623e:	4293      	cmp	r3, r2
 8006240:	d901      	bls.n	8006246 <USB_FlushTxFifo+0x4a>
    {
      return HAL_TIMEOUT;
 8006242:	2303      	movs	r3, #3
 8006244:	e006      	b.n	8006254 <USB_FlushTxFifo+0x58>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_TXFFLSH) == USB_OTG_GRSTCTL_TXFFLSH);
 8006246:	687b      	ldr	r3, [r7, #4]
 8006248:	691b      	ldr	r3, [r3, #16]
 800624a:	f003 0320 	and.w	r3, r3, #32
 800624e:	2b20      	cmp	r3, #32
 8006250:	d0f0      	beq.n	8006234 <USB_FlushTxFifo+0x38>

  return HAL_OK;
 8006252:	2300      	movs	r3, #0
}
 8006254:	4618      	mov	r0, r3
 8006256:	3714      	adds	r7, #20
 8006258:	46bd      	mov	sp, r7
 800625a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800625e:	4770      	bx	lr
 8006260:	00030d40 	.word	0x00030d40

08006264 <USB_FlushRxFifo>:
  * @brief  USB_FlushRxFifo  Flush Rx FIFO
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushRxFifo(USB_OTG_GlobalTypeDef *USBx)
{
 8006264:	b480      	push	{r7}
 8006266:	b085      	sub	sp, #20
 8006268:	af00      	add	r7, sp, #0
 800626a:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 800626c:	2300      	movs	r3, #0
 800626e:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 8006270:	68fb      	ldr	r3, [r7, #12]
 8006272:	3301      	adds	r3, #1
 8006274:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 8006276:	68fb      	ldr	r3, [r7, #12]
 8006278:	4a11      	ldr	r2, [pc, #68]	; (80062c0 <USB_FlushRxFifo+0x5c>)
 800627a:	4293      	cmp	r3, r2
 800627c:	d901      	bls.n	8006282 <USB_FlushRxFifo+0x1e>
    {
      return HAL_TIMEOUT;
 800627e:	2303      	movs	r3, #3
 8006280:	e018      	b.n	80062b4 <USB_FlushRxFifo+0x50>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 8006282:	687b      	ldr	r3, [r7, #4]
 8006284:	691b      	ldr	r3, [r3, #16]
 8006286:	2b00      	cmp	r3, #0
 8006288:	daf2      	bge.n	8006270 <USB_FlushRxFifo+0xc>

  /* Flush RX Fifo */
  count = 0U;
 800628a:	2300      	movs	r3, #0
 800628c:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL = USB_OTG_GRSTCTL_RXFFLSH;
 800628e:	687b      	ldr	r3, [r7, #4]
 8006290:	2210      	movs	r2, #16
 8006292:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 8006294:	68fb      	ldr	r3, [r7, #12]
 8006296:	3301      	adds	r3, #1
 8006298:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 800629a:	68fb      	ldr	r3, [r7, #12]
 800629c:	4a08      	ldr	r2, [pc, #32]	; (80062c0 <USB_FlushRxFifo+0x5c>)
 800629e:	4293      	cmp	r3, r2
 80062a0:	d901      	bls.n	80062a6 <USB_FlushRxFifo+0x42>
    {
      return HAL_TIMEOUT;
 80062a2:	2303      	movs	r3, #3
 80062a4:	e006      	b.n	80062b4 <USB_FlushRxFifo+0x50>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_RXFFLSH) == USB_OTG_GRSTCTL_RXFFLSH);
 80062a6:	687b      	ldr	r3, [r7, #4]
 80062a8:	691b      	ldr	r3, [r3, #16]
 80062aa:	f003 0310 	and.w	r3, r3, #16
 80062ae:	2b10      	cmp	r3, #16
 80062b0:	d0f0      	beq.n	8006294 <USB_FlushRxFifo+0x30>

  return HAL_OK;
 80062b2:	2300      	movs	r3, #0
}
 80062b4:	4618      	mov	r0, r3
 80062b6:	3714      	adds	r7, #20
 80062b8:	46bd      	mov	sp, r7
 80062ba:	f85d 7b04 	ldr.w	r7, [sp], #4
 80062be:	4770      	bx	lr
 80062c0:	00030d40 	.word	0x00030d40

080062c4 <USB_ReadPacket>:
  * @param  dest  source pointer
  * @param  len  Number of bytes to read
  * @retval pointer to destination buffer
  */
void *USB_ReadPacket(USB_OTG_GlobalTypeDef *USBx, uint8_t *dest, uint16_t len)
{
 80062c4:	b480      	push	{r7}
 80062c6:	b08b      	sub	sp, #44	; 0x2c
 80062c8:	af00      	add	r7, sp, #0
 80062ca:	60f8      	str	r0, [r7, #12]
 80062cc:	60b9      	str	r1, [r7, #8]
 80062ce:	4613      	mov	r3, r2
 80062d0:	80fb      	strh	r3, [r7, #6]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80062d2:	68fb      	ldr	r3, [r7, #12]
 80062d4:	61bb      	str	r3, [r7, #24]
  uint8_t *pDest = dest;
 80062d6:	68bb      	ldr	r3, [r7, #8]
 80062d8:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t pData;
  uint32_t i;
  uint32_t count32b = (uint32_t)len >> 2U;
 80062da:	88fb      	ldrh	r3, [r7, #6]
 80062dc:	089b      	lsrs	r3, r3, #2
 80062de:	b29b      	uxth	r3, r3
 80062e0:	617b      	str	r3, [r7, #20]
  uint16_t remaining_bytes = len % 4U;
 80062e2:	88fb      	ldrh	r3, [r7, #6]
 80062e4:	f003 0303 	and.w	r3, r3, #3
 80062e8:	83fb      	strh	r3, [r7, #30]

  for (i = 0U; i < count32b; i++)
 80062ea:	2300      	movs	r3, #0
 80062ec:	623b      	str	r3, [r7, #32]
 80062ee:	e014      	b.n	800631a <USB_ReadPacket+0x56>
  {
    __UNALIGNED_UINT32_WRITE(pDest, USBx_DFIFO(0U));
 80062f0:	69bb      	ldr	r3, [r7, #24]
 80062f2:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80062f6:	681a      	ldr	r2, [r3, #0]
 80062f8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80062fa:	601a      	str	r2, [r3, #0]
    pDest++;
 80062fc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80062fe:	3301      	adds	r3, #1
 8006300:	627b      	str	r3, [r7, #36]	; 0x24
    pDest++;
 8006302:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006304:	3301      	adds	r3, #1
 8006306:	627b      	str	r3, [r7, #36]	; 0x24
    pDest++;
 8006308:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800630a:	3301      	adds	r3, #1
 800630c:	627b      	str	r3, [r7, #36]	; 0x24
    pDest++;
 800630e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006310:	3301      	adds	r3, #1
 8006312:	627b      	str	r3, [r7, #36]	; 0x24
  for (i = 0U; i < count32b; i++)
 8006314:	6a3b      	ldr	r3, [r7, #32]
 8006316:	3301      	adds	r3, #1
 8006318:	623b      	str	r3, [r7, #32]
 800631a:	6a3a      	ldr	r2, [r7, #32]
 800631c:	697b      	ldr	r3, [r7, #20]
 800631e:	429a      	cmp	r2, r3
 8006320:	d3e6      	bcc.n	80062f0 <USB_ReadPacket+0x2c>
  }

  /* When Number of data is not word aligned, read the remaining byte */
  if (remaining_bytes != 0U)
 8006322:	8bfb      	ldrh	r3, [r7, #30]
 8006324:	2b00      	cmp	r3, #0
 8006326:	d01e      	beq.n	8006366 <USB_ReadPacket+0xa2>
  {
    i = 0U;
 8006328:	2300      	movs	r3, #0
 800632a:	623b      	str	r3, [r7, #32]
    __UNALIGNED_UINT32_WRITE(&pData, USBx_DFIFO(0U));
 800632c:	69bb      	ldr	r3, [r7, #24]
 800632e:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8006332:	461a      	mov	r2, r3
 8006334:	f107 0310 	add.w	r3, r7, #16
 8006338:	6812      	ldr	r2, [r2, #0]
 800633a:	601a      	str	r2, [r3, #0]

    do
    {
      *(uint8_t *)pDest = (uint8_t)(pData >> (8U * (uint8_t)(i)));
 800633c:	693a      	ldr	r2, [r7, #16]
 800633e:	6a3b      	ldr	r3, [r7, #32]
 8006340:	b2db      	uxtb	r3, r3
 8006342:	00db      	lsls	r3, r3, #3
 8006344:	fa22 f303 	lsr.w	r3, r2, r3
 8006348:	b2da      	uxtb	r2, r3
 800634a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800634c:	701a      	strb	r2, [r3, #0]
      i++;
 800634e:	6a3b      	ldr	r3, [r7, #32]
 8006350:	3301      	adds	r3, #1
 8006352:	623b      	str	r3, [r7, #32]
      pDest++;
 8006354:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006356:	3301      	adds	r3, #1
 8006358:	627b      	str	r3, [r7, #36]	; 0x24
      remaining_bytes--;
 800635a:	8bfb      	ldrh	r3, [r7, #30]
 800635c:	3b01      	subs	r3, #1
 800635e:	83fb      	strh	r3, [r7, #30]
    } while (remaining_bytes != 0U);
 8006360:	8bfb      	ldrh	r3, [r7, #30]
 8006362:	2b00      	cmp	r3, #0
 8006364:	d1ea      	bne.n	800633c <USB_ReadPacket+0x78>
  }

  return ((void *)pDest);
 8006366:	6a7b      	ldr	r3, [r7, #36]	; 0x24
}
 8006368:	4618      	mov	r0, r3
 800636a:	372c      	adds	r7, #44	; 0x2c
 800636c:	46bd      	mov	sp, r7
 800636e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006372:	4770      	bx	lr

08006374 <USB_ReadInterrupts>:
  * @brief  USB_ReadInterrupts: return the global USB interrupt status
  * @param  USBx  Selected device
  * @retval HAL status
  */
uint32_t  USB_ReadInterrupts(USB_OTG_GlobalTypeDef *USBx)
{
 8006374:	b480      	push	{r7}
 8006376:	b085      	sub	sp, #20
 8006378:	af00      	add	r7, sp, #0
 800637a:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;

  tmpreg = USBx->GINTSTS;
 800637c:	687b      	ldr	r3, [r7, #4]
 800637e:	695b      	ldr	r3, [r3, #20]
 8006380:	60fb      	str	r3, [r7, #12]
  tmpreg &= USBx->GINTMSK;
 8006382:	687b      	ldr	r3, [r7, #4]
 8006384:	699b      	ldr	r3, [r3, #24]
 8006386:	68fa      	ldr	r2, [r7, #12]
 8006388:	4013      	ands	r3, r2
 800638a:	60fb      	str	r3, [r7, #12]

  return tmpreg;
 800638c:	68fb      	ldr	r3, [r7, #12]
}
 800638e:	4618      	mov	r0, r3
 8006390:	3714      	adds	r7, #20
 8006392:	46bd      	mov	sp, r7
 8006394:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006398:	4770      	bx	lr

0800639a <USB_GetMode>:
  *          This parameter can be one of these values:
  *           0 : Host
  *           1 : Device
  */
uint32_t USB_GetMode(USB_OTG_GlobalTypeDef *USBx)
{
 800639a:	b480      	push	{r7}
 800639c:	b083      	sub	sp, #12
 800639e:	af00      	add	r7, sp, #0
 80063a0:	6078      	str	r0, [r7, #4]
  return ((USBx->GINTSTS) & 0x1U);
 80063a2:	687b      	ldr	r3, [r7, #4]
 80063a4:	695b      	ldr	r3, [r3, #20]
 80063a6:	f003 0301 	and.w	r3, r3, #1
}
 80063aa:	4618      	mov	r0, r3
 80063ac:	370c      	adds	r7, #12
 80063ae:	46bd      	mov	sp, r7
 80063b0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80063b4:	4770      	bx	lr

080063b6 <USB_InitFSLSPClkSel>:
  *           HCFG_48_MHZ : Full Speed 48 MHz Clock
  *           HCFG_6_MHZ : Low Speed 6 MHz Clock
  * @retval HAL status
  */
HAL_StatusTypeDef USB_InitFSLSPClkSel(USB_OTG_GlobalTypeDef *USBx, uint8_t freq)
{
 80063b6:	b480      	push	{r7}
 80063b8:	b085      	sub	sp, #20
 80063ba:	af00      	add	r7, sp, #0
 80063bc:	6078      	str	r0, [r7, #4]
 80063be:	460b      	mov	r3, r1
 80063c0:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80063c2:	687b      	ldr	r3, [r7, #4]
 80063c4:	60fb      	str	r3, [r7, #12]

  USBx_HOST->HCFG &= ~(USB_OTG_HCFG_FSLSPCS);
 80063c6:	68fb      	ldr	r3, [r7, #12]
 80063c8:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 80063cc:	681b      	ldr	r3, [r3, #0]
 80063ce:	68fa      	ldr	r2, [r7, #12]
 80063d0:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 80063d4:	f023 0303 	bic.w	r3, r3, #3
 80063d8:	6013      	str	r3, [r2, #0]
  USBx_HOST->HCFG |= (uint32_t)freq & USB_OTG_HCFG_FSLSPCS;
 80063da:	68fb      	ldr	r3, [r7, #12]
 80063dc:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 80063e0:	681a      	ldr	r2, [r3, #0]
 80063e2:	78fb      	ldrb	r3, [r7, #3]
 80063e4:	f003 0303 	and.w	r3, r3, #3
 80063e8:	68f9      	ldr	r1, [r7, #12]
 80063ea:	f501 6180 	add.w	r1, r1, #1024	; 0x400
 80063ee:	4313      	orrs	r3, r2
 80063f0:	600b      	str	r3, [r1, #0]

  if (freq == HCFG_48_MHZ)
 80063f2:	78fb      	ldrb	r3, [r7, #3]
 80063f4:	2b01      	cmp	r3, #1
 80063f6:	d107      	bne.n	8006408 <USB_InitFSLSPClkSel+0x52>
  {
    USBx_HOST->HFIR = 48000U;
 80063f8:	68fb      	ldr	r3, [r7, #12]
 80063fa:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 80063fe:	461a      	mov	r2, r3
 8006400:	f64b 3380 	movw	r3, #48000	; 0xbb80
 8006404:	6053      	str	r3, [r2, #4]
 8006406:	e009      	b.n	800641c <USB_InitFSLSPClkSel+0x66>
  }
  else if (freq == HCFG_6_MHZ)
 8006408:	78fb      	ldrb	r3, [r7, #3]
 800640a:	2b02      	cmp	r3, #2
 800640c:	d106      	bne.n	800641c <USB_InitFSLSPClkSel+0x66>
  {
    USBx_HOST->HFIR = 6000U;
 800640e:	68fb      	ldr	r3, [r7, #12]
 8006410:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8006414:	461a      	mov	r2, r3
 8006416:	f241 7370 	movw	r3, #6000	; 0x1770
 800641a:	6053      	str	r3, [r2, #4]
  else
  {
    /* ... */
  }

  return HAL_OK;
 800641c:	2300      	movs	r3, #0
}
 800641e:	4618      	mov	r0, r3
 8006420:	3714      	adds	r7, #20
 8006422:	46bd      	mov	sp, r7
 8006424:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006428:	4770      	bx	lr

0800642a <USB_HC_ReadInterrupt>:
  * @brief Read all host channel interrupts status
  * @param  USBx  Selected device
  * @retval HAL state
  */
uint32_t USB_HC_ReadInterrupt(USB_OTG_GlobalTypeDef *USBx)
{
 800642a:	b480      	push	{r7}
 800642c:	b085      	sub	sp, #20
 800642e:	af00      	add	r7, sp, #0
 8006430:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8006432:	687b      	ldr	r3, [r7, #4]
 8006434:	60fb      	str	r3, [r7, #12]

  return ((USBx_HOST->HAINT) & 0xFFFFU);
 8006436:	68fb      	ldr	r3, [r7, #12]
 8006438:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 800643c:	695b      	ldr	r3, [r3, #20]
 800643e:	b29b      	uxth	r3, r3
}
 8006440:	4618      	mov	r0, r3
 8006442:	3714      	adds	r7, #20
 8006444:	46bd      	mov	sp, r7
 8006446:	f85d 7b04 	ldr.w	r7, [sp], #4
 800644a:	4770      	bx	lr

0800644c <USB_HC_Halt>:
  * @param  hc_num  Host Channel number
  *         This parameter can be a value from 1 to 15
  * @retval HAL state
  */
HAL_StatusTypeDef USB_HC_Halt(USB_OTG_GlobalTypeDef *USBx, uint8_t hc_num)
{
 800644c:	b480      	push	{r7}
 800644e:	b089      	sub	sp, #36	; 0x24
 8006450:	af00      	add	r7, sp, #0
 8006452:	6078      	str	r0, [r7, #4]
 8006454:	460b      	mov	r3, r1
 8006456:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8006458:	687b      	ldr	r3, [r7, #4]
 800645a:	61fb      	str	r3, [r7, #28]
  uint32_t hcnum = (uint32_t)hc_num;
 800645c:	78fb      	ldrb	r3, [r7, #3]
 800645e:	61bb      	str	r3, [r7, #24]
  __IO uint32_t count = 0U;
 8006460:	2300      	movs	r3, #0
 8006462:	60fb      	str	r3, [r7, #12]
  uint32_t HcEpType = (USBx_HC(hcnum)->HCCHAR & USB_OTG_HCCHAR_EPTYP) >> 18;
 8006464:	69bb      	ldr	r3, [r7, #24]
 8006466:	015a      	lsls	r2, r3, #5
 8006468:	69fb      	ldr	r3, [r7, #28]
 800646a:	4413      	add	r3, r2
 800646c:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8006470:	681b      	ldr	r3, [r3, #0]
 8006472:	0c9b      	lsrs	r3, r3, #18
 8006474:	f003 0303 	and.w	r3, r3, #3
 8006478:	617b      	str	r3, [r7, #20]
  uint32_t ChannelEna = (USBx_HC(hcnum)->HCCHAR & USB_OTG_HCCHAR_CHENA) >> 31;
 800647a:	69bb      	ldr	r3, [r7, #24]
 800647c:	015a      	lsls	r2, r3, #5
 800647e:	69fb      	ldr	r3, [r7, #28]
 8006480:	4413      	add	r3, r2
 8006482:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8006486:	681b      	ldr	r3, [r3, #0]
 8006488:	0fdb      	lsrs	r3, r3, #31
 800648a:	f003 0301 	and.w	r3, r3, #1
 800648e:	613b      	str	r3, [r7, #16]

  if (((USBx->GAHBCFG & USB_OTG_GAHBCFG_DMAEN) == USB_OTG_GAHBCFG_DMAEN) &&
 8006490:	687b      	ldr	r3, [r7, #4]
 8006492:	689b      	ldr	r3, [r3, #8]
 8006494:	f003 0320 	and.w	r3, r3, #32
 8006498:	2b20      	cmp	r3, #32
 800649a:	d104      	bne.n	80064a6 <USB_HC_Halt+0x5a>
 800649c:	693b      	ldr	r3, [r7, #16]
 800649e:	2b00      	cmp	r3, #0
 80064a0:	d101      	bne.n	80064a6 <USB_HC_Halt+0x5a>
      (ChannelEna == 0U))
  {
    return HAL_OK;
 80064a2:	2300      	movs	r3, #0
 80064a4:	e0c8      	b.n	8006638 <USB_HC_Halt+0x1ec>
  }

  /* Check for space in the request queue to issue the halt. */
  if ((HcEpType == HCCHAR_CTRL) || (HcEpType == HCCHAR_BULK))
 80064a6:	697b      	ldr	r3, [r7, #20]
 80064a8:	2b00      	cmp	r3, #0
 80064aa:	d002      	beq.n	80064b2 <USB_HC_Halt+0x66>
 80064ac:	697b      	ldr	r3, [r7, #20]
 80064ae:	2b02      	cmp	r3, #2
 80064b0:	d163      	bne.n	800657a <USB_HC_Halt+0x12e>
  {
    USBx_HC(hcnum)->HCCHAR |= USB_OTG_HCCHAR_CHDIS;
 80064b2:	69bb      	ldr	r3, [r7, #24]
 80064b4:	015a      	lsls	r2, r3, #5
 80064b6:	69fb      	ldr	r3, [r7, #28]
 80064b8:	4413      	add	r3, r2
 80064ba:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80064be:	681b      	ldr	r3, [r3, #0]
 80064c0:	69ba      	ldr	r2, [r7, #24]
 80064c2:	0151      	lsls	r1, r2, #5
 80064c4:	69fa      	ldr	r2, [r7, #28]
 80064c6:	440a      	add	r2, r1
 80064c8:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 80064cc:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 80064d0:	6013      	str	r3, [r2, #0]

    if ((USBx->GAHBCFG & USB_OTG_GAHBCFG_DMAEN) == 0U)
 80064d2:	687b      	ldr	r3, [r7, #4]
 80064d4:	689b      	ldr	r3, [r3, #8]
 80064d6:	f003 0320 	and.w	r3, r3, #32
 80064da:	2b00      	cmp	r3, #0
 80064dc:	f040 80ab 	bne.w	8006636 <USB_HC_Halt+0x1ea>
    {
      if ((USBx->HNPTXSTS & (0xFFU << 16)) == 0U)
 80064e0:	687b      	ldr	r3, [r7, #4]
 80064e2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80064e4:	f403 037f 	and.w	r3, r3, #16711680	; 0xff0000
 80064e8:	2b00      	cmp	r3, #0
 80064ea:	d133      	bne.n	8006554 <USB_HC_Halt+0x108>
      {
        USBx_HC(hcnum)->HCCHAR &= ~USB_OTG_HCCHAR_CHENA;
 80064ec:	69bb      	ldr	r3, [r7, #24]
 80064ee:	015a      	lsls	r2, r3, #5
 80064f0:	69fb      	ldr	r3, [r7, #28]
 80064f2:	4413      	add	r3, r2
 80064f4:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80064f8:	681b      	ldr	r3, [r3, #0]
 80064fa:	69ba      	ldr	r2, [r7, #24]
 80064fc:	0151      	lsls	r1, r2, #5
 80064fe:	69fa      	ldr	r2, [r7, #28]
 8006500:	440a      	add	r2, r1
 8006502:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8006506:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 800650a:	6013      	str	r3, [r2, #0]
        USBx_HC(hcnum)->HCCHAR |= USB_OTG_HCCHAR_CHENA;
 800650c:	69bb      	ldr	r3, [r7, #24]
 800650e:	015a      	lsls	r2, r3, #5
 8006510:	69fb      	ldr	r3, [r7, #28]
 8006512:	4413      	add	r3, r2
 8006514:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8006518:	681b      	ldr	r3, [r3, #0]
 800651a:	69ba      	ldr	r2, [r7, #24]
 800651c:	0151      	lsls	r1, r2, #5
 800651e:	69fa      	ldr	r2, [r7, #28]
 8006520:	440a      	add	r2, r1
 8006522:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8006526:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 800652a:	6013      	str	r3, [r2, #0]
        do
        {
          count++;
 800652c:	68fb      	ldr	r3, [r7, #12]
 800652e:	3301      	adds	r3, #1
 8006530:	60fb      	str	r3, [r7, #12]

          if (count > 1000U)
 8006532:	68fb      	ldr	r3, [r7, #12]
 8006534:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8006538:	d81d      	bhi.n	8006576 <USB_HC_Halt+0x12a>
          {
            break;
          }
        } while ((USBx_HC(hcnum)->HCCHAR & USB_OTG_HCCHAR_CHENA) == USB_OTG_HCCHAR_CHENA);
 800653a:	69bb      	ldr	r3, [r7, #24]
 800653c:	015a      	lsls	r2, r3, #5
 800653e:	69fb      	ldr	r3, [r7, #28]
 8006540:	4413      	add	r3, r2
 8006542:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8006546:	681b      	ldr	r3, [r3, #0]
 8006548:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 800654c:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8006550:	d0ec      	beq.n	800652c <USB_HC_Halt+0xe0>
    if ((USBx->GAHBCFG & USB_OTG_GAHBCFG_DMAEN) == 0U)
 8006552:	e070      	b.n	8006636 <USB_HC_Halt+0x1ea>
      }
      else
      {
        USBx_HC(hcnum)->HCCHAR |= USB_OTG_HCCHAR_CHENA;
 8006554:	69bb      	ldr	r3, [r7, #24]
 8006556:	015a      	lsls	r2, r3, #5
 8006558:	69fb      	ldr	r3, [r7, #28]
 800655a:	4413      	add	r3, r2
 800655c:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8006560:	681b      	ldr	r3, [r3, #0]
 8006562:	69ba      	ldr	r2, [r7, #24]
 8006564:	0151      	lsls	r1, r2, #5
 8006566:	69fa      	ldr	r2, [r7, #28]
 8006568:	440a      	add	r2, r1
 800656a:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 800656e:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8006572:	6013      	str	r3, [r2, #0]
    if ((USBx->GAHBCFG & USB_OTG_GAHBCFG_DMAEN) == 0U)
 8006574:	e05f      	b.n	8006636 <USB_HC_Halt+0x1ea>
            break;
 8006576:	bf00      	nop
    if ((USBx->GAHBCFG & USB_OTG_GAHBCFG_DMAEN) == 0U)
 8006578:	e05d      	b.n	8006636 <USB_HC_Halt+0x1ea>
      }
    }
  }
  else
  {
    USBx_HC(hcnum)->HCCHAR |= USB_OTG_HCCHAR_CHDIS;
 800657a:	69bb      	ldr	r3, [r7, #24]
 800657c:	015a      	lsls	r2, r3, #5
 800657e:	69fb      	ldr	r3, [r7, #28]
 8006580:	4413      	add	r3, r2
 8006582:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8006586:	681b      	ldr	r3, [r3, #0]
 8006588:	69ba      	ldr	r2, [r7, #24]
 800658a:	0151      	lsls	r1, r2, #5
 800658c:	69fa      	ldr	r2, [r7, #28]
 800658e:	440a      	add	r2, r1
 8006590:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8006594:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 8006598:	6013      	str	r3, [r2, #0]

    if ((USBx_HOST->HPTXSTS & (0xFFU << 16)) == 0U)
 800659a:	69fb      	ldr	r3, [r7, #28]
 800659c:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 80065a0:	691b      	ldr	r3, [r3, #16]
 80065a2:	f403 037f 	and.w	r3, r3, #16711680	; 0xff0000
 80065a6:	2b00      	cmp	r3, #0
 80065a8:	d133      	bne.n	8006612 <USB_HC_Halt+0x1c6>
    {
      USBx_HC(hcnum)->HCCHAR &= ~USB_OTG_HCCHAR_CHENA;
 80065aa:	69bb      	ldr	r3, [r7, #24]
 80065ac:	015a      	lsls	r2, r3, #5
 80065ae:	69fb      	ldr	r3, [r7, #28]
 80065b0:	4413      	add	r3, r2
 80065b2:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80065b6:	681b      	ldr	r3, [r3, #0]
 80065b8:	69ba      	ldr	r2, [r7, #24]
 80065ba:	0151      	lsls	r1, r2, #5
 80065bc:	69fa      	ldr	r2, [r7, #28]
 80065be:	440a      	add	r2, r1
 80065c0:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 80065c4:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 80065c8:	6013      	str	r3, [r2, #0]
      USBx_HC(hcnum)->HCCHAR |= USB_OTG_HCCHAR_CHENA;
 80065ca:	69bb      	ldr	r3, [r7, #24]
 80065cc:	015a      	lsls	r2, r3, #5
 80065ce:	69fb      	ldr	r3, [r7, #28]
 80065d0:	4413      	add	r3, r2
 80065d2:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80065d6:	681b      	ldr	r3, [r3, #0]
 80065d8:	69ba      	ldr	r2, [r7, #24]
 80065da:	0151      	lsls	r1, r2, #5
 80065dc:	69fa      	ldr	r2, [r7, #28]
 80065de:	440a      	add	r2, r1
 80065e0:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 80065e4:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 80065e8:	6013      	str	r3, [r2, #0]
      do
      {
        count++;
 80065ea:	68fb      	ldr	r3, [r7, #12]
 80065ec:	3301      	adds	r3, #1
 80065ee:	60fb      	str	r3, [r7, #12]

        if (count > 1000U)
 80065f0:	68fb      	ldr	r3, [r7, #12]
 80065f2:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 80065f6:	d81d      	bhi.n	8006634 <USB_HC_Halt+0x1e8>
        {
          break;
        }
      } while ((USBx_HC(hcnum)->HCCHAR & USB_OTG_HCCHAR_CHENA) == USB_OTG_HCCHAR_CHENA);
 80065f8:	69bb      	ldr	r3, [r7, #24]
 80065fa:	015a      	lsls	r2, r3, #5
 80065fc:	69fb      	ldr	r3, [r7, #28]
 80065fe:	4413      	add	r3, r2
 8006600:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8006604:	681b      	ldr	r3, [r3, #0]
 8006606:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 800660a:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 800660e:	d0ec      	beq.n	80065ea <USB_HC_Halt+0x19e>
 8006610:	e011      	b.n	8006636 <USB_HC_Halt+0x1ea>
    }
    else
    {
      USBx_HC(hcnum)->HCCHAR |= USB_OTG_HCCHAR_CHENA;
 8006612:	69bb      	ldr	r3, [r7, #24]
 8006614:	015a      	lsls	r2, r3, #5
 8006616:	69fb      	ldr	r3, [r7, #28]
 8006618:	4413      	add	r3, r2
 800661a:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800661e:	681b      	ldr	r3, [r3, #0]
 8006620:	69ba      	ldr	r2, [r7, #24]
 8006622:	0151      	lsls	r1, r2, #5
 8006624:	69fa      	ldr	r2, [r7, #28]
 8006626:	440a      	add	r2, r1
 8006628:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 800662c:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8006630:	6013      	str	r3, [r2, #0]
 8006632:	e000      	b.n	8006636 <USB_HC_Halt+0x1ea>
          break;
 8006634:	bf00      	nop
    }
  }

  return HAL_OK;
 8006636:	2300      	movs	r3, #0
}
 8006638:	4618      	mov	r0, r3
 800663a:	3724      	adds	r7, #36	; 0x24
 800663c:	46bd      	mov	sp, r7
 800663e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006642:	4770      	bx	lr

08006644 <USB_StopHost>:
  * @brief  Stop Host Core
  * @param  USBx  Selected device
  * @retval HAL state
  */
HAL_StatusTypeDef USB_StopHost(USB_OTG_GlobalTypeDef *USBx)
{
 8006644:	b580      	push	{r7, lr}
 8006646:	b088      	sub	sp, #32
 8006648:	af00      	add	r7, sp, #0
 800664a:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef ret = HAL_OK;
 800664c:	2300      	movs	r3, #0
 800664e:	77fb      	strb	r3, [r7, #31]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8006650:	687b      	ldr	r3, [r7, #4]
 8006652:	617b      	str	r3, [r7, #20]
  __IO uint32_t count = 0U;
 8006654:	2300      	movs	r3, #0
 8006656:	60fb      	str	r3, [r7, #12]
  uint32_t value;
  uint32_t i;

  (void)USB_DisableGlobalInt(USBx);
 8006658:	6878      	ldr	r0, [r7, #4]
 800665a:	f7ff fdbe 	bl	80061da <USB_DisableGlobalInt>

  /* Flush USB FIFO */
  if (USB_FlushTxFifo(USBx, 0x10U) != HAL_OK) /* all Tx FIFOs */
 800665e:	2110      	movs	r1, #16
 8006660:	6878      	ldr	r0, [r7, #4]
 8006662:	f7ff fdcb 	bl	80061fc <USB_FlushTxFifo>
 8006666:	4603      	mov	r3, r0
 8006668:	2b00      	cmp	r3, #0
 800666a:	d001      	beq.n	8006670 <USB_StopHost+0x2c>
  {
    ret = HAL_ERROR;
 800666c:	2301      	movs	r3, #1
 800666e:	77fb      	strb	r3, [r7, #31]
  }

  if (USB_FlushRxFifo(USBx) != HAL_OK)
 8006670:	6878      	ldr	r0, [r7, #4]
 8006672:	f7ff fdf7 	bl	8006264 <USB_FlushRxFifo>
 8006676:	4603      	mov	r3, r0
 8006678:	2b00      	cmp	r3, #0
 800667a:	d001      	beq.n	8006680 <USB_StopHost+0x3c>
  {
    ret = HAL_ERROR;
 800667c:	2301      	movs	r3, #1
 800667e:	77fb      	strb	r3, [r7, #31]
  }

  /* Flush out any leftover queued requests. */
  for (i = 0U; i <= 15U; i++)
 8006680:	2300      	movs	r3, #0
 8006682:	61bb      	str	r3, [r7, #24]
 8006684:	e01f      	b.n	80066c6 <USB_StopHost+0x82>
  {
    value = USBx_HC(i)->HCCHAR;
 8006686:	69bb      	ldr	r3, [r7, #24]
 8006688:	015a      	lsls	r2, r3, #5
 800668a:	697b      	ldr	r3, [r7, #20]
 800668c:	4413      	add	r3, r2
 800668e:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8006692:	681b      	ldr	r3, [r3, #0]
 8006694:	613b      	str	r3, [r7, #16]
    value |=  USB_OTG_HCCHAR_CHDIS;
 8006696:	693b      	ldr	r3, [r7, #16]
 8006698:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 800669c:	613b      	str	r3, [r7, #16]
    value &= ~USB_OTG_HCCHAR_CHENA;
 800669e:	693b      	ldr	r3, [r7, #16]
 80066a0:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 80066a4:	613b      	str	r3, [r7, #16]
    value &= ~USB_OTG_HCCHAR_EPDIR;
 80066a6:	693b      	ldr	r3, [r7, #16]
 80066a8:	f423 4300 	bic.w	r3, r3, #32768	; 0x8000
 80066ac:	613b      	str	r3, [r7, #16]
    USBx_HC(i)->HCCHAR = value;
 80066ae:	69bb      	ldr	r3, [r7, #24]
 80066b0:	015a      	lsls	r2, r3, #5
 80066b2:	697b      	ldr	r3, [r7, #20]
 80066b4:	4413      	add	r3, r2
 80066b6:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80066ba:	461a      	mov	r2, r3
 80066bc:	693b      	ldr	r3, [r7, #16]
 80066be:	6013      	str	r3, [r2, #0]
  for (i = 0U; i <= 15U; i++)
 80066c0:	69bb      	ldr	r3, [r7, #24]
 80066c2:	3301      	adds	r3, #1
 80066c4:	61bb      	str	r3, [r7, #24]
 80066c6:	69bb      	ldr	r3, [r7, #24]
 80066c8:	2b0f      	cmp	r3, #15
 80066ca:	d9dc      	bls.n	8006686 <USB_StopHost+0x42>
  }

  /* Halt all channels to put them into a known state. */
  for (i = 0U; i <= 15U; i++)
 80066cc:	2300      	movs	r3, #0
 80066ce:	61bb      	str	r3, [r7, #24]
 80066d0:	e034      	b.n	800673c <USB_StopHost+0xf8>
  {
    value = USBx_HC(i)->HCCHAR;
 80066d2:	69bb      	ldr	r3, [r7, #24]
 80066d4:	015a      	lsls	r2, r3, #5
 80066d6:	697b      	ldr	r3, [r7, #20]
 80066d8:	4413      	add	r3, r2
 80066da:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80066de:	681b      	ldr	r3, [r3, #0]
 80066e0:	613b      	str	r3, [r7, #16]
    value |= USB_OTG_HCCHAR_CHDIS;
 80066e2:	693b      	ldr	r3, [r7, #16]
 80066e4:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 80066e8:	613b      	str	r3, [r7, #16]
    value |= USB_OTG_HCCHAR_CHENA;
 80066ea:	693b      	ldr	r3, [r7, #16]
 80066ec:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 80066f0:	613b      	str	r3, [r7, #16]
    value &= ~USB_OTG_HCCHAR_EPDIR;
 80066f2:	693b      	ldr	r3, [r7, #16]
 80066f4:	f423 4300 	bic.w	r3, r3, #32768	; 0x8000
 80066f8:	613b      	str	r3, [r7, #16]
    USBx_HC(i)->HCCHAR = value;
 80066fa:	69bb      	ldr	r3, [r7, #24]
 80066fc:	015a      	lsls	r2, r3, #5
 80066fe:	697b      	ldr	r3, [r7, #20]
 8006700:	4413      	add	r3, r2
 8006702:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8006706:	461a      	mov	r2, r3
 8006708:	693b      	ldr	r3, [r7, #16]
 800670a:	6013      	str	r3, [r2, #0]

    do
    {
      count++;
 800670c:	68fb      	ldr	r3, [r7, #12]
 800670e:	3301      	adds	r3, #1
 8006710:	60fb      	str	r3, [r7, #12]

      if (count > 1000U)
 8006712:	68fb      	ldr	r3, [r7, #12]
 8006714:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8006718:	d80c      	bhi.n	8006734 <USB_StopHost+0xf0>
      {
        break;
      }
    } while ((USBx_HC(i)->HCCHAR & USB_OTG_HCCHAR_CHENA) == USB_OTG_HCCHAR_CHENA);
 800671a:	69bb      	ldr	r3, [r7, #24]
 800671c:	015a      	lsls	r2, r3, #5
 800671e:	697b      	ldr	r3, [r7, #20]
 8006720:	4413      	add	r3, r2
 8006722:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8006726:	681b      	ldr	r3, [r3, #0]
 8006728:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 800672c:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8006730:	d0ec      	beq.n	800670c <USB_StopHost+0xc8>
 8006732:	e000      	b.n	8006736 <USB_StopHost+0xf2>
        break;
 8006734:	bf00      	nop
  for (i = 0U; i <= 15U; i++)
 8006736:	69bb      	ldr	r3, [r7, #24]
 8006738:	3301      	adds	r3, #1
 800673a:	61bb      	str	r3, [r7, #24]
 800673c:	69bb      	ldr	r3, [r7, #24]
 800673e:	2b0f      	cmp	r3, #15
 8006740:	d9c7      	bls.n	80066d2 <USB_StopHost+0x8e>
  }

  /* Clear any pending Host interrupts */
  USBx_HOST->HAINT = 0xFFFFFFFFU;
 8006742:	697b      	ldr	r3, [r7, #20]
 8006744:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8006748:	461a      	mov	r2, r3
 800674a:	f04f 33ff 	mov.w	r3, #4294967295
 800674e:	6153      	str	r3, [r2, #20]
  USBx->GINTSTS = 0xFFFFFFFFU;
 8006750:	687b      	ldr	r3, [r7, #4]
 8006752:	f04f 32ff 	mov.w	r2, #4294967295
 8006756:	615a      	str	r2, [r3, #20]

  (void)USB_EnableGlobalInt(USBx);
 8006758:	6878      	ldr	r0, [r7, #4]
 800675a:	f7ff fd2d 	bl	80061b8 <USB_EnableGlobalInt>

  return ret;
 800675e:	7ffb      	ldrb	r3, [r7, #31]
}
 8006760:	4618      	mov	r0, r3
 8006762:	3720      	adds	r7, #32
 8006764:	46bd      	mov	sp, r7
 8006766:	bd80      	pop	{r7, pc}

08006768 <USBH_LL_IncTimer>:
  *         Increment Host Timer tick
  * @param  phost: Host Handle
  * @retval None
  */
void  USBH_LL_IncTimer(USBH_HandleTypeDef *phost)
{
 8006768:	b580      	push	{r7, lr}
 800676a:	b082      	sub	sp, #8
 800676c:	af00      	add	r7, sp, #0
 800676e:	6078      	str	r0, [r7, #4]
  phost->Timer++;
 8006770:	687b      	ldr	r3, [r7, #4]
 8006772:	f8d3 33c4 	ldr.w	r3, [r3, #964]	; 0x3c4
 8006776:	1c5a      	adds	r2, r3, #1
 8006778:	687b      	ldr	r3, [r7, #4]
 800677a:	f8c3 23c4 	str.w	r2, [r3, #964]	; 0x3c4
  USBH_HandleSof(phost);
 800677e:	6878      	ldr	r0, [r7, #4]
 8006780:	f000 f804 	bl	800678c <USBH_HandleSof>
}
 8006784:	bf00      	nop
 8006786:	3708      	adds	r7, #8
 8006788:	46bd      	mov	sp, r7
 800678a:	bd80      	pop	{r7, pc}

0800678c <USBH_HandleSof>:
  *         Call SOF process
  * @param  phost: Host Handle
  * @retval None
  */
static void  USBH_HandleSof(USBH_HandleTypeDef *phost)
{
 800678c:	b580      	push	{r7, lr}
 800678e:	b082      	sub	sp, #8
 8006790:	af00      	add	r7, sp, #0
 8006792:	6078      	str	r0, [r7, #4]
  if ((phost->gState == HOST_CLASS) && (phost->pActiveClass != NULL))
 8006794:	687b      	ldr	r3, [r7, #4]
 8006796:	781b      	ldrb	r3, [r3, #0]
 8006798:	b2db      	uxtb	r3, r3
 800679a:	2b0b      	cmp	r3, #11
 800679c:	d10a      	bne.n	80067b4 <USBH_HandleSof+0x28>
 800679e:	687b      	ldr	r3, [r7, #4]
 80067a0:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 80067a4:	2b00      	cmp	r3, #0
 80067a6:	d005      	beq.n	80067b4 <USBH_HandleSof+0x28>
  {
    phost->pActiveClass->SOFProcess(phost);
 80067a8:	687b      	ldr	r3, [r7, #4]
 80067aa:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 80067ae:	699b      	ldr	r3, [r3, #24]
 80067b0:	6878      	ldr	r0, [r7, #4]
 80067b2:	4798      	blx	r3
  }
}
 80067b4:	bf00      	nop
 80067b6:	3708      	adds	r7, #8
 80067b8:	46bd      	mov	sp, r7
 80067ba:	bd80      	pop	{r7, pc}

080067bc <USBH_LL_PortEnabled>:
  *         Port Enabled
  * @param  phost: Host Handle
  * @retval None
  */
void USBH_LL_PortEnabled(USBH_HandleTypeDef *phost)
{
 80067bc:	b580      	push	{r7, lr}
 80067be:	b082      	sub	sp, #8
 80067c0:	af00      	add	r7, sp, #0
 80067c2:	6078      	str	r0, [r7, #4]
  phost->device.PortEnabled = 1U;
 80067c4:	687b      	ldr	r3, [r7, #4]
 80067c6:	2201      	movs	r2, #1
 80067c8:	f883 2323 	strb.w	r2, [r3, #803]	; 0x323

#if (USBH_USE_OS == 1U)
  phost->os_msg = (uint32_t)USBH_PORT_EVENT;
 80067cc:	687b      	ldr	r3, [r7, #4]
 80067ce:	2201      	movs	r2, #1
 80067d0:	f8c3 23e0 	str.w	r2, [r3, #992]	; 0x3e0
#if (osCMSIS < 0x20000U)
  (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
#else
  (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
 80067d4:	687b      	ldr	r3, [r7, #4]
 80067d6:	f8d3 03d8 	ldr.w	r0, [r3, #984]	; 0x3d8
 80067da:	687b      	ldr	r3, [r7, #4]
 80067dc:	f503 7178 	add.w	r1, r3, #992	; 0x3e0
 80067e0:	2300      	movs	r3, #0
 80067e2:	2200      	movs	r2, #0
 80067e4:	f000 fa18 	bl	8006c18 <osMessageQueuePut>
#endif
#endif

  return;
 80067e8:	bf00      	nop
}
 80067ea:	3708      	adds	r7, #8
 80067ec:	46bd      	mov	sp, r7
 80067ee:	bd80      	pop	{r7, pc}

080067f0 <USBH_LL_PortDisabled>:
  *         Port Disabled
  * @param  phost: Host Handle
  * @retval None
  */
void USBH_LL_PortDisabled(USBH_HandleTypeDef *phost)
{
 80067f0:	b480      	push	{r7}
 80067f2:	b083      	sub	sp, #12
 80067f4:	af00      	add	r7, sp, #0
 80067f6:	6078      	str	r0, [r7, #4]
  phost->device.PortEnabled = 0U;
 80067f8:	687b      	ldr	r3, [r7, #4]
 80067fa:	2200      	movs	r2, #0
 80067fc:	f883 2323 	strb.w	r2, [r3, #803]	; 0x323

  return;
 8006800:	bf00      	nop
}
 8006802:	370c      	adds	r7, #12
 8006804:	46bd      	mov	sp, r7
 8006806:	f85d 7b04 	ldr.w	r7, [sp], #4
 800680a:	4770      	bx	lr

0800680c <USBH_LL_Connect>:
  *         Handle USB Host connexion event
  * @param  phost: Host Handle
  * @retval USBH_Status
  */
USBH_StatusTypeDef  USBH_LL_Connect(USBH_HandleTypeDef *phost)
{
 800680c:	b580      	push	{r7, lr}
 800680e:	b082      	sub	sp, #8
 8006810:	af00      	add	r7, sp, #0
 8006812:	6078      	str	r0, [r7, #4]
  phost->device.is_connected = 1U;
 8006814:	687b      	ldr	r3, [r7, #4]
 8006816:	2201      	movs	r2, #1
 8006818:	f883 2320 	strb.w	r2, [r3, #800]	; 0x320
  phost->device.is_disconnected = 0U;
 800681c:	687b      	ldr	r3, [r7, #4]
 800681e:	2200      	movs	r2, #0
 8006820:	f883 2321 	strb.w	r2, [r3, #801]	; 0x321
  phost->device.is_ReEnumerated = 0U;
 8006824:	687b      	ldr	r3, [r7, #4]
 8006826:	2200      	movs	r2, #0
 8006828:	f883 2322 	strb.w	r2, [r3, #802]	; 0x322


#if (USBH_USE_OS == 1U)
  phost->os_msg = (uint32_t)USBH_PORT_EVENT;
 800682c:	687b      	ldr	r3, [r7, #4]
 800682e:	2201      	movs	r2, #1
 8006830:	f8c3 23e0 	str.w	r2, [r3, #992]	; 0x3e0
#if (osCMSIS < 0x20000U)
  (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
#else
  (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
 8006834:	687b      	ldr	r3, [r7, #4]
 8006836:	f8d3 03d8 	ldr.w	r0, [r3, #984]	; 0x3d8
 800683a:	687b      	ldr	r3, [r7, #4]
 800683c:	f503 7178 	add.w	r1, r3, #992	; 0x3e0
 8006840:	2300      	movs	r3, #0
 8006842:	2200      	movs	r2, #0
 8006844:	f000 f9e8 	bl	8006c18 <osMessageQueuePut>
#endif
#endif

  return USBH_OK;
 8006848:	2300      	movs	r3, #0
}
 800684a:	4618      	mov	r0, r3
 800684c:	3708      	adds	r7, #8
 800684e:	46bd      	mov	sp, r7
 8006850:	bd80      	pop	{r7, pc}

08006852 <USBH_LL_Disconnect>:
  *         Handle USB Host disconnection event
  * @param  phost: Host Handle
  * @retval USBH_Status
  */
USBH_StatusTypeDef  USBH_LL_Disconnect(USBH_HandleTypeDef *phost)
{
 8006852:	b580      	push	{r7, lr}
 8006854:	b082      	sub	sp, #8
 8006856:	af00      	add	r7, sp, #0
 8006858:	6078      	str	r0, [r7, #4]
  /* update device connection states */
  phost->device.is_disconnected = 1U;
 800685a:	687b      	ldr	r3, [r7, #4]
 800685c:	2201      	movs	r2, #1
 800685e:	f883 2321 	strb.w	r2, [r3, #801]	; 0x321
  phost->device.is_connected = 0U;
 8006862:	687b      	ldr	r3, [r7, #4]
 8006864:	2200      	movs	r2, #0
 8006866:	f883 2320 	strb.w	r2, [r3, #800]	; 0x320
  phost->device.PortEnabled = 0U;
 800686a:	687b      	ldr	r3, [r7, #4]
 800686c:	2200      	movs	r2, #0
 800686e:	f883 2323 	strb.w	r2, [r3, #803]	; 0x323

  /* Stop Host */
  (void)USBH_LL_Stop(phost);
 8006872:	6878      	ldr	r0, [r7, #4]
 8006874:	f002 ff9e 	bl	80097b4 <USBH_LL_Stop>

  /* FRee Control Pipes */
  (void)USBH_FreePipe(phost, phost->Control.pipe_in);
 8006878:	687b      	ldr	r3, [r7, #4]
 800687a:	791b      	ldrb	r3, [r3, #4]
 800687c:	4619      	mov	r1, r3
 800687e:	6878      	ldr	r0, [r7, #4]
 8006880:	f000 f830 	bl	80068e4 <USBH_FreePipe>
  (void)USBH_FreePipe(phost, phost->Control.pipe_out);
 8006884:	687b      	ldr	r3, [r7, #4]
 8006886:	795b      	ldrb	r3, [r3, #5]
 8006888:	4619      	mov	r1, r3
 800688a:	6878      	ldr	r0, [r7, #4]
 800688c:	f000 f82a 	bl	80068e4 <USBH_FreePipe>
#if (USBH_USE_OS == 1U)
  phost->os_msg = (uint32_t)USBH_PORT_EVENT;
 8006890:	687b      	ldr	r3, [r7, #4]
 8006892:	2201      	movs	r2, #1
 8006894:	f8c3 23e0 	str.w	r2, [r3, #992]	; 0x3e0
#if (osCMSIS < 0x20000U)
  (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
#else
  (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
 8006898:	687b      	ldr	r3, [r7, #4]
 800689a:	f8d3 03d8 	ldr.w	r0, [r3, #984]	; 0x3d8
 800689e:	687b      	ldr	r3, [r7, #4]
 80068a0:	f503 7178 	add.w	r1, r3, #992	; 0x3e0
 80068a4:	2300      	movs	r3, #0
 80068a6:	2200      	movs	r2, #0
 80068a8:	f000 f9b6 	bl	8006c18 <osMessageQueuePut>
#endif
#endif

  return USBH_OK;
 80068ac:	2300      	movs	r3, #0
}
 80068ae:	4618      	mov	r0, r3
 80068b0:	3708      	adds	r7, #8
 80068b2:	46bd      	mov	sp, r7
 80068b4:	bd80      	pop	{r7, pc}

080068b6 <USBH_LL_NotifyURBChange>:
  *         Notify URB state Change
  * @param  phost: Host handle
  * @retval USBH Status
  */
USBH_StatusTypeDef  USBH_LL_NotifyURBChange(USBH_HandleTypeDef *phost)
{
 80068b6:	b580      	push	{r7, lr}
 80068b8:	b082      	sub	sp, #8
 80068ba:	af00      	add	r7, sp, #0
 80068bc:	6078      	str	r0, [r7, #4]
  phost->os_msg = (uint32_t)USBH_PORT_EVENT;
 80068be:	687b      	ldr	r3, [r7, #4]
 80068c0:	2201      	movs	r2, #1
 80068c2:	f8c3 23e0 	str.w	r2, [r3, #992]	; 0x3e0

#if (osCMSIS < 0x20000U)
  (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
#else
  (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
 80068c6:	687b      	ldr	r3, [r7, #4]
 80068c8:	f8d3 03d8 	ldr.w	r0, [r3, #984]	; 0x3d8
 80068cc:	687b      	ldr	r3, [r7, #4]
 80068ce:	f503 7178 	add.w	r1, r3, #992	; 0x3e0
 80068d2:	2300      	movs	r3, #0
 80068d4:	2200      	movs	r2, #0
 80068d6:	f000 f99f 	bl	8006c18 <osMessageQueuePut>
#endif

  return USBH_OK;
 80068da:	2300      	movs	r3, #0
}
 80068dc:	4618      	mov	r0, r3
 80068de:	3708      	adds	r7, #8
 80068e0:	46bd      	mov	sp, r7
 80068e2:	bd80      	pop	{r7, pc}

080068e4 <USBH_FreePipe>:
  * @param  phost: Host Handle
  * @param  idx: Pipe number to be freed
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_FreePipe(USBH_HandleTypeDef *phost, uint8_t idx)
{
 80068e4:	b480      	push	{r7}
 80068e6:	b083      	sub	sp, #12
 80068e8:	af00      	add	r7, sp, #0
 80068ea:	6078      	str	r0, [r7, #4]
 80068ec:	460b      	mov	r3, r1
 80068ee:	70fb      	strb	r3, [r7, #3]
  if (idx < USBH_MAX_PIPES_NBR)
 80068f0:	78fb      	ldrb	r3, [r7, #3]
 80068f2:	2b0f      	cmp	r3, #15
 80068f4:	d80d      	bhi.n	8006912 <USBH_FreePipe+0x2e>
  {
    phost->Pipes[idx] &= 0x7FFFU;
 80068f6:	78fb      	ldrb	r3, [r7, #3]
 80068f8:	687a      	ldr	r2, [r7, #4]
 80068fa:	33e0      	adds	r3, #224	; 0xe0
 80068fc:	009b      	lsls	r3, r3, #2
 80068fe:	4413      	add	r3, r2
 8006900:	685a      	ldr	r2, [r3, #4]
 8006902:	78fb      	ldrb	r3, [r7, #3]
 8006904:	f3c2 020e 	ubfx	r2, r2, #0, #15
 8006908:	6879      	ldr	r1, [r7, #4]
 800690a:	33e0      	adds	r3, #224	; 0xe0
 800690c:	009b      	lsls	r3, r3, #2
 800690e:	440b      	add	r3, r1
 8006910:	605a      	str	r2, [r3, #4]
  }

  return USBH_OK;
 8006912:	2300      	movs	r3, #0
}
 8006914:	4618      	mov	r0, r3
 8006916:	370c      	adds	r7, #12
 8006918:	46bd      	mov	sp, r7
 800691a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800691e:	4770      	bx	lr

08006920 <__NVIC_SetPriority>:
{
 8006920:	b480      	push	{r7}
 8006922:	b083      	sub	sp, #12
 8006924:	af00      	add	r7, sp, #0
 8006926:	4603      	mov	r3, r0
 8006928:	6039      	str	r1, [r7, #0]
 800692a:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800692c:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8006930:	2b00      	cmp	r3, #0
 8006932:	db0a      	blt.n	800694a <__NVIC_SetPriority+0x2a>
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8006934:	683b      	ldr	r3, [r7, #0]
 8006936:	b2da      	uxtb	r2, r3
 8006938:	490c      	ldr	r1, [pc, #48]	; (800696c <__NVIC_SetPriority+0x4c>)
 800693a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800693e:	0112      	lsls	r2, r2, #4
 8006940:	b2d2      	uxtb	r2, r2
 8006942:	440b      	add	r3, r1
 8006944:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
}
 8006948:	e00a      	b.n	8006960 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800694a:	683b      	ldr	r3, [r7, #0]
 800694c:	b2da      	uxtb	r2, r3
 800694e:	4908      	ldr	r1, [pc, #32]	; (8006970 <__NVIC_SetPriority+0x50>)
 8006950:	79fb      	ldrb	r3, [r7, #7]
 8006952:	f003 030f 	and.w	r3, r3, #15
 8006956:	3b04      	subs	r3, #4
 8006958:	0112      	lsls	r2, r2, #4
 800695a:	b2d2      	uxtb	r2, r2
 800695c:	440b      	add	r3, r1
 800695e:	761a      	strb	r2, [r3, #24]
}
 8006960:	bf00      	nop
 8006962:	370c      	adds	r7, #12
 8006964:	46bd      	mov	sp, r7
 8006966:	f85d 7b04 	ldr.w	r7, [sp], #4
 800696a:	4770      	bx	lr
 800696c:	e000e100 	.word	0xe000e100
 8006970:	e000ed00 	.word	0xe000ed00

08006974 <SysTick_Handler>:

/*
  SysTick handler implementation that also clears overflow flag.
*/
#if (USE_CUSTOM_SYSTICK_HANDLER_IMPLEMENTATION == 0)
void SysTick_Handler (void) {
 8006974:	b580      	push	{r7, lr}
 8006976:	af00      	add	r7, sp, #0
  /* Clear overflow flag */
  SysTick->CTRL;
 8006978:	4b05      	ldr	r3, [pc, #20]	; (8006990 <SysTick_Handler+0x1c>)
 800697a:	681b      	ldr	r3, [r3, #0]

  if (xTaskGetSchedulerState() != taskSCHEDULER_NOT_STARTED) {
 800697c:	f001 fe56 	bl	800862c <xTaskGetSchedulerState>
 8006980:	4603      	mov	r3, r0
 8006982:	2b01      	cmp	r3, #1
 8006984:	d001      	beq.n	800698a <SysTick_Handler+0x16>
    /* Call tick handler */
    xPortSysTickHandler();
 8006986:	f002 fc3f 	bl	8009208 <xPortSysTickHandler>
  }
}
 800698a:	bf00      	nop
 800698c:	bd80      	pop	{r7, pc}
 800698e:	bf00      	nop
 8006990:	e000e010 	.word	0xe000e010

08006994 <SVC_Setup>:
#endif /* SysTick */

/*
  Setup SVC to reset value.
*/
__STATIC_INLINE void SVC_Setup (void) {
 8006994:	b580      	push	{r7, lr}
 8006996:	af00      	add	r7, sp, #0
#if (__ARM_ARCH_7A__ == 0U)
  /* Service Call interrupt might be configured before kernel start     */
  /* and when its priority is lower or equal to BASEPRI, svc intruction */
  /* causes a Hard Fault.                                               */
  NVIC_SetPriority (SVCall_IRQ_NBR, 0U);
 8006998:	2100      	movs	r1, #0
 800699a:	f06f 0004 	mvn.w	r0, #4
 800699e:	f7ff ffbf 	bl	8006920 <__NVIC_SetPriority>
#endif
}
 80069a2:	bf00      	nop
 80069a4:	bd80      	pop	{r7, pc}
	...

080069a8 <osKernelInitialize>:
static uint32_t OS_Tick_GetOverflow (void);
/* Get OS Tick interval */
static uint32_t OS_Tick_GetInterval (void);
/*---------------------------------------------------------------------------*/

osStatus_t osKernelInitialize (void) {
 80069a8:	b480      	push	{r7}
 80069aa:	b083      	sub	sp, #12
 80069ac:	af00      	add	r7, sp, #0
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 80069ae:	f3ef 8305 	mrs	r3, IPSR
 80069b2:	603b      	str	r3, [r7, #0]
  return(result);
 80069b4:	683b      	ldr	r3, [r7, #0]
  osStatus_t stat;

  if (IS_IRQ()) {
 80069b6:	2b00      	cmp	r3, #0
 80069b8:	d003      	beq.n	80069c2 <osKernelInitialize+0x1a>
    stat = osErrorISR;
 80069ba:	f06f 0305 	mvn.w	r3, #5
 80069be:	607b      	str	r3, [r7, #4]
 80069c0:	e00c      	b.n	80069dc <osKernelInitialize+0x34>
  }
  else {
    if (KernelState == osKernelInactive) {
 80069c2:	4b0a      	ldr	r3, [pc, #40]	; (80069ec <osKernelInitialize+0x44>)
 80069c4:	681b      	ldr	r3, [r3, #0]
 80069c6:	2b00      	cmp	r3, #0
 80069c8:	d105      	bne.n	80069d6 <osKernelInitialize+0x2e>
        EvrFreeRTOSSetup(0U);
      #endif
      #if defined(USE_FreeRTOS_HEAP_5) && (HEAP_5_REGION_SETUP == 1)
        vPortDefineHeapRegions (configHEAP_5_REGIONS);
      #endif
      KernelState = osKernelReady;
 80069ca:	4b08      	ldr	r3, [pc, #32]	; (80069ec <osKernelInitialize+0x44>)
 80069cc:	2201      	movs	r2, #1
 80069ce:	601a      	str	r2, [r3, #0]
      stat = osOK;
 80069d0:	2300      	movs	r3, #0
 80069d2:	607b      	str	r3, [r7, #4]
 80069d4:	e002      	b.n	80069dc <osKernelInitialize+0x34>
    } else {
      stat = osError;
 80069d6:	f04f 33ff 	mov.w	r3, #4294967295
 80069da:	607b      	str	r3, [r7, #4]
    }
  }

  return (stat);
 80069dc:	687b      	ldr	r3, [r7, #4]
}
 80069de:	4618      	mov	r0, r3
 80069e0:	370c      	adds	r7, #12
 80069e2:	46bd      	mov	sp, r7
 80069e4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80069e8:	4770      	bx	lr
 80069ea:	bf00      	nop
 80069ec:	20000380 	.word	0x20000380

080069f0 <osKernelStart>:
  }

  return (state);
}

osStatus_t osKernelStart (void) {
 80069f0:	b580      	push	{r7, lr}
 80069f2:	b082      	sub	sp, #8
 80069f4:	af00      	add	r7, sp, #0
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 80069f6:	f3ef 8305 	mrs	r3, IPSR
 80069fa:	603b      	str	r3, [r7, #0]
  return(result);
 80069fc:	683b      	ldr	r3, [r7, #0]
  osStatus_t stat;

  if (IS_IRQ()) {
 80069fe:	2b00      	cmp	r3, #0
 8006a00:	d003      	beq.n	8006a0a <osKernelStart+0x1a>
    stat = osErrorISR;
 8006a02:	f06f 0305 	mvn.w	r3, #5
 8006a06:	607b      	str	r3, [r7, #4]
 8006a08:	e010      	b.n	8006a2c <osKernelStart+0x3c>
  }
  else {
    if (KernelState == osKernelReady) {
 8006a0a:	4b0b      	ldr	r3, [pc, #44]	; (8006a38 <osKernelStart+0x48>)
 8006a0c:	681b      	ldr	r3, [r3, #0]
 8006a0e:	2b01      	cmp	r3, #1
 8006a10:	d109      	bne.n	8006a26 <osKernelStart+0x36>
      /* Ensure SVC priority is at the reset value */
      SVC_Setup();
 8006a12:	f7ff ffbf 	bl	8006994 <SVC_Setup>
      /* Change state to enable IRQ masking check */
      KernelState = osKernelRunning;
 8006a16:	4b08      	ldr	r3, [pc, #32]	; (8006a38 <osKernelStart+0x48>)
 8006a18:	2202      	movs	r2, #2
 8006a1a:	601a      	str	r2, [r3, #0]
      /* Start the kernel scheduler */
      vTaskStartScheduler();
 8006a1c:	f001 f998 	bl	8007d50 <vTaskStartScheduler>
      stat = osOK;
 8006a20:	2300      	movs	r3, #0
 8006a22:	607b      	str	r3, [r7, #4]
 8006a24:	e002      	b.n	8006a2c <osKernelStart+0x3c>
    } else {
      stat = osError;
 8006a26:	f04f 33ff 	mov.w	r3, #4294967295
 8006a2a:	607b      	str	r3, [r7, #4]
    }
  }

  return (stat);
 8006a2c:	687b      	ldr	r3, [r7, #4]
}
 8006a2e:	4618      	mov	r0, r3
 8006a30:	3708      	adds	r7, #8
 8006a32:	46bd      	mov	sp, r7
 8006a34:	bd80      	pop	{r7, pc}
 8006a36:	bf00      	nop
 8006a38:	20000380 	.word	0x20000380

08006a3c <osThreadNew>:
  return (configCPU_CLOCK_HZ);
}

/*---------------------------------------------------------------------------*/

osThreadId_t osThreadNew (osThreadFunc_t func, void *argument, const osThreadAttr_t *attr) {
 8006a3c:	b580      	push	{r7, lr}
 8006a3e:	b08e      	sub	sp, #56	; 0x38
 8006a40:	af04      	add	r7, sp, #16
 8006a42:	60f8      	str	r0, [r7, #12]
 8006a44:	60b9      	str	r1, [r7, #8]
 8006a46:	607a      	str	r2, [r7, #4]
  uint32_t stack;
  TaskHandle_t hTask;
  UBaseType_t prio;
  int32_t mem;

  hTask = NULL;
 8006a48:	2300      	movs	r3, #0
 8006a4a:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8006a4c:	f3ef 8305 	mrs	r3, IPSR
 8006a50:	617b      	str	r3, [r7, #20]
  return(result);
 8006a52:	697b      	ldr	r3, [r7, #20]

  if (!IS_IRQ() && (func != NULL)) {
 8006a54:	2b00      	cmp	r3, #0
 8006a56:	d17e      	bne.n	8006b56 <osThreadNew+0x11a>
 8006a58:	68fb      	ldr	r3, [r7, #12]
 8006a5a:	2b00      	cmp	r3, #0
 8006a5c:	d07b      	beq.n	8006b56 <osThreadNew+0x11a>
    stack = configMINIMAL_STACK_SIZE;
 8006a5e:	2380      	movs	r3, #128	; 0x80
 8006a60:	623b      	str	r3, [r7, #32]
    prio  = (UBaseType_t)osPriorityNormal;
 8006a62:	2318      	movs	r3, #24
 8006a64:	61fb      	str	r3, [r7, #28]

    name = NULL;
 8006a66:	2300      	movs	r3, #0
 8006a68:	627b      	str	r3, [r7, #36]	; 0x24
    mem  = -1;
 8006a6a:	f04f 33ff 	mov.w	r3, #4294967295
 8006a6e:	61bb      	str	r3, [r7, #24]

    if (attr != NULL) {
 8006a70:	687b      	ldr	r3, [r7, #4]
 8006a72:	2b00      	cmp	r3, #0
 8006a74:	d045      	beq.n	8006b02 <osThreadNew+0xc6>
      if (attr->name != NULL) {
 8006a76:	687b      	ldr	r3, [r7, #4]
 8006a78:	681b      	ldr	r3, [r3, #0]
 8006a7a:	2b00      	cmp	r3, #0
 8006a7c:	d002      	beq.n	8006a84 <osThreadNew+0x48>
        name = attr->name;
 8006a7e:	687b      	ldr	r3, [r7, #4]
 8006a80:	681b      	ldr	r3, [r3, #0]
 8006a82:	627b      	str	r3, [r7, #36]	; 0x24
      }
      if (attr->priority != osPriorityNone) {
 8006a84:	687b      	ldr	r3, [r7, #4]
 8006a86:	699b      	ldr	r3, [r3, #24]
 8006a88:	2b00      	cmp	r3, #0
 8006a8a:	d002      	beq.n	8006a92 <osThreadNew+0x56>
        prio = (UBaseType_t)attr->priority;
 8006a8c:	687b      	ldr	r3, [r7, #4]
 8006a8e:	699b      	ldr	r3, [r3, #24]
 8006a90:	61fb      	str	r3, [r7, #28]
      }

      if ((prio < osPriorityIdle) || (prio > osPriorityISR) || ((attr->attr_bits & osThreadJoinable) == osThreadJoinable)) {
 8006a92:	69fb      	ldr	r3, [r7, #28]
 8006a94:	2b00      	cmp	r3, #0
 8006a96:	d008      	beq.n	8006aaa <osThreadNew+0x6e>
 8006a98:	69fb      	ldr	r3, [r7, #28]
 8006a9a:	2b38      	cmp	r3, #56	; 0x38
 8006a9c:	d805      	bhi.n	8006aaa <osThreadNew+0x6e>
 8006a9e:	687b      	ldr	r3, [r7, #4]
 8006aa0:	685b      	ldr	r3, [r3, #4]
 8006aa2:	f003 0301 	and.w	r3, r3, #1
 8006aa6:	2b00      	cmp	r3, #0
 8006aa8:	d001      	beq.n	8006aae <osThreadNew+0x72>
        return (NULL);
 8006aaa:	2300      	movs	r3, #0
 8006aac:	e054      	b.n	8006b58 <osThreadNew+0x11c>
      }

      if (attr->stack_size > 0U) {
 8006aae:	687b      	ldr	r3, [r7, #4]
 8006ab0:	695b      	ldr	r3, [r3, #20]
 8006ab2:	2b00      	cmp	r3, #0
 8006ab4:	d003      	beq.n	8006abe <osThreadNew+0x82>
        /* In FreeRTOS stack is not in bytes, but in sizeof(StackType_t) which is 4 on ARM ports.       */
        /* Stack size should be therefore 4 byte aligned in order to avoid division caused side effects */
        stack = attr->stack_size / sizeof(StackType_t);
 8006ab6:	687b      	ldr	r3, [r7, #4]
 8006ab8:	695b      	ldr	r3, [r3, #20]
 8006aba:	089b      	lsrs	r3, r3, #2
 8006abc:	623b      	str	r3, [r7, #32]
      }

      if ((attr->cb_mem    != NULL) && (attr->cb_size    >= sizeof(StaticTask_t)) &&
 8006abe:	687b      	ldr	r3, [r7, #4]
 8006ac0:	689b      	ldr	r3, [r3, #8]
 8006ac2:	2b00      	cmp	r3, #0
 8006ac4:	d00e      	beq.n	8006ae4 <osThreadNew+0xa8>
 8006ac6:	687b      	ldr	r3, [r7, #4]
 8006ac8:	68db      	ldr	r3, [r3, #12]
 8006aca:	2b5f      	cmp	r3, #95	; 0x5f
 8006acc:	d90a      	bls.n	8006ae4 <osThreadNew+0xa8>
          (attr->stack_mem != NULL) && (attr->stack_size >  0U)) {
 8006ace:	687b      	ldr	r3, [r7, #4]
 8006ad0:	691b      	ldr	r3, [r3, #16]
      if ((attr->cb_mem    != NULL) && (attr->cb_size    >= sizeof(StaticTask_t)) &&
 8006ad2:	2b00      	cmp	r3, #0
 8006ad4:	d006      	beq.n	8006ae4 <osThreadNew+0xa8>
          (attr->stack_mem != NULL) && (attr->stack_size >  0U)) {
 8006ad6:	687b      	ldr	r3, [r7, #4]
 8006ad8:	695b      	ldr	r3, [r3, #20]
 8006ada:	2b00      	cmp	r3, #0
 8006adc:	d002      	beq.n	8006ae4 <osThreadNew+0xa8>
        mem = 1;
 8006ade:	2301      	movs	r3, #1
 8006ae0:	61bb      	str	r3, [r7, #24]
 8006ae2:	e010      	b.n	8006b06 <osThreadNew+0xca>
      }
      else {
        if ((attr->cb_mem == NULL) && (attr->cb_size == 0U) && (attr->stack_mem == NULL)) {
 8006ae4:	687b      	ldr	r3, [r7, #4]
 8006ae6:	689b      	ldr	r3, [r3, #8]
 8006ae8:	2b00      	cmp	r3, #0
 8006aea:	d10c      	bne.n	8006b06 <osThreadNew+0xca>
 8006aec:	687b      	ldr	r3, [r7, #4]
 8006aee:	68db      	ldr	r3, [r3, #12]
 8006af0:	2b00      	cmp	r3, #0
 8006af2:	d108      	bne.n	8006b06 <osThreadNew+0xca>
 8006af4:	687b      	ldr	r3, [r7, #4]
 8006af6:	691b      	ldr	r3, [r3, #16]
 8006af8:	2b00      	cmp	r3, #0
 8006afa:	d104      	bne.n	8006b06 <osThreadNew+0xca>
          mem = 0;
 8006afc:	2300      	movs	r3, #0
 8006afe:	61bb      	str	r3, [r7, #24]
 8006b00:	e001      	b.n	8006b06 <osThreadNew+0xca>
        }
      }
    }
    else {
      mem = 0;
 8006b02:	2300      	movs	r3, #0
 8006b04:	61bb      	str	r3, [r7, #24]
    }

    if (mem == 1) {
 8006b06:	69bb      	ldr	r3, [r7, #24]
 8006b08:	2b01      	cmp	r3, #1
 8006b0a:	d110      	bne.n	8006b2e <osThreadNew+0xf2>
      #if (configSUPPORT_STATIC_ALLOCATION == 1)
        hTask = xTaskCreateStatic ((TaskFunction_t)func, name, stack, argument, prio, (StackType_t  *)attr->stack_mem,
 8006b0c:	687b      	ldr	r3, [r7, #4]
 8006b0e:	691b      	ldr	r3, [r3, #16]
                                                                                      (StaticTask_t *)attr->cb_mem);
 8006b10:	687a      	ldr	r2, [r7, #4]
 8006b12:	6892      	ldr	r2, [r2, #8]
        hTask = xTaskCreateStatic ((TaskFunction_t)func, name, stack, argument, prio, (StackType_t  *)attr->stack_mem,
 8006b14:	9202      	str	r2, [sp, #8]
 8006b16:	9301      	str	r3, [sp, #4]
 8006b18:	69fb      	ldr	r3, [r7, #28]
 8006b1a:	9300      	str	r3, [sp, #0]
 8006b1c:	68bb      	ldr	r3, [r7, #8]
 8006b1e:	6a3a      	ldr	r2, [r7, #32]
 8006b20:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8006b22:	68f8      	ldr	r0, [r7, #12]
 8006b24:	f000 feac 	bl	8007880 <xTaskCreateStatic>
 8006b28:	4603      	mov	r3, r0
 8006b2a:	613b      	str	r3, [r7, #16]
 8006b2c:	e013      	b.n	8006b56 <osThreadNew+0x11a>
      #endif
    }
    else {
      if (mem == 0) {
 8006b2e:	69bb      	ldr	r3, [r7, #24]
 8006b30:	2b00      	cmp	r3, #0
 8006b32:	d110      	bne.n	8006b56 <osThreadNew+0x11a>
        #if (configSUPPORT_DYNAMIC_ALLOCATION == 1)
          if (xTaskCreate ((TaskFunction_t)func, name, (uint16_t)stack, argument, prio, &hTask) != pdPASS) {
 8006b34:	6a3b      	ldr	r3, [r7, #32]
 8006b36:	b29a      	uxth	r2, r3
 8006b38:	f107 0310 	add.w	r3, r7, #16
 8006b3c:	9301      	str	r3, [sp, #4]
 8006b3e:	69fb      	ldr	r3, [r7, #28]
 8006b40:	9300      	str	r3, [sp, #0]
 8006b42:	68bb      	ldr	r3, [r7, #8]
 8006b44:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8006b46:	68f8      	ldr	r0, [r7, #12]
 8006b48:	f000 fef7 	bl	800793a <xTaskCreate>
 8006b4c:	4603      	mov	r3, r0
 8006b4e:	2b01      	cmp	r3, #1
 8006b50:	d001      	beq.n	8006b56 <osThreadNew+0x11a>
            hTask = NULL;
 8006b52:	2300      	movs	r3, #0
 8006b54:	613b      	str	r3, [r7, #16]
        #endif
      }
    }
  }

  return ((osThreadId_t)hTask);
 8006b56:	693b      	ldr	r3, [r7, #16]
}
 8006b58:	4618      	mov	r0, r3
 8006b5a:	3728      	adds	r7, #40	; 0x28
 8006b5c:	46bd      	mov	sp, r7
 8006b5e:	bd80      	pop	{r7, pc}

08006b60 <osThreadYield>:
  }

  return (prio);
}

osStatus_t osThreadYield (void) {
 8006b60:	b480      	push	{r7}
 8006b62:	b083      	sub	sp, #12
 8006b64:	af00      	add	r7, sp, #0
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8006b66:	f3ef 8305 	mrs	r3, IPSR
 8006b6a:	603b      	str	r3, [r7, #0]
  return(result);
 8006b6c:	683b      	ldr	r3, [r7, #0]
  osStatus_t stat;

  if (IS_IRQ()) {
 8006b6e:	2b00      	cmp	r3, #0
 8006b70:	d003      	beq.n	8006b7a <osThreadYield+0x1a>
    stat = osErrorISR;
 8006b72:	f06f 0305 	mvn.w	r3, #5
 8006b76:	607b      	str	r3, [r7, #4]
 8006b78:	e009      	b.n	8006b8e <osThreadYield+0x2e>
  } else {
    stat = osOK;
 8006b7a:	2300      	movs	r3, #0
 8006b7c:	607b      	str	r3, [r7, #4]
    taskYIELD();
 8006b7e:	4b07      	ldr	r3, [pc, #28]	; (8006b9c <osThreadYield+0x3c>)
 8006b80:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8006b84:	601a      	str	r2, [r3, #0]
 8006b86:	f3bf 8f4f 	dsb	sy
 8006b8a:	f3bf 8f6f 	isb	sy
  }

  return (stat);
 8006b8e:	687b      	ldr	r3, [r7, #4]
}
 8006b90:	4618      	mov	r0, r3
 8006b92:	370c      	adds	r7, #12
 8006b94:	46bd      	mov	sp, r7
 8006b96:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006b9a:	4770      	bx	lr
 8006b9c:	e000ed04 	.word	0xe000ed04

08006ba0 <osThreadResume>:
  }

  return (stat);
}

osStatus_t osThreadResume (osThreadId_t thread_id) {
 8006ba0:	b580      	push	{r7, lr}
 8006ba2:	b086      	sub	sp, #24
 8006ba4:	af00      	add	r7, sp, #0
 8006ba6:	6078      	str	r0, [r7, #4]
  TaskHandle_t hTask = (TaskHandle_t)thread_id;
 8006ba8:	687b      	ldr	r3, [r7, #4]
 8006baa:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8006bac:	f3ef 8305 	mrs	r3, IPSR
 8006bb0:	60fb      	str	r3, [r7, #12]
  return(result);
 8006bb2:	68fb      	ldr	r3, [r7, #12]
  osStatus_t stat;

  if (IS_IRQ()) {
 8006bb4:	2b00      	cmp	r3, #0
 8006bb6:	d003      	beq.n	8006bc0 <osThreadResume+0x20>
    stat = osErrorISR;
 8006bb8:	f06f 0305 	mvn.w	r3, #5
 8006bbc:	617b      	str	r3, [r7, #20]
 8006bbe:	e00b      	b.n	8006bd8 <osThreadResume+0x38>
  }
  else if (hTask == NULL) {
 8006bc0:	693b      	ldr	r3, [r7, #16]
 8006bc2:	2b00      	cmp	r3, #0
 8006bc4:	d103      	bne.n	8006bce <osThreadResume+0x2e>
    stat = osErrorParameter;
 8006bc6:	f06f 0303 	mvn.w	r3, #3
 8006bca:	617b      	str	r3, [r7, #20]
 8006bcc:	e004      	b.n	8006bd8 <osThreadResume+0x38>
  }
  else {
    stat = osOK;
 8006bce:	2300      	movs	r3, #0
 8006bd0:	617b      	str	r3, [r7, #20]
    vTaskResume (hTask);
 8006bd2:	6938      	ldr	r0, [r7, #16]
 8006bd4:	f001 f85e 	bl	8007c94 <vTaskResume>
  }

  return (stat);
 8006bd8:	697b      	ldr	r3, [r7, #20]
}
 8006bda:	4618      	mov	r0, r3
 8006bdc:	3718      	adds	r7, #24
 8006bde:	46bd      	mov	sp, r7
 8006be0:	bd80      	pop	{r7, pc}

08006be2 <osDelay>:
  /* Return flags before clearing */
  return (rflags);
}
#endif /* (configUSE_OS2_THREAD_FLAGS == 1) */

osStatus_t osDelay (uint32_t ticks) {
 8006be2:	b580      	push	{r7, lr}
 8006be4:	b084      	sub	sp, #16
 8006be6:	af00      	add	r7, sp, #0
 8006be8:	6078      	str	r0, [r7, #4]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8006bea:	f3ef 8305 	mrs	r3, IPSR
 8006bee:	60bb      	str	r3, [r7, #8]
  return(result);
 8006bf0:	68bb      	ldr	r3, [r7, #8]
  osStatus_t stat;

  if (IS_IRQ()) {
 8006bf2:	2b00      	cmp	r3, #0
 8006bf4:	d003      	beq.n	8006bfe <osDelay+0x1c>
    stat = osErrorISR;
 8006bf6:	f06f 0305 	mvn.w	r3, #5
 8006bfa:	60fb      	str	r3, [r7, #12]
 8006bfc:	e007      	b.n	8006c0e <osDelay+0x2c>
  }
  else {
    stat = osOK;
 8006bfe:	2300      	movs	r3, #0
 8006c00:	60fb      	str	r3, [r7, #12]

    if (ticks != 0U) {
 8006c02:	687b      	ldr	r3, [r7, #4]
 8006c04:	2b00      	cmp	r3, #0
 8006c06:	d002      	beq.n	8006c0e <osDelay+0x2c>
      vTaskDelay(ticks);
 8006c08:	6878      	ldr	r0, [r7, #4]
 8006c0a:	f000 ffdd 	bl	8007bc8 <vTaskDelay>
    }
  }

  return (stat);
 8006c0e:	68fb      	ldr	r3, [r7, #12]
}
 8006c10:	4618      	mov	r0, r3
 8006c12:	3710      	adds	r7, #16
 8006c14:	46bd      	mov	sp, r7
 8006c16:	bd80      	pop	{r7, pc}

08006c18 <osMessageQueuePut>:
  }

  return ((osMessageQueueId_t)hQueue);
}

osStatus_t osMessageQueuePut (osMessageQueueId_t mq_id, const void *msg_ptr, uint8_t msg_prio, uint32_t timeout) {
 8006c18:	b580      	push	{r7, lr}
 8006c1a:	b088      	sub	sp, #32
 8006c1c:	af00      	add	r7, sp, #0
 8006c1e:	60f8      	str	r0, [r7, #12]
 8006c20:	60b9      	str	r1, [r7, #8]
 8006c22:	603b      	str	r3, [r7, #0]
 8006c24:	4613      	mov	r3, r2
 8006c26:	71fb      	strb	r3, [r7, #7]
  QueueHandle_t hQueue = (QueueHandle_t)mq_id;
 8006c28:	68fb      	ldr	r3, [r7, #12]
 8006c2a:	61bb      	str	r3, [r7, #24]
  osStatus_t stat;
  BaseType_t yield;

  (void)msg_prio; /* Message priority is ignored */

  stat = osOK;
 8006c2c:	2300      	movs	r3, #0
 8006c2e:	61fb      	str	r3, [r7, #28]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8006c30:	f3ef 8305 	mrs	r3, IPSR
 8006c34:	617b      	str	r3, [r7, #20]
  return(result);
 8006c36:	697b      	ldr	r3, [r7, #20]

  if (IS_IRQ()) {
 8006c38:	2b00      	cmp	r3, #0
 8006c3a:	d028      	beq.n	8006c8e <osMessageQueuePut+0x76>
    if ((hQueue == NULL) || (msg_ptr == NULL) || (timeout != 0U)) {
 8006c3c:	69bb      	ldr	r3, [r7, #24]
 8006c3e:	2b00      	cmp	r3, #0
 8006c40:	d005      	beq.n	8006c4e <osMessageQueuePut+0x36>
 8006c42:	68bb      	ldr	r3, [r7, #8]
 8006c44:	2b00      	cmp	r3, #0
 8006c46:	d002      	beq.n	8006c4e <osMessageQueuePut+0x36>
 8006c48:	683b      	ldr	r3, [r7, #0]
 8006c4a:	2b00      	cmp	r3, #0
 8006c4c:	d003      	beq.n	8006c56 <osMessageQueuePut+0x3e>
      stat = osErrorParameter;
 8006c4e:	f06f 0303 	mvn.w	r3, #3
 8006c52:	61fb      	str	r3, [r7, #28]
 8006c54:	e038      	b.n	8006cc8 <osMessageQueuePut+0xb0>
    }
    else {
      yield = pdFALSE;
 8006c56:	2300      	movs	r3, #0
 8006c58:	613b      	str	r3, [r7, #16]

      if (xQueueSendToBackFromISR (hQueue, msg_ptr, &yield) != pdTRUE) {
 8006c5a:	f107 0210 	add.w	r2, r7, #16
 8006c5e:	2300      	movs	r3, #0
 8006c60:	68b9      	ldr	r1, [r7, #8]
 8006c62:	69b8      	ldr	r0, [r7, #24]
 8006c64:	f000 fb22 	bl	80072ac <xQueueGenericSendFromISR>
 8006c68:	4603      	mov	r3, r0
 8006c6a:	2b01      	cmp	r3, #1
 8006c6c:	d003      	beq.n	8006c76 <osMessageQueuePut+0x5e>
        stat = osErrorResource;
 8006c6e:	f06f 0302 	mvn.w	r3, #2
 8006c72:	61fb      	str	r3, [r7, #28]
 8006c74:	e028      	b.n	8006cc8 <osMessageQueuePut+0xb0>
      } else {
        portYIELD_FROM_ISR (yield);
 8006c76:	693b      	ldr	r3, [r7, #16]
 8006c78:	2b00      	cmp	r3, #0
 8006c7a:	d025      	beq.n	8006cc8 <osMessageQueuePut+0xb0>
 8006c7c:	4b15      	ldr	r3, [pc, #84]	; (8006cd4 <osMessageQueuePut+0xbc>)
 8006c7e:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8006c82:	601a      	str	r2, [r3, #0]
 8006c84:	f3bf 8f4f 	dsb	sy
 8006c88:	f3bf 8f6f 	isb	sy
 8006c8c:	e01c      	b.n	8006cc8 <osMessageQueuePut+0xb0>
      }
    }
  }
  else {
    if ((hQueue == NULL) || (msg_ptr == NULL)) {
 8006c8e:	69bb      	ldr	r3, [r7, #24]
 8006c90:	2b00      	cmp	r3, #0
 8006c92:	d002      	beq.n	8006c9a <osMessageQueuePut+0x82>
 8006c94:	68bb      	ldr	r3, [r7, #8]
 8006c96:	2b00      	cmp	r3, #0
 8006c98:	d103      	bne.n	8006ca2 <osMessageQueuePut+0x8a>
      stat = osErrorParameter;
 8006c9a:	f06f 0303 	mvn.w	r3, #3
 8006c9e:	61fb      	str	r3, [r7, #28]
 8006ca0:	e012      	b.n	8006cc8 <osMessageQueuePut+0xb0>
    }
    else {
      if (xQueueSendToBack (hQueue, msg_ptr, (TickType_t)timeout) != pdPASS) {
 8006ca2:	2300      	movs	r3, #0
 8006ca4:	683a      	ldr	r2, [r7, #0]
 8006ca6:	68b9      	ldr	r1, [r7, #8]
 8006ca8:	69b8      	ldr	r0, [r7, #24]
 8006caa:	f000 fa01 	bl	80070b0 <xQueueGenericSend>
 8006cae:	4603      	mov	r3, r0
 8006cb0:	2b01      	cmp	r3, #1
 8006cb2:	d009      	beq.n	8006cc8 <osMessageQueuePut+0xb0>
        if (timeout != 0U) {
 8006cb4:	683b      	ldr	r3, [r7, #0]
 8006cb6:	2b00      	cmp	r3, #0
 8006cb8:	d003      	beq.n	8006cc2 <osMessageQueuePut+0xaa>
          stat = osErrorTimeout;
 8006cba:	f06f 0301 	mvn.w	r3, #1
 8006cbe:	61fb      	str	r3, [r7, #28]
 8006cc0:	e002      	b.n	8006cc8 <osMessageQueuePut+0xb0>
        } else {
          stat = osErrorResource;
 8006cc2:	f06f 0302 	mvn.w	r3, #2
 8006cc6:	61fb      	str	r3, [r7, #28]
        }
      }
    }
  }

  return (stat);
 8006cc8:	69fb      	ldr	r3, [r7, #28]
}
 8006cca:	4618      	mov	r0, r3
 8006ccc:	3720      	adds	r7, #32
 8006cce:	46bd      	mov	sp, r7
 8006cd0:	bd80      	pop	{r7, pc}
 8006cd2:	bf00      	nop
 8006cd4:	e000ed04 	.word	0xe000ed04

08006cd8 <vApplicationGetIdleTaskMemory>:

/*
  vApplicationGetIdleTaskMemory gets called when configSUPPORT_STATIC_ALLOCATION
  equals to 1 and is required for static memory allocation support.
*/
__WEAK void vApplicationGetIdleTaskMemory (StaticTask_t **ppxIdleTaskTCBBuffer, StackType_t **ppxIdleTaskStackBuffer, uint32_t *pulIdleTaskStackSize) {
 8006cd8:	b480      	push	{r7}
 8006cda:	b085      	sub	sp, #20
 8006cdc:	af00      	add	r7, sp, #0
 8006cde:	60f8      	str	r0, [r7, #12]
 8006ce0:	60b9      	str	r1, [r7, #8]
 8006ce2:	607a      	str	r2, [r7, #4]
  /* Idle task control block and stack */
  static StaticTask_t Idle_TCB;
  static StackType_t  Idle_Stack[configMINIMAL_STACK_SIZE];

  *ppxIdleTaskTCBBuffer   = &Idle_TCB;
 8006ce4:	68fb      	ldr	r3, [r7, #12]
 8006ce6:	4a07      	ldr	r2, [pc, #28]	; (8006d04 <vApplicationGetIdleTaskMemory+0x2c>)
 8006ce8:	601a      	str	r2, [r3, #0]
  *ppxIdleTaskStackBuffer = &Idle_Stack[0];
 8006cea:	68bb      	ldr	r3, [r7, #8]
 8006cec:	4a06      	ldr	r2, [pc, #24]	; (8006d08 <vApplicationGetIdleTaskMemory+0x30>)
 8006cee:	601a      	str	r2, [r3, #0]
  *pulIdleTaskStackSize   = (uint32_t)configMINIMAL_STACK_SIZE;
 8006cf0:	687b      	ldr	r3, [r7, #4]
 8006cf2:	2280      	movs	r2, #128	; 0x80
 8006cf4:	601a      	str	r2, [r3, #0]
}
 8006cf6:	bf00      	nop
 8006cf8:	3714      	adds	r7, #20
 8006cfa:	46bd      	mov	sp, r7
 8006cfc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006d00:	4770      	bx	lr
 8006d02:	bf00      	nop
 8006d04:	20000384 	.word	0x20000384
 8006d08:	200003e4 	.word	0x200003e4

08006d0c <vApplicationGetTimerTaskMemory>:

/*
  vApplicationGetTimerTaskMemory gets called when configSUPPORT_STATIC_ALLOCATION
  equals to 1 and is required for static memory allocation support.
*/
__WEAK void vApplicationGetTimerTaskMemory (StaticTask_t **ppxTimerTaskTCBBuffer, StackType_t **ppxTimerTaskStackBuffer, uint32_t *pulTimerTaskStackSize) {
 8006d0c:	b480      	push	{r7}
 8006d0e:	b085      	sub	sp, #20
 8006d10:	af00      	add	r7, sp, #0
 8006d12:	60f8      	str	r0, [r7, #12]
 8006d14:	60b9      	str	r1, [r7, #8]
 8006d16:	607a      	str	r2, [r7, #4]
  /* Timer task control block and stack */
  static StaticTask_t Timer_TCB;
  static StackType_t  Timer_Stack[configTIMER_TASK_STACK_DEPTH];

  *ppxTimerTaskTCBBuffer   = &Timer_TCB;
 8006d18:	68fb      	ldr	r3, [r7, #12]
 8006d1a:	4a07      	ldr	r2, [pc, #28]	; (8006d38 <vApplicationGetTimerTaskMemory+0x2c>)
 8006d1c:	601a      	str	r2, [r3, #0]
  *ppxTimerTaskStackBuffer = &Timer_Stack[0];
 8006d1e:	68bb      	ldr	r3, [r7, #8]
 8006d20:	4a06      	ldr	r2, [pc, #24]	; (8006d3c <vApplicationGetTimerTaskMemory+0x30>)
 8006d22:	601a      	str	r2, [r3, #0]
  *pulTimerTaskStackSize   = (uint32_t)configTIMER_TASK_STACK_DEPTH;
 8006d24:	687b      	ldr	r3, [r7, #4]
 8006d26:	f44f 7280 	mov.w	r2, #256	; 0x100
 8006d2a:	601a      	str	r2, [r3, #0]
}
 8006d2c:	bf00      	nop
 8006d2e:	3714      	adds	r7, #20
 8006d30:	46bd      	mov	sp, r7
 8006d32:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006d36:	4770      	bx	lr
 8006d38:	200005e4 	.word	0x200005e4
 8006d3c:	20000644 	.word	0x20000644

08006d40 <vListInitialise>:
/*-----------------------------------------------------------
 * PUBLIC LIST API documented in list.h
 *----------------------------------------------------------*/

void vListInitialise( List_t * const pxList )
{
 8006d40:	b480      	push	{r7}
 8006d42:	b083      	sub	sp, #12
 8006d44:	af00      	add	r7, sp, #0
 8006d46:	6078      	str	r0, [r7, #4]
	/* The list structure contains a list item which is used to mark the
	end of the list.  To initialise the list the list end is inserted
	as the only list entry. */
	pxList->pxIndex = ( ListItem_t * ) &( pxList->xListEnd );			/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8006d48:	687b      	ldr	r3, [r7, #4]
 8006d4a:	f103 0208 	add.w	r2, r3, #8
 8006d4e:	687b      	ldr	r3, [r7, #4]
 8006d50:	605a      	str	r2, [r3, #4]

	/* The list end value is the highest possible value in the list to
	ensure it remains at the end of the list. */
	pxList->xListEnd.xItemValue = portMAX_DELAY;
 8006d52:	687b      	ldr	r3, [r7, #4]
 8006d54:	f04f 32ff 	mov.w	r2, #4294967295
 8006d58:	609a      	str	r2, [r3, #8]

	/* The list end next and previous pointers point to itself so we know
	when the list is empty. */
	pxList->xListEnd.pxNext = ( ListItem_t * ) &( pxList->xListEnd );	/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8006d5a:	687b      	ldr	r3, [r7, #4]
 8006d5c:	f103 0208 	add.w	r2, r3, #8
 8006d60:	687b      	ldr	r3, [r7, #4]
 8006d62:	60da      	str	r2, [r3, #12]
	pxList->xListEnd.pxPrevious = ( ListItem_t * ) &( pxList->xListEnd );/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8006d64:	687b      	ldr	r3, [r7, #4]
 8006d66:	f103 0208 	add.w	r2, r3, #8
 8006d6a:	687b      	ldr	r3, [r7, #4]
 8006d6c:	611a      	str	r2, [r3, #16]

	pxList->uxNumberOfItems = ( UBaseType_t ) 0U;
 8006d6e:	687b      	ldr	r3, [r7, #4]
 8006d70:	2200      	movs	r2, #0
 8006d72:	601a      	str	r2, [r3, #0]

	/* Write known values into the list if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_LIST_INTEGRITY_CHECK_1_VALUE( pxList );
	listSET_LIST_INTEGRITY_CHECK_2_VALUE( pxList );
}
 8006d74:	bf00      	nop
 8006d76:	370c      	adds	r7, #12
 8006d78:	46bd      	mov	sp, r7
 8006d7a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006d7e:	4770      	bx	lr

08006d80 <vListInitialiseItem>:
/*-----------------------------------------------------------*/

void vListInitialiseItem( ListItem_t * const pxItem )
{
 8006d80:	b480      	push	{r7}
 8006d82:	b083      	sub	sp, #12
 8006d84:	af00      	add	r7, sp, #0
 8006d86:	6078      	str	r0, [r7, #4]
	/* Make sure the list item is not recorded as being on a list. */
	pxItem->pxContainer = NULL;
 8006d88:	687b      	ldr	r3, [r7, #4]
 8006d8a:	2200      	movs	r2, #0
 8006d8c:	611a      	str	r2, [r3, #16]

	/* Write known values into the list item if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_FIRST_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
	listSET_SECOND_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
}
 8006d8e:	bf00      	nop
 8006d90:	370c      	adds	r7, #12
 8006d92:	46bd      	mov	sp, r7
 8006d94:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006d98:	4770      	bx	lr

08006d9a <vListInsertEnd>:
/*-----------------------------------------------------------*/

void vListInsertEnd( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 8006d9a:	b480      	push	{r7}
 8006d9c:	b085      	sub	sp, #20
 8006d9e:	af00      	add	r7, sp, #0
 8006da0:	6078      	str	r0, [r7, #4]
 8006da2:	6039      	str	r1, [r7, #0]
ListItem_t * const pxIndex = pxList->pxIndex;
 8006da4:	687b      	ldr	r3, [r7, #4]
 8006da6:	685b      	ldr	r3, [r3, #4]
 8006da8:	60fb      	str	r3, [r7, #12]
	listTEST_LIST_ITEM_INTEGRITY( pxNewListItem );

	/* Insert a new list item into pxList, but rather than sort the list,
	makes the new list item the last item to be removed by a call to
	listGET_OWNER_OF_NEXT_ENTRY(). */
	pxNewListItem->pxNext = pxIndex;
 8006daa:	683b      	ldr	r3, [r7, #0]
 8006dac:	68fa      	ldr	r2, [r7, #12]
 8006dae:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxPrevious = pxIndex->pxPrevious;
 8006db0:	68fb      	ldr	r3, [r7, #12]
 8006db2:	689a      	ldr	r2, [r3, #8]
 8006db4:	683b      	ldr	r3, [r7, #0]
 8006db6:	609a      	str	r2, [r3, #8]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	pxIndex->pxPrevious->pxNext = pxNewListItem;
 8006db8:	68fb      	ldr	r3, [r7, #12]
 8006dba:	689b      	ldr	r3, [r3, #8]
 8006dbc:	683a      	ldr	r2, [r7, #0]
 8006dbe:	605a      	str	r2, [r3, #4]
	pxIndex->pxPrevious = pxNewListItem;
 8006dc0:	68fb      	ldr	r3, [r7, #12]
 8006dc2:	683a      	ldr	r2, [r7, #0]
 8006dc4:	609a      	str	r2, [r3, #8]

	/* Remember which list the item is in. */
	pxNewListItem->pxContainer = pxList;
 8006dc6:	683b      	ldr	r3, [r7, #0]
 8006dc8:	687a      	ldr	r2, [r7, #4]
 8006dca:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 8006dcc:	687b      	ldr	r3, [r7, #4]
 8006dce:	681b      	ldr	r3, [r3, #0]
 8006dd0:	1c5a      	adds	r2, r3, #1
 8006dd2:	687b      	ldr	r3, [r7, #4]
 8006dd4:	601a      	str	r2, [r3, #0]
}
 8006dd6:	bf00      	nop
 8006dd8:	3714      	adds	r7, #20
 8006dda:	46bd      	mov	sp, r7
 8006ddc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006de0:	4770      	bx	lr

08006de2 <vListInsert>:
/*-----------------------------------------------------------*/

void vListInsert( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 8006de2:	b480      	push	{r7}
 8006de4:	b085      	sub	sp, #20
 8006de6:	af00      	add	r7, sp, #0
 8006de8:	6078      	str	r0, [r7, #4]
 8006dea:	6039      	str	r1, [r7, #0]
ListItem_t *pxIterator;
const TickType_t xValueOfInsertion = pxNewListItem->xItemValue;
 8006dec:	683b      	ldr	r3, [r7, #0]
 8006dee:	681b      	ldr	r3, [r3, #0]
 8006df0:	60bb      	str	r3, [r7, #8]
	new list item should be placed after it.  This ensures that TCBs which are
	stored in ready lists (all of which have the same xItemValue value) get a
	share of the CPU.  However, if the xItemValue is the same as the back marker
	the iteration loop below will not end.  Therefore the value is checked
	first, and the algorithm slightly modified if necessary. */
	if( xValueOfInsertion == portMAX_DELAY )
 8006df2:	68bb      	ldr	r3, [r7, #8]
 8006df4:	f1b3 3fff 	cmp.w	r3, #4294967295
 8006df8:	d103      	bne.n	8006e02 <vListInsert+0x20>
	{
		pxIterator = pxList->xListEnd.pxPrevious;
 8006dfa:	687b      	ldr	r3, [r7, #4]
 8006dfc:	691b      	ldr	r3, [r3, #16]
 8006dfe:	60fb      	str	r3, [r7, #12]
 8006e00:	e00c      	b.n	8006e1c <vListInsert+0x3a>
			4) Using a queue or semaphore before it has been initialised or
			   before the scheduler has been started (are interrupts firing
			   before vTaskStartScheduler() has been called?).
		**********************************************************************/

		for( pxIterator = ( ListItem_t * ) &( pxList->xListEnd ); pxIterator->pxNext->xItemValue <= xValueOfInsertion; pxIterator = pxIterator->pxNext ) /*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. *//*lint !e440 The iterator moves to a different value, not xValueOfInsertion. */
 8006e02:	687b      	ldr	r3, [r7, #4]
 8006e04:	3308      	adds	r3, #8
 8006e06:	60fb      	str	r3, [r7, #12]
 8006e08:	e002      	b.n	8006e10 <vListInsert+0x2e>
 8006e0a:	68fb      	ldr	r3, [r7, #12]
 8006e0c:	685b      	ldr	r3, [r3, #4]
 8006e0e:	60fb      	str	r3, [r7, #12]
 8006e10:	68fb      	ldr	r3, [r7, #12]
 8006e12:	685b      	ldr	r3, [r3, #4]
 8006e14:	681b      	ldr	r3, [r3, #0]
 8006e16:	68ba      	ldr	r2, [r7, #8]
 8006e18:	429a      	cmp	r2, r3
 8006e1a:	d2f6      	bcs.n	8006e0a <vListInsert+0x28>
			/* There is nothing to do here, just iterating to the wanted
			insertion position. */
		}
	}

	pxNewListItem->pxNext = pxIterator->pxNext;
 8006e1c:	68fb      	ldr	r3, [r7, #12]
 8006e1e:	685a      	ldr	r2, [r3, #4]
 8006e20:	683b      	ldr	r3, [r7, #0]
 8006e22:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxNext->pxPrevious = pxNewListItem;
 8006e24:	683b      	ldr	r3, [r7, #0]
 8006e26:	685b      	ldr	r3, [r3, #4]
 8006e28:	683a      	ldr	r2, [r7, #0]
 8006e2a:	609a      	str	r2, [r3, #8]
	pxNewListItem->pxPrevious = pxIterator;
 8006e2c:	683b      	ldr	r3, [r7, #0]
 8006e2e:	68fa      	ldr	r2, [r7, #12]
 8006e30:	609a      	str	r2, [r3, #8]
	pxIterator->pxNext = pxNewListItem;
 8006e32:	68fb      	ldr	r3, [r7, #12]
 8006e34:	683a      	ldr	r2, [r7, #0]
 8006e36:	605a      	str	r2, [r3, #4]

	/* Remember which list the item is in.  This allows fast removal of the
	item later. */
	pxNewListItem->pxContainer = pxList;
 8006e38:	683b      	ldr	r3, [r7, #0]
 8006e3a:	687a      	ldr	r2, [r7, #4]
 8006e3c:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 8006e3e:	687b      	ldr	r3, [r7, #4]
 8006e40:	681b      	ldr	r3, [r3, #0]
 8006e42:	1c5a      	adds	r2, r3, #1
 8006e44:	687b      	ldr	r3, [r7, #4]
 8006e46:	601a      	str	r2, [r3, #0]
}
 8006e48:	bf00      	nop
 8006e4a:	3714      	adds	r7, #20
 8006e4c:	46bd      	mov	sp, r7
 8006e4e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006e52:	4770      	bx	lr

08006e54 <uxListRemove>:
/*-----------------------------------------------------------*/

UBaseType_t uxListRemove( ListItem_t * const pxItemToRemove )
{
 8006e54:	b480      	push	{r7}
 8006e56:	b085      	sub	sp, #20
 8006e58:	af00      	add	r7, sp, #0
 8006e5a:	6078      	str	r0, [r7, #4]
/* The list item knows which list it is in.  Obtain the list from the list
item. */
List_t * const pxList = pxItemToRemove->pxContainer;
 8006e5c:	687b      	ldr	r3, [r7, #4]
 8006e5e:	691b      	ldr	r3, [r3, #16]
 8006e60:	60fb      	str	r3, [r7, #12]

	pxItemToRemove->pxNext->pxPrevious = pxItemToRemove->pxPrevious;
 8006e62:	687b      	ldr	r3, [r7, #4]
 8006e64:	685b      	ldr	r3, [r3, #4]
 8006e66:	687a      	ldr	r2, [r7, #4]
 8006e68:	6892      	ldr	r2, [r2, #8]
 8006e6a:	609a      	str	r2, [r3, #8]
	pxItemToRemove->pxPrevious->pxNext = pxItemToRemove->pxNext;
 8006e6c:	687b      	ldr	r3, [r7, #4]
 8006e6e:	689b      	ldr	r3, [r3, #8]
 8006e70:	687a      	ldr	r2, [r7, #4]
 8006e72:	6852      	ldr	r2, [r2, #4]
 8006e74:	605a      	str	r2, [r3, #4]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	/* Make sure the index is left pointing to a valid item. */
	if( pxList->pxIndex == pxItemToRemove )
 8006e76:	68fb      	ldr	r3, [r7, #12]
 8006e78:	685b      	ldr	r3, [r3, #4]
 8006e7a:	687a      	ldr	r2, [r7, #4]
 8006e7c:	429a      	cmp	r2, r3
 8006e7e:	d103      	bne.n	8006e88 <uxListRemove+0x34>
	{
		pxList->pxIndex = pxItemToRemove->pxPrevious;
 8006e80:	687b      	ldr	r3, [r7, #4]
 8006e82:	689a      	ldr	r2, [r3, #8]
 8006e84:	68fb      	ldr	r3, [r7, #12]
 8006e86:	605a      	str	r2, [r3, #4]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxItemToRemove->pxContainer = NULL;
 8006e88:	687b      	ldr	r3, [r7, #4]
 8006e8a:	2200      	movs	r2, #0
 8006e8c:	611a      	str	r2, [r3, #16]
	( pxList->uxNumberOfItems )--;
 8006e8e:	68fb      	ldr	r3, [r7, #12]
 8006e90:	681b      	ldr	r3, [r3, #0]
 8006e92:	1e5a      	subs	r2, r3, #1
 8006e94:	68fb      	ldr	r3, [r7, #12]
 8006e96:	601a      	str	r2, [r3, #0]

	return pxList->uxNumberOfItems;
 8006e98:	68fb      	ldr	r3, [r7, #12]
 8006e9a:	681b      	ldr	r3, [r3, #0]
}
 8006e9c:	4618      	mov	r0, r3
 8006e9e:	3714      	adds	r7, #20
 8006ea0:	46bd      	mov	sp, r7
 8006ea2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006ea6:	4770      	bx	lr

08006ea8 <xQueueGenericReset>:
	}														\
	taskEXIT_CRITICAL()
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericReset( QueueHandle_t xQueue, BaseType_t xNewQueue )
{
 8006ea8:	b580      	push	{r7, lr}
 8006eaa:	b084      	sub	sp, #16
 8006eac:	af00      	add	r7, sp, #0
 8006eae:	6078      	str	r0, [r7, #4]
 8006eb0:	6039      	str	r1, [r7, #0]
Queue_t * const pxQueue = xQueue;
 8006eb2:	687b      	ldr	r3, [r7, #4]
 8006eb4:	60fb      	str	r3, [r7, #12]

	configASSERT( pxQueue );
 8006eb6:	68fb      	ldr	r3, [r7, #12]
 8006eb8:	2b00      	cmp	r3, #0
 8006eba:	d10a      	bne.n	8006ed2 <xQueueGenericReset+0x2a>

portFORCE_INLINE static void vPortRaiseBASEPRI( void )
{
uint32_t ulNewBASEPRI;

	__asm volatile
 8006ebc:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006ec0:	f383 8811 	msr	BASEPRI, r3
 8006ec4:	f3bf 8f6f 	isb	sy
 8006ec8:	f3bf 8f4f 	dsb	sy
 8006ecc:	60bb      	str	r3, [r7, #8]
		"	msr basepri, %0											\n" \
		"	isb														\n" \
		"	dsb														\n" \
		:"=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
	);
}
 8006ece:	bf00      	nop
 8006ed0:	e7fe      	b.n	8006ed0 <xQueueGenericReset+0x28>

	taskENTER_CRITICAL();
 8006ed2:	f002 f907 	bl	80090e4 <vPortEnterCritical>
	{
		pxQueue->u.xQueue.pcTail = pxQueue->pcHead + ( pxQueue->uxLength * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 8006ed6:	68fb      	ldr	r3, [r7, #12]
 8006ed8:	681a      	ldr	r2, [r3, #0]
 8006eda:	68fb      	ldr	r3, [r7, #12]
 8006edc:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8006ede:	68f9      	ldr	r1, [r7, #12]
 8006ee0:	6c09      	ldr	r1, [r1, #64]	; 0x40
 8006ee2:	fb01 f303 	mul.w	r3, r1, r3
 8006ee6:	441a      	add	r2, r3
 8006ee8:	68fb      	ldr	r3, [r7, #12]
 8006eea:	609a      	str	r2, [r3, #8]
		pxQueue->uxMessagesWaiting = ( UBaseType_t ) 0U;
 8006eec:	68fb      	ldr	r3, [r7, #12]
 8006eee:	2200      	movs	r2, #0
 8006ef0:	639a      	str	r2, [r3, #56]	; 0x38
		pxQueue->pcWriteTo = pxQueue->pcHead;
 8006ef2:	68fb      	ldr	r3, [r7, #12]
 8006ef4:	681a      	ldr	r2, [r3, #0]
 8006ef6:	68fb      	ldr	r3, [r7, #12]
 8006ef8:	605a      	str	r2, [r3, #4]
		pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead + ( ( pxQueue->uxLength - 1U ) * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 8006efa:	68fb      	ldr	r3, [r7, #12]
 8006efc:	681a      	ldr	r2, [r3, #0]
 8006efe:	68fb      	ldr	r3, [r7, #12]
 8006f00:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8006f02:	3b01      	subs	r3, #1
 8006f04:	68f9      	ldr	r1, [r7, #12]
 8006f06:	6c09      	ldr	r1, [r1, #64]	; 0x40
 8006f08:	fb01 f303 	mul.w	r3, r1, r3
 8006f0c:	441a      	add	r2, r3
 8006f0e:	68fb      	ldr	r3, [r7, #12]
 8006f10:	60da      	str	r2, [r3, #12]
		pxQueue->cRxLock = queueUNLOCKED;
 8006f12:	68fb      	ldr	r3, [r7, #12]
 8006f14:	22ff      	movs	r2, #255	; 0xff
 8006f16:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
		pxQueue->cTxLock = queueUNLOCKED;
 8006f1a:	68fb      	ldr	r3, [r7, #12]
 8006f1c:	22ff      	movs	r2, #255	; 0xff
 8006f1e:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

		if( xNewQueue == pdFALSE )
 8006f22:	683b      	ldr	r3, [r7, #0]
 8006f24:	2b00      	cmp	r3, #0
 8006f26:	d114      	bne.n	8006f52 <xQueueGenericReset+0xaa>
			/* If there are tasks blocked waiting to read from the queue, then
			the tasks will remain blocked as after this function exits the queue
			will still be empty.  If there are tasks blocked waiting to write to
			the queue, then one should be unblocked as after this function exits
			it will be possible to write to it. */
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8006f28:	68fb      	ldr	r3, [r7, #12]
 8006f2a:	691b      	ldr	r3, [r3, #16]
 8006f2c:	2b00      	cmp	r3, #0
 8006f2e:	d01a      	beq.n	8006f66 <xQueueGenericReset+0xbe>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8006f30:	68fb      	ldr	r3, [r7, #12]
 8006f32:	3310      	adds	r3, #16
 8006f34:	4618      	mov	r0, r3
 8006f36:	f001 f9b9 	bl	80082ac <xTaskRemoveFromEventList>
 8006f3a:	4603      	mov	r3, r0
 8006f3c:	2b00      	cmp	r3, #0
 8006f3e:	d012      	beq.n	8006f66 <xQueueGenericReset+0xbe>
				{
					queueYIELD_IF_USING_PREEMPTION();
 8006f40:	4b0c      	ldr	r3, [pc, #48]	; (8006f74 <xQueueGenericReset+0xcc>)
 8006f42:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8006f46:	601a      	str	r2, [r3, #0]
 8006f48:	f3bf 8f4f 	dsb	sy
 8006f4c:	f3bf 8f6f 	isb	sy
 8006f50:	e009      	b.n	8006f66 <xQueueGenericReset+0xbe>
			}
		}
		else
		{
			/* Ensure the event queues start in the correct state. */
			vListInitialise( &( pxQueue->xTasksWaitingToSend ) );
 8006f52:	68fb      	ldr	r3, [r7, #12]
 8006f54:	3310      	adds	r3, #16
 8006f56:	4618      	mov	r0, r3
 8006f58:	f7ff fef2 	bl	8006d40 <vListInitialise>
			vListInitialise( &( pxQueue->xTasksWaitingToReceive ) );
 8006f5c:	68fb      	ldr	r3, [r7, #12]
 8006f5e:	3324      	adds	r3, #36	; 0x24
 8006f60:	4618      	mov	r0, r3
 8006f62:	f7ff feed 	bl	8006d40 <vListInitialise>
		}
	}
	taskEXIT_CRITICAL();
 8006f66:	f002 f8ed 	bl	8009144 <vPortExitCritical>

	/* A value is returned for calling semantic consistency with previous
	versions. */
	return pdPASS;
 8006f6a:	2301      	movs	r3, #1
}
 8006f6c:	4618      	mov	r0, r3
 8006f6e:	3710      	adds	r7, #16
 8006f70:	46bd      	mov	sp, r7
 8006f72:	bd80      	pop	{r7, pc}
 8006f74:	e000ed04 	.word	0xe000ed04

08006f78 <xQueueGenericCreateStatic>:
/*-----------------------------------------------------------*/

#if( configSUPPORT_STATIC_ALLOCATION == 1 )

	QueueHandle_t xQueueGenericCreateStatic( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, StaticQueue_t *pxStaticQueue, const uint8_t ucQueueType )
	{
 8006f78:	b580      	push	{r7, lr}
 8006f7a:	b08e      	sub	sp, #56	; 0x38
 8006f7c:	af02      	add	r7, sp, #8
 8006f7e:	60f8      	str	r0, [r7, #12]
 8006f80:	60b9      	str	r1, [r7, #8]
 8006f82:	607a      	str	r2, [r7, #4]
 8006f84:	603b      	str	r3, [r7, #0]
	Queue_t *pxNewQueue;

		configASSERT( uxQueueLength > ( UBaseType_t ) 0 );
 8006f86:	68fb      	ldr	r3, [r7, #12]
 8006f88:	2b00      	cmp	r3, #0
 8006f8a:	d10a      	bne.n	8006fa2 <xQueueGenericCreateStatic+0x2a>
	__asm volatile
 8006f8c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006f90:	f383 8811 	msr	BASEPRI, r3
 8006f94:	f3bf 8f6f 	isb	sy
 8006f98:	f3bf 8f4f 	dsb	sy
 8006f9c:	62bb      	str	r3, [r7, #40]	; 0x28
}
 8006f9e:	bf00      	nop
 8006fa0:	e7fe      	b.n	8006fa0 <xQueueGenericCreateStatic+0x28>

		/* The StaticQueue_t structure and the queue storage area must be
		supplied. */
		configASSERT( pxStaticQueue != NULL );
 8006fa2:	683b      	ldr	r3, [r7, #0]
 8006fa4:	2b00      	cmp	r3, #0
 8006fa6:	d10a      	bne.n	8006fbe <xQueueGenericCreateStatic+0x46>
	__asm volatile
 8006fa8:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006fac:	f383 8811 	msr	BASEPRI, r3
 8006fb0:	f3bf 8f6f 	isb	sy
 8006fb4:	f3bf 8f4f 	dsb	sy
 8006fb8:	627b      	str	r3, [r7, #36]	; 0x24
}
 8006fba:	bf00      	nop
 8006fbc:	e7fe      	b.n	8006fbc <xQueueGenericCreateStatic+0x44>

		/* A queue storage area should be provided if the item size is not 0, and
		should not be provided if the item size is 0. */
		configASSERT( !( ( pucQueueStorage != NULL ) && ( uxItemSize == 0 ) ) );
 8006fbe:	687b      	ldr	r3, [r7, #4]
 8006fc0:	2b00      	cmp	r3, #0
 8006fc2:	d002      	beq.n	8006fca <xQueueGenericCreateStatic+0x52>
 8006fc4:	68bb      	ldr	r3, [r7, #8]
 8006fc6:	2b00      	cmp	r3, #0
 8006fc8:	d001      	beq.n	8006fce <xQueueGenericCreateStatic+0x56>
 8006fca:	2301      	movs	r3, #1
 8006fcc:	e000      	b.n	8006fd0 <xQueueGenericCreateStatic+0x58>
 8006fce:	2300      	movs	r3, #0
 8006fd0:	2b00      	cmp	r3, #0
 8006fd2:	d10a      	bne.n	8006fea <xQueueGenericCreateStatic+0x72>
	__asm volatile
 8006fd4:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006fd8:	f383 8811 	msr	BASEPRI, r3
 8006fdc:	f3bf 8f6f 	isb	sy
 8006fe0:	f3bf 8f4f 	dsb	sy
 8006fe4:	623b      	str	r3, [r7, #32]
}
 8006fe6:	bf00      	nop
 8006fe8:	e7fe      	b.n	8006fe8 <xQueueGenericCreateStatic+0x70>
		configASSERT( !( ( pucQueueStorage == NULL ) && ( uxItemSize != 0 ) ) );
 8006fea:	687b      	ldr	r3, [r7, #4]
 8006fec:	2b00      	cmp	r3, #0
 8006fee:	d102      	bne.n	8006ff6 <xQueueGenericCreateStatic+0x7e>
 8006ff0:	68bb      	ldr	r3, [r7, #8]
 8006ff2:	2b00      	cmp	r3, #0
 8006ff4:	d101      	bne.n	8006ffa <xQueueGenericCreateStatic+0x82>
 8006ff6:	2301      	movs	r3, #1
 8006ff8:	e000      	b.n	8006ffc <xQueueGenericCreateStatic+0x84>
 8006ffa:	2300      	movs	r3, #0
 8006ffc:	2b00      	cmp	r3, #0
 8006ffe:	d10a      	bne.n	8007016 <xQueueGenericCreateStatic+0x9e>
	__asm volatile
 8007000:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007004:	f383 8811 	msr	BASEPRI, r3
 8007008:	f3bf 8f6f 	isb	sy
 800700c:	f3bf 8f4f 	dsb	sy
 8007010:	61fb      	str	r3, [r7, #28]
}
 8007012:	bf00      	nop
 8007014:	e7fe      	b.n	8007014 <xQueueGenericCreateStatic+0x9c>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticQueue_t or StaticSemaphore_t equals the size of
			the real queue and semaphore structures. */
			volatile size_t xSize = sizeof( StaticQueue_t );
 8007016:	2350      	movs	r3, #80	; 0x50
 8007018:	617b      	str	r3, [r7, #20]
			configASSERT( xSize == sizeof( Queue_t ) );
 800701a:	697b      	ldr	r3, [r7, #20]
 800701c:	2b50      	cmp	r3, #80	; 0x50
 800701e:	d00a      	beq.n	8007036 <xQueueGenericCreateStatic+0xbe>
	__asm volatile
 8007020:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007024:	f383 8811 	msr	BASEPRI, r3
 8007028:	f3bf 8f6f 	isb	sy
 800702c:	f3bf 8f4f 	dsb	sy
 8007030:	61bb      	str	r3, [r7, #24]
}
 8007032:	bf00      	nop
 8007034:	e7fe      	b.n	8007034 <xQueueGenericCreateStatic+0xbc>
			( void ) xSize; /* Keeps lint quiet when configASSERT() is not defined. */
 8007036:	697b      	ldr	r3, [r7, #20]
		#endif /* configASSERT_DEFINED */

		/* The address of a statically allocated queue was passed in, use it.
		The address of a statically allocated storage area was also passed in
		but is already set. */
		pxNewQueue = ( Queue_t * ) pxStaticQueue; /*lint !e740 !e9087 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 8007038:	683b      	ldr	r3, [r7, #0]
 800703a:	62fb      	str	r3, [r7, #44]	; 0x2c

		if( pxNewQueue != NULL )
 800703c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800703e:	2b00      	cmp	r3, #0
 8007040:	d00d      	beq.n	800705e <xQueueGenericCreateStatic+0xe6>
			#if( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
			{
				/* Queues can be allocated wither statically or dynamically, so
				note this queue was allocated statically in case the queue is
				later deleted. */
				pxNewQueue->ucStaticallyAllocated = pdTRUE;
 8007042:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007044:	2201      	movs	r2, #1
 8007046:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
			}
			#endif /* configSUPPORT_DYNAMIC_ALLOCATION */

			prvInitialiseNewQueue( uxQueueLength, uxItemSize, pucQueueStorage, ucQueueType, pxNewQueue );
 800704a:	f897 2038 	ldrb.w	r2, [r7, #56]	; 0x38
 800704e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007050:	9300      	str	r3, [sp, #0]
 8007052:	4613      	mov	r3, r2
 8007054:	687a      	ldr	r2, [r7, #4]
 8007056:	68b9      	ldr	r1, [r7, #8]
 8007058:	68f8      	ldr	r0, [r7, #12]
 800705a:	f000 f805 	bl	8007068 <prvInitialiseNewQueue>
		{
			traceQUEUE_CREATE_FAILED( ucQueueType );
			mtCOVERAGE_TEST_MARKER();
		}

		return pxNewQueue;
 800705e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
	}
 8007060:	4618      	mov	r0, r3
 8007062:	3730      	adds	r7, #48	; 0x30
 8007064:	46bd      	mov	sp, r7
 8007066:	bd80      	pop	{r7, pc}

08007068 <prvInitialiseNewQueue>:

#endif /* configSUPPORT_STATIC_ALLOCATION */
/*-----------------------------------------------------------*/

static void prvInitialiseNewQueue( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, const uint8_t ucQueueType, Queue_t *pxNewQueue )
{
 8007068:	b580      	push	{r7, lr}
 800706a:	b084      	sub	sp, #16
 800706c:	af00      	add	r7, sp, #0
 800706e:	60f8      	str	r0, [r7, #12]
 8007070:	60b9      	str	r1, [r7, #8]
 8007072:	607a      	str	r2, [r7, #4]
 8007074:	70fb      	strb	r3, [r7, #3]
	/* Remove compiler warnings about unused parameters should
	configUSE_TRACE_FACILITY not be set to 1. */
	( void ) ucQueueType;

	if( uxItemSize == ( UBaseType_t ) 0 )
 8007076:	68bb      	ldr	r3, [r7, #8]
 8007078:	2b00      	cmp	r3, #0
 800707a:	d103      	bne.n	8007084 <prvInitialiseNewQueue+0x1c>
	{
		/* No RAM was allocated for the queue storage area, but PC head cannot
		be set to NULL because NULL is used as a key to say the queue is used as
		a mutex.  Therefore just set pcHead to point to the queue as a benign
		value that is known to be within the memory map. */
		pxNewQueue->pcHead = ( int8_t * ) pxNewQueue;
 800707c:	69bb      	ldr	r3, [r7, #24]
 800707e:	69ba      	ldr	r2, [r7, #24]
 8007080:	601a      	str	r2, [r3, #0]
 8007082:	e002      	b.n	800708a <prvInitialiseNewQueue+0x22>
	}
	else
	{
		/* Set the head to the start of the queue storage area. */
		pxNewQueue->pcHead = ( int8_t * ) pucQueueStorage;
 8007084:	69bb      	ldr	r3, [r7, #24]
 8007086:	687a      	ldr	r2, [r7, #4]
 8007088:	601a      	str	r2, [r3, #0]
	}

	/* Initialise the queue members as described where the queue type is
	defined. */
	pxNewQueue->uxLength = uxQueueLength;
 800708a:	69bb      	ldr	r3, [r7, #24]
 800708c:	68fa      	ldr	r2, [r7, #12]
 800708e:	63da      	str	r2, [r3, #60]	; 0x3c
	pxNewQueue->uxItemSize = uxItemSize;
 8007090:	69bb      	ldr	r3, [r7, #24]
 8007092:	68ba      	ldr	r2, [r7, #8]
 8007094:	641a      	str	r2, [r3, #64]	; 0x40
	( void ) xQueueGenericReset( pxNewQueue, pdTRUE );
 8007096:	2101      	movs	r1, #1
 8007098:	69b8      	ldr	r0, [r7, #24]
 800709a:	f7ff ff05 	bl	8006ea8 <xQueueGenericReset>

	#if ( configUSE_TRACE_FACILITY == 1 )
	{
		pxNewQueue->ucQueueType = ucQueueType;
 800709e:	69bb      	ldr	r3, [r7, #24]
 80070a0:	78fa      	ldrb	r2, [r7, #3]
 80070a2:	f883 204c 	strb.w	r2, [r3, #76]	; 0x4c
		pxNewQueue->pxQueueSetContainer = NULL;
	}
	#endif /* configUSE_QUEUE_SETS */

	traceQUEUE_CREATE( pxNewQueue );
}
 80070a6:	bf00      	nop
 80070a8:	3710      	adds	r7, #16
 80070aa:	46bd      	mov	sp, r7
 80070ac:	bd80      	pop	{r7, pc}
	...

080070b0 <xQueueGenericSend>:

#endif /* ( ( configUSE_COUNTING_SEMAPHORES == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) ) */
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSend( QueueHandle_t xQueue, const void * const pvItemToQueue, TickType_t xTicksToWait, const BaseType_t xCopyPosition )
{
 80070b0:	b580      	push	{r7, lr}
 80070b2:	b08e      	sub	sp, #56	; 0x38
 80070b4:	af00      	add	r7, sp, #0
 80070b6:	60f8      	str	r0, [r7, #12]
 80070b8:	60b9      	str	r1, [r7, #8]
 80070ba:	607a      	str	r2, [r7, #4]
 80070bc:	603b      	str	r3, [r7, #0]
BaseType_t xEntryTimeSet = pdFALSE, xYieldRequired;
 80070be:	2300      	movs	r3, #0
 80070c0:	637b      	str	r3, [r7, #52]	; 0x34
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 80070c2:	68fb      	ldr	r3, [r7, #12]
 80070c4:	633b      	str	r3, [r7, #48]	; 0x30

	configASSERT( pxQueue );
 80070c6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80070c8:	2b00      	cmp	r3, #0
 80070ca:	d10a      	bne.n	80070e2 <xQueueGenericSend+0x32>
	__asm volatile
 80070cc:	f04f 0350 	mov.w	r3, #80	; 0x50
 80070d0:	f383 8811 	msr	BASEPRI, r3
 80070d4:	f3bf 8f6f 	isb	sy
 80070d8:	f3bf 8f4f 	dsb	sy
 80070dc:	62bb      	str	r3, [r7, #40]	; 0x28
}
 80070de:	bf00      	nop
 80070e0:	e7fe      	b.n	80070e0 <xQueueGenericSend+0x30>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 80070e2:	68bb      	ldr	r3, [r7, #8]
 80070e4:	2b00      	cmp	r3, #0
 80070e6:	d103      	bne.n	80070f0 <xQueueGenericSend+0x40>
 80070e8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80070ea:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80070ec:	2b00      	cmp	r3, #0
 80070ee:	d101      	bne.n	80070f4 <xQueueGenericSend+0x44>
 80070f0:	2301      	movs	r3, #1
 80070f2:	e000      	b.n	80070f6 <xQueueGenericSend+0x46>
 80070f4:	2300      	movs	r3, #0
 80070f6:	2b00      	cmp	r3, #0
 80070f8:	d10a      	bne.n	8007110 <xQueueGenericSend+0x60>
	__asm volatile
 80070fa:	f04f 0350 	mov.w	r3, #80	; 0x50
 80070fe:	f383 8811 	msr	BASEPRI, r3
 8007102:	f3bf 8f6f 	isb	sy
 8007106:	f3bf 8f4f 	dsb	sy
 800710a:	627b      	str	r3, [r7, #36]	; 0x24
}
 800710c:	bf00      	nop
 800710e:	e7fe      	b.n	800710e <xQueueGenericSend+0x5e>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 8007110:	683b      	ldr	r3, [r7, #0]
 8007112:	2b02      	cmp	r3, #2
 8007114:	d103      	bne.n	800711e <xQueueGenericSend+0x6e>
 8007116:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007118:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800711a:	2b01      	cmp	r3, #1
 800711c:	d101      	bne.n	8007122 <xQueueGenericSend+0x72>
 800711e:	2301      	movs	r3, #1
 8007120:	e000      	b.n	8007124 <xQueueGenericSend+0x74>
 8007122:	2300      	movs	r3, #0
 8007124:	2b00      	cmp	r3, #0
 8007126:	d10a      	bne.n	800713e <xQueueGenericSend+0x8e>
	__asm volatile
 8007128:	f04f 0350 	mov.w	r3, #80	; 0x50
 800712c:	f383 8811 	msr	BASEPRI, r3
 8007130:	f3bf 8f6f 	isb	sy
 8007134:	f3bf 8f4f 	dsb	sy
 8007138:	623b      	str	r3, [r7, #32]
}
 800713a:	bf00      	nop
 800713c:	e7fe      	b.n	800713c <xQueueGenericSend+0x8c>
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 800713e:	f001 fa75 	bl	800862c <xTaskGetSchedulerState>
 8007142:	4603      	mov	r3, r0
 8007144:	2b00      	cmp	r3, #0
 8007146:	d102      	bne.n	800714e <xQueueGenericSend+0x9e>
 8007148:	687b      	ldr	r3, [r7, #4]
 800714a:	2b00      	cmp	r3, #0
 800714c:	d101      	bne.n	8007152 <xQueueGenericSend+0xa2>
 800714e:	2301      	movs	r3, #1
 8007150:	e000      	b.n	8007154 <xQueueGenericSend+0xa4>
 8007152:	2300      	movs	r3, #0
 8007154:	2b00      	cmp	r3, #0
 8007156:	d10a      	bne.n	800716e <xQueueGenericSend+0xbe>
	__asm volatile
 8007158:	f04f 0350 	mov.w	r3, #80	; 0x50
 800715c:	f383 8811 	msr	BASEPRI, r3
 8007160:	f3bf 8f6f 	isb	sy
 8007164:	f3bf 8f4f 	dsb	sy
 8007168:	61fb      	str	r3, [r7, #28]
}
 800716a:	bf00      	nop
 800716c:	e7fe      	b.n	800716c <xQueueGenericSend+0xbc>
	/*lint -save -e904 This function relaxes the coding standard somewhat to
	allow return statements within the function itself.  This is done in the
	interest of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 800716e:	f001 ffb9 	bl	80090e4 <vPortEnterCritical>
		{
			/* Is there room on the queue now?  The running task must be the
			highest priority task wanting to access the queue.  If the head item
			in the queue is to be overwritten then it does not matter if the
			queue is full. */
			if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 8007172:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007174:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8007176:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007178:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800717a:	429a      	cmp	r2, r3
 800717c:	d302      	bcc.n	8007184 <xQueueGenericSend+0xd4>
 800717e:	683b      	ldr	r3, [r7, #0]
 8007180:	2b02      	cmp	r3, #2
 8007182:	d129      	bne.n	80071d8 <xQueueGenericSend+0x128>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					xYieldRequired = prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 8007184:	683a      	ldr	r2, [r7, #0]
 8007186:	68b9      	ldr	r1, [r7, #8]
 8007188:	6b38      	ldr	r0, [r7, #48]	; 0x30
 800718a:	f000 fa0b 	bl	80075a4 <prvCopyDataToQueue>
 800718e:	62f8      	str	r0, [r7, #44]	; 0x2c

					/* If there was a task waiting for data to arrive on the
					queue then unblock it now. */
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8007190:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007192:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007194:	2b00      	cmp	r3, #0
 8007196:	d010      	beq.n	80071ba <xQueueGenericSend+0x10a>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8007198:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800719a:	3324      	adds	r3, #36	; 0x24
 800719c:	4618      	mov	r0, r3
 800719e:	f001 f885 	bl	80082ac <xTaskRemoveFromEventList>
 80071a2:	4603      	mov	r3, r0
 80071a4:	2b00      	cmp	r3, #0
 80071a6:	d013      	beq.n	80071d0 <xQueueGenericSend+0x120>
						{
							/* The unblocked task has a priority higher than
							our own so yield immediately.  Yes it is ok to do
							this from within the critical section - the kernel
							takes care of that. */
							queueYIELD_IF_USING_PREEMPTION();
 80071a8:	4b3f      	ldr	r3, [pc, #252]	; (80072a8 <xQueueGenericSend+0x1f8>)
 80071aa:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80071ae:	601a      	str	r2, [r3, #0]
 80071b0:	f3bf 8f4f 	dsb	sy
 80071b4:	f3bf 8f6f 	isb	sy
 80071b8:	e00a      	b.n	80071d0 <xQueueGenericSend+0x120>
						else
						{
							mtCOVERAGE_TEST_MARKER();
						}
					}
					else if( xYieldRequired != pdFALSE )
 80071ba:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80071bc:	2b00      	cmp	r3, #0
 80071be:	d007      	beq.n	80071d0 <xQueueGenericSend+0x120>
					{
						/* This path is a special case that will only get
						executed if the task was holding multiple mutexes and
						the mutexes were given back in an order that is
						different to that in which they were taken. */
						queueYIELD_IF_USING_PREEMPTION();
 80071c0:	4b39      	ldr	r3, [pc, #228]	; (80072a8 <xQueueGenericSend+0x1f8>)
 80071c2:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80071c6:	601a      	str	r2, [r3, #0]
 80071c8:	f3bf 8f4f 	dsb	sy
 80071cc:	f3bf 8f6f 	isb	sy
						mtCOVERAGE_TEST_MARKER();
					}
				}
				#endif /* configUSE_QUEUE_SETS */

				taskEXIT_CRITICAL();
 80071d0:	f001 ffb8 	bl	8009144 <vPortExitCritical>
				return pdPASS;
 80071d4:	2301      	movs	r3, #1
 80071d6:	e063      	b.n	80072a0 <xQueueGenericSend+0x1f0>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 80071d8:	687b      	ldr	r3, [r7, #4]
 80071da:	2b00      	cmp	r3, #0
 80071dc:	d103      	bne.n	80071e6 <xQueueGenericSend+0x136>
				{
					/* The queue was full and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 80071de:	f001 ffb1 	bl	8009144 <vPortExitCritical>

					/* Return to the original privilege level before exiting
					the function. */
					traceQUEUE_SEND_FAILED( pxQueue );
					return errQUEUE_FULL;
 80071e2:	2300      	movs	r3, #0
 80071e4:	e05c      	b.n	80072a0 <xQueueGenericSend+0x1f0>
				}
				else if( xEntryTimeSet == pdFALSE )
 80071e6:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80071e8:	2b00      	cmp	r3, #0
 80071ea:	d106      	bne.n	80071fa <xQueueGenericSend+0x14a>
				{
					/* The queue was full and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 80071ec:	f107 0314 	add.w	r3, r7, #20
 80071f0:	4618      	mov	r0, r3
 80071f2:	f001 f8bf 	bl	8008374 <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 80071f6:	2301      	movs	r3, #1
 80071f8:	637b      	str	r3, [r7, #52]	; 0x34
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 80071fa:	f001 ffa3 	bl	8009144 <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 80071fe:	f000 fe0d 	bl	8007e1c <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 8007202:	f001 ff6f 	bl	80090e4 <vPortEnterCritical>
 8007206:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007208:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 800720c:	b25b      	sxtb	r3, r3
 800720e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8007212:	d103      	bne.n	800721c <xQueueGenericSend+0x16c>
 8007214:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007216:	2200      	movs	r2, #0
 8007218:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 800721c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800721e:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8007222:	b25b      	sxtb	r3, r3
 8007224:	f1b3 3fff 	cmp.w	r3, #4294967295
 8007228:	d103      	bne.n	8007232 <xQueueGenericSend+0x182>
 800722a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800722c:	2200      	movs	r2, #0
 800722e:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8007232:	f001 ff87 	bl	8009144 <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 8007236:	1d3a      	adds	r2, r7, #4
 8007238:	f107 0314 	add.w	r3, r7, #20
 800723c:	4611      	mov	r1, r2
 800723e:	4618      	mov	r0, r3
 8007240:	f001 f8ae 	bl	80083a0 <xTaskCheckForTimeOut>
 8007244:	4603      	mov	r3, r0
 8007246:	2b00      	cmp	r3, #0
 8007248:	d124      	bne.n	8007294 <xQueueGenericSend+0x1e4>
		{
			if( prvIsQueueFull( pxQueue ) != pdFALSE )
 800724a:	6b38      	ldr	r0, [r7, #48]	; 0x30
 800724c:	f000 faa2 	bl	8007794 <prvIsQueueFull>
 8007250:	4603      	mov	r3, r0
 8007252:	2b00      	cmp	r3, #0
 8007254:	d018      	beq.n	8007288 <xQueueGenericSend+0x1d8>
			{
				traceBLOCKING_ON_QUEUE_SEND( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToSend ), xTicksToWait );
 8007256:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007258:	3310      	adds	r3, #16
 800725a:	687a      	ldr	r2, [r7, #4]
 800725c:	4611      	mov	r1, r2
 800725e:	4618      	mov	r0, r3
 8007260:	f000 ffd4 	bl	800820c <vTaskPlaceOnEventList>
				/* Unlocking the queue means queue events can effect the
				event list.  It is possible that interrupts occurring now
				remove this task from the event list again - but as the
				scheduler is suspended the task will go onto the pending
				ready last instead of the actual ready list. */
				prvUnlockQueue( pxQueue );
 8007264:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8007266:	f000 fa2d 	bl	80076c4 <prvUnlockQueue>
				/* Resuming the scheduler will move tasks from the pending
				ready list into the ready list - so it is feasible that this
				task is already in a ready list before it yields - in which
				case the yield will not cause a context switch unless there
				is also a higher priority task in the pending ready list. */
				if( xTaskResumeAll() == pdFALSE )
 800726a:	f000 fde5 	bl	8007e38 <xTaskResumeAll>
 800726e:	4603      	mov	r3, r0
 8007270:	2b00      	cmp	r3, #0
 8007272:	f47f af7c 	bne.w	800716e <xQueueGenericSend+0xbe>
				{
					portYIELD_WITHIN_API();
 8007276:	4b0c      	ldr	r3, [pc, #48]	; (80072a8 <xQueueGenericSend+0x1f8>)
 8007278:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800727c:	601a      	str	r2, [r3, #0]
 800727e:	f3bf 8f4f 	dsb	sy
 8007282:	f3bf 8f6f 	isb	sy
 8007286:	e772      	b.n	800716e <xQueueGenericSend+0xbe>
				}
			}
			else
			{
				/* Try again. */
				prvUnlockQueue( pxQueue );
 8007288:	6b38      	ldr	r0, [r7, #48]	; 0x30
 800728a:	f000 fa1b 	bl	80076c4 <prvUnlockQueue>
				( void ) xTaskResumeAll();
 800728e:	f000 fdd3 	bl	8007e38 <xTaskResumeAll>
 8007292:	e76c      	b.n	800716e <xQueueGenericSend+0xbe>
			}
		}
		else
		{
			/* The timeout has expired. */
			prvUnlockQueue( pxQueue );
 8007294:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8007296:	f000 fa15 	bl	80076c4 <prvUnlockQueue>
			( void ) xTaskResumeAll();
 800729a:	f000 fdcd 	bl	8007e38 <xTaskResumeAll>

			traceQUEUE_SEND_FAILED( pxQueue );
			return errQUEUE_FULL;
 800729e:	2300      	movs	r3, #0
		}
	} /*lint -restore */
}
 80072a0:	4618      	mov	r0, r3
 80072a2:	3738      	adds	r7, #56	; 0x38
 80072a4:	46bd      	mov	sp, r7
 80072a6:	bd80      	pop	{r7, pc}
 80072a8:	e000ed04 	.word	0xe000ed04

080072ac <xQueueGenericSendFromISR>:
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSendFromISR( QueueHandle_t xQueue, const void * const pvItemToQueue, BaseType_t * const pxHigherPriorityTaskWoken, const BaseType_t xCopyPosition )
{
 80072ac:	b580      	push	{r7, lr}
 80072ae:	b090      	sub	sp, #64	; 0x40
 80072b0:	af00      	add	r7, sp, #0
 80072b2:	60f8      	str	r0, [r7, #12]
 80072b4:	60b9      	str	r1, [r7, #8]
 80072b6:	607a      	str	r2, [r7, #4]
 80072b8:	603b      	str	r3, [r7, #0]
BaseType_t xReturn;
UBaseType_t uxSavedInterruptStatus;
Queue_t * const pxQueue = xQueue;
 80072ba:	68fb      	ldr	r3, [r7, #12]
 80072bc:	63bb      	str	r3, [r7, #56]	; 0x38

	configASSERT( pxQueue );
 80072be:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80072c0:	2b00      	cmp	r3, #0
 80072c2:	d10a      	bne.n	80072da <xQueueGenericSendFromISR+0x2e>
	__asm volatile
 80072c4:	f04f 0350 	mov.w	r3, #80	; 0x50
 80072c8:	f383 8811 	msr	BASEPRI, r3
 80072cc:	f3bf 8f6f 	isb	sy
 80072d0:	f3bf 8f4f 	dsb	sy
 80072d4:	62bb      	str	r3, [r7, #40]	; 0x28
}
 80072d6:	bf00      	nop
 80072d8:	e7fe      	b.n	80072d8 <xQueueGenericSendFromISR+0x2c>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 80072da:	68bb      	ldr	r3, [r7, #8]
 80072dc:	2b00      	cmp	r3, #0
 80072de:	d103      	bne.n	80072e8 <xQueueGenericSendFromISR+0x3c>
 80072e0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80072e2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80072e4:	2b00      	cmp	r3, #0
 80072e6:	d101      	bne.n	80072ec <xQueueGenericSendFromISR+0x40>
 80072e8:	2301      	movs	r3, #1
 80072ea:	e000      	b.n	80072ee <xQueueGenericSendFromISR+0x42>
 80072ec:	2300      	movs	r3, #0
 80072ee:	2b00      	cmp	r3, #0
 80072f0:	d10a      	bne.n	8007308 <xQueueGenericSendFromISR+0x5c>
	__asm volatile
 80072f2:	f04f 0350 	mov.w	r3, #80	; 0x50
 80072f6:	f383 8811 	msr	BASEPRI, r3
 80072fa:	f3bf 8f6f 	isb	sy
 80072fe:	f3bf 8f4f 	dsb	sy
 8007302:	627b      	str	r3, [r7, #36]	; 0x24
}
 8007304:	bf00      	nop
 8007306:	e7fe      	b.n	8007306 <xQueueGenericSendFromISR+0x5a>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 8007308:	683b      	ldr	r3, [r7, #0]
 800730a:	2b02      	cmp	r3, #2
 800730c:	d103      	bne.n	8007316 <xQueueGenericSendFromISR+0x6a>
 800730e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007310:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8007312:	2b01      	cmp	r3, #1
 8007314:	d101      	bne.n	800731a <xQueueGenericSendFromISR+0x6e>
 8007316:	2301      	movs	r3, #1
 8007318:	e000      	b.n	800731c <xQueueGenericSendFromISR+0x70>
 800731a:	2300      	movs	r3, #0
 800731c:	2b00      	cmp	r3, #0
 800731e:	d10a      	bne.n	8007336 <xQueueGenericSendFromISR+0x8a>
	__asm volatile
 8007320:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007324:	f383 8811 	msr	BASEPRI, r3
 8007328:	f3bf 8f6f 	isb	sy
 800732c:	f3bf 8f4f 	dsb	sy
 8007330:	623b      	str	r3, [r7, #32]
}
 8007332:	bf00      	nop
 8007334:	e7fe      	b.n	8007334 <xQueueGenericSendFromISR+0x88>
	that have been assigned a priority at or (logically) below the maximum
	system call	interrupt priority.  FreeRTOS maintains a separate interrupt
	safe API to ensure interrupt entry is as fast and as simple as possible.
	More information (albeit Cortex-M specific) is provided on the following
	link: http://www.freertos.org/RTOS-Cortex-M3-M4.html */
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 8007336:	f001 ffb7 	bl	80092a8 <vPortValidateInterruptPriority>

portFORCE_INLINE static uint32_t ulPortRaiseBASEPRI( void )
{
uint32_t ulOriginalBASEPRI, ulNewBASEPRI;

	__asm volatile
 800733a:	f3ef 8211 	mrs	r2, BASEPRI
 800733e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007342:	f383 8811 	msr	BASEPRI, r3
 8007346:	f3bf 8f6f 	isb	sy
 800734a:	f3bf 8f4f 	dsb	sy
 800734e:	61fa      	str	r2, [r7, #28]
 8007350:	61bb      	str	r3, [r7, #24]
		:"=r" (ulOriginalBASEPRI), "=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
	);

	/* This return will not be reached but is necessary to prevent compiler
	warnings. */
	return ulOriginalBASEPRI;
 8007352:	69fb      	ldr	r3, [r7, #28]
	/* Similar to xQueueGenericSend, except without blocking if there is no room
	in the queue.  Also don't directly wake a task that was blocked on a queue
	read, instead return a flag to say whether a context switch is required or
	not (i.e. has a task with a higher priority than us been woken by this
	post). */
	uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 8007354:	637b      	str	r3, [r7, #52]	; 0x34
	{
		if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 8007356:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007358:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800735a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800735c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800735e:	429a      	cmp	r2, r3
 8007360:	d302      	bcc.n	8007368 <xQueueGenericSendFromISR+0xbc>
 8007362:	683b      	ldr	r3, [r7, #0]
 8007364:	2b02      	cmp	r3, #2
 8007366:	d12f      	bne.n	80073c8 <xQueueGenericSendFromISR+0x11c>
		{
			const int8_t cTxLock = pxQueue->cTxLock;
 8007368:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800736a:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 800736e:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
			const UBaseType_t uxPreviousMessagesWaiting = pxQueue->uxMessagesWaiting;
 8007372:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007374:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007376:	62fb      	str	r3, [r7, #44]	; 0x2c
			/* Semaphores use xQueueGiveFromISR(), so pxQueue will not be a
			semaphore or mutex.  That means prvCopyDataToQueue() cannot result
			in a task disinheriting a priority and prvCopyDataToQueue() can be
			called here even though the disinherit function does not check if
			the scheduler is suspended before accessing the ready lists. */
			( void ) prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 8007378:	683a      	ldr	r2, [r7, #0]
 800737a:	68b9      	ldr	r1, [r7, #8]
 800737c:	6bb8      	ldr	r0, [r7, #56]	; 0x38
 800737e:	f000 f911 	bl	80075a4 <prvCopyDataToQueue>

			/* The event list is not altered if the queue is locked.  This will
			be done when the queue is unlocked later. */
			if( cTxLock == queueUNLOCKED )
 8007382:	f997 3033 	ldrsb.w	r3, [r7, #51]	; 0x33
 8007386:	f1b3 3fff 	cmp.w	r3, #4294967295
 800738a:	d112      	bne.n	80073b2 <xQueueGenericSendFromISR+0x106>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 800738c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800738e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007390:	2b00      	cmp	r3, #0
 8007392:	d016      	beq.n	80073c2 <xQueueGenericSendFromISR+0x116>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8007394:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007396:	3324      	adds	r3, #36	; 0x24
 8007398:	4618      	mov	r0, r3
 800739a:	f000 ff87 	bl	80082ac <xTaskRemoveFromEventList>
 800739e:	4603      	mov	r3, r0
 80073a0:	2b00      	cmp	r3, #0
 80073a2:	d00e      	beq.n	80073c2 <xQueueGenericSendFromISR+0x116>
						{
							/* The task waiting has a higher priority so record that a
							context	switch is required. */
							if( pxHigherPriorityTaskWoken != NULL )
 80073a4:	687b      	ldr	r3, [r7, #4]
 80073a6:	2b00      	cmp	r3, #0
 80073a8:	d00b      	beq.n	80073c2 <xQueueGenericSendFromISR+0x116>
							{
								*pxHigherPriorityTaskWoken = pdTRUE;
 80073aa:	687b      	ldr	r3, [r7, #4]
 80073ac:	2201      	movs	r2, #1
 80073ae:	601a      	str	r2, [r3, #0]
 80073b0:	e007      	b.n	80073c2 <xQueueGenericSendFromISR+0x116>
			}
			else
			{
				/* Increment the lock count so the task that unlocks the queue
				knows that data was posted while it was locked. */
				pxQueue->cTxLock = ( int8_t ) ( cTxLock + 1 );
 80073b2:	f897 3033 	ldrb.w	r3, [r7, #51]	; 0x33
 80073b6:	3301      	adds	r3, #1
 80073b8:	b2db      	uxtb	r3, r3
 80073ba:	b25a      	sxtb	r2, r3
 80073bc:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80073be:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
			}

			xReturn = pdPASS;
 80073c2:	2301      	movs	r3, #1
 80073c4:	63fb      	str	r3, [r7, #60]	; 0x3c
		{
 80073c6:	e001      	b.n	80073cc <xQueueGenericSendFromISR+0x120>
		}
		else
		{
			traceQUEUE_SEND_FROM_ISR_FAILED( pxQueue );
			xReturn = errQUEUE_FULL;
 80073c8:	2300      	movs	r3, #0
 80073ca:	63fb      	str	r3, [r7, #60]	; 0x3c
 80073cc:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80073ce:	617b      	str	r3, [r7, #20]
}
/*-----------------------------------------------------------*/

portFORCE_INLINE static void vPortSetBASEPRI( uint32_t ulNewMaskValue )
{
	__asm volatile
 80073d0:	697b      	ldr	r3, [r7, #20]
 80073d2:	f383 8811 	msr	BASEPRI, r3
	(
		"	msr basepri, %0	" :: "r" ( ulNewMaskValue ) : "memory"
	);
}
 80073d6:	bf00      	nop
		}
	}
	portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

	return xReturn;
 80073d8:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
}
 80073da:	4618      	mov	r0, r3
 80073dc:	3740      	adds	r7, #64	; 0x40
 80073de:	46bd      	mov	sp, r7
 80073e0:	bd80      	pop	{r7, pc}
	...

080073e4 <xQueueReceive>:
	return xReturn;
}
/*-----------------------------------------------------------*/

BaseType_t xQueueReceive( QueueHandle_t xQueue, void * const pvBuffer, TickType_t xTicksToWait )
{
 80073e4:	b580      	push	{r7, lr}
 80073e6:	b08c      	sub	sp, #48	; 0x30
 80073e8:	af00      	add	r7, sp, #0
 80073ea:	60f8      	str	r0, [r7, #12]
 80073ec:	60b9      	str	r1, [r7, #8]
 80073ee:	607a      	str	r2, [r7, #4]
BaseType_t xEntryTimeSet = pdFALSE;
 80073f0:	2300      	movs	r3, #0
 80073f2:	62fb      	str	r3, [r7, #44]	; 0x2c
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 80073f4:	68fb      	ldr	r3, [r7, #12]
 80073f6:	62bb      	str	r3, [r7, #40]	; 0x28

	/* Check the pointer is not NULL. */
	configASSERT( ( pxQueue ) );
 80073f8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80073fa:	2b00      	cmp	r3, #0
 80073fc:	d10a      	bne.n	8007414 <xQueueReceive+0x30>
	__asm volatile
 80073fe:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007402:	f383 8811 	msr	BASEPRI, r3
 8007406:	f3bf 8f6f 	isb	sy
 800740a:	f3bf 8f4f 	dsb	sy
 800740e:	623b      	str	r3, [r7, #32]
}
 8007410:	bf00      	nop
 8007412:	e7fe      	b.n	8007412 <xQueueReceive+0x2e>

	/* The buffer into which data is received can only be NULL if the data size
	is zero (so no data is copied into the buffer. */
	configASSERT( !( ( ( pvBuffer ) == NULL ) && ( ( pxQueue )->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8007414:	68bb      	ldr	r3, [r7, #8]
 8007416:	2b00      	cmp	r3, #0
 8007418:	d103      	bne.n	8007422 <xQueueReceive+0x3e>
 800741a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800741c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800741e:	2b00      	cmp	r3, #0
 8007420:	d101      	bne.n	8007426 <xQueueReceive+0x42>
 8007422:	2301      	movs	r3, #1
 8007424:	e000      	b.n	8007428 <xQueueReceive+0x44>
 8007426:	2300      	movs	r3, #0
 8007428:	2b00      	cmp	r3, #0
 800742a:	d10a      	bne.n	8007442 <xQueueReceive+0x5e>
	__asm volatile
 800742c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007430:	f383 8811 	msr	BASEPRI, r3
 8007434:	f3bf 8f6f 	isb	sy
 8007438:	f3bf 8f4f 	dsb	sy
 800743c:	61fb      	str	r3, [r7, #28]
}
 800743e:	bf00      	nop
 8007440:	e7fe      	b.n	8007440 <xQueueReceive+0x5c>

	/* Cannot block if the scheduler is suspended. */
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 8007442:	f001 f8f3 	bl	800862c <xTaskGetSchedulerState>
 8007446:	4603      	mov	r3, r0
 8007448:	2b00      	cmp	r3, #0
 800744a:	d102      	bne.n	8007452 <xQueueReceive+0x6e>
 800744c:	687b      	ldr	r3, [r7, #4]
 800744e:	2b00      	cmp	r3, #0
 8007450:	d101      	bne.n	8007456 <xQueueReceive+0x72>
 8007452:	2301      	movs	r3, #1
 8007454:	e000      	b.n	8007458 <xQueueReceive+0x74>
 8007456:	2300      	movs	r3, #0
 8007458:	2b00      	cmp	r3, #0
 800745a:	d10a      	bne.n	8007472 <xQueueReceive+0x8e>
	__asm volatile
 800745c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007460:	f383 8811 	msr	BASEPRI, r3
 8007464:	f3bf 8f6f 	isb	sy
 8007468:	f3bf 8f4f 	dsb	sy
 800746c:	61bb      	str	r3, [r7, #24]
}
 800746e:	bf00      	nop
 8007470:	e7fe      	b.n	8007470 <xQueueReceive+0x8c>
	/*lint -save -e904  This function relaxes the coding standard somewhat to
	allow return statements within the function itself.  This is done in the
	interest of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 8007472:	f001 fe37 	bl	80090e4 <vPortEnterCritical>
		{
			const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 8007476:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007478:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800747a:	627b      	str	r3, [r7, #36]	; 0x24

			/* Is there data in the queue now?  To be running the calling task
			must be the highest priority task wanting to access the queue. */
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 800747c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800747e:	2b00      	cmp	r3, #0
 8007480:	d01f      	beq.n	80074c2 <xQueueReceive+0xde>
			{
				/* Data available, remove one item. */
				prvCopyDataFromQueue( pxQueue, pvBuffer );
 8007482:	68b9      	ldr	r1, [r7, #8]
 8007484:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8007486:	f000 f8f7 	bl	8007678 <prvCopyDataFromQueue>
				traceQUEUE_RECEIVE( pxQueue );
				pxQueue->uxMessagesWaiting = uxMessagesWaiting - ( UBaseType_t ) 1;
 800748a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800748c:	1e5a      	subs	r2, r3, #1
 800748e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007490:	639a      	str	r2, [r3, #56]	; 0x38

				/* There is now space in the queue, were any tasks waiting to
				post to the queue?  If so, unblock the highest priority waiting
				task. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8007492:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007494:	691b      	ldr	r3, [r3, #16]
 8007496:	2b00      	cmp	r3, #0
 8007498:	d00f      	beq.n	80074ba <xQueueReceive+0xd6>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 800749a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800749c:	3310      	adds	r3, #16
 800749e:	4618      	mov	r0, r3
 80074a0:	f000 ff04 	bl	80082ac <xTaskRemoveFromEventList>
 80074a4:	4603      	mov	r3, r0
 80074a6:	2b00      	cmp	r3, #0
 80074a8:	d007      	beq.n	80074ba <xQueueReceive+0xd6>
					{
						queueYIELD_IF_USING_PREEMPTION();
 80074aa:	4b3d      	ldr	r3, [pc, #244]	; (80075a0 <xQueueReceive+0x1bc>)
 80074ac:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80074b0:	601a      	str	r2, [r3, #0]
 80074b2:	f3bf 8f4f 	dsb	sy
 80074b6:	f3bf 8f6f 	isb	sy
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				taskEXIT_CRITICAL();
 80074ba:	f001 fe43 	bl	8009144 <vPortExitCritical>
				return pdPASS;
 80074be:	2301      	movs	r3, #1
 80074c0:	e069      	b.n	8007596 <xQueueReceive+0x1b2>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 80074c2:	687b      	ldr	r3, [r7, #4]
 80074c4:	2b00      	cmp	r3, #0
 80074c6:	d103      	bne.n	80074d0 <xQueueReceive+0xec>
				{
					/* The queue was empty and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 80074c8:	f001 fe3c 	bl	8009144 <vPortExitCritical>
					traceQUEUE_RECEIVE_FAILED( pxQueue );
					return errQUEUE_EMPTY;
 80074cc:	2300      	movs	r3, #0
 80074ce:	e062      	b.n	8007596 <xQueueReceive+0x1b2>
				}
				else if( xEntryTimeSet == pdFALSE )
 80074d0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80074d2:	2b00      	cmp	r3, #0
 80074d4:	d106      	bne.n	80074e4 <xQueueReceive+0x100>
				{
					/* The queue was empty and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 80074d6:	f107 0310 	add.w	r3, r7, #16
 80074da:	4618      	mov	r0, r3
 80074dc:	f000 ff4a 	bl	8008374 <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 80074e0:	2301      	movs	r3, #1
 80074e2:	62fb      	str	r3, [r7, #44]	; 0x2c
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 80074e4:	f001 fe2e 	bl	8009144 <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 80074e8:	f000 fc98 	bl	8007e1c <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 80074ec:	f001 fdfa 	bl	80090e4 <vPortEnterCritical>
 80074f0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80074f2:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 80074f6:	b25b      	sxtb	r3, r3
 80074f8:	f1b3 3fff 	cmp.w	r3, #4294967295
 80074fc:	d103      	bne.n	8007506 <xQueueReceive+0x122>
 80074fe:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007500:	2200      	movs	r2, #0
 8007502:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8007506:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007508:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 800750c:	b25b      	sxtb	r3, r3
 800750e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8007512:	d103      	bne.n	800751c <xQueueReceive+0x138>
 8007514:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007516:	2200      	movs	r2, #0
 8007518:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 800751c:	f001 fe12 	bl	8009144 <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 8007520:	1d3a      	adds	r2, r7, #4
 8007522:	f107 0310 	add.w	r3, r7, #16
 8007526:	4611      	mov	r1, r2
 8007528:	4618      	mov	r0, r3
 800752a:	f000 ff39 	bl	80083a0 <xTaskCheckForTimeOut>
 800752e:	4603      	mov	r3, r0
 8007530:	2b00      	cmp	r3, #0
 8007532:	d123      	bne.n	800757c <xQueueReceive+0x198>
		{
			/* The timeout has not expired.  If the queue is still empty place
			the task on the list of tasks waiting to receive from the queue. */
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 8007534:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8007536:	f000 f917 	bl	8007768 <prvIsQueueEmpty>
 800753a:	4603      	mov	r3, r0
 800753c:	2b00      	cmp	r3, #0
 800753e:	d017      	beq.n	8007570 <xQueueReceive+0x18c>
			{
				traceBLOCKING_ON_QUEUE_RECEIVE( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait );
 8007540:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007542:	3324      	adds	r3, #36	; 0x24
 8007544:	687a      	ldr	r2, [r7, #4]
 8007546:	4611      	mov	r1, r2
 8007548:	4618      	mov	r0, r3
 800754a:	f000 fe5f 	bl	800820c <vTaskPlaceOnEventList>
				prvUnlockQueue( pxQueue );
 800754e:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8007550:	f000 f8b8 	bl	80076c4 <prvUnlockQueue>
				if( xTaskResumeAll() == pdFALSE )
 8007554:	f000 fc70 	bl	8007e38 <xTaskResumeAll>
 8007558:	4603      	mov	r3, r0
 800755a:	2b00      	cmp	r3, #0
 800755c:	d189      	bne.n	8007472 <xQueueReceive+0x8e>
				{
					portYIELD_WITHIN_API();
 800755e:	4b10      	ldr	r3, [pc, #64]	; (80075a0 <xQueueReceive+0x1bc>)
 8007560:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8007564:	601a      	str	r2, [r3, #0]
 8007566:	f3bf 8f4f 	dsb	sy
 800756a:	f3bf 8f6f 	isb	sy
 800756e:	e780      	b.n	8007472 <xQueueReceive+0x8e>
			}
			else
			{
				/* The queue contains data again.  Loop back to try and read the
				data. */
				prvUnlockQueue( pxQueue );
 8007570:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8007572:	f000 f8a7 	bl	80076c4 <prvUnlockQueue>
				( void ) xTaskResumeAll();
 8007576:	f000 fc5f 	bl	8007e38 <xTaskResumeAll>
 800757a:	e77a      	b.n	8007472 <xQueueReceive+0x8e>
		}
		else
		{
			/* Timed out.  If there is no data in the queue exit, otherwise loop
			back and attempt to read the data. */
			prvUnlockQueue( pxQueue );
 800757c:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800757e:	f000 f8a1 	bl	80076c4 <prvUnlockQueue>
			( void ) xTaskResumeAll();
 8007582:	f000 fc59 	bl	8007e38 <xTaskResumeAll>

			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 8007586:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8007588:	f000 f8ee 	bl	8007768 <prvIsQueueEmpty>
 800758c:	4603      	mov	r3, r0
 800758e:	2b00      	cmp	r3, #0
 8007590:	f43f af6f 	beq.w	8007472 <xQueueReceive+0x8e>
			{
				traceQUEUE_RECEIVE_FAILED( pxQueue );
				return errQUEUE_EMPTY;
 8007594:	2300      	movs	r3, #0
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	} /*lint -restore */
}
 8007596:	4618      	mov	r0, r3
 8007598:	3730      	adds	r7, #48	; 0x30
 800759a:	46bd      	mov	sp, r7
 800759c:	bd80      	pop	{r7, pc}
 800759e:	bf00      	nop
 80075a0:	e000ed04 	.word	0xe000ed04

080075a4 <prvCopyDataToQueue>:

#endif /* configUSE_MUTEXES */
/*-----------------------------------------------------------*/

static BaseType_t prvCopyDataToQueue( Queue_t * const pxQueue, const void *pvItemToQueue, const BaseType_t xPosition )
{
 80075a4:	b580      	push	{r7, lr}
 80075a6:	b086      	sub	sp, #24
 80075a8:	af00      	add	r7, sp, #0
 80075aa:	60f8      	str	r0, [r7, #12]
 80075ac:	60b9      	str	r1, [r7, #8]
 80075ae:	607a      	str	r2, [r7, #4]
BaseType_t xReturn = pdFALSE;
 80075b0:	2300      	movs	r3, #0
 80075b2:	617b      	str	r3, [r7, #20]
UBaseType_t uxMessagesWaiting;

	/* This function is called from a critical section. */

	uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 80075b4:	68fb      	ldr	r3, [r7, #12]
 80075b6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80075b8:	613b      	str	r3, [r7, #16]

	if( pxQueue->uxItemSize == ( UBaseType_t ) 0 )
 80075ba:	68fb      	ldr	r3, [r7, #12]
 80075bc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80075be:	2b00      	cmp	r3, #0
 80075c0:	d10d      	bne.n	80075de <prvCopyDataToQueue+0x3a>
	{
		#if ( configUSE_MUTEXES == 1 )
		{
			if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 80075c2:	68fb      	ldr	r3, [r7, #12]
 80075c4:	681b      	ldr	r3, [r3, #0]
 80075c6:	2b00      	cmp	r3, #0
 80075c8:	d14d      	bne.n	8007666 <prvCopyDataToQueue+0xc2>
			{
				/* The mutex is no longer being held. */
				xReturn = xTaskPriorityDisinherit( pxQueue->u.xSemaphore.xMutexHolder );
 80075ca:	68fb      	ldr	r3, [r7, #12]
 80075cc:	689b      	ldr	r3, [r3, #8]
 80075ce:	4618      	mov	r0, r3
 80075d0:	f001 f84a 	bl	8008668 <xTaskPriorityDisinherit>
 80075d4:	6178      	str	r0, [r7, #20]
				pxQueue->u.xSemaphore.xMutexHolder = NULL;
 80075d6:	68fb      	ldr	r3, [r7, #12]
 80075d8:	2200      	movs	r2, #0
 80075da:	609a      	str	r2, [r3, #8]
 80075dc:	e043      	b.n	8007666 <prvCopyDataToQueue+0xc2>
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configUSE_MUTEXES */
	}
	else if( xPosition == queueSEND_TO_BACK )
 80075de:	687b      	ldr	r3, [r7, #4]
 80075e0:	2b00      	cmp	r3, #0
 80075e2:	d119      	bne.n	8007618 <prvCopyDataToQueue+0x74>
	{
		( void ) memcpy( ( void * ) pxQueue->pcWriteTo, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports, plus previous logic ensures a null pointer can only be passed to memcpy() if the copy size is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 80075e4:	68fb      	ldr	r3, [r7, #12]
 80075e6:	6858      	ldr	r0, [r3, #4]
 80075e8:	68fb      	ldr	r3, [r7, #12]
 80075ea:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80075ec:	461a      	mov	r2, r3
 80075ee:	68b9      	ldr	r1, [r7, #8]
 80075f0:	f002 f952 	bl	8009898 <memcpy>
		pxQueue->pcWriteTo += pxQueue->uxItemSize; /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 80075f4:	68fb      	ldr	r3, [r7, #12]
 80075f6:	685a      	ldr	r2, [r3, #4]
 80075f8:	68fb      	ldr	r3, [r7, #12]
 80075fa:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80075fc:	441a      	add	r2, r3
 80075fe:	68fb      	ldr	r3, [r7, #12]
 8007600:	605a      	str	r2, [r3, #4]
		if( pxQueue->pcWriteTo >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 8007602:	68fb      	ldr	r3, [r7, #12]
 8007604:	685a      	ldr	r2, [r3, #4]
 8007606:	68fb      	ldr	r3, [r7, #12]
 8007608:	689b      	ldr	r3, [r3, #8]
 800760a:	429a      	cmp	r2, r3
 800760c:	d32b      	bcc.n	8007666 <prvCopyDataToQueue+0xc2>
		{
			pxQueue->pcWriteTo = pxQueue->pcHead;
 800760e:	68fb      	ldr	r3, [r7, #12]
 8007610:	681a      	ldr	r2, [r3, #0]
 8007612:	68fb      	ldr	r3, [r7, #12]
 8007614:	605a      	str	r2, [r3, #4]
 8007616:	e026      	b.n	8007666 <prvCopyDataToQueue+0xc2>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	else
	{
		( void ) memcpy( ( void * ) pxQueue->u.xQueue.pcReadFrom, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e9087 !e418 MISRA exception as the casts are only redundant for some ports.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes.  Assert checks null pointer only used when length is 0. */
 8007618:	68fb      	ldr	r3, [r7, #12]
 800761a:	68d8      	ldr	r0, [r3, #12]
 800761c:	68fb      	ldr	r3, [r7, #12]
 800761e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007620:	461a      	mov	r2, r3
 8007622:	68b9      	ldr	r1, [r7, #8]
 8007624:	f002 f938 	bl	8009898 <memcpy>
		pxQueue->u.xQueue.pcReadFrom -= pxQueue->uxItemSize;
 8007628:	68fb      	ldr	r3, [r7, #12]
 800762a:	68da      	ldr	r2, [r3, #12]
 800762c:	68fb      	ldr	r3, [r7, #12]
 800762e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007630:	425b      	negs	r3, r3
 8007632:	441a      	add	r2, r3
 8007634:	68fb      	ldr	r3, [r7, #12]
 8007636:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.xQueue.pcReadFrom < pxQueue->pcHead ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 8007638:	68fb      	ldr	r3, [r7, #12]
 800763a:	68da      	ldr	r2, [r3, #12]
 800763c:	68fb      	ldr	r3, [r7, #12]
 800763e:	681b      	ldr	r3, [r3, #0]
 8007640:	429a      	cmp	r2, r3
 8007642:	d207      	bcs.n	8007654 <prvCopyDataToQueue+0xb0>
		{
			pxQueue->u.xQueue.pcReadFrom = ( pxQueue->u.xQueue.pcTail - pxQueue->uxItemSize );
 8007644:	68fb      	ldr	r3, [r7, #12]
 8007646:	689a      	ldr	r2, [r3, #8]
 8007648:	68fb      	ldr	r3, [r7, #12]
 800764a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800764c:	425b      	negs	r3, r3
 800764e:	441a      	add	r2, r3
 8007650:	68fb      	ldr	r3, [r7, #12]
 8007652:	60da      	str	r2, [r3, #12]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		if( xPosition == queueOVERWRITE )
 8007654:	687b      	ldr	r3, [r7, #4]
 8007656:	2b02      	cmp	r3, #2
 8007658:	d105      	bne.n	8007666 <prvCopyDataToQueue+0xc2>
		{
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 800765a:	693b      	ldr	r3, [r7, #16]
 800765c:	2b00      	cmp	r3, #0
 800765e:	d002      	beq.n	8007666 <prvCopyDataToQueue+0xc2>
			{
				/* An item is not being added but overwritten, so subtract
				one from the recorded number of items in the queue so when
				one is added again below the number of recorded items remains
				correct. */
				--uxMessagesWaiting;
 8007660:	693b      	ldr	r3, [r7, #16]
 8007662:	3b01      	subs	r3, #1
 8007664:	613b      	str	r3, [r7, #16]
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	pxQueue->uxMessagesWaiting = uxMessagesWaiting + ( UBaseType_t ) 1;
 8007666:	693b      	ldr	r3, [r7, #16]
 8007668:	1c5a      	adds	r2, r3, #1
 800766a:	68fb      	ldr	r3, [r7, #12]
 800766c:	639a      	str	r2, [r3, #56]	; 0x38

	return xReturn;
 800766e:	697b      	ldr	r3, [r7, #20]
}
 8007670:	4618      	mov	r0, r3
 8007672:	3718      	adds	r7, #24
 8007674:	46bd      	mov	sp, r7
 8007676:	bd80      	pop	{r7, pc}

08007678 <prvCopyDataFromQueue>:
/*-----------------------------------------------------------*/

static void prvCopyDataFromQueue( Queue_t * const pxQueue, void * const pvBuffer )
{
 8007678:	b580      	push	{r7, lr}
 800767a:	b082      	sub	sp, #8
 800767c:	af00      	add	r7, sp, #0
 800767e:	6078      	str	r0, [r7, #4]
 8007680:	6039      	str	r1, [r7, #0]
	if( pxQueue->uxItemSize != ( UBaseType_t ) 0 )
 8007682:	687b      	ldr	r3, [r7, #4]
 8007684:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007686:	2b00      	cmp	r3, #0
 8007688:	d018      	beq.n	80076bc <prvCopyDataFromQueue+0x44>
	{
		pxQueue->u.xQueue.pcReadFrom += pxQueue->uxItemSize; /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 800768a:	687b      	ldr	r3, [r7, #4]
 800768c:	68da      	ldr	r2, [r3, #12]
 800768e:	687b      	ldr	r3, [r7, #4]
 8007690:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007692:	441a      	add	r2, r3
 8007694:	687b      	ldr	r3, [r7, #4]
 8007696:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.xQueue.pcReadFrom >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as use of the relational operator is the cleanest solutions. */
 8007698:	687b      	ldr	r3, [r7, #4]
 800769a:	68da      	ldr	r2, [r3, #12]
 800769c:	687b      	ldr	r3, [r7, #4]
 800769e:	689b      	ldr	r3, [r3, #8]
 80076a0:	429a      	cmp	r2, r3
 80076a2:	d303      	bcc.n	80076ac <prvCopyDataFromQueue+0x34>
		{
			pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead;
 80076a4:	687b      	ldr	r3, [r7, #4]
 80076a6:	681a      	ldr	r2, [r3, #0]
 80076a8:	687b      	ldr	r3, [r7, #4]
 80076aa:	60da      	str	r2, [r3, #12]
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
		( void ) memcpy( ( void * ) pvBuffer, ( void * ) pxQueue->u.xQueue.pcReadFrom, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports.  Also previous logic ensures a null pointer can only be passed to memcpy() when the count is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 80076ac:	687b      	ldr	r3, [r7, #4]
 80076ae:	68d9      	ldr	r1, [r3, #12]
 80076b0:	687b      	ldr	r3, [r7, #4]
 80076b2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80076b4:	461a      	mov	r2, r3
 80076b6:	6838      	ldr	r0, [r7, #0]
 80076b8:	f002 f8ee 	bl	8009898 <memcpy>
	}
}
 80076bc:	bf00      	nop
 80076be:	3708      	adds	r7, #8
 80076c0:	46bd      	mov	sp, r7
 80076c2:	bd80      	pop	{r7, pc}

080076c4 <prvUnlockQueue>:
/*-----------------------------------------------------------*/

static void prvUnlockQueue( Queue_t * const pxQueue )
{
 80076c4:	b580      	push	{r7, lr}
 80076c6:	b084      	sub	sp, #16
 80076c8:	af00      	add	r7, sp, #0
 80076ca:	6078      	str	r0, [r7, #4]

	/* The lock counts contains the number of extra data items placed or
	removed from the queue while the queue was locked.  When a queue is
	locked items can be added or removed, but the event lists cannot be
	updated. */
	taskENTER_CRITICAL();
 80076cc:	f001 fd0a 	bl	80090e4 <vPortEnterCritical>
	{
		int8_t cTxLock = pxQueue->cTxLock;
 80076d0:	687b      	ldr	r3, [r7, #4]
 80076d2:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 80076d6:	73fb      	strb	r3, [r7, #15]

		/* See if data was added to the queue while it was locked. */
		while( cTxLock > queueLOCKED_UNMODIFIED )
 80076d8:	e011      	b.n	80076fe <prvUnlockQueue+0x3a>
			}
			#else /* configUSE_QUEUE_SETS */
			{
				/* Tasks that are removed from the event list will get added to
				the pending ready list as the scheduler is still suspended. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 80076da:	687b      	ldr	r3, [r7, #4]
 80076dc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80076de:	2b00      	cmp	r3, #0
 80076e0:	d012      	beq.n	8007708 <prvUnlockQueue+0x44>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 80076e2:	687b      	ldr	r3, [r7, #4]
 80076e4:	3324      	adds	r3, #36	; 0x24
 80076e6:	4618      	mov	r0, r3
 80076e8:	f000 fde0 	bl	80082ac <xTaskRemoveFromEventList>
 80076ec:	4603      	mov	r3, r0
 80076ee:	2b00      	cmp	r3, #0
 80076f0:	d001      	beq.n	80076f6 <prvUnlockQueue+0x32>
					{
						/* The task waiting has a higher priority so record that
						a context switch is required. */
						vTaskMissedYield();
 80076f2:	f000 feb7 	bl	8008464 <vTaskMissedYield>
					break;
				}
			}
			#endif /* configUSE_QUEUE_SETS */

			--cTxLock;
 80076f6:	7bfb      	ldrb	r3, [r7, #15]
 80076f8:	3b01      	subs	r3, #1
 80076fa:	b2db      	uxtb	r3, r3
 80076fc:	73fb      	strb	r3, [r7, #15]
		while( cTxLock > queueLOCKED_UNMODIFIED )
 80076fe:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8007702:	2b00      	cmp	r3, #0
 8007704:	dce9      	bgt.n	80076da <prvUnlockQueue+0x16>
 8007706:	e000      	b.n	800770a <prvUnlockQueue+0x46>
					break;
 8007708:	bf00      	nop
		}

		pxQueue->cTxLock = queueUNLOCKED;
 800770a:	687b      	ldr	r3, [r7, #4]
 800770c:	22ff      	movs	r2, #255	; 0xff
 800770e:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
	}
	taskEXIT_CRITICAL();
 8007712:	f001 fd17 	bl	8009144 <vPortExitCritical>

	/* Do the same for the Rx lock. */
	taskENTER_CRITICAL();
 8007716:	f001 fce5 	bl	80090e4 <vPortEnterCritical>
	{
		int8_t cRxLock = pxQueue->cRxLock;
 800771a:	687b      	ldr	r3, [r7, #4]
 800771c:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8007720:	73bb      	strb	r3, [r7, #14]

		while( cRxLock > queueLOCKED_UNMODIFIED )
 8007722:	e011      	b.n	8007748 <prvUnlockQueue+0x84>
		{
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8007724:	687b      	ldr	r3, [r7, #4]
 8007726:	691b      	ldr	r3, [r3, #16]
 8007728:	2b00      	cmp	r3, #0
 800772a:	d012      	beq.n	8007752 <prvUnlockQueue+0x8e>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 800772c:	687b      	ldr	r3, [r7, #4]
 800772e:	3310      	adds	r3, #16
 8007730:	4618      	mov	r0, r3
 8007732:	f000 fdbb 	bl	80082ac <xTaskRemoveFromEventList>
 8007736:	4603      	mov	r3, r0
 8007738:	2b00      	cmp	r3, #0
 800773a:	d001      	beq.n	8007740 <prvUnlockQueue+0x7c>
				{
					vTaskMissedYield();
 800773c:	f000 fe92 	bl	8008464 <vTaskMissedYield>
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				--cRxLock;
 8007740:	7bbb      	ldrb	r3, [r7, #14]
 8007742:	3b01      	subs	r3, #1
 8007744:	b2db      	uxtb	r3, r3
 8007746:	73bb      	strb	r3, [r7, #14]
		while( cRxLock > queueLOCKED_UNMODIFIED )
 8007748:	f997 300e 	ldrsb.w	r3, [r7, #14]
 800774c:	2b00      	cmp	r3, #0
 800774e:	dce9      	bgt.n	8007724 <prvUnlockQueue+0x60>
 8007750:	e000      	b.n	8007754 <prvUnlockQueue+0x90>
			}
			else
			{
				break;
 8007752:	bf00      	nop
			}
		}

		pxQueue->cRxLock = queueUNLOCKED;
 8007754:	687b      	ldr	r3, [r7, #4]
 8007756:	22ff      	movs	r2, #255	; 0xff
 8007758:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
	}
	taskEXIT_CRITICAL();
 800775c:	f001 fcf2 	bl	8009144 <vPortExitCritical>
}
 8007760:	bf00      	nop
 8007762:	3710      	adds	r7, #16
 8007764:	46bd      	mov	sp, r7
 8007766:	bd80      	pop	{r7, pc}

08007768 <prvIsQueueEmpty>:
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueEmpty( const Queue_t *pxQueue )
{
 8007768:	b580      	push	{r7, lr}
 800776a:	b084      	sub	sp, #16
 800776c:	af00      	add	r7, sp, #0
 800776e:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 8007770:	f001 fcb8 	bl	80090e4 <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t )  0 )
 8007774:	687b      	ldr	r3, [r7, #4]
 8007776:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007778:	2b00      	cmp	r3, #0
 800777a:	d102      	bne.n	8007782 <prvIsQueueEmpty+0x1a>
		{
			xReturn = pdTRUE;
 800777c:	2301      	movs	r3, #1
 800777e:	60fb      	str	r3, [r7, #12]
 8007780:	e001      	b.n	8007786 <prvIsQueueEmpty+0x1e>
		}
		else
		{
			xReturn = pdFALSE;
 8007782:	2300      	movs	r3, #0
 8007784:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 8007786:	f001 fcdd 	bl	8009144 <vPortExitCritical>

	return xReturn;
 800778a:	68fb      	ldr	r3, [r7, #12]
}
 800778c:	4618      	mov	r0, r3
 800778e:	3710      	adds	r7, #16
 8007790:	46bd      	mov	sp, r7
 8007792:	bd80      	pop	{r7, pc}

08007794 <prvIsQueueFull>:
	return xReturn;
} /*lint !e818 xQueue could not be pointer to const because it is a typedef. */
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueFull( const Queue_t *pxQueue )
{
 8007794:	b580      	push	{r7, lr}
 8007796:	b084      	sub	sp, #16
 8007798:	af00      	add	r7, sp, #0
 800779a:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 800779c:	f001 fca2 	bl	80090e4 <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == pxQueue->uxLength )
 80077a0:	687b      	ldr	r3, [r7, #4]
 80077a2:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 80077a4:	687b      	ldr	r3, [r7, #4]
 80077a6:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80077a8:	429a      	cmp	r2, r3
 80077aa:	d102      	bne.n	80077b2 <prvIsQueueFull+0x1e>
		{
			xReturn = pdTRUE;
 80077ac:	2301      	movs	r3, #1
 80077ae:	60fb      	str	r3, [r7, #12]
 80077b0:	e001      	b.n	80077b6 <prvIsQueueFull+0x22>
		}
		else
		{
			xReturn = pdFALSE;
 80077b2:	2300      	movs	r3, #0
 80077b4:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 80077b6:	f001 fcc5 	bl	8009144 <vPortExitCritical>

	return xReturn;
 80077ba:	68fb      	ldr	r3, [r7, #12]
}
 80077bc:	4618      	mov	r0, r3
 80077be:	3710      	adds	r7, #16
 80077c0:	46bd      	mov	sp, r7
 80077c2:	bd80      	pop	{r7, pc}

080077c4 <vQueueAddToRegistry>:
/*-----------------------------------------------------------*/

#if ( configQUEUE_REGISTRY_SIZE > 0 )

	void vQueueAddToRegistry( QueueHandle_t xQueue, const char *pcQueueName ) /*lint !e971 Unqualified char types are allowed for strings and single characters only. */
	{
 80077c4:	b480      	push	{r7}
 80077c6:	b085      	sub	sp, #20
 80077c8:	af00      	add	r7, sp, #0
 80077ca:	6078      	str	r0, [r7, #4]
 80077cc:	6039      	str	r1, [r7, #0]
	UBaseType_t ux;

		/* See if there is an empty space in the registry.  A NULL name denotes
		a free slot. */
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 80077ce:	2300      	movs	r3, #0
 80077d0:	60fb      	str	r3, [r7, #12]
 80077d2:	e014      	b.n	80077fe <vQueueAddToRegistry+0x3a>
		{
			if( xQueueRegistry[ ux ].pcQueueName == NULL )
 80077d4:	4a0f      	ldr	r2, [pc, #60]	; (8007814 <vQueueAddToRegistry+0x50>)
 80077d6:	68fb      	ldr	r3, [r7, #12]
 80077d8:	f852 3033 	ldr.w	r3, [r2, r3, lsl #3]
 80077dc:	2b00      	cmp	r3, #0
 80077de:	d10b      	bne.n	80077f8 <vQueueAddToRegistry+0x34>
			{
				/* Store the information on this queue. */
				xQueueRegistry[ ux ].pcQueueName = pcQueueName;
 80077e0:	490c      	ldr	r1, [pc, #48]	; (8007814 <vQueueAddToRegistry+0x50>)
 80077e2:	68fb      	ldr	r3, [r7, #12]
 80077e4:	683a      	ldr	r2, [r7, #0]
 80077e6:	f841 2033 	str.w	r2, [r1, r3, lsl #3]
				xQueueRegistry[ ux ].xHandle = xQueue;
 80077ea:	4a0a      	ldr	r2, [pc, #40]	; (8007814 <vQueueAddToRegistry+0x50>)
 80077ec:	68fb      	ldr	r3, [r7, #12]
 80077ee:	00db      	lsls	r3, r3, #3
 80077f0:	4413      	add	r3, r2
 80077f2:	687a      	ldr	r2, [r7, #4]
 80077f4:	605a      	str	r2, [r3, #4]

				traceQUEUE_REGISTRY_ADD( xQueue, pcQueueName );
				break;
 80077f6:	e006      	b.n	8007806 <vQueueAddToRegistry+0x42>
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 80077f8:	68fb      	ldr	r3, [r7, #12]
 80077fa:	3301      	adds	r3, #1
 80077fc:	60fb      	str	r3, [r7, #12]
 80077fe:	68fb      	ldr	r3, [r7, #12]
 8007800:	2b07      	cmp	r3, #7
 8007802:	d9e7      	bls.n	80077d4 <vQueueAddToRegistry+0x10>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	}
 8007804:	bf00      	nop
 8007806:	bf00      	nop
 8007808:	3714      	adds	r7, #20
 800780a:	46bd      	mov	sp, r7
 800780c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007810:	4770      	bx	lr
 8007812:	bf00      	nop
 8007814:	20000a44 	.word	0x20000a44

08007818 <vQueueWaitForMessageRestricted>:
/*-----------------------------------------------------------*/

#if ( configUSE_TIMERS == 1 )

	void vQueueWaitForMessageRestricted( QueueHandle_t xQueue, TickType_t xTicksToWait, const BaseType_t xWaitIndefinitely )
	{
 8007818:	b580      	push	{r7, lr}
 800781a:	b086      	sub	sp, #24
 800781c:	af00      	add	r7, sp, #0
 800781e:	60f8      	str	r0, [r7, #12]
 8007820:	60b9      	str	r1, [r7, #8]
 8007822:	607a      	str	r2, [r7, #4]
	Queue_t * const pxQueue = xQueue;
 8007824:	68fb      	ldr	r3, [r7, #12]
 8007826:	617b      	str	r3, [r7, #20]
		will not actually cause the task to block, just place it on a blocked
		list.  It will not block until the scheduler is unlocked - at which
		time a yield will be performed.  If an item is added to the queue while
		the queue is locked, and the calling task blocks on the queue, then the
		calling task will be immediately unblocked when the queue is unlocked. */
		prvLockQueue( pxQueue );
 8007828:	f001 fc5c 	bl	80090e4 <vPortEnterCritical>
 800782c:	697b      	ldr	r3, [r7, #20]
 800782e:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8007832:	b25b      	sxtb	r3, r3
 8007834:	f1b3 3fff 	cmp.w	r3, #4294967295
 8007838:	d103      	bne.n	8007842 <vQueueWaitForMessageRestricted+0x2a>
 800783a:	697b      	ldr	r3, [r7, #20]
 800783c:	2200      	movs	r2, #0
 800783e:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8007842:	697b      	ldr	r3, [r7, #20]
 8007844:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8007848:	b25b      	sxtb	r3, r3
 800784a:	f1b3 3fff 	cmp.w	r3, #4294967295
 800784e:	d103      	bne.n	8007858 <vQueueWaitForMessageRestricted+0x40>
 8007850:	697b      	ldr	r3, [r7, #20]
 8007852:	2200      	movs	r2, #0
 8007854:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8007858:	f001 fc74 	bl	8009144 <vPortExitCritical>
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t ) 0U )
 800785c:	697b      	ldr	r3, [r7, #20]
 800785e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007860:	2b00      	cmp	r3, #0
 8007862:	d106      	bne.n	8007872 <vQueueWaitForMessageRestricted+0x5a>
		{
			/* There is nothing in the queue, block for the specified period. */
			vTaskPlaceOnEventListRestricted( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait, xWaitIndefinitely );
 8007864:	697b      	ldr	r3, [r7, #20]
 8007866:	3324      	adds	r3, #36	; 0x24
 8007868:	687a      	ldr	r2, [r7, #4]
 800786a:	68b9      	ldr	r1, [r7, #8]
 800786c:	4618      	mov	r0, r3
 800786e:	f000 fcf1 	bl	8008254 <vTaskPlaceOnEventListRestricted>
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
		prvUnlockQueue( pxQueue );
 8007872:	6978      	ldr	r0, [r7, #20]
 8007874:	f7ff ff26 	bl	80076c4 <prvUnlockQueue>
	}
 8007878:	bf00      	nop
 800787a:	3718      	adds	r7, #24
 800787c:	46bd      	mov	sp, r7
 800787e:	bd80      	pop	{r7, pc}

08007880 <xTaskCreateStatic>:
									const uint32_t ulStackDepth,
									void * const pvParameters,
									UBaseType_t uxPriority,
									StackType_t * const puxStackBuffer,
									StaticTask_t * const pxTaskBuffer )
	{
 8007880:	b580      	push	{r7, lr}
 8007882:	b08e      	sub	sp, #56	; 0x38
 8007884:	af04      	add	r7, sp, #16
 8007886:	60f8      	str	r0, [r7, #12]
 8007888:	60b9      	str	r1, [r7, #8]
 800788a:	607a      	str	r2, [r7, #4]
 800788c:	603b      	str	r3, [r7, #0]
	TCB_t *pxNewTCB;
	TaskHandle_t xReturn;

		configASSERT( puxStackBuffer != NULL );
 800788e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8007890:	2b00      	cmp	r3, #0
 8007892:	d10a      	bne.n	80078aa <xTaskCreateStatic+0x2a>
	__asm volatile
 8007894:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007898:	f383 8811 	msr	BASEPRI, r3
 800789c:	f3bf 8f6f 	isb	sy
 80078a0:	f3bf 8f4f 	dsb	sy
 80078a4:	623b      	str	r3, [r7, #32]
}
 80078a6:	bf00      	nop
 80078a8:	e7fe      	b.n	80078a8 <xTaskCreateStatic+0x28>
		configASSERT( pxTaskBuffer != NULL );
 80078aa:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80078ac:	2b00      	cmp	r3, #0
 80078ae:	d10a      	bne.n	80078c6 <xTaskCreateStatic+0x46>
	__asm volatile
 80078b0:	f04f 0350 	mov.w	r3, #80	; 0x50
 80078b4:	f383 8811 	msr	BASEPRI, r3
 80078b8:	f3bf 8f6f 	isb	sy
 80078bc:	f3bf 8f4f 	dsb	sy
 80078c0:	61fb      	str	r3, [r7, #28]
}
 80078c2:	bf00      	nop
 80078c4:	e7fe      	b.n	80078c4 <xTaskCreateStatic+0x44>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticTask_t equals the size of the real task
			structure. */
			volatile size_t xSize = sizeof( StaticTask_t );
 80078c6:	2360      	movs	r3, #96	; 0x60
 80078c8:	613b      	str	r3, [r7, #16]
			configASSERT( xSize == sizeof( TCB_t ) );
 80078ca:	693b      	ldr	r3, [r7, #16]
 80078cc:	2b60      	cmp	r3, #96	; 0x60
 80078ce:	d00a      	beq.n	80078e6 <xTaskCreateStatic+0x66>
	__asm volatile
 80078d0:	f04f 0350 	mov.w	r3, #80	; 0x50
 80078d4:	f383 8811 	msr	BASEPRI, r3
 80078d8:	f3bf 8f6f 	isb	sy
 80078dc:	f3bf 8f4f 	dsb	sy
 80078e0:	61bb      	str	r3, [r7, #24]
}
 80078e2:	bf00      	nop
 80078e4:	e7fe      	b.n	80078e4 <xTaskCreateStatic+0x64>
			( void ) xSize; /* Prevent lint warning when configASSERT() is not used. */
 80078e6:	693b      	ldr	r3, [r7, #16]
		}
		#endif /* configASSERT_DEFINED */


		if( ( pxTaskBuffer != NULL ) && ( puxStackBuffer != NULL ) )
 80078e8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80078ea:	2b00      	cmp	r3, #0
 80078ec:	d01e      	beq.n	800792c <xTaskCreateStatic+0xac>
 80078ee:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80078f0:	2b00      	cmp	r3, #0
 80078f2:	d01b      	beq.n	800792c <xTaskCreateStatic+0xac>
		{
			/* The memory used for the task's TCB and stack are passed into this
			function - use them. */
			pxNewTCB = ( TCB_t * ) pxTaskBuffer; /*lint !e740 !e9087 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 80078f4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80078f6:	627b      	str	r3, [r7, #36]	; 0x24
			pxNewTCB->pxStack = ( StackType_t * ) puxStackBuffer;
 80078f8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80078fa:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 80078fc:	631a      	str	r2, [r3, #48]	; 0x30

			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 !e9029 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created statically in case the task is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskSTATICALLY_ALLOCATED_STACK_AND_TCB;
 80078fe:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007900:	2202      	movs	r2, #2
 8007902:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d
			}
			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

			prvInitialiseNewTask( pxTaskCode, pcName, ulStackDepth, pvParameters, uxPriority, &xReturn, pxNewTCB, NULL );
 8007906:	2300      	movs	r3, #0
 8007908:	9303      	str	r3, [sp, #12]
 800790a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800790c:	9302      	str	r3, [sp, #8]
 800790e:	f107 0314 	add.w	r3, r7, #20
 8007912:	9301      	str	r3, [sp, #4]
 8007914:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007916:	9300      	str	r3, [sp, #0]
 8007918:	683b      	ldr	r3, [r7, #0]
 800791a:	687a      	ldr	r2, [r7, #4]
 800791c:	68b9      	ldr	r1, [r7, #8]
 800791e:	68f8      	ldr	r0, [r7, #12]
 8007920:	f000 f850 	bl	80079c4 <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 8007924:	6a78      	ldr	r0, [r7, #36]	; 0x24
 8007926:	f000 f8df 	bl	8007ae8 <prvAddNewTaskToReadyList>
 800792a:	e001      	b.n	8007930 <xTaskCreateStatic+0xb0>
		}
		else
		{
			xReturn = NULL;
 800792c:	2300      	movs	r3, #0
 800792e:	617b      	str	r3, [r7, #20]
		}

		return xReturn;
 8007930:	697b      	ldr	r3, [r7, #20]
	}
 8007932:	4618      	mov	r0, r3
 8007934:	3728      	adds	r7, #40	; 0x28
 8007936:	46bd      	mov	sp, r7
 8007938:	bd80      	pop	{r7, pc}

0800793a <xTaskCreate>:
							const char * const pcName,		/*lint !e971 Unqualified char types are allowed for strings and single characters only. */
							const configSTACK_DEPTH_TYPE usStackDepth,
							void * const pvParameters,
							UBaseType_t uxPriority,
							TaskHandle_t * const pxCreatedTask )
	{
 800793a:	b580      	push	{r7, lr}
 800793c:	b08c      	sub	sp, #48	; 0x30
 800793e:	af04      	add	r7, sp, #16
 8007940:	60f8      	str	r0, [r7, #12]
 8007942:	60b9      	str	r1, [r7, #8]
 8007944:	603b      	str	r3, [r7, #0]
 8007946:	4613      	mov	r3, r2
 8007948:	80fb      	strh	r3, [r7, #6]
		#else /* portSTACK_GROWTH */
		{
		StackType_t *pxStack;

			/* Allocate space for the stack used by the task being created. */
			pxStack = pvPortMalloc( ( ( ( size_t ) usStackDepth ) * sizeof( StackType_t ) ) ); /*lint !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack and this allocation is the stack. */
 800794a:	88fb      	ldrh	r3, [r7, #6]
 800794c:	009b      	lsls	r3, r3, #2
 800794e:	4618      	mov	r0, r3
 8007950:	f001 fcea 	bl	8009328 <pvPortMalloc>
 8007954:	6178      	str	r0, [r7, #20]

			if( pxStack != NULL )
 8007956:	697b      	ldr	r3, [r7, #20]
 8007958:	2b00      	cmp	r3, #0
 800795a:	d00e      	beq.n	800797a <xTaskCreate+0x40>
			{
				/* Allocate space for the TCB. */
				pxNewTCB = ( TCB_t * ) pvPortMalloc( sizeof( TCB_t ) ); /*lint !e9087 !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack, and the first member of TCB_t is always a pointer to the task's stack. */
 800795c:	2060      	movs	r0, #96	; 0x60
 800795e:	f001 fce3 	bl	8009328 <pvPortMalloc>
 8007962:	61f8      	str	r0, [r7, #28]

				if( pxNewTCB != NULL )
 8007964:	69fb      	ldr	r3, [r7, #28]
 8007966:	2b00      	cmp	r3, #0
 8007968:	d003      	beq.n	8007972 <xTaskCreate+0x38>
				{
					/* Store the stack location in the TCB. */
					pxNewTCB->pxStack = pxStack;
 800796a:	69fb      	ldr	r3, [r7, #28]
 800796c:	697a      	ldr	r2, [r7, #20]
 800796e:	631a      	str	r2, [r3, #48]	; 0x30
 8007970:	e005      	b.n	800797e <xTaskCreate+0x44>
				}
				else
				{
					/* The stack cannot be used as the TCB was not created.  Free
					it again. */
					vPortFree( pxStack );
 8007972:	6978      	ldr	r0, [r7, #20]
 8007974:	f001 fda8 	bl	80094c8 <vPortFree>
 8007978:	e001      	b.n	800797e <xTaskCreate+0x44>
				}
			}
			else
			{
				pxNewTCB = NULL;
 800797a:	2300      	movs	r3, #0
 800797c:	61fb      	str	r3, [r7, #28]
			}
		}
		#endif /* portSTACK_GROWTH */

		if( pxNewTCB != NULL )
 800797e:	69fb      	ldr	r3, [r7, #28]
 8007980:	2b00      	cmp	r3, #0
 8007982:	d017      	beq.n	80079b4 <xTaskCreate+0x7a>
		{
			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e9029 !e731 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created dynamically in case it is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB;
 8007984:	69fb      	ldr	r3, [r7, #28]
 8007986:	2200      	movs	r2, #0
 8007988:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d
			}
			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

			prvInitialiseNewTask( pxTaskCode, pcName, ( uint32_t ) usStackDepth, pvParameters, uxPriority, pxCreatedTask, pxNewTCB, NULL );
 800798c:	88fa      	ldrh	r2, [r7, #6]
 800798e:	2300      	movs	r3, #0
 8007990:	9303      	str	r3, [sp, #12]
 8007992:	69fb      	ldr	r3, [r7, #28]
 8007994:	9302      	str	r3, [sp, #8]
 8007996:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007998:	9301      	str	r3, [sp, #4]
 800799a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800799c:	9300      	str	r3, [sp, #0]
 800799e:	683b      	ldr	r3, [r7, #0]
 80079a0:	68b9      	ldr	r1, [r7, #8]
 80079a2:	68f8      	ldr	r0, [r7, #12]
 80079a4:	f000 f80e 	bl	80079c4 <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 80079a8:	69f8      	ldr	r0, [r7, #28]
 80079aa:	f000 f89d 	bl	8007ae8 <prvAddNewTaskToReadyList>
			xReturn = pdPASS;
 80079ae:	2301      	movs	r3, #1
 80079b0:	61bb      	str	r3, [r7, #24]
 80079b2:	e002      	b.n	80079ba <xTaskCreate+0x80>
		}
		else
		{
			xReturn = errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY;
 80079b4:	f04f 33ff 	mov.w	r3, #4294967295
 80079b8:	61bb      	str	r3, [r7, #24]
		}

		return xReturn;
 80079ba:	69bb      	ldr	r3, [r7, #24]
	}
 80079bc:	4618      	mov	r0, r3
 80079be:	3720      	adds	r7, #32
 80079c0:	46bd      	mov	sp, r7
 80079c2:	bd80      	pop	{r7, pc}

080079c4 <prvInitialiseNewTask>:
									void * const pvParameters,
									UBaseType_t uxPriority,
									TaskHandle_t * const pxCreatedTask,
									TCB_t *pxNewTCB,
									const MemoryRegion_t * const xRegions )
{
 80079c4:	b580      	push	{r7, lr}
 80079c6:	b088      	sub	sp, #32
 80079c8:	af00      	add	r7, sp, #0
 80079ca:	60f8      	str	r0, [r7, #12]
 80079cc:	60b9      	str	r1, [r7, #8]
 80079ce:	607a      	str	r2, [r7, #4]
 80079d0:	603b      	str	r3, [r7, #0]

	/* Avoid dependency on memset() if it is not required. */
	#if( tskSET_NEW_STACKS_TO_KNOWN_VALUE == 1 )
	{
		/* Fill the stack with a known value to assist debugging. */
		( void ) memset( pxNewTCB->pxStack, ( int ) tskSTACK_FILL_BYTE, ( size_t ) ulStackDepth * sizeof( StackType_t ) );
 80079d2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80079d4:	6b18      	ldr	r0, [r3, #48]	; 0x30
 80079d6:	687b      	ldr	r3, [r7, #4]
 80079d8:	009b      	lsls	r3, r3, #2
 80079da:	461a      	mov	r2, r3
 80079dc:	21a5      	movs	r1, #165	; 0xa5
 80079de:	f001 ff69 	bl	80098b4 <memset>
	grows from high memory to low (as per the 80x86) or vice versa.
	portSTACK_GROWTH is used to make the result positive or negative as required
	by the port. */
	#if( portSTACK_GROWTH < 0 )
	{
		pxTopOfStack = &( pxNewTCB->pxStack[ ulStackDepth - ( uint32_t ) 1 ] );
 80079e2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80079e4:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 80079e6:	687b      	ldr	r3, [r7, #4]
 80079e8:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
 80079ec:	3b01      	subs	r3, #1
 80079ee:	009b      	lsls	r3, r3, #2
 80079f0:	4413      	add	r3, r2
 80079f2:	61bb      	str	r3, [r7, #24]
		pxTopOfStack = ( StackType_t * ) ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack ) & ( ~( ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) ) ); /*lint !e923 !e9033 !e9078 MISRA exception.  Avoiding casts between pointers and integers is not practical.  Size differences accounted for using portPOINTER_SIZE_TYPE type.  Checked by assert(). */
 80079f4:	69bb      	ldr	r3, [r7, #24]
 80079f6:	f023 0307 	bic.w	r3, r3, #7
 80079fa:	61bb      	str	r3, [r7, #24]

		/* Check the alignment of the calculated top of stack is correct. */
		configASSERT( ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack & ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) == 0UL ) );
 80079fc:	69bb      	ldr	r3, [r7, #24]
 80079fe:	f003 0307 	and.w	r3, r3, #7
 8007a02:	2b00      	cmp	r3, #0
 8007a04:	d00a      	beq.n	8007a1c <prvInitialiseNewTask+0x58>
	__asm volatile
 8007a06:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007a0a:	f383 8811 	msr	BASEPRI, r3
 8007a0e:	f3bf 8f6f 	isb	sy
 8007a12:	f3bf 8f4f 	dsb	sy
 8007a16:	617b      	str	r3, [r7, #20]
}
 8007a18:	bf00      	nop
 8007a1a:	e7fe      	b.n	8007a1a <prvInitialiseNewTask+0x56>
		pxNewTCB->pxEndOfStack = pxNewTCB->pxStack + ( ulStackDepth - ( uint32_t ) 1 );
	}
	#endif /* portSTACK_GROWTH */

	/* Store the task name in the TCB. */
	if( pcName != NULL )
 8007a1c:	68bb      	ldr	r3, [r7, #8]
 8007a1e:	2b00      	cmp	r3, #0
 8007a20:	d01f      	beq.n	8007a62 <prvInitialiseNewTask+0x9e>
	{
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 8007a22:	2300      	movs	r3, #0
 8007a24:	61fb      	str	r3, [r7, #28]
 8007a26:	e012      	b.n	8007a4e <prvInitialiseNewTask+0x8a>
		{
			pxNewTCB->pcTaskName[ x ] = pcName[ x ];
 8007a28:	68ba      	ldr	r2, [r7, #8]
 8007a2a:	69fb      	ldr	r3, [r7, #28]
 8007a2c:	4413      	add	r3, r2
 8007a2e:	7819      	ldrb	r1, [r3, #0]
 8007a30:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8007a32:	69fb      	ldr	r3, [r7, #28]
 8007a34:	4413      	add	r3, r2
 8007a36:	3334      	adds	r3, #52	; 0x34
 8007a38:	460a      	mov	r2, r1
 8007a3a:	701a      	strb	r2, [r3, #0]

			/* Don't copy all configMAX_TASK_NAME_LEN if the string is shorter than
			configMAX_TASK_NAME_LEN characters just in case the memory after the
			string is not accessible (extremely unlikely). */
			if( pcName[ x ] == ( char ) 0x00 )
 8007a3c:	68ba      	ldr	r2, [r7, #8]
 8007a3e:	69fb      	ldr	r3, [r7, #28]
 8007a40:	4413      	add	r3, r2
 8007a42:	781b      	ldrb	r3, [r3, #0]
 8007a44:	2b00      	cmp	r3, #0
 8007a46:	d006      	beq.n	8007a56 <prvInitialiseNewTask+0x92>
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 8007a48:	69fb      	ldr	r3, [r7, #28]
 8007a4a:	3301      	adds	r3, #1
 8007a4c:	61fb      	str	r3, [r7, #28]
 8007a4e:	69fb      	ldr	r3, [r7, #28]
 8007a50:	2b0f      	cmp	r3, #15
 8007a52:	d9e9      	bls.n	8007a28 <prvInitialiseNewTask+0x64>
 8007a54:	e000      	b.n	8007a58 <prvInitialiseNewTask+0x94>
			{
				break;
 8007a56:	bf00      	nop
			}
		}

		/* Ensure the name string is terminated in the case that the string length
		was greater or equal to configMAX_TASK_NAME_LEN. */
		pxNewTCB->pcTaskName[ configMAX_TASK_NAME_LEN - 1 ] = '\0';
 8007a58:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007a5a:	2200      	movs	r2, #0
 8007a5c:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 8007a60:	e003      	b.n	8007a6a <prvInitialiseNewTask+0xa6>
	}
	else
	{
		/* The task has not been given a name, so just ensure there is a NULL
		terminator when it is read out. */
		pxNewTCB->pcTaskName[ 0 ] = 0x00;
 8007a62:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007a64:	2200      	movs	r2, #0
 8007a66:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
	}

	/* This is used as an array index so must ensure it's not too large.  First
	remove the privilege bit if one is present. */
	if( uxPriority >= ( UBaseType_t ) configMAX_PRIORITIES )
 8007a6a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007a6c:	2b37      	cmp	r3, #55	; 0x37
 8007a6e:	d901      	bls.n	8007a74 <prvInitialiseNewTask+0xb0>
	{
		uxPriority = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) 1U;
 8007a70:	2337      	movs	r3, #55	; 0x37
 8007a72:	62bb      	str	r3, [r7, #40]	; 0x28
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxNewTCB->uxPriority = uxPriority;
 8007a74:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007a76:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8007a78:	62da      	str	r2, [r3, #44]	; 0x2c
	#if ( configUSE_MUTEXES == 1 )
	{
		pxNewTCB->uxBasePriority = uxPriority;
 8007a7a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007a7c:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8007a7e:	64da      	str	r2, [r3, #76]	; 0x4c
		pxNewTCB->uxMutexesHeld = 0;
 8007a80:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007a82:	2200      	movs	r2, #0
 8007a84:	651a      	str	r2, [r3, #80]	; 0x50
	}
	#endif /* configUSE_MUTEXES */

	vListInitialiseItem( &( pxNewTCB->xStateListItem ) );
 8007a86:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007a88:	3304      	adds	r3, #4
 8007a8a:	4618      	mov	r0, r3
 8007a8c:	f7ff f978 	bl	8006d80 <vListInitialiseItem>
	vListInitialiseItem( &( pxNewTCB->xEventListItem ) );
 8007a90:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007a92:	3318      	adds	r3, #24
 8007a94:	4618      	mov	r0, r3
 8007a96:	f7ff f973 	bl	8006d80 <vListInitialiseItem>

	/* Set the pxNewTCB as a link back from the ListItem_t.  This is so we can get
	back to	the containing TCB from a generic item in a list. */
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xStateListItem ), pxNewTCB );
 8007a9a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007a9c:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8007a9e:	611a      	str	r2, [r3, #16]

	/* Event lists are always in priority order. */
	listSET_LIST_ITEM_VALUE( &( pxNewTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8007aa0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007aa2:	f1c3 0238 	rsb	r2, r3, #56	; 0x38
 8007aa6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007aa8:	619a      	str	r2, [r3, #24]
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xEventListItem ), pxNewTCB );
 8007aaa:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007aac:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8007aae:	625a      	str	r2, [r3, #36]	; 0x24
	}
	#endif /* portCRITICAL_NESTING_IN_TCB */

	#if ( configUSE_APPLICATION_TASK_TAG == 1 )
	{
		pxNewTCB->pxTaskTag = NULL;
 8007ab0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007ab2:	2200      	movs	r2, #0
 8007ab4:	655a      	str	r2, [r3, #84]	; 0x54
	}
	#endif

	#if ( configUSE_TASK_NOTIFICATIONS == 1 )
	{
		pxNewTCB->ulNotifiedValue = 0;
 8007ab6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007ab8:	2200      	movs	r2, #0
 8007aba:	659a      	str	r2, [r3, #88]	; 0x58
		pxNewTCB->ucNotifyState = taskNOT_WAITING_NOTIFICATION;
 8007abc:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007abe:	2200      	movs	r2, #0
 8007ac0:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c
			}
			#endif /* portSTACK_GROWTH */
		}
		#else /* portHAS_STACK_OVERFLOW_CHECKING */
		{
			pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters );
 8007ac4:	683a      	ldr	r2, [r7, #0]
 8007ac6:	68f9      	ldr	r1, [r7, #12]
 8007ac8:	69b8      	ldr	r0, [r7, #24]
 8007aca:	f001 f9dd 	bl	8008e88 <pxPortInitialiseStack>
 8007ace:	4602      	mov	r2, r0
 8007ad0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007ad2:	601a      	str	r2, [r3, #0]
		}
		#endif /* portHAS_STACK_OVERFLOW_CHECKING */
	}
	#endif /* portUSING_MPU_WRAPPERS */

	if( pxCreatedTask != NULL )
 8007ad4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007ad6:	2b00      	cmp	r3, #0
 8007ad8:	d002      	beq.n	8007ae0 <prvInitialiseNewTask+0x11c>
	{
		/* Pass the handle out in an anonymous way.  The handle can be used to
		change the created task's priority, delete the created task, etc.*/
		*pxCreatedTask = ( TaskHandle_t ) pxNewTCB;
 8007ada:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007adc:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8007ade:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 8007ae0:	bf00      	nop
 8007ae2:	3720      	adds	r7, #32
 8007ae4:	46bd      	mov	sp, r7
 8007ae6:	bd80      	pop	{r7, pc}

08007ae8 <prvAddNewTaskToReadyList>:
/*-----------------------------------------------------------*/

static void prvAddNewTaskToReadyList( TCB_t *pxNewTCB )
{
 8007ae8:	b580      	push	{r7, lr}
 8007aea:	b082      	sub	sp, #8
 8007aec:	af00      	add	r7, sp, #0
 8007aee:	6078      	str	r0, [r7, #4]
	/* Ensure interrupts don't access the task lists while the lists are being
	updated. */
	taskENTER_CRITICAL();
 8007af0:	f001 faf8 	bl	80090e4 <vPortEnterCritical>
	{
		uxCurrentNumberOfTasks++;
 8007af4:	4b2d      	ldr	r3, [pc, #180]	; (8007bac <prvAddNewTaskToReadyList+0xc4>)
 8007af6:	681b      	ldr	r3, [r3, #0]
 8007af8:	3301      	adds	r3, #1
 8007afa:	4a2c      	ldr	r2, [pc, #176]	; (8007bac <prvAddNewTaskToReadyList+0xc4>)
 8007afc:	6013      	str	r3, [r2, #0]
		if( pxCurrentTCB == NULL )
 8007afe:	4b2c      	ldr	r3, [pc, #176]	; (8007bb0 <prvAddNewTaskToReadyList+0xc8>)
 8007b00:	681b      	ldr	r3, [r3, #0]
 8007b02:	2b00      	cmp	r3, #0
 8007b04:	d109      	bne.n	8007b1a <prvAddNewTaskToReadyList+0x32>
		{
			/* There are no other tasks, or all the other tasks are in
			the suspended state - make this the current task. */
			pxCurrentTCB = pxNewTCB;
 8007b06:	4a2a      	ldr	r2, [pc, #168]	; (8007bb0 <prvAddNewTaskToReadyList+0xc8>)
 8007b08:	687b      	ldr	r3, [r7, #4]
 8007b0a:	6013      	str	r3, [r2, #0]

			if( uxCurrentNumberOfTasks == ( UBaseType_t ) 1 )
 8007b0c:	4b27      	ldr	r3, [pc, #156]	; (8007bac <prvAddNewTaskToReadyList+0xc4>)
 8007b0e:	681b      	ldr	r3, [r3, #0]
 8007b10:	2b01      	cmp	r3, #1
 8007b12:	d110      	bne.n	8007b36 <prvAddNewTaskToReadyList+0x4e>
			{
				/* This is the first task to be created so do the preliminary
				initialisation required.  We will not recover if this call
				fails, but we will report the failure. */
				prvInitialiseTaskLists();
 8007b14:	f000 fccc 	bl	80084b0 <prvInitialiseTaskLists>
 8007b18:	e00d      	b.n	8007b36 <prvAddNewTaskToReadyList+0x4e>
		else
		{
			/* If the scheduler is not already running, make this task the
			current task if it is the highest priority task to be created
			so far. */
			if( xSchedulerRunning == pdFALSE )
 8007b1a:	4b26      	ldr	r3, [pc, #152]	; (8007bb4 <prvAddNewTaskToReadyList+0xcc>)
 8007b1c:	681b      	ldr	r3, [r3, #0]
 8007b1e:	2b00      	cmp	r3, #0
 8007b20:	d109      	bne.n	8007b36 <prvAddNewTaskToReadyList+0x4e>
			{
				if( pxCurrentTCB->uxPriority <= pxNewTCB->uxPriority )
 8007b22:	4b23      	ldr	r3, [pc, #140]	; (8007bb0 <prvAddNewTaskToReadyList+0xc8>)
 8007b24:	681b      	ldr	r3, [r3, #0]
 8007b26:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8007b28:	687b      	ldr	r3, [r7, #4]
 8007b2a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007b2c:	429a      	cmp	r2, r3
 8007b2e:	d802      	bhi.n	8007b36 <prvAddNewTaskToReadyList+0x4e>
				{
					pxCurrentTCB = pxNewTCB;
 8007b30:	4a1f      	ldr	r2, [pc, #124]	; (8007bb0 <prvAddNewTaskToReadyList+0xc8>)
 8007b32:	687b      	ldr	r3, [r7, #4]
 8007b34:	6013      	str	r3, [r2, #0]
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}

		uxTaskNumber++;
 8007b36:	4b20      	ldr	r3, [pc, #128]	; (8007bb8 <prvAddNewTaskToReadyList+0xd0>)
 8007b38:	681b      	ldr	r3, [r3, #0]
 8007b3a:	3301      	adds	r3, #1
 8007b3c:	4a1e      	ldr	r2, [pc, #120]	; (8007bb8 <prvAddNewTaskToReadyList+0xd0>)
 8007b3e:	6013      	str	r3, [r2, #0]

		#if ( configUSE_TRACE_FACILITY == 1 )
		{
			/* Add a counter into the TCB for tracing only. */
			pxNewTCB->uxTCBNumber = uxTaskNumber;
 8007b40:	4b1d      	ldr	r3, [pc, #116]	; (8007bb8 <prvAddNewTaskToReadyList+0xd0>)
 8007b42:	681a      	ldr	r2, [r3, #0]
 8007b44:	687b      	ldr	r3, [r7, #4]
 8007b46:	645a      	str	r2, [r3, #68]	; 0x44
		}
		#endif /* configUSE_TRACE_FACILITY */
		traceTASK_CREATE( pxNewTCB );

		prvAddTaskToReadyList( pxNewTCB );
 8007b48:	687b      	ldr	r3, [r7, #4]
 8007b4a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8007b4c:	4b1b      	ldr	r3, [pc, #108]	; (8007bbc <prvAddNewTaskToReadyList+0xd4>)
 8007b4e:	681b      	ldr	r3, [r3, #0]
 8007b50:	429a      	cmp	r2, r3
 8007b52:	d903      	bls.n	8007b5c <prvAddNewTaskToReadyList+0x74>
 8007b54:	687b      	ldr	r3, [r7, #4]
 8007b56:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007b58:	4a18      	ldr	r2, [pc, #96]	; (8007bbc <prvAddNewTaskToReadyList+0xd4>)
 8007b5a:	6013      	str	r3, [r2, #0]
 8007b5c:	687b      	ldr	r3, [r7, #4]
 8007b5e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8007b60:	4613      	mov	r3, r2
 8007b62:	009b      	lsls	r3, r3, #2
 8007b64:	4413      	add	r3, r2
 8007b66:	009b      	lsls	r3, r3, #2
 8007b68:	4a15      	ldr	r2, [pc, #84]	; (8007bc0 <prvAddNewTaskToReadyList+0xd8>)
 8007b6a:	441a      	add	r2, r3
 8007b6c:	687b      	ldr	r3, [r7, #4]
 8007b6e:	3304      	adds	r3, #4
 8007b70:	4619      	mov	r1, r3
 8007b72:	4610      	mov	r0, r2
 8007b74:	f7ff f911 	bl	8006d9a <vListInsertEnd>

		portSETUP_TCB( pxNewTCB );
	}
	taskEXIT_CRITICAL();
 8007b78:	f001 fae4 	bl	8009144 <vPortExitCritical>

	if( xSchedulerRunning != pdFALSE )
 8007b7c:	4b0d      	ldr	r3, [pc, #52]	; (8007bb4 <prvAddNewTaskToReadyList+0xcc>)
 8007b7e:	681b      	ldr	r3, [r3, #0]
 8007b80:	2b00      	cmp	r3, #0
 8007b82:	d00e      	beq.n	8007ba2 <prvAddNewTaskToReadyList+0xba>
	{
		/* If the created task is of a higher priority than the current task
		then it should run now. */
		if( pxCurrentTCB->uxPriority < pxNewTCB->uxPriority )
 8007b84:	4b0a      	ldr	r3, [pc, #40]	; (8007bb0 <prvAddNewTaskToReadyList+0xc8>)
 8007b86:	681b      	ldr	r3, [r3, #0]
 8007b88:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8007b8a:	687b      	ldr	r3, [r7, #4]
 8007b8c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007b8e:	429a      	cmp	r2, r3
 8007b90:	d207      	bcs.n	8007ba2 <prvAddNewTaskToReadyList+0xba>
		{
			taskYIELD_IF_USING_PREEMPTION();
 8007b92:	4b0c      	ldr	r3, [pc, #48]	; (8007bc4 <prvAddNewTaskToReadyList+0xdc>)
 8007b94:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8007b98:	601a      	str	r2, [r3, #0]
 8007b9a:	f3bf 8f4f 	dsb	sy
 8007b9e:	f3bf 8f6f 	isb	sy
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 8007ba2:	bf00      	nop
 8007ba4:	3708      	adds	r7, #8
 8007ba6:	46bd      	mov	sp, r7
 8007ba8:	bd80      	pop	{r7, pc}
 8007baa:	bf00      	nop
 8007bac:	20000f58 	.word	0x20000f58
 8007bb0:	20000a84 	.word	0x20000a84
 8007bb4:	20000f64 	.word	0x20000f64
 8007bb8:	20000f74 	.word	0x20000f74
 8007bbc:	20000f60 	.word	0x20000f60
 8007bc0:	20000a88 	.word	0x20000a88
 8007bc4:	e000ed04 	.word	0xe000ed04

08007bc8 <vTaskDelay>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelay == 1 )

	void vTaskDelay( const TickType_t xTicksToDelay )
	{
 8007bc8:	b580      	push	{r7, lr}
 8007bca:	b084      	sub	sp, #16
 8007bcc:	af00      	add	r7, sp, #0
 8007bce:	6078      	str	r0, [r7, #4]
	BaseType_t xAlreadyYielded = pdFALSE;
 8007bd0:	2300      	movs	r3, #0
 8007bd2:	60fb      	str	r3, [r7, #12]

		/* A delay time of zero just forces a reschedule. */
		if( xTicksToDelay > ( TickType_t ) 0U )
 8007bd4:	687b      	ldr	r3, [r7, #4]
 8007bd6:	2b00      	cmp	r3, #0
 8007bd8:	d017      	beq.n	8007c0a <vTaskDelay+0x42>
		{
			configASSERT( uxSchedulerSuspended == 0 );
 8007bda:	4b13      	ldr	r3, [pc, #76]	; (8007c28 <vTaskDelay+0x60>)
 8007bdc:	681b      	ldr	r3, [r3, #0]
 8007bde:	2b00      	cmp	r3, #0
 8007be0:	d00a      	beq.n	8007bf8 <vTaskDelay+0x30>
	__asm volatile
 8007be2:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007be6:	f383 8811 	msr	BASEPRI, r3
 8007bea:	f3bf 8f6f 	isb	sy
 8007bee:	f3bf 8f4f 	dsb	sy
 8007bf2:	60bb      	str	r3, [r7, #8]
}
 8007bf4:	bf00      	nop
 8007bf6:	e7fe      	b.n	8007bf6 <vTaskDelay+0x2e>
			vTaskSuspendAll();
 8007bf8:	f000 f910 	bl	8007e1c <vTaskSuspendAll>
				list or removed from the blocked list until the scheduler
				is resumed.

				This task cannot be in an event list as it is the currently
				executing task. */
				prvAddCurrentTaskToDelayedList( xTicksToDelay, pdFALSE );
 8007bfc:	2100      	movs	r1, #0
 8007bfe:	6878      	ldr	r0, [r7, #4]
 8007c00:	f000 fda0 	bl	8008744 <prvAddCurrentTaskToDelayedList>
			}
			xAlreadyYielded = xTaskResumeAll();
 8007c04:	f000 f918 	bl	8007e38 <xTaskResumeAll>
 8007c08:	60f8      	str	r0, [r7, #12]
			mtCOVERAGE_TEST_MARKER();
		}

		/* Force a reschedule if xTaskResumeAll has not already done so, we may
		have put ourselves to sleep. */
		if( xAlreadyYielded == pdFALSE )
 8007c0a:	68fb      	ldr	r3, [r7, #12]
 8007c0c:	2b00      	cmp	r3, #0
 8007c0e:	d107      	bne.n	8007c20 <vTaskDelay+0x58>
		{
			portYIELD_WITHIN_API();
 8007c10:	4b06      	ldr	r3, [pc, #24]	; (8007c2c <vTaskDelay+0x64>)
 8007c12:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8007c16:	601a      	str	r2, [r3, #0]
 8007c18:	f3bf 8f4f 	dsb	sy
 8007c1c:	f3bf 8f6f 	isb	sy
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
 8007c20:	bf00      	nop
 8007c22:	3710      	adds	r7, #16
 8007c24:	46bd      	mov	sp, r7
 8007c26:	bd80      	pop	{r7, pc}
 8007c28:	20000f80 	.word	0x20000f80
 8007c2c:	e000ed04 	.word	0xe000ed04

08007c30 <prvTaskIsTaskSuspended>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskSuspend == 1 )

	static BaseType_t prvTaskIsTaskSuspended( const TaskHandle_t xTask )
	{
 8007c30:	b480      	push	{r7}
 8007c32:	b087      	sub	sp, #28
 8007c34:	af00      	add	r7, sp, #0
 8007c36:	6078      	str	r0, [r7, #4]
	BaseType_t xReturn = pdFALSE;
 8007c38:	2300      	movs	r3, #0
 8007c3a:	617b      	str	r3, [r7, #20]
	const TCB_t * const pxTCB = xTask;
 8007c3c:	687b      	ldr	r3, [r7, #4]
 8007c3e:	613b      	str	r3, [r7, #16]

		/* Accesses xPendingReadyList so must be called from a critical
		section. */

		/* It does not make sense to check if the calling task is suspended. */
		configASSERT( xTask );
 8007c40:	687b      	ldr	r3, [r7, #4]
 8007c42:	2b00      	cmp	r3, #0
 8007c44:	d10a      	bne.n	8007c5c <prvTaskIsTaskSuspended+0x2c>
	__asm volatile
 8007c46:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007c4a:	f383 8811 	msr	BASEPRI, r3
 8007c4e:	f3bf 8f6f 	isb	sy
 8007c52:	f3bf 8f4f 	dsb	sy
 8007c56:	60fb      	str	r3, [r7, #12]
}
 8007c58:	bf00      	nop
 8007c5a:	e7fe      	b.n	8007c5a <prvTaskIsTaskSuspended+0x2a>

		/* Is the task being resumed actually in the suspended list? */
		if( listIS_CONTAINED_WITHIN( &xSuspendedTaskList, &( pxTCB->xStateListItem ) ) != pdFALSE )
 8007c5c:	693b      	ldr	r3, [r7, #16]
 8007c5e:	695b      	ldr	r3, [r3, #20]
 8007c60:	4a0a      	ldr	r2, [pc, #40]	; (8007c8c <prvTaskIsTaskSuspended+0x5c>)
 8007c62:	4293      	cmp	r3, r2
 8007c64:	d10a      	bne.n	8007c7c <prvTaskIsTaskSuspended+0x4c>
		{
			/* Has the task already been resumed from within an ISR? */
			if( listIS_CONTAINED_WITHIN( &xPendingReadyList, &( pxTCB->xEventListItem ) ) == pdFALSE )
 8007c66:	693b      	ldr	r3, [r7, #16]
 8007c68:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8007c6a:	4a09      	ldr	r2, [pc, #36]	; (8007c90 <prvTaskIsTaskSuspended+0x60>)
 8007c6c:	4293      	cmp	r3, r2
 8007c6e:	d005      	beq.n	8007c7c <prvTaskIsTaskSuspended+0x4c>
			{
				/* Is it in the suspended list because it is in the	Suspended
				state, or because is is blocked with no timeout? */
				if( listIS_CONTAINED_WITHIN( NULL, &( pxTCB->xEventListItem ) ) != pdFALSE ) /*lint !e961.  The cast is only redundant when NULL is used. */
 8007c70:	693b      	ldr	r3, [r7, #16]
 8007c72:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8007c74:	2b00      	cmp	r3, #0
 8007c76:	d101      	bne.n	8007c7c <prvTaskIsTaskSuspended+0x4c>
				{
					xReturn = pdTRUE;
 8007c78:	2301      	movs	r3, #1
 8007c7a:	617b      	str	r3, [r7, #20]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		return xReturn;
 8007c7c:	697b      	ldr	r3, [r7, #20]
	} /*lint !e818 xTask cannot be a pointer to const because it is a typedef. */
 8007c7e:	4618      	mov	r0, r3
 8007c80:	371c      	adds	r7, #28
 8007c82:	46bd      	mov	sp, r7
 8007c84:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007c88:	4770      	bx	lr
 8007c8a:	bf00      	nop
 8007c8c:	20000f44 	.word	0x20000f44
 8007c90:	20000f18 	.word	0x20000f18

08007c94 <vTaskResume>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskSuspend == 1 )

	void vTaskResume( TaskHandle_t xTaskToResume )
	{
 8007c94:	b580      	push	{r7, lr}
 8007c96:	b084      	sub	sp, #16
 8007c98:	af00      	add	r7, sp, #0
 8007c9a:	6078      	str	r0, [r7, #4]
	TCB_t * const pxTCB = xTaskToResume;
 8007c9c:	687b      	ldr	r3, [r7, #4]
 8007c9e:	60fb      	str	r3, [r7, #12]

		/* It does not make sense to resume the calling task. */
		configASSERT( xTaskToResume );
 8007ca0:	687b      	ldr	r3, [r7, #4]
 8007ca2:	2b00      	cmp	r3, #0
 8007ca4:	d10a      	bne.n	8007cbc <vTaskResume+0x28>
	__asm volatile
 8007ca6:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007caa:	f383 8811 	msr	BASEPRI, r3
 8007cae:	f3bf 8f6f 	isb	sy
 8007cb2:	f3bf 8f4f 	dsb	sy
 8007cb6:	60bb      	str	r3, [r7, #8]
}
 8007cb8:	bf00      	nop
 8007cba:	e7fe      	b.n	8007cba <vTaskResume+0x26>

		/* The parameter cannot be NULL as it is impossible to resume the
		currently executing task. */
		if( ( pxTCB != pxCurrentTCB ) && ( pxTCB != NULL ) )
 8007cbc:	4b20      	ldr	r3, [pc, #128]	; (8007d40 <vTaskResume+0xac>)
 8007cbe:	681b      	ldr	r3, [r3, #0]
 8007cc0:	68fa      	ldr	r2, [r7, #12]
 8007cc2:	429a      	cmp	r2, r3
 8007cc4:	d038      	beq.n	8007d38 <vTaskResume+0xa4>
 8007cc6:	68fb      	ldr	r3, [r7, #12]
 8007cc8:	2b00      	cmp	r3, #0
 8007cca:	d035      	beq.n	8007d38 <vTaskResume+0xa4>
		{
			taskENTER_CRITICAL();
 8007ccc:	f001 fa0a 	bl	80090e4 <vPortEnterCritical>
			{
				if( prvTaskIsTaskSuspended( pxTCB ) != pdFALSE )
 8007cd0:	68f8      	ldr	r0, [r7, #12]
 8007cd2:	f7ff ffad 	bl	8007c30 <prvTaskIsTaskSuspended>
 8007cd6:	4603      	mov	r3, r0
 8007cd8:	2b00      	cmp	r3, #0
 8007cda:	d02b      	beq.n	8007d34 <vTaskResume+0xa0>
				{
					traceTASK_RESUME( pxTCB );

					/* The ready list can be accessed even if the scheduler is
					suspended because this is inside a critical section. */
					( void ) uxListRemove(  &( pxTCB->xStateListItem ) );
 8007cdc:	68fb      	ldr	r3, [r7, #12]
 8007cde:	3304      	adds	r3, #4
 8007ce0:	4618      	mov	r0, r3
 8007ce2:	f7ff f8b7 	bl	8006e54 <uxListRemove>
					prvAddTaskToReadyList( pxTCB );
 8007ce6:	68fb      	ldr	r3, [r7, #12]
 8007ce8:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8007cea:	4b16      	ldr	r3, [pc, #88]	; (8007d44 <vTaskResume+0xb0>)
 8007cec:	681b      	ldr	r3, [r3, #0]
 8007cee:	429a      	cmp	r2, r3
 8007cf0:	d903      	bls.n	8007cfa <vTaskResume+0x66>
 8007cf2:	68fb      	ldr	r3, [r7, #12]
 8007cf4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007cf6:	4a13      	ldr	r2, [pc, #76]	; (8007d44 <vTaskResume+0xb0>)
 8007cf8:	6013      	str	r3, [r2, #0]
 8007cfa:	68fb      	ldr	r3, [r7, #12]
 8007cfc:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8007cfe:	4613      	mov	r3, r2
 8007d00:	009b      	lsls	r3, r3, #2
 8007d02:	4413      	add	r3, r2
 8007d04:	009b      	lsls	r3, r3, #2
 8007d06:	4a10      	ldr	r2, [pc, #64]	; (8007d48 <vTaskResume+0xb4>)
 8007d08:	441a      	add	r2, r3
 8007d0a:	68fb      	ldr	r3, [r7, #12]
 8007d0c:	3304      	adds	r3, #4
 8007d0e:	4619      	mov	r1, r3
 8007d10:	4610      	mov	r0, r2
 8007d12:	f7ff f842 	bl	8006d9a <vListInsertEnd>

					/* A higher priority task may have just been resumed. */
					if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 8007d16:	68fb      	ldr	r3, [r7, #12]
 8007d18:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8007d1a:	4b09      	ldr	r3, [pc, #36]	; (8007d40 <vTaskResume+0xac>)
 8007d1c:	681b      	ldr	r3, [r3, #0]
 8007d1e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007d20:	429a      	cmp	r2, r3
 8007d22:	d307      	bcc.n	8007d34 <vTaskResume+0xa0>
					{
						/* This yield may not cause the task just resumed to run,
						but will leave the lists in the correct state for the
						next yield. */
						taskYIELD_IF_USING_PREEMPTION();
 8007d24:	4b09      	ldr	r3, [pc, #36]	; (8007d4c <vTaskResume+0xb8>)
 8007d26:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8007d2a:	601a      	str	r2, [r3, #0]
 8007d2c:	f3bf 8f4f 	dsb	sy
 8007d30:	f3bf 8f6f 	isb	sy
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}
			}
			taskEXIT_CRITICAL();
 8007d34:	f001 fa06 	bl	8009144 <vPortExitCritical>
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
 8007d38:	bf00      	nop
 8007d3a:	3710      	adds	r7, #16
 8007d3c:	46bd      	mov	sp, r7
 8007d3e:	bd80      	pop	{r7, pc}
 8007d40:	20000a84 	.word	0x20000a84
 8007d44:	20000f60 	.word	0x20000f60
 8007d48:	20000a88 	.word	0x20000a88
 8007d4c:	e000ed04 	.word	0xe000ed04

08007d50 <vTaskStartScheduler>:

#endif /* ( ( INCLUDE_xTaskResumeFromISR == 1 ) && ( INCLUDE_vTaskSuspend == 1 ) ) */
/*-----------------------------------------------------------*/

void vTaskStartScheduler( void )
{
 8007d50:	b580      	push	{r7, lr}
 8007d52:	b08a      	sub	sp, #40	; 0x28
 8007d54:	af04      	add	r7, sp, #16
BaseType_t xReturn;

	/* Add the idle task at the lowest priority. */
	#if( configSUPPORT_STATIC_ALLOCATION == 1 )
	{
		StaticTask_t *pxIdleTaskTCBBuffer = NULL;
 8007d56:	2300      	movs	r3, #0
 8007d58:	60bb      	str	r3, [r7, #8]
		StackType_t *pxIdleTaskStackBuffer = NULL;
 8007d5a:	2300      	movs	r3, #0
 8007d5c:	607b      	str	r3, [r7, #4]
		uint32_t ulIdleTaskStackSize;

		/* The Idle task is created using user provided RAM - obtain the
		address of the RAM then create the idle task. */
		vApplicationGetIdleTaskMemory( &pxIdleTaskTCBBuffer, &pxIdleTaskStackBuffer, &ulIdleTaskStackSize );
 8007d5e:	463a      	mov	r2, r7
 8007d60:	1d39      	adds	r1, r7, #4
 8007d62:	f107 0308 	add.w	r3, r7, #8
 8007d66:	4618      	mov	r0, r3
 8007d68:	f7fe ffb6 	bl	8006cd8 <vApplicationGetIdleTaskMemory>
		xIdleTaskHandle = xTaskCreateStatic(	prvIdleTask,
 8007d6c:	6839      	ldr	r1, [r7, #0]
 8007d6e:	687b      	ldr	r3, [r7, #4]
 8007d70:	68ba      	ldr	r2, [r7, #8]
 8007d72:	9202      	str	r2, [sp, #8]
 8007d74:	9301      	str	r3, [sp, #4]
 8007d76:	2300      	movs	r3, #0
 8007d78:	9300      	str	r3, [sp, #0]
 8007d7a:	2300      	movs	r3, #0
 8007d7c:	460a      	mov	r2, r1
 8007d7e:	4921      	ldr	r1, [pc, #132]	; (8007e04 <vTaskStartScheduler+0xb4>)
 8007d80:	4821      	ldr	r0, [pc, #132]	; (8007e08 <vTaskStartScheduler+0xb8>)
 8007d82:	f7ff fd7d 	bl	8007880 <xTaskCreateStatic>
 8007d86:	4603      	mov	r3, r0
 8007d88:	4a20      	ldr	r2, [pc, #128]	; (8007e0c <vTaskStartScheduler+0xbc>)
 8007d8a:	6013      	str	r3, [r2, #0]
												( void * ) NULL, /*lint !e961.  The cast is not redundant for all compilers. */
												portPRIVILEGE_BIT, /* In effect ( tskIDLE_PRIORITY | portPRIVILEGE_BIT ), but tskIDLE_PRIORITY is zero. */
												pxIdleTaskStackBuffer,
												pxIdleTaskTCBBuffer ); /*lint !e961 MISRA exception, justified as it is not a redundant explicit cast to all supported compilers. */

		if( xIdleTaskHandle != NULL )
 8007d8c:	4b1f      	ldr	r3, [pc, #124]	; (8007e0c <vTaskStartScheduler+0xbc>)
 8007d8e:	681b      	ldr	r3, [r3, #0]
 8007d90:	2b00      	cmp	r3, #0
 8007d92:	d002      	beq.n	8007d9a <vTaskStartScheduler+0x4a>
		{
			xReturn = pdPASS;
 8007d94:	2301      	movs	r3, #1
 8007d96:	617b      	str	r3, [r7, #20]
 8007d98:	e001      	b.n	8007d9e <vTaskStartScheduler+0x4e>
		}
		else
		{
			xReturn = pdFAIL;
 8007d9a:	2300      	movs	r3, #0
 8007d9c:	617b      	str	r3, [r7, #20]
	}
	#endif /* configSUPPORT_STATIC_ALLOCATION */

	#if ( configUSE_TIMERS == 1 )
	{
		if( xReturn == pdPASS )
 8007d9e:	697b      	ldr	r3, [r7, #20]
 8007da0:	2b01      	cmp	r3, #1
 8007da2:	d102      	bne.n	8007daa <vTaskStartScheduler+0x5a>
		{
			xReturn = xTimerCreateTimerTask();
 8007da4:	f000 fd22 	bl	80087ec <xTimerCreateTimerTask>
 8007da8:	6178      	str	r0, [r7, #20]
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif /* configUSE_TIMERS */

	if( xReturn == pdPASS )
 8007daa:	697b      	ldr	r3, [r7, #20]
 8007dac:	2b01      	cmp	r3, #1
 8007dae:	d116      	bne.n	8007dde <vTaskStartScheduler+0x8e>
	__asm volatile
 8007db0:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007db4:	f383 8811 	msr	BASEPRI, r3
 8007db8:	f3bf 8f6f 	isb	sy
 8007dbc:	f3bf 8f4f 	dsb	sy
 8007dc0:	613b      	str	r3, [r7, #16]
}
 8007dc2:	bf00      	nop
			for additional information. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */

		xNextTaskUnblockTime = portMAX_DELAY;
 8007dc4:	4b12      	ldr	r3, [pc, #72]	; (8007e10 <vTaskStartScheduler+0xc0>)
 8007dc6:	f04f 32ff 	mov.w	r2, #4294967295
 8007dca:	601a      	str	r2, [r3, #0]
		xSchedulerRunning = pdTRUE;
 8007dcc:	4b11      	ldr	r3, [pc, #68]	; (8007e14 <vTaskStartScheduler+0xc4>)
 8007dce:	2201      	movs	r2, #1
 8007dd0:	601a      	str	r2, [r3, #0]
		xTickCount = ( TickType_t ) configINITIAL_TICK_COUNT;
 8007dd2:	4b11      	ldr	r3, [pc, #68]	; (8007e18 <vTaskStartScheduler+0xc8>)
 8007dd4:	2200      	movs	r2, #0
 8007dd6:	601a      	str	r2, [r3, #0]

		traceTASK_SWITCHED_IN();

		/* Setting up the timer tick is hardware specific and thus in the
		portable interface. */
		if( xPortStartScheduler() != pdFALSE )
 8007dd8:	f001 f8e2 	bl	8008fa0 <xPortStartScheduler>
	}

	/* Prevent compiler warnings if INCLUDE_xTaskGetIdleTaskHandle is set to 0,
	meaning xIdleTaskHandle is not used anywhere else. */
	( void ) xIdleTaskHandle;
}
 8007ddc:	e00e      	b.n	8007dfc <vTaskStartScheduler+0xac>
		configASSERT( xReturn != errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY );
 8007dde:	697b      	ldr	r3, [r7, #20]
 8007de0:	f1b3 3fff 	cmp.w	r3, #4294967295
 8007de4:	d10a      	bne.n	8007dfc <vTaskStartScheduler+0xac>
	__asm volatile
 8007de6:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007dea:	f383 8811 	msr	BASEPRI, r3
 8007dee:	f3bf 8f6f 	isb	sy
 8007df2:	f3bf 8f4f 	dsb	sy
 8007df6:	60fb      	str	r3, [r7, #12]
}
 8007df8:	bf00      	nop
 8007dfa:	e7fe      	b.n	8007dfa <vTaskStartScheduler+0xaa>
}
 8007dfc:	bf00      	nop
 8007dfe:	3718      	adds	r7, #24
 8007e00:	46bd      	mov	sp, r7
 8007e02:	bd80      	pop	{r7, pc}
 8007e04:	0800aea8 	.word	0x0800aea8
 8007e08:	0800847d 	.word	0x0800847d
 8007e0c:	20000f7c 	.word	0x20000f7c
 8007e10:	20000f78 	.word	0x20000f78
 8007e14:	20000f64 	.word	0x20000f64
 8007e18:	20000f5c 	.word	0x20000f5c

08007e1c <vTaskSuspendAll>:
	vPortEndScheduler();
}
/*----------------------------------------------------------*/

void vTaskSuspendAll( void )
{
 8007e1c:	b480      	push	{r7}
 8007e1e:	af00      	add	r7, sp, #0
	do not otherwise exhibit real time behaviour. */
	portSOFTWARE_BARRIER();

	/* The scheduler is suspended if uxSchedulerSuspended is non-zero.  An increment
	is used to allow calls to vTaskSuspendAll() to nest. */
	++uxSchedulerSuspended;
 8007e20:	4b04      	ldr	r3, [pc, #16]	; (8007e34 <vTaskSuspendAll+0x18>)
 8007e22:	681b      	ldr	r3, [r3, #0]
 8007e24:	3301      	adds	r3, #1
 8007e26:	4a03      	ldr	r2, [pc, #12]	; (8007e34 <vTaskSuspendAll+0x18>)
 8007e28:	6013      	str	r3, [r2, #0]

	/* Enforces ordering for ports and optimised compilers that may otherwise place
	the above increment elsewhere. */
	portMEMORY_BARRIER();
}
 8007e2a:	bf00      	nop
 8007e2c:	46bd      	mov	sp, r7
 8007e2e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007e32:	4770      	bx	lr
 8007e34:	20000f80 	.word	0x20000f80

08007e38 <xTaskResumeAll>:

#endif /* configUSE_TICKLESS_IDLE */
/*----------------------------------------------------------*/

BaseType_t xTaskResumeAll( void )
{
 8007e38:	b580      	push	{r7, lr}
 8007e3a:	b084      	sub	sp, #16
 8007e3c:	af00      	add	r7, sp, #0
TCB_t *pxTCB = NULL;
 8007e3e:	2300      	movs	r3, #0
 8007e40:	60fb      	str	r3, [r7, #12]
BaseType_t xAlreadyYielded = pdFALSE;
 8007e42:	2300      	movs	r3, #0
 8007e44:	60bb      	str	r3, [r7, #8]

	/* If uxSchedulerSuspended is zero then this function does not match a
	previous call to vTaskSuspendAll(). */
	configASSERT( uxSchedulerSuspended );
 8007e46:	4b42      	ldr	r3, [pc, #264]	; (8007f50 <xTaskResumeAll+0x118>)
 8007e48:	681b      	ldr	r3, [r3, #0]
 8007e4a:	2b00      	cmp	r3, #0
 8007e4c:	d10a      	bne.n	8007e64 <xTaskResumeAll+0x2c>
	__asm volatile
 8007e4e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007e52:	f383 8811 	msr	BASEPRI, r3
 8007e56:	f3bf 8f6f 	isb	sy
 8007e5a:	f3bf 8f4f 	dsb	sy
 8007e5e:	603b      	str	r3, [r7, #0]
}
 8007e60:	bf00      	nop
 8007e62:	e7fe      	b.n	8007e62 <xTaskResumeAll+0x2a>
	/* It is possible that an ISR caused a task to be removed from an event
	list while the scheduler was suspended.  If this was the case then the
	removed task will have been added to the xPendingReadyList.  Once the
	scheduler has been resumed it is safe to move all the pending ready
	tasks from this list into their appropriate ready list. */
	taskENTER_CRITICAL();
 8007e64:	f001 f93e 	bl	80090e4 <vPortEnterCritical>
	{
		--uxSchedulerSuspended;
 8007e68:	4b39      	ldr	r3, [pc, #228]	; (8007f50 <xTaskResumeAll+0x118>)
 8007e6a:	681b      	ldr	r3, [r3, #0]
 8007e6c:	3b01      	subs	r3, #1
 8007e6e:	4a38      	ldr	r2, [pc, #224]	; (8007f50 <xTaskResumeAll+0x118>)
 8007e70:	6013      	str	r3, [r2, #0]

		if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8007e72:	4b37      	ldr	r3, [pc, #220]	; (8007f50 <xTaskResumeAll+0x118>)
 8007e74:	681b      	ldr	r3, [r3, #0]
 8007e76:	2b00      	cmp	r3, #0
 8007e78:	d162      	bne.n	8007f40 <xTaskResumeAll+0x108>
		{
			if( uxCurrentNumberOfTasks > ( UBaseType_t ) 0U )
 8007e7a:	4b36      	ldr	r3, [pc, #216]	; (8007f54 <xTaskResumeAll+0x11c>)
 8007e7c:	681b      	ldr	r3, [r3, #0]
 8007e7e:	2b00      	cmp	r3, #0
 8007e80:	d05e      	beq.n	8007f40 <xTaskResumeAll+0x108>
			{
				/* Move any readied tasks from the pending list into the
				appropriate ready list. */
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 8007e82:	e02f      	b.n	8007ee4 <xTaskResumeAll+0xac>
				{
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xPendingReadyList ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8007e84:	4b34      	ldr	r3, [pc, #208]	; (8007f58 <xTaskResumeAll+0x120>)
 8007e86:	68db      	ldr	r3, [r3, #12]
 8007e88:	68db      	ldr	r3, [r3, #12]
 8007e8a:	60fb      	str	r3, [r7, #12]
					( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 8007e8c:	68fb      	ldr	r3, [r7, #12]
 8007e8e:	3318      	adds	r3, #24
 8007e90:	4618      	mov	r0, r3
 8007e92:	f7fe ffdf 	bl	8006e54 <uxListRemove>
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8007e96:	68fb      	ldr	r3, [r7, #12]
 8007e98:	3304      	adds	r3, #4
 8007e9a:	4618      	mov	r0, r3
 8007e9c:	f7fe ffda 	bl	8006e54 <uxListRemove>
					prvAddTaskToReadyList( pxTCB );
 8007ea0:	68fb      	ldr	r3, [r7, #12]
 8007ea2:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8007ea4:	4b2d      	ldr	r3, [pc, #180]	; (8007f5c <xTaskResumeAll+0x124>)
 8007ea6:	681b      	ldr	r3, [r3, #0]
 8007ea8:	429a      	cmp	r2, r3
 8007eaa:	d903      	bls.n	8007eb4 <xTaskResumeAll+0x7c>
 8007eac:	68fb      	ldr	r3, [r7, #12]
 8007eae:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007eb0:	4a2a      	ldr	r2, [pc, #168]	; (8007f5c <xTaskResumeAll+0x124>)
 8007eb2:	6013      	str	r3, [r2, #0]
 8007eb4:	68fb      	ldr	r3, [r7, #12]
 8007eb6:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8007eb8:	4613      	mov	r3, r2
 8007eba:	009b      	lsls	r3, r3, #2
 8007ebc:	4413      	add	r3, r2
 8007ebe:	009b      	lsls	r3, r3, #2
 8007ec0:	4a27      	ldr	r2, [pc, #156]	; (8007f60 <xTaskResumeAll+0x128>)
 8007ec2:	441a      	add	r2, r3
 8007ec4:	68fb      	ldr	r3, [r7, #12]
 8007ec6:	3304      	adds	r3, #4
 8007ec8:	4619      	mov	r1, r3
 8007eca:	4610      	mov	r0, r2
 8007ecc:	f7fe ff65 	bl	8006d9a <vListInsertEnd>

					/* If the moved task has a priority higher than the current
					task then a yield must be performed. */
					if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 8007ed0:	68fb      	ldr	r3, [r7, #12]
 8007ed2:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8007ed4:	4b23      	ldr	r3, [pc, #140]	; (8007f64 <xTaskResumeAll+0x12c>)
 8007ed6:	681b      	ldr	r3, [r3, #0]
 8007ed8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007eda:	429a      	cmp	r2, r3
 8007edc:	d302      	bcc.n	8007ee4 <xTaskResumeAll+0xac>
					{
						xYieldPending = pdTRUE;
 8007ede:	4b22      	ldr	r3, [pc, #136]	; (8007f68 <xTaskResumeAll+0x130>)
 8007ee0:	2201      	movs	r2, #1
 8007ee2:	601a      	str	r2, [r3, #0]
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 8007ee4:	4b1c      	ldr	r3, [pc, #112]	; (8007f58 <xTaskResumeAll+0x120>)
 8007ee6:	681b      	ldr	r3, [r3, #0]
 8007ee8:	2b00      	cmp	r3, #0
 8007eea:	d1cb      	bne.n	8007e84 <xTaskResumeAll+0x4c>
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( pxTCB != NULL )
 8007eec:	68fb      	ldr	r3, [r7, #12]
 8007eee:	2b00      	cmp	r3, #0
 8007ef0:	d001      	beq.n	8007ef6 <xTaskResumeAll+0xbe>
					which may have prevented the next unblock time from being
					re-calculated, in which case re-calculate it now.  Mainly
					important for low power tickless implementations, where
					this can prevent an unnecessary exit from low power
					state. */
					prvResetNextTaskUnblockTime();
 8007ef2:	f000 fb7b 	bl	80085ec <prvResetNextTaskUnblockTime>
				/* If any ticks occurred while the scheduler was suspended then
				they should be processed now.  This ensures the tick count does
				not	slip, and that any delayed tasks are resumed at the correct
				time. */
				{
					TickType_t xPendedCounts = xPendedTicks; /* Non-volatile copy. */
 8007ef6:	4b1d      	ldr	r3, [pc, #116]	; (8007f6c <xTaskResumeAll+0x134>)
 8007ef8:	681b      	ldr	r3, [r3, #0]
 8007efa:	607b      	str	r3, [r7, #4]

					if( xPendedCounts > ( TickType_t ) 0U )
 8007efc:	687b      	ldr	r3, [r7, #4]
 8007efe:	2b00      	cmp	r3, #0
 8007f00:	d010      	beq.n	8007f24 <xTaskResumeAll+0xec>
					{
						do
						{
							if( xTaskIncrementTick() != pdFALSE )
 8007f02:	f000 f847 	bl	8007f94 <xTaskIncrementTick>
 8007f06:	4603      	mov	r3, r0
 8007f08:	2b00      	cmp	r3, #0
 8007f0a:	d002      	beq.n	8007f12 <xTaskResumeAll+0xda>
							{
								xYieldPending = pdTRUE;
 8007f0c:	4b16      	ldr	r3, [pc, #88]	; (8007f68 <xTaskResumeAll+0x130>)
 8007f0e:	2201      	movs	r2, #1
 8007f10:	601a      	str	r2, [r3, #0]
							}
							else
							{
								mtCOVERAGE_TEST_MARKER();
							}
							--xPendedCounts;
 8007f12:	687b      	ldr	r3, [r7, #4]
 8007f14:	3b01      	subs	r3, #1
 8007f16:	607b      	str	r3, [r7, #4]
						} while( xPendedCounts > ( TickType_t ) 0U );
 8007f18:	687b      	ldr	r3, [r7, #4]
 8007f1a:	2b00      	cmp	r3, #0
 8007f1c:	d1f1      	bne.n	8007f02 <xTaskResumeAll+0xca>

						xPendedTicks = 0;
 8007f1e:	4b13      	ldr	r3, [pc, #76]	; (8007f6c <xTaskResumeAll+0x134>)
 8007f20:	2200      	movs	r2, #0
 8007f22:	601a      	str	r2, [r3, #0]
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( xYieldPending != pdFALSE )
 8007f24:	4b10      	ldr	r3, [pc, #64]	; (8007f68 <xTaskResumeAll+0x130>)
 8007f26:	681b      	ldr	r3, [r3, #0]
 8007f28:	2b00      	cmp	r3, #0
 8007f2a:	d009      	beq.n	8007f40 <xTaskResumeAll+0x108>
				{
					#if( configUSE_PREEMPTION != 0 )
					{
						xAlreadyYielded = pdTRUE;
 8007f2c:	2301      	movs	r3, #1
 8007f2e:	60bb      	str	r3, [r7, #8]
					}
					#endif
					taskYIELD_IF_USING_PREEMPTION();
 8007f30:	4b0f      	ldr	r3, [pc, #60]	; (8007f70 <xTaskResumeAll+0x138>)
 8007f32:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8007f36:	601a      	str	r2, [r3, #0]
 8007f38:	f3bf 8f4f 	dsb	sy
 8007f3c:	f3bf 8f6f 	isb	sy
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 8007f40:	f001 f900 	bl	8009144 <vPortExitCritical>

	return xAlreadyYielded;
 8007f44:	68bb      	ldr	r3, [r7, #8]
}
 8007f46:	4618      	mov	r0, r3
 8007f48:	3710      	adds	r7, #16
 8007f4a:	46bd      	mov	sp, r7
 8007f4c:	bd80      	pop	{r7, pc}
 8007f4e:	bf00      	nop
 8007f50:	20000f80 	.word	0x20000f80
 8007f54:	20000f58 	.word	0x20000f58
 8007f58:	20000f18 	.word	0x20000f18
 8007f5c:	20000f60 	.word	0x20000f60
 8007f60:	20000a88 	.word	0x20000a88
 8007f64:	20000a84 	.word	0x20000a84
 8007f68:	20000f6c 	.word	0x20000f6c
 8007f6c:	20000f68 	.word	0x20000f68
 8007f70:	e000ed04 	.word	0xe000ed04

08007f74 <xTaskGetTickCount>:
/*-----------------------------------------------------------*/

TickType_t xTaskGetTickCount( void )
{
 8007f74:	b480      	push	{r7}
 8007f76:	b083      	sub	sp, #12
 8007f78:	af00      	add	r7, sp, #0
TickType_t xTicks;

	/* Critical section required if running on a 16 bit processor. */
	portTICK_TYPE_ENTER_CRITICAL();
	{
		xTicks = xTickCount;
 8007f7a:	4b05      	ldr	r3, [pc, #20]	; (8007f90 <xTaskGetTickCount+0x1c>)
 8007f7c:	681b      	ldr	r3, [r3, #0]
 8007f7e:	607b      	str	r3, [r7, #4]
	}
	portTICK_TYPE_EXIT_CRITICAL();

	return xTicks;
 8007f80:	687b      	ldr	r3, [r7, #4]
}
 8007f82:	4618      	mov	r0, r3
 8007f84:	370c      	adds	r7, #12
 8007f86:	46bd      	mov	sp, r7
 8007f88:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007f8c:	4770      	bx	lr
 8007f8e:	bf00      	nop
 8007f90:	20000f5c 	.word	0x20000f5c

08007f94 <xTaskIncrementTick>:

#endif /* INCLUDE_xTaskAbortDelay */
/*----------------------------------------------------------*/

BaseType_t xTaskIncrementTick( void )
{
 8007f94:	b580      	push	{r7, lr}
 8007f96:	b086      	sub	sp, #24
 8007f98:	af00      	add	r7, sp, #0
TCB_t * pxTCB;
TickType_t xItemValue;
BaseType_t xSwitchRequired = pdFALSE;
 8007f9a:	2300      	movs	r3, #0
 8007f9c:	617b      	str	r3, [r7, #20]

	/* Called by the portable layer each time a tick interrupt occurs.
	Increments the tick then checks to see if the new tick value will cause any
	tasks to be unblocked. */
	traceTASK_INCREMENT_TICK( xTickCount );
	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8007f9e:	4b4f      	ldr	r3, [pc, #316]	; (80080dc <xTaskIncrementTick+0x148>)
 8007fa0:	681b      	ldr	r3, [r3, #0]
 8007fa2:	2b00      	cmp	r3, #0
 8007fa4:	f040 808f 	bne.w	80080c6 <xTaskIncrementTick+0x132>
	{
		/* Minor optimisation.  The tick count cannot change in this
		block. */
		const TickType_t xConstTickCount = xTickCount + ( TickType_t ) 1;
 8007fa8:	4b4d      	ldr	r3, [pc, #308]	; (80080e0 <xTaskIncrementTick+0x14c>)
 8007faa:	681b      	ldr	r3, [r3, #0]
 8007fac:	3301      	adds	r3, #1
 8007fae:	613b      	str	r3, [r7, #16]

		/* Increment the RTOS tick, switching the delayed and overflowed
		delayed lists if it wraps to 0. */
		xTickCount = xConstTickCount;
 8007fb0:	4a4b      	ldr	r2, [pc, #300]	; (80080e0 <xTaskIncrementTick+0x14c>)
 8007fb2:	693b      	ldr	r3, [r7, #16]
 8007fb4:	6013      	str	r3, [r2, #0]

		if( xConstTickCount == ( TickType_t ) 0U ) /*lint !e774 'if' does not always evaluate to false as it is looking for an overflow. */
 8007fb6:	693b      	ldr	r3, [r7, #16]
 8007fb8:	2b00      	cmp	r3, #0
 8007fba:	d120      	bne.n	8007ffe <xTaskIncrementTick+0x6a>
		{
			taskSWITCH_DELAYED_LISTS();
 8007fbc:	4b49      	ldr	r3, [pc, #292]	; (80080e4 <xTaskIncrementTick+0x150>)
 8007fbe:	681b      	ldr	r3, [r3, #0]
 8007fc0:	681b      	ldr	r3, [r3, #0]
 8007fc2:	2b00      	cmp	r3, #0
 8007fc4:	d00a      	beq.n	8007fdc <xTaskIncrementTick+0x48>
	__asm volatile
 8007fc6:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007fca:	f383 8811 	msr	BASEPRI, r3
 8007fce:	f3bf 8f6f 	isb	sy
 8007fd2:	f3bf 8f4f 	dsb	sy
 8007fd6:	603b      	str	r3, [r7, #0]
}
 8007fd8:	bf00      	nop
 8007fda:	e7fe      	b.n	8007fda <xTaskIncrementTick+0x46>
 8007fdc:	4b41      	ldr	r3, [pc, #260]	; (80080e4 <xTaskIncrementTick+0x150>)
 8007fde:	681b      	ldr	r3, [r3, #0]
 8007fe0:	60fb      	str	r3, [r7, #12]
 8007fe2:	4b41      	ldr	r3, [pc, #260]	; (80080e8 <xTaskIncrementTick+0x154>)
 8007fe4:	681b      	ldr	r3, [r3, #0]
 8007fe6:	4a3f      	ldr	r2, [pc, #252]	; (80080e4 <xTaskIncrementTick+0x150>)
 8007fe8:	6013      	str	r3, [r2, #0]
 8007fea:	4a3f      	ldr	r2, [pc, #252]	; (80080e8 <xTaskIncrementTick+0x154>)
 8007fec:	68fb      	ldr	r3, [r7, #12]
 8007fee:	6013      	str	r3, [r2, #0]
 8007ff0:	4b3e      	ldr	r3, [pc, #248]	; (80080ec <xTaskIncrementTick+0x158>)
 8007ff2:	681b      	ldr	r3, [r3, #0]
 8007ff4:	3301      	adds	r3, #1
 8007ff6:	4a3d      	ldr	r2, [pc, #244]	; (80080ec <xTaskIncrementTick+0x158>)
 8007ff8:	6013      	str	r3, [r2, #0]
 8007ffa:	f000 faf7 	bl	80085ec <prvResetNextTaskUnblockTime>

		/* See if this tick has made a timeout expire.  Tasks are stored in
		the	queue in the order of their wake time - meaning once one task
		has been found whose block time has not expired there is no need to
		look any further down the list. */
		if( xConstTickCount >= xNextTaskUnblockTime )
 8007ffe:	4b3c      	ldr	r3, [pc, #240]	; (80080f0 <xTaskIncrementTick+0x15c>)
 8008000:	681b      	ldr	r3, [r3, #0]
 8008002:	693a      	ldr	r2, [r7, #16]
 8008004:	429a      	cmp	r2, r3
 8008006:	d349      	bcc.n	800809c <xTaskIncrementTick+0x108>
		{
			for( ;; )
			{
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8008008:	4b36      	ldr	r3, [pc, #216]	; (80080e4 <xTaskIncrementTick+0x150>)
 800800a:	681b      	ldr	r3, [r3, #0]
 800800c:	681b      	ldr	r3, [r3, #0]
 800800e:	2b00      	cmp	r3, #0
 8008010:	d104      	bne.n	800801c <xTaskIncrementTick+0x88>
					/* The delayed list is empty.  Set xNextTaskUnblockTime
					to the maximum possible value so it is extremely
					unlikely that the
					if( xTickCount >= xNextTaskUnblockTime ) test will pass
					next time through. */
					xNextTaskUnblockTime = portMAX_DELAY; /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8008012:	4b37      	ldr	r3, [pc, #220]	; (80080f0 <xTaskIncrementTick+0x15c>)
 8008014:	f04f 32ff 	mov.w	r2, #4294967295
 8008018:	601a      	str	r2, [r3, #0]
					break;
 800801a:	e03f      	b.n	800809c <xTaskIncrementTick+0x108>
				{
					/* The delayed list is not empty, get the value of the
					item at the head of the delayed list.  This is the time
					at which the task at the head of the delayed list must
					be removed from the Blocked state. */
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800801c:	4b31      	ldr	r3, [pc, #196]	; (80080e4 <xTaskIncrementTick+0x150>)
 800801e:	681b      	ldr	r3, [r3, #0]
 8008020:	68db      	ldr	r3, [r3, #12]
 8008022:	68db      	ldr	r3, [r3, #12]
 8008024:	60bb      	str	r3, [r7, #8]
					xItemValue = listGET_LIST_ITEM_VALUE( &( pxTCB->xStateListItem ) );
 8008026:	68bb      	ldr	r3, [r7, #8]
 8008028:	685b      	ldr	r3, [r3, #4]
 800802a:	607b      	str	r3, [r7, #4]

					if( xConstTickCount < xItemValue )
 800802c:	693a      	ldr	r2, [r7, #16]
 800802e:	687b      	ldr	r3, [r7, #4]
 8008030:	429a      	cmp	r2, r3
 8008032:	d203      	bcs.n	800803c <xTaskIncrementTick+0xa8>
						/* It is not time to unblock this item yet, but the
						item value is the time at which the task at the head
						of the blocked list must be removed from the Blocked
						state -	so record the item value in
						xNextTaskUnblockTime. */
						xNextTaskUnblockTime = xItemValue;
 8008034:	4a2e      	ldr	r2, [pc, #184]	; (80080f0 <xTaskIncrementTick+0x15c>)
 8008036:	687b      	ldr	r3, [r7, #4]
 8008038:	6013      	str	r3, [r2, #0]
						break; /*lint !e9011 Code structure here is deedmed easier to understand with multiple breaks. */
 800803a:	e02f      	b.n	800809c <xTaskIncrementTick+0x108>
					{
						mtCOVERAGE_TEST_MARKER();
					}

					/* It is time to remove the item from the Blocked state. */
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 800803c:	68bb      	ldr	r3, [r7, #8]
 800803e:	3304      	adds	r3, #4
 8008040:	4618      	mov	r0, r3
 8008042:	f7fe ff07 	bl	8006e54 <uxListRemove>

					/* Is the task waiting on an event also?  If so remove
					it from the event list. */
					if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
 8008046:	68bb      	ldr	r3, [r7, #8]
 8008048:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800804a:	2b00      	cmp	r3, #0
 800804c:	d004      	beq.n	8008058 <xTaskIncrementTick+0xc4>
					{
						( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 800804e:	68bb      	ldr	r3, [r7, #8]
 8008050:	3318      	adds	r3, #24
 8008052:	4618      	mov	r0, r3
 8008054:	f7fe fefe 	bl	8006e54 <uxListRemove>
						mtCOVERAGE_TEST_MARKER();
					}

					/* Place the unblocked task into the appropriate ready
					list. */
					prvAddTaskToReadyList( pxTCB );
 8008058:	68bb      	ldr	r3, [r7, #8]
 800805a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800805c:	4b25      	ldr	r3, [pc, #148]	; (80080f4 <xTaskIncrementTick+0x160>)
 800805e:	681b      	ldr	r3, [r3, #0]
 8008060:	429a      	cmp	r2, r3
 8008062:	d903      	bls.n	800806c <xTaskIncrementTick+0xd8>
 8008064:	68bb      	ldr	r3, [r7, #8]
 8008066:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8008068:	4a22      	ldr	r2, [pc, #136]	; (80080f4 <xTaskIncrementTick+0x160>)
 800806a:	6013      	str	r3, [r2, #0]
 800806c:	68bb      	ldr	r3, [r7, #8]
 800806e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8008070:	4613      	mov	r3, r2
 8008072:	009b      	lsls	r3, r3, #2
 8008074:	4413      	add	r3, r2
 8008076:	009b      	lsls	r3, r3, #2
 8008078:	4a1f      	ldr	r2, [pc, #124]	; (80080f8 <xTaskIncrementTick+0x164>)
 800807a:	441a      	add	r2, r3
 800807c:	68bb      	ldr	r3, [r7, #8]
 800807e:	3304      	adds	r3, #4
 8008080:	4619      	mov	r1, r3
 8008082:	4610      	mov	r0, r2
 8008084:	f7fe fe89 	bl	8006d9a <vListInsertEnd>
					{
						/* Preemption is on, but a context switch should
						only be performed if the unblocked task has a
						priority that is equal to or higher than the
						currently executing task. */
						if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 8008088:	68bb      	ldr	r3, [r7, #8]
 800808a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800808c:	4b1b      	ldr	r3, [pc, #108]	; (80080fc <xTaskIncrementTick+0x168>)
 800808e:	681b      	ldr	r3, [r3, #0]
 8008090:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8008092:	429a      	cmp	r2, r3
 8008094:	d3b8      	bcc.n	8008008 <xTaskIncrementTick+0x74>
						{
							xSwitchRequired = pdTRUE;
 8008096:	2301      	movs	r3, #1
 8008098:	617b      	str	r3, [r7, #20]
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 800809a:	e7b5      	b.n	8008008 <xTaskIncrementTick+0x74>
		/* Tasks of equal priority to the currently running task will share
		processing time (time slice) if preemption is on, and the application
		writer has not explicitly turned time slicing off. */
		#if ( ( configUSE_PREEMPTION == 1 ) && ( configUSE_TIME_SLICING == 1 ) )
		{
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ pxCurrentTCB->uxPriority ] ) ) > ( UBaseType_t ) 1 )
 800809c:	4b17      	ldr	r3, [pc, #92]	; (80080fc <xTaskIncrementTick+0x168>)
 800809e:	681b      	ldr	r3, [r3, #0]
 80080a0:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80080a2:	4915      	ldr	r1, [pc, #84]	; (80080f8 <xTaskIncrementTick+0x164>)
 80080a4:	4613      	mov	r3, r2
 80080a6:	009b      	lsls	r3, r3, #2
 80080a8:	4413      	add	r3, r2
 80080aa:	009b      	lsls	r3, r3, #2
 80080ac:	440b      	add	r3, r1
 80080ae:	681b      	ldr	r3, [r3, #0]
 80080b0:	2b01      	cmp	r3, #1
 80080b2:	d901      	bls.n	80080b8 <xTaskIncrementTick+0x124>
			{
				xSwitchRequired = pdTRUE;
 80080b4:	2301      	movs	r3, #1
 80080b6:	617b      	str	r3, [r7, #20]
		}
		#endif /* configUSE_TICK_HOOK */

		#if ( configUSE_PREEMPTION == 1 )
		{
			if( xYieldPending != pdFALSE )
 80080b8:	4b11      	ldr	r3, [pc, #68]	; (8008100 <xTaskIncrementTick+0x16c>)
 80080ba:	681b      	ldr	r3, [r3, #0]
 80080bc:	2b00      	cmp	r3, #0
 80080be:	d007      	beq.n	80080d0 <xTaskIncrementTick+0x13c>
			{
				xSwitchRequired = pdTRUE;
 80080c0:	2301      	movs	r3, #1
 80080c2:	617b      	str	r3, [r7, #20]
 80080c4:	e004      	b.n	80080d0 <xTaskIncrementTick+0x13c>
		}
		#endif /* configUSE_PREEMPTION */
	}
	else
	{
		++xPendedTicks;
 80080c6:	4b0f      	ldr	r3, [pc, #60]	; (8008104 <xTaskIncrementTick+0x170>)
 80080c8:	681b      	ldr	r3, [r3, #0]
 80080ca:	3301      	adds	r3, #1
 80080cc:	4a0d      	ldr	r2, [pc, #52]	; (8008104 <xTaskIncrementTick+0x170>)
 80080ce:	6013      	str	r3, [r2, #0]
			vApplicationTickHook();
		}
		#endif
	}

	return xSwitchRequired;
 80080d0:	697b      	ldr	r3, [r7, #20]
}
 80080d2:	4618      	mov	r0, r3
 80080d4:	3718      	adds	r7, #24
 80080d6:	46bd      	mov	sp, r7
 80080d8:	bd80      	pop	{r7, pc}
 80080da:	bf00      	nop
 80080dc:	20000f80 	.word	0x20000f80
 80080e0:	20000f5c 	.word	0x20000f5c
 80080e4:	20000f10 	.word	0x20000f10
 80080e8:	20000f14 	.word	0x20000f14
 80080ec:	20000f70 	.word	0x20000f70
 80080f0:	20000f78 	.word	0x20000f78
 80080f4:	20000f60 	.word	0x20000f60
 80080f8:	20000a88 	.word	0x20000a88
 80080fc:	20000a84 	.word	0x20000a84
 8008100:	20000f6c 	.word	0x20000f6c
 8008104:	20000f68 	.word	0x20000f68

08008108 <vTaskSwitchContext>:

#endif /* configUSE_APPLICATION_TASK_TAG */
/*-----------------------------------------------------------*/

void vTaskSwitchContext( void )
{
 8008108:	b580      	push	{r7, lr}
 800810a:	b086      	sub	sp, #24
 800810c:	af00      	add	r7, sp, #0
	if( uxSchedulerSuspended != ( UBaseType_t ) pdFALSE )
 800810e:	4b3a      	ldr	r3, [pc, #232]	; (80081f8 <vTaskSwitchContext+0xf0>)
 8008110:	681b      	ldr	r3, [r3, #0]
 8008112:	2b00      	cmp	r3, #0
 8008114:	d003      	beq.n	800811e <vTaskSwitchContext+0x16>
	{
		/* The scheduler is currently suspended - do not allow a context
		switch. */
		xYieldPending = pdTRUE;
 8008116:	4b39      	ldr	r3, [pc, #228]	; (80081fc <vTaskSwitchContext+0xf4>)
 8008118:	2201      	movs	r2, #1
 800811a:	601a      	str	r2, [r3, #0]
			for additional information. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */
	}
}
 800811c:	e068      	b.n	80081f0 <vTaskSwitchContext+0xe8>
		xYieldPending = pdFALSE;
 800811e:	4b37      	ldr	r3, [pc, #220]	; (80081fc <vTaskSwitchContext+0xf4>)
 8008120:	2200      	movs	r2, #0
 8008122:	601a      	str	r2, [r3, #0]
		taskCHECK_FOR_STACK_OVERFLOW();
 8008124:	4b36      	ldr	r3, [pc, #216]	; (8008200 <vTaskSwitchContext+0xf8>)
 8008126:	681b      	ldr	r3, [r3, #0]
 8008128:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800812a:	613b      	str	r3, [r7, #16]
 800812c:	f04f 33a5 	mov.w	r3, #2779096485	; 0xa5a5a5a5
 8008130:	60fb      	str	r3, [r7, #12]
 8008132:	693b      	ldr	r3, [r7, #16]
 8008134:	681b      	ldr	r3, [r3, #0]
 8008136:	68fa      	ldr	r2, [r7, #12]
 8008138:	429a      	cmp	r2, r3
 800813a:	d111      	bne.n	8008160 <vTaskSwitchContext+0x58>
 800813c:	693b      	ldr	r3, [r7, #16]
 800813e:	3304      	adds	r3, #4
 8008140:	681b      	ldr	r3, [r3, #0]
 8008142:	68fa      	ldr	r2, [r7, #12]
 8008144:	429a      	cmp	r2, r3
 8008146:	d10b      	bne.n	8008160 <vTaskSwitchContext+0x58>
 8008148:	693b      	ldr	r3, [r7, #16]
 800814a:	3308      	adds	r3, #8
 800814c:	681b      	ldr	r3, [r3, #0]
 800814e:	68fa      	ldr	r2, [r7, #12]
 8008150:	429a      	cmp	r2, r3
 8008152:	d105      	bne.n	8008160 <vTaskSwitchContext+0x58>
 8008154:	693b      	ldr	r3, [r7, #16]
 8008156:	330c      	adds	r3, #12
 8008158:	681b      	ldr	r3, [r3, #0]
 800815a:	68fa      	ldr	r2, [r7, #12]
 800815c:	429a      	cmp	r2, r3
 800815e:	d008      	beq.n	8008172 <vTaskSwitchContext+0x6a>
 8008160:	4b27      	ldr	r3, [pc, #156]	; (8008200 <vTaskSwitchContext+0xf8>)
 8008162:	681a      	ldr	r2, [r3, #0]
 8008164:	4b26      	ldr	r3, [pc, #152]	; (8008200 <vTaskSwitchContext+0xf8>)
 8008166:	681b      	ldr	r3, [r3, #0]
 8008168:	3334      	adds	r3, #52	; 0x34
 800816a:	4619      	mov	r1, r3
 800816c:	4610      	mov	r0, r2
 800816e:	f7f8 fa18 	bl	80005a2 <vApplicationStackOverflowHook>
		taskSELECT_HIGHEST_PRIORITY_TASK(); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8008172:	4b24      	ldr	r3, [pc, #144]	; (8008204 <vTaskSwitchContext+0xfc>)
 8008174:	681b      	ldr	r3, [r3, #0]
 8008176:	617b      	str	r3, [r7, #20]
 8008178:	e010      	b.n	800819c <vTaskSwitchContext+0x94>
 800817a:	697b      	ldr	r3, [r7, #20]
 800817c:	2b00      	cmp	r3, #0
 800817e:	d10a      	bne.n	8008196 <vTaskSwitchContext+0x8e>
	__asm volatile
 8008180:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008184:	f383 8811 	msr	BASEPRI, r3
 8008188:	f3bf 8f6f 	isb	sy
 800818c:	f3bf 8f4f 	dsb	sy
 8008190:	607b      	str	r3, [r7, #4]
}
 8008192:	bf00      	nop
 8008194:	e7fe      	b.n	8008194 <vTaskSwitchContext+0x8c>
 8008196:	697b      	ldr	r3, [r7, #20]
 8008198:	3b01      	subs	r3, #1
 800819a:	617b      	str	r3, [r7, #20]
 800819c:	491a      	ldr	r1, [pc, #104]	; (8008208 <vTaskSwitchContext+0x100>)
 800819e:	697a      	ldr	r2, [r7, #20]
 80081a0:	4613      	mov	r3, r2
 80081a2:	009b      	lsls	r3, r3, #2
 80081a4:	4413      	add	r3, r2
 80081a6:	009b      	lsls	r3, r3, #2
 80081a8:	440b      	add	r3, r1
 80081aa:	681b      	ldr	r3, [r3, #0]
 80081ac:	2b00      	cmp	r3, #0
 80081ae:	d0e4      	beq.n	800817a <vTaskSwitchContext+0x72>
 80081b0:	697a      	ldr	r2, [r7, #20]
 80081b2:	4613      	mov	r3, r2
 80081b4:	009b      	lsls	r3, r3, #2
 80081b6:	4413      	add	r3, r2
 80081b8:	009b      	lsls	r3, r3, #2
 80081ba:	4a13      	ldr	r2, [pc, #76]	; (8008208 <vTaskSwitchContext+0x100>)
 80081bc:	4413      	add	r3, r2
 80081be:	60bb      	str	r3, [r7, #8]
 80081c0:	68bb      	ldr	r3, [r7, #8]
 80081c2:	685b      	ldr	r3, [r3, #4]
 80081c4:	685a      	ldr	r2, [r3, #4]
 80081c6:	68bb      	ldr	r3, [r7, #8]
 80081c8:	605a      	str	r2, [r3, #4]
 80081ca:	68bb      	ldr	r3, [r7, #8]
 80081cc:	685a      	ldr	r2, [r3, #4]
 80081ce:	68bb      	ldr	r3, [r7, #8]
 80081d0:	3308      	adds	r3, #8
 80081d2:	429a      	cmp	r2, r3
 80081d4:	d104      	bne.n	80081e0 <vTaskSwitchContext+0xd8>
 80081d6:	68bb      	ldr	r3, [r7, #8]
 80081d8:	685b      	ldr	r3, [r3, #4]
 80081da:	685a      	ldr	r2, [r3, #4]
 80081dc:	68bb      	ldr	r3, [r7, #8]
 80081de:	605a      	str	r2, [r3, #4]
 80081e0:	68bb      	ldr	r3, [r7, #8]
 80081e2:	685b      	ldr	r3, [r3, #4]
 80081e4:	68db      	ldr	r3, [r3, #12]
 80081e6:	4a06      	ldr	r2, [pc, #24]	; (8008200 <vTaskSwitchContext+0xf8>)
 80081e8:	6013      	str	r3, [r2, #0]
 80081ea:	4a06      	ldr	r2, [pc, #24]	; (8008204 <vTaskSwitchContext+0xfc>)
 80081ec:	697b      	ldr	r3, [r7, #20]
 80081ee:	6013      	str	r3, [r2, #0]
}
 80081f0:	bf00      	nop
 80081f2:	3718      	adds	r7, #24
 80081f4:	46bd      	mov	sp, r7
 80081f6:	bd80      	pop	{r7, pc}
 80081f8:	20000f80 	.word	0x20000f80
 80081fc:	20000f6c 	.word	0x20000f6c
 8008200:	20000a84 	.word	0x20000a84
 8008204:	20000f60 	.word	0x20000f60
 8008208:	20000a88 	.word	0x20000a88

0800820c <vTaskPlaceOnEventList>:
/*-----------------------------------------------------------*/

void vTaskPlaceOnEventList( List_t * const pxEventList, const TickType_t xTicksToWait )
{
 800820c:	b580      	push	{r7, lr}
 800820e:	b084      	sub	sp, #16
 8008210:	af00      	add	r7, sp, #0
 8008212:	6078      	str	r0, [r7, #4]
 8008214:	6039      	str	r1, [r7, #0]
	configASSERT( pxEventList );
 8008216:	687b      	ldr	r3, [r7, #4]
 8008218:	2b00      	cmp	r3, #0
 800821a:	d10a      	bne.n	8008232 <vTaskPlaceOnEventList+0x26>
	__asm volatile
 800821c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008220:	f383 8811 	msr	BASEPRI, r3
 8008224:	f3bf 8f6f 	isb	sy
 8008228:	f3bf 8f4f 	dsb	sy
 800822c:	60fb      	str	r3, [r7, #12]
}
 800822e:	bf00      	nop
 8008230:	e7fe      	b.n	8008230 <vTaskPlaceOnEventList+0x24>

	/* Place the event list item of the TCB in the appropriate event list.
	This is placed in the list in priority order so the highest priority task
	is the first to be woken by the event.  The queue that contains the event
	list is locked, preventing simultaneous access from interrupts. */
	vListInsert( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 8008232:	4b07      	ldr	r3, [pc, #28]	; (8008250 <vTaskPlaceOnEventList+0x44>)
 8008234:	681b      	ldr	r3, [r3, #0]
 8008236:	3318      	adds	r3, #24
 8008238:	4619      	mov	r1, r3
 800823a:	6878      	ldr	r0, [r7, #4]
 800823c:	f7fe fdd1 	bl	8006de2 <vListInsert>

	prvAddCurrentTaskToDelayedList( xTicksToWait, pdTRUE );
 8008240:	2101      	movs	r1, #1
 8008242:	6838      	ldr	r0, [r7, #0]
 8008244:	f000 fa7e 	bl	8008744 <prvAddCurrentTaskToDelayedList>
}
 8008248:	bf00      	nop
 800824a:	3710      	adds	r7, #16
 800824c:	46bd      	mov	sp, r7
 800824e:	bd80      	pop	{r7, pc}
 8008250:	20000a84 	.word	0x20000a84

08008254 <vTaskPlaceOnEventListRestricted>:
/*-----------------------------------------------------------*/

#if( configUSE_TIMERS == 1 )

	void vTaskPlaceOnEventListRestricted( List_t * const pxEventList, TickType_t xTicksToWait, const BaseType_t xWaitIndefinitely )
	{
 8008254:	b580      	push	{r7, lr}
 8008256:	b086      	sub	sp, #24
 8008258:	af00      	add	r7, sp, #0
 800825a:	60f8      	str	r0, [r7, #12]
 800825c:	60b9      	str	r1, [r7, #8]
 800825e:	607a      	str	r2, [r7, #4]
		configASSERT( pxEventList );
 8008260:	68fb      	ldr	r3, [r7, #12]
 8008262:	2b00      	cmp	r3, #0
 8008264:	d10a      	bne.n	800827c <vTaskPlaceOnEventListRestricted+0x28>
	__asm volatile
 8008266:	f04f 0350 	mov.w	r3, #80	; 0x50
 800826a:	f383 8811 	msr	BASEPRI, r3
 800826e:	f3bf 8f6f 	isb	sy
 8008272:	f3bf 8f4f 	dsb	sy
 8008276:	617b      	str	r3, [r7, #20]
}
 8008278:	bf00      	nop
 800827a:	e7fe      	b.n	800827a <vTaskPlaceOnEventListRestricted+0x26>

		/* Place the event list item of the TCB in the appropriate event list.
		In this case it is assume that this is the only task that is going to
		be waiting on this event list, so the faster vListInsertEnd() function
		can be used in place of vListInsert. */
		vListInsertEnd( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 800827c:	4b0a      	ldr	r3, [pc, #40]	; (80082a8 <vTaskPlaceOnEventListRestricted+0x54>)
 800827e:	681b      	ldr	r3, [r3, #0]
 8008280:	3318      	adds	r3, #24
 8008282:	4619      	mov	r1, r3
 8008284:	68f8      	ldr	r0, [r7, #12]
 8008286:	f7fe fd88 	bl	8006d9a <vListInsertEnd>

		/* If the task should block indefinitely then set the block time to a
		value that will be recognised as an indefinite delay inside the
		prvAddCurrentTaskToDelayedList() function. */
		if( xWaitIndefinitely != pdFALSE )
 800828a:	687b      	ldr	r3, [r7, #4]
 800828c:	2b00      	cmp	r3, #0
 800828e:	d002      	beq.n	8008296 <vTaskPlaceOnEventListRestricted+0x42>
		{
			xTicksToWait = portMAX_DELAY;
 8008290:	f04f 33ff 	mov.w	r3, #4294967295
 8008294:	60bb      	str	r3, [r7, #8]
		}

		traceTASK_DELAY_UNTIL( ( xTickCount + xTicksToWait ) );
		prvAddCurrentTaskToDelayedList( xTicksToWait, xWaitIndefinitely );
 8008296:	6879      	ldr	r1, [r7, #4]
 8008298:	68b8      	ldr	r0, [r7, #8]
 800829a:	f000 fa53 	bl	8008744 <prvAddCurrentTaskToDelayedList>
	}
 800829e:	bf00      	nop
 80082a0:	3718      	adds	r7, #24
 80082a2:	46bd      	mov	sp, r7
 80082a4:	bd80      	pop	{r7, pc}
 80082a6:	bf00      	nop
 80082a8:	20000a84 	.word	0x20000a84

080082ac <xTaskRemoveFromEventList>:

#endif /* configUSE_TIMERS */
/*-----------------------------------------------------------*/

BaseType_t xTaskRemoveFromEventList( const List_t * const pxEventList )
{
 80082ac:	b580      	push	{r7, lr}
 80082ae:	b086      	sub	sp, #24
 80082b0:	af00      	add	r7, sp, #0
 80082b2:	6078      	str	r0, [r7, #4]
	get called - the lock count on the queue will get modified instead.  This
	means exclusive access to the event list is guaranteed here.

	This function assumes that a check has already been made to ensure that
	pxEventList is not empty. */
	pxUnblockedTCB = listGET_OWNER_OF_HEAD_ENTRY( pxEventList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 80082b4:	687b      	ldr	r3, [r7, #4]
 80082b6:	68db      	ldr	r3, [r3, #12]
 80082b8:	68db      	ldr	r3, [r3, #12]
 80082ba:	613b      	str	r3, [r7, #16]
	configASSERT( pxUnblockedTCB );
 80082bc:	693b      	ldr	r3, [r7, #16]
 80082be:	2b00      	cmp	r3, #0
 80082c0:	d10a      	bne.n	80082d8 <xTaskRemoveFromEventList+0x2c>
	__asm volatile
 80082c2:	f04f 0350 	mov.w	r3, #80	; 0x50
 80082c6:	f383 8811 	msr	BASEPRI, r3
 80082ca:	f3bf 8f6f 	isb	sy
 80082ce:	f3bf 8f4f 	dsb	sy
 80082d2:	60fb      	str	r3, [r7, #12]
}
 80082d4:	bf00      	nop
 80082d6:	e7fe      	b.n	80082d6 <xTaskRemoveFromEventList+0x2a>
	( void ) uxListRemove( &( pxUnblockedTCB->xEventListItem ) );
 80082d8:	693b      	ldr	r3, [r7, #16]
 80082da:	3318      	adds	r3, #24
 80082dc:	4618      	mov	r0, r3
 80082de:	f7fe fdb9 	bl	8006e54 <uxListRemove>

	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 80082e2:	4b1e      	ldr	r3, [pc, #120]	; (800835c <xTaskRemoveFromEventList+0xb0>)
 80082e4:	681b      	ldr	r3, [r3, #0]
 80082e6:	2b00      	cmp	r3, #0
 80082e8:	d11d      	bne.n	8008326 <xTaskRemoveFromEventList+0x7a>
	{
		( void ) uxListRemove( &( pxUnblockedTCB->xStateListItem ) );
 80082ea:	693b      	ldr	r3, [r7, #16]
 80082ec:	3304      	adds	r3, #4
 80082ee:	4618      	mov	r0, r3
 80082f0:	f7fe fdb0 	bl	8006e54 <uxListRemove>
		prvAddTaskToReadyList( pxUnblockedTCB );
 80082f4:	693b      	ldr	r3, [r7, #16]
 80082f6:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80082f8:	4b19      	ldr	r3, [pc, #100]	; (8008360 <xTaskRemoveFromEventList+0xb4>)
 80082fa:	681b      	ldr	r3, [r3, #0]
 80082fc:	429a      	cmp	r2, r3
 80082fe:	d903      	bls.n	8008308 <xTaskRemoveFromEventList+0x5c>
 8008300:	693b      	ldr	r3, [r7, #16]
 8008302:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8008304:	4a16      	ldr	r2, [pc, #88]	; (8008360 <xTaskRemoveFromEventList+0xb4>)
 8008306:	6013      	str	r3, [r2, #0]
 8008308:	693b      	ldr	r3, [r7, #16]
 800830a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800830c:	4613      	mov	r3, r2
 800830e:	009b      	lsls	r3, r3, #2
 8008310:	4413      	add	r3, r2
 8008312:	009b      	lsls	r3, r3, #2
 8008314:	4a13      	ldr	r2, [pc, #76]	; (8008364 <xTaskRemoveFromEventList+0xb8>)
 8008316:	441a      	add	r2, r3
 8008318:	693b      	ldr	r3, [r7, #16]
 800831a:	3304      	adds	r3, #4
 800831c:	4619      	mov	r1, r3
 800831e:	4610      	mov	r0, r2
 8008320:	f7fe fd3b 	bl	8006d9a <vListInsertEnd>
 8008324:	e005      	b.n	8008332 <xTaskRemoveFromEventList+0x86>
	}
	else
	{
		/* The delayed and ready lists cannot be accessed, so hold this task
		pending until the scheduler is resumed. */
		vListInsertEnd( &( xPendingReadyList ), &( pxUnblockedTCB->xEventListItem ) );
 8008326:	693b      	ldr	r3, [r7, #16]
 8008328:	3318      	adds	r3, #24
 800832a:	4619      	mov	r1, r3
 800832c:	480e      	ldr	r0, [pc, #56]	; (8008368 <xTaskRemoveFromEventList+0xbc>)
 800832e:	f7fe fd34 	bl	8006d9a <vListInsertEnd>
	}

	if( pxUnblockedTCB->uxPriority > pxCurrentTCB->uxPriority )
 8008332:	693b      	ldr	r3, [r7, #16]
 8008334:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8008336:	4b0d      	ldr	r3, [pc, #52]	; (800836c <xTaskRemoveFromEventList+0xc0>)
 8008338:	681b      	ldr	r3, [r3, #0]
 800833a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800833c:	429a      	cmp	r2, r3
 800833e:	d905      	bls.n	800834c <xTaskRemoveFromEventList+0xa0>
	{
		/* Return true if the task removed from the event list has a higher
		priority than the calling task.  This allows the calling task to know if
		it should force a context switch now. */
		xReturn = pdTRUE;
 8008340:	2301      	movs	r3, #1
 8008342:	617b      	str	r3, [r7, #20]

		/* Mark that a yield is pending in case the user is not using the
		"xHigherPriorityTaskWoken" parameter to an ISR safe FreeRTOS function. */
		xYieldPending = pdTRUE;
 8008344:	4b0a      	ldr	r3, [pc, #40]	; (8008370 <xTaskRemoveFromEventList+0xc4>)
 8008346:	2201      	movs	r2, #1
 8008348:	601a      	str	r2, [r3, #0]
 800834a:	e001      	b.n	8008350 <xTaskRemoveFromEventList+0xa4>
	}
	else
	{
		xReturn = pdFALSE;
 800834c:	2300      	movs	r3, #0
 800834e:	617b      	str	r3, [r7, #20]
	}

	return xReturn;
 8008350:	697b      	ldr	r3, [r7, #20]
}
 8008352:	4618      	mov	r0, r3
 8008354:	3718      	adds	r7, #24
 8008356:	46bd      	mov	sp, r7
 8008358:	bd80      	pop	{r7, pc}
 800835a:	bf00      	nop
 800835c:	20000f80 	.word	0x20000f80
 8008360:	20000f60 	.word	0x20000f60
 8008364:	20000a88 	.word	0x20000a88
 8008368:	20000f18 	.word	0x20000f18
 800836c:	20000a84 	.word	0x20000a84
 8008370:	20000f6c 	.word	0x20000f6c

08008374 <vTaskInternalSetTimeOutState>:
	taskEXIT_CRITICAL();
}
/*-----------------------------------------------------------*/

void vTaskInternalSetTimeOutState( TimeOut_t * const pxTimeOut )
{
 8008374:	b480      	push	{r7}
 8008376:	b083      	sub	sp, #12
 8008378:	af00      	add	r7, sp, #0
 800837a:	6078      	str	r0, [r7, #4]
	/* For internal use only as it does not use a critical section. */
	pxTimeOut->xOverflowCount = xNumOfOverflows;
 800837c:	4b06      	ldr	r3, [pc, #24]	; (8008398 <vTaskInternalSetTimeOutState+0x24>)
 800837e:	681a      	ldr	r2, [r3, #0]
 8008380:	687b      	ldr	r3, [r7, #4]
 8008382:	601a      	str	r2, [r3, #0]
	pxTimeOut->xTimeOnEntering = xTickCount;
 8008384:	4b05      	ldr	r3, [pc, #20]	; (800839c <vTaskInternalSetTimeOutState+0x28>)
 8008386:	681a      	ldr	r2, [r3, #0]
 8008388:	687b      	ldr	r3, [r7, #4]
 800838a:	605a      	str	r2, [r3, #4]
}
 800838c:	bf00      	nop
 800838e:	370c      	adds	r7, #12
 8008390:	46bd      	mov	sp, r7
 8008392:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008396:	4770      	bx	lr
 8008398:	20000f70 	.word	0x20000f70
 800839c:	20000f5c 	.word	0x20000f5c

080083a0 <xTaskCheckForTimeOut>:
/*-----------------------------------------------------------*/

BaseType_t xTaskCheckForTimeOut( TimeOut_t * const pxTimeOut, TickType_t * const pxTicksToWait )
{
 80083a0:	b580      	push	{r7, lr}
 80083a2:	b088      	sub	sp, #32
 80083a4:	af00      	add	r7, sp, #0
 80083a6:	6078      	str	r0, [r7, #4]
 80083a8:	6039      	str	r1, [r7, #0]
BaseType_t xReturn;

	configASSERT( pxTimeOut );
 80083aa:	687b      	ldr	r3, [r7, #4]
 80083ac:	2b00      	cmp	r3, #0
 80083ae:	d10a      	bne.n	80083c6 <xTaskCheckForTimeOut+0x26>
	__asm volatile
 80083b0:	f04f 0350 	mov.w	r3, #80	; 0x50
 80083b4:	f383 8811 	msr	BASEPRI, r3
 80083b8:	f3bf 8f6f 	isb	sy
 80083bc:	f3bf 8f4f 	dsb	sy
 80083c0:	613b      	str	r3, [r7, #16]
}
 80083c2:	bf00      	nop
 80083c4:	e7fe      	b.n	80083c4 <xTaskCheckForTimeOut+0x24>
	configASSERT( pxTicksToWait );
 80083c6:	683b      	ldr	r3, [r7, #0]
 80083c8:	2b00      	cmp	r3, #0
 80083ca:	d10a      	bne.n	80083e2 <xTaskCheckForTimeOut+0x42>
	__asm volatile
 80083cc:	f04f 0350 	mov.w	r3, #80	; 0x50
 80083d0:	f383 8811 	msr	BASEPRI, r3
 80083d4:	f3bf 8f6f 	isb	sy
 80083d8:	f3bf 8f4f 	dsb	sy
 80083dc:	60fb      	str	r3, [r7, #12]
}
 80083de:	bf00      	nop
 80083e0:	e7fe      	b.n	80083e0 <xTaskCheckForTimeOut+0x40>

	taskENTER_CRITICAL();
 80083e2:	f000 fe7f 	bl	80090e4 <vPortEnterCritical>
	{
		/* Minor optimisation.  The tick count cannot change in this block. */
		const TickType_t xConstTickCount = xTickCount;
 80083e6:	4b1d      	ldr	r3, [pc, #116]	; (800845c <xTaskCheckForTimeOut+0xbc>)
 80083e8:	681b      	ldr	r3, [r3, #0]
 80083ea:	61bb      	str	r3, [r7, #24]
		const TickType_t xElapsedTime = xConstTickCount - pxTimeOut->xTimeOnEntering;
 80083ec:	687b      	ldr	r3, [r7, #4]
 80083ee:	685b      	ldr	r3, [r3, #4]
 80083f0:	69ba      	ldr	r2, [r7, #24]
 80083f2:	1ad3      	subs	r3, r2, r3
 80083f4:	617b      	str	r3, [r7, #20]
			}
			else
		#endif

		#if ( INCLUDE_vTaskSuspend == 1 )
			if( *pxTicksToWait == portMAX_DELAY )
 80083f6:	683b      	ldr	r3, [r7, #0]
 80083f8:	681b      	ldr	r3, [r3, #0]
 80083fa:	f1b3 3fff 	cmp.w	r3, #4294967295
 80083fe:	d102      	bne.n	8008406 <xTaskCheckForTimeOut+0x66>
			{
				/* If INCLUDE_vTaskSuspend is set to 1 and the block time
				specified is the maximum block time then the task should block
				indefinitely, and therefore never time out. */
				xReturn = pdFALSE;
 8008400:	2300      	movs	r3, #0
 8008402:	61fb      	str	r3, [r7, #28]
 8008404:	e023      	b.n	800844e <xTaskCheckForTimeOut+0xae>
			}
			else
		#endif

		if( ( xNumOfOverflows != pxTimeOut->xOverflowCount ) && ( xConstTickCount >= pxTimeOut->xTimeOnEntering ) ) /*lint !e525 Indentation preferred as is to make code within pre-processor directives clearer. */
 8008406:	687b      	ldr	r3, [r7, #4]
 8008408:	681a      	ldr	r2, [r3, #0]
 800840a:	4b15      	ldr	r3, [pc, #84]	; (8008460 <xTaskCheckForTimeOut+0xc0>)
 800840c:	681b      	ldr	r3, [r3, #0]
 800840e:	429a      	cmp	r2, r3
 8008410:	d007      	beq.n	8008422 <xTaskCheckForTimeOut+0x82>
 8008412:	687b      	ldr	r3, [r7, #4]
 8008414:	685b      	ldr	r3, [r3, #4]
 8008416:	69ba      	ldr	r2, [r7, #24]
 8008418:	429a      	cmp	r2, r3
 800841a:	d302      	bcc.n	8008422 <xTaskCheckForTimeOut+0x82>
			/* The tick count is greater than the time at which
			vTaskSetTimeout() was called, but has also overflowed since
			vTaskSetTimeOut() was called.  It must have wrapped all the way
			around and gone past again. This passed since vTaskSetTimeout()
			was called. */
			xReturn = pdTRUE;
 800841c:	2301      	movs	r3, #1
 800841e:	61fb      	str	r3, [r7, #28]
 8008420:	e015      	b.n	800844e <xTaskCheckForTimeOut+0xae>
		}
		else if( xElapsedTime < *pxTicksToWait ) /*lint !e961 Explicit casting is only redundant with some compilers, whereas others require it to prevent integer conversion errors. */
 8008422:	683b      	ldr	r3, [r7, #0]
 8008424:	681b      	ldr	r3, [r3, #0]
 8008426:	697a      	ldr	r2, [r7, #20]
 8008428:	429a      	cmp	r2, r3
 800842a:	d20b      	bcs.n	8008444 <xTaskCheckForTimeOut+0xa4>
		{
			/* Not a genuine timeout. Adjust parameters for time remaining. */
			*pxTicksToWait -= xElapsedTime;
 800842c:	683b      	ldr	r3, [r7, #0]
 800842e:	681a      	ldr	r2, [r3, #0]
 8008430:	697b      	ldr	r3, [r7, #20]
 8008432:	1ad2      	subs	r2, r2, r3
 8008434:	683b      	ldr	r3, [r7, #0]
 8008436:	601a      	str	r2, [r3, #0]
			vTaskInternalSetTimeOutState( pxTimeOut );
 8008438:	6878      	ldr	r0, [r7, #4]
 800843a:	f7ff ff9b 	bl	8008374 <vTaskInternalSetTimeOutState>
			xReturn = pdFALSE;
 800843e:	2300      	movs	r3, #0
 8008440:	61fb      	str	r3, [r7, #28]
 8008442:	e004      	b.n	800844e <xTaskCheckForTimeOut+0xae>
		}
		else
		{
			*pxTicksToWait = 0;
 8008444:	683b      	ldr	r3, [r7, #0]
 8008446:	2200      	movs	r2, #0
 8008448:	601a      	str	r2, [r3, #0]
			xReturn = pdTRUE;
 800844a:	2301      	movs	r3, #1
 800844c:	61fb      	str	r3, [r7, #28]
		}
	}
	taskEXIT_CRITICAL();
 800844e:	f000 fe79 	bl	8009144 <vPortExitCritical>

	return xReturn;
 8008452:	69fb      	ldr	r3, [r7, #28]
}
 8008454:	4618      	mov	r0, r3
 8008456:	3720      	adds	r7, #32
 8008458:	46bd      	mov	sp, r7
 800845a:	bd80      	pop	{r7, pc}
 800845c:	20000f5c 	.word	0x20000f5c
 8008460:	20000f70 	.word	0x20000f70

08008464 <vTaskMissedYield>:
/*-----------------------------------------------------------*/

void vTaskMissedYield( void )
{
 8008464:	b480      	push	{r7}
 8008466:	af00      	add	r7, sp, #0
	xYieldPending = pdTRUE;
 8008468:	4b03      	ldr	r3, [pc, #12]	; (8008478 <vTaskMissedYield+0x14>)
 800846a:	2201      	movs	r2, #1
 800846c:	601a      	str	r2, [r3, #0]
}
 800846e:	bf00      	nop
 8008470:	46bd      	mov	sp, r7
 8008472:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008476:	4770      	bx	lr
 8008478:	20000f6c 	.word	0x20000f6c

0800847c <prvIdleTask>:
 *
 * void prvIdleTask( void *pvParameters );
 *
 */
static portTASK_FUNCTION( prvIdleTask, pvParameters )
{
 800847c:	b580      	push	{r7, lr}
 800847e:	b082      	sub	sp, #8
 8008480:	af00      	add	r7, sp, #0
 8008482:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* See if any tasks have deleted themselves - if so then the idle task
		is responsible for freeing the deleted task's TCB and stack. */
		prvCheckTasksWaitingTermination();
 8008484:	f000 f854 	bl	8008530 <prvCheckTasksWaitingTermination>

			A critical region is not required here as we are just reading from
			the list, and an occasional incorrect value will not matter.  If
			the ready list at the idle priority contains more than one task
			then a task other than the idle task is ready to execute. */
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ tskIDLE_PRIORITY ] ) ) > ( UBaseType_t ) 1 )
 8008488:	4b07      	ldr	r3, [pc, #28]	; (80084a8 <prvIdleTask+0x2c>)
 800848a:	681b      	ldr	r3, [r3, #0]
 800848c:	2b01      	cmp	r3, #1
 800848e:	d907      	bls.n	80084a0 <prvIdleTask+0x24>
			{
				taskYIELD();
 8008490:	4b06      	ldr	r3, [pc, #24]	; (80084ac <prvIdleTask+0x30>)
 8008492:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8008496:	601a      	str	r2, [r3, #0]
 8008498:	f3bf 8f4f 	dsb	sy
 800849c:	f3bf 8f6f 	isb	sy
			/* Call the user defined function from within the idle task.  This
			allows the application designer to add background functionality
			without the overhead of a separate task.
			NOTE: vApplicationIdleHook() MUST NOT, UNDER ANY CIRCUMSTANCES,
			CALL A FUNCTION THAT MIGHT BLOCK. */
			vApplicationIdleHook();
 80084a0:	f7f8 f878 	bl	8000594 <vApplicationIdleHook>
		prvCheckTasksWaitingTermination();
 80084a4:	e7ee      	b.n	8008484 <prvIdleTask+0x8>
 80084a6:	bf00      	nop
 80084a8:	20000a88 	.word	0x20000a88
 80084ac:	e000ed04 	.word	0xe000ed04

080084b0 <prvInitialiseTaskLists>:

#endif /* portUSING_MPU_WRAPPERS */
/*-----------------------------------------------------------*/

static void prvInitialiseTaskLists( void )
{
 80084b0:	b580      	push	{r7, lr}
 80084b2:	b082      	sub	sp, #8
 80084b4:	af00      	add	r7, sp, #0
UBaseType_t uxPriority;

	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 80084b6:	2300      	movs	r3, #0
 80084b8:	607b      	str	r3, [r7, #4]
 80084ba:	e00c      	b.n	80084d6 <prvInitialiseTaskLists+0x26>
	{
		vListInitialise( &( pxReadyTasksLists[ uxPriority ] ) );
 80084bc:	687a      	ldr	r2, [r7, #4]
 80084be:	4613      	mov	r3, r2
 80084c0:	009b      	lsls	r3, r3, #2
 80084c2:	4413      	add	r3, r2
 80084c4:	009b      	lsls	r3, r3, #2
 80084c6:	4a12      	ldr	r2, [pc, #72]	; (8008510 <prvInitialiseTaskLists+0x60>)
 80084c8:	4413      	add	r3, r2
 80084ca:	4618      	mov	r0, r3
 80084cc:	f7fe fc38 	bl	8006d40 <vListInitialise>
	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 80084d0:	687b      	ldr	r3, [r7, #4]
 80084d2:	3301      	adds	r3, #1
 80084d4:	607b      	str	r3, [r7, #4]
 80084d6:	687b      	ldr	r3, [r7, #4]
 80084d8:	2b37      	cmp	r3, #55	; 0x37
 80084da:	d9ef      	bls.n	80084bc <prvInitialiseTaskLists+0xc>
	}

	vListInitialise( &xDelayedTaskList1 );
 80084dc:	480d      	ldr	r0, [pc, #52]	; (8008514 <prvInitialiseTaskLists+0x64>)
 80084de:	f7fe fc2f 	bl	8006d40 <vListInitialise>
	vListInitialise( &xDelayedTaskList2 );
 80084e2:	480d      	ldr	r0, [pc, #52]	; (8008518 <prvInitialiseTaskLists+0x68>)
 80084e4:	f7fe fc2c 	bl	8006d40 <vListInitialise>
	vListInitialise( &xPendingReadyList );
 80084e8:	480c      	ldr	r0, [pc, #48]	; (800851c <prvInitialiseTaskLists+0x6c>)
 80084ea:	f7fe fc29 	bl	8006d40 <vListInitialise>

	#if ( INCLUDE_vTaskDelete == 1 )
	{
		vListInitialise( &xTasksWaitingTermination );
 80084ee:	480c      	ldr	r0, [pc, #48]	; (8008520 <prvInitialiseTaskLists+0x70>)
 80084f0:	f7fe fc26 	bl	8006d40 <vListInitialise>
	}
	#endif /* INCLUDE_vTaskDelete */

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		vListInitialise( &xSuspendedTaskList );
 80084f4:	480b      	ldr	r0, [pc, #44]	; (8008524 <prvInitialiseTaskLists+0x74>)
 80084f6:	f7fe fc23 	bl	8006d40 <vListInitialise>
	}
	#endif /* INCLUDE_vTaskSuspend */

	/* Start with pxDelayedTaskList using list1 and the pxOverflowDelayedTaskList
	using list2. */
	pxDelayedTaskList = &xDelayedTaskList1;
 80084fa:	4b0b      	ldr	r3, [pc, #44]	; (8008528 <prvInitialiseTaskLists+0x78>)
 80084fc:	4a05      	ldr	r2, [pc, #20]	; (8008514 <prvInitialiseTaskLists+0x64>)
 80084fe:	601a      	str	r2, [r3, #0]
	pxOverflowDelayedTaskList = &xDelayedTaskList2;
 8008500:	4b0a      	ldr	r3, [pc, #40]	; (800852c <prvInitialiseTaskLists+0x7c>)
 8008502:	4a05      	ldr	r2, [pc, #20]	; (8008518 <prvInitialiseTaskLists+0x68>)
 8008504:	601a      	str	r2, [r3, #0]
}
 8008506:	bf00      	nop
 8008508:	3708      	adds	r7, #8
 800850a:	46bd      	mov	sp, r7
 800850c:	bd80      	pop	{r7, pc}
 800850e:	bf00      	nop
 8008510:	20000a88 	.word	0x20000a88
 8008514:	20000ee8 	.word	0x20000ee8
 8008518:	20000efc 	.word	0x20000efc
 800851c:	20000f18 	.word	0x20000f18
 8008520:	20000f2c 	.word	0x20000f2c
 8008524:	20000f44 	.word	0x20000f44
 8008528:	20000f10 	.word	0x20000f10
 800852c:	20000f14 	.word	0x20000f14

08008530 <prvCheckTasksWaitingTermination>:
/*-----------------------------------------------------------*/

static void prvCheckTasksWaitingTermination( void )
{
 8008530:	b580      	push	{r7, lr}
 8008532:	b082      	sub	sp, #8
 8008534:	af00      	add	r7, sp, #0
	{
		TCB_t *pxTCB;

		/* uxDeletedTasksWaitingCleanUp is used to prevent taskENTER_CRITICAL()
		being called too often in the idle task. */
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 8008536:	e019      	b.n	800856c <prvCheckTasksWaitingTermination+0x3c>
		{
			taskENTER_CRITICAL();
 8008538:	f000 fdd4 	bl	80090e4 <vPortEnterCritical>
			{
				pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xTasksWaitingTermination ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800853c:	4b10      	ldr	r3, [pc, #64]	; (8008580 <prvCheckTasksWaitingTermination+0x50>)
 800853e:	68db      	ldr	r3, [r3, #12]
 8008540:	68db      	ldr	r3, [r3, #12]
 8008542:	607b      	str	r3, [r7, #4]
				( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8008544:	687b      	ldr	r3, [r7, #4]
 8008546:	3304      	adds	r3, #4
 8008548:	4618      	mov	r0, r3
 800854a:	f7fe fc83 	bl	8006e54 <uxListRemove>
				--uxCurrentNumberOfTasks;
 800854e:	4b0d      	ldr	r3, [pc, #52]	; (8008584 <prvCheckTasksWaitingTermination+0x54>)
 8008550:	681b      	ldr	r3, [r3, #0]
 8008552:	3b01      	subs	r3, #1
 8008554:	4a0b      	ldr	r2, [pc, #44]	; (8008584 <prvCheckTasksWaitingTermination+0x54>)
 8008556:	6013      	str	r3, [r2, #0]
				--uxDeletedTasksWaitingCleanUp;
 8008558:	4b0b      	ldr	r3, [pc, #44]	; (8008588 <prvCheckTasksWaitingTermination+0x58>)
 800855a:	681b      	ldr	r3, [r3, #0]
 800855c:	3b01      	subs	r3, #1
 800855e:	4a0a      	ldr	r2, [pc, #40]	; (8008588 <prvCheckTasksWaitingTermination+0x58>)
 8008560:	6013      	str	r3, [r2, #0]
			}
			taskEXIT_CRITICAL();
 8008562:	f000 fdef 	bl	8009144 <vPortExitCritical>

			prvDeleteTCB( pxTCB );
 8008566:	6878      	ldr	r0, [r7, #4]
 8008568:	f000 f810 	bl	800858c <prvDeleteTCB>
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 800856c:	4b06      	ldr	r3, [pc, #24]	; (8008588 <prvCheckTasksWaitingTermination+0x58>)
 800856e:	681b      	ldr	r3, [r3, #0]
 8008570:	2b00      	cmp	r3, #0
 8008572:	d1e1      	bne.n	8008538 <prvCheckTasksWaitingTermination+0x8>
		}
	}
	#endif /* INCLUDE_vTaskDelete */
}
 8008574:	bf00      	nop
 8008576:	bf00      	nop
 8008578:	3708      	adds	r7, #8
 800857a:	46bd      	mov	sp, r7
 800857c:	bd80      	pop	{r7, pc}
 800857e:	bf00      	nop
 8008580:	20000f2c 	.word	0x20000f2c
 8008584:	20000f58 	.word	0x20000f58
 8008588:	20000f40 	.word	0x20000f40

0800858c <prvDeleteTCB>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelete == 1 )

	static void prvDeleteTCB( TCB_t *pxTCB )
	{
 800858c:	b580      	push	{r7, lr}
 800858e:	b084      	sub	sp, #16
 8008590:	af00      	add	r7, sp, #0
 8008592:	6078      	str	r0, [r7, #4]
		#elif( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 !e9029 Macro has been consolidated for readability reasons. */
		{
			/* The task could have been allocated statically or dynamically, so
			check what was statically allocated before trying to free the
			memory. */
			if( pxTCB->ucStaticallyAllocated == tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB )
 8008594:	687b      	ldr	r3, [r7, #4]
 8008596:	f893 305d 	ldrb.w	r3, [r3, #93]	; 0x5d
 800859a:	2b00      	cmp	r3, #0
 800859c:	d108      	bne.n	80085b0 <prvDeleteTCB+0x24>
			{
				/* Both the stack and TCB were allocated dynamically, so both
				must be freed. */
				vPortFree( pxTCB->pxStack );
 800859e:	687b      	ldr	r3, [r7, #4]
 80085a0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80085a2:	4618      	mov	r0, r3
 80085a4:	f000 ff90 	bl	80094c8 <vPortFree>
				vPortFree( pxTCB );
 80085a8:	6878      	ldr	r0, [r7, #4]
 80085aa:	f000 ff8d 	bl	80094c8 <vPortFree>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
	}
 80085ae:	e018      	b.n	80085e2 <prvDeleteTCB+0x56>
			else if( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_ONLY )
 80085b0:	687b      	ldr	r3, [r7, #4]
 80085b2:	f893 305d 	ldrb.w	r3, [r3, #93]	; 0x5d
 80085b6:	2b01      	cmp	r3, #1
 80085b8:	d103      	bne.n	80085c2 <prvDeleteTCB+0x36>
				vPortFree( pxTCB );
 80085ba:	6878      	ldr	r0, [r7, #4]
 80085bc:	f000 ff84 	bl	80094c8 <vPortFree>
	}
 80085c0:	e00f      	b.n	80085e2 <prvDeleteTCB+0x56>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
 80085c2:	687b      	ldr	r3, [r7, #4]
 80085c4:	f893 305d 	ldrb.w	r3, [r3, #93]	; 0x5d
 80085c8:	2b02      	cmp	r3, #2
 80085ca:	d00a      	beq.n	80085e2 <prvDeleteTCB+0x56>
	__asm volatile
 80085cc:	f04f 0350 	mov.w	r3, #80	; 0x50
 80085d0:	f383 8811 	msr	BASEPRI, r3
 80085d4:	f3bf 8f6f 	isb	sy
 80085d8:	f3bf 8f4f 	dsb	sy
 80085dc:	60fb      	str	r3, [r7, #12]
}
 80085de:	bf00      	nop
 80085e0:	e7fe      	b.n	80085e0 <prvDeleteTCB+0x54>
	}
 80085e2:	bf00      	nop
 80085e4:	3710      	adds	r7, #16
 80085e6:	46bd      	mov	sp, r7
 80085e8:	bd80      	pop	{r7, pc}
	...

080085ec <prvResetNextTaskUnblockTime>:

#endif /* INCLUDE_vTaskDelete */
/*-----------------------------------------------------------*/

static void prvResetNextTaskUnblockTime( void )
{
 80085ec:	b480      	push	{r7}
 80085ee:	b083      	sub	sp, #12
 80085f0:	af00      	add	r7, sp, #0
TCB_t *pxTCB;

	if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 80085f2:	4b0c      	ldr	r3, [pc, #48]	; (8008624 <prvResetNextTaskUnblockTime+0x38>)
 80085f4:	681b      	ldr	r3, [r3, #0]
 80085f6:	681b      	ldr	r3, [r3, #0]
 80085f8:	2b00      	cmp	r3, #0
 80085fa:	d104      	bne.n	8008606 <prvResetNextTaskUnblockTime+0x1a>
	{
		/* The new current delayed list is empty.  Set xNextTaskUnblockTime to
		the maximum possible value so it is	extremely unlikely that the
		if( xTickCount >= xNextTaskUnblockTime ) test will pass until
		there is an item in the delayed list. */
		xNextTaskUnblockTime = portMAX_DELAY;
 80085fc:	4b0a      	ldr	r3, [pc, #40]	; (8008628 <prvResetNextTaskUnblockTime+0x3c>)
 80085fe:	f04f 32ff 	mov.w	r2, #4294967295
 8008602:	601a      	str	r2, [r3, #0]
		which the task at the head of the delayed list should be removed
		from the Blocked state. */
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
	}
}
 8008604:	e008      	b.n	8008618 <prvResetNextTaskUnblockTime+0x2c>
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8008606:	4b07      	ldr	r3, [pc, #28]	; (8008624 <prvResetNextTaskUnblockTime+0x38>)
 8008608:	681b      	ldr	r3, [r3, #0]
 800860a:	68db      	ldr	r3, [r3, #12]
 800860c:	68db      	ldr	r3, [r3, #12]
 800860e:	607b      	str	r3, [r7, #4]
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
 8008610:	687b      	ldr	r3, [r7, #4]
 8008612:	685b      	ldr	r3, [r3, #4]
 8008614:	4a04      	ldr	r2, [pc, #16]	; (8008628 <prvResetNextTaskUnblockTime+0x3c>)
 8008616:	6013      	str	r3, [r2, #0]
}
 8008618:	bf00      	nop
 800861a:	370c      	adds	r7, #12
 800861c:	46bd      	mov	sp, r7
 800861e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008622:	4770      	bx	lr
 8008624:	20000f10 	.word	0x20000f10
 8008628:	20000f78 	.word	0x20000f78

0800862c <xTaskGetSchedulerState>:
/*-----------------------------------------------------------*/

#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )

	BaseType_t xTaskGetSchedulerState( void )
	{
 800862c:	b480      	push	{r7}
 800862e:	b083      	sub	sp, #12
 8008630:	af00      	add	r7, sp, #0
	BaseType_t xReturn;

		if( xSchedulerRunning == pdFALSE )
 8008632:	4b0b      	ldr	r3, [pc, #44]	; (8008660 <xTaskGetSchedulerState+0x34>)
 8008634:	681b      	ldr	r3, [r3, #0]
 8008636:	2b00      	cmp	r3, #0
 8008638:	d102      	bne.n	8008640 <xTaskGetSchedulerState+0x14>
		{
			xReturn = taskSCHEDULER_NOT_STARTED;
 800863a:	2301      	movs	r3, #1
 800863c:	607b      	str	r3, [r7, #4]
 800863e:	e008      	b.n	8008652 <xTaskGetSchedulerState+0x26>
		}
		else
		{
			if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8008640:	4b08      	ldr	r3, [pc, #32]	; (8008664 <xTaskGetSchedulerState+0x38>)
 8008642:	681b      	ldr	r3, [r3, #0]
 8008644:	2b00      	cmp	r3, #0
 8008646:	d102      	bne.n	800864e <xTaskGetSchedulerState+0x22>
			{
				xReturn = taskSCHEDULER_RUNNING;
 8008648:	2302      	movs	r3, #2
 800864a:	607b      	str	r3, [r7, #4]
 800864c:	e001      	b.n	8008652 <xTaskGetSchedulerState+0x26>
			}
			else
			{
				xReturn = taskSCHEDULER_SUSPENDED;
 800864e:	2300      	movs	r3, #0
 8008650:	607b      	str	r3, [r7, #4]
			}
		}

		return xReturn;
 8008652:	687b      	ldr	r3, [r7, #4]
	}
 8008654:	4618      	mov	r0, r3
 8008656:	370c      	adds	r7, #12
 8008658:	46bd      	mov	sp, r7
 800865a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800865e:	4770      	bx	lr
 8008660:	20000f64 	.word	0x20000f64
 8008664:	20000f80 	.word	0x20000f80

08008668 <xTaskPriorityDisinherit>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	BaseType_t xTaskPriorityDisinherit( TaskHandle_t const pxMutexHolder )
	{
 8008668:	b580      	push	{r7, lr}
 800866a:	b086      	sub	sp, #24
 800866c:	af00      	add	r7, sp, #0
 800866e:	6078      	str	r0, [r7, #4]
	TCB_t * const pxTCB = pxMutexHolder;
 8008670:	687b      	ldr	r3, [r7, #4]
 8008672:	613b      	str	r3, [r7, #16]
	BaseType_t xReturn = pdFALSE;
 8008674:	2300      	movs	r3, #0
 8008676:	617b      	str	r3, [r7, #20]

		if( pxMutexHolder != NULL )
 8008678:	687b      	ldr	r3, [r7, #4]
 800867a:	2b00      	cmp	r3, #0
 800867c:	d056      	beq.n	800872c <xTaskPriorityDisinherit+0xc4>
		{
			/* A task can only have an inherited priority if it holds the mutex.
			If the mutex is held by a task then it cannot be given from an
			interrupt, and if a mutex is given by the holding task then it must
			be the running state task. */
			configASSERT( pxTCB == pxCurrentTCB );
 800867e:	4b2e      	ldr	r3, [pc, #184]	; (8008738 <xTaskPriorityDisinherit+0xd0>)
 8008680:	681b      	ldr	r3, [r3, #0]
 8008682:	693a      	ldr	r2, [r7, #16]
 8008684:	429a      	cmp	r2, r3
 8008686:	d00a      	beq.n	800869e <xTaskPriorityDisinherit+0x36>
	__asm volatile
 8008688:	f04f 0350 	mov.w	r3, #80	; 0x50
 800868c:	f383 8811 	msr	BASEPRI, r3
 8008690:	f3bf 8f6f 	isb	sy
 8008694:	f3bf 8f4f 	dsb	sy
 8008698:	60fb      	str	r3, [r7, #12]
}
 800869a:	bf00      	nop
 800869c:	e7fe      	b.n	800869c <xTaskPriorityDisinherit+0x34>
			configASSERT( pxTCB->uxMutexesHeld );
 800869e:	693b      	ldr	r3, [r7, #16]
 80086a0:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80086a2:	2b00      	cmp	r3, #0
 80086a4:	d10a      	bne.n	80086bc <xTaskPriorityDisinherit+0x54>
	__asm volatile
 80086a6:	f04f 0350 	mov.w	r3, #80	; 0x50
 80086aa:	f383 8811 	msr	BASEPRI, r3
 80086ae:	f3bf 8f6f 	isb	sy
 80086b2:	f3bf 8f4f 	dsb	sy
 80086b6:	60bb      	str	r3, [r7, #8]
}
 80086b8:	bf00      	nop
 80086ba:	e7fe      	b.n	80086ba <xTaskPriorityDisinherit+0x52>
			( pxTCB->uxMutexesHeld )--;
 80086bc:	693b      	ldr	r3, [r7, #16]
 80086be:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80086c0:	1e5a      	subs	r2, r3, #1
 80086c2:	693b      	ldr	r3, [r7, #16]
 80086c4:	651a      	str	r2, [r3, #80]	; 0x50

			/* Has the holder of the mutex inherited the priority of another
			task? */
			if( pxTCB->uxPriority != pxTCB->uxBasePriority )
 80086c6:	693b      	ldr	r3, [r7, #16]
 80086c8:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80086ca:	693b      	ldr	r3, [r7, #16]
 80086cc:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80086ce:	429a      	cmp	r2, r3
 80086d0:	d02c      	beq.n	800872c <xTaskPriorityDisinherit+0xc4>
			{
				/* Only disinherit if no other mutexes are held. */
				if( pxTCB->uxMutexesHeld == ( UBaseType_t ) 0 )
 80086d2:	693b      	ldr	r3, [r7, #16]
 80086d4:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80086d6:	2b00      	cmp	r3, #0
 80086d8:	d128      	bne.n	800872c <xTaskPriorityDisinherit+0xc4>
					/* A task can only have an inherited priority if it holds
					the mutex.  If the mutex is held by a task then it cannot be
					given from an interrupt, and if a mutex is given by the
					holding task then it must be the running state task.  Remove
					the holding task from the ready/delayed list. */
					if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 80086da:	693b      	ldr	r3, [r7, #16]
 80086dc:	3304      	adds	r3, #4
 80086de:	4618      	mov	r0, r3
 80086e0:	f7fe fbb8 	bl	8006e54 <uxListRemove>
					}

					/* Disinherit the priority before adding the task into the
					new	ready list. */
					traceTASK_PRIORITY_DISINHERIT( pxTCB, pxTCB->uxBasePriority );
					pxTCB->uxPriority = pxTCB->uxBasePriority;
 80086e4:	693b      	ldr	r3, [r7, #16]
 80086e6:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 80086e8:	693b      	ldr	r3, [r7, #16]
 80086ea:	62da      	str	r2, [r3, #44]	; 0x2c

					/* Reset the event list item value.  It cannot be in use for
					any other purpose if this task is running, and it must be
					running to give back the mutex. */
					listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxTCB->uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 80086ec:	693b      	ldr	r3, [r7, #16]
 80086ee:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80086f0:	f1c3 0238 	rsb	r2, r3, #56	; 0x38
 80086f4:	693b      	ldr	r3, [r7, #16]
 80086f6:	619a      	str	r2, [r3, #24]
					prvAddTaskToReadyList( pxTCB );
 80086f8:	693b      	ldr	r3, [r7, #16]
 80086fa:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80086fc:	4b0f      	ldr	r3, [pc, #60]	; (800873c <xTaskPriorityDisinherit+0xd4>)
 80086fe:	681b      	ldr	r3, [r3, #0]
 8008700:	429a      	cmp	r2, r3
 8008702:	d903      	bls.n	800870c <xTaskPriorityDisinherit+0xa4>
 8008704:	693b      	ldr	r3, [r7, #16]
 8008706:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8008708:	4a0c      	ldr	r2, [pc, #48]	; (800873c <xTaskPriorityDisinherit+0xd4>)
 800870a:	6013      	str	r3, [r2, #0]
 800870c:	693b      	ldr	r3, [r7, #16]
 800870e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8008710:	4613      	mov	r3, r2
 8008712:	009b      	lsls	r3, r3, #2
 8008714:	4413      	add	r3, r2
 8008716:	009b      	lsls	r3, r3, #2
 8008718:	4a09      	ldr	r2, [pc, #36]	; (8008740 <xTaskPriorityDisinherit+0xd8>)
 800871a:	441a      	add	r2, r3
 800871c:	693b      	ldr	r3, [r7, #16]
 800871e:	3304      	adds	r3, #4
 8008720:	4619      	mov	r1, r3
 8008722:	4610      	mov	r0, r2
 8008724:	f7fe fb39 	bl	8006d9a <vListInsertEnd>
					in an order different to that in which they were taken.
					If a context switch did not occur when the first mutex was
					returned, even if a task was waiting on it, then a context
					switch should occur when the last mutex is returned whether
					a task is waiting on it or not. */
					xReturn = pdTRUE;
 8008728:	2301      	movs	r3, #1
 800872a:	617b      	str	r3, [r7, #20]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		return xReturn;
 800872c:	697b      	ldr	r3, [r7, #20]
	}
 800872e:	4618      	mov	r0, r3
 8008730:	3718      	adds	r7, #24
 8008732:	46bd      	mov	sp, r7
 8008734:	bd80      	pop	{r7, pc}
 8008736:	bf00      	nop
 8008738:	20000a84 	.word	0x20000a84
 800873c:	20000f60 	.word	0x20000f60
 8008740:	20000a88 	.word	0x20000a88

08008744 <prvAddCurrentTaskToDelayedList>:

#endif
/*-----------------------------------------------------------*/

static void prvAddCurrentTaskToDelayedList( TickType_t xTicksToWait, const BaseType_t xCanBlockIndefinitely )
{
 8008744:	b580      	push	{r7, lr}
 8008746:	b084      	sub	sp, #16
 8008748:	af00      	add	r7, sp, #0
 800874a:	6078      	str	r0, [r7, #4]
 800874c:	6039      	str	r1, [r7, #0]
TickType_t xTimeToWake;
const TickType_t xConstTickCount = xTickCount;
 800874e:	4b21      	ldr	r3, [pc, #132]	; (80087d4 <prvAddCurrentTaskToDelayedList+0x90>)
 8008750:	681b      	ldr	r3, [r3, #0]
 8008752:	60fb      	str	r3, [r7, #12]
	}
	#endif

	/* Remove the task from the ready list before adding it to the blocked list
	as the same list item is used for both lists. */
	if( uxListRemove( &( pxCurrentTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 8008754:	4b20      	ldr	r3, [pc, #128]	; (80087d8 <prvAddCurrentTaskToDelayedList+0x94>)
 8008756:	681b      	ldr	r3, [r3, #0]
 8008758:	3304      	adds	r3, #4
 800875a:	4618      	mov	r0, r3
 800875c:	f7fe fb7a 	bl	8006e54 <uxListRemove>
		mtCOVERAGE_TEST_MARKER();
	}

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		if( ( xTicksToWait == portMAX_DELAY ) && ( xCanBlockIndefinitely != pdFALSE ) )
 8008760:	687b      	ldr	r3, [r7, #4]
 8008762:	f1b3 3fff 	cmp.w	r3, #4294967295
 8008766:	d10a      	bne.n	800877e <prvAddCurrentTaskToDelayedList+0x3a>
 8008768:	683b      	ldr	r3, [r7, #0]
 800876a:	2b00      	cmp	r3, #0
 800876c:	d007      	beq.n	800877e <prvAddCurrentTaskToDelayedList+0x3a>
		{
			/* Add the task to the suspended task list instead of a delayed task
			list to ensure it is not woken by a timing event.  It will block
			indefinitely. */
			vListInsertEnd( &xSuspendedTaskList, &( pxCurrentTCB->xStateListItem ) );
 800876e:	4b1a      	ldr	r3, [pc, #104]	; (80087d8 <prvAddCurrentTaskToDelayedList+0x94>)
 8008770:	681b      	ldr	r3, [r3, #0]
 8008772:	3304      	adds	r3, #4
 8008774:	4619      	mov	r1, r3
 8008776:	4819      	ldr	r0, [pc, #100]	; (80087dc <prvAddCurrentTaskToDelayedList+0x98>)
 8008778:	f7fe fb0f 	bl	8006d9a <vListInsertEnd>

		/* Avoid compiler warning when INCLUDE_vTaskSuspend is not 1. */
		( void ) xCanBlockIndefinitely;
	}
	#endif /* INCLUDE_vTaskSuspend */
}
 800877c:	e026      	b.n	80087cc <prvAddCurrentTaskToDelayedList+0x88>
			xTimeToWake = xConstTickCount + xTicksToWait;
 800877e:	68fa      	ldr	r2, [r7, #12]
 8008780:	687b      	ldr	r3, [r7, #4]
 8008782:	4413      	add	r3, r2
 8008784:	60bb      	str	r3, [r7, #8]
			listSET_LIST_ITEM_VALUE( &( pxCurrentTCB->xStateListItem ), xTimeToWake );
 8008786:	4b14      	ldr	r3, [pc, #80]	; (80087d8 <prvAddCurrentTaskToDelayedList+0x94>)
 8008788:	681b      	ldr	r3, [r3, #0]
 800878a:	68ba      	ldr	r2, [r7, #8]
 800878c:	605a      	str	r2, [r3, #4]
			if( xTimeToWake < xConstTickCount )
 800878e:	68ba      	ldr	r2, [r7, #8]
 8008790:	68fb      	ldr	r3, [r7, #12]
 8008792:	429a      	cmp	r2, r3
 8008794:	d209      	bcs.n	80087aa <prvAddCurrentTaskToDelayedList+0x66>
				vListInsert( pxOverflowDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8008796:	4b12      	ldr	r3, [pc, #72]	; (80087e0 <prvAddCurrentTaskToDelayedList+0x9c>)
 8008798:	681a      	ldr	r2, [r3, #0]
 800879a:	4b0f      	ldr	r3, [pc, #60]	; (80087d8 <prvAddCurrentTaskToDelayedList+0x94>)
 800879c:	681b      	ldr	r3, [r3, #0]
 800879e:	3304      	adds	r3, #4
 80087a0:	4619      	mov	r1, r3
 80087a2:	4610      	mov	r0, r2
 80087a4:	f7fe fb1d 	bl	8006de2 <vListInsert>
}
 80087a8:	e010      	b.n	80087cc <prvAddCurrentTaskToDelayedList+0x88>
				vListInsert( pxDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 80087aa:	4b0e      	ldr	r3, [pc, #56]	; (80087e4 <prvAddCurrentTaskToDelayedList+0xa0>)
 80087ac:	681a      	ldr	r2, [r3, #0]
 80087ae:	4b0a      	ldr	r3, [pc, #40]	; (80087d8 <prvAddCurrentTaskToDelayedList+0x94>)
 80087b0:	681b      	ldr	r3, [r3, #0]
 80087b2:	3304      	adds	r3, #4
 80087b4:	4619      	mov	r1, r3
 80087b6:	4610      	mov	r0, r2
 80087b8:	f7fe fb13 	bl	8006de2 <vListInsert>
				if( xTimeToWake < xNextTaskUnblockTime )
 80087bc:	4b0a      	ldr	r3, [pc, #40]	; (80087e8 <prvAddCurrentTaskToDelayedList+0xa4>)
 80087be:	681b      	ldr	r3, [r3, #0]
 80087c0:	68ba      	ldr	r2, [r7, #8]
 80087c2:	429a      	cmp	r2, r3
 80087c4:	d202      	bcs.n	80087cc <prvAddCurrentTaskToDelayedList+0x88>
					xNextTaskUnblockTime = xTimeToWake;
 80087c6:	4a08      	ldr	r2, [pc, #32]	; (80087e8 <prvAddCurrentTaskToDelayedList+0xa4>)
 80087c8:	68bb      	ldr	r3, [r7, #8]
 80087ca:	6013      	str	r3, [r2, #0]
}
 80087cc:	bf00      	nop
 80087ce:	3710      	adds	r7, #16
 80087d0:	46bd      	mov	sp, r7
 80087d2:	bd80      	pop	{r7, pc}
 80087d4:	20000f5c 	.word	0x20000f5c
 80087d8:	20000a84 	.word	0x20000a84
 80087dc:	20000f44 	.word	0x20000f44
 80087e0:	20000f14 	.word	0x20000f14
 80087e4:	20000f10 	.word	0x20000f10
 80087e8:	20000f78 	.word	0x20000f78

080087ec <xTimerCreateTimerTask>:
									TimerCallbackFunction_t pxCallbackFunction,
									Timer_t *pxNewTimer ) PRIVILEGED_FUNCTION;
/*-----------------------------------------------------------*/

BaseType_t xTimerCreateTimerTask( void )
{
 80087ec:	b580      	push	{r7, lr}
 80087ee:	b08a      	sub	sp, #40	; 0x28
 80087f0:	af04      	add	r7, sp, #16
BaseType_t xReturn = pdFAIL;
 80087f2:	2300      	movs	r3, #0
 80087f4:	617b      	str	r3, [r7, #20]

	/* This function is called when the scheduler is started if
	configUSE_TIMERS is set to 1.  Check that the infrastructure used by the
	timer service task has been created/initialised.  If timers have already
	been created then the initialisation will already have been performed. */
	prvCheckForValidListAndQueue();
 80087f6:	f000 fb07 	bl	8008e08 <prvCheckForValidListAndQueue>

	if( xTimerQueue != NULL )
 80087fa:	4b1c      	ldr	r3, [pc, #112]	; (800886c <xTimerCreateTimerTask+0x80>)
 80087fc:	681b      	ldr	r3, [r3, #0]
 80087fe:	2b00      	cmp	r3, #0
 8008800:	d021      	beq.n	8008846 <xTimerCreateTimerTask+0x5a>
	{
		#if( configSUPPORT_STATIC_ALLOCATION == 1 )
		{
			StaticTask_t *pxTimerTaskTCBBuffer = NULL;
 8008802:	2300      	movs	r3, #0
 8008804:	60fb      	str	r3, [r7, #12]
			StackType_t *pxTimerTaskStackBuffer = NULL;
 8008806:	2300      	movs	r3, #0
 8008808:	60bb      	str	r3, [r7, #8]
			uint32_t ulTimerTaskStackSize;

			vApplicationGetTimerTaskMemory( &pxTimerTaskTCBBuffer, &pxTimerTaskStackBuffer, &ulTimerTaskStackSize );
 800880a:	1d3a      	adds	r2, r7, #4
 800880c:	f107 0108 	add.w	r1, r7, #8
 8008810:	f107 030c 	add.w	r3, r7, #12
 8008814:	4618      	mov	r0, r3
 8008816:	f7fe fa79 	bl	8006d0c <vApplicationGetTimerTaskMemory>
			xTimerTaskHandle = xTaskCreateStatic(	prvTimerTask,
 800881a:	6879      	ldr	r1, [r7, #4]
 800881c:	68bb      	ldr	r3, [r7, #8]
 800881e:	68fa      	ldr	r2, [r7, #12]
 8008820:	9202      	str	r2, [sp, #8]
 8008822:	9301      	str	r3, [sp, #4]
 8008824:	2302      	movs	r3, #2
 8008826:	9300      	str	r3, [sp, #0]
 8008828:	2300      	movs	r3, #0
 800882a:	460a      	mov	r2, r1
 800882c:	4910      	ldr	r1, [pc, #64]	; (8008870 <xTimerCreateTimerTask+0x84>)
 800882e:	4811      	ldr	r0, [pc, #68]	; (8008874 <xTimerCreateTimerTask+0x88>)
 8008830:	f7ff f826 	bl	8007880 <xTaskCreateStatic>
 8008834:	4603      	mov	r3, r0
 8008836:	4a10      	ldr	r2, [pc, #64]	; (8008878 <xTimerCreateTimerTask+0x8c>)
 8008838:	6013      	str	r3, [r2, #0]
													NULL,
													( ( UBaseType_t ) configTIMER_TASK_PRIORITY ) | portPRIVILEGE_BIT,
													pxTimerTaskStackBuffer,
													pxTimerTaskTCBBuffer );

			if( xTimerTaskHandle != NULL )
 800883a:	4b0f      	ldr	r3, [pc, #60]	; (8008878 <xTimerCreateTimerTask+0x8c>)
 800883c:	681b      	ldr	r3, [r3, #0]
 800883e:	2b00      	cmp	r3, #0
 8008840:	d001      	beq.n	8008846 <xTimerCreateTimerTask+0x5a>
			{
				xReturn = pdPASS;
 8008842:	2301      	movs	r3, #1
 8008844:	617b      	str	r3, [r7, #20]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	configASSERT( xReturn );
 8008846:	697b      	ldr	r3, [r7, #20]
 8008848:	2b00      	cmp	r3, #0
 800884a:	d10a      	bne.n	8008862 <xTimerCreateTimerTask+0x76>
	__asm volatile
 800884c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008850:	f383 8811 	msr	BASEPRI, r3
 8008854:	f3bf 8f6f 	isb	sy
 8008858:	f3bf 8f4f 	dsb	sy
 800885c:	613b      	str	r3, [r7, #16]
}
 800885e:	bf00      	nop
 8008860:	e7fe      	b.n	8008860 <xTimerCreateTimerTask+0x74>
	return xReturn;
 8008862:	697b      	ldr	r3, [r7, #20]
}
 8008864:	4618      	mov	r0, r3
 8008866:	3718      	adds	r7, #24
 8008868:	46bd      	mov	sp, r7
 800886a:	bd80      	pop	{r7, pc}
 800886c:	20000fb4 	.word	0x20000fb4
 8008870:	0800aeb0 	.word	0x0800aeb0
 8008874:	080089b1 	.word	0x080089b1
 8008878:	20000fb8 	.word	0x20000fb8

0800887c <xTimerGenericCommand>:
	}
}
/*-----------------------------------------------------------*/

BaseType_t xTimerGenericCommand( TimerHandle_t xTimer, const BaseType_t xCommandID, const TickType_t xOptionalValue, BaseType_t * const pxHigherPriorityTaskWoken, const TickType_t xTicksToWait )
{
 800887c:	b580      	push	{r7, lr}
 800887e:	b08a      	sub	sp, #40	; 0x28
 8008880:	af00      	add	r7, sp, #0
 8008882:	60f8      	str	r0, [r7, #12]
 8008884:	60b9      	str	r1, [r7, #8]
 8008886:	607a      	str	r2, [r7, #4]
 8008888:	603b      	str	r3, [r7, #0]
BaseType_t xReturn = pdFAIL;
 800888a:	2300      	movs	r3, #0
 800888c:	627b      	str	r3, [r7, #36]	; 0x24
DaemonTaskMessage_t xMessage;

	configASSERT( xTimer );
 800888e:	68fb      	ldr	r3, [r7, #12]
 8008890:	2b00      	cmp	r3, #0
 8008892:	d10a      	bne.n	80088aa <xTimerGenericCommand+0x2e>
	__asm volatile
 8008894:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008898:	f383 8811 	msr	BASEPRI, r3
 800889c:	f3bf 8f6f 	isb	sy
 80088a0:	f3bf 8f4f 	dsb	sy
 80088a4:	623b      	str	r3, [r7, #32]
}
 80088a6:	bf00      	nop
 80088a8:	e7fe      	b.n	80088a8 <xTimerGenericCommand+0x2c>

	/* Send a message to the timer service task to perform a particular action
	on a particular timer definition. */
	if( xTimerQueue != NULL )
 80088aa:	4b1a      	ldr	r3, [pc, #104]	; (8008914 <xTimerGenericCommand+0x98>)
 80088ac:	681b      	ldr	r3, [r3, #0]
 80088ae:	2b00      	cmp	r3, #0
 80088b0:	d02a      	beq.n	8008908 <xTimerGenericCommand+0x8c>
	{
		/* Send a command to the timer service task to start the xTimer timer. */
		xMessage.xMessageID = xCommandID;
 80088b2:	68bb      	ldr	r3, [r7, #8]
 80088b4:	613b      	str	r3, [r7, #16]
		xMessage.u.xTimerParameters.xMessageValue = xOptionalValue;
 80088b6:	687b      	ldr	r3, [r7, #4]
 80088b8:	617b      	str	r3, [r7, #20]
		xMessage.u.xTimerParameters.pxTimer = xTimer;
 80088ba:	68fb      	ldr	r3, [r7, #12]
 80088bc:	61bb      	str	r3, [r7, #24]

		if( xCommandID < tmrFIRST_FROM_ISR_COMMAND )
 80088be:	68bb      	ldr	r3, [r7, #8]
 80088c0:	2b05      	cmp	r3, #5
 80088c2:	dc18      	bgt.n	80088f6 <xTimerGenericCommand+0x7a>
		{
			if( xTaskGetSchedulerState() == taskSCHEDULER_RUNNING )
 80088c4:	f7ff feb2 	bl	800862c <xTaskGetSchedulerState>
 80088c8:	4603      	mov	r3, r0
 80088ca:	2b02      	cmp	r3, #2
 80088cc:	d109      	bne.n	80088e2 <xTimerGenericCommand+0x66>
			{
				xReturn = xQueueSendToBack( xTimerQueue, &xMessage, xTicksToWait );
 80088ce:	4b11      	ldr	r3, [pc, #68]	; (8008914 <xTimerGenericCommand+0x98>)
 80088d0:	6818      	ldr	r0, [r3, #0]
 80088d2:	f107 0110 	add.w	r1, r7, #16
 80088d6:	2300      	movs	r3, #0
 80088d8:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80088da:	f7fe fbe9 	bl	80070b0 <xQueueGenericSend>
 80088de:	6278      	str	r0, [r7, #36]	; 0x24
 80088e0:	e012      	b.n	8008908 <xTimerGenericCommand+0x8c>
			}
			else
			{
				xReturn = xQueueSendToBack( xTimerQueue, &xMessage, tmrNO_DELAY );
 80088e2:	4b0c      	ldr	r3, [pc, #48]	; (8008914 <xTimerGenericCommand+0x98>)
 80088e4:	6818      	ldr	r0, [r3, #0]
 80088e6:	f107 0110 	add.w	r1, r7, #16
 80088ea:	2300      	movs	r3, #0
 80088ec:	2200      	movs	r2, #0
 80088ee:	f7fe fbdf 	bl	80070b0 <xQueueGenericSend>
 80088f2:	6278      	str	r0, [r7, #36]	; 0x24
 80088f4:	e008      	b.n	8008908 <xTimerGenericCommand+0x8c>
			}
		}
		else
		{
			xReturn = xQueueSendToBackFromISR( xTimerQueue, &xMessage, pxHigherPriorityTaskWoken );
 80088f6:	4b07      	ldr	r3, [pc, #28]	; (8008914 <xTimerGenericCommand+0x98>)
 80088f8:	6818      	ldr	r0, [r3, #0]
 80088fa:	f107 0110 	add.w	r1, r7, #16
 80088fe:	2300      	movs	r3, #0
 8008900:	683a      	ldr	r2, [r7, #0]
 8008902:	f7fe fcd3 	bl	80072ac <xQueueGenericSendFromISR>
 8008906:	6278      	str	r0, [r7, #36]	; 0x24
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	return xReturn;
 8008908:	6a7b      	ldr	r3, [r7, #36]	; 0x24
}
 800890a:	4618      	mov	r0, r3
 800890c:	3728      	adds	r7, #40	; 0x28
 800890e:	46bd      	mov	sp, r7
 8008910:	bd80      	pop	{r7, pc}
 8008912:	bf00      	nop
 8008914:	20000fb4 	.word	0x20000fb4

08008918 <prvProcessExpiredTimer>:
	return pxTimer->pcTimerName;
}
/*-----------------------------------------------------------*/

static void prvProcessExpiredTimer( const TickType_t xNextExpireTime, const TickType_t xTimeNow )
{
 8008918:	b580      	push	{r7, lr}
 800891a:	b088      	sub	sp, #32
 800891c:	af02      	add	r7, sp, #8
 800891e:	6078      	str	r0, [r7, #4]
 8008920:	6039      	str	r1, [r7, #0]
BaseType_t xResult;
Timer_t * const pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList ); /*lint !e9087 !e9079 void * is used as this macro is used with tasks and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8008922:	4b22      	ldr	r3, [pc, #136]	; (80089ac <prvProcessExpiredTimer+0x94>)
 8008924:	681b      	ldr	r3, [r3, #0]
 8008926:	68db      	ldr	r3, [r3, #12]
 8008928:	68db      	ldr	r3, [r3, #12]
 800892a:	617b      	str	r3, [r7, #20]

	/* Remove the timer from the list of active timers.  A check has already
	been performed to ensure the list is not empty. */
	( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 800892c:	697b      	ldr	r3, [r7, #20]
 800892e:	3304      	adds	r3, #4
 8008930:	4618      	mov	r0, r3
 8008932:	f7fe fa8f 	bl	8006e54 <uxListRemove>
	traceTIMER_EXPIRED( pxTimer );

	/* If the timer is an auto-reload timer then calculate the next
	expiry time and re-insert the timer in the list of active timers. */
	if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 8008936:	697b      	ldr	r3, [r7, #20]
 8008938:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 800893c:	f003 0304 	and.w	r3, r3, #4
 8008940:	2b00      	cmp	r3, #0
 8008942:	d022      	beq.n	800898a <prvProcessExpiredTimer+0x72>
	{
		/* The timer is inserted into a list using a time relative to anything
		other than the current time.  It will therefore be inserted into the
		correct list relative to the time this task thinks it is now. */
		if( prvInsertTimerInActiveList( pxTimer, ( xNextExpireTime + pxTimer->xTimerPeriodInTicks ), xTimeNow, xNextExpireTime ) != pdFALSE )
 8008944:	697b      	ldr	r3, [r7, #20]
 8008946:	699a      	ldr	r2, [r3, #24]
 8008948:	687b      	ldr	r3, [r7, #4]
 800894a:	18d1      	adds	r1, r2, r3
 800894c:	687b      	ldr	r3, [r7, #4]
 800894e:	683a      	ldr	r2, [r7, #0]
 8008950:	6978      	ldr	r0, [r7, #20]
 8008952:	f000 f8d1 	bl	8008af8 <prvInsertTimerInActiveList>
 8008956:	4603      	mov	r3, r0
 8008958:	2b00      	cmp	r3, #0
 800895a:	d01f      	beq.n	800899c <prvProcessExpiredTimer+0x84>
		{
			/* The timer expired before it was added to the active timer
			list.  Reload it now.  */
			xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
 800895c:	2300      	movs	r3, #0
 800895e:	9300      	str	r3, [sp, #0]
 8008960:	2300      	movs	r3, #0
 8008962:	687a      	ldr	r2, [r7, #4]
 8008964:	2100      	movs	r1, #0
 8008966:	6978      	ldr	r0, [r7, #20]
 8008968:	f7ff ff88 	bl	800887c <xTimerGenericCommand>
 800896c:	6138      	str	r0, [r7, #16]
			configASSERT( xResult );
 800896e:	693b      	ldr	r3, [r7, #16]
 8008970:	2b00      	cmp	r3, #0
 8008972:	d113      	bne.n	800899c <prvProcessExpiredTimer+0x84>
	__asm volatile
 8008974:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008978:	f383 8811 	msr	BASEPRI, r3
 800897c:	f3bf 8f6f 	isb	sy
 8008980:	f3bf 8f4f 	dsb	sy
 8008984:	60fb      	str	r3, [r7, #12]
}
 8008986:	bf00      	nop
 8008988:	e7fe      	b.n	8008988 <prvProcessExpiredTimer+0x70>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	else
	{
		pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 800898a:	697b      	ldr	r3, [r7, #20]
 800898c:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8008990:	f023 0301 	bic.w	r3, r3, #1
 8008994:	b2da      	uxtb	r2, r3
 8008996:	697b      	ldr	r3, [r7, #20]
 8008998:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
		mtCOVERAGE_TEST_MARKER();
	}

	/* Call the timer callback. */
	pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 800899c:	697b      	ldr	r3, [r7, #20]
 800899e:	6a1b      	ldr	r3, [r3, #32]
 80089a0:	6978      	ldr	r0, [r7, #20]
 80089a2:	4798      	blx	r3
}
 80089a4:	bf00      	nop
 80089a6:	3718      	adds	r7, #24
 80089a8:	46bd      	mov	sp, r7
 80089aa:	bd80      	pop	{r7, pc}
 80089ac:	20000fac 	.word	0x20000fac

080089b0 <prvTimerTask>:
/*-----------------------------------------------------------*/

static portTASK_FUNCTION( prvTimerTask, pvParameters )
{
 80089b0:	b580      	push	{r7, lr}
 80089b2:	b084      	sub	sp, #16
 80089b4:	af00      	add	r7, sp, #0
 80089b6:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* Query the timers list to see if it contains any timers, and if so,
		obtain the time at which the next timer will expire. */
		xNextExpireTime = prvGetNextExpireTime( &xListWasEmpty );
 80089b8:	f107 0308 	add.w	r3, r7, #8
 80089bc:	4618      	mov	r0, r3
 80089be:	f000 f857 	bl	8008a70 <prvGetNextExpireTime>
 80089c2:	60f8      	str	r0, [r7, #12]

		/* If a timer has expired, process it.  Otherwise, block this task
		until either a timer does expire, or a command is received. */
		prvProcessTimerOrBlockTask( xNextExpireTime, xListWasEmpty );
 80089c4:	68bb      	ldr	r3, [r7, #8]
 80089c6:	4619      	mov	r1, r3
 80089c8:	68f8      	ldr	r0, [r7, #12]
 80089ca:	f000 f803 	bl	80089d4 <prvProcessTimerOrBlockTask>

		/* Empty the command queue. */
		prvProcessReceivedCommands();
 80089ce:	f000 f8d5 	bl	8008b7c <prvProcessReceivedCommands>
		xNextExpireTime = prvGetNextExpireTime( &xListWasEmpty );
 80089d2:	e7f1      	b.n	80089b8 <prvTimerTask+0x8>

080089d4 <prvProcessTimerOrBlockTask>:
	}
}
/*-----------------------------------------------------------*/

static void prvProcessTimerOrBlockTask( const TickType_t xNextExpireTime, BaseType_t xListWasEmpty )
{
 80089d4:	b580      	push	{r7, lr}
 80089d6:	b084      	sub	sp, #16
 80089d8:	af00      	add	r7, sp, #0
 80089da:	6078      	str	r0, [r7, #4]
 80089dc:	6039      	str	r1, [r7, #0]
TickType_t xTimeNow;
BaseType_t xTimerListsWereSwitched;

	vTaskSuspendAll();
 80089de:	f7ff fa1d 	bl	8007e1c <vTaskSuspendAll>
		/* Obtain the time now to make an assessment as to whether the timer
		has expired or not.  If obtaining the time causes the lists to switch
		then don't process this timer as any timers that remained in the list
		when the lists were switched will have been processed within the
		prvSampleTimeNow() function. */
		xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
 80089e2:	f107 0308 	add.w	r3, r7, #8
 80089e6:	4618      	mov	r0, r3
 80089e8:	f000 f866 	bl	8008ab8 <prvSampleTimeNow>
 80089ec:	60f8      	str	r0, [r7, #12]
		if( xTimerListsWereSwitched == pdFALSE )
 80089ee:	68bb      	ldr	r3, [r7, #8]
 80089f0:	2b00      	cmp	r3, #0
 80089f2:	d130      	bne.n	8008a56 <prvProcessTimerOrBlockTask+0x82>
		{
			/* The tick count has not overflowed, has the timer expired? */
			if( ( xListWasEmpty == pdFALSE ) && ( xNextExpireTime <= xTimeNow ) )
 80089f4:	683b      	ldr	r3, [r7, #0]
 80089f6:	2b00      	cmp	r3, #0
 80089f8:	d10a      	bne.n	8008a10 <prvProcessTimerOrBlockTask+0x3c>
 80089fa:	687a      	ldr	r2, [r7, #4]
 80089fc:	68fb      	ldr	r3, [r7, #12]
 80089fe:	429a      	cmp	r2, r3
 8008a00:	d806      	bhi.n	8008a10 <prvProcessTimerOrBlockTask+0x3c>
			{
				( void ) xTaskResumeAll();
 8008a02:	f7ff fa19 	bl	8007e38 <xTaskResumeAll>
				prvProcessExpiredTimer( xNextExpireTime, xTimeNow );
 8008a06:	68f9      	ldr	r1, [r7, #12]
 8008a08:	6878      	ldr	r0, [r7, #4]
 8008a0a:	f7ff ff85 	bl	8008918 <prvProcessExpiredTimer>
		else
		{
			( void ) xTaskResumeAll();
		}
	}
}
 8008a0e:	e024      	b.n	8008a5a <prvProcessTimerOrBlockTask+0x86>
				if( xListWasEmpty != pdFALSE )
 8008a10:	683b      	ldr	r3, [r7, #0]
 8008a12:	2b00      	cmp	r3, #0
 8008a14:	d008      	beq.n	8008a28 <prvProcessTimerOrBlockTask+0x54>
					xListWasEmpty = listLIST_IS_EMPTY( pxOverflowTimerList );
 8008a16:	4b13      	ldr	r3, [pc, #76]	; (8008a64 <prvProcessTimerOrBlockTask+0x90>)
 8008a18:	681b      	ldr	r3, [r3, #0]
 8008a1a:	681b      	ldr	r3, [r3, #0]
 8008a1c:	2b00      	cmp	r3, #0
 8008a1e:	d101      	bne.n	8008a24 <prvProcessTimerOrBlockTask+0x50>
 8008a20:	2301      	movs	r3, #1
 8008a22:	e000      	b.n	8008a26 <prvProcessTimerOrBlockTask+0x52>
 8008a24:	2300      	movs	r3, #0
 8008a26:	603b      	str	r3, [r7, #0]
				vQueueWaitForMessageRestricted( xTimerQueue, ( xNextExpireTime - xTimeNow ), xListWasEmpty );
 8008a28:	4b0f      	ldr	r3, [pc, #60]	; (8008a68 <prvProcessTimerOrBlockTask+0x94>)
 8008a2a:	6818      	ldr	r0, [r3, #0]
 8008a2c:	687a      	ldr	r2, [r7, #4]
 8008a2e:	68fb      	ldr	r3, [r7, #12]
 8008a30:	1ad3      	subs	r3, r2, r3
 8008a32:	683a      	ldr	r2, [r7, #0]
 8008a34:	4619      	mov	r1, r3
 8008a36:	f7fe feef 	bl	8007818 <vQueueWaitForMessageRestricted>
				if( xTaskResumeAll() == pdFALSE )
 8008a3a:	f7ff f9fd 	bl	8007e38 <xTaskResumeAll>
 8008a3e:	4603      	mov	r3, r0
 8008a40:	2b00      	cmp	r3, #0
 8008a42:	d10a      	bne.n	8008a5a <prvProcessTimerOrBlockTask+0x86>
					portYIELD_WITHIN_API();
 8008a44:	4b09      	ldr	r3, [pc, #36]	; (8008a6c <prvProcessTimerOrBlockTask+0x98>)
 8008a46:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8008a4a:	601a      	str	r2, [r3, #0]
 8008a4c:	f3bf 8f4f 	dsb	sy
 8008a50:	f3bf 8f6f 	isb	sy
}
 8008a54:	e001      	b.n	8008a5a <prvProcessTimerOrBlockTask+0x86>
			( void ) xTaskResumeAll();
 8008a56:	f7ff f9ef 	bl	8007e38 <xTaskResumeAll>
}
 8008a5a:	bf00      	nop
 8008a5c:	3710      	adds	r7, #16
 8008a5e:	46bd      	mov	sp, r7
 8008a60:	bd80      	pop	{r7, pc}
 8008a62:	bf00      	nop
 8008a64:	20000fb0 	.word	0x20000fb0
 8008a68:	20000fb4 	.word	0x20000fb4
 8008a6c:	e000ed04 	.word	0xe000ed04

08008a70 <prvGetNextExpireTime>:
/*-----------------------------------------------------------*/

static TickType_t prvGetNextExpireTime( BaseType_t * const pxListWasEmpty )
{
 8008a70:	b480      	push	{r7}
 8008a72:	b085      	sub	sp, #20
 8008a74:	af00      	add	r7, sp, #0
 8008a76:	6078      	str	r0, [r7, #4]
	the timer with the nearest expiry time will expire.  If there are no
	active timers then just set the next expire time to 0.  That will cause
	this task to unblock when the tick count overflows, at which point the
	timer lists will be switched and the next expiry time can be
	re-assessed.  */
	*pxListWasEmpty = listLIST_IS_EMPTY( pxCurrentTimerList );
 8008a78:	4b0e      	ldr	r3, [pc, #56]	; (8008ab4 <prvGetNextExpireTime+0x44>)
 8008a7a:	681b      	ldr	r3, [r3, #0]
 8008a7c:	681b      	ldr	r3, [r3, #0]
 8008a7e:	2b00      	cmp	r3, #0
 8008a80:	d101      	bne.n	8008a86 <prvGetNextExpireTime+0x16>
 8008a82:	2201      	movs	r2, #1
 8008a84:	e000      	b.n	8008a88 <prvGetNextExpireTime+0x18>
 8008a86:	2200      	movs	r2, #0
 8008a88:	687b      	ldr	r3, [r7, #4]
 8008a8a:	601a      	str	r2, [r3, #0]
	if( *pxListWasEmpty == pdFALSE )
 8008a8c:	687b      	ldr	r3, [r7, #4]
 8008a8e:	681b      	ldr	r3, [r3, #0]
 8008a90:	2b00      	cmp	r3, #0
 8008a92:	d105      	bne.n	8008aa0 <prvGetNextExpireTime+0x30>
	{
		xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 8008a94:	4b07      	ldr	r3, [pc, #28]	; (8008ab4 <prvGetNextExpireTime+0x44>)
 8008a96:	681b      	ldr	r3, [r3, #0]
 8008a98:	68db      	ldr	r3, [r3, #12]
 8008a9a:	681b      	ldr	r3, [r3, #0]
 8008a9c:	60fb      	str	r3, [r7, #12]
 8008a9e:	e001      	b.n	8008aa4 <prvGetNextExpireTime+0x34>
	}
	else
	{
		/* Ensure the task unblocks when the tick count rolls over. */
		xNextExpireTime = ( TickType_t ) 0U;
 8008aa0:	2300      	movs	r3, #0
 8008aa2:	60fb      	str	r3, [r7, #12]
	}

	return xNextExpireTime;
 8008aa4:	68fb      	ldr	r3, [r7, #12]
}
 8008aa6:	4618      	mov	r0, r3
 8008aa8:	3714      	adds	r7, #20
 8008aaa:	46bd      	mov	sp, r7
 8008aac:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008ab0:	4770      	bx	lr
 8008ab2:	bf00      	nop
 8008ab4:	20000fac 	.word	0x20000fac

08008ab8 <prvSampleTimeNow>:
/*-----------------------------------------------------------*/

static TickType_t prvSampleTimeNow( BaseType_t * const pxTimerListsWereSwitched )
{
 8008ab8:	b580      	push	{r7, lr}
 8008aba:	b084      	sub	sp, #16
 8008abc:	af00      	add	r7, sp, #0
 8008abe:	6078      	str	r0, [r7, #4]
TickType_t xTimeNow;
PRIVILEGED_DATA static TickType_t xLastTime = ( TickType_t ) 0U; /*lint !e956 Variable is only accessible to one task. */

	xTimeNow = xTaskGetTickCount();
 8008ac0:	f7ff fa58 	bl	8007f74 <xTaskGetTickCount>
 8008ac4:	60f8      	str	r0, [r7, #12]

	if( xTimeNow < xLastTime )
 8008ac6:	4b0b      	ldr	r3, [pc, #44]	; (8008af4 <prvSampleTimeNow+0x3c>)
 8008ac8:	681b      	ldr	r3, [r3, #0]
 8008aca:	68fa      	ldr	r2, [r7, #12]
 8008acc:	429a      	cmp	r2, r3
 8008ace:	d205      	bcs.n	8008adc <prvSampleTimeNow+0x24>
	{
		prvSwitchTimerLists();
 8008ad0:	f000 f936 	bl	8008d40 <prvSwitchTimerLists>
		*pxTimerListsWereSwitched = pdTRUE;
 8008ad4:	687b      	ldr	r3, [r7, #4]
 8008ad6:	2201      	movs	r2, #1
 8008ad8:	601a      	str	r2, [r3, #0]
 8008ada:	e002      	b.n	8008ae2 <prvSampleTimeNow+0x2a>
	}
	else
	{
		*pxTimerListsWereSwitched = pdFALSE;
 8008adc:	687b      	ldr	r3, [r7, #4]
 8008ade:	2200      	movs	r2, #0
 8008ae0:	601a      	str	r2, [r3, #0]
	}

	xLastTime = xTimeNow;
 8008ae2:	4a04      	ldr	r2, [pc, #16]	; (8008af4 <prvSampleTimeNow+0x3c>)
 8008ae4:	68fb      	ldr	r3, [r7, #12]
 8008ae6:	6013      	str	r3, [r2, #0]

	return xTimeNow;
 8008ae8:	68fb      	ldr	r3, [r7, #12]
}
 8008aea:	4618      	mov	r0, r3
 8008aec:	3710      	adds	r7, #16
 8008aee:	46bd      	mov	sp, r7
 8008af0:	bd80      	pop	{r7, pc}
 8008af2:	bf00      	nop
 8008af4:	20000fbc 	.word	0x20000fbc

08008af8 <prvInsertTimerInActiveList>:
/*-----------------------------------------------------------*/

static BaseType_t prvInsertTimerInActiveList( Timer_t * const pxTimer, const TickType_t xNextExpiryTime, const TickType_t xTimeNow, const TickType_t xCommandTime )
{
 8008af8:	b580      	push	{r7, lr}
 8008afa:	b086      	sub	sp, #24
 8008afc:	af00      	add	r7, sp, #0
 8008afe:	60f8      	str	r0, [r7, #12]
 8008b00:	60b9      	str	r1, [r7, #8]
 8008b02:	607a      	str	r2, [r7, #4]
 8008b04:	603b      	str	r3, [r7, #0]
BaseType_t xProcessTimerNow = pdFALSE;
 8008b06:	2300      	movs	r3, #0
 8008b08:	617b      	str	r3, [r7, #20]

	listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xNextExpiryTime );
 8008b0a:	68fb      	ldr	r3, [r7, #12]
 8008b0c:	68ba      	ldr	r2, [r7, #8]
 8008b0e:	605a      	str	r2, [r3, #4]
	listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
 8008b10:	68fb      	ldr	r3, [r7, #12]
 8008b12:	68fa      	ldr	r2, [r7, #12]
 8008b14:	611a      	str	r2, [r3, #16]

	if( xNextExpiryTime <= xTimeNow )
 8008b16:	68ba      	ldr	r2, [r7, #8]
 8008b18:	687b      	ldr	r3, [r7, #4]
 8008b1a:	429a      	cmp	r2, r3
 8008b1c:	d812      	bhi.n	8008b44 <prvInsertTimerInActiveList+0x4c>
	{
		/* Has the expiry time elapsed between the command to start/reset a
		timer was issued, and the time the command was processed? */
		if( ( ( TickType_t ) ( xTimeNow - xCommandTime ) ) >= pxTimer->xTimerPeriodInTicks ) /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8008b1e:	687a      	ldr	r2, [r7, #4]
 8008b20:	683b      	ldr	r3, [r7, #0]
 8008b22:	1ad2      	subs	r2, r2, r3
 8008b24:	68fb      	ldr	r3, [r7, #12]
 8008b26:	699b      	ldr	r3, [r3, #24]
 8008b28:	429a      	cmp	r2, r3
 8008b2a:	d302      	bcc.n	8008b32 <prvInsertTimerInActiveList+0x3a>
		{
			/* The time between a command being issued and the command being
			processed actually exceeds the timers period.  */
			xProcessTimerNow = pdTRUE;
 8008b2c:	2301      	movs	r3, #1
 8008b2e:	617b      	str	r3, [r7, #20]
 8008b30:	e01b      	b.n	8008b6a <prvInsertTimerInActiveList+0x72>
		}
		else
		{
			vListInsert( pxOverflowTimerList, &( pxTimer->xTimerListItem ) );
 8008b32:	4b10      	ldr	r3, [pc, #64]	; (8008b74 <prvInsertTimerInActiveList+0x7c>)
 8008b34:	681a      	ldr	r2, [r3, #0]
 8008b36:	68fb      	ldr	r3, [r7, #12]
 8008b38:	3304      	adds	r3, #4
 8008b3a:	4619      	mov	r1, r3
 8008b3c:	4610      	mov	r0, r2
 8008b3e:	f7fe f950 	bl	8006de2 <vListInsert>
 8008b42:	e012      	b.n	8008b6a <prvInsertTimerInActiveList+0x72>
		}
	}
	else
	{
		if( ( xTimeNow < xCommandTime ) && ( xNextExpiryTime >= xCommandTime ) )
 8008b44:	687a      	ldr	r2, [r7, #4]
 8008b46:	683b      	ldr	r3, [r7, #0]
 8008b48:	429a      	cmp	r2, r3
 8008b4a:	d206      	bcs.n	8008b5a <prvInsertTimerInActiveList+0x62>
 8008b4c:	68ba      	ldr	r2, [r7, #8]
 8008b4e:	683b      	ldr	r3, [r7, #0]
 8008b50:	429a      	cmp	r2, r3
 8008b52:	d302      	bcc.n	8008b5a <prvInsertTimerInActiveList+0x62>
		{
			/* If, since the command was issued, the tick count has overflowed
			but the expiry time has not, then the timer must have already passed
			its expiry time and should be processed immediately. */
			xProcessTimerNow = pdTRUE;
 8008b54:	2301      	movs	r3, #1
 8008b56:	617b      	str	r3, [r7, #20]
 8008b58:	e007      	b.n	8008b6a <prvInsertTimerInActiveList+0x72>
		}
		else
		{
			vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
 8008b5a:	4b07      	ldr	r3, [pc, #28]	; (8008b78 <prvInsertTimerInActiveList+0x80>)
 8008b5c:	681a      	ldr	r2, [r3, #0]
 8008b5e:	68fb      	ldr	r3, [r7, #12]
 8008b60:	3304      	adds	r3, #4
 8008b62:	4619      	mov	r1, r3
 8008b64:	4610      	mov	r0, r2
 8008b66:	f7fe f93c 	bl	8006de2 <vListInsert>
		}
	}

	return xProcessTimerNow;
 8008b6a:	697b      	ldr	r3, [r7, #20]
}
 8008b6c:	4618      	mov	r0, r3
 8008b6e:	3718      	adds	r7, #24
 8008b70:	46bd      	mov	sp, r7
 8008b72:	bd80      	pop	{r7, pc}
 8008b74:	20000fb0 	.word	0x20000fb0
 8008b78:	20000fac 	.word	0x20000fac

08008b7c <prvProcessReceivedCommands>:
/*-----------------------------------------------------------*/

static void	prvProcessReceivedCommands( void )
{
 8008b7c:	b580      	push	{r7, lr}
 8008b7e:	b08e      	sub	sp, #56	; 0x38
 8008b80:	af02      	add	r7, sp, #8
DaemonTaskMessage_t xMessage;
Timer_t *pxTimer;
BaseType_t xTimerListsWereSwitched, xResult;
TickType_t xTimeNow;

	while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
 8008b82:	e0ca      	b.n	8008d1a <prvProcessReceivedCommands+0x19e>
	{
		#if ( INCLUDE_xTimerPendFunctionCall == 1 )
		{
			/* Negative commands are pended function calls rather than timer
			commands. */
			if( xMessage.xMessageID < ( BaseType_t ) 0 )
 8008b84:	687b      	ldr	r3, [r7, #4]
 8008b86:	2b00      	cmp	r3, #0
 8008b88:	da18      	bge.n	8008bbc <prvProcessReceivedCommands+0x40>
			{
				const CallbackParameters_t * const pxCallback = &( xMessage.u.xCallbackParameters );
 8008b8a:	1d3b      	adds	r3, r7, #4
 8008b8c:	3304      	adds	r3, #4
 8008b8e:	62fb      	str	r3, [r7, #44]	; 0x2c

				/* The timer uses the xCallbackParameters member to request a
				callback be executed.  Check the callback is not NULL. */
				configASSERT( pxCallback );
 8008b90:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8008b92:	2b00      	cmp	r3, #0
 8008b94:	d10a      	bne.n	8008bac <prvProcessReceivedCommands+0x30>
	__asm volatile
 8008b96:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008b9a:	f383 8811 	msr	BASEPRI, r3
 8008b9e:	f3bf 8f6f 	isb	sy
 8008ba2:	f3bf 8f4f 	dsb	sy
 8008ba6:	61fb      	str	r3, [r7, #28]
}
 8008ba8:	bf00      	nop
 8008baa:	e7fe      	b.n	8008baa <prvProcessReceivedCommands+0x2e>

				/* Call the function. */
				pxCallback->pxCallbackFunction( pxCallback->pvParameter1, pxCallback->ulParameter2 );
 8008bac:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8008bae:	681b      	ldr	r3, [r3, #0]
 8008bb0:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8008bb2:	6850      	ldr	r0, [r2, #4]
 8008bb4:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8008bb6:	6892      	ldr	r2, [r2, #8]
 8008bb8:	4611      	mov	r1, r2
 8008bba:	4798      	blx	r3
		}
		#endif /* INCLUDE_xTimerPendFunctionCall */

		/* Commands that are positive are timer commands rather than pended
		function calls. */
		if( xMessage.xMessageID >= ( BaseType_t ) 0 )
 8008bbc:	687b      	ldr	r3, [r7, #4]
 8008bbe:	2b00      	cmp	r3, #0
 8008bc0:	f2c0 80aa 	blt.w	8008d18 <prvProcessReceivedCommands+0x19c>
		{
			/* The messages uses the xTimerParameters member to work on a
			software timer. */
			pxTimer = xMessage.u.xTimerParameters.pxTimer;
 8008bc4:	68fb      	ldr	r3, [r7, #12]
 8008bc6:	62bb      	str	r3, [r7, #40]	; 0x28

			if( listIS_CONTAINED_WITHIN( NULL, &( pxTimer->xTimerListItem ) ) == pdFALSE ) /*lint !e961. The cast is only redundant when NULL is passed into the macro. */
 8008bc8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008bca:	695b      	ldr	r3, [r3, #20]
 8008bcc:	2b00      	cmp	r3, #0
 8008bce:	d004      	beq.n	8008bda <prvProcessReceivedCommands+0x5e>
			{
				/* The timer is in a list, remove it. */
				( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 8008bd0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008bd2:	3304      	adds	r3, #4
 8008bd4:	4618      	mov	r0, r3
 8008bd6:	f7fe f93d 	bl	8006e54 <uxListRemove>
			it must be present in the function call.  prvSampleTimeNow() must be
			called after the message is received from xTimerQueue so there is no
			possibility of a higher priority task adding a message to the message
			queue with a time that is ahead of the timer daemon task (because it
			pre-empted the timer daemon task after the xTimeNow value was set). */
			xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
 8008bda:	463b      	mov	r3, r7
 8008bdc:	4618      	mov	r0, r3
 8008bde:	f7ff ff6b 	bl	8008ab8 <prvSampleTimeNow>
 8008be2:	6278      	str	r0, [r7, #36]	; 0x24

			switch( xMessage.xMessageID )
 8008be4:	687b      	ldr	r3, [r7, #4]
 8008be6:	2b09      	cmp	r3, #9
 8008be8:	f200 8097 	bhi.w	8008d1a <prvProcessReceivedCommands+0x19e>
 8008bec:	a201      	add	r2, pc, #4	; (adr r2, 8008bf4 <prvProcessReceivedCommands+0x78>)
 8008bee:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8008bf2:	bf00      	nop
 8008bf4:	08008c1d 	.word	0x08008c1d
 8008bf8:	08008c1d 	.word	0x08008c1d
 8008bfc:	08008c1d 	.word	0x08008c1d
 8008c00:	08008c91 	.word	0x08008c91
 8008c04:	08008ca5 	.word	0x08008ca5
 8008c08:	08008cef 	.word	0x08008cef
 8008c0c:	08008c1d 	.word	0x08008c1d
 8008c10:	08008c1d 	.word	0x08008c1d
 8008c14:	08008c91 	.word	0x08008c91
 8008c18:	08008ca5 	.word	0x08008ca5
				case tmrCOMMAND_START_FROM_ISR :
				case tmrCOMMAND_RESET :
				case tmrCOMMAND_RESET_FROM_ISR :
				case tmrCOMMAND_START_DONT_TRACE :
					/* Start or restart a timer. */
					pxTimer->ucStatus |= tmrSTATUS_IS_ACTIVE;
 8008c1c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008c1e:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8008c22:	f043 0301 	orr.w	r3, r3, #1
 8008c26:	b2da      	uxtb	r2, r3
 8008c28:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008c2a:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
					if( prvInsertTimerInActiveList( pxTimer,  xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, xTimeNow, xMessage.u.xTimerParameters.xMessageValue ) != pdFALSE )
 8008c2e:	68ba      	ldr	r2, [r7, #8]
 8008c30:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008c32:	699b      	ldr	r3, [r3, #24]
 8008c34:	18d1      	adds	r1, r2, r3
 8008c36:	68bb      	ldr	r3, [r7, #8]
 8008c38:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8008c3a:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8008c3c:	f7ff ff5c 	bl	8008af8 <prvInsertTimerInActiveList>
 8008c40:	4603      	mov	r3, r0
 8008c42:	2b00      	cmp	r3, #0
 8008c44:	d069      	beq.n	8008d1a <prvProcessReceivedCommands+0x19e>
					{
						/* The timer expired before it was added to the active
						timer list.  Process it now. */
						pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 8008c46:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008c48:	6a1b      	ldr	r3, [r3, #32]
 8008c4a:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8008c4c:	4798      	blx	r3
						traceTIMER_EXPIRED( pxTimer );

						if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 8008c4e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008c50:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8008c54:	f003 0304 	and.w	r3, r3, #4
 8008c58:	2b00      	cmp	r3, #0
 8008c5a:	d05e      	beq.n	8008d1a <prvProcessReceivedCommands+0x19e>
						{
							xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, NULL, tmrNO_DELAY );
 8008c5c:	68ba      	ldr	r2, [r7, #8]
 8008c5e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008c60:	699b      	ldr	r3, [r3, #24]
 8008c62:	441a      	add	r2, r3
 8008c64:	2300      	movs	r3, #0
 8008c66:	9300      	str	r3, [sp, #0]
 8008c68:	2300      	movs	r3, #0
 8008c6a:	2100      	movs	r1, #0
 8008c6c:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8008c6e:	f7ff fe05 	bl	800887c <xTimerGenericCommand>
 8008c72:	6238      	str	r0, [r7, #32]
							configASSERT( xResult );
 8008c74:	6a3b      	ldr	r3, [r7, #32]
 8008c76:	2b00      	cmp	r3, #0
 8008c78:	d14f      	bne.n	8008d1a <prvProcessReceivedCommands+0x19e>
	__asm volatile
 8008c7a:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008c7e:	f383 8811 	msr	BASEPRI, r3
 8008c82:	f3bf 8f6f 	isb	sy
 8008c86:	f3bf 8f4f 	dsb	sy
 8008c8a:	61bb      	str	r3, [r7, #24]
}
 8008c8c:	bf00      	nop
 8008c8e:	e7fe      	b.n	8008c8e <prvProcessReceivedCommands+0x112>
					break;

				case tmrCOMMAND_STOP :
				case tmrCOMMAND_STOP_FROM_ISR :
					/* The timer has already been removed from the active list. */
					pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 8008c90:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008c92:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8008c96:	f023 0301 	bic.w	r3, r3, #1
 8008c9a:	b2da      	uxtb	r2, r3
 8008c9c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008c9e:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
					break;
 8008ca2:	e03a      	b.n	8008d1a <prvProcessReceivedCommands+0x19e>

				case tmrCOMMAND_CHANGE_PERIOD :
				case tmrCOMMAND_CHANGE_PERIOD_FROM_ISR :
					pxTimer->ucStatus |= tmrSTATUS_IS_ACTIVE;
 8008ca4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008ca6:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8008caa:	f043 0301 	orr.w	r3, r3, #1
 8008cae:	b2da      	uxtb	r2, r3
 8008cb0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008cb2:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
					pxTimer->xTimerPeriodInTicks = xMessage.u.xTimerParameters.xMessageValue;
 8008cb6:	68ba      	ldr	r2, [r7, #8]
 8008cb8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008cba:	619a      	str	r2, [r3, #24]
					configASSERT( ( pxTimer->xTimerPeriodInTicks > 0 ) );
 8008cbc:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008cbe:	699b      	ldr	r3, [r3, #24]
 8008cc0:	2b00      	cmp	r3, #0
 8008cc2:	d10a      	bne.n	8008cda <prvProcessReceivedCommands+0x15e>
	__asm volatile
 8008cc4:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008cc8:	f383 8811 	msr	BASEPRI, r3
 8008ccc:	f3bf 8f6f 	isb	sy
 8008cd0:	f3bf 8f4f 	dsb	sy
 8008cd4:	617b      	str	r3, [r7, #20]
}
 8008cd6:	bf00      	nop
 8008cd8:	e7fe      	b.n	8008cd8 <prvProcessReceivedCommands+0x15c>
					be longer or shorter than the old one.  The command time is
					therefore set to the current time, and as the period cannot
					be zero the next expiry time can only be in the future,
					meaning (unlike for the xTimerStart() case above) there is
					no fail case that needs to be handled here. */
					( void ) prvInsertTimerInActiveList( pxTimer, ( xTimeNow + pxTimer->xTimerPeriodInTicks ), xTimeNow, xTimeNow );
 8008cda:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008cdc:	699a      	ldr	r2, [r3, #24]
 8008cde:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008ce0:	18d1      	adds	r1, r2, r3
 8008ce2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008ce4:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8008ce6:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8008ce8:	f7ff ff06 	bl	8008af8 <prvInsertTimerInActiveList>
					break;
 8008cec:	e015      	b.n	8008d1a <prvProcessReceivedCommands+0x19e>
					#if ( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
					{
						/* The timer has already been removed from the active list,
						just free up the memory if the memory was dynamically
						allocated. */
						if( ( pxTimer->ucStatus & tmrSTATUS_IS_STATICALLY_ALLOCATED ) == ( uint8_t ) 0 )
 8008cee:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008cf0:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8008cf4:	f003 0302 	and.w	r3, r3, #2
 8008cf8:	2b00      	cmp	r3, #0
 8008cfa:	d103      	bne.n	8008d04 <prvProcessReceivedCommands+0x188>
						{
							vPortFree( pxTimer );
 8008cfc:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8008cfe:	f000 fbe3 	bl	80094c8 <vPortFree>
 8008d02:	e00a      	b.n	8008d1a <prvProcessReceivedCommands+0x19e>
						}
						else
						{
							pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 8008d04:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008d06:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8008d0a:	f023 0301 	bic.w	r3, r3, #1
 8008d0e:	b2da      	uxtb	r2, r3
 8008d10:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008d12:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
						no need to free the memory - just mark the timer as
						"not active". */
						pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
					}
					#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
					break;
 8008d16:	e000      	b.n	8008d1a <prvProcessReceivedCommands+0x19e>

				default	:
					/* Don't expect to get here. */
					break;
			}
		}
 8008d18:	bf00      	nop
	while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
 8008d1a:	4b08      	ldr	r3, [pc, #32]	; (8008d3c <prvProcessReceivedCommands+0x1c0>)
 8008d1c:	681b      	ldr	r3, [r3, #0]
 8008d1e:	1d39      	adds	r1, r7, #4
 8008d20:	2200      	movs	r2, #0
 8008d22:	4618      	mov	r0, r3
 8008d24:	f7fe fb5e 	bl	80073e4 <xQueueReceive>
 8008d28:	4603      	mov	r3, r0
 8008d2a:	2b00      	cmp	r3, #0
 8008d2c:	f47f af2a 	bne.w	8008b84 <prvProcessReceivedCommands+0x8>
	}
}
 8008d30:	bf00      	nop
 8008d32:	bf00      	nop
 8008d34:	3730      	adds	r7, #48	; 0x30
 8008d36:	46bd      	mov	sp, r7
 8008d38:	bd80      	pop	{r7, pc}
 8008d3a:	bf00      	nop
 8008d3c:	20000fb4 	.word	0x20000fb4

08008d40 <prvSwitchTimerLists>:
/*-----------------------------------------------------------*/

static void prvSwitchTimerLists( void )
{
 8008d40:	b580      	push	{r7, lr}
 8008d42:	b088      	sub	sp, #32
 8008d44:	af02      	add	r7, sp, #8

	/* The tick count has overflowed.  The timer lists must be switched.
	If there are any timers still referenced from the current timer list
	then they must have expired and should be processed before the lists
	are switched. */
	while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
 8008d46:	e048      	b.n	8008dda <prvSwitchTimerLists+0x9a>
	{
		xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 8008d48:	4b2d      	ldr	r3, [pc, #180]	; (8008e00 <prvSwitchTimerLists+0xc0>)
 8008d4a:	681b      	ldr	r3, [r3, #0]
 8008d4c:	68db      	ldr	r3, [r3, #12]
 8008d4e:	681b      	ldr	r3, [r3, #0]
 8008d50:	613b      	str	r3, [r7, #16]

		/* Remove the timer from the list. */
		pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList ); /*lint !e9087 !e9079 void * is used as this macro is used with tasks and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8008d52:	4b2b      	ldr	r3, [pc, #172]	; (8008e00 <prvSwitchTimerLists+0xc0>)
 8008d54:	681b      	ldr	r3, [r3, #0]
 8008d56:	68db      	ldr	r3, [r3, #12]
 8008d58:	68db      	ldr	r3, [r3, #12]
 8008d5a:	60fb      	str	r3, [r7, #12]
		( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 8008d5c:	68fb      	ldr	r3, [r7, #12]
 8008d5e:	3304      	adds	r3, #4
 8008d60:	4618      	mov	r0, r3
 8008d62:	f7fe f877 	bl	8006e54 <uxListRemove>
		traceTIMER_EXPIRED( pxTimer );

		/* Execute its callback, then send a command to restart the timer if
		it is an auto-reload timer.  It cannot be restarted here as the lists
		have not yet been switched. */
		pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 8008d66:	68fb      	ldr	r3, [r7, #12]
 8008d68:	6a1b      	ldr	r3, [r3, #32]
 8008d6a:	68f8      	ldr	r0, [r7, #12]
 8008d6c:	4798      	blx	r3

		if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 8008d6e:	68fb      	ldr	r3, [r7, #12]
 8008d70:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8008d74:	f003 0304 	and.w	r3, r3, #4
 8008d78:	2b00      	cmp	r3, #0
 8008d7a:	d02e      	beq.n	8008dda <prvSwitchTimerLists+0x9a>
			the timer going into the same timer list then it has already expired
			and the timer should be re-inserted into the current list so it is
			processed again within this loop.  Otherwise a command should be sent
			to restart the timer to ensure it is only inserted into a list after
			the lists have been swapped. */
			xReloadTime = ( xNextExpireTime + pxTimer->xTimerPeriodInTicks );
 8008d7c:	68fb      	ldr	r3, [r7, #12]
 8008d7e:	699b      	ldr	r3, [r3, #24]
 8008d80:	693a      	ldr	r2, [r7, #16]
 8008d82:	4413      	add	r3, r2
 8008d84:	60bb      	str	r3, [r7, #8]
			if( xReloadTime > xNextExpireTime )
 8008d86:	68ba      	ldr	r2, [r7, #8]
 8008d88:	693b      	ldr	r3, [r7, #16]
 8008d8a:	429a      	cmp	r2, r3
 8008d8c:	d90e      	bls.n	8008dac <prvSwitchTimerLists+0x6c>
			{
				listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xReloadTime );
 8008d8e:	68fb      	ldr	r3, [r7, #12]
 8008d90:	68ba      	ldr	r2, [r7, #8]
 8008d92:	605a      	str	r2, [r3, #4]
				listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
 8008d94:	68fb      	ldr	r3, [r7, #12]
 8008d96:	68fa      	ldr	r2, [r7, #12]
 8008d98:	611a      	str	r2, [r3, #16]
				vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
 8008d9a:	4b19      	ldr	r3, [pc, #100]	; (8008e00 <prvSwitchTimerLists+0xc0>)
 8008d9c:	681a      	ldr	r2, [r3, #0]
 8008d9e:	68fb      	ldr	r3, [r7, #12]
 8008da0:	3304      	adds	r3, #4
 8008da2:	4619      	mov	r1, r3
 8008da4:	4610      	mov	r0, r2
 8008da6:	f7fe f81c 	bl	8006de2 <vListInsert>
 8008daa:	e016      	b.n	8008dda <prvSwitchTimerLists+0x9a>
			}
			else
			{
				xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
 8008dac:	2300      	movs	r3, #0
 8008dae:	9300      	str	r3, [sp, #0]
 8008db0:	2300      	movs	r3, #0
 8008db2:	693a      	ldr	r2, [r7, #16]
 8008db4:	2100      	movs	r1, #0
 8008db6:	68f8      	ldr	r0, [r7, #12]
 8008db8:	f7ff fd60 	bl	800887c <xTimerGenericCommand>
 8008dbc:	6078      	str	r0, [r7, #4]
				configASSERT( xResult );
 8008dbe:	687b      	ldr	r3, [r7, #4]
 8008dc0:	2b00      	cmp	r3, #0
 8008dc2:	d10a      	bne.n	8008dda <prvSwitchTimerLists+0x9a>
	__asm volatile
 8008dc4:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008dc8:	f383 8811 	msr	BASEPRI, r3
 8008dcc:	f3bf 8f6f 	isb	sy
 8008dd0:	f3bf 8f4f 	dsb	sy
 8008dd4:	603b      	str	r3, [r7, #0]
}
 8008dd6:	bf00      	nop
 8008dd8:	e7fe      	b.n	8008dd8 <prvSwitchTimerLists+0x98>
	while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
 8008dda:	4b09      	ldr	r3, [pc, #36]	; (8008e00 <prvSwitchTimerLists+0xc0>)
 8008ddc:	681b      	ldr	r3, [r3, #0]
 8008dde:	681b      	ldr	r3, [r3, #0]
 8008de0:	2b00      	cmp	r3, #0
 8008de2:	d1b1      	bne.n	8008d48 <prvSwitchTimerLists+0x8>
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	pxTemp = pxCurrentTimerList;
 8008de4:	4b06      	ldr	r3, [pc, #24]	; (8008e00 <prvSwitchTimerLists+0xc0>)
 8008de6:	681b      	ldr	r3, [r3, #0]
 8008de8:	617b      	str	r3, [r7, #20]
	pxCurrentTimerList = pxOverflowTimerList;
 8008dea:	4b06      	ldr	r3, [pc, #24]	; (8008e04 <prvSwitchTimerLists+0xc4>)
 8008dec:	681b      	ldr	r3, [r3, #0]
 8008dee:	4a04      	ldr	r2, [pc, #16]	; (8008e00 <prvSwitchTimerLists+0xc0>)
 8008df0:	6013      	str	r3, [r2, #0]
	pxOverflowTimerList = pxTemp;
 8008df2:	4a04      	ldr	r2, [pc, #16]	; (8008e04 <prvSwitchTimerLists+0xc4>)
 8008df4:	697b      	ldr	r3, [r7, #20]
 8008df6:	6013      	str	r3, [r2, #0]
}
 8008df8:	bf00      	nop
 8008dfa:	3718      	adds	r7, #24
 8008dfc:	46bd      	mov	sp, r7
 8008dfe:	bd80      	pop	{r7, pc}
 8008e00:	20000fac 	.word	0x20000fac
 8008e04:	20000fb0 	.word	0x20000fb0

08008e08 <prvCheckForValidListAndQueue>:
/*-----------------------------------------------------------*/

static void prvCheckForValidListAndQueue( void )
{
 8008e08:	b580      	push	{r7, lr}
 8008e0a:	b082      	sub	sp, #8
 8008e0c:	af02      	add	r7, sp, #8
	/* Check that the list from which active timers are referenced, and the
	queue used to communicate with the timer service, have been
	initialised. */
	taskENTER_CRITICAL();
 8008e0e:	f000 f969 	bl	80090e4 <vPortEnterCritical>
	{
		if( xTimerQueue == NULL )
 8008e12:	4b15      	ldr	r3, [pc, #84]	; (8008e68 <prvCheckForValidListAndQueue+0x60>)
 8008e14:	681b      	ldr	r3, [r3, #0]
 8008e16:	2b00      	cmp	r3, #0
 8008e18:	d120      	bne.n	8008e5c <prvCheckForValidListAndQueue+0x54>
		{
			vListInitialise( &xActiveTimerList1 );
 8008e1a:	4814      	ldr	r0, [pc, #80]	; (8008e6c <prvCheckForValidListAndQueue+0x64>)
 8008e1c:	f7fd ff90 	bl	8006d40 <vListInitialise>
			vListInitialise( &xActiveTimerList2 );
 8008e20:	4813      	ldr	r0, [pc, #76]	; (8008e70 <prvCheckForValidListAndQueue+0x68>)
 8008e22:	f7fd ff8d 	bl	8006d40 <vListInitialise>
			pxCurrentTimerList = &xActiveTimerList1;
 8008e26:	4b13      	ldr	r3, [pc, #76]	; (8008e74 <prvCheckForValidListAndQueue+0x6c>)
 8008e28:	4a10      	ldr	r2, [pc, #64]	; (8008e6c <prvCheckForValidListAndQueue+0x64>)
 8008e2a:	601a      	str	r2, [r3, #0]
			pxOverflowTimerList = &xActiveTimerList2;
 8008e2c:	4b12      	ldr	r3, [pc, #72]	; (8008e78 <prvCheckForValidListAndQueue+0x70>)
 8008e2e:	4a10      	ldr	r2, [pc, #64]	; (8008e70 <prvCheckForValidListAndQueue+0x68>)
 8008e30:	601a      	str	r2, [r3, #0]
				/* The timer queue is allocated statically in case
				configSUPPORT_DYNAMIC_ALLOCATION is 0. */
				static StaticQueue_t xStaticTimerQueue; /*lint !e956 Ok to declare in this manner to prevent additional conditional compilation guards in other locations. */
				static uint8_t ucStaticTimerQueueStorage[ ( size_t ) configTIMER_QUEUE_LENGTH * sizeof( DaemonTaskMessage_t ) ]; /*lint !e956 Ok to declare in this manner to prevent additional conditional compilation guards in other locations. */

				xTimerQueue = xQueueCreateStatic( ( UBaseType_t ) configTIMER_QUEUE_LENGTH, ( UBaseType_t ) sizeof( DaemonTaskMessage_t ), &( ucStaticTimerQueueStorage[ 0 ] ), &xStaticTimerQueue );
 8008e32:	2300      	movs	r3, #0
 8008e34:	9300      	str	r3, [sp, #0]
 8008e36:	4b11      	ldr	r3, [pc, #68]	; (8008e7c <prvCheckForValidListAndQueue+0x74>)
 8008e38:	4a11      	ldr	r2, [pc, #68]	; (8008e80 <prvCheckForValidListAndQueue+0x78>)
 8008e3a:	2110      	movs	r1, #16
 8008e3c:	200a      	movs	r0, #10
 8008e3e:	f7fe f89b 	bl	8006f78 <xQueueGenericCreateStatic>
 8008e42:	4603      	mov	r3, r0
 8008e44:	4a08      	ldr	r2, [pc, #32]	; (8008e68 <prvCheckForValidListAndQueue+0x60>)
 8008e46:	6013      	str	r3, [r2, #0]
			}
			#endif

			#if ( configQUEUE_REGISTRY_SIZE > 0 )
			{
				if( xTimerQueue != NULL )
 8008e48:	4b07      	ldr	r3, [pc, #28]	; (8008e68 <prvCheckForValidListAndQueue+0x60>)
 8008e4a:	681b      	ldr	r3, [r3, #0]
 8008e4c:	2b00      	cmp	r3, #0
 8008e4e:	d005      	beq.n	8008e5c <prvCheckForValidListAndQueue+0x54>
				{
					vQueueAddToRegistry( xTimerQueue, "TmrQ" );
 8008e50:	4b05      	ldr	r3, [pc, #20]	; (8008e68 <prvCheckForValidListAndQueue+0x60>)
 8008e52:	681b      	ldr	r3, [r3, #0]
 8008e54:	490b      	ldr	r1, [pc, #44]	; (8008e84 <prvCheckForValidListAndQueue+0x7c>)
 8008e56:	4618      	mov	r0, r3
 8008e58:	f7fe fcb4 	bl	80077c4 <vQueueAddToRegistry>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 8008e5c:	f000 f972 	bl	8009144 <vPortExitCritical>
}
 8008e60:	bf00      	nop
 8008e62:	46bd      	mov	sp, r7
 8008e64:	bd80      	pop	{r7, pc}
 8008e66:	bf00      	nop
 8008e68:	20000fb4 	.word	0x20000fb4
 8008e6c:	20000f84 	.word	0x20000f84
 8008e70:	20000f98 	.word	0x20000f98
 8008e74:	20000fac 	.word	0x20000fac
 8008e78:	20000fb0 	.word	0x20000fb0
 8008e7c:	20001060 	.word	0x20001060
 8008e80:	20000fc0 	.word	0x20000fc0
 8008e84:	0800aeb8 	.word	0x0800aeb8

08008e88 <pxPortInitialiseStack>:

/*
 * See header file for description.
 */
StackType_t *pxPortInitialiseStack( StackType_t *pxTopOfStack, TaskFunction_t pxCode, void *pvParameters )
{
 8008e88:	b480      	push	{r7}
 8008e8a:	b085      	sub	sp, #20
 8008e8c:	af00      	add	r7, sp, #0
 8008e8e:	60f8      	str	r0, [r7, #12]
 8008e90:	60b9      	str	r1, [r7, #8]
 8008e92:	607a      	str	r2, [r7, #4]
	/* Simulate the stack frame as it would be created by a context switch
	interrupt. */

	/* Offset added to account for the way the MCU uses the stack on entry/exit
	of interrupts, and to ensure alignment. */
	pxTopOfStack--;
 8008e94:	68fb      	ldr	r3, [r7, #12]
 8008e96:	3b04      	subs	r3, #4
 8008e98:	60fb      	str	r3, [r7, #12]

	*pxTopOfStack = portINITIAL_XPSR;	/* xPSR */
 8008e9a:	68fb      	ldr	r3, [r7, #12]
 8008e9c:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 8008ea0:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 8008ea2:	68fb      	ldr	r3, [r7, #12]
 8008ea4:	3b04      	subs	r3, #4
 8008ea6:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( ( StackType_t ) pxCode ) & portSTART_ADDRESS_MASK;	/* PC */
 8008ea8:	68bb      	ldr	r3, [r7, #8]
 8008eaa:	f023 0201 	bic.w	r2, r3, #1
 8008eae:	68fb      	ldr	r3, [r7, #12]
 8008eb0:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 8008eb2:	68fb      	ldr	r3, [r7, #12]
 8008eb4:	3b04      	subs	r3, #4
 8008eb6:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) portTASK_RETURN_ADDRESS;	/* LR */
 8008eb8:	4a0c      	ldr	r2, [pc, #48]	; (8008eec <pxPortInitialiseStack+0x64>)
 8008eba:	68fb      	ldr	r3, [r7, #12]
 8008ebc:	601a      	str	r2, [r3, #0]

	/* Save code space by skipping register initialisation. */
	pxTopOfStack -= 5;	/* R12, R3, R2 and R1. */
 8008ebe:	68fb      	ldr	r3, [r7, #12]
 8008ec0:	3b14      	subs	r3, #20
 8008ec2:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) pvParameters;	/* R0 */
 8008ec4:	687a      	ldr	r2, [r7, #4]
 8008ec6:	68fb      	ldr	r3, [r7, #12]
 8008ec8:	601a      	str	r2, [r3, #0]

	/* A save method is being used that requires each task to maintain its
	own exec return value. */
	pxTopOfStack--;
 8008eca:	68fb      	ldr	r3, [r7, #12]
 8008ecc:	3b04      	subs	r3, #4
 8008ece:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = portINITIAL_EXC_RETURN;
 8008ed0:	68fb      	ldr	r3, [r7, #12]
 8008ed2:	f06f 0202 	mvn.w	r2, #2
 8008ed6:	601a      	str	r2, [r3, #0]

	pxTopOfStack -= 8;	/* R11, R10, R9, R8, R7, R6, R5 and R4. */
 8008ed8:	68fb      	ldr	r3, [r7, #12]
 8008eda:	3b20      	subs	r3, #32
 8008edc:	60fb      	str	r3, [r7, #12]

	return pxTopOfStack;
 8008ede:	68fb      	ldr	r3, [r7, #12]
}
 8008ee0:	4618      	mov	r0, r3
 8008ee2:	3714      	adds	r7, #20
 8008ee4:	46bd      	mov	sp, r7
 8008ee6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008eea:	4770      	bx	lr
 8008eec:	08008ef1 	.word	0x08008ef1

08008ef0 <prvTaskExitError>:
/*-----------------------------------------------------------*/

static void prvTaskExitError( void )
{
 8008ef0:	b480      	push	{r7}
 8008ef2:	b085      	sub	sp, #20
 8008ef4:	af00      	add	r7, sp, #0
volatile uint32_t ulDummy = 0;
 8008ef6:	2300      	movs	r3, #0
 8008ef8:	607b      	str	r3, [r7, #4]
	its caller as there is nothing to return to.  If a task wants to exit it
	should instead call vTaskDelete( NULL ).

	Artificially force an assert() to be triggered if configASSERT() is
	defined, then stop here so application writers can catch the error. */
	configASSERT( uxCriticalNesting == ~0UL );
 8008efa:	4b12      	ldr	r3, [pc, #72]	; (8008f44 <prvTaskExitError+0x54>)
 8008efc:	681b      	ldr	r3, [r3, #0]
 8008efe:	f1b3 3fff 	cmp.w	r3, #4294967295
 8008f02:	d00a      	beq.n	8008f1a <prvTaskExitError+0x2a>
	__asm volatile
 8008f04:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008f08:	f383 8811 	msr	BASEPRI, r3
 8008f0c:	f3bf 8f6f 	isb	sy
 8008f10:	f3bf 8f4f 	dsb	sy
 8008f14:	60fb      	str	r3, [r7, #12]
}
 8008f16:	bf00      	nop
 8008f18:	e7fe      	b.n	8008f18 <prvTaskExitError+0x28>
	__asm volatile
 8008f1a:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008f1e:	f383 8811 	msr	BASEPRI, r3
 8008f22:	f3bf 8f6f 	isb	sy
 8008f26:	f3bf 8f4f 	dsb	sy
 8008f2a:	60bb      	str	r3, [r7, #8]
}
 8008f2c:	bf00      	nop
	portDISABLE_INTERRUPTS();
	while( ulDummy == 0 )
 8008f2e:	bf00      	nop
 8008f30:	687b      	ldr	r3, [r7, #4]
 8008f32:	2b00      	cmp	r3, #0
 8008f34:	d0fc      	beq.n	8008f30 <prvTaskExitError+0x40>
		about code appearing after this function is called - making ulDummy
		volatile makes the compiler think the function could return and
		therefore not output an 'unreachable code' warning for code that appears
		after it. */
	}
}
 8008f36:	bf00      	nop
 8008f38:	bf00      	nop
 8008f3a:	3714      	adds	r7, #20
 8008f3c:	46bd      	mov	sp, r7
 8008f3e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008f42:	4770      	bx	lr
 8008f44:	2000000c 	.word	0x2000000c
	...

08008f50 <SVC_Handler>:
/*-----------------------------------------------------------*/

void vPortSVCHandler( void )
{
	__asm volatile (
 8008f50:	4b07      	ldr	r3, [pc, #28]	; (8008f70 <pxCurrentTCBConst2>)
 8008f52:	6819      	ldr	r1, [r3, #0]
 8008f54:	6808      	ldr	r0, [r1, #0]
 8008f56:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8008f5a:	f380 8809 	msr	PSP, r0
 8008f5e:	f3bf 8f6f 	isb	sy
 8008f62:	f04f 0000 	mov.w	r0, #0
 8008f66:	f380 8811 	msr	BASEPRI, r0
 8008f6a:	4770      	bx	lr
 8008f6c:	f3af 8000 	nop.w

08008f70 <pxCurrentTCBConst2>:
 8008f70:	20000a84 	.word	0x20000a84
					"	bx r14							\n"
					"									\n"
					"	.align 4						\n"
					"pxCurrentTCBConst2: .word pxCurrentTCB				\n"
				);
}
 8008f74:	bf00      	nop
 8008f76:	bf00      	nop

08008f78 <prvPortStartFirstTask>:
{
	/* Start the first task.  This also clears the bit that indicates the FPU is
	in use in case the FPU was used before the scheduler was started - which
	would otherwise result in the unnecessary leaving of space in the SVC stack
	for lazy saving of FPU registers. */
	__asm volatile(
 8008f78:	4808      	ldr	r0, [pc, #32]	; (8008f9c <prvPortStartFirstTask+0x24>)
 8008f7a:	6800      	ldr	r0, [r0, #0]
 8008f7c:	6800      	ldr	r0, [r0, #0]
 8008f7e:	f380 8808 	msr	MSP, r0
 8008f82:	f04f 0000 	mov.w	r0, #0
 8008f86:	f380 8814 	msr	CONTROL, r0
 8008f8a:	b662      	cpsie	i
 8008f8c:	b661      	cpsie	f
 8008f8e:	f3bf 8f4f 	dsb	sy
 8008f92:	f3bf 8f6f 	isb	sy
 8008f96:	df00      	svc	0
 8008f98:	bf00      	nop
					" dsb					\n"
					" isb					\n"
					" svc 0					\n" /* System call to start first task. */
					" nop					\n"
				);
}
 8008f9a:	bf00      	nop
 8008f9c:	e000ed08 	.word	0xe000ed08

08008fa0 <xPortStartScheduler>:

/*
 * See header file for description.
 */
BaseType_t xPortStartScheduler( void )
{
 8008fa0:	b580      	push	{r7, lr}
 8008fa2:	b086      	sub	sp, #24
 8008fa4:	af00      	add	r7, sp, #0
	configASSERT( configMAX_SYSCALL_INTERRUPT_PRIORITY );

	/* This port can be used on all revisions of the Cortex-M7 core other than
	the r0p1 parts.  r0p1 parts should use the port from the
	/source/portable/GCC/ARM_CM7/r0p1 directory. */
	configASSERT( portCPUID != portCORTEX_M7_r0p1_ID );
 8008fa6:	4b46      	ldr	r3, [pc, #280]	; (80090c0 <xPortStartScheduler+0x120>)
 8008fa8:	681b      	ldr	r3, [r3, #0]
 8008faa:	4a46      	ldr	r2, [pc, #280]	; (80090c4 <xPortStartScheduler+0x124>)
 8008fac:	4293      	cmp	r3, r2
 8008fae:	d10a      	bne.n	8008fc6 <xPortStartScheduler+0x26>
	__asm volatile
 8008fb0:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008fb4:	f383 8811 	msr	BASEPRI, r3
 8008fb8:	f3bf 8f6f 	isb	sy
 8008fbc:	f3bf 8f4f 	dsb	sy
 8008fc0:	613b      	str	r3, [r7, #16]
}
 8008fc2:	bf00      	nop
 8008fc4:	e7fe      	b.n	8008fc4 <xPortStartScheduler+0x24>
	configASSERT( portCPUID != portCORTEX_M7_r0p0_ID );
 8008fc6:	4b3e      	ldr	r3, [pc, #248]	; (80090c0 <xPortStartScheduler+0x120>)
 8008fc8:	681b      	ldr	r3, [r3, #0]
 8008fca:	4a3f      	ldr	r2, [pc, #252]	; (80090c8 <xPortStartScheduler+0x128>)
 8008fcc:	4293      	cmp	r3, r2
 8008fce:	d10a      	bne.n	8008fe6 <xPortStartScheduler+0x46>
	__asm volatile
 8008fd0:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008fd4:	f383 8811 	msr	BASEPRI, r3
 8008fd8:	f3bf 8f6f 	isb	sy
 8008fdc:	f3bf 8f4f 	dsb	sy
 8008fe0:	60fb      	str	r3, [r7, #12]
}
 8008fe2:	bf00      	nop
 8008fe4:	e7fe      	b.n	8008fe4 <xPortStartScheduler+0x44>

	#if( configASSERT_DEFINED == 1 )
	{
		volatile uint32_t ulOriginalPriority;
		volatile uint8_t * const pucFirstUserPriorityRegister = ( volatile uint8_t * const ) ( portNVIC_IP_REGISTERS_OFFSET_16 + portFIRST_USER_INTERRUPT_NUMBER );
 8008fe6:	4b39      	ldr	r3, [pc, #228]	; (80090cc <xPortStartScheduler+0x12c>)
 8008fe8:	617b      	str	r3, [r7, #20]
		functions can be called.  ISR safe functions are those that end in
		"FromISR".  FreeRTOS maintains separate thread and ISR API functions to
		ensure interrupt entry is as fast and simple as possible.

		Save the interrupt priority value that is about to be clobbered. */
		ulOriginalPriority = *pucFirstUserPriorityRegister;
 8008fea:	697b      	ldr	r3, [r7, #20]
 8008fec:	781b      	ldrb	r3, [r3, #0]
 8008fee:	b2db      	uxtb	r3, r3
 8008ff0:	607b      	str	r3, [r7, #4]

		/* Determine the number of priority bits available.  First write to all
		possible bits. */
		*pucFirstUserPriorityRegister = portMAX_8_BIT_VALUE;
 8008ff2:	697b      	ldr	r3, [r7, #20]
 8008ff4:	22ff      	movs	r2, #255	; 0xff
 8008ff6:	701a      	strb	r2, [r3, #0]

		/* Read the value back to see how many bits stuck. */
		ucMaxPriorityValue = *pucFirstUserPriorityRegister;
 8008ff8:	697b      	ldr	r3, [r7, #20]
 8008ffa:	781b      	ldrb	r3, [r3, #0]
 8008ffc:	b2db      	uxtb	r3, r3
 8008ffe:	70fb      	strb	r3, [r7, #3]

		/* Use the same mask on the maximum system call priority. */
		ucMaxSysCallPriority = configMAX_SYSCALL_INTERRUPT_PRIORITY & ucMaxPriorityValue;
 8009000:	78fb      	ldrb	r3, [r7, #3]
 8009002:	b2db      	uxtb	r3, r3
 8009004:	f003 0350 	and.w	r3, r3, #80	; 0x50
 8009008:	b2da      	uxtb	r2, r3
 800900a:	4b31      	ldr	r3, [pc, #196]	; (80090d0 <xPortStartScheduler+0x130>)
 800900c:	701a      	strb	r2, [r3, #0]

		/* Calculate the maximum acceptable priority group value for the number
		of bits read back. */
		ulMaxPRIGROUPValue = portMAX_PRIGROUP_BITS;
 800900e:	4b31      	ldr	r3, [pc, #196]	; (80090d4 <xPortStartScheduler+0x134>)
 8009010:	2207      	movs	r2, #7
 8009012:	601a      	str	r2, [r3, #0]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 8009014:	e009      	b.n	800902a <xPortStartScheduler+0x8a>
		{
			ulMaxPRIGROUPValue--;
 8009016:	4b2f      	ldr	r3, [pc, #188]	; (80090d4 <xPortStartScheduler+0x134>)
 8009018:	681b      	ldr	r3, [r3, #0]
 800901a:	3b01      	subs	r3, #1
 800901c:	4a2d      	ldr	r2, [pc, #180]	; (80090d4 <xPortStartScheduler+0x134>)
 800901e:	6013      	str	r3, [r2, #0]
			ucMaxPriorityValue <<= ( uint8_t ) 0x01;
 8009020:	78fb      	ldrb	r3, [r7, #3]
 8009022:	b2db      	uxtb	r3, r3
 8009024:	005b      	lsls	r3, r3, #1
 8009026:	b2db      	uxtb	r3, r3
 8009028:	70fb      	strb	r3, [r7, #3]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 800902a:	78fb      	ldrb	r3, [r7, #3]
 800902c:	b2db      	uxtb	r3, r3
 800902e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8009032:	2b80      	cmp	r3, #128	; 0x80
 8009034:	d0ef      	beq.n	8009016 <xPortStartScheduler+0x76>
		#ifdef configPRIO_BITS
		{
			/* Check the FreeRTOS configuration that defines the number of
			priority bits matches the number of priority bits actually queried
			from the hardware. */
			configASSERT( ( portMAX_PRIGROUP_BITS - ulMaxPRIGROUPValue ) == configPRIO_BITS );
 8009036:	4b27      	ldr	r3, [pc, #156]	; (80090d4 <xPortStartScheduler+0x134>)
 8009038:	681b      	ldr	r3, [r3, #0]
 800903a:	f1c3 0307 	rsb	r3, r3, #7
 800903e:	2b04      	cmp	r3, #4
 8009040:	d00a      	beq.n	8009058 <xPortStartScheduler+0xb8>
	__asm volatile
 8009042:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009046:	f383 8811 	msr	BASEPRI, r3
 800904a:	f3bf 8f6f 	isb	sy
 800904e:	f3bf 8f4f 	dsb	sy
 8009052:	60bb      	str	r3, [r7, #8]
}
 8009054:	bf00      	nop
 8009056:	e7fe      	b.n	8009056 <xPortStartScheduler+0xb6>
		}
		#endif

		/* Shift the priority group value back to its position within the AIRCR
		register. */
		ulMaxPRIGROUPValue <<= portPRIGROUP_SHIFT;
 8009058:	4b1e      	ldr	r3, [pc, #120]	; (80090d4 <xPortStartScheduler+0x134>)
 800905a:	681b      	ldr	r3, [r3, #0]
 800905c:	021b      	lsls	r3, r3, #8
 800905e:	4a1d      	ldr	r2, [pc, #116]	; (80090d4 <xPortStartScheduler+0x134>)
 8009060:	6013      	str	r3, [r2, #0]
		ulMaxPRIGROUPValue &= portPRIORITY_GROUP_MASK;
 8009062:	4b1c      	ldr	r3, [pc, #112]	; (80090d4 <xPortStartScheduler+0x134>)
 8009064:	681b      	ldr	r3, [r3, #0]
 8009066:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 800906a:	4a1a      	ldr	r2, [pc, #104]	; (80090d4 <xPortStartScheduler+0x134>)
 800906c:	6013      	str	r3, [r2, #0]

		/* Restore the clobbered interrupt priority register to its original
		value. */
		*pucFirstUserPriorityRegister = ulOriginalPriority;
 800906e:	687b      	ldr	r3, [r7, #4]
 8009070:	b2da      	uxtb	r2, r3
 8009072:	697b      	ldr	r3, [r7, #20]
 8009074:	701a      	strb	r2, [r3, #0]
	}
	#endif /* conifgASSERT_DEFINED */

	/* Make PendSV and SysTick the lowest priority interrupts. */
	portNVIC_SYSPRI2_REG |= portNVIC_PENDSV_PRI;
 8009076:	4b18      	ldr	r3, [pc, #96]	; (80090d8 <xPortStartScheduler+0x138>)
 8009078:	681b      	ldr	r3, [r3, #0]
 800907a:	4a17      	ldr	r2, [pc, #92]	; (80090d8 <xPortStartScheduler+0x138>)
 800907c:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8009080:	6013      	str	r3, [r2, #0]
	portNVIC_SYSPRI2_REG |= portNVIC_SYSTICK_PRI;
 8009082:	4b15      	ldr	r3, [pc, #84]	; (80090d8 <xPortStartScheduler+0x138>)
 8009084:	681b      	ldr	r3, [r3, #0]
 8009086:	4a14      	ldr	r2, [pc, #80]	; (80090d8 <xPortStartScheduler+0x138>)
 8009088:	f043 4370 	orr.w	r3, r3, #4026531840	; 0xf0000000
 800908c:	6013      	str	r3, [r2, #0]

	/* Start the timer that generates the tick ISR.  Interrupts are disabled
	here already. */
	vPortSetupTimerInterrupt();
 800908e:	f000 f8dd 	bl	800924c <vPortSetupTimerInterrupt>

	/* Initialise the critical nesting count ready for the first task. */
	uxCriticalNesting = 0;
 8009092:	4b12      	ldr	r3, [pc, #72]	; (80090dc <xPortStartScheduler+0x13c>)
 8009094:	2200      	movs	r2, #0
 8009096:	601a      	str	r2, [r3, #0]

	/* Ensure the VFP is enabled - it should be anyway. */
	vPortEnableVFP();
 8009098:	f000 f8fc 	bl	8009294 <vPortEnableVFP>

	/* Lazy save always. */
	*( portFPCCR ) |= portASPEN_AND_LSPEN_BITS;
 800909c:	4b10      	ldr	r3, [pc, #64]	; (80090e0 <xPortStartScheduler+0x140>)
 800909e:	681b      	ldr	r3, [r3, #0]
 80090a0:	4a0f      	ldr	r2, [pc, #60]	; (80090e0 <xPortStartScheduler+0x140>)
 80090a2:	f043 4340 	orr.w	r3, r3, #3221225472	; 0xc0000000
 80090a6:	6013      	str	r3, [r2, #0]

	/* Start the first task. */
	prvPortStartFirstTask();
 80090a8:	f7ff ff66 	bl	8008f78 <prvPortStartFirstTask>
	exit error function to prevent compiler warnings about a static function
	not being called in the case that the application writer overrides this
	functionality by defining configTASK_RETURN_ADDRESS.  Call
	vTaskSwitchContext() so link time optimisation does not remove the
	symbol. */
	vTaskSwitchContext();
 80090ac:	f7ff f82c 	bl	8008108 <vTaskSwitchContext>
	prvTaskExitError();
 80090b0:	f7ff ff1e 	bl	8008ef0 <prvTaskExitError>

	/* Should not get here! */
	return 0;
 80090b4:	2300      	movs	r3, #0
}
 80090b6:	4618      	mov	r0, r3
 80090b8:	3718      	adds	r7, #24
 80090ba:	46bd      	mov	sp, r7
 80090bc:	bd80      	pop	{r7, pc}
 80090be:	bf00      	nop
 80090c0:	e000ed00 	.word	0xe000ed00
 80090c4:	410fc271 	.word	0x410fc271
 80090c8:	410fc270 	.word	0x410fc270
 80090cc:	e000e400 	.word	0xe000e400
 80090d0:	200010b0 	.word	0x200010b0
 80090d4:	200010b4 	.word	0x200010b4
 80090d8:	e000ed20 	.word	0xe000ed20
 80090dc:	2000000c 	.word	0x2000000c
 80090e0:	e000ef34 	.word	0xe000ef34

080090e4 <vPortEnterCritical>:
	configASSERT( uxCriticalNesting == 1000UL );
}
/*-----------------------------------------------------------*/

void vPortEnterCritical( void )
{
 80090e4:	b480      	push	{r7}
 80090e6:	b083      	sub	sp, #12
 80090e8:	af00      	add	r7, sp, #0
	__asm volatile
 80090ea:	f04f 0350 	mov.w	r3, #80	; 0x50
 80090ee:	f383 8811 	msr	BASEPRI, r3
 80090f2:	f3bf 8f6f 	isb	sy
 80090f6:	f3bf 8f4f 	dsb	sy
 80090fa:	607b      	str	r3, [r7, #4]
}
 80090fc:	bf00      	nop
	portDISABLE_INTERRUPTS();
	uxCriticalNesting++;
 80090fe:	4b0f      	ldr	r3, [pc, #60]	; (800913c <vPortEnterCritical+0x58>)
 8009100:	681b      	ldr	r3, [r3, #0]
 8009102:	3301      	adds	r3, #1
 8009104:	4a0d      	ldr	r2, [pc, #52]	; (800913c <vPortEnterCritical+0x58>)
 8009106:	6013      	str	r3, [r2, #0]
	/* This is not the interrupt safe version of the enter critical function so
	assert() if it is being called from an interrupt context.  Only API
	functions that end in "FromISR" can be used in an interrupt.  Only assert if
	the critical nesting count is 1 to protect against recursive calls if the
	assert function also uses a critical section. */
	if( uxCriticalNesting == 1 )
 8009108:	4b0c      	ldr	r3, [pc, #48]	; (800913c <vPortEnterCritical+0x58>)
 800910a:	681b      	ldr	r3, [r3, #0]
 800910c:	2b01      	cmp	r3, #1
 800910e:	d10f      	bne.n	8009130 <vPortEnterCritical+0x4c>
	{
		configASSERT( ( portNVIC_INT_CTRL_REG & portVECTACTIVE_MASK ) == 0 );
 8009110:	4b0b      	ldr	r3, [pc, #44]	; (8009140 <vPortEnterCritical+0x5c>)
 8009112:	681b      	ldr	r3, [r3, #0]
 8009114:	b2db      	uxtb	r3, r3
 8009116:	2b00      	cmp	r3, #0
 8009118:	d00a      	beq.n	8009130 <vPortEnterCritical+0x4c>
	__asm volatile
 800911a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800911e:	f383 8811 	msr	BASEPRI, r3
 8009122:	f3bf 8f6f 	isb	sy
 8009126:	f3bf 8f4f 	dsb	sy
 800912a:	603b      	str	r3, [r7, #0]
}
 800912c:	bf00      	nop
 800912e:	e7fe      	b.n	800912e <vPortEnterCritical+0x4a>
	}
}
 8009130:	bf00      	nop
 8009132:	370c      	adds	r7, #12
 8009134:	46bd      	mov	sp, r7
 8009136:	f85d 7b04 	ldr.w	r7, [sp], #4
 800913a:	4770      	bx	lr
 800913c:	2000000c 	.word	0x2000000c
 8009140:	e000ed04 	.word	0xe000ed04

08009144 <vPortExitCritical>:
/*-----------------------------------------------------------*/

void vPortExitCritical( void )
{
 8009144:	b480      	push	{r7}
 8009146:	b083      	sub	sp, #12
 8009148:	af00      	add	r7, sp, #0
	configASSERT( uxCriticalNesting );
 800914a:	4b12      	ldr	r3, [pc, #72]	; (8009194 <vPortExitCritical+0x50>)
 800914c:	681b      	ldr	r3, [r3, #0]
 800914e:	2b00      	cmp	r3, #0
 8009150:	d10a      	bne.n	8009168 <vPortExitCritical+0x24>
	__asm volatile
 8009152:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009156:	f383 8811 	msr	BASEPRI, r3
 800915a:	f3bf 8f6f 	isb	sy
 800915e:	f3bf 8f4f 	dsb	sy
 8009162:	607b      	str	r3, [r7, #4]
}
 8009164:	bf00      	nop
 8009166:	e7fe      	b.n	8009166 <vPortExitCritical+0x22>
	uxCriticalNesting--;
 8009168:	4b0a      	ldr	r3, [pc, #40]	; (8009194 <vPortExitCritical+0x50>)
 800916a:	681b      	ldr	r3, [r3, #0]
 800916c:	3b01      	subs	r3, #1
 800916e:	4a09      	ldr	r2, [pc, #36]	; (8009194 <vPortExitCritical+0x50>)
 8009170:	6013      	str	r3, [r2, #0]
	if( uxCriticalNesting == 0 )
 8009172:	4b08      	ldr	r3, [pc, #32]	; (8009194 <vPortExitCritical+0x50>)
 8009174:	681b      	ldr	r3, [r3, #0]
 8009176:	2b00      	cmp	r3, #0
 8009178:	d105      	bne.n	8009186 <vPortExitCritical+0x42>
 800917a:	2300      	movs	r3, #0
 800917c:	603b      	str	r3, [r7, #0]
	__asm volatile
 800917e:	683b      	ldr	r3, [r7, #0]
 8009180:	f383 8811 	msr	BASEPRI, r3
}
 8009184:	bf00      	nop
	{
		portENABLE_INTERRUPTS();
	}
}
 8009186:	bf00      	nop
 8009188:	370c      	adds	r7, #12
 800918a:	46bd      	mov	sp, r7
 800918c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009190:	4770      	bx	lr
 8009192:	bf00      	nop
 8009194:	2000000c 	.word	0x2000000c
	...

080091a0 <PendSV_Handler>:

void xPortPendSVHandler( void )
{
	/* This is a naked function. */

	__asm volatile
 80091a0:	f3ef 8009 	mrs	r0, PSP
 80091a4:	f3bf 8f6f 	isb	sy
 80091a8:	4b15      	ldr	r3, [pc, #84]	; (8009200 <pxCurrentTCBConst>)
 80091aa:	681a      	ldr	r2, [r3, #0]
 80091ac:	f01e 0f10 	tst.w	lr, #16
 80091b0:	bf08      	it	eq
 80091b2:	ed20 8a10 	vstmdbeq	r0!, {s16-s31}
 80091b6:	e920 4ff0 	stmdb	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80091ba:	6010      	str	r0, [r2, #0]
 80091bc:	e92d 0009 	stmdb	sp!, {r0, r3}
 80091c0:	f04f 0050 	mov.w	r0, #80	; 0x50
 80091c4:	f380 8811 	msr	BASEPRI, r0
 80091c8:	f3bf 8f4f 	dsb	sy
 80091cc:	f3bf 8f6f 	isb	sy
 80091d0:	f7fe ff9a 	bl	8008108 <vTaskSwitchContext>
 80091d4:	f04f 0000 	mov.w	r0, #0
 80091d8:	f380 8811 	msr	BASEPRI, r0
 80091dc:	bc09      	pop	{r0, r3}
 80091de:	6819      	ldr	r1, [r3, #0]
 80091e0:	6808      	ldr	r0, [r1, #0]
 80091e2:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80091e6:	f01e 0f10 	tst.w	lr, #16
 80091ea:	bf08      	it	eq
 80091ec:	ecb0 8a10 	vldmiaeq	r0!, {s16-s31}
 80091f0:	f380 8809 	msr	PSP, r0
 80091f4:	f3bf 8f6f 	isb	sy
 80091f8:	4770      	bx	lr
 80091fa:	bf00      	nop
 80091fc:	f3af 8000 	nop.w

08009200 <pxCurrentTCBConst>:
 8009200:	20000a84 	.word	0x20000a84
	"										\n"
	"	.align 4							\n"
	"pxCurrentTCBConst: .word pxCurrentTCB	\n"
	::"i"(configMAX_SYSCALL_INTERRUPT_PRIORITY)
	);
}
 8009204:	bf00      	nop
 8009206:	bf00      	nop

08009208 <xPortSysTickHandler>:
/*-----------------------------------------------------------*/

void xPortSysTickHandler( void )
{
 8009208:	b580      	push	{r7, lr}
 800920a:	b082      	sub	sp, #8
 800920c:	af00      	add	r7, sp, #0
	__asm volatile
 800920e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009212:	f383 8811 	msr	BASEPRI, r3
 8009216:	f3bf 8f6f 	isb	sy
 800921a:	f3bf 8f4f 	dsb	sy
 800921e:	607b      	str	r3, [r7, #4]
}
 8009220:	bf00      	nop
	save and then restore the interrupt mask value as its value is already
	known. */
	portDISABLE_INTERRUPTS();
	{
		/* Increment the RTOS tick. */
		if( xTaskIncrementTick() != pdFALSE )
 8009222:	f7fe feb7 	bl	8007f94 <xTaskIncrementTick>
 8009226:	4603      	mov	r3, r0
 8009228:	2b00      	cmp	r3, #0
 800922a:	d003      	beq.n	8009234 <xPortSysTickHandler+0x2c>
		{
			/* A context switch is required.  Context switching is performed in
			the PendSV interrupt.  Pend the PendSV interrupt. */
			portNVIC_INT_CTRL_REG = portNVIC_PENDSVSET_BIT;
 800922c:	4b06      	ldr	r3, [pc, #24]	; (8009248 <xPortSysTickHandler+0x40>)
 800922e:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8009232:	601a      	str	r2, [r3, #0]
 8009234:	2300      	movs	r3, #0
 8009236:	603b      	str	r3, [r7, #0]
	__asm volatile
 8009238:	683b      	ldr	r3, [r7, #0]
 800923a:	f383 8811 	msr	BASEPRI, r3
}
 800923e:	bf00      	nop
		}
	}
	portENABLE_INTERRUPTS();
}
 8009240:	bf00      	nop
 8009242:	3708      	adds	r7, #8
 8009244:	46bd      	mov	sp, r7
 8009246:	bd80      	pop	{r7, pc}
 8009248:	e000ed04 	.word	0xe000ed04

0800924c <vPortSetupTimerInterrupt>:
/*
 * Setup the systick timer to generate the tick interrupts at the required
 * frequency.
 */
__attribute__(( weak )) void vPortSetupTimerInterrupt( void )
{
 800924c:	b480      	push	{r7}
 800924e:	af00      	add	r7, sp, #0
		ulStoppedTimerCompensation = portMISSED_COUNTS_FACTOR / ( configCPU_CLOCK_HZ / configSYSTICK_CLOCK_HZ );
	}
	#endif /* configUSE_TICKLESS_IDLE */

	/* Stop and clear the SysTick. */
	portNVIC_SYSTICK_CTRL_REG = 0UL;
 8009250:	4b0b      	ldr	r3, [pc, #44]	; (8009280 <vPortSetupTimerInterrupt+0x34>)
 8009252:	2200      	movs	r2, #0
 8009254:	601a      	str	r2, [r3, #0]
	portNVIC_SYSTICK_CURRENT_VALUE_REG = 0UL;
 8009256:	4b0b      	ldr	r3, [pc, #44]	; (8009284 <vPortSetupTimerInterrupt+0x38>)
 8009258:	2200      	movs	r2, #0
 800925a:	601a      	str	r2, [r3, #0]

	/* Configure SysTick to interrupt at the requested rate. */
	portNVIC_SYSTICK_LOAD_REG = ( configSYSTICK_CLOCK_HZ / configTICK_RATE_HZ ) - 1UL;
 800925c:	4b0a      	ldr	r3, [pc, #40]	; (8009288 <vPortSetupTimerInterrupt+0x3c>)
 800925e:	681b      	ldr	r3, [r3, #0]
 8009260:	4a0a      	ldr	r2, [pc, #40]	; (800928c <vPortSetupTimerInterrupt+0x40>)
 8009262:	fba2 2303 	umull	r2, r3, r2, r3
 8009266:	099b      	lsrs	r3, r3, #6
 8009268:	4a09      	ldr	r2, [pc, #36]	; (8009290 <vPortSetupTimerInterrupt+0x44>)
 800926a:	3b01      	subs	r3, #1
 800926c:	6013      	str	r3, [r2, #0]
	portNVIC_SYSTICK_CTRL_REG = ( portNVIC_SYSTICK_CLK_BIT | portNVIC_SYSTICK_INT_BIT | portNVIC_SYSTICK_ENABLE_BIT );
 800926e:	4b04      	ldr	r3, [pc, #16]	; (8009280 <vPortSetupTimerInterrupt+0x34>)
 8009270:	2207      	movs	r2, #7
 8009272:	601a      	str	r2, [r3, #0]
}
 8009274:	bf00      	nop
 8009276:	46bd      	mov	sp, r7
 8009278:	f85d 7b04 	ldr.w	r7, [sp], #4
 800927c:	4770      	bx	lr
 800927e:	bf00      	nop
 8009280:	e000e010 	.word	0xe000e010
 8009284:	e000e018 	.word	0xe000e018
 8009288:	20000000 	.word	0x20000000
 800928c:	10624dd3 	.word	0x10624dd3
 8009290:	e000e014 	.word	0xe000e014

08009294 <vPortEnableVFP>:
/*-----------------------------------------------------------*/

/* This is a naked function. */
static void vPortEnableVFP( void )
{
	__asm volatile
 8009294:	f8df 000c 	ldr.w	r0, [pc, #12]	; 80092a4 <vPortEnableVFP+0x10>
 8009298:	6801      	ldr	r1, [r0, #0]
 800929a:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 800929e:	6001      	str	r1, [r0, #0]
 80092a0:	4770      	bx	lr
		"								\n"
		"	orr r1, r1, #( 0xf << 20 )	\n" /* Enable CP10 and CP11 coprocessors, then save back. */
		"	str r1, [r0]				\n"
		"	bx r14						"
	);
}
 80092a2:	bf00      	nop
 80092a4:	e000ed88 	.word	0xe000ed88

080092a8 <vPortValidateInterruptPriority>:
/*-----------------------------------------------------------*/

#if( configASSERT_DEFINED == 1 )

	void vPortValidateInterruptPriority( void )
	{
 80092a8:	b480      	push	{r7}
 80092aa:	b085      	sub	sp, #20
 80092ac:	af00      	add	r7, sp, #0
	uint32_t ulCurrentInterrupt;
	uint8_t ucCurrentPriority;

		/* Obtain the number of the currently executing interrupt. */
		__asm volatile( "mrs %0, ipsr" : "=r"( ulCurrentInterrupt ) :: "memory" );
 80092ae:	f3ef 8305 	mrs	r3, IPSR
 80092b2:	60fb      	str	r3, [r7, #12]

		/* Is the interrupt number a user defined interrupt? */
		if( ulCurrentInterrupt >= portFIRST_USER_INTERRUPT_NUMBER )
 80092b4:	68fb      	ldr	r3, [r7, #12]
 80092b6:	2b0f      	cmp	r3, #15
 80092b8:	d914      	bls.n	80092e4 <vPortValidateInterruptPriority+0x3c>
		{
			/* Look up the interrupt's priority. */
			ucCurrentPriority = pcInterruptPriorityRegisters[ ulCurrentInterrupt ];
 80092ba:	4a17      	ldr	r2, [pc, #92]	; (8009318 <vPortValidateInterruptPriority+0x70>)
 80092bc:	68fb      	ldr	r3, [r7, #12]
 80092be:	4413      	add	r3, r2
 80092c0:	781b      	ldrb	r3, [r3, #0]
 80092c2:	72fb      	strb	r3, [r7, #11]
			interrupt entry is as fast and simple as possible.

			The following links provide detailed information:
			http://www.freertos.org/RTOS-Cortex-M3-M4.html
			http://www.freertos.org/FAQHelp.html */
			configASSERT( ucCurrentPriority >= ucMaxSysCallPriority );
 80092c4:	4b15      	ldr	r3, [pc, #84]	; (800931c <vPortValidateInterruptPriority+0x74>)
 80092c6:	781b      	ldrb	r3, [r3, #0]
 80092c8:	7afa      	ldrb	r2, [r7, #11]
 80092ca:	429a      	cmp	r2, r3
 80092cc:	d20a      	bcs.n	80092e4 <vPortValidateInterruptPriority+0x3c>
	__asm volatile
 80092ce:	f04f 0350 	mov.w	r3, #80	; 0x50
 80092d2:	f383 8811 	msr	BASEPRI, r3
 80092d6:	f3bf 8f6f 	isb	sy
 80092da:	f3bf 8f4f 	dsb	sy
 80092de:	607b      	str	r3, [r7, #4]
}
 80092e0:	bf00      	nop
 80092e2:	e7fe      	b.n	80092e2 <vPortValidateInterruptPriority+0x3a>
		configuration then the correct setting can be achieved on all Cortex-M
		devices by calling NVIC_SetPriorityGrouping( 0 ); before starting the
		scheduler.  Note however that some vendor specific peripheral libraries
		assume a non-zero priority group setting, in which cases using a value
		of zero will result in unpredictable behaviour. */
		configASSERT( ( portAIRCR_REG & portPRIORITY_GROUP_MASK ) <= ulMaxPRIGROUPValue );
 80092e4:	4b0e      	ldr	r3, [pc, #56]	; (8009320 <vPortValidateInterruptPriority+0x78>)
 80092e6:	681b      	ldr	r3, [r3, #0]
 80092e8:	f403 62e0 	and.w	r2, r3, #1792	; 0x700
 80092ec:	4b0d      	ldr	r3, [pc, #52]	; (8009324 <vPortValidateInterruptPriority+0x7c>)
 80092ee:	681b      	ldr	r3, [r3, #0]
 80092f0:	429a      	cmp	r2, r3
 80092f2:	d90a      	bls.n	800930a <vPortValidateInterruptPriority+0x62>
	__asm volatile
 80092f4:	f04f 0350 	mov.w	r3, #80	; 0x50
 80092f8:	f383 8811 	msr	BASEPRI, r3
 80092fc:	f3bf 8f6f 	isb	sy
 8009300:	f3bf 8f4f 	dsb	sy
 8009304:	603b      	str	r3, [r7, #0]
}
 8009306:	bf00      	nop
 8009308:	e7fe      	b.n	8009308 <vPortValidateInterruptPriority+0x60>
	}
 800930a:	bf00      	nop
 800930c:	3714      	adds	r7, #20
 800930e:	46bd      	mov	sp, r7
 8009310:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009314:	4770      	bx	lr
 8009316:	bf00      	nop
 8009318:	e000e3f0 	.word	0xe000e3f0
 800931c:	200010b0 	.word	0x200010b0
 8009320:	e000ed0c 	.word	0xe000ed0c
 8009324:	200010b4 	.word	0x200010b4

08009328 <pvPortMalloc>:
static size_t xBlockAllocatedBit = 0;

/*-----------------------------------------------------------*/

void *pvPortMalloc( size_t xWantedSize )
{
 8009328:	b580      	push	{r7, lr}
 800932a:	b08a      	sub	sp, #40	; 0x28
 800932c:	af00      	add	r7, sp, #0
 800932e:	6078      	str	r0, [r7, #4]
BlockLink_t *pxBlock, *pxPreviousBlock, *pxNewBlockLink;
void *pvReturn = NULL;
 8009330:	2300      	movs	r3, #0
 8009332:	61fb      	str	r3, [r7, #28]

	vTaskSuspendAll();
 8009334:	f7fe fd72 	bl	8007e1c <vTaskSuspendAll>
	{
		/* If this is the first call to malloc then the heap will require
		initialisation to setup the list of free blocks. */
		if( pxEnd == NULL )
 8009338:	4b5d      	ldr	r3, [pc, #372]	; (80094b0 <pvPortMalloc+0x188>)
 800933a:	681b      	ldr	r3, [r3, #0]
 800933c:	2b00      	cmp	r3, #0
 800933e:	d101      	bne.n	8009344 <pvPortMalloc+0x1c>
		{
			prvHeapInit();
 8009340:	f000 f924 	bl	800958c <prvHeapInit>

		/* Check the requested block size is not so large that the top bit is
		set.  The top bit of the block size member of the BlockLink_t structure
		is used to determine who owns the block - the application or the
		kernel, so it must be free. */
		if( ( xWantedSize & xBlockAllocatedBit ) == 0 )
 8009344:	4b5b      	ldr	r3, [pc, #364]	; (80094b4 <pvPortMalloc+0x18c>)
 8009346:	681a      	ldr	r2, [r3, #0]
 8009348:	687b      	ldr	r3, [r7, #4]
 800934a:	4013      	ands	r3, r2
 800934c:	2b00      	cmp	r3, #0
 800934e:	f040 8093 	bne.w	8009478 <pvPortMalloc+0x150>
		{
			/* The wanted size is increased so it can contain a BlockLink_t
			structure in addition to the requested amount of bytes. */
			if( xWantedSize > 0 )
 8009352:	687b      	ldr	r3, [r7, #4]
 8009354:	2b00      	cmp	r3, #0
 8009356:	d01d      	beq.n	8009394 <pvPortMalloc+0x6c>
			{
				xWantedSize += xHeapStructSize;
 8009358:	2208      	movs	r2, #8
 800935a:	687b      	ldr	r3, [r7, #4]
 800935c:	4413      	add	r3, r2
 800935e:	607b      	str	r3, [r7, #4]

				/* Ensure that blocks are always aligned to the required number
				of bytes. */
				if( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) != 0x00 )
 8009360:	687b      	ldr	r3, [r7, #4]
 8009362:	f003 0307 	and.w	r3, r3, #7
 8009366:	2b00      	cmp	r3, #0
 8009368:	d014      	beq.n	8009394 <pvPortMalloc+0x6c>
				{
					/* Byte alignment required. */
					xWantedSize += ( portBYTE_ALIGNMENT - ( xWantedSize & portBYTE_ALIGNMENT_MASK ) );
 800936a:	687b      	ldr	r3, [r7, #4]
 800936c:	f023 0307 	bic.w	r3, r3, #7
 8009370:	3308      	adds	r3, #8
 8009372:	607b      	str	r3, [r7, #4]
					configASSERT( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) == 0 );
 8009374:	687b      	ldr	r3, [r7, #4]
 8009376:	f003 0307 	and.w	r3, r3, #7
 800937a:	2b00      	cmp	r3, #0
 800937c:	d00a      	beq.n	8009394 <pvPortMalloc+0x6c>
	__asm volatile
 800937e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009382:	f383 8811 	msr	BASEPRI, r3
 8009386:	f3bf 8f6f 	isb	sy
 800938a:	f3bf 8f4f 	dsb	sy
 800938e:	617b      	str	r3, [r7, #20]
}
 8009390:	bf00      	nop
 8009392:	e7fe      	b.n	8009392 <pvPortMalloc+0x6a>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}

			if( ( xWantedSize > 0 ) && ( xWantedSize <= xFreeBytesRemaining ) )
 8009394:	687b      	ldr	r3, [r7, #4]
 8009396:	2b00      	cmp	r3, #0
 8009398:	d06e      	beq.n	8009478 <pvPortMalloc+0x150>
 800939a:	4b47      	ldr	r3, [pc, #284]	; (80094b8 <pvPortMalloc+0x190>)
 800939c:	681b      	ldr	r3, [r3, #0]
 800939e:	687a      	ldr	r2, [r7, #4]
 80093a0:	429a      	cmp	r2, r3
 80093a2:	d869      	bhi.n	8009478 <pvPortMalloc+0x150>
			{
				/* Traverse the list from the start	(lowest address) block until
				one	of adequate size is found. */
				pxPreviousBlock = &xStart;
 80093a4:	4b45      	ldr	r3, [pc, #276]	; (80094bc <pvPortMalloc+0x194>)
 80093a6:	623b      	str	r3, [r7, #32]
				pxBlock = xStart.pxNextFreeBlock;
 80093a8:	4b44      	ldr	r3, [pc, #272]	; (80094bc <pvPortMalloc+0x194>)
 80093aa:	681b      	ldr	r3, [r3, #0]
 80093ac:	627b      	str	r3, [r7, #36]	; 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 80093ae:	e004      	b.n	80093ba <pvPortMalloc+0x92>
				{
					pxPreviousBlock = pxBlock;
 80093b0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80093b2:	623b      	str	r3, [r7, #32]
					pxBlock = pxBlock->pxNextFreeBlock;
 80093b4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80093b6:	681b      	ldr	r3, [r3, #0]
 80093b8:	627b      	str	r3, [r7, #36]	; 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 80093ba:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80093bc:	685b      	ldr	r3, [r3, #4]
 80093be:	687a      	ldr	r2, [r7, #4]
 80093c0:	429a      	cmp	r2, r3
 80093c2:	d903      	bls.n	80093cc <pvPortMalloc+0xa4>
 80093c4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80093c6:	681b      	ldr	r3, [r3, #0]
 80093c8:	2b00      	cmp	r3, #0
 80093ca:	d1f1      	bne.n	80093b0 <pvPortMalloc+0x88>
				}

				/* If the end marker was reached then a block of adequate size
				was	not found. */
				if( pxBlock != pxEnd )
 80093cc:	4b38      	ldr	r3, [pc, #224]	; (80094b0 <pvPortMalloc+0x188>)
 80093ce:	681b      	ldr	r3, [r3, #0]
 80093d0:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80093d2:	429a      	cmp	r2, r3
 80093d4:	d050      	beq.n	8009478 <pvPortMalloc+0x150>
				{
					/* Return the memory space pointed to - jumping over the
					BlockLink_t structure at its start. */
					pvReturn = ( void * ) ( ( ( uint8_t * ) pxPreviousBlock->pxNextFreeBlock ) + xHeapStructSize );
 80093d6:	6a3b      	ldr	r3, [r7, #32]
 80093d8:	681b      	ldr	r3, [r3, #0]
 80093da:	2208      	movs	r2, #8
 80093dc:	4413      	add	r3, r2
 80093de:	61fb      	str	r3, [r7, #28]

					/* This block is being returned for use so must be taken out
					of the list of free blocks. */
					pxPreviousBlock->pxNextFreeBlock = pxBlock->pxNextFreeBlock;
 80093e0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80093e2:	681a      	ldr	r2, [r3, #0]
 80093e4:	6a3b      	ldr	r3, [r7, #32]
 80093e6:	601a      	str	r2, [r3, #0]

					/* If the block is larger than required it can be split into
					two. */
					if( ( pxBlock->xBlockSize - xWantedSize ) > heapMINIMUM_BLOCK_SIZE )
 80093e8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80093ea:	685a      	ldr	r2, [r3, #4]
 80093ec:	687b      	ldr	r3, [r7, #4]
 80093ee:	1ad2      	subs	r2, r2, r3
 80093f0:	2308      	movs	r3, #8
 80093f2:	005b      	lsls	r3, r3, #1
 80093f4:	429a      	cmp	r2, r3
 80093f6:	d91f      	bls.n	8009438 <pvPortMalloc+0x110>
					{
						/* This block is to be split into two.  Create a new
						block following the number of bytes requested. The void
						cast is used to prevent byte alignment warnings from the
						compiler. */
						pxNewBlockLink = ( void * ) ( ( ( uint8_t * ) pxBlock ) + xWantedSize );
 80093f8:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80093fa:	687b      	ldr	r3, [r7, #4]
 80093fc:	4413      	add	r3, r2
 80093fe:	61bb      	str	r3, [r7, #24]
						configASSERT( ( ( ( size_t ) pxNewBlockLink ) & portBYTE_ALIGNMENT_MASK ) == 0 );
 8009400:	69bb      	ldr	r3, [r7, #24]
 8009402:	f003 0307 	and.w	r3, r3, #7
 8009406:	2b00      	cmp	r3, #0
 8009408:	d00a      	beq.n	8009420 <pvPortMalloc+0xf8>
	__asm volatile
 800940a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800940e:	f383 8811 	msr	BASEPRI, r3
 8009412:	f3bf 8f6f 	isb	sy
 8009416:	f3bf 8f4f 	dsb	sy
 800941a:	613b      	str	r3, [r7, #16]
}
 800941c:	bf00      	nop
 800941e:	e7fe      	b.n	800941e <pvPortMalloc+0xf6>

						/* Calculate the sizes of two blocks split from the
						single block. */
						pxNewBlockLink->xBlockSize = pxBlock->xBlockSize - xWantedSize;
 8009420:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009422:	685a      	ldr	r2, [r3, #4]
 8009424:	687b      	ldr	r3, [r7, #4]
 8009426:	1ad2      	subs	r2, r2, r3
 8009428:	69bb      	ldr	r3, [r7, #24]
 800942a:	605a      	str	r2, [r3, #4]
						pxBlock->xBlockSize = xWantedSize;
 800942c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800942e:	687a      	ldr	r2, [r7, #4]
 8009430:	605a      	str	r2, [r3, #4]

						/* Insert the new block into the list of free blocks. */
						prvInsertBlockIntoFreeList( pxNewBlockLink );
 8009432:	69b8      	ldr	r0, [r7, #24]
 8009434:	f000 f90c 	bl	8009650 <prvInsertBlockIntoFreeList>
					else
					{
						mtCOVERAGE_TEST_MARKER();
					}

					xFreeBytesRemaining -= pxBlock->xBlockSize;
 8009438:	4b1f      	ldr	r3, [pc, #124]	; (80094b8 <pvPortMalloc+0x190>)
 800943a:	681a      	ldr	r2, [r3, #0]
 800943c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800943e:	685b      	ldr	r3, [r3, #4]
 8009440:	1ad3      	subs	r3, r2, r3
 8009442:	4a1d      	ldr	r2, [pc, #116]	; (80094b8 <pvPortMalloc+0x190>)
 8009444:	6013      	str	r3, [r2, #0]

					if( xFreeBytesRemaining < xMinimumEverFreeBytesRemaining )
 8009446:	4b1c      	ldr	r3, [pc, #112]	; (80094b8 <pvPortMalloc+0x190>)
 8009448:	681a      	ldr	r2, [r3, #0]
 800944a:	4b1d      	ldr	r3, [pc, #116]	; (80094c0 <pvPortMalloc+0x198>)
 800944c:	681b      	ldr	r3, [r3, #0]
 800944e:	429a      	cmp	r2, r3
 8009450:	d203      	bcs.n	800945a <pvPortMalloc+0x132>
					{
						xMinimumEverFreeBytesRemaining = xFreeBytesRemaining;
 8009452:	4b19      	ldr	r3, [pc, #100]	; (80094b8 <pvPortMalloc+0x190>)
 8009454:	681b      	ldr	r3, [r3, #0]
 8009456:	4a1a      	ldr	r2, [pc, #104]	; (80094c0 <pvPortMalloc+0x198>)
 8009458:	6013      	str	r3, [r2, #0]
						mtCOVERAGE_TEST_MARKER();
					}

					/* The block is being returned - it is allocated and owned
					by the application and has no "next" block. */
					pxBlock->xBlockSize |= xBlockAllocatedBit;
 800945a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800945c:	685a      	ldr	r2, [r3, #4]
 800945e:	4b15      	ldr	r3, [pc, #84]	; (80094b4 <pvPortMalloc+0x18c>)
 8009460:	681b      	ldr	r3, [r3, #0]
 8009462:	431a      	orrs	r2, r3
 8009464:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009466:	605a      	str	r2, [r3, #4]
					pxBlock->pxNextFreeBlock = NULL;
 8009468:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800946a:	2200      	movs	r2, #0
 800946c:	601a      	str	r2, [r3, #0]
					xNumberOfSuccessfulAllocations++;
 800946e:	4b15      	ldr	r3, [pc, #84]	; (80094c4 <pvPortMalloc+0x19c>)
 8009470:	681b      	ldr	r3, [r3, #0]
 8009472:	3301      	adds	r3, #1
 8009474:	4a13      	ldr	r2, [pc, #76]	; (80094c4 <pvPortMalloc+0x19c>)
 8009476:	6013      	str	r3, [r2, #0]
			mtCOVERAGE_TEST_MARKER();
		}

		traceMALLOC( pvReturn, xWantedSize );
	}
	( void ) xTaskResumeAll();
 8009478:	f7fe fcde 	bl	8007e38 <xTaskResumeAll>

	#if( configUSE_MALLOC_FAILED_HOOK == 1 )
	{
		if( pvReturn == NULL )
 800947c:	69fb      	ldr	r3, [r7, #28]
 800947e:	2b00      	cmp	r3, #0
 8009480:	d101      	bne.n	8009486 <pvPortMalloc+0x15e>
		{
			extern void vApplicationMallocFailedHook( void );
			vApplicationMallocFailedHook();
 8009482:	f7f7 f899 	bl	80005b8 <vApplicationMallocFailedHook>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif

	configASSERT( ( ( ( size_t ) pvReturn ) & ( size_t ) portBYTE_ALIGNMENT_MASK ) == 0 );
 8009486:	69fb      	ldr	r3, [r7, #28]
 8009488:	f003 0307 	and.w	r3, r3, #7
 800948c:	2b00      	cmp	r3, #0
 800948e:	d00a      	beq.n	80094a6 <pvPortMalloc+0x17e>
	__asm volatile
 8009490:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009494:	f383 8811 	msr	BASEPRI, r3
 8009498:	f3bf 8f6f 	isb	sy
 800949c:	f3bf 8f4f 	dsb	sy
 80094a0:	60fb      	str	r3, [r7, #12]
}
 80094a2:	bf00      	nop
 80094a4:	e7fe      	b.n	80094a4 <pvPortMalloc+0x17c>
	return pvReturn;
 80094a6:	69fb      	ldr	r3, [r7, #28]
}
 80094a8:	4618      	mov	r0, r3
 80094aa:	3728      	adds	r7, #40	; 0x28
 80094ac:	46bd      	mov	sp, r7
 80094ae:	bd80      	pop	{r7, pc}
 80094b0:	200090c0 	.word	0x200090c0
 80094b4:	200090d4 	.word	0x200090d4
 80094b8:	200090c4 	.word	0x200090c4
 80094bc:	200090b8 	.word	0x200090b8
 80094c0:	200090c8 	.word	0x200090c8
 80094c4:	200090cc 	.word	0x200090cc

080094c8 <vPortFree>:
/*-----------------------------------------------------------*/

void vPortFree( void *pv )
{
 80094c8:	b580      	push	{r7, lr}
 80094ca:	b086      	sub	sp, #24
 80094cc:	af00      	add	r7, sp, #0
 80094ce:	6078      	str	r0, [r7, #4]
uint8_t *puc = ( uint8_t * ) pv;
 80094d0:	687b      	ldr	r3, [r7, #4]
 80094d2:	617b      	str	r3, [r7, #20]
BlockLink_t *pxLink;

	if( pv != NULL )
 80094d4:	687b      	ldr	r3, [r7, #4]
 80094d6:	2b00      	cmp	r3, #0
 80094d8:	d04d      	beq.n	8009576 <vPortFree+0xae>
	{
		/* The memory being freed will have an BlockLink_t structure immediately
		before it. */
		puc -= xHeapStructSize;
 80094da:	2308      	movs	r3, #8
 80094dc:	425b      	negs	r3, r3
 80094de:	697a      	ldr	r2, [r7, #20]
 80094e0:	4413      	add	r3, r2
 80094e2:	617b      	str	r3, [r7, #20]

		/* This casting is to keep the compiler from issuing warnings. */
		pxLink = ( void * ) puc;
 80094e4:	697b      	ldr	r3, [r7, #20]
 80094e6:	613b      	str	r3, [r7, #16]

		/* Check the block is actually allocated. */
		configASSERT( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 );
 80094e8:	693b      	ldr	r3, [r7, #16]
 80094ea:	685a      	ldr	r2, [r3, #4]
 80094ec:	4b24      	ldr	r3, [pc, #144]	; (8009580 <vPortFree+0xb8>)
 80094ee:	681b      	ldr	r3, [r3, #0]
 80094f0:	4013      	ands	r3, r2
 80094f2:	2b00      	cmp	r3, #0
 80094f4:	d10a      	bne.n	800950c <vPortFree+0x44>
	__asm volatile
 80094f6:	f04f 0350 	mov.w	r3, #80	; 0x50
 80094fa:	f383 8811 	msr	BASEPRI, r3
 80094fe:	f3bf 8f6f 	isb	sy
 8009502:	f3bf 8f4f 	dsb	sy
 8009506:	60fb      	str	r3, [r7, #12]
}
 8009508:	bf00      	nop
 800950a:	e7fe      	b.n	800950a <vPortFree+0x42>
		configASSERT( pxLink->pxNextFreeBlock == NULL );
 800950c:	693b      	ldr	r3, [r7, #16]
 800950e:	681b      	ldr	r3, [r3, #0]
 8009510:	2b00      	cmp	r3, #0
 8009512:	d00a      	beq.n	800952a <vPortFree+0x62>
	__asm volatile
 8009514:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009518:	f383 8811 	msr	BASEPRI, r3
 800951c:	f3bf 8f6f 	isb	sy
 8009520:	f3bf 8f4f 	dsb	sy
 8009524:	60bb      	str	r3, [r7, #8]
}
 8009526:	bf00      	nop
 8009528:	e7fe      	b.n	8009528 <vPortFree+0x60>

		if( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 )
 800952a:	693b      	ldr	r3, [r7, #16]
 800952c:	685a      	ldr	r2, [r3, #4]
 800952e:	4b14      	ldr	r3, [pc, #80]	; (8009580 <vPortFree+0xb8>)
 8009530:	681b      	ldr	r3, [r3, #0]
 8009532:	4013      	ands	r3, r2
 8009534:	2b00      	cmp	r3, #0
 8009536:	d01e      	beq.n	8009576 <vPortFree+0xae>
		{
			if( pxLink->pxNextFreeBlock == NULL )
 8009538:	693b      	ldr	r3, [r7, #16]
 800953a:	681b      	ldr	r3, [r3, #0]
 800953c:	2b00      	cmp	r3, #0
 800953e:	d11a      	bne.n	8009576 <vPortFree+0xae>
			{
				/* The block is being returned to the heap - it is no longer
				allocated. */
				pxLink->xBlockSize &= ~xBlockAllocatedBit;
 8009540:	693b      	ldr	r3, [r7, #16]
 8009542:	685a      	ldr	r2, [r3, #4]
 8009544:	4b0e      	ldr	r3, [pc, #56]	; (8009580 <vPortFree+0xb8>)
 8009546:	681b      	ldr	r3, [r3, #0]
 8009548:	43db      	mvns	r3, r3
 800954a:	401a      	ands	r2, r3
 800954c:	693b      	ldr	r3, [r7, #16]
 800954e:	605a      	str	r2, [r3, #4]

				vTaskSuspendAll();
 8009550:	f7fe fc64 	bl	8007e1c <vTaskSuspendAll>
				{
					/* Add this block to the list of free blocks. */
					xFreeBytesRemaining += pxLink->xBlockSize;
 8009554:	693b      	ldr	r3, [r7, #16]
 8009556:	685a      	ldr	r2, [r3, #4]
 8009558:	4b0a      	ldr	r3, [pc, #40]	; (8009584 <vPortFree+0xbc>)
 800955a:	681b      	ldr	r3, [r3, #0]
 800955c:	4413      	add	r3, r2
 800955e:	4a09      	ldr	r2, [pc, #36]	; (8009584 <vPortFree+0xbc>)
 8009560:	6013      	str	r3, [r2, #0]
					traceFREE( pv, pxLink->xBlockSize );
					prvInsertBlockIntoFreeList( ( ( BlockLink_t * ) pxLink ) );
 8009562:	6938      	ldr	r0, [r7, #16]
 8009564:	f000 f874 	bl	8009650 <prvInsertBlockIntoFreeList>
					xNumberOfSuccessfulFrees++;
 8009568:	4b07      	ldr	r3, [pc, #28]	; (8009588 <vPortFree+0xc0>)
 800956a:	681b      	ldr	r3, [r3, #0]
 800956c:	3301      	adds	r3, #1
 800956e:	4a06      	ldr	r2, [pc, #24]	; (8009588 <vPortFree+0xc0>)
 8009570:	6013      	str	r3, [r2, #0]
				}
				( void ) xTaskResumeAll();
 8009572:	f7fe fc61 	bl	8007e38 <xTaskResumeAll>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
}
 8009576:	bf00      	nop
 8009578:	3718      	adds	r7, #24
 800957a:	46bd      	mov	sp, r7
 800957c:	bd80      	pop	{r7, pc}
 800957e:	bf00      	nop
 8009580:	200090d4 	.word	0x200090d4
 8009584:	200090c4 	.word	0x200090c4
 8009588:	200090d0 	.word	0x200090d0

0800958c <prvHeapInit>:
	/* This just exists to keep the linker quiet. */
}
/*-----------------------------------------------------------*/

static void prvHeapInit( void )
{
 800958c:	b480      	push	{r7}
 800958e:	b085      	sub	sp, #20
 8009590:	af00      	add	r7, sp, #0
BlockLink_t *pxFirstFreeBlock;
uint8_t *pucAlignedHeap;
size_t uxAddress;
size_t xTotalHeapSize = configTOTAL_HEAP_SIZE;
 8009592:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8009596:	60bb      	str	r3, [r7, #8]

	/* Ensure the heap starts on a correctly aligned boundary. */
	uxAddress = ( size_t ) ucHeap;
 8009598:	4b27      	ldr	r3, [pc, #156]	; (8009638 <prvHeapInit+0xac>)
 800959a:	60fb      	str	r3, [r7, #12]

	if( ( uxAddress & portBYTE_ALIGNMENT_MASK ) != 0 )
 800959c:	68fb      	ldr	r3, [r7, #12]
 800959e:	f003 0307 	and.w	r3, r3, #7
 80095a2:	2b00      	cmp	r3, #0
 80095a4:	d00c      	beq.n	80095c0 <prvHeapInit+0x34>
	{
		uxAddress += ( portBYTE_ALIGNMENT - 1 );
 80095a6:	68fb      	ldr	r3, [r7, #12]
 80095a8:	3307      	adds	r3, #7
 80095aa:	60fb      	str	r3, [r7, #12]
		uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 80095ac:	68fb      	ldr	r3, [r7, #12]
 80095ae:	f023 0307 	bic.w	r3, r3, #7
 80095b2:	60fb      	str	r3, [r7, #12]
		xTotalHeapSize -= uxAddress - ( size_t ) ucHeap;
 80095b4:	68ba      	ldr	r2, [r7, #8]
 80095b6:	68fb      	ldr	r3, [r7, #12]
 80095b8:	1ad3      	subs	r3, r2, r3
 80095ba:	4a1f      	ldr	r2, [pc, #124]	; (8009638 <prvHeapInit+0xac>)
 80095bc:	4413      	add	r3, r2
 80095be:	60bb      	str	r3, [r7, #8]
	}

	pucAlignedHeap = ( uint8_t * ) uxAddress;
 80095c0:	68fb      	ldr	r3, [r7, #12]
 80095c2:	607b      	str	r3, [r7, #4]

	/* xStart is used to hold a pointer to the first item in the list of free
	blocks.  The void cast is used to prevent compiler warnings. */
	xStart.pxNextFreeBlock = ( void * ) pucAlignedHeap;
 80095c4:	4a1d      	ldr	r2, [pc, #116]	; (800963c <prvHeapInit+0xb0>)
 80095c6:	687b      	ldr	r3, [r7, #4]
 80095c8:	6013      	str	r3, [r2, #0]
	xStart.xBlockSize = ( size_t ) 0;
 80095ca:	4b1c      	ldr	r3, [pc, #112]	; (800963c <prvHeapInit+0xb0>)
 80095cc:	2200      	movs	r2, #0
 80095ce:	605a      	str	r2, [r3, #4]

	/* pxEnd is used to mark the end of the list of free blocks and is inserted
	at the end of the heap space. */
	uxAddress = ( ( size_t ) pucAlignedHeap ) + xTotalHeapSize;
 80095d0:	687b      	ldr	r3, [r7, #4]
 80095d2:	68ba      	ldr	r2, [r7, #8]
 80095d4:	4413      	add	r3, r2
 80095d6:	60fb      	str	r3, [r7, #12]
	uxAddress -= xHeapStructSize;
 80095d8:	2208      	movs	r2, #8
 80095da:	68fb      	ldr	r3, [r7, #12]
 80095dc:	1a9b      	subs	r3, r3, r2
 80095de:	60fb      	str	r3, [r7, #12]
	uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 80095e0:	68fb      	ldr	r3, [r7, #12]
 80095e2:	f023 0307 	bic.w	r3, r3, #7
 80095e6:	60fb      	str	r3, [r7, #12]
	pxEnd = ( void * ) uxAddress;
 80095e8:	68fb      	ldr	r3, [r7, #12]
 80095ea:	4a15      	ldr	r2, [pc, #84]	; (8009640 <prvHeapInit+0xb4>)
 80095ec:	6013      	str	r3, [r2, #0]
	pxEnd->xBlockSize = 0;
 80095ee:	4b14      	ldr	r3, [pc, #80]	; (8009640 <prvHeapInit+0xb4>)
 80095f0:	681b      	ldr	r3, [r3, #0]
 80095f2:	2200      	movs	r2, #0
 80095f4:	605a      	str	r2, [r3, #4]
	pxEnd->pxNextFreeBlock = NULL;
 80095f6:	4b12      	ldr	r3, [pc, #72]	; (8009640 <prvHeapInit+0xb4>)
 80095f8:	681b      	ldr	r3, [r3, #0]
 80095fa:	2200      	movs	r2, #0
 80095fc:	601a      	str	r2, [r3, #0]

	/* To start with there is a single free block that is sized to take up the
	entire heap space, minus the space taken by pxEnd. */
	pxFirstFreeBlock = ( void * ) pucAlignedHeap;
 80095fe:	687b      	ldr	r3, [r7, #4]
 8009600:	603b      	str	r3, [r7, #0]
	pxFirstFreeBlock->xBlockSize = uxAddress - ( size_t ) pxFirstFreeBlock;
 8009602:	683b      	ldr	r3, [r7, #0]
 8009604:	68fa      	ldr	r2, [r7, #12]
 8009606:	1ad2      	subs	r2, r2, r3
 8009608:	683b      	ldr	r3, [r7, #0]
 800960a:	605a      	str	r2, [r3, #4]
	pxFirstFreeBlock->pxNextFreeBlock = pxEnd;
 800960c:	4b0c      	ldr	r3, [pc, #48]	; (8009640 <prvHeapInit+0xb4>)
 800960e:	681a      	ldr	r2, [r3, #0]
 8009610:	683b      	ldr	r3, [r7, #0]
 8009612:	601a      	str	r2, [r3, #0]

	/* Only one block exists - and it covers the entire usable heap space. */
	xMinimumEverFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 8009614:	683b      	ldr	r3, [r7, #0]
 8009616:	685b      	ldr	r3, [r3, #4]
 8009618:	4a0a      	ldr	r2, [pc, #40]	; (8009644 <prvHeapInit+0xb8>)
 800961a:	6013      	str	r3, [r2, #0]
	xFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 800961c:	683b      	ldr	r3, [r7, #0]
 800961e:	685b      	ldr	r3, [r3, #4]
 8009620:	4a09      	ldr	r2, [pc, #36]	; (8009648 <prvHeapInit+0xbc>)
 8009622:	6013      	str	r3, [r2, #0]

	/* Work out the position of the top bit in a size_t variable. */
	xBlockAllocatedBit = ( ( size_t ) 1 ) << ( ( sizeof( size_t ) * heapBITS_PER_BYTE ) - 1 );
 8009624:	4b09      	ldr	r3, [pc, #36]	; (800964c <prvHeapInit+0xc0>)
 8009626:	f04f 4200 	mov.w	r2, #2147483648	; 0x80000000
 800962a:	601a      	str	r2, [r3, #0]
}
 800962c:	bf00      	nop
 800962e:	3714      	adds	r7, #20
 8009630:	46bd      	mov	sp, r7
 8009632:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009636:	4770      	bx	lr
 8009638:	200010b8 	.word	0x200010b8
 800963c:	200090b8 	.word	0x200090b8
 8009640:	200090c0 	.word	0x200090c0
 8009644:	200090c8 	.word	0x200090c8
 8009648:	200090c4 	.word	0x200090c4
 800964c:	200090d4 	.word	0x200090d4

08009650 <prvInsertBlockIntoFreeList>:
/*-----------------------------------------------------------*/

static void prvInsertBlockIntoFreeList( BlockLink_t *pxBlockToInsert )
{
 8009650:	b480      	push	{r7}
 8009652:	b085      	sub	sp, #20
 8009654:	af00      	add	r7, sp, #0
 8009656:	6078      	str	r0, [r7, #4]
BlockLink_t *pxIterator;
uint8_t *puc;

	/* Iterate through the list until a block is found that has a higher address
	than the block being inserted. */
	for( pxIterator = &xStart; pxIterator->pxNextFreeBlock < pxBlockToInsert; pxIterator = pxIterator->pxNextFreeBlock )
 8009658:	4b28      	ldr	r3, [pc, #160]	; (80096fc <prvInsertBlockIntoFreeList+0xac>)
 800965a:	60fb      	str	r3, [r7, #12]
 800965c:	e002      	b.n	8009664 <prvInsertBlockIntoFreeList+0x14>
 800965e:	68fb      	ldr	r3, [r7, #12]
 8009660:	681b      	ldr	r3, [r3, #0]
 8009662:	60fb      	str	r3, [r7, #12]
 8009664:	68fb      	ldr	r3, [r7, #12]
 8009666:	681b      	ldr	r3, [r3, #0]
 8009668:	687a      	ldr	r2, [r7, #4]
 800966a:	429a      	cmp	r2, r3
 800966c:	d8f7      	bhi.n	800965e <prvInsertBlockIntoFreeList+0xe>
		/* Nothing to do here, just iterate to the right position. */
	}

	/* Do the block being inserted, and the block it is being inserted after
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxIterator;
 800966e:	68fb      	ldr	r3, [r7, #12]
 8009670:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxIterator->xBlockSize ) == ( uint8_t * ) pxBlockToInsert )
 8009672:	68fb      	ldr	r3, [r7, #12]
 8009674:	685b      	ldr	r3, [r3, #4]
 8009676:	68ba      	ldr	r2, [r7, #8]
 8009678:	4413      	add	r3, r2
 800967a:	687a      	ldr	r2, [r7, #4]
 800967c:	429a      	cmp	r2, r3
 800967e:	d108      	bne.n	8009692 <prvInsertBlockIntoFreeList+0x42>
	{
		pxIterator->xBlockSize += pxBlockToInsert->xBlockSize;
 8009680:	68fb      	ldr	r3, [r7, #12]
 8009682:	685a      	ldr	r2, [r3, #4]
 8009684:	687b      	ldr	r3, [r7, #4]
 8009686:	685b      	ldr	r3, [r3, #4]
 8009688:	441a      	add	r2, r3
 800968a:	68fb      	ldr	r3, [r7, #12]
 800968c:	605a      	str	r2, [r3, #4]
		pxBlockToInsert = pxIterator;
 800968e:	68fb      	ldr	r3, [r7, #12]
 8009690:	607b      	str	r3, [r7, #4]
		mtCOVERAGE_TEST_MARKER();
	}

	/* Do the block being inserted, and the block it is being inserted before
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxBlockToInsert;
 8009692:	687b      	ldr	r3, [r7, #4]
 8009694:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxBlockToInsert->xBlockSize ) == ( uint8_t * ) pxIterator->pxNextFreeBlock )
 8009696:	687b      	ldr	r3, [r7, #4]
 8009698:	685b      	ldr	r3, [r3, #4]
 800969a:	68ba      	ldr	r2, [r7, #8]
 800969c:	441a      	add	r2, r3
 800969e:	68fb      	ldr	r3, [r7, #12]
 80096a0:	681b      	ldr	r3, [r3, #0]
 80096a2:	429a      	cmp	r2, r3
 80096a4:	d118      	bne.n	80096d8 <prvInsertBlockIntoFreeList+0x88>
	{
		if( pxIterator->pxNextFreeBlock != pxEnd )
 80096a6:	68fb      	ldr	r3, [r7, #12]
 80096a8:	681a      	ldr	r2, [r3, #0]
 80096aa:	4b15      	ldr	r3, [pc, #84]	; (8009700 <prvInsertBlockIntoFreeList+0xb0>)
 80096ac:	681b      	ldr	r3, [r3, #0]
 80096ae:	429a      	cmp	r2, r3
 80096b0:	d00d      	beq.n	80096ce <prvInsertBlockIntoFreeList+0x7e>
		{
			/* Form one big block from the two blocks. */
			pxBlockToInsert->xBlockSize += pxIterator->pxNextFreeBlock->xBlockSize;
 80096b2:	687b      	ldr	r3, [r7, #4]
 80096b4:	685a      	ldr	r2, [r3, #4]
 80096b6:	68fb      	ldr	r3, [r7, #12]
 80096b8:	681b      	ldr	r3, [r3, #0]
 80096ba:	685b      	ldr	r3, [r3, #4]
 80096bc:	441a      	add	r2, r3
 80096be:	687b      	ldr	r3, [r7, #4]
 80096c0:	605a      	str	r2, [r3, #4]
			pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock->pxNextFreeBlock;
 80096c2:	68fb      	ldr	r3, [r7, #12]
 80096c4:	681b      	ldr	r3, [r3, #0]
 80096c6:	681a      	ldr	r2, [r3, #0]
 80096c8:	687b      	ldr	r3, [r7, #4]
 80096ca:	601a      	str	r2, [r3, #0]
 80096cc:	e008      	b.n	80096e0 <prvInsertBlockIntoFreeList+0x90>
		}
		else
		{
			pxBlockToInsert->pxNextFreeBlock = pxEnd;
 80096ce:	4b0c      	ldr	r3, [pc, #48]	; (8009700 <prvInsertBlockIntoFreeList+0xb0>)
 80096d0:	681a      	ldr	r2, [r3, #0]
 80096d2:	687b      	ldr	r3, [r7, #4]
 80096d4:	601a      	str	r2, [r3, #0]
 80096d6:	e003      	b.n	80096e0 <prvInsertBlockIntoFreeList+0x90>
		}
	}
	else
	{
		pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock;
 80096d8:	68fb      	ldr	r3, [r7, #12]
 80096da:	681a      	ldr	r2, [r3, #0]
 80096dc:	687b      	ldr	r3, [r7, #4]
 80096de:	601a      	str	r2, [r3, #0]

	/* If the block being inserted plugged a gab, so was merged with the block
	before and the block after, then it's pxNextFreeBlock pointer will have
	already been set, and should not be set here as that would make it point
	to itself. */
	if( pxIterator != pxBlockToInsert )
 80096e0:	68fa      	ldr	r2, [r7, #12]
 80096e2:	687b      	ldr	r3, [r7, #4]
 80096e4:	429a      	cmp	r2, r3
 80096e6:	d002      	beq.n	80096ee <prvInsertBlockIntoFreeList+0x9e>
	{
		pxIterator->pxNextFreeBlock = pxBlockToInsert;
 80096e8:	68fb      	ldr	r3, [r7, #12]
 80096ea:	687a      	ldr	r2, [r7, #4]
 80096ec:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 80096ee:	bf00      	nop
 80096f0:	3714      	adds	r7, #20
 80096f2:	46bd      	mov	sp, r7
 80096f4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80096f8:	4770      	bx	lr
 80096fa:	bf00      	nop
 80096fc:	200090b8 	.word	0x200090b8
 8009700:	200090c0 	.word	0x200090c0

08009704 <HAL_HCD_SOF_Callback>:
  * @brief  SOF callback.
  * @param  hhcd: HCD handle
  * @retval None
  */
void HAL_HCD_SOF_Callback(HCD_HandleTypeDef *hhcd)
{
 8009704:	b580      	push	{r7, lr}
 8009706:	b082      	sub	sp, #8
 8009708:	af00      	add	r7, sp, #0
 800970a:	6078      	str	r0, [r7, #4]
  USBH_LL_IncTimer(hhcd->pData);
 800970c:	687b      	ldr	r3, [r7, #4]
 800970e:	f8d3 3300 	ldr.w	r3, [r3, #768]	; 0x300
 8009712:	4618      	mov	r0, r3
 8009714:	f7fd f828 	bl	8006768 <USBH_LL_IncTimer>
}
 8009718:	bf00      	nop
 800971a:	3708      	adds	r7, #8
 800971c:	46bd      	mov	sp, r7
 800971e:	bd80      	pop	{r7, pc}

08009720 <HAL_HCD_Connect_Callback>:
  * @brief  SOF callback.
  * @param  hhcd: HCD handle
  * @retval None
  */
void HAL_HCD_Connect_Callback(HCD_HandleTypeDef *hhcd)
{
 8009720:	b580      	push	{r7, lr}
 8009722:	b082      	sub	sp, #8
 8009724:	af00      	add	r7, sp, #0
 8009726:	6078      	str	r0, [r7, #4]
  USBH_LL_Connect(hhcd->pData);
 8009728:	687b      	ldr	r3, [r7, #4]
 800972a:	f8d3 3300 	ldr.w	r3, [r3, #768]	; 0x300
 800972e:	4618      	mov	r0, r3
 8009730:	f7fd f86c 	bl	800680c <USBH_LL_Connect>
}
 8009734:	bf00      	nop
 8009736:	3708      	adds	r7, #8
 8009738:	46bd      	mov	sp, r7
 800973a:	bd80      	pop	{r7, pc}

0800973c <HAL_HCD_Disconnect_Callback>:
  * @brief  SOF callback.
  * @param  hhcd: HCD handle
  * @retval None
  */
void HAL_HCD_Disconnect_Callback(HCD_HandleTypeDef *hhcd)
{
 800973c:	b580      	push	{r7, lr}
 800973e:	b082      	sub	sp, #8
 8009740:	af00      	add	r7, sp, #0
 8009742:	6078      	str	r0, [r7, #4]
  USBH_LL_Disconnect(hhcd->pData);
 8009744:	687b      	ldr	r3, [r7, #4]
 8009746:	f8d3 3300 	ldr.w	r3, [r3, #768]	; 0x300
 800974a:	4618      	mov	r0, r3
 800974c:	f7fd f881 	bl	8006852 <USBH_LL_Disconnect>
}
 8009750:	bf00      	nop
 8009752:	3708      	adds	r7, #8
 8009754:	46bd      	mov	sp, r7
 8009756:	bd80      	pop	{r7, pc}

08009758 <HAL_HCD_HC_NotifyURBChange_Callback>:
  * @param  chnum: channel number
  * @param  urb_state: state
  * @retval None
  */
void HAL_HCD_HC_NotifyURBChange_Callback(HCD_HandleTypeDef *hhcd, uint8_t chnum, HCD_URBStateTypeDef urb_state)
{
 8009758:	b580      	push	{r7, lr}
 800975a:	b082      	sub	sp, #8
 800975c:	af00      	add	r7, sp, #0
 800975e:	6078      	str	r0, [r7, #4]
 8009760:	460b      	mov	r3, r1
 8009762:	70fb      	strb	r3, [r7, #3]
 8009764:	4613      	mov	r3, r2
 8009766:	70bb      	strb	r3, [r7, #2]
  /* To be used with OS to sync URB state with the global state machine */
#if (USBH_USE_OS == 1)
  USBH_LL_NotifyURBChange(hhcd->pData);
 8009768:	687b      	ldr	r3, [r7, #4]
 800976a:	f8d3 3300 	ldr.w	r3, [r3, #768]	; 0x300
 800976e:	4618      	mov	r0, r3
 8009770:	f7fd f8a1 	bl	80068b6 <USBH_LL_NotifyURBChange>
#endif
}
 8009774:	bf00      	nop
 8009776:	3708      	adds	r7, #8
 8009778:	46bd      	mov	sp, r7
 800977a:	bd80      	pop	{r7, pc}

0800977c <HAL_HCD_PortEnabled_Callback>:
* @brief  Port Port Enabled callback.
  * @param  hhcd: HCD handle
  * @retval None
  */
void HAL_HCD_PortEnabled_Callback(HCD_HandleTypeDef *hhcd)
{
 800977c:	b580      	push	{r7, lr}
 800977e:	b082      	sub	sp, #8
 8009780:	af00      	add	r7, sp, #0
 8009782:	6078      	str	r0, [r7, #4]
  USBH_LL_PortEnabled(hhcd->pData);
 8009784:	687b      	ldr	r3, [r7, #4]
 8009786:	f8d3 3300 	ldr.w	r3, [r3, #768]	; 0x300
 800978a:	4618      	mov	r0, r3
 800978c:	f7fd f816 	bl	80067bc <USBH_LL_PortEnabled>
}
 8009790:	bf00      	nop
 8009792:	3708      	adds	r7, #8
 8009794:	46bd      	mov	sp, r7
 8009796:	bd80      	pop	{r7, pc}

08009798 <HAL_HCD_PortDisabled_Callback>:
  * @brief  Port Port Disabled callback.
  * @param  hhcd: HCD handle
  * @retval None
  */
void HAL_HCD_PortDisabled_Callback(HCD_HandleTypeDef *hhcd)
{
 8009798:	b580      	push	{r7, lr}
 800979a:	b082      	sub	sp, #8
 800979c:	af00      	add	r7, sp, #0
 800979e:	6078      	str	r0, [r7, #4]
  USBH_LL_PortDisabled(hhcd->pData);
 80097a0:	687b      	ldr	r3, [r7, #4]
 80097a2:	f8d3 3300 	ldr.w	r3, [r3, #768]	; 0x300
 80097a6:	4618      	mov	r0, r3
 80097a8:	f7fd f822 	bl	80067f0 <USBH_LL_PortDisabled>
}
 80097ac:	bf00      	nop
 80097ae:	3708      	adds	r7, #8
 80097b0:	46bd      	mov	sp, r7
 80097b2:	bd80      	pop	{r7, pc}

080097b4 <USBH_LL_Stop>:
  * @brief  Stop the low level portion of the host driver.
  * @param  phost: Host handle
  * @retval USBH status
  */
USBH_StatusTypeDef USBH_LL_Stop(USBH_HandleTypeDef *phost)
{
 80097b4:	b580      	push	{r7, lr}
 80097b6:	b084      	sub	sp, #16
 80097b8:	af00      	add	r7, sp, #0
 80097ba:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef hal_status = HAL_OK;
 80097bc:	2300      	movs	r3, #0
 80097be:	73fb      	strb	r3, [r7, #15]
  USBH_StatusTypeDef usb_status = USBH_OK;
 80097c0:	2300      	movs	r3, #0
 80097c2:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_HCD_Stop(phost->pData);
 80097c4:	687b      	ldr	r3, [r7, #4]
 80097c6:	f8d3 33d0 	ldr.w	r3, [r3, #976]	; 0x3d0
 80097ca:	4618      	mov	r0, r3
 80097cc:	f7f8 ff5c 	bl	8002688 <HAL_HCD_Stop>
 80097d0:	4603      	mov	r3, r0
 80097d2:	73fb      	strb	r3, [r7, #15]

  usb_status = USBH_Get_USB_Status(hal_status);
 80097d4:	7bfb      	ldrb	r3, [r7, #15]
 80097d6:	4618      	mov	r0, r3
 80097d8:	f000 f808 	bl	80097ec <USBH_Get_USB_Status>
 80097dc:	4603      	mov	r3, r0
 80097de:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 80097e0:	7bbb      	ldrb	r3, [r7, #14]
}
 80097e2:	4618      	mov	r0, r3
 80097e4:	3710      	adds	r7, #16
 80097e6:	46bd      	mov	sp, r7
 80097e8:	bd80      	pop	{r7, pc}
	...

080097ec <USBH_Get_USB_Status>:
  * @brief  Returns the USB status depending on the HAL status:
  * @param  hal_status: HAL status
  * @retval USB status
  */
USBH_StatusTypeDef USBH_Get_USB_Status(HAL_StatusTypeDef hal_status)
{
 80097ec:	b480      	push	{r7}
 80097ee:	b085      	sub	sp, #20
 80097f0:	af00      	add	r7, sp, #0
 80097f2:	4603      	mov	r3, r0
 80097f4:	71fb      	strb	r3, [r7, #7]
  USBH_StatusTypeDef usb_status = USBH_OK;
 80097f6:	2300      	movs	r3, #0
 80097f8:	73fb      	strb	r3, [r7, #15]

  switch (hal_status)
 80097fa:	79fb      	ldrb	r3, [r7, #7]
 80097fc:	2b03      	cmp	r3, #3
 80097fe:	d817      	bhi.n	8009830 <USBH_Get_USB_Status+0x44>
 8009800:	a201      	add	r2, pc, #4	; (adr r2, 8009808 <USBH_Get_USB_Status+0x1c>)
 8009802:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8009806:	bf00      	nop
 8009808:	08009819 	.word	0x08009819
 800980c:	0800981f 	.word	0x0800981f
 8009810:	08009825 	.word	0x08009825
 8009814:	0800982b 	.word	0x0800982b
  {
    case HAL_OK :
      usb_status = USBH_OK;
 8009818:	2300      	movs	r3, #0
 800981a:	73fb      	strb	r3, [r7, #15]
    break;
 800981c:	e00b      	b.n	8009836 <USBH_Get_USB_Status+0x4a>
    case HAL_ERROR :
      usb_status = USBH_FAIL;
 800981e:	2302      	movs	r3, #2
 8009820:	73fb      	strb	r3, [r7, #15]
    break;
 8009822:	e008      	b.n	8009836 <USBH_Get_USB_Status+0x4a>
    case HAL_BUSY :
      usb_status = USBH_BUSY;
 8009824:	2301      	movs	r3, #1
 8009826:	73fb      	strb	r3, [r7, #15]
    break;
 8009828:	e005      	b.n	8009836 <USBH_Get_USB_Status+0x4a>
    case HAL_TIMEOUT :
      usb_status = USBH_FAIL;
 800982a:	2302      	movs	r3, #2
 800982c:	73fb      	strb	r3, [r7, #15]
    break;
 800982e:	e002      	b.n	8009836 <USBH_Get_USB_Status+0x4a>
    default :
      usb_status = USBH_FAIL;
 8009830:	2302      	movs	r3, #2
 8009832:	73fb      	strb	r3, [r7, #15]
    break;
 8009834:	bf00      	nop
  }
  return usb_status;
 8009836:	7bfb      	ldrb	r3, [r7, #15]
}
 8009838:	4618      	mov	r0, r3
 800983a:	3714      	adds	r7, #20
 800983c:	46bd      	mov	sp, r7
 800983e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009842:	4770      	bx	lr

08009844 <__errno>:
 8009844:	4b01      	ldr	r3, [pc, #4]	; (800984c <__errno+0x8>)
 8009846:	6818      	ldr	r0, [r3, #0]
 8009848:	4770      	bx	lr
 800984a:	bf00      	nop
 800984c:	20000010 	.word	0x20000010

08009850 <__libc_init_array>:
 8009850:	b570      	push	{r4, r5, r6, lr}
 8009852:	4d0d      	ldr	r5, [pc, #52]	; (8009888 <__libc_init_array+0x38>)
 8009854:	4c0d      	ldr	r4, [pc, #52]	; (800988c <__libc_init_array+0x3c>)
 8009856:	1b64      	subs	r4, r4, r5
 8009858:	10a4      	asrs	r4, r4, #2
 800985a:	2600      	movs	r6, #0
 800985c:	42a6      	cmp	r6, r4
 800985e:	d109      	bne.n	8009874 <__libc_init_array+0x24>
 8009860:	4d0b      	ldr	r5, [pc, #44]	; (8009890 <__libc_init_array+0x40>)
 8009862:	4c0c      	ldr	r4, [pc, #48]	; (8009894 <__libc_init_array+0x44>)
 8009864:	f001 fa00 	bl	800ac68 <_init>
 8009868:	1b64      	subs	r4, r4, r5
 800986a:	10a4      	asrs	r4, r4, #2
 800986c:	2600      	movs	r6, #0
 800986e:	42a6      	cmp	r6, r4
 8009870:	d105      	bne.n	800987e <__libc_init_array+0x2e>
 8009872:	bd70      	pop	{r4, r5, r6, pc}
 8009874:	f855 3b04 	ldr.w	r3, [r5], #4
 8009878:	4798      	blx	r3
 800987a:	3601      	adds	r6, #1
 800987c:	e7ee      	b.n	800985c <__libc_init_array+0xc>
 800987e:	f855 3b04 	ldr.w	r3, [r5], #4
 8009882:	4798      	blx	r3
 8009884:	3601      	adds	r6, #1
 8009886:	e7f2      	b.n	800986e <__libc_init_array+0x1e>
 8009888:	0800af78 	.word	0x0800af78
 800988c:	0800af78 	.word	0x0800af78
 8009890:	0800af78 	.word	0x0800af78
 8009894:	0800af7c 	.word	0x0800af7c

08009898 <memcpy>:
 8009898:	440a      	add	r2, r1
 800989a:	4291      	cmp	r1, r2
 800989c:	f100 33ff 	add.w	r3, r0, #4294967295
 80098a0:	d100      	bne.n	80098a4 <memcpy+0xc>
 80098a2:	4770      	bx	lr
 80098a4:	b510      	push	{r4, lr}
 80098a6:	f811 4b01 	ldrb.w	r4, [r1], #1
 80098aa:	f803 4f01 	strb.w	r4, [r3, #1]!
 80098ae:	4291      	cmp	r1, r2
 80098b0:	d1f9      	bne.n	80098a6 <memcpy+0xe>
 80098b2:	bd10      	pop	{r4, pc}

080098b4 <memset>:
 80098b4:	4402      	add	r2, r0
 80098b6:	4603      	mov	r3, r0
 80098b8:	4293      	cmp	r3, r2
 80098ba:	d100      	bne.n	80098be <memset+0xa>
 80098bc:	4770      	bx	lr
 80098be:	f803 1b01 	strb.w	r1, [r3], #1
 80098c2:	e7f9      	b.n	80098b8 <memset+0x4>

080098c4 <_free_r>:
 80098c4:	b537      	push	{r0, r1, r2, r4, r5, lr}
 80098c6:	2900      	cmp	r1, #0
 80098c8:	d044      	beq.n	8009954 <_free_r+0x90>
 80098ca:	f851 3c04 	ldr.w	r3, [r1, #-4]
 80098ce:	9001      	str	r0, [sp, #4]
 80098d0:	2b00      	cmp	r3, #0
 80098d2:	f1a1 0404 	sub.w	r4, r1, #4
 80098d6:	bfb8      	it	lt
 80098d8:	18e4      	addlt	r4, r4, r3
 80098da:	f000 fc71 	bl	800a1c0 <__malloc_lock>
 80098de:	4a1e      	ldr	r2, [pc, #120]	; (8009958 <_free_r+0x94>)
 80098e0:	9801      	ldr	r0, [sp, #4]
 80098e2:	6813      	ldr	r3, [r2, #0]
 80098e4:	b933      	cbnz	r3, 80098f4 <_free_r+0x30>
 80098e6:	6063      	str	r3, [r4, #4]
 80098e8:	6014      	str	r4, [r2, #0]
 80098ea:	b003      	add	sp, #12
 80098ec:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 80098f0:	f000 bc6c 	b.w	800a1cc <__malloc_unlock>
 80098f4:	42a3      	cmp	r3, r4
 80098f6:	d908      	bls.n	800990a <_free_r+0x46>
 80098f8:	6825      	ldr	r5, [r4, #0]
 80098fa:	1961      	adds	r1, r4, r5
 80098fc:	428b      	cmp	r3, r1
 80098fe:	bf01      	itttt	eq
 8009900:	6819      	ldreq	r1, [r3, #0]
 8009902:	685b      	ldreq	r3, [r3, #4]
 8009904:	1949      	addeq	r1, r1, r5
 8009906:	6021      	streq	r1, [r4, #0]
 8009908:	e7ed      	b.n	80098e6 <_free_r+0x22>
 800990a:	461a      	mov	r2, r3
 800990c:	685b      	ldr	r3, [r3, #4]
 800990e:	b10b      	cbz	r3, 8009914 <_free_r+0x50>
 8009910:	42a3      	cmp	r3, r4
 8009912:	d9fa      	bls.n	800990a <_free_r+0x46>
 8009914:	6811      	ldr	r1, [r2, #0]
 8009916:	1855      	adds	r5, r2, r1
 8009918:	42a5      	cmp	r5, r4
 800991a:	d10b      	bne.n	8009934 <_free_r+0x70>
 800991c:	6824      	ldr	r4, [r4, #0]
 800991e:	4421      	add	r1, r4
 8009920:	1854      	adds	r4, r2, r1
 8009922:	42a3      	cmp	r3, r4
 8009924:	6011      	str	r1, [r2, #0]
 8009926:	d1e0      	bne.n	80098ea <_free_r+0x26>
 8009928:	681c      	ldr	r4, [r3, #0]
 800992a:	685b      	ldr	r3, [r3, #4]
 800992c:	6053      	str	r3, [r2, #4]
 800992e:	4421      	add	r1, r4
 8009930:	6011      	str	r1, [r2, #0]
 8009932:	e7da      	b.n	80098ea <_free_r+0x26>
 8009934:	d902      	bls.n	800993c <_free_r+0x78>
 8009936:	230c      	movs	r3, #12
 8009938:	6003      	str	r3, [r0, #0]
 800993a:	e7d6      	b.n	80098ea <_free_r+0x26>
 800993c:	6825      	ldr	r5, [r4, #0]
 800993e:	1961      	adds	r1, r4, r5
 8009940:	428b      	cmp	r3, r1
 8009942:	bf04      	itt	eq
 8009944:	6819      	ldreq	r1, [r3, #0]
 8009946:	685b      	ldreq	r3, [r3, #4]
 8009948:	6063      	str	r3, [r4, #4]
 800994a:	bf04      	itt	eq
 800994c:	1949      	addeq	r1, r1, r5
 800994e:	6021      	streq	r1, [r4, #0]
 8009950:	6054      	str	r4, [r2, #4]
 8009952:	e7ca      	b.n	80098ea <_free_r+0x26>
 8009954:	b003      	add	sp, #12
 8009956:	bd30      	pop	{r4, r5, pc}
 8009958:	200093dc 	.word	0x200093dc

0800995c <sbrk_aligned>:
 800995c:	b570      	push	{r4, r5, r6, lr}
 800995e:	4e0e      	ldr	r6, [pc, #56]	; (8009998 <sbrk_aligned+0x3c>)
 8009960:	460c      	mov	r4, r1
 8009962:	6831      	ldr	r1, [r6, #0]
 8009964:	4605      	mov	r5, r0
 8009966:	b911      	cbnz	r1, 800996e <sbrk_aligned+0x12>
 8009968:	f000 f91a 	bl	8009ba0 <_sbrk_r>
 800996c:	6030      	str	r0, [r6, #0]
 800996e:	4621      	mov	r1, r4
 8009970:	4628      	mov	r0, r5
 8009972:	f000 f915 	bl	8009ba0 <_sbrk_r>
 8009976:	1c43      	adds	r3, r0, #1
 8009978:	d00a      	beq.n	8009990 <sbrk_aligned+0x34>
 800997a:	1cc4      	adds	r4, r0, #3
 800997c:	f024 0403 	bic.w	r4, r4, #3
 8009980:	42a0      	cmp	r0, r4
 8009982:	d007      	beq.n	8009994 <sbrk_aligned+0x38>
 8009984:	1a21      	subs	r1, r4, r0
 8009986:	4628      	mov	r0, r5
 8009988:	f000 f90a 	bl	8009ba0 <_sbrk_r>
 800998c:	3001      	adds	r0, #1
 800998e:	d101      	bne.n	8009994 <sbrk_aligned+0x38>
 8009990:	f04f 34ff 	mov.w	r4, #4294967295
 8009994:	4620      	mov	r0, r4
 8009996:	bd70      	pop	{r4, r5, r6, pc}
 8009998:	200093e0 	.word	0x200093e0

0800999c <_malloc_r>:
 800999c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80099a0:	1ccd      	adds	r5, r1, #3
 80099a2:	f025 0503 	bic.w	r5, r5, #3
 80099a6:	3508      	adds	r5, #8
 80099a8:	2d0c      	cmp	r5, #12
 80099aa:	bf38      	it	cc
 80099ac:	250c      	movcc	r5, #12
 80099ae:	2d00      	cmp	r5, #0
 80099b0:	4607      	mov	r7, r0
 80099b2:	db01      	blt.n	80099b8 <_malloc_r+0x1c>
 80099b4:	42a9      	cmp	r1, r5
 80099b6:	d905      	bls.n	80099c4 <_malloc_r+0x28>
 80099b8:	230c      	movs	r3, #12
 80099ba:	603b      	str	r3, [r7, #0]
 80099bc:	2600      	movs	r6, #0
 80099be:	4630      	mov	r0, r6
 80099c0:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80099c4:	4e2e      	ldr	r6, [pc, #184]	; (8009a80 <_malloc_r+0xe4>)
 80099c6:	f000 fbfb 	bl	800a1c0 <__malloc_lock>
 80099ca:	6833      	ldr	r3, [r6, #0]
 80099cc:	461c      	mov	r4, r3
 80099ce:	bb34      	cbnz	r4, 8009a1e <_malloc_r+0x82>
 80099d0:	4629      	mov	r1, r5
 80099d2:	4638      	mov	r0, r7
 80099d4:	f7ff ffc2 	bl	800995c <sbrk_aligned>
 80099d8:	1c43      	adds	r3, r0, #1
 80099da:	4604      	mov	r4, r0
 80099dc:	d14d      	bne.n	8009a7a <_malloc_r+0xde>
 80099de:	6834      	ldr	r4, [r6, #0]
 80099e0:	4626      	mov	r6, r4
 80099e2:	2e00      	cmp	r6, #0
 80099e4:	d140      	bne.n	8009a68 <_malloc_r+0xcc>
 80099e6:	6823      	ldr	r3, [r4, #0]
 80099e8:	4631      	mov	r1, r6
 80099ea:	4638      	mov	r0, r7
 80099ec:	eb04 0803 	add.w	r8, r4, r3
 80099f0:	f000 f8d6 	bl	8009ba0 <_sbrk_r>
 80099f4:	4580      	cmp	r8, r0
 80099f6:	d13a      	bne.n	8009a6e <_malloc_r+0xd2>
 80099f8:	6821      	ldr	r1, [r4, #0]
 80099fa:	3503      	adds	r5, #3
 80099fc:	1a6d      	subs	r5, r5, r1
 80099fe:	f025 0503 	bic.w	r5, r5, #3
 8009a02:	3508      	adds	r5, #8
 8009a04:	2d0c      	cmp	r5, #12
 8009a06:	bf38      	it	cc
 8009a08:	250c      	movcc	r5, #12
 8009a0a:	4629      	mov	r1, r5
 8009a0c:	4638      	mov	r0, r7
 8009a0e:	f7ff ffa5 	bl	800995c <sbrk_aligned>
 8009a12:	3001      	adds	r0, #1
 8009a14:	d02b      	beq.n	8009a6e <_malloc_r+0xd2>
 8009a16:	6823      	ldr	r3, [r4, #0]
 8009a18:	442b      	add	r3, r5
 8009a1a:	6023      	str	r3, [r4, #0]
 8009a1c:	e00e      	b.n	8009a3c <_malloc_r+0xa0>
 8009a1e:	6822      	ldr	r2, [r4, #0]
 8009a20:	1b52      	subs	r2, r2, r5
 8009a22:	d41e      	bmi.n	8009a62 <_malloc_r+0xc6>
 8009a24:	2a0b      	cmp	r2, #11
 8009a26:	d916      	bls.n	8009a56 <_malloc_r+0xba>
 8009a28:	1961      	adds	r1, r4, r5
 8009a2a:	42a3      	cmp	r3, r4
 8009a2c:	6025      	str	r5, [r4, #0]
 8009a2e:	bf18      	it	ne
 8009a30:	6059      	strne	r1, [r3, #4]
 8009a32:	6863      	ldr	r3, [r4, #4]
 8009a34:	bf08      	it	eq
 8009a36:	6031      	streq	r1, [r6, #0]
 8009a38:	5162      	str	r2, [r4, r5]
 8009a3a:	604b      	str	r3, [r1, #4]
 8009a3c:	4638      	mov	r0, r7
 8009a3e:	f104 060b 	add.w	r6, r4, #11
 8009a42:	f000 fbc3 	bl	800a1cc <__malloc_unlock>
 8009a46:	f026 0607 	bic.w	r6, r6, #7
 8009a4a:	1d23      	adds	r3, r4, #4
 8009a4c:	1af2      	subs	r2, r6, r3
 8009a4e:	d0b6      	beq.n	80099be <_malloc_r+0x22>
 8009a50:	1b9b      	subs	r3, r3, r6
 8009a52:	50a3      	str	r3, [r4, r2]
 8009a54:	e7b3      	b.n	80099be <_malloc_r+0x22>
 8009a56:	6862      	ldr	r2, [r4, #4]
 8009a58:	42a3      	cmp	r3, r4
 8009a5a:	bf0c      	ite	eq
 8009a5c:	6032      	streq	r2, [r6, #0]
 8009a5e:	605a      	strne	r2, [r3, #4]
 8009a60:	e7ec      	b.n	8009a3c <_malloc_r+0xa0>
 8009a62:	4623      	mov	r3, r4
 8009a64:	6864      	ldr	r4, [r4, #4]
 8009a66:	e7b2      	b.n	80099ce <_malloc_r+0x32>
 8009a68:	4634      	mov	r4, r6
 8009a6a:	6876      	ldr	r6, [r6, #4]
 8009a6c:	e7b9      	b.n	80099e2 <_malloc_r+0x46>
 8009a6e:	230c      	movs	r3, #12
 8009a70:	603b      	str	r3, [r7, #0]
 8009a72:	4638      	mov	r0, r7
 8009a74:	f000 fbaa 	bl	800a1cc <__malloc_unlock>
 8009a78:	e7a1      	b.n	80099be <_malloc_r+0x22>
 8009a7a:	6025      	str	r5, [r4, #0]
 8009a7c:	e7de      	b.n	8009a3c <_malloc_r+0xa0>
 8009a7e:	bf00      	nop
 8009a80:	200093dc 	.word	0x200093dc

08009a84 <iprintf>:
 8009a84:	b40f      	push	{r0, r1, r2, r3}
 8009a86:	4b0a      	ldr	r3, [pc, #40]	; (8009ab0 <iprintf+0x2c>)
 8009a88:	b513      	push	{r0, r1, r4, lr}
 8009a8a:	681c      	ldr	r4, [r3, #0]
 8009a8c:	b124      	cbz	r4, 8009a98 <iprintf+0x14>
 8009a8e:	69a3      	ldr	r3, [r4, #24]
 8009a90:	b913      	cbnz	r3, 8009a98 <iprintf+0x14>
 8009a92:	4620      	mov	r0, r4
 8009a94:	f000 fa8e 	bl	8009fb4 <__sinit>
 8009a98:	ab05      	add	r3, sp, #20
 8009a9a:	9a04      	ldr	r2, [sp, #16]
 8009a9c:	68a1      	ldr	r1, [r4, #8]
 8009a9e:	9301      	str	r3, [sp, #4]
 8009aa0:	4620      	mov	r0, r4
 8009aa2:	f000 fd1f 	bl	800a4e4 <_vfiprintf_r>
 8009aa6:	b002      	add	sp, #8
 8009aa8:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8009aac:	b004      	add	sp, #16
 8009aae:	4770      	bx	lr
 8009ab0:	20000010 	.word	0x20000010

08009ab4 <_puts_r>:
 8009ab4:	b570      	push	{r4, r5, r6, lr}
 8009ab6:	460e      	mov	r6, r1
 8009ab8:	4605      	mov	r5, r0
 8009aba:	b118      	cbz	r0, 8009ac4 <_puts_r+0x10>
 8009abc:	6983      	ldr	r3, [r0, #24]
 8009abe:	b90b      	cbnz	r3, 8009ac4 <_puts_r+0x10>
 8009ac0:	f000 fa78 	bl	8009fb4 <__sinit>
 8009ac4:	69ab      	ldr	r3, [r5, #24]
 8009ac6:	68ac      	ldr	r4, [r5, #8]
 8009ac8:	b913      	cbnz	r3, 8009ad0 <_puts_r+0x1c>
 8009aca:	4628      	mov	r0, r5
 8009acc:	f000 fa72 	bl	8009fb4 <__sinit>
 8009ad0:	4b2c      	ldr	r3, [pc, #176]	; (8009b84 <_puts_r+0xd0>)
 8009ad2:	429c      	cmp	r4, r3
 8009ad4:	d120      	bne.n	8009b18 <_puts_r+0x64>
 8009ad6:	686c      	ldr	r4, [r5, #4]
 8009ad8:	6e63      	ldr	r3, [r4, #100]	; 0x64
 8009ada:	07db      	lsls	r3, r3, #31
 8009adc:	d405      	bmi.n	8009aea <_puts_r+0x36>
 8009ade:	89a3      	ldrh	r3, [r4, #12]
 8009ae0:	0598      	lsls	r0, r3, #22
 8009ae2:	d402      	bmi.n	8009aea <_puts_r+0x36>
 8009ae4:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8009ae6:	f000 fb03 	bl	800a0f0 <__retarget_lock_acquire_recursive>
 8009aea:	89a3      	ldrh	r3, [r4, #12]
 8009aec:	0719      	lsls	r1, r3, #28
 8009aee:	d51d      	bpl.n	8009b2c <_puts_r+0x78>
 8009af0:	6923      	ldr	r3, [r4, #16]
 8009af2:	b1db      	cbz	r3, 8009b2c <_puts_r+0x78>
 8009af4:	3e01      	subs	r6, #1
 8009af6:	68a3      	ldr	r3, [r4, #8]
 8009af8:	f816 1f01 	ldrb.w	r1, [r6, #1]!
 8009afc:	3b01      	subs	r3, #1
 8009afe:	60a3      	str	r3, [r4, #8]
 8009b00:	bb39      	cbnz	r1, 8009b52 <_puts_r+0x9e>
 8009b02:	2b00      	cmp	r3, #0
 8009b04:	da38      	bge.n	8009b78 <_puts_r+0xc4>
 8009b06:	4622      	mov	r2, r4
 8009b08:	210a      	movs	r1, #10
 8009b0a:	4628      	mov	r0, r5
 8009b0c:	f000 f878 	bl	8009c00 <__swbuf_r>
 8009b10:	3001      	adds	r0, #1
 8009b12:	d011      	beq.n	8009b38 <_puts_r+0x84>
 8009b14:	250a      	movs	r5, #10
 8009b16:	e011      	b.n	8009b3c <_puts_r+0x88>
 8009b18:	4b1b      	ldr	r3, [pc, #108]	; (8009b88 <_puts_r+0xd4>)
 8009b1a:	429c      	cmp	r4, r3
 8009b1c:	d101      	bne.n	8009b22 <_puts_r+0x6e>
 8009b1e:	68ac      	ldr	r4, [r5, #8]
 8009b20:	e7da      	b.n	8009ad8 <_puts_r+0x24>
 8009b22:	4b1a      	ldr	r3, [pc, #104]	; (8009b8c <_puts_r+0xd8>)
 8009b24:	429c      	cmp	r4, r3
 8009b26:	bf08      	it	eq
 8009b28:	68ec      	ldreq	r4, [r5, #12]
 8009b2a:	e7d5      	b.n	8009ad8 <_puts_r+0x24>
 8009b2c:	4621      	mov	r1, r4
 8009b2e:	4628      	mov	r0, r5
 8009b30:	f000 f8b8 	bl	8009ca4 <__swsetup_r>
 8009b34:	2800      	cmp	r0, #0
 8009b36:	d0dd      	beq.n	8009af4 <_puts_r+0x40>
 8009b38:	f04f 35ff 	mov.w	r5, #4294967295
 8009b3c:	6e63      	ldr	r3, [r4, #100]	; 0x64
 8009b3e:	07da      	lsls	r2, r3, #31
 8009b40:	d405      	bmi.n	8009b4e <_puts_r+0x9a>
 8009b42:	89a3      	ldrh	r3, [r4, #12]
 8009b44:	059b      	lsls	r3, r3, #22
 8009b46:	d402      	bmi.n	8009b4e <_puts_r+0x9a>
 8009b48:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8009b4a:	f000 fad2 	bl	800a0f2 <__retarget_lock_release_recursive>
 8009b4e:	4628      	mov	r0, r5
 8009b50:	bd70      	pop	{r4, r5, r6, pc}
 8009b52:	2b00      	cmp	r3, #0
 8009b54:	da04      	bge.n	8009b60 <_puts_r+0xac>
 8009b56:	69a2      	ldr	r2, [r4, #24]
 8009b58:	429a      	cmp	r2, r3
 8009b5a:	dc06      	bgt.n	8009b6a <_puts_r+0xb6>
 8009b5c:	290a      	cmp	r1, #10
 8009b5e:	d004      	beq.n	8009b6a <_puts_r+0xb6>
 8009b60:	6823      	ldr	r3, [r4, #0]
 8009b62:	1c5a      	adds	r2, r3, #1
 8009b64:	6022      	str	r2, [r4, #0]
 8009b66:	7019      	strb	r1, [r3, #0]
 8009b68:	e7c5      	b.n	8009af6 <_puts_r+0x42>
 8009b6a:	4622      	mov	r2, r4
 8009b6c:	4628      	mov	r0, r5
 8009b6e:	f000 f847 	bl	8009c00 <__swbuf_r>
 8009b72:	3001      	adds	r0, #1
 8009b74:	d1bf      	bne.n	8009af6 <_puts_r+0x42>
 8009b76:	e7df      	b.n	8009b38 <_puts_r+0x84>
 8009b78:	6823      	ldr	r3, [r4, #0]
 8009b7a:	250a      	movs	r5, #10
 8009b7c:	1c5a      	adds	r2, r3, #1
 8009b7e:	6022      	str	r2, [r4, #0]
 8009b80:	701d      	strb	r5, [r3, #0]
 8009b82:	e7db      	b.n	8009b3c <_puts_r+0x88>
 8009b84:	0800aefc 	.word	0x0800aefc
 8009b88:	0800af1c 	.word	0x0800af1c
 8009b8c:	0800aedc 	.word	0x0800aedc

08009b90 <puts>:
 8009b90:	4b02      	ldr	r3, [pc, #8]	; (8009b9c <puts+0xc>)
 8009b92:	4601      	mov	r1, r0
 8009b94:	6818      	ldr	r0, [r3, #0]
 8009b96:	f7ff bf8d 	b.w	8009ab4 <_puts_r>
 8009b9a:	bf00      	nop
 8009b9c:	20000010 	.word	0x20000010

08009ba0 <_sbrk_r>:
 8009ba0:	b538      	push	{r3, r4, r5, lr}
 8009ba2:	4d06      	ldr	r5, [pc, #24]	; (8009bbc <_sbrk_r+0x1c>)
 8009ba4:	2300      	movs	r3, #0
 8009ba6:	4604      	mov	r4, r0
 8009ba8:	4608      	mov	r0, r1
 8009baa:	602b      	str	r3, [r5, #0]
 8009bac:	f7f7 fd44 	bl	8001638 <_sbrk>
 8009bb0:	1c43      	adds	r3, r0, #1
 8009bb2:	d102      	bne.n	8009bba <_sbrk_r+0x1a>
 8009bb4:	682b      	ldr	r3, [r5, #0]
 8009bb6:	b103      	cbz	r3, 8009bba <_sbrk_r+0x1a>
 8009bb8:	6023      	str	r3, [r4, #0]
 8009bba:	bd38      	pop	{r3, r4, r5, pc}
 8009bbc:	200093e8 	.word	0x200093e8

08009bc0 <siprintf>:
 8009bc0:	b40e      	push	{r1, r2, r3}
 8009bc2:	b500      	push	{lr}
 8009bc4:	b09c      	sub	sp, #112	; 0x70
 8009bc6:	ab1d      	add	r3, sp, #116	; 0x74
 8009bc8:	9002      	str	r0, [sp, #8]
 8009bca:	9006      	str	r0, [sp, #24]
 8009bcc:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
 8009bd0:	4809      	ldr	r0, [pc, #36]	; (8009bf8 <siprintf+0x38>)
 8009bd2:	9107      	str	r1, [sp, #28]
 8009bd4:	9104      	str	r1, [sp, #16]
 8009bd6:	4909      	ldr	r1, [pc, #36]	; (8009bfc <siprintf+0x3c>)
 8009bd8:	f853 2b04 	ldr.w	r2, [r3], #4
 8009bdc:	9105      	str	r1, [sp, #20]
 8009bde:	6800      	ldr	r0, [r0, #0]
 8009be0:	9301      	str	r3, [sp, #4]
 8009be2:	a902      	add	r1, sp, #8
 8009be4:	f000 fb54 	bl	800a290 <_svfiprintf_r>
 8009be8:	9b02      	ldr	r3, [sp, #8]
 8009bea:	2200      	movs	r2, #0
 8009bec:	701a      	strb	r2, [r3, #0]
 8009bee:	b01c      	add	sp, #112	; 0x70
 8009bf0:	f85d eb04 	ldr.w	lr, [sp], #4
 8009bf4:	b003      	add	sp, #12
 8009bf6:	4770      	bx	lr
 8009bf8:	20000010 	.word	0x20000010
 8009bfc:	ffff0208 	.word	0xffff0208

08009c00 <__swbuf_r>:
 8009c00:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8009c02:	460e      	mov	r6, r1
 8009c04:	4614      	mov	r4, r2
 8009c06:	4605      	mov	r5, r0
 8009c08:	b118      	cbz	r0, 8009c12 <__swbuf_r+0x12>
 8009c0a:	6983      	ldr	r3, [r0, #24]
 8009c0c:	b90b      	cbnz	r3, 8009c12 <__swbuf_r+0x12>
 8009c0e:	f000 f9d1 	bl	8009fb4 <__sinit>
 8009c12:	4b21      	ldr	r3, [pc, #132]	; (8009c98 <__swbuf_r+0x98>)
 8009c14:	429c      	cmp	r4, r3
 8009c16:	d12b      	bne.n	8009c70 <__swbuf_r+0x70>
 8009c18:	686c      	ldr	r4, [r5, #4]
 8009c1a:	69a3      	ldr	r3, [r4, #24]
 8009c1c:	60a3      	str	r3, [r4, #8]
 8009c1e:	89a3      	ldrh	r3, [r4, #12]
 8009c20:	071a      	lsls	r2, r3, #28
 8009c22:	d52f      	bpl.n	8009c84 <__swbuf_r+0x84>
 8009c24:	6923      	ldr	r3, [r4, #16]
 8009c26:	b36b      	cbz	r3, 8009c84 <__swbuf_r+0x84>
 8009c28:	6923      	ldr	r3, [r4, #16]
 8009c2a:	6820      	ldr	r0, [r4, #0]
 8009c2c:	1ac0      	subs	r0, r0, r3
 8009c2e:	6963      	ldr	r3, [r4, #20]
 8009c30:	b2f6      	uxtb	r6, r6
 8009c32:	4283      	cmp	r3, r0
 8009c34:	4637      	mov	r7, r6
 8009c36:	dc04      	bgt.n	8009c42 <__swbuf_r+0x42>
 8009c38:	4621      	mov	r1, r4
 8009c3a:	4628      	mov	r0, r5
 8009c3c:	f000 f926 	bl	8009e8c <_fflush_r>
 8009c40:	bb30      	cbnz	r0, 8009c90 <__swbuf_r+0x90>
 8009c42:	68a3      	ldr	r3, [r4, #8]
 8009c44:	3b01      	subs	r3, #1
 8009c46:	60a3      	str	r3, [r4, #8]
 8009c48:	6823      	ldr	r3, [r4, #0]
 8009c4a:	1c5a      	adds	r2, r3, #1
 8009c4c:	6022      	str	r2, [r4, #0]
 8009c4e:	701e      	strb	r6, [r3, #0]
 8009c50:	6963      	ldr	r3, [r4, #20]
 8009c52:	3001      	adds	r0, #1
 8009c54:	4283      	cmp	r3, r0
 8009c56:	d004      	beq.n	8009c62 <__swbuf_r+0x62>
 8009c58:	89a3      	ldrh	r3, [r4, #12]
 8009c5a:	07db      	lsls	r3, r3, #31
 8009c5c:	d506      	bpl.n	8009c6c <__swbuf_r+0x6c>
 8009c5e:	2e0a      	cmp	r6, #10
 8009c60:	d104      	bne.n	8009c6c <__swbuf_r+0x6c>
 8009c62:	4621      	mov	r1, r4
 8009c64:	4628      	mov	r0, r5
 8009c66:	f000 f911 	bl	8009e8c <_fflush_r>
 8009c6a:	b988      	cbnz	r0, 8009c90 <__swbuf_r+0x90>
 8009c6c:	4638      	mov	r0, r7
 8009c6e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8009c70:	4b0a      	ldr	r3, [pc, #40]	; (8009c9c <__swbuf_r+0x9c>)
 8009c72:	429c      	cmp	r4, r3
 8009c74:	d101      	bne.n	8009c7a <__swbuf_r+0x7a>
 8009c76:	68ac      	ldr	r4, [r5, #8]
 8009c78:	e7cf      	b.n	8009c1a <__swbuf_r+0x1a>
 8009c7a:	4b09      	ldr	r3, [pc, #36]	; (8009ca0 <__swbuf_r+0xa0>)
 8009c7c:	429c      	cmp	r4, r3
 8009c7e:	bf08      	it	eq
 8009c80:	68ec      	ldreq	r4, [r5, #12]
 8009c82:	e7ca      	b.n	8009c1a <__swbuf_r+0x1a>
 8009c84:	4621      	mov	r1, r4
 8009c86:	4628      	mov	r0, r5
 8009c88:	f000 f80c 	bl	8009ca4 <__swsetup_r>
 8009c8c:	2800      	cmp	r0, #0
 8009c8e:	d0cb      	beq.n	8009c28 <__swbuf_r+0x28>
 8009c90:	f04f 37ff 	mov.w	r7, #4294967295
 8009c94:	e7ea      	b.n	8009c6c <__swbuf_r+0x6c>
 8009c96:	bf00      	nop
 8009c98:	0800aefc 	.word	0x0800aefc
 8009c9c:	0800af1c 	.word	0x0800af1c
 8009ca0:	0800aedc 	.word	0x0800aedc

08009ca4 <__swsetup_r>:
 8009ca4:	4b32      	ldr	r3, [pc, #200]	; (8009d70 <__swsetup_r+0xcc>)
 8009ca6:	b570      	push	{r4, r5, r6, lr}
 8009ca8:	681d      	ldr	r5, [r3, #0]
 8009caa:	4606      	mov	r6, r0
 8009cac:	460c      	mov	r4, r1
 8009cae:	b125      	cbz	r5, 8009cba <__swsetup_r+0x16>
 8009cb0:	69ab      	ldr	r3, [r5, #24]
 8009cb2:	b913      	cbnz	r3, 8009cba <__swsetup_r+0x16>
 8009cb4:	4628      	mov	r0, r5
 8009cb6:	f000 f97d 	bl	8009fb4 <__sinit>
 8009cba:	4b2e      	ldr	r3, [pc, #184]	; (8009d74 <__swsetup_r+0xd0>)
 8009cbc:	429c      	cmp	r4, r3
 8009cbe:	d10f      	bne.n	8009ce0 <__swsetup_r+0x3c>
 8009cc0:	686c      	ldr	r4, [r5, #4]
 8009cc2:	89a3      	ldrh	r3, [r4, #12]
 8009cc4:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 8009cc8:	0719      	lsls	r1, r3, #28
 8009cca:	d42c      	bmi.n	8009d26 <__swsetup_r+0x82>
 8009ccc:	06dd      	lsls	r5, r3, #27
 8009cce:	d411      	bmi.n	8009cf4 <__swsetup_r+0x50>
 8009cd0:	2309      	movs	r3, #9
 8009cd2:	6033      	str	r3, [r6, #0]
 8009cd4:	f042 0340 	orr.w	r3, r2, #64	; 0x40
 8009cd8:	81a3      	strh	r3, [r4, #12]
 8009cda:	f04f 30ff 	mov.w	r0, #4294967295
 8009cde:	e03e      	b.n	8009d5e <__swsetup_r+0xba>
 8009ce0:	4b25      	ldr	r3, [pc, #148]	; (8009d78 <__swsetup_r+0xd4>)
 8009ce2:	429c      	cmp	r4, r3
 8009ce4:	d101      	bne.n	8009cea <__swsetup_r+0x46>
 8009ce6:	68ac      	ldr	r4, [r5, #8]
 8009ce8:	e7eb      	b.n	8009cc2 <__swsetup_r+0x1e>
 8009cea:	4b24      	ldr	r3, [pc, #144]	; (8009d7c <__swsetup_r+0xd8>)
 8009cec:	429c      	cmp	r4, r3
 8009cee:	bf08      	it	eq
 8009cf0:	68ec      	ldreq	r4, [r5, #12]
 8009cf2:	e7e6      	b.n	8009cc2 <__swsetup_r+0x1e>
 8009cf4:	0758      	lsls	r0, r3, #29
 8009cf6:	d512      	bpl.n	8009d1e <__swsetup_r+0x7a>
 8009cf8:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8009cfa:	b141      	cbz	r1, 8009d0e <__swsetup_r+0x6a>
 8009cfc:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8009d00:	4299      	cmp	r1, r3
 8009d02:	d002      	beq.n	8009d0a <__swsetup_r+0x66>
 8009d04:	4630      	mov	r0, r6
 8009d06:	f7ff fddd 	bl	80098c4 <_free_r>
 8009d0a:	2300      	movs	r3, #0
 8009d0c:	6363      	str	r3, [r4, #52]	; 0x34
 8009d0e:	89a3      	ldrh	r3, [r4, #12]
 8009d10:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 8009d14:	81a3      	strh	r3, [r4, #12]
 8009d16:	2300      	movs	r3, #0
 8009d18:	6063      	str	r3, [r4, #4]
 8009d1a:	6923      	ldr	r3, [r4, #16]
 8009d1c:	6023      	str	r3, [r4, #0]
 8009d1e:	89a3      	ldrh	r3, [r4, #12]
 8009d20:	f043 0308 	orr.w	r3, r3, #8
 8009d24:	81a3      	strh	r3, [r4, #12]
 8009d26:	6923      	ldr	r3, [r4, #16]
 8009d28:	b94b      	cbnz	r3, 8009d3e <__swsetup_r+0x9a>
 8009d2a:	89a3      	ldrh	r3, [r4, #12]
 8009d2c:	f403 7320 	and.w	r3, r3, #640	; 0x280
 8009d30:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8009d34:	d003      	beq.n	8009d3e <__swsetup_r+0x9a>
 8009d36:	4621      	mov	r1, r4
 8009d38:	4630      	mov	r0, r6
 8009d3a:	f000 fa01 	bl	800a140 <__smakebuf_r>
 8009d3e:	89a0      	ldrh	r0, [r4, #12]
 8009d40:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 8009d44:	f010 0301 	ands.w	r3, r0, #1
 8009d48:	d00a      	beq.n	8009d60 <__swsetup_r+0xbc>
 8009d4a:	2300      	movs	r3, #0
 8009d4c:	60a3      	str	r3, [r4, #8]
 8009d4e:	6963      	ldr	r3, [r4, #20]
 8009d50:	425b      	negs	r3, r3
 8009d52:	61a3      	str	r3, [r4, #24]
 8009d54:	6923      	ldr	r3, [r4, #16]
 8009d56:	b943      	cbnz	r3, 8009d6a <__swsetup_r+0xc6>
 8009d58:	f010 0080 	ands.w	r0, r0, #128	; 0x80
 8009d5c:	d1ba      	bne.n	8009cd4 <__swsetup_r+0x30>
 8009d5e:	bd70      	pop	{r4, r5, r6, pc}
 8009d60:	0781      	lsls	r1, r0, #30
 8009d62:	bf58      	it	pl
 8009d64:	6963      	ldrpl	r3, [r4, #20]
 8009d66:	60a3      	str	r3, [r4, #8]
 8009d68:	e7f4      	b.n	8009d54 <__swsetup_r+0xb0>
 8009d6a:	2000      	movs	r0, #0
 8009d6c:	e7f7      	b.n	8009d5e <__swsetup_r+0xba>
 8009d6e:	bf00      	nop
 8009d70:	20000010 	.word	0x20000010
 8009d74:	0800aefc 	.word	0x0800aefc
 8009d78:	0800af1c 	.word	0x0800af1c
 8009d7c:	0800aedc 	.word	0x0800aedc

08009d80 <__sflush_r>:
 8009d80:	898a      	ldrh	r2, [r1, #12]
 8009d82:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8009d86:	4605      	mov	r5, r0
 8009d88:	0710      	lsls	r0, r2, #28
 8009d8a:	460c      	mov	r4, r1
 8009d8c:	d458      	bmi.n	8009e40 <__sflush_r+0xc0>
 8009d8e:	684b      	ldr	r3, [r1, #4]
 8009d90:	2b00      	cmp	r3, #0
 8009d92:	dc05      	bgt.n	8009da0 <__sflush_r+0x20>
 8009d94:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 8009d96:	2b00      	cmp	r3, #0
 8009d98:	dc02      	bgt.n	8009da0 <__sflush_r+0x20>
 8009d9a:	2000      	movs	r0, #0
 8009d9c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8009da0:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 8009da2:	2e00      	cmp	r6, #0
 8009da4:	d0f9      	beq.n	8009d9a <__sflush_r+0x1a>
 8009da6:	2300      	movs	r3, #0
 8009da8:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 8009dac:	682f      	ldr	r7, [r5, #0]
 8009dae:	602b      	str	r3, [r5, #0]
 8009db0:	d032      	beq.n	8009e18 <__sflush_r+0x98>
 8009db2:	6d60      	ldr	r0, [r4, #84]	; 0x54
 8009db4:	89a3      	ldrh	r3, [r4, #12]
 8009db6:	075a      	lsls	r2, r3, #29
 8009db8:	d505      	bpl.n	8009dc6 <__sflush_r+0x46>
 8009dba:	6863      	ldr	r3, [r4, #4]
 8009dbc:	1ac0      	subs	r0, r0, r3
 8009dbe:	6b63      	ldr	r3, [r4, #52]	; 0x34
 8009dc0:	b10b      	cbz	r3, 8009dc6 <__sflush_r+0x46>
 8009dc2:	6c23      	ldr	r3, [r4, #64]	; 0x40
 8009dc4:	1ac0      	subs	r0, r0, r3
 8009dc6:	2300      	movs	r3, #0
 8009dc8:	4602      	mov	r2, r0
 8009dca:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 8009dcc:	6a21      	ldr	r1, [r4, #32]
 8009dce:	4628      	mov	r0, r5
 8009dd0:	47b0      	blx	r6
 8009dd2:	1c43      	adds	r3, r0, #1
 8009dd4:	89a3      	ldrh	r3, [r4, #12]
 8009dd6:	d106      	bne.n	8009de6 <__sflush_r+0x66>
 8009dd8:	6829      	ldr	r1, [r5, #0]
 8009dda:	291d      	cmp	r1, #29
 8009ddc:	d82c      	bhi.n	8009e38 <__sflush_r+0xb8>
 8009dde:	4a2a      	ldr	r2, [pc, #168]	; (8009e88 <__sflush_r+0x108>)
 8009de0:	40ca      	lsrs	r2, r1
 8009de2:	07d6      	lsls	r6, r2, #31
 8009de4:	d528      	bpl.n	8009e38 <__sflush_r+0xb8>
 8009de6:	2200      	movs	r2, #0
 8009de8:	6062      	str	r2, [r4, #4]
 8009dea:	04d9      	lsls	r1, r3, #19
 8009dec:	6922      	ldr	r2, [r4, #16]
 8009dee:	6022      	str	r2, [r4, #0]
 8009df0:	d504      	bpl.n	8009dfc <__sflush_r+0x7c>
 8009df2:	1c42      	adds	r2, r0, #1
 8009df4:	d101      	bne.n	8009dfa <__sflush_r+0x7a>
 8009df6:	682b      	ldr	r3, [r5, #0]
 8009df8:	b903      	cbnz	r3, 8009dfc <__sflush_r+0x7c>
 8009dfa:	6560      	str	r0, [r4, #84]	; 0x54
 8009dfc:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8009dfe:	602f      	str	r7, [r5, #0]
 8009e00:	2900      	cmp	r1, #0
 8009e02:	d0ca      	beq.n	8009d9a <__sflush_r+0x1a>
 8009e04:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8009e08:	4299      	cmp	r1, r3
 8009e0a:	d002      	beq.n	8009e12 <__sflush_r+0x92>
 8009e0c:	4628      	mov	r0, r5
 8009e0e:	f7ff fd59 	bl	80098c4 <_free_r>
 8009e12:	2000      	movs	r0, #0
 8009e14:	6360      	str	r0, [r4, #52]	; 0x34
 8009e16:	e7c1      	b.n	8009d9c <__sflush_r+0x1c>
 8009e18:	6a21      	ldr	r1, [r4, #32]
 8009e1a:	2301      	movs	r3, #1
 8009e1c:	4628      	mov	r0, r5
 8009e1e:	47b0      	blx	r6
 8009e20:	1c41      	adds	r1, r0, #1
 8009e22:	d1c7      	bne.n	8009db4 <__sflush_r+0x34>
 8009e24:	682b      	ldr	r3, [r5, #0]
 8009e26:	2b00      	cmp	r3, #0
 8009e28:	d0c4      	beq.n	8009db4 <__sflush_r+0x34>
 8009e2a:	2b1d      	cmp	r3, #29
 8009e2c:	d001      	beq.n	8009e32 <__sflush_r+0xb2>
 8009e2e:	2b16      	cmp	r3, #22
 8009e30:	d101      	bne.n	8009e36 <__sflush_r+0xb6>
 8009e32:	602f      	str	r7, [r5, #0]
 8009e34:	e7b1      	b.n	8009d9a <__sflush_r+0x1a>
 8009e36:	89a3      	ldrh	r3, [r4, #12]
 8009e38:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8009e3c:	81a3      	strh	r3, [r4, #12]
 8009e3e:	e7ad      	b.n	8009d9c <__sflush_r+0x1c>
 8009e40:	690f      	ldr	r7, [r1, #16]
 8009e42:	2f00      	cmp	r7, #0
 8009e44:	d0a9      	beq.n	8009d9a <__sflush_r+0x1a>
 8009e46:	0793      	lsls	r3, r2, #30
 8009e48:	680e      	ldr	r6, [r1, #0]
 8009e4a:	bf08      	it	eq
 8009e4c:	694b      	ldreq	r3, [r1, #20]
 8009e4e:	600f      	str	r7, [r1, #0]
 8009e50:	bf18      	it	ne
 8009e52:	2300      	movne	r3, #0
 8009e54:	eba6 0807 	sub.w	r8, r6, r7
 8009e58:	608b      	str	r3, [r1, #8]
 8009e5a:	f1b8 0f00 	cmp.w	r8, #0
 8009e5e:	dd9c      	ble.n	8009d9a <__sflush_r+0x1a>
 8009e60:	6a21      	ldr	r1, [r4, #32]
 8009e62:	6aa6      	ldr	r6, [r4, #40]	; 0x28
 8009e64:	4643      	mov	r3, r8
 8009e66:	463a      	mov	r2, r7
 8009e68:	4628      	mov	r0, r5
 8009e6a:	47b0      	blx	r6
 8009e6c:	2800      	cmp	r0, #0
 8009e6e:	dc06      	bgt.n	8009e7e <__sflush_r+0xfe>
 8009e70:	89a3      	ldrh	r3, [r4, #12]
 8009e72:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8009e76:	81a3      	strh	r3, [r4, #12]
 8009e78:	f04f 30ff 	mov.w	r0, #4294967295
 8009e7c:	e78e      	b.n	8009d9c <__sflush_r+0x1c>
 8009e7e:	4407      	add	r7, r0
 8009e80:	eba8 0800 	sub.w	r8, r8, r0
 8009e84:	e7e9      	b.n	8009e5a <__sflush_r+0xda>
 8009e86:	bf00      	nop
 8009e88:	20400001 	.word	0x20400001

08009e8c <_fflush_r>:
 8009e8c:	b538      	push	{r3, r4, r5, lr}
 8009e8e:	690b      	ldr	r3, [r1, #16]
 8009e90:	4605      	mov	r5, r0
 8009e92:	460c      	mov	r4, r1
 8009e94:	b913      	cbnz	r3, 8009e9c <_fflush_r+0x10>
 8009e96:	2500      	movs	r5, #0
 8009e98:	4628      	mov	r0, r5
 8009e9a:	bd38      	pop	{r3, r4, r5, pc}
 8009e9c:	b118      	cbz	r0, 8009ea6 <_fflush_r+0x1a>
 8009e9e:	6983      	ldr	r3, [r0, #24]
 8009ea0:	b90b      	cbnz	r3, 8009ea6 <_fflush_r+0x1a>
 8009ea2:	f000 f887 	bl	8009fb4 <__sinit>
 8009ea6:	4b14      	ldr	r3, [pc, #80]	; (8009ef8 <_fflush_r+0x6c>)
 8009ea8:	429c      	cmp	r4, r3
 8009eaa:	d11b      	bne.n	8009ee4 <_fflush_r+0x58>
 8009eac:	686c      	ldr	r4, [r5, #4]
 8009eae:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8009eb2:	2b00      	cmp	r3, #0
 8009eb4:	d0ef      	beq.n	8009e96 <_fflush_r+0xa>
 8009eb6:	6e62      	ldr	r2, [r4, #100]	; 0x64
 8009eb8:	07d0      	lsls	r0, r2, #31
 8009eba:	d404      	bmi.n	8009ec6 <_fflush_r+0x3a>
 8009ebc:	0599      	lsls	r1, r3, #22
 8009ebe:	d402      	bmi.n	8009ec6 <_fflush_r+0x3a>
 8009ec0:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8009ec2:	f000 f915 	bl	800a0f0 <__retarget_lock_acquire_recursive>
 8009ec6:	4628      	mov	r0, r5
 8009ec8:	4621      	mov	r1, r4
 8009eca:	f7ff ff59 	bl	8009d80 <__sflush_r>
 8009ece:	6e63      	ldr	r3, [r4, #100]	; 0x64
 8009ed0:	07da      	lsls	r2, r3, #31
 8009ed2:	4605      	mov	r5, r0
 8009ed4:	d4e0      	bmi.n	8009e98 <_fflush_r+0xc>
 8009ed6:	89a3      	ldrh	r3, [r4, #12]
 8009ed8:	059b      	lsls	r3, r3, #22
 8009eda:	d4dd      	bmi.n	8009e98 <_fflush_r+0xc>
 8009edc:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8009ede:	f000 f908 	bl	800a0f2 <__retarget_lock_release_recursive>
 8009ee2:	e7d9      	b.n	8009e98 <_fflush_r+0xc>
 8009ee4:	4b05      	ldr	r3, [pc, #20]	; (8009efc <_fflush_r+0x70>)
 8009ee6:	429c      	cmp	r4, r3
 8009ee8:	d101      	bne.n	8009eee <_fflush_r+0x62>
 8009eea:	68ac      	ldr	r4, [r5, #8]
 8009eec:	e7df      	b.n	8009eae <_fflush_r+0x22>
 8009eee:	4b04      	ldr	r3, [pc, #16]	; (8009f00 <_fflush_r+0x74>)
 8009ef0:	429c      	cmp	r4, r3
 8009ef2:	bf08      	it	eq
 8009ef4:	68ec      	ldreq	r4, [r5, #12]
 8009ef6:	e7da      	b.n	8009eae <_fflush_r+0x22>
 8009ef8:	0800aefc 	.word	0x0800aefc
 8009efc:	0800af1c 	.word	0x0800af1c
 8009f00:	0800aedc 	.word	0x0800aedc

08009f04 <std>:
 8009f04:	2300      	movs	r3, #0
 8009f06:	b510      	push	{r4, lr}
 8009f08:	4604      	mov	r4, r0
 8009f0a:	e9c0 3300 	strd	r3, r3, [r0]
 8009f0e:	e9c0 3304 	strd	r3, r3, [r0, #16]
 8009f12:	6083      	str	r3, [r0, #8]
 8009f14:	8181      	strh	r1, [r0, #12]
 8009f16:	6643      	str	r3, [r0, #100]	; 0x64
 8009f18:	81c2      	strh	r2, [r0, #14]
 8009f1a:	6183      	str	r3, [r0, #24]
 8009f1c:	4619      	mov	r1, r3
 8009f1e:	2208      	movs	r2, #8
 8009f20:	305c      	adds	r0, #92	; 0x5c
 8009f22:	f7ff fcc7 	bl	80098b4 <memset>
 8009f26:	4b05      	ldr	r3, [pc, #20]	; (8009f3c <std+0x38>)
 8009f28:	6263      	str	r3, [r4, #36]	; 0x24
 8009f2a:	4b05      	ldr	r3, [pc, #20]	; (8009f40 <std+0x3c>)
 8009f2c:	62a3      	str	r3, [r4, #40]	; 0x28
 8009f2e:	4b05      	ldr	r3, [pc, #20]	; (8009f44 <std+0x40>)
 8009f30:	62e3      	str	r3, [r4, #44]	; 0x2c
 8009f32:	4b05      	ldr	r3, [pc, #20]	; (8009f48 <std+0x44>)
 8009f34:	6224      	str	r4, [r4, #32]
 8009f36:	6323      	str	r3, [r4, #48]	; 0x30
 8009f38:	bd10      	pop	{r4, pc}
 8009f3a:	bf00      	nop
 8009f3c:	0800aa6d 	.word	0x0800aa6d
 8009f40:	0800aa8f 	.word	0x0800aa8f
 8009f44:	0800aac7 	.word	0x0800aac7
 8009f48:	0800aaeb 	.word	0x0800aaeb

08009f4c <_cleanup_r>:
 8009f4c:	4901      	ldr	r1, [pc, #4]	; (8009f54 <_cleanup_r+0x8>)
 8009f4e:	f000 b8af 	b.w	800a0b0 <_fwalk_reent>
 8009f52:	bf00      	nop
 8009f54:	08009e8d 	.word	0x08009e8d

08009f58 <__sfmoreglue>:
 8009f58:	b570      	push	{r4, r5, r6, lr}
 8009f5a:	2268      	movs	r2, #104	; 0x68
 8009f5c:	1e4d      	subs	r5, r1, #1
 8009f5e:	4355      	muls	r5, r2
 8009f60:	460e      	mov	r6, r1
 8009f62:	f105 0174 	add.w	r1, r5, #116	; 0x74
 8009f66:	f7ff fd19 	bl	800999c <_malloc_r>
 8009f6a:	4604      	mov	r4, r0
 8009f6c:	b140      	cbz	r0, 8009f80 <__sfmoreglue+0x28>
 8009f6e:	2100      	movs	r1, #0
 8009f70:	e9c0 1600 	strd	r1, r6, [r0]
 8009f74:	300c      	adds	r0, #12
 8009f76:	60a0      	str	r0, [r4, #8]
 8009f78:	f105 0268 	add.w	r2, r5, #104	; 0x68
 8009f7c:	f7ff fc9a 	bl	80098b4 <memset>
 8009f80:	4620      	mov	r0, r4
 8009f82:	bd70      	pop	{r4, r5, r6, pc}

08009f84 <__sfp_lock_acquire>:
 8009f84:	4801      	ldr	r0, [pc, #4]	; (8009f8c <__sfp_lock_acquire+0x8>)
 8009f86:	f000 b8b3 	b.w	800a0f0 <__retarget_lock_acquire_recursive>
 8009f8a:	bf00      	nop
 8009f8c:	200093e5 	.word	0x200093e5

08009f90 <__sfp_lock_release>:
 8009f90:	4801      	ldr	r0, [pc, #4]	; (8009f98 <__sfp_lock_release+0x8>)
 8009f92:	f000 b8ae 	b.w	800a0f2 <__retarget_lock_release_recursive>
 8009f96:	bf00      	nop
 8009f98:	200093e5 	.word	0x200093e5

08009f9c <__sinit_lock_acquire>:
 8009f9c:	4801      	ldr	r0, [pc, #4]	; (8009fa4 <__sinit_lock_acquire+0x8>)
 8009f9e:	f000 b8a7 	b.w	800a0f0 <__retarget_lock_acquire_recursive>
 8009fa2:	bf00      	nop
 8009fa4:	200093e6 	.word	0x200093e6

08009fa8 <__sinit_lock_release>:
 8009fa8:	4801      	ldr	r0, [pc, #4]	; (8009fb0 <__sinit_lock_release+0x8>)
 8009faa:	f000 b8a2 	b.w	800a0f2 <__retarget_lock_release_recursive>
 8009fae:	bf00      	nop
 8009fb0:	200093e6 	.word	0x200093e6

08009fb4 <__sinit>:
 8009fb4:	b510      	push	{r4, lr}
 8009fb6:	4604      	mov	r4, r0
 8009fb8:	f7ff fff0 	bl	8009f9c <__sinit_lock_acquire>
 8009fbc:	69a3      	ldr	r3, [r4, #24]
 8009fbe:	b11b      	cbz	r3, 8009fc8 <__sinit+0x14>
 8009fc0:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8009fc4:	f7ff bff0 	b.w	8009fa8 <__sinit_lock_release>
 8009fc8:	e9c4 3312 	strd	r3, r3, [r4, #72]	; 0x48
 8009fcc:	6523      	str	r3, [r4, #80]	; 0x50
 8009fce:	4b13      	ldr	r3, [pc, #76]	; (800a01c <__sinit+0x68>)
 8009fd0:	4a13      	ldr	r2, [pc, #76]	; (800a020 <__sinit+0x6c>)
 8009fd2:	681b      	ldr	r3, [r3, #0]
 8009fd4:	62a2      	str	r2, [r4, #40]	; 0x28
 8009fd6:	42a3      	cmp	r3, r4
 8009fd8:	bf04      	itt	eq
 8009fda:	2301      	moveq	r3, #1
 8009fdc:	61a3      	streq	r3, [r4, #24]
 8009fde:	4620      	mov	r0, r4
 8009fe0:	f000 f820 	bl	800a024 <__sfp>
 8009fe4:	6060      	str	r0, [r4, #4]
 8009fe6:	4620      	mov	r0, r4
 8009fe8:	f000 f81c 	bl	800a024 <__sfp>
 8009fec:	60a0      	str	r0, [r4, #8]
 8009fee:	4620      	mov	r0, r4
 8009ff0:	f000 f818 	bl	800a024 <__sfp>
 8009ff4:	2200      	movs	r2, #0
 8009ff6:	60e0      	str	r0, [r4, #12]
 8009ff8:	2104      	movs	r1, #4
 8009ffa:	6860      	ldr	r0, [r4, #4]
 8009ffc:	f7ff ff82 	bl	8009f04 <std>
 800a000:	68a0      	ldr	r0, [r4, #8]
 800a002:	2201      	movs	r2, #1
 800a004:	2109      	movs	r1, #9
 800a006:	f7ff ff7d 	bl	8009f04 <std>
 800a00a:	68e0      	ldr	r0, [r4, #12]
 800a00c:	2202      	movs	r2, #2
 800a00e:	2112      	movs	r1, #18
 800a010:	f7ff ff78 	bl	8009f04 <std>
 800a014:	2301      	movs	r3, #1
 800a016:	61a3      	str	r3, [r4, #24]
 800a018:	e7d2      	b.n	8009fc0 <__sinit+0xc>
 800a01a:	bf00      	nop
 800a01c:	0800aed8 	.word	0x0800aed8
 800a020:	08009f4d 	.word	0x08009f4d

0800a024 <__sfp>:
 800a024:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800a026:	4607      	mov	r7, r0
 800a028:	f7ff ffac 	bl	8009f84 <__sfp_lock_acquire>
 800a02c:	4b1e      	ldr	r3, [pc, #120]	; (800a0a8 <__sfp+0x84>)
 800a02e:	681e      	ldr	r6, [r3, #0]
 800a030:	69b3      	ldr	r3, [r6, #24]
 800a032:	b913      	cbnz	r3, 800a03a <__sfp+0x16>
 800a034:	4630      	mov	r0, r6
 800a036:	f7ff ffbd 	bl	8009fb4 <__sinit>
 800a03a:	3648      	adds	r6, #72	; 0x48
 800a03c:	e9d6 3401 	ldrd	r3, r4, [r6, #4]
 800a040:	3b01      	subs	r3, #1
 800a042:	d503      	bpl.n	800a04c <__sfp+0x28>
 800a044:	6833      	ldr	r3, [r6, #0]
 800a046:	b30b      	cbz	r3, 800a08c <__sfp+0x68>
 800a048:	6836      	ldr	r6, [r6, #0]
 800a04a:	e7f7      	b.n	800a03c <__sfp+0x18>
 800a04c:	f9b4 500c 	ldrsh.w	r5, [r4, #12]
 800a050:	b9d5      	cbnz	r5, 800a088 <__sfp+0x64>
 800a052:	4b16      	ldr	r3, [pc, #88]	; (800a0ac <__sfp+0x88>)
 800a054:	60e3      	str	r3, [r4, #12]
 800a056:	f104 0058 	add.w	r0, r4, #88	; 0x58
 800a05a:	6665      	str	r5, [r4, #100]	; 0x64
 800a05c:	f000 f847 	bl	800a0ee <__retarget_lock_init_recursive>
 800a060:	f7ff ff96 	bl	8009f90 <__sfp_lock_release>
 800a064:	e9c4 5501 	strd	r5, r5, [r4, #4]
 800a068:	e9c4 5504 	strd	r5, r5, [r4, #16]
 800a06c:	6025      	str	r5, [r4, #0]
 800a06e:	61a5      	str	r5, [r4, #24]
 800a070:	2208      	movs	r2, #8
 800a072:	4629      	mov	r1, r5
 800a074:	f104 005c 	add.w	r0, r4, #92	; 0x5c
 800a078:	f7ff fc1c 	bl	80098b4 <memset>
 800a07c:	e9c4 550d 	strd	r5, r5, [r4, #52]	; 0x34
 800a080:	e9c4 5512 	strd	r5, r5, [r4, #72]	; 0x48
 800a084:	4620      	mov	r0, r4
 800a086:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800a088:	3468      	adds	r4, #104	; 0x68
 800a08a:	e7d9      	b.n	800a040 <__sfp+0x1c>
 800a08c:	2104      	movs	r1, #4
 800a08e:	4638      	mov	r0, r7
 800a090:	f7ff ff62 	bl	8009f58 <__sfmoreglue>
 800a094:	4604      	mov	r4, r0
 800a096:	6030      	str	r0, [r6, #0]
 800a098:	2800      	cmp	r0, #0
 800a09a:	d1d5      	bne.n	800a048 <__sfp+0x24>
 800a09c:	f7ff ff78 	bl	8009f90 <__sfp_lock_release>
 800a0a0:	230c      	movs	r3, #12
 800a0a2:	603b      	str	r3, [r7, #0]
 800a0a4:	e7ee      	b.n	800a084 <__sfp+0x60>
 800a0a6:	bf00      	nop
 800a0a8:	0800aed8 	.word	0x0800aed8
 800a0ac:	ffff0001 	.word	0xffff0001

0800a0b0 <_fwalk_reent>:
 800a0b0:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800a0b4:	4606      	mov	r6, r0
 800a0b6:	4688      	mov	r8, r1
 800a0b8:	f100 0448 	add.w	r4, r0, #72	; 0x48
 800a0bc:	2700      	movs	r7, #0
 800a0be:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 800a0c2:	f1b9 0901 	subs.w	r9, r9, #1
 800a0c6:	d505      	bpl.n	800a0d4 <_fwalk_reent+0x24>
 800a0c8:	6824      	ldr	r4, [r4, #0]
 800a0ca:	2c00      	cmp	r4, #0
 800a0cc:	d1f7      	bne.n	800a0be <_fwalk_reent+0xe>
 800a0ce:	4638      	mov	r0, r7
 800a0d0:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800a0d4:	89ab      	ldrh	r3, [r5, #12]
 800a0d6:	2b01      	cmp	r3, #1
 800a0d8:	d907      	bls.n	800a0ea <_fwalk_reent+0x3a>
 800a0da:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 800a0de:	3301      	adds	r3, #1
 800a0e0:	d003      	beq.n	800a0ea <_fwalk_reent+0x3a>
 800a0e2:	4629      	mov	r1, r5
 800a0e4:	4630      	mov	r0, r6
 800a0e6:	47c0      	blx	r8
 800a0e8:	4307      	orrs	r7, r0
 800a0ea:	3568      	adds	r5, #104	; 0x68
 800a0ec:	e7e9      	b.n	800a0c2 <_fwalk_reent+0x12>

0800a0ee <__retarget_lock_init_recursive>:
 800a0ee:	4770      	bx	lr

0800a0f0 <__retarget_lock_acquire_recursive>:
 800a0f0:	4770      	bx	lr

0800a0f2 <__retarget_lock_release_recursive>:
 800a0f2:	4770      	bx	lr

0800a0f4 <__swhatbuf_r>:
 800a0f4:	b570      	push	{r4, r5, r6, lr}
 800a0f6:	460e      	mov	r6, r1
 800a0f8:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800a0fc:	2900      	cmp	r1, #0
 800a0fe:	b096      	sub	sp, #88	; 0x58
 800a100:	4614      	mov	r4, r2
 800a102:	461d      	mov	r5, r3
 800a104:	da08      	bge.n	800a118 <__swhatbuf_r+0x24>
 800a106:	f9b6 300c 	ldrsh.w	r3, [r6, #12]
 800a10a:	2200      	movs	r2, #0
 800a10c:	602a      	str	r2, [r5, #0]
 800a10e:	061a      	lsls	r2, r3, #24
 800a110:	d410      	bmi.n	800a134 <__swhatbuf_r+0x40>
 800a112:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800a116:	e00e      	b.n	800a136 <__swhatbuf_r+0x42>
 800a118:	466a      	mov	r2, sp
 800a11a:	f000 fd0d 	bl	800ab38 <_fstat_r>
 800a11e:	2800      	cmp	r0, #0
 800a120:	dbf1      	blt.n	800a106 <__swhatbuf_r+0x12>
 800a122:	9a01      	ldr	r2, [sp, #4]
 800a124:	f402 4270 	and.w	r2, r2, #61440	; 0xf000
 800a128:	f5a2 5300 	sub.w	r3, r2, #8192	; 0x2000
 800a12c:	425a      	negs	r2, r3
 800a12e:	415a      	adcs	r2, r3
 800a130:	602a      	str	r2, [r5, #0]
 800a132:	e7ee      	b.n	800a112 <__swhatbuf_r+0x1e>
 800a134:	2340      	movs	r3, #64	; 0x40
 800a136:	2000      	movs	r0, #0
 800a138:	6023      	str	r3, [r4, #0]
 800a13a:	b016      	add	sp, #88	; 0x58
 800a13c:	bd70      	pop	{r4, r5, r6, pc}
	...

0800a140 <__smakebuf_r>:
 800a140:	898b      	ldrh	r3, [r1, #12]
 800a142:	b573      	push	{r0, r1, r4, r5, r6, lr}
 800a144:	079d      	lsls	r5, r3, #30
 800a146:	4606      	mov	r6, r0
 800a148:	460c      	mov	r4, r1
 800a14a:	d507      	bpl.n	800a15c <__smakebuf_r+0x1c>
 800a14c:	f104 0347 	add.w	r3, r4, #71	; 0x47
 800a150:	6023      	str	r3, [r4, #0]
 800a152:	6123      	str	r3, [r4, #16]
 800a154:	2301      	movs	r3, #1
 800a156:	6163      	str	r3, [r4, #20]
 800a158:	b002      	add	sp, #8
 800a15a:	bd70      	pop	{r4, r5, r6, pc}
 800a15c:	ab01      	add	r3, sp, #4
 800a15e:	466a      	mov	r2, sp
 800a160:	f7ff ffc8 	bl	800a0f4 <__swhatbuf_r>
 800a164:	9900      	ldr	r1, [sp, #0]
 800a166:	4605      	mov	r5, r0
 800a168:	4630      	mov	r0, r6
 800a16a:	f7ff fc17 	bl	800999c <_malloc_r>
 800a16e:	b948      	cbnz	r0, 800a184 <__smakebuf_r+0x44>
 800a170:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800a174:	059a      	lsls	r2, r3, #22
 800a176:	d4ef      	bmi.n	800a158 <__smakebuf_r+0x18>
 800a178:	f023 0303 	bic.w	r3, r3, #3
 800a17c:	f043 0302 	orr.w	r3, r3, #2
 800a180:	81a3      	strh	r3, [r4, #12]
 800a182:	e7e3      	b.n	800a14c <__smakebuf_r+0xc>
 800a184:	4b0d      	ldr	r3, [pc, #52]	; (800a1bc <__smakebuf_r+0x7c>)
 800a186:	62b3      	str	r3, [r6, #40]	; 0x28
 800a188:	89a3      	ldrh	r3, [r4, #12]
 800a18a:	6020      	str	r0, [r4, #0]
 800a18c:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800a190:	81a3      	strh	r3, [r4, #12]
 800a192:	9b00      	ldr	r3, [sp, #0]
 800a194:	6163      	str	r3, [r4, #20]
 800a196:	9b01      	ldr	r3, [sp, #4]
 800a198:	6120      	str	r0, [r4, #16]
 800a19a:	b15b      	cbz	r3, 800a1b4 <__smakebuf_r+0x74>
 800a19c:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800a1a0:	4630      	mov	r0, r6
 800a1a2:	f000 fcdb 	bl	800ab5c <_isatty_r>
 800a1a6:	b128      	cbz	r0, 800a1b4 <__smakebuf_r+0x74>
 800a1a8:	89a3      	ldrh	r3, [r4, #12]
 800a1aa:	f023 0303 	bic.w	r3, r3, #3
 800a1ae:	f043 0301 	orr.w	r3, r3, #1
 800a1b2:	81a3      	strh	r3, [r4, #12]
 800a1b4:	89a0      	ldrh	r0, [r4, #12]
 800a1b6:	4305      	orrs	r5, r0
 800a1b8:	81a5      	strh	r5, [r4, #12]
 800a1ba:	e7cd      	b.n	800a158 <__smakebuf_r+0x18>
 800a1bc:	08009f4d 	.word	0x08009f4d

0800a1c0 <__malloc_lock>:
 800a1c0:	4801      	ldr	r0, [pc, #4]	; (800a1c8 <__malloc_lock+0x8>)
 800a1c2:	f7ff bf95 	b.w	800a0f0 <__retarget_lock_acquire_recursive>
 800a1c6:	bf00      	nop
 800a1c8:	200093e4 	.word	0x200093e4

0800a1cc <__malloc_unlock>:
 800a1cc:	4801      	ldr	r0, [pc, #4]	; (800a1d4 <__malloc_unlock+0x8>)
 800a1ce:	f7ff bf90 	b.w	800a0f2 <__retarget_lock_release_recursive>
 800a1d2:	bf00      	nop
 800a1d4:	200093e4 	.word	0x200093e4

0800a1d8 <__ssputs_r>:
 800a1d8:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800a1dc:	688e      	ldr	r6, [r1, #8]
 800a1de:	429e      	cmp	r6, r3
 800a1e0:	4682      	mov	sl, r0
 800a1e2:	460c      	mov	r4, r1
 800a1e4:	4690      	mov	r8, r2
 800a1e6:	461f      	mov	r7, r3
 800a1e8:	d838      	bhi.n	800a25c <__ssputs_r+0x84>
 800a1ea:	898a      	ldrh	r2, [r1, #12]
 800a1ec:	f412 6f90 	tst.w	r2, #1152	; 0x480
 800a1f0:	d032      	beq.n	800a258 <__ssputs_r+0x80>
 800a1f2:	6825      	ldr	r5, [r4, #0]
 800a1f4:	6909      	ldr	r1, [r1, #16]
 800a1f6:	eba5 0901 	sub.w	r9, r5, r1
 800a1fa:	6965      	ldr	r5, [r4, #20]
 800a1fc:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 800a200:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 800a204:	3301      	adds	r3, #1
 800a206:	444b      	add	r3, r9
 800a208:	106d      	asrs	r5, r5, #1
 800a20a:	429d      	cmp	r5, r3
 800a20c:	bf38      	it	cc
 800a20e:	461d      	movcc	r5, r3
 800a210:	0553      	lsls	r3, r2, #21
 800a212:	d531      	bpl.n	800a278 <__ssputs_r+0xa0>
 800a214:	4629      	mov	r1, r5
 800a216:	f7ff fbc1 	bl	800999c <_malloc_r>
 800a21a:	4606      	mov	r6, r0
 800a21c:	b950      	cbnz	r0, 800a234 <__ssputs_r+0x5c>
 800a21e:	230c      	movs	r3, #12
 800a220:	f8ca 3000 	str.w	r3, [sl]
 800a224:	89a3      	ldrh	r3, [r4, #12]
 800a226:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800a22a:	81a3      	strh	r3, [r4, #12]
 800a22c:	f04f 30ff 	mov.w	r0, #4294967295
 800a230:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800a234:	6921      	ldr	r1, [r4, #16]
 800a236:	464a      	mov	r2, r9
 800a238:	f7ff fb2e 	bl	8009898 <memcpy>
 800a23c:	89a3      	ldrh	r3, [r4, #12]
 800a23e:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 800a242:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800a246:	81a3      	strh	r3, [r4, #12]
 800a248:	6126      	str	r6, [r4, #16]
 800a24a:	6165      	str	r5, [r4, #20]
 800a24c:	444e      	add	r6, r9
 800a24e:	eba5 0509 	sub.w	r5, r5, r9
 800a252:	6026      	str	r6, [r4, #0]
 800a254:	60a5      	str	r5, [r4, #8]
 800a256:	463e      	mov	r6, r7
 800a258:	42be      	cmp	r6, r7
 800a25a:	d900      	bls.n	800a25e <__ssputs_r+0x86>
 800a25c:	463e      	mov	r6, r7
 800a25e:	6820      	ldr	r0, [r4, #0]
 800a260:	4632      	mov	r2, r6
 800a262:	4641      	mov	r1, r8
 800a264:	f000 fc9c 	bl	800aba0 <memmove>
 800a268:	68a3      	ldr	r3, [r4, #8]
 800a26a:	1b9b      	subs	r3, r3, r6
 800a26c:	60a3      	str	r3, [r4, #8]
 800a26e:	6823      	ldr	r3, [r4, #0]
 800a270:	4433      	add	r3, r6
 800a272:	6023      	str	r3, [r4, #0]
 800a274:	2000      	movs	r0, #0
 800a276:	e7db      	b.n	800a230 <__ssputs_r+0x58>
 800a278:	462a      	mov	r2, r5
 800a27a:	f000 fcab 	bl	800abd4 <_realloc_r>
 800a27e:	4606      	mov	r6, r0
 800a280:	2800      	cmp	r0, #0
 800a282:	d1e1      	bne.n	800a248 <__ssputs_r+0x70>
 800a284:	6921      	ldr	r1, [r4, #16]
 800a286:	4650      	mov	r0, sl
 800a288:	f7ff fb1c 	bl	80098c4 <_free_r>
 800a28c:	e7c7      	b.n	800a21e <__ssputs_r+0x46>
	...

0800a290 <_svfiprintf_r>:
 800a290:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800a294:	4698      	mov	r8, r3
 800a296:	898b      	ldrh	r3, [r1, #12]
 800a298:	061b      	lsls	r3, r3, #24
 800a29a:	b09d      	sub	sp, #116	; 0x74
 800a29c:	4607      	mov	r7, r0
 800a29e:	460d      	mov	r5, r1
 800a2a0:	4614      	mov	r4, r2
 800a2a2:	d50e      	bpl.n	800a2c2 <_svfiprintf_r+0x32>
 800a2a4:	690b      	ldr	r3, [r1, #16]
 800a2a6:	b963      	cbnz	r3, 800a2c2 <_svfiprintf_r+0x32>
 800a2a8:	2140      	movs	r1, #64	; 0x40
 800a2aa:	f7ff fb77 	bl	800999c <_malloc_r>
 800a2ae:	6028      	str	r0, [r5, #0]
 800a2b0:	6128      	str	r0, [r5, #16]
 800a2b2:	b920      	cbnz	r0, 800a2be <_svfiprintf_r+0x2e>
 800a2b4:	230c      	movs	r3, #12
 800a2b6:	603b      	str	r3, [r7, #0]
 800a2b8:	f04f 30ff 	mov.w	r0, #4294967295
 800a2bc:	e0d1      	b.n	800a462 <_svfiprintf_r+0x1d2>
 800a2be:	2340      	movs	r3, #64	; 0x40
 800a2c0:	616b      	str	r3, [r5, #20]
 800a2c2:	2300      	movs	r3, #0
 800a2c4:	9309      	str	r3, [sp, #36]	; 0x24
 800a2c6:	2320      	movs	r3, #32
 800a2c8:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 800a2cc:	f8cd 800c 	str.w	r8, [sp, #12]
 800a2d0:	2330      	movs	r3, #48	; 0x30
 800a2d2:	f8df 81a8 	ldr.w	r8, [pc, #424]	; 800a47c <_svfiprintf_r+0x1ec>
 800a2d6:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 800a2da:	f04f 0901 	mov.w	r9, #1
 800a2de:	4623      	mov	r3, r4
 800a2e0:	469a      	mov	sl, r3
 800a2e2:	f813 2b01 	ldrb.w	r2, [r3], #1
 800a2e6:	b10a      	cbz	r2, 800a2ec <_svfiprintf_r+0x5c>
 800a2e8:	2a25      	cmp	r2, #37	; 0x25
 800a2ea:	d1f9      	bne.n	800a2e0 <_svfiprintf_r+0x50>
 800a2ec:	ebba 0b04 	subs.w	fp, sl, r4
 800a2f0:	d00b      	beq.n	800a30a <_svfiprintf_r+0x7a>
 800a2f2:	465b      	mov	r3, fp
 800a2f4:	4622      	mov	r2, r4
 800a2f6:	4629      	mov	r1, r5
 800a2f8:	4638      	mov	r0, r7
 800a2fa:	f7ff ff6d 	bl	800a1d8 <__ssputs_r>
 800a2fe:	3001      	adds	r0, #1
 800a300:	f000 80aa 	beq.w	800a458 <_svfiprintf_r+0x1c8>
 800a304:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800a306:	445a      	add	r2, fp
 800a308:	9209      	str	r2, [sp, #36]	; 0x24
 800a30a:	f89a 3000 	ldrb.w	r3, [sl]
 800a30e:	2b00      	cmp	r3, #0
 800a310:	f000 80a2 	beq.w	800a458 <_svfiprintf_r+0x1c8>
 800a314:	2300      	movs	r3, #0
 800a316:	f04f 32ff 	mov.w	r2, #4294967295
 800a31a:	e9cd 2305 	strd	r2, r3, [sp, #20]
 800a31e:	f10a 0a01 	add.w	sl, sl, #1
 800a322:	9304      	str	r3, [sp, #16]
 800a324:	9307      	str	r3, [sp, #28]
 800a326:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 800a32a:	931a      	str	r3, [sp, #104]	; 0x68
 800a32c:	4654      	mov	r4, sl
 800a32e:	2205      	movs	r2, #5
 800a330:	f814 1b01 	ldrb.w	r1, [r4], #1
 800a334:	4851      	ldr	r0, [pc, #324]	; (800a47c <_svfiprintf_r+0x1ec>)
 800a336:	f7f5 ff5b 	bl	80001f0 <memchr>
 800a33a:	9a04      	ldr	r2, [sp, #16]
 800a33c:	b9d8      	cbnz	r0, 800a376 <_svfiprintf_r+0xe6>
 800a33e:	06d0      	lsls	r0, r2, #27
 800a340:	bf44      	itt	mi
 800a342:	2320      	movmi	r3, #32
 800a344:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800a348:	0711      	lsls	r1, r2, #28
 800a34a:	bf44      	itt	mi
 800a34c:	232b      	movmi	r3, #43	; 0x2b
 800a34e:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800a352:	f89a 3000 	ldrb.w	r3, [sl]
 800a356:	2b2a      	cmp	r3, #42	; 0x2a
 800a358:	d015      	beq.n	800a386 <_svfiprintf_r+0xf6>
 800a35a:	9a07      	ldr	r2, [sp, #28]
 800a35c:	4654      	mov	r4, sl
 800a35e:	2000      	movs	r0, #0
 800a360:	f04f 0c0a 	mov.w	ip, #10
 800a364:	4621      	mov	r1, r4
 800a366:	f811 3b01 	ldrb.w	r3, [r1], #1
 800a36a:	3b30      	subs	r3, #48	; 0x30
 800a36c:	2b09      	cmp	r3, #9
 800a36e:	d94e      	bls.n	800a40e <_svfiprintf_r+0x17e>
 800a370:	b1b0      	cbz	r0, 800a3a0 <_svfiprintf_r+0x110>
 800a372:	9207      	str	r2, [sp, #28]
 800a374:	e014      	b.n	800a3a0 <_svfiprintf_r+0x110>
 800a376:	eba0 0308 	sub.w	r3, r0, r8
 800a37a:	fa09 f303 	lsl.w	r3, r9, r3
 800a37e:	4313      	orrs	r3, r2
 800a380:	9304      	str	r3, [sp, #16]
 800a382:	46a2      	mov	sl, r4
 800a384:	e7d2      	b.n	800a32c <_svfiprintf_r+0x9c>
 800a386:	9b03      	ldr	r3, [sp, #12]
 800a388:	1d19      	adds	r1, r3, #4
 800a38a:	681b      	ldr	r3, [r3, #0]
 800a38c:	9103      	str	r1, [sp, #12]
 800a38e:	2b00      	cmp	r3, #0
 800a390:	bfbb      	ittet	lt
 800a392:	425b      	neglt	r3, r3
 800a394:	f042 0202 	orrlt.w	r2, r2, #2
 800a398:	9307      	strge	r3, [sp, #28]
 800a39a:	9307      	strlt	r3, [sp, #28]
 800a39c:	bfb8      	it	lt
 800a39e:	9204      	strlt	r2, [sp, #16]
 800a3a0:	7823      	ldrb	r3, [r4, #0]
 800a3a2:	2b2e      	cmp	r3, #46	; 0x2e
 800a3a4:	d10c      	bne.n	800a3c0 <_svfiprintf_r+0x130>
 800a3a6:	7863      	ldrb	r3, [r4, #1]
 800a3a8:	2b2a      	cmp	r3, #42	; 0x2a
 800a3aa:	d135      	bne.n	800a418 <_svfiprintf_r+0x188>
 800a3ac:	9b03      	ldr	r3, [sp, #12]
 800a3ae:	1d1a      	adds	r2, r3, #4
 800a3b0:	681b      	ldr	r3, [r3, #0]
 800a3b2:	9203      	str	r2, [sp, #12]
 800a3b4:	2b00      	cmp	r3, #0
 800a3b6:	bfb8      	it	lt
 800a3b8:	f04f 33ff 	movlt.w	r3, #4294967295
 800a3bc:	3402      	adds	r4, #2
 800a3be:	9305      	str	r3, [sp, #20]
 800a3c0:	f8df a0c8 	ldr.w	sl, [pc, #200]	; 800a48c <_svfiprintf_r+0x1fc>
 800a3c4:	7821      	ldrb	r1, [r4, #0]
 800a3c6:	2203      	movs	r2, #3
 800a3c8:	4650      	mov	r0, sl
 800a3ca:	f7f5 ff11 	bl	80001f0 <memchr>
 800a3ce:	b140      	cbz	r0, 800a3e2 <_svfiprintf_r+0x152>
 800a3d0:	2340      	movs	r3, #64	; 0x40
 800a3d2:	eba0 000a 	sub.w	r0, r0, sl
 800a3d6:	fa03 f000 	lsl.w	r0, r3, r0
 800a3da:	9b04      	ldr	r3, [sp, #16]
 800a3dc:	4303      	orrs	r3, r0
 800a3de:	3401      	adds	r4, #1
 800a3e0:	9304      	str	r3, [sp, #16]
 800a3e2:	f814 1b01 	ldrb.w	r1, [r4], #1
 800a3e6:	4826      	ldr	r0, [pc, #152]	; (800a480 <_svfiprintf_r+0x1f0>)
 800a3e8:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 800a3ec:	2206      	movs	r2, #6
 800a3ee:	f7f5 feff 	bl	80001f0 <memchr>
 800a3f2:	2800      	cmp	r0, #0
 800a3f4:	d038      	beq.n	800a468 <_svfiprintf_r+0x1d8>
 800a3f6:	4b23      	ldr	r3, [pc, #140]	; (800a484 <_svfiprintf_r+0x1f4>)
 800a3f8:	bb1b      	cbnz	r3, 800a442 <_svfiprintf_r+0x1b2>
 800a3fa:	9b03      	ldr	r3, [sp, #12]
 800a3fc:	3307      	adds	r3, #7
 800a3fe:	f023 0307 	bic.w	r3, r3, #7
 800a402:	3308      	adds	r3, #8
 800a404:	9303      	str	r3, [sp, #12]
 800a406:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800a408:	4433      	add	r3, r6
 800a40a:	9309      	str	r3, [sp, #36]	; 0x24
 800a40c:	e767      	b.n	800a2de <_svfiprintf_r+0x4e>
 800a40e:	fb0c 3202 	mla	r2, ip, r2, r3
 800a412:	460c      	mov	r4, r1
 800a414:	2001      	movs	r0, #1
 800a416:	e7a5      	b.n	800a364 <_svfiprintf_r+0xd4>
 800a418:	2300      	movs	r3, #0
 800a41a:	3401      	adds	r4, #1
 800a41c:	9305      	str	r3, [sp, #20]
 800a41e:	4619      	mov	r1, r3
 800a420:	f04f 0c0a 	mov.w	ip, #10
 800a424:	4620      	mov	r0, r4
 800a426:	f810 2b01 	ldrb.w	r2, [r0], #1
 800a42a:	3a30      	subs	r2, #48	; 0x30
 800a42c:	2a09      	cmp	r2, #9
 800a42e:	d903      	bls.n	800a438 <_svfiprintf_r+0x1a8>
 800a430:	2b00      	cmp	r3, #0
 800a432:	d0c5      	beq.n	800a3c0 <_svfiprintf_r+0x130>
 800a434:	9105      	str	r1, [sp, #20]
 800a436:	e7c3      	b.n	800a3c0 <_svfiprintf_r+0x130>
 800a438:	fb0c 2101 	mla	r1, ip, r1, r2
 800a43c:	4604      	mov	r4, r0
 800a43e:	2301      	movs	r3, #1
 800a440:	e7f0      	b.n	800a424 <_svfiprintf_r+0x194>
 800a442:	ab03      	add	r3, sp, #12
 800a444:	9300      	str	r3, [sp, #0]
 800a446:	462a      	mov	r2, r5
 800a448:	4b0f      	ldr	r3, [pc, #60]	; (800a488 <_svfiprintf_r+0x1f8>)
 800a44a:	a904      	add	r1, sp, #16
 800a44c:	4638      	mov	r0, r7
 800a44e:	f3af 8000 	nop.w
 800a452:	1c42      	adds	r2, r0, #1
 800a454:	4606      	mov	r6, r0
 800a456:	d1d6      	bne.n	800a406 <_svfiprintf_r+0x176>
 800a458:	89ab      	ldrh	r3, [r5, #12]
 800a45a:	065b      	lsls	r3, r3, #25
 800a45c:	f53f af2c 	bmi.w	800a2b8 <_svfiprintf_r+0x28>
 800a460:	9809      	ldr	r0, [sp, #36]	; 0x24
 800a462:	b01d      	add	sp, #116	; 0x74
 800a464:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800a468:	ab03      	add	r3, sp, #12
 800a46a:	9300      	str	r3, [sp, #0]
 800a46c:	462a      	mov	r2, r5
 800a46e:	4b06      	ldr	r3, [pc, #24]	; (800a488 <_svfiprintf_r+0x1f8>)
 800a470:	a904      	add	r1, sp, #16
 800a472:	4638      	mov	r0, r7
 800a474:	f000 f9d4 	bl	800a820 <_printf_i>
 800a478:	e7eb      	b.n	800a452 <_svfiprintf_r+0x1c2>
 800a47a:	bf00      	nop
 800a47c:	0800af3c 	.word	0x0800af3c
 800a480:	0800af46 	.word	0x0800af46
 800a484:	00000000 	.word	0x00000000
 800a488:	0800a1d9 	.word	0x0800a1d9
 800a48c:	0800af42 	.word	0x0800af42

0800a490 <__sfputc_r>:
 800a490:	6893      	ldr	r3, [r2, #8]
 800a492:	3b01      	subs	r3, #1
 800a494:	2b00      	cmp	r3, #0
 800a496:	b410      	push	{r4}
 800a498:	6093      	str	r3, [r2, #8]
 800a49a:	da08      	bge.n	800a4ae <__sfputc_r+0x1e>
 800a49c:	6994      	ldr	r4, [r2, #24]
 800a49e:	42a3      	cmp	r3, r4
 800a4a0:	db01      	blt.n	800a4a6 <__sfputc_r+0x16>
 800a4a2:	290a      	cmp	r1, #10
 800a4a4:	d103      	bne.n	800a4ae <__sfputc_r+0x1e>
 800a4a6:	f85d 4b04 	ldr.w	r4, [sp], #4
 800a4aa:	f7ff bba9 	b.w	8009c00 <__swbuf_r>
 800a4ae:	6813      	ldr	r3, [r2, #0]
 800a4b0:	1c58      	adds	r0, r3, #1
 800a4b2:	6010      	str	r0, [r2, #0]
 800a4b4:	7019      	strb	r1, [r3, #0]
 800a4b6:	4608      	mov	r0, r1
 800a4b8:	f85d 4b04 	ldr.w	r4, [sp], #4
 800a4bc:	4770      	bx	lr

0800a4be <__sfputs_r>:
 800a4be:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800a4c0:	4606      	mov	r6, r0
 800a4c2:	460f      	mov	r7, r1
 800a4c4:	4614      	mov	r4, r2
 800a4c6:	18d5      	adds	r5, r2, r3
 800a4c8:	42ac      	cmp	r4, r5
 800a4ca:	d101      	bne.n	800a4d0 <__sfputs_r+0x12>
 800a4cc:	2000      	movs	r0, #0
 800a4ce:	e007      	b.n	800a4e0 <__sfputs_r+0x22>
 800a4d0:	f814 1b01 	ldrb.w	r1, [r4], #1
 800a4d4:	463a      	mov	r2, r7
 800a4d6:	4630      	mov	r0, r6
 800a4d8:	f7ff ffda 	bl	800a490 <__sfputc_r>
 800a4dc:	1c43      	adds	r3, r0, #1
 800a4de:	d1f3      	bne.n	800a4c8 <__sfputs_r+0xa>
 800a4e0:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

0800a4e4 <_vfiprintf_r>:
 800a4e4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800a4e8:	460d      	mov	r5, r1
 800a4ea:	b09d      	sub	sp, #116	; 0x74
 800a4ec:	4614      	mov	r4, r2
 800a4ee:	4698      	mov	r8, r3
 800a4f0:	4606      	mov	r6, r0
 800a4f2:	b118      	cbz	r0, 800a4fc <_vfiprintf_r+0x18>
 800a4f4:	6983      	ldr	r3, [r0, #24]
 800a4f6:	b90b      	cbnz	r3, 800a4fc <_vfiprintf_r+0x18>
 800a4f8:	f7ff fd5c 	bl	8009fb4 <__sinit>
 800a4fc:	4b89      	ldr	r3, [pc, #548]	; (800a724 <_vfiprintf_r+0x240>)
 800a4fe:	429d      	cmp	r5, r3
 800a500:	d11b      	bne.n	800a53a <_vfiprintf_r+0x56>
 800a502:	6875      	ldr	r5, [r6, #4]
 800a504:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 800a506:	07d9      	lsls	r1, r3, #31
 800a508:	d405      	bmi.n	800a516 <_vfiprintf_r+0x32>
 800a50a:	89ab      	ldrh	r3, [r5, #12]
 800a50c:	059a      	lsls	r2, r3, #22
 800a50e:	d402      	bmi.n	800a516 <_vfiprintf_r+0x32>
 800a510:	6da8      	ldr	r0, [r5, #88]	; 0x58
 800a512:	f7ff fded 	bl	800a0f0 <__retarget_lock_acquire_recursive>
 800a516:	89ab      	ldrh	r3, [r5, #12]
 800a518:	071b      	lsls	r3, r3, #28
 800a51a:	d501      	bpl.n	800a520 <_vfiprintf_r+0x3c>
 800a51c:	692b      	ldr	r3, [r5, #16]
 800a51e:	b9eb      	cbnz	r3, 800a55c <_vfiprintf_r+0x78>
 800a520:	4629      	mov	r1, r5
 800a522:	4630      	mov	r0, r6
 800a524:	f7ff fbbe 	bl	8009ca4 <__swsetup_r>
 800a528:	b1c0      	cbz	r0, 800a55c <_vfiprintf_r+0x78>
 800a52a:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 800a52c:	07dc      	lsls	r4, r3, #31
 800a52e:	d50e      	bpl.n	800a54e <_vfiprintf_r+0x6a>
 800a530:	f04f 30ff 	mov.w	r0, #4294967295
 800a534:	b01d      	add	sp, #116	; 0x74
 800a536:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800a53a:	4b7b      	ldr	r3, [pc, #492]	; (800a728 <_vfiprintf_r+0x244>)
 800a53c:	429d      	cmp	r5, r3
 800a53e:	d101      	bne.n	800a544 <_vfiprintf_r+0x60>
 800a540:	68b5      	ldr	r5, [r6, #8]
 800a542:	e7df      	b.n	800a504 <_vfiprintf_r+0x20>
 800a544:	4b79      	ldr	r3, [pc, #484]	; (800a72c <_vfiprintf_r+0x248>)
 800a546:	429d      	cmp	r5, r3
 800a548:	bf08      	it	eq
 800a54a:	68f5      	ldreq	r5, [r6, #12]
 800a54c:	e7da      	b.n	800a504 <_vfiprintf_r+0x20>
 800a54e:	89ab      	ldrh	r3, [r5, #12]
 800a550:	0598      	lsls	r0, r3, #22
 800a552:	d4ed      	bmi.n	800a530 <_vfiprintf_r+0x4c>
 800a554:	6da8      	ldr	r0, [r5, #88]	; 0x58
 800a556:	f7ff fdcc 	bl	800a0f2 <__retarget_lock_release_recursive>
 800a55a:	e7e9      	b.n	800a530 <_vfiprintf_r+0x4c>
 800a55c:	2300      	movs	r3, #0
 800a55e:	9309      	str	r3, [sp, #36]	; 0x24
 800a560:	2320      	movs	r3, #32
 800a562:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 800a566:	f8cd 800c 	str.w	r8, [sp, #12]
 800a56a:	2330      	movs	r3, #48	; 0x30
 800a56c:	f8df 81c0 	ldr.w	r8, [pc, #448]	; 800a730 <_vfiprintf_r+0x24c>
 800a570:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 800a574:	f04f 0901 	mov.w	r9, #1
 800a578:	4623      	mov	r3, r4
 800a57a:	469a      	mov	sl, r3
 800a57c:	f813 2b01 	ldrb.w	r2, [r3], #1
 800a580:	b10a      	cbz	r2, 800a586 <_vfiprintf_r+0xa2>
 800a582:	2a25      	cmp	r2, #37	; 0x25
 800a584:	d1f9      	bne.n	800a57a <_vfiprintf_r+0x96>
 800a586:	ebba 0b04 	subs.w	fp, sl, r4
 800a58a:	d00b      	beq.n	800a5a4 <_vfiprintf_r+0xc0>
 800a58c:	465b      	mov	r3, fp
 800a58e:	4622      	mov	r2, r4
 800a590:	4629      	mov	r1, r5
 800a592:	4630      	mov	r0, r6
 800a594:	f7ff ff93 	bl	800a4be <__sfputs_r>
 800a598:	3001      	adds	r0, #1
 800a59a:	f000 80aa 	beq.w	800a6f2 <_vfiprintf_r+0x20e>
 800a59e:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800a5a0:	445a      	add	r2, fp
 800a5a2:	9209      	str	r2, [sp, #36]	; 0x24
 800a5a4:	f89a 3000 	ldrb.w	r3, [sl]
 800a5a8:	2b00      	cmp	r3, #0
 800a5aa:	f000 80a2 	beq.w	800a6f2 <_vfiprintf_r+0x20e>
 800a5ae:	2300      	movs	r3, #0
 800a5b0:	f04f 32ff 	mov.w	r2, #4294967295
 800a5b4:	e9cd 2305 	strd	r2, r3, [sp, #20]
 800a5b8:	f10a 0a01 	add.w	sl, sl, #1
 800a5bc:	9304      	str	r3, [sp, #16]
 800a5be:	9307      	str	r3, [sp, #28]
 800a5c0:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 800a5c4:	931a      	str	r3, [sp, #104]	; 0x68
 800a5c6:	4654      	mov	r4, sl
 800a5c8:	2205      	movs	r2, #5
 800a5ca:	f814 1b01 	ldrb.w	r1, [r4], #1
 800a5ce:	4858      	ldr	r0, [pc, #352]	; (800a730 <_vfiprintf_r+0x24c>)
 800a5d0:	f7f5 fe0e 	bl	80001f0 <memchr>
 800a5d4:	9a04      	ldr	r2, [sp, #16]
 800a5d6:	b9d8      	cbnz	r0, 800a610 <_vfiprintf_r+0x12c>
 800a5d8:	06d1      	lsls	r1, r2, #27
 800a5da:	bf44      	itt	mi
 800a5dc:	2320      	movmi	r3, #32
 800a5de:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800a5e2:	0713      	lsls	r3, r2, #28
 800a5e4:	bf44      	itt	mi
 800a5e6:	232b      	movmi	r3, #43	; 0x2b
 800a5e8:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800a5ec:	f89a 3000 	ldrb.w	r3, [sl]
 800a5f0:	2b2a      	cmp	r3, #42	; 0x2a
 800a5f2:	d015      	beq.n	800a620 <_vfiprintf_r+0x13c>
 800a5f4:	9a07      	ldr	r2, [sp, #28]
 800a5f6:	4654      	mov	r4, sl
 800a5f8:	2000      	movs	r0, #0
 800a5fa:	f04f 0c0a 	mov.w	ip, #10
 800a5fe:	4621      	mov	r1, r4
 800a600:	f811 3b01 	ldrb.w	r3, [r1], #1
 800a604:	3b30      	subs	r3, #48	; 0x30
 800a606:	2b09      	cmp	r3, #9
 800a608:	d94e      	bls.n	800a6a8 <_vfiprintf_r+0x1c4>
 800a60a:	b1b0      	cbz	r0, 800a63a <_vfiprintf_r+0x156>
 800a60c:	9207      	str	r2, [sp, #28]
 800a60e:	e014      	b.n	800a63a <_vfiprintf_r+0x156>
 800a610:	eba0 0308 	sub.w	r3, r0, r8
 800a614:	fa09 f303 	lsl.w	r3, r9, r3
 800a618:	4313      	orrs	r3, r2
 800a61a:	9304      	str	r3, [sp, #16]
 800a61c:	46a2      	mov	sl, r4
 800a61e:	e7d2      	b.n	800a5c6 <_vfiprintf_r+0xe2>
 800a620:	9b03      	ldr	r3, [sp, #12]
 800a622:	1d19      	adds	r1, r3, #4
 800a624:	681b      	ldr	r3, [r3, #0]
 800a626:	9103      	str	r1, [sp, #12]
 800a628:	2b00      	cmp	r3, #0
 800a62a:	bfbb      	ittet	lt
 800a62c:	425b      	neglt	r3, r3
 800a62e:	f042 0202 	orrlt.w	r2, r2, #2
 800a632:	9307      	strge	r3, [sp, #28]
 800a634:	9307      	strlt	r3, [sp, #28]
 800a636:	bfb8      	it	lt
 800a638:	9204      	strlt	r2, [sp, #16]
 800a63a:	7823      	ldrb	r3, [r4, #0]
 800a63c:	2b2e      	cmp	r3, #46	; 0x2e
 800a63e:	d10c      	bne.n	800a65a <_vfiprintf_r+0x176>
 800a640:	7863      	ldrb	r3, [r4, #1]
 800a642:	2b2a      	cmp	r3, #42	; 0x2a
 800a644:	d135      	bne.n	800a6b2 <_vfiprintf_r+0x1ce>
 800a646:	9b03      	ldr	r3, [sp, #12]
 800a648:	1d1a      	adds	r2, r3, #4
 800a64a:	681b      	ldr	r3, [r3, #0]
 800a64c:	9203      	str	r2, [sp, #12]
 800a64e:	2b00      	cmp	r3, #0
 800a650:	bfb8      	it	lt
 800a652:	f04f 33ff 	movlt.w	r3, #4294967295
 800a656:	3402      	adds	r4, #2
 800a658:	9305      	str	r3, [sp, #20]
 800a65a:	f8df a0e4 	ldr.w	sl, [pc, #228]	; 800a740 <_vfiprintf_r+0x25c>
 800a65e:	7821      	ldrb	r1, [r4, #0]
 800a660:	2203      	movs	r2, #3
 800a662:	4650      	mov	r0, sl
 800a664:	f7f5 fdc4 	bl	80001f0 <memchr>
 800a668:	b140      	cbz	r0, 800a67c <_vfiprintf_r+0x198>
 800a66a:	2340      	movs	r3, #64	; 0x40
 800a66c:	eba0 000a 	sub.w	r0, r0, sl
 800a670:	fa03 f000 	lsl.w	r0, r3, r0
 800a674:	9b04      	ldr	r3, [sp, #16]
 800a676:	4303      	orrs	r3, r0
 800a678:	3401      	adds	r4, #1
 800a67a:	9304      	str	r3, [sp, #16]
 800a67c:	f814 1b01 	ldrb.w	r1, [r4], #1
 800a680:	482c      	ldr	r0, [pc, #176]	; (800a734 <_vfiprintf_r+0x250>)
 800a682:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 800a686:	2206      	movs	r2, #6
 800a688:	f7f5 fdb2 	bl	80001f0 <memchr>
 800a68c:	2800      	cmp	r0, #0
 800a68e:	d03f      	beq.n	800a710 <_vfiprintf_r+0x22c>
 800a690:	4b29      	ldr	r3, [pc, #164]	; (800a738 <_vfiprintf_r+0x254>)
 800a692:	bb1b      	cbnz	r3, 800a6dc <_vfiprintf_r+0x1f8>
 800a694:	9b03      	ldr	r3, [sp, #12]
 800a696:	3307      	adds	r3, #7
 800a698:	f023 0307 	bic.w	r3, r3, #7
 800a69c:	3308      	adds	r3, #8
 800a69e:	9303      	str	r3, [sp, #12]
 800a6a0:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800a6a2:	443b      	add	r3, r7
 800a6a4:	9309      	str	r3, [sp, #36]	; 0x24
 800a6a6:	e767      	b.n	800a578 <_vfiprintf_r+0x94>
 800a6a8:	fb0c 3202 	mla	r2, ip, r2, r3
 800a6ac:	460c      	mov	r4, r1
 800a6ae:	2001      	movs	r0, #1
 800a6b0:	e7a5      	b.n	800a5fe <_vfiprintf_r+0x11a>
 800a6b2:	2300      	movs	r3, #0
 800a6b4:	3401      	adds	r4, #1
 800a6b6:	9305      	str	r3, [sp, #20]
 800a6b8:	4619      	mov	r1, r3
 800a6ba:	f04f 0c0a 	mov.w	ip, #10
 800a6be:	4620      	mov	r0, r4
 800a6c0:	f810 2b01 	ldrb.w	r2, [r0], #1
 800a6c4:	3a30      	subs	r2, #48	; 0x30
 800a6c6:	2a09      	cmp	r2, #9
 800a6c8:	d903      	bls.n	800a6d2 <_vfiprintf_r+0x1ee>
 800a6ca:	2b00      	cmp	r3, #0
 800a6cc:	d0c5      	beq.n	800a65a <_vfiprintf_r+0x176>
 800a6ce:	9105      	str	r1, [sp, #20]
 800a6d0:	e7c3      	b.n	800a65a <_vfiprintf_r+0x176>
 800a6d2:	fb0c 2101 	mla	r1, ip, r1, r2
 800a6d6:	4604      	mov	r4, r0
 800a6d8:	2301      	movs	r3, #1
 800a6da:	e7f0      	b.n	800a6be <_vfiprintf_r+0x1da>
 800a6dc:	ab03      	add	r3, sp, #12
 800a6de:	9300      	str	r3, [sp, #0]
 800a6e0:	462a      	mov	r2, r5
 800a6e2:	4b16      	ldr	r3, [pc, #88]	; (800a73c <_vfiprintf_r+0x258>)
 800a6e4:	a904      	add	r1, sp, #16
 800a6e6:	4630      	mov	r0, r6
 800a6e8:	f3af 8000 	nop.w
 800a6ec:	4607      	mov	r7, r0
 800a6ee:	1c78      	adds	r0, r7, #1
 800a6f0:	d1d6      	bne.n	800a6a0 <_vfiprintf_r+0x1bc>
 800a6f2:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 800a6f4:	07d9      	lsls	r1, r3, #31
 800a6f6:	d405      	bmi.n	800a704 <_vfiprintf_r+0x220>
 800a6f8:	89ab      	ldrh	r3, [r5, #12]
 800a6fa:	059a      	lsls	r2, r3, #22
 800a6fc:	d402      	bmi.n	800a704 <_vfiprintf_r+0x220>
 800a6fe:	6da8      	ldr	r0, [r5, #88]	; 0x58
 800a700:	f7ff fcf7 	bl	800a0f2 <__retarget_lock_release_recursive>
 800a704:	89ab      	ldrh	r3, [r5, #12]
 800a706:	065b      	lsls	r3, r3, #25
 800a708:	f53f af12 	bmi.w	800a530 <_vfiprintf_r+0x4c>
 800a70c:	9809      	ldr	r0, [sp, #36]	; 0x24
 800a70e:	e711      	b.n	800a534 <_vfiprintf_r+0x50>
 800a710:	ab03      	add	r3, sp, #12
 800a712:	9300      	str	r3, [sp, #0]
 800a714:	462a      	mov	r2, r5
 800a716:	4b09      	ldr	r3, [pc, #36]	; (800a73c <_vfiprintf_r+0x258>)
 800a718:	a904      	add	r1, sp, #16
 800a71a:	4630      	mov	r0, r6
 800a71c:	f000 f880 	bl	800a820 <_printf_i>
 800a720:	e7e4      	b.n	800a6ec <_vfiprintf_r+0x208>
 800a722:	bf00      	nop
 800a724:	0800aefc 	.word	0x0800aefc
 800a728:	0800af1c 	.word	0x0800af1c
 800a72c:	0800aedc 	.word	0x0800aedc
 800a730:	0800af3c 	.word	0x0800af3c
 800a734:	0800af46 	.word	0x0800af46
 800a738:	00000000 	.word	0x00000000
 800a73c:	0800a4bf 	.word	0x0800a4bf
 800a740:	0800af42 	.word	0x0800af42

0800a744 <_printf_common>:
 800a744:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800a748:	4616      	mov	r6, r2
 800a74a:	4699      	mov	r9, r3
 800a74c:	688a      	ldr	r2, [r1, #8]
 800a74e:	690b      	ldr	r3, [r1, #16]
 800a750:	f8dd 8020 	ldr.w	r8, [sp, #32]
 800a754:	4293      	cmp	r3, r2
 800a756:	bfb8      	it	lt
 800a758:	4613      	movlt	r3, r2
 800a75a:	6033      	str	r3, [r6, #0]
 800a75c:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 800a760:	4607      	mov	r7, r0
 800a762:	460c      	mov	r4, r1
 800a764:	b10a      	cbz	r2, 800a76a <_printf_common+0x26>
 800a766:	3301      	adds	r3, #1
 800a768:	6033      	str	r3, [r6, #0]
 800a76a:	6823      	ldr	r3, [r4, #0]
 800a76c:	0699      	lsls	r1, r3, #26
 800a76e:	bf42      	ittt	mi
 800a770:	6833      	ldrmi	r3, [r6, #0]
 800a772:	3302      	addmi	r3, #2
 800a774:	6033      	strmi	r3, [r6, #0]
 800a776:	6825      	ldr	r5, [r4, #0]
 800a778:	f015 0506 	ands.w	r5, r5, #6
 800a77c:	d106      	bne.n	800a78c <_printf_common+0x48>
 800a77e:	f104 0a19 	add.w	sl, r4, #25
 800a782:	68e3      	ldr	r3, [r4, #12]
 800a784:	6832      	ldr	r2, [r6, #0]
 800a786:	1a9b      	subs	r3, r3, r2
 800a788:	42ab      	cmp	r3, r5
 800a78a:	dc26      	bgt.n	800a7da <_printf_common+0x96>
 800a78c:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 800a790:	1e13      	subs	r3, r2, #0
 800a792:	6822      	ldr	r2, [r4, #0]
 800a794:	bf18      	it	ne
 800a796:	2301      	movne	r3, #1
 800a798:	0692      	lsls	r2, r2, #26
 800a79a:	d42b      	bmi.n	800a7f4 <_printf_common+0xb0>
 800a79c:	f104 0243 	add.w	r2, r4, #67	; 0x43
 800a7a0:	4649      	mov	r1, r9
 800a7a2:	4638      	mov	r0, r7
 800a7a4:	47c0      	blx	r8
 800a7a6:	3001      	adds	r0, #1
 800a7a8:	d01e      	beq.n	800a7e8 <_printf_common+0xa4>
 800a7aa:	6823      	ldr	r3, [r4, #0]
 800a7ac:	68e5      	ldr	r5, [r4, #12]
 800a7ae:	6832      	ldr	r2, [r6, #0]
 800a7b0:	f003 0306 	and.w	r3, r3, #6
 800a7b4:	2b04      	cmp	r3, #4
 800a7b6:	bf08      	it	eq
 800a7b8:	1aad      	subeq	r5, r5, r2
 800a7ba:	68a3      	ldr	r3, [r4, #8]
 800a7bc:	6922      	ldr	r2, [r4, #16]
 800a7be:	bf0c      	ite	eq
 800a7c0:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 800a7c4:	2500      	movne	r5, #0
 800a7c6:	4293      	cmp	r3, r2
 800a7c8:	bfc4      	itt	gt
 800a7ca:	1a9b      	subgt	r3, r3, r2
 800a7cc:	18ed      	addgt	r5, r5, r3
 800a7ce:	2600      	movs	r6, #0
 800a7d0:	341a      	adds	r4, #26
 800a7d2:	42b5      	cmp	r5, r6
 800a7d4:	d11a      	bne.n	800a80c <_printf_common+0xc8>
 800a7d6:	2000      	movs	r0, #0
 800a7d8:	e008      	b.n	800a7ec <_printf_common+0xa8>
 800a7da:	2301      	movs	r3, #1
 800a7dc:	4652      	mov	r2, sl
 800a7de:	4649      	mov	r1, r9
 800a7e0:	4638      	mov	r0, r7
 800a7e2:	47c0      	blx	r8
 800a7e4:	3001      	adds	r0, #1
 800a7e6:	d103      	bne.n	800a7f0 <_printf_common+0xac>
 800a7e8:	f04f 30ff 	mov.w	r0, #4294967295
 800a7ec:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800a7f0:	3501      	adds	r5, #1
 800a7f2:	e7c6      	b.n	800a782 <_printf_common+0x3e>
 800a7f4:	18e1      	adds	r1, r4, r3
 800a7f6:	1c5a      	adds	r2, r3, #1
 800a7f8:	2030      	movs	r0, #48	; 0x30
 800a7fa:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 800a7fe:	4422      	add	r2, r4
 800a800:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 800a804:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 800a808:	3302      	adds	r3, #2
 800a80a:	e7c7      	b.n	800a79c <_printf_common+0x58>
 800a80c:	2301      	movs	r3, #1
 800a80e:	4622      	mov	r2, r4
 800a810:	4649      	mov	r1, r9
 800a812:	4638      	mov	r0, r7
 800a814:	47c0      	blx	r8
 800a816:	3001      	adds	r0, #1
 800a818:	d0e6      	beq.n	800a7e8 <_printf_common+0xa4>
 800a81a:	3601      	adds	r6, #1
 800a81c:	e7d9      	b.n	800a7d2 <_printf_common+0x8e>
	...

0800a820 <_printf_i>:
 800a820:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 800a824:	7e0f      	ldrb	r7, [r1, #24]
 800a826:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 800a828:	2f78      	cmp	r7, #120	; 0x78
 800a82a:	4691      	mov	r9, r2
 800a82c:	4680      	mov	r8, r0
 800a82e:	460c      	mov	r4, r1
 800a830:	469a      	mov	sl, r3
 800a832:	f101 0243 	add.w	r2, r1, #67	; 0x43
 800a836:	d807      	bhi.n	800a848 <_printf_i+0x28>
 800a838:	2f62      	cmp	r7, #98	; 0x62
 800a83a:	d80a      	bhi.n	800a852 <_printf_i+0x32>
 800a83c:	2f00      	cmp	r7, #0
 800a83e:	f000 80d8 	beq.w	800a9f2 <_printf_i+0x1d2>
 800a842:	2f58      	cmp	r7, #88	; 0x58
 800a844:	f000 80a3 	beq.w	800a98e <_printf_i+0x16e>
 800a848:	f104 0542 	add.w	r5, r4, #66	; 0x42
 800a84c:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 800a850:	e03a      	b.n	800a8c8 <_printf_i+0xa8>
 800a852:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 800a856:	2b15      	cmp	r3, #21
 800a858:	d8f6      	bhi.n	800a848 <_printf_i+0x28>
 800a85a:	a101      	add	r1, pc, #4	; (adr r1, 800a860 <_printf_i+0x40>)
 800a85c:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 800a860:	0800a8b9 	.word	0x0800a8b9
 800a864:	0800a8cd 	.word	0x0800a8cd
 800a868:	0800a849 	.word	0x0800a849
 800a86c:	0800a849 	.word	0x0800a849
 800a870:	0800a849 	.word	0x0800a849
 800a874:	0800a849 	.word	0x0800a849
 800a878:	0800a8cd 	.word	0x0800a8cd
 800a87c:	0800a849 	.word	0x0800a849
 800a880:	0800a849 	.word	0x0800a849
 800a884:	0800a849 	.word	0x0800a849
 800a888:	0800a849 	.word	0x0800a849
 800a88c:	0800a9d9 	.word	0x0800a9d9
 800a890:	0800a8fd 	.word	0x0800a8fd
 800a894:	0800a9bb 	.word	0x0800a9bb
 800a898:	0800a849 	.word	0x0800a849
 800a89c:	0800a849 	.word	0x0800a849
 800a8a0:	0800a9fb 	.word	0x0800a9fb
 800a8a4:	0800a849 	.word	0x0800a849
 800a8a8:	0800a8fd 	.word	0x0800a8fd
 800a8ac:	0800a849 	.word	0x0800a849
 800a8b0:	0800a849 	.word	0x0800a849
 800a8b4:	0800a9c3 	.word	0x0800a9c3
 800a8b8:	682b      	ldr	r3, [r5, #0]
 800a8ba:	1d1a      	adds	r2, r3, #4
 800a8bc:	681b      	ldr	r3, [r3, #0]
 800a8be:	602a      	str	r2, [r5, #0]
 800a8c0:	f104 0542 	add.w	r5, r4, #66	; 0x42
 800a8c4:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 800a8c8:	2301      	movs	r3, #1
 800a8ca:	e0a3      	b.n	800aa14 <_printf_i+0x1f4>
 800a8cc:	6820      	ldr	r0, [r4, #0]
 800a8ce:	6829      	ldr	r1, [r5, #0]
 800a8d0:	0606      	lsls	r6, r0, #24
 800a8d2:	f101 0304 	add.w	r3, r1, #4
 800a8d6:	d50a      	bpl.n	800a8ee <_printf_i+0xce>
 800a8d8:	680e      	ldr	r6, [r1, #0]
 800a8da:	602b      	str	r3, [r5, #0]
 800a8dc:	2e00      	cmp	r6, #0
 800a8de:	da03      	bge.n	800a8e8 <_printf_i+0xc8>
 800a8e0:	232d      	movs	r3, #45	; 0x2d
 800a8e2:	4276      	negs	r6, r6
 800a8e4:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800a8e8:	485e      	ldr	r0, [pc, #376]	; (800aa64 <_printf_i+0x244>)
 800a8ea:	230a      	movs	r3, #10
 800a8ec:	e019      	b.n	800a922 <_printf_i+0x102>
 800a8ee:	680e      	ldr	r6, [r1, #0]
 800a8f0:	602b      	str	r3, [r5, #0]
 800a8f2:	f010 0f40 	tst.w	r0, #64	; 0x40
 800a8f6:	bf18      	it	ne
 800a8f8:	b236      	sxthne	r6, r6
 800a8fa:	e7ef      	b.n	800a8dc <_printf_i+0xbc>
 800a8fc:	682b      	ldr	r3, [r5, #0]
 800a8fe:	6820      	ldr	r0, [r4, #0]
 800a900:	1d19      	adds	r1, r3, #4
 800a902:	6029      	str	r1, [r5, #0]
 800a904:	0601      	lsls	r1, r0, #24
 800a906:	d501      	bpl.n	800a90c <_printf_i+0xec>
 800a908:	681e      	ldr	r6, [r3, #0]
 800a90a:	e002      	b.n	800a912 <_printf_i+0xf2>
 800a90c:	0646      	lsls	r6, r0, #25
 800a90e:	d5fb      	bpl.n	800a908 <_printf_i+0xe8>
 800a910:	881e      	ldrh	r6, [r3, #0]
 800a912:	4854      	ldr	r0, [pc, #336]	; (800aa64 <_printf_i+0x244>)
 800a914:	2f6f      	cmp	r7, #111	; 0x6f
 800a916:	bf0c      	ite	eq
 800a918:	2308      	moveq	r3, #8
 800a91a:	230a      	movne	r3, #10
 800a91c:	2100      	movs	r1, #0
 800a91e:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 800a922:	6865      	ldr	r5, [r4, #4]
 800a924:	60a5      	str	r5, [r4, #8]
 800a926:	2d00      	cmp	r5, #0
 800a928:	bfa2      	ittt	ge
 800a92a:	6821      	ldrge	r1, [r4, #0]
 800a92c:	f021 0104 	bicge.w	r1, r1, #4
 800a930:	6021      	strge	r1, [r4, #0]
 800a932:	b90e      	cbnz	r6, 800a938 <_printf_i+0x118>
 800a934:	2d00      	cmp	r5, #0
 800a936:	d04d      	beq.n	800a9d4 <_printf_i+0x1b4>
 800a938:	4615      	mov	r5, r2
 800a93a:	fbb6 f1f3 	udiv	r1, r6, r3
 800a93e:	fb03 6711 	mls	r7, r3, r1, r6
 800a942:	5dc7      	ldrb	r7, [r0, r7]
 800a944:	f805 7d01 	strb.w	r7, [r5, #-1]!
 800a948:	4637      	mov	r7, r6
 800a94a:	42bb      	cmp	r3, r7
 800a94c:	460e      	mov	r6, r1
 800a94e:	d9f4      	bls.n	800a93a <_printf_i+0x11a>
 800a950:	2b08      	cmp	r3, #8
 800a952:	d10b      	bne.n	800a96c <_printf_i+0x14c>
 800a954:	6823      	ldr	r3, [r4, #0]
 800a956:	07de      	lsls	r6, r3, #31
 800a958:	d508      	bpl.n	800a96c <_printf_i+0x14c>
 800a95a:	6923      	ldr	r3, [r4, #16]
 800a95c:	6861      	ldr	r1, [r4, #4]
 800a95e:	4299      	cmp	r1, r3
 800a960:	bfde      	ittt	le
 800a962:	2330      	movle	r3, #48	; 0x30
 800a964:	f805 3c01 	strble.w	r3, [r5, #-1]
 800a968:	f105 35ff 	addle.w	r5, r5, #4294967295
 800a96c:	1b52      	subs	r2, r2, r5
 800a96e:	6122      	str	r2, [r4, #16]
 800a970:	f8cd a000 	str.w	sl, [sp]
 800a974:	464b      	mov	r3, r9
 800a976:	aa03      	add	r2, sp, #12
 800a978:	4621      	mov	r1, r4
 800a97a:	4640      	mov	r0, r8
 800a97c:	f7ff fee2 	bl	800a744 <_printf_common>
 800a980:	3001      	adds	r0, #1
 800a982:	d14c      	bne.n	800aa1e <_printf_i+0x1fe>
 800a984:	f04f 30ff 	mov.w	r0, #4294967295
 800a988:	b004      	add	sp, #16
 800a98a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800a98e:	4835      	ldr	r0, [pc, #212]	; (800aa64 <_printf_i+0x244>)
 800a990:	f881 7045 	strb.w	r7, [r1, #69]	; 0x45
 800a994:	6829      	ldr	r1, [r5, #0]
 800a996:	6823      	ldr	r3, [r4, #0]
 800a998:	f851 6b04 	ldr.w	r6, [r1], #4
 800a99c:	6029      	str	r1, [r5, #0]
 800a99e:	061d      	lsls	r5, r3, #24
 800a9a0:	d514      	bpl.n	800a9cc <_printf_i+0x1ac>
 800a9a2:	07df      	lsls	r7, r3, #31
 800a9a4:	bf44      	itt	mi
 800a9a6:	f043 0320 	orrmi.w	r3, r3, #32
 800a9aa:	6023      	strmi	r3, [r4, #0]
 800a9ac:	b91e      	cbnz	r6, 800a9b6 <_printf_i+0x196>
 800a9ae:	6823      	ldr	r3, [r4, #0]
 800a9b0:	f023 0320 	bic.w	r3, r3, #32
 800a9b4:	6023      	str	r3, [r4, #0]
 800a9b6:	2310      	movs	r3, #16
 800a9b8:	e7b0      	b.n	800a91c <_printf_i+0xfc>
 800a9ba:	6823      	ldr	r3, [r4, #0]
 800a9bc:	f043 0320 	orr.w	r3, r3, #32
 800a9c0:	6023      	str	r3, [r4, #0]
 800a9c2:	2378      	movs	r3, #120	; 0x78
 800a9c4:	4828      	ldr	r0, [pc, #160]	; (800aa68 <_printf_i+0x248>)
 800a9c6:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 800a9ca:	e7e3      	b.n	800a994 <_printf_i+0x174>
 800a9cc:	0659      	lsls	r1, r3, #25
 800a9ce:	bf48      	it	mi
 800a9d0:	b2b6      	uxthmi	r6, r6
 800a9d2:	e7e6      	b.n	800a9a2 <_printf_i+0x182>
 800a9d4:	4615      	mov	r5, r2
 800a9d6:	e7bb      	b.n	800a950 <_printf_i+0x130>
 800a9d8:	682b      	ldr	r3, [r5, #0]
 800a9da:	6826      	ldr	r6, [r4, #0]
 800a9dc:	6961      	ldr	r1, [r4, #20]
 800a9de:	1d18      	adds	r0, r3, #4
 800a9e0:	6028      	str	r0, [r5, #0]
 800a9e2:	0635      	lsls	r5, r6, #24
 800a9e4:	681b      	ldr	r3, [r3, #0]
 800a9e6:	d501      	bpl.n	800a9ec <_printf_i+0x1cc>
 800a9e8:	6019      	str	r1, [r3, #0]
 800a9ea:	e002      	b.n	800a9f2 <_printf_i+0x1d2>
 800a9ec:	0670      	lsls	r0, r6, #25
 800a9ee:	d5fb      	bpl.n	800a9e8 <_printf_i+0x1c8>
 800a9f0:	8019      	strh	r1, [r3, #0]
 800a9f2:	2300      	movs	r3, #0
 800a9f4:	6123      	str	r3, [r4, #16]
 800a9f6:	4615      	mov	r5, r2
 800a9f8:	e7ba      	b.n	800a970 <_printf_i+0x150>
 800a9fa:	682b      	ldr	r3, [r5, #0]
 800a9fc:	1d1a      	adds	r2, r3, #4
 800a9fe:	602a      	str	r2, [r5, #0]
 800aa00:	681d      	ldr	r5, [r3, #0]
 800aa02:	6862      	ldr	r2, [r4, #4]
 800aa04:	2100      	movs	r1, #0
 800aa06:	4628      	mov	r0, r5
 800aa08:	f7f5 fbf2 	bl	80001f0 <memchr>
 800aa0c:	b108      	cbz	r0, 800aa12 <_printf_i+0x1f2>
 800aa0e:	1b40      	subs	r0, r0, r5
 800aa10:	6060      	str	r0, [r4, #4]
 800aa12:	6863      	ldr	r3, [r4, #4]
 800aa14:	6123      	str	r3, [r4, #16]
 800aa16:	2300      	movs	r3, #0
 800aa18:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800aa1c:	e7a8      	b.n	800a970 <_printf_i+0x150>
 800aa1e:	6923      	ldr	r3, [r4, #16]
 800aa20:	462a      	mov	r2, r5
 800aa22:	4649      	mov	r1, r9
 800aa24:	4640      	mov	r0, r8
 800aa26:	47d0      	blx	sl
 800aa28:	3001      	adds	r0, #1
 800aa2a:	d0ab      	beq.n	800a984 <_printf_i+0x164>
 800aa2c:	6823      	ldr	r3, [r4, #0]
 800aa2e:	079b      	lsls	r3, r3, #30
 800aa30:	d413      	bmi.n	800aa5a <_printf_i+0x23a>
 800aa32:	68e0      	ldr	r0, [r4, #12]
 800aa34:	9b03      	ldr	r3, [sp, #12]
 800aa36:	4298      	cmp	r0, r3
 800aa38:	bfb8      	it	lt
 800aa3a:	4618      	movlt	r0, r3
 800aa3c:	e7a4      	b.n	800a988 <_printf_i+0x168>
 800aa3e:	2301      	movs	r3, #1
 800aa40:	4632      	mov	r2, r6
 800aa42:	4649      	mov	r1, r9
 800aa44:	4640      	mov	r0, r8
 800aa46:	47d0      	blx	sl
 800aa48:	3001      	adds	r0, #1
 800aa4a:	d09b      	beq.n	800a984 <_printf_i+0x164>
 800aa4c:	3501      	adds	r5, #1
 800aa4e:	68e3      	ldr	r3, [r4, #12]
 800aa50:	9903      	ldr	r1, [sp, #12]
 800aa52:	1a5b      	subs	r3, r3, r1
 800aa54:	42ab      	cmp	r3, r5
 800aa56:	dcf2      	bgt.n	800aa3e <_printf_i+0x21e>
 800aa58:	e7eb      	b.n	800aa32 <_printf_i+0x212>
 800aa5a:	2500      	movs	r5, #0
 800aa5c:	f104 0619 	add.w	r6, r4, #25
 800aa60:	e7f5      	b.n	800aa4e <_printf_i+0x22e>
 800aa62:	bf00      	nop
 800aa64:	0800af4d 	.word	0x0800af4d
 800aa68:	0800af5e 	.word	0x0800af5e

0800aa6c <__sread>:
 800aa6c:	b510      	push	{r4, lr}
 800aa6e:	460c      	mov	r4, r1
 800aa70:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800aa74:	f000 f8de 	bl	800ac34 <_read_r>
 800aa78:	2800      	cmp	r0, #0
 800aa7a:	bfab      	itete	ge
 800aa7c:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 800aa7e:	89a3      	ldrhlt	r3, [r4, #12]
 800aa80:	181b      	addge	r3, r3, r0
 800aa82:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 800aa86:	bfac      	ite	ge
 800aa88:	6563      	strge	r3, [r4, #84]	; 0x54
 800aa8a:	81a3      	strhlt	r3, [r4, #12]
 800aa8c:	bd10      	pop	{r4, pc}

0800aa8e <__swrite>:
 800aa8e:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800aa92:	461f      	mov	r7, r3
 800aa94:	898b      	ldrh	r3, [r1, #12]
 800aa96:	05db      	lsls	r3, r3, #23
 800aa98:	4605      	mov	r5, r0
 800aa9a:	460c      	mov	r4, r1
 800aa9c:	4616      	mov	r6, r2
 800aa9e:	d505      	bpl.n	800aaac <__swrite+0x1e>
 800aaa0:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800aaa4:	2302      	movs	r3, #2
 800aaa6:	2200      	movs	r2, #0
 800aaa8:	f000 f868 	bl	800ab7c <_lseek_r>
 800aaac:	89a3      	ldrh	r3, [r4, #12]
 800aaae:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800aab2:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 800aab6:	81a3      	strh	r3, [r4, #12]
 800aab8:	4632      	mov	r2, r6
 800aaba:	463b      	mov	r3, r7
 800aabc:	4628      	mov	r0, r5
 800aabe:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800aac2:	f000 b817 	b.w	800aaf4 <_write_r>

0800aac6 <__sseek>:
 800aac6:	b510      	push	{r4, lr}
 800aac8:	460c      	mov	r4, r1
 800aaca:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800aace:	f000 f855 	bl	800ab7c <_lseek_r>
 800aad2:	1c43      	adds	r3, r0, #1
 800aad4:	89a3      	ldrh	r3, [r4, #12]
 800aad6:	bf15      	itete	ne
 800aad8:	6560      	strne	r0, [r4, #84]	; 0x54
 800aada:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 800aade:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 800aae2:	81a3      	strheq	r3, [r4, #12]
 800aae4:	bf18      	it	ne
 800aae6:	81a3      	strhne	r3, [r4, #12]
 800aae8:	bd10      	pop	{r4, pc}

0800aaea <__sclose>:
 800aaea:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800aaee:	f000 b813 	b.w	800ab18 <_close_r>
	...

0800aaf4 <_write_r>:
 800aaf4:	b538      	push	{r3, r4, r5, lr}
 800aaf6:	4d07      	ldr	r5, [pc, #28]	; (800ab14 <_write_r+0x20>)
 800aaf8:	4604      	mov	r4, r0
 800aafa:	4608      	mov	r0, r1
 800aafc:	4611      	mov	r1, r2
 800aafe:	2200      	movs	r2, #0
 800ab00:	602a      	str	r2, [r5, #0]
 800ab02:	461a      	mov	r2, r3
 800ab04:	f7f5 fd60 	bl	80005c8 <_write>
 800ab08:	1c43      	adds	r3, r0, #1
 800ab0a:	d102      	bne.n	800ab12 <_write_r+0x1e>
 800ab0c:	682b      	ldr	r3, [r5, #0]
 800ab0e:	b103      	cbz	r3, 800ab12 <_write_r+0x1e>
 800ab10:	6023      	str	r3, [r4, #0]
 800ab12:	bd38      	pop	{r3, r4, r5, pc}
 800ab14:	200093e8 	.word	0x200093e8

0800ab18 <_close_r>:
 800ab18:	b538      	push	{r3, r4, r5, lr}
 800ab1a:	4d06      	ldr	r5, [pc, #24]	; (800ab34 <_close_r+0x1c>)
 800ab1c:	2300      	movs	r3, #0
 800ab1e:	4604      	mov	r4, r0
 800ab20:	4608      	mov	r0, r1
 800ab22:	602b      	str	r3, [r5, #0]
 800ab24:	f7f6 fd53 	bl	80015ce <_close>
 800ab28:	1c43      	adds	r3, r0, #1
 800ab2a:	d102      	bne.n	800ab32 <_close_r+0x1a>
 800ab2c:	682b      	ldr	r3, [r5, #0]
 800ab2e:	b103      	cbz	r3, 800ab32 <_close_r+0x1a>
 800ab30:	6023      	str	r3, [r4, #0]
 800ab32:	bd38      	pop	{r3, r4, r5, pc}
 800ab34:	200093e8 	.word	0x200093e8

0800ab38 <_fstat_r>:
 800ab38:	b538      	push	{r3, r4, r5, lr}
 800ab3a:	4d07      	ldr	r5, [pc, #28]	; (800ab58 <_fstat_r+0x20>)
 800ab3c:	2300      	movs	r3, #0
 800ab3e:	4604      	mov	r4, r0
 800ab40:	4608      	mov	r0, r1
 800ab42:	4611      	mov	r1, r2
 800ab44:	602b      	str	r3, [r5, #0]
 800ab46:	f7f6 fd4e 	bl	80015e6 <_fstat>
 800ab4a:	1c43      	adds	r3, r0, #1
 800ab4c:	d102      	bne.n	800ab54 <_fstat_r+0x1c>
 800ab4e:	682b      	ldr	r3, [r5, #0]
 800ab50:	b103      	cbz	r3, 800ab54 <_fstat_r+0x1c>
 800ab52:	6023      	str	r3, [r4, #0]
 800ab54:	bd38      	pop	{r3, r4, r5, pc}
 800ab56:	bf00      	nop
 800ab58:	200093e8 	.word	0x200093e8

0800ab5c <_isatty_r>:
 800ab5c:	b538      	push	{r3, r4, r5, lr}
 800ab5e:	4d06      	ldr	r5, [pc, #24]	; (800ab78 <_isatty_r+0x1c>)
 800ab60:	2300      	movs	r3, #0
 800ab62:	4604      	mov	r4, r0
 800ab64:	4608      	mov	r0, r1
 800ab66:	602b      	str	r3, [r5, #0]
 800ab68:	f7f6 fd4d 	bl	8001606 <_isatty>
 800ab6c:	1c43      	adds	r3, r0, #1
 800ab6e:	d102      	bne.n	800ab76 <_isatty_r+0x1a>
 800ab70:	682b      	ldr	r3, [r5, #0]
 800ab72:	b103      	cbz	r3, 800ab76 <_isatty_r+0x1a>
 800ab74:	6023      	str	r3, [r4, #0]
 800ab76:	bd38      	pop	{r3, r4, r5, pc}
 800ab78:	200093e8 	.word	0x200093e8

0800ab7c <_lseek_r>:
 800ab7c:	b538      	push	{r3, r4, r5, lr}
 800ab7e:	4d07      	ldr	r5, [pc, #28]	; (800ab9c <_lseek_r+0x20>)
 800ab80:	4604      	mov	r4, r0
 800ab82:	4608      	mov	r0, r1
 800ab84:	4611      	mov	r1, r2
 800ab86:	2200      	movs	r2, #0
 800ab88:	602a      	str	r2, [r5, #0]
 800ab8a:	461a      	mov	r2, r3
 800ab8c:	f7f6 fd46 	bl	800161c <_lseek>
 800ab90:	1c43      	adds	r3, r0, #1
 800ab92:	d102      	bne.n	800ab9a <_lseek_r+0x1e>
 800ab94:	682b      	ldr	r3, [r5, #0]
 800ab96:	b103      	cbz	r3, 800ab9a <_lseek_r+0x1e>
 800ab98:	6023      	str	r3, [r4, #0]
 800ab9a:	bd38      	pop	{r3, r4, r5, pc}
 800ab9c:	200093e8 	.word	0x200093e8

0800aba0 <memmove>:
 800aba0:	4288      	cmp	r0, r1
 800aba2:	b510      	push	{r4, lr}
 800aba4:	eb01 0402 	add.w	r4, r1, r2
 800aba8:	d902      	bls.n	800abb0 <memmove+0x10>
 800abaa:	4284      	cmp	r4, r0
 800abac:	4623      	mov	r3, r4
 800abae:	d807      	bhi.n	800abc0 <memmove+0x20>
 800abb0:	1e43      	subs	r3, r0, #1
 800abb2:	42a1      	cmp	r1, r4
 800abb4:	d008      	beq.n	800abc8 <memmove+0x28>
 800abb6:	f811 2b01 	ldrb.w	r2, [r1], #1
 800abba:	f803 2f01 	strb.w	r2, [r3, #1]!
 800abbe:	e7f8      	b.n	800abb2 <memmove+0x12>
 800abc0:	4402      	add	r2, r0
 800abc2:	4601      	mov	r1, r0
 800abc4:	428a      	cmp	r2, r1
 800abc6:	d100      	bne.n	800abca <memmove+0x2a>
 800abc8:	bd10      	pop	{r4, pc}
 800abca:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 800abce:	f802 4d01 	strb.w	r4, [r2, #-1]!
 800abd2:	e7f7      	b.n	800abc4 <memmove+0x24>

0800abd4 <_realloc_r>:
 800abd4:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800abd8:	4680      	mov	r8, r0
 800abda:	4614      	mov	r4, r2
 800abdc:	460e      	mov	r6, r1
 800abde:	b921      	cbnz	r1, 800abea <_realloc_r+0x16>
 800abe0:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800abe4:	4611      	mov	r1, r2
 800abe6:	f7fe bed9 	b.w	800999c <_malloc_r>
 800abea:	b92a      	cbnz	r2, 800abf8 <_realloc_r+0x24>
 800abec:	f7fe fe6a 	bl	80098c4 <_free_r>
 800abf0:	4625      	mov	r5, r4
 800abf2:	4628      	mov	r0, r5
 800abf4:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800abf8:	f000 f82e 	bl	800ac58 <_malloc_usable_size_r>
 800abfc:	4284      	cmp	r4, r0
 800abfe:	4607      	mov	r7, r0
 800ac00:	d802      	bhi.n	800ac08 <_realloc_r+0x34>
 800ac02:	ebb4 0f50 	cmp.w	r4, r0, lsr #1
 800ac06:	d812      	bhi.n	800ac2e <_realloc_r+0x5a>
 800ac08:	4621      	mov	r1, r4
 800ac0a:	4640      	mov	r0, r8
 800ac0c:	f7fe fec6 	bl	800999c <_malloc_r>
 800ac10:	4605      	mov	r5, r0
 800ac12:	2800      	cmp	r0, #0
 800ac14:	d0ed      	beq.n	800abf2 <_realloc_r+0x1e>
 800ac16:	42bc      	cmp	r4, r7
 800ac18:	4622      	mov	r2, r4
 800ac1a:	4631      	mov	r1, r6
 800ac1c:	bf28      	it	cs
 800ac1e:	463a      	movcs	r2, r7
 800ac20:	f7fe fe3a 	bl	8009898 <memcpy>
 800ac24:	4631      	mov	r1, r6
 800ac26:	4640      	mov	r0, r8
 800ac28:	f7fe fe4c 	bl	80098c4 <_free_r>
 800ac2c:	e7e1      	b.n	800abf2 <_realloc_r+0x1e>
 800ac2e:	4635      	mov	r5, r6
 800ac30:	e7df      	b.n	800abf2 <_realloc_r+0x1e>
	...

0800ac34 <_read_r>:
 800ac34:	b538      	push	{r3, r4, r5, lr}
 800ac36:	4d07      	ldr	r5, [pc, #28]	; (800ac54 <_read_r+0x20>)
 800ac38:	4604      	mov	r4, r0
 800ac3a:	4608      	mov	r0, r1
 800ac3c:	4611      	mov	r1, r2
 800ac3e:	2200      	movs	r2, #0
 800ac40:	602a      	str	r2, [r5, #0]
 800ac42:	461a      	mov	r2, r3
 800ac44:	f7f6 fca6 	bl	8001594 <_read>
 800ac48:	1c43      	adds	r3, r0, #1
 800ac4a:	d102      	bne.n	800ac52 <_read_r+0x1e>
 800ac4c:	682b      	ldr	r3, [r5, #0]
 800ac4e:	b103      	cbz	r3, 800ac52 <_read_r+0x1e>
 800ac50:	6023      	str	r3, [r4, #0]
 800ac52:	bd38      	pop	{r3, r4, r5, pc}
 800ac54:	200093e8 	.word	0x200093e8

0800ac58 <_malloc_usable_size_r>:
 800ac58:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800ac5c:	1f18      	subs	r0, r3, #4
 800ac5e:	2b00      	cmp	r3, #0
 800ac60:	bfbc      	itt	lt
 800ac62:	580b      	ldrlt	r3, [r1, r0]
 800ac64:	18c0      	addlt	r0, r0, r3
 800ac66:	4770      	bx	lr

0800ac68 <_init>:
 800ac68:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800ac6a:	bf00      	nop
 800ac6c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800ac6e:	bc08      	pop	{r3}
 800ac70:	469e      	mov	lr, r3
 800ac72:	4770      	bx	lr

0800ac74 <_fini>:
 800ac74:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800ac76:	bf00      	nop
 800ac78:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800ac7a:	bc08      	pop	{r3}
 800ac7c:	469e      	mov	lr, r3
 800ac7e:	4770      	bx	lr
