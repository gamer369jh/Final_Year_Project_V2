
CMSIS_tm_basic_processing_test.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001ac  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         000060bc  080001b0  080001b0  000101b0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000228  0800626c  0800626c  0001626c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08006494  08006494  00020074  2**0
                  CONTENTS
  4 .ARM          00000008  08006494  08006494  00016494  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  0800649c  0800649c  00020074  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0800649c  0800649c  0001649c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  080064a0  080064a0  000164a0  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000074  20000000  080064a4  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .ccmram       00000000  10000000  10000000  00020074  2**0
                  CONTENTS
 10 .bss          00008218  20000074  20000074  00020074  2**2
                  ALLOC
 11 ._user_heap_stack 00000604  2000828c  2000828c  00020074  2**0
                  ALLOC
 12 ._threadx_heap 00010000  00000000  00000000  00010000  2**0
                  ALLOC
 13 .ARM.attributes 00000030  00000000  00000000  00020074  2**0
                  CONTENTS, READONLY
 14 .debug_info   00018732  00000000  00000000  000200a4  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_abbrev 00004b79  00000000  00000000  000387d6  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_aranges 00000e88  00000000  00000000  0003d350  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_ranges 00000b58  00000000  00000000  0003e1d8  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_macro  000281da  00000000  00000000  0003ed30  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_line   000186d7  00000000  00000000  00066f0a  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .debug_str    000dc32c  00000000  00000000  0007f5e1  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .comment      00000050  00000000  00000000  0015b90d  2**0
                  CONTENTS, READONLY
 22 .debug_frame  000037b0  00000000  00000000  0015b960  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001b0 <__do_global_dtors_aux>:
 80001b0:	b510      	push	{r4, lr}
 80001b2:	4c05      	ldr	r4, [pc, #20]	; (80001c8 <__do_global_dtors_aux+0x18>)
 80001b4:	7823      	ldrb	r3, [r4, #0]
 80001b6:	b933      	cbnz	r3, 80001c6 <__do_global_dtors_aux+0x16>
 80001b8:	4b04      	ldr	r3, [pc, #16]	; (80001cc <__do_global_dtors_aux+0x1c>)
 80001ba:	b113      	cbz	r3, 80001c2 <__do_global_dtors_aux+0x12>
 80001bc:	4804      	ldr	r0, [pc, #16]	; (80001d0 <__do_global_dtors_aux+0x20>)
 80001be:	f3af 8000 	nop.w
 80001c2:	2301      	movs	r3, #1
 80001c4:	7023      	strb	r3, [r4, #0]
 80001c6:	bd10      	pop	{r4, pc}
 80001c8:	20000074 	.word	0x20000074
 80001cc:	00000000 	.word	0x00000000
 80001d0:	08006254 	.word	0x08006254

080001d4 <frame_dummy>:
 80001d4:	b508      	push	{r3, lr}
 80001d6:	4b03      	ldr	r3, [pc, #12]	; (80001e4 <frame_dummy+0x10>)
 80001d8:	b11b      	cbz	r3, 80001e2 <frame_dummy+0xe>
 80001da:	4903      	ldr	r1, [pc, #12]	; (80001e8 <frame_dummy+0x14>)
 80001dc:	4803      	ldr	r0, [pc, #12]	; (80001ec <frame_dummy+0x18>)
 80001de:	f3af 8000 	nop.w
 80001e2:	bd08      	pop	{r3, pc}
 80001e4:	00000000 	.word	0x00000000
 80001e8:	20000078 	.word	0x20000078
 80001ec:	08006254 	.word	0x08006254

080001f0 <_tx_initialize_low_level>:
    .thumb_func
_tx_initialize_low_level:
@
@    /* Disable interrupts during ThreadX initialization.  */
@
    CPSID   i
 80001f0:	b672      	cpsid	i
@
@    /* Set base of available memory to end of non-initialised RAM area.  */
@
#ifdef USE_DYNAMIC_MEMORY_ALLOCATION
    LDR     r0, =_tx_initialize_unused_memory       @ Build address of unused memory pointer
 80001f2:	481d      	ldr	r0, [pc, #116]	; (8000268 <__tx_DBGHandler+0x6>)
    LDR     r1, =__RAM_segment_used_end__           @ Build first free address
 80001f4:	491d      	ldr	r1, [pc, #116]	; (800026c <__tx_DBGHandler+0xa>)
    ADD     r1, r1, #4                              @
 80001f6:	f101 0104 	add.w	r1, r1, #4
    STR     r1, [r0]                                @ Setup first unused memory pointer
 80001fa:	6001      	str	r1, [r0, #0]
#endif
@
@    /* Setup Vector Table Offset Register.  */
@
    MOV     r0, #0xE000E000                         @ Build address of NVIC registers
 80001fc:	f04f 20e0 	mov.w	r0, #3758153728	; 0xe000e000
    LDR     r1, =g_pfnVectors                           @ Pickup address of vector table
 8000200:	491b      	ldr	r1, [pc, #108]	; (8000270 <__tx_DBGHandler+0xe>)
    STR     r1, [r0, #0xD08]                        @ Set vector table address
 8000202:	f8c0 1d08 	str.w	r1, [r0, #3336]	; 0xd08
@
@    /* Set system stack pointer from vector value.  */
@
    LDR     r0, =_tx_thread_system_stack_ptr        @ Build address of system stack pointer
 8000206:	481b      	ldr	r0, [pc, #108]	; (8000274 <__tx_DBGHandler+0x12>)
    LDR     r1, =g_pfnVectors                           @ Pickup address of vector table
 8000208:	4919      	ldr	r1, [pc, #100]	; (8000270 <__tx_DBGHandler+0xe>)
    LDR     r1, [r1]                                @ Pickup reset stack pointer
 800020a:	6809      	ldr	r1, [r1, #0]
    STR     r1, [r0]                                @ Save system stack pointer
 800020c:	6001      	str	r1, [r0, #0]
@
@    /* Enable the cycle count register.  */
@
    LDR     r0, =0xE0001000                         @ Build address of DWT register
 800020e:	481a      	ldr	r0, [pc, #104]	; (8000278 <__tx_DBGHandler+0x16>)
    LDR     r1, [r0]                                @ Pickup the current value
 8000210:	6801      	ldr	r1, [r0, #0]
    ORR     r1, r1, #1                              @ Set the CYCCNTENA bit
 8000212:	f041 0101 	orr.w	r1, r1, #1
    STR     r1, [r0]                                @ Enable the cycle count register
 8000216:	6001      	str	r1, [r0, #0]
@
@    /* Configure SysTick for 100Hz clock, or 16384 cycles if no reference.  */
@
    MOV     r0, #0xE000E000                         @ Build address of NVIC registers
 8000218:	f04f 20e0 	mov.w	r0, #3758153728	; 0xe000e000
    LDR     r1, =SYSTICK_CYCLES
 800021c:	4917      	ldr	r1, [pc, #92]	; (800027c <__tx_DBGHandler+0x1a>)
    STR     r1, [r0, #0x14]                         @ Setup SysTick Reload Value
 800021e:	6141      	str	r1, [r0, #20]
    MOV     r1, #0x7                                @ Build SysTick Control Enable Value
 8000220:	f04f 0107 	mov.w	r1, #7
    STR     r1, [r0, #0x10]                         @ Setup SysTick Control
 8000224:	6101      	str	r1, [r0, #16]
@
@    /* Configure handler priorities.  */
@
    LDR     r1, =0x00000000                         @ Rsrv, UsgF, BusF, MemM
 8000226:	f04f 0100 	mov.w	r1, #0
    STR     r1, [r0, #0xD18]                        @ Setup System Handlers 4-7 Priority Registers
 800022a:	f8c0 1d18 	str.w	r1, [r0, #3352]	; 0xd18

    LDR     r1, =0xFF000000                         @ SVCl, Rsrv, Rsrv, Rsrv
 800022e:	f04f 417f 	mov.w	r1, #4278190080	; 0xff000000
    STR     r1, [r0, #0xD1C]                        @ Setup System Handlers 8-11 Priority Registers
 8000232:	f8c0 1d1c 	str.w	r1, [r0, #3356]	; 0xd1c
                                                    @ Note: SVC must be lowest priority, which is 0xFF

    LDR     r1, =0x40FF0000                         @ SysT, PnSV, Rsrv, DbgM
 8000236:	4912      	ldr	r1, [pc, #72]	; (8000280 <__tx_DBGHandler+0x1e>)
    STR     r1, [r0, #0xD20]                        @ Setup System Handlers 12-15 Priority Registers
 8000238:	f8c0 1d20 	str.w	r1, [r0, #3360]	; 0xd20
                                                    @ Note: PnSV must be lowest priority, which is 0xFF
@
@    /* Return to caller.  */
@
    BX      lr
 800023c:	4770      	bx	lr

0800023e <__tx_BadHandler>:
@/* Define shells for each of the unused vectors.  */
@
    .global  __tx_BadHandler
    .thumb_func
__tx_BadHandler:
    B       __tx_BadHandler
 800023e:	f7ff bffe 	b.w	800023e <__tx_BadHandler>

08000242 <__tx_HardfaultHandler>:
@ /* added to catch the hardfault */

    .global  __tx_HardfaultHandler
    .thumb_func
__tx_HardfaultHandler:
    B       __tx_HardfaultHandler
 8000242:	f7ff bffe 	b.w	8000242 <__tx_HardfaultHandler>

08000246 <__tx_SVCallHandler>:
@ /* added to catch the SVC */

    .global  __tx_SVCallHandler
    .thumb_func
__tx_SVCallHandler:
    B       __tx_SVCallHandler
 8000246:	f7ff bffe 	b.w	8000246 <__tx_SVCallHandler>

0800024a <__tx_IntHandler>:
    .global  __tx_IntHandler
    .thumb_func
__tx_IntHandler:
@ VOID InterruptHandler (VOID)
@ {
    PUSH    {r0, lr}
 800024a:	b501      	push	{r0, lr}
@    /* BL <your C Function>.... */

#ifdef TX_ENABLE_EXECUTION_CHANGE_NOTIFY
    BL      _tx_execution_isr_exit              @ Call the ISR exit function
#endif
    POP     {r0, lr}
 800024c:	e8bd 4001 	ldmia.w	sp!, {r0, lr}
    BX      LR
 8000250:	4770      	bx	lr

08000252 <SysTick_Handler>:
    .thumb_func
SysTick_Handler:
@ VOID TimerInterruptHandler (VOID)
@ {
@
    PUSH    {r0, lr}
 8000252:	b501      	push	{r0, lr}
#ifdef TX_ENABLE_EXECUTION_CHANGE_NOTIFY
    BL      _tx_execution_isr_enter             @ Call the ISR enter function
#endif
    BL      _tx_timer_interrupt
 8000254:	f000 f8a4 	bl	80003a0 <_tx_timer_interrupt>
#ifdef TX_ENABLE_EXECUTION_CHANGE_NOTIFY
    BL      _tx_execution_isr_exit              @ Call the ISR exit function
#endif
    POP     {r0, lr}
 8000258:	e8bd 4001 	ldmia.w	sp!, {r0, lr}
    BX      LR
 800025c:	4770      	bx	lr

0800025e <__tx_NMIHandler>:

@ /* NMI, DBG handlers */
    .global  __tx_NMIHandler
    .thumb_func
__tx_NMIHandler:
    B       __tx_NMIHandler
 800025e:	f7ff bffe 	b.w	800025e <__tx_NMIHandler>

08000262 <__tx_DBGHandler>:

    .global  __tx_DBGHandler
    .thumb_func
__tx_DBGHandler:
    B       __tx_DBGHandler
 8000262:	f7ff bffe 	b.w	8000262 <__tx_DBGHandler>
 8000266:	0000      	.short	0x0000
    LDR     r0, =_tx_initialize_unused_memory       @ Build address of unused memory pointer
 8000268:	20007bdc 	.word	0x20007bdc
    LDR     r1, =__RAM_segment_used_end__           @ Build first free address
 800026c:	00000000 	.word	0x00000000
    LDR     r1, =g_pfnVectors                           @ Pickup address of vector table
 8000270:	08000000 	.word	0x08000000
    LDR     r0, =_tx_thread_system_stack_ptr        @ Build address of system stack pointer
 8000274:	20007be0 	.word	0x20007be0
    LDR     r0, =0xE0001000                         @ Build address of DWT register
 8000278:	e0001000 	.word	0xe0001000
    LDR     r1, =SYSTICK_CYCLES
 800027c:	0003d08f 	.word	0x0003d08f
    LDR     r1, =0x40FF0000                         @ SysT, PnSV, Rsrv, DbgM
 8000280:	40ff0000 	.word	0x40ff0000
	...

08000290 <_tx_thread_schedule>:
       from the first schedule request. Subsequent scheduling occurs
       from the PendSV handling routine below. */

    /* Clear the preempt-disable flag to enable rescheduling after initialization on Cortex-M targets.  */

    MOV     r0, #0                                  // Build value for TX_FALSE
 8000290:	f04f 0000 	mov.w	r0, #0
    LDR     r2, =_tx_thread_preempt_disable         // Build address of preempt disable flag
 8000294:	4a2e      	ldr	r2, [pc, #184]	; (8000350 <tx_thread_fpu_disable+0x2>)
    STR     r0, [r2, #0]                            // Clear preempt disable flag
 8000296:	6010      	str	r0, [r2, #0]

    /* Clear CONTROL.FPCA bit so VFP registers aren't unnecessarily stacked.  */

#ifdef __ARM_FP
    MRS     r0, CONTROL                             // Pickup current CONTROL register
 8000298:	f3ef 8014 	mrs	r0, CONTROL
    BIC     r0, r0, #4                              // Clear the FPCA bit
 800029c:	f020 0004 	bic.w	r0, r0, #4
    MSR     CONTROL, r0                             // Setup new CONTROL register
 80002a0:	f380 8814 	msr	CONTROL, r0
#endif

    /* Enable interrupts */
    CPSIE   i
 80002a4:	b662      	cpsie	i

    /* Enter the scheduler for the first time.  */

    MOV     r0, #0x10000000                         // Load PENDSVSET bit
 80002a6:	f04f 5080 	mov.w	r0, #268435456	; 0x10000000
    MOV     r1, #0xE000E000                         // Load NVIC base
 80002aa:	f04f 21e0 	mov.w	r1, #3758153728	; 0xe000e000
    STR     r0, [r1, #0xD04]                        // Set PENDSVBIT in ICSR
 80002ae:	f8c1 0d04 	str.w	r0, [r1, #3332]	; 0xd04
    DSB                                             // Complete all memory accesses
 80002b2:	f3bf 8f4f 	dsb	sy
    ISB                                             // Flush pipeline
 80002b6:	f3bf 8f6f 	isb	sy

080002ba <__tx_wait_here>:

    /* Wait here for the PendSV to take place.  */

__tx_wait_here:
    B       __tx_wait_here                          // Wait for the PendSV to happen
 80002ba:	e7fe      	b.n	80002ba <__tx_wait_here>

080002bc <PendSV_Handler>:
    BL      _tx_execution_thread_exit               // Call the thread exit function
    POP     {r0, lr}                                // Recover LR
    CPSIE   i                                       // Enable interrupts
#endif

    LDR     r0, =_tx_thread_current_ptr             // Build current thread pointer address
 80002bc:	4825      	ldr	r0, [pc, #148]	; (8000354 <tx_thread_fpu_disable+0x6>)
    LDR     r2, =_tx_thread_execute_ptr             // Build execute thread pointer address
 80002be:	4a26      	ldr	r2, [pc, #152]	; (8000358 <tx_thread_fpu_disable+0xa>)
    MOV     r3, #0                                  // Build NULL value
 80002c0:	f04f 0300 	mov.w	r3, #0
    LDR     r1, [r0]                                // Pickup current thread pointer
 80002c4:	6801      	ldr	r1, [r0, #0]

    /* Determine if there is a current thread to finish preserving.  */

    CBZ     r1, __tx_ts_new                         // If NULL, skip preservation
 80002c6:	b191      	cbz	r1, 80002ee <__tx_ts_new>

    /* Recover PSP and preserve current thread context.  */

    STR     r3, [r0]                                // Set _tx_thread_current_ptr to NULL
 80002c8:	6003      	str	r3, [r0, #0]
    MRS     r12, PSP                                // Pickup PSP pointer (thread's stack pointer)
 80002ca:	f3ef 8c09 	mrs	ip, PSP
    STMDB   r12!, {r4-r11}                          // Save its remaining registers
 80002ce:	e92c 0ff0 	stmdb	ip!, {r4, r5, r6, r7, r8, r9, sl, fp}
#ifdef __ARM_FP
    TST     LR, #0x10                               // Determine if the VFP extended frame is present
 80002d2:	f01e 0f10 	tst.w	lr, #16
    BNE     _skip_vfp_save
 80002d6:	d101      	bne.n	80002dc <_skip_vfp_save>
    VSTMDB  r12!,{s16-s31}                          // Yes, save additional VFP registers
 80002d8:	ed2c 8a10 	vstmdb	ip!, {s16-s31}

080002dc <_skip_vfp_save>:
_skip_vfp_save:
#endif
    LDR     r4, =_tx_timer_time_slice               // Build address of time-slice variable
 80002dc:	4c1f      	ldr	r4, [pc, #124]	; (800035c <tx_thread_fpu_disable+0xe>)
    STMDB   r12!, {LR}                              // Save LR on the stack
 80002de:	f84c ed04 	str.w	lr, [ip, #-4]!

    /* Determine if time-slice is active. If it isn't, skip time handling processing.  */

    LDR     r5, [r4]                                // Pickup current time-slice
 80002e2:	6825      	ldr	r5, [r4, #0]
    STR     r12, [r1, #8]                           // Save the thread stack pointer
 80002e4:	f8c1 c008 	str.w	ip, [r1, #8]
    CBZ     r5, __tx_ts_new                         // If not active, skip processing
 80002e8:	b10d      	cbz	r5, 80002ee <__tx_ts_new>

    /* Time-slice is active, save the current thread's time-slice and clear the global time-slice variable.  */

    STR     r5, [r1, #24]                           // Save current time-slice
 80002ea:	618d      	str	r5, [r1, #24]

    /* Clear the global time-slice.  */

    STR     r3, [r4]                                // Clear time-slice
 80002ec:	6023      	str	r3, [r4, #0]

080002ee <__tx_ts_new>:

__tx_ts_new:

    /* Now we are looking for a new thread to execute!  */

    CPSID   i                                       // Disable interrupts
 80002ee:	b672      	cpsid	i
    LDR     r1, [r2]                                // Is there another thread ready to execute?
 80002f0:	6811      	ldr	r1, [r2, #0]
    CBZ     r1, __tx_ts_wait                        // No, skip to the wait processing
 80002f2:	b1b1      	cbz	r1, 8000322 <__tx_ts_wait>

    /* Yes, another thread is ready for else, make the current thread the new thread.  */

    STR     r1, [r0]                                // Setup the current thread pointer to the new thread
 80002f4:	6001      	str	r1, [r0, #0]
    CPSIE   i                                       // Enable interrupts
 80002f6:	b662      	cpsie	i

080002f8 <__tx_ts_restore>:

    /* Increment the thread run count.  */

__tx_ts_restore:
    LDR     r7, [r1, #4]                            // Pickup the current thread run count
 80002f8:	684f      	ldr	r7, [r1, #4]
    LDR     r4, =_tx_timer_time_slice               // Build address of time-slice variable
 80002fa:	4c18      	ldr	r4, [pc, #96]	; (800035c <tx_thread_fpu_disable+0xe>)
    LDR     r5, [r1, #24]                           // Pickup thread's current time-slice
 80002fc:	698d      	ldr	r5, [r1, #24]
    ADD     r7, r7, #1                              // Increment the thread run count
 80002fe:	f107 0701 	add.w	r7, r7, #1
    STR     r7, [r1, #4]                            // Store the new run count
 8000302:	604f      	str	r7, [r1, #4]

    /* Setup global time-slice with thread's current time-slice.  */

    STR     r5, [r4]                                // Setup global time-slice
 8000304:	6025      	str	r5, [r4, #0]
    POP     {r0, r1}                                // Recover r0 and r1
#endif

    /* Restore the thread context and PSP.  */

    LDR     r12, [r1, #8]                           // Pickup thread's stack pointer
 8000306:	f8d1 c008 	ldr.w	ip, [r1, #8]
    LDMIA   r12!, {LR}                              // Pickup LR
 800030a:	f85c eb04 	ldr.w	lr, [ip], #4
#ifdef __ARM_FP
    TST     LR, #0x10                               // Determine if the VFP extended frame is present
 800030e:	f01e 0f10 	tst.w	lr, #16
    BNE     _skip_vfp_restore                       // If not, skip VFP restore
 8000312:	d101      	bne.n	8000318 <_skip_vfp_restore>
    VLDMIA  r12!, {s16-s31}                         // Yes, restore additional VFP registers
 8000314:	ecbc 8a10 	vldmia	ip!, {s16-s31}

08000318 <_skip_vfp_restore>:
_skip_vfp_restore:
#endif
    LDMIA   r12!, {r4-r11}                          // Recover thread's registers
 8000318:	e8bc 0ff0 	ldmia.w	ip!, {r4, r5, r6, r7, r8, r9, sl, fp}
    MSR     PSP, r12                                // Setup the thread's stack pointer
 800031c:	f38c 8809 	msr	PSP, ip

    /* Return to thread.  */

    BX      lr                                      // Return to thread!
 8000320:	4770      	bx	lr

08000322 <__tx_ts_wait>:
    /* The following is the idle wait processing... in this case, no threads are ready for execution and the
       system will simply be idle until an interrupt occurs that makes a thread ready. Note that interrupts
       are disabled to allow use of WFI for waiting for a thread to arrive.  */

__tx_ts_wait:
    CPSID   i                                       // Disable interrupts
 8000322:	b672      	cpsid	i
    LDR     r1, [r2]                                // Pickup the next thread to execute pointer
 8000324:	6811      	ldr	r1, [r2, #0]
    STR     r1, [r0]                                // Store it in the current pointer
 8000326:	6001      	str	r1, [r0, #0]
    CBNZ    r1, __tx_ts_ready                       // If non-NULL, a new thread is ready!
 8000328:	b949      	cbnz	r1, 800033e <__tx_ts_ready>

#ifdef TX_LOW_POWER
    PUSH    {r0-r3}
 800032a:	b40f      	push	{r0, r1, r2, r3}
    BL      tx_low_power_enter                      // Possibly enter low power mode
 800032c:	f004 fd10 	bl	8004d50 <tx_low_power_enter>
    POP     {r0-r3}
 8000330:	bc0f      	pop	{r0, r1, r2, r3}
    WFI                                             // Wait for interrupt
    ISB                                             // Ensure pipeline is flushed
#endif

#ifdef TX_LOW_POWER
    PUSH    {r0-r3}
 8000332:	b40f      	push	{r0, r1, r2, r3}
    BL      tx_low_power_exit                       // Exit low power mode
 8000334:	f004 fd28 	bl	8004d88 <tx_low_power_exit>
    POP     {r0-r3}
 8000338:	bc0f      	pop	{r0, r1, r2, r3}
#endif

    CPSIE   i                                       // Enable interrupts
 800033a:	b662      	cpsie	i
    B       __tx_ts_wait                            // Loop to continue waiting
 800033c:	e7f1      	b.n	8000322 <__tx_ts_wait>

0800033e <__tx_ts_ready>:

    /* At this point, we have a new thread ready to go. Clear any newly pended PendSV - since we are
       already in the handler!  */

__tx_ts_ready:
    MOV     r7, #0x08000000                         // Build clear PendSV value
 800033e:	f04f 6700 	mov.w	r7, #134217728	; 0x8000000
    MOV     r8, #0xE000E000                         // Build base NVIC address
 8000342:	f04f 28e0 	mov.w	r8, #3758153728	; 0xe000e000
    STR     r7, [r8, #0xD04]                        // Clear any PendSV
 8000346:	f8c8 7d04 	str.w	r7, [r8, #3332]	; 0xd04

    /* Re-enable interrupts and restore new thread.  */

    CPSIE   i                                       // Enable interrupts
 800034a:	b662      	cpsie	i
    B       __tx_ts_restore                         // Restore the thread
 800034c:	e7d4      	b.n	80002f8 <__tx_ts_restore>

0800034e <tx_thread_fpu_disable>:
tx_thread_fpu_disable:

    /* Automatic VPF logic is supported, this function is present only for
       backward compatibility purposes and therefore simply returns.  */

    BX      LR                                      // Return to caller
 800034e:	4770      	bx	lr
    LDR     r2, =_tx_thread_preempt_disable         // Build address of preempt disable flag
 8000350:	20007d04 	.word	0x20007d04
    LDR     r0, =_tx_thread_current_ptr             // Build current thread pointer address
 8000354:	20007be4 	.word	0x20007be4
    LDR     r2, =_tx_thread_execute_ptr             // Build execute thread pointer address
 8000358:	20007be8 	.word	0x20007be8
    LDR     r4, =_tx_timer_time_slice               // Build address of time-slice variable
 800035c:	20008274 	.word	0x20008274

08000360 <_tx_thread_stack_build>:
                       pc          Initial value for pc
                       xPSR        Initial value for xPSR

    Stack Bottom: (higher memory address)  */

    LDR     r2, [r0, #16]                           // Pickup end of stack area
 8000360:	6902      	ldr	r2, [r0, #16]
    BIC     r2, r2, #0x7                            // Align frame for 8-byte alignment
 8000362:	f022 0207 	bic.w	r2, r2, #7
    SUB     r2, r2, #68                             // Subtract frame size
 8000366:	f1a2 0244 	sub.w	r2, r2, #68	; 0x44
    LDR     r3, =0xFFFFFFFD                         // Build initial LR value
 800036a:	f06f 0302 	mvn.w	r3, #2
    STR     r3, [r2, #0]                            // Save on the stack
 800036e:	6013      	str	r3, [r2, #0]

    /* Actually build the stack frame.  */

    MOV     r3, #0                                  // Build initial register value
 8000370:	f04f 0300 	mov.w	r3, #0
    STR     r3, [r2, #4]                            // Store initial r4
 8000374:	6053      	str	r3, [r2, #4]
    STR     r3, [r2, #8]                            // Store initial r5
 8000376:	6093      	str	r3, [r2, #8]
    STR     r3, [r2, #12]                           // Store initial r6
 8000378:	60d3      	str	r3, [r2, #12]
    STR     r3, [r2, #16]                           // Store initial r7
 800037a:	6113      	str	r3, [r2, #16]
    STR     r3, [r2, #20]                           // Store initial r8
 800037c:	6153      	str	r3, [r2, #20]
    STR     r3, [r2, #24]                           // Store initial r9
 800037e:	6193      	str	r3, [r2, #24]
    STR     r3, [r2, #28]                           // Store initial r10
 8000380:	61d3      	str	r3, [r2, #28]
    STR     r3, [r2, #32]                           // Store initial r11
 8000382:	6213      	str	r3, [r2, #32]

    /* Hardware stack follows.  */

    STR     r3, [r2, #36]                           // Store initial r0
 8000384:	6253      	str	r3, [r2, #36]	; 0x24
    STR     r3, [r2, #40]                           // Store initial r1
 8000386:	6293      	str	r3, [r2, #40]	; 0x28
    STR     r3, [r2, #44]                           // Store initial r2
 8000388:	62d3      	str	r3, [r2, #44]	; 0x2c
    STR     r3, [r2, #48]                           // Store initial r3
 800038a:	6313      	str	r3, [r2, #48]	; 0x30
    STR     r3, [r2, #52]                           // Store initial r12
 800038c:	6353      	str	r3, [r2, #52]	; 0x34
    MOV     r3, #0xFFFFFFFF                         // Poison EXC_RETURN value
 800038e:	f04f 33ff 	mov.w	r3, #4294967295
    STR     r3, [r2, #56]                           // Store initial lr
 8000392:	6393      	str	r3, [r2, #56]	; 0x38
    STR     r1, [r2, #60]                           // Store initial pc
 8000394:	63d1      	str	r1, [r2, #60]	; 0x3c
    MOV     r3, #0x01000000                         // Only T-bit need be set
 8000396:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
    STR     r3, [r2, #64]                           // Store initial xPSR
 800039a:	6413      	str	r3, [r2, #64]	; 0x40

    /* Setup stack pointer.  */
    // thread_ptr -> tx_thread_stack_ptr =  r2;

    STR     r2, [r0, #8]                            // Save stack pointer in thread's
 800039c:	6082      	str	r2, [r0, #8]
                                                    //   control block
    BX      lr                                      // Return to caller
 800039e:	4770      	bx	lr

080003a0 <_tx_timer_interrupt>:
       for use.  */

    /* Increment the system clock.  */
    // _tx_timer_system_clock++;

    LDR     r1, =_tx_timer_system_clock             // Pickup address of system clock
 80003a0:	4922      	ldr	r1, [pc, #136]	; (800042c <__tx_timer_nothing_expired+0x6>)
    LDR     r0, [r1, #0]                            // Pickup system clock
 80003a2:	6808      	ldr	r0, [r1, #0]
    ADD     r0, r0, #1                              // Increment system clock
 80003a4:	f100 0001 	add.w	r0, r0, #1
    STR     r0, [r1, #0]                            // Store new system clock
 80003a8:	6008      	str	r0, [r1, #0]

    /* Test for time-slice expiration.  */
    // if (_tx_timer_time_slice)
    // {

    LDR     r3, =_tx_timer_time_slice               // Pickup address of time-slice
 80003aa:	4b21      	ldr	r3, [pc, #132]	; (8000430 <__tx_timer_nothing_expired+0xa>)
    LDR     r2, [r3, #0]                            // Pickup time-slice
 80003ac:	681a      	ldr	r2, [r3, #0]
    CBZ     r2, __tx_timer_no_time_slice            // Is it non-active?
 80003ae:	b13a      	cbz	r2, 80003c0 <__tx_timer_no_time_slice>
                                                    // Yes, skip time-slice processing

       /* Decrement the time_slice.  */
       // _tx_timer_time_slice--;

    SUB     r2, r2, #1                              // Decrement the time-slice
 80003b0:	f1a2 0201 	sub.w	r2, r2, #1
    STR     r2, [r3, #0]                            // Store new time-slice value
 80003b4:	601a      	str	r2, [r3, #0]

       /* Check for expiration.  */
       // if (__tx_timer_time_slice == 0)

    CBNZ    r2, __tx_timer_no_time_slice            // Has it expired?
 80003b6:	b91a      	cbnz	r2, 80003c0 <__tx_timer_no_time_slice>
                                                    // No, skip expiration processing

       /* Set the time-slice expired flag.  */
       // _tx_timer_expired_time_slice =  TX_TRUE;

    LDR     r3, =_tx_timer_expired_time_slice       // Pickup address of expired flag
 80003b8:	4b1e      	ldr	r3, [pc, #120]	; (8000434 <__tx_timer_nothing_expired+0xe>)
    MOV     r0, #1                                  // Build expired value
 80003ba:	f04f 0001 	mov.w	r0, #1
    STR     r0, [r3, #0]                            // Set time-slice expiration flag
 80003be:	6018      	str	r0, [r3, #0]

080003c0 <__tx_timer_no_time_slice>:

    /* Test for timer expiration.  */
    // if (*_tx_timer_current_ptr)
    // {

    LDR     r1, =_tx_timer_current_ptr              // Pickup current timer pointer address
 80003c0:	491d      	ldr	r1, [pc, #116]	; (8000438 <__tx_timer_nothing_expired+0x12>)
    LDR     r0, [r1, #0]                            // Pickup current timer
 80003c2:	6808      	ldr	r0, [r1, #0]
    LDR     r2, [r0, #0]                            // Pickup timer list entry
 80003c4:	6802      	ldr	r2, [r0, #0]
    CBZ     r2, __tx_timer_no_timer                 // Is there anything in the list?
 80003c6:	b122      	cbz	r2, 80003d2 <__tx_timer_no_timer>
                                                    // No, just increment the timer

        /* Set expiration flag.  */
        // _tx_timer_expired =  TX_TRUE;

    LDR     r3, =_tx_timer_expired                  // Pickup expiration flag address
 80003c8:	4b1c      	ldr	r3, [pc, #112]	; (800043c <__tx_timer_nothing_expired+0x16>)
    MOV     r2, #1                                  // Build expired value
 80003ca:	f04f 0201 	mov.w	r2, #1
    STR     r2, [r3, #0]                            // Set expired flag
 80003ce:	601a      	str	r2, [r3, #0]
    B       __tx_timer_done                         // Finished timer processing
 80003d0:	e008      	b.n	80003e4 <__tx_timer_done>

080003d2 <__tx_timer_no_timer>:
__tx_timer_no_timer:

        /* No timer expired, increment the timer pointer.  */
        // _tx_timer_current_ptr++;

    ADD     r0, r0, #4                              // Move to next timer
 80003d2:	f100 0004 	add.w	r0, r0, #4

        /* Check for wrap-around.  */
        // if (_tx_timer_current_ptr == _tx_timer_list_end)

    LDR     r3, =_tx_timer_list_end                 // Pickup addr of timer list end
 80003d6:	4b1a      	ldr	r3, [pc, #104]	; (8000440 <__tx_timer_nothing_expired+0x1a>)
    LDR     r2, [r3, #0]                            // Pickup list end
 80003d8:	681a      	ldr	r2, [r3, #0]
    CMP     r0, r2                                  // Are we at list end?
 80003da:	4290      	cmp	r0, r2
    BNE     __tx_timer_skip_wrap                    // No, skip wrap-around logic
 80003dc:	d101      	bne.n	80003e2 <__tx_timer_skip_wrap>

            /* Wrap to beginning of list.  */
            // _tx_timer_current_ptr =  _tx_timer_list_start;

    LDR     r3, =_tx_timer_list_start               // Pickup addr of timer list start
 80003de:	4b19      	ldr	r3, [pc, #100]	; (8000444 <__tx_timer_nothing_expired+0x1e>)
    LDR     r0, [r3, #0]                            // Set current pointer to list start
 80003e0:	6818      	ldr	r0, [r3, #0]

080003e2 <__tx_timer_skip_wrap>:

__tx_timer_skip_wrap:

    STR     r0, [r1, #0]                            // Store new current timer pointer
 80003e2:	6008      	str	r0, [r1, #0]

080003e4 <__tx_timer_done>:

    /* See if anything has expired.  */
    // if ((_tx_timer_expired_time_slice) || (_tx_timer_expired))
    // {

    LDR     r3, =_tx_timer_expired_time_slice       // Pickup addr of expired flag
 80003e4:	4b13      	ldr	r3, [pc, #76]	; (8000434 <__tx_timer_nothing_expired+0xe>)
    LDR     r2, [r3, #0]                            // Pickup time-slice expired flag
 80003e6:	681a      	ldr	r2, [r3, #0]
    CBNZ    r2, __tx_something_expired              // Did a time-slice expire?
 80003e8:	b912      	cbnz	r2, 80003f0 <__tx_something_expired>
                                                    // If non-zero, time-slice expired
    LDR     r1, =_tx_timer_expired                  // Pickup addr of other expired flag
 80003ea:	4914      	ldr	r1, [pc, #80]	; (800043c <__tx_timer_nothing_expired+0x16>)
    LDR     r0, [r1, #0]                            // Pickup timer expired flag
 80003ec:	6808      	ldr	r0, [r1, #0]
    CBZ     r0, __tx_timer_nothing_expired          // Did a timer expire?
 80003ee:	b1d0      	cbz	r0, 8000426 <__tx_timer_nothing_expired>

080003f0 <__tx_something_expired>:
                                                    // No, nothing expired

__tx_something_expired:

    STMDB   sp!, {r0, lr}                           // Save the lr register on the stack
 80003f0:	e92d 4001 	stmdb	sp!, {r0, lr}

    /* Did a timer expire?  */
    // if (_tx_timer_expired)
    // {

    LDR     r1, =_tx_timer_expired                  // Pickup addr of expired flag
 80003f4:	4911      	ldr	r1, [pc, #68]	; (800043c <__tx_timer_nothing_expired+0x16>)
    LDR     r0, [r1, #0]                            // Pickup timer expired flag
 80003f6:	6808      	ldr	r0, [r1, #0]
    CBZ     r0, __tx_timer_dont_activate            // Check for timer expiration
 80003f8:	b108      	cbz	r0, 80003fe <__tx_timer_dont_activate>
                                                    // If not set, skip timer activation

        /* Process timer expiration.  */
        // _tx_timer_expiration_process();

    BL      _tx_timer_expiration_process            // Call the timer expiration handling routine
 80003fa:	f003 fff5 	bl	80043e8 <_tx_timer_expiration_process>

080003fe <__tx_timer_dont_activate>:

    /* Did time slice expire?  */
    // if (_tx_timer_expired_time_slice)
    // {

    LDR     r3, =_tx_timer_expired_time_slice       // Pickup addr of time-slice expired
 80003fe:	4b0d      	ldr	r3, [pc, #52]	; (8000434 <__tx_timer_nothing_expired+0xe>)
    LDR     r2, [r3, #0]                            // Pickup the actual flag
 8000400:	681a      	ldr	r2, [r3, #0]
    CBZ     r2, __tx_timer_not_ts_expiration        // See if the flag is set
 8000402:	b172      	cbz	r2, 8000422 <__tx_timer_not_ts_expiration>
                                                    // No, skip time-slice processing

        /* Time slice interrupted thread.  */
        // _tx_thread_time_slice();

    BL      _tx_thread_time_slice                   // Call time-slice processing
 8000404:	f003 ff62 	bl	80042cc <_tx_thread_time_slice>
    LDR     r0, =_tx_thread_preempt_disable         // Build address of preempt disable flag
 8000408:	480f      	ldr	r0, [pc, #60]	; (8000448 <__tx_timer_nothing_expired+0x22>)
    LDR     r1, [r0]                                // Is the preempt disable flag set?
 800040a:	6801      	ldr	r1, [r0, #0]
    CBNZ    r1, __tx_timer_skip_time_slice          // Yes, skip the PendSV logic
 800040c:	b949      	cbnz	r1, 8000422 <__tx_timer_not_ts_expiration>
    LDR     r0, =_tx_thread_current_ptr             // Build current thread pointer address
 800040e:	480f      	ldr	r0, [pc, #60]	; (800044c <__tx_timer_nothing_expired+0x26>)
    LDR     r1, [r0]                                // Pickup the current thread pointer
 8000410:	6801      	ldr	r1, [r0, #0]
    LDR     r2, =_tx_thread_execute_ptr             // Build execute thread pointer address
 8000412:	4a0f      	ldr	r2, [pc, #60]	; (8000450 <__tx_timer_nothing_expired+0x2a>)
    LDR     r3, [r2]                                // Pickup the execute thread pointer
 8000414:	6813      	ldr	r3, [r2, #0]
    LDR     r0, =0xE000ED04                         // Build address of control register
 8000416:	480f      	ldr	r0, [pc, #60]	; (8000454 <__tx_timer_nothing_expired+0x2e>)
    LDR     r2, =0x10000000                         // Build value for PendSV bit
 8000418:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
    CMP     r1, r3                                  // Are they the same?
 800041c:	4299      	cmp	r1, r3
    BEQ     __tx_timer_skip_time_slice              // If the same, there was no time-slice performed
 800041e:	d000      	beq.n	8000422 <__tx_timer_not_ts_expiration>
    STR     r2, [r0]                                // Not the same, issue the PendSV for preemption
 8000420:	6002      	str	r2, [r0, #0]

08000422 <__tx_timer_not_ts_expiration>:

    // }

__tx_timer_not_ts_expiration:

    LDMIA   sp!, {r0, lr}                           // Recover lr register (r0 is just there for
 8000422:	e8bd 4001 	ldmia.w	sp!, {r0, lr}

08000426 <__tx_timer_nothing_expired>:

    // }

__tx_timer_nothing_expired:

    DSB                                             // Complete all memory access
 8000426:	f3bf 8f4f 	dsb	sy
    BX      lr                                      // Return to caller
 800042a:	4770      	bx	lr
    LDR     r1, =_tx_timer_system_clock             // Pickup address of system clock
 800042c:	20007d10 	.word	0x20007d10
    LDR     r3, =_tx_timer_time_slice               // Pickup address of time-slice
 8000430:	20008274 	.word	0x20008274
    LDR     r3, =_tx_timer_expired_time_slice       // Pickup address of expired flag
 8000434:	20007d14 	.word	0x20007d14
    LDR     r1, =_tx_timer_current_ptr              // Pickup current timer pointer address
 8000438:	20007da0 	.word	0x20007da0
    LDR     r3, =_tx_timer_expired                  // Pickup expiration flag address
 800043c:	20007da4 	.word	0x20007da4
    LDR     r3, =_tx_timer_list_end                 // Pickup addr of timer list end
 8000440:	20007d9c 	.word	0x20007d9c
    LDR     r3, =_tx_timer_list_start               // Pickup addr of timer list start
 8000444:	20007d98 	.word	0x20007d98
    LDR     r0, =_tx_thread_preempt_disable         // Build address of preempt disable flag
 8000448:	20007d04 	.word	0x20007d04
    LDR     r0, =_tx_thread_current_ptr             // Build current thread pointer address
 800044c:	20007be4 	.word	0x20007be4
    LDR     r2, =_tx_thread_execute_ptr             // Build execute thread pointer address
 8000450:	20007be8 	.word	0x20007be8
    LDR     r0, =0xE000ED04                         // Build address of control register
 8000454:	e000ed04 	.word	0xe000ed04
	...

08000460 <memchr>:
 8000460:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 8000464:	2a10      	cmp	r2, #16
 8000466:	db2b      	blt.n	80004c0 <memchr+0x60>
 8000468:	f010 0f07 	tst.w	r0, #7
 800046c:	d008      	beq.n	8000480 <memchr+0x20>
 800046e:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000472:	3a01      	subs	r2, #1
 8000474:	428b      	cmp	r3, r1
 8000476:	d02d      	beq.n	80004d4 <memchr+0x74>
 8000478:	f010 0f07 	tst.w	r0, #7
 800047c:	b342      	cbz	r2, 80004d0 <memchr+0x70>
 800047e:	d1f6      	bne.n	800046e <memchr+0xe>
 8000480:	b4f0      	push	{r4, r5, r6, r7}
 8000482:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000486:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800048a:	f022 0407 	bic.w	r4, r2, #7
 800048e:	f07f 0700 	mvns.w	r7, #0
 8000492:	2300      	movs	r3, #0
 8000494:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000498:	3c08      	subs	r4, #8
 800049a:	ea85 0501 	eor.w	r5, r5, r1
 800049e:	ea86 0601 	eor.w	r6, r6, r1
 80004a2:	fa85 f547 	uadd8	r5, r5, r7
 80004a6:	faa3 f587 	sel	r5, r3, r7
 80004aa:	fa86 f647 	uadd8	r6, r6, r7
 80004ae:	faa5 f687 	sel	r6, r5, r7
 80004b2:	b98e      	cbnz	r6, 80004d8 <memchr+0x78>
 80004b4:	d1ee      	bne.n	8000494 <memchr+0x34>
 80004b6:	bcf0      	pop	{r4, r5, r6, r7}
 80004b8:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 80004bc:	f002 0207 	and.w	r2, r2, #7
 80004c0:	b132      	cbz	r2, 80004d0 <memchr+0x70>
 80004c2:	f810 3b01 	ldrb.w	r3, [r0], #1
 80004c6:	3a01      	subs	r2, #1
 80004c8:	ea83 0301 	eor.w	r3, r3, r1
 80004cc:	b113      	cbz	r3, 80004d4 <memchr+0x74>
 80004ce:	d1f8      	bne.n	80004c2 <memchr+0x62>
 80004d0:	2000      	movs	r0, #0
 80004d2:	4770      	bx	lr
 80004d4:	3801      	subs	r0, #1
 80004d6:	4770      	bx	lr
 80004d8:	2d00      	cmp	r5, #0
 80004da:	bf06      	itte	eq
 80004dc:	4635      	moveq	r5, r6
 80004de:	3803      	subeq	r0, #3
 80004e0:	3807      	subne	r0, #7
 80004e2:	f015 0f01 	tst.w	r5, #1
 80004e6:	d107      	bne.n	80004f8 <memchr+0x98>
 80004e8:	3001      	adds	r0, #1
 80004ea:	f415 7f80 	tst.w	r5, #256	; 0x100
 80004ee:	bf02      	ittt	eq
 80004f0:	3001      	addeq	r0, #1
 80004f2:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 80004f6:	3001      	addeq	r0, #1
 80004f8:	bcf0      	pop	{r4, r5, r6, r7}
 80004fa:	3801      	subs	r0, #1
 80004fc:	4770      	bx	lr
 80004fe:	bf00      	nop

08000500 <__aeabi_uldivmod>:
 8000500:	b953      	cbnz	r3, 8000518 <__aeabi_uldivmod+0x18>
 8000502:	b94a      	cbnz	r2, 8000518 <__aeabi_uldivmod+0x18>
 8000504:	2900      	cmp	r1, #0
 8000506:	bf08      	it	eq
 8000508:	2800      	cmpeq	r0, #0
 800050a:	bf1c      	itt	ne
 800050c:	f04f 31ff 	movne.w	r1, #4294967295
 8000510:	f04f 30ff 	movne.w	r0, #4294967295
 8000514:	f000 b974 	b.w	8000800 <__aeabi_idiv0>
 8000518:	f1ad 0c08 	sub.w	ip, sp, #8
 800051c:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000520:	f000 f806 	bl	8000530 <__udivmoddi4>
 8000524:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000528:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 800052c:	b004      	add	sp, #16
 800052e:	4770      	bx	lr

08000530 <__udivmoddi4>:
 8000530:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000534:	9d08      	ldr	r5, [sp, #32]
 8000536:	4604      	mov	r4, r0
 8000538:	468e      	mov	lr, r1
 800053a:	2b00      	cmp	r3, #0
 800053c:	d14d      	bne.n	80005da <__udivmoddi4+0xaa>
 800053e:	428a      	cmp	r2, r1
 8000540:	4694      	mov	ip, r2
 8000542:	d969      	bls.n	8000618 <__udivmoddi4+0xe8>
 8000544:	fab2 f282 	clz	r2, r2
 8000548:	b152      	cbz	r2, 8000560 <__udivmoddi4+0x30>
 800054a:	fa01 f302 	lsl.w	r3, r1, r2
 800054e:	f1c2 0120 	rsb	r1, r2, #32
 8000552:	fa20 f101 	lsr.w	r1, r0, r1
 8000556:	fa0c fc02 	lsl.w	ip, ip, r2
 800055a:	ea41 0e03 	orr.w	lr, r1, r3
 800055e:	4094      	lsls	r4, r2
 8000560:	ea4f 481c 	mov.w	r8, ip, lsr #16
 8000564:	0c21      	lsrs	r1, r4, #16
 8000566:	fbbe f6f8 	udiv	r6, lr, r8
 800056a:	fa1f f78c 	uxth.w	r7, ip
 800056e:	fb08 e316 	mls	r3, r8, r6, lr
 8000572:	ea41 4303 	orr.w	r3, r1, r3, lsl #16
 8000576:	fb06 f107 	mul.w	r1, r6, r7
 800057a:	4299      	cmp	r1, r3
 800057c:	d90a      	bls.n	8000594 <__udivmoddi4+0x64>
 800057e:	eb1c 0303 	adds.w	r3, ip, r3
 8000582:	f106 30ff 	add.w	r0, r6, #4294967295
 8000586:	f080 811f 	bcs.w	80007c8 <__udivmoddi4+0x298>
 800058a:	4299      	cmp	r1, r3
 800058c:	f240 811c 	bls.w	80007c8 <__udivmoddi4+0x298>
 8000590:	3e02      	subs	r6, #2
 8000592:	4463      	add	r3, ip
 8000594:	1a5b      	subs	r3, r3, r1
 8000596:	b2a4      	uxth	r4, r4
 8000598:	fbb3 f0f8 	udiv	r0, r3, r8
 800059c:	fb08 3310 	mls	r3, r8, r0, r3
 80005a0:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 80005a4:	fb00 f707 	mul.w	r7, r0, r7
 80005a8:	42a7      	cmp	r7, r4
 80005aa:	d90a      	bls.n	80005c2 <__udivmoddi4+0x92>
 80005ac:	eb1c 0404 	adds.w	r4, ip, r4
 80005b0:	f100 33ff 	add.w	r3, r0, #4294967295
 80005b4:	f080 810a 	bcs.w	80007cc <__udivmoddi4+0x29c>
 80005b8:	42a7      	cmp	r7, r4
 80005ba:	f240 8107 	bls.w	80007cc <__udivmoddi4+0x29c>
 80005be:	4464      	add	r4, ip
 80005c0:	3802      	subs	r0, #2
 80005c2:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 80005c6:	1be4      	subs	r4, r4, r7
 80005c8:	2600      	movs	r6, #0
 80005ca:	b11d      	cbz	r5, 80005d4 <__udivmoddi4+0xa4>
 80005cc:	40d4      	lsrs	r4, r2
 80005ce:	2300      	movs	r3, #0
 80005d0:	e9c5 4300 	strd	r4, r3, [r5]
 80005d4:	4631      	mov	r1, r6
 80005d6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80005da:	428b      	cmp	r3, r1
 80005dc:	d909      	bls.n	80005f2 <__udivmoddi4+0xc2>
 80005de:	2d00      	cmp	r5, #0
 80005e0:	f000 80ef 	beq.w	80007c2 <__udivmoddi4+0x292>
 80005e4:	2600      	movs	r6, #0
 80005e6:	e9c5 0100 	strd	r0, r1, [r5]
 80005ea:	4630      	mov	r0, r6
 80005ec:	4631      	mov	r1, r6
 80005ee:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80005f2:	fab3 f683 	clz	r6, r3
 80005f6:	2e00      	cmp	r6, #0
 80005f8:	d14a      	bne.n	8000690 <__udivmoddi4+0x160>
 80005fa:	428b      	cmp	r3, r1
 80005fc:	d302      	bcc.n	8000604 <__udivmoddi4+0xd4>
 80005fe:	4282      	cmp	r2, r0
 8000600:	f200 80f9 	bhi.w	80007f6 <__udivmoddi4+0x2c6>
 8000604:	1a84      	subs	r4, r0, r2
 8000606:	eb61 0303 	sbc.w	r3, r1, r3
 800060a:	2001      	movs	r0, #1
 800060c:	469e      	mov	lr, r3
 800060e:	2d00      	cmp	r5, #0
 8000610:	d0e0      	beq.n	80005d4 <__udivmoddi4+0xa4>
 8000612:	e9c5 4e00 	strd	r4, lr, [r5]
 8000616:	e7dd      	b.n	80005d4 <__udivmoddi4+0xa4>
 8000618:	b902      	cbnz	r2, 800061c <__udivmoddi4+0xec>
 800061a:	deff      	udf	#255	; 0xff
 800061c:	fab2 f282 	clz	r2, r2
 8000620:	2a00      	cmp	r2, #0
 8000622:	f040 8092 	bne.w	800074a <__udivmoddi4+0x21a>
 8000626:	eba1 010c 	sub.w	r1, r1, ip
 800062a:	ea4f 471c 	mov.w	r7, ip, lsr #16
 800062e:	fa1f fe8c 	uxth.w	lr, ip
 8000632:	2601      	movs	r6, #1
 8000634:	0c20      	lsrs	r0, r4, #16
 8000636:	fbb1 f3f7 	udiv	r3, r1, r7
 800063a:	fb07 1113 	mls	r1, r7, r3, r1
 800063e:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 8000642:	fb0e f003 	mul.w	r0, lr, r3
 8000646:	4288      	cmp	r0, r1
 8000648:	d908      	bls.n	800065c <__udivmoddi4+0x12c>
 800064a:	eb1c 0101 	adds.w	r1, ip, r1
 800064e:	f103 38ff 	add.w	r8, r3, #4294967295
 8000652:	d202      	bcs.n	800065a <__udivmoddi4+0x12a>
 8000654:	4288      	cmp	r0, r1
 8000656:	f200 80cb 	bhi.w	80007f0 <__udivmoddi4+0x2c0>
 800065a:	4643      	mov	r3, r8
 800065c:	1a09      	subs	r1, r1, r0
 800065e:	b2a4      	uxth	r4, r4
 8000660:	fbb1 f0f7 	udiv	r0, r1, r7
 8000664:	fb07 1110 	mls	r1, r7, r0, r1
 8000668:	ea44 4401 	orr.w	r4, r4, r1, lsl #16
 800066c:	fb0e fe00 	mul.w	lr, lr, r0
 8000670:	45a6      	cmp	lr, r4
 8000672:	d908      	bls.n	8000686 <__udivmoddi4+0x156>
 8000674:	eb1c 0404 	adds.w	r4, ip, r4
 8000678:	f100 31ff 	add.w	r1, r0, #4294967295
 800067c:	d202      	bcs.n	8000684 <__udivmoddi4+0x154>
 800067e:	45a6      	cmp	lr, r4
 8000680:	f200 80bb 	bhi.w	80007fa <__udivmoddi4+0x2ca>
 8000684:	4608      	mov	r0, r1
 8000686:	eba4 040e 	sub.w	r4, r4, lr
 800068a:	ea40 4003 	orr.w	r0, r0, r3, lsl #16
 800068e:	e79c      	b.n	80005ca <__udivmoddi4+0x9a>
 8000690:	f1c6 0720 	rsb	r7, r6, #32
 8000694:	40b3      	lsls	r3, r6
 8000696:	fa22 fc07 	lsr.w	ip, r2, r7
 800069a:	ea4c 0c03 	orr.w	ip, ip, r3
 800069e:	fa20 f407 	lsr.w	r4, r0, r7
 80006a2:	fa01 f306 	lsl.w	r3, r1, r6
 80006a6:	431c      	orrs	r4, r3
 80006a8:	40f9      	lsrs	r1, r7
 80006aa:	ea4f 491c 	mov.w	r9, ip, lsr #16
 80006ae:	fa00 f306 	lsl.w	r3, r0, r6
 80006b2:	fbb1 f8f9 	udiv	r8, r1, r9
 80006b6:	0c20      	lsrs	r0, r4, #16
 80006b8:	fa1f fe8c 	uxth.w	lr, ip
 80006bc:	fb09 1118 	mls	r1, r9, r8, r1
 80006c0:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 80006c4:	fb08 f00e 	mul.w	r0, r8, lr
 80006c8:	4288      	cmp	r0, r1
 80006ca:	fa02 f206 	lsl.w	r2, r2, r6
 80006ce:	d90b      	bls.n	80006e8 <__udivmoddi4+0x1b8>
 80006d0:	eb1c 0101 	adds.w	r1, ip, r1
 80006d4:	f108 3aff 	add.w	sl, r8, #4294967295
 80006d8:	f080 8088 	bcs.w	80007ec <__udivmoddi4+0x2bc>
 80006dc:	4288      	cmp	r0, r1
 80006de:	f240 8085 	bls.w	80007ec <__udivmoddi4+0x2bc>
 80006e2:	f1a8 0802 	sub.w	r8, r8, #2
 80006e6:	4461      	add	r1, ip
 80006e8:	1a09      	subs	r1, r1, r0
 80006ea:	b2a4      	uxth	r4, r4
 80006ec:	fbb1 f0f9 	udiv	r0, r1, r9
 80006f0:	fb09 1110 	mls	r1, r9, r0, r1
 80006f4:	ea44 4101 	orr.w	r1, r4, r1, lsl #16
 80006f8:	fb00 fe0e 	mul.w	lr, r0, lr
 80006fc:	458e      	cmp	lr, r1
 80006fe:	d908      	bls.n	8000712 <__udivmoddi4+0x1e2>
 8000700:	eb1c 0101 	adds.w	r1, ip, r1
 8000704:	f100 34ff 	add.w	r4, r0, #4294967295
 8000708:	d26c      	bcs.n	80007e4 <__udivmoddi4+0x2b4>
 800070a:	458e      	cmp	lr, r1
 800070c:	d96a      	bls.n	80007e4 <__udivmoddi4+0x2b4>
 800070e:	3802      	subs	r0, #2
 8000710:	4461      	add	r1, ip
 8000712:	ea40 4008 	orr.w	r0, r0, r8, lsl #16
 8000716:	fba0 9402 	umull	r9, r4, r0, r2
 800071a:	eba1 010e 	sub.w	r1, r1, lr
 800071e:	42a1      	cmp	r1, r4
 8000720:	46c8      	mov	r8, r9
 8000722:	46a6      	mov	lr, r4
 8000724:	d356      	bcc.n	80007d4 <__udivmoddi4+0x2a4>
 8000726:	d053      	beq.n	80007d0 <__udivmoddi4+0x2a0>
 8000728:	b15d      	cbz	r5, 8000742 <__udivmoddi4+0x212>
 800072a:	ebb3 0208 	subs.w	r2, r3, r8
 800072e:	eb61 010e 	sbc.w	r1, r1, lr
 8000732:	fa01 f707 	lsl.w	r7, r1, r7
 8000736:	fa22 f306 	lsr.w	r3, r2, r6
 800073a:	40f1      	lsrs	r1, r6
 800073c:	431f      	orrs	r7, r3
 800073e:	e9c5 7100 	strd	r7, r1, [r5]
 8000742:	2600      	movs	r6, #0
 8000744:	4631      	mov	r1, r6
 8000746:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800074a:	f1c2 0320 	rsb	r3, r2, #32
 800074e:	40d8      	lsrs	r0, r3
 8000750:	fa0c fc02 	lsl.w	ip, ip, r2
 8000754:	fa21 f303 	lsr.w	r3, r1, r3
 8000758:	4091      	lsls	r1, r2
 800075a:	4301      	orrs	r1, r0
 800075c:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000760:	fa1f fe8c 	uxth.w	lr, ip
 8000764:	fbb3 f0f7 	udiv	r0, r3, r7
 8000768:	fb07 3610 	mls	r6, r7, r0, r3
 800076c:	0c0b      	lsrs	r3, r1, #16
 800076e:	ea43 4306 	orr.w	r3, r3, r6, lsl #16
 8000772:	fb00 f60e 	mul.w	r6, r0, lr
 8000776:	429e      	cmp	r6, r3
 8000778:	fa04 f402 	lsl.w	r4, r4, r2
 800077c:	d908      	bls.n	8000790 <__udivmoddi4+0x260>
 800077e:	eb1c 0303 	adds.w	r3, ip, r3
 8000782:	f100 38ff 	add.w	r8, r0, #4294967295
 8000786:	d22f      	bcs.n	80007e8 <__udivmoddi4+0x2b8>
 8000788:	429e      	cmp	r6, r3
 800078a:	d92d      	bls.n	80007e8 <__udivmoddi4+0x2b8>
 800078c:	3802      	subs	r0, #2
 800078e:	4463      	add	r3, ip
 8000790:	1b9b      	subs	r3, r3, r6
 8000792:	b289      	uxth	r1, r1
 8000794:	fbb3 f6f7 	udiv	r6, r3, r7
 8000798:	fb07 3316 	mls	r3, r7, r6, r3
 800079c:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 80007a0:	fb06 f30e 	mul.w	r3, r6, lr
 80007a4:	428b      	cmp	r3, r1
 80007a6:	d908      	bls.n	80007ba <__udivmoddi4+0x28a>
 80007a8:	eb1c 0101 	adds.w	r1, ip, r1
 80007ac:	f106 38ff 	add.w	r8, r6, #4294967295
 80007b0:	d216      	bcs.n	80007e0 <__udivmoddi4+0x2b0>
 80007b2:	428b      	cmp	r3, r1
 80007b4:	d914      	bls.n	80007e0 <__udivmoddi4+0x2b0>
 80007b6:	3e02      	subs	r6, #2
 80007b8:	4461      	add	r1, ip
 80007ba:	1ac9      	subs	r1, r1, r3
 80007bc:	ea46 4600 	orr.w	r6, r6, r0, lsl #16
 80007c0:	e738      	b.n	8000634 <__udivmoddi4+0x104>
 80007c2:	462e      	mov	r6, r5
 80007c4:	4628      	mov	r0, r5
 80007c6:	e705      	b.n	80005d4 <__udivmoddi4+0xa4>
 80007c8:	4606      	mov	r6, r0
 80007ca:	e6e3      	b.n	8000594 <__udivmoddi4+0x64>
 80007cc:	4618      	mov	r0, r3
 80007ce:	e6f8      	b.n	80005c2 <__udivmoddi4+0x92>
 80007d0:	454b      	cmp	r3, r9
 80007d2:	d2a9      	bcs.n	8000728 <__udivmoddi4+0x1f8>
 80007d4:	ebb9 0802 	subs.w	r8, r9, r2
 80007d8:	eb64 0e0c 	sbc.w	lr, r4, ip
 80007dc:	3801      	subs	r0, #1
 80007de:	e7a3      	b.n	8000728 <__udivmoddi4+0x1f8>
 80007e0:	4646      	mov	r6, r8
 80007e2:	e7ea      	b.n	80007ba <__udivmoddi4+0x28a>
 80007e4:	4620      	mov	r0, r4
 80007e6:	e794      	b.n	8000712 <__udivmoddi4+0x1e2>
 80007e8:	4640      	mov	r0, r8
 80007ea:	e7d1      	b.n	8000790 <__udivmoddi4+0x260>
 80007ec:	46d0      	mov	r8, sl
 80007ee:	e77b      	b.n	80006e8 <__udivmoddi4+0x1b8>
 80007f0:	3b02      	subs	r3, #2
 80007f2:	4461      	add	r1, ip
 80007f4:	e732      	b.n	800065c <__udivmoddi4+0x12c>
 80007f6:	4630      	mov	r0, r6
 80007f8:	e709      	b.n	800060e <__udivmoddi4+0xde>
 80007fa:	4464      	add	r4, ip
 80007fc:	3802      	subs	r0, #2
 80007fe:	e742      	b.n	8000686 <__udivmoddi4+0x156>

08000800 <__aeabi_idiv0>:
 8000800:	4770      	bx	lr
 8000802:	bf00      	nop

08000804 <tx_application_define>:
  * @brief  Define the initial system.
  * @param  first_unused_memory : Pointer to the first unused memory
  * @retval None
  */
VOID tx_application_define(VOID *first_unused_memory)
{
 8000804:	b580      	push	{r7, lr}
 8000806:	b086      	sub	sp, #24
 8000808:	af02      	add	r7, sp, #8
 800080a:	6078      	str	r0, [r7, #4]

  /* USER CODE END  tx_application_define */

  VOID *memory_ptr;

  if (tx_byte_pool_create(&tx_app_byte_pool, "Tx App memory pool", tx_byte_pool_buffer, TX_APP_MEM_POOL_SIZE) != TX_SUCCESS)
 800080c:	2334      	movs	r3, #52	; 0x34
 800080e:	9300      	str	r3, [sp, #0]
 8000810:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8000814:	4a08      	ldr	r2, [pc, #32]	; (8000838 <tx_application_define+0x34>)
 8000816:	4909      	ldr	r1, [pc, #36]	; (800083c <tx_application_define+0x38>)
 8000818:	4809      	ldr	r0, [pc, #36]	; (8000840 <tx_application_define+0x3c>)
 800081a:	f004 f88f 	bl	800493c <_txe_byte_pool_create>
 800081e:	4603      	mov	r3, r0
 8000820:	2b00      	cmp	r3, #0
 8000822:	d104      	bne.n	800082e <tx_application_define+0x2a>
  {
    /* USER CODE BEGIN TX_Byte_Pool_Success */

    /* USER CODE END TX_Byte_Pool_Success */

    memory_ptr = (VOID *)&tx_app_byte_pool;
 8000824:	4b06      	ldr	r3, [pc, #24]	; (8000840 <tx_application_define+0x3c>)
 8000826:	60fb      	str	r3, [r7, #12]

    if (App_ThreadX_Init(memory_ptr) != TX_SUCCESS)
 8000828:	68f8      	ldr	r0, [r7, #12]
 800082a:	f000 f80b 	bl	8000844 <App_ThreadX_Init>

    /* USER CODE END  App_ThreadX_Init_Success */

  }

}
 800082e:	bf00      	nop
 8000830:	3710      	adds	r7, #16
 8000832:	46bd      	mov	sp, r7
 8000834:	bd80      	pop	{r7, pc}
 8000836:	bf00      	nop
 8000838:	20000090 	.word	0x20000090
 800083c:	0800626c 	.word	0x0800626c
 8000840:	20000490 	.word	0x20000490

08000844 <App_ThreadX_Init>:
  * @brief  Application ThreadX Initialization.
  * @param memory_ptr: memory pointer
  * @retval int
  */
UINT App_ThreadX_Init(VOID *memory_ptr)
{
 8000844:	b480      	push	{r7}
 8000846:	b085      	sub	sp, #20
 8000848:	af00      	add	r7, sp, #0
 800084a:	6078      	str	r0, [r7, #4]
  UINT ret = TX_SUCCESS;
 800084c:	2300      	movs	r3, #0
 800084e:	60fb      	str	r3, [r7, #12]
  TX_BYTE_POOL *byte_pool = (TX_BYTE_POOL*)memory_ptr;
 8000850:	687b      	ldr	r3, [r7, #4]
 8000852:	60bb      	str	r3, [r7, #8]
  /* USER CODE BEGIN App_ThreadX_Init */
  (void)byte_pool;

  /* USER CODE END App_ThreadX_Init */

  return ret;
 8000854:	68fb      	ldr	r3, [r7, #12]
}
 8000856:	4618      	mov	r0, r3
 8000858:	3714      	adds	r7, #20
 800085a:	46bd      	mov	sp, r7
 800085c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000860:	4770      	bx	lr

08000862 <MX_ThreadX_Init>:
  * @brief  MX_ThreadX_Init
  * @param  None
  * @retval None
  */
void MX_ThreadX_Init(void)
{
 8000862:	b580      	push	{r7, lr}
 8000864:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN  Before_Kernel_Start */


  /* USER CODE END  Before_Kernel_Start */

	osKernelStart();
 8000866:	f002 f9a1 	bl	8002bac <osKernelStart>


  /* USER CODE BEGIN  Kernel_Start_Error */

  /* USER CODE END  Kernel_Start_Error */
}
 800086a:	bf00      	nop
 800086c:	bd80      	pop	{r7, pc}
	...

08000870 <_write>:
#define PUTCHAR_PROTOTYPE int __io_putchar(int ch)
/* USER CODE END PFP */

/* Private user code ---------------------------------------------------------*/
/* USER CODE BEGIN 0 */
int _write(int file, char *ptr, int len) {
 8000870:	b580      	push	{r7, lr}
 8000872:	b084      	sub	sp, #16
 8000874:	af00      	add	r7, sp, #0
 8000876:	60f8      	str	r0, [r7, #12]
 8000878:	60b9      	str	r1, [r7, #8]
 800087a:	607a      	str	r2, [r7, #4]
  HAL_UART_Transmit(&huart1, (uint8_t*) ptr, len, HAL_MAX_DELAY);
 800087c:	687b      	ldr	r3, [r7, #4]
 800087e:	b29a      	uxth	r2, r3
 8000880:	f04f 33ff 	mov.w	r3, #4294967295
 8000884:	68b9      	ldr	r1, [r7, #8]
 8000886:	4804      	ldr	r0, [pc, #16]	; (8000898 <_write+0x28>)
 8000888:	f001 fd53 	bl	8002332 <HAL_UART_Transmit>
  return len;
 800088c:	687b      	ldr	r3, [r7, #4]
}
 800088e:	4618      	mov	r0, r3
 8000890:	3710      	adds	r7, #16
 8000892:	46bd      	mov	sp, r7
 8000894:	bd80      	pop	{r7, pc}
 8000896:	bf00      	nop
 8000898:	200004c4 	.word	0x200004c4

0800089c <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 800089c:	b580      	push	{r7, lr}
 800089e:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 80008a0:	f000 fd58 	bl	8001354 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 80008a4:	f000 f80e 	bl	80008c4 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 80008a8:	f000 f8a2 	bl	80009f0 <MX_GPIO_Init>
  MX_USART1_UART_Init();
 80008ac:	f000 f876 	bl	800099c <MX_USART1_UART_Init>
  /* USER CODE BEGIN 2 */

  /* USER CODE END 2 */
  osKernelInitialize();
 80008b0:	f002 f950 	bl	8002b54 <osKernelInitialize>
   tm_main();
 80008b4:	f000 fc1c 	bl	80010f0 <tm_main>
   osKernelStart();
 80008b8:	f002 f978 	bl	8002bac <osKernelStart>

  MX_ThreadX_Init();
 80008bc:	f7ff ffd1 	bl	8000862 <MX_ThreadX_Init>

  /* We should never get here as control is now taken by the scheduler */
  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
 80008c0:	e7fe      	b.n	80008c0 <main+0x24>
	...

080008c4 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 80008c4:	b580      	push	{r7, lr}
 80008c6:	b094      	sub	sp, #80	; 0x50
 80008c8:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 80008ca:	f107 0320 	add.w	r3, r7, #32
 80008ce:	2230      	movs	r2, #48	; 0x30
 80008d0:	2100      	movs	r1, #0
 80008d2:	4618      	mov	r0, r3
 80008d4:	f004 fb5a 	bl	8004f8c <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 80008d8:	f107 030c 	add.w	r3, r7, #12
 80008dc:	2200      	movs	r2, #0
 80008de:	601a      	str	r2, [r3, #0]
 80008e0:	605a      	str	r2, [r3, #4]
 80008e2:	609a      	str	r2, [r3, #8]
 80008e4:	60da      	str	r2, [r3, #12]
 80008e6:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 80008e8:	2300      	movs	r3, #0
 80008ea:	60bb      	str	r3, [r7, #8]
 80008ec:	4b29      	ldr	r3, [pc, #164]	; (8000994 <SystemClock_Config+0xd0>)
 80008ee:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80008f0:	4a28      	ldr	r2, [pc, #160]	; (8000994 <SystemClock_Config+0xd0>)
 80008f2:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80008f6:	6413      	str	r3, [r2, #64]	; 0x40
 80008f8:	4b26      	ldr	r3, [pc, #152]	; (8000994 <SystemClock_Config+0xd0>)
 80008fa:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80008fc:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000900:	60bb      	str	r3, [r7, #8]
 8000902:	68bb      	ldr	r3, [r7, #8]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE3);
 8000904:	2300      	movs	r3, #0
 8000906:	607b      	str	r3, [r7, #4]
 8000908:	4b23      	ldr	r3, [pc, #140]	; (8000998 <SystemClock_Config+0xd4>)
 800090a:	681b      	ldr	r3, [r3, #0]
 800090c:	f423 4340 	bic.w	r3, r3, #49152	; 0xc000
 8000910:	4a21      	ldr	r2, [pc, #132]	; (8000998 <SystemClock_Config+0xd4>)
 8000912:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8000916:	6013      	str	r3, [r2, #0]
 8000918:	4b1f      	ldr	r3, [pc, #124]	; (8000998 <SystemClock_Config+0xd4>)
 800091a:	681b      	ldr	r3, [r3, #0]
 800091c:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 8000920:	607b      	str	r3, [r7, #4]
 8000922:	687b      	ldr	r3, [r7, #4]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 8000924:	2302      	movs	r3, #2
 8000926:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8000928:	2301      	movs	r3, #1
 800092a:	62fb      	str	r3, [r7, #44]	; 0x2c
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 800092c:	2310      	movs	r3, #16
 800092e:	633b      	str	r3, [r7, #48]	; 0x30
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8000930:	2302      	movs	r3, #2
 8000932:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 8000934:	2300      	movs	r3, #0
 8000936:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLM = 8;
 8000938:	2308      	movs	r3, #8
 800093a:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLN = 50;
 800093c:	2332      	movs	r3, #50	; 0x32
 800093e:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV4;
 8000940:	2304      	movs	r3, #4
 8000942:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLQ = 7;
 8000944:	2307      	movs	r3, #7
 8000946:	64fb      	str	r3, [r7, #76]	; 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000948:	f107 0320 	add.w	r3, r7, #32
 800094c:	4618      	mov	r0, r3
 800094e:	f001 f80b 	bl	8001968 <HAL_RCC_OscConfig>
 8000952:	4603      	mov	r3, r0
 8000954:	2b00      	cmp	r3, #0
 8000956:	d001      	beq.n	800095c <SystemClock_Config+0x98>
  {
    Error_Handler();
 8000958:	f000 faa4 	bl	8000ea4 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 800095c:	230f      	movs	r3, #15
 800095e:	60fb      	str	r3, [r7, #12]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8000960:	2302      	movs	r3, #2
 8000962:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8000964:	2300      	movs	r3, #0
 8000966:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV8;
 8000968:	f44f 53c0 	mov.w	r3, #6144	; 0x1800
 800096c:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV4;
 800096e:	f44f 53a0 	mov.w	r3, #5120	; 0x1400
 8000972:	61fb      	str	r3, [r7, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_0) != HAL_OK)
 8000974:	f107 030c 	add.w	r3, r7, #12
 8000978:	2100      	movs	r1, #0
 800097a:	4618      	mov	r0, r3
 800097c:	f001 fa6c 	bl	8001e58 <HAL_RCC_ClockConfig>
 8000980:	4603      	mov	r3, r0
 8000982:	2b00      	cmp	r3, #0
 8000984:	d001      	beq.n	800098a <SystemClock_Config+0xc6>
  {
    Error_Handler();
 8000986:	f000 fa8d 	bl	8000ea4 <Error_Handler>
  }
}
 800098a:	bf00      	nop
 800098c:	3750      	adds	r7, #80	; 0x50
 800098e:	46bd      	mov	sp, r7
 8000990:	bd80      	pop	{r7, pc}
 8000992:	bf00      	nop
 8000994:	40023800 	.word	0x40023800
 8000998:	40007000 	.word	0x40007000

0800099c <MX_USART1_UART_Init>:
  * @brief USART1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART1_UART_Init(void)
{
 800099c:	b580      	push	{r7, lr}
 800099e:	af00      	add	r7, sp, #0
  /* USER CODE END USART1_Init 0 */

  /* USER CODE BEGIN USART1_Init 1 */

  /* USER CODE END USART1_Init 1 */
  huart1.Instance = USART1;
 80009a0:	4b11      	ldr	r3, [pc, #68]	; (80009e8 <MX_USART1_UART_Init+0x4c>)
 80009a2:	4a12      	ldr	r2, [pc, #72]	; (80009ec <MX_USART1_UART_Init+0x50>)
 80009a4:	601a      	str	r2, [r3, #0]
  huart1.Init.BaudRate = 115200;
 80009a6:	4b10      	ldr	r3, [pc, #64]	; (80009e8 <MX_USART1_UART_Init+0x4c>)
 80009a8:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 80009ac:	605a      	str	r2, [r3, #4]
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
 80009ae:	4b0e      	ldr	r3, [pc, #56]	; (80009e8 <MX_USART1_UART_Init+0x4c>)
 80009b0:	2200      	movs	r2, #0
 80009b2:	609a      	str	r2, [r3, #8]
  huart1.Init.StopBits = UART_STOPBITS_1;
 80009b4:	4b0c      	ldr	r3, [pc, #48]	; (80009e8 <MX_USART1_UART_Init+0x4c>)
 80009b6:	2200      	movs	r2, #0
 80009b8:	60da      	str	r2, [r3, #12]
  huart1.Init.Parity = UART_PARITY_NONE;
 80009ba:	4b0b      	ldr	r3, [pc, #44]	; (80009e8 <MX_USART1_UART_Init+0x4c>)
 80009bc:	2200      	movs	r2, #0
 80009be:	611a      	str	r2, [r3, #16]
  huart1.Init.Mode = UART_MODE_TX_RX;
 80009c0:	4b09      	ldr	r3, [pc, #36]	; (80009e8 <MX_USART1_UART_Init+0x4c>)
 80009c2:	220c      	movs	r2, #12
 80009c4:	615a      	str	r2, [r3, #20]
  huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 80009c6:	4b08      	ldr	r3, [pc, #32]	; (80009e8 <MX_USART1_UART_Init+0x4c>)
 80009c8:	2200      	movs	r2, #0
 80009ca:	619a      	str	r2, [r3, #24]
  huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 80009cc:	4b06      	ldr	r3, [pc, #24]	; (80009e8 <MX_USART1_UART_Init+0x4c>)
 80009ce:	2200      	movs	r2, #0
 80009d0:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart1) != HAL_OK)
 80009d2:	4805      	ldr	r0, [pc, #20]	; (80009e8 <MX_USART1_UART_Init+0x4c>)
 80009d4:	f001 fc60 	bl	8002298 <HAL_UART_Init>
 80009d8:	4603      	mov	r3, r0
 80009da:	2b00      	cmp	r3, #0
 80009dc:	d001      	beq.n	80009e2 <MX_USART1_UART_Init+0x46>
  {
    Error_Handler();
 80009de:	f000 fa61 	bl	8000ea4 <Error_Handler>
  }
  /* USER CODE BEGIN USART1_Init 2 */

  /* USER CODE END USART1_Init 2 */

}
 80009e2:	bf00      	nop
 80009e4:	bd80      	pop	{r7, pc}
 80009e6:	bf00      	nop
 80009e8:	200004c4 	.word	0x200004c4
 80009ec:	40011000 	.word	0x40011000

080009f0 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 80009f0:	b580      	push	{r7, lr}
 80009f2:	b08e      	sub	sp, #56	; 0x38
 80009f4:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80009f6:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80009fa:	2200      	movs	r2, #0
 80009fc:	601a      	str	r2, [r3, #0]
 80009fe:	605a      	str	r2, [r3, #4]
 8000a00:	609a      	str	r2, [r3, #8]
 8000a02:	60da      	str	r2, [r3, #12]
 8000a04:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8000a06:	2300      	movs	r3, #0
 8000a08:	623b      	str	r3, [r7, #32]
 8000a0a:	4bb2      	ldr	r3, [pc, #712]	; (8000cd4 <MX_GPIO_Init+0x2e4>)
 8000a0c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000a0e:	4ab1      	ldr	r2, [pc, #708]	; (8000cd4 <MX_GPIO_Init+0x2e4>)
 8000a10:	f043 0304 	orr.w	r3, r3, #4
 8000a14:	6313      	str	r3, [r2, #48]	; 0x30
 8000a16:	4baf      	ldr	r3, [pc, #700]	; (8000cd4 <MX_GPIO_Init+0x2e4>)
 8000a18:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000a1a:	f003 0304 	and.w	r3, r3, #4
 8000a1e:	623b      	str	r3, [r7, #32]
 8000a20:	6a3b      	ldr	r3, [r7, #32]
  __HAL_RCC_GPIOF_CLK_ENABLE();
 8000a22:	2300      	movs	r3, #0
 8000a24:	61fb      	str	r3, [r7, #28]
 8000a26:	4bab      	ldr	r3, [pc, #684]	; (8000cd4 <MX_GPIO_Init+0x2e4>)
 8000a28:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000a2a:	4aaa      	ldr	r2, [pc, #680]	; (8000cd4 <MX_GPIO_Init+0x2e4>)
 8000a2c:	f043 0320 	orr.w	r3, r3, #32
 8000a30:	6313      	str	r3, [r2, #48]	; 0x30
 8000a32:	4ba8      	ldr	r3, [pc, #672]	; (8000cd4 <MX_GPIO_Init+0x2e4>)
 8000a34:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000a36:	f003 0320 	and.w	r3, r3, #32
 8000a3a:	61fb      	str	r3, [r7, #28]
 8000a3c:	69fb      	ldr	r3, [r7, #28]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 8000a3e:	2300      	movs	r3, #0
 8000a40:	61bb      	str	r3, [r7, #24]
 8000a42:	4ba4      	ldr	r3, [pc, #656]	; (8000cd4 <MX_GPIO_Init+0x2e4>)
 8000a44:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000a46:	4aa3      	ldr	r2, [pc, #652]	; (8000cd4 <MX_GPIO_Init+0x2e4>)
 8000a48:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8000a4c:	6313      	str	r3, [r2, #48]	; 0x30
 8000a4e:	4ba1      	ldr	r3, [pc, #644]	; (8000cd4 <MX_GPIO_Init+0x2e4>)
 8000a50:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000a52:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8000a56:	61bb      	str	r3, [r7, #24]
 8000a58:	69bb      	ldr	r3, [r7, #24]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000a5a:	2300      	movs	r3, #0
 8000a5c:	617b      	str	r3, [r7, #20]
 8000a5e:	4b9d      	ldr	r3, [pc, #628]	; (8000cd4 <MX_GPIO_Init+0x2e4>)
 8000a60:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000a62:	4a9c      	ldr	r2, [pc, #624]	; (8000cd4 <MX_GPIO_Init+0x2e4>)
 8000a64:	f043 0301 	orr.w	r3, r3, #1
 8000a68:	6313      	str	r3, [r2, #48]	; 0x30
 8000a6a:	4b9a      	ldr	r3, [pc, #616]	; (8000cd4 <MX_GPIO_Init+0x2e4>)
 8000a6c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000a6e:	f003 0301 	and.w	r3, r3, #1
 8000a72:	617b      	str	r3, [r7, #20]
 8000a74:	697b      	ldr	r3, [r7, #20]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8000a76:	2300      	movs	r3, #0
 8000a78:	613b      	str	r3, [r7, #16]
 8000a7a:	4b96      	ldr	r3, [pc, #600]	; (8000cd4 <MX_GPIO_Init+0x2e4>)
 8000a7c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000a7e:	4a95      	ldr	r2, [pc, #596]	; (8000cd4 <MX_GPIO_Init+0x2e4>)
 8000a80:	f043 0302 	orr.w	r3, r3, #2
 8000a84:	6313      	str	r3, [r2, #48]	; 0x30
 8000a86:	4b93      	ldr	r3, [pc, #588]	; (8000cd4 <MX_GPIO_Init+0x2e4>)
 8000a88:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000a8a:	f003 0302 	and.w	r3, r3, #2
 8000a8e:	613b      	str	r3, [r7, #16]
 8000a90:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOG_CLK_ENABLE();
 8000a92:	2300      	movs	r3, #0
 8000a94:	60fb      	str	r3, [r7, #12]
 8000a96:	4b8f      	ldr	r3, [pc, #572]	; (8000cd4 <MX_GPIO_Init+0x2e4>)
 8000a98:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000a9a:	4a8e      	ldr	r2, [pc, #568]	; (8000cd4 <MX_GPIO_Init+0x2e4>)
 8000a9c:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8000aa0:	6313      	str	r3, [r2, #48]	; 0x30
 8000aa2:	4b8c      	ldr	r3, [pc, #560]	; (8000cd4 <MX_GPIO_Init+0x2e4>)
 8000aa4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000aa6:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8000aaa:	60fb      	str	r3, [r7, #12]
 8000aac:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOE_CLK_ENABLE();
 8000aae:	2300      	movs	r3, #0
 8000ab0:	60bb      	str	r3, [r7, #8]
 8000ab2:	4b88      	ldr	r3, [pc, #544]	; (8000cd4 <MX_GPIO_Init+0x2e4>)
 8000ab4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000ab6:	4a87      	ldr	r2, [pc, #540]	; (8000cd4 <MX_GPIO_Init+0x2e4>)
 8000ab8:	f043 0310 	orr.w	r3, r3, #16
 8000abc:	6313      	str	r3, [r2, #48]	; 0x30
 8000abe:	4b85      	ldr	r3, [pc, #532]	; (8000cd4 <MX_GPIO_Init+0x2e4>)
 8000ac0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000ac2:	f003 0310 	and.w	r3, r3, #16
 8000ac6:	60bb      	str	r3, [r7, #8]
 8000ac8:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8000aca:	2300      	movs	r3, #0
 8000acc:	607b      	str	r3, [r7, #4]
 8000ace:	4b81      	ldr	r3, [pc, #516]	; (8000cd4 <MX_GPIO_Init+0x2e4>)
 8000ad0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000ad2:	4a80      	ldr	r2, [pc, #512]	; (8000cd4 <MX_GPIO_Init+0x2e4>)
 8000ad4:	f043 0308 	orr.w	r3, r3, #8
 8000ad8:	6313      	str	r3, [r2, #48]	; 0x30
 8000ada:	4b7e      	ldr	r3, [pc, #504]	; (8000cd4 <MX_GPIO_Init+0x2e4>)
 8000adc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000ade:	f003 0308 	and.w	r3, r3, #8
 8000ae2:	607b      	str	r3, [r7, #4]
 8000ae4:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOC, NCS_MEMS_SPI_Pin|CSX_Pin|OTG_FS_PSO_Pin, GPIO_PIN_RESET);
 8000ae6:	2200      	movs	r2, #0
 8000ae8:	2116      	movs	r1, #22
 8000aea:	487b      	ldr	r0, [pc, #492]	; (8000cd8 <MX_GPIO_Init+0x2e8>)
 8000aec:	f000 ff22 	bl	8001934 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(ACP_RST_GPIO_Port, ACP_RST_Pin, GPIO_PIN_RESET);
 8000af0:	2200      	movs	r2, #0
 8000af2:	2180      	movs	r1, #128	; 0x80
 8000af4:	4879      	ldr	r0, [pc, #484]	; (8000cdc <MX_GPIO_Init+0x2ec>)
 8000af6:	f000 ff1d 	bl	8001934 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOD, RDX_Pin|WRX_DCX_Pin, GPIO_PIN_RESET);
 8000afa:	2200      	movs	r2, #0
 8000afc:	f44f 5140 	mov.w	r1, #12288	; 0x3000
 8000b00:	4877      	ldr	r0, [pc, #476]	; (8000ce0 <MX_GPIO_Init+0x2f0>)
 8000b02:	f000 ff17 	bl	8001934 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOG, LD3_Pin|LD4_Pin, GPIO_PIN_RESET);
 8000b06:	2200      	movs	r2, #0
 8000b08:	f44f 41c0 	mov.w	r1, #24576	; 0x6000
 8000b0c:	4875      	ldr	r0, [pc, #468]	; (8000ce4 <MX_GPIO_Init+0x2f4>)
 8000b0e:	f000 ff11 	bl	8001934 <HAL_GPIO_WritePin>

  /*Configure GPIO pins : A0_Pin A1_Pin A2_Pin A3_Pin
                           A4_Pin A5_Pin SDNRAS_Pin A6_Pin
                           A7_Pin A8_Pin A9_Pin */
  GPIO_InitStruct.Pin = A0_Pin|A1_Pin|A2_Pin|A3_Pin
 8000b12:	f64f 033f 	movw	r3, #63551	; 0xf83f
 8000b16:	627b      	str	r3, [r7, #36]	; 0x24
                          |A4_Pin|A5_Pin|SDNRAS_Pin|A6_Pin
                          |A7_Pin|A8_Pin|A9_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000b18:	2302      	movs	r3, #2
 8000b1a:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000b1c:	2300      	movs	r3, #0
 8000b1e:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000b20:	2303      	movs	r3, #3
 8000b22:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Alternate = GPIO_AF12_FMC;
 8000b24:	230c      	movs	r3, #12
 8000b26:	637b      	str	r3, [r7, #52]	; 0x34
  HAL_GPIO_Init(GPIOF, &GPIO_InitStruct);
 8000b28:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000b2c:	4619      	mov	r1, r3
 8000b2e:	486e      	ldr	r0, [pc, #440]	; (8000ce8 <MX_GPIO_Init+0x2f8>)
 8000b30:	f000 fd54 	bl	80015dc <HAL_GPIO_Init>

  /*Configure GPIO pins : SPI5_SCK_Pin SPI5_MISO_Pin SPI5_MOSI_Pin */
  GPIO_InitStruct.Pin = SPI5_SCK_Pin|SPI5_MISO_Pin|SPI5_MOSI_Pin;
 8000b34:	f44f 7360 	mov.w	r3, #896	; 0x380
 8000b38:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000b3a:	2302      	movs	r3, #2
 8000b3c:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000b3e:	2300      	movs	r3, #0
 8000b40:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000b42:	2300      	movs	r3, #0
 8000b44:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Alternate = GPIO_AF5_SPI5;
 8000b46:	2305      	movs	r3, #5
 8000b48:	637b      	str	r3, [r7, #52]	; 0x34
  HAL_GPIO_Init(GPIOF, &GPIO_InitStruct);
 8000b4a:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000b4e:	4619      	mov	r1, r3
 8000b50:	4865      	ldr	r0, [pc, #404]	; (8000ce8 <MX_GPIO_Init+0x2f8>)
 8000b52:	f000 fd43 	bl	80015dc <HAL_GPIO_Init>

  /*Configure GPIO pin : ENABLE_Pin */
  GPIO_InitStruct.Pin = ENABLE_Pin;
 8000b56:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8000b5a:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000b5c:	2302      	movs	r3, #2
 8000b5e:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000b60:	2300      	movs	r3, #0
 8000b62:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000b64:	2300      	movs	r3, #0
 8000b66:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Alternate = GPIO_AF14_LTDC;
 8000b68:	230e      	movs	r3, #14
 8000b6a:	637b      	str	r3, [r7, #52]	; 0x34
  HAL_GPIO_Init(ENABLE_GPIO_Port, &GPIO_InitStruct);
 8000b6c:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000b70:	4619      	mov	r1, r3
 8000b72:	485d      	ldr	r0, [pc, #372]	; (8000ce8 <MX_GPIO_Init+0x2f8>)
 8000b74:	f000 fd32 	bl	80015dc <HAL_GPIO_Init>

  /*Configure GPIO pin : SDNWE_Pin */
  GPIO_InitStruct.Pin = SDNWE_Pin;
 8000b78:	2301      	movs	r3, #1
 8000b7a:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000b7c:	2302      	movs	r3, #2
 8000b7e:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000b80:	2300      	movs	r3, #0
 8000b82:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000b84:	2303      	movs	r3, #3
 8000b86:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Alternate = GPIO_AF12_FMC;
 8000b88:	230c      	movs	r3, #12
 8000b8a:	637b      	str	r3, [r7, #52]	; 0x34
  HAL_GPIO_Init(SDNWE_GPIO_Port, &GPIO_InitStruct);
 8000b8c:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000b90:	4619      	mov	r1, r3
 8000b92:	4851      	ldr	r0, [pc, #324]	; (8000cd8 <MX_GPIO_Init+0x2e8>)
 8000b94:	f000 fd22 	bl	80015dc <HAL_GPIO_Init>

  /*Configure GPIO pins : NCS_MEMS_SPI_Pin CSX_Pin OTG_FS_PSO_Pin */
  GPIO_InitStruct.Pin = NCS_MEMS_SPI_Pin|CSX_Pin|OTG_FS_PSO_Pin;
 8000b98:	2316      	movs	r3, #22
 8000b9a:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000b9c:	2301      	movs	r3, #1
 8000b9e:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000ba0:	2300      	movs	r3, #0
 8000ba2:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000ba4:	2300      	movs	r3, #0
 8000ba6:	633b      	str	r3, [r7, #48]	; 0x30
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8000ba8:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000bac:	4619      	mov	r1, r3
 8000bae:	484a      	ldr	r0, [pc, #296]	; (8000cd8 <MX_GPIO_Init+0x2e8>)
 8000bb0:	f000 fd14 	bl	80015dc <HAL_GPIO_Init>

  /*Configure GPIO pins : B1_Pin MEMS_INT1_Pin MEMS_INT2_Pin TP_INT1_Pin */
  GPIO_InitStruct.Pin = B1_Pin|MEMS_INT1_Pin|MEMS_INT2_Pin|TP_INT1_Pin;
 8000bb4:	f248 0307 	movw	r3, #32775	; 0x8007
 8000bb8:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_EVT_RISING;
 8000bba:	f44f 1390 	mov.w	r3, #1179648	; 0x120000
 8000bbe:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000bc0:	2300      	movs	r3, #0
 8000bc2:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000bc4:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000bc8:	4619      	mov	r1, r3
 8000bca:	4844      	ldr	r0, [pc, #272]	; (8000cdc <MX_GPIO_Init+0x2ec>)
 8000bcc:	f000 fd06 	bl	80015dc <HAL_GPIO_Init>

  /*Configure GPIO pins : B5_Pin VSYNC_Pin G2_Pin R4_Pin
                           R5_Pin */
  GPIO_InitStruct.Pin = B5_Pin|VSYNC_Pin|G2_Pin|R4_Pin
 8000bd0:	f641 0358 	movw	r3, #6232	; 0x1858
 8000bd4:	627b      	str	r3, [r7, #36]	; 0x24
                          |R5_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000bd6:	2302      	movs	r3, #2
 8000bd8:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000bda:	2300      	movs	r3, #0
 8000bdc:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000bde:	2300      	movs	r3, #0
 8000be0:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Alternate = GPIO_AF14_LTDC;
 8000be2:	230e      	movs	r3, #14
 8000be4:	637b      	str	r3, [r7, #52]	; 0x34
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000be6:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000bea:	4619      	mov	r1, r3
 8000bec:	483b      	ldr	r0, [pc, #236]	; (8000cdc <MX_GPIO_Init+0x2ec>)
 8000bee:	f000 fcf5 	bl	80015dc <HAL_GPIO_Init>

  /*Configure GPIO pin : ACP_RST_Pin */
  GPIO_InitStruct.Pin = ACP_RST_Pin;
 8000bf2:	2380      	movs	r3, #128	; 0x80
 8000bf4:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000bf6:	2301      	movs	r3, #1
 8000bf8:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000bfa:	2300      	movs	r3, #0
 8000bfc:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000bfe:	2300      	movs	r3, #0
 8000c00:	633b      	str	r3, [r7, #48]	; 0x30
  HAL_GPIO_Init(ACP_RST_GPIO_Port, &GPIO_InitStruct);
 8000c02:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000c06:	4619      	mov	r1, r3
 8000c08:	4834      	ldr	r0, [pc, #208]	; (8000cdc <MX_GPIO_Init+0x2ec>)
 8000c0a:	f000 fce7 	bl	80015dc <HAL_GPIO_Init>

  /*Configure GPIO pin : OTG_FS_OC_Pin */
  GPIO_InitStruct.Pin = OTG_FS_OC_Pin;
 8000c0e:	2320      	movs	r3, #32
 8000c10:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_EVT_RISING;
 8000c12:	f44f 1390 	mov.w	r3, #1179648	; 0x120000
 8000c16:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000c18:	2300      	movs	r3, #0
 8000c1a:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(OTG_FS_OC_GPIO_Port, &GPIO_InitStruct);
 8000c1c:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000c20:	4619      	mov	r1, r3
 8000c22:	482d      	ldr	r0, [pc, #180]	; (8000cd8 <MX_GPIO_Init+0x2e8>)
 8000c24:	f000 fcda 	bl	80015dc <HAL_GPIO_Init>

  /*Configure GPIO pins : R3_Pin R6_Pin */
  GPIO_InitStruct.Pin = R3_Pin|R6_Pin;
 8000c28:	2303      	movs	r3, #3
 8000c2a:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000c2c:	2302      	movs	r3, #2
 8000c2e:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000c30:	2300      	movs	r3, #0
 8000c32:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000c34:	2300      	movs	r3, #0
 8000c36:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Alternate = GPIO_AF9_LTDC;
 8000c38:	2309      	movs	r3, #9
 8000c3a:	637b      	str	r3, [r7, #52]	; 0x34
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000c3c:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000c40:	4619      	mov	r1, r3
 8000c42:	482a      	ldr	r0, [pc, #168]	; (8000cec <MX_GPIO_Init+0x2fc>)
 8000c44:	f000 fcca 	bl	80015dc <HAL_GPIO_Init>

  /*Configure GPIO pin : BOOT1_Pin */
  GPIO_InitStruct.Pin = BOOT1_Pin;
 8000c48:	2304      	movs	r3, #4
 8000c4a:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000c4c:	2300      	movs	r3, #0
 8000c4e:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000c50:	2300      	movs	r3, #0
 8000c52:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(BOOT1_GPIO_Port, &GPIO_InitStruct);
 8000c54:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000c58:	4619      	mov	r1, r3
 8000c5a:	4824      	ldr	r0, [pc, #144]	; (8000cec <MX_GPIO_Init+0x2fc>)
 8000c5c:	f000 fcbe 	bl	80015dc <HAL_GPIO_Init>

  /*Configure GPIO pins : A10_Pin A11_Pin BA0_Pin BA1_Pin
                           SDCLK_Pin SDNCAS_Pin */
  GPIO_InitStruct.Pin = A10_Pin|A11_Pin|BA0_Pin|BA1_Pin
 8000c60:	f248 1333 	movw	r3, #33075	; 0x8133
 8000c64:	627b      	str	r3, [r7, #36]	; 0x24
                          |SDCLK_Pin|SDNCAS_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000c66:	2302      	movs	r3, #2
 8000c68:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000c6a:	2300      	movs	r3, #0
 8000c6c:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000c6e:	2303      	movs	r3, #3
 8000c70:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Alternate = GPIO_AF12_FMC;
 8000c72:	230c      	movs	r3, #12
 8000c74:	637b      	str	r3, [r7, #52]	; 0x34
  HAL_GPIO_Init(GPIOG, &GPIO_InitStruct);
 8000c76:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000c7a:	4619      	mov	r1, r3
 8000c7c:	4819      	ldr	r0, [pc, #100]	; (8000ce4 <MX_GPIO_Init+0x2f4>)
 8000c7e:	f000 fcad 	bl	80015dc <HAL_GPIO_Init>

  /*Configure GPIO pins : D4_Pin D5_Pin D6_Pin D7_Pin
                           D8_Pin D9_Pin D10_Pin D11_Pin
                           D12_Pin NBL0_Pin NBL1_Pin */
  GPIO_InitStruct.Pin = D4_Pin|D5_Pin|D6_Pin|D7_Pin
 8000c82:	f64f 7383 	movw	r3, #65411	; 0xff83
 8000c86:	627b      	str	r3, [r7, #36]	; 0x24
                          |D8_Pin|D9_Pin|D10_Pin|D11_Pin
                          |D12_Pin|NBL0_Pin|NBL1_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000c88:	2302      	movs	r3, #2
 8000c8a:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000c8c:	2300      	movs	r3, #0
 8000c8e:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000c90:	2303      	movs	r3, #3
 8000c92:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Alternate = GPIO_AF12_FMC;
 8000c94:	230c      	movs	r3, #12
 8000c96:	637b      	str	r3, [r7, #52]	; 0x34
  HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 8000c98:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000c9c:	4619      	mov	r1, r3
 8000c9e:	4814      	ldr	r0, [pc, #80]	; (8000cf0 <MX_GPIO_Init+0x300>)
 8000ca0:	f000 fc9c 	bl	80015dc <HAL_GPIO_Init>

  /*Configure GPIO pins : G4_Pin G5_Pin B6_Pin B7_Pin */
  GPIO_InitStruct.Pin = G4_Pin|G5_Pin|B6_Pin|B7_Pin;
 8000ca4:	f44f 6370 	mov.w	r3, #3840	; 0xf00
 8000ca8:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000caa:	2302      	movs	r3, #2
 8000cac:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000cae:	2300      	movs	r3, #0
 8000cb0:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000cb2:	2300      	movs	r3, #0
 8000cb4:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Alternate = GPIO_AF14_LTDC;
 8000cb6:	230e      	movs	r3, #14
 8000cb8:	637b      	str	r3, [r7, #52]	; 0x34
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000cba:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000cbe:	4619      	mov	r1, r3
 8000cc0:	480a      	ldr	r0, [pc, #40]	; (8000cec <MX_GPIO_Init+0x2fc>)
 8000cc2:	f000 fc8b 	bl	80015dc <HAL_GPIO_Init>

  /*Configure GPIO pins : OTG_HS_ID_Pin OTG_HS_DM_Pin OTG_HS_DP_Pin */
  GPIO_InitStruct.Pin = OTG_HS_ID_Pin|OTG_HS_DM_Pin|OTG_HS_DP_Pin;
 8000cc6:	f44f 4350 	mov.w	r3, #53248	; 0xd000
 8000cca:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000ccc:	2302      	movs	r3, #2
 8000cce:	62bb      	str	r3, [r7, #40]	; 0x28
 8000cd0:	e010      	b.n	8000cf4 <MX_GPIO_Init+0x304>
 8000cd2:	bf00      	nop
 8000cd4:	40023800 	.word	0x40023800
 8000cd8:	40020800 	.word	0x40020800
 8000cdc:	40020000 	.word	0x40020000
 8000ce0:	40020c00 	.word	0x40020c00
 8000ce4:	40021800 	.word	0x40021800
 8000ce8:	40021400 	.word	0x40021400
 8000cec:	40020400 	.word	0x40020400
 8000cf0:	40021000 	.word	0x40021000
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000cf4:	2300      	movs	r3, #0
 8000cf6:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000cf8:	2300      	movs	r3, #0
 8000cfa:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Alternate = GPIO_AF12_OTG_HS_FS;
 8000cfc:	230c      	movs	r3, #12
 8000cfe:	637b      	str	r3, [r7, #52]	; 0x34
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000d00:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000d04:	4619      	mov	r1, r3
 8000d06:	4862      	ldr	r0, [pc, #392]	; (8000e90 <MX_GPIO_Init+0x4a0>)
 8000d08:	f000 fc68 	bl	80015dc <HAL_GPIO_Init>

  /*Configure GPIO pin : VBUS_HS_Pin */
  GPIO_InitStruct.Pin = VBUS_HS_Pin;
 8000d0c:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8000d10:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000d12:	2300      	movs	r3, #0
 8000d14:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000d16:	2300      	movs	r3, #0
 8000d18:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(VBUS_HS_GPIO_Port, &GPIO_InitStruct);
 8000d1a:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000d1e:	4619      	mov	r1, r3
 8000d20:	485b      	ldr	r0, [pc, #364]	; (8000e90 <MX_GPIO_Init+0x4a0>)
 8000d22:	f000 fc5b 	bl	80015dc <HAL_GPIO_Init>

  /*Configure GPIO pins : D13_Pin D14_Pin D15_Pin D0_Pin
                           D1_Pin D2_Pin D3_Pin */
  GPIO_InitStruct.Pin = D13_Pin|D14_Pin|D15_Pin|D0_Pin
 8000d26:	f24c 7303 	movw	r3, #50947	; 0xc703
 8000d2a:	627b      	str	r3, [r7, #36]	; 0x24
                          |D1_Pin|D2_Pin|D3_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000d2c:	2302      	movs	r3, #2
 8000d2e:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000d30:	2300      	movs	r3, #0
 8000d32:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000d34:	2303      	movs	r3, #3
 8000d36:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Alternate = GPIO_AF12_FMC;
 8000d38:	230c      	movs	r3, #12
 8000d3a:	637b      	str	r3, [r7, #52]	; 0x34
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8000d3c:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000d40:	4619      	mov	r1, r3
 8000d42:	4854      	ldr	r0, [pc, #336]	; (8000e94 <MX_GPIO_Init+0x4a4>)
 8000d44:	f000 fc4a 	bl	80015dc <HAL_GPIO_Init>

  /*Configure GPIO pin : TE_Pin */
  GPIO_InitStruct.Pin = TE_Pin;
 8000d48:	f44f 6300 	mov.w	r3, #2048	; 0x800
 8000d4c:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000d4e:	2300      	movs	r3, #0
 8000d50:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000d52:	2300      	movs	r3, #0
 8000d54:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(TE_GPIO_Port, &GPIO_InitStruct);
 8000d56:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000d5a:	4619      	mov	r1, r3
 8000d5c:	484d      	ldr	r0, [pc, #308]	; (8000e94 <MX_GPIO_Init+0x4a4>)
 8000d5e:	f000 fc3d 	bl	80015dc <HAL_GPIO_Init>

  /*Configure GPIO pins : RDX_Pin WRX_DCX_Pin */
  GPIO_InitStruct.Pin = RDX_Pin|WRX_DCX_Pin;
 8000d62:	f44f 5340 	mov.w	r3, #12288	; 0x3000
 8000d66:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000d68:	2301      	movs	r3, #1
 8000d6a:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000d6c:	2300      	movs	r3, #0
 8000d6e:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000d70:	2300      	movs	r3, #0
 8000d72:	633b      	str	r3, [r7, #48]	; 0x30
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8000d74:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000d78:	4619      	mov	r1, r3
 8000d7a:	4846      	ldr	r0, [pc, #280]	; (8000e94 <MX_GPIO_Init+0x4a4>)
 8000d7c:	f000 fc2e 	bl	80015dc <HAL_GPIO_Init>

  /*Configure GPIO pins : R7_Pin DOTCLK_Pin B3_Pin */
  GPIO_InitStruct.Pin = R7_Pin|DOTCLK_Pin|B3_Pin;
 8000d80:	f44f 630c 	mov.w	r3, #2240	; 0x8c0
 8000d84:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000d86:	2302      	movs	r3, #2
 8000d88:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000d8a:	2300      	movs	r3, #0
 8000d8c:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000d8e:	2300      	movs	r3, #0
 8000d90:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Alternate = GPIO_AF14_LTDC;
 8000d92:	230e      	movs	r3, #14
 8000d94:	637b      	str	r3, [r7, #52]	; 0x34
  HAL_GPIO_Init(GPIOG, &GPIO_InitStruct);
 8000d96:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000d9a:	4619      	mov	r1, r3
 8000d9c:	483e      	ldr	r0, [pc, #248]	; (8000e98 <MX_GPIO_Init+0x4a8>)
 8000d9e:	f000 fc1d 	bl	80015dc <HAL_GPIO_Init>

  /*Configure GPIO pins : HSYNC_Pin G6_Pin R2_Pin */
  GPIO_InitStruct.Pin = HSYNC_Pin|G6_Pin|R2_Pin;
 8000da2:	f44f 6398 	mov.w	r3, #1216	; 0x4c0
 8000da6:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000da8:	2302      	movs	r3, #2
 8000daa:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000dac:	2300      	movs	r3, #0
 8000dae:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000db0:	2300      	movs	r3, #0
 8000db2:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Alternate = GPIO_AF14_LTDC;
 8000db4:	230e      	movs	r3, #14
 8000db6:	637b      	str	r3, [r7, #52]	; 0x34
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8000db8:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000dbc:	4619      	mov	r1, r3
 8000dbe:	4837      	ldr	r0, [pc, #220]	; (8000e9c <MX_GPIO_Init+0x4ac>)
 8000dc0:	f000 fc0c 	bl	80015dc <HAL_GPIO_Init>

  /*Configure GPIO pin : I2C3_SDA_Pin */
  GPIO_InitStruct.Pin = I2C3_SDA_Pin;
 8000dc4:	f44f 7300 	mov.w	r3, #512	; 0x200
 8000dc8:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8000dca:	2312      	movs	r3, #18
 8000dcc:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000dce:	2300      	movs	r3, #0
 8000dd0:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000dd2:	2300      	movs	r3, #0
 8000dd4:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Alternate = GPIO_AF4_I2C3;
 8000dd6:	2304      	movs	r3, #4
 8000dd8:	637b      	str	r3, [r7, #52]	; 0x34
  HAL_GPIO_Init(I2C3_SDA_GPIO_Port, &GPIO_InitStruct);
 8000dda:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000dde:	4619      	mov	r1, r3
 8000de0:	482e      	ldr	r0, [pc, #184]	; (8000e9c <MX_GPIO_Init+0x4ac>)
 8000de2:	f000 fbfb 	bl	80015dc <HAL_GPIO_Init>

  /*Configure GPIO pin : I2C3_SCL_Pin */
  GPIO_InitStruct.Pin = I2C3_SCL_Pin;
 8000de6:	f44f 7380 	mov.w	r3, #256	; 0x100
 8000dea:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8000dec:	2312      	movs	r3, #18
 8000dee:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000df0:	2300      	movs	r3, #0
 8000df2:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000df4:	2300      	movs	r3, #0
 8000df6:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Alternate = GPIO_AF4_I2C3;
 8000df8:	2304      	movs	r3, #4
 8000dfa:	637b      	str	r3, [r7, #52]	; 0x34
  HAL_GPIO_Init(I2C3_SCL_GPIO_Port, &GPIO_InitStruct);
 8000dfc:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000e00:	4619      	mov	r1, r3
 8000e02:	4827      	ldr	r0, [pc, #156]	; (8000ea0 <MX_GPIO_Init+0x4b0>)
 8000e04:	f000 fbea 	bl	80015dc <HAL_GPIO_Init>

  /*Configure GPIO pins : G7_Pin B2_Pin */
  GPIO_InitStruct.Pin = G7_Pin|B2_Pin;
 8000e08:	2348      	movs	r3, #72	; 0x48
 8000e0a:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000e0c:	2302      	movs	r3, #2
 8000e0e:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000e10:	2300      	movs	r3, #0
 8000e12:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000e14:	2300      	movs	r3, #0
 8000e16:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Alternate = GPIO_AF14_LTDC;
 8000e18:	230e      	movs	r3, #14
 8000e1a:	637b      	str	r3, [r7, #52]	; 0x34
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8000e1c:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000e20:	4619      	mov	r1, r3
 8000e22:	481c      	ldr	r0, [pc, #112]	; (8000e94 <MX_GPIO_Init+0x4a4>)
 8000e24:	f000 fbda 	bl	80015dc <HAL_GPIO_Init>

  /*Configure GPIO pins : G3_Pin B4_Pin */
  GPIO_InitStruct.Pin = G3_Pin|B4_Pin;
 8000e28:	f44f 53a0 	mov.w	r3, #5120	; 0x1400
 8000e2c:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000e2e:	2302      	movs	r3, #2
 8000e30:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000e32:	2300      	movs	r3, #0
 8000e34:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000e36:	2300      	movs	r3, #0
 8000e38:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Alternate = GPIO_AF9_LTDC;
 8000e3a:	2309      	movs	r3, #9
 8000e3c:	637b      	str	r3, [r7, #52]	; 0x34
  HAL_GPIO_Init(GPIOG, &GPIO_InitStruct);
 8000e3e:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000e42:	4619      	mov	r1, r3
 8000e44:	4814      	ldr	r0, [pc, #80]	; (8000e98 <MX_GPIO_Init+0x4a8>)
 8000e46:	f000 fbc9 	bl	80015dc <HAL_GPIO_Init>

  /*Configure GPIO pins : LD3_Pin LD4_Pin */
  GPIO_InitStruct.Pin = LD3_Pin|LD4_Pin;
 8000e4a:	f44f 43c0 	mov.w	r3, #24576	; 0x6000
 8000e4e:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000e50:	2301      	movs	r3, #1
 8000e52:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000e54:	2300      	movs	r3, #0
 8000e56:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000e58:	2300      	movs	r3, #0
 8000e5a:	633b      	str	r3, [r7, #48]	; 0x30
  HAL_GPIO_Init(GPIOG, &GPIO_InitStruct);
 8000e5c:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000e60:	4619      	mov	r1, r3
 8000e62:	480d      	ldr	r0, [pc, #52]	; (8000e98 <MX_GPIO_Init+0x4a8>)
 8000e64:	f000 fbba 	bl	80015dc <HAL_GPIO_Init>

  /*Configure GPIO pins : SDCKE1_Pin SDNE1_Pin */
  GPIO_InitStruct.Pin = SDCKE1_Pin|SDNE1_Pin;
 8000e68:	2360      	movs	r3, #96	; 0x60
 8000e6a:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000e6c:	2302      	movs	r3, #2
 8000e6e:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000e70:	2300      	movs	r3, #0
 8000e72:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000e74:	2303      	movs	r3, #3
 8000e76:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Alternate = GPIO_AF12_FMC;
 8000e78:	230c      	movs	r3, #12
 8000e7a:	637b      	str	r3, [r7, #52]	; 0x34
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000e7c:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000e80:	4619      	mov	r1, r3
 8000e82:	4803      	ldr	r0, [pc, #12]	; (8000e90 <MX_GPIO_Init+0x4a0>)
 8000e84:	f000 fbaa 	bl	80015dc <HAL_GPIO_Init>

}
 8000e88:	bf00      	nop
 8000e8a:	3738      	adds	r7, #56	; 0x38
 8000e8c:	46bd      	mov	sp, r7
 8000e8e:	bd80      	pop	{r7, pc}
 8000e90:	40020400 	.word	0x40020400
 8000e94:	40020c00 	.word	0x40020c00
 8000e98:	40021800 	.word	0x40021800
 8000e9c:	40020800 	.word	0x40020800
 8000ea0:	40020000 	.word	0x40020000

08000ea4 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8000ea4:	b480      	push	{r7}
 8000ea6:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8000ea8:	b672      	cpsid	i
}
 8000eaa:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8000eac:	e7fe      	b.n	8000eac <Error_Handler+0x8>
	...

08000eb0 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000eb0:	b580      	push	{r7, lr}
 8000eb2:	b082      	sub	sp, #8
 8000eb4:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000eb6:	2300      	movs	r3, #0
 8000eb8:	607b      	str	r3, [r7, #4]
 8000eba:	4b10      	ldr	r3, [pc, #64]	; (8000efc <HAL_MspInit+0x4c>)
 8000ebc:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000ebe:	4a0f      	ldr	r2, [pc, #60]	; (8000efc <HAL_MspInit+0x4c>)
 8000ec0:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8000ec4:	6453      	str	r3, [r2, #68]	; 0x44
 8000ec6:	4b0d      	ldr	r3, [pc, #52]	; (8000efc <HAL_MspInit+0x4c>)
 8000ec8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000eca:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8000ece:	607b      	str	r3, [r7, #4]
 8000ed0:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8000ed2:	2300      	movs	r3, #0
 8000ed4:	603b      	str	r3, [r7, #0]
 8000ed6:	4b09      	ldr	r3, [pc, #36]	; (8000efc <HAL_MspInit+0x4c>)
 8000ed8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000eda:	4a08      	ldr	r2, [pc, #32]	; (8000efc <HAL_MspInit+0x4c>)
 8000edc:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8000ee0:	6413      	str	r3, [r2, #64]	; 0x40
 8000ee2:	4b06      	ldr	r3, [pc, #24]	; (8000efc <HAL_MspInit+0x4c>)
 8000ee4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000ee6:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000eea:	603b      	str	r3, [r7, #0]
 8000eec:	683b      	ldr	r3, [r7, #0]

  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_0);
 8000eee:	2007      	movs	r0, #7
 8000ef0:	f000 fb40 	bl	8001574 <HAL_NVIC_SetPriorityGrouping>
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8000ef4:	bf00      	nop
 8000ef6:	3708      	adds	r7, #8
 8000ef8:	46bd      	mov	sp, r7
 8000efa:	bd80      	pop	{r7, pc}
 8000efc:	40023800 	.word	0x40023800

08000f00 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8000f00:	b580      	push	{r7, lr}
 8000f02:	b08a      	sub	sp, #40	; 0x28
 8000f04:	af00      	add	r7, sp, #0
 8000f06:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000f08:	f107 0314 	add.w	r3, r7, #20
 8000f0c:	2200      	movs	r2, #0
 8000f0e:	601a      	str	r2, [r3, #0]
 8000f10:	605a      	str	r2, [r3, #4]
 8000f12:	609a      	str	r2, [r3, #8]
 8000f14:	60da      	str	r2, [r3, #12]
 8000f16:	611a      	str	r2, [r3, #16]
  if(huart->Instance==USART1)
 8000f18:	687b      	ldr	r3, [r7, #4]
 8000f1a:	681b      	ldr	r3, [r3, #0]
 8000f1c:	4a19      	ldr	r2, [pc, #100]	; (8000f84 <HAL_UART_MspInit+0x84>)
 8000f1e:	4293      	cmp	r3, r2
 8000f20:	d12c      	bne.n	8000f7c <HAL_UART_MspInit+0x7c>
  {
  /* USER CODE BEGIN USART1_MspInit 0 */

  /* USER CODE END USART1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART1_CLK_ENABLE();
 8000f22:	2300      	movs	r3, #0
 8000f24:	613b      	str	r3, [r7, #16]
 8000f26:	4b18      	ldr	r3, [pc, #96]	; (8000f88 <HAL_UART_MspInit+0x88>)
 8000f28:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000f2a:	4a17      	ldr	r2, [pc, #92]	; (8000f88 <HAL_UART_MspInit+0x88>)
 8000f2c:	f043 0310 	orr.w	r3, r3, #16
 8000f30:	6453      	str	r3, [r2, #68]	; 0x44
 8000f32:	4b15      	ldr	r3, [pc, #84]	; (8000f88 <HAL_UART_MspInit+0x88>)
 8000f34:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000f36:	f003 0310 	and.w	r3, r3, #16
 8000f3a:	613b      	str	r3, [r7, #16]
 8000f3c:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000f3e:	2300      	movs	r3, #0
 8000f40:	60fb      	str	r3, [r7, #12]
 8000f42:	4b11      	ldr	r3, [pc, #68]	; (8000f88 <HAL_UART_MspInit+0x88>)
 8000f44:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000f46:	4a10      	ldr	r2, [pc, #64]	; (8000f88 <HAL_UART_MspInit+0x88>)
 8000f48:	f043 0301 	orr.w	r3, r3, #1
 8000f4c:	6313      	str	r3, [r2, #48]	; 0x30
 8000f4e:	4b0e      	ldr	r3, [pc, #56]	; (8000f88 <HAL_UART_MspInit+0x88>)
 8000f50:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000f52:	f003 0301 	and.w	r3, r3, #1
 8000f56:	60fb      	str	r3, [r7, #12]
 8000f58:	68fb      	ldr	r3, [r7, #12]
    /**USART1 GPIO Configuration
    PA9     ------> USART1_TX
    PA10     ------> USART1_RX
    */
    GPIO_InitStruct.Pin = STLINK_RX_Pin|STLINK_TX_Pin;
 8000f5a:	f44f 63c0 	mov.w	r3, #1536	; 0x600
 8000f5e:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000f60:	2302      	movs	r3, #2
 8000f62:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000f64:	2300      	movs	r3, #0
 8000f66:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000f68:	2303      	movs	r3, #3
 8000f6a:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF7_USART1;
 8000f6c:	2307      	movs	r3, #7
 8000f6e:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000f70:	f107 0314 	add.w	r3, r7, #20
 8000f74:	4619      	mov	r1, r3
 8000f76:	4805      	ldr	r0, [pc, #20]	; (8000f8c <HAL_UART_MspInit+0x8c>)
 8000f78:	f000 fb30 	bl	80015dc <HAL_GPIO_Init>
  /* USER CODE BEGIN USART1_MspInit 1 */

  /* USER CODE END USART1_MspInit 1 */
  }

}
 8000f7c:	bf00      	nop
 8000f7e:	3728      	adds	r7, #40	; 0x28
 8000f80:	46bd      	mov	sp, r7
 8000f82:	bd80      	pop	{r7, pc}
 8000f84:	40011000 	.word	0x40011000
 8000f88:	40023800 	.word	0x40023800
 8000f8c:	40020000 	.word	0x40020000

08000f90 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8000f90:	b480      	push	{r7}
 8000f92:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8000f94:	e7fe      	b.n	8000f94 <NMI_Handler+0x4>

08000f96 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8000f96:	b480      	push	{r7}
 8000f98:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8000f9a:	e7fe      	b.n	8000f9a <HardFault_Handler+0x4>

08000f9c <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8000f9c:	b480      	push	{r7}
 8000f9e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8000fa0:	e7fe      	b.n	8000fa0 <MemManage_Handler+0x4>

08000fa2 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8000fa2:	b480      	push	{r7}
 8000fa4:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8000fa6:	e7fe      	b.n	8000fa6 <BusFault_Handler+0x4>

08000fa8 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8000fa8:	b480      	push	{r7}
 8000faa:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8000fac:	e7fe      	b.n	8000fac <UsageFault_Handler+0x4>

08000fae <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8000fae:	b480      	push	{r7}
 8000fb0:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8000fb2:	bf00      	nop
 8000fb4:	46bd      	mov	sp, r7
 8000fb6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000fba:	4770      	bx	lr

08000fbc <_read>:
  _kill(status, -1);
  while (1) {}    /* Make sure we hang here */
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 8000fbc:	b580      	push	{r7, lr}
 8000fbe:	b086      	sub	sp, #24
 8000fc0:	af00      	add	r7, sp, #0
 8000fc2:	60f8      	str	r0, [r7, #12]
 8000fc4:	60b9      	str	r1, [r7, #8]
 8000fc6:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8000fc8:	2300      	movs	r3, #0
 8000fca:	617b      	str	r3, [r7, #20]
 8000fcc:	e00a      	b.n	8000fe4 <_read+0x28>
  {
    *ptr++ = __io_getchar();
 8000fce:	f3af 8000 	nop.w
 8000fd2:	4601      	mov	r1, r0
 8000fd4:	68bb      	ldr	r3, [r7, #8]
 8000fd6:	1c5a      	adds	r2, r3, #1
 8000fd8:	60ba      	str	r2, [r7, #8]
 8000fda:	b2ca      	uxtb	r2, r1
 8000fdc:	701a      	strb	r2, [r3, #0]
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8000fde:	697b      	ldr	r3, [r7, #20]
 8000fe0:	3301      	adds	r3, #1
 8000fe2:	617b      	str	r3, [r7, #20]
 8000fe4:	697a      	ldr	r2, [r7, #20]
 8000fe6:	687b      	ldr	r3, [r7, #4]
 8000fe8:	429a      	cmp	r2, r3
 8000fea:	dbf0      	blt.n	8000fce <_read+0x12>
  }

  return len;
 8000fec:	687b      	ldr	r3, [r7, #4]
}
 8000fee:	4618      	mov	r0, r3
 8000ff0:	3718      	adds	r7, #24
 8000ff2:	46bd      	mov	sp, r7
 8000ff4:	bd80      	pop	{r7, pc}

08000ff6 <_close>:
  }
  return len;
}

int _close(int file)
{
 8000ff6:	b480      	push	{r7}
 8000ff8:	b083      	sub	sp, #12
 8000ffa:	af00      	add	r7, sp, #0
 8000ffc:	6078      	str	r0, [r7, #4]
  (void)file;
  return -1;
 8000ffe:	f04f 33ff 	mov.w	r3, #4294967295
}
 8001002:	4618      	mov	r0, r3
 8001004:	370c      	adds	r7, #12
 8001006:	46bd      	mov	sp, r7
 8001008:	f85d 7b04 	ldr.w	r7, [sp], #4
 800100c:	4770      	bx	lr

0800100e <_fstat>:


int _fstat(int file, struct stat *st)
{
 800100e:	b480      	push	{r7}
 8001010:	b083      	sub	sp, #12
 8001012:	af00      	add	r7, sp, #0
 8001014:	6078      	str	r0, [r7, #4]
 8001016:	6039      	str	r1, [r7, #0]
  (void)file;
  st->st_mode = S_IFCHR;
 8001018:	683b      	ldr	r3, [r7, #0]
 800101a:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 800101e:	605a      	str	r2, [r3, #4]
  return 0;
 8001020:	2300      	movs	r3, #0
}
 8001022:	4618      	mov	r0, r3
 8001024:	370c      	adds	r7, #12
 8001026:	46bd      	mov	sp, r7
 8001028:	f85d 7b04 	ldr.w	r7, [sp], #4
 800102c:	4770      	bx	lr

0800102e <_isatty>:

int _isatty(int file)
{
 800102e:	b480      	push	{r7}
 8001030:	b083      	sub	sp, #12
 8001032:	af00      	add	r7, sp, #0
 8001034:	6078      	str	r0, [r7, #4]
  (void)file;
  return 1;
 8001036:	2301      	movs	r3, #1
}
 8001038:	4618      	mov	r0, r3
 800103a:	370c      	adds	r7, #12
 800103c:	46bd      	mov	sp, r7
 800103e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001042:	4770      	bx	lr

08001044 <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 8001044:	b480      	push	{r7}
 8001046:	b085      	sub	sp, #20
 8001048:	af00      	add	r7, sp, #0
 800104a:	60f8      	str	r0, [r7, #12]
 800104c:	60b9      	str	r1, [r7, #8]
 800104e:	607a      	str	r2, [r7, #4]
  (void)file;
  (void)ptr;
  (void)dir;
  return 0;
 8001050:	2300      	movs	r3, #0
}
 8001052:	4618      	mov	r0, r3
 8001054:	3714      	adds	r7, #20
 8001056:	46bd      	mov	sp, r7
 8001058:	f85d 7b04 	ldr.w	r7, [sp], #4
 800105c:	4770      	bx	lr
	...

08001060 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8001060:	b580      	push	{r7, lr}
 8001062:	b086      	sub	sp, #24
 8001064:	af00      	add	r7, sp, #0
 8001066:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8001068:	4a14      	ldr	r2, [pc, #80]	; (80010bc <_sbrk+0x5c>)
 800106a:	4b15      	ldr	r3, [pc, #84]	; (80010c0 <_sbrk+0x60>)
 800106c:	1ad3      	subs	r3, r2, r3
 800106e:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8001070:	697b      	ldr	r3, [r7, #20]
 8001072:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8001074:	4b13      	ldr	r3, [pc, #76]	; (80010c4 <_sbrk+0x64>)
 8001076:	681b      	ldr	r3, [r3, #0]
 8001078:	2b00      	cmp	r3, #0
 800107a:	d102      	bne.n	8001082 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 800107c:	4b11      	ldr	r3, [pc, #68]	; (80010c4 <_sbrk+0x64>)
 800107e:	4a12      	ldr	r2, [pc, #72]	; (80010c8 <_sbrk+0x68>)
 8001080:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8001082:	4b10      	ldr	r3, [pc, #64]	; (80010c4 <_sbrk+0x64>)
 8001084:	681a      	ldr	r2, [r3, #0]
 8001086:	687b      	ldr	r3, [r7, #4]
 8001088:	4413      	add	r3, r2
 800108a:	693a      	ldr	r2, [r7, #16]
 800108c:	429a      	cmp	r2, r3
 800108e:	d207      	bcs.n	80010a0 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8001090:	f003 ff44 	bl	8004f1c <__errno>
 8001094:	4603      	mov	r3, r0
 8001096:	220c      	movs	r2, #12
 8001098:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 800109a:	f04f 33ff 	mov.w	r3, #4294967295
 800109e:	e009      	b.n	80010b4 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 80010a0:	4b08      	ldr	r3, [pc, #32]	; (80010c4 <_sbrk+0x64>)
 80010a2:	681b      	ldr	r3, [r3, #0]
 80010a4:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 80010a6:	4b07      	ldr	r3, [pc, #28]	; (80010c4 <_sbrk+0x64>)
 80010a8:	681a      	ldr	r2, [r3, #0]
 80010aa:	687b      	ldr	r3, [r7, #4]
 80010ac:	4413      	add	r3, r2
 80010ae:	4a05      	ldr	r2, [pc, #20]	; (80010c4 <_sbrk+0x64>)
 80010b0:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 80010b2:	68fb      	ldr	r3, [r7, #12]
}
 80010b4:	4618      	mov	r0, r3
 80010b6:	3718      	adds	r7, #24
 80010b8:	46bd      	mov	sp, r7
 80010ba:	bd80      	pop	{r7, pc}
 80010bc:	20030000 	.word	0x20030000
 80010c0:	00000400 	.word	0x00000400
 80010c4:	20000508 	.word	0x20000508
 80010c8:	20008290 	.word	0x20008290

080010cc <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 80010cc:	b480      	push	{r7}
 80010ce:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 80010d0:	4b06      	ldr	r3, [pc, #24]	; (80010ec <SystemInit+0x20>)
 80010d2:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80010d6:	4a05      	ldr	r2, [pc, #20]	; (80010ec <SystemInit+0x20>)
 80010d8:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 80010dc:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 80010e0:	bf00      	nop
 80010e2:	46bd      	mov	sp, r7
 80010e4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80010e8:	4770      	bx	lr
 80010ea:	bf00      	nop
 80010ec:	e000ed00 	.word	0xe000ed00

080010f0 <tm_main>:


/* Define main entry point.  */

void tm_main()
{
 80010f0:	b580      	push	{r7, lr}
 80010f2:	af00      	add	r7, sp, #0
    /* Initialize the test.  */
	printf("****This test is running on the STM32F429I Discovery with CMSIS_RTOS_v2 on top of ThreadX **** \n\r");
 80010f4:	4803      	ldr	r0, [pc, #12]	; (8001104 <tm_main+0x14>)
 80010f6:	f003 ff51 	bl	8004f9c <iprintf>
    tm_initialize(tm_basic_processing_initialize);
 80010fa:	4803      	ldr	r0, [pc, #12]	; (8001108 <tm_main+0x18>)
 80010fc:	f000 f888 	bl	8001210 <tm_initialize>
}
 8001100:	bf00      	nop
 8001102:	bd80      	pop	{r7, pc}
 8001104:	08006280 	.word	0x08006280
 8001108:	0800110d 	.word	0x0800110d

0800110c <tm_basic_processing_initialize>:


/* Define the basic processing test initialization.  */

void  tm_basic_processing_initialize(void)
{
 800110c:	b580      	push	{r7, lr}
 800110e:	af00      	add	r7, sp, #0
  /* Create thread 0 at priority 10.  */
    tm_thread_create(0, 10, tm_basic_processing_thread_0_entry);
 8001110:	4a08      	ldr	r2, [pc, #32]	; (8001134 <tm_basic_processing_initialize+0x28>)
 8001112:	210a      	movs	r1, #10
 8001114:	2000      	movs	r0, #0
 8001116:	f000 f88b 	bl	8001230 <tm_thread_create>

    /* Resume thread 0.  */
    tm_thread_resume(0);
 800111a:	2000      	movs	r0, #0
 800111c:	f000 f8c8 	bl	80012b0 <tm_thread_resume>

    /* Create the reporting thread. It will preempt the other
       threads and print out the test results.  */
    tm_thread_create(5, osPriorityRealtime , tm_basic_processing_thread_report);
 8001120:	4a05      	ldr	r2, [pc, #20]	; (8001138 <tm_basic_processing_initialize+0x2c>)
 8001122:	2130      	movs	r1, #48	; 0x30
 8001124:	2005      	movs	r0, #5
 8001126:	f000 f883 	bl	8001230 <tm_thread_create>
    tm_thread_resume(5);
 800112a:	2005      	movs	r0, #5
 800112c:	f000 f8c0 	bl	80012b0 <tm_thread_resume>
}
 8001130:	bf00      	nop
 8001132:	bd80      	pop	{r7, pc}
 8001134:	0800113d 	.word	0x0800113d
 8001138:	080011a9 	.word	0x080011a9

0800113c <tm_basic_processing_thread_0_entry>:


/* Define the basic processing thread.  */
void  tm_basic_processing_thread_0_entry(void)
{
 800113c:	b480      	push	{r7}
 800113e:	b083      	sub	sp, #12
 8001140:	af00      	add	r7, sp, #0
int     i;

    /* Initialize the test array.   */
    for (i = 0; i < 1024; i++)
 8001142:	2300      	movs	r3, #0
 8001144:	607b      	str	r3, [r7, #4]
 8001146:	e007      	b.n	8001158 <tm_basic_processing_thread_0_entry+0x1c>
    {

        /* Clear the basic processing array.  */
        tm_basic_processing_array[i] =  0;
 8001148:	4a15      	ldr	r2, [pc, #84]	; (80011a0 <tm_basic_processing_thread_0_entry+0x64>)
 800114a:	687b      	ldr	r3, [r7, #4]
 800114c:	2100      	movs	r1, #0
 800114e:	f842 1023 	str.w	r1, [r2, r3, lsl #2]
    for (i = 0; i < 1024; i++)
 8001152:	687b      	ldr	r3, [r7, #4]
 8001154:	3301      	adds	r3, #1
 8001156:	607b      	str	r3, [r7, #4]
 8001158:	687b      	ldr	r3, [r7, #4]
 800115a:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800115e:	dbf3      	blt.n	8001148 <tm_basic_processing_thread_0_entry+0xc>

        /* Loop through the basic processing array, add the previous
           contents with the contents of the tm_basic_processing_counter
           and xor the result with the previous value...   just to eat
           up some time.  */
        for (i = 0; i < 1024; i++)
 8001160:	2300      	movs	r3, #0
 8001162:	607b      	str	r3, [r7, #4]
 8001164:	e012      	b.n	800118c <tm_basic_processing_thread_0_entry+0x50>
        {

            /* Update each array entry.  */
            tm_basic_processing_array[i] =  (tm_basic_processing_array[i] + tm_basic_processing_counter) ^ tm_basic_processing_array[i];
 8001166:	4a0e      	ldr	r2, [pc, #56]	; (80011a0 <tm_basic_processing_thread_0_entry+0x64>)
 8001168:	687b      	ldr	r3, [r7, #4]
 800116a:	f852 2023 	ldr.w	r2, [r2, r3, lsl #2]
 800116e:	4b0d      	ldr	r3, [pc, #52]	; (80011a4 <tm_basic_processing_thread_0_entry+0x68>)
 8001170:	681b      	ldr	r3, [r3, #0]
 8001172:	441a      	add	r2, r3
 8001174:	490a      	ldr	r1, [pc, #40]	; (80011a0 <tm_basic_processing_thread_0_entry+0x64>)
 8001176:	687b      	ldr	r3, [r7, #4]
 8001178:	f851 3023 	ldr.w	r3, [r1, r3, lsl #2]
 800117c:	405a      	eors	r2, r3
 800117e:	4908      	ldr	r1, [pc, #32]	; (80011a0 <tm_basic_processing_thread_0_entry+0x64>)
 8001180:	687b      	ldr	r3, [r7, #4]
 8001182:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
        for (i = 0; i < 1024; i++)
 8001186:	687b      	ldr	r3, [r7, #4]
 8001188:	3301      	adds	r3, #1
 800118a:	607b      	str	r3, [r7, #4]
 800118c:	687b      	ldr	r3, [r7, #4]
 800118e:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8001192:	dbe8      	blt.n	8001166 <tm_basic_processing_thread_0_entry+0x2a>
        }

        /* Increment the basic processing counter.  */
        tm_basic_processing_counter++;
 8001194:	4b03      	ldr	r3, [pc, #12]	; (80011a4 <tm_basic_processing_thread_0_entry+0x68>)
 8001196:	681b      	ldr	r3, [r3, #0]
 8001198:	3301      	adds	r3, #1
 800119a:	4a02      	ldr	r2, [pc, #8]	; (80011a4 <tm_basic_processing_thread_0_entry+0x68>)
 800119c:	6013      	str	r3, [r2, #0]
        for (i = 0; i < 1024; i++)
 800119e:	e7df      	b.n	8001160 <tm_basic_processing_thread_0_entry+0x24>
 80011a0:	20000510 	.word	0x20000510
 80011a4:	2000050c 	.word	0x2000050c

080011a8 <tm_basic_processing_thread_report>:
}


/* Define the basic processing reporting thread.  */
void  tm_basic_processing_thread_report(void)
{
 80011a8:	b580      	push	{r7, lr}
 80011aa:	b082      	sub	sp, #8
 80011ac:	af00      	add	r7, sp, #0
unsigned long   last_counter;
unsigned long   relative_time;


    /* Initialize the last counter.  */
    last_counter =  0;
 80011ae:	2300      	movs	r3, #0
 80011b0:	607b      	str	r3, [r7, #4]

    /* Initialize the relative time.  */
    relative_time =  0;
 80011b2:	2300      	movs	r3, #0
 80011b4:	603b      	str	r3, [r7, #0]
    osThreadResume(tm_thread_array[5]);
 80011b6:	4b11      	ldr	r3, [pc, #68]	; (80011fc <tm_basic_processing_thread_report+0x54>)
 80011b8:	695b      	ldr	r3, [r3, #20]
 80011ba:	4618      	mov	r0, r3
 80011bc:	f001 fe58 	bl	8002e70 <osThreadResume>
    while(1)
    {

        /* Sleep to allow the test to run.  */
        tm_thread_sleep(TM_TEST_DURATION);
 80011c0:	201e      	movs	r0, #30
 80011c2:	f000 f88d 	bl	80012e0 <tm_thread_sleep>

        /* Increment the relative time.  */
        relative_time =  relative_time + TM_TEST_DURATION;
 80011c6:	683b      	ldr	r3, [r7, #0]
 80011c8:	331e      	adds	r3, #30
 80011ca:	603b      	str	r3, [r7, #0]

        /* Print results to the stdio window.  */
        printf("**** Thread-Metric Basic Single Thread Processing Test **** Relative Time: %lu\n\r", relative_time);
 80011cc:	6839      	ldr	r1, [r7, #0]
 80011ce:	480c      	ldr	r0, [pc, #48]	; (8001200 <tm_basic_processing_thread_report+0x58>)
 80011d0:	f003 fee4 	bl	8004f9c <iprintf>
        /* See if there are any errors.  */
        if (tm_basic_processing_counter == last_counter)
 80011d4:	4b0b      	ldr	r3, [pc, #44]	; (8001204 <tm_basic_processing_thread_report+0x5c>)
 80011d6:	681b      	ldr	r3, [r3, #0]
 80011d8:	687a      	ldr	r2, [r7, #4]
 80011da:	429a      	cmp	r2, r3
 80011dc:	d102      	bne.n	80011e4 <tm_basic_processing_thread_report+0x3c>
        {

            printf("ERROR: Invalid counter value(s). Basic processing thread died!\n\r");
 80011de:	480a      	ldr	r0, [pc, #40]	; (8001208 <tm_basic_processing_thread_report+0x60>)
 80011e0:	f003 fedc 	bl	8004f9c <iprintf>
        }

        /* Show the time period total.  */
        printf("Time Period Total:  %lu\n\n\r", tm_basic_processing_counter - last_counter);
 80011e4:	4b07      	ldr	r3, [pc, #28]	; (8001204 <tm_basic_processing_thread_report+0x5c>)
 80011e6:	681a      	ldr	r2, [r3, #0]
 80011e8:	687b      	ldr	r3, [r7, #4]
 80011ea:	1ad3      	subs	r3, r2, r3
 80011ec:	4619      	mov	r1, r3
 80011ee:	4807      	ldr	r0, [pc, #28]	; (800120c <tm_basic_processing_thread_report+0x64>)
 80011f0:	f003 fed4 	bl	8004f9c <iprintf>

        /* Save the last counter.  */
        last_counter =  tm_basic_processing_counter;
 80011f4:	4b03      	ldr	r3, [pc, #12]	; (8001204 <tm_basic_processing_thread_report+0x5c>)
 80011f6:	681b      	ldr	r3, [r3, #0]
 80011f8:	607b      	str	r3, [r7, #4]
        tm_thread_sleep(TM_TEST_DURATION);
 80011fa:	e7e1      	b.n	80011c0 <tm_basic_processing_thread_report+0x18>
 80011fc:	20001510 	.word	0x20001510
 8001200:	080062e4 	.word	0x080062e4
 8001204:	2000050c 	.word	0x2000050c
 8001208:	08006338 	.word	0x08006338
 800120c:	0800637c 	.word	0x0800637c

08001210 <tm_initialize>:


/* This function called from main performs basic RTOS initialization,
   calls the test initialization function, and then starts the RTOS function. */
void tm_initialize(void (*test_initialization_function)(void))
{
 8001210:	b580      	push	{r7, lr}
 8001212:	b082      	sub	sp, #8
 8001214:	af00      	add	r7, sp, #0
 8001216:	6078      	str	r0, [r7, #4]
    /* Save the test initialization function. */
    tm_initialization_function = test_initialization_function;
 8001218:	4a04      	ldr	r2, [pc, #16]	; (800122c <tm_initialize+0x1c>)
 800121a:	687b      	ldr	r3, [r7, #4]
 800121c:	6013      	str	r3, [r2, #0]

    /* Call the previously defined initialization function. */
    (tm_initialization_function)();
 800121e:	4b03      	ldr	r3, [pc, #12]	; (800122c <tm_initialize+0x1c>)
 8001220:	681b      	ldr	r3, [r3, #0]
 8001222:	4798      	blx	r3
}
 8001224:	bf00      	nop
 8001226:	3708      	adds	r7, #8
 8001228:	46bd      	mov	sp, r7
 800122a:	bd80      	pop	{r7, pc}
 800122c:	20001538 	.word	0x20001538

08001230 <tm_thread_create>:
/* This function takes a thread ID and priority and attempts to create the
   file in the underlying RTOS. Valid priorities range from 1 through 255,
   where 1 is the highest priority and 255 is the lowest. If successful,
   the function should return TM_SUCCESS. Otherwise, TM_ERROR should be returned. */
int tm_thread_create(int thread_id, int priority, void (*entry_function)(void))
{
 8001230:	b580      	push	{r7, lr}
 8001232:	b0a6      	sub	sp, #152	; 0x98
 8001234:	af00      	add	r7, sp, #0
 8001236:	60f8      	str	r0, [r7, #12]
 8001238:	60b9      	str	r1, [r7, #8]
 800123a:	607a      	str	r2, [r7, #4]
	// Remember the actual thread entry.
	   // tm_thread_entry_functions[thread_id] = entry_function;
	    char str[100];
	    sprintf(str, "%d",thread_id);
 800123c:	f107 0334 	add.w	r3, r7, #52	; 0x34
 8001240:	68fa      	ldr	r2, [r7, #12]
 8001242:	4919      	ldr	r1, [pc, #100]	; (80012a8 <tm_thread_create+0x78>)
 8001244:	4618      	mov	r0, r3
 8001246:	f003 fec1 	bl	8004fcc <siprintf>

	    // Create the thread under CMSIS-RTOS.
	    osThreadAttr_t thread_attr = {
 800124a:	f107 0310 	add.w	r3, r7, #16
 800124e:	2224      	movs	r2, #36	; 0x24
 8001250:	2100      	movs	r1, #0
 8001252:	4618      	mov	r0, r3
 8001254:	f003 fe9a 	bl	8004f8c <memset>
 8001258:	f107 0334 	add.w	r3, r7, #52	; 0x34
 800125c:	613b      	str	r3, [r7, #16]
 800125e:	f44f 6340 	mov.w	r3, #3072	; 0xc00
 8001262:	627b      	str	r3, [r7, #36]	; 0x24
 8001264:	68bb      	ldr	r3, [r7, #8]
 8001266:	62bb      	str	r3, [r7, #40]	; 0x28
	        .name = str,
	        //.stack_mem = tm_thread_stack_area[thread_id],
	        .stack_size = 3*1024,
	        .priority = priority
	    };
	    tm_thread_array[thread_id] = osThreadNew((osThreadFunc_t)entry_function, NULL, &thread_attr);
 8001268:	f107 0310 	add.w	r3, r7, #16
 800126c:	461a      	mov	r2, r3
 800126e:	2100      	movs	r1, #0
 8001270:	6878      	ldr	r0, [r7, #4]
 8001272:	f001 fcda 	bl	8002c2a <osThreadNew>
 8001276:	4602      	mov	r2, r0
 8001278:	490c      	ldr	r1, [pc, #48]	; (80012ac <tm_thread_create+0x7c>)
 800127a:	68fb      	ldr	r3, [r7, #12]
 800127c:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

	    // Determine if the thread create was successful.
	    if (tm_thread_array[thread_id] != NULL)
 8001280:	4a0a      	ldr	r2, [pc, #40]	; (80012ac <tm_thread_create+0x7c>)
 8001282:	68fb      	ldr	r3, [r7, #12]
 8001284:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001288:	2b00      	cmp	r3, #0
 800128a:	d008      	beq.n	800129e <tm_thread_create+0x6e>
	    {
	    	osThreadSuspend(tm_thread_array[thread_id]);
 800128c:	4a07      	ldr	r2, [pc, #28]	; (80012ac <tm_thread_create+0x7c>)
 800128e:	68fb      	ldr	r3, [r7, #12]
 8001290:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001294:	4618      	mov	r0, r3
 8001296:	f001 fdbb 	bl	8002e10 <osThreadSuspend>

	    	return TM_SUCCESS;
 800129a:	2300      	movs	r3, #0
 800129c:	e000      	b.n	80012a0 <tm_thread_create+0x70>
	    }

	    else
	    {

	    	 return TM_ERROR;
 800129e:	2301      	movs	r3, #1
	    }
}
 80012a0:	4618      	mov	r0, r3
 80012a2:	3798      	adds	r7, #152	; 0x98
 80012a4:	46bd      	mov	sp, r7
 80012a6:	bd80      	pop	{r7, pc}
 80012a8:	08006398 	.word	0x08006398
 80012ac:	20001510 	.word	0x20001510

080012b0 <tm_thread_resume>:


/* This function resumes the specified thread.  If successful, the function should
   return TM_SUCCESS. Otherwise, TM_ERROR should be returned.  */
int tm_thread_resume(int thread_id)
{
 80012b0:	b580      	push	{r7, lr}
 80012b2:	b082      	sub	sp, #8
 80012b4:	af00      	add	r7, sp, #0
 80012b6:	6078      	str	r0, [r7, #4]
    /* Resume the thread with the specified ID. */
    if (osThreadResume(tm_thread_array[thread_id]) == osOK) {
 80012b8:	4a08      	ldr	r2, [pc, #32]	; (80012dc <tm_thread_resume+0x2c>)
 80012ba:	687b      	ldr	r3, [r7, #4]
 80012bc:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80012c0:	4618      	mov	r0, r3
 80012c2:	f001 fdd5 	bl	8002e70 <osThreadResume>
 80012c6:	4603      	mov	r3, r0
 80012c8:	2b00      	cmp	r3, #0
 80012ca:	d101      	bne.n	80012d0 <tm_thread_resume+0x20>
        /* Thread resume successful. */
        return TM_SUCCESS;
 80012cc:	2300      	movs	r3, #0
 80012ce:	e000      	b.n	80012d2 <tm_thread_resume+0x22>
    else
    {

    }
    /* Thread resume failed. */
    return TM_ERROR;
 80012d0:	2301      	movs	r3, #1
}
 80012d2:	4618      	mov	r0, r3
 80012d4:	3708      	adds	r7, #8
 80012d6:	46bd      	mov	sp, r7
 80012d8:	bd80      	pop	{r7, pc}
 80012da:	bf00      	nop
 80012dc:	20001510 	.word	0x20001510

080012e0 <tm_thread_sleep>:

/* This function suspends the specified thread for the specified number
   of seconds.  If successful, the function should return TM_SUCCESS.
   Otherwise, TM_ERROR should be returned.  */
void tm_thread_sleep(int seconds)
{
 80012e0:	b580      	push	{r7, lr}
 80012e2:	b082      	sub	sp, #8
 80012e4:	af00      	add	r7, sp, #0
 80012e6:	6078      	str	r0, [r7, #4]
	 osDelay(seconds * 100);
 80012e8:	687b      	ldr	r3, [r7, #4]
 80012ea:	2264      	movs	r2, #100	; 0x64
 80012ec:	fb02 f303 	mul.w	r3, r2, r3
 80012f0:	4618      	mov	r0, r3
 80012f2:	f001 fc7f 	bl	8002bf4 <osDelay>
}
 80012f6:	bf00      	nop
 80012f8:	3708      	adds	r7, #8
 80012fa:	46bd      	mov	sp, r7
 80012fc:	bd80      	pop	{r7, pc}
	...

08001300 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler: 
  ldr   sp, =_estack       /* set stack pointer */
 8001300:	f8df d034 	ldr.w	sp, [pc, #52]	; 8001338 <LoopFillZerobss+0x12>
 
/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 8001304:	480d      	ldr	r0, [pc, #52]	; (800133c <LoopFillZerobss+0x16>)
  ldr r1, =_edata
 8001306:	490e      	ldr	r1, [pc, #56]	; (8001340 <LoopFillZerobss+0x1a>)
  ldr r2, =_sidata
 8001308:	4a0e      	ldr	r2, [pc, #56]	; (8001344 <LoopFillZerobss+0x1e>)
  movs r3, #0
 800130a:	2300      	movs	r3, #0
  b LoopCopyDataInit
 800130c:	e002      	b.n	8001314 <LoopCopyDataInit>

0800130e <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 800130e:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8001310:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8001312:	3304      	adds	r3, #4

08001314 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8001314:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8001316:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8001318:	d3f9      	bcc.n	800130e <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 800131a:	4a0b      	ldr	r2, [pc, #44]	; (8001348 <LoopFillZerobss+0x22>)
  ldr r4, =_ebss
 800131c:	4c0b      	ldr	r4, [pc, #44]	; (800134c <LoopFillZerobss+0x26>)
  movs r3, #0
 800131e:	2300      	movs	r3, #0
  b LoopFillZerobss
 8001320:	e001      	b.n	8001326 <LoopFillZerobss>

08001322 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8001322:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8001324:	3204      	adds	r2, #4

08001326 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8001326:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8001328:	d3fb      	bcc.n	8001322 <FillZerobss>

/* Call the clock system initialization function.*/
  bl  SystemInit   
 800132a:	f7ff fecf 	bl	80010cc <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 800132e:	f003 fdfb 	bl	8004f28 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8001332:	f7ff fab3 	bl	800089c <main>
  bx  lr    
 8001336:	4770      	bx	lr
  ldr   sp, =_estack       /* set stack pointer */
 8001338:	20030000 	.word	0x20030000
  ldr r0, =_sdata
 800133c:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8001340:	20000074 	.word	0x20000074
  ldr r2, =_sidata
 8001344:	080064a4 	.word	0x080064a4
  ldr r2, =_sbss
 8001348:	20000074 	.word	0x20000074
  ldr r4, =_ebss
 800134c:	2000828c 	.word	0x2000828c

08001350 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8001350:	e7fe      	b.n	8001350 <ADC_IRQHandler>
	...

08001354 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8001354:	b580      	push	{r7, lr}
 8001356:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 8001358:	4b0e      	ldr	r3, [pc, #56]	; (8001394 <HAL_Init+0x40>)
 800135a:	681b      	ldr	r3, [r3, #0]
 800135c:	4a0d      	ldr	r2, [pc, #52]	; (8001394 <HAL_Init+0x40>)
 800135e:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8001362:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 8001364:	4b0b      	ldr	r3, [pc, #44]	; (8001394 <HAL_Init+0x40>)
 8001366:	681b      	ldr	r3, [r3, #0]
 8001368:	4a0a      	ldr	r2, [pc, #40]	; (8001394 <HAL_Init+0x40>)
 800136a:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 800136e:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8001370:	4b08      	ldr	r3, [pc, #32]	; (8001394 <HAL_Init+0x40>)
 8001372:	681b      	ldr	r3, [r3, #0]
 8001374:	4a07      	ldr	r2, [pc, #28]	; (8001394 <HAL_Init+0x40>)
 8001376:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800137a:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 800137c:	2003      	movs	r0, #3
 800137e:	f000 f8f9 	bl	8001574 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8001382:	2000      	movs	r0, #0
 8001384:	f000 f808 	bl	8001398 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8001388:	f7ff fd92 	bl	8000eb0 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 800138c:	2300      	movs	r3, #0
}
 800138e:	4618      	mov	r0, r3
 8001390:	bd80      	pop	{r7, pc}
 8001392:	bf00      	nop
 8001394:	40023c00 	.word	0x40023c00

08001398 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8001398:	b580      	push	{r7, lr}
 800139a:	b082      	sub	sp, #8
 800139c:	af00      	add	r7, sp, #0
 800139e:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 80013a0:	4b12      	ldr	r3, [pc, #72]	; (80013ec <HAL_InitTick+0x54>)
 80013a2:	681a      	ldr	r2, [r3, #0]
 80013a4:	4b12      	ldr	r3, [pc, #72]	; (80013f0 <HAL_InitTick+0x58>)
 80013a6:	781b      	ldrb	r3, [r3, #0]
 80013a8:	4619      	mov	r1, r3
 80013aa:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 80013ae:	fbb3 f3f1 	udiv	r3, r3, r1
 80013b2:	fbb2 f3f3 	udiv	r3, r2, r3
 80013b6:	4618      	mov	r0, r3
 80013b8:	f000 f903 	bl	80015c2 <HAL_SYSTICK_Config>
 80013bc:	4603      	mov	r3, r0
 80013be:	2b00      	cmp	r3, #0
 80013c0:	d001      	beq.n	80013c6 <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 80013c2:	2301      	movs	r3, #1
 80013c4:	e00e      	b.n	80013e4 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 80013c6:	687b      	ldr	r3, [r7, #4]
 80013c8:	2b0f      	cmp	r3, #15
 80013ca:	d80a      	bhi.n	80013e2 <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 80013cc:	2200      	movs	r2, #0
 80013ce:	6879      	ldr	r1, [r7, #4]
 80013d0:	f04f 30ff 	mov.w	r0, #4294967295
 80013d4:	f000 f8d9 	bl	800158a <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 80013d8:	4a06      	ldr	r2, [pc, #24]	; (80013f4 <HAL_InitTick+0x5c>)
 80013da:	687b      	ldr	r3, [r7, #4]
 80013dc:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 80013de:	2300      	movs	r3, #0
 80013e0:	e000      	b.n	80013e4 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 80013e2:	2301      	movs	r3, #1
}
 80013e4:	4618      	mov	r0, r3
 80013e6:	3708      	adds	r7, #8
 80013e8:	46bd      	mov	sp, r7
 80013ea:	bd80      	pop	{r7, pc}
 80013ec:	20000000 	.word	0x20000000
 80013f0:	20000008 	.word	0x20000008
 80013f4:	20000004 	.word	0x20000004

080013f8 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 80013f8:	b480      	push	{r7}
 80013fa:	af00      	add	r7, sp, #0
  return uwTick;
 80013fc:	4b03      	ldr	r3, [pc, #12]	; (800140c <HAL_GetTick+0x14>)
 80013fe:	681b      	ldr	r3, [r3, #0]
}
 8001400:	4618      	mov	r0, r3
 8001402:	46bd      	mov	sp, r7
 8001404:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001408:	4770      	bx	lr
 800140a:	bf00      	nop
 800140c:	2000153c 	.word	0x2000153c

08001410 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001410:	b480      	push	{r7}
 8001412:	b085      	sub	sp, #20
 8001414:	af00      	add	r7, sp, #0
 8001416:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8001418:	687b      	ldr	r3, [r7, #4]
 800141a:	f003 0307 	and.w	r3, r3, #7
 800141e:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8001420:	4b0c      	ldr	r3, [pc, #48]	; (8001454 <__NVIC_SetPriorityGrouping+0x44>)
 8001422:	68db      	ldr	r3, [r3, #12]
 8001424:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8001426:	68ba      	ldr	r2, [r7, #8]
 8001428:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 800142c:	4013      	ands	r3, r2
 800142e:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8001430:	68fb      	ldr	r3, [r7, #12]
 8001432:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8001434:	68bb      	ldr	r3, [r7, #8]
 8001436:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8001438:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 800143c:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8001440:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8001442:	4a04      	ldr	r2, [pc, #16]	; (8001454 <__NVIC_SetPriorityGrouping+0x44>)
 8001444:	68bb      	ldr	r3, [r7, #8]
 8001446:	60d3      	str	r3, [r2, #12]
}
 8001448:	bf00      	nop
 800144a:	3714      	adds	r7, #20
 800144c:	46bd      	mov	sp, r7
 800144e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001452:	4770      	bx	lr
 8001454:	e000ed00 	.word	0xe000ed00

08001458 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8001458:	b480      	push	{r7}
 800145a:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 800145c:	4b04      	ldr	r3, [pc, #16]	; (8001470 <__NVIC_GetPriorityGrouping+0x18>)
 800145e:	68db      	ldr	r3, [r3, #12]
 8001460:	0a1b      	lsrs	r3, r3, #8
 8001462:	f003 0307 	and.w	r3, r3, #7
}
 8001466:	4618      	mov	r0, r3
 8001468:	46bd      	mov	sp, r7
 800146a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800146e:	4770      	bx	lr
 8001470:	e000ed00 	.word	0xe000ed00

08001474 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8001474:	b480      	push	{r7}
 8001476:	b083      	sub	sp, #12
 8001478:	af00      	add	r7, sp, #0
 800147a:	4603      	mov	r3, r0
 800147c:	6039      	str	r1, [r7, #0]
 800147e:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001480:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001484:	2b00      	cmp	r3, #0
 8001486:	db0a      	blt.n	800149e <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001488:	683b      	ldr	r3, [r7, #0]
 800148a:	b2da      	uxtb	r2, r3
 800148c:	490c      	ldr	r1, [pc, #48]	; (80014c0 <__NVIC_SetPriority+0x4c>)
 800148e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001492:	0112      	lsls	r2, r2, #4
 8001494:	b2d2      	uxtb	r2, r2
 8001496:	440b      	add	r3, r1
 8001498:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 800149c:	e00a      	b.n	80014b4 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800149e:	683b      	ldr	r3, [r7, #0]
 80014a0:	b2da      	uxtb	r2, r3
 80014a2:	4908      	ldr	r1, [pc, #32]	; (80014c4 <__NVIC_SetPriority+0x50>)
 80014a4:	79fb      	ldrb	r3, [r7, #7]
 80014a6:	f003 030f 	and.w	r3, r3, #15
 80014aa:	3b04      	subs	r3, #4
 80014ac:	0112      	lsls	r2, r2, #4
 80014ae:	b2d2      	uxtb	r2, r2
 80014b0:	440b      	add	r3, r1
 80014b2:	761a      	strb	r2, [r3, #24]
}
 80014b4:	bf00      	nop
 80014b6:	370c      	adds	r7, #12
 80014b8:	46bd      	mov	sp, r7
 80014ba:	f85d 7b04 	ldr.w	r7, [sp], #4
 80014be:	4770      	bx	lr
 80014c0:	e000e100 	.word	0xe000e100
 80014c4:	e000ed00 	.word	0xe000ed00

080014c8 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80014c8:	b480      	push	{r7}
 80014ca:	b089      	sub	sp, #36	; 0x24
 80014cc:	af00      	add	r7, sp, #0
 80014ce:	60f8      	str	r0, [r7, #12]
 80014d0:	60b9      	str	r1, [r7, #8]
 80014d2:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 80014d4:	68fb      	ldr	r3, [r7, #12]
 80014d6:	f003 0307 	and.w	r3, r3, #7
 80014da:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 80014dc:	69fb      	ldr	r3, [r7, #28]
 80014de:	f1c3 0307 	rsb	r3, r3, #7
 80014e2:	2b04      	cmp	r3, #4
 80014e4:	bf28      	it	cs
 80014e6:	2304      	movcs	r3, #4
 80014e8:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 80014ea:	69fb      	ldr	r3, [r7, #28]
 80014ec:	3304      	adds	r3, #4
 80014ee:	2b06      	cmp	r3, #6
 80014f0:	d902      	bls.n	80014f8 <NVIC_EncodePriority+0x30>
 80014f2:	69fb      	ldr	r3, [r7, #28]
 80014f4:	3b03      	subs	r3, #3
 80014f6:	e000      	b.n	80014fa <NVIC_EncodePriority+0x32>
 80014f8:	2300      	movs	r3, #0
 80014fa:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80014fc:	f04f 32ff 	mov.w	r2, #4294967295
 8001500:	69bb      	ldr	r3, [r7, #24]
 8001502:	fa02 f303 	lsl.w	r3, r2, r3
 8001506:	43da      	mvns	r2, r3
 8001508:	68bb      	ldr	r3, [r7, #8]
 800150a:	401a      	ands	r2, r3
 800150c:	697b      	ldr	r3, [r7, #20]
 800150e:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8001510:	f04f 31ff 	mov.w	r1, #4294967295
 8001514:	697b      	ldr	r3, [r7, #20]
 8001516:	fa01 f303 	lsl.w	r3, r1, r3
 800151a:	43d9      	mvns	r1, r3
 800151c:	687b      	ldr	r3, [r7, #4]
 800151e:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001520:	4313      	orrs	r3, r2
         );
}
 8001522:	4618      	mov	r0, r3
 8001524:	3724      	adds	r7, #36	; 0x24
 8001526:	46bd      	mov	sp, r7
 8001528:	f85d 7b04 	ldr.w	r7, [sp], #4
 800152c:	4770      	bx	lr
	...

08001530 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8001530:	b580      	push	{r7, lr}
 8001532:	b082      	sub	sp, #8
 8001534:	af00      	add	r7, sp, #0
 8001536:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8001538:	687b      	ldr	r3, [r7, #4]
 800153a:	3b01      	subs	r3, #1
 800153c:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8001540:	d301      	bcc.n	8001546 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8001542:	2301      	movs	r3, #1
 8001544:	e00f      	b.n	8001566 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8001546:	4a0a      	ldr	r2, [pc, #40]	; (8001570 <SysTick_Config+0x40>)
 8001548:	687b      	ldr	r3, [r7, #4]
 800154a:	3b01      	subs	r3, #1
 800154c:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 800154e:	210f      	movs	r1, #15
 8001550:	f04f 30ff 	mov.w	r0, #4294967295
 8001554:	f7ff ff8e 	bl	8001474 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8001558:	4b05      	ldr	r3, [pc, #20]	; (8001570 <SysTick_Config+0x40>)
 800155a:	2200      	movs	r2, #0
 800155c:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 800155e:	4b04      	ldr	r3, [pc, #16]	; (8001570 <SysTick_Config+0x40>)
 8001560:	2207      	movs	r2, #7
 8001562:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8001564:	2300      	movs	r3, #0
}
 8001566:	4618      	mov	r0, r3
 8001568:	3708      	adds	r7, #8
 800156a:	46bd      	mov	sp, r7
 800156c:	bd80      	pop	{r7, pc}
 800156e:	bf00      	nop
 8001570:	e000e010 	.word	0xe000e010

08001574 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001574:	b580      	push	{r7, lr}
 8001576:	b082      	sub	sp, #8
 8001578:	af00      	add	r7, sp, #0
 800157a:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 800157c:	6878      	ldr	r0, [r7, #4]
 800157e:	f7ff ff47 	bl	8001410 <__NVIC_SetPriorityGrouping>
}
 8001582:	bf00      	nop
 8001584:	3708      	adds	r7, #8
 8001586:	46bd      	mov	sp, r7
 8001588:	bd80      	pop	{r7, pc}

0800158a <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 800158a:	b580      	push	{r7, lr}
 800158c:	b086      	sub	sp, #24
 800158e:	af00      	add	r7, sp, #0
 8001590:	4603      	mov	r3, r0
 8001592:	60b9      	str	r1, [r7, #8]
 8001594:	607a      	str	r2, [r7, #4]
 8001596:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8001598:	2300      	movs	r3, #0
 800159a:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 800159c:	f7ff ff5c 	bl	8001458 <__NVIC_GetPriorityGrouping>
 80015a0:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 80015a2:	687a      	ldr	r2, [r7, #4]
 80015a4:	68b9      	ldr	r1, [r7, #8]
 80015a6:	6978      	ldr	r0, [r7, #20]
 80015a8:	f7ff ff8e 	bl	80014c8 <NVIC_EncodePriority>
 80015ac:	4602      	mov	r2, r0
 80015ae:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80015b2:	4611      	mov	r1, r2
 80015b4:	4618      	mov	r0, r3
 80015b6:	f7ff ff5d 	bl	8001474 <__NVIC_SetPriority>
}
 80015ba:	bf00      	nop
 80015bc:	3718      	adds	r7, #24
 80015be:	46bd      	mov	sp, r7
 80015c0:	bd80      	pop	{r7, pc}

080015c2 <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 80015c2:	b580      	push	{r7, lr}
 80015c4:	b082      	sub	sp, #8
 80015c6:	af00      	add	r7, sp, #0
 80015c8:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 80015ca:	6878      	ldr	r0, [r7, #4]
 80015cc:	f7ff ffb0 	bl	8001530 <SysTick_Config>
 80015d0:	4603      	mov	r3, r0
}
 80015d2:	4618      	mov	r0, r3
 80015d4:	3708      	adds	r7, #8
 80015d6:	46bd      	mov	sp, r7
 80015d8:	bd80      	pop	{r7, pc}
	...

080015dc <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 80015dc:	b480      	push	{r7}
 80015de:	b089      	sub	sp, #36	; 0x24
 80015e0:	af00      	add	r7, sp, #0
 80015e2:	6078      	str	r0, [r7, #4]
 80015e4:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 80015e6:	2300      	movs	r3, #0
 80015e8:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 80015ea:	2300      	movs	r3, #0
 80015ec:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 80015ee:	2300      	movs	r3, #0
 80015f0:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 80015f2:	2300      	movs	r3, #0
 80015f4:	61fb      	str	r3, [r7, #28]
 80015f6:	e177      	b.n	80018e8 <HAL_GPIO_Init+0x30c>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 80015f8:	2201      	movs	r2, #1
 80015fa:	69fb      	ldr	r3, [r7, #28]
 80015fc:	fa02 f303 	lsl.w	r3, r2, r3
 8001600:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8001602:	683b      	ldr	r3, [r7, #0]
 8001604:	681b      	ldr	r3, [r3, #0]
 8001606:	697a      	ldr	r2, [r7, #20]
 8001608:	4013      	ands	r3, r2
 800160a:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 800160c:	693a      	ldr	r2, [r7, #16]
 800160e:	697b      	ldr	r3, [r7, #20]
 8001610:	429a      	cmp	r2, r3
 8001612:	f040 8166 	bne.w	80018e2 <HAL_GPIO_Init+0x306>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8001616:	683b      	ldr	r3, [r7, #0]
 8001618:	685b      	ldr	r3, [r3, #4]
 800161a:	f003 0303 	and.w	r3, r3, #3
 800161e:	2b01      	cmp	r3, #1
 8001620:	d005      	beq.n	800162e <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8001622:	683b      	ldr	r3, [r7, #0]
 8001624:	685b      	ldr	r3, [r3, #4]
 8001626:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 800162a:	2b02      	cmp	r3, #2
 800162c:	d130      	bne.n	8001690 <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 800162e:	687b      	ldr	r3, [r7, #4]
 8001630:	689b      	ldr	r3, [r3, #8]
 8001632:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 8001634:	69fb      	ldr	r3, [r7, #28]
 8001636:	005b      	lsls	r3, r3, #1
 8001638:	2203      	movs	r2, #3
 800163a:	fa02 f303 	lsl.w	r3, r2, r3
 800163e:	43db      	mvns	r3, r3
 8001640:	69ba      	ldr	r2, [r7, #24]
 8001642:	4013      	ands	r3, r2
 8001644:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8001646:	683b      	ldr	r3, [r7, #0]
 8001648:	68da      	ldr	r2, [r3, #12]
 800164a:	69fb      	ldr	r3, [r7, #28]
 800164c:	005b      	lsls	r3, r3, #1
 800164e:	fa02 f303 	lsl.w	r3, r2, r3
 8001652:	69ba      	ldr	r2, [r7, #24]
 8001654:	4313      	orrs	r3, r2
 8001656:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8001658:	687b      	ldr	r3, [r7, #4]
 800165a:	69ba      	ldr	r2, [r7, #24]
 800165c:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 800165e:	687b      	ldr	r3, [r7, #4]
 8001660:	685b      	ldr	r3, [r3, #4]
 8001662:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8001664:	2201      	movs	r2, #1
 8001666:	69fb      	ldr	r3, [r7, #28]
 8001668:	fa02 f303 	lsl.w	r3, r2, r3
 800166c:	43db      	mvns	r3, r3
 800166e:	69ba      	ldr	r2, [r7, #24]
 8001670:	4013      	ands	r3, r2
 8001672:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8001674:	683b      	ldr	r3, [r7, #0]
 8001676:	685b      	ldr	r3, [r3, #4]
 8001678:	091b      	lsrs	r3, r3, #4
 800167a:	f003 0201 	and.w	r2, r3, #1
 800167e:	69fb      	ldr	r3, [r7, #28]
 8001680:	fa02 f303 	lsl.w	r3, r2, r3
 8001684:	69ba      	ldr	r2, [r7, #24]
 8001686:	4313      	orrs	r3, r2
 8001688:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 800168a:	687b      	ldr	r3, [r7, #4]
 800168c:	69ba      	ldr	r2, [r7, #24]
 800168e:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8001690:	683b      	ldr	r3, [r7, #0]
 8001692:	685b      	ldr	r3, [r3, #4]
 8001694:	f003 0303 	and.w	r3, r3, #3
 8001698:	2b03      	cmp	r3, #3
 800169a:	d017      	beq.n	80016cc <HAL_GPIO_Init+0xf0>
      {
        /* Check the parameters */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
        
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 800169c:	687b      	ldr	r3, [r7, #4]
 800169e:	68db      	ldr	r3, [r3, #12]
 80016a0:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 80016a2:	69fb      	ldr	r3, [r7, #28]
 80016a4:	005b      	lsls	r3, r3, #1
 80016a6:	2203      	movs	r2, #3
 80016a8:	fa02 f303 	lsl.w	r3, r2, r3
 80016ac:	43db      	mvns	r3, r3
 80016ae:	69ba      	ldr	r2, [r7, #24]
 80016b0:	4013      	ands	r3, r2
 80016b2:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 80016b4:	683b      	ldr	r3, [r7, #0]
 80016b6:	689a      	ldr	r2, [r3, #8]
 80016b8:	69fb      	ldr	r3, [r7, #28]
 80016ba:	005b      	lsls	r3, r3, #1
 80016bc:	fa02 f303 	lsl.w	r3, r2, r3
 80016c0:	69ba      	ldr	r2, [r7, #24]
 80016c2:	4313      	orrs	r3, r2
 80016c4:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 80016c6:	687b      	ldr	r3, [r7, #4]
 80016c8:	69ba      	ldr	r2, [r7, #24]
 80016ca:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 80016cc:	683b      	ldr	r3, [r7, #0]
 80016ce:	685b      	ldr	r3, [r3, #4]
 80016d0:	f003 0303 	and.w	r3, r3, #3
 80016d4:	2b02      	cmp	r3, #2
 80016d6:	d123      	bne.n	8001720 <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 80016d8:	69fb      	ldr	r3, [r7, #28]
 80016da:	08da      	lsrs	r2, r3, #3
 80016dc:	687b      	ldr	r3, [r7, #4]
 80016de:	3208      	adds	r2, #8
 80016e0:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80016e4:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 80016e6:	69fb      	ldr	r3, [r7, #28]
 80016e8:	f003 0307 	and.w	r3, r3, #7
 80016ec:	009b      	lsls	r3, r3, #2
 80016ee:	220f      	movs	r2, #15
 80016f0:	fa02 f303 	lsl.w	r3, r2, r3
 80016f4:	43db      	mvns	r3, r3
 80016f6:	69ba      	ldr	r2, [r7, #24]
 80016f8:	4013      	ands	r3, r2
 80016fa:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 80016fc:	683b      	ldr	r3, [r7, #0]
 80016fe:	691a      	ldr	r2, [r3, #16]
 8001700:	69fb      	ldr	r3, [r7, #28]
 8001702:	f003 0307 	and.w	r3, r3, #7
 8001706:	009b      	lsls	r3, r3, #2
 8001708:	fa02 f303 	lsl.w	r3, r2, r3
 800170c:	69ba      	ldr	r2, [r7, #24]
 800170e:	4313      	orrs	r3, r2
 8001710:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 8001712:	69fb      	ldr	r3, [r7, #28]
 8001714:	08da      	lsrs	r2, r3, #3
 8001716:	687b      	ldr	r3, [r7, #4]
 8001718:	3208      	adds	r2, #8
 800171a:	69b9      	ldr	r1, [r7, #24]
 800171c:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8001720:	687b      	ldr	r3, [r7, #4]
 8001722:	681b      	ldr	r3, [r3, #0]
 8001724:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 8001726:	69fb      	ldr	r3, [r7, #28]
 8001728:	005b      	lsls	r3, r3, #1
 800172a:	2203      	movs	r2, #3
 800172c:	fa02 f303 	lsl.w	r3, r2, r3
 8001730:	43db      	mvns	r3, r3
 8001732:	69ba      	ldr	r2, [r7, #24]
 8001734:	4013      	ands	r3, r2
 8001736:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8001738:	683b      	ldr	r3, [r7, #0]
 800173a:	685b      	ldr	r3, [r3, #4]
 800173c:	f003 0203 	and.w	r2, r3, #3
 8001740:	69fb      	ldr	r3, [r7, #28]
 8001742:	005b      	lsls	r3, r3, #1
 8001744:	fa02 f303 	lsl.w	r3, r2, r3
 8001748:	69ba      	ldr	r2, [r7, #24]
 800174a:	4313      	orrs	r3, r2
 800174c:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 800174e:	687b      	ldr	r3, [r7, #4]
 8001750:	69ba      	ldr	r2, [r7, #24]
 8001752:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 8001754:	683b      	ldr	r3, [r7, #0]
 8001756:	685b      	ldr	r3, [r3, #4]
 8001758:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 800175c:	2b00      	cmp	r3, #0
 800175e:	f000 80c0 	beq.w	80018e2 <HAL_GPIO_Init+0x306>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001762:	2300      	movs	r3, #0
 8001764:	60fb      	str	r3, [r7, #12]
 8001766:	4b66      	ldr	r3, [pc, #408]	; (8001900 <HAL_GPIO_Init+0x324>)
 8001768:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800176a:	4a65      	ldr	r2, [pc, #404]	; (8001900 <HAL_GPIO_Init+0x324>)
 800176c:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8001770:	6453      	str	r3, [r2, #68]	; 0x44
 8001772:	4b63      	ldr	r3, [pc, #396]	; (8001900 <HAL_GPIO_Init+0x324>)
 8001774:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001776:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800177a:	60fb      	str	r3, [r7, #12]
 800177c:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 800177e:	4a61      	ldr	r2, [pc, #388]	; (8001904 <HAL_GPIO_Init+0x328>)
 8001780:	69fb      	ldr	r3, [r7, #28]
 8001782:	089b      	lsrs	r3, r3, #2
 8001784:	3302      	adds	r3, #2
 8001786:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800178a:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 800178c:	69fb      	ldr	r3, [r7, #28]
 800178e:	f003 0303 	and.w	r3, r3, #3
 8001792:	009b      	lsls	r3, r3, #2
 8001794:	220f      	movs	r2, #15
 8001796:	fa02 f303 	lsl.w	r3, r2, r3
 800179a:	43db      	mvns	r3, r3
 800179c:	69ba      	ldr	r2, [r7, #24]
 800179e:	4013      	ands	r3, r2
 80017a0:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 80017a2:	687b      	ldr	r3, [r7, #4]
 80017a4:	4a58      	ldr	r2, [pc, #352]	; (8001908 <HAL_GPIO_Init+0x32c>)
 80017a6:	4293      	cmp	r3, r2
 80017a8:	d037      	beq.n	800181a <HAL_GPIO_Init+0x23e>
 80017aa:	687b      	ldr	r3, [r7, #4]
 80017ac:	4a57      	ldr	r2, [pc, #348]	; (800190c <HAL_GPIO_Init+0x330>)
 80017ae:	4293      	cmp	r3, r2
 80017b0:	d031      	beq.n	8001816 <HAL_GPIO_Init+0x23a>
 80017b2:	687b      	ldr	r3, [r7, #4]
 80017b4:	4a56      	ldr	r2, [pc, #344]	; (8001910 <HAL_GPIO_Init+0x334>)
 80017b6:	4293      	cmp	r3, r2
 80017b8:	d02b      	beq.n	8001812 <HAL_GPIO_Init+0x236>
 80017ba:	687b      	ldr	r3, [r7, #4]
 80017bc:	4a55      	ldr	r2, [pc, #340]	; (8001914 <HAL_GPIO_Init+0x338>)
 80017be:	4293      	cmp	r3, r2
 80017c0:	d025      	beq.n	800180e <HAL_GPIO_Init+0x232>
 80017c2:	687b      	ldr	r3, [r7, #4]
 80017c4:	4a54      	ldr	r2, [pc, #336]	; (8001918 <HAL_GPIO_Init+0x33c>)
 80017c6:	4293      	cmp	r3, r2
 80017c8:	d01f      	beq.n	800180a <HAL_GPIO_Init+0x22e>
 80017ca:	687b      	ldr	r3, [r7, #4]
 80017cc:	4a53      	ldr	r2, [pc, #332]	; (800191c <HAL_GPIO_Init+0x340>)
 80017ce:	4293      	cmp	r3, r2
 80017d0:	d019      	beq.n	8001806 <HAL_GPIO_Init+0x22a>
 80017d2:	687b      	ldr	r3, [r7, #4]
 80017d4:	4a52      	ldr	r2, [pc, #328]	; (8001920 <HAL_GPIO_Init+0x344>)
 80017d6:	4293      	cmp	r3, r2
 80017d8:	d013      	beq.n	8001802 <HAL_GPIO_Init+0x226>
 80017da:	687b      	ldr	r3, [r7, #4]
 80017dc:	4a51      	ldr	r2, [pc, #324]	; (8001924 <HAL_GPIO_Init+0x348>)
 80017de:	4293      	cmp	r3, r2
 80017e0:	d00d      	beq.n	80017fe <HAL_GPIO_Init+0x222>
 80017e2:	687b      	ldr	r3, [r7, #4]
 80017e4:	4a50      	ldr	r2, [pc, #320]	; (8001928 <HAL_GPIO_Init+0x34c>)
 80017e6:	4293      	cmp	r3, r2
 80017e8:	d007      	beq.n	80017fa <HAL_GPIO_Init+0x21e>
 80017ea:	687b      	ldr	r3, [r7, #4]
 80017ec:	4a4f      	ldr	r2, [pc, #316]	; (800192c <HAL_GPIO_Init+0x350>)
 80017ee:	4293      	cmp	r3, r2
 80017f0:	d101      	bne.n	80017f6 <HAL_GPIO_Init+0x21a>
 80017f2:	2309      	movs	r3, #9
 80017f4:	e012      	b.n	800181c <HAL_GPIO_Init+0x240>
 80017f6:	230a      	movs	r3, #10
 80017f8:	e010      	b.n	800181c <HAL_GPIO_Init+0x240>
 80017fa:	2308      	movs	r3, #8
 80017fc:	e00e      	b.n	800181c <HAL_GPIO_Init+0x240>
 80017fe:	2307      	movs	r3, #7
 8001800:	e00c      	b.n	800181c <HAL_GPIO_Init+0x240>
 8001802:	2306      	movs	r3, #6
 8001804:	e00a      	b.n	800181c <HAL_GPIO_Init+0x240>
 8001806:	2305      	movs	r3, #5
 8001808:	e008      	b.n	800181c <HAL_GPIO_Init+0x240>
 800180a:	2304      	movs	r3, #4
 800180c:	e006      	b.n	800181c <HAL_GPIO_Init+0x240>
 800180e:	2303      	movs	r3, #3
 8001810:	e004      	b.n	800181c <HAL_GPIO_Init+0x240>
 8001812:	2302      	movs	r3, #2
 8001814:	e002      	b.n	800181c <HAL_GPIO_Init+0x240>
 8001816:	2301      	movs	r3, #1
 8001818:	e000      	b.n	800181c <HAL_GPIO_Init+0x240>
 800181a:	2300      	movs	r3, #0
 800181c:	69fa      	ldr	r2, [r7, #28]
 800181e:	f002 0203 	and.w	r2, r2, #3
 8001822:	0092      	lsls	r2, r2, #2
 8001824:	4093      	lsls	r3, r2
 8001826:	69ba      	ldr	r2, [r7, #24]
 8001828:	4313      	orrs	r3, r2
 800182a:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 800182c:	4935      	ldr	r1, [pc, #212]	; (8001904 <HAL_GPIO_Init+0x328>)
 800182e:	69fb      	ldr	r3, [r7, #28]
 8001830:	089b      	lsrs	r3, r3, #2
 8001832:	3302      	adds	r3, #2
 8001834:	69ba      	ldr	r2, [r7, #24]
 8001836:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 800183a:	4b3d      	ldr	r3, [pc, #244]	; (8001930 <HAL_GPIO_Init+0x354>)
 800183c:	689b      	ldr	r3, [r3, #8]
 800183e:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001840:	693b      	ldr	r3, [r7, #16]
 8001842:	43db      	mvns	r3, r3
 8001844:	69ba      	ldr	r2, [r7, #24]
 8001846:	4013      	ands	r3, r2
 8001848:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 800184a:	683b      	ldr	r3, [r7, #0]
 800184c:	685b      	ldr	r3, [r3, #4]
 800184e:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8001852:	2b00      	cmp	r3, #0
 8001854:	d003      	beq.n	800185e <HAL_GPIO_Init+0x282>
        {
          temp |= iocurrent;
 8001856:	69ba      	ldr	r2, [r7, #24]
 8001858:	693b      	ldr	r3, [r7, #16]
 800185a:	4313      	orrs	r3, r2
 800185c:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 800185e:	4a34      	ldr	r2, [pc, #208]	; (8001930 <HAL_GPIO_Init+0x354>)
 8001860:	69bb      	ldr	r3, [r7, #24]
 8001862:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8001864:	4b32      	ldr	r3, [pc, #200]	; (8001930 <HAL_GPIO_Init+0x354>)
 8001866:	68db      	ldr	r3, [r3, #12]
 8001868:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 800186a:	693b      	ldr	r3, [r7, #16]
 800186c:	43db      	mvns	r3, r3
 800186e:	69ba      	ldr	r2, [r7, #24]
 8001870:	4013      	ands	r3, r2
 8001872:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 8001874:	683b      	ldr	r3, [r7, #0]
 8001876:	685b      	ldr	r3, [r3, #4]
 8001878:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 800187c:	2b00      	cmp	r3, #0
 800187e:	d003      	beq.n	8001888 <HAL_GPIO_Init+0x2ac>
        {
          temp |= iocurrent;
 8001880:	69ba      	ldr	r2, [r7, #24]
 8001882:	693b      	ldr	r3, [r7, #16]
 8001884:	4313      	orrs	r3, r2
 8001886:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 8001888:	4a29      	ldr	r2, [pc, #164]	; (8001930 <HAL_GPIO_Init+0x354>)
 800188a:	69bb      	ldr	r3, [r7, #24]
 800188c:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 800188e:	4b28      	ldr	r3, [pc, #160]	; (8001930 <HAL_GPIO_Init+0x354>)
 8001890:	685b      	ldr	r3, [r3, #4]
 8001892:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001894:	693b      	ldr	r3, [r7, #16]
 8001896:	43db      	mvns	r3, r3
 8001898:	69ba      	ldr	r2, [r7, #24]
 800189a:	4013      	ands	r3, r2
 800189c:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 800189e:	683b      	ldr	r3, [r7, #0]
 80018a0:	685b      	ldr	r3, [r3, #4]
 80018a2:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80018a6:	2b00      	cmp	r3, #0
 80018a8:	d003      	beq.n	80018b2 <HAL_GPIO_Init+0x2d6>
        {
          temp |= iocurrent;
 80018aa:	69ba      	ldr	r2, [r7, #24]
 80018ac:	693b      	ldr	r3, [r7, #16]
 80018ae:	4313      	orrs	r3, r2
 80018b0:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 80018b2:	4a1f      	ldr	r2, [pc, #124]	; (8001930 <HAL_GPIO_Init+0x354>)
 80018b4:	69bb      	ldr	r3, [r7, #24]
 80018b6:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 80018b8:	4b1d      	ldr	r3, [pc, #116]	; (8001930 <HAL_GPIO_Init+0x354>)
 80018ba:	681b      	ldr	r3, [r3, #0]
 80018bc:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80018be:	693b      	ldr	r3, [r7, #16]
 80018c0:	43db      	mvns	r3, r3
 80018c2:	69ba      	ldr	r2, [r7, #24]
 80018c4:	4013      	ands	r3, r2
 80018c6:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 80018c8:	683b      	ldr	r3, [r7, #0]
 80018ca:	685b      	ldr	r3, [r3, #4]
 80018cc:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80018d0:	2b00      	cmp	r3, #0
 80018d2:	d003      	beq.n	80018dc <HAL_GPIO_Init+0x300>
        {
          temp |= iocurrent;
 80018d4:	69ba      	ldr	r2, [r7, #24]
 80018d6:	693b      	ldr	r3, [r7, #16]
 80018d8:	4313      	orrs	r3, r2
 80018da:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 80018dc:	4a14      	ldr	r2, [pc, #80]	; (8001930 <HAL_GPIO_Init+0x354>)
 80018de:	69bb      	ldr	r3, [r7, #24]
 80018e0:	6013      	str	r3, [r2, #0]
  for(position = 0U; position < GPIO_NUMBER; position++)
 80018e2:	69fb      	ldr	r3, [r7, #28]
 80018e4:	3301      	adds	r3, #1
 80018e6:	61fb      	str	r3, [r7, #28]
 80018e8:	69fb      	ldr	r3, [r7, #28]
 80018ea:	2b0f      	cmp	r3, #15
 80018ec:	f67f ae84 	bls.w	80015f8 <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 80018f0:	bf00      	nop
 80018f2:	bf00      	nop
 80018f4:	3724      	adds	r7, #36	; 0x24
 80018f6:	46bd      	mov	sp, r7
 80018f8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80018fc:	4770      	bx	lr
 80018fe:	bf00      	nop
 8001900:	40023800 	.word	0x40023800
 8001904:	40013800 	.word	0x40013800
 8001908:	40020000 	.word	0x40020000
 800190c:	40020400 	.word	0x40020400
 8001910:	40020800 	.word	0x40020800
 8001914:	40020c00 	.word	0x40020c00
 8001918:	40021000 	.word	0x40021000
 800191c:	40021400 	.word	0x40021400
 8001920:	40021800 	.word	0x40021800
 8001924:	40021c00 	.word	0x40021c00
 8001928:	40022000 	.word	0x40022000
 800192c:	40022400 	.word	0x40022400
 8001930:	40013c00 	.word	0x40013c00

08001934 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8001934:	b480      	push	{r7}
 8001936:	b083      	sub	sp, #12
 8001938:	af00      	add	r7, sp, #0
 800193a:	6078      	str	r0, [r7, #4]
 800193c:	460b      	mov	r3, r1
 800193e:	807b      	strh	r3, [r7, #2]
 8001940:	4613      	mov	r3, r2
 8001942:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8001944:	787b      	ldrb	r3, [r7, #1]
 8001946:	2b00      	cmp	r3, #0
 8001948:	d003      	beq.n	8001952 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 800194a:	887a      	ldrh	r2, [r7, #2]
 800194c:	687b      	ldr	r3, [r7, #4]
 800194e:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 8001950:	e003      	b.n	800195a <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 8001952:	887b      	ldrh	r3, [r7, #2]
 8001954:	041a      	lsls	r2, r3, #16
 8001956:	687b      	ldr	r3, [r7, #4]
 8001958:	619a      	str	r2, [r3, #24]
}
 800195a:	bf00      	nop
 800195c:	370c      	adds	r7, #12
 800195e:	46bd      	mov	sp, r7
 8001960:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001964:	4770      	bx	lr
	...

08001968 <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8001968:	b580      	push	{r7, lr}
 800196a:	b086      	sub	sp, #24
 800196c:	af00      	add	r7, sp, #0
 800196e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8001970:	687b      	ldr	r3, [r7, #4]
 8001972:	2b00      	cmp	r3, #0
 8001974:	d101      	bne.n	800197a <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8001976:	2301      	movs	r3, #1
 8001978:	e267      	b.n	8001e4a <HAL_RCC_OscConfig+0x4e2>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 800197a:	687b      	ldr	r3, [r7, #4]
 800197c:	681b      	ldr	r3, [r3, #0]
 800197e:	f003 0301 	and.w	r3, r3, #1
 8001982:	2b00      	cmp	r3, #0
 8001984:	d075      	beq.n	8001a72 <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 8001986:	4b88      	ldr	r3, [pc, #544]	; (8001ba8 <HAL_RCC_OscConfig+0x240>)
 8001988:	689b      	ldr	r3, [r3, #8]
 800198a:	f003 030c 	and.w	r3, r3, #12
 800198e:	2b04      	cmp	r3, #4
 8001990:	d00c      	beq.n	80019ac <HAL_RCC_OscConfig+0x44>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8001992:	4b85      	ldr	r3, [pc, #532]	; (8001ba8 <HAL_RCC_OscConfig+0x240>)
 8001994:	689b      	ldr	r3, [r3, #8]
 8001996:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 800199a:	2b08      	cmp	r3, #8
 800199c:	d112      	bne.n	80019c4 <HAL_RCC_OscConfig+0x5c>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 800199e:	4b82      	ldr	r3, [pc, #520]	; (8001ba8 <HAL_RCC_OscConfig+0x240>)
 80019a0:	685b      	ldr	r3, [r3, #4]
 80019a2:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80019a6:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 80019aa:	d10b      	bne.n	80019c4 <HAL_RCC_OscConfig+0x5c>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80019ac:	4b7e      	ldr	r3, [pc, #504]	; (8001ba8 <HAL_RCC_OscConfig+0x240>)
 80019ae:	681b      	ldr	r3, [r3, #0]
 80019b0:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80019b4:	2b00      	cmp	r3, #0
 80019b6:	d05b      	beq.n	8001a70 <HAL_RCC_OscConfig+0x108>
 80019b8:	687b      	ldr	r3, [r7, #4]
 80019ba:	685b      	ldr	r3, [r3, #4]
 80019bc:	2b00      	cmp	r3, #0
 80019be:	d157      	bne.n	8001a70 <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 80019c0:	2301      	movs	r3, #1
 80019c2:	e242      	b.n	8001e4a <HAL_RCC_OscConfig+0x4e2>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 80019c4:	687b      	ldr	r3, [r7, #4]
 80019c6:	685b      	ldr	r3, [r3, #4]
 80019c8:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80019cc:	d106      	bne.n	80019dc <HAL_RCC_OscConfig+0x74>
 80019ce:	4b76      	ldr	r3, [pc, #472]	; (8001ba8 <HAL_RCC_OscConfig+0x240>)
 80019d0:	681b      	ldr	r3, [r3, #0]
 80019d2:	4a75      	ldr	r2, [pc, #468]	; (8001ba8 <HAL_RCC_OscConfig+0x240>)
 80019d4:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80019d8:	6013      	str	r3, [r2, #0]
 80019da:	e01d      	b.n	8001a18 <HAL_RCC_OscConfig+0xb0>
 80019dc:	687b      	ldr	r3, [r7, #4]
 80019de:	685b      	ldr	r3, [r3, #4]
 80019e0:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 80019e4:	d10c      	bne.n	8001a00 <HAL_RCC_OscConfig+0x98>
 80019e6:	4b70      	ldr	r3, [pc, #448]	; (8001ba8 <HAL_RCC_OscConfig+0x240>)
 80019e8:	681b      	ldr	r3, [r3, #0]
 80019ea:	4a6f      	ldr	r2, [pc, #444]	; (8001ba8 <HAL_RCC_OscConfig+0x240>)
 80019ec:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 80019f0:	6013      	str	r3, [r2, #0]
 80019f2:	4b6d      	ldr	r3, [pc, #436]	; (8001ba8 <HAL_RCC_OscConfig+0x240>)
 80019f4:	681b      	ldr	r3, [r3, #0]
 80019f6:	4a6c      	ldr	r2, [pc, #432]	; (8001ba8 <HAL_RCC_OscConfig+0x240>)
 80019f8:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80019fc:	6013      	str	r3, [r2, #0]
 80019fe:	e00b      	b.n	8001a18 <HAL_RCC_OscConfig+0xb0>
 8001a00:	4b69      	ldr	r3, [pc, #420]	; (8001ba8 <HAL_RCC_OscConfig+0x240>)
 8001a02:	681b      	ldr	r3, [r3, #0]
 8001a04:	4a68      	ldr	r2, [pc, #416]	; (8001ba8 <HAL_RCC_OscConfig+0x240>)
 8001a06:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8001a0a:	6013      	str	r3, [r2, #0]
 8001a0c:	4b66      	ldr	r3, [pc, #408]	; (8001ba8 <HAL_RCC_OscConfig+0x240>)
 8001a0e:	681b      	ldr	r3, [r3, #0]
 8001a10:	4a65      	ldr	r2, [pc, #404]	; (8001ba8 <HAL_RCC_OscConfig+0x240>)
 8001a12:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8001a16:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 8001a18:	687b      	ldr	r3, [r7, #4]
 8001a1a:	685b      	ldr	r3, [r3, #4]
 8001a1c:	2b00      	cmp	r3, #0
 8001a1e:	d013      	beq.n	8001a48 <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001a20:	f7ff fcea 	bl	80013f8 <HAL_GetTick>
 8001a24:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001a26:	e008      	b.n	8001a3a <HAL_RCC_OscConfig+0xd2>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8001a28:	f7ff fce6 	bl	80013f8 <HAL_GetTick>
 8001a2c:	4602      	mov	r2, r0
 8001a2e:	693b      	ldr	r3, [r7, #16]
 8001a30:	1ad3      	subs	r3, r2, r3
 8001a32:	2b64      	cmp	r3, #100	; 0x64
 8001a34:	d901      	bls.n	8001a3a <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 8001a36:	2303      	movs	r3, #3
 8001a38:	e207      	b.n	8001e4a <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001a3a:	4b5b      	ldr	r3, [pc, #364]	; (8001ba8 <HAL_RCC_OscConfig+0x240>)
 8001a3c:	681b      	ldr	r3, [r3, #0]
 8001a3e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001a42:	2b00      	cmp	r3, #0
 8001a44:	d0f0      	beq.n	8001a28 <HAL_RCC_OscConfig+0xc0>
 8001a46:	e014      	b.n	8001a72 <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001a48:	f7ff fcd6 	bl	80013f8 <HAL_GetTick>
 8001a4c:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8001a4e:	e008      	b.n	8001a62 <HAL_RCC_OscConfig+0xfa>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8001a50:	f7ff fcd2 	bl	80013f8 <HAL_GetTick>
 8001a54:	4602      	mov	r2, r0
 8001a56:	693b      	ldr	r3, [r7, #16]
 8001a58:	1ad3      	subs	r3, r2, r3
 8001a5a:	2b64      	cmp	r3, #100	; 0x64
 8001a5c:	d901      	bls.n	8001a62 <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 8001a5e:	2303      	movs	r3, #3
 8001a60:	e1f3      	b.n	8001e4a <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8001a62:	4b51      	ldr	r3, [pc, #324]	; (8001ba8 <HAL_RCC_OscConfig+0x240>)
 8001a64:	681b      	ldr	r3, [r3, #0]
 8001a66:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001a6a:	2b00      	cmp	r3, #0
 8001a6c:	d1f0      	bne.n	8001a50 <HAL_RCC_OscConfig+0xe8>
 8001a6e:	e000      	b.n	8001a72 <HAL_RCC_OscConfig+0x10a>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001a70:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8001a72:	687b      	ldr	r3, [r7, #4]
 8001a74:	681b      	ldr	r3, [r3, #0]
 8001a76:	f003 0302 	and.w	r3, r3, #2
 8001a7a:	2b00      	cmp	r3, #0
 8001a7c:	d063      	beq.n	8001b46 <HAL_RCC_OscConfig+0x1de>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 8001a7e:	4b4a      	ldr	r3, [pc, #296]	; (8001ba8 <HAL_RCC_OscConfig+0x240>)
 8001a80:	689b      	ldr	r3, [r3, #8]
 8001a82:	f003 030c 	and.w	r3, r3, #12
 8001a86:	2b00      	cmp	r3, #0
 8001a88:	d00b      	beq.n	8001aa2 <HAL_RCC_OscConfig+0x13a>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8001a8a:	4b47      	ldr	r3, [pc, #284]	; (8001ba8 <HAL_RCC_OscConfig+0x240>)
 8001a8c:	689b      	ldr	r3, [r3, #8]
 8001a8e:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 8001a92:	2b08      	cmp	r3, #8
 8001a94:	d11c      	bne.n	8001ad0 <HAL_RCC_OscConfig+0x168>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8001a96:	4b44      	ldr	r3, [pc, #272]	; (8001ba8 <HAL_RCC_OscConfig+0x240>)
 8001a98:	685b      	ldr	r3, [r3, #4]
 8001a9a:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8001a9e:	2b00      	cmp	r3, #0
 8001aa0:	d116      	bne.n	8001ad0 <HAL_RCC_OscConfig+0x168>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8001aa2:	4b41      	ldr	r3, [pc, #260]	; (8001ba8 <HAL_RCC_OscConfig+0x240>)
 8001aa4:	681b      	ldr	r3, [r3, #0]
 8001aa6:	f003 0302 	and.w	r3, r3, #2
 8001aaa:	2b00      	cmp	r3, #0
 8001aac:	d005      	beq.n	8001aba <HAL_RCC_OscConfig+0x152>
 8001aae:	687b      	ldr	r3, [r7, #4]
 8001ab0:	68db      	ldr	r3, [r3, #12]
 8001ab2:	2b01      	cmp	r3, #1
 8001ab4:	d001      	beq.n	8001aba <HAL_RCC_OscConfig+0x152>
      {
        return HAL_ERROR;
 8001ab6:	2301      	movs	r3, #1
 8001ab8:	e1c7      	b.n	8001e4a <HAL_RCC_OscConfig+0x4e2>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001aba:	4b3b      	ldr	r3, [pc, #236]	; (8001ba8 <HAL_RCC_OscConfig+0x240>)
 8001abc:	681b      	ldr	r3, [r3, #0]
 8001abe:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8001ac2:	687b      	ldr	r3, [r7, #4]
 8001ac4:	691b      	ldr	r3, [r3, #16]
 8001ac6:	00db      	lsls	r3, r3, #3
 8001ac8:	4937      	ldr	r1, [pc, #220]	; (8001ba8 <HAL_RCC_OscConfig+0x240>)
 8001aca:	4313      	orrs	r3, r2
 8001acc:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8001ace:	e03a      	b.n	8001b46 <HAL_RCC_OscConfig+0x1de>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 8001ad0:	687b      	ldr	r3, [r7, #4]
 8001ad2:	68db      	ldr	r3, [r3, #12]
 8001ad4:	2b00      	cmp	r3, #0
 8001ad6:	d020      	beq.n	8001b1a <HAL_RCC_OscConfig+0x1b2>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8001ad8:	4b34      	ldr	r3, [pc, #208]	; (8001bac <HAL_RCC_OscConfig+0x244>)
 8001ada:	2201      	movs	r2, #1
 8001adc:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001ade:	f7ff fc8b 	bl	80013f8 <HAL_GetTick>
 8001ae2:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001ae4:	e008      	b.n	8001af8 <HAL_RCC_OscConfig+0x190>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8001ae6:	f7ff fc87 	bl	80013f8 <HAL_GetTick>
 8001aea:	4602      	mov	r2, r0
 8001aec:	693b      	ldr	r3, [r7, #16]
 8001aee:	1ad3      	subs	r3, r2, r3
 8001af0:	2b02      	cmp	r3, #2
 8001af2:	d901      	bls.n	8001af8 <HAL_RCC_OscConfig+0x190>
          {
            return HAL_TIMEOUT;
 8001af4:	2303      	movs	r3, #3
 8001af6:	e1a8      	b.n	8001e4a <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001af8:	4b2b      	ldr	r3, [pc, #172]	; (8001ba8 <HAL_RCC_OscConfig+0x240>)
 8001afa:	681b      	ldr	r3, [r3, #0]
 8001afc:	f003 0302 	and.w	r3, r3, #2
 8001b00:	2b00      	cmp	r3, #0
 8001b02:	d0f0      	beq.n	8001ae6 <HAL_RCC_OscConfig+0x17e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001b04:	4b28      	ldr	r3, [pc, #160]	; (8001ba8 <HAL_RCC_OscConfig+0x240>)
 8001b06:	681b      	ldr	r3, [r3, #0]
 8001b08:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8001b0c:	687b      	ldr	r3, [r7, #4]
 8001b0e:	691b      	ldr	r3, [r3, #16]
 8001b10:	00db      	lsls	r3, r3, #3
 8001b12:	4925      	ldr	r1, [pc, #148]	; (8001ba8 <HAL_RCC_OscConfig+0x240>)
 8001b14:	4313      	orrs	r3, r2
 8001b16:	600b      	str	r3, [r1, #0]
 8001b18:	e015      	b.n	8001b46 <HAL_RCC_OscConfig+0x1de>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8001b1a:	4b24      	ldr	r3, [pc, #144]	; (8001bac <HAL_RCC_OscConfig+0x244>)
 8001b1c:	2200      	movs	r2, #0
 8001b1e:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001b20:	f7ff fc6a 	bl	80013f8 <HAL_GetTick>
 8001b24:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8001b26:	e008      	b.n	8001b3a <HAL_RCC_OscConfig+0x1d2>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8001b28:	f7ff fc66 	bl	80013f8 <HAL_GetTick>
 8001b2c:	4602      	mov	r2, r0
 8001b2e:	693b      	ldr	r3, [r7, #16]
 8001b30:	1ad3      	subs	r3, r2, r3
 8001b32:	2b02      	cmp	r3, #2
 8001b34:	d901      	bls.n	8001b3a <HAL_RCC_OscConfig+0x1d2>
          {
            return HAL_TIMEOUT;
 8001b36:	2303      	movs	r3, #3
 8001b38:	e187      	b.n	8001e4a <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8001b3a:	4b1b      	ldr	r3, [pc, #108]	; (8001ba8 <HAL_RCC_OscConfig+0x240>)
 8001b3c:	681b      	ldr	r3, [r3, #0]
 8001b3e:	f003 0302 	and.w	r3, r3, #2
 8001b42:	2b00      	cmp	r3, #0
 8001b44:	d1f0      	bne.n	8001b28 <HAL_RCC_OscConfig+0x1c0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8001b46:	687b      	ldr	r3, [r7, #4]
 8001b48:	681b      	ldr	r3, [r3, #0]
 8001b4a:	f003 0308 	and.w	r3, r3, #8
 8001b4e:	2b00      	cmp	r3, #0
 8001b50:	d036      	beq.n	8001bc0 <HAL_RCC_OscConfig+0x258>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 8001b52:	687b      	ldr	r3, [r7, #4]
 8001b54:	695b      	ldr	r3, [r3, #20]
 8001b56:	2b00      	cmp	r3, #0
 8001b58:	d016      	beq.n	8001b88 <HAL_RCC_OscConfig+0x220>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8001b5a:	4b15      	ldr	r3, [pc, #84]	; (8001bb0 <HAL_RCC_OscConfig+0x248>)
 8001b5c:	2201      	movs	r2, #1
 8001b5e:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001b60:	f7ff fc4a 	bl	80013f8 <HAL_GetTick>
 8001b64:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8001b66:	e008      	b.n	8001b7a <HAL_RCC_OscConfig+0x212>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8001b68:	f7ff fc46 	bl	80013f8 <HAL_GetTick>
 8001b6c:	4602      	mov	r2, r0
 8001b6e:	693b      	ldr	r3, [r7, #16]
 8001b70:	1ad3      	subs	r3, r2, r3
 8001b72:	2b02      	cmp	r3, #2
 8001b74:	d901      	bls.n	8001b7a <HAL_RCC_OscConfig+0x212>
        {
          return HAL_TIMEOUT;
 8001b76:	2303      	movs	r3, #3
 8001b78:	e167      	b.n	8001e4a <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8001b7a:	4b0b      	ldr	r3, [pc, #44]	; (8001ba8 <HAL_RCC_OscConfig+0x240>)
 8001b7c:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8001b7e:	f003 0302 	and.w	r3, r3, #2
 8001b82:	2b00      	cmp	r3, #0
 8001b84:	d0f0      	beq.n	8001b68 <HAL_RCC_OscConfig+0x200>
 8001b86:	e01b      	b.n	8001bc0 <HAL_RCC_OscConfig+0x258>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8001b88:	4b09      	ldr	r3, [pc, #36]	; (8001bb0 <HAL_RCC_OscConfig+0x248>)
 8001b8a:	2200      	movs	r2, #0
 8001b8c:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001b8e:	f7ff fc33 	bl	80013f8 <HAL_GetTick>
 8001b92:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8001b94:	e00e      	b.n	8001bb4 <HAL_RCC_OscConfig+0x24c>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8001b96:	f7ff fc2f 	bl	80013f8 <HAL_GetTick>
 8001b9a:	4602      	mov	r2, r0
 8001b9c:	693b      	ldr	r3, [r7, #16]
 8001b9e:	1ad3      	subs	r3, r2, r3
 8001ba0:	2b02      	cmp	r3, #2
 8001ba2:	d907      	bls.n	8001bb4 <HAL_RCC_OscConfig+0x24c>
        {
          return HAL_TIMEOUT;
 8001ba4:	2303      	movs	r3, #3
 8001ba6:	e150      	b.n	8001e4a <HAL_RCC_OscConfig+0x4e2>
 8001ba8:	40023800 	.word	0x40023800
 8001bac:	42470000 	.word	0x42470000
 8001bb0:	42470e80 	.word	0x42470e80
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8001bb4:	4b88      	ldr	r3, [pc, #544]	; (8001dd8 <HAL_RCC_OscConfig+0x470>)
 8001bb6:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8001bb8:	f003 0302 	and.w	r3, r3, #2
 8001bbc:	2b00      	cmp	r3, #0
 8001bbe:	d1ea      	bne.n	8001b96 <HAL_RCC_OscConfig+0x22e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8001bc0:	687b      	ldr	r3, [r7, #4]
 8001bc2:	681b      	ldr	r3, [r3, #0]
 8001bc4:	f003 0304 	and.w	r3, r3, #4
 8001bc8:	2b00      	cmp	r3, #0
 8001bca:	f000 8097 	beq.w	8001cfc <HAL_RCC_OscConfig+0x394>
  {
    FlagStatus       pwrclkchanged = RESET;
 8001bce:	2300      	movs	r3, #0
 8001bd0:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8001bd2:	4b81      	ldr	r3, [pc, #516]	; (8001dd8 <HAL_RCC_OscConfig+0x470>)
 8001bd4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001bd6:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001bda:	2b00      	cmp	r3, #0
 8001bdc:	d10f      	bne.n	8001bfe <HAL_RCC_OscConfig+0x296>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8001bde:	2300      	movs	r3, #0
 8001be0:	60bb      	str	r3, [r7, #8]
 8001be2:	4b7d      	ldr	r3, [pc, #500]	; (8001dd8 <HAL_RCC_OscConfig+0x470>)
 8001be4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001be6:	4a7c      	ldr	r2, [pc, #496]	; (8001dd8 <HAL_RCC_OscConfig+0x470>)
 8001be8:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001bec:	6413      	str	r3, [r2, #64]	; 0x40
 8001bee:	4b7a      	ldr	r3, [pc, #488]	; (8001dd8 <HAL_RCC_OscConfig+0x470>)
 8001bf0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001bf2:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001bf6:	60bb      	str	r3, [r7, #8]
 8001bf8:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8001bfa:	2301      	movs	r3, #1
 8001bfc:	75fb      	strb	r3, [r7, #23]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001bfe:	4b77      	ldr	r3, [pc, #476]	; (8001ddc <HAL_RCC_OscConfig+0x474>)
 8001c00:	681b      	ldr	r3, [r3, #0]
 8001c02:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001c06:	2b00      	cmp	r3, #0
 8001c08:	d118      	bne.n	8001c3c <HAL_RCC_OscConfig+0x2d4>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8001c0a:	4b74      	ldr	r3, [pc, #464]	; (8001ddc <HAL_RCC_OscConfig+0x474>)
 8001c0c:	681b      	ldr	r3, [r3, #0]
 8001c0e:	4a73      	ldr	r2, [pc, #460]	; (8001ddc <HAL_RCC_OscConfig+0x474>)
 8001c10:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8001c14:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8001c16:	f7ff fbef 	bl	80013f8 <HAL_GetTick>
 8001c1a:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001c1c:	e008      	b.n	8001c30 <HAL_RCC_OscConfig+0x2c8>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8001c1e:	f7ff fbeb 	bl	80013f8 <HAL_GetTick>
 8001c22:	4602      	mov	r2, r0
 8001c24:	693b      	ldr	r3, [r7, #16]
 8001c26:	1ad3      	subs	r3, r2, r3
 8001c28:	2b02      	cmp	r3, #2
 8001c2a:	d901      	bls.n	8001c30 <HAL_RCC_OscConfig+0x2c8>
        {
          return HAL_TIMEOUT;
 8001c2c:	2303      	movs	r3, #3
 8001c2e:	e10c      	b.n	8001e4a <HAL_RCC_OscConfig+0x4e2>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001c30:	4b6a      	ldr	r3, [pc, #424]	; (8001ddc <HAL_RCC_OscConfig+0x474>)
 8001c32:	681b      	ldr	r3, [r3, #0]
 8001c34:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001c38:	2b00      	cmp	r3, #0
 8001c3a:	d0f0      	beq.n	8001c1e <HAL_RCC_OscConfig+0x2b6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8001c3c:	687b      	ldr	r3, [r7, #4]
 8001c3e:	689b      	ldr	r3, [r3, #8]
 8001c40:	2b01      	cmp	r3, #1
 8001c42:	d106      	bne.n	8001c52 <HAL_RCC_OscConfig+0x2ea>
 8001c44:	4b64      	ldr	r3, [pc, #400]	; (8001dd8 <HAL_RCC_OscConfig+0x470>)
 8001c46:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001c48:	4a63      	ldr	r2, [pc, #396]	; (8001dd8 <HAL_RCC_OscConfig+0x470>)
 8001c4a:	f043 0301 	orr.w	r3, r3, #1
 8001c4e:	6713      	str	r3, [r2, #112]	; 0x70
 8001c50:	e01c      	b.n	8001c8c <HAL_RCC_OscConfig+0x324>
 8001c52:	687b      	ldr	r3, [r7, #4]
 8001c54:	689b      	ldr	r3, [r3, #8]
 8001c56:	2b05      	cmp	r3, #5
 8001c58:	d10c      	bne.n	8001c74 <HAL_RCC_OscConfig+0x30c>
 8001c5a:	4b5f      	ldr	r3, [pc, #380]	; (8001dd8 <HAL_RCC_OscConfig+0x470>)
 8001c5c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001c5e:	4a5e      	ldr	r2, [pc, #376]	; (8001dd8 <HAL_RCC_OscConfig+0x470>)
 8001c60:	f043 0304 	orr.w	r3, r3, #4
 8001c64:	6713      	str	r3, [r2, #112]	; 0x70
 8001c66:	4b5c      	ldr	r3, [pc, #368]	; (8001dd8 <HAL_RCC_OscConfig+0x470>)
 8001c68:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001c6a:	4a5b      	ldr	r2, [pc, #364]	; (8001dd8 <HAL_RCC_OscConfig+0x470>)
 8001c6c:	f043 0301 	orr.w	r3, r3, #1
 8001c70:	6713      	str	r3, [r2, #112]	; 0x70
 8001c72:	e00b      	b.n	8001c8c <HAL_RCC_OscConfig+0x324>
 8001c74:	4b58      	ldr	r3, [pc, #352]	; (8001dd8 <HAL_RCC_OscConfig+0x470>)
 8001c76:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001c78:	4a57      	ldr	r2, [pc, #348]	; (8001dd8 <HAL_RCC_OscConfig+0x470>)
 8001c7a:	f023 0301 	bic.w	r3, r3, #1
 8001c7e:	6713      	str	r3, [r2, #112]	; 0x70
 8001c80:	4b55      	ldr	r3, [pc, #340]	; (8001dd8 <HAL_RCC_OscConfig+0x470>)
 8001c82:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001c84:	4a54      	ldr	r2, [pc, #336]	; (8001dd8 <HAL_RCC_OscConfig+0x470>)
 8001c86:	f023 0304 	bic.w	r3, r3, #4
 8001c8a:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8001c8c:	687b      	ldr	r3, [r7, #4]
 8001c8e:	689b      	ldr	r3, [r3, #8]
 8001c90:	2b00      	cmp	r3, #0
 8001c92:	d015      	beq.n	8001cc0 <HAL_RCC_OscConfig+0x358>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001c94:	f7ff fbb0 	bl	80013f8 <HAL_GetTick>
 8001c98:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8001c9a:	e00a      	b.n	8001cb2 <HAL_RCC_OscConfig+0x34a>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8001c9c:	f7ff fbac 	bl	80013f8 <HAL_GetTick>
 8001ca0:	4602      	mov	r2, r0
 8001ca2:	693b      	ldr	r3, [r7, #16]
 8001ca4:	1ad3      	subs	r3, r2, r3
 8001ca6:	f241 3288 	movw	r2, #5000	; 0x1388
 8001caa:	4293      	cmp	r3, r2
 8001cac:	d901      	bls.n	8001cb2 <HAL_RCC_OscConfig+0x34a>
        {
          return HAL_TIMEOUT;
 8001cae:	2303      	movs	r3, #3
 8001cb0:	e0cb      	b.n	8001e4a <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8001cb2:	4b49      	ldr	r3, [pc, #292]	; (8001dd8 <HAL_RCC_OscConfig+0x470>)
 8001cb4:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001cb6:	f003 0302 	and.w	r3, r3, #2
 8001cba:	2b00      	cmp	r3, #0
 8001cbc:	d0ee      	beq.n	8001c9c <HAL_RCC_OscConfig+0x334>
 8001cbe:	e014      	b.n	8001cea <HAL_RCC_OscConfig+0x382>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001cc0:	f7ff fb9a 	bl	80013f8 <HAL_GetTick>
 8001cc4:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8001cc6:	e00a      	b.n	8001cde <HAL_RCC_OscConfig+0x376>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8001cc8:	f7ff fb96 	bl	80013f8 <HAL_GetTick>
 8001ccc:	4602      	mov	r2, r0
 8001cce:	693b      	ldr	r3, [r7, #16]
 8001cd0:	1ad3      	subs	r3, r2, r3
 8001cd2:	f241 3288 	movw	r2, #5000	; 0x1388
 8001cd6:	4293      	cmp	r3, r2
 8001cd8:	d901      	bls.n	8001cde <HAL_RCC_OscConfig+0x376>
        {
          return HAL_TIMEOUT;
 8001cda:	2303      	movs	r3, #3
 8001cdc:	e0b5      	b.n	8001e4a <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8001cde:	4b3e      	ldr	r3, [pc, #248]	; (8001dd8 <HAL_RCC_OscConfig+0x470>)
 8001ce0:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001ce2:	f003 0302 	and.w	r3, r3, #2
 8001ce6:	2b00      	cmp	r3, #0
 8001ce8:	d1ee      	bne.n	8001cc8 <HAL_RCC_OscConfig+0x360>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8001cea:	7dfb      	ldrb	r3, [r7, #23]
 8001cec:	2b01      	cmp	r3, #1
 8001cee:	d105      	bne.n	8001cfc <HAL_RCC_OscConfig+0x394>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8001cf0:	4b39      	ldr	r3, [pc, #228]	; (8001dd8 <HAL_RCC_OscConfig+0x470>)
 8001cf2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001cf4:	4a38      	ldr	r2, [pc, #224]	; (8001dd8 <HAL_RCC_OscConfig+0x470>)
 8001cf6:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8001cfa:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8001cfc:	687b      	ldr	r3, [r7, #4]
 8001cfe:	699b      	ldr	r3, [r3, #24]
 8001d00:	2b00      	cmp	r3, #0
 8001d02:	f000 80a1 	beq.w	8001e48 <HAL_RCC_OscConfig+0x4e0>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 8001d06:	4b34      	ldr	r3, [pc, #208]	; (8001dd8 <HAL_RCC_OscConfig+0x470>)
 8001d08:	689b      	ldr	r3, [r3, #8]
 8001d0a:	f003 030c 	and.w	r3, r3, #12
 8001d0e:	2b08      	cmp	r3, #8
 8001d10:	d05c      	beq.n	8001dcc <HAL_RCC_OscConfig+0x464>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8001d12:	687b      	ldr	r3, [r7, #4]
 8001d14:	699b      	ldr	r3, [r3, #24]
 8001d16:	2b02      	cmp	r3, #2
 8001d18:	d141      	bne.n	8001d9e <HAL_RCC_OscConfig+0x436>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8001d1a:	4b31      	ldr	r3, [pc, #196]	; (8001de0 <HAL_RCC_OscConfig+0x478>)
 8001d1c:	2200      	movs	r2, #0
 8001d1e:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001d20:	f7ff fb6a 	bl	80013f8 <HAL_GetTick>
 8001d24:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8001d26:	e008      	b.n	8001d3a <HAL_RCC_OscConfig+0x3d2>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8001d28:	f7ff fb66 	bl	80013f8 <HAL_GetTick>
 8001d2c:	4602      	mov	r2, r0
 8001d2e:	693b      	ldr	r3, [r7, #16]
 8001d30:	1ad3      	subs	r3, r2, r3
 8001d32:	2b02      	cmp	r3, #2
 8001d34:	d901      	bls.n	8001d3a <HAL_RCC_OscConfig+0x3d2>
          {
            return HAL_TIMEOUT;
 8001d36:	2303      	movs	r3, #3
 8001d38:	e087      	b.n	8001e4a <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8001d3a:	4b27      	ldr	r3, [pc, #156]	; (8001dd8 <HAL_RCC_OscConfig+0x470>)
 8001d3c:	681b      	ldr	r3, [r3, #0]
 8001d3e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001d42:	2b00      	cmp	r3, #0
 8001d44:	d1f0      	bne.n	8001d28 <HAL_RCC_OscConfig+0x3c0>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 8001d46:	687b      	ldr	r3, [r7, #4]
 8001d48:	69da      	ldr	r2, [r3, #28]
 8001d4a:	687b      	ldr	r3, [r7, #4]
 8001d4c:	6a1b      	ldr	r3, [r3, #32]
 8001d4e:	431a      	orrs	r2, r3
 8001d50:	687b      	ldr	r3, [r7, #4]
 8001d52:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001d54:	019b      	lsls	r3, r3, #6
 8001d56:	431a      	orrs	r2, r3
 8001d58:	687b      	ldr	r3, [r7, #4]
 8001d5a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001d5c:	085b      	lsrs	r3, r3, #1
 8001d5e:	3b01      	subs	r3, #1
 8001d60:	041b      	lsls	r3, r3, #16
 8001d62:	431a      	orrs	r2, r3
 8001d64:	687b      	ldr	r3, [r7, #4]
 8001d66:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001d68:	061b      	lsls	r3, r3, #24
 8001d6a:	491b      	ldr	r1, [pc, #108]	; (8001dd8 <HAL_RCC_OscConfig+0x470>)
 8001d6c:	4313      	orrs	r3, r2
 8001d6e:	604b      	str	r3, [r1, #4]
                                 RCC_OscInitStruct->PLL.PLLM                                                 | \
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)             | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos) | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8001d70:	4b1b      	ldr	r3, [pc, #108]	; (8001de0 <HAL_RCC_OscConfig+0x478>)
 8001d72:	2201      	movs	r2, #1
 8001d74:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001d76:	f7ff fb3f 	bl	80013f8 <HAL_GetTick>
 8001d7a:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8001d7c:	e008      	b.n	8001d90 <HAL_RCC_OscConfig+0x428>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8001d7e:	f7ff fb3b 	bl	80013f8 <HAL_GetTick>
 8001d82:	4602      	mov	r2, r0
 8001d84:	693b      	ldr	r3, [r7, #16]
 8001d86:	1ad3      	subs	r3, r2, r3
 8001d88:	2b02      	cmp	r3, #2
 8001d8a:	d901      	bls.n	8001d90 <HAL_RCC_OscConfig+0x428>
          {
            return HAL_TIMEOUT;
 8001d8c:	2303      	movs	r3, #3
 8001d8e:	e05c      	b.n	8001e4a <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8001d90:	4b11      	ldr	r3, [pc, #68]	; (8001dd8 <HAL_RCC_OscConfig+0x470>)
 8001d92:	681b      	ldr	r3, [r3, #0]
 8001d94:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001d98:	2b00      	cmp	r3, #0
 8001d9a:	d0f0      	beq.n	8001d7e <HAL_RCC_OscConfig+0x416>
 8001d9c:	e054      	b.n	8001e48 <HAL_RCC_OscConfig+0x4e0>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8001d9e:	4b10      	ldr	r3, [pc, #64]	; (8001de0 <HAL_RCC_OscConfig+0x478>)
 8001da0:	2200      	movs	r2, #0
 8001da2:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001da4:	f7ff fb28 	bl	80013f8 <HAL_GetTick>
 8001da8:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8001daa:	e008      	b.n	8001dbe <HAL_RCC_OscConfig+0x456>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8001dac:	f7ff fb24 	bl	80013f8 <HAL_GetTick>
 8001db0:	4602      	mov	r2, r0
 8001db2:	693b      	ldr	r3, [r7, #16]
 8001db4:	1ad3      	subs	r3, r2, r3
 8001db6:	2b02      	cmp	r3, #2
 8001db8:	d901      	bls.n	8001dbe <HAL_RCC_OscConfig+0x456>
          {
            return HAL_TIMEOUT;
 8001dba:	2303      	movs	r3, #3
 8001dbc:	e045      	b.n	8001e4a <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8001dbe:	4b06      	ldr	r3, [pc, #24]	; (8001dd8 <HAL_RCC_OscConfig+0x470>)
 8001dc0:	681b      	ldr	r3, [r3, #0]
 8001dc2:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001dc6:	2b00      	cmp	r3, #0
 8001dc8:	d1f0      	bne.n	8001dac <HAL_RCC_OscConfig+0x444>
 8001dca:	e03d      	b.n	8001e48 <HAL_RCC_OscConfig+0x4e0>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8001dcc:	687b      	ldr	r3, [r7, #4]
 8001dce:	699b      	ldr	r3, [r3, #24]
 8001dd0:	2b01      	cmp	r3, #1
 8001dd2:	d107      	bne.n	8001de4 <HAL_RCC_OscConfig+0x47c>
      {
        return HAL_ERROR;
 8001dd4:	2301      	movs	r3, #1
 8001dd6:	e038      	b.n	8001e4a <HAL_RCC_OscConfig+0x4e2>
 8001dd8:	40023800 	.word	0x40023800
 8001ddc:	40007000 	.word	0x40007000
 8001de0:	42470060 	.word	0x42470060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 8001de4:	4b1b      	ldr	r3, [pc, #108]	; (8001e54 <HAL_RCC_OscConfig+0x4ec>)
 8001de6:	685b      	ldr	r3, [r3, #4]
 8001de8:	60fb      	str	r3, [r7, #12]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
#else
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8001dea:	687b      	ldr	r3, [r7, #4]
 8001dec:	699b      	ldr	r3, [r3, #24]
 8001dee:	2b01      	cmp	r3, #1
 8001df0:	d028      	beq.n	8001e44 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8001df2:	68fb      	ldr	r3, [r7, #12]
 8001df4:	f403 0280 	and.w	r2, r3, #4194304	; 0x400000
 8001df8:	687b      	ldr	r3, [r7, #4]
 8001dfa:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8001dfc:	429a      	cmp	r2, r3
 8001dfe:	d121      	bne.n	8001e44 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8001e00:	68fb      	ldr	r3, [r7, #12]
 8001e02:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 8001e06:	687b      	ldr	r3, [r7, #4]
 8001e08:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8001e0a:	429a      	cmp	r2, r3
 8001e0c:	d11a      	bne.n	8001e44 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8001e0e:	68fa      	ldr	r2, [r7, #12]
 8001e10:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 8001e14:	4013      	ands	r3, r2
 8001e16:	687a      	ldr	r2, [r7, #4]
 8001e18:	6a52      	ldr	r2, [r2, #36]	; 0x24
 8001e1a:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8001e1c:	4293      	cmp	r3, r2
 8001e1e:	d111      	bne.n	8001e44 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8001e20:	68fb      	ldr	r3, [r7, #12]
 8001e22:	f403 3240 	and.w	r2, r3, #196608	; 0x30000
 8001e26:	687b      	ldr	r3, [r7, #4]
 8001e28:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001e2a:	085b      	lsrs	r3, r3, #1
 8001e2c:	3b01      	subs	r3, #1
 8001e2e:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8001e30:	429a      	cmp	r2, r3
 8001e32:	d107      	bne.n	8001e44 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
 8001e34:	68fb      	ldr	r3, [r7, #12]
 8001e36:	f003 6270 	and.w	r2, r3, #251658240	; 0xf000000
 8001e3a:	687b      	ldr	r3, [r7, #4]
 8001e3c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001e3e:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8001e40:	429a      	cmp	r2, r3
 8001e42:	d001      	beq.n	8001e48 <HAL_RCC_OscConfig+0x4e0>
#endif
        {
          return HAL_ERROR;
 8001e44:	2301      	movs	r3, #1
 8001e46:	e000      	b.n	8001e4a <HAL_RCC_OscConfig+0x4e2>
        }
      }
    }
  }
  return HAL_OK;
 8001e48:	2300      	movs	r3, #0
}
 8001e4a:	4618      	mov	r0, r3
 8001e4c:	3718      	adds	r7, #24
 8001e4e:	46bd      	mov	sp, r7
 8001e50:	bd80      	pop	{r7, pc}
 8001e52:	bf00      	nop
 8001e54:	40023800 	.word	0x40023800

08001e58 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8001e58:	b580      	push	{r7, lr}
 8001e5a:	b084      	sub	sp, #16
 8001e5c:	af00      	add	r7, sp, #0
 8001e5e:	6078      	str	r0, [r7, #4]
 8001e60:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8001e62:	687b      	ldr	r3, [r7, #4]
 8001e64:	2b00      	cmp	r3, #0
 8001e66:	d101      	bne.n	8001e6c <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8001e68:	2301      	movs	r3, #1
 8001e6a:	e0cc      	b.n	8002006 <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8001e6c:	4b68      	ldr	r3, [pc, #416]	; (8002010 <HAL_RCC_ClockConfig+0x1b8>)
 8001e6e:	681b      	ldr	r3, [r3, #0]
 8001e70:	f003 030f 	and.w	r3, r3, #15
 8001e74:	683a      	ldr	r2, [r7, #0]
 8001e76:	429a      	cmp	r2, r3
 8001e78:	d90c      	bls.n	8001e94 <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8001e7a:	4b65      	ldr	r3, [pc, #404]	; (8002010 <HAL_RCC_ClockConfig+0x1b8>)
 8001e7c:	683a      	ldr	r2, [r7, #0]
 8001e7e:	b2d2      	uxtb	r2, r2
 8001e80:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8001e82:	4b63      	ldr	r3, [pc, #396]	; (8002010 <HAL_RCC_ClockConfig+0x1b8>)
 8001e84:	681b      	ldr	r3, [r3, #0]
 8001e86:	f003 030f 	and.w	r3, r3, #15
 8001e8a:	683a      	ldr	r2, [r7, #0]
 8001e8c:	429a      	cmp	r2, r3
 8001e8e:	d001      	beq.n	8001e94 <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 8001e90:	2301      	movs	r3, #1
 8001e92:	e0b8      	b.n	8002006 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8001e94:	687b      	ldr	r3, [r7, #4]
 8001e96:	681b      	ldr	r3, [r3, #0]
 8001e98:	f003 0302 	and.w	r3, r3, #2
 8001e9c:	2b00      	cmp	r3, #0
 8001e9e:	d020      	beq.n	8001ee2 <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8001ea0:	687b      	ldr	r3, [r7, #4]
 8001ea2:	681b      	ldr	r3, [r3, #0]
 8001ea4:	f003 0304 	and.w	r3, r3, #4
 8001ea8:	2b00      	cmp	r3, #0
 8001eaa:	d005      	beq.n	8001eb8 <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8001eac:	4b59      	ldr	r3, [pc, #356]	; (8002014 <HAL_RCC_ClockConfig+0x1bc>)
 8001eae:	689b      	ldr	r3, [r3, #8]
 8001eb0:	4a58      	ldr	r2, [pc, #352]	; (8002014 <HAL_RCC_ClockConfig+0x1bc>)
 8001eb2:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 8001eb6:	6093      	str	r3, [r2, #8]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8001eb8:	687b      	ldr	r3, [r7, #4]
 8001eba:	681b      	ldr	r3, [r3, #0]
 8001ebc:	f003 0308 	and.w	r3, r3, #8
 8001ec0:	2b00      	cmp	r3, #0
 8001ec2:	d005      	beq.n	8001ed0 <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8001ec4:	4b53      	ldr	r3, [pc, #332]	; (8002014 <HAL_RCC_ClockConfig+0x1bc>)
 8001ec6:	689b      	ldr	r3, [r3, #8]
 8001ec8:	4a52      	ldr	r2, [pc, #328]	; (8002014 <HAL_RCC_ClockConfig+0x1bc>)
 8001eca:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 8001ece:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8001ed0:	4b50      	ldr	r3, [pc, #320]	; (8002014 <HAL_RCC_ClockConfig+0x1bc>)
 8001ed2:	689b      	ldr	r3, [r3, #8]
 8001ed4:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8001ed8:	687b      	ldr	r3, [r7, #4]
 8001eda:	689b      	ldr	r3, [r3, #8]
 8001edc:	494d      	ldr	r1, [pc, #308]	; (8002014 <HAL_RCC_ClockConfig+0x1bc>)
 8001ede:	4313      	orrs	r3, r2
 8001ee0:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8001ee2:	687b      	ldr	r3, [r7, #4]
 8001ee4:	681b      	ldr	r3, [r3, #0]
 8001ee6:	f003 0301 	and.w	r3, r3, #1
 8001eea:	2b00      	cmp	r3, #0
 8001eec:	d044      	beq.n	8001f78 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8001eee:	687b      	ldr	r3, [r7, #4]
 8001ef0:	685b      	ldr	r3, [r3, #4]
 8001ef2:	2b01      	cmp	r3, #1
 8001ef4:	d107      	bne.n	8001f06 <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001ef6:	4b47      	ldr	r3, [pc, #284]	; (8002014 <HAL_RCC_ClockConfig+0x1bc>)
 8001ef8:	681b      	ldr	r3, [r3, #0]
 8001efa:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001efe:	2b00      	cmp	r3, #0
 8001f00:	d119      	bne.n	8001f36 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8001f02:	2301      	movs	r3, #1
 8001f04:	e07f      	b.n	8002006 <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8001f06:	687b      	ldr	r3, [r7, #4]
 8001f08:	685b      	ldr	r3, [r3, #4]
 8001f0a:	2b02      	cmp	r3, #2
 8001f0c:	d003      	beq.n	8001f16 <HAL_RCC_ClockConfig+0xbe>
            (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 8001f0e:	687b      	ldr	r3, [r7, #4]
 8001f10:	685b      	ldr	r3, [r3, #4]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8001f12:	2b03      	cmp	r3, #3
 8001f14:	d107      	bne.n	8001f26 <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8001f16:	4b3f      	ldr	r3, [pc, #252]	; (8002014 <HAL_RCC_ClockConfig+0x1bc>)
 8001f18:	681b      	ldr	r3, [r3, #0]
 8001f1a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001f1e:	2b00      	cmp	r3, #0
 8001f20:	d109      	bne.n	8001f36 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8001f22:	2301      	movs	r3, #1
 8001f24:	e06f      	b.n	8002006 <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001f26:	4b3b      	ldr	r3, [pc, #236]	; (8002014 <HAL_RCC_ClockConfig+0x1bc>)
 8001f28:	681b      	ldr	r3, [r3, #0]
 8001f2a:	f003 0302 	and.w	r3, r3, #2
 8001f2e:	2b00      	cmp	r3, #0
 8001f30:	d101      	bne.n	8001f36 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8001f32:	2301      	movs	r3, #1
 8001f34:	e067      	b.n	8002006 <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8001f36:	4b37      	ldr	r3, [pc, #220]	; (8002014 <HAL_RCC_ClockConfig+0x1bc>)
 8001f38:	689b      	ldr	r3, [r3, #8]
 8001f3a:	f023 0203 	bic.w	r2, r3, #3
 8001f3e:	687b      	ldr	r3, [r7, #4]
 8001f40:	685b      	ldr	r3, [r3, #4]
 8001f42:	4934      	ldr	r1, [pc, #208]	; (8002014 <HAL_RCC_ClockConfig+0x1bc>)
 8001f44:	4313      	orrs	r3, r2
 8001f46:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8001f48:	f7ff fa56 	bl	80013f8 <HAL_GetTick>
 8001f4c:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8001f4e:	e00a      	b.n	8001f66 <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8001f50:	f7ff fa52 	bl	80013f8 <HAL_GetTick>
 8001f54:	4602      	mov	r2, r0
 8001f56:	68fb      	ldr	r3, [r7, #12]
 8001f58:	1ad3      	subs	r3, r2, r3
 8001f5a:	f241 3288 	movw	r2, #5000	; 0x1388
 8001f5e:	4293      	cmp	r3, r2
 8001f60:	d901      	bls.n	8001f66 <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 8001f62:	2303      	movs	r3, #3
 8001f64:	e04f      	b.n	8002006 <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8001f66:	4b2b      	ldr	r3, [pc, #172]	; (8002014 <HAL_RCC_ClockConfig+0x1bc>)
 8001f68:	689b      	ldr	r3, [r3, #8]
 8001f6a:	f003 020c 	and.w	r2, r3, #12
 8001f6e:	687b      	ldr	r3, [r7, #4]
 8001f70:	685b      	ldr	r3, [r3, #4]
 8001f72:	009b      	lsls	r3, r3, #2
 8001f74:	429a      	cmp	r2, r3
 8001f76:	d1eb      	bne.n	8001f50 <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8001f78:	4b25      	ldr	r3, [pc, #148]	; (8002010 <HAL_RCC_ClockConfig+0x1b8>)
 8001f7a:	681b      	ldr	r3, [r3, #0]
 8001f7c:	f003 030f 	and.w	r3, r3, #15
 8001f80:	683a      	ldr	r2, [r7, #0]
 8001f82:	429a      	cmp	r2, r3
 8001f84:	d20c      	bcs.n	8001fa0 <HAL_RCC_ClockConfig+0x148>
  {
     /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8001f86:	4b22      	ldr	r3, [pc, #136]	; (8002010 <HAL_RCC_ClockConfig+0x1b8>)
 8001f88:	683a      	ldr	r2, [r7, #0]
 8001f8a:	b2d2      	uxtb	r2, r2
 8001f8c:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8001f8e:	4b20      	ldr	r3, [pc, #128]	; (8002010 <HAL_RCC_ClockConfig+0x1b8>)
 8001f90:	681b      	ldr	r3, [r3, #0]
 8001f92:	f003 030f 	and.w	r3, r3, #15
 8001f96:	683a      	ldr	r2, [r7, #0]
 8001f98:	429a      	cmp	r2, r3
 8001f9a:	d001      	beq.n	8001fa0 <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 8001f9c:	2301      	movs	r3, #1
 8001f9e:	e032      	b.n	8002006 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8001fa0:	687b      	ldr	r3, [r7, #4]
 8001fa2:	681b      	ldr	r3, [r3, #0]
 8001fa4:	f003 0304 	and.w	r3, r3, #4
 8001fa8:	2b00      	cmp	r3, #0
 8001faa:	d008      	beq.n	8001fbe <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8001fac:	4b19      	ldr	r3, [pc, #100]	; (8002014 <HAL_RCC_ClockConfig+0x1bc>)
 8001fae:	689b      	ldr	r3, [r3, #8]
 8001fb0:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 8001fb4:	687b      	ldr	r3, [r7, #4]
 8001fb6:	68db      	ldr	r3, [r3, #12]
 8001fb8:	4916      	ldr	r1, [pc, #88]	; (8002014 <HAL_RCC_ClockConfig+0x1bc>)
 8001fba:	4313      	orrs	r3, r2
 8001fbc:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8001fbe:	687b      	ldr	r3, [r7, #4]
 8001fc0:	681b      	ldr	r3, [r3, #0]
 8001fc2:	f003 0308 	and.w	r3, r3, #8
 8001fc6:	2b00      	cmp	r3, #0
 8001fc8:	d009      	beq.n	8001fde <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8001fca:	4b12      	ldr	r3, [pc, #72]	; (8002014 <HAL_RCC_ClockConfig+0x1bc>)
 8001fcc:	689b      	ldr	r3, [r3, #8]
 8001fce:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 8001fd2:	687b      	ldr	r3, [r7, #4]
 8001fd4:	691b      	ldr	r3, [r3, #16]
 8001fd6:	00db      	lsls	r3, r3, #3
 8001fd8:	490e      	ldr	r1, [pc, #56]	; (8002014 <HAL_RCC_ClockConfig+0x1bc>)
 8001fda:	4313      	orrs	r3, r2
 8001fdc:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 8001fde:	f000 f821 	bl	8002024 <HAL_RCC_GetSysClockFreq>
 8001fe2:	4602      	mov	r2, r0
 8001fe4:	4b0b      	ldr	r3, [pc, #44]	; (8002014 <HAL_RCC_ClockConfig+0x1bc>)
 8001fe6:	689b      	ldr	r3, [r3, #8]
 8001fe8:	091b      	lsrs	r3, r3, #4
 8001fea:	f003 030f 	and.w	r3, r3, #15
 8001fee:	490a      	ldr	r1, [pc, #40]	; (8002018 <HAL_RCC_ClockConfig+0x1c0>)
 8001ff0:	5ccb      	ldrb	r3, [r1, r3]
 8001ff2:	fa22 f303 	lsr.w	r3, r2, r3
 8001ff6:	4a09      	ldr	r2, [pc, #36]	; (800201c <HAL_RCC_ClockConfig+0x1c4>)
 8001ff8:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick (uwTickPrio);
 8001ffa:	4b09      	ldr	r3, [pc, #36]	; (8002020 <HAL_RCC_ClockConfig+0x1c8>)
 8001ffc:	681b      	ldr	r3, [r3, #0]
 8001ffe:	4618      	mov	r0, r3
 8002000:	f7ff f9ca 	bl	8001398 <HAL_InitTick>

  return HAL_OK;
 8002004:	2300      	movs	r3, #0
}
 8002006:	4618      	mov	r0, r3
 8002008:	3710      	adds	r7, #16
 800200a:	46bd      	mov	sp, r7
 800200c:	bd80      	pop	{r7, pc}
 800200e:	bf00      	nop
 8002010:	40023c00 	.word	0x40023c00
 8002014:	40023800 	.word	0x40023800
 8002018:	080063e4 	.word	0x080063e4
 800201c:	20000000 	.word	0x20000000
 8002020:	20000004 	.word	0x20000004

08002024 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8002024:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8002028:	b094      	sub	sp, #80	; 0x50
 800202a:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U, pllvco = 0U, pllp = 0U;
 800202c:	2300      	movs	r3, #0
 800202e:	647b      	str	r3, [r7, #68]	; 0x44
 8002030:	2300      	movs	r3, #0
 8002032:	64fb      	str	r3, [r7, #76]	; 0x4c
 8002034:	2300      	movs	r3, #0
 8002036:	643b      	str	r3, [r7, #64]	; 0x40
  uint32_t sysclockfreq = 0U;
 8002038:	2300      	movs	r3, #0
 800203a:	64bb      	str	r3, [r7, #72]	; 0x48

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 800203c:	4b79      	ldr	r3, [pc, #484]	; (8002224 <HAL_RCC_GetSysClockFreq+0x200>)
 800203e:	689b      	ldr	r3, [r3, #8]
 8002040:	f003 030c 	and.w	r3, r3, #12
 8002044:	2b08      	cmp	r3, #8
 8002046:	d00d      	beq.n	8002064 <HAL_RCC_GetSysClockFreq+0x40>
 8002048:	2b08      	cmp	r3, #8
 800204a:	f200 80e1 	bhi.w	8002210 <HAL_RCC_GetSysClockFreq+0x1ec>
 800204e:	2b00      	cmp	r3, #0
 8002050:	d002      	beq.n	8002058 <HAL_RCC_GetSysClockFreq+0x34>
 8002052:	2b04      	cmp	r3, #4
 8002054:	d003      	beq.n	800205e <HAL_RCC_GetSysClockFreq+0x3a>
 8002056:	e0db      	b.n	8002210 <HAL_RCC_GetSysClockFreq+0x1ec>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 8002058:	4b73      	ldr	r3, [pc, #460]	; (8002228 <HAL_RCC_GetSysClockFreq+0x204>)
 800205a:	64bb      	str	r3, [r7, #72]	; 0x48
       break;
 800205c:	e0db      	b.n	8002216 <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 800205e:	4b73      	ldr	r3, [pc, #460]	; (800222c <HAL_RCC_GetSysClockFreq+0x208>)
 8002060:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 8002062:	e0d8      	b.n	8002216 <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8002064:	4b6f      	ldr	r3, [pc, #444]	; (8002224 <HAL_RCC_GetSysClockFreq+0x200>)
 8002066:	685b      	ldr	r3, [r3, #4]
 8002068:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 800206c:	647b      	str	r3, [r7, #68]	; 0x44
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 800206e:	4b6d      	ldr	r3, [pc, #436]	; (8002224 <HAL_RCC_GetSysClockFreq+0x200>)
 8002070:	685b      	ldr	r3, [r3, #4]
 8002072:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8002076:	2b00      	cmp	r3, #0
 8002078:	d063      	beq.n	8002142 <HAL_RCC_GetSysClockFreq+0x11e>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 800207a:	4b6a      	ldr	r3, [pc, #424]	; (8002224 <HAL_RCC_GetSysClockFreq+0x200>)
 800207c:	685b      	ldr	r3, [r3, #4]
 800207e:	099b      	lsrs	r3, r3, #6
 8002080:	2200      	movs	r2, #0
 8002082:	63bb      	str	r3, [r7, #56]	; 0x38
 8002084:	63fa      	str	r2, [r7, #60]	; 0x3c
 8002086:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8002088:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800208c:	633b      	str	r3, [r7, #48]	; 0x30
 800208e:	2300      	movs	r3, #0
 8002090:	637b      	str	r3, [r7, #52]	; 0x34
 8002092:	e9d7 450c 	ldrd	r4, r5, [r7, #48]	; 0x30
 8002096:	4622      	mov	r2, r4
 8002098:	462b      	mov	r3, r5
 800209a:	f04f 0000 	mov.w	r0, #0
 800209e:	f04f 0100 	mov.w	r1, #0
 80020a2:	0159      	lsls	r1, r3, #5
 80020a4:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 80020a8:	0150      	lsls	r0, r2, #5
 80020aa:	4602      	mov	r2, r0
 80020ac:	460b      	mov	r3, r1
 80020ae:	4621      	mov	r1, r4
 80020b0:	1a51      	subs	r1, r2, r1
 80020b2:	6139      	str	r1, [r7, #16]
 80020b4:	4629      	mov	r1, r5
 80020b6:	eb63 0301 	sbc.w	r3, r3, r1
 80020ba:	617b      	str	r3, [r7, #20]
 80020bc:	f04f 0200 	mov.w	r2, #0
 80020c0:	f04f 0300 	mov.w	r3, #0
 80020c4:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 80020c8:	4659      	mov	r1, fp
 80020ca:	018b      	lsls	r3, r1, #6
 80020cc:	4651      	mov	r1, sl
 80020ce:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 80020d2:	4651      	mov	r1, sl
 80020d4:	018a      	lsls	r2, r1, #6
 80020d6:	4651      	mov	r1, sl
 80020d8:	ebb2 0801 	subs.w	r8, r2, r1
 80020dc:	4659      	mov	r1, fp
 80020de:	eb63 0901 	sbc.w	r9, r3, r1
 80020e2:	f04f 0200 	mov.w	r2, #0
 80020e6:	f04f 0300 	mov.w	r3, #0
 80020ea:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 80020ee:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 80020f2:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 80020f6:	4690      	mov	r8, r2
 80020f8:	4699      	mov	r9, r3
 80020fa:	4623      	mov	r3, r4
 80020fc:	eb18 0303 	adds.w	r3, r8, r3
 8002100:	60bb      	str	r3, [r7, #8]
 8002102:	462b      	mov	r3, r5
 8002104:	eb49 0303 	adc.w	r3, r9, r3
 8002108:	60fb      	str	r3, [r7, #12]
 800210a:	f04f 0200 	mov.w	r2, #0
 800210e:	f04f 0300 	mov.w	r3, #0
 8002112:	e9d7 4502 	ldrd	r4, r5, [r7, #8]
 8002116:	4629      	mov	r1, r5
 8002118:	024b      	lsls	r3, r1, #9
 800211a:	4621      	mov	r1, r4
 800211c:	ea43 53d1 	orr.w	r3, r3, r1, lsr #23
 8002120:	4621      	mov	r1, r4
 8002122:	024a      	lsls	r2, r1, #9
 8002124:	4610      	mov	r0, r2
 8002126:	4619      	mov	r1, r3
 8002128:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800212a:	2200      	movs	r2, #0
 800212c:	62bb      	str	r3, [r7, #40]	; 0x28
 800212e:	62fa      	str	r2, [r7, #44]	; 0x2c
 8002130:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 8002134:	f7fe f9e4 	bl	8000500 <__aeabi_uldivmod>
 8002138:	4602      	mov	r2, r0
 800213a:	460b      	mov	r3, r1
 800213c:	4613      	mov	r3, r2
 800213e:	64fb      	str	r3, [r7, #76]	; 0x4c
 8002140:	e058      	b.n	80021f4 <HAL_RCC_GetSysClockFreq+0x1d0>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8002142:	4b38      	ldr	r3, [pc, #224]	; (8002224 <HAL_RCC_GetSysClockFreq+0x200>)
 8002144:	685b      	ldr	r3, [r3, #4]
 8002146:	099b      	lsrs	r3, r3, #6
 8002148:	2200      	movs	r2, #0
 800214a:	4618      	mov	r0, r3
 800214c:	4611      	mov	r1, r2
 800214e:	f3c0 0308 	ubfx	r3, r0, #0, #9
 8002152:	623b      	str	r3, [r7, #32]
 8002154:	2300      	movs	r3, #0
 8002156:	627b      	str	r3, [r7, #36]	; 0x24
 8002158:	e9d7 8908 	ldrd	r8, r9, [r7, #32]
 800215c:	4642      	mov	r2, r8
 800215e:	464b      	mov	r3, r9
 8002160:	f04f 0000 	mov.w	r0, #0
 8002164:	f04f 0100 	mov.w	r1, #0
 8002168:	0159      	lsls	r1, r3, #5
 800216a:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 800216e:	0150      	lsls	r0, r2, #5
 8002170:	4602      	mov	r2, r0
 8002172:	460b      	mov	r3, r1
 8002174:	4641      	mov	r1, r8
 8002176:	ebb2 0a01 	subs.w	sl, r2, r1
 800217a:	4649      	mov	r1, r9
 800217c:	eb63 0b01 	sbc.w	fp, r3, r1
 8002180:	f04f 0200 	mov.w	r2, #0
 8002184:	f04f 0300 	mov.w	r3, #0
 8002188:	ea4f 138b 	mov.w	r3, fp, lsl #6
 800218c:	ea43 639a 	orr.w	r3, r3, sl, lsr #26
 8002190:	ea4f 128a 	mov.w	r2, sl, lsl #6
 8002194:	ebb2 040a 	subs.w	r4, r2, sl
 8002198:	eb63 050b 	sbc.w	r5, r3, fp
 800219c:	f04f 0200 	mov.w	r2, #0
 80021a0:	f04f 0300 	mov.w	r3, #0
 80021a4:	00eb      	lsls	r3, r5, #3
 80021a6:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 80021aa:	00e2      	lsls	r2, r4, #3
 80021ac:	4614      	mov	r4, r2
 80021ae:	461d      	mov	r5, r3
 80021b0:	4643      	mov	r3, r8
 80021b2:	18e3      	adds	r3, r4, r3
 80021b4:	603b      	str	r3, [r7, #0]
 80021b6:	464b      	mov	r3, r9
 80021b8:	eb45 0303 	adc.w	r3, r5, r3
 80021bc:	607b      	str	r3, [r7, #4]
 80021be:	f04f 0200 	mov.w	r2, #0
 80021c2:	f04f 0300 	mov.w	r3, #0
 80021c6:	e9d7 4500 	ldrd	r4, r5, [r7]
 80021ca:	4629      	mov	r1, r5
 80021cc:	028b      	lsls	r3, r1, #10
 80021ce:	4621      	mov	r1, r4
 80021d0:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 80021d4:	4621      	mov	r1, r4
 80021d6:	028a      	lsls	r2, r1, #10
 80021d8:	4610      	mov	r0, r2
 80021da:	4619      	mov	r1, r3
 80021dc:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80021de:	2200      	movs	r2, #0
 80021e0:	61bb      	str	r3, [r7, #24]
 80021e2:	61fa      	str	r2, [r7, #28]
 80021e4:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 80021e8:	f7fe f98a 	bl	8000500 <__aeabi_uldivmod>
 80021ec:	4602      	mov	r2, r0
 80021ee:	460b      	mov	r3, r1
 80021f0:	4613      	mov	r3, r2
 80021f2:	64fb      	str	r3, [r7, #76]	; 0x4c
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 80021f4:	4b0b      	ldr	r3, [pc, #44]	; (8002224 <HAL_RCC_GetSysClockFreq+0x200>)
 80021f6:	685b      	ldr	r3, [r3, #4]
 80021f8:	0c1b      	lsrs	r3, r3, #16
 80021fa:	f003 0303 	and.w	r3, r3, #3
 80021fe:	3301      	adds	r3, #1
 8002200:	005b      	lsls	r3, r3, #1
 8002202:	643b      	str	r3, [r7, #64]	; 0x40

      sysclockfreq = pllvco/pllp;
 8002204:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 8002206:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8002208:	fbb2 f3f3 	udiv	r3, r2, r3
 800220c:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 800220e:	e002      	b.n	8002216 <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 8002210:	4b05      	ldr	r3, [pc, #20]	; (8002228 <HAL_RCC_GetSysClockFreq+0x204>)
 8002212:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 8002214:	bf00      	nop
    }
  }
  return sysclockfreq;
 8002216:	6cbb      	ldr	r3, [r7, #72]	; 0x48
}
 8002218:	4618      	mov	r0, r3
 800221a:	3750      	adds	r7, #80	; 0x50
 800221c:	46bd      	mov	sp, r7
 800221e:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8002222:	bf00      	nop
 8002224:	40023800 	.word	0x40023800
 8002228:	00f42400 	.word	0x00f42400
 800222c:	007a1200 	.word	0x007a1200

08002230 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8002230:	b480      	push	{r7}
 8002232:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8002234:	4b03      	ldr	r3, [pc, #12]	; (8002244 <HAL_RCC_GetHCLKFreq+0x14>)
 8002236:	681b      	ldr	r3, [r3, #0]
}
 8002238:	4618      	mov	r0, r3
 800223a:	46bd      	mov	sp, r7
 800223c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002240:	4770      	bx	lr
 8002242:	bf00      	nop
 8002244:	20000000 	.word	0x20000000

08002248 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8002248:	b580      	push	{r7, lr}
 800224a:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1)>> RCC_CFGR_PPRE1_Pos]);
 800224c:	f7ff fff0 	bl	8002230 <HAL_RCC_GetHCLKFreq>
 8002250:	4602      	mov	r2, r0
 8002252:	4b05      	ldr	r3, [pc, #20]	; (8002268 <HAL_RCC_GetPCLK1Freq+0x20>)
 8002254:	689b      	ldr	r3, [r3, #8]
 8002256:	0a9b      	lsrs	r3, r3, #10
 8002258:	f003 0307 	and.w	r3, r3, #7
 800225c:	4903      	ldr	r1, [pc, #12]	; (800226c <HAL_RCC_GetPCLK1Freq+0x24>)
 800225e:	5ccb      	ldrb	r3, [r1, r3]
 8002260:	fa22 f303 	lsr.w	r3, r2, r3
}
 8002264:	4618      	mov	r0, r3
 8002266:	bd80      	pop	{r7, pc}
 8002268:	40023800 	.word	0x40023800
 800226c:	080063f4 	.word	0x080063f4

08002270 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8002270:	b580      	push	{r7, lr}
 8002272:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2)>> RCC_CFGR_PPRE2_Pos]);
 8002274:	f7ff ffdc 	bl	8002230 <HAL_RCC_GetHCLKFreq>
 8002278:	4602      	mov	r2, r0
 800227a:	4b05      	ldr	r3, [pc, #20]	; (8002290 <HAL_RCC_GetPCLK2Freq+0x20>)
 800227c:	689b      	ldr	r3, [r3, #8]
 800227e:	0b5b      	lsrs	r3, r3, #13
 8002280:	f003 0307 	and.w	r3, r3, #7
 8002284:	4903      	ldr	r1, [pc, #12]	; (8002294 <HAL_RCC_GetPCLK2Freq+0x24>)
 8002286:	5ccb      	ldrb	r3, [r1, r3]
 8002288:	fa22 f303 	lsr.w	r3, r2, r3
}
 800228c:	4618      	mov	r0, r3
 800228e:	bd80      	pop	{r7, pc}
 8002290:	40023800 	.word	0x40023800
 8002294:	080063f4 	.word	0x080063f4

08002298 <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8002298:	b580      	push	{r7, lr}
 800229a:	b082      	sub	sp, #8
 800229c:	af00      	add	r7, sp, #0
 800229e:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 80022a0:	687b      	ldr	r3, [r7, #4]
 80022a2:	2b00      	cmp	r3, #0
 80022a4:	d101      	bne.n	80022aa <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 80022a6:	2301      	movs	r3, #1
 80022a8:	e03f      	b.n	800232a <HAL_UART_Init+0x92>
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));

  if (huart->gState == HAL_UART_STATE_RESET)
 80022aa:	687b      	ldr	r3, [r7, #4]
 80022ac:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80022b0:	b2db      	uxtb	r3, r3
 80022b2:	2b00      	cmp	r3, #0
 80022b4:	d106      	bne.n	80022c4 <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 80022b6:	687b      	ldr	r3, [r7, #4]
 80022b8:	2200      	movs	r2, #0
 80022ba:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 80022be:	6878      	ldr	r0, [r7, #4]
 80022c0:	f7fe fe1e 	bl	8000f00 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 80022c4:	687b      	ldr	r3, [r7, #4]
 80022c6:	2224      	movs	r2, #36	; 0x24
 80022c8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 80022cc:	687b      	ldr	r3, [r7, #4]
 80022ce:	681b      	ldr	r3, [r3, #0]
 80022d0:	68da      	ldr	r2, [r3, #12]
 80022d2:	687b      	ldr	r3, [r7, #4]
 80022d4:	681b      	ldr	r3, [r3, #0]
 80022d6:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 80022da:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 80022dc:	6878      	ldr	r0, [r7, #4]
 80022de:	f000 f929 	bl	8002534 <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 80022e2:	687b      	ldr	r3, [r7, #4]
 80022e4:	681b      	ldr	r3, [r3, #0]
 80022e6:	691a      	ldr	r2, [r3, #16]
 80022e8:	687b      	ldr	r3, [r7, #4]
 80022ea:	681b      	ldr	r3, [r3, #0]
 80022ec:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 80022f0:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 80022f2:	687b      	ldr	r3, [r7, #4]
 80022f4:	681b      	ldr	r3, [r3, #0]
 80022f6:	695a      	ldr	r2, [r3, #20]
 80022f8:	687b      	ldr	r3, [r7, #4]
 80022fa:	681b      	ldr	r3, [r3, #0]
 80022fc:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 8002300:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 8002302:	687b      	ldr	r3, [r7, #4]
 8002304:	681b      	ldr	r3, [r3, #0]
 8002306:	68da      	ldr	r2, [r3, #12]
 8002308:	687b      	ldr	r3, [r7, #4]
 800230a:	681b      	ldr	r3, [r3, #0]
 800230c:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8002310:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8002312:	687b      	ldr	r3, [r7, #4]
 8002314:	2200      	movs	r2, #0
 8002316:	641a      	str	r2, [r3, #64]	; 0x40
  huart->gState = HAL_UART_STATE_READY;
 8002318:	687b      	ldr	r3, [r7, #4]
 800231a:	2220      	movs	r2, #32
 800231c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  huart->RxState = HAL_UART_STATE_READY;
 8002320:	687b      	ldr	r3, [r7, #4]
 8002322:	2220      	movs	r2, #32
 8002324:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 8002328:	2300      	movs	r3, #0
}
 800232a:	4618      	mov	r0, r3
 800232c:	3708      	adds	r7, #8
 800232e:	46bd      	mov	sp, r7
 8002330:	bd80      	pop	{r7, pc}

08002332 <HAL_UART_Transmit>:
  * @param  Size  Amount of data elements (u8 or u16) to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8002332:	b580      	push	{r7, lr}
 8002334:	b08a      	sub	sp, #40	; 0x28
 8002336:	af02      	add	r7, sp, #8
 8002338:	60f8      	str	r0, [r7, #12]
 800233a:	60b9      	str	r1, [r7, #8]
 800233c:	603b      	str	r3, [r7, #0]
 800233e:	4613      	mov	r3, r2
 8002340:	80fb      	strh	r3, [r7, #6]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart = 0U;
 8002342:	2300      	movs	r3, #0
 8002344:	617b      	str	r3, [r7, #20]

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8002346:	68fb      	ldr	r3, [r7, #12]
 8002348:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800234c:	b2db      	uxtb	r3, r3
 800234e:	2b20      	cmp	r3, #32
 8002350:	d17c      	bne.n	800244c <HAL_UART_Transmit+0x11a>
  {
    if ((pData == NULL) || (Size == 0U))
 8002352:	68bb      	ldr	r3, [r7, #8]
 8002354:	2b00      	cmp	r3, #0
 8002356:	d002      	beq.n	800235e <HAL_UART_Transmit+0x2c>
 8002358:	88fb      	ldrh	r3, [r7, #6]
 800235a:	2b00      	cmp	r3, #0
 800235c:	d101      	bne.n	8002362 <HAL_UART_Transmit+0x30>
    {
      return  HAL_ERROR;
 800235e:	2301      	movs	r3, #1
 8002360:	e075      	b.n	800244e <HAL_UART_Transmit+0x11c>
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 8002362:	68fb      	ldr	r3, [r7, #12]
 8002364:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8002368:	2b01      	cmp	r3, #1
 800236a:	d101      	bne.n	8002370 <HAL_UART_Transmit+0x3e>
 800236c:	2302      	movs	r3, #2
 800236e:	e06e      	b.n	800244e <HAL_UART_Transmit+0x11c>
 8002370:	68fb      	ldr	r3, [r7, #12]
 8002372:	2201      	movs	r2, #1
 8002374:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8002378:	68fb      	ldr	r3, [r7, #12]
 800237a:	2200      	movs	r2, #0
 800237c:	641a      	str	r2, [r3, #64]	; 0x40
    huart->gState = HAL_UART_STATE_BUSY_TX;
 800237e:	68fb      	ldr	r3, [r7, #12]
 8002380:	2221      	movs	r2, #33	; 0x21
 8002382:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 8002386:	f7ff f837 	bl	80013f8 <HAL_GetTick>
 800238a:	6178      	str	r0, [r7, #20]

    huart->TxXferSize = Size;
 800238c:	68fb      	ldr	r3, [r7, #12]
 800238e:	88fa      	ldrh	r2, [r7, #6]
 8002390:	849a      	strh	r2, [r3, #36]	; 0x24
    huart->TxXferCount = Size;
 8002392:	68fb      	ldr	r3, [r7, #12]
 8002394:	88fa      	ldrh	r2, [r7, #6]
 8002396:	84da      	strh	r2, [r3, #38]	; 0x26

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8002398:	68fb      	ldr	r3, [r7, #12]
 800239a:	689b      	ldr	r3, [r3, #8]
 800239c:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80023a0:	d108      	bne.n	80023b4 <HAL_UART_Transmit+0x82>
 80023a2:	68fb      	ldr	r3, [r7, #12]
 80023a4:	691b      	ldr	r3, [r3, #16]
 80023a6:	2b00      	cmp	r3, #0
 80023a8:	d104      	bne.n	80023b4 <HAL_UART_Transmit+0x82>
    {
      pdata8bits  = NULL;
 80023aa:	2300      	movs	r3, #0
 80023ac:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 80023ae:	68bb      	ldr	r3, [r7, #8]
 80023b0:	61bb      	str	r3, [r7, #24]
 80023b2:	e003      	b.n	80023bc <HAL_UART_Transmit+0x8a>
    }
    else
    {
      pdata8bits  = pData;
 80023b4:	68bb      	ldr	r3, [r7, #8]
 80023b6:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 80023b8:	2300      	movs	r3, #0
 80023ba:	61bb      	str	r3, [r7, #24]
    }

    /* Process Unlocked */
    __HAL_UNLOCK(huart);
 80023bc:	68fb      	ldr	r3, [r7, #12]
 80023be:	2200      	movs	r2, #0
 80023c0:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    while (huart->TxXferCount > 0U)
 80023c4:	e02a      	b.n	800241c <HAL_UART_Transmit+0xea>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 80023c6:	683b      	ldr	r3, [r7, #0]
 80023c8:	9300      	str	r3, [sp, #0]
 80023ca:	697b      	ldr	r3, [r7, #20]
 80023cc:	2200      	movs	r2, #0
 80023ce:	2180      	movs	r1, #128	; 0x80
 80023d0:	68f8      	ldr	r0, [r7, #12]
 80023d2:	f000 f840 	bl	8002456 <UART_WaitOnFlagUntilTimeout>
 80023d6:	4603      	mov	r3, r0
 80023d8:	2b00      	cmp	r3, #0
 80023da:	d001      	beq.n	80023e0 <HAL_UART_Transmit+0xae>
      {
        return HAL_TIMEOUT;
 80023dc:	2303      	movs	r3, #3
 80023de:	e036      	b.n	800244e <HAL_UART_Transmit+0x11c>
      }
      if (pdata8bits == NULL)
 80023e0:	69fb      	ldr	r3, [r7, #28]
 80023e2:	2b00      	cmp	r3, #0
 80023e4:	d10b      	bne.n	80023fe <HAL_UART_Transmit+0xcc>
      {
        huart->Instance->DR = (uint16_t)(*pdata16bits & 0x01FFU);
 80023e6:	69bb      	ldr	r3, [r7, #24]
 80023e8:	881b      	ldrh	r3, [r3, #0]
 80023ea:	461a      	mov	r2, r3
 80023ec:	68fb      	ldr	r3, [r7, #12]
 80023ee:	681b      	ldr	r3, [r3, #0]
 80023f0:	f3c2 0208 	ubfx	r2, r2, #0, #9
 80023f4:	605a      	str	r2, [r3, #4]
        pdata16bits++;
 80023f6:	69bb      	ldr	r3, [r7, #24]
 80023f8:	3302      	adds	r3, #2
 80023fa:	61bb      	str	r3, [r7, #24]
 80023fc:	e007      	b.n	800240e <HAL_UART_Transmit+0xdc>
      }
      else
      {
        huart->Instance->DR = (uint8_t)(*pdata8bits & 0xFFU);
 80023fe:	69fb      	ldr	r3, [r7, #28]
 8002400:	781a      	ldrb	r2, [r3, #0]
 8002402:	68fb      	ldr	r3, [r7, #12]
 8002404:	681b      	ldr	r3, [r3, #0]
 8002406:	605a      	str	r2, [r3, #4]
        pdata8bits++;
 8002408:	69fb      	ldr	r3, [r7, #28]
 800240a:	3301      	adds	r3, #1
 800240c:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 800240e:	68fb      	ldr	r3, [r7, #12]
 8002410:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 8002412:	b29b      	uxth	r3, r3
 8002414:	3b01      	subs	r3, #1
 8002416:	b29a      	uxth	r2, r3
 8002418:	68fb      	ldr	r3, [r7, #12]
 800241a:	84da      	strh	r2, [r3, #38]	; 0x26
    while (huart->TxXferCount > 0U)
 800241c:	68fb      	ldr	r3, [r7, #12]
 800241e:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 8002420:	b29b      	uxth	r3, r3
 8002422:	2b00      	cmp	r3, #0
 8002424:	d1cf      	bne.n	80023c6 <HAL_UART_Transmit+0x94>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 8002426:	683b      	ldr	r3, [r7, #0]
 8002428:	9300      	str	r3, [sp, #0]
 800242a:	697b      	ldr	r3, [r7, #20]
 800242c:	2200      	movs	r2, #0
 800242e:	2140      	movs	r1, #64	; 0x40
 8002430:	68f8      	ldr	r0, [r7, #12]
 8002432:	f000 f810 	bl	8002456 <UART_WaitOnFlagUntilTimeout>
 8002436:	4603      	mov	r3, r0
 8002438:	2b00      	cmp	r3, #0
 800243a:	d001      	beq.n	8002440 <HAL_UART_Transmit+0x10e>
    {
      return HAL_TIMEOUT;
 800243c:	2303      	movs	r3, #3
 800243e:	e006      	b.n	800244e <HAL_UART_Transmit+0x11c>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 8002440:	68fb      	ldr	r3, [r7, #12]
 8002442:	2220      	movs	r2, #32
 8002444:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    return HAL_OK;
 8002448:	2300      	movs	r3, #0
 800244a:	e000      	b.n	800244e <HAL_UART_Transmit+0x11c>
  }
  else
  {
    return HAL_BUSY;
 800244c:	2302      	movs	r3, #2
  }
}
 800244e:	4618      	mov	r0, r3
 8002450:	3720      	adds	r7, #32
 8002452:	46bd      	mov	sp, r7
 8002454:	bd80      	pop	{r7, pc}

08002456 <UART_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                                     uint32_t Tickstart, uint32_t Timeout)
{
 8002456:	b580      	push	{r7, lr}
 8002458:	b090      	sub	sp, #64	; 0x40
 800245a:	af00      	add	r7, sp, #0
 800245c:	60f8      	str	r0, [r7, #12]
 800245e:	60b9      	str	r1, [r7, #8]
 8002460:	603b      	str	r3, [r7, #0]
 8002462:	4613      	mov	r3, r2
 8002464:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8002466:	e050      	b.n	800250a <UART_WaitOnFlagUntilTimeout+0xb4>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8002468:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800246a:	f1b3 3fff 	cmp.w	r3, #4294967295
 800246e:	d04c      	beq.n	800250a <UART_WaitOnFlagUntilTimeout+0xb4>
    {
      if ((Timeout == 0U) || ((HAL_GetTick() - Tickstart) > Timeout))
 8002470:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8002472:	2b00      	cmp	r3, #0
 8002474:	d007      	beq.n	8002486 <UART_WaitOnFlagUntilTimeout+0x30>
 8002476:	f7fe ffbf 	bl	80013f8 <HAL_GetTick>
 800247a:	4602      	mov	r2, r0
 800247c:	683b      	ldr	r3, [r7, #0]
 800247e:	1ad3      	subs	r3, r2, r3
 8002480:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8002482:	429a      	cmp	r2, r3
 8002484:	d241      	bcs.n	800250a <UART_WaitOnFlagUntilTimeout+0xb4>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts for the interrupt process */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 8002486:	68fb      	ldr	r3, [r7, #12]
 8002488:	681b      	ldr	r3, [r3, #0]
 800248a:	330c      	adds	r3, #12
 800248c:	62bb      	str	r3, [r7, #40]	; 0x28
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800248e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002490:	e853 3f00 	ldrex	r3, [r3]
 8002494:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 8002496:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002498:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 800249c:	63fb      	str	r3, [r7, #60]	; 0x3c
 800249e:	68fb      	ldr	r3, [r7, #12]
 80024a0:	681b      	ldr	r3, [r3, #0]
 80024a2:	330c      	adds	r3, #12
 80024a4:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 80024a6:	637a      	str	r2, [r7, #52]	; 0x34
 80024a8:	633b      	str	r3, [r7, #48]	; 0x30
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80024aa:	6b39      	ldr	r1, [r7, #48]	; 0x30
 80024ac:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 80024ae:	e841 2300 	strex	r3, r2, [r1]
 80024b2:	62fb      	str	r3, [r7, #44]	; 0x2c
   return(result);
 80024b4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80024b6:	2b00      	cmp	r3, #0
 80024b8:	d1e5      	bne.n	8002486 <UART_WaitOnFlagUntilTimeout+0x30>
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80024ba:	68fb      	ldr	r3, [r7, #12]
 80024bc:	681b      	ldr	r3, [r3, #0]
 80024be:	3314      	adds	r3, #20
 80024c0:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80024c2:	697b      	ldr	r3, [r7, #20]
 80024c4:	e853 3f00 	ldrex	r3, [r3]
 80024c8:	613b      	str	r3, [r7, #16]
   return(result);
 80024ca:	693b      	ldr	r3, [r7, #16]
 80024cc:	f023 0301 	bic.w	r3, r3, #1
 80024d0:	63bb      	str	r3, [r7, #56]	; 0x38
 80024d2:	68fb      	ldr	r3, [r7, #12]
 80024d4:	681b      	ldr	r3, [r3, #0]
 80024d6:	3314      	adds	r3, #20
 80024d8:	6bba      	ldr	r2, [r7, #56]	; 0x38
 80024da:	623a      	str	r2, [r7, #32]
 80024dc:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80024de:	69f9      	ldr	r1, [r7, #28]
 80024e0:	6a3a      	ldr	r2, [r7, #32]
 80024e2:	e841 2300 	strex	r3, r2, [r1]
 80024e6:	61bb      	str	r3, [r7, #24]
   return(result);
 80024e8:	69bb      	ldr	r3, [r7, #24]
 80024ea:	2b00      	cmp	r3, #0
 80024ec:	d1e5      	bne.n	80024ba <UART_WaitOnFlagUntilTimeout+0x64>

        huart->gState  = HAL_UART_STATE_READY;
 80024ee:	68fb      	ldr	r3, [r7, #12]
 80024f0:	2220      	movs	r2, #32
 80024f2:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        huart->RxState = HAL_UART_STATE_READY;
 80024f6:	68fb      	ldr	r3, [r7, #12]
 80024f8:	2220      	movs	r2, #32
 80024fa:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

        /* Process Unlocked */
        __HAL_UNLOCK(huart);
 80024fe:	68fb      	ldr	r3, [r7, #12]
 8002500:	2200      	movs	r2, #0
 8002502:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_TIMEOUT;
 8002506:	2303      	movs	r3, #3
 8002508:	e00f      	b.n	800252a <UART_WaitOnFlagUntilTimeout+0xd4>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800250a:	68fb      	ldr	r3, [r7, #12]
 800250c:	681b      	ldr	r3, [r3, #0]
 800250e:	681a      	ldr	r2, [r3, #0]
 8002510:	68bb      	ldr	r3, [r7, #8]
 8002512:	4013      	ands	r3, r2
 8002514:	68ba      	ldr	r2, [r7, #8]
 8002516:	429a      	cmp	r2, r3
 8002518:	bf0c      	ite	eq
 800251a:	2301      	moveq	r3, #1
 800251c:	2300      	movne	r3, #0
 800251e:	b2db      	uxtb	r3, r3
 8002520:	461a      	mov	r2, r3
 8002522:	79fb      	ldrb	r3, [r7, #7]
 8002524:	429a      	cmp	r2, r3
 8002526:	d09f      	beq.n	8002468 <UART_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 8002528:	2300      	movs	r3, #0
}
 800252a:	4618      	mov	r0, r3
 800252c:	3740      	adds	r7, #64	; 0x40
 800252e:	46bd      	mov	sp, r7
 8002530:	bd80      	pop	{r7, pc}
	...

08002534 <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 8002534:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8002538:	b0c0      	sub	sp, #256	; 0x100
 800253a:	af00      	add	r7, sp, #0
 800253c:	f8c7 00f4 	str.w	r0, [r7, #244]	; 0xf4
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8002540:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8002544:	681b      	ldr	r3, [r3, #0]
 8002546:	691b      	ldr	r3, [r3, #16]
 8002548:	f423 5040 	bic.w	r0, r3, #12288	; 0x3000
 800254c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8002550:	68d9      	ldr	r1, [r3, #12]
 8002552:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8002556:	681a      	ldr	r2, [r3, #0]
 8002558:	ea40 0301 	orr.w	r3, r0, r1
 800255c:	6113      	str	r3, [r2, #16]
     Set the M bits according to huart->Init.WordLength value
     Set PCE and PS bits according to huart->Init.Parity value
     Set TE and RE bits according to huart->Init.Mode value
     Set OVER8 bit according to huart->Init.OverSampling value */

  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 800255e:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8002562:	689a      	ldr	r2, [r3, #8]
 8002564:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8002568:	691b      	ldr	r3, [r3, #16]
 800256a:	431a      	orrs	r2, r3
 800256c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8002570:	695b      	ldr	r3, [r3, #20]
 8002572:	431a      	orrs	r2, r3
 8002574:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8002578:	69db      	ldr	r3, [r3, #28]
 800257a:	4313      	orrs	r3, r2
 800257c:	f8c7 30f8 	str.w	r3, [r7, #248]	; 0xf8
  MODIFY_REG(huart->Instance->CR1,
 8002580:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8002584:	681b      	ldr	r3, [r3, #0]
 8002586:	68db      	ldr	r3, [r3, #12]
 8002588:	f423 4116 	bic.w	r1, r3, #38400	; 0x9600
 800258c:	f021 010c 	bic.w	r1, r1, #12
 8002590:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8002594:	681a      	ldr	r2, [r3, #0]
 8002596:	f8d7 30f8 	ldr.w	r3, [r7, #248]	; 0xf8
 800259a:	430b      	orrs	r3, r1
 800259c:	60d3      	str	r3, [r2, #12]
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 800259e:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80025a2:	681b      	ldr	r3, [r3, #0]
 80025a4:	695b      	ldr	r3, [r3, #20]
 80025a6:	f423 7040 	bic.w	r0, r3, #768	; 0x300
 80025aa:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80025ae:	6999      	ldr	r1, [r3, #24]
 80025b0:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80025b4:	681a      	ldr	r2, [r3, #0]
 80025b6:	ea40 0301 	orr.w	r3, r0, r1
 80025ba:	6153      	str	r3, [r2, #20]
    if ((huart->Instance == USART1) || (huart->Instance == USART6) || (huart->Instance == UART9) || (huart->Instance == UART10))
    {
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#elif defined(USART6)
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 80025bc:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80025c0:	681a      	ldr	r2, [r3, #0]
 80025c2:	4b8f      	ldr	r3, [pc, #572]	; (8002800 <UART_SetConfig+0x2cc>)
 80025c4:	429a      	cmp	r2, r3
 80025c6:	d005      	beq.n	80025d4 <UART_SetConfig+0xa0>
 80025c8:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80025cc:	681a      	ldr	r2, [r3, #0]
 80025ce:	4b8d      	ldr	r3, [pc, #564]	; (8002804 <UART_SetConfig+0x2d0>)
 80025d0:	429a      	cmp	r2, r3
 80025d2:	d104      	bne.n	80025de <UART_SetConfig+0xaa>
    {
      pclk = HAL_RCC_GetPCLK2Freq();
 80025d4:	f7ff fe4c 	bl	8002270 <HAL_RCC_GetPCLK2Freq>
 80025d8:	f8c7 00fc 	str.w	r0, [r7, #252]	; 0xfc
 80025dc:	e003      	b.n	80025e6 <UART_SetConfig+0xb2>
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#endif /* USART6 */
    else
    {
      pclk = HAL_RCC_GetPCLK1Freq();
 80025de:	f7ff fe33 	bl	8002248 <HAL_RCC_GetPCLK1Freq>
 80025e2:	f8c7 00fc 	str.w	r0, [r7, #252]	; 0xfc
    }
  /*-------------------------- USART BRR Configuration ---------------------*/
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 80025e6:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80025ea:	69db      	ldr	r3, [r3, #28]
 80025ec:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 80025f0:	f040 810c 	bne.w	800280c <UART_SetConfig+0x2d8>
  {
    huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 80025f4:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 80025f8:	2200      	movs	r2, #0
 80025fa:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
 80025fe:	f8c7 20ec 	str.w	r2, [r7, #236]	; 0xec
 8002602:	e9d7 453a 	ldrd	r4, r5, [r7, #232]	; 0xe8
 8002606:	4622      	mov	r2, r4
 8002608:	462b      	mov	r3, r5
 800260a:	1891      	adds	r1, r2, r2
 800260c:	65b9      	str	r1, [r7, #88]	; 0x58
 800260e:	415b      	adcs	r3, r3
 8002610:	65fb      	str	r3, [r7, #92]	; 0x5c
 8002612:	e9d7 2316 	ldrd	r2, r3, [r7, #88]	; 0x58
 8002616:	4621      	mov	r1, r4
 8002618:	eb12 0801 	adds.w	r8, r2, r1
 800261c:	4629      	mov	r1, r5
 800261e:	eb43 0901 	adc.w	r9, r3, r1
 8002622:	f04f 0200 	mov.w	r2, #0
 8002626:	f04f 0300 	mov.w	r3, #0
 800262a:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 800262e:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 8002632:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 8002636:	4690      	mov	r8, r2
 8002638:	4699      	mov	r9, r3
 800263a:	4623      	mov	r3, r4
 800263c:	eb18 0303 	adds.w	r3, r8, r3
 8002640:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
 8002644:	462b      	mov	r3, r5
 8002646:	eb49 0303 	adc.w	r3, r9, r3
 800264a:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
 800264e:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8002652:	685b      	ldr	r3, [r3, #4]
 8002654:	2200      	movs	r2, #0
 8002656:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
 800265a:	f8c7 20dc 	str.w	r2, [r7, #220]	; 0xdc
 800265e:	e9d7 1236 	ldrd	r1, r2, [r7, #216]	; 0xd8
 8002662:	460b      	mov	r3, r1
 8002664:	18db      	adds	r3, r3, r3
 8002666:	653b      	str	r3, [r7, #80]	; 0x50
 8002668:	4613      	mov	r3, r2
 800266a:	eb42 0303 	adc.w	r3, r2, r3
 800266e:	657b      	str	r3, [r7, #84]	; 0x54
 8002670:	e9d7 2314 	ldrd	r2, r3, [r7, #80]	; 0x50
 8002674:	e9d7 0138 	ldrd	r0, r1, [r7, #224]	; 0xe0
 8002678:	f7fd ff42 	bl	8000500 <__aeabi_uldivmod>
 800267c:	4602      	mov	r2, r0
 800267e:	460b      	mov	r3, r1
 8002680:	4b61      	ldr	r3, [pc, #388]	; (8002808 <UART_SetConfig+0x2d4>)
 8002682:	fba3 2302 	umull	r2, r3, r3, r2
 8002686:	095b      	lsrs	r3, r3, #5
 8002688:	011c      	lsls	r4, r3, #4
 800268a:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 800268e:	2200      	movs	r2, #0
 8002690:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 8002694:	f8c7 20d4 	str.w	r2, [r7, #212]	; 0xd4
 8002698:	e9d7 8934 	ldrd	r8, r9, [r7, #208]	; 0xd0
 800269c:	4642      	mov	r2, r8
 800269e:	464b      	mov	r3, r9
 80026a0:	1891      	adds	r1, r2, r2
 80026a2:	64b9      	str	r1, [r7, #72]	; 0x48
 80026a4:	415b      	adcs	r3, r3
 80026a6:	64fb      	str	r3, [r7, #76]	; 0x4c
 80026a8:	e9d7 2312 	ldrd	r2, r3, [r7, #72]	; 0x48
 80026ac:	4641      	mov	r1, r8
 80026ae:	eb12 0a01 	adds.w	sl, r2, r1
 80026b2:	4649      	mov	r1, r9
 80026b4:	eb43 0b01 	adc.w	fp, r3, r1
 80026b8:	f04f 0200 	mov.w	r2, #0
 80026bc:	f04f 0300 	mov.w	r3, #0
 80026c0:	ea4f 03cb 	mov.w	r3, fp, lsl #3
 80026c4:	ea43 735a 	orr.w	r3, r3, sl, lsr #29
 80026c8:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 80026cc:	4692      	mov	sl, r2
 80026ce:	469b      	mov	fp, r3
 80026d0:	4643      	mov	r3, r8
 80026d2:	eb1a 0303 	adds.w	r3, sl, r3
 80026d6:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 80026da:	464b      	mov	r3, r9
 80026dc:	eb4b 0303 	adc.w	r3, fp, r3
 80026e0:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
 80026e4:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80026e8:	685b      	ldr	r3, [r3, #4]
 80026ea:	2200      	movs	r2, #0
 80026ec:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 80026f0:	f8c7 20c4 	str.w	r2, [r7, #196]	; 0xc4
 80026f4:	e9d7 1230 	ldrd	r1, r2, [r7, #192]	; 0xc0
 80026f8:	460b      	mov	r3, r1
 80026fa:	18db      	adds	r3, r3, r3
 80026fc:	643b      	str	r3, [r7, #64]	; 0x40
 80026fe:	4613      	mov	r3, r2
 8002700:	eb42 0303 	adc.w	r3, r2, r3
 8002704:	647b      	str	r3, [r7, #68]	; 0x44
 8002706:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	; 0x40
 800270a:	e9d7 0132 	ldrd	r0, r1, [r7, #200]	; 0xc8
 800270e:	f7fd fef7 	bl	8000500 <__aeabi_uldivmod>
 8002712:	4602      	mov	r2, r0
 8002714:	460b      	mov	r3, r1
 8002716:	4611      	mov	r1, r2
 8002718:	4b3b      	ldr	r3, [pc, #236]	; (8002808 <UART_SetConfig+0x2d4>)
 800271a:	fba3 2301 	umull	r2, r3, r3, r1
 800271e:	095b      	lsrs	r3, r3, #5
 8002720:	2264      	movs	r2, #100	; 0x64
 8002722:	fb02 f303 	mul.w	r3, r2, r3
 8002726:	1acb      	subs	r3, r1, r3
 8002728:	00db      	lsls	r3, r3, #3
 800272a:	f103 0232 	add.w	r2, r3, #50	; 0x32
 800272e:	4b36      	ldr	r3, [pc, #216]	; (8002808 <UART_SetConfig+0x2d4>)
 8002730:	fba3 2302 	umull	r2, r3, r3, r2
 8002734:	095b      	lsrs	r3, r3, #5
 8002736:	005b      	lsls	r3, r3, #1
 8002738:	f403 73f8 	and.w	r3, r3, #496	; 0x1f0
 800273c:	441c      	add	r4, r3
 800273e:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8002742:	2200      	movs	r2, #0
 8002744:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 8002748:	f8c7 20bc 	str.w	r2, [r7, #188]	; 0xbc
 800274c:	e9d7 892e 	ldrd	r8, r9, [r7, #184]	; 0xb8
 8002750:	4642      	mov	r2, r8
 8002752:	464b      	mov	r3, r9
 8002754:	1891      	adds	r1, r2, r2
 8002756:	63b9      	str	r1, [r7, #56]	; 0x38
 8002758:	415b      	adcs	r3, r3
 800275a:	63fb      	str	r3, [r7, #60]	; 0x3c
 800275c:	e9d7 230e 	ldrd	r2, r3, [r7, #56]	; 0x38
 8002760:	4641      	mov	r1, r8
 8002762:	1851      	adds	r1, r2, r1
 8002764:	6339      	str	r1, [r7, #48]	; 0x30
 8002766:	4649      	mov	r1, r9
 8002768:	414b      	adcs	r3, r1
 800276a:	637b      	str	r3, [r7, #52]	; 0x34
 800276c:	f04f 0200 	mov.w	r2, #0
 8002770:	f04f 0300 	mov.w	r3, #0
 8002774:	e9d7 ab0c 	ldrd	sl, fp, [r7, #48]	; 0x30
 8002778:	4659      	mov	r1, fp
 800277a:	00cb      	lsls	r3, r1, #3
 800277c:	4651      	mov	r1, sl
 800277e:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8002782:	4651      	mov	r1, sl
 8002784:	00ca      	lsls	r2, r1, #3
 8002786:	4610      	mov	r0, r2
 8002788:	4619      	mov	r1, r3
 800278a:	4603      	mov	r3, r0
 800278c:	4642      	mov	r2, r8
 800278e:	189b      	adds	r3, r3, r2
 8002790:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 8002794:	464b      	mov	r3, r9
 8002796:	460a      	mov	r2, r1
 8002798:	eb42 0303 	adc.w	r3, r2, r3
 800279c:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 80027a0:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80027a4:	685b      	ldr	r3, [r3, #4]
 80027a6:	2200      	movs	r2, #0
 80027a8:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
 80027ac:	f8c7 20ac 	str.w	r2, [r7, #172]	; 0xac
 80027b0:	e9d7 122a 	ldrd	r1, r2, [r7, #168]	; 0xa8
 80027b4:	460b      	mov	r3, r1
 80027b6:	18db      	adds	r3, r3, r3
 80027b8:	62bb      	str	r3, [r7, #40]	; 0x28
 80027ba:	4613      	mov	r3, r2
 80027bc:	eb42 0303 	adc.w	r3, r2, r3
 80027c0:	62fb      	str	r3, [r7, #44]	; 0x2c
 80027c2:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 80027c6:	e9d7 012c 	ldrd	r0, r1, [r7, #176]	; 0xb0
 80027ca:	f7fd fe99 	bl	8000500 <__aeabi_uldivmod>
 80027ce:	4602      	mov	r2, r0
 80027d0:	460b      	mov	r3, r1
 80027d2:	4b0d      	ldr	r3, [pc, #52]	; (8002808 <UART_SetConfig+0x2d4>)
 80027d4:	fba3 1302 	umull	r1, r3, r3, r2
 80027d8:	095b      	lsrs	r3, r3, #5
 80027da:	2164      	movs	r1, #100	; 0x64
 80027dc:	fb01 f303 	mul.w	r3, r1, r3
 80027e0:	1ad3      	subs	r3, r2, r3
 80027e2:	00db      	lsls	r3, r3, #3
 80027e4:	3332      	adds	r3, #50	; 0x32
 80027e6:	4a08      	ldr	r2, [pc, #32]	; (8002808 <UART_SetConfig+0x2d4>)
 80027e8:	fba2 2303 	umull	r2, r3, r2, r3
 80027ec:	095b      	lsrs	r3, r3, #5
 80027ee:	f003 0207 	and.w	r2, r3, #7
 80027f2:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80027f6:	681b      	ldr	r3, [r3, #0]
 80027f8:	4422      	add	r2, r4
 80027fa:	609a      	str	r2, [r3, #8]
  }
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
}
 80027fc:	e105      	b.n	8002a0a <UART_SetConfig+0x4d6>
 80027fe:	bf00      	nop
 8002800:	40011000 	.word	0x40011000
 8002804:	40011400 	.word	0x40011400
 8002808:	51eb851f 	.word	0x51eb851f
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 800280c:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8002810:	2200      	movs	r2, #0
 8002812:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
 8002816:	f8c7 20a4 	str.w	r2, [r7, #164]	; 0xa4
 800281a:	e9d7 8928 	ldrd	r8, r9, [r7, #160]	; 0xa0
 800281e:	4642      	mov	r2, r8
 8002820:	464b      	mov	r3, r9
 8002822:	1891      	adds	r1, r2, r2
 8002824:	6239      	str	r1, [r7, #32]
 8002826:	415b      	adcs	r3, r3
 8002828:	627b      	str	r3, [r7, #36]	; 0x24
 800282a:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 800282e:	4641      	mov	r1, r8
 8002830:	1854      	adds	r4, r2, r1
 8002832:	4649      	mov	r1, r9
 8002834:	eb43 0501 	adc.w	r5, r3, r1
 8002838:	f04f 0200 	mov.w	r2, #0
 800283c:	f04f 0300 	mov.w	r3, #0
 8002840:	00eb      	lsls	r3, r5, #3
 8002842:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8002846:	00e2      	lsls	r2, r4, #3
 8002848:	4614      	mov	r4, r2
 800284a:	461d      	mov	r5, r3
 800284c:	4643      	mov	r3, r8
 800284e:	18e3      	adds	r3, r4, r3
 8002850:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
 8002854:	464b      	mov	r3, r9
 8002856:	eb45 0303 	adc.w	r3, r5, r3
 800285a:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
 800285e:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8002862:	685b      	ldr	r3, [r3, #4]
 8002864:	2200      	movs	r2, #0
 8002866:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
 800286a:	f8c7 2094 	str.w	r2, [r7, #148]	; 0x94
 800286e:	f04f 0200 	mov.w	r2, #0
 8002872:	f04f 0300 	mov.w	r3, #0
 8002876:	e9d7 4524 	ldrd	r4, r5, [r7, #144]	; 0x90
 800287a:	4629      	mov	r1, r5
 800287c:	008b      	lsls	r3, r1, #2
 800287e:	4621      	mov	r1, r4
 8002880:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8002884:	4621      	mov	r1, r4
 8002886:	008a      	lsls	r2, r1, #2
 8002888:	e9d7 0126 	ldrd	r0, r1, [r7, #152]	; 0x98
 800288c:	f7fd fe38 	bl	8000500 <__aeabi_uldivmod>
 8002890:	4602      	mov	r2, r0
 8002892:	460b      	mov	r3, r1
 8002894:	4b60      	ldr	r3, [pc, #384]	; (8002a18 <UART_SetConfig+0x4e4>)
 8002896:	fba3 2302 	umull	r2, r3, r3, r2
 800289a:	095b      	lsrs	r3, r3, #5
 800289c:	011c      	lsls	r4, r3, #4
 800289e:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 80028a2:	2200      	movs	r2, #0
 80028a4:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
 80028a8:	f8c7 208c 	str.w	r2, [r7, #140]	; 0x8c
 80028ac:	e9d7 8922 	ldrd	r8, r9, [r7, #136]	; 0x88
 80028b0:	4642      	mov	r2, r8
 80028b2:	464b      	mov	r3, r9
 80028b4:	1891      	adds	r1, r2, r2
 80028b6:	61b9      	str	r1, [r7, #24]
 80028b8:	415b      	adcs	r3, r3
 80028ba:	61fb      	str	r3, [r7, #28]
 80028bc:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 80028c0:	4641      	mov	r1, r8
 80028c2:	1851      	adds	r1, r2, r1
 80028c4:	6139      	str	r1, [r7, #16]
 80028c6:	4649      	mov	r1, r9
 80028c8:	414b      	adcs	r3, r1
 80028ca:	617b      	str	r3, [r7, #20]
 80028cc:	f04f 0200 	mov.w	r2, #0
 80028d0:	f04f 0300 	mov.w	r3, #0
 80028d4:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 80028d8:	4659      	mov	r1, fp
 80028da:	00cb      	lsls	r3, r1, #3
 80028dc:	4651      	mov	r1, sl
 80028de:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 80028e2:	4651      	mov	r1, sl
 80028e4:	00ca      	lsls	r2, r1, #3
 80028e6:	4610      	mov	r0, r2
 80028e8:	4619      	mov	r1, r3
 80028ea:	4603      	mov	r3, r0
 80028ec:	4642      	mov	r2, r8
 80028ee:	189b      	adds	r3, r3, r2
 80028f0:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
 80028f4:	464b      	mov	r3, r9
 80028f6:	460a      	mov	r2, r1
 80028f8:	eb42 0303 	adc.w	r3, r2, r3
 80028fc:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
 8002900:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8002904:	685b      	ldr	r3, [r3, #4]
 8002906:	2200      	movs	r2, #0
 8002908:	67bb      	str	r3, [r7, #120]	; 0x78
 800290a:	67fa      	str	r2, [r7, #124]	; 0x7c
 800290c:	f04f 0200 	mov.w	r2, #0
 8002910:	f04f 0300 	mov.w	r3, #0
 8002914:	e9d7 891e 	ldrd	r8, r9, [r7, #120]	; 0x78
 8002918:	4649      	mov	r1, r9
 800291a:	008b      	lsls	r3, r1, #2
 800291c:	4641      	mov	r1, r8
 800291e:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8002922:	4641      	mov	r1, r8
 8002924:	008a      	lsls	r2, r1, #2
 8002926:	e9d7 0120 	ldrd	r0, r1, [r7, #128]	; 0x80
 800292a:	f7fd fde9 	bl	8000500 <__aeabi_uldivmod>
 800292e:	4602      	mov	r2, r0
 8002930:	460b      	mov	r3, r1
 8002932:	4b39      	ldr	r3, [pc, #228]	; (8002a18 <UART_SetConfig+0x4e4>)
 8002934:	fba3 1302 	umull	r1, r3, r3, r2
 8002938:	095b      	lsrs	r3, r3, #5
 800293a:	2164      	movs	r1, #100	; 0x64
 800293c:	fb01 f303 	mul.w	r3, r1, r3
 8002940:	1ad3      	subs	r3, r2, r3
 8002942:	011b      	lsls	r3, r3, #4
 8002944:	3332      	adds	r3, #50	; 0x32
 8002946:	4a34      	ldr	r2, [pc, #208]	; (8002a18 <UART_SetConfig+0x4e4>)
 8002948:	fba2 2303 	umull	r2, r3, r2, r3
 800294c:	095b      	lsrs	r3, r3, #5
 800294e:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8002952:	441c      	add	r4, r3
 8002954:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8002958:	2200      	movs	r2, #0
 800295a:	673b      	str	r3, [r7, #112]	; 0x70
 800295c:	677a      	str	r2, [r7, #116]	; 0x74
 800295e:	e9d7 891c 	ldrd	r8, r9, [r7, #112]	; 0x70
 8002962:	4642      	mov	r2, r8
 8002964:	464b      	mov	r3, r9
 8002966:	1891      	adds	r1, r2, r2
 8002968:	60b9      	str	r1, [r7, #8]
 800296a:	415b      	adcs	r3, r3
 800296c:	60fb      	str	r3, [r7, #12]
 800296e:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 8002972:	4641      	mov	r1, r8
 8002974:	1851      	adds	r1, r2, r1
 8002976:	6039      	str	r1, [r7, #0]
 8002978:	4649      	mov	r1, r9
 800297a:	414b      	adcs	r3, r1
 800297c:	607b      	str	r3, [r7, #4]
 800297e:	f04f 0200 	mov.w	r2, #0
 8002982:	f04f 0300 	mov.w	r3, #0
 8002986:	e9d7 ab00 	ldrd	sl, fp, [r7]
 800298a:	4659      	mov	r1, fp
 800298c:	00cb      	lsls	r3, r1, #3
 800298e:	4651      	mov	r1, sl
 8002990:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8002994:	4651      	mov	r1, sl
 8002996:	00ca      	lsls	r2, r1, #3
 8002998:	4610      	mov	r0, r2
 800299a:	4619      	mov	r1, r3
 800299c:	4603      	mov	r3, r0
 800299e:	4642      	mov	r2, r8
 80029a0:	189b      	adds	r3, r3, r2
 80029a2:	66bb      	str	r3, [r7, #104]	; 0x68
 80029a4:	464b      	mov	r3, r9
 80029a6:	460a      	mov	r2, r1
 80029a8:	eb42 0303 	adc.w	r3, r2, r3
 80029ac:	66fb      	str	r3, [r7, #108]	; 0x6c
 80029ae:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80029b2:	685b      	ldr	r3, [r3, #4]
 80029b4:	2200      	movs	r2, #0
 80029b6:	663b      	str	r3, [r7, #96]	; 0x60
 80029b8:	667a      	str	r2, [r7, #100]	; 0x64
 80029ba:	f04f 0200 	mov.w	r2, #0
 80029be:	f04f 0300 	mov.w	r3, #0
 80029c2:	e9d7 8918 	ldrd	r8, r9, [r7, #96]	; 0x60
 80029c6:	4649      	mov	r1, r9
 80029c8:	008b      	lsls	r3, r1, #2
 80029ca:	4641      	mov	r1, r8
 80029cc:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 80029d0:	4641      	mov	r1, r8
 80029d2:	008a      	lsls	r2, r1, #2
 80029d4:	e9d7 011a 	ldrd	r0, r1, [r7, #104]	; 0x68
 80029d8:	f7fd fd92 	bl	8000500 <__aeabi_uldivmod>
 80029dc:	4602      	mov	r2, r0
 80029de:	460b      	mov	r3, r1
 80029e0:	4b0d      	ldr	r3, [pc, #52]	; (8002a18 <UART_SetConfig+0x4e4>)
 80029e2:	fba3 1302 	umull	r1, r3, r3, r2
 80029e6:	095b      	lsrs	r3, r3, #5
 80029e8:	2164      	movs	r1, #100	; 0x64
 80029ea:	fb01 f303 	mul.w	r3, r1, r3
 80029ee:	1ad3      	subs	r3, r2, r3
 80029f0:	011b      	lsls	r3, r3, #4
 80029f2:	3332      	adds	r3, #50	; 0x32
 80029f4:	4a08      	ldr	r2, [pc, #32]	; (8002a18 <UART_SetConfig+0x4e4>)
 80029f6:	fba2 2303 	umull	r2, r3, r2, r3
 80029fa:	095b      	lsrs	r3, r3, #5
 80029fc:	f003 020f 	and.w	r2, r3, #15
 8002a00:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8002a04:	681b      	ldr	r3, [r3, #0]
 8002a06:	4422      	add	r2, r4
 8002a08:	609a      	str	r2, [r3, #8]
}
 8002a0a:	bf00      	nop
 8002a0c:	f507 7780 	add.w	r7, r7, #256	; 0x100
 8002a10:	46bd      	mov	sp, r7
 8002a12:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8002a16:	bf00      	nop
 8002a18:	51eb851f 	.word	0x51eb851f

08002a1c <MemAlloc>:
  * @param  [in] memory size to be allocated from BytePool
  *         [in] to be allocated memory type (Heap or Stack)
  * @retval pointer to the allocated memory or NULL in case of error.
  */
static uint8_t *MemAlloc(uint32_t mem_size, uint8_t pool_type)
{
 8002a1c:	b580      	push	{r7, lr}
 8002a1e:	b086      	sub	sp, #24
 8002a20:	af00      	add	r7, sp, #0
 8002a22:	6078      	str	r0, [r7, #4]
 8002a24:	460b      	mov	r3, r1
 8002a26:	70fb      	strb	r3, [r7, #3]
  /* The output pointer to the allocated memory or NULL in case of error */
  uint8_t *mem_ptr;
  /* Allocated memory size */
  uint32_t allocated_mem_size = mem_size;
 8002a28:	687b      	ldr	r3, [r7, #4]
 8002a2a:	617b      	str	r3, [r7, #20]
  /* Pointer to the BytePool to be used for memory allocation */
  TX_BYTE_POOL *byte_pool;

  /* Check if the memory size is invalid or the BytePool type is wrong */
  if ((mem_size == 0) || (pool_type > RTOS2_BYTE_POOL_HEAP_TYPE))
 8002a2c:	687b      	ldr	r3, [r7, #4]
 8002a2e:	2b00      	cmp	r3, #0
 8002a30:	d002      	beq.n	8002a38 <MemAlloc+0x1c>
 8002a32:	78fb      	ldrb	r3, [r7, #3]
 8002a34:	2b02      	cmp	r3, #2
 8002a36:	d902      	bls.n	8002a3e <MemAlloc+0x22>
  {
    /* Return NULL in case of error */
    mem_ptr = NULL;
 8002a38:	2300      	movs	r3, #0
 8002a3a:	60fb      	str	r3, [r7, #12]
 8002a3c:	e018      	b.n	8002a70 <MemAlloc+0x54>
  }
  else
  {
    /* If the memory size the be allocated is less then the TX_BYTE_POOL_MIN */
    if (allocated_mem_size < TX_BYTE_POOL_MIN)
 8002a3e:	697b      	ldr	r3, [r7, #20]
 8002a40:	2b63      	cmp	r3, #99	; 0x63
 8002a42:	d801      	bhi.n	8002a48 <MemAlloc+0x2c>
    {
      /* We should at least allocate TX_BYTE_POOL_MIN */
      allocated_mem_size = TX_BYTE_POOL_MIN;
 8002a44:	2364      	movs	r3, #100	; 0x64
 8002a46:	617b      	str	r3, [r7, #20]
    }

    /* Assign the BytePool to be used (StackBytePool or HeapBytePool) */
    if (pool_type == RTOS2_BYTE_POOL_STACK_TYPE)
 8002a48:	78fb      	ldrb	r3, [r7, #3]
 8002a4a:	2b01      	cmp	r3, #1
 8002a4c:	d102      	bne.n	8002a54 <MemAlloc+0x38>
    {
      /* Point to the Stack BytePool */
      byte_pool = &StackBytePool;
 8002a4e:	4b0b      	ldr	r3, [pc, #44]	; (8002a7c <MemAlloc+0x60>)
 8002a50:	613b      	str	r3, [r7, #16]
 8002a52:	e001      	b.n	8002a58 <MemAlloc+0x3c>
    }
    else
    {
      /* Point to the Heap BytePool */
      byte_pool = &HeapBytePool;
 8002a54:	4b0a      	ldr	r3, [pc, #40]	; (8002a80 <MemAlloc+0x64>)
 8002a56:	613b      	str	r3, [r7, #16]
    }

    /* Allocate the mem_ptr */
    if (tx_byte_allocate(byte_pool, (void **) &mem_ptr, allocated_mem_size, TX_NO_WAIT) != TX_SUCCESS)
 8002a58:	f107 010c 	add.w	r1, r7, #12
 8002a5c:	2300      	movs	r3, #0
 8002a5e:	697a      	ldr	r2, [r7, #20]
 8002a60:	6938      	ldr	r0, [r7, #16]
 8002a62:	f001 fef7 	bl	8004854 <_txe_byte_allocate>
 8002a66:	4603      	mov	r3, r0
 8002a68:	2b00      	cmp	r3, #0
 8002a6a:	d001      	beq.n	8002a70 <MemAlloc+0x54>
    {
      /* Return NULL in case of error */
      mem_ptr = NULL;
 8002a6c:	2300      	movs	r3, #0
 8002a6e:	60fb      	str	r3, [r7, #12]
    }
  }

  return (mem_ptr);
 8002a70:	68fb      	ldr	r3, [r7, #12]
}
 8002a72:	4618      	mov	r0, r3
 8002a74:	3718      	adds	r7, #24
 8002a76:	46bd      	mov	sp, r7
 8002a78:	bd80      	pop	{r7, pc}
 8002a7a:	bf00      	nop
 8002a7c:	20001578 	.word	0x20001578
 8002a80:	20001544 	.word	0x20001544

08002a84 <MemFree>:
  * @param  [in] memory size to be allocated from BytePool
  *         [in] to be allocated memory type (Heap or Stack)
  * @retval pointer to the allocated memory or NULL in case of error.
  */
static osStatus_t MemFree(VOID *memory_ptr)
{
 8002a84:	b580      	push	{r7, lr}
 8002a86:	b084      	sub	sp, #16
 8002a88:	af00      	add	r7, sp, #0
 8002a8a:	6078      	str	r0, [r7, #4]
  /* The output status code that indicates the execution status */
  osStatus_t status = osOK;
 8002a8c:	2300      	movs	r3, #0
 8002a8e:	60fb      	str	r3, [r7, #12]

  /* Check if the memory_ptr is invalid */
  if (memory_ptr == NULL)
 8002a90:	687b      	ldr	r3, [r7, #4]
 8002a92:	2b00      	cmp	r3, #0
 8002a94:	d103      	bne.n	8002a9e <MemFree+0x1a>
  {
    /* Return osError in case of error */
    status = osError;
 8002a96:	f04f 33ff 	mov.w	r3, #4294967295
 8002a9a:	60fb      	str	r3, [r7, #12]
 8002a9c:	e008      	b.n	8002ab0 <MemFree+0x2c>
  }
  else
  {
    /* Free the allocated memory_ptr */
    if (tx_byte_release(memory_ptr) != TX_SUCCESS)
 8002a9e:	6878      	ldr	r0, [r7, #4]
 8002aa0:	f001 ffec 	bl	8004a7c <_txe_byte_release>
 8002aa4:	4603      	mov	r3, r0
 8002aa6:	2b00      	cmp	r3, #0
 8002aa8:	d002      	beq.n	8002ab0 <MemFree+0x2c>
    {
      /* Return osError in case of error */
      status = osError;
 8002aaa:	f04f 33ff 	mov.w	r3, #4294967295
 8002aae:	60fb      	str	r3, [r7, #12]
    }
  }

  return (status);
 8002ab0:	68fb      	ldr	r3, [r7, #12]
}
 8002ab2:	4618      	mov	r0, r3
 8002ab4:	3710      	adds	r7, #16
 8002ab6:	46bd      	mov	sp, r7
 8002ab8:	bd80      	pop	{r7, pc}
	...

08002abc <MemInit>:
  *         RTOS2_BYTE_POOL_STACK_SIZE and RTOS2_BYTE_POOL_HEAP_SIZE flags.
  * @param  none.
  * @retval status code that indicates the execution status of the function.
  */
static osStatus_t MemInit(void)
{
 8002abc:	b580      	push	{r7, lr}
 8002abe:	b086      	sub	sp, #24
 8002ac0:	af02      	add	r7, sp, #8
  /* Allocated memory size */
  uint32_t bytepool_size = RTOS2_BYTE_POOL_STACK_SIZE;
 8002ac2:	f44f 5370 	mov.w	r3, #15360	; 0x3c00
 8002ac6:	60fb      	str	r3, [r7, #12]
#ifdef USE_DYNAMIC_MEMORY_ALLOCATION  
  /* Unused memory address */
  CHAR *unused_memory = NULL;
#else
  #ifdef USE_MEMORY_POOL_ALLOCATION
    CHAR *unused_memory_Stack = NULL;
 8002ac8:	2300      	movs	r3, #0
 8002aca:	60bb      	str	r3, [r7, #8]
    CHAR *unused_memory_Heap = NULL;
 8002acc:	2300      	movs	r3, #0
 8002ace:	607b      	str	r3, [r7, #4]
  #endif
#endif  

  /* If the memory size the be allocated is less then the TX_BYTE_POOL_MIN */
  if (bytepool_size < TX_BYTE_POOL_MIN)
 8002ad0:	68fb      	ldr	r3, [r7, #12]
 8002ad2:	2b63      	cmp	r3, #99	; 0x63
 8002ad4:	d801      	bhi.n	8002ada <MemInit+0x1e>
  {
    /* We should at least allocate TX_BYTE_POOL_MIN */
    bytepool_size = TX_BYTE_POOL_MIN;
 8002ad6:	2364      	movs	r3, #100	; 0x64
 8002ad8:	60fb      	str	r3, [r7, #12]
  unused_memory = (CHAR *)_tx_initialize_unused_memory;  
#else
  #ifdef USE_MEMORY_POOL_ALLOCATION  
  static CHAR freememStack[RTOS2_BYTE_POOL_STACK_SIZE + RTOS2_INTERNAL_BYTE_POOL_SIZE];
  static CHAR freememHeap[RTOS2_BYTE_POOL_HEAP_SIZE + RTOS2_INTERNAL_BYTE_POOL_SIZE];
  unused_memory_Stack = (CHAR *)freememStack;
 8002ada:	4b18      	ldr	r3, [pc, #96]	; (8002b3c <MemInit+0x80>)
 8002adc:	60bb      	str	r3, [r7, #8]
  unused_memory_Heap = (CHAR *)freememHeap;
 8002ade:	4b18      	ldr	r3, [pc, #96]	; (8002b40 <MemInit+0x84>)
 8002ae0:	607b      	str	r3, [r7, #4]
  
#else
  #ifdef USE_MEMORY_POOL_ALLOCATION 
  /* Create a byte memory pool from which to allocate the timer control
     block */
  if (tx_byte_pool_create(&StackBytePool, "Byte Pool Stack", unused_memory_Stack,
 8002ae2:	68fb      	ldr	r3, [r7, #12]
 8002ae4:	f503 7380 	add.w	r3, r3, #256	; 0x100
 8002ae8:	2234      	movs	r2, #52	; 0x34
 8002aea:	9200      	str	r2, [sp, #0]
 8002aec:	68ba      	ldr	r2, [r7, #8]
 8002aee:	4915      	ldr	r1, [pc, #84]	; (8002b44 <MemInit+0x88>)
 8002af0:	4815      	ldr	r0, [pc, #84]	; (8002b48 <MemInit+0x8c>)
 8002af2:	f001 ff23 	bl	800493c <_txe_byte_pool_create>
 8002af6:	4603      	mov	r3, r0
 8002af8:	2b00      	cmp	r3, #0
 8002afa:	d002      	beq.n	8002b02 <MemInit+0x46>
                          RTOS2_INTERNAL_BYTE_POOL_SIZE + bytepool_size) != TX_SUCCESS)
  {
    /* Return osError in case of error */
    return (osError);
 8002afc:	f04f 33ff 	mov.w	r3, #4294967295
 8002b00:	e018      	b.n	8002b34 <MemInit+0x78>
  }
  /* Set bytepool_size to the user configured Heap size */
  bytepool_size = RTOS2_BYTE_POOL_HEAP_SIZE;
 8002b02:	f44f 5320 	mov.w	r3, #10240	; 0x2800
 8002b06:	60fb      	str	r3, [r7, #12]

  /* If the memory size the be allocated is less then the TX_BYTE_POOL_MIN */
  if (bytepool_size < TX_BYTE_POOL_MIN)
 8002b08:	68fb      	ldr	r3, [r7, #12]
 8002b0a:	2b63      	cmp	r3, #99	; 0x63
 8002b0c:	d801      	bhi.n	8002b12 <MemInit+0x56>
  {
    /* We should at least allocate TX_BYTE_POOL_MIN */
    bytepool_size = TX_BYTE_POOL_MIN;
 8002b0e:	2364      	movs	r3, #100	; 0x64
 8002b10:	60fb      	str	r3, [r7, #12]
  }

  /* Create a byte memory pool from which to allocate the timer control
     block */
  if (tx_byte_pool_create(&HeapBytePool, "Byte Pool Heap", unused_memory_Heap,
 8002b12:	68fb      	ldr	r3, [r7, #12]
 8002b14:	f503 7380 	add.w	r3, r3, #256	; 0x100
 8002b18:	2234      	movs	r2, #52	; 0x34
 8002b1a:	9200      	str	r2, [sp, #0]
 8002b1c:	687a      	ldr	r2, [r7, #4]
 8002b1e:	490b      	ldr	r1, [pc, #44]	; (8002b4c <MemInit+0x90>)
 8002b20:	480b      	ldr	r0, [pc, #44]	; (8002b50 <MemInit+0x94>)
 8002b22:	f001 ff0b 	bl	800493c <_txe_byte_pool_create>
 8002b26:	4603      	mov	r3, r0
 8002b28:	2b00      	cmp	r3, #0
 8002b2a:	d002      	beq.n	8002b32 <MemInit+0x76>
                          RTOS2_INTERNAL_BYTE_POOL_SIZE + bytepool_size) != TX_SUCCESS)
  {
    /* Return osError in case of error */
    return (osError);
 8002b2c:	f04f 33ff 	mov.w	r3, #4294967295
 8002b30:	e000      	b.n	8002b34 <MemInit+0x78>
  }
  #endif
#endif  
  return (osOK);
 8002b32:	2300      	movs	r3, #0
}
 8002b34:	4618      	mov	r0, r3
 8002b36:	3710      	adds	r7, #16
 8002b38:	46bd      	mov	sp, r7
 8002b3a:	bd80      	pop	{r7, pc}
 8002b3c:	200015ac 	.word	0x200015ac
 8002b40:	200052ac 	.word	0x200052ac
 8002b44:	0800639c 	.word	0x0800639c
 8002b48:	20001578 	.word	0x20001578
 8002b4c:	080063ac 	.word	0x080063ac
 8002b50:	20001544 	.word	0x20001544

08002b54 <osKernelInitialize>:
  *         Routines.
  * @param  none
  * @retval status code that indicates the execution status of the function.
  */
osStatus_t osKernelInitialize(void)
{
 8002b54:	b580      	push	{r7, lr}
 8002b56:	b082      	sub	sp, #8
 8002b58:	af00      	add	r7, sp, #0
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8002b5a:	f3ef 8305 	mrs	r3, IPSR
 8002b5e:	603b      	str	r3, [r7, #0]
  return(result);
 8002b60:	683b      	ldr	r3, [r7, #0]
  /* The output status code that indicates the execution status */
  osStatus_t status;

  /* Check if this API is called from Interrupt Service Routines */
  if (IS_IRQ_MODE())
 8002b62:	2b00      	cmp	r3, #0
 8002b64:	d003      	beq.n	8002b6e <osKernelInitialize+0x1a>
  {
    /* Return osErrorISR in case of error */
    status = osErrorISR;
 8002b66:	f06f 0305 	mvn.w	r3, #5
 8002b6a:	607b      	str	r3, [r7, #4]
 8002b6c:	e017      	b.n	8002b9e <osKernelInitialize+0x4a>
  }
  else
  {
    /* Check if the kernel state is osKernelInactive */
    if (KernelState == osKernelInactive)
 8002b6e:	4b0e      	ldr	r3, [pc, #56]	; (8002ba8 <osKernelInitialize+0x54>)
 8002b70:	681b      	ldr	r3, [r3, #0]
 8002b72:	2b00      	cmp	r3, #0
 8002b74:	d110      	bne.n	8002b98 <osKernelInitialize+0x44>
    {
      /* Initialize the kernel */
      _tx_initialize_kernel_setup();
 8002b76:	f000 fe23 	bl	80037c0 <_tx_initialize_kernel_setup>

      /* Initialize the Heap and stack memory BytePools */
      if (MemInit() == osOK)
 8002b7a:	f7ff ff9f 	bl	8002abc <MemInit>
 8002b7e:	4603      	mov	r3, r0
 8002b80:	2b00      	cmp	r3, #0
 8002b82:	d105      	bne.n	8002b90 <osKernelInitialize+0x3c>
      {
        /* Set the kernel state to osKernelReady */
        KernelState = osKernelReady;
 8002b84:	4b08      	ldr	r3, [pc, #32]	; (8002ba8 <osKernelInitialize+0x54>)
 8002b86:	2201      	movs	r2, #1
 8002b88:	601a      	str	r2, [r3, #0]

        /* Return osOK in case of success */
        status = osOK;
 8002b8a:	2300      	movs	r3, #0
 8002b8c:	607b      	str	r3, [r7, #4]
 8002b8e:	e006      	b.n	8002b9e <osKernelInitialize+0x4a>
      }
      else
      {
        /* Return osError in case of error */
        status = osError;
 8002b90:	f04f 33ff 	mov.w	r3, #4294967295
 8002b94:	607b      	str	r3, [r7, #4]
 8002b96:	e002      	b.n	8002b9e <osKernelInitialize+0x4a>
      }
    }
    else
    {
      /* Return osError in case of error */
      status = osError;
 8002b98:	f04f 33ff 	mov.w	r3, #4294967295
 8002b9c:	607b      	str	r3, [r7, #4]
    }
  }

  return (status);
 8002b9e:	687b      	ldr	r3, [r7, #4]
}
 8002ba0:	4618      	mov	r0, r3
 8002ba2:	3708      	adds	r7, #8
 8002ba4:	46bd      	mov	sp, r7
 8002ba6:	bd80      	pop	{r7, pc}
 8002ba8:	20001540 	.word	0x20001540

08002bac <osKernelStart>:
  *         Routines.
  * @param  none
  * @retval status code that indicates the execution status of the function.
  */
osStatus_t osKernelStart(void)
{
 8002bac:	b580      	push	{r7, lr}
 8002bae:	b082      	sub	sp, #8
 8002bb0:	af00      	add	r7, sp, #0
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8002bb2:	f3ef 8305 	mrs	r3, IPSR
 8002bb6:	603b      	str	r3, [r7, #0]
  return(result);
 8002bb8:	683b      	ldr	r3, [r7, #0]
  /* The output status code that indicates the execution status */
  osStatus_t status;

  /* Check if this API is called from Interrupt Service Routines */
  if (IS_IRQ_MODE())
 8002bba:	2b00      	cmp	r3, #0
 8002bbc:	d003      	beq.n	8002bc6 <osKernelStart+0x1a>
  {
    /* Return osErrorISR in case of error */
    status = osErrorISR;
 8002bbe:	f06f 0305 	mvn.w	r3, #5
 8002bc2:	607b      	str	r3, [r7, #4]
 8002bc4:	e00e      	b.n	8002be4 <osKernelStart+0x38>
  }
  else
  {
    /* Check if the kernel state is osKernelReady */
    if (KernelState == osKernelReady)
 8002bc6:	4b0a      	ldr	r3, [pc, #40]	; (8002bf0 <osKernelStart+0x44>)
 8002bc8:	681b      	ldr	r3, [r3, #0]
 8002bca:	2b01      	cmp	r3, #1
 8002bcc:	d107      	bne.n	8002bde <osKernelStart+0x32>
    {
      /* Set the kernel state to osKernelRunning */
      KernelState = osKernelRunning;
 8002bce:	4b08      	ldr	r3, [pc, #32]	; (8002bf0 <osKernelStart+0x44>)
 8002bd0:	2202      	movs	r2, #2
 8002bd2:	601a      	str	r2, [r3, #0]

      /* Return osOK in case of success */
      status = osOK;
 8002bd4:	2300      	movs	r3, #0
 8002bd6:	607b      	str	r3, [r7, #4]

      /* Start the Kernel */
      tx_kernel_enter();
 8002bd8:	f000 fdc8 	bl	800376c <_tx_initialize_kernel_enter>
 8002bdc:	e002      	b.n	8002be4 <osKernelStart+0x38>
    }
    else
    {
      /* Return osError in case of error */
      status = osError;
 8002bde:	f04f 33ff 	mov.w	r3, #4294967295
 8002be2:	607b      	str	r3, [r7, #4]
    }
  }

  return (status);
 8002be4:	687b      	ldr	r3, [r7, #4]
}
 8002be6:	4618      	mov	r0, r3
 8002be8:	3708      	adds	r7, #8
 8002bea:	46bd      	mov	sp, r7
 8002bec:	bd80      	pop	{r7, pc}
 8002bee:	bf00      	nop
 8002bf0:	20001540 	.word	0x20001540

08002bf4 <osDelay>:
  *         Routines.
  * @param  [in]  ticks time ticks value
  * @retval status code that indicates the execution status of the function.
  */
osStatus_t osDelay(uint32_t ticks)
{
 8002bf4:	b580      	push	{r7, lr}
 8002bf6:	b084      	sub	sp, #16
 8002bf8:	af00      	add	r7, sp, #0
 8002bfa:	6078      	str	r0, [r7, #4]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8002bfc:	f3ef 8305 	mrs	r3, IPSR
 8002c00:	60bb      	str	r3, [r7, #8]
  return(result);
 8002c02:	68bb      	ldr	r3, [r7, #8]
  /* The output status code that indicates the execution status */
  osStatus_t status;

  /* Check if this API is called from Interrupt Service Routines */
  if (IS_IRQ_MODE())
 8002c04:	2b00      	cmp	r3, #0
 8002c06:	d003      	beq.n	8002c10 <osDelay+0x1c>
  {
    /* Return osErrorISR in case of error */
    status = osErrorISR;
 8002c08:	f06f 0305 	mvn.w	r3, #5
 8002c0c:	60fb      	str	r3, [r7, #12]
 8002c0e:	e007      	b.n	8002c20 <osDelay+0x2c>
  }
  else
  {
    /* Return osOK in case of success */
    status = osOK;
 8002c10:	2300      	movs	r3, #0
 8002c12:	60fb      	str	r3, [r7, #12]

    /* Check that the input ticks != 0 */
    if (ticks != 0U)
 8002c14:	687b      	ldr	r3, [r7, #4]
 8002c16:	2b00      	cmp	r3, #0
 8002c18:	d002      	beq.n	8002c20 <osDelay+0x2c>
    {
      /* Sleep the thread */
      tx_thread_sleep(ticks);
 8002c1a:	6878      	ldr	r0, [r7, #4]
 8002c1c:	f000 ffcc 	bl	8003bb8 <_tx_thread_sleep>
    }
  }

  return (status);
 8002c20:	68fb      	ldr	r3, [r7, #12]
}
 8002c22:	4618      	mov	r0, r3
 8002c24:	3710      	adds	r7, #16
 8002c26:	46bd      	mov	sp, r7
 8002c28:	bd80      	pop	{r7, pc}

08002c2a <osThreadNew>:
  *               start argument.
  *         [in]  attr  thread attributes; NULL: default values.
  * @retval thread ID for reference by other functions or NULL in case of error.
  */
osThreadId_t osThreadNew(osThreadFunc_t func, void *argument, const osThreadAttr_t *attr)
{
 8002c2a:	b580      	push	{r7, lr}
 8002c2c:	b094      	sub	sp, #80	; 0x50
 8002c2e:	af08      	add	r7, sp, #32
 8002c30:	60f8      	str	r0, [r7, #12]
 8002c32:	60b9      	str	r1, [r7, #8]
 8002c34:	607a      	str	r2, [r7, #4]
  /* For ThreadX the control block pointer is the thread identifier */
  TX_THREAD *thread_ptr = NULL;
 8002c36:	2300      	movs	r3, #0
 8002c38:	62fb      	str	r3, [r7, #44]	; 0x2c
  /* Pointer to the thread name */
  CHAR *name_ptr = NULL;
 8002c3a:	2300      	movs	r3, #0
 8002c3c:	62bb      	str	r3, [r7, #40]	; 0x28
  /* The thread control block size */
  ULONG cb_size;
  /* The thread priority */
  UINT priority;
  /* The thread entry input */
  ULONG entry_input = 0;
 8002c3e:	2300      	movs	r3, #0
 8002c40:	617b      	str	r3, [r7, #20]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8002c42:	f3ef 8305 	mrs	r3, IPSR
 8002c46:	613b      	str	r3, [r7, #16]
  return(result);
 8002c48:	693b      	ldr	r3, [r7, #16]

  /* Check if this API is called from Interrupt Service Routines
     or the thread_id is NULL */
  if (!IS_IRQ_MODE() && (func != NULL))
 8002c4a:	2b00      	cmp	r3, #0
 8002c4c:	f040 80da 	bne.w	8002e04 <osThreadNew+0x1da>
 8002c50:	68fb      	ldr	r3, [r7, #12]
 8002c52:	2b00      	cmp	r3, #0
 8002c54:	f000 80d6 	beq.w	8002e04 <osThreadNew+0x1da>
  {
    /* Initialize the name_ptr to NULL */
    name_ptr = NULL;
 8002c58:	2300      	movs	r3, #0
 8002c5a:	62bb      	str	r3, [r7, #40]	; 0x28

    /* Check if the attr is not NULL */
    if (attr != NULL)
 8002c5c:	687b      	ldr	r3, [r7, #4]
 8002c5e:	2b00      	cmp	r3, #0
 8002c60:	d06f      	beq.n	8002d42 <osThreadNew+0x118>
    {
      /* Check if the name_ptr is not NULL */
      if (attr->name != NULL)
 8002c62:	687b      	ldr	r3, [r7, #4]
 8002c64:	681b      	ldr	r3, [r3, #0]
 8002c66:	2b00      	cmp	r3, #0
 8002c68:	d002      	beq.n	8002c70 <osThreadNew+0x46>
      {
        /* Set the thread name_ptr */
        name_ptr = (CHAR *)attr->name;
 8002c6a:	687b      	ldr	r3, [r7, #4]
 8002c6c:	681b      	ldr	r3, [r3, #0]
 8002c6e:	62bb      	str	r3, [r7, #40]	; 0x28
      }

      /* Check the input priority value and attribute bits for osThreadJoinable
         parameter */
      if ((attr->priority < osPriorityIdle) || (attr->priority > osPriorityISR))
 8002c70:	687b      	ldr	r3, [r7, #4]
 8002c72:	699b      	ldr	r3, [r3, #24]
 8002c74:	2b00      	cmp	r3, #0
 8002c76:	dd03      	ble.n	8002c80 <osThreadNew+0x56>
 8002c78:	687b      	ldr	r3, [r7, #4]
 8002c7a:	699b      	ldr	r3, [r3, #24]
 8002c7c:	2b38      	cmp	r3, #56	; 0x38
 8002c7e:	dd01      	ble.n	8002c84 <osThreadNew+0x5a>
      {
        /* Return NULL pointer in case of error */
        return (NULL);
 8002c80:	2300      	movs	r3, #0
 8002c82:	e0c0      	b.n	8002e06 <osThreadNew+0x1dc>
      }
      else
      {
        /* Set the thread priority */
        priority = osPriorityISR - attr->priority;
 8002c84:	687b      	ldr	r3, [r7, #4]
 8002c86:	699b      	ldr	r3, [r3, #24]
 8002c88:	f1c3 0338 	rsb	r3, r3, #56	; 0x38
 8002c8c:	61bb      	str	r3, [r7, #24]
      }

      /* Check if the argument is not NULL */
      if (argument != NULL)
 8002c8e:	68bb      	ldr	r3, [r7, #8]
 8002c90:	2b00      	cmp	r3, #0
 8002c92:	d001      	beq.n	8002c98 <osThreadNew+0x6e>
      {
        /* Set the entry_input */
        entry_input = (ULONG) argument;
 8002c94:	68bb      	ldr	r3, [r7, #8]
 8002c96:	617b      	str	r3, [r7, #20]
      }

      /* Check if the stack size is equal to 0 */
      if (attr->stack_size == 0U)
 8002c98:	687b      	ldr	r3, [r7, #4]
 8002c9a:	695b      	ldr	r3, [r3, #20]
 8002c9c:	2b00      	cmp	r3, #0
 8002c9e:	d103      	bne.n	8002ca8 <osThreadNew+0x7e>
      {
        /* Set stack size to DEFAULT_THREAD_STACK_SIZE */
        stack_size = RTOS2_DEFAULT_THREAD_STACK_SIZE;
 8002ca0:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8002ca4:	623b      	str	r3, [r7, #32]
 8002ca6:	e009      	b.n	8002cbc <osThreadNew+0x92>
      }
      else if (attr->stack_size < TX_BYTE_POOL_MIN)
 8002ca8:	687b      	ldr	r3, [r7, #4]
 8002caa:	695b      	ldr	r3, [r3, #20]
 8002cac:	2b63      	cmp	r3, #99	; 0x63
 8002cae:	d802      	bhi.n	8002cb6 <osThreadNew+0x8c>
      {
        /* Set stack size to TX_BYTE_POOL_MIN */
        stack_size = TX_BYTE_POOL_MIN;
 8002cb0:	2364      	movs	r3, #100	; 0x64
 8002cb2:	623b      	str	r3, [r7, #32]
 8002cb4:	e002      	b.n	8002cbc <osThreadNew+0x92>
      }
      else
      {
        /* Set stack size to attr->stack_size */
        stack_size = (ULONG)attr->stack_size;
 8002cb6:	687b      	ldr	r3, [r7, #4]
 8002cb8:	695b      	ldr	r3, [r3, #20]
 8002cba:	623b      	str	r3, [r7, #32]
      }

      /* Check if the input stack pointer is NULL */
      if (attr->stack_mem == NULL)
 8002cbc:	687b      	ldr	r3, [r7, #4]
 8002cbe:	691b      	ldr	r3, [r3, #16]
 8002cc0:	2b00      	cmp	r3, #0
 8002cc2:	d109      	bne.n	8002cd8 <osThreadNew+0xae>
      {
        /* Allocate the stack for the thread to be created */
        stack_start = MemAlloc(stack_size, RTOS2_BYTE_POOL_STACK_TYPE);
 8002cc4:	2101      	movs	r1, #1
 8002cc6:	6a38      	ldr	r0, [r7, #32]
 8002cc8:	f7ff fea8 	bl	8002a1c <MemAlloc>
 8002ccc:	6278      	str	r0, [r7, #36]	; 0x24
        if (stack_start == NULL)
 8002cce:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002cd0:	2b00      	cmp	r3, #0
 8002cd2:	d10d      	bne.n	8002cf0 <osThreadNew+0xc6>
        {
          /* Return NULL pointer in case of error */
          return (NULL);
 8002cd4:	2300      	movs	r3, #0
 8002cd6:	e096      	b.n	8002e06 <osThreadNew+0x1dc>
        }
      }
      else
      {
        if (attr->stack_size == 0U)
 8002cd8:	687b      	ldr	r3, [r7, #4]
 8002cda:	695b      	ldr	r3, [r3, #20]
 8002cdc:	2b00      	cmp	r3, #0
 8002cde:	d101      	bne.n	8002ce4 <osThreadNew+0xba>
        {
          /* Return NULL pointer in case of error */
          return (NULL);
 8002ce0:	2300      	movs	r3, #0
 8002ce2:	e090      	b.n	8002e06 <osThreadNew+0x1dc>
        }
        else
        {
          /* Set stack size to the input attr->stack_size */
          stack_size = (ULONG)attr->stack_size;
 8002ce4:	687b      	ldr	r3, [r7, #4]
 8002ce6:	695b      	ldr	r3, [r3, #20]
 8002ce8:	623b      	str	r3, [r7, #32]
        }

        /* The stack shall point to the input stack memory address */
        stack_start = attr->stack_mem;
 8002cea:	687b      	ldr	r3, [r7, #4]
 8002cec:	691b      	ldr	r3, [r3, #16]
 8002cee:	627b      	str	r3, [r7, #36]	; 0x24
      }

      /* Check if the control block size is equal to 0 */
      if (attr->cb_size == 0U)
 8002cf0:	687b      	ldr	r3, [r7, #4]
 8002cf2:	68db      	ldr	r3, [r3, #12]
 8002cf4:	2b00      	cmp	r3, #0
 8002cf6:	d102      	bne.n	8002cfe <osThreadNew+0xd4>
      {
        /* Set control block size to sizeof(TX_THREAD) */
        cb_size = sizeof(TX_THREAD);
 8002cf8:	23b4      	movs	r3, #180	; 0xb4
 8002cfa:	61fb      	str	r3, [r7, #28]
 8002cfc:	e008      	b.n	8002d10 <osThreadNew+0xe6>
      }
      else if (attr->cb_size < sizeof(TX_THREAD))
 8002cfe:	687b      	ldr	r3, [r7, #4]
 8002d00:	68db      	ldr	r3, [r3, #12]
 8002d02:	2bb3      	cmp	r3, #179	; 0xb3
 8002d04:	d801      	bhi.n	8002d0a <osThreadNew+0xe0>
      {
        /* Return NULL pointer in case of error */
        return (NULL);
 8002d06:	2300      	movs	r3, #0
 8002d08:	e07d      	b.n	8002e06 <osThreadNew+0x1dc>
      }
      else
      {
        /* Set stack size to attr->cb_size */
        cb_size = (ULONG)attr->cb_size;
 8002d0a:	687b      	ldr	r3, [r7, #4]
 8002d0c:	68db      	ldr	r3, [r3, #12]
 8002d0e:	61fb      	str	r3, [r7, #28]
      }

      /* Check if the input control block pointer is NULL */
      if (attr->cb_mem == NULL)
 8002d10:	687b      	ldr	r3, [r7, #4]
 8002d12:	689b      	ldr	r3, [r3, #8]
 8002d14:	2b00      	cmp	r3, #0
 8002d16:	d110      	bne.n	8002d3a <osThreadNew+0x110>
      {
        /* Allocate the thread_ptr structure for the thread to be created */
        thread_ptr = (TX_THREAD *)MemAlloc(cb_size, RTOS2_BYTE_POOL_HEAP_TYPE);
 8002d18:	2102      	movs	r1, #2
 8002d1a:	69f8      	ldr	r0, [r7, #28]
 8002d1c:	f7ff fe7e 	bl	8002a1c <MemAlloc>
 8002d20:	62f8      	str	r0, [r7, #44]	; 0x2c
        if (thread_ptr == NULL)
 8002d22:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002d24:	2b00      	cmp	r3, #0
 8002d26:	d12f      	bne.n	8002d88 <osThreadNew+0x15e>
        {
          /* Check if the memory for thread stack has been internally
             allocated */
          if (attr->stack_mem == NULL)
 8002d28:	687b      	ldr	r3, [r7, #4]
 8002d2a:	691b      	ldr	r3, [r3, #16]
 8002d2c:	2b00      	cmp	r3, #0
 8002d2e:	d102      	bne.n	8002d36 <osThreadNew+0x10c>
          {
            /* Free the already allocated memory for thread stack */
            MemFree(stack_start);
 8002d30:	6a78      	ldr	r0, [r7, #36]	; 0x24
 8002d32:	f7ff fea7 	bl	8002a84 <MemFree>
          }
          /* Return NULL pointer in case of error */
          return (NULL);
 8002d36:	2300      	movs	r3, #0
 8002d38:	e065      	b.n	8002e06 <osThreadNew+0x1dc>
        }
      }
      else
      {
        /* The control block shall point to the input cb_mem memory address */
        thread_ptr = attr->cb_mem;
 8002d3a:	687b      	ldr	r3, [r7, #4]
 8002d3c:	689b      	ldr	r3, [r3, #8]
 8002d3e:	62fb      	str	r3, [r7, #44]	; 0x2c
 8002d40:	e022      	b.n	8002d88 <osThreadNew+0x15e>
      }
    }
    else
    {
      /* Set the thread priority to default osPriorityNormal*/
      priority = osPriorityISR - osPriorityNormal;
 8002d42:	2320      	movs	r3, #32
 8002d44:	61bb      	str	r3, [r7, #24]

      /* Initialize the name_ptr to NULL */
      name_ptr = NULL;
 8002d46:	2300      	movs	r3, #0
 8002d48:	62bb      	str	r3, [r7, #40]	; 0x28

      /* Initialize the stack_size to RTOS2_DEFAULT_THREAD_STACK_SIZE */
      stack_size = RTOS2_DEFAULT_THREAD_STACK_SIZE;
 8002d4a:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8002d4e:	623b      	str	r3, [r7, #32]

      /* Check if the argument is not NULL */
      if (argument != NULL)
 8002d50:	68bb      	ldr	r3, [r7, #8]
 8002d52:	2b00      	cmp	r3, #0
 8002d54:	d001      	beq.n	8002d5a <osThreadNew+0x130>
      {
        /* Set the entry_input */
        entry_input = (ULONG) argument;
 8002d56:	68bb      	ldr	r3, [r7, #8]
 8002d58:	617b      	str	r3, [r7, #20]
      }

      /* Allocate the stack for the thread to be created */
      stack_start = MemAlloc(stack_size, RTOS2_BYTE_POOL_STACK_TYPE);
 8002d5a:	2101      	movs	r1, #1
 8002d5c:	6a38      	ldr	r0, [r7, #32]
 8002d5e:	f7ff fe5d 	bl	8002a1c <MemAlloc>
 8002d62:	6278      	str	r0, [r7, #36]	; 0x24
      if (stack_start == NULL)
 8002d64:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002d66:	2b00      	cmp	r3, #0
 8002d68:	d101      	bne.n	8002d6e <osThreadNew+0x144>
      {
        /* Return NULL pointer in case of error */
        return (NULL);
 8002d6a:	2300      	movs	r3, #0
 8002d6c:	e04b      	b.n	8002e06 <osThreadNew+0x1dc>
      }

      /* Allocate the thread_ptr structure for the thread to be created */
      thread_ptr = (TX_THREAD *)MemAlloc(sizeof(TX_THREAD), RTOS2_BYTE_POOL_HEAP_TYPE);
 8002d6e:	2102      	movs	r1, #2
 8002d70:	20b4      	movs	r0, #180	; 0xb4
 8002d72:	f7ff fe53 	bl	8002a1c <MemAlloc>
 8002d76:	62f8      	str	r0, [r7, #44]	; 0x2c
      if (thread_ptr == NULL)
 8002d78:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002d7a:	2b00      	cmp	r3, #0
 8002d7c:	d104      	bne.n	8002d88 <osThreadNew+0x15e>
      {
        /* Free the already allocated memory for thread stack */
        MemFree(stack_start);
 8002d7e:	6a78      	ldr	r0, [r7, #36]	; 0x24
 8002d80:	f7ff fe80 	bl	8002a84 <MemFree>

        /* Return NULL pointer in case of error */
        return (NULL);
 8002d84:	2300      	movs	r3, #0
 8002d86:	e03e      	b.n	8002e06 <osThreadNew+0x1dc>

    /* Call the tx_thread_create function to create the new thread.
       Note: By default the preempt_threshold shall be deactivated by setting
       its value to the priority or deactivated using
       TX_DISABLE_PREEMPTION_THRESHOLD */
    if (tx_thread_create(thread_ptr, name_ptr, (void(*)(ULONG))func, entry_input, stack_start, stack_size, priority,
 8002d88:	23b4      	movs	r3, #180	; 0xb4
 8002d8a:	9306      	str	r3, [sp, #24]
 8002d8c:	2301      	movs	r3, #1
 8002d8e:	9305      	str	r3, [sp, #20]
 8002d90:	2304      	movs	r3, #4
 8002d92:	9304      	str	r3, [sp, #16]
 8002d94:	69bb      	ldr	r3, [r7, #24]
 8002d96:	9303      	str	r3, [sp, #12]
 8002d98:	69bb      	ldr	r3, [r7, #24]
 8002d9a:	9302      	str	r3, [sp, #8]
 8002d9c:	6a3b      	ldr	r3, [r7, #32]
 8002d9e:	9301      	str	r3, [sp, #4]
 8002da0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002da2:	9300      	str	r3, [sp, #0]
 8002da4:	697b      	ldr	r3, [r7, #20]
 8002da6:	68fa      	ldr	r2, [r7, #12]
 8002da8:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8002daa:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 8002dac:	f001 fea2 	bl	8004af4 <_txe_thread_create>
 8002db0:	4603      	mov	r3, r0
 8002db2:	2b00      	cmp	r3, #0
 8002db4:	d016      	beq.n	8002de4 <osThreadNew+0x1ba>
                         priority, RTOS2_DEFAULT_TIME_SLICE, TX_AUTO_START) != TX_SUCCESS)
    {
      /* Check if the memory for thread control block has been internally
         allocated */
      if ((attr->cb_mem == NULL) || (attr == NULL))
 8002db6:	687b      	ldr	r3, [r7, #4]
 8002db8:	689b      	ldr	r3, [r3, #8]
 8002dba:	2b00      	cmp	r3, #0
 8002dbc:	d002      	beq.n	8002dc4 <osThreadNew+0x19a>
 8002dbe:	687b      	ldr	r3, [r7, #4]
 8002dc0:	2b00      	cmp	r3, #0
 8002dc2:	d102      	bne.n	8002dca <osThreadNew+0x1a0>
      {
        /* Free the already allocated memory for thread control block */
        MemFree(thread_ptr);
 8002dc4:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 8002dc6:	f7ff fe5d 	bl	8002a84 <MemFree>
      }

      /* Check if the memory for thread stack has been internally allocated */
      if ((attr->stack_mem == NULL) || (attr == NULL))
 8002dca:	687b      	ldr	r3, [r7, #4]
 8002dcc:	691b      	ldr	r3, [r3, #16]
 8002dce:	2b00      	cmp	r3, #0
 8002dd0:	d002      	beq.n	8002dd8 <osThreadNew+0x1ae>
 8002dd2:	687b      	ldr	r3, [r7, #4]
 8002dd4:	2b00      	cmp	r3, #0
 8002dd6:	d102      	bne.n	8002dde <osThreadNew+0x1b4>
      {
        /* Free the already allocated memory for thread stack */
        MemFree(stack_start);
 8002dd8:	6a78      	ldr	r0, [r7, #36]	; 0x24
 8002dda:	f7ff fe53 	bl	8002a84 <MemFree>
      }

      /* Return NULL pointer in case of error */
      thread_ptr = NULL;
 8002dde:	2300      	movs	r3, #0
 8002de0:	62fb      	str	r3, [r7, #44]	; 0x2c
 8002de2:	e00f      	b.n	8002e04 <osThreadNew+0x1da>
    }
    else
    {
      /* Check if the thread shall be created joinable */
      if ((attr != NULL) && (attr->attr_bits == osThreadJoinable))
 8002de4:	687b      	ldr	r3, [r7, #4]
 8002de6:	2b00      	cmp	r3, #0
 8002de8:	d008      	beq.n	8002dfc <osThreadNew+0x1d2>
 8002dea:	687b      	ldr	r3, [r7, #4]
 8002dec:	685b      	ldr	r3, [r3, #4]
 8002dee:	2b01      	cmp	r3, #1
 8002df0:	d104      	bne.n	8002dfc <osThreadNew+0x1d2>
      {
        /* Set the thread to Joinable state */
        thread_ptr->tx_thread_detached_joinable = osThreadJoinable;
 8002df2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002df4:	2201      	movs	r2, #1
 8002df6:	f8c3 20b0 	str.w	r2, [r3, #176]	; 0xb0
 8002dfa:	e003      	b.n	8002e04 <osThreadNew+0x1da>
      }
      else
      {
        /* Set the thread to Detached state */
        thread_ptr->tx_thread_detached_joinable = osThreadDetached;
 8002dfc:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002dfe:	2200      	movs	r2, #0
 8002e00:	f8c3 20b0 	str.w	r2, [r3, #176]	; 0xb0
      }
    }
  }

  return ((osThreadId_t)thread_ptr);
 8002e04:	6afb      	ldr	r3, [r7, #44]	; 0x2c
}
 8002e06:	4618      	mov	r0, r3
 8002e08:	3730      	adds	r7, #48	; 0x30
 8002e0a:	46bd      	mov	sp, r7
 8002e0c:	bd80      	pop	{r7, pc}
	...

08002e10 <osThreadSuspend>:
  *         Routines.
  * @param  [in] thread_id thread ID obtained by osThreadNew or osThreadGetId.
  * @retval status code that indicates the execution status of the function.
  */
osStatus_t osThreadSuspend(osThreadId_t thread_id)
{
 8002e10:	b580      	push	{r7, lr}
 8002e12:	b086      	sub	sp, #24
 8002e14:	af00      	add	r7, sp, #0
 8002e16:	6078      	str	r0, [r7, #4]
  /* For ThreadX the control block pointer is the thread identifier */
  TX_THREAD *thread_ptr = (TX_THREAD *)thread_id;
 8002e18:	687b      	ldr	r3, [r7, #4]
 8002e1a:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8002e1c:	f3ef 8305 	mrs	r3, IPSR
 8002e20:	60fb      	str	r3, [r7, #12]
  return(result);
 8002e22:	68fb      	ldr	r3, [r7, #12]
  /* The returned status or error */
  osStatus_t status;

  /* Check if this API is called from Interrupt Service Routines */
  if (IS_IRQ_MODE())
 8002e24:	2b00      	cmp	r3, #0
 8002e26:	d003      	beq.n	8002e30 <osThreadSuspend+0x20>
  {
    /* Return osErrorISR error */
    status = osErrorISR;
 8002e28:	f06f 0305 	mvn.w	r3, #5
 8002e2c:	617b      	str	r3, [r7, #20]
 8002e2e:	e017      	b.n	8002e60 <osThreadSuspend+0x50>
  }
  /* Check if the thread ID is NULL or (tx_thread_id != TX_THREAD_ID) */
  else if ((thread_id == NULL) || (thread_ptr->tx_thread_id != TX_THREAD_ID))
 8002e30:	687b      	ldr	r3, [r7, #4]
 8002e32:	2b00      	cmp	r3, #0
 8002e34:	d004      	beq.n	8002e40 <osThreadSuspend+0x30>
 8002e36:	693b      	ldr	r3, [r7, #16]
 8002e38:	681b      	ldr	r3, [r3, #0]
 8002e3a:	4a0c      	ldr	r2, [pc, #48]	; (8002e6c <osThreadSuspend+0x5c>)
 8002e3c:	4293      	cmp	r3, r2
 8002e3e:	d003      	beq.n	8002e48 <osThreadSuspend+0x38>
  {
    /* Return osErrorParameter error */
    status = osErrorParameter;
 8002e40:	f06f 0303 	mvn.w	r3, #3
 8002e44:	617b      	str	r3, [r7, #20]
 8002e46:	e00b      	b.n	8002e60 <osThreadSuspend+0x50>
  }
  else
  {
    /* Call the tx_thread_suspend to suspends the specified application
      thread. A thread may call this service to suspend itself. */
    if (tx_thread_suspend(thread_ptr) == TX_SUCCESS)
 8002e48:	6938      	ldr	r0, [r7, #16]
 8002e4a:	f001 ff63 	bl	8004d14 <_txe_thread_suspend>
 8002e4e:	4603      	mov	r3, r0
 8002e50:	2b00      	cmp	r3, #0
 8002e52:	d102      	bne.n	8002e5a <osThreadSuspend+0x4a>
    {
      /* Return osOK for success */
      status = osOK;
 8002e54:	2300      	movs	r3, #0
 8002e56:	617b      	str	r3, [r7, #20]
 8002e58:	e002      	b.n	8002e60 <osThreadSuspend+0x50>
    }
    else
    {
      /* Return osErrorResource in case of error */
      status = osErrorResource;
 8002e5a:	f06f 0302 	mvn.w	r3, #2
 8002e5e:	617b      	str	r3, [r7, #20]
    }
  }

  return (status);
 8002e60:	697b      	ldr	r3, [r7, #20]
}
 8002e62:	4618      	mov	r0, r3
 8002e64:	3718      	adds	r7, #24
 8002e66:	46bd      	mov	sp, r7
 8002e68:	bd80      	pop	{r7, pc}
 8002e6a:	bf00      	nop
 8002e6c:	54485244 	.word	0x54485244

08002e70 <osThreadResume>:
  *         Routines.
  * @param  [in] thread_id thread ID obtained by osThreadNew or osThreadGetId.
  * @retval status code that indicates the execution status of the function.
  */
osStatus_t osThreadResume(osThreadId_t thread_id)
{
 8002e70:	b580      	push	{r7, lr}
 8002e72:	b086      	sub	sp, #24
 8002e74:	af00      	add	r7, sp, #0
 8002e76:	6078      	str	r0, [r7, #4]
  /* For ThreadX the control block pointer is the thread identifier */
  TX_THREAD *thread_ptr = (TX_THREAD *)thread_id;
 8002e78:	687b      	ldr	r3, [r7, #4]
 8002e7a:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8002e7c:	f3ef 8305 	mrs	r3, IPSR
 8002e80:	60fb      	str	r3, [r7, #12]
  return(result);
 8002e82:	68fb      	ldr	r3, [r7, #12]
  /* The returned status or error */
  osStatus_t status;

  /* Check if this API is called from Interrupt Service Routines */
  if (IS_IRQ_MODE())
 8002e84:	2b00      	cmp	r3, #0
 8002e86:	d003      	beq.n	8002e90 <osThreadResume+0x20>
  {
    /* Return osErrorISR error */
    status = osErrorISR;
 8002e88:	f06f 0305 	mvn.w	r3, #5
 8002e8c:	617b      	str	r3, [r7, #20]
 8002e8e:	e017      	b.n	8002ec0 <osThreadResume+0x50>
  }
  /* Check if the thread ID is NULL or (tx_thread_id != TX_THREAD_ID) */
  else if ((thread_id == NULL) || (thread_ptr->tx_thread_id != TX_THREAD_ID))
 8002e90:	687b      	ldr	r3, [r7, #4]
 8002e92:	2b00      	cmp	r3, #0
 8002e94:	d004      	beq.n	8002ea0 <osThreadResume+0x30>
 8002e96:	693b      	ldr	r3, [r7, #16]
 8002e98:	681b      	ldr	r3, [r3, #0]
 8002e9a:	4a0c      	ldr	r2, [pc, #48]	; (8002ecc <osThreadResume+0x5c>)
 8002e9c:	4293      	cmp	r3, r2
 8002e9e:	d003      	beq.n	8002ea8 <osThreadResume+0x38>
  {
    /* Return osErrorParameter error */
    status = osErrorParameter;
 8002ea0:	f06f 0303 	mvn.w	r3, #3
 8002ea4:	617b      	str	r3, [r7, #20]
 8002ea6:	e00b      	b.n	8002ec0 <osThreadResume+0x50>
  {
    /* Call the tx_thread_resume to resumes or prepares for execution a thread
      that was previously suspended by a tx_thread_suspend call. In addition,
      this service resumes threads that were created without an automatic
      start. */
    if (tx_thread_resume(thread_ptr) == TX_SUCCESS)
 8002ea8:	6938      	ldr	r0, [r7, #16]
 8002eaa:	f001 ff15 	bl	8004cd8 <_txe_thread_resume>
 8002eae:	4603      	mov	r3, r0
 8002eb0:	2b00      	cmp	r3, #0
 8002eb2:	d102      	bne.n	8002eba <osThreadResume+0x4a>
    {
      /* Return osOK for success */
      status = osOK;
 8002eb4:	2300      	movs	r3, #0
 8002eb6:	617b      	str	r3, [r7, #20]
 8002eb8:	e002      	b.n	8002ec0 <osThreadResume+0x50>
    }
    else
    {
      /* Return osErrorResource in case of error */
      status = osErrorResource;
 8002eba:	f06f 0302 	mvn.w	r3, #2
 8002ebe:	617b      	str	r3, [r7, #20]
    }
  }

  return (status);
 8002ec0:	697b      	ldr	r3, [r7, #20]
}
 8002ec2:	4618      	mov	r0, r3
 8002ec4:	3718      	adds	r7, #24
 8002ec6:	46bd      	mov	sp, r7
 8002ec8:	bd80      	pop	{r7, pc}
 8002eca:	bf00      	nop
 8002ecc:	54485244 	.word	0x54485244

08002ed0 <_tx_byte_allocate>:
/*  09-30-2020     Yuxin Zhou               Modified comment(s),          */
/*                                            resulting in version 6.1    */
/*                                                                        */
/**************************************************************************/
UINT  _tx_byte_allocate(TX_BYTE_POOL *pool_ptr, VOID **memory_ptr, ULONG memory_size,  ULONG wait_option)
{
 8002ed0:	b580      	push	{r7, lr}
 8002ed2:	b096      	sub	sp, #88	; 0x58
 8002ed4:	af00      	add	r7, sp, #0
 8002ed6:	60f8      	str	r0, [r7, #12]
 8002ed8:	60b9      	str	r1, [r7, #8]
 8002eda:	607a      	str	r2, [r7, #4]
 8002edc:	603b      	str	r3, [r7, #0]
#endif


    /* Round the memory size up to the next size that is evenly divisible by
       an ALIGN_TYPE (this is typically a 32-bit ULONG).  This guarantees proper alignment.  */
    memory_size = (((memory_size + (sizeof(ALIGN_TYPE)))-((ALIGN_TYPE) 1))/(sizeof(ALIGN_TYPE))) * (sizeof(ALIGN_TYPE));
 8002ede:	687b      	ldr	r3, [r7, #4]
 8002ee0:	3303      	adds	r3, #3
 8002ee2:	f023 0303 	bic.w	r3, r3, #3
 8002ee6:	607b      	str	r3, [r7, #4]
{
unsigned int posture;
#ifdef TX_PORT_USE_BASEPRI
    __asm__ volatile ("MRS  %0, BASEPRI ": "=r" (posture));
#else
    __asm__ volatile ("MRS  %0, PRIMASK ": "=r" (posture));
 8002ee8:	f3ef 8310 	mrs	r3, PRIMASK
 8002eec:	637b      	str	r3, [r7, #52]	; 0x34
#endif
    return(posture);
 8002eee:	6b7b      	ldr	r3, [r7, #52]	; 0x34

__attribute__( ( always_inline ) ) static inline unsigned int __disable_interrupts(void)
{
unsigned int int_posture;

    int_posture = __get_interrupt_posture();
 8002ef0:	633b      	str	r3, [r7, #48]	; 0x30

#ifdef TX_PORT_USE_BASEPRI
    __set_basepri_value(TX_PORT_BASEPRI);
#else
    __asm__ volatile ("CPSID i" : : : "memory");
 8002ef2:	b672      	cpsid	i
#endif
    return(int_posture);
 8002ef4:	6b3b      	ldr	r3, [r7, #48]	; 0x30

    /* Disable interrupts.  */
    TX_DISABLE
 8002ef6:	657b      	str	r3, [r7, #84]	; 0x54

    /* Pickup thread pointer.  */
    TX_THREAD_GET_CURRENT(thread_ptr)
 8002ef8:	4b55      	ldr	r3, [pc, #340]	; (8003050 <_tx_byte_allocate+0x180>)
 8002efa:	681b      	ldr	r3, [r3, #0]
 8002efc:	64bb      	str	r3, [r7, #72]	; 0x48
    lower_tbu =  *((ULONG *) (log_entry_ptr + TX_EL_EVENT_TIME_LOWER_OFFSET));
    upper_tbu =  *((ULONG *) (log_entry_ptr + TX_EL_EVENT_TIME_UPPER_OFFSET));
#endif

    /* Set the search finished flag to false.  */
    finished =  TX_FALSE;
 8002efe:	2300      	movs	r3, #0
 8002f00:	64fb      	str	r3, [r7, #76]	; 0x4c
    /* Loop to handle cases where the owner of the pool changed.  */
    do
    {

        /* Indicate that this thread is the current owner.  */
        pool_ptr -> tx_byte_pool_owner =  thread_ptr;
 8002f02:	68fb      	ldr	r3, [r7, #12]
 8002f04:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8002f06:	621a      	str	r2, [r3, #32]
 8002f08:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8002f0a:	627b      	str	r3, [r7, #36]	; 0x24
    __asm__ volatile ("MSR  PRIMASK,%0": : "r" (int_posture): "memory");
 8002f0c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002f0e:	f383 8810 	msr	PRIMASK, r3
}
 8002f12:	bf00      	nop
        /* Restore interrupts.  */
        TX_RESTORE

        /* At this point, the executing thread owns the pool and can perform a search
           for free memory.  */
        work_ptr =  _tx_byte_pool_search(pool_ptr, memory_size);
 8002f14:	6879      	ldr	r1, [r7, #4]
 8002f16:	68f8      	ldr	r0, [r7, #12]
 8002f18:	f000 f9b2 	bl	8003280 <_tx_byte_pool_search>
 8002f1c:	6478      	str	r0, [r7, #68]	; 0x44
    __asm__ volatile ("MRS  %0, PRIMASK ": "=r" (posture));
 8002f1e:	f3ef 8310 	mrs	r3, PRIMASK
 8002f22:	62fb      	str	r3, [r7, #44]	; 0x2c
    return(posture);
 8002f24:	6afb      	ldr	r3, [r7, #44]	; 0x2c
    int_posture = __get_interrupt_posture();
 8002f26:	62bb      	str	r3, [r7, #40]	; 0x28
    __asm__ volatile ("CPSID i" : : : "memory");
 8002f28:	b672      	cpsid	i
    return(int_posture);
 8002f2a:	6abb      	ldr	r3, [r7, #40]	; 0x28

        /* Optional processing extension.  */
        TX_BYTE_ALLOCATE_EXTENSION

        /* Lockout interrupts.  */
        TX_DISABLE
 8002f2c:	657b      	str	r3, [r7, #84]	; 0x54

        /* Determine if we are finished.  */
        if (work_ptr != TX_NULL)
 8002f2e:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8002f30:	2b00      	cmp	r3, #0
 8002f32:	d002      	beq.n	8002f3a <_tx_byte_allocate+0x6a>
        {

            /* Yes, we have found a block the search is finished.  */
            finished =  TX_TRUE;
 8002f34:	2301      	movs	r3, #1
 8002f36:	64fb      	str	r3, [r7, #76]	; 0x4c
 8002f38:	e006      	b.n	8002f48 <_tx_byte_allocate+0x78>
        }
        else
        {

            /* No block was found, does this thread still own the pool?  */
            if (pool_ptr -> tx_byte_pool_owner == thread_ptr)
 8002f3a:	68fb      	ldr	r3, [r7, #12]
 8002f3c:	6a1b      	ldr	r3, [r3, #32]
 8002f3e:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8002f40:	429a      	cmp	r2, r3
 8002f42:	d101      	bne.n	8002f48 <_tx_byte_allocate+0x78>
            {

                /* Yes, then we have looked through the entire pool and haven't found the memory.  */
                finished =  TX_TRUE;
 8002f44:	2301      	movs	r3, #1
 8002f46:	64fb      	str	r3, [r7, #76]	; 0x4c
            }
        }

    } while (finished == TX_FALSE);
 8002f48:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8002f4a:	2b00      	cmp	r3, #0
 8002f4c:	d0d9      	beq.n	8002f02 <_tx_byte_allocate+0x32>

    /* Copy the pointer into the return destination.  */
    *memory_ptr =  (VOID *) work_ptr;
 8002f4e:	68bb      	ldr	r3, [r7, #8]
 8002f50:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8002f52:	601a      	str	r2, [r3, #0]

    /* Determine if memory was found.  */
    if (work_ptr != TX_NULL)
 8002f54:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8002f56:	2b00      	cmp	r3, #0
 8002f58:	d008      	beq.n	8002f6c <_tx_byte_allocate+0x9c>
 8002f5a:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8002f5c:	623b      	str	r3, [r7, #32]
    __asm__ volatile ("MSR  PRIMASK,%0": : "r" (int_posture): "memory");
 8002f5e:	6a3b      	ldr	r3, [r7, #32]
 8002f60:	f383 8810 	msr	PRIMASK, r3
}
 8002f64:	bf00      	nop

        /* Restore interrupts.  */
        TX_RESTORE

        /* Set the status to success.  */
        status =  TX_SUCCESS;
 8002f66:	2300      	movs	r3, #0
 8002f68:	653b      	str	r3, [r7, #80]	; 0x50
 8002f6a:	e06c      	b.n	8003046 <_tx_byte_allocate+0x176>
    {

        /* No memory of sufficient size was found...  */

        /* Determine if the request specifies suspension.  */
        if (wait_option != TX_NO_WAIT)
 8002f6c:	683b      	ldr	r3, [r7, #0]
 8002f6e:	2b00      	cmp	r3, #0
 8002f70:	d061      	beq.n	8003036 <_tx_byte_allocate+0x166>
        {

            /* Determine if the preempt disable flag is non-zero.  */
            if (_tx_thread_preempt_disable != ((UINT) 0))
 8002f72:	4b38      	ldr	r3, [pc, #224]	; (8003054 <_tx_byte_allocate+0x184>)
 8002f74:	681b      	ldr	r3, [r3, #0]
 8002f76:	2b00      	cmp	r3, #0
 8002f78:	d007      	beq.n	8002f8a <_tx_byte_allocate+0xba>
            {

                /* Suspension is not allowed if the preempt disable flag is non-zero at this point - return error completion.  */
                status =  TX_NO_MEMORY;
 8002f7a:	2310      	movs	r3, #16
 8002f7c:	653b      	str	r3, [r7, #80]	; 0x50
 8002f7e:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8002f80:	61fb      	str	r3, [r7, #28]
    __asm__ volatile ("MSR  PRIMASK,%0": : "r" (int_posture): "memory");
 8002f82:	69fb      	ldr	r3, [r7, #28]
 8002f84:	f383 8810 	msr	PRIMASK, r3
}
 8002f88:	e05d      	b.n	8003046 <_tx_byte_allocate+0x176>
                /* Increment the number of suspensions on this pool.  */
                pool_ptr -> tx_byte_pool_performance_suspension_count++;
#endif

                /* Setup cleanup routine pointer.  */
                thread_ptr -> tx_thread_suspend_cleanup =  &(_tx_byte_pool_cleanup);
 8002f8a:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8002f8c:	4a32      	ldr	r2, [pc, #200]	; (8003058 <_tx_byte_allocate+0x188>)
 8002f8e:	669a      	str	r2, [r3, #104]	; 0x68

                /* Setup cleanup information, i.e. this pool control
                   block.  */
                thread_ptr -> tx_thread_suspend_control_block =  (VOID *) pool_ptr;
 8002f90:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8002f92:	68fa      	ldr	r2, [r7, #12]
 8002f94:	66da      	str	r2, [r3, #108]	; 0x6c

                /* Save the return memory pointer address as well.  */
                thread_ptr -> tx_thread_additional_suspend_info =  (VOID *) memory_ptr;
 8002f96:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8002f98:	68ba      	ldr	r2, [r7, #8]
 8002f9a:	67da      	str	r2, [r3, #124]	; 0x7c

                /* Save the byte size requested.  */
                thread_ptr -> tx_thread_suspend_info =  memory_size;
 8002f9c:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8002f9e:	687a      	ldr	r2, [r7, #4]
 8002fa0:	679a      	str	r2, [r3, #120]	; 0x78

#ifndef TX_NOT_INTERRUPTABLE

                /* Increment the suspension sequence number, which is used to identify
                   this suspension event.  */
                thread_ptr -> tx_thread_suspension_sequence++;
 8002fa2:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8002fa4:	f8d3 30ac 	ldr.w	r3, [r3, #172]	; 0xac
 8002fa8:	1c5a      	adds	r2, r3, #1
 8002faa:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8002fac:	f8c3 20ac 	str.w	r2, [r3, #172]	; 0xac
#endif

                /* Pickup the number of suspended threads.  */
                suspended_count =  pool_ptr -> tx_byte_pool_suspended_count;
 8002fb0:	68fb      	ldr	r3, [r7, #12]
 8002fb2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002fb4:	643b      	str	r3, [r7, #64]	; 0x40

                /* Increment the suspension count.  */
                (pool_ptr -> tx_byte_pool_suspended_count)++;
 8002fb6:	68fb      	ldr	r3, [r7, #12]
 8002fb8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002fba:	1c5a      	adds	r2, r3, #1
 8002fbc:	68fb      	ldr	r3, [r7, #12]
 8002fbe:	629a      	str	r2, [r3, #40]	; 0x28

                /* Setup suspension list.  */
                if (suspended_count == TX_NO_SUSPENSIONS)
 8002fc0:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8002fc2:	2b00      	cmp	r3, #0
 8002fc4:	d109      	bne.n	8002fda <_tx_byte_allocate+0x10a>
                {

                    /* No other threads are suspended.  Setup the head pointer and
                       just setup this threads pointers to itself.  */
                    pool_ptr -> tx_byte_pool_suspension_list =      thread_ptr;
 8002fc6:	68fb      	ldr	r3, [r7, #12]
 8002fc8:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8002fca:	625a      	str	r2, [r3, #36]	; 0x24
                    thread_ptr -> tx_thread_suspended_next =        thread_ptr;
 8002fcc:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8002fce:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8002fd0:	671a      	str	r2, [r3, #112]	; 0x70
                    thread_ptr -> tx_thread_suspended_previous =    thread_ptr;
 8002fd2:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8002fd4:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8002fd6:	675a      	str	r2, [r3, #116]	; 0x74
 8002fd8:	e011      	b.n	8002ffe <_tx_byte_allocate+0x12e>
                }
                else
                {

                    /* This list is not NULL, add current thread to the end. */
                    next_thread =                                   pool_ptr -> tx_byte_pool_suspension_list;
 8002fda:	68fb      	ldr	r3, [r7, #12]
 8002fdc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002fde:	63fb      	str	r3, [r7, #60]	; 0x3c
                    thread_ptr -> tx_thread_suspended_next =        next_thread;
 8002fe0:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8002fe2:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 8002fe4:	671a      	str	r2, [r3, #112]	; 0x70
                    previous_thread =                               next_thread -> tx_thread_suspended_previous;
 8002fe6:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8002fe8:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8002fea:	63bb      	str	r3, [r7, #56]	; 0x38
                    thread_ptr -> tx_thread_suspended_previous =    previous_thread;
 8002fec:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8002fee:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8002ff0:	675a      	str	r2, [r3, #116]	; 0x74
                    previous_thread -> tx_thread_suspended_next =   thread_ptr;
 8002ff2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8002ff4:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8002ff6:	671a      	str	r2, [r3, #112]	; 0x70
                    next_thread -> tx_thread_suspended_previous =   thread_ptr;
 8002ff8:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8002ffa:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8002ffc:	675a      	str	r2, [r3, #116]	; 0x74
                }

                /* Set the state to suspended.  */
                thread_ptr -> tx_thread_state =       TX_BYTE_MEMORY;
 8002ffe:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8003000:	2209      	movs	r2, #9
 8003002:	631a      	str	r2, [r3, #48]	; 0x30
                /* Restore interrupts.  */
                TX_RESTORE
#else

                /* Set the suspending flag.  */
                thread_ptr -> tx_thread_suspending =  TX_TRUE;
 8003004:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8003006:	2201      	movs	r2, #1
 8003008:	639a      	str	r2, [r3, #56]	; 0x38

                /* Setup the timeout period.  */
                thread_ptr -> tx_thread_timer.tx_timer_internal_remaining_ticks =  wait_option;
 800300a:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800300c:	683a      	ldr	r2, [r7, #0]
 800300e:	64da      	str	r2, [r3, #76]	; 0x4c

                /* Temporarily disable preemption.  */
                _tx_thread_preempt_disable++;
 8003010:	4b10      	ldr	r3, [pc, #64]	; (8003054 <_tx_byte_allocate+0x184>)
 8003012:	681b      	ldr	r3, [r3, #0]
 8003014:	3301      	adds	r3, #1
 8003016:	4a0f      	ldr	r2, [pc, #60]	; (8003054 <_tx_byte_allocate+0x184>)
 8003018:	6013      	str	r3, [r2, #0]
 800301a:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800301c:	61bb      	str	r3, [r7, #24]
    __asm__ volatile ("MSR  PRIMASK,%0": : "r" (int_posture): "memory");
 800301e:	69bb      	ldr	r3, [r7, #24]
 8003020:	f383 8810 	msr	PRIMASK, r3
}
 8003024:	bf00      	nop

                /* Restore interrupts.  */
                TX_RESTORE

                /* Call actual thread suspension routine.  */
                _tx_thread_system_suspend(thread_ptr);
 8003026:	6cb8      	ldr	r0, [r7, #72]	; 0x48
 8003028:	f001 f808 	bl	800403c <_tx_thread_system_suspend>
                    *((ULONG *) (log_entry_ptr + TX_EL_EVENT_INFO_4_OFFSET)) =  (ULONG) *memory_ptr;
                }
#endif

                /* Return the completion status.  */
                status =  thread_ptr -> tx_thread_suspend_status;
 800302c:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800302e:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8003032:	653b      	str	r3, [r7, #80]	; 0x50
 8003034:	e007      	b.n	8003046 <_tx_byte_allocate+0x176>
 8003036:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8003038:	617b      	str	r3, [r7, #20]
    __asm__ volatile ("MSR  PRIMASK,%0": : "r" (int_posture): "memory");
 800303a:	697b      	ldr	r3, [r7, #20]
 800303c:	f383 8810 	msr	PRIMASK, r3
}
 8003040:	bf00      	nop

            /* Restore interrupts.  */
            TX_RESTORE

            /* Immediate return, return error completion.  */
            status =  TX_NO_MEMORY;
 8003042:	2310      	movs	r3, #16
 8003044:	653b      	str	r3, [r7, #80]	; 0x50
        }
    }

    /* Return completion status.  */
    return(status);
 8003046:	6d3b      	ldr	r3, [r7, #80]	; 0x50
}
 8003048:	4618      	mov	r0, r3
 800304a:	3758      	adds	r7, #88	; 0x58
 800304c:	46bd      	mov	sp, r7
 800304e:	bd80      	pop	{r7, pc}
 8003050:	20007be4 	.word	0x20007be4
 8003054:	20007d04 	.word	0x20007d04
 8003058:	0800305d 	.word	0x0800305d

0800305c <_tx_byte_pool_cleanup>:
/*  09-30-2020     Yuxin Zhou               Modified comment(s),          */
/*                                            resulting in version 6.1    */
/*                                                                        */
/**************************************************************************/
VOID  _tx_byte_pool_cleanup(TX_THREAD *thread_ptr, ULONG suspension_sequence)
{
 800305c:	b580      	push	{r7, lr}
 800305e:	b08e      	sub	sp, #56	; 0x38
 8003060:	af00      	add	r7, sp, #0
 8003062:	6078      	str	r0, [r7, #4]
 8003064:	6039      	str	r1, [r7, #0]
    __asm__ volatile ("MRS  %0, PRIMASK ": "=r" (posture));
 8003066:	f3ef 8310 	mrs	r3, PRIMASK
 800306a:	623b      	str	r3, [r7, #32]
    return(posture);
 800306c:	6a3b      	ldr	r3, [r7, #32]
    int_posture = __get_interrupt_posture();
 800306e:	61fb      	str	r3, [r7, #28]
    __asm__ volatile ("CPSID i" : : : "memory");
 8003070:	b672      	cpsid	i
    return(int_posture);
 8003072:	69fb      	ldr	r3, [r7, #28]


#ifndef TX_NOT_INTERRUPTABLE

    /* Disable interrupts to remove the suspended thread from the byte pool.  */
    TX_DISABLE
 8003074:	637b      	str	r3, [r7, #52]	; 0x34

    /* Determine if the cleanup is still required.  */
    if (thread_ptr -> tx_thread_suspend_cleanup == &(_tx_byte_pool_cleanup))
 8003076:	687b      	ldr	r3, [r7, #4]
 8003078:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 800307a:	4a33      	ldr	r2, [pc, #204]	; (8003148 <_tx_byte_pool_cleanup+0xec>)
 800307c:	4293      	cmp	r3, r2
 800307e:	d158      	bne.n	8003132 <_tx_byte_pool_cleanup+0xd6>
    {

        /* Check for valid suspension sequence.  */
        if (suspension_sequence == thread_ptr -> tx_thread_suspension_sequence)
 8003080:	687b      	ldr	r3, [r7, #4]
 8003082:	f8d3 30ac 	ldr.w	r3, [r3, #172]	; 0xac
 8003086:	683a      	ldr	r2, [r7, #0]
 8003088:	429a      	cmp	r2, r3
 800308a:	d152      	bne.n	8003132 <_tx_byte_pool_cleanup+0xd6>
        {

            /* Setup pointer to byte pool control block.  */
            pool_ptr =  TX_VOID_TO_BYTE_POOL_POINTER_CONVERT(thread_ptr -> tx_thread_suspend_control_block);
 800308c:	687b      	ldr	r3, [r7, #4]
 800308e:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8003090:	633b      	str	r3, [r7, #48]	; 0x30

            /* Check for a NULL byte pool pointer.  */
            if (pool_ptr != TX_NULL)
 8003092:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003094:	2b00      	cmp	r3, #0
 8003096:	d04c      	beq.n	8003132 <_tx_byte_pool_cleanup+0xd6>
            {

                /* Check for valid pool ID.  */
                if (pool_ptr -> tx_byte_pool_id == TX_BYTE_POOL_ID)
 8003098:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800309a:	681b      	ldr	r3, [r3, #0]
 800309c:	4a2b      	ldr	r2, [pc, #172]	; (800314c <_tx_byte_pool_cleanup+0xf0>)
 800309e:	4293      	cmp	r3, r2
 80030a0:	d147      	bne.n	8003132 <_tx_byte_pool_cleanup+0xd6>
                {

                    /* Determine if there are any thread suspensions.  */
                    if (pool_ptr -> tx_byte_pool_suspended_count != TX_NO_SUSPENSIONS)
 80030a2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80030a4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80030a6:	2b00      	cmp	r3, #0
 80030a8:	d043      	beq.n	8003132 <_tx_byte_pool_cleanup+0xd6>
                        /* Setup pointer to byte pool control block.  */
                        pool_ptr =  TX_VOID_TO_BYTE_POOL_POINTER_CONVERT(thread_ptr -> tx_thread_suspend_control_block);
#endif

                        /* Thread suspended for memory... Clear the suspension cleanup flag.  */
                        thread_ptr -> tx_thread_suspend_cleanup =  TX_NULL;
 80030aa:	687b      	ldr	r3, [r7, #4]
 80030ac:	2200      	movs	r2, #0
 80030ae:	669a      	str	r2, [r3, #104]	; 0x68

                        /* Decrement the suspension count.  */
                        pool_ptr -> tx_byte_pool_suspended_count--;
 80030b0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80030b2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80030b4:	1e5a      	subs	r2, r3, #1
 80030b6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80030b8:	629a      	str	r2, [r3, #40]	; 0x28

                        /* Pickup the suspended count.  */
                        suspended_count =  pool_ptr -> tx_byte_pool_suspended_count;
 80030ba:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80030bc:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80030be:	62fb      	str	r3, [r7, #44]	; 0x2c

                        /* Remove the suspended thread from the list.  */

                        /* See if this is the only suspended thread on the list.  */
                        if (suspended_count == TX_NO_SUSPENSIONS)
 80030c0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80030c2:	2b00      	cmp	r3, #0
 80030c4:	d103      	bne.n	80030ce <_tx_byte_pool_cleanup+0x72>
                        {

                            /* Yes, the only suspended thread.  */

                            /* Update the head pointer.  */
                            pool_ptr -> tx_byte_pool_suspension_list =  TX_NULL;
 80030c6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80030c8:	2200      	movs	r2, #0
 80030ca:	625a      	str	r2, [r3, #36]	; 0x24
 80030cc:	e013      	b.n	80030f6 <_tx_byte_pool_cleanup+0x9a>
                        {

                            /* At least one more thread is on the same suspension list.  */

                            /* Update the links of the adjacent threads.  */
                            next_thread =                                   thread_ptr -> tx_thread_suspended_next;
 80030ce:	687b      	ldr	r3, [r7, #4]
 80030d0:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80030d2:	62bb      	str	r3, [r7, #40]	; 0x28
                            previous_thread =                               thread_ptr -> tx_thread_suspended_previous;
 80030d4:	687b      	ldr	r3, [r7, #4]
 80030d6:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80030d8:	627b      	str	r3, [r7, #36]	; 0x24
                            next_thread -> tx_thread_suspended_previous =   previous_thread;
 80030da:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80030dc:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80030de:	675a      	str	r2, [r3, #116]	; 0x74
                            previous_thread -> tx_thread_suspended_next =   next_thread;
 80030e0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80030e2:	6aba      	ldr	r2, [r7, #40]	; 0x28
 80030e4:	671a      	str	r2, [r3, #112]	; 0x70

                            /* Determine if we need to update the head pointer.  */
                            if (pool_ptr -> tx_byte_pool_suspension_list == thread_ptr)
 80030e6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80030e8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80030ea:	687a      	ldr	r2, [r7, #4]
 80030ec:	429a      	cmp	r2, r3
 80030ee:	d102      	bne.n	80030f6 <_tx_byte_pool_cleanup+0x9a>
                            {

                                /* Update the list head pointer.  */
                                pool_ptr -> tx_byte_pool_suspension_list =      next_thread;
 80030f0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80030f2:	6aba      	ldr	r2, [r7, #40]	; 0x28
 80030f4:	625a      	str	r2, [r3, #36]	; 0x24
                            }
                        }

                        /* Now we need to determine if this cleanup is from a terminate, timeout,
                           or from a wait abort.  */
                        if (thread_ptr -> tx_thread_state == TX_BYTE_MEMORY)
 80030f6:	687b      	ldr	r3, [r7, #4]
 80030f8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80030fa:	2b09      	cmp	r3, #9
 80030fc:	d119      	bne.n	8003132 <_tx_byte_pool_cleanup+0xd6>
                            /* Increment the number of timeouts on this byte pool.  */
                            pool_ptr -> tx_byte_pool_performance_timeout_count++;
#endif

                            /* Setup return status.  */
                            thread_ptr -> tx_thread_suspend_status =  TX_NO_MEMORY;
 80030fe:	687b      	ldr	r3, [r7, #4]
 8003100:	2210      	movs	r2, #16
 8003102:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
                            /* Resume the thread!  */
                            _tx_thread_system_ni_resume(thread_ptr);
#else

                            /* Temporarily disable preemption.  */
                            _tx_thread_preempt_disable++;
 8003106:	4b12      	ldr	r3, [pc, #72]	; (8003150 <_tx_byte_pool_cleanup+0xf4>)
 8003108:	681b      	ldr	r3, [r3, #0]
 800310a:	3301      	adds	r3, #1
 800310c:	4a10      	ldr	r2, [pc, #64]	; (8003150 <_tx_byte_pool_cleanup+0xf4>)
 800310e:	6013      	str	r3, [r2, #0]
 8003110:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8003112:	613b      	str	r3, [r7, #16]
    __asm__ volatile ("MSR  PRIMASK,%0": : "r" (int_posture): "memory");
 8003114:	693b      	ldr	r3, [r7, #16]
 8003116:	f383 8810 	msr	PRIMASK, r3
}
 800311a:	bf00      	nop

                            /* Restore interrupts.  */
                            TX_RESTORE

                            /* Resume the thread!  */
                            _tx_thread_system_resume(thread_ptr);
 800311c:	6878      	ldr	r0, [r7, #4]
 800311e:	f000 fe75 	bl	8003e0c <_tx_thread_system_resume>
    __asm__ volatile ("MRS  %0, PRIMASK ": "=r" (posture));
 8003122:	f3ef 8310 	mrs	r3, PRIMASK
 8003126:	61bb      	str	r3, [r7, #24]
    return(posture);
 8003128:	69bb      	ldr	r3, [r7, #24]
    int_posture = __get_interrupt_posture();
 800312a:	617b      	str	r3, [r7, #20]
    __asm__ volatile ("CPSID i" : : : "memory");
 800312c:	b672      	cpsid	i
    return(int_posture);
 800312e:	697b      	ldr	r3, [r7, #20]

                            /* Disable interrupts.  */
                            TX_DISABLE
 8003130:	637b      	str	r3, [r7, #52]	; 0x34
 8003132:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8003134:	60fb      	str	r3, [r7, #12]
    __asm__ volatile ("MSR  PRIMASK,%0": : "r" (int_posture): "memory");
 8003136:	68fb      	ldr	r3, [r7, #12]
 8003138:	f383 8810 	msr	PRIMASK, r3
}
 800313c:	bf00      	nop
    }

    /* Restore interrupts.  */
    TX_RESTORE
#endif
}
 800313e:	bf00      	nop
 8003140:	3738      	adds	r7, #56	; 0x38
 8003142:	46bd      	mov	sp, r7
 8003144:	bd80      	pop	{r7, pc}
 8003146:	bf00      	nop
 8003148:	0800305d 	.word	0x0800305d
 800314c:	42595445 	.word	0x42595445
 8003150:	20007d04 	.word	0x20007d04

08003154 <_tx_byte_pool_create>:
/*  09-30-2020     Yuxin Zhou               Modified comment(s),          */
/*                                            resulting in version 6.1    */
/*                                                                        */
/**************************************************************************/
UINT  _tx_byte_pool_create(TX_BYTE_POOL *pool_ptr, CHAR *name_ptr, VOID *pool_start, ULONG pool_size)
{
 8003154:	b580      	push	{r7, lr}
 8003156:	b08e      	sub	sp, #56	; 0x38
 8003158:	af00      	add	r7, sp, #0
 800315a:	60f8      	str	r0, [r7, #12]
 800315c:	60b9      	str	r1, [r7, #8]
 800315e:	607a      	str	r2, [r7, #4]
 8003160:	603b      	str	r3, [r7, #0]
TX_BYTE_POOL        *previous_pool;
ALIGN_TYPE          *free_ptr;


    /* Initialize the byte pool control block to all zeros.  */
    TX_MEMSET(pool_ptr, 0, (sizeof(TX_BYTE_POOL)));
 8003162:	2234      	movs	r2, #52	; 0x34
 8003164:	2100      	movs	r1, #0
 8003166:	68f8      	ldr	r0, [r7, #12]
 8003168:	f001 ff10 	bl	8004f8c <memset>

    /* Round the pool size down to something that is evenly divisible by
       an ULONG.  */
    pool_size =   (pool_size/(sizeof(ALIGN_TYPE))) * (sizeof(ALIGN_TYPE));
 800316c:	683b      	ldr	r3, [r7, #0]
 800316e:	f023 0303 	bic.w	r3, r3, #3
 8003172:	603b      	str	r3, [r7, #0]

    /* Setup the basic byte pool fields.  */
    pool_ptr -> tx_byte_pool_name =              name_ptr;
 8003174:	68fb      	ldr	r3, [r7, #12]
 8003176:	68ba      	ldr	r2, [r7, #8]
 8003178:	605a      	str	r2, [r3, #4]

    /* Save the start and size of the pool.  */
    pool_ptr -> tx_byte_pool_start =   TX_VOID_TO_UCHAR_POINTER_CONVERT(pool_start);
 800317a:	68fb      	ldr	r3, [r7, #12]
 800317c:	687a      	ldr	r2, [r7, #4]
 800317e:	619a      	str	r2, [r3, #24]
    pool_ptr -> tx_byte_pool_size =    pool_size;
 8003180:	68fb      	ldr	r3, [r7, #12]
 8003182:	683a      	ldr	r2, [r7, #0]
 8003184:	61da      	str	r2, [r3, #28]

    /* Setup memory list to the beginning as well as the search pointer.  */
    pool_ptr -> tx_byte_pool_list =    TX_VOID_TO_UCHAR_POINTER_CONVERT(pool_start);
 8003186:	68fb      	ldr	r3, [r7, #12]
 8003188:	687a      	ldr	r2, [r7, #4]
 800318a:	611a      	str	r2, [r3, #16]
    pool_ptr -> tx_byte_pool_search =  TX_VOID_TO_UCHAR_POINTER_CONVERT(pool_start);
 800318c:	68fb      	ldr	r3, [r7, #12]
 800318e:	687a      	ldr	r2, [r7, #4]
 8003190:	615a      	str	r2, [r3, #20]

    /* Initially, the pool will have two blocks.  One large block at the
       beginning that is available and a small allocated block at the end
       of the pool that is there just for the algorithm.  Be sure to count
       the available block's header in the available bytes count.  */
    pool_ptr -> tx_byte_pool_available =   pool_size - ((sizeof(VOID *)) + (sizeof(ALIGN_TYPE)));
 8003192:	683b      	ldr	r3, [r7, #0]
 8003194:	f1a3 0208 	sub.w	r2, r3, #8
 8003198:	68fb      	ldr	r3, [r7, #12]
 800319a:	609a      	str	r2, [r3, #8]
    pool_ptr -> tx_byte_pool_fragments =   ((UINT) 2);
 800319c:	68fb      	ldr	r3, [r7, #12]
 800319e:	2202      	movs	r2, #2
 80031a0:	60da      	str	r2, [r3, #12]
    /* Each block contains a "next" pointer that points to the next block in the pool followed by a ALIGN_TYPE
       field that contains either the constant TX_BYTE_BLOCK_FREE (if the block is free) or a pointer to the
       owning pool (if the block is allocated).  */

    /* Calculate the end of the pool's memory area.  */
    block_ptr =  TX_VOID_TO_UCHAR_POINTER_CONVERT(pool_start);
 80031a2:	687b      	ldr	r3, [r7, #4]
 80031a4:	637b      	str	r3, [r7, #52]	; 0x34
    block_ptr =  TX_UCHAR_POINTER_ADD(block_ptr, pool_size);
 80031a6:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 80031a8:	683b      	ldr	r3, [r7, #0]
 80031aa:	4413      	add	r3, r2
 80031ac:	637b      	str	r3, [r7, #52]	; 0x34

    /* Backup the end of the pool pointer and build the pre-allocated block.  */
    block_ptr =  TX_UCHAR_POINTER_SUB(block_ptr, (sizeof(ALIGN_TYPE)));
 80031ae:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80031b0:	3b04      	subs	r3, #4
 80031b2:	637b      	str	r3, [r7, #52]	; 0x34

    /* Cast the pool pointer into a ULONG.  */
    temp_ptr =             TX_BYTE_POOL_TO_UCHAR_POINTER_CONVERT(pool_ptr);
 80031b4:	68fb      	ldr	r3, [r7, #12]
 80031b6:	633b      	str	r3, [r7, #48]	; 0x30
    block_indirect_ptr =   TX_UCHAR_TO_INDIRECT_UCHAR_POINTER_CONVERT(block_ptr);
 80031b8:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80031ba:	62fb      	str	r3, [r7, #44]	; 0x2c
    *block_indirect_ptr =  temp_ptr;
 80031bc:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80031be:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80031c0:	601a      	str	r2, [r3, #0]

    block_ptr =            TX_UCHAR_POINTER_SUB(block_ptr, (sizeof(UCHAR *)));
 80031c2:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80031c4:	3b04      	subs	r3, #4
 80031c6:	637b      	str	r3, [r7, #52]	; 0x34
    block_indirect_ptr =   TX_UCHAR_TO_INDIRECT_UCHAR_POINTER_CONVERT(block_ptr);
 80031c8:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80031ca:	62fb      	str	r3, [r7, #44]	; 0x2c
    *block_indirect_ptr =  TX_VOID_TO_UCHAR_POINTER_CONVERT(pool_start);
 80031cc:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80031ce:	687a      	ldr	r2, [r7, #4]
 80031d0:	601a      	str	r2, [r3, #0]

    /* Now setup the large available block in the pool.  */
    temp_ptr =             TX_VOID_TO_UCHAR_POINTER_CONVERT(pool_start);
 80031d2:	687b      	ldr	r3, [r7, #4]
 80031d4:	633b      	str	r3, [r7, #48]	; 0x30
    block_indirect_ptr =   TX_UCHAR_TO_INDIRECT_UCHAR_POINTER_CONVERT(temp_ptr);
 80031d6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80031d8:	62fb      	str	r3, [r7, #44]	; 0x2c
    *block_indirect_ptr =  block_ptr;
 80031da:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80031dc:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 80031de:	601a      	str	r2, [r3, #0]
    block_ptr =            TX_VOID_TO_UCHAR_POINTER_CONVERT(pool_start);
 80031e0:	687b      	ldr	r3, [r7, #4]
 80031e2:	637b      	str	r3, [r7, #52]	; 0x34
    block_ptr =            TX_UCHAR_POINTER_ADD(block_ptr, (sizeof(UCHAR *)));
 80031e4:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80031e6:	3304      	adds	r3, #4
 80031e8:	637b      	str	r3, [r7, #52]	; 0x34
    free_ptr =             TX_UCHAR_TO_ALIGN_TYPE_POINTER_CONVERT(block_ptr);
 80031ea:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80031ec:	62bb      	str	r3, [r7, #40]	; 0x28
    *free_ptr =            TX_BYTE_BLOCK_FREE;
 80031ee:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80031f0:	4a1f      	ldr	r2, [pc, #124]	; (8003270 <_tx_byte_pool_create+0x11c>)
 80031f2:	601a      	str	r2, [r3, #0]

    /* Clear the owner id.  */
    pool_ptr -> tx_byte_pool_owner =  TX_NULL;
 80031f4:	68fb      	ldr	r3, [r7, #12]
 80031f6:	2200      	movs	r2, #0
 80031f8:	621a      	str	r2, [r3, #32]
    __asm__ volatile ("MRS  %0, PRIMASK ": "=r" (posture));
 80031fa:	f3ef 8310 	mrs	r3, PRIMASK
 80031fe:	61bb      	str	r3, [r7, #24]
    return(posture);
 8003200:	69bb      	ldr	r3, [r7, #24]
    int_posture = __get_interrupt_posture();
 8003202:	617b      	str	r3, [r7, #20]
    __asm__ volatile ("CPSID i" : : : "memory");
 8003204:	b672      	cpsid	i
    return(int_posture);
 8003206:	697b      	ldr	r3, [r7, #20]

    /* Disable interrupts to place the byte pool on the created list.  */
    TX_DISABLE
 8003208:	627b      	str	r3, [r7, #36]	; 0x24

    /* Setup the byte pool ID to make it valid.  */
    pool_ptr -> tx_byte_pool_id =  TX_BYTE_POOL_ID;
 800320a:	68fb      	ldr	r3, [r7, #12]
 800320c:	4a19      	ldr	r2, [pc, #100]	; (8003274 <_tx_byte_pool_create+0x120>)
 800320e:	601a      	str	r2, [r3, #0]

    /* Place the byte pool on the list of created byte pools.  First,
       check for an empty list.  */
    if (_tx_byte_pool_created_count == TX_EMPTY)
 8003210:	4b19      	ldr	r3, [pc, #100]	; (8003278 <_tx_byte_pool_create+0x124>)
 8003212:	681b      	ldr	r3, [r3, #0]
 8003214:	2b00      	cmp	r3, #0
 8003216:	d109      	bne.n	800322c <_tx_byte_pool_create+0xd8>
    {

        /* The created byte pool list is empty.  Add byte pool to empty list.  */
        _tx_byte_pool_created_ptr =                  pool_ptr;
 8003218:	4a18      	ldr	r2, [pc, #96]	; (800327c <_tx_byte_pool_create+0x128>)
 800321a:	68fb      	ldr	r3, [r7, #12]
 800321c:	6013      	str	r3, [r2, #0]
        pool_ptr -> tx_byte_pool_created_next =      pool_ptr;
 800321e:	68fb      	ldr	r3, [r7, #12]
 8003220:	68fa      	ldr	r2, [r7, #12]
 8003222:	62da      	str	r2, [r3, #44]	; 0x2c
        pool_ptr -> tx_byte_pool_created_previous =  pool_ptr;
 8003224:	68fb      	ldr	r3, [r7, #12]
 8003226:	68fa      	ldr	r2, [r7, #12]
 8003228:	631a      	str	r2, [r3, #48]	; 0x30
 800322a:	e011      	b.n	8003250 <_tx_byte_pool_create+0xfc>
    }
    else
    {

        /* This list is not NULL, add to the end of the list.  */
        next_pool =      _tx_byte_pool_created_ptr;
 800322c:	4b13      	ldr	r3, [pc, #76]	; (800327c <_tx_byte_pool_create+0x128>)
 800322e:	681b      	ldr	r3, [r3, #0]
 8003230:	623b      	str	r3, [r7, #32]
        previous_pool =  next_pool -> tx_byte_pool_created_previous;
 8003232:	6a3b      	ldr	r3, [r7, #32]
 8003234:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003236:	61fb      	str	r3, [r7, #28]

        /* Place the new byte pool in the list.  */
        next_pool -> tx_byte_pool_created_previous =  pool_ptr;
 8003238:	6a3b      	ldr	r3, [r7, #32]
 800323a:	68fa      	ldr	r2, [r7, #12]
 800323c:	631a      	str	r2, [r3, #48]	; 0x30
        previous_pool -> tx_byte_pool_created_next =  pool_ptr;
 800323e:	69fb      	ldr	r3, [r7, #28]
 8003240:	68fa      	ldr	r2, [r7, #12]
 8003242:	62da      	str	r2, [r3, #44]	; 0x2c

        /* Setup this byte pool's created links.  */
        pool_ptr -> tx_byte_pool_created_previous =  previous_pool;
 8003244:	68fb      	ldr	r3, [r7, #12]
 8003246:	69fa      	ldr	r2, [r7, #28]
 8003248:	631a      	str	r2, [r3, #48]	; 0x30
        pool_ptr -> tx_byte_pool_created_next =      next_pool;
 800324a:	68fb      	ldr	r3, [r7, #12]
 800324c:	6a3a      	ldr	r2, [r7, #32]
 800324e:	62da      	str	r2, [r3, #44]	; 0x2c
    }

    /* Increment the number of created byte pools.  */
    _tx_byte_pool_created_count++;
 8003250:	4b09      	ldr	r3, [pc, #36]	; (8003278 <_tx_byte_pool_create+0x124>)
 8003252:	681b      	ldr	r3, [r3, #0]
 8003254:	3301      	adds	r3, #1
 8003256:	4a08      	ldr	r2, [pc, #32]	; (8003278 <_tx_byte_pool_create+0x124>)
 8003258:	6013      	str	r3, [r2, #0]
 800325a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800325c:	613b      	str	r3, [r7, #16]
    __asm__ volatile ("MSR  PRIMASK,%0": : "r" (int_posture): "memory");
 800325e:	693b      	ldr	r3, [r7, #16]
 8003260:	f383 8810 	msr	PRIMASK, r3
}
 8003264:	bf00      	nop

    /* Restore interrupts.  */
    TX_RESTORE

    /* Return TX_SUCCESS.  */
    return(TX_SUCCESS);
 8003266:	2300      	movs	r3, #0
}
 8003268:	4618      	mov	r0, r3
 800326a:	3738      	adds	r7, #56	; 0x38
 800326c:	46bd      	mov	sp, r7
 800326e:	bd80      	pop	{r7, pc}
 8003270:	ffffeeee 	.word	0xffffeeee
 8003274:	42595445 	.word	0x42595445
 8003278:	20007bd8 	.word	0x20007bd8
 800327c:	20007bd4 	.word	0x20007bd4

08003280 <_tx_byte_pool_search>:
/*                                            calculation,                */
/*                                            resulting in version 6.1.7  */
/*                                                                        */
/**************************************************************************/
UCHAR  *_tx_byte_pool_search(TX_BYTE_POOL *pool_ptr, ULONG memory_size)
{
 8003280:	b480      	push	{r7}
 8003282:	b097      	sub	sp, #92	; 0x5c
 8003284:	af00      	add	r7, sp, #0
 8003286:	6078      	str	r0, [r7, #4]
 8003288:	6039      	str	r1, [r7, #0]
UCHAR           *next_ptr;
UCHAR           **this_block_link_ptr;
UCHAR           **next_block_link_ptr;
ULONG           available_bytes;
UINT            examine_blocks;
UINT            first_free_block_found =  TX_FALSE;
 800328a:	2300      	movs	r3, #0
 800328c:	647b      	str	r3, [r7, #68]	; 0x44
    __asm__ volatile ("MRS  %0, PRIMASK ": "=r" (posture));
 800328e:	f3ef 8310 	mrs	r3, PRIMASK
 8003292:	627b      	str	r3, [r7, #36]	; 0x24
    return(posture);
 8003294:	6a7b      	ldr	r3, [r7, #36]	; 0x24
    int_posture = __get_interrupt_posture();
 8003296:	623b      	str	r3, [r7, #32]
    __asm__ volatile ("CPSID i" : : : "memory");
 8003298:	b672      	cpsid	i
    return(int_posture);
 800329a:	6a3b      	ldr	r3, [r7, #32]
UCHAR           *work_ptr;
ULONG           total_theoretical_available;


    /* Disable interrupts.  */
    TX_DISABLE
 800329c:	657b      	str	r3, [r7, #84]	; 0x54

    /* First, determine if there are enough bytes in the pool.  */
    /* Theoretical bytes available = free bytes + ((fragments-2) * overhead of each block) */
    total_theoretical_available = pool_ptr -> tx_byte_pool_available + ((pool_ptr -> tx_byte_pool_fragments - 2) * ((sizeof(UCHAR *)) + (sizeof(ALIGN_TYPE))));
 800329e:	687b      	ldr	r3, [r7, #4]
 80032a0:	689a      	ldr	r2, [r3, #8]
 80032a2:	687b      	ldr	r3, [r7, #4]
 80032a4:	68db      	ldr	r3, [r3, #12]
 80032a6:	3b02      	subs	r3, #2
 80032a8:	00db      	lsls	r3, r3, #3
 80032aa:	4413      	add	r3, r2
 80032ac:	643b      	str	r3, [r7, #64]	; 0x40
    if (memory_size >= total_theoretical_available)
 80032ae:	683a      	ldr	r2, [r7, #0]
 80032b0:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80032b2:	429a      	cmp	r2, r3
 80032b4:	d308      	bcc.n	80032c8 <_tx_byte_pool_search+0x48>
 80032b6:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80032b8:	61fb      	str	r3, [r7, #28]
    __asm__ volatile ("MSR  PRIMASK,%0": : "r" (int_posture): "memory");
 80032ba:	69fb      	ldr	r3, [r7, #28]
 80032bc:	f383 8810 	msr	PRIMASK, r3
}
 80032c0:	bf00      	nop

        /* Restore interrupts.  */
        TX_RESTORE

        /* Not enough memory, return a NULL pointer.  */
        current_ptr =  TX_NULL;
 80032c2:	2300      	movs	r3, #0
 80032c4:	653b      	str	r3, [r7, #80]	; 0x50
 80032c6:	e0dd      	b.n	8003484 <_tx_byte_pool_search+0x204>
    }
    else
    {

        /* Pickup thread pointer.  */
        TX_THREAD_GET_CURRENT(thread_ptr)
 80032c8:	4b72      	ldr	r3, [pc, #456]	; (8003494 <_tx_byte_pool_search+0x214>)
 80032ca:	681b      	ldr	r3, [r3, #0]
 80032cc:	63fb      	str	r3, [r7, #60]	; 0x3c

        /* Setup ownership of the byte pool.  */
        pool_ptr -> tx_byte_pool_owner =  thread_ptr;
 80032ce:	687b      	ldr	r3, [r7, #4]
 80032d0:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 80032d2:	621a      	str	r2, [r3, #32]

        /* Walk through the memory pool in search for a large enough block.  */
        current_ptr =      pool_ptr -> tx_byte_pool_search;
 80032d4:	687b      	ldr	r3, [r7, #4]
 80032d6:	695b      	ldr	r3, [r3, #20]
 80032d8:	653b      	str	r3, [r7, #80]	; 0x50
        examine_blocks =   pool_ptr -> tx_byte_pool_fragments + ((UINT) 1);
 80032da:	687b      	ldr	r3, [r7, #4]
 80032dc:	68db      	ldr	r3, [r3, #12]
 80032de:	3301      	adds	r3, #1
 80032e0:	64bb      	str	r3, [r7, #72]	; 0x48
        available_bytes =  ((ULONG) 0);
 80032e2:	2300      	movs	r3, #0
 80032e4:	64fb      	str	r3, [r7, #76]	; 0x4c
            /* Increment the number of fragments searched on this pool.  */
            pool_ptr -> tx_byte_pool_performance_search_count++;
#endif

            /* Check to see if this block is free.  */
            work_ptr =  TX_UCHAR_POINTER_ADD(current_ptr, (sizeof(UCHAR *)));
 80032e6:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80032e8:	3304      	adds	r3, #4
 80032ea:	63bb      	str	r3, [r7, #56]	; 0x38
            free_ptr =  TX_UCHAR_TO_ALIGN_TYPE_POINTER_CONVERT(work_ptr);
 80032ec:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80032ee:	637b      	str	r3, [r7, #52]	; 0x34
            if ((*free_ptr) == TX_BYTE_BLOCK_FREE)
 80032f0:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80032f2:	681b      	ldr	r3, [r3, #0]
 80032f4:	4a68      	ldr	r2, [pc, #416]	; (8003498 <_tx_byte_pool_search+0x218>)
 80032f6:	4293      	cmp	r3, r2
 80032f8:	d143      	bne.n	8003382 <_tx_byte_pool_search+0x102>
            {

                /* Determine if this is the first free block.  */
                if (first_free_block_found == TX_FALSE)
 80032fa:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80032fc:	2b00      	cmp	r3, #0
 80032fe:	d104      	bne.n	800330a <_tx_byte_pool_search+0x8a>
                {
                    /* This is the first free block.  */
                    pool_ptr->tx_byte_pool_search =  current_ptr;
 8003300:	687b      	ldr	r3, [r7, #4]
 8003302:	6d3a      	ldr	r2, [r7, #80]	; 0x50
 8003304:	615a      	str	r2, [r3, #20]

                    /* Set the flag to indicate we have found the first free
                       block.  */
                    first_free_block_found =  TX_TRUE;
 8003306:	2301      	movs	r3, #1
 8003308:	647b      	str	r3, [r7, #68]	; 0x44
                }

                /* Block is free, see if it is large enough.  */

                /* Pickup the next block's pointer.  */
                this_block_link_ptr =  TX_UCHAR_TO_INDIRECT_UCHAR_POINTER_CONVERT(current_ptr);
 800330a:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800330c:	633b      	str	r3, [r7, #48]	; 0x30
                next_ptr =             *this_block_link_ptr;
 800330e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003310:	681b      	ldr	r3, [r3, #0]
 8003312:	62fb      	str	r3, [r7, #44]	; 0x2c

                /* Calculate the number of bytes available in this block.  */
                available_bytes =   TX_UCHAR_POINTER_DIF(next_ptr, current_ptr);
 8003314:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8003316:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8003318:	1ad3      	subs	r3, r2, r3
 800331a:	64fb      	str	r3, [r7, #76]	; 0x4c
                available_bytes =   available_bytes - ((sizeof(UCHAR *)) + (sizeof(ALIGN_TYPE)));
 800331c:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800331e:	3b08      	subs	r3, #8
 8003320:	64fb      	str	r3, [r7, #76]	; 0x4c

                /* If this is large enough, we are done because our first-fit algorithm
                   has been satisfied!  */
                if (available_bytes >= memory_size)
 8003322:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 8003324:	683b      	ldr	r3, [r7, #0]
 8003326:	429a      	cmp	r2, r3
 8003328:	d257      	bcs.n	80033da <_tx_byte_pool_search+0x15a>
                }
                else
                {

                    /* Clear the available bytes variable.  */
                    available_bytes =  ((ULONG) 0);
 800332a:	2300      	movs	r3, #0
 800332c:	64fb      	str	r3, [r7, #76]	; 0x4c

                    /* Not enough memory, check to see if the neighbor is
                       free and can be merged.  */
                    work_ptr =  TX_UCHAR_POINTER_ADD(next_ptr, (sizeof(UCHAR *)));
 800332e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003330:	3304      	adds	r3, #4
 8003332:	63bb      	str	r3, [r7, #56]	; 0x38
                    free_ptr =  TX_UCHAR_TO_ALIGN_TYPE_POINTER_CONVERT(work_ptr);
 8003334:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003336:	637b      	str	r3, [r7, #52]	; 0x34
                    if ((*free_ptr) == TX_BYTE_BLOCK_FREE)
 8003338:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800333a:	681b      	ldr	r3, [r3, #0]
 800333c:	4a56      	ldr	r2, [pc, #344]	; (8003498 <_tx_byte_pool_search+0x218>)
 800333e:	4293      	cmp	r3, r2
 8003340:	d113      	bne.n	800336a <_tx_byte_pool_search+0xea>
                    {

                        /* Yes, neighbor block can be merged!  This is quickly accomplished
                           by updating the current block with the next blocks pointer.  */
                        next_block_link_ptr =  TX_UCHAR_TO_INDIRECT_UCHAR_POINTER_CONVERT(next_ptr);
 8003342:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003344:	62bb      	str	r3, [r7, #40]	; 0x28
                        *this_block_link_ptr =  *next_block_link_ptr;
 8003346:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003348:	681a      	ldr	r2, [r3, #0]
 800334a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800334c:	601a      	str	r2, [r3, #0]

                        /* Reduce the fragment total.  We don't need to increase the bytes
                           available because all free headers are also included in the available
                           count.  */
                        pool_ptr -> tx_byte_pool_fragments--;
 800334e:	687b      	ldr	r3, [r7, #4]
 8003350:	68db      	ldr	r3, [r3, #12]
 8003352:	1e5a      	subs	r2, r3, #1
 8003354:	687b      	ldr	r3, [r7, #4]
 8003356:	60da      	str	r2, [r3, #12]
                        /* Increment the number of blocks merged on this pool.  */
                        pool_ptr -> tx_byte_pool_performance_merge_count++;
#endif

                        /* See if the search pointer is affected.  */
                        if (pool_ptr -> tx_byte_pool_search ==  next_ptr)
 8003358:	687b      	ldr	r3, [r7, #4]
 800335a:	695b      	ldr	r3, [r3, #20]
 800335c:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800335e:	429a      	cmp	r2, r3
 8003360:	d114      	bne.n	800338c <_tx_byte_pool_search+0x10c>
                        {
                            /* Yes, update the search pointer.   */
                            pool_ptr -> tx_byte_pool_search =  current_ptr;
 8003362:	687b      	ldr	r3, [r7, #4]
 8003364:	6d3a      	ldr	r2, [r7, #80]	; 0x50
 8003366:	615a      	str	r2, [r3, #20]
 8003368:	e010      	b.n	800338c <_tx_byte_pool_search+0x10c>
                        }
                    }
                    else
                    {
                        /* Neighbor is not free so we can skip over it!  */
                        next_block_link_ptr =  TX_UCHAR_TO_INDIRECT_UCHAR_POINTER_CONVERT(next_ptr);
 800336a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800336c:	62bb      	str	r3, [r7, #40]	; 0x28
                        current_ptr =  *next_block_link_ptr;
 800336e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003370:	681b      	ldr	r3, [r3, #0]
 8003372:	653b      	str	r3, [r7, #80]	; 0x50

                        /* Decrement the examined block count to account for this one.  */
                        if (examine_blocks != ((UINT) 0))
 8003374:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8003376:	2b00      	cmp	r3, #0
 8003378:	d008      	beq.n	800338c <_tx_byte_pool_search+0x10c>
                        {
                            examine_blocks--;
 800337a:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800337c:	3b01      	subs	r3, #1
 800337e:	64bb      	str	r3, [r7, #72]	; 0x48
 8003380:	e004      	b.n	800338c <_tx_byte_pool_search+0x10c>
            }
            else
            {

                /* Block is not free, move to next block.  */
                this_block_link_ptr =  TX_UCHAR_TO_INDIRECT_UCHAR_POINTER_CONVERT(current_ptr);
 8003382:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8003384:	633b      	str	r3, [r7, #48]	; 0x30
                current_ptr =  *this_block_link_ptr;
 8003386:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003388:	681b      	ldr	r3, [r3, #0]
 800338a:	653b      	str	r3, [r7, #80]	; 0x50
            }

            /* Another block has been searched... decrement counter.  */
            if (examine_blocks != ((UINT) 0))
 800338c:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800338e:	2b00      	cmp	r3, #0
 8003390:	d002      	beq.n	8003398 <_tx_byte_pool_search+0x118>
            {

                examine_blocks--;
 8003392:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8003394:	3b01      	subs	r3, #1
 8003396:	64bb      	str	r3, [r7, #72]	; 0x48
 8003398:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800339a:	613b      	str	r3, [r7, #16]
    __asm__ volatile ("MSR  PRIMASK,%0": : "r" (int_posture): "memory");
 800339c:	693b      	ldr	r3, [r7, #16]
 800339e:	f383 8810 	msr	PRIMASK, r3
}
 80033a2:	bf00      	nop
    __asm__ volatile ("MRS  %0, PRIMASK ": "=r" (posture));
 80033a4:	f3ef 8310 	mrs	r3, PRIMASK
 80033a8:	61bb      	str	r3, [r7, #24]
    return(posture);
 80033aa:	69bb      	ldr	r3, [r7, #24]
    int_posture = __get_interrupt_posture();
 80033ac:	617b      	str	r3, [r7, #20]
    __asm__ volatile ("CPSID i" : : : "memory");
 80033ae:	b672      	cpsid	i
    return(int_posture);
 80033b0:	697b      	ldr	r3, [r7, #20]

            /* Restore interrupts temporarily.  */
            TX_RESTORE

            /* Disable interrupts.  */
            TX_DISABLE
 80033b2:	657b      	str	r3, [r7, #84]	; 0x54

            /* Determine if anything has changed in terms of pool ownership.  */
            if (pool_ptr -> tx_byte_pool_owner != thread_ptr)
 80033b4:	687b      	ldr	r3, [r7, #4]
 80033b6:	6a1b      	ldr	r3, [r3, #32]
 80033b8:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 80033ba:	429a      	cmp	r2, r3
 80033bc:	d009      	beq.n	80033d2 <_tx_byte_pool_search+0x152>
            {

                /* Pool changed ownership in the brief period interrupts were
                   enabled.  Reset the search.  */
                current_ptr =      pool_ptr -> tx_byte_pool_search;
 80033be:	687b      	ldr	r3, [r7, #4]
 80033c0:	695b      	ldr	r3, [r3, #20]
 80033c2:	653b      	str	r3, [r7, #80]	; 0x50
                examine_blocks =   pool_ptr -> tx_byte_pool_fragments + ((UINT) 1);
 80033c4:	687b      	ldr	r3, [r7, #4]
 80033c6:	68db      	ldr	r3, [r3, #12]
 80033c8:	3301      	adds	r3, #1
 80033ca:	64bb      	str	r3, [r7, #72]	; 0x48

                /* Setup our ownership again.  */
                pool_ptr -> tx_byte_pool_owner =  thread_ptr;
 80033cc:	687b      	ldr	r3, [r7, #4]
 80033ce:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 80033d0:	621a      	str	r2, [r3, #32]
            }
        } while(examine_blocks != ((UINT) 0));
 80033d2:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 80033d4:	2b00      	cmp	r3, #0
 80033d6:	d186      	bne.n	80032e6 <_tx_byte_pool_search+0x66>
 80033d8:	e000      	b.n	80033dc <_tx_byte_pool_search+0x15c>
                    break;
 80033da:	bf00      	nop

        /* Determine if a block was found.  If so, determine if it needs to be
           split.  */
        if (available_bytes != ((ULONG) 0))
 80033dc:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80033de:	2b00      	cmp	r3, #0
 80033e0:	d048      	beq.n	8003474 <_tx_byte_pool_search+0x1f4>
        {

            /* Determine if we need to split this block.  */
            if ((available_bytes - memory_size) >= ((ULONG) TX_BYTE_BLOCK_MIN))
 80033e2:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 80033e4:	683b      	ldr	r3, [r7, #0]
 80033e6:	1ad3      	subs	r3, r2, r3
 80033e8:	2b13      	cmp	r3, #19
 80033ea:	d91e      	bls.n	800342a <_tx_byte_pool_search+0x1aa>
            {

                /* Split the block.  */
                next_ptr =  TX_UCHAR_POINTER_ADD(current_ptr, (memory_size + ((sizeof(UCHAR *)) + (sizeof(ALIGN_TYPE)))));
 80033ec:	683b      	ldr	r3, [r7, #0]
 80033ee:	3308      	adds	r3, #8
 80033f0:	6d3a      	ldr	r2, [r7, #80]	; 0x50
 80033f2:	4413      	add	r3, r2
 80033f4:	62fb      	str	r3, [r7, #44]	; 0x2c

                /* Setup the new free block.  */
                next_block_link_ptr =   TX_UCHAR_TO_INDIRECT_UCHAR_POINTER_CONVERT(next_ptr);
 80033f6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80033f8:	62bb      	str	r3, [r7, #40]	; 0x28
                this_block_link_ptr =   TX_UCHAR_TO_INDIRECT_UCHAR_POINTER_CONVERT(current_ptr);
 80033fa:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80033fc:	633b      	str	r3, [r7, #48]	; 0x30
                *next_block_link_ptr =  *this_block_link_ptr;
 80033fe:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003400:	681a      	ldr	r2, [r3, #0]
 8003402:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003404:	601a      	str	r2, [r3, #0]
                work_ptr =              TX_UCHAR_POINTER_ADD(next_ptr, (sizeof(UCHAR *)));
 8003406:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003408:	3304      	adds	r3, #4
 800340a:	63bb      	str	r3, [r7, #56]	; 0x38
                free_ptr =              TX_UCHAR_TO_ALIGN_TYPE_POINTER_CONVERT(work_ptr);
 800340c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800340e:	637b      	str	r3, [r7, #52]	; 0x34
                *free_ptr =             TX_BYTE_BLOCK_FREE;
 8003410:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8003412:	4a21      	ldr	r2, [pc, #132]	; (8003498 <_tx_byte_pool_search+0x218>)
 8003414:	601a      	str	r2, [r3, #0]

                /* Increase the total fragment counter.  */
                pool_ptr -> tx_byte_pool_fragments++;
 8003416:	687b      	ldr	r3, [r7, #4]
 8003418:	68db      	ldr	r3, [r3, #12]
 800341a:	1c5a      	adds	r2, r3, #1
 800341c:	687b      	ldr	r3, [r7, #4]
 800341e:	60da      	str	r2, [r3, #12]

                /* Update the current pointer to point at the newly created block.  */
                *this_block_link_ptr =  next_ptr;
 8003420:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003422:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8003424:	601a      	str	r2, [r3, #0]

                /* Set available equal to memory size for subsequent calculation.  */
                available_bytes =  memory_size;
 8003426:	683b      	ldr	r3, [r7, #0]
 8003428:	64fb      	str	r3, [r7, #76]	; 0x4c
                pool_ptr -> tx_byte_pool_performance_split_count++;
#endif
            }

            /* In any case, mark the current block as allocated.  */
            work_ptr =              TX_UCHAR_POINTER_ADD(current_ptr, (sizeof(UCHAR *)));
 800342a:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800342c:	3304      	adds	r3, #4
 800342e:	63bb      	str	r3, [r7, #56]	; 0x38
            this_block_link_ptr =   TX_UCHAR_TO_INDIRECT_UCHAR_POINTER_CONVERT(work_ptr);
 8003430:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003432:	633b      	str	r3, [r7, #48]	; 0x30
            *this_block_link_ptr =  TX_BYTE_POOL_TO_UCHAR_POINTER_CONVERT(pool_ptr);
 8003434:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003436:	687a      	ldr	r2, [r7, #4]
 8003438:	601a      	str	r2, [r3, #0]

            /* Reduce the number of available bytes in the pool.  */
            pool_ptr -> tx_byte_pool_available =  (pool_ptr -> tx_byte_pool_available - available_bytes) - ((sizeof(UCHAR *)) + (sizeof(ALIGN_TYPE)));
 800343a:	687b      	ldr	r3, [r7, #4]
 800343c:	689a      	ldr	r2, [r3, #8]
 800343e:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8003440:	1ad3      	subs	r3, r2, r3
 8003442:	f1a3 0208 	sub.w	r2, r3, #8
 8003446:	687b      	ldr	r3, [r7, #4]
 8003448:	609a      	str	r2, [r3, #8]

            /* Determine if the search pointer needs to be updated. This is only done
               if the search pointer matches the block to be returned.  */
            if (current_ptr == pool_ptr -> tx_byte_pool_search)
 800344a:	687b      	ldr	r3, [r7, #4]
 800344c:	695b      	ldr	r3, [r3, #20]
 800344e:	6d3a      	ldr	r2, [r7, #80]	; 0x50
 8003450:	429a      	cmp	r2, r3
 8003452:	d105      	bne.n	8003460 <_tx_byte_pool_search+0x1e0>
            {

                /* Yes, update the search pointer to the next block.  */
                this_block_link_ptr =   TX_UCHAR_TO_INDIRECT_UCHAR_POINTER_CONVERT(current_ptr);
 8003454:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8003456:	633b      	str	r3, [r7, #48]	; 0x30
                pool_ptr -> tx_byte_pool_search =  *this_block_link_ptr;
 8003458:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800345a:	681a      	ldr	r2, [r3, #0]
 800345c:	687b      	ldr	r3, [r7, #4]
 800345e:	615a      	str	r2, [r3, #20]
 8003460:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8003462:	60fb      	str	r3, [r7, #12]
    __asm__ volatile ("MSR  PRIMASK,%0": : "r" (int_posture): "memory");
 8003464:	68fb      	ldr	r3, [r7, #12]
 8003466:	f383 8810 	msr	PRIMASK, r3
}
 800346a:	bf00      	nop

            /* Restore interrupts.  */
            TX_RESTORE

            /* Adjust the pointer for the application.  */
            current_ptr =  TX_UCHAR_POINTER_ADD(current_ptr, (((sizeof(UCHAR *)) + (sizeof(ALIGN_TYPE)))));
 800346c:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800346e:	3308      	adds	r3, #8
 8003470:	653b      	str	r3, [r7, #80]	; 0x50
 8003472:	e007      	b.n	8003484 <_tx_byte_pool_search+0x204>
 8003474:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8003476:	60bb      	str	r3, [r7, #8]
    __asm__ volatile ("MSR  PRIMASK,%0": : "r" (int_posture): "memory");
 8003478:	68bb      	ldr	r3, [r7, #8]
 800347a:	f383 8810 	msr	PRIMASK, r3
}
 800347e:	bf00      	nop

            /* Restore interrupts.  */
            TX_RESTORE

            /* Set current pointer to NULL to indicate nothing was found.  */
            current_ptr =  TX_NULL;
 8003480:	2300      	movs	r3, #0
 8003482:	653b      	str	r3, [r7, #80]	; 0x50
        }
    }

    /* Return the search pointer.  */
    return(current_ptr);
 8003484:	6d3b      	ldr	r3, [r7, #80]	; 0x50
}
 8003486:	4618      	mov	r0, r3
 8003488:	375c      	adds	r7, #92	; 0x5c
 800348a:	46bd      	mov	sp, r7
 800348c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003490:	4770      	bx	lr
 8003492:	bf00      	nop
 8003494:	20007be4 	.word	0x20007be4
 8003498:	ffffeeee 	.word	0xffffeeee

0800349c <_tx_byte_release>:
/*  09-30-2020     Yuxin Zhou               Modified comment(s),          */
/*                                            resulting in version 6.1    */
/*                                                                        */
/**************************************************************************/
UINT  _tx_byte_release(VOID *memory_ptr)
{
 800349c:	b580      	push	{r7, lr}
 800349e:	b09e      	sub	sp, #120	; 0x78
 80034a0:	af00      	add	r7, sp, #0
 80034a2:	6078      	str	r0, [r7, #4]
UCHAR               **block_link_ptr;
UCHAR               **suspend_info_ptr;


    /* Default to successful status.  */
    status =  TX_SUCCESS;
 80034a4:	2300      	movs	r3, #0
 80034a6:	673b      	str	r3, [r7, #112]	; 0x70

    /* Set the pool pointer to NULL.  */
    pool_ptr =  TX_NULL;
 80034a8:	2300      	movs	r3, #0
 80034aa:	66fb      	str	r3, [r7, #108]	; 0x6c
    __asm__ volatile ("MRS  %0, PRIMASK ": "=r" (posture));
 80034ac:	f3ef 8310 	mrs	r3, PRIMASK
 80034b0:	637b      	str	r3, [r7, #52]	; 0x34
    return(posture);
 80034b2:	6b7b      	ldr	r3, [r7, #52]	; 0x34
    int_posture = __get_interrupt_posture();
 80034b4:	633b      	str	r3, [r7, #48]	; 0x30
    __asm__ volatile ("CPSID i" : : : "memory");
 80034b6:	b672      	cpsid	i
    return(int_posture);
 80034b8:	6b3b      	ldr	r3, [r7, #48]	; 0x30

    /* Lockout interrupts.  */
    TX_DISABLE
 80034ba:	677b      	str	r3, [r7, #116]	; 0x74

    /* Determine if the memory pointer is valid.  */
    work_ptr =  TX_VOID_TO_UCHAR_POINTER_CONVERT(memory_ptr);
 80034bc:	687b      	ldr	r3, [r7, #4]
 80034be:	66bb      	str	r3, [r7, #104]	; 0x68
    if (work_ptr != TX_NULL)
 80034c0:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 80034c2:	2b00      	cmp	r3, #0
 80034c4:	d027      	beq.n	8003516 <_tx_byte_release+0x7a>
    {

        /* Back off the memory pointer to pickup its header.  */
        work_ptr =  TX_UCHAR_POINTER_SUB(work_ptr, ((sizeof(UCHAR *)) + (sizeof(ALIGN_TYPE))));
 80034c6:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 80034c8:	3b08      	subs	r3, #8
 80034ca:	66bb      	str	r3, [r7, #104]	; 0x68

        /* There is a pointer, pickup the pool pointer address.  */
        temp_ptr =  TX_UCHAR_POINTER_ADD(work_ptr, (sizeof(UCHAR *)));
 80034cc:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 80034ce:	3304      	adds	r3, #4
 80034d0:	667b      	str	r3, [r7, #100]	; 0x64
        free_ptr =  TX_UCHAR_TO_ALIGN_TYPE_POINTER_CONVERT(temp_ptr);
 80034d2:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 80034d4:	663b      	str	r3, [r7, #96]	; 0x60
        if ((*free_ptr) != TX_BYTE_BLOCK_FREE)
 80034d6:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 80034d8:	681b      	ldr	r3, [r3, #0]
 80034da:	4a7e      	ldr	r2, [pc, #504]	; (80036d4 <_tx_byte_release+0x238>)
 80034dc:	4293      	cmp	r3, r2
 80034de:	d017      	beq.n	8003510 <_tx_byte_release+0x74>
        {

            /* Pickup the pool pointer.  */
            temp_ptr =  TX_UCHAR_POINTER_ADD(work_ptr, (sizeof(UCHAR *)));
 80034e0:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 80034e2:	3304      	adds	r3, #4
 80034e4:	667b      	str	r3, [r7, #100]	; 0x64
            byte_pool_ptr =  TX_UCHAR_TO_INDIRECT_BYTE_POOL_POINTER(temp_ptr);
 80034e6:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 80034e8:	65fb      	str	r3, [r7, #92]	; 0x5c
            pool_ptr =  *byte_pool_ptr;
 80034ea:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 80034ec:	681b      	ldr	r3, [r3, #0]
 80034ee:	66fb      	str	r3, [r7, #108]	; 0x6c

            /* See if we have a valid pool pointer.  */
            if (pool_ptr == TX_NULL)
 80034f0:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80034f2:	2b00      	cmp	r3, #0
 80034f4:	d102      	bne.n	80034fc <_tx_byte_release+0x60>
            {

                /* Return pointer error.  */
                status =  TX_PTR_ERROR;
 80034f6:	2303      	movs	r3, #3
 80034f8:	673b      	str	r3, [r7, #112]	; 0x70
 80034fa:	e00e      	b.n	800351a <_tx_byte_release+0x7e>
            }
            else
            {

                /* See if we have a valid pool.  */
                if (pool_ptr -> tx_byte_pool_id != TX_BYTE_POOL_ID)
 80034fc:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80034fe:	681b      	ldr	r3, [r3, #0]
 8003500:	4a75      	ldr	r2, [pc, #468]	; (80036d8 <_tx_byte_release+0x23c>)
 8003502:	4293      	cmp	r3, r2
 8003504:	d009      	beq.n	800351a <_tx_byte_release+0x7e>
                {

                    /* Return pointer error.  */
                    status =  TX_PTR_ERROR;
 8003506:	2303      	movs	r3, #3
 8003508:	673b      	str	r3, [r7, #112]	; 0x70

                    /* Reset the pool pointer is NULL.  */
                    pool_ptr =  TX_NULL;
 800350a:	2300      	movs	r3, #0
 800350c:	66fb      	str	r3, [r7, #108]	; 0x6c
 800350e:	e004      	b.n	800351a <_tx_byte_release+0x7e>
        }
        else
        {

            /* Return pointer error.  */
            status =  TX_PTR_ERROR;
 8003510:	2303      	movs	r3, #3
 8003512:	673b      	str	r3, [r7, #112]	; 0x70
 8003514:	e001      	b.n	800351a <_tx_byte_release+0x7e>
    }
    else
    {

        /* Return pointer error.  */
        status =  TX_PTR_ERROR;
 8003516:	2303      	movs	r3, #3
 8003518:	673b      	str	r3, [r7, #112]	; 0x70
    }

    /* Determine if the pointer is valid.  */
    if (pool_ptr == TX_NULL)
 800351a:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800351c:	2b00      	cmp	r3, #0
 800351e:	d105      	bne.n	800352c <_tx_byte_release+0x90>
 8003520:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8003522:	62fb      	str	r3, [r7, #44]	; 0x2c
    __asm__ volatile ("MSR  PRIMASK,%0": : "r" (int_posture): "memory");
 8003524:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003526:	f383 8810 	msr	PRIMASK, r3
}
 800352a:	e0cd      	b.n	80036c8 <_tx_byte_release+0x22c>
    {

        /* At this point, we know that the pointer is valid.  */

        /* Pickup thread pointer.  */
        TX_THREAD_GET_CURRENT(thread_ptr)
 800352c:	4b6b      	ldr	r3, [pc, #428]	; (80036dc <_tx_byte_release+0x240>)
 800352e:	681b      	ldr	r3, [r3, #0]
 8003530:	65bb      	str	r3, [r7, #88]	; 0x58

        /* Indicate that this thread is the current owner.  */
        pool_ptr -> tx_byte_pool_owner =  thread_ptr;
 8003532:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8003534:	6dba      	ldr	r2, [r7, #88]	; 0x58
 8003536:	621a      	str	r2, [r3, #32]

        /* Log this kernel call.  */
        TX_EL_BYTE_RELEASE_INSERT

        /* Release the memory.  */
        temp_ptr =   TX_UCHAR_POINTER_ADD(work_ptr, (sizeof(UCHAR *)));
 8003538:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 800353a:	3304      	adds	r3, #4
 800353c:	667b      	str	r3, [r7, #100]	; 0x64
        free_ptr =   TX_UCHAR_TO_ALIGN_TYPE_POINTER_CONVERT(temp_ptr);
 800353e:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8003540:	663b      	str	r3, [r7, #96]	; 0x60
        *free_ptr =  TX_BYTE_BLOCK_FREE;
 8003542:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8003544:	4a63      	ldr	r2, [pc, #396]	; (80036d4 <_tx_byte_release+0x238>)
 8003546:	601a      	str	r2, [r3, #0]

        /* Update the number of available bytes in the pool.  */
        block_link_ptr =  TX_UCHAR_TO_INDIRECT_UCHAR_POINTER_CONVERT(work_ptr);
 8003548:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 800354a:	657b      	str	r3, [r7, #84]	; 0x54
        next_block_ptr =  *block_link_ptr;
 800354c:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800354e:	681b      	ldr	r3, [r3, #0]
 8003550:	653b      	str	r3, [r7, #80]	; 0x50
        pool_ptr -> tx_byte_pool_available =
            pool_ptr -> tx_byte_pool_available + TX_UCHAR_POINTER_DIF(next_block_ptr, work_ptr);
 8003552:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8003554:	689b      	ldr	r3, [r3, #8]
 8003556:	6d39      	ldr	r1, [r7, #80]	; 0x50
 8003558:	6eba      	ldr	r2, [r7, #104]	; 0x68
 800355a:	1a8a      	subs	r2, r1, r2
 800355c:	441a      	add	r2, r3
        pool_ptr -> tx_byte_pool_available =
 800355e:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8003560:	609a      	str	r2, [r3, #8]

        /* Determine if the free block is prior to current search pointer.  */
        if (work_ptr < (pool_ptr -> tx_byte_pool_search))
 8003562:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8003564:	695b      	ldr	r3, [r3, #20]
 8003566:	6eba      	ldr	r2, [r7, #104]	; 0x68
 8003568:	429a      	cmp	r2, r3
 800356a:	d202      	bcs.n	8003572 <_tx_byte_release+0xd6>
        {

            /* Yes, update the search pointer to the released block.  */
            pool_ptr -> tx_byte_pool_search =  work_ptr;
 800356c:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800356e:	6eba      	ldr	r2, [r7, #104]	; 0x68
 8003570:	615a      	str	r2, [r3, #20]
        }

        /* Determine if there are threads suspended on this byte pool.  */
        if (pool_ptr -> tx_byte_pool_suspended_count != TX_NO_SUSPENSIONS)
 8003572:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8003574:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003576:	2b00      	cmp	r3, #0
 8003578:	f000 80a0 	beq.w	80036bc <_tx_byte_release+0x220>
        {

            /* Now examine the suspension list to find threads waiting for
               memory.  Maybe it is now available!  */
            while (pool_ptr -> tx_byte_pool_suspended_count != TX_NO_SUSPENSIONS)
 800357c:	e08e      	b.n	800369c <_tx_byte_release+0x200>
            {

                /* Pickup the first suspended thread pointer.  */
                susp_thread_ptr =  pool_ptr -> tx_byte_pool_suspension_list;
 800357e:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8003580:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003582:	64fb      	str	r3, [r7, #76]	; 0x4c

                /* Pickup the size of the memory the thread is requesting.  */
                memory_size =  susp_thread_ptr -> tx_thread_suspend_info;
 8003584:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8003586:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8003588:	64bb      	str	r3, [r7, #72]	; 0x48
 800358a:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 800358c:	623b      	str	r3, [r7, #32]
    __asm__ volatile ("MSR  PRIMASK,%0": : "r" (int_posture): "memory");
 800358e:	6a3b      	ldr	r3, [r7, #32]
 8003590:	f383 8810 	msr	PRIMASK, r3
}
 8003594:	bf00      	nop

                /* Restore interrupts.  */
                TX_RESTORE

                /* See if the request can be satisfied.  */
                work_ptr =  _tx_byte_pool_search(pool_ptr, memory_size);
 8003596:	6cb9      	ldr	r1, [r7, #72]	; 0x48
 8003598:	6ef8      	ldr	r0, [r7, #108]	; 0x6c
 800359a:	f7ff fe71 	bl	8003280 <_tx_byte_pool_search>
 800359e:	66b8      	str	r0, [r7, #104]	; 0x68
    __asm__ volatile ("MRS  %0, PRIMASK ": "=r" (posture));
 80035a0:	f3ef 8310 	mrs	r3, PRIMASK
 80035a4:	62bb      	str	r3, [r7, #40]	; 0x28
    return(posture);
 80035a6:	6abb      	ldr	r3, [r7, #40]	; 0x28
    int_posture = __get_interrupt_posture();
 80035a8:	627b      	str	r3, [r7, #36]	; 0x24
    __asm__ volatile ("CPSID i" : : : "memory");
 80035aa:	b672      	cpsid	i
    return(int_posture);
 80035ac:	6a7b      	ldr	r3, [r7, #36]	; 0x24

                /* Optional processing extension.  */
                TX_BYTE_RELEASE_EXTENSION

                /* Disable interrupts.  */
                TX_DISABLE
 80035ae:	677b      	str	r3, [r7, #116]	; 0x74

                /* Indicate that this thread is the current owner.  */
                pool_ptr -> tx_byte_pool_owner =  thread_ptr;
 80035b0:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80035b2:	6dba      	ldr	r2, [r7, #88]	; 0x58
 80035b4:	621a      	str	r2, [r3, #32]

                /* If there is not enough memory, break this loop!  */
                if (work_ptr == TX_NULL)
 80035b6:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 80035b8:	2b00      	cmp	r3, #0
 80035ba:	d075      	beq.n	80036a8 <_tx_byte_release+0x20c>
                  /* Break out of the loop.  */
                    break;
                }

                /* Check to make sure the thread is still suspended.  */
                if (susp_thread_ptr ==  pool_ptr -> tx_byte_pool_suspension_list)
 80035bc:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80035be:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80035c0:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 80035c2:	429a      	cmp	r2, r3
 80035c4:	d147      	bne.n	8003656 <_tx_byte_release+0x1ba>
                {

                    /* Also, makes sure the memory size is the same.  */
                    if (susp_thread_ptr -> tx_thread_suspend_info == memory_size)
 80035c6:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80035c8:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 80035ca:	6cba      	ldr	r2, [r7, #72]	; 0x48
 80035cc:	429a      	cmp	r2, r3
 80035ce:	d142      	bne.n	8003656 <_tx_byte_release+0x1ba>
                    {

                        /* Remove the suspended thread from the list.  */

                        /* Decrement the number of threads suspended.  */
                        pool_ptr -> tx_byte_pool_suspended_count--;
 80035d0:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80035d2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80035d4:	1e5a      	subs	r2, r3, #1
 80035d6:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80035d8:	629a      	str	r2, [r3, #40]	; 0x28

                        /* Pickup the suspended count.  */
                        suspended_count =  pool_ptr -> tx_byte_pool_suspended_count;
 80035da:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80035dc:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80035de:	647b      	str	r3, [r7, #68]	; 0x44

                        /* See if this is the only suspended thread on the list.  */
                        if (suspended_count == TX_NO_SUSPENSIONS)
 80035e0:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80035e2:	2b00      	cmp	r3, #0
 80035e4:	d103      	bne.n	80035ee <_tx_byte_release+0x152>
                        {

                            /* Yes, the only suspended thread.  */

                            /* Update the head pointer.  */
                            pool_ptr -> tx_byte_pool_suspension_list =  TX_NULL;
 80035e6:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80035e8:	2200      	movs	r2, #0
 80035ea:	625a      	str	r2, [r3, #36]	; 0x24
 80035ec:	e00e      	b.n	800360c <_tx_byte_release+0x170>
                        {

                            /* At least one more thread is on the same expiration list.  */

                            /* Update the list head pointer.  */
                            next_thread =                                susp_thread_ptr -> tx_thread_suspended_next;
 80035ee:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80035f0:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80035f2:	643b      	str	r3, [r7, #64]	; 0x40
                            pool_ptr -> tx_byte_pool_suspension_list =   next_thread;
 80035f4:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80035f6:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 80035f8:	625a      	str	r2, [r3, #36]	; 0x24

                            /* Update the links of the adjacent threads.  */
                            previous_thread =                              susp_thread_ptr -> tx_thread_suspended_previous;
 80035fa:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80035fc:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80035fe:	63fb      	str	r3, [r7, #60]	; 0x3c
                            next_thread -> tx_thread_suspended_previous =  previous_thread;
 8003600:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8003602:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 8003604:	675a      	str	r2, [r3, #116]	; 0x74
                            previous_thread -> tx_thread_suspended_next =  next_thread;
 8003606:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8003608:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 800360a:	671a      	str	r2, [r3, #112]	; 0x70
                        }

                        /* Prepare for resumption of the thread.  */

                        /* Clear cleanup routine to avoid timeout.  */
                        susp_thread_ptr -> tx_thread_suspend_cleanup =  TX_NULL;
 800360c:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800360e:	2200      	movs	r2, #0
 8003610:	669a      	str	r2, [r3, #104]	; 0x68

                        /* Return this block pointer to the suspended thread waiting for
                           a block.  */
                        suspend_info_ptr =   TX_VOID_TO_INDIRECT_UCHAR_POINTER_CONVERT(susp_thread_ptr -> tx_thread_additional_suspend_info);
 8003612:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8003614:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8003616:	63bb      	str	r3, [r7, #56]	; 0x38
                        *suspend_info_ptr =  work_ptr;
 8003618:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800361a:	6eba      	ldr	r2, [r7, #104]	; 0x68
 800361c:	601a      	str	r2, [r3, #0]

                        /* Clear the memory pointer to indicate that it was given to the suspended thread.  */
                        work_ptr =  TX_NULL;
 800361e:	2300      	movs	r3, #0
 8003620:	66bb      	str	r3, [r7, #104]	; 0x68

                        /* Put return status into the thread control block.  */
                        susp_thread_ptr -> tx_thread_suspend_status =  TX_SUCCESS;
 8003622:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8003624:	2200      	movs	r2, #0
 8003626:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

                        /* Restore interrupts.  */
                        TX_RESTORE
#else
                        /* Temporarily disable preemption.  */
                        _tx_thread_preempt_disable++;
 800362a:	4b2d      	ldr	r3, [pc, #180]	; (80036e0 <_tx_byte_release+0x244>)
 800362c:	681b      	ldr	r3, [r3, #0]
 800362e:	3301      	adds	r3, #1
 8003630:	4a2b      	ldr	r2, [pc, #172]	; (80036e0 <_tx_byte_release+0x244>)
 8003632:	6013      	str	r3, [r2, #0]
 8003634:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8003636:	617b      	str	r3, [r7, #20]
    __asm__ volatile ("MSR  PRIMASK,%0": : "r" (int_posture): "memory");
 8003638:	697b      	ldr	r3, [r7, #20]
 800363a:	f383 8810 	msr	PRIMASK, r3
}
 800363e:	bf00      	nop

                        /* Restore interrupts.  */
                        TX_RESTORE

                        /* Resume thread.  */
                        _tx_thread_system_resume(susp_thread_ptr);
 8003640:	6cf8      	ldr	r0, [r7, #76]	; 0x4c
 8003642:	f000 fbe3 	bl	8003e0c <_tx_thread_system_resume>
    __asm__ volatile ("MRS  %0, PRIMASK ": "=r" (posture));
 8003646:	f3ef 8310 	mrs	r3, PRIMASK
 800364a:	61fb      	str	r3, [r7, #28]
    return(posture);
 800364c:	69fb      	ldr	r3, [r7, #28]
    int_posture = __get_interrupt_posture();
 800364e:	61bb      	str	r3, [r7, #24]
    __asm__ volatile ("CPSID i" : : : "memory");
 8003650:	b672      	cpsid	i
    return(int_posture);
 8003652:	69bb      	ldr	r3, [r7, #24]
#endif

                        /* Lockout interrupts.  */
                        TX_DISABLE
 8003654:	677b      	str	r3, [r7, #116]	; 0x74
                    }
                }

                /* Determine if the memory was given to the suspended thread.  */
                if (work_ptr != TX_NULL)
 8003656:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8003658:	2b00      	cmp	r3, #0
 800365a:	d01f      	beq.n	800369c <_tx_byte_release+0x200>

                    /* No, it wasn't given to the suspended thread.  */

                    /* Put the memory back on the available list since this thread is no longer
                       suspended.  */
                    work_ptr =  TX_UCHAR_POINTER_SUB(work_ptr, (((sizeof(UCHAR *)) + (sizeof(ALIGN_TYPE)))));
 800365c:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 800365e:	3b08      	subs	r3, #8
 8003660:	66bb      	str	r3, [r7, #104]	; 0x68
                    temp_ptr =  TX_UCHAR_POINTER_ADD(work_ptr, (sizeof(UCHAR *)));
 8003662:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8003664:	3304      	adds	r3, #4
 8003666:	667b      	str	r3, [r7, #100]	; 0x64
                    free_ptr =  TX_UCHAR_TO_ALIGN_TYPE_POINTER_CONVERT(temp_ptr);
 8003668:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 800366a:	663b      	str	r3, [r7, #96]	; 0x60
                    *free_ptr =  TX_BYTE_BLOCK_FREE;
 800366c:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 800366e:	4a19      	ldr	r2, [pc, #100]	; (80036d4 <_tx_byte_release+0x238>)
 8003670:	601a      	str	r2, [r3, #0]

                    /* Update the number of available bytes in the pool.  */
                    block_link_ptr =  TX_UCHAR_TO_INDIRECT_UCHAR_POINTER_CONVERT(work_ptr);
 8003672:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8003674:	657b      	str	r3, [r7, #84]	; 0x54
                    next_block_ptr =  *block_link_ptr;
 8003676:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8003678:	681b      	ldr	r3, [r3, #0]
 800367a:	653b      	str	r3, [r7, #80]	; 0x50
                    pool_ptr -> tx_byte_pool_available =
                        pool_ptr -> tx_byte_pool_available + TX_UCHAR_POINTER_DIF(next_block_ptr, work_ptr);
 800367c:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800367e:	689b      	ldr	r3, [r3, #8]
 8003680:	6d39      	ldr	r1, [r7, #80]	; 0x50
 8003682:	6eba      	ldr	r2, [r7, #104]	; 0x68
 8003684:	1a8a      	subs	r2, r1, r2
 8003686:	441a      	add	r2, r3
                    pool_ptr -> tx_byte_pool_available =
 8003688:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800368a:	609a      	str	r2, [r3, #8]

                    /* Determine if the current pointer is before the search pointer.  */
                    if (work_ptr < (pool_ptr -> tx_byte_pool_search))
 800368c:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800368e:	695b      	ldr	r3, [r3, #20]
 8003690:	6eba      	ldr	r2, [r7, #104]	; 0x68
 8003692:	429a      	cmp	r2, r3
 8003694:	d202      	bcs.n	800369c <_tx_byte_release+0x200>
                    {

                        /* Yes, update the search pointer.  */
                        pool_ptr -> tx_byte_pool_search =  work_ptr;
 8003696:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8003698:	6eba      	ldr	r2, [r7, #104]	; 0x68
 800369a:	615a      	str	r2, [r3, #20]
            while (pool_ptr -> tx_byte_pool_suspended_count != TX_NO_SUSPENSIONS)
 800369c:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800369e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80036a0:	2b00      	cmp	r3, #0
 80036a2:	f47f af6c 	bne.w	800357e <_tx_byte_release+0xe2>
 80036a6:	e000      	b.n	80036aa <_tx_byte_release+0x20e>
                    break;
 80036a8:	bf00      	nop
 80036aa:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 80036ac:	613b      	str	r3, [r7, #16]
    __asm__ volatile ("MSR  PRIMASK,%0": : "r" (int_posture): "memory");
 80036ae:	693b      	ldr	r3, [r7, #16]
 80036b0:	f383 8810 	msr	PRIMASK, r3
}
 80036b4:	bf00      	nop

            /* Restore interrupts.  */
            TX_RESTORE

            /* Check for preemption.  */
            _tx_thread_system_preempt_check();
 80036b6:	f000 fb6f 	bl	8003d98 <_tx_thread_system_preempt_check>
 80036ba:	e005      	b.n	80036c8 <_tx_byte_release+0x22c>
 80036bc:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 80036be:	60fb      	str	r3, [r7, #12]
    __asm__ volatile ("MSR  PRIMASK,%0": : "r" (int_posture): "memory");
 80036c0:	68fb      	ldr	r3, [r7, #12]
 80036c2:	f383 8810 	msr	PRIMASK, r3
}
 80036c6:	bf00      	nop
            TX_RESTORE
        }
    }

    /* Return completion status.  */
    return(status);
 80036c8:	6f3b      	ldr	r3, [r7, #112]	; 0x70
}
 80036ca:	4618      	mov	r0, r3
 80036cc:	3778      	adds	r7, #120	; 0x78
 80036ce:	46bd      	mov	sp, r7
 80036d0:	bd80      	pop	{r7, pc}
 80036d2:	bf00      	nop
 80036d4:	ffffeeee 	.word	0xffffeeee
 80036d8:	42595445 	.word	0x42595445
 80036dc:	20007be4 	.word	0x20007be4
 80036e0:	20007d04 	.word	0x20007d04

080036e4 <_tx_initialize_high_level>:
/*  09-30-2020     Yuxin Zhou               Modified comment(s),          */
/*                                            resulting in version 6.1    */
/*                                                                        */
/**************************************************************************/
VOID    _tx_initialize_high_level(VOID)
{
 80036e4:	b580      	push	{r7, lr}
 80036e6:	af00      	add	r7, sp, #0

    /* Initialize the event log, if enabled.  */
    TX_EL_INITIALIZE

    /* Call the thread control initialization function.  */
    _tx_thread_initialize();
 80036e8:	f000 f97a 	bl	80039e0 <_tx_thread_initialize>

#ifndef TX_NO_TIMER

    /* Call the timer control initialization function.  */
    _tx_timer_initialize();
 80036ec:	f000 fe9e 	bl	800442c <_tx_timer_initialize>
#endif

#ifndef TX_DISABLE_REDUNDANT_CLEARING

    /* Call the semaphore initialization function.  */
    _tx_semaphore_initialize();
 80036f0:	4b12      	ldr	r3, [pc, #72]	; (800373c <_tx_initialize_high_level+0x58>)
 80036f2:	2200      	movs	r2, #0
 80036f4:	601a      	str	r2, [r3, #0]
 80036f6:	4b12      	ldr	r3, [pc, #72]	; (8003740 <_tx_initialize_high_level+0x5c>)
 80036f8:	2200      	movs	r2, #0
 80036fa:	601a      	str	r2, [r3, #0]

    /* Call the queue initialization function.  */
    _tx_queue_initialize();
 80036fc:	4b11      	ldr	r3, [pc, #68]	; (8003744 <_tx_initialize_high_level+0x60>)
 80036fe:	2200      	movs	r2, #0
 8003700:	601a      	str	r2, [r3, #0]
 8003702:	4b11      	ldr	r3, [pc, #68]	; (8003748 <_tx_initialize_high_level+0x64>)
 8003704:	2200      	movs	r2, #0
 8003706:	601a      	str	r2, [r3, #0]

    /* Call the event flag initialization function.  */
    _tx_event_flags_initialize();
 8003708:	4b10      	ldr	r3, [pc, #64]	; (800374c <_tx_initialize_high_level+0x68>)
 800370a:	2200      	movs	r2, #0
 800370c:	601a      	str	r2, [r3, #0]
 800370e:	4b10      	ldr	r3, [pc, #64]	; (8003750 <_tx_initialize_high_level+0x6c>)
 8003710:	2200      	movs	r2, #0
 8003712:	601a      	str	r2, [r3, #0]

    /* Call the block pool initialization function.  */
    _tx_block_pool_initialize();
 8003714:	4b0f      	ldr	r3, [pc, #60]	; (8003754 <_tx_initialize_high_level+0x70>)
 8003716:	2200      	movs	r2, #0
 8003718:	601a      	str	r2, [r3, #0]
 800371a:	4b0f      	ldr	r3, [pc, #60]	; (8003758 <_tx_initialize_high_level+0x74>)
 800371c:	2200      	movs	r2, #0
 800371e:	601a      	str	r2, [r3, #0]

    /* Call the byte pool initialization function.  */
    _tx_byte_pool_initialize();
 8003720:	4b0e      	ldr	r3, [pc, #56]	; (800375c <_tx_initialize_high_level+0x78>)
 8003722:	2200      	movs	r2, #0
 8003724:	601a      	str	r2, [r3, #0]
 8003726:	4b0e      	ldr	r3, [pc, #56]	; (8003760 <_tx_initialize_high_level+0x7c>)
 8003728:	2200      	movs	r2, #0
 800372a:	601a      	str	r2, [r3, #0]

    /* Call the mutex initialization function.  */
    _tx_mutex_initialize();
 800372c:	4b0d      	ldr	r3, [pc, #52]	; (8003764 <_tx_initialize_high_level+0x80>)
 800372e:	2200      	movs	r2, #0
 8003730:	601a      	str	r2, [r3, #0]
 8003732:	4b0d      	ldr	r3, [pc, #52]	; (8003768 <_tx_initialize_high_level+0x84>)
 8003734:	2200      	movs	r2, #0
 8003736:	601a      	str	r2, [r3, #0]
#endif
}
 8003738:	bf00      	nop
 800373a:	bd80      	pop	{r7, pc}
 800373c:	20007bac 	.word	0x20007bac
 8003740:	20007bb0 	.word	0x20007bb0
 8003744:	20007bb4 	.word	0x20007bb4
 8003748:	20007bb8 	.word	0x20007bb8
 800374c:	20007bbc 	.word	0x20007bbc
 8003750:	20007bc0 	.word	0x20007bc0
 8003754:	20007bcc 	.word	0x20007bcc
 8003758:	20007bd0 	.word	0x20007bd0
 800375c:	20007bd4 	.word	0x20007bd4
 8003760:	20007bd8 	.word	0x20007bd8
 8003764:	20007bc4 	.word	0x20007bc4
 8003768:	20007bc8 	.word	0x20007bc8

0800376c <_tx_initialize_kernel_enter>:
/*  09-30-2020     Yuxin Zhou               Modified comment(s),          */
/*                                            resulting in version 6.1    */
/*                                                                        */
/**************************************************************************/
VOID  _tx_initialize_kernel_enter(VOID)
{
 800376c:	b580      	push	{r7, lr}
 800376e:	af00      	add	r7, sp, #0

    /* Determine if the compiler has pre-initialized ThreadX.  */
    if (_tx_thread_system_state != TX_INITIALIZE_ALMOST_DONE)
 8003770:	4b10      	ldr	r3, [pc, #64]	; (80037b4 <_tx_initialize_kernel_enter+0x48>)
 8003772:	681b      	ldr	r3, [r3, #0]
 8003774:	f113 3f0f 	cmn.w	r3, #252645135	; 0xf0f0f0f
 8003778:	d00c      	beq.n	8003794 <_tx_initialize_kernel_enter+0x28>
        /* No, the initialization still needs to take place.  */

        /* Ensure that the system state variable is set to indicate
           initialization is in progress.  Note that this variable is
           later used to represent interrupt nesting.  */
        _tx_thread_system_state =  TX_INITIALIZE_IN_PROGRESS;
 800377a:	4b0e      	ldr	r3, [pc, #56]	; (80037b4 <_tx_initialize_kernel_enter+0x48>)
 800377c:	f04f 32f0 	mov.w	r2, #4042322160	; 0xf0f0f0f0
 8003780:	601a      	str	r2, [r3, #0]
        /* Call any port specific preprocessing.  */
        TX_PORT_SPECIFIC_PRE_INITIALIZATION

        /* Invoke the low-level initialization to handle all processor specific
           initialization issues.  */
        _tx_initialize_low_level();
 8003782:	f7fc fd35 	bl	80001f0 <_tx_initialize_low_level>

        /* Invoke the high-level initialization to exercise all of the
           ThreadX components and the application's initialization
           function.  */
        _tx_initialize_high_level();
 8003786:	f7ff ffad 	bl	80036e4 <_tx_initialize_high_level>

        /* Call any port specific post-processing.  */
        TX_PORT_SPECIFIC_POST_INITIALIZATION
 800378a:	4b0b      	ldr	r3, [pc, #44]	; (80037b8 <_tx_initialize_kernel_enter+0x4c>)
 800378c:	681b      	ldr	r3, [r3, #0]
 800378e:	3301      	adds	r3, #1
 8003790:	4a09      	ldr	r2, [pc, #36]	; (80037b8 <_tx_initialize_kernel_enter+0x4c>)
 8003792:	6013      	str	r3, [r2, #0]
    TX_INITIALIZE_KERNEL_ENTER_EXTENSION

    /* Ensure that the system state variable is set to indicate
       initialization is in progress.  Note that this variable is
       later used to represent interrupt nesting.  */
    _tx_thread_system_state =  TX_INITIALIZE_IN_PROGRESS;
 8003794:	4b07      	ldr	r3, [pc, #28]	; (80037b4 <_tx_initialize_kernel_enter+0x48>)
 8003796:	f04f 32f0 	mov.w	r2, #4042322160	; 0xf0f0f0f0
 800379a:	601a      	str	r2, [r3, #0]

    /* Call the application provided initialization function.  Pass the
       first available memory address to it.  */
    tx_application_define(_tx_initialize_unused_memory);
 800379c:	4b07      	ldr	r3, [pc, #28]	; (80037bc <_tx_initialize_kernel_enter+0x50>)
 800379e:	681b      	ldr	r3, [r3, #0]
 80037a0:	4618      	mov	r0, r3
 80037a2:	f7fd f82f 	bl	8000804 <tx_application_define>

    /* Set the system state in preparation for entering the thread
       scheduler.  */
    _tx_thread_system_state =  TX_INITIALIZE_IS_FINISHED;
 80037a6:	4b03      	ldr	r3, [pc, #12]	; (80037b4 <_tx_initialize_kernel_enter+0x48>)
 80037a8:	2200      	movs	r2, #0
 80037aa:	601a      	str	r2, [r3, #0]

    /* Call any port specific pre-scheduler processing.  */
    TX_PORT_SPECIFIC_PRE_SCHEDULER_INITIALIZATION

    /* Enter the scheduling loop to start executing threads!  */
    _tx_thread_schedule();
 80037ac:	f7fc fd70 	bl	8000290 <_tx_thread_schedule>
#ifdef TX_SAFETY_CRITICAL

    /* If we ever get here, raise safety critical exception.  */
    TX_SAFETY_CRITICAL_EXCEPTION(__FILE__, __LINE__, 0);
#endif
}
 80037b0:	bf00      	nop
 80037b2:	bd80      	pop	{r7, pc}
 80037b4:	2000000c 	.word	0x2000000c
 80037b8:	20007d04 	.word	0x20007d04
 80037bc:	20007bdc 	.word	0x20007bdc

080037c0 <_tx_initialize_kernel_setup>:
/*  09-30-2020     Yuxin Zhou               Modified comment(s),          */
/*                                            resulting in version 6.1    */
/*                                                                        */
/**************************************************************************/
VOID  _tx_initialize_kernel_setup(VOID)
{
 80037c0:	b580      	push	{r7, lr}
 80037c2:	af00      	add	r7, sp, #0

    /* Ensure that the system state variable is set to indicate
       initialization is in progress.  Note that this variable is
       later used to represent interrupt nesting.  */
    _tx_thread_system_state =  TX_INITIALIZE_IN_PROGRESS;
 80037c4:	4b08      	ldr	r3, [pc, #32]	; (80037e8 <_tx_initialize_kernel_setup+0x28>)
 80037c6:	f04f 32f0 	mov.w	r2, #4042322160	; 0xf0f0f0f0
 80037ca:	601a      	str	r2, [r3, #0]
    /* Call any port specific preprocessing.  */
    TX_PORT_SPECIFIC_PRE_INITIALIZATION

    /* Invoke the low-level initialization to handle all processor specific
       initialization issues.  */
    _tx_initialize_low_level();
 80037cc:	f7fc fd10 	bl	80001f0 <_tx_initialize_low_level>

    /* Invoke the high-level initialization to exercise all of the
       ThreadX components and the application's initialization
       function.  */
    _tx_initialize_high_level();
 80037d0:	f7ff ff88 	bl	80036e4 <_tx_initialize_high_level>

    /* Call any port specific post-processing.  */
    TX_PORT_SPECIFIC_POST_INITIALIZATION
 80037d4:	4b05      	ldr	r3, [pc, #20]	; (80037ec <_tx_initialize_kernel_setup+0x2c>)
 80037d6:	681b      	ldr	r3, [r3, #0]
 80037d8:	3301      	adds	r3, #1
 80037da:	4a04      	ldr	r2, [pc, #16]	; (80037ec <_tx_initialize_kernel_setup+0x2c>)
 80037dc:	6013      	str	r3, [r2, #0]

    /* Set the system state to indicate initialization is almost done.  */
    _tx_thread_system_state =  TX_INITIALIZE_ALMOST_DONE;
 80037de:	4b02      	ldr	r3, [pc, #8]	; (80037e8 <_tx_initialize_kernel_setup+0x28>)
 80037e0:	4a03      	ldr	r2, [pc, #12]	; (80037f0 <_tx_initialize_kernel_setup+0x30>)
 80037e2:	601a      	str	r2, [r3, #0]
}
 80037e4:	bf00      	nop
 80037e6:	bd80      	pop	{r7, pc}
 80037e8:	2000000c 	.word	0x2000000c
 80037ec:	20007d04 	.word	0x20007d04
 80037f0:	f0f0f0f1 	.word	0xf0f0f0f1

080037f4 <_tx_thread_create>:
/*                                                                        */
/**************************************************************************/
UINT  _tx_thread_create(TX_THREAD *thread_ptr, CHAR *name_ptr, VOID (*entry_function)(ULONG id), ULONG entry_input,
                            VOID *stack_start, ULONG stack_size, UINT priority, UINT preempt_threshold,
                            ULONG time_slice, UINT auto_start)
{
 80037f4:	b580      	push	{r7, lr}
 80037f6:	b092      	sub	sp, #72	; 0x48
 80037f8:	af00      	add	r7, sp, #0
 80037fa:	60f8      	str	r0, [r7, #12]
 80037fc:	60b9      	str	r1, [r7, #8]
 80037fe:	607a      	str	r2, [r7, #4]
 8003800:	603b      	str	r3, [r7, #0]
TX_INTERRUPT_SAVE_AREA

TX_THREAD               *next_thread;
TX_THREAD               *previous_thread;
TX_THREAD               *saved_thread_ptr;
UINT                    saved_threshold =  ((UINT) 0);
 8003802:	2300      	movs	r3, #0
 8003804:	643b      	str	r3, [r7, #64]	; 0x40
#ifndef TX_DISABLE_STACK_FILLING

    /* Set the thread stack to a pattern prior to creating the initial
       stack frame.  This pattern is used by the stack checking routines
       to see how much has been used.  */
    TX_MEMSET(stack_start, ((UCHAR) TX_STACK_FILL), stack_size);
 8003806:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 8003808:	21ef      	movs	r1, #239	; 0xef
 800380a:	6d38      	ldr	r0, [r7, #80]	; 0x50
 800380c:	f001 fbbe 	bl	8004f8c <memset>

    /* Prepare the thread control block prior to placing it on the created
       list.  */

    /* Initialize thread control block to all zeros.  */
    TX_MEMSET(thread_ptr, 0, (sizeof(TX_THREAD)));
 8003810:	22b4      	movs	r2, #180	; 0xb4
 8003812:	2100      	movs	r1, #0
 8003814:	68f8      	ldr	r0, [r7, #12]
 8003816:	f001 fbb9 	bl	8004f8c <memset>

    /* Place the supplied parameters into the thread's control block.  */
    thread_ptr -> tx_thread_name =              name_ptr;
 800381a:	68fb      	ldr	r3, [r7, #12]
 800381c:	68ba      	ldr	r2, [r7, #8]
 800381e:	629a      	str	r2, [r3, #40]	; 0x28
    thread_ptr -> tx_thread_entry =             entry_function;
 8003820:	68fb      	ldr	r3, [r7, #12]
 8003822:	687a      	ldr	r2, [r7, #4]
 8003824:	645a      	str	r2, [r3, #68]	; 0x44
    thread_ptr -> tx_thread_entry_parameter =   entry_input;
 8003826:	68fb      	ldr	r3, [r7, #12]
 8003828:	683a      	ldr	r2, [r7, #0]
 800382a:	649a      	str	r2, [r3, #72]	; 0x48
    thread_ptr -> tx_thread_stack_start =       stack_start;
 800382c:	68fb      	ldr	r3, [r7, #12]
 800382e:	6d3a      	ldr	r2, [r7, #80]	; 0x50
 8003830:	60da      	str	r2, [r3, #12]
    thread_ptr -> tx_thread_stack_size =        stack_size;
 8003832:	68fb      	ldr	r3, [r7, #12]
 8003834:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 8003836:	615a      	str	r2, [r3, #20]
    thread_ptr -> tx_thread_priority =          priority;
 8003838:	68fb      	ldr	r3, [r7, #12]
 800383a:	6dba      	ldr	r2, [r7, #88]	; 0x58
 800383c:	62da      	str	r2, [r3, #44]	; 0x2c
    thread_ptr -> tx_thread_user_priority =     priority;
 800383e:	68fb      	ldr	r3, [r7, #12]
 8003840:	6dba      	ldr	r2, [r7, #88]	; 0x58
 8003842:	f8c3 2094 	str.w	r2, [r3, #148]	; 0x94
    thread_ptr -> tx_thread_time_slice =        time_slice;
 8003846:	68fb      	ldr	r3, [r7, #12]
 8003848:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 800384a:	619a      	str	r2, [r3, #24]
    thread_ptr -> tx_thread_new_time_slice =    time_slice;
 800384c:	68fb      	ldr	r3, [r7, #12]
 800384e:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 8003850:	61da      	str	r2, [r3, #28]
    thread_ptr -> tx_thread_inherit_priority =  ((UINT) TX_MAX_PRIORITIES);
 8003852:	68fb      	ldr	r3, [r7, #12]
 8003854:	2240      	movs	r2, #64	; 0x40
 8003856:	f8c3 209c 	str.w	r2, [r3, #156]	; 0x9c

    /* Calculate the end of the thread's stack area.  */
    temp_ptr =  TX_VOID_TO_UCHAR_POINTER_CONVERT(stack_start);
 800385a:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800385c:	63fb      	str	r3, [r7, #60]	; 0x3c
    temp_ptr =  (TX_UCHAR_POINTER_ADD(temp_ptr, (stack_size - ((ULONG) 1))));
 800385e:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8003860:	3b01      	subs	r3, #1
 8003862:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 8003864:	4413      	add	r3, r2
 8003866:	63fb      	str	r3, [r7, #60]	; 0x3c
    thread_ptr -> tx_thread_stack_end =         TX_UCHAR_TO_VOID_POINTER_CONVERT(temp_ptr);
 8003868:	68fb      	ldr	r3, [r7, #12]
 800386a:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 800386c:	611a      	str	r2, [r3, #16]
    thread_ptr -> tx_thread_preempt_threshold =       preempt_threshold;
    thread_ptr -> tx_thread_user_preempt_threshold =  preempt_threshold;
#else

    /* Preemption-threshold is disabled, determine if preemption-threshold was required.  */
    if (priority != preempt_threshold)
 800386e:	6dba      	ldr	r2, [r7, #88]	; 0x58
 8003870:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8003872:	429a      	cmp	r2, r3
 8003874:	d007      	beq.n	8003886 <_tx_thread_create+0x92>
    {

        /* Preemption-threshold specified. Since specific preemption-threshold is not supported,
           disable all preemption.  */
        thread_ptr -> tx_thread_preempt_threshold =       ((UINT) 0);
 8003876:	68fb      	ldr	r3, [r7, #12]
 8003878:	2200      	movs	r2, #0
 800387a:	63da      	str	r2, [r3, #60]	; 0x3c
        thread_ptr -> tx_thread_user_preempt_threshold =  ((UINT) 0);
 800387c:	68fb      	ldr	r3, [r7, #12]
 800387e:	2200      	movs	r2, #0
 8003880:	f8c3 2098 	str.w	r2, [r3, #152]	; 0x98
 8003884:	e006      	b.n	8003894 <_tx_thread_create+0xa0>
    }
    else
    {

        /* Preemption-threshold is not specified, just setup with the priority.  */
        thread_ptr -> tx_thread_preempt_threshold =       priority;
 8003886:	68fb      	ldr	r3, [r7, #12]
 8003888:	6dba      	ldr	r2, [r7, #88]	; 0x58
 800388a:	63da      	str	r2, [r3, #60]	; 0x3c
        thread_ptr -> tx_thread_user_preempt_threshold =  priority;
 800388c:	68fb      	ldr	r3, [r7, #12]
 800388e:	6dba      	ldr	r2, [r7, #88]	; 0x58
 8003890:	f8c3 2098 	str.w	r2, [r3, #152]	; 0x98
    }
#endif

    /* Now fill in the values that are required for thread initialization.  */
    thread_ptr -> tx_thread_state =  TX_SUSPENDED;
 8003894:	68fb      	ldr	r3, [r7, #12]
 8003896:	2203      	movs	r2, #3
 8003898:	631a      	str	r2, [r3, #48]	; 0x30

    /* Setup the necessary fields in the thread timer block.  */
    TX_THREAD_CREATE_TIMEOUT_SETUP(thread_ptr)
 800389a:	68fb      	ldr	r3, [r7, #12]
 800389c:	4a48      	ldr	r2, [pc, #288]	; (80039c0 <_tx_thread_create+0x1cc>)
 800389e:	655a      	str	r2, [r3, #84]	; 0x54
 80038a0:	68fa      	ldr	r2, [r7, #12]
 80038a2:	68fb      	ldr	r3, [r7, #12]
 80038a4:	659a      	str	r2, [r3, #88]	; 0x58
    TX_THREAD_CREATE_INTERNAL_EXTENSION(thread_ptr)

    /* Call the target specific stack frame building routine to build the
       thread's initial stack and to setup the actual stack pointer in the
       control block.  */
    _tx_thread_stack_build(thread_ptr, _tx_thread_shell_entry);
 80038a6:	4947      	ldr	r1, [pc, #284]	; (80039c4 <_tx_thread_create+0x1d0>)
 80038a8:	68f8      	ldr	r0, [r7, #12]
 80038aa:	f7fc fd59 	bl	8000360 <_tx_thread_stack_build>
    __asm__ volatile ("MRS  %0, PRIMASK ": "=r" (posture));
 80038ae:	f3ef 8310 	mrs	r3, PRIMASK
 80038b2:	62fb      	str	r3, [r7, #44]	; 0x2c
    return(posture);
 80038b4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
    int_posture = __get_interrupt_posture();
 80038b6:	62bb      	str	r3, [r7, #40]	; 0x28
    __asm__ volatile ("CPSID i" : : : "memory");
 80038b8:	b672      	cpsid	i
    return(int_posture);
 80038ba:	6abb      	ldr	r3, [r7, #40]	; 0x28
    /* Setup the highest usage stack pointer.  */
    thread_ptr -> tx_thread_stack_highest_ptr =  thread_ptr -> tx_thread_stack_ptr;
#endif

    /* Prepare to make this thread a member of the created thread list.  */
    TX_DISABLE
 80038bc:	63bb      	str	r3, [r7, #56]	; 0x38

    /* Load the thread ID field in the thread control block.  */
    thread_ptr -> tx_thread_id =  TX_THREAD_ID;
 80038be:	68fb      	ldr	r3, [r7, #12]
 80038c0:	4a41      	ldr	r2, [pc, #260]	; (80039c8 <_tx_thread_create+0x1d4>)
 80038c2:	601a      	str	r2, [r3, #0]

    /* Place the thread on the list of created threads.  First,
       check for an empty list.  */
    if (_tx_thread_created_count == TX_EMPTY)
 80038c4:	4b41      	ldr	r3, [pc, #260]	; (80039cc <_tx_thread_create+0x1d8>)
 80038c6:	681b      	ldr	r3, [r3, #0]
 80038c8:	2b00      	cmp	r3, #0
 80038ca:	d10b      	bne.n	80038e4 <_tx_thread_create+0xf0>
    {

        /* The created thread list is empty.  Add thread to empty list.  */
        _tx_thread_created_ptr =                    thread_ptr;
 80038cc:	4a40      	ldr	r2, [pc, #256]	; (80039d0 <_tx_thread_create+0x1dc>)
 80038ce:	68fb      	ldr	r3, [r7, #12]
 80038d0:	6013      	str	r3, [r2, #0]
        thread_ptr -> tx_thread_created_next =      thread_ptr;
 80038d2:	68fb      	ldr	r3, [r7, #12]
 80038d4:	68fa      	ldr	r2, [r7, #12]
 80038d6:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
        thread_ptr -> tx_thread_created_previous =  thread_ptr;
 80038da:	68fb      	ldr	r3, [r7, #12]
 80038dc:	68fa      	ldr	r2, [r7, #12]
 80038de:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
 80038e2:	e016      	b.n	8003912 <_tx_thread_create+0x11e>
    }
    else
    {

        /* This list is not NULL, add to the end of the list.  */
        next_thread =  _tx_thread_created_ptr;
 80038e4:	4b3a      	ldr	r3, [pc, #232]	; (80039d0 <_tx_thread_create+0x1dc>)
 80038e6:	681b      	ldr	r3, [r3, #0]
 80038e8:	637b      	str	r3, [r7, #52]	; 0x34
        previous_thread =  next_thread -> tx_thread_created_previous;
 80038ea:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80038ec:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 80038f0:	633b      	str	r3, [r7, #48]	; 0x30

        /* Place the new thread in the list.  */
        next_thread -> tx_thread_created_previous =  thread_ptr;
 80038f2:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80038f4:	68fa      	ldr	r2, [r7, #12]
 80038f6:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
        previous_thread -> tx_thread_created_next =  thread_ptr;
 80038fa:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80038fc:	68fa      	ldr	r2, [r7, #12]
 80038fe:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

        /* Setup this thread's created links.  */
        thread_ptr -> tx_thread_created_previous =  previous_thread;
 8003902:	68fb      	ldr	r3, [r7, #12]
 8003904:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8003906:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
        thread_ptr -> tx_thread_created_next =      next_thread;
 800390a:	68fb      	ldr	r3, [r7, #12]
 800390c:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 800390e:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
    }

    /* Increment the thread created count.  */
    _tx_thread_created_count++;
 8003912:	4b2e      	ldr	r3, [pc, #184]	; (80039cc <_tx_thread_create+0x1d8>)
 8003914:	681b      	ldr	r3, [r3, #0]
 8003916:	3301      	adds	r3, #1
 8003918:	4a2c      	ldr	r2, [pc, #176]	; (80039cc <_tx_thread_create+0x1d8>)
 800391a:	6013      	str	r3, [r2, #0]
    TX_EL_THREAD_CREATE_INSERT

#ifndef TX_NOT_INTERRUPTABLE

    /* Temporarily disable preemption.  */
    _tx_thread_preempt_disable++;
 800391c:	4b2d      	ldr	r3, [pc, #180]	; (80039d4 <_tx_thread_create+0x1e0>)
 800391e:	681b      	ldr	r3, [r3, #0]
 8003920:	3301      	adds	r3, #1
 8003922:	4a2c      	ldr	r2, [pc, #176]	; (80039d4 <_tx_thread_create+0x1e0>)
 8003924:	6013      	str	r3, [r2, #0]
#endif

    /* Determine if an automatic start was requested.  If so, call the resume
       thread function and then check for a preemption condition.  */
    if (auto_start == TX_AUTO_START)
 8003926:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8003928:	2b01      	cmp	r3, #1
 800392a:	d129      	bne.n	8003980 <_tx_thread_create+0x18c>
    __asm__ volatile (" MRS  %0,IPSR ": "=r" (ipsr_value) );
 800392c:	f3ef 8305 	mrs	r3, IPSR
 8003930:	627b      	str	r3, [r7, #36]	; 0x24
    return(ipsr_value);
 8003932:	6a7a      	ldr	r2, [r7, #36]	; 0x24
    {

        /* Determine if the create call is being called from initialization.  */
        if (TX_THREAD_GET_SYSTEM_STATE() >= TX_INITIALIZE_IN_PROGRESS)
 8003934:	4b28      	ldr	r3, [pc, #160]	; (80039d8 <_tx_thread_create+0x1e4>)
 8003936:	681b      	ldr	r3, [r3, #0]
 8003938:	4313      	orrs	r3, r2
 800393a:	f1b3 3ff0 	cmp.w	r3, #4042322160	; 0xf0f0f0f0
 800393e:	d30d      	bcc.n	800395c <_tx_thread_create+0x168>

            /* Pickup the current thread execute pointer, which corresponds to the
               highest priority thread ready to execute.  Interrupt lockout is
               not required, since interrupts are assumed to be disabled during
               initialization.  */
            saved_thread_ptr =  _tx_thread_execute_ptr;
 8003940:	4b26      	ldr	r3, [pc, #152]	; (80039dc <_tx_thread_create+0x1e8>)
 8003942:	681b      	ldr	r3, [r3, #0]
 8003944:	647b      	str	r3, [r7, #68]	; 0x44

            /* Determine if there is thread ready for execution.  */
            if (saved_thread_ptr != TX_NULL)
 8003946:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8003948:	2b00      	cmp	r3, #0
 800394a:	d009      	beq.n	8003960 <_tx_thread_create+0x16c>
            {

                /* Yes, a thread is ready for execution when initialization completes.  */

                /* Save the current preemption-threshold.  */
                saved_threshold =  saved_thread_ptr -> tx_thread_preempt_threshold;
 800394c:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800394e:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003950:	643b      	str	r3, [r7, #64]	; 0x40

                /* For initialization, temporarily set the preemption-threshold to the
                   priority level to make sure the highest-priority thread runs once
                   initialization is complete.  */
                saved_thread_ptr -> tx_thread_preempt_threshold =  saved_thread_ptr -> tx_thread_priority;
 8003952:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8003954:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8003956:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8003958:	63da      	str	r2, [r3, #60]	; 0x3c
 800395a:	e001      	b.n	8003960 <_tx_thread_create+0x16c>
        }
        else
        {

            /* Simply set the saved thread pointer to NULL.  */
            saved_thread_ptr =  TX_NULL;
 800395c:	2300      	movs	r3, #0
 800395e:	647b      	str	r3, [r7, #68]	; 0x44
 8003960:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003962:	623b      	str	r3, [r7, #32]
    __asm__ volatile ("MSR  PRIMASK,%0": : "r" (int_posture): "memory");
 8003964:	6a3b      	ldr	r3, [r7, #32]
 8003966:	f383 8810 	msr	PRIMASK, r3
}
 800396a:	bf00      	nop

        /* Perform any additional activities for tool or user purpose.  */
        TX_THREAD_CREATE_EXTENSION(thread_ptr)

        /* Call the resume thread function to make this thread ready.  */
        _tx_thread_system_resume(thread_ptr);
 800396c:	68f8      	ldr	r0, [r7, #12]
 800396e:	f000 fa4d 	bl	8003e0c <_tx_thread_system_resume>
#endif

        /* Determine if the thread's preemption-threshold needs to be restored.  */
        if (saved_thread_ptr != TX_NULL)
 8003972:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8003974:	2b00      	cmp	r3, #0
 8003976:	d01e      	beq.n	80039b6 <_tx_thread_create+0x1c2>
        {

            /* Yes, restore the previous highest-priority thread's preemption-threshold. This
               can only happen if this routine is called from initialization.  */
            saved_thread_ptr -> tx_thread_preempt_threshold =  saved_threshold;
 8003978:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800397a:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 800397c:	63da      	str	r2, [r3, #60]	; 0x3c
 800397e:	e01a      	b.n	80039b6 <_tx_thread_create+0x1c2>
 8003980:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003982:	613b      	str	r3, [r7, #16]
    __asm__ volatile ("MSR  PRIMASK,%0": : "r" (int_posture): "memory");
 8003984:	693b      	ldr	r3, [r7, #16]
 8003986:	f383 8810 	msr	PRIMASK, r3
}
 800398a:	bf00      	nop
    __asm__ volatile ("MRS  %0, PRIMASK ": "=r" (posture));
 800398c:	f3ef 8310 	mrs	r3, PRIMASK
 8003990:	61bb      	str	r3, [r7, #24]
    return(posture);
 8003992:	69bb      	ldr	r3, [r7, #24]
    int_posture = __get_interrupt_posture();
 8003994:	617b      	str	r3, [r7, #20]
    __asm__ volatile ("CPSID i" : : : "memory");
 8003996:	b672      	cpsid	i
    return(int_posture);
 8003998:	697b      	ldr	r3, [r7, #20]

        /* Perform any additional activities for tool or user purpose.  */
        TX_THREAD_CREATE_EXTENSION(thread_ptr)

        /* Disable interrupts.  */
        TX_DISABLE
 800399a:	63bb      	str	r3, [r7, #56]	; 0x38

        /* Re-enable preemption.  */
        _tx_thread_preempt_disable--;
 800399c:	4b0d      	ldr	r3, [pc, #52]	; (80039d4 <_tx_thread_create+0x1e0>)
 800399e:	681b      	ldr	r3, [r3, #0]
 80039a0:	3b01      	subs	r3, #1
 80039a2:	4a0c      	ldr	r2, [pc, #48]	; (80039d4 <_tx_thread_create+0x1e0>)
 80039a4:	6013      	str	r3, [r2, #0]
 80039a6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80039a8:	61fb      	str	r3, [r7, #28]
    __asm__ volatile ("MSR  PRIMASK,%0": : "r" (int_posture): "memory");
 80039aa:	69fb      	ldr	r3, [r7, #28]
 80039ac:	f383 8810 	msr	PRIMASK, r3
}
 80039b0:	bf00      	nop

        /* Restore interrupts.  */
        TX_RESTORE

        /* Check for preemption.  */
        _tx_thread_system_preempt_check();
 80039b2:	f000 f9f1 	bl	8003d98 <_tx_thread_system_preempt_check>
#endif
    }

    /* Always return a success.  */
    return(TX_SUCCESS);
 80039b6:	2300      	movs	r3, #0
}
 80039b8:	4618      	mov	r0, r3
 80039ba:	3748      	adds	r7, #72	; 0x48
 80039bc:	46bd      	mov	sp, r7
 80039be:	bd80      	pop	{r7, pc}
 80039c0:	08004371 	.word	0x08004371
 80039c4:	08003b21 	.word	0x08003b21
 80039c8:	54485244 	.word	0x54485244
 80039cc:	20007bf0 	.word	0x20007bf0
 80039d0:	20007bec 	.word	0x20007bec
 80039d4:	20007d04 	.word	0x20007d04
 80039d8:	2000000c 	.word	0x2000000c
 80039dc:	20007be8 	.word	0x20007be8

080039e0 <_tx_thread_initialize>:
/*                                            stack check error handling, */
/*                                            resulting in version 6.1.9  */   
/*                                                                        */
/**************************************************************************/
VOID  _tx_thread_initialize(VOID)
{
 80039e0:	b580      	push	{r7, lr}
 80039e2:	af00      	add	r7, sp, #0
       respectively.  */

#ifndef TX_DISABLE_REDUNDANT_CLEARING

    /* Set current thread pointer to NULL.  */
    TX_THREAD_SET_CURRENT(TX_NULL)
 80039e4:	4b14      	ldr	r3, [pc, #80]	; (8003a38 <_tx_thread_initialize+0x58>)
 80039e6:	2200      	movs	r2, #0
 80039e8:	601a      	str	r2, [r3, #0]

    /* Initialize the execute thread pointer to NULL.  */
    _tx_thread_execute_ptr =  TX_NULL;
 80039ea:	4b14      	ldr	r3, [pc, #80]	; (8003a3c <_tx_thread_initialize+0x5c>)
 80039ec:	2200      	movs	r2, #0
 80039ee:	601a      	str	r2, [r3, #0]

    /* Initialize the priority information.  */
    TX_MEMSET(&_tx_thread_priority_maps[0], 0, (sizeof(_tx_thread_priority_maps)));
 80039f0:	2208      	movs	r2, #8
 80039f2:	2100      	movs	r1, #0
 80039f4:	4812      	ldr	r0, [pc, #72]	; (8003a40 <_tx_thread_initialize+0x60>)
 80039f6:	f001 fac9 	bl	8004f8c <memset>
#endif
#endif

    /* Setup the highest priority variable to the max, indicating no thread is currently
       ready.  */
    _tx_thread_highest_priority =  ((UINT) TX_MAX_PRIORITIES);
 80039fa:	4b12      	ldr	r3, [pc, #72]	; (8003a44 <_tx_thread_initialize+0x64>)
 80039fc:	2240      	movs	r2, #64	; 0x40
 80039fe:	601a      	str	r2, [r3, #0]


#ifndef TX_DISABLE_REDUNDANT_CLEARING

    /* Initialize the array of priority head pointers.  */
    TX_MEMSET(&_tx_thread_priority_list[0], 0, (sizeof(_tx_thread_priority_list)));
 8003a00:	f44f 7280 	mov.w	r2, #256	; 0x100
 8003a04:	2100      	movs	r1, #0
 8003a06:	4810      	ldr	r0, [pc, #64]	; (8003a48 <_tx_thread_initialize+0x68>)
 8003a08:	f001 fac0 	bl	8004f8c <memset>

    /* Initialize the head pointer of the created threads list and the
       number of threads created.  */
    _tx_thread_created_ptr =        TX_NULL;
 8003a0c:	4b0f      	ldr	r3, [pc, #60]	; (8003a4c <_tx_thread_initialize+0x6c>)
 8003a0e:	2200      	movs	r2, #0
 8003a10:	601a      	str	r2, [r3, #0]
    _tx_thread_created_count =      TX_EMPTY;
 8003a12:	4b0f      	ldr	r3, [pc, #60]	; (8003a50 <_tx_thread_initialize+0x70>)
 8003a14:	2200      	movs	r2, #0
 8003a16:	601a      	str	r2, [r3, #0]

    /* Clear the global preempt disable variable.  */
    _tx_thread_preempt_disable =    ((UINT) 0);
 8003a18:	4b0e      	ldr	r3, [pc, #56]	; (8003a54 <_tx_thread_initialize+0x74>)
 8003a1a:	2200      	movs	r2, #0
 8003a1c:	601a      	str	r2, [r3, #0]

    /* Initialize the thread mutex release function pointer.  */
    _tx_thread_mutex_release =      TX_NULL;
 8003a1e:	4b0e      	ldr	r3, [pc, #56]	; (8003a58 <_tx_thread_initialize+0x78>)
 8003a20:	2200      	movs	r2, #0
 8003a22:	601a      	str	r2, [r3, #0]
#endif
#ifdef TX_DISABLE_REDUNDANT_CLEARING
                            | (((ULONG) 1) << 18)
#endif
#ifdef TX_DISABLE_NOTIFY_CALLBACKS
                            | (((ULONG) 1) << 17)
 8003a24:	4b0d      	ldr	r3, [pc, #52]	; (8003a5c <_tx_thread_initialize+0x7c>)
 8003a26:	681b      	ldr	r3, [r3, #0]
 8003a28:	f043 7302 	orr.w	r3, r3, #34078720	; 0x2080000
 8003a2c:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
    _tx_build_options =  _tx_build_options 
 8003a30:	4a0a      	ldr	r2, [pc, #40]	; (8003a5c <_tx_thread_initialize+0x7c>)
 8003a32:	6013      	str	r3, [r2, #0]
#endif
#if TX_PORT_SPECIFIC_BUILD_OPTIONS != 0
                            | TX_PORT_SPECIFIC_BUILD_OPTIONS
#endif
                            ;
}
 8003a34:	bf00      	nop
 8003a36:	bd80      	pop	{r7, pc}
 8003a38:	20007be4 	.word	0x20007be4
 8003a3c:	20007be8 	.word	0x20007be8
 8003a40:	20007bf4 	.word	0x20007bf4
 8003a44:	20007c00 	.word	0x20007c00
 8003a48:	20007c04 	.word	0x20007c04
 8003a4c:	20007bec 	.word	0x20007bec
 8003a50:	20007bf0 	.word	0x20007bf0
 8003a54:	20007d04 	.word	0x20007d04
 8003a58:	20007d08 	.word	0x20007d08
 8003a5c:	20007d0c 	.word	0x20007d0c

08003a60 <_tx_thread_resume>:
/*  09-30-2020     Yuxin Zhou               Modified comment(s),          */
/*                                            resulting in version 6.1    */
/*                                                                        */
/**************************************************************************/
UINT  _tx_thread_resume(TX_THREAD *thread_ptr)
{
 8003a60:	b580      	push	{r7, lr}
 8003a62:	b08c      	sub	sp, #48	; 0x30
 8003a64:	af00      	add	r7, sp, #0
 8003a66:	6078      	str	r0, [r7, #4]

TX_INTERRUPT_SAVE_AREA

UINT        status;
TX_THREAD   *saved_thread_ptr;
UINT        saved_threshold =  ((UINT) 0);
 8003a68:	2300      	movs	r3, #0
 8003a6a:	627b      	str	r3, [r7, #36]	; 0x24
    __asm__ volatile ("MRS  %0, PRIMASK ": "=r" (posture));
 8003a6c:	f3ef 8310 	mrs	r3, PRIMASK
 8003a70:	61fb      	str	r3, [r7, #28]
    return(posture);
 8003a72:	69fb      	ldr	r3, [r7, #28]
    int_posture = __get_interrupt_posture();
 8003a74:	61bb      	str	r3, [r7, #24]
    __asm__ volatile ("CPSID i" : : : "memory");
 8003a76:	b672      	cpsid	i
    return(int_posture);
 8003a78:	69bb      	ldr	r3, [r7, #24]
    TX_THREAD_STACK_CHECK(thread_ptr)
#endif
#endif

    /* Lockout interrupts while the thread is being resumed.  */
    TX_DISABLE
 8003a7a:	623b      	str	r3, [r7, #32]
    /* Log this kernel call.  */
    TX_EL_THREAD_RESUME_INSERT

    /* Determine if the thread is suspended or in the process of suspending.
       If so, call the thread resume processing.  */
    if (thread_ptr -> tx_thread_state == TX_SUSPENDED)
 8003a7c:	687b      	ldr	r3, [r7, #4]
 8003a7e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003a80:	2b03      	cmp	r3, #3
 8003a82:	d12f      	bne.n	8003ae4 <_tx_thread_resume+0x84>
    __asm__ volatile (" MRS  %0,IPSR ": "=r" (ipsr_value) );
 8003a84:	f3ef 8305 	mrs	r3, IPSR
 8003a88:	617b      	str	r3, [r7, #20]
    return(ipsr_value);
 8003a8a:	697a      	ldr	r2, [r7, #20]
    {

        /* Determine if the create call is being called from initialization.  */
        if (TX_THREAD_GET_SYSTEM_STATE() >= TX_INITIALIZE_IN_PROGRESS)
 8003a8c:	4b21      	ldr	r3, [pc, #132]	; (8003b14 <_tx_thread_resume+0xb4>)
 8003a8e:	681b      	ldr	r3, [r3, #0]
 8003a90:	4313      	orrs	r3, r2
 8003a92:	f1b3 3ff0 	cmp.w	r3, #4042322160	; 0xf0f0f0f0
 8003a96:	d30d      	bcc.n	8003ab4 <_tx_thread_resume+0x54>

            /* Pickup the current thread execute pointer, which corresponds to the
               highest priority thread ready to execute.  Interrupt lockout is
               not required, since interrupts are assumed to be disabled during
               initialization.  */
            saved_thread_ptr =  _tx_thread_execute_ptr;
 8003a98:	4b1f      	ldr	r3, [pc, #124]	; (8003b18 <_tx_thread_resume+0xb8>)
 8003a9a:	681b      	ldr	r3, [r3, #0]
 8003a9c:	62bb      	str	r3, [r7, #40]	; 0x28

            /* Determine if there is thread ready for execution.  */
            if (saved_thread_ptr != TX_NULL)
 8003a9e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003aa0:	2b00      	cmp	r3, #0
 8003aa2:	d009      	beq.n	8003ab8 <_tx_thread_resume+0x58>
            {

                /* Yes, a thread is ready for execution when initialization completes.  */

                /* Save the current preemption-threshold.  */
                saved_threshold =  saved_thread_ptr -> tx_thread_preempt_threshold;
 8003aa4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003aa6:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003aa8:	627b      	str	r3, [r7, #36]	; 0x24

                /* For initialization, temporarily set the preemption-threshold to the
                   priority level to make sure the highest-priority thread runs once
                   initialization is complete.  */
                saved_thread_ptr -> tx_thread_preempt_threshold =  saved_thread_ptr -> tx_thread_priority;
 8003aaa:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003aac:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8003aae:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003ab0:	63da      	str	r2, [r3, #60]	; 0x3c
 8003ab2:	e001      	b.n	8003ab8 <_tx_thread_resume+0x58>
        }
        else
        {

            /* Simply set the saved thread pointer to NULL.  */
            saved_thread_ptr =  TX_NULL;
 8003ab4:	2300      	movs	r3, #0
 8003ab6:	62bb      	str	r3, [r7, #40]	; 0x28
        /* Restore interrupts.  */
        TX_RESTORE
#else

        /* Temporarily disable preemption.  */
        _tx_thread_preempt_disable++;
 8003ab8:	4b18      	ldr	r3, [pc, #96]	; (8003b1c <_tx_thread_resume+0xbc>)
 8003aba:	681b      	ldr	r3, [r3, #0]
 8003abc:	3301      	adds	r3, #1
 8003abe:	4a17      	ldr	r2, [pc, #92]	; (8003b1c <_tx_thread_resume+0xbc>)
 8003ac0:	6013      	str	r3, [r2, #0]
 8003ac2:	6a3b      	ldr	r3, [r7, #32]
 8003ac4:	613b      	str	r3, [r7, #16]
    __asm__ volatile ("MSR  PRIMASK,%0": : "r" (int_posture): "memory");
 8003ac6:	693b      	ldr	r3, [r7, #16]
 8003ac8:	f383 8810 	msr	PRIMASK, r3
}
 8003acc:	bf00      	nop

        /* Restore interrupts.  */
        TX_RESTORE

        /* Call the actual resume service to resume the thread.  */
        _tx_thread_system_resume(thread_ptr);
 8003ace:	6878      	ldr	r0, [r7, #4]
 8003ad0:	f000 f99c 	bl	8003e0c <_tx_thread_system_resume>
#endif

        /* Determine if the thread's preemption-threshold needs to be restored.  */
        if (saved_thread_ptr != TX_NULL)
 8003ad4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003ad6:	2b00      	cmp	r3, #0
 8003ad8:	d002      	beq.n	8003ae0 <_tx_thread_resume+0x80>
        {

            /* Yes, restore the previous highest-priority thread's preemption-threshold. This
               can only happen if this routine is called from initialization.  */
            saved_thread_ptr -> tx_thread_preempt_threshold =  saved_threshold;
 8003ada:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003adc:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8003ade:	63da      	str	r2, [r3, #60]	; 0x3c
        /* Setup successful return status.  */
        status =  TX_SUCCESS;
#else

        /* Return successful completion.  */
        return(TX_SUCCESS);
 8003ae0:	2300      	movs	r3, #0
 8003ae2:	e012      	b.n	8003b0a <_tx_thread_resume+0xaa>

        /* Setup successful return status.  */
        status =  TX_SUCCESS;
#endif
    }
    else if (thread_ptr -> tx_thread_delayed_suspend == TX_TRUE)
 8003ae4:	687b      	ldr	r3, [r7, #4]
 8003ae6:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8003ae8:	2b01      	cmp	r3, #1
 8003aea:	d105      	bne.n	8003af8 <_tx_thread_resume+0x98>
    {

        /* Clear the delayed suspension.  */
        thread_ptr -> tx_thread_delayed_suspend =  TX_FALSE;
 8003aec:	687b      	ldr	r3, [r7, #4]
 8003aee:	2200      	movs	r2, #0
 8003af0:	635a      	str	r2, [r3, #52]	; 0x34

        /* Setup delayed suspend lifted return status.  */
        status =  TX_SUSPEND_LIFTED;
 8003af2:	2319      	movs	r3, #25
 8003af4:	62fb      	str	r3, [r7, #44]	; 0x2c
 8003af6:	e001      	b.n	8003afc <_tx_thread_resume+0x9c>
    }
    else
    {

        /* Setup invalid resume return status.  */
        status =  TX_RESUME_ERROR;
 8003af8:	2312      	movs	r3, #18
 8003afa:	62fb      	str	r3, [r7, #44]	; 0x2c
 8003afc:	6a3b      	ldr	r3, [r7, #32]
 8003afe:	60fb      	str	r3, [r7, #12]
    __asm__ volatile ("MSR  PRIMASK,%0": : "r" (int_posture): "memory");
 8003b00:	68fb      	ldr	r3, [r7, #12]
 8003b02:	f383 8810 	msr	PRIMASK, r3
}
 8003b06:	bf00      	nop
        }
    }
#endif

    /* Return completion status. */
    return(status);
 8003b08:	6afb      	ldr	r3, [r7, #44]	; 0x2c
}
 8003b0a:	4618      	mov	r0, r3
 8003b0c:	3730      	adds	r7, #48	; 0x30
 8003b0e:	46bd      	mov	sp, r7
 8003b10:	bd80      	pop	{r7, pc}
 8003b12:	bf00      	nop
 8003b14:	2000000c 	.word	0x2000000c
 8003b18:	20007be8 	.word	0x20007be8
 8003b1c:	20007d04 	.word	0x20007d04

08003b20 <_tx_thread_shell_entry>:
/*  09-30-2020     Yuxin Zhou               Modified comment(s),          */
/*                                            resulting in version 6.1    */
/*                                                                        */
/**************************************************************************/
VOID  _tx_thread_shell_entry(VOID)
{
 8003b20:	b580      	push	{r7, lr}
 8003b22:	b088      	sub	sp, #32
 8003b24:	af00      	add	r7, sp, #0
VOID            (*entry_exit_notify)(TX_THREAD *notify_thread_ptr, UINT type);
#endif


    /* Pickup thread pointer.  */
    TX_THREAD_GET_CURRENT(thread_ptr)
 8003b26:	4b21      	ldr	r3, [pc, #132]	; (8003bac <_tx_thread_shell_entry+0x8c>)
 8003b28:	681b      	ldr	r3, [r3, #0]
 8003b2a:	61fb      	str	r3, [r7, #28]
        (entry_exit_notify)(thread_ptr, TX_THREAD_ENTRY);
    }
#endif

    /* Call current thread's entry function.  */
    (thread_ptr -> tx_thread_entry) (thread_ptr -> tx_thread_entry_parameter);
 8003b2c:	69fb      	ldr	r3, [r7, #28]
 8003b2e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003b30:	69fa      	ldr	r2, [r7, #28]
 8003b32:	6c92      	ldr	r2, [r2, #72]	; 0x48
 8003b34:	4610      	mov	r0, r2
 8003b36:	4798      	blx	r3

    /* Suspend thread with a "completed" state.  */

    /* Determine if the application is using mutexes.  */
    if (_tx_thread_mutex_release != TX_NULL)
 8003b38:	4b1d      	ldr	r3, [pc, #116]	; (8003bb0 <_tx_thread_shell_entry+0x90>)
 8003b3a:	681b      	ldr	r3, [r3, #0]
 8003b3c:	2b00      	cmp	r3, #0
 8003b3e:	d003      	beq.n	8003b48 <_tx_thread_shell_entry+0x28>
    {

        /* Yes, call the mutex release function via a function pointer that
           is setup during mutex initialization.  */
        (_tx_thread_mutex_release)(thread_ptr);
 8003b40:	4b1b      	ldr	r3, [pc, #108]	; (8003bb0 <_tx_thread_shell_entry+0x90>)
 8003b42:	681b      	ldr	r3, [r3, #0]
 8003b44:	69f8      	ldr	r0, [r7, #28]
 8003b46:	4798      	blx	r3
    __asm__ volatile ("MRS  %0, PRIMASK ": "=r" (posture));
 8003b48:	f3ef 8310 	mrs	r3, PRIMASK
 8003b4c:	607b      	str	r3, [r7, #4]
    return(posture);
 8003b4e:	687b      	ldr	r3, [r7, #4]
    int_posture = __get_interrupt_posture();
 8003b50:	603b      	str	r3, [r7, #0]
    __asm__ volatile ("CPSID i" : : : "memory");
 8003b52:	b672      	cpsid	i
    return(int_posture);
 8003b54:	683b      	ldr	r3, [r7, #0]
    }

    /* Lockout interrupts while the thread state is setup.  */
    TX_DISABLE
 8003b56:	61bb      	str	r3, [r7, #24]
    entry_exit_notify =  thread_ptr -> tx_thread_entry_exit_notify;
#endif

    /* Set the status to suspending, in order to indicate the suspension
       is in progress.  */
    thread_ptr -> tx_thread_state =  TX_COMPLETED;
 8003b58:	69fb      	ldr	r3, [r7, #28]
 8003b5a:	2201      	movs	r2, #1
 8003b5c:	631a      	str	r2, [r3, #48]	; 0x30
    /* Restore interrupts.  */
    TX_RESTORE
#else

    /* Set the suspending flag. */
    thread_ptr -> tx_thread_suspending =  TX_TRUE;
 8003b5e:	69fb      	ldr	r3, [r7, #28]
 8003b60:	2201      	movs	r2, #1
 8003b62:	639a      	str	r2, [r3, #56]	; 0x38

    /* Setup for no timeout period.  */
    thread_ptr -> tx_thread_timer.tx_timer_internal_remaining_ticks =  ((ULONG) 0);
 8003b64:	69fb      	ldr	r3, [r7, #28]
 8003b66:	2200      	movs	r2, #0
 8003b68:	64da      	str	r2, [r3, #76]	; 0x4c

    /* Temporarily disable preemption.  */
    _tx_thread_preempt_disable++;
 8003b6a:	4b12      	ldr	r3, [pc, #72]	; (8003bb4 <_tx_thread_shell_entry+0x94>)
 8003b6c:	681b      	ldr	r3, [r3, #0]
 8003b6e:	3301      	adds	r3, #1
 8003b70:	4a10      	ldr	r2, [pc, #64]	; (8003bb4 <_tx_thread_shell_entry+0x94>)
 8003b72:	6013      	str	r3, [r2, #0]
 8003b74:	69bb      	ldr	r3, [r7, #24]
 8003b76:	60bb      	str	r3, [r7, #8]
    __asm__ volatile ("MSR  PRIMASK,%0": : "r" (int_posture): "memory");
 8003b78:	68bb      	ldr	r3, [r7, #8]
 8003b7a:	f383 8810 	msr	PRIMASK, r3
}
 8003b7e:	bf00      	nop
    __asm__ volatile (" MRS  %0,CONTROL ": "=r" (control_value) );
 8003b80:	f3ef 8314 	mrs	r3, CONTROL
 8003b84:	60fb      	str	r3, [r7, #12]
    return(control_value);
 8003b86:	68fb      	ldr	r3, [r7, #12]

    /* Restore interrupts.  */
    TX_RESTORE

    /* Perform any additional activities for tool or user purpose.  */
    TX_THREAD_COMPLETED_EXTENSION(thread_ptr)
 8003b88:	617b      	str	r3, [r7, #20]
 8003b8a:	697b      	ldr	r3, [r7, #20]
 8003b8c:	f023 0304 	bic.w	r3, r3, #4
 8003b90:	617b      	str	r3, [r7, #20]
 8003b92:	697b      	ldr	r3, [r7, #20]
 8003b94:	613b      	str	r3, [r7, #16]
    __asm__ volatile (" MSR  CONTROL,%0": : "r" (control_value): "memory" );
 8003b96:	693b      	ldr	r3, [r7, #16]
 8003b98:	f383 8814 	msr	CONTROL, r3
}
 8003b9c:	bf00      	nop
        (entry_exit_notify)(thread_ptr, TX_THREAD_EXIT);
    }
#endif

    /* Call actual thread suspension routine.  */
    _tx_thread_system_suspend(thread_ptr);
 8003b9e:	69f8      	ldr	r0, [r7, #28]
 8003ba0:	f000 fa4c 	bl	800403c <_tx_thread_system_suspend>
#ifdef TX_SAFETY_CRITICAL

    /* If we ever get here, raise safety critical exception.  */
    TX_SAFETY_CRITICAL_EXCEPTION(__FILE__, __LINE__, 0);
#endif
}
 8003ba4:	bf00      	nop
 8003ba6:	3720      	adds	r7, #32
 8003ba8:	46bd      	mov	sp, r7
 8003baa:	bd80      	pop	{r7, pc}
 8003bac:	20007be4 	.word	0x20007be4
 8003bb0:	20007d08 	.word	0x20007d08
 8003bb4:	20007d04 	.word	0x20007d04

08003bb8 <_tx_thread_sleep>:
/*  09-30-2020     Yuxin Zhou               Modified comment(s),          */
/*                                            resulting in version 6.1    */
/*                                                                        */
/**************************************************************************/
UINT  _tx_thread_sleep(ULONG timer_ticks)
{
 8003bb8:	b580      	push	{r7, lr}
 8003bba:	b08e      	sub	sp, #56	; 0x38
 8003bbc:	af00      	add	r7, sp, #0
 8003bbe:	6078      	str	r0, [r7, #4]
    __asm__ volatile ("MRS  %0, PRIMASK ": "=r" (posture));
 8003bc0:	f3ef 8310 	mrs	r3, PRIMASK
 8003bc4:	62bb      	str	r3, [r7, #40]	; 0x28
    return(posture);
 8003bc6:	6abb      	ldr	r3, [r7, #40]	; 0x28
    int_posture = __get_interrupt_posture();
 8003bc8:	627b      	str	r3, [r7, #36]	; 0x24
    __asm__ volatile ("CPSID i" : : : "memory");
 8003bca:	b672      	cpsid	i
    return(int_posture);
 8003bcc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
UINT            status;
TX_THREAD       *thread_ptr;


    /* Lockout interrupts while the thread is being resumed.  */
    TX_DISABLE
 8003bce:	633b      	str	r3, [r7, #48]	; 0x30

    /* Pickup thread pointer.  */
    TX_THREAD_GET_CURRENT(thread_ptr)
 8003bd0:	4b35      	ldr	r3, [pc, #212]	; (8003ca8 <_tx_thread_sleep+0xf0>)
 8003bd2:	681b      	ldr	r3, [r3, #0]
 8003bd4:	62fb      	str	r3, [r7, #44]	; 0x2c

    /* Determine if this is a legal request.  */

    /* Is there a current thread?  */
    if (thread_ptr == TX_NULL)
 8003bd6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003bd8:	2b00      	cmp	r3, #0
 8003bda:	d108      	bne.n	8003bee <_tx_thread_sleep+0x36>
 8003bdc:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003bde:	623b      	str	r3, [r7, #32]
    __asm__ volatile ("MSR  PRIMASK,%0": : "r" (int_posture): "memory");
 8003be0:	6a3b      	ldr	r3, [r7, #32]
 8003be2:	f383 8810 	msr	PRIMASK, r3
}
 8003be6:	bf00      	nop

        /* Restore interrupts.  */
        TX_RESTORE

        /* Illegal caller of this service.  */
        status =  TX_CALLER_ERROR;
 8003be8:	2313      	movs	r3, #19
 8003bea:	637b      	str	r3, [r7, #52]	; 0x34
 8003bec:	e056      	b.n	8003c9c <_tx_thread_sleep+0xe4>
    __asm__ volatile (" MRS  %0,IPSR ": "=r" (ipsr_value) );
 8003bee:	f3ef 8305 	mrs	r3, IPSR
 8003bf2:	61fb      	str	r3, [r7, #28]
    return(ipsr_value);
 8003bf4:	69fa      	ldr	r2, [r7, #28]
    }

    /* Is the caller an ISR or Initialization?  */
    else if (TX_THREAD_GET_SYSTEM_STATE() != ((ULONG) 0))
 8003bf6:	4b2d      	ldr	r3, [pc, #180]	; (8003cac <_tx_thread_sleep+0xf4>)
 8003bf8:	681b      	ldr	r3, [r3, #0]
 8003bfa:	4313      	orrs	r3, r2
 8003bfc:	2b00      	cmp	r3, #0
 8003bfe:	d008      	beq.n	8003c12 <_tx_thread_sleep+0x5a>
 8003c00:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003c02:	61bb      	str	r3, [r7, #24]
    __asm__ volatile ("MSR  PRIMASK,%0": : "r" (int_posture): "memory");
 8003c04:	69bb      	ldr	r3, [r7, #24]
 8003c06:	f383 8810 	msr	PRIMASK, r3
}
 8003c0a:	bf00      	nop

        /* Restore interrupts.  */
        TX_RESTORE

        /* Illegal caller of this service.  */
        status =  TX_CALLER_ERROR;
 8003c0c:	2313      	movs	r3, #19
 8003c0e:	637b      	str	r3, [r7, #52]	; 0x34
 8003c10:	e044      	b.n	8003c9c <_tx_thread_sleep+0xe4>
    }

#ifndef TX_TIMER_PROCESS_IN_ISR

    /* Is the caller the system timer thread?  */
    else if (thread_ptr == &_tx_timer_thread)
 8003c12:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003c14:	4a26      	ldr	r2, [pc, #152]	; (8003cb0 <_tx_thread_sleep+0xf8>)
 8003c16:	4293      	cmp	r3, r2
 8003c18:	d108      	bne.n	8003c2c <_tx_thread_sleep+0x74>
 8003c1a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003c1c:	617b      	str	r3, [r7, #20]
    __asm__ volatile ("MSR  PRIMASK,%0": : "r" (int_posture): "memory");
 8003c1e:	697b      	ldr	r3, [r7, #20]
 8003c20:	f383 8810 	msr	PRIMASK, r3
}
 8003c24:	bf00      	nop

        /* Restore interrupts.  */
        TX_RESTORE

        /* Illegal caller of this service.  */
        status =  TX_CALLER_ERROR;
 8003c26:	2313      	movs	r3, #19
 8003c28:	637b      	str	r3, [r7, #52]	; 0x34
 8003c2a:	e037      	b.n	8003c9c <_tx_thread_sleep+0xe4>
    }
#endif

    /* Determine if the requested number of ticks is zero.  */
    else if (timer_ticks == ((ULONG) 0))
 8003c2c:	687b      	ldr	r3, [r7, #4]
 8003c2e:	2b00      	cmp	r3, #0
 8003c30:	d108      	bne.n	8003c44 <_tx_thread_sleep+0x8c>
 8003c32:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003c34:	613b      	str	r3, [r7, #16]
    __asm__ volatile ("MSR  PRIMASK,%0": : "r" (int_posture): "memory");
 8003c36:	693b      	ldr	r3, [r7, #16]
 8003c38:	f383 8810 	msr	PRIMASK, r3
}
 8003c3c:	bf00      	nop

        /* Restore interrupts.  */
        TX_RESTORE

        /* Just return with a successful status.  */
        status =  TX_SUCCESS;
 8003c3e:	2300      	movs	r3, #0
 8003c40:	637b      	str	r3, [r7, #52]	; 0x34
 8003c42:	e02b      	b.n	8003c9c <_tx_thread_sleep+0xe4>
    }
    else
    {

        /* Determine if the preempt disable flag is non-zero.  */
        if (_tx_thread_preempt_disable != ((UINT) 0))
 8003c44:	4b1b      	ldr	r3, [pc, #108]	; (8003cb4 <_tx_thread_sleep+0xfc>)
 8003c46:	681b      	ldr	r3, [r3, #0]
 8003c48:	2b00      	cmp	r3, #0
 8003c4a:	d008      	beq.n	8003c5e <_tx_thread_sleep+0xa6>
 8003c4c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003c4e:	60fb      	str	r3, [r7, #12]
    __asm__ volatile ("MSR  PRIMASK,%0": : "r" (int_posture): "memory");
 8003c50:	68fb      	ldr	r3, [r7, #12]
 8003c52:	f383 8810 	msr	PRIMASK, r3
}
 8003c56:	bf00      	nop

            /* Restore interrupts.  */
            TX_RESTORE

            /* Suspension is not allowed if the preempt disable flag is non-zero at this point - return error completion.  */
            status =  TX_CALLER_ERROR;
 8003c58:	2313      	movs	r3, #19
 8003c5a:	637b      	str	r3, [r7, #52]	; 0x34
 8003c5c:	e01e      	b.n	8003c9c <_tx_thread_sleep+0xe4>
            TX_EL_THREAD_SLEEP_INSERT

            /* Suspend the current thread.  */

            /* Set the state to suspended.  */
            thread_ptr -> tx_thread_state =    TX_SLEEP;
 8003c5e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003c60:	2204      	movs	r2, #4
 8003c62:	631a      	str	r2, [r3, #48]	; 0x30
            /* Restore interrupts.  */
            TX_RESTORE
#else

            /* Set the suspending flag. */
            thread_ptr -> tx_thread_suspending =  TX_TRUE;
 8003c64:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003c66:	2201      	movs	r2, #1
 8003c68:	639a      	str	r2, [r3, #56]	; 0x38

            /* Initialize the status to successful.  */
            thread_ptr -> tx_thread_suspend_status =  TX_SUCCESS;
 8003c6a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003c6c:	2200      	movs	r2, #0
 8003c6e:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

            /* Setup the timeout period.  */
            thread_ptr -> tx_thread_timer.tx_timer_internal_remaining_ticks =  timer_ticks;
 8003c72:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003c74:	687a      	ldr	r2, [r7, #4]
 8003c76:	64da      	str	r2, [r3, #76]	; 0x4c

            /* Temporarily disable preemption.  */
            _tx_thread_preempt_disable++;
 8003c78:	4b0e      	ldr	r3, [pc, #56]	; (8003cb4 <_tx_thread_sleep+0xfc>)
 8003c7a:	681b      	ldr	r3, [r3, #0]
 8003c7c:	3301      	adds	r3, #1
 8003c7e:	4a0d      	ldr	r2, [pc, #52]	; (8003cb4 <_tx_thread_sleep+0xfc>)
 8003c80:	6013      	str	r3, [r2, #0]
 8003c82:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003c84:	60bb      	str	r3, [r7, #8]
    __asm__ volatile ("MSR  PRIMASK,%0": : "r" (int_posture): "memory");
 8003c86:	68bb      	ldr	r3, [r7, #8]
 8003c88:	f383 8810 	msr	PRIMASK, r3
}
 8003c8c:	bf00      	nop

            /* Restore interrupts.  */
            TX_RESTORE

            /* Call actual thread suspension routine.  */
            _tx_thread_system_suspend(thread_ptr);
 8003c8e:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 8003c90:	f000 f9d4 	bl	800403c <_tx_thread_system_suspend>
#endif

            /* Return status to the caller.  */
            status =  thread_ptr -> tx_thread_suspend_status;
 8003c94:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003c96:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8003c9a:	637b      	str	r3, [r7, #52]	; 0x34
        }
    }

    /* Return completion status.  */
    return(status);
 8003c9c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
}
 8003c9e:	4618      	mov	r0, r3
 8003ca0:	3738      	adds	r7, #56	; 0x38
 8003ca2:	46bd      	mov	sp, r7
 8003ca4:	bd80      	pop	{r7, pc}
 8003ca6:	bf00      	nop
 8003ca8:	20007be4 	.word	0x20007be4
 8003cac:	2000000c 	.word	0x2000000c
 8003cb0:	20007db4 	.word	0x20007db4
 8003cb4:	20007d04 	.word	0x20007d04

08003cb8 <_tx_thread_suspend>:
/*                                            a MISRA compliance issue,   */
/*                                            resulting in version 6.1.1  */
/*                                                                        */
/**************************************************************************/
UINT  _tx_thread_suspend(TX_THREAD *thread_ptr)
{
 8003cb8:	b580      	push	{r7, lr}
 8003cba:	b08a      	sub	sp, #40	; 0x28
 8003cbc:	af00      	add	r7, sp, #0
 8003cbe:	6078      	str	r0, [r7, #4]
    __asm__ volatile ("MRS  %0, PRIMASK ": "=r" (posture));
 8003cc0:	f3ef 8310 	mrs	r3, PRIMASK
 8003cc4:	61bb      	str	r3, [r7, #24]
    return(posture);
 8003cc6:	69bb      	ldr	r3, [r7, #24]
    int_posture = __get_interrupt_posture();
 8003cc8:	617b      	str	r3, [r7, #20]
    __asm__ volatile ("CPSID i" : : : "memory");
 8003cca:	b672      	cpsid	i
    return(int_posture);
 8003ccc:	697b      	ldr	r3, [r7, #20]


#ifndef TX_INLINE_THREAD_RESUME_SUSPEND

    /* Lockout interrupts while the thread is being suspended.  */
    TX_DISABLE
 8003cce:	623b      	str	r3, [r7, #32]

    /* Pickup thread pointer.  */
    TX_THREAD_GET_CURRENT(current_thread)
 8003cd0:	4b2e      	ldr	r3, [pc, #184]	; (8003d8c <_tx_thread_suspend+0xd4>)
 8003cd2:	681b      	ldr	r3, [r3, #0]
 8003cd4:	61fb      	str	r3, [r7, #28]

    /* Log this kernel call.  */
    TX_EL_THREAD_SUSPEND_INSERT

    /* Check the specified thread's current status.  */
    if (thread_ptr -> tx_thread_state == TX_READY)
 8003cd6:	687b      	ldr	r3, [r7, #4]
 8003cd8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003cda:	2b00      	cmp	r3, #0
 8003cdc:	d130      	bne.n	8003d40 <_tx_thread_suspend+0x88>
    {

        /* Initialize status to success.  */
        status =  TX_SUCCESS;
 8003cde:	2300      	movs	r3, #0
 8003ce0:	627b      	str	r3, [r7, #36]	; 0x24
    __asm__ volatile (" MRS  %0,IPSR ": "=r" (ipsr_value) );
 8003ce2:	f3ef 8305 	mrs	r3, IPSR
 8003ce6:	613b      	str	r3, [r7, #16]
    return(ipsr_value);
 8003ce8:	693a      	ldr	r2, [r7, #16]

        /* Determine if we are in a thread context.  */
        if (TX_THREAD_GET_SYSTEM_STATE() == ((ULONG) 0))
 8003cea:	4b29      	ldr	r3, [pc, #164]	; (8003d90 <_tx_thread_suspend+0xd8>)
 8003cec:	681b      	ldr	r3, [r3, #0]
 8003cee:	4313      	orrs	r3, r2
 8003cf0:	2b00      	cmp	r3, #0
 8003cf2:	d109      	bne.n	8003d08 <_tx_thread_suspend+0x50>
        {

            /* Yes, we are in a thread context.  */

            /* Determine if the current thread is also the suspending thread.  */
            if (current_thread == thread_ptr)
 8003cf4:	69fa      	ldr	r2, [r7, #28]
 8003cf6:	687b      	ldr	r3, [r7, #4]
 8003cf8:	429a      	cmp	r2, r3
 8003cfa:	d105      	bne.n	8003d08 <_tx_thread_suspend+0x50>
            {

                /* Now determine if the preempt disable flag is non-zero.  */
                if (_tx_thread_preempt_disable != ((UINT) 0))
 8003cfc:	4b25      	ldr	r3, [pc, #148]	; (8003d94 <_tx_thread_suspend+0xdc>)
 8003cfe:	681b      	ldr	r3, [r3, #0]
 8003d00:	2b00      	cmp	r3, #0
 8003d02:	d001      	beq.n	8003d08 <_tx_thread_suspend+0x50>
                {

                    /* Current thread cannot suspend when the preempt disable flag is non-zero,
                       return an error.  */
                    status =  TX_SUSPEND_ERROR;
 8003d04:	2314      	movs	r3, #20
 8003d06:	627b      	str	r3, [r7, #36]	; 0x24
                }
            }
        }

        /* Determine if the status is still successful.  */
        if (status == TX_SUCCESS)
 8003d08:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003d0a:	2b00      	cmp	r3, #0
 8003d0c:	d132      	bne.n	8003d74 <_tx_thread_suspend+0xbc>
        {

            /* Set the state to suspended.  */
            thread_ptr -> tx_thread_state =    TX_SUSPENDED;
 8003d0e:	687b      	ldr	r3, [r7, #4]
 8003d10:	2203      	movs	r2, #3
 8003d12:	631a      	str	r2, [r3, #48]	; 0x30
            /* Restore interrupts.  */
            TX_RESTORE
#else

            /* Set the suspending flag. */
            thread_ptr -> tx_thread_suspending =  TX_TRUE;
 8003d14:	687b      	ldr	r3, [r7, #4]
 8003d16:	2201      	movs	r2, #1
 8003d18:	639a      	str	r2, [r3, #56]	; 0x38

            /* Setup for no timeout period.  */
            thread_ptr -> tx_thread_timer.tx_timer_internal_remaining_ticks =  ((ULONG) 0);
 8003d1a:	687b      	ldr	r3, [r7, #4]
 8003d1c:	2200      	movs	r2, #0
 8003d1e:	64da      	str	r2, [r3, #76]	; 0x4c

            /* Temporarily disable preemption.  */
            _tx_thread_preempt_disable++;
 8003d20:	4b1c      	ldr	r3, [pc, #112]	; (8003d94 <_tx_thread_suspend+0xdc>)
 8003d22:	681b      	ldr	r3, [r3, #0]
 8003d24:	3301      	adds	r3, #1
 8003d26:	4a1b      	ldr	r2, [pc, #108]	; (8003d94 <_tx_thread_suspend+0xdc>)
 8003d28:	6013      	str	r3, [r2, #0]
 8003d2a:	6a3b      	ldr	r3, [r7, #32]
 8003d2c:	60fb      	str	r3, [r7, #12]
    __asm__ volatile ("MSR  PRIMASK,%0": : "r" (int_posture): "memory");
 8003d2e:	68fb      	ldr	r3, [r7, #12]
 8003d30:	f383 8810 	msr	PRIMASK, r3
}
 8003d34:	bf00      	nop

            /* Restore interrupts.  */
            TX_RESTORE

            /* Call actual thread suspension routine.  */
            _tx_thread_system_suspend(thread_ptr);
 8003d36:	6878      	ldr	r0, [r7, #4]
 8003d38:	f000 f980 	bl	800403c <_tx_thread_system_suspend>
            /* Return success.  */
            status =  TX_SUCCESS;
#else

            /* If MISRA is not enabled, return directly.  */
            return(TX_SUCCESS);
 8003d3c:	2300      	movs	r3, #0
 8003d3e:	e020      	b.n	8003d82 <_tx_thread_suspend+0xca>
#endif
        }
    }
    else if (thread_ptr -> tx_thread_state == TX_TERMINATED)
 8003d40:	687b      	ldr	r3, [r7, #4]
 8003d42:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003d44:	2b02      	cmp	r3, #2
 8003d46:	d102      	bne.n	8003d4e <_tx_thread_suspend+0x96>
    {

        /* Thread is terminated.  */
        status =  TX_SUSPEND_ERROR;
 8003d48:	2314      	movs	r3, #20
 8003d4a:	627b      	str	r3, [r7, #36]	; 0x24
 8003d4c:	e012      	b.n	8003d74 <_tx_thread_suspend+0xbc>
    }
    else if (thread_ptr -> tx_thread_state == TX_COMPLETED)
 8003d4e:	687b      	ldr	r3, [r7, #4]
 8003d50:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003d52:	2b01      	cmp	r3, #1
 8003d54:	d102      	bne.n	8003d5c <_tx_thread_suspend+0xa4>
    {

        /* Thread is completed.  */
        status =  TX_SUSPEND_ERROR;
 8003d56:	2314      	movs	r3, #20
 8003d58:	627b      	str	r3, [r7, #36]	; 0x24
 8003d5a:	e00b      	b.n	8003d74 <_tx_thread_suspend+0xbc>
    }
    else if (thread_ptr -> tx_thread_state == TX_SUSPENDED)
 8003d5c:	687b      	ldr	r3, [r7, #4]
 8003d5e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003d60:	2b03      	cmp	r3, #3
 8003d62:	d102      	bne.n	8003d6a <_tx_thread_suspend+0xb2>
    {

        /* Already suspended, just set status to success.  */
        status =  TX_SUCCESS;
 8003d64:	2300      	movs	r3, #0
 8003d66:	627b      	str	r3, [r7, #36]	; 0x24
 8003d68:	e004      	b.n	8003d74 <_tx_thread_suspend+0xbc>
    }
    else
    {

        /* Just set the delayed suspension flag.  */
        thread_ptr -> tx_thread_delayed_suspend =  TX_TRUE;
 8003d6a:	687b      	ldr	r3, [r7, #4]
 8003d6c:	2201      	movs	r2, #1
 8003d6e:	635a      	str	r2, [r3, #52]	; 0x34

        /* Set status to success.  */
        status =  TX_SUCCESS;
 8003d70:	2300      	movs	r3, #0
 8003d72:	627b      	str	r3, [r7, #36]	; 0x24
 8003d74:	6a3b      	ldr	r3, [r7, #32]
 8003d76:	60bb      	str	r3, [r7, #8]
    __asm__ volatile ("MSR  PRIMASK,%0": : "r" (int_posture): "memory");
 8003d78:	68bb      	ldr	r3, [r7, #8]
 8003d7a:	f383 8810 	msr	PRIMASK, r3
}
 8003d7e:	bf00      	nop
    /* Restore interrupts.  */
    TX_RESTORE

    /* Always return success, since this function does not perform error
       checking.  */
    return(status);
 8003d80:	6a7b      	ldr	r3, [r7, #36]	; 0x24
    TX_RESTORE

    /* Return completion status.  */
    return(status);
#endif
}
 8003d82:	4618      	mov	r0, r3
 8003d84:	3728      	adds	r7, #40	; 0x28
 8003d86:	46bd      	mov	sp, r7
 8003d88:	bd80      	pop	{r7, pc}
 8003d8a:	bf00      	nop
 8003d8c:	20007be4 	.word	0x20007be4
 8003d90:	2000000c 	.word	0x2000000c
 8003d94:	20007d04 	.word	0x20007d04

08003d98 <_tx_thread_system_preempt_check>:
/*  09-30-2020     Yuxin Zhou               Modified comment(s),          */
/*                                            resulting in version 6.1    */
/*                                                                        */
/**************************************************************************/
VOID  _tx_thread_system_preempt_check(VOID)
{
 8003d98:	b480      	push	{r7}
 8003d9a:	b089      	sub	sp, #36	; 0x24
 8003d9c:	af00      	add	r7, sp, #0
TX_THREAD       *current_thread;
TX_THREAD       *thread_ptr;


    /* Combine the system state and preempt disable flags into one for comparison.  */
    TX_THREAD_SYSTEM_RETURN_CHECK(combined_flags)
 8003d9e:	4b17      	ldr	r3, [pc, #92]	; (8003dfc <_tx_thread_system_preempt_check+0x64>)
 8003da0:	681b      	ldr	r3, [r3, #0]
 8003da2:	61fb      	str	r3, [r7, #28]

    /* Determine if we are in a system state (ISR or Initialization) or internal preemption is disabled.  */
    if (combined_flags == ((ULONG) 0))
 8003da4:	69fb      	ldr	r3, [r7, #28]
 8003da6:	2b00      	cmp	r3, #0
 8003da8:	d121      	bne.n	8003dee <_tx_thread_system_preempt_check+0x56>
    {

        /* No, at thread execution level so continue checking for preemption.  */

        /* Pickup thread pointer.  */
        TX_THREAD_GET_CURRENT(current_thread)
 8003daa:	4b15      	ldr	r3, [pc, #84]	; (8003e00 <_tx_thread_system_preempt_check+0x68>)
 8003dac:	681b      	ldr	r3, [r3, #0]
 8003dae:	61bb      	str	r3, [r7, #24]

        /* Pickup the next execute pointer.  */
        thread_ptr =  _tx_thread_execute_ptr;
 8003db0:	4b14      	ldr	r3, [pc, #80]	; (8003e04 <_tx_thread_system_preempt_check+0x6c>)
 8003db2:	681b      	ldr	r3, [r3, #0]
 8003db4:	617b      	str	r3, [r7, #20]

        /* Determine if preemption should take place.  */
        if (current_thread != thread_ptr)
 8003db6:	69ba      	ldr	r2, [r7, #24]
 8003db8:	697b      	ldr	r3, [r7, #20]
 8003dba:	429a      	cmp	r2, r3
 8003dbc:	d017      	beq.n	8003dee <_tx_thread_system_preempt_check+0x56>
__attribute__( ( always_inline ) ) static inline void _tx_thread_system_return_inline(void)
{
unsigned int interrupt_save;

    /* Set PendSV to invoke ThreadX scheduler.  */
    *((ULONG *) 0xE000ED04) = ((ULONG) 0x10000000);
 8003dbe:	4b12      	ldr	r3, [pc, #72]	; (8003e08 <_tx_thread_system_preempt_check+0x70>)
 8003dc0:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8003dc4:	601a      	str	r2, [r3, #0]
    __asm__ volatile (" MRS  %0,IPSR ": "=r" (ipsr_value) );
 8003dc6:	f3ef 8305 	mrs	r3, IPSR
 8003dca:	613b      	str	r3, [r7, #16]
    return(ipsr_value);
 8003dcc:	693b      	ldr	r3, [r7, #16]
    if (__get_ipsr_value() == 0)
 8003dce:	2b00      	cmp	r3, #0
 8003dd0:	d10c      	bne.n	8003dec <_tx_thread_system_preempt_check+0x54>
    __asm__ volatile ("MRS  %0, PRIMASK ": "=r" (posture));
 8003dd2:	f3ef 8310 	mrs	r3, PRIMASK
 8003dd6:	60fb      	str	r3, [r7, #12]
    return(posture);
 8003dd8:	68fb      	ldr	r3, [r7, #12]
    {
        interrupt_save = __get_interrupt_posture();
 8003dda:	60bb      	str	r3, [r7, #8]
    __asm__ volatile ("CPSIE  i": : : "memory");
 8003ddc:	b662      	cpsie	i
}
 8003dde:	bf00      	nop
 8003de0:	68bb      	ldr	r3, [r7, #8]
 8003de2:	607b      	str	r3, [r7, #4]
    __asm__ volatile ("MSR  PRIMASK,%0": : "r" (int_posture): "memory");
 8003de4:	687b      	ldr	r3, [r7, #4]
 8003de6:	f383 8810 	msr	PRIMASK, r3
}
 8003dea:	bf00      	nop
#else
        __enable_interrupts();
#endif
        __restore_interrupt(interrupt_save);
    }
}
 8003dec:	bf00      	nop

            /* Return to the system so the higher priority thread can be scheduled.  */
            _tx_thread_system_return();
        }
    }
}
 8003dee:	bf00      	nop
 8003df0:	3724      	adds	r7, #36	; 0x24
 8003df2:	46bd      	mov	sp, r7
 8003df4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003df8:	4770      	bx	lr
 8003dfa:	bf00      	nop
 8003dfc:	20007d04 	.word	0x20007d04
 8003e00:	20007be4 	.word	0x20007be4
 8003e04:	20007be8 	.word	0x20007be8
 8003e08:	e000ed04 	.word	0xe000ed04

08003e0c <_tx_thread_system_resume>:
/*                                            resulting in version 6.1    */
/*                                                                        */
/**************************************************************************/
VOID  _tx_thread_system_resume(TX_THREAD *thread_ptr)
#ifndef TX_NOT_INTERRUPTABLE
{
 8003e0c:	b580      	push	{r7, lr}
 8003e0e:	b098      	sub	sp, #96	; 0x60
 8003e10:	af00      	add	r7, sp, #0
 8003e12:	6078      	str	r0, [r7, #4]
    __asm__ volatile ("MRS  %0, PRIMASK ": "=r" (posture));
 8003e14:	f3ef 8310 	mrs	r3, PRIMASK
 8003e18:	63bb      	str	r3, [r7, #56]	; 0x38
    return(posture);
 8003e1a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
    int_posture = __get_interrupt_posture();
 8003e1c:	637b      	str	r3, [r7, #52]	; 0x34
    __asm__ volatile ("CPSID i" : : : "memory");
 8003e1e:	b672      	cpsid	i
    return(int_posture);
 8003e20:	6b7b      	ldr	r3, [r7, #52]	; 0x34
    /* Check this thread's stack.  */
    TX_THREAD_STACK_CHECK(thread_ptr)
#endif

    /* Lockout interrupts while the thread is being resumed.  */
    TX_DISABLE
 8003e22:	65fb      	str	r3, [r7, #92]	; 0x5c

#ifndef TX_NO_TIMER

    /* Deactivate the timeout timer if necessary.  */
    if (thread_ptr -> tx_thread_timer.tx_timer_internal_list_head != TX_NULL)
 8003e24:	687b      	ldr	r3, [r7, #4]
 8003e26:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8003e28:	2b00      	cmp	r3, #0
 8003e2a:	d005      	beq.n	8003e38 <_tx_thread_system_resume+0x2c>
    {

        /* Deactivate the thread's timeout timer.  */
        _tx_timer_system_deactivate(&(thread_ptr -> tx_thread_timer));
 8003e2c:	687b      	ldr	r3, [r7, #4]
 8003e2e:	334c      	adds	r3, #76	; 0x4c
 8003e30:	4618      	mov	r0, r3
 8003e32:	f000 fbd9 	bl	80045e8 <_tx_timer_system_deactivate>
 8003e36:	e002      	b.n	8003e3e <_tx_thread_system_resume+0x32>
    }
    else
    {

        /* Clear the remaining time to ensure timer doesn't get activated.  */
        thread_ptr -> tx_thread_timer.tx_timer_internal_remaining_ticks =  ((ULONG) 0);
 8003e38:	687b      	ldr	r3, [r7, #4]
 8003e3a:	2200      	movs	r2, #0
 8003e3c:	64da      	str	r2, [r3, #76]	; 0x4c
        time_stamp =  entry_ptr -> tx_trace_buffer_entry_time_stamp;
    }
#endif

    /* Decrease the preempt disabled count.  */
    _tx_thread_preempt_disable--;
 8003e3e:	4b77      	ldr	r3, [pc, #476]	; (800401c <_tx_thread_system_resume+0x210>)
 8003e40:	681b      	ldr	r3, [r3, #0]
 8003e42:	3b01      	subs	r3, #1
 8003e44:	4a75      	ldr	r2, [pc, #468]	; (800401c <_tx_thread_system_resume+0x210>)
 8003e46:	6013      	str	r3, [r2, #0]

    /* Determine if the thread is in the process of suspending.  If so, the thread
       control block is already on the linked list so nothing needs to be done.  */
    if (thread_ptr -> tx_thread_suspending == TX_FALSE)
 8003e48:	687b      	ldr	r3, [r7, #4]
 8003e4a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003e4c:	2b00      	cmp	r3, #0
 8003e4e:	f040 8099 	bne.w	8003f84 <_tx_thread_system_resume+0x178>
    {

        /* Thread is not in the process of suspending. Now check to make sure the thread
           has not already been resumed.  */
        if (thread_ptr -> tx_thread_state != TX_READY)
 8003e52:	687b      	ldr	r3, [r7, #4]
 8003e54:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003e56:	2b00      	cmp	r3, #0
 8003e58:	f000 80ad 	beq.w	8003fb6 <_tx_thread_system_resume+0x1aa>
        {

            /* No, now check to see if the delayed suspension flag is set.  */
            if (thread_ptr -> tx_thread_delayed_suspend == TX_FALSE)
 8003e5c:	687b      	ldr	r3, [r7, #4]
 8003e5e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8003e60:	2b00      	cmp	r3, #0
 8003e62:	f040 8088 	bne.w	8003f76 <_tx_thread_system_resume+0x16a>
                /* Resume the thread!  */

                /* Make this thread ready.  */

                /* Change the state to ready.  */
                thread_ptr -> tx_thread_state =  TX_READY;
 8003e66:	687b      	ldr	r3, [r7, #4]
 8003e68:	2200      	movs	r2, #0
 8003e6a:	631a      	str	r2, [r3, #48]	; 0x30

                /* Pickup priority of thread.  */
                priority =  thread_ptr -> tx_thread_priority;
 8003e6c:	687b      	ldr	r3, [r7, #4]
 8003e6e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003e70:	65bb      	str	r3, [r7, #88]	; 0x58
                thread_ptr -> tx_thread_performance_resume_count++;
#endif

                /* Determine if there are other threads at this priority that are
                   ready.  */
                head_ptr =  _tx_thread_priority_list[priority];
 8003e72:	4a6b      	ldr	r2, [pc, #428]	; (8004020 <_tx_thread_system_resume+0x214>)
 8003e74:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8003e76:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8003e7a:	657b      	str	r3, [r7, #84]	; 0x54
                if (head_ptr == TX_NULL)
 8003e7c:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8003e7e:	2b00      	cmp	r3, #0
 8003e80:	d169      	bne.n	8003f56 <_tx_thread_system_resume+0x14a>
                {

                    /* First thread at this priority ready.  Add to the front of the list.  */
                    _tx_thread_priority_list[priority] =       thread_ptr;
 8003e82:	4967      	ldr	r1, [pc, #412]	; (8004020 <_tx_thread_system_resume+0x214>)
 8003e84:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8003e86:	687a      	ldr	r2, [r7, #4]
 8003e88:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
                    thread_ptr -> tx_thread_ready_next =       thread_ptr;
 8003e8c:	687b      	ldr	r3, [r7, #4]
 8003e8e:	687a      	ldr	r2, [r7, #4]
 8003e90:	621a      	str	r2, [r3, #32]
                    thread_ptr -> tx_thread_ready_previous =   thread_ptr;
 8003e92:	687b      	ldr	r3, [r7, #4]
 8003e94:	687a      	ldr	r2, [r7, #4]
 8003e96:	625a      	str	r2, [r3, #36]	; 0x24

#if TX_MAX_PRIORITIES > 32

                    /* Calculate the index into the bit map array.  */
                    map_index =  priority/((UINT) 32);
 8003e98:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8003e9a:	095b      	lsrs	r3, r3, #5
 8003e9c:	64fb      	str	r3, [r7, #76]	; 0x4c

                    /* Set the active bit to remember that the priority map has something set.  */
                    TX_DIV32_BIT_SET(priority, priority_bit)
 8003e9e:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8003ea0:	095b      	lsrs	r3, r3, #5
 8003ea2:	2201      	movs	r2, #1
 8003ea4:	fa02 f303 	lsl.w	r3, r2, r3
 8003ea8:	64bb      	str	r3, [r7, #72]	; 0x48
                    _tx_thread_priority_map_active =  _tx_thread_priority_map_active | priority_bit;
 8003eaa:	4b5e      	ldr	r3, [pc, #376]	; (8004024 <_tx_thread_system_resume+0x218>)
 8003eac:	681a      	ldr	r2, [r3, #0]
 8003eae:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8003eb0:	4313      	orrs	r3, r2
 8003eb2:	4a5c      	ldr	r2, [pc, #368]	; (8004024 <_tx_thread_system_resume+0x218>)
 8003eb4:	6013      	str	r3, [r2, #0]
#endif

                    /* Or in the thread's priority bit.  */
                    TX_MOD32_BIT_SET(priority, priority_bit)
 8003eb6:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8003eb8:	f003 031f 	and.w	r3, r3, #31
 8003ebc:	2201      	movs	r2, #1
 8003ebe:	fa02 f303 	lsl.w	r3, r2, r3
 8003ec2:	64bb      	str	r3, [r7, #72]	; 0x48
                    _tx_thread_priority_maps[MAP_INDEX] =  _tx_thread_priority_maps[MAP_INDEX] | priority_bit;
 8003ec4:	4a58      	ldr	r2, [pc, #352]	; (8004028 <_tx_thread_system_resume+0x21c>)
 8003ec6:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8003ec8:	f852 2023 	ldr.w	r2, [r2, r3, lsl #2]
 8003ecc:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8003ece:	431a      	orrs	r2, r3
 8003ed0:	4955      	ldr	r1, [pc, #340]	; (8004028 <_tx_thread_system_resume+0x21c>)
 8003ed2:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8003ed4:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

                    /* Determine if this newly ready thread is the highest priority.  */
                    if (priority < _tx_thread_highest_priority)
 8003ed8:	4b54      	ldr	r3, [pc, #336]	; (800402c <_tx_thread_system_resume+0x220>)
 8003eda:	681b      	ldr	r3, [r3, #0]
 8003edc:	6dba      	ldr	r2, [r7, #88]	; 0x58
 8003ede:	429a      	cmp	r2, r3
 8003ee0:	d269      	bcs.n	8003fb6 <_tx_thread_system_resume+0x1aa>
                    {

                        /* A new highest priority thread is present. */

                        /* Update the highest priority variable.  */
                        _tx_thread_highest_priority =  priority;
 8003ee2:	4a52      	ldr	r2, [pc, #328]	; (800402c <_tx_thread_system_resume+0x220>)
 8003ee4:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8003ee6:	6013      	str	r3, [r2, #0]

                        /* Pickup the execute pointer. Since it is going to be referenced multiple
                           times, it is placed in a local variable.  */
                        execute_ptr =  _tx_thread_execute_ptr;
 8003ee8:	4b51      	ldr	r3, [pc, #324]	; (8004030 <_tx_thread_system_resume+0x224>)
 8003eea:	681b      	ldr	r3, [r3, #0]
 8003eec:	647b      	str	r3, [r7, #68]	; 0x44

                        /* Determine if no thread is currently executing.  */
                        if (execute_ptr == TX_NULL)
 8003eee:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8003ef0:	2b00      	cmp	r3, #0
 8003ef2:	d103      	bne.n	8003efc <_tx_thread_system_resume+0xf0>
                        {

                            /* Simply setup the execute pointer.  */
                            _tx_thread_execute_ptr =  thread_ptr;
 8003ef4:	4a4e      	ldr	r2, [pc, #312]	; (8004030 <_tx_thread_system_resume+0x224>)
 8003ef6:	687b      	ldr	r3, [r7, #4]
 8003ef8:	6013      	str	r3, [r2, #0]
 8003efa:	e05c      	b.n	8003fb6 <_tx_thread_system_resume+0x1aa>
                        {

                            /* Another thread has been scheduled for execution.  */

                            /* Check to see if this is a higher priority thread and determine if preemption is allowed.  */
                            if (priority < execute_ptr -> tx_thread_preempt_threshold)
 8003efc:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8003efe:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003f00:	6dba      	ldr	r2, [r7, #88]	; 0x58
 8003f02:	429a      	cmp	r2, r3
 8003f04:	d257      	bcs.n	8003fb6 <_tx_thread_system_resume+0x1aa>
                                execute_ptr -> tx_thread_performance_last_preempting_thread =  thread_ptr;

#endif

                                /* Yes, modify the execute thread pointer.  */
                                _tx_thread_execute_ptr =  thread_ptr;
 8003f06:	4a4a      	ldr	r2, [pc, #296]	; (8004030 <_tx_thread_system_resume+0x224>)
 8003f08:	687b      	ldr	r3, [r7, #4]
 8003f0a:	6013      	str	r3, [r2, #0]
 8003f0c:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8003f0e:	633b      	str	r3, [r7, #48]	; 0x30
    __asm__ volatile ("MSR  PRIMASK,%0": : "r" (int_posture): "memory");
 8003f10:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003f12:	f383 8810 	msr	PRIMASK, r3
}
 8003f16:	bf00      	nop
                                TX_THREAD_STACK_CHECK(thread_ptr)
#endif

                                /* Now determine if preemption should take place. This is only possible if the current thread pointer is
                                   not the same as the execute thread pointer AND the system state and preempt disable flags are clear.  */
                                TX_THREAD_SYSTEM_RETURN_CHECK(combined_flags)
 8003f18:	4b40      	ldr	r3, [pc, #256]	; (800401c <_tx_thread_system_resume+0x210>)
 8003f1a:	681b      	ldr	r3, [r3, #0]
 8003f1c:	643b      	str	r3, [r7, #64]	; 0x40
                                if (combined_flags == ((ULONG) 0))
 8003f1e:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8003f20:	2b00      	cmp	r3, #0
 8003f22:	d174      	bne.n	800400e <_tx_thread_system_resume+0x202>
    *((ULONG *) 0xE000ED04) = ((ULONG) 0x10000000);
 8003f24:	4b43      	ldr	r3, [pc, #268]	; (8004034 <_tx_thread_system_resume+0x228>)
 8003f26:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8003f2a:	601a      	str	r2, [r3, #0]
    __asm__ volatile (" MRS  %0,IPSR ": "=r" (ipsr_value) );
 8003f2c:	f3ef 8305 	mrs	r3, IPSR
 8003f30:	62fb      	str	r3, [r7, #44]	; 0x2c
    return(ipsr_value);
 8003f32:	6afb      	ldr	r3, [r7, #44]	; 0x2c
    if (__get_ipsr_value() == 0)
 8003f34:	2b00      	cmp	r3, #0
 8003f36:	d10c      	bne.n	8003f52 <_tx_thread_system_resume+0x146>
    __asm__ volatile ("MRS  %0, PRIMASK ": "=r" (posture));
 8003f38:	f3ef 8310 	mrs	r3, PRIMASK
 8003f3c:	62bb      	str	r3, [r7, #40]	; 0x28
    return(posture);
 8003f3e:	6abb      	ldr	r3, [r7, #40]	; 0x28
        interrupt_save = __get_interrupt_posture();
 8003f40:	627b      	str	r3, [r7, #36]	; 0x24
    __asm__ volatile ("CPSIE  i": : : "memory");
 8003f42:	b662      	cpsie	i
}
 8003f44:	bf00      	nop
 8003f46:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003f48:	623b      	str	r3, [r7, #32]
    __asm__ volatile ("MSR  PRIMASK,%0": : "r" (int_posture): "memory");
 8003f4a:	6a3b      	ldr	r3, [r7, #32]
 8003f4c:	f383 8810 	msr	PRIMASK, r3
}
 8003f50:	bf00      	nop
}
 8003f52:	bf00      	nop
                                    /* Preemption is needed - return to the system!  */
                                    _tx_thread_system_return();
                                }

                                /* Return in-line when MISRA is not enabled.  */
                                return;
 8003f54:	e05b      	b.n	800400e <_tx_thread_system_resume+0x202>
                {

                    /* No, there are other threads at this priority already ready.  */

                    /* Just add this thread to the priority list.  */
                    tail_ptr =                                 head_ptr -> tx_thread_ready_previous;
 8003f56:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8003f58:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003f5a:	653b      	str	r3, [r7, #80]	; 0x50
                    tail_ptr -> tx_thread_ready_next =         thread_ptr;
 8003f5c:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8003f5e:	687a      	ldr	r2, [r7, #4]
 8003f60:	621a      	str	r2, [r3, #32]
                    head_ptr -> tx_thread_ready_previous =     thread_ptr;
 8003f62:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8003f64:	687a      	ldr	r2, [r7, #4]
 8003f66:	625a      	str	r2, [r3, #36]	; 0x24
                    thread_ptr -> tx_thread_ready_previous =   tail_ptr;
 8003f68:	687b      	ldr	r3, [r7, #4]
 8003f6a:	6d3a      	ldr	r2, [r7, #80]	; 0x50
 8003f6c:	625a      	str	r2, [r3, #36]	; 0x24
                    thread_ptr -> tx_thread_ready_next =       head_ptr;
 8003f6e:	687b      	ldr	r3, [r7, #4]
 8003f70:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 8003f72:	621a      	str	r2, [r3, #32]
 8003f74:	e01f      	b.n	8003fb6 <_tx_thread_system_resume+0x1aa>
            /* Else, delayed suspend flag was set.  */
            else
            {

                /* Clear the delayed suspend flag and change the state.  */
                thread_ptr -> tx_thread_delayed_suspend =  TX_FALSE;
 8003f76:	687b      	ldr	r3, [r7, #4]
 8003f78:	2200      	movs	r2, #0
 8003f7a:	635a      	str	r2, [r3, #52]	; 0x34
                thread_ptr -> tx_thread_state =            TX_SUSPENDED;
 8003f7c:	687b      	ldr	r3, [r7, #4]
 8003f7e:	2203      	movs	r2, #3
 8003f80:	631a      	str	r2, [r3, #48]	; 0x30
 8003f82:	e018      	b.n	8003fb6 <_tx_thread_system_resume+0x1aa>
        /* A resumption occurred in the middle of a previous thread suspension.  */

        /* Make sure the type of suspension under way is not a terminate or
           thread completion.  In either of these cases, do not void the
           interrupted suspension processing.  */
        if (thread_ptr -> tx_thread_state != TX_COMPLETED)
 8003f84:	687b      	ldr	r3, [r7, #4]
 8003f86:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003f88:	2b01      	cmp	r3, #1
 8003f8a:	d014      	beq.n	8003fb6 <_tx_thread_system_resume+0x1aa>
        {

            /* Make sure the thread isn't terminated.  */
            if (thread_ptr -> tx_thread_state != TX_TERMINATED)
 8003f8c:	687b      	ldr	r3, [r7, #4]
 8003f8e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003f90:	2b02      	cmp	r3, #2
 8003f92:	d010      	beq.n	8003fb6 <_tx_thread_system_resume+0x1aa>
            {

                /* No, now check to see if the delayed suspension flag is set.  */
                if (thread_ptr -> tx_thread_delayed_suspend == TX_FALSE)
 8003f94:	687b      	ldr	r3, [r7, #4]
 8003f96:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8003f98:	2b00      	cmp	r3, #0
 8003f9a:	d106      	bne.n	8003faa <_tx_thread_system_resume+0x19e>
                {

                    /* Clear the suspending flag.  */
                    thread_ptr -> tx_thread_suspending =   TX_FALSE;
 8003f9c:	687b      	ldr	r3, [r7, #4]
 8003f9e:	2200      	movs	r2, #0
 8003fa0:	639a      	str	r2, [r3, #56]	; 0x38

                    /* Restore the state to ready.  */
                    thread_ptr -> tx_thread_state =        TX_READY;
 8003fa2:	687b      	ldr	r3, [r7, #4]
 8003fa4:	2200      	movs	r2, #0
 8003fa6:	631a      	str	r2, [r3, #48]	; 0x30
 8003fa8:	e005      	b.n	8003fb6 <_tx_thread_system_resume+0x1aa>
                }
                else
                {

                    /* Clear the delayed suspend flag and change the state.  */
                    thread_ptr -> tx_thread_delayed_suspend =  TX_FALSE;
 8003faa:	687b      	ldr	r3, [r7, #4]
 8003fac:	2200      	movs	r2, #0
 8003fae:	635a      	str	r2, [r3, #52]	; 0x34
                    thread_ptr -> tx_thread_state =            TX_SUSPENDED;
 8003fb0:	687b      	ldr	r3, [r7, #4]
 8003fb2:	2203      	movs	r2, #3
 8003fb4:	631a      	str	r2, [r3, #48]	; 0x30
        }
    }
#endif

    /* Pickup thread pointer.  */
    TX_THREAD_GET_CURRENT(current_thread)
 8003fb6:	4b20      	ldr	r3, [pc, #128]	; (8004038 <_tx_thread_system_resume+0x22c>)
 8003fb8:	681b      	ldr	r3, [r3, #0]
 8003fba:	63fb      	str	r3, [r7, #60]	; 0x3c
 8003fbc:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8003fbe:	61fb      	str	r3, [r7, #28]
    __asm__ volatile ("MSR  PRIMASK,%0": : "r" (int_posture): "memory");
 8003fc0:	69fb      	ldr	r3, [r7, #28]
 8003fc2:	f383 8810 	msr	PRIMASK, r3
}
 8003fc6:	bf00      	nop

    /* Restore interrupts.  */
    TX_RESTORE

    /* Determine if a preemption condition is present.  */
    if (current_thread != _tx_thread_execute_ptr)
 8003fc8:	4b19      	ldr	r3, [pc, #100]	; (8004030 <_tx_thread_system_resume+0x224>)
 8003fca:	681b      	ldr	r3, [r3, #0]
 8003fcc:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 8003fce:	429a      	cmp	r2, r3
 8003fd0:	d020      	beq.n	8004014 <_tx_thread_system_resume+0x208>
        TX_THREAD_STACK_CHECK(thread_ptr)
#endif

        /* Now determine if preemption should take place. This is only possible if the current thread pointer is
           not the same as the execute thread pointer AND the system state and preempt disable flags are clear.  */
        TX_THREAD_SYSTEM_RETURN_CHECK(combined_flags)
 8003fd2:	4b12      	ldr	r3, [pc, #72]	; (800401c <_tx_thread_system_resume+0x210>)
 8003fd4:	681b      	ldr	r3, [r3, #0]
 8003fd6:	643b      	str	r3, [r7, #64]	; 0x40
        if (combined_flags == ((ULONG) 0))
 8003fd8:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8003fda:	2b00      	cmp	r3, #0
 8003fdc:	d11a      	bne.n	8004014 <_tx_thread_system_resume+0x208>
    *((ULONG *) 0xE000ED04) = ((ULONG) 0x10000000);
 8003fde:	4b15      	ldr	r3, [pc, #84]	; (8004034 <_tx_thread_system_resume+0x228>)
 8003fe0:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8003fe4:	601a      	str	r2, [r3, #0]
    __asm__ volatile (" MRS  %0,IPSR ": "=r" (ipsr_value) );
 8003fe6:	f3ef 8305 	mrs	r3, IPSR
 8003fea:	61bb      	str	r3, [r7, #24]
    return(ipsr_value);
 8003fec:	69bb      	ldr	r3, [r7, #24]
    if (__get_ipsr_value() == 0)
 8003fee:	2b00      	cmp	r3, #0
 8003ff0:	d10f      	bne.n	8004012 <_tx_thread_system_resume+0x206>
    __asm__ volatile ("MRS  %0, PRIMASK ": "=r" (posture));
 8003ff2:	f3ef 8310 	mrs	r3, PRIMASK
 8003ff6:	617b      	str	r3, [r7, #20]
    return(posture);
 8003ff8:	697b      	ldr	r3, [r7, #20]
        interrupt_save = __get_interrupt_posture();
 8003ffa:	613b      	str	r3, [r7, #16]
    __asm__ volatile ("CPSIE  i": : : "memory");
 8003ffc:	b662      	cpsie	i
}
 8003ffe:	bf00      	nop
 8004000:	693b      	ldr	r3, [r7, #16]
 8004002:	60fb      	str	r3, [r7, #12]
    __asm__ volatile ("MSR  PRIMASK,%0": : "r" (int_posture): "memory");
 8004004:	68fb      	ldr	r3, [r7, #12]
 8004006:	f383 8810 	msr	PRIMASK, r3
}
 800400a:	bf00      	nop
}
 800400c:	e001      	b.n	8004012 <_tx_thread_system_resume+0x206>
                                return;
 800400e:	bf00      	nop
 8004010:	e000      	b.n	8004014 <_tx_thread_system_resume+0x208>
 8004012:	bf00      	nop

            /* Preemption is needed - return to the system!  */
            _tx_thread_system_return();
        }
    }
}
 8004014:	3760      	adds	r7, #96	; 0x60
 8004016:	46bd      	mov	sp, r7
 8004018:	bd80      	pop	{r7, pc}
 800401a:	bf00      	nop
 800401c:	20007d04 	.word	0x20007d04
 8004020:	20007c04 	.word	0x20007c04
 8004024:	20007bfc 	.word	0x20007bfc
 8004028:	20007bf4 	.word	0x20007bf4
 800402c:	20007c00 	.word	0x20007c00
 8004030:	20007be8 	.word	0x20007be8
 8004034:	e000ed04 	.word	0xe000ed04
 8004038:	20007be4 	.word	0x20007be4

0800403c <_tx_thread_system_suspend>:
/*                                            resulting in version 6.1    */
/*                                                                        */
/**************************************************************************/
VOID  _tx_thread_system_suspend(TX_THREAD *thread_ptr)
#ifndef TX_NOT_INTERRUPTABLE
{
 800403c:	b580      	push	{r7, lr}
 800403e:	b09e      	sub	sp, #120	; 0x78
 8004040:	af00      	add	r7, sp, #0
 8004042:	6078      	str	r0, [r7, #4]
TX_TRACE_BUFFER_ENTRY       *entry_ptr;
ULONG                       time_stamp =  ((ULONG) 0);
#endif

    /* Pickup thread pointer.  */
    TX_THREAD_GET_CURRENT(current_thread)
 8004044:	4b98      	ldr	r3, [pc, #608]	; (80042a8 <_tx_thread_system_suspend+0x26c>)
 8004046:	681b      	ldr	r3, [r3, #0]
 8004048:	673b      	str	r3, [r7, #112]	; 0x70
    __asm__ volatile ("MRS  %0, PRIMASK ": "=r" (posture));
 800404a:	f3ef 8310 	mrs	r3, PRIMASK
 800404e:	64bb      	str	r3, [r7, #72]	; 0x48
    return(posture);
 8004050:	6cbb      	ldr	r3, [r7, #72]	; 0x48
    int_posture = __get_interrupt_posture();
 8004052:	647b      	str	r3, [r7, #68]	; 0x44
    __asm__ volatile ("CPSID i" : : : "memory");
 8004054:	b672      	cpsid	i
    return(int_posture);
 8004056:	6c7b      	ldr	r3, [r7, #68]	; 0x44
    /* Check this thread's stack.  */
    TX_THREAD_STACK_CHECK(thread_ptr)
#endif

    /* Lockout interrupts while the thread is being suspended.  */
    TX_DISABLE
 8004058:	66fb      	str	r3, [r7, #108]	; 0x6c

#ifndef TX_NO_TIMER

    /* Is the current thread suspending?  */
    if (thread_ptr == current_thread)
 800405a:	687a      	ldr	r2, [r7, #4]
 800405c:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 800405e:	429a      	cmp	r2, r3
 8004060:	d112      	bne.n	8004088 <_tx_thread_system_suspend+0x4c>
    {

        /* Pickup the wait option.  */
        timeout =  thread_ptr -> tx_thread_timer.tx_timer_internal_remaining_ticks;
 8004062:	687b      	ldr	r3, [r7, #4]
 8004064:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8004066:	66bb      	str	r3, [r7, #104]	; 0x68

        /* Determine if an activation is needed.  */
        if (timeout != TX_NO_WAIT)
 8004068:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 800406a:	2b00      	cmp	r3, #0
 800406c:	d008      	beq.n	8004080 <_tx_thread_system_suspend+0x44>
        {

            /* Make sure the suspension is not a wait-forever.  */
            if (timeout != TX_WAIT_FOREVER)
 800406e:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8004070:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004074:	d004      	beq.n	8004080 <_tx_thread_system_suspend+0x44>
            {

                /* Activate the thread timer with the timeout value setup in the caller.  */
                _tx_timer_system_activate(&(thread_ptr -> tx_thread_timer));
 8004076:	687b      	ldr	r3, [r7, #4]
 8004078:	334c      	adds	r3, #76	; 0x4c
 800407a:	4618      	mov	r0, r3
 800407c:	f000 fa52 	bl	8004524 <_tx_timer_system_activate>
            }
        }

        /* Yes, reset time slice for current thread.  */
        _tx_timer_time_slice =  thread_ptr -> tx_thread_new_time_slice;
 8004080:	687b      	ldr	r3, [r7, #4]
 8004082:	69db      	ldr	r3, [r3, #28]
 8004084:	4a89      	ldr	r2, [pc, #548]	; (80042ac <_tx_thread_system_suspend+0x270>)
 8004086:	6013      	str	r3, [r2, #0]
    }
#endif

    /* Decrease the preempt disabled count.  */
    _tx_thread_preempt_disable--;
 8004088:	4b89      	ldr	r3, [pc, #548]	; (80042b0 <_tx_thread_system_suspend+0x274>)
 800408a:	681b      	ldr	r3, [r3, #0]
 800408c:	3b01      	subs	r3, #1
 800408e:	4a88      	ldr	r2, [pc, #544]	; (80042b0 <_tx_thread_system_suspend+0x274>)
 8004090:	6013      	str	r3, [r2, #0]
    _tx_thread_performance_suspend_count++;
#endif

    /* Check to make sure the thread suspending flag is still set.  If not, it
       has already been resumed.  */
    if (thread_ptr -> tx_thread_suspending == TX_TRUE)
 8004092:	687b      	ldr	r3, [r7, #4]
 8004094:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004096:	2b01      	cmp	r3, #1
 8004098:	f040 80d4 	bne.w	8004244 <_tx_thread_system_suspend+0x208>
            time_stamp =  entry_ptr -> tx_trace_buffer_entry_time_stamp;
        }
#endif

        /* Actually suspend this thread.  But first, clear the suspending flag.  */
        thread_ptr -> tx_thread_suspending =  TX_FALSE;
 800409c:	687b      	ldr	r3, [r7, #4]
 800409e:	2200      	movs	r2, #0
 80040a0:	639a      	str	r2, [r3, #56]	; 0x38

        /* Pickup priority of thread.  */
        priority =  thread_ptr -> tx_thread_priority;
 80040a2:	687b      	ldr	r3, [r7, #4]
 80040a4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80040a6:	667b      	str	r3, [r7, #100]	; 0x64

        /* Pickup the next ready thread pointer.  */
        ready_next =      thread_ptr -> tx_thread_ready_next;
 80040a8:	687b      	ldr	r3, [r7, #4]
 80040aa:	6a1b      	ldr	r3, [r3, #32]
 80040ac:	663b      	str	r3, [r7, #96]	; 0x60

        /* Determine if there are other threads at this priority that are
           ready.  */
        if (ready_next != thread_ptr)
 80040ae:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 80040b0:	687b      	ldr	r3, [r7, #4]
 80040b2:	429a      	cmp	r2, r3
 80040b4:	d016      	beq.n	80040e4 <_tx_thread_system_suspend+0xa8>
        {

            /* Yes, there are other threads at this priority ready.  */

            /* Pickup the previous ready thread pointer.  */
            ready_previous =  thread_ptr -> tx_thread_ready_previous;
 80040b6:	687b      	ldr	r3, [r7, #4]
 80040b8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80040ba:	64fb      	str	r3, [r7, #76]	; 0x4c

            /* Just remove this thread from the priority list.  */
            ready_next -> tx_thread_ready_previous =    ready_previous;
 80040bc:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 80040be:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 80040c0:	625a      	str	r2, [r3, #36]	; 0x24
            ready_previous -> tx_thread_ready_next =    ready_next;
 80040c2:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80040c4:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 80040c6:	621a      	str	r2, [r3, #32]

            /* Determine if this is the head of the priority list.  */
            if (_tx_thread_priority_list[priority] == thread_ptr)
 80040c8:	4a7a      	ldr	r2, [pc, #488]	; (80042b4 <_tx_thread_system_suspend+0x278>)
 80040ca:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 80040cc:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80040d0:	687a      	ldr	r2, [r7, #4]
 80040d2:	429a      	cmp	r2, r3
 80040d4:	f040 8085 	bne.w	80041e2 <_tx_thread_system_suspend+0x1a6>
            {

                /* Update the head pointer of this priority list.  */
                _tx_thread_priority_list[priority] =  ready_next;
 80040d8:	4976      	ldr	r1, [pc, #472]	; (80042b4 <_tx_thread_system_suspend+0x278>)
 80040da:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 80040dc:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 80040de:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
 80040e2:	e07e      	b.n	80041e2 <_tx_thread_system_suspend+0x1a6>
        else
        {

            /* This is the only thread at this priority ready to run.  Set the head
               pointer to NULL.  */
            _tx_thread_priority_list[priority] =    TX_NULL;
 80040e4:	4a73      	ldr	r2, [pc, #460]	; (80042b4 <_tx_thread_system_suspend+0x278>)
 80040e6:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 80040e8:	2100      	movs	r1, #0
 80040ea:	f842 1023 	str.w	r1, [r2, r3, lsl #2]

#if TX_MAX_PRIORITIES > 32

            /* Calculate the index into the bit map array.  */
            map_index =  priority/((UINT) 32);
 80040ee:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 80040f0:	095b      	lsrs	r3, r3, #5
 80040f2:	677b      	str	r3, [r7, #116]	; 0x74
#endif

            /* Clear this priority bit in the ready priority bit map.  */
            TX_MOD32_BIT_SET(priority, priority_bit)
 80040f4:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 80040f6:	f003 031f 	and.w	r3, r3, #31
 80040fa:	2201      	movs	r2, #1
 80040fc:	fa02 f303 	lsl.w	r3, r2, r3
 8004100:	65fb      	str	r3, [r7, #92]	; 0x5c
            _tx_thread_priority_maps[MAP_INDEX] =  _tx_thread_priority_maps[MAP_INDEX] & (~(priority_bit));
 8004102:	4a6d      	ldr	r2, [pc, #436]	; (80042b8 <_tx_thread_system_suspend+0x27c>)
 8004104:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8004106:	f852 2023 	ldr.w	r2, [r2, r3, lsl #2]
 800410a:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800410c:	43db      	mvns	r3, r3
 800410e:	401a      	ands	r2, r3
 8004110:	4969      	ldr	r1, [pc, #420]	; (80042b8 <_tx_thread_system_suspend+0x27c>)
 8004112:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8004114:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

#if TX_MAX_PRIORITIES > 32

            /* Determine if there are any other bits set in this priority map.  */
            if (_tx_thread_priority_maps[MAP_INDEX] == ((ULONG) 0))
 8004118:	4a67      	ldr	r2, [pc, #412]	; (80042b8 <_tx_thread_system_suspend+0x27c>)
 800411a:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 800411c:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8004120:	2b00      	cmp	r3, #0
 8004122:	d10c      	bne.n	800413e <_tx_thread_system_suspend+0x102>
            {

                /* No, clear the active bit to signify this priority map has nothing set.  */
                TX_DIV32_BIT_SET(priority, priority_bit)
 8004124:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8004126:	095b      	lsrs	r3, r3, #5
 8004128:	2201      	movs	r2, #1
 800412a:	fa02 f303 	lsl.w	r3, r2, r3
 800412e:	65fb      	str	r3, [r7, #92]	; 0x5c
                _tx_thread_priority_map_active =  _tx_thread_priority_map_active & (~(priority_bit));
 8004130:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8004132:	43da      	mvns	r2, r3
 8004134:	4b61      	ldr	r3, [pc, #388]	; (80042bc <_tx_thread_system_suspend+0x280>)
 8004136:	681b      	ldr	r3, [r3, #0]
 8004138:	4013      	ands	r3, r2
 800413a:	4a60      	ldr	r2, [pc, #384]	; (80042bc <_tx_thread_system_suspend+0x280>)
 800413c:	6013      	str	r3, [r2, #0]
#endif

#if TX_MAX_PRIORITIES > 32

            /* Calculate the index to find the next highest priority thread ready for execution.  */
            priority_map =    _tx_thread_priority_map_active;
 800413e:	4b5f      	ldr	r3, [pc, #380]	; (80042bc <_tx_thread_system_suspend+0x280>)
 8004140:	681b      	ldr	r3, [r3, #0]
 8004142:	65bb      	str	r3, [r7, #88]	; 0x58

            /* Determine if there is anything.   */
            if (priority_map != ((ULONG) 0))
 8004144:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8004146:	2b00      	cmp	r3, #0
 8004148:	d007      	beq.n	800415a <_tx_thread_system_suspend+0x11e>
            {

                /* Calculate the lowest bit set in the priority map. */
                TX_LOWEST_SET_BIT_CALCULATE(priority_map, map_index)
 800414a:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 800414c:	fa93 f3a3 	rbit	r3, r3
 8004150:	65bb      	str	r3, [r7, #88]	; 0x58
 8004152:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8004154:	fab3 f383 	clz	r3, r3
 8004158:	677b      	str	r3, [r7, #116]	; 0x74
            }

            /* Calculate the base priority as well.  */
            base_priority =  map_index * ((UINT) 32);
 800415a:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 800415c:	015b      	lsls	r3, r3, #5
 800415e:	657b      	str	r3, [r7, #84]	; 0x54
            /* Setup the base priority to zero.  */
            base_priority =   ((UINT) 0);
#endif

            /* Setup working variable for the priority map.  */
            priority_map =    _tx_thread_priority_maps[MAP_INDEX];
 8004160:	4a55      	ldr	r2, [pc, #340]	; (80042b8 <_tx_thread_system_suspend+0x27c>)
 8004162:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8004164:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8004168:	65bb      	str	r3, [r7, #88]	; 0x58

            /* Make a quick check for no other threads ready for execution.  */
            if (priority_map == ((ULONG) 0))
 800416a:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 800416c:	2b00      	cmp	r3, #0
 800416e:	d12b      	bne.n	80041c8 <_tx_thread_system_suspend+0x18c>
            {

                /* Nothing else is ready.  Set highest priority and execute thread
                   accordingly.  */
                _tx_thread_highest_priority =  ((UINT) TX_MAX_PRIORITIES);
 8004170:	4b53      	ldr	r3, [pc, #332]	; (80042c0 <_tx_thread_system_suspend+0x284>)
 8004172:	2240      	movs	r2, #64	; 0x40
 8004174:	601a      	str	r2, [r3, #0]
                _tx_thread_execute_ptr =       TX_NULL;
 8004176:	4b53      	ldr	r3, [pc, #332]	; (80042c4 <_tx_thread_system_suspend+0x288>)
 8004178:	2200      	movs	r2, #0
 800417a:	601a      	str	r2, [r3, #0]
 800417c:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800417e:	643b      	str	r3, [r7, #64]	; 0x40
    __asm__ volatile ("MSR  PRIMASK,%0": : "r" (int_posture): "memory");
 8004180:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8004182:	f383 8810 	msr	PRIMASK, r3
}
 8004186:	bf00      	nop
                /* Restore interrupts.  */
                TX_RESTORE

                /* Determine if preemption should take place. This is only possible if the current thread pointer is
                   not the same as the execute thread pointer AND the system state and preempt disable flags are clear.  */
                TX_THREAD_SYSTEM_RETURN_CHECK(combined_flags)
 8004188:	4b49      	ldr	r3, [pc, #292]	; (80042b0 <_tx_thread_system_suspend+0x274>)
 800418a:	681b      	ldr	r3, [r3, #0]
 800418c:	653b      	str	r3, [r7, #80]	; 0x50
                if (combined_flags == ((ULONG) 0))
 800418e:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8004190:	2b00      	cmp	r3, #0
 8004192:	f040 8081 	bne.w	8004298 <_tx_thread_system_suspend+0x25c>
    *((ULONG *) 0xE000ED04) = ((ULONG) 0x10000000);
 8004196:	4b4c      	ldr	r3, [pc, #304]	; (80042c8 <_tx_thread_system_suspend+0x28c>)
 8004198:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800419c:	601a      	str	r2, [r3, #0]
    __asm__ volatile (" MRS  %0,IPSR ": "=r" (ipsr_value) );
 800419e:	f3ef 8305 	mrs	r3, IPSR
 80041a2:	63fb      	str	r3, [r7, #60]	; 0x3c
    return(ipsr_value);
 80041a4:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
    if (__get_ipsr_value() == 0)
 80041a6:	2b00      	cmp	r3, #0
 80041a8:	d10c      	bne.n	80041c4 <_tx_thread_system_suspend+0x188>
    __asm__ volatile ("MRS  %0, PRIMASK ": "=r" (posture));
 80041aa:	f3ef 8310 	mrs	r3, PRIMASK
 80041ae:	63bb      	str	r3, [r7, #56]	; 0x38
    return(posture);
 80041b0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
        interrupt_save = __get_interrupt_posture();
 80041b2:	637b      	str	r3, [r7, #52]	; 0x34
    __asm__ volatile ("CPSIE  i": : : "memory");
 80041b4:	b662      	cpsie	i
}
 80041b6:	bf00      	nop
 80041b8:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80041ba:	633b      	str	r3, [r7, #48]	; 0x30
    __asm__ volatile ("MSR  PRIMASK,%0": : "r" (int_posture): "memory");
 80041bc:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80041be:	f383 8810 	msr	PRIMASK, r3
}
 80041c2:	bf00      	nop
}
 80041c4:	bf00      	nop
                    /* Preemption is needed - return to the system!  */
                    _tx_thread_system_return();
                }

                /* Return to caller.  */
                return;
 80041c6:	e067      	b.n	8004298 <_tx_thread_system_suspend+0x25c>
            {

                /* Other threads at different priority levels are ready to run.  */

                /* Calculate the lowest bit set in the priority map. */
                TX_LOWEST_SET_BIT_CALCULATE(priority_map, priority_bit)
 80041c8:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 80041ca:	fa93 f3a3 	rbit	r3, r3
 80041ce:	65bb      	str	r3, [r7, #88]	; 0x58
 80041d0:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 80041d2:	fab3 f383 	clz	r3, r3
 80041d6:	65fb      	str	r3, [r7, #92]	; 0x5c

                /* Setup the next highest priority variable.  */
                _tx_thread_highest_priority =  base_priority + ((UINT) priority_bit);
 80041d8:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 80041da:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 80041dc:	4413      	add	r3, r2
 80041de:	4a38      	ldr	r2, [pc, #224]	; (80042c0 <_tx_thread_system_suspend+0x284>)
 80041e0:	6013      	str	r3, [r2, #0]
            }
        }

        /* Determine if the suspending thread is the thread designated to execute.  */
        if (thread_ptr == _tx_thread_execute_ptr)
 80041e2:	4b38      	ldr	r3, [pc, #224]	; (80042c4 <_tx_thread_system_suspend+0x288>)
 80041e4:	681b      	ldr	r3, [r3, #0]
 80041e6:	687a      	ldr	r2, [r7, #4]
 80041e8:	429a      	cmp	r2, r3
 80041ea:	d12b      	bne.n	8004244 <_tx_thread_system_suspend+0x208>
        {

            /* Pickup the highest priority thread to execute.  */
            _tx_thread_execute_ptr =  _tx_thread_priority_list[_tx_thread_highest_priority];
 80041ec:	4b34      	ldr	r3, [pc, #208]	; (80042c0 <_tx_thread_system_suspend+0x284>)
 80041ee:	681b      	ldr	r3, [r3, #0]
 80041f0:	4a30      	ldr	r2, [pc, #192]	; (80042b4 <_tx_thread_system_suspend+0x278>)
 80041f2:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80041f6:	4a33      	ldr	r2, [pc, #204]	; (80042c4 <_tx_thread_system_suspend+0x288>)
 80041f8:	6013      	str	r3, [r2, #0]
 80041fa:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80041fc:	62fb      	str	r3, [r7, #44]	; 0x2c
    __asm__ volatile ("MSR  PRIMASK,%0": : "r" (int_posture): "memory");
 80041fe:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004200:	f383 8810 	msr	PRIMASK, r3
}
 8004204:	bf00      	nop
            /* Restore interrupts.  */
            TX_RESTORE

            /* Determine if preemption should take place. This is only possible if the current thread pointer is
               not the same as the execute thread pointer AND the system state and preempt disable flags are clear.  */
            TX_THREAD_SYSTEM_RETURN_CHECK(combined_flags)
 8004206:	4b2a      	ldr	r3, [pc, #168]	; (80042b0 <_tx_thread_system_suspend+0x274>)
 8004208:	681b      	ldr	r3, [r3, #0]
 800420a:	653b      	str	r3, [r7, #80]	; 0x50
            if (combined_flags == ((ULONG) 0))
 800420c:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800420e:	2b00      	cmp	r3, #0
 8004210:	d144      	bne.n	800429c <_tx_thread_system_suspend+0x260>
    *((ULONG *) 0xE000ED04) = ((ULONG) 0x10000000);
 8004212:	4b2d      	ldr	r3, [pc, #180]	; (80042c8 <_tx_thread_system_suspend+0x28c>)
 8004214:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8004218:	601a      	str	r2, [r3, #0]
    __asm__ volatile (" MRS  %0,IPSR ": "=r" (ipsr_value) );
 800421a:	f3ef 8305 	mrs	r3, IPSR
 800421e:	62bb      	str	r3, [r7, #40]	; 0x28
    return(ipsr_value);
 8004220:	6abb      	ldr	r3, [r7, #40]	; 0x28
    if (__get_ipsr_value() == 0)
 8004222:	2b00      	cmp	r3, #0
 8004224:	d10c      	bne.n	8004240 <_tx_thread_system_suspend+0x204>
    __asm__ volatile ("MRS  %0, PRIMASK ": "=r" (posture));
 8004226:	f3ef 8310 	mrs	r3, PRIMASK
 800422a:	627b      	str	r3, [r7, #36]	; 0x24
    return(posture);
 800422c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
        interrupt_save = __get_interrupt_posture();
 800422e:	623b      	str	r3, [r7, #32]
    __asm__ volatile ("CPSIE  i": : : "memory");
 8004230:	b662      	cpsie	i
}
 8004232:	bf00      	nop
 8004234:	6a3b      	ldr	r3, [r7, #32]
 8004236:	61fb      	str	r3, [r7, #28]
    __asm__ volatile ("MSR  PRIMASK,%0": : "r" (int_posture): "memory");
 8004238:	69fb      	ldr	r3, [r7, #28]
 800423a:	f383 8810 	msr	PRIMASK, r3
}
 800423e:	bf00      	nop
}
 8004240:	bf00      	nop
                /* Preemption is needed - return to the system!  */
                _tx_thread_system_return();
            }

            /* Return to caller.  */
            return;
 8004242:	e02b      	b.n	800429c <_tx_thread_system_suspend+0x260>
 8004244:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8004246:	61bb      	str	r3, [r7, #24]
    __asm__ volatile ("MSR  PRIMASK,%0": : "r" (int_posture): "memory");
 8004248:	69bb      	ldr	r3, [r7, #24]
 800424a:	f383 8810 	msr	PRIMASK, r3
}
 800424e:	bf00      	nop

    /* Restore interrupts.  */
    TX_RESTORE

    /* Determine if a preemption condition is present.  */
    if (current_thread != _tx_thread_execute_ptr)
 8004250:	4b1c      	ldr	r3, [pc, #112]	; (80042c4 <_tx_thread_system_suspend+0x288>)
 8004252:	681b      	ldr	r3, [r3, #0]
 8004254:	6f3a      	ldr	r2, [r7, #112]	; 0x70
 8004256:	429a      	cmp	r2, r3
 8004258:	d022      	beq.n	80042a0 <_tx_thread_system_suspend+0x264>
        TX_THREAD_STACK_CHECK(thread_ptr)
#endif

        /* Determine if preemption should take place. This is only possible if the current thread pointer is
           not the same as the execute thread pointer AND the system state and preempt disable flags are clear.  */
        TX_THREAD_SYSTEM_RETURN_CHECK(combined_flags)
 800425a:	4b15      	ldr	r3, [pc, #84]	; (80042b0 <_tx_thread_system_suspend+0x274>)
 800425c:	681b      	ldr	r3, [r3, #0]
 800425e:	653b      	str	r3, [r7, #80]	; 0x50
        if (combined_flags == ((ULONG) 0))
 8004260:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8004262:	2b00      	cmp	r3, #0
 8004264:	d11c      	bne.n	80042a0 <_tx_thread_system_suspend+0x264>
    *((ULONG *) 0xE000ED04) = ((ULONG) 0x10000000);
 8004266:	4b18      	ldr	r3, [pc, #96]	; (80042c8 <_tx_thread_system_suspend+0x28c>)
 8004268:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800426c:	601a      	str	r2, [r3, #0]
    __asm__ volatile (" MRS  %0,IPSR ": "=r" (ipsr_value) );
 800426e:	f3ef 8305 	mrs	r3, IPSR
 8004272:	617b      	str	r3, [r7, #20]
    return(ipsr_value);
 8004274:	697b      	ldr	r3, [r7, #20]
    if (__get_ipsr_value() == 0)
 8004276:	2b00      	cmp	r3, #0
 8004278:	d10c      	bne.n	8004294 <_tx_thread_system_suspend+0x258>
    __asm__ volatile ("MRS  %0, PRIMASK ": "=r" (posture));
 800427a:	f3ef 8310 	mrs	r3, PRIMASK
 800427e:	613b      	str	r3, [r7, #16]
    return(posture);
 8004280:	693b      	ldr	r3, [r7, #16]
        interrupt_save = __get_interrupt_posture();
 8004282:	60fb      	str	r3, [r7, #12]
    __asm__ volatile ("CPSIE  i": : : "memory");
 8004284:	b662      	cpsie	i
}
 8004286:	bf00      	nop
 8004288:	68fb      	ldr	r3, [r7, #12]
 800428a:	60bb      	str	r3, [r7, #8]
    __asm__ volatile ("MSR  PRIMASK,%0": : "r" (int_posture): "memory");
 800428c:	68bb      	ldr	r3, [r7, #8]
 800428e:	f383 8810 	msr	PRIMASK, r3
}
 8004292:	bf00      	nop
}
 8004294:	bf00      	nop
            _tx_thread_system_return();
        }
    }

    /* Return to caller.  */
    return;
 8004296:	e003      	b.n	80042a0 <_tx_thread_system_suspend+0x264>
                return;
 8004298:	bf00      	nop
 800429a:	e002      	b.n	80042a2 <_tx_thread_system_suspend+0x266>
            return;
 800429c:	bf00      	nop
 800429e:	e000      	b.n	80042a2 <_tx_thread_system_suspend+0x266>
    return;
 80042a0:	bf00      	nop
}
 80042a2:	3778      	adds	r7, #120	; 0x78
 80042a4:	46bd      	mov	sp, r7
 80042a6:	bd80      	pop	{r7, pc}
 80042a8:	20007be4 	.word	0x20007be4
 80042ac:	20008274 	.word	0x20008274
 80042b0:	20007d04 	.word	0x20007d04
 80042b4:	20007c04 	.word	0x20007c04
 80042b8:	20007bf4 	.word	0x20007bf4
 80042bc:	20007bfc 	.word	0x20007bfc
 80042c0:	20007c00 	.word	0x20007c00
 80042c4:	20007be8 	.word	0x20007be8
 80042c8:	e000ed04 	.word	0xe000ed04

080042cc <_tx_thread_time_slice>:
/*                                            TX_NO_TIMER is defined,     */
/*                                            resulting in version 6.1    */
/*                                                                        */
/**************************************************************************/
VOID  _tx_thread_time_slice(VOID)
{
 80042cc:	b480      	push	{r7}
 80042ce:	b087      	sub	sp, #28
 80042d0:	af00      	add	r7, sp, #0
ULONG           system_state;
UINT            preempt_disable;
#endif

    /* Pickup thread pointer.  */
    TX_THREAD_GET_CURRENT(thread_ptr)
 80042d2:	4b21      	ldr	r3, [pc, #132]	; (8004358 <_tx_thread_time_slice+0x8c>)
 80042d4:	681b      	ldr	r3, [r3, #0]
 80042d6:	617b      	str	r3, [r7, #20]
    __asm__ volatile ("MRS  %0, PRIMASK ": "=r" (posture));
 80042d8:	f3ef 8310 	mrs	r3, PRIMASK
 80042dc:	60fb      	str	r3, [r7, #12]
    return(posture);
 80042de:	68fb      	ldr	r3, [r7, #12]
    int_posture = __get_interrupt_posture();
 80042e0:	60bb      	str	r3, [r7, #8]
    __asm__ volatile ("CPSID i" : : : "memory");
 80042e2:	b672      	cpsid	i
    return(int_posture);
 80042e4:	68bb      	ldr	r3, [r7, #8]
    /* Set the next thread pointer to NULL.  */
    next_thread_ptr =  TX_NULL;
#endif

    /* Lockout interrupts while the time-slice is evaluated.  */
    TX_DISABLE
 80042e6:	613b      	str	r3, [r7, #16]

    /* Clear the expired time-slice flag.  */
    _tx_timer_expired_time_slice =  TX_FALSE;
 80042e8:	4b1c      	ldr	r3, [pc, #112]	; (800435c <_tx_thread_time_slice+0x90>)
 80042ea:	2200      	movs	r2, #0
 80042ec:	601a      	str	r2, [r3, #0]

    /* Make sure the thread pointer is valid.  */
    if (thread_ptr != TX_NULL)
 80042ee:	697b      	ldr	r3, [r7, #20]
 80042f0:	2b00      	cmp	r3, #0
 80042f2:	d024      	beq.n	800433e <_tx_thread_time_slice+0x72>
    {

        /* Make sure the thread is still active, i.e. not suspended.  */
        if (thread_ptr -> tx_thread_state == TX_READY)
 80042f4:	697b      	ldr	r3, [r7, #20]
 80042f6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80042f8:	2b00      	cmp	r3, #0
 80042fa:	d120      	bne.n	800433e <_tx_thread_time_slice+0x72>
        {

            /* Setup a fresh time-slice for the thread.  */
            thread_ptr -> tx_thread_time_slice =  thread_ptr -> tx_thread_new_time_slice;
 80042fc:	697b      	ldr	r3, [r7, #20]
 80042fe:	69da      	ldr	r2, [r3, #28]
 8004300:	697b      	ldr	r3, [r7, #20]
 8004302:	619a      	str	r2, [r3, #24]

            /* Reset the actual time-slice variable.  */
            _tx_timer_time_slice =  thread_ptr -> tx_thread_time_slice;
 8004304:	697b      	ldr	r3, [r7, #20]
 8004306:	699b      	ldr	r3, [r3, #24]
 8004308:	4a15      	ldr	r2, [pc, #84]	; (8004360 <_tx_thread_time_slice+0x94>)
 800430a:	6013      	str	r3, [r2, #0]

            /* Determine if there is another thread at the same priority and preemption-threshold
               is not set.  Preemption-threshold overrides time-slicing.  */
            if (thread_ptr -> tx_thread_ready_next != thread_ptr)
 800430c:	697b      	ldr	r3, [r7, #20]
 800430e:	6a1b      	ldr	r3, [r3, #32]
 8004310:	697a      	ldr	r2, [r7, #20]
 8004312:	429a      	cmp	r2, r3
 8004314:	d013      	beq.n	800433e <_tx_thread_time_slice+0x72>
            {

                /* Check to see if preemption-threshold is not being used.  */
                if (thread_ptr -> tx_thread_priority == thread_ptr -> tx_thread_preempt_threshold)
 8004316:	697b      	ldr	r3, [r7, #20]
 8004318:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800431a:	697b      	ldr	r3, [r7, #20]
 800431c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800431e:	429a      	cmp	r2, r3
 8004320:	d10d      	bne.n	800433e <_tx_thread_time_slice+0x72>

                    /* Preemption-threshold is not being used by this thread.  */

                    /* There is another thread at this priority, make it the highest at
                       this priority level.  */
                    _tx_thread_priority_list[thread_ptr -> tx_thread_priority] =  thread_ptr -> tx_thread_ready_next;
 8004322:	697b      	ldr	r3, [r7, #20]
 8004324:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004326:	697a      	ldr	r2, [r7, #20]
 8004328:	6a12      	ldr	r2, [r2, #32]
 800432a:	490e      	ldr	r1, [pc, #56]	; (8004364 <_tx_thread_time_slice+0x98>)
 800432c:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

                    /* Designate the highest priority thread as the one to execute.  Don't use this
                       thread's priority as an index just in case a higher priority thread is now
                       ready!  */
                    _tx_thread_execute_ptr =  _tx_thread_priority_list[_tx_thread_highest_priority];
 8004330:	4b0d      	ldr	r3, [pc, #52]	; (8004368 <_tx_thread_time_slice+0x9c>)
 8004332:	681b      	ldr	r3, [r3, #0]
 8004334:	4a0b      	ldr	r2, [pc, #44]	; (8004364 <_tx_thread_time_slice+0x98>)
 8004336:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800433a:	4a0c      	ldr	r2, [pc, #48]	; (800436c <_tx_thread_time_slice+0xa0>)
 800433c:	6013      	str	r3, [r2, #0]
 800433e:	693b      	ldr	r3, [r7, #16]
 8004340:	607b      	str	r3, [r7, #4]
    __asm__ volatile ("MSR  PRIMASK,%0": : "r" (int_posture): "memory");
 8004342:	687b      	ldr	r3, [r7, #4]
 8004344:	f383 8810 	msr	PRIMASK, r3
}
 8004348:	bf00      	nop

        /* Yes, check this thread's stack.  */
        TX_THREAD_STACK_CHECK(next_thread_ptr)
    }
#endif
}
 800434a:	bf00      	nop
 800434c:	371c      	adds	r7, #28
 800434e:	46bd      	mov	sp, r7
 8004350:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004354:	4770      	bx	lr
 8004356:	bf00      	nop
 8004358:	20007be4 	.word	0x20007be4
 800435c:	20007d14 	.word	0x20007d14
 8004360:	20008274 	.word	0x20008274
 8004364:	20007c04 	.word	0x20007c04
 8004368:	20007c00 	.word	0x20007c00
 800436c:	20007be8 	.word	0x20007be8

08004370 <_tx_thread_timeout>:
/*  09-30-2020     Yuxin Zhou               Modified comment(s),          */
/*                                            resulting in version 6.1    */
/*                                                                        */
/**************************************************************************/
VOID  _tx_thread_timeout(ULONG timeout_input)
{
 8004370:	b580      	push	{r7, lr}
 8004372:	b08a      	sub	sp, #40	; 0x28
 8004374:	af00      	add	r7, sp, #0
 8004376:	6078      	str	r0, [r7, #4]
VOID            (*suspend_cleanup)(struct TX_THREAD_STRUCT *suspend_thread_ptr, ULONG suspension_sequence);
ULONG           suspension_sequence;


    /* Pickup the thread pointer.  */
    TX_THREAD_TIMEOUT_POINTER_SETUP(thread_ptr)
 8004378:	687b      	ldr	r3, [r7, #4]
 800437a:	627b      	str	r3, [r7, #36]	; 0x24
    __asm__ volatile ("MRS  %0, PRIMASK ": "=r" (posture));
 800437c:	f3ef 8310 	mrs	r3, PRIMASK
 8004380:	617b      	str	r3, [r7, #20]
    return(posture);
 8004382:	697b      	ldr	r3, [r7, #20]
    int_posture = __get_interrupt_posture();
 8004384:	613b      	str	r3, [r7, #16]
    __asm__ volatile ("CPSID i" : : : "memory");
 8004386:	b672      	cpsid	i
    return(int_posture);
 8004388:	693b      	ldr	r3, [r7, #16]

    /* Disable interrupts.  */
    TX_DISABLE
 800438a:	623b      	str	r3, [r7, #32]

    /* Determine how the thread is currently suspended.  */
    if (thread_ptr -> tx_thread_state == TX_SLEEP)
 800438c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800438e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004390:	2b04      	cmp	r3, #4
 8004392:	d10e      	bne.n	80043b2 <_tx_thread_timeout+0x42>
        /* Restore interrupts.  */
        TX_RESTORE
#else

        /* Increment the disable preemption flag.  */
        _tx_thread_preempt_disable++;
 8004394:	4b13      	ldr	r3, [pc, #76]	; (80043e4 <_tx_thread_timeout+0x74>)
 8004396:	681b      	ldr	r3, [r3, #0]
 8004398:	3301      	adds	r3, #1
 800439a:	4a12      	ldr	r2, [pc, #72]	; (80043e4 <_tx_thread_timeout+0x74>)
 800439c:	6013      	str	r3, [r2, #0]
 800439e:	6a3b      	ldr	r3, [r7, #32]
 80043a0:	60fb      	str	r3, [r7, #12]
    __asm__ volatile ("MSR  PRIMASK,%0": : "r" (int_posture): "memory");
 80043a2:	68fb      	ldr	r3, [r7, #12]
 80043a4:	f383 8810 	msr	PRIMASK, r3
}
 80043a8:	bf00      	nop

        /* Restore interrupts.  */
        TX_RESTORE

        /* Lift the suspension on the sleeping thread.  */
        _tx_thread_system_resume(thread_ptr);
 80043aa:	6a78      	ldr	r0, [r7, #36]	; 0x24
 80043ac:	f7ff fd2e 	bl	8003e0c <_tx_thread_system_resume>

        /* Restore interrupts.  */
        TX_RESTORE
#endif
    }
}
 80043b0:	e013      	b.n	80043da <_tx_thread_timeout+0x6a>
        suspend_cleanup =  thread_ptr -> tx_thread_suspend_cleanup;
 80043b2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80043b4:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 80043b6:	61fb      	str	r3, [r7, #28]
        suspension_sequence =  thread_ptr -> tx_thread_suspension_sequence;
 80043b8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80043ba:	f8d3 30ac 	ldr.w	r3, [r3, #172]	; 0xac
 80043be:	61bb      	str	r3, [r7, #24]
 80043c0:	6a3b      	ldr	r3, [r7, #32]
 80043c2:	60bb      	str	r3, [r7, #8]
    __asm__ volatile ("MSR  PRIMASK,%0": : "r" (int_posture): "memory");
 80043c4:	68bb      	ldr	r3, [r7, #8]
 80043c6:	f383 8810 	msr	PRIMASK, r3
}
 80043ca:	bf00      	nop
        if (suspend_cleanup != TX_NULL)
 80043cc:	69fb      	ldr	r3, [r7, #28]
 80043ce:	2b00      	cmp	r3, #0
 80043d0:	d003      	beq.n	80043da <_tx_thread_timeout+0x6a>
            (suspend_cleanup)(thread_ptr, suspension_sequence);
 80043d2:	69fb      	ldr	r3, [r7, #28]
 80043d4:	69b9      	ldr	r1, [r7, #24]
 80043d6:	6a78      	ldr	r0, [r7, #36]	; 0x24
 80043d8:	4798      	blx	r3
}
 80043da:	bf00      	nop
 80043dc:	3728      	adds	r7, #40	; 0x28
 80043de:	46bd      	mov	sp, r7
 80043e0:	bd80      	pop	{r7, pc}
 80043e2:	bf00      	nop
 80043e4:	20007d04 	.word	0x20007d04

080043e8 <_tx_timer_expiration_process>:
/*                                            TX_NO_TIMER is defined,     */
/*                                            resulting in version 6.1    */
/*                                                                        */
/**************************************************************************/
VOID  _tx_timer_expiration_process(VOID)
{
 80043e8:	b580      	push	{r7, lr}
 80043ea:	b084      	sub	sp, #16
 80043ec:	af00      	add	r7, sp, #0
    __asm__ volatile ("MRS  %0, PRIMASK ": "=r" (posture));
 80043ee:	f3ef 8310 	mrs	r3, PRIMASK
 80043f2:	607b      	str	r3, [r7, #4]
    return(posture);
 80043f4:	687b      	ldr	r3, [r7, #4]
    int_posture = __get_interrupt_posture();
 80043f6:	603b      	str	r3, [r7, #0]
    __asm__ volatile ("CPSID i" : : : "memory");
 80043f8:	b672      	cpsid	i
    return(int_posture);
 80043fa:	683b      	ldr	r3, [r7, #0]

    /* Don't process in the ISR, wakeup the system timer thread to process the
       timer expiration.  */

    /* Disable interrupts.  */
    TX_DISABLE
 80043fc:	60fb      	str	r3, [r7, #12]
    /* Restore interrupts.  */
    TX_RESTORE
#else

    /* Increment the preempt disable flag.  */
    _tx_thread_preempt_disable++;
 80043fe:	4b09      	ldr	r3, [pc, #36]	; (8004424 <_tx_timer_expiration_process+0x3c>)
 8004400:	681b      	ldr	r3, [r3, #0]
 8004402:	3301      	adds	r3, #1
 8004404:	4a07      	ldr	r2, [pc, #28]	; (8004424 <_tx_timer_expiration_process+0x3c>)
 8004406:	6013      	str	r3, [r2, #0]
 8004408:	68fb      	ldr	r3, [r7, #12]
 800440a:	60bb      	str	r3, [r7, #8]
    __asm__ volatile ("MSR  PRIMASK,%0": : "r" (int_posture): "memory");
 800440c:	68bb      	ldr	r3, [r7, #8]
 800440e:	f383 8810 	msr	PRIMASK, r3
}
 8004412:	bf00      	nop

    /* Restore interrupts.  */
    TX_RESTORE

    /* Call the system resume function to activate the timer thread.  */
    _tx_thread_system_resume(&_tx_timer_thread);
 8004414:	4804      	ldr	r0, [pc, #16]	; (8004428 <_tx_timer_expiration_process+0x40>)
 8004416:	f7ff fcf9 	bl	8003e0c <_tx_thread_system_resume>
    }

    /* Restore interrupts.  */
    TX_RESTORE
#endif
}
 800441a:	bf00      	nop
 800441c:	3710      	adds	r7, #16
 800441e:	46bd      	mov	sp, r7
 8004420:	bd80      	pop	{r7, pc}
 8004422:	bf00      	nop
 8004424:	20007d04 	.word	0x20007d04
 8004428:	20007db4 	.word	0x20007db4

0800442c <_tx_timer_initialize>:
/*  09-30-2020     Yuxin Zhou               Modified comment(s),          */
/*                                            resulting in version 6.1    */
/*                                                                        */
/**************************************************************************/
VOID  _tx_timer_initialize(VOID)
{
 800442c:	b590      	push	{r4, r7, lr}
 800442e:	b089      	sub	sp, #36	; 0x24
 8004430:	af06      	add	r7, sp, #24
#endif

#ifndef TX_DISABLE_REDUNDANT_CLEARING

    /* Initialize the system clock to 0.  */
    _tx_timer_system_clock =  ((ULONG) 0);
 8004432:	4b28      	ldr	r3, [pc, #160]	; (80044d4 <_tx_timer_initialize+0xa8>)
 8004434:	2200      	movs	r2, #0
 8004436:	601a      	str	r2, [r3, #0]

    /* Initialize the time-slice value to 0 to make sure it is disabled.  */
    _tx_timer_time_slice =  ((ULONG) 0);
 8004438:	4b27      	ldr	r3, [pc, #156]	; (80044d8 <_tx_timer_initialize+0xac>)
 800443a:	2200      	movs	r2, #0
 800443c:	601a      	str	r2, [r3, #0]

    /* Clear the expired flags.  */
    _tx_timer_expired_time_slice =  TX_FALSE;
 800443e:	4b27      	ldr	r3, [pc, #156]	; (80044dc <_tx_timer_initialize+0xb0>)
 8004440:	2200      	movs	r2, #0
 8004442:	601a      	str	r2, [r3, #0]
    _tx_timer_expired =             TX_FALSE;
 8004444:	4b26      	ldr	r3, [pc, #152]	; (80044e0 <_tx_timer_initialize+0xb4>)
 8004446:	2200      	movs	r2, #0
 8004448:	601a      	str	r2, [r3, #0]

    /* Set the currently expired timer being processed pointer to NULL.  */
    _tx_timer_expired_timer_ptr =  TX_NULL;
 800444a:	4b26      	ldr	r3, [pc, #152]	; (80044e4 <_tx_timer_initialize+0xb8>)
 800444c:	2200      	movs	r2, #0
 800444e:	601a      	str	r2, [r3, #0]

    /* Initialize the thread and application timer management control structures.  */

    /* First, initialize the timer list.  */
    TX_MEMSET(&_tx_timer_list[0], 0, (sizeof(_tx_timer_list)));
 8004450:	2280      	movs	r2, #128	; 0x80
 8004452:	2100      	movs	r1, #0
 8004454:	4824      	ldr	r0, [pc, #144]	; (80044e8 <_tx_timer_initialize+0xbc>)
 8004456:	f000 fd99 	bl	8004f8c <memset>
#endif

    /* Initialize all of the list pointers.  */
    _tx_timer_list_start =   &_tx_timer_list[0];
 800445a:	4b24      	ldr	r3, [pc, #144]	; (80044ec <_tx_timer_initialize+0xc0>)
 800445c:	4a22      	ldr	r2, [pc, #136]	; (80044e8 <_tx_timer_initialize+0xbc>)
 800445e:	601a      	str	r2, [r3, #0]
    _tx_timer_current_ptr =  &_tx_timer_list[0];
 8004460:	4b23      	ldr	r3, [pc, #140]	; (80044f0 <_tx_timer_initialize+0xc4>)
 8004462:	4a21      	ldr	r2, [pc, #132]	; (80044e8 <_tx_timer_initialize+0xbc>)
 8004464:	601a      	str	r2, [r3, #0]

    /* Set the timer list end pointer to one past the actual timer list.  This is done
       to make the timer interrupt handling in assembly language a little easier.  */
    _tx_timer_list_end =     &_tx_timer_list[TX_TIMER_ENTRIES-((ULONG) 1)];
 8004466:	4b23      	ldr	r3, [pc, #140]	; (80044f4 <_tx_timer_initialize+0xc8>)
 8004468:	4a23      	ldr	r2, [pc, #140]	; (80044f8 <_tx_timer_initialize+0xcc>)
 800446a:	601a      	str	r2, [r3, #0]
    _tx_timer_list_end =     TX_TIMER_POINTER_ADD(_tx_timer_list_end, ((ULONG) 1));
 800446c:	4b21      	ldr	r3, [pc, #132]	; (80044f4 <_tx_timer_initialize+0xc8>)
 800446e:	681b      	ldr	r3, [r3, #0]
 8004470:	3304      	adds	r3, #4
 8004472:	4a20      	ldr	r2, [pc, #128]	; (80044f4 <_tx_timer_initialize+0xc8>)
 8004474:	6013      	str	r3, [r2, #0]

#ifndef TX_TIMER_PROCESS_IN_ISR

    /* Setup the variables associated with the system timer thread's stack and
       priority.  */
    _tx_timer_stack_start =  (VOID *) &_tx_timer_thread_stack_area[0];
 8004476:	4b21      	ldr	r3, [pc, #132]	; (80044fc <_tx_timer_initialize+0xd0>)
 8004478:	4a21      	ldr	r2, [pc, #132]	; (8004500 <_tx_timer_initialize+0xd4>)
 800447a:	601a      	str	r2, [r3, #0]
    _tx_timer_stack_size =   ((ULONG) TX_TIMER_THREAD_STACK_SIZE);
 800447c:	4b21      	ldr	r3, [pc, #132]	; (8004504 <_tx_timer_initialize+0xd8>)
 800447e:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8004482:	601a      	str	r2, [r3, #0]
    _tx_timer_priority =     ((UINT) TX_TIMER_THREAD_PRIORITY);
 8004484:	4b20      	ldr	r3, [pc, #128]	; (8004508 <_tx_timer_initialize+0xdc>)
 8004486:	2200      	movs	r2, #0
 8004488:	601a      	str	r2, [r3, #0]
       low-level initialization component.  */
    do
    {

        /* Create the system timer thread.  */
        status =  _tx_thread_create(&_tx_timer_thread,
 800448a:	4b1c      	ldr	r3, [pc, #112]	; (80044fc <_tx_timer_initialize+0xd0>)
 800448c:	681b      	ldr	r3, [r3, #0]
 800448e:	4a1d      	ldr	r2, [pc, #116]	; (8004504 <_tx_timer_initialize+0xd8>)
 8004490:	6812      	ldr	r2, [r2, #0]
 8004492:	491d      	ldr	r1, [pc, #116]	; (8004508 <_tx_timer_initialize+0xdc>)
 8004494:	6809      	ldr	r1, [r1, #0]
 8004496:	481c      	ldr	r0, [pc, #112]	; (8004508 <_tx_timer_initialize+0xdc>)
 8004498:	6800      	ldr	r0, [r0, #0]
 800449a:	2400      	movs	r4, #0
 800449c:	9405      	str	r4, [sp, #20]
 800449e:	2400      	movs	r4, #0
 80044a0:	9404      	str	r4, [sp, #16]
 80044a2:	9003      	str	r0, [sp, #12]
 80044a4:	9102      	str	r1, [sp, #8]
 80044a6:	9201      	str	r2, [sp, #4]
 80044a8:	9300      	str	r3, [sp, #0]
 80044aa:	4b18      	ldr	r3, [pc, #96]	; (800450c <_tx_timer_initialize+0xe0>)
 80044ac:	4a18      	ldr	r2, [pc, #96]	; (8004510 <_tx_timer_initialize+0xe4>)
 80044ae:	4919      	ldr	r1, [pc, #100]	; (8004514 <_tx_timer_initialize+0xe8>)
 80044b0:	4819      	ldr	r0, [pc, #100]	; (8004518 <_tx_timer_initialize+0xec>)
 80044b2:	f7ff f99f 	bl	80037f4 <_tx_thread_create>
 80044b6:	6078      	str	r0, [r7, #4]
#endif

        /* Define timer initialize extension.  */
        TX_TIMER_INITIALIZE_EXTENSION(status)

    } while (status != TX_SUCCESS);
 80044b8:	687b      	ldr	r3, [r7, #4]
 80044ba:	2b00      	cmp	r3, #0
 80044bc:	d1e5      	bne.n	800448a <_tx_timer_initialize+0x5e>
#endif

#ifndef TX_DISABLE_REDUNDANT_CLEARING

    /* Initialize the head pointer of the created application timer list.  */
    _tx_timer_created_ptr =  TX_NULL;
 80044be:	4b17      	ldr	r3, [pc, #92]	; (800451c <_tx_timer_initialize+0xf0>)
 80044c0:	2200      	movs	r2, #0
 80044c2:	601a      	str	r2, [r3, #0]

    /* Set the created count to zero.  */
    _tx_timer_created_count =  TX_EMPTY;
 80044c4:	4b16      	ldr	r3, [pc, #88]	; (8004520 <_tx_timer_initialize+0xf4>)
 80044c6:	2200      	movs	r2, #0
 80044c8:	601a      	str	r2, [r3, #0]
    _tx_timer_performance_expiration_count =         ((ULONG) 0);
    _tx_timer_performance__expiration_adjust_count =  ((ULONG) 0);
#endif
#endif
#endif
}
 80044ca:	bf00      	nop
 80044cc:	370c      	adds	r7, #12
 80044ce:	46bd      	mov	sp, r7
 80044d0:	bd90      	pop	{r4, r7, pc}
 80044d2:	bf00      	nop
 80044d4:	20007d10 	.word	0x20007d10
 80044d8:	20008274 	.word	0x20008274
 80044dc:	20007d14 	.word	0x20007d14
 80044e0:	20007da4 	.word	0x20007da4
 80044e4:	20007db0 	.word	0x20007db0
 80044e8:	20007d18 	.word	0x20007d18
 80044ec:	20007d98 	.word	0x20007d98
 80044f0:	20007da0 	.word	0x20007da0
 80044f4:	20007d9c 	.word	0x20007d9c
 80044f8:	20007d94 	.word	0x20007d94
 80044fc:	20007e68 	.word	0x20007e68
 8004500:	20007e74 	.word	0x20007e74
 8004504:	20007e6c 	.word	0x20007e6c
 8004508:	20007e70 	.word	0x20007e70
 800450c:	4154494d 	.word	0x4154494d
 8004510:	08004659 	.word	0x08004659
 8004514:	080063d0 	.word	0x080063d0
 8004518:	20007db4 	.word	0x20007db4
 800451c:	20007da8 	.word	0x20007da8
 8004520:	20007dac 	.word	0x20007dac

08004524 <_tx_timer_system_activate>:
/*                                            TX_NO_TIMER is defined,     */
/*                                            resulting in version 6.1    */
/*                                                                        */
/**************************************************************************/
VOID  _tx_timer_system_activate(TX_TIMER_INTERNAL *timer_ptr)
{
 8004524:	b480      	push	{r7}
 8004526:	b089      	sub	sp, #36	; 0x24
 8004528:	af00      	add	r7, sp, #0
 800452a:	6078      	str	r0, [r7, #4]
ULONG                       remaining_ticks;
ULONG                       expiration_time;


    /* Pickup the remaining ticks.  */
    remaining_ticks =  timer_ptr -> tx_timer_internal_remaining_ticks;
 800452c:	687b      	ldr	r3, [r7, #4]
 800452e:	681b      	ldr	r3, [r3, #0]
 8004530:	617b      	str	r3, [r7, #20]

    /* Determine if there is a timer to activate.  */
    if (remaining_ticks != ((ULONG) 0))
 8004532:	697b      	ldr	r3, [r7, #20]
 8004534:	2b00      	cmp	r3, #0
 8004536:	d04a      	beq.n	80045ce <_tx_timer_system_activate+0xaa>
    {

        /* Determine if the timer is set to wait forever.  */
        if (remaining_ticks != TX_WAIT_FOREVER)
 8004538:	697b      	ldr	r3, [r7, #20]
 800453a:	f1b3 3fff 	cmp.w	r3, #4294967295
 800453e:	d046      	beq.n	80045ce <_tx_timer_system_activate+0xaa>
        {

            /* Valid timer activate request.  */

            /* Determine if the timer still needs activation.  */
            if (timer_ptr -> tx_timer_internal_list_head == TX_NULL)
 8004540:	687b      	ldr	r3, [r7, #4]
 8004542:	699b      	ldr	r3, [r3, #24]
 8004544:	2b00      	cmp	r3, #0
 8004546:	d142      	bne.n	80045ce <_tx_timer_system_activate+0xaa>
            {

                /* Activate the timer.  */

                /* Calculate the amount of time remaining for the timer.  */
                if (remaining_ticks > TX_TIMER_ENTRIES)
 8004548:	697b      	ldr	r3, [r7, #20]
 800454a:	2b20      	cmp	r3, #32
 800454c:	d902      	bls.n	8004554 <_tx_timer_system_activate+0x30>
                {

                    /* Set expiration time to the maximum number of entries.  */
                    expiration_time =  TX_TIMER_ENTRIES - ((ULONG) 1);
 800454e:	231f      	movs	r3, #31
 8004550:	61bb      	str	r3, [r7, #24]
 8004552:	e002      	b.n	800455a <_tx_timer_system_activate+0x36>
                {

                    /* Timer value fits in the timer entries.  */

                    /* Set the expiration time.  */
                    expiration_time =  (remaining_ticks - ((ULONG) 1));
 8004554:	697b      	ldr	r3, [r7, #20]
 8004556:	3b01      	subs	r3, #1
 8004558:	61bb      	str	r3, [r7, #24]

                /* At this point, we are ready to put the timer on one of
                   the timer lists.  */

                /* Calculate the proper place for the timer.  */
                timer_list =  TX_TIMER_POINTER_ADD(_tx_timer_current_ptr, expiration_time);
 800455a:	4b20      	ldr	r3, [pc, #128]	; (80045dc <_tx_timer_system_activate+0xb8>)
 800455c:	681a      	ldr	r2, [r3, #0]
 800455e:	69bb      	ldr	r3, [r7, #24]
 8004560:	009b      	lsls	r3, r3, #2
 8004562:	4413      	add	r3, r2
 8004564:	61fb      	str	r3, [r7, #28]
                if (TX_TIMER_INDIRECT_TO_VOID_POINTER_CONVERT(timer_list) >= TX_TIMER_INDIRECT_TO_VOID_POINTER_CONVERT(_tx_timer_list_end))
 8004566:	4b1e      	ldr	r3, [pc, #120]	; (80045e0 <_tx_timer_system_activate+0xbc>)
 8004568:	681b      	ldr	r3, [r3, #0]
 800456a:	69fa      	ldr	r2, [r7, #28]
 800456c:	429a      	cmp	r2, r3
 800456e:	d30b      	bcc.n	8004588 <_tx_timer_system_activate+0x64>
                {

                    /* Wrap from the beginning of the list.  */
                    delta =  TX_TIMER_POINTER_DIF(timer_list, _tx_timer_list_end);
 8004570:	4b1b      	ldr	r3, [pc, #108]	; (80045e0 <_tx_timer_system_activate+0xbc>)
 8004572:	681b      	ldr	r3, [r3, #0]
 8004574:	69fa      	ldr	r2, [r7, #28]
 8004576:	1ad3      	subs	r3, r2, r3
 8004578:	109b      	asrs	r3, r3, #2
 800457a:	613b      	str	r3, [r7, #16]
                    timer_list =  TX_TIMER_POINTER_ADD(_tx_timer_list_start, delta);
 800457c:	4b19      	ldr	r3, [pc, #100]	; (80045e4 <_tx_timer_system_activate+0xc0>)
 800457e:	681a      	ldr	r2, [r3, #0]
 8004580:	693b      	ldr	r3, [r7, #16]
 8004582:	009b      	lsls	r3, r3, #2
 8004584:	4413      	add	r3, r2
 8004586:	61fb      	str	r3, [r7, #28]
                }

                /* Now put the timer on this list.  */
                if ((*timer_list) == TX_NULL)
 8004588:	69fb      	ldr	r3, [r7, #28]
 800458a:	681b      	ldr	r3, [r3, #0]
 800458c:	2b00      	cmp	r3, #0
 800458e:	d109      	bne.n	80045a4 <_tx_timer_system_activate+0x80>
                {

                    /* This list is NULL, just put the new timer on it.  */

                    /* Setup the links in this timer.  */
                    timer_ptr -> tx_timer_internal_active_next =      timer_ptr;
 8004590:	687b      	ldr	r3, [r7, #4]
 8004592:	687a      	ldr	r2, [r7, #4]
 8004594:	611a      	str	r2, [r3, #16]
                    timer_ptr -> tx_timer_internal_active_previous =  timer_ptr;
 8004596:	687b      	ldr	r3, [r7, #4]
 8004598:	687a      	ldr	r2, [r7, #4]
 800459a:	615a      	str	r2, [r3, #20]

                    /* Setup the list head pointer.  */
                    *timer_list =  timer_ptr;
 800459c:	69fb      	ldr	r3, [r7, #28]
 800459e:	687a      	ldr	r2, [r7, #4]
 80045a0:	601a      	str	r2, [r3, #0]
 80045a2:	e011      	b.n	80045c8 <_tx_timer_system_activate+0xa4>
                }
                else
                {

                    /* This list is not NULL, add current timer to the end. */
                    next_timer =                                        *timer_list;
 80045a4:	69fb      	ldr	r3, [r7, #28]
 80045a6:	681b      	ldr	r3, [r3, #0]
 80045a8:	60fb      	str	r3, [r7, #12]
                    previous_timer =                                    next_timer -> tx_timer_internal_active_previous;
 80045aa:	68fb      	ldr	r3, [r7, #12]
 80045ac:	695b      	ldr	r3, [r3, #20]
 80045ae:	60bb      	str	r3, [r7, #8]
                    previous_timer -> tx_timer_internal_active_next =   timer_ptr;
 80045b0:	68bb      	ldr	r3, [r7, #8]
 80045b2:	687a      	ldr	r2, [r7, #4]
 80045b4:	611a      	str	r2, [r3, #16]
                    next_timer -> tx_timer_internal_active_previous =   timer_ptr;
 80045b6:	68fb      	ldr	r3, [r7, #12]
 80045b8:	687a      	ldr	r2, [r7, #4]
 80045ba:	615a      	str	r2, [r3, #20]
                    timer_ptr -> tx_timer_internal_active_next =        next_timer;
 80045bc:	687b      	ldr	r3, [r7, #4]
 80045be:	68fa      	ldr	r2, [r7, #12]
 80045c0:	611a      	str	r2, [r3, #16]
                    timer_ptr -> tx_timer_internal_active_previous =    previous_timer;
 80045c2:	687b      	ldr	r3, [r7, #4]
 80045c4:	68ba      	ldr	r2, [r7, #8]
 80045c6:	615a      	str	r2, [r3, #20]
                }

                /* Setup list head pointer.  */
                timer_ptr -> tx_timer_internal_list_head =  timer_list;
 80045c8:	687b      	ldr	r3, [r7, #4]
 80045ca:	69fa      	ldr	r2, [r7, #28]
 80045cc:	619a      	str	r2, [r3, #24]
            }
        }
    }
}
 80045ce:	bf00      	nop
 80045d0:	3724      	adds	r7, #36	; 0x24
 80045d2:	46bd      	mov	sp, r7
 80045d4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80045d8:	4770      	bx	lr
 80045da:	bf00      	nop
 80045dc:	20007da0 	.word	0x20007da0
 80045e0:	20007d9c 	.word	0x20007d9c
 80045e4:	20007d98 	.word	0x20007d98

080045e8 <_tx_timer_system_deactivate>:
/*  09-30-2020     Yuxin Zhou               Modified comment(s),          */
/*                                            resulting in version 6.1    */
/*                                                                        */
/**************************************************************************/
VOID  _tx_timer_system_deactivate(TX_TIMER_INTERNAL *timer_ptr)
{
 80045e8:	b480      	push	{r7}
 80045ea:	b087      	sub	sp, #28
 80045ec:	af00      	add	r7, sp, #0
 80045ee:	6078      	str	r0, [r7, #4]
TX_TIMER_INTERNAL   *next_timer;
TX_TIMER_INTERNAL   *previous_timer;


    /* Pickup the list head pointer.  */
    list_head =  timer_ptr -> tx_timer_internal_list_head;
 80045f0:	687b      	ldr	r3, [r7, #4]
 80045f2:	699b      	ldr	r3, [r3, #24]
 80045f4:	617b      	str	r3, [r7, #20]

    /* Determine if the timer still needs deactivation.  */
    if (list_head != TX_NULL)
 80045f6:	697b      	ldr	r3, [r7, #20]
 80045f8:	2b00      	cmp	r3, #0
 80045fa:	d026      	beq.n	800464a <_tx_timer_system_deactivate+0x62>
    {

        /* Deactivate the timer.  */

        /* Pickup the next active timer.  */
        next_timer =  timer_ptr -> tx_timer_internal_active_next;
 80045fc:	687b      	ldr	r3, [r7, #4]
 80045fe:	691b      	ldr	r3, [r3, #16]
 8004600:	613b      	str	r3, [r7, #16]

        /* See if this is the only timer in the list.  */
        if (timer_ptr == next_timer)
 8004602:	687a      	ldr	r2, [r7, #4]
 8004604:	693b      	ldr	r3, [r7, #16]
 8004606:	429a      	cmp	r2, r3
 8004608:	d108      	bne.n	800461c <_tx_timer_system_deactivate+0x34>
        {

            /* Yes, the only timer on the list.  */

            /* Determine if the head pointer needs to be updated.  */
            if (*(list_head) == timer_ptr)
 800460a:	697b      	ldr	r3, [r7, #20]
 800460c:	681b      	ldr	r3, [r3, #0]
 800460e:	687a      	ldr	r2, [r7, #4]
 8004610:	429a      	cmp	r2, r3
 8004612:	d117      	bne.n	8004644 <_tx_timer_system_deactivate+0x5c>
            {

                /* Update the head pointer.  */
                *(list_head) =  TX_NULL;
 8004614:	697b      	ldr	r3, [r7, #20]
 8004616:	2200      	movs	r2, #0
 8004618:	601a      	str	r2, [r3, #0]
 800461a:	e013      	b.n	8004644 <_tx_timer_system_deactivate+0x5c>
        {

            /* At least one more timer is on the same expiration list.  */

            /* Update the links of the adjacent timers.  */
            previous_timer =                                   timer_ptr -> tx_timer_internal_active_previous;
 800461c:	687b      	ldr	r3, [r7, #4]
 800461e:	695b      	ldr	r3, [r3, #20]
 8004620:	60fb      	str	r3, [r7, #12]
            next_timer -> tx_timer_internal_active_previous =  previous_timer;
 8004622:	693b      	ldr	r3, [r7, #16]
 8004624:	68fa      	ldr	r2, [r7, #12]
 8004626:	615a      	str	r2, [r3, #20]
            previous_timer -> tx_timer_internal_active_next =  next_timer;
 8004628:	68fb      	ldr	r3, [r7, #12]
 800462a:	693a      	ldr	r2, [r7, #16]
 800462c:	611a      	str	r2, [r3, #16]

            /* Determine if the head pointer needs to be updated.  */
            if (*(list_head) == timer_ptr)
 800462e:	697b      	ldr	r3, [r7, #20]
 8004630:	681b      	ldr	r3, [r3, #0]
 8004632:	687a      	ldr	r2, [r7, #4]
 8004634:	429a      	cmp	r2, r3
 8004636:	d105      	bne.n	8004644 <_tx_timer_system_deactivate+0x5c>
            {

                /* Update the next timer in the list with the list head pointer.  */
                next_timer -> tx_timer_internal_list_head =  list_head;
 8004638:	693b      	ldr	r3, [r7, #16]
 800463a:	697a      	ldr	r2, [r7, #20]
 800463c:	619a      	str	r2, [r3, #24]

                /* Update the head pointer.  */
                *(list_head) =  next_timer;
 800463e:	697b      	ldr	r3, [r7, #20]
 8004640:	693a      	ldr	r2, [r7, #16]
 8004642:	601a      	str	r2, [r3, #0]
            }
        }

        /* Clear the timer's list head pointer.  */
        timer_ptr -> tx_timer_internal_list_head =  TX_NULL;
 8004644:	687b      	ldr	r3, [r7, #4]
 8004646:	2200      	movs	r2, #0
 8004648:	619a      	str	r2, [r3, #24]
    }
}
 800464a:	bf00      	nop
 800464c:	371c      	adds	r7, #28
 800464e:	46bd      	mov	sp, r7
 8004650:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004654:	4770      	bx	lr
	...

08004658 <_tx_timer_thread_entry>:
/*                                            resulting in version 6.1    */
/*                                                                        */
/**************************************************************************/
#ifndef TX_TIMER_PROCESS_IN_ISR
VOID  _tx_timer_thread_entry(ULONG timer_thread_input)
{
 8004658:	b580      	push	{r7, lr}
 800465a:	b098      	sub	sp, #96	; 0x60
 800465c:	af00      	add	r7, sp, #0
 800465e:	6078      	str	r0, [r7, #4]
TX_TIMER_INTERNAL           *reactivate_timer;
TX_TIMER_INTERNAL           *next_timer;
TX_TIMER_INTERNAL           *previous_timer;
TX_TIMER_INTERNAL           *current_timer;
VOID                        (*timeout_function)(ULONG id);
ULONG                       timeout_param =  ((ULONG) 0);
 8004660:	2300      	movs	r3, #0
 8004662:	657b      	str	r3, [r7, #84]	; 0x54
#endif


    /* Make sure the timer input is correct.  This also gets rid of the
       silly compiler warnings.  */
    if (timer_thread_input == TX_TIMER_ID)
 8004664:	687b      	ldr	r3, [r7, #4]
 8004666:	4a73      	ldr	r2, [pc, #460]	; (8004834 <_tx_timer_thread_entry+0x1dc>)
 8004668:	4293      	cmp	r3, r2
 800466a:	f040 80de 	bne.w	800482a <_tx_timer_thread_entry+0x1d2>
    __asm__ volatile ("MRS  %0, PRIMASK ": "=r" (posture));
 800466e:	f3ef 8310 	mrs	r3, PRIMASK
 8004672:	643b      	str	r3, [r7, #64]	; 0x40
    return(posture);
 8004674:	6c3b      	ldr	r3, [r7, #64]	; 0x40
    int_posture = __get_interrupt_posture();
 8004676:	63fb      	str	r3, [r7, #60]	; 0x3c
    __asm__ volatile ("CPSID i" : : : "memory");
 8004678:	b672      	cpsid	i
    return(int_posture);
 800467a:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
        {

            /* First, move the current list pointer and clear the timer
               expired value.  This allows the interrupt handling portion
               to continue looking for timer expirations.  */
            TX_DISABLE
 800467c:	65fb      	str	r3, [r7, #92]	; 0x5c

            /* Save the current timer expiration list pointer.  */
            expired_timers =  *_tx_timer_current_ptr;
 800467e:	4b6e      	ldr	r3, [pc, #440]	; (8004838 <_tx_timer_thread_entry+0x1e0>)
 8004680:	681b      	ldr	r3, [r3, #0]
 8004682:	681b      	ldr	r3, [r3, #0]
 8004684:	60fb      	str	r3, [r7, #12]

            /* Modify the head pointer in the first timer in the list, if there
               is one!  */
            if (expired_timers != TX_NULL)
 8004686:	68fb      	ldr	r3, [r7, #12]
 8004688:	2b00      	cmp	r3, #0
 800468a:	d003      	beq.n	8004694 <_tx_timer_thread_entry+0x3c>
            {

                expired_timers -> tx_timer_internal_list_head =  &expired_timers;
 800468c:	68fb      	ldr	r3, [r7, #12]
 800468e:	f107 020c 	add.w	r2, r7, #12
 8004692:	619a      	str	r2, [r3, #24]
            }

            /* Set the current list pointer to NULL.  */
            *_tx_timer_current_ptr =  TX_NULL;
 8004694:	4b68      	ldr	r3, [pc, #416]	; (8004838 <_tx_timer_thread_entry+0x1e0>)
 8004696:	681b      	ldr	r3, [r3, #0]
 8004698:	2200      	movs	r2, #0
 800469a:	601a      	str	r2, [r3, #0]

            /* Move the current pointer up one timer entry wrap if we get to
               the end of the list.  */
            _tx_timer_current_ptr =  TX_TIMER_POINTER_ADD(_tx_timer_current_ptr, 1);
 800469c:	4b66      	ldr	r3, [pc, #408]	; (8004838 <_tx_timer_thread_entry+0x1e0>)
 800469e:	681b      	ldr	r3, [r3, #0]
 80046a0:	3304      	adds	r3, #4
 80046a2:	4a65      	ldr	r2, [pc, #404]	; (8004838 <_tx_timer_thread_entry+0x1e0>)
 80046a4:	6013      	str	r3, [r2, #0]
            if (_tx_timer_current_ptr == _tx_timer_list_end)
 80046a6:	4b64      	ldr	r3, [pc, #400]	; (8004838 <_tx_timer_thread_entry+0x1e0>)
 80046a8:	681a      	ldr	r2, [r3, #0]
 80046aa:	4b64      	ldr	r3, [pc, #400]	; (800483c <_tx_timer_thread_entry+0x1e4>)
 80046ac:	681b      	ldr	r3, [r3, #0]
 80046ae:	429a      	cmp	r2, r3
 80046b0:	d103      	bne.n	80046ba <_tx_timer_thread_entry+0x62>
            {

                _tx_timer_current_ptr =  _tx_timer_list_start;
 80046b2:	4b63      	ldr	r3, [pc, #396]	; (8004840 <_tx_timer_thread_entry+0x1e8>)
 80046b4:	681b      	ldr	r3, [r3, #0]
 80046b6:	4a60      	ldr	r2, [pc, #384]	; (8004838 <_tx_timer_thread_entry+0x1e0>)
 80046b8:	6013      	str	r3, [r2, #0]
            }

            /* Clear the expired flag.  */
            _tx_timer_expired =  TX_FALSE;
 80046ba:	4b62      	ldr	r3, [pc, #392]	; (8004844 <_tx_timer_thread_entry+0x1ec>)
 80046bc:	2200      	movs	r2, #0
 80046be:	601a      	str	r2, [r3, #0]
 80046c0:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 80046c2:	633b      	str	r3, [r7, #48]	; 0x30
    __asm__ volatile ("MSR  PRIMASK,%0": : "r" (int_posture): "memory");
 80046c4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80046c6:	f383 8810 	msr	PRIMASK, r3
}
 80046ca:	bf00      	nop
    __asm__ volatile ("MRS  %0, PRIMASK ": "=r" (posture));
 80046cc:	f3ef 8310 	mrs	r3, PRIMASK
 80046d0:	63bb      	str	r3, [r7, #56]	; 0x38
    return(posture);
 80046d2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
    int_posture = __get_interrupt_posture();
 80046d4:	637b      	str	r3, [r7, #52]	; 0x34
    __asm__ volatile ("CPSID i" : : : "memory");
 80046d6:	b672      	cpsid	i
    return(int_posture);
 80046d8:	6b7b      	ldr	r3, [r7, #52]	; 0x34

            /* Restore interrupts temporarily.  */
            TX_RESTORE

            /* Disable interrupts again.  */
            TX_DISABLE
 80046da:	65fb      	str	r3, [r7, #92]	; 0x5c

            /* Next, process the expiration of the associated timers at this
               time slot.  */
            while (expired_timers != TX_NULL)
 80046dc:	e07f      	b.n	80047de <_tx_timer_thread_entry+0x186>
            {

                /* Something is on the list.  Remove it and process the expiration.  */
                current_timer =  expired_timers;
 80046de:	68fb      	ldr	r3, [r7, #12]
 80046e0:	64fb      	str	r3, [r7, #76]	; 0x4c

                /* Pickup the next timer.  */
                next_timer =  expired_timers -> tx_timer_internal_active_next;
 80046e2:	68fb      	ldr	r3, [r7, #12]
 80046e4:	691b      	ldr	r3, [r3, #16]
 80046e6:	64bb      	str	r3, [r7, #72]	; 0x48

                /* Set the reactivate_timer to NULL.  */
                reactivate_timer =  TX_NULL;
 80046e8:	2300      	movs	r3, #0
 80046ea:	60bb      	str	r3, [r7, #8]

                /* Determine if this is the only timer.  */
                if (current_timer == next_timer)
 80046ec:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 80046ee:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 80046f0:	429a      	cmp	r2, r3
 80046f2:	d102      	bne.n	80046fa <_tx_timer_thread_entry+0xa2>
                {

                    /* Yes, this is the only timer in the list.  */

                    /* Set the head pointer to NULL.  */
                    expired_timers =  TX_NULL;
 80046f4:	2300      	movs	r3, #0
 80046f6:	60fb      	str	r3, [r7, #12]
 80046f8:	e00e      	b.n	8004718 <_tx_timer_thread_entry+0xc0>
                {

                    /* No, not the only expired timer.  */

                    /* Remove this timer from the expired list.  */
                    previous_timer =                                   current_timer -> tx_timer_internal_active_previous;
 80046fa:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80046fc:	695b      	ldr	r3, [r3, #20]
 80046fe:	647b      	str	r3, [r7, #68]	; 0x44
                    next_timer -> tx_timer_internal_active_previous =  previous_timer;
 8004700:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8004702:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8004704:	615a      	str	r2, [r3, #20]
                    previous_timer -> tx_timer_internal_active_next =  next_timer;
 8004706:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8004708:	6cba      	ldr	r2, [r7, #72]	; 0x48
 800470a:	611a      	str	r2, [r3, #16]

                    /* Modify the next timer's list head to point at the current list head.  */
                    next_timer -> tx_timer_internal_list_head =  &expired_timers;
 800470c:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800470e:	f107 020c 	add.w	r2, r7, #12
 8004712:	619a      	str	r2, [r3, #24]

                    /* Set the list head pointer.  */
                    expired_timers =  next_timer;
 8004714:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8004716:	60fb      	str	r3, [r7, #12]

                /* In any case, the timer is now off of the expired list.  */

                /* Determine if the timer has expired or if it is just a really
                   big timer that needs to be placed in the list again.  */
                if (current_timer -> tx_timer_internal_remaining_ticks > TX_TIMER_ENTRIES)
 8004718:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800471a:	681b      	ldr	r3, [r3, #0]
 800471c:	2b20      	cmp	r3, #32
 800471e:	d911      	bls.n	8004744 <_tx_timer_thread_entry+0xec>
                    }
#endif

                    /* Decrement the remaining ticks of the timer.  */
                    current_timer -> tx_timer_internal_remaining_ticks =
                            current_timer -> tx_timer_internal_remaining_ticks - TX_TIMER_ENTRIES;
 8004720:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8004722:	681b      	ldr	r3, [r3, #0]
 8004724:	f1a3 0220 	sub.w	r2, r3, #32
                    current_timer -> tx_timer_internal_remaining_ticks =
 8004728:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800472a:	601a      	str	r2, [r3, #0]

                    /* Set the timeout function to NULL in order to bypass the
                       expiration.  */
                    timeout_function =  TX_NULL;
 800472c:	2300      	movs	r3, #0
 800472e:	65bb      	str	r3, [r7, #88]	; 0x58

                    /* Make the timer appear that it is still active while interrupts
                       are enabled.  This will permit proper processing of a timer
                       deactivate from an ISR.  */
                    current_timer -> tx_timer_internal_list_head =    &reactivate_timer;
 8004730:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8004732:	f107 0208 	add.w	r2, r7, #8
 8004736:	619a      	str	r2, [r3, #24]
                    current_timer -> tx_timer_internal_active_next =  current_timer;
 8004738:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800473a:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 800473c:	611a      	str	r2, [r3, #16]

                    /* Setup the temporary timer list head pointer.  */
                    reactivate_timer =  current_timer;
 800473e:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8004740:	60bb      	str	r3, [r7, #8]
 8004742:	e01a      	b.n	800477a <_tx_timer_thread_entry+0x122>
                    }
#endif

                    /* Copy the calling function and ID into local variables before interrupts
                       are re-enabled.  */
                    timeout_function =  current_timer -> tx_timer_internal_timeout_function;
 8004744:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8004746:	689b      	ldr	r3, [r3, #8]
 8004748:	65bb      	str	r3, [r7, #88]	; 0x58
                    timeout_param =     current_timer -> tx_timer_internal_timeout_param;
 800474a:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800474c:	68db      	ldr	r3, [r3, #12]
 800474e:	657b      	str	r3, [r7, #84]	; 0x54

                    /* Copy the reinitialize ticks into the remaining ticks.  */
                    current_timer -> tx_timer_internal_remaining_ticks =  current_timer -> tx_timer_internal_re_initialize_ticks;
 8004750:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8004752:	685a      	ldr	r2, [r3, #4]
 8004754:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8004756:	601a      	str	r2, [r3, #0]

                    /* Determine if the timer should be reactivated.  */
                    if (current_timer -> tx_timer_internal_remaining_ticks != ((ULONG) 0))
 8004758:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800475a:	681b      	ldr	r3, [r3, #0]
 800475c:	2b00      	cmp	r3, #0
 800475e:	d009      	beq.n	8004774 <_tx_timer_thread_entry+0x11c>

                        /* Make the timer appear that it is still active while processing
                           the expiration routine and with interrupts enabled.  This will
                           permit proper processing of a timer deactivate from both the
                           expiration routine and an ISR.  */
                        current_timer -> tx_timer_internal_list_head =    &reactivate_timer;
 8004760:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8004762:	f107 0208 	add.w	r2, r7, #8
 8004766:	619a      	str	r2, [r3, #24]
                        current_timer -> tx_timer_internal_active_next =  current_timer;
 8004768:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800476a:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 800476c:	611a      	str	r2, [r3, #16]

                        /* Setup the temporary timer list head pointer.  */
                        reactivate_timer =  current_timer;
 800476e:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8004770:	60bb      	str	r3, [r7, #8]
 8004772:	e002      	b.n	800477a <_tx_timer_thread_entry+0x122>
                    else
                    {

                        /* Set the list pointer of this timer to NULL.  This is used to indicate
                           the timer is no longer active.  */
                        current_timer -> tx_timer_internal_list_head =  TX_NULL;
 8004774:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8004776:	2200      	movs	r2, #0
 8004778:	619a      	str	r2, [r3, #24]
                    }
                }

                /* Set pointer to indicate the expired timer that is currently being processed.  */
                _tx_timer_expired_timer_ptr =  current_timer;
 800477a:	4a33      	ldr	r2, [pc, #204]	; (8004848 <_tx_timer_thread_entry+0x1f0>)
 800477c:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800477e:	6013      	str	r3, [r2, #0]
 8004780:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8004782:	62fb      	str	r3, [r7, #44]	; 0x2c
    __asm__ volatile ("MSR  PRIMASK,%0": : "r" (int_posture): "memory");
 8004784:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004786:	f383 8810 	msr	PRIMASK, r3
}
 800478a:	bf00      	nop

                /* Restore interrupts for timer expiration call.  */
                TX_RESTORE

                /* Call the timer-expiration function, if non-NULL.  */
                if (timeout_function != TX_NULL)
 800478c:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 800478e:	2b00      	cmp	r3, #0
 8004790:	d002      	beq.n	8004798 <_tx_timer_thread_entry+0x140>
                {

                    (timeout_function) (timeout_param);
 8004792:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8004794:	6d78      	ldr	r0, [r7, #84]	; 0x54
 8004796:	4798      	blx	r3
    __asm__ volatile ("MRS  %0, PRIMASK ": "=r" (posture));
 8004798:	f3ef 8310 	mrs	r3, PRIMASK
 800479c:	62bb      	str	r3, [r7, #40]	; 0x28
    return(posture);
 800479e:	6abb      	ldr	r3, [r7, #40]	; 0x28
    int_posture = __get_interrupt_posture();
 80047a0:	627b      	str	r3, [r7, #36]	; 0x24
    __asm__ volatile ("CPSID i" : : : "memory");
 80047a2:	b672      	cpsid	i
    return(int_posture);
 80047a4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
                }

                /* Lockout interrupts again.  */
                TX_DISABLE
 80047a6:	65fb      	str	r3, [r7, #92]	; 0x5c

                /* Clear expired timer pointer.  */
                _tx_timer_expired_timer_ptr =  TX_NULL;
 80047a8:	4b27      	ldr	r3, [pc, #156]	; (8004848 <_tx_timer_thread_entry+0x1f0>)
 80047aa:	2200      	movs	r2, #0
 80047ac:	601a      	str	r2, [r3, #0]

                /* Determine if the timer needs to be reactivated.  */
                if (reactivate_timer == current_timer)
 80047ae:	68bb      	ldr	r3, [r7, #8]
 80047b0:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 80047b2:	429a      	cmp	r2, r3
 80047b4:	d105      	bne.n	80047c2 <_tx_timer_thread_entry+0x16a>
#else

                    /* Reactivate through the timer activate function.  */

                    /* Clear the list head for the timer activate call.  */
                    current_timer -> tx_timer_internal_list_head = TX_NULL;
 80047b6:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80047b8:	2200      	movs	r2, #0
 80047ba:	619a      	str	r2, [r3, #24]

                    /* Activate the current timer.  */
                    _tx_timer_system_activate(current_timer);
 80047bc:	6cf8      	ldr	r0, [r7, #76]	; 0x4c
 80047be:	f7ff feb1 	bl	8004524 <_tx_timer_system_activate>
 80047c2:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 80047c4:	61bb      	str	r3, [r7, #24]
    __asm__ volatile ("MSR  PRIMASK,%0": : "r" (int_posture): "memory");
 80047c6:	69bb      	ldr	r3, [r7, #24]
 80047c8:	f383 8810 	msr	PRIMASK, r3
}
 80047cc:	bf00      	nop
    __asm__ volatile ("MRS  %0, PRIMASK ": "=r" (posture));
 80047ce:	f3ef 8310 	mrs	r3, PRIMASK
 80047d2:	623b      	str	r3, [r7, #32]
    return(posture);
 80047d4:	6a3b      	ldr	r3, [r7, #32]
    int_posture = __get_interrupt_posture();
 80047d6:	61fb      	str	r3, [r7, #28]
    __asm__ volatile ("CPSID i" : : : "memory");
 80047d8:	b672      	cpsid	i
    return(int_posture);
 80047da:	69fb      	ldr	r3, [r7, #28]

                /* Restore interrupts.  */
                TX_RESTORE

                /* Lockout interrupts again.  */
                TX_DISABLE
 80047dc:	65fb      	str	r3, [r7, #92]	; 0x5c
            while (expired_timers != TX_NULL)
 80047de:	68fb      	ldr	r3, [r7, #12]
 80047e0:	2b00      	cmp	r3, #0
 80047e2:	f47f af7c 	bne.w	80046de <_tx_timer_thread_entry+0x86>

            /* Finally, suspend this thread and wait for the next expiration.  */

            /* Determine if another expiration took place while we were in this
               thread.  If so, process another expiration.  */
            if (_tx_timer_expired == TX_FALSE)
 80047e6:	4b17      	ldr	r3, [pc, #92]	; (8004844 <_tx_timer_thread_entry+0x1ec>)
 80047e8:	681b      	ldr	r3, [r3, #0]
 80047ea:	2b00      	cmp	r3, #0
 80047ec:	d116      	bne.n	800481c <_tx_timer_thread_entry+0x1c4>
            {

                /* Otherwise, no timer expiration, so suspend the thread.  */

                /* Build pointer to the timer thread.  */
                thread_ptr =  &_tx_timer_thread;
 80047ee:	4b17      	ldr	r3, [pc, #92]	; (800484c <_tx_timer_thread_entry+0x1f4>)
 80047f0:	653b      	str	r3, [r7, #80]	; 0x50

                /* Set the status to suspending, in order to indicate the
                   suspension is in progress.  */
                thread_ptr -> tx_thread_state =  TX_SUSPENDED;
 80047f2:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80047f4:	2203      	movs	r2, #3
 80047f6:	631a      	str	r2, [r3, #48]	; 0x30
                /* Restore interrupts.  */
                TX_RESTORE
#else

                /* Set the suspending flag. */
                thread_ptr -> tx_thread_suspending =  TX_TRUE;
 80047f8:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80047fa:	2201      	movs	r2, #1
 80047fc:	639a      	str	r2, [r3, #56]	; 0x38

                /* Increment the preempt disable count prior to suspending.  */
                _tx_thread_preempt_disable++;
 80047fe:	4b14      	ldr	r3, [pc, #80]	; (8004850 <_tx_timer_thread_entry+0x1f8>)
 8004800:	681b      	ldr	r3, [r3, #0]
 8004802:	3301      	adds	r3, #1
 8004804:	4a12      	ldr	r2, [pc, #72]	; (8004850 <_tx_timer_thread_entry+0x1f8>)
 8004806:	6013      	str	r3, [r2, #0]
 8004808:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800480a:	617b      	str	r3, [r7, #20]
    __asm__ volatile ("MSR  PRIMASK,%0": : "r" (int_posture): "memory");
 800480c:	697b      	ldr	r3, [r7, #20]
 800480e:	f383 8810 	msr	PRIMASK, r3
}
 8004812:	bf00      	nop

                /* Restore interrupts.  */
                TX_RESTORE

                /* Call actual thread suspension routine.  */
                _tx_thread_system_suspend(thread_ptr);
 8004814:	6d38      	ldr	r0, [r7, #80]	; 0x50
 8004816:	f7ff fc11 	bl	800403c <_tx_thread_system_suspend>
 800481a:	e728      	b.n	800466e <_tx_timer_thread_entry+0x16>
 800481c:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800481e:	613b      	str	r3, [r7, #16]
    __asm__ volatile ("MSR  PRIMASK,%0": : "r" (int_posture): "memory");
 8004820:	693b      	ldr	r3, [r7, #16]
 8004822:	f383 8810 	msr	PRIMASK, r3
}
 8004826:	bf00      	nop
            TX_DISABLE
 8004828:	e721      	b.n	800466e <_tx_timer_thread_entry+0x16>

    /* If we ever get here, raise safety critical exception.  */
    TX_SAFETY_CRITICAL_EXCEPTION(__FILE__, __LINE__, 0);
#endif

}
 800482a:	bf00      	nop
 800482c:	3760      	adds	r7, #96	; 0x60
 800482e:	46bd      	mov	sp, r7
 8004830:	bd80      	pop	{r7, pc}
 8004832:	bf00      	nop
 8004834:	4154494d 	.word	0x4154494d
 8004838:	20007da0 	.word	0x20007da0
 800483c:	20007d9c 	.word	0x20007d9c
 8004840:	20007d98 	.word	0x20007d98
 8004844:	20007da4 	.word	0x20007da4
 8004848:	20007db0 	.word	0x20007db0
 800484c:	20007db4 	.word	0x20007db4
 8004850:	20007d04 	.word	0x20007d04

08004854 <_txe_byte_allocate>:
/*                                            resulting in version 6.1    */
/*                                                                        */
/**************************************************************************/
UINT  _txe_byte_allocate(TX_BYTE_POOL *pool_ptr, VOID **memory_ptr,
                                    ULONG memory_size,  ULONG wait_option)
{
 8004854:	b580      	push	{r7, lr}
 8004856:	b08a      	sub	sp, #40	; 0x28
 8004858:	af00      	add	r7, sp, #0
 800485a:	60f8      	str	r0, [r7, #12]
 800485c:	60b9      	str	r1, [r7, #8]
 800485e:	607a      	str	r2, [r7, #4]
 8004860:	603b      	str	r3, [r7, #0]
TX_THREAD       *thread_ptr;
#endif


    /* Default status to success.  */
    status =  TX_SUCCESS;
 8004862:	2300      	movs	r3, #0
 8004864:	627b      	str	r3, [r7, #36]	; 0x24

    /* Check for an invalid byte pool pointer.  */
    if (pool_ptr == TX_NULL)
 8004866:	68fb      	ldr	r3, [r7, #12]
 8004868:	2b00      	cmp	r3, #0
 800486a:	d102      	bne.n	8004872 <_txe_byte_allocate+0x1e>
    {

        /* Byte pool pointer is invalid, return appropriate error code.  */
        status =  TX_POOL_ERROR;
 800486c:	2302      	movs	r3, #2
 800486e:	627b      	str	r3, [r7, #36]	; 0x24
 8004870:	e029      	b.n	80048c6 <_txe_byte_allocate+0x72>
    }

    /* Now check for invalid pool ID.  */
    else if  (pool_ptr -> tx_byte_pool_id != TX_BYTE_POOL_ID)
 8004872:	68fb      	ldr	r3, [r7, #12]
 8004874:	681b      	ldr	r3, [r3, #0]
 8004876:	4a2d      	ldr	r2, [pc, #180]	; (800492c <_txe_byte_allocate+0xd8>)
 8004878:	4293      	cmp	r3, r2
 800487a:	d002      	beq.n	8004882 <_txe_byte_allocate+0x2e>
    {

        /* Byte pool pointer is invalid, return appropriate error code.  */
        status =  TX_POOL_ERROR;
 800487c:	2302      	movs	r3, #2
 800487e:	627b      	str	r3, [r7, #36]	; 0x24
 8004880:	e021      	b.n	80048c6 <_txe_byte_allocate+0x72>
    }

    /* Check for an invalid destination for return pointer.  */
    else if (memory_ptr == TX_NULL)
 8004882:	68bb      	ldr	r3, [r7, #8]
 8004884:	2b00      	cmp	r3, #0
 8004886:	d102      	bne.n	800488e <_txe_byte_allocate+0x3a>
    {

        /* Null destination pointer, return appropriate error.  */
        status =  TX_PTR_ERROR;
 8004888:	2303      	movs	r3, #3
 800488a:	627b      	str	r3, [r7, #36]	; 0x24
 800488c:	e01b      	b.n	80048c6 <_txe_byte_allocate+0x72>
    }

    /* Check for an invalid memory size.  */
    else if (memory_size == ((ULONG) 0))
 800488e:	687b      	ldr	r3, [r7, #4]
 8004890:	2b00      	cmp	r3, #0
 8004892:	d102      	bne.n	800489a <_txe_byte_allocate+0x46>
    {

        /* Error in size, return appropriate error.  */
        status =  TX_SIZE_ERROR;
 8004894:	2305      	movs	r3, #5
 8004896:	627b      	str	r3, [r7, #36]	; 0x24
 8004898:	e015      	b.n	80048c6 <_txe_byte_allocate+0x72>
    }

    /* Determine if the size is greater than the pool size.  */
    else if (memory_size > pool_ptr -> tx_byte_pool_size)
 800489a:	68fb      	ldr	r3, [r7, #12]
 800489c:	69db      	ldr	r3, [r3, #28]
 800489e:	687a      	ldr	r2, [r7, #4]
 80048a0:	429a      	cmp	r2, r3
 80048a2:	d902      	bls.n	80048aa <_txe_byte_allocate+0x56>
    {

        /* Error in size, return appropriate error.  */
        status =  TX_SIZE_ERROR;
 80048a4:	2305      	movs	r3, #5
 80048a6:	627b      	str	r3, [r7, #36]	; 0x24
 80048a8:	e00d      	b.n	80048c6 <_txe_byte_allocate+0x72>
    else
    {

        /* Check for a wait option error.  Only threads are allowed any form of
           suspension.  */
        if (wait_option != TX_NO_WAIT)
 80048aa:	683b      	ldr	r3, [r7, #0]
 80048ac:	2b00      	cmp	r3, #0
 80048ae:	d00a      	beq.n	80048c6 <_txe_byte_allocate+0x72>
    __asm__ volatile (" MRS  %0,IPSR ": "=r" (ipsr_value) );
 80048b0:	f3ef 8305 	mrs	r3, IPSR
 80048b4:	61fb      	str	r3, [r7, #28]
    return(ipsr_value);
 80048b6:	69fa      	ldr	r2, [r7, #28]
        {

            /* Is call from ISR or Initialization?  */
            if (TX_THREAD_GET_SYSTEM_STATE() != ((ULONG) 0))
 80048b8:	4b1d      	ldr	r3, [pc, #116]	; (8004930 <_txe_byte_allocate+0xdc>)
 80048ba:	681b      	ldr	r3, [r3, #0]
 80048bc:	4313      	orrs	r3, r2
 80048be:	2b00      	cmp	r3, #0
 80048c0:	d001      	beq.n	80048c6 <_txe_byte_allocate+0x72>
            {

                /* A non-thread is trying to suspend, return appropriate error code.  */
                status =  TX_WAIT_ERROR;
 80048c2:	2304      	movs	r3, #4
 80048c4:	627b      	str	r3, [r7, #36]	; 0x24
        }
    }
#ifndef TX_TIMER_PROCESS_IN_ISR

    /* Check for timer execution.  */
    if (status == TX_SUCCESS)
 80048c6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80048c8:	2b00      	cmp	r3, #0
 80048ca:	d108      	bne.n	80048de <_txe_byte_allocate+0x8a>
    {

        /* Pickup thread pointer.  */
        TX_THREAD_GET_CURRENT(thread_ptr)
 80048cc:	4b19      	ldr	r3, [pc, #100]	; (8004934 <_txe_byte_allocate+0xe0>)
 80048ce:	681b      	ldr	r3, [r3, #0]
 80048d0:	623b      	str	r3, [r7, #32]

        /* Check for invalid caller of this function.  First check for a calling thread.  */
        if (thread_ptr == &_tx_timer_thread)
 80048d2:	6a3b      	ldr	r3, [r7, #32]
 80048d4:	4a18      	ldr	r2, [pc, #96]	; (8004938 <_txe_byte_allocate+0xe4>)
 80048d6:	4293      	cmp	r3, r2
 80048d8:	d101      	bne.n	80048de <_txe_byte_allocate+0x8a>
        {

            /* Invalid caller of this function, return appropriate error code.  */
            status =  TX_CALLER_ERROR;
 80048da:	2313      	movs	r3, #19
 80048dc:	627b      	str	r3, [r7, #36]	; 0x24
        }
    }
#endif

    /* Is everything still okay?  */
    if (status == TX_SUCCESS)
 80048de:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80048e0:	2b00      	cmp	r3, #0
 80048e2:	d114      	bne.n	800490e <_txe_byte_allocate+0xba>
    __asm__ volatile (" MRS  %0,IPSR ": "=r" (ipsr_value) );
 80048e4:	f3ef 8305 	mrs	r3, IPSR
 80048e8:	61bb      	str	r3, [r7, #24]
    return(ipsr_value);
 80048ea:	69ba      	ldr	r2, [r7, #24]
    {

        /* Check for interrupt call.  */
        if (TX_THREAD_GET_SYSTEM_STATE() != ((ULONG) 0))
 80048ec:	4b10      	ldr	r3, [pc, #64]	; (8004930 <_txe_byte_allocate+0xdc>)
 80048ee:	681b      	ldr	r3, [r3, #0]
 80048f0:	4313      	orrs	r3, r2
 80048f2:	2b00      	cmp	r3, #0
 80048f4:	d00b      	beq.n	800490e <_txe_byte_allocate+0xba>
    __asm__ volatile (" MRS  %0,IPSR ": "=r" (ipsr_value) );
 80048f6:	f3ef 8305 	mrs	r3, IPSR
 80048fa:	617b      	str	r3, [r7, #20]
    return(ipsr_value);
 80048fc:	697a      	ldr	r2, [r7, #20]
        {

            /* Now, make sure the call is from an interrupt and not initialization.  */
            if (TX_THREAD_GET_SYSTEM_STATE() < TX_INITIALIZE_IN_PROGRESS)
 80048fe:	4b0c      	ldr	r3, [pc, #48]	; (8004930 <_txe_byte_allocate+0xdc>)
 8004900:	681b      	ldr	r3, [r3, #0]
 8004902:	4313      	orrs	r3, r2
 8004904:	f1b3 3ff0 	cmp.w	r3, #4042322160	; 0xf0f0f0f0
 8004908:	d201      	bcs.n	800490e <_txe_byte_allocate+0xba>
            {

                /* Invalid caller of this function, return appropriate error code.  */
                status =  TX_CALLER_ERROR;
 800490a:	2313      	movs	r3, #19
 800490c:	627b      	str	r3, [r7, #36]	; 0x24
            }
        }
    }

    /* Determine if everything is okay.  */
    if (status == TX_SUCCESS)
 800490e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004910:	2b00      	cmp	r3, #0
 8004912:	d106      	bne.n	8004922 <_txe_byte_allocate+0xce>
    {

        /* Call actual byte memory allocate function.  */
        status =  _tx_byte_allocate(pool_ptr, memory_ptr, memory_size,  wait_option);
 8004914:	683b      	ldr	r3, [r7, #0]
 8004916:	687a      	ldr	r2, [r7, #4]
 8004918:	68b9      	ldr	r1, [r7, #8]
 800491a:	68f8      	ldr	r0, [r7, #12]
 800491c:	f7fe fad8 	bl	8002ed0 <_tx_byte_allocate>
 8004920:	6278      	str	r0, [r7, #36]	; 0x24
    }

    /* Return completion status.  */
    return(status);
 8004922:	6a7b      	ldr	r3, [r7, #36]	; 0x24
}
 8004924:	4618      	mov	r0, r3
 8004926:	3728      	adds	r7, #40	; 0x28
 8004928:	46bd      	mov	sp, r7
 800492a:	bd80      	pop	{r7, pc}
 800492c:	42595445 	.word	0x42595445
 8004930:	2000000c 	.word	0x2000000c
 8004934:	20007be4 	.word	0x20007be4
 8004938:	20007db4 	.word	0x20007db4

0800493c <_txe_byte_pool_create>:
/*  09-30-2020     Yuxin Zhou               Modified comment(s),          */
/*                                            resulting in version 6.1    */
/*                                                                        */
/**************************************************************************/
UINT  _txe_byte_pool_create(TX_BYTE_POOL *pool_ptr, CHAR *name_ptr, VOID *pool_start, ULONG pool_size, UINT pool_control_block_size)
{
 800493c:	b580      	push	{r7, lr}
 800493e:	b092      	sub	sp, #72	; 0x48
 8004940:	af00      	add	r7, sp, #0
 8004942:	60f8      	str	r0, [r7, #12]
 8004944:	60b9      	str	r1, [r7, #8]
 8004946:	607a      	str	r2, [r7, #4]
 8004948:	603b      	str	r3, [r7, #0]
TX_THREAD       *thread_ptr;
#endif


    /* Default status to success.  */
    status =  TX_SUCCESS;
 800494a:	2300      	movs	r3, #0
 800494c:	647b      	str	r3, [r7, #68]	; 0x44

    /* Check for an invalid byte pool pointer.  */
    if (pool_ptr == TX_NULL)
 800494e:	68fb      	ldr	r3, [r7, #12]
 8004950:	2b00      	cmp	r3, #0
 8004952:	d102      	bne.n	800495a <_txe_byte_pool_create+0x1e>
    {

        /* Byte pool pointer is invalid, return appropriate error code.  */
        status =  TX_POOL_ERROR;
 8004954:	2302      	movs	r3, #2
 8004956:	647b      	str	r3, [r7, #68]	; 0x44
 8004958:	e075      	b.n	8004a46 <_txe_byte_pool_create+0x10a>
    }

    /* Now see if the pool control block size is valid.  */
    else if (pool_control_block_size != (sizeof(TX_BYTE_POOL)))
 800495a:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800495c:	2b34      	cmp	r3, #52	; 0x34
 800495e:	d002      	beq.n	8004966 <_txe_byte_pool_create+0x2a>
    {

        /* Byte pool pointer is invalid, return appropriate error code.  */
        status =  TX_POOL_ERROR;
 8004960:	2302      	movs	r3, #2
 8004962:	647b      	str	r3, [r7, #68]	; 0x44
 8004964:	e06f      	b.n	8004a46 <_txe_byte_pool_create+0x10a>
    __asm__ volatile ("MRS  %0, PRIMASK ": "=r" (posture));
 8004966:	f3ef 8310 	mrs	r3, PRIMASK
 800496a:	62fb      	str	r3, [r7, #44]	; 0x2c
    return(posture);
 800496c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
    int_posture = __get_interrupt_posture();
 800496e:	62bb      	str	r3, [r7, #40]	; 0x28
    __asm__ volatile ("CPSID i" : : : "memory");
 8004970:	b672      	cpsid	i
    return(int_posture);
 8004972:	6abb      	ldr	r3, [r7, #40]	; 0x28
    }
    else
    {

        /* Disable interrupts.  */
        TX_DISABLE
 8004974:	63bb      	str	r3, [r7, #56]	; 0x38

        /* Increment the preempt disable flag.  */
        _tx_thread_preempt_disable++;
 8004976:	4b3b      	ldr	r3, [pc, #236]	; (8004a64 <_txe_byte_pool_create+0x128>)
 8004978:	681b      	ldr	r3, [r3, #0]
 800497a:	3301      	adds	r3, #1
 800497c:	4a39      	ldr	r2, [pc, #228]	; (8004a64 <_txe_byte_pool_create+0x128>)
 800497e:	6013      	str	r3, [r2, #0]
 8004980:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004982:	633b      	str	r3, [r7, #48]	; 0x30
    __asm__ volatile ("MSR  PRIMASK,%0": : "r" (int_posture): "memory");
 8004984:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004986:	f383 8810 	msr	PRIMASK, r3
}
 800498a:	bf00      	nop

        /* Restore interrupts.  */
        TX_RESTORE

        /* Next see if it is already in the created list.  */
        next_pool =   _tx_byte_pool_created_ptr;
 800498c:	4b36      	ldr	r3, [pc, #216]	; (8004a68 <_txe_byte_pool_create+0x12c>)
 800498e:	681b      	ldr	r3, [r3, #0]
 8004990:	63fb      	str	r3, [r7, #60]	; 0x3c
        for (i = ((ULONG) 0); i < _tx_byte_pool_created_count; i++)
 8004992:	2300      	movs	r3, #0
 8004994:	643b      	str	r3, [r7, #64]	; 0x40
 8004996:	e009      	b.n	80049ac <_txe_byte_pool_create+0x70>
        {

            /* Determine if this byte pool matches the pool in the list.  */
            if (pool_ptr == next_pool)
 8004998:	68fa      	ldr	r2, [r7, #12]
 800499a:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800499c:	429a      	cmp	r2, r3
 800499e:	d00b      	beq.n	80049b8 <_txe_byte_pool_create+0x7c>
            }
            else
            {

                /* Move to the next pool.  */
                next_pool =  next_pool -> tx_byte_pool_created_next;
 80049a0:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80049a2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80049a4:	63fb      	str	r3, [r7, #60]	; 0x3c
        for (i = ((ULONG) 0); i < _tx_byte_pool_created_count; i++)
 80049a6:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80049a8:	3301      	adds	r3, #1
 80049aa:	643b      	str	r3, [r7, #64]	; 0x40
 80049ac:	4b2f      	ldr	r3, [pc, #188]	; (8004a6c <_txe_byte_pool_create+0x130>)
 80049ae:	681b      	ldr	r3, [r3, #0]
 80049b0:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 80049b2:	429a      	cmp	r2, r3
 80049b4:	d3f0      	bcc.n	8004998 <_txe_byte_pool_create+0x5c>
 80049b6:	e000      	b.n	80049ba <_txe_byte_pool_create+0x7e>
                break;
 80049b8:	bf00      	nop
    __asm__ volatile ("MRS  %0, PRIMASK ": "=r" (posture));
 80049ba:	f3ef 8310 	mrs	r3, PRIMASK
 80049be:	623b      	str	r3, [r7, #32]
    return(posture);
 80049c0:	6a3b      	ldr	r3, [r7, #32]
    int_posture = __get_interrupt_posture();
 80049c2:	61fb      	str	r3, [r7, #28]
    __asm__ volatile ("CPSID i" : : : "memory");
 80049c4:	b672      	cpsid	i
    return(int_posture);
 80049c6:	69fb      	ldr	r3, [r7, #28]
            }
        }

        /* Disable interrupts.  */
        TX_DISABLE
 80049c8:	63bb      	str	r3, [r7, #56]	; 0x38

        /* Decrement the preempt disable flag.  */
        _tx_thread_preempt_disable--;
 80049ca:	4b26      	ldr	r3, [pc, #152]	; (8004a64 <_txe_byte_pool_create+0x128>)
 80049cc:	681b      	ldr	r3, [r3, #0]
 80049ce:	3b01      	subs	r3, #1
 80049d0:	4a24      	ldr	r2, [pc, #144]	; (8004a64 <_txe_byte_pool_create+0x128>)
 80049d2:	6013      	str	r3, [r2, #0]
 80049d4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80049d6:	627b      	str	r3, [r7, #36]	; 0x24
    __asm__ volatile ("MSR  PRIMASK,%0": : "r" (int_posture): "memory");
 80049d8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80049da:	f383 8810 	msr	PRIMASK, r3
}
 80049de:	bf00      	nop

        /* Restore interrupts.  */
        TX_RESTORE

        /* Check for preemption.  */
        _tx_thread_system_preempt_check();
 80049e0:	f7ff f9da 	bl	8003d98 <_tx_thread_system_preempt_check>

        /* At this point, check to see if there is a duplicate pool.  */
        if (pool_ptr == next_pool)
 80049e4:	68fa      	ldr	r2, [r7, #12]
 80049e6:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80049e8:	429a      	cmp	r2, r3
 80049ea:	d102      	bne.n	80049f2 <_txe_byte_pool_create+0xb6>
        {

            /* Pool is already created, return appropriate error code.  */
            status =  TX_POOL_ERROR;
 80049ec:	2302      	movs	r3, #2
 80049ee:	647b      	str	r3, [r7, #68]	; 0x44
 80049f0:	e029      	b.n	8004a46 <_txe_byte_pool_create+0x10a>
        }

        /* Check for an invalid starting address.  */
        else if (pool_start == TX_NULL)
 80049f2:	687b      	ldr	r3, [r7, #4]
 80049f4:	2b00      	cmp	r3, #0
 80049f6:	d102      	bne.n	80049fe <_txe_byte_pool_create+0xc2>
        {

            /* Null starting address pointer, return appropriate error.  */
            status =  TX_PTR_ERROR;
 80049f8:	2303      	movs	r3, #3
 80049fa:	647b      	str	r3, [r7, #68]	; 0x44
 80049fc:	e023      	b.n	8004a46 <_txe_byte_pool_create+0x10a>
        }

        /* Check for invalid pool size.  */
        else if (pool_size < TX_BYTE_POOL_MIN)
 80049fe:	683b      	ldr	r3, [r7, #0]
 8004a00:	2b63      	cmp	r3, #99	; 0x63
 8004a02:	d802      	bhi.n	8004a0a <_txe_byte_pool_create+0xce>
        {

            /* Pool not big enough, return appropriate error.  */
            status =  TX_SIZE_ERROR;
 8004a04:	2305      	movs	r3, #5
 8004a06:	647b      	str	r3, [r7, #68]	; 0x44
 8004a08:	e01d      	b.n	8004a46 <_txe_byte_pool_create+0x10a>
        {

#ifndef TX_TIMER_PROCESS_IN_ISR

            /* Pickup thread pointer.  */
            TX_THREAD_GET_CURRENT(thread_ptr)
 8004a0a:	4b19      	ldr	r3, [pc, #100]	; (8004a70 <_txe_byte_pool_create+0x134>)
 8004a0c:	681b      	ldr	r3, [r3, #0]
 8004a0e:	637b      	str	r3, [r7, #52]	; 0x34

            /* Check for invalid caller of this function.  First check for a calling thread.  */
            if (thread_ptr == &_tx_timer_thread)
 8004a10:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8004a12:	4a18      	ldr	r2, [pc, #96]	; (8004a74 <_txe_byte_pool_create+0x138>)
 8004a14:	4293      	cmp	r3, r2
 8004a16:	d101      	bne.n	8004a1c <_txe_byte_pool_create+0xe0>
            {

                /* Invalid caller of this function, return appropriate error code.  */
                status =  TX_CALLER_ERROR;
 8004a18:	2313      	movs	r3, #19
 8004a1a:	647b      	str	r3, [r7, #68]	; 0x44
    __asm__ volatile (" MRS  %0,IPSR ": "=r" (ipsr_value) );
 8004a1c:	f3ef 8305 	mrs	r3, IPSR
 8004a20:	61bb      	str	r3, [r7, #24]
    return(ipsr_value);
 8004a22:	69ba      	ldr	r2, [r7, #24]
            }
#endif

            /* Check for interrupt call.  */
            if (TX_THREAD_GET_SYSTEM_STATE() != ((ULONG) 0))
 8004a24:	4b14      	ldr	r3, [pc, #80]	; (8004a78 <_txe_byte_pool_create+0x13c>)
 8004a26:	681b      	ldr	r3, [r3, #0]
 8004a28:	4313      	orrs	r3, r2
 8004a2a:	2b00      	cmp	r3, #0
 8004a2c:	d00b      	beq.n	8004a46 <_txe_byte_pool_create+0x10a>
    __asm__ volatile (" MRS  %0,IPSR ": "=r" (ipsr_value) );
 8004a2e:	f3ef 8305 	mrs	r3, IPSR
 8004a32:	617b      	str	r3, [r7, #20]
    return(ipsr_value);
 8004a34:	697a      	ldr	r2, [r7, #20]
            {

                /* Now, make sure the call is from an interrupt and not initialization.  */
                if (TX_THREAD_GET_SYSTEM_STATE() < TX_INITIALIZE_IN_PROGRESS)
 8004a36:	4b10      	ldr	r3, [pc, #64]	; (8004a78 <_txe_byte_pool_create+0x13c>)
 8004a38:	681b      	ldr	r3, [r3, #0]
 8004a3a:	4313      	orrs	r3, r2
 8004a3c:	f1b3 3ff0 	cmp.w	r3, #4042322160	; 0xf0f0f0f0
 8004a40:	d201      	bcs.n	8004a46 <_txe_byte_pool_create+0x10a>
                {

                    /* Invalid caller of this function, return appropriate error code.  */
                    status =  TX_CALLER_ERROR;
 8004a42:	2313      	movs	r3, #19
 8004a44:	647b      	str	r3, [r7, #68]	; 0x44
            }
        }
    }

    /* Determine if everything is okay.  */
    if (status == TX_SUCCESS)
 8004a46:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8004a48:	2b00      	cmp	r3, #0
 8004a4a:	d106      	bne.n	8004a5a <_txe_byte_pool_create+0x11e>
    {

        /* Call actual byte pool create function.  */
        status =  _tx_byte_pool_create(pool_ptr, name_ptr, pool_start, pool_size);
 8004a4c:	683b      	ldr	r3, [r7, #0]
 8004a4e:	687a      	ldr	r2, [r7, #4]
 8004a50:	68b9      	ldr	r1, [r7, #8]
 8004a52:	68f8      	ldr	r0, [r7, #12]
 8004a54:	f7fe fb7e 	bl	8003154 <_tx_byte_pool_create>
 8004a58:	6478      	str	r0, [r7, #68]	; 0x44
    }

    /* Return completion status.  */
    return(status);
 8004a5a:	6c7b      	ldr	r3, [r7, #68]	; 0x44
}
 8004a5c:	4618      	mov	r0, r3
 8004a5e:	3748      	adds	r7, #72	; 0x48
 8004a60:	46bd      	mov	sp, r7
 8004a62:	bd80      	pop	{r7, pc}
 8004a64:	20007d04 	.word	0x20007d04
 8004a68:	20007bd4 	.word	0x20007bd4
 8004a6c:	20007bd8 	.word	0x20007bd8
 8004a70:	20007be4 	.word	0x20007be4
 8004a74:	20007db4 	.word	0x20007db4
 8004a78:	2000000c 	.word	0x2000000c

08004a7c <_txe_byte_release>:
/*  09-30-2020     Yuxin Zhou               Modified comment(s),          */
/*                                            resulting in version 6.1    */
/*                                                                        */
/**************************************************************************/
UINT  _txe_byte_release(VOID *memory_ptr)
{
 8004a7c:	b580      	push	{r7, lr}
 8004a7e:	b086      	sub	sp, #24
 8004a80:	af00      	add	r7, sp, #0
 8004a82:	6078      	str	r0, [r7, #4]
TX_THREAD       *thread_ptr;
#endif


    /* Default status to success.  */
    status =  TX_SUCCESS;
 8004a84:	2300      	movs	r3, #0
 8004a86:	617b      	str	r3, [r7, #20]

    /* First check the supplied memory pointer.  */
    if (memory_ptr == TX_NULL)
 8004a88:	687b      	ldr	r3, [r7, #4]
 8004a8a:	2b00      	cmp	r3, #0
 8004a8c:	d102      	bne.n	8004a94 <_txe_byte_release+0x18>
    {

        /* The byte memory pointer is invalid, return appropriate status.  */
        status =  TX_PTR_ERROR;
 8004a8e:	2303      	movs	r3, #3
 8004a90:	617b      	str	r3, [r7, #20]
 8004a92:	e01d      	b.n	8004ad0 <_txe_byte_release+0x54>
    {

#ifndef TX_TIMER_PROCESS_IN_ISR

        /* Pickup thread pointer.  */
        TX_THREAD_GET_CURRENT(thread_ptr)
 8004a94:	4b14      	ldr	r3, [pc, #80]	; (8004ae8 <_txe_byte_release+0x6c>)
 8004a96:	681b      	ldr	r3, [r3, #0]
 8004a98:	613b      	str	r3, [r7, #16]

        /* Check for invalid caller of this function.  First check for a calling thread.  */
        if (thread_ptr == &_tx_timer_thread)
 8004a9a:	693b      	ldr	r3, [r7, #16]
 8004a9c:	4a13      	ldr	r2, [pc, #76]	; (8004aec <_txe_byte_release+0x70>)
 8004a9e:	4293      	cmp	r3, r2
 8004aa0:	d101      	bne.n	8004aa6 <_txe_byte_release+0x2a>
        {

            /* Invalid caller of this function, return appropriate error code.  */
            status =  TX_CALLER_ERROR;
 8004aa2:	2313      	movs	r3, #19
 8004aa4:	617b      	str	r3, [r7, #20]
    __asm__ volatile (" MRS  %0,IPSR ": "=r" (ipsr_value) );
 8004aa6:	f3ef 8305 	mrs	r3, IPSR
 8004aaa:	60fb      	str	r3, [r7, #12]
    return(ipsr_value);
 8004aac:	68fa      	ldr	r2, [r7, #12]
        }
#endif

        /* Check for interrupt call.  */
        if (TX_THREAD_GET_SYSTEM_STATE() != ((ULONG) 0))
 8004aae:	4b10      	ldr	r3, [pc, #64]	; (8004af0 <_txe_byte_release+0x74>)
 8004ab0:	681b      	ldr	r3, [r3, #0]
 8004ab2:	4313      	orrs	r3, r2
 8004ab4:	2b00      	cmp	r3, #0
 8004ab6:	d00b      	beq.n	8004ad0 <_txe_byte_release+0x54>
    __asm__ volatile (" MRS  %0,IPSR ": "=r" (ipsr_value) );
 8004ab8:	f3ef 8305 	mrs	r3, IPSR
 8004abc:	60bb      	str	r3, [r7, #8]
    return(ipsr_value);
 8004abe:	68ba      	ldr	r2, [r7, #8]
        {

            /* Now, make sure the call is from an interrupt and not initialization.  */
            if (TX_THREAD_GET_SYSTEM_STATE() < TX_INITIALIZE_IN_PROGRESS)
 8004ac0:	4b0b      	ldr	r3, [pc, #44]	; (8004af0 <_txe_byte_release+0x74>)
 8004ac2:	681b      	ldr	r3, [r3, #0]
 8004ac4:	4313      	orrs	r3, r2
 8004ac6:	f1b3 3ff0 	cmp.w	r3, #4042322160	; 0xf0f0f0f0
 8004aca:	d201      	bcs.n	8004ad0 <_txe_byte_release+0x54>
            {

                /* Invalid caller of this function, return appropriate error code.  */
                status =  TX_CALLER_ERROR;
 8004acc:	2313      	movs	r3, #19
 8004ace:	617b      	str	r3, [r7, #20]
            }
        }
    }

    /* Determine if everything is okay.  */
    if (status == TX_SUCCESS)
 8004ad0:	697b      	ldr	r3, [r7, #20]
 8004ad2:	2b00      	cmp	r3, #0
 8004ad4:	d103      	bne.n	8004ade <_txe_byte_release+0x62>
    {

        /* Call actual byte release function.  */
        status =  _tx_byte_release(memory_ptr);
 8004ad6:	6878      	ldr	r0, [r7, #4]
 8004ad8:	f7fe fce0 	bl	800349c <_tx_byte_release>
 8004adc:	6178      	str	r0, [r7, #20]
    }

    /* Return completion status.  */
    return(status);
 8004ade:	697b      	ldr	r3, [r7, #20]
}
 8004ae0:	4618      	mov	r0, r3
 8004ae2:	3718      	adds	r7, #24
 8004ae4:	46bd      	mov	sp, r7
 8004ae6:	bd80      	pop	{r7, pc}
 8004ae8:	20007be4 	.word	0x20007be4
 8004aec:	20007db4 	.word	0x20007db4
 8004af0:	2000000c 	.word	0x2000000c

08004af4 <_txe_thread_create>:
UINT    _txe_thread_create(TX_THREAD *thread_ptr, CHAR *name_ptr,
                VOID (*entry_function)(ULONG id), ULONG entry_input,
                VOID *stack_start, ULONG stack_size,
                UINT priority, UINT preempt_threshold,
                ULONG time_slice, UINT auto_start, UINT thread_control_block_size)
{
 8004af4:	b580      	push	{r7, lr}
 8004af6:	b09a      	sub	sp, #104	; 0x68
 8004af8:	af06      	add	r7, sp, #24
 8004afa:	60f8      	str	r0, [r7, #12]
 8004afc:	60b9      	str	r1, [r7, #8]
 8004afe:	607a      	str	r2, [r7, #4]
 8004b00:	603b      	str	r3, [r7, #0]
TX_THREAD       *current_thread;
#endif


    /* Default status to success.  */
    status =  TX_SUCCESS;
 8004b02:	2300      	movs	r3, #0
 8004b04:	64fb      	str	r3, [r7, #76]	; 0x4c

    /* Check for an invalid thread pointer.  */
    if (thread_ptr == TX_NULL)
 8004b06:	68fb      	ldr	r3, [r7, #12]
 8004b08:	2b00      	cmp	r3, #0
 8004b0a:	d102      	bne.n	8004b12 <_txe_thread_create+0x1e>
    {

        /* Thread pointer is invalid, return appropriate error code.  */
        status =  TX_THREAD_ERROR;
 8004b0c:	230e      	movs	r3, #14
 8004b0e:	64fb      	str	r3, [r7, #76]	; 0x4c
 8004b10:	e0bb      	b.n	8004c8a <_txe_thread_create+0x196>
    }

    /* Now check for invalid thread control block size.  */
    else if (thread_control_block_size != (sizeof(TX_THREAD)))
 8004b12:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8004b14:	2bb4      	cmp	r3, #180	; 0xb4
 8004b16:	d002      	beq.n	8004b1e <_txe_thread_create+0x2a>
    {

        /* Thread pointer is invalid, return appropriate error code.  */
        status =  TX_THREAD_ERROR;
 8004b18:	230e      	movs	r3, #14
 8004b1a:	64fb      	str	r3, [r7, #76]	; 0x4c
 8004b1c:	e0b5      	b.n	8004c8a <_txe_thread_create+0x196>
    __asm__ volatile ("MRS  %0, PRIMASK ": "=r" (posture));
 8004b1e:	f3ef 8310 	mrs	r3, PRIMASK
 8004b22:	62bb      	str	r3, [r7, #40]	; 0x28
    return(posture);
 8004b24:	6abb      	ldr	r3, [r7, #40]	; 0x28
    int_posture = __get_interrupt_posture();
 8004b26:	627b      	str	r3, [r7, #36]	; 0x24
    __asm__ volatile ("CPSID i" : : : "memory");
 8004b28:	b672      	cpsid	i
    return(int_posture);
 8004b2a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
    }
    else
    {

        /* Disable interrupts.  */
        TX_DISABLE
 8004b2c:	63fb      	str	r3, [r7, #60]	; 0x3c

        /* Increment the preempt disable flag.  */
        _tx_thread_preempt_disable++;
 8004b2e:	4b64      	ldr	r3, [pc, #400]	; (8004cc0 <_txe_thread_create+0x1cc>)
 8004b30:	681b      	ldr	r3, [r3, #0]
 8004b32:	3301      	adds	r3, #1
 8004b34:	4a62      	ldr	r2, [pc, #392]	; (8004cc0 <_txe_thread_create+0x1cc>)
 8004b36:	6013      	str	r3, [r2, #0]
 8004b38:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8004b3a:	62fb      	str	r3, [r7, #44]	; 0x2c
    __asm__ volatile ("MSR  PRIMASK,%0": : "r" (int_posture): "memory");
 8004b3c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004b3e:	f383 8810 	msr	PRIMASK, r3
}
 8004b42:	bf00      	nop

        /* Restore interrupts.  */
        TX_RESTORE

        /* Next see if it is already in the created list.  */
        break_flag =   TX_FALSE;
 8004b44:	2300      	movs	r3, #0
 8004b46:	64bb      	str	r3, [r7, #72]	; 0x48
        next_thread =  _tx_thread_created_ptr;
 8004b48:	4b5e      	ldr	r3, [pc, #376]	; (8004cc4 <_txe_thread_create+0x1d0>)
 8004b4a:	681b      	ldr	r3, [r3, #0]
 8004b4c:	643b      	str	r3, [r7, #64]	; 0x40
        work_ptr =     TX_VOID_TO_UCHAR_POINTER_CONVERT(stack_start);
 8004b4e:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8004b50:	63bb      	str	r3, [r7, #56]	; 0x38
        work_ptr =     TX_UCHAR_POINTER_ADD(work_ptr, (stack_size - ((ULONG) 1)));
 8004b52:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8004b54:	3b01      	subs	r3, #1
 8004b56:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8004b58:	4413      	add	r3, r2
 8004b5a:	63bb      	str	r3, [r7, #56]	; 0x38
        stack_end =    TX_UCHAR_TO_VOID_POINTER_CONVERT(work_ptr);
 8004b5c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004b5e:	637b      	str	r3, [r7, #52]	; 0x34
        for (i = ((ULONG) 0); i < _tx_thread_created_count; i++)
 8004b60:	2300      	movs	r3, #0
 8004b62:	647b      	str	r3, [r7, #68]	; 0x44
 8004b64:	e02b      	b.n	8004bbe <_txe_thread_create+0xca>
        {

            /* Determine if this thread matches the thread in the list.  */
            if (thread_ptr == next_thread)
 8004b66:	68fa      	ldr	r2, [r7, #12]
 8004b68:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8004b6a:	429a      	cmp	r2, r3
 8004b6c:	d101      	bne.n	8004b72 <_txe_thread_create+0x7e>
            {

                /* Set the break flag.  */
                break_flag =  TX_TRUE;
 8004b6e:	2301      	movs	r3, #1
 8004b70:	64bb      	str	r3, [r7, #72]	; 0x48
            }

            /* Determine if we need to break the loop.  */
            if (break_flag == TX_TRUE)
 8004b72:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8004b74:	2b01      	cmp	r3, #1
 8004b76:	d028      	beq.n	8004bca <_txe_thread_create+0xd6>
                /* Yes, break out of the loop.  */
                break;
            }

            /* Check the stack pointer to see if it overlaps with this thread's stack.  */
            if (stack_start >= next_thread -> tx_thread_stack_start)
 8004b78:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8004b7a:	68db      	ldr	r3, [r3, #12]
 8004b7c:	6dba      	ldr	r2, [r7, #88]	; 0x58
 8004b7e:	429a      	cmp	r2, r3
 8004b80:	d308      	bcc.n	8004b94 <_txe_thread_create+0xa0>
            {

                if (stack_start < next_thread -> tx_thread_stack_end)
 8004b82:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8004b84:	691b      	ldr	r3, [r3, #16]
 8004b86:	6dba      	ldr	r2, [r7, #88]	; 0x58
 8004b88:	429a      	cmp	r2, r3
 8004b8a:	d203      	bcs.n	8004b94 <_txe_thread_create+0xa0>
                {

                    /* This stack overlaps with an existing thread, clear the stack pointer to
                       force a stack error below.  */
                    stack_start =  TX_NULL;
 8004b8c:	2300      	movs	r3, #0
 8004b8e:	65bb      	str	r3, [r7, #88]	; 0x58

                    /* Set the break flag.  */
                    break_flag =  TX_TRUE;
 8004b90:	2301      	movs	r3, #1
 8004b92:	64bb      	str	r3, [r7, #72]	; 0x48
                }
            }

            /* Check the end of the stack to see if it is inside this thread's stack area as well.  */
            if (stack_end >= next_thread -> tx_thread_stack_start)
 8004b94:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8004b96:	68db      	ldr	r3, [r3, #12]
 8004b98:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8004b9a:	429a      	cmp	r2, r3
 8004b9c:	d308      	bcc.n	8004bb0 <_txe_thread_create+0xbc>
            {

                if (stack_end < next_thread -> tx_thread_stack_end)
 8004b9e:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8004ba0:	691b      	ldr	r3, [r3, #16]
 8004ba2:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8004ba4:	429a      	cmp	r2, r3
 8004ba6:	d203      	bcs.n	8004bb0 <_txe_thread_create+0xbc>
                {

                    /* This stack overlaps with an existing thread, clear the stack pointer to
                       force a stack error below.  */
                    stack_start =  TX_NULL;
 8004ba8:	2300      	movs	r3, #0
 8004baa:	65bb      	str	r3, [r7, #88]	; 0x58

                    /* Set the break flag.  */
                    break_flag =  TX_TRUE;
 8004bac:	2301      	movs	r3, #1
 8004bae:	64bb      	str	r3, [r7, #72]	; 0x48
                }
            }

            /* Move to the next thread.  */
            next_thread =  next_thread -> tx_thread_created_next;
 8004bb0:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8004bb2:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004bb6:	643b      	str	r3, [r7, #64]	; 0x40
        for (i = ((ULONG) 0); i < _tx_thread_created_count; i++)
 8004bb8:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8004bba:	3301      	adds	r3, #1
 8004bbc:	647b      	str	r3, [r7, #68]	; 0x44
 8004bbe:	4b42      	ldr	r3, [pc, #264]	; (8004cc8 <_txe_thread_create+0x1d4>)
 8004bc0:	681b      	ldr	r3, [r3, #0]
 8004bc2:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8004bc4:	429a      	cmp	r2, r3
 8004bc6:	d3ce      	bcc.n	8004b66 <_txe_thread_create+0x72>
 8004bc8:	e000      	b.n	8004bcc <_txe_thread_create+0xd8>
                break;
 8004bca:	bf00      	nop
    __asm__ volatile ("MRS  %0, PRIMASK ": "=r" (posture));
 8004bcc:	f3ef 8310 	mrs	r3, PRIMASK
 8004bd0:	61fb      	str	r3, [r7, #28]
    return(posture);
 8004bd2:	69fb      	ldr	r3, [r7, #28]
    int_posture = __get_interrupt_posture();
 8004bd4:	61bb      	str	r3, [r7, #24]
    __asm__ volatile ("CPSID i" : : : "memory");
 8004bd6:	b672      	cpsid	i
    return(int_posture);
 8004bd8:	69bb      	ldr	r3, [r7, #24]
        }

        /* Disable interrupts.  */
        TX_DISABLE
 8004bda:	63fb      	str	r3, [r7, #60]	; 0x3c

        /* Decrement the preempt disable flag.  */
        _tx_thread_preempt_disable--;
 8004bdc:	4b38      	ldr	r3, [pc, #224]	; (8004cc0 <_txe_thread_create+0x1cc>)
 8004bde:	681b      	ldr	r3, [r3, #0]
 8004be0:	3b01      	subs	r3, #1
 8004be2:	4a37      	ldr	r2, [pc, #220]	; (8004cc0 <_txe_thread_create+0x1cc>)
 8004be4:	6013      	str	r3, [r2, #0]
 8004be6:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8004be8:	623b      	str	r3, [r7, #32]
    __asm__ volatile ("MSR  PRIMASK,%0": : "r" (int_posture): "memory");
 8004bea:	6a3b      	ldr	r3, [r7, #32]
 8004bec:	f383 8810 	msr	PRIMASK, r3
}
 8004bf0:	bf00      	nop

        /* Restore interrupts.  */
        TX_RESTORE

        /* Check for preemption.  */
        _tx_thread_system_preempt_check();
 8004bf2:	f7ff f8d1 	bl	8003d98 <_tx_thread_system_preempt_check>

        /* At this point, check to see if there is a duplicate thread.  */
        if (thread_ptr == next_thread)
 8004bf6:	68fa      	ldr	r2, [r7, #12]
 8004bf8:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8004bfa:	429a      	cmp	r2, r3
 8004bfc:	d102      	bne.n	8004c04 <_txe_thread_create+0x110>
        {

            /* Thread is already created, return appropriate error code.  */
            status =  TX_THREAD_ERROR;
 8004bfe:	230e      	movs	r3, #14
 8004c00:	64fb      	str	r3, [r7, #76]	; 0x4c
 8004c02:	e042      	b.n	8004c8a <_txe_thread_create+0x196>
        }

        /* Check for invalid starting address of stack.  */
        else if (stack_start == TX_NULL)
 8004c04:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8004c06:	2b00      	cmp	r3, #0
 8004c08:	d102      	bne.n	8004c10 <_txe_thread_create+0x11c>
        {

            /* Invalid stack or entry point, return appropriate error code.  */
            status =  TX_PTR_ERROR;
 8004c0a:	2303      	movs	r3, #3
 8004c0c:	64fb      	str	r3, [r7, #76]	; 0x4c
 8004c0e:	e03c      	b.n	8004c8a <_txe_thread_create+0x196>
        }

        /* Check for invalid thread entry point.  */
        else if (entry_function == TX_NULL)
 8004c10:	687b      	ldr	r3, [r7, #4]
 8004c12:	2b00      	cmp	r3, #0
 8004c14:	d102      	bne.n	8004c1c <_txe_thread_create+0x128>
        {

            /* Invalid stack or entry point, return appropriate error code.  */
            status =  TX_PTR_ERROR;
 8004c16:	2303      	movs	r3, #3
 8004c18:	64fb      	str	r3, [r7, #76]	; 0x4c
 8004c1a:	e036      	b.n	8004c8a <_txe_thread_create+0x196>
        }

        /* Check the stack size.  */
        else if (stack_size < ((ULONG) TX_MINIMUM_STACK))
 8004c1c:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8004c1e:	2bc7      	cmp	r3, #199	; 0xc7
 8004c20:	d802      	bhi.n	8004c28 <_txe_thread_create+0x134>
        {

            /* Stack is not big enough, return appropriate error code.  */
            status =  TX_SIZE_ERROR;
 8004c22:	2305      	movs	r3, #5
 8004c24:	64fb      	str	r3, [r7, #76]	; 0x4c
 8004c26:	e030      	b.n	8004c8a <_txe_thread_create+0x196>
        }

        /* Check the priority specified.  */
        else if (priority >= ((UINT) TX_MAX_PRIORITIES))
 8004c28:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8004c2a:	2b3f      	cmp	r3, #63	; 0x3f
 8004c2c:	d902      	bls.n	8004c34 <_txe_thread_create+0x140>
        {

            /* Invalid priority selected, return appropriate error code.  */
            status =  TX_PRIORITY_ERROR;
 8004c2e:	230f      	movs	r3, #15
 8004c30:	64fb      	str	r3, [r7, #76]	; 0x4c
 8004c32:	e02a      	b.n	8004c8a <_txe_thread_create+0x196>
        }

        /* Check preemption threshold. */
        else if (preempt_threshold > priority)
 8004c34:	6e7a      	ldr	r2, [r7, #100]	; 0x64
 8004c36:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8004c38:	429a      	cmp	r2, r3
 8004c3a:	d902      	bls.n	8004c42 <_txe_thread_create+0x14e>
        {

            /* Invalid preempt threshold, return appropriate error code.  */
            status =  TX_THRESH_ERROR;
 8004c3c:	2318      	movs	r3, #24
 8004c3e:	64fb      	str	r3, [r7, #76]	; 0x4c
 8004c40:	e023      	b.n	8004c8a <_txe_thread_create+0x196>
        }

        /* Check the start selection.  */
        else if (auto_start > TX_AUTO_START)
 8004c42:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8004c44:	2b01      	cmp	r3, #1
 8004c46:	d902      	bls.n	8004c4e <_txe_thread_create+0x15a>
        {

            /* Invalid auto start selection, return appropriate error code.  */
            status =  TX_START_ERROR;
 8004c48:	2310      	movs	r3, #16
 8004c4a:	64fb      	str	r3, [r7, #76]	; 0x4c
 8004c4c:	e01d      	b.n	8004c8a <_txe_thread_create+0x196>
        {

#ifndef TX_TIMER_PROCESS_IN_ISR

            /* Pickup thread pointer.  */
            TX_THREAD_GET_CURRENT(current_thread)
 8004c4e:	4b1f      	ldr	r3, [pc, #124]	; (8004ccc <_txe_thread_create+0x1d8>)
 8004c50:	681b      	ldr	r3, [r3, #0]
 8004c52:	633b      	str	r3, [r7, #48]	; 0x30

            /* Check for invalid caller of this function.  First check for a calling thread.  */
            if (current_thread == &_tx_timer_thread)
 8004c54:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004c56:	4a1e      	ldr	r2, [pc, #120]	; (8004cd0 <_txe_thread_create+0x1dc>)
 8004c58:	4293      	cmp	r3, r2
 8004c5a:	d101      	bne.n	8004c60 <_txe_thread_create+0x16c>
            {

                /* Invalid caller of this function, return appropriate error code.  */
                status =  TX_CALLER_ERROR;
 8004c5c:	2313      	movs	r3, #19
 8004c5e:	64fb      	str	r3, [r7, #76]	; 0x4c
    __asm__ volatile (" MRS  %0,IPSR ": "=r" (ipsr_value) );
 8004c60:	f3ef 8305 	mrs	r3, IPSR
 8004c64:	617b      	str	r3, [r7, #20]
    return(ipsr_value);
 8004c66:	697a      	ldr	r2, [r7, #20]
            }
#endif

            /* Check for interrupt call.  */
            if (TX_THREAD_GET_SYSTEM_STATE() != ((ULONG) 0))
 8004c68:	4b1a      	ldr	r3, [pc, #104]	; (8004cd4 <_txe_thread_create+0x1e0>)
 8004c6a:	681b      	ldr	r3, [r3, #0]
 8004c6c:	4313      	orrs	r3, r2
 8004c6e:	2b00      	cmp	r3, #0
 8004c70:	d00b      	beq.n	8004c8a <_txe_thread_create+0x196>
    __asm__ volatile (" MRS  %0,IPSR ": "=r" (ipsr_value) );
 8004c72:	f3ef 8305 	mrs	r3, IPSR
 8004c76:	613b      	str	r3, [r7, #16]
    return(ipsr_value);
 8004c78:	693a      	ldr	r2, [r7, #16]
            {

                /* Now, make sure the call is from an interrupt and not initialization.  */
                if (TX_THREAD_GET_SYSTEM_STATE() < TX_INITIALIZE_IN_PROGRESS)
 8004c7a:	4b16      	ldr	r3, [pc, #88]	; (8004cd4 <_txe_thread_create+0x1e0>)
 8004c7c:	681b      	ldr	r3, [r3, #0]
 8004c7e:	4313      	orrs	r3, r2
 8004c80:	f1b3 3ff0 	cmp.w	r3, #4042322160	; 0xf0f0f0f0
 8004c84:	d201      	bcs.n	8004c8a <_txe_thread_create+0x196>
                {

                    /* Invalid caller of this function, return appropriate error code.  */
                    status =  TX_CALLER_ERROR;
 8004c86:	2313      	movs	r3, #19
 8004c88:	64fb      	str	r3, [r7, #76]	; 0x4c
            }
        }
    }

    /* Determine if everything is okay.  */
    if (status == TX_SUCCESS)
 8004c8a:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8004c8c:	2b00      	cmp	r3, #0
 8004c8e:	d112      	bne.n	8004cb6 <_txe_thread_create+0x1c2>
    {

        /* Call actual thread create function.  */
        status =  _tx_thread_create(thread_ptr, name_ptr, entry_function, entry_input,
 8004c90:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8004c92:	9305      	str	r3, [sp, #20]
 8004c94:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8004c96:	9304      	str	r3, [sp, #16]
 8004c98:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8004c9a:	9303      	str	r3, [sp, #12]
 8004c9c:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8004c9e:	9302      	str	r3, [sp, #8]
 8004ca0:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8004ca2:	9301      	str	r3, [sp, #4]
 8004ca4:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8004ca6:	9300      	str	r3, [sp, #0]
 8004ca8:	683b      	ldr	r3, [r7, #0]
 8004caa:	687a      	ldr	r2, [r7, #4]
 8004cac:	68b9      	ldr	r1, [r7, #8]
 8004cae:	68f8      	ldr	r0, [r7, #12]
 8004cb0:	f7fe fda0 	bl	80037f4 <_tx_thread_create>
 8004cb4:	64f8      	str	r0, [r7, #76]	; 0x4c
                        stack_start, stack_size, priority, preempt_threshold,
                        time_slice, auto_start);
    }

    /* Return completion status.  */
    return(status);
 8004cb6:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
}
 8004cb8:	4618      	mov	r0, r3
 8004cba:	3750      	adds	r7, #80	; 0x50
 8004cbc:	46bd      	mov	sp, r7
 8004cbe:	bd80      	pop	{r7, pc}
 8004cc0:	20007d04 	.word	0x20007d04
 8004cc4:	20007bec 	.word	0x20007bec
 8004cc8:	20007bf0 	.word	0x20007bf0
 8004ccc:	20007be4 	.word	0x20007be4
 8004cd0:	20007db4 	.word	0x20007db4
 8004cd4:	2000000c 	.word	0x2000000c

08004cd8 <_txe_thread_resume>:
/*  09-30-2020     Yuxin Zhou               Modified comment(s),          */
/*                                            resulting in version 6.1    */
/*                                                                        */
/**************************************************************************/
UINT  _txe_thread_resume(TX_THREAD *thread_ptr)
{
 8004cd8:	b580      	push	{r7, lr}
 8004cda:	b084      	sub	sp, #16
 8004cdc:	af00      	add	r7, sp, #0
 8004cde:	6078      	str	r0, [r7, #4]

UINT    status;


    /* Check for an invalid thread pointer.  */
    if (thread_ptr == TX_NULL)
 8004ce0:	687b      	ldr	r3, [r7, #4]
 8004ce2:	2b00      	cmp	r3, #0
 8004ce4:	d102      	bne.n	8004cec <_txe_thread_resume+0x14>
    {

        /* Thread pointer is invalid, return appropriate error code.  */
        status =  TX_THREAD_ERROR;
 8004ce6:	230e      	movs	r3, #14
 8004ce8:	60fb      	str	r3, [r7, #12]
 8004cea:	e00b      	b.n	8004d04 <_txe_thread_resume+0x2c>
    }

    /* Now check for invalid thread ID.  */
    else if (thread_ptr -> tx_thread_id != TX_THREAD_ID)
 8004cec:	687b      	ldr	r3, [r7, #4]
 8004cee:	681b      	ldr	r3, [r3, #0]
 8004cf0:	4a07      	ldr	r2, [pc, #28]	; (8004d10 <_txe_thread_resume+0x38>)
 8004cf2:	4293      	cmp	r3, r2
 8004cf4:	d002      	beq.n	8004cfc <_txe_thread_resume+0x24>
    {

        /* Thread pointer is invalid, return appropriate error code.  */
        status =  TX_THREAD_ERROR;
 8004cf6:	230e      	movs	r3, #14
 8004cf8:	60fb      	str	r3, [r7, #12]
 8004cfa:	e003      	b.n	8004d04 <_txe_thread_resume+0x2c>
    }
    else
    {

        /* Call actual thread resume function.  */
        status =  _tx_thread_resume(thread_ptr);
 8004cfc:	6878      	ldr	r0, [r7, #4]
 8004cfe:	f7fe feaf 	bl	8003a60 <_tx_thread_resume>
 8004d02:	60f8      	str	r0, [r7, #12]
    }

    /* Return completion status.  */
    return(status);
 8004d04:	68fb      	ldr	r3, [r7, #12]
}
 8004d06:	4618      	mov	r0, r3
 8004d08:	3710      	adds	r7, #16
 8004d0a:	46bd      	mov	sp, r7
 8004d0c:	bd80      	pop	{r7, pc}
 8004d0e:	bf00      	nop
 8004d10:	54485244 	.word	0x54485244

08004d14 <_txe_thread_suspend>:
/*  09-30-2020     Yuxin Zhou               Modified comment(s),          */
/*                                            resulting in version 6.1    */
/*                                                                        */
/**************************************************************************/
UINT  _txe_thread_suspend(TX_THREAD *thread_ptr)
{
 8004d14:	b580      	push	{r7, lr}
 8004d16:	b084      	sub	sp, #16
 8004d18:	af00      	add	r7, sp, #0
 8004d1a:	6078      	str	r0, [r7, #4]

UINT    status;


    /* Check for an invalid thread pointer.  */
    if (thread_ptr == TX_NULL)
 8004d1c:	687b      	ldr	r3, [r7, #4]
 8004d1e:	2b00      	cmp	r3, #0
 8004d20:	d102      	bne.n	8004d28 <_txe_thread_suspend+0x14>
    {

        /* Thread pointer is invalid, return appropriate error code.  */
        status =  TX_THREAD_ERROR;
 8004d22:	230e      	movs	r3, #14
 8004d24:	60fb      	str	r3, [r7, #12]
 8004d26:	e00b      	b.n	8004d40 <_txe_thread_suspend+0x2c>
    }

    /* Now check for invalid thread ID.  */
    else if (thread_ptr -> tx_thread_id != TX_THREAD_ID)
 8004d28:	687b      	ldr	r3, [r7, #4]
 8004d2a:	681b      	ldr	r3, [r3, #0]
 8004d2c:	4a07      	ldr	r2, [pc, #28]	; (8004d4c <_txe_thread_suspend+0x38>)
 8004d2e:	4293      	cmp	r3, r2
 8004d30:	d002      	beq.n	8004d38 <_txe_thread_suspend+0x24>
    {

        /* Thread pointer is invalid, return appropriate error code.  */
        status =  TX_THREAD_ERROR;
 8004d32:	230e      	movs	r3, #14
 8004d34:	60fb      	str	r3, [r7, #12]
 8004d36:	e003      	b.n	8004d40 <_txe_thread_suspend+0x2c>
    }
    else
    {

        /* Call actual thread suspend function.  */
        status =  _tx_thread_suspend(thread_ptr);
 8004d38:	6878      	ldr	r0, [r7, #4]
 8004d3a:	f7fe ffbd 	bl	8003cb8 <_tx_thread_suspend>
 8004d3e:	60f8      	str	r0, [r7, #12]
    }

    /* Return completion status.  */
    return(status);
 8004d40:	68fb      	ldr	r3, [r7, #12]
}
 8004d42:	4618      	mov	r0, r3
 8004d44:	3710      	adds	r7, #16
 8004d46:	46bd      	mov	sp, r7
 8004d48:	bd80      	pop	{r7, pc}
 8004d4a:	bf00      	nop
 8004d4c:	54485244 	.word	0x54485244

08004d50 <tx_low_power_enter>:
/*                                            compiler warning,           */
/*                                            resulting in version 6.1.6  */
/*                                                                        */
/**************************************************************************/
VOID  tx_low_power_enter(VOID)
{
 8004d50:	b480      	push	{r7}
 8004d52:	b085      	sub	sp, #20
 8004d54:	af00      	add	r7, sp, #0
    __asm__ volatile ("MRS  %0, PRIMASK ": "=r" (posture));
 8004d56:	f3ef 8310 	mrs	r3, PRIMASK
 8004d5a:	607b      	str	r3, [r7, #4]
    return(posture);
 8004d5c:	687b      	ldr	r3, [r7, #4]
    int_posture = __get_interrupt_posture();
 8004d5e:	603b      	str	r3, [r7, #0]
    __asm__ volatile ("CPSID i" : : : "memory");
 8004d60:	b672      	cpsid	i
    return(int_posture);
 8004d62:	683b      	ldr	r3, [r7, #0]
ULONG   tx_low_power_next_expiration;   /* The next timer experation (units of ThreadX timer ticks). */
ULONG   timers_active;
#endif

    /* Disable interrupts while we prepare for low power mode.  */
    TX_DISABLE
 8004d64:	60fb      	str	r3, [r7, #12]


    /* Set the flag indicating that low power has been entered. This 
       flag is checked in tx_low_power_exit to determine if the logic
       used to adjust the ThreadX time is required.  */
    tx_low_power_entered =  TX_TRUE;
 8004d66:	4b07      	ldr	r3, [pc, #28]	; (8004d84 <tx_low_power_enter+0x34>)
 8004d68:	2201      	movs	r2, #1
 8004d6a:	601a      	str	r2, [r3, #0]
 8004d6c:	68fb      	ldr	r3, [r7, #12]
 8004d6e:	60bb      	str	r3, [r7, #8]
    __asm__ volatile ("MSR  PRIMASK,%0": : "r" (int_posture): "memory");
 8004d70:	68bb      	ldr	r3, [r7, #8]
 8004d72:	f383 8810 	msr	PRIMASK, r3
}
 8004d76:	bf00      	nop
#ifdef TX_LOW_POWER_USER_ENTER
    TX_LOW_POWER_USER_ENTER;
#endif

    /* If the low power code returns, this routine returns to the tx_thread_schedule loop.  */
}
 8004d78:	bf00      	nop
 8004d7a:	3714      	adds	r7, #20
 8004d7c:	46bd      	mov	sp, r7
 8004d7e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004d82:	4770      	bx	lr
 8004d84:	20008278 	.word	0x20008278

08004d88 <tx_low_power_exit>:
/*                                                                        */
/*  03-02-2021     William E. Lamie         Initial Version 6.1.5         */
/*                                                                        */
/**************************************************************************/
VOID  tx_low_power_exit(VOID)
{
 8004d88:	b580      	push	{r7, lr}
 8004d8a:	b082      	sub	sp, #8
 8004d8c:	af00      	add	r7, sp, #0
/* How many ticks to adjust ThreadX timers after exiting low power mode. */
ULONG   tx_low_power_adjust_ticks;


    /* Determine if the interrupt occurred in low power mode.  */
    if (tx_low_power_entered)
 8004d8e:	4b09      	ldr	r3, [pc, #36]	; (8004db4 <tx_low_power_exit+0x2c>)
 8004d90:	681b      	ldr	r3, [r3, #0]
 8004d92:	2b00      	cmp	r3, #0
 8004d94:	d00a      	beq.n	8004dac <tx_low_power_exit+0x24>
    {
        /* Yes, low power mode was interrupted.   */

        /* Clear the low power entered flag.  */
        tx_low_power_entered =  TX_FALSE;
 8004d96:	4b07      	ldr	r3, [pc, #28]	; (8004db4 <tx_low_power_exit+0x2c>)
 8004d98:	2200      	movs	r2, #0
 8004d9a:	601a      	str	r2, [r3, #0]
#ifdef TX_LOW_POWER_USER_TIMER_ADJUST
        /* Call the user's low-power timer code to obtain the amount of time (in ticks)
           the system has been in low power mode. */
        tx_low_power_adjust_ticks = TX_LOW_POWER_USER_TIMER_ADJUST;
#else
        tx_low_power_adjust_ticks = (ULONG) 0;
 8004d9c:	2300      	movs	r3, #0
 8004d9e:	607b      	str	r3, [r7, #4]
#endif

        /* Determine if the ThreadX timer(s) needs incrementing.  */
        if (tx_low_power_adjust_ticks)
 8004da0:	687b      	ldr	r3, [r7, #4]
 8004da2:	2b00      	cmp	r3, #0
 8004da4:	d002      	beq.n	8004dac <tx_low_power_exit+0x24>
        {
            /* Yes, the ThreadX timer(s) must be incremented.  */
            tx_time_increment(tx_low_power_adjust_ticks);
 8004da6:	6878      	ldr	r0, [r7, #4]
 8004da8:	f000 f806 	bl	8004db8 <tx_time_increment>
        }
    }
}
 8004dac:	bf00      	nop
 8004dae:	3708      	adds	r7, #8
 8004db0:	46bd      	mov	sp, r7
 8004db2:	bd80      	pop	{r7, pc}
 8004db4:	20008278 	.word	0x20008278

08004db8 <tx_time_increment>:
/*                                                                        */
/*  03-02-2021     William E. Lamie         Initial Version 6.1.5         */
/*                                                                        */
/**************************************************************************/
VOID  tx_time_increment(ULONG time_increment)
{
 8004db8:	b580      	push	{r7, lr}
 8004dba:	b08a      	sub	sp, #40	; 0x28
 8004dbc:	af00      	add	r7, sp, #0
 8004dbe:	6078      	str	r0, [r7, #4]
TX_TIMER_INTERNAL           *next_timer;
TX_TIMER_INTERNAL           *temp_list_head;


    /* Determine if there is any time increment.  */
    if (time_increment == 0)
 8004dc0:	687b      	ldr	r3, [r7, #4]
 8004dc2:	2b00      	cmp	r3, #0
 8004dc4:	f000 809b 	beq.w	8004efe <tx_time_increment+0x146>
    __asm__ volatile ("MRS  %0, PRIMASK ": "=r" (posture));
 8004dc8:	f3ef 8310 	mrs	r3, PRIMASK
 8004dcc:	613b      	str	r3, [r7, #16]
    return(posture);
 8004dce:	693b      	ldr	r3, [r7, #16]
    int_posture = __get_interrupt_posture();
 8004dd0:	60fb      	str	r3, [r7, #12]
    __asm__ volatile ("CPSID i" : : : "memory");
 8004dd2:	b672      	cpsid	i
    return(int_posture);
 8004dd4:	68fb      	ldr	r3, [r7, #12]
        /* Nothing to do, just return.  */
        return;
    }

    /* Disable interrupts.  */
    TX_DISABLE
 8004dd6:	617b      	str	r3, [r7, #20]

    /* Adjust the system clock.  */
    _tx_timer_system_clock =  _tx_timer_system_clock + time_increment;
 8004dd8:	4b4b      	ldr	r3, [pc, #300]	; (8004f08 <tx_time_increment+0x150>)
 8004dda:	681a      	ldr	r2, [r3, #0]
 8004ddc:	687b      	ldr	r3, [r7, #4]
 8004dde:	4413      	add	r3, r2
 8004de0:	4a49      	ldr	r2, [pc, #292]	; (8004f08 <tx_time_increment+0x150>)
 8004de2:	6013      	str	r3, [r2, #0]

    /* Adjust the time slice variable.  */
    if (_tx_timer_time_slice)
 8004de4:	4b49      	ldr	r3, [pc, #292]	; (8004f0c <tx_time_increment+0x154>)
 8004de6:	681b      	ldr	r3, [r3, #0]
 8004de8:	2b00      	cmp	r3, #0
 8004dea:	d00e      	beq.n	8004e0a <tx_time_increment+0x52>
    {
        /* Decrement the time-slice variable.  */
        if (_tx_timer_time_slice > time_increment)
 8004dec:	4b47      	ldr	r3, [pc, #284]	; (8004f0c <tx_time_increment+0x154>)
 8004dee:	681b      	ldr	r3, [r3, #0]
 8004df0:	687a      	ldr	r2, [r7, #4]
 8004df2:	429a      	cmp	r2, r3
 8004df4:	d206      	bcs.n	8004e04 <tx_time_increment+0x4c>
        {
            _tx_timer_time_slice =  _tx_timer_time_slice - time_increment;
 8004df6:	4b45      	ldr	r3, [pc, #276]	; (8004f0c <tx_time_increment+0x154>)
 8004df8:	681a      	ldr	r2, [r3, #0]
 8004dfa:	687b      	ldr	r3, [r7, #4]
 8004dfc:	1ad3      	subs	r3, r2, r3
 8004dfe:	4a43      	ldr	r2, [pc, #268]	; (8004f0c <tx_time_increment+0x154>)
 8004e00:	6013      	str	r3, [r2, #0]
 8004e02:	e002      	b.n	8004e0a <tx_time_increment+0x52>
        }
        else
        {
            _tx_timer_time_slice =  1;
 8004e04:	4b41      	ldr	r3, [pc, #260]	; (8004f0c <tx_time_increment+0x154>)
 8004e06:	2201      	movs	r2, #1
 8004e08:	601a      	str	r2, [r3, #0]
        }
    }

    /* Calculate the proper place to position the timer.  */
    timer_list_head =  _tx_timer_current_ptr;
 8004e0a:	4b41      	ldr	r3, [pc, #260]	; (8004f10 <tx_time_increment+0x158>)
 8004e0c:	681b      	ldr	r3, [r3, #0]
 8004e0e:	623b      	str	r3, [r7, #32]

    /* Setup the temporary list pointer.  */
    temp_list_head =  TX_NULL;
 8004e10:	2300      	movs	r3, #0
 8004e12:	61bb      	str	r3, [r7, #24]

    /* Loop to pull all timers off the timer structure and put on the temporary list head.  */
    for (i = 0; i < TX_TIMER_ENTRIES; i++)
 8004e14:	2300      	movs	r3, #0
 8004e16:	627b      	str	r3, [r7, #36]	; 0x24
 8004e18:	e046      	b.n	8004ea8 <tx_time_increment+0xf0>
    {
        /* Determine if there is a timer list in this entry.  */
        if (*timer_list_head)
 8004e1a:	6a3b      	ldr	r3, [r7, #32]
 8004e1c:	681b      	ldr	r3, [r3, #0]
 8004e1e:	2b00      	cmp	r3, #0
 8004e20:	d034      	beq.n	8004e8c <tx_time_increment+0xd4>
        {
            /* Walk the list and update all the relative times to actual times.  */

            /* Setup the pointer to the expiration list.  */
            next_timer =  *timer_list_head;
 8004e22:	6a3b      	ldr	r3, [r7, #32]
 8004e24:	681b      	ldr	r3, [r3, #0]
 8004e26:	61fb      	str	r3, [r7, #28]

            /* Loop through the timers active for this relative time slot (determined by i).  */
            do
            {
                /* Determine if the remaining time is larger than the list.  */
                if (next_timer -> tx_timer_internal_remaining_ticks > TX_TIMER_ENTRIES)
 8004e28:	69fb      	ldr	r3, [r7, #28]
 8004e2a:	681b      	ldr	r3, [r3, #0]
 8004e2c:	2b20      	cmp	r3, #32
 8004e2e:	d908      	bls.n	8004e42 <tx_time_increment+0x8a>
                {
                    /* Calculate the actual expiration time.  */
                    next_timer -> tx_timer_internal_remaining_ticks =
                                    next_timer -> tx_timer_internal_remaining_ticks - (TX_TIMER_ENTRIES - i) + 1;
 8004e30:	69fb      	ldr	r3, [r7, #28]
 8004e32:	681a      	ldr	r2, [r3, #0]
 8004e34:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004e36:	4413      	add	r3, r2
 8004e38:	f1a3 021f 	sub.w	r2, r3, #31
                    next_timer -> tx_timer_internal_remaining_ticks =
 8004e3c:	69fb      	ldr	r3, [r7, #28]
 8004e3e:	601a      	str	r2, [r3, #0]
 8004e40:	e003      	b.n	8004e4a <tx_time_increment+0x92>
                }
                else
                {
                    /* Calculate the expiration time, which is simply the number of entries in this case.  */
                    next_timer -> tx_timer_internal_remaining_ticks =  i + 1;
 8004e42:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004e44:	1c5a      	adds	r2, r3, #1
 8004e46:	69fb      	ldr	r3, [r7, #28]
 8004e48:	601a      	str	r2, [r3, #0]
                }

                /* Move to the next entry in the timer list.  */
                next_timer =  next_timer -> tx_timer_internal_active_next;
 8004e4a:	69fb      	ldr	r3, [r7, #28]
 8004e4c:	691b      	ldr	r3, [r3, #16]
 8004e4e:	61fb      	str	r3, [r7, #28]

            } while (next_timer != *timer_list_head);
 8004e50:	6a3b      	ldr	r3, [r7, #32]
 8004e52:	681b      	ldr	r3, [r3, #0]
 8004e54:	69fa      	ldr	r2, [r7, #28]
 8004e56:	429a      	cmp	r2, r3
 8004e58:	d1e6      	bne.n	8004e28 <tx_time_increment+0x70>

            /* NULL terminate the current timer list.  */
            ((*timer_list_head) -> tx_timer_internal_active_previous) -> tx_timer_internal_active_next =  TX_NULL;
 8004e5a:	6a3b      	ldr	r3, [r7, #32]
 8004e5c:	681b      	ldr	r3, [r3, #0]
 8004e5e:	695b      	ldr	r3, [r3, #20]
 8004e60:	2200      	movs	r2, #0
 8004e62:	611a      	str	r2, [r3, #16]

            /* Yes, determine if the temporary list is NULL.  */
            if (temp_list_head == TX_NULL)
 8004e64:	69bb      	ldr	r3, [r7, #24]
 8004e66:	2b00      	cmp	r3, #0
 8004e68:	d103      	bne.n	8004e72 <tx_time_increment+0xba>
            {
                /* First item on the list.  Move the entire linked list.  */
                temp_list_head =  *timer_list_head;
 8004e6a:	6a3b      	ldr	r3, [r7, #32]
 8004e6c:	681b      	ldr	r3, [r3, #0]
 8004e6e:	61bb      	str	r3, [r7, #24]
 8004e70:	e009      	b.n	8004e86 <tx_time_increment+0xce>
            }
            else
            {
                /* No, the temp list already has timers on it. Link the next timer list to the end.  */
                (temp_list_head -> tx_timer_internal_active_previous) -> tx_timer_internal_active_next =  *timer_list_head;
 8004e72:	69bb      	ldr	r3, [r7, #24]
 8004e74:	695b      	ldr	r3, [r3, #20]
 8004e76:	6a3a      	ldr	r2, [r7, #32]
 8004e78:	6812      	ldr	r2, [r2, #0]
 8004e7a:	611a      	str	r2, [r3, #16]

                /* Now update the previous to the new list's previous timer pointer.  */
                temp_list_head -> tx_timer_internal_active_previous =  (*timer_list_head) -> tx_timer_internal_active_previous;
 8004e7c:	6a3b      	ldr	r3, [r7, #32]
 8004e7e:	681b      	ldr	r3, [r3, #0]
 8004e80:	695a      	ldr	r2, [r3, #20]
 8004e82:	69bb      	ldr	r3, [r7, #24]
 8004e84:	615a      	str	r2, [r3, #20]
            }

            /* Now clear the current timer head pointer.  */
            *timer_list_head =  TX_NULL;
 8004e86:	6a3b      	ldr	r3, [r7, #32]
 8004e88:	2200      	movs	r2, #0
 8004e8a:	601a      	str	r2, [r3, #0]
        }
        
        /* Move to next timer entry.  */
        timer_list_head++;
 8004e8c:	6a3b      	ldr	r3, [r7, #32]
 8004e8e:	3304      	adds	r3, #4
 8004e90:	623b      	str	r3, [r7, #32]

        /* Determine if a wrap around condition has occurred.  */
        if (timer_list_head >= _tx_timer_list_end)
 8004e92:	4b20      	ldr	r3, [pc, #128]	; (8004f14 <tx_time_increment+0x15c>)
 8004e94:	681b      	ldr	r3, [r3, #0]
 8004e96:	6a3a      	ldr	r2, [r7, #32]
 8004e98:	429a      	cmp	r2, r3
 8004e9a:	d302      	bcc.n	8004ea2 <tx_time_increment+0xea>
        {
            /* Wrap from the beginning of the list.  */
            timer_list_head =  _tx_timer_list_start;
 8004e9c:	4b1e      	ldr	r3, [pc, #120]	; (8004f18 <tx_time_increment+0x160>)
 8004e9e:	681b      	ldr	r3, [r3, #0]
 8004ea0:	623b      	str	r3, [r7, #32]
    for (i = 0; i < TX_TIMER_ENTRIES; i++)
 8004ea2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004ea4:	3301      	adds	r3, #1
 8004ea6:	627b      	str	r3, [r7, #36]	; 0x24
 8004ea8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004eaa:	2b1f      	cmp	r3, #31
 8004eac:	d9b5      	bls.n	8004e1a <tx_time_increment+0x62>
        }
    }

    /* Set the current timer pointer to the beginning of the list.  */
    _tx_timer_current_ptr =  _tx_timer_list_start;
 8004eae:	4b1a      	ldr	r3, [pc, #104]	; (8004f18 <tx_time_increment+0x160>)
 8004eb0:	681b      	ldr	r3, [r3, #0]
 8004eb2:	4a17      	ldr	r2, [pc, #92]	; (8004f10 <tx_time_increment+0x158>)
 8004eb4:	6013      	str	r3, [r2, #0]

    /* Loop to update and reinsert all the timers in the list.  */
    while (temp_list_head)
 8004eb6:	e019      	b.n	8004eec <tx_time_increment+0x134>
    {
        /* Pickup the next timer to update and reinsert.  */
        next_timer =  temp_list_head;
 8004eb8:	69bb      	ldr	r3, [r7, #24]
 8004eba:	61fb      	str	r3, [r7, #28]

        /* Move the temp list head pointer to the next pointer.  */
        temp_list_head =  next_timer -> tx_timer_internal_active_next;
 8004ebc:	69fb      	ldr	r3, [r7, #28]
 8004ebe:	691b      	ldr	r3, [r3, #16]
 8004ec0:	61bb      	str	r3, [r7, #24]

        /* Determine if the remaining time is greater than the time increment
           value - this is the normal case.  */
        if (next_timer -> tx_timer_internal_remaining_ticks > time_increment)
 8004ec2:	69fb      	ldr	r3, [r7, #28]
 8004ec4:	681b      	ldr	r3, [r3, #0]
 8004ec6:	687a      	ldr	r2, [r7, #4]
 8004ec8:	429a      	cmp	r2, r3
 8004eca:	d206      	bcs.n	8004eda <tx_time_increment+0x122>
        {
            /* Decrement the elapsed time.  */
            next_timer -> tx_timer_internal_remaining_ticks =  next_timer -> tx_timer_internal_remaining_ticks - time_increment;
 8004ecc:	69fb      	ldr	r3, [r7, #28]
 8004ece:	681a      	ldr	r2, [r3, #0]
 8004ed0:	687b      	ldr	r3, [r7, #4]
 8004ed2:	1ad2      	subs	r2, r2, r3
 8004ed4:	69fb      	ldr	r3, [r7, #28]
 8004ed6:	601a      	str	r2, [r3, #0]
 8004ed8:	e002      	b.n	8004ee0 <tx_time_increment+0x128>
        }
        else
        {
            /* Simply set the expiration value to expire on the next tick.  */
            next_timer -> tx_timer_internal_remaining_ticks =  1;
 8004eda:	69fb      	ldr	r3, [r7, #28]
 8004edc:	2201      	movs	r2, #1
 8004ede:	601a      	str	r2, [r3, #0]
        }

        /* Now clear the timer list head pointer for the timer activate function to work properly.  */
        next_timer -> tx_timer_internal_list_head =  TX_NULL;
 8004ee0:	69fb      	ldr	r3, [r7, #28]
 8004ee2:	2200      	movs	r2, #0
 8004ee4:	619a      	str	r2, [r3, #24]

        /* Now re-insert the timer into the list.  */
        _tx_timer_system_activate(next_timer);
 8004ee6:	69f8      	ldr	r0, [r7, #28]
 8004ee8:	f7ff fb1c 	bl	8004524 <_tx_timer_system_activate>
    while (temp_list_head)
 8004eec:	69bb      	ldr	r3, [r7, #24]
 8004eee:	2b00      	cmp	r3, #0
 8004ef0:	d1e2      	bne.n	8004eb8 <tx_time_increment+0x100>
 8004ef2:	697b      	ldr	r3, [r7, #20]
 8004ef4:	60bb      	str	r3, [r7, #8]
    __asm__ volatile ("MSR  PRIMASK,%0": : "r" (int_posture): "memory");
 8004ef6:	68bb      	ldr	r3, [r7, #8]
 8004ef8:	f383 8810 	msr	PRIMASK, r3
}
 8004efc:	e000      	b.n	8004f00 <tx_time_increment+0x148>
        return;
 8004efe:	bf00      	nop
    }

    /* Restore interrupts.  */
    TX_RESTORE
}
 8004f00:	3728      	adds	r7, #40	; 0x28
 8004f02:	46bd      	mov	sp, r7
 8004f04:	bd80      	pop	{r7, pc}
 8004f06:	bf00      	nop
 8004f08:	20007d10 	.word	0x20007d10
 8004f0c:	20008274 	.word	0x20008274
 8004f10:	20007da0 	.word	0x20007da0
 8004f14:	20007d9c 	.word	0x20007d9c
 8004f18:	20007d98 	.word	0x20007d98

08004f1c <__errno>:
 8004f1c:	4b01      	ldr	r3, [pc, #4]	; (8004f24 <__errno+0x8>)
 8004f1e:	6818      	ldr	r0, [r3, #0]
 8004f20:	4770      	bx	lr
 8004f22:	bf00      	nop
 8004f24:	20000010 	.word	0x20000010

08004f28 <__libc_init_array>:
 8004f28:	b570      	push	{r4, r5, r6, lr}
 8004f2a:	4d0d      	ldr	r5, [pc, #52]	; (8004f60 <__libc_init_array+0x38>)
 8004f2c:	4c0d      	ldr	r4, [pc, #52]	; (8004f64 <__libc_init_array+0x3c>)
 8004f2e:	1b64      	subs	r4, r4, r5
 8004f30:	10a4      	asrs	r4, r4, #2
 8004f32:	2600      	movs	r6, #0
 8004f34:	42a6      	cmp	r6, r4
 8004f36:	d109      	bne.n	8004f4c <__libc_init_array+0x24>
 8004f38:	4d0b      	ldr	r5, [pc, #44]	; (8004f68 <__libc_init_array+0x40>)
 8004f3a:	4c0c      	ldr	r4, [pc, #48]	; (8004f6c <__libc_init_array+0x44>)
 8004f3c:	f001 f98a 	bl	8006254 <_init>
 8004f40:	1b64      	subs	r4, r4, r5
 8004f42:	10a4      	asrs	r4, r4, #2
 8004f44:	2600      	movs	r6, #0
 8004f46:	42a6      	cmp	r6, r4
 8004f48:	d105      	bne.n	8004f56 <__libc_init_array+0x2e>
 8004f4a:	bd70      	pop	{r4, r5, r6, pc}
 8004f4c:	f855 3b04 	ldr.w	r3, [r5], #4
 8004f50:	4798      	blx	r3
 8004f52:	3601      	adds	r6, #1
 8004f54:	e7ee      	b.n	8004f34 <__libc_init_array+0xc>
 8004f56:	f855 3b04 	ldr.w	r3, [r5], #4
 8004f5a:	4798      	blx	r3
 8004f5c:	3601      	adds	r6, #1
 8004f5e:	e7f2      	b.n	8004f46 <__libc_init_array+0x1e>
 8004f60:	0800649c 	.word	0x0800649c
 8004f64:	0800649c 	.word	0x0800649c
 8004f68:	0800649c 	.word	0x0800649c
 8004f6c:	080064a0 	.word	0x080064a0

08004f70 <memcpy>:
 8004f70:	440a      	add	r2, r1
 8004f72:	4291      	cmp	r1, r2
 8004f74:	f100 33ff 	add.w	r3, r0, #4294967295
 8004f78:	d100      	bne.n	8004f7c <memcpy+0xc>
 8004f7a:	4770      	bx	lr
 8004f7c:	b510      	push	{r4, lr}
 8004f7e:	f811 4b01 	ldrb.w	r4, [r1], #1
 8004f82:	f803 4f01 	strb.w	r4, [r3, #1]!
 8004f86:	4291      	cmp	r1, r2
 8004f88:	d1f9      	bne.n	8004f7e <memcpy+0xe>
 8004f8a:	bd10      	pop	{r4, pc}

08004f8c <memset>:
 8004f8c:	4402      	add	r2, r0
 8004f8e:	4603      	mov	r3, r0
 8004f90:	4293      	cmp	r3, r2
 8004f92:	d100      	bne.n	8004f96 <memset+0xa>
 8004f94:	4770      	bx	lr
 8004f96:	f803 1b01 	strb.w	r1, [r3], #1
 8004f9a:	e7f9      	b.n	8004f90 <memset+0x4>

08004f9c <iprintf>:
 8004f9c:	b40f      	push	{r0, r1, r2, r3}
 8004f9e:	4b0a      	ldr	r3, [pc, #40]	; (8004fc8 <iprintf+0x2c>)
 8004fa0:	b513      	push	{r0, r1, r4, lr}
 8004fa2:	681c      	ldr	r4, [r3, #0]
 8004fa4:	b124      	cbz	r4, 8004fb0 <iprintf+0x14>
 8004fa6:	69a3      	ldr	r3, [r4, #24]
 8004fa8:	b913      	cbnz	r3, 8004fb0 <iprintf+0x14>
 8004faa:	4620      	mov	r0, r4
 8004fac:	f000 f886 	bl	80050bc <__sinit>
 8004fb0:	ab05      	add	r3, sp, #20
 8004fb2:	9a04      	ldr	r2, [sp, #16]
 8004fb4:	68a1      	ldr	r1, [r4, #8]
 8004fb6:	9301      	str	r3, [sp, #4]
 8004fb8:	4620      	mov	r0, r4
 8004fba:	f000 fb39 	bl	8005630 <_vfiprintf_r>
 8004fbe:	b002      	add	sp, #8
 8004fc0:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8004fc4:	b004      	add	sp, #16
 8004fc6:	4770      	bx	lr
 8004fc8:	20000010 	.word	0x20000010

08004fcc <siprintf>:
 8004fcc:	b40e      	push	{r1, r2, r3}
 8004fce:	b500      	push	{lr}
 8004fd0:	b09c      	sub	sp, #112	; 0x70
 8004fd2:	ab1d      	add	r3, sp, #116	; 0x74
 8004fd4:	9002      	str	r0, [sp, #8]
 8004fd6:	9006      	str	r0, [sp, #24]
 8004fd8:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
 8004fdc:	4809      	ldr	r0, [pc, #36]	; (8005004 <siprintf+0x38>)
 8004fde:	9107      	str	r1, [sp, #28]
 8004fe0:	9104      	str	r1, [sp, #16]
 8004fe2:	4909      	ldr	r1, [pc, #36]	; (8005008 <siprintf+0x3c>)
 8004fe4:	f853 2b04 	ldr.w	r2, [r3], #4
 8004fe8:	9105      	str	r1, [sp, #20]
 8004fea:	6800      	ldr	r0, [r0, #0]
 8004fec:	9301      	str	r3, [sp, #4]
 8004fee:	a902      	add	r1, sp, #8
 8004ff0:	f000 f9f4 	bl	80053dc <_svfiprintf_r>
 8004ff4:	9b02      	ldr	r3, [sp, #8]
 8004ff6:	2200      	movs	r2, #0
 8004ff8:	701a      	strb	r2, [r3, #0]
 8004ffa:	b01c      	add	sp, #112	; 0x70
 8004ffc:	f85d eb04 	ldr.w	lr, [sp], #4
 8005000:	b003      	add	sp, #12
 8005002:	4770      	bx	lr
 8005004:	20000010 	.word	0x20000010
 8005008:	ffff0208 	.word	0xffff0208

0800500c <std>:
 800500c:	2300      	movs	r3, #0
 800500e:	b510      	push	{r4, lr}
 8005010:	4604      	mov	r4, r0
 8005012:	e9c0 3300 	strd	r3, r3, [r0]
 8005016:	e9c0 3304 	strd	r3, r3, [r0, #16]
 800501a:	6083      	str	r3, [r0, #8]
 800501c:	8181      	strh	r1, [r0, #12]
 800501e:	6643      	str	r3, [r0, #100]	; 0x64
 8005020:	81c2      	strh	r2, [r0, #14]
 8005022:	6183      	str	r3, [r0, #24]
 8005024:	4619      	mov	r1, r3
 8005026:	2208      	movs	r2, #8
 8005028:	305c      	adds	r0, #92	; 0x5c
 800502a:	f7ff ffaf 	bl	8004f8c <memset>
 800502e:	4b05      	ldr	r3, [pc, #20]	; (8005044 <std+0x38>)
 8005030:	6263      	str	r3, [r4, #36]	; 0x24
 8005032:	4b05      	ldr	r3, [pc, #20]	; (8005048 <std+0x3c>)
 8005034:	62a3      	str	r3, [r4, #40]	; 0x28
 8005036:	4b05      	ldr	r3, [pc, #20]	; (800504c <std+0x40>)
 8005038:	62e3      	str	r3, [r4, #44]	; 0x2c
 800503a:	4b05      	ldr	r3, [pc, #20]	; (8005050 <std+0x44>)
 800503c:	6224      	str	r4, [r4, #32]
 800503e:	6323      	str	r3, [r4, #48]	; 0x30
 8005040:	bd10      	pop	{r4, pc}
 8005042:	bf00      	nop
 8005044:	08005bd9 	.word	0x08005bd9
 8005048:	08005bfb 	.word	0x08005bfb
 800504c:	08005c33 	.word	0x08005c33
 8005050:	08005c57 	.word	0x08005c57

08005054 <_cleanup_r>:
 8005054:	4901      	ldr	r1, [pc, #4]	; (800505c <_cleanup_r+0x8>)
 8005056:	f000 b8af 	b.w	80051b8 <_fwalk_reent>
 800505a:	bf00      	nop
 800505c:	08005f31 	.word	0x08005f31

08005060 <__sfmoreglue>:
 8005060:	b570      	push	{r4, r5, r6, lr}
 8005062:	2268      	movs	r2, #104	; 0x68
 8005064:	1e4d      	subs	r5, r1, #1
 8005066:	4355      	muls	r5, r2
 8005068:	460e      	mov	r6, r1
 800506a:	f105 0174 	add.w	r1, r5, #116	; 0x74
 800506e:	f000 f8e5 	bl	800523c <_malloc_r>
 8005072:	4604      	mov	r4, r0
 8005074:	b140      	cbz	r0, 8005088 <__sfmoreglue+0x28>
 8005076:	2100      	movs	r1, #0
 8005078:	e9c0 1600 	strd	r1, r6, [r0]
 800507c:	300c      	adds	r0, #12
 800507e:	60a0      	str	r0, [r4, #8]
 8005080:	f105 0268 	add.w	r2, r5, #104	; 0x68
 8005084:	f7ff ff82 	bl	8004f8c <memset>
 8005088:	4620      	mov	r0, r4
 800508a:	bd70      	pop	{r4, r5, r6, pc}

0800508c <__sfp_lock_acquire>:
 800508c:	4801      	ldr	r0, [pc, #4]	; (8005094 <__sfp_lock_acquire+0x8>)
 800508e:	f000 b8b3 	b.w	80051f8 <__retarget_lock_acquire_recursive>
 8005092:	bf00      	nop
 8005094:	2000827d 	.word	0x2000827d

08005098 <__sfp_lock_release>:
 8005098:	4801      	ldr	r0, [pc, #4]	; (80050a0 <__sfp_lock_release+0x8>)
 800509a:	f000 b8ae 	b.w	80051fa <__retarget_lock_release_recursive>
 800509e:	bf00      	nop
 80050a0:	2000827d 	.word	0x2000827d

080050a4 <__sinit_lock_acquire>:
 80050a4:	4801      	ldr	r0, [pc, #4]	; (80050ac <__sinit_lock_acquire+0x8>)
 80050a6:	f000 b8a7 	b.w	80051f8 <__retarget_lock_acquire_recursive>
 80050aa:	bf00      	nop
 80050ac:	2000827e 	.word	0x2000827e

080050b0 <__sinit_lock_release>:
 80050b0:	4801      	ldr	r0, [pc, #4]	; (80050b8 <__sinit_lock_release+0x8>)
 80050b2:	f000 b8a2 	b.w	80051fa <__retarget_lock_release_recursive>
 80050b6:	bf00      	nop
 80050b8:	2000827e 	.word	0x2000827e

080050bc <__sinit>:
 80050bc:	b510      	push	{r4, lr}
 80050be:	4604      	mov	r4, r0
 80050c0:	f7ff fff0 	bl	80050a4 <__sinit_lock_acquire>
 80050c4:	69a3      	ldr	r3, [r4, #24]
 80050c6:	b11b      	cbz	r3, 80050d0 <__sinit+0x14>
 80050c8:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 80050cc:	f7ff bff0 	b.w	80050b0 <__sinit_lock_release>
 80050d0:	e9c4 3312 	strd	r3, r3, [r4, #72]	; 0x48
 80050d4:	6523      	str	r3, [r4, #80]	; 0x50
 80050d6:	4b13      	ldr	r3, [pc, #76]	; (8005124 <__sinit+0x68>)
 80050d8:	4a13      	ldr	r2, [pc, #76]	; (8005128 <__sinit+0x6c>)
 80050da:	681b      	ldr	r3, [r3, #0]
 80050dc:	62a2      	str	r2, [r4, #40]	; 0x28
 80050de:	42a3      	cmp	r3, r4
 80050e0:	bf04      	itt	eq
 80050e2:	2301      	moveq	r3, #1
 80050e4:	61a3      	streq	r3, [r4, #24]
 80050e6:	4620      	mov	r0, r4
 80050e8:	f000 f820 	bl	800512c <__sfp>
 80050ec:	6060      	str	r0, [r4, #4]
 80050ee:	4620      	mov	r0, r4
 80050f0:	f000 f81c 	bl	800512c <__sfp>
 80050f4:	60a0      	str	r0, [r4, #8]
 80050f6:	4620      	mov	r0, r4
 80050f8:	f000 f818 	bl	800512c <__sfp>
 80050fc:	2200      	movs	r2, #0
 80050fe:	60e0      	str	r0, [r4, #12]
 8005100:	2104      	movs	r1, #4
 8005102:	6860      	ldr	r0, [r4, #4]
 8005104:	f7ff ff82 	bl	800500c <std>
 8005108:	68a0      	ldr	r0, [r4, #8]
 800510a:	2201      	movs	r2, #1
 800510c:	2109      	movs	r1, #9
 800510e:	f7ff ff7d 	bl	800500c <std>
 8005112:	68e0      	ldr	r0, [r4, #12]
 8005114:	2202      	movs	r2, #2
 8005116:	2112      	movs	r1, #18
 8005118:	f7ff ff78 	bl	800500c <std>
 800511c:	2301      	movs	r3, #1
 800511e:	61a3      	str	r3, [r4, #24]
 8005120:	e7d2      	b.n	80050c8 <__sinit+0xc>
 8005122:	bf00      	nop
 8005124:	080063fc 	.word	0x080063fc
 8005128:	08005055 	.word	0x08005055

0800512c <__sfp>:
 800512c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800512e:	4607      	mov	r7, r0
 8005130:	f7ff ffac 	bl	800508c <__sfp_lock_acquire>
 8005134:	4b1e      	ldr	r3, [pc, #120]	; (80051b0 <__sfp+0x84>)
 8005136:	681e      	ldr	r6, [r3, #0]
 8005138:	69b3      	ldr	r3, [r6, #24]
 800513a:	b913      	cbnz	r3, 8005142 <__sfp+0x16>
 800513c:	4630      	mov	r0, r6
 800513e:	f7ff ffbd 	bl	80050bc <__sinit>
 8005142:	3648      	adds	r6, #72	; 0x48
 8005144:	e9d6 3401 	ldrd	r3, r4, [r6, #4]
 8005148:	3b01      	subs	r3, #1
 800514a:	d503      	bpl.n	8005154 <__sfp+0x28>
 800514c:	6833      	ldr	r3, [r6, #0]
 800514e:	b30b      	cbz	r3, 8005194 <__sfp+0x68>
 8005150:	6836      	ldr	r6, [r6, #0]
 8005152:	e7f7      	b.n	8005144 <__sfp+0x18>
 8005154:	f9b4 500c 	ldrsh.w	r5, [r4, #12]
 8005158:	b9d5      	cbnz	r5, 8005190 <__sfp+0x64>
 800515a:	4b16      	ldr	r3, [pc, #88]	; (80051b4 <__sfp+0x88>)
 800515c:	60e3      	str	r3, [r4, #12]
 800515e:	f104 0058 	add.w	r0, r4, #88	; 0x58
 8005162:	6665      	str	r5, [r4, #100]	; 0x64
 8005164:	f000 f847 	bl	80051f6 <__retarget_lock_init_recursive>
 8005168:	f7ff ff96 	bl	8005098 <__sfp_lock_release>
 800516c:	e9c4 5501 	strd	r5, r5, [r4, #4]
 8005170:	e9c4 5504 	strd	r5, r5, [r4, #16]
 8005174:	6025      	str	r5, [r4, #0]
 8005176:	61a5      	str	r5, [r4, #24]
 8005178:	2208      	movs	r2, #8
 800517a:	4629      	mov	r1, r5
 800517c:	f104 005c 	add.w	r0, r4, #92	; 0x5c
 8005180:	f7ff ff04 	bl	8004f8c <memset>
 8005184:	e9c4 550d 	strd	r5, r5, [r4, #52]	; 0x34
 8005188:	e9c4 5512 	strd	r5, r5, [r4, #72]	; 0x48
 800518c:	4620      	mov	r0, r4
 800518e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8005190:	3468      	adds	r4, #104	; 0x68
 8005192:	e7d9      	b.n	8005148 <__sfp+0x1c>
 8005194:	2104      	movs	r1, #4
 8005196:	4638      	mov	r0, r7
 8005198:	f7ff ff62 	bl	8005060 <__sfmoreglue>
 800519c:	4604      	mov	r4, r0
 800519e:	6030      	str	r0, [r6, #0]
 80051a0:	2800      	cmp	r0, #0
 80051a2:	d1d5      	bne.n	8005150 <__sfp+0x24>
 80051a4:	f7ff ff78 	bl	8005098 <__sfp_lock_release>
 80051a8:	230c      	movs	r3, #12
 80051aa:	603b      	str	r3, [r7, #0]
 80051ac:	e7ee      	b.n	800518c <__sfp+0x60>
 80051ae:	bf00      	nop
 80051b0:	080063fc 	.word	0x080063fc
 80051b4:	ffff0001 	.word	0xffff0001

080051b8 <_fwalk_reent>:
 80051b8:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 80051bc:	4606      	mov	r6, r0
 80051be:	4688      	mov	r8, r1
 80051c0:	f100 0448 	add.w	r4, r0, #72	; 0x48
 80051c4:	2700      	movs	r7, #0
 80051c6:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 80051ca:	f1b9 0901 	subs.w	r9, r9, #1
 80051ce:	d505      	bpl.n	80051dc <_fwalk_reent+0x24>
 80051d0:	6824      	ldr	r4, [r4, #0]
 80051d2:	2c00      	cmp	r4, #0
 80051d4:	d1f7      	bne.n	80051c6 <_fwalk_reent+0xe>
 80051d6:	4638      	mov	r0, r7
 80051d8:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 80051dc:	89ab      	ldrh	r3, [r5, #12]
 80051de:	2b01      	cmp	r3, #1
 80051e0:	d907      	bls.n	80051f2 <_fwalk_reent+0x3a>
 80051e2:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 80051e6:	3301      	adds	r3, #1
 80051e8:	d003      	beq.n	80051f2 <_fwalk_reent+0x3a>
 80051ea:	4629      	mov	r1, r5
 80051ec:	4630      	mov	r0, r6
 80051ee:	47c0      	blx	r8
 80051f0:	4307      	orrs	r7, r0
 80051f2:	3568      	adds	r5, #104	; 0x68
 80051f4:	e7e9      	b.n	80051ca <_fwalk_reent+0x12>

080051f6 <__retarget_lock_init_recursive>:
 80051f6:	4770      	bx	lr

080051f8 <__retarget_lock_acquire_recursive>:
 80051f8:	4770      	bx	lr

080051fa <__retarget_lock_release_recursive>:
 80051fa:	4770      	bx	lr

080051fc <sbrk_aligned>:
 80051fc:	b570      	push	{r4, r5, r6, lr}
 80051fe:	4e0e      	ldr	r6, [pc, #56]	; (8005238 <sbrk_aligned+0x3c>)
 8005200:	460c      	mov	r4, r1
 8005202:	6831      	ldr	r1, [r6, #0]
 8005204:	4605      	mov	r5, r0
 8005206:	b911      	cbnz	r1, 800520e <sbrk_aligned+0x12>
 8005208:	f000 fcd6 	bl	8005bb8 <_sbrk_r>
 800520c:	6030      	str	r0, [r6, #0]
 800520e:	4621      	mov	r1, r4
 8005210:	4628      	mov	r0, r5
 8005212:	f000 fcd1 	bl	8005bb8 <_sbrk_r>
 8005216:	1c43      	adds	r3, r0, #1
 8005218:	d00a      	beq.n	8005230 <sbrk_aligned+0x34>
 800521a:	1cc4      	adds	r4, r0, #3
 800521c:	f024 0403 	bic.w	r4, r4, #3
 8005220:	42a0      	cmp	r0, r4
 8005222:	d007      	beq.n	8005234 <sbrk_aligned+0x38>
 8005224:	1a21      	subs	r1, r4, r0
 8005226:	4628      	mov	r0, r5
 8005228:	f000 fcc6 	bl	8005bb8 <_sbrk_r>
 800522c:	3001      	adds	r0, #1
 800522e:	d101      	bne.n	8005234 <sbrk_aligned+0x38>
 8005230:	f04f 34ff 	mov.w	r4, #4294967295
 8005234:	4620      	mov	r0, r4
 8005236:	bd70      	pop	{r4, r5, r6, pc}
 8005238:	20008284 	.word	0x20008284

0800523c <_malloc_r>:
 800523c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8005240:	1ccd      	adds	r5, r1, #3
 8005242:	f025 0503 	bic.w	r5, r5, #3
 8005246:	3508      	adds	r5, #8
 8005248:	2d0c      	cmp	r5, #12
 800524a:	bf38      	it	cc
 800524c:	250c      	movcc	r5, #12
 800524e:	2d00      	cmp	r5, #0
 8005250:	4607      	mov	r7, r0
 8005252:	db01      	blt.n	8005258 <_malloc_r+0x1c>
 8005254:	42a9      	cmp	r1, r5
 8005256:	d905      	bls.n	8005264 <_malloc_r+0x28>
 8005258:	230c      	movs	r3, #12
 800525a:	603b      	str	r3, [r7, #0]
 800525c:	2600      	movs	r6, #0
 800525e:	4630      	mov	r0, r6
 8005260:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8005264:	4e2e      	ldr	r6, [pc, #184]	; (8005320 <_malloc_r+0xe4>)
 8005266:	f000 ff31 	bl	80060cc <__malloc_lock>
 800526a:	6833      	ldr	r3, [r6, #0]
 800526c:	461c      	mov	r4, r3
 800526e:	bb34      	cbnz	r4, 80052be <_malloc_r+0x82>
 8005270:	4629      	mov	r1, r5
 8005272:	4638      	mov	r0, r7
 8005274:	f7ff ffc2 	bl	80051fc <sbrk_aligned>
 8005278:	1c43      	adds	r3, r0, #1
 800527a:	4604      	mov	r4, r0
 800527c:	d14d      	bne.n	800531a <_malloc_r+0xde>
 800527e:	6834      	ldr	r4, [r6, #0]
 8005280:	4626      	mov	r6, r4
 8005282:	2e00      	cmp	r6, #0
 8005284:	d140      	bne.n	8005308 <_malloc_r+0xcc>
 8005286:	6823      	ldr	r3, [r4, #0]
 8005288:	4631      	mov	r1, r6
 800528a:	4638      	mov	r0, r7
 800528c:	eb04 0803 	add.w	r8, r4, r3
 8005290:	f000 fc92 	bl	8005bb8 <_sbrk_r>
 8005294:	4580      	cmp	r8, r0
 8005296:	d13a      	bne.n	800530e <_malloc_r+0xd2>
 8005298:	6821      	ldr	r1, [r4, #0]
 800529a:	3503      	adds	r5, #3
 800529c:	1a6d      	subs	r5, r5, r1
 800529e:	f025 0503 	bic.w	r5, r5, #3
 80052a2:	3508      	adds	r5, #8
 80052a4:	2d0c      	cmp	r5, #12
 80052a6:	bf38      	it	cc
 80052a8:	250c      	movcc	r5, #12
 80052aa:	4629      	mov	r1, r5
 80052ac:	4638      	mov	r0, r7
 80052ae:	f7ff ffa5 	bl	80051fc <sbrk_aligned>
 80052b2:	3001      	adds	r0, #1
 80052b4:	d02b      	beq.n	800530e <_malloc_r+0xd2>
 80052b6:	6823      	ldr	r3, [r4, #0]
 80052b8:	442b      	add	r3, r5
 80052ba:	6023      	str	r3, [r4, #0]
 80052bc:	e00e      	b.n	80052dc <_malloc_r+0xa0>
 80052be:	6822      	ldr	r2, [r4, #0]
 80052c0:	1b52      	subs	r2, r2, r5
 80052c2:	d41e      	bmi.n	8005302 <_malloc_r+0xc6>
 80052c4:	2a0b      	cmp	r2, #11
 80052c6:	d916      	bls.n	80052f6 <_malloc_r+0xba>
 80052c8:	1961      	adds	r1, r4, r5
 80052ca:	42a3      	cmp	r3, r4
 80052cc:	6025      	str	r5, [r4, #0]
 80052ce:	bf18      	it	ne
 80052d0:	6059      	strne	r1, [r3, #4]
 80052d2:	6863      	ldr	r3, [r4, #4]
 80052d4:	bf08      	it	eq
 80052d6:	6031      	streq	r1, [r6, #0]
 80052d8:	5162      	str	r2, [r4, r5]
 80052da:	604b      	str	r3, [r1, #4]
 80052dc:	4638      	mov	r0, r7
 80052de:	f104 060b 	add.w	r6, r4, #11
 80052e2:	f000 fef9 	bl	80060d8 <__malloc_unlock>
 80052e6:	f026 0607 	bic.w	r6, r6, #7
 80052ea:	1d23      	adds	r3, r4, #4
 80052ec:	1af2      	subs	r2, r6, r3
 80052ee:	d0b6      	beq.n	800525e <_malloc_r+0x22>
 80052f0:	1b9b      	subs	r3, r3, r6
 80052f2:	50a3      	str	r3, [r4, r2]
 80052f4:	e7b3      	b.n	800525e <_malloc_r+0x22>
 80052f6:	6862      	ldr	r2, [r4, #4]
 80052f8:	42a3      	cmp	r3, r4
 80052fa:	bf0c      	ite	eq
 80052fc:	6032      	streq	r2, [r6, #0]
 80052fe:	605a      	strne	r2, [r3, #4]
 8005300:	e7ec      	b.n	80052dc <_malloc_r+0xa0>
 8005302:	4623      	mov	r3, r4
 8005304:	6864      	ldr	r4, [r4, #4]
 8005306:	e7b2      	b.n	800526e <_malloc_r+0x32>
 8005308:	4634      	mov	r4, r6
 800530a:	6876      	ldr	r6, [r6, #4]
 800530c:	e7b9      	b.n	8005282 <_malloc_r+0x46>
 800530e:	230c      	movs	r3, #12
 8005310:	603b      	str	r3, [r7, #0]
 8005312:	4638      	mov	r0, r7
 8005314:	f000 fee0 	bl	80060d8 <__malloc_unlock>
 8005318:	e7a1      	b.n	800525e <_malloc_r+0x22>
 800531a:	6025      	str	r5, [r4, #0]
 800531c:	e7de      	b.n	80052dc <_malloc_r+0xa0>
 800531e:	bf00      	nop
 8005320:	20008280 	.word	0x20008280

08005324 <__ssputs_r>:
 8005324:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8005328:	688e      	ldr	r6, [r1, #8]
 800532a:	429e      	cmp	r6, r3
 800532c:	4682      	mov	sl, r0
 800532e:	460c      	mov	r4, r1
 8005330:	4690      	mov	r8, r2
 8005332:	461f      	mov	r7, r3
 8005334:	d838      	bhi.n	80053a8 <__ssputs_r+0x84>
 8005336:	898a      	ldrh	r2, [r1, #12]
 8005338:	f412 6f90 	tst.w	r2, #1152	; 0x480
 800533c:	d032      	beq.n	80053a4 <__ssputs_r+0x80>
 800533e:	6825      	ldr	r5, [r4, #0]
 8005340:	6909      	ldr	r1, [r1, #16]
 8005342:	eba5 0901 	sub.w	r9, r5, r1
 8005346:	6965      	ldr	r5, [r4, #20]
 8005348:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 800534c:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 8005350:	3301      	adds	r3, #1
 8005352:	444b      	add	r3, r9
 8005354:	106d      	asrs	r5, r5, #1
 8005356:	429d      	cmp	r5, r3
 8005358:	bf38      	it	cc
 800535a:	461d      	movcc	r5, r3
 800535c:	0553      	lsls	r3, r2, #21
 800535e:	d531      	bpl.n	80053c4 <__ssputs_r+0xa0>
 8005360:	4629      	mov	r1, r5
 8005362:	f7ff ff6b 	bl	800523c <_malloc_r>
 8005366:	4606      	mov	r6, r0
 8005368:	b950      	cbnz	r0, 8005380 <__ssputs_r+0x5c>
 800536a:	230c      	movs	r3, #12
 800536c:	f8ca 3000 	str.w	r3, [sl]
 8005370:	89a3      	ldrh	r3, [r4, #12]
 8005372:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8005376:	81a3      	strh	r3, [r4, #12]
 8005378:	f04f 30ff 	mov.w	r0, #4294967295
 800537c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8005380:	6921      	ldr	r1, [r4, #16]
 8005382:	464a      	mov	r2, r9
 8005384:	f7ff fdf4 	bl	8004f70 <memcpy>
 8005388:	89a3      	ldrh	r3, [r4, #12]
 800538a:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 800538e:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8005392:	81a3      	strh	r3, [r4, #12]
 8005394:	6126      	str	r6, [r4, #16]
 8005396:	6165      	str	r5, [r4, #20]
 8005398:	444e      	add	r6, r9
 800539a:	eba5 0509 	sub.w	r5, r5, r9
 800539e:	6026      	str	r6, [r4, #0]
 80053a0:	60a5      	str	r5, [r4, #8]
 80053a2:	463e      	mov	r6, r7
 80053a4:	42be      	cmp	r6, r7
 80053a6:	d900      	bls.n	80053aa <__ssputs_r+0x86>
 80053a8:	463e      	mov	r6, r7
 80053aa:	6820      	ldr	r0, [r4, #0]
 80053ac:	4632      	mov	r2, r6
 80053ae:	4641      	mov	r1, r8
 80053b0:	f000 fe72 	bl	8006098 <memmove>
 80053b4:	68a3      	ldr	r3, [r4, #8]
 80053b6:	1b9b      	subs	r3, r3, r6
 80053b8:	60a3      	str	r3, [r4, #8]
 80053ba:	6823      	ldr	r3, [r4, #0]
 80053bc:	4433      	add	r3, r6
 80053be:	6023      	str	r3, [r4, #0]
 80053c0:	2000      	movs	r0, #0
 80053c2:	e7db      	b.n	800537c <__ssputs_r+0x58>
 80053c4:	462a      	mov	r2, r5
 80053c6:	f000 fed9 	bl	800617c <_realloc_r>
 80053ca:	4606      	mov	r6, r0
 80053cc:	2800      	cmp	r0, #0
 80053ce:	d1e1      	bne.n	8005394 <__ssputs_r+0x70>
 80053d0:	6921      	ldr	r1, [r4, #16]
 80053d2:	4650      	mov	r0, sl
 80053d4:	f000 fe86 	bl	80060e4 <_free_r>
 80053d8:	e7c7      	b.n	800536a <__ssputs_r+0x46>
	...

080053dc <_svfiprintf_r>:
 80053dc:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80053e0:	4698      	mov	r8, r3
 80053e2:	898b      	ldrh	r3, [r1, #12]
 80053e4:	061b      	lsls	r3, r3, #24
 80053e6:	b09d      	sub	sp, #116	; 0x74
 80053e8:	4607      	mov	r7, r0
 80053ea:	460d      	mov	r5, r1
 80053ec:	4614      	mov	r4, r2
 80053ee:	d50e      	bpl.n	800540e <_svfiprintf_r+0x32>
 80053f0:	690b      	ldr	r3, [r1, #16]
 80053f2:	b963      	cbnz	r3, 800540e <_svfiprintf_r+0x32>
 80053f4:	2140      	movs	r1, #64	; 0x40
 80053f6:	f7ff ff21 	bl	800523c <_malloc_r>
 80053fa:	6028      	str	r0, [r5, #0]
 80053fc:	6128      	str	r0, [r5, #16]
 80053fe:	b920      	cbnz	r0, 800540a <_svfiprintf_r+0x2e>
 8005400:	230c      	movs	r3, #12
 8005402:	603b      	str	r3, [r7, #0]
 8005404:	f04f 30ff 	mov.w	r0, #4294967295
 8005408:	e0d1      	b.n	80055ae <_svfiprintf_r+0x1d2>
 800540a:	2340      	movs	r3, #64	; 0x40
 800540c:	616b      	str	r3, [r5, #20]
 800540e:	2300      	movs	r3, #0
 8005410:	9309      	str	r3, [sp, #36]	; 0x24
 8005412:	2320      	movs	r3, #32
 8005414:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 8005418:	f8cd 800c 	str.w	r8, [sp, #12]
 800541c:	2330      	movs	r3, #48	; 0x30
 800541e:	f8df 81a8 	ldr.w	r8, [pc, #424]	; 80055c8 <_svfiprintf_r+0x1ec>
 8005422:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 8005426:	f04f 0901 	mov.w	r9, #1
 800542a:	4623      	mov	r3, r4
 800542c:	469a      	mov	sl, r3
 800542e:	f813 2b01 	ldrb.w	r2, [r3], #1
 8005432:	b10a      	cbz	r2, 8005438 <_svfiprintf_r+0x5c>
 8005434:	2a25      	cmp	r2, #37	; 0x25
 8005436:	d1f9      	bne.n	800542c <_svfiprintf_r+0x50>
 8005438:	ebba 0b04 	subs.w	fp, sl, r4
 800543c:	d00b      	beq.n	8005456 <_svfiprintf_r+0x7a>
 800543e:	465b      	mov	r3, fp
 8005440:	4622      	mov	r2, r4
 8005442:	4629      	mov	r1, r5
 8005444:	4638      	mov	r0, r7
 8005446:	f7ff ff6d 	bl	8005324 <__ssputs_r>
 800544a:	3001      	adds	r0, #1
 800544c:	f000 80aa 	beq.w	80055a4 <_svfiprintf_r+0x1c8>
 8005450:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8005452:	445a      	add	r2, fp
 8005454:	9209      	str	r2, [sp, #36]	; 0x24
 8005456:	f89a 3000 	ldrb.w	r3, [sl]
 800545a:	2b00      	cmp	r3, #0
 800545c:	f000 80a2 	beq.w	80055a4 <_svfiprintf_r+0x1c8>
 8005460:	2300      	movs	r3, #0
 8005462:	f04f 32ff 	mov.w	r2, #4294967295
 8005466:	e9cd 2305 	strd	r2, r3, [sp, #20]
 800546a:	f10a 0a01 	add.w	sl, sl, #1
 800546e:	9304      	str	r3, [sp, #16]
 8005470:	9307      	str	r3, [sp, #28]
 8005472:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 8005476:	931a      	str	r3, [sp, #104]	; 0x68
 8005478:	4654      	mov	r4, sl
 800547a:	2205      	movs	r2, #5
 800547c:	f814 1b01 	ldrb.w	r1, [r4], #1
 8005480:	4851      	ldr	r0, [pc, #324]	; (80055c8 <_svfiprintf_r+0x1ec>)
 8005482:	f7fa ffed 	bl	8000460 <memchr>
 8005486:	9a04      	ldr	r2, [sp, #16]
 8005488:	b9d8      	cbnz	r0, 80054c2 <_svfiprintf_r+0xe6>
 800548a:	06d0      	lsls	r0, r2, #27
 800548c:	bf44      	itt	mi
 800548e:	2320      	movmi	r3, #32
 8005490:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8005494:	0711      	lsls	r1, r2, #28
 8005496:	bf44      	itt	mi
 8005498:	232b      	movmi	r3, #43	; 0x2b
 800549a:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800549e:	f89a 3000 	ldrb.w	r3, [sl]
 80054a2:	2b2a      	cmp	r3, #42	; 0x2a
 80054a4:	d015      	beq.n	80054d2 <_svfiprintf_r+0xf6>
 80054a6:	9a07      	ldr	r2, [sp, #28]
 80054a8:	4654      	mov	r4, sl
 80054aa:	2000      	movs	r0, #0
 80054ac:	f04f 0c0a 	mov.w	ip, #10
 80054b0:	4621      	mov	r1, r4
 80054b2:	f811 3b01 	ldrb.w	r3, [r1], #1
 80054b6:	3b30      	subs	r3, #48	; 0x30
 80054b8:	2b09      	cmp	r3, #9
 80054ba:	d94e      	bls.n	800555a <_svfiprintf_r+0x17e>
 80054bc:	b1b0      	cbz	r0, 80054ec <_svfiprintf_r+0x110>
 80054be:	9207      	str	r2, [sp, #28]
 80054c0:	e014      	b.n	80054ec <_svfiprintf_r+0x110>
 80054c2:	eba0 0308 	sub.w	r3, r0, r8
 80054c6:	fa09 f303 	lsl.w	r3, r9, r3
 80054ca:	4313      	orrs	r3, r2
 80054cc:	9304      	str	r3, [sp, #16]
 80054ce:	46a2      	mov	sl, r4
 80054d0:	e7d2      	b.n	8005478 <_svfiprintf_r+0x9c>
 80054d2:	9b03      	ldr	r3, [sp, #12]
 80054d4:	1d19      	adds	r1, r3, #4
 80054d6:	681b      	ldr	r3, [r3, #0]
 80054d8:	9103      	str	r1, [sp, #12]
 80054da:	2b00      	cmp	r3, #0
 80054dc:	bfbb      	ittet	lt
 80054de:	425b      	neglt	r3, r3
 80054e0:	f042 0202 	orrlt.w	r2, r2, #2
 80054e4:	9307      	strge	r3, [sp, #28]
 80054e6:	9307      	strlt	r3, [sp, #28]
 80054e8:	bfb8      	it	lt
 80054ea:	9204      	strlt	r2, [sp, #16]
 80054ec:	7823      	ldrb	r3, [r4, #0]
 80054ee:	2b2e      	cmp	r3, #46	; 0x2e
 80054f0:	d10c      	bne.n	800550c <_svfiprintf_r+0x130>
 80054f2:	7863      	ldrb	r3, [r4, #1]
 80054f4:	2b2a      	cmp	r3, #42	; 0x2a
 80054f6:	d135      	bne.n	8005564 <_svfiprintf_r+0x188>
 80054f8:	9b03      	ldr	r3, [sp, #12]
 80054fa:	1d1a      	adds	r2, r3, #4
 80054fc:	681b      	ldr	r3, [r3, #0]
 80054fe:	9203      	str	r2, [sp, #12]
 8005500:	2b00      	cmp	r3, #0
 8005502:	bfb8      	it	lt
 8005504:	f04f 33ff 	movlt.w	r3, #4294967295
 8005508:	3402      	adds	r4, #2
 800550a:	9305      	str	r3, [sp, #20]
 800550c:	f8df a0c8 	ldr.w	sl, [pc, #200]	; 80055d8 <_svfiprintf_r+0x1fc>
 8005510:	7821      	ldrb	r1, [r4, #0]
 8005512:	2203      	movs	r2, #3
 8005514:	4650      	mov	r0, sl
 8005516:	f7fa ffa3 	bl	8000460 <memchr>
 800551a:	b140      	cbz	r0, 800552e <_svfiprintf_r+0x152>
 800551c:	2340      	movs	r3, #64	; 0x40
 800551e:	eba0 000a 	sub.w	r0, r0, sl
 8005522:	fa03 f000 	lsl.w	r0, r3, r0
 8005526:	9b04      	ldr	r3, [sp, #16]
 8005528:	4303      	orrs	r3, r0
 800552a:	3401      	adds	r4, #1
 800552c:	9304      	str	r3, [sp, #16]
 800552e:	f814 1b01 	ldrb.w	r1, [r4], #1
 8005532:	4826      	ldr	r0, [pc, #152]	; (80055cc <_svfiprintf_r+0x1f0>)
 8005534:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 8005538:	2206      	movs	r2, #6
 800553a:	f7fa ff91 	bl	8000460 <memchr>
 800553e:	2800      	cmp	r0, #0
 8005540:	d038      	beq.n	80055b4 <_svfiprintf_r+0x1d8>
 8005542:	4b23      	ldr	r3, [pc, #140]	; (80055d0 <_svfiprintf_r+0x1f4>)
 8005544:	bb1b      	cbnz	r3, 800558e <_svfiprintf_r+0x1b2>
 8005546:	9b03      	ldr	r3, [sp, #12]
 8005548:	3307      	adds	r3, #7
 800554a:	f023 0307 	bic.w	r3, r3, #7
 800554e:	3308      	adds	r3, #8
 8005550:	9303      	str	r3, [sp, #12]
 8005552:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8005554:	4433      	add	r3, r6
 8005556:	9309      	str	r3, [sp, #36]	; 0x24
 8005558:	e767      	b.n	800542a <_svfiprintf_r+0x4e>
 800555a:	fb0c 3202 	mla	r2, ip, r2, r3
 800555e:	460c      	mov	r4, r1
 8005560:	2001      	movs	r0, #1
 8005562:	e7a5      	b.n	80054b0 <_svfiprintf_r+0xd4>
 8005564:	2300      	movs	r3, #0
 8005566:	3401      	adds	r4, #1
 8005568:	9305      	str	r3, [sp, #20]
 800556a:	4619      	mov	r1, r3
 800556c:	f04f 0c0a 	mov.w	ip, #10
 8005570:	4620      	mov	r0, r4
 8005572:	f810 2b01 	ldrb.w	r2, [r0], #1
 8005576:	3a30      	subs	r2, #48	; 0x30
 8005578:	2a09      	cmp	r2, #9
 800557a:	d903      	bls.n	8005584 <_svfiprintf_r+0x1a8>
 800557c:	2b00      	cmp	r3, #0
 800557e:	d0c5      	beq.n	800550c <_svfiprintf_r+0x130>
 8005580:	9105      	str	r1, [sp, #20]
 8005582:	e7c3      	b.n	800550c <_svfiprintf_r+0x130>
 8005584:	fb0c 2101 	mla	r1, ip, r1, r2
 8005588:	4604      	mov	r4, r0
 800558a:	2301      	movs	r3, #1
 800558c:	e7f0      	b.n	8005570 <_svfiprintf_r+0x194>
 800558e:	ab03      	add	r3, sp, #12
 8005590:	9300      	str	r3, [sp, #0]
 8005592:	462a      	mov	r2, r5
 8005594:	4b0f      	ldr	r3, [pc, #60]	; (80055d4 <_svfiprintf_r+0x1f8>)
 8005596:	a904      	add	r1, sp, #16
 8005598:	4638      	mov	r0, r7
 800559a:	f3af 8000 	nop.w
 800559e:	1c42      	adds	r2, r0, #1
 80055a0:	4606      	mov	r6, r0
 80055a2:	d1d6      	bne.n	8005552 <_svfiprintf_r+0x176>
 80055a4:	89ab      	ldrh	r3, [r5, #12]
 80055a6:	065b      	lsls	r3, r3, #25
 80055a8:	f53f af2c 	bmi.w	8005404 <_svfiprintf_r+0x28>
 80055ac:	9809      	ldr	r0, [sp, #36]	; 0x24
 80055ae:	b01d      	add	sp, #116	; 0x74
 80055b0:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80055b4:	ab03      	add	r3, sp, #12
 80055b6:	9300      	str	r3, [sp, #0]
 80055b8:	462a      	mov	r2, r5
 80055ba:	4b06      	ldr	r3, [pc, #24]	; (80055d4 <_svfiprintf_r+0x1f8>)
 80055bc:	a904      	add	r1, sp, #16
 80055be:	4638      	mov	r0, r7
 80055c0:	f000 f9d4 	bl	800596c <_printf_i>
 80055c4:	e7eb      	b.n	800559e <_svfiprintf_r+0x1c2>
 80055c6:	bf00      	nop
 80055c8:	08006460 	.word	0x08006460
 80055cc:	0800646a 	.word	0x0800646a
 80055d0:	00000000 	.word	0x00000000
 80055d4:	08005325 	.word	0x08005325
 80055d8:	08006466 	.word	0x08006466

080055dc <__sfputc_r>:
 80055dc:	6893      	ldr	r3, [r2, #8]
 80055de:	3b01      	subs	r3, #1
 80055e0:	2b00      	cmp	r3, #0
 80055e2:	b410      	push	{r4}
 80055e4:	6093      	str	r3, [r2, #8]
 80055e6:	da08      	bge.n	80055fa <__sfputc_r+0x1e>
 80055e8:	6994      	ldr	r4, [r2, #24]
 80055ea:	42a3      	cmp	r3, r4
 80055ec:	db01      	blt.n	80055f2 <__sfputc_r+0x16>
 80055ee:	290a      	cmp	r1, #10
 80055f0:	d103      	bne.n	80055fa <__sfputc_r+0x1e>
 80055f2:	f85d 4b04 	ldr.w	r4, [sp], #4
 80055f6:	f000 bb33 	b.w	8005c60 <__swbuf_r>
 80055fa:	6813      	ldr	r3, [r2, #0]
 80055fc:	1c58      	adds	r0, r3, #1
 80055fe:	6010      	str	r0, [r2, #0]
 8005600:	7019      	strb	r1, [r3, #0]
 8005602:	4608      	mov	r0, r1
 8005604:	f85d 4b04 	ldr.w	r4, [sp], #4
 8005608:	4770      	bx	lr

0800560a <__sfputs_r>:
 800560a:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800560c:	4606      	mov	r6, r0
 800560e:	460f      	mov	r7, r1
 8005610:	4614      	mov	r4, r2
 8005612:	18d5      	adds	r5, r2, r3
 8005614:	42ac      	cmp	r4, r5
 8005616:	d101      	bne.n	800561c <__sfputs_r+0x12>
 8005618:	2000      	movs	r0, #0
 800561a:	e007      	b.n	800562c <__sfputs_r+0x22>
 800561c:	f814 1b01 	ldrb.w	r1, [r4], #1
 8005620:	463a      	mov	r2, r7
 8005622:	4630      	mov	r0, r6
 8005624:	f7ff ffda 	bl	80055dc <__sfputc_r>
 8005628:	1c43      	adds	r3, r0, #1
 800562a:	d1f3      	bne.n	8005614 <__sfputs_r+0xa>
 800562c:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

08005630 <_vfiprintf_r>:
 8005630:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8005634:	460d      	mov	r5, r1
 8005636:	b09d      	sub	sp, #116	; 0x74
 8005638:	4614      	mov	r4, r2
 800563a:	4698      	mov	r8, r3
 800563c:	4606      	mov	r6, r0
 800563e:	b118      	cbz	r0, 8005648 <_vfiprintf_r+0x18>
 8005640:	6983      	ldr	r3, [r0, #24]
 8005642:	b90b      	cbnz	r3, 8005648 <_vfiprintf_r+0x18>
 8005644:	f7ff fd3a 	bl	80050bc <__sinit>
 8005648:	4b89      	ldr	r3, [pc, #548]	; (8005870 <_vfiprintf_r+0x240>)
 800564a:	429d      	cmp	r5, r3
 800564c:	d11b      	bne.n	8005686 <_vfiprintf_r+0x56>
 800564e:	6875      	ldr	r5, [r6, #4]
 8005650:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8005652:	07d9      	lsls	r1, r3, #31
 8005654:	d405      	bmi.n	8005662 <_vfiprintf_r+0x32>
 8005656:	89ab      	ldrh	r3, [r5, #12]
 8005658:	059a      	lsls	r2, r3, #22
 800565a:	d402      	bmi.n	8005662 <_vfiprintf_r+0x32>
 800565c:	6da8      	ldr	r0, [r5, #88]	; 0x58
 800565e:	f7ff fdcb 	bl	80051f8 <__retarget_lock_acquire_recursive>
 8005662:	89ab      	ldrh	r3, [r5, #12]
 8005664:	071b      	lsls	r3, r3, #28
 8005666:	d501      	bpl.n	800566c <_vfiprintf_r+0x3c>
 8005668:	692b      	ldr	r3, [r5, #16]
 800566a:	b9eb      	cbnz	r3, 80056a8 <_vfiprintf_r+0x78>
 800566c:	4629      	mov	r1, r5
 800566e:	4630      	mov	r0, r6
 8005670:	f000 fb5a 	bl	8005d28 <__swsetup_r>
 8005674:	b1c0      	cbz	r0, 80056a8 <_vfiprintf_r+0x78>
 8005676:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8005678:	07dc      	lsls	r4, r3, #31
 800567a:	d50e      	bpl.n	800569a <_vfiprintf_r+0x6a>
 800567c:	f04f 30ff 	mov.w	r0, #4294967295
 8005680:	b01d      	add	sp, #116	; 0x74
 8005682:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8005686:	4b7b      	ldr	r3, [pc, #492]	; (8005874 <_vfiprintf_r+0x244>)
 8005688:	429d      	cmp	r5, r3
 800568a:	d101      	bne.n	8005690 <_vfiprintf_r+0x60>
 800568c:	68b5      	ldr	r5, [r6, #8]
 800568e:	e7df      	b.n	8005650 <_vfiprintf_r+0x20>
 8005690:	4b79      	ldr	r3, [pc, #484]	; (8005878 <_vfiprintf_r+0x248>)
 8005692:	429d      	cmp	r5, r3
 8005694:	bf08      	it	eq
 8005696:	68f5      	ldreq	r5, [r6, #12]
 8005698:	e7da      	b.n	8005650 <_vfiprintf_r+0x20>
 800569a:	89ab      	ldrh	r3, [r5, #12]
 800569c:	0598      	lsls	r0, r3, #22
 800569e:	d4ed      	bmi.n	800567c <_vfiprintf_r+0x4c>
 80056a0:	6da8      	ldr	r0, [r5, #88]	; 0x58
 80056a2:	f7ff fdaa 	bl	80051fa <__retarget_lock_release_recursive>
 80056a6:	e7e9      	b.n	800567c <_vfiprintf_r+0x4c>
 80056a8:	2300      	movs	r3, #0
 80056aa:	9309      	str	r3, [sp, #36]	; 0x24
 80056ac:	2320      	movs	r3, #32
 80056ae:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 80056b2:	f8cd 800c 	str.w	r8, [sp, #12]
 80056b6:	2330      	movs	r3, #48	; 0x30
 80056b8:	f8df 81c0 	ldr.w	r8, [pc, #448]	; 800587c <_vfiprintf_r+0x24c>
 80056bc:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 80056c0:	f04f 0901 	mov.w	r9, #1
 80056c4:	4623      	mov	r3, r4
 80056c6:	469a      	mov	sl, r3
 80056c8:	f813 2b01 	ldrb.w	r2, [r3], #1
 80056cc:	b10a      	cbz	r2, 80056d2 <_vfiprintf_r+0xa2>
 80056ce:	2a25      	cmp	r2, #37	; 0x25
 80056d0:	d1f9      	bne.n	80056c6 <_vfiprintf_r+0x96>
 80056d2:	ebba 0b04 	subs.w	fp, sl, r4
 80056d6:	d00b      	beq.n	80056f0 <_vfiprintf_r+0xc0>
 80056d8:	465b      	mov	r3, fp
 80056da:	4622      	mov	r2, r4
 80056dc:	4629      	mov	r1, r5
 80056de:	4630      	mov	r0, r6
 80056e0:	f7ff ff93 	bl	800560a <__sfputs_r>
 80056e4:	3001      	adds	r0, #1
 80056e6:	f000 80aa 	beq.w	800583e <_vfiprintf_r+0x20e>
 80056ea:	9a09      	ldr	r2, [sp, #36]	; 0x24
 80056ec:	445a      	add	r2, fp
 80056ee:	9209      	str	r2, [sp, #36]	; 0x24
 80056f0:	f89a 3000 	ldrb.w	r3, [sl]
 80056f4:	2b00      	cmp	r3, #0
 80056f6:	f000 80a2 	beq.w	800583e <_vfiprintf_r+0x20e>
 80056fa:	2300      	movs	r3, #0
 80056fc:	f04f 32ff 	mov.w	r2, #4294967295
 8005700:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8005704:	f10a 0a01 	add.w	sl, sl, #1
 8005708:	9304      	str	r3, [sp, #16]
 800570a:	9307      	str	r3, [sp, #28]
 800570c:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 8005710:	931a      	str	r3, [sp, #104]	; 0x68
 8005712:	4654      	mov	r4, sl
 8005714:	2205      	movs	r2, #5
 8005716:	f814 1b01 	ldrb.w	r1, [r4], #1
 800571a:	4858      	ldr	r0, [pc, #352]	; (800587c <_vfiprintf_r+0x24c>)
 800571c:	f7fa fea0 	bl	8000460 <memchr>
 8005720:	9a04      	ldr	r2, [sp, #16]
 8005722:	b9d8      	cbnz	r0, 800575c <_vfiprintf_r+0x12c>
 8005724:	06d1      	lsls	r1, r2, #27
 8005726:	bf44      	itt	mi
 8005728:	2320      	movmi	r3, #32
 800572a:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800572e:	0713      	lsls	r3, r2, #28
 8005730:	bf44      	itt	mi
 8005732:	232b      	movmi	r3, #43	; 0x2b
 8005734:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8005738:	f89a 3000 	ldrb.w	r3, [sl]
 800573c:	2b2a      	cmp	r3, #42	; 0x2a
 800573e:	d015      	beq.n	800576c <_vfiprintf_r+0x13c>
 8005740:	9a07      	ldr	r2, [sp, #28]
 8005742:	4654      	mov	r4, sl
 8005744:	2000      	movs	r0, #0
 8005746:	f04f 0c0a 	mov.w	ip, #10
 800574a:	4621      	mov	r1, r4
 800574c:	f811 3b01 	ldrb.w	r3, [r1], #1
 8005750:	3b30      	subs	r3, #48	; 0x30
 8005752:	2b09      	cmp	r3, #9
 8005754:	d94e      	bls.n	80057f4 <_vfiprintf_r+0x1c4>
 8005756:	b1b0      	cbz	r0, 8005786 <_vfiprintf_r+0x156>
 8005758:	9207      	str	r2, [sp, #28]
 800575a:	e014      	b.n	8005786 <_vfiprintf_r+0x156>
 800575c:	eba0 0308 	sub.w	r3, r0, r8
 8005760:	fa09 f303 	lsl.w	r3, r9, r3
 8005764:	4313      	orrs	r3, r2
 8005766:	9304      	str	r3, [sp, #16]
 8005768:	46a2      	mov	sl, r4
 800576a:	e7d2      	b.n	8005712 <_vfiprintf_r+0xe2>
 800576c:	9b03      	ldr	r3, [sp, #12]
 800576e:	1d19      	adds	r1, r3, #4
 8005770:	681b      	ldr	r3, [r3, #0]
 8005772:	9103      	str	r1, [sp, #12]
 8005774:	2b00      	cmp	r3, #0
 8005776:	bfbb      	ittet	lt
 8005778:	425b      	neglt	r3, r3
 800577a:	f042 0202 	orrlt.w	r2, r2, #2
 800577e:	9307      	strge	r3, [sp, #28]
 8005780:	9307      	strlt	r3, [sp, #28]
 8005782:	bfb8      	it	lt
 8005784:	9204      	strlt	r2, [sp, #16]
 8005786:	7823      	ldrb	r3, [r4, #0]
 8005788:	2b2e      	cmp	r3, #46	; 0x2e
 800578a:	d10c      	bne.n	80057a6 <_vfiprintf_r+0x176>
 800578c:	7863      	ldrb	r3, [r4, #1]
 800578e:	2b2a      	cmp	r3, #42	; 0x2a
 8005790:	d135      	bne.n	80057fe <_vfiprintf_r+0x1ce>
 8005792:	9b03      	ldr	r3, [sp, #12]
 8005794:	1d1a      	adds	r2, r3, #4
 8005796:	681b      	ldr	r3, [r3, #0]
 8005798:	9203      	str	r2, [sp, #12]
 800579a:	2b00      	cmp	r3, #0
 800579c:	bfb8      	it	lt
 800579e:	f04f 33ff 	movlt.w	r3, #4294967295
 80057a2:	3402      	adds	r4, #2
 80057a4:	9305      	str	r3, [sp, #20]
 80057a6:	f8df a0e4 	ldr.w	sl, [pc, #228]	; 800588c <_vfiprintf_r+0x25c>
 80057aa:	7821      	ldrb	r1, [r4, #0]
 80057ac:	2203      	movs	r2, #3
 80057ae:	4650      	mov	r0, sl
 80057b0:	f7fa fe56 	bl	8000460 <memchr>
 80057b4:	b140      	cbz	r0, 80057c8 <_vfiprintf_r+0x198>
 80057b6:	2340      	movs	r3, #64	; 0x40
 80057b8:	eba0 000a 	sub.w	r0, r0, sl
 80057bc:	fa03 f000 	lsl.w	r0, r3, r0
 80057c0:	9b04      	ldr	r3, [sp, #16]
 80057c2:	4303      	orrs	r3, r0
 80057c4:	3401      	adds	r4, #1
 80057c6:	9304      	str	r3, [sp, #16]
 80057c8:	f814 1b01 	ldrb.w	r1, [r4], #1
 80057cc:	482c      	ldr	r0, [pc, #176]	; (8005880 <_vfiprintf_r+0x250>)
 80057ce:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 80057d2:	2206      	movs	r2, #6
 80057d4:	f7fa fe44 	bl	8000460 <memchr>
 80057d8:	2800      	cmp	r0, #0
 80057da:	d03f      	beq.n	800585c <_vfiprintf_r+0x22c>
 80057dc:	4b29      	ldr	r3, [pc, #164]	; (8005884 <_vfiprintf_r+0x254>)
 80057de:	bb1b      	cbnz	r3, 8005828 <_vfiprintf_r+0x1f8>
 80057e0:	9b03      	ldr	r3, [sp, #12]
 80057e2:	3307      	adds	r3, #7
 80057e4:	f023 0307 	bic.w	r3, r3, #7
 80057e8:	3308      	adds	r3, #8
 80057ea:	9303      	str	r3, [sp, #12]
 80057ec:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80057ee:	443b      	add	r3, r7
 80057f0:	9309      	str	r3, [sp, #36]	; 0x24
 80057f2:	e767      	b.n	80056c4 <_vfiprintf_r+0x94>
 80057f4:	fb0c 3202 	mla	r2, ip, r2, r3
 80057f8:	460c      	mov	r4, r1
 80057fa:	2001      	movs	r0, #1
 80057fc:	e7a5      	b.n	800574a <_vfiprintf_r+0x11a>
 80057fe:	2300      	movs	r3, #0
 8005800:	3401      	adds	r4, #1
 8005802:	9305      	str	r3, [sp, #20]
 8005804:	4619      	mov	r1, r3
 8005806:	f04f 0c0a 	mov.w	ip, #10
 800580a:	4620      	mov	r0, r4
 800580c:	f810 2b01 	ldrb.w	r2, [r0], #1
 8005810:	3a30      	subs	r2, #48	; 0x30
 8005812:	2a09      	cmp	r2, #9
 8005814:	d903      	bls.n	800581e <_vfiprintf_r+0x1ee>
 8005816:	2b00      	cmp	r3, #0
 8005818:	d0c5      	beq.n	80057a6 <_vfiprintf_r+0x176>
 800581a:	9105      	str	r1, [sp, #20]
 800581c:	e7c3      	b.n	80057a6 <_vfiprintf_r+0x176>
 800581e:	fb0c 2101 	mla	r1, ip, r1, r2
 8005822:	4604      	mov	r4, r0
 8005824:	2301      	movs	r3, #1
 8005826:	e7f0      	b.n	800580a <_vfiprintf_r+0x1da>
 8005828:	ab03      	add	r3, sp, #12
 800582a:	9300      	str	r3, [sp, #0]
 800582c:	462a      	mov	r2, r5
 800582e:	4b16      	ldr	r3, [pc, #88]	; (8005888 <_vfiprintf_r+0x258>)
 8005830:	a904      	add	r1, sp, #16
 8005832:	4630      	mov	r0, r6
 8005834:	f3af 8000 	nop.w
 8005838:	4607      	mov	r7, r0
 800583a:	1c78      	adds	r0, r7, #1
 800583c:	d1d6      	bne.n	80057ec <_vfiprintf_r+0x1bc>
 800583e:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8005840:	07d9      	lsls	r1, r3, #31
 8005842:	d405      	bmi.n	8005850 <_vfiprintf_r+0x220>
 8005844:	89ab      	ldrh	r3, [r5, #12]
 8005846:	059a      	lsls	r2, r3, #22
 8005848:	d402      	bmi.n	8005850 <_vfiprintf_r+0x220>
 800584a:	6da8      	ldr	r0, [r5, #88]	; 0x58
 800584c:	f7ff fcd5 	bl	80051fa <__retarget_lock_release_recursive>
 8005850:	89ab      	ldrh	r3, [r5, #12]
 8005852:	065b      	lsls	r3, r3, #25
 8005854:	f53f af12 	bmi.w	800567c <_vfiprintf_r+0x4c>
 8005858:	9809      	ldr	r0, [sp, #36]	; 0x24
 800585a:	e711      	b.n	8005680 <_vfiprintf_r+0x50>
 800585c:	ab03      	add	r3, sp, #12
 800585e:	9300      	str	r3, [sp, #0]
 8005860:	462a      	mov	r2, r5
 8005862:	4b09      	ldr	r3, [pc, #36]	; (8005888 <_vfiprintf_r+0x258>)
 8005864:	a904      	add	r1, sp, #16
 8005866:	4630      	mov	r0, r6
 8005868:	f000 f880 	bl	800596c <_printf_i>
 800586c:	e7e4      	b.n	8005838 <_vfiprintf_r+0x208>
 800586e:	bf00      	nop
 8005870:	08006420 	.word	0x08006420
 8005874:	08006440 	.word	0x08006440
 8005878:	08006400 	.word	0x08006400
 800587c:	08006460 	.word	0x08006460
 8005880:	0800646a 	.word	0x0800646a
 8005884:	00000000 	.word	0x00000000
 8005888:	0800560b 	.word	0x0800560b
 800588c:	08006466 	.word	0x08006466

08005890 <_printf_common>:
 8005890:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8005894:	4616      	mov	r6, r2
 8005896:	4699      	mov	r9, r3
 8005898:	688a      	ldr	r2, [r1, #8]
 800589a:	690b      	ldr	r3, [r1, #16]
 800589c:	f8dd 8020 	ldr.w	r8, [sp, #32]
 80058a0:	4293      	cmp	r3, r2
 80058a2:	bfb8      	it	lt
 80058a4:	4613      	movlt	r3, r2
 80058a6:	6033      	str	r3, [r6, #0]
 80058a8:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 80058ac:	4607      	mov	r7, r0
 80058ae:	460c      	mov	r4, r1
 80058b0:	b10a      	cbz	r2, 80058b6 <_printf_common+0x26>
 80058b2:	3301      	adds	r3, #1
 80058b4:	6033      	str	r3, [r6, #0]
 80058b6:	6823      	ldr	r3, [r4, #0]
 80058b8:	0699      	lsls	r1, r3, #26
 80058ba:	bf42      	ittt	mi
 80058bc:	6833      	ldrmi	r3, [r6, #0]
 80058be:	3302      	addmi	r3, #2
 80058c0:	6033      	strmi	r3, [r6, #0]
 80058c2:	6825      	ldr	r5, [r4, #0]
 80058c4:	f015 0506 	ands.w	r5, r5, #6
 80058c8:	d106      	bne.n	80058d8 <_printf_common+0x48>
 80058ca:	f104 0a19 	add.w	sl, r4, #25
 80058ce:	68e3      	ldr	r3, [r4, #12]
 80058d0:	6832      	ldr	r2, [r6, #0]
 80058d2:	1a9b      	subs	r3, r3, r2
 80058d4:	42ab      	cmp	r3, r5
 80058d6:	dc26      	bgt.n	8005926 <_printf_common+0x96>
 80058d8:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 80058dc:	1e13      	subs	r3, r2, #0
 80058de:	6822      	ldr	r2, [r4, #0]
 80058e0:	bf18      	it	ne
 80058e2:	2301      	movne	r3, #1
 80058e4:	0692      	lsls	r2, r2, #26
 80058e6:	d42b      	bmi.n	8005940 <_printf_common+0xb0>
 80058e8:	f104 0243 	add.w	r2, r4, #67	; 0x43
 80058ec:	4649      	mov	r1, r9
 80058ee:	4638      	mov	r0, r7
 80058f0:	47c0      	blx	r8
 80058f2:	3001      	adds	r0, #1
 80058f4:	d01e      	beq.n	8005934 <_printf_common+0xa4>
 80058f6:	6823      	ldr	r3, [r4, #0]
 80058f8:	68e5      	ldr	r5, [r4, #12]
 80058fa:	6832      	ldr	r2, [r6, #0]
 80058fc:	f003 0306 	and.w	r3, r3, #6
 8005900:	2b04      	cmp	r3, #4
 8005902:	bf08      	it	eq
 8005904:	1aad      	subeq	r5, r5, r2
 8005906:	68a3      	ldr	r3, [r4, #8]
 8005908:	6922      	ldr	r2, [r4, #16]
 800590a:	bf0c      	ite	eq
 800590c:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8005910:	2500      	movne	r5, #0
 8005912:	4293      	cmp	r3, r2
 8005914:	bfc4      	itt	gt
 8005916:	1a9b      	subgt	r3, r3, r2
 8005918:	18ed      	addgt	r5, r5, r3
 800591a:	2600      	movs	r6, #0
 800591c:	341a      	adds	r4, #26
 800591e:	42b5      	cmp	r5, r6
 8005920:	d11a      	bne.n	8005958 <_printf_common+0xc8>
 8005922:	2000      	movs	r0, #0
 8005924:	e008      	b.n	8005938 <_printf_common+0xa8>
 8005926:	2301      	movs	r3, #1
 8005928:	4652      	mov	r2, sl
 800592a:	4649      	mov	r1, r9
 800592c:	4638      	mov	r0, r7
 800592e:	47c0      	blx	r8
 8005930:	3001      	adds	r0, #1
 8005932:	d103      	bne.n	800593c <_printf_common+0xac>
 8005934:	f04f 30ff 	mov.w	r0, #4294967295
 8005938:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800593c:	3501      	adds	r5, #1
 800593e:	e7c6      	b.n	80058ce <_printf_common+0x3e>
 8005940:	18e1      	adds	r1, r4, r3
 8005942:	1c5a      	adds	r2, r3, #1
 8005944:	2030      	movs	r0, #48	; 0x30
 8005946:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 800594a:	4422      	add	r2, r4
 800594c:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 8005950:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 8005954:	3302      	adds	r3, #2
 8005956:	e7c7      	b.n	80058e8 <_printf_common+0x58>
 8005958:	2301      	movs	r3, #1
 800595a:	4622      	mov	r2, r4
 800595c:	4649      	mov	r1, r9
 800595e:	4638      	mov	r0, r7
 8005960:	47c0      	blx	r8
 8005962:	3001      	adds	r0, #1
 8005964:	d0e6      	beq.n	8005934 <_printf_common+0xa4>
 8005966:	3601      	adds	r6, #1
 8005968:	e7d9      	b.n	800591e <_printf_common+0x8e>
	...

0800596c <_printf_i>:
 800596c:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8005970:	7e0f      	ldrb	r7, [r1, #24]
 8005972:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 8005974:	2f78      	cmp	r7, #120	; 0x78
 8005976:	4691      	mov	r9, r2
 8005978:	4680      	mov	r8, r0
 800597a:	460c      	mov	r4, r1
 800597c:	469a      	mov	sl, r3
 800597e:	f101 0243 	add.w	r2, r1, #67	; 0x43
 8005982:	d807      	bhi.n	8005994 <_printf_i+0x28>
 8005984:	2f62      	cmp	r7, #98	; 0x62
 8005986:	d80a      	bhi.n	800599e <_printf_i+0x32>
 8005988:	2f00      	cmp	r7, #0
 800598a:	f000 80d8 	beq.w	8005b3e <_printf_i+0x1d2>
 800598e:	2f58      	cmp	r7, #88	; 0x58
 8005990:	f000 80a3 	beq.w	8005ada <_printf_i+0x16e>
 8005994:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8005998:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 800599c:	e03a      	b.n	8005a14 <_printf_i+0xa8>
 800599e:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 80059a2:	2b15      	cmp	r3, #21
 80059a4:	d8f6      	bhi.n	8005994 <_printf_i+0x28>
 80059a6:	a101      	add	r1, pc, #4	; (adr r1, 80059ac <_printf_i+0x40>)
 80059a8:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 80059ac:	08005a05 	.word	0x08005a05
 80059b0:	08005a19 	.word	0x08005a19
 80059b4:	08005995 	.word	0x08005995
 80059b8:	08005995 	.word	0x08005995
 80059bc:	08005995 	.word	0x08005995
 80059c0:	08005995 	.word	0x08005995
 80059c4:	08005a19 	.word	0x08005a19
 80059c8:	08005995 	.word	0x08005995
 80059cc:	08005995 	.word	0x08005995
 80059d0:	08005995 	.word	0x08005995
 80059d4:	08005995 	.word	0x08005995
 80059d8:	08005b25 	.word	0x08005b25
 80059dc:	08005a49 	.word	0x08005a49
 80059e0:	08005b07 	.word	0x08005b07
 80059e4:	08005995 	.word	0x08005995
 80059e8:	08005995 	.word	0x08005995
 80059ec:	08005b47 	.word	0x08005b47
 80059f0:	08005995 	.word	0x08005995
 80059f4:	08005a49 	.word	0x08005a49
 80059f8:	08005995 	.word	0x08005995
 80059fc:	08005995 	.word	0x08005995
 8005a00:	08005b0f 	.word	0x08005b0f
 8005a04:	682b      	ldr	r3, [r5, #0]
 8005a06:	1d1a      	adds	r2, r3, #4
 8005a08:	681b      	ldr	r3, [r3, #0]
 8005a0a:	602a      	str	r2, [r5, #0]
 8005a0c:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8005a10:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 8005a14:	2301      	movs	r3, #1
 8005a16:	e0a3      	b.n	8005b60 <_printf_i+0x1f4>
 8005a18:	6820      	ldr	r0, [r4, #0]
 8005a1a:	6829      	ldr	r1, [r5, #0]
 8005a1c:	0606      	lsls	r6, r0, #24
 8005a1e:	f101 0304 	add.w	r3, r1, #4
 8005a22:	d50a      	bpl.n	8005a3a <_printf_i+0xce>
 8005a24:	680e      	ldr	r6, [r1, #0]
 8005a26:	602b      	str	r3, [r5, #0]
 8005a28:	2e00      	cmp	r6, #0
 8005a2a:	da03      	bge.n	8005a34 <_printf_i+0xc8>
 8005a2c:	232d      	movs	r3, #45	; 0x2d
 8005a2e:	4276      	negs	r6, r6
 8005a30:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8005a34:	485e      	ldr	r0, [pc, #376]	; (8005bb0 <_printf_i+0x244>)
 8005a36:	230a      	movs	r3, #10
 8005a38:	e019      	b.n	8005a6e <_printf_i+0x102>
 8005a3a:	680e      	ldr	r6, [r1, #0]
 8005a3c:	602b      	str	r3, [r5, #0]
 8005a3e:	f010 0f40 	tst.w	r0, #64	; 0x40
 8005a42:	bf18      	it	ne
 8005a44:	b236      	sxthne	r6, r6
 8005a46:	e7ef      	b.n	8005a28 <_printf_i+0xbc>
 8005a48:	682b      	ldr	r3, [r5, #0]
 8005a4a:	6820      	ldr	r0, [r4, #0]
 8005a4c:	1d19      	adds	r1, r3, #4
 8005a4e:	6029      	str	r1, [r5, #0]
 8005a50:	0601      	lsls	r1, r0, #24
 8005a52:	d501      	bpl.n	8005a58 <_printf_i+0xec>
 8005a54:	681e      	ldr	r6, [r3, #0]
 8005a56:	e002      	b.n	8005a5e <_printf_i+0xf2>
 8005a58:	0646      	lsls	r6, r0, #25
 8005a5a:	d5fb      	bpl.n	8005a54 <_printf_i+0xe8>
 8005a5c:	881e      	ldrh	r6, [r3, #0]
 8005a5e:	4854      	ldr	r0, [pc, #336]	; (8005bb0 <_printf_i+0x244>)
 8005a60:	2f6f      	cmp	r7, #111	; 0x6f
 8005a62:	bf0c      	ite	eq
 8005a64:	2308      	moveq	r3, #8
 8005a66:	230a      	movne	r3, #10
 8005a68:	2100      	movs	r1, #0
 8005a6a:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 8005a6e:	6865      	ldr	r5, [r4, #4]
 8005a70:	60a5      	str	r5, [r4, #8]
 8005a72:	2d00      	cmp	r5, #0
 8005a74:	bfa2      	ittt	ge
 8005a76:	6821      	ldrge	r1, [r4, #0]
 8005a78:	f021 0104 	bicge.w	r1, r1, #4
 8005a7c:	6021      	strge	r1, [r4, #0]
 8005a7e:	b90e      	cbnz	r6, 8005a84 <_printf_i+0x118>
 8005a80:	2d00      	cmp	r5, #0
 8005a82:	d04d      	beq.n	8005b20 <_printf_i+0x1b4>
 8005a84:	4615      	mov	r5, r2
 8005a86:	fbb6 f1f3 	udiv	r1, r6, r3
 8005a8a:	fb03 6711 	mls	r7, r3, r1, r6
 8005a8e:	5dc7      	ldrb	r7, [r0, r7]
 8005a90:	f805 7d01 	strb.w	r7, [r5, #-1]!
 8005a94:	4637      	mov	r7, r6
 8005a96:	42bb      	cmp	r3, r7
 8005a98:	460e      	mov	r6, r1
 8005a9a:	d9f4      	bls.n	8005a86 <_printf_i+0x11a>
 8005a9c:	2b08      	cmp	r3, #8
 8005a9e:	d10b      	bne.n	8005ab8 <_printf_i+0x14c>
 8005aa0:	6823      	ldr	r3, [r4, #0]
 8005aa2:	07de      	lsls	r6, r3, #31
 8005aa4:	d508      	bpl.n	8005ab8 <_printf_i+0x14c>
 8005aa6:	6923      	ldr	r3, [r4, #16]
 8005aa8:	6861      	ldr	r1, [r4, #4]
 8005aaa:	4299      	cmp	r1, r3
 8005aac:	bfde      	ittt	le
 8005aae:	2330      	movle	r3, #48	; 0x30
 8005ab0:	f805 3c01 	strble.w	r3, [r5, #-1]
 8005ab4:	f105 35ff 	addle.w	r5, r5, #4294967295
 8005ab8:	1b52      	subs	r2, r2, r5
 8005aba:	6122      	str	r2, [r4, #16]
 8005abc:	f8cd a000 	str.w	sl, [sp]
 8005ac0:	464b      	mov	r3, r9
 8005ac2:	aa03      	add	r2, sp, #12
 8005ac4:	4621      	mov	r1, r4
 8005ac6:	4640      	mov	r0, r8
 8005ac8:	f7ff fee2 	bl	8005890 <_printf_common>
 8005acc:	3001      	adds	r0, #1
 8005ace:	d14c      	bne.n	8005b6a <_printf_i+0x1fe>
 8005ad0:	f04f 30ff 	mov.w	r0, #4294967295
 8005ad4:	b004      	add	sp, #16
 8005ad6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8005ada:	4835      	ldr	r0, [pc, #212]	; (8005bb0 <_printf_i+0x244>)
 8005adc:	f881 7045 	strb.w	r7, [r1, #69]	; 0x45
 8005ae0:	6829      	ldr	r1, [r5, #0]
 8005ae2:	6823      	ldr	r3, [r4, #0]
 8005ae4:	f851 6b04 	ldr.w	r6, [r1], #4
 8005ae8:	6029      	str	r1, [r5, #0]
 8005aea:	061d      	lsls	r5, r3, #24
 8005aec:	d514      	bpl.n	8005b18 <_printf_i+0x1ac>
 8005aee:	07df      	lsls	r7, r3, #31
 8005af0:	bf44      	itt	mi
 8005af2:	f043 0320 	orrmi.w	r3, r3, #32
 8005af6:	6023      	strmi	r3, [r4, #0]
 8005af8:	b91e      	cbnz	r6, 8005b02 <_printf_i+0x196>
 8005afa:	6823      	ldr	r3, [r4, #0]
 8005afc:	f023 0320 	bic.w	r3, r3, #32
 8005b00:	6023      	str	r3, [r4, #0]
 8005b02:	2310      	movs	r3, #16
 8005b04:	e7b0      	b.n	8005a68 <_printf_i+0xfc>
 8005b06:	6823      	ldr	r3, [r4, #0]
 8005b08:	f043 0320 	orr.w	r3, r3, #32
 8005b0c:	6023      	str	r3, [r4, #0]
 8005b0e:	2378      	movs	r3, #120	; 0x78
 8005b10:	4828      	ldr	r0, [pc, #160]	; (8005bb4 <_printf_i+0x248>)
 8005b12:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 8005b16:	e7e3      	b.n	8005ae0 <_printf_i+0x174>
 8005b18:	0659      	lsls	r1, r3, #25
 8005b1a:	bf48      	it	mi
 8005b1c:	b2b6      	uxthmi	r6, r6
 8005b1e:	e7e6      	b.n	8005aee <_printf_i+0x182>
 8005b20:	4615      	mov	r5, r2
 8005b22:	e7bb      	b.n	8005a9c <_printf_i+0x130>
 8005b24:	682b      	ldr	r3, [r5, #0]
 8005b26:	6826      	ldr	r6, [r4, #0]
 8005b28:	6961      	ldr	r1, [r4, #20]
 8005b2a:	1d18      	adds	r0, r3, #4
 8005b2c:	6028      	str	r0, [r5, #0]
 8005b2e:	0635      	lsls	r5, r6, #24
 8005b30:	681b      	ldr	r3, [r3, #0]
 8005b32:	d501      	bpl.n	8005b38 <_printf_i+0x1cc>
 8005b34:	6019      	str	r1, [r3, #0]
 8005b36:	e002      	b.n	8005b3e <_printf_i+0x1d2>
 8005b38:	0670      	lsls	r0, r6, #25
 8005b3a:	d5fb      	bpl.n	8005b34 <_printf_i+0x1c8>
 8005b3c:	8019      	strh	r1, [r3, #0]
 8005b3e:	2300      	movs	r3, #0
 8005b40:	6123      	str	r3, [r4, #16]
 8005b42:	4615      	mov	r5, r2
 8005b44:	e7ba      	b.n	8005abc <_printf_i+0x150>
 8005b46:	682b      	ldr	r3, [r5, #0]
 8005b48:	1d1a      	adds	r2, r3, #4
 8005b4a:	602a      	str	r2, [r5, #0]
 8005b4c:	681d      	ldr	r5, [r3, #0]
 8005b4e:	6862      	ldr	r2, [r4, #4]
 8005b50:	2100      	movs	r1, #0
 8005b52:	4628      	mov	r0, r5
 8005b54:	f7fa fc84 	bl	8000460 <memchr>
 8005b58:	b108      	cbz	r0, 8005b5e <_printf_i+0x1f2>
 8005b5a:	1b40      	subs	r0, r0, r5
 8005b5c:	6060      	str	r0, [r4, #4]
 8005b5e:	6863      	ldr	r3, [r4, #4]
 8005b60:	6123      	str	r3, [r4, #16]
 8005b62:	2300      	movs	r3, #0
 8005b64:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8005b68:	e7a8      	b.n	8005abc <_printf_i+0x150>
 8005b6a:	6923      	ldr	r3, [r4, #16]
 8005b6c:	462a      	mov	r2, r5
 8005b6e:	4649      	mov	r1, r9
 8005b70:	4640      	mov	r0, r8
 8005b72:	47d0      	blx	sl
 8005b74:	3001      	adds	r0, #1
 8005b76:	d0ab      	beq.n	8005ad0 <_printf_i+0x164>
 8005b78:	6823      	ldr	r3, [r4, #0]
 8005b7a:	079b      	lsls	r3, r3, #30
 8005b7c:	d413      	bmi.n	8005ba6 <_printf_i+0x23a>
 8005b7e:	68e0      	ldr	r0, [r4, #12]
 8005b80:	9b03      	ldr	r3, [sp, #12]
 8005b82:	4298      	cmp	r0, r3
 8005b84:	bfb8      	it	lt
 8005b86:	4618      	movlt	r0, r3
 8005b88:	e7a4      	b.n	8005ad4 <_printf_i+0x168>
 8005b8a:	2301      	movs	r3, #1
 8005b8c:	4632      	mov	r2, r6
 8005b8e:	4649      	mov	r1, r9
 8005b90:	4640      	mov	r0, r8
 8005b92:	47d0      	blx	sl
 8005b94:	3001      	adds	r0, #1
 8005b96:	d09b      	beq.n	8005ad0 <_printf_i+0x164>
 8005b98:	3501      	adds	r5, #1
 8005b9a:	68e3      	ldr	r3, [r4, #12]
 8005b9c:	9903      	ldr	r1, [sp, #12]
 8005b9e:	1a5b      	subs	r3, r3, r1
 8005ba0:	42ab      	cmp	r3, r5
 8005ba2:	dcf2      	bgt.n	8005b8a <_printf_i+0x21e>
 8005ba4:	e7eb      	b.n	8005b7e <_printf_i+0x212>
 8005ba6:	2500      	movs	r5, #0
 8005ba8:	f104 0619 	add.w	r6, r4, #25
 8005bac:	e7f5      	b.n	8005b9a <_printf_i+0x22e>
 8005bae:	bf00      	nop
 8005bb0:	08006471 	.word	0x08006471
 8005bb4:	08006482 	.word	0x08006482

08005bb8 <_sbrk_r>:
 8005bb8:	b538      	push	{r3, r4, r5, lr}
 8005bba:	4d06      	ldr	r5, [pc, #24]	; (8005bd4 <_sbrk_r+0x1c>)
 8005bbc:	2300      	movs	r3, #0
 8005bbe:	4604      	mov	r4, r0
 8005bc0:	4608      	mov	r0, r1
 8005bc2:	602b      	str	r3, [r5, #0]
 8005bc4:	f7fb fa4c 	bl	8001060 <_sbrk>
 8005bc8:	1c43      	adds	r3, r0, #1
 8005bca:	d102      	bne.n	8005bd2 <_sbrk_r+0x1a>
 8005bcc:	682b      	ldr	r3, [r5, #0]
 8005bce:	b103      	cbz	r3, 8005bd2 <_sbrk_r+0x1a>
 8005bd0:	6023      	str	r3, [r4, #0]
 8005bd2:	bd38      	pop	{r3, r4, r5, pc}
 8005bd4:	20008288 	.word	0x20008288

08005bd8 <__sread>:
 8005bd8:	b510      	push	{r4, lr}
 8005bda:	460c      	mov	r4, r1
 8005bdc:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8005be0:	f000 fafc 	bl	80061dc <_read_r>
 8005be4:	2800      	cmp	r0, #0
 8005be6:	bfab      	itete	ge
 8005be8:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 8005bea:	89a3      	ldrhlt	r3, [r4, #12]
 8005bec:	181b      	addge	r3, r3, r0
 8005bee:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 8005bf2:	bfac      	ite	ge
 8005bf4:	6563      	strge	r3, [r4, #84]	; 0x54
 8005bf6:	81a3      	strhlt	r3, [r4, #12]
 8005bf8:	bd10      	pop	{r4, pc}

08005bfa <__swrite>:
 8005bfa:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8005bfe:	461f      	mov	r7, r3
 8005c00:	898b      	ldrh	r3, [r1, #12]
 8005c02:	05db      	lsls	r3, r3, #23
 8005c04:	4605      	mov	r5, r0
 8005c06:	460c      	mov	r4, r1
 8005c08:	4616      	mov	r6, r2
 8005c0a:	d505      	bpl.n	8005c18 <__swrite+0x1e>
 8005c0c:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8005c10:	2302      	movs	r3, #2
 8005c12:	2200      	movs	r2, #0
 8005c14:	f000 f9c8 	bl	8005fa8 <_lseek_r>
 8005c18:	89a3      	ldrh	r3, [r4, #12]
 8005c1a:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8005c1e:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8005c22:	81a3      	strh	r3, [r4, #12]
 8005c24:	4632      	mov	r2, r6
 8005c26:	463b      	mov	r3, r7
 8005c28:	4628      	mov	r0, r5
 8005c2a:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8005c2e:	f000 b869 	b.w	8005d04 <_write_r>

08005c32 <__sseek>:
 8005c32:	b510      	push	{r4, lr}
 8005c34:	460c      	mov	r4, r1
 8005c36:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8005c3a:	f000 f9b5 	bl	8005fa8 <_lseek_r>
 8005c3e:	1c43      	adds	r3, r0, #1
 8005c40:	89a3      	ldrh	r3, [r4, #12]
 8005c42:	bf15      	itete	ne
 8005c44:	6560      	strne	r0, [r4, #84]	; 0x54
 8005c46:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 8005c4a:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 8005c4e:	81a3      	strheq	r3, [r4, #12]
 8005c50:	bf18      	it	ne
 8005c52:	81a3      	strhne	r3, [r4, #12]
 8005c54:	bd10      	pop	{r4, pc}

08005c56 <__sclose>:
 8005c56:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8005c5a:	f000 b8d3 	b.w	8005e04 <_close_r>
	...

08005c60 <__swbuf_r>:
 8005c60:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8005c62:	460e      	mov	r6, r1
 8005c64:	4614      	mov	r4, r2
 8005c66:	4605      	mov	r5, r0
 8005c68:	b118      	cbz	r0, 8005c72 <__swbuf_r+0x12>
 8005c6a:	6983      	ldr	r3, [r0, #24]
 8005c6c:	b90b      	cbnz	r3, 8005c72 <__swbuf_r+0x12>
 8005c6e:	f7ff fa25 	bl	80050bc <__sinit>
 8005c72:	4b21      	ldr	r3, [pc, #132]	; (8005cf8 <__swbuf_r+0x98>)
 8005c74:	429c      	cmp	r4, r3
 8005c76:	d12b      	bne.n	8005cd0 <__swbuf_r+0x70>
 8005c78:	686c      	ldr	r4, [r5, #4]
 8005c7a:	69a3      	ldr	r3, [r4, #24]
 8005c7c:	60a3      	str	r3, [r4, #8]
 8005c7e:	89a3      	ldrh	r3, [r4, #12]
 8005c80:	071a      	lsls	r2, r3, #28
 8005c82:	d52f      	bpl.n	8005ce4 <__swbuf_r+0x84>
 8005c84:	6923      	ldr	r3, [r4, #16]
 8005c86:	b36b      	cbz	r3, 8005ce4 <__swbuf_r+0x84>
 8005c88:	6923      	ldr	r3, [r4, #16]
 8005c8a:	6820      	ldr	r0, [r4, #0]
 8005c8c:	1ac0      	subs	r0, r0, r3
 8005c8e:	6963      	ldr	r3, [r4, #20]
 8005c90:	b2f6      	uxtb	r6, r6
 8005c92:	4283      	cmp	r3, r0
 8005c94:	4637      	mov	r7, r6
 8005c96:	dc04      	bgt.n	8005ca2 <__swbuf_r+0x42>
 8005c98:	4621      	mov	r1, r4
 8005c9a:	4628      	mov	r0, r5
 8005c9c:	f000 f948 	bl	8005f30 <_fflush_r>
 8005ca0:	bb30      	cbnz	r0, 8005cf0 <__swbuf_r+0x90>
 8005ca2:	68a3      	ldr	r3, [r4, #8]
 8005ca4:	3b01      	subs	r3, #1
 8005ca6:	60a3      	str	r3, [r4, #8]
 8005ca8:	6823      	ldr	r3, [r4, #0]
 8005caa:	1c5a      	adds	r2, r3, #1
 8005cac:	6022      	str	r2, [r4, #0]
 8005cae:	701e      	strb	r6, [r3, #0]
 8005cb0:	6963      	ldr	r3, [r4, #20]
 8005cb2:	3001      	adds	r0, #1
 8005cb4:	4283      	cmp	r3, r0
 8005cb6:	d004      	beq.n	8005cc2 <__swbuf_r+0x62>
 8005cb8:	89a3      	ldrh	r3, [r4, #12]
 8005cba:	07db      	lsls	r3, r3, #31
 8005cbc:	d506      	bpl.n	8005ccc <__swbuf_r+0x6c>
 8005cbe:	2e0a      	cmp	r6, #10
 8005cc0:	d104      	bne.n	8005ccc <__swbuf_r+0x6c>
 8005cc2:	4621      	mov	r1, r4
 8005cc4:	4628      	mov	r0, r5
 8005cc6:	f000 f933 	bl	8005f30 <_fflush_r>
 8005cca:	b988      	cbnz	r0, 8005cf0 <__swbuf_r+0x90>
 8005ccc:	4638      	mov	r0, r7
 8005cce:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8005cd0:	4b0a      	ldr	r3, [pc, #40]	; (8005cfc <__swbuf_r+0x9c>)
 8005cd2:	429c      	cmp	r4, r3
 8005cd4:	d101      	bne.n	8005cda <__swbuf_r+0x7a>
 8005cd6:	68ac      	ldr	r4, [r5, #8]
 8005cd8:	e7cf      	b.n	8005c7a <__swbuf_r+0x1a>
 8005cda:	4b09      	ldr	r3, [pc, #36]	; (8005d00 <__swbuf_r+0xa0>)
 8005cdc:	429c      	cmp	r4, r3
 8005cde:	bf08      	it	eq
 8005ce0:	68ec      	ldreq	r4, [r5, #12]
 8005ce2:	e7ca      	b.n	8005c7a <__swbuf_r+0x1a>
 8005ce4:	4621      	mov	r1, r4
 8005ce6:	4628      	mov	r0, r5
 8005ce8:	f000 f81e 	bl	8005d28 <__swsetup_r>
 8005cec:	2800      	cmp	r0, #0
 8005cee:	d0cb      	beq.n	8005c88 <__swbuf_r+0x28>
 8005cf0:	f04f 37ff 	mov.w	r7, #4294967295
 8005cf4:	e7ea      	b.n	8005ccc <__swbuf_r+0x6c>
 8005cf6:	bf00      	nop
 8005cf8:	08006420 	.word	0x08006420
 8005cfc:	08006440 	.word	0x08006440
 8005d00:	08006400 	.word	0x08006400

08005d04 <_write_r>:
 8005d04:	b538      	push	{r3, r4, r5, lr}
 8005d06:	4d07      	ldr	r5, [pc, #28]	; (8005d24 <_write_r+0x20>)
 8005d08:	4604      	mov	r4, r0
 8005d0a:	4608      	mov	r0, r1
 8005d0c:	4611      	mov	r1, r2
 8005d0e:	2200      	movs	r2, #0
 8005d10:	602a      	str	r2, [r5, #0]
 8005d12:	461a      	mov	r2, r3
 8005d14:	f7fa fdac 	bl	8000870 <_write>
 8005d18:	1c43      	adds	r3, r0, #1
 8005d1a:	d102      	bne.n	8005d22 <_write_r+0x1e>
 8005d1c:	682b      	ldr	r3, [r5, #0]
 8005d1e:	b103      	cbz	r3, 8005d22 <_write_r+0x1e>
 8005d20:	6023      	str	r3, [r4, #0]
 8005d22:	bd38      	pop	{r3, r4, r5, pc}
 8005d24:	20008288 	.word	0x20008288

08005d28 <__swsetup_r>:
 8005d28:	4b32      	ldr	r3, [pc, #200]	; (8005df4 <__swsetup_r+0xcc>)
 8005d2a:	b570      	push	{r4, r5, r6, lr}
 8005d2c:	681d      	ldr	r5, [r3, #0]
 8005d2e:	4606      	mov	r6, r0
 8005d30:	460c      	mov	r4, r1
 8005d32:	b125      	cbz	r5, 8005d3e <__swsetup_r+0x16>
 8005d34:	69ab      	ldr	r3, [r5, #24]
 8005d36:	b913      	cbnz	r3, 8005d3e <__swsetup_r+0x16>
 8005d38:	4628      	mov	r0, r5
 8005d3a:	f7ff f9bf 	bl	80050bc <__sinit>
 8005d3e:	4b2e      	ldr	r3, [pc, #184]	; (8005df8 <__swsetup_r+0xd0>)
 8005d40:	429c      	cmp	r4, r3
 8005d42:	d10f      	bne.n	8005d64 <__swsetup_r+0x3c>
 8005d44:	686c      	ldr	r4, [r5, #4]
 8005d46:	89a3      	ldrh	r3, [r4, #12]
 8005d48:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 8005d4c:	0719      	lsls	r1, r3, #28
 8005d4e:	d42c      	bmi.n	8005daa <__swsetup_r+0x82>
 8005d50:	06dd      	lsls	r5, r3, #27
 8005d52:	d411      	bmi.n	8005d78 <__swsetup_r+0x50>
 8005d54:	2309      	movs	r3, #9
 8005d56:	6033      	str	r3, [r6, #0]
 8005d58:	f042 0340 	orr.w	r3, r2, #64	; 0x40
 8005d5c:	81a3      	strh	r3, [r4, #12]
 8005d5e:	f04f 30ff 	mov.w	r0, #4294967295
 8005d62:	e03e      	b.n	8005de2 <__swsetup_r+0xba>
 8005d64:	4b25      	ldr	r3, [pc, #148]	; (8005dfc <__swsetup_r+0xd4>)
 8005d66:	429c      	cmp	r4, r3
 8005d68:	d101      	bne.n	8005d6e <__swsetup_r+0x46>
 8005d6a:	68ac      	ldr	r4, [r5, #8]
 8005d6c:	e7eb      	b.n	8005d46 <__swsetup_r+0x1e>
 8005d6e:	4b24      	ldr	r3, [pc, #144]	; (8005e00 <__swsetup_r+0xd8>)
 8005d70:	429c      	cmp	r4, r3
 8005d72:	bf08      	it	eq
 8005d74:	68ec      	ldreq	r4, [r5, #12]
 8005d76:	e7e6      	b.n	8005d46 <__swsetup_r+0x1e>
 8005d78:	0758      	lsls	r0, r3, #29
 8005d7a:	d512      	bpl.n	8005da2 <__swsetup_r+0x7a>
 8005d7c:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8005d7e:	b141      	cbz	r1, 8005d92 <__swsetup_r+0x6a>
 8005d80:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8005d84:	4299      	cmp	r1, r3
 8005d86:	d002      	beq.n	8005d8e <__swsetup_r+0x66>
 8005d88:	4630      	mov	r0, r6
 8005d8a:	f000 f9ab 	bl	80060e4 <_free_r>
 8005d8e:	2300      	movs	r3, #0
 8005d90:	6363      	str	r3, [r4, #52]	; 0x34
 8005d92:	89a3      	ldrh	r3, [r4, #12]
 8005d94:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 8005d98:	81a3      	strh	r3, [r4, #12]
 8005d9a:	2300      	movs	r3, #0
 8005d9c:	6063      	str	r3, [r4, #4]
 8005d9e:	6923      	ldr	r3, [r4, #16]
 8005da0:	6023      	str	r3, [r4, #0]
 8005da2:	89a3      	ldrh	r3, [r4, #12]
 8005da4:	f043 0308 	orr.w	r3, r3, #8
 8005da8:	81a3      	strh	r3, [r4, #12]
 8005daa:	6923      	ldr	r3, [r4, #16]
 8005dac:	b94b      	cbnz	r3, 8005dc2 <__swsetup_r+0x9a>
 8005dae:	89a3      	ldrh	r3, [r4, #12]
 8005db0:	f403 7320 	and.w	r3, r3, #640	; 0x280
 8005db4:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8005db8:	d003      	beq.n	8005dc2 <__swsetup_r+0x9a>
 8005dba:	4621      	mov	r1, r4
 8005dbc:	4630      	mov	r0, r6
 8005dbe:	f000 f92b 	bl	8006018 <__smakebuf_r>
 8005dc2:	89a0      	ldrh	r0, [r4, #12]
 8005dc4:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 8005dc8:	f010 0301 	ands.w	r3, r0, #1
 8005dcc:	d00a      	beq.n	8005de4 <__swsetup_r+0xbc>
 8005dce:	2300      	movs	r3, #0
 8005dd0:	60a3      	str	r3, [r4, #8]
 8005dd2:	6963      	ldr	r3, [r4, #20]
 8005dd4:	425b      	negs	r3, r3
 8005dd6:	61a3      	str	r3, [r4, #24]
 8005dd8:	6923      	ldr	r3, [r4, #16]
 8005dda:	b943      	cbnz	r3, 8005dee <__swsetup_r+0xc6>
 8005ddc:	f010 0080 	ands.w	r0, r0, #128	; 0x80
 8005de0:	d1ba      	bne.n	8005d58 <__swsetup_r+0x30>
 8005de2:	bd70      	pop	{r4, r5, r6, pc}
 8005de4:	0781      	lsls	r1, r0, #30
 8005de6:	bf58      	it	pl
 8005de8:	6963      	ldrpl	r3, [r4, #20]
 8005dea:	60a3      	str	r3, [r4, #8]
 8005dec:	e7f4      	b.n	8005dd8 <__swsetup_r+0xb0>
 8005dee:	2000      	movs	r0, #0
 8005df0:	e7f7      	b.n	8005de2 <__swsetup_r+0xba>
 8005df2:	bf00      	nop
 8005df4:	20000010 	.word	0x20000010
 8005df8:	08006420 	.word	0x08006420
 8005dfc:	08006440 	.word	0x08006440
 8005e00:	08006400 	.word	0x08006400

08005e04 <_close_r>:
 8005e04:	b538      	push	{r3, r4, r5, lr}
 8005e06:	4d06      	ldr	r5, [pc, #24]	; (8005e20 <_close_r+0x1c>)
 8005e08:	2300      	movs	r3, #0
 8005e0a:	4604      	mov	r4, r0
 8005e0c:	4608      	mov	r0, r1
 8005e0e:	602b      	str	r3, [r5, #0]
 8005e10:	f7fb f8f1 	bl	8000ff6 <_close>
 8005e14:	1c43      	adds	r3, r0, #1
 8005e16:	d102      	bne.n	8005e1e <_close_r+0x1a>
 8005e18:	682b      	ldr	r3, [r5, #0]
 8005e1a:	b103      	cbz	r3, 8005e1e <_close_r+0x1a>
 8005e1c:	6023      	str	r3, [r4, #0]
 8005e1e:	bd38      	pop	{r3, r4, r5, pc}
 8005e20:	20008288 	.word	0x20008288

08005e24 <__sflush_r>:
 8005e24:	898a      	ldrh	r2, [r1, #12]
 8005e26:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8005e2a:	4605      	mov	r5, r0
 8005e2c:	0710      	lsls	r0, r2, #28
 8005e2e:	460c      	mov	r4, r1
 8005e30:	d458      	bmi.n	8005ee4 <__sflush_r+0xc0>
 8005e32:	684b      	ldr	r3, [r1, #4]
 8005e34:	2b00      	cmp	r3, #0
 8005e36:	dc05      	bgt.n	8005e44 <__sflush_r+0x20>
 8005e38:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 8005e3a:	2b00      	cmp	r3, #0
 8005e3c:	dc02      	bgt.n	8005e44 <__sflush_r+0x20>
 8005e3e:	2000      	movs	r0, #0
 8005e40:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8005e44:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 8005e46:	2e00      	cmp	r6, #0
 8005e48:	d0f9      	beq.n	8005e3e <__sflush_r+0x1a>
 8005e4a:	2300      	movs	r3, #0
 8005e4c:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 8005e50:	682f      	ldr	r7, [r5, #0]
 8005e52:	602b      	str	r3, [r5, #0]
 8005e54:	d032      	beq.n	8005ebc <__sflush_r+0x98>
 8005e56:	6d60      	ldr	r0, [r4, #84]	; 0x54
 8005e58:	89a3      	ldrh	r3, [r4, #12]
 8005e5a:	075a      	lsls	r2, r3, #29
 8005e5c:	d505      	bpl.n	8005e6a <__sflush_r+0x46>
 8005e5e:	6863      	ldr	r3, [r4, #4]
 8005e60:	1ac0      	subs	r0, r0, r3
 8005e62:	6b63      	ldr	r3, [r4, #52]	; 0x34
 8005e64:	b10b      	cbz	r3, 8005e6a <__sflush_r+0x46>
 8005e66:	6c23      	ldr	r3, [r4, #64]	; 0x40
 8005e68:	1ac0      	subs	r0, r0, r3
 8005e6a:	2300      	movs	r3, #0
 8005e6c:	4602      	mov	r2, r0
 8005e6e:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 8005e70:	6a21      	ldr	r1, [r4, #32]
 8005e72:	4628      	mov	r0, r5
 8005e74:	47b0      	blx	r6
 8005e76:	1c43      	adds	r3, r0, #1
 8005e78:	89a3      	ldrh	r3, [r4, #12]
 8005e7a:	d106      	bne.n	8005e8a <__sflush_r+0x66>
 8005e7c:	6829      	ldr	r1, [r5, #0]
 8005e7e:	291d      	cmp	r1, #29
 8005e80:	d82c      	bhi.n	8005edc <__sflush_r+0xb8>
 8005e82:	4a2a      	ldr	r2, [pc, #168]	; (8005f2c <__sflush_r+0x108>)
 8005e84:	40ca      	lsrs	r2, r1
 8005e86:	07d6      	lsls	r6, r2, #31
 8005e88:	d528      	bpl.n	8005edc <__sflush_r+0xb8>
 8005e8a:	2200      	movs	r2, #0
 8005e8c:	6062      	str	r2, [r4, #4]
 8005e8e:	04d9      	lsls	r1, r3, #19
 8005e90:	6922      	ldr	r2, [r4, #16]
 8005e92:	6022      	str	r2, [r4, #0]
 8005e94:	d504      	bpl.n	8005ea0 <__sflush_r+0x7c>
 8005e96:	1c42      	adds	r2, r0, #1
 8005e98:	d101      	bne.n	8005e9e <__sflush_r+0x7a>
 8005e9a:	682b      	ldr	r3, [r5, #0]
 8005e9c:	b903      	cbnz	r3, 8005ea0 <__sflush_r+0x7c>
 8005e9e:	6560      	str	r0, [r4, #84]	; 0x54
 8005ea0:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8005ea2:	602f      	str	r7, [r5, #0]
 8005ea4:	2900      	cmp	r1, #0
 8005ea6:	d0ca      	beq.n	8005e3e <__sflush_r+0x1a>
 8005ea8:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8005eac:	4299      	cmp	r1, r3
 8005eae:	d002      	beq.n	8005eb6 <__sflush_r+0x92>
 8005eb0:	4628      	mov	r0, r5
 8005eb2:	f000 f917 	bl	80060e4 <_free_r>
 8005eb6:	2000      	movs	r0, #0
 8005eb8:	6360      	str	r0, [r4, #52]	; 0x34
 8005eba:	e7c1      	b.n	8005e40 <__sflush_r+0x1c>
 8005ebc:	6a21      	ldr	r1, [r4, #32]
 8005ebe:	2301      	movs	r3, #1
 8005ec0:	4628      	mov	r0, r5
 8005ec2:	47b0      	blx	r6
 8005ec4:	1c41      	adds	r1, r0, #1
 8005ec6:	d1c7      	bne.n	8005e58 <__sflush_r+0x34>
 8005ec8:	682b      	ldr	r3, [r5, #0]
 8005eca:	2b00      	cmp	r3, #0
 8005ecc:	d0c4      	beq.n	8005e58 <__sflush_r+0x34>
 8005ece:	2b1d      	cmp	r3, #29
 8005ed0:	d001      	beq.n	8005ed6 <__sflush_r+0xb2>
 8005ed2:	2b16      	cmp	r3, #22
 8005ed4:	d101      	bne.n	8005eda <__sflush_r+0xb6>
 8005ed6:	602f      	str	r7, [r5, #0]
 8005ed8:	e7b1      	b.n	8005e3e <__sflush_r+0x1a>
 8005eda:	89a3      	ldrh	r3, [r4, #12]
 8005edc:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8005ee0:	81a3      	strh	r3, [r4, #12]
 8005ee2:	e7ad      	b.n	8005e40 <__sflush_r+0x1c>
 8005ee4:	690f      	ldr	r7, [r1, #16]
 8005ee6:	2f00      	cmp	r7, #0
 8005ee8:	d0a9      	beq.n	8005e3e <__sflush_r+0x1a>
 8005eea:	0793      	lsls	r3, r2, #30
 8005eec:	680e      	ldr	r6, [r1, #0]
 8005eee:	bf08      	it	eq
 8005ef0:	694b      	ldreq	r3, [r1, #20]
 8005ef2:	600f      	str	r7, [r1, #0]
 8005ef4:	bf18      	it	ne
 8005ef6:	2300      	movne	r3, #0
 8005ef8:	eba6 0807 	sub.w	r8, r6, r7
 8005efc:	608b      	str	r3, [r1, #8]
 8005efe:	f1b8 0f00 	cmp.w	r8, #0
 8005f02:	dd9c      	ble.n	8005e3e <__sflush_r+0x1a>
 8005f04:	6a21      	ldr	r1, [r4, #32]
 8005f06:	6aa6      	ldr	r6, [r4, #40]	; 0x28
 8005f08:	4643      	mov	r3, r8
 8005f0a:	463a      	mov	r2, r7
 8005f0c:	4628      	mov	r0, r5
 8005f0e:	47b0      	blx	r6
 8005f10:	2800      	cmp	r0, #0
 8005f12:	dc06      	bgt.n	8005f22 <__sflush_r+0xfe>
 8005f14:	89a3      	ldrh	r3, [r4, #12]
 8005f16:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8005f1a:	81a3      	strh	r3, [r4, #12]
 8005f1c:	f04f 30ff 	mov.w	r0, #4294967295
 8005f20:	e78e      	b.n	8005e40 <__sflush_r+0x1c>
 8005f22:	4407      	add	r7, r0
 8005f24:	eba8 0800 	sub.w	r8, r8, r0
 8005f28:	e7e9      	b.n	8005efe <__sflush_r+0xda>
 8005f2a:	bf00      	nop
 8005f2c:	20400001 	.word	0x20400001

08005f30 <_fflush_r>:
 8005f30:	b538      	push	{r3, r4, r5, lr}
 8005f32:	690b      	ldr	r3, [r1, #16]
 8005f34:	4605      	mov	r5, r0
 8005f36:	460c      	mov	r4, r1
 8005f38:	b913      	cbnz	r3, 8005f40 <_fflush_r+0x10>
 8005f3a:	2500      	movs	r5, #0
 8005f3c:	4628      	mov	r0, r5
 8005f3e:	bd38      	pop	{r3, r4, r5, pc}
 8005f40:	b118      	cbz	r0, 8005f4a <_fflush_r+0x1a>
 8005f42:	6983      	ldr	r3, [r0, #24]
 8005f44:	b90b      	cbnz	r3, 8005f4a <_fflush_r+0x1a>
 8005f46:	f7ff f8b9 	bl	80050bc <__sinit>
 8005f4a:	4b14      	ldr	r3, [pc, #80]	; (8005f9c <_fflush_r+0x6c>)
 8005f4c:	429c      	cmp	r4, r3
 8005f4e:	d11b      	bne.n	8005f88 <_fflush_r+0x58>
 8005f50:	686c      	ldr	r4, [r5, #4]
 8005f52:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8005f56:	2b00      	cmp	r3, #0
 8005f58:	d0ef      	beq.n	8005f3a <_fflush_r+0xa>
 8005f5a:	6e62      	ldr	r2, [r4, #100]	; 0x64
 8005f5c:	07d0      	lsls	r0, r2, #31
 8005f5e:	d404      	bmi.n	8005f6a <_fflush_r+0x3a>
 8005f60:	0599      	lsls	r1, r3, #22
 8005f62:	d402      	bmi.n	8005f6a <_fflush_r+0x3a>
 8005f64:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8005f66:	f7ff f947 	bl	80051f8 <__retarget_lock_acquire_recursive>
 8005f6a:	4628      	mov	r0, r5
 8005f6c:	4621      	mov	r1, r4
 8005f6e:	f7ff ff59 	bl	8005e24 <__sflush_r>
 8005f72:	6e63      	ldr	r3, [r4, #100]	; 0x64
 8005f74:	07da      	lsls	r2, r3, #31
 8005f76:	4605      	mov	r5, r0
 8005f78:	d4e0      	bmi.n	8005f3c <_fflush_r+0xc>
 8005f7a:	89a3      	ldrh	r3, [r4, #12]
 8005f7c:	059b      	lsls	r3, r3, #22
 8005f7e:	d4dd      	bmi.n	8005f3c <_fflush_r+0xc>
 8005f80:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8005f82:	f7ff f93a 	bl	80051fa <__retarget_lock_release_recursive>
 8005f86:	e7d9      	b.n	8005f3c <_fflush_r+0xc>
 8005f88:	4b05      	ldr	r3, [pc, #20]	; (8005fa0 <_fflush_r+0x70>)
 8005f8a:	429c      	cmp	r4, r3
 8005f8c:	d101      	bne.n	8005f92 <_fflush_r+0x62>
 8005f8e:	68ac      	ldr	r4, [r5, #8]
 8005f90:	e7df      	b.n	8005f52 <_fflush_r+0x22>
 8005f92:	4b04      	ldr	r3, [pc, #16]	; (8005fa4 <_fflush_r+0x74>)
 8005f94:	429c      	cmp	r4, r3
 8005f96:	bf08      	it	eq
 8005f98:	68ec      	ldreq	r4, [r5, #12]
 8005f9a:	e7da      	b.n	8005f52 <_fflush_r+0x22>
 8005f9c:	08006420 	.word	0x08006420
 8005fa0:	08006440 	.word	0x08006440
 8005fa4:	08006400 	.word	0x08006400

08005fa8 <_lseek_r>:
 8005fa8:	b538      	push	{r3, r4, r5, lr}
 8005faa:	4d07      	ldr	r5, [pc, #28]	; (8005fc8 <_lseek_r+0x20>)
 8005fac:	4604      	mov	r4, r0
 8005fae:	4608      	mov	r0, r1
 8005fb0:	4611      	mov	r1, r2
 8005fb2:	2200      	movs	r2, #0
 8005fb4:	602a      	str	r2, [r5, #0]
 8005fb6:	461a      	mov	r2, r3
 8005fb8:	f7fb f844 	bl	8001044 <_lseek>
 8005fbc:	1c43      	adds	r3, r0, #1
 8005fbe:	d102      	bne.n	8005fc6 <_lseek_r+0x1e>
 8005fc0:	682b      	ldr	r3, [r5, #0]
 8005fc2:	b103      	cbz	r3, 8005fc6 <_lseek_r+0x1e>
 8005fc4:	6023      	str	r3, [r4, #0]
 8005fc6:	bd38      	pop	{r3, r4, r5, pc}
 8005fc8:	20008288 	.word	0x20008288

08005fcc <__swhatbuf_r>:
 8005fcc:	b570      	push	{r4, r5, r6, lr}
 8005fce:	460e      	mov	r6, r1
 8005fd0:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8005fd4:	2900      	cmp	r1, #0
 8005fd6:	b096      	sub	sp, #88	; 0x58
 8005fd8:	4614      	mov	r4, r2
 8005fda:	461d      	mov	r5, r3
 8005fdc:	da08      	bge.n	8005ff0 <__swhatbuf_r+0x24>
 8005fde:	f9b6 300c 	ldrsh.w	r3, [r6, #12]
 8005fe2:	2200      	movs	r2, #0
 8005fe4:	602a      	str	r2, [r5, #0]
 8005fe6:	061a      	lsls	r2, r3, #24
 8005fe8:	d410      	bmi.n	800600c <__swhatbuf_r+0x40>
 8005fea:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8005fee:	e00e      	b.n	800600e <__swhatbuf_r+0x42>
 8005ff0:	466a      	mov	r2, sp
 8005ff2:	f000 f905 	bl	8006200 <_fstat_r>
 8005ff6:	2800      	cmp	r0, #0
 8005ff8:	dbf1      	blt.n	8005fde <__swhatbuf_r+0x12>
 8005ffa:	9a01      	ldr	r2, [sp, #4]
 8005ffc:	f402 4270 	and.w	r2, r2, #61440	; 0xf000
 8006000:	f5a2 5300 	sub.w	r3, r2, #8192	; 0x2000
 8006004:	425a      	negs	r2, r3
 8006006:	415a      	adcs	r2, r3
 8006008:	602a      	str	r2, [r5, #0]
 800600a:	e7ee      	b.n	8005fea <__swhatbuf_r+0x1e>
 800600c:	2340      	movs	r3, #64	; 0x40
 800600e:	2000      	movs	r0, #0
 8006010:	6023      	str	r3, [r4, #0]
 8006012:	b016      	add	sp, #88	; 0x58
 8006014:	bd70      	pop	{r4, r5, r6, pc}
	...

08006018 <__smakebuf_r>:
 8006018:	898b      	ldrh	r3, [r1, #12]
 800601a:	b573      	push	{r0, r1, r4, r5, r6, lr}
 800601c:	079d      	lsls	r5, r3, #30
 800601e:	4606      	mov	r6, r0
 8006020:	460c      	mov	r4, r1
 8006022:	d507      	bpl.n	8006034 <__smakebuf_r+0x1c>
 8006024:	f104 0347 	add.w	r3, r4, #71	; 0x47
 8006028:	6023      	str	r3, [r4, #0]
 800602a:	6123      	str	r3, [r4, #16]
 800602c:	2301      	movs	r3, #1
 800602e:	6163      	str	r3, [r4, #20]
 8006030:	b002      	add	sp, #8
 8006032:	bd70      	pop	{r4, r5, r6, pc}
 8006034:	ab01      	add	r3, sp, #4
 8006036:	466a      	mov	r2, sp
 8006038:	f7ff ffc8 	bl	8005fcc <__swhatbuf_r>
 800603c:	9900      	ldr	r1, [sp, #0]
 800603e:	4605      	mov	r5, r0
 8006040:	4630      	mov	r0, r6
 8006042:	f7ff f8fb 	bl	800523c <_malloc_r>
 8006046:	b948      	cbnz	r0, 800605c <__smakebuf_r+0x44>
 8006048:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800604c:	059a      	lsls	r2, r3, #22
 800604e:	d4ef      	bmi.n	8006030 <__smakebuf_r+0x18>
 8006050:	f023 0303 	bic.w	r3, r3, #3
 8006054:	f043 0302 	orr.w	r3, r3, #2
 8006058:	81a3      	strh	r3, [r4, #12]
 800605a:	e7e3      	b.n	8006024 <__smakebuf_r+0xc>
 800605c:	4b0d      	ldr	r3, [pc, #52]	; (8006094 <__smakebuf_r+0x7c>)
 800605e:	62b3      	str	r3, [r6, #40]	; 0x28
 8006060:	89a3      	ldrh	r3, [r4, #12]
 8006062:	6020      	str	r0, [r4, #0]
 8006064:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8006068:	81a3      	strh	r3, [r4, #12]
 800606a:	9b00      	ldr	r3, [sp, #0]
 800606c:	6163      	str	r3, [r4, #20]
 800606e:	9b01      	ldr	r3, [sp, #4]
 8006070:	6120      	str	r0, [r4, #16]
 8006072:	b15b      	cbz	r3, 800608c <__smakebuf_r+0x74>
 8006074:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8006078:	4630      	mov	r0, r6
 800607a:	f000 f8d3 	bl	8006224 <_isatty_r>
 800607e:	b128      	cbz	r0, 800608c <__smakebuf_r+0x74>
 8006080:	89a3      	ldrh	r3, [r4, #12]
 8006082:	f023 0303 	bic.w	r3, r3, #3
 8006086:	f043 0301 	orr.w	r3, r3, #1
 800608a:	81a3      	strh	r3, [r4, #12]
 800608c:	89a0      	ldrh	r0, [r4, #12]
 800608e:	4305      	orrs	r5, r0
 8006090:	81a5      	strh	r5, [r4, #12]
 8006092:	e7cd      	b.n	8006030 <__smakebuf_r+0x18>
 8006094:	08005055 	.word	0x08005055

08006098 <memmove>:
 8006098:	4288      	cmp	r0, r1
 800609a:	b510      	push	{r4, lr}
 800609c:	eb01 0402 	add.w	r4, r1, r2
 80060a0:	d902      	bls.n	80060a8 <memmove+0x10>
 80060a2:	4284      	cmp	r4, r0
 80060a4:	4623      	mov	r3, r4
 80060a6:	d807      	bhi.n	80060b8 <memmove+0x20>
 80060a8:	1e43      	subs	r3, r0, #1
 80060aa:	42a1      	cmp	r1, r4
 80060ac:	d008      	beq.n	80060c0 <memmove+0x28>
 80060ae:	f811 2b01 	ldrb.w	r2, [r1], #1
 80060b2:	f803 2f01 	strb.w	r2, [r3, #1]!
 80060b6:	e7f8      	b.n	80060aa <memmove+0x12>
 80060b8:	4402      	add	r2, r0
 80060ba:	4601      	mov	r1, r0
 80060bc:	428a      	cmp	r2, r1
 80060be:	d100      	bne.n	80060c2 <memmove+0x2a>
 80060c0:	bd10      	pop	{r4, pc}
 80060c2:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 80060c6:	f802 4d01 	strb.w	r4, [r2, #-1]!
 80060ca:	e7f7      	b.n	80060bc <memmove+0x24>

080060cc <__malloc_lock>:
 80060cc:	4801      	ldr	r0, [pc, #4]	; (80060d4 <__malloc_lock+0x8>)
 80060ce:	f7ff b893 	b.w	80051f8 <__retarget_lock_acquire_recursive>
 80060d2:	bf00      	nop
 80060d4:	2000827c 	.word	0x2000827c

080060d8 <__malloc_unlock>:
 80060d8:	4801      	ldr	r0, [pc, #4]	; (80060e0 <__malloc_unlock+0x8>)
 80060da:	f7ff b88e 	b.w	80051fa <__retarget_lock_release_recursive>
 80060de:	bf00      	nop
 80060e0:	2000827c 	.word	0x2000827c

080060e4 <_free_r>:
 80060e4:	b537      	push	{r0, r1, r2, r4, r5, lr}
 80060e6:	2900      	cmp	r1, #0
 80060e8:	d044      	beq.n	8006174 <_free_r+0x90>
 80060ea:	f851 3c04 	ldr.w	r3, [r1, #-4]
 80060ee:	9001      	str	r0, [sp, #4]
 80060f0:	2b00      	cmp	r3, #0
 80060f2:	f1a1 0404 	sub.w	r4, r1, #4
 80060f6:	bfb8      	it	lt
 80060f8:	18e4      	addlt	r4, r4, r3
 80060fa:	f7ff ffe7 	bl	80060cc <__malloc_lock>
 80060fe:	4a1e      	ldr	r2, [pc, #120]	; (8006178 <_free_r+0x94>)
 8006100:	9801      	ldr	r0, [sp, #4]
 8006102:	6813      	ldr	r3, [r2, #0]
 8006104:	b933      	cbnz	r3, 8006114 <_free_r+0x30>
 8006106:	6063      	str	r3, [r4, #4]
 8006108:	6014      	str	r4, [r2, #0]
 800610a:	b003      	add	sp, #12
 800610c:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 8006110:	f7ff bfe2 	b.w	80060d8 <__malloc_unlock>
 8006114:	42a3      	cmp	r3, r4
 8006116:	d908      	bls.n	800612a <_free_r+0x46>
 8006118:	6825      	ldr	r5, [r4, #0]
 800611a:	1961      	adds	r1, r4, r5
 800611c:	428b      	cmp	r3, r1
 800611e:	bf01      	itttt	eq
 8006120:	6819      	ldreq	r1, [r3, #0]
 8006122:	685b      	ldreq	r3, [r3, #4]
 8006124:	1949      	addeq	r1, r1, r5
 8006126:	6021      	streq	r1, [r4, #0]
 8006128:	e7ed      	b.n	8006106 <_free_r+0x22>
 800612a:	461a      	mov	r2, r3
 800612c:	685b      	ldr	r3, [r3, #4]
 800612e:	b10b      	cbz	r3, 8006134 <_free_r+0x50>
 8006130:	42a3      	cmp	r3, r4
 8006132:	d9fa      	bls.n	800612a <_free_r+0x46>
 8006134:	6811      	ldr	r1, [r2, #0]
 8006136:	1855      	adds	r5, r2, r1
 8006138:	42a5      	cmp	r5, r4
 800613a:	d10b      	bne.n	8006154 <_free_r+0x70>
 800613c:	6824      	ldr	r4, [r4, #0]
 800613e:	4421      	add	r1, r4
 8006140:	1854      	adds	r4, r2, r1
 8006142:	42a3      	cmp	r3, r4
 8006144:	6011      	str	r1, [r2, #0]
 8006146:	d1e0      	bne.n	800610a <_free_r+0x26>
 8006148:	681c      	ldr	r4, [r3, #0]
 800614a:	685b      	ldr	r3, [r3, #4]
 800614c:	6053      	str	r3, [r2, #4]
 800614e:	4421      	add	r1, r4
 8006150:	6011      	str	r1, [r2, #0]
 8006152:	e7da      	b.n	800610a <_free_r+0x26>
 8006154:	d902      	bls.n	800615c <_free_r+0x78>
 8006156:	230c      	movs	r3, #12
 8006158:	6003      	str	r3, [r0, #0]
 800615a:	e7d6      	b.n	800610a <_free_r+0x26>
 800615c:	6825      	ldr	r5, [r4, #0]
 800615e:	1961      	adds	r1, r4, r5
 8006160:	428b      	cmp	r3, r1
 8006162:	bf04      	itt	eq
 8006164:	6819      	ldreq	r1, [r3, #0]
 8006166:	685b      	ldreq	r3, [r3, #4]
 8006168:	6063      	str	r3, [r4, #4]
 800616a:	bf04      	itt	eq
 800616c:	1949      	addeq	r1, r1, r5
 800616e:	6021      	streq	r1, [r4, #0]
 8006170:	6054      	str	r4, [r2, #4]
 8006172:	e7ca      	b.n	800610a <_free_r+0x26>
 8006174:	b003      	add	sp, #12
 8006176:	bd30      	pop	{r4, r5, pc}
 8006178:	20008280 	.word	0x20008280

0800617c <_realloc_r>:
 800617c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8006180:	4680      	mov	r8, r0
 8006182:	4614      	mov	r4, r2
 8006184:	460e      	mov	r6, r1
 8006186:	b921      	cbnz	r1, 8006192 <_realloc_r+0x16>
 8006188:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800618c:	4611      	mov	r1, r2
 800618e:	f7ff b855 	b.w	800523c <_malloc_r>
 8006192:	b92a      	cbnz	r2, 80061a0 <_realloc_r+0x24>
 8006194:	f7ff ffa6 	bl	80060e4 <_free_r>
 8006198:	4625      	mov	r5, r4
 800619a:	4628      	mov	r0, r5
 800619c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80061a0:	f000 f850 	bl	8006244 <_malloc_usable_size_r>
 80061a4:	4284      	cmp	r4, r0
 80061a6:	4607      	mov	r7, r0
 80061a8:	d802      	bhi.n	80061b0 <_realloc_r+0x34>
 80061aa:	ebb4 0f50 	cmp.w	r4, r0, lsr #1
 80061ae:	d812      	bhi.n	80061d6 <_realloc_r+0x5a>
 80061b0:	4621      	mov	r1, r4
 80061b2:	4640      	mov	r0, r8
 80061b4:	f7ff f842 	bl	800523c <_malloc_r>
 80061b8:	4605      	mov	r5, r0
 80061ba:	2800      	cmp	r0, #0
 80061bc:	d0ed      	beq.n	800619a <_realloc_r+0x1e>
 80061be:	42bc      	cmp	r4, r7
 80061c0:	4622      	mov	r2, r4
 80061c2:	4631      	mov	r1, r6
 80061c4:	bf28      	it	cs
 80061c6:	463a      	movcs	r2, r7
 80061c8:	f7fe fed2 	bl	8004f70 <memcpy>
 80061cc:	4631      	mov	r1, r6
 80061ce:	4640      	mov	r0, r8
 80061d0:	f7ff ff88 	bl	80060e4 <_free_r>
 80061d4:	e7e1      	b.n	800619a <_realloc_r+0x1e>
 80061d6:	4635      	mov	r5, r6
 80061d8:	e7df      	b.n	800619a <_realloc_r+0x1e>
	...

080061dc <_read_r>:
 80061dc:	b538      	push	{r3, r4, r5, lr}
 80061de:	4d07      	ldr	r5, [pc, #28]	; (80061fc <_read_r+0x20>)
 80061e0:	4604      	mov	r4, r0
 80061e2:	4608      	mov	r0, r1
 80061e4:	4611      	mov	r1, r2
 80061e6:	2200      	movs	r2, #0
 80061e8:	602a      	str	r2, [r5, #0]
 80061ea:	461a      	mov	r2, r3
 80061ec:	f7fa fee6 	bl	8000fbc <_read>
 80061f0:	1c43      	adds	r3, r0, #1
 80061f2:	d102      	bne.n	80061fa <_read_r+0x1e>
 80061f4:	682b      	ldr	r3, [r5, #0]
 80061f6:	b103      	cbz	r3, 80061fa <_read_r+0x1e>
 80061f8:	6023      	str	r3, [r4, #0]
 80061fa:	bd38      	pop	{r3, r4, r5, pc}
 80061fc:	20008288 	.word	0x20008288

08006200 <_fstat_r>:
 8006200:	b538      	push	{r3, r4, r5, lr}
 8006202:	4d07      	ldr	r5, [pc, #28]	; (8006220 <_fstat_r+0x20>)
 8006204:	2300      	movs	r3, #0
 8006206:	4604      	mov	r4, r0
 8006208:	4608      	mov	r0, r1
 800620a:	4611      	mov	r1, r2
 800620c:	602b      	str	r3, [r5, #0]
 800620e:	f7fa fefe 	bl	800100e <_fstat>
 8006212:	1c43      	adds	r3, r0, #1
 8006214:	d102      	bne.n	800621c <_fstat_r+0x1c>
 8006216:	682b      	ldr	r3, [r5, #0]
 8006218:	b103      	cbz	r3, 800621c <_fstat_r+0x1c>
 800621a:	6023      	str	r3, [r4, #0]
 800621c:	bd38      	pop	{r3, r4, r5, pc}
 800621e:	bf00      	nop
 8006220:	20008288 	.word	0x20008288

08006224 <_isatty_r>:
 8006224:	b538      	push	{r3, r4, r5, lr}
 8006226:	4d06      	ldr	r5, [pc, #24]	; (8006240 <_isatty_r+0x1c>)
 8006228:	2300      	movs	r3, #0
 800622a:	4604      	mov	r4, r0
 800622c:	4608      	mov	r0, r1
 800622e:	602b      	str	r3, [r5, #0]
 8006230:	f7fa fefd 	bl	800102e <_isatty>
 8006234:	1c43      	adds	r3, r0, #1
 8006236:	d102      	bne.n	800623e <_isatty_r+0x1a>
 8006238:	682b      	ldr	r3, [r5, #0]
 800623a:	b103      	cbz	r3, 800623e <_isatty_r+0x1a>
 800623c:	6023      	str	r3, [r4, #0]
 800623e:	bd38      	pop	{r3, r4, r5, pc}
 8006240:	20008288 	.word	0x20008288

08006244 <_malloc_usable_size_r>:
 8006244:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8006248:	1f18      	subs	r0, r3, #4
 800624a:	2b00      	cmp	r3, #0
 800624c:	bfbc      	itt	lt
 800624e:	580b      	ldrlt	r3, [r1, r0]
 8006250:	18c0      	addlt	r0, r0, r3
 8006252:	4770      	bx	lr

08006254 <_init>:
 8006254:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8006256:	bf00      	nop
 8006258:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800625a:	bc08      	pop	{r3}
 800625c:	469e      	mov	lr, r3
 800625e:	4770      	bx	lr

08006260 <_fini>:
 8006260:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8006262:	bf00      	nop
 8006264:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8006266:	bc08      	pop	{r3}
 8006268:	469e      	mov	lr, r3
 800626a:	4770      	bx	lr
