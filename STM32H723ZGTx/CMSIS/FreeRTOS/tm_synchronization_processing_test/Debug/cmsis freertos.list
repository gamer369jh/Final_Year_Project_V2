
cmsis freertos.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000002cc  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000acc4  080002d0  080002d0  000102d0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       0000019c  0800af94  0800af94  0001af94  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM          00000008  0800b130  0800b130  0001b130  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  4 .init_array   00000004  0800b138  0800b138  0001b138  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  5 .fini_array   00000004  0800b13c  0800b13c  0001b13c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  6 .data         00000078  24000000  0800b140  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .RxDecripSection 00000060  24000078  0800b1b8  00020078  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .TxDecripSection 00000060  240000d8  0800b218  000200d8  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00004e90  24000138  0800b278  00020138  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  24004fc8  0800b278  00024fc8  2**0
                  ALLOC
 11 .ARM.attributes 0000002e  00000000  00000000  00020138  2**0
                  CONTENTS, READONLY
 12 .debug_info   000216bb  00000000  00000000  00020166  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00003a6e  00000000  00000000  00041821  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 000015b8  00000000  00000000  00045290  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 00001460  00000000  00000000  00046848  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  00005330  00000000  00000000  00047ca8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   0001958d  00000000  00000000  0004cfd8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    0015173b  00000000  00000000  00066565  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000050  00000000  00000000  001b7ca0  2**0
                  CONTENTS, READONLY
 20 .debug_frame  000063e0  00000000  00000000  001b7cf0  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080002d0 <__do_global_dtors_aux>:
 80002d0:	b510      	push	{r4, lr}
 80002d2:	4c05      	ldr	r4, [pc, #20]	; (80002e8 <__do_global_dtors_aux+0x18>)
 80002d4:	7823      	ldrb	r3, [r4, #0]
 80002d6:	b933      	cbnz	r3, 80002e6 <__do_global_dtors_aux+0x16>
 80002d8:	4b04      	ldr	r3, [pc, #16]	; (80002ec <__do_global_dtors_aux+0x1c>)
 80002da:	b113      	cbz	r3, 80002e2 <__do_global_dtors_aux+0x12>
 80002dc:	4804      	ldr	r0, [pc, #16]	; (80002f0 <__do_global_dtors_aux+0x20>)
 80002de:	f3af 8000 	nop.w
 80002e2:	2301      	movs	r3, #1
 80002e4:	7023      	strb	r3, [r4, #0]
 80002e6:	bd10      	pop	{r4, pc}
 80002e8:	24000138 	.word	0x24000138
 80002ec:	00000000 	.word	0x00000000
 80002f0:	0800af7c 	.word	0x0800af7c

080002f4 <frame_dummy>:
 80002f4:	b508      	push	{r3, lr}
 80002f6:	4b03      	ldr	r3, [pc, #12]	; (8000304 <frame_dummy+0x10>)
 80002f8:	b11b      	cbz	r3, 8000302 <frame_dummy+0xe>
 80002fa:	4903      	ldr	r1, [pc, #12]	; (8000308 <frame_dummy+0x14>)
 80002fc:	4803      	ldr	r0, [pc, #12]	; (800030c <frame_dummy+0x18>)
 80002fe:	f3af 8000 	nop.w
 8000302:	bd08      	pop	{r3, pc}
 8000304:	00000000 	.word	0x00000000
 8000308:	2400013c 	.word	0x2400013c
 800030c:	0800af7c 	.word	0x0800af7c

08000310 <memchr>:
 8000310:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 8000314:	2a10      	cmp	r2, #16
 8000316:	db2b      	blt.n	8000370 <memchr+0x60>
 8000318:	f010 0f07 	tst.w	r0, #7
 800031c:	d008      	beq.n	8000330 <memchr+0x20>
 800031e:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000322:	3a01      	subs	r2, #1
 8000324:	428b      	cmp	r3, r1
 8000326:	d02d      	beq.n	8000384 <memchr+0x74>
 8000328:	f010 0f07 	tst.w	r0, #7
 800032c:	b342      	cbz	r2, 8000380 <memchr+0x70>
 800032e:	d1f6      	bne.n	800031e <memchr+0xe>
 8000330:	b4f0      	push	{r4, r5, r6, r7}
 8000332:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000336:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800033a:	f022 0407 	bic.w	r4, r2, #7
 800033e:	f07f 0700 	mvns.w	r7, #0
 8000342:	2300      	movs	r3, #0
 8000344:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000348:	3c08      	subs	r4, #8
 800034a:	ea85 0501 	eor.w	r5, r5, r1
 800034e:	ea86 0601 	eor.w	r6, r6, r1
 8000352:	fa85 f547 	uadd8	r5, r5, r7
 8000356:	faa3 f587 	sel	r5, r3, r7
 800035a:	fa86 f647 	uadd8	r6, r6, r7
 800035e:	faa5 f687 	sel	r6, r5, r7
 8000362:	b98e      	cbnz	r6, 8000388 <memchr+0x78>
 8000364:	d1ee      	bne.n	8000344 <memchr+0x34>
 8000366:	bcf0      	pop	{r4, r5, r6, r7}
 8000368:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800036c:	f002 0207 	and.w	r2, r2, #7
 8000370:	b132      	cbz	r2, 8000380 <memchr+0x70>
 8000372:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000376:	3a01      	subs	r2, #1
 8000378:	ea83 0301 	eor.w	r3, r3, r1
 800037c:	b113      	cbz	r3, 8000384 <memchr+0x74>
 800037e:	d1f8      	bne.n	8000372 <memchr+0x62>
 8000380:	2000      	movs	r0, #0
 8000382:	4770      	bx	lr
 8000384:	3801      	subs	r0, #1
 8000386:	4770      	bx	lr
 8000388:	2d00      	cmp	r5, #0
 800038a:	bf06      	itte	eq
 800038c:	4635      	moveq	r5, r6
 800038e:	3803      	subeq	r0, #3
 8000390:	3807      	subne	r0, #7
 8000392:	f015 0f01 	tst.w	r5, #1
 8000396:	d107      	bne.n	80003a8 <memchr+0x98>
 8000398:	3001      	adds	r0, #1
 800039a:	f415 7f80 	tst.w	r5, #256	; 0x100
 800039e:	bf02      	ittt	eq
 80003a0:	3001      	addeq	r0, #1
 80003a2:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 80003a6:	3001      	addeq	r0, #1
 80003a8:	bcf0      	pop	{r4, r5, r6, r7}
 80003aa:	3801      	subs	r0, #1
 80003ac:	4770      	bx	lr
 80003ae:	bf00      	nop

080003b0 <__aeabi_uldivmod>:
 80003b0:	b953      	cbnz	r3, 80003c8 <__aeabi_uldivmod+0x18>
 80003b2:	b94a      	cbnz	r2, 80003c8 <__aeabi_uldivmod+0x18>
 80003b4:	2900      	cmp	r1, #0
 80003b6:	bf08      	it	eq
 80003b8:	2800      	cmpeq	r0, #0
 80003ba:	bf1c      	itt	ne
 80003bc:	f04f 31ff 	movne.w	r1, #4294967295
 80003c0:	f04f 30ff 	movne.w	r0, #4294967295
 80003c4:	f000 b974 	b.w	80006b0 <__aeabi_idiv0>
 80003c8:	f1ad 0c08 	sub.w	ip, sp, #8
 80003cc:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 80003d0:	f000 f806 	bl	80003e0 <__udivmoddi4>
 80003d4:	f8dd e004 	ldr.w	lr, [sp, #4]
 80003d8:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80003dc:	b004      	add	sp, #16
 80003de:	4770      	bx	lr

080003e0 <__udivmoddi4>:
 80003e0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80003e4:	9d08      	ldr	r5, [sp, #32]
 80003e6:	4604      	mov	r4, r0
 80003e8:	468e      	mov	lr, r1
 80003ea:	2b00      	cmp	r3, #0
 80003ec:	d14d      	bne.n	800048a <__udivmoddi4+0xaa>
 80003ee:	428a      	cmp	r2, r1
 80003f0:	4694      	mov	ip, r2
 80003f2:	d969      	bls.n	80004c8 <__udivmoddi4+0xe8>
 80003f4:	fab2 f282 	clz	r2, r2
 80003f8:	b152      	cbz	r2, 8000410 <__udivmoddi4+0x30>
 80003fa:	fa01 f302 	lsl.w	r3, r1, r2
 80003fe:	f1c2 0120 	rsb	r1, r2, #32
 8000402:	fa20 f101 	lsr.w	r1, r0, r1
 8000406:	fa0c fc02 	lsl.w	ip, ip, r2
 800040a:	ea41 0e03 	orr.w	lr, r1, r3
 800040e:	4094      	lsls	r4, r2
 8000410:	ea4f 481c 	mov.w	r8, ip, lsr #16
 8000414:	0c21      	lsrs	r1, r4, #16
 8000416:	fbbe f6f8 	udiv	r6, lr, r8
 800041a:	fa1f f78c 	uxth.w	r7, ip
 800041e:	fb08 e316 	mls	r3, r8, r6, lr
 8000422:	ea41 4303 	orr.w	r3, r1, r3, lsl #16
 8000426:	fb06 f107 	mul.w	r1, r6, r7
 800042a:	4299      	cmp	r1, r3
 800042c:	d90a      	bls.n	8000444 <__udivmoddi4+0x64>
 800042e:	eb1c 0303 	adds.w	r3, ip, r3
 8000432:	f106 30ff 	add.w	r0, r6, #4294967295
 8000436:	f080 811f 	bcs.w	8000678 <__udivmoddi4+0x298>
 800043a:	4299      	cmp	r1, r3
 800043c:	f240 811c 	bls.w	8000678 <__udivmoddi4+0x298>
 8000440:	3e02      	subs	r6, #2
 8000442:	4463      	add	r3, ip
 8000444:	1a5b      	subs	r3, r3, r1
 8000446:	b2a4      	uxth	r4, r4
 8000448:	fbb3 f0f8 	udiv	r0, r3, r8
 800044c:	fb08 3310 	mls	r3, r8, r0, r3
 8000450:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000454:	fb00 f707 	mul.w	r7, r0, r7
 8000458:	42a7      	cmp	r7, r4
 800045a:	d90a      	bls.n	8000472 <__udivmoddi4+0x92>
 800045c:	eb1c 0404 	adds.w	r4, ip, r4
 8000460:	f100 33ff 	add.w	r3, r0, #4294967295
 8000464:	f080 810a 	bcs.w	800067c <__udivmoddi4+0x29c>
 8000468:	42a7      	cmp	r7, r4
 800046a:	f240 8107 	bls.w	800067c <__udivmoddi4+0x29c>
 800046e:	4464      	add	r4, ip
 8000470:	3802      	subs	r0, #2
 8000472:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 8000476:	1be4      	subs	r4, r4, r7
 8000478:	2600      	movs	r6, #0
 800047a:	b11d      	cbz	r5, 8000484 <__udivmoddi4+0xa4>
 800047c:	40d4      	lsrs	r4, r2
 800047e:	2300      	movs	r3, #0
 8000480:	e9c5 4300 	strd	r4, r3, [r5]
 8000484:	4631      	mov	r1, r6
 8000486:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800048a:	428b      	cmp	r3, r1
 800048c:	d909      	bls.n	80004a2 <__udivmoddi4+0xc2>
 800048e:	2d00      	cmp	r5, #0
 8000490:	f000 80ef 	beq.w	8000672 <__udivmoddi4+0x292>
 8000494:	2600      	movs	r6, #0
 8000496:	e9c5 0100 	strd	r0, r1, [r5]
 800049a:	4630      	mov	r0, r6
 800049c:	4631      	mov	r1, r6
 800049e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80004a2:	fab3 f683 	clz	r6, r3
 80004a6:	2e00      	cmp	r6, #0
 80004a8:	d14a      	bne.n	8000540 <__udivmoddi4+0x160>
 80004aa:	428b      	cmp	r3, r1
 80004ac:	d302      	bcc.n	80004b4 <__udivmoddi4+0xd4>
 80004ae:	4282      	cmp	r2, r0
 80004b0:	f200 80f9 	bhi.w	80006a6 <__udivmoddi4+0x2c6>
 80004b4:	1a84      	subs	r4, r0, r2
 80004b6:	eb61 0303 	sbc.w	r3, r1, r3
 80004ba:	2001      	movs	r0, #1
 80004bc:	469e      	mov	lr, r3
 80004be:	2d00      	cmp	r5, #0
 80004c0:	d0e0      	beq.n	8000484 <__udivmoddi4+0xa4>
 80004c2:	e9c5 4e00 	strd	r4, lr, [r5]
 80004c6:	e7dd      	b.n	8000484 <__udivmoddi4+0xa4>
 80004c8:	b902      	cbnz	r2, 80004cc <__udivmoddi4+0xec>
 80004ca:	deff      	udf	#255	; 0xff
 80004cc:	fab2 f282 	clz	r2, r2
 80004d0:	2a00      	cmp	r2, #0
 80004d2:	f040 8092 	bne.w	80005fa <__udivmoddi4+0x21a>
 80004d6:	eba1 010c 	sub.w	r1, r1, ip
 80004da:	ea4f 471c 	mov.w	r7, ip, lsr #16
 80004de:	fa1f fe8c 	uxth.w	lr, ip
 80004e2:	2601      	movs	r6, #1
 80004e4:	0c20      	lsrs	r0, r4, #16
 80004e6:	fbb1 f3f7 	udiv	r3, r1, r7
 80004ea:	fb07 1113 	mls	r1, r7, r3, r1
 80004ee:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 80004f2:	fb0e f003 	mul.w	r0, lr, r3
 80004f6:	4288      	cmp	r0, r1
 80004f8:	d908      	bls.n	800050c <__udivmoddi4+0x12c>
 80004fa:	eb1c 0101 	adds.w	r1, ip, r1
 80004fe:	f103 38ff 	add.w	r8, r3, #4294967295
 8000502:	d202      	bcs.n	800050a <__udivmoddi4+0x12a>
 8000504:	4288      	cmp	r0, r1
 8000506:	f200 80cb 	bhi.w	80006a0 <__udivmoddi4+0x2c0>
 800050a:	4643      	mov	r3, r8
 800050c:	1a09      	subs	r1, r1, r0
 800050e:	b2a4      	uxth	r4, r4
 8000510:	fbb1 f0f7 	udiv	r0, r1, r7
 8000514:	fb07 1110 	mls	r1, r7, r0, r1
 8000518:	ea44 4401 	orr.w	r4, r4, r1, lsl #16
 800051c:	fb0e fe00 	mul.w	lr, lr, r0
 8000520:	45a6      	cmp	lr, r4
 8000522:	d908      	bls.n	8000536 <__udivmoddi4+0x156>
 8000524:	eb1c 0404 	adds.w	r4, ip, r4
 8000528:	f100 31ff 	add.w	r1, r0, #4294967295
 800052c:	d202      	bcs.n	8000534 <__udivmoddi4+0x154>
 800052e:	45a6      	cmp	lr, r4
 8000530:	f200 80bb 	bhi.w	80006aa <__udivmoddi4+0x2ca>
 8000534:	4608      	mov	r0, r1
 8000536:	eba4 040e 	sub.w	r4, r4, lr
 800053a:	ea40 4003 	orr.w	r0, r0, r3, lsl #16
 800053e:	e79c      	b.n	800047a <__udivmoddi4+0x9a>
 8000540:	f1c6 0720 	rsb	r7, r6, #32
 8000544:	40b3      	lsls	r3, r6
 8000546:	fa22 fc07 	lsr.w	ip, r2, r7
 800054a:	ea4c 0c03 	orr.w	ip, ip, r3
 800054e:	fa20 f407 	lsr.w	r4, r0, r7
 8000552:	fa01 f306 	lsl.w	r3, r1, r6
 8000556:	431c      	orrs	r4, r3
 8000558:	40f9      	lsrs	r1, r7
 800055a:	ea4f 491c 	mov.w	r9, ip, lsr #16
 800055e:	fa00 f306 	lsl.w	r3, r0, r6
 8000562:	fbb1 f8f9 	udiv	r8, r1, r9
 8000566:	0c20      	lsrs	r0, r4, #16
 8000568:	fa1f fe8c 	uxth.w	lr, ip
 800056c:	fb09 1118 	mls	r1, r9, r8, r1
 8000570:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 8000574:	fb08 f00e 	mul.w	r0, r8, lr
 8000578:	4288      	cmp	r0, r1
 800057a:	fa02 f206 	lsl.w	r2, r2, r6
 800057e:	d90b      	bls.n	8000598 <__udivmoddi4+0x1b8>
 8000580:	eb1c 0101 	adds.w	r1, ip, r1
 8000584:	f108 3aff 	add.w	sl, r8, #4294967295
 8000588:	f080 8088 	bcs.w	800069c <__udivmoddi4+0x2bc>
 800058c:	4288      	cmp	r0, r1
 800058e:	f240 8085 	bls.w	800069c <__udivmoddi4+0x2bc>
 8000592:	f1a8 0802 	sub.w	r8, r8, #2
 8000596:	4461      	add	r1, ip
 8000598:	1a09      	subs	r1, r1, r0
 800059a:	b2a4      	uxth	r4, r4
 800059c:	fbb1 f0f9 	udiv	r0, r1, r9
 80005a0:	fb09 1110 	mls	r1, r9, r0, r1
 80005a4:	ea44 4101 	orr.w	r1, r4, r1, lsl #16
 80005a8:	fb00 fe0e 	mul.w	lr, r0, lr
 80005ac:	458e      	cmp	lr, r1
 80005ae:	d908      	bls.n	80005c2 <__udivmoddi4+0x1e2>
 80005b0:	eb1c 0101 	adds.w	r1, ip, r1
 80005b4:	f100 34ff 	add.w	r4, r0, #4294967295
 80005b8:	d26c      	bcs.n	8000694 <__udivmoddi4+0x2b4>
 80005ba:	458e      	cmp	lr, r1
 80005bc:	d96a      	bls.n	8000694 <__udivmoddi4+0x2b4>
 80005be:	3802      	subs	r0, #2
 80005c0:	4461      	add	r1, ip
 80005c2:	ea40 4008 	orr.w	r0, r0, r8, lsl #16
 80005c6:	fba0 9402 	umull	r9, r4, r0, r2
 80005ca:	eba1 010e 	sub.w	r1, r1, lr
 80005ce:	42a1      	cmp	r1, r4
 80005d0:	46c8      	mov	r8, r9
 80005d2:	46a6      	mov	lr, r4
 80005d4:	d356      	bcc.n	8000684 <__udivmoddi4+0x2a4>
 80005d6:	d053      	beq.n	8000680 <__udivmoddi4+0x2a0>
 80005d8:	b15d      	cbz	r5, 80005f2 <__udivmoddi4+0x212>
 80005da:	ebb3 0208 	subs.w	r2, r3, r8
 80005de:	eb61 010e 	sbc.w	r1, r1, lr
 80005e2:	fa01 f707 	lsl.w	r7, r1, r7
 80005e6:	fa22 f306 	lsr.w	r3, r2, r6
 80005ea:	40f1      	lsrs	r1, r6
 80005ec:	431f      	orrs	r7, r3
 80005ee:	e9c5 7100 	strd	r7, r1, [r5]
 80005f2:	2600      	movs	r6, #0
 80005f4:	4631      	mov	r1, r6
 80005f6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80005fa:	f1c2 0320 	rsb	r3, r2, #32
 80005fe:	40d8      	lsrs	r0, r3
 8000600:	fa0c fc02 	lsl.w	ip, ip, r2
 8000604:	fa21 f303 	lsr.w	r3, r1, r3
 8000608:	4091      	lsls	r1, r2
 800060a:	4301      	orrs	r1, r0
 800060c:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000610:	fa1f fe8c 	uxth.w	lr, ip
 8000614:	fbb3 f0f7 	udiv	r0, r3, r7
 8000618:	fb07 3610 	mls	r6, r7, r0, r3
 800061c:	0c0b      	lsrs	r3, r1, #16
 800061e:	ea43 4306 	orr.w	r3, r3, r6, lsl #16
 8000622:	fb00 f60e 	mul.w	r6, r0, lr
 8000626:	429e      	cmp	r6, r3
 8000628:	fa04 f402 	lsl.w	r4, r4, r2
 800062c:	d908      	bls.n	8000640 <__udivmoddi4+0x260>
 800062e:	eb1c 0303 	adds.w	r3, ip, r3
 8000632:	f100 38ff 	add.w	r8, r0, #4294967295
 8000636:	d22f      	bcs.n	8000698 <__udivmoddi4+0x2b8>
 8000638:	429e      	cmp	r6, r3
 800063a:	d92d      	bls.n	8000698 <__udivmoddi4+0x2b8>
 800063c:	3802      	subs	r0, #2
 800063e:	4463      	add	r3, ip
 8000640:	1b9b      	subs	r3, r3, r6
 8000642:	b289      	uxth	r1, r1
 8000644:	fbb3 f6f7 	udiv	r6, r3, r7
 8000648:	fb07 3316 	mls	r3, r7, r6, r3
 800064c:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000650:	fb06 f30e 	mul.w	r3, r6, lr
 8000654:	428b      	cmp	r3, r1
 8000656:	d908      	bls.n	800066a <__udivmoddi4+0x28a>
 8000658:	eb1c 0101 	adds.w	r1, ip, r1
 800065c:	f106 38ff 	add.w	r8, r6, #4294967295
 8000660:	d216      	bcs.n	8000690 <__udivmoddi4+0x2b0>
 8000662:	428b      	cmp	r3, r1
 8000664:	d914      	bls.n	8000690 <__udivmoddi4+0x2b0>
 8000666:	3e02      	subs	r6, #2
 8000668:	4461      	add	r1, ip
 800066a:	1ac9      	subs	r1, r1, r3
 800066c:	ea46 4600 	orr.w	r6, r6, r0, lsl #16
 8000670:	e738      	b.n	80004e4 <__udivmoddi4+0x104>
 8000672:	462e      	mov	r6, r5
 8000674:	4628      	mov	r0, r5
 8000676:	e705      	b.n	8000484 <__udivmoddi4+0xa4>
 8000678:	4606      	mov	r6, r0
 800067a:	e6e3      	b.n	8000444 <__udivmoddi4+0x64>
 800067c:	4618      	mov	r0, r3
 800067e:	e6f8      	b.n	8000472 <__udivmoddi4+0x92>
 8000680:	454b      	cmp	r3, r9
 8000682:	d2a9      	bcs.n	80005d8 <__udivmoddi4+0x1f8>
 8000684:	ebb9 0802 	subs.w	r8, r9, r2
 8000688:	eb64 0e0c 	sbc.w	lr, r4, ip
 800068c:	3801      	subs	r0, #1
 800068e:	e7a3      	b.n	80005d8 <__udivmoddi4+0x1f8>
 8000690:	4646      	mov	r6, r8
 8000692:	e7ea      	b.n	800066a <__udivmoddi4+0x28a>
 8000694:	4620      	mov	r0, r4
 8000696:	e794      	b.n	80005c2 <__udivmoddi4+0x1e2>
 8000698:	4640      	mov	r0, r8
 800069a:	e7d1      	b.n	8000640 <__udivmoddi4+0x260>
 800069c:	46d0      	mov	r8, sl
 800069e:	e77b      	b.n	8000598 <__udivmoddi4+0x1b8>
 80006a0:	3b02      	subs	r3, #2
 80006a2:	4461      	add	r1, ip
 80006a4:	e732      	b.n	800050c <__udivmoddi4+0x12c>
 80006a6:	4630      	mov	r0, r6
 80006a8:	e709      	b.n	80004be <__udivmoddi4+0xde>
 80006aa:	4464      	add	r4, ip
 80006ac:	3802      	subs	r0, #2
 80006ae:	e742      	b.n	8000536 <__udivmoddi4+0x156>

080006b0 <__aeabi_idiv0>:
 80006b0:	4770      	bx	lr
 80006b2:	bf00      	nop

080006b4 <_write>:
#define PUTCHAR_PROTOTYPE int __io_putchar(int ch)
/* USER CODE END PFP */

/* Private user code ---------------------------------------------------------*/
/* USER CODE BEGIN 0 */
int _write(int file, char *ptr, int len) {
 80006b4:	b580      	push	{r7, lr}
 80006b6:	b084      	sub	sp, #16
 80006b8:	af00      	add	r7, sp, #0
 80006ba:	60f8      	str	r0, [r7, #12]
 80006bc:	60b9      	str	r1, [r7, #8]
 80006be:	607a      	str	r2, [r7, #4]
  HAL_UART_Transmit(&huart3, (uint8_t*) ptr, len, HAL_MAX_DELAY);
 80006c0:	687b      	ldr	r3, [r7, #4]
 80006c2:	b29a      	uxth	r2, r3
 80006c4:	f04f 33ff 	mov.w	r3, #4294967295
 80006c8:	68b9      	ldr	r1, [r7, #8]
 80006ca:	4804      	ldr	r0, [pc, #16]	; (80006dc <_write+0x28>)
 80006cc:	f004 fc98 	bl	8005000 <HAL_UART_Transmit>
  return len;
 80006d0:	687b      	ldr	r3, [r7, #4]
}
 80006d2:	4618      	mov	r0, r3
 80006d4:	3710      	adds	r7, #16
 80006d6:	46bd      	mov	sp, r7
 80006d8:	bd80      	pop	{r7, pc}
 80006da:	bf00      	nop
 80006dc:	240002d0 	.word	0x240002d0

080006e0 <main>:


/* Define the test thread prototypes.  */

int main(void)
{
 80006e0:	b580      	push	{r7, lr}
 80006e2:	b084      	sub	sp, #16
 80006e4:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN 1 */
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/
	  MPU_Config();
 80006e6:	f000 f9d6 	bl	8000a96 <MPU_Config>
  \details Turns on I-Cache
  */
__STATIC_FORCEINLINE void SCB_EnableICache (void)
{
  #if defined (__ICACHE_PRESENT) && (__ICACHE_PRESENT == 1U)
    if (SCB->CCR & SCB_CCR_IC_Msk) return;  /* return if ICache is already enabled */
 80006ea:	4b3c      	ldr	r3, [pc, #240]	; (80007dc <main+0xfc>)
 80006ec:	695b      	ldr	r3, [r3, #20]
 80006ee:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80006f2:	2b00      	cmp	r3, #0
 80006f4:	d11b      	bne.n	800072e <main+0x4e>
  \details Acts as a special kind of Data Memory Barrier.
           It completes when all explicit memory accesses before this instruction complete.
 */
__STATIC_FORCEINLINE void __DSB(void)
{
  __ASM volatile ("dsb 0xF":::"memory");
 80006f6:	f3bf 8f4f 	dsb	sy
}
 80006fa:	bf00      	nop
  __ASM volatile ("isb 0xF":::"memory");
 80006fc:	f3bf 8f6f 	isb	sy
}
 8000700:	bf00      	nop

    __DSB();
    __ISB();
    SCB->ICIALLU = 0UL;                     /* invalidate I-Cache */
 8000702:	4b36      	ldr	r3, [pc, #216]	; (80007dc <main+0xfc>)
 8000704:	2200      	movs	r2, #0
 8000706:	f8c3 2250 	str.w	r2, [r3, #592]	; 0x250
  __ASM volatile ("dsb 0xF":::"memory");
 800070a:	f3bf 8f4f 	dsb	sy
}
 800070e:	bf00      	nop
  __ASM volatile ("isb 0xF":::"memory");
 8000710:	f3bf 8f6f 	isb	sy
}
 8000714:	bf00      	nop
    __DSB();
    __ISB();
    SCB->CCR |=  (uint32_t)SCB_CCR_IC_Msk;  /* enable I-Cache */
 8000716:	4b31      	ldr	r3, [pc, #196]	; (80007dc <main+0xfc>)
 8000718:	695b      	ldr	r3, [r3, #20]
 800071a:	4a30      	ldr	r2, [pc, #192]	; (80007dc <main+0xfc>)
 800071c:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8000720:	6153      	str	r3, [r2, #20]
  __ASM volatile ("dsb 0xF":::"memory");
 8000722:	f3bf 8f4f 	dsb	sy
}
 8000726:	bf00      	nop
  __ASM volatile ("isb 0xF":::"memory");
 8000728:	f3bf 8f6f 	isb	sy
}
 800072c:	e000      	b.n	8000730 <main+0x50>
    if (SCB->CCR & SCB_CCR_IC_Msk) return;  /* return if ICache is already enabled */
 800072e:	bf00      	nop
  #if defined (__DCACHE_PRESENT) && (__DCACHE_PRESENT == 1U)
    uint32_t ccsidr;
    uint32_t sets;
    uint32_t ways;

    if (SCB->CCR & SCB_CCR_DC_Msk) return;  /* return if DCache is already enabled */
 8000730:	4b2a      	ldr	r3, [pc, #168]	; (80007dc <main+0xfc>)
 8000732:	695b      	ldr	r3, [r3, #20]
 8000734:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8000738:	2b00      	cmp	r3, #0
 800073a:	d138      	bne.n	80007ae <main+0xce>

    SCB->CSSELR = 0U;                       /* select Level 1 data cache */
 800073c:	4b27      	ldr	r3, [pc, #156]	; (80007dc <main+0xfc>)
 800073e:	2200      	movs	r2, #0
 8000740:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
  __ASM volatile ("dsb 0xF":::"memory");
 8000744:	f3bf 8f4f 	dsb	sy
}
 8000748:	bf00      	nop
    __DSB();

    ccsidr = SCB->CCSIDR;
 800074a:	4b24      	ldr	r3, [pc, #144]	; (80007dc <main+0xfc>)
 800074c:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8000750:	60fb      	str	r3, [r7, #12]

                                            /* invalidate D-Cache */
    sets = (uint32_t)(CCSIDR_SETS(ccsidr));
 8000752:	68fb      	ldr	r3, [r7, #12]
 8000754:	0b5b      	lsrs	r3, r3, #13
 8000756:	f3c3 030e 	ubfx	r3, r3, #0, #15
 800075a:	60bb      	str	r3, [r7, #8]
    do {
      ways = (uint32_t)(CCSIDR_WAYS(ccsidr));
 800075c:	68fb      	ldr	r3, [r7, #12]
 800075e:	08db      	lsrs	r3, r3, #3
 8000760:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8000764:	607b      	str	r3, [r7, #4]
      do {
        SCB->DCISW = (((sets << SCB_DCISW_SET_Pos) & SCB_DCISW_SET_Msk) |
 8000766:	68bb      	ldr	r3, [r7, #8]
 8000768:	015a      	lsls	r2, r3, #5
 800076a:	f643 73e0 	movw	r3, #16352	; 0x3fe0
 800076e:	4013      	ands	r3, r2
                      ((ways << SCB_DCISW_WAY_Pos) & SCB_DCISW_WAY_Msk)  );
 8000770:	687a      	ldr	r2, [r7, #4]
 8000772:	0792      	lsls	r2, r2, #30
        SCB->DCISW = (((sets << SCB_DCISW_SET_Pos) & SCB_DCISW_SET_Msk) |
 8000774:	4919      	ldr	r1, [pc, #100]	; (80007dc <main+0xfc>)
 8000776:	4313      	orrs	r3, r2
 8000778:	f8c1 3260 	str.w	r3, [r1, #608]	; 0x260
        #if defined ( __CC_ARM )
          __schedule_barrier();
        #endif
      } while (ways-- != 0U);
 800077c:	687b      	ldr	r3, [r7, #4]
 800077e:	1e5a      	subs	r2, r3, #1
 8000780:	607a      	str	r2, [r7, #4]
 8000782:	2b00      	cmp	r3, #0
 8000784:	d1ef      	bne.n	8000766 <main+0x86>
    } while(sets-- != 0U);
 8000786:	68bb      	ldr	r3, [r7, #8]
 8000788:	1e5a      	subs	r2, r3, #1
 800078a:	60ba      	str	r2, [r7, #8]
 800078c:	2b00      	cmp	r3, #0
 800078e:	d1e5      	bne.n	800075c <main+0x7c>
  __ASM volatile ("dsb 0xF":::"memory");
 8000790:	f3bf 8f4f 	dsb	sy
}
 8000794:	bf00      	nop
    __DSB();

    SCB->CCR |=  (uint32_t)SCB_CCR_DC_Msk;  /* enable D-Cache */
 8000796:	4b11      	ldr	r3, [pc, #68]	; (80007dc <main+0xfc>)
 8000798:	695b      	ldr	r3, [r3, #20]
 800079a:	4a10      	ldr	r2, [pc, #64]	; (80007dc <main+0xfc>)
 800079c:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80007a0:	6153      	str	r3, [r2, #20]
  __ASM volatile ("dsb 0xF":::"memory");
 80007a2:	f3bf 8f4f 	dsb	sy
}
 80007a6:	bf00      	nop
  __ASM volatile ("isb 0xF":::"memory");
 80007a8:	f3bf 8f6f 	isb	sy
}
 80007ac:	e000      	b.n	80007b0 <main+0xd0>
    if (SCB->CCR & SCB_CCR_DC_Msk) return;  /* return if DCache is already enabled */
 80007ae:	bf00      	nop

	  /* Enable D-Cache---------------------------------------------------------*/
	  SCB_EnableDCache();

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 80007b0:	f000 fe88 	bl	80014c4 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 80007b4:	f000 f814 	bl	80007e0 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 80007b8:	f000 f99a 	bl	8000af0 <MX_GPIO_Init>
  MX_ETH_Init();
 80007bc:	f000 f880 	bl	80008c0 <MX_ETH_Init>
  MX_USART3_UART_Init();
 80007c0:	f000 f916 	bl	80009f0 <MX_USART3_UART_Init>
  MX_USB_OTG_HS_USB_Init();
 80007c4:	f000 f960 	bl	8000a88 <MX_USB_OTG_HS_USB_Init>
  MX_USART2_UART_Init();
 80007c8:	f000 f8c6 	bl	8000958 <MX_USART2_UART_Init>
  /* USER CODE BEGIN 2 */
osKernelInitialize();
 80007cc:	f005 fe64 	bl	8006498 <osKernelInitialize>
tm_main();
 80007d0:	f000 fde0 	bl	8001394 <tm_main>
osKernelStart();
 80007d4:	f005 fe84 	bl	80064e0 <osKernelStart>

  /* We should never get here as control is now taken by the scheduler */
  /* Infinite loop */
  /* USER CODE BEGIN WHILE */

  while (1)
 80007d8:	e7fe      	b.n	80007d8 <main+0xf8>
 80007da:	bf00      	nop
 80007dc:	e000ed00 	.word	0xe000ed00

080007e0 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 80007e0:	b580      	push	{r7, lr}
 80007e2:	b09c      	sub	sp, #112	; 0x70
 80007e4:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 80007e6:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80007ea:	224c      	movs	r2, #76	; 0x4c
 80007ec:	2100      	movs	r1, #0
 80007ee:	4618      	mov	r0, r3
 80007f0:	f009 faed 	bl	8009dce <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 80007f4:	1d3b      	adds	r3, r7, #4
 80007f6:	2220      	movs	r2, #32
 80007f8:	2100      	movs	r1, #0
 80007fa:	4618      	mov	r0, r3
 80007fc:	f009 fae7 	bl	8009dce <memset>

  /** Supply configuration update enable
  */
  HAL_PWREx_ConfigSupply(PWR_LDO_SUPPLY);
 8000800:	2002      	movs	r0, #2
 8000802:	f001 fe4b 	bl	800249c <HAL_PWREx_ConfigSupply>

  /** Configure the main internal regulator output voltage
  */
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE0);
 8000806:	2300      	movs	r3, #0
 8000808:	603b      	str	r3, [r7, #0]
 800080a:	4b2c      	ldr	r3, [pc, #176]	; (80008bc <SystemClock_Config+0xdc>)
 800080c:	699b      	ldr	r3, [r3, #24]
 800080e:	4a2b      	ldr	r2, [pc, #172]	; (80008bc <SystemClock_Config+0xdc>)
 8000810:	f423 4340 	bic.w	r3, r3, #49152	; 0xc000
 8000814:	6193      	str	r3, [r2, #24]
 8000816:	4b29      	ldr	r3, [pc, #164]	; (80008bc <SystemClock_Config+0xdc>)
 8000818:	699b      	ldr	r3, [r3, #24]
 800081a:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 800081e:	603b      	str	r3, [r7, #0]
 8000820:	683b      	ldr	r3, [r7, #0]

  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_VOSRDY)) {}
 8000822:	bf00      	nop
 8000824:	4b25      	ldr	r3, [pc, #148]	; (80008bc <SystemClock_Config+0xdc>)
 8000826:	699b      	ldr	r3, [r3, #24]
 8000828:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 800082c:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8000830:	d1f8      	bne.n	8000824 <SystemClock_Config+0x44>

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI48|RCC_OSCILLATORTYPE_HSE;
 8000832:	2321      	movs	r3, #33	; 0x21
 8000834:	627b      	str	r3, [r7, #36]	; 0x24
  RCC_OscInitStruct.HSEState = RCC_HSE_BYPASS;
 8000836:	f44f 23a0 	mov.w	r3, #327680	; 0x50000
 800083a:	62bb      	str	r3, [r7, #40]	; 0x28
  RCC_OscInitStruct.HSI48State = RCC_HSI48_ON;
 800083c:	2301      	movs	r3, #1
 800083e:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8000840:	2302      	movs	r3, #2
 8000842:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 8000844:	2302      	movs	r3, #2
 8000846:	64fb      	str	r3, [r7, #76]	; 0x4c
  RCC_OscInitStruct.PLL.PLLM = 4;
 8000848:	2304      	movs	r3, #4
 800084a:	653b      	str	r3, [r7, #80]	; 0x50
  RCC_OscInitStruct.PLL.PLLN = 275;
 800084c:	f240 1313 	movw	r3, #275	; 0x113
 8000850:	657b      	str	r3, [r7, #84]	; 0x54
  RCC_OscInitStruct.PLL.PLLP = 1;
 8000852:	2301      	movs	r3, #1
 8000854:	65bb      	str	r3, [r7, #88]	; 0x58
  RCC_OscInitStruct.PLL.PLLQ = 4;
 8000856:	2304      	movs	r3, #4
 8000858:	65fb      	str	r3, [r7, #92]	; 0x5c
  RCC_OscInitStruct.PLL.PLLR = 2;
 800085a:	2302      	movs	r3, #2
 800085c:	663b      	str	r3, [r7, #96]	; 0x60
  RCC_OscInitStruct.PLL.PLLRGE = RCC_PLL1VCIRANGE_1;
 800085e:	2304      	movs	r3, #4
 8000860:	667b      	str	r3, [r7, #100]	; 0x64
  RCC_OscInitStruct.PLL.PLLVCOSEL = RCC_PLL1VCOWIDE;
 8000862:	2300      	movs	r3, #0
 8000864:	66bb      	str	r3, [r7, #104]	; 0x68
  RCC_OscInitStruct.PLL.PLLFRACN = 0;
 8000866:	2300      	movs	r3, #0
 8000868:	66fb      	str	r3, [r7, #108]	; 0x6c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 800086a:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800086e:	4618      	mov	r0, r3
 8000870:	f001 fe4e 	bl	8002510 <HAL_RCC_OscConfig>
 8000874:	4603      	mov	r3, r0
 8000876:	2b00      	cmp	r3, #0
 8000878:	d001      	beq.n	800087e <SystemClock_Config+0x9e>
  {
    Error_Handler();
 800087a:	f000 fa35 	bl	8000ce8 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 800087e:	233f      	movs	r3, #63	; 0x3f
 8000880:	607b      	str	r3, [r7, #4]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2
                              |RCC_CLOCKTYPE_D3PCLK1|RCC_CLOCKTYPE_D1PCLK1;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8000882:	2303      	movs	r3, #3
 8000884:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.SYSCLKDivider = RCC_SYSCLK_DIV1;
 8000886:	2300      	movs	r3, #0
 8000888:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_HCLK_DIV2;
 800088a:	2308      	movs	r3, #8
 800088c:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB3CLKDivider = RCC_APB3_DIV2;
 800088e:	2340      	movs	r3, #64	; 0x40
 8000890:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_APB1_DIV2;
 8000892:	2340      	movs	r3, #64	; 0x40
 8000894:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_APB2_DIV2;
 8000896:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800089a:	61fb      	str	r3, [r7, #28]
  RCC_ClkInitStruct.APB4CLKDivider = RCC_APB4_DIV2;
 800089c:	2340      	movs	r3, #64	; 0x40
 800089e:	623b      	str	r3, [r7, #32]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_3) != HAL_OK)
 80008a0:	1d3b      	adds	r3, r7, #4
 80008a2:	2103      	movs	r1, #3
 80008a4:	4618      	mov	r0, r3
 80008a6:	f002 fa0d 	bl	8002cc4 <HAL_RCC_ClockConfig>
 80008aa:	4603      	mov	r3, r0
 80008ac:	2b00      	cmp	r3, #0
 80008ae:	d001      	beq.n	80008b4 <SystemClock_Config+0xd4>
  {
    Error_Handler();
 80008b0:	f000 fa1a 	bl	8000ce8 <Error_Handler>
  }
}
 80008b4:	bf00      	nop
 80008b6:	3770      	adds	r7, #112	; 0x70
 80008b8:	46bd      	mov	sp, r7
 80008ba:	bd80      	pop	{r7, pc}
 80008bc:	58024800 	.word	0x58024800

080008c0 <MX_ETH_Init>:
  * @param None
  * @retval None
  */

static void MX_ETH_Init(void)
{
 80008c0:	b580      	push	{r7, lr}
 80008c2:	af00      	add	r7, sp, #0
   static uint8_t MACAddr[6];

  /* USER CODE BEGIN ETH_Init 1 */

  /* USER CODE END ETH_Init 1 */
  heth.Instance = ETH;
 80008c4:	4b1e      	ldr	r3, [pc, #120]	; (8000940 <MX_ETH_Init+0x80>)
 80008c6:	4a1f      	ldr	r2, [pc, #124]	; (8000944 <MX_ETH_Init+0x84>)
 80008c8:	601a      	str	r2, [r3, #0]
  MACAddr[0] = 0x00;
 80008ca:	4b1f      	ldr	r3, [pc, #124]	; (8000948 <MX_ETH_Init+0x88>)
 80008cc:	2200      	movs	r2, #0
 80008ce:	701a      	strb	r2, [r3, #0]
  MACAddr[1] = 0x80;
 80008d0:	4b1d      	ldr	r3, [pc, #116]	; (8000948 <MX_ETH_Init+0x88>)
 80008d2:	2280      	movs	r2, #128	; 0x80
 80008d4:	705a      	strb	r2, [r3, #1]
  MACAddr[2] = 0xE1;
 80008d6:	4b1c      	ldr	r3, [pc, #112]	; (8000948 <MX_ETH_Init+0x88>)
 80008d8:	22e1      	movs	r2, #225	; 0xe1
 80008da:	709a      	strb	r2, [r3, #2]
  MACAddr[3] = 0x00;
 80008dc:	4b1a      	ldr	r3, [pc, #104]	; (8000948 <MX_ETH_Init+0x88>)
 80008de:	2200      	movs	r2, #0
 80008e0:	70da      	strb	r2, [r3, #3]
  MACAddr[4] = 0x00;
 80008e2:	4b19      	ldr	r3, [pc, #100]	; (8000948 <MX_ETH_Init+0x88>)
 80008e4:	2200      	movs	r2, #0
 80008e6:	711a      	strb	r2, [r3, #4]
  MACAddr[5] = 0x00;
 80008e8:	4b17      	ldr	r3, [pc, #92]	; (8000948 <MX_ETH_Init+0x88>)
 80008ea:	2200      	movs	r2, #0
 80008ec:	715a      	strb	r2, [r3, #5]
  heth.Init.MACAddr = &MACAddr[0];
 80008ee:	4b14      	ldr	r3, [pc, #80]	; (8000940 <MX_ETH_Init+0x80>)
 80008f0:	4a15      	ldr	r2, [pc, #84]	; (8000948 <MX_ETH_Init+0x88>)
 80008f2:	605a      	str	r2, [r3, #4]
  heth.Init.MediaInterface = HAL_ETH_RMII_MODE;
 80008f4:	4b12      	ldr	r3, [pc, #72]	; (8000940 <MX_ETH_Init+0x80>)
 80008f6:	2201      	movs	r2, #1
 80008f8:	721a      	strb	r2, [r3, #8]
  heth.Init.TxDesc = DMATxDscrTab;
 80008fa:	4b11      	ldr	r3, [pc, #68]	; (8000940 <MX_ETH_Init+0x80>)
 80008fc:	4a13      	ldr	r2, [pc, #76]	; (800094c <MX_ETH_Init+0x8c>)
 80008fe:	60da      	str	r2, [r3, #12]
  heth.Init.RxDesc = DMARxDscrTab;
 8000900:	4b0f      	ldr	r3, [pc, #60]	; (8000940 <MX_ETH_Init+0x80>)
 8000902:	4a13      	ldr	r2, [pc, #76]	; (8000950 <MX_ETH_Init+0x90>)
 8000904:	611a      	str	r2, [r3, #16]
  heth.Init.RxBuffLen = 1536;
 8000906:	4b0e      	ldr	r3, [pc, #56]	; (8000940 <MX_ETH_Init+0x80>)
 8000908:	f44f 62c0 	mov.w	r2, #1536	; 0x600
 800090c:	615a      	str	r2, [r3, #20]

  /* USER CODE BEGIN MACADDRESS */

  /* USER CODE END MACADDRESS */

  if (HAL_ETH_Init(&heth) != HAL_OK)
 800090e:	480c      	ldr	r0, [pc, #48]	; (8000940 <MX_ETH_Init+0x80>)
 8000910:	f000 ffde 	bl	80018d0 <HAL_ETH_Init>
 8000914:	4603      	mov	r3, r0
 8000916:	2b00      	cmp	r3, #0
 8000918:	d001      	beq.n	800091e <MX_ETH_Init+0x5e>
  {
    Error_Handler();
 800091a:	f000 f9e5 	bl	8000ce8 <Error_Handler>
  }

  memset(&TxConfig, 0 , sizeof(ETH_TxPacketConfig));
 800091e:	2238      	movs	r2, #56	; 0x38
 8000920:	2100      	movs	r1, #0
 8000922:	480c      	ldr	r0, [pc, #48]	; (8000954 <MX_ETH_Init+0x94>)
 8000924:	f009 fa53 	bl	8009dce <memset>
  TxConfig.Attributes = ETH_TX_PACKETS_FEATURES_CSUM | ETH_TX_PACKETS_FEATURES_CRCPAD;
 8000928:	4b0a      	ldr	r3, [pc, #40]	; (8000954 <MX_ETH_Init+0x94>)
 800092a:	2221      	movs	r2, #33	; 0x21
 800092c:	601a      	str	r2, [r3, #0]
  TxConfig.ChecksumCtrl = ETH_CHECKSUM_IPHDR_PAYLOAD_INSERT_PHDR_CALC;
 800092e:	4b09      	ldr	r3, [pc, #36]	; (8000954 <MX_ETH_Init+0x94>)
 8000930:	f44f 3240 	mov.w	r2, #196608	; 0x30000
 8000934:	615a      	str	r2, [r3, #20]
  TxConfig.CRCPadCtrl = ETH_CRC_PAD_INSERT;
 8000936:	4b07      	ldr	r3, [pc, #28]	; (8000954 <MX_ETH_Init+0x94>)
 8000938:	2200      	movs	r2, #0
 800093a:	611a      	str	r2, [r3, #16]
  /* USER CODE BEGIN ETH_Init 2 */

  /* USER CODE END ETH_Init 2 */

}
 800093c:	bf00      	nop
 800093e:	bd80      	pop	{r7, pc}
 8000940:	2400018c 	.word	0x2400018c
 8000944:	40028000 	.word	0x40028000
 8000948:	24000364 	.word	0x24000364
 800094c:	240000d8 	.word	0x240000d8
 8000950:	24000078 	.word	0x24000078
 8000954:	24000154 	.word	0x24000154

08000958 <MX_USART2_UART_Init>:
  * @brief USART2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART2_UART_Init(void)
{
 8000958:	b580      	push	{r7, lr}
 800095a:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 800095c:	4b22      	ldr	r3, [pc, #136]	; (80009e8 <MX_USART2_UART_Init+0x90>)
 800095e:	4a23      	ldr	r2, [pc, #140]	; (80009ec <MX_USART2_UART_Init+0x94>)
 8000960:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 115200;
 8000962:	4b21      	ldr	r3, [pc, #132]	; (80009e8 <MX_USART2_UART_Init+0x90>)
 8000964:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8000968:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 800096a:	4b1f      	ldr	r3, [pc, #124]	; (80009e8 <MX_USART2_UART_Init+0x90>)
 800096c:	2200      	movs	r2, #0
 800096e:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 8000970:	4b1d      	ldr	r3, [pc, #116]	; (80009e8 <MX_USART2_UART_Init+0x90>)
 8000972:	2200      	movs	r2, #0
 8000974:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 8000976:	4b1c      	ldr	r3, [pc, #112]	; (80009e8 <MX_USART2_UART_Init+0x90>)
 8000978:	2200      	movs	r2, #0
 800097a:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 800097c:	4b1a      	ldr	r3, [pc, #104]	; (80009e8 <MX_USART2_UART_Init+0x90>)
 800097e:	220c      	movs	r2, #12
 8000980:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8000982:	4b19      	ldr	r3, [pc, #100]	; (80009e8 <MX_USART2_UART_Init+0x90>)
 8000984:	2200      	movs	r2, #0
 8000986:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 8000988:	4b17      	ldr	r3, [pc, #92]	; (80009e8 <MX_USART2_UART_Init+0x90>)
 800098a:	2200      	movs	r2, #0
 800098c:	61da      	str	r2, [r3, #28]
  huart2.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 800098e:	4b16      	ldr	r3, [pc, #88]	; (80009e8 <MX_USART2_UART_Init+0x90>)
 8000990:	2200      	movs	r2, #0
 8000992:	621a      	str	r2, [r3, #32]
  huart2.Init.ClockPrescaler = UART_PRESCALER_DIV1;
 8000994:	4b14      	ldr	r3, [pc, #80]	; (80009e8 <MX_USART2_UART_Init+0x90>)
 8000996:	2200      	movs	r2, #0
 8000998:	625a      	str	r2, [r3, #36]	; 0x24
  huart2.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 800099a:	4b13      	ldr	r3, [pc, #76]	; (80009e8 <MX_USART2_UART_Init+0x90>)
 800099c:	2200      	movs	r2, #0
 800099e:	629a      	str	r2, [r3, #40]	; 0x28
  if (HAL_UART_Init(&huart2) != HAL_OK)
 80009a0:	4811      	ldr	r0, [pc, #68]	; (80009e8 <MX_USART2_UART_Init+0x90>)
 80009a2:	f004 fadd 	bl	8004f60 <HAL_UART_Init>
 80009a6:	4603      	mov	r3, r0
 80009a8:	2b00      	cmp	r3, #0
 80009aa:	d001      	beq.n	80009b0 <MX_USART2_UART_Init+0x58>
  {
    Error_Handler();
 80009ac:	f000 f99c 	bl	8000ce8 <Error_Handler>
  }
  if (HAL_UARTEx_SetTxFifoThreshold(&huart2, UART_TXFIFO_THRESHOLD_1_8) != HAL_OK)
 80009b0:	2100      	movs	r1, #0
 80009b2:	480d      	ldr	r0, [pc, #52]	; (80009e8 <MX_USART2_UART_Init+0x90>)
 80009b4:	f005 fc71 	bl	800629a <HAL_UARTEx_SetTxFifoThreshold>
 80009b8:	4603      	mov	r3, r0
 80009ba:	2b00      	cmp	r3, #0
 80009bc:	d001      	beq.n	80009c2 <MX_USART2_UART_Init+0x6a>
  {
    Error_Handler();
 80009be:	f000 f993 	bl	8000ce8 <Error_Handler>
  }
  if (HAL_UARTEx_SetRxFifoThreshold(&huart2, UART_RXFIFO_THRESHOLD_1_8) != HAL_OK)
 80009c2:	2100      	movs	r1, #0
 80009c4:	4808      	ldr	r0, [pc, #32]	; (80009e8 <MX_USART2_UART_Init+0x90>)
 80009c6:	f005 fca6 	bl	8006316 <HAL_UARTEx_SetRxFifoThreshold>
 80009ca:	4603      	mov	r3, r0
 80009cc:	2b00      	cmp	r3, #0
 80009ce:	d001      	beq.n	80009d4 <MX_USART2_UART_Init+0x7c>
  {
    Error_Handler();
 80009d0:	f000 f98a 	bl	8000ce8 <Error_Handler>
  }
  if (HAL_UARTEx_DisableFifoMode(&huart2) != HAL_OK)
 80009d4:	4804      	ldr	r0, [pc, #16]	; (80009e8 <MX_USART2_UART_Init+0x90>)
 80009d6:	f005 fc27 	bl	8006228 <HAL_UARTEx_DisableFifoMode>
 80009da:	4603      	mov	r3, r0
 80009dc:	2b00      	cmp	r3, #0
 80009de:	d001      	beq.n	80009e4 <MX_USART2_UART_Init+0x8c>
  {
    Error_Handler();
 80009e0:	f000 f982 	bl	8000ce8 <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 80009e4:	bf00      	nop
 80009e6:	bd80      	pop	{r7, pc}
 80009e8:	2400023c 	.word	0x2400023c
 80009ec:	40004400 	.word	0x40004400

080009f0 <MX_USART3_UART_Init>:
  * @brief USART3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART3_UART_Init(void)
{
 80009f0:	b580      	push	{r7, lr}
 80009f2:	af00      	add	r7, sp, #0
  /* USER CODE END USART3_Init 0 */

  /* USER CODE BEGIN USART3_Init 1 */

  /* USER CODE END USART3_Init 1 */
  huart3.Instance = USART3;
 80009f4:	4b22      	ldr	r3, [pc, #136]	; (8000a80 <MX_USART3_UART_Init+0x90>)
 80009f6:	4a23      	ldr	r2, [pc, #140]	; (8000a84 <MX_USART3_UART_Init+0x94>)
 80009f8:	601a      	str	r2, [r3, #0]
  huart3.Init.BaudRate = 115200;
 80009fa:	4b21      	ldr	r3, [pc, #132]	; (8000a80 <MX_USART3_UART_Init+0x90>)
 80009fc:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8000a00:	605a      	str	r2, [r3, #4]
  huart3.Init.WordLength = UART_WORDLENGTH_8B;
 8000a02:	4b1f      	ldr	r3, [pc, #124]	; (8000a80 <MX_USART3_UART_Init+0x90>)
 8000a04:	2200      	movs	r2, #0
 8000a06:	609a      	str	r2, [r3, #8]
  huart3.Init.StopBits = UART_STOPBITS_1;
 8000a08:	4b1d      	ldr	r3, [pc, #116]	; (8000a80 <MX_USART3_UART_Init+0x90>)
 8000a0a:	2200      	movs	r2, #0
 8000a0c:	60da      	str	r2, [r3, #12]
  huart3.Init.Parity = UART_PARITY_NONE;
 8000a0e:	4b1c      	ldr	r3, [pc, #112]	; (8000a80 <MX_USART3_UART_Init+0x90>)
 8000a10:	2200      	movs	r2, #0
 8000a12:	611a      	str	r2, [r3, #16]
  huart3.Init.Mode = UART_MODE_TX_RX;
 8000a14:	4b1a      	ldr	r3, [pc, #104]	; (8000a80 <MX_USART3_UART_Init+0x90>)
 8000a16:	220c      	movs	r2, #12
 8000a18:	615a      	str	r2, [r3, #20]
  huart3.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8000a1a:	4b19      	ldr	r3, [pc, #100]	; (8000a80 <MX_USART3_UART_Init+0x90>)
 8000a1c:	2200      	movs	r2, #0
 8000a1e:	619a      	str	r2, [r3, #24]
  huart3.Init.OverSampling = UART_OVERSAMPLING_16;
 8000a20:	4b17      	ldr	r3, [pc, #92]	; (8000a80 <MX_USART3_UART_Init+0x90>)
 8000a22:	2200      	movs	r2, #0
 8000a24:	61da      	str	r2, [r3, #28]
  huart3.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8000a26:	4b16      	ldr	r3, [pc, #88]	; (8000a80 <MX_USART3_UART_Init+0x90>)
 8000a28:	2200      	movs	r2, #0
 8000a2a:	621a      	str	r2, [r3, #32]
  huart3.Init.ClockPrescaler = UART_PRESCALER_DIV1;
 8000a2c:	4b14      	ldr	r3, [pc, #80]	; (8000a80 <MX_USART3_UART_Init+0x90>)
 8000a2e:	2200      	movs	r2, #0
 8000a30:	625a      	str	r2, [r3, #36]	; 0x24
  huart3.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8000a32:	4b13      	ldr	r3, [pc, #76]	; (8000a80 <MX_USART3_UART_Init+0x90>)
 8000a34:	2200      	movs	r2, #0
 8000a36:	629a      	str	r2, [r3, #40]	; 0x28
  if (HAL_UART_Init(&huart3) != HAL_OK)
 8000a38:	4811      	ldr	r0, [pc, #68]	; (8000a80 <MX_USART3_UART_Init+0x90>)
 8000a3a:	f004 fa91 	bl	8004f60 <HAL_UART_Init>
 8000a3e:	4603      	mov	r3, r0
 8000a40:	2b00      	cmp	r3, #0
 8000a42:	d001      	beq.n	8000a48 <MX_USART3_UART_Init+0x58>
  {
    Error_Handler();
 8000a44:	f000 f950 	bl	8000ce8 <Error_Handler>
  }
  if (HAL_UARTEx_SetTxFifoThreshold(&huart3, UART_TXFIFO_THRESHOLD_1_8) != HAL_OK)
 8000a48:	2100      	movs	r1, #0
 8000a4a:	480d      	ldr	r0, [pc, #52]	; (8000a80 <MX_USART3_UART_Init+0x90>)
 8000a4c:	f005 fc25 	bl	800629a <HAL_UARTEx_SetTxFifoThreshold>
 8000a50:	4603      	mov	r3, r0
 8000a52:	2b00      	cmp	r3, #0
 8000a54:	d001      	beq.n	8000a5a <MX_USART3_UART_Init+0x6a>
  {
    Error_Handler();
 8000a56:	f000 f947 	bl	8000ce8 <Error_Handler>
  }
  if (HAL_UARTEx_SetRxFifoThreshold(&huart3, UART_RXFIFO_THRESHOLD_1_8) != HAL_OK)
 8000a5a:	2100      	movs	r1, #0
 8000a5c:	4808      	ldr	r0, [pc, #32]	; (8000a80 <MX_USART3_UART_Init+0x90>)
 8000a5e:	f005 fc5a 	bl	8006316 <HAL_UARTEx_SetRxFifoThreshold>
 8000a62:	4603      	mov	r3, r0
 8000a64:	2b00      	cmp	r3, #0
 8000a66:	d001      	beq.n	8000a6c <MX_USART3_UART_Init+0x7c>
  {
    Error_Handler();
 8000a68:	f000 f93e 	bl	8000ce8 <Error_Handler>
  }
  if (HAL_UARTEx_DisableFifoMode(&huart3) != HAL_OK)
 8000a6c:	4804      	ldr	r0, [pc, #16]	; (8000a80 <MX_USART3_UART_Init+0x90>)
 8000a6e:	f005 fbdb 	bl	8006228 <HAL_UARTEx_DisableFifoMode>
 8000a72:	4603      	mov	r3, r0
 8000a74:	2b00      	cmp	r3, #0
 8000a76:	d001      	beq.n	8000a7c <MX_USART3_UART_Init+0x8c>
  {
    Error_Handler();
 8000a78:	f000 f936 	bl	8000ce8 <Error_Handler>
  }
  /* USER CODE BEGIN USART3_Init 2 */

  /* USER CODE END USART3_Init 2 */

}
 8000a7c:	bf00      	nop
 8000a7e:	bd80      	pop	{r7, pc}
 8000a80:	240002d0 	.word	0x240002d0
 8000a84:	40004800 	.word	0x40004800

08000a88 <MX_USB_OTG_HS_USB_Init>:
  * @brief USB_OTG_HS Initialization Function
  * @param None
  * @retval None
  */
static void MX_USB_OTG_HS_USB_Init(void)
{
 8000a88:	b480      	push	{r7}
 8000a8a:	af00      	add	r7, sp, #0
  /* USER CODE END USB_OTG_HS_Init 1 */
  /* USER CODE BEGIN USB_OTG_HS_Init 2 */

  /* USER CODE END USB_OTG_HS_Init 2 */

}
 8000a8c:	bf00      	nop
 8000a8e:	46bd      	mov	sp, r7
 8000a90:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000a94:	4770      	bx	lr

08000a96 <MPU_Config>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
void MPU_Config(void)
{
 8000a96:	b580      	push	{r7, lr}
 8000a98:	b084      	sub	sp, #16
 8000a9a:	af00      	add	r7, sp, #0
  MPU_Region_InitTypeDef MPU_InitStruct = {0};
 8000a9c:	463b      	mov	r3, r7
 8000a9e:	2200      	movs	r2, #0
 8000aa0:	601a      	str	r2, [r3, #0]
 8000aa2:	605a      	str	r2, [r3, #4]
 8000aa4:	609a      	str	r2, [r3, #8]
 8000aa6:	60da      	str	r2, [r3, #12]

  /* Disables the MPU */
  HAL_MPU_Disable();
 8000aa8:	f000 fe96 	bl	80017d8 <HAL_MPU_Disable>

  /** Initializes and configures the Region and the memory to be protected
  */
  MPU_InitStruct.Enable = MPU_REGION_ENABLE;
 8000aac:	2301      	movs	r3, #1
 8000aae:	703b      	strb	r3, [r7, #0]
  MPU_InitStruct.Number = MPU_REGION_NUMBER0;
 8000ab0:	2300      	movs	r3, #0
 8000ab2:	707b      	strb	r3, [r7, #1]
  MPU_InitStruct.BaseAddress = 0x0;
 8000ab4:	2300      	movs	r3, #0
 8000ab6:	607b      	str	r3, [r7, #4]
  MPU_InitStruct.Size = MPU_REGION_SIZE_4GB;
 8000ab8:	231f      	movs	r3, #31
 8000aba:	723b      	strb	r3, [r7, #8]
  MPU_InitStruct.SubRegionDisable = 0x87;
 8000abc:	2387      	movs	r3, #135	; 0x87
 8000abe:	727b      	strb	r3, [r7, #9]
  MPU_InitStruct.TypeExtField = MPU_TEX_LEVEL0;
 8000ac0:	2300      	movs	r3, #0
 8000ac2:	72bb      	strb	r3, [r7, #10]
  MPU_InitStruct.AccessPermission = MPU_REGION_NO_ACCESS;
 8000ac4:	2300      	movs	r3, #0
 8000ac6:	72fb      	strb	r3, [r7, #11]
  MPU_InitStruct.DisableExec = MPU_INSTRUCTION_ACCESS_DISABLE;
 8000ac8:	2301      	movs	r3, #1
 8000aca:	733b      	strb	r3, [r7, #12]
  MPU_InitStruct.IsShareable = MPU_ACCESS_SHAREABLE;
 8000acc:	2301      	movs	r3, #1
 8000ace:	737b      	strb	r3, [r7, #13]
  MPU_InitStruct.IsCacheable = MPU_ACCESS_NOT_CACHEABLE;
 8000ad0:	2300      	movs	r3, #0
 8000ad2:	73bb      	strb	r3, [r7, #14]
  MPU_InitStruct.IsBufferable = MPU_ACCESS_NOT_BUFFERABLE;
 8000ad4:	2300      	movs	r3, #0
 8000ad6:	73fb      	strb	r3, [r7, #15]

  HAL_MPU_ConfigRegion(&MPU_InitStruct);
 8000ad8:	463b      	mov	r3, r7
 8000ada:	4618      	mov	r0, r3
 8000adc:	f000 feb4 	bl	8001848 <HAL_MPU_ConfigRegion>
  /* Enables the MPU */
  HAL_MPU_Enable(MPU_PRIVILEGED_DEFAULT);
 8000ae0:	2004      	movs	r0, #4
 8000ae2:	f000 fe91 	bl	8001808 <HAL_MPU_Enable>

}
 8000ae6:	bf00      	nop
 8000ae8:	3710      	adds	r7, #16
 8000aea:	46bd      	mov	sp, r7
 8000aec:	bd80      	pop	{r7, pc}
	...

08000af0 <MX_GPIO_Init>:
static void MX_GPIO_Init(void)
{
 8000af0:	b580      	push	{r7, lr}
 8000af2:	b08c      	sub	sp, #48	; 0x30
 8000af4:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000af6:	f107 031c 	add.w	r3, r7, #28
 8000afa:	2200      	movs	r2, #0
 8000afc:	601a      	str	r2, [r3, #0]
 8000afe:	605a      	str	r2, [r3, #4]
 8000b00:	609a      	str	r2, [r3, #8]
 8000b02:	60da      	str	r2, [r3, #12]
 8000b04:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8000b06:	4b71      	ldr	r3, [pc, #452]	; (8000ccc <MX_GPIO_Init+0x1dc>)
 8000b08:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000b0c:	4a6f      	ldr	r2, [pc, #444]	; (8000ccc <MX_GPIO_Init+0x1dc>)
 8000b0e:	f043 0304 	orr.w	r3, r3, #4
 8000b12:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8000b16:	4b6d      	ldr	r3, [pc, #436]	; (8000ccc <MX_GPIO_Init+0x1dc>)
 8000b18:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000b1c:	f003 0304 	and.w	r3, r3, #4
 8000b20:	61bb      	str	r3, [r7, #24]
 8000b22:	69bb      	ldr	r3, [r7, #24]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 8000b24:	4b69      	ldr	r3, [pc, #420]	; (8000ccc <MX_GPIO_Init+0x1dc>)
 8000b26:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000b2a:	4a68      	ldr	r2, [pc, #416]	; (8000ccc <MX_GPIO_Init+0x1dc>)
 8000b2c:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8000b30:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8000b34:	4b65      	ldr	r3, [pc, #404]	; (8000ccc <MX_GPIO_Init+0x1dc>)
 8000b36:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000b3a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8000b3e:	617b      	str	r3, [r7, #20]
 8000b40:	697b      	ldr	r3, [r7, #20]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000b42:	4b62      	ldr	r3, [pc, #392]	; (8000ccc <MX_GPIO_Init+0x1dc>)
 8000b44:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000b48:	4a60      	ldr	r2, [pc, #384]	; (8000ccc <MX_GPIO_Init+0x1dc>)
 8000b4a:	f043 0301 	orr.w	r3, r3, #1
 8000b4e:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8000b52:	4b5e      	ldr	r3, [pc, #376]	; (8000ccc <MX_GPIO_Init+0x1dc>)
 8000b54:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000b58:	f003 0301 	and.w	r3, r3, #1
 8000b5c:	613b      	str	r3, [r7, #16]
 8000b5e:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8000b60:	4b5a      	ldr	r3, [pc, #360]	; (8000ccc <MX_GPIO_Init+0x1dc>)
 8000b62:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000b66:	4a59      	ldr	r2, [pc, #356]	; (8000ccc <MX_GPIO_Init+0x1dc>)
 8000b68:	f043 0302 	orr.w	r3, r3, #2
 8000b6c:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8000b70:	4b56      	ldr	r3, [pc, #344]	; (8000ccc <MX_GPIO_Init+0x1dc>)
 8000b72:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000b76:	f003 0302 	and.w	r3, r3, #2
 8000b7a:	60fb      	str	r3, [r7, #12]
 8000b7c:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8000b7e:	4b53      	ldr	r3, [pc, #332]	; (8000ccc <MX_GPIO_Init+0x1dc>)
 8000b80:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000b84:	4a51      	ldr	r2, [pc, #324]	; (8000ccc <MX_GPIO_Init+0x1dc>)
 8000b86:	f043 0308 	orr.w	r3, r3, #8
 8000b8a:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8000b8e:	4b4f      	ldr	r3, [pc, #316]	; (8000ccc <MX_GPIO_Init+0x1dc>)
 8000b90:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000b94:	f003 0308 	and.w	r3, r3, #8
 8000b98:	60bb      	str	r3, [r7, #8]
 8000b9a:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOG_CLK_ENABLE();
 8000b9c:	4b4b      	ldr	r3, [pc, #300]	; (8000ccc <MX_GPIO_Init+0x1dc>)
 8000b9e:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000ba2:	4a4a      	ldr	r2, [pc, #296]	; (8000ccc <MX_GPIO_Init+0x1dc>)
 8000ba4:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8000ba8:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8000bac:	4b47      	ldr	r3, [pc, #284]	; (8000ccc <MX_GPIO_Init+0x1dc>)
 8000bae:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000bb2:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8000bb6:	607b      	str	r3, [r7, #4]
 8000bb8:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOE_CLK_ENABLE();
 8000bba:	4b44      	ldr	r3, [pc, #272]	; (8000ccc <MX_GPIO_Init+0x1dc>)
 8000bbc:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000bc0:	4a42      	ldr	r2, [pc, #264]	; (8000ccc <MX_GPIO_Init+0x1dc>)
 8000bc2:	f043 0310 	orr.w	r3, r3, #16
 8000bc6:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8000bca:	4b40      	ldr	r3, [pc, #256]	; (8000ccc <MX_GPIO_Init+0x1dc>)
 8000bcc:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000bd0:	f003 0310 	and.w	r3, r3, #16
 8000bd4:	603b      	str	r3, [r7, #0]
 8000bd6:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, LED_GREEN_Pin|LED_RED_Pin, GPIO_PIN_RESET);
 8000bd8:	2200      	movs	r2, #0
 8000bda:	f244 0101 	movw	r1, #16385	; 0x4001
 8000bde:	483c      	ldr	r0, [pc, #240]	; (8000cd0 <MX_GPIO_Init+0x1e0>)
 8000be0:	f001 fc42 	bl	8002468 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(USB_FS_PWR_EN_GPIO_Port, USB_FS_PWR_EN_Pin, GPIO_PIN_RESET);
 8000be4:	2200      	movs	r2, #0
 8000be6:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8000bea:	483a      	ldr	r0, [pc, #232]	; (8000cd4 <MX_GPIO_Init+0x1e4>)
 8000bec:	f001 fc3c 	bl	8002468 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(LED_YELLOW_GPIO_Port, LED_YELLOW_Pin, GPIO_PIN_RESET);
 8000bf0:	2200      	movs	r2, #0
 8000bf2:	2102      	movs	r1, #2
 8000bf4:	4838      	ldr	r0, [pc, #224]	; (8000cd8 <MX_GPIO_Init+0x1e8>)
 8000bf6:	f001 fc37 	bl	8002468 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : B1_Pin */
  GPIO_InitStruct.Pin = B1_Pin;
 8000bfa:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8000bfe:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000c00:	2300      	movs	r3, #0
 8000c02:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000c04:	2300      	movs	r3, #0
 8000c06:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(B1_GPIO_Port, &GPIO_InitStruct);
 8000c08:	f107 031c 	add.w	r3, r7, #28
 8000c0c:	4619      	mov	r1, r3
 8000c0e:	4833      	ldr	r0, [pc, #204]	; (8000cdc <MX_GPIO_Init+0x1ec>)
 8000c10:	f001 fa82 	bl	8002118 <HAL_GPIO_Init>

  /*Configure GPIO pins : LED_GREEN_Pin LED_RED_Pin */
  GPIO_InitStruct.Pin = LED_GREEN_Pin|LED_RED_Pin;
 8000c14:	f244 0301 	movw	r3, #16385	; 0x4001
 8000c18:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000c1a:	2301      	movs	r3, #1
 8000c1c:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000c1e:	2300      	movs	r3, #0
 8000c20:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000c22:	2300      	movs	r3, #0
 8000c24:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000c26:	f107 031c 	add.w	r3, r7, #28
 8000c2a:	4619      	mov	r1, r3
 8000c2c:	4828      	ldr	r0, [pc, #160]	; (8000cd0 <MX_GPIO_Init+0x1e0>)
 8000c2e:	f001 fa73 	bl	8002118 <HAL_GPIO_Init>

  /*Configure GPIO pin : USB_FS_PWR_EN_Pin */
  GPIO_InitStruct.Pin = USB_FS_PWR_EN_Pin;
 8000c32:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8000c36:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000c38:	2301      	movs	r3, #1
 8000c3a:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000c3c:	2300      	movs	r3, #0
 8000c3e:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000c40:	2300      	movs	r3, #0
 8000c42:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(USB_FS_PWR_EN_GPIO_Port, &GPIO_InitStruct);
 8000c44:	f107 031c 	add.w	r3, r7, #28
 8000c48:	4619      	mov	r1, r3
 8000c4a:	4822      	ldr	r0, [pc, #136]	; (8000cd4 <MX_GPIO_Init+0x1e4>)
 8000c4c:	f001 fa64 	bl	8002118 <HAL_GPIO_Init>

  /*Configure GPIO pin : USB_FS_OVCR_Pin */
  GPIO_InitStruct.Pin = USB_FS_OVCR_Pin;
 8000c50:	2380      	movs	r3, #128	; 0x80
 8000c52:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 8000c54:	f44f 1388 	mov.w	r3, #1114112	; 0x110000
 8000c58:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000c5a:	2300      	movs	r3, #0
 8000c5c:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(USB_FS_OVCR_GPIO_Port, &GPIO_InitStruct);
 8000c5e:	f107 031c 	add.w	r3, r7, #28
 8000c62:	4619      	mov	r1, r3
 8000c64:	481e      	ldr	r0, [pc, #120]	; (8000ce0 <MX_GPIO_Init+0x1f0>)
 8000c66:	f001 fa57 	bl	8002118 <HAL_GPIO_Init>

  /*Configure GPIO pin : USB_FS_VBUS_Pin */
  GPIO_InitStruct.Pin = USB_FS_VBUS_Pin;
 8000c6a:	f44f 7300 	mov.w	r3, #512	; 0x200
 8000c6e:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000c70:	2300      	movs	r3, #0
 8000c72:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000c74:	2300      	movs	r3, #0
 8000c76:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(USB_FS_VBUS_GPIO_Port, &GPIO_InitStruct);
 8000c78:	f107 031c 	add.w	r3, r7, #28
 8000c7c:	4619      	mov	r1, r3
 8000c7e:	4819      	ldr	r0, [pc, #100]	; (8000ce4 <MX_GPIO_Init+0x1f4>)
 8000c80:	f001 fa4a 	bl	8002118 <HAL_GPIO_Init>

  /*Configure GPIO pin : USB_FS_ID_Pin */
  GPIO_InitStruct.Pin = USB_FS_ID_Pin;
 8000c84:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8000c88:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000c8a:	2302      	movs	r3, #2
 8000c8c:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000c8e:	2300      	movs	r3, #0
 8000c90:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000c92:	2300      	movs	r3, #0
 8000c94:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Alternate = GPIO_AF10_OTG1_HS;
 8000c96:	230a      	movs	r3, #10
 8000c98:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(USB_FS_ID_GPIO_Port, &GPIO_InitStruct);
 8000c9a:	f107 031c 	add.w	r3, r7, #28
 8000c9e:	4619      	mov	r1, r3
 8000ca0:	4810      	ldr	r0, [pc, #64]	; (8000ce4 <MX_GPIO_Init+0x1f4>)
 8000ca2:	f001 fa39 	bl	8002118 <HAL_GPIO_Init>

  /*Configure GPIO pin : LED_YELLOW_Pin */
  GPIO_InitStruct.Pin = LED_YELLOW_Pin;
 8000ca6:	2302      	movs	r3, #2
 8000ca8:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000caa:	2301      	movs	r3, #1
 8000cac:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000cae:	2300      	movs	r3, #0
 8000cb0:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000cb2:	2300      	movs	r3, #0
 8000cb4:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(LED_YELLOW_GPIO_Port, &GPIO_InitStruct);
 8000cb6:	f107 031c 	add.w	r3, r7, #28
 8000cba:	4619      	mov	r1, r3
 8000cbc:	4806      	ldr	r0, [pc, #24]	; (8000cd8 <MX_GPIO_Init+0x1e8>)
 8000cbe:	f001 fa2b 	bl	8002118 <HAL_GPIO_Init>

}
 8000cc2:	bf00      	nop
 8000cc4:	3730      	adds	r7, #48	; 0x30
 8000cc6:	46bd      	mov	sp, r7
 8000cc8:	bd80      	pop	{r7, pc}
 8000cca:	bf00      	nop
 8000ccc:	58024400 	.word	0x58024400
 8000cd0:	58020400 	.word	0x58020400
 8000cd4:	58020c00 	.word	0x58020c00
 8000cd8:	58021000 	.word	0x58021000
 8000cdc:	58020800 	.word	0x58020800
 8000ce0:	58021800 	.word	0x58021800
 8000ce4:	58020000 	.word	0x58020000

08000ce8 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8000ce8:	b480      	push	{r7}
 8000cea:	af00      	add	r7, sp, #0
  __ASM volatile ("cpsid i" : : : "memory");
 8000cec:	b672      	cpsid	i
}
 8000cee:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8000cf0:	e7fe      	b.n	8000cf0 <Error_Handler+0x8>
	...

08000cf4 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000cf4:	b580      	push	{r7, lr}
 8000cf6:	b082      	sub	sp, #8
 8000cf8:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000cfa:	4b0c      	ldr	r3, [pc, #48]	; (8000d2c <HAL_MspInit+0x38>)
 8000cfc:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 8000d00:	4a0a      	ldr	r2, [pc, #40]	; (8000d2c <HAL_MspInit+0x38>)
 8000d02:	f043 0302 	orr.w	r3, r3, #2
 8000d06:	f8c2 30f4 	str.w	r3, [r2, #244]	; 0xf4
 8000d0a:	4b08      	ldr	r3, [pc, #32]	; (8000d2c <HAL_MspInit+0x38>)
 8000d0c:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 8000d10:	f003 0302 	and.w	r3, r3, #2
 8000d14:	607b      	str	r3, [r7, #4]
 8000d16:	687b      	ldr	r3, [r7, #4]

  /* System interrupt init*/
  /* PendSV_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(PendSV_IRQn, 15, 0);
 8000d18:	2200      	movs	r2, #0
 8000d1a:	210f      	movs	r1, #15
 8000d1c:	f06f 0001 	mvn.w	r0, #1
 8000d20:	f000 fd33 	bl	800178a <HAL_NVIC_SetPriority>

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8000d24:	bf00      	nop
 8000d26:	3708      	adds	r7, #8
 8000d28:	46bd      	mov	sp, r7
 8000d2a:	bd80      	pop	{r7, pc}
 8000d2c:	58024400 	.word	0x58024400

08000d30 <HAL_ETH_MspInit>:
* This function configures the hardware resources used in this example
* @param heth: ETH handle pointer
* @retval None
*/
void HAL_ETH_MspInit(ETH_HandleTypeDef* heth)
{
 8000d30:	b580      	push	{r7, lr}
 8000d32:	b08e      	sub	sp, #56	; 0x38
 8000d34:	af00      	add	r7, sp, #0
 8000d36:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000d38:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000d3c:	2200      	movs	r2, #0
 8000d3e:	601a      	str	r2, [r3, #0]
 8000d40:	605a      	str	r2, [r3, #4]
 8000d42:	609a      	str	r2, [r3, #8]
 8000d44:	60da      	str	r2, [r3, #12]
 8000d46:	611a      	str	r2, [r3, #16]
  if(heth->Instance==ETH)
 8000d48:	687b      	ldr	r3, [r7, #4]
 8000d4a:	681b      	ldr	r3, [r3, #0]
 8000d4c:	4a59      	ldr	r2, [pc, #356]	; (8000eb4 <HAL_ETH_MspInit+0x184>)
 8000d4e:	4293      	cmp	r3, r2
 8000d50:	f040 80ab 	bne.w	8000eaa <HAL_ETH_MspInit+0x17a>
  {
  /* USER CODE BEGIN ETH_MspInit 0 */

  /* USER CODE END ETH_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_ETH1MAC_CLK_ENABLE();
 8000d54:	4b58      	ldr	r3, [pc, #352]	; (8000eb8 <HAL_ETH_MspInit+0x188>)
 8000d56:	f8d3 30d8 	ldr.w	r3, [r3, #216]	; 0xd8
 8000d5a:	4a57      	ldr	r2, [pc, #348]	; (8000eb8 <HAL_ETH_MspInit+0x188>)
 8000d5c:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8000d60:	f8c2 30d8 	str.w	r3, [r2, #216]	; 0xd8
 8000d64:	4b54      	ldr	r3, [pc, #336]	; (8000eb8 <HAL_ETH_MspInit+0x188>)
 8000d66:	f8d3 30d8 	ldr.w	r3, [r3, #216]	; 0xd8
 8000d6a:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8000d6e:	623b      	str	r3, [r7, #32]
 8000d70:	6a3b      	ldr	r3, [r7, #32]
    __HAL_RCC_ETH1TX_CLK_ENABLE();
 8000d72:	4b51      	ldr	r3, [pc, #324]	; (8000eb8 <HAL_ETH_MspInit+0x188>)
 8000d74:	f8d3 30d8 	ldr.w	r3, [r3, #216]	; 0xd8
 8000d78:	4a4f      	ldr	r2, [pc, #316]	; (8000eb8 <HAL_ETH_MspInit+0x188>)
 8000d7a:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8000d7e:	f8c2 30d8 	str.w	r3, [r2, #216]	; 0xd8
 8000d82:	4b4d      	ldr	r3, [pc, #308]	; (8000eb8 <HAL_ETH_MspInit+0x188>)
 8000d84:	f8d3 30d8 	ldr.w	r3, [r3, #216]	; 0xd8
 8000d88:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8000d8c:	61fb      	str	r3, [r7, #28]
 8000d8e:	69fb      	ldr	r3, [r7, #28]
    __HAL_RCC_ETH1RX_CLK_ENABLE();
 8000d90:	4b49      	ldr	r3, [pc, #292]	; (8000eb8 <HAL_ETH_MspInit+0x188>)
 8000d92:	f8d3 30d8 	ldr.w	r3, [r3, #216]	; 0xd8
 8000d96:	4a48      	ldr	r2, [pc, #288]	; (8000eb8 <HAL_ETH_MspInit+0x188>)
 8000d98:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8000d9c:	f8c2 30d8 	str.w	r3, [r2, #216]	; 0xd8
 8000da0:	4b45      	ldr	r3, [pc, #276]	; (8000eb8 <HAL_ETH_MspInit+0x188>)
 8000da2:	f8d3 30d8 	ldr.w	r3, [r3, #216]	; 0xd8
 8000da6:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8000daa:	61bb      	str	r3, [r7, #24]
 8000dac:	69bb      	ldr	r3, [r7, #24]

    __HAL_RCC_GPIOC_CLK_ENABLE();
 8000dae:	4b42      	ldr	r3, [pc, #264]	; (8000eb8 <HAL_ETH_MspInit+0x188>)
 8000db0:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000db4:	4a40      	ldr	r2, [pc, #256]	; (8000eb8 <HAL_ETH_MspInit+0x188>)
 8000db6:	f043 0304 	orr.w	r3, r3, #4
 8000dba:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8000dbe:	4b3e      	ldr	r3, [pc, #248]	; (8000eb8 <HAL_ETH_MspInit+0x188>)
 8000dc0:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000dc4:	f003 0304 	and.w	r3, r3, #4
 8000dc8:	617b      	str	r3, [r7, #20]
 8000dca:	697b      	ldr	r3, [r7, #20]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000dcc:	4b3a      	ldr	r3, [pc, #232]	; (8000eb8 <HAL_ETH_MspInit+0x188>)
 8000dce:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000dd2:	4a39      	ldr	r2, [pc, #228]	; (8000eb8 <HAL_ETH_MspInit+0x188>)
 8000dd4:	f043 0301 	orr.w	r3, r3, #1
 8000dd8:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8000ddc:	4b36      	ldr	r3, [pc, #216]	; (8000eb8 <HAL_ETH_MspInit+0x188>)
 8000dde:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000de2:	f003 0301 	and.w	r3, r3, #1
 8000de6:	613b      	str	r3, [r7, #16]
 8000de8:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8000dea:	4b33      	ldr	r3, [pc, #204]	; (8000eb8 <HAL_ETH_MspInit+0x188>)
 8000dec:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000df0:	4a31      	ldr	r2, [pc, #196]	; (8000eb8 <HAL_ETH_MspInit+0x188>)
 8000df2:	f043 0302 	orr.w	r3, r3, #2
 8000df6:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8000dfa:	4b2f      	ldr	r3, [pc, #188]	; (8000eb8 <HAL_ETH_MspInit+0x188>)
 8000dfc:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000e00:	f003 0302 	and.w	r3, r3, #2
 8000e04:	60fb      	str	r3, [r7, #12]
 8000e06:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOG_CLK_ENABLE();
 8000e08:	4b2b      	ldr	r3, [pc, #172]	; (8000eb8 <HAL_ETH_MspInit+0x188>)
 8000e0a:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000e0e:	4a2a      	ldr	r2, [pc, #168]	; (8000eb8 <HAL_ETH_MspInit+0x188>)
 8000e10:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8000e14:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8000e18:	4b27      	ldr	r3, [pc, #156]	; (8000eb8 <HAL_ETH_MspInit+0x188>)
 8000e1a:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000e1e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8000e22:	60bb      	str	r3, [r7, #8]
 8000e24:	68bb      	ldr	r3, [r7, #8]
    PC5     ------> ETH_RXD1
    PB13     ------> ETH_TXD1
    PG11     ------> ETH_TX_EN
    PG13     ------> ETH_TXD0
    */
    GPIO_InitStruct.Pin = RMII_MDC_Pin|RMII_RXD0_Pin|RMII_RXD1_Pin;
 8000e26:	2332      	movs	r3, #50	; 0x32
 8000e28:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000e2a:	2302      	movs	r3, #2
 8000e2c:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000e2e:	2300      	movs	r3, #0
 8000e30:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000e32:	2300      	movs	r3, #0
 8000e34:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 8000e36:	230b      	movs	r3, #11
 8000e38:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8000e3a:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000e3e:	4619      	mov	r1, r3
 8000e40:	481e      	ldr	r0, [pc, #120]	; (8000ebc <HAL_ETH_MspInit+0x18c>)
 8000e42:	f001 f969 	bl	8002118 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = RMII_REF_CLK_Pin|RMII_MDIO_Pin|RMII_CRS_DV_Pin;
 8000e46:	2386      	movs	r3, #134	; 0x86
 8000e48:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000e4a:	2302      	movs	r3, #2
 8000e4c:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000e4e:	2300      	movs	r3, #0
 8000e50:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000e52:	2300      	movs	r3, #0
 8000e54:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 8000e56:	230b      	movs	r3, #11
 8000e58:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000e5a:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000e5e:	4619      	mov	r1, r3
 8000e60:	4817      	ldr	r0, [pc, #92]	; (8000ec0 <HAL_ETH_MspInit+0x190>)
 8000e62:	f001 f959 	bl	8002118 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = RMII_TXD1_Pin;
 8000e66:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8000e6a:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000e6c:	2302      	movs	r3, #2
 8000e6e:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000e70:	2300      	movs	r3, #0
 8000e72:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000e74:	2300      	movs	r3, #0
 8000e76:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 8000e78:	230b      	movs	r3, #11
 8000e7a:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(RMII_TXD1_GPIO_Port, &GPIO_InitStruct);
 8000e7c:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000e80:	4619      	mov	r1, r3
 8000e82:	4810      	ldr	r0, [pc, #64]	; (8000ec4 <HAL_ETH_MspInit+0x194>)
 8000e84:	f001 f948 	bl	8002118 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = RMII_TX_EN_Pin|RMII_TXD0_Pin;
 8000e88:	f44f 5320 	mov.w	r3, #10240	; 0x2800
 8000e8c:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000e8e:	2302      	movs	r3, #2
 8000e90:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000e92:	2300      	movs	r3, #0
 8000e94:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000e96:	2300      	movs	r3, #0
 8000e98:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 8000e9a:	230b      	movs	r3, #11
 8000e9c:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOG, &GPIO_InitStruct);
 8000e9e:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000ea2:	4619      	mov	r1, r3
 8000ea4:	4808      	ldr	r0, [pc, #32]	; (8000ec8 <HAL_ETH_MspInit+0x198>)
 8000ea6:	f001 f937 	bl	8002118 <HAL_GPIO_Init>
  /* USER CODE BEGIN ETH_MspInit 1 */

  /* USER CODE END ETH_MspInit 1 */
  }

}
 8000eaa:	bf00      	nop
 8000eac:	3738      	adds	r7, #56	; 0x38
 8000eae:	46bd      	mov	sp, r7
 8000eb0:	bd80      	pop	{r7, pc}
 8000eb2:	bf00      	nop
 8000eb4:	40028000 	.word	0x40028000
 8000eb8:	58024400 	.word	0x58024400
 8000ebc:	58020800 	.word	0x58020800
 8000ec0:	58020000 	.word	0x58020000
 8000ec4:	58020400 	.word	0x58020400
 8000ec8:	58021800 	.word	0x58021800

08000ecc <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8000ecc:	b580      	push	{r7, lr}
 8000ece:	b0b8      	sub	sp, #224	; 0xe0
 8000ed0:	af00      	add	r7, sp, #0
 8000ed2:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000ed4:	f107 03cc 	add.w	r3, r7, #204	; 0xcc
 8000ed8:	2200      	movs	r2, #0
 8000eda:	601a      	str	r2, [r3, #0]
 8000edc:	605a      	str	r2, [r3, #4]
 8000ede:	609a      	str	r2, [r3, #8]
 8000ee0:	60da      	str	r2, [r3, #12]
 8000ee2:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8000ee4:	f107 0310 	add.w	r3, r7, #16
 8000ee8:	22b8      	movs	r2, #184	; 0xb8
 8000eea:	2100      	movs	r1, #0
 8000eec:	4618      	mov	r0, r3
 8000eee:	f008 ff6e 	bl	8009dce <memset>
  if(huart->Instance==USART3)
 8000ef2:	687b      	ldr	r3, [r7, #4]
 8000ef4:	681b      	ldr	r3, [r3, #0]
 8000ef6:	4a27      	ldr	r2, [pc, #156]	; (8000f94 <HAL_UART_MspInit+0xc8>)
 8000ef8:	4293      	cmp	r3, r2
 8000efa:	d146      	bne.n	8000f8a <HAL_UART_MspInit+0xbe>

  /* USER CODE END USART3_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_USART3;
 8000efc:	f04f 0202 	mov.w	r2, #2
 8000f00:	f04f 0300 	mov.w	r3, #0
 8000f04:	e9c7 2304 	strd	r2, r3, [r7, #16]
    PeriphClkInitStruct.Usart234578ClockSelection = RCC_USART234578CLKSOURCE_D2PCLK1;
 8000f08:	2300      	movs	r3, #0
 8000f0a:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8000f0e:	f107 0310 	add.w	r3, r7, #16
 8000f12:	4618      	mov	r0, r3
 8000f14:	f002 fa62 	bl	80033dc <HAL_RCCEx_PeriphCLKConfig>
 8000f18:	4603      	mov	r3, r0
 8000f1a:	2b00      	cmp	r3, #0
 8000f1c:	d001      	beq.n	8000f22 <HAL_UART_MspInit+0x56>
    {
      Error_Handler();
 8000f1e:	f7ff fee3 	bl	8000ce8 <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_USART3_CLK_ENABLE();
 8000f22:	4b1d      	ldr	r3, [pc, #116]	; (8000f98 <HAL_UART_MspInit+0xcc>)
 8000f24:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 8000f28:	4a1b      	ldr	r2, [pc, #108]	; (8000f98 <HAL_UART_MspInit+0xcc>)
 8000f2a:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8000f2e:	f8c2 30e8 	str.w	r3, [r2, #232]	; 0xe8
 8000f32:	4b19      	ldr	r3, [pc, #100]	; (8000f98 <HAL_UART_MspInit+0xcc>)
 8000f34:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 8000f38:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8000f3c:	60fb      	str	r3, [r7, #12]
 8000f3e:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOD_CLK_ENABLE();
 8000f40:	4b15      	ldr	r3, [pc, #84]	; (8000f98 <HAL_UART_MspInit+0xcc>)
 8000f42:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000f46:	4a14      	ldr	r2, [pc, #80]	; (8000f98 <HAL_UART_MspInit+0xcc>)
 8000f48:	f043 0308 	orr.w	r3, r3, #8
 8000f4c:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8000f50:	4b11      	ldr	r3, [pc, #68]	; (8000f98 <HAL_UART_MspInit+0xcc>)
 8000f52:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000f56:	f003 0308 	and.w	r3, r3, #8
 8000f5a:	60bb      	str	r3, [r7, #8]
 8000f5c:	68bb      	ldr	r3, [r7, #8]
    /**USART3 GPIO Configuration
    PD8     ------> USART3_TX
    PD9     ------> USART3_RX
    */
    GPIO_InitStruct.Pin = STLK_VCP_RX_Pin|STLK_VCP_TX_Pin;
 8000f5e:	f44f 7340 	mov.w	r3, #768	; 0x300
 8000f62:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000f66:	2302      	movs	r3, #2
 8000f68:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000f6c:	2300      	movs	r3, #0
 8000f6e:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000f72:	2300      	movs	r3, #0
 8000f74:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
    GPIO_InitStruct.Alternate = GPIO_AF7_USART3;
 8000f78:	2307      	movs	r3, #7
 8000f7a:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8000f7e:	f107 03cc 	add.w	r3, r7, #204	; 0xcc
 8000f82:	4619      	mov	r1, r3
 8000f84:	4805      	ldr	r0, [pc, #20]	; (8000f9c <HAL_UART_MspInit+0xd0>)
 8000f86:	f001 f8c7 	bl	8002118 <HAL_GPIO_Init>
  /* USER CODE BEGIN USART3_MspInit 1 */

  /* USER CODE END USART3_MspInit 1 */
  }

}
 8000f8a:	bf00      	nop
 8000f8c:	37e0      	adds	r7, #224	; 0xe0
 8000f8e:	46bd      	mov	sp, r7
 8000f90:	bd80      	pop	{r7, pc}
 8000f92:	bf00      	nop
 8000f94:	40004800 	.word	0x40004800
 8000f98:	58024400 	.word	0x58024400
 8000f9c:	58020c00 	.word	0x58020c00

08000fa0 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8000fa0:	b480      	push	{r7}
 8000fa2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8000fa4:	e7fe      	b.n	8000fa4 <NMI_Handler+0x4>

08000fa6 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8000fa6:	b480      	push	{r7}
 8000fa8:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8000faa:	e7fe      	b.n	8000faa <HardFault_Handler+0x4>

08000fac <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8000fac:	b480      	push	{r7}
 8000fae:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8000fb0:	e7fe      	b.n	8000fb0 <MemManage_Handler+0x4>

08000fb2 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8000fb2:	b480      	push	{r7}
 8000fb4:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8000fb6:	e7fe      	b.n	8000fb6 <BusFault_Handler+0x4>

08000fb8 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8000fb8:	b480      	push	{r7}
 8000fba:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8000fbc:	e7fe      	b.n	8000fbc <UsageFault_Handler+0x4>

08000fbe <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8000fbe:	b480      	push	{r7}
 8000fc0:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8000fc2:	bf00      	nop
 8000fc4:	46bd      	mov	sp, r7
 8000fc6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000fca:	4770      	bx	lr

08000fcc <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8000fcc:	b580      	push	{r7, lr}
 8000fce:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8000fd0:	f000 faea 	bl	80015a8 <HAL_IncTick>
#if (INCLUDE_xTaskGetSchedulerState == 1 )
  if (xTaskGetSchedulerState() != taskSCHEDULER_NOT_STARTED)
 8000fd4:	f007 fc66 	bl	80088a4 <xTaskGetSchedulerState>
 8000fd8:	4603      	mov	r3, r0
 8000fda:	2b01      	cmp	r3, #1
 8000fdc:	d001      	beq.n	8000fe2 <SysTick_Handler+0x16>
  {
#endif /* INCLUDE_xTaskGetSchedulerState */
  xPortSysTickHandler();
 8000fde:	f008 fb4b 	bl	8009678 <xPortSysTickHandler>
  }
#endif /* INCLUDE_xTaskGetSchedulerState */
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8000fe2:	bf00      	nop
 8000fe4:	bd80      	pop	{r7, pc}

08000fe6 <_read>:
  _kill(status, -1);
  while (1) {}    /* Make sure we hang here */
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 8000fe6:	b580      	push	{r7, lr}
 8000fe8:	b086      	sub	sp, #24
 8000fea:	af00      	add	r7, sp, #0
 8000fec:	60f8      	str	r0, [r7, #12]
 8000fee:	60b9      	str	r1, [r7, #8]
 8000ff0:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8000ff2:	2300      	movs	r3, #0
 8000ff4:	617b      	str	r3, [r7, #20]
 8000ff6:	e00a      	b.n	800100e <_read+0x28>
  {
    *ptr++ = __io_getchar();
 8000ff8:	f3af 8000 	nop.w
 8000ffc:	4601      	mov	r1, r0
 8000ffe:	68bb      	ldr	r3, [r7, #8]
 8001000:	1c5a      	adds	r2, r3, #1
 8001002:	60ba      	str	r2, [r7, #8]
 8001004:	b2ca      	uxtb	r2, r1
 8001006:	701a      	strb	r2, [r3, #0]
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001008:	697b      	ldr	r3, [r7, #20]
 800100a:	3301      	adds	r3, #1
 800100c:	617b      	str	r3, [r7, #20]
 800100e:	697a      	ldr	r2, [r7, #20]
 8001010:	687b      	ldr	r3, [r7, #4]
 8001012:	429a      	cmp	r2, r3
 8001014:	dbf0      	blt.n	8000ff8 <_read+0x12>
  }

  return len;
 8001016:	687b      	ldr	r3, [r7, #4]
}
 8001018:	4618      	mov	r0, r3
 800101a:	3718      	adds	r7, #24
 800101c:	46bd      	mov	sp, r7
 800101e:	bd80      	pop	{r7, pc}

08001020 <_close>:
  }
  return len;
}

int _close(int file)
{
 8001020:	b480      	push	{r7}
 8001022:	b083      	sub	sp, #12
 8001024:	af00      	add	r7, sp, #0
 8001026:	6078      	str	r0, [r7, #4]
  (void)file;
  return -1;
 8001028:	f04f 33ff 	mov.w	r3, #4294967295
}
 800102c:	4618      	mov	r0, r3
 800102e:	370c      	adds	r7, #12
 8001030:	46bd      	mov	sp, r7
 8001032:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001036:	4770      	bx	lr

08001038 <_fstat>:


int _fstat(int file, struct stat *st)
{
 8001038:	b480      	push	{r7}
 800103a:	b083      	sub	sp, #12
 800103c:	af00      	add	r7, sp, #0
 800103e:	6078      	str	r0, [r7, #4]
 8001040:	6039      	str	r1, [r7, #0]
  (void)file;
  st->st_mode = S_IFCHR;
 8001042:	683b      	ldr	r3, [r7, #0]
 8001044:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 8001048:	605a      	str	r2, [r3, #4]
  return 0;
 800104a:	2300      	movs	r3, #0
}
 800104c:	4618      	mov	r0, r3
 800104e:	370c      	adds	r7, #12
 8001050:	46bd      	mov	sp, r7
 8001052:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001056:	4770      	bx	lr

08001058 <_isatty>:

int _isatty(int file)
{
 8001058:	b480      	push	{r7}
 800105a:	b083      	sub	sp, #12
 800105c:	af00      	add	r7, sp, #0
 800105e:	6078      	str	r0, [r7, #4]
  (void)file;
  return 1;
 8001060:	2301      	movs	r3, #1
}
 8001062:	4618      	mov	r0, r3
 8001064:	370c      	adds	r7, #12
 8001066:	46bd      	mov	sp, r7
 8001068:	f85d 7b04 	ldr.w	r7, [sp], #4
 800106c:	4770      	bx	lr

0800106e <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 800106e:	b480      	push	{r7}
 8001070:	b085      	sub	sp, #20
 8001072:	af00      	add	r7, sp, #0
 8001074:	60f8      	str	r0, [r7, #12]
 8001076:	60b9      	str	r1, [r7, #8]
 8001078:	607a      	str	r2, [r7, #4]
  (void)file;
  (void)ptr;
  (void)dir;
  return 0;
 800107a:	2300      	movs	r3, #0
}
 800107c:	4618      	mov	r0, r3
 800107e:	3714      	adds	r7, #20
 8001080:	46bd      	mov	sp, r7
 8001082:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001086:	4770      	bx	lr

08001088 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8001088:	b580      	push	{r7, lr}
 800108a:	b086      	sub	sp, #24
 800108c:	af00      	add	r7, sp, #0
 800108e:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8001090:	4a14      	ldr	r2, [pc, #80]	; (80010e4 <_sbrk+0x5c>)
 8001092:	4b15      	ldr	r3, [pc, #84]	; (80010e8 <_sbrk+0x60>)
 8001094:	1ad3      	subs	r3, r2, r3
 8001096:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8001098:	697b      	ldr	r3, [r7, #20]
 800109a:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 800109c:	4b13      	ldr	r3, [pc, #76]	; (80010ec <_sbrk+0x64>)
 800109e:	681b      	ldr	r3, [r3, #0]
 80010a0:	2b00      	cmp	r3, #0
 80010a2:	d102      	bne.n	80010aa <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 80010a4:	4b11      	ldr	r3, [pc, #68]	; (80010ec <_sbrk+0x64>)
 80010a6:	4a12      	ldr	r2, [pc, #72]	; (80010f0 <_sbrk+0x68>)
 80010a8:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 80010aa:	4b10      	ldr	r3, [pc, #64]	; (80010ec <_sbrk+0x64>)
 80010ac:	681a      	ldr	r2, [r3, #0]
 80010ae:	687b      	ldr	r3, [r7, #4]
 80010b0:	4413      	add	r3, r2
 80010b2:	693a      	ldr	r2, [r7, #16]
 80010b4:	429a      	cmp	r2, r3
 80010b6:	d207      	bcs.n	80010c8 <_sbrk+0x40>
  {
    errno = ENOMEM;
 80010b8:	f008 fd58 	bl	8009b6c <__errno>
 80010bc:	4603      	mov	r3, r0
 80010be:	220c      	movs	r2, #12
 80010c0:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 80010c2:	f04f 33ff 	mov.w	r3, #4294967295
 80010c6:	e009      	b.n	80010dc <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 80010c8:	4b08      	ldr	r3, [pc, #32]	; (80010ec <_sbrk+0x64>)
 80010ca:	681b      	ldr	r3, [r3, #0]
 80010cc:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 80010ce:	4b07      	ldr	r3, [pc, #28]	; (80010ec <_sbrk+0x64>)
 80010d0:	681a      	ldr	r2, [r3, #0]
 80010d2:	687b      	ldr	r3, [r7, #4]
 80010d4:	4413      	add	r3, r2
 80010d6:	4a05      	ldr	r2, [pc, #20]	; (80010ec <_sbrk+0x64>)
 80010d8:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 80010da:	68fb      	ldr	r3, [r7, #12]
}
 80010dc:	4618      	mov	r0, r3
 80010de:	3718      	adds	r7, #24
 80010e0:	46bd      	mov	sp, r7
 80010e2:	bd80      	pop	{r7, pc}
 80010e4:	24050000 	.word	0x24050000
 80010e8:	00000400 	.word	0x00000400
 80010ec:	2400036c 	.word	0x2400036c
 80010f0:	24004fc8 	.word	0x24004fc8

080010f4 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 80010f4:	b480      	push	{r7}
 80010f6:	af00      	add	r7, sp, #0
 __IO uint32_t tmpreg;
#endif /* DATA_IN_D2_SRAM */

  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << (10*2))|(3UL << (11*2)));  /* set CP10 and CP11 Full Access */
 80010f8:	4b32      	ldr	r3, [pc, #200]	; (80011c4 <SystemInit+0xd0>)
 80010fa:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80010fe:	4a31      	ldr	r2, [pc, #196]	; (80011c4 <SystemInit+0xd0>)
 8001100:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8001104:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
  #endif
  /* Reset the RCC clock configuration to the default reset state ------------*/

   /* Increasing the CPU frequency */
  if(FLASH_LATENCY_DEFAULT  > (READ_BIT((FLASH->ACR), FLASH_ACR_LATENCY)))
 8001108:	4b2f      	ldr	r3, [pc, #188]	; (80011c8 <SystemInit+0xd4>)
 800110a:	681b      	ldr	r3, [r3, #0]
 800110c:	f003 030f 	and.w	r3, r3, #15
 8001110:	2b06      	cmp	r3, #6
 8001112:	d807      	bhi.n	8001124 <SystemInit+0x30>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    MODIFY_REG(FLASH->ACR, FLASH_ACR_LATENCY, (uint32_t)(FLASH_LATENCY_DEFAULT));
 8001114:	4b2c      	ldr	r3, [pc, #176]	; (80011c8 <SystemInit+0xd4>)
 8001116:	681b      	ldr	r3, [r3, #0]
 8001118:	f023 030f 	bic.w	r3, r3, #15
 800111c:	4a2a      	ldr	r2, [pc, #168]	; (80011c8 <SystemInit+0xd4>)
 800111e:	f043 0307 	orr.w	r3, r3, #7
 8001122:	6013      	str	r3, [r2, #0]
  }

  /* Set HSION bit */
  RCC->CR |= RCC_CR_HSION;
 8001124:	4b29      	ldr	r3, [pc, #164]	; (80011cc <SystemInit+0xd8>)
 8001126:	681b      	ldr	r3, [r3, #0]
 8001128:	4a28      	ldr	r2, [pc, #160]	; (80011cc <SystemInit+0xd8>)
 800112a:	f043 0301 	orr.w	r3, r3, #1
 800112e:	6013      	str	r3, [r2, #0]

  /* Reset CFGR register */
  RCC->CFGR = 0x00000000;
 8001130:	4b26      	ldr	r3, [pc, #152]	; (80011cc <SystemInit+0xd8>)
 8001132:	2200      	movs	r2, #0
 8001134:	611a      	str	r2, [r3, #16]

  /* Reset HSEON, HSECSSON, CSION, HSI48ON, CSIKERON, PLL1ON, PLL2ON and PLL3ON bits */
  RCC->CR &= 0xEAF6ED7FU;
 8001136:	4b25      	ldr	r3, [pc, #148]	; (80011cc <SystemInit+0xd8>)
 8001138:	681a      	ldr	r2, [r3, #0]
 800113a:	4924      	ldr	r1, [pc, #144]	; (80011cc <SystemInit+0xd8>)
 800113c:	4b24      	ldr	r3, [pc, #144]	; (80011d0 <SystemInit+0xdc>)
 800113e:	4013      	ands	r3, r2
 8001140:	600b      	str	r3, [r1, #0]

   /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLASH_LATENCY_DEFAULT  < (READ_BIT((FLASH->ACR), FLASH_ACR_LATENCY)))
 8001142:	4b21      	ldr	r3, [pc, #132]	; (80011c8 <SystemInit+0xd4>)
 8001144:	681b      	ldr	r3, [r3, #0]
 8001146:	f003 0308 	and.w	r3, r3, #8
 800114a:	2b00      	cmp	r3, #0
 800114c:	d007      	beq.n	800115e <SystemInit+0x6a>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    MODIFY_REG(FLASH->ACR, FLASH_ACR_LATENCY, (uint32_t)(FLASH_LATENCY_DEFAULT));
 800114e:	4b1e      	ldr	r3, [pc, #120]	; (80011c8 <SystemInit+0xd4>)
 8001150:	681b      	ldr	r3, [r3, #0]
 8001152:	f023 030f 	bic.w	r3, r3, #15
 8001156:	4a1c      	ldr	r2, [pc, #112]	; (80011c8 <SystemInit+0xd4>)
 8001158:	f043 0307 	orr.w	r3, r3, #7
 800115c:	6013      	str	r3, [r2, #0]
  }

#if defined(D3_SRAM_BASE)
  /* Reset D1CFGR register */
  RCC->D1CFGR = 0x00000000;
 800115e:	4b1b      	ldr	r3, [pc, #108]	; (80011cc <SystemInit+0xd8>)
 8001160:	2200      	movs	r2, #0
 8001162:	619a      	str	r2, [r3, #24]

  /* Reset D2CFGR register */
  RCC->D2CFGR = 0x00000000;
 8001164:	4b19      	ldr	r3, [pc, #100]	; (80011cc <SystemInit+0xd8>)
 8001166:	2200      	movs	r2, #0
 8001168:	61da      	str	r2, [r3, #28]

  /* Reset D3CFGR register */
  RCC->D3CFGR = 0x00000000;
 800116a:	4b18      	ldr	r3, [pc, #96]	; (80011cc <SystemInit+0xd8>)
 800116c:	2200      	movs	r2, #0
 800116e:	621a      	str	r2, [r3, #32]

  /* Reset SRDCFGR register */
  RCC->SRDCFGR = 0x00000000;
#endif
  /* Reset PLLCKSELR register */
  RCC->PLLCKSELR = 0x02020200;
 8001170:	4b16      	ldr	r3, [pc, #88]	; (80011cc <SystemInit+0xd8>)
 8001172:	4a18      	ldr	r2, [pc, #96]	; (80011d4 <SystemInit+0xe0>)
 8001174:	629a      	str	r2, [r3, #40]	; 0x28

  /* Reset PLLCFGR register */
  RCC->PLLCFGR = 0x01FF0000;
 8001176:	4b15      	ldr	r3, [pc, #84]	; (80011cc <SystemInit+0xd8>)
 8001178:	4a17      	ldr	r2, [pc, #92]	; (80011d8 <SystemInit+0xe4>)
 800117a:	62da      	str	r2, [r3, #44]	; 0x2c
  /* Reset PLL1DIVR register */
  RCC->PLL1DIVR = 0x01010280;
 800117c:	4b13      	ldr	r3, [pc, #76]	; (80011cc <SystemInit+0xd8>)
 800117e:	4a17      	ldr	r2, [pc, #92]	; (80011dc <SystemInit+0xe8>)
 8001180:	631a      	str	r2, [r3, #48]	; 0x30
  /* Reset PLL1FRACR register */
  RCC->PLL1FRACR = 0x00000000;
 8001182:	4b12      	ldr	r3, [pc, #72]	; (80011cc <SystemInit+0xd8>)
 8001184:	2200      	movs	r2, #0
 8001186:	635a      	str	r2, [r3, #52]	; 0x34

  /* Reset PLL2DIVR register */
  RCC->PLL2DIVR = 0x01010280;
 8001188:	4b10      	ldr	r3, [pc, #64]	; (80011cc <SystemInit+0xd8>)
 800118a:	4a14      	ldr	r2, [pc, #80]	; (80011dc <SystemInit+0xe8>)
 800118c:	639a      	str	r2, [r3, #56]	; 0x38

  /* Reset PLL2FRACR register */

  RCC->PLL2FRACR = 0x00000000;
 800118e:	4b0f      	ldr	r3, [pc, #60]	; (80011cc <SystemInit+0xd8>)
 8001190:	2200      	movs	r2, #0
 8001192:	63da      	str	r2, [r3, #60]	; 0x3c
  /* Reset PLL3DIVR register */
  RCC->PLL3DIVR = 0x01010280;
 8001194:	4b0d      	ldr	r3, [pc, #52]	; (80011cc <SystemInit+0xd8>)
 8001196:	4a11      	ldr	r2, [pc, #68]	; (80011dc <SystemInit+0xe8>)
 8001198:	641a      	str	r2, [r3, #64]	; 0x40

  /* Reset PLL3FRACR register */
  RCC->PLL3FRACR = 0x00000000;
 800119a:	4b0c      	ldr	r3, [pc, #48]	; (80011cc <SystemInit+0xd8>)
 800119c:	2200      	movs	r2, #0
 800119e:	645a      	str	r2, [r3, #68]	; 0x44

  /* Reset HSEBYP bit */
  RCC->CR &= 0xFFFBFFFFU;
 80011a0:	4b0a      	ldr	r3, [pc, #40]	; (80011cc <SystemInit+0xd8>)
 80011a2:	681b      	ldr	r3, [r3, #0]
 80011a4:	4a09      	ldr	r2, [pc, #36]	; (80011cc <SystemInit+0xd8>)
 80011a6:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 80011aa:	6013      	str	r3, [r2, #0]

  /* Disable all interrupts */
  RCC->CIER = 0x00000000;
 80011ac:	4b07      	ldr	r3, [pc, #28]	; (80011cc <SystemInit+0xd8>)
 80011ae:	2200      	movs	r2, #0
 80011b0:	661a      	str	r2, [r3, #96]	; 0x60
  /*
   * Disable the FMC bank1 (enabled after reset).
   * This, prevents CPU speculation access on this bank which blocks the use of FMC during
   * 24us. During this time the others FMC master (such as LTDC) cannot use it!
   */
  FMC_Bank1_R->BTCR[0] = 0x000030D2;
 80011b2:	4b0b      	ldr	r3, [pc, #44]	; (80011e0 <SystemInit+0xec>)
 80011b4:	f243 02d2 	movw	r2, #12498	; 0x30d2
 80011b8:	601a      	str	r2, [r3, #0]
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal D1 AXI-RAM or in Internal FLASH */
#endif /* USER_VECT_TAB_ADDRESS */

#endif /*DUAL_CORE && CORE_CM4*/
}
 80011ba:	bf00      	nop
 80011bc:	46bd      	mov	sp, r7
 80011be:	f85d 7b04 	ldr.w	r7, [sp], #4
 80011c2:	4770      	bx	lr
 80011c4:	e000ed00 	.word	0xe000ed00
 80011c8:	52002000 	.word	0x52002000
 80011cc:	58024400 	.word	0x58024400
 80011d0:	eaf6ed7f 	.word	0xeaf6ed7f
 80011d4:	02020200 	.word	0x02020200
 80011d8:	01ff0000 	.word	0x01ff0000
 80011dc:	01010280 	.word	0x01010280
 80011e0:	52004000 	.word	0x52004000

080011e4 <tm_initialize>:


/* This function called from main performs basic RTOS initialization,
   calls the test initialization function, and then starts the RTOS function. */
void tm_initialize(void (*test_initialization_function)(void))
{
 80011e4:	b580      	push	{r7, lr}
 80011e6:	b082      	sub	sp, #8
 80011e8:	af00      	add	r7, sp, #0
 80011ea:	6078      	str	r0, [r7, #4]
    /* Save the test initialization function. */
    tm_initialization_function = test_initialization_function;
 80011ec:	4a04      	ldr	r2, [pc, #16]	; (8001200 <tm_initialize+0x1c>)
 80011ee:	687b      	ldr	r3, [r7, #4]
 80011f0:	6013      	str	r3, [r2, #0]

    /* Call the previously defined initialization function. */
    (tm_initialization_function)();
 80011f2:	4b03      	ldr	r3, [pc, #12]	; (8001200 <tm_initialize+0x1c>)
 80011f4:	681b      	ldr	r3, [r3, #0]
 80011f6:	4798      	blx	r3
}
 80011f8:	bf00      	nop
 80011fa:	3708      	adds	r7, #8
 80011fc:	46bd      	mov	sp, r7
 80011fe:	bd80      	pop	{r7, pc}
 8001200:	2400039c 	.word	0x2400039c

08001204 <tm_thread_create>:
/* This function takes a thread ID and priority and attempts to create the
   file in the underlying RTOS. Valid priorities range from 1 through 255,
   where 1 is the highest priority and 255 is the lowest. If successful,
   the function should return TM_SUCCESS. Otherwise, TM_ERROR should be returned. */
int tm_thread_create(int thread_id, int priority, void (*entry_function)(void))
{
 8001204:	b580      	push	{r7, lr}
 8001206:	b0a6      	sub	sp, #152	; 0x98
 8001208:	af00      	add	r7, sp, #0
 800120a:	60f8      	str	r0, [r7, #12]
 800120c:	60b9      	str	r1, [r7, #8]
 800120e:	607a      	str	r2, [r7, #4]
// Remember the actual thread entry.
  // tm_thread_entry_functions[thread_id] = entry_function;
   char str[100];
   sprintf(str, "%d",thread_id);
 8001210:	f107 0334 	add.w	r3, r7, #52	; 0x34
 8001214:	68fa      	ldr	r2, [r7, #12]
 8001216:	4916      	ldr	r1, [pc, #88]	; (8001270 <tm_thread_create+0x6c>)
 8001218:	4618      	mov	r0, r3
 800121a:	f008 ff07 	bl	800a02c <siprintf>

   // Create the thread under CMSIS-RTOS.
   osThreadAttr_t thread_attr = {
 800121e:	f107 0310 	add.w	r3, r7, #16
 8001222:	2224      	movs	r2, #36	; 0x24
 8001224:	2100      	movs	r1, #0
 8001226:	4618      	mov	r0, r3
 8001228:	f008 fdd1 	bl	8009dce <memset>
 800122c:	f107 0334 	add.w	r3, r7, #52	; 0x34
 8001230:	613b      	str	r3, [r7, #16]
 8001232:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8001236:	627b      	str	r3, [r7, #36]	; 0x24
 8001238:	68bb      	ldr	r3, [r7, #8]
 800123a:	62bb      	str	r3, [r7, #40]	; 0x28
       .name = str,
       //.stack_mem = tm_thread_stack_area[thread_id],
       .stack_size = 1*1024,
       .priority = priority
   };
   tm_thread_array[thread_id] = osThreadNew((osThreadFunc_t)entry_function, NULL, &thread_attr);
 800123c:	f107 0310 	add.w	r3, r7, #16
 8001240:	461a      	mov	r2, r3
 8001242:	2100      	movs	r1, #0
 8001244:	6878      	ldr	r0, [r7, #4]
 8001246:	f005 f971 	bl	800652c <osThreadNew>
 800124a:	4602      	mov	r2, r0
 800124c:	4909      	ldr	r1, [pc, #36]	; (8001274 <tm_thread_create+0x70>)
 800124e:	68fb      	ldr	r3, [r7, #12]
 8001250:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

   // Determine if the thread create was successful.
   if (tm_thread_array[thread_id] != NULL)
 8001254:	4a07      	ldr	r2, [pc, #28]	; (8001274 <tm_thread_create+0x70>)
 8001256:	68fb      	ldr	r3, [r7, #12]
 8001258:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800125c:	2b00      	cmp	r3, #0
 800125e:	d001      	beq.n	8001264 <tm_thread_create+0x60>
   {

    return TM_SUCCESS;
 8001260:	2300      	movs	r3, #0
 8001262:	e000      	b.n	8001266 <tm_thread_create+0x62>
   }

   else
   {

    return TM_ERROR;
 8001264:	2301      	movs	r3, #1
   }
}
 8001266:	4618      	mov	r0, r3
 8001268:	3798      	adds	r7, #152	; 0x98
 800126a:	46bd      	mov	sp, r7
 800126c:	bd80      	pop	{r7, pc}
 800126e:	bf00      	nop
 8001270:	0800af94 	.word	0x0800af94
 8001274:	24000370 	.word	0x24000370

08001278 <tm_thread_resume>:


/* This function resumes the specified thread.  If successful, the function should
   return TM_SUCCESS. Otherwise, TM_ERROR should be returned.  */
int tm_thread_resume(int thread_id)
{
 8001278:	b580      	push	{r7, lr}
 800127a:	b082      	sub	sp, #8
 800127c:	af00      	add	r7, sp, #0
 800127e:	6078      	str	r0, [r7, #4]
    /* Resume the thread with the specified ID. */
    if (osThreadResume(tm_thread_array[thread_id]) == osOK) {
 8001280:	4a08      	ldr	r2, [pc, #32]	; (80012a4 <tm_thread_resume+0x2c>)
 8001282:	687b      	ldr	r3, [r7, #4]
 8001284:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001288:	4618      	mov	r0, r3
 800128a:	f005 f9e2 	bl	8006652 <osThreadResume>
 800128e:	4603      	mov	r3, r0
 8001290:	2b00      	cmp	r3, #0
 8001292:	d101      	bne.n	8001298 <tm_thread_resume+0x20>
        /* Thread resume successful. */

        return TM_SUCCESS;
 8001294:	2300      	movs	r3, #0
 8001296:	e000      	b.n	800129a <tm_thread_resume+0x22>
    else
    {

    }
    /* Thread resume failed. */
    return TM_ERROR;
 8001298:	2301      	movs	r3, #1
}
 800129a:	4618      	mov	r0, r3
 800129c:	3708      	adds	r7, #8
 800129e:	46bd      	mov	sp, r7
 80012a0:	bd80      	pop	{r7, pc}
 80012a2:	bf00      	nop
 80012a4:	24000370 	.word	0x24000370

080012a8 <tm_thread_sleep>:

/* This function suspends the specified thread for the specified number
   of seconds.  If successful, the function should return TM_SUCCESS.
   Otherwise, TM_ERROR should be returned.  */
void tm_thread_sleep(int seconds)
{
 80012a8:	b580      	push	{r7, lr}
 80012aa:	b082      	sub	sp, #8
 80012ac:	af00      	add	r7, sp, #0
 80012ae:	6078      	str	r0, [r7, #4]
osDelay(seconds * 1000);
 80012b0:	687b      	ldr	r3, [r7, #4]
 80012b2:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 80012b6:	fb02 f303 	mul.w	r3, r2, r3
 80012ba:	4618      	mov	r0, r3
 80012bc:	f005 f9ea 	bl	8006694 <osDelay>
}
 80012c0:	bf00      	nop
 80012c2:	3708      	adds	r7, #8
 80012c4:	46bd      	mov	sp, r7
 80012c6:	bd80      	pop	{r7, pc}

080012c8 <tm_semaphore_create>:


/* This function creates the specified semaphore.  If successful, the function should
   return TM_SUCCESS. Otherwise, TM_ERROR should be returned.  */
int  tm_semaphore_create(int semaphore_id)
{
 80012c8:	b580      	push	{r7, lr}
 80012ca:	b0a0      	sub	sp, #128	; 0x80
 80012cc:	af00      	add	r7, sp, #0
 80012ce:	6078      	str	r0, [r7, #4]
char str[100];
sprintf(str, "%d",semaphore_id);
 80012d0:	f107 0318 	add.w	r3, r7, #24
 80012d4:	687a      	ldr	r2, [r7, #4]
 80012d6:	4912      	ldr	r1, [pc, #72]	; (8001320 <tm_semaphore_create+0x58>)
 80012d8:	4618      	mov	r0, r3
 80012da:	f008 fea7 	bl	800a02c <siprintf>
osSemaphoreAttr_t semaphore_attr = {
 80012de:	f107 0318 	add.w	r3, r7, #24
 80012e2:	60bb      	str	r3, [r7, #8]
 80012e4:	2300      	movs	r3, #0
 80012e6:	60fb      	str	r3, [r7, #12]
 80012e8:	2300      	movs	r3, #0
 80012ea:	613b      	str	r3, [r7, #16]
 80012ec:	2300      	movs	r3, #0
 80012ee:	617b      	str	r3, [r7, #20]
       .attr_bits = 0U,        // No special attributes needed
       .cb_mem = NULL,         // Allocate memory from the heap
       .cb_size = 0U           // Use default size
   };

   osSemaphoreId_t semaphore = osSemaphoreNew(TM_CMSIS_MAX_SEMAPHORES, TM_CMSIS_MAX_SEMAPHORES, &semaphore_attr);
 80012f0:	f107 0308 	add.w	r3, r7, #8
 80012f4:	461a      	mov	r2, r3
 80012f6:	2101      	movs	r1, #1
 80012f8:	2001      	movs	r0, #1
 80012fa:	f005 f9e6 	bl	80066ca <osSemaphoreNew>
 80012fe:	67f8      	str	r0, [r7, #124]	; 0x7c
   if (semaphore == NULL) {
 8001300:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 8001302:	2b00      	cmp	r3, #0
 8001304:	d101      	bne.n	800130a <tm_semaphore_create+0x42>
       return TM_ERROR;
 8001306:	2301      	movs	r3, #1
 8001308:	e005      	b.n	8001316 <tm_semaphore_create+0x4e>
   }

   // Save the semaphore ID in the global variable for future use
   tm_semaphore_array[semaphore_id] = semaphore;
 800130a:	4906      	ldr	r1, [pc, #24]	; (8001324 <tm_semaphore_create+0x5c>)
 800130c:	687b      	ldr	r3, [r7, #4]
 800130e:	6ffa      	ldr	r2, [r7, #124]	; 0x7c
 8001310:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

   return TM_SUCCESS;
 8001314:	2300      	movs	r3, #0
}
 8001316:	4618      	mov	r0, r3
 8001318:	3780      	adds	r7, #128	; 0x80
 800131a:	46bd      	mov	sp, r7
 800131c:	bd80      	pop	{r7, pc}
 800131e:	bf00      	nop
 8001320:	0800af94 	.word	0x0800af94
 8001324:	24000398 	.word	0x24000398

08001328 <tm_semaphore_get>:


/* This function gets the specified semaphore.  If successful, the function should
   return TM_SUCCESS. Otherwise, TM_ERROR should be returned.  */
int  tm_semaphore_get(int semaphore_id)
{
 8001328:	b580      	push	{r7, lr}
 800132a:	b084      	sub	sp, #16
 800132c:	af00      	add	r7, sp, #0
 800132e:	6078      	str	r0, [r7, #4]
osSemaphoreId_t semaphore = tm_semaphore_array[semaphore_id];
 8001330:	4a0a      	ldr	r2, [pc, #40]	; (800135c <tm_semaphore_get+0x34>)
 8001332:	687b      	ldr	r3, [r7, #4]
 8001334:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001338:	60fb      	str	r3, [r7, #12]
   osStatus_t status = osSemaphoreAcquire(semaphore, osWaitForever);
 800133a:	f04f 31ff 	mov.w	r1, #4294967295
 800133e:	68f8      	ldr	r0, [r7, #12]
 8001340:	f005 fa4c 	bl	80067dc <osSemaphoreAcquire>
 8001344:	60b8      	str	r0, [r7, #8]
   if (status != osOK) {
 8001346:	68bb      	ldr	r3, [r7, #8]
 8001348:	2b00      	cmp	r3, #0
 800134a:	d001      	beq.n	8001350 <tm_semaphore_get+0x28>
       return TM_ERROR;
 800134c:	2301      	movs	r3, #1
 800134e:	e000      	b.n	8001352 <tm_semaphore_get+0x2a>
   }

   return TM_SUCCESS;
 8001350:	2300      	movs	r3, #0
}
 8001352:	4618      	mov	r0, r3
 8001354:	3710      	adds	r7, #16
 8001356:	46bd      	mov	sp, r7
 8001358:	bd80      	pop	{r7, pc}
 800135a:	bf00      	nop
 800135c:	24000398 	.word	0x24000398

08001360 <tm_semaphore_put>:


/* This function puts the specified semaphore.  If successful, the function should
   return TM_SUCCESS. Otherwise, TM_ERROR should be returned.  */
int  tm_semaphore_put(int semaphore_id)
{
 8001360:	b580      	push	{r7, lr}
 8001362:	b084      	sub	sp, #16
 8001364:	af00      	add	r7, sp, #0
 8001366:	6078      	str	r0, [r7, #4]
osSemaphoreId_t semaphore = tm_semaphore_array[semaphore_id];
 8001368:	4a09      	ldr	r2, [pc, #36]	; (8001390 <tm_semaphore_put+0x30>)
 800136a:	687b      	ldr	r3, [r7, #4]
 800136c:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001370:	60fb      	str	r3, [r7, #12]
   osStatus_t status = osSemaphoreRelease(semaphore);
 8001372:	68f8      	ldr	r0, [r7, #12]
 8001374:	f005 fa84 	bl	8006880 <osSemaphoreRelease>
 8001378:	60b8      	str	r0, [r7, #8]
   if (status != osOK) {
 800137a:	68bb      	ldr	r3, [r7, #8]
 800137c:	2b00      	cmp	r3, #0
 800137e:	d001      	beq.n	8001384 <tm_semaphore_put+0x24>
       return TM_ERROR;
 8001380:	2301      	movs	r3, #1
 8001382:	e000      	b.n	8001386 <tm_semaphore_put+0x26>
   }

   return TM_SUCCESS;
 8001384:	2300      	movs	r3, #0

}
 8001386:	4618      	mov	r0, r3
 8001388:	3710      	adds	r7, #16
 800138a:	46bd      	mov	sp, r7
 800138c:	bd80      	pop	{r7, pc}
 800138e:	bf00      	nop
 8001390:	24000398 	.word	0x24000398

08001394 <tm_main>:


/* Define main entry point.  */

void tm_main()
{
 8001394:	b580      	push	{r7, lr}
 8001396:	af00      	add	r7, sp, #0

    /* Initialize the test.  */
    tm_initialize(tm_synchronization_processing_initialize);
 8001398:	4802      	ldr	r0, [pc, #8]	; (80013a4 <tm_main+0x10>)
 800139a:	f7ff ff23 	bl	80011e4 <tm_initialize>
}
 800139e:	bf00      	nop
 80013a0:	bd80      	pop	{r7, pc}
 80013a2:	bf00      	nop
 80013a4:	080013a9 	.word	0x080013a9

080013a8 <tm_synchronization_processing_initialize>:


/* Define the synchronization processing test initialization.  */

void  tm_synchronization_processing_initialize(void)
{
 80013a8:	b580      	push	{r7, lr}
 80013aa:	af00      	add	r7, sp, #0

    /* Create thread 0 at priority 10.  */
    tm_thread_create(0, 10, tm_synchronization_processing_thread_0_entry);
 80013ac:	4a0a      	ldr	r2, [pc, #40]	; (80013d8 <tm_synchronization_processing_initialize+0x30>)
 80013ae:	210a      	movs	r1, #10
 80013b0:	2000      	movs	r0, #0
 80013b2:	f7ff ff27 	bl	8001204 <tm_thread_create>

    /* Resume thread 0.  */
    tm_thread_resume(0);
 80013b6:	2000      	movs	r0, #0
 80013b8:	f7ff ff5e 	bl	8001278 <tm_thread_resume>

    /* Create a semaphore for the test.  */
    tm_semaphore_create(0);
 80013bc:	2000      	movs	r0, #0
 80013be:	f7ff ff83 	bl	80012c8 <tm_semaphore_create>

    /* Create the reporting thread. It will preempt the other 
       threads and print out the test results.  */
    tm_thread_create(5, 12, tm_synchronization_processing_thread_report);
 80013c2:	4a06      	ldr	r2, [pc, #24]	; (80013dc <tm_synchronization_processing_initialize+0x34>)
 80013c4:	210c      	movs	r1, #12
 80013c6:	2005      	movs	r0, #5
 80013c8:	f7ff ff1c 	bl	8001204 <tm_thread_create>
    tm_thread_resume(5);
 80013cc:	2005      	movs	r0, #5
 80013ce:	f7ff ff53 	bl	8001278 <tm_thread_resume>
}
 80013d2:	bf00      	nop
 80013d4:	bd80      	pop	{r7, pc}
 80013d6:	bf00      	nop
 80013d8:	080013e1 	.word	0x080013e1
 80013dc:	08001415 	.word	0x08001415

080013e0 <tm_synchronization_processing_thread_0_entry>:


/* Define the synchronization processing thread.  */
void  tm_synchronization_processing_thread_0_entry(void)
{
 80013e0:	b580      	push	{r7, lr}
 80013e2:	b082      	sub	sp, #8
 80013e4:	af00      	add	r7, sp, #0

    while(1)
    {

        /* Get the semaphore.  */
        tm_semaphore_get(0);
 80013e6:	2000      	movs	r0, #0
 80013e8:	f7ff ff9e 	bl	8001328 <tm_semaphore_get>

        /* Release the semaphore.  */
        status = tm_semaphore_put(0);
 80013ec:	2000      	movs	r0, #0
 80013ee:	f7ff ffb7 	bl	8001360 <tm_semaphore_put>
 80013f2:	6078      	str	r0, [r7, #4]

        /* Check for semaphore put error.  */
        if (status != TM_SUCCESS)
 80013f4:	687b      	ldr	r3, [r7, #4]
 80013f6:	2b00      	cmp	r3, #0
 80013f8:	d105      	bne.n	8001406 <tm_synchronization_processing_thread_0_entry+0x26>
            break;

        /* Increment the number of semaphore get/puts.  */
        tm_synchronization_processing_counter++;
 80013fa:	4b05      	ldr	r3, [pc, #20]	; (8001410 <tm_synchronization_processing_thread_0_entry+0x30>)
 80013fc:	681b      	ldr	r3, [r3, #0]
 80013fe:	3301      	adds	r3, #1
 8001400:	4a03      	ldr	r2, [pc, #12]	; (8001410 <tm_synchronization_processing_thread_0_entry+0x30>)
 8001402:	6013      	str	r3, [r2, #0]
        tm_semaphore_get(0);
 8001404:	e7ef      	b.n	80013e6 <tm_synchronization_processing_thread_0_entry+0x6>
            break;
 8001406:	bf00      	nop
    }
}
 8001408:	bf00      	nop
 800140a:	3708      	adds	r7, #8
 800140c:	46bd      	mov	sp, r7
 800140e:	bd80      	pop	{r7, pc}
 8001410:	240003a0 	.word	0x240003a0

08001414 <tm_synchronization_processing_thread_report>:


/* Define the synchronization test reporting thread.  */
void  tm_synchronization_processing_thread_report(void)
{
 8001414:	b580      	push	{r7, lr}
 8001416:	b082      	sub	sp, #8
 8001418:	af00      	add	r7, sp, #0
unsigned long   last_counter;
unsigned long   relative_time;


    /* Initialize the last counter.  */
    last_counter =  0;
 800141a:	2300      	movs	r3, #0
 800141c:	607b      	str	r3, [r7, #4]

    /* Initialize the relative time.  */
    relative_time =  0;
 800141e:	2300      	movs	r3, #0
 8001420:	603b      	str	r3, [r7, #0]

    while(1)
    {

        /* Sleep to allow the test to run.  */
        tm_thread_sleep(TM_TEST_DURATION);
 8001422:	201e      	movs	r0, #30
 8001424:	f7ff ff40 	bl	80012a8 <tm_thread_sleep>

        /* Increment the relative time.  */
        relative_time =  relative_time + TM_TEST_DURATION;
 8001428:	683b      	ldr	r3, [r7, #0]
 800142a:	331e      	adds	r3, #30
 800142c:	603b      	str	r3, [r7, #0]

        /* Print results to the stdio window.  */
        printf("**** Thread-Metric Synchronization Processing Test **** Relative Time: %lu\n\r", relative_time);
 800142e:	6839      	ldr	r1, [r7, #0]
 8001430:	480b      	ldr	r0, [pc, #44]	; (8001460 <tm_synchronization_processing_thread_report+0x4c>)
 8001432:	f008 fd69 	bl	8009f08 <iprintf>

        /* See if there are any errors.  */
        if (tm_synchronization_processing_counter == last_counter)
 8001436:	4b0b      	ldr	r3, [pc, #44]	; (8001464 <tm_synchronization_processing_thread_report+0x50>)
 8001438:	681b      	ldr	r3, [r3, #0]
 800143a:	687a      	ldr	r2, [r7, #4]
 800143c:	429a      	cmp	r2, r3
 800143e:	d102      	bne.n	8001446 <tm_synchronization_processing_thread_report+0x32>
        {

            printf("ERROR: Invalid counter value(s). Error getting/putting semaphore!\n\r");
 8001440:	4809      	ldr	r0, [pc, #36]	; (8001468 <tm_synchronization_processing_thread_report+0x54>)
 8001442:	f008 fd61 	bl	8009f08 <iprintf>
        }

        /* Show the time period total.  */
        printf("Time Period Total:  %lu\n\n\r", tm_synchronization_processing_counter - last_counter);
 8001446:	4b07      	ldr	r3, [pc, #28]	; (8001464 <tm_synchronization_processing_thread_report+0x50>)
 8001448:	681a      	ldr	r2, [r3, #0]
 800144a:	687b      	ldr	r3, [r7, #4]
 800144c:	1ad3      	subs	r3, r2, r3
 800144e:	4619      	mov	r1, r3
 8001450:	4806      	ldr	r0, [pc, #24]	; (800146c <tm_synchronization_processing_thread_report+0x58>)
 8001452:	f008 fd59 	bl	8009f08 <iprintf>

        /* Save the last counter.  */
        last_counter =  tm_synchronization_processing_counter;
 8001456:	4b03      	ldr	r3, [pc, #12]	; (8001464 <tm_synchronization_processing_thread_report+0x50>)
 8001458:	681b      	ldr	r3, [r3, #0]
 800145a:	607b      	str	r3, [r7, #4]
        tm_thread_sleep(TM_TEST_DURATION);
 800145c:	e7e1      	b.n	8001422 <tm_synchronization_processing_thread_report+0xe>
 800145e:	bf00      	nop
 8001460:	0800af98 	.word	0x0800af98
 8001464:	240003a0 	.word	0x240003a0
 8001468:	0800afe8 	.word	0x0800afe8
 800146c:	0800b02c 	.word	0x0800b02c

08001470 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:
  ldr   sp, =_estack      /* set stack pointer */
 8001470:	f8df d034 	ldr.w	sp, [pc, #52]	; 80014a8 <LoopFillZerobss+0xe>

/* Call the clock system initialization function.*/
  bl  SystemInit
 8001474:	f7ff fe3e 	bl	80010f4 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8001478:	480c      	ldr	r0, [pc, #48]	; (80014ac <LoopFillZerobss+0x12>)
  ldr r1, =_edata
 800147a:	490d      	ldr	r1, [pc, #52]	; (80014b0 <LoopFillZerobss+0x16>)
  ldr r2, =_sidata
 800147c:	4a0d      	ldr	r2, [pc, #52]	; (80014b4 <LoopFillZerobss+0x1a>)
  movs r3, #0
 800147e:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8001480:	e002      	b.n	8001488 <LoopCopyDataInit>

08001482 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8001482:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8001484:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8001486:	3304      	adds	r3, #4

08001488 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8001488:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 800148a:	428c      	cmp	r4, r1
  bcc CopyDataInit
 800148c:	d3f9      	bcc.n	8001482 <CopyDataInit>
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 800148e:	4a0a      	ldr	r2, [pc, #40]	; (80014b8 <LoopFillZerobss+0x1e>)
  ldr r4, =_ebss
 8001490:	4c0a      	ldr	r4, [pc, #40]	; (80014bc <LoopFillZerobss+0x22>)
  movs r3, #0
 8001492:	2300      	movs	r3, #0
  b LoopFillZerobss
 8001494:	e001      	b.n	800149a <LoopFillZerobss>

08001496 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8001496:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8001498:	3204      	adds	r2, #4

0800149a <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 800149a:	42a2      	cmp	r2, r4
  bcc FillZerobss
 800149c:	d3fb      	bcc.n	8001496 <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 800149e:	f008 fc61 	bl	8009d64 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 80014a2:	f7ff f91d 	bl	80006e0 <main>
  bx  lr
 80014a6:	4770      	bx	lr
  ldr   sp, =_estack      /* set stack pointer */
 80014a8:	24050000 	.word	0x24050000
  ldr r0, =_sdata
 80014ac:	24000000 	.word	0x24000000
  ldr r1, =_edata
 80014b0:	24000078 	.word	0x24000078
  ldr r2, =_sidata
 80014b4:	0800b140 	.word	0x0800b140
  ldr r2, =_sbss
 80014b8:	24000138 	.word	0x24000138
  ldr r4, =_ebss
 80014bc:	24004fc8 	.word	0x24004fc8

080014c0 <ADC3_IRQHandler>:
 * @retval None
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 80014c0:	e7fe      	b.n	80014c0 <ADC3_IRQHandler>
	...

080014c4 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 80014c4:	b580      	push	{r7, lr}
 80014c6:	b082      	sub	sp, #8
 80014c8:	af00      	add	r7, sp, #0
   __HAL_ART_CONFIG_BASE_ADDRESS(0x08100000UL);  /* Configure the Cortex-M4 ART Base address to the Flash Bank 2 : */
   __HAL_ART_ENABLE();                           /* Enable the Cortex-M4 ART */
#endif /* DUAL_CORE &&  CORE_CM4 */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 80014ca:	2003      	movs	r0, #3
 80014cc:	f000 f952 	bl	8001774 <HAL_NVIC_SetPriorityGrouping>

  /* Update the SystemCoreClock global variable */
#if defined(RCC_D1CFGR_D1CPRE)
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE)>> RCC_D1CFGR_D1CPRE_Pos]) & 0x1FU);
 80014d0:	f001 fdae 	bl	8003030 <HAL_RCC_GetSysClockFreq>
 80014d4:	4602      	mov	r2, r0
 80014d6:	4b15      	ldr	r3, [pc, #84]	; (800152c <HAL_Init+0x68>)
 80014d8:	699b      	ldr	r3, [r3, #24]
 80014da:	0a1b      	lsrs	r3, r3, #8
 80014dc:	f003 030f 	and.w	r3, r3, #15
 80014e0:	4913      	ldr	r1, [pc, #76]	; (8001530 <HAL_Init+0x6c>)
 80014e2:	5ccb      	ldrb	r3, [r1, r3]
 80014e4:	f003 031f 	and.w	r3, r3, #31
 80014e8:	fa22 f303 	lsr.w	r3, r2, r3
 80014ec:	607b      	str	r3, [r7, #4]
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->CDCFGR1 & RCC_CDCFGR1_CDCPRE)>> RCC_CDCFGR1_CDCPRE_Pos]) & 0x1FU);
#endif

  /* Update the SystemD2Clock global variable */
#if defined(RCC_D1CFGR_HPRE)
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE)>> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
 80014ee:	4b0f      	ldr	r3, [pc, #60]	; (800152c <HAL_Init+0x68>)
 80014f0:	699b      	ldr	r3, [r3, #24]
 80014f2:	f003 030f 	and.w	r3, r3, #15
 80014f6:	4a0e      	ldr	r2, [pc, #56]	; (8001530 <HAL_Init+0x6c>)
 80014f8:	5cd3      	ldrb	r3, [r2, r3]
 80014fa:	f003 031f 	and.w	r3, r3, #31
 80014fe:	687a      	ldr	r2, [r7, #4]
 8001500:	fa22 f303 	lsr.w	r3, r2, r3
 8001504:	4a0b      	ldr	r2, [pc, #44]	; (8001534 <HAL_Init+0x70>)
 8001506:	6013      	str	r3, [r2, #0]
#endif

#if defined(DUAL_CORE) && defined(CORE_CM4)
  SystemCoreClock = SystemD2Clock;
#else
  SystemCoreClock = common_system_clock;
 8001508:	4a0b      	ldr	r2, [pc, #44]	; (8001538 <HAL_Init+0x74>)
 800150a:	687b      	ldr	r3, [r7, #4]
 800150c:	6013      	str	r3, [r2, #0]
#endif /* DUAL_CORE && CORE_CM4 */

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  if(HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 800150e:	200f      	movs	r0, #15
 8001510:	f000 f814 	bl	800153c <HAL_InitTick>
 8001514:	4603      	mov	r3, r0
 8001516:	2b00      	cmp	r3, #0
 8001518:	d001      	beq.n	800151e <HAL_Init+0x5a>
  {
    return HAL_ERROR;
 800151a:	2301      	movs	r3, #1
 800151c:	e002      	b.n	8001524 <HAL_Init+0x60>
  }

  /* Init the low level hardware */
  HAL_MspInit();
 800151e:	f7ff fbe9 	bl	8000cf4 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8001522:	2300      	movs	r3, #0
}
 8001524:	4618      	mov	r0, r3
 8001526:	3708      	adds	r7, #8
 8001528:	46bd      	mov	sp, r7
 800152a:	bd80      	pop	{r7, pc}
 800152c:	58024400 	.word	0x58024400
 8001530:	0800b060 	.word	0x0800b060
 8001534:	24000004 	.word	0x24000004
 8001538:	24000000 	.word	0x24000000

0800153c <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 800153c:	b580      	push	{r7, lr}
 800153e:	b082      	sub	sp, #8
 8001540:	af00      	add	r7, sp, #0
 8001542:	6078      	str	r0, [r7, #4]
  /* Check uwTickFreq for MisraC 2012 (even if uwTickFreq is a enum type that don't take the value zero)*/
  if((uint32_t)uwTickFreq == 0UL)
 8001544:	4b15      	ldr	r3, [pc, #84]	; (800159c <HAL_InitTick+0x60>)
 8001546:	781b      	ldrb	r3, [r3, #0]
 8001548:	2b00      	cmp	r3, #0
 800154a:	d101      	bne.n	8001550 <HAL_InitTick+0x14>
  {
    return HAL_ERROR;
 800154c:	2301      	movs	r3, #1
 800154e:	e021      	b.n	8001594 <HAL_InitTick+0x58>
  }

    /* Configure the SysTick to have interrupt in 1ms time basis*/
    if (HAL_SYSTICK_Config(SystemCoreClock / (1000UL / (uint32_t)uwTickFreq)) > 0U)
 8001550:	4b13      	ldr	r3, [pc, #76]	; (80015a0 <HAL_InitTick+0x64>)
 8001552:	681a      	ldr	r2, [r3, #0]
 8001554:	4b11      	ldr	r3, [pc, #68]	; (800159c <HAL_InitTick+0x60>)
 8001556:	781b      	ldrb	r3, [r3, #0]
 8001558:	4619      	mov	r1, r3
 800155a:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 800155e:	fbb3 f3f1 	udiv	r3, r3, r1
 8001562:	fbb2 f3f3 	udiv	r3, r2, r3
 8001566:	4618      	mov	r0, r3
 8001568:	f000 f929 	bl	80017be <HAL_SYSTICK_Config>
 800156c:	4603      	mov	r3, r0
 800156e:	2b00      	cmp	r3, #0
 8001570:	d001      	beq.n	8001576 <HAL_InitTick+0x3a>
    {
      return HAL_ERROR;
 8001572:	2301      	movs	r3, #1
 8001574:	e00e      	b.n	8001594 <HAL_InitTick+0x58>
    }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8001576:	687b      	ldr	r3, [r7, #4]
 8001578:	2b0f      	cmp	r3, #15
 800157a:	d80a      	bhi.n	8001592 <HAL_InitTick+0x56>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 800157c:	2200      	movs	r2, #0
 800157e:	6879      	ldr	r1, [r7, #4]
 8001580:	f04f 30ff 	mov.w	r0, #4294967295
 8001584:	f000 f901 	bl	800178a <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8001588:	4a06      	ldr	r2, [pc, #24]	; (80015a4 <HAL_InitTick+0x68>)
 800158a:	687b      	ldr	r3, [r7, #4]
 800158c:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 800158e:	2300      	movs	r3, #0
 8001590:	e000      	b.n	8001594 <HAL_InitTick+0x58>
    return HAL_ERROR;
 8001592:	2301      	movs	r3, #1
}
 8001594:	4618      	mov	r0, r3
 8001596:	3708      	adds	r7, #8
 8001598:	46bd      	mov	sp, r7
 800159a:	bd80      	pop	{r7, pc}
 800159c:	2400000c 	.word	0x2400000c
 80015a0:	24000000 	.word	0x24000000
 80015a4:	24000008 	.word	0x24000008

080015a8 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 80015a8:	b480      	push	{r7}
 80015aa:	af00      	add	r7, sp, #0
  uwTick += (uint32_t)uwTickFreq;
 80015ac:	4b06      	ldr	r3, [pc, #24]	; (80015c8 <HAL_IncTick+0x20>)
 80015ae:	781b      	ldrb	r3, [r3, #0]
 80015b0:	461a      	mov	r2, r3
 80015b2:	4b06      	ldr	r3, [pc, #24]	; (80015cc <HAL_IncTick+0x24>)
 80015b4:	681b      	ldr	r3, [r3, #0]
 80015b6:	4413      	add	r3, r2
 80015b8:	4a04      	ldr	r2, [pc, #16]	; (80015cc <HAL_IncTick+0x24>)
 80015ba:	6013      	str	r3, [r2, #0]
}
 80015bc:	bf00      	nop
 80015be:	46bd      	mov	sp, r7
 80015c0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80015c4:	4770      	bx	lr
 80015c6:	bf00      	nop
 80015c8:	2400000c 	.word	0x2400000c
 80015cc:	240003a4 	.word	0x240003a4

080015d0 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 80015d0:	b480      	push	{r7}
 80015d2:	af00      	add	r7, sp, #0
  return uwTick;
 80015d4:	4b03      	ldr	r3, [pc, #12]	; (80015e4 <HAL_GetTick+0x14>)
 80015d6:	681b      	ldr	r3, [r3, #0]
}
 80015d8:	4618      	mov	r0, r3
 80015da:	46bd      	mov	sp, r7
 80015dc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80015e0:	4770      	bx	lr
 80015e2:	bf00      	nop
 80015e4:	240003a4 	.word	0x240003a4

080015e8 <HAL_SYSCFG_ETHInterfaceSelect>:
  *   @arg SYSCFG_ETH_MII : Select the Media Independent Interface
  *   @arg SYSCFG_ETH_RMII: Select the Reduced Media Independent Interface
  * @retval None
  */
void HAL_SYSCFG_ETHInterfaceSelect(uint32_t SYSCFG_ETHInterface)
{
 80015e8:	b480      	push	{r7}
 80015ea:	b083      	sub	sp, #12
 80015ec:	af00      	add	r7, sp, #0
 80015ee:	6078      	str	r0, [r7, #4]
  /* Check the parameter */
  assert_param(IS_SYSCFG_ETHERNET_CONFIG(SYSCFG_ETHInterface));

  MODIFY_REG(SYSCFG->PMCR, SYSCFG_PMCR_EPIS_SEL, (uint32_t)(SYSCFG_ETHInterface));
 80015f0:	4b06      	ldr	r3, [pc, #24]	; (800160c <HAL_SYSCFG_ETHInterfaceSelect+0x24>)
 80015f2:	685b      	ldr	r3, [r3, #4]
 80015f4:	f423 0260 	bic.w	r2, r3, #14680064	; 0xe00000
 80015f8:	4904      	ldr	r1, [pc, #16]	; (800160c <HAL_SYSCFG_ETHInterfaceSelect+0x24>)
 80015fa:	687b      	ldr	r3, [r7, #4]
 80015fc:	4313      	orrs	r3, r2
 80015fe:	604b      	str	r3, [r1, #4]
}
 8001600:	bf00      	nop
 8001602:	370c      	adds	r7, #12
 8001604:	46bd      	mov	sp, r7
 8001606:	f85d 7b04 	ldr.w	r7, [sp], #4
 800160a:	4770      	bx	lr
 800160c:	58000400 	.word	0x58000400

08001610 <__NVIC_SetPriorityGrouping>:
{
 8001610:	b480      	push	{r7}
 8001612:	b085      	sub	sp, #20
 8001614:	af00      	add	r7, sp, #0
 8001616:	6078      	str	r0, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8001618:	687b      	ldr	r3, [r7, #4]
 800161a:	f003 0307 	and.w	r3, r3, #7
 800161e:	60fb      	str	r3, [r7, #12]
  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8001620:	4b0b      	ldr	r3, [pc, #44]	; (8001650 <__NVIC_SetPriorityGrouping+0x40>)
 8001622:	68db      	ldr	r3, [r3, #12]
 8001624:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8001626:	68ba      	ldr	r2, [r7, #8]
 8001628:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 800162c:	4013      	ands	r3, r2
 800162e:	60bb      	str	r3, [r7, #8]
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8001630:	68fb      	ldr	r3, [r7, #12]
 8001632:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8001634:	68bb      	ldr	r3, [r7, #8]
 8001636:	431a      	orrs	r2, r3
  reg_value  =  (reg_value                                   |
 8001638:	4b06      	ldr	r3, [pc, #24]	; (8001654 <__NVIC_SetPriorityGrouping+0x44>)
 800163a:	4313      	orrs	r3, r2
 800163c:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 800163e:	4a04      	ldr	r2, [pc, #16]	; (8001650 <__NVIC_SetPriorityGrouping+0x40>)
 8001640:	68bb      	ldr	r3, [r7, #8]
 8001642:	60d3      	str	r3, [r2, #12]
}
 8001644:	bf00      	nop
 8001646:	3714      	adds	r7, #20
 8001648:	46bd      	mov	sp, r7
 800164a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800164e:	4770      	bx	lr
 8001650:	e000ed00 	.word	0xe000ed00
 8001654:	05fa0000 	.word	0x05fa0000

08001658 <__NVIC_GetPriorityGrouping>:
{
 8001658:	b480      	push	{r7}
 800165a:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 800165c:	4b04      	ldr	r3, [pc, #16]	; (8001670 <__NVIC_GetPriorityGrouping+0x18>)
 800165e:	68db      	ldr	r3, [r3, #12]
 8001660:	0a1b      	lsrs	r3, r3, #8
 8001662:	f003 0307 	and.w	r3, r3, #7
}
 8001666:	4618      	mov	r0, r3
 8001668:	46bd      	mov	sp, r7
 800166a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800166e:	4770      	bx	lr
 8001670:	e000ed00 	.word	0xe000ed00

08001674 <__NVIC_SetPriority>:
{
 8001674:	b480      	push	{r7}
 8001676:	b083      	sub	sp, #12
 8001678:	af00      	add	r7, sp, #0
 800167a:	4603      	mov	r3, r0
 800167c:	6039      	str	r1, [r7, #0]
 800167e:	80fb      	strh	r3, [r7, #6]
  if ((int32_t)(IRQn) >= 0)
 8001680:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8001684:	2b00      	cmp	r3, #0
 8001686:	db0a      	blt.n	800169e <__NVIC_SetPriority+0x2a>
    NVIC->IP[((uint32_t)IRQn)]                = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001688:	683b      	ldr	r3, [r7, #0]
 800168a:	b2da      	uxtb	r2, r3
 800168c:	490c      	ldr	r1, [pc, #48]	; (80016c0 <__NVIC_SetPriority+0x4c>)
 800168e:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8001692:	0112      	lsls	r2, r2, #4
 8001694:	b2d2      	uxtb	r2, r2
 8001696:	440b      	add	r3, r1
 8001698:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
}
 800169c:	e00a      	b.n	80016b4 <__NVIC_SetPriority+0x40>
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800169e:	683b      	ldr	r3, [r7, #0]
 80016a0:	b2da      	uxtb	r2, r3
 80016a2:	4908      	ldr	r1, [pc, #32]	; (80016c4 <__NVIC_SetPriority+0x50>)
 80016a4:	88fb      	ldrh	r3, [r7, #6]
 80016a6:	f003 030f 	and.w	r3, r3, #15
 80016aa:	3b04      	subs	r3, #4
 80016ac:	0112      	lsls	r2, r2, #4
 80016ae:	b2d2      	uxtb	r2, r2
 80016b0:	440b      	add	r3, r1
 80016b2:	761a      	strb	r2, [r3, #24]
}
 80016b4:	bf00      	nop
 80016b6:	370c      	adds	r7, #12
 80016b8:	46bd      	mov	sp, r7
 80016ba:	f85d 7b04 	ldr.w	r7, [sp], #4
 80016be:	4770      	bx	lr
 80016c0:	e000e100 	.word	0xe000e100
 80016c4:	e000ed00 	.word	0xe000ed00

080016c8 <NVIC_EncodePriority>:
{
 80016c8:	b480      	push	{r7}
 80016ca:	b089      	sub	sp, #36	; 0x24
 80016cc:	af00      	add	r7, sp, #0
 80016ce:	60f8      	str	r0, [r7, #12]
 80016d0:	60b9      	str	r1, [r7, #8]
 80016d2:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 80016d4:	68fb      	ldr	r3, [r7, #12]
 80016d6:	f003 0307 	and.w	r3, r3, #7
 80016da:	61fb      	str	r3, [r7, #28]
  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 80016dc:	69fb      	ldr	r3, [r7, #28]
 80016de:	f1c3 0307 	rsb	r3, r3, #7
 80016e2:	2b04      	cmp	r3, #4
 80016e4:	bf28      	it	cs
 80016e6:	2304      	movcs	r3, #4
 80016e8:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 80016ea:	69fb      	ldr	r3, [r7, #28]
 80016ec:	3304      	adds	r3, #4
 80016ee:	2b06      	cmp	r3, #6
 80016f0:	d902      	bls.n	80016f8 <NVIC_EncodePriority+0x30>
 80016f2:	69fb      	ldr	r3, [r7, #28]
 80016f4:	3b03      	subs	r3, #3
 80016f6:	e000      	b.n	80016fa <NVIC_EncodePriority+0x32>
 80016f8:	2300      	movs	r3, #0
 80016fa:	617b      	str	r3, [r7, #20]
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80016fc:	f04f 32ff 	mov.w	r2, #4294967295
 8001700:	69bb      	ldr	r3, [r7, #24]
 8001702:	fa02 f303 	lsl.w	r3, r2, r3
 8001706:	43da      	mvns	r2, r3
 8001708:	68bb      	ldr	r3, [r7, #8]
 800170a:	401a      	ands	r2, r3
 800170c:	697b      	ldr	r3, [r7, #20]
 800170e:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8001710:	f04f 31ff 	mov.w	r1, #4294967295
 8001714:	697b      	ldr	r3, [r7, #20]
 8001716:	fa01 f303 	lsl.w	r3, r1, r3
 800171a:	43d9      	mvns	r1, r3
 800171c:	687b      	ldr	r3, [r7, #4]
 800171e:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001720:	4313      	orrs	r3, r2
}
 8001722:	4618      	mov	r0, r3
 8001724:	3724      	adds	r7, #36	; 0x24
 8001726:	46bd      	mov	sp, r7
 8001728:	f85d 7b04 	ldr.w	r7, [sp], #4
 800172c:	4770      	bx	lr
	...

08001730 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8001730:	b580      	push	{r7, lr}
 8001732:	b082      	sub	sp, #8
 8001734:	af00      	add	r7, sp, #0
 8001736:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8001738:	687b      	ldr	r3, [r7, #4]
 800173a:	3b01      	subs	r3, #1
 800173c:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8001740:	d301      	bcc.n	8001746 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8001742:	2301      	movs	r3, #1
 8001744:	e00f      	b.n	8001766 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8001746:	4a0a      	ldr	r2, [pc, #40]	; (8001770 <SysTick_Config+0x40>)
 8001748:	687b      	ldr	r3, [r7, #4]
 800174a:	3b01      	subs	r3, #1
 800174c:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 800174e:	210f      	movs	r1, #15
 8001750:	f04f 30ff 	mov.w	r0, #4294967295
 8001754:	f7ff ff8e 	bl	8001674 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8001758:	4b05      	ldr	r3, [pc, #20]	; (8001770 <SysTick_Config+0x40>)
 800175a:	2200      	movs	r2, #0
 800175c:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 800175e:	4b04      	ldr	r3, [pc, #16]	; (8001770 <SysTick_Config+0x40>)
 8001760:	2207      	movs	r2, #7
 8001762:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8001764:	2300      	movs	r3, #0
}
 8001766:	4618      	mov	r0, r3
 8001768:	3708      	adds	r7, #8
 800176a:	46bd      	mov	sp, r7
 800176c:	bd80      	pop	{r7, pc}
 800176e:	bf00      	nop
 8001770:	e000e010 	.word	0xe000e010

08001774 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001774:	b580      	push	{r7, lr}
 8001776:	b082      	sub	sp, #8
 8001778:	af00      	add	r7, sp, #0
 800177a:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 800177c:	6878      	ldr	r0, [r7, #4]
 800177e:	f7ff ff47 	bl	8001610 <__NVIC_SetPriorityGrouping>
}
 8001782:	bf00      	nop
 8001784:	3708      	adds	r7, #8
 8001786:	46bd      	mov	sp, r7
 8001788:	bd80      	pop	{r7, pc}

0800178a <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 800178a:	b580      	push	{r7, lr}
 800178c:	b086      	sub	sp, #24
 800178e:	af00      	add	r7, sp, #0
 8001790:	4603      	mov	r3, r0
 8001792:	60b9      	str	r1, [r7, #8]
 8001794:	607a      	str	r2, [r7, #4]
 8001796:	81fb      	strh	r3, [r7, #14]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 8001798:	f7ff ff5e 	bl	8001658 <__NVIC_GetPriorityGrouping>
 800179c:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 800179e:	687a      	ldr	r2, [r7, #4]
 80017a0:	68b9      	ldr	r1, [r7, #8]
 80017a2:	6978      	ldr	r0, [r7, #20]
 80017a4:	f7ff ff90 	bl	80016c8 <NVIC_EncodePriority>
 80017a8:	4602      	mov	r2, r0
 80017aa:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 80017ae:	4611      	mov	r1, r2
 80017b0:	4618      	mov	r0, r3
 80017b2:	f7ff ff5f 	bl	8001674 <__NVIC_SetPriority>
}
 80017b6:	bf00      	nop
 80017b8:	3718      	adds	r7, #24
 80017ba:	46bd      	mov	sp, r7
 80017bc:	bd80      	pop	{r7, pc}

080017be <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status   - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 80017be:	b580      	push	{r7, lr}
 80017c0:	b082      	sub	sp, #8
 80017c2:	af00      	add	r7, sp, #0
 80017c4:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 80017c6:	6878      	ldr	r0, [r7, #4]
 80017c8:	f7ff ffb2 	bl	8001730 <SysTick_Config>
 80017cc:	4603      	mov	r3, r0
}
 80017ce:	4618      	mov	r0, r3
 80017d0:	3708      	adds	r7, #8
 80017d2:	46bd      	mov	sp, r7
 80017d4:	bd80      	pop	{r7, pc}
	...

080017d8 <HAL_MPU_Disable>:
/**
  * @brief  Disables the MPU
  * @retval None
  */
void HAL_MPU_Disable(void)
{
 80017d8:	b480      	push	{r7}
 80017da:	af00      	add	r7, sp, #0
  \details Ensures the apparent order of the explicit memory operations before
           and after the instruction, without ensuring their completion.
 */
__STATIC_FORCEINLINE void __DMB(void)
{
  __ASM volatile ("dmb 0xF":::"memory");
 80017dc:	f3bf 8f5f 	dmb	sy
}
 80017e0:	bf00      	nop
  /* Make sure outstanding transfers are done */
  __DMB();

  /* Disable fault exceptions */
  SCB->SHCSR &= ~SCB_SHCSR_MEMFAULTENA_Msk;
 80017e2:	4b07      	ldr	r3, [pc, #28]	; (8001800 <HAL_MPU_Disable+0x28>)
 80017e4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80017e6:	4a06      	ldr	r2, [pc, #24]	; (8001800 <HAL_MPU_Disable+0x28>)
 80017e8:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80017ec:	6253      	str	r3, [r2, #36]	; 0x24

  /* Disable the MPU and clear the control register*/
  MPU->CTRL = 0;
 80017ee:	4b05      	ldr	r3, [pc, #20]	; (8001804 <HAL_MPU_Disable+0x2c>)
 80017f0:	2200      	movs	r2, #0
 80017f2:	605a      	str	r2, [r3, #4]
}
 80017f4:	bf00      	nop
 80017f6:	46bd      	mov	sp, r7
 80017f8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80017fc:	4770      	bx	lr
 80017fe:	bf00      	nop
 8001800:	e000ed00 	.word	0xe000ed00
 8001804:	e000ed90 	.word	0xe000ed90

08001808 <HAL_MPU_Enable>:
  *            @arg MPU_PRIVILEGED_DEFAULT
  *            @arg MPU_HFNMI_PRIVDEF
  * @retval None
  */
void HAL_MPU_Enable(uint32_t MPU_Control)
{
 8001808:	b480      	push	{r7}
 800180a:	b083      	sub	sp, #12
 800180c:	af00      	add	r7, sp, #0
 800180e:	6078      	str	r0, [r7, #4]
  /* Enable the MPU */
  MPU->CTRL = MPU_Control | MPU_CTRL_ENABLE_Msk;
 8001810:	4a0b      	ldr	r2, [pc, #44]	; (8001840 <HAL_MPU_Enable+0x38>)
 8001812:	687b      	ldr	r3, [r7, #4]
 8001814:	f043 0301 	orr.w	r3, r3, #1
 8001818:	6053      	str	r3, [r2, #4]

  /* Enable fault exceptions */
  SCB->SHCSR |= SCB_SHCSR_MEMFAULTENA_Msk;
 800181a:	4b0a      	ldr	r3, [pc, #40]	; (8001844 <HAL_MPU_Enable+0x3c>)
 800181c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800181e:	4a09      	ldr	r2, [pc, #36]	; (8001844 <HAL_MPU_Enable+0x3c>)
 8001820:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8001824:	6253      	str	r3, [r2, #36]	; 0x24
  __ASM volatile ("dsb 0xF":::"memory");
 8001826:	f3bf 8f4f 	dsb	sy
}
 800182a:	bf00      	nop
  __ASM volatile ("isb 0xF":::"memory");
 800182c:	f3bf 8f6f 	isb	sy
}
 8001830:	bf00      	nop

  /* Ensure MPU setting take effects */
  __DSB();
  __ISB();
}
 8001832:	bf00      	nop
 8001834:	370c      	adds	r7, #12
 8001836:	46bd      	mov	sp, r7
 8001838:	f85d 7b04 	ldr.w	r7, [sp], #4
 800183c:	4770      	bx	lr
 800183e:	bf00      	nop
 8001840:	e000ed90 	.word	0xe000ed90
 8001844:	e000ed00 	.word	0xe000ed00

08001848 <HAL_MPU_ConfigRegion>:
  * @param  MPU_Init Pointer to a MPU_Region_InitTypeDef structure that contains
  *                  the initialization and configuration information.
  * @retval None
  */
void HAL_MPU_ConfigRegion(MPU_Region_InitTypeDef *MPU_Init)
{
 8001848:	b480      	push	{r7}
 800184a:	b083      	sub	sp, #12
 800184c:	af00      	add	r7, sp, #0
 800184e:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_MPU_REGION_NUMBER(MPU_Init->Number));
  assert_param(IS_MPU_REGION_ENABLE(MPU_Init->Enable));

  /* Set the Region number */
  MPU->RNR = MPU_Init->Number;
 8001850:	687b      	ldr	r3, [r7, #4]
 8001852:	785a      	ldrb	r2, [r3, #1]
 8001854:	4b1d      	ldr	r3, [pc, #116]	; (80018cc <HAL_MPU_ConfigRegion+0x84>)
 8001856:	609a      	str	r2, [r3, #8]

  if ((MPU_Init->Enable) != 0UL)
 8001858:	687b      	ldr	r3, [r7, #4]
 800185a:	781b      	ldrb	r3, [r3, #0]
 800185c:	2b00      	cmp	r3, #0
 800185e:	d029      	beq.n	80018b4 <HAL_MPU_ConfigRegion+0x6c>
    assert_param(IS_MPU_ACCESS_CACHEABLE(MPU_Init->IsCacheable));
    assert_param(IS_MPU_ACCESS_BUFFERABLE(MPU_Init->IsBufferable));
    assert_param(IS_MPU_SUB_REGION_DISABLE(MPU_Init->SubRegionDisable));
    assert_param(IS_MPU_REGION_SIZE(MPU_Init->Size));

    MPU->RBAR = MPU_Init->BaseAddress;
 8001860:	4a1a      	ldr	r2, [pc, #104]	; (80018cc <HAL_MPU_ConfigRegion+0x84>)
 8001862:	687b      	ldr	r3, [r7, #4]
 8001864:	685b      	ldr	r3, [r3, #4]
 8001866:	60d3      	str	r3, [r2, #12]
    MPU->RASR = ((uint32_t)MPU_Init->DisableExec             << MPU_RASR_XN_Pos)   |
 8001868:	687b      	ldr	r3, [r7, #4]
 800186a:	7b1b      	ldrb	r3, [r3, #12]
 800186c:	071a      	lsls	r2, r3, #28
                ((uint32_t)MPU_Init->AccessPermission        << MPU_RASR_AP_Pos)   |
 800186e:	687b      	ldr	r3, [r7, #4]
 8001870:	7adb      	ldrb	r3, [r3, #11]
 8001872:	061b      	lsls	r3, r3, #24
    MPU->RASR = ((uint32_t)MPU_Init->DisableExec             << MPU_RASR_XN_Pos)   |
 8001874:	431a      	orrs	r2, r3
                ((uint32_t)MPU_Init->TypeExtField            << MPU_RASR_TEX_Pos)  |
 8001876:	687b      	ldr	r3, [r7, #4]
 8001878:	7a9b      	ldrb	r3, [r3, #10]
 800187a:	04db      	lsls	r3, r3, #19
                ((uint32_t)MPU_Init->AccessPermission        << MPU_RASR_AP_Pos)   |
 800187c:	431a      	orrs	r2, r3
                ((uint32_t)MPU_Init->IsShareable             << MPU_RASR_S_Pos)    |
 800187e:	687b      	ldr	r3, [r7, #4]
 8001880:	7b5b      	ldrb	r3, [r3, #13]
 8001882:	049b      	lsls	r3, r3, #18
                ((uint32_t)MPU_Init->TypeExtField            << MPU_RASR_TEX_Pos)  |
 8001884:	431a      	orrs	r2, r3
                ((uint32_t)MPU_Init->IsCacheable             << MPU_RASR_C_Pos)    |
 8001886:	687b      	ldr	r3, [r7, #4]
 8001888:	7b9b      	ldrb	r3, [r3, #14]
 800188a:	045b      	lsls	r3, r3, #17
                ((uint32_t)MPU_Init->IsShareable             << MPU_RASR_S_Pos)    |
 800188c:	431a      	orrs	r2, r3
                ((uint32_t)MPU_Init->IsBufferable            << MPU_RASR_B_Pos)    |
 800188e:	687b      	ldr	r3, [r7, #4]
 8001890:	7bdb      	ldrb	r3, [r3, #15]
 8001892:	041b      	lsls	r3, r3, #16
                ((uint32_t)MPU_Init->IsCacheable             << MPU_RASR_C_Pos)    |
 8001894:	431a      	orrs	r2, r3
                ((uint32_t)MPU_Init->SubRegionDisable        << MPU_RASR_SRD_Pos)  |
 8001896:	687b      	ldr	r3, [r7, #4]
 8001898:	7a5b      	ldrb	r3, [r3, #9]
 800189a:	021b      	lsls	r3, r3, #8
                ((uint32_t)MPU_Init->IsBufferable            << MPU_RASR_B_Pos)    |
 800189c:	431a      	orrs	r2, r3
                ((uint32_t)MPU_Init->Size                    << MPU_RASR_SIZE_Pos) |
 800189e:	687b      	ldr	r3, [r7, #4]
 80018a0:	7a1b      	ldrb	r3, [r3, #8]
 80018a2:	005b      	lsls	r3, r3, #1
                ((uint32_t)MPU_Init->SubRegionDisable        << MPU_RASR_SRD_Pos)  |
 80018a4:	4313      	orrs	r3, r2
                ((uint32_t)MPU_Init->Enable                  << MPU_RASR_ENABLE_Pos);
 80018a6:	687a      	ldr	r2, [r7, #4]
 80018a8:	7812      	ldrb	r2, [r2, #0]
 80018aa:	4611      	mov	r1, r2
    MPU->RASR = ((uint32_t)MPU_Init->DisableExec             << MPU_RASR_XN_Pos)   |
 80018ac:	4a07      	ldr	r2, [pc, #28]	; (80018cc <HAL_MPU_ConfigRegion+0x84>)
                ((uint32_t)MPU_Init->Size                    << MPU_RASR_SIZE_Pos) |
 80018ae:	430b      	orrs	r3, r1
    MPU->RASR = ((uint32_t)MPU_Init->DisableExec             << MPU_RASR_XN_Pos)   |
 80018b0:	6113      	str	r3, [r2, #16]
  else
  {
    MPU->RBAR = 0x00;
    MPU->RASR = 0x00;
  }
}
 80018b2:	e005      	b.n	80018c0 <HAL_MPU_ConfigRegion+0x78>
    MPU->RBAR = 0x00;
 80018b4:	4b05      	ldr	r3, [pc, #20]	; (80018cc <HAL_MPU_ConfigRegion+0x84>)
 80018b6:	2200      	movs	r2, #0
 80018b8:	60da      	str	r2, [r3, #12]
    MPU->RASR = 0x00;
 80018ba:	4b04      	ldr	r3, [pc, #16]	; (80018cc <HAL_MPU_ConfigRegion+0x84>)
 80018bc:	2200      	movs	r2, #0
 80018be:	611a      	str	r2, [r3, #16]
}
 80018c0:	bf00      	nop
 80018c2:	370c      	adds	r7, #12
 80018c4:	46bd      	mov	sp, r7
 80018c6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80018ca:	4770      	bx	lr
 80018cc:	e000ed90 	.word	0xe000ed90

080018d0 <HAL_ETH_Init>:
  * @param  heth: pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ETH_Init(ETH_HandleTypeDef *heth)
{
 80018d0:	b580      	push	{r7, lr}
 80018d2:	b084      	sub	sp, #16
 80018d4:	af00      	add	r7, sp, #0
 80018d6:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  if (heth == NULL)
 80018d8:	687b      	ldr	r3, [r7, #4]
 80018da:	2b00      	cmp	r3, #0
 80018dc:	d101      	bne.n	80018e2 <HAL_ETH_Init+0x12>
  {
    return HAL_ERROR;
 80018de:	2301      	movs	r3, #1
 80018e0:	e0cf      	b.n	8001a82 <HAL_ETH_Init+0x1b2>
  }
  if (heth->gState == HAL_ETH_STATE_RESET)
 80018e2:	687b      	ldr	r3, [r7, #4]
 80018e4:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 80018e8:	2b00      	cmp	r3, #0
 80018ea:	d106      	bne.n	80018fa <HAL_ETH_Init+0x2a>
  {
    heth->gState = HAL_ETH_STATE_BUSY;
 80018ec:	687b      	ldr	r3, [r7, #4]
 80018ee:	2223      	movs	r2, #35	; 0x23
 80018f0:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

    /* Init the low level hardware */
    heth->MspInitCallback(heth);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC. */
    HAL_ETH_MspInit(heth);
 80018f4:	6878      	ldr	r0, [r7, #4]
 80018f6:	f7ff fa1b 	bl	8000d30 <HAL_ETH_MspInit>

#endif /* (USE_HAL_ETH_REGISTER_CALLBACKS) */
  }

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 80018fa:	4b64      	ldr	r3, [pc, #400]	; (8001a8c <HAL_ETH_Init+0x1bc>)
 80018fc:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 8001900:	4a62      	ldr	r2, [pc, #392]	; (8001a8c <HAL_ETH_Init+0x1bc>)
 8001902:	f043 0302 	orr.w	r3, r3, #2
 8001906:	f8c2 30f4 	str.w	r3, [r2, #244]	; 0xf4
 800190a:	4b60      	ldr	r3, [pc, #384]	; (8001a8c <HAL_ETH_Init+0x1bc>)
 800190c:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 8001910:	f003 0302 	and.w	r3, r3, #2
 8001914:	60bb      	str	r3, [r7, #8]
 8001916:	68bb      	ldr	r3, [r7, #8]

  if (heth->Init.MediaInterface == HAL_ETH_MII_MODE)
 8001918:	687b      	ldr	r3, [r7, #4]
 800191a:	7a1b      	ldrb	r3, [r3, #8]
 800191c:	2b00      	cmp	r3, #0
 800191e:	d103      	bne.n	8001928 <HAL_ETH_Init+0x58>
  {
    HAL_SYSCFG_ETHInterfaceSelect(SYSCFG_ETH_MII);
 8001920:	2000      	movs	r0, #0
 8001922:	f7ff fe61 	bl	80015e8 <HAL_SYSCFG_ETHInterfaceSelect>
 8001926:	e003      	b.n	8001930 <HAL_ETH_Init+0x60>
  }
  else
  {
    HAL_SYSCFG_ETHInterfaceSelect(SYSCFG_ETH_RMII);
 8001928:	f44f 0000 	mov.w	r0, #8388608	; 0x800000
 800192c:	f7ff fe5c 	bl	80015e8 <HAL_SYSCFG_ETHInterfaceSelect>
  }

  /* Dummy read to sync with ETH */
  (void)SYSCFG->PMCR;
 8001930:	4b57      	ldr	r3, [pc, #348]	; (8001a90 <HAL_ETH_Init+0x1c0>)
 8001932:	685b      	ldr	r3, [r3, #4]

  /* Ethernet Software reset */
  /* Set the SWR bit: resets all MAC subsystem internal registers and logic */
  /* After reset all the registers holds their respective reset values */
  SET_BIT(heth->Instance->DMAMR, ETH_DMAMR_SWR);
 8001934:	687b      	ldr	r3, [r7, #4]
 8001936:	681b      	ldr	r3, [r3, #0]
 8001938:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800193c:	681b      	ldr	r3, [r3, #0]
 800193e:	687a      	ldr	r2, [r7, #4]
 8001940:	6812      	ldr	r2, [r2, #0]
 8001942:	f043 0301 	orr.w	r3, r3, #1
 8001946:	f502 5280 	add.w	r2, r2, #4096	; 0x1000
 800194a:	6013      	str	r3, [r2, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 800194c:	f7ff fe40 	bl	80015d0 <HAL_GetTick>
 8001950:	60f8      	str	r0, [r7, #12]

  /* Wait for software reset */
  while (READ_BIT(heth->Instance->DMAMR, ETH_DMAMR_SWR) > 0U)
 8001952:	e011      	b.n	8001978 <HAL_ETH_Init+0xa8>
  {
    if (((HAL_GetTick() - tickstart) > ETH_SWRESET_TIMEOUT))
 8001954:	f7ff fe3c 	bl	80015d0 <HAL_GetTick>
 8001958:	4602      	mov	r2, r0
 800195a:	68fb      	ldr	r3, [r7, #12]
 800195c:	1ad3      	subs	r3, r2, r3
 800195e:	f5b3 7ffa 	cmp.w	r3, #500	; 0x1f4
 8001962:	d909      	bls.n	8001978 <HAL_ETH_Init+0xa8>
    {
      /* Set Error Code */
      heth->ErrorCode = HAL_ETH_ERROR_TIMEOUT;
 8001964:	687b      	ldr	r3, [r7, #4]
 8001966:	2204      	movs	r2, #4
 8001968:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
      /* Set State as Error */
      heth->gState = HAL_ETH_STATE_ERROR;
 800196c:	687b      	ldr	r3, [r7, #4]
 800196e:	22e0      	movs	r2, #224	; 0xe0
 8001970:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
      /* Return Error */
      return HAL_ERROR;
 8001974:	2301      	movs	r3, #1
 8001976:	e084      	b.n	8001a82 <HAL_ETH_Init+0x1b2>
  while (READ_BIT(heth->Instance->DMAMR, ETH_DMAMR_SWR) > 0U)
 8001978:	687b      	ldr	r3, [r7, #4]
 800197a:	681b      	ldr	r3, [r3, #0]
 800197c:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8001980:	681b      	ldr	r3, [r3, #0]
 8001982:	f003 0301 	and.w	r3, r3, #1
 8001986:	2b00      	cmp	r3, #0
 8001988:	d1e4      	bne.n	8001954 <HAL_ETH_Init+0x84>
    }
  }

  /*------------------ MDIO CSR Clock Range Configuration --------------------*/
  HAL_ETH_SetMDIOClockRange(heth);
 800198a:	6878      	ldr	r0, [r7, #4]
 800198c:	f000 f886 	bl	8001a9c <HAL_ETH_SetMDIOClockRange>

  /*------------------ MAC LPI 1US Tic Counter Configuration --------------------*/
  WRITE_REG(heth->Instance->MAC1USTCR, (((uint32_t)HAL_RCC_GetHCLKFreq() / ETH_MAC_US_TICK) - 1U));
 8001990:	f001 fcc8 	bl	8003324 <HAL_RCC_GetHCLKFreq>
 8001994:	4603      	mov	r3, r0
 8001996:	4a3f      	ldr	r2, [pc, #252]	; (8001a94 <HAL_ETH_Init+0x1c4>)
 8001998:	fba2 2303 	umull	r2, r3, r2, r3
 800199c:	0c9a      	lsrs	r2, r3, #18
 800199e:	687b      	ldr	r3, [r7, #4]
 80019a0:	681b      	ldr	r3, [r3, #0]
 80019a2:	3a01      	subs	r2, #1
 80019a4:	f8c3 20dc 	str.w	r2, [r3, #220]	; 0xdc

  /*------------------ MAC, MTL and DMA default Configuration ----------------*/
  ETH_MACDMAConfig(heth);
 80019a8:	6878      	ldr	r0, [r7, #4]
 80019aa:	f000 fa71 	bl	8001e90 <ETH_MACDMAConfig>

  /* SET DSL to 64 bit */
  MODIFY_REG(heth->Instance->DMACCR, ETH_DMACCR_DSL, ETH_DMACCR_DSL_64BIT);
 80019ae:	687b      	ldr	r3, [r7, #4]
 80019b0:	681b      	ldr	r3, [r3, #0]
 80019b2:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80019b6:	f8d3 3100 	ldr.w	r3, [r3, #256]	; 0x100
 80019ba:	f423 13e0 	bic.w	r3, r3, #1835008	; 0x1c0000
 80019be:	687a      	ldr	r2, [r7, #4]
 80019c0:	6812      	ldr	r2, [r2, #0]
 80019c2:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 80019c6:	f502 5280 	add.w	r2, r2, #4096	; 0x1000
 80019ca:	f8c2 3100 	str.w	r3, [r2, #256]	; 0x100

  /* Set Receive Buffers Length (must be a multiple of 4) */
  if ((heth->Init.RxBuffLen % 0x4U) != 0x0U)
 80019ce:	687b      	ldr	r3, [r7, #4]
 80019d0:	695b      	ldr	r3, [r3, #20]
 80019d2:	f003 0303 	and.w	r3, r3, #3
 80019d6:	2b00      	cmp	r3, #0
 80019d8:	d009      	beq.n	80019ee <HAL_ETH_Init+0x11e>
  {
    /* Set Error Code */
    heth->ErrorCode = HAL_ETH_ERROR_PARAM;
 80019da:	687b      	ldr	r3, [r7, #4]
 80019dc:	2201      	movs	r2, #1
 80019de:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
    /* Set State as Error */
    heth->gState = HAL_ETH_STATE_ERROR;
 80019e2:	687b      	ldr	r3, [r7, #4]
 80019e4:	22e0      	movs	r2, #224	; 0xe0
 80019e6:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
    /* Return Error */
    return HAL_ERROR;
 80019ea:	2301      	movs	r3, #1
 80019ec:	e049      	b.n	8001a82 <HAL_ETH_Init+0x1b2>
  }
  else
  {
    MODIFY_REG(heth->Instance->DMACRCR, ETH_DMACRCR_RBSZ, ((heth->Init.RxBuffLen) << 1));
 80019ee:	687b      	ldr	r3, [r7, #4]
 80019f0:	681b      	ldr	r3, [r3, #0]
 80019f2:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80019f6:	f8d3 2108 	ldr.w	r2, [r3, #264]	; 0x108
 80019fa:	4b27      	ldr	r3, [pc, #156]	; (8001a98 <HAL_ETH_Init+0x1c8>)
 80019fc:	4013      	ands	r3, r2
 80019fe:	687a      	ldr	r2, [r7, #4]
 8001a00:	6952      	ldr	r2, [r2, #20]
 8001a02:	0051      	lsls	r1, r2, #1
 8001a04:	687a      	ldr	r2, [r7, #4]
 8001a06:	6812      	ldr	r2, [r2, #0]
 8001a08:	430b      	orrs	r3, r1
 8001a0a:	f502 5280 	add.w	r2, r2, #4096	; 0x1000
 8001a0e:	f8c2 3108 	str.w	r3, [r2, #264]	; 0x108
  }

  /*------------------ DMA Tx Descriptors Configuration ----------------------*/
  ETH_DMATxDescListInit(heth);
 8001a12:	6878      	ldr	r0, [r7, #4]
 8001a14:	f000 fad9 	bl	8001fca <ETH_DMATxDescListInit>

  /*------------------ DMA Rx Descriptors Configuration ----------------------*/
  ETH_DMARxDescListInit(heth);
 8001a18:	6878      	ldr	r0, [r7, #4]
 8001a1a:	f000 fb1f 	bl	800205c <ETH_DMARxDescListInit>

  /*--------------------- ETHERNET MAC Address Configuration ------------------*/
  /* Set MAC addr bits 32 to 47 */
  heth->Instance->MACA0HR = (((uint32_t)(heth->Init.MACAddr[5]) << 8) | (uint32_t)heth->Init.MACAddr[4]);
 8001a1e:	687b      	ldr	r3, [r7, #4]
 8001a20:	685b      	ldr	r3, [r3, #4]
 8001a22:	3305      	adds	r3, #5
 8001a24:	781b      	ldrb	r3, [r3, #0]
 8001a26:	021a      	lsls	r2, r3, #8
 8001a28:	687b      	ldr	r3, [r7, #4]
 8001a2a:	685b      	ldr	r3, [r3, #4]
 8001a2c:	3304      	adds	r3, #4
 8001a2e:	781b      	ldrb	r3, [r3, #0]
 8001a30:	4619      	mov	r1, r3
 8001a32:	687b      	ldr	r3, [r7, #4]
 8001a34:	681b      	ldr	r3, [r3, #0]
 8001a36:	430a      	orrs	r2, r1
 8001a38:	f8c3 2300 	str.w	r2, [r3, #768]	; 0x300
  /* Set MAC addr bits 0 to 31 */
  heth->Instance->MACA0LR = (((uint32_t)(heth->Init.MACAddr[3]) << 24) | ((uint32_t)(heth->Init.MACAddr[2]) << 16) |
 8001a3c:	687b      	ldr	r3, [r7, #4]
 8001a3e:	685b      	ldr	r3, [r3, #4]
 8001a40:	3303      	adds	r3, #3
 8001a42:	781b      	ldrb	r3, [r3, #0]
 8001a44:	061a      	lsls	r2, r3, #24
 8001a46:	687b      	ldr	r3, [r7, #4]
 8001a48:	685b      	ldr	r3, [r3, #4]
 8001a4a:	3302      	adds	r3, #2
 8001a4c:	781b      	ldrb	r3, [r3, #0]
 8001a4e:	041b      	lsls	r3, r3, #16
 8001a50:	431a      	orrs	r2, r3
                             ((uint32_t)(heth->Init.MACAddr[1]) << 8) | (uint32_t)heth->Init.MACAddr[0]);
 8001a52:	687b      	ldr	r3, [r7, #4]
 8001a54:	685b      	ldr	r3, [r3, #4]
 8001a56:	3301      	adds	r3, #1
 8001a58:	781b      	ldrb	r3, [r3, #0]
 8001a5a:	021b      	lsls	r3, r3, #8
  heth->Instance->MACA0LR = (((uint32_t)(heth->Init.MACAddr[3]) << 24) | ((uint32_t)(heth->Init.MACAddr[2]) << 16) |
 8001a5c:	431a      	orrs	r2, r3
                             ((uint32_t)(heth->Init.MACAddr[1]) << 8) | (uint32_t)heth->Init.MACAddr[0]);
 8001a5e:	687b      	ldr	r3, [r7, #4]
 8001a60:	685b      	ldr	r3, [r3, #4]
 8001a62:	781b      	ldrb	r3, [r3, #0]
 8001a64:	4619      	mov	r1, r3
  heth->Instance->MACA0LR = (((uint32_t)(heth->Init.MACAddr[3]) << 24) | ((uint32_t)(heth->Init.MACAddr[2]) << 16) |
 8001a66:	687b      	ldr	r3, [r7, #4]
 8001a68:	681b      	ldr	r3, [r3, #0]
                             ((uint32_t)(heth->Init.MACAddr[1]) << 8) | (uint32_t)heth->Init.MACAddr[0]);
 8001a6a:	430a      	orrs	r2, r1
  heth->Instance->MACA0LR = (((uint32_t)(heth->Init.MACAddr[3]) << 24) | ((uint32_t)(heth->Init.MACAddr[2]) << 16) |
 8001a6c:	f8c3 2304 	str.w	r2, [r3, #772]	; 0x304

  heth->ErrorCode = HAL_ETH_ERROR_NONE;
 8001a70:	687b      	ldr	r3, [r7, #4]
 8001a72:	2200      	movs	r2, #0
 8001a74:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
  heth->gState = HAL_ETH_STATE_READY;
 8001a78:	687b      	ldr	r3, [r7, #4]
 8001a7a:	2210      	movs	r2, #16
 8001a7c:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  return HAL_OK;
 8001a80:	2300      	movs	r3, #0
}
 8001a82:	4618      	mov	r0, r3
 8001a84:	3710      	adds	r7, #16
 8001a86:	46bd      	mov	sp, r7
 8001a88:	bd80      	pop	{r7, pc}
 8001a8a:	bf00      	nop
 8001a8c:	58024400 	.word	0x58024400
 8001a90:	58000400 	.word	0x58000400
 8001a94:	431bde83 	.word	0x431bde83
 8001a98:	ffff8001 	.word	0xffff8001

08001a9c <HAL_ETH_SetMDIOClockRange>:
  * @param  heth: pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval None
  */
void HAL_ETH_SetMDIOClockRange(ETH_HandleTypeDef *heth)
{
 8001a9c:	b580      	push	{r7, lr}
 8001a9e:	b084      	sub	sp, #16
 8001aa0:	af00      	add	r7, sp, #0
 8001aa2:	6078      	str	r0, [r7, #4]
  uint32_t hclk;
  uint32_t tmpreg;

  /* Get the ETHERNET MACMDIOAR value */
  tmpreg = (heth->Instance)->MACMDIOAR;
 8001aa4:	687b      	ldr	r3, [r7, #4]
 8001aa6:	681b      	ldr	r3, [r3, #0]
 8001aa8:	f8d3 3200 	ldr.w	r3, [r3, #512]	; 0x200
 8001aac:	60fb      	str	r3, [r7, #12]

  /* Clear CSR Clock Range bits */
  tmpreg &= ~ETH_MACMDIOAR_CR;
 8001aae:	68fb      	ldr	r3, [r7, #12]
 8001ab0:	f423 6370 	bic.w	r3, r3, #3840	; 0xf00
 8001ab4:	60fb      	str	r3, [r7, #12]

  /* Get hclk frequency value */
  hclk = HAL_RCC_GetHCLKFreq();
 8001ab6:	f001 fc35 	bl	8003324 <HAL_RCC_GetHCLKFreq>
 8001aba:	60b8      	str	r0, [r7, #8]

  /* Set CR bits depending on hclk value */
  if ((hclk >= 20000000U) && (hclk < 35000000U))
 8001abc:	68bb      	ldr	r3, [r7, #8]
 8001abe:	4a1e      	ldr	r2, [pc, #120]	; (8001b38 <HAL_ETH_SetMDIOClockRange+0x9c>)
 8001ac0:	4293      	cmp	r3, r2
 8001ac2:	d908      	bls.n	8001ad6 <HAL_ETH_SetMDIOClockRange+0x3a>
 8001ac4:	68bb      	ldr	r3, [r7, #8]
 8001ac6:	4a1d      	ldr	r2, [pc, #116]	; (8001b3c <HAL_ETH_SetMDIOClockRange+0xa0>)
 8001ac8:	4293      	cmp	r3, r2
 8001aca:	d804      	bhi.n	8001ad6 <HAL_ETH_SetMDIOClockRange+0x3a>
  {
    /* CSR Clock Range between 20-35 MHz */
    tmpreg |= (uint32_t)ETH_MACMDIOAR_CR_DIV16;
 8001acc:	68fb      	ldr	r3, [r7, #12]
 8001ace:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8001ad2:	60fb      	str	r3, [r7, #12]
 8001ad4:	e027      	b.n	8001b26 <HAL_ETH_SetMDIOClockRange+0x8a>
  }
  else if ((hclk >= 35000000U) && (hclk < 60000000U))
 8001ad6:	68bb      	ldr	r3, [r7, #8]
 8001ad8:	4a18      	ldr	r2, [pc, #96]	; (8001b3c <HAL_ETH_SetMDIOClockRange+0xa0>)
 8001ada:	4293      	cmp	r3, r2
 8001adc:	d908      	bls.n	8001af0 <HAL_ETH_SetMDIOClockRange+0x54>
 8001ade:	68bb      	ldr	r3, [r7, #8]
 8001ae0:	4a17      	ldr	r2, [pc, #92]	; (8001b40 <HAL_ETH_SetMDIOClockRange+0xa4>)
 8001ae2:	4293      	cmp	r3, r2
 8001ae4:	d204      	bcs.n	8001af0 <HAL_ETH_SetMDIOClockRange+0x54>
  {
    /* CSR Clock Range between 35-60 MHz */
    tmpreg |= (uint32_t)ETH_MACMDIOAR_CR_DIV26;
 8001ae6:	68fb      	ldr	r3, [r7, #12]
 8001ae8:	f443 7340 	orr.w	r3, r3, #768	; 0x300
 8001aec:	60fb      	str	r3, [r7, #12]
 8001aee:	e01a      	b.n	8001b26 <HAL_ETH_SetMDIOClockRange+0x8a>
  }
  else if ((hclk >= 60000000U) && (hclk < 100000000U))
 8001af0:	68bb      	ldr	r3, [r7, #8]
 8001af2:	4a13      	ldr	r2, [pc, #76]	; (8001b40 <HAL_ETH_SetMDIOClockRange+0xa4>)
 8001af4:	4293      	cmp	r3, r2
 8001af6:	d303      	bcc.n	8001b00 <HAL_ETH_SetMDIOClockRange+0x64>
 8001af8:	68bb      	ldr	r3, [r7, #8]
 8001afa:	4a12      	ldr	r2, [pc, #72]	; (8001b44 <HAL_ETH_SetMDIOClockRange+0xa8>)
 8001afc:	4293      	cmp	r3, r2
 8001afe:	d911      	bls.n	8001b24 <HAL_ETH_SetMDIOClockRange+0x88>
  {
    /* CSR Clock Range between 60-100 MHz */
    tmpreg |= (uint32_t)ETH_MACMDIOAR_CR_DIV42;
  }
  else if ((hclk >= 100000000U) && (hclk < 150000000U))
 8001b00:	68bb      	ldr	r3, [r7, #8]
 8001b02:	4a10      	ldr	r2, [pc, #64]	; (8001b44 <HAL_ETH_SetMDIOClockRange+0xa8>)
 8001b04:	4293      	cmp	r3, r2
 8001b06:	d908      	bls.n	8001b1a <HAL_ETH_SetMDIOClockRange+0x7e>
 8001b08:	68bb      	ldr	r3, [r7, #8]
 8001b0a:	4a0f      	ldr	r2, [pc, #60]	; (8001b48 <HAL_ETH_SetMDIOClockRange+0xac>)
 8001b0c:	4293      	cmp	r3, r2
 8001b0e:	d804      	bhi.n	8001b1a <HAL_ETH_SetMDIOClockRange+0x7e>
  {
    /* CSR Clock Range between 100-150 MHz */
    tmpreg |= (uint32_t)ETH_MACMDIOAR_CR_DIV62;
 8001b10:	68fb      	ldr	r3, [r7, #12]
 8001b12:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8001b16:	60fb      	str	r3, [r7, #12]
 8001b18:	e005      	b.n	8001b26 <HAL_ETH_SetMDIOClockRange+0x8a>
  }
  else /* (hclk >= 150000000)&&(hclk <= 200000000) */
  {
    /* CSR Clock Range between 150-200 MHz */
    tmpreg |= (uint32_t)ETH_MACMDIOAR_CR_DIV102;
 8001b1a:	68fb      	ldr	r3, [r7, #12]
 8001b1c:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8001b20:	60fb      	str	r3, [r7, #12]
 8001b22:	e000      	b.n	8001b26 <HAL_ETH_SetMDIOClockRange+0x8a>
    tmpreg |= (uint32_t)ETH_MACMDIOAR_CR_DIV42;
 8001b24:	bf00      	nop
  }

  /* Configure the CSR Clock Range */
  (heth->Instance)->MACMDIOAR = (uint32_t)tmpreg;
 8001b26:	687b      	ldr	r3, [r7, #4]
 8001b28:	681b      	ldr	r3, [r3, #0]
 8001b2a:	68fa      	ldr	r2, [r7, #12]
 8001b2c:	f8c3 2200 	str.w	r2, [r3, #512]	; 0x200
}
 8001b30:	bf00      	nop
 8001b32:	3710      	adds	r7, #16
 8001b34:	46bd      	mov	sp, r7
 8001b36:	bd80      	pop	{r7, pc}
 8001b38:	01312cff 	.word	0x01312cff
 8001b3c:	02160ebf 	.word	0x02160ebf
 8001b40:	03938700 	.word	0x03938700
 8001b44:	05f5e0ff 	.word	0x05f5e0ff
 8001b48:	08f0d17f 	.word	0x08f0d17f

08001b4c <ETH_SetMACConfig>:
  * @{
  */


static void ETH_SetMACConfig(ETH_HandleTypeDef *heth,  ETH_MACConfigTypeDef *macconf)
{
 8001b4c:	b480      	push	{r7}
 8001b4e:	b085      	sub	sp, #20
 8001b50:	af00      	add	r7, sp, #0
 8001b52:	6078      	str	r0, [r7, #4]
 8001b54:	6039      	str	r1, [r7, #0]
  uint32_t macregval;

  /*------------------------ MACCR Configuration --------------------*/
  macregval = (macconf->InterPacketGapVal |
 8001b56:	683b      	ldr	r3, [r7, #0]
 8001b58:	689a      	ldr	r2, [r3, #8]
               macconf->SourceAddrControl |
 8001b5a:	683b      	ldr	r3, [r7, #0]
 8001b5c:	681b      	ldr	r3, [r3, #0]
  macregval = (macconf->InterPacketGapVal |
 8001b5e:	431a      	orrs	r2, r3
               ((uint32_t)macconf->ChecksumOffload << 27) |
 8001b60:	683b      	ldr	r3, [r7, #0]
 8001b62:	791b      	ldrb	r3, [r3, #4]
 8001b64:	06db      	lsls	r3, r3, #27
               macconf->SourceAddrControl |
 8001b66:	431a      	orrs	r2, r3
               ((uint32_t)macconf->GiantPacketSizeLimitControl << 23) |
 8001b68:	683b      	ldr	r3, [r7, #0]
 8001b6a:	7b1b      	ldrb	r3, [r3, #12]
 8001b6c:	05db      	lsls	r3, r3, #23
               ((uint32_t)macconf->ChecksumOffload << 27) |
 8001b6e:	431a      	orrs	r2, r3
               ((uint32_t)macconf->Support2KPacket  << 22) |
 8001b70:	683b      	ldr	r3, [r7, #0]
 8001b72:	7b5b      	ldrb	r3, [r3, #13]
 8001b74:	059b      	lsls	r3, r3, #22
               ((uint32_t)macconf->GiantPacketSizeLimitControl << 23) |
 8001b76:	431a      	orrs	r2, r3
               ((uint32_t)macconf->CRCStripTypePacket << 21) |
 8001b78:	683b      	ldr	r3, [r7, #0]
 8001b7a:	7b9b      	ldrb	r3, [r3, #14]
 8001b7c:	055b      	lsls	r3, r3, #21
               ((uint32_t)macconf->Support2KPacket  << 22) |
 8001b7e:	431a      	orrs	r2, r3
               ((uint32_t)macconf->AutomaticPadCRCStrip << 20) |
 8001b80:	683b      	ldr	r3, [r7, #0]
 8001b82:	7bdb      	ldrb	r3, [r3, #15]
 8001b84:	051b      	lsls	r3, r3, #20
               ((uint32_t)macconf->CRCStripTypePacket << 21) |
 8001b86:	4313      	orrs	r3, r2
               ((uint32_t)((macconf->Watchdog == DISABLE) ? 1U : 0U) << 19) |
 8001b88:	683a      	ldr	r2, [r7, #0]
 8001b8a:	7c12      	ldrb	r2, [r2, #16]
 8001b8c:	2a00      	cmp	r2, #0
 8001b8e:	d102      	bne.n	8001b96 <ETH_SetMACConfig+0x4a>
 8001b90:	f44f 2200 	mov.w	r2, #524288	; 0x80000
 8001b94:	e000      	b.n	8001b98 <ETH_SetMACConfig+0x4c>
 8001b96:	2200      	movs	r2, #0
               ((uint32_t)macconf->AutomaticPadCRCStrip << 20) |
 8001b98:	4313      	orrs	r3, r2
               ((uint32_t)((macconf->Jabber == DISABLE) ? 1U : 0U) << 17) |
 8001b9a:	683a      	ldr	r2, [r7, #0]
 8001b9c:	7c52      	ldrb	r2, [r2, #17]
 8001b9e:	2a00      	cmp	r2, #0
 8001ba0:	d102      	bne.n	8001ba8 <ETH_SetMACConfig+0x5c>
 8001ba2:	f44f 3200 	mov.w	r2, #131072	; 0x20000
 8001ba6:	e000      	b.n	8001baa <ETH_SetMACConfig+0x5e>
 8001ba8:	2200      	movs	r2, #0
               ((uint32_t)((macconf->Watchdog == DISABLE) ? 1U : 0U) << 19) |
 8001baa:	431a      	orrs	r2, r3
               ((uint32_t)macconf->JumboPacket << 16) |
 8001bac:	683b      	ldr	r3, [r7, #0]
 8001bae:	7c9b      	ldrb	r3, [r3, #18]
 8001bb0:	041b      	lsls	r3, r3, #16
               ((uint32_t)((macconf->Jabber == DISABLE) ? 1U : 0U) << 17) |
 8001bb2:	431a      	orrs	r2, r3
               macconf->Speed |
 8001bb4:	683b      	ldr	r3, [r7, #0]
 8001bb6:	695b      	ldr	r3, [r3, #20]
               ((uint32_t)macconf->JumboPacket << 16) |
 8001bb8:	431a      	orrs	r2, r3
               macconf->DuplexMode |
 8001bba:	683b      	ldr	r3, [r7, #0]
 8001bbc:	699b      	ldr	r3, [r3, #24]
               macconf->Speed |
 8001bbe:	431a      	orrs	r2, r3
               ((uint32_t)macconf->LoopbackMode << 12) |
 8001bc0:	683b      	ldr	r3, [r7, #0]
 8001bc2:	7f1b      	ldrb	r3, [r3, #28]
 8001bc4:	031b      	lsls	r3, r3, #12
               macconf->DuplexMode |
 8001bc6:	431a      	orrs	r2, r3
               ((uint32_t)macconf->CarrierSenseBeforeTransmit << 11) |
 8001bc8:	683b      	ldr	r3, [r7, #0]
 8001bca:	7f5b      	ldrb	r3, [r3, #29]
 8001bcc:	02db      	lsls	r3, r3, #11
               ((uint32_t)macconf->LoopbackMode << 12) |
 8001bce:	4313      	orrs	r3, r2
               ((uint32_t)((macconf->ReceiveOwn == DISABLE) ? 1U : 0U) << 10) |
 8001bd0:	683a      	ldr	r2, [r7, #0]
 8001bd2:	7f92      	ldrb	r2, [r2, #30]
 8001bd4:	2a00      	cmp	r2, #0
 8001bd6:	d102      	bne.n	8001bde <ETH_SetMACConfig+0x92>
 8001bd8:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8001bdc:	e000      	b.n	8001be0 <ETH_SetMACConfig+0x94>
 8001bde:	2200      	movs	r2, #0
               ((uint32_t)macconf->CarrierSenseBeforeTransmit << 11) |
 8001be0:	431a      	orrs	r2, r3
               ((uint32_t)macconf->CarrierSenseDuringTransmit << 9) |
 8001be2:	683b      	ldr	r3, [r7, #0]
 8001be4:	7fdb      	ldrb	r3, [r3, #31]
 8001be6:	025b      	lsls	r3, r3, #9
               ((uint32_t)((macconf->ReceiveOwn == DISABLE) ? 1U : 0U) << 10) |
 8001be8:	4313      	orrs	r3, r2
               ((uint32_t)((macconf->RetryTransmission == DISABLE) ? 1U : 0U) << 8) |
 8001bea:	683a      	ldr	r2, [r7, #0]
 8001bec:	f892 2020 	ldrb.w	r2, [r2, #32]
 8001bf0:	2a00      	cmp	r2, #0
 8001bf2:	d102      	bne.n	8001bfa <ETH_SetMACConfig+0xae>
 8001bf4:	f44f 7280 	mov.w	r2, #256	; 0x100
 8001bf8:	e000      	b.n	8001bfc <ETH_SetMACConfig+0xb0>
 8001bfa:	2200      	movs	r2, #0
               ((uint32_t)macconf->CarrierSenseDuringTransmit << 9) |
 8001bfc:	431a      	orrs	r2, r3
               macconf->BackOffLimit |
 8001bfe:	683b      	ldr	r3, [r7, #0]
 8001c00:	6a5b      	ldr	r3, [r3, #36]	; 0x24
               ((uint32_t)((macconf->RetryTransmission == DISABLE) ? 1U : 0U) << 8) |
 8001c02:	431a      	orrs	r2, r3
               ((uint32_t)macconf->DeferralCheck << 4) |
 8001c04:	683b      	ldr	r3, [r7, #0]
 8001c06:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8001c0a:	011b      	lsls	r3, r3, #4
               macconf->BackOffLimit |
 8001c0c:	431a      	orrs	r2, r3
               macconf->PreambleLength);
 8001c0e:	683b      	ldr	r3, [r7, #0]
 8001c10:	6adb      	ldr	r3, [r3, #44]	; 0x2c
  macregval = (macconf->InterPacketGapVal |
 8001c12:	4313      	orrs	r3, r2
 8001c14:	60fb      	str	r3, [r7, #12]

  /* Write to MACCR */
  MODIFY_REG(heth->Instance->MACCR, ETH_MACCR_MASK, macregval);
 8001c16:	687b      	ldr	r3, [r7, #4]
 8001c18:	681b      	ldr	r3, [r3, #0]
 8001c1a:	681a      	ldr	r2, [r3, #0]
 8001c1c:	4b56      	ldr	r3, [pc, #344]	; (8001d78 <ETH_SetMACConfig+0x22c>)
 8001c1e:	4013      	ands	r3, r2
 8001c20:	687a      	ldr	r2, [r7, #4]
 8001c22:	6812      	ldr	r2, [r2, #0]
 8001c24:	68f9      	ldr	r1, [r7, #12]
 8001c26:	430b      	orrs	r3, r1
 8001c28:	6013      	str	r3, [r2, #0]

  /*------------------------ MACECR Configuration --------------------*/
  macregval = ((macconf->ExtendedInterPacketGapVal << 25) |
 8001c2a:	683b      	ldr	r3, [r7, #0]
 8001c2c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8001c2e:	065a      	lsls	r2, r3, #25
               ((uint32_t)macconf->ExtendedInterPacketGap << 24) |
 8001c30:	683b      	ldr	r3, [r7, #0]
 8001c32:	f893 3038 	ldrb.w	r3, [r3, #56]	; 0x38
 8001c36:	061b      	lsls	r3, r3, #24
  macregval = ((macconf->ExtendedInterPacketGapVal << 25) |
 8001c38:	431a      	orrs	r2, r3
               ((uint32_t)macconf->UnicastSlowProtocolPacketDetect << 18) |
 8001c3a:	683b      	ldr	r3, [r7, #0]
 8001c3c:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 8001c40:	049b      	lsls	r3, r3, #18
               ((uint32_t)macconf->ExtendedInterPacketGap << 24) |
 8001c42:	431a      	orrs	r2, r3
               ((uint32_t)macconf->SlowProtocolDetect << 17) |
 8001c44:	683b      	ldr	r3, [r7, #0]
 8001c46:	f893 3031 	ldrb.w	r3, [r3, #49]	; 0x31
 8001c4a:	045b      	lsls	r3, r3, #17
               ((uint32_t)macconf->UnicastSlowProtocolPacketDetect << 18) |
 8001c4c:	4313      	orrs	r3, r2
               ((uint32_t)((macconf->CRCCheckingRxPackets == DISABLE) ? 1U : 0U) << 16) |
 8001c4e:	683a      	ldr	r2, [r7, #0]
 8001c50:	f892 2032 	ldrb.w	r2, [r2, #50]	; 0x32
 8001c54:	2a00      	cmp	r2, #0
 8001c56:	d102      	bne.n	8001c5e <ETH_SetMACConfig+0x112>
 8001c58:	f44f 3280 	mov.w	r2, #65536	; 0x10000
 8001c5c:	e000      	b.n	8001c60 <ETH_SetMACConfig+0x114>
 8001c5e:	2200      	movs	r2, #0
               ((uint32_t)macconf->SlowProtocolDetect << 17) |
 8001c60:	431a      	orrs	r2, r3
               macconf->GiantPacketSizeLimit);
 8001c62:	683b      	ldr	r3, [r7, #0]
 8001c64:	6b5b      	ldr	r3, [r3, #52]	; 0x34
  macregval = ((macconf->ExtendedInterPacketGapVal << 25) |
 8001c66:	4313      	orrs	r3, r2
 8001c68:	60fb      	str	r3, [r7, #12]

  /* Write to MACECR */
  MODIFY_REG(heth->Instance->MACECR, ETH_MACECR_MASK, macregval);
 8001c6a:	687b      	ldr	r3, [r7, #4]
 8001c6c:	681b      	ldr	r3, [r3, #0]
 8001c6e:	685a      	ldr	r2, [r3, #4]
 8001c70:	4b42      	ldr	r3, [pc, #264]	; (8001d7c <ETH_SetMACConfig+0x230>)
 8001c72:	4013      	ands	r3, r2
 8001c74:	687a      	ldr	r2, [r7, #4]
 8001c76:	6812      	ldr	r2, [r2, #0]
 8001c78:	68f9      	ldr	r1, [r7, #12]
 8001c7a:	430b      	orrs	r3, r1
 8001c7c:	6053      	str	r3, [r2, #4]

  /*------------------------ MACWTR Configuration --------------------*/
  macregval = (((uint32_t)macconf->ProgrammableWatchdog << 8) |
 8001c7e:	683b      	ldr	r3, [r7, #0]
 8001c80:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8001c84:	021a      	lsls	r2, r3, #8
               macconf->WatchdogTimeout);
 8001c86:	683b      	ldr	r3, [r7, #0]
 8001c88:	6c5b      	ldr	r3, [r3, #68]	; 0x44
  macregval = (((uint32_t)macconf->ProgrammableWatchdog << 8) |
 8001c8a:	4313      	orrs	r3, r2
 8001c8c:	60fb      	str	r3, [r7, #12]

  /* Write to MACWTR */
  MODIFY_REG(heth->Instance->MACWTR, ETH_MACWTR_MASK, macregval);
 8001c8e:	687b      	ldr	r3, [r7, #4]
 8001c90:	681b      	ldr	r3, [r3, #0]
 8001c92:	68da      	ldr	r2, [r3, #12]
 8001c94:	4b3a      	ldr	r3, [pc, #232]	; (8001d80 <ETH_SetMACConfig+0x234>)
 8001c96:	4013      	ands	r3, r2
 8001c98:	687a      	ldr	r2, [r7, #4]
 8001c9a:	6812      	ldr	r2, [r2, #0]
 8001c9c:	68f9      	ldr	r1, [r7, #12]
 8001c9e:	430b      	orrs	r3, r1
 8001ca0:	60d3      	str	r3, [r2, #12]

  /*------------------------ MACTFCR Configuration --------------------*/
  macregval = (((uint32_t)macconf->TransmitFlowControl << 1) |
 8001ca2:	683b      	ldr	r3, [r7, #0]
 8001ca4:	f893 3054 	ldrb.w	r3, [r3, #84]	; 0x54
 8001ca8:	005a      	lsls	r2, r3, #1
               macconf->PauseLowThreshold |
 8001caa:	683b      	ldr	r3, [r7, #0]
 8001cac:	6d1b      	ldr	r3, [r3, #80]	; 0x50
  macregval = (((uint32_t)macconf->TransmitFlowControl << 1) |
 8001cae:	4313      	orrs	r3, r2
               ((uint32_t)((macconf->ZeroQuantaPause == DISABLE) ? 1U : 0U) << 7) |
 8001cb0:	683a      	ldr	r2, [r7, #0]
 8001cb2:	f892 204c 	ldrb.w	r2, [r2, #76]	; 0x4c
 8001cb6:	2a00      	cmp	r2, #0
 8001cb8:	d101      	bne.n	8001cbe <ETH_SetMACConfig+0x172>
 8001cba:	2280      	movs	r2, #128	; 0x80
 8001cbc:	e000      	b.n	8001cc0 <ETH_SetMACConfig+0x174>
 8001cbe:	2200      	movs	r2, #0
               macconf->PauseLowThreshold |
 8001cc0:	431a      	orrs	r2, r3
               (macconf->PauseTime << 16));
 8001cc2:	683b      	ldr	r3, [r7, #0]
 8001cc4:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8001cc6:	041b      	lsls	r3, r3, #16
  macregval = (((uint32_t)macconf->TransmitFlowControl << 1) |
 8001cc8:	4313      	orrs	r3, r2
 8001cca:	60fb      	str	r3, [r7, #12]

  /* Write to MACTFCR */
  MODIFY_REG(heth->Instance->MACTFCR, ETH_MACTFCR_MASK, macregval);
 8001ccc:	687b      	ldr	r3, [r7, #4]
 8001cce:	681b      	ldr	r3, [r3, #0]
 8001cd0:	6f1a      	ldr	r2, [r3, #112]	; 0x70
 8001cd2:	f64f 730d 	movw	r3, #65293	; 0xff0d
 8001cd6:	4013      	ands	r3, r2
 8001cd8:	687a      	ldr	r2, [r7, #4]
 8001cda:	6812      	ldr	r2, [r2, #0]
 8001cdc:	68f9      	ldr	r1, [r7, #12]
 8001cde:	430b      	orrs	r3, r1
 8001ce0:	6713      	str	r3, [r2, #112]	; 0x70

  /*------------------------ MACRFCR Configuration --------------------*/
  macregval = ((uint32_t)macconf->ReceiveFlowControl |
 8001ce2:	683b      	ldr	r3, [r7, #0]
 8001ce4:	f893 3056 	ldrb.w	r3, [r3, #86]	; 0x56
 8001ce8:	461a      	mov	r2, r3
               ((uint32_t)macconf->UnicastPausePacketDetect << 1));
 8001cea:	683b      	ldr	r3, [r7, #0]
 8001cec:	f893 3055 	ldrb.w	r3, [r3, #85]	; 0x55
 8001cf0:	005b      	lsls	r3, r3, #1
  macregval = ((uint32_t)macconf->ReceiveFlowControl |
 8001cf2:	4313      	orrs	r3, r2
 8001cf4:	60fb      	str	r3, [r7, #12]

  /* Write to MACRFCR */
  MODIFY_REG(heth->Instance->MACRFCR, ETH_MACRFCR_MASK, macregval);
 8001cf6:	687b      	ldr	r3, [r7, #4]
 8001cf8:	681b      	ldr	r3, [r3, #0]
 8001cfa:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8001cfe:	f023 0103 	bic.w	r1, r3, #3
 8001d02:	687b      	ldr	r3, [r7, #4]
 8001d04:	681b      	ldr	r3, [r3, #0]
 8001d06:	68fa      	ldr	r2, [r7, #12]
 8001d08:	430a      	orrs	r2, r1
 8001d0a:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90

  /*------------------------ MTLTQOMR Configuration --------------------*/
  /* Write to MTLTQOMR */
  MODIFY_REG(heth->Instance->MTLTQOMR, ETH_MTLTQOMR_MASK, macconf->TransmitQueueMode);
 8001d0e:	687b      	ldr	r3, [r7, #4]
 8001d10:	681b      	ldr	r3, [r3, #0]
 8001d12:	f8d3 3d00 	ldr.w	r3, [r3, #3328]	; 0xd00
 8001d16:	f023 0172 	bic.w	r1, r3, #114	; 0x72
 8001d1a:	683b      	ldr	r3, [r7, #0]
 8001d1c:	6d9a      	ldr	r2, [r3, #88]	; 0x58
 8001d1e:	687b      	ldr	r3, [r7, #4]
 8001d20:	681b      	ldr	r3, [r3, #0]
 8001d22:	430a      	orrs	r2, r1
 8001d24:	f8c3 2d00 	str.w	r2, [r3, #3328]	; 0xd00

  /*------------------------ MTLRQOMR Configuration --------------------*/
  macregval = (macconf->ReceiveQueueMode |
 8001d28:	683b      	ldr	r3, [r7, #0]
 8001d2a:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
               ((uint32_t)((macconf->DropTCPIPChecksumErrorPacket == DISABLE) ? 1U : 0U) << 6) |
 8001d2c:	683a      	ldr	r2, [r7, #0]
 8001d2e:	f892 2060 	ldrb.w	r2, [r2, #96]	; 0x60
 8001d32:	2a00      	cmp	r2, #0
 8001d34:	d101      	bne.n	8001d3a <ETH_SetMACConfig+0x1ee>
 8001d36:	2240      	movs	r2, #64	; 0x40
 8001d38:	e000      	b.n	8001d3c <ETH_SetMACConfig+0x1f0>
 8001d3a:	2200      	movs	r2, #0
  macregval = (macconf->ReceiveQueueMode |
 8001d3c:	431a      	orrs	r2, r3
               ((uint32_t)macconf->ForwardRxErrorPacket << 4) |
 8001d3e:	683b      	ldr	r3, [r7, #0]
 8001d40:	f893 3061 	ldrb.w	r3, [r3, #97]	; 0x61
 8001d44:	011b      	lsls	r3, r3, #4
               ((uint32_t)((macconf->DropTCPIPChecksumErrorPacket == DISABLE) ? 1U : 0U) << 6) |
 8001d46:	431a      	orrs	r2, r3
               ((uint32_t)macconf->ForwardRxUndersizedGoodPacket << 3));
 8001d48:	683b      	ldr	r3, [r7, #0]
 8001d4a:	f893 3062 	ldrb.w	r3, [r3, #98]	; 0x62
 8001d4e:	00db      	lsls	r3, r3, #3
  macregval = (macconf->ReceiveQueueMode |
 8001d50:	4313      	orrs	r3, r2
 8001d52:	60fb      	str	r3, [r7, #12]

  /* Write to MTLRQOMR */
  MODIFY_REG(heth->Instance->MTLRQOMR, ETH_MTLRQOMR_MASK, macregval);
 8001d54:	687b      	ldr	r3, [r7, #4]
 8001d56:	681b      	ldr	r3, [r3, #0]
 8001d58:	f8d3 3d30 	ldr.w	r3, [r3, #3376]	; 0xd30
 8001d5c:	f023 017b 	bic.w	r1, r3, #123	; 0x7b
 8001d60:	687b      	ldr	r3, [r7, #4]
 8001d62:	681b      	ldr	r3, [r3, #0]
 8001d64:	68fa      	ldr	r2, [r7, #12]
 8001d66:	430a      	orrs	r2, r1
 8001d68:	f8c3 2d30 	str.w	r2, [r3, #3376]	; 0xd30
}
 8001d6c:	bf00      	nop
 8001d6e:	3714      	adds	r7, #20
 8001d70:	46bd      	mov	sp, r7
 8001d72:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d76:	4770      	bx	lr
 8001d78:	00048083 	.word	0x00048083
 8001d7c:	c0f88000 	.word	0xc0f88000
 8001d80:	fffffef0 	.word	0xfffffef0

08001d84 <ETH_SetDMAConfig>:

static void ETH_SetDMAConfig(ETH_HandleTypeDef *heth,  ETH_DMAConfigTypeDef *dmaconf)
{
 8001d84:	b480      	push	{r7}
 8001d86:	b085      	sub	sp, #20
 8001d88:	af00      	add	r7, sp, #0
 8001d8a:	6078      	str	r0, [r7, #4]
 8001d8c:	6039      	str	r1, [r7, #0]
  uint32_t dmaregval;

  /*------------------------ DMAMR Configuration --------------------*/
  MODIFY_REG(heth->Instance->DMAMR, ETH_DMAMR_MASK, dmaconf->DMAArbitration);
 8001d8e:	687b      	ldr	r3, [r7, #4]
 8001d90:	681b      	ldr	r3, [r3, #0]
 8001d92:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8001d96:	681a      	ldr	r2, [r3, #0]
 8001d98:	4b38      	ldr	r3, [pc, #224]	; (8001e7c <ETH_SetDMAConfig+0xf8>)
 8001d9a:	4013      	ands	r3, r2
 8001d9c:	683a      	ldr	r2, [r7, #0]
 8001d9e:	6811      	ldr	r1, [r2, #0]
 8001da0:	687a      	ldr	r2, [r7, #4]
 8001da2:	6812      	ldr	r2, [r2, #0]
 8001da4:	430b      	orrs	r3, r1
 8001da6:	f502 5280 	add.w	r2, r2, #4096	; 0x1000
 8001daa:	6013      	str	r3, [r2, #0]

  /*------------------------ DMASBMR Configuration --------------------*/
  dmaregval = (((uint32_t)dmaconf->AddressAlignedBeats << 12) |
 8001dac:	683b      	ldr	r3, [r7, #0]
 8001dae:	791b      	ldrb	r3, [r3, #4]
 8001db0:	031a      	lsls	r2, r3, #12
               dmaconf->BurstMode |
 8001db2:	683b      	ldr	r3, [r7, #0]
 8001db4:	689b      	ldr	r3, [r3, #8]
  dmaregval = (((uint32_t)dmaconf->AddressAlignedBeats << 12) |
 8001db6:	431a      	orrs	r2, r3
               ((uint32_t)dmaconf->RebuildINCRxBurst << 15));
 8001db8:	683b      	ldr	r3, [r7, #0]
 8001dba:	7b1b      	ldrb	r3, [r3, #12]
 8001dbc:	03db      	lsls	r3, r3, #15
  dmaregval = (((uint32_t)dmaconf->AddressAlignedBeats << 12) |
 8001dbe:	4313      	orrs	r3, r2
 8001dc0:	60fb      	str	r3, [r7, #12]

  MODIFY_REG(heth->Instance->DMASBMR, ETH_DMASBMR_MASK, dmaregval);
 8001dc2:	687b      	ldr	r3, [r7, #4]
 8001dc4:	681b      	ldr	r3, [r3, #0]
 8001dc6:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8001dca:	685a      	ldr	r2, [r3, #4]
 8001dcc:	4b2c      	ldr	r3, [pc, #176]	; (8001e80 <ETH_SetDMAConfig+0xfc>)
 8001dce:	4013      	ands	r3, r2
 8001dd0:	687a      	ldr	r2, [r7, #4]
 8001dd2:	6812      	ldr	r2, [r2, #0]
 8001dd4:	68f9      	ldr	r1, [r7, #12]
 8001dd6:	430b      	orrs	r3, r1
 8001dd8:	f502 5280 	add.w	r2, r2, #4096	; 0x1000
 8001ddc:	6053      	str	r3, [r2, #4]

  /*------------------------ DMACCR Configuration --------------------*/
  dmaregval = (((uint32_t)dmaconf->PBLx8Mode << 16) |
 8001dde:	683b      	ldr	r3, [r7, #0]
 8001de0:	7b5b      	ldrb	r3, [r3, #13]
 8001de2:	041a      	lsls	r2, r3, #16
               dmaconf->MaximumSegmentSize);
 8001de4:	683b      	ldr	r3, [r7, #0]
 8001de6:	6a1b      	ldr	r3, [r3, #32]
  dmaregval = (((uint32_t)dmaconf->PBLx8Mode << 16) |
 8001de8:	4313      	orrs	r3, r2
 8001dea:	60fb      	str	r3, [r7, #12]

  MODIFY_REG(heth->Instance->DMACCR, ETH_DMACCR_MASK, dmaregval);
 8001dec:	687b      	ldr	r3, [r7, #4]
 8001dee:	681b      	ldr	r3, [r3, #0]
 8001df0:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8001df4:	f8d3 2100 	ldr.w	r2, [r3, #256]	; 0x100
 8001df8:	4b22      	ldr	r3, [pc, #136]	; (8001e84 <ETH_SetDMAConfig+0x100>)
 8001dfa:	4013      	ands	r3, r2
 8001dfc:	687a      	ldr	r2, [r7, #4]
 8001dfe:	6812      	ldr	r2, [r2, #0]
 8001e00:	68f9      	ldr	r1, [r7, #12]
 8001e02:	430b      	orrs	r3, r1
 8001e04:	f502 5280 	add.w	r2, r2, #4096	; 0x1000
 8001e08:	f8c2 3100 	str.w	r3, [r2, #256]	; 0x100

  /*------------------------ DMACTCR Configuration --------------------*/
  dmaregval = (dmaconf->TxDMABurstLength |
 8001e0c:	683b      	ldr	r3, [r7, #0]
 8001e0e:	691a      	ldr	r2, [r3, #16]
               ((uint32_t)dmaconf->SecondPacketOperate << 4) |
 8001e10:	683b      	ldr	r3, [r7, #0]
 8001e12:	7d1b      	ldrb	r3, [r3, #20]
 8001e14:	011b      	lsls	r3, r3, #4
  dmaregval = (dmaconf->TxDMABurstLength |
 8001e16:	431a      	orrs	r2, r3
               ((uint32_t)dmaconf->TCPSegmentation << 12));
 8001e18:	683b      	ldr	r3, [r7, #0]
 8001e1a:	7f5b      	ldrb	r3, [r3, #29]
 8001e1c:	031b      	lsls	r3, r3, #12
  dmaregval = (dmaconf->TxDMABurstLength |
 8001e1e:	4313      	orrs	r3, r2
 8001e20:	60fb      	str	r3, [r7, #12]

  MODIFY_REG(heth->Instance->DMACTCR, ETH_DMACTCR_MASK, dmaregval);
 8001e22:	687b      	ldr	r3, [r7, #4]
 8001e24:	681b      	ldr	r3, [r3, #0]
 8001e26:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8001e2a:	f8d3 2104 	ldr.w	r2, [r3, #260]	; 0x104
 8001e2e:	4b16      	ldr	r3, [pc, #88]	; (8001e88 <ETH_SetDMAConfig+0x104>)
 8001e30:	4013      	ands	r3, r2
 8001e32:	687a      	ldr	r2, [r7, #4]
 8001e34:	6812      	ldr	r2, [r2, #0]
 8001e36:	68f9      	ldr	r1, [r7, #12]
 8001e38:	430b      	orrs	r3, r1
 8001e3a:	f502 5280 	add.w	r2, r2, #4096	; 0x1000
 8001e3e:	f8c2 3104 	str.w	r3, [r2, #260]	; 0x104

  /*------------------------ DMACRCR Configuration --------------------*/
  dmaregval = (((uint32_t)dmaconf->FlushRxPacket  << 31) |
 8001e42:	683b      	ldr	r3, [r7, #0]
 8001e44:	7f1b      	ldrb	r3, [r3, #28]
 8001e46:	07da      	lsls	r2, r3, #31
               dmaconf->RxDMABurstLength);
 8001e48:	683b      	ldr	r3, [r7, #0]
 8001e4a:	699b      	ldr	r3, [r3, #24]
  dmaregval = (((uint32_t)dmaconf->FlushRxPacket  << 31) |
 8001e4c:	4313      	orrs	r3, r2
 8001e4e:	60fb      	str	r3, [r7, #12]

  /* Write to DMACRCR */
  MODIFY_REG(heth->Instance->DMACRCR, ETH_DMACRCR_MASK, dmaregval);
 8001e50:	687b      	ldr	r3, [r7, #4]
 8001e52:	681b      	ldr	r3, [r3, #0]
 8001e54:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8001e58:	f8d3 2108 	ldr.w	r2, [r3, #264]	; 0x108
 8001e5c:	4b0b      	ldr	r3, [pc, #44]	; (8001e8c <ETH_SetDMAConfig+0x108>)
 8001e5e:	4013      	ands	r3, r2
 8001e60:	687a      	ldr	r2, [r7, #4]
 8001e62:	6812      	ldr	r2, [r2, #0]
 8001e64:	68f9      	ldr	r1, [r7, #12]
 8001e66:	430b      	orrs	r3, r1
 8001e68:	f502 5280 	add.w	r2, r2, #4096	; 0x1000
 8001e6c:	f8c2 3108 	str.w	r3, [r2, #264]	; 0x108
}
 8001e70:	bf00      	nop
 8001e72:	3714      	adds	r7, #20
 8001e74:	46bd      	mov	sp, r7
 8001e76:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e7a:	4770      	bx	lr
 8001e7c:	ffff87fd 	.word	0xffff87fd
 8001e80:	ffff2ffe 	.word	0xffff2ffe
 8001e84:	fffec000 	.word	0xfffec000
 8001e88:	ffc0efef 	.word	0xffc0efef
 8001e8c:	7fc0ffff 	.word	0x7fc0ffff

08001e90 <ETH_MACDMAConfig>:
  * @param  heth: pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval HAL status
  */
static void ETH_MACDMAConfig(ETH_HandleTypeDef *heth)
{
 8001e90:	b580      	push	{r7, lr}
 8001e92:	b0a4      	sub	sp, #144	; 0x90
 8001e94:	af00      	add	r7, sp, #0
 8001e96:	6078      	str	r0, [r7, #4]
  ETH_MACConfigTypeDef macDefaultConf;
  ETH_DMAConfigTypeDef dmaDefaultConf;

  /*--------------- ETHERNET MAC registers default Configuration --------------*/
  macDefaultConf.AutomaticPadCRCStrip = ENABLE;
 8001e98:	2301      	movs	r3, #1
 8001e9a:	f887 303b 	strb.w	r3, [r7, #59]	; 0x3b
  macDefaultConf.BackOffLimit = ETH_BACKOFFLIMIT_10;
 8001e9e:	2300      	movs	r3, #0
 8001ea0:	653b      	str	r3, [r7, #80]	; 0x50
  macDefaultConf.CarrierSenseBeforeTransmit = DISABLE;
 8001ea2:	2300      	movs	r3, #0
 8001ea4:	f887 3049 	strb.w	r3, [r7, #73]	; 0x49
  macDefaultConf.CarrierSenseDuringTransmit = DISABLE;
 8001ea8:	2300      	movs	r3, #0
 8001eaa:	f887 304b 	strb.w	r3, [r7, #75]	; 0x4b
  macDefaultConf.ChecksumOffload = ENABLE;
 8001eae:	2301      	movs	r3, #1
 8001eb0:	f887 3030 	strb.w	r3, [r7, #48]	; 0x30
  macDefaultConf.CRCCheckingRxPackets = ENABLE;
 8001eb4:	2301      	movs	r3, #1
 8001eb6:	f887 305e 	strb.w	r3, [r7, #94]	; 0x5e
  macDefaultConf.CRCStripTypePacket = ENABLE;
 8001eba:	2301      	movs	r3, #1
 8001ebc:	f887 303a 	strb.w	r3, [r7, #58]	; 0x3a
  macDefaultConf.DeferralCheck = DISABLE;
 8001ec0:	2300      	movs	r3, #0
 8001ec2:	f887 3054 	strb.w	r3, [r7, #84]	; 0x54
  macDefaultConf.DropTCPIPChecksumErrorPacket = ENABLE;
 8001ec6:	2301      	movs	r3, #1
 8001ec8:	f887 308c 	strb.w	r3, [r7, #140]	; 0x8c
  macDefaultConf.DuplexMode = ETH_FULLDUPLEX_MODE;
 8001ecc:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8001ed0:	647b      	str	r3, [r7, #68]	; 0x44
  macDefaultConf.ExtendedInterPacketGap = DISABLE;
 8001ed2:	2300      	movs	r3, #0
 8001ed4:	f887 3064 	strb.w	r3, [r7, #100]	; 0x64
  macDefaultConf.ExtendedInterPacketGapVal = 0x0;
 8001ed8:	2300      	movs	r3, #0
 8001eda:	66bb      	str	r3, [r7, #104]	; 0x68
  macDefaultConf.ForwardRxErrorPacket = DISABLE;
 8001edc:	2300      	movs	r3, #0
 8001ede:	f887 308d 	strb.w	r3, [r7, #141]	; 0x8d
  macDefaultConf.ForwardRxUndersizedGoodPacket = DISABLE;
 8001ee2:	2300      	movs	r3, #0
 8001ee4:	f887 308e 	strb.w	r3, [r7, #142]	; 0x8e
  macDefaultConf.GiantPacketSizeLimit = 0x618;
 8001ee8:	f44f 63c3 	mov.w	r3, #1560	; 0x618
 8001eec:	663b      	str	r3, [r7, #96]	; 0x60
  macDefaultConf.GiantPacketSizeLimitControl = DISABLE;
 8001eee:	2300      	movs	r3, #0
 8001ef0:	f887 3038 	strb.w	r3, [r7, #56]	; 0x38
  macDefaultConf.InterPacketGapVal = ETH_INTERPACKETGAP_96BIT;
 8001ef4:	2300      	movs	r3, #0
 8001ef6:	637b      	str	r3, [r7, #52]	; 0x34
  macDefaultConf.Jabber = ENABLE;
 8001ef8:	2301      	movs	r3, #1
 8001efa:	f887 303d 	strb.w	r3, [r7, #61]	; 0x3d
  macDefaultConf.JumboPacket = DISABLE;
 8001efe:	2300      	movs	r3, #0
 8001f00:	f887 303e 	strb.w	r3, [r7, #62]	; 0x3e
  macDefaultConf.LoopbackMode = DISABLE;
 8001f04:	2300      	movs	r3, #0
 8001f06:	f887 3048 	strb.w	r3, [r7, #72]	; 0x48
  macDefaultConf.PauseLowThreshold = ETH_PAUSELOWTHRESHOLD_MINUS_4;
 8001f0a:	2300      	movs	r3, #0
 8001f0c:	67fb      	str	r3, [r7, #124]	; 0x7c
  macDefaultConf.PauseTime = 0x0;
 8001f0e:	2300      	movs	r3, #0
 8001f10:	677b      	str	r3, [r7, #116]	; 0x74
  macDefaultConf.PreambleLength = ETH_PREAMBLELENGTH_7;
 8001f12:	2300      	movs	r3, #0
 8001f14:	65bb      	str	r3, [r7, #88]	; 0x58
  macDefaultConf.ProgrammableWatchdog = DISABLE;
 8001f16:	2300      	movs	r3, #0
 8001f18:	f887 306c 	strb.w	r3, [r7, #108]	; 0x6c
  macDefaultConf.ReceiveFlowControl = DISABLE;
 8001f1c:	2300      	movs	r3, #0
 8001f1e:	f887 3082 	strb.w	r3, [r7, #130]	; 0x82
  macDefaultConf.ReceiveOwn = ENABLE;
 8001f22:	2301      	movs	r3, #1
 8001f24:	f887 304a 	strb.w	r3, [r7, #74]	; 0x4a
  macDefaultConf.ReceiveQueueMode = ETH_RECEIVESTOREFORWARD;
 8001f28:	2320      	movs	r3, #32
 8001f2a:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
  macDefaultConf.RetryTransmission = ENABLE;
 8001f2e:	2301      	movs	r3, #1
 8001f30:	f887 304c 	strb.w	r3, [r7, #76]	; 0x4c
  macDefaultConf.SlowProtocolDetect = DISABLE;
 8001f34:	2300      	movs	r3, #0
 8001f36:	f887 305d 	strb.w	r3, [r7, #93]	; 0x5d
  macDefaultConf.SourceAddrControl = ETH_SOURCEADDRESS_REPLACE_ADDR0;
 8001f3a:	f04f 5340 	mov.w	r3, #805306368	; 0x30000000
 8001f3e:	62fb      	str	r3, [r7, #44]	; 0x2c
  macDefaultConf.Speed = ETH_SPEED_100M;
 8001f40:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 8001f44:	643b      	str	r3, [r7, #64]	; 0x40
  macDefaultConf.Support2KPacket = DISABLE;
 8001f46:	2300      	movs	r3, #0
 8001f48:	f887 3039 	strb.w	r3, [r7, #57]	; 0x39
  macDefaultConf.TransmitQueueMode = ETH_TRANSMITSTOREFORWARD;
 8001f4c:	2302      	movs	r3, #2
 8001f4e:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
  macDefaultConf.TransmitFlowControl = DISABLE;
 8001f52:	2300      	movs	r3, #0
 8001f54:	f887 3080 	strb.w	r3, [r7, #128]	; 0x80
  macDefaultConf.UnicastPausePacketDetect = DISABLE;
 8001f58:	2300      	movs	r3, #0
 8001f5a:	f887 3081 	strb.w	r3, [r7, #129]	; 0x81
  macDefaultConf.UnicastSlowProtocolPacketDetect = DISABLE;
 8001f5e:	2300      	movs	r3, #0
 8001f60:	f887 305c 	strb.w	r3, [r7, #92]	; 0x5c
  macDefaultConf.Watchdog = ENABLE;
 8001f64:	2301      	movs	r3, #1
 8001f66:	f887 303c 	strb.w	r3, [r7, #60]	; 0x3c
  macDefaultConf.WatchdogTimeout =  ETH_MACWTR_WTO_2KB;
 8001f6a:	2300      	movs	r3, #0
 8001f6c:	673b      	str	r3, [r7, #112]	; 0x70
  macDefaultConf.ZeroQuantaPause = ENABLE;
 8001f6e:	2301      	movs	r3, #1
 8001f70:	f887 3078 	strb.w	r3, [r7, #120]	; 0x78

  /* MAC default configuration */
  ETH_SetMACConfig(heth, &macDefaultConf);
 8001f74:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8001f78:	4619      	mov	r1, r3
 8001f7a:	6878      	ldr	r0, [r7, #4]
 8001f7c:	f7ff fde6 	bl	8001b4c <ETH_SetMACConfig>

  /*--------------- ETHERNET DMA registers default Configuration --------------*/
  dmaDefaultConf.AddressAlignedBeats = ENABLE;
 8001f80:	2301      	movs	r3, #1
 8001f82:	733b      	strb	r3, [r7, #12]
  dmaDefaultConf.BurstMode = ETH_BURSTLENGTH_FIXED;
 8001f84:	2301      	movs	r3, #1
 8001f86:	613b      	str	r3, [r7, #16]
  dmaDefaultConf.DMAArbitration = ETH_DMAARBITRATION_RX1_TX1;
 8001f88:	2300      	movs	r3, #0
 8001f8a:	60bb      	str	r3, [r7, #8]
  dmaDefaultConf.FlushRxPacket = DISABLE;
 8001f8c:	2300      	movs	r3, #0
 8001f8e:	f887 3024 	strb.w	r3, [r7, #36]	; 0x24
  dmaDefaultConf.PBLx8Mode = DISABLE;
 8001f92:	2300      	movs	r3, #0
 8001f94:	757b      	strb	r3, [r7, #21]
  dmaDefaultConf.RebuildINCRxBurst = DISABLE;
 8001f96:	2300      	movs	r3, #0
 8001f98:	753b      	strb	r3, [r7, #20]
  dmaDefaultConf.RxDMABurstLength = ETH_RXDMABURSTLENGTH_32BEAT;
 8001f9a:	f44f 1300 	mov.w	r3, #2097152	; 0x200000
 8001f9e:	623b      	str	r3, [r7, #32]
  dmaDefaultConf.SecondPacketOperate = DISABLE;
 8001fa0:	2300      	movs	r3, #0
 8001fa2:	773b      	strb	r3, [r7, #28]
  dmaDefaultConf.TxDMABurstLength = ETH_TXDMABURSTLENGTH_32BEAT;
 8001fa4:	f44f 1300 	mov.w	r3, #2097152	; 0x200000
 8001fa8:	61bb      	str	r3, [r7, #24]
  dmaDefaultConf.TCPSegmentation = DISABLE;
 8001faa:	2300      	movs	r3, #0
 8001fac:	f887 3025 	strb.w	r3, [r7, #37]	; 0x25
  dmaDefaultConf.MaximumSegmentSize = ETH_SEGMENT_SIZE_DEFAULT;
 8001fb0:	f44f 7306 	mov.w	r3, #536	; 0x218
 8001fb4:	62bb      	str	r3, [r7, #40]	; 0x28

  /* DMA default configuration */
  ETH_SetDMAConfig(heth, &dmaDefaultConf);
 8001fb6:	f107 0308 	add.w	r3, r7, #8
 8001fba:	4619      	mov	r1, r3
 8001fbc:	6878      	ldr	r0, [r7, #4]
 8001fbe:	f7ff fee1 	bl	8001d84 <ETH_SetDMAConfig>
}
 8001fc2:	bf00      	nop
 8001fc4:	3790      	adds	r7, #144	; 0x90
 8001fc6:	46bd      	mov	sp, r7
 8001fc8:	bd80      	pop	{r7, pc}

08001fca <ETH_DMATxDescListInit>:
  * @param  heth: pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval None
  */
static void ETH_DMATxDescListInit(ETH_HandleTypeDef *heth)
{
 8001fca:	b480      	push	{r7}
 8001fcc:	b085      	sub	sp, #20
 8001fce:	af00      	add	r7, sp, #0
 8001fd0:	6078      	str	r0, [r7, #4]
  ETH_DMADescTypeDef *dmatxdesc;
  uint32_t i;

  /* Fill each DMATxDesc descriptor with the right values */
  for (i = 0; i < (uint32_t)ETH_TX_DESC_CNT; i++)
 8001fd2:	2300      	movs	r3, #0
 8001fd4:	60fb      	str	r3, [r7, #12]
 8001fd6:	e01d      	b.n	8002014 <ETH_DMATxDescListInit+0x4a>
  {
    dmatxdesc = heth->Init.TxDesc + i;
 8001fd8:	687b      	ldr	r3, [r7, #4]
 8001fda:	68d9      	ldr	r1, [r3, #12]
 8001fdc:	68fa      	ldr	r2, [r7, #12]
 8001fde:	4613      	mov	r3, r2
 8001fe0:	005b      	lsls	r3, r3, #1
 8001fe2:	4413      	add	r3, r2
 8001fe4:	00db      	lsls	r3, r3, #3
 8001fe6:	440b      	add	r3, r1
 8001fe8:	60bb      	str	r3, [r7, #8]

    WRITE_REG(dmatxdesc->DESC0, 0x0);
 8001fea:	68bb      	ldr	r3, [r7, #8]
 8001fec:	2200      	movs	r2, #0
 8001fee:	601a      	str	r2, [r3, #0]
    WRITE_REG(dmatxdesc->DESC1, 0x0);
 8001ff0:	68bb      	ldr	r3, [r7, #8]
 8001ff2:	2200      	movs	r2, #0
 8001ff4:	605a      	str	r2, [r3, #4]
    WRITE_REG(dmatxdesc->DESC2, 0x0);
 8001ff6:	68bb      	ldr	r3, [r7, #8]
 8001ff8:	2200      	movs	r2, #0
 8001ffa:	609a      	str	r2, [r3, #8]
    WRITE_REG(dmatxdesc->DESC3, 0x0);
 8001ffc:	68bb      	ldr	r3, [r7, #8]
 8001ffe:	2200      	movs	r2, #0
 8002000:	60da      	str	r2, [r3, #12]

    WRITE_REG(heth->TxDescList.TxDesc[i], (uint32_t)dmatxdesc);
 8002002:	68b9      	ldr	r1, [r7, #8]
 8002004:	687b      	ldr	r3, [r7, #4]
 8002006:	68fa      	ldr	r2, [r7, #12]
 8002008:	3206      	adds	r2, #6
 800200a:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
  for (i = 0; i < (uint32_t)ETH_TX_DESC_CNT; i++)
 800200e:	68fb      	ldr	r3, [r7, #12]
 8002010:	3301      	adds	r3, #1
 8002012:	60fb      	str	r3, [r7, #12]
 8002014:	68fb      	ldr	r3, [r7, #12]
 8002016:	2b03      	cmp	r3, #3
 8002018:	d9de      	bls.n	8001fd8 <ETH_DMATxDescListInit+0xe>

  }

  heth->TxDescList.CurTxDesc = 0;
 800201a:	687b      	ldr	r3, [r7, #4]
 800201c:	2200      	movs	r2, #0
 800201e:	629a      	str	r2, [r3, #40]	; 0x28

  /* Set Transmit Descriptor Ring Length */
  WRITE_REG(heth->Instance->DMACTDRLR, (ETH_TX_DESC_CNT - 1U));
 8002020:	687b      	ldr	r3, [r7, #4]
 8002022:	681b      	ldr	r3, [r3, #0]
 8002024:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8002028:	461a      	mov	r2, r3
 800202a:	2303      	movs	r3, #3
 800202c:	f8c2 312c 	str.w	r3, [r2, #300]	; 0x12c

  /* Set Transmit Descriptor List Address */
  WRITE_REG(heth->Instance->DMACTDLAR, (uint32_t) heth->Init.TxDesc);
 8002030:	687b      	ldr	r3, [r7, #4]
 8002032:	68da      	ldr	r2, [r3, #12]
 8002034:	687b      	ldr	r3, [r7, #4]
 8002036:	681b      	ldr	r3, [r3, #0]
 8002038:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800203c:	f8c3 2114 	str.w	r2, [r3, #276]	; 0x114

  /* Set Transmit Descriptor Tail pointer */
  WRITE_REG(heth->Instance->DMACTDTPR, (uint32_t) heth->Init.TxDesc);
 8002040:	687b      	ldr	r3, [r7, #4]
 8002042:	68da      	ldr	r2, [r3, #12]
 8002044:	687b      	ldr	r3, [r7, #4]
 8002046:	681b      	ldr	r3, [r3, #0]
 8002048:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800204c:	f8c3 2120 	str.w	r2, [r3, #288]	; 0x120
}
 8002050:	bf00      	nop
 8002052:	3714      	adds	r7, #20
 8002054:	46bd      	mov	sp, r7
 8002056:	f85d 7b04 	ldr.w	r7, [sp], #4
 800205a:	4770      	bx	lr

0800205c <ETH_DMARxDescListInit>:
  * @param  heth: pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval None
  */
static void ETH_DMARxDescListInit(ETH_HandleTypeDef *heth)
{
 800205c:	b480      	push	{r7}
 800205e:	b085      	sub	sp, #20
 8002060:	af00      	add	r7, sp, #0
 8002062:	6078      	str	r0, [r7, #4]
  ETH_DMADescTypeDef *dmarxdesc;
  uint32_t i;

  for (i = 0; i < (uint32_t)ETH_RX_DESC_CNT; i++)
 8002064:	2300      	movs	r3, #0
 8002066:	60fb      	str	r3, [r7, #12]
 8002068:	e023      	b.n	80020b2 <ETH_DMARxDescListInit+0x56>
  {
    dmarxdesc =  heth->Init.RxDesc + i;
 800206a:	687b      	ldr	r3, [r7, #4]
 800206c:	6919      	ldr	r1, [r3, #16]
 800206e:	68fa      	ldr	r2, [r7, #12]
 8002070:	4613      	mov	r3, r2
 8002072:	005b      	lsls	r3, r3, #1
 8002074:	4413      	add	r3, r2
 8002076:	00db      	lsls	r3, r3, #3
 8002078:	440b      	add	r3, r1
 800207a:	60bb      	str	r3, [r7, #8]

    WRITE_REG(dmarxdesc->DESC0, 0x0);
 800207c:	68bb      	ldr	r3, [r7, #8]
 800207e:	2200      	movs	r2, #0
 8002080:	601a      	str	r2, [r3, #0]
    WRITE_REG(dmarxdesc->DESC1, 0x0);
 8002082:	68bb      	ldr	r3, [r7, #8]
 8002084:	2200      	movs	r2, #0
 8002086:	605a      	str	r2, [r3, #4]
    WRITE_REG(dmarxdesc->DESC2, 0x0);
 8002088:	68bb      	ldr	r3, [r7, #8]
 800208a:	2200      	movs	r2, #0
 800208c:	609a      	str	r2, [r3, #8]
    WRITE_REG(dmarxdesc->DESC3, 0x0);
 800208e:	68bb      	ldr	r3, [r7, #8]
 8002090:	2200      	movs	r2, #0
 8002092:	60da      	str	r2, [r3, #12]
    WRITE_REG(dmarxdesc->BackupAddr0, 0x0);
 8002094:	68bb      	ldr	r3, [r7, #8]
 8002096:	2200      	movs	r2, #0
 8002098:	611a      	str	r2, [r3, #16]
    WRITE_REG(dmarxdesc->BackupAddr1, 0x0);
 800209a:	68bb      	ldr	r3, [r7, #8]
 800209c:	2200      	movs	r2, #0
 800209e:	615a      	str	r2, [r3, #20]


    /* Set Rx descritors addresses */
    WRITE_REG(heth->RxDescList.RxDesc[i], (uint32_t)dmarxdesc);
 80020a0:	68b9      	ldr	r1, [r7, #8]
 80020a2:	687b      	ldr	r3, [r7, #4]
 80020a4:	68fa      	ldr	r2, [r7, #12]
 80020a6:	3212      	adds	r2, #18
 80020a8:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
  for (i = 0; i < (uint32_t)ETH_RX_DESC_CNT; i++)
 80020ac:	68fb      	ldr	r3, [r7, #12]
 80020ae:	3301      	adds	r3, #1
 80020b0:	60fb      	str	r3, [r7, #12]
 80020b2:	68fb      	ldr	r3, [r7, #12]
 80020b4:	2b03      	cmp	r3, #3
 80020b6:	d9d8      	bls.n	800206a <ETH_DMARxDescListInit+0xe>

  }

  WRITE_REG(heth->RxDescList.RxDescIdx, 0);
 80020b8:	687b      	ldr	r3, [r7, #4]
 80020ba:	2200      	movs	r2, #0
 80020bc:	65da      	str	r2, [r3, #92]	; 0x5c
  WRITE_REG(heth->RxDescList.RxDescCnt, 0);
 80020be:	687b      	ldr	r3, [r7, #4]
 80020c0:	2200      	movs	r2, #0
 80020c2:	661a      	str	r2, [r3, #96]	; 0x60
  WRITE_REG(heth->RxDescList.RxBuildDescIdx, 0);
 80020c4:	687b      	ldr	r3, [r7, #4]
 80020c6:	2200      	movs	r2, #0
 80020c8:	669a      	str	r2, [r3, #104]	; 0x68
  WRITE_REG(heth->RxDescList.RxBuildDescCnt, 0);
 80020ca:	687b      	ldr	r3, [r7, #4]
 80020cc:	2200      	movs	r2, #0
 80020ce:	66da      	str	r2, [r3, #108]	; 0x6c
  WRITE_REG(heth->RxDescList.ItMode, 0);
 80020d0:	687b      	ldr	r3, [r7, #4]
 80020d2:	2200      	movs	r2, #0
 80020d4:	659a      	str	r2, [r3, #88]	; 0x58

  /* Set Receive Descriptor Ring Length */
  WRITE_REG(heth->Instance->DMACRDRLR, ((uint32_t)(ETH_RX_DESC_CNT - 1U)));
 80020d6:	687b      	ldr	r3, [r7, #4]
 80020d8:	681b      	ldr	r3, [r3, #0]
 80020da:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80020de:	461a      	mov	r2, r3
 80020e0:	2303      	movs	r3, #3
 80020e2:	f8c2 3130 	str.w	r3, [r2, #304]	; 0x130

  /* Set Receive Descriptor List Address */
  WRITE_REG(heth->Instance->DMACRDLAR, (uint32_t) heth->Init.RxDesc);
 80020e6:	687b      	ldr	r3, [r7, #4]
 80020e8:	691a      	ldr	r2, [r3, #16]
 80020ea:	687b      	ldr	r3, [r7, #4]
 80020ec:	681b      	ldr	r3, [r3, #0]
 80020ee:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80020f2:	f8c3 211c 	str.w	r2, [r3, #284]	; 0x11c

  /* Set Receive Descriptor Tail pointer Address */
  WRITE_REG(heth->Instance->DMACRDTPR, ((uint32_t)(heth->Init.RxDesc + (uint32_t)(ETH_RX_DESC_CNT - 1U))));
 80020f6:	687b      	ldr	r3, [r7, #4]
 80020f8:	691b      	ldr	r3, [r3, #16]
 80020fa:	f103 0248 	add.w	r2, r3, #72	; 0x48
 80020fe:	687b      	ldr	r3, [r7, #4]
 8002100:	681b      	ldr	r3, [r3, #0]
 8002102:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8002106:	f8c3 2128 	str.w	r2, [r3, #296]	; 0x128
}
 800210a:	bf00      	nop
 800210c:	3714      	adds	r7, #20
 800210e:	46bd      	mov	sp, r7
 8002110:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002114:	4770      	bx	lr
	...

08002118 <HAL_GPIO_Init>:
  * @param  GPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8002118:	b480      	push	{r7}
 800211a:	b089      	sub	sp, #36	; 0x24
 800211c:	af00      	add	r7, sp, #0
 800211e:	6078      	str	r0, [r7, #4]
 8002120:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00U;
 8002122:	2300      	movs	r3, #0
 8002124:	61fb      	str	r3, [r7, #28]
  EXTI_Core_TypeDef *EXTI_CurrentCPU;

#if defined(DUAL_CORE) && defined(CORE_CM4)
  EXTI_CurrentCPU = EXTI_D2; /* EXTI for CM4 CPU */
#else
  EXTI_CurrentCPU = EXTI_D1; /* EXTI for CM7 CPU */
 8002126:	4b86      	ldr	r3, [pc, #536]	; (8002340 <HAL_GPIO_Init+0x228>)
 8002128:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00U)
 800212a:	e18c      	b.n	8002446 <HAL_GPIO_Init+0x32e>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1UL << position);
 800212c:	683b      	ldr	r3, [r7, #0]
 800212e:	681a      	ldr	r2, [r3, #0]
 8002130:	2101      	movs	r1, #1
 8002132:	69fb      	ldr	r3, [r7, #28]
 8002134:	fa01 f303 	lsl.w	r3, r1, r3
 8002138:	4013      	ands	r3, r2
 800213a:	613b      	str	r3, [r7, #16]

    if (iocurrent != 0x00U)
 800213c:	693b      	ldr	r3, [r7, #16]
 800213e:	2b00      	cmp	r3, #0
 8002140:	f000 817e 	beq.w	8002440 <HAL_GPIO_Init+0x328>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if (((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 8002144:	683b      	ldr	r3, [r7, #0]
 8002146:	685b      	ldr	r3, [r3, #4]
 8002148:	f003 0303 	and.w	r3, r3, #3
 800214c:	2b01      	cmp	r3, #1
 800214e:	d005      	beq.n	800215c <HAL_GPIO_Init+0x44>
 8002150:	683b      	ldr	r3, [r7, #0]
 8002152:	685b      	ldr	r3, [r3, #4]
 8002154:	f003 0303 	and.w	r3, r3, #3
 8002158:	2b02      	cmp	r3, #2
 800215a:	d130      	bne.n	80021be <HAL_GPIO_Init+0xa6>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));

        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 800215c:	687b      	ldr	r3, [r7, #4]
 800215e:	689b      	ldr	r3, [r3, #8]
 8002160:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2U));
 8002162:	69fb      	ldr	r3, [r7, #28]
 8002164:	005b      	lsls	r3, r3, #1
 8002166:	2203      	movs	r2, #3
 8002168:	fa02 f303 	lsl.w	r3, r2, r3
 800216c:	43db      	mvns	r3, r3
 800216e:	69ba      	ldr	r2, [r7, #24]
 8002170:	4013      	ands	r3, r2
 8002172:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8002174:	683b      	ldr	r3, [r7, #0]
 8002176:	68da      	ldr	r2, [r3, #12]
 8002178:	69fb      	ldr	r3, [r7, #28]
 800217a:	005b      	lsls	r3, r3, #1
 800217c:	fa02 f303 	lsl.w	r3, r2, r3
 8002180:	69ba      	ldr	r2, [r7, #24]
 8002182:	4313      	orrs	r3, r2
 8002184:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8002186:	687b      	ldr	r3, [r7, #4]
 8002188:	69ba      	ldr	r2, [r7, #24]
 800218a:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 800218c:	687b      	ldr	r3, [r7, #4]
 800218e:	685b      	ldr	r3, [r3, #4]
 8002190:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 8002192:	2201      	movs	r2, #1
 8002194:	69fb      	ldr	r3, [r7, #28]
 8002196:	fa02 f303 	lsl.w	r3, r2, r3
 800219a:	43db      	mvns	r3, r3
 800219c:	69ba      	ldr	r2, [r7, #24]
 800219e:	4013      	ands	r3, r2
 80021a0:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 80021a2:	683b      	ldr	r3, [r7, #0]
 80021a4:	685b      	ldr	r3, [r3, #4]
 80021a6:	091b      	lsrs	r3, r3, #4
 80021a8:	f003 0201 	and.w	r2, r3, #1
 80021ac:	69fb      	ldr	r3, [r7, #28]
 80021ae:	fa02 f303 	lsl.w	r3, r2, r3
 80021b2:	69ba      	ldr	r2, [r7, #24]
 80021b4:	4313      	orrs	r3, r2
 80021b6:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 80021b8:	687b      	ldr	r3, [r7, #4]
 80021ba:	69ba      	ldr	r2, [r7, #24]
 80021bc:	605a      	str	r2, [r3, #4]
      }

      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 80021be:	683b      	ldr	r3, [r7, #0]
 80021c0:	685b      	ldr	r3, [r3, #4]
 80021c2:	f003 0303 	and.w	r3, r3, #3
 80021c6:	2b03      	cmp	r3, #3
 80021c8:	d017      	beq.n	80021fa <HAL_GPIO_Init+0xe2>
      {
       /* Check the Pull parameter */
       assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

      /* Activate the Pull-up or Pull down resistor for the current IO */
      temp = GPIOx->PUPDR;
 80021ca:	687b      	ldr	r3, [r7, #4]
 80021cc:	68db      	ldr	r3, [r3, #12]
 80021ce:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 80021d0:	69fb      	ldr	r3, [r7, #28]
 80021d2:	005b      	lsls	r3, r3, #1
 80021d4:	2203      	movs	r2, #3
 80021d6:	fa02 f303 	lsl.w	r3, r2, r3
 80021da:	43db      	mvns	r3, r3
 80021dc:	69ba      	ldr	r2, [r7, #24]
 80021de:	4013      	ands	r3, r2
 80021e0:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Pull) << (position * 2U));
 80021e2:	683b      	ldr	r3, [r7, #0]
 80021e4:	689a      	ldr	r2, [r3, #8]
 80021e6:	69fb      	ldr	r3, [r7, #28]
 80021e8:	005b      	lsls	r3, r3, #1
 80021ea:	fa02 f303 	lsl.w	r3, r2, r3
 80021ee:	69ba      	ldr	r2, [r7, #24]
 80021f0:	4313      	orrs	r3, r2
 80021f2:	61bb      	str	r3, [r7, #24]
      GPIOx->PUPDR = temp;
 80021f4:	687b      	ldr	r3, [r7, #4]
 80021f6:	69ba      	ldr	r2, [r7, #24]
 80021f8:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 80021fa:	683b      	ldr	r3, [r7, #0]
 80021fc:	685b      	ldr	r3, [r3, #4]
 80021fe:	f003 0303 	and.w	r3, r3, #3
 8002202:	2b02      	cmp	r3, #2
 8002204:	d123      	bne.n	800224e <HAL_GPIO_Init+0x136>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8002206:	69fb      	ldr	r3, [r7, #28]
 8002208:	08da      	lsrs	r2, r3, #3
 800220a:	687b      	ldr	r3, [r7, #4]
 800220c:	3208      	adds	r2, #8
 800220e:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8002212:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((position & 0x07U) * 4U));
 8002214:	69fb      	ldr	r3, [r7, #28]
 8002216:	f003 0307 	and.w	r3, r3, #7
 800221a:	009b      	lsls	r3, r3, #2
 800221c:	220f      	movs	r2, #15
 800221e:	fa02 f303 	lsl.w	r3, r2, r3
 8002222:	43db      	mvns	r3, r3
 8002224:	69ba      	ldr	r2, [r7, #24]
 8002226:	4013      	ands	r3, r2
 8002228:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07U) * 4U));
 800222a:	683b      	ldr	r3, [r7, #0]
 800222c:	691a      	ldr	r2, [r3, #16]
 800222e:	69fb      	ldr	r3, [r7, #28]
 8002230:	f003 0307 	and.w	r3, r3, #7
 8002234:	009b      	lsls	r3, r3, #2
 8002236:	fa02 f303 	lsl.w	r3, r2, r3
 800223a:	69ba      	ldr	r2, [r7, #24]
 800223c:	4313      	orrs	r3, r2
 800223e:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 8002240:	69fb      	ldr	r3, [r7, #28]
 8002242:	08da      	lsrs	r2, r3, #3
 8002244:	687b      	ldr	r3, [r7, #4]
 8002246:	3208      	adds	r2, #8
 8002248:	69b9      	ldr	r1, [r7, #24]
 800224a:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 800224e:	687b      	ldr	r3, [r7, #4]
 8002250:	681b      	ldr	r3, [r3, #0]
 8002252:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2U));
 8002254:	69fb      	ldr	r3, [r7, #28]
 8002256:	005b      	lsls	r3, r3, #1
 8002258:	2203      	movs	r2, #3
 800225a:	fa02 f303 	lsl.w	r3, r2, r3
 800225e:	43db      	mvns	r3, r3
 8002260:	69ba      	ldr	r2, [r7, #24]
 8002262:	4013      	ands	r3, r2
 8002264:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8002266:	683b      	ldr	r3, [r7, #0]
 8002268:	685b      	ldr	r3, [r3, #4]
 800226a:	f003 0203 	and.w	r2, r3, #3
 800226e:	69fb      	ldr	r3, [r7, #28]
 8002270:	005b      	lsls	r3, r3, #1
 8002272:	fa02 f303 	lsl.w	r3, r2, r3
 8002276:	69ba      	ldr	r2, [r7, #24]
 8002278:	4313      	orrs	r3, r2
 800227a:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 800227c:	687b      	ldr	r3, [r7, #4]
 800227e:	69ba      	ldr	r2, [r7, #24]
 8002280:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 8002282:	683b      	ldr	r3, [r7, #0]
 8002284:	685b      	ldr	r3, [r3, #4]
 8002286:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 800228a:	2b00      	cmp	r3, #0
 800228c:	f000 80d8 	beq.w	8002440 <HAL_GPIO_Init+0x328>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8002290:	4b2c      	ldr	r3, [pc, #176]	; (8002344 <HAL_GPIO_Init+0x22c>)
 8002292:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 8002296:	4a2b      	ldr	r2, [pc, #172]	; (8002344 <HAL_GPIO_Init+0x22c>)
 8002298:	f043 0302 	orr.w	r3, r3, #2
 800229c:	f8c2 30f4 	str.w	r3, [r2, #244]	; 0xf4
 80022a0:	4b28      	ldr	r3, [pc, #160]	; (8002344 <HAL_GPIO_Init+0x22c>)
 80022a2:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 80022a6:	f003 0302 	and.w	r3, r3, #2
 80022aa:	60fb      	str	r3, [r7, #12]
 80022ac:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 80022ae:	4a26      	ldr	r2, [pc, #152]	; (8002348 <HAL_GPIO_Init+0x230>)
 80022b0:	69fb      	ldr	r3, [r7, #28]
 80022b2:	089b      	lsrs	r3, r3, #2
 80022b4:	3302      	adds	r3, #2
 80022b6:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80022ba:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FUL << (4U * (position & 0x03U)));
 80022bc:	69fb      	ldr	r3, [r7, #28]
 80022be:	f003 0303 	and.w	r3, r3, #3
 80022c2:	009b      	lsls	r3, r3, #2
 80022c4:	220f      	movs	r2, #15
 80022c6:	fa02 f303 	lsl.w	r3, r2, r3
 80022ca:	43db      	mvns	r3, r3
 80022cc:	69ba      	ldr	r2, [r7, #24]
 80022ce:	4013      	ands	r3, r2
 80022d0:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4U * (position & 0x03U)));
 80022d2:	687b      	ldr	r3, [r7, #4]
 80022d4:	4a1d      	ldr	r2, [pc, #116]	; (800234c <HAL_GPIO_Init+0x234>)
 80022d6:	4293      	cmp	r3, r2
 80022d8:	d04a      	beq.n	8002370 <HAL_GPIO_Init+0x258>
 80022da:	687b      	ldr	r3, [r7, #4]
 80022dc:	4a1c      	ldr	r2, [pc, #112]	; (8002350 <HAL_GPIO_Init+0x238>)
 80022de:	4293      	cmp	r3, r2
 80022e0:	d02b      	beq.n	800233a <HAL_GPIO_Init+0x222>
 80022e2:	687b      	ldr	r3, [r7, #4]
 80022e4:	4a1b      	ldr	r2, [pc, #108]	; (8002354 <HAL_GPIO_Init+0x23c>)
 80022e6:	4293      	cmp	r3, r2
 80022e8:	d025      	beq.n	8002336 <HAL_GPIO_Init+0x21e>
 80022ea:	687b      	ldr	r3, [r7, #4]
 80022ec:	4a1a      	ldr	r2, [pc, #104]	; (8002358 <HAL_GPIO_Init+0x240>)
 80022ee:	4293      	cmp	r3, r2
 80022f0:	d01f      	beq.n	8002332 <HAL_GPIO_Init+0x21a>
 80022f2:	687b      	ldr	r3, [r7, #4]
 80022f4:	4a19      	ldr	r2, [pc, #100]	; (800235c <HAL_GPIO_Init+0x244>)
 80022f6:	4293      	cmp	r3, r2
 80022f8:	d019      	beq.n	800232e <HAL_GPIO_Init+0x216>
 80022fa:	687b      	ldr	r3, [r7, #4]
 80022fc:	4a18      	ldr	r2, [pc, #96]	; (8002360 <HAL_GPIO_Init+0x248>)
 80022fe:	4293      	cmp	r3, r2
 8002300:	d013      	beq.n	800232a <HAL_GPIO_Init+0x212>
 8002302:	687b      	ldr	r3, [r7, #4]
 8002304:	4a17      	ldr	r2, [pc, #92]	; (8002364 <HAL_GPIO_Init+0x24c>)
 8002306:	4293      	cmp	r3, r2
 8002308:	d00d      	beq.n	8002326 <HAL_GPIO_Init+0x20e>
 800230a:	687b      	ldr	r3, [r7, #4]
 800230c:	4a16      	ldr	r2, [pc, #88]	; (8002368 <HAL_GPIO_Init+0x250>)
 800230e:	4293      	cmp	r3, r2
 8002310:	d007      	beq.n	8002322 <HAL_GPIO_Init+0x20a>
 8002312:	687b      	ldr	r3, [r7, #4]
 8002314:	4a15      	ldr	r2, [pc, #84]	; (800236c <HAL_GPIO_Init+0x254>)
 8002316:	4293      	cmp	r3, r2
 8002318:	d101      	bne.n	800231e <HAL_GPIO_Init+0x206>
 800231a:	2309      	movs	r3, #9
 800231c:	e029      	b.n	8002372 <HAL_GPIO_Init+0x25a>
 800231e:	230a      	movs	r3, #10
 8002320:	e027      	b.n	8002372 <HAL_GPIO_Init+0x25a>
 8002322:	2307      	movs	r3, #7
 8002324:	e025      	b.n	8002372 <HAL_GPIO_Init+0x25a>
 8002326:	2306      	movs	r3, #6
 8002328:	e023      	b.n	8002372 <HAL_GPIO_Init+0x25a>
 800232a:	2305      	movs	r3, #5
 800232c:	e021      	b.n	8002372 <HAL_GPIO_Init+0x25a>
 800232e:	2304      	movs	r3, #4
 8002330:	e01f      	b.n	8002372 <HAL_GPIO_Init+0x25a>
 8002332:	2303      	movs	r3, #3
 8002334:	e01d      	b.n	8002372 <HAL_GPIO_Init+0x25a>
 8002336:	2302      	movs	r3, #2
 8002338:	e01b      	b.n	8002372 <HAL_GPIO_Init+0x25a>
 800233a:	2301      	movs	r3, #1
 800233c:	e019      	b.n	8002372 <HAL_GPIO_Init+0x25a>
 800233e:	bf00      	nop
 8002340:	58000080 	.word	0x58000080
 8002344:	58024400 	.word	0x58024400
 8002348:	58000400 	.word	0x58000400
 800234c:	58020000 	.word	0x58020000
 8002350:	58020400 	.word	0x58020400
 8002354:	58020800 	.word	0x58020800
 8002358:	58020c00 	.word	0x58020c00
 800235c:	58021000 	.word	0x58021000
 8002360:	58021400 	.word	0x58021400
 8002364:	58021800 	.word	0x58021800
 8002368:	58021c00 	.word	0x58021c00
 800236c:	58022400 	.word	0x58022400
 8002370:	2300      	movs	r3, #0
 8002372:	69fa      	ldr	r2, [r7, #28]
 8002374:	f002 0203 	and.w	r2, r2, #3
 8002378:	0092      	lsls	r2, r2, #2
 800237a:	4093      	lsls	r3, r2
 800237c:	69ba      	ldr	r2, [r7, #24]
 800237e:	4313      	orrs	r3, r2
 8002380:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8002382:	4938      	ldr	r1, [pc, #224]	; (8002464 <HAL_GPIO_Init+0x34c>)
 8002384:	69fb      	ldr	r3, [r7, #28]
 8002386:	089b      	lsrs	r3, r3, #2
 8002388:	3302      	adds	r3, #2
 800238a:	69ba      	ldr	r2, [r7, #24]
 800238c:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 8002390:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8002394:	681b      	ldr	r3, [r3, #0]
 8002396:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 8002398:	693b      	ldr	r3, [r7, #16]
 800239a:	43db      	mvns	r3, r3
 800239c:	69ba      	ldr	r2, [r7, #24]
 800239e:	4013      	ands	r3, r2
 80023a0:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 80023a2:	683b      	ldr	r3, [r7, #0]
 80023a4:	685b      	ldr	r3, [r3, #4]
 80023a6:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 80023aa:	2b00      	cmp	r3, #0
 80023ac:	d003      	beq.n	80023b6 <HAL_GPIO_Init+0x29e>
        {
          temp |= iocurrent;
 80023ae:	69ba      	ldr	r2, [r7, #24]
 80023b0:	693b      	ldr	r3, [r7, #16]
 80023b2:	4313      	orrs	r3, r2
 80023b4:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR1 = temp;
 80023b6:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 80023ba:	69bb      	ldr	r3, [r7, #24]
 80023bc:	6013      	str	r3, [r2, #0]

        temp = EXTI->FTSR1;
 80023be:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80023c2:	685b      	ldr	r3, [r3, #4]
 80023c4:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 80023c6:	693b      	ldr	r3, [r7, #16]
 80023c8:	43db      	mvns	r3, r3
 80023ca:	69ba      	ldr	r2, [r7, #24]
 80023cc:	4013      	ands	r3, r2
 80023ce:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 80023d0:	683b      	ldr	r3, [r7, #0]
 80023d2:	685b      	ldr	r3, [r3, #4]
 80023d4:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 80023d8:	2b00      	cmp	r3, #0
 80023da:	d003      	beq.n	80023e4 <HAL_GPIO_Init+0x2cc>
        {
          temp |= iocurrent;
 80023dc:	69ba      	ldr	r2, [r7, #24]
 80023de:	693b      	ldr	r3, [r7, #16]
 80023e0:	4313      	orrs	r3, r2
 80023e2:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR1 = temp;
 80023e4:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 80023e8:	69bb      	ldr	r3, [r7, #24]
 80023ea:	6053      	str	r3, [r2, #4]

        temp = EXTI_CurrentCPU->EMR1;
 80023ec:	697b      	ldr	r3, [r7, #20]
 80023ee:	685b      	ldr	r3, [r3, #4]
 80023f0:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 80023f2:	693b      	ldr	r3, [r7, #16]
 80023f4:	43db      	mvns	r3, r3
 80023f6:	69ba      	ldr	r2, [r7, #24]
 80023f8:	4013      	ands	r3, r2
 80023fa:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 80023fc:	683b      	ldr	r3, [r7, #0]
 80023fe:	685b      	ldr	r3, [r3, #4]
 8002400:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002404:	2b00      	cmp	r3, #0
 8002406:	d003      	beq.n	8002410 <HAL_GPIO_Init+0x2f8>
        {
          temp |= iocurrent;
 8002408:	69ba      	ldr	r2, [r7, #24]
 800240a:	693b      	ldr	r3, [r7, #16]
 800240c:	4313      	orrs	r3, r2
 800240e:	61bb      	str	r3, [r7, #24]
        }
        EXTI_CurrentCPU->EMR1 = temp;
 8002410:	697b      	ldr	r3, [r7, #20]
 8002412:	69ba      	ldr	r2, [r7, #24]
 8002414:	605a      	str	r2, [r3, #4]

        /* Clear EXTI line configuration */
        temp = EXTI_CurrentCPU->IMR1;
 8002416:	697b      	ldr	r3, [r7, #20]
 8002418:	681b      	ldr	r3, [r3, #0]
 800241a:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 800241c:	693b      	ldr	r3, [r7, #16]
 800241e:	43db      	mvns	r3, r3
 8002420:	69ba      	ldr	r2, [r7, #24]
 8002422:	4013      	ands	r3, r2
 8002424:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 8002426:	683b      	ldr	r3, [r7, #0]
 8002428:	685b      	ldr	r3, [r3, #4]
 800242a:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800242e:	2b00      	cmp	r3, #0
 8002430:	d003      	beq.n	800243a <HAL_GPIO_Init+0x322>
        {
          temp |= iocurrent;
 8002432:	69ba      	ldr	r2, [r7, #24]
 8002434:	693b      	ldr	r3, [r7, #16]
 8002436:	4313      	orrs	r3, r2
 8002438:	61bb      	str	r3, [r7, #24]
        }
        EXTI_CurrentCPU->IMR1 = temp;
 800243a:	697b      	ldr	r3, [r7, #20]
 800243c:	69ba      	ldr	r2, [r7, #24]
 800243e:	601a      	str	r2, [r3, #0]
      }
    }

    position++;
 8002440:	69fb      	ldr	r3, [r7, #28]
 8002442:	3301      	adds	r3, #1
 8002444:	61fb      	str	r3, [r7, #28]
  while (((GPIO_Init->Pin) >> position) != 0x00U)
 8002446:	683b      	ldr	r3, [r7, #0]
 8002448:	681a      	ldr	r2, [r3, #0]
 800244a:	69fb      	ldr	r3, [r7, #28]
 800244c:	fa22 f303 	lsr.w	r3, r2, r3
 8002450:	2b00      	cmp	r3, #0
 8002452:	f47f ae6b 	bne.w	800212c <HAL_GPIO_Init+0x14>
  }
}
 8002456:	bf00      	nop
 8002458:	bf00      	nop
 800245a:	3724      	adds	r7, #36	; 0x24
 800245c:	46bd      	mov	sp, r7
 800245e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002462:	4770      	bx	lr
 8002464:	58000400 	.word	0x58000400

08002468 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8002468:	b480      	push	{r7}
 800246a:	b083      	sub	sp, #12
 800246c:	af00      	add	r7, sp, #0
 800246e:	6078      	str	r0, [r7, #4]
 8002470:	460b      	mov	r3, r1
 8002472:	807b      	strh	r3, [r7, #2]
 8002474:	4613      	mov	r3, r2
 8002476:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 8002478:	787b      	ldrb	r3, [r7, #1]
 800247a:	2b00      	cmp	r3, #0
 800247c:	d003      	beq.n	8002486 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 800247e:	887a      	ldrh	r2, [r7, #2]
 8002480:	687b      	ldr	r3, [r7, #4]
 8002482:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << GPIO_NUMBER;
  }
}
 8002484:	e003      	b.n	800248e <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << GPIO_NUMBER;
 8002486:	887b      	ldrh	r3, [r7, #2]
 8002488:	041a      	lsls	r2, r3, #16
 800248a:	687b      	ldr	r3, [r7, #4]
 800248c:	619a      	str	r2, [r3, #24]
}
 800248e:	bf00      	nop
 8002490:	370c      	adds	r7, #12
 8002492:	46bd      	mov	sp, r7
 8002494:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002498:	4770      	bx	lr
	...

0800249c <HAL_PWREx_ConfigSupply>:
  *         PWR_SMPS_2V5_SUPPLIES_EXT are used only for lines that supports SMPS
  *         regulator.
  * @retval HAL status.
  */
HAL_StatusTypeDef HAL_PWREx_ConfigSupply (uint32_t SupplySource)
{
 800249c:	b580      	push	{r7, lr}
 800249e:	b084      	sub	sp, #16
 80024a0:	af00      	add	r7, sp, #0
 80024a2:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param (IS_PWR_SUPPLY (SupplySource));

  /* Check if supply source was configured */
#if defined (PWR_FLAG_SCUEN)
  if (__HAL_PWR_GET_FLAG (PWR_FLAG_SCUEN) == 0U)
 80024a4:	4b19      	ldr	r3, [pc, #100]	; (800250c <HAL_PWREx_ConfigSupply+0x70>)
 80024a6:	68db      	ldr	r3, [r3, #12]
 80024a8:	f003 0304 	and.w	r3, r3, #4
 80024ac:	2b04      	cmp	r3, #4
 80024ae:	d00a      	beq.n	80024c6 <HAL_PWREx_ConfigSupply+0x2a>
#else
  if ((PWR->CR3 & (PWR_CR3_SMPSEN | PWR_CR3_LDOEN | PWR_CR3_BYPASS)) != (PWR_CR3_SMPSEN | PWR_CR3_LDOEN))
#endif /* defined (PWR_FLAG_SCUEN) */
  {
    /* Check supply configuration */
    if ((PWR->CR3 & PWR_SUPPLY_CONFIG_MASK) != SupplySource)
 80024b0:	4b16      	ldr	r3, [pc, #88]	; (800250c <HAL_PWREx_ConfigSupply+0x70>)
 80024b2:	68db      	ldr	r3, [r3, #12]
 80024b4:	f003 0307 	and.w	r3, r3, #7
 80024b8:	687a      	ldr	r2, [r7, #4]
 80024ba:	429a      	cmp	r2, r3
 80024bc:	d001      	beq.n	80024c2 <HAL_PWREx_ConfigSupply+0x26>
    {
      /* Supply configuration update locked, can't apply a new supply config */
      return HAL_ERROR;
 80024be:	2301      	movs	r3, #1
 80024c0:	e01f      	b.n	8002502 <HAL_PWREx_ConfigSupply+0x66>
    else
    {
      /* Supply configuration update locked, but new supply configuration
         matches with old supply configuration : nothing to do
      */
      return HAL_OK;
 80024c2:	2300      	movs	r3, #0
 80024c4:	e01d      	b.n	8002502 <HAL_PWREx_ConfigSupply+0x66>
    }
  }

  /* Set the power supply configuration */
  MODIFY_REG (PWR->CR3, PWR_SUPPLY_CONFIG_MASK, SupplySource);
 80024c6:	4b11      	ldr	r3, [pc, #68]	; (800250c <HAL_PWREx_ConfigSupply+0x70>)
 80024c8:	68db      	ldr	r3, [r3, #12]
 80024ca:	f023 0207 	bic.w	r2, r3, #7
 80024ce:	490f      	ldr	r1, [pc, #60]	; (800250c <HAL_PWREx_ConfigSupply+0x70>)
 80024d0:	687b      	ldr	r3, [r7, #4]
 80024d2:	4313      	orrs	r3, r2
 80024d4:	60cb      	str	r3, [r1, #12]

  /* Get tick */
  tickstart = HAL_GetTick ();
 80024d6:	f7ff f87b 	bl	80015d0 <HAL_GetTick>
 80024da:	60f8      	str	r0, [r7, #12]

  /* Wait till voltage level flag is set */
  while (__HAL_PWR_GET_FLAG (PWR_FLAG_ACTVOSRDY) == 0U)
 80024dc:	e009      	b.n	80024f2 <HAL_PWREx_ConfigSupply+0x56>
  {
    if ((HAL_GetTick () - tickstart) > PWR_FLAG_SETTING_DELAY)
 80024de:	f7ff f877 	bl	80015d0 <HAL_GetTick>
 80024e2:	4602      	mov	r2, r0
 80024e4:	68fb      	ldr	r3, [r7, #12]
 80024e6:	1ad3      	subs	r3, r2, r3
 80024e8:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 80024ec:	d901      	bls.n	80024f2 <HAL_PWREx_ConfigSupply+0x56>
    {
      return HAL_ERROR;
 80024ee:	2301      	movs	r3, #1
 80024f0:	e007      	b.n	8002502 <HAL_PWREx_ConfigSupply+0x66>
  while (__HAL_PWR_GET_FLAG (PWR_FLAG_ACTVOSRDY) == 0U)
 80024f2:	4b06      	ldr	r3, [pc, #24]	; (800250c <HAL_PWREx_ConfigSupply+0x70>)
 80024f4:	685b      	ldr	r3, [r3, #4]
 80024f6:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 80024fa:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80024fe:	d1ee      	bne.n	80024de <HAL_PWREx_ConfigSupply+0x42>
      }
    }
  }
#endif /* defined (SMPS) */

  return HAL_OK;
 8002500:	2300      	movs	r3, #0
}
 8002502:	4618      	mov	r0, r3
 8002504:	3710      	adds	r7, #16
 8002506:	46bd      	mov	sp, r7
 8002508:	bd80      	pop	{r7, pc}
 800250a:	bf00      	nop
 800250c:	58024800 	.word	0x58024800

08002510 <HAL_RCC_OscConfig>:
  *         supported by this function. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8002510:	b580      	push	{r7, lr}
 8002512:	b08c      	sub	sp, #48	; 0x30
 8002514:	af00      	add	r7, sp, #0
 8002516:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t temp1_pllckcfg, temp2_pllckcfg;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8002518:	687b      	ldr	r3, [r7, #4]
 800251a:	2b00      	cmp	r3, #0
 800251c:	d101      	bne.n	8002522 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 800251e:	2301      	movs	r3, #1
 8002520:	e3c8      	b.n	8002cb4 <HAL_RCC_OscConfig+0x7a4>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8002522:	687b      	ldr	r3, [r7, #4]
 8002524:	681b      	ldr	r3, [r3, #0]
 8002526:	f003 0301 	and.w	r3, r3, #1
 800252a:	2b00      	cmp	r3, #0
 800252c:	f000 8087 	beq.w	800263e <HAL_RCC_OscConfig+0x12e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 8002530:	4b88      	ldr	r3, [pc, #544]	; (8002754 <HAL_RCC_OscConfig+0x244>)
 8002532:	691b      	ldr	r3, [r3, #16]
 8002534:	f003 0338 	and.w	r3, r3, #56	; 0x38
 8002538:	62fb      	str	r3, [r7, #44]	; 0x2c
    const uint32_t temp_pllckselr = RCC->PLLCKSELR;
 800253a:	4b86      	ldr	r3, [pc, #536]	; (8002754 <HAL_RCC_OscConfig+0x244>)
 800253c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800253e:	62bb      	str	r3, [r7, #40]	; 0x28
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if ((temp_sysclksrc == RCC_CFGR_SWS_HSE) || ((temp_sysclksrc == RCC_CFGR_SWS_PLL1) && ((temp_pllckselr & RCC_PLLCKSELR_PLLSRC) == RCC_PLLCKSELR_PLLSRC_HSE)))
 8002540:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002542:	2b10      	cmp	r3, #16
 8002544:	d007      	beq.n	8002556 <HAL_RCC_OscConfig+0x46>
 8002546:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002548:	2b18      	cmp	r3, #24
 800254a:	d110      	bne.n	800256e <HAL_RCC_OscConfig+0x5e>
 800254c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800254e:	f003 0303 	and.w	r3, r3, #3
 8002552:	2b02      	cmp	r3, #2
 8002554:	d10b      	bne.n	800256e <HAL_RCC_OscConfig+0x5e>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8002556:	4b7f      	ldr	r3, [pc, #508]	; (8002754 <HAL_RCC_OscConfig+0x244>)
 8002558:	681b      	ldr	r3, [r3, #0]
 800255a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800255e:	2b00      	cmp	r3, #0
 8002560:	d06c      	beq.n	800263c <HAL_RCC_OscConfig+0x12c>
 8002562:	687b      	ldr	r3, [r7, #4]
 8002564:	685b      	ldr	r3, [r3, #4]
 8002566:	2b00      	cmp	r3, #0
 8002568:	d168      	bne.n	800263c <HAL_RCC_OscConfig+0x12c>
      {
        return HAL_ERROR;
 800256a:	2301      	movs	r3, #1
 800256c:	e3a2      	b.n	8002cb4 <HAL_RCC_OscConfig+0x7a4>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 800256e:	687b      	ldr	r3, [r7, #4]
 8002570:	685b      	ldr	r3, [r3, #4]
 8002572:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8002576:	d106      	bne.n	8002586 <HAL_RCC_OscConfig+0x76>
 8002578:	4b76      	ldr	r3, [pc, #472]	; (8002754 <HAL_RCC_OscConfig+0x244>)
 800257a:	681b      	ldr	r3, [r3, #0]
 800257c:	4a75      	ldr	r2, [pc, #468]	; (8002754 <HAL_RCC_OscConfig+0x244>)
 800257e:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8002582:	6013      	str	r3, [r2, #0]
 8002584:	e02e      	b.n	80025e4 <HAL_RCC_OscConfig+0xd4>
 8002586:	687b      	ldr	r3, [r7, #4]
 8002588:	685b      	ldr	r3, [r3, #4]
 800258a:	2b00      	cmp	r3, #0
 800258c:	d10c      	bne.n	80025a8 <HAL_RCC_OscConfig+0x98>
 800258e:	4b71      	ldr	r3, [pc, #452]	; (8002754 <HAL_RCC_OscConfig+0x244>)
 8002590:	681b      	ldr	r3, [r3, #0]
 8002592:	4a70      	ldr	r2, [pc, #448]	; (8002754 <HAL_RCC_OscConfig+0x244>)
 8002594:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8002598:	6013      	str	r3, [r2, #0]
 800259a:	4b6e      	ldr	r3, [pc, #440]	; (8002754 <HAL_RCC_OscConfig+0x244>)
 800259c:	681b      	ldr	r3, [r3, #0]
 800259e:	4a6d      	ldr	r2, [pc, #436]	; (8002754 <HAL_RCC_OscConfig+0x244>)
 80025a0:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 80025a4:	6013      	str	r3, [r2, #0]
 80025a6:	e01d      	b.n	80025e4 <HAL_RCC_OscConfig+0xd4>
 80025a8:	687b      	ldr	r3, [r7, #4]
 80025aa:	685b      	ldr	r3, [r3, #4]
 80025ac:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 80025b0:	d10c      	bne.n	80025cc <HAL_RCC_OscConfig+0xbc>
 80025b2:	4b68      	ldr	r3, [pc, #416]	; (8002754 <HAL_RCC_OscConfig+0x244>)
 80025b4:	681b      	ldr	r3, [r3, #0]
 80025b6:	4a67      	ldr	r2, [pc, #412]	; (8002754 <HAL_RCC_OscConfig+0x244>)
 80025b8:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 80025bc:	6013      	str	r3, [r2, #0]
 80025be:	4b65      	ldr	r3, [pc, #404]	; (8002754 <HAL_RCC_OscConfig+0x244>)
 80025c0:	681b      	ldr	r3, [r3, #0]
 80025c2:	4a64      	ldr	r2, [pc, #400]	; (8002754 <HAL_RCC_OscConfig+0x244>)
 80025c4:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80025c8:	6013      	str	r3, [r2, #0]
 80025ca:	e00b      	b.n	80025e4 <HAL_RCC_OscConfig+0xd4>
 80025cc:	4b61      	ldr	r3, [pc, #388]	; (8002754 <HAL_RCC_OscConfig+0x244>)
 80025ce:	681b      	ldr	r3, [r3, #0]
 80025d0:	4a60      	ldr	r2, [pc, #384]	; (8002754 <HAL_RCC_OscConfig+0x244>)
 80025d2:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80025d6:	6013      	str	r3, [r2, #0]
 80025d8:	4b5e      	ldr	r3, [pc, #376]	; (8002754 <HAL_RCC_OscConfig+0x244>)
 80025da:	681b      	ldr	r3, [r3, #0]
 80025dc:	4a5d      	ldr	r2, [pc, #372]	; (8002754 <HAL_RCC_OscConfig+0x244>)
 80025de:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 80025e2:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 80025e4:	687b      	ldr	r3, [r7, #4]
 80025e6:	685b      	ldr	r3, [r3, #4]
 80025e8:	2b00      	cmp	r3, #0
 80025ea:	d013      	beq.n	8002614 <HAL_RCC_OscConfig+0x104>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80025ec:	f7fe fff0 	bl	80015d0 <HAL_GetTick>
 80025f0:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 80025f2:	e008      	b.n	8002606 <HAL_RCC_OscConfig+0xf6>
        {
          if ((uint32_t)(HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 80025f4:	f7fe ffec 	bl	80015d0 <HAL_GetTick>
 80025f8:	4602      	mov	r2, r0
 80025fa:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80025fc:	1ad3      	subs	r3, r2, r3
 80025fe:	2b64      	cmp	r3, #100	; 0x64
 8002600:	d901      	bls.n	8002606 <HAL_RCC_OscConfig+0xf6>
          {
            return HAL_TIMEOUT;
 8002602:	2303      	movs	r3, #3
 8002604:	e356      	b.n	8002cb4 <HAL_RCC_OscConfig+0x7a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 8002606:	4b53      	ldr	r3, [pc, #332]	; (8002754 <HAL_RCC_OscConfig+0x244>)
 8002608:	681b      	ldr	r3, [r3, #0]
 800260a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800260e:	2b00      	cmp	r3, #0
 8002610:	d0f0      	beq.n	80025f4 <HAL_RCC_OscConfig+0xe4>
 8002612:	e014      	b.n	800263e <HAL_RCC_OscConfig+0x12e>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002614:	f7fe ffdc 	bl	80015d0 <HAL_GetTick>
 8002618:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till HSE is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U)
 800261a:	e008      	b.n	800262e <HAL_RCC_OscConfig+0x11e>
        {
          if ((uint32_t)(HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 800261c:	f7fe ffd8 	bl	80015d0 <HAL_GetTick>
 8002620:	4602      	mov	r2, r0
 8002622:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002624:	1ad3      	subs	r3, r2, r3
 8002626:	2b64      	cmp	r3, #100	; 0x64
 8002628:	d901      	bls.n	800262e <HAL_RCC_OscConfig+0x11e>
          {
            return HAL_TIMEOUT;
 800262a:	2303      	movs	r3, #3
 800262c:	e342      	b.n	8002cb4 <HAL_RCC_OscConfig+0x7a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U)
 800262e:	4b49      	ldr	r3, [pc, #292]	; (8002754 <HAL_RCC_OscConfig+0x244>)
 8002630:	681b      	ldr	r3, [r3, #0]
 8002632:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002636:	2b00      	cmp	r3, #0
 8002638:	d1f0      	bne.n	800261c <HAL_RCC_OscConfig+0x10c>
 800263a:	e000      	b.n	800263e <HAL_RCC_OscConfig+0x12e>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800263c:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 800263e:	687b      	ldr	r3, [r7, #4]
 8002640:	681b      	ldr	r3, [r3, #0]
 8002642:	f003 0302 	and.w	r3, r3, #2
 8002646:	2b00      	cmp	r3, #0
 8002648:	f000 808c 	beq.w	8002764 <HAL_RCC_OscConfig+0x254>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSICALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* When the HSI is used as system clock it will not be disabled */
    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 800264c:	4b41      	ldr	r3, [pc, #260]	; (8002754 <HAL_RCC_OscConfig+0x244>)
 800264e:	691b      	ldr	r3, [r3, #16]
 8002650:	f003 0338 	and.w	r3, r3, #56	; 0x38
 8002654:	623b      	str	r3, [r7, #32]
    const uint32_t temp_pllckselr = RCC->PLLCKSELR;
 8002656:	4b3f      	ldr	r3, [pc, #252]	; (8002754 <HAL_RCC_OscConfig+0x244>)
 8002658:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800265a:	61fb      	str	r3, [r7, #28]
    if ((temp_sysclksrc == RCC_CFGR_SWS_HSI) || ((temp_sysclksrc == RCC_CFGR_SWS_PLL1) && ((temp_pllckselr & RCC_PLLCKSELR_PLLSRC) == RCC_PLLCKSELR_PLLSRC_HSI)))
 800265c:	6a3b      	ldr	r3, [r7, #32]
 800265e:	2b00      	cmp	r3, #0
 8002660:	d007      	beq.n	8002672 <HAL_RCC_OscConfig+0x162>
 8002662:	6a3b      	ldr	r3, [r7, #32]
 8002664:	2b18      	cmp	r3, #24
 8002666:	d137      	bne.n	80026d8 <HAL_RCC_OscConfig+0x1c8>
 8002668:	69fb      	ldr	r3, [r7, #28]
 800266a:	f003 0303 	and.w	r3, r3, #3
 800266e:	2b00      	cmp	r3, #0
 8002670:	d132      	bne.n	80026d8 <HAL_RCC_OscConfig+0x1c8>
    {
      /* When HSI is used as system clock it will not be disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8002672:	4b38      	ldr	r3, [pc, #224]	; (8002754 <HAL_RCC_OscConfig+0x244>)
 8002674:	681b      	ldr	r3, [r3, #0]
 8002676:	f003 0304 	and.w	r3, r3, #4
 800267a:	2b00      	cmp	r3, #0
 800267c:	d005      	beq.n	800268a <HAL_RCC_OscConfig+0x17a>
 800267e:	687b      	ldr	r3, [r7, #4]
 8002680:	68db      	ldr	r3, [r3, #12]
 8002682:	2b00      	cmp	r3, #0
 8002684:	d101      	bne.n	800268a <HAL_RCC_OscConfig+0x17a>
      {
        return HAL_ERROR;
 8002686:	2301      	movs	r3, #1
 8002688:	e314      	b.n	8002cb4 <HAL_RCC_OscConfig+0x7a4>
      }
      /* Otherwise, only HSI division and calibration are allowed */
      else
      {
        /* Enable the Internal High Speed oscillator (HSI, HSIDIV2, HSIDIV4, or HSIDIV8) */
        __HAL_RCC_HSI_CONFIG(RCC_OscInitStruct->HSIState);
 800268a:	4b32      	ldr	r3, [pc, #200]	; (8002754 <HAL_RCC_OscConfig+0x244>)
 800268c:	681b      	ldr	r3, [r3, #0]
 800268e:	f023 0219 	bic.w	r2, r3, #25
 8002692:	687b      	ldr	r3, [r7, #4]
 8002694:	68db      	ldr	r3, [r3, #12]
 8002696:	492f      	ldr	r1, [pc, #188]	; (8002754 <HAL_RCC_OscConfig+0x244>)
 8002698:	4313      	orrs	r3, r2
 800269a:	600b      	str	r3, [r1, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800269c:	f7fe ff98 	bl	80015d0 <HAL_GetTick>
 80026a0:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 80026a2:	e008      	b.n	80026b6 <HAL_RCC_OscConfig+0x1a6>
        {
          if ((uint32_t)(HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80026a4:	f7fe ff94 	bl	80015d0 <HAL_GetTick>
 80026a8:	4602      	mov	r2, r0
 80026aa:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80026ac:	1ad3      	subs	r3, r2, r3
 80026ae:	2b02      	cmp	r3, #2
 80026b0:	d901      	bls.n	80026b6 <HAL_RCC_OscConfig+0x1a6>
          {
            return HAL_TIMEOUT;
 80026b2:	2303      	movs	r3, #3
 80026b4:	e2fe      	b.n	8002cb4 <HAL_RCC_OscConfig+0x7a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 80026b6:	4b27      	ldr	r3, [pc, #156]	; (8002754 <HAL_RCC_OscConfig+0x244>)
 80026b8:	681b      	ldr	r3, [r3, #0]
 80026ba:	f003 0304 	and.w	r3, r3, #4
 80026be:	2b00      	cmp	r3, #0
 80026c0:	d0f0      	beq.n	80026a4 <HAL_RCC_OscConfig+0x194>
          }
        }
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80026c2:	4b24      	ldr	r3, [pc, #144]	; (8002754 <HAL_RCC_OscConfig+0x244>)
 80026c4:	685b      	ldr	r3, [r3, #4]
 80026c6:	f023 42fe 	bic.w	r2, r3, #2130706432	; 0x7f000000
 80026ca:	687b      	ldr	r3, [r7, #4]
 80026cc:	691b      	ldr	r3, [r3, #16]
 80026ce:	061b      	lsls	r3, r3, #24
 80026d0:	4920      	ldr	r1, [pc, #128]	; (8002754 <HAL_RCC_OscConfig+0x244>)
 80026d2:	4313      	orrs	r3, r2
 80026d4:	604b      	str	r3, [r1, #4]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 80026d6:	e045      	b.n	8002764 <HAL_RCC_OscConfig+0x254>
    }

    else
    {
      /* Check the HSI State */
      if ((RCC_OscInitStruct->HSIState) != RCC_HSI_OFF)
 80026d8:	687b      	ldr	r3, [r7, #4]
 80026da:	68db      	ldr	r3, [r3, #12]
 80026dc:	2b00      	cmp	r3, #0
 80026de:	d026      	beq.n	800272e <HAL_RCC_OscConfig+0x21e>
      {
        /* Enable the Internal High Speed oscillator (HSI, HSIDIV2,HSIDIV4, or HSIDIV8) */
        __HAL_RCC_HSI_CONFIG(RCC_OscInitStruct->HSIState);
 80026e0:	4b1c      	ldr	r3, [pc, #112]	; (8002754 <HAL_RCC_OscConfig+0x244>)
 80026e2:	681b      	ldr	r3, [r3, #0]
 80026e4:	f023 0219 	bic.w	r2, r3, #25
 80026e8:	687b      	ldr	r3, [r7, #4]
 80026ea:	68db      	ldr	r3, [r3, #12]
 80026ec:	4919      	ldr	r1, [pc, #100]	; (8002754 <HAL_RCC_OscConfig+0x244>)
 80026ee:	4313      	orrs	r3, r2
 80026f0:	600b      	str	r3, [r1, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80026f2:	f7fe ff6d 	bl	80015d0 <HAL_GetTick>
 80026f6:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 80026f8:	e008      	b.n	800270c <HAL_RCC_OscConfig+0x1fc>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80026fa:	f7fe ff69 	bl	80015d0 <HAL_GetTick>
 80026fe:	4602      	mov	r2, r0
 8002700:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002702:	1ad3      	subs	r3, r2, r3
 8002704:	2b02      	cmp	r3, #2
 8002706:	d901      	bls.n	800270c <HAL_RCC_OscConfig+0x1fc>
          {
            return HAL_TIMEOUT;
 8002708:	2303      	movs	r3, #3
 800270a:	e2d3      	b.n	8002cb4 <HAL_RCC_OscConfig+0x7a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 800270c:	4b11      	ldr	r3, [pc, #68]	; (8002754 <HAL_RCC_OscConfig+0x244>)
 800270e:	681b      	ldr	r3, [r3, #0]
 8002710:	f003 0304 	and.w	r3, r3, #4
 8002714:	2b00      	cmp	r3, #0
 8002716:	d0f0      	beq.n	80026fa <HAL_RCC_OscConfig+0x1ea>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002718:	4b0e      	ldr	r3, [pc, #56]	; (8002754 <HAL_RCC_OscConfig+0x244>)
 800271a:	685b      	ldr	r3, [r3, #4]
 800271c:	f023 42fe 	bic.w	r2, r3, #2130706432	; 0x7f000000
 8002720:	687b      	ldr	r3, [r7, #4]
 8002722:	691b      	ldr	r3, [r3, #16]
 8002724:	061b      	lsls	r3, r3, #24
 8002726:	490b      	ldr	r1, [pc, #44]	; (8002754 <HAL_RCC_OscConfig+0x244>)
 8002728:	4313      	orrs	r3, r2
 800272a:	604b      	str	r3, [r1, #4]
 800272c:	e01a      	b.n	8002764 <HAL_RCC_OscConfig+0x254>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 800272e:	4b09      	ldr	r3, [pc, #36]	; (8002754 <HAL_RCC_OscConfig+0x244>)
 8002730:	681b      	ldr	r3, [r3, #0]
 8002732:	4a08      	ldr	r2, [pc, #32]	; (8002754 <HAL_RCC_OscConfig+0x244>)
 8002734:	f023 0301 	bic.w	r3, r3, #1
 8002738:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800273a:	f7fe ff49 	bl	80015d0 <HAL_GetTick>
 800273e:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till HSI is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U)
 8002740:	e00a      	b.n	8002758 <HAL_RCC_OscConfig+0x248>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8002742:	f7fe ff45 	bl	80015d0 <HAL_GetTick>
 8002746:	4602      	mov	r2, r0
 8002748:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800274a:	1ad3      	subs	r3, r2, r3
 800274c:	2b02      	cmp	r3, #2
 800274e:	d903      	bls.n	8002758 <HAL_RCC_OscConfig+0x248>
          {
            return HAL_TIMEOUT;
 8002750:	2303      	movs	r3, #3
 8002752:	e2af      	b.n	8002cb4 <HAL_RCC_OscConfig+0x7a4>
 8002754:	58024400 	.word	0x58024400
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U)
 8002758:	4b96      	ldr	r3, [pc, #600]	; (80029b4 <HAL_RCC_OscConfig+0x4a4>)
 800275a:	681b      	ldr	r3, [r3, #0]
 800275c:	f003 0304 	and.w	r3, r3, #4
 8002760:	2b00      	cmp	r3, #0
 8002762:	d1ee      	bne.n	8002742 <HAL_RCC_OscConfig+0x232>
        }
      }
    }
  }
  /*----------------------------- CSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_CSI) == RCC_OSCILLATORTYPE_CSI)
 8002764:	687b      	ldr	r3, [r7, #4]
 8002766:	681b      	ldr	r3, [r3, #0]
 8002768:	f003 0310 	and.w	r3, r3, #16
 800276c:	2b00      	cmp	r3, #0
 800276e:	d06a      	beq.n	8002846 <HAL_RCC_OscConfig+0x336>
    /* Check the parameters */
    assert_param(IS_RCC_CSI(RCC_OscInitStruct->CSIState));
    assert_param(IS_RCC_CSICALIBRATION_VALUE(RCC_OscInitStruct->CSICalibrationValue));

    /* When the CSI is used as system clock it will not disabled */
    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 8002770:	4b90      	ldr	r3, [pc, #576]	; (80029b4 <HAL_RCC_OscConfig+0x4a4>)
 8002772:	691b      	ldr	r3, [r3, #16]
 8002774:	f003 0338 	and.w	r3, r3, #56	; 0x38
 8002778:	61bb      	str	r3, [r7, #24]
    const uint32_t temp_pllckselr = RCC->PLLCKSELR;
 800277a:	4b8e      	ldr	r3, [pc, #568]	; (80029b4 <HAL_RCC_OscConfig+0x4a4>)
 800277c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800277e:	617b      	str	r3, [r7, #20]
    if ((temp_sysclksrc == RCC_CFGR_SWS_CSI) || ((temp_sysclksrc == RCC_CFGR_SWS_PLL1) && ((temp_pllckselr & RCC_PLLCKSELR_PLLSRC) == RCC_PLLCKSELR_PLLSRC_CSI)))
 8002780:	69bb      	ldr	r3, [r7, #24]
 8002782:	2b08      	cmp	r3, #8
 8002784:	d007      	beq.n	8002796 <HAL_RCC_OscConfig+0x286>
 8002786:	69bb      	ldr	r3, [r7, #24]
 8002788:	2b18      	cmp	r3, #24
 800278a:	d11b      	bne.n	80027c4 <HAL_RCC_OscConfig+0x2b4>
 800278c:	697b      	ldr	r3, [r7, #20]
 800278e:	f003 0303 	and.w	r3, r3, #3
 8002792:	2b01      	cmp	r3, #1
 8002794:	d116      	bne.n	80027c4 <HAL_RCC_OscConfig+0x2b4>
    {
      /* When CSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U) && (RCC_OscInitStruct->CSIState != RCC_CSI_ON))
 8002796:	4b87      	ldr	r3, [pc, #540]	; (80029b4 <HAL_RCC_OscConfig+0x4a4>)
 8002798:	681b      	ldr	r3, [r3, #0]
 800279a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800279e:	2b00      	cmp	r3, #0
 80027a0:	d005      	beq.n	80027ae <HAL_RCC_OscConfig+0x29e>
 80027a2:	687b      	ldr	r3, [r7, #4]
 80027a4:	69db      	ldr	r3, [r3, #28]
 80027a6:	2b80      	cmp	r3, #128	; 0x80
 80027a8:	d001      	beq.n	80027ae <HAL_RCC_OscConfig+0x29e>
      {
        return HAL_ERROR;
 80027aa:	2301      	movs	r3, #1
 80027ac:	e282      	b.n	8002cb4 <HAL_RCC_OscConfig+0x7a4>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (CSI) calibration value.*/
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->CSICalibrationValue);
 80027ae:	4b81      	ldr	r3, [pc, #516]	; (80029b4 <HAL_RCC_OscConfig+0x4a4>)
 80027b0:	68db      	ldr	r3, [r3, #12]
 80027b2:	f023 527c 	bic.w	r2, r3, #1056964608	; 0x3f000000
 80027b6:	687b      	ldr	r3, [r7, #4]
 80027b8:	6a1b      	ldr	r3, [r3, #32]
 80027ba:	061b      	lsls	r3, r3, #24
 80027bc:	497d      	ldr	r1, [pc, #500]	; (80029b4 <HAL_RCC_OscConfig+0x4a4>)
 80027be:	4313      	orrs	r3, r2
 80027c0:	60cb      	str	r3, [r1, #12]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U) && (RCC_OscInitStruct->CSIState != RCC_CSI_ON))
 80027c2:	e040      	b.n	8002846 <HAL_RCC_OscConfig+0x336>
      }
    }
    else
    {
      /* Check the CSI State */
      if ((RCC_OscInitStruct->CSIState) != RCC_CSI_OFF)
 80027c4:	687b      	ldr	r3, [r7, #4]
 80027c6:	69db      	ldr	r3, [r3, #28]
 80027c8:	2b00      	cmp	r3, #0
 80027ca:	d023      	beq.n	8002814 <HAL_RCC_OscConfig+0x304>
      {
        /* Enable the Internal High Speed oscillator (CSI). */
        __HAL_RCC_CSI_ENABLE();
 80027cc:	4b79      	ldr	r3, [pc, #484]	; (80029b4 <HAL_RCC_OscConfig+0x4a4>)
 80027ce:	681b      	ldr	r3, [r3, #0]
 80027d0:	4a78      	ldr	r2, [pc, #480]	; (80029b4 <HAL_RCC_OscConfig+0x4a4>)
 80027d2:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80027d6:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80027d8:	f7fe fefa 	bl	80015d0 <HAL_GetTick>
 80027dc:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till CSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) == 0U)
 80027de:	e008      	b.n	80027f2 <HAL_RCC_OscConfig+0x2e2>
        {
          if ((HAL_GetTick() - tickstart) > CSI_TIMEOUT_VALUE)
 80027e0:	f7fe fef6 	bl	80015d0 <HAL_GetTick>
 80027e4:	4602      	mov	r2, r0
 80027e6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80027e8:	1ad3      	subs	r3, r2, r3
 80027ea:	2b02      	cmp	r3, #2
 80027ec:	d901      	bls.n	80027f2 <HAL_RCC_OscConfig+0x2e2>
          {
            return HAL_TIMEOUT;
 80027ee:	2303      	movs	r3, #3
 80027f0:	e260      	b.n	8002cb4 <HAL_RCC_OscConfig+0x7a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) == 0U)
 80027f2:	4b70      	ldr	r3, [pc, #448]	; (80029b4 <HAL_RCC_OscConfig+0x4a4>)
 80027f4:	681b      	ldr	r3, [r3, #0]
 80027f6:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80027fa:	2b00      	cmp	r3, #0
 80027fc:	d0f0      	beq.n	80027e0 <HAL_RCC_OscConfig+0x2d0>
          }
        }

        /* Adjusts the Internal High Speed oscillator (CSI) calibration value.*/
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->CSICalibrationValue);
 80027fe:	4b6d      	ldr	r3, [pc, #436]	; (80029b4 <HAL_RCC_OscConfig+0x4a4>)
 8002800:	68db      	ldr	r3, [r3, #12]
 8002802:	f023 527c 	bic.w	r2, r3, #1056964608	; 0x3f000000
 8002806:	687b      	ldr	r3, [r7, #4]
 8002808:	6a1b      	ldr	r3, [r3, #32]
 800280a:	061b      	lsls	r3, r3, #24
 800280c:	4969      	ldr	r1, [pc, #420]	; (80029b4 <HAL_RCC_OscConfig+0x4a4>)
 800280e:	4313      	orrs	r3, r2
 8002810:	60cb      	str	r3, [r1, #12]
 8002812:	e018      	b.n	8002846 <HAL_RCC_OscConfig+0x336>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (CSI). */
        __HAL_RCC_CSI_DISABLE();
 8002814:	4b67      	ldr	r3, [pc, #412]	; (80029b4 <HAL_RCC_OscConfig+0x4a4>)
 8002816:	681b      	ldr	r3, [r3, #0]
 8002818:	4a66      	ldr	r2, [pc, #408]	; (80029b4 <HAL_RCC_OscConfig+0x4a4>)
 800281a:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 800281e:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002820:	f7fe fed6 	bl	80015d0 <HAL_GetTick>
 8002824:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till CSI is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U)
 8002826:	e008      	b.n	800283a <HAL_RCC_OscConfig+0x32a>
        {
          if ((HAL_GetTick() - tickstart) > CSI_TIMEOUT_VALUE)
 8002828:	f7fe fed2 	bl	80015d0 <HAL_GetTick>
 800282c:	4602      	mov	r2, r0
 800282e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002830:	1ad3      	subs	r3, r2, r3
 8002832:	2b02      	cmp	r3, #2
 8002834:	d901      	bls.n	800283a <HAL_RCC_OscConfig+0x32a>
          {
            return HAL_TIMEOUT;
 8002836:	2303      	movs	r3, #3
 8002838:	e23c      	b.n	8002cb4 <HAL_RCC_OscConfig+0x7a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U)
 800283a:	4b5e      	ldr	r3, [pc, #376]	; (80029b4 <HAL_RCC_OscConfig+0x4a4>)
 800283c:	681b      	ldr	r3, [r3, #0]
 800283e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002842:	2b00      	cmp	r3, #0
 8002844:	d1f0      	bne.n	8002828 <HAL_RCC_OscConfig+0x318>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8002846:	687b      	ldr	r3, [r7, #4]
 8002848:	681b      	ldr	r3, [r3, #0]
 800284a:	f003 0308 	and.w	r3, r3, #8
 800284e:	2b00      	cmp	r3, #0
 8002850:	d036      	beq.n	80028c0 <HAL_RCC_OscConfig+0x3b0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if ((RCC_OscInitStruct->LSIState) != RCC_LSI_OFF)
 8002852:	687b      	ldr	r3, [r7, #4]
 8002854:	695b      	ldr	r3, [r3, #20]
 8002856:	2b00      	cmp	r3, #0
 8002858:	d019      	beq.n	800288e <HAL_RCC_OscConfig+0x37e>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 800285a:	4b56      	ldr	r3, [pc, #344]	; (80029b4 <HAL_RCC_OscConfig+0x4a4>)
 800285c:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800285e:	4a55      	ldr	r2, [pc, #340]	; (80029b4 <HAL_RCC_OscConfig+0x4a4>)
 8002860:	f043 0301 	orr.w	r3, r3, #1
 8002864:	6753      	str	r3, [r2, #116]	; 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002866:	f7fe feb3 	bl	80015d0 <HAL_GetTick>
 800286a:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == 0U)
 800286c:	e008      	b.n	8002880 <HAL_RCC_OscConfig+0x370>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 800286e:	f7fe feaf 	bl	80015d0 <HAL_GetTick>
 8002872:	4602      	mov	r2, r0
 8002874:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002876:	1ad3      	subs	r3, r2, r3
 8002878:	2b02      	cmp	r3, #2
 800287a:	d901      	bls.n	8002880 <HAL_RCC_OscConfig+0x370>
        {
          return HAL_TIMEOUT;
 800287c:	2303      	movs	r3, #3
 800287e:	e219      	b.n	8002cb4 <HAL_RCC_OscConfig+0x7a4>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == 0U)
 8002880:	4b4c      	ldr	r3, [pc, #304]	; (80029b4 <HAL_RCC_OscConfig+0x4a4>)
 8002882:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8002884:	f003 0302 	and.w	r3, r3, #2
 8002888:	2b00      	cmp	r3, #0
 800288a:	d0f0      	beq.n	800286e <HAL_RCC_OscConfig+0x35e>
 800288c:	e018      	b.n	80028c0 <HAL_RCC_OscConfig+0x3b0>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 800288e:	4b49      	ldr	r3, [pc, #292]	; (80029b4 <HAL_RCC_OscConfig+0x4a4>)
 8002890:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8002892:	4a48      	ldr	r2, [pc, #288]	; (80029b4 <HAL_RCC_OscConfig+0x4a4>)
 8002894:	f023 0301 	bic.w	r3, r3, #1
 8002898:	6753      	str	r3, [r2, #116]	; 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800289a:	f7fe fe99 	bl	80015d0 <HAL_GetTick>
 800289e:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != 0U)
 80028a0:	e008      	b.n	80028b4 <HAL_RCC_OscConfig+0x3a4>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 80028a2:	f7fe fe95 	bl	80015d0 <HAL_GetTick>
 80028a6:	4602      	mov	r2, r0
 80028a8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80028aa:	1ad3      	subs	r3, r2, r3
 80028ac:	2b02      	cmp	r3, #2
 80028ae:	d901      	bls.n	80028b4 <HAL_RCC_OscConfig+0x3a4>
        {
          return HAL_TIMEOUT;
 80028b0:	2303      	movs	r3, #3
 80028b2:	e1ff      	b.n	8002cb4 <HAL_RCC_OscConfig+0x7a4>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != 0U)
 80028b4:	4b3f      	ldr	r3, [pc, #252]	; (80029b4 <HAL_RCC_OscConfig+0x4a4>)
 80028b6:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80028b8:	f003 0302 	and.w	r3, r3, #2
 80028bc:	2b00      	cmp	r3, #0
 80028be:	d1f0      	bne.n	80028a2 <HAL_RCC_OscConfig+0x392>
      }
    }
  }

  /*------------------------------ HSI48 Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI48) == RCC_OSCILLATORTYPE_HSI48)
 80028c0:	687b      	ldr	r3, [r7, #4]
 80028c2:	681b      	ldr	r3, [r3, #0]
 80028c4:	f003 0320 	and.w	r3, r3, #32
 80028c8:	2b00      	cmp	r3, #0
 80028ca:	d036      	beq.n	800293a <HAL_RCC_OscConfig+0x42a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSI48(RCC_OscInitStruct->HSI48State));

    /* Check the HSI48 State */
    if ((RCC_OscInitStruct->HSI48State) != RCC_HSI48_OFF)
 80028cc:	687b      	ldr	r3, [r7, #4]
 80028ce:	699b      	ldr	r3, [r3, #24]
 80028d0:	2b00      	cmp	r3, #0
 80028d2:	d019      	beq.n	8002908 <HAL_RCC_OscConfig+0x3f8>
    {
      /* Enable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_ENABLE();
 80028d4:	4b37      	ldr	r3, [pc, #220]	; (80029b4 <HAL_RCC_OscConfig+0x4a4>)
 80028d6:	681b      	ldr	r3, [r3, #0]
 80028d8:	4a36      	ldr	r2, [pc, #216]	; (80029b4 <HAL_RCC_OscConfig+0x4a4>)
 80028da:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 80028de:	6013      	str	r3, [r2, #0]

      /* Get time-out */
      tickstart = HAL_GetTick();
 80028e0:	f7fe fe76 	bl	80015d0 <HAL_GetTick>
 80028e4:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till HSI48 is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) == 0U)
 80028e6:	e008      	b.n	80028fa <HAL_RCC_OscConfig+0x3ea>
      {
        if ((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 80028e8:	f7fe fe72 	bl	80015d0 <HAL_GetTick>
 80028ec:	4602      	mov	r2, r0
 80028ee:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80028f0:	1ad3      	subs	r3, r2, r3
 80028f2:	2b02      	cmp	r3, #2
 80028f4:	d901      	bls.n	80028fa <HAL_RCC_OscConfig+0x3ea>
        {
          return HAL_TIMEOUT;
 80028f6:	2303      	movs	r3, #3
 80028f8:	e1dc      	b.n	8002cb4 <HAL_RCC_OscConfig+0x7a4>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) == 0U)
 80028fa:	4b2e      	ldr	r3, [pc, #184]	; (80029b4 <HAL_RCC_OscConfig+0x4a4>)
 80028fc:	681b      	ldr	r3, [r3, #0]
 80028fe:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8002902:	2b00      	cmp	r3, #0
 8002904:	d0f0      	beq.n	80028e8 <HAL_RCC_OscConfig+0x3d8>
 8002906:	e018      	b.n	800293a <HAL_RCC_OscConfig+0x42a>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_DISABLE();
 8002908:	4b2a      	ldr	r3, [pc, #168]	; (80029b4 <HAL_RCC_OscConfig+0x4a4>)
 800290a:	681b      	ldr	r3, [r3, #0]
 800290c:	4a29      	ldr	r2, [pc, #164]	; (80029b4 <HAL_RCC_OscConfig+0x4a4>)
 800290e:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8002912:	6013      	str	r3, [r2, #0]

      /* Get time-out */
      tickstart = HAL_GetTick();
 8002914:	f7fe fe5c 	bl	80015d0 <HAL_GetTick>
 8002918:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till HSI48 is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) != 0U)
 800291a:	e008      	b.n	800292e <HAL_RCC_OscConfig+0x41e>
      {
        if ((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 800291c:	f7fe fe58 	bl	80015d0 <HAL_GetTick>
 8002920:	4602      	mov	r2, r0
 8002922:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002924:	1ad3      	subs	r3, r2, r3
 8002926:	2b02      	cmp	r3, #2
 8002928:	d901      	bls.n	800292e <HAL_RCC_OscConfig+0x41e>
        {
          return HAL_TIMEOUT;
 800292a:	2303      	movs	r3, #3
 800292c:	e1c2      	b.n	8002cb4 <HAL_RCC_OscConfig+0x7a4>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) != 0U)
 800292e:	4b21      	ldr	r3, [pc, #132]	; (80029b4 <HAL_RCC_OscConfig+0x4a4>)
 8002930:	681b      	ldr	r3, [r3, #0]
 8002932:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8002936:	2b00      	cmp	r3, #0
 8002938:	d1f0      	bne.n	800291c <HAL_RCC_OscConfig+0x40c>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 800293a:	687b      	ldr	r3, [r7, #4]
 800293c:	681b      	ldr	r3, [r3, #0]
 800293e:	f003 0304 	and.w	r3, r3, #4
 8002942:	2b00      	cmp	r3, #0
 8002944:	f000 8086 	beq.w	8002a54 <HAL_RCC_OscConfig+0x544>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Enable write access to Backup domain */
    PWR->CR1 |= PWR_CR1_DBP;
 8002948:	4b1b      	ldr	r3, [pc, #108]	; (80029b8 <HAL_RCC_OscConfig+0x4a8>)
 800294a:	681b      	ldr	r3, [r3, #0]
 800294c:	4a1a      	ldr	r2, [pc, #104]	; (80029b8 <HAL_RCC_OscConfig+0x4a8>)
 800294e:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8002952:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 8002954:	f7fe fe3c 	bl	80015d0 <HAL_GetTick>
 8002958:	6278      	str	r0, [r7, #36]	; 0x24

    while ((PWR->CR1 & PWR_CR1_DBP) == 0U)
 800295a:	e008      	b.n	800296e <HAL_RCC_OscConfig+0x45e>
    {
      if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800295c:	f7fe fe38 	bl	80015d0 <HAL_GetTick>
 8002960:	4602      	mov	r2, r0
 8002962:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002964:	1ad3      	subs	r3, r2, r3
 8002966:	2b64      	cmp	r3, #100	; 0x64
 8002968:	d901      	bls.n	800296e <HAL_RCC_OscConfig+0x45e>
      {
        return HAL_TIMEOUT;
 800296a:	2303      	movs	r3, #3
 800296c:	e1a2      	b.n	8002cb4 <HAL_RCC_OscConfig+0x7a4>
    while ((PWR->CR1 & PWR_CR1_DBP) == 0U)
 800296e:	4b12      	ldr	r3, [pc, #72]	; (80029b8 <HAL_RCC_OscConfig+0x4a8>)
 8002970:	681b      	ldr	r3, [r3, #0]
 8002972:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002976:	2b00      	cmp	r3, #0
 8002978:	d0f0      	beq.n	800295c <HAL_RCC_OscConfig+0x44c>
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 800297a:	687b      	ldr	r3, [r7, #4]
 800297c:	689b      	ldr	r3, [r3, #8]
 800297e:	2b01      	cmp	r3, #1
 8002980:	d106      	bne.n	8002990 <HAL_RCC_OscConfig+0x480>
 8002982:	4b0c      	ldr	r3, [pc, #48]	; (80029b4 <HAL_RCC_OscConfig+0x4a4>)
 8002984:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002986:	4a0b      	ldr	r2, [pc, #44]	; (80029b4 <HAL_RCC_OscConfig+0x4a4>)
 8002988:	f043 0301 	orr.w	r3, r3, #1
 800298c:	6713      	str	r3, [r2, #112]	; 0x70
 800298e:	e032      	b.n	80029f6 <HAL_RCC_OscConfig+0x4e6>
 8002990:	687b      	ldr	r3, [r7, #4]
 8002992:	689b      	ldr	r3, [r3, #8]
 8002994:	2b00      	cmp	r3, #0
 8002996:	d111      	bne.n	80029bc <HAL_RCC_OscConfig+0x4ac>
 8002998:	4b06      	ldr	r3, [pc, #24]	; (80029b4 <HAL_RCC_OscConfig+0x4a4>)
 800299a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800299c:	4a05      	ldr	r2, [pc, #20]	; (80029b4 <HAL_RCC_OscConfig+0x4a4>)
 800299e:	f023 0301 	bic.w	r3, r3, #1
 80029a2:	6713      	str	r3, [r2, #112]	; 0x70
 80029a4:	4b03      	ldr	r3, [pc, #12]	; (80029b4 <HAL_RCC_OscConfig+0x4a4>)
 80029a6:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80029a8:	4a02      	ldr	r2, [pc, #8]	; (80029b4 <HAL_RCC_OscConfig+0x4a4>)
 80029aa:	f023 0304 	bic.w	r3, r3, #4
 80029ae:	6713      	str	r3, [r2, #112]	; 0x70
 80029b0:	e021      	b.n	80029f6 <HAL_RCC_OscConfig+0x4e6>
 80029b2:	bf00      	nop
 80029b4:	58024400 	.word	0x58024400
 80029b8:	58024800 	.word	0x58024800
 80029bc:	687b      	ldr	r3, [r7, #4]
 80029be:	689b      	ldr	r3, [r3, #8]
 80029c0:	2b05      	cmp	r3, #5
 80029c2:	d10c      	bne.n	80029de <HAL_RCC_OscConfig+0x4ce>
 80029c4:	4b83      	ldr	r3, [pc, #524]	; (8002bd4 <HAL_RCC_OscConfig+0x6c4>)
 80029c6:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80029c8:	4a82      	ldr	r2, [pc, #520]	; (8002bd4 <HAL_RCC_OscConfig+0x6c4>)
 80029ca:	f043 0304 	orr.w	r3, r3, #4
 80029ce:	6713      	str	r3, [r2, #112]	; 0x70
 80029d0:	4b80      	ldr	r3, [pc, #512]	; (8002bd4 <HAL_RCC_OscConfig+0x6c4>)
 80029d2:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80029d4:	4a7f      	ldr	r2, [pc, #508]	; (8002bd4 <HAL_RCC_OscConfig+0x6c4>)
 80029d6:	f043 0301 	orr.w	r3, r3, #1
 80029da:	6713      	str	r3, [r2, #112]	; 0x70
 80029dc:	e00b      	b.n	80029f6 <HAL_RCC_OscConfig+0x4e6>
 80029de:	4b7d      	ldr	r3, [pc, #500]	; (8002bd4 <HAL_RCC_OscConfig+0x6c4>)
 80029e0:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80029e2:	4a7c      	ldr	r2, [pc, #496]	; (8002bd4 <HAL_RCC_OscConfig+0x6c4>)
 80029e4:	f023 0301 	bic.w	r3, r3, #1
 80029e8:	6713      	str	r3, [r2, #112]	; 0x70
 80029ea:	4b7a      	ldr	r3, [pc, #488]	; (8002bd4 <HAL_RCC_OscConfig+0x6c4>)
 80029ec:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80029ee:	4a79      	ldr	r2, [pc, #484]	; (8002bd4 <HAL_RCC_OscConfig+0x6c4>)
 80029f0:	f023 0304 	bic.w	r3, r3, #4
 80029f4:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if ((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 80029f6:	687b      	ldr	r3, [r7, #4]
 80029f8:	689b      	ldr	r3, [r3, #8]
 80029fa:	2b00      	cmp	r3, #0
 80029fc:	d015      	beq.n	8002a2a <HAL_RCC_OscConfig+0x51a>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80029fe:	f7fe fde7 	bl	80015d0 <HAL_GetTick>
 8002a02:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 8002a04:	e00a      	b.n	8002a1c <HAL_RCC_OscConfig+0x50c>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8002a06:	f7fe fde3 	bl	80015d0 <HAL_GetTick>
 8002a0a:	4602      	mov	r2, r0
 8002a0c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002a0e:	1ad3      	subs	r3, r2, r3
 8002a10:	f241 3288 	movw	r2, #5000	; 0x1388
 8002a14:	4293      	cmp	r3, r2
 8002a16:	d901      	bls.n	8002a1c <HAL_RCC_OscConfig+0x50c>
        {
          return HAL_TIMEOUT;
 8002a18:	2303      	movs	r3, #3
 8002a1a:	e14b      	b.n	8002cb4 <HAL_RCC_OscConfig+0x7a4>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 8002a1c:	4b6d      	ldr	r3, [pc, #436]	; (8002bd4 <HAL_RCC_OscConfig+0x6c4>)
 8002a1e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002a20:	f003 0302 	and.w	r3, r3, #2
 8002a24:	2b00      	cmp	r3, #0
 8002a26:	d0ee      	beq.n	8002a06 <HAL_RCC_OscConfig+0x4f6>
 8002a28:	e014      	b.n	8002a54 <HAL_RCC_OscConfig+0x544>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002a2a:	f7fe fdd1 	bl	80015d0 <HAL_GetTick>
 8002a2e:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till LSE is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != 0U)
 8002a30:	e00a      	b.n	8002a48 <HAL_RCC_OscConfig+0x538>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8002a32:	f7fe fdcd 	bl	80015d0 <HAL_GetTick>
 8002a36:	4602      	mov	r2, r0
 8002a38:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002a3a:	1ad3      	subs	r3, r2, r3
 8002a3c:	f241 3288 	movw	r2, #5000	; 0x1388
 8002a40:	4293      	cmp	r3, r2
 8002a42:	d901      	bls.n	8002a48 <HAL_RCC_OscConfig+0x538>
        {
          return HAL_TIMEOUT;
 8002a44:	2303      	movs	r3, #3
 8002a46:	e135      	b.n	8002cb4 <HAL_RCC_OscConfig+0x7a4>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != 0U)
 8002a48:	4b62      	ldr	r3, [pc, #392]	; (8002bd4 <HAL_RCC_OscConfig+0x6c4>)
 8002a4a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002a4c:	f003 0302 	and.w	r3, r3, #2
 8002a50:	2b00      	cmp	r3, #0
 8002a52:	d1ee      	bne.n	8002a32 <HAL_RCC_OscConfig+0x522>
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8002a54:	687b      	ldr	r3, [r7, #4]
 8002a56:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002a58:	2b00      	cmp	r3, #0
 8002a5a:	f000 812a 	beq.w	8002cb2 <HAL_RCC_OscConfig+0x7a2>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL1)
 8002a5e:	4b5d      	ldr	r3, [pc, #372]	; (8002bd4 <HAL_RCC_OscConfig+0x6c4>)
 8002a60:	691b      	ldr	r3, [r3, #16]
 8002a62:	f003 0338 	and.w	r3, r3, #56	; 0x38
 8002a66:	2b18      	cmp	r3, #24
 8002a68:	f000 80ba 	beq.w	8002be0 <HAL_RCC_OscConfig+0x6d0>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8002a6c:	687b      	ldr	r3, [r7, #4]
 8002a6e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002a70:	2b02      	cmp	r3, #2
 8002a72:	f040 8095 	bne.w	8002ba0 <HAL_RCC_OscConfig+0x690>
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));
        assert_param(IS_RCC_PLLFRACN_VALUE(RCC_OscInitStruct->PLL.PLLFRACN));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8002a76:	4b57      	ldr	r3, [pc, #348]	; (8002bd4 <HAL_RCC_OscConfig+0x6c4>)
 8002a78:	681b      	ldr	r3, [r3, #0]
 8002a7a:	4a56      	ldr	r2, [pc, #344]	; (8002bd4 <HAL_RCC_OscConfig+0x6c4>)
 8002a7c:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8002a80:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002a82:	f7fe fda5 	bl	80015d0 <HAL_GetTick>
 8002a86:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 8002a88:	e008      	b.n	8002a9c <HAL_RCC_OscConfig+0x58c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8002a8a:	f7fe fda1 	bl	80015d0 <HAL_GetTick>
 8002a8e:	4602      	mov	r2, r0
 8002a90:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002a92:	1ad3      	subs	r3, r2, r3
 8002a94:	2b02      	cmp	r3, #2
 8002a96:	d901      	bls.n	8002a9c <HAL_RCC_OscConfig+0x58c>
          {
            return HAL_TIMEOUT;
 8002a98:	2303      	movs	r3, #3
 8002a9a:	e10b      	b.n	8002cb4 <HAL_RCC_OscConfig+0x7a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 8002a9c:	4b4d      	ldr	r3, [pc, #308]	; (8002bd4 <HAL_RCC_OscConfig+0x6c4>)
 8002a9e:	681b      	ldr	r3, [r3, #0]
 8002aa0:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002aa4:	2b00      	cmp	r3, #0
 8002aa6:	d1f0      	bne.n	8002a8a <HAL_RCC_OscConfig+0x57a>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8002aa8:	4b4a      	ldr	r3, [pc, #296]	; (8002bd4 <HAL_RCC_OscConfig+0x6c4>)
 8002aaa:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8002aac:	4b4a      	ldr	r3, [pc, #296]	; (8002bd8 <HAL_RCC_OscConfig+0x6c8>)
 8002aae:	4013      	ands	r3, r2
 8002ab0:	687a      	ldr	r2, [r7, #4]
 8002ab2:	6a91      	ldr	r1, [r2, #40]	; 0x28
 8002ab4:	687a      	ldr	r2, [r7, #4]
 8002ab6:	6ad2      	ldr	r2, [r2, #44]	; 0x2c
 8002ab8:	0112      	lsls	r2, r2, #4
 8002aba:	430a      	orrs	r2, r1
 8002abc:	4945      	ldr	r1, [pc, #276]	; (8002bd4 <HAL_RCC_OscConfig+0x6c4>)
 8002abe:	4313      	orrs	r3, r2
 8002ac0:	628b      	str	r3, [r1, #40]	; 0x28
 8002ac2:	687b      	ldr	r3, [r7, #4]
 8002ac4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002ac6:	3b01      	subs	r3, #1
 8002ac8:	f3c3 0208 	ubfx	r2, r3, #0, #9
 8002acc:	687b      	ldr	r3, [r7, #4]
 8002ace:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8002ad0:	3b01      	subs	r3, #1
 8002ad2:	025b      	lsls	r3, r3, #9
 8002ad4:	b29b      	uxth	r3, r3
 8002ad6:	431a      	orrs	r2, r3
 8002ad8:	687b      	ldr	r3, [r7, #4]
 8002ada:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002adc:	3b01      	subs	r3, #1
 8002ade:	041b      	lsls	r3, r3, #16
 8002ae0:	f403 03fe 	and.w	r3, r3, #8323072	; 0x7f0000
 8002ae4:	431a      	orrs	r2, r3
 8002ae6:	687b      	ldr	r3, [r7, #4]
 8002ae8:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002aea:	3b01      	subs	r3, #1
 8002aec:	061b      	lsls	r3, r3, #24
 8002aee:	f003 43fe 	and.w	r3, r3, #2130706432	; 0x7f000000
 8002af2:	4938      	ldr	r1, [pc, #224]	; (8002bd4 <HAL_RCC_OscConfig+0x6c4>)
 8002af4:	4313      	orrs	r3, r2
 8002af6:	630b      	str	r3, [r1, #48]	; 0x30
                             RCC_OscInitStruct->PLL.PLLP,
                             RCC_OscInitStruct->PLL.PLLQ,
                             RCC_OscInitStruct->PLL.PLLR);

        /* Disable PLLFRACN . */
        __HAL_RCC_PLLFRACN_DISABLE();
 8002af8:	4b36      	ldr	r3, [pc, #216]	; (8002bd4 <HAL_RCC_OscConfig+0x6c4>)
 8002afa:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002afc:	4a35      	ldr	r2, [pc, #212]	; (8002bd4 <HAL_RCC_OscConfig+0x6c4>)
 8002afe:	f023 0301 	bic.w	r3, r3, #1
 8002b02:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* Configure PLL PLL1FRACN */
        __HAL_RCC_PLLFRACN_CONFIG(RCC_OscInitStruct->PLL.PLLFRACN);
 8002b04:	4b33      	ldr	r3, [pc, #204]	; (8002bd4 <HAL_RCC_OscConfig+0x6c4>)
 8002b06:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8002b08:	4b34      	ldr	r3, [pc, #208]	; (8002bdc <HAL_RCC_OscConfig+0x6cc>)
 8002b0a:	4013      	ands	r3, r2
 8002b0c:	687a      	ldr	r2, [r7, #4]
 8002b0e:	6c92      	ldr	r2, [r2, #72]	; 0x48
 8002b10:	00d2      	lsls	r2, r2, #3
 8002b12:	4930      	ldr	r1, [pc, #192]	; (8002bd4 <HAL_RCC_OscConfig+0x6c4>)
 8002b14:	4313      	orrs	r3, r2
 8002b16:	634b      	str	r3, [r1, #52]	; 0x34

        /* Select PLL1 input reference frequency range: VCI */
        __HAL_RCC_PLL_VCIRANGE(RCC_OscInitStruct->PLL.PLLRGE) ;
 8002b18:	4b2e      	ldr	r3, [pc, #184]	; (8002bd4 <HAL_RCC_OscConfig+0x6c4>)
 8002b1a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002b1c:	f023 020c 	bic.w	r2, r3, #12
 8002b20:	687b      	ldr	r3, [r7, #4]
 8002b22:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002b24:	492b      	ldr	r1, [pc, #172]	; (8002bd4 <HAL_RCC_OscConfig+0x6c4>)
 8002b26:	4313      	orrs	r3, r2
 8002b28:	62cb      	str	r3, [r1, #44]	; 0x2c

        /* Select PLL1 output frequency range : VCO */
        __HAL_RCC_PLL_VCORANGE(RCC_OscInitStruct->PLL.PLLVCOSEL) ;
 8002b2a:	4b2a      	ldr	r3, [pc, #168]	; (8002bd4 <HAL_RCC_OscConfig+0x6c4>)
 8002b2c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002b2e:	f023 0202 	bic.w	r2, r3, #2
 8002b32:	687b      	ldr	r3, [r7, #4]
 8002b34:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002b36:	4927      	ldr	r1, [pc, #156]	; (8002bd4 <HAL_RCC_OscConfig+0x6c4>)
 8002b38:	4313      	orrs	r3, r2
 8002b3a:	62cb      	str	r3, [r1, #44]	; 0x2c

        /* Enable PLL System Clock output. */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVP);
 8002b3c:	4b25      	ldr	r3, [pc, #148]	; (8002bd4 <HAL_RCC_OscConfig+0x6c4>)
 8002b3e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002b40:	4a24      	ldr	r2, [pc, #144]	; (8002bd4 <HAL_RCC_OscConfig+0x6c4>)
 8002b42:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8002b46:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* Enable PLL1Q Clock output. */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8002b48:	4b22      	ldr	r3, [pc, #136]	; (8002bd4 <HAL_RCC_OscConfig+0x6c4>)
 8002b4a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002b4c:	4a21      	ldr	r2, [pc, #132]	; (8002bd4 <HAL_RCC_OscConfig+0x6c4>)
 8002b4e:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8002b52:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* Enable PLL1R  Clock output. */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVR);
 8002b54:	4b1f      	ldr	r3, [pc, #124]	; (8002bd4 <HAL_RCC_OscConfig+0x6c4>)
 8002b56:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002b58:	4a1e      	ldr	r2, [pc, #120]	; (8002bd4 <HAL_RCC_OscConfig+0x6c4>)
 8002b5a:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8002b5e:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* Enable PLL1FRACN . */
        __HAL_RCC_PLLFRACN_ENABLE();
 8002b60:	4b1c      	ldr	r3, [pc, #112]	; (8002bd4 <HAL_RCC_OscConfig+0x6c4>)
 8002b62:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002b64:	4a1b      	ldr	r2, [pc, #108]	; (8002bd4 <HAL_RCC_OscConfig+0x6c4>)
 8002b66:	f043 0301 	orr.w	r3, r3, #1
 8002b6a:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8002b6c:	4b19      	ldr	r3, [pc, #100]	; (8002bd4 <HAL_RCC_OscConfig+0x6c4>)
 8002b6e:	681b      	ldr	r3, [r3, #0]
 8002b70:	4a18      	ldr	r2, [pc, #96]	; (8002bd4 <HAL_RCC_OscConfig+0x6c4>)
 8002b72:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8002b76:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002b78:	f7fe fd2a 	bl	80015d0 <HAL_GetTick>
 8002b7c:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 8002b7e:	e008      	b.n	8002b92 <HAL_RCC_OscConfig+0x682>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8002b80:	f7fe fd26 	bl	80015d0 <HAL_GetTick>
 8002b84:	4602      	mov	r2, r0
 8002b86:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002b88:	1ad3      	subs	r3, r2, r3
 8002b8a:	2b02      	cmp	r3, #2
 8002b8c:	d901      	bls.n	8002b92 <HAL_RCC_OscConfig+0x682>
          {
            return HAL_TIMEOUT;
 8002b8e:	2303      	movs	r3, #3
 8002b90:	e090      	b.n	8002cb4 <HAL_RCC_OscConfig+0x7a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 8002b92:	4b10      	ldr	r3, [pc, #64]	; (8002bd4 <HAL_RCC_OscConfig+0x6c4>)
 8002b94:	681b      	ldr	r3, [r3, #0]
 8002b96:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002b9a:	2b00      	cmp	r3, #0
 8002b9c:	d0f0      	beq.n	8002b80 <HAL_RCC_OscConfig+0x670>
 8002b9e:	e088      	b.n	8002cb2 <HAL_RCC_OscConfig+0x7a2>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8002ba0:	4b0c      	ldr	r3, [pc, #48]	; (8002bd4 <HAL_RCC_OscConfig+0x6c4>)
 8002ba2:	681b      	ldr	r3, [r3, #0]
 8002ba4:	4a0b      	ldr	r2, [pc, #44]	; (8002bd4 <HAL_RCC_OscConfig+0x6c4>)
 8002ba6:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8002baa:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002bac:	f7fe fd10 	bl	80015d0 <HAL_GetTick>
 8002bb0:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 8002bb2:	e008      	b.n	8002bc6 <HAL_RCC_OscConfig+0x6b6>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8002bb4:	f7fe fd0c 	bl	80015d0 <HAL_GetTick>
 8002bb8:	4602      	mov	r2, r0
 8002bba:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002bbc:	1ad3      	subs	r3, r2, r3
 8002bbe:	2b02      	cmp	r3, #2
 8002bc0:	d901      	bls.n	8002bc6 <HAL_RCC_OscConfig+0x6b6>
          {
            return HAL_TIMEOUT;
 8002bc2:	2303      	movs	r3, #3
 8002bc4:	e076      	b.n	8002cb4 <HAL_RCC_OscConfig+0x7a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 8002bc6:	4b03      	ldr	r3, [pc, #12]	; (8002bd4 <HAL_RCC_OscConfig+0x6c4>)
 8002bc8:	681b      	ldr	r3, [r3, #0]
 8002bca:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002bce:	2b00      	cmp	r3, #0
 8002bd0:	d1f0      	bne.n	8002bb4 <HAL_RCC_OscConfig+0x6a4>
 8002bd2:	e06e      	b.n	8002cb2 <HAL_RCC_OscConfig+0x7a2>
 8002bd4:	58024400 	.word	0x58024400
 8002bd8:	fffffc0c 	.word	0xfffffc0c
 8002bdc:	ffff0007 	.word	0xffff0007
      }
    }
    else
    {
      /* Do not return HAL_ERROR if request repeats the current configuration */
      temp1_pllckcfg = RCC->PLLCKSELR;
 8002be0:	4b36      	ldr	r3, [pc, #216]	; (8002cbc <HAL_RCC_OscConfig+0x7ac>)
 8002be2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002be4:	613b      	str	r3, [r7, #16]
      temp2_pllckcfg = RCC->PLL1DIVR;
 8002be6:	4b35      	ldr	r3, [pc, #212]	; (8002cbc <HAL_RCC_OscConfig+0x7ac>)
 8002be8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002bea:	60fb      	str	r3, [r7, #12]
      if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8002bec:	687b      	ldr	r3, [r7, #4]
 8002bee:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002bf0:	2b01      	cmp	r3, #1
 8002bf2:	d031      	beq.n	8002c58 <HAL_RCC_OscConfig+0x748>
          (READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8002bf4:	693b      	ldr	r3, [r7, #16]
 8002bf6:	f003 0203 	and.w	r2, r3, #3
 8002bfa:	687b      	ldr	r3, [r7, #4]
 8002bfc:	6a9b      	ldr	r3, [r3, #40]	; 0x28
      if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8002bfe:	429a      	cmp	r2, r3
 8002c00:	d12a      	bne.n	8002c58 <HAL_RCC_OscConfig+0x748>
          ((READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_DIVM1) >> RCC_PLLCKSELR_DIVM1_Pos) != RCC_OscInitStruct->PLL.PLLM) ||
 8002c02:	693b      	ldr	r3, [r7, #16]
 8002c04:	091b      	lsrs	r3, r3, #4
 8002c06:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 8002c0a:	687b      	ldr	r3, [r7, #4]
 8002c0c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
          (READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8002c0e:	429a      	cmp	r2, r3
 8002c10:	d122      	bne.n	8002c58 <HAL_RCC_OscConfig+0x748>
          (READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_N1) != (RCC_OscInitStruct->PLL.PLLN - 1U)) ||
 8002c12:	68fb      	ldr	r3, [r7, #12]
 8002c14:	f3c3 0208 	ubfx	r2, r3, #0, #9
 8002c18:	687b      	ldr	r3, [r7, #4]
 8002c1a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002c1c:	3b01      	subs	r3, #1
          ((READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_DIVM1) >> RCC_PLLCKSELR_DIVM1_Pos) != RCC_OscInitStruct->PLL.PLLM) ||
 8002c1e:	429a      	cmp	r2, r3
 8002c20:	d11a      	bne.n	8002c58 <HAL_RCC_OscConfig+0x748>
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_P1) >> RCC_PLL1DIVR_P1_Pos) != (RCC_OscInitStruct->PLL.PLLP - 1U)) ||
 8002c22:	68fb      	ldr	r3, [r7, #12]
 8002c24:	0a5b      	lsrs	r3, r3, #9
 8002c26:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 8002c2a:	687b      	ldr	r3, [r7, #4]
 8002c2c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8002c2e:	3b01      	subs	r3, #1
          (READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_N1) != (RCC_OscInitStruct->PLL.PLLN - 1U)) ||
 8002c30:	429a      	cmp	r2, r3
 8002c32:	d111      	bne.n	8002c58 <HAL_RCC_OscConfig+0x748>
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_Q1) >> RCC_PLL1DIVR_Q1_Pos) != (RCC_OscInitStruct->PLL.PLLQ - 1U)) ||
 8002c34:	68fb      	ldr	r3, [r7, #12]
 8002c36:	0c1b      	lsrs	r3, r3, #16
 8002c38:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 8002c3c:	687b      	ldr	r3, [r7, #4]
 8002c3e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002c40:	3b01      	subs	r3, #1
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_P1) >> RCC_PLL1DIVR_P1_Pos) != (RCC_OscInitStruct->PLL.PLLP - 1U)) ||
 8002c42:	429a      	cmp	r2, r3
 8002c44:	d108      	bne.n	8002c58 <HAL_RCC_OscConfig+0x748>
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_R1) >> RCC_PLL1DIVR_R1_Pos) != (RCC_OscInitStruct->PLL.PLLR - 1U)))
 8002c46:	68fb      	ldr	r3, [r7, #12]
 8002c48:	0e1b      	lsrs	r3, r3, #24
 8002c4a:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 8002c4e:	687b      	ldr	r3, [r7, #4]
 8002c50:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002c52:	3b01      	subs	r3, #1
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_Q1) >> RCC_PLL1DIVR_Q1_Pos) != (RCC_OscInitStruct->PLL.PLLQ - 1U)) ||
 8002c54:	429a      	cmp	r2, r3
 8002c56:	d001      	beq.n	8002c5c <HAL_RCC_OscConfig+0x74c>
      {
        return HAL_ERROR;
 8002c58:	2301      	movs	r3, #1
 8002c5a:	e02b      	b.n	8002cb4 <HAL_RCC_OscConfig+0x7a4>
      }
      else
      {
        /* Check if only fractional part needs to be updated  */
        temp1_pllckcfg = ((RCC->PLL1FRACR & RCC_PLL1FRACR_FRACN1) >> RCC_PLL1FRACR_FRACN1_Pos);
 8002c5c:	4b17      	ldr	r3, [pc, #92]	; (8002cbc <HAL_RCC_OscConfig+0x7ac>)
 8002c5e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8002c60:	08db      	lsrs	r3, r3, #3
 8002c62:	f3c3 030c 	ubfx	r3, r3, #0, #13
 8002c66:	613b      	str	r3, [r7, #16]
        if (RCC_OscInitStruct->PLL.PLLFRACN != temp1_pllckcfg)
 8002c68:	687b      	ldr	r3, [r7, #4]
 8002c6a:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8002c6c:	693a      	ldr	r2, [r7, #16]
 8002c6e:	429a      	cmp	r2, r3
 8002c70:	d01f      	beq.n	8002cb2 <HAL_RCC_OscConfig+0x7a2>
        {
          assert_param(IS_RCC_PLLFRACN_VALUE(RCC_OscInitStruct->PLL.PLLFRACN));
          /* Disable PLL1FRACEN */
          __HAL_RCC_PLLFRACN_DISABLE();
 8002c72:	4b12      	ldr	r3, [pc, #72]	; (8002cbc <HAL_RCC_OscConfig+0x7ac>)
 8002c74:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002c76:	4a11      	ldr	r2, [pc, #68]	; (8002cbc <HAL_RCC_OscConfig+0x7ac>)
 8002c78:	f023 0301 	bic.w	r3, r3, #1
 8002c7c:	62d3      	str	r3, [r2, #44]	; 0x2c
          /* Get Start Tick*/
          tickstart = HAL_GetTick();
 8002c7e:	f7fe fca7 	bl	80015d0 <HAL_GetTick>
 8002c82:	6278      	str	r0, [r7, #36]	; 0x24
          /* Wait at least 2 CK_REF (PLL input source divided by M) period to make sure next latched value will be taken into account. */
          while ((HAL_GetTick() - tickstart) < PLL_FRAC_TIMEOUT_VALUE)
 8002c84:	bf00      	nop
 8002c86:	f7fe fca3 	bl	80015d0 <HAL_GetTick>
 8002c8a:	4602      	mov	r2, r0
 8002c8c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002c8e:	4293      	cmp	r3, r2
 8002c90:	d0f9      	beq.n	8002c86 <HAL_RCC_OscConfig+0x776>
          {
          }
          /* Configure PLL1 PLL1FRACN */
          __HAL_RCC_PLLFRACN_CONFIG(RCC_OscInitStruct->PLL.PLLFRACN);
 8002c92:	4b0a      	ldr	r3, [pc, #40]	; (8002cbc <HAL_RCC_OscConfig+0x7ac>)
 8002c94:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8002c96:	4b0a      	ldr	r3, [pc, #40]	; (8002cc0 <HAL_RCC_OscConfig+0x7b0>)
 8002c98:	4013      	ands	r3, r2
 8002c9a:	687a      	ldr	r2, [r7, #4]
 8002c9c:	6c92      	ldr	r2, [r2, #72]	; 0x48
 8002c9e:	00d2      	lsls	r2, r2, #3
 8002ca0:	4906      	ldr	r1, [pc, #24]	; (8002cbc <HAL_RCC_OscConfig+0x7ac>)
 8002ca2:	4313      	orrs	r3, r2
 8002ca4:	634b      	str	r3, [r1, #52]	; 0x34
          /* Enable PLL1FRACEN to latch new value. */
          __HAL_RCC_PLLFRACN_ENABLE();
 8002ca6:	4b05      	ldr	r3, [pc, #20]	; (8002cbc <HAL_RCC_OscConfig+0x7ac>)
 8002ca8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002caa:	4a04      	ldr	r2, [pc, #16]	; (8002cbc <HAL_RCC_OscConfig+0x7ac>)
 8002cac:	f043 0301 	orr.w	r3, r3, #1
 8002cb0:	62d3      	str	r3, [r2, #44]	; 0x2c
        }
      }
    }
  }
  return HAL_OK;
 8002cb2:	2300      	movs	r3, #0
}
 8002cb4:	4618      	mov	r0, r3
 8002cb6:	3730      	adds	r7, #48	; 0x30
 8002cb8:	46bd      	mov	sp, r7
 8002cba:	bd80      	pop	{r7, pc}
 8002cbc:	58024400 	.word	0x58024400
 8002cc0:	ffff0007 	.word	0xffff0007

08002cc4 <HAL_RCC_ClockConfig>:
  *         D1CPRE[3:0] bits to ensure that  Domain1 core clock not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8002cc4:	b580      	push	{r7, lr}
 8002cc6:	b086      	sub	sp, #24
 8002cc8:	af00      	add	r7, sp, #0
 8002cca:	6078      	str	r0, [r7, #4]
 8002ccc:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef halstatus;
  uint32_t tickstart;
  uint32_t common_system_clock;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 8002cce:	687b      	ldr	r3, [r7, #4]
 8002cd0:	2b00      	cmp	r3, #0
 8002cd2:	d101      	bne.n	8002cd8 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8002cd4:	2301      	movs	r3, #1
 8002cd6:	e19c      	b.n	8003012 <HAL_RCC_ClockConfig+0x34e>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8002cd8:	4b8a      	ldr	r3, [pc, #552]	; (8002f04 <HAL_RCC_ClockConfig+0x240>)
 8002cda:	681b      	ldr	r3, [r3, #0]
 8002cdc:	f003 030f 	and.w	r3, r3, #15
 8002ce0:	683a      	ldr	r2, [r7, #0]
 8002ce2:	429a      	cmp	r2, r3
 8002ce4:	d910      	bls.n	8002d08 <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8002ce6:	4b87      	ldr	r3, [pc, #540]	; (8002f04 <HAL_RCC_ClockConfig+0x240>)
 8002ce8:	681b      	ldr	r3, [r3, #0]
 8002cea:	f023 020f 	bic.w	r2, r3, #15
 8002cee:	4985      	ldr	r1, [pc, #532]	; (8002f04 <HAL_RCC_ClockConfig+0x240>)
 8002cf0:	683b      	ldr	r3, [r7, #0]
 8002cf2:	4313      	orrs	r3, r2
 8002cf4:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8002cf6:	4b83      	ldr	r3, [pc, #524]	; (8002f04 <HAL_RCC_ClockConfig+0x240>)
 8002cf8:	681b      	ldr	r3, [r3, #0]
 8002cfa:	f003 030f 	and.w	r3, r3, #15
 8002cfe:	683a      	ldr	r2, [r7, #0]
 8002d00:	429a      	cmp	r2, r3
 8002d02:	d001      	beq.n	8002d08 <HAL_RCC_ClockConfig+0x44>
    {
      return HAL_ERROR;
 8002d04:	2301      	movs	r3, #1
 8002d06:	e184      	b.n	8003012 <HAL_RCC_ClockConfig+0x34e>

  }

  /* Increasing the BUS frequency divider */
  /*-------------------------- D1PCLK1/CDPCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D1PCLK1) == RCC_CLOCKTYPE_D1PCLK1)
 8002d08:	687b      	ldr	r3, [r7, #4]
 8002d0a:	681b      	ldr	r3, [r3, #0]
 8002d0c:	f003 0304 	and.w	r3, r3, #4
 8002d10:	2b00      	cmp	r3, #0
 8002d12:	d010      	beq.n	8002d36 <HAL_RCC_ClockConfig+0x72>
  {
#if defined (RCC_D1CFGR_D1PPRE)
    if ((RCC_ClkInitStruct->APB3CLKDivider) > (RCC->D1CFGR & RCC_D1CFGR_D1PPRE))
 8002d14:	687b      	ldr	r3, [r7, #4]
 8002d16:	691a      	ldr	r2, [r3, #16]
 8002d18:	4b7b      	ldr	r3, [pc, #492]	; (8002f08 <HAL_RCC_ClockConfig+0x244>)
 8002d1a:	699b      	ldr	r3, [r3, #24]
 8002d1c:	f003 0370 	and.w	r3, r3, #112	; 0x70
 8002d20:	429a      	cmp	r2, r3
 8002d22:	d908      	bls.n	8002d36 <HAL_RCC_ClockConfig+0x72>
    {
      assert_param(IS_RCC_D1PCLK1(RCC_ClkInitStruct->APB3CLKDivider));
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_D1PPRE, RCC_ClkInitStruct->APB3CLKDivider);
 8002d24:	4b78      	ldr	r3, [pc, #480]	; (8002f08 <HAL_RCC_ClockConfig+0x244>)
 8002d26:	699b      	ldr	r3, [r3, #24]
 8002d28:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 8002d2c:	687b      	ldr	r3, [r7, #4]
 8002d2e:	691b      	ldr	r3, [r3, #16]
 8002d30:	4975      	ldr	r1, [pc, #468]	; (8002f08 <HAL_RCC_ClockConfig+0x244>)
 8002d32:	4313      	orrs	r3, r2
 8002d34:	618b      	str	r3, [r1, #24]
    }
#endif
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8002d36:	687b      	ldr	r3, [r7, #4]
 8002d38:	681b      	ldr	r3, [r3, #0]
 8002d3a:	f003 0308 	and.w	r3, r3, #8
 8002d3e:	2b00      	cmp	r3, #0
 8002d40:	d010      	beq.n	8002d64 <HAL_RCC_ClockConfig+0xa0>
  {
#if defined (RCC_D2CFGR_D2PPRE1)
    if ((RCC_ClkInitStruct->APB1CLKDivider) > (RCC->D2CFGR & RCC_D2CFGR_D2PPRE1))
 8002d42:	687b      	ldr	r3, [r7, #4]
 8002d44:	695a      	ldr	r2, [r3, #20]
 8002d46:	4b70      	ldr	r3, [pc, #448]	; (8002f08 <HAL_RCC_ClockConfig+0x244>)
 8002d48:	69db      	ldr	r3, [r3, #28]
 8002d4a:	f003 0370 	and.w	r3, r3, #112	; 0x70
 8002d4e:	429a      	cmp	r2, r3
 8002d50:	d908      	bls.n	8002d64 <HAL_RCC_ClockConfig+0xa0>
    {
      assert_param(IS_RCC_PCLK1(RCC_ClkInitStruct->APB1CLKDivider));
      MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE1, (RCC_ClkInitStruct->APB1CLKDivider));
 8002d52:	4b6d      	ldr	r3, [pc, #436]	; (8002f08 <HAL_RCC_ClockConfig+0x244>)
 8002d54:	69db      	ldr	r3, [r3, #28]
 8002d56:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 8002d5a:	687b      	ldr	r3, [r7, #4]
 8002d5c:	695b      	ldr	r3, [r3, #20]
 8002d5e:	496a      	ldr	r1, [pc, #424]	; (8002f08 <HAL_RCC_ClockConfig+0x244>)
 8002d60:	4313      	orrs	r3, r2
 8002d62:	61cb      	str	r3, [r1, #28]
      MODIFY_REG(RCC->CDCFGR2, RCC_CDCFGR2_CDPPRE1, (RCC_ClkInitStruct->APB1CLKDivider));
    }
#endif
  }
  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8002d64:	687b      	ldr	r3, [r7, #4]
 8002d66:	681b      	ldr	r3, [r3, #0]
 8002d68:	f003 0310 	and.w	r3, r3, #16
 8002d6c:	2b00      	cmp	r3, #0
 8002d6e:	d010      	beq.n	8002d92 <HAL_RCC_ClockConfig+0xce>
  {
#if defined(RCC_D2CFGR_D2PPRE2)
    if ((RCC_ClkInitStruct->APB2CLKDivider) > (RCC->D2CFGR & RCC_D2CFGR_D2PPRE2))
 8002d70:	687b      	ldr	r3, [r7, #4]
 8002d72:	699a      	ldr	r2, [r3, #24]
 8002d74:	4b64      	ldr	r3, [pc, #400]	; (8002f08 <HAL_RCC_ClockConfig+0x244>)
 8002d76:	69db      	ldr	r3, [r3, #28]
 8002d78:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 8002d7c:	429a      	cmp	r2, r3
 8002d7e:	d908      	bls.n	8002d92 <HAL_RCC_ClockConfig+0xce>
    {
      assert_param(IS_RCC_PCLK2(RCC_ClkInitStruct->APB2CLKDivider));
      MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE2, (RCC_ClkInitStruct->APB2CLKDivider));
 8002d80:	4b61      	ldr	r3, [pc, #388]	; (8002f08 <HAL_RCC_ClockConfig+0x244>)
 8002d82:	69db      	ldr	r3, [r3, #28]
 8002d84:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 8002d88:	687b      	ldr	r3, [r7, #4]
 8002d8a:	699b      	ldr	r3, [r3, #24]
 8002d8c:	495e      	ldr	r1, [pc, #376]	; (8002f08 <HAL_RCC_ClockConfig+0x244>)
 8002d8e:	4313      	orrs	r3, r2
 8002d90:	61cb      	str	r3, [r1, #28]
    }
#endif
  }

  /*-------------------------- D3PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D3PCLK1) == RCC_CLOCKTYPE_D3PCLK1)
 8002d92:	687b      	ldr	r3, [r7, #4]
 8002d94:	681b      	ldr	r3, [r3, #0]
 8002d96:	f003 0320 	and.w	r3, r3, #32
 8002d9a:	2b00      	cmp	r3, #0
 8002d9c:	d010      	beq.n	8002dc0 <HAL_RCC_ClockConfig+0xfc>
  {
#if defined(RCC_D3CFGR_D3PPRE)
    if ((RCC_ClkInitStruct->APB4CLKDivider) > (RCC->D3CFGR & RCC_D3CFGR_D3PPRE))
 8002d9e:	687b      	ldr	r3, [r7, #4]
 8002da0:	69da      	ldr	r2, [r3, #28]
 8002da2:	4b59      	ldr	r3, [pc, #356]	; (8002f08 <HAL_RCC_ClockConfig+0x244>)
 8002da4:	6a1b      	ldr	r3, [r3, #32]
 8002da6:	f003 0370 	and.w	r3, r3, #112	; 0x70
 8002daa:	429a      	cmp	r2, r3
 8002dac:	d908      	bls.n	8002dc0 <HAL_RCC_ClockConfig+0xfc>
    {
      assert_param(IS_RCC_D3PCLK1(RCC_ClkInitStruct->APB4CLKDivider));
      MODIFY_REG(RCC->D3CFGR, RCC_D3CFGR_D3PPRE, (RCC_ClkInitStruct->APB4CLKDivider));
 8002dae:	4b56      	ldr	r3, [pc, #344]	; (8002f08 <HAL_RCC_ClockConfig+0x244>)
 8002db0:	6a1b      	ldr	r3, [r3, #32]
 8002db2:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 8002db6:	687b      	ldr	r3, [r7, #4]
 8002db8:	69db      	ldr	r3, [r3, #28]
 8002dba:	4953      	ldr	r1, [pc, #332]	; (8002f08 <HAL_RCC_ClockConfig+0x244>)
 8002dbc:	4313      	orrs	r3, r2
 8002dbe:	620b      	str	r3, [r1, #32]
    }
#endif
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8002dc0:	687b      	ldr	r3, [r7, #4]
 8002dc2:	681b      	ldr	r3, [r3, #0]
 8002dc4:	f003 0302 	and.w	r3, r3, #2
 8002dc8:	2b00      	cmp	r3, #0
 8002dca:	d010      	beq.n	8002dee <HAL_RCC_ClockConfig+0x12a>
  {
#if defined (RCC_D1CFGR_HPRE)
    if ((RCC_ClkInitStruct->AHBCLKDivider) > (RCC->D1CFGR & RCC_D1CFGR_HPRE))
 8002dcc:	687b      	ldr	r3, [r7, #4]
 8002dce:	68da      	ldr	r2, [r3, #12]
 8002dd0:	4b4d      	ldr	r3, [pc, #308]	; (8002f08 <HAL_RCC_ClockConfig+0x244>)
 8002dd2:	699b      	ldr	r3, [r3, #24]
 8002dd4:	f003 030f 	and.w	r3, r3, #15
 8002dd8:	429a      	cmp	r2, r3
 8002dda:	d908      	bls.n	8002dee <HAL_RCC_ClockConfig+0x12a>
    {
      /* Set the new HCLK clock divider */
      assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8002ddc:	4b4a      	ldr	r3, [pc, #296]	; (8002f08 <HAL_RCC_ClockConfig+0x244>)
 8002dde:	699b      	ldr	r3, [r3, #24]
 8002de0:	f023 020f 	bic.w	r2, r3, #15
 8002de4:	687b      	ldr	r3, [r7, #4]
 8002de6:	68db      	ldr	r3, [r3, #12]
 8002de8:	4947      	ldr	r1, [pc, #284]	; (8002f08 <HAL_RCC_ClockConfig+0x244>)
 8002dea:	4313      	orrs	r3, r2
 8002dec:	618b      	str	r3, [r1, #24]
    }
#endif
  }

  /*------------------------- SYSCLK Configuration -------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8002dee:	687b      	ldr	r3, [r7, #4]
 8002df0:	681b      	ldr	r3, [r3, #0]
 8002df2:	f003 0301 	and.w	r3, r3, #1
 8002df6:	2b00      	cmp	r3, #0
 8002df8:	d055      	beq.n	8002ea6 <HAL_RCC_ClockConfig+0x1e2>
  {
    assert_param(IS_RCC_SYSCLK(RCC_ClkInitStruct->SYSCLKDivider));
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));
#if defined(RCC_D1CFGR_D1CPRE)
    MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_D1CPRE, RCC_ClkInitStruct->SYSCLKDivider);
 8002dfa:	4b43      	ldr	r3, [pc, #268]	; (8002f08 <HAL_RCC_ClockConfig+0x244>)
 8002dfc:	699b      	ldr	r3, [r3, #24]
 8002dfe:	f423 6270 	bic.w	r2, r3, #3840	; 0xf00
 8002e02:	687b      	ldr	r3, [r7, #4]
 8002e04:	689b      	ldr	r3, [r3, #8]
 8002e06:	4940      	ldr	r1, [pc, #256]	; (8002f08 <HAL_RCC_ClockConfig+0x244>)
 8002e08:	4313      	orrs	r3, r2
 8002e0a:	618b      	str	r3, [r1, #24]
#else
    MODIFY_REG(RCC->CDCFGR1, RCC_CDCFGR1_CDCPRE, RCC_ClkInitStruct->SYSCLKDivider);
#endif
    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8002e0c:	687b      	ldr	r3, [r7, #4]
 8002e0e:	685b      	ldr	r3, [r3, #4]
 8002e10:	2b02      	cmp	r3, #2
 8002e12:	d107      	bne.n	8002e24 <HAL_RCC_ClockConfig+0x160>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 8002e14:	4b3c      	ldr	r3, [pc, #240]	; (8002f08 <HAL_RCC_ClockConfig+0x244>)
 8002e16:	681b      	ldr	r3, [r3, #0]
 8002e18:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002e1c:	2b00      	cmp	r3, #0
 8002e1e:	d121      	bne.n	8002e64 <HAL_RCC_ClockConfig+0x1a0>
      {
        return HAL_ERROR;
 8002e20:	2301      	movs	r3, #1
 8002e22:	e0f6      	b.n	8003012 <HAL_RCC_ClockConfig+0x34e>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8002e24:	687b      	ldr	r3, [r7, #4]
 8002e26:	685b      	ldr	r3, [r3, #4]
 8002e28:	2b03      	cmp	r3, #3
 8002e2a:	d107      	bne.n	8002e3c <HAL_RCC_ClockConfig+0x178>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 8002e2c:	4b36      	ldr	r3, [pc, #216]	; (8002f08 <HAL_RCC_ClockConfig+0x244>)
 8002e2e:	681b      	ldr	r3, [r3, #0]
 8002e30:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002e34:	2b00      	cmp	r3, #0
 8002e36:	d115      	bne.n	8002e64 <HAL_RCC_ClockConfig+0x1a0>
      {
        return HAL_ERROR;
 8002e38:	2301      	movs	r3, #1
 8002e3a:	e0ea      	b.n	8003012 <HAL_RCC_ClockConfig+0x34e>
      }
    }
    /* CSI is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_CSI)
 8002e3c:	687b      	ldr	r3, [r7, #4]
 8002e3e:	685b      	ldr	r3, [r3, #4]
 8002e40:	2b01      	cmp	r3, #1
 8002e42:	d107      	bne.n	8002e54 <HAL_RCC_ClockConfig+0x190>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) == 0U)
 8002e44:	4b30      	ldr	r3, [pc, #192]	; (8002f08 <HAL_RCC_ClockConfig+0x244>)
 8002e46:	681b      	ldr	r3, [r3, #0]
 8002e48:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002e4c:	2b00      	cmp	r3, #0
 8002e4e:	d109      	bne.n	8002e64 <HAL_RCC_ClockConfig+0x1a0>
      {
        return HAL_ERROR;
 8002e50:	2301      	movs	r3, #1
 8002e52:	e0de      	b.n	8003012 <HAL_RCC_ClockConfig+0x34e>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 8002e54:	4b2c      	ldr	r3, [pc, #176]	; (8002f08 <HAL_RCC_ClockConfig+0x244>)
 8002e56:	681b      	ldr	r3, [r3, #0]
 8002e58:	f003 0304 	and.w	r3, r3, #4
 8002e5c:	2b00      	cmp	r3, #0
 8002e5e:	d101      	bne.n	8002e64 <HAL_RCC_ClockConfig+0x1a0>
      {
        return HAL_ERROR;
 8002e60:	2301      	movs	r3, #1
 8002e62:	e0d6      	b.n	8003012 <HAL_RCC_ClockConfig+0x34e>
      }
    }
    MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 8002e64:	4b28      	ldr	r3, [pc, #160]	; (8002f08 <HAL_RCC_ClockConfig+0x244>)
 8002e66:	691b      	ldr	r3, [r3, #16]
 8002e68:	f023 0207 	bic.w	r2, r3, #7
 8002e6c:	687b      	ldr	r3, [r7, #4]
 8002e6e:	685b      	ldr	r3, [r3, #4]
 8002e70:	4925      	ldr	r1, [pc, #148]	; (8002f08 <HAL_RCC_ClockConfig+0x244>)
 8002e72:	4313      	orrs	r3, r2
 8002e74:	610b      	str	r3, [r1, #16]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8002e76:	f7fe fbab 	bl	80015d0 <HAL_GetTick>
 8002e7a:	6178      	str	r0, [r7, #20]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8002e7c:	e00a      	b.n	8002e94 <HAL_RCC_ClockConfig+0x1d0>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8002e7e:	f7fe fba7 	bl	80015d0 <HAL_GetTick>
 8002e82:	4602      	mov	r2, r0
 8002e84:	697b      	ldr	r3, [r7, #20]
 8002e86:	1ad3      	subs	r3, r2, r3
 8002e88:	f241 3288 	movw	r2, #5000	; 0x1388
 8002e8c:	4293      	cmp	r3, r2
 8002e8e:	d901      	bls.n	8002e94 <HAL_RCC_ClockConfig+0x1d0>
      {
        return HAL_TIMEOUT;
 8002e90:	2303      	movs	r3, #3
 8002e92:	e0be      	b.n	8003012 <HAL_RCC_ClockConfig+0x34e>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8002e94:	4b1c      	ldr	r3, [pc, #112]	; (8002f08 <HAL_RCC_ClockConfig+0x244>)
 8002e96:	691b      	ldr	r3, [r3, #16]
 8002e98:	f003 0238 	and.w	r2, r3, #56	; 0x38
 8002e9c:	687b      	ldr	r3, [r7, #4]
 8002e9e:	685b      	ldr	r3, [r3, #4]
 8002ea0:	00db      	lsls	r3, r3, #3
 8002ea2:	429a      	cmp	r2, r3
 8002ea4:	d1eb      	bne.n	8002e7e <HAL_RCC_ClockConfig+0x1ba>

  }

  /* Decreasing the BUS frequency divider */
  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8002ea6:	687b      	ldr	r3, [r7, #4]
 8002ea8:	681b      	ldr	r3, [r3, #0]
 8002eaa:	f003 0302 	and.w	r3, r3, #2
 8002eae:	2b00      	cmp	r3, #0
 8002eb0:	d010      	beq.n	8002ed4 <HAL_RCC_ClockConfig+0x210>
  {
#if defined(RCC_D1CFGR_HPRE)
    if ((RCC_ClkInitStruct->AHBCLKDivider) < (RCC->D1CFGR & RCC_D1CFGR_HPRE))
 8002eb2:	687b      	ldr	r3, [r7, #4]
 8002eb4:	68da      	ldr	r2, [r3, #12]
 8002eb6:	4b14      	ldr	r3, [pc, #80]	; (8002f08 <HAL_RCC_ClockConfig+0x244>)
 8002eb8:	699b      	ldr	r3, [r3, #24]
 8002eba:	f003 030f 	and.w	r3, r3, #15
 8002ebe:	429a      	cmp	r2, r3
 8002ec0:	d208      	bcs.n	8002ed4 <HAL_RCC_ClockConfig+0x210>
    {
      /* Set the new HCLK clock divider */
      assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8002ec2:	4b11      	ldr	r3, [pc, #68]	; (8002f08 <HAL_RCC_ClockConfig+0x244>)
 8002ec4:	699b      	ldr	r3, [r3, #24]
 8002ec6:	f023 020f 	bic.w	r2, r3, #15
 8002eca:	687b      	ldr	r3, [r7, #4]
 8002ecc:	68db      	ldr	r3, [r3, #12]
 8002ece:	490e      	ldr	r1, [pc, #56]	; (8002f08 <HAL_RCC_ClockConfig+0x244>)
 8002ed0:	4313      	orrs	r3, r2
 8002ed2:	618b      	str	r3, [r1, #24]
    }
#endif
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8002ed4:	4b0b      	ldr	r3, [pc, #44]	; (8002f04 <HAL_RCC_ClockConfig+0x240>)
 8002ed6:	681b      	ldr	r3, [r3, #0]
 8002ed8:	f003 030f 	and.w	r3, r3, #15
 8002edc:	683a      	ldr	r2, [r7, #0]
 8002ede:	429a      	cmp	r2, r3
 8002ee0:	d214      	bcs.n	8002f0c <HAL_RCC_ClockConfig+0x248>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8002ee2:	4b08      	ldr	r3, [pc, #32]	; (8002f04 <HAL_RCC_ClockConfig+0x240>)
 8002ee4:	681b      	ldr	r3, [r3, #0]
 8002ee6:	f023 020f 	bic.w	r2, r3, #15
 8002eea:	4906      	ldr	r1, [pc, #24]	; (8002f04 <HAL_RCC_ClockConfig+0x240>)
 8002eec:	683b      	ldr	r3, [r7, #0]
 8002eee:	4313      	orrs	r3, r2
 8002ef0:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8002ef2:	4b04      	ldr	r3, [pc, #16]	; (8002f04 <HAL_RCC_ClockConfig+0x240>)
 8002ef4:	681b      	ldr	r3, [r3, #0]
 8002ef6:	f003 030f 	and.w	r3, r3, #15
 8002efa:	683a      	ldr	r2, [r7, #0]
 8002efc:	429a      	cmp	r2, r3
 8002efe:	d005      	beq.n	8002f0c <HAL_RCC_ClockConfig+0x248>
    {
      return HAL_ERROR;
 8002f00:	2301      	movs	r3, #1
 8002f02:	e086      	b.n	8003012 <HAL_RCC_ClockConfig+0x34e>
 8002f04:	52002000 	.word	0x52002000
 8002f08:	58024400 	.word	0x58024400
    }
  }

  /*-------------------------- D1PCLK1/CDPCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D1PCLK1) == RCC_CLOCKTYPE_D1PCLK1)
 8002f0c:	687b      	ldr	r3, [r7, #4]
 8002f0e:	681b      	ldr	r3, [r3, #0]
 8002f10:	f003 0304 	and.w	r3, r3, #4
 8002f14:	2b00      	cmp	r3, #0
 8002f16:	d010      	beq.n	8002f3a <HAL_RCC_ClockConfig+0x276>
  {
#if defined(RCC_D1CFGR_D1PPRE)
    if ((RCC_ClkInitStruct->APB3CLKDivider) < (RCC->D1CFGR & RCC_D1CFGR_D1PPRE))
 8002f18:	687b      	ldr	r3, [r7, #4]
 8002f1a:	691a      	ldr	r2, [r3, #16]
 8002f1c:	4b3f      	ldr	r3, [pc, #252]	; (800301c <HAL_RCC_ClockConfig+0x358>)
 8002f1e:	699b      	ldr	r3, [r3, #24]
 8002f20:	f003 0370 	and.w	r3, r3, #112	; 0x70
 8002f24:	429a      	cmp	r2, r3
 8002f26:	d208      	bcs.n	8002f3a <HAL_RCC_ClockConfig+0x276>
    {
      assert_param(IS_RCC_D1PCLK1(RCC_ClkInitStruct->APB3CLKDivider));
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_D1PPRE, RCC_ClkInitStruct->APB3CLKDivider);
 8002f28:	4b3c      	ldr	r3, [pc, #240]	; (800301c <HAL_RCC_ClockConfig+0x358>)
 8002f2a:	699b      	ldr	r3, [r3, #24]
 8002f2c:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 8002f30:	687b      	ldr	r3, [r7, #4]
 8002f32:	691b      	ldr	r3, [r3, #16]
 8002f34:	4939      	ldr	r1, [pc, #228]	; (800301c <HAL_RCC_ClockConfig+0x358>)
 8002f36:	4313      	orrs	r3, r2
 8002f38:	618b      	str	r3, [r1, #24]
    }
#endif
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8002f3a:	687b      	ldr	r3, [r7, #4]
 8002f3c:	681b      	ldr	r3, [r3, #0]
 8002f3e:	f003 0308 	and.w	r3, r3, #8
 8002f42:	2b00      	cmp	r3, #0
 8002f44:	d010      	beq.n	8002f68 <HAL_RCC_ClockConfig+0x2a4>
  {
#if defined(RCC_D2CFGR_D2PPRE1)
    if ((RCC_ClkInitStruct->APB1CLKDivider) < (RCC->D2CFGR & RCC_D2CFGR_D2PPRE1))
 8002f46:	687b      	ldr	r3, [r7, #4]
 8002f48:	695a      	ldr	r2, [r3, #20]
 8002f4a:	4b34      	ldr	r3, [pc, #208]	; (800301c <HAL_RCC_ClockConfig+0x358>)
 8002f4c:	69db      	ldr	r3, [r3, #28]
 8002f4e:	f003 0370 	and.w	r3, r3, #112	; 0x70
 8002f52:	429a      	cmp	r2, r3
 8002f54:	d208      	bcs.n	8002f68 <HAL_RCC_ClockConfig+0x2a4>
    {
      assert_param(IS_RCC_PCLK1(RCC_ClkInitStruct->APB1CLKDivider));
      MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE1, (RCC_ClkInitStruct->APB1CLKDivider));
 8002f56:	4b31      	ldr	r3, [pc, #196]	; (800301c <HAL_RCC_ClockConfig+0x358>)
 8002f58:	69db      	ldr	r3, [r3, #28]
 8002f5a:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 8002f5e:	687b      	ldr	r3, [r7, #4]
 8002f60:	695b      	ldr	r3, [r3, #20]
 8002f62:	492e      	ldr	r1, [pc, #184]	; (800301c <HAL_RCC_ClockConfig+0x358>)
 8002f64:	4313      	orrs	r3, r2
 8002f66:	61cb      	str	r3, [r1, #28]
    }
#endif
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8002f68:	687b      	ldr	r3, [r7, #4]
 8002f6a:	681b      	ldr	r3, [r3, #0]
 8002f6c:	f003 0310 	and.w	r3, r3, #16
 8002f70:	2b00      	cmp	r3, #0
 8002f72:	d010      	beq.n	8002f96 <HAL_RCC_ClockConfig+0x2d2>
  {
#if defined (RCC_D2CFGR_D2PPRE2)
    if ((RCC_ClkInitStruct->APB2CLKDivider) < (RCC->D2CFGR & RCC_D2CFGR_D2PPRE2))
 8002f74:	687b      	ldr	r3, [r7, #4]
 8002f76:	699a      	ldr	r2, [r3, #24]
 8002f78:	4b28      	ldr	r3, [pc, #160]	; (800301c <HAL_RCC_ClockConfig+0x358>)
 8002f7a:	69db      	ldr	r3, [r3, #28]
 8002f7c:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 8002f80:	429a      	cmp	r2, r3
 8002f82:	d208      	bcs.n	8002f96 <HAL_RCC_ClockConfig+0x2d2>
    {
      assert_param(IS_RCC_PCLK2(RCC_ClkInitStruct->APB2CLKDivider));
      MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE2, (RCC_ClkInitStruct->APB2CLKDivider));
 8002f84:	4b25      	ldr	r3, [pc, #148]	; (800301c <HAL_RCC_ClockConfig+0x358>)
 8002f86:	69db      	ldr	r3, [r3, #28]
 8002f88:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 8002f8c:	687b      	ldr	r3, [r7, #4]
 8002f8e:	699b      	ldr	r3, [r3, #24]
 8002f90:	4922      	ldr	r1, [pc, #136]	; (800301c <HAL_RCC_ClockConfig+0x358>)
 8002f92:	4313      	orrs	r3, r2
 8002f94:	61cb      	str	r3, [r1, #28]
    }
#endif
  }

  /*-------------------------- D3PCLK1/SRDPCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D3PCLK1) == RCC_CLOCKTYPE_D3PCLK1)
 8002f96:	687b      	ldr	r3, [r7, #4]
 8002f98:	681b      	ldr	r3, [r3, #0]
 8002f9a:	f003 0320 	and.w	r3, r3, #32
 8002f9e:	2b00      	cmp	r3, #0
 8002fa0:	d010      	beq.n	8002fc4 <HAL_RCC_ClockConfig+0x300>
  {
#if defined(RCC_D3CFGR_D3PPRE)
    if ((RCC_ClkInitStruct->APB4CLKDivider) < (RCC->D3CFGR & RCC_D3CFGR_D3PPRE))
 8002fa2:	687b      	ldr	r3, [r7, #4]
 8002fa4:	69da      	ldr	r2, [r3, #28]
 8002fa6:	4b1d      	ldr	r3, [pc, #116]	; (800301c <HAL_RCC_ClockConfig+0x358>)
 8002fa8:	6a1b      	ldr	r3, [r3, #32]
 8002faa:	f003 0370 	and.w	r3, r3, #112	; 0x70
 8002fae:	429a      	cmp	r2, r3
 8002fb0:	d208      	bcs.n	8002fc4 <HAL_RCC_ClockConfig+0x300>
    {
      assert_param(IS_RCC_D3PCLK1(RCC_ClkInitStruct->APB4CLKDivider));
      MODIFY_REG(RCC->D3CFGR, RCC_D3CFGR_D3PPRE, (RCC_ClkInitStruct->APB4CLKDivider));
 8002fb2:	4b1a      	ldr	r3, [pc, #104]	; (800301c <HAL_RCC_ClockConfig+0x358>)
 8002fb4:	6a1b      	ldr	r3, [r3, #32]
 8002fb6:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 8002fba:	687b      	ldr	r3, [r7, #4]
 8002fbc:	69db      	ldr	r3, [r3, #28]
 8002fbe:	4917      	ldr	r1, [pc, #92]	; (800301c <HAL_RCC_ClockConfig+0x358>)
 8002fc0:	4313      	orrs	r3, r2
 8002fc2:	620b      	str	r3, [r1, #32]
#endif
  }

  /* Update the SystemCoreClock global variable */
#if defined(RCC_D1CFGR_D1CPRE)
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE) >> RCC_D1CFGR_D1CPRE_Pos]) & 0x1FU);
 8002fc4:	f000 f834 	bl	8003030 <HAL_RCC_GetSysClockFreq>
 8002fc8:	4602      	mov	r2, r0
 8002fca:	4b14      	ldr	r3, [pc, #80]	; (800301c <HAL_RCC_ClockConfig+0x358>)
 8002fcc:	699b      	ldr	r3, [r3, #24]
 8002fce:	0a1b      	lsrs	r3, r3, #8
 8002fd0:	f003 030f 	and.w	r3, r3, #15
 8002fd4:	4912      	ldr	r1, [pc, #72]	; (8003020 <HAL_RCC_ClockConfig+0x35c>)
 8002fd6:	5ccb      	ldrb	r3, [r1, r3]
 8002fd8:	f003 031f 	and.w	r3, r3, #31
 8002fdc:	fa22 f303 	lsr.w	r3, r2, r3
 8002fe0:	613b      	str	r3, [r7, #16]
#else
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->CDCFGR1 & RCC_CDCFGR1_CDCPRE) >> RCC_CDCFGR1_CDCPRE_Pos]) & 0x1FU);
#endif

#if defined(RCC_D1CFGR_HPRE)
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE) >> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
 8002fe2:	4b0e      	ldr	r3, [pc, #56]	; (800301c <HAL_RCC_ClockConfig+0x358>)
 8002fe4:	699b      	ldr	r3, [r3, #24]
 8002fe6:	f003 030f 	and.w	r3, r3, #15
 8002fea:	4a0d      	ldr	r2, [pc, #52]	; (8003020 <HAL_RCC_ClockConfig+0x35c>)
 8002fec:	5cd3      	ldrb	r3, [r2, r3]
 8002fee:	f003 031f 	and.w	r3, r3, #31
 8002ff2:	693a      	ldr	r2, [r7, #16]
 8002ff4:	fa22 f303 	lsr.w	r3, r2, r3
 8002ff8:	4a0a      	ldr	r2, [pc, #40]	; (8003024 <HAL_RCC_ClockConfig+0x360>)
 8002ffa:	6013      	str	r3, [r2, #0]
#endif

#if defined(DUAL_CORE) && defined(CORE_CM4)
  SystemCoreClock = SystemD2Clock;
#else
  SystemCoreClock = common_system_clock;
 8002ffc:	4a0a      	ldr	r2, [pc, #40]	; (8003028 <HAL_RCC_ClockConfig+0x364>)
 8002ffe:	693b      	ldr	r3, [r7, #16]
 8003000:	6013      	str	r3, [r2, #0]
#endif /* DUAL_CORE && CORE_CM4 */

  /* Configure the source of time base considering new system clocks settings*/
  halstatus = HAL_InitTick(uwTickPrio);
 8003002:	4b0a      	ldr	r3, [pc, #40]	; (800302c <HAL_RCC_ClockConfig+0x368>)
 8003004:	681b      	ldr	r3, [r3, #0]
 8003006:	4618      	mov	r0, r3
 8003008:	f7fe fa98 	bl	800153c <HAL_InitTick>
 800300c:	4603      	mov	r3, r0
 800300e:	73fb      	strb	r3, [r7, #15]

  return halstatus;
 8003010:	7bfb      	ldrb	r3, [r7, #15]
}
 8003012:	4618      	mov	r0, r3
 8003014:	3718      	adds	r7, #24
 8003016:	46bd      	mov	sp, r7
 8003018:	bd80      	pop	{r7, pc}
 800301a:	bf00      	nop
 800301c:	58024400 	.word	0x58024400
 8003020:	0800b060 	.word	0x0800b060
 8003024:	24000004 	.word	0x24000004
 8003028:	24000000 	.word	0x24000000
 800302c:	24000008 	.word	0x24000008

08003030 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8003030:	b480      	push	{r7}
 8003032:	b089      	sub	sp, #36	; 0x24
 8003034:	af00      	add	r7, sp, #0
  float_t fracn1, pllvco;
  uint32_t sysclockfreq;

  /* Get SYSCLK source -------------------------------------------------------*/

  switch (RCC->CFGR & RCC_CFGR_SWS)
 8003036:	4bb3      	ldr	r3, [pc, #716]	; (8003304 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8003038:	691b      	ldr	r3, [r3, #16]
 800303a:	f003 0338 	and.w	r3, r3, #56	; 0x38
 800303e:	2b18      	cmp	r3, #24
 8003040:	f200 8155 	bhi.w	80032ee <HAL_RCC_GetSysClockFreq+0x2be>
 8003044:	a201      	add	r2, pc, #4	; (adr r2, 800304c <HAL_RCC_GetSysClockFreq+0x1c>)
 8003046:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800304a:	bf00      	nop
 800304c:	080030b1 	.word	0x080030b1
 8003050:	080032ef 	.word	0x080032ef
 8003054:	080032ef 	.word	0x080032ef
 8003058:	080032ef 	.word	0x080032ef
 800305c:	080032ef 	.word	0x080032ef
 8003060:	080032ef 	.word	0x080032ef
 8003064:	080032ef 	.word	0x080032ef
 8003068:	080032ef 	.word	0x080032ef
 800306c:	080030d7 	.word	0x080030d7
 8003070:	080032ef 	.word	0x080032ef
 8003074:	080032ef 	.word	0x080032ef
 8003078:	080032ef 	.word	0x080032ef
 800307c:	080032ef 	.word	0x080032ef
 8003080:	080032ef 	.word	0x080032ef
 8003084:	080032ef 	.word	0x080032ef
 8003088:	080032ef 	.word	0x080032ef
 800308c:	080030dd 	.word	0x080030dd
 8003090:	080032ef 	.word	0x080032ef
 8003094:	080032ef 	.word	0x080032ef
 8003098:	080032ef 	.word	0x080032ef
 800309c:	080032ef 	.word	0x080032ef
 80030a0:	080032ef 	.word	0x080032ef
 80030a4:	080032ef 	.word	0x080032ef
 80030a8:	080032ef 	.word	0x080032ef
 80030ac:	080030e3 	.word	0x080030e3
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */

      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 80030b0:	4b94      	ldr	r3, [pc, #592]	; (8003304 <HAL_RCC_GetSysClockFreq+0x2d4>)
 80030b2:	681b      	ldr	r3, [r3, #0]
 80030b4:	f003 0320 	and.w	r3, r3, #32
 80030b8:	2b00      	cmp	r3, #0
 80030ba:	d009      	beq.n	80030d0 <HAL_RCC_GetSysClockFreq+0xa0>
      {
        sysclockfreq = (uint32_t)(HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 80030bc:	4b91      	ldr	r3, [pc, #580]	; (8003304 <HAL_RCC_GetSysClockFreq+0x2d4>)
 80030be:	681b      	ldr	r3, [r3, #0]
 80030c0:	08db      	lsrs	r3, r3, #3
 80030c2:	f003 0303 	and.w	r3, r3, #3
 80030c6:	4a90      	ldr	r2, [pc, #576]	; (8003308 <HAL_RCC_GetSysClockFreq+0x2d8>)
 80030c8:	fa22 f303 	lsr.w	r3, r2, r3
 80030cc:	61bb      	str	r3, [r7, #24]
      else
      {
        sysclockfreq = (uint32_t) HSI_VALUE;
      }

      break;
 80030ce:	e111      	b.n	80032f4 <HAL_RCC_GetSysClockFreq+0x2c4>
        sysclockfreq = (uint32_t) HSI_VALUE;
 80030d0:	4b8d      	ldr	r3, [pc, #564]	; (8003308 <HAL_RCC_GetSysClockFreq+0x2d8>)
 80030d2:	61bb      	str	r3, [r7, #24]
      break;
 80030d4:	e10e      	b.n	80032f4 <HAL_RCC_GetSysClockFreq+0x2c4>

    case RCC_CFGR_SWS_CSI:  /* CSI used as system clock  source */
      sysclockfreq = CSI_VALUE;
 80030d6:	4b8d      	ldr	r3, [pc, #564]	; (800330c <HAL_RCC_GetSysClockFreq+0x2dc>)
 80030d8:	61bb      	str	r3, [r7, #24]
      break;
 80030da:	e10b      	b.n	80032f4 <HAL_RCC_GetSysClockFreq+0x2c4>

    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
      sysclockfreq = HSE_VALUE;
 80030dc:	4b8c      	ldr	r3, [pc, #560]	; (8003310 <HAL_RCC_GetSysClockFreq+0x2e0>)
 80030de:	61bb      	str	r3, [r7, #24]
      break;
 80030e0:	e108      	b.n	80032f4 <HAL_RCC_GetSysClockFreq+0x2c4>
    case RCC_CFGR_SWS_PLL1:  /* PLL1 used as system clock  source */

      /* PLL_VCO = (HSE_VALUE or HSI_VALUE or CSI_VALUE/ PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLR
      */
      pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 80030e2:	4b88      	ldr	r3, [pc, #544]	; (8003304 <HAL_RCC_GetSysClockFreq+0x2d4>)
 80030e4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80030e6:	f003 0303 	and.w	r3, r3, #3
 80030ea:	617b      	str	r3, [r7, #20]
      pllm = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM1) >> 4)  ;
 80030ec:	4b85      	ldr	r3, [pc, #532]	; (8003304 <HAL_RCC_GetSysClockFreq+0x2d4>)
 80030ee:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80030f0:	091b      	lsrs	r3, r3, #4
 80030f2:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 80030f6:	613b      	str	r3, [r7, #16]
      pllfracen = ((RCC-> PLLCFGR & RCC_PLLCFGR_PLL1FRACEN) >> RCC_PLLCFGR_PLL1FRACEN_Pos);
 80030f8:	4b82      	ldr	r3, [pc, #520]	; (8003304 <HAL_RCC_GetSysClockFreq+0x2d4>)
 80030fa:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80030fc:	f003 0301 	and.w	r3, r3, #1
 8003100:	60fb      	str	r3, [r7, #12]
      fracn1 = (float_t)(uint32_t)(pllfracen * ((RCC->PLL1FRACR & RCC_PLL1FRACR_FRACN1) >> 3));
 8003102:	4b80      	ldr	r3, [pc, #512]	; (8003304 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8003104:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8003106:	08db      	lsrs	r3, r3, #3
 8003108:	f3c3 030c 	ubfx	r3, r3, #0, #13
 800310c:	68fa      	ldr	r2, [r7, #12]
 800310e:	fb02 f303 	mul.w	r3, r2, r3
 8003112:	ee07 3a90 	vmov	s15, r3
 8003116:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800311a:	edc7 7a02 	vstr	s15, [r7, #8]

      if (pllm != 0U)
 800311e:	693b      	ldr	r3, [r7, #16]
 8003120:	2b00      	cmp	r3, #0
 8003122:	f000 80e1 	beq.w	80032e8 <HAL_RCC_GetSysClockFreq+0x2b8>
 8003126:	697b      	ldr	r3, [r7, #20]
 8003128:	2b02      	cmp	r3, #2
 800312a:	f000 8083 	beq.w	8003234 <HAL_RCC_GetSysClockFreq+0x204>
 800312e:	697b      	ldr	r3, [r7, #20]
 8003130:	2b02      	cmp	r3, #2
 8003132:	f200 80a1 	bhi.w	8003278 <HAL_RCC_GetSysClockFreq+0x248>
 8003136:	697b      	ldr	r3, [r7, #20]
 8003138:	2b00      	cmp	r3, #0
 800313a:	d003      	beq.n	8003144 <HAL_RCC_GetSysClockFreq+0x114>
 800313c:	697b      	ldr	r3, [r7, #20]
 800313e:	2b01      	cmp	r3, #1
 8003140:	d056      	beq.n	80031f0 <HAL_RCC_GetSysClockFreq+0x1c0>
 8003142:	e099      	b.n	8003278 <HAL_RCC_GetSysClockFreq+0x248>
      {
        switch (pllsource)
        {
          case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */

            if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8003144:	4b6f      	ldr	r3, [pc, #444]	; (8003304 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8003146:	681b      	ldr	r3, [r3, #0]
 8003148:	f003 0320 	and.w	r3, r3, #32
 800314c:	2b00      	cmp	r3, #0
 800314e:	d02d      	beq.n	80031ac <HAL_RCC_GetSysClockFreq+0x17c>
            {
              hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 8003150:	4b6c      	ldr	r3, [pc, #432]	; (8003304 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8003152:	681b      	ldr	r3, [r3, #0]
 8003154:	08db      	lsrs	r3, r3, #3
 8003156:	f003 0303 	and.w	r3, r3, #3
 800315a:	4a6b      	ldr	r2, [pc, #428]	; (8003308 <HAL_RCC_GetSysClockFreq+0x2d8>)
 800315c:	fa22 f303 	lsr.w	r3, r2, r3
 8003160:	607b      	str	r3, [r7, #4]
              pllvco = ((float_t)hsivalue / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 8003162:	687b      	ldr	r3, [r7, #4]
 8003164:	ee07 3a90 	vmov	s15, r3
 8003168:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800316c:	693b      	ldr	r3, [r7, #16]
 800316e:	ee07 3a90 	vmov	s15, r3
 8003172:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8003176:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800317a:	4b62      	ldr	r3, [pc, #392]	; (8003304 <HAL_RCC_GetSysClockFreq+0x2d4>)
 800317c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800317e:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8003182:	ee07 3a90 	vmov	s15, r3
 8003186:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800318a:	ed97 6a02 	vldr	s12, [r7, #8]
 800318e:	eddf 5a61 	vldr	s11, [pc, #388]	; 8003314 <HAL_RCC_GetSysClockFreq+0x2e4>
 8003192:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8003196:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800319a:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800319e:	ee77 7aa6 	vadd.f32	s15, s15, s13
 80031a2:	ee67 7a27 	vmul.f32	s15, s14, s15
 80031a6:	edc7 7a07 	vstr	s15, [r7, #28]
            }
            else
            {
              pllvco = ((float_t)HSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
            }
            break;
 80031aa:	e087      	b.n	80032bc <HAL_RCC_GetSysClockFreq+0x28c>
              pllvco = ((float_t)HSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 80031ac:	693b      	ldr	r3, [r7, #16]
 80031ae:	ee07 3a90 	vmov	s15, r3
 80031b2:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80031b6:	eddf 6a58 	vldr	s13, [pc, #352]	; 8003318 <HAL_RCC_GetSysClockFreq+0x2e8>
 80031ba:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 80031be:	4b51      	ldr	r3, [pc, #324]	; (8003304 <HAL_RCC_GetSysClockFreq+0x2d4>)
 80031c0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80031c2:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80031c6:	ee07 3a90 	vmov	s15, r3
 80031ca:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80031ce:	ed97 6a02 	vldr	s12, [r7, #8]
 80031d2:	eddf 5a50 	vldr	s11, [pc, #320]	; 8003314 <HAL_RCC_GetSysClockFreq+0x2e4>
 80031d6:	eec6 7a25 	vdiv.f32	s15, s12, s11
 80031da:	ee76 7aa7 	vadd.f32	s15, s13, s15
 80031de:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 80031e2:	ee77 7aa6 	vadd.f32	s15, s15, s13
 80031e6:	ee67 7a27 	vmul.f32	s15, s14, s15
 80031ea:	edc7 7a07 	vstr	s15, [r7, #28]
            break;
 80031ee:	e065      	b.n	80032bc <HAL_RCC_GetSysClockFreq+0x28c>

          case RCC_PLLSOURCE_CSI:  /* CSI used as PLL clock source */
            pllvco = ((float_t)CSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 80031f0:	693b      	ldr	r3, [r7, #16]
 80031f2:	ee07 3a90 	vmov	s15, r3
 80031f6:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80031fa:	eddf 6a48 	vldr	s13, [pc, #288]	; 800331c <HAL_RCC_GetSysClockFreq+0x2ec>
 80031fe:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8003202:	4b40      	ldr	r3, [pc, #256]	; (8003304 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8003204:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003206:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800320a:	ee07 3a90 	vmov	s15, r3
 800320e:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8003212:	ed97 6a02 	vldr	s12, [r7, #8]
 8003216:	eddf 5a3f 	vldr	s11, [pc, #252]	; 8003314 <HAL_RCC_GetSysClockFreq+0x2e4>
 800321a:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800321e:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8003222:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8003226:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800322a:	ee67 7a27 	vmul.f32	s15, s14, s15
 800322e:	edc7 7a07 	vstr	s15, [r7, #28]
            break;
 8003232:	e043      	b.n	80032bc <HAL_RCC_GetSysClockFreq+0x28c>

          case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
            pllvco = ((float_t)HSE_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 8003234:	693b      	ldr	r3, [r7, #16]
 8003236:	ee07 3a90 	vmov	s15, r3
 800323a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800323e:	eddf 6a38 	vldr	s13, [pc, #224]	; 8003320 <HAL_RCC_GetSysClockFreq+0x2f0>
 8003242:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8003246:	4b2f      	ldr	r3, [pc, #188]	; (8003304 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8003248:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800324a:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800324e:	ee07 3a90 	vmov	s15, r3
 8003252:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8003256:	ed97 6a02 	vldr	s12, [r7, #8]
 800325a:	eddf 5a2e 	vldr	s11, [pc, #184]	; 8003314 <HAL_RCC_GetSysClockFreq+0x2e4>
 800325e:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8003262:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8003266:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800326a:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800326e:	ee67 7a27 	vmul.f32	s15, s14, s15
 8003272:	edc7 7a07 	vstr	s15, [r7, #28]
            break;
 8003276:	e021      	b.n	80032bc <HAL_RCC_GetSysClockFreq+0x28c>

          default:
            pllvco = ((float_t)CSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 8003278:	693b      	ldr	r3, [r7, #16]
 800327a:	ee07 3a90 	vmov	s15, r3
 800327e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8003282:	eddf 6a26 	vldr	s13, [pc, #152]	; 800331c <HAL_RCC_GetSysClockFreq+0x2ec>
 8003286:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800328a:	4b1e      	ldr	r3, [pc, #120]	; (8003304 <HAL_RCC_GetSysClockFreq+0x2d4>)
 800328c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800328e:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8003292:	ee07 3a90 	vmov	s15, r3
 8003296:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800329a:	ed97 6a02 	vldr	s12, [r7, #8]
 800329e:	eddf 5a1d 	vldr	s11, [pc, #116]	; 8003314 <HAL_RCC_GetSysClockFreq+0x2e4>
 80032a2:	eec6 7a25 	vdiv.f32	s15, s12, s11
 80032a6:	ee76 7aa7 	vadd.f32	s15, s13, s15
 80032aa:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 80032ae:	ee77 7aa6 	vadd.f32	s15, s15, s13
 80032b2:	ee67 7a27 	vmul.f32	s15, s14, s15
 80032b6:	edc7 7a07 	vstr	s15, [r7, #28]
            break;
 80032ba:	bf00      	nop
        }
        pllp = (((RCC->PLL1DIVR & RCC_PLL1DIVR_P1) >> 9) + 1U) ;
 80032bc:	4b11      	ldr	r3, [pc, #68]	; (8003304 <HAL_RCC_GetSysClockFreq+0x2d4>)
 80032be:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80032c0:	0a5b      	lsrs	r3, r3, #9
 80032c2:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 80032c6:	3301      	adds	r3, #1
 80032c8:	603b      	str	r3, [r7, #0]
        sysclockfreq = (uint32_t)(float_t)(pllvco / (float_t)pllp);
 80032ca:	683b      	ldr	r3, [r7, #0]
 80032cc:	ee07 3a90 	vmov	s15, r3
 80032d0:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 80032d4:	edd7 6a07 	vldr	s13, [r7, #28]
 80032d8:	eec6 7a87 	vdiv.f32	s15, s13, s14
 80032dc:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 80032e0:	ee17 3a90 	vmov	r3, s15
 80032e4:	61bb      	str	r3, [r7, #24]
      }
      else
      {
        sysclockfreq = 0U;
      }
      break;
 80032e6:	e005      	b.n	80032f4 <HAL_RCC_GetSysClockFreq+0x2c4>
        sysclockfreq = 0U;
 80032e8:	2300      	movs	r3, #0
 80032ea:	61bb      	str	r3, [r7, #24]
      break;
 80032ec:	e002      	b.n	80032f4 <HAL_RCC_GetSysClockFreq+0x2c4>

    default:
      sysclockfreq = CSI_VALUE;
 80032ee:	4b07      	ldr	r3, [pc, #28]	; (800330c <HAL_RCC_GetSysClockFreq+0x2dc>)
 80032f0:	61bb      	str	r3, [r7, #24]
      break;
 80032f2:	bf00      	nop
  }

  return sysclockfreq;
 80032f4:	69bb      	ldr	r3, [r7, #24]
}
 80032f6:	4618      	mov	r0, r3
 80032f8:	3724      	adds	r7, #36	; 0x24
 80032fa:	46bd      	mov	sp, r7
 80032fc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003300:	4770      	bx	lr
 8003302:	bf00      	nop
 8003304:	58024400 	.word	0x58024400
 8003308:	03d09000 	.word	0x03d09000
 800330c:	003d0900 	.word	0x003d0900
 8003310:	007a1200 	.word	0x007a1200
 8003314:	46000000 	.word	0x46000000
 8003318:	4c742400 	.word	0x4c742400
 800331c:	4a742400 	.word	0x4a742400
 8003320:	4af42400 	.word	0x4af42400

08003324 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemD2Clock CMSIS variable is used to store System domain2 Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8003324:	b580      	push	{r7, lr}
 8003326:	b082      	sub	sp, #8
 8003328:	af00      	add	r7, sp, #0
  uint32_t common_system_clock;

#if defined(RCC_D1CFGR_D1CPRE)
  common_system_clock = HAL_RCC_GetSysClockFreq() >> (D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE) >> RCC_D1CFGR_D1CPRE_Pos] & 0x1FU);
 800332a:	f7ff fe81 	bl	8003030 <HAL_RCC_GetSysClockFreq>
 800332e:	4602      	mov	r2, r0
 8003330:	4b10      	ldr	r3, [pc, #64]	; (8003374 <HAL_RCC_GetHCLKFreq+0x50>)
 8003332:	699b      	ldr	r3, [r3, #24]
 8003334:	0a1b      	lsrs	r3, r3, #8
 8003336:	f003 030f 	and.w	r3, r3, #15
 800333a:	490f      	ldr	r1, [pc, #60]	; (8003378 <HAL_RCC_GetHCLKFreq+0x54>)
 800333c:	5ccb      	ldrb	r3, [r1, r3]
 800333e:	f003 031f 	and.w	r3, r3, #31
 8003342:	fa22 f303 	lsr.w	r3, r2, r3
 8003346:	607b      	str	r3, [r7, #4]
#else
  common_system_clock = HAL_RCC_GetSysClockFreq() >> (D1CorePrescTable[(RCC->CDCFGR1 & RCC_CDCFGR1_CDCPRE) >> RCC_CDCFGR1_CDCPRE_Pos] & 0x1FU);
#endif

#if defined(RCC_D1CFGR_HPRE)
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE) >> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
 8003348:	4b0a      	ldr	r3, [pc, #40]	; (8003374 <HAL_RCC_GetHCLKFreq+0x50>)
 800334a:	699b      	ldr	r3, [r3, #24]
 800334c:	f003 030f 	and.w	r3, r3, #15
 8003350:	4a09      	ldr	r2, [pc, #36]	; (8003378 <HAL_RCC_GetHCLKFreq+0x54>)
 8003352:	5cd3      	ldrb	r3, [r2, r3]
 8003354:	f003 031f 	and.w	r3, r3, #31
 8003358:	687a      	ldr	r2, [r7, #4]
 800335a:	fa22 f303 	lsr.w	r3, r2, r3
 800335e:	4a07      	ldr	r2, [pc, #28]	; (800337c <HAL_RCC_GetHCLKFreq+0x58>)
 8003360:	6013      	str	r3, [r2, #0]
#endif

#if defined(DUAL_CORE) && defined(CORE_CM4)
  SystemCoreClock = SystemD2Clock;
#else
  SystemCoreClock = common_system_clock;
 8003362:	4a07      	ldr	r2, [pc, #28]	; (8003380 <HAL_RCC_GetHCLKFreq+0x5c>)
 8003364:	687b      	ldr	r3, [r7, #4]
 8003366:	6013      	str	r3, [r2, #0]
#endif /* DUAL_CORE && CORE_CM4 */

  return SystemD2Clock;
 8003368:	4b04      	ldr	r3, [pc, #16]	; (800337c <HAL_RCC_GetHCLKFreq+0x58>)
 800336a:	681b      	ldr	r3, [r3, #0]
}
 800336c:	4618      	mov	r0, r3
 800336e:	3708      	adds	r7, #8
 8003370:	46bd      	mov	sp, r7
 8003372:	bd80      	pop	{r7, pc}
 8003374:	58024400 	.word	0x58024400
 8003378:	0800b060 	.word	0x0800b060
 800337c:	24000004 	.word	0x24000004
 8003380:	24000000 	.word	0x24000000

08003384 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8003384:	b580      	push	{r7, lr}
 8003386:	af00      	add	r7, sp, #0
#if defined (RCC_D2CFGR_D2PPRE1)
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->D2CFGR & RCC_D2CFGR_D2PPRE1) >> RCC_D2CFGR_D2PPRE1_Pos]) & 0x1FU));
 8003388:	f7ff ffcc 	bl	8003324 <HAL_RCC_GetHCLKFreq>
 800338c:	4602      	mov	r2, r0
 800338e:	4b06      	ldr	r3, [pc, #24]	; (80033a8 <HAL_RCC_GetPCLK1Freq+0x24>)
 8003390:	69db      	ldr	r3, [r3, #28]
 8003392:	091b      	lsrs	r3, r3, #4
 8003394:	f003 0307 	and.w	r3, r3, #7
 8003398:	4904      	ldr	r1, [pc, #16]	; (80033ac <HAL_RCC_GetPCLK1Freq+0x28>)
 800339a:	5ccb      	ldrb	r3, [r1, r3]
 800339c:	f003 031f 	and.w	r3, r3, #31
 80033a0:	fa22 f303 	lsr.w	r3, r2, r3
#else
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->CDCFGR2 & RCC_CDCFGR2_CDPPRE1) >> RCC_CDCFGR2_CDPPRE1_Pos]) & 0x1FU));
#endif
}
 80033a4:	4618      	mov	r0, r3
 80033a6:	bd80      	pop	{r7, pc}
 80033a8:	58024400 	.word	0x58024400
 80033ac:	0800b060 	.word	0x0800b060

080033b0 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 80033b0:	b580      	push	{r7, lr}
 80033b2:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
#if defined(RCC_D2CFGR_D2PPRE2)
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->D2CFGR & RCC_D2CFGR_D2PPRE2) >> RCC_D2CFGR_D2PPRE2_Pos]) & 0x1FU));
 80033b4:	f7ff ffb6 	bl	8003324 <HAL_RCC_GetHCLKFreq>
 80033b8:	4602      	mov	r2, r0
 80033ba:	4b06      	ldr	r3, [pc, #24]	; (80033d4 <HAL_RCC_GetPCLK2Freq+0x24>)
 80033bc:	69db      	ldr	r3, [r3, #28]
 80033be:	0a1b      	lsrs	r3, r3, #8
 80033c0:	f003 0307 	and.w	r3, r3, #7
 80033c4:	4904      	ldr	r1, [pc, #16]	; (80033d8 <HAL_RCC_GetPCLK2Freq+0x28>)
 80033c6:	5ccb      	ldrb	r3, [r1, r3]
 80033c8:	f003 031f 	and.w	r3, r3, #31
 80033cc:	fa22 f303 	lsr.w	r3, r2, r3
#else
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->CDCFGR2 & RCC_CDCFGR2_CDPPRE2) >> RCC_CDCFGR2_CDPPRE2_Pos]) & 0x1FU));
#endif
}
 80033d0:	4618      	mov	r0, r3
 80033d2:	bd80      	pop	{r7, pc}
 80033d4:	58024400 	.word	0x58024400
 80033d8:	0800b060 	.word	0x0800b060

080033dc <HAL_RCCEx_PeriphCLKConfig>:
  * (*) : Available on some STM32H7 lines only.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 80033dc:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 80033e0:	b0c6      	sub	sp, #280	; 0x118
 80033e2:	af00      	add	r7, sp, #0
 80033e4:	f8c7 0104 	str.w	r0, [r7, #260]	; 0x104
  uint32_t tmpreg;
  uint32_t tickstart;
  HAL_StatusTypeDef ret = HAL_OK;      /* Intermediate status */
 80033e8:	2300      	movs	r3, #0
 80033ea:	f887 3117 	strb.w	r3, [r7, #279]	; 0x117
  HAL_StatusTypeDef status = HAL_OK;   /* Final status */
 80033ee:	2300      	movs	r3, #0
 80033f0:	f887 3116 	strb.w	r3, [r7, #278]	; 0x116

  /*---------------------------- SPDIFRX configuration -------------------------------*/

  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPDIFRX) == RCC_PERIPHCLK_SPDIFRX)
 80033f4:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 80033f8:	e9d3 2300 	ldrd	r2, r3, [r3]
 80033fc:	f002 6400 	and.w	r4, r2, #134217728	; 0x8000000
 8003400:	2500      	movs	r5, #0
 8003402:	ea54 0305 	orrs.w	r3, r4, r5
 8003406:	d049      	beq.n	800349c <HAL_RCCEx_PeriphCLKConfig+0xc0>
  {

    switch (PeriphClkInit->SpdifrxClockSelection)
 8003408:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800340c:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800340e:	f5b3 1f40 	cmp.w	r3, #3145728	; 0x300000
 8003412:	d02f      	beq.n	8003474 <HAL_RCCEx_PeriphCLKConfig+0x98>
 8003414:	f5b3 1f40 	cmp.w	r3, #3145728	; 0x300000
 8003418:	d828      	bhi.n	800346c <HAL_RCCEx_PeriphCLKConfig+0x90>
 800341a:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 800341e:	d01a      	beq.n	8003456 <HAL_RCCEx_PeriphCLKConfig+0x7a>
 8003420:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 8003424:	d822      	bhi.n	800346c <HAL_RCCEx_PeriphCLKConfig+0x90>
 8003426:	2b00      	cmp	r3, #0
 8003428:	d003      	beq.n	8003432 <HAL_RCCEx_PeriphCLKConfig+0x56>
 800342a:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 800342e:	d007      	beq.n	8003440 <HAL_RCCEx_PeriphCLKConfig+0x64>
 8003430:	e01c      	b.n	800346c <HAL_RCCEx_PeriphCLKConfig+0x90>
    {
      case RCC_SPDIFRXCLKSOURCE_PLL:      /* PLL is used as clock source for SPDIFRX*/
        /* Enable PLL1Q Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8003432:	4bab      	ldr	r3, [pc, #684]	; (80036e0 <HAL_RCCEx_PeriphCLKConfig+0x304>)
 8003434:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003436:	4aaa      	ldr	r2, [pc, #680]	; (80036e0 <HAL_RCCEx_PeriphCLKConfig+0x304>)
 8003438:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800343c:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* SPDIFRX clock source configuration done later after clock selection check */
        break;
 800343e:	e01a      	b.n	8003476 <HAL_RCCEx_PeriphCLKConfig+0x9a>

      case RCC_SPDIFRXCLKSOURCE_PLL2: /* PLL2 is used as clock source for SPDIFRX*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_R_UPDATE);
 8003440:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8003444:	3308      	adds	r3, #8
 8003446:	2102      	movs	r1, #2
 8003448:	4618      	mov	r0, r3
 800344a:	f001 fc25 	bl	8004c98 <RCCEx_PLL2_Config>
 800344e:	4603      	mov	r3, r0
 8003450:	f887 3117 	strb.w	r3, [r7, #279]	; 0x117

        /* SPDIFRX clock source configuration done later after clock selection check */
        break;
 8003454:	e00f      	b.n	8003476 <HAL_RCCEx_PeriphCLKConfig+0x9a>

      case RCC_SPDIFRXCLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPDIFRX*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 8003456:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800345a:	3328      	adds	r3, #40	; 0x28
 800345c:	2102      	movs	r1, #2
 800345e:	4618      	mov	r0, r3
 8003460:	f001 fccc 	bl	8004dfc <RCCEx_PLL3_Config>
 8003464:	4603      	mov	r3, r0
 8003466:	f887 3117 	strb.w	r3, [r7, #279]	; 0x117

        /* SPDIFRX clock source configuration done later after clock selection check */
        break;
 800346a:	e004      	b.n	8003476 <HAL_RCCEx_PeriphCLKConfig+0x9a>
        /* Internal OSC clock is used as source of SPDIFRX clock*/
        /* SPDIFRX clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 800346c:	2301      	movs	r3, #1
 800346e:	f887 3117 	strb.w	r3, [r7, #279]	; 0x117
        break;
 8003472:	e000      	b.n	8003476 <HAL_RCCEx_PeriphCLKConfig+0x9a>
        break;
 8003474:	bf00      	nop
    }

    if (ret == HAL_OK)
 8003476:	f897 3117 	ldrb.w	r3, [r7, #279]	; 0x117
 800347a:	2b00      	cmp	r3, #0
 800347c:	d10a      	bne.n	8003494 <HAL_RCCEx_PeriphCLKConfig+0xb8>
    {
      /* Set the source of SPDIFRX clock*/
      __HAL_RCC_SPDIFRX_CONFIG(PeriphClkInit->SpdifrxClockSelection);
 800347e:	4b98      	ldr	r3, [pc, #608]	; (80036e0 <HAL_RCCEx_PeriphCLKConfig+0x304>)
 8003480:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8003482:	f423 1140 	bic.w	r1, r3, #3145728	; 0x300000
 8003486:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800348a:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800348c:	4a94      	ldr	r2, [pc, #592]	; (80036e0 <HAL_RCCEx_PeriphCLKConfig+0x304>)
 800348e:	430b      	orrs	r3, r1
 8003490:	6513      	str	r3, [r2, #80]	; 0x50
 8003492:	e003      	b.n	800349c <HAL_RCCEx_PeriphCLKConfig+0xc0>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8003494:	f897 3117 	ldrb.w	r3, [r7, #279]	; 0x117
 8003498:	f887 3116 	strb.w	r3, [r7, #278]	; 0x116
    }
  }

  /*---------------------------- SAI1 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1)
 800349c:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 80034a0:	e9d3 2300 	ldrd	r2, r3, [r3]
 80034a4:	f402 7880 	and.w	r8, r2, #256	; 0x100
 80034a8:	f04f 0900 	mov.w	r9, #0
 80034ac:	ea58 0309 	orrs.w	r3, r8, r9
 80034b0:	d047      	beq.n	8003542 <HAL_RCCEx_PeriphCLKConfig+0x166>
  {
    switch (PeriphClkInit->Sai1ClockSelection)
 80034b2:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 80034b6:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80034b8:	2b04      	cmp	r3, #4
 80034ba:	d82a      	bhi.n	8003512 <HAL_RCCEx_PeriphCLKConfig+0x136>
 80034bc:	a201      	add	r2, pc, #4	; (adr r2, 80034c4 <HAL_RCCEx_PeriphCLKConfig+0xe8>)
 80034be:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80034c2:	bf00      	nop
 80034c4:	080034d9 	.word	0x080034d9
 80034c8:	080034e7 	.word	0x080034e7
 80034cc:	080034fd 	.word	0x080034fd
 80034d0:	0800351b 	.word	0x0800351b
 80034d4:	0800351b 	.word	0x0800351b
    {
      case RCC_SAI1CLKSOURCE_PLL:      /* PLL is used as clock source for SAI1*/
        /* Enable SAI Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 80034d8:	4b81      	ldr	r3, [pc, #516]	; (80036e0 <HAL_RCCEx_PeriphCLKConfig+0x304>)
 80034da:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80034dc:	4a80      	ldr	r2, [pc, #512]	; (80036e0 <HAL_RCCEx_PeriphCLKConfig+0x304>)
 80034de:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80034e2:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 80034e4:	e01a      	b.n	800351c <HAL_RCCEx_PeriphCLKConfig+0x140>

      case RCC_SAI1CLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI1*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 80034e6:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 80034ea:	3308      	adds	r3, #8
 80034ec:	2100      	movs	r1, #0
 80034ee:	4618      	mov	r0, r3
 80034f0:	f001 fbd2 	bl	8004c98 <RCCEx_PLL2_Config>
 80034f4:	4603      	mov	r3, r0
 80034f6:	f887 3117 	strb.w	r3, [r7, #279]	; 0x117

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 80034fa:	e00f      	b.n	800351c <HAL_RCCEx_PeriphCLKConfig+0x140>

      case RCC_SAI1CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI1*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 80034fc:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8003500:	3328      	adds	r3, #40	; 0x28
 8003502:	2100      	movs	r1, #0
 8003504:	4618      	mov	r0, r3
 8003506:	f001 fc79 	bl	8004dfc <RCCEx_PLL3_Config>
 800350a:	4603      	mov	r3, r0
 800350c:	f887 3117 	strb.w	r3, [r7, #279]	; 0x117

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 8003510:	e004      	b.n	800351c <HAL_RCCEx_PeriphCLKConfig+0x140>
        /* HSI, HSE, or CSI oscillator is used as source of SAI1 clock */
        /* SAI1 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8003512:	2301      	movs	r3, #1
 8003514:	f887 3117 	strb.w	r3, [r7, #279]	; 0x117
        break;
 8003518:	e000      	b.n	800351c <HAL_RCCEx_PeriphCLKConfig+0x140>
        break;
 800351a:	bf00      	nop
    }

    if (ret == HAL_OK)
 800351c:	f897 3117 	ldrb.w	r3, [r7, #279]	; 0x117
 8003520:	2b00      	cmp	r3, #0
 8003522:	d10a      	bne.n	800353a <HAL_RCCEx_PeriphCLKConfig+0x15e>
    {
      /* Set the source of SAI1 clock*/
      __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 8003524:	4b6e      	ldr	r3, [pc, #440]	; (80036e0 <HAL_RCCEx_PeriphCLKConfig+0x304>)
 8003526:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8003528:	f023 0107 	bic.w	r1, r3, #7
 800352c:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8003530:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003532:	4a6b      	ldr	r2, [pc, #428]	; (80036e0 <HAL_RCCEx_PeriphCLKConfig+0x304>)
 8003534:	430b      	orrs	r3, r1
 8003536:	6513      	str	r3, [r2, #80]	; 0x50
 8003538:	e003      	b.n	8003542 <HAL_RCCEx_PeriphCLKConfig+0x166>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800353a:	f897 3117 	ldrb.w	r3, [r7, #279]	; 0x117
 800353e:	f887 3116 	strb.w	r3, [r7, #278]	; 0x116
  }
#endif  /*SAI2B*/

#if defined(SAI4)
  /*---------------------------- SAI4A configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI4A) == RCC_PERIPHCLK_SAI4A)
 8003542:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8003546:	e9d3 2300 	ldrd	r2, r3, [r3]
 800354a:	f402 6a80 	and.w	sl, r2, #1024	; 0x400
 800354e:	f04f 0b00 	mov.w	fp, #0
 8003552:	ea5a 030b 	orrs.w	r3, sl, fp
 8003556:	d05b      	beq.n	8003610 <HAL_RCCEx_PeriphCLKConfig+0x234>
  {
    switch (PeriphClkInit->Sai4AClockSelection)
 8003558:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800355c:	f8d3 30a4 	ldr.w	r3, [r3, #164]	; 0xa4
 8003560:	f5b3 0f20 	cmp.w	r3, #10485760	; 0xa00000
 8003564:	d03b      	beq.n	80035de <HAL_RCCEx_PeriphCLKConfig+0x202>
 8003566:	f5b3 0f20 	cmp.w	r3, #10485760	; 0xa00000
 800356a:	d834      	bhi.n	80035d6 <HAL_RCCEx_PeriphCLKConfig+0x1fa>
 800356c:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 8003570:	d037      	beq.n	80035e2 <HAL_RCCEx_PeriphCLKConfig+0x206>
 8003572:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 8003576:	d82e      	bhi.n	80035d6 <HAL_RCCEx_PeriphCLKConfig+0x1fa>
 8003578:	f5b3 0fc0 	cmp.w	r3, #6291456	; 0x600000
 800357c:	d033      	beq.n	80035e6 <HAL_RCCEx_PeriphCLKConfig+0x20a>
 800357e:	f5b3 0fc0 	cmp.w	r3, #6291456	; 0x600000
 8003582:	d828      	bhi.n	80035d6 <HAL_RCCEx_PeriphCLKConfig+0x1fa>
 8003584:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8003588:	d01a      	beq.n	80035c0 <HAL_RCCEx_PeriphCLKConfig+0x1e4>
 800358a:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 800358e:	d822      	bhi.n	80035d6 <HAL_RCCEx_PeriphCLKConfig+0x1fa>
 8003590:	2b00      	cmp	r3, #0
 8003592:	d003      	beq.n	800359c <HAL_RCCEx_PeriphCLKConfig+0x1c0>
 8003594:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 8003598:	d007      	beq.n	80035aa <HAL_RCCEx_PeriphCLKConfig+0x1ce>
 800359a:	e01c      	b.n	80035d6 <HAL_RCCEx_PeriphCLKConfig+0x1fa>
    {
      case RCC_SAI4ACLKSOURCE_PLL:      /* PLL is used as clock source for SAI2*/
        /* Enable SAI Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 800359c:	4b50      	ldr	r3, [pc, #320]	; (80036e0 <HAL_RCCEx_PeriphCLKConfig+0x304>)
 800359e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80035a0:	4a4f      	ldr	r2, [pc, #316]	; (80036e0 <HAL_RCCEx_PeriphCLKConfig+0x304>)
 80035a2:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80035a6:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 80035a8:	e01e      	b.n	80035e8 <HAL_RCCEx_PeriphCLKConfig+0x20c>

      case RCC_SAI4ACLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI2*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 80035aa:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 80035ae:	3308      	adds	r3, #8
 80035b0:	2100      	movs	r1, #0
 80035b2:	4618      	mov	r0, r3
 80035b4:	f001 fb70 	bl	8004c98 <RCCEx_PLL2_Config>
 80035b8:	4603      	mov	r3, r0
 80035ba:	f887 3117 	strb.w	r3, [r7, #279]	; 0x117

        /* SAI2 clock source configuration done later after clock selection check */
        break;
 80035be:	e013      	b.n	80035e8 <HAL_RCCEx_PeriphCLKConfig+0x20c>

      case RCC_SAI4ACLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI2*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 80035c0:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 80035c4:	3328      	adds	r3, #40	; 0x28
 80035c6:	2100      	movs	r1, #0
 80035c8:	4618      	mov	r0, r3
 80035ca:	f001 fc17 	bl	8004dfc <RCCEx_PLL3_Config>
 80035ce:	4603      	mov	r3, r0
 80035d0:	f887 3117 	strb.w	r3, [r7, #279]	; 0x117

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 80035d4:	e008      	b.n	80035e8 <HAL_RCCEx_PeriphCLKConfig+0x20c>
        /* SAI4A clock source configuration done later after clock selection check */
        break;
#endif /* RCC_VER_3_0 */

      default:
        ret = HAL_ERROR;
 80035d6:	2301      	movs	r3, #1
 80035d8:	f887 3117 	strb.w	r3, [r7, #279]	; 0x117
        break;
 80035dc:	e004      	b.n	80035e8 <HAL_RCCEx_PeriphCLKConfig+0x20c>
        break;
 80035de:	bf00      	nop
 80035e0:	e002      	b.n	80035e8 <HAL_RCCEx_PeriphCLKConfig+0x20c>
        break;
 80035e2:	bf00      	nop
 80035e4:	e000      	b.n	80035e8 <HAL_RCCEx_PeriphCLKConfig+0x20c>
        break;
 80035e6:	bf00      	nop
    }

    if (ret == HAL_OK)
 80035e8:	f897 3117 	ldrb.w	r3, [r7, #279]	; 0x117
 80035ec:	2b00      	cmp	r3, #0
 80035ee:	d10b      	bne.n	8003608 <HAL_RCCEx_PeriphCLKConfig+0x22c>
    {
      /* Set the source of SAI4A clock*/
      __HAL_RCC_SAI4A_CONFIG(PeriphClkInit->Sai4AClockSelection);
 80035f0:	4b3b      	ldr	r3, [pc, #236]	; (80036e0 <HAL_RCCEx_PeriphCLKConfig+0x304>)
 80035f2:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80035f4:	f423 0160 	bic.w	r1, r3, #14680064	; 0xe00000
 80035f8:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 80035fc:	f8d3 30a4 	ldr.w	r3, [r3, #164]	; 0xa4
 8003600:	4a37      	ldr	r2, [pc, #220]	; (80036e0 <HAL_RCCEx_PeriphCLKConfig+0x304>)
 8003602:	430b      	orrs	r3, r1
 8003604:	6593      	str	r3, [r2, #88]	; 0x58
 8003606:	e003      	b.n	8003610 <HAL_RCCEx_PeriphCLKConfig+0x234>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8003608:	f897 3117 	ldrb.w	r3, [r7, #279]	; 0x117
 800360c:	f887 3116 	strb.w	r3, [r7, #278]	; 0x116
    }
  }
  /*---------------------------- SAI4B configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI4B) == RCC_PERIPHCLK_SAI4B)
 8003610:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8003614:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003618:	f402 6300 	and.w	r3, r2, #2048	; 0x800
 800361c:	f8c7 30f8 	str.w	r3, [r7, #248]	; 0xf8
 8003620:	2300      	movs	r3, #0
 8003622:	f8c7 30fc 	str.w	r3, [r7, #252]	; 0xfc
 8003626:	e9d7 123e 	ldrd	r1, r2, [r7, #248]	; 0xf8
 800362a:	460b      	mov	r3, r1
 800362c:	4313      	orrs	r3, r2
 800362e:	d05d      	beq.n	80036ec <HAL_RCCEx_PeriphCLKConfig+0x310>
  {
    switch (PeriphClkInit->Sai4BClockSelection)
 8003630:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8003634:	f8d3 30a8 	ldr.w	r3, [r3, #168]	; 0xa8
 8003638:	f1b3 6fa0 	cmp.w	r3, #83886080	; 0x5000000
 800363c:	d03b      	beq.n	80036b6 <HAL_RCCEx_PeriphCLKConfig+0x2da>
 800363e:	f1b3 6fa0 	cmp.w	r3, #83886080	; 0x5000000
 8003642:	d834      	bhi.n	80036ae <HAL_RCCEx_PeriphCLKConfig+0x2d2>
 8003644:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 8003648:	d037      	beq.n	80036ba <HAL_RCCEx_PeriphCLKConfig+0x2de>
 800364a:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 800364e:	d82e      	bhi.n	80036ae <HAL_RCCEx_PeriphCLKConfig+0x2d2>
 8003650:	f1b3 7f40 	cmp.w	r3, #50331648	; 0x3000000
 8003654:	d033      	beq.n	80036be <HAL_RCCEx_PeriphCLKConfig+0x2e2>
 8003656:	f1b3 7f40 	cmp.w	r3, #50331648	; 0x3000000
 800365a:	d828      	bhi.n	80036ae <HAL_RCCEx_PeriphCLKConfig+0x2d2>
 800365c:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 8003660:	d01a      	beq.n	8003698 <HAL_RCCEx_PeriphCLKConfig+0x2bc>
 8003662:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 8003666:	d822      	bhi.n	80036ae <HAL_RCCEx_PeriphCLKConfig+0x2d2>
 8003668:	2b00      	cmp	r3, #0
 800366a:	d003      	beq.n	8003674 <HAL_RCCEx_PeriphCLKConfig+0x298>
 800366c:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8003670:	d007      	beq.n	8003682 <HAL_RCCEx_PeriphCLKConfig+0x2a6>
 8003672:	e01c      	b.n	80036ae <HAL_RCCEx_PeriphCLKConfig+0x2d2>
    {
      case RCC_SAI4BCLKSOURCE_PLL:      /* PLL is used as clock source for SAI2*/
        /* Enable SAI Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8003674:	4b1a      	ldr	r3, [pc, #104]	; (80036e0 <HAL_RCCEx_PeriphCLKConfig+0x304>)
 8003676:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003678:	4a19      	ldr	r2, [pc, #100]	; (80036e0 <HAL_RCCEx_PeriphCLKConfig+0x304>)
 800367a:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800367e:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 8003680:	e01e      	b.n	80036c0 <HAL_RCCEx_PeriphCLKConfig+0x2e4>

      case RCC_SAI4BCLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI2*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 8003682:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8003686:	3308      	adds	r3, #8
 8003688:	2100      	movs	r1, #0
 800368a:	4618      	mov	r0, r3
 800368c:	f001 fb04 	bl	8004c98 <RCCEx_PLL2_Config>
 8003690:	4603      	mov	r3, r0
 8003692:	f887 3117 	strb.w	r3, [r7, #279]	; 0x117

        /* SAI2 clock source configuration done later after clock selection check */
        break;
 8003696:	e013      	b.n	80036c0 <HAL_RCCEx_PeriphCLKConfig+0x2e4>

      case RCC_SAI4BCLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI2*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 8003698:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800369c:	3328      	adds	r3, #40	; 0x28
 800369e:	2100      	movs	r1, #0
 80036a0:	4618      	mov	r0, r3
 80036a2:	f001 fbab 	bl	8004dfc <RCCEx_PLL3_Config>
 80036a6:	4603      	mov	r3, r0
 80036a8:	f887 3117 	strb.w	r3, [r7, #279]	; 0x117

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 80036ac:	e008      	b.n	80036c0 <HAL_RCCEx_PeriphCLKConfig+0x2e4>
        /* SAI4B clock source configuration done later after clock selection check */
        break;
#endif /* RCC_VER_3_0 */

      default:
        ret = HAL_ERROR;
 80036ae:	2301      	movs	r3, #1
 80036b0:	f887 3117 	strb.w	r3, [r7, #279]	; 0x117
        break;
 80036b4:	e004      	b.n	80036c0 <HAL_RCCEx_PeriphCLKConfig+0x2e4>
        break;
 80036b6:	bf00      	nop
 80036b8:	e002      	b.n	80036c0 <HAL_RCCEx_PeriphCLKConfig+0x2e4>
        break;
 80036ba:	bf00      	nop
 80036bc:	e000      	b.n	80036c0 <HAL_RCCEx_PeriphCLKConfig+0x2e4>
        break;
 80036be:	bf00      	nop
    }

    if (ret == HAL_OK)
 80036c0:	f897 3117 	ldrb.w	r3, [r7, #279]	; 0x117
 80036c4:	2b00      	cmp	r3, #0
 80036c6:	d10d      	bne.n	80036e4 <HAL_RCCEx_PeriphCLKConfig+0x308>
    {
      /* Set the source of SAI4B clock*/
      __HAL_RCC_SAI4B_CONFIG(PeriphClkInit->Sai4BClockSelection);
 80036c8:	4b05      	ldr	r3, [pc, #20]	; (80036e0 <HAL_RCCEx_PeriphCLKConfig+0x304>)
 80036ca:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80036cc:	f023 61e0 	bic.w	r1, r3, #117440512	; 0x7000000
 80036d0:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 80036d4:	f8d3 30a8 	ldr.w	r3, [r3, #168]	; 0xa8
 80036d8:	4a01      	ldr	r2, [pc, #4]	; (80036e0 <HAL_RCCEx_PeriphCLKConfig+0x304>)
 80036da:	430b      	orrs	r3, r1
 80036dc:	6593      	str	r3, [r2, #88]	; 0x58
 80036de:	e005      	b.n	80036ec <HAL_RCCEx_PeriphCLKConfig+0x310>
 80036e0:	58024400 	.word	0x58024400
    }
    else
    {
      /* set overall return value */
      status = ret;
 80036e4:	f897 3117 	ldrb.w	r3, [r7, #279]	; 0x117
 80036e8:	f887 3116 	strb.w	r3, [r7, #278]	; 0x116
  }
#endif  /*QUADSPI*/

#if defined(OCTOSPI1) || defined(OCTOSPI2)
  /*---------------------------- OCTOSPI configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_OSPI) == RCC_PERIPHCLK_OSPI)
 80036ec:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 80036f0:	e9d3 2300 	ldrd	r2, r3, [r3]
 80036f4:	f002 7300 	and.w	r3, r2, #33554432	; 0x2000000
 80036f8:	f8c7 30f0 	str.w	r3, [r7, #240]	; 0xf0
 80036fc:	2300      	movs	r3, #0
 80036fe:	f8c7 30f4 	str.w	r3, [r7, #244]	; 0xf4
 8003702:	e9d7 123c 	ldrd	r1, r2, [r7, #240]	; 0xf0
 8003706:	460b      	mov	r3, r1
 8003708:	4313      	orrs	r3, r2
 800370a:	d03a      	beq.n	8003782 <HAL_RCCEx_PeriphCLKConfig+0x3a6>
  {
    switch (PeriphClkInit->OspiClockSelection)
 800370c:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8003710:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8003712:	2b30      	cmp	r3, #48	; 0x30
 8003714:	d01f      	beq.n	8003756 <HAL_RCCEx_PeriphCLKConfig+0x37a>
 8003716:	2b30      	cmp	r3, #48	; 0x30
 8003718:	d819      	bhi.n	800374e <HAL_RCCEx_PeriphCLKConfig+0x372>
 800371a:	2b20      	cmp	r3, #32
 800371c:	d00c      	beq.n	8003738 <HAL_RCCEx_PeriphCLKConfig+0x35c>
 800371e:	2b20      	cmp	r3, #32
 8003720:	d815      	bhi.n	800374e <HAL_RCCEx_PeriphCLKConfig+0x372>
 8003722:	2b00      	cmp	r3, #0
 8003724:	d019      	beq.n	800375a <HAL_RCCEx_PeriphCLKConfig+0x37e>
 8003726:	2b10      	cmp	r3, #16
 8003728:	d111      	bne.n	800374e <HAL_RCCEx_PeriphCLKConfig+0x372>
    {
      case RCC_OSPICLKSOURCE_PLL:      /* PLL is used as clock source for OSPI*/
        /* Enable OSPI Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 800372a:	4baa      	ldr	r3, [pc, #680]	; (80039d4 <HAL_RCCEx_PeriphCLKConfig+0x5f8>)
 800372c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800372e:	4aa9      	ldr	r2, [pc, #676]	; (80039d4 <HAL_RCCEx_PeriphCLKConfig+0x5f8>)
 8003730:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8003734:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* OSPI clock source configuration done later after clock selection check */
        break;
 8003736:	e011      	b.n	800375c <HAL_RCCEx_PeriphCLKConfig+0x380>

      case RCC_OSPICLKSOURCE_PLL2: /* PLL2 is used as clock source for OSPI*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_R_UPDATE);
 8003738:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800373c:	3308      	adds	r3, #8
 800373e:	2102      	movs	r1, #2
 8003740:	4618      	mov	r0, r3
 8003742:	f001 faa9 	bl	8004c98 <RCCEx_PLL2_Config>
 8003746:	4603      	mov	r3, r0
 8003748:	f887 3117 	strb.w	r3, [r7, #279]	; 0x117

        /* OSPI clock source configuration done later after clock selection check */
        break;
 800374c:	e006      	b.n	800375c <HAL_RCCEx_PeriphCLKConfig+0x380>
      case RCC_OSPICLKSOURCE_HCLK:
        /* HCLK clock selected as OSPI kernel peripheral clock */
        break;

      default:
        ret = HAL_ERROR;
 800374e:	2301      	movs	r3, #1
 8003750:	f887 3117 	strb.w	r3, [r7, #279]	; 0x117
        break;
 8003754:	e002      	b.n	800375c <HAL_RCCEx_PeriphCLKConfig+0x380>
        break;
 8003756:	bf00      	nop
 8003758:	e000      	b.n	800375c <HAL_RCCEx_PeriphCLKConfig+0x380>
        break;
 800375a:	bf00      	nop
    }

    if (ret == HAL_OK)
 800375c:	f897 3117 	ldrb.w	r3, [r7, #279]	; 0x117
 8003760:	2b00      	cmp	r3, #0
 8003762:	d10a      	bne.n	800377a <HAL_RCCEx_PeriphCLKConfig+0x39e>
    {
      /* Set the source of OSPI clock*/
      __HAL_RCC_OSPI_CONFIG(PeriphClkInit->OspiClockSelection);
 8003764:	4b9b      	ldr	r3, [pc, #620]	; (80039d4 <HAL_RCCEx_PeriphCLKConfig+0x5f8>)
 8003766:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8003768:	f023 0130 	bic.w	r1, r3, #48	; 0x30
 800376c:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8003770:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8003772:	4a98      	ldr	r2, [pc, #608]	; (80039d4 <HAL_RCCEx_PeriphCLKConfig+0x5f8>)
 8003774:	430b      	orrs	r3, r1
 8003776:	64d3      	str	r3, [r2, #76]	; 0x4c
 8003778:	e003      	b.n	8003782 <HAL_RCCEx_PeriphCLKConfig+0x3a6>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800377a:	f897 3117 	ldrb.w	r3, [r7, #279]	; 0x117
 800377e:	f887 3116 	strb.w	r3, [r7, #278]	; 0x116
    }
  }
#endif  /*OCTOSPI*/

  /*---------------------------- SPI1/2/3 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI123) == RCC_PERIPHCLK_SPI123)
 8003782:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8003786:	e9d3 2300 	ldrd	r2, r3, [r3]
 800378a:	f402 5380 	and.w	r3, r2, #4096	; 0x1000
 800378e:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
 8003792:	2300      	movs	r3, #0
 8003794:	f8c7 30ec 	str.w	r3, [r7, #236]	; 0xec
 8003798:	e9d7 123a 	ldrd	r1, r2, [r7, #232]	; 0xe8
 800379c:	460b      	mov	r3, r1
 800379e:	4313      	orrs	r3, r2
 80037a0:	d051      	beq.n	8003846 <HAL_RCCEx_PeriphCLKConfig+0x46a>
  {
    switch (PeriphClkInit->Spi123ClockSelection)
 80037a2:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 80037a6:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80037a8:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 80037ac:	d035      	beq.n	800381a <HAL_RCCEx_PeriphCLKConfig+0x43e>
 80037ae:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 80037b2:	d82e      	bhi.n	8003812 <HAL_RCCEx_PeriphCLKConfig+0x436>
 80037b4:	f5b3 5f40 	cmp.w	r3, #12288	; 0x3000
 80037b8:	d031      	beq.n	800381e <HAL_RCCEx_PeriphCLKConfig+0x442>
 80037ba:	f5b3 5f40 	cmp.w	r3, #12288	; 0x3000
 80037be:	d828      	bhi.n	8003812 <HAL_RCCEx_PeriphCLKConfig+0x436>
 80037c0:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80037c4:	d01a      	beq.n	80037fc <HAL_RCCEx_PeriphCLKConfig+0x420>
 80037c6:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80037ca:	d822      	bhi.n	8003812 <HAL_RCCEx_PeriphCLKConfig+0x436>
 80037cc:	2b00      	cmp	r3, #0
 80037ce:	d003      	beq.n	80037d8 <HAL_RCCEx_PeriphCLKConfig+0x3fc>
 80037d0:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80037d4:	d007      	beq.n	80037e6 <HAL_RCCEx_PeriphCLKConfig+0x40a>
 80037d6:	e01c      	b.n	8003812 <HAL_RCCEx_PeriphCLKConfig+0x436>
    {
      case RCC_SPI123CLKSOURCE_PLL:      /* PLL is used as clock source for SPI1/2/3 */
        /* Enable SPI Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 80037d8:	4b7e      	ldr	r3, [pc, #504]	; (80039d4 <HAL_RCCEx_PeriphCLKConfig+0x5f8>)
 80037da:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80037dc:	4a7d      	ldr	r2, [pc, #500]	; (80039d4 <HAL_RCCEx_PeriphCLKConfig+0x5f8>)
 80037de:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80037e2:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* SPI1/2/3 clock source configuration done later after clock selection check */
        break;
 80037e4:	e01c      	b.n	8003820 <HAL_RCCEx_PeriphCLKConfig+0x444>

      case RCC_SPI123CLKSOURCE_PLL2: /* PLL2 is used as clock source for SPI1/2/3 */
        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 80037e6:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 80037ea:	3308      	adds	r3, #8
 80037ec:	2100      	movs	r1, #0
 80037ee:	4618      	mov	r0, r3
 80037f0:	f001 fa52 	bl	8004c98 <RCCEx_PLL2_Config>
 80037f4:	4603      	mov	r3, r0
 80037f6:	f887 3117 	strb.w	r3, [r7, #279]	; 0x117

        /* SPI1/2/3 clock source configuration done later after clock selection check */
        break;
 80037fa:	e011      	b.n	8003820 <HAL_RCCEx_PeriphCLKConfig+0x444>

      case RCC_SPI123CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPI1/2/3 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 80037fc:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8003800:	3328      	adds	r3, #40	; 0x28
 8003802:	2100      	movs	r1, #0
 8003804:	4618      	mov	r0, r3
 8003806:	f001 faf9 	bl	8004dfc <RCCEx_PLL3_Config>
 800380a:	4603      	mov	r3, r0
 800380c:	f887 3117 	strb.w	r3, [r7, #279]	; 0x117

        /* SPI1/2/3 clock source configuration done later after clock selection check */
        break;
 8003810:	e006      	b.n	8003820 <HAL_RCCEx_PeriphCLKConfig+0x444>
        /* HSI, HSE, or CSI oscillator is used as source of SPI1/2/3 clock */
        /* SPI1/2/3 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8003812:	2301      	movs	r3, #1
 8003814:	f887 3117 	strb.w	r3, [r7, #279]	; 0x117
        break;
 8003818:	e002      	b.n	8003820 <HAL_RCCEx_PeriphCLKConfig+0x444>
        break;
 800381a:	bf00      	nop
 800381c:	e000      	b.n	8003820 <HAL_RCCEx_PeriphCLKConfig+0x444>
        break;
 800381e:	bf00      	nop
    }

    if (ret == HAL_OK)
 8003820:	f897 3117 	ldrb.w	r3, [r7, #279]	; 0x117
 8003824:	2b00      	cmp	r3, #0
 8003826:	d10a      	bne.n	800383e <HAL_RCCEx_PeriphCLKConfig+0x462>
    {
      /* Set the source of SPI1/2/3 clock*/
      __HAL_RCC_SPI123_CONFIG(PeriphClkInit->Spi123ClockSelection);
 8003828:	4b6a      	ldr	r3, [pc, #424]	; (80039d4 <HAL_RCCEx_PeriphCLKConfig+0x5f8>)
 800382a:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800382c:	f423 41e0 	bic.w	r1, r3, #28672	; 0x7000
 8003830:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8003834:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003836:	4a67      	ldr	r2, [pc, #412]	; (80039d4 <HAL_RCCEx_PeriphCLKConfig+0x5f8>)
 8003838:	430b      	orrs	r3, r1
 800383a:	6513      	str	r3, [r2, #80]	; 0x50
 800383c:	e003      	b.n	8003846 <HAL_RCCEx_PeriphCLKConfig+0x46a>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800383e:	f897 3117 	ldrb.w	r3, [r7, #279]	; 0x117
 8003842:	f887 3116 	strb.w	r3, [r7, #278]	; 0x116
    }
  }

  /*---------------------------- SPI4/5 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI45) == RCC_PERIPHCLK_SPI45)
 8003846:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800384a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800384e:	f402 5300 	and.w	r3, r2, #8192	; 0x2000
 8003852:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
 8003856:	2300      	movs	r3, #0
 8003858:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
 800385c:	e9d7 1238 	ldrd	r1, r2, [r7, #224]	; 0xe0
 8003860:	460b      	mov	r3, r1
 8003862:	4313      	orrs	r3, r2
 8003864:	d053      	beq.n	800390e <HAL_RCCEx_PeriphCLKConfig+0x532>
  {
    switch (PeriphClkInit->Spi45ClockSelection)
 8003866:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800386a:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800386c:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8003870:	d033      	beq.n	80038da <HAL_RCCEx_PeriphCLKConfig+0x4fe>
 8003872:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8003876:	d82c      	bhi.n	80038d2 <HAL_RCCEx_PeriphCLKConfig+0x4f6>
 8003878:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 800387c:	d02f      	beq.n	80038de <HAL_RCCEx_PeriphCLKConfig+0x502>
 800387e:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 8003882:	d826      	bhi.n	80038d2 <HAL_RCCEx_PeriphCLKConfig+0x4f6>
 8003884:	f5b3 3f40 	cmp.w	r3, #196608	; 0x30000
 8003888:	d02b      	beq.n	80038e2 <HAL_RCCEx_PeriphCLKConfig+0x506>
 800388a:	f5b3 3f40 	cmp.w	r3, #196608	; 0x30000
 800388e:	d820      	bhi.n	80038d2 <HAL_RCCEx_PeriphCLKConfig+0x4f6>
 8003890:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8003894:	d012      	beq.n	80038bc <HAL_RCCEx_PeriphCLKConfig+0x4e0>
 8003896:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 800389a:	d81a      	bhi.n	80038d2 <HAL_RCCEx_PeriphCLKConfig+0x4f6>
 800389c:	2b00      	cmp	r3, #0
 800389e:	d022      	beq.n	80038e6 <HAL_RCCEx_PeriphCLKConfig+0x50a>
 80038a0:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80038a4:	d115      	bne.n	80038d2 <HAL_RCCEx_PeriphCLKConfig+0x4f6>
        /* SPI4/5 clock source configuration done later after clock selection check */
        break;

      case RCC_SPI45CLKSOURCE_PLL2: /* PLL2 is used as clock source for SPI4/5 */

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 80038a6:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 80038aa:	3308      	adds	r3, #8
 80038ac:	2101      	movs	r1, #1
 80038ae:	4618      	mov	r0, r3
 80038b0:	f001 f9f2 	bl	8004c98 <RCCEx_PLL2_Config>
 80038b4:	4603      	mov	r3, r0
 80038b6:	f887 3117 	strb.w	r3, [r7, #279]	; 0x117

        /* SPI4/5 clock source configuration done later after clock selection check */
        break;
 80038ba:	e015      	b.n	80038e8 <HAL_RCCEx_PeriphCLKConfig+0x50c>
      case RCC_SPI45CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPI4/5 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 80038bc:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 80038c0:	3328      	adds	r3, #40	; 0x28
 80038c2:	2101      	movs	r1, #1
 80038c4:	4618      	mov	r0, r3
 80038c6:	f001 fa99 	bl	8004dfc <RCCEx_PLL3_Config>
 80038ca:	4603      	mov	r3, r0
 80038cc:	f887 3117 	strb.w	r3, [r7, #279]	; 0x117
        /* SPI4/5 clock source configuration done later after clock selection check */
        break;
 80038d0:	e00a      	b.n	80038e8 <HAL_RCCEx_PeriphCLKConfig+0x50c>
        /* HSE,  oscillator is used as source of SPI4/5 clock */
        /* SPI4/5 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 80038d2:	2301      	movs	r3, #1
 80038d4:	f887 3117 	strb.w	r3, [r7, #279]	; 0x117
        break;
 80038d8:	e006      	b.n	80038e8 <HAL_RCCEx_PeriphCLKConfig+0x50c>
        break;
 80038da:	bf00      	nop
 80038dc:	e004      	b.n	80038e8 <HAL_RCCEx_PeriphCLKConfig+0x50c>
        break;
 80038de:	bf00      	nop
 80038e0:	e002      	b.n	80038e8 <HAL_RCCEx_PeriphCLKConfig+0x50c>
        break;
 80038e2:	bf00      	nop
 80038e4:	e000      	b.n	80038e8 <HAL_RCCEx_PeriphCLKConfig+0x50c>
        break;
 80038e6:	bf00      	nop
    }

    if (ret == HAL_OK)
 80038e8:	f897 3117 	ldrb.w	r3, [r7, #279]	; 0x117
 80038ec:	2b00      	cmp	r3, #0
 80038ee:	d10a      	bne.n	8003906 <HAL_RCCEx_PeriphCLKConfig+0x52a>
    {
      /* Set the source of SPI4/5 clock*/
      __HAL_RCC_SPI45_CONFIG(PeriphClkInit->Spi45ClockSelection);
 80038f0:	4b38      	ldr	r3, [pc, #224]	; (80039d4 <HAL_RCCEx_PeriphCLKConfig+0x5f8>)
 80038f2:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80038f4:	f423 21e0 	bic.w	r1, r3, #458752	; 0x70000
 80038f8:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 80038fc:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80038fe:	4a35      	ldr	r2, [pc, #212]	; (80039d4 <HAL_RCCEx_PeriphCLKConfig+0x5f8>)
 8003900:	430b      	orrs	r3, r1
 8003902:	6513      	str	r3, [r2, #80]	; 0x50
 8003904:	e003      	b.n	800390e <HAL_RCCEx_PeriphCLKConfig+0x532>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8003906:	f897 3117 	ldrb.w	r3, [r7, #279]	; 0x117
 800390a:	f887 3116 	strb.w	r3, [r7, #278]	; 0x116
    }
  }

  /*---------------------------- SPI6 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI6) == RCC_PERIPHCLK_SPI6)
 800390e:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8003912:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003916:	f402 4380 	and.w	r3, r2, #16384	; 0x4000
 800391a:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
 800391e:	2300      	movs	r3, #0
 8003920:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
 8003924:	e9d7 1236 	ldrd	r1, r2, [r7, #216]	; 0xd8
 8003928:	460b      	mov	r3, r1
 800392a:	4313      	orrs	r3, r2
 800392c:	d058      	beq.n	80039e0 <HAL_RCCEx_PeriphCLKConfig+0x604>
  {
    switch (PeriphClkInit->Spi6ClockSelection)
 800392e:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8003932:	f8d3 30ac 	ldr.w	r3, [r3, #172]	; 0xac
 8003936:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 800393a:	d033      	beq.n	80039a4 <HAL_RCCEx_PeriphCLKConfig+0x5c8>
 800393c:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8003940:	d82c      	bhi.n	800399c <HAL_RCCEx_PeriphCLKConfig+0x5c0>
 8003942:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8003946:	d02f      	beq.n	80039a8 <HAL_RCCEx_PeriphCLKConfig+0x5cc>
 8003948:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800394c:	d826      	bhi.n	800399c <HAL_RCCEx_PeriphCLKConfig+0x5c0>
 800394e:	f1b3 5f40 	cmp.w	r3, #805306368	; 0x30000000
 8003952:	d02b      	beq.n	80039ac <HAL_RCCEx_PeriphCLKConfig+0x5d0>
 8003954:	f1b3 5f40 	cmp.w	r3, #805306368	; 0x30000000
 8003958:	d820      	bhi.n	800399c <HAL_RCCEx_PeriphCLKConfig+0x5c0>
 800395a:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 800395e:	d012      	beq.n	8003986 <HAL_RCCEx_PeriphCLKConfig+0x5aa>
 8003960:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8003964:	d81a      	bhi.n	800399c <HAL_RCCEx_PeriphCLKConfig+0x5c0>
 8003966:	2b00      	cmp	r3, #0
 8003968:	d022      	beq.n	80039b0 <HAL_RCCEx_PeriphCLKConfig+0x5d4>
 800396a:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 800396e:	d115      	bne.n	800399c <HAL_RCCEx_PeriphCLKConfig+0x5c0>
        /* SPI6 clock source configuration done later after clock selection check */
        break;

      case RCC_SPI6CLKSOURCE_PLL2: /* PLL2 is used as clock source for SPI6*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 8003970:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8003974:	3308      	adds	r3, #8
 8003976:	2101      	movs	r1, #1
 8003978:	4618      	mov	r0, r3
 800397a:	f001 f98d 	bl	8004c98 <RCCEx_PLL2_Config>
 800397e:	4603      	mov	r3, r0
 8003980:	f887 3117 	strb.w	r3, [r7, #279]	; 0x117

        /* SPI6 clock source configuration done later after clock selection check */
        break;
 8003984:	e015      	b.n	80039b2 <HAL_RCCEx_PeriphCLKConfig+0x5d6>
      case RCC_SPI6CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPI6*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 8003986:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800398a:	3328      	adds	r3, #40	; 0x28
 800398c:	2101      	movs	r1, #1
 800398e:	4618      	mov	r0, r3
 8003990:	f001 fa34 	bl	8004dfc <RCCEx_PLL3_Config>
 8003994:	4603      	mov	r3, r0
 8003996:	f887 3117 	strb.w	r3, [r7, #279]	; 0x117
        /* SPI6 clock source configuration done later after clock selection check */
        break;
 800399a:	e00a      	b.n	80039b2 <HAL_RCCEx_PeriphCLKConfig+0x5d6>
        /* SPI6 clock source configuration done later after clock selection check */
        break;
#endif

      default:
        ret = HAL_ERROR;
 800399c:	2301      	movs	r3, #1
 800399e:	f887 3117 	strb.w	r3, [r7, #279]	; 0x117
        break;
 80039a2:	e006      	b.n	80039b2 <HAL_RCCEx_PeriphCLKConfig+0x5d6>
        break;
 80039a4:	bf00      	nop
 80039a6:	e004      	b.n	80039b2 <HAL_RCCEx_PeriphCLKConfig+0x5d6>
        break;
 80039a8:	bf00      	nop
 80039aa:	e002      	b.n	80039b2 <HAL_RCCEx_PeriphCLKConfig+0x5d6>
        break;
 80039ac:	bf00      	nop
 80039ae:	e000      	b.n	80039b2 <HAL_RCCEx_PeriphCLKConfig+0x5d6>
        break;
 80039b0:	bf00      	nop
    }

    if (ret == HAL_OK)
 80039b2:	f897 3117 	ldrb.w	r3, [r7, #279]	; 0x117
 80039b6:	2b00      	cmp	r3, #0
 80039b8:	d10e      	bne.n	80039d8 <HAL_RCCEx_PeriphCLKConfig+0x5fc>
    {
      /* Set the source of SPI6 clock*/
      __HAL_RCC_SPI6_CONFIG(PeriphClkInit->Spi6ClockSelection);
 80039ba:	4b06      	ldr	r3, [pc, #24]	; (80039d4 <HAL_RCCEx_PeriphCLKConfig+0x5f8>)
 80039bc:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80039be:	f023 41e0 	bic.w	r1, r3, #1879048192	; 0x70000000
 80039c2:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 80039c6:	f8d3 30ac 	ldr.w	r3, [r3, #172]	; 0xac
 80039ca:	4a02      	ldr	r2, [pc, #8]	; (80039d4 <HAL_RCCEx_PeriphCLKConfig+0x5f8>)
 80039cc:	430b      	orrs	r3, r1
 80039ce:	6593      	str	r3, [r2, #88]	; 0x58
 80039d0:	e006      	b.n	80039e0 <HAL_RCCEx_PeriphCLKConfig+0x604>
 80039d2:	bf00      	nop
 80039d4:	58024400 	.word	0x58024400
    }
    else
    {
      /* set overall return value */
      status = ret;
 80039d8:	f897 3117 	ldrb.w	r3, [r7, #279]	; 0x117
 80039dc:	f887 3116 	strb.w	r3, [r7, #278]	; 0x116
  }
#endif /*DSI*/

#if defined(FDCAN1) || defined(FDCAN2)
  /*---------------------------- FDCAN configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_FDCAN) == RCC_PERIPHCLK_FDCAN)
 80039e0:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 80039e4:	e9d3 2300 	ldrd	r2, r3, [r3]
 80039e8:	f402 4300 	and.w	r3, r2, #32768	; 0x8000
 80039ec:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 80039f0:	2300      	movs	r3, #0
 80039f2:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
 80039f6:	e9d7 1234 	ldrd	r1, r2, [r7, #208]	; 0xd0
 80039fa:	460b      	mov	r3, r1
 80039fc:	4313      	orrs	r3, r2
 80039fe:	d037      	beq.n	8003a70 <HAL_RCCEx_PeriphCLKConfig+0x694>
  {
    switch (PeriphClkInit->FdcanClockSelection)
 8003a00:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8003a04:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8003a06:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8003a0a:	d00e      	beq.n	8003a2a <HAL_RCCEx_PeriphCLKConfig+0x64e>
 8003a0c:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8003a10:	d816      	bhi.n	8003a40 <HAL_RCCEx_PeriphCLKConfig+0x664>
 8003a12:	2b00      	cmp	r3, #0
 8003a14:	d018      	beq.n	8003a48 <HAL_RCCEx_PeriphCLKConfig+0x66c>
 8003a16:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8003a1a:	d111      	bne.n	8003a40 <HAL_RCCEx_PeriphCLKConfig+0x664>
    {
      case RCC_FDCANCLKSOURCE_PLL:      /* PLL is used as clock source for FDCAN*/
        /* Enable FDCAN Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8003a1c:	4bc4      	ldr	r3, [pc, #784]	; (8003d30 <HAL_RCCEx_PeriphCLKConfig+0x954>)
 8003a1e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003a20:	4ac3      	ldr	r2, [pc, #780]	; (8003d30 <HAL_RCCEx_PeriphCLKConfig+0x954>)
 8003a22:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8003a26:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* FDCAN clock source configuration done later after clock selection check */
        break;
 8003a28:	e00f      	b.n	8003a4a <HAL_RCCEx_PeriphCLKConfig+0x66e>

      case RCC_FDCANCLKSOURCE_PLL2: /* PLL2 is used as clock source for FDCAN*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 8003a2a:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8003a2e:	3308      	adds	r3, #8
 8003a30:	2101      	movs	r1, #1
 8003a32:	4618      	mov	r0, r3
 8003a34:	f001 f930 	bl	8004c98 <RCCEx_PLL2_Config>
 8003a38:	4603      	mov	r3, r0
 8003a3a:	f887 3117 	strb.w	r3, [r7, #279]	; 0x117

        /* FDCAN clock source configuration done later after clock selection check */
        break;
 8003a3e:	e004      	b.n	8003a4a <HAL_RCCEx_PeriphCLKConfig+0x66e>
        /* HSE is used as clock source for FDCAN*/
        /* FDCAN clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8003a40:	2301      	movs	r3, #1
 8003a42:	f887 3117 	strb.w	r3, [r7, #279]	; 0x117
        break;
 8003a46:	e000      	b.n	8003a4a <HAL_RCCEx_PeriphCLKConfig+0x66e>
        break;
 8003a48:	bf00      	nop
    }

    if (ret == HAL_OK)
 8003a4a:	f897 3117 	ldrb.w	r3, [r7, #279]	; 0x117
 8003a4e:	2b00      	cmp	r3, #0
 8003a50:	d10a      	bne.n	8003a68 <HAL_RCCEx_PeriphCLKConfig+0x68c>
    {
      /* Set the source of FDCAN clock*/
      __HAL_RCC_FDCAN_CONFIG(PeriphClkInit->FdcanClockSelection);
 8003a52:	4bb7      	ldr	r3, [pc, #732]	; (8003d30 <HAL_RCCEx_PeriphCLKConfig+0x954>)
 8003a54:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8003a56:	f023 5140 	bic.w	r1, r3, #805306368	; 0x30000000
 8003a5a:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8003a5e:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8003a60:	4ab3      	ldr	r2, [pc, #716]	; (8003d30 <HAL_RCCEx_PeriphCLKConfig+0x954>)
 8003a62:	430b      	orrs	r3, r1
 8003a64:	6513      	str	r3, [r2, #80]	; 0x50
 8003a66:	e003      	b.n	8003a70 <HAL_RCCEx_PeriphCLKConfig+0x694>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8003a68:	f897 3117 	ldrb.w	r3, [r7, #279]	; 0x117
 8003a6c:	f887 3116 	strb.w	r3, [r7, #278]	; 0x116
    }
  }
#endif /*FDCAN1 || FDCAN2*/

  /*---------------------------- FMC configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_FMC) == RCC_PERIPHCLK_FMC)
 8003a70:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8003a74:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003a78:	f002 7380 	and.w	r3, r2, #16777216	; 0x1000000
 8003a7c:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 8003a80:	2300      	movs	r3, #0
 8003a82:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
 8003a86:	e9d7 1232 	ldrd	r1, r2, [r7, #200]	; 0xc8
 8003a8a:	460b      	mov	r3, r1
 8003a8c:	4313      	orrs	r3, r2
 8003a8e:	d039      	beq.n	8003b04 <HAL_RCCEx_PeriphCLKConfig+0x728>
  {
    switch (PeriphClkInit->FmcClockSelection)
 8003a90:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8003a94:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8003a96:	2b03      	cmp	r3, #3
 8003a98:	d81c      	bhi.n	8003ad4 <HAL_RCCEx_PeriphCLKConfig+0x6f8>
 8003a9a:	a201      	add	r2, pc, #4	; (adr r2, 8003aa0 <HAL_RCCEx_PeriphCLKConfig+0x6c4>)
 8003a9c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003aa0:	08003add 	.word	0x08003add
 8003aa4:	08003ab1 	.word	0x08003ab1
 8003aa8:	08003abf 	.word	0x08003abf
 8003aac:	08003add 	.word	0x08003add
    {
      case RCC_FMCCLKSOURCE_PLL:      /* PLL is used as clock source for FMC*/
        /* Enable FMC Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8003ab0:	4b9f      	ldr	r3, [pc, #636]	; (8003d30 <HAL_RCCEx_PeriphCLKConfig+0x954>)
 8003ab2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003ab4:	4a9e      	ldr	r2, [pc, #632]	; (8003d30 <HAL_RCCEx_PeriphCLKConfig+0x954>)
 8003ab6:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8003aba:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* FMC clock source configuration done later after clock selection check */
        break;
 8003abc:	e00f      	b.n	8003ade <HAL_RCCEx_PeriphCLKConfig+0x702>

      case RCC_FMCCLKSOURCE_PLL2: /* PLL2 is used as clock source for FMC*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_R_UPDATE);
 8003abe:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8003ac2:	3308      	adds	r3, #8
 8003ac4:	2102      	movs	r1, #2
 8003ac6:	4618      	mov	r0, r3
 8003ac8:	f001 f8e6 	bl	8004c98 <RCCEx_PLL2_Config>
 8003acc:	4603      	mov	r3, r0
 8003ace:	f887 3117 	strb.w	r3, [r7, #279]	; 0x117

        /* FMC clock source configuration done later after clock selection check */
        break;
 8003ad2:	e004      	b.n	8003ade <HAL_RCCEx_PeriphCLKConfig+0x702>
      case RCC_FMCCLKSOURCE_HCLK:
        /* D1/CD HCLK  clock selected as FMC kernel peripheral clock */
        break;

      default:
        ret = HAL_ERROR;
 8003ad4:	2301      	movs	r3, #1
 8003ad6:	f887 3117 	strb.w	r3, [r7, #279]	; 0x117
        break;
 8003ada:	e000      	b.n	8003ade <HAL_RCCEx_PeriphCLKConfig+0x702>
        break;
 8003adc:	bf00      	nop
    }

    if (ret == HAL_OK)
 8003ade:	f897 3117 	ldrb.w	r3, [r7, #279]	; 0x117
 8003ae2:	2b00      	cmp	r3, #0
 8003ae4:	d10a      	bne.n	8003afc <HAL_RCCEx_PeriphCLKConfig+0x720>
    {
      /* Set the source of FMC clock*/
      __HAL_RCC_FMC_CONFIG(PeriphClkInit->FmcClockSelection);
 8003ae6:	4b92      	ldr	r3, [pc, #584]	; (8003d30 <HAL_RCCEx_PeriphCLKConfig+0x954>)
 8003ae8:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8003aea:	f023 0103 	bic.w	r1, r3, #3
 8003aee:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8003af2:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8003af4:	4a8e      	ldr	r2, [pc, #568]	; (8003d30 <HAL_RCCEx_PeriphCLKConfig+0x954>)
 8003af6:	430b      	orrs	r3, r1
 8003af8:	64d3      	str	r3, [r2, #76]	; 0x4c
 8003afa:	e003      	b.n	8003b04 <HAL_RCCEx_PeriphCLKConfig+0x728>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8003afc:	f897 3117 	ldrb.w	r3, [r7, #279]	; 0x117
 8003b00:	f887 3116 	strb.w	r3, [r7, #278]	; 0x116
    }
  }

  /*---------------------------- RTC configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 8003b04:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8003b08:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003b0c:	f402 0380 	and.w	r3, r2, #4194304	; 0x400000
 8003b10:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 8003b14:	2300      	movs	r3, #0
 8003b16:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
 8003b1a:	e9d7 1230 	ldrd	r1, r2, [r7, #192]	; 0xc0
 8003b1e:	460b      	mov	r3, r1
 8003b20:	4313      	orrs	r3, r2
 8003b22:	f000 8099 	beq.w	8003c58 <HAL_RCCEx_PeriphCLKConfig+0x87c>
  {
    /* check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable write access to Backup domain */
    SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8003b26:	4b83      	ldr	r3, [pc, #524]	; (8003d34 <HAL_RCCEx_PeriphCLKConfig+0x958>)
 8003b28:	681b      	ldr	r3, [r3, #0]
 8003b2a:	4a82      	ldr	r2, [pc, #520]	; (8003d34 <HAL_RCCEx_PeriphCLKConfig+0x958>)
 8003b2c:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8003b30:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 8003b32:	f7fd fd4d 	bl	80015d0 <HAL_GetTick>
 8003b36:	f8c7 0110 	str.w	r0, [r7, #272]	; 0x110

    while ((PWR->CR1 & PWR_CR1_DBP) == 0U)
 8003b3a:	e00b      	b.n	8003b54 <HAL_RCCEx_PeriphCLKConfig+0x778>
    {
      if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8003b3c:	f7fd fd48 	bl	80015d0 <HAL_GetTick>
 8003b40:	4602      	mov	r2, r0
 8003b42:	f8d7 3110 	ldr.w	r3, [r7, #272]	; 0x110
 8003b46:	1ad3      	subs	r3, r2, r3
 8003b48:	2b64      	cmp	r3, #100	; 0x64
 8003b4a:	d903      	bls.n	8003b54 <HAL_RCCEx_PeriphCLKConfig+0x778>
      {
        ret = HAL_TIMEOUT;
 8003b4c:	2303      	movs	r3, #3
 8003b4e:	f887 3117 	strb.w	r3, [r7, #279]	; 0x117
        break;
 8003b52:	e005      	b.n	8003b60 <HAL_RCCEx_PeriphCLKConfig+0x784>
    while ((PWR->CR1 & PWR_CR1_DBP) == 0U)
 8003b54:	4b77      	ldr	r3, [pc, #476]	; (8003d34 <HAL_RCCEx_PeriphCLKConfig+0x958>)
 8003b56:	681b      	ldr	r3, [r3, #0]
 8003b58:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003b5c:	2b00      	cmp	r3, #0
 8003b5e:	d0ed      	beq.n	8003b3c <HAL_RCCEx_PeriphCLKConfig+0x760>
      }
    }

    if (ret == HAL_OK)
 8003b60:	f897 3117 	ldrb.w	r3, [r7, #279]	; 0x117
 8003b64:	2b00      	cmp	r3, #0
 8003b66:	d173      	bne.n	8003c50 <HAL_RCCEx_PeriphCLKConfig+0x874>
    {
      /* Reset the Backup domain only if the RTC Clock source selection is modified */
      if ((RCC->BDCR & RCC_BDCR_RTCSEL) != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL))
 8003b68:	4b71      	ldr	r3, [pc, #452]	; (8003d30 <HAL_RCCEx_PeriphCLKConfig+0x954>)
 8003b6a:	6f1a      	ldr	r2, [r3, #112]	; 0x70
 8003b6c:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8003b70:	f8d3 30b0 	ldr.w	r3, [r3, #176]	; 0xb0
 8003b74:	4053      	eors	r3, r2
 8003b76:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8003b7a:	2b00      	cmp	r3, #0
 8003b7c:	d015      	beq.n	8003baa <HAL_RCCEx_PeriphCLKConfig+0x7ce>
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        tmpreg = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 8003b7e:	4b6c      	ldr	r3, [pc, #432]	; (8003d30 <HAL_RCCEx_PeriphCLKConfig+0x954>)
 8003b80:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003b82:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8003b86:	f8c7 310c 	str.w	r3, [r7, #268]	; 0x10c
        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        __HAL_RCC_BACKUPRESET_FORCE();
 8003b8a:	4b69      	ldr	r3, [pc, #420]	; (8003d30 <HAL_RCCEx_PeriphCLKConfig+0x954>)
 8003b8c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003b8e:	4a68      	ldr	r2, [pc, #416]	; (8003d30 <HAL_RCCEx_PeriphCLKConfig+0x954>)
 8003b90:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8003b94:	6713      	str	r3, [r2, #112]	; 0x70
        __HAL_RCC_BACKUPRESET_RELEASE();
 8003b96:	4b66      	ldr	r3, [pc, #408]	; (8003d30 <HAL_RCCEx_PeriphCLKConfig+0x954>)
 8003b98:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003b9a:	4a65      	ldr	r2, [pc, #404]	; (8003d30 <HAL_RCCEx_PeriphCLKConfig+0x954>)
 8003b9c:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8003ba0:	6713      	str	r3, [r2, #112]	; 0x70
        /* Restore the Content of BDCR register */
        RCC->BDCR = tmpreg;
 8003ba2:	4a63      	ldr	r2, [pc, #396]	; (8003d30 <HAL_RCCEx_PeriphCLKConfig+0x954>)
 8003ba4:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8003ba8:	6713      	str	r3, [r2, #112]	; 0x70
      }

      /* If LSE is selected as RTC clock source (and enabled prior to Backup Domain reset), wait for LSE reactivation */
      if (PeriphClkInit->RTCClockSelection == RCC_RTCCLKSOURCE_LSE)
 8003baa:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8003bae:	f8d3 30b0 	ldr.w	r3, [r3, #176]	; 0xb0
 8003bb2:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8003bb6:	d118      	bne.n	8003bea <HAL_RCCEx_PeriphCLKConfig+0x80e>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003bb8:	f7fd fd0a 	bl	80015d0 <HAL_GetTick>
 8003bbc:	f8c7 0110 	str.w	r0, [r7, #272]	; 0x110

        /* Wait till LSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 8003bc0:	e00d      	b.n	8003bde <HAL_RCCEx_PeriphCLKConfig+0x802>
        {
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8003bc2:	f7fd fd05 	bl	80015d0 <HAL_GetTick>
 8003bc6:	4602      	mov	r2, r0
 8003bc8:	f8d7 3110 	ldr.w	r3, [r7, #272]	; 0x110
 8003bcc:	1ad2      	subs	r2, r2, r3
 8003bce:	f241 3388 	movw	r3, #5000	; 0x1388
 8003bd2:	429a      	cmp	r2, r3
 8003bd4:	d903      	bls.n	8003bde <HAL_RCCEx_PeriphCLKConfig+0x802>
          {
            ret = HAL_TIMEOUT;
 8003bd6:	2303      	movs	r3, #3
 8003bd8:	f887 3117 	strb.w	r3, [r7, #279]	; 0x117
            break;
 8003bdc:	e005      	b.n	8003bea <HAL_RCCEx_PeriphCLKConfig+0x80e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 8003bde:	4b54      	ldr	r3, [pc, #336]	; (8003d30 <HAL_RCCEx_PeriphCLKConfig+0x954>)
 8003be0:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003be2:	f003 0302 	and.w	r3, r3, #2
 8003be6:	2b00      	cmp	r3, #0
 8003be8:	d0eb      	beq.n	8003bc2 <HAL_RCCEx_PeriphCLKConfig+0x7e6>
          }
        }
      }

      if (ret == HAL_OK)
 8003bea:	f897 3117 	ldrb.w	r3, [r7, #279]	; 0x117
 8003bee:	2b00      	cmp	r3, #0
 8003bf0:	d129      	bne.n	8003c46 <HAL_RCCEx_PeriphCLKConfig+0x86a>
      {
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8003bf2:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8003bf6:	f8d3 30b0 	ldr.w	r3, [r3, #176]	; 0xb0
 8003bfa:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8003bfe:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8003c02:	d10e      	bne.n	8003c22 <HAL_RCCEx_PeriphCLKConfig+0x846>
 8003c04:	4b4a      	ldr	r3, [pc, #296]	; (8003d30 <HAL_RCCEx_PeriphCLKConfig+0x954>)
 8003c06:	691b      	ldr	r3, [r3, #16]
 8003c08:	f423 517c 	bic.w	r1, r3, #16128	; 0x3f00
 8003c0c:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8003c10:	f8d3 30b0 	ldr.w	r3, [r3, #176]	; 0xb0
 8003c14:	091a      	lsrs	r2, r3, #4
 8003c16:	4b48      	ldr	r3, [pc, #288]	; (8003d38 <HAL_RCCEx_PeriphCLKConfig+0x95c>)
 8003c18:	4013      	ands	r3, r2
 8003c1a:	4a45      	ldr	r2, [pc, #276]	; (8003d30 <HAL_RCCEx_PeriphCLKConfig+0x954>)
 8003c1c:	430b      	orrs	r3, r1
 8003c1e:	6113      	str	r3, [r2, #16]
 8003c20:	e005      	b.n	8003c2e <HAL_RCCEx_PeriphCLKConfig+0x852>
 8003c22:	4b43      	ldr	r3, [pc, #268]	; (8003d30 <HAL_RCCEx_PeriphCLKConfig+0x954>)
 8003c24:	691b      	ldr	r3, [r3, #16]
 8003c26:	4a42      	ldr	r2, [pc, #264]	; (8003d30 <HAL_RCCEx_PeriphCLKConfig+0x954>)
 8003c28:	f423 537c 	bic.w	r3, r3, #16128	; 0x3f00
 8003c2c:	6113      	str	r3, [r2, #16]
 8003c2e:	4b40      	ldr	r3, [pc, #256]	; (8003d30 <HAL_RCCEx_PeriphCLKConfig+0x954>)
 8003c30:	6f19      	ldr	r1, [r3, #112]	; 0x70
 8003c32:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8003c36:	f8d3 30b0 	ldr.w	r3, [r3, #176]	; 0xb0
 8003c3a:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8003c3e:	4a3c      	ldr	r2, [pc, #240]	; (8003d30 <HAL_RCCEx_PeriphCLKConfig+0x954>)
 8003c40:	430b      	orrs	r3, r1
 8003c42:	6713      	str	r3, [r2, #112]	; 0x70
 8003c44:	e008      	b.n	8003c58 <HAL_RCCEx_PeriphCLKConfig+0x87c>
      }
      else
      {
        /* set overall return value */
        status = ret;
 8003c46:	f897 3117 	ldrb.w	r3, [r7, #279]	; 0x117
 8003c4a:	f887 3116 	strb.w	r3, [r7, #278]	; 0x116
 8003c4e:	e003      	b.n	8003c58 <HAL_RCCEx_PeriphCLKConfig+0x87c>
      }
    }
    else
    {
      /* set overall return value */
      status = ret;
 8003c50:	f897 3117 	ldrb.w	r3, [r7, #279]	; 0x117
 8003c54:	f887 3116 	strb.w	r3, [r7, #278]	; 0x116
    }
  }


  /*-------------------------- USART1/6 configuration --------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART16) == RCC_PERIPHCLK_USART16)
 8003c58:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8003c5c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003c60:	f002 0301 	and.w	r3, r2, #1
 8003c64:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 8003c68:	2300      	movs	r3, #0
 8003c6a:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
 8003c6e:	e9d7 122e 	ldrd	r1, r2, [r7, #184]	; 0xb8
 8003c72:	460b      	mov	r3, r1
 8003c74:	4313      	orrs	r3, r2
 8003c76:	f000 808f 	beq.w	8003d98 <HAL_RCCEx_PeriphCLKConfig+0x9bc>
  {
    switch (PeriphClkInit->Usart16ClockSelection)
 8003c7a:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8003c7e:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8003c80:	2b28      	cmp	r3, #40	; 0x28
 8003c82:	d871      	bhi.n	8003d68 <HAL_RCCEx_PeriphCLKConfig+0x98c>
 8003c84:	a201      	add	r2, pc, #4	; (adr r2, 8003c8c <HAL_RCCEx_PeriphCLKConfig+0x8b0>)
 8003c86:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003c8a:	bf00      	nop
 8003c8c:	08003d71 	.word	0x08003d71
 8003c90:	08003d69 	.word	0x08003d69
 8003c94:	08003d69 	.word	0x08003d69
 8003c98:	08003d69 	.word	0x08003d69
 8003c9c:	08003d69 	.word	0x08003d69
 8003ca0:	08003d69 	.word	0x08003d69
 8003ca4:	08003d69 	.word	0x08003d69
 8003ca8:	08003d69 	.word	0x08003d69
 8003cac:	08003d3d 	.word	0x08003d3d
 8003cb0:	08003d69 	.word	0x08003d69
 8003cb4:	08003d69 	.word	0x08003d69
 8003cb8:	08003d69 	.word	0x08003d69
 8003cbc:	08003d69 	.word	0x08003d69
 8003cc0:	08003d69 	.word	0x08003d69
 8003cc4:	08003d69 	.word	0x08003d69
 8003cc8:	08003d69 	.word	0x08003d69
 8003ccc:	08003d53 	.word	0x08003d53
 8003cd0:	08003d69 	.word	0x08003d69
 8003cd4:	08003d69 	.word	0x08003d69
 8003cd8:	08003d69 	.word	0x08003d69
 8003cdc:	08003d69 	.word	0x08003d69
 8003ce0:	08003d69 	.word	0x08003d69
 8003ce4:	08003d69 	.word	0x08003d69
 8003ce8:	08003d69 	.word	0x08003d69
 8003cec:	08003d71 	.word	0x08003d71
 8003cf0:	08003d69 	.word	0x08003d69
 8003cf4:	08003d69 	.word	0x08003d69
 8003cf8:	08003d69 	.word	0x08003d69
 8003cfc:	08003d69 	.word	0x08003d69
 8003d00:	08003d69 	.word	0x08003d69
 8003d04:	08003d69 	.word	0x08003d69
 8003d08:	08003d69 	.word	0x08003d69
 8003d0c:	08003d71 	.word	0x08003d71
 8003d10:	08003d69 	.word	0x08003d69
 8003d14:	08003d69 	.word	0x08003d69
 8003d18:	08003d69 	.word	0x08003d69
 8003d1c:	08003d69 	.word	0x08003d69
 8003d20:	08003d69 	.word	0x08003d69
 8003d24:	08003d69 	.word	0x08003d69
 8003d28:	08003d69 	.word	0x08003d69
 8003d2c:	08003d71 	.word	0x08003d71
 8003d30:	58024400 	.word	0x58024400
 8003d34:	58024800 	.word	0x58024800
 8003d38:	00ffffcf 	.word	0x00ffffcf
      case RCC_USART16CLKSOURCE_PCLK2: /* CD/D2 PCLK2 as clock source for USART1/6 */
        /* USART1/6 clock source configuration done later after clock selection check */
        break;

      case RCC_USART16CLKSOURCE_PLL2: /* PLL2 is used as clock source for USART1/6 */
        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 8003d3c:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8003d40:	3308      	adds	r3, #8
 8003d42:	2101      	movs	r1, #1
 8003d44:	4618      	mov	r0, r3
 8003d46:	f000 ffa7 	bl	8004c98 <RCCEx_PLL2_Config>
 8003d4a:	4603      	mov	r3, r0
 8003d4c:	f887 3117 	strb.w	r3, [r7, #279]	; 0x117
        /* USART1/6 clock source configuration done later after clock selection check */
        break;
 8003d50:	e00f      	b.n	8003d72 <HAL_RCCEx_PeriphCLKConfig+0x996>

      case RCC_USART16CLKSOURCE_PLL3: /* PLL3 is used as clock source for USART1/6 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 8003d52:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8003d56:	3328      	adds	r3, #40	; 0x28
 8003d58:	2101      	movs	r1, #1
 8003d5a:	4618      	mov	r0, r3
 8003d5c:	f001 f84e 	bl	8004dfc <RCCEx_PLL3_Config>
 8003d60:	4603      	mov	r3, r0
 8003d62:	f887 3117 	strb.w	r3, [r7, #279]	; 0x117
        /* USART1/6 clock source configuration done later after clock selection check */
        break;
 8003d66:	e004      	b.n	8003d72 <HAL_RCCEx_PeriphCLKConfig+0x996>
        /* LSE,  oscillator is used as source of USART1/6 clock */
        /* USART1/6 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8003d68:	2301      	movs	r3, #1
 8003d6a:	f887 3117 	strb.w	r3, [r7, #279]	; 0x117
        break;
 8003d6e:	e000      	b.n	8003d72 <HAL_RCCEx_PeriphCLKConfig+0x996>
        break;
 8003d70:	bf00      	nop
    }

    if (ret == HAL_OK)
 8003d72:	f897 3117 	ldrb.w	r3, [r7, #279]	; 0x117
 8003d76:	2b00      	cmp	r3, #0
 8003d78:	d10a      	bne.n	8003d90 <HAL_RCCEx_PeriphCLKConfig+0x9b4>
    {
      /* Set the source of USART1/6 clock */
      __HAL_RCC_USART16_CONFIG(PeriphClkInit->Usart16ClockSelection);
 8003d7a:	4bbf      	ldr	r3, [pc, #764]	; (8004078 <HAL_RCCEx_PeriphCLKConfig+0xc9c>)
 8003d7c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003d7e:	f023 0138 	bic.w	r1, r3, #56	; 0x38
 8003d82:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8003d86:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8003d88:	4abb      	ldr	r2, [pc, #748]	; (8004078 <HAL_RCCEx_PeriphCLKConfig+0xc9c>)
 8003d8a:	430b      	orrs	r3, r1
 8003d8c:	6553      	str	r3, [r2, #84]	; 0x54
 8003d8e:	e003      	b.n	8003d98 <HAL_RCCEx_PeriphCLKConfig+0x9bc>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8003d90:	f897 3117 	ldrb.w	r3, [r7, #279]	; 0x117
 8003d94:	f887 3116 	strb.w	r3, [r7, #278]	; 0x116
    }
  }

  /*-------------------------- USART2/3/4/5/7/8 Configuration --------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART234578) == RCC_PERIPHCLK_USART234578)
 8003d98:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8003d9c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003da0:	f002 0302 	and.w	r3, r2, #2
 8003da4:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 8003da8:	2300      	movs	r3, #0
 8003daa:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 8003dae:	e9d7 122c 	ldrd	r1, r2, [r7, #176]	; 0xb0
 8003db2:	460b      	mov	r3, r1
 8003db4:	4313      	orrs	r3, r2
 8003db6:	d041      	beq.n	8003e3c <HAL_RCCEx_PeriphCLKConfig+0xa60>
  {
    switch (PeriphClkInit->Usart234578ClockSelection)
 8003db8:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8003dbc:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8003dbe:	2b05      	cmp	r3, #5
 8003dc0:	d824      	bhi.n	8003e0c <HAL_RCCEx_PeriphCLKConfig+0xa30>
 8003dc2:	a201      	add	r2, pc, #4	; (adr r2, 8003dc8 <HAL_RCCEx_PeriphCLKConfig+0x9ec>)
 8003dc4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003dc8:	08003e15 	.word	0x08003e15
 8003dcc:	08003de1 	.word	0x08003de1
 8003dd0:	08003df7 	.word	0x08003df7
 8003dd4:	08003e15 	.word	0x08003e15
 8003dd8:	08003e15 	.word	0x08003e15
 8003ddc:	08003e15 	.word	0x08003e15
      case RCC_USART234578CLKSOURCE_PCLK1: /* CD/D2 PCLK1 as clock source for USART2/3/4/5/7/8 */
        /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
        break;

      case RCC_USART234578CLKSOURCE_PLL2: /* PLL2 is used as clock source for USART2/3/4/5/7/8 */
        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 8003de0:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8003de4:	3308      	adds	r3, #8
 8003de6:	2101      	movs	r1, #1
 8003de8:	4618      	mov	r0, r3
 8003dea:	f000 ff55 	bl	8004c98 <RCCEx_PLL2_Config>
 8003dee:	4603      	mov	r3, r0
 8003df0:	f887 3117 	strb.w	r3, [r7, #279]	; 0x117
        /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
        break;
 8003df4:	e00f      	b.n	8003e16 <HAL_RCCEx_PeriphCLKConfig+0xa3a>

      case RCC_USART234578CLKSOURCE_PLL3: /* PLL3 is used as clock source for USART2/3/4/5/7/8 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 8003df6:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8003dfa:	3328      	adds	r3, #40	; 0x28
 8003dfc:	2101      	movs	r1, #1
 8003dfe:	4618      	mov	r0, r3
 8003e00:	f000 fffc 	bl	8004dfc <RCCEx_PLL3_Config>
 8003e04:	4603      	mov	r3, r0
 8003e06:	f887 3117 	strb.w	r3, [r7, #279]	; 0x117
        /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
        break;
 8003e0a:	e004      	b.n	8003e16 <HAL_RCCEx_PeriphCLKConfig+0xa3a>
        /* LSE,  oscillator is used as source of USART2/3/4/5/7/8 clock */
        /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8003e0c:	2301      	movs	r3, #1
 8003e0e:	f887 3117 	strb.w	r3, [r7, #279]	; 0x117
        break;
 8003e12:	e000      	b.n	8003e16 <HAL_RCCEx_PeriphCLKConfig+0xa3a>
        break;
 8003e14:	bf00      	nop
    }

    if (ret == HAL_OK)
 8003e16:	f897 3117 	ldrb.w	r3, [r7, #279]	; 0x117
 8003e1a:	2b00      	cmp	r3, #0
 8003e1c:	d10a      	bne.n	8003e34 <HAL_RCCEx_PeriphCLKConfig+0xa58>
    {
      /* Set the source of USART2/3/4/5/7/8 clock */
      __HAL_RCC_USART234578_CONFIG(PeriphClkInit->Usart234578ClockSelection);
 8003e1e:	4b96      	ldr	r3, [pc, #600]	; (8004078 <HAL_RCCEx_PeriphCLKConfig+0xc9c>)
 8003e20:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003e22:	f023 0107 	bic.w	r1, r3, #7
 8003e26:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8003e2a:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8003e2c:	4a92      	ldr	r2, [pc, #584]	; (8004078 <HAL_RCCEx_PeriphCLKConfig+0xc9c>)
 8003e2e:	430b      	orrs	r3, r1
 8003e30:	6553      	str	r3, [r2, #84]	; 0x54
 8003e32:	e003      	b.n	8003e3c <HAL_RCCEx_PeriphCLKConfig+0xa60>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8003e34:	f897 3117 	ldrb.w	r3, [r7, #279]	; 0x117
 8003e38:	f887 3116 	strb.w	r3, [r7, #278]	; 0x116
    }
  }

  /*-------------------------- LPUART1 Configuration -------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 8003e3c:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8003e40:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003e44:	f002 0304 	and.w	r3, r2, #4
 8003e48:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
 8003e4c:	2300      	movs	r3, #0
 8003e4e:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
 8003e52:	e9d7 122a 	ldrd	r1, r2, [r7, #168]	; 0xa8
 8003e56:	460b      	mov	r3, r1
 8003e58:	4313      	orrs	r3, r2
 8003e5a:	d044      	beq.n	8003ee6 <HAL_RCCEx_PeriphCLKConfig+0xb0a>
  {
    switch (PeriphClkInit->Lpuart1ClockSelection)
 8003e5c:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8003e60:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003e64:	2b05      	cmp	r3, #5
 8003e66:	d825      	bhi.n	8003eb4 <HAL_RCCEx_PeriphCLKConfig+0xad8>
 8003e68:	a201      	add	r2, pc, #4	; (adr r2, 8003e70 <HAL_RCCEx_PeriphCLKConfig+0xa94>)
 8003e6a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003e6e:	bf00      	nop
 8003e70:	08003ebd 	.word	0x08003ebd
 8003e74:	08003e89 	.word	0x08003e89
 8003e78:	08003e9f 	.word	0x08003e9f
 8003e7c:	08003ebd 	.word	0x08003ebd
 8003e80:	08003ebd 	.word	0x08003ebd
 8003e84:	08003ebd 	.word	0x08003ebd
      case RCC_LPUART1CLKSOURCE_PCLK4: /* SRD/D3 PCLK1 (PCLK4) as clock source for LPUART1 */
        /* LPUART1 clock source configuration done later after clock selection check */
        break;

      case RCC_LPUART1CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPUART1 */
        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 8003e88:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8003e8c:	3308      	adds	r3, #8
 8003e8e:	2101      	movs	r1, #1
 8003e90:	4618      	mov	r0, r3
 8003e92:	f000 ff01 	bl	8004c98 <RCCEx_PLL2_Config>
 8003e96:	4603      	mov	r3, r0
 8003e98:	f887 3117 	strb.w	r3, [r7, #279]	; 0x117
        /* LPUART1 clock source configuration done later after clock selection check */
        break;
 8003e9c:	e00f      	b.n	8003ebe <HAL_RCCEx_PeriphCLKConfig+0xae2>

      case RCC_LPUART1CLKSOURCE_PLL3: /* PLL3 is used as clock source for LPUART1 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 8003e9e:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8003ea2:	3328      	adds	r3, #40	; 0x28
 8003ea4:	2101      	movs	r1, #1
 8003ea6:	4618      	mov	r0, r3
 8003ea8:	f000 ffa8 	bl	8004dfc <RCCEx_PLL3_Config>
 8003eac:	4603      	mov	r3, r0
 8003eae:	f887 3117 	strb.w	r3, [r7, #279]	; 0x117
        /* LPUART1 clock source configuration done later after clock selection check */
        break;
 8003eb2:	e004      	b.n	8003ebe <HAL_RCCEx_PeriphCLKConfig+0xae2>
        /* LSE,  oscillator is used as source of LPUART1 clock */
        /* LPUART1 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8003eb4:	2301      	movs	r3, #1
 8003eb6:	f887 3117 	strb.w	r3, [r7, #279]	; 0x117
        break;
 8003eba:	e000      	b.n	8003ebe <HAL_RCCEx_PeriphCLKConfig+0xae2>
        break;
 8003ebc:	bf00      	nop
    }

    if (ret == HAL_OK)
 8003ebe:	f897 3117 	ldrb.w	r3, [r7, #279]	; 0x117
 8003ec2:	2b00      	cmp	r3, #0
 8003ec4:	d10b      	bne.n	8003ede <HAL_RCCEx_PeriphCLKConfig+0xb02>
    {
      /* Set the source of LPUART1 clock */
      __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 8003ec6:	4b6c      	ldr	r3, [pc, #432]	; (8004078 <HAL_RCCEx_PeriphCLKConfig+0xc9c>)
 8003ec8:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003eca:	f023 0107 	bic.w	r1, r3, #7
 8003ece:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8003ed2:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003ed6:	4a68      	ldr	r2, [pc, #416]	; (8004078 <HAL_RCCEx_PeriphCLKConfig+0xc9c>)
 8003ed8:	430b      	orrs	r3, r1
 8003eda:	6593      	str	r3, [r2, #88]	; 0x58
 8003edc:	e003      	b.n	8003ee6 <HAL_RCCEx_PeriphCLKConfig+0xb0a>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8003ede:	f897 3117 	ldrb.w	r3, [r7, #279]	; 0x117
 8003ee2:	f887 3116 	strb.w	r3, [r7, #278]	; 0x116
    }
  }

  /*---------------------------- LPTIM1 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == RCC_PERIPHCLK_LPTIM1)
 8003ee6:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8003eea:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003eee:	f002 0320 	and.w	r3, r2, #32
 8003ef2:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
 8003ef6:	2300      	movs	r3, #0
 8003ef8:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
 8003efc:	e9d7 1228 	ldrd	r1, r2, [r7, #160]	; 0xa0
 8003f00:	460b      	mov	r3, r1
 8003f02:	4313      	orrs	r3, r2
 8003f04:	d055      	beq.n	8003fb2 <HAL_RCCEx_PeriphCLKConfig+0xbd6>
  {
    switch (PeriphClkInit->Lptim1ClockSelection)
 8003f06:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8003f0a:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8003f0e:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8003f12:	d033      	beq.n	8003f7c <HAL_RCCEx_PeriphCLKConfig+0xba0>
 8003f14:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8003f18:	d82c      	bhi.n	8003f74 <HAL_RCCEx_PeriphCLKConfig+0xb98>
 8003f1a:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8003f1e:	d02f      	beq.n	8003f80 <HAL_RCCEx_PeriphCLKConfig+0xba4>
 8003f20:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8003f24:	d826      	bhi.n	8003f74 <HAL_RCCEx_PeriphCLKConfig+0xb98>
 8003f26:	f1b3 5f40 	cmp.w	r3, #805306368	; 0x30000000
 8003f2a:	d02b      	beq.n	8003f84 <HAL_RCCEx_PeriphCLKConfig+0xba8>
 8003f2c:	f1b3 5f40 	cmp.w	r3, #805306368	; 0x30000000
 8003f30:	d820      	bhi.n	8003f74 <HAL_RCCEx_PeriphCLKConfig+0xb98>
 8003f32:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8003f36:	d012      	beq.n	8003f5e <HAL_RCCEx_PeriphCLKConfig+0xb82>
 8003f38:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8003f3c:	d81a      	bhi.n	8003f74 <HAL_RCCEx_PeriphCLKConfig+0xb98>
 8003f3e:	2b00      	cmp	r3, #0
 8003f40:	d022      	beq.n	8003f88 <HAL_RCCEx_PeriphCLKConfig+0xbac>
 8003f42:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8003f46:	d115      	bne.n	8003f74 <HAL_RCCEx_PeriphCLKConfig+0xb98>
        /* LPTIM1 clock source configuration done later after clock selection check */
        break;

      case RCC_LPTIM1CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPTIM1*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 8003f48:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8003f4c:	3308      	adds	r3, #8
 8003f4e:	2100      	movs	r1, #0
 8003f50:	4618      	mov	r0, r3
 8003f52:	f000 fea1 	bl	8004c98 <RCCEx_PLL2_Config>
 8003f56:	4603      	mov	r3, r0
 8003f58:	f887 3117 	strb.w	r3, [r7, #279]	; 0x117

        /* LPTIM1 clock source configuration done later after clock selection check */
        break;
 8003f5c:	e015      	b.n	8003f8a <HAL_RCCEx_PeriphCLKConfig+0xbae>

      case RCC_LPTIM1CLKSOURCE_PLL3:  /* PLL3 is used as clock source for LPTIM1*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 8003f5e:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8003f62:	3328      	adds	r3, #40	; 0x28
 8003f64:	2102      	movs	r1, #2
 8003f66:	4618      	mov	r0, r3
 8003f68:	f000 ff48 	bl	8004dfc <RCCEx_PLL3_Config>
 8003f6c:	4603      	mov	r3, r0
 8003f6e:	f887 3117 	strb.w	r3, [r7, #279]	; 0x117

        /* LPTIM1 clock source configuration done later after clock selection check */
        break;
 8003f72:	e00a      	b.n	8003f8a <HAL_RCCEx_PeriphCLKConfig+0xbae>
        /* HSI, HSE, or CSI oscillator is used as source of LPTIM1 clock */
        /* LPTIM1 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8003f74:	2301      	movs	r3, #1
 8003f76:	f887 3117 	strb.w	r3, [r7, #279]	; 0x117
        break;
 8003f7a:	e006      	b.n	8003f8a <HAL_RCCEx_PeriphCLKConfig+0xbae>
        break;
 8003f7c:	bf00      	nop
 8003f7e:	e004      	b.n	8003f8a <HAL_RCCEx_PeriphCLKConfig+0xbae>
        break;
 8003f80:	bf00      	nop
 8003f82:	e002      	b.n	8003f8a <HAL_RCCEx_PeriphCLKConfig+0xbae>
        break;
 8003f84:	bf00      	nop
 8003f86:	e000      	b.n	8003f8a <HAL_RCCEx_PeriphCLKConfig+0xbae>
        break;
 8003f88:	bf00      	nop
    }

    if (ret == HAL_OK)
 8003f8a:	f897 3117 	ldrb.w	r3, [r7, #279]	; 0x117
 8003f8e:	2b00      	cmp	r3, #0
 8003f90:	d10b      	bne.n	8003faa <HAL_RCCEx_PeriphCLKConfig+0xbce>
    {
      /* Set the source of LPTIM1 clock*/
      __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 8003f92:	4b39      	ldr	r3, [pc, #228]	; (8004078 <HAL_RCCEx_PeriphCLKConfig+0xc9c>)
 8003f94:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003f96:	f023 41e0 	bic.w	r1, r3, #1879048192	; 0x70000000
 8003f9a:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8003f9e:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8003fa2:	4a35      	ldr	r2, [pc, #212]	; (8004078 <HAL_RCCEx_PeriphCLKConfig+0xc9c>)
 8003fa4:	430b      	orrs	r3, r1
 8003fa6:	6553      	str	r3, [r2, #84]	; 0x54
 8003fa8:	e003      	b.n	8003fb2 <HAL_RCCEx_PeriphCLKConfig+0xbd6>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8003faa:	f897 3117 	ldrb.w	r3, [r7, #279]	; 0x117
 8003fae:	f887 3116 	strb.w	r3, [r7, #278]	; 0x116
    }
  }

  /*---------------------------- LPTIM2 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM2) == RCC_PERIPHCLK_LPTIM2)
 8003fb2:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8003fb6:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003fba:	f002 0340 	and.w	r3, r2, #64	; 0x40
 8003fbe:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
 8003fc2:	2300      	movs	r3, #0
 8003fc4:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
 8003fc8:	e9d7 1226 	ldrd	r1, r2, [r7, #152]	; 0x98
 8003fcc:	460b      	mov	r3, r1
 8003fce:	4313      	orrs	r3, r2
 8003fd0:	d058      	beq.n	8004084 <HAL_RCCEx_PeriphCLKConfig+0xca8>
  {
    switch (PeriphClkInit->Lptim2ClockSelection)
 8003fd2:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8003fd6:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 8003fda:	f5b3 5fa0 	cmp.w	r3, #5120	; 0x1400
 8003fde:	d033      	beq.n	8004048 <HAL_RCCEx_PeriphCLKConfig+0xc6c>
 8003fe0:	f5b3 5fa0 	cmp.w	r3, #5120	; 0x1400
 8003fe4:	d82c      	bhi.n	8004040 <HAL_RCCEx_PeriphCLKConfig+0xc64>
 8003fe6:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8003fea:	d02f      	beq.n	800404c <HAL_RCCEx_PeriphCLKConfig+0xc70>
 8003fec:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8003ff0:	d826      	bhi.n	8004040 <HAL_RCCEx_PeriphCLKConfig+0xc64>
 8003ff2:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 8003ff6:	d02b      	beq.n	8004050 <HAL_RCCEx_PeriphCLKConfig+0xc74>
 8003ff8:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 8003ffc:	d820      	bhi.n	8004040 <HAL_RCCEx_PeriphCLKConfig+0xc64>
 8003ffe:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8004002:	d012      	beq.n	800402a <HAL_RCCEx_PeriphCLKConfig+0xc4e>
 8004004:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8004008:	d81a      	bhi.n	8004040 <HAL_RCCEx_PeriphCLKConfig+0xc64>
 800400a:	2b00      	cmp	r3, #0
 800400c:	d022      	beq.n	8004054 <HAL_RCCEx_PeriphCLKConfig+0xc78>
 800400e:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8004012:	d115      	bne.n	8004040 <HAL_RCCEx_PeriphCLKConfig+0xc64>
        /* LPTIM2 clock source configuration done later after clock selection check */
        break;

      case RCC_LPTIM2CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPTIM2*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 8004014:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8004018:	3308      	adds	r3, #8
 800401a:	2100      	movs	r1, #0
 800401c:	4618      	mov	r0, r3
 800401e:	f000 fe3b 	bl	8004c98 <RCCEx_PLL2_Config>
 8004022:	4603      	mov	r3, r0
 8004024:	f887 3117 	strb.w	r3, [r7, #279]	; 0x117

        /* LPTIM2 clock source configuration done later after clock selection check */
        break;
 8004028:	e015      	b.n	8004056 <HAL_RCCEx_PeriphCLKConfig+0xc7a>

      case RCC_LPTIM2CLKSOURCE_PLL3:  /* PLL3 is used as clock source for LPTIM2*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 800402a:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800402e:	3328      	adds	r3, #40	; 0x28
 8004030:	2102      	movs	r1, #2
 8004032:	4618      	mov	r0, r3
 8004034:	f000 fee2 	bl	8004dfc <RCCEx_PLL3_Config>
 8004038:	4603      	mov	r3, r0
 800403a:	f887 3117 	strb.w	r3, [r7, #279]	; 0x117

        /* LPTIM2 clock source configuration done later after clock selection check */
        break;
 800403e:	e00a      	b.n	8004056 <HAL_RCCEx_PeriphCLKConfig+0xc7a>
        /* HSI, HSE, or CSI oscillator is used as source of LPTIM2 clock */
        /* LPTIM2 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8004040:	2301      	movs	r3, #1
 8004042:	f887 3117 	strb.w	r3, [r7, #279]	; 0x117
        break;
 8004046:	e006      	b.n	8004056 <HAL_RCCEx_PeriphCLKConfig+0xc7a>
        break;
 8004048:	bf00      	nop
 800404a:	e004      	b.n	8004056 <HAL_RCCEx_PeriphCLKConfig+0xc7a>
        break;
 800404c:	bf00      	nop
 800404e:	e002      	b.n	8004056 <HAL_RCCEx_PeriphCLKConfig+0xc7a>
        break;
 8004050:	bf00      	nop
 8004052:	e000      	b.n	8004056 <HAL_RCCEx_PeriphCLKConfig+0xc7a>
        break;
 8004054:	bf00      	nop
    }

    if (ret == HAL_OK)
 8004056:	f897 3117 	ldrb.w	r3, [r7, #279]	; 0x117
 800405a:	2b00      	cmp	r3, #0
 800405c:	d10e      	bne.n	800407c <HAL_RCCEx_PeriphCLKConfig+0xca0>
    {
      /* Set the source of LPTIM2 clock*/
      __HAL_RCC_LPTIM2_CONFIG(PeriphClkInit->Lptim2ClockSelection);
 800405e:	4b06      	ldr	r3, [pc, #24]	; (8004078 <HAL_RCCEx_PeriphCLKConfig+0xc9c>)
 8004060:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8004062:	f423 51e0 	bic.w	r1, r3, #7168	; 0x1c00
 8004066:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800406a:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 800406e:	4a02      	ldr	r2, [pc, #8]	; (8004078 <HAL_RCCEx_PeriphCLKConfig+0xc9c>)
 8004070:	430b      	orrs	r3, r1
 8004072:	6593      	str	r3, [r2, #88]	; 0x58
 8004074:	e006      	b.n	8004084 <HAL_RCCEx_PeriphCLKConfig+0xca8>
 8004076:	bf00      	nop
 8004078:	58024400 	.word	0x58024400
    }
    else
    {
      /* set overall return value */
      status = ret;
 800407c:	f897 3117 	ldrb.w	r3, [r7, #279]	; 0x117
 8004080:	f887 3116 	strb.w	r3, [r7, #278]	; 0x116
    }
  }

  /*---------------------------- LPTIM345 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM345) == RCC_PERIPHCLK_LPTIM345)
 8004084:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8004088:	e9d3 2300 	ldrd	r2, r3, [r3]
 800408c:	f002 0380 	and.w	r3, r2, #128	; 0x80
 8004090:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
 8004094:	2300      	movs	r3, #0
 8004096:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
 800409a:	e9d7 1224 	ldrd	r1, r2, [r7, #144]	; 0x90
 800409e:	460b      	mov	r3, r1
 80040a0:	4313      	orrs	r3, r2
 80040a2:	d055      	beq.n	8004150 <HAL_RCCEx_PeriphCLKConfig+0xd74>
  {
    switch (PeriphClkInit->Lptim345ClockSelection)
 80040a4:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 80040a8:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 80040ac:	f5b3 4f20 	cmp.w	r3, #40960	; 0xa000
 80040b0:	d033      	beq.n	800411a <HAL_RCCEx_PeriphCLKConfig+0xd3e>
 80040b2:	f5b3 4f20 	cmp.w	r3, #40960	; 0xa000
 80040b6:	d82c      	bhi.n	8004112 <HAL_RCCEx_PeriphCLKConfig+0xd36>
 80040b8:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 80040bc:	d02f      	beq.n	800411e <HAL_RCCEx_PeriphCLKConfig+0xd42>
 80040be:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 80040c2:	d826      	bhi.n	8004112 <HAL_RCCEx_PeriphCLKConfig+0xd36>
 80040c4:	f5b3 4fc0 	cmp.w	r3, #24576	; 0x6000
 80040c8:	d02b      	beq.n	8004122 <HAL_RCCEx_PeriphCLKConfig+0xd46>
 80040ca:	f5b3 4fc0 	cmp.w	r3, #24576	; 0x6000
 80040ce:	d820      	bhi.n	8004112 <HAL_RCCEx_PeriphCLKConfig+0xd36>
 80040d0:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 80040d4:	d012      	beq.n	80040fc <HAL_RCCEx_PeriphCLKConfig+0xd20>
 80040d6:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 80040da:	d81a      	bhi.n	8004112 <HAL_RCCEx_PeriphCLKConfig+0xd36>
 80040dc:	2b00      	cmp	r3, #0
 80040de:	d022      	beq.n	8004126 <HAL_RCCEx_PeriphCLKConfig+0xd4a>
 80040e0:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80040e4:	d115      	bne.n	8004112 <HAL_RCCEx_PeriphCLKConfig+0xd36>
      case RCC_LPTIM345CLKSOURCE_PCLK4:      /* SRD/D3 PCLK1 (PCLK4) as clock source for LPTIM3/4/5 */
        /* LPTIM3/4/5 clock source configuration done later after clock selection check */
        break;

      case RCC_LPTIM345CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPTIM3/4/5 */
        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 80040e6:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 80040ea:	3308      	adds	r3, #8
 80040ec:	2100      	movs	r1, #0
 80040ee:	4618      	mov	r0, r3
 80040f0:	f000 fdd2 	bl	8004c98 <RCCEx_PLL2_Config>
 80040f4:	4603      	mov	r3, r0
 80040f6:	f887 3117 	strb.w	r3, [r7, #279]	; 0x117

        /* LPTIM3/4/5 clock source configuration done later after clock selection check */
        break;
 80040fa:	e015      	b.n	8004128 <HAL_RCCEx_PeriphCLKConfig+0xd4c>

      case RCC_LPTIM345CLKSOURCE_PLL3:  /* PLL3 is used as clock source for LPTIM3/4/5 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 80040fc:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8004100:	3328      	adds	r3, #40	; 0x28
 8004102:	2102      	movs	r1, #2
 8004104:	4618      	mov	r0, r3
 8004106:	f000 fe79 	bl	8004dfc <RCCEx_PLL3_Config>
 800410a:	4603      	mov	r3, r0
 800410c:	f887 3117 	strb.w	r3, [r7, #279]	; 0x117

        /* LPTIM3/4/5 clock source configuration done later after clock selection check */
        break;
 8004110:	e00a      	b.n	8004128 <HAL_RCCEx_PeriphCLKConfig+0xd4c>
        /* HSI, HSE, or CSI oscillator is used as source of LPTIM3/4/5 clock */
        /* LPTIM3/4/5 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8004112:	2301      	movs	r3, #1
 8004114:	f887 3117 	strb.w	r3, [r7, #279]	; 0x117
        break;
 8004118:	e006      	b.n	8004128 <HAL_RCCEx_PeriphCLKConfig+0xd4c>
        break;
 800411a:	bf00      	nop
 800411c:	e004      	b.n	8004128 <HAL_RCCEx_PeriphCLKConfig+0xd4c>
        break;
 800411e:	bf00      	nop
 8004120:	e002      	b.n	8004128 <HAL_RCCEx_PeriphCLKConfig+0xd4c>
        break;
 8004122:	bf00      	nop
 8004124:	e000      	b.n	8004128 <HAL_RCCEx_PeriphCLKConfig+0xd4c>
        break;
 8004126:	bf00      	nop
    }

    if (ret == HAL_OK)
 8004128:	f897 3117 	ldrb.w	r3, [r7, #279]	; 0x117
 800412c:	2b00      	cmp	r3, #0
 800412e:	d10b      	bne.n	8004148 <HAL_RCCEx_PeriphCLKConfig+0xd6c>
    {
      /* Set the source of LPTIM3/4/5 clock */
      __HAL_RCC_LPTIM345_CONFIG(PeriphClkInit->Lptim345ClockSelection);
 8004130:	4ba0      	ldr	r3, [pc, #640]	; (80043b4 <HAL_RCCEx_PeriphCLKConfig+0xfd8>)
 8004132:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8004134:	f423 4160 	bic.w	r1, r3, #57344	; 0xe000
 8004138:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800413c:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 8004140:	4a9c      	ldr	r2, [pc, #624]	; (80043b4 <HAL_RCCEx_PeriphCLKConfig+0xfd8>)
 8004142:	430b      	orrs	r3, r1
 8004144:	6593      	str	r3, [r2, #88]	; 0x58
 8004146:	e003      	b.n	8004150 <HAL_RCCEx_PeriphCLKConfig+0xd74>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8004148:	f897 3117 	ldrb.w	r3, [r7, #279]	; 0x117
 800414c:	f887 3116 	strb.w	r3, [r7, #278]	; 0x116
    }
  }

  /*------------------------------ I2C1/2/3/5* Configuration ------------------------*/
#if defined(I2C5)
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1235) == RCC_PERIPHCLK_I2C1235)
 8004150:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8004154:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004158:	f002 0308 	and.w	r3, r2, #8
 800415c:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
 8004160:	2300      	movs	r3, #0
 8004162:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
 8004166:	e9d7 1222 	ldrd	r1, r2, [r7, #136]	; 0x88
 800416a:	460b      	mov	r3, r1
 800416c:	4313      	orrs	r3, r2
 800416e:	d01e      	beq.n	80041ae <HAL_RCCEx_PeriphCLKConfig+0xdd2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1235CLKSOURCE(PeriphClkInit->I2c1235ClockSelection));

    if ((PeriphClkInit->I2c1235ClockSelection) == RCC_I2C1235CLKSOURCE_PLL3)
 8004170:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8004174:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8004178:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800417c:	d10c      	bne.n	8004198 <HAL_RCCEx_PeriphCLKConfig+0xdbc>
    {
      if (RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE) != HAL_OK)
 800417e:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8004182:	3328      	adds	r3, #40	; 0x28
 8004184:	2102      	movs	r1, #2
 8004186:	4618      	mov	r0, r3
 8004188:	f000 fe38 	bl	8004dfc <RCCEx_PLL3_Config>
 800418c:	4603      	mov	r3, r0
 800418e:	2b00      	cmp	r3, #0
 8004190:	d002      	beq.n	8004198 <HAL_RCCEx_PeriphCLKConfig+0xdbc>
      {
        status = HAL_ERROR;
 8004192:	2301      	movs	r3, #1
 8004194:	f887 3116 	strb.w	r3, [r7, #278]	; 0x116
      }
    }

    __HAL_RCC_I2C1235_CONFIG(PeriphClkInit->I2c1235ClockSelection);
 8004198:	4b86      	ldr	r3, [pc, #536]	; (80043b4 <HAL_RCCEx_PeriphCLKConfig+0xfd8>)
 800419a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800419c:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 80041a0:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 80041a4:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 80041a8:	4a82      	ldr	r2, [pc, #520]	; (80043b4 <HAL_RCCEx_PeriphCLKConfig+0xfd8>)
 80041aa:	430b      	orrs	r3, r1
 80041ac:	6553      	str	r3, [r2, #84]	; 0x54

  }
#endif /* I2C5 */

  /*------------------------------ I2C4 Configuration ------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C4) == RCC_PERIPHCLK_I2C4)
 80041ae:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 80041b2:	e9d3 2300 	ldrd	r2, r3, [r3]
 80041b6:	f002 0310 	and.w	r3, r2, #16
 80041ba:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
 80041be:	2300      	movs	r3, #0
 80041c0:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
 80041c4:	e9d7 1220 	ldrd	r1, r2, [r7, #128]	; 0x80
 80041c8:	460b      	mov	r3, r1
 80041ca:	4313      	orrs	r3, r2
 80041cc:	d01e      	beq.n	800420c <HAL_RCCEx_PeriphCLKConfig+0xe30>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C4CLKSOURCE(PeriphClkInit->I2c4ClockSelection));

    if ((PeriphClkInit->I2c4ClockSelection) == RCC_I2C4CLKSOURCE_PLL3)
 80041ce:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 80041d2:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 80041d6:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80041da:	d10c      	bne.n	80041f6 <HAL_RCCEx_PeriphCLKConfig+0xe1a>
    {
      if (RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE) != HAL_OK)
 80041dc:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 80041e0:	3328      	adds	r3, #40	; 0x28
 80041e2:	2102      	movs	r1, #2
 80041e4:	4618      	mov	r0, r3
 80041e6:	f000 fe09 	bl	8004dfc <RCCEx_PLL3_Config>
 80041ea:	4603      	mov	r3, r0
 80041ec:	2b00      	cmp	r3, #0
 80041ee:	d002      	beq.n	80041f6 <HAL_RCCEx_PeriphCLKConfig+0xe1a>
      {
        status = HAL_ERROR;
 80041f0:	2301      	movs	r3, #1
 80041f2:	f887 3116 	strb.w	r3, [r7, #278]	; 0x116
      }
    }

    __HAL_RCC_I2C4_CONFIG(PeriphClkInit->I2c4ClockSelection);
 80041f6:	4b6f      	ldr	r3, [pc, #444]	; (80043b4 <HAL_RCCEx_PeriphCLKConfig+0xfd8>)
 80041f8:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80041fa:	f423 7140 	bic.w	r1, r3, #768	; 0x300
 80041fe:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8004202:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8004206:	4a6b      	ldr	r2, [pc, #428]	; (80043b4 <HAL_RCCEx_PeriphCLKConfig+0xfd8>)
 8004208:	430b      	orrs	r3, r1
 800420a:	6593      	str	r3, [r2, #88]	; 0x58

  }

  /*---------------------------- ADC configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 800420c:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8004210:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004214:	f402 2300 	and.w	r3, r2, #524288	; 0x80000
 8004218:	67bb      	str	r3, [r7, #120]	; 0x78
 800421a:	2300      	movs	r3, #0
 800421c:	67fb      	str	r3, [r7, #124]	; 0x7c
 800421e:	e9d7 121e 	ldrd	r1, r2, [r7, #120]	; 0x78
 8004222:	460b      	mov	r3, r1
 8004224:	4313      	orrs	r3, r2
 8004226:	d03e      	beq.n	80042a6 <HAL_RCCEx_PeriphCLKConfig+0xeca>
  {
    switch (PeriphClkInit->AdcClockSelection)
 8004228:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800422c:	f8d3 30a0 	ldr.w	r3, [r3, #160]	; 0xa0
 8004230:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8004234:	d022      	beq.n	800427c <HAL_RCCEx_PeriphCLKConfig+0xea0>
 8004236:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 800423a:	d81b      	bhi.n	8004274 <HAL_RCCEx_PeriphCLKConfig+0xe98>
 800423c:	2b00      	cmp	r3, #0
 800423e:	d003      	beq.n	8004248 <HAL_RCCEx_PeriphCLKConfig+0xe6c>
 8004240:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8004244:	d00b      	beq.n	800425e <HAL_RCCEx_PeriphCLKConfig+0xe82>
 8004246:	e015      	b.n	8004274 <HAL_RCCEx_PeriphCLKConfig+0xe98>
    {

      case RCC_ADCCLKSOURCE_PLL2: /* PLL2 is used as clock source for ADC*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 8004248:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800424c:	3308      	adds	r3, #8
 800424e:	2100      	movs	r1, #0
 8004250:	4618      	mov	r0, r3
 8004252:	f000 fd21 	bl	8004c98 <RCCEx_PLL2_Config>
 8004256:	4603      	mov	r3, r0
 8004258:	f887 3117 	strb.w	r3, [r7, #279]	; 0x117

        /* ADC clock source configuration done later after clock selection check */
        break;
 800425c:	e00f      	b.n	800427e <HAL_RCCEx_PeriphCLKConfig+0xea2>

      case RCC_ADCCLKSOURCE_PLL3:  /* PLL3 is used as clock source for ADC*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 800425e:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8004262:	3328      	adds	r3, #40	; 0x28
 8004264:	2102      	movs	r1, #2
 8004266:	4618      	mov	r0, r3
 8004268:	f000 fdc8 	bl	8004dfc <RCCEx_PLL3_Config>
 800426c:	4603      	mov	r3, r0
 800426e:	f887 3117 	strb.w	r3, [r7, #279]	; 0x117

        /* ADC clock source configuration done later after clock selection check */
        break;
 8004272:	e004      	b.n	800427e <HAL_RCCEx_PeriphCLKConfig+0xea2>
        /* HSI, HSE, or CSI oscillator is used as source of ADC clock */
        /* ADC clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8004274:	2301      	movs	r3, #1
 8004276:	f887 3117 	strb.w	r3, [r7, #279]	; 0x117
        break;
 800427a:	e000      	b.n	800427e <HAL_RCCEx_PeriphCLKConfig+0xea2>
        break;
 800427c:	bf00      	nop
    }

    if (ret == HAL_OK)
 800427e:	f897 3117 	ldrb.w	r3, [r7, #279]	; 0x117
 8004282:	2b00      	cmp	r3, #0
 8004284:	d10b      	bne.n	800429e <HAL_RCCEx_PeriphCLKConfig+0xec2>
    {
      /* Set the source of ADC clock*/
      __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 8004286:	4b4b      	ldr	r3, [pc, #300]	; (80043b4 <HAL_RCCEx_PeriphCLKConfig+0xfd8>)
 8004288:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800428a:	f423 3140 	bic.w	r1, r3, #196608	; 0x30000
 800428e:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8004292:	f8d3 30a0 	ldr.w	r3, [r3, #160]	; 0xa0
 8004296:	4a47      	ldr	r2, [pc, #284]	; (80043b4 <HAL_RCCEx_PeriphCLKConfig+0xfd8>)
 8004298:	430b      	orrs	r3, r1
 800429a:	6593      	str	r3, [r2, #88]	; 0x58
 800429c:	e003      	b.n	80042a6 <HAL_RCCEx_PeriphCLKConfig+0xeca>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800429e:	f897 3117 	ldrb.w	r3, [r7, #279]	; 0x117
 80042a2:	f887 3116 	strb.w	r3, [r7, #278]	; 0x116
    }
  }

  /*------------------------------ USB Configuration -------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == RCC_PERIPHCLK_USB)
 80042a6:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 80042aa:	e9d3 2300 	ldrd	r2, r3, [r3]
 80042ae:	f402 2380 	and.w	r3, r2, #262144	; 0x40000
 80042b2:	673b      	str	r3, [r7, #112]	; 0x70
 80042b4:	2300      	movs	r3, #0
 80042b6:	677b      	str	r3, [r7, #116]	; 0x74
 80042b8:	e9d7 121c 	ldrd	r1, r2, [r7, #112]	; 0x70
 80042bc:	460b      	mov	r3, r1
 80042be:	4313      	orrs	r3, r2
 80042c0:	d03b      	beq.n	800433a <HAL_RCCEx_PeriphCLKConfig+0xf5e>
  {

    switch (PeriphClkInit->UsbClockSelection)
 80042c2:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 80042c6:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 80042ca:	f5b3 1f40 	cmp.w	r3, #3145728	; 0x300000
 80042ce:	d01f      	beq.n	8004310 <HAL_RCCEx_PeriphCLKConfig+0xf34>
 80042d0:	f5b3 1f40 	cmp.w	r3, #3145728	; 0x300000
 80042d4:	d818      	bhi.n	8004308 <HAL_RCCEx_PeriphCLKConfig+0xf2c>
 80042d6:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 80042da:	d003      	beq.n	80042e4 <HAL_RCCEx_PeriphCLKConfig+0xf08>
 80042dc:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 80042e0:	d007      	beq.n	80042f2 <HAL_RCCEx_PeriphCLKConfig+0xf16>
 80042e2:	e011      	b.n	8004308 <HAL_RCCEx_PeriphCLKConfig+0xf2c>
    {
      case RCC_USBCLKSOURCE_PLL:      /* PLL is used as clock source for USB*/
        /* Enable USB Clock output generated form System USB . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 80042e4:	4b33      	ldr	r3, [pc, #204]	; (80043b4 <HAL_RCCEx_PeriphCLKConfig+0xfd8>)
 80042e6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80042e8:	4a32      	ldr	r2, [pc, #200]	; (80043b4 <HAL_RCCEx_PeriphCLKConfig+0xfd8>)
 80042ea:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80042ee:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* USB clock source configuration done later after clock selection check */
        break;
 80042f0:	e00f      	b.n	8004312 <HAL_RCCEx_PeriphCLKConfig+0xf36>

      case RCC_USBCLKSOURCE_PLL3: /* PLL3 is used as clock source for USB*/

        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 80042f2:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 80042f6:	3328      	adds	r3, #40	; 0x28
 80042f8:	2101      	movs	r1, #1
 80042fa:	4618      	mov	r0, r3
 80042fc:	f000 fd7e 	bl	8004dfc <RCCEx_PLL3_Config>
 8004300:	4603      	mov	r3, r0
 8004302:	f887 3117 	strb.w	r3, [r7, #279]	; 0x117

        /* USB clock source configuration done later after clock selection check */
        break;
 8004306:	e004      	b.n	8004312 <HAL_RCCEx_PeriphCLKConfig+0xf36>
        /* HSI48 oscillator is used as source of USB clock */
        /* USB clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8004308:	2301      	movs	r3, #1
 800430a:	f887 3117 	strb.w	r3, [r7, #279]	; 0x117
        break;
 800430e:	e000      	b.n	8004312 <HAL_RCCEx_PeriphCLKConfig+0xf36>
        break;
 8004310:	bf00      	nop
    }

    if (ret == HAL_OK)
 8004312:	f897 3117 	ldrb.w	r3, [r7, #279]	; 0x117
 8004316:	2b00      	cmp	r3, #0
 8004318:	d10b      	bne.n	8004332 <HAL_RCCEx_PeriphCLKConfig+0xf56>
    {
      /* Set the source of USB clock*/
      __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 800431a:	4b26      	ldr	r3, [pc, #152]	; (80043b4 <HAL_RCCEx_PeriphCLKConfig+0xfd8>)
 800431c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800431e:	f423 1140 	bic.w	r1, r3, #3145728	; 0x300000
 8004322:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8004326:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800432a:	4a22      	ldr	r2, [pc, #136]	; (80043b4 <HAL_RCCEx_PeriphCLKConfig+0xfd8>)
 800432c:	430b      	orrs	r3, r1
 800432e:	6553      	str	r3, [r2, #84]	; 0x54
 8004330:	e003      	b.n	800433a <HAL_RCCEx_PeriphCLKConfig+0xf5e>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8004332:	f897 3117 	ldrb.w	r3, [r7, #279]	; 0x117
 8004336:	f887 3116 	strb.w	r3, [r7, #278]	; 0x116
    }

  }

  /*------------------------------------- SDMMC Configuration ------------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC) == RCC_PERIPHCLK_SDMMC)
 800433a:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800433e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004342:	f402 3380 	and.w	r3, r2, #65536	; 0x10000
 8004346:	66bb      	str	r3, [r7, #104]	; 0x68
 8004348:	2300      	movs	r3, #0
 800434a:	66fb      	str	r3, [r7, #108]	; 0x6c
 800434c:	e9d7 121a 	ldrd	r1, r2, [r7, #104]	; 0x68
 8004350:	460b      	mov	r3, r1
 8004352:	4313      	orrs	r3, r2
 8004354:	d034      	beq.n	80043c0 <HAL_RCCEx_PeriphCLKConfig+0xfe4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SDMMC(PeriphClkInit->SdmmcClockSelection));

    switch (PeriphClkInit->SdmmcClockSelection)
 8004356:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800435a:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800435c:	2b00      	cmp	r3, #0
 800435e:	d003      	beq.n	8004368 <HAL_RCCEx_PeriphCLKConfig+0xf8c>
 8004360:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8004364:	d007      	beq.n	8004376 <HAL_RCCEx_PeriphCLKConfig+0xf9a>
 8004366:	e011      	b.n	800438c <HAL_RCCEx_PeriphCLKConfig+0xfb0>
    {
      case RCC_SDMMCCLKSOURCE_PLL:      /* PLL is used as clock source for SDMMC*/
        /* Enable SDMMC Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8004368:	4b12      	ldr	r3, [pc, #72]	; (80043b4 <HAL_RCCEx_PeriphCLKConfig+0xfd8>)
 800436a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800436c:	4a11      	ldr	r2, [pc, #68]	; (80043b4 <HAL_RCCEx_PeriphCLKConfig+0xfd8>)
 800436e:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8004372:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* SDMMC clock source configuration done later after clock selection check */
        break;
 8004374:	e00e      	b.n	8004394 <HAL_RCCEx_PeriphCLKConfig+0xfb8>

      case RCC_SDMMCCLKSOURCE_PLL2: /* PLL2 is used as clock source for SDMMC*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_R_UPDATE);
 8004376:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800437a:	3308      	adds	r3, #8
 800437c:	2102      	movs	r1, #2
 800437e:	4618      	mov	r0, r3
 8004380:	f000 fc8a 	bl	8004c98 <RCCEx_PLL2_Config>
 8004384:	4603      	mov	r3, r0
 8004386:	f887 3117 	strb.w	r3, [r7, #279]	; 0x117

        /* SDMMC clock source configuration done later after clock selection check */
        break;
 800438a:	e003      	b.n	8004394 <HAL_RCCEx_PeriphCLKConfig+0xfb8>

      default:
        ret = HAL_ERROR;
 800438c:	2301      	movs	r3, #1
 800438e:	f887 3117 	strb.w	r3, [r7, #279]	; 0x117
        break;
 8004392:	bf00      	nop
    }

    if (ret == HAL_OK)
 8004394:	f897 3117 	ldrb.w	r3, [r7, #279]	; 0x117
 8004398:	2b00      	cmp	r3, #0
 800439a:	d10d      	bne.n	80043b8 <HAL_RCCEx_PeriphCLKConfig+0xfdc>
    {
      /* Set the source of SDMMC clock*/
      __HAL_RCC_SDMMC_CONFIG(PeriphClkInit->SdmmcClockSelection);
 800439c:	4b05      	ldr	r3, [pc, #20]	; (80043b4 <HAL_RCCEx_PeriphCLKConfig+0xfd8>)
 800439e:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80043a0:	f423 3180 	bic.w	r1, r3, #65536	; 0x10000
 80043a4:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 80043a8:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80043aa:	4a02      	ldr	r2, [pc, #8]	; (80043b4 <HAL_RCCEx_PeriphCLKConfig+0xfd8>)
 80043ac:	430b      	orrs	r3, r1
 80043ae:	64d3      	str	r3, [r2, #76]	; 0x4c
 80043b0:	e006      	b.n	80043c0 <HAL_RCCEx_PeriphCLKConfig+0xfe4>
 80043b2:	bf00      	nop
 80043b4:	58024400 	.word	0x58024400
    }
    else
    {
      /* set overall return value */
      status = ret;
 80043b8:	f897 3117 	ldrb.w	r3, [r7, #279]	; 0x117
 80043bc:	f887 3116 	strb.w	r3, [r7, #278]	; 0x116
    }
  }

#if defined(LTDC)
  /*-------------------------------------- LTDC Configuration -----------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LTDC) == RCC_PERIPHCLK_LTDC)
 80043c0:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 80043c4:	e9d3 2300 	ldrd	r2, r3, [r3]
 80043c8:	f002 5300 	and.w	r3, r2, #536870912	; 0x20000000
 80043cc:	663b      	str	r3, [r7, #96]	; 0x60
 80043ce:	2300      	movs	r3, #0
 80043d0:	667b      	str	r3, [r7, #100]	; 0x64
 80043d2:	e9d7 1218 	ldrd	r1, r2, [r7, #96]	; 0x60
 80043d6:	460b      	mov	r3, r1
 80043d8:	4313      	orrs	r3, r2
 80043da:	d00c      	beq.n	80043f6 <HAL_RCCEx_PeriphCLKConfig+0x101a>
  {
    if (RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE) != HAL_OK)
 80043dc:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 80043e0:	3328      	adds	r3, #40	; 0x28
 80043e2:	2102      	movs	r1, #2
 80043e4:	4618      	mov	r0, r3
 80043e6:	f000 fd09 	bl	8004dfc <RCCEx_PLL3_Config>
 80043ea:	4603      	mov	r3, r0
 80043ec:	2b00      	cmp	r3, #0
 80043ee:	d002      	beq.n	80043f6 <HAL_RCCEx_PeriphCLKConfig+0x101a>
    {
      status = HAL_ERROR;
 80043f0:	2301      	movs	r3, #1
 80043f2:	f887 3116 	strb.w	r3, [r7, #278]	; 0x116
    }
  }
#endif /* LTDC */

  /*------------------------------ RNG Configuration -------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG) == RCC_PERIPHCLK_RNG)
 80043f6:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 80043fa:	e9d3 2300 	ldrd	r2, r3, [r3]
 80043fe:	f402 3300 	and.w	r3, r2, #131072	; 0x20000
 8004402:	65bb      	str	r3, [r7, #88]	; 0x58
 8004404:	2300      	movs	r3, #0
 8004406:	65fb      	str	r3, [r7, #92]	; 0x5c
 8004408:	e9d7 1216 	ldrd	r1, r2, [r7, #88]	; 0x58
 800440c:	460b      	mov	r3, r1
 800440e:	4313      	orrs	r3, r2
 8004410:	d036      	beq.n	8004480 <HAL_RCCEx_PeriphCLKConfig+0x10a4>
  {

    switch (PeriphClkInit->RngClockSelection)
 8004412:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8004416:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8004418:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 800441c:	d018      	beq.n	8004450 <HAL_RCCEx_PeriphCLKConfig+0x1074>
 800441e:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8004422:	d811      	bhi.n	8004448 <HAL_RCCEx_PeriphCLKConfig+0x106c>
 8004424:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8004428:	d014      	beq.n	8004454 <HAL_RCCEx_PeriphCLKConfig+0x1078>
 800442a:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800442e:	d80b      	bhi.n	8004448 <HAL_RCCEx_PeriphCLKConfig+0x106c>
 8004430:	2b00      	cmp	r3, #0
 8004432:	d011      	beq.n	8004458 <HAL_RCCEx_PeriphCLKConfig+0x107c>
 8004434:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8004438:	d106      	bne.n	8004448 <HAL_RCCEx_PeriphCLKConfig+0x106c>
    {
      case RCC_RNGCLKSOURCE_PLL:     /* PLL is used as clock source for RNG*/
        /* Enable RNG Clock output generated form System RNG . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 800443a:	4bb7      	ldr	r3, [pc, #732]	; (8004718 <HAL_RCCEx_PeriphCLKConfig+0x133c>)
 800443c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800443e:	4ab6      	ldr	r2, [pc, #728]	; (8004718 <HAL_RCCEx_PeriphCLKConfig+0x133c>)
 8004440:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8004444:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* RNG clock source configuration done later after clock selection check */
        break;
 8004446:	e008      	b.n	800445a <HAL_RCCEx_PeriphCLKConfig+0x107e>
        /* HSI48 oscillator is used as source of RNG clock */
        /* RNG clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8004448:	2301      	movs	r3, #1
 800444a:	f887 3117 	strb.w	r3, [r7, #279]	; 0x117
        break;
 800444e:	e004      	b.n	800445a <HAL_RCCEx_PeriphCLKConfig+0x107e>
        break;
 8004450:	bf00      	nop
 8004452:	e002      	b.n	800445a <HAL_RCCEx_PeriphCLKConfig+0x107e>
        break;
 8004454:	bf00      	nop
 8004456:	e000      	b.n	800445a <HAL_RCCEx_PeriphCLKConfig+0x107e>
        break;
 8004458:	bf00      	nop
    }

    if (ret == HAL_OK)
 800445a:	f897 3117 	ldrb.w	r3, [r7, #279]	; 0x117
 800445e:	2b00      	cmp	r3, #0
 8004460:	d10a      	bne.n	8004478 <HAL_RCCEx_PeriphCLKConfig+0x109c>
    {
      /* Set the source of RNG clock*/
      __HAL_RCC_RNG_CONFIG(PeriphClkInit->RngClockSelection);
 8004462:	4bad      	ldr	r3, [pc, #692]	; (8004718 <HAL_RCCEx_PeriphCLKConfig+0x133c>)
 8004464:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004466:	f423 7140 	bic.w	r1, r3, #768	; 0x300
 800446a:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800446e:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8004470:	4aa9      	ldr	r2, [pc, #676]	; (8004718 <HAL_RCCEx_PeriphCLKConfig+0x133c>)
 8004472:	430b      	orrs	r3, r1
 8004474:	6553      	str	r3, [r2, #84]	; 0x54
 8004476:	e003      	b.n	8004480 <HAL_RCCEx_PeriphCLKConfig+0x10a4>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8004478:	f897 3117 	ldrb.w	r3, [r7, #279]	; 0x117
 800447c:	f887 3116 	strb.w	r3, [r7, #278]	; 0x116
    }

  }

  /*------------------------------ SWPMI1 Configuration ------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SWPMI1) == RCC_PERIPHCLK_SWPMI1)
 8004480:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8004484:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004488:	f402 1380 	and.w	r3, r2, #1048576	; 0x100000
 800448c:	653b      	str	r3, [r7, #80]	; 0x50
 800448e:	2300      	movs	r3, #0
 8004490:	657b      	str	r3, [r7, #84]	; 0x54
 8004492:	e9d7 1214 	ldrd	r1, r2, [r7, #80]	; 0x50
 8004496:	460b      	mov	r3, r1
 8004498:	4313      	orrs	r3, r2
 800449a:	d009      	beq.n	80044b0 <HAL_RCCEx_PeriphCLKConfig+0x10d4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SWPMI1CLKSOURCE(PeriphClkInit->Swpmi1ClockSelection));

    /* Configure the SWPMI1 interface clock source */
    __HAL_RCC_SWPMI1_CONFIG(PeriphClkInit->Swpmi1ClockSelection);
 800449c:	4b9e      	ldr	r3, [pc, #632]	; (8004718 <HAL_RCCEx_PeriphCLKConfig+0x133c>)
 800449e:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80044a0:	f023 4100 	bic.w	r1, r3, #2147483648	; 0x80000000
 80044a4:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 80044a8:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80044aa:	4a9b      	ldr	r2, [pc, #620]	; (8004718 <HAL_RCCEx_PeriphCLKConfig+0x133c>)
 80044ac:	430b      	orrs	r3, r1
 80044ae:	6513      	str	r3, [r2, #80]	; 0x50
    /* Configure the HRTIM1 clock source */
    __HAL_RCC_HRTIM1_CONFIG(PeriphClkInit->Hrtim1ClockSelection);
  }
#endif  /*HRTIM1*/
  /*------------------------------ DFSDM1 Configuration ------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DFSDM1) == RCC_PERIPHCLK_DFSDM1)
 80044b0:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 80044b4:	e9d3 2300 	ldrd	r2, r3, [r3]
 80044b8:	f402 1300 	and.w	r3, r2, #2097152	; 0x200000
 80044bc:	64bb      	str	r3, [r7, #72]	; 0x48
 80044be:	2300      	movs	r3, #0
 80044c0:	64fb      	str	r3, [r7, #76]	; 0x4c
 80044c2:	e9d7 1212 	ldrd	r1, r2, [r7, #72]	; 0x48
 80044c6:	460b      	mov	r3, r1
 80044c8:	4313      	orrs	r3, r2
 80044ca:	d009      	beq.n	80044e0 <HAL_RCCEx_PeriphCLKConfig+0x1104>
  {
    /* Check the parameters */
    assert_param(IS_RCC_DFSDM1CLKSOURCE(PeriphClkInit->Dfsdm1ClockSelection));

    /* Configure the DFSDM1 interface clock source */
    __HAL_RCC_DFSDM1_CONFIG(PeriphClkInit->Dfsdm1ClockSelection);
 80044cc:	4b92      	ldr	r3, [pc, #584]	; (8004718 <HAL_RCCEx_PeriphCLKConfig+0x133c>)
 80044ce:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80044d0:	f023 7180 	bic.w	r1, r3, #16777216	; 0x1000000
 80044d4:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 80044d8:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 80044da:	4a8f      	ldr	r2, [pc, #572]	; (8004718 <HAL_RCCEx_PeriphCLKConfig+0x133c>)
 80044dc:	430b      	orrs	r3, r1
 80044de:	6513      	str	r3, [r2, #80]	; 0x50
    __HAL_RCC_DFSDM2_CONFIG(PeriphClkInit->Dfsdm2ClockSelection);
  }
#endif  /* DFSDM2 */

  /*------------------------------------ TIM configuration --------------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM) == RCC_PERIPHCLK_TIM)
 80044e0:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 80044e4:	e9d3 2300 	ldrd	r2, r3, [r3]
 80044e8:	f002 4380 	and.w	r3, r2, #1073741824	; 0x40000000
 80044ec:	643b      	str	r3, [r7, #64]	; 0x40
 80044ee:	2300      	movs	r3, #0
 80044f0:	647b      	str	r3, [r7, #68]	; 0x44
 80044f2:	e9d7 1210 	ldrd	r1, r2, [r7, #64]	; 0x40
 80044f6:	460b      	mov	r3, r1
 80044f8:	4313      	orrs	r3, r2
 80044fa:	d00e      	beq.n	800451a <HAL_RCCEx_PeriphCLKConfig+0x113e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIMPRES(PeriphClkInit->TIMPresSelection));

    /* Configure Timer Prescaler */
    __HAL_RCC_TIMCLKPRESCALER(PeriphClkInit->TIMPresSelection);
 80044fc:	4b86      	ldr	r3, [pc, #536]	; (8004718 <HAL_RCCEx_PeriphCLKConfig+0x133c>)
 80044fe:	691b      	ldr	r3, [r3, #16]
 8004500:	4a85      	ldr	r2, [pc, #532]	; (8004718 <HAL_RCCEx_PeriphCLKConfig+0x133c>)
 8004502:	f423 4300 	bic.w	r3, r3, #32768	; 0x8000
 8004506:	6113      	str	r3, [r2, #16]
 8004508:	4b83      	ldr	r3, [pc, #524]	; (8004718 <HAL_RCCEx_PeriphCLKConfig+0x133c>)
 800450a:	6919      	ldr	r1, [r3, #16]
 800450c:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8004510:	f8d3 30b4 	ldr.w	r3, [r3, #180]	; 0xb4
 8004514:	4a80      	ldr	r2, [pc, #512]	; (8004718 <HAL_RCCEx_PeriphCLKConfig+0x133c>)
 8004516:	430b      	orrs	r3, r1
 8004518:	6113      	str	r3, [r2, #16]
  }

  /*------------------------------------ CKPER configuration --------------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CKPER) == RCC_PERIPHCLK_CKPER)
 800451a:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800451e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004522:	f002 4300 	and.w	r3, r2, #2147483648	; 0x80000000
 8004526:	63bb      	str	r3, [r7, #56]	; 0x38
 8004528:	2300      	movs	r3, #0
 800452a:	63fb      	str	r3, [r7, #60]	; 0x3c
 800452c:	e9d7 120e 	ldrd	r1, r2, [r7, #56]	; 0x38
 8004530:	460b      	mov	r3, r1
 8004532:	4313      	orrs	r3, r2
 8004534:	d009      	beq.n	800454a <HAL_RCCEx_PeriphCLKConfig+0x116e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CLKPSOURCE(PeriphClkInit->CkperClockSelection));

    /* Configure the CKPER clock source */
    __HAL_RCC_CLKP_CONFIG(PeriphClkInit->CkperClockSelection);
 8004536:	4b78      	ldr	r3, [pc, #480]	; (8004718 <HAL_RCCEx_PeriphCLKConfig+0x133c>)
 8004538:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800453a:	f023 5140 	bic.w	r1, r3, #805306368	; 0x30000000
 800453e:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8004542:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004544:	4a74      	ldr	r2, [pc, #464]	; (8004718 <HAL_RCCEx_PeriphCLKConfig+0x133c>)
 8004546:	430b      	orrs	r3, r1
 8004548:	64d3      	str	r3, [r2, #76]	; 0x4c
  }

  /*------------------------------ CEC Configuration ------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CEC) == RCC_PERIPHCLK_CEC)
 800454a:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800454e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004552:	f402 0300 	and.w	r3, r2, #8388608	; 0x800000
 8004556:	633b      	str	r3, [r7, #48]	; 0x30
 8004558:	2300      	movs	r3, #0
 800455a:	637b      	str	r3, [r7, #52]	; 0x34
 800455c:	e9d7 120c 	ldrd	r1, r2, [r7, #48]	; 0x30
 8004560:	460b      	mov	r3, r1
 8004562:	4313      	orrs	r3, r2
 8004564:	d00a      	beq.n	800457c <HAL_RCCEx_PeriphCLKConfig+0x11a0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CECCLKSOURCE(PeriphClkInit->CecClockSelection));

    /* Configure the CEC interface clock source */
    __HAL_RCC_CEC_CONFIG(PeriphClkInit->CecClockSelection);
 8004566:	4b6c      	ldr	r3, [pc, #432]	; (8004718 <HAL_RCCEx_PeriphCLKConfig+0x133c>)
 8004568:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800456a:	f423 0140 	bic.w	r1, r3, #12582912	; 0xc00000
 800456e:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8004572:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004576:	4a68      	ldr	r2, [pc, #416]	; (8004718 <HAL_RCCEx_PeriphCLKConfig+0x133c>)
 8004578:	430b      	orrs	r3, r1
 800457a:	6553      	str	r3, [r2, #84]	; 0x54
  }

  /*---------------------------- PLL2 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL2_DIVP) == RCC_PERIPHCLK_PLL2_DIVP)
 800457c:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8004580:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004584:	2100      	movs	r1, #0
 8004586:	62b9      	str	r1, [r7, #40]	; 0x28
 8004588:	f003 0301 	and.w	r3, r3, #1
 800458c:	62fb      	str	r3, [r7, #44]	; 0x2c
 800458e:	e9d7 120a 	ldrd	r1, r2, [r7, #40]	; 0x28
 8004592:	460b      	mov	r3, r1
 8004594:	4313      	orrs	r3, r2
 8004596:	d011      	beq.n	80045bc <HAL_RCCEx_PeriphCLKConfig+0x11e0>
  {
    ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 8004598:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800459c:	3308      	adds	r3, #8
 800459e:	2100      	movs	r1, #0
 80045a0:	4618      	mov	r0, r3
 80045a2:	f000 fb79 	bl	8004c98 <RCCEx_PLL2_Config>
 80045a6:	4603      	mov	r3, r0
 80045a8:	f887 3117 	strb.w	r3, [r7, #279]	; 0x117
    
    if (ret == HAL_OK)
 80045ac:	f897 3117 	ldrb.w	r3, [r7, #279]	; 0x117
 80045b0:	2b00      	cmp	r3, #0
 80045b2:	d003      	beq.n	80045bc <HAL_RCCEx_PeriphCLKConfig+0x11e0>
      /*Nothing to do*/
    }
    else
    {
      /* set overall return value */
      status = ret;
 80045b4:	f897 3117 	ldrb.w	r3, [r7, #279]	; 0x117
 80045b8:	f887 3116 	strb.w	r3, [r7, #278]	; 0x116
    } 
  }
  
  
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL2_DIVQ) == RCC_PERIPHCLK_PLL2_DIVQ)
 80045bc:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 80045c0:	e9d3 2300 	ldrd	r2, r3, [r3]
 80045c4:	2100      	movs	r1, #0
 80045c6:	6239      	str	r1, [r7, #32]
 80045c8:	f003 0302 	and.w	r3, r3, #2
 80045cc:	627b      	str	r3, [r7, #36]	; 0x24
 80045ce:	e9d7 1208 	ldrd	r1, r2, [r7, #32]
 80045d2:	460b      	mov	r3, r1
 80045d4:	4313      	orrs	r3, r2
 80045d6:	d011      	beq.n	80045fc <HAL_RCCEx_PeriphCLKConfig+0x1220>
  {
    ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 80045d8:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 80045dc:	3308      	adds	r3, #8
 80045de:	2101      	movs	r1, #1
 80045e0:	4618      	mov	r0, r3
 80045e2:	f000 fb59 	bl	8004c98 <RCCEx_PLL2_Config>
 80045e6:	4603      	mov	r3, r0
 80045e8:	f887 3117 	strb.w	r3, [r7, #279]	; 0x117
    
    if (ret == HAL_OK)
 80045ec:	f897 3117 	ldrb.w	r3, [r7, #279]	; 0x117
 80045f0:	2b00      	cmp	r3, #0
 80045f2:	d003      	beq.n	80045fc <HAL_RCCEx_PeriphCLKConfig+0x1220>
      /*Nothing to do*/
    }
    else
    {
      /* set overall return value */
      status = ret;
 80045f4:	f897 3117 	ldrb.w	r3, [r7, #279]	; 0x117
 80045f8:	f887 3116 	strb.w	r3, [r7, #278]	; 0x116
    }
  }
  
  
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL2_DIVR) == RCC_PERIPHCLK_PLL2_DIVR)
 80045fc:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8004600:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004604:	2100      	movs	r1, #0
 8004606:	61b9      	str	r1, [r7, #24]
 8004608:	f003 0304 	and.w	r3, r3, #4
 800460c:	61fb      	str	r3, [r7, #28]
 800460e:	e9d7 1206 	ldrd	r1, r2, [r7, #24]
 8004612:	460b      	mov	r3, r1
 8004614:	4313      	orrs	r3, r2
 8004616:	d011      	beq.n	800463c <HAL_RCCEx_PeriphCLKConfig+0x1260>
  {
    ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_R_UPDATE);
 8004618:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800461c:	3308      	adds	r3, #8
 800461e:	2102      	movs	r1, #2
 8004620:	4618      	mov	r0, r3
 8004622:	f000 fb39 	bl	8004c98 <RCCEx_PLL2_Config>
 8004626:	4603      	mov	r3, r0
 8004628:	f887 3117 	strb.w	r3, [r7, #279]	; 0x117
    
    if (ret == HAL_OK)
 800462c:	f897 3117 	ldrb.w	r3, [r7, #279]	; 0x117
 8004630:	2b00      	cmp	r3, #0
 8004632:	d003      	beq.n	800463c <HAL_RCCEx_PeriphCLKConfig+0x1260>
      /*Nothing to do*/
    }
    else
    {
      /* set overall return value */
      status = ret;
 8004634:	f897 3117 	ldrb.w	r3, [r7, #279]	; 0x117
 8004638:	f887 3116 	strb.w	r3, [r7, #278]	; 0x116
    }
  }
  

  /*---------------------------- PLL3 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL3_DIVP) == RCC_PERIPHCLK_PLL3_DIVP)
 800463c:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8004640:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004644:	2100      	movs	r1, #0
 8004646:	6139      	str	r1, [r7, #16]
 8004648:	f003 0308 	and.w	r3, r3, #8
 800464c:	617b      	str	r3, [r7, #20]
 800464e:	e9d7 1204 	ldrd	r1, r2, [r7, #16]
 8004652:	460b      	mov	r3, r1
 8004654:	4313      	orrs	r3, r2
 8004656:	d011      	beq.n	800467c <HAL_RCCEx_PeriphCLKConfig+0x12a0>
  {
    ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 8004658:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800465c:	3328      	adds	r3, #40	; 0x28
 800465e:	2100      	movs	r1, #0
 8004660:	4618      	mov	r0, r3
 8004662:	f000 fbcb 	bl	8004dfc <RCCEx_PLL3_Config>
 8004666:	4603      	mov	r3, r0
 8004668:	f887 3117 	strb.w	r3, [r7, #279]	; 0x117
  
    if (ret == HAL_OK)
 800466c:	f897 3117 	ldrb.w	r3, [r7, #279]	; 0x117
 8004670:	2b00      	cmp	r3, #0
 8004672:	d003      	beq.n	800467c <HAL_RCCEx_PeriphCLKConfig+0x12a0>
      /*Nothing to do*/
    }
    else
    {
      /* set overall return value */
      status = ret;
 8004674:	f897 3117 	ldrb.w	r3, [r7, #279]	; 0x117
 8004678:	f887 3116 	strb.w	r3, [r7, #278]	; 0x116
    }
  }
  
  
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL3_DIVQ) == RCC_PERIPHCLK_PLL3_DIVQ)
 800467c:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8004680:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004684:	2100      	movs	r1, #0
 8004686:	60b9      	str	r1, [r7, #8]
 8004688:	f003 0310 	and.w	r3, r3, #16
 800468c:	60fb      	str	r3, [r7, #12]
 800468e:	e9d7 1202 	ldrd	r1, r2, [r7, #8]
 8004692:	460b      	mov	r3, r1
 8004694:	4313      	orrs	r3, r2
 8004696:	d011      	beq.n	80046bc <HAL_RCCEx_PeriphCLKConfig+0x12e0>
  {
    ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 8004698:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800469c:	3328      	adds	r3, #40	; 0x28
 800469e:	2101      	movs	r1, #1
 80046a0:	4618      	mov	r0, r3
 80046a2:	f000 fbab 	bl	8004dfc <RCCEx_PLL3_Config>
 80046a6:	4603      	mov	r3, r0
 80046a8:	f887 3117 	strb.w	r3, [r7, #279]	; 0x117
    
    if (ret == HAL_OK)
 80046ac:	f897 3117 	ldrb.w	r3, [r7, #279]	; 0x117
 80046b0:	2b00      	cmp	r3, #0
 80046b2:	d003      	beq.n	80046bc <HAL_RCCEx_PeriphCLKConfig+0x12e0>
      /*Nothing to do*/
    }
    else
    {
      /* set overall return value */
      status = ret;
 80046b4:	f897 3117 	ldrb.w	r3, [r7, #279]	; 0x117
 80046b8:	f887 3116 	strb.w	r3, [r7, #278]	; 0x116
    }
  }
  
  
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL3_DIVR) == RCC_PERIPHCLK_PLL3_DIVR)
 80046bc:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 80046c0:	e9d3 2300 	ldrd	r2, r3, [r3]
 80046c4:	2100      	movs	r1, #0
 80046c6:	6039      	str	r1, [r7, #0]
 80046c8:	f003 0320 	and.w	r3, r3, #32
 80046cc:	607b      	str	r3, [r7, #4]
 80046ce:	e9d7 1200 	ldrd	r1, r2, [r7]
 80046d2:	460b      	mov	r3, r1
 80046d4:	4313      	orrs	r3, r2
 80046d6:	d011      	beq.n	80046fc <HAL_RCCEx_PeriphCLKConfig+0x1320>
  {
    ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 80046d8:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 80046dc:	3328      	adds	r3, #40	; 0x28
 80046de:	2102      	movs	r1, #2
 80046e0:	4618      	mov	r0, r3
 80046e2:	f000 fb8b 	bl	8004dfc <RCCEx_PLL3_Config>
 80046e6:	4603      	mov	r3, r0
 80046e8:	f887 3117 	strb.w	r3, [r7, #279]	; 0x117
    
    if (ret == HAL_OK)
 80046ec:	f897 3117 	ldrb.w	r3, [r7, #279]	; 0x117
 80046f0:	2b00      	cmp	r3, #0
 80046f2:	d003      	beq.n	80046fc <HAL_RCCEx_PeriphCLKConfig+0x1320>
      /*Nothing to do*/
    }
    else
    {
      /* set overall return value */
      status = ret;
 80046f4:	f897 3117 	ldrb.w	r3, [r7, #279]	; 0x117
 80046f8:	f887 3116 	strb.w	r3, [r7, #278]	; 0x116
    } 
  }

  if (status == HAL_OK)
 80046fc:	f897 3116 	ldrb.w	r3, [r7, #278]	; 0x116
 8004700:	2b00      	cmp	r3, #0
 8004702:	d101      	bne.n	8004708 <HAL_RCCEx_PeriphCLKConfig+0x132c>
  {
    return HAL_OK;
 8004704:	2300      	movs	r3, #0
 8004706:	e000      	b.n	800470a <HAL_RCCEx_PeriphCLKConfig+0x132e>
  }
  return HAL_ERROR;
 8004708:	2301      	movs	r3, #1
}
 800470a:	4618      	mov	r0, r3
 800470c:	f507 778c 	add.w	r7, r7, #280	; 0x118
 8004710:	46bd      	mov	sp, r7
 8004712:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8004716:	bf00      	nop
 8004718:	58024400 	.word	0x58024400

0800471c <HAL_RCCEx_GetD3PCLK1Freq>:
  * @note   Each time D3PCLK1 changes, this function must be called to update the
  *         right D3PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval D3PCLK1 frequency
  */
uint32_t HAL_RCCEx_GetD3PCLK1Freq(void)
{
 800471c:	b580      	push	{r7, lr}
 800471e:	af00      	add	r7, sp, #0
#if defined(RCC_D3CFGR_D3PPRE)
  /* Get HCLK source and Compute D3PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> (D1CorePrescTable[(RCC->D3CFGR & RCC_D3CFGR_D3PPRE) >> RCC_D3CFGR_D3PPRE_Pos] & 0x1FU));
 8004720:	f7fe fe00 	bl	8003324 <HAL_RCC_GetHCLKFreq>
 8004724:	4602      	mov	r2, r0
 8004726:	4b06      	ldr	r3, [pc, #24]	; (8004740 <HAL_RCCEx_GetD3PCLK1Freq+0x24>)
 8004728:	6a1b      	ldr	r3, [r3, #32]
 800472a:	091b      	lsrs	r3, r3, #4
 800472c:	f003 0307 	and.w	r3, r3, #7
 8004730:	4904      	ldr	r1, [pc, #16]	; (8004744 <HAL_RCCEx_GetD3PCLK1Freq+0x28>)
 8004732:	5ccb      	ldrb	r3, [r1, r3]
 8004734:	f003 031f 	and.w	r3, r3, #31
 8004738:	fa22 f303 	lsr.w	r3, r2, r3
#else
  /* Get HCLK source and Compute D3PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> (D1CorePrescTable[(RCC->SRDCFGR & RCC_SRDCFGR_SRDPPRE) >> RCC_SRDCFGR_SRDPPRE_Pos] & 0x1FU));
#endif
}
 800473c:	4618      	mov	r0, r3
 800473e:	bd80      	pop	{r7, pc}
 8004740:	58024400 	.word	0x58024400
 8004744:	0800b060 	.word	0x0800b060

08004748 <HAL_RCCEx_GetPLL2ClockFreq>:
  *         right PLL2CLK value. Otherwise, any configuration based on this function will be incorrect.
  * @param  PLL2_Clocks structure.
  * @retval None
  */
void HAL_RCCEx_GetPLL2ClockFreq(PLL2_ClocksTypeDef *PLL2_Clocks)
{
 8004748:	b480      	push	{r7}
 800474a:	b089      	sub	sp, #36	; 0x24
 800474c:	af00      	add	r7, sp, #0
 800474e:	6078      	str	r0, [r7, #4]
  float_t fracn2, pll2vco;

  /* PLL_VCO = (HSE_VALUE or HSI_VALUE or CSI_VALUE/ PLL2M) * PLL2N
     PLL2xCLK = PLL2_VCO / PLL2x
  */
  pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 8004750:	4ba1      	ldr	r3, [pc, #644]	; (80049d8 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8004752:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004754:	f003 0303 	and.w	r3, r3, #3
 8004758:	61bb      	str	r3, [r7, #24]
  pll2m = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM2) >> 12);
 800475a:	4b9f      	ldr	r3, [pc, #636]	; (80049d8 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 800475c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800475e:	0b1b      	lsrs	r3, r3, #12
 8004760:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8004764:	617b      	str	r3, [r7, #20]
  pll2fracen = (RCC->PLLCFGR & RCC_PLLCFGR_PLL2FRACEN) >> RCC_PLLCFGR_PLL2FRACEN_Pos;
 8004766:	4b9c      	ldr	r3, [pc, #624]	; (80049d8 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8004768:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800476a:	091b      	lsrs	r3, r3, #4
 800476c:	f003 0301 	and.w	r3, r3, #1
 8004770:	613b      	str	r3, [r7, #16]
  fracn2 = (float_t)(uint32_t)(pll2fracen * ((RCC->PLL2FRACR & RCC_PLL2FRACR_FRACN2) >> 3));
 8004772:	4b99      	ldr	r3, [pc, #612]	; (80049d8 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8004774:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004776:	08db      	lsrs	r3, r3, #3
 8004778:	f3c3 030c 	ubfx	r3, r3, #0, #13
 800477c:	693a      	ldr	r2, [r7, #16]
 800477e:	fb02 f303 	mul.w	r3, r2, r3
 8004782:	ee07 3a90 	vmov	s15, r3
 8004786:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800478a:	edc7 7a03 	vstr	s15, [r7, #12]

  if (pll2m != 0U)
 800478e:	697b      	ldr	r3, [r7, #20]
 8004790:	2b00      	cmp	r3, #0
 8004792:	f000 8111 	beq.w	80049b8 <HAL_RCCEx_GetPLL2ClockFreq+0x270>
  {
    switch (pllsource)
 8004796:	69bb      	ldr	r3, [r7, #24]
 8004798:	2b02      	cmp	r3, #2
 800479a:	f000 8083 	beq.w	80048a4 <HAL_RCCEx_GetPLL2ClockFreq+0x15c>
 800479e:	69bb      	ldr	r3, [r7, #24]
 80047a0:	2b02      	cmp	r3, #2
 80047a2:	f200 80a1 	bhi.w	80048e8 <HAL_RCCEx_GetPLL2ClockFreq+0x1a0>
 80047a6:	69bb      	ldr	r3, [r7, #24]
 80047a8:	2b00      	cmp	r3, #0
 80047aa:	d003      	beq.n	80047b4 <HAL_RCCEx_GetPLL2ClockFreq+0x6c>
 80047ac:	69bb      	ldr	r3, [r7, #24]
 80047ae:	2b01      	cmp	r3, #1
 80047b0:	d056      	beq.n	8004860 <HAL_RCCEx_GetPLL2ClockFreq+0x118>
 80047b2:	e099      	b.n	80048e8 <HAL_RCCEx_GetPLL2ClockFreq+0x1a0>
    {

      case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */

        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 80047b4:	4b88      	ldr	r3, [pc, #544]	; (80049d8 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 80047b6:	681b      	ldr	r3, [r3, #0]
 80047b8:	f003 0320 	and.w	r3, r3, #32
 80047bc:	2b00      	cmp	r3, #0
 80047be:	d02d      	beq.n	800481c <HAL_RCCEx_GetPLL2ClockFreq+0xd4>
        {
          hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 80047c0:	4b85      	ldr	r3, [pc, #532]	; (80049d8 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 80047c2:	681b      	ldr	r3, [r3, #0]
 80047c4:	08db      	lsrs	r3, r3, #3
 80047c6:	f003 0303 	and.w	r3, r3, #3
 80047ca:	4a84      	ldr	r2, [pc, #528]	; (80049dc <HAL_RCCEx_GetPLL2ClockFreq+0x294>)
 80047cc:	fa22 f303 	lsr.w	r3, r2, r3
 80047d0:	60bb      	str	r3, [r7, #8]
          pll2vco = ((float_t)hsivalue / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2 / (float_t)0x2000) + (float_t)1);
 80047d2:	68bb      	ldr	r3, [r7, #8]
 80047d4:	ee07 3a90 	vmov	s15, r3
 80047d8:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80047dc:	697b      	ldr	r3, [r7, #20]
 80047de:	ee07 3a90 	vmov	s15, r3
 80047e2:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80047e6:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 80047ea:	4b7b      	ldr	r3, [pc, #492]	; (80049d8 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 80047ec:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80047ee:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80047f2:	ee07 3a90 	vmov	s15, r3
 80047f6:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80047fa:	ed97 6a03 	vldr	s12, [r7, #12]
 80047fe:	eddf 5a78 	vldr	s11, [pc, #480]	; 80049e0 <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 8004802:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8004806:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800480a:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800480e:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8004812:	ee67 7a27 	vmul.f32	s15, s14, s15
 8004816:	edc7 7a07 	vstr	s15, [r7, #28]
        }
        else
        {
          pll2vco = ((float_t)HSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2 / (float_t)0x2000) + (float_t)1);
        }
        break;
 800481a:	e087      	b.n	800492c <HAL_RCCEx_GetPLL2ClockFreq+0x1e4>
          pll2vco = ((float_t)HSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2 / (float_t)0x2000) + (float_t)1);
 800481c:	697b      	ldr	r3, [r7, #20]
 800481e:	ee07 3a90 	vmov	s15, r3
 8004822:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8004826:	eddf 6a6f 	vldr	s13, [pc, #444]	; 80049e4 <HAL_RCCEx_GetPLL2ClockFreq+0x29c>
 800482a:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800482e:	4b6a      	ldr	r3, [pc, #424]	; (80049d8 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8004830:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004832:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8004836:	ee07 3a90 	vmov	s15, r3
 800483a:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800483e:	ed97 6a03 	vldr	s12, [r7, #12]
 8004842:	eddf 5a67 	vldr	s11, [pc, #412]	; 80049e0 <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 8004846:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800484a:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800484e:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8004852:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8004856:	ee67 7a27 	vmul.f32	s15, s14, s15
 800485a:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 800485e:	e065      	b.n	800492c <HAL_RCCEx_GetPLL2ClockFreq+0x1e4>

      case RCC_PLLSOURCE_CSI:  /* CSI used as PLL clock source */
        pll2vco = ((float_t)CSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2 / (float_t)0x2000) + (float_t)1);
 8004860:	697b      	ldr	r3, [r7, #20]
 8004862:	ee07 3a90 	vmov	s15, r3
 8004866:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800486a:	eddf 6a5f 	vldr	s13, [pc, #380]	; 80049e8 <HAL_RCCEx_GetPLL2ClockFreq+0x2a0>
 800486e:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8004872:	4b59      	ldr	r3, [pc, #356]	; (80049d8 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8004874:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004876:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800487a:	ee07 3a90 	vmov	s15, r3
 800487e:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8004882:	ed97 6a03 	vldr	s12, [r7, #12]
 8004886:	eddf 5a56 	vldr	s11, [pc, #344]	; 80049e0 <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 800488a:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800488e:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8004892:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8004896:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800489a:	ee67 7a27 	vmul.f32	s15, s14, s15
 800489e:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 80048a2:	e043      	b.n	800492c <HAL_RCCEx_GetPLL2ClockFreq+0x1e4>

      case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
        pll2vco = ((float_t)HSE_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2 / (float_t)0x2000) + (float_t)1);
 80048a4:	697b      	ldr	r3, [r7, #20]
 80048a6:	ee07 3a90 	vmov	s15, r3
 80048aa:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80048ae:	eddf 6a4f 	vldr	s13, [pc, #316]	; 80049ec <HAL_RCCEx_GetPLL2ClockFreq+0x2a4>
 80048b2:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 80048b6:	4b48      	ldr	r3, [pc, #288]	; (80049d8 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 80048b8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80048ba:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80048be:	ee07 3a90 	vmov	s15, r3
 80048c2:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80048c6:	ed97 6a03 	vldr	s12, [r7, #12]
 80048ca:	eddf 5a45 	vldr	s11, [pc, #276]	; 80049e0 <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 80048ce:	eec6 7a25 	vdiv.f32	s15, s12, s11
 80048d2:	ee76 7aa7 	vadd.f32	s15, s13, s15
 80048d6:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 80048da:	ee77 7aa6 	vadd.f32	s15, s15, s13
 80048de:	ee67 7a27 	vmul.f32	s15, s14, s15
 80048e2:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 80048e6:	e021      	b.n	800492c <HAL_RCCEx_GetPLL2ClockFreq+0x1e4>

      default:
        pll2vco = ((float_t)CSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2 / (float_t)0x2000) + (float_t)1);
 80048e8:	697b      	ldr	r3, [r7, #20]
 80048ea:	ee07 3a90 	vmov	s15, r3
 80048ee:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80048f2:	eddf 6a3d 	vldr	s13, [pc, #244]	; 80049e8 <HAL_RCCEx_GetPLL2ClockFreq+0x2a0>
 80048f6:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 80048fa:	4b37      	ldr	r3, [pc, #220]	; (80049d8 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 80048fc:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80048fe:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8004902:	ee07 3a90 	vmov	s15, r3
 8004906:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800490a:	ed97 6a03 	vldr	s12, [r7, #12]
 800490e:	eddf 5a34 	vldr	s11, [pc, #208]	; 80049e0 <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 8004912:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8004916:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800491a:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800491e:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8004922:	ee67 7a27 	vmul.f32	s15, s14, s15
 8004926:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 800492a:	bf00      	nop
    }
    PLL2_Clocks->PLL2_P_Frequency = (uint32_t)(float_t)(pll2vco / ((float_t)(uint32_t)((RCC->PLL2DIVR & RCC_PLL2DIVR_P2) >> 9)  + (float_t)1)) ;
 800492c:	4b2a      	ldr	r3, [pc, #168]	; (80049d8 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 800492e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004930:	0a5b      	lsrs	r3, r3, #9
 8004932:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8004936:	ee07 3a90 	vmov	s15, r3
 800493a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800493e:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 8004942:	ee37 7a87 	vadd.f32	s14, s15, s14
 8004946:	edd7 6a07 	vldr	s13, [r7, #28]
 800494a:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800494e:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8004952:	ee17 2a90 	vmov	r2, s15
 8004956:	687b      	ldr	r3, [r7, #4]
 8004958:	601a      	str	r2, [r3, #0]
    PLL2_Clocks->PLL2_Q_Frequency = (uint32_t)(float_t)(pll2vco / ((float_t)(uint32_t)((RCC->PLL2DIVR & RCC_PLL2DIVR_Q2) >> 16) + (float_t)1)) ;
 800495a:	4b1f      	ldr	r3, [pc, #124]	; (80049d8 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 800495c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800495e:	0c1b      	lsrs	r3, r3, #16
 8004960:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8004964:	ee07 3a90 	vmov	s15, r3
 8004968:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800496c:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 8004970:	ee37 7a87 	vadd.f32	s14, s15, s14
 8004974:	edd7 6a07 	vldr	s13, [r7, #28]
 8004978:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800497c:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8004980:	ee17 2a90 	vmov	r2, s15
 8004984:	687b      	ldr	r3, [r7, #4]
 8004986:	605a      	str	r2, [r3, #4]
    PLL2_Clocks->PLL2_R_Frequency = (uint32_t)(float_t)(pll2vco / ((float_t)(uint32_t)((RCC->PLL2DIVR & RCC_PLL2DIVR_R2) >> 24) + (float_t)1)) ;
 8004988:	4b13      	ldr	r3, [pc, #76]	; (80049d8 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 800498a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800498c:	0e1b      	lsrs	r3, r3, #24
 800498e:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8004992:	ee07 3a90 	vmov	s15, r3
 8004996:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800499a:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 800499e:	ee37 7a87 	vadd.f32	s14, s15, s14
 80049a2:	edd7 6a07 	vldr	s13, [r7, #28]
 80049a6:	eec6 7a87 	vdiv.f32	s15, s13, s14
 80049aa:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 80049ae:	ee17 2a90 	vmov	r2, s15
 80049b2:	687b      	ldr	r3, [r7, #4]
 80049b4:	609a      	str	r2, [r3, #8]
  {
    PLL2_Clocks->PLL2_P_Frequency = 0U;
    PLL2_Clocks->PLL2_Q_Frequency = 0U;
    PLL2_Clocks->PLL2_R_Frequency = 0U;
  }
}
 80049b6:	e008      	b.n	80049ca <HAL_RCCEx_GetPLL2ClockFreq+0x282>
    PLL2_Clocks->PLL2_P_Frequency = 0U;
 80049b8:	687b      	ldr	r3, [r7, #4]
 80049ba:	2200      	movs	r2, #0
 80049bc:	601a      	str	r2, [r3, #0]
    PLL2_Clocks->PLL2_Q_Frequency = 0U;
 80049be:	687b      	ldr	r3, [r7, #4]
 80049c0:	2200      	movs	r2, #0
 80049c2:	605a      	str	r2, [r3, #4]
    PLL2_Clocks->PLL2_R_Frequency = 0U;
 80049c4:	687b      	ldr	r3, [r7, #4]
 80049c6:	2200      	movs	r2, #0
 80049c8:	609a      	str	r2, [r3, #8]
}
 80049ca:	bf00      	nop
 80049cc:	3724      	adds	r7, #36	; 0x24
 80049ce:	46bd      	mov	sp, r7
 80049d0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80049d4:	4770      	bx	lr
 80049d6:	bf00      	nop
 80049d8:	58024400 	.word	0x58024400
 80049dc:	03d09000 	.word	0x03d09000
 80049e0:	46000000 	.word	0x46000000
 80049e4:	4c742400 	.word	0x4c742400
 80049e8:	4a742400 	.word	0x4a742400
 80049ec:	4af42400 	.word	0x4af42400

080049f0 <HAL_RCCEx_GetPLL3ClockFreq>:
  *         right PLL3CLK value. Otherwise, any configuration based on this function will be incorrect.
  * @param  PLL3_Clocks structure.
  * @retval None
  */
void HAL_RCCEx_GetPLL3ClockFreq(PLL3_ClocksTypeDef *PLL3_Clocks)
{
 80049f0:	b480      	push	{r7}
 80049f2:	b089      	sub	sp, #36	; 0x24
 80049f4:	af00      	add	r7, sp, #0
 80049f6:	6078      	str	r0, [r7, #4]
  float_t fracn3, pll3vco;

  /* PLL3_VCO = (HSE_VALUE or HSI_VALUE or CSI_VALUE/ PLL3M) * PLL3N
     PLL3xCLK = PLL3_VCO / PLLxR
  */
  pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 80049f8:	4ba1      	ldr	r3, [pc, #644]	; (8004c80 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 80049fa:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80049fc:	f003 0303 	and.w	r3, r3, #3
 8004a00:	61bb      	str	r3, [r7, #24]
  pll3m = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM3) >> 20)  ;
 8004a02:	4b9f      	ldr	r3, [pc, #636]	; (8004c80 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8004a04:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004a06:	0d1b      	lsrs	r3, r3, #20
 8004a08:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8004a0c:	617b      	str	r3, [r7, #20]
  pll3fracen = (RCC->PLLCFGR & RCC_PLLCFGR_PLL3FRACEN) >> RCC_PLLCFGR_PLL3FRACEN_Pos;
 8004a0e:	4b9c      	ldr	r3, [pc, #624]	; (8004c80 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8004a10:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004a12:	0a1b      	lsrs	r3, r3, #8
 8004a14:	f003 0301 	and.w	r3, r3, #1
 8004a18:	613b      	str	r3, [r7, #16]
  fracn3 = (float_t)(uint32_t)(pll3fracen * ((RCC->PLL3FRACR & RCC_PLL3FRACR_FRACN3) >> 3));
 8004a1a:	4b99      	ldr	r3, [pc, #612]	; (8004c80 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8004a1c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004a1e:	08db      	lsrs	r3, r3, #3
 8004a20:	f3c3 030c 	ubfx	r3, r3, #0, #13
 8004a24:	693a      	ldr	r2, [r7, #16]
 8004a26:	fb02 f303 	mul.w	r3, r2, r3
 8004a2a:	ee07 3a90 	vmov	s15, r3
 8004a2e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8004a32:	edc7 7a03 	vstr	s15, [r7, #12]

  if (pll3m != 0U)
 8004a36:	697b      	ldr	r3, [r7, #20]
 8004a38:	2b00      	cmp	r3, #0
 8004a3a:	f000 8111 	beq.w	8004c60 <HAL_RCCEx_GetPLL3ClockFreq+0x270>
  {
    switch (pllsource)
 8004a3e:	69bb      	ldr	r3, [r7, #24]
 8004a40:	2b02      	cmp	r3, #2
 8004a42:	f000 8083 	beq.w	8004b4c <HAL_RCCEx_GetPLL3ClockFreq+0x15c>
 8004a46:	69bb      	ldr	r3, [r7, #24]
 8004a48:	2b02      	cmp	r3, #2
 8004a4a:	f200 80a1 	bhi.w	8004b90 <HAL_RCCEx_GetPLL3ClockFreq+0x1a0>
 8004a4e:	69bb      	ldr	r3, [r7, #24]
 8004a50:	2b00      	cmp	r3, #0
 8004a52:	d003      	beq.n	8004a5c <HAL_RCCEx_GetPLL3ClockFreq+0x6c>
 8004a54:	69bb      	ldr	r3, [r7, #24]
 8004a56:	2b01      	cmp	r3, #1
 8004a58:	d056      	beq.n	8004b08 <HAL_RCCEx_GetPLL3ClockFreq+0x118>
 8004a5a:	e099      	b.n	8004b90 <HAL_RCCEx_GetPLL3ClockFreq+0x1a0>
    {
      case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */

        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8004a5c:	4b88      	ldr	r3, [pc, #544]	; (8004c80 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8004a5e:	681b      	ldr	r3, [r3, #0]
 8004a60:	f003 0320 	and.w	r3, r3, #32
 8004a64:	2b00      	cmp	r3, #0
 8004a66:	d02d      	beq.n	8004ac4 <HAL_RCCEx_GetPLL3ClockFreq+0xd4>
        {
          hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 8004a68:	4b85      	ldr	r3, [pc, #532]	; (8004c80 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8004a6a:	681b      	ldr	r3, [r3, #0]
 8004a6c:	08db      	lsrs	r3, r3, #3
 8004a6e:	f003 0303 	and.w	r3, r3, #3
 8004a72:	4a84      	ldr	r2, [pc, #528]	; (8004c84 <HAL_RCCEx_GetPLL3ClockFreq+0x294>)
 8004a74:	fa22 f303 	lsr.w	r3, r2, r3
 8004a78:	60bb      	str	r3, [r7, #8]
          pll3vco = ((float_t)hsivalue / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3 / (float_t)0x2000) + (float_t)1);
 8004a7a:	68bb      	ldr	r3, [r7, #8]
 8004a7c:	ee07 3a90 	vmov	s15, r3
 8004a80:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8004a84:	697b      	ldr	r3, [r7, #20]
 8004a86:	ee07 3a90 	vmov	s15, r3
 8004a8a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8004a8e:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8004a92:	4b7b      	ldr	r3, [pc, #492]	; (8004c80 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8004a94:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004a96:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8004a9a:	ee07 3a90 	vmov	s15, r3
 8004a9e:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8004aa2:	ed97 6a03 	vldr	s12, [r7, #12]
 8004aa6:	eddf 5a78 	vldr	s11, [pc, #480]	; 8004c88 <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 8004aaa:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8004aae:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8004ab2:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8004ab6:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8004aba:	ee67 7a27 	vmul.f32	s15, s14, s15
 8004abe:	edc7 7a07 	vstr	s15, [r7, #28]
        }
        else
        {
          pll3vco = ((float_t)HSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3 / (float_t)0x2000) + (float_t)1);
        }
        break;
 8004ac2:	e087      	b.n	8004bd4 <HAL_RCCEx_GetPLL3ClockFreq+0x1e4>
          pll3vco = ((float_t)HSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3 / (float_t)0x2000) + (float_t)1);
 8004ac4:	697b      	ldr	r3, [r7, #20]
 8004ac6:	ee07 3a90 	vmov	s15, r3
 8004aca:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8004ace:	eddf 6a6f 	vldr	s13, [pc, #444]	; 8004c8c <HAL_RCCEx_GetPLL3ClockFreq+0x29c>
 8004ad2:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8004ad6:	4b6a      	ldr	r3, [pc, #424]	; (8004c80 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8004ad8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004ada:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8004ade:	ee07 3a90 	vmov	s15, r3
 8004ae2:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8004ae6:	ed97 6a03 	vldr	s12, [r7, #12]
 8004aea:	eddf 5a67 	vldr	s11, [pc, #412]	; 8004c88 <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 8004aee:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8004af2:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8004af6:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8004afa:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8004afe:	ee67 7a27 	vmul.f32	s15, s14, s15
 8004b02:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 8004b06:	e065      	b.n	8004bd4 <HAL_RCCEx_GetPLL3ClockFreq+0x1e4>
      case RCC_PLLSOURCE_CSI:  /* CSI used as PLL clock source */
        pll3vco = ((float_t)CSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3 / (float_t)0x2000) + (float_t)1);
 8004b08:	697b      	ldr	r3, [r7, #20]
 8004b0a:	ee07 3a90 	vmov	s15, r3
 8004b0e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8004b12:	eddf 6a5f 	vldr	s13, [pc, #380]	; 8004c90 <HAL_RCCEx_GetPLL3ClockFreq+0x2a0>
 8004b16:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8004b1a:	4b59      	ldr	r3, [pc, #356]	; (8004c80 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8004b1c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004b1e:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8004b22:	ee07 3a90 	vmov	s15, r3
 8004b26:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8004b2a:	ed97 6a03 	vldr	s12, [r7, #12]
 8004b2e:	eddf 5a56 	vldr	s11, [pc, #344]	; 8004c88 <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 8004b32:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8004b36:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8004b3a:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8004b3e:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8004b42:	ee67 7a27 	vmul.f32	s15, s14, s15
 8004b46:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 8004b4a:	e043      	b.n	8004bd4 <HAL_RCCEx_GetPLL3ClockFreq+0x1e4>

      case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
        pll3vco = ((float_t)HSE_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3 / (float_t)0x2000) + (float_t)1);
 8004b4c:	697b      	ldr	r3, [r7, #20]
 8004b4e:	ee07 3a90 	vmov	s15, r3
 8004b52:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8004b56:	eddf 6a4f 	vldr	s13, [pc, #316]	; 8004c94 <HAL_RCCEx_GetPLL3ClockFreq+0x2a4>
 8004b5a:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8004b5e:	4b48      	ldr	r3, [pc, #288]	; (8004c80 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8004b60:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004b62:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8004b66:	ee07 3a90 	vmov	s15, r3
 8004b6a:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8004b6e:	ed97 6a03 	vldr	s12, [r7, #12]
 8004b72:	eddf 5a45 	vldr	s11, [pc, #276]	; 8004c88 <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 8004b76:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8004b7a:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8004b7e:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8004b82:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8004b86:	ee67 7a27 	vmul.f32	s15, s14, s15
 8004b8a:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 8004b8e:	e021      	b.n	8004bd4 <HAL_RCCEx_GetPLL3ClockFreq+0x1e4>

      default:
        pll3vco = ((float_t)CSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3 / (float_t)0x2000) + (float_t)1);
 8004b90:	697b      	ldr	r3, [r7, #20]
 8004b92:	ee07 3a90 	vmov	s15, r3
 8004b96:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8004b9a:	eddf 6a3d 	vldr	s13, [pc, #244]	; 8004c90 <HAL_RCCEx_GetPLL3ClockFreq+0x2a0>
 8004b9e:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8004ba2:	4b37      	ldr	r3, [pc, #220]	; (8004c80 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8004ba4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004ba6:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8004baa:	ee07 3a90 	vmov	s15, r3
 8004bae:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8004bb2:	ed97 6a03 	vldr	s12, [r7, #12]
 8004bb6:	eddf 5a34 	vldr	s11, [pc, #208]	; 8004c88 <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 8004bba:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8004bbe:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8004bc2:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8004bc6:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8004bca:	ee67 7a27 	vmul.f32	s15, s14, s15
 8004bce:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 8004bd2:	bf00      	nop
    }
    PLL3_Clocks->PLL3_P_Frequency = (uint32_t)(float_t)(pll3vco / ((float_t)(uint32_t)((RCC->PLL3DIVR & RCC_PLL3DIVR_P3) >> 9)  + (float_t)1)) ;
 8004bd4:	4b2a      	ldr	r3, [pc, #168]	; (8004c80 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8004bd6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004bd8:	0a5b      	lsrs	r3, r3, #9
 8004bda:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8004bde:	ee07 3a90 	vmov	s15, r3
 8004be2:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8004be6:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 8004bea:	ee37 7a87 	vadd.f32	s14, s15, s14
 8004bee:	edd7 6a07 	vldr	s13, [r7, #28]
 8004bf2:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8004bf6:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8004bfa:	ee17 2a90 	vmov	r2, s15
 8004bfe:	687b      	ldr	r3, [r7, #4]
 8004c00:	601a      	str	r2, [r3, #0]
    PLL3_Clocks->PLL3_Q_Frequency = (uint32_t)(float_t)(pll3vco / ((float_t)(uint32_t)((RCC->PLL3DIVR & RCC_PLL3DIVR_Q3) >> 16) + (float_t)1)) ;
 8004c02:	4b1f      	ldr	r3, [pc, #124]	; (8004c80 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8004c04:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004c06:	0c1b      	lsrs	r3, r3, #16
 8004c08:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8004c0c:	ee07 3a90 	vmov	s15, r3
 8004c10:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8004c14:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 8004c18:	ee37 7a87 	vadd.f32	s14, s15, s14
 8004c1c:	edd7 6a07 	vldr	s13, [r7, #28]
 8004c20:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8004c24:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8004c28:	ee17 2a90 	vmov	r2, s15
 8004c2c:	687b      	ldr	r3, [r7, #4]
 8004c2e:	605a      	str	r2, [r3, #4]
    PLL3_Clocks->PLL3_R_Frequency = (uint32_t)(float_t)(pll3vco / ((float_t)(uint32_t)((RCC->PLL3DIVR & RCC_PLL3DIVR_R3) >> 24) + (float_t)1)) ;
 8004c30:	4b13      	ldr	r3, [pc, #76]	; (8004c80 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8004c32:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004c34:	0e1b      	lsrs	r3, r3, #24
 8004c36:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8004c3a:	ee07 3a90 	vmov	s15, r3
 8004c3e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8004c42:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 8004c46:	ee37 7a87 	vadd.f32	s14, s15, s14
 8004c4a:	edd7 6a07 	vldr	s13, [r7, #28]
 8004c4e:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8004c52:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8004c56:	ee17 2a90 	vmov	r2, s15
 8004c5a:	687b      	ldr	r3, [r7, #4]
 8004c5c:	609a      	str	r2, [r3, #8]
    PLL3_Clocks->PLL3_P_Frequency = 0U;
    PLL3_Clocks->PLL3_Q_Frequency = 0U;
    PLL3_Clocks->PLL3_R_Frequency = 0U;
  }

}
 8004c5e:	e008      	b.n	8004c72 <HAL_RCCEx_GetPLL3ClockFreq+0x282>
    PLL3_Clocks->PLL3_P_Frequency = 0U;
 8004c60:	687b      	ldr	r3, [r7, #4]
 8004c62:	2200      	movs	r2, #0
 8004c64:	601a      	str	r2, [r3, #0]
    PLL3_Clocks->PLL3_Q_Frequency = 0U;
 8004c66:	687b      	ldr	r3, [r7, #4]
 8004c68:	2200      	movs	r2, #0
 8004c6a:	605a      	str	r2, [r3, #4]
    PLL3_Clocks->PLL3_R_Frequency = 0U;
 8004c6c:	687b      	ldr	r3, [r7, #4]
 8004c6e:	2200      	movs	r2, #0
 8004c70:	609a      	str	r2, [r3, #8]
}
 8004c72:	bf00      	nop
 8004c74:	3724      	adds	r7, #36	; 0x24
 8004c76:	46bd      	mov	sp, r7
 8004c78:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004c7c:	4770      	bx	lr
 8004c7e:	bf00      	nop
 8004c80:	58024400 	.word	0x58024400
 8004c84:	03d09000 	.word	0x03d09000
 8004c88:	46000000 	.word	0x46000000
 8004c8c:	4c742400 	.word	0x4c742400
 8004c90:	4a742400 	.word	0x4a742400
 8004c94:	4af42400 	.word	0x4af42400

08004c98 <RCCEx_PLL2_Config>:
  * @note   PLL2 is temporary disabled to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLL2_Config(RCC_PLL2InitTypeDef *pll2, uint32_t Divider)
{
 8004c98:	b580      	push	{r7, lr}
 8004c9a:	b084      	sub	sp, #16
 8004c9c:	af00      	add	r7, sp, #0
 8004c9e:	6078      	str	r0, [r7, #4]
 8004ca0:	6039      	str	r1, [r7, #0]

  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 8004ca2:	2300      	movs	r3, #0
 8004ca4:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLL2RGE_VALUE(pll2->PLL2RGE));
  assert_param(IS_RCC_PLL2VCO_VALUE(pll2->PLL2VCOSEL));
  assert_param(IS_RCC_PLLFRACN_VALUE(pll2->PLL2FRACN));

  /* Check that PLL2 OSC clock source is already set */
  if (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_NONE)
 8004ca6:	4b53      	ldr	r3, [pc, #332]	; (8004df4 <RCCEx_PLL2_Config+0x15c>)
 8004ca8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004caa:	f003 0303 	and.w	r3, r3, #3
 8004cae:	2b03      	cmp	r3, #3
 8004cb0:	d101      	bne.n	8004cb6 <RCCEx_PLL2_Config+0x1e>
  {
    return HAL_ERROR;
 8004cb2:	2301      	movs	r3, #1
 8004cb4:	e099      	b.n	8004dea <RCCEx_PLL2_Config+0x152>


  else
  {
    /* Disable  PLL2. */
    __HAL_RCC_PLL2_DISABLE();
 8004cb6:	4b4f      	ldr	r3, [pc, #316]	; (8004df4 <RCCEx_PLL2_Config+0x15c>)
 8004cb8:	681b      	ldr	r3, [r3, #0]
 8004cba:	4a4e      	ldr	r2, [pc, #312]	; (8004df4 <RCCEx_PLL2_Config+0x15c>)
 8004cbc:	f023 6380 	bic.w	r3, r3, #67108864	; 0x4000000
 8004cc0:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8004cc2:	f7fc fc85 	bl	80015d0 <HAL_GetTick>
 8004cc6:	60b8      	str	r0, [r7, #8]

    /* Wait till PLL is disabled */
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) != 0U)
 8004cc8:	e008      	b.n	8004cdc <RCCEx_PLL2_Config+0x44>
    {
      if ((HAL_GetTick() - tickstart) > PLL2_TIMEOUT_VALUE)
 8004cca:	f7fc fc81 	bl	80015d0 <HAL_GetTick>
 8004cce:	4602      	mov	r2, r0
 8004cd0:	68bb      	ldr	r3, [r7, #8]
 8004cd2:	1ad3      	subs	r3, r2, r3
 8004cd4:	2b02      	cmp	r3, #2
 8004cd6:	d901      	bls.n	8004cdc <RCCEx_PLL2_Config+0x44>
      {
        return HAL_TIMEOUT;
 8004cd8:	2303      	movs	r3, #3
 8004cda:	e086      	b.n	8004dea <RCCEx_PLL2_Config+0x152>
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) != 0U)
 8004cdc:	4b45      	ldr	r3, [pc, #276]	; (8004df4 <RCCEx_PLL2_Config+0x15c>)
 8004cde:	681b      	ldr	r3, [r3, #0]
 8004ce0:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8004ce4:	2b00      	cmp	r3, #0
 8004ce6:	d1f0      	bne.n	8004cca <RCCEx_PLL2_Config+0x32>
      }
    }

    /* Configure PLL2 multiplication and division factors. */
    __HAL_RCC_PLL2_CONFIG(pll2->PLL2M,
 8004ce8:	4b42      	ldr	r3, [pc, #264]	; (8004df4 <RCCEx_PLL2_Config+0x15c>)
 8004cea:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004cec:	f423 327c 	bic.w	r2, r3, #258048	; 0x3f000
 8004cf0:	687b      	ldr	r3, [r7, #4]
 8004cf2:	681b      	ldr	r3, [r3, #0]
 8004cf4:	031b      	lsls	r3, r3, #12
 8004cf6:	493f      	ldr	r1, [pc, #252]	; (8004df4 <RCCEx_PLL2_Config+0x15c>)
 8004cf8:	4313      	orrs	r3, r2
 8004cfa:	628b      	str	r3, [r1, #40]	; 0x28
 8004cfc:	687b      	ldr	r3, [r7, #4]
 8004cfe:	685b      	ldr	r3, [r3, #4]
 8004d00:	3b01      	subs	r3, #1
 8004d02:	f3c3 0208 	ubfx	r2, r3, #0, #9
 8004d06:	687b      	ldr	r3, [r7, #4]
 8004d08:	689b      	ldr	r3, [r3, #8]
 8004d0a:	3b01      	subs	r3, #1
 8004d0c:	025b      	lsls	r3, r3, #9
 8004d0e:	b29b      	uxth	r3, r3
 8004d10:	431a      	orrs	r2, r3
 8004d12:	687b      	ldr	r3, [r7, #4]
 8004d14:	68db      	ldr	r3, [r3, #12]
 8004d16:	3b01      	subs	r3, #1
 8004d18:	041b      	lsls	r3, r3, #16
 8004d1a:	f403 03fe 	and.w	r3, r3, #8323072	; 0x7f0000
 8004d1e:	431a      	orrs	r2, r3
 8004d20:	687b      	ldr	r3, [r7, #4]
 8004d22:	691b      	ldr	r3, [r3, #16]
 8004d24:	3b01      	subs	r3, #1
 8004d26:	061b      	lsls	r3, r3, #24
 8004d28:	f003 43fe 	and.w	r3, r3, #2130706432	; 0x7f000000
 8004d2c:	4931      	ldr	r1, [pc, #196]	; (8004df4 <RCCEx_PLL2_Config+0x15c>)
 8004d2e:	4313      	orrs	r3, r2
 8004d30:	638b      	str	r3, [r1, #56]	; 0x38
                          pll2->PLL2P,
                          pll2->PLL2Q,
                          pll2->PLL2R);

    /* Select PLL2 input reference frequency range: VCI */
    __HAL_RCC_PLL2_VCIRANGE(pll2->PLL2RGE) ;
 8004d32:	4b30      	ldr	r3, [pc, #192]	; (8004df4 <RCCEx_PLL2_Config+0x15c>)
 8004d34:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004d36:	f023 02c0 	bic.w	r2, r3, #192	; 0xc0
 8004d3a:	687b      	ldr	r3, [r7, #4]
 8004d3c:	695b      	ldr	r3, [r3, #20]
 8004d3e:	492d      	ldr	r1, [pc, #180]	; (8004df4 <RCCEx_PLL2_Config+0x15c>)
 8004d40:	4313      	orrs	r3, r2
 8004d42:	62cb      	str	r3, [r1, #44]	; 0x2c

    /* Select PLL2 output frequency range : VCO */
    __HAL_RCC_PLL2_VCORANGE(pll2->PLL2VCOSEL) ;
 8004d44:	4b2b      	ldr	r3, [pc, #172]	; (8004df4 <RCCEx_PLL2_Config+0x15c>)
 8004d46:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004d48:	f023 0220 	bic.w	r2, r3, #32
 8004d4c:	687b      	ldr	r3, [r7, #4]
 8004d4e:	699b      	ldr	r3, [r3, #24]
 8004d50:	4928      	ldr	r1, [pc, #160]	; (8004df4 <RCCEx_PLL2_Config+0x15c>)
 8004d52:	4313      	orrs	r3, r2
 8004d54:	62cb      	str	r3, [r1, #44]	; 0x2c

    /* Disable PLL2FRACN . */
    __HAL_RCC_PLL2FRACN_DISABLE();
 8004d56:	4b27      	ldr	r3, [pc, #156]	; (8004df4 <RCCEx_PLL2_Config+0x15c>)
 8004d58:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004d5a:	4a26      	ldr	r2, [pc, #152]	; (8004df4 <RCCEx_PLL2_Config+0x15c>)
 8004d5c:	f023 0310 	bic.w	r3, r3, #16
 8004d60:	62d3      	str	r3, [r2, #44]	; 0x2c

    /* Configures PLL2 clock Fractional Part Of The Multiplication Factor */
    __HAL_RCC_PLL2FRACN_CONFIG(pll2->PLL2FRACN);
 8004d62:	4b24      	ldr	r3, [pc, #144]	; (8004df4 <RCCEx_PLL2_Config+0x15c>)
 8004d64:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8004d66:	4b24      	ldr	r3, [pc, #144]	; (8004df8 <RCCEx_PLL2_Config+0x160>)
 8004d68:	4013      	ands	r3, r2
 8004d6a:	687a      	ldr	r2, [r7, #4]
 8004d6c:	69d2      	ldr	r2, [r2, #28]
 8004d6e:	00d2      	lsls	r2, r2, #3
 8004d70:	4920      	ldr	r1, [pc, #128]	; (8004df4 <RCCEx_PLL2_Config+0x15c>)
 8004d72:	4313      	orrs	r3, r2
 8004d74:	63cb      	str	r3, [r1, #60]	; 0x3c

    /* Enable PLL2FRACN . */
    __HAL_RCC_PLL2FRACN_ENABLE();
 8004d76:	4b1f      	ldr	r3, [pc, #124]	; (8004df4 <RCCEx_PLL2_Config+0x15c>)
 8004d78:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004d7a:	4a1e      	ldr	r2, [pc, #120]	; (8004df4 <RCCEx_PLL2_Config+0x15c>)
 8004d7c:	f043 0310 	orr.w	r3, r3, #16
 8004d80:	62d3      	str	r3, [r2, #44]	; 0x2c

    /* Enable the PLL2 clock output */
    if (Divider == DIVIDER_P_UPDATE)
 8004d82:	683b      	ldr	r3, [r7, #0]
 8004d84:	2b00      	cmp	r3, #0
 8004d86:	d106      	bne.n	8004d96 <RCCEx_PLL2_Config+0xfe>
    {
      __HAL_RCC_PLL2CLKOUT_ENABLE(RCC_PLL2_DIVP);
 8004d88:	4b1a      	ldr	r3, [pc, #104]	; (8004df4 <RCCEx_PLL2_Config+0x15c>)
 8004d8a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004d8c:	4a19      	ldr	r2, [pc, #100]	; (8004df4 <RCCEx_PLL2_Config+0x15c>)
 8004d8e:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 8004d92:	62d3      	str	r3, [r2, #44]	; 0x2c
 8004d94:	e00f      	b.n	8004db6 <RCCEx_PLL2_Config+0x11e>
    }
    else if (Divider == DIVIDER_Q_UPDATE)
 8004d96:	683b      	ldr	r3, [r7, #0]
 8004d98:	2b01      	cmp	r3, #1
 8004d9a:	d106      	bne.n	8004daa <RCCEx_PLL2_Config+0x112>
    {
      __HAL_RCC_PLL2CLKOUT_ENABLE(RCC_PLL2_DIVQ);
 8004d9c:	4b15      	ldr	r3, [pc, #84]	; (8004df4 <RCCEx_PLL2_Config+0x15c>)
 8004d9e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004da0:	4a14      	ldr	r2, [pc, #80]	; (8004df4 <RCCEx_PLL2_Config+0x15c>)
 8004da2:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8004da6:	62d3      	str	r3, [r2, #44]	; 0x2c
 8004da8:	e005      	b.n	8004db6 <RCCEx_PLL2_Config+0x11e>
    }
    else
    {
      __HAL_RCC_PLL2CLKOUT_ENABLE(RCC_PLL2_DIVR);
 8004daa:	4b12      	ldr	r3, [pc, #72]	; (8004df4 <RCCEx_PLL2_Config+0x15c>)
 8004dac:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004dae:	4a11      	ldr	r2, [pc, #68]	; (8004df4 <RCCEx_PLL2_Config+0x15c>)
 8004db0:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 8004db4:	62d3      	str	r3, [r2, #44]	; 0x2c
    }

    /* Enable  PLL2. */
    __HAL_RCC_PLL2_ENABLE();
 8004db6:	4b0f      	ldr	r3, [pc, #60]	; (8004df4 <RCCEx_PLL2_Config+0x15c>)
 8004db8:	681b      	ldr	r3, [r3, #0]
 8004dba:	4a0e      	ldr	r2, [pc, #56]	; (8004df4 <RCCEx_PLL2_Config+0x15c>)
 8004dbc:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 8004dc0:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8004dc2:	f7fc fc05 	bl	80015d0 <HAL_GetTick>
 8004dc6:	60b8      	str	r0, [r7, #8]

    /* Wait till PLL2 is ready */
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) == 0U)
 8004dc8:	e008      	b.n	8004ddc <RCCEx_PLL2_Config+0x144>
    {
      if ((HAL_GetTick() - tickstart) > PLL2_TIMEOUT_VALUE)
 8004dca:	f7fc fc01 	bl	80015d0 <HAL_GetTick>
 8004dce:	4602      	mov	r2, r0
 8004dd0:	68bb      	ldr	r3, [r7, #8]
 8004dd2:	1ad3      	subs	r3, r2, r3
 8004dd4:	2b02      	cmp	r3, #2
 8004dd6:	d901      	bls.n	8004ddc <RCCEx_PLL2_Config+0x144>
      {
        return HAL_TIMEOUT;
 8004dd8:	2303      	movs	r3, #3
 8004dda:	e006      	b.n	8004dea <RCCEx_PLL2_Config+0x152>
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) == 0U)
 8004ddc:	4b05      	ldr	r3, [pc, #20]	; (8004df4 <RCCEx_PLL2_Config+0x15c>)
 8004dde:	681b      	ldr	r3, [r3, #0]
 8004de0:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8004de4:	2b00      	cmp	r3, #0
 8004de6:	d0f0      	beq.n	8004dca <RCCEx_PLL2_Config+0x132>
    }

  }


  return status;
 8004de8:	7bfb      	ldrb	r3, [r7, #15]
}
 8004dea:	4618      	mov	r0, r3
 8004dec:	3710      	adds	r7, #16
 8004dee:	46bd      	mov	sp, r7
 8004df0:	bd80      	pop	{r7, pc}
 8004df2:	bf00      	nop
 8004df4:	58024400 	.word	0x58024400
 8004df8:	ffff0007 	.word	0xffff0007

08004dfc <RCCEx_PLL3_Config>:
  * @note   PLL3 is temporary disabled to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLL3_Config(RCC_PLL3InitTypeDef *pll3, uint32_t Divider)
{
 8004dfc:	b580      	push	{r7, lr}
 8004dfe:	b084      	sub	sp, #16
 8004e00:	af00      	add	r7, sp, #0
 8004e02:	6078      	str	r0, [r7, #4]
 8004e04:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 8004e06:	2300      	movs	r3, #0
 8004e08:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLL3RGE_VALUE(pll3->PLL3RGE));
  assert_param(IS_RCC_PLL3VCO_VALUE(pll3->PLL3VCOSEL));
  assert_param(IS_RCC_PLLFRACN_VALUE(pll3->PLL3FRACN));

  /* Check that PLL3 OSC clock source is already set */
  if (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_NONE)
 8004e0a:	4b53      	ldr	r3, [pc, #332]	; (8004f58 <RCCEx_PLL3_Config+0x15c>)
 8004e0c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004e0e:	f003 0303 	and.w	r3, r3, #3
 8004e12:	2b03      	cmp	r3, #3
 8004e14:	d101      	bne.n	8004e1a <RCCEx_PLL3_Config+0x1e>
  {
    return HAL_ERROR;
 8004e16:	2301      	movs	r3, #1
 8004e18:	e099      	b.n	8004f4e <RCCEx_PLL3_Config+0x152>


  else
  {
    /* Disable  PLL3. */
    __HAL_RCC_PLL3_DISABLE();
 8004e1a:	4b4f      	ldr	r3, [pc, #316]	; (8004f58 <RCCEx_PLL3_Config+0x15c>)
 8004e1c:	681b      	ldr	r3, [r3, #0]
 8004e1e:	4a4e      	ldr	r2, [pc, #312]	; (8004f58 <RCCEx_PLL3_Config+0x15c>)
 8004e20:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8004e24:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8004e26:	f7fc fbd3 	bl	80015d0 <HAL_GetTick>
 8004e2a:	60b8      	str	r0, [r7, #8]
    /* Wait till PLL3 is ready */
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) != 0U)
 8004e2c:	e008      	b.n	8004e40 <RCCEx_PLL3_Config+0x44>
    {
      if ((HAL_GetTick() - tickstart) > PLL3_TIMEOUT_VALUE)
 8004e2e:	f7fc fbcf 	bl	80015d0 <HAL_GetTick>
 8004e32:	4602      	mov	r2, r0
 8004e34:	68bb      	ldr	r3, [r7, #8]
 8004e36:	1ad3      	subs	r3, r2, r3
 8004e38:	2b02      	cmp	r3, #2
 8004e3a:	d901      	bls.n	8004e40 <RCCEx_PLL3_Config+0x44>
      {
        return HAL_TIMEOUT;
 8004e3c:	2303      	movs	r3, #3
 8004e3e:	e086      	b.n	8004f4e <RCCEx_PLL3_Config+0x152>
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) != 0U)
 8004e40:	4b45      	ldr	r3, [pc, #276]	; (8004f58 <RCCEx_PLL3_Config+0x15c>)
 8004e42:	681b      	ldr	r3, [r3, #0]
 8004e44:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8004e48:	2b00      	cmp	r3, #0
 8004e4a:	d1f0      	bne.n	8004e2e <RCCEx_PLL3_Config+0x32>
      }
    }

    /* Configure the PLL3  multiplication and division factors. */
    __HAL_RCC_PLL3_CONFIG(pll3->PLL3M,
 8004e4c:	4b42      	ldr	r3, [pc, #264]	; (8004f58 <RCCEx_PLL3_Config+0x15c>)
 8004e4e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004e50:	f023 727c 	bic.w	r2, r3, #66060288	; 0x3f00000
 8004e54:	687b      	ldr	r3, [r7, #4]
 8004e56:	681b      	ldr	r3, [r3, #0]
 8004e58:	051b      	lsls	r3, r3, #20
 8004e5a:	493f      	ldr	r1, [pc, #252]	; (8004f58 <RCCEx_PLL3_Config+0x15c>)
 8004e5c:	4313      	orrs	r3, r2
 8004e5e:	628b      	str	r3, [r1, #40]	; 0x28
 8004e60:	687b      	ldr	r3, [r7, #4]
 8004e62:	685b      	ldr	r3, [r3, #4]
 8004e64:	3b01      	subs	r3, #1
 8004e66:	f3c3 0208 	ubfx	r2, r3, #0, #9
 8004e6a:	687b      	ldr	r3, [r7, #4]
 8004e6c:	689b      	ldr	r3, [r3, #8]
 8004e6e:	3b01      	subs	r3, #1
 8004e70:	025b      	lsls	r3, r3, #9
 8004e72:	b29b      	uxth	r3, r3
 8004e74:	431a      	orrs	r2, r3
 8004e76:	687b      	ldr	r3, [r7, #4]
 8004e78:	68db      	ldr	r3, [r3, #12]
 8004e7a:	3b01      	subs	r3, #1
 8004e7c:	041b      	lsls	r3, r3, #16
 8004e7e:	f403 03fe 	and.w	r3, r3, #8323072	; 0x7f0000
 8004e82:	431a      	orrs	r2, r3
 8004e84:	687b      	ldr	r3, [r7, #4]
 8004e86:	691b      	ldr	r3, [r3, #16]
 8004e88:	3b01      	subs	r3, #1
 8004e8a:	061b      	lsls	r3, r3, #24
 8004e8c:	f003 43fe 	and.w	r3, r3, #2130706432	; 0x7f000000
 8004e90:	4931      	ldr	r1, [pc, #196]	; (8004f58 <RCCEx_PLL3_Config+0x15c>)
 8004e92:	4313      	orrs	r3, r2
 8004e94:	640b      	str	r3, [r1, #64]	; 0x40
                          pll3->PLL3P,
                          pll3->PLL3Q,
                          pll3->PLL3R);

    /* Select PLL3 input reference frequency range: VCI */
    __HAL_RCC_PLL3_VCIRANGE(pll3->PLL3RGE) ;
 8004e96:	4b30      	ldr	r3, [pc, #192]	; (8004f58 <RCCEx_PLL3_Config+0x15c>)
 8004e98:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004e9a:	f423 6240 	bic.w	r2, r3, #3072	; 0xc00
 8004e9e:	687b      	ldr	r3, [r7, #4]
 8004ea0:	695b      	ldr	r3, [r3, #20]
 8004ea2:	492d      	ldr	r1, [pc, #180]	; (8004f58 <RCCEx_PLL3_Config+0x15c>)
 8004ea4:	4313      	orrs	r3, r2
 8004ea6:	62cb      	str	r3, [r1, #44]	; 0x2c

    /* Select PLL3 output frequency range : VCO */
    __HAL_RCC_PLL3_VCORANGE(pll3->PLL3VCOSEL) ;
 8004ea8:	4b2b      	ldr	r3, [pc, #172]	; (8004f58 <RCCEx_PLL3_Config+0x15c>)
 8004eaa:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004eac:	f423 7200 	bic.w	r2, r3, #512	; 0x200
 8004eb0:	687b      	ldr	r3, [r7, #4]
 8004eb2:	699b      	ldr	r3, [r3, #24]
 8004eb4:	4928      	ldr	r1, [pc, #160]	; (8004f58 <RCCEx_PLL3_Config+0x15c>)
 8004eb6:	4313      	orrs	r3, r2
 8004eb8:	62cb      	str	r3, [r1, #44]	; 0x2c

    /* Disable PLL3FRACN . */
    __HAL_RCC_PLL3FRACN_DISABLE();
 8004eba:	4b27      	ldr	r3, [pc, #156]	; (8004f58 <RCCEx_PLL3_Config+0x15c>)
 8004ebc:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004ebe:	4a26      	ldr	r2, [pc, #152]	; (8004f58 <RCCEx_PLL3_Config+0x15c>)
 8004ec0:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8004ec4:	62d3      	str	r3, [r2, #44]	; 0x2c

    /* Configures PLL3 clock Fractional Part Of The Multiplication Factor */
    __HAL_RCC_PLL3FRACN_CONFIG(pll3->PLL3FRACN);
 8004ec6:	4b24      	ldr	r3, [pc, #144]	; (8004f58 <RCCEx_PLL3_Config+0x15c>)
 8004ec8:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8004eca:	4b24      	ldr	r3, [pc, #144]	; (8004f5c <RCCEx_PLL3_Config+0x160>)
 8004ecc:	4013      	ands	r3, r2
 8004ece:	687a      	ldr	r2, [r7, #4]
 8004ed0:	69d2      	ldr	r2, [r2, #28]
 8004ed2:	00d2      	lsls	r2, r2, #3
 8004ed4:	4920      	ldr	r1, [pc, #128]	; (8004f58 <RCCEx_PLL3_Config+0x15c>)
 8004ed6:	4313      	orrs	r3, r2
 8004ed8:	644b      	str	r3, [r1, #68]	; 0x44

    /* Enable PLL3FRACN . */
    __HAL_RCC_PLL3FRACN_ENABLE();
 8004eda:	4b1f      	ldr	r3, [pc, #124]	; (8004f58 <RCCEx_PLL3_Config+0x15c>)
 8004edc:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004ede:	4a1e      	ldr	r2, [pc, #120]	; (8004f58 <RCCEx_PLL3_Config+0x15c>)
 8004ee0:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8004ee4:	62d3      	str	r3, [r2, #44]	; 0x2c

    /* Enable the PLL3 clock output */
    if (Divider == DIVIDER_P_UPDATE)
 8004ee6:	683b      	ldr	r3, [r7, #0]
 8004ee8:	2b00      	cmp	r3, #0
 8004eea:	d106      	bne.n	8004efa <RCCEx_PLL3_Config+0xfe>
    {
      __HAL_RCC_PLL3CLKOUT_ENABLE(RCC_PLL3_DIVP);
 8004eec:	4b1a      	ldr	r3, [pc, #104]	; (8004f58 <RCCEx_PLL3_Config+0x15c>)
 8004eee:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004ef0:	4a19      	ldr	r2, [pc, #100]	; (8004f58 <RCCEx_PLL3_Config+0x15c>)
 8004ef2:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 8004ef6:	62d3      	str	r3, [r2, #44]	; 0x2c
 8004ef8:	e00f      	b.n	8004f1a <RCCEx_PLL3_Config+0x11e>
    }
    else if (Divider == DIVIDER_Q_UPDATE)
 8004efa:	683b      	ldr	r3, [r7, #0]
 8004efc:	2b01      	cmp	r3, #1
 8004efe:	d106      	bne.n	8004f0e <RCCEx_PLL3_Config+0x112>
    {
      __HAL_RCC_PLL3CLKOUT_ENABLE(RCC_PLL3_DIVQ);
 8004f00:	4b15      	ldr	r3, [pc, #84]	; (8004f58 <RCCEx_PLL3_Config+0x15c>)
 8004f02:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004f04:	4a14      	ldr	r2, [pc, #80]	; (8004f58 <RCCEx_PLL3_Config+0x15c>)
 8004f06:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
 8004f0a:	62d3      	str	r3, [r2, #44]	; 0x2c
 8004f0c:	e005      	b.n	8004f1a <RCCEx_PLL3_Config+0x11e>
    }
    else
    {
      __HAL_RCC_PLL3CLKOUT_ENABLE(RCC_PLL3_DIVR);
 8004f0e:	4b12      	ldr	r3, [pc, #72]	; (8004f58 <RCCEx_PLL3_Config+0x15c>)
 8004f10:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004f12:	4a11      	ldr	r2, [pc, #68]	; (8004f58 <RCCEx_PLL3_Config+0x15c>)
 8004f14:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8004f18:	62d3      	str	r3, [r2, #44]	; 0x2c
    }

    /* Enable  PLL3. */
    __HAL_RCC_PLL3_ENABLE();
 8004f1a:	4b0f      	ldr	r3, [pc, #60]	; (8004f58 <RCCEx_PLL3_Config+0x15c>)
 8004f1c:	681b      	ldr	r3, [r3, #0]
 8004f1e:	4a0e      	ldr	r2, [pc, #56]	; (8004f58 <RCCEx_PLL3_Config+0x15c>)
 8004f20:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8004f24:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8004f26:	f7fc fb53 	bl	80015d0 <HAL_GetTick>
 8004f2a:	60b8      	str	r0, [r7, #8]

    /* Wait till PLL3 is ready */
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) == 0U)
 8004f2c:	e008      	b.n	8004f40 <RCCEx_PLL3_Config+0x144>
    {
      if ((HAL_GetTick() - tickstart) > PLL3_TIMEOUT_VALUE)
 8004f2e:	f7fc fb4f 	bl	80015d0 <HAL_GetTick>
 8004f32:	4602      	mov	r2, r0
 8004f34:	68bb      	ldr	r3, [r7, #8]
 8004f36:	1ad3      	subs	r3, r2, r3
 8004f38:	2b02      	cmp	r3, #2
 8004f3a:	d901      	bls.n	8004f40 <RCCEx_PLL3_Config+0x144>
      {
        return HAL_TIMEOUT;
 8004f3c:	2303      	movs	r3, #3
 8004f3e:	e006      	b.n	8004f4e <RCCEx_PLL3_Config+0x152>
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) == 0U)
 8004f40:	4b05      	ldr	r3, [pc, #20]	; (8004f58 <RCCEx_PLL3_Config+0x15c>)
 8004f42:	681b      	ldr	r3, [r3, #0]
 8004f44:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8004f48:	2b00      	cmp	r3, #0
 8004f4a:	d0f0      	beq.n	8004f2e <RCCEx_PLL3_Config+0x132>
    }

  }


  return status;
 8004f4c:	7bfb      	ldrb	r3, [r7, #15]
}
 8004f4e:	4618      	mov	r0, r3
 8004f50:	3710      	adds	r7, #16
 8004f52:	46bd      	mov	sp, r7
 8004f54:	bd80      	pop	{r7, pc}
 8004f56:	bf00      	nop
 8004f58:	58024400 	.word	0x58024400
 8004f5c:	ffff0007 	.word	0xffff0007

08004f60 <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8004f60:	b580      	push	{r7, lr}
 8004f62:	b082      	sub	sp, #8
 8004f64:	af00      	add	r7, sp, #0
 8004f66:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8004f68:	687b      	ldr	r3, [r7, #4]
 8004f6a:	2b00      	cmp	r3, #0
 8004f6c:	d101      	bne.n	8004f72 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8004f6e:	2301      	movs	r3, #1
 8004f70:	e042      	b.n	8004ff8 <HAL_UART_Init+0x98>
  {
    /* Check the parameters */
    assert_param((IS_UART_INSTANCE(huart->Instance)) || (IS_LPUART_INSTANCE(huart->Instance)));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 8004f72:	687b      	ldr	r3, [r7, #4]
 8004f74:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004f78:	2b00      	cmp	r3, #0
 8004f7a:	d106      	bne.n	8004f8a <HAL_UART_Init+0x2a>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8004f7c:	687b      	ldr	r3, [r7, #4]
 8004f7e:	2200      	movs	r2, #0
 8004f80:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8004f84:	6878      	ldr	r0, [r7, #4]
 8004f86:	f7fb ffa1 	bl	8000ecc <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8004f8a:	687b      	ldr	r3, [r7, #4]
 8004f8c:	2224      	movs	r2, #36	; 0x24
 8004f8e:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  __HAL_UART_DISABLE(huart);
 8004f92:	687b      	ldr	r3, [r7, #4]
 8004f94:	681b      	ldr	r3, [r3, #0]
 8004f96:	681a      	ldr	r2, [r3, #0]
 8004f98:	687b      	ldr	r3, [r7, #4]
 8004f9a:	681b      	ldr	r3, [r3, #0]
 8004f9c:	f022 0201 	bic.w	r2, r2, #1
 8004fa0:	601a      	str	r2, [r3, #0]

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 8004fa2:	6878      	ldr	r0, [r7, #4]
 8004fa4:	f000 f8ba 	bl	800511c <UART_SetConfig>
 8004fa8:	4603      	mov	r3, r0
 8004faa:	2b01      	cmp	r3, #1
 8004fac:	d101      	bne.n	8004fb2 <HAL_UART_Init+0x52>
  {
    return HAL_ERROR;
 8004fae:	2301      	movs	r3, #1
 8004fb0:	e022      	b.n	8004ff8 <HAL_UART_Init+0x98>
  }

  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 8004fb2:	687b      	ldr	r3, [r7, #4]
 8004fb4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004fb6:	2b00      	cmp	r3, #0
 8004fb8:	d002      	beq.n	8004fc0 <HAL_UART_Init+0x60>
  {
    UART_AdvFeatureConfig(huart);
 8004fba:	6878      	ldr	r0, [r7, #4]
 8004fbc:	f000 ff1a 	bl	8005df4 <UART_AdvFeatureConfig>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8004fc0:	687b      	ldr	r3, [r7, #4]
 8004fc2:	681b      	ldr	r3, [r3, #0]
 8004fc4:	685a      	ldr	r2, [r3, #4]
 8004fc6:	687b      	ldr	r3, [r7, #4]
 8004fc8:	681b      	ldr	r3, [r3, #0]
 8004fca:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 8004fce:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8004fd0:	687b      	ldr	r3, [r7, #4]
 8004fd2:	681b      	ldr	r3, [r3, #0]
 8004fd4:	689a      	ldr	r2, [r3, #8]
 8004fd6:	687b      	ldr	r3, [r7, #4]
 8004fd8:	681b      	ldr	r3, [r3, #0]
 8004fda:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 8004fde:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 8004fe0:	687b      	ldr	r3, [r7, #4]
 8004fe2:	681b      	ldr	r3, [r3, #0]
 8004fe4:	681a      	ldr	r2, [r3, #0]
 8004fe6:	687b      	ldr	r3, [r7, #4]
 8004fe8:	681b      	ldr	r3, [r3, #0]
 8004fea:	f042 0201 	orr.w	r2, r2, #1
 8004fee:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 8004ff0:	6878      	ldr	r0, [r7, #4]
 8004ff2:	f000 ffa1 	bl	8005f38 <UART_CheckIdleState>
 8004ff6:	4603      	mov	r3, r0
}
 8004ff8:	4618      	mov	r0, r3
 8004ffa:	3708      	adds	r7, #8
 8004ffc:	46bd      	mov	sp, r7
 8004ffe:	bd80      	pop	{r7, pc}

08005000 <HAL_UART_Transmit>:
  * @param Size    Amount of data elements (u8 or u16) to be sent.
  * @param Timeout Timeout duration.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8005000:	b580      	push	{r7, lr}
 8005002:	b08a      	sub	sp, #40	; 0x28
 8005004:	af02      	add	r7, sp, #8
 8005006:	60f8      	str	r0, [r7, #12]
 8005008:	60b9      	str	r1, [r7, #8]
 800500a:	603b      	str	r3, [r7, #0]
 800500c:	4613      	mov	r3, r2
 800500e:	80fb      	strh	r3, [r7, #6]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart;

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8005010:	68fb      	ldr	r3, [r7, #12]
 8005012:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8005016:	2b20      	cmp	r3, #32
 8005018:	d17b      	bne.n	8005112 <HAL_UART_Transmit+0x112>
  {
    if ((pData == NULL) || (Size == 0U))
 800501a:	68bb      	ldr	r3, [r7, #8]
 800501c:	2b00      	cmp	r3, #0
 800501e:	d002      	beq.n	8005026 <HAL_UART_Transmit+0x26>
 8005020:	88fb      	ldrh	r3, [r7, #6]
 8005022:	2b00      	cmp	r3, #0
 8005024:	d101      	bne.n	800502a <HAL_UART_Transmit+0x2a>
    {
      return  HAL_ERROR;
 8005026:	2301      	movs	r3, #1
 8005028:	e074      	b.n	8005114 <HAL_UART_Transmit+0x114>
    }

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 800502a:	68fb      	ldr	r3, [r7, #12]
 800502c:	2200      	movs	r2, #0
 800502e:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8005032:	68fb      	ldr	r3, [r7, #12]
 8005034:	2221      	movs	r2, #33	; 0x21
 8005036:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 800503a:	f7fc fac9 	bl	80015d0 <HAL_GetTick>
 800503e:	6178      	str	r0, [r7, #20]

    huart->TxXferSize  = Size;
 8005040:	68fb      	ldr	r3, [r7, #12]
 8005042:	88fa      	ldrh	r2, [r7, #6]
 8005044:	f8a3 2054 	strh.w	r2, [r3, #84]	; 0x54
    huart->TxXferCount = Size;
 8005048:	68fb      	ldr	r3, [r7, #12]
 800504a:	88fa      	ldrh	r2, [r7, #6]
 800504c:	f8a3 2056 	strh.w	r2, [r3, #86]	; 0x56

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8005050:	68fb      	ldr	r3, [r7, #12]
 8005052:	689b      	ldr	r3, [r3, #8]
 8005054:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8005058:	d108      	bne.n	800506c <HAL_UART_Transmit+0x6c>
 800505a:	68fb      	ldr	r3, [r7, #12]
 800505c:	691b      	ldr	r3, [r3, #16]
 800505e:	2b00      	cmp	r3, #0
 8005060:	d104      	bne.n	800506c <HAL_UART_Transmit+0x6c>
    {
      pdata8bits  = NULL;
 8005062:	2300      	movs	r3, #0
 8005064:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 8005066:	68bb      	ldr	r3, [r7, #8]
 8005068:	61bb      	str	r3, [r7, #24]
 800506a:	e003      	b.n	8005074 <HAL_UART_Transmit+0x74>
    }
    else
    {
      pdata8bits  = pData;
 800506c:	68bb      	ldr	r3, [r7, #8]
 800506e:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8005070:	2300      	movs	r3, #0
 8005072:	61bb      	str	r3, [r7, #24]
    }

    while (huart->TxXferCount > 0U)
 8005074:	e030      	b.n	80050d8 <HAL_UART_Transmit+0xd8>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8005076:	683b      	ldr	r3, [r7, #0]
 8005078:	9300      	str	r3, [sp, #0]
 800507a:	697b      	ldr	r3, [r7, #20]
 800507c:	2200      	movs	r2, #0
 800507e:	2180      	movs	r1, #128	; 0x80
 8005080:	68f8      	ldr	r0, [r7, #12]
 8005082:	f001 f803 	bl	800608c <UART_WaitOnFlagUntilTimeout>
 8005086:	4603      	mov	r3, r0
 8005088:	2b00      	cmp	r3, #0
 800508a:	d005      	beq.n	8005098 <HAL_UART_Transmit+0x98>
      {

        huart->gState = HAL_UART_STATE_READY;
 800508c:	68fb      	ldr	r3, [r7, #12]
 800508e:	2220      	movs	r2, #32
 8005090:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

        return HAL_TIMEOUT;
 8005094:	2303      	movs	r3, #3
 8005096:	e03d      	b.n	8005114 <HAL_UART_Transmit+0x114>
      }
      if (pdata8bits == NULL)
 8005098:	69fb      	ldr	r3, [r7, #28]
 800509a:	2b00      	cmp	r3, #0
 800509c:	d10b      	bne.n	80050b6 <HAL_UART_Transmit+0xb6>
      {
        huart->Instance->TDR = (uint16_t)(*pdata16bits & 0x01FFU);
 800509e:	69bb      	ldr	r3, [r7, #24]
 80050a0:	881b      	ldrh	r3, [r3, #0]
 80050a2:	461a      	mov	r2, r3
 80050a4:	68fb      	ldr	r3, [r7, #12]
 80050a6:	681b      	ldr	r3, [r3, #0]
 80050a8:	f3c2 0208 	ubfx	r2, r2, #0, #9
 80050ac:	629a      	str	r2, [r3, #40]	; 0x28
        pdata16bits++;
 80050ae:	69bb      	ldr	r3, [r7, #24]
 80050b0:	3302      	adds	r3, #2
 80050b2:	61bb      	str	r3, [r7, #24]
 80050b4:	e007      	b.n	80050c6 <HAL_UART_Transmit+0xc6>
      }
      else
      {
        huart->Instance->TDR = (uint8_t)(*pdata8bits & 0xFFU);
 80050b6:	69fb      	ldr	r3, [r7, #28]
 80050b8:	781a      	ldrb	r2, [r3, #0]
 80050ba:	68fb      	ldr	r3, [r7, #12]
 80050bc:	681b      	ldr	r3, [r3, #0]
 80050be:	629a      	str	r2, [r3, #40]	; 0x28
        pdata8bits++;
 80050c0:	69fb      	ldr	r3, [r7, #28]
 80050c2:	3301      	adds	r3, #1
 80050c4:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 80050c6:	68fb      	ldr	r3, [r7, #12]
 80050c8:	f8b3 3056 	ldrh.w	r3, [r3, #86]	; 0x56
 80050cc:	b29b      	uxth	r3, r3
 80050ce:	3b01      	subs	r3, #1
 80050d0:	b29a      	uxth	r2, r3
 80050d2:	68fb      	ldr	r3, [r7, #12]
 80050d4:	f8a3 2056 	strh.w	r2, [r3, #86]	; 0x56
    while (huart->TxXferCount > 0U)
 80050d8:	68fb      	ldr	r3, [r7, #12]
 80050da:	f8b3 3056 	ldrh.w	r3, [r3, #86]	; 0x56
 80050de:	b29b      	uxth	r3, r3
 80050e0:	2b00      	cmp	r3, #0
 80050e2:	d1c8      	bne.n	8005076 <HAL_UART_Transmit+0x76>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 80050e4:	683b      	ldr	r3, [r7, #0]
 80050e6:	9300      	str	r3, [sp, #0]
 80050e8:	697b      	ldr	r3, [r7, #20]
 80050ea:	2200      	movs	r2, #0
 80050ec:	2140      	movs	r1, #64	; 0x40
 80050ee:	68f8      	ldr	r0, [r7, #12]
 80050f0:	f000 ffcc 	bl	800608c <UART_WaitOnFlagUntilTimeout>
 80050f4:	4603      	mov	r3, r0
 80050f6:	2b00      	cmp	r3, #0
 80050f8:	d005      	beq.n	8005106 <HAL_UART_Transmit+0x106>
    {
      huart->gState = HAL_UART_STATE_READY;
 80050fa:	68fb      	ldr	r3, [r7, #12]
 80050fc:	2220      	movs	r2, #32
 80050fe:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

      return HAL_TIMEOUT;
 8005102:	2303      	movs	r3, #3
 8005104:	e006      	b.n	8005114 <HAL_UART_Transmit+0x114>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 8005106:	68fb      	ldr	r3, [r7, #12]
 8005108:	2220      	movs	r2, #32
 800510a:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

    return HAL_OK;
 800510e:	2300      	movs	r3, #0
 8005110:	e000      	b.n	8005114 <HAL_UART_Transmit+0x114>
  }
  else
  {
    return HAL_BUSY;
 8005112:	2302      	movs	r3, #2
  }
}
 8005114:	4618      	mov	r0, r3
 8005116:	3720      	adds	r7, #32
 8005118:	46bd      	mov	sp, r7
 800511a:	bd80      	pop	{r7, pc}

0800511c <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 800511c:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8005120:	b092      	sub	sp, #72	; 0x48
 8005122:	af00      	add	r7, sp, #0
 8005124:	6178      	str	r0, [r7, #20]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 8005126:	2300      	movs	r3, #0
 8005128:	f887 3042 	strb.w	r3, [r7, #66]	; 0x42
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 800512c:	697b      	ldr	r3, [r7, #20]
 800512e:	689a      	ldr	r2, [r3, #8]
 8005130:	697b      	ldr	r3, [r7, #20]
 8005132:	691b      	ldr	r3, [r3, #16]
 8005134:	431a      	orrs	r2, r3
 8005136:	697b      	ldr	r3, [r7, #20]
 8005138:	695b      	ldr	r3, [r3, #20]
 800513a:	431a      	orrs	r2, r3
 800513c:	697b      	ldr	r3, [r7, #20]
 800513e:	69db      	ldr	r3, [r3, #28]
 8005140:	4313      	orrs	r3, r2
 8005142:	647b      	str	r3, [r7, #68]	; 0x44
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 8005144:	697b      	ldr	r3, [r7, #20]
 8005146:	681b      	ldr	r3, [r3, #0]
 8005148:	681a      	ldr	r2, [r3, #0]
 800514a:	4bbe      	ldr	r3, [pc, #760]	; (8005444 <UART_SetConfig+0x328>)
 800514c:	4013      	ands	r3, r2
 800514e:	697a      	ldr	r2, [r7, #20]
 8005150:	6812      	ldr	r2, [r2, #0]
 8005152:	6c79      	ldr	r1, [r7, #68]	; 0x44
 8005154:	430b      	orrs	r3, r1
 8005156:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8005158:	697b      	ldr	r3, [r7, #20]
 800515a:	681b      	ldr	r3, [r3, #0]
 800515c:	685b      	ldr	r3, [r3, #4]
 800515e:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 8005162:	697b      	ldr	r3, [r7, #20]
 8005164:	68da      	ldr	r2, [r3, #12]
 8005166:	697b      	ldr	r3, [r7, #20]
 8005168:	681b      	ldr	r3, [r3, #0]
 800516a:	430a      	orrs	r2, r1
 800516c:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 800516e:	697b      	ldr	r3, [r7, #20]
 8005170:	699b      	ldr	r3, [r3, #24]
 8005172:	647b      	str	r3, [r7, #68]	; 0x44

  if (!(UART_INSTANCE_LOWPOWER(huart)))
 8005174:	697b      	ldr	r3, [r7, #20]
 8005176:	681b      	ldr	r3, [r3, #0]
 8005178:	4ab3      	ldr	r2, [pc, #716]	; (8005448 <UART_SetConfig+0x32c>)
 800517a:	4293      	cmp	r3, r2
 800517c:	d004      	beq.n	8005188 <UART_SetConfig+0x6c>
  {
    tmpreg |= huart->Init.OneBitSampling;
 800517e:	697b      	ldr	r3, [r7, #20]
 8005180:	6a1b      	ldr	r3, [r3, #32]
 8005182:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8005184:	4313      	orrs	r3, r2
 8005186:	647b      	str	r3, [r7, #68]	; 0x44
  }
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 8005188:	697b      	ldr	r3, [r7, #20]
 800518a:	681b      	ldr	r3, [r3, #0]
 800518c:	689a      	ldr	r2, [r3, #8]
 800518e:	4baf      	ldr	r3, [pc, #700]	; (800544c <UART_SetConfig+0x330>)
 8005190:	4013      	ands	r3, r2
 8005192:	697a      	ldr	r2, [r7, #20]
 8005194:	6812      	ldr	r2, [r2, #0]
 8005196:	6c79      	ldr	r1, [r7, #68]	; 0x44
 8005198:	430b      	orrs	r3, r1
 800519a:	6093      	str	r3, [r2, #8]

  /*-------------------------- USART PRESC Configuration -----------------------*/
  /* Configure
  * - UART Clock Prescaler : set PRESCALER according to huart->Init.ClockPrescaler value */
  MODIFY_REG(huart->Instance->PRESC, USART_PRESC_PRESCALER, huart->Init.ClockPrescaler);
 800519c:	697b      	ldr	r3, [r7, #20]
 800519e:	681b      	ldr	r3, [r3, #0]
 80051a0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80051a2:	f023 010f 	bic.w	r1, r3, #15
 80051a6:	697b      	ldr	r3, [r7, #20]
 80051a8:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 80051aa:	697b      	ldr	r3, [r7, #20]
 80051ac:	681b      	ldr	r3, [r3, #0]
 80051ae:	430a      	orrs	r2, r1
 80051b0:	62da      	str	r2, [r3, #44]	; 0x2c

  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 80051b2:	697b      	ldr	r3, [r7, #20]
 80051b4:	681b      	ldr	r3, [r3, #0]
 80051b6:	4aa6      	ldr	r2, [pc, #664]	; (8005450 <UART_SetConfig+0x334>)
 80051b8:	4293      	cmp	r3, r2
 80051ba:	d177      	bne.n	80052ac <UART_SetConfig+0x190>
 80051bc:	4ba5      	ldr	r3, [pc, #660]	; (8005454 <UART_SetConfig+0x338>)
 80051be:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80051c0:	f003 0338 	and.w	r3, r3, #56	; 0x38
 80051c4:	2b28      	cmp	r3, #40	; 0x28
 80051c6:	d86d      	bhi.n	80052a4 <UART_SetConfig+0x188>
 80051c8:	a201      	add	r2, pc, #4	; (adr r2, 80051d0 <UART_SetConfig+0xb4>)
 80051ca:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80051ce:	bf00      	nop
 80051d0:	08005275 	.word	0x08005275
 80051d4:	080052a5 	.word	0x080052a5
 80051d8:	080052a5 	.word	0x080052a5
 80051dc:	080052a5 	.word	0x080052a5
 80051e0:	080052a5 	.word	0x080052a5
 80051e4:	080052a5 	.word	0x080052a5
 80051e8:	080052a5 	.word	0x080052a5
 80051ec:	080052a5 	.word	0x080052a5
 80051f0:	0800527d 	.word	0x0800527d
 80051f4:	080052a5 	.word	0x080052a5
 80051f8:	080052a5 	.word	0x080052a5
 80051fc:	080052a5 	.word	0x080052a5
 8005200:	080052a5 	.word	0x080052a5
 8005204:	080052a5 	.word	0x080052a5
 8005208:	080052a5 	.word	0x080052a5
 800520c:	080052a5 	.word	0x080052a5
 8005210:	08005285 	.word	0x08005285
 8005214:	080052a5 	.word	0x080052a5
 8005218:	080052a5 	.word	0x080052a5
 800521c:	080052a5 	.word	0x080052a5
 8005220:	080052a5 	.word	0x080052a5
 8005224:	080052a5 	.word	0x080052a5
 8005228:	080052a5 	.word	0x080052a5
 800522c:	080052a5 	.word	0x080052a5
 8005230:	0800528d 	.word	0x0800528d
 8005234:	080052a5 	.word	0x080052a5
 8005238:	080052a5 	.word	0x080052a5
 800523c:	080052a5 	.word	0x080052a5
 8005240:	080052a5 	.word	0x080052a5
 8005244:	080052a5 	.word	0x080052a5
 8005248:	080052a5 	.word	0x080052a5
 800524c:	080052a5 	.word	0x080052a5
 8005250:	08005295 	.word	0x08005295
 8005254:	080052a5 	.word	0x080052a5
 8005258:	080052a5 	.word	0x080052a5
 800525c:	080052a5 	.word	0x080052a5
 8005260:	080052a5 	.word	0x080052a5
 8005264:	080052a5 	.word	0x080052a5
 8005268:	080052a5 	.word	0x080052a5
 800526c:	080052a5 	.word	0x080052a5
 8005270:	0800529d 	.word	0x0800529d
 8005274:	2301      	movs	r3, #1
 8005276:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800527a:	e326      	b.n	80058ca <UART_SetConfig+0x7ae>
 800527c:	2304      	movs	r3, #4
 800527e:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8005282:	e322      	b.n	80058ca <UART_SetConfig+0x7ae>
 8005284:	2308      	movs	r3, #8
 8005286:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800528a:	e31e      	b.n	80058ca <UART_SetConfig+0x7ae>
 800528c:	2310      	movs	r3, #16
 800528e:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8005292:	e31a      	b.n	80058ca <UART_SetConfig+0x7ae>
 8005294:	2320      	movs	r3, #32
 8005296:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800529a:	e316      	b.n	80058ca <UART_SetConfig+0x7ae>
 800529c:	2340      	movs	r3, #64	; 0x40
 800529e:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 80052a2:	e312      	b.n	80058ca <UART_SetConfig+0x7ae>
 80052a4:	2380      	movs	r3, #128	; 0x80
 80052a6:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 80052aa:	e30e      	b.n	80058ca <UART_SetConfig+0x7ae>
 80052ac:	697b      	ldr	r3, [r7, #20]
 80052ae:	681b      	ldr	r3, [r3, #0]
 80052b0:	4a69      	ldr	r2, [pc, #420]	; (8005458 <UART_SetConfig+0x33c>)
 80052b2:	4293      	cmp	r3, r2
 80052b4:	d130      	bne.n	8005318 <UART_SetConfig+0x1fc>
 80052b6:	4b67      	ldr	r3, [pc, #412]	; (8005454 <UART_SetConfig+0x338>)
 80052b8:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80052ba:	f003 0307 	and.w	r3, r3, #7
 80052be:	2b05      	cmp	r3, #5
 80052c0:	d826      	bhi.n	8005310 <UART_SetConfig+0x1f4>
 80052c2:	a201      	add	r2, pc, #4	; (adr r2, 80052c8 <UART_SetConfig+0x1ac>)
 80052c4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80052c8:	080052e1 	.word	0x080052e1
 80052cc:	080052e9 	.word	0x080052e9
 80052d0:	080052f1 	.word	0x080052f1
 80052d4:	080052f9 	.word	0x080052f9
 80052d8:	08005301 	.word	0x08005301
 80052dc:	08005309 	.word	0x08005309
 80052e0:	2300      	movs	r3, #0
 80052e2:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 80052e6:	e2f0      	b.n	80058ca <UART_SetConfig+0x7ae>
 80052e8:	2304      	movs	r3, #4
 80052ea:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 80052ee:	e2ec      	b.n	80058ca <UART_SetConfig+0x7ae>
 80052f0:	2308      	movs	r3, #8
 80052f2:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 80052f6:	e2e8      	b.n	80058ca <UART_SetConfig+0x7ae>
 80052f8:	2310      	movs	r3, #16
 80052fa:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 80052fe:	e2e4      	b.n	80058ca <UART_SetConfig+0x7ae>
 8005300:	2320      	movs	r3, #32
 8005302:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8005306:	e2e0      	b.n	80058ca <UART_SetConfig+0x7ae>
 8005308:	2340      	movs	r3, #64	; 0x40
 800530a:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800530e:	e2dc      	b.n	80058ca <UART_SetConfig+0x7ae>
 8005310:	2380      	movs	r3, #128	; 0x80
 8005312:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8005316:	e2d8      	b.n	80058ca <UART_SetConfig+0x7ae>
 8005318:	697b      	ldr	r3, [r7, #20]
 800531a:	681b      	ldr	r3, [r3, #0]
 800531c:	4a4f      	ldr	r2, [pc, #316]	; (800545c <UART_SetConfig+0x340>)
 800531e:	4293      	cmp	r3, r2
 8005320:	d130      	bne.n	8005384 <UART_SetConfig+0x268>
 8005322:	4b4c      	ldr	r3, [pc, #304]	; (8005454 <UART_SetConfig+0x338>)
 8005324:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8005326:	f003 0307 	and.w	r3, r3, #7
 800532a:	2b05      	cmp	r3, #5
 800532c:	d826      	bhi.n	800537c <UART_SetConfig+0x260>
 800532e:	a201      	add	r2, pc, #4	; (adr r2, 8005334 <UART_SetConfig+0x218>)
 8005330:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005334:	0800534d 	.word	0x0800534d
 8005338:	08005355 	.word	0x08005355
 800533c:	0800535d 	.word	0x0800535d
 8005340:	08005365 	.word	0x08005365
 8005344:	0800536d 	.word	0x0800536d
 8005348:	08005375 	.word	0x08005375
 800534c:	2300      	movs	r3, #0
 800534e:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8005352:	e2ba      	b.n	80058ca <UART_SetConfig+0x7ae>
 8005354:	2304      	movs	r3, #4
 8005356:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800535a:	e2b6      	b.n	80058ca <UART_SetConfig+0x7ae>
 800535c:	2308      	movs	r3, #8
 800535e:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8005362:	e2b2      	b.n	80058ca <UART_SetConfig+0x7ae>
 8005364:	2310      	movs	r3, #16
 8005366:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800536a:	e2ae      	b.n	80058ca <UART_SetConfig+0x7ae>
 800536c:	2320      	movs	r3, #32
 800536e:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8005372:	e2aa      	b.n	80058ca <UART_SetConfig+0x7ae>
 8005374:	2340      	movs	r3, #64	; 0x40
 8005376:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800537a:	e2a6      	b.n	80058ca <UART_SetConfig+0x7ae>
 800537c:	2380      	movs	r3, #128	; 0x80
 800537e:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8005382:	e2a2      	b.n	80058ca <UART_SetConfig+0x7ae>
 8005384:	697b      	ldr	r3, [r7, #20]
 8005386:	681b      	ldr	r3, [r3, #0]
 8005388:	4a35      	ldr	r2, [pc, #212]	; (8005460 <UART_SetConfig+0x344>)
 800538a:	4293      	cmp	r3, r2
 800538c:	d130      	bne.n	80053f0 <UART_SetConfig+0x2d4>
 800538e:	4b31      	ldr	r3, [pc, #196]	; (8005454 <UART_SetConfig+0x338>)
 8005390:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8005392:	f003 0307 	and.w	r3, r3, #7
 8005396:	2b05      	cmp	r3, #5
 8005398:	d826      	bhi.n	80053e8 <UART_SetConfig+0x2cc>
 800539a:	a201      	add	r2, pc, #4	; (adr r2, 80053a0 <UART_SetConfig+0x284>)
 800539c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80053a0:	080053b9 	.word	0x080053b9
 80053a4:	080053c1 	.word	0x080053c1
 80053a8:	080053c9 	.word	0x080053c9
 80053ac:	080053d1 	.word	0x080053d1
 80053b0:	080053d9 	.word	0x080053d9
 80053b4:	080053e1 	.word	0x080053e1
 80053b8:	2300      	movs	r3, #0
 80053ba:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 80053be:	e284      	b.n	80058ca <UART_SetConfig+0x7ae>
 80053c0:	2304      	movs	r3, #4
 80053c2:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 80053c6:	e280      	b.n	80058ca <UART_SetConfig+0x7ae>
 80053c8:	2308      	movs	r3, #8
 80053ca:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 80053ce:	e27c      	b.n	80058ca <UART_SetConfig+0x7ae>
 80053d0:	2310      	movs	r3, #16
 80053d2:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 80053d6:	e278      	b.n	80058ca <UART_SetConfig+0x7ae>
 80053d8:	2320      	movs	r3, #32
 80053da:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 80053de:	e274      	b.n	80058ca <UART_SetConfig+0x7ae>
 80053e0:	2340      	movs	r3, #64	; 0x40
 80053e2:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 80053e6:	e270      	b.n	80058ca <UART_SetConfig+0x7ae>
 80053e8:	2380      	movs	r3, #128	; 0x80
 80053ea:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 80053ee:	e26c      	b.n	80058ca <UART_SetConfig+0x7ae>
 80053f0:	697b      	ldr	r3, [r7, #20]
 80053f2:	681b      	ldr	r3, [r3, #0]
 80053f4:	4a1b      	ldr	r2, [pc, #108]	; (8005464 <UART_SetConfig+0x348>)
 80053f6:	4293      	cmp	r3, r2
 80053f8:	d142      	bne.n	8005480 <UART_SetConfig+0x364>
 80053fa:	4b16      	ldr	r3, [pc, #88]	; (8005454 <UART_SetConfig+0x338>)
 80053fc:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80053fe:	f003 0307 	and.w	r3, r3, #7
 8005402:	2b05      	cmp	r3, #5
 8005404:	d838      	bhi.n	8005478 <UART_SetConfig+0x35c>
 8005406:	a201      	add	r2, pc, #4	; (adr r2, 800540c <UART_SetConfig+0x2f0>)
 8005408:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800540c:	08005425 	.word	0x08005425
 8005410:	0800542d 	.word	0x0800542d
 8005414:	08005435 	.word	0x08005435
 8005418:	0800543d 	.word	0x0800543d
 800541c:	08005469 	.word	0x08005469
 8005420:	08005471 	.word	0x08005471
 8005424:	2300      	movs	r3, #0
 8005426:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800542a:	e24e      	b.n	80058ca <UART_SetConfig+0x7ae>
 800542c:	2304      	movs	r3, #4
 800542e:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8005432:	e24a      	b.n	80058ca <UART_SetConfig+0x7ae>
 8005434:	2308      	movs	r3, #8
 8005436:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800543a:	e246      	b.n	80058ca <UART_SetConfig+0x7ae>
 800543c:	2310      	movs	r3, #16
 800543e:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8005442:	e242      	b.n	80058ca <UART_SetConfig+0x7ae>
 8005444:	cfff69f3 	.word	0xcfff69f3
 8005448:	58000c00 	.word	0x58000c00
 800544c:	11fff4ff 	.word	0x11fff4ff
 8005450:	40011000 	.word	0x40011000
 8005454:	58024400 	.word	0x58024400
 8005458:	40004400 	.word	0x40004400
 800545c:	40004800 	.word	0x40004800
 8005460:	40004c00 	.word	0x40004c00
 8005464:	40005000 	.word	0x40005000
 8005468:	2320      	movs	r3, #32
 800546a:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800546e:	e22c      	b.n	80058ca <UART_SetConfig+0x7ae>
 8005470:	2340      	movs	r3, #64	; 0x40
 8005472:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8005476:	e228      	b.n	80058ca <UART_SetConfig+0x7ae>
 8005478:	2380      	movs	r3, #128	; 0x80
 800547a:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800547e:	e224      	b.n	80058ca <UART_SetConfig+0x7ae>
 8005480:	697b      	ldr	r3, [r7, #20]
 8005482:	681b      	ldr	r3, [r3, #0]
 8005484:	4ab1      	ldr	r2, [pc, #708]	; (800574c <UART_SetConfig+0x630>)
 8005486:	4293      	cmp	r3, r2
 8005488:	d176      	bne.n	8005578 <UART_SetConfig+0x45c>
 800548a:	4bb1      	ldr	r3, [pc, #708]	; (8005750 <UART_SetConfig+0x634>)
 800548c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800548e:	f003 0338 	and.w	r3, r3, #56	; 0x38
 8005492:	2b28      	cmp	r3, #40	; 0x28
 8005494:	d86c      	bhi.n	8005570 <UART_SetConfig+0x454>
 8005496:	a201      	add	r2, pc, #4	; (adr r2, 800549c <UART_SetConfig+0x380>)
 8005498:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800549c:	08005541 	.word	0x08005541
 80054a0:	08005571 	.word	0x08005571
 80054a4:	08005571 	.word	0x08005571
 80054a8:	08005571 	.word	0x08005571
 80054ac:	08005571 	.word	0x08005571
 80054b0:	08005571 	.word	0x08005571
 80054b4:	08005571 	.word	0x08005571
 80054b8:	08005571 	.word	0x08005571
 80054bc:	08005549 	.word	0x08005549
 80054c0:	08005571 	.word	0x08005571
 80054c4:	08005571 	.word	0x08005571
 80054c8:	08005571 	.word	0x08005571
 80054cc:	08005571 	.word	0x08005571
 80054d0:	08005571 	.word	0x08005571
 80054d4:	08005571 	.word	0x08005571
 80054d8:	08005571 	.word	0x08005571
 80054dc:	08005551 	.word	0x08005551
 80054e0:	08005571 	.word	0x08005571
 80054e4:	08005571 	.word	0x08005571
 80054e8:	08005571 	.word	0x08005571
 80054ec:	08005571 	.word	0x08005571
 80054f0:	08005571 	.word	0x08005571
 80054f4:	08005571 	.word	0x08005571
 80054f8:	08005571 	.word	0x08005571
 80054fc:	08005559 	.word	0x08005559
 8005500:	08005571 	.word	0x08005571
 8005504:	08005571 	.word	0x08005571
 8005508:	08005571 	.word	0x08005571
 800550c:	08005571 	.word	0x08005571
 8005510:	08005571 	.word	0x08005571
 8005514:	08005571 	.word	0x08005571
 8005518:	08005571 	.word	0x08005571
 800551c:	08005561 	.word	0x08005561
 8005520:	08005571 	.word	0x08005571
 8005524:	08005571 	.word	0x08005571
 8005528:	08005571 	.word	0x08005571
 800552c:	08005571 	.word	0x08005571
 8005530:	08005571 	.word	0x08005571
 8005534:	08005571 	.word	0x08005571
 8005538:	08005571 	.word	0x08005571
 800553c:	08005569 	.word	0x08005569
 8005540:	2301      	movs	r3, #1
 8005542:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8005546:	e1c0      	b.n	80058ca <UART_SetConfig+0x7ae>
 8005548:	2304      	movs	r3, #4
 800554a:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800554e:	e1bc      	b.n	80058ca <UART_SetConfig+0x7ae>
 8005550:	2308      	movs	r3, #8
 8005552:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8005556:	e1b8      	b.n	80058ca <UART_SetConfig+0x7ae>
 8005558:	2310      	movs	r3, #16
 800555a:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800555e:	e1b4      	b.n	80058ca <UART_SetConfig+0x7ae>
 8005560:	2320      	movs	r3, #32
 8005562:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8005566:	e1b0      	b.n	80058ca <UART_SetConfig+0x7ae>
 8005568:	2340      	movs	r3, #64	; 0x40
 800556a:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800556e:	e1ac      	b.n	80058ca <UART_SetConfig+0x7ae>
 8005570:	2380      	movs	r3, #128	; 0x80
 8005572:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8005576:	e1a8      	b.n	80058ca <UART_SetConfig+0x7ae>
 8005578:	697b      	ldr	r3, [r7, #20]
 800557a:	681b      	ldr	r3, [r3, #0]
 800557c:	4a75      	ldr	r2, [pc, #468]	; (8005754 <UART_SetConfig+0x638>)
 800557e:	4293      	cmp	r3, r2
 8005580:	d130      	bne.n	80055e4 <UART_SetConfig+0x4c8>
 8005582:	4b73      	ldr	r3, [pc, #460]	; (8005750 <UART_SetConfig+0x634>)
 8005584:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8005586:	f003 0307 	and.w	r3, r3, #7
 800558a:	2b05      	cmp	r3, #5
 800558c:	d826      	bhi.n	80055dc <UART_SetConfig+0x4c0>
 800558e:	a201      	add	r2, pc, #4	; (adr r2, 8005594 <UART_SetConfig+0x478>)
 8005590:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005594:	080055ad 	.word	0x080055ad
 8005598:	080055b5 	.word	0x080055b5
 800559c:	080055bd 	.word	0x080055bd
 80055a0:	080055c5 	.word	0x080055c5
 80055a4:	080055cd 	.word	0x080055cd
 80055a8:	080055d5 	.word	0x080055d5
 80055ac:	2300      	movs	r3, #0
 80055ae:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 80055b2:	e18a      	b.n	80058ca <UART_SetConfig+0x7ae>
 80055b4:	2304      	movs	r3, #4
 80055b6:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 80055ba:	e186      	b.n	80058ca <UART_SetConfig+0x7ae>
 80055bc:	2308      	movs	r3, #8
 80055be:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 80055c2:	e182      	b.n	80058ca <UART_SetConfig+0x7ae>
 80055c4:	2310      	movs	r3, #16
 80055c6:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 80055ca:	e17e      	b.n	80058ca <UART_SetConfig+0x7ae>
 80055cc:	2320      	movs	r3, #32
 80055ce:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 80055d2:	e17a      	b.n	80058ca <UART_SetConfig+0x7ae>
 80055d4:	2340      	movs	r3, #64	; 0x40
 80055d6:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 80055da:	e176      	b.n	80058ca <UART_SetConfig+0x7ae>
 80055dc:	2380      	movs	r3, #128	; 0x80
 80055de:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 80055e2:	e172      	b.n	80058ca <UART_SetConfig+0x7ae>
 80055e4:	697b      	ldr	r3, [r7, #20]
 80055e6:	681b      	ldr	r3, [r3, #0]
 80055e8:	4a5b      	ldr	r2, [pc, #364]	; (8005758 <UART_SetConfig+0x63c>)
 80055ea:	4293      	cmp	r3, r2
 80055ec:	d130      	bne.n	8005650 <UART_SetConfig+0x534>
 80055ee:	4b58      	ldr	r3, [pc, #352]	; (8005750 <UART_SetConfig+0x634>)
 80055f0:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80055f2:	f003 0307 	and.w	r3, r3, #7
 80055f6:	2b05      	cmp	r3, #5
 80055f8:	d826      	bhi.n	8005648 <UART_SetConfig+0x52c>
 80055fa:	a201      	add	r2, pc, #4	; (adr r2, 8005600 <UART_SetConfig+0x4e4>)
 80055fc:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005600:	08005619 	.word	0x08005619
 8005604:	08005621 	.word	0x08005621
 8005608:	08005629 	.word	0x08005629
 800560c:	08005631 	.word	0x08005631
 8005610:	08005639 	.word	0x08005639
 8005614:	08005641 	.word	0x08005641
 8005618:	2300      	movs	r3, #0
 800561a:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800561e:	e154      	b.n	80058ca <UART_SetConfig+0x7ae>
 8005620:	2304      	movs	r3, #4
 8005622:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8005626:	e150      	b.n	80058ca <UART_SetConfig+0x7ae>
 8005628:	2308      	movs	r3, #8
 800562a:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800562e:	e14c      	b.n	80058ca <UART_SetConfig+0x7ae>
 8005630:	2310      	movs	r3, #16
 8005632:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8005636:	e148      	b.n	80058ca <UART_SetConfig+0x7ae>
 8005638:	2320      	movs	r3, #32
 800563a:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800563e:	e144      	b.n	80058ca <UART_SetConfig+0x7ae>
 8005640:	2340      	movs	r3, #64	; 0x40
 8005642:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8005646:	e140      	b.n	80058ca <UART_SetConfig+0x7ae>
 8005648:	2380      	movs	r3, #128	; 0x80
 800564a:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800564e:	e13c      	b.n	80058ca <UART_SetConfig+0x7ae>
 8005650:	697b      	ldr	r3, [r7, #20]
 8005652:	681b      	ldr	r3, [r3, #0]
 8005654:	4a41      	ldr	r2, [pc, #260]	; (800575c <UART_SetConfig+0x640>)
 8005656:	4293      	cmp	r3, r2
 8005658:	f040 8082 	bne.w	8005760 <UART_SetConfig+0x644>
 800565c:	4b3c      	ldr	r3, [pc, #240]	; (8005750 <UART_SetConfig+0x634>)
 800565e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8005660:	f003 0338 	and.w	r3, r3, #56	; 0x38
 8005664:	2b28      	cmp	r3, #40	; 0x28
 8005666:	d86d      	bhi.n	8005744 <UART_SetConfig+0x628>
 8005668:	a201      	add	r2, pc, #4	; (adr r2, 8005670 <UART_SetConfig+0x554>)
 800566a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800566e:	bf00      	nop
 8005670:	08005715 	.word	0x08005715
 8005674:	08005745 	.word	0x08005745
 8005678:	08005745 	.word	0x08005745
 800567c:	08005745 	.word	0x08005745
 8005680:	08005745 	.word	0x08005745
 8005684:	08005745 	.word	0x08005745
 8005688:	08005745 	.word	0x08005745
 800568c:	08005745 	.word	0x08005745
 8005690:	0800571d 	.word	0x0800571d
 8005694:	08005745 	.word	0x08005745
 8005698:	08005745 	.word	0x08005745
 800569c:	08005745 	.word	0x08005745
 80056a0:	08005745 	.word	0x08005745
 80056a4:	08005745 	.word	0x08005745
 80056a8:	08005745 	.word	0x08005745
 80056ac:	08005745 	.word	0x08005745
 80056b0:	08005725 	.word	0x08005725
 80056b4:	08005745 	.word	0x08005745
 80056b8:	08005745 	.word	0x08005745
 80056bc:	08005745 	.word	0x08005745
 80056c0:	08005745 	.word	0x08005745
 80056c4:	08005745 	.word	0x08005745
 80056c8:	08005745 	.word	0x08005745
 80056cc:	08005745 	.word	0x08005745
 80056d0:	0800572d 	.word	0x0800572d
 80056d4:	08005745 	.word	0x08005745
 80056d8:	08005745 	.word	0x08005745
 80056dc:	08005745 	.word	0x08005745
 80056e0:	08005745 	.word	0x08005745
 80056e4:	08005745 	.word	0x08005745
 80056e8:	08005745 	.word	0x08005745
 80056ec:	08005745 	.word	0x08005745
 80056f0:	08005735 	.word	0x08005735
 80056f4:	08005745 	.word	0x08005745
 80056f8:	08005745 	.word	0x08005745
 80056fc:	08005745 	.word	0x08005745
 8005700:	08005745 	.word	0x08005745
 8005704:	08005745 	.word	0x08005745
 8005708:	08005745 	.word	0x08005745
 800570c:	08005745 	.word	0x08005745
 8005710:	0800573d 	.word	0x0800573d
 8005714:	2301      	movs	r3, #1
 8005716:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800571a:	e0d6      	b.n	80058ca <UART_SetConfig+0x7ae>
 800571c:	2304      	movs	r3, #4
 800571e:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8005722:	e0d2      	b.n	80058ca <UART_SetConfig+0x7ae>
 8005724:	2308      	movs	r3, #8
 8005726:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800572a:	e0ce      	b.n	80058ca <UART_SetConfig+0x7ae>
 800572c:	2310      	movs	r3, #16
 800572e:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8005732:	e0ca      	b.n	80058ca <UART_SetConfig+0x7ae>
 8005734:	2320      	movs	r3, #32
 8005736:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800573a:	e0c6      	b.n	80058ca <UART_SetConfig+0x7ae>
 800573c:	2340      	movs	r3, #64	; 0x40
 800573e:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8005742:	e0c2      	b.n	80058ca <UART_SetConfig+0x7ae>
 8005744:	2380      	movs	r3, #128	; 0x80
 8005746:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800574a:	e0be      	b.n	80058ca <UART_SetConfig+0x7ae>
 800574c:	40011400 	.word	0x40011400
 8005750:	58024400 	.word	0x58024400
 8005754:	40007800 	.word	0x40007800
 8005758:	40007c00 	.word	0x40007c00
 800575c:	40011800 	.word	0x40011800
 8005760:	697b      	ldr	r3, [r7, #20]
 8005762:	681b      	ldr	r3, [r3, #0]
 8005764:	4aad      	ldr	r2, [pc, #692]	; (8005a1c <UART_SetConfig+0x900>)
 8005766:	4293      	cmp	r3, r2
 8005768:	d176      	bne.n	8005858 <UART_SetConfig+0x73c>
 800576a:	4bad      	ldr	r3, [pc, #692]	; (8005a20 <UART_SetConfig+0x904>)
 800576c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800576e:	f003 0338 	and.w	r3, r3, #56	; 0x38
 8005772:	2b28      	cmp	r3, #40	; 0x28
 8005774:	d86c      	bhi.n	8005850 <UART_SetConfig+0x734>
 8005776:	a201      	add	r2, pc, #4	; (adr r2, 800577c <UART_SetConfig+0x660>)
 8005778:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800577c:	08005821 	.word	0x08005821
 8005780:	08005851 	.word	0x08005851
 8005784:	08005851 	.word	0x08005851
 8005788:	08005851 	.word	0x08005851
 800578c:	08005851 	.word	0x08005851
 8005790:	08005851 	.word	0x08005851
 8005794:	08005851 	.word	0x08005851
 8005798:	08005851 	.word	0x08005851
 800579c:	08005829 	.word	0x08005829
 80057a0:	08005851 	.word	0x08005851
 80057a4:	08005851 	.word	0x08005851
 80057a8:	08005851 	.word	0x08005851
 80057ac:	08005851 	.word	0x08005851
 80057b0:	08005851 	.word	0x08005851
 80057b4:	08005851 	.word	0x08005851
 80057b8:	08005851 	.word	0x08005851
 80057bc:	08005831 	.word	0x08005831
 80057c0:	08005851 	.word	0x08005851
 80057c4:	08005851 	.word	0x08005851
 80057c8:	08005851 	.word	0x08005851
 80057cc:	08005851 	.word	0x08005851
 80057d0:	08005851 	.word	0x08005851
 80057d4:	08005851 	.word	0x08005851
 80057d8:	08005851 	.word	0x08005851
 80057dc:	08005839 	.word	0x08005839
 80057e0:	08005851 	.word	0x08005851
 80057e4:	08005851 	.word	0x08005851
 80057e8:	08005851 	.word	0x08005851
 80057ec:	08005851 	.word	0x08005851
 80057f0:	08005851 	.word	0x08005851
 80057f4:	08005851 	.word	0x08005851
 80057f8:	08005851 	.word	0x08005851
 80057fc:	08005841 	.word	0x08005841
 8005800:	08005851 	.word	0x08005851
 8005804:	08005851 	.word	0x08005851
 8005808:	08005851 	.word	0x08005851
 800580c:	08005851 	.word	0x08005851
 8005810:	08005851 	.word	0x08005851
 8005814:	08005851 	.word	0x08005851
 8005818:	08005851 	.word	0x08005851
 800581c:	08005849 	.word	0x08005849
 8005820:	2301      	movs	r3, #1
 8005822:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8005826:	e050      	b.n	80058ca <UART_SetConfig+0x7ae>
 8005828:	2304      	movs	r3, #4
 800582a:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800582e:	e04c      	b.n	80058ca <UART_SetConfig+0x7ae>
 8005830:	2308      	movs	r3, #8
 8005832:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8005836:	e048      	b.n	80058ca <UART_SetConfig+0x7ae>
 8005838:	2310      	movs	r3, #16
 800583a:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800583e:	e044      	b.n	80058ca <UART_SetConfig+0x7ae>
 8005840:	2320      	movs	r3, #32
 8005842:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8005846:	e040      	b.n	80058ca <UART_SetConfig+0x7ae>
 8005848:	2340      	movs	r3, #64	; 0x40
 800584a:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800584e:	e03c      	b.n	80058ca <UART_SetConfig+0x7ae>
 8005850:	2380      	movs	r3, #128	; 0x80
 8005852:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8005856:	e038      	b.n	80058ca <UART_SetConfig+0x7ae>
 8005858:	697b      	ldr	r3, [r7, #20]
 800585a:	681b      	ldr	r3, [r3, #0]
 800585c:	4a71      	ldr	r2, [pc, #452]	; (8005a24 <UART_SetConfig+0x908>)
 800585e:	4293      	cmp	r3, r2
 8005860:	d130      	bne.n	80058c4 <UART_SetConfig+0x7a8>
 8005862:	4b6f      	ldr	r3, [pc, #444]	; (8005a20 <UART_SetConfig+0x904>)
 8005864:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8005866:	f003 0307 	and.w	r3, r3, #7
 800586a:	2b05      	cmp	r3, #5
 800586c:	d826      	bhi.n	80058bc <UART_SetConfig+0x7a0>
 800586e:	a201      	add	r2, pc, #4	; (adr r2, 8005874 <UART_SetConfig+0x758>)
 8005870:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005874:	0800588d 	.word	0x0800588d
 8005878:	08005895 	.word	0x08005895
 800587c:	0800589d 	.word	0x0800589d
 8005880:	080058a5 	.word	0x080058a5
 8005884:	080058ad 	.word	0x080058ad
 8005888:	080058b5 	.word	0x080058b5
 800588c:	2302      	movs	r3, #2
 800588e:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8005892:	e01a      	b.n	80058ca <UART_SetConfig+0x7ae>
 8005894:	2304      	movs	r3, #4
 8005896:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800589a:	e016      	b.n	80058ca <UART_SetConfig+0x7ae>
 800589c:	2308      	movs	r3, #8
 800589e:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 80058a2:	e012      	b.n	80058ca <UART_SetConfig+0x7ae>
 80058a4:	2310      	movs	r3, #16
 80058a6:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 80058aa:	e00e      	b.n	80058ca <UART_SetConfig+0x7ae>
 80058ac:	2320      	movs	r3, #32
 80058ae:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 80058b2:	e00a      	b.n	80058ca <UART_SetConfig+0x7ae>
 80058b4:	2340      	movs	r3, #64	; 0x40
 80058b6:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 80058ba:	e006      	b.n	80058ca <UART_SetConfig+0x7ae>
 80058bc:	2380      	movs	r3, #128	; 0x80
 80058be:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 80058c2:	e002      	b.n	80058ca <UART_SetConfig+0x7ae>
 80058c4:	2380      	movs	r3, #128	; 0x80
 80058c6:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43

  /* Check LPUART instance */
  if (UART_INSTANCE_LOWPOWER(huart))
 80058ca:	697b      	ldr	r3, [r7, #20]
 80058cc:	681b      	ldr	r3, [r3, #0]
 80058ce:	4a55      	ldr	r2, [pc, #340]	; (8005a24 <UART_SetConfig+0x908>)
 80058d0:	4293      	cmp	r3, r2
 80058d2:	f040 80f8 	bne.w	8005ac6 <UART_SetConfig+0x9aa>
  {
    /* Retrieve frequency clock */
    switch (clocksource)
 80058d6:	f897 3043 	ldrb.w	r3, [r7, #67]	; 0x43
 80058da:	2b20      	cmp	r3, #32
 80058dc:	dc46      	bgt.n	800596c <UART_SetConfig+0x850>
 80058de:	2b02      	cmp	r3, #2
 80058e0:	db75      	blt.n	80059ce <UART_SetConfig+0x8b2>
 80058e2:	3b02      	subs	r3, #2
 80058e4:	2b1e      	cmp	r3, #30
 80058e6:	d872      	bhi.n	80059ce <UART_SetConfig+0x8b2>
 80058e8:	a201      	add	r2, pc, #4	; (adr r2, 80058f0 <UART_SetConfig+0x7d4>)
 80058ea:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80058ee:	bf00      	nop
 80058f0:	08005973 	.word	0x08005973
 80058f4:	080059cf 	.word	0x080059cf
 80058f8:	0800597b 	.word	0x0800597b
 80058fc:	080059cf 	.word	0x080059cf
 8005900:	080059cf 	.word	0x080059cf
 8005904:	080059cf 	.word	0x080059cf
 8005908:	0800598b 	.word	0x0800598b
 800590c:	080059cf 	.word	0x080059cf
 8005910:	080059cf 	.word	0x080059cf
 8005914:	080059cf 	.word	0x080059cf
 8005918:	080059cf 	.word	0x080059cf
 800591c:	080059cf 	.word	0x080059cf
 8005920:	080059cf 	.word	0x080059cf
 8005924:	080059cf 	.word	0x080059cf
 8005928:	0800599b 	.word	0x0800599b
 800592c:	080059cf 	.word	0x080059cf
 8005930:	080059cf 	.word	0x080059cf
 8005934:	080059cf 	.word	0x080059cf
 8005938:	080059cf 	.word	0x080059cf
 800593c:	080059cf 	.word	0x080059cf
 8005940:	080059cf 	.word	0x080059cf
 8005944:	080059cf 	.word	0x080059cf
 8005948:	080059cf 	.word	0x080059cf
 800594c:	080059cf 	.word	0x080059cf
 8005950:	080059cf 	.word	0x080059cf
 8005954:	080059cf 	.word	0x080059cf
 8005958:	080059cf 	.word	0x080059cf
 800595c:	080059cf 	.word	0x080059cf
 8005960:	080059cf 	.word	0x080059cf
 8005964:	080059cf 	.word	0x080059cf
 8005968:	080059c1 	.word	0x080059c1
 800596c:	2b40      	cmp	r3, #64	; 0x40
 800596e:	d02a      	beq.n	80059c6 <UART_SetConfig+0x8aa>
 8005970:	e02d      	b.n	80059ce <UART_SetConfig+0x8b2>
    {
      case UART_CLOCKSOURCE_D3PCLK1:
        pclk = HAL_RCCEx_GetD3PCLK1Freq();
 8005972:	f7fe fed3 	bl	800471c <HAL_RCCEx_GetD3PCLK1Freq>
 8005976:	63f8      	str	r0, [r7, #60]	; 0x3c
        break;
 8005978:	e02f      	b.n	80059da <UART_SetConfig+0x8be>
      case UART_CLOCKSOURCE_PLL2:
        HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 800597a:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800597e:	4618      	mov	r0, r3
 8005980:	f7fe fee2 	bl	8004748 <HAL_RCCEx_GetPLL2ClockFreq>
        pclk = pll2_clocks.PLL2_Q_Frequency;
 8005984:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005986:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 8005988:	e027      	b.n	80059da <UART_SetConfig+0x8be>
      case UART_CLOCKSOURCE_PLL3:
        HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 800598a:	f107 0318 	add.w	r3, r7, #24
 800598e:	4618      	mov	r0, r3
 8005990:	f7ff f82e 	bl	80049f0 <HAL_RCCEx_GetPLL3ClockFreq>
        pclk = pll3_clocks.PLL3_Q_Frequency;
 8005994:	69fb      	ldr	r3, [r7, #28]
 8005996:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 8005998:	e01f      	b.n	80059da <UART_SetConfig+0x8be>
      case UART_CLOCKSOURCE_HSI:
        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 800599a:	4b21      	ldr	r3, [pc, #132]	; (8005a20 <UART_SetConfig+0x904>)
 800599c:	681b      	ldr	r3, [r3, #0]
 800599e:	f003 0320 	and.w	r3, r3, #32
 80059a2:	2b00      	cmp	r3, #0
 80059a4:	d009      	beq.n	80059ba <UART_SetConfig+0x89e>
        {
          pclk = (uint32_t)(HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3U));
 80059a6:	4b1e      	ldr	r3, [pc, #120]	; (8005a20 <UART_SetConfig+0x904>)
 80059a8:	681b      	ldr	r3, [r3, #0]
 80059aa:	08db      	lsrs	r3, r3, #3
 80059ac:	f003 0303 	and.w	r3, r3, #3
 80059b0:	4a1d      	ldr	r2, [pc, #116]	; (8005a28 <UART_SetConfig+0x90c>)
 80059b2:	fa22 f303 	lsr.w	r3, r2, r3
 80059b6:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          pclk = (uint32_t) HSI_VALUE;
        }
        break;
 80059b8:	e00f      	b.n	80059da <UART_SetConfig+0x8be>
          pclk = (uint32_t) HSI_VALUE;
 80059ba:	4b1b      	ldr	r3, [pc, #108]	; (8005a28 <UART_SetConfig+0x90c>)
 80059bc:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 80059be:	e00c      	b.n	80059da <UART_SetConfig+0x8be>
      case UART_CLOCKSOURCE_CSI:
        pclk = (uint32_t) CSI_VALUE;
 80059c0:	4b1a      	ldr	r3, [pc, #104]	; (8005a2c <UART_SetConfig+0x910>)
 80059c2:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 80059c4:	e009      	b.n	80059da <UART_SetConfig+0x8be>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 80059c6:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 80059ca:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 80059cc:	e005      	b.n	80059da <UART_SetConfig+0x8be>
      default:
        pclk = 0U;
 80059ce:	2300      	movs	r3, #0
 80059d0:	63fb      	str	r3, [r7, #60]	; 0x3c
        ret = HAL_ERROR;
 80059d2:	2301      	movs	r3, #1
 80059d4:	f887 3042 	strb.w	r3, [r7, #66]	; 0x42
        break;
 80059d8:	bf00      	nop
    }

    /* If proper clock source reported */
    if (pclk != 0U)
 80059da:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80059dc:	2b00      	cmp	r3, #0
 80059de:	f000 81ee 	beq.w	8005dbe <UART_SetConfig+0xca2>
    {
      /* Compute clock after Prescaler */
      lpuart_ker_ck_pres = (pclk / UARTPrescTable[huart->Init.ClockPrescaler]);
 80059e2:	697b      	ldr	r3, [r7, #20]
 80059e4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80059e6:	4a12      	ldr	r2, [pc, #72]	; (8005a30 <UART_SetConfig+0x914>)
 80059e8:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 80059ec:	461a      	mov	r2, r3
 80059ee:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80059f0:	fbb3 f3f2 	udiv	r3, r3, r2
 80059f4:	633b      	str	r3, [r7, #48]	; 0x30

      /* Ensure that Frequency clock is in the range [3 * baudrate, 4096 * baudrate] */
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 80059f6:	697b      	ldr	r3, [r7, #20]
 80059f8:	685a      	ldr	r2, [r3, #4]
 80059fa:	4613      	mov	r3, r2
 80059fc:	005b      	lsls	r3, r3, #1
 80059fe:	4413      	add	r3, r2
 8005a00:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8005a02:	429a      	cmp	r2, r3
 8005a04:	d305      	bcc.n	8005a12 <UART_SetConfig+0x8f6>
          (lpuart_ker_ck_pres > (4096U * huart->Init.BaudRate)))
 8005a06:	697b      	ldr	r3, [r7, #20]
 8005a08:	685b      	ldr	r3, [r3, #4]
 8005a0a:	031b      	lsls	r3, r3, #12
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 8005a0c:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8005a0e:	429a      	cmp	r2, r3
 8005a10:	d910      	bls.n	8005a34 <UART_SetConfig+0x918>
      {
        ret = HAL_ERROR;
 8005a12:	2301      	movs	r3, #1
 8005a14:	f887 3042 	strb.w	r3, [r7, #66]	; 0x42
 8005a18:	e1d1      	b.n	8005dbe <UART_SetConfig+0xca2>
 8005a1a:	bf00      	nop
 8005a1c:	40011c00 	.word	0x40011c00
 8005a20:	58024400 	.word	0x58024400
 8005a24:	58000c00 	.word	0x58000c00
 8005a28:	03d09000 	.word	0x03d09000
 8005a2c:	003d0900 	.word	0x003d0900
 8005a30:	0800b070 	.word	0x0800b070
      }
      else
      {
        /* Check computed UsartDiv value is in allocated range
           (it is forbidden to write values lower than 0x300 in the LPUART_BRR register) */
        usartdiv = (uint32_t)(UART_DIV_LPUART(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8005a34:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8005a36:	2200      	movs	r2, #0
 8005a38:	60bb      	str	r3, [r7, #8]
 8005a3a:	60fa      	str	r2, [r7, #12]
 8005a3c:	697b      	ldr	r3, [r7, #20]
 8005a3e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005a40:	4ac0      	ldr	r2, [pc, #768]	; (8005d44 <UART_SetConfig+0xc28>)
 8005a42:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8005a46:	b29b      	uxth	r3, r3
 8005a48:	2200      	movs	r2, #0
 8005a4a:	603b      	str	r3, [r7, #0]
 8005a4c:	607a      	str	r2, [r7, #4]
 8005a4e:	e9d7 2300 	ldrd	r2, r3, [r7]
 8005a52:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 8005a56:	f7fa fcab 	bl	80003b0 <__aeabi_uldivmod>
 8005a5a:	4602      	mov	r2, r0
 8005a5c:	460b      	mov	r3, r1
 8005a5e:	4610      	mov	r0, r2
 8005a60:	4619      	mov	r1, r3
 8005a62:	f04f 0200 	mov.w	r2, #0
 8005a66:	f04f 0300 	mov.w	r3, #0
 8005a6a:	020b      	lsls	r3, r1, #8
 8005a6c:	ea43 6310 	orr.w	r3, r3, r0, lsr #24
 8005a70:	0202      	lsls	r2, r0, #8
 8005a72:	6979      	ldr	r1, [r7, #20]
 8005a74:	6849      	ldr	r1, [r1, #4]
 8005a76:	0849      	lsrs	r1, r1, #1
 8005a78:	2000      	movs	r0, #0
 8005a7a:	460c      	mov	r4, r1
 8005a7c:	4605      	mov	r5, r0
 8005a7e:	eb12 0804 	adds.w	r8, r2, r4
 8005a82:	eb43 0905 	adc.w	r9, r3, r5
 8005a86:	697b      	ldr	r3, [r7, #20]
 8005a88:	685b      	ldr	r3, [r3, #4]
 8005a8a:	2200      	movs	r2, #0
 8005a8c:	469a      	mov	sl, r3
 8005a8e:	4693      	mov	fp, r2
 8005a90:	4652      	mov	r2, sl
 8005a92:	465b      	mov	r3, fp
 8005a94:	4640      	mov	r0, r8
 8005a96:	4649      	mov	r1, r9
 8005a98:	f7fa fc8a 	bl	80003b0 <__aeabi_uldivmod>
 8005a9c:	4602      	mov	r2, r0
 8005a9e:	460b      	mov	r3, r1
 8005aa0:	4613      	mov	r3, r2
 8005aa2:	63bb      	str	r3, [r7, #56]	; 0x38
        if ((usartdiv >= LPUART_BRR_MIN) && (usartdiv <= LPUART_BRR_MAX))
 8005aa4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005aa6:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8005aaa:	d308      	bcc.n	8005abe <UART_SetConfig+0x9a2>
 8005aac:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005aae:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8005ab2:	d204      	bcs.n	8005abe <UART_SetConfig+0x9a2>
        {
          huart->Instance->BRR = usartdiv;
 8005ab4:	697b      	ldr	r3, [r7, #20]
 8005ab6:	681b      	ldr	r3, [r3, #0]
 8005ab8:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8005aba:	60da      	str	r2, [r3, #12]
 8005abc:	e17f      	b.n	8005dbe <UART_SetConfig+0xca2>
        }
        else
        {
          ret = HAL_ERROR;
 8005abe:	2301      	movs	r3, #1
 8005ac0:	f887 3042 	strb.w	r3, [r7, #66]	; 0x42
 8005ac4:	e17b      	b.n	8005dbe <UART_SetConfig+0xca2>
      } /* if ( (lpuart_ker_ck_pres < (3 * huart->Init.BaudRate) ) ||
                (lpuart_ker_ck_pres > (4096 * huart->Init.BaudRate) )) */
    } /* if (pclk != 0) */
  }
  /* Check UART Over Sampling to set Baud Rate Register */
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8005ac6:	697b      	ldr	r3, [r7, #20]
 8005ac8:	69db      	ldr	r3, [r3, #28]
 8005aca:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8005ace:	f040 80bd 	bne.w	8005c4c <UART_SetConfig+0xb30>
  {
    switch (clocksource)
 8005ad2:	f897 3043 	ldrb.w	r3, [r7, #67]	; 0x43
 8005ad6:	2b20      	cmp	r3, #32
 8005ad8:	dc48      	bgt.n	8005b6c <UART_SetConfig+0xa50>
 8005ada:	2b00      	cmp	r3, #0
 8005adc:	db7b      	blt.n	8005bd6 <UART_SetConfig+0xaba>
 8005ade:	2b20      	cmp	r3, #32
 8005ae0:	d879      	bhi.n	8005bd6 <UART_SetConfig+0xaba>
 8005ae2:	a201      	add	r2, pc, #4	; (adr r2, 8005ae8 <UART_SetConfig+0x9cc>)
 8005ae4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005ae8:	08005b73 	.word	0x08005b73
 8005aec:	08005b7b 	.word	0x08005b7b
 8005af0:	08005bd7 	.word	0x08005bd7
 8005af4:	08005bd7 	.word	0x08005bd7
 8005af8:	08005b83 	.word	0x08005b83
 8005afc:	08005bd7 	.word	0x08005bd7
 8005b00:	08005bd7 	.word	0x08005bd7
 8005b04:	08005bd7 	.word	0x08005bd7
 8005b08:	08005b93 	.word	0x08005b93
 8005b0c:	08005bd7 	.word	0x08005bd7
 8005b10:	08005bd7 	.word	0x08005bd7
 8005b14:	08005bd7 	.word	0x08005bd7
 8005b18:	08005bd7 	.word	0x08005bd7
 8005b1c:	08005bd7 	.word	0x08005bd7
 8005b20:	08005bd7 	.word	0x08005bd7
 8005b24:	08005bd7 	.word	0x08005bd7
 8005b28:	08005ba3 	.word	0x08005ba3
 8005b2c:	08005bd7 	.word	0x08005bd7
 8005b30:	08005bd7 	.word	0x08005bd7
 8005b34:	08005bd7 	.word	0x08005bd7
 8005b38:	08005bd7 	.word	0x08005bd7
 8005b3c:	08005bd7 	.word	0x08005bd7
 8005b40:	08005bd7 	.word	0x08005bd7
 8005b44:	08005bd7 	.word	0x08005bd7
 8005b48:	08005bd7 	.word	0x08005bd7
 8005b4c:	08005bd7 	.word	0x08005bd7
 8005b50:	08005bd7 	.word	0x08005bd7
 8005b54:	08005bd7 	.word	0x08005bd7
 8005b58:	08005bd7 	.word	0x08005bd7
 8005b5c:	08005bd7 	.word	0x08005bd7
 8005b60:	08005bd7 	.word	0x08005bd7
 8005b64:	08005bd7 	.word	0x08005bd7
 8005b68:	08005bc9 	.word	0x08005bc9
 8005b6c:	2b40      	cmp	r3, #64	; 0x40
 8005b6e:	d02e      	beq.n	8005bce <UART_SetConfig+0xab2>
 8005b70:	e031      	b.n	8005bd6 <UART_SetConfig+0xaba>
    {
      case UART_CLOCKSOURCE_D2PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8005b72:	f7fd fc07 	bl	8003384 <HAL_RCC_GetPCLK1Freq>
 8005b76:	63f8      	str	r0, [r7, #60]	; 0x3c
        break;
 8005b78:	e033      	b.n	8005be2 <UART_SetConfig+0xac6>
      case UART_CLOCKSOURCE_D2PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8005b7a:	f7fd fc19 	bl	80033b0 <HAL_RCC_GetPCLK2Freq>
 8005b7e:	63f8      	str	r0, [r7, #60]	; 0x3c
        break;
 8005b80:	e02f      	b.n	8005be2 <UART_SetConfig+0xac6>
      case UART_CLOCKSOURCE_PLL2:
        HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 8005b82:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8005b86:	4618      	mov	r0, r3
 8005b88:	f7fe fdde 	bl	8004748 <HAL_RCCEx_GetPLL2ClockFreq>
        pclk = pll2_clocks.PLL2_Q_Frequency;
 8005b8c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005b8e:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 8005b90:	e027      	b.n	8005be2 <UART_SetConfig+0xac6>
      case UART_CLOCKSOURCE_PLL3:
        HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 8005b92:	f107 0318 	add.w	r3, r7, #24
 8005b96:	4618      	mov	r0, r3
 8005b98:	f7fe ff2a 	bl	80049f0 <HAL_RCCEx_GetPLL3ClockFreq>
        pclk = pll3_clocks.PLL3_Q_Frequency;
 8005b9c:	69fb      	ldr	r3, [r7, #28]
 8005b9e:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 8005ba0:	e01f      	b.n	8005be2 <UART_SetConfig+0xac6>
      case UART_CLOCKSOURCE_HSI:
        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8005ba2:	4b69      	ldr	r3, [pc, #420]	; (8005d48 <UART_SetConfig+0xc2c>)
 8005ba4:	681b      	ldr	r3, [r3, #0]
 8005ba6:	f003 0320 	and.w	r3, r3, #32
 8005baa:	2b00      	cmp	r3, #0
 8005bac:	d009      	beq.n	8005bc2 <UART_SetConfig+0xaa6>
        {
          pclk = (uint32_t)(HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3U));
 8005bae:	4b66      	ldr	r3, [pc, #408]	; (8005d48 <UART_SetConfig+0xc2c>)
 8005bb0:	681b      	ldr	r3, [r3, #0]
 8005bb2:	08db      	lsrs	r3, r3, #3
 8005bb4:	f003 0303 	and.w	r3, r3, #3
 8005bb8:	4a64      	ldr	r2, [pc, #400]	; (8005d4c <UART_SetConfig+0xc30>)
 8005bba:	fa22 f303 	lsr.w	r3, r2, r3
 8005bbe:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          pclk = (uint32_t) HSI_VALUE;
        }
        break;
 8005bc0:	e00f      	b.n	8005be2 <UART_SetConfig+0xac6>
          pclk = (uint32_t) HSI_VALUE;
 8005bc2:	4b62      	ldr	r3, [pc, #392]	; (8005d4c <UART_SetConfig+0xc30>)
 8005bc4:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 8005bc6:	e00c      	b.n	8005be2 <UART_SetConfig+0xac6>
      case UART_CLOCKSOURCE_CSI:
        pclk = (uint32_t) CSI_VALUE;
 8005bc8:	4b61      	ldr	r3, [pc, #388]	; (8005d50 <UART_SetConfig+0xc34>)
 8005bca:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 8005bcc:	e009      	b.n	8005be2 <UART_SetConfig+0xac6>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8005bce:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8005bd2:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 8005bd4:	e005      	b.n	8005be2 <UART_SetConfig+0xac6>
      default:
        pclk = 0U;
 8005bd6:	2300      	movs	r3, #0
 8005bd8:	63fb      	str	r3, [r7, #60]	; 0x3c
        ret = HAL_ERROR;
 8005bda:	2301      	movs	r3, #1
 8005bdc:	f887 3042 	strb.w	r3, [r7, #66]	; 0x42
        break;
 8005be0:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 8005be2:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8005be4:	2b00      	cmp	r3, #0
 8005be6:	f000 80ea 	beq.w	8005dbe <UART_SetConfig+0xca2>
    {
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8005bea:	697b      	ldr	r3, [r7, #20]
 8005bec:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005bee:	4a55      	ldr	r2, [pc, #340]	; (8005d44 <UART_SetConfig+0xc28>)
 8005bf0:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8005bf4:	461a      	mov	r2, r3
 8005bf6:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8005bf8:	fbb3 f3f2 	udiv	r3, r3, r2
 8005bfc:	005a      	lsls	r2, r3, #1
 8005bfe:	697b      	ldr	r3, [r7, #20]
 8005c00:	685b      	ldr	r3, [r3, #4]
 8005c02:	085b      	lsrs	r3, r3, #1
 8005c04:	441a      	add	r2, r3
 8005c06:	697b      	ldr	r3, [r7, #20]
 8005c08:	685b      	ldr	r3, [r3, #4]
 8005c0a:	fbb2 f3f3 	udiv	r3, r2, r3
 8005c0e:	63bb      	str	r3, [r7, #56]	; 0x38
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8005c10:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005c12:	2b0f      	cmp	r3, #15
 8005c14:	d916      	bls.n	8005c44 <UART_SetConfig+0xb28>
 8005c16:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005c18:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8005c1c:	d212      	bcs.n	8005c44 <UART_SetConfig+0xb28>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 8005c1e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005c20:	b29b      	uxth	r3, r3
 8005c22:	f023 030f 	bic.w	r3, r3, #15
 8005c26:	86fb      	strh	r3, [r7, #54]	; 0x36
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 8005c28:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005c2a:	085b      	lsrs	r3, r3, #1
 8005c2c:	b29b      	uxth	r3, r3
 8005c2e:	f003 0307 	and.w	r3, r3, #7
 8005c32:	b29a      	uxth	r2, r3
 8005c34:	8efb      	ldrh	r3, [r7, #54]	; 0x36
 8005c36:	4313      	orrs	r3, r2
 8005c38:	86fb      	strh	r3, [r7, #54]	; 0x36
        huart->Instance->BRR = brrtemp;
 8005c3a:	697b      	ldr	r3, [r7, #20]
 8005c3c:	681b      	ldr	r3, [r3, #0]
 8005c3e:	8efa      	ldrh	r2, [r7, #54]	; 0x36
 8005c40:	60da      	str	r2, [r3, #12]
 8005c42:	e0bc      	b.n	8005dbe <UART_SetConfig+0xca2>
      }
      else
      {
        ret = HAL_ERROR;
 8005c44:	2301      	movs	r3, #1
 8005c46:	f887 3042 	strb.w	r3, [r7, #66]	; 0x42
 8005c4a:	e0b8      	b.n	8005dbe <UART_SetConfig+0xca2>
      }
    }
  }
  else
  {
    switch (clocksource)
 8005c4c:	f897 3043 	ldrb.w	r3, [r7, #67]	; 0x43
 8005c50:	2b20      	cmp	r3, #32
 8005c52:	dc4b      	bgt.n	8005cec <UART_SetConfig+0xbd0>
 8005c54:	2b00      	cmp	r3, #0
 8005c56:	f2c0 8087 	blt.w	8005d68 <UART_SetConfig+0xc4c>
 8005c5a:	2b20      	cmp	r3, #32
 8005c5c:	f200 8084 	bhi.w	8005d68 <UART_SetConfig+0xc4c>
 8005c60:	a201      	add	r2, pc, #4	; (adr r2, 8005c68 <UART_SetConfig+0xb4c>)
 8005c62:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005c66:	bf00      	nop
 8005c68:	08005cf3 	.word	0x08005cf3
 8005c6c:	08005cfb 	.word	0x08005cfb
 8005c70:	08005d69 	.word	0x08005d69
 8005c74:	08005d69 	.word	0x08005d69
 8005c78:	08005d03 	.word	0x08005d03
 8005c7c:	08005d69 	.word	0x08005d69
 8005c80:	08005d69 	.word	0x08005d69
 8005c84:	08005d69 	.word	0x08005d69
 8005c88:	08005d13 	.word	0x08005d13
 8005c8c:	08005d69 	.word	0x08005d69
 8005c90:	08005d69 	.word	0x08005d69
 8005c94:	08005d69 	.word	0x08005d69
 8005c98:	08005d69 	.word	0x08005d69
 8005c9c:	08005d69 	.word	0x08005d69
 8005ca0:	08005d69 	.word	0x08005d69
 8005ca4:	08005d69 	.word	0x08005d69
 8005ca8:	08005d23 	.word	0x08005d23
 8005cac:	08005d69 	.word	0x08005d69
 8005cb0:	08005d69 	.word	0x08005d69
 8005cb4:	08005d69 	.word	0x08005d69
 8005cb8:	08005d69 	.word	0x08005d69
 8005cbc:	08005d69 	.word	0x08005d69
 8005cc0:	08005d69 	.word	0x08005d69
 8005cc4:	08005d69 	.word	0x08005d69
 8005cc8:	08005d69 	.word	0x08005d69
 8005ccc:	08005d69 	.word	0x08005d69
 8005cd0:	08005d69 	.word	0x08005d69
 8005cd4:	08005d69 	.word	0x08005d69
 8005cd8:	08005d69 	.word	0x08005d69
 8005cdc:	08005d69 	.word	0x08005d69
 8005ce0:	08005d69 	.word	0x08005d69
 8005ce4:	08005d69 	.word	0x08005d69
 8005ce8:	08005d5b 	.word	0x08005d5b
 8005cec:	2b40      	cmp	r3, #64	; 0x40
 8005cee:	d037      	beq.n	8005d60 <UART_SetConfig+0xc44>
 8005cf0:	e03a      	b.n	8005d68 <UART_SetConfig+0xc4c>
    {
      case UART_CLOCKSOURCE_D2PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8005cf2:	f7fd fb47 	bl	8003384 <HAL_RCC_GetPCLK1Freq>
 8005cf6:	63f8      	str	r0, [r7, #60]	; 0x3c
        break;
 8005cf8:	e03c      	b.n	8005d74 <UART_SetConfig+0xc58>
      case UART_CLOCKSOURCE_D2PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8005cfa:	f7fd fb59 	bl	80033b0 <HAL_RCC_GetPCLK2Freq>
 8005cfe:	63f8      	str	r0, [r7, #60]	; 0x3c
        break;
 8005d00:	e038      	b.n	8005d74 <UART_SetConfig+0xc58>
      case UART_CLOCKSOURCE_PLL2:
        HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 8005d02:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8005d06:	4618      	mov	r0, r3
 8005d08:	f7fe fd1e 	bl	8004748 <HAL_RCCEx_GetPLL2ClockFreq>
        pclk = pll2_clocks.PLL2_Q_Frequency;
 8005d0c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005d0e:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 8005d10:	e030      	b.n	8005d74 <UART_SetConfig+0xc58>
      case UART_CLOCKSOURCE_PLL3:
        HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 8005d12:	f107 0318 	add.w	r3, r7, #24
 8005d16:	4618      	mov	r0, r3
 8005d18:	f7fe fe6a 	bl	80049f0 <HAL_RCCEx_GetPLL3ClockFreq>
        pclk = pll3_clocks.PLL3_Q_Frequency;
 8005d1c:	69fb      	ldr	r3, [r7, #28]
 8005d1e:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 8005d20:	e028      	b.n	8005d74 <UART_SetConfig+0xc58>
      case UART_CLOCKSOURCE_HSI:
        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8005d22:	4b09      	ldr	r3, [pc, #36]	; (8005d48 <UART_SetConfig+0xc2c>)
 8005d24:	681b      	ldr	r3, [r3, #0]
 8005d26:	f003 0320 	and.w	r3, r3, #32
 8005d2a:	2b00      	cmp	r3, #0
 8005d2c:	d012      	beq.n	8005d54 <UART_SetConfig+0xc38>
        {
          pclk = (uint32_t)(HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3U));
 8005d2e:	4b06      	ldr	r3, [pc, #24]	; (8005d48 <UART_SetConfig+0xc2c>)
 8005d30:	681b      	ldr	r3, [r3, #0]
 8005d32:	08db      	lsrs	r3, r3, #3
 8005d34:	f003 0303 	and.w	r3, r3, #3
 8005d38:	4a04      	ldr	r2, [pc, #16]	; (8005d4c <UART_SetConfig+0xc30>)
 8005d3a:	fa22 f303 	lsr.w	r3, r2, r3
 8005d3e:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          pclk = (uint32_t) HSI_VALUE;
        }
        break;
 8005d40:	e018      	b.n	8005d74 <UART_SetConfig+0xc58>
 8005d42:	bf00      	nop
 8005d44:	0800b070 	.word	0x0800b070
 8005d48:	58024400 	.word	0x58024400
 8005d4c:	03d09000 	.word	0x03d09000
 8005d50:	003d0900 	.word	0x003d0900
          pclk = (uint32_t) HSI_VALUE;
 8005d54:	4b24      	ldr	r3, [pc, #144]	; (8005de8 <UART_SetConfig+0xccc>)
 8005d56:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 8005d58:	e00c      	b.n	8005d74 <UART_SetConfig+0xc58>
      case UART_CLOCKSOURCE_CSI:
        pclk = (uint32_t) CSI_VALUE;
 8005d5a:	4b24      	ldr	r3, [pc, #144]	; (8005dec <UART_SetConfig+0xcd0>)
 8005d5c:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 8005d5e:	e009      	b.n	8005d74 <UART_SetConfig+0xc58>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8005d60:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8005d64:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 8005d66:	e005      	b.n	8005d74 <UART_SetConfig+0xc58>
      default:
        pclk = 0U;
 8005d68:	2300      	movs	r3, #0
 8005d6a:	63fb      	str	r3, [r7, #60]	; 0x3c
        ret = HAL_ERROR;
 8005d6c:	2301      	movs	r3, #1
 8005d6e:	f887 3042 	strb.w	r3, [r7, #66]	; 0x42
        break;
 8005d72:	bf00      	nop
    }

    if (pclk != 0U)
 8005d74:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8005d76:	2b00      	cmp	r3, #0
 8005d78:	d021      	beq.n	8005dbe <UART_SetConfig+0xca2>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8005d7a:	697b      	ldr	r3, [r7, #20]
 8005d7c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005d7e:	4a1c      	ldr	r2, [pc, #112]	; (8005df0 <UART_SetConfig+0xcd4>)
 8005d80:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8005d84:	461a      	mov	r2, r3
 8005d86:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8005d88:	fbb3 f2f2 	udiv	r2, r3, r2
 8005d8c:	697b      	ldr	r3, [r7, #20]
 8005d8e:	685b      	ldr	r3, [r3, #4]
 8005d90:	085b      	lsrs	r3, r3, #1
 8005d92:	441a      	add	r2, r3
 8005d94:	697b      	ldr	r3, [r7, #20]
 8005d96:	685b      	ldr	r3, [r3, #4]
 8005d98:	fbb2 f3f3 	udiv	r3, r2, r3
 8005d9c:	63bb      	str	r3, [r7, #56]	; 0x38
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8005d9e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005da0:	2b0f      	cmp	r3, #15
 8005da2:	d909      	bls.n	8005db8 <UART_SetConfig+0xc9c>
 8005da4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005da6:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8005daa:	d205      	bcs.n	8005db8 <UART_SetConfig+0xc9c>
      {
        huart->Instance->BRR = (uint16_t)usartdiv;
 8005dac:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005dae:	b29a      	uxth	r2, r3
 8005db0:	697b      	ldr	r3, [r7, #20]
 8005db2:	681b      	ldr	r3, [r3, #0]
 8005db4:	60da      	str	r2, [r3, #12]
 8005db6:	e002      	b.n	8005dbe <UART_SetConfig+0xca2>
      }
      else
      {
        ret = HAL_ERROR;
 8005db8:	2301      	movs	r3, #1
 8005dba:	f887 3042 	strb.w	r3, [r7, #66]	; 0x42
      }
    }
  }

  /* Initialize the number of data to process during RX/TX ISR execution */
  huart->NbTxDataToProcess = 1;
 8005dbe:	697b      	ldr	r3, [r7, #20]
 8005dc0:	2201      	movs	r2, #1
 8005dc2:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
  huart->NbRxDataToProcess = 1;
 8005dc6:	697b      	ldr	r3, [r7, #20]
 8005dc8:	2201      	movs	r2, #1
 8005dca:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68

  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 8005dce:	697b      	ldr	r3, [r7, #20]
 8005dd0:	2200      	movs	r2, #0
 8005dd2:	675a      	str	r2, [r3, #116]	; 0x74
  huart->TxISR = NULL;
 8005dd4:	697b      	ldr	r3, [r7, #20]
 8005dd6:	2200      	movs	r2, #0
 8005dd8:	679a      	str	r2, [r3, #120]	; 0x78

  return ret;
 8005dda:	f897 3042 	ldrb.w	r3, [r7, #66]	; 0x42
}
 8005dde:	4618      	mov	r0, r3
 8005de0:	3748      	adds	r7, #72	; 0x48
 8005de2:	46bd      	mov	sp, r7
 8005de4:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8005de8:	03d09000 	.word	0x03d09000
 8005dec:	003d0900 	.word	0x003d0900
 8005df0:	0800b070 	.word	0x0800b070

08005df4 <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 8005df4:	b480      	push	{r7}
 8005df6:	b083      	sub	sp, #12
 8005df8:	af00      	add	r7, sp, #0
 8005dfa:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 8005dfc:	687b      	ldr	r3, [r7, #4]
 8005dfe:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005e00:	f003 0301 	and.w	r3, r3, #1
 8005e04:	2b00      	cmp	r3, #0
 8005e06:	d00a      	beq.n	8005e1e <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 8005e08:	687b      	ldr	r3, [r7, #4]
 8005e0a:	681b      	ldr	r3, [r3, #0]
 8005e0c:	685b      	ldr	r3, [r3, #4]
 8005e0e:	f423 3100 	bic.w	r1, r3, #131072	; 0x20000
 8005e12:	687b      	ldr	r3, [r7, #4]
 8005e14:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8005e16:	687b      	ldr	r3, [r7, #4]
 8005e18:	681b      	ldr	r3, [r3, #0]
 8005e1a:	430a      	orrs	r2, r1
 8005e1c:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 8005e1e:	687b      	ldr	r3, [r7, #4]
 8005e20:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005e22:	f003 0302 	and.w	r3, r3, #2
 8005e26:	2b00      	cmp	r3, #0
 8005e28:	d00a      	beq.n	8005e40 <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 8005e2a:	687b      	ldr	r3, [r7, #4]
 8005e2c:	681b      	ldr	r3, [r3, #0]
 8005e2e:	685b      	ldr	r3, [r3, #4]
 8005e30:	f423 3180 	bic.w	r1, r3, #65536	; 0x10000
 8005e34:	687b      	ldr	r3, [r7, #4]
 8005e36:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8005e38:	687b      	ldr	r3, [r7, #4]
 8005e3a:	681b      	ldr	r3, [r3, #0]
 8005e3c:	430a      	orrs	r2, r1
 8005e3e:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 8005e40:	687b      	ldr	r3, [r7, #4]
 8005e42:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005e44:	f003 0304 	and.w	r3, r3, #4
 8005e48:	2b00      	cmp	r3, #0
 8005e4a:	d00a      	beq.n	8005e62 <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 8005e4c:	687b      	ldr	r3, [r7, #4]
 8005e4e:	681b      	ldr	r3, [r3, #0]
 8005e50:	685b      	ldr	r3, [r3, #4]
 8005e52:	f423 2180 	bic.w	r1, r3, #262144	; 0x40000
 8005e56:	687b      	ldr	r3, [r7, #4]
 8005e58:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8005e5a:	687b      	ldr	r3, [r7, #4]
 8005e5c:	681b      	ldr	r3, [r3, #0]
 8005e5e:	430a      	orrs	r2, r1
 8005e60:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 8005e62:	687b      	ldr	r3, [r7, #4]
 8005e64:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005e66:	f003 0308 	and.w	r3, r3, #8
 8005e6a:	2b00      	cmp	r3, #0
 8005e6c:	d00a      	beq.n	8005e84 <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 8005e6e:	687b      	ldr	r3, [r7, #4]
 8005e70:	681b      	ldr	r3, [r3, #0]
 8005e72:	685b      	ldr	r3, [r3, #4]
 8005e74:	f423 4100 	bic.w	r1, r3, #32768	; 0x8000
 8005e78:	687b      	ldr	r3, [r7, #4]
 8005e7a:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8005e7c:	687b      	ldr	r3, [r7, #4]
 8005e7e:	681b      	ldr	r3, [r3, #0]
 8005e80:	430a      	orrs	r2, r1
 8005e82:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 8005e84:	687b      	ldr	r3, [r7, #4]
 8005e86:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005e88:	f003 0310 	and.w	r3, r3, #16
 8005e8c:	2b00      	cmp	r3, #0
 8005e8e:	d00a      	beq.n	8005ea6 <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 8005e90:	687b      	ldr	r3, [r7, #4]
 8005e92:	681b      	ldr	r3, [r3, #0]
 8005e94:	689b      	ldr	r3, [r3, #8]
 8005e96:	f423 5180 	bic.w	r1, r3, #4096	; 0x1000
 8005e9a:	687b      	ldr	r3, [r7, #4]
 8005e9c:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8005e9e:	687b      	ldr	r3, [r7, #4]
 8005ea0:	681b      	ldr	r3, [r3, #0]
 8005ea2:	430a      	orrs	r2, r1
 8005ea4:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 8005ea6:	687b      	ldr	r3, [r7, #4]
 8005ea8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005eaa:	f003 0320 	and.w	r3, r3, #32
 8005eae:	2b00      	cmp	r3, #0
 8005eb0:	d00a      	beq.n	8005ec8 <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 8005eb2:	687b      	ldr	r3, [r7, #4]
 8005eb4:	681b      	ldr	r3, [r3, #0]
 8005eb6:	689b      	ldr	r3, [r3, #8]
 8005eb8:	f423 5100 	bic.w	r1, r3, #8192	; 0x2000
 8005ebc:	687b      	ldr	r3, [r7, #4]
 8005ebe:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8005ec0:	687b      	ldr	r3, [r7, #4]
 8005ec2:	681b      	ldr	r3, [r3, #0]
 8005ec4:	430a      	orrs	r2, r1
 8005ec6:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 8005ec8:	687b      	ldr	r3, [r7, #4]
 8005eca:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005ecc:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005ed0:	2b00      	cmp	r3, #0
 8005ed2:	d01a      	beq.n	8005f0a <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 8005ed4:	687b      	ldr	r3, [r7, #4]
 8005ed6:	681b      	ldr	r3, [r3, #0]
 8005ed8:	685b      	ldr	r3, [r3, #4]
 8005eda:	f423 1180 	bic.w	r1, r3, #1048576	; 0x100000
 8005ede:	687b      	ldr	r3, [r7, #4]
 8005ee0:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8005ee2:	687b      	ldr	r3, [r7, #4]
 8005ee4:	681b      	ldr	r3, [r3, #0]
 8005ee6:	430a      	orrs	r2, r1
 8005ee8:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 8005eea:	687b      	ldr	r3, [r7, #4]
 8005eec:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8005eee:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8005ef2:	d10a      	bne.n	8005f0a <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 8005ef4:	687b      	ldr	r3, [r7, #4]
 8005ef6:	681b      	ldr	r3, [r3, #0]
 8005ef8:	685b      	ldr	r3, [r3, #4]
 8005efa:	f423 01c0 	bic.w	r1, r3, #6291456	; 0x600000
 8005efe:	687b      	ldr	r3, [r7, #4]
 8005f00:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 8005f02:	687b      	ldr	r3, [r7, #4]
 8005f04:	681b      	ldr	r3, [r3, #0]
 8005f06:	430a      	orrs	r2, r1
 8005f08:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 8005f0a:	687b      	ldr	r3, [r7, #4]
 8005f0c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005f0e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8005f12:	2b00      	cmp	r3, #0
 8005f14:	d00a      	beq.n	8005f2c <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 8005f16:	687b      	ldr	r3, [r7, #4]
 8005f18:	681b      	ldr	r3, [r3, #0]
 8005f1a:	685b      	ldr	r3, [r3, #4]
 8005f1c:	f423 2100 	bic.w	r1, r3, #524288	; 0x80000
 8005f20:	687b      	ldr	r3, [r7, #4]
 8005f22:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8005f24:	687b      	ldr	r3, [r7, #4]
 8005f26:	681b      	ldr	r3, [r3, #0]
 8005f28:	430a      	orrs	r2, r1
 8005f2a:	605a      	str	r2, [r3, #4]
  }
}
 8005f2c:	bf00      	nop
 8005f2e:	370c      	adds	r7, #12
 8005f30:	46bd      	mov	sp, r7
 8005f32:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005f36:	4770      	bx	lr

08005f38 <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 8005f38:	b580      	push	{r7, lr}
 8005f3a:	b098      	sub	sp, #96	; 0x60
 8005f3c:	af02      	add	r7, sp, #8
 8005f3e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8005f40:	687b      	ldr	r3, [r7, #4]
 8005f42:	2200      	movs	r2, #0
 8005f44:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 8005f48:	f7fb fb42 	bl	80015d0 <HAL_GetTick>
 8005f4c:	6578      	str	r0, [r7, #84]	; 0x54

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 8005f4e:	687b      	ldr	r3, [r7, #4]
 8005f50:	681b      	ldr	r3, [r3, #0]
 8005f52:	681b      	ldr	r3, [r3, #0]
 8005f54:	f003 0308 	and.w	r3, r3, #8
 8005f58:	2b08      	cmp	r3, #8
 8005f5a:	d12f      	bne.n	8005fbc <UART_CheckIdleState+0x84>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8005f5c:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 8005f60:	9300      	str	r3, [sp, #0]
 8005f62:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8005f64:	2200      	movs	r2, #0
 8005f66:	f44f 1100 	mov.w	r1, #2097152	; 0x200000
 8005f6a:	6878      	ldr	r0, [r7, #4]
 8005f6c:	f000 f88e 	bl	800608c <UART_WaitOnFlagUntilTimeout>
 8005f70:	4603      	mov	r3, r0
 8005f72:	2b00      	cmp	r3, #0
 8005f74:	d022      	beq.n	8005fbc <UART_CheckIdleState+0x84>
    {
      /* Disable TXE interrupt for the interrupt process */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE_TXFNFIE));
 8005f76:	687b      	ldr	r3, [r7, #4]
 8005f78:	681b      	ldr	r3, [r3, #0]
 8005f7a:	63bb      	str	r3, [r7, #56]	; 0x38
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005f7c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005f7e:	e853 3f00 	ldrex	r3, [r3]
 8005f82:	637b      	str	r3, [r7, #52]	; 0x34
   return(result);
 8005f84:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8005f86:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8005f8a:	653b      	str	r3, [r7, #80]	; 0x50
 8005f8c:	687b      	ldr	r3, [r7, #4]
 8005f8e:	681b      	ldr	r3, [r3, #0]
 8005f90:	461a      	mov	r2, r3
 8005f92:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8005f94:	647b      	str	r3, [r7, #68]	; 0x44
 8005f96:	643a      	str	r2, [r7, #64]	; 0x40
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005f98:	6c39      	ldr	r1, [r7, #64]	; 0x40
 8005f9a:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8005f9c:	e841 2300 	strex	r3, r2, [r1]
 8005fa0:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 8005fa2:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8005fa4:	2b00      	cmp	r3, #0
 8005fa6:	d1e6      	bne.n	8005f76 <UART_CheckIdleState+0x3e>

      huart->gState = HAL_UART_STATE_READY;
 8005fa8:	687b      	ldr	r3, [r7, #4]
 8005faa:	2220      	movs	r2, #32
 8005fac:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

      __HAL_UNLOCK(huart);
 8005fb0:	687b      	ldr	r3, [r7, #4]
 8005fb2:	2200      	movs	r2, #0
 8005fb4:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

      /* Timeout occurred */
      return HAL_TIMEOUT;
 8005fb8:	2303      	movs	r3, #3
 8005fba:	e063      	b.n	8006084 <UART_CheckIdleState+0x14c>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 8005fbc:	687b      	ldr	r3, [r7, #4]
 8005fbe:	681b      	ldr	r3, [r3, #0]
 8005fc0:	681b      	ldr	r3, [r3, #0]
 8005fc2:	f003 0304 	and.w	r3, r3, #4
 8005fc6:	2b04      	cmp	r3, #4
 8005fc8:	d149      	bne.n	800605e <UART_CheckIdleState+0x126>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8005fca:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 8005fce:	9300      	str	r3, [sp, #0]
 8005fd0:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8005fd2:	2200      	movs	r2, #0
 8005fd4:	f44f 0180 	mov.w	r1, #4194304	; 0x400000
 8005fd8:	6878      	ldr	r0, [r7, #4]
 8005fda:	f000 f857 	bl	800608c <UART_WaitOnFlagUntilTimeout>
 8005fde:	4603      	mov	r3, r0
 8005fe0:	2b00      	cmp	r3, #0
 8005fe2:	d03c      	beq.n	800605e <UART_CheckIdleState+0x126>
    {
      /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error)
      interrupts for the interrupt process */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 8005fe4:	687b      	ldr	r3, [r7, #4]
 8005fe6:	681b      	ldr	r3, [r3, #0]
 8005fe8:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005fea:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005fec:	e853 3f00 	ldrex	r3, [r3]
 8005ff0:	623b      	str	r3, [r7, #32]
   return(result);
 8005ff2:	6a3b      	ldr	r3, [r7, #32]
 8005ff4:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 8005ff8:	64fb      	str	r3, [r7, #76]	; 0x4c
 8005ffa:	687b      	ldr	r3, [r7, #4]
 8005ffc:	681b      	ldr	r3, [r3, #0]
 8005ffe:	461a      	mov	r2, r3
 8006000:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8006002:	633b      	str	r3, [r7, #48]	; 0x30
 8006004:	62fa      	str	r2, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006006:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8006008:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800600a:	e841 2300 	strex	r3, r2, [r1]
 800600e:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 8006010:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006012:	2b00      	cmp	r3, #0
 8006014:	d1e6      	bne.n	8005fe4 <UART_CheckIdleState+0xac>
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8006016:	687b      	ldr	r3, [r7, #4]
 8006018:	681b      	ldr	r3, [r3, #0]
 800601a:	3308      	adds	r3, #8
 800601c:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800601e:	693b      	ldr	r3, [r7, #16]
 8006020:	e853 3f00 	ldrex	r3, [r3]
 8006024:	60fb      	str	r3, [r7, #12]
   return(result);
 8006026:	68fb      	ldr	r3, [r7, #12]
 8006028:	f023 0301 	bic.w	r3, r3, #1
 800602c:	64bb      	str	r3, [r7, #72]	; 0x48
 800602e:	687b      	ldr	r3, [r7, #4]
 8006030:	681b      	ldr	r3, [r3, #0]
 8006032:	3308      	adds	r3, #8
 8006034:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8006036:	61fa      	str	r2, [r7, #28]
 8006038:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800603a:	69b9      	ldr	r1, [r7, #24]
 800603c:	69fa      	ldr	r2, [r7, #28]
 800603e:	e841 2300 	strex	r3, r2, [r1]
 8006042:	617b      	str	r3, [r7, #20]
   return(result);
 8006044:	697b      	ldr	r3, [r7, #20]
 8006046:	2b00      	cmp	r3, #0
 8006048:	d1e5      	bne.n	8006016 <UART_CheckIdleState+0xde>

      huart->RxState = HAL_UART_STATE_READY;
 800604a:	687b      	ldr	r3, [r7, #4]
 800604c:	2220      	movs	r2, #32
 800604e:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c

      __HAL_UNLOCK(huart);
 8006052:	687b      	ldr	r3, [r7, #4]
 8006054:	2200      	movs	r2, #0
 8006056:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

      /* Timeout occurred */
      return HAL_TIMEOUT;
 800605a:	2303      	movs	r3, #3
 800605c:	e012      	b.n	8006084 <UART_CheckIdleState+0x14c>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 800605e:	687b      	ldr	r3, [r7, #4]
 8006060:	2220      	movs	r2, #32
 8006062:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
  huart->RxState = HAL_UART_STATE_READY;
 8006066:	687b      	ldr	r3, [r7, #4]
 8006068:	2220      	movs	r2, #32
 800606a:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800606e:	687b      	ldr	r3, [r7, #4]
 8006070:	2200      	movs	r2, #0
 8006072:	66da      	str	r2, [r3, #108]	; 0x6c
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 8006074:	687b      	ldr	r3, [r7, #4]
 8006076:	2200      	movs	r2, #0
 8006078:	671a      	str	r2, [r3, #112]	; 0x70

  __HAL_UNLOCK(huart);
 800607a:	687b      	ldr	r3, [r7, #4]
 800607c:	2200      	movs	r2, #0
 800607e:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

  return HAL_OK;
 8006082:	2300      	movs	r3, #0
}
 8006084:	4618      	mov	r0, r3
 8006086:	3758      	adds	r7, #88	; 0x58
 8006088:	46bd      	mov	sp, r7
 800608a:	bd80      	pop	{r7, pc}

0800608c <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 800608c:	b580      	push	{r7, lr}
 800608e:	b084      	sub	sp, #16
 8006090:	af00      	add	r7, sp, #0
 8006092:	60f8      	str	r0, [r7, #12]
 8006094:	60b9      	str	r1, [r7, #8]
 8006096:	603b      	str	r3, [r7, #0]
 8006098:	4613      	mov	r3, r2
 800609a:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800609c:	e049      	b.n	8006132 <UART_WaitOnFlagUntilTimeout+0xa6>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800609e:	69bb      	ldr	r3, [r7, #24]
 80060a0:	f1b3 3fff 	cmp.w	r3, #4294967295
 80060a4:	d045      	beq.n	8006132 <UART_WaitOnFlagUntilTimeout+0xa6>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80060a6:	f7fb fa93 	bl	80015d0 <HAL_GetTick>
 80060aa:	4602      	mov	r2, r0
 80060ac:	683b      	ldr	r3, [r7, #0]
 80060ae:	1ad3      	subs	r3, r2, r3
 80060b0:	69ba      	ldr	r2, [r7, #24]
 80060b2:	429a      	cmp	r2, r3
 80060b4:	d302      	bcc.n	80060bc <UART_WaitOnFlagUntilTimeout+0x30>
 80060b6:	69bb      	ldr	r3, [r7, #24]
 80060b8:	2b00      	cmp	r3, #0
 80060ba:	d101      	bne.n	80060c0 <UART_WaitOnFlagUntilTimeout+0x34>
      {

        return HAL_TIMEOUT;
 80060bc:	2303      	movs	r3, #3
 80060be:	e048      	b.n	8006152 <UART_WaitOnFlagUntilTimeout+0xc6>
      }

      if (READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U)
 80060c0:	68fb      	ldr	r3, [r7, #12]
 80060c2:	681b      	ldr	r3, [r3, #0]
 80060c4:	681b      	ldr	r3, [r3, #0]
 80060c6:	f003 0304 	and.w	r3, r3, #4
 80060ca:	2b00      	cmp	r3, #0
 80060cc:	d031      	beq.n	8006132 <UART_WaitOnFlagUntilTimeout+0xa6>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_ORE) == SET)
 80060ce:	68fb      	ldr	r3, [r7, #12]
 80060d0:	681b      	ldr	r3, [r3, #0]
 80060d2:	69db      	ldr	r3, [r3, #28]
 80060d4:	f003 0308 	and.w	r3, r3, #8
 80060d8:	2b08      	cmp	r3, #8
 80060da:	d110      	bne.n	80060fe <UART_WaitOnFlagUntilTimeout+0x72>
        {
           /* Clear Overrun Error flag*/
           __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 80060dc:	68fb      	ldr	r3, [r7, #12]
 80060de:	681b      	ldr	r3, [r3, #0]
 80060e0:	2208      	movs	r2, #8
 80060e2:	621a      	str	r2, [r3, #32]

           /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts if ongoing */
           UART_EndRxTransfer(huart);
 80060e4:	68f8      	ldr	r0, [r7, #12]
 80060e6:	f000 f839 	bl	800615c <UART_EndRxTransfer>

           huart->ErrorCode = HAL_UART_ERROR_ORE;
 80060ea:	68fb      	ldr	r3, [r7, #12]
 80060ec:	2208      	movs	r2, #8
 80060ee:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90

           /* Process Unlocked */
           __HAL_UNLOCK(huart);
 80060f2:	68fb      	ldr	r3, [r7, #12]
 80060f4:	2200      	movs	r2, #0
 80060f6:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

           return HAL_ERROR;
 80060fa:	2301      	movs	r3, #1
 80060fc:	e029      	b.n	8006152 <UART_WaitOnFlagUntilTimeout+0xc6>
        }
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 80060fe:	68fb      	ldr	r3, [r7, #12]
 8006100:	681b      	ldr	r3, [r3, #0]
 8006102:	69db      	ldr	r3, [r3, #28]
 8006104:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8006108:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 800610c:	d111      	bne.n	8006132 <UART_WaitOnFlagUntilTimeout+0xa6>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 800610e:	68fb      	ldr	r3, [r7, #12]
 8006110:	681b      	ldr	r3, [r3, #0]
 8006112:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8006116:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 8006118:	68f8      	ldr	r0, [r7, #12]
 800611a:	f000 f81f 	bl	800615c <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_RTO;
 800611e:	68fb      	ldr	r3, [r7, #12]
 8006120:	2220      	movs	r2, #32
 8006122:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8006126:	68fb      	ldr	r3, [r7, #12]
 8006128:	2200      	movs	r2, #0
 800612a:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

          return HAL_TIMEOUT;
 800612e:	2303      	movs	r3, #3
 8006130:	e00f      	b.n	8006152 <UART_WaitOnFlagUntilTimeout+0xc6>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8006132:	68fb      	ldr	r3, [r7, #12]
 8006134:	681b      	ldr	r3, [r3, #0]
 8006136:	69da      	ldr	r2, [r3, #28]
 8006138:	68bb      	ldr	r3, [r7, #8]
 800613a:	4013      	ands	r3, r2
 800613c:	68ba      	ldr	r2, [r7, #8]
 800613e:	429a      	cmp	r2, r3
 8006140:	bf0c      	ite	eq
 8006142:	2301      	moveq	r3, #1
 8006144:	2300      	movne	r3, #0
 8006146:	b2db      	uxtb	r3, r3
 8006148:	461a      	mov	r2, r3
 800614a:	79fb      	ldrb	r3, [r7, #7]
 800614c:	429a      	cmp	r2, r3
 800614e:	d0a6      	beq.n	800609e <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8006150:	2300      	movs	r3, #0
}
 8006152:	4618      	mov	r0, r3
 8006154:	3710      	adds	r7, #16
 8006156:	46bd      	mov	sp, r7
 8006158:	bd80      	pop	{r7, pc}
	...

0800615c <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 800615c:	b480      	push	{r7}
 800615e:	b095      	sub	sp, #84	; 0x54
 8006160:	af00      	add	r7, sp, #0
 8006162:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 8006164:	687b      	ldr	r3, [r7, #4]
 8006166:	681b      	ldr	r3, [r3, #0]
 8006168:	637b      	str	r3, [r7, #52]	; 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800616a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800616c:	e853 3f00 	ldrex	r3, [r3]
 8006170:	633b      	str	r3, [r7, #48]	; 0x30
   return(result);
 8006172:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006174:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 8006178:	64fb      	str	r3, [r7, #76]	; 0x4c
 800617a:	687b      	ldr	r3, [r7, #4]
 800617c:	681b      	ldr	r3, [r3, #0]
 800617e:	461a      	mov	r2, r3
 8006180:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8006182:	643b      	str	r3, [r7, #64]	; 0x40
 8006184:	63fa      	str	r2, [r7, #60]	; 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006186:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 8006188:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 800618a:	e841 2300 	strex	r3, r2, [r1]
 800618e:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 8006190:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006192:	2b00      	cmp	r3, #0
 8006194:	d1e6      	bne.n	8006164 <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 8006196:	687b      	ldr	r3, [r7, #4]
 8006198:	681b      	ldr	r3, [r3, #0]
 800619a:	3308      	adds	r3, #8
 800619c:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800619e:	6a3b      	ldr	r3, [r7, #32]
 80061a0:	e853 3f00 	ldrex	r3, [r3]
 80061a4:	61fb      	str	r3, [r7, #28]
   return(result);
 80061a6:	69fa      	ldr	r2, [r7, #28]
 80061a8:	4b1e      	ldr	r3, [pc, #120]	; (8006224 <UART_EndRxTransfer+0xc8>)
 80061aa:	4013      	ands	r3, r2
 80061ac:	64bb      	str	r3, [r7, #72]	; 0x48
 80061ae:	687b      	ldr	r3, [r7, #4]
 80061b0:	681b      	ldr	r3, [r3, #0]
 80061b2:	3308      	adds	r3, #8
 80061b4:	6cba      	ldr	r2, [r7, #72]	; 0x48
 80061b6:	62fa      	str	r2, [r7, #44]	; 0x2c
 80061b8:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80061ba:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 80061bc:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 80061be:	e841 2300 	strex	r3, r2, [r1]
 80061c2:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 80061c4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80061c6:	2b00      	cmp	r3, #0
 80061c8:	d1e5      	bne.n	8006196 <UART_EndRxTransfer+0x3a>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 80061ca:	687b      	ldr	r3, [r7, #4]
 80061cc:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80061ce:	2b01      	cmp	r3, #1
 80061d0:	d118      	bne.n	8006204 <UART_EndRxTransfer+0xa8>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80061d2:	687b      	ldr	r3, [r7, #4]
 80061d4:	681b      	ldr	r3, [r3, #0]
 80061d6:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80061d8:	68fb      	ldr	r3, [r7, #12]
 80061da:	e853 3f00 	ldrex	r3, [r3]
 80061de:	60bb      	str	r3, [r7, #8]
   return(result);
 80061e0:	68bb      	ldr	r3, [r7, #8]
 80061e2:	f023 0310 	bic.w	r3, r3, #16
 80061e6:	647b      	str	r3, [r7, #68]	; 0x44
 80061e8:	687b      	ldr	r3, [r7, #4]
 80061ea:	681b      	ldr	r3, [r3, #0]
 80061ec:	461a      	mov	r2, r3
 80061ee:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80061f0:	61bb      	str	r3, [r7, #24]
 80061f2:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80061f4:	6979      	ldr	r1, [r7, #20]
 80061f6:	69ba      	ldr	r2, [r7, #24]
 80061f8:	e841 2300 	strex	r3, r2, [r1]
 80061fc:	613b      	str	r3, [r7, #16]
   return(result);
 80061fe:	693b      	ldr	r3, [r7, #16]
 8006200:	2b00      	cmp	r3, #0
 8006202:	d1e6      	bne.n	80061d2 <UART_EndRxTransfer+0x76>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 8006204:	687b      	ldr	r3, [r7, #4]
 8006206:	2220      	movs	r2, #32
 8006208:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800620c:	687b      	ldr	r3, [r7, #4]
 800620e:	2200      	movs	r2, #0
 8006210:	66da      	str	r2, [r3, #108]	; 0x6c

  /* Reset RxIsr function pointer */
  huart->RxISR = NULL;
 8006212:	687b      	ldr	r3, [r7, #4]
 8006214:	2200      	movs	r2, #0
 8006216:	675a      	str	r2, [r3, #116]	; 0x74
}
 8006218:	bf00      	nop
 800621a:	3754      	adds	r7, #84	; 0x54
 800621c:	46bd      	mov	sp, r7
 800621e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006222:	4770      	bx	lr
 8006224:	effffffe 	.word	0xeffffffe

08006228 <HAL_UARTEx_DisableFifoMode>:
  * @brief  Disable the FIFO mode.
  * @param huart      UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_DisableFifoMode(UART_HandleTypeDef *huart)
{
 8006228:	b480      	push	{r7}
 800622a:	b085      	sub	sp, #20
 800622c:	af00      	add	r7, sp, #0
 800622e:	6078      	str	r0, [r7, #4]

  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));

  /* Process Locked */
  __HAL_LOCK(huart);
 8006230:	687b      	ldr	r3, [r7, #4]
 8006232:	f893 3084 	ldrb.w	r3, [r3, #132]	; 0x84
 8006236:	2b01      	cmp	r3, #1
 8006238:	d101      	bne.n	800623e <HAL_UARTEx_DisableFifoMode+0x16>
 800623a:	2302      	movs	r3, #2
 800623c:	e027      	b.n	800628e <HAL_UARTEx_DisableFifoMode+0x66>
 800623e:	687b      	ldr	r3, [r7, #4]
 8006240:	2201      	movs	r2, #1
 8006242:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

  huart->gState = HAL_UART_STATE_BUSY;
 8006246:	687b      	ldr	r3, [r7, #4]
 8006248:	2224      	movs	r2, #36	; 0x24
 800624a:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 800624e:	687b      	ldr	r3, [r7, #4]
 8006250:	681b      	ldr	r3, [r3, #0]
 8006252:	681b      	ldr	r3, [r3, #0]
 8006254:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 8006256:	687b      	ldr	r3, [r7, #4]
 8006258:	681b      	ldr	r3, [r3, #0]
 800625a:	681a      	ldr	r2, [r3, #0]
 800625c:	687b      	ldr	r3, [r7, #4]
 800625e:	681b      	ldr	r3, [r3, #0]
 8006260:	f022 0201 	bic.w	r2, r2, #1
 8006264:	601a      	str	r2, [r3, #0]

  /* Enable FIFO mode */
  CLEAR_BIT(tmpcr1, USART_CR1_FIFOEN);
 8006266:	68fb      	ldr	r3, [r7, #12]
 8006268:	f023 5300 	bic.w	r3, r3, #536870912	; 0x20000000
 800626c:	60fb      	str	r3, [r7, #12]
  huart->FifoMode = UART_FIFOMODE_DISABLE;
 800626e:	687b      	ldr	r3, [r7, #4]
 8006270:	2200      	movs	r2, #0
 8006272:	665a      	str	r2, [r3, #100]	; 0x64

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 8006274:	687b      	ldr	r3, [r7, #4]
 8006276:	681b      	ldr	r3, [r3, #0]
 8006278:	68fa      	ldr	r2, [r7, #12]
 800627a:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 800627c:	687b      	ldr	r3, [r7, #4]
 800627e:	2220      	movs	r2, #32
 8006280:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 8006284:	687b      	ldr	r3, [r7, #4]
 8006286:	2200      	movs	r2, #0
 8006288:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

  return HAL_OK;
 800628c:	2300      	movs	r3, #0
}
 800628e:	4618      	mov	r0, r3
 8006290:	3714      	adds	r7, #20
 8006292:	46bd      	mov	sp, r7
 8006294:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006298:	4770      	bx	lr

0800629a <HAL_UARTEx_SetTxFifoThreshold>:
  *            @arg @ref UART_TXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_TXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetTxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 800629a:	b580      	push	{r7, lr}
 800629c:	b084      	sub	sp, #16
 800629e:	af00      	add	r7, sp, #0
 80062a0:	6078      	str	r0, [r7, #4]
 80062a2:	6039      	str	r1, [r7, #0]
  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_TXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 80062a4:	687b      	ldr	r3, [r7, #4]
 80062a6:	f893 3084 	ldrb.w	r3, [r3, #132]	; 0x84
 80062aa:	2b01      	cmp	r3, #1
 80062ac:	d101      	bne.n	80062b2 <HAL_UARTEx_SetTxFifoThreshold+0x18>
 80062ae:	2302      	movs	r3, #2
 80062b0:	e02d      	b.n	800630e <HAL_UARTEx_SetTxFifoThreshold+0x74>
 80062b2:	687b      	ldr	r3, [r7, #4]
 80062b4:	2201      	movs	r2, #1
 80062b6:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

  huart->gState = HAL_UART_STATE_BUSY;
 80062ba:	687b      	ldr	r3, [r7, #4]
 80062bc:	2224      	movs	r2, #36	; 0x24
 80062be:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 80062c2:	687b      	ldr	r3, [r7, #4]
 80062c4:	681b      	ldr	r3, [r3, #0]
 80062c6:	681b      	ldr	r3, [r3, #0]
 80062c8:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 80062ca:	687b      	ldr	r3, [r7, #4]
 80062cc:	681b      	ldr	r3, [r3, #0]
 80062ce:	681a      	ldr	r2, [r3, #0]
 80062d0:	687b      	ldr	r3, [r7, #4]
 80062d2:	681b      	ldr	r3, [r3, #0]
 80062d4:	f022 0201 	bic.w	r2, r2, #1
 80062d8:	601a      	str	r2, [r3, #0]

  /* Update TX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_TXFTCFG, Threshold);
 80062da:	687b      	ldr	r3, [r7, #4]
 80062dc:	681b      	ldr	r3, [r3, #0]
 80062de:	689b      	ldr	r3, [r3, #8]
 80062e0:	f023 4160 	bic.w	r1, r3, #3758096384	; 0xe0000000
 80062e4:	687b      	ldr	r3, [r7, #4]
 80062e6:	681b      	ldr	r3, [r3, #0]
 80062e8:	683a      	ldr	r2, [r7, #0]
 80062ea:	430a      	orrs	r2, r1
 80062ec:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 80062ee:	6878      	ldr	r0, [r7, #4]
 80062f0:	f000 f850 	bl	8006394 <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 80062f4:	687b      	ldr	r3, [r7, #4]
 80062f6:	681b      	ldr	r3, [r3, #0]
 80062f8:	68fa      	ldr	r2, [r7, #12]
 80062fa:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 80062fc:	687b      	ldr	r3, [r7, #4]
 80062fe:	2220      	movs	r2, #32
 8006300:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 8006304:	687b      	ldr	r3, [r7, #4]
 8006306:	2200      	movs	r2, #0
 8006308:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

  return HAL_OK;
 800630c:	2300      	movs	r3, #0
}
 800630e:	4618      	mov	r0, r3
 8006310:	3710      	adds	r7, #16
 8006312:	46bd      	mov	sp, r7
 8006314:	bd80      	pop	{r7, pc}

08006316 <HAL_UARTEx_SetRxFifoThreshold>:
  *            @arg @ref UART_RXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_RXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetRxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 8006316:	b580      	push	{r7, lr}
 8006318:	b084      	sub	sp, #16
 800631a:	af00      	add	r7, sp, #0
 800631c:	6078      	str	r0, [r7, #4]
 800631e:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_RXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 8006320:	687b      	ldr	r3, [r7, #4]
 8006322:	f893 3084 	ldrb.w	r3, [r3, #132]	; 0x84
 8006326:	2b01      	cmp	r3, #1
 8006328:	d101      	bne.n	800632e <HAL_UARTEx_SetRxFifoThreshold+0x18>
 800632a:	2302      	movs	r3, #2
 800632c:	e02d      	b.n	800638a <HAL_UARTEx_SetRxFifoThreshold+0x74>
 800632e:	687b      	ldr	r3, [r7, #4]
 8006330:	2201      	movs	r2, #1
 8006332:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

  huart->gState = HAL_UART_STATE_BUSY;
 8006336:	687b      	ldr	r3, [r7, #4]
 8006338:	2224      	movs	r2, #36	; 0x24
 800633a:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 800633e:	687b      	ldr	r3, [r7, #4]
 8006340:	681b      	ldr	r3, [r3, #0]
 8006342:	681b      	ldr	r3, [r3, #0]
 8006344:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 8006346:	687b      	ldr	r3, [r7, #4]
 8006348:	681b      	ldr	r3, [r3, #0]
 800634a:	681a      	ldr	r2, [r3, #0]
 800634c:	687b      	ldr	r3, [r7, #4]
 800634e:	681b      	ldr	r3, [r3, #0]
 8006350:	f022 0201 	bic.w	r2, r2, #1
 8006354:	601a      	str	r2, [r3, #0]

  /* Update RX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_RXFTCFG, Threshold);
 8006356:	687b      	ldr	r3, [r7, #4]
 8006358:	681b      	ldr	r3, [r3, #0]
 800635a:	689b      	ldr	r3, [r3, #8]
 800635c:	f023 6160 	bic.w	r1, r3, #234881024	; 0xe000000
 8006360:	687b      	ldr	r3, [r7, #4]
 8006362:	681b      	ldr	r3, [r3, #0]
 8006364:	683a      	ldr	r2, [r7, #0]
 8006366:	430a      	orrs	r2, r1
 8006368:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 800636a:	6878      	ldr	r0, [r7, #4]
 800636c:	f000 f812 	bl	8006394 <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 8006370:	687b      	ldr	r3, [r7, #4]
 8006372:	681b      	ldr	r3, [r3, #0]
 8006374:	68fa      	ldr	r2, [r7, #12]
 8006376:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 8006378:	687b      	ldr	r3, [r7, #4]
 800637a:	2220      	movs	r2, #32
 800637c:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 8006380:	687b      	ldr	r3, [r7, #4]
 8006382:	2200      	movs	r2, #0
 8006384:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

  return HAL_OK;
 8006388:	2300      	movs	r3, #0
}
 800638a:	4618      	mov	r0, r3
 800638c:	3710      	adds	r7, #16
 800638e:	46bd      	mov	sp, r7
 8006390:	bd80      	pop	{r7, pc}
	...

08006394 <UARTEx_SetNbDataToProcess>:
  *       the UART configuration registers.
  * @param huart UART handle.
  * @retval None
  */
static void UARTEx_SetNbDataToProcess(UART_HandleTypeDef *huart)
{
 8006394:	b480      	push	{r7}
 8006396:	b085      	sub	sp, #20
 8006398:	af00      	add	r7, sp, #0
 800639a:	6078      	str	r0, [r7, #4]
  uint8_t rx_fifo_threshold;
  uint8_t tx_fifo_threshold;
  static const uint8_t numerator[] = {1U, 1U, 1U, 3U, 7U, 1U, 0U, 0U};
  static const uint8_t denominator[] = {8U, 4U, 2U, 4U, 8U, 1U, 1U, 1U};

  if (huart->FifoMode == UART_FIFOMODE_DISABLE)
 800639c:	687b      	ldr	r3, [r7, #4]
 800639e:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 80063a0:	2b00      	cmp	r3, #0
 80063a2:	d108      	bne.n	80063b6 <UARTEx_SetNbDataToProcess+0x22>
  {
    huart->NbTxDataToProcess = 1U;
 80063a4:	687b      	ldr	r3, [r7, #4]
 80063a6:	2201      	movs	r2, #1
 80063a8:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
    huart->NbRxDataToProcess = 1U;
 80063ac:	687b      	ldr	r3, [r7, #4]
 80063ae:	2201      	movs	r2, #1
 80063b0:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
                               (uint16_t)denominator[tx_fifo_threshold];
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
                               (uint16_t)denominator[rx_fifo_threshold];
  }
}
 80063b4:	e031      	b.n	800641a <UARTEx_SetNbDataToProcess+0x86>
    rx_fifo_depth = RX_FIFO_DEPTH;
 80063b6:	2310      	movs	r3, #16
 80063b8:	73fb      	strb	r3, [r7, #15]
    tx_fifo_depth = TX_FIFO_DEPTH;
 80063ba:	2310      	movs	r3, #16
 80063bc:	73bb      	strb	r3, [r7, #14]
    rx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_RXFTCFG) >> USART_CR3_RXFTCFG_Pos);
 80063be:	687b      	ldr	r3, [r7, #4]
 80063c0:	681b      	ldr	r3, [r3, #0]
 80063c2:	689b      	ldr	r3, [r3, #8]
 80063c4:	0e5b      	lsrs	r3, r3, #25
 80063c6:	b2db      	uxtb	r3, r3
 80063c8:	f003 0307 	and.w	r3, r3, #7
 80063cc:	737b      	strb	r3, [r7, #13]
    tx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_TXFTCFG) >> USART_CR3_TXFTCFG_Pos);
 80063ce:	687b      	ldr	r3, [r7, #4]
 80063d0:	681b      	ldr	r3, [r3, #0]
 80063d2:	689b      	ldr	r3, [r3, #8]
 80063d4:	0f5b      	lsrs	r3, r3, #29
 80063d6:	b2db      	uxtb	r3, r3
 80063d8:	f003 0307 	and.w	r3, r3, #7
 80063dc:	733b      	strb	r3, [r7, #12]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 80063de:	7bbb      	ldrb	r3, [r7, #14]
 80063e0:	7b3a      	ldrb	r2, [r7, #12]
 80063e2:	4911      	ldr	r1, [pc, #68]	; (8006428 <UARTEx_SetNbDataToProcess+0x94>)
 80063e4:	5c8a      	ldrb	r2, [r1, r2]
 80063e6:	fb02 f303 	mul.w	r3, r2, r3
                               (uint16_t)denominator[tx_fifo_threshold];
 80063ea:	7b3a      	ldrb	r2, [r7, #12]
 80063ec:	490f      	ldr	r1, [pc, #60]	; (800642c <UARTEx_SetNbDataToProcess+0x98>)
 80063ee:	5c8a      	ldrb	r2, [r1, r2]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 80063f0:	fb93 f3f2 	sdiv	r3, r3, r2
 80063f4:	b29a      	uxth	r2, r3
 80063f6:	687b      	ldr	r3, [r7, #4]
 80063f8:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 80063fc:	7bfb      	ldrb	r3, [r7, #15]
 80063fe:	7b7a      	ldrb	r2, [r7, #13]
 8006400:	4909      	ldr	r1, [pc, #36]	; (8006428 <UARTEx_SetNbDataToProcess+0x94>)
 8006402:	5c8a      	ldrb	r2, [r1, r2]
 8006404:	fb02 f303 	mul.w	r3, r2, r3
                               (uint16_t)denominator[rx_fifo_threshold];
 8006408:	7b7a      	ldrb	r2, [r7, #13]
 800640a:	4908      	ldr	r1, [pc, #32]	; (800642c <UARTEx_SetNbDataToProcess+0x98>)
 800640c:	5c8a      	ldrb	r2, [r1, r2]
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 800640e:	fb93 f3f2 	sdiv	r3, r3, r2
 8006412:	b29a      	uxth	r2, r3
 8006414:	687b      	ldr	r3, [r7, #4]
 8006416:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68
}
 800641a:	bf00      	nop
 800641c:	3714      	adds	r7, #20
 800641e:	46bd      	mov	sp, r7
 8006420:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006424:	4770      	bx	lr
 8006426:	bf00      	nop
 8006428:	0800b088 	.word	0x0800b088
 800642c:	0800b090 	.word	0x0800b090

08006430 <__NVIC_SetPriority>:
{
 8006430:	b480      	push	{r7}
 8006432:	b083      	sub	sp, #12
 8006434:	af00      	add	r7, sp, #0
 8006436:	4603      	mov	r3, r0
 8006438:	6039      	str	r1, [r7, #0]
 800643a:	80fb      	strh	r3, [r7, #6]
  if ((int32_t)(IRQn) >= 0)
 800643c:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8006440:	2b00      	cmp	r3, #0
 8006442:	db0a      	blt.n	800645a <__NVIC_SetPriority+0x2a>
    NVIC->IP[((uint32_t)IRQn)]                = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8006444:	683b      	ldr	r3, [r7, #0]
 8006446:	b2da      	uxtb	r2, r3
 8006448:	490c      	ldr	r1, [pc, #48]	; (800647c <__NVIC_SetPriority+0x4c>)
 800644a:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 800644e:	0112      	lsls	r2, r2, #4
 8006450:	b2d2      	uxtb	r2, r2
 8006452:	440b      	add	r3, r1
 8006454:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
}
 8006458:	e00a      	b.n	8006470 <__NVIC_SetPriority+0x40>
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800645a:	683b      	ldr	r3, [r7, #0]
 800645c:	b2da      	uxtb	r2, r3
 800645e:	4908      	ldr	r1, [pc, #32]	; (8006480 <__NVIC_SetPriority+0x50>)
 8006460:	88fb      	ldrh	r3, [r7, #6]
 8006462:	f003 030f 	and.w	r3, r3, #15
 8006466:	3b04      	subs	r3, #4
 8006468:	0112      	lsls	r2, r2, #4
 800646a:	b2d2      	uxtb	r2, r2
 800646c:	440b      	add	r3, r1
 800646e:	761a      	strb	r2, [r3, #24]
}
 8006470:	bf00      	nop
 8006472:	370c      	adds	r7, #12
 8006474:	46bd      	mov	sp, r7
 8006476:	f85d 7b04 	ldr.w	r7, [sp], #4
 800647a:	4770      	bx	lr
 800647c:	e000e100 	.word	0xe000e100
 8006480:	e000ed00 	.word	0xe000ed00

08006484 <SVC_Setup>:
#endif /* SysTick */

/*
  Setup SVC to reset value.
*/
__STATIC_INLINE void SVC_Setup (void) {
 8006484:	b580      	push	{r7, lr}
 8006486:	af00      	add	r7, sp, #0
#if (__ARM_ARCH_7A__ == 0U)
  /* Service Call interrupt might be configured before kernel start     */
  /* and when its priority is lower or equal to BASEPRI, svc intruction */
  /* causes a Hard Fault.                                               */
  NVIC_SetPriority (SVCall_IRQ_NBR, 0U);
 8006488:	2100      	movs	r1, #0
 800648a:	f06f 0004 	mvn.w	r0, #4
 800648e:	f7ff ffcf 	bl	8006430 <__NVIC_SetPriority>
#endif
}
 8006492:	bf00      	nop
 8006494:	bd80      	pop	{r7, pc}
	...

08006498 <osKernelInitialize>:
static uint32_t OS_Tick_GetOverflow (void);
/* Get OS Tick interval */
static uint32_t OS_Tick_GetInterval (void);
/*---------------------------------------------------------------------------*/

osStatus_t osKernelInitialize (void) {
 8006498:	b480      	push	{r7}
 800649a:	b083      	sub	sp, #12
 800649c:	af00      	add	r7, sp, #0
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 800649e:	f3ef 8305 	mrs	r3, IPSR
 80064a2:	603b      	str	r3, [r7, #0]
  return(result);
 80064a4:	683b      	ldr	r3, [r7, #0]
  osStatus_t stat;

  if (IS_IRQ()) {
 80064a6:	2b00      	cmp	r3, #0
 80064a8:	d003      	beq.n	80064b2 <osKernelInitialize+0x1a>
    stat = osErrorISR;
 80064aa:	f06f 0305 	mvn.w	r3, #5
 80064ae:	607b      	str	r3, [r7, #4]
 80064b0:	e00c      	b.n	80064cc <osKernelInitialize+0x34>
  }
  else {
    if (KernelState == osKernelInactive) {
 80064b2:	4b0a      	ldr	r3, [pc, #40]	; (80064dc <osKernelInitialize+0x44>)
 80064b4:	681b      	ldr	r3, [r3, #0]
 80064b6:	2b00      	cmp	r3, #0
 80064b8:	d105      	bne.n	80064c6 <osKernelInitialize+0x2e>
        EvrFreeRTOSSetup(0U);
      #endif
      #if defined(USE_FreeRTOS_HEAP_5) && (HEAP_5_REGION_SETUP == 1)
        vPortDefineHeapRegions (configHEAP_5_REGIONS);
      #endif
      KernelState = osKernelReady;
 80064ba:	4b08      	ldr	r3, [pc, #32]	; (80064dc <osKernelInitialize+0x44>)
 80064bc:	2201      	movs	r2, #1
 80064be:	601a      	str	r2, [r3, #0]
      stat = osOK;
 80064c0:	2300      	movs	r3, #0
 80064c2:	607b      	str	r3, [r7, #4]
 80064c4:	e002      	b.n	80064cc <osKernelInitialize+0x34>
    } else {
      stat = osError;
 80064c6:	f04f 33ff 	mov.w	r3, #4294967295
 80064ca:	607b      	str	r3, [r7, #4]
    }
  }

  return (stat);
 80064cc:	687b      	ldr	r3, [r7, #4]
}
 80064ce:	4618      	mov	r0, r3
 80064d0:	370c      	adds	r7, #12
 80064d2:	46bd      	mov	sp, r7
 80064d4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80064d8:	4770      	bx	lr
 80064da:	bf00      	nop
 80064dc:	240003a8 	.word	0x240003a8

080064e0 <osKernelStart>:
  }

  return (state);
}

osStatus_t osKernelStart (void) {
 80064e0:	b580      	push	{r7, lr}
 80064e2:	b082      	sub	sp, #8
 80064e4:	af00      	add	r7, sp, #0
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 80064e6:	f3ef 8305 	mrs	r3, IPSR
 80064ea:	603b      	str	r3, [r7, #0]
  return(result);
 80064ec:	683b      	ldr	r3, [r7, #0]
  osStatus_t stat;

  if (IS_IRQ()) {
 80064ee:	2b00      	cmp	r3, #0
 80064f0:	d003      	beq.n	80064fa <osKernelStart+0x1a>
    stat = osErrorISR;
 80064f2:	f06f 0305 	mvn.w	r3, #5
 80064f6:	607b      	str	r3, [r7, #4]
 80064f8:	e010      	b.n	800651c <osKernelStart+0x3c>
  }
  else {
    if (KernelState == osKernelReady) {
 80064fa:	4b0b      	ldr	r3, [pc, #44]	; (8006528 <osKernelStart+0x48>)
 80064fc:	681b      	ldr	r3, [r3, #0]
 80064fe:	2b01      	cmp	r3, #1
 8006500:	d109      	bne.n	8006516 <osKernelStart+0x36>
      /* Ensure SVC priority is at the reset value */
      SVC_Setup();
 8006502:	f7ff ffbf 	bl	8006484 <SVC_Setup>
      /* Change state to enable IRQ masking check */
      KernelState = osKernelRunning;
 8006506:	4b08      	ldr	r3, [pc, #32]	; (8006528 <osKernelStart+0x48>)
 8006508:	2202      	movs	r2, #2
 800650a:	601a      	str	r2, [r3, #0]
      /* Start the kernel scheduler */
      vTaskStartScheduler();
 800650c:	f001 fd6e 	bl	8007fec <vTaskStartScheduler>
      stat = osOK;
 8006510:	2300      	movs	r3, #0
 8006512:	607b      	str	r3, [r7, #4]
 8006514:	e002      	b.n	800651c <osKernelStart+0x3c>
    } else {
      stat = osError;
 8006516:	f04f 33ff 	mov.w	r3, #4294967295
 800651a:	607b      	str	r3, [r7, #4]
    }
  }

  return (stat);
 800651c:	687b      	ldr	r3, [r7, #4]
}
 800651e:	4618      	mov	r0, r3
 8006520:	3708      	adds	r7, #8
 8006522:	46bd      	mov	sp, r7
 8006524:	bd80      	pop	{r7, pc}
 8006526:	bf00      	nop
 8006528:	240003a8 	.word	0x240003a8

0800652c <osThreadNew>:
  return (configCPU_CLOCK_HZ);
}

/*---------------------------------------------------------------------------*/

osThreadId_t osThreadNew (osThreadFunc_t func, void *argument, const osThreadAttr_t *attr) {
 800652c:	b580      	push	{r7, lr}
 800652e:	b08e      	sub	sp, #56	; 0x38
 8006530:	af04      	add	r7, sp, #16
 8006532:	60f8      	str	r0, [r7, #12]
 8006534:	60b9      	str	r1, [r7, #8]
 8006536:	607a      	str	r2, [r7, #4]
  uint32_t stack;
  TaskHandle_t hTask;
  UBaseType_t prio;
  int32_t mem;

  hTask = NULL;
 8006538:	2300      	movs	r3, #0
 800653a:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 800653c:	f3ef 8305 	mrs	r3, IPSR
 8006540:	617b      	str	r3, [r7, #20]
  return(result);
 8006542:	697b      	ldr	r3, [r7, #20]

  if (!IS_IRQ() && (func != NULL)) {
 8006544:	2b00      	cmp	r3, #0
 8006546:	d17f      	bne.n	8006648 <osThreadNew+0x11c>
 8006548:	68fb      	ldr	r3, [r7, #12]
 800654a:	2b00      	cmp	r3, #0
 800654c:	d07c      	beq.n	8006648 <osThreadNew+0x11c>
    stack = configMINIMAL_STACK_SIZE;
 800654e:	f44f 7380 	mov.w	r3, #256	; 0x100
 8006552:	623b      	str	r3, [r7, #32]
    prio  = (UBaseType_t)osPriorityNormal;
 8006554:	2318      	movs	r3, #24
 8006556:	61fb      	str	r3, [r7, #28]

    name = NULL;
 8006558:	2300      	movs	r3, #0
 800655a:	627b      	str	r3, [r7, #36]	; 0x24
    mem  = -1;
 800655c:	f04f 33ff 	mov.w	r3, #4294967295
 8006560:	61bb      	str	r3, [r7, #24]

    if (attr != NULL) {
 8006562:	687b      	ldr	r3, [r7, #4]
 8006564:	2b00      	cmp	r3, #0
 8006566:	d045      	beq.n	80065f4 <osThreadNew+0xc8>
      if (attr->name != NULL) {
 8006568:	687b      	ldr	r3, [r7, #4]
 800656a:	681b      	ldr	r3, [r3, #0]
 800656c:	2b00      	cmp	r3, #0
 800656e:	d002      	beq.n	8006576 <osThreadNew+0x4a>
        name = attr->name;
 8006570:	687b      	ldr	r3, [r7, #4]
 8006572:	681b      	ldr	r3, [r3, #0]
 8006574:	627b      	str	r3, [r7, #36]	; 0x24
      }
      if (attr->priority != osPriorityNone) {
 8006576:	687b      	ldr	r3, [r7, #4]
 8006578:	699b      	ldr	r3, [r3, #24]
 800657a:	2b00      	cmp	r3, #0
 800657c:	d002      	beq.n	8006584 <osThreadNew+0x58>
        prio = (UBaseType_t)attr->priority;
 800657e:	687b      	ldr	r3, [r7, #4]
 8006580:	699b      	ldr	r3, [r3, #24]
 8006582:	61fb      	str	r3, [r7, #28]
      }

      if ((prio < osPriorityIdle) || (prio > osPriorityISR) || ((attr->attr_bits & osThreadJoinable) == osThreadJoinable)) {
 8006584:	69fb      	ldr	r3, [r7, #28]
 8006586:	2b00      	cmp	r3, #0
 8006588:	d008      	beq.n	800659c <osThreadNew+0x70>
 800658a:	69fb      	ldr	r3, [r7, #28]
 800658c:	2b38      	cmp	r3, #56	; 0x38
 800658e:	d805      	bhi.n	800659c <osThreadNew+0x70>
 8006590:	687b      	ldr	r3, [r7, #4]
 8006592:	685b      	ldr	r3, [r3, #4]
 8006594:	f003 0301 	and.w	r3, r3, #1
 8006598:	2b00      	cmp	r3, #0
 800659a:	d001      	beq.n	80065a0 <osThreadNew+0x74>
        return (NULL);
 800659c:	2300      	movs	r3, #0
 800659e:	e054      	b.n	800664a <osThreadNew+0x11e>
      }

      if (attr->stack_size > 0U) {
 80065a0:	687b      	ldr	r3, [r7, #4]
 80065a2:	695b      	ldr	r3, [r3, #20]
 80065a4:	2b00      	cmp	r3, #0
 80065a6:	d003      	beq.n	80065b0 <osThreadNew+0x84>
        /* In FreeRTOS stack is not in bytes, but in sizeof(StackType_t) which is 4 on ARM ports.       */
        /* Stack size should be therefore 4 byte aligned in order to avoid division caused side effects */
        stack = attr->stack_size / sizeof(StackType_t);
 80065a8:	687b      	ldr	r3, [r7, #4]
 80065aa:	695b      	ldr	r3, [r3, #20]
 80065ac:	089b      	lsrs	r3, r3, #2
 80065ae:	623b      	str	r3, [r7, #32]
      }

      if ((attr->cb_mem    != NULL) && (attr->cb_size    >= sizeof(StaticTask_t)) &&
 80065b0:	687b      	ldr	r3, [r7, #4]
 80065b2:	689b      	ldr	r3, [r3, #8]
 80065b4:	2b00      	cmp	r3, #0
 80065b6:	d00e      	beq.n	80065d6 <osThreadNew+0xaa>
 80065b8:	687b      	ldr	r3, [r7, #4]
 80065ba:	68db      	ldr	r3, [r3, #12]
 80065bc:	2bbb      	cmp	r3, #187	; 0xbb
 80065be:	d90a      	bls.n	80065d6 <osThreadNew+0xaa>
          (attr->stack_mem != NULL) && (attr->stack_size >  0U)) {
 80065c0:	687b      	ldr	r3, [r7, #4]
 80065c2:	691b      	ldr	r3, [r3, #16]
      if ((attr->cb_mem    != NULL) && (attr->cb_size    >= sizeof(StaticTask_t)) &&
 80065c4:	2b00      	cmp	r3, #0
 80065c6:	d006      	beq.n	80065d6 <osThreadNew+0xaa>
          (attr->stack_mem != NULL) && (attr->stack_size >  0U)) {
 80065c8:	687b      	ldr	r3, [r7, #4]
 80065ca:	695b      	ldr	r3, [r3, #20]
 80065cc:	2b00      	cmp	r3, #0
 80065ce:	d002      	beq.n	80065d6 <osThreadNew+0xaa>
        mem = 1;
 80065d0:	2301      	movs	r3, #1
 80065d2:	61bb      	str	r3, [r7, #24]
 80065d4:	e010      	b.n	80065f8 <osThreadNew+0xcc>
      }
      else {
        if ((attr->cb_mem == NULL) && (attr->cb_size == 0U) && (attr->stack_mem == NULL)) {
 80065d6:	687b      	ldr	r3, [r7, #4]
 80065d8:	689b      	ldr	r3, [r3, #8]
 80065da:	2b00      	cmp	r3, #0
 80065dc:	d10c      	bne.n	80065f8 <osThreadNew+0xcc>
 80065de:	687b      	ldr	r3, [r7, #4]
 80065e0:	68db      	ldr	r3, [r3, #12]
 80065e2:	2b00      	cmp	r3, #0
 80065e4:	d108      	bne.n	80065f8 <osThreadNew+0xcc>
 80065e6:	687b      	ldr	r3, [r7, #4]
 80065e8:	691b      	ldr	r3, [r3, #16]
 80065ea:	2b00      	cmp	r3, #0
 80065ec:	d104      	bne.n	80065f8 <osThreadNew+0xcc>
          mem = 0;
 80065ee:	2300      	movs	r3, #0
 80065f0:	61bb      	str	r3, [r7, #24]
 80065f2:	e001      	b.n	80065f8 <osThreadNew+0xcc>
        }
      }
    }
    else {
      mem = 0;
 80065f4:	2300      	movs	r3, #0
 80065f6:	61bb      	str	r3, [r7, #24]
    }

    if (mem == 1) {
 80065f8:	69bb      	ldr	r3, [r7, #24]
 80065fa:	2b01      	cmp	r3, #1
 80065fc:	d110      	bne.n	8006620 <osThreadNew+0xf4>
      #if (configSUPPORT_STATIC_ALLOCATION == 1)
        hTask = xTaskCreateStatic ((TaskFunction_t)func, name, stack, argument, prio, (StackType_t  *)attr->stack_mem,
 80065fe:	687b      	ldr	r3, [r7, #4]
 8006600:	691b      	ldr	r3, [r3, #16]
                                                                                      (StaticTask_t *)attr->cb_mem);
 8006602:	687a      	ldr	r2, [r7, #4]
 8006604:	6892      	ldr	r2, [r2, #8]
        hTask = xTaskCreateStatic ((TaskFunction_t)func, name, stack, argument, prio, (StackType_t  *)attr->stack_mem,
 8006606:	9202      	str	r2, [sp, #8]
 8006608:	9301      	str	r3, [sp, #4]
 800660a:	69fb      	ldr	r3, [r7, #28]
 800660c:	9300      	str	r3, [sp, #0]
 800660e:	68bb      	ldr	r3, [r7, #8]
 8006610:	6a3a      	ldr	r2, [r7, #32]
 8006612:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8006614:	68f8      	ldr	r0, [r7, #12]
 8006616:	f001 fa6d 	bl	8007af4 <xTaskCreateStatic>
 800661a:	4603      	mov	r3, r0
 800661c:	613b      	str	r3, [r7, #16]
 800661e:	e013      	b.n	8006648 <osThreadNew+0x11c>
      #endif
    }
    else {
      if (mem == 0) {
 8006620:	69bb      	ldr	r3, [r7, #24]
 8006622:	2b00      	cmp	r3, #0
 8006624:	d110      	bne.n	8006648 <osThreadNew+0x11c>
        #if (configSUPPORT_DYNAMIC_ALLOCATION == 1)
          if (xTaskCreate ((TaskFunction_t)func, name, (uint16_t)stack, argument, prio, &hTask) != pdPASS) {
 8006626:	6a3b      	ldr	r3, [r7, #32]
 8006628:	b29a      	uxth	r2, r3
 800662a:	f107 0310 	add.w	r3, r7, #16
 800662e:	9301      	str	r3, [sp, #4]
 8006630:	69fb      	ldr	r3, [r7, #28]
 8006632:	9300      	str	r3, [sp, #0]
 8006634:	68bb      	ldr	r3, [r7, #8]
 8006636:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8006638:	68f8      	ldr	r0, [r7, #12]
 800663a:	f001 fab8 	bl	8007bae <xTaskCreate>
 800663e:	4603      	mov	r3, r0
 8006640:	2b01      	cmp	r3, #1
 8006642:	d001      	beq.n	8006648 <osThreadNew+0x11c>
            hTask = NULL;
 8006644:	2300      	movs	r3, #0
 8006646:	613b      	str	r3, [r7, #16]
        #endif
      }
    }
  }

  return ((osThreadId_t)hTask);
 8006648:	693b      	ldr	r3, [r7, #16]
}
 800664a:	4618      	mov	r0, r3
 800664c:	3728      	adds	r7, #40	; 0x28
 800664e:	46bd      	mov	sp, r7
 8006650:	bd80      	pop	{r7, pc}

08006652 <osThreadResume>:
  }

  return (stat);
}

osStatus_t osThreadResume (osThreadId_t thread_id) {
 8006652:	b580      	push	{r7, lr}
 8006654:	b086      	sub	sp, #24
 8006656:	af00      	add	r7, sp, #0
 8006658:	6078      	str	r0, [r7, #4]
  TaskHandle_t hTask = (TaskHandle_t)thread_id;
 800665a:	687b      	ldr	r3, [r7, #4]
 800665c:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 800665e:	f3ef 8305 	mrs	r3, IPSR
 8006662:	60fb      	str	r3, [r7, #12]
  return(result);
 8006664:	68fb      	ldr	r3, [r7, #12]
  osStatus_t stat;

  if (IS_IRQ()) {
 8006666:	2b00      	cmp	r3, #0
 8006668:	d003      	beq.n	8006672 <osThreadResume+0x20>
    stat = osErrorISR;
 800666a:	f06f 0305 	mvn.w	r3, #5
 800666e:	617b      	str	r3, [r7, #20]
 8006670:	e00b      	b.n	800668a <osThreadResume+0x38>
  }
  else if (hTask == NULL) {
 8006672:	693b      	ldr	r3, [r7, #16]
 8006674:	2b00      	cmp	r3, #0
 8006676:	d103      	bne.n	8006680 <osThreadResume+0x2e>
    stat = osErrorParameter;
 8006678:	f06f 0303 	mvn.w	r3, #3
 800667c:	617b      	str	r3, [r7, #20]
 800667e:	e004      	b.n	800668a <osThreadResume+0x38>
  }
  else {
    stat = osOK;
 8006680:	2300      	movs	r3, #0
 8006682:	617b      	str	r3, [r7, #20]
    vTaskResume (hTask);
 8006684:	6938      	ldr	r0, [r7, #16]
 8006686:	f001 fc53 	bl	8007f30 <vTaskResume>
  }

  return (stat);
 800668a:	697b      	ldr	r3, [r7, #20]
}
 800668c:	4618      	mov	r0, r3
 800668e:	3718      	adds	r7, #24
 8006690:	46bd      	mov	sp, r7
 8006692:	bd80      	pop	{r7, pc}

08006694 <osDelay>:
  /* Return flags before clearing */
  return (rflags);
}
#endif /* (configUSE_OS2_THREAD_FLAGS == 1) */

osStatus_t osDelay (uint32_t ticks) {
 8006694:	b580      	push	{r7, lr}
 8006696:	b084      	sub	sp, #16
 8006698:	af00      	add	r7, sp, #0
 800669a:	6078      	str	r0, [r7, #4]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 800669c:	f3ef 8305 	mrs	r3, IPSR
 80066a0:	60bb      	str	r3, [r7, #8]
  return(result);
 80066a2:	68bb      	ldr	r3, [r7, #8]
  osStatus_t stat;

  if (IS_IRQ()) {
 80066a4:	2b00      	cmp	r3, #0
 80066a6:	d003      	beq.n	80066b0 <osDelay+0x1c>
    stat = osErrorISR;
 80066a8:	f06f 0305 	mvn.w	r3, #5
 80066ac:	60fb      	str	r3, [r7, #12]
 80066ae:	e007      	b.n	80066c0 <osDelay+0x2c>
  }
  else {
    stat = osOK;
 80066b0:	2300      	movs	r3, #0
 80066b2:	60fb      	str	r3, [r7, #12]

    if (ticks != 0U) {
 80066b4:	687b      	ldr	r3, [r7, #4]
 80066b6:	2b00      	cmp	r3, #0
 80066b8:	d002      	beq.n	80066c0 <osDelay+0x2c>
      vTaskDelay(ticks);
 80066ba:	6878      	ldr	r0, [r7, #4]
 80066bc:	f001 fbd2 	bl	8007e64 <vTaskDelay>
    }
  }

  return (stat);
 80066c0:	68fb      	ldr	r3, [r7, #12]
}
 80066c2:	4618      	mov	r0, r3
 80066c4:	3710      	adds	r7, #16
 80066c6:	46bd      	mov	sp, r7
 80066c8:	bd80      	pop	{r7, pc}

080066ca <osSemaphoreNew>:
}
#endif /* (configUSE_OS2_MUTEX == 1) */

/*---------------------------------------------------------------------------*/

osSemaphoreId_t osSemaphoreNew (uint32_t max_count, uint32_t initial_count, const osSemaphoreAttr_t *attr) {
 80066ca:	b580      	push	{r7, lr}
 80066cc:	b08a      	sub	sp, #40	; 0x28
 80066ce:	af02      	add	r7, sp, #8
 80066d0:	60f8      	str	r0, [r7, #12]
 80066d2:	60b9      	str	r1, [r7, #8]
 80066d4:	607a      	str	r2, [r7, #4]
  int32_t mem;
  #if (configQUEUE_REGISTRY_SIZE > 0)
  const char *name;
  #endif

  hSemaphore = NULL;
 80066d6:	2300      	movs	r3, #0
 80066d8:	61fb      	str	r3, [r7, #28]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 80066da:	f3ef 8305 	mrs	r3, IPSR
 80066de:	613b      	str	r3, [r7, #16]
  return(result);
 80066e0:	693b      	ldr	r3, [r7, #16]

  if (!IS_IRQ() && (max_count > 0U) && (initial_count <= max_count)) {
 80066e2:	2b00      	cmp	r3, #0
 80066e4:	d175      	bne.n	80067d2 <osSemaphoreNew+0x108>
 80066e6:	68fb      	ldr	r3, [r7, #12]
 80066e8:	2b00      	cmp	r3, #0
 80066ea:	d072      	beq.n	80067d2 <osSemaphoreNew+0x108>
 80066ec:	68ba      	ldr	r2, [r7, #8]
 80066ee:	68fb      	ldr	r3, [r7, #12]
 80066f0:	429a      	cmp	r2, r3
 80066f2:	d86e      	bhi.n	80067d2 <osSemaphoreNew+0x108>
    mem = -1;
 80066f4:	f04f 33ff 	mov.w	r3, #4294967295
 80066f8:	61bb      	str	r3, [r7, #24]

    if (attr != NULL) {
 80066fa:	687b      	ldr	r3, [r7, #4]
 80066fc:	2b00      	cmp	r3, #0
 80066fe:	d015      	beq.n	800672c <osSemaphoreNew+0x62>
      if ((attr->cb_mem != NULL) && (attr->cb_size >= sizeof(StaticSemaphore_t))) {
 8006700:	687b      	ldr	r3, [r7, #4]
 8006702:	689b      	ldr	r3, [r3, #8]
 8006704:	2b00      	cmp	r3, #0
 8006706:	d006      	beq.n	8006716 <osSemaphoreNew+0x4c>
 8006708:	687b      	ldr	r3, [r7, #4]
 800670a:	68db      	ldr	r3, [r3, #12]
 800670c:	2b4f      	cmp	r3, #79	; 0x4f
 800670e:	d902      	bls.n	8006716 <osSemaphoreNew+0x4c>
        mem = 1;
 8006710:	2301      	movs	r3, #1
 8006712:	61bb      	str	r3, [r7, #24]
 8006714:	e00c      	b.n	8006730 <osSemaphoreNew+0x66>
      }
      else {
        if ((attr->cb_mem == NULL) && (attr->cb_size == 0U)) {
 8006716:	687b      	ldr	r3, [r7, #4]
 8006718:	689b      	ldr	r3, [r3, #8]
 800671a:	2b00      	cmp	r3, #0
 800671c:	d108      	bne.n	8006730 <osSemaphoreNew+0x66>
 800671e:	687b      	ldr	r3, [r7, #4]
 8006720:	68db      	ldr	r3, [r3, #12]
 8006722:	2b00      	cmp	r3, #0
 8006724:	d104      	bne.n	8006730 <osSemaphoreNew+0x66>
          mem = 0;
 8006726:	2300      	movs	r3, #0
 8006728:	61bb      	str	r3, [r7, #24]
 800672a:	e001      	b.n	8006730 <osSemaphoreNew+0x66>
        }
      }
    }
    else {
      mem = 0;
 800672c:	2300      	movs	r3, #0
 800672e:	61bb      	str	r3, [r7, #24]
    }

    if (mem != -1) {
 8006730:	69bb      	ldr	r3, [r7, #24]
 8006732:	f1b3 3fff 	cmp.w	r3, #4294967295
 8006736:	d04c      	beq.n	80067d2 <osSemaphoreNew+0x108>
      if (max_count == 1U) {
 8006738:	68fb      	ldr	r3, [r7, #12]
 800673a:	2b01      	cmp	r3, #1
 800673c:	d128      	bne.n	8006790 <osSemaphoreNew+0xc6>
        if (mem == 1) {
 800673e:	69bb      	ldr	r3, [r7, #24]
 8006740:	2b01      	cmp	r3, #1
 8006742:	d10a      	bne.n	800675a <osSemaphoreNew+0x90>
          #if (configSUPPORT_STATIC_ALLOCATION == 1)
            hSemaphore = xSemaphoreCreateBinaryStatic ((StaticSemaphore_t *)attr->cb_mem);
 8006744:	687b      	ldr	r3, [r7, #4]
 8006746:	689b      	ldr	r3, [r3, #8]
 8006748:	2203      	movs	r2, #3
 800674a:	9200      	str	r2, [sp, #0]
 800674c:	2200      	movs	r2, #0
 800674e:	2100      	movs	r1, #0
 8006750:	2001      	movs	r0, #1
 8006752:	f000 fa29 	bl	8006ba8 <xQueueGenericCreateStatic>
 8006756:	61f8      	str	r0, [r7, #28]
 8006758:	e005      	b.n	8006766 <osSemaphoreNew+0x9c>
          #endif
        }
        else {
          #if (configSUPPORT_DYNAMIC_ALLOCATION == 1)
            hSemaphore = xSemaphoreCreateBinary();
 800675a:	2203      	movs	r2, #3
 800675c:	2100      	movs	r1, #0
 800675e:	2001      	movs	r0, #1
 8006760:	f000 fa9a 	bl	8006c98 <xQueueGenericCreate>
 8006764:	61f8      	str	r0, [r7, #28]
          #endif
        }

        if ((hSemaphore != NULL) && (initial_count != 0U)) {
 8006766:	69fb      	ldr	r3, [r7, #28]
 8006768:	2b00      	cmp	r3, #0
 800676a:	d022      	beq.n	80067b2 <osSemaphoreNew+0xe8>
 800676c:	68bb      	ldr	r3, [r7, #8]
 800676e:	2b00      	cmp	r3, #0
 8006770:	d01f      	beq.n	80067b2 <osSemaphoreNew+0xe8>
          if (xSemaphoreGive (hSemaphore) != pdPASS) {
 8006772:	2300      	movs	r3, #0
 8006774:	2200      	movs	r2, #0
 8006776:	2100      	movs	r1, #0
 8006778:	69f8      	ldr	r0, [r7, #28]
 800677a:	f000 fb55 	bl	8006e28 <xQueueGenericSend>
 800677e:	4603      	mov	r3, r0
 8006780:	2b01      	cmp	r3, #1
 8006782:	d016      	beq.n	80067b2 <osSemaphoreNew+0xe8>
            vSemaphoreDelete (hSemaphore);
 8006784:	69f8      	ldr	r0, [r7, #28]
 8006786:	f000 ffe1 	bl	800774c <vQueueDelete>
            hSemaphore = NULL;
 800678a:	2300      	movs	r3, #0
 800678c:	61fb      	str	r3, [r7, #28]
 800678e:	e010      	b.n	80067b2 <osSemaphoreNew+0xe8>
          }
        }
      }
      else {
        if (mem == 1) {
 8006790:	69bb      	ldr	r3, [r7, #24]
 8006792:	2b01      	cmp	r3, #1
 8006794:	d108      	bne.n	80067a8 <osSemaphoreNew+0xde>
          #if (configSUPPORT_STATIC_ALLOCATION == 1)
            hSemaphore = xSemaphoreCreateCountingStatic (max_count, initial_count, (StaticSemaphore_t *)attr->cb_mem);
 8006796:	687b      	ldr	r3, [r7, #4]
 8006798:	689b      	ldr	r3, [r3, #8]
 800679a:	461a      	mov	r2, r3
 800679c:	68b9      	ldr	r1, [r7, #8]
 800679e:	68f8      	ldr	r0, [r7, #12]
 80067a0:	f000 fad7 	bl	8006d52 <xQueueCreateCountingSemaphoreStatic>
 80067a4:	61f8      	str	r0, [r7, #28]
 80067a6:	e004      	b.n	80067b2 <osSemaphoreNew+0xe8>
          #endif
        }
        else {
          #if (configSUPPORT_DYNAMIC_ALLOCATION == 1)
            hSemaphore = xSemaphoreCreateCounting (max_count, initial_count);
 80067a8:	68b9      	ldr	r1, [r7, #8]
 80067aa:	68f8      	ldr	r0, [r7, #12]
 80067ac:	f000 fb08 	bl	8006dc0 <xQueueCreateCountingSemaphore>
 80067b0:	61f8      	str	r0, [r7, #28]
          #endif
        }
      }
      
      #if (configQUEUE_REGISTRY_SIZE > 0)
      if (hSemaphore != NULL) {
 80067b2:	69fb      	ldr	r3, [r7, #28]
 80067b4:	2b00      	cmp	r3, #0
 80067b6:	d00c      	beq.n	80067d2 <osSemaphoreNew+0x108>
        if (attr != NULL) {
 80067b8:	687b      	ldr	r3, [r7, #4]
 80067ba:	2b00      	cmp	r3, #0
 80067bc:	d003      	beq.n	80067c6 <osSemaphoreNew+0xfc>
          name = attr->name;
 80067be:	687b      	ldr	r3, [r7, #4]
 80067c0:	681b      	ldr	r3, [r3, #0]
 80067c2:	617b      	str	r3, [r7, #20]
 80067c4:	e001      	b.n	80067ca <osSemaphoreNew+0x100>
        } else {
          name = NULL;
 80067c6:	2300      	movs	r3, #0
 80067c8:	617b      	str	r3, [r7, #20]
        }
        vQueueAddToRegistry (hSemaphore, name);
 80067ca:	6979      	ldr	r1, [r7, #20]
 80067cc:	69f8      	ldr	r0, [r7, #28]
 80067ce:	f001 f909 	bl	80079e4 <vQueueAddToRegistry>
      }
      #endif
    }
  }

  return ((osSemaphoreId_t)hSemaphore);
 80067d2:	69fb      	ldr	r3, [r7, #28]
}
 80067d4:	4618      	mov	r0, r3
 80067d6:	3720      	adds	r7, #32
 80067d8:	46bd      	mov	sp, r7
 80067da:	bd80      	pop	{r7, pc}

080067dc <osSemaphoreAcquire>:

osStatus_t osSemaphoreAcquire (osSemaphoreId_t semaphore_id, uint32_t timeout) {
 80067dc:	b580      	push	{r7, lr}
 80067de:	b086      	sub	sp, #24
 80067e0:	af00      	add	r7, sp, #0
 80067e2:	6078      	str	r0, [r7, #4]
 80067e4:	6039      	str	r1, [r7, #0]
  SemaphoreHandle_t hSemaphore = (SemaphoreHandle_t)semaphore_id;
 80067e6:	687b      	ldr	r3, [r7, #4]
 80067e8:	613b      	str	r3, [r7, #16]
  osStatus_t stat;
  BaseType_t yield;

  stat = osOK;
 80067ea:	2300      	movs	r3, #0
 80067ec:	617b      	str	r3, [r7, #20]

  if (hSemaphore == NULL) {
 80067ee:	693b      	ldr	r3, [r7, #16]
 80067f0:	2b00      	cmp	r3, #0
 80067f2:	d103      	bne.n	80067fc <osSemaphoreAcquire+0x20>
    stat = osErrorParameter;
 80067f4:	f06f 0303 	mvn.w	r3, #3
 80067f8:	617b      	str	r3, [r7, #20]
 80067fa:	e039      	b.n	8006870 <osSemaphoreAcquire+0x94>
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 80067fc:	f3ef 8305 	mrs	r3, IPSR
 8006800:	60fb      	str	r3, [r7, #12]
  return(result);
 8006802:	68fb      	ldr	r3, [r7, #12]
  }
  else if (IS_IRQ()) {
 8006804:	2b00      	cmp	r3, #0
 8006806:	d022      	beq.n	800684e <osSemaphoreAcquire+0x72>
    if (timeout != 0U) {
 8006808:	683b      	ldr	r3, [r7, #0]
 800680a:	2b00      	cmp	r3, #0
 800680c:	d003      	beq.n	8006816 <osSemaphoreAcquire+0x3a>
      stat = osErrorParameter;
 800680e:	f06f 0303 	mvn.w	r3, #3
 8006812:	617b      	str	r3, [r7, #20]
 8006814:	e02c      	b.n	8006870 <osSemaphoreAcquire+0x94>
    }
    else {
      yield = pdFALSE;
 8006816:	2300      	movs	r3, #0
 8006818:	60bb      	str	r3, [r7, #8]

      if (xSemaphoreTakeFromISR (hSemaphore, &yield) != pdPASS) {
 800681a:	f107 0308 	add.w	r3, r7, #8
 800681e:	461a      	mov	r2, r3
 8006820:	2100      	movs	r1, #0
 8006822:	6938      	ldr	r0, [r7, #16]
 8006824:	f000 ff12 	bl	800764c <xQueueReceiveFromISR>
 8006828:	4603      	mov	r3, r0
 800682a:	2b01      	cmp	r3, #1
 800682c:	d003      	beq.n	8006836 <osSemaphoreAcquire+0x5a>
        stat = osErrorResource;
 800682e:	f06f 0302 	mvn.w	r3, #2
 8006832:	617b      	str	r3, [r7, #20]
 8006834:	e01c      	b.n	8006870 <osSemaphoreAcquire+0x94>
      } else {
        portYIELD_FROM_ISR (yield);
 8006836:	68bb      	ldr	r3, [r7, #8]
 8006838:	2b00      	cmp	r3, #0
 800683a:	d019      	beq.n	8006870 <osSemaphoreAcquire+0x94>
 800683c:	4b0f      	ldr	r3, [pc, #60]	; (800687c <osSemaphoreAcquire+0xa0>)
 800683e:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8006842:	601a      	str	r2, [r3, #0]
 8006844:	f3bf 8f4f 	dsb	sy
 8006848:	f3bf 8f6f 	isb	sy
 800684c:	e010      	b.n	8006870 <osSemaphoreAcquire+0x94>
      }
    }
  }
  else {
    if (xSemaphoreTake (hSemaphore, (TickType_t)timeout) != pdPASS) {
 800684e:	6839      	ldr	r1, [r7, #0]
 8006850:	6938      	ldr	r0, [r7, #16]
 8006852:	f000 fdef 	bl	8007434 <xQueueSemaphoreTake>
 8006856:	4603      	mov	r3, r0
 8006858:	2b01      	cmp	r3, #1
 800685a:	d009      	beq.n	8006870 <osSemaphoreAcquire+0x94>
      if (timeout != 0U) {
 800685c:	683b      	ldr	r3, [r7, #0]
 800685e:	2b00      	cmp	r3, #0
 8006860:	d003      	beq.n	800686a <osSemaphoreAcquire+0x8e>
        stat = osErrorTimeout;
 8006862:	f06f 0301 	mvn.w	r3, #1
 8006866:	617b      	str	r3, [r7, #20]
 8006868:	e002      	b.n	8006870 <osSemaphoreAcquire+0x94>
      } else {
        stat = osErrorResource;
 800686a:	f06f 0302 	mvn.w	r3, #2
 800686e:	617b      	str	r3, [r7, #20]
      }
    }
  }

  return (stat);
 8006870:	697b      	ldr	r3, [r7, #20]
}
 8006872:	4618      	mov	r0, r3
 8006874:	3718      	adds	r7, #24
 8006876:	46bd      	mov	sp, r7
 8006878:	bd80      	pop	{r7, pc}
 800687a:	bf00      	nop
 800687c:	e000ed04 	.word	0xe000ed04

08006880 <osSemaphoreRelease>:

osStatus_t osSemaphoreRelease (osSemaphoreId_t semaphore_id) {
 8006880:	b580      	push	{r7, lr}
 8006882:	b086      	sub	sp, #24
 8006884:	af00      	add	r7, sp, #0
 8006886:	6078      	str	r0, [r7, #4]
  SemaphoreHandle_t hSemaphore = (SemaphoreHandle_t)semaphore_id;
 8006888:	687b      	ldr	r3, [r7, #4]
 800688a:	613b      	str	r3, [r7, #16]
  osStatus_t stat;
  BaseType_t yield;

  stat = osOK;
 800688c:	2300      	movs	r3, #0
 800688e:	617b      	str	r3, [r7, #20]

  if (hSemaphore == NULL) {
 8006890:	693b      	ldr	r3, [r7, #16]
 8006892:	2b00      	cmp	r3, #0
 8006894:	d103      	bne.n	800689e <osSemaphoreRelease+0x1e>
    stat = osErrorParameter;
 8006896:	f06f 0303 	mvn.w	r3, #3
 800689a:	617b      	str	r3, [r7, #20]
 800689c:	e02c      	b.n	80068f8 <osSemaphoreRelease+0x78>
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 800689e:	f3ef 8305 	mrs	r3, IPSR
 80068a2:	60fb      	str	r3, [r7, #12]
  return(result);
 80068a4:	68fb      	ldr	r3, [r7, #12]
  }
  else if (IS_IRQ()) {
 80068a6:	2b00      	cmp	r3, #0
 80068a8:	d01a      	beq.n	80068e0 <osSemaphoreRelease+0x60>
    yield = pdFALSE;
 80068aa:	2300      	movs	r3, #0
 80068ac:	60bb      	str	r3, [r7, #8]

    if (xSemaphoreGiveFromISR (hSemaphore, &yield) != pdTRUE) {
 80068ae:	f107 0308 	add.w	r3, r7, #8
 80068b2:	4619      	mov	r1, r3
 80068b4:	6938      	ldr	r0, [r7, #16]
 80068b6:	f000 fc50 	bl	800715a <xQueueGiveFromISR>
 80068ba:	4603      	mov	r3, r0
 80068bc:	2b01      	cmp	r3, #1
 80068be:	d003      	beq.n	80068c8 <osSemaphoreRelease+0x48>
      stat = osErrorResource;
 80068c0:	f06f 0302 	mvn.w	r3, #2
 80068c4:	617b      	str	r3, [r7, #20]
 80068c6:	e017      	b.n	80068f8 <osSemaphoreRelease+0x78>
    } else {
      portYIELD_FROM_ISR (yield);
 80068c8:	68bb      	ldr	r3, [r7, #8]
 80068ca:	2b00      	cmp	r3, #0
 80068cc:	d014      	beq.n	80068f8 <osSemaphoreRelease+0x78>
 80068ce:	4b0d      	ldr	r3, [pc, #52]	; (8006904 <osSemaphoreRelease+0x84>)
 80068d0:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80068d4:	601a      	str	r2, [r3, #0]
 80068d6:	f3bf 8f4f 	dsb	sy
 80068da:	f3bf 8f6f 	isb	sy
 80068de:	e00b      	b.n	80068f8 <osSemaphoreRelease+0x78>
    }
  }
  else {
    if (xSemaphoreGive (hSemaphore) != pdPASS) {
 80068e0:	2300      	movs	r3, #0
 80068e2:	2200      	movs	r2, #0
 80068e4:	2100      	movs	r1, #0
 80068e6:	6938      	ldr	r0, [r7, #16]
 80068e8:	f000 fa9e 	bl	8006e28 <xQueueGenericSend>
 80068ec:	4603      	mov	r3, r0
 80068ee:	2b01      	cmp	r3, #1
 80068f0:	d002      	beq.n	80068f8 <osSemaphoreRelease+0x78>
      stat = osErrorResource;
 80068f2:	f06f 0302 	mvn.w	r3, #2
 80068f6:	617b      	str	r3, [r7, #20]
    }
  }

  return (stat);
 80068f8:	697b      	ldr	r3, [r7, #20]
}
 80068fa:	4618      	mov	r0, r3
 80068fc:	3718      	adds	r7, #24
 80068fe:	46bd      	mov	sp, r7
 8006900:	bd80      	pop	{r7, pc}
 8006902:	bf00      	nop
 8006904:	e000ed04 	.word	0xe000ed04

08006908 <vApplicationGetIdleTaskMemory>:

/*
  vApplicationGetIdleTaskMemory gets called when configSUPPORT_STATIC_ALLOCATION
  equals to 1 and is required for static memory allocation support.
*/
__WEAK void vApplicationGetIdleTaskMemory (StaticTask_t **ppxIdleTaskTCBBuffer, StackType_t **ppxIdleTaskStackBuffer, uint32_t *pulIdleTaskStackSize) {
 8006908:	b480      	push	{r7}
 800690a:	b085      	sub	sp, #20
 800690c:	af00      	add	r7, sp, #0
 800690e:	60f8      	str	r0, [r7, #12]
 8006910:	60b9      	str	r1, [r7, #8]
 8006912:	607a      	str	r2, [r7, #4]
  /* Idle task control block and stack */
  static StaticTask_t Idle_TCB;
  static StackType_t  Idle_Stack[configMINIMAL_STACK_SIZE];

  *ppxIdleTaskTCBBuffer   = &Idle_TCB;
 8006914:	68fb      	ldr	r3, [r7, #12]
 8006916:	4a07      	ldr	r2, [pc, #28]	; (8006934 <vApplicationGetIdleTaskMemory+0x2c>)
 8006918:	601a      	str	r2, [r3, #0]
  *ppxIdleTaskStackBuffer = &Idle_Stack[0];
 800691a:	68bb      	ldr	r3, [r7, #8]
 800691c:	4a06      	ldr	r2, [pc, #24]	; (8006938 <vApplicationGetIdleTaskMemory+0x30>)
 800691e:	601a      	str	r2, [r3, #0]
  *pulIdleTaskStackSize   = (uint32_t)configMINIMAL_STACK_SIZE;
 8006920:	687b      	ldr	r3, [r7, #4]
 8006922:	f44f 7280 	mov.w	r2, #256	; 0x100
 8006926:	601a      	str	r2, [r3, #0]
}
 8006928:	bf00      	nop
 800692a:	3714      	adds	r7, #20
 800692c:	46bd      	mov	sp, r7
 800692e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006932:	4770      	bx	lr
 8006934:	240003ac 	.word	0x240003ac
 8006938:	24000468 	.word	0x24000468

0800693c <vApplicationGetTimerTaskMemory>:

/*
  vApplicationGetTimerTaskMemory gets called when configSUPPORT_STATIC_ALLOCATION
  equals to 1 and is required for static memory allocation support.
*/
__WEAK void vApplicationGetTimerTaskMemory (StaticTask_t **ppxTimerTaskTCBBuffer, StackType_t **ppxTimerTaskStackBuffer, uint32_t *pulTimerTaskStackSize) {
 800693c:	b480      	push	{r7}
 800693e:	b085      	sub	sp, #20
 8006940:	af00      	add	r7, sp, #0
 8006942:	60f8      	str	r0, [r7, #12]
 8006944:	60b9      	str	r1, [r7, #8]
 8006946:	607a      	str	r2, [r7, #4]
  /* Timer task control block and stack */
  static StaticTask_t Timer_TCB;
  static StackType_t  Timer_Stack[configTIMER_TASK_STACK_DEPTH];

  *ppxTimerTaskTCBBuffer   = &Timer_TCB;
 8006948:	68fb      	ldr	r3, [r7, #12]
 800694a:	4a07      	ldr	r2, [pc, #28]	; (8006968 <vApplicationGetTimerTaskMemory+0x2c>)
 800694c:	601a      	str	r2, [r3, #0]
  *ppxTimerTaskStackBuffer = &Timer_Stack[0];
 800694e:	68bb      	ldr	r3, [r7, #8]
 8006950:	4a06      	ldr	r2, [pc, #24]	; (800696c <vApplicationGetTimerTaskMemory+0x30>)
 8006952:	601a      	str	r2, [r3, #0]
  *pulTimerTaskStackSize   = (uint32_t)configTIMER_TASK_STACK_DEPTH;
 8006954:	687b      	ldr	r3, [r7, #4]
 8006956:	f44f 7280 	mov.w	r2, #256	; 0x100
 800695a:	601a      	str	r2, [r3, #0]
}
 800695c:	bf00      	nop
 800695e:	3714      	adds	r7, #20
 8006960:	46bd      	mov	sp, r7
 8006962:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006966:	4770      	bx	lr
 8006968:	24000868 	.word	0x24000868
 800696c:	24000924 	.word	0x24000924

08006970 <vListInitialise>:
/*-----------------------------------------------------------
 * PUBLIC LIST API documented in list.h
 *----------------------------------------------------------*/

void vListInitialise( List_t * const pxList )
{
 8006970:	b480      	push	{r7}
 8006972:	b083      	sub	sp, #12
 8006974:	af00      	add	r7, sp, #0
 8006976:	6078      	str	r0, [r7, #4]
	/* The list structure contains a list item which is used to mark the
	end of the list.  To initialise the list the list end is inserted
	as the only list entry. */
	pxList->pxIndex = ( ListItem_t * ) &( pxList->xListEnd );			/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8006978:	687b      	ldr	r3, [r7, #4]
 800697a:	f103 0208 	add.w	r2, r3, #8
 800697e:	687b      	ldr	r3, [r7, #4]
 8006980:	605a      	str	r2, [r3, #4]

	/* The list end value is the highest possible value in the list to
	ensure it remains at the end of the list. */
	pxList->xListEnd.xItemValue = portMAX_DELAY;
 8006982:	687b      	ldr	r3, [r7, #4]
 8006984:	f04f 32ff 	mov.w	r2, #4294967295
 8006988:	609a      	str	r2, [r3, #8]

	/* The list end next and previous pointers point to itself so we know
	when the list is empty. */
	pxList->xListEnd.pxNext = ( ListItem_t * ) &( pxList->xListEnd );	/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 800698a:	687b      	ldr	r3, [r7, #4]
 800698c:	f103 0208 	add.w	r2, r3, #8
 8006990:	687b      	ldr	r3, [r7, #4]
 8006992:	60da      	str	r2, [r3, #12]
	pxList->xListEnd.pxPrevious = ( ListItem_t * ) &( pxList->xListEnd );/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8006994:	687b      	ldr	r3, [r7, #4]
 8006996:	f103 0208 	add.w	r2, r3, #8
 800699a:	687b      	ldr	r3, [r7, #4]
 800699c:	611a      	str	r2, [r3, #16]

	pxList->uxNumberOfItems = ( UBaseType_t ) 0U;
 800699e:	687b      	ldr	r3, [r7, #4]
 80069a0:	2200      	movs	r2, #0
 80069a2:	601a      	str	r2, [r3, #0]

	/* Write known values into the list if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_LIST_INTEGRITY_CHECK_1_VALUE( pxList );
	listSET_LIST_INTEGRITY_CHECK_2_VALUE( pxList );
}
 80069a4:	bf00      	nop
 80069a6:	370c      	adds	r7, #12
 80069a8:	46bd      	mov	sp, r7
 80069aa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80069ae:	4770      	bx	lr

080069b0 <vListInitialiseItem>:
/*-----------------------------------------------------------*/

void vListInitialiseItem( ListItem_t * const pxItem )
{
 80069b0:	b480      	push	{r7}
 80069b2:	b083      	sub	sp, #12
 80069b4:	af00      	add	r7, sp, #0
 80069b6:	6078      	str	r0, [r7, #4]
	/* Make sure the list item is not recorded as being on a list. */
	pxItem->pxContainer = NULL;
 80069b8:	687b      	ldr	r3, [r7, #4]
 80069ba:	2200      	movs	r2, #0
 80069bc:	611a      	str	r2, [r3, #16]

	/* Write known values into the list item if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_FIRST_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
	listSET_SECOND_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
}
 80069be:	bf00      	nop
 80069c0:	370c      	adds	r7, #12
 80069c2:	46bd      	mov	sp, r7
 80069c4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80069c8:	4770      	bx	lr

080069ca <vListInsertEnd>:
/*-----------------------------------------------------------*/

void vListInsertEnd( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 80069ca:	b480      	push	{r7}
 80069cc:	b085      	sub	sp, #20
 80069ce:	af00      	add	r7, sp, #0
 80069d0:	6078      	str	r0, [r7, #4]
 80069d2:	6039      	str	r1, [r7, #0]
ListItem_t * const pxIndex = pxList->pxIndex;
 80069d4:	687b      	ldr	r3, [r7, #4]
 80069d6:	685b      	ldr	r3, [r3, #4]
 80069d8:	60fb      	str	r3, [r7, #12]
	listTEST_LIST_ITEM_INTEGRITY( pxNewListItem );

	/* Insert a new list item into pxList, but rather than sort the list,
	makes the new list item the last item to be removed by a call to
	listGET_OWNER_OF_NEXT_ENTRY(). */
	pxNewListItem->pxNext = pxIndex;
 80069da:	683b      	ldr	r3, [r7, #0]
 80069dc:	68fa      	ldr	r2, [r7, #12]
 80069de:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxPrevious = pxIndex->pxPrevious;
 80069e0:	68fb      	ldr	r3, [r7, #12]
 80069e2:	689a      	ldr	r2, [r3, #8]
 80069e4:	683b      	ldr	r3, [r7, #0]
 80069e6:	609a      	str	r2, [r3, #8]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	pxIndex->pxPrevious->pxNext = pxNewListItem;
 80069e8:	68fb      	ldr	r3, [r7, #12]
 80069ea:	689b      	ldr	r3, [r3, #8]
 80069ec:	683a      	ldr	r2, [r7, #0]
 80069ee:	605a      	str	r2, [r3, #4]
	pxIndex->pxPrevious = pxNewListItem;
 80069f0:	68fb      	ldr	r3, [r7, #12]
 80069f2:	683a      	ldr	r2, [r7, #0]
 80069f4:	609a      	str	r2, [r3, #8]

	/* Remember which list the item is in. */
	pxNewListItem->pxContainer = pxList;
 80069f6:	683b      	ldr	r3, [r7, #0]
 80069f8:	687a      	ldr	r2, [r7, #4]
 80069fa:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 80069fc:	687b      	ldr	r3, [r7, #4]
 80069fe:	681b      	ldr	r3, [r3, #0]
 8006a00:	1c5a      	adds	r2, r3, #1
 8006a02:	687b      	ldr	r3, [r7, #4]
 8006a04:	601a      	str	r2, [r3, #0]
}
 8006a06:	bf00      	nop
 8006a08:	3714      	adds	r7, #20
 8006a0a:	46bd      	mov	sp, r7
 8006a0c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006a10:	4770      	bx	lr

08006a12 <vListInsert>:
/*-----------------------------------------------------------*/

void vListInsert( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 8006a12:	b480      	push	{r7}
 8006a14:	b085      	sub	sp, #20
 8006a16:	af00      	add	r7, sp, #0
 8006a18:	6078      	str	r0, [r7, #4]
 8006a1a:	6039      	str	r1, [r7, #0]
ListItem_t *pxIterator;
const TickType_t xValueOfInsertion = pxNewListItem->xItemValue;
 8006a1c:	683b      	ldr	r3, [r7, #0]
 8006a1e:	681b      	ldr	r3, [r3, #0]
 8006a20:	60bb      	str	r3, [r7, #8]
	new list item should be placed after it.  This ensures that TCBs which are
	stored in ready lists (all of which have the same xItemValue value) get a
	share of the CPU.  However, if the xItemValue is the same as the back marker
	the iteration loop below will not end.  Therefore the value is checked
	first, and the algorithm slightly modified if necessary. */
	if( xValueOfInsertion == portMAX_DELAY )
 8006a22:	68bb      	ldr	r3, [r7, #8]
 8006a24:	f1b3 3fff 	cmp.w	r3, #4294967295
 8006a28:	d103      	bne.n	8006a32 <vListInsert+0x20>
	{
		pxIterator = pxList->xListEnd.pxPrevious;
 8006a2a:	687b      	ldr	r3, [r7, #4]
 8006a2c:	691b      	ldr	r3, [r3, #16]
 8006a2e:	60fb      	str	r3, [r7, #12]
 8006a30:	e00c      	b.n	8006a4c <vListInsert+0x3a>
			4) Using a queue or semaphore before it has been initialised or
			   before the scheduler has been started (are interrupts firing
			   before vTaskStartScheduler() has been called?).
		**********************************************************************/

		for( pxIterator = ( ListItem_t * ) &( pxList->xListEnd ); pxIterator->pxNext->xItemValue <= xValueOfInsertion; pxIterator = pxIterator->pxNext ) /*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. *//*lint !e440 The iterator moves to a different value, not xValueOfInsertion. */
 8006a32:	687b      	ldr	r3, [r7, #4]
 8006a34:	3308      	adds	r3, #8
 8006a36:	60fb      	str	r3, [r7, #12]
 8006a38:	e002      	b.n	8006a40 <vListInsert+0x2e>
 8006a3a:	68fb      	ldr	r3, [r7, #12]
 8006a3c:	685b      	ldr	r3, [r3, #4]
 8006a3e:	60fb      	str	r3, [r7, #12]
 8006a40:	68fb      	ldr	r3, [r7, #12]
 8006a42:	685b      	ldr	r3, [r3, #4]
 8006a44:	681b      	ldr	r3, [r3, #0]
 8006a46:	68ba      	ldr	r2, [r7, #8]
 8006a48:	429a      	cmp	r2, r3
 8006a4a:	d2f6      	bcs.n	8006a3a <vListInsert+0x28>
			/* There is nothing to do here, just iterating to the wanted
			insertion position. */
		}
	}

	pxNewListItem->pxNext = pxIterator->pxNext;
 8006a4c:	68fb      	ldr	r3, [r7, #12]
 8006a4e:	685a      	ldr	r2, [r3, #4]
 8006a50:	683b      	ldr	r3, [r7, #0]
 8006a52:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxNext->pxPrevious = pxNewListItem;
 8006a54:	683b      	ldr	r3, [r7, #0]
 8006a56:	685b      	ldr	r3, [r3, #4]
 8006a58:	683a      	ldr	r2, [r7, #0]
 8006a5a:	609a      	str	r2, [r3, #8]
	pxNewListItem->pxPrevious = pxIterator;
 8006a5c:	683b      	ldr	r3, [r7, #0]
 8006a5e:	68fa      	ldr	r2, [r7, #12]
 8006a60:	609a      	str	r2, [r3, #8]
	pxIterator->pxNext = pxNewListItem;
 8006a62:	68fb      	ldr	r3, [r7, #12]
 8006a64:	683a      	ldr	r2, [r7, #0]
 8006a66:	605a      	str	r2, [r3, #4]

	/* Remember which list the item is in.  This allows fast removal of the
	item later. */
	pxNewListItem->pxContainer = pxList;
 8006a68:	683b      	ldr	r3, [r7, #0]
 8006a6a:	687a      	ldr	r2, [r7, #4]
 8006a6c:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 8006a6e:	687b      	ldr	r3, [r7, #4]
 8006a70:	681b      	ldr	r3, [r3, #0]
 8006a72:	1c5a      	adds	r2, r3, #1
 8006a74:	687b      	ldr	r3, [r7, #4]
 8006a76:	601a      	str	r2, [r3, #0]
}
 8006a78:	bf00      	nop
 8006a7a:	3714      	adds	r7, #20
 8006a7c:	46bd      	mov	sp, r7
 8006a7e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006a82:	4770      	bx	lr

08006a84 <uxListRemove>:
/*-----------------------------------------------------------*/

UBaseType_t uxListRemove( ListItem_t * const pxItemToRemove )
{
 8006a84:	b480      	push	{r7}
 8006a86:	b085      	sub	sp, #20
 8006a88:	af00      	add	r7, sp, #0
 8006a8a:	6078      	str	r0, [r7, #4]
/* The list item knows which list it is in.  Obtain the list from the list
item. */
List_t * const pxList = pxItemToRemove->pxContainer;
 8006a8c:	687b      	ldr	r3, [r7, #4]
 8006a8e:	691b      	ldr	r3, [r3, #16]
 8006a90:	60fb      	str	r3, [r7, #12]

	pxItemToRemove->pxNext->pxPrevious = pxItemToRemove->pxPrevious;
 8006a92:	687b      	ldr	r3, [r7, #4]
 8006a94:	685b      	ldr	r3, [r3, #4]
 8006a96:	687a      	ldr	r2, [r7, #4]
 8006a98:	6892      	ldr	r2, [r2, #8]
 8006a9a:	609a      	str	r2, [r3, #8]
	pxItemToRemove->pxPrevious->pxNext = pxItemToRemove->pxNext;
 8006a9c:	687b      	ldr	r3, [r7, #4]
 8006a9e:	689b      	ldr	r3, [r3, #8]
 8006aa0:	687a      	ldr	r2, [r7, #4]
 8006aa2:	6852      	ldr	r2, [r2, #4]
 8006aa4:	605a      	str	r2, [r3, #4]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	/* Make sure the index is left pointing to a valid item. */
	if( pxList->pxIndex == pxItemToRemove )
 8006aa6:	68fb      	ldr	r3, [r7, #12]
 8006aa8:	685b      	ldr	r3, [r3, #4]
 8006aaa:	687a      	ldr	r2, [r7, #4]
 8006aac:	429a      	cmp	r2, r3
 8006aae:	d103      	bne.n	8006ab8 <uxListRemove+0x34>
	{
		pxList->pxIndex = pxItemToRemove->pxPrevious;
 8006ab0:	687b      	ldr	r3, [r7, #4]
 8006ab2:	689a      	ldr	r2, [r3, #8]
 8006ab4:	68fb      	ldr	r3, [r7, #12]
 8006ab6:	605a      	str	r2, [r3, #4]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxItemToRemove->pxContainer = NULL;
 8006ab8:	687b      	ldr	r3, [r7, #4]
 8006aba:	2200      	movs	r2, #0
 8006abc:	611a      	str	r2, [r3, #16]
	( pxList->uxNumberOfItems )--;
 8006abe:	68fb      	ldr	r3, [r7, #12]
 8006ac0:	681b      	ldr	r3, [r3, #0]
 8006ac2:	1e5a      	subs	r2, r3, #1
 8006ac4:	68fb      	ldr	r3, [r7, #12]
 8006ac6:	601a      	str	r2, [r3, #0]

	return pxList->uxNumberOfItems;
 8006ac8:	68fb      	ldr	r3, [r7, #12]
 8006aca:	681b      	ldr	r3, [r3, #0]
}
 8006acc:	4618      	mov	r0, r3
 8006ace:	3714      	adds	r7, #20
 8006ad0:	46bd      	mov	sp, r7
 8006ad2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006ad6:	4770      	bx	lr

08006ad8 <xQueueGenericReset>:
	}														\
	taskEXIT_CRITICAL()
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericReset( QueueHandle_t xQueue, BaseType_t xNewQueue )
{
 8006ad8:	b580      	push	{r7, lr}
 8006ada:	b084      	sub	sp, #16
 8006adc:	af00      	add	r7, sp, #0
 8006ade:	6078      	str	r0, [r7, #4]
 8006ae0:	6039      	str	r1, [r7, #0]
Queue_t * const pxQueue = xQueue;
 8006ae2:	687b      	ldr	r3, [r7, #4]
 8006ae4:	60fb      	str	r3, [r7, #12]

	configASSERT( pxQueue );
 8006ae6:	68fb      	ldr	r3, [r7, #12]
 8006ae8:	2b00      	cmp	r3, #0
 8006aea:	d10a      	bne.n	8006b02 <xQueueGenericReset+0x2a>

portFORCE_INLINE static void vPortRaiseBASEPRI( void )
{
uint32_t ulNewBASEPRI;

	__asm volatile
 8006aec:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006af0:	f383 8811 	msr	BASEPRI, r3
 8006af4:	f3bf 8f6f 	isb	sy
 8006af8:	f3bf 8f4f 	dsb	sy
 8006afc:	60bb      	str	r3, [r7, #8]
		"	msr basepri, %0											\n" \
		"	isb														\n" \
		"	dsb														\n" \
		:"=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
	);
}
 8006afe:	bf00      	nop
 8006b00:	e7fe      	b.n	8006b00 <xQueueGenericReset+0x28>

	taskENTER_CRITICAL();
 8006b02:	f002 fd27 	bl	8009554 <vPortEnterCritical>
	{
		pxQueue->u.xQueue.pcTail = pxQueue->pcHead + ( pxQueue->uxLength * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 8006b06:	68fb      	ldr	r3, [r7, #12]
 8006b08:	681a      	ldr	r2, [r3, #0]
 8006b0a:	68fb      	ldr	r3, [r7, #12]
 8006b0c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8006b0e:	68f9      	ldr	r1, [r7, #12]
 8006b10:	6c09      	ldr	r1, [r1, #64]	; 0x40
 8006b12:	fb01 f303 	mul.w	r3, r1, r3
 8006b16:	441a      	add	r2, r3
 8006b18:	68fb      	ldr	r3, [r7, #12]
 8006b1a:	609a      	str	r2, [r3, #8]
		pxQueue->uxMessagesWaiting = ( UBaseType_t ) 0U;
 8006b1c:	68fb      	ldr	r3, [r7, #12]
 8006b1e:	2200      	movs	r2, #0
 8006b20:	639a      	str	r2, [r3, #56]	; 0x38
		pxQueue->pcWriteTo = pxQueue->pcHead;
 8006b22:	68fb      	ldr	r3, [r7, #12]
 8006b24:	681a      	ldr	r2, [r3, #0]
 8006b26:	68fb      	ldr	r3, [r7, #12]
 8006b28:	605a      	str	r2, [r3, #4]
		pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead + ( ( pxQueue->uxLength - 1U ) * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 8006b2a:	68fb      	ldr	r3, [r7, #12]
 8006b2c:	681a      	ldr	r2, [r3, #0]
 8006b2e:	68fb      	ldr	r3, [r7, #12]
 8006b30:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8006b32:	3b01      	subs	r3, #1
 8006b34:	68f9      	ldr	r1, [r7, #12]
 8006b36:	6c09      	ldr	r1, [r1, #64]	; 0x40
 8006b38:	fb01 f303 	mul.w	r3, r1, r3
 8006b3c:	441a      	add	r2, r3
 8006b3e:	68fb      	ldr	r3, [r7, #12]
 8006b40:	60da      	str	r2, [r3, #12]
		pxQueue->cRxLock = queueUNLOCKED;
 8006b42:	68fb      	ldr	r3, [r7, #12]
 8006b44:	22ff      	movs	r2, #255	; 0xff
 8006b46:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
		pxQueue->cTxLock = queueUNLOCKED;
 8006b4a:	68fb      	ldr	r3, [r7, #12]
 8006b4c:	22ff      	movs	r2, #255	; 0xff
 8006b4e:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

		if( xNewQueue == pdFALSE )
 8006b52:	683b      	ldr	r3, [r7, #0]
 8006b54:	2b00      	cmp	r3, #0
 8006b56:	d114      	bne.n	8006b82 <xQueueGenericReset+0xaa>
			/* If there are tasks blocked waiting to read from the queue, then
			the tasks will remain blocked as after this function exits the queue
			will still be empty.  If there are tasks blocked waiting to write to
			the queue, then one should be unblocked as after this function exits
			it will be possible to write to it. */
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8006b58:	68fb      	ldr	r3, [r7, #12]
 8006b5a:	691b      	ldr	r3, [r3, #16]
 8006b5c:	2b00      	cmp	r3, #0
 8006b5e:	d01a      	beq.n	8006b96 <xQueueGenericReset+0xbe>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8006b60:	68fb      	ldr	r3, [r7, #12]
 8006b62:	3310      	adds	r3, #16
 8006b64:	4618      	mov	r0, r3
 8006b66:	f001 fcdb 	bl	8008520 <xTaskRemoveFromEventList>
 8006b6a:	4603      	mov	r3, r0
 8006b6c:	2b00      	cmp	r3, #0
 8006b6e:	d012      	beq.n	8006b96 <xQueueGenericReset+0xbe>
				{
					queueYIELD_IF_USING_PREEMPTION();
 8006b70:	4b0c      	ldr	r3, [pc, #48]	; (8006ba4 <xQueueGenericReset+0xcc>)
 8006b72:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8006b76:	601a      	str	r2, [r3, #0]
 8006b78:	f3bf 8f4f 	dsb	sy
 8006b7c:	f3bf 8f6f 	isb	sy
 8006b80:	e009      	b.n	8006b96 <xQueueGenericReset+0xbe>
			}
		}
		else
		{
			/* Ensure the event queues start in the correct state. */
			vListInitialise( &( pxQueue->xTasksWaitingToSend ) );
 8006b82:	68fb      	ldr	r3, [r7, #12]
 8006b84:	3310      	adds	r3, #16
 8006b86:	4618      	mov	r0, r3
 8006b88:	f7ff fef2 	bl	8006970 <vListInitialise>
			vListInitialise( &( pxQueue->xTasksWaitingToReceive ) );
 8006b8c:	68fb      	ldr	r3, [r7, #12]
 8006b8e:	3324      	adds	r3, #36	; 0x24
 8006b90:	4618      	mov	r0, r3
 8006b92:	f7ff feed 	bl	8006970 <vListInitialise>
		}
	}
	taskEXIT_CRITICAL();
 8006b96:	f002 fd0d 	bl	80095b4 <vPortExitCritical>

	/* A value is returned for calling semantic consistency with previous
	versions. */
	return pdPASS;
 8006b9a:	2301      	movs	r3, #1
}
 8006b9c:	4618      	mov	r0, r3
 8006b9e:	3710      	adds	r7, #16
 8006ba0:	46bd      	mov	sp, r7
 8006ba2:	bd80      	pop	{r7, pc}
 8006ba4:	e000ed04 	.word	0xe000ed04

08006ba8 <xQueueGenericCreateStatic>:
/*-----------------------------------------------------------*/

#if( configSUPPORT_STATIC_ALLOCATION == 1 )

	QueueHandle_t xQueueGenericCreateStatic( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, StaticQueue_t *pxStaticQueue, const uint8_t ucQueueType )
	{
 8006ba8:	b580      	push	{r7, lr}
 8006baa:	b08e      	sub	sp, #56	; 0x38
 8006bac:	af02      	add	r7, sp, #8
 8006bae:	60f8      	str	r0, [r7, #12]
 8006bb0:	60b9      	str	r1, [r7, #8]
 8006bb2:	607a      	str	r2, [r7, #4]
 8006bb4:	603b      	str	r3, [r7, #0]
	Queue_t *pxNewQueue;

		configASSERT( uxQueueLength > ( UBaseType_t ) 0 );
 8006bb6:	68fb      	ldr	r3, [r7, #12]
 8006bb8:	2b00      	cmp	r3, #0
 8006bba:	d10a      	bne.n	8006bd2 <xQueueGenericCreateStatic+0x2a>
	__asm volatile
 8006bbc:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006bc0:	f383 8811 	msr	BASEPRI, r3
 8006bc4:	f3bf 8f6f 	isb	sy
 8006bc8:	f3bf 8f4f 	dsb	sy
 8006bcc:	62bb      	str	r3, [r7, #40]	; 0x28
}
 8006bce:	bf00      	nop
 8006bd0:	e7fe      	b.n	8006bd0 <xQueueGenericCreateStatic+0x28>

		/* The StaticQueue_t structure and the queue storage area must be
		supplied. */
		configASSERT( pxStaticQueue != NULL );
 8006bd2:	683b      	ldr	r3, [r7, #0]
 8006bd4:	2b00      	cmp	r3, #0
 8006bd6:	d10a      	bne.n	8006bee <xQueueGenericCreateStatic+0x46>
	__asm volatile
 8006bd8:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006bdc:	f383 8811 	msr	BASEPRI, r3
 8006be0:	f3bf 8f6f 	isb	sy
 8006be4:	f3bf 8f4f 	dsb	sy
 8006be8:	627b      	str	r3, [r7, #36]	; 0x24
}
 8006bea:	bf00      	nop
 8006bec:	e7fe      	b.n	8006bec <xQueueGenericCreateStatic+0x44>

		/* A queue storage area should be provided if the item size is not 0, and
		should not be provided if the item size is 0. */
		configASSERT( !( ( pucQueueStorage != NULL ) && ( uxItemSize == 0 ) ) );
 8006bee:	687b      	ldr	r3, [r7, #4]
 8006bf0:	2b00      	cmp	r3, #0
 8006bf2:	d002      	beq.n	8006bfa <xQueueGenericCreateStatic+0x52>
 8006bf4:	68bb      	ldr	r3, [r7, #8]
 8006bf6:	2b00      	cmp	r3, #0
 8006bf8:	d001      	beq.n	8006bfe <xQueueGenericCreateStatic+0x56>
 8006bfa:	2301      	movs	r3, #1
 8006bfc:	e000      	b.n	8006c00 <xQueueGenericCreateStatic+0x58>
 8006bfe:	2300      	movs	r3, #0
 8006c00:	2b00      	cmp	r3, #0
 8006c02:	d10a      	bne.n	8006c1a <xQueueGenericCreateStatic+0x72>
	__asm volatile
 8006c04:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006c08:	f383 8811 	msr	BASEPRI, r3
 8006c0c:	f3bf 8f6f 	isb	sy
 8006c10:	f3bf 8f4f 	dsb	sy
 8006c14:	623b      	str	r3, [r7, #32]
}
 8006c16:	bf00      	nop
 8006c18:	e7fe      	b.n	8006c18 <xQueueGenericCreateStatic+0x70>
		configASSERT( !( ( pucQueueStorage == NULL ) && ( uxItemSize != 0 ) ) );
 8006c1a:	687b      	ldr	r3, [r7, #4]
 8006c1c:	2b00      	cmp	r3, #0
 8006c1e:	d102      	bne.n	8006c26 <xQueueGenericCreateStatic+0x7e>
 8006c20:	68bb      	ldr	r3, [r7, #8]
 8006c22:	2b00      	cmp	r3, #0
 8006c24:	d101      	bne.n	8006c2a <xQueueGenericCreateStatic+0x82>
 8006c26:	2301      	movs	r3, #1
 8006c28:	e000      	b.n	8006c2c <xQueueGenericCreateStatic+0x84>
 8006c2a:	2300      	movs	r3, #0
 8006c2c:	2b00      	cmp	r3, #0
 8006c2e:	d10a      	bne.n	8006c46 <xQueueGenericCreateStatic+0x9e>
	__asm volatile
 8006c30:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006c34:	f383 8811 	msr	BASEPRI, r3
 8006c38:	f3bf 8f6f 	isb	sy
 8006c3c:	f3bf 8f4f 	dsb	sy
 8006c40:	61fb      	str	r3, [r7, #28]
}
 8006c42:	bf00      	nop
 8006c44:	e7fe      	b.n	8006c44 <xQueueGenericCreateStatic+0x9c>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticQueue_t or StaticSemaphore_t equals the size of
			the real queue and semaphore structures. */
			volatile size_t xSize = sizeof( StaticQueue_t );
 8006c46:	2350      	movs	r3, #80	; 0x50
 8006c48:	617b      	str	r3, [r7, #20]
			configASSERT( xSize == sizeof( Queue_t ) );
 8006c4a:	697b      	ldr	r3, [r7, #20]
 8006c4c:	2b50      	cmp	r3, #80	; 0x50
 8006c4e:	d00a      	beq.n	8006c66 <xQueueGenericCreateStatic+0xbe>
	__asm volatile
 8006c50:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006c54:	f383 8811 	msr	BASEPRI, r3
 8006c58:	f3bf 8f6f 	isb	sy
 8006c5c:	f3bf 8f4f 	dsb	sy
 8006c60:	61bb      	str	r3, [r7, #24]
}
 8006c62:	bf00      	nop
 8006c64:	e7fe      	b.n	8006c64 <xQueueGenericCreateStatic+0xbc>
			( void ) xSize; /* Keeps lint quiet when configASSERT() is not defined. */
 8006c66:	697b      	ldr	r3, [r7, #20]
		#endif /* configASSERT_DEFINED */

		/* The address of a statically allocated queue was passed in, use it.
		The address of a statically allocated storage area was also passed in
		but is already set. */
		pxNewQueue = ( Queue_t * ) pxStaticQueue; /*lint !e740 !e9087 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 8006c68:	683b      	ldr	r3, [r7, #0]
 8006c6a:	62fb      	str	r3, [r7, #44]	; 0x2c

		if( pxNewQueue != NULL )
 8006c6c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006c6e:	2b00      	cmp	r3, #0
 8006c70:	d00d      	beq.n	8006c8e <xQueueGenericCreateStatic+0xe6>
			#if( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
			{
				/* Queues can be allocated wither statically or dynamically, so
				note this queue was allocated statically in case the queue is
				later deleted. */
				pxNewQueue->ucStaticallyAllocated = pdTRUE;
 8006c72:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006c74:	2201      	movs	r2, #1
 8006c76:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
			}
			#endif /* configSUPPORT_DYNAMIC_ALLOCATION */

			prvInitialiseNewQueue( uxQueueLength, uxItemSize, pucQueueStorage, ucQueueType, pxNewQueue );
 8006c7a:	f897 2038 	ldrb.w	r2, [r7, #56]	; 0x38
 8006c7e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006c80:	9300      	str	r3, [sp, #0]
 8006c82:	4613      	mov	r3, r2
 8006c84:	687a      	ldr	r2, [r7, #4]
 8006c86:	68b9      	ldr	r1, [r7, #8]
 8006c88:	68f8      	ldr	r0, [r7, #12]
 8006c8a:	f000 f83f 	bl	8006d0c <prvInitialiseNewQueue>
		{
			traceQUEUE_CREATE_FAILED( ucQueueType );
			mtCOVERAGE_TEST_MARKER();
		}

		return pxNewQueue;
 8006c8e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
	}
 8006c90:	4618      	mov	r0, r3
 8006c92:	3730      	adds	r7, #48	; 0x30
 8006c94:	46bd      	mov	sp, r7
 8006c96:	bd80      	pop	{r7, pc}

08006c98 <xQueueGenericCreate>:
/*-----------------------------------------------------------*/

#if( configSUPPORT_DYNAMIC_ALLOCATION == 1 )

	QueueHandle_t xQueueGenericCreate( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, const uint8_t ucQueueType )
	{
 8006c98:	b580      	push	{r7, lr}
 8006c9a:	b08a      	sub	sp, #40	; 0x28
 8006c9c:	af02      	add	r7, sp, #8
 8006c9e:	60f8      	str	r0, [r7, #12]
 8006ca0:	60b9      	str	r1, [r7, #8]
 8006ca2:	4613      	mov	r3, r2
 8006ca4:	71fb      	strb	r3, [r7, #7]
	Queue_t *pxNewQueue;
	size_t xQueueSizeInBytes;
	uint8_t *pucQueueStorage;

		configASSERT( uxQueueLength > ( UBaseType_t ) 0 );
 8006ca6:	68fb      	ldr	r3, [r7, #12]
 8006ca8:	2b00      	cmp	r3, #0
 8006caa:	d10a      	bne.n	8006cc2 <xQueueGenericCreate+0x2a>
	__asm volatile
 8006cac:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006cb0:	f383 8811 	msr	BASEPRI, r3
 8006cb4:	f3bf 8f6f 	isb	sy
 8006cb8:	f3bf 8f4f 	dsb	sy
 8006cbc:	613b      	str	r3, [r7, #16]
}
 8006cbe:	bf00      	nop
 8006cc0:	e7fe      	b.n	8006cc0 <xQueueGenericCreate+0x28>

		/* Allocate enough space to hold the maximum number of items that
		can be in the queue at any time.  It is valid for uxItemSize to be
		zero in the case the queue is used as a semaphore. */
		xQueueSizeInBytes = ( size_t ) ( uxQueueLength * uxItemSize ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8006cc2:	68fb      	ldr	r3, [r7, #12]
 8006cc4:	68ba      	ldr	r2, [r7, #8]
 8006cc6:	fb02 f303 	mul.w	r3, r2, r3
 8006cca:	61fb      	str	r3, [r7, #28]
		alignment requirements of the Queue_t structure - which in this case
		is an int8_t *.  Therefore, whenever the stack alignment requirements
		are greater than or equal to the pointer to char requirements the cast
		is safe.  In other cases alignment requirements are not strict (one or
		two bytes). */
		pxNewQueue = ( Queue_t * ) pvPortMalloc( sizeof( Queue_t ) + xQueueSizeInBytes ); /*lint !e9087 !e9079 see comment above. */
 8006ccc:	69fb      	ldr	r3, [r7, #28]
 8006cce:	3350      	adds	r3, #80	; 0x50
 8006cd0:	4618      	mov	r0, r3
 8006cd2:	f002 fd61 	bl	8009798 <pvPortMalloc>
 8006cd6:	61b8      	str	r0, [r7, #24]

		if( pxNewQueue != NULL )
 8006cd8:	69bb      	ldr	r3, [r7, #24]
 8006cda:	2b00      	cmp	r3, #0
 8006cdc:	d011      	beq.n	8006d02 <xQueueGenericCreate+0x6a>
		{
			/* Jump past the queue structure to find the location of the queue
			storage area. */
			pucQueueStorage = ( uint8_t * ) pxNewQueue;
 8006cde:	69bb      	ldr	r3, [r7, #24]
 8006ce0:	617b      	str	r3, [r7, #20]
			pucQueueStorage += sizeof( Queue_t ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 8006ce2:	697b      	ldr	r3, [r7, #20]
 8006ce4:	3350      	adds	r3, #80	; 0x50
 8006ce6:	617b      	str	r3, [r7, #20]
			#if( configSUPPORT_STATIC_ALLOCATION == 1 )
			{
				/* Queues can be created either statically or dynamically, so
				note this task was created dynamically in case it is later
				deleted. */
				pxNewQueue->ucStaticallyAllocated = pdFALSE;
 8006ce8:	69bb      	ldr	r3, [r7, #24]
 8006cea:	2200      	movs	r2, #0
 8006cec:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
			}
			#endif /* configSUPPORT_STATIC_ALLOCATION */

			prvInitialiseNewQueue( uxQueueLength, uxItemSize, pucQueueStorage, ucQueueType, pxNewQueue );
 8006cf0:	79fa      	ldrb	r2, [r7, #7]
 8006cf2:	69bb      	ldr	r3, [r7, #24]
 8006cf4:	9300      	str	r3, [sp, #0]
 8006cf6:	4613      	mov	r3, r2
 8006cf8:	697a      	ldr	r2, [r7, #20]
 8006cfa:	68b9      	ldr	r1, [r7, #8]
 8006cfc:	68f8      	ldr	r0, [r7, #12]
 8006cfe:	f000 f805 	bl	8006d0c <prvInitialiseNewQueue>
		{
			traceQUEUE_CREATE_FAILED( ucQueueType );
			mtCOVERAGE_TEST_MARKER();
		}

		return pxNewQueue;
 8006d02:	69bb      	ldr	r3, [r7, #24]
	}
 8006d04:	4618      	mov	r0, r3
 8006d06:	3720      	adds	r7, #32
 8006d08:	46bd      	mov	sp, r7
 8006d0a:	bd80      	pop	{r7, pc}

08006d0c <prvInitialiseNewQueue>:

#endif /* configSUPPORT_STATIC_ALLOCATION */
/*-----------------------------------------------------------*/

static void prvInitialiseNewQueue( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, const uint8_t ucQueueType, Queue_t *pxNewQueue )
{
 8006d0c:	b580      	push	{r7, lr}
 8006d0e:	b084      	sub	sp, #16
 8006d10:	af00      	add	r7, sp, #0
 8006d12:	60f8      	str	r0, [r7, #12]
 8006d14:	60b9      	str	r1, [r7, #8]
 8006d16:	607a      	str	r2, [r7, #4]
 8006d18:	70fb      	strb	r3, [r7, #3]
	/* Remove compiler warnings about unused parameters should
	configUSE_TRACE_FACILITY not be set to 1. */
	( void ) ucQueueType;

	if( uxItemSize == ( UBaseType_t ) 0 )
 8006d1a:	68bb      	ldr	r3, [r7, #8]
 8006d1c:	2b00      	cmp	r3, #0
 8006d1e:	d103      	bne.n	8006d28 <prvInitialiseNewQueue+0x1c>
	{
		/* No RAM was allocated for the queue storage area, but PC head cannot
		be set to NULL because NULL is used as a key to say the queue is used as
		a mutex.  Therefore just set pcHead to point to the queue as a benign
		value that is known to be within the memory map. */
		pxNewQueue->pcHead = ( int8_t * ) pxNewQueue;
 8006d20:	69bb      	ldr	r3, [r7, #24]
 8006d22:	69ba      	ldr	r2, [r7, #24]
 8006d24:	601a      	str	r2, [r3, #0]
 8006d26:	e002      	b.n	8006d2e <prvInitialiseNewQueue+0x22>
	}
	else
	{
		/* Set the head to the start of the queue storage area. */
		pxNewQueue->pcHead = ( int8_t * ) pucQueueStorage;
 8006d28:	69bb      	ldr	r3, [r7, #24]
 8006d2a:	687a      	ldr	r2, [r7, #4]
 8006d2c:	601a      	str	r2, [r3, #0]
	}

	/* Initialise the queue members as described where the queue type is
	defined. */
	pxNewQueue->uxLength = uxQueueLength;
 8006d2e:	69bb      	ldr	r3, [r7, #24]
 8006d30:	68fa      	ldr	r2, [r7, #12]
 8006d32:	63da      	str	r2, [r3, #60]	; 0x3c
	pxNewQueue->uxItemSize = uxItemSize;
 8006d34:	69bb      	ldr	r3, [r7, #24]
 8006d36:	68ba      	ldr	r2, [r7, #8]
 8006d38:	641a      	str	r2, [r3, #64]	; 0x40
	( void ) xQueueGenericReset( pxNewQueue, pdTRUE );
 8006d3a:	2101      	movs	r1, #1
 8006d3c:	69b8      	ldr	r0, [r7, #24]
 8006d3e:	f7ff fecb 	bl	8006ad8 <xQueueGenericReset>

	#if ( configUSE_TRACE_FACILITY == 1 )
	{
		pxNewQueue->ucQueueType = ucQueueType;
 8006d42:	69bb      	ldr	r3, [r7, #24]
 8006d44:	78fa      	ldrb	r2, [r7, #3]
 8006d46:	f883 204c 	strb.w	r2, [r3, #76]	; 0x4c
		pxNewQueue->pxQueueSetContainer = NULL;
	}
	#endif /* configUSE_QUEUE_SETS */

	traceQUEUE_CREATE( pxNewQueue );
}
 8006d4a:	bf00      	nop
 8006d4c:	3710      	adds	r7, #16
 8006d4e:	46bd      	mov	sp, r7
 8006d50:	bd80      	pop	{r7, pc}

08006d52 <xQueueCreateCountingSemaphoreStatic>:
/*-----------------------------------------------------------*/

#if( ( configUSE_COUNTING_SEMAPHORES == 1 ) && ( configSUPPORT_STATIC_ALLOCATION == 1 ) )

	QueueHandle_t xQueueCreateCountingSemaphoreStatic( const UBaseType_t uxMaxCount, const UBaseType_t uxInitialCount, StaticQueue_t *pxStaticQueue )
	{
 8006d52:	b580      	push	{r7, lr}
 8006d54:	b08a      	sub	sp, #40	; 0x28
 8006d56:	af02      	add	r7, sp, #8
 8006d58:	60f8      	str	r0, [r7, #12]
 8006d5a:	60b9      	str	r1, [r7, #8]
 8006d5c:	607a      	str	r2, [r7, #4]
	QueueHandle_t xHandle;

		configASSERT( uxMaxCount != 0 );
 8006d5e:	68fb      	ldr	r3, [r7, #12]
 8006d60:	2b00      	cmp	r3, #0
 8006d62:	d10a      	bne.n	8006d7a <xQueueCreateCountingSemaphoreStatic+0x28>
	__asm volatile
 8006d64:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006d68:	f383 8811 	msr	BASEPRI, r3
 8006d6c:	f3bf 8f6f 	isb	sy
 8006d70:	f3bf 8f4f 	dsb	sy
 8006d74:	61bb      	str	r3, [r7, #24]
}
 8006d76:	bf00      	nop
 8006d78:	e7fe      	b.n	8006d78 <xQueueCreateCountingSemaphoreStatic+0x26>
		configASSERT( uxInitialCount <= uxMaxCount );
 8006d7a:	68ba      	ldr	r2, [r7, #8]
 8006d7c:	68fb      	ldr	r3, [r7, #12]
 8006d7e:	429a      	cmp	r2, r3
 8006d80:	d90a      	bls.n	8006d98 <xQueueCreateCountingSemaphoreStatic+0x46>
	__asm volatile
 8006d82:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006d86:	f383 8811 	msr	BASEPRI, r3
 8006d8a:	f3bf 8f6f 	isb	sy
 8006d8e:	f3bf 8f4f 	dsb	sy
 8006d92:	617b      	str	r3, [r7, #20]
}
 8006d94:	bf00      	nop
 8006d96:	e7fe      	b.n	8006d96 <xQueueCreateCountingSemaphoreStatic+0x44>

		xHandle = xQueueGenericCreateStatic( uxMaxCount, queueSEMAPHORE_QUEUE_ITEM_LENGTH, NULL, pxStaticQueue, queueQUEUE_TYPE_COUNTING_SEMAPHORE );
 8006d98:	2302      	movs	r3, #2
 8006d9a:	9300      	str	r3, [sp, #0]
 8006d9c:	687b      	ldr	r3, [r7, #4]
 8006d9e:	2200      	movs	r2, #0
 8006da0:	2100      	movs	r1, #0
 8006da2:	68f8      	ldr	r0, [r7, #12]
 8006da4:	f7ff ff00 	bl	8006ba8 <xQueueGenericCreateStatic>
 8006da8:	61f8      	str	r0, [r7, #28]

		if( xHandle != NULL )
 8006daa:	69fb      	ldr	r3, [r7, #28]
 8006dac:	2b00      	cmp	r3, #0
 8006dae:	d002      	beq.n	8006db6 <xQueueCreateCountingSemaphoreStatic+0x64>
		{
			( ( Queue_t * ) xHandle )->uxMessagesWaiting = uxInitialCount;
 8006db0:	69fb      	ldr	r3, [r7, #28]
 8006db2:	68ba      	ldr	r2, [r7, #8]
 8006db4:	639a      	str	r2, [r3, #56]	; 0x38
		else
		{
			traceCREATE_COUNTING_SEMAPHORE_FAILED();
		}

		return xHandle;
 8006db6:	69fb      	ldr	r3, [r7, #28]
	}
 8006db8:	4618      	mov	r0, r3
 8006dba:	3720      	adds	r7, #32
 8006dbc:	46bd      	mov	sp, r7
 8006dbe:	bd80      	pop	{r7, pc}

08006dc0 <xQueueCreateCountingSemaphore>:
/*-----------------------------------------------------------*/

#if( ( configUSE_COUNTING_SEMAPHORES == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) )

	QueueHandle_t xQueueCreateCountingSemaphore( const UBaseType_t uxMaxCount, const UBaseType_t uxInitialCount )
	{
 8006dc0:	b580      	push	{r7, lr}
 8006dc2:	b086      	sub	sp, #24
 8006dc4:	af00      	add	r7, sp, #0
 8006dc6:	6078      	str	r0, [r7, #4]
 8006dc8:	6039      	str	r1, [r7, #0]
	QueueHandle_t xHandle;

		configASSERT( uxMaxCount != 0 );
 8006dca:	687b      	ldr	r3, [r7, #4]
 8006dcc:	2b00      	cmp	r3, #0
 8006dce:	d10a      	bne.n	8006de6 <xQueueCreateCountingSemaphore+0x26>
	__asm volatile
 8006dd0:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006dd4:	f383 8811 	msr	BASEPRI, r3
 8006dd8:	f3bf 8f6f 	isb	sy
 8006ddc:	f3bf 8f4f 	dsb	sy
 8006de0:	613b      	str	r3, [r7, #16]
}
 8006de2:	bf00      	nop
 8006de4:	e7fe      	b.n	8006de4 <xQueueCreateCountingSemaphore+0x24>
		configASSERT( uxInitialCount <= uxMaxCount );
 8006de6:	683a      	ldr	r2, [r7, #0]
 8006de8:	687b      	ldr	r3, [r7, #4]
 8006dea:	429a      	cmp	r2, r3
 8006dec:	d90a      	bls.n	8006e04 <xQueueCreateCountingSemaphore+0x44>
	__asm volatile
 8006dee:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006df2:	f383 8811 	msr	BASEPRI, r3
 8006df6:	f3bf 8f6f 	isb	sy
 8006dfa:	f3bf 8f4f 	dsb	sy
 8006dfe:	60fb      	str	r3, [r7, #12]
}
 8006e00:	bf00      	nop
 8006e02:	e7fe      	b.n	8006e02 <xQueueCreateCountingSemaphore+0x42>

		xHandle = xQueueGenericCreate( uxMaxCount, queueSEMAPHORE_QUEUE_ITEM_LENGTH, queueQUEUE_TYPE_COUNTING_SEMAPHORE );
 8006e04:	2202      	movs	r2, #2
 8006e06:	2100      	movs	r1, #0
 8006e08:	6878      	ldr	r0, [r7, #4]
 8006e0a:	f7ff ff45 	bl	8006c98 <xQueueGenericCreate>
 8006e0e:	6178      	str	r0, [r7, #20]

		if( xHandle != NULL )
 8006e10:	697b      	ldr	r3, [r7, #20]
 8006e12:	2b00      	cmp	r3, #0
 8006e14:	d002      	beq.n	8006e1c <xQueueCreateCountingSemaphore+0x5c>
		{
			( ( Queue_t * ) xHandle )->uxMessagesWaiting = uxInitialCount;
 8006e16:	697b      	ldr	r3, [r7, #20]
 8006e18:	683a      	ldr	r2, [r7, #0]
 8006e1a:	639a      	str	r2, [r3, #56]	; 0x38
		else
		{
			traceCREATE_COUNTING_SEMAPHORE_FAILED();
		}

		return xHandle;
 8006e1c:	697b      	ldr	r3, [r7, #20]
	}
 8006e1e:	4618      	mov	r0, r3
 8006e20:	3718      	adds	r7, #24
 8006e22:	46bd      	mov	sp, r7
 8006e24:	bd80      	pop	{r7, pc}
	...

08006e28 <xQueueGenericSend>:

#endif /* ( ( configUSE_COUNTING_SEMAPHORES == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) ) */
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSend( QueueHandle_t xQueue, const void * const pvItemToQueue, TickType_t xTicksToWait, const BaseType_t xCopyPosition )
{
 8006e28:	b580      	push	{r7, lr}
 8006e2a:	b08e      	sub	sp, #56	; 0x38
 8006e2c:	af00      	add	r7, sp, #0
 8006e2e:	60f8      	str	r0, [r7, #12]
 8006e30:	60b9      	str	r1, [r7, #8]
 8006e32:	607a      	str	r2, [r7, #4]
 8006e34:	603b      	str	r3, [r7, #0]
BaseType_t xEntryTimeSet = pdFALSE, xYieldRequired;
 8006e36:	2300      	movs	r3, #0
 8006e38:	637b      	str	r3, [r7, #52]	; 0x34
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 8006e3a:	68fb      	ldr	r3, [r7, #12]
 8006e3c:	633b      	str	r3, [r7, #48]	; 0x30

	configASSERT( pxQueue );
 8006e3e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006e40:	2b00      	cmp	r3, #0
 8006e42:	d10a      	bne.n	8006e5a <xQueueGenericSend+0x32>
	__asm volatile
 8006e44:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006e48:	f383 8811 	msr	BASEPRI, r3
 8006e4c:	f3bf 8f6f 	isb	sy
 8006e50:	f3bf 8f4f 	dsb	sy
 8006e54:	62bb      	str	r3, [r7, #40]	; 0x28
}
 8006e56:	bf00      	nop
 8006e58:	e7fe      	b.n	8006e58 <xQueueGenericSend+0x30>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8006e5a:	68bb      	ldr	r3, [r7, #8]
 8006e5c:	2b00      	cmp	r3, #0
 8006e5e:	d103      	bne.n	8006e68 <xQueueGenericSend+0x40>
 8006e60:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006e62:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006e64:	2b00      	cmp	r3, #0
 8006e66:	d101      	bne.n	8006e6c <xQueueGenericSend+0x44>
 8006e68:	2301      	movs	r3, #1
 8006e6a:	e000      	b.n	8006e6e <xQueueGenericSend+0x46>
 8006e6c:	2300      	movs	r3, #0
 8006e6e:	2b00      	cmp	r3, #0
 8006e70:	d10a      	bne.n	8006e88 <xQueueGenericSend+0x60>
	__asm volatile
 8006e72:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006e76:	f383 8811 	msr	BASEPRI, r3
 8006e7a:	f3bf 8f6f 	isb	sy
 8006e7e:	f3bf 8f4f 	dsb	sy
 8006e82:	627b      	str	r3, [r7, #36]	; 0x24
}
 8006e84:	bf00      	nop
 8006e86:	e7fe      	b.n	8006e86 <xQueueGenericSend+0x5e>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 8006e88:	683b      	ldr	r3, [r7, #0]
 8006e8a:	2b02      	cmp	r3, #2
 8006e8c:	d103      	bne.n	8006e96 <xQueueGenericSend+0x6e>
 8006e8e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006e90:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8006e92:	2b01      	cmp	r3, #1
 8006e94:	d101      	bne.n	8006e9a <xQueueGenericSend+0x72>
 8006e96:	2301      	movs	r3, #1
 8006e98:	e000      	b.n	8006e9c <xQueueGenericSend+0x74>
 8006e9a:	2300      	movs	r3, #0
 8006e9c:	2b00      	cmp	r3, #0
 8006e9e:	d10a      	bne.n	8006eb6 <xQueueGenericSend+0x8e>
	__asm volatile
 8006ea0:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006ea4:	f383 8811 	msr	BASEPRI, r3
 8006ea8:	f3bf 8f6f 	isb	sy
 8006eac:	f3bf 8f4f 	dsb	sy
 8006eb0:	623b      	str	r3, [r7, #32]
}
 8006eb2:	bf00      	nop
 8006eb4:	e7fe      	b.n	8006eb4 <xQueueGenericSend+0x8c>
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 8006eb6:	f001 fcf5 	bl	80088a4 <xTaskGetSchedulerState>
 8006eba:	4603      	mov	r3, r0
 8006ebc:	2b00      	cmp	r3, #0
 8006ebe:	d102      	bne.n	8006ec6 <xQueueGenericSend+0x9e>
 8006ec0:	687b      	ldr	r3, [r7, #4]
 8006ec2:	2b00      	cmp	r3, #0
 8006ec4:	d101      	bne.n	8006eca <xQueueGenericSend+0xa2>
 8006ec6:	2301      	movs	r3, #1
 8006ec8:	e000      	b.n	8006ecc <xQueueGenericSend+0xa4>
 8006eca:	2300      	movs	r3, #0
 8006ecc:	2b00      	cmp	r3, #0
 8006ece:	d10a      	bne.n	8006ee6 <xQueueGenericSend+0xbe>
	__asm volatile
 8006ed0:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006ed4:	f383 8811 	msr	BASEPRI, r3
 8006ed8:	f3bf 8f6f 	isb	sy
 8006edc:	f3bf 8f4f 	dsb	sy
 8006ee0:	61fb      	str	r3, [r7, #28]
}
 8006ee2:	bf00      	nop
 8006ee4:	e7fe      	b.n	8006ee4 <xQueueGenericSend+0xbc>
	/*lint -save -e904 This function relaxes the coding standard somewhat to
	allow return statements within the function itself.  This is done in the
	interest of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 8006ee6:	f002 fb35 	bl	8009554 <vPortEnterCritical>
		{
			/* Is there room on the queue now?  The running task must be the
			highest priority task wanting to access the queue.  If the head item
			in the queue is to be overwritten then it does not matter if the
			queue is full. */
			if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 8006eea:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006eec:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8006eee:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006ef0:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8006ef2:	429a      	cmp	r2, r3
 8006ef4:	d302      	bcc.n	8006efc <xQueueGenericSend+0xd4>
 8006ef6:	683b      	ldr	r3, [r7, #0]
 8006ef8:	2b02      	cmp	r3, #2
 8006efa:	d129      	bne.n	8006f50 <xQueueGenericSend+0x128>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					xYieldRequired = prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 8006efc:	683a      	ldr	r2, [r7, #0]
 8006efe:	68b9      	ldr	r1, [r7, #8]
 8006f00:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8006f02:	f000 fc5e 	bl	80077c2 <prvCopyDataToQueue>
 8006f06:	62f8      	str	r0, [r7, #44]	; 0x2c

					/* If there was a task waiting for data to arrive on the
					queue then unblock it now. */
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8006f08:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006f0a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006f0c:	2b00      	cmp	r3, #0
 8006f0e:	d010      	beq.n	8006f32 <xQueueGenericSend+0x10a>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8006f10:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006f12:	3324      	adds	r3, #36	; 0x24
 8006f14:	4618      	mov	r0, r3
 8006f16:	f001 fb03 	bl	8008520 <xTaskRemoveFromEventList>
 8006f1a:	4603      	mov	r3, r0
 8006f1c:	2b00      	cmp	r3, #0
 8006f1e:	d013      	beq.n	8006f48 <xQueueGenericSend+0x120>
						{
							/* The unblocked task has a priority higher than
							our own so yield immediately.  Yes it is ok to do
							this from within the critical section - the kernel
							takes care of that. */
							queueYIELD_IF_USING_PREEMPTION();
 8006f20:	4b3f      	ldr	r3, [pc, #252]	; (8007020 <xQueueGenericSend+0x1f8>)
 8006f22:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8006f26:	601a      	str	r2, [r3, #0]
 8006f28:	f3bf 8f4f 	dsb	sy
 8006f2c:	f3bf 8f6f 	isb	sy
 8006f30:	e00a      	b.n	8006f48 <xQueueGenericSend+0x120>
						else
						{
							mtCOVERAGE_TEST_MARKER();
						}
					}
					else if( xYieldRequired != pdFALSE )
 8006f32:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006f34:	2b00      	cmp	r3, #0
 8006f36:	d007      	beq.n	8006f48 <xQueueGenericSend+0x120>
					{
						/* This path is a special case that will only get
						executed if the task was holding multiple mutexes and
						the mutexes were given back in an order that is
						different to that in which they were taken. */
						queueYIELD_IF_USING_PREEMPTION();
 8006f38:	4b39      	ldr	r3, [pc, #228]	; (8007020 <xQueueGenericSend+0x1f8>)
 8006f3a:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8006f3e:	601a      	str	r2, [r3, #0]
 8006f40:	f3bf 8f4f 	dsb	sy
 8006f44:	f3bf 8f6f 	isb	sy
						mtCOVERAGE_TEST_MARKER();
					}
				}
				#endif /* configUSE_QUEUE_SETS */

				taskEXIT_CRITICAL();
 8006f48:	f002 fb34 	bl	80095b4 <vPortExitCritical>
				return pdPASS;
 8006f4c:	2301      	movs	r3, #1
 8006f4e:	e063      	b.n	8007018 <xQueueGenericSend+0x1f0>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 8006f50:	687b      	ldr	r3, [r7, #4]
 8006f52:	2b00      	cmp	r3, #0
 8006f54:	d103      	bne.n	8006f5e <xQueueGenericSend+0x136>
				{
					/* The queue was full and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 8006f56:	f002 fb2d 	bl	80095b4 <vPortExitCritical>

					/* Return to the original privilege level before exiting
					the function. */
					traceQUEUE_SEND_FAILED( pxQueue );
					return errQUEUE_FULL;
 8006f5a:	2300      	movs	r3, #0
 8006f5c:	e05c      	b.n	8007018 <xQueueGenericSend+0x1f0>
				}
				else if( xEntryTimeSet == pdFALSE )
 8006f5e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8006f60:	2b00      	cmp	r3, #0
 8006f62:	d106      	bne.n	8006f72 <xQueueGenericSend+0x14a>
				{
					/* The queue was full and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 8006f64:	f107 0314 	add.w	r3, r7, #20
 8006f68:	4618      	mov	r0, r3
 8006f6a:	f001 fb3d 	bl	80085e8 <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 8006f6e:	2301      	movs	r3, #1
 8006f70:	637b      	str	r3, [r7, #52]	; 0x34
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 8006f72:	f002 fb1f 	bl	80095b4 <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 8006f76:	f001 f8a9 	bl	80080cc <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 8006f7a:	f002 faeb 	bl	8009554 <vPortEnterCritical>
 8006f7e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006f80:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8006f84:	b25b      	sxtb	r3, r3
 8006f86:	f1b3 3fff 	cmp.w	r3, #4294967295
 8006f8a:	d103      	bne.n	8006f94 <xQueueGenericSend+0x16c>
 8006f8c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006f8e:	2200      	movs	r2, #0
 8006f90:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8006f94:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006f96:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8006f9a:	b25b      	sxtb	r3, r3
 8006f9c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8006fa0:	d103      	bne.n	8006faa <xQueueGenericSend+0x182>
 8006fa2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006fa4:	2200      	movs	r2, #0
 8006fa6:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8006faa:	f002 fb03 	bl	80095b4 <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 8006fae:	1d3a      	adds	r2, r7, #4
 8006fb0:	f107 0314 	add.w	r3, r7, #20
 8006fb4:	4611      	mov	r1, r2
 8006fb6:	4618      	mov	r0, r3
 8006fb8:	f001 fb2c 	bl	8008614 <xTaskCheckForTimeOut>
 8006fbc:	4603      	mov	r3, r0
 8006fbe:	2b00      	cmp	r3, #0
 8006fc0:	d124      	bne.n	800700c <xQueueGenericSend+0x1e4>
		{
			if( prvIsQueueFull( pxQueue ) != pdFALSE )
 8006fc2:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8006fc4:	f000 fcf5 	bl	80079b2 <prvIsQueueFull>
 8006fc8:	4603      	mov	r3, r0
 8006fca:	2b00      	cmp	r3, #0
 8006fcc:	d018      	beq.n	8007000 <xQueueGenericSend+0x1d8>
			{
				traceBLOCKING_ON_QUEUE_SEND( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToSend ), xTicksToWait );
 8006fce:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006fd0:	3310      	adds	r3, #16
 8006fd2:	687a      	ldr	r2, [r7, #4]
 8006fd4:	4611      	mov	r1, r2
 8006fd6:	4618      	mov	r0, r3
 8006fd8:	f001 fa52 	bl	8008480 <vTaskPlaceOnEventList>
				/* Unlocking the queue means queue events can effect the
				event list.  It is possible that interrupts occurring now
				remove this task from the event list again - but as the
				scheduler is suspended the task will go onto the pending
				ready last instead of the actual ready list. */
				prvUnlockQueue( pxQueue );
 8006fdc:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8006fde:	f000 fc80 	bl	80078e2 <prvUnlockQueue>
				/* Resuming the scheduler will move tasks from the pending
				ready list into the ready list - so it is feasible that this
				task is already in a ready list before it yields - in which
				case the yield will not cause a context switch unless there
				is also a higher priority task in the pending ready list. */
				if( xTaskResumeAll() == pdFALSE )
 8006fe2:	f001 f881 	bl	80080e8 <xTaskResumeAll>
 8006fe6:	4603      	mov	r3, r0
 8006fe8:	2b00      	cmp	r3, #0
 8006fea:	f47f af7c 	bne.w	8006ee6 <xQueueGenericSend+0xbe>
				{
					portYIELD_WITHIN_API();
 8006fee:	4b0c      	ldr	r3, [pc, #48]	; (8007020 <xQueueGenericSend+0x1f8>)
 8006ff0:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8006ff4:	601a      	str	r2, [r3, #0]
 8006ff6:	f3bf 8f4f 	dsb	sy
 8006ffa:	f3bf 8f6f 	isb	sy
 8006ffe:	e772      	b.n	8006ee6 <xQueueGenericSend+0xbe>
				}
			}
			else
			{
				/* Try again. */
				prvUnlockQueue( pxQueue );
 8007000:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8007002:	f000 fc6e 	bl	80078e2 <prvUnlockQueue>
				( void ) xTaskResumeAll();
 8007006:	f001 f86f 	bl	80080e8 <xTaskResumeAll>
 800700a:	e76c      	b.n	8006ee6 <xQueueGenericSend+0xbe>
			}
		}
		else
		{
			/* The timeout has expired. */
			prvUnlockQueue( pxQueue );
 800700c:	6b38      	ldr	r0, [r7, #48]	; 0x30
 800700e:	f000 fc68 	bl	80078e2 <prvUnlockQueue>
			( void ) xTaskResumeAll();
 8007012:	f001 f869 	bl	80080e8 <xTaskResumeAll>

			traceQUEUE_SEND_FAILED( pxQueue );
			return errQUEUE_FULL;
 8007016:	2300      	movs	r3, #0
		}
	} /*lint -restore */
}
 8007018:	4618      	mov	r0, r3
 800701a:	3738      	adds	r7, #56	; 0x38
 800701c:	46bd      	mov	sp, r7
 800701e:	bd80      	pop	{r7, pc}
 8007020:	e000ed04 	.word	0xe000ed04

08007024 <xQueueGenericSendFromISR>:
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSendFromISR( QueueHandle_t xQueue, const void * const pvItemToQueue, BaseType_t * const pxHigherPriorityTaskWoken, const BaseType_t xCopyPosition )
{
 8007024:	b580      	push	{r7, lr}
 8007026:	b090      	sub	sp, #64	; 0x40
 8007028:	af00      	add	r7, sp, #0
 800702a:	60f8      	str	r0, [r7, #12]
 800702c:	60b9      	str	r1, [r7, #8]
 800702e:	607a      	str	r2, [r7, #4]
 8007030:	603b      	str	r3, [r7, #0]
BaseType_t xReturn;
UBaseType_t uxSavedInterruptStatus;
Queue_t * const pxQueue = xQueue;
 8007032:	68fb      	ldr	r3, [r7, #12]
 8007034:	63bb      	str	r3, [r7, #56]	; 0x38

	configASSERT( pxQueue );
 8007036:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007038:	2b00      	cmp	r3, #0
 800703a:	d10a      	bne.n	8007052 <xQueueGenericSendFromISR+0x2e>
	__asm volatile
 800703c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007040:	f383 8811 	msr	BASEPRI, r3
 8007044:	f3bf 8f6f 	isb	sy
 8007048:	f3bf 8f4f 	dsb	sy
 800704c:	62bb      	str	r3, [r7, #40]	; 0x28
}
 800704e:	bf00      	nop
 8007050:	e7fe      	b.n	8007050 <xQueueGenericSendFromISR+0x2c>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8007052:	68bb      	ldr	r3, [r7, #8]
 8007054:	2b00      	cmp	r3, #0
 8007056:	d103      	bne.n	8007060 <xQueueGenericSendFromISR+0x3c>
 8007058:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800705a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800705c:	2b00      	cmp	r3, #0
 800705e:	d101      	bne.n	8007064 <xQueueGenericSendFromISR+0x40>
 8007060:	2301      	movs	r3, #1
 8007062:	e000      	b.n	8007066 <xQueueGenericSendFromISR+0x42>
 8007064:	2300      	movs	r3, #0
 8007066:	2b00      	cmp	r3, #0
 8007068:	d10a      	bne.n	8007080 <xQueueGenericSendFromISR+0x5c>
	__asm volatile
 800706a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800706e:	f383 8811 	msr	BASEPRI, r3
 8007072:	f3bf 8f6f 	isb	sy
 8007076:	f3bf 8f4f 	dsb	sy
 800707a:	627b      	str	r3, [r7, #36]	; 0x24
}
 800707c:	bf00      	nop
 800707e:	e7fe      	b.n	800707e <xQueueGenericSendFromISR+0x5a>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 8007080:	683b      	ldr	r3, [r7, #0]
 8007082:	2b02      	cmp	r3, #2
 8007084:	d103      	bne.n	800708e <xQueueGenericSendFromISR+0x6a>
 8007086:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007088:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800708a:	2b01      	cmp	r3, #1
 800708c:	d101      	bne.n	8007092 <xQueueGenericSendFromISR+0x6e>
 800708e:	2301      	movs	r3, #1
 8007090:	e000      	b.n	8007094 <xQueueGenericSendFromISR+0x70>
 8007092:	2300      	movs	r3, #0
 8007094:	2b00      	cmp	r3, #0
 8007096:	d10a      	bne.n	80070ae <xQueueGenericSendFromISR+0x8a>
	__asm volatile
 8007098:	f04f 0350 	mov.w	r3, #80	; 0x50
 800709c:	f383 8811 	msr	BASEPRI, r3
 80070a0:	f3bf 8f6f 	isb	sy
 80070a4:	f3bf 8f4f 	dsb	sy
 80070a8:	623b      	str	r3, [r7, #32]
}
 80070aa:	bf00      	nop
 80070ac:	e7fe      	b.n	80070ac <xQueueGenericSendFromISR+0x88>
	that have been assigned a priority at or (logically) below the maximum
	system call	interrupt priority.  FreeRTOS maintains a separate interrupt
	safe API to ensure interrupt entry is as fast and as simple as possible.
	More information (albeit Cortex-M specific) is provided on the following
	link: http://www.freertos.org/RTOS-Cortex-M3-M4.html */
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 80070ae:	f002 fb33 	bl	8009718 <vPortValidateInterruptPriority>

portFORCE_INLINE static uint32_t ulPortRaiseBASEPRI( void )
{
uint32_t ulOriginalBASEPRI, ulNewBASEPRI;

	__asm volatile
 80070b2:	f3ef 8211 	mrs	r2, BASEPRI
 80070b6:	f04f 0350 	mov.w	r3, #80	; 0x50
 80070ba:	f383 8811 	msr	BASEPRI, r3
 80070be:	f3bf 8f6f 	isb	sy
 80070c2:	f3bf 8f4f 	dsb	sy
 80070c6:	61fa      	str	r2, [r7, #28]
 80070c8:	61bb      	str	r3, [r7, #24]
		:"=r" (ulOriginalBASEPRI), "=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
	);

	/* This return will not be reached but is necessary to prevent compiler
	warnings. */
	return ulOriginalBASEPRI;
 80070ca:	69fb      	ldr	r3, [r7, #28]
	/* Similar to xQueueGenericSend, except without blocking if there is no room
	in the queue.  Also don't directly wake a task that was blocked on a queue
	read, instead return a flag to say whether a context switch is required or
	not (i.e. has a task with a higher priority than us been woken by this
	post). */
	uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 80070cc:	637b      	str	r3, [r7, #52]	; 0x34
	{
		if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 80070ce:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80070d0:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 80070d2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80070d4:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80070d6:	429a      	cmp	r2, r3
 80070d8:	d302      	bcc.n	80070e0 <xQueueGenericSendFromISR+0xbc>
 80070da:	683b      	ldr	r3, [r7, #0]
 80070dc:	2b02      	cmp	r3, #2
 80070de:	d12f      	bne.n	8007140 <xQueueGenericSendFromISR+0x11c>
		{
			const int8_t cTxLock = pxQueue->cTxLock;
 80070e0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80070e2:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 80070e6:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
			const UBaseType_t uxPreviousMessagesWaiting = pxQueue->uxMessagesWaiting;
 80070ea:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80070ec:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80070ee:	62fb      	str	r3, [r7, #44]	; 0x2c
			/* Semaphores use xQueueGiveFromISR(), so pxQueue will not be a
			semaphore or mutex.  That means prvCopyDataToQueue() cannot result
			in a task disinheriting a priority and prvCopyDataToQueue() can be
			called here even though the disinherit function does not check if
			the scheduler is suspended before accessing the ready lists. */
			( void ) prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 80070f0:	683a      	ldr	r2, [r7, #0]
 80070f2:	68b9      	ldr	r1, [r7, #8]
 80070f4:	6bb8      	ldr	r0, [r7, #56]	; 0x38
 80070f6:	f000 fb64 	bl	80077c2 <prvCopyDataToQueue>

			/* The event list is not altered if the queue is locked.  This will
			be done when the queue is unlocked later. */
			if( cTxLock == queueUNLOCKED )
 80070fa:	f997 3033 	ldrsb.w	r3, [r7, #51]	; 0x33
 80070fe:	f1b3 3fff 	cmp.w	r3, #4294967295
 8007102:	d112      	bne.n	800712a <xQueueGenericSendFromISR+0x106>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8007104:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007106:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007108:	2b00      	cmp	r3, #0
 800710a:	d016      	beq.n	800713a <xQueueGenericSendFromISR+0x116>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 800710c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800710e:	3324      	adds	r3, #36	; 0x24
 8007110:	4618      	mov	r0, r3
 8007112:	f001 fa05 	bl	8008520 <xTaskRemoveFromEventList>
 8007116:	4603      	mov	r3, r0
 8007118:	2b00      	cmp	r3, #0
 800711a:	d00e      	beq.n	800713a <xQueueGenericSendFromISR+0x116>
						{
							/* The task waiting has a higher priority so record that a
							context	switch is required. */
							if( pxHigherPriorityTaskWoken != NULL )
 800711c:	687b      	ldr	r3, [r7, #4]
 800711e:	2b00      	cmp	r3, #0
 8007120:	d00b      	beq.n	800713a <xQueueGenericSendFromISR+0x116>
							{
								*pxHigherPriorityTaskWoken = pdTRUE;
 8007122:	687b      	ldr	r3, [r7, #4]
 8007124:	2201      	movs	r2, #1
 8007126:	601a      	str	r2, [r3, #0]
 8007128:	e007      	b.n	800713a <xQueueGenericSendFromISR+0x116>
			}
			else
			{
				/* Increment the lock count so the task that unlocks the queue
				knows that data was posted while it was locked. */
				pxQueue->cTxLock = ( int8_t ) ( cTxLock + 1 );
 800712a:	f897 3033 	ldrb.w	r3, [r7, #51]	; 0x33
 800712e:	3301      	adds	r3, #1
 8007130:	b2db      	uxtb	r3, r3
 8007132:	b25a      	sxtb	r2, r3
 8007134:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007136:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
			}

			xReturn = pdPASS;
 800713a:	2301      	movs	r3, #1
 800713c:	63fb      	str	r3, [r7, #60]	; 0x3c
		{
 800713e:	e001      	b.n	8007144 <xQueueGenericSendFromISR+0x120>
		}
		else
		{
			traceQUEUE_SEND_FROM_ISR_FAILED( pxQueue );
			xReturn = errQUEUE_FULL;
 8007140:	2300      	movs	r3, #0
 8007142:	63fb      	str	r3, [r7, #60]	; 0x3c
 8007144:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8007146:	617b      	str	r3, [r7, #20]
}
/*-----------------------------------------------------------*/

portFORCE_INLINE static void vPortSetBASEPRI( uint32_t ulNewMaskValue )
{
	__asm volatile
 8007148:	697b      	ldr	r3, [r7, #20]
 800714a:	f383 8811 	msr	BASEPRI, r3
	(
		"	msr basepri, %0	" :: "r" ( ulNewMaskValue ) : "memory"
	);
}
 800714e:	bf00      	nop
		}
	}
	portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

	return xReturn;
 8007150:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
}
 8007152:	4618      	mov	r0, r3
 8007154:	3740      	adds	r7, #64	; 0x40
 8007156:	46bd      	mov	sp, r7
 8007158:	bd80      	pop	{r7, pc}

0800715a <xQueueGiveFromISR>:
/*-----------------------------------------------------------*/

BaseType_t xQueueGiveFromISR( QueueHandle_t xQueue, BaseType_t * const pxHigherPriorityTaskWoken )
{
 800715a:	b580      	push	{r7, lr}
 800715c:	b08e      	sub	sp, #56	; 0x38
 800715e:	af00      	add	r7, sp, #0
 8007160:	6078      	str	r0, [r7, #4]
 8007162:	6039      	str	r1, [r7, #0]
BaseType_t xReturn;
UBaseType_t uxSavedInterruptStatus;
Queue_t * const pxQueue = xQueue;
 8007164:	687b      	ldr	r3, [r7, #4]
 8007166:	633b      	str	r3, [r7, #48]	; 0x30
	item size is 0.  Don't directly wake a task that was blocked on a queue
	read, instead return a flag to say whether a context switch is required or
	not (i.e. has a task with a higher priority than us been woken by this
	post). */

	configASSERT( pxQueue );
 8007168:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800716a:	2b00      	cmp	r3, #0
 800716c:	d10a      	bne.n	8007184 <xQueueGiveFromISR+0x2a>
	__asm volatile
 800716e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007172:	f383 8811 	msr	BASEPRI, r3
 8007176:	f3bf 8f6f 	isb	sy
 800717a:	f3bf 8f4f 	dsb	sy
 800717e:	623b      	str	r3, [r7, #32]
}
 8007180:	bf00      	nop
 8007182:	e7fe      	b.n	8007182 <xQueueGiveFromISR+0x28>

	/* xQueueGenericSendFromISR() should be used instead of xQueueGiveFromISR()
	if the item size is not 0. */
	configASSERT( pxQueue->uxItemSize == 0 );
 8007184:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007186:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007188:	2b00      	cmp	r3, #0
 800718a:	d00a      	beq.n	80071a2 <xQueueGiveFromISR+0x48>
	__asm volatile
 800718c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007190:	f383 8811 	msr	BASEPRI, r3
 8007194:	f3bf 8f6f 	isb	sy
 8007198:	f3bf 8f4f 	dsb	sy
 800719c:	61fb      	str	r3, [r7, #28]
}
 800719e:	bf00      	nop
 80071a0:	e7fe      	b.n	80071a0 <xQueueGiveFromISR+0x46>

	/* Normally a mutex would not be given from an interrupt, especially if
	there is a mutex holder, as priority inheritance makes no sense for an
	interrupts, only tasks. */
	configASSERT( !( ( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX ) && ( pxQueue->u.xSemaphore.xMutexHolder != NULL ) ) );
 80071a2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80071a4:	681b      	ldr	r3, [r3, #0]
 80071a6:	2b00      	cmp	r3, #0
 80071a8:	d103      	bne.n	80071b2 <xQueueGiveFromISR+0x58>
 80071aa:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80071ac:	689b      	ldr	r3, [r3, #8]
 80071ae:	2b00      	cmp	r3, #0
 80071b0:	d101      	bne.n	80071b6 <xQueueGiveFromISR+0x5c>
 80071b2:	2301      	movs	r3, #1
 80071b4:	e000      	b.n	80071b8 <xQueueGiveFromISR+0x5e>
 80071b6:	2300      	movs	r3, #0
 80071b8:	2b00      	cmp	r3, #0
 80071ba:	d10a      	bne.n	80071d2 <xQueueGiveFromISR+0x78>
	__asm volatile
 80071bc:	f04f 0350 	mov.w	r3, #80	; 0x50
 80071c0:	f383 8811 	msr	BASEPRI, r3
 80071c4:	f3bf 8f6f 	isb	sy
 80071c8:	f3bf 8f4f 	dsb	sy
 80071cc:	61bb      	str	r3, [r7, #24]
}
 80071ce:	bf00      	nop
 80071d0:	e7fe      	b.n	80071d0 <xQueueGiveFromISR+0x76>
	that have been assigned a priority at or (logically) below the maximum
	system call	interrupt priority.  FreeRTOS maintains a separate interrupt
	safe API to ensure interrupt entry is as fast and as simple as possible.
	More information (albeit Cortex-M specific) is provided on the following
	link: http://www.freertos.org/RTOS-Cortex-M3-M4.html */
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 80071d2:	f002 faa1 	bl	8009718 <vPortValidateInterruptPriority>
	__asm volatile
 80071d6:	f3ef 8211 	mrs	r2, BASEPRI
 80071da:	f04f 0350 	mov.w	r3, #80	; 0x50
 80071de:	f383 8811 	msr	BASEPRI, r3
 80071e2:	f3bf 8f6f 	isb	sy
 80071e6:	f3bf 8f4f 	dsb	sy
 80071ea:	617a      	str	r2, [r7, #20]
 80071ec:	613b      	str	r3, [r7, #16]
	return ulOriginalBASEPRI;
 80071ee:	697b      	ldr	r3, [r7, #20]

	uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 80071f0:	62fb      	str	r3, [r7, #44]	; 0x2c
	{
		const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 80071f2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80071f4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80071f6:	62bb      	str	r3, [r7, #40]	; 0x28

		/* When the queue is used to implement a semaphore no data is ever
		moved through the queue but it is still valid to see if the queue 'has
		space'. */
		if( uxMessagesWaiting < pxQueue->uxLength )
 80071f8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80071fa:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80071fc:	6aba      	ldr	r2, [r7, #40]	; 0x28
 80071fe:	429a      	cmp	r2, r3
 8007200:	d22b      	bcs.n	800725a <xQueueGiveFromISR+0x100>
		{
			const int8_t cTxLock = pxQueue->cTxLock;
 8007202:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007204:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8007208:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
			holder - and if there is a mutex holder then the mutex cannot be
			given from an ISR.  As this is the ISR version of the function it
			can be assumed there is no mutex holder and no need to determine if
			priority disinheritance is needed.  Simply increase the count of
			messages (semaphores) available. */
			pxQueue->uxMessagesWaiting = uxMessagesWaiting + ( UBaseType_t ) 1;
 800720c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800720e:	1c5a      	adds	r2, r3, #1
 8007210:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007212:	639a      	str	r2, [r3, #56]	; 0x38

			/* The event list is not altered if the queue is locked.  This will
			be done when the queue is unlocked later. */
			if( cTxLock == queueUNLOCKED )
 8007214:	f997 3027 	ldrsb.w	r3, [r7, #39]	; 0x27
 8007218:	f1b3 3fff 	cmp.w	r3, #4294967295
 800721c:	d112      	bne.n	8007244 <xQueueGiveFromISR+0xea>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 800721e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007220:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007222:	2b00      	cmp	r3, #0
 8007224:	d016      	beq.n	8007254 <xQueueGiveFromISR+0xfa>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8007226:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007228:	3324      	adds	r3, #36	; 0x24
 800722a:	4618      	mov	r0, r3
 800722c:	f001 f978 	bl	8008520 <xTaskRemoveFromEventList>
 8007230:	4603      	mov	r3, r0
 8007232:	2b00      	cmp	r3, #0
 8007234:	d00e      	beq.n	8007254 <xQueueGiveFromISR+0xfa>
						{
							/* The task waiting has a higher priority so record that a
							context	switch is required. */
							if( pxHigherPriorityTaskWoken != NULL )
 8007236:	683b      	ldr	r3, [r7, #0]
 8007238:	2b00      	cmp	r3, #0
 800723a:	d00b      	beq.n	8007254 <xQueueGiveFromISR+0xfa>
							{
								*pxHigherPriorityTaskWoken = pdTRUE;
 800723c:	683b      	ldr	r3, [r7, #0]
 800723e:	2201      	movs	r2, #1
 8007240:	601a      	str	r2, [r3, #0]
 8007242:	e007      	b.n	8007254 <xQueueGiveFromISR+0xfa>
			}
			else
			{
				/* Increment the lock count so the task that unlocks the queue
				knows that data was posted while it was locked. */
				pxQueue->cTxLock = ( int8_t ) ( cTxLock + 1 );
 8007244:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8007248:	3301      	adds	r3, #1
 800724a:	b2db      	uxtb	r3, r3
 800724c:	b25a      	sxtb	r2, r3
 800724e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007250:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
			}

			xReturn = pdPASS;
 8007254:	2301      	movs	r3, #1
 8007256:	637b      	str	r3, [r7, #52]	; 0x34
 8007258:	e001      	b.n	800725e <xQueueGiveFromISR+0x104>
		}
		else
		{
			traceQUEUE_SEND_FROM_ISR_FAILED( pxQueue );
			xReturn = errQUEUE_FULL;
 800725a:	2300      	movs	r3, #0
 800725c:	637b      	str	r3, [r7, #52]	; 0x34
 800725e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007260:	60fb      	str	r3, [r7, #12]
	__asm volatile
 8007262:	68fb      	ldr	r3, [r7, #12]
 8007264:	f383 8811 	msr	BASEPRI, r3
}
 8007268:	bf00      	nop
		}
	}
	portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

	return xReturn;
 800726a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
}
 800726c:	4618      	mov	r0, r3
 800726e:	3738      	adds	r7, #56	; 0x38
 8007270:	46bd      	mov	sp, r7
 8007272:	bd80      	pop	{r7, pc}

08007274 <xQueueReceive>:
/*-----------------------------------------------------------*/

BaseType_t xQueueReceive( QueueHandle_t xQueue, void * const pvBuffer, TickType_t xTicksToWait )
{
 8007274:	b580      	push	{r7, lr}
 8007276:	b08c      	sub	sp, #48	; 0x30
 8007278:	af00      	add	r7, sp, #0
 800727a:	60f8      	str	r0, [r7, #12]
 800727c:	60b9      	str	r1, [r7, #8]
 800727e:	607a      	str	r2, [r7, #4]
BaseType_t xEntryTimeSet = pdFALSE;
 8007280:	2300      	movs	r3, #0
 8007282:	62fb      	str	r3, [r7, #44]	; 0x2c
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 8007284:	68fb      	ldr	r3, [r7, #12]
 8007286:	62bb      	str	r3, [r7, #40]	; 0x28

	/* Check the pointer is not NULL. */
	configASSERT( ( pxQueue ) );
 8007288:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800728a:	2b00      	cmp	r3, #0
 800728c:	d10a      	bne.n	80072a4 <xQueueReceive+0x30>
	__asm volatile
 800728e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007292:	f383 8811 	msr	BASEPRI, r3
 8007296:	f3bf 8f6f 	isb	sy
 800729a:	f3bf 8f4f 	dsb	sy
 800729e:	623b      	str	r3, [r7, #32]
}
 80072a0:	bf00      	nop
 80072a2:	e7fe      	b.n	80072a2 <xQueueReceive+0x2e>

	/* The buffer into which data is received can only be NULL if the data size
	is zero (so no data is copied into the buffer. */
	configASSERT( !( ( ( pvBuffer ) == NULL ) && ( ( pxQueue )->uxItemSize != ( UBaseType_t ) 0U ) ) );
 80072a4:	68bb      	ldr	r3, [r7, #8]
 80072a6:	2b00      	cmp	r3, #0
 80072a8:	d103      	bne.n	80072b2 <xQueueReceive+0x3e>
 80072aa:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80072ac:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80072ae:	2b00      	cmp	r3, #0
 80072b0:	d101      	bne.n	80072b6 <xQueueReceive+0x42>
 80072b2:	2301      	movs	r3, #1
 80072b4:	e000      	b.n	80072b8 <xQueueReceive+0x44>
 80072b6:	2300      	movs	r3, #0
 80072b8:	2b00      	cmp	r3, #0
 80072ba:	d10a      	bne.n	80072d2 <xQueueReceive+0x5e>
	__asm volatile
 80072bc:	f04f 0350 	mov.w	r3, #80	; 0x50
 80072c0:	f383 8811 	msr	BASEPRI, r3
 80072c4:	f3bf 8f6f 	isb	sy
 80072c8:	f3bf 8f4f 	dsb	sy
 80072cc:	61fb      	str	r3, [r7, #28]
}
 80072ce:	bf00      	nop
 80072d0:	e7fe      	b.n	80072d0 <xQueueReceive+0x5c>

	/* Cannot block if the scheduler is suspended. */
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 80072d2:	f001 fae7 	bl	80088a4 <xTaskGetSchedulerState>
 80072d6:	4603      	mov	r3, r0
 80072d8:	2b00      	cmp	r3, #0
 80072da:	d102      	bne.n	80072e2 <xQueueReceive+0x6e>
 80072dc:	687b      	ldr	r3, [r7, #4]
 80072de:	2b00      	cmp	r3, #0
 80072e0:	d101      	bne.n	80072e6 <xQueueReceive+0x72>
 80072e2:	2301      	movs	r3, #1
 80072e4:	e000      	b.n	80072e8 <xQueueReceive+0x74>
 80072e6:	2300      	movs	r3, #0
 80072e8:	2b00      	cmp	r3, #0
 80072ea:	d10a      	bne.n	8007302 <xQueueReceive+0x8e>
	__asm volatile
 80072ec:	f04f 0350 	mov.w	r3, #80	; 0x50
 80072f0:	f383 8811 	msr	BASEPRI, r3
 80072f4:	f3bf 8f6f 	isb	sy
 80072f8:	f3bf 8f4f 	dsb	sy
 80072fc:	61bb      	str	r3, [r7, #24]
}
 80072fe:	bf00      	nop
 8007300:	e7fe      	b.n	8007300 <xQueueReceive+0x8c>
	/*lint -save -e904  This function relaxes the coding standard somewhat to
	allow return statements within the function itself.  This is done in the
	interest of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 8007302:	f002 f927 	bl	8009554 <vPortEnterCritical>
		{
			const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 8007306:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007308:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800730a:	627b      	str	r3, [r7, #36]	; 0x24

			/* Is there data in the queue now?  To be running the calling task
			must be the highest priority task wanting to access the queue. */
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 800730c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800730e:	2b00      	cmp	r3, #0
 8007310:	d01f      	beq.n	8007352 <xQueueReceive+0xde>
			{
				/* Data available, remove one item. */
				prvCopyDataFromQueue( pxQueue, pvBuffer );
 8007312:	68b9      	ldr	r1, [r7, #8]
 8007314:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8007316:	f000 fabe 	bl	8007896 <prvCopyDataFromQueue>
				traceQUEUE_RECEIVE( pxQueue );
				pxQueue->uxMessagesWaiting = uxMessagesWaiting - ( UBaseType_t ) 1;
 800731a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800731c:	1e5a      	subs	r2, r3, #1
 800731e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007320:	639a      	str	r2, [r3, #56]	; 0x38

				/* There is now space in the queue, were any tasks waiting to
				post to the queue?  If so, unblock the highest priority waiting
				task. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8007322:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007324:	691b      	ldr	r3, [r3, #16]
 8007326:	2b00      	cmp	r3, #0
 8007328:	d00f      	beq.n	800734a <xQueueReceive+0xd6>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 800732a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800732c:	3310      	adds	r3, #16
 800732e:	4618      	mov	r0, r3
 8007330:	f001 f8f6 	bl	8008520 <xTaskRemoveFromEventList>
 8007334:	4603      	mov	r3, r0
 8007336:	2b00      	cmp	r3, #0
 8007338:	d007      	beq.n	800734a <xQueueReceive+0xd6>
					{
						queueYIELD_IF_USING_PREEMPTION();
 800733a:	4b3d      	ldr	r3, [pc, #244]	; (8007430 <xQueueReceive+0x1bc>)
 800733c:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8007340:	601a      	str	r2, [r3, #0]
 8007342:	f3bf 8f4f 	dsb	sy
 8007346:	f3bf 8f6f 	isb	sy
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				taskEXIT_CRITICAL();
 800734a:	f002 f933 	bl	80095b4 <vPortExitCritical>
				return pdPASS;
 800734e:	2301      	movs	r3, #1
 8007350:	e069      	b.n	8007426 <xQueueReceive+0x1b2>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 8007352:	687b      	ldr	r3, [r7, #4]
 8007354:	2b00      	cmp	r3, #0
 8007356:	d103      	bne.n	8007360 <xQueueReceive+0xec>
				{
					/* The queue was empty and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 8007358:	f002 f92c 	bl	80095b4 <vPortExitCritical>
					traceQUEUE_RECEIVE_FAILED( pxQueue );
					return errQUEUE_EMPTY;
 800735c:	2300      	movs	r3, #0
 800735e:	e062      	b.n	8007426 <xQueueReceive+0x1b2>
				}
				else if( xEntryTimeSet == pdFALSE )
 8007360:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007362:	2b00      	cmp	r3, #0
 8007364:	d106      	bne.n	8007374 <xQueueReceive+0x100>
				{
					/* The queue was empty and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 8007366:	f107 0310 	add.w	r3, r7, #16
 800736a:	4618      	mov	r0, r3
 800736c:	f001 f93c 	bl	80085e8 <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 8007370:	2301      	movs	r3, #1
 8007372:	62fb      	str	r3, [r7, #44]	; 0x2c
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 8007374:	f002 f91e 	bl	80095b4 <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 8007378:	f000 fea8 	bl	80080cc <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 800737c:	f002 f8ea 	bl	8009554 <vPortEnterCritical>
 8007380:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007382:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8007386:	b25b      	sxtb	r3, r3
 8007388:	f1b3 3fff 	cmp.w	r3, #4294967295
 800738c:	d103      	bne.n	8007396 <xQueueReceive+0x122>
 800738e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007390:	2200      	movs	r2, #0
 8007392:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8007396:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007398:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 800739c:	b25b      	sxtb	r3, r3
 800739e:	f1b3 3fff 	cmp.w	r3, #4294967295
 80073a2:	d103      	bne.n	80073ac <xQueueReceive+0x138>
 80073a4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80073a6:	2200      	movs	r2, #0
 80073a8:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 80073ac:	f002 f902 	bl	80095b4 <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 80073b0:	1d3a      	adds	r2, r7, #4
 80073b2:	f107 0310 	add.w	r3, r7, #16
 80073b6:	4611      	mov	r1, r2
 80073b8:	4618      	mov	r0, r3
 80073ba:	f001 f92b 	bl	8008614 <xTaskCheckForTimeOut>
 80073be:	4603      	mov	r3, r0
 80073c0:	2b00      	cmp	r3, #0
 80073c2:	d123      	bne.n	800740c <xQueueReceive+0x198>
		{
			/* The timeout has not expired.  If the queue is still empty place
			the task on the list of tasks waiting to receive from the queue. */
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 80073c4:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 80073c6:	f000 fade 	bl	8007986 <prvIsQueueEmpty>
 80073ca:	4603      	mov	r3, r0
 80073cc:	2b00      	cmp	r3, #0
 80073ce:	d017      	beq.n	8007400 <xQueueReceive+0x18c>
			{
				traceBLOCKING_ON_QUEUE_RECEIVE( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait );
 80073d0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80073d2:	3324      	adds	r3, #36	; 0x24
 80073d4:	687a      	ldr	r2, [r7, #4]
 80073d6:	4611      	mov	r1, r2
 80073d8:	4618      	mov	r0, r3
 80073da:	f001 f851 	bl	8008480 <vTaskPlaceOnEventList>
				prvUnlockQueue( pxQueue );
 80073de:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 80073e0:	f000 fa7f 	bl	80078e2 <prvUnlockQueue>
				if( xTaskResumeAll() == pdFALSE )
 80073e4:	f000 fe80 	bl	80080e8 <xTaskResumeAll>
 80073e8:	4603      	mov	r3, r0
 80073ea:	2b00      	cmp	r3, #0
 80073ec:	d189      	bne.n	8007302 <xQueueReceive+0x8e>
				{
					portYIELD_WITHIN_API();
 80073ee:	4b10      	ldr	r3, [pc, #64]	; (8007430 <xQueueReceive+0x1bc>)
 80073f0:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80073f4:	601a      	str	r2, [r3, #0]
 80073f6:	f3bf 8f4f 	dsb	sy
 80073fa:	f3bf 8f6f 	isb	sy
 80073fe:	e780      	b.n	8007302 <xQueueReceive+0x8e>
			}
			else
			{
				/* The queue contains data again.  Loop back to try and read the
				data. */
				prvUnlockQueue( pxQueue );
 8007400:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8007402:	f000 fa6e 	bl	80078e2 <prvUnlockQueue>
				( void ) xTaskResumeAll();
 8007406:	f000 fe6f 	bl	80080e8 <xTaskResumeAll>
 800740a:	e77a      	b.n	8007302 <xQueueReceive+0x8e>
		}
		else
		{
			/* Timed out.  If there is no data in the queue exit, otherwise loop
			back and attempt to read the data. */
			prvUnlockQueue( pxQueue );
 800740c:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800740e:	f000 fa68 	bl	80078e2 <prvUnlockQueue>
			( void ) xTaskResumeAll();
 8007412:	f000 fe69 	bl	80080e8 <xTaskResumeAll>

			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 8007416:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8007418:	f000 fab5 	bl	8007986 <prvIsQueueEmpty>
 800741c:	4603      	mov	r3, r0
 800741e:	2b00      	cmp	r3, #0
 8007420:	f43f af6f 	beq.w	8007302 <xQueueReceive+0x8e>
			{
				traceQUEUE_RECEIVE_FAILED( pxQueue );
				return errQUEUE_EMPTY;
 8007424:	2300      	movs	r3, #0
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	} /*lint -restore */
}
 8007426:	4618      	mov	r0, r3
 8007428:	3730      	adds	r7, #48	; 0x30
 800742a:	46bd      	mov	sp, r7
 800742c:	bd80      	pop	{r7, pc}
 800742e:	bf00      	nop
 8007430:	e000ed04 	.word	0xe000ed04

08007434 <xQueueSemaphoreTake>:
/*-----------------------------------------------------------*/

BaseType_t xQueueSemaphoreTake( QueueHandle_t xQueue, TickType_t xTicksToWait )
{
 8007434:	b580      	push	{r7, lr}
 8007436:	b08e      	sub	sp, #56	; 0x38
 8007438:	af00      	add	r7, sp, #0
 800743a:	6078      	str	r0, [r7, #4]
 800743c:	6039      	str	r1, [r7, #0]
BaseType_t xEntryTimeSet = pdFALSE;
 800743e:	2300      	movs	r3, #0
 8007440:	637b      	str	r3, [r7, #52]	; 0x34
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 8007442:	687b      	ldr	r3, [r7, #4]
 8007444:	62fb      	str	r3, [r7, #44]	; 0x2c

#if( configUSE_MUTEXES == 1 )
	BaseType_t xInheritanceOccurred = pdFALSE;
 8007446:	2300      	movs	r3, #0
 8007448:	633b      	str	r3, [r7, #48]	; 0x30
#endif

	/* Check the queue pointer is not NULL. */
	configASSERT( ( pxQueue ) );
 800744a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800744c:	2b00      	cmp	r3, #0
 800744e:	d10a      	bne.n	8007466 <xQueueSemaphoreTake+0x32>
	__asm volatile
 8007450:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007454:	f383 8811 	msr	BASEPRI, r3
 8007458:	f3bf 8f6f 	isb	sy
 800745c:	f3bf 8f4f 	dsb	sy
 8007460:	623b      	str	r3, [r7, #32]
}
 8007462:	bf00      	nop
 8007464:	e7fe      	b.n	8007464 <xQueueSemaphoreTake+0x30>

	/* Check this really is a semaphore, in which case the item size will be
	0. */
	configASSERT( pxQueue->uxItemSize == 0 );
 8007466:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007468:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800746a:	2b00      	cmp	r3, #0
 800746c:	d00a      	beq.n	8007484 <xQueueSemaphoreTake+0x50>
	__asm volatile
 800746e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007472:	f383 8811 	msr	BASEPRI, r3
 8007476:	f3bf 8f6f 	isb	sy
 800747a:	f3bf 8f4f 	dsb	sy
 800747e:	61fb      	str	r3, [r7, #28]
}
 8007480:	bf00      	nop
 8007482:	e7fe      	b.n	8007482 <xQueueSemaphoreTake+0x4e>

	/* Cannot block if the scheduler is suspended. */
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 8007484:	f001 fa0e 	bl	80088a4 <xTaskGetSchedulerState>
 8007488:	4603      	mov	r3, r0
 800748a:	2b00      	cmp	r3, #0
 800748c:	d102      	bne.n	8007494 <xQueueSemaphoreTake+0x60>
 800748e:	683b      	ldr	r3, [r7, #0]
 8007490:	2b00      	cmp	r3, #0
 8007492:	d101      	bne.n	8007498 <xQueueSemaphoreTake+0x64>
 8007494:	2301      	movs	r3, #1
 8007496:	e000      	b.n	800749a <xQueueSemaphoreTake+0x66>
 8007498:	2300      	movs	r3, #0
 800749a:	2b00      	cmp	r3, #0
 800749c:	d10a      	bne.n	80074b4 <xQueueSemaphoreTake+0x80>
	__asm volatile
 800749e:	f04f 0350 	mov.w	r3, #80	; 0x50
 80074a2:	f383 8811 	msr	BASEPRI, r3
 80074a6:	f3bf 8f6f 	isb	sy
 80074aa:	f3bf 8f4f 	dsb	sy
 80074ae:	61bb      	str	r3, [r7, #24]
}
 80074b0:	bf00      	nop
 80074b2:	e7fe      	b.n	80074b2 <xQueueSemaphoreTake+0x7e>
	/*lint -save -e904 This function relaxes the coding standard somewhat to allow return
	statements within the function itself.  This is done in the interest
	of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 80074b4:	f002 f84e 	bl	8009554 <vPortEnterCritical>
		{
			/* Semaphores are queues with an item size of 0, and where the
			number of messages in the queue is the semaphore's count value. */
			const UBaseType_t uxSemaphoreCount = pxQueue->uxMessagesWaiting;
 80074b8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80074ba:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80074bc:	62bb      	str	r3, [r7, #40]	; 0x28

			/* Is there data in the queue now?  To be running the calling task
			must be the highest priority task wanting to access the queue. */
			if( uxSemaphoreCount > ( UBaseType_t ) 0 )
 80074be:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80074c0:	2b00      	cmp	r3, #0
 80074c2:	d024      	beq.n	800750e <xQueueSemaphoreTake+0xda>
			{
				traceQUEUE_RECEIVE( pxQueue );

				/* Semaphores are queues with a data size of zero and where the
				messages waiting is the semaphore's count.  Reduce the count. */
				pxQueue->uxMessagesWaiting = uxSemaphoreCount - ( UBaseType_t ) 1;
 80074c4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80074c6:	1e5a      	subs	r2, r3, #1
 80074c8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80074ca:	639a      	str	r2, [r3, #56]	; 0x38

				#if ( configUSE_MUTEXES == 1 )
				{
					if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 80074cc:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80074ce:	681b      	ldr	r3, [r3, #0]
 80074d0:	2b00      	cmp	r3, #0
 80074d2:	d104      	bne.n	80074de <xQueueSemaphoreTake+0xaa>
					{
						/* Record the information required to implement
						priority inheritance should it become necessary. */
						pxQueue->u.xSemaphore.xMutexHolder = pvTaskIncrementMutexHeldCount();
 80074d4:	f001 fb5c 	bl	8008b90 <pvTaskIncrementMutexHeldCount>
 80074d8:	4602      	mov	r2, r0
 80074da:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80074dc:	609a      	str	r2, [r3, #8]
				}
				#endif /* configUSE_MUTEXES */

				/* Check to see if other tasks are blocked waiting to give the
				semaphore, and if so, unblock the highest priority such task. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 80074de:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80074e0:	691b      	ldr	r3, [r3, #16]
 80074e2:	2b00      	cmp	r3, #0
 80074e4:	d00f      	beq.n	8007506 <xQueueSemaphoreTake+0xd2>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 80074e6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80074e8:	3310      	adds	r3, #16
 80074ea:	4618      	mov	r0, r3
 80074ec:	f001 f818 	bl	8008520 <xTaskRemoveFromEventList>
 80074f0:	4603      	mov	r3, r0
 80074f2:	2b00      	cmp	r3, #0
 80074f4:	d007      	beq.n	8007506 <xQueueSemaphoreTake+0xd2>
					{
						queueYIELD_IF_USING_PREEMPTION();
 80074f6:	4b54      	ldr	r3, [pc, #336]	; (8007648 <xQueueSemaphoreTake+0x214>)
 80074f8:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80074fc:	601a      	str	r2, [r3, #0]
 80074fe:	f3bf 8f4f 	dsb	sy
 8007502:	f3bf 8f6f 	isb	sy
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				taskEXIT_CRITICAL();
 8007506:	f002 f855 	bl	80095b4 <vPortExitCritical>
				return pdPASS;
 800750a:	2301      	movs	r3, #1
 800750c:	e097      	b.n	800763e <xQueueSemaphoreTake+0x20a>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 800750e:	683b      	ldr	r3, [r7, #0]
 8007510:	2b00      	cmp	r3, #0
 8007512:	d111      	bne.n	8007538 <xQueueSemaphoreTake+0x104>
					/* For inheritance to have occurred there must have been an
					initial timeout, and an adjusted timeout cannot become 0, as
					if it were 0 the function would have exited. */
					#if( configUSE_MUTEXES == 1 )
					{
						configASSERT( xInheritanceOccurred == pdFALSE );
 8007514:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007516:	2b00      	cmp	r3, #0
 8007518:	d00a      	beq.n	8007530 <xQueueSemaphoreTake+0xfc>
	__asm volatile
 800751a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800751e:	f383 8811 	msr	BASEPRI, r3
 8007522:	f3bf 8f6f 	isb	sy
 8007526:	f3bf 8f4f 	dsb	sy
 800752a:	617b      	str	r3, [r7, #20]
}
 800752c:	bf00      	nop
 800752e:	e7fe      	b.n	800752e <xQueueSemaphoreTake+0xfa>
					}
					#endif /* configUSE_MUTEXES */

					/* The semaphore count was 0 and no block time is specified
					(or the block time has expired) so exit now. */
					taskEXIT_CRITICAL();
 8007530:	f002 f840 	bl	80095b4 <vPortExitCritical>
					traceQUEUE_RECEIVE_FAILED( pxQueue );
					return errQUEUE_EMPTY;
 8007534:	2300      	movs	r3, #0
 8007536:	e082      	b.n	800763e <xQueueSemaphoreTake+0x20a>
				}
				else if( xEntryTimeSet == pdFALSE )
 8007538:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800753a:	2b00      	cmp	r3, #0
 800753c:	d106      	bne.n	800754c <xQueueSemaphoreTake+0x118>
				{
					/* The semaphore count was 0 and a block time was specified
					so configure the timeout structure ready to block. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 800753e:	f107 030c 	add.w	r3, r7, #12
 8007542:	4618      	mov	r0, r3
 8007544:	f001 f850 	bl	80085e8 <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 8007548:	2301      	movs	r3, #1
 800754a:	637b      	str	r3, [r7, #52]	; 0x34
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 800754c:	f002 f832 	bl	80095b4 <vPortExitCritical>

		/* Interrupts and other tasks can give to and take from the semaphore
		now the critical section has been exited. */

		vTaskSuspendAll();
 8007550:	f000 fdbc 	bl	80080cc <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 8007554:	f001 fffe 	bl	8009554 <vPortEnterCritical>
 8007558:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800755a:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 800755e:	b25b      	sxtb	r3, r3
 8007560:	f1b3 3fff 	cmp.w	r3, #4294967295
 8007564:	d103      	bne.n	800756e <xQueueSemaphoreTake+0x13a>
 8007566:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007568:	2200      	movs	r2, #0
 800756a:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 800756e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007570:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8007574:	b25b      	sxtb	r3, r3
 8007576:	f1b3 3fff 	cmp.w	r3, #4294967295
 800757a:	d103      	bne.n	8007584 <xQueueSemaphoreTake+0x150>
 800757c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800757e:	2200      	movs	r2, #0
 8007580:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8007584:	f002 f816 	bl	80095b4 <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 8007588:	463a      	mov	r2, r7
 800758a:	f107 030c 	add.w	r3, r7, #12
 800758e:	4611      	mov	r1, r2
 8007590:	4618      	mov	r0, r3
 8007592:	f001 f83f 	bl	8008614 <xTaskCheckForTimeOut>
 8007596:	4603      	mov	r3, r0
 8007598:	2b00      	cmp	r3, #0
 800759a:	d132      	bne.n	8007602 <xQueueSemaphoreTake+0x1ce>
		{
			/* A block time is specified and not expired.  If the semaphore
			count is 0 then enter the Blocked state to wait for a semaphore to
			become available.  As semaphores are implemented with queues the
			queue being empty is equivalent to the semaphore count being 0. */
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 800759c:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 800759e:	f000 f9f2 	bl	8007986 <prvIsQueueEmpty>
 80075a2:	4603      	mov	r3, r0
 80075a4:	2b00      	cmp	r3, #0
 80075a6:	d026      	beq.n	80075f6 <xQueueSemaphoreTake+0x1c2>
			{
				traceBLOCKING_ON_QUEUE_RECEIVE( pxQueue );

				#if ( configUSE_MUTEXES == 1 )
				{
					if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 80075a8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80075aa:	681b      	ldr	r3, [r3, #0]
 80075ac:	2b00      	cmp	r3, #0
 80075ae:	d109      	bne.n	80075c4 <xQueueSemaphoreTake+0x190>
					{
						taskENTER_CRITICAL();
 80075b0:	f001 ffd0 	bl	8009554 <vPortEnterCritical>
						{
							xInheritanceOccurred = xTaskPriorityInherit( pxQueue->u.xSemaphore.xMutexHolder );
 80075b4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80075b6:	689b      	ldr	r3, [r3, #8]
 80075b8:	4618      	mov	r0, r3
 80075ba:	f001 f991 	bl	80088e0 <xTaskPriorityInherit>
 80075be:	6338      	str	r0, [r7, #48]	; 0x30
						}
						taskEXIT_CRITICAL();
 80075c0:	f001 fff8 	bl	80095b4 <vPortExitCritical>
						mtCOVERAGE_TEST_MARKER();
					}
				}
				#endif

				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait );
 80075c4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80075c6:	3324      	adds	r3, #36	; 0x24
 80075c8:	683a      	ldr	r2, [r7, #0]
 80075ca:	4611      	mov	r1, r2
 80075cc:	4618      	mov	r0, r3
 80075ce:	f000 ff57 	bl	8008480 <vTaskPlaceOnEventList>
				prvUnlockQueue( pxQueue );
 80075d2:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 80075d4:	f000 f985 	bl	80078e2 <prvUnlockQueue>
				if( xTaskResumeAll() == pdFALSE )
 80075d8:	f000 fd86 	bl	80080e8 <xTaskResumeAll>
 80075dc:	4603      	mov	r3, r0
 80075de:	2b00      	cmp	r3, #0
 80075e0:	f47f af68 	bne.w	80074b4 <xQueueSemaphoreTake+0x80>
				{
					portYIELD_WITHIN_API();
 80075e4:	4b18      	ldr	r3, [pc, #96]	; (8007648 <xQueueSemaphoreTake+0x214>)
 80075e6:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80075ea:	601a      	str	r2, [r3, #0]
 80075ec:	f3bf 8f4f 	dsb	sy
 80075f0:	f3bf 8f6f 	isb	sy
 80075f4:	e75e      	b.n	80074b4 <xQueueSemaphoreTake+0x80>
			}
			else
			{
				/* There was no timeout and the semaphore count was not 0, so
				attempt to take the semaphore again. */
				prvUnlockQueue( pxQueue );
 80075f6:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 80075f8:	f000 f973 	bl	80078e2 <prvUnlockQueue>
				( void ) xTaskResumeAll();
 80075fc:	f000 fd74 	bl	80080e8 <xTaskResumeAll>
 8007600:	e758      	b.n	80074b4 <xQueueSemaphoreTake+0x80>
			}
		}
		else
		{
			/* Timed out. */
			prvUnlockQueue( pxQueue );
 8007602:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 8007604:	f000 f96d 	bl	80078e2 <prvUnlockQueue>
			( void ) xTaskResumeAll();
 8007608:	f000 fd6e 	bl	80080e8 <xTaskResumeAll>

			/* If the semaphore count is 0 exit now as the timeout has
			expired.  Otherwise return to attempt to take the semaphore that is
			known to be available.  As semaphores are implemented by queues the
			queue being empty is equivalent to the semaphore count being 0. */
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 800760c:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 800760e:	f000 f9ba 	bl	8007986 <prvIsQueueEmpty>
 8007612:	4603      	mov	r3, r0
 8007614:	2b00      	cmp	r3, #0
 8007616:	f43f af4d 	beq.w	80074b4 <xQueueSemaphoreTake+0x80>
				#if ( configUSE_MUTEXES == 1 )
				{
					/* xInheritanceOccurred could only have be set if
					pxQueue->uxQueueType == queueQUEUE_IS_MUTEX so no need to
					test the mutex type again to check it is actually a mutex. */
					if( xInheritanceOccurred != pdFALSE )
 800761a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800761c:	2b00      	cmp	r3, #0
 800761e:	d00d      	beq.n	800763c <xQueueSemaphoreTake+0x208>
					{
						taskENTER_CRITICAL();
 8007620:	f001 ff98 	bl	8009554 <vPortEnterCritical>
							/* This task blocking on the mutex caused another
							task to inherit this task's priority.  Now this task
							has timed out the priority should be disinherited
							again, but only as low as the next highest priority
							task that is waiting for the same mutex. */
							uxHighestWaitingPriority = prvGetDisinheritPriorityAfterTimeout( pxQueue );
 8007624:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 8007626:	f000 f8b4 	bl	8007792 <prvGetDisinheritPriorityAfterTimeout>
 800762a:	6278      	str	r0, [r7, #36]	; 0x24
							vTaskPriorityDisinheritAfterTimeout( pxQueue->u.xSemaphore.xMutexHolder, uxHighestWaitingPriority );
 800762c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800762e:	689b      	ldr	r3, [r3, #8]
 8007630:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8007632:	4618      	mov	r0, r3
 8007634:	f001 fa2a 	bl	8008a8c <vTaskPriorityDisinheritAfterTimeout>
						}
						taskEXIT_CRITICAL();
 8007638:	f001 ffbc 	bl	80095b4 <vPortExitCritical>
					}
				}
				#endif /* configUSE_MUTEXES */

				traceQUEUE_RECEIVE_FAILED( pxQueue );
				return errQUEUE_EMPTY;
 800763c:	2300      	movs	r3, #0
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	} /*lint -restore */
}
 800763e:	4618      	mov	r0, r3
 8007640:	3738      	adds	r7, #56	; 0x38
 8007642:	46bd      	mov	sp, r7
 8007644:	bd80      	pop	{r7, pc}
 8007646:	bf00      	nop
 8007648:	e000ed04 	.word	0xe000ed04

0800764c <xQueueReceiveFromISR>:
	} /*lint -restore */
}
/*-----------------------------------------------------------*/

BaseType_t xQueueReceiveFromISR( QueueHandle_t xQueue, void * const pvBuffer, BaseType_t * const pxHigherPriorityTaskWoken )
{
 800764c:	b580      	push	{r7, lr}
 800764e:	b08e      	sub	sp, #56	; 0x38
 8007650:	af00      	add	r7, sp, #0
 8007652:	60f8      	str	r0, [r7, #12]
 8007654:	60b9      	str	r1, [r7, #8]
 8007656:	607a      	str	r2, [r7, #4]
BaseType_t xReturn;
UBaseType_t uxSavedInterruptStatus;
Queue_t * const pxQueue = xQueue;
 8007658:	68fb      	ldr	r3, [r7, #12]
 800765a:	633b      	str	r3, [r7, #48]	; 0x30

	configASSERT( pxQueue );
 800765c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800765e:	2b00      	cmp	r3, #0
 8007660:	d10a      	bne.n	8007678 <xQueueReceiveFromISR+0x2c>
	__asm volatile
 8007662:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007666:	f383 8811 	msr	BASEPRI, r3
 800766a:	f3bf 8f6f 	isb	sy
 800766e:	f3bf 8f4f 	dsb	sy
 8007672:	623b      	str	r3, [r7, #32]
}
 8007674:	bf00      	nop
 8007676:	e7fe      	b.n	8007676 <xQueueReceiveFromISR+0x2a>
	configASSERT( !( ( pvBuffer == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8007678:	68bb      	ldr	r3, [r7, #8]
 800767a:	2b00      	cmp	r3, #0
 800767c:	d103      	bne.n	8007686 <xQueueReceiveFromISR+0x3a>
 800767e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007680:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007682:	2b00      	cmp	r3, #0
 8007684:	d101      	bne.n	800768a <xQueueReceiveFromISR+0x3e>
 8007686:	2301      	movs	r3, #1
 8007688:	e000      	b.n	800768c <xQueueReceiveFromISR+0x40>
 800768a:	2300      	movs	r3, #0
 800768c:	2b00      	cmp	r3, #0
 800768e:	d10a      	bne.n	80076a6 <xQueueReceiveFromISR+0x5a>
	__asm volatile
 8007690:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007694:	f383 8811 	msr	BASEPRI, r3
 8007698:	f3bf 8f6f 	isb	sy
 800769c:	f3bf 8f4f 	dsb	sy
 80076a0:	61fb      	str	r3, [r7, #28]
}
 80076a2:	bf00      	nop
 80076a4:	e7fe      	b.n	80076a4 <xQueueReceiveFromISR+0x58>
	that have been assigned a priority at or (logically) below the maximum
	system call	interrupt priority.  FreeRTOS maintains a separate interrupt
	safe API to ensure interrupt entry is as fast and as simple as possible.
	More information (albeit Cortex-M specific) is provided on the following
	link: http://www.freertos.org/RTOS-Cortex-M3-M4.html */
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 80076a6:	f002 f837 	bl	8009718 <vPortValidateInterruptPriority>
	__asm volatile
 80076aa:	f3ef 8211 	mrs	r2, BASEPRI
 80076ae:	f04f 0350 	mov.w	r3, #80	; 0x50
 80076b2:	f383 8811 	msr	BASEPRI, r3
 80076b6:	f3bf 8f6f 	isb	sy
 80076ba:	f3bf 8f4f 	dsb	sy
 80076be:	61ba      	str	r2, [r7, #24]
 80076c0:	617b      	str	r3, [r7, #20]
	return ulOriginalBASEPRI;
 80076c2:	69bb      	ldr	r3, [r7, #24]

	uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 80076c4:	62fb      	str	r3, [r7, #44]	; 0x2c
	{
		const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 80076c6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80076c8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80076ca:	62bb      	str	r3, [r7, #40]	; 0x28

		/* Cannot block in an ISR, so check there is data available. */
		if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 80076cc:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80076ce:	2b00      	cmp	r3, #0
 80076d0:	d02f      	beq.n	8007732 <xQueueReceiveFromISR+0xe6>
		{
			const int8_t cRxLock = pxQueue->cRxLock;
 80076d2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80076d4:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 80076d8:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27

			traceQUEUE_RECEIVE_FROM_ISR( pxQueue );

			prvCopyDataFromQueue( pxQueue, pvBuffer );
 80076dc:	68b9      	ldr	r1, [r7, #8]
 80076de:	6b38      	ldr	r0, [r7, #48]	; 0x30
 80076e0:	f000 f8d9 	bl	8007896 <prvCopyDataFromQueue>
			pxQueue->uxMessagesWaiting = uxMessagesWaiting - ( UBaseType_t ) 1;
 80076e4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80076e6:	1e5a      	subs	r2, r3, #1
 80076e8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80076ea:	639a      	str	r2, [r3, #56]	; 0x38

			/* If the queue is locked the event list will not be modified.
			Instead update the lock count so the task that unlocks the queue
			will know that an ISR has removed data while the queue was
			locked. */
			if( cRxLock == queueUNLOCKED )
 80076ec:	f997 3027 	ldrsb.w	r3, [r7, #39]	; 0x27
 80076f0:	f1b3 3fff 	cmp.w	r3, #4294967295
 80076f4:	d112      	bne.n	800771c <xQueueReceiveFromISR+0xd0>
			{
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 80076f6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80076f8:	691b      	ldr	r3, [r3, #16]
 80076fa:	2b00      	cmp	r3, #0
 80076fc:	d016      	beq.n	800772c <xQueueReceiveFromISR+0xe0>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 80076fe:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007700:	3310      	adds	r3, #16
 8007702:	4618      	mov	r0, r3
 8007704:	f000 ff0c 	bl	8008520 <xTaskRemoveFromEventList>
 8007708:	4603      	mov	r3, r0
 800770a:	2b00      	cmp	r3, #0
 800770c:	d00e      	beq.n	800772c <xQueueReceiveFromISR+0xe0>
					{
						/* The task waiting has a higher priority than us so
						force a context switch. */
						if( pxHigherPriorityTaskWoken != NULL )
 800770e:	687b      	ldr	r3, [r7, #4]
 8007710:	2b00      	cmp	r3, #0
 8007712:	d00b      	beq.n	800772c <xQueueReceiveFromISR+0xe0>
						{
							*pxHigherPriorityTaskWoken = pdTRUE;
 8007714:	687b      	ldr	r3, [r7, #4]
 8007716:	2201      	movs	r2, #1
 8007718:	601a      	str	r2, [r3, #0]
 800771a:	e007      	b.n	800772c <xQueueReceiveFromISR+0xe0>
			}
			else
			{
				/* Increment the lock count so the task that unlocks the queue
				knows that data was removed while it was locked. */
				pxQueue->cRxLock = ( int8_t ) ( cRxLock + 1 );
 800771c:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8007720:	3301      	adds	r3, #1
 8007722:	b2db      	uxtb	r3, r3
 8007724:	b25a      	sxtb	r2, r3
 8007726:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007728:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
			}

			xReturn = pdPASS;
 800772c:	2301      	movs	r3, #1
 800772e:	637b      	str	r3, [r7, #52]	; 0x34
 8007730:	e001      	b.n	8007736 <xQueueReceiveFromISR+0xea>
		}
		else
		{
			xReturn = pdFAIL;
 8007732:	2300      	movs	r3, #0
 8007734:	637b      	str	r3, [r7, #52]	; 0x34
 8007736:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007738:	613b      	str	r3, [r7, #16]
	__asm volatile
 800773a:	693b      	ldr	r3, [r7, #16]
 800773c:	f383 8811 	msr	BASEPRI, r3
}
 8007740:	bf00      	nop
			traceQUEUE_RECEIVE_FROM_ISR_FAILED( pxQueue );
		}
	}
	portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

	return xReturn;
 8007742:	6b7b      	ldr	r3, [r7, #52]	; 0x34
}
 8007744:	4618      	mov	r0, r3
 8007746:	3738      	adds	r7, #56	; 0x38
 8007748:	46bd      	mov	sp, r7
 800774a:	bd80      	pop	{r7, pc}

0800774c <vQueueDelete>:
	return uxReturn;
} /*lint !e818 Pointer cannot be declared const as xQueue is a typedef not pointer. */
/*-----------------------------------------------------------*/

void vQueueDelete( QueueHandle_t xQueue )
{
 800774c:	b580      	push	{r7, lr}
 800774e:	b084      	sub	sp, #16
 8007750:	af00      	add	r7, sp, #0
 8007752:	6078      	str	r0, [r7, #4]
Queue_t * const pxQueue = xQueue;
 8007754:	687b      	ldr	r3, [r7, #4]
 8007756:	60fb      	str	r3, [r7, #12]

	configASSERT( pxQueue );
 8007758:	68fb      	ldr	r3, [r7, #12]
 800775a:	2b00      	cmp	r3, #0
 800775c:	d10a      	bne.n	8007774 <vQueueDelete+0x28>
	__asm volatile
 800775e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007762:	f383 8811 	msr	BASEPRI, r3
 8007766:	f3bf 8f6f 	isb	sy
 800776a:	f3bf 8f4f 	dsb	sy
 800776e:	60bb      	str	r3, [r7, #8]
}
 8007770:	bf00      	nop
 8007772:	e7fe      	b.n	8007772 <vQueueDelete+0x26>
	traceQUEUE_DELETE( pxQueue );

	#if ( configQUEUE_REGISTRY_SIZE > 0 )
	{
		vQueueUnregisterQueue( pxQueue );
 8007774:	68f8      	ldr	r0, [r7, #12]
 8007776:	f000 f95f 	bl	8007a38 <vQueueUnregisterQueue>
	}
	#elif( ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) && ( configSUPPORT_STATIC_ALLOCATION == 1 ) )
	{
		/* The queue could have been allocated statically or dynamically, so
		check before attempting to free the memory. */
		if( pxQueue->ucStaticallyAllocated == ( uint8_t ) pdFALSE )
 800777a:	68fb      	ldr	r3, [r7, #12]
 800777c:	f893 3046 	ldrb.w	r3, [r3, #70]	; 0x46
 8007780:	2b00      	cmp	r3, #0
 8007782:	d102      	bne.n	800778a <vQueueDelete+0x3e>
		{
			vPortFree( pxQueue );
 8007784:	68f8      	ldr	r0, [r7, #12]
 8007786:	f002 f8d3 	bl	8009930 <vPortFree>
		/* The queue must have been statically allocated, so is not going to be
		deleted.  Avoid compiler warnings about the unused parameter. */
		( void ) pxQueue;
	}
	#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
}
 800778a:	bf00      	nop
 800778c:	3710      	adds	r7, #16
 800778e:	46bd      	mov	sp, r7
 8007790:	bd80      	pop	{r7, pc}

08007792 <prvGetDisinheritPriorityAfterTimeout>:
/*-----------------------------------------------------------*/

#if( configUSE_MUTEXES == 1 )

	static UBaseType_t prvGetDisinheritPriorityAfterTimeout( const Queue_t * const pxQueue )
	{
 8007792:	b480      	push	{r7}
 8007794:	b085      	sub	sp, #20
 8007796:	af00      	add	r7, sp, #0
 8007798:	6078      	str	r0, [r7, #4]
		priority, but the waiting task times out, then the holder should
		disinherit the priority - but only down to the highest priority of any
		other tasks that are waiting for the same mutex.  For this purpose,
		return the priority of the highest priority task that is waiting for the
		mutex. */
		if( listCURRENT_LIST_LENGTH( &( pxQueue->xTasksWaitingToReceive ) ) > 0U )
 800779a:	687b      	ldr	r3, [r7, #4]
 800779c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800779e:	2b00      	cmp	r3, #0
 80077a0:	d006      	beq.n	80077b0 <prvGetDisinheritPriorityAfterTimeout+0x1e>
		{
			uxHighestPriorityOfWaitingTasks = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) listGET_ITEM_VALUE_OF_HEAD_ENTRY( &( pxQueue->xTasksWaitingToReceive ) );
 80077a2:	687b      	ldr	r3, [r7, #4]
 80077a4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80077a6:	681b      	ldr	r3, [r3, #0]
 80077a8:	f1c3 0338 	rsb	r3, r3, #56	; 0x38
 80077ac:	60fb      	str	r3, [r7, #12]
 80077ae:	e001      	b.n	80077b4 <prvGetDisinheritPriorityAfterTimeout+0x22>
		}
		else
		{
			uxHighestPriorityOfWaitingTasks = tskIDLE_PRIORITY;
 80077b0:	2300      	movs	r3, #0
 80077b2:	60fb      	str	r3, [r7, #12]
		}

		return uxHighestPriorityOfWaitingTasks;
 80077b4:	68fb      	ldr	r3, [r7, #12]
	}
 80077b6:	4618      	mov	r0, r3
 80077b8:	3714      	adds	r7, #20
 80077ba:	46bd      	mov	sp, r7
 80077bc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80077c0:	4770      	bx	lr

080077c2 <prvCopyDataToQueue>:

#endif /* configUSE_MUTEXES */
/*-----------------------------------------------------------*/

static BaseType_t prvCopyDataToQueue( Queue_t * const pxQueue, const void *pvItemToQueue, const BaseType_t xPosition )
{
 80077c2:	b580      	push	{r7, lr}
 80077c4:	b086      	sub	sp, #24
 80077c6:	af00      	add	r7, sp, #0
 80077c8:	60f8      	str	r0, [r7, #12]
 80077ca:	60b9      	str	r1, [r7, #8]
 80077cc:	607a      	str	r2, [r7, #4]
BaseType_t xReturn = pdFALSE;
 80077ce:	2300      	movs	r3, #0
 80077d0:	617b      	str	r3, [r7, #20]
UBaseType_t uxMessagesWaiting;

	/* This function is called from a critical section. */

	uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 80077d2:	68fb      	ldr	r3, [r7, #12]
 80077d4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80077d6:	613b      	str	r3, [r7, #16]

	if( pxQueue->uxItemSize == ( UBaseType_t ) 0 )
 80077d8:	68fb      	ldr	r3, [r7, #12]
 80077da:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80077dc:	2b00      	cmp	r3, #0
 80077de:	d10d      	bne.n	80077fc <prvCopyDataToQueue+0x3a>
	{
		#if ( configUSE_MUTEXES == 1 )
		{
			if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 80077e0:	68fb      	ldr	r3, [r7, #12]
 80077e2:	681b      	ldr	r3, [r3, #0]
 80077e4:	2b00      	cmp	r3, #0
 80077e6:	d14d      	bne.n	8007884 <prvCopyDataToQueue+0xc2>
			{
				/* The mutex is no longer being held. */
				xReturn = xTaskPriorityDisinherit( pxQueue->u.xSemaphore.xMutexHolder );
 80077e8:	68fb      	ldr	r3, [r7, #12]
 80077ea:	689b      	ldr	r3, [r3, #8]
 80077ec:	4618      	mov	r0, r3
 80077ee:	f001 f8df 	bl	80089b0 <xTaskPriorityDisinherit>
 80077f2:	6178      	str	r0, [r7, #20]
				pxQueue->u.xSemaphore.xMutexHolder = NULL;
 80077f4:	68fb      	ldr	r3, [r7, #12]
 80077f6:	2200      	movs	r2, #0
 80077f8:	609a      	str	r2, [r3, #8]
 80077fa:	e043      	b.n	8007884 <prvCopyDataToQueue+0xc2>
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configUSE_MUTEXES */
	}
	else if( xPosition == queueSEND_TO_BACK )
 80077fc:	687b      	ldr	r3, [r7, #4]
 80077fe:	2b00      	cmp	r3, #0
 8007800:	d119      	bne.n	8007836 <prvCopyDataToQueue+0x74>
	{
		( void ) memcpy( ( void * ) pxQueue->pcWriteTo, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports, plus previous logic ensures a null pointer can only be passed to memcpy() if the copy size is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 8007802:	68fb      	ldr	r3, [r7, #12]
 8007804:	6858      	ldr	r0, [r3, #4]
 8007806:	68fb      	ldr	r3, [r7, #12]
 8007808:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800780a:	461a      	mov	r2, r3
 800780c:	68b9      	ldr	r1, [r7, #8]
 800780e:	f002 fad0 	bl	8009db2 <memcpy>
		pxQueue->pcWriteTo += pxQueue->uxItemSize; /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 8007812:	68fb      	ldr	r3, [r7, #12]
 8007814:	685a      	ldr	r2, [r3, #4]
 8007816:	68fb      	ldr	r3, [r7, #12]
 8007818:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800781a:	441a      	add	r2, r3
 800781c:	68fb      	ldr	r3, [r7, #12]
 800781e:	605a      	str	r2, [r3, #4]
		if( pxQueue->pcWriteTo >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 8007820:	68fb      	ldr	r3, [r7, #12]
 8007822:	685a      	ldr	r2, [r3, #4]
 8007824:	68fb      	ldr	r3, [r7, #12]
 8007826:	689b      	ldr	r3, [r3, #8]
 8007828:	429a      	cmp	r2, r3
 800782a:	d32b      	bcc.n	8007884 <prvCopyDataToQueue+0xc2>
		{
			pxQueue->pcWriteTo = pxQueue->pcHead;
 800782c:	68fb      	ldr	r3, [r7, #12]
 800782e:	681a      	ldr	r2, [r3, #0]
 8007830:	68fb      	ldr	r3, [r7, #12]
 8007832:	605a      	str	r2, [r3, #4]
 8007834:	e026      	b.n	8007884 <prvCopyDataToQueue+0xc2>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	else
	{
		( void ) memcpy( ( void * ) pxQueue->u.xQueue.pcReadFrom, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e9087 !e418 MISRA exception as the casts are only redundant for some ports.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes.  Assert checks null pointer only used when length is 0. */
 8007836:	68fb      	ldr	r3, [r7, #12]
 8007838:	68d8      	ldr	r0, [r3, #12]
 800783a:	68fb      	ldr	r3, [r7, #12]
 800783c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800783e:	461a      	mov	r2, r3
 8007840:	68b9      	ldr	r1, [r7, #8]
 8007842:	f002 fab6 	bl	8009db2 <memcpy>
		pxQueue->u.xQueue.pcReadFrom -= pxQueue->uxItemSize;
 8007846:	68fb      	ldr	r3, [r7, #12]
 8007848:	68da      	ldr	r2, [r3, #12]
 800784a:	68fb      	ldr	r3, [r7, #12]
 800784c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800784e:	425b      	negs	r3, r3
 8007850:	441a      	add	r2, r3
 8007852:	68fb      	ldr	r3, [r7, #12]
 8007854:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.xQueue.pcReadFrom < pxQueue->pcHead ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 8007856:	68fb      	ldr	r3, [r7, #12]
 8007858:	68da      	ldr	r2, [r3, #12]
 800785a:	68fb      	ldr	r3, [r7, #12]
 800785c:	681b      	ldr	r3, [r3, #0]
 800785e:	429a      	cmp	r2, r3
 8007860:	d207      	bcs.n	8007872 <prvCopyDataToQueue+0xb0>
		{
			pxQueue->u.xQueue.pcReadFrom = ( pxQueue->u.xQueue.pcTail - pxQueue->uxItemSize );
 8007862:	68fb      	ldr	r3, [r7, #12]
 8007864:	689a      	ldr	r2, [r3, #8]
 8007866:	68fb      	ldr	r3, [r7, #12]
 8007868:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800786a:	425b      	negs	r3, r3
 800786c:	441a      	add	r2, r3
 800786e:	68fb      	ldr	r3, [r7, #12]
 8007870:	60da      	str	r2, [r3, #12]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		if( xPosition == queueOVERWRITE )
 8007872:	687b      	ldr	r3, [r7, #4]
 8007874:	2b02      	cmp	r3, #2
 8007876:	d105      	bne.n	8007884 <prvCopyDataToQueue+0xc2>
		{
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 8007878:	693b      	ldr	r3, [r7, #16]
 800787a:	2b00      	cmp	r3, #0
 800787c:	d002      	beq.n	8007884 <prvCopyDataToQueue+0xc2>
			{
				/* An item is not being added but overwritten, so subtract
				one from the recorded number of items in the queue so when
				one is added again below the number of recorded items remains
				correct. */
				--uxMessagesWaiting;
 800787e:	693b      	ldr	r3, [r7, #16]
 8007880:	3b01      	subs	r3, #1
 8007882:	613b      	str	r3, [r7, #16]
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	pxQueue->uxMessagesWaiting = uxMessagesWaiting + ( UBaseType_t ) 1;
 8007884:	693b      	ldr	r3, [r7, #16]
 8007886:	1c5a      	adds	r2, r3, #1
 8007888:	68fb      	ldr	r3, [r7, #12]
 800788a:	639a      	str	r2, [r3, #56]	; 0x38

	return xReturn;
 800788c:	697b      	ldr	r3, [r7, #20]
}
 800788e:	4618      	mov	r0, r3
 8007890:	3718      	adds	r7, #24
 8007892:	46bd      	mov	sp, r7
 8007894:	bd80      	pop	{r7, pc}

08007896 <prvCopyDataFromQueue>:
/*-----------------------------------------------------------*/

static void prvCopyDataFromQueue( Queue_t * const pxQueue, void * const pvBuffer )
{
 8007896:	b580      	push	{r7, lr}
 8007898:	b082      	sub	sp, #8
 800789a:	af00      	add	r7, sp, #0
 800789c:	6078      	str	r0, [r7, #4]
 800789e:	6039      	str	r1, [r7, #0]
	if( pxQueue->uxItemSize != ( UBaseType_t ) 0 )
 80078a0:	687b      	ldr	r3, [r7, #4]
 80078a2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80078a4:	2b00      	cmp	r3, #0
 80078a6:	d018      	beq.n	80078da <prvCopyDataFromQueue+0x44>
	{
		pxQueue->u.xQueue.pcReadFrom += pxQueue->uxItemSize; /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 80078a8:	687b      	ldr	r3, [r7, #4]
 80078aa:	68da      	ldr	r2, [r3, #12]
 80078ac:	687b      	ldr	r3, [r7, #4]
 80078ae:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80078b0:	441a      	add	r2, r3
 80078b2:	687b      	ldr	r3, [r7, #4]
 80078b4:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.xQueue.pcReadFrom >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as use of the relational operator is the cleanest solutions. */
 80078b6:	687b      	ldr	r3, [r7, #4]
 80078b8:	68da      	ldr	r2, [r3, #12]
 80078ba:	687b      	ldr	r3, [r7, #4]
 80078bc:	689b      	ldr	r3, [r3, #8]
 80078be:	429a      	cmp	r2, r3
 80078c0:	d303      	bcc.n	80078ca <prvCopyDataFromQueue+0x34>
		{
			pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead;
 80078c2:	687b      	ldr	r3, [r7, #4]
 80078c4:	681a      	ldr	r2, [r3, #0]
 80078c6:	687b      	ldr	r3, [r7, #4]
 80078c8:	60da      	str	r2, [r3, #12]
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
		( void ) memcpy( ( void * ) pvBuffer, ( void * ) pxQueue->u.xQueue.pcReadFrom, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports.  Also previous logic ensures a null pointer can only be passed to memcpy() when the count is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 80078ca:	687b      	ldr	r3, [r7, #4]
 80078cc:	68d9      	ldr	r1, [r3, #12]
 80078ce:	687b      	ldr	r3, [r7, #4]
 80078d0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80078d2:	461a      	mov	r2, r3
 80078d4:	6838      	ldr	r0, [r7, #0]
 80078d6:	f002 fa6c 	bl	8009db2 <memcpy>
	}
}
 80078da:	bf00      	nop
 80078dc:	3708      	adds	r7, #8
 80078de:	46bd      	mov	sp, r7
 80078e0:	bd80      	pop	{r7, pc}

080078e2 <prvUnlockQueue>:
/*-----------------------------------------------------------*/

static void prvUnlockQueue( Queue_t * const pxQueue )
{
 80078e2:	b580      	push	{r7, lr}
 80078e4:	b084      	sub	sp, #16
 80078e6:	af00      	add	r7, sp, #0
 80078e8:	6078      	str	r0, [r7, #4]

	/* The lock counts contains the number of extra data items placed or
	removed from the queue while the queue was locked.  When a queue is
	locked items can be added or removed, but the event lists cannot be
	updated. */
	taskENTER_CRITICAL();
 80078ea:	f001 fe33 	bl	8009554 <vPortEnterCritical>
	{
		int8_t cTxLock = pxQueue->cTxLock;
 80078ee:	687b      	ldr	r3, [r7, #4]
 80078f0:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 80078f4:	73fb      	strb	r3, [r7, #15]

		/* See if data was added to the queue while it was locked. */
		while( cTxLock > queueLOCKED_UNMODIFIED )
 80078f6:	e011      	b.n	800791c <prvUnlockQueue+0x3a>
			}
			#else /* configUSE_QUEUE_SETS */
			{
				/* Tasks that are removed from the event list will get added to
				the pending ready list as the scheduler is still suspended. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 80078f8:	687b      	ldr	r3, [r7, #4]
 80078fa:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80078fc:	2b00      	cmp	r3, #0
 80078fe:	d012      	beq.n	8007926 <prvUnlockQueue+0x44>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8007900:	687b      	ldr	r3, [r7, #4]
 8007902:	3324      	adds	r3, #36	; 0x24
 8007904:	4618      	mov	r0, r3
 8007906:	f000 fe0b 	bl	8008520 <xTaskRemoveFromEventList>
 800790a:	4603      	mov	r3, r0
 800790c:	2b00      	cmp	r3, #0
 800790e:	d001      	beq.n	8007914 <prvUnlockQueue+0x32>
					{
						/* The task waiting has a higher priority so record that
						a context switch is required. */
						vTaskMissedYield();
 8007910:	f000 fee2 	bl	80086d8 <vTaskMissedYield>
					break;
				}
			}
			#endif /* configUSE_QUEUE_SETS */

			--cTxLock;
 8007914:	7bfb      	ldrb	r3, [r7, #15]
 8007916:	3b01      	subs	r3, #1
 8007918:	b2db      	uxtb	r3, r3
 800791a:	73fb      	strb	r3, [r7, #15]
		while( cTxLock > queueLOCKED_UNMODIFIED )
 800791c:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8007920:	2b00      	cmp	r3, #0
 8007922:	dce9      	bgt.n	80078f8 <prvUnlockQueue+0x16>
 8007924:	e000      	b.n	8007928 <prvUnlockQueue+0x46>
					break;
 8007926:	bf00      	nop
		}

		pxQueue->cTxLock = queueUNLOCKED;
 8007928:	687b      	ldr	r3, [r7, #4]
 800792a:	22ff      	movs	r2, #255	; 0xff
 800792c:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
	}
	taskEXIT_CRITICAL();
 8007930:	f001 fe40 	bl	80095b4 <vPortExitCritical>

	/* Do the same for the Rx lock. */
	taskENTER_CRITICAL();
 8007934:	f001 fe0e 	bl	8009554 <vPortEnterCritical>
	{
		int8_t cRxLock = pxQueue->cRxLock;
 8007938:	687b      	ldr	r3, [r7, #4]
 800793a:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 800793e:	73bb      	strb	r3, [r7, #14]

		while( cRxLock > queueLOCKED_UNMODIFIED )
 8007940:	e011      	b.n	8007966 <prvUnlockQueue+0x84>
		{
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8007942:	687b      	ldr	r3, [r7, #4]
 8007944:	691b      	ldr	r3, [r3, #16]
 8007946:	2b00      	cmp	r3, #0
 8007948:	d012      	beq.n	8007970 <prvUnlockQueue+0x8e>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 800794a:	687b      	ldr	r3, [r7, #4]
 800794c:	3310      	adds	r3, #16
 800794e:	4618      	mov	r0, r3
 8007950:	f000 fde6 	bl	8008520 <xTaskRemoveFromEventList>
 8007954:	4603      	mov	r3, r0
 8007956:	2b00      	cmp	r3, #0
 8007958:	d001      	beq.n	800795e <prvUnlockQueue+0x7c>
				{
					vTaskMissedYield();
 800795a:	f000 febd 	bl	80086d8 <vTaskMissedYield>
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				--cRxLock;
 800795e:	7bbb      	ldrb	r3, [r7, #14]
 8007960:	3b01      	subs	r3, #1
 8007962:	b2db      	uxtb	r3, r3
 8007964:	73bb      	strb	r3, [r7, #14]
		while( cRxLock > queueLOCKED_UNMODIFIED )
 8007966:	f997 300e 	ldrsb.w	r3, [r7, #14]
 800796a:	2b00      	cmp	r3, #0
 800796c:	dce9      	bgt.n	8007942 <prvUnlockQueue+0x60>
 800796e:	e000      	b.n	8007972 <prvUnlockQueue+0x90>
			}
			else
			{
				break;
 8007970:	bf00      	nop
			}
		}

		pxQueue->cRxLock = queueUNLOCKED;
 8007972:	687b      	ldr	r3, [r7, #4]
 8007974:	22ff      	movs	r2, #255	; 0xff
 8007976:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
	}
	taskEXIT_CRITICAL();
 800797a:	f001 fe1b 	bl	80095b4 <vPortExitCritical>
}
 800797e:	bf00      	nop
 8007980:	3710      	adds	r7, #16
 8007982:	46bd      	mov	sp, r7
 8007984:	bd80      	pop	{r7, pc}

08007986 <prvIsQueueEmpty>:
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueEmpty( const Queue_t *pxQueue )
{
 8007986:	b580      	push	{r7, lr}
 8007988:	b084      	sub	sp, #16
 800798a:	af00      	add	r7, sp, #0
 800798c:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 800798e:	f001 fde1 	bl	8009554 <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t )  0 )
 8007992:	687b      	ldr	r3, [r7, #4]
 8007994:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007996:	2b00      	cmp	r3, #0
 8007998:	d102      	bne.n	80079a0 <prvIsQueueEmpty+0x1a>
		{
			xReturn = pdTRUE;
 800799a:	2301      	movs	r3, #1
 800799c:	60fb      	str	r3, [r7, #12]
 800799e:	e001      	b.n	80079a4 <prvIsQueueEmpty+0x1e>
		}
		else
		{
			xReturn = pdFALSE;
 80079a0:	2300      	movs	r3, #0
 80079a2:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 80079a4:	f001 fe06 	bl	80095b4 <vPortExitCritical>

	return xReturn;
 80079a8:	68fb      	ldr	r3, [r7, #12]
}
 80079aa:	4618      	mov	r0, r3
 80079ac:	3710      	adds	r7, #16
 80079ae:	46bd      	mov	sp, r7
 80079b0:	bd80      	pop	{r7, pc}

080079b2 <prvIsQueueFull>:
	return xReturn;
} /*lint !e818 xQueue could not be pointer to const because it is a typedef. */
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueFull( const Queue_t *pxQueue )
{
 80079b2:	b580      	push	{r7, lr}
 80079b4:	b084      	sub	sp, #16
 80079b6:	af00      	add	r7, sp, #0
 80079b8:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 80079ba:	f001 fdcb 	bl	8009554 <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == pxQueue->uxLength )
 80079be:	687b      	ldr	r3, [r7, #4]
 80079c0:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 80079c2:	687b      	ldr	r3, [r7, #4]
 80079c4:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80079c6:	429a      	cmp	r2, r3
 80079c8:	d102      	bne.n	80079d0 <prvIsQueueFull+0x1e>
		{
			xReturn = pdTRUE;
 80079ca:	2301      	movs	r3, #1
 80079cc:	60fb      	str	r3, [r7, #12]
 80079ce:	e001      	b.n	80079d4 <prvIsQueueFull+0x22>
		}
		else
		{
			xReturn = pdFALSE;
 80079d0:	2300      	movs	r3, #0
 80079d2:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 80079d4:	f001 fdee 	bl	80095b4 <vPortExitCritical>

	return xReturn;
 80079d8:	68fb      	ldr	r3, [r7, #12]
}
 80079da:	4618      	mov	r0, r3
 80079dc:	3710      	adds	r7, #16
 80079de:	46bd      	mov	sp, r7
 80079e0:	bd80      	pop	{r7, pc}
	...

080079e4 <vQueueAddToRegistry>:
/*-----------------------------------------------------------*/

#if ( configQUEUE_REGISTRY_SIZE > 0 )

	void vQueueAddToRegistry( QueueHandle_t xQueue, const char *pcQueueName ) /*lint !e971 Unqualified char types are allowed for strings and single characters only. */
	{
 80079e4:	b480      	push	{r7}
 80079e6:	b085      	sub	sp, #20
 80079e8:	af00      	add	r7, sp, #0
 80079ea:	6078      	str	r0, [r7, #4]
 80079ec:	6039      	str	r1, [r7, #0]
	UBaseType_t ux;

		/* See if there is an empty space in the registry.  A NULL name denotes
		a free slot. */
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 80079ee:	2300      	movs	r3, #0
 80079f0:	60fb      	str	r3, [r7, #12]
 80079f2:	e014      	b.n	8007a1e <vQueueAddToRegistry+0x3a>
		{
			if( xQueueRegistry[ ux ].pcQueueName == NULL )
 80079f4:	4a0f      	ldr	r2, [pc, #60]	; (8007a34 <vQueueAddToRegistry+0x50>)
 80079f6:	68fb      	ldr	r3, [r7, #12]
 80079f8:	f852 3033 	ldr.w	r3, [r2, r3, lsl #3]
 80079fc:	2b00      	cmp	r3, #0
 80079fe:	d10b      	bne.n	8007a18 <vQueueAddToRegistry+0x34>
			{
				/* Store the information on this queue. */
				xQueueRegistry[ ux ].pcQueueName = pcQueueName;
 8007a00:	490c      	ldr	r1, [pc, #48]	; (8007a34 <vQueueAddToRegistry+0x50>)
 8007a02:	68fb      	ldr	r3, [r7, #12]
 8007a04:	683a      	ldr	r2, [r7, #0]
 8007a06:	f841 2033 	str.w	r2, [r1, r3, lsl #3]
				xQueueRegistry[ ux ].xHandle = xQueue;
 8007a0a:	4a0a      	ldr	r2, [pc, #40]	; (8007a34 <vQueueAddToRegistry+0x50>)
 8007a0c:	68fb      	ldr	r3, [r7, #12]
 8007a0e:	00db      	lsls	r3, r3, #3
 8007a10:	4413      	add	r3, r2
 8007a12:	687a      	ldr	r2, [r7, #4]
 8007a14:	605a      	str	r2, [r3, #4]

				traceQUEUE_REGISTRY_ADD( xQueue, pcQueueName );
				break;
 8007a16:	e006      	b.n	8007a26 <vQueueAddToRegistry+0x42>
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 8007a18:	68fb      	ldr	r3, [r7, #12]
 8007a1a:	3301      	adds	r3, #1
 8007a1c:	60fb      	str	r3, [r7, #12]
 8007a1e:	68fb      	ldr	r3, [r7, #12]
 8007a20:	2b07      	cmp	r3, #7
 8007a22:	d9e7      	bls.n	80079f4 <vQueueAddToRegistry+0x10>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	}
 8007a24:	bf00      	nop
 8007a26:	bf00      	nop
 8007a28:	3714      	adds	r7, #20
 8007a2a:	46bd      	mov	sp, r7
 8007a2c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007a30:	4770      	bx	lr
 8007a32:	bf00      	nop
 8007a34:	24000d24 	.word	0x24000d24

08007a38 <vQueueUnregisterQueue>:
/*-----------------------------------------------------------*/

#if ( configQUEUE_REGISTRY_SIZE > 0 )

	void vQueueUnregisterQueue( QueueHandle_t xQueue )
	{
 8007a38:	b480      	push	{r7}
 8007a3a:	b085      	sub	sp, #20
 8007a3c:	af00      	add	r7, sp, #0
 8007a3e:	6078      	str	r0, [r7, #4]
	UBaseType_t ux;

		/* See if the handle of the queue being unregistered in actually in the
		registry. */
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 8007a40:	2300      	movs	r3, #0
 8007a42:	60fb      	str	r3, [r7, #12]
 8007a44:	e016      	b.n	8007a74 <vQueueUnregisterQueue+0x3c>
		{
			if( xQueueRegistry[ ux ].xHandle == xQueue )
 8007a46:	4a10      	ldr	r2, [pc, #64]	; (8007a88 <vQueueUnregisterQueue+0x50>)
 8007a48:	68fb      	ldr	r3, [r7, #12]
 8007a4a:	00db      	lsls	r3, r3, #3
 8007a4c:	4413      	add	r3, r2
 8007a4e:	685b      	ldr	r3, [r3, #4]
 8007a50:	687a      	ldr	r2, [r7, #4]
 8007a52:	429a      	cmp	r2, r3
 8007a54:	d10b      	bne.n	8007a6e <vQueueUnregisterQueue+0x36>
			{
				/* Set the name to NULL to show that this slot if free again. */
				xQueueRegistry[ ux ].pcQueueName = NULL;
 8007a56:	4a0c      	ldr	r2, [pc, #48]	; (8007a88 <vQueueUnregisterQueue+0x50>)
 8007a58:	68fb      	ldr	r3, [r7, #12]
 8007a5a:	2100      	movs	r1, #0
 8007a5c:	f842 1033 	str.w	r1, [r2, r3, lsl #3]

				/* Set the handle to NULL to ensure the same queue handle cannot
				appear in the registry twice if it is added, removed, then
				added again. */
				xQueueRegistry[ ux ].xHandle = ( QueueHandle_t ) 0;
 8007a60:	4a09      	ldr	r2, [pc, #36]	; (8007a88 <vQueueUnregisterQueue+0x50>)
 8007a62:	68fb      	ldr	r3, [r7, #12]
 8007a64:	00db      	lsls	r3, r3, #3
 8007a66:	4413      	add	r3, r2
 8007a68:	2200      	movs	r2, #0
 8007a6a:	605a      	str	r2, [r3, #4]
				break;
 8007a6c:	e006      	b.n	8007a7c <vQueueUnregisterQueue+0x44>
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 8007a6e:	68fb      	ldr	r3, [r7, #12]
 8007a70:	3301      	adds	r3, #1
 8007a72:	60fb      	str	r3, [r7, #12]
 8007a74:	68fb      	ldr	r3, [r7, #12]
 8007a76:	2b07      	cmp	r3, #7
 8007a78:	d9e5      	bls.n	8007a46 <vQueueUnregisterQueue+0xe>
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}

	} /*lint !e818 xQueue could not be pointer to const because it is a typedef. */
 8007a7a:	bf00      	nop
 8007a7c:	bf00      	nop
 8007a7e:	3714      	adds	r7, #20
 8007a80:	46bd      	mov	sp, r7
 8007a82:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007a86:	4770      	bx	lr
 8007a88:	24000d24 	.word	0x24000d24

08007a8c <vQueueWaitForMessageRestricted>:
/*-----------------------------------------------------------*/

#if ( configUSE_TIMERS == 1 )

	void vQueueWaitForMessageRestricted( QueueHandle_t xQueue, TickType_t xTicksToWait, const BaseType_t xWaitIndefinitely )
	{
 8007a8c:	b580      	push	{r7, lr}
 8007a8e:	b086      	sub	sp, #24
 8007a90:	af00      	add	r7, sp, #0
 8007a92:	60f8      	str	r0, [r7, #12]
 8007a94:	60b9      	str	r1, [r7, #8]
 8007a96:	607a      	str	r2, [r7, #4]
	Queue_t * const pxQueue = xQueue;
 8007a98:	68fb      	ldr	r3, [r7, #12]
 8007a9a:	617b      	str	r3, [r7, #20]
		will not actually cause the task to block, just place it on a blocked
		list.  It will not block until the scheduler is unlocked - at which
		time a yield will be performed.  If an item is added to the queue while
		the queue is locked, and the calling task blocks on the queue, then the
		calling task will be immediately unblocked when the queue is unlocked. */
		prvLockQueue( pxQueue );
 8007a9c:	f001 fd5a 	bl	8009554 <vPortEnterCritical>
 8007aa0:	697b      	ldr	r3, [r7, #20]
 8007aa2:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8007aa6:	b25b      	sxtb	r3, r3
 8007aa8:	f1b3 3fff 	cmp.w	r3, #4294967295
 8007aac:	d103      	bne.n	8007ab6 <vQueueWaitForMessageRestricted+0x2a>
 8007aae:	697b      	ldr	r3, [r7, #20]
 8007ab0:	2200      	movs	r2, #0
 8007ab2:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8007ab6:	697b      	ldr	r3, [r7, #20]
 8007ab8:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8007abc:	b25b      	sxtb	r3, r3
 8007abe:	f1b3 3fff 	cmp.w	r3, #4294967295
 8007ac2:	d103      	bne.n	8007acc <vQueueWaitForMessageRestricted+0x40>
 8007ac4:	697b      	ldr	r3, [r7, #20]
 8007ac6:	2200      	movs	r2, #0
 8007ac8:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8007acc:	f001 fd72 	bl	80095b4 <vPortExitCritical>
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t ) 0U )
 8007ad0:	697b      	ldr	r3, [r7, #20]
 8007ad2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007ad4:	2b00      	cmp	r3, #0
 8007ad6:	d106      	bne.n	8007ae6 <vQueueWaitForMessageRestricted+0x5a>
		{
			/* There is nothing in the queue, block for the specified period. */
			vTaskPlaceOnEventListRestricted( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait, xWaitIndefinitely );
 8007ad8:	697b      	ldr	r3, [r7, #20]
 8007ada:	3324      	adds	r3, #36	; 0x24
 8007adc:	687a      	ldr	r2, [r7, #4]
 8007ade:	68b9      	ldr	r1, [r7, #8]
 8007ae0:	4618      	mov	r0, r3
 8007ae2:	f000 fcf1 	bl	80084c8 <vTaskPlaceOnEventListRestricted>
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
		prvUnlockQueue( pxQueue );
 8007ae6:	6978      	ldr	r0, [r7, #20]
 8007ae8:	f7ff fefb 	bl	80078e2 <prvUnlockQueue>
	}
 8007aec:	bf00      	nop
 8007aee:	3718      	adds	r7, #24
 8007af0:	46bd      	mov	sp, r7
 8007af2:	bd80      	pop	{r7, pc}

08007af4 <xTaskCreateStatic>:
									const uint32_t ulStackDepth,
									void * const pvParameters,
									UBaseType_t uxPriority,
									StackType_t * const puxStackBuffer,
									StaticTask_t * const pxTaskBuffer )
	{
 8007af4:	b580      	push	{r7, lr}
 8007af6:	b08e      	sub	sp, #56	; 0x38
 8007af8:	af04      	add	r7, sp, #16
 8007afa:	60f8      	str	r0, [r7, #12]
 8007afc:	60b9      	str	r1, [r7, #8]
 8007afe:	607a      	str	r2, [r7, #4]
 8007b00:	603b      	str	r3, [r7, #0]
	TCB_t *pxNewTCB;
	TaskHandle_t xReturn;

		configASSERT( puxStackBuffer != NULL );
 8007b02:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8007b04:	2b00      	cmp	r3, #0
 8007b06:	d10a      	bne.n	8007b1e <xTaskCreateStatic+0x2a>
	__asm volatile
 8007b08:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007b0c:	f383 8811 	msr	BASEPRI, r3
 8007b10:	f3bf 8f6f 	isb	sy
 8007b14:	f3bf 8f4f 	dsb	sy
 8007b18:	623b      	str	r3, [r7, #32]
}
 8007b1a:	bf00      	nop
 8007b1c:	e7fe      	b.n	8007b1c <xTaskCreateStatic+0x28>
		configASSERT( pxTaskBuffer != NULL );
 8007b1e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007b20:	2b00      	cmp	r3, #0
 8007b22:	d10a      	bne.n	8007b3a <xTaskCreateStatic+0x46>
	__asm volatile
 8007b24:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007b28:	f383 8811 	msr	BASEPRI, r3
 8007b2c:	f3bf 8f6f 	isb	sy
 8007b30:	f3bf 8f4f 	dsb	sy
 8007b34:	61fb      	str	r3, [r7, #28]
}
 8007b36:	bf00      	nop
 8007b38:	e7fe      	b.n	8007b38 <xTaskCreateStatic+0x44>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticTask_t equals the size of the real task
			structure. */
			volatile size_t xSize = sizeof( StaticTask_t );
 8007b3a:	23bc      	movs	r3, #188	; 0xbc
 8007b3c:	613b      	str	r3, [r7, #16]
			configASSERT( xSize == sizeof( TCB_t ) );
 8007b3e:	693b      	ldr	r3, [r7, #16]
 8007b40:	2bbc      	cmp	r3, #188	; 0xbc
 8007b42:	d00a      	beq.n	8007b5a <xTaskCreateStatic+0x66>
	__asm volatile
 8007b44:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007b48:	f383 8811 	msr	BASEPRI, r3
 8007b4c:	f3bf 8f6f 	isb	sy
 8007b50:	f3bf 8f4f 	dsb	sy
 8007b54:	61bb      	str	r3, [r7, #24]
}
 8007b56:	bf00      	nop
 8007b58:	e7fe      	b.n	8007b58 <xTaskCreateStatic+0x64>
			( void ) xSize; /* Prevent lint warning when configASSERT() is not used. */
 8007b5a:	693b      	ldr	r3, [r7, #16]
		}
		#endif /* configASSERT_DEFINED */


		if( ( pxTaskBuffer != NULL ) && ( puxStackBuffer != NULL ) )
 8007b5c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007b5e:	2b00      	cmp	r3, #0
 8007b60:	d01e      	beq.n	8007ba0 <xTaskCreateStatic+0xac>
 8007b62:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8007b64:	2b00      	cmp	r3, #0
 8007b66:	d01b      	beq.n	8007ba0 <xTaskCreateStatic+0xac>
		{
			/* The memory used for the task's TCB and stack are passed into this
			function - use them. */
			pxNewTCB = ( TCB_t * ) pxTaskBuffer; /*lint !e740 !e9087 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 8007b68:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007b6a:	627b      	str	r3, [r7, #36]	; 0x24
			pxNewTCB->pxStack = ( StackType_t * ) puxStackBuffer;
 8007b6c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007b6e:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8007b70:	631a      	str	r2, [r3, #48]	; 0x30

			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 !e9029 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created statically in case the task is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskSTATICALLY_ALLOCATED_STACK_AND_TCB;
 8007b72:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007b74:	2202      	movs	r2, #2
 8007b76:	f883 20b9 	strb.w	r2, [r3, #185]	; 0xb9
			}
			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

			prvInitialiseNewTask( pxTaskCode, pcName, ulStackDepth, pvParameters, uxPriority, &xReturn, pxNewTCB, NULL );
 8007b7a:	2300      	movs	r3, #0
 8007b7c:	9303      	str	r3, [sp, #12]
 8007b7e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007b80:	9302      	str	r3, [sp, #8]
 8007b82:	f107 0314 	add.w	r3, r7, #20
 8007b86:	9301      	str	r3, [sp, #4]
 8007b88:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007b8a:	9300      	str	r3, [sp, #0]
 8007b8c:	683b      	ldr	r3, [r7, #0]
 8007b8e:	687a      	ldr	r2, [r7, #4]
 8007b90:	68b9      	ldr	r1, [r7, #8]
 8007b92:	68f8      	ldr	r0, [r7, #12]
 8007b94:	f000 f850 	bl	8007c38 <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 8007b98:	6a78      	ldr	r0, [r7, #36]	; 0x24
 8007b9a:	f000 f8f3 	bl	8007d84 <prvAddNewTaskToReadyList>
 8007b9e:	e001      	b.n	8007ba4 <xTaskCreateStatic+0xb0>
		}
		else
		{
			xReturn = NULL;
 8007ba0:	2300      	movs	r3, #0
 8007ba2:	617b      	str	r3, [r7, #20]
		}

		return xReturn;
 8007ba4:	697b      	ldr	r3, [r7, #20]
	}
 8007ba6:	4618      	mov	r0, r3
 8007ba8:	3728      	adds	r7, #40	; 0x28
 8007baa:	46bd      	mov	sp, r7
 8007bac:	bd80      	pop	{r7, pc}

08007bae <xTaskCreate>:
							const char * const pcName,		/*lint !e971 Unqualified char types are allowed for strings and single characters only. */
							const configSTACK_DEPTH_TYPE usStackDepth,
							void * const pvParameters,
							UBaseType_t uxPriority,
							TaskHandle_t * const pxCreatedTask )
	{
 8007bae:	b580      	push	{r7, lr}
 8007bb0:	b08c      	sub	sp, #48	; 0x30
 8007bb2:	af04      	add	r7, sp, #16
 8007bb4:	60f8      	str	r0, [r7, #12]
 8007bb6:	60b9      	str	r1, [r7, #8]
 8007bb8:	603b      	str	r3, [r7, #0]
 8007bba:	4613      	mov	r3, r2
 8007bbc:	80fb      	strh	r3, [r7, #6]
		#else /* portSTACK_GROWTH */
		{
		StackType_t *pxStack;

			/* Allocate space for the stack used by the task being created. */
			pxStack = pvPortMalloc( ( ( ( size_t ) usStackDepth ) * sizeof( StackType_t ) ) ); /*lint !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack and this allocation is the stack. */
 8007bbe:	88fb      	ldrh	r3, [r7, #6]
 8007bc0:	009b      	lsls	r3, r3, #2
 8007bc2:	4618      	mov	r0, r3
 8007bc4:	f001 fde8 	bl	8009798 <pvPortMalloc>
 8007bc8:	6178      	str	r0, [r7, #20]

			if( pxStack != NULL )
 8007bca:	697b      	ldr	r3, [r7, #20]
 8007bcc:	2b00      	cmp	r3, #0
 8007bce:	d00e      	beq.n	8007bee <xTaskCreate+0x40>
			{
				/* Allocate space for the TCB. */
				pxNewTCB = ( TCB_t * ) pvPortMalloc( sizeof( TCB_t ) ); /*lint !e9087 !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack, and the first member of TCB_t is always a pointer to the task's stack. */
 8007bd0:	20bc      	movs	r0, #188	; 0xbc
 8007bd2:	f001 fde1 	bl	8009798 <pvPortMalloc>
 8007bd6:	61f8      	str	r0, [r7, #28]

				if( pxNewTCB != NULL )
 8007bd8:	69fb      	ldr	r3, [r7, #28]
 8007bda:	2b00      	cmp	r3, #0
 8007bdc:	d003      	beq.n	8007be6 <xTaskCreate+0x38>
				{
					/* Store the stack location in the TCB. */
					pxNewTCB->pxStack = pxStack;
 8007bde:	69fb      	ldr	r3, [r7, #28]
 8007be0:	697a      	ldr	r2, [r7, #20]
 8007be2:	631a      	str	r2, [r3, #48]	; 0x30
 8007be4:	e005      	b.n	8007bf2 <xTaskCreate+0x44>
				}
				else
				{
					/* The stack cannot be used as the TCB was not created.  Free
					it again. */
					vPortFree( pxStack );
 8007be6:	6978      	ldr	r0, [r7, #20]
 8007be8:	f001 fea2 	bl	8009930 <vPortFree>
 8007bec:	e001      	b.n	8007bf2 <xTaskCreate+0x44>
				}
			}
			else
			{
				pxNewTCB = NULL;
 8007bee:	2300      	movs	r3, #0
 8007bf0:	61fb      	str	r3, [r7, #28]
			}
		}
		#endif /* portSTACK_GROWTH */

		if( pxNewTCB != NULL )
 8007bf2:	69fb      	ldr	r3, [r7, #28]
 8007bf4:	2b00      	cmp	r3, #0
 8007bf6:	d017      	beq.n	8007c28 <xTaskCreate+0x7a>
		{
			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e9029 !e731 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created dynamically in case it is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB;
 8007bf8:	69fb      	ldr	r3, [r7, #28]
 8007bfa:	2200      	movs	r2, #0
 8007bfc:	f883 20b9 	strb.w	r2, [r3, #185]	; 0xb9
			}
			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

			prvInitialiseNewTask( pxTaskCode, pcName, ( uint32_t ) usStackDepth, pvParameters, uxPriority, pxCreatedTask, pxNewTCB, NULL );
 8007c00:	88fa      	ldrh	r2, [r7, #6]
 8007c02:	2300      	movs	r3, #0
 8007c04:	9303      	str	r3, [sp, #12]
 8007c06:	69fb      	ldr	r3, [r7, #28]
 8007c08:	9302      	str	r3, [sp, #8]
 8007c0a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007c0c:	9301      	str	r3, [sp, #4]
 8007c0e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007c10:	9300      	str	r3, [sp, #0]
 8007c12:	683b      	ldr	r3, [r7, #0]
 8007c14:	68b9      	ldr	r1, [r7, #8]
 8007c16:	68f8      	ldr	r0, [r7, #12]
 8007c18:	f000 f80e 	bl	8007c38 <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 8007c1c:	69f8      	ldr	r0, [r7, #28]
 8007c1e:	f000 f8b1 	bl	8007d84 <prvAddNewTaskToReadyList>
			xReturn = pdPASS;
 8007c22:	2301      	movs	r3, #1
 8007c24:	61bb      	str	r3, [r7, #24]
 8007c26:	e002      	b.n	8007c2e <xTaskCreate+0x80>
		}
		else
		{
			xReturn = errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY;
 8007c28:	f04f 33ff 	mov.w	r3, #4294967295
 8007c2c:	61bb      	str	r3, [r7, #24]
		}

		return xReturn;
 8007c2e:	69bb      	ldr	r3, [r7, #24]
	}
 8007c30:	4618      	mov	r0, r3
 8007c32:	3720      	adds	r7, #32
 8007c34:	46bd      	mov	sp, r7
 8007c36:	bd80      	pop	{r7, pc}

08007c38 <prvInitialiseNewTask>:
									void * const pvParameters,
									UBaseType_t uxPriority,
									TaskHandle_t * const pxCreatedTask,
									TCB_t *pxNewTCB,
									const MemoryRegion_t * const xRegions )
{
 8007c38:	b580      	push	{r7, lr}
 8007c3a:	b088      	sub	sp, #32
 8007c3c:	af00      	add	r7, sp, #0
 8007c3e:	60f8      	str	r0, [r7, #12]
 8007c40:	60b9      	str	r1, [r7, #8]
 8007c42:	607a      	str	r2, [r7, #4]
 8007c44:	603b      	str	r3, [r7, #0]

	/* Avoid dependency on memset() if it is not required. */
	#if( tskSET_NEW_STACKS_TO_KNOWN_VALUE == 1 )
	{
		/* Fill the stack with a known value to assist debugging. */
		( void ) memset( pxNewTCB->pxStack, ( int ) tskSTACK_FILL_BYTE, ( size_t ) ulStackDepth * sizeof( StackType_t ) );
 8007c46:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007c48:	6b18      	ldr	r0, [r3, #48]	; 0x30
 8007c4a:	687b      	ldr	r3, [r7, #4]
 8007c4c:	009b      	lsls	r3, r3, #2
 8007c4e:	461a      	mov	r2, r3
 8007c50:	21a5      	movs	r1, #165	; 0xa5
 8007c52:	f002 f8bc 	bl	8009dce <memset>
	grows from high memory to low (as per the 80x86) or vice versa.
	portSTACK_GROWTH is used to make the result positive or negative as required
	by the port. */
	#if( portSTACK_GROWTH < 0 )
	{
		pxTopOfStack = &( pxNewTCB->pxStack[ ulStackDepth - ( uint32_t ) 1 ] );
 8007c56:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007c58:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8007c5a:	6879      	ldr	r1, [r7, #4]
 8007c5c:	f06f 4340 	mvn.w	r3, #3221225472	; 0xc0000000
 8007c60:	440b      	add	r3, r1
 8007c62:	009b      	lsls	r3, r3, #2
 8007c64:	4413      	add	r3, r2
 8007c66:	61bb      	str	r3, [r7, #24]
		pxTopOfStack = ( StackType_t * ) ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack ) & ( ~( ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) ) ); /*lint !e923 !e9033 !e9078 MISRA exception.  Avoiding casts between pointers and integers is not practical.  Size differences accounted for using portPOINTER_SIZE_TYPE type.  Checked by assert(). */
 8007c68:	69bb      	ldr	r3, [r7, #24]
 8007c6a:	f023 0307 	bic.w	r3, r3, #7
 8007c6e:	61bb      	str	r3, [r7, #24]

		/* Check the alignment of the calculated top of stack is correct. */
		configASSERT( ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack & ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) == 0UL ) );
 8007c70:	69bb      	ldr	r3, [r7, #24]
 8007c72:	f003 0307 	and.w	r3, r3, #7
 8007c76:	2b00      	cmp	r3, #0
 8007c78:	d00a      	beq.n	8007c90 <prvInitialiseNewTask+0x58>
	__asm volatile
 8007c7a:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007c7e:	f383 8811 	msr	BASEPRI, r3
 8007c82:	f3bf 8f6f 	isb	sy
 8007c86:	f3bf 8f4f 	dsb	sy
 8007c8a:	617b      	str	r3, [r7, #20]
}
 8007c8c:	bf00      	nop
 8007c8e:	e7fe      	b.n	8007c8e <prvInitialiseNewTask+0x56>
		pxNewTCB->pxEndOfStack = pxNewTCB->pxStack + ( ulStackDepth - ( uint32_t ) 1 );
	}
	#endif /* portSTACK_GROWTH */

	/* Store the task name in the TCB. */
	if( pcName != NULL )
 8007c90:	68bb      	ldr	r3, [r7, #8]
 8007c92:	2b00      	cmp	r3, #0
 8007c94:	d01f      	beq.n	8007cd6 <prvInitialiseNewTask+0x9e>
	{
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 8007c96:	2300      	movs	r3, #0
 8007c98:	61fb      	str	r3, [r7, #28]
 8007c9a:	e012      	b.n	8007cc2 <prvInitialiseNewTask+0x8a>
		{
			pxNewTCB->pcTaskName[ x ] = pcName[ x ];
 8007c9c:	68ba      	ldr	r2, [r7, #8]
 8007c9e:	69fb      	ldr	r3, [r7, #28]
 8007ca0:	4413      	add	r3, r2
 8007ca2:	7819      	ldrb	r1, [r3, #0]
 8007ca4:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8007ca6:	69fb      	ldr	r3, [r7, #28]
 8007ca8:	4413      	add	r3, r2
 8007caa:	3334      	adds	r3, #52	; 0x34
 8007cac:	460a      	mov	r2, r1
 8007cae:	701a      	strb	r2, [r3, #0]

			/* Don't copy all configMAX_TASK_NAME_LEN if the string is shorter than
			configMAX_TASK_NAME_LEN characters just in case the memory after the
			string is not accessible (extremely unlikely). */
			if( pcName[ x ] == ( char ) 0x00 )
 8007cb0:	68ba      	ldr	r2, [r7, #8]
 8007cb2:	69fb      	ldr	r3, [r7, #28]
 8007cb4:	4413      	add	r3, r2
 8007cb6:	781b      	ldrb	r3, [r3, #0]
 8007cb8:	2b00      	cmp	r3, #0
 8007cba:	d006      	beq.n	8007cca <prvInitialiseNewTask+0x92>
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 8007cbc:	69fb      	ldr	r3, [r7, #28]
 8007cbe:	3301      	adds	r3, #1
 8007cc0:	61fb      	str	r3, [r7, #28]
 8007cc2:	69fb      	ldr	r3, [r7, #28]
 8007cc4:	2b0f      	cmp	r3, #15
 8007cc6:	d9e9      	bls.n	8007c9c <prvInitialiseNewTask+0x64>
 8007cc8:	e000      	b.n	8007ccc <prvInitialiseNewTask+0x94>
			{
				break;
 8007cca:	bf00      	nop
			}
		}

		/* Ensure the name string is terminated in the case that the string length
		was greater or equal to configMAX_TASK_NAME_LEN. */
		pxNewTCB->pcTaskName[ configMAX_TASK_NAME_LEN - 1 ] = '\0';
 8007ccc:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007cce:	2200      	movs	r2, #0
 8007cd0:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 8007cd4:	e003      	b.n	8007cde <prvInitialiseNewTask+0xa6>
	}
	else
	{
		/* The task has not been given a name, so just ensure there is a NULL
		terminator when it is read out. */
		pxNewTCB->pcTaskName[ 0 ] = 0x00;
 8007cd6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007cd8:	2200      	movs	r2, #0
 8007cda:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
	}

	/* This is used as an array index so must ensure it's not too large.  First
	remove the privilege bit if one is present. */
	if( uxPriority >= ( UBaseType_t ) configMAX_PRIORITIES )
 8007cde:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007ce0:	2b37      	cmp	r3, #55	; 0x37
 8007ce2:	d901      	bls.n	8007ce8 <prvInitialiseNewTask+0xb0>
	{
		uxPriority = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) 1U;
 8007ce4:	2337      	movs	r3, #55	; 0x37
 8007ce6:	62bb      	str	r3, [r7, #40]	; 0x28
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxNewTCB->uxPriority = uxPriority;
 8007ce8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007cea:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8007cec:	62da      	str	r2, [r3, #44]	; 0x2c
	#if ( configUSE_MUTEXES == 1 )
	{
		pxNewTCB->uxBasePriority = uxPriority;
 8007cee:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007cf0:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8007cf2:	64da      	str	r2, [r3, #76]	; 0x4c
		pxNewTCB->uxMutexesHeld = 0;
 8007cf4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007cf6:	2200      	movs	r2, #0
 8007cf8:	651a      	str	r2, [r3, #80]	; 0x50
	}
	#endif /* configUSE_MUTEXES */

	vListInitialiseItem( &( pxNewTCB->xStateListItem ) );
 8007cfa:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007cfc:	3304      	adds	r3, #4
 8007cfe:	4618      	mov	r0, r3
 8007d00:	f7fe fe56 	bl	80069b0 <vListInitialiseItem>
	vListInitialiseItem( &( pxNewTCB->xEventListItem ) );
 8007d04:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007d06:	3318      	adds	r3, #24
 8007d08:	4618      	mov	r0, r3
 8007d0a:	f7fe fe51 	bl	80069b0 <vListInitialiseItem>

	/* Set the pxNewTCB as a link back from the ListItem_t.  This is so we can get
	back to	the containing TCB from a generic item in a list. */
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xStateListItem ), pxNewTCB );
 8007d0e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007d10:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8007d12:	611a      	str	r2, [r3, #16]

	/* Event lists are always in priority order. */
	listSET_LIST_ITEM_VALUE( &( pxNewTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8007d14:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007d16:	f1c3 0238 	rsb	r2, r3, #56	; 0x38
 8007d1a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007d1c:	619a      	str	r2, [r3, #24]
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xEventListItem ), pxNewTCB );
 8007d1e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007d20:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8007d22:	625a      	str	r2, [r3, #36]	; 0x24
	}
	#endif

	#if ( configUSE_TASK_NOTIFICATIONS == 1 )
	{
		pxNewTCB->ulNotifiedValue = 0;
 8007d24:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007d26:	2200      	movs	r2, #0
 8007d28:	f8c3 20b4 	str.w	r2, [r3, #180]	; 0xb4
		pxNewTCB->ucNotifyState = taskNOT_WAITING_NOTIFICATION;
 8007d2c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007d2e:	2200      	movs	r2, #0
 8007d30:	f883 20b8 	strb.w	r2, [r3, #184]	; 0xb8
	#if ( configUSE_NEWLIB_REENTRANT == 1 )
	{
		/* Initialise this task's Newlib reent structure.
		See the third party link http://www.nadler.com/embedded/newlibAndFreeRTOS.html
		for additional information. */
		_REENT_INIT_PTR( ( &( pxNewTCB->xNewLib_reent ) ) );
 8007d34:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007d36:	3354      	adds	r3, #84	; 0x54
 8007d38:	2260      	movs	r2, #96	; 0x60
 8007d3a:	2100      	movs	r1, #0
 8007d3c:	4618      	mov	r0, r3
 8007d3e:	f002 f846 	bl	8009dce <memset>
 8007d42:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007d44:	4a0c      	ldr	r2, [pc, #48]	; (8007d78 <prvInitialiseNewTask+0x140>)
 8007d46:	659a      	str	r2, [r3, #88]	; 0x58
 8007d48:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007d4a:	4a0c      	ldr	r2, [pc, #48]	; (8007d7c <prvInitialiseNewTask+0x144>)
 8007d4c:	65da      	str	r2, [r3, #92]	; 0x5c
 8007d4e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007d50:	4a0b      	ldr	r2, [pc, #44]	; (8007d80 <prvInitialiseNewTask+0x148>)
 8007d52:	661a      	str	r2, [r3, #96]	; 0x60
			}
			#endif /* portSTACK_GROWTH */
		}
		#else /* portHAS_STACK_OVERFLOW_CHECKING */
		{
			pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters );
 8007d54:	683a      	ldr	r2, [r7, #0]
 8007d56:	68f9      	ldr	r1, [r7, #12]
 8007d58:	69b8      	ldr	r0, [r7, #24]
 8007d5a:	f001 facf 	bl	80092fc <pxPortInitialiseStack>
 8007d5e:	4602      	mov	r2, r0
 8007d60:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007d62:	601a      	str	r2, [r3, #0]
		}
		#endif /* portHAS_STACK_OVERFLOW_CHECKING */
	}
	#endif /* portUSING_MPU_WRAPPERS */

	if( pxCreatedTask != NULL )
 8007d64:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007d66:	2b00      	cmp	r3, #0
 8007d68:	d002      	beq.n	8007d70 <prvInitialiseNewTask+0x138>
	{
		/* Pass the handle out in an anonymous way.  The handle can be used to
		change the created task's priority, delete the created task, etc.*/
		*pxCreatedTask = ( TaskHandle_t ) pxNewTCB;
 8007d6a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007d6c:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8007d6e:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 8007d70:	bf00      	nop
 8007d72:	3720      	adds	r7, #32
 8007d74:	46bd      	mov	sp, r7
 8007d76:	bd80      	pop	{r7, pc}
 8007d78:	0800b0b8 	.word	0x0800b0b8
 8007d7c:	0800b0d8 	.word	0x0800b0d8
 8007d80:	0800b098 	.word	0x0800b098

08007d84 <prvAddNewTaskToReadyList>:
/*-----------------------------------------------------------*/

static void prvAddNewTaskToReadyList( TCB_t *pxNewTCB )
{
 8007d84:	b580      	push	{r7, lr}
 8007d86:	b082      	sub	sp, #8
 8007d88:	af00      	add	r7, sp, #0
 8007d8a:	6078      	str	r0, [r7, #4]
	/* Ensure interrupts don't access the task lists while the lists are being
	updated. */
	taskENTER_CRITICAL();
 8007d8c:	f001 fbe2 	bl	8009554 <vPortEnterCritical>
	{
		uxCurrentNumberOfTasks++;
 8007d90:	4b2d      	ldr	r3, [pc, #180]	; (8007e48 <prvAddNewTaskToReadyList+0xc4>)
 8007d92:	681b      	ldr	r3, [r3, #0]
 8007d94:	3301      	adds	r3, #1
 8007d96:	4a2c      	ldr	r2, [pc, #176]	; (8007e48 <prvAddNewTaskToReadyList+0xc4>)
 8007d98:	6013      	str	r3, [r2, #0]
		if( pxCurrentTCB == NULL )
 8007d9a:	4b2c      	ldr	r3, [pc, #176]	; (8007e4c <prvAddNewTaskToReadyList+0xc8>)
 8007d9c:	681b      	ldr	r3, [r3, #0]
 8007d9e:	2b00      	cmp	r3, #0
 8007da0:	d109      	bne.n	8007db6 <prvAddNewTaskToReadyList+0x32>
		{
			/* There are no other tasks, or all the other tasks are in
			the suspended state - make this the current task. */
			pxCurrentTCB = pxNewTCB;
 8007da2:	4a2a      	ldr	r2, [pc, #168]	; (8007e4c <prvAddNewTaskToReadyList+0xc8>)
 8007da4:	687b      	ldr	r3, [r7, #4]
 8007da6:	6013      	str	r3, [r2, #0]

			if( uxCurrentNumberOfTasks == ( UBaseType_t ) 1 )
 8007da8:	4b27      	ldr	r3, [pc, #156]	; (8007e48 <prvAddNewTaskToReadyList+0xc4>)
 8007daa:	681b      	ldr	r3, [r3, #0]
 8007dac:	2b01      	cmp	r3, #1
 8007dae:	d110      	bne.n	8007dd2 <prvAddNewTaskToReadyList+0x4e>
			{
				/* This is the first task to be created so do the preliminary
				initialisation required.  We will not recover if this call
				fails, but we will report the failure. */
				prvInitialiseTaskLists();
 8007db0:	f000 fcb6 	bl	8008720 <prvInitialiseTaskLists>
 8007db4:	e00d      	b.n	8007dd2 <prvAddNewTaskToReadyList+0x4e>
		else
		{
			/* If the scheduler is not already running, make this task the
			current task if it is the highest priority task to be created
			so far. */
			if( xSchedulerRunning == pdFALSE )
 8007db6:	4b26      	ldr	r3, [pc, #152]	; (8007e50 <prvAddNewTaskToReadyList+0xcc>)
 8007db8:	681b      	ldr	r3, [r3, #0]
 8007dba:	2b00      	cmp	r3, #0
 8007dbc:	d109      	bne.n	8007dd2 <prvAddNewTaskToReadyList+0x4e>
			{
				if( pxCurrentTCB->uxPriority <= pxNewTCB->uxPriority )
 8007dbe:	4b23      	ldr	r3, [pc, #140]	; (8007e4c <prvAddNewTaskToReadyList+0xc8>)
 8007dc0:	681b      	ldr	r3, [r3, #0]
 8007dc2:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8007dc4:	687b      	ldr	r3, [r7, #4]
 8007dc6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007dc8:	429a      	cmp	r2, r3
 8007dca:	d802      	bhi.n	8007dd2 <prvAddNewTaskToReadyList+0x4e>
				{
					pxCurrentTCB = pxNewTCB;
 8007dcc:	4a1f      	ldr	r2, [pc, #124]	; (8007e4c <prvAddNewTaskToReadyList+0xc8>)
 8007dce:	687b      	ldr	r3, [r7, #4]
 8007dd0:	6013      	str	r3, [r2, #0]
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}

		uxTaskNumber++;
 8007dd2:	4b20      	ldr	r3, [pc, #128]	; (8007e54 <prvAddNewTaskToReadyList+0xd0>)
 8007dd4:	681b      	ldr	r3, [r3, #0]
 8007dd6:	3301      	adds	r3, #1
 8007dd8:	4a1e      	ldr	r2, [pc, #120]	; (8007e54 <prvAddNewTaskToReadyList+0xd0>)
 8007dda:	6013      	str	r3, [r2, #0]

		#if ( configUSE_TRACE_FACILITY == 1 )
		{
			/* Add a counter into the TCB for tracing only. */
			pxNewTCB->uxTCBNumber = uxTaskNumber;
 8007ddc:	4b1d      	ldr	r3, [pc, #116]	; (8007e54 <prvAddNewTaskToReadyList+0xd0>)
 8007dde:	681a      	ldr	r2, [r3, #0]
 8007de0:	687b      	ldr	r3, [r7, #4]
 8007de2:	645a      	str	r2, [r3, #68]	; 0x44
		}
		#endif /* configUSE_TRACE_FACILITY */
		traceTASK_CREATE( pxNewTCB );

		prvAddTaskToReadyList( pxNewTCB );
 8007de4:	687b      	ldr	r3, [r7, #4]
 8007de6:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8007de8:	4b1b      	ldr	r3, [pc, #108]	; (8007e58 <prvAddNewTaskToReadyList+0xd4>)
 8007dea:	681b      	ldr	r3, [r3, #0]
 8007dec:	429a      	cmp	r2, r3
 8007dee:	d903      	bls.n	8007df8 <prvAddNewTaskToReadyList+0x74>
 8007df0:	687b      	ldr	r3, [r7, #4]
 8007df2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007df4:	4a18      	ldr	r2, [pc, #96]	; (8007e58 <prvAddNewTaskToReadyList+0xd4>)
 8007df6:	6013      	str	r3, [r2, #0]
 8007df8:	687b      	ldr	r3, [r7, #4]
 8007dfa:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8007dfc:	4613      	mov	r3, r2
 8007dfe:	009b      	lsls	r3, r3, #2
 8007e00:	4413      	add	r3, r2
 8007e02:	009b      	lsls	r3, r3, #2
 8007e04:	4a15      	ldr	r2, [pc, #84]	; (8007e5c <prvAddNewTaskToReadyList+0xd8>)
 8007e06:	441a      	add	r2, r3
 8007e08:	687b      	ldr	r3, [r7, #4]
 8007e0a:	3304      	adds	r3, #4
 8007e0c:	4619      	mov	r1, r3
 8007e0e:	4610      	mov	r0, r2
 8007e10:	f7fe fddb 	bl	80069ca <vListInsertEnd>

		portSETUP_TCB( pxNewTCB );
	}
	taskEXIT_CRITICAL();
 8007e14:	f001 fbce 	bl	80095b4 <vPortExitCritical>

	if( xSchedulerRunning != pdFALSE )
 8007e18:	4b0d      	ldr	r3, [pc, #52]	; (8007e50 <prvAddNewTaskToReadyList+0xcc>)
 8007e1a:	681b      	ldr	r3, [r3, #0]
 8007e1c:	2b00      	cmp	r3, #0
 8007e1e:	d00e      	beq.n	8007e3e <prvAddNewTaskToReadyList+0xba>
	{
		/* If the created task is of a higher priority than the current task
		then it should run now. */
		if( pxCurrentTCB->uxPriority < pxNewTCB->uxPriority )
 8007e20:	4b0a      	ldr	r3, [pc, #40]	; (8007e4c <prvAddNewTaskToReadyList+0xc8>)
 8007e22:	681b      	ldr	r3, [r3, #0]
 8007e24:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8007e26:	687b      	ldr	r3, [r7, #4]
 8007e28:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007e2a:	429a      	cmp	r2, r3
 8007e2c:	d207      	bcs.n	8007e3e <prvAddNewTaskToReadyList+0xba>
		{
			taskYIELD_IF_USING_PREEMPTION();
 8007e2e:	4b0c      	ldr	r3, [pc, #48]	; (8007e60 <prvAddNewTaskToReadyList+0xdc>)
 8007e30:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8007e34:	601a      	str	r2, [r3, #0]
 8007e36:	f3bf 8f4f 	dsb	sy
 8007e3a:	f3bf 8f6f 	isb	sy
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 8007e3e:	bf00      	nop
 8007e40:	3708      	adds	r7, #8
 8007e42:	46bd      	mov	sp, r7
 8007e44:	bd80      	pop	{r7, pc}
 8007e46:	bf00      	nop
 8007e48:	24001238 	.word	0x24001238
 8007e4c:	24000d64 	.word	0x24000d64
 8007e50:	24001244 	.word	0x24001244
 8007e54:	24001254 	.word	0x24001254
 8007e58:	24001240 	.word	0x24001240
 8007e5c:	24000d68 	.word	0x24000d68
 8007e60:	e000ed04 	.word	0xe000ed04

08007e64 <vTaskDelay>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelay == 1 )

	void vTaskDelay( const TickType_t xTicksToDelay )
	{
 8007e64:	b580      	push	{r7, lr}
 8007e66:	b084      	sub	sp, #16
 8007e68:	af00      	add	r7, sp, #0
 8007e6a:	6078      	str	r0, [r7, #4]
	BaseType_t xAlreadyYielded = pdFALSE;
 8007e6c:	2300      	movs	r3, #0
 8007e6e:	60fb      	str	r3, [r7, #12]

		/* A delay time of zero just forces a reschedule. */
		if( xTicksToDelay > ( TickType_t ) 0U )
 8007e70:	687b      	ldr	r3, [r7, #4]
 8007e72:	2b00      	cmp	r3, #0
 8007e74:	d017      	beq.n	8007ea6 <vTaskDelay+0x42>
		{
			configASSERT( uxSchedulerSuspended == 0 );
 8007e76:	4b13      	ldr	r3, [pc, #76]	; (8007ec4 <vTaskDelay+0x60>)
 8007e78:	681b      	ldr	r3, [r3, #0]
 8007e7a:	2b00      	cmp	r3, #0
 8007e7c:	d00a      	beq.n	8007e94 <vTaskDelay+0x30>
	__asm volatile
 8007e7e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007e82:	f383 8811 	msr	BASEPRI, r3
 8007e86:	f3bf 8f6f 	isb	sy
 8007e8a:	f3bf 8f4f 	dsb	sy
 8007e8e:	60bb      	str	r3, [r7, #8]
}
 8007e90:	bf00      	nop
 8007e92:	e7fe      	b.n	8007e92 <vTaskDelay+0x2e>
			vTaskSuspendAll();
 8007e94:	f000 f91a 	bl	80080cc <vTaskSuspendAll>
				list or removed from the blocked list until the scheduler
				is resumed.

				This task cannot be in an event list as it is the currently
				executing task. */
				prvAddCurrentTaskToDelayedList( xTicksToDelay, pdFALSE );
 8007e98:	2100      	movs	r1, #0
 8007e9a:	6878      	ldr	r0, [r7, #4]
 8007e9c:	f000 fe8c 	bl	8008bb8 <prvAddCurrentTaskToDelayedList>
			}
			xAlreadyYielded = xTaskResumeAll();
 8007ea0:	f000 f922 	bl	80080e8 <xTaskResumeAll>
 8007ea4:	60f8      	str	r0, [r7, #12]
			mtCOVERAGE_TEST_MARKER();
		}

		/* Force a reschedule if xTaskResumeAll has not already done so, we may
		have put ourselves to sleep. */
		if( xAlreadyYielded == pdFALSE )
 8007ea6:	68fb      	ldr	r3, [r7, #12]
 8007ea8:	2b00      	cmp	r3, #0
 8007eaa:	d107      	bne.n	8007ebc <vTaskDelay+0x58>
		{
			portYIELD_WITHIN_API();
 8007eac:	4b06      	ldr	r3, [pc, #24]	; (8007ec8 <vTaskDelay+0x64>)
 8007eae:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8007eb2:	601a      	str	r2, [r3, #0]
 8007eb4:	f3bf 8f4f 	dsb	sy
 8007eb8:	f3bf 8f6f 	isb	sy
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
 8007ebc:	bf00      	nop
 8007ebe:	3710      	adds	r7, #16
 8007ec0:	46bd      	mov	sp, r7
 8007ec2:	bd80      	pop	{r7, pc}
 8007ec4:	24001260 	.word	0x24001260
 8007ec8:	e000ed04 	.word	0xe000ed04

08007ecc <prvTaskIsTaskSuspended>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskSuspend == 1 )

	static BaseType_t prvTaskIsTaskSuspended( const TaskHandle_t xTask )
	{
 8007ecc:	b480      	push	{r7}
 8007ece:	b087      	sub	sp, #28
 8007ed0:	af00      	add	r7, sp, #0
 8007ed2:	6078      	str	r0, [r7, #4]
	BaseType_t xReturn = pdFALSE;
 8007ed4:	2300      	movs	r3, #0
 8007ed6:	617b      	str	r3, [r7, #20]
	const TCB_t * const pxTCB = xTask;
 8007ed8:	687b      	ldr	r3, [r7, #4]
 8007eda:	613b      	str	r3, [r7, #16]

		/* Accesses xPendingReadyList so must be called from a critical
		section. */

		/* It does not make sense to check if the calling task is suspended. */
		configASSERT( xTask );
 8007edc:	687b      	ldr	r3, [r7, #4]
 8007ede:	2b00      	cmp	r3, #0
 8007ee0:	d10a      	bne.n	8007ef8 <prvTaskIsTaskSuspended+0x2c>
	__asm volatile
 8007ee2:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007ee6:	f383 8811 	msr	BASEPRI, r3
 8007eea:	f3bf 8f6f 	isb	sy
 8007eee:	f3bf 8f4f 	dsb	sy
 8007ef2:	60fb      	str	r3, [r7, #12]
}
 8007ef4:	bf00      	nop
 8007ef6:	e7fe      	b.n	8007ef6 <prvTaskIsTaskSuspended+0x2a>

		/* Is the task being resumed actually in the suspended list? */
		if( listIS_CONTAINED_WITHIN( &xSuspendedTaskList, &( pxTCB->xStateListItem ) ) != pdFALSE )
 8007ef8:	693b      	ldr	r3, [r7, #16]
 8007efa:	695b      	ldr	r3, [r3, #20]
 8007efc:	4a0a      	ldr	r2, [pc, #40]	; (8007f28 <prvTaskIsTaskSuspended+0x5c>)
 8007efe:	4293      	cmp	r3, r2
 8007f00:	d10a      	bne.n	8007f18 <prvTaskIsTaskSuspended+0x4c>
		{
			/* Has the task already been resumed from within an ISR? */
			if( listIS_CONTAINED_WITHIN( &xPendingReadyList, &( pxTCB->xEventListItem ) ) == pdFALSE )
 8007f02:	693b      	ldr	r3, [r7, #16]
 8007f04:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8007f06:	4a09      	ldr	r2, [pc, #36]	; (8007f2c <prvTaskIsTaskSuspended+0x60>)
 8007f08:	4293      	cmp	r3, r2
 8007f0a:	d005      	beq.n	8007f18 <prvTaskIsTaskSuspended+0x4c>
			{
				/* Is it in the suspended list because it is in the	Suspended
				state, or because is is blocked with no timeout? */
				if( listIS_CONTAINED_WITHIN( NULL, &( pxTCB->xEventListItem ) ) != pdFALSE ) /*lint !e961.  The cast is only redundant when NULL is used. */
 8007f0c:	693b      	ldr	r3, [r7, #16]
 8007f0e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8007f10:	2b00      	cmp	r3, #0
 8007f12:	d101      	bne.n	8007f18 <prvTaskIsTaskSuspended+0x4c>
				{
					xReturn = pdTRUE;
 8007f14:	2301      	movs	r3, #1
 8007f16:	617b      	str	r3, [r7, #20]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		return xReturn;
 8007f18:	697b      	ldr	r3, [r7, #20]
	} /*lint !e818 xTask cannot be a pointer to const because it is a typedef. */
 8007f1a:	4618      	mov	r0, r3
 8007f1c:	371c      	adds	r7, #28
 8007f1e:	46bd      	mov	sp, r7
 8007f20:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007f24:	4770      	bx	lr
 8007f26:	bf00      	nop
 8007f28:	24001224 	.word	0x24001224
 8007f2c:	240011f8 	.word	0x240011f8

08007f30 <vTaskResume>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskSuspend == 1 )

	void vTaskResume( TaskHandle_t xTaskToResume )
	{
 8007f30:	b580      	push	{r7, lr}
 8007f32:	b084      	sub	sp, #16
 8007f34:	af00      	add	r7, sp, #0
 8007f36:	6078      	str	r0, [r7, #4]
	TCB_t * const pxTCB = xTaskToResume;
 8007f38:	687b      	ldr	r3, [r7, #4]
 8007f3a:	60fb      	str	r3, [r7, #12]

		/* It does not make sense to resume the calling task. */
		configASSERT( xTaskToResume );
 8007f3c:	687b      	ldr	r3, [r7, #4]
 8007f3e:	2b00      	cmp	r3, #0
 8007f40:	d10a      	bne.n	8007f58 <vTaskResume+0x28>
	__asm volatile
 8007f42:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007f46:	f383 8811 	msr	BASEPRI, r3
 8007f4a:	f3bf 8f6f 	isb	sy
 8007f4e:	f3bf 8f4f 	dsb	sy
 8007f52:	60bb      	str	r3, [r7, #8]
}
 8007f54:	bf00      	nop
 8007f56:	e7fe      	b.n	8007f56 <vTaskResume+0x26>

		/* The parameter cannot be NULL as it is impossible to resume the
		currently executing task. */
		if( ( pxTCB != pxCurrentTCB ) && ( pxTCB != NULL ) )
 8007f58:	4b20      	ldr	r3, [pc, #128]	; (8007fdc <vTaskResume+0xac>)
 8007f5a:	681b      	ldr	r3, [r3, #0]
 8007f5c:	68fa      	ldr	r2, [r7, #12]
 8007f5e:	429a      	cmp	r2, r3
 8007f60:	d038      	beq.n	8007fd4 <vTaskResume+0xa4>
 8007f62:	68fb      	ldr	r3, [r7, #12]
 8007f64:	2b00      	cmp	r3, #0
 8007f66:	d035      	beq.n	8007fd4 <vTaskResume+0xa4>
		{
			taskENTER_CRITICAL();
 8007f68:	f001 faf4 	bl	8009554 <vPortEnterCritical>
			{
				if( prvTaskIsTaskSuspended( pxTCB ) != pdFALSE )
 8007f6c:	68f8      	ldr	r0, [r7, #12]
 8007f6e:	f7ff ffad 	bl	8007ecc <prvTaskIsTaskSuspended>
 8007f72:	4603      	mov	r3, r0
 8007f74:	2b00      	cmp	r3, #0
 8007f76:	d02b      	beq.n	8007fd0 <vTaskResume+0xa0>
				{
					traceTASK_RESUME( pxTCB );

					/* The ready list can be accessed even if the scheduler is
					suspended because this is inside a critical section. */
					( void ) uxListRemove(  &( pxTCB->xStateListItem ) );
 8007f78:	68fb      	ldr	r3, [r7, #12]
 8007f7a:	3304      	adds	r3, #4
 8007f7c:	4618      	mov	r0, r3
 8007f7e:	f7fe fd81 	bl	8006a84 <uxListRemove>
					prvAddTaskToReadyList( pxTCB );
 8007f82:	68fb      	ldr	r3, [r7, #12]
 8007f84:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8007f86:	4b16      	ldr	r3, [pc, #88]	; (8007fe0 <vTaskResume+0xb0>)
 8007f88:	681b      	ldr	r3, [r3, #0]
 8007f8a:	429a      	cmp	r2, r3
 8007f8c:	d903      	bls.n	8007f96 <vTaskResume+0x66>
 8007f8e:	68fb      	ldr	r3, [r7, #12]
 8007f90:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007f92:	4a13      	ldr	r2, [pc, #76]	; (8007fe0 <vTaskResume+0xb0>)
 8007f94:	6013      	str	r3, [r2, #0]
 8007f96:	68fb      	ldr	r3, [r7, #12]
 8007f98:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8007f9a:	4613      	mov	r3, r2
 8007f9c:	009b      	lsls	r3, r3, #2
 8007f9e:	4413      	add	r3, r2
 8007fa0:	009b      	lsls	r3, r3, #2
 8007fa2:	4a10      	ldr	r2, [pc, #64]	; (8007fe4 <vTaskResume+0xb4>)
 8007fa4:	441a      	add	r2, r3
 8007fa6:	68fb      	ldr	r3, [r7, #12]
 8007fa8:	3304      	adds	r3, #4
 8007faa:	4619      	mov	r1, r3
 8007fac:	4610      	mov	r0, r2
 8007fae:	f7fe fd0c 	bl	80069ca <vListInsertEnd>

					/* A higher priority task may have just been resumed. */
					if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 8007fb2:	68fb      	ldr	r3, [r7, #12]
 8007fb4:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8007fb6:	4b09      	ldr	r3, [pc, #36]	; (8007fdc <vTaskResume+0xac>)
 8007fb8:	681b      	ldr	r3, [r3, #0]
 8007fba:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007fbc:	429a      	cmp	r2, r3
 8007fbe:	d307      	bcc.n	8007fd0 <vTaskResume+0xa0>
					{
						/* This yield may not cause the task just resumed to run,
						but will leave the lists in the correct state for the
						next yield. */
						taskYIELD_IF_USING_PREEMPTION();
 8007fc0:	4b09      	ldr	r3, [pc, #36]	; (8007fe8 <vTaskResume+0xb8>)
 8007fc2:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8007fc6:	601a      	str	r2, [r3, #0]
 8007fc8:	f3bf 8f4f 	dsb	sy
 8007fcc:	f3bf 8f6f 	isb	sy
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}
			}
			taskEXIT_CRITICAL();
 8007fd0:	f001 faf0 	bl	80095b4 <vPortExitCritical>
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
 8007fd4:	bf00      	nop
 8007fd6:	3710      	adds	r7, #16
 8007fd8:	46bd      	mov	sp, r7
 8007fda:	bd80      	pop	{r7, pc}
 8007fdc:	24000d64 	.word	0x24000d64
 8007fe0:	24001240 	.word	0x24001240
 8007fe4:	24000d68 	.word	0x24000d68
 8007fe8:	e000ed04 	.word	0xe000ed04

08007fec <vTaskStartScheduler>:

#endif /* ( ( INCLUDE_xTaskResumeFromISR == 1 ) && ( INCLUDE_vTaskSuspend == 1 ) ) */
/*-----------------------------------------------------------*/

void vTaskStartScheduler( void )
{
 8007fec:	b580      	push	{r7, lr}
 8007fee:	b08a      	sub	sp, #40	; 0x28
 8007ff0:	af04      	add	r7, sp, #16
BaseType_t xReturn;

	/* Add the idle task at the lowest priority. */
	#if( configSUPPORT_STATIC_ALLOCATION == 1 )
	{
		StaticTask_t *pxIdleTaskTCBBuffer = NULL;
 8007ff2:	2300      	movs	r3, #0
 8007ff4:	60bb      	str	r3, [r7, #8]
		StackType_t *pxIdleTaskStackBuffer = NULL;
 8007ff6:	2300      	movs	r3, #0
 8007ff8:	607b      	str	r3, [r7, #4]
		uint32_t ulIdleTaskStackSize;

		/* The Idle task is created using user provided RAM - obtain the
		address of the RAM then create the idle task. */
		vApplicationGetIdleTaskMemory( &pxIdleTaskTCBBuffer, &pxIdleTaskStackBuffer, &ulIdleTaskStackSize );
 8007ffa:	463a      	mov	r2, r7
 8007ffc:	1d39      	adds	r1, r7, #4
 8007ffe:	f107 0308 	add.w	r3, r7, #8
 8008002:	4618      	mov	r0, r3
 8008004:	f7fe fc80 	bl	8006908 <vApplicationGetIdleTaskMemory>
		xIdleTaskHandle = xTaskCreateStatic(	prvIdleTask,
 8008008:	6839      	ldr	r1, [r7, #0]
 800800a:	687b      	ldr	r3, [r7, #4]
 800800c:	68ba      	ldr	r2, [r7, #8]
 800800e:	9202      	str	r2, [sp, #8]
 8008010:	9301      	str	r3, [sp, #4]
 8008012:	2300      	movs	r3, #0
 8008014:	9300      	str	r3, [sp, #0]
 8008016:	2300      	movs	r3, #0
 8008018:	460a      	mov	r2, r1
 800801a:	4924      	ldr	r1, [pc, #144]	; (80080ac <vTaskStartScheduler+0xc0>)
 800801c:	4824      	ldr	r0, [pc, #144]	; (80080b0 <vTaskStartScheduler+0xc4>)
 800801e:	f7ff fd69 	bl	8007af4 <xTaskCreateStatic>
 8008022:	4603      	mov	r3, r0
 8008024:	4a23      	ldr	r2, [pc, #140]	; (80080b4 <vTaskStartScheduler+0xc8>)
 8008026:	6013      	str	r3, [r2, #0]
												( void * ) NULL, /*lint !e961.  The cast is not redundant for all compilers. */
												portPRIVILEGE_BIT, /* In effect ( tskIDLE_PRIORITY | portPRIVILEGE_BIT ), but tskIDLE_PRIORITY is zero. */
												pxIdleTaskStackBuffer,
												pxIdleTaskTCBBuffer ); /*lint !e961 MISRA exception, justified as it is not a redundant explicit cast to all supported compilers. */

		if( xIdleTaskHandle != NULL )
 8008028:	4b22      	ldr	r3, [pc, #136]	; (80080b4 <vTaskStartScheduler+0xc8>)
 800802a:	681b      	ldr	r3, [r3, #0]
 800802c:	2b00      	cmp	r3, #0
 800802e:	d002      	beq.n	8008036 <vTaskStartScheduler+0x4a>
		{
			xReturn = pdPASS;
 8008030:	2301      	movs	r3, #1
 8008032:	617b      	str	r3, [r7, #20]
 8008034:	e001      	b.n	800803a <vTaskStartScheduler+0x4e>
		}
		else
		{
			xReturn = pdFAIL;
 8008036:	2300      	movs	r3, #0
 8008038:	617b      	str	r3, [r7, #20]
	}
	#endif /* configSUPPORT_STATIC_ALLOCATION */

	#if ( configUSE_TIMERS == 1 )
	{
		if( xReturn == pdPASS )
 800803a:	697b      	ldr	r3, [r7, #20]
 800803c:	2b01      	cmp	r3, #1
 800803e:	d102      	bne.n	8008046 <vTaskStartScheduler+0x5a>
		{
			xReturn = xTimerCreateTimerTask();
 8008040:	f000 fe0e 	bl	8008c60 <xTimerCreateTimerTask>
 8008044:	6178      	str	r0, [r7, #20]
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif /* configUSE_TIMERS */

	if( xReturn == pdPASS )
 8008046:	697b      	ldr	r3, [r7, #20]
 8008048:	2b01      	cmp	r3, #1
 800804a:	d11b      	bne.n	8008084 <vTaskStartScheduler+0x98>
	__asm volatile
 800804c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008050:	f383 8811 	msr	BASEPRI, r3
 8008054:	f3bf 8f6f 	isb	sy
 8008058:	f3bf 8f4f 	dsb	sy
 800805c:	613b      	str	r3, [r7, #16]
}
 800805e:	bf00      	nop
		{
			/* Switch Newlib's _impure_ptr variable to point to the _reent
			structure specific to the task that will run first.
			See the third party link http://www.nadler.com/embedded/newlibAndFreeRTOS.html
			for additional information. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
 8008060:	4b15      	ldr	r3, [pc, #84]	; (80080b8 <vTaskStartScheduler+0xcc>)
 8008062:	681b      	ldr	r3, [r3, #0]
 8008064:	3354      	adds	r3, #84	; 0x54
 8008066:	4a15      	ldr	r2, [pc, #84]	; (80080bc <vTaskStartScheduler+0xd0>)
 8008068:	6013      	str	r3, [r2, #0]
		}
		#endif /* configUSE_NEWLIB_REENTRANT */

		xNextTaskUnblockTime = portMAX_DELAY;
 800806a:	4b15      	ldr	r3, [pc, #84]	; (80080c0 <vTaskStartScheduler+0xd4>)
 800806c:	f04f 32ff 	mov.w	r2, #4294967295
 8008070:	601a      	str	r2, [r3, #0]
		xSchedulerRunning = pdTRUE;
 8008072:	4b14      	ldr	r3, [pc, #80]	; (80080c4 <vTaskStartScheduler+0xd8>)
 8008074:	2201      	movs	r2, #1
 8008076:	601a      	str	r2, [r3, #0]
		xTickCount = ( TickType_t ) configINITIAL_TICK_COUNT;
 8008078:	4b13      	ldr	r3, [pc, #76]	; (80080c8 <vTaskStartScheduler+0xdc>)
 800807a:	2200      	movs	r2, #0
 800807c:	601a      	str	r2, [r3, #0]

		traceTASK_SWITCHED_IN();

		/* Setting up the timer tick is hardware specific and thus in the
		portable interface. */
		if( xPortStartScheduler() != pdFALSE )
 800807e:	f001 f9c7 	bl	8009410 <xPortStartScheduler>
	}

	/* Prevent compiler warnings if INCLUDE_xTaskGetIdleTaskHandle is set to 0,
	meaning xIdleTaskHandle is not used anywhere else. */
	( void ) xIdleTaskHandle;
}
 8008082:	e00e      	b.n	80080a2 <vTaskStartScheduler+0xb6>
		configASSERT( xReturn != errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY );
 8008084:	697b      	ldr	r3, [r7, #20]
 8008086:	f1b3 3fff 	cmp.w	r3, #4294967295
 800808a:	d10a      	bne.n	80080a2 <vTaskStartScheduler+0xb6>
	__asm volatile
 800808c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008090:	f383 8811 	msr	BASEPRI, r3
 8008094:	f3bf 8f6f 	isb	sy
 8008098:	f3bf 8f4f 	dsb	sy
 800809c:	60fb      	str	r3, [r7, #12]
}
 800809e:	bf00      	nop
 80080a0:	e7fe      	b.n	80080a0 <vTaskStartScheduler+0xb4>
}
 80080a2:	bf00      	nop
 80080a4:	3718      	adds	r7, #24
 80080a6:	46bd      	mov	sp, r7
 80080a8:	bd80      	pop	{r7, pc}
 80080aa:	bf00      	nop
 80080ac:	0800b048 	.word	0x0800b048
 80080b0:	080086f1 	.word	0x080086f1
 80080b4:	2400125c 	.word	0x2400125c
 80080b8:	24000d64 	.word	0x24000d64
 80080bc:	24000014 	.word	0x24000014
 80080c0:	24001258 	.word	0x24001258
 80080c4:	24001244 	.word	0x24001244
 80080c8:	2400123c 	.word	0x2400123c

080080cc <vTaskSuspendAll>:
	vPortEndScheduler();
}
/*----------------------------------------------------------*/

void vTaskSuspendAll( void )
{
 80080cc:	b480      	push	{r7}
 80080ce:	af00      	add	r7, sp, #0
	do not otherwise exhibit real time behaviour. */
	portSOFTWARE_BARRIER();

	/* The scheduler is suspended if uxSchedulerSuspended is non-zero.  An increment
	is used to allow calls to vTaskSuspendAll() to nest. */
	++uxSchedulerSuspended;
 80080d0:	4b04      	ldr	r3, [pc, #16]	; (80080e4 <vTaskSuspendAll+0x18>)
 80080d2:	681b      	ldr	r3, [r3, #0]
 80080d4:	3301      	adds	r3, #1
 80080d6:	4a03      	ldr	r2, [pc, #12]	; (80080e4 <vTaskSuspendAll+0x18>)
 80080d8:	6013      	str	r3, [r2, #0]

	/* Enforces ordering for ports and optimised compilers that may otherwise place
	the above increment elsewhere. */
	portMEMORY_BARRIER();
}
 80080da:	bf00      	nop
 80080dc:	46bd      	mov	sp, r7
 80080de:	f85d 7b04 	ldr.w	r7, [sp], #4
 80080e2:	4770      	bx	lr
 80080e4:	24001260 	.word	0x24001260

080080e8 <xTaskResumeAll>:

#endif /* configUSE_TICKLESS_IDLE */
/*----------------------------------------------------------*/

BaseType_t xTaskResumeAll( void )
{
 80080e8:	b580      	push	{r7, lr}
 80080ea:	b084      	sub	sp, #16
 80080ec:	af00      	add	r7, sp, #0
TCB_t *pxTCB = NULL;
 80080ee:	2300      	movs	r3, #0
 80080f0:	60fb      	str	r3, [r7, #12]
BaseType_t xAlreadyYielded = pdFALSE;
 80080f2:	2300      	movs	r3, #0
 80080f4:	60bb      	str	r3, [r7, #8]

	/* If uxSchedulerSuspended is zero then this function does not match a
	previous call to vTaskSuspendAll(). */
	configASSERT( uxSchedulerSuspended );
 80080f6:	4b42      	ldr	r3, [pc, #264]	; (8008200 <xTaskResumeAll+0x118>)
 80080f8:	681b      	ldr	r3, [r3, #0]
 80080fa:	2b00      	cmp	r3, #0
 80080fc:	d10a      	bne.n	8008114 <xTaskResumeAll+0x2c>
	__asm volatile
 80080fe:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008102:	f383 8811 	msr	BASEPRI, r3
 8008106:	f3bf 8f6f 	isb	sy
 800810a:	f3bf 8f4f 	dsb	sy
 800810e:	603b      	str	r3, [r7, #0]
}
 8008110:	bf00      	nop
 8008112:	e7fe      	b.n	8008112 <xTaskResumeAll+0x2a>
	/* It is possible that an ISR caused a task to be removed from an event
	list while the scheduler was suspended.  If this was the case then the
	removed task will have been added to the xPendingReadyList.  Once the
	scheduler has been resumed it is safe to move all the pending ready
	tasks from this list into their appropriate ready list. */
	taskENTER_CRITICAL();
 8008114:	f001 fa1e 	bl	8009554 <vPortEnterCritical>
	{
		--uxSchedulerSuspended;
 8008118:	4b39      	ldr	r3, [pc, #228]	; (8008200 <xTaskResumeAll+0x118>)
 800811a:	681b      	ldr	r3, [r3, #0]
 800811c:	3b01      	subs	r3, #1
 800811e:	4a38      	ldr	r2, [pc, #224]	; (8008200 <xTaskResumeAll+0x118>)
 8008120:	6013      	str	r3, [r2, #0]

		if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8008122:	4b37      	ldr	r3, [pc, #220]	; (8008200 <xTaskResumeAll+0x118>)
 8008124:	681b      	ldr	r3, [r3, #0]
 8008126:	2b00      	cmp	r3, #0
 8008128:	d162      	bne.n	80081f0 <xTaskResumeAll+0x108>
		{
			if( uxCurrentNumberOfTasks > ( UBaseType_t ) 0U )
 800812a:	4b36      	ldr	r3, [pc, #216]	; (8008204 <xTaskResumeAll+0x11c>)
 800812c:	681b      	ldr	r3, [r3, #0]
 800812e:	2b00      	cmp	r3, #0
 8008130:	d05e      	beq.n	80081f0 <xTaskResumeAll+0x108>
			{
				/* Move any readied tasks from the pending list into the
				appropriate ready list. */
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 8008132:	e02f      	b.n	8008194 <xTaskResumeAll+0xac>
				{
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xPendingReadyList ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8008134:	4b34      	ldr	r3, [pc, #208]	; (8008208 <xTaskResumeAll+0x120>)
 8008136:	68db      	ldr	r3, [r3, #12]
 8008138:	68db      	ldr	r3, [r3, #12]
 800813a:	60fb      	str	r3, [r7, #12]
					( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 800813c:	68fb      	ldr	r3, [r7, #12]
 800813e:	3318      	adds	r3, #24
 8008140:	4618      	mov	r0, r3
 8008142:	f7fe fc9f 	bl	8006a84 <uxListRemove>
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8008146:	68fb      	ldr	r3, [r7, #12]
 8008148:	3304      	adds	r3, #4
 800814a:	4618      	mov	r0, r3
 800814c:	f7fe fc9a 	bl	8006a84 <uxListRemove>
					prvAddTaskToReadyList( pxTCB );
 8008150:	68fb      	ldr	r3, [r7, #12]
 8008152:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8008154:	4b2d      	ldr	r3, [pc, #180]	; (800820c <xTaskResumeAll+0x124>)
 8008156:	681b      	ldr	r3, [r3, #0]
 8008158:	429a      	cmp	r2, r3
 800815a:	d903      	bls.n	8008164 <xTaskResumeAll+0x7c>
 800815c:	68fb      	ldr	r3, [r7, #12]
 800815e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8008160:	4a2a      	ldr	r2, [pc, #168]	; (800820c <xTaskResumeAll+0x124>)
 8008162:	6013      	str	r3, [r2, #0]
 8008164:	68fb      	ldr	r3, [r7, #12]
 8008166:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8008168:	4613      	mov	r3, r2
 800816a:	009b      	lsls	r3, r3, #2
 800816c:	4413      	add	r3, r2
 800816e:	009b      	lsls	r3, r3, #2
 8008170:	4a27      	ldr	r2, [pc, #156]	; (8008210 <xTaskResumeAll+0x128>)
 8008172:	441a      	add	r2, r3
 8008174:	68fb      	ldr	r3, [r7, #12]
 8008176:	3304      	adds	r3, #4
 8008178:	4619      	mov	r1, r3
 800817a:	4610      	mov	r0, r2
 800817c:	f7fe fc25 	bl	80069ca <vListInsertEnd>

					/* If the moved task has a priority higher than the current
					task then a yield must be performed. */
					if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 8008180:	68fb      	ldr	r3, [r7, #12]
 8008182:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8008184:	4b23      	ldr	r3, [pc, #140]	; (8008214 <xTaskResumeAll+0x12c>)
 8008186:	681b      	ldr	r3, [r3, #0]
 8008188:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800818a:	429a      	cmp	r2, r3
 800818c:	d302      	bcc.n	8008194 <xTaskResumeAll+0xac>
					{
						xYieldPending = pdTRUE;
 800818e:	4b22      	ldr	r3, [pc, #136]	; (8008218 <xTaskResumeAll+0x130>)
 8008190:	2201      	movs	r2, #1
 8008192:	601a      	str	r2, [r3, #0]
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 8008194:	4b1c      	ldr	r3, [pc, #112]	; (8008208 <xTaskResumeAll+0x120>)
 8008196:	681b      	ldr	r3, [r3, #0]
 8008198:	2b00      	cmp	r3, #0
 800819a:	d1cb      	bne.n	8008134 <xTaskResumeAll+0x4c>
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( pxTCB != NULL )
 800819c:	68fb      	ldr	r3, [r7, #12]
 800819e:	2b00      	cmp	r3, #0
 80081a0:	d001      	beq.n	80081a6 <xTaskResumeAll+0xbe>
					which may have prevented the next unblock time from being
					re-calculated, in which case re-calculate it now.  Mainly
					important for low power tickless implementations, where
					this can prevent an unnecessary exit from low power
					state. */
					prvResetNextTaskUnblockTime();
 80081a2:	f000 fb5f 	bl	8008864 <prvResetNextTaskUnblockTime>
				/* If any ticks occurred while the scheduler was suspended then
				they should be processed now.  This ensures the tick count does
				not	slip, and that any delayed tasks are resumed at the correct
				time. */
				{
					TickType_t xPendedCounts = xPendedTicks; /* Non-volatile copy. */
 80081a6:	4b1d      	ldr	r3, [pc, #116]	; (800821c <xTaskResumeAll+0x134>)
 80081a8:	681b      	ldr	r3, [r3, #0]
 80081aa:	607b      	str	r3, [r7, #4]

					if( xPendedCounts > ( TickType_t ) 0U )
 80081ac:	687b      	ldr	r3, [r7, #4]
 80081ae:	2b00      	cmp	r3, #0
 80081b0:	d010      	beq.n	80081d4 <xTaskResumeAll+0xec>
					{
						do
						{
							if( xTaskIncrementTick() != pdFALSE )
 80081b2:	f000 f847 	bl	8008244 <xTaskIncrementTick>
 80081b6:	4603      	mov	r3, r0
 80081b8:	2b00      	cmp	r3, #0
 80081ba:	d002      	beq.n	80081c2 <xTaskResumeAll+0xda>
							{
								xYieldPending = pdTRUE;
 80081bc:	4b16      	ldr	r3, [pc, #88]	; (8008218 <xTaskResumeAll+0x130>)
 80081be:	2201      	movs	r2, #1
 80081c0:	601a      	str	r2, [r3, #0]
							}
							else
							{
								mtCOVERAGE_TEST_MARKER();
							}
							--xPendedCounts;
 80081c2:	687b      	ldr	r3, [r7, #4]
 80081c4:	3b01      	subs	r3, #1
 80081c6:	607b      	str	r3, [r7, #4]
						} while( xPendedCounts > ( TickType_t ) 0U );
 80081c8:	687b      	ldr	r3, [r7, #4]
 80081ca:	2b00      	cmp	r3, #0
 80081cc:	d1f1      	bne.n	80081b2 <xTaskResumeAll+0xca>

						xPendedTicks = 0;
 80081ce:	4b13      	ldr	r3, [pc, #76]	; (800821c <xTaskResumeAll+0x134>)
 80081d0:	2200      	movs	r2, #0
 80081d2:	601a      	str	r2, [r3, #0]
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( xYieldPending != pdFALSE )
 80081d4:	4b10      	ldr	r3, [pc, #64]	; (8008218 <xTaskResumeAll+0x130>)
 80081d6:	681b      	ldr	r3, [r3, #0]
 80081d8:	2b00      	cmp	r3, #0
 80081da:	d009      	beq.n	80081f0 <xTaskResumeAll+0x108>
				{
					#if( configUSE_PREEMPTION != 0 )
					{
						xAlreadyYielded = pdTRUE;
 80081dc:	2301      	movs	r3, #1
 80081de:	60bb      	str	r3, [r7, #8]
					}
					#endif
					taskYIELD_IF_USING_PREEMPTION();
 80081e0:	4b0f      	ldr	r3, [pc, #60]	; (8008220 <xTaskResumeAll+0x138>)
 80081e2:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80081e6:	601a      	str	r2, [r3, #0]
 80081e8:	f3bf 8f4f 	dsb	sy
 80081ec:	f3bf 8f6f 	isb	sy
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 80081f0:	f001 f9e0 	bl	80095b4 <vPortExitCritical>

	return xAlreadyYielded;
 80081f4:	68bb      	ldr	r3, [r7, #8]
}
 80081f6:	4618      	mov	r0, r3
 80081f8:	3710      	adds	r7, #16
 80081fa:	46bd      	mov	sp, r7
 80081fc:	bd80      	pop	{r7, pc}
 80081fe:	bf00      	nop
 8008200:	24001260 	.word	0x24001260
 8008204:	24001238 	.word	0x24001238
 8008208:	240011f8 	.word	0x240011f8
 800820c:	24001240 	.word	0x24001240
 8008210:	24000d68 	.word	0x24000d68
 8008214:	24000d64 	.word	0x24000d64
 8008218:	2400124c 	.word	0x2400124c
 800821c:	24001248 	.word	0x24001248
 8008220:	e000ed04 	.word	0xe000ed04

08008224 <xTaskGetTickCount>:
/*-----------------------------------------------------------*/

TickType_t xTaskGetTickCount( void )
{
 8008224:	b480      	push	{r7}
 8008226:	b083      	sub	sp, #12
 8008228:	af00      	add	r7, sp, #0
TickType_t xTicks;

	/* Critical section required if running on a 16 bit processor. */
	portTICK_TYPE_ENTER_CRITICAL();
	{
		xTicks = xTickCount;
 800822a:	4b05      	ldr	r3, [pc, #20]	; (8008240 <xTaskGetTickCount+0x1c>)
 800822c:	681b      	ldr	r3, [r3, #0]
 800822e:	607b      	str	r3, [r7, #4]
	}
	portTICK_TYPE_EXIT_CRITICAL();

	return xTicks;
 8008230:	687b      	ldr	r3, [r7, #4]
}
 8008232:	4618      	mov	r0, r3
 8008234:	370c      	adds	r7, #12
 8008236:	46bd      	mov	sp, r7
 8008238:	f85d 7b04 	ldr.w	r7, [sp], #4
 800823c:	4770      	bx	lr
 800823e:	bf00      	nop
 8008240:	2400123c 	.word	0x2400123c

08008244 <xTaskIncrementTick>:

#endif /* INCLUDE_xTaskAbortDelay */
/*----------------------------------------------------------*/

BaseType_t xTaskIncrementTick( void )
{
 8008244:	b580      	push	{r7, lr}
 8008246:	b086      	sub	sp, #24
 8008248:	af00      	add	r7, sp, #0
TCB_t * pxTCB;
TickType_t xItemValue;
BaseType_t xSwitchRequired = pdFALSE;
 800824a:	2300      	movs	r3, #0
 800824c:	617b      	str	r3, [r7, #20]

	/* Called by the portable layer each time a tick interrupt occurs.
	Increments the tick then checks to see if the new tick value will cause any
	tasks to be unblocked. */
	traceTASK_INCREMENT_TICK( xTickCount );
	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 800824e:	4b4f      	ldr	r3, [pc, #316]	; (800838c <xTaskIncrementTick+0x148>)
 8008250:	681b      	ldr	r3, [r3, #0]
 8008252:	2b00      	cmp	r3, #0
 8008254:	f040 808f 	bne.w	8008376 <xTaskIncrementTick+0x132>
	{
		/* Minor optimisation.  The tick count cannot change in this
		block. */
		const TickType_t xConstTickCount = xTickCount + ( TickType_t ) 1;
 8008258:	4b4d      	ldr	r3, [pc, #308]	; (8008390 <xTaskIncrementTick+0x14c>)
 800825a:	681b      	ldr	r3, [r3, #0]
 800825c:	3301      	adds	r3, #1
 800825e:	613b      	str	r3, [r7, #16]

		/* Increment the RTOS tick, switching the delayed and overflowed
		delayed lists if it wraps to 0. */
		xTickCount = xConstTickCount;
 8008260:	4a4b      	ldr	r2, [pc, #300]	; (8008390 <xTaskIncrementTick+0x14c>)
 8008262:	693b      	ldr	r3, [r7, #16]
 8008264:	6013      	str	r3, [r2, #0]

		if( xConstTickCount == ( TickType_t ) 0U ) /*lint !e774 'if' does not always evaluate to false as it is looking for an overflow. */
 8008266:	693b      	ldr	r3, [r7, #16]
 8008268:	2b00      	cmp	r3, #0
 800826a:	d120      	bne.n	80082ae <xTaskIncrementTick+0x6a>
		{
			taskSWITCH_DELAYED_LISTS();
 800826c:	4b49      	ldr	r3, [pc, #292]	; (8008394 <xTaskIncrementTick+0x150>)
 800826e:	681b      	ldr	r3, [r3, #0]
 8008270:	681b      	ldr	r3, [r3, #0]
 8008272:	2b00      	cmp	r3, #0
 8008274:	d00a      	beq.n	800828c <xTaskIncrementTick+0x48>
	__asm volatile
 8008276:	f04f 0350 	mov.w	r3, #80	; 0x50
 800827a:	f383 8811 	msr	BASEPRI, r3
 800827e:	f3bf 8f6f 	isb	sy
 8008282:	f3bf 8f4f 	dsb	sy
 8008286:	603b      	str	r3, [r7, #0]
}
 8008288:	bf00      	nop
 800828a:	e7fe      	b.n	800828a <xTaskIncrementTick+0x46>
 800828c:	4b41      	ldr	r3, [pc, #260]	; (8008394 <xTaskIncrementTick+0x150>)
 800828e:	681b      	ldr	r3, [r3, #0]
 8008290:	60fb      	str	r3, [r7, #12]
 8008292:	4b41      	ldr	r3, [pc, #260]	; (8008398 <xTaskIncrementTick+0x154>)
 8008294:	681b      	ldr	r3, [r3, #0]
 8008296:	4a3f      	ldr	r2, [pc, #252]	; (8008394 <xTaskIncrementTick+0x150>)
 8008298:	6013      	str	r3, [r2, #0]
 800829a:	4a3f      	ldr	r2, [pc, #252]	; (8008398 <xTaskIncrementTick+0x154>)
 800829c:	68fb      	ldr	r3, [r7, #12]
 800829e:	6013      	str	r3, [r2, #0]
 80082a0:	4b3e      	ldr	r3, [pc, #248]	; (800839c <xTaskIncrementTick+0x158>)
 80082a2:	681b      	ldr	r3, [r3, #0]
 80082a4:	3301      	adds	r3, #1
 80082a6:	4a3d      	ldr	r2, [pc, #244]	; (800839c <xTaskIncrementTick+0x158>)
 80082a8:	6013      	str	r3, [r2, #0]
 80082aa:	f000 fadb 	bl	8008864 <prvResetNextTaskUnblockTime>

		/* See if this tick has made a timeout expire.  Tasks are stored in
		the	queue in the order of their wake time - meaning once one task
		has been found whose block time has not expired there is no need to
		look any further down the list. */
		if( xConstTickCount >= xNextTaskUnblockTime )
 80082ae:	4b3c      	ldr	r3, [pc, #240]	; (80083a0 <xTaskIncrementTick+0x15c>)
 80082b0:	681b      	ldr	r3, [r3, #0]
 80082b2:	693a      	ldr	r2, [r7, #16]
 80082b4:	429a      	cmp	r2, r3
 80082b6:	d349      	bcc.n	800834c <xTaskIncrementTick+0x108>
		{
			for( ;; )
			{
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 80082b8:	4b36      	ldr	r3, [pc, #216]	; (8008394 <xTaskIncrementTick+0x150>)
 80082ba:	681b      	ldr	r3, [r3, #0]
 80082bc:	681b      	ldr	r3, [r3, #0]
 80082be:	2b00      	cmp	r3, #0
 80082c0:	d104      	bne.n	80082cc <xTaskIncrementTick+0x88>
					/* The delayed list is empty.  Set xNextTaskUnblockTime
					to the maximum possible value so it is extremely
					unlikely that the
					if( xTickCount >= xNextTaskUnblockTime ) test will pass
					next time through. */
					xNextTaskUnblockTime = portMAX_DELAY; /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 80082c2:	4b37      	ldr	r3, [pc, #220]	; (80083a0 <xTaskIncrementTick+0x15c>)
 80082c4:	f04f 32ff 	mov.w	r2, #4294967295
 80082c8:	601a      	str	r2, [r3, #0]
					break;
 80082ca:	e03f      	b.n	800834c <xTaskIncrementTick+0x108>
				{
					/* The delayed list is not empty, get the value of the
					item at the head of the delayed list.  This is the time
					at which the task at the head of the delayed list must
					be removed from the Blocked state. */
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 80082cc:	4b31      	ldr	r3, [pc, #196]	; (8008394 <xTaskIncrementTick+0x150>)
 80082ce:	681b      	ldr	r3, [r3, #0]
 80082d0:	68db      	ldr	r3, [r3, #12]
 80082d2:	68db      	ldr	r3, [r3, #12]
 80082d4:	60bb      	str	r3, [r7, #8]
					xItemValue = listGET_LIST_ITEM_VALUE( &( pxTCB->xStateListItem ) );
 80082d6:	68bb      	ldr	r3, [r7, #8]
 80082d8:	685b      	ldr	r3, [r3, #4]
 80082da:	607b      	str	r3, [r7, #4]

					if( xConstTickCount < xItemValue )
 80082dc:	693a      	ldr	r2, [r7, #16]
 80082de:	687b      	ldr	r3, [r7, #4]
 80082e0:	429a      	cmp	r2, r3
 80082e2:	d203      	bcs.n	80082ec <xTaskIncrementTick+0xa8>
						/* It is not time to unblock this item yet, but the
						item value is the time at which the task at the head
						of the blocked list must be removed from the Blocked
						state -	so record the item value in
						xNextTaskUnblockTime. */
						xNextTaskUnblockTime = xItemValue;
 80082e4:	4a2e      	ldr	r2, [pc, #184]	; (80083a0 <xTaskIncrementTick+0x15c>)
 80082e6:	687b      	ldr	r3, [r7, #4]
 80082e8:	6013      	str	r3, [r2, #0]
						break; /*lint !e9011 Code structure here is deedmed easier to understand with multiple breaks. */
 80082ea:	e02f      	b.n	800834c <xTaskIncrementTick+0x108>
					{
						mtCOVERAGE_TEST_MARKER();
					}

					/* It is time to remove the item from the Blocked state. */
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 80082ec:	68bb      	ldr	r3, [r7, #8]
 80082ee:	3304      	adds	r3, #4
 80082f0:	4618      	mov	r0, r3
 80082f2:	f7fe fbc7 	bl	8006a84 <uxListRemove>

					/* Is the task waiting on an event also?  If so remove
					it from the event list. */
					if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
 80082f6:	68bb      	ldr	r3, [r7, #8]
 80082f8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80082fa:	2b00      	cmp	r3, #0
 80082fc:	d004      	beq.n	8008308 <xTaskIncrementTick+0xc4>
					{
						( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 80082fe:	68bb      	ldr	r3, [r7, #8]
 8008300:	3318      	adds	r3, #24
 8008302:	4618      	mov	r0, r3
 8008304:	f7fe fbbe 	bl	8006a84 <uxListRemove>
						mtCOVERAGE_TEST_MARKER();
					}

					/* Place the unblocked task into the appropriate ready
					list. */
					prvAddTaskToReadyList( pxTCB );
 8008308:	68bb      	ldr	r3, [r7, #8]
 800830a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800830c:	4b25      	ldr	r3, [pc, #148]	; (80083a4 <xTaskIncrementTick+0x160>)
 800830e:	681b      	ldr	r3, [r3, #0]
 8008310:	429a      	cmp	r2, r3
 8008312:	d903      	bls.n	800831c <xTaskIncrementTick+0xd8>
 8008314:	68bb      	ldr	r3, [r7, #8]
 8008316:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8008318:	4a22      	ldr	r2, [pc, #136]	; (80083a4 <xTaskIncrementTick+0x160>)
 800831a:	6013      	str	r3, [r2, #0]
 800831c:	68bb      	ldr	r3, [r7, #8]
 800831e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8008320:	4613      	mov	r3, r2
 8008322:	009b      	lsls	r3, r3, #2
 8008324:	4413      	add	r3, r2
 8008326:	009b      	lsls	r3, r3, #2
 8008328:	4a1f      	ldr	r2, [pc, #124]	; (80083a8 <xTaskIncrementTick+0x164>)
 800832a:	441a      	add	r2, r3
 800832c:	68bb      	ldr	r3, [r7, #8]
 800832e:	3304      	adds	r3, #4
 8008330:	4619      	mov	r1, r3
 8008332:	4610      	mov	r0, r2
 8008334:	f7fe fb49 	bl	80069ca <vListInsertEnd>
					{
						/* Preemption is on, but a context switch should
						only be performed if the unblocked task has a
						priority that is equal to or higher than the
						currently executing task. */
						if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 8008338:	68bb      	ldr	r3, [r7, #8]
 800833a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800833c:	4b1b      	ldr	r3, [pc, #108]	; (80083ac <xTaskIncrementTick+0x168>)
 800833e:	681b      	ldr	r3, [r3, #0]
 8008340:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8008342:	429a      	cmp	r2, r3
 8008344:	d3b8      	bcc.n	80082b8 <xTaskIncrementTick+0x74>
						{
							xSwitchRequired = pdTRUE;
 8008346:	2301      	movs	r3, #1
 8008348:	617b      	str	r3, [r7, #20]
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 800834a:	e7b5      	b.n	80082b8 <xTaskIncrementTick+0x74>
		/* Tasks of equal priority to the currently running task will share
		processing time (time slice) if preemption is on, and the application
		writer has not explicitly turned time slicing off. */
		#if ( ( configUSE_PREEMPTION == 1 ) && ( configUSE_TIME_SLICING == 1 ) )
		{
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ pxCurrentTCB->uxPriority ] ) ) > ( UBaseType_t ) 1 )
 800834c:	4b17      	ldr	r3, [pc, #92]	; (80083ac <xTaskIncrementTick+0x168>)
 800834e:	681b      	ldr	r3, [r3, #0]
 8008350:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8008352:	4915      	ldr	r1, [pc, #84]	; (80083a8 <xTaskIncrementTick+0x164>)
 8008354:	4613      	mov	r3, r2
 8008356:	009b      	lsls	r3, r3, #2
 8008358:	4413      	add	r3, r2
 800835a:	009b      	lsls	r3, r3, #2
 800835c:	440b      	add	r3, r1
 800835e:	681b      	ldr	r3, [r3, #0]
 8008360:	2b01      	cmp	r3, #1
 8008362:	d901      	bls.n	8008368 <xTaskIncrementTick+0x124>
			{
				xSwitchRequired = pdTRUE;
 8008364:	2301      	movs	r3, #1
 8008366:	617b      	str	r3, [r7, #20]
		}
		#endif /* configUSE_TICK_HOOK */

		#if ( configUSE_PREEMPTION == 1 )
		{
			if( xYieldPending != pdFALSE )
 8008368:	4b11      	ldr	r3, [pc, #68]	; (80083b0 <xTaskIncrementTick+0x16c>)
 800836a:	681b      	ldr	r3, [r3, #0]
 800836c:	2b00      	cmp	r3, #0
 800836e:	d007      	beq.n	8008380 <xTaskIncrementTick+0x13c>
			{
				xSwitchRequired = pdTRUE;
 8008370:	2301      	movs	r3, #1
 8008372:	617b      	str	r3, [r7, #20]
 8008374:	e004      	b.n	8008380 <xTaskIncrementTick+0x13c>
		}
		#endif /* configUSE_PREEMPTION */
	}
	else
	{
		++xPendedTicks;
 8008376:	4b0f      	ldr	r3, [pc, #60]	; (80083b4 <xTaskIncrementTick+0x170>)
 8008378:	681b      	ldr	r3, [r3, #0]
 800837a:	3301      	adds	r3, #1
 800837c:	4a0d      	ldr	r2, [pc, #52]	; (80083b4 <xTaskIncrementTick+0x170>)
 800837e:	6013      	str	r3, [r2, #0]
			vApplicationTickHook();
		}
		#endif
	}

	return xSwitchRequired;
 8008380:	697b      	ldr	r3, [r7, #20]
}
 8008382:	4618      	mov	r0, r3
 8008384:	3718      	adds	r7, #24
 8008386:	46bd      	mov	sp, r7
 8008388:	bd80      	pop	{r7, pc}
 800838a:	bf00      	nop
 800838c:	24001260 	.word	0x24001260
 8008390:	2400123c 	.word	0x2400123c
 8008394:	240011f0 	.word	0x240011f0
 8008398:	240011f4 	.word	0x240011f4
 800839c:	24001250 	.word	0x24001250
 80083a0:	24001258 	.word	0x24001258
 80083a4:	24001240 	.word	0x24001240
 80083a8:	24000d68 	.word	0x24000d68
 80083ac:	24000d64 	.word	0x24000d64
 80083b0:	2400124c 	.word	0x2400124c
 80083b4:	24001248 	.word	0x24001248

080083b8 <vTaskSwitchContext>:

#endif /* configUSE_APPLICATION_TASK_TAG */
/*-----------------------------------------------------------*/

void vTaskSwitchContext( void )
{
 80083b8:	b480      	push	{r7}
 80083ba:	b085      	sub	sp, #20
 80083bc:	af00      	add	r7, sp, #0
	if( uxSchedulerSuspended != ( UBaseType_t ) pdFALSE )
 80083be:	4b2a      	ldr	r3, [pc, #168]	; (8008468 <vTaskSwitchContext+0xb0>)
 80083c0:	681b      	ldr	r3, [r3, #0]
 80083c2:	2b00      	cmp	r3, #0
 80083c4:	d003      	beq.n	80083ce <vTaskSwitchContext+0x16>
	{
		/* The scheduler is currently suspended - do not allow a context
		switch. */
		xYieldPending = pdTRUE;
 80083c6:	4b29      	ldr	r3, [pc, #164]	; (800846c <vTaskSwitchContext+0xb4>)
 80083c8:	2201      	movs	r2, #1
 80083ca:	601a      	str	r2, [r3, #0]
			for additional information. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */
	}
}
 80083cc:	e046      	b.n	800845c <vTaskSwitchContext+0xa4>
		xYieldPending = pdFALSE;
 80083ce:	4b27      	ldr	r3, [pc, #156]	; (800846c <vTaskSwitchContext+0xb4>)
 80083d0:	2200      	movs	r2, #0
 80083d2:	601a      	str	r2, [r3, #0]
		taskSELECT_HIGHEST_PRIORITY_TASK(); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 80083d4:	4b26      	ldr	r3, [pc, #152]	; (8008470 <vTaskSwitchContext+0xb8>)
 80083d6:	681b      	ldr	r3, [r3, #0]
 80083d8:	60fb      	str	r3, [r7, #12]
 80083da:	e010      	b.n	80083fe <vTaskSwitchContext+0x46>
 80083dc:	68fb      	ldr	r3, [r7, #12]
 80083de:	2b00      	cmp	r3, #0
 80083e0:	d10a      	bne.n	80083f8 <vTaskSwitchContext+0x40>
	__asm volatile
 80083e2:	f04f 0350 	mov.w	r3, #80	; 0x50
 80083e6:	f383 8811 	msr	BASEPRI, r3
 80083ea:	f3bf 8f6f 	isb	sy
 80083ee:	f3bf 8f4f 	dsb	sy
 80083f2:	607b      	str	r3, [r7, #4]
}
 80083f4:	bf00      	nop
 80083f6:	e7fe      	b.n	80083f6 <vTaskSwitchContext+0x3e>
 80083f8:	68fb      	ldr	r3, [r7, #12]
 80083fa:	3b01      	subs	r3, #1
 80083fc:	60fb      	str	r3, [r7, #12]
 80083fe:	491d      	ldr	r1, [pc, #116]	; (8008474 <vTaskSwitchContext+0xbc>)
 8008400:	68fa      	ldr	r2, [r7, #12]
 8008402:	4613      	mov	r3, r2
 8008404:	009b      	lsls	r3, r3, #2
 8008406:	4413      	add	r3, r2
 8008408:	009b      	lsls	r3, r3, #2
 800840a:	440b      	add	r3, r1
 800840c:	681b      	ldr	r3, [r3, #0]
 800840e:	2b00      	cmp	r3, #0
 8008410:	d0e4      	beq.n	80083dc <vTaskSwitchContext+0x24>
 8008412:	68fa      	ldr	r2, [r7, #12]
 8008414:	4613      	mov	r3, r2
 8008416:	009b      	lsls	r3, r3, #2
 8008418:	4413      	add	r3, r2
 800841a:	009b      	lsls	r3, r3, #2
 800841c:	4a15      	ldr	r2, [pc, #84]	; (8008474 <vTaskSwitchContext+0xbc>)
 800841e:	4413      	add	r3, r2
 8008420:	60bb      	str	r3, [r7, #8]
 8008422:	68bb      	ldr	r3, [r7, #8]
 8008424:	685b      	ldr	r3, [r3, #4]
 8008426:	685a      	ldr	r2, [r3, #4]
 8008428:	68bb      	ldr	r3, [r7, #8]
 800842a:	605a      	str	r2, [r3, #4]
 800842c:	68bb      	ldr	r3, [r7, #8]
 800842e:	685a      	ldr	r2, [r3, #4]
 8008430:	68bb      	ldr	r3, [r7, #8]
 8008432:	3308      	adds	r3, #8
 8008434:	429a      	cmp	r2, r3
 8008436:	d104      	bne.n	8008442 <vTaskSwitchContext+0x8a>
 8008438:	68bb      	ldr	r3, [r7, #8]
 800843a:	685b      	ldr	r3, [r3, #4]
 800843c:	685a      	ldr	r2, [r3, #4]
 800843e:	68bb      	ldr	r3, [r7, #8]
 8008440:	605a      	str	r2, [r3, #4]
 8008442:	68bb      	ldr	r3, [r7, #8]
 8008444:	685b      	ldr	r3, [r3, #4]
 8008446:	68db      	ldr	r3, [r3, #12]
 8008448:	4a0b      	ldr	r2, [pc, #44]	; (8008478 <vTaskSwitchContext+0xc0>)
 800844a:	6013      	str	r3, [r2, #0]
 800844c:	4a08      	ldr	r2, [pc, #32]	; (8008470 <vTaskSwitchContext+0xb8>)
 800844e:	68fb      	ldr	r3, [r7, #12]
 8008450:	6013      	str	r3, [r2, #0]
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
 8008452:	4b09      	ldr	r3, [pc, #36]	; (8008478 <vTaskSwitchContext+0xc0>)
 8008454:	681b      	ldr	r3, [r3, #0]
 8008456:	3354      	adds	r3, #84	; 0x54
 8008458:	4a08      	ldr	r2, [pc, #32]	; (800847c <vTaskSwitchContext+0xc4>)
 800845a:	6013      	str	r3, [r2, #0]
}
 800845c:	bf00      	nop
 800845e:	3714      	adds	r7, #20
 8008460:	46bd      	mov	sp, r7
 8008462:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008466:	4770      	bx	lr
 8008468:	24001260 	.word	0x24001260
 800846c:	2400124c 	.word	0x2400124c
 8008470:	24001240 	.word	0x24001240
 8008474:	24000d68 	.word	0x24000d68
 8008478:	24000d64 	.word	0x24000d64
 800847c:	24000014 	.word	0x24000014

08008480 <vTaskPlaceOnEventList>:
/*-----------------------------------------------------------*/

void vTaskPlaceOnEventList( List_t * const pxEventList, const TickType_t xTicksToWait )
{
 8008480:	b580      	push	{r7, lr}
 8008482:	b084      	sub	sp, #16
 8008484:	af00      	add	r7, sp, #0
 8008486:	6078      	str	r0, [r7, #4]
 8008488:	6039      	str	r1, [r7, #0]
	configASSERT( pxEventList );
 800848a:	687b      	ldr	r3, [r7, #4]
 800848c:	2b00      	cmp	r3, #0
 800848e:	d10a      	bne.n	80084a6 <vTaskPlaceOnEventList+0x26>
	__asm volatile
 8008490:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008494:	f383 8811 	msr	BASEPRI, r3
 8008498:	f3bf 8f6f 	isb	sy
 800849c:	f3bf 8f4f 	dsb	sy
 80084a0:	60fb      	str	r3, [r7, #12]
}
 80084a2:	bf00      	nop
 80084a4:	e7fe      	b.n	80084a4 <vTaskPlaceOnEventList+0x24>

	/* Place the event list item of the TCB in the appropriate event list.
	This is placed in the list in priority order so the highest priority task
	is the first to be woken by the event.  The queue that contains the event
	list is locked, preventing simultaneous access from interrupts. */
	vListInsert( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 80084a6:	4b07      	ldr	r3, [pc, #28]	; (80084c4 <vTaskPlaceOnEventList+0x44>)
 80084a8:	681b      	ldr	r3, [r3, #0]
 80084aa:	3318      	adds	r3, #24
 80084ac:	4619      	mov	r1, r3
 80084ae:	6878      	ldr	r0, [r7, #4]
 80084b0:	f7fe faaf 	bl	8006a12 <vListInsert>

	prvAddCurrentTaskToDelayedList( xTicksToWait, pdTRUE );
 80084b4:	2101      	movs	r1, #1
 80084b6:	6838      	ldr	r0, [r7, #0]
 80084b8:	f000 fb7e 	bl	8008bb8 <prvAddCurrentTaskToDelayedList>
}
 80084bc:	bf00      	nop
 80084be:	3710      	adds	r7, #16
 80084c0:	46bd      	mov	sp, r7
 80084c2:	bd80      	pop	{r7, pc}
 80084c4:	24000d64 	.word	0x24000d64

080084c8 <vTaskPlaceOnEventListRestricted>:
/*-----------------------------------------------------------*/

#if( configUSE_TIMERS == 1 )

	void vTaskPlaceOnEventListRestricted( List_t * const pxEventList, TickType_t xTicksToWait, const BaseType_t xWaitIndefinitely )
	{
 80084c8:	b580      	push	{r7, lr}
 80084ca:	b086      	sub	sp, #24
 80084cc:	af00      	add	r7, sp, #0
 80084ce:	60f8      	str	r0, [r7, #12]
 80084d0:	60b9      	str	r1, [r7, #8]
 80084d2:	607a      	str	r2, [r7, #4]
		configASSERT( pxEventList );
 80084d4:	68fb      	ldr	r3, [r7, #12]
 80084d6:	2b00      	cmp	r3, #0
 80084d8:	d10a      	bne.n	80084f0 <vTaskPlaceOnEventListRestricted+0x28>
	__asm volatile
 80084da:	f04f 0350 	mov.w	r3, #80	; 0x50
 80084de:	f383 8811 	msr	BASEPRI, r3
 80084e2:	f3bf 8f6f 	isb	sy
 80084e6:	f3bf 8f4f 	dsb	sy
 80084ea:	617b      	str	r3, [r7, #20]
}
 80084ec:	bf00      	nop
 80084ee:	e7fe      	b.n	80084ee <vTaskPlaceOnEventListRestricted+0x26>

		/* Place the event list item of the TCB in the appropriate event list.
		In this case it is assume that this is the only task that is going to
		be waiting on this event list, so the faster vListInsertEnd() function
		can be used in place of vListInsert. */
		vListInsertEnd( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 80084f0:	4b0a      	ldr	r3, [pc, #40]	; (800851c <vTaskPlaceOnEventListRestricted+0x54>)
 80084f2:	681b      	ldr	r3, [r3, #0]
 80084f4:	3318      	adds	r3, #24
 80084f6:	4619      	mov	r1, r3
 80084f8:	68f8      	ldr	r0, [r7, #12]
 80084fa:	f7fe fa66 	bl	80069ca <vListInsertEnd>

		/* If the task should block indefinitely then set the block time to a
		value that will be recognised as an indefinite delay inside the
		prvAddCurrentTaskToDelayedList() function. */
		if( xWaitIndefinitely != pdFALSE )
 80084fe:	687b      	ldr	r3, [r7, #4]
 8008500:	2b00      	cmp	r3, #0
 8008502:	d002      	beq.n	800850a <vTaskPlaceOnEventListRestricted+0x42>
		{
			xTicksToWait = portMAX_DELAY;
 8008504:	f04f 33ff 	mov.w	r3, #4294967295
 8008508:	60bb      	str	r3, [r7, #8]
		}

		traceTASK_DELAY_UNTIL( ( xTickCount + xTicksToWait ) );
		prvAddCurrentTaskToDelayedList( xTicksToWait, xWaitIndefinitely );
 800850a:	6879      	ldr	r1, [r7, #4]
 800850c:	68b8      	ldr	r0, [r7, #8]
 800850e:	f000 fb53 	bl	8008bb8 <prvAddCurrentTaskToDelayedList>
	}
 8008512:	bf00      	nop
 8008514:	3718      	adds	r7, #24
 8008516:	46bd      	mov	sp, r7
 8008518:	bd80      	pop	{r7, pc}
 800851a:	bf00      	nop
 800851c:	24000d64 	.word	0x24000d64

08008520 <xTaskRemoveFromEventList>:

#endif /* configUSE_TIMERS */
/*-----------------------------------------------------------*/

BaseType_t xTaskRemoveFromEventList( const List_t * const pxEventList )
{
 8008520:	b580      	push	{r7, lr}
 8008522:	b086      	sub	sp, #24
 8008524:	af00      	add	r7, sp, #0
 8008526:	6078      	str	r0, [r7, #4]
	get called - the lock count on the queue will get modified instead.  This
	means exclusive access to the event list is guaranteed here.

	This function assumes that a check has already been made to ensure that
	pxEventList is not empty. */
	pxUnblockedTCB = listGET_OWNER_OF_HEAD_ENTRY( pxEventList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8008528:	687b      	ldr	r3, [r7, #4]
 800852a:	68db      	ldr	r3, [r3, #12]
 800852c:	68db      	ldr	r3, [r3, #12]
 800852e:	613b      	str	r3, [r7, #16]
	configASSERT( pxUnblockedTCB );
 8008530:	693b      	ldr	r3, [r7, #16]
 8008532:	2b00      	cmp	r3, #0
 8008534:	d10a      	bne.n	800854c <xTaskRemoveFromEventList+0x2c>
	__asm volatile
 8008536:	f04f 0350 	mov.w	r3, #80	; 0x50
 800853a:	f383 8811 	msr	BASEPRI, r3
 800853e:	f3bf 8f6f 	isb	sy
 8008542:	f3bf 8f4f 	dsb	sy
 8008546:	60fb      	str	r3, [r7, #12]
}
 8008548:	bf00      	nop
 800854a:	e7fe      	b.n	800854a <xTaskRemoveFromEventList+0x2a>
	( void ) uxListRemove( &( pxUnblockedTCB->xEventListItem ) );
 800854c:	693b      	ldr	r3, [r7, #16]
 800854e:	3318      	adds	r3, #24
 8008550:	4618      	mov	r0, r3
 8008552:	f7fe fa97 	bl	8006a84 <uxListRemove>

	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8008556:	4b1e      	ldr	r3, [pc, #120]	; (80085d0 <xTaskRemoveFromEventList+0xb0>)
 8008558:	681b      	ldr	r3, [r3, #0]
 800855a:	2b00      	cmp	r3, #0
 800855c:	d11d      	bne.n	800859a <xTaskRemoveFromEventList+0x7a>
	{
		( void ) uxListRemove( &( pxUnblockedTCB->xStateListItem ) );
 800855e:	693b      	ldr	r3, [r7, #16]
 8008560:	3304      	adds	r3, #4
 8008562:	4618      	mov	r0, r3
 8008564:	f7fe fa8e 	bl	8006a84 <uxListRemove>
		prvAddTaskToReadyList( pxUnblockedTCB );
 8008568:	693b      	ldr	r3, [r7, #16]
 800856a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800856c:	4b19      	ldr	r3, [pc, #100]	; (80085d4 <xTaskRemoveFromEventList+0xb4>)
 800856e:	681b      	ldr	r3, [r3, #0]
 8008570:	429a      	cmp	r2, r3
 8008572:	d903      	bls.n	800857c <xTaskRemoveFromEventList+0x5c>
 8008574:	693b      	ldr	r3, [r7, #16]
 8008576:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8008578:	4a16      	ldr	r2, [pc, #88]	; (80085d4 <xTaskRemoveFromEventList+0xb4>)
 800857a:	6013      	str	r3, [r2, #0]
 800857c:	693b      	ldr	r3, [r7, #16]
 800857e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8008580:	4613      	mov	r3, r2
 8008582:	009b      	lsls	r3, r3, #2
 8008584:	4413      	add	r3, r2
 8008586:	009b      	lsls	r3, r3, #2
 8008588:	4a13      	ldr	r2, [pc, #76]	; (80085d8 <xTaskRemoveFromEventList+0xb8>)
 800858a:	441a      	add	r2, r3
 800858c:	693b      	ldr	r3, [r7, #16]
 800858e:	3304      	adds	r3, #4
 8008590:	4619      	mov	r1, r3
 8008592:	4610      	mov	r0, r2
 8008594:	f7fe fa19 	bl	80069ca <vListInsertEnd>
 8008598:	e005      	b.n	80085a6 <xTaskRemoveFromEventList+0x86>
	}
	else
	{
		/* The delayed and ready lists cannot be accessed, so hold this task
		pending until the scheduler is resumed. */
		vListInsertEnd( &( xPendingReadyList ), &( pxUnblockedTCB->xEventListItem ) );
 800859a:	693b      	ldr	r3, [r7, #16]
 800859c:	3318      	adds	r3, #24
 800859e:	4619      	mov	r1, r3
 80085a0:	480e      	ldr	r0, [pc, #56]	; (80085dc <xTaskRemoveFromEventList+0xbc>)
 80085a2:	f7fe fa12 	bl	80069ca <vListInsertEnd>
	}

	if( pxUnblockedTCB->uxPriority > pxCurrentTCB->uxPriority )
 80085a6:	693b      	ldr	r3, [r7, #16]
 80085a8:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80085aa:	4b0d      	ldr	r3, [pc, #52]	; (80085e0 <xTaskRemoveFromEventList+0xc0>)
 80085ac:	681b      	ldr	r3, [r3, #0]
 80085ae:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80085b0:	429a      	cmp	r2, r3
 80085b2:	d905      	bls.n	80085c0 <xTaskRemoveFromEventList+0xa0>
	{
		/* Return true if the task removed from the event list has a higher
		priority than the calling task.  This allows the calling task to know if
		it should force a context switch now. */
		xReturn = pdTRUE;
 80085b4:	2301      	movs	r3, #1
 80085b6:	617b      	str	r3, [r7, #20]

		/* Mark that a yield is pending in case the user is not using the
		"xHigherPriorityTaskWoken" parameter to an ISR safe FreeRTOS function. */
		xYieldPending = pdTRUE;
 80085b8:	4b0a      	ldr	r3, [pc, #40]	; (80085e4 <xTaskRemoveFromEventList+0xc4>)
 80085ba:	2201      	movs	r2, #1
 80085bc:	601a      	str	r2, [r3, #0]
 80085be:	e001      	b.n	80085c4 <xTaskRemoveFromEventList+0xa4>
	}
	else
	{
		xReturn = pdFALSE;
 80085c0:	2300      	movs	r3, #0
 80085c2:	617b      	str	r3, [r7, #20]
	}

	return xReturn;
 80085c4:	697b      	ldr	r3, [r7, #20]
}
 80085c6:	4618      	mov	r0, r3
 80085c8:	3718      	adds	r7, #24
 80085ca:	46bd      	mov	sp, r7
 80085cc:	bd80      	pop	{r7, pc}
 80085ce:	bf00      	nop
 80085d0:	24001260 	.word	0x24001260
 80085d4:	24001240 	.word	0x24001240
 80085d8:	24000d68 	.word	0x24000d68
 80085dc:	240011f8 	.word	0x240011f8
 80085e0:	24000d64 	.word	0x24000d64
 80085e4:	2400124c 	.word	0x2400124c

080085e8 <vTaskInternalSetTimeOutState>:
	taskEXIT_CRITICAL();
}
/*-----------------------------------------------------------*/

void vTaskInternalSetTimeOutState( TimeOut_t * const pxTimeOut )
{
 80085e8:	b480      	push	{r7}
 80085ea:	b083      	sub	sp, #12
 80085ec:	af00      	add	r7, sp, #0
 80085ee:	6078      	str	r0, [r7, #4]
	/* For internal use only as it does not use a critical section. */
	pxTimeOut->xOverflowCount = xNumOfOverflows;
 80085f0:	4b06      	ldr	r3, [pc, #24]	; (800860c <vTaskInternalSetTimeOutState+0x24>)
 80085f2:	681a      	ldr	r2, [r3, #0]
 80085f4:	687b      	ldr	r3, [r7, #4]
 80085f6:	601a      	str	r2, [r3, #0]
	pxTimeOut->xTimeOnEntering = xTickCount;
 80085f8:	4b05      	ldr	r3, [pc, #20]	; (8008610 <vTaskInternalSetTimeOutState+0x28>)
 80085fa:	681a      	ldr	r2, [r3, #0]
 80085fc:	687b      	ldr	r3, [r7, #4]
 80085fe:	605a      	str	r2, [r3, #4]
}
 8008600:	bf00      	nop
 8008602:	370c      	adds	r7, #12
 8008604:	46bd      	mov	sp, r7
 8008606:	f85d 7b04 	ldr.w	r7, [sp], #4
 800860a:	4770      	bx	lr
 800860c:	24001250 	.word	0x24001250
 8008610:	2400123c 	.word	0x2400123c

08008614 <xTaskCheckForTimeOut>:
/*-----------------------------------------------------------*/

BaseType_t xTaskCheckForTimeOut( TimeOut_t * const pxTimeOut, TickType_t * const pxTicksToWait )
{
 8008614:	b580      	push	{r7, lr}
 8008616:	b088      	sub	sp, #32
 8008618:	af00      	add	r7, sp, #0
 800861a:	6078      	str	r0, [r7, #4]
 800861c:	6039      	str	r1, [r7, #0]
BaseType_t xReturn;

	configASSERT( pxTimeOut );
 800861e:	687b      	ldr	r3, [r7, #4]
 8008620:	2b00      	cmp	r3, #0
 8008622:	d10a      	bne.n	800863a <xTaskCheckForTimeOut+0x26>
	__asm volatile
 8008624:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008628:	f383 8811 	msr	BASEPRI, r3
 800862c:	f3bf 8f6f 	isb	sy
 8008630:	f3bf 8f4f 	dsb	sy
 8008634:	613b      	str	r3, [r7, #16]
}
 8008636:	bf00      	nop
 8008638:	e7fe      	b.n	8008638 <xTaskCheckForTimeOut+0x24>
	configASSERT( pxTicksToWait );
 800863a:	683b      	ldr	r3, [r7, #0]
 800863c:	2b00      	cmp	r3, #0
 800863e:	d10a      	bne.n	8008656 <xTaskCheckForTimeOut+0x42>
	__asm volatile
 8008640:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008644:	f383 8811 	msr	BASEPRI, r3
 8008648:	f3bf 8f6f 	isb	sy
 800864c:	f3bf 8f4f 	dsb	sy
 8008650:	60fb      	str	r3, [r7, #12]
}
 8008652:	bf00      	nop
 8008654:	e7fe      	b.n	8008654 <xTaskCheckForTimeOut+0x40>

	taskENTER_CRITICAL();
 8008656:	f000 ff7d 	bl	8009554 <vPortEnterCritical>
	{
		/* Minor optimisation.  The tick count cannot change in this block. */
		const TickType_t xConstTickCount = xTickCount;
 800865a:	4b1d      	ldr	r3, [pc, #116]	; (80086d0 <xTaskCheckForTimeOut+0xbc>)
 800865c:	681b      	ldr	r3, [r3, #0]
 800865e:	61bb      	str	r3, [r7, #24]
		const TickType_t xElapsedTime = xConstTickCount - pxTimeOut->xTimeOnEntering;
 8008660:	687b      	ldr	r3, [r7, #4]
 8008662:	685b      	ldr	r3, [r3, #4]
 8008664:	69ba      	ldr	r2, [r7, #24]
 8008666:	1ad3      	subs	r3, r2, r3
 8008668:	617b      	str	r3, [r7, #20]
			}
			else
		#endif

		#if ( INCLUDE_vTaskSuspend == 1 )
			if( *pxTicksToWait == portMAX_DELAY )
 800866a:	683b      	ldr	r3, [r7, #0]
 800866c:	681b      	ldr	r3, [r3, #0]
 800866e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8008672:	d102      	bne.n	800867a <xTaskCheckForTimeOut+0x66>
			{
				/* If INCLUDE_vTaskSuspend is set to 1 and the block time
				specified is the maximum block time then the task should block
				indefinitely, and therefore never time out. */
				xReturn = pdFALSE;
 8008674:	2300      	movs	r3, #0
 8008676:	61fb      	str	r3, [r7, #28]
 8008678:	e023      	b.n	80086c2 <xTaskCheckForTimeOut+0xae>
			}
			else
		#endif

		if( ( xNumOfOverflows != pxTimeOut->xOverflowCount ) && ( xConstTickCount >= pxTimeOut->xTimeOnEntering ) ) /*lint !e525 Indentation preferred as is to make code within pre-processor directives clearer. */
 800867a:	687b      	ldr	r3, [r7, #4]
 800867c:	681a      	ldr	r2, [r3, #0]
 800867e:	4b15      	ldr	r3, [pc, #84]	; (80086d4 <xTaskCheckForTimeOut+0xc0>)
 8008680:	681b      	ldr	r3, [r3, #0]
 8008682:	429a      	cmp	r2, r3
 8008684:	d007      	beq.n	8008696 <xTaskCheckForTimeOut+0x82>
 8008686:	687b      	ldr	r3, [r7, #4]
 8008688:	685b      	ldr	r3, [r3, #4]
 800868a:	69ba      	ldr	r2, [r7, #24]
 800868c:	429a      	cmp	r2, r3
 800868e:	d302      	bcc.n	8008696 <xTaskCheckForTimeOut+0x82>
			/* The tick count is greater than the time at which
			vTaskSetTimeout() was called, but has also overflowed since
			vTaskSetTimeOut() was called.  It must have wrapped all the way
			around and gone past again. This passed since vTaskSetTimeout()
			was called. */
			xReturn = pdTRUE;
 8008690:	2301      	movs	r3, #1
 8008692:	61fb      	str	r3, [r7, #28]
 8008694:	e015      	b.n	80086c2 <xTaskCheckForTimeOut+0xae>
		}
		else if( xElapsedTime < *pxTicksToWait ) /*lint !e961 Explicit casting is only redundant with some compilers, whereas others require it to prevent integer conversion errors. */
 8008696:	683b      	ldr	r3, [r7, #0]
 8008698:	681b      	ldr	r3, [r3, #0]
 800869a:	697a      	ldr	r2, [r7, #20]
 800869c:	429a      	cmp	r2, r3
 800869e:	d20b      	bcs.n	80086b8 <xTaskCheckForTimeOut+0xa4>
		{
			/* Not a genuine timeout. Adjust parameters for time remaining. */
			*pxTicksToWait -= xElapsedTime;
 80086a0:	683b      	ldr	r3, [r7, #0]
 80086a2:	681a      	ldr	r2, [r3, #0]
 80086a4:	697b      	ldr	r3, [r7, #20]
 80086a6:	1ad2      	subs	r2, r2, r3
 80086a8:	683b      	ldr	r3, [r7, #0]
 80086aa:	601a      	str	r2, [r3, #0]
			vTaskInternalSetTimeOutState( pxTimeOut );
 80086ac:	6878      	ldr	r0, [r7, #4]
 80086ae:	f7ff ff9b 	bl	80085e8 <vTaskInternalSetTimeOutState>
			xReturn = pdFALSE;
 80086b2:	2300      	movs	r3, #0
 80086b4:	61fb      	str	r3, [r7, #28]
 80086b6:	e004      	b.n	80086c2 <xTaskCheckForTimeOut+0xae>
		}
		else
		{
			*pxTicksToWait = 0;
 80086b8:	683b      	ldr	r3, [r7, #0]
 80086ba:	2200      	movs	r2, #0
 80086bc:	601a      	str	r2, [r3, #0]
			xReturn = pdTRUE;
 80086be:	2301      	movs	r3, #1
 80086c0:	61fb      	str	r3, [r7, #28]
		}
	}
	taskEXIT_CRITICAL();
 80086c2:	f000 ff77 	bl	80095b4 <vPortExitCritical>

	return xReturn;
 80086c6:	69fb      	ldr	r3, [r7, #28]
}
 80086c8:	4618      	mov	r0, r3
 80086ca:	3720      	adds	r7, #32
 80086cc:	46bd      	mov	sp, r7
 80086ce:	bd80      	pop	{r7, pc}
 80086d0:	2400123c 	.word	0x2400123c
 80086d4:	24001250 	.word	0x24001250

080086d8 <vTaskMissedYield>:
/*-----------------------------------------------------------*/

void vTaskMissedYield( void )
{
 80086d8:	b480      	push	{r7}
 80086da:	af00      	add	r7, sp, #0
	xYieldPending = pdTRUE;
 80086dc:	4b03      	ldr	r3, [pc, #12]	; (80086ec <vTaskMissedYield+0x14>)
 80086de:	2201      	movs	r2, #1
 80086e0:	601a      	str	r2, [r3, #0]
}
 80086e2:	bf00      	nop
 80086e4:	46bd      	mov	sp, r7
 80086e6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80086ea:	4770      	bx	lr
 80086ec:	2400124c 	.word	0x2400124c

080086f0 <prvIdleTask>:
 *
 * void prvIdleTask( void *pvParameters );
 *
 */
static portTASK_FUNCTION( prvIdleTask, pvParameters )
{
 80086f0:	b580      	push	{r7, lr}
 80086f2:	b082      	sub	sp, #8
 80086f4:	af00      	add	r7, sp, #0
 80086f6:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* See if any tasks have deleted themselves - if so then the idle task
		is responsible for freeing the deleted task's TCB and stack. */
		prvCheckTasksWaitingTermination();
 80086f8:	f000 f852 	bl	80087a0 <prvCheckTasksWaitingTermination>
			the list, and an occasional incorrect value will not matter.  If
			the ready list at the idle priority contains more than one task
			then a task other than the idle task is ready to execute. */


			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ tskIDLE_PRIORITY ] ) ) > ( UBaseType_t ) 1 )
 80086fc:	4b06      	ldr	r3, [pc, #24]	; (8008718 <prvIdleTask+0x28>)
 80086fe:	681b      	ldr	r3, [r3, #0]
 8008700:	2b01      	cmp	r3, #1
 8008702:	d9f9      	bls.n	80086f8 <prvIdleTask+0x8>
			{
				taskYIELD();
 8008704:	4b05      	ldr	r3, [pc, #20]	; (800871c <prvIdleTask+0x2c>)
 8008706:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800870a:	601a      	str	r2, [r3, #0]
 800870c:	f3bf 8f4f 	dsb	sy
 8008710:	f3bf 8f6f 	isb	sy
		prvCheckTasksWaitingTermination();
 8008714:	e7f0      	b.n	80086f8 <prvIdleTask+0x8>
 8008716:	bf00      	nop
 8008718:	24000d68 	.word	0x24000d68
 800871c:	e000ed04 	.word	0xe000ed04

08008720 <prvInitialiseTaskLists>:

#endif /* portUSING_MPU_WRAPPERS */
/*-----------------------------------------------------------*/

static void prvInitialiseTaskLists( void )
{
 8008720:	b580      	push	{r7, lr}
 8008722:	b082      	sub	sp, #8
 8008724:	af00      	add	r7, sp, #0
UBaseType_t uxPriority;

	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 8008726:	2300      	movs	r3, #0
 8008728:	607b      	str	r3, [r7, #4]
 800872a:	e00c      	b.n	8008746 <prvInitialiseTaskLists+0x26>
	{
		vListInitialise( &( pxReadyTasksLists[ uxPriority ] ) );
 800872c:	687a      	ldr	r2, [r7, #4]
 800872e:	4613      	mov	r3, r2
 8008730:	009b      	lsls	r3, r3, #2
 8008732:	4413      	add	r3, r2
 8008734:	009b      	lsls	r3, r3, #2
 8008736:	4a12      	ldr	r2, [pc, #72]	; (8008780 <prvInitialiseTaskLists+0x60>)
 8008738:	4413      	add	r3, r2
 800873a:	4618      	mov	r0, r3
 800873c:	f7fe f918 	bl	8006970 <vListInitialise>
	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 8008740:	687b      	ldr	r3, [r7, #4]
 8008742:	3301      	adds	r3, #1
 8008744:	607b      	str	r3, [r7, #4]
 8008746:	687b      	ldr	r3, [r7, #4]
 8008748:	2b37      	cmp	r3, #55	; 0x37
 800874a:	d9ef      	bls.n	800872c <prvInitialiseTaskLists+0xc>
	}

	vListInitialise( &xDelayedTaskList1 );
 800874c:	480d      	ldr	r0, [pc, #52]	; (8008784 <prvInitialiseTaskLists+0x64>)
 800874e:	f7fe f90f 	bl	8006970 <vListInitialise>
	vListInitialise( &xDelayedTaskList2 );
 8008752:	480d      	ldr	r0, [pc, #52]	; (8008788 <prvInitialiseTaskLists+0x68>)
 8008754:	f7fe f90c 	bl	8006970 <vListInitialise>
	vListInitialise( &xPendingReadyList );
 8008758:	480c      	ldr	r0, [pc, #48]	; (800878c <prvInitialiseTaskLists+0x6c>)
 800875a:	f7fe f909 	bl	8006970 <vListInitialise>

	#if ( INCLUDE_vTaskDelete == 1 )
	{
		vListInitialise( &xTasksWaitingTermination );
 800875e:	480c      	ldr	r0, [pc, #48]	; (8008790 <prvInitialiseTaskLists+0x70>)
 8008760:	f7fe f906 	bl	8006970 <vListInitialise>
	}
	#endif /* INCLUDE_vTaskDelete */

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		vListInitialise( &xSuspendedTaskList );
 8008764:	480b      	ldr	r0, [pc, #44]	; (8008794 <prvInitialiseTaskLists+0x74>)
 8008766:	f7fe f903 	bl	8006970 <vListInitialise>
	}
	#endif /* INCLUDE_vTaskSuspend */

	/* Start with pxDelayedTaskList using list1 and the pxOverflowDelayedTaskList
	using list2. */
	pxDelayedTaskList = &xDelayedTaskList1;
 800876a:	4b0b      	ldr	r3, [pc, #44]	; (8008798 <prvInitialiseTaskLists+0x78>)
 800876c:	4a05      	ldr	r2, [pc, #20]	; (8008784 <prvInitialiseTaskLists+0x64>)
 800876e:	601a      	str	r2, [r3, #0]
	pxOverflowDelayedTaskList = &xDelayedTaskList2;
 8008770:	4b0a      	ldr	r3, [pc, #40]	; (800879c <prvInitialiseTaskLists+0x7c>)
 8008772:	4a05      	ldr	r2, [pc, #20]	; (8008788 <prvInitialiseTaskLists+0x68>)
 8008774:	601a      	str	r2, [r3, #0]
}
 8008776:	bf00      	nop
 8008778:	3708      	adds	r7, #8
 800877a:	46bd      	mov	sp, r7
 800877c:	bd80      	pop	{r7, pc}
 800877e:	bf00      	nop
 8008780:	24000d68 	.word	0x24000d68
 8008784:	240011c8 	.word	0x240011c8
 8008788:	240011dc 	.word	0x240011dc
 800878c:	240011f8 	.word	0x240011f8
 8008790:	2400120c 	.word	0x2400120c
 8008794:	24001224 	.word	0x24001224
 8008798:	240011f0 	.word	0x240011f0
 800879c:	240011f4 	.word	0x240011f4

080087a0 <prvCheckTasksWaitingTermination>:
/*-----------------------------------------------------------*/

static void prvCheckTasksWaitingTermination( void )
{
 80087a0:	b580      	push	{r7, lr}
 80087a2:	b082      	sub	sp, #8
 80087a4:	af00      	add	r7, sp, #0
	{
		TCB_t *pxTCB;

		/* uxDeletedTasksWaitingCleanUp is used to prevent taskENTER_CRITICAL()
		being called too often in the idle task. */
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 80087a6:	e019      	b.n	80087dc <prvCheckTasksWaitingTermination+0x3c>
		{
			taskENTER_CRITICAL();
 80087a8:	f000 fed4 	bl	8009554 <vPortEnterCritical>
			{
				pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xTasksWaitingTermination ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 80087ac:	4b10      	ldr	r3, [pc, #64]	; (80087f0 <prvCheckTasksWaitingTermination+0x50>)
 80087ae:	68db      	ldr	r3, [r3, #12]
 80087b0:	68db      	ldr	r3, [r3, #12]
 80087b2:	607b      	str	r3, [r7, #4]
				( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 80087b4:	687b      	ldr	r3, [r7, #4]
 80087b6:	3304      	adds	r3, #4
 80087b8:	4618      	mov	r0, r3
 80087ba:	f7fe f963 	bl	8006a84 <uxListRemove>
				--uxCurrentNumberOfTasks;
 80087be:	4b0d      	ldr	r3, [pc, #52]	; (80087f4 <prvCheckTasksWaitingTermination+0x54>)
 80087c0:	681b      	ldr	r3, [r3, #0]
 80087c2:	3b01      	subs	r3, #1
 80087c4:	4a0b      	ldr	r2, [pc, #44]	; (80087f4 <prvCheckTasksWaitingTermination+0x54>)
 80087c6:	6013      	str	r3, [r2, #0]
				--uxDeletedTasksWaitingCleanUp;
 80087c8:	4b0b      	ldr	r3, [pc, #44]	; (80087f8 <prvCheckTasksWaitingTermination+0x58>)
 80087ca:	681b      	ldr	r3, [r3, #0]
 80087cc:	3b01      	subs	r3, #1
 80087ce:	4a0a      	ldr	r2, [pc, #40]	; (80087f8 <prvCheckTasksWaitingTermination+0x58>)
 80087d0:	6013      	str	r3, [r2, #0]
			}
			taskEXIT_CRITICAL();
 80087d2:	f000 feef 	bl	80095b4 <vPortExitCritical>

			prvDeleteTCB( pxTCB );
 80087d6:	6878      	ldr	r0, [r7, #4]
 80087d8:	f000 f810 	bl	80087fc <prvDeleteTCB>
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 80087dc:	4b06      	ldr	r3, [pc, #24]	; (80087f8 <prvCheckTasksWaitingTermination+0x58>)
 80087de:	681b      	ldr	r3, [r3, #0]
 80087e0:	2b00      	cmp	r3, #0
 80087e2:	d1e1      	bne.n	80087a8 <prvCheckTasksWaitingTermination+0x8>
		}
	}
	#endif /* INCLUDE_vTaskDelete */
}
 80087e4:	bf00      	nop
 80087e6:	bf00      	nop
 80087e8:	3708      	adds	r7, #8
 80087ea:	46bd      	mov	sp, r7
 80087ec:	bd80      	pop	{r7, pc}
 80087ee:	bf00      	nop
 80087f0:	2400120c 	.word	0x2400120c
 80087f4:	24001238 	.word	0x24001238
 80087f8:	24001220 	.word	0x24001220

080087fc <prvDeleteTCB>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelete == 1 )

	static void prvDeleteTCB( TCB_t *pxTCB )
	{
 80087fc:	b580      	push	{r7, lr}
 80087fe:	b084      	sub	sp, #16
 8008800:	af00      	add	r7, sp, #0
 8008802:	6078      	str	r0, [r7, #4]
		to the task to free any memory allocated at the application level.
		See the third party link http://www.nadler.com/embedded/newlibAndFreeRTOS.html
		for additional information. */
		#if ( configUSE_NEWLIB_REENTRANT == 1 )
		{
			_reclaim_reent( &( pxTCB->xNewLib_reent ) );
 8008804:	687b      	ldr	r3, [r7, #4]
 8008806:	3354      	adds	r3, #84	; 0x54
 8008808:	4618      	mov	r0, r3
 800880a:	f001 fba3 	bl	8009f54 <_reclaim_reent>
		#elif( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 !e9029 Macro has been consolidated for readability reasons. */
		{
			/* The task could have been allocated statically or dynamically, so
			check what was statically allocated before trying to free the
			memory. */
			if( pxTCB->ucStaticallyAllocated == tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB )
 800880e:	687b      	ldr	r3, [r7, #4]
 8008810:	f893 30b9 	ldrb.w	r3, [r3, #185]	; 0xb9
 8008814:	2b00      	cmp	r3, #0
 8008816:	d108      	bne.n	800882a <prvDeleteTCB+0x2e>
			{
				/* Both the stack and TCB were allocated dynamically, so both
				must be freed. */
				vPortFree( pxTCB->pxStack );
 8008818:	687b      	ldr	r3, [r7, #4]
 800881a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800881c:	4618      	mov	r0, r3
 800881e:	f001 f887 	bl	8009930 <vPortFree>
				vPortFree( pxTCB );
 8008822:	6878      	ldr	r0, [r7, #4]
 8008824:	f001 f884 	bl	8009930 <vPortFree>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
	}
 8008828:	e018      	b.n	800885c <prvDeleteTCB+0x60>
			else if( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_ONLY )
 800882a:	687b      	ldr	r3, [r7, #4]
 800882c:	f893 30b9 	ldrb.w	r3, [r3, #185]	; 0xb9
 8008830:	2b01      	cmp	r3, #1
 8008832:	d103      	bne.n	800883c <prvDeleteTCB+0x40>
				vPortFree( pxTCB );
 8008834:	6878      	ldr	r0, [r7, #4]
 8008836:	f001 f87b 	bl	8009930 <vPortFree>
	}
 800883a:	e00f      	b.n	800885c <prvDeleteTCB+0x60>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
 800883c:	687b      	ldr	r3, [r7, #4]
 800883e:	f893 30b9 	ldrb.w	r3, [r3, #185]	; 0xb9
 8008842:	2b02      	cmp	r3, #2
 8008844:	d00a      	beq.n	800885c <prvDeleteTCB+0x60>
	__asm volatile
 8008846:	f04f 0350 	mov.w	r3, #80	; 0x50
 800884a:	f383 8811 	msr	BASEPRI, r3
 800884e:	f3bf 8f6f 	isb	sy
 8008852:	f3bf 8f4f 	dsb	sy
 8008856:	60fb      	str	r3, [r7, #12]
}
 8008858:	bf00      	nop
 800885a:	e7fe      	b.n	800885a <prvDeleteTCB+0x5e>
	}
 800885c:	bf00      	nop
 800885e:	3710      	adds	r7, #16
 8008860:	46bd      	mov	sp, r7
 8008862:	bd80      	pop	{r7, pc}

08008864 <prvResetNextTaskUnblockTime>:

#endif /* INCLUDE_vTaskDelete */
/*-----------------------------------------------------------*/

static void prvResetNextTaskUnblockTime( void )
{
 8008864:	b480      	push	{r7}
 8008866:	b083      	sub	sp, #12
 8008868:	af00      	add	r7, sp, #0
TCB_t *pxTCB;

	if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 800886a:	4b0c      	ldr	r3, [pc, #48]	; (800889c <prvResetNextTaskUnblockTime+0x38>)
 800886c:	681b      	ldr	r3, [r3, #0]
 800886e:	681b      	ldr	r3, [r3, #0]
 8008870:	2b00      	cmp	r3, #0
 8008872:	d104      	bne.n	800887e <prvResetNextTaskUnblockTime+0x1a>
	{
		/* The new current delayed list is empty.  Set xNextTaskUnblockTime to
		the maximum possible value so it is	extremely unlikely that the
		if( xTickCount >= xNextTaskUnblockTime ) test will pass until
		there is an item in the delayed list. */
		xNextTaskUnblockTime = portMAX_DELAY;
 8008874:	4b0a      	ldr	r3, [pc, #40]	; (80088a0 <prvResetNextTaskUnblockTime+0x3c>)
 8008876:	f04f 32ff 	mov.w	r2, #4294967295
 800887a:	601a      	str	r2, [r3, #0]
		which the task at the head of the delayed list should be removed
		from the Blocked state. */
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
	}
}
 800887c:	e008      	b.n	8008890 <prvResetNextTaskUnblockTime+0x2c>
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800887e:	4b07      	ldr	r3, [pc, #28]	; (800889c <prvResetNextTaskUnblockTime+0x38>)
 8008880:	681b      	ldr	r3, [r3, #0]
 8008882:	68db      	ldr	r3, [r3, #12]
 8008884:	68db      	ldr	r3, [r3, #12]
 8008886:	607b      	str	r3, [r7, #4]
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
 8008888:	687b      	ldr	r3, [r7, #4]
 800888a:	685b      	ldr	r3, [r3, #4]
 800888c:	4a04      	ldr	r2, [pc, #16]	; (80088a0 <prvResetNextTaskUnblockTime+0x3c>)
 800888e:	6013      	str	r3, [r2, #0]
}
 8008890:	bf00      	nop
 8008892:	370c      	adds	r7, #12
 8008894:	46bd      	mov	sp, r7
 8008896:	f85d 7b04 	ldr.w	r7, [sp], #4
 800889a:	4770      	bx	lr
 800889c:	240011f0 	.word	0x240011f0
 80088a0:	24001258 	.word	0x24001258

080088a4 <xTaskGetSchedulerState>:
/*-----------------------------------------------------------*/

#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )

	BaseType_t xTaskGetSchedulerState( void )
	{
 80088a4:	b480      	push	{r7}
 80088a6:	b083      	sub	sp, #12
 80088a8:	af00      	add	r7, sp, #0
	BaseType_t xReturn;

		if( xSchedulerRunning == pdFALSE )
 80088aa:	4b0b      	ldr	r3, [pc, #44]	; (80088d8 <xTaskGetSchedulerState+0x34>)
 80088ac:	681b      	ldr	r3, [r3, #0]
 80088ae:	2b00      	cmp	r3, #0
 80088b0:	d102      	bne.n	80088b8 <xTaskGetSchedulerState+0x14>
		{
			xReturn = taskSCHEDULER_NOT_STARTED;
 80088b2:	2301      	movs	r3, #1
 80088b4:	607b      	str	r3, [r7, #4]
 80088b6:	e008      	b.n	80088ca <xTaskGetSchedulerState+0x26>
		}
		else
		{
			if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 80088b8:	4b08      	ldr	r3, [pc, #32]	; (80088dc <xTaskGetSchedulerState+0x38>)
 80088ba:	681b      	ldr	r3, [r3, #0]
 80088bc:	2b00      	cmp	r3, #0
 80088be:	d102      	bne.n	80088c6 <xTaskGetSchedulerState+0x22>
			{
				xReturn = taskSCHEDULER_RUNNING;
 80088c0:	2302      	movs	r3, #2
 80088c2:	607b      	str	r3, [r7, #4]
 80088c4:	e001      	b.n	80088ca <xTaskGetSchedulerState+0x26>
			}
			else
			{
				xReturn = taskSCHEDULER_SUSPENDED;
 80088c6:	2300      	movs	r3, #0
 80088c8:	607b      	str	r3, [r7, #4]
			}
		}

		return xReturn;
 80088ca:	687b      	ldr	r3, [r7, #4]
	}
 80088cc:	4618      	mov	r0, r3
 80088ce:	370c      	adds	r7, #12
 80088d0:	46bd      	mov	sp, r7
 80088d2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80088d6:	4770      	bx	lr
 80088d8:	24001244 	.word	0x24001244
 80088dc:	24001260 	.word	0x24001260

080088e0 <xTaskPriorityInherit>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	BaseType_t xTaskPriorityInherit( TaskHandle_t const pxMutexHolder )
	{
 80088e0:	b580      	push	{r7, lr}
 80088e2:	b084      	sub	sp, #16
 80088e4:	af00      	add	r7, sp, #0
 80088e6:	6078      	str	r0, [r7, #4]
	TCB_t * const pxMutexHolderTCB = pxMutexHolder;
 80088e8:	687b      	ldr	r3, [r7, #4]
 80088ea:	60bb      	str	r3, [r7, #8]
	BaseType_t xReturn = pdFALSE;
 80088ec:	2300      	movs	r3, #0
 80088ee:	60fb      	str	r3, [r7, #12]

		/* If the mutex was given back by an interrupt while the queue was
		locked then the mutex holder might now be NULL.  _RB_ Is this still
		needed as interrupts can no longer use mutexes? */
		if( pxMutexHolder != NULL )
 80088f0:	687b      	ldr	r3, [r7, #4]
 80088f2:	2b00      	cmp	r3, #0
 80088f4:	d051      	beq.n	800899a <xTaskPriorityInherit+0xba>
		{
			/* If the holder of the mutex has a priority below the priority of
			the task attempting to obtain the mutex then it will temporarily
			inherit the priority of the task attempting to obtain the mutex. */
			if( pxMutexHolderTCB->uxPriority < pxCurrentTCB->uxPriority )
 80088f6:	68bb      	ldr	r3, [r7, #8]
 80088f8:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80088fa:	4b2a      	ldr	r3, [pc, #168]	; (80089a4 <xTaskPriorityInherit+0xc4>)
 80088fc:	681b      	ldr	r3, [r3, #0]
 80088fe:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8008900:	429a      	cmp	r2, r3
 8008902:	d241      	bcs.n	8008988 <xTaskPriorityInherit+0xa8>
			{
				/* Adjust the mutex holder state to account for its new
				priority.  Only reset the event list item value if the value is
				not being used for anything else. */
				if( ( listGET_LIST_ITEM_VALUE( &( pxMutexHolderTCB->xEventListItem ) ) & taskEVENT_LIST_ITEM_VALUE_IN_USE ) == 0UL )
 8008904:	68bb      	ldr	r3, [r7, #8]
 8008906:	699b      	ldr	r3, [r3, #24]
 8008908:	2b00      	cmp	r3, #0
 800890a:	db06      	blt.n	800891a <xTaskPriorityInherit+0x3a>
				{
					listSET_LIST_ITEM_VALUE( &( pxMutexHolderTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxCurrentTCB->uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800890c:	4b25      	ldr	r3, [pc, #148]	; (80089a4 <xTaskPriorityInherit+0xc4>)
 800890e:	681b      	ldr	r3, [r3, #0]
 8008910:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8008912:	f1c3 0238 	rsb	r2, r3, #56	; 0x38
 8008916:	68bb      	ldr	r3, [r7, #8]
 8008918:	619a      	str	r2, [r3, #24]
					mtCOVERAGE_TEST_MARKER();
				}

				/* If the task being modified is in the ready state it will need
				to be moved into a new list. */
				if( listIS_CONTAINED_WITHIN( &( pxReadyTasksLists[ pxMutexHolderTCB->uxPriority ] ), &( pxMutexHolderTCB->xStateListItem ) ) != pdFALSE )
 800891a:	68bb      	ldr	r3, [r7, #8]
 800891c:	6959      	ldr	r1, [r3, #20]
 800891e:	68bb      	ldr	r3, [r7, #8]
 8008920:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8008922:	4613      	mov	r3, r2
 8008924:	009b      	lsls	r3, r3, #2
 8008926:	4413      	add	r3, r2
 8008928:	009b      	lsls	r3, r3, #2
 800892a:	4a1f      	ldr	r2, [pc, #124]	; (80089a8 <xTaskPriorityInherit+0xc8>)
 800892c:	4413      	add	r3, r2
 800892e:	4299      	cmp	r1, r3
 8008930:	d122      	bne.n	8008978 <xTaskPriorityInherit+0x98>
				{
					if( uxListRemove( &( pxMutexHolderTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 8008932:	68bb      	ldr	r3, [r7, #8]
 8008934:	3304      	adds	r3, #4
 8008936:	4618      	mov	r0, r3
 8008938:	f7fe f8a4 	bl	8006a84 <uxListRemove>
					{
						mtCOVERAGE_TEST_MARKER();
					}

					/* Inherit the priority before being moved into the new list. */
					pxMutexHolderTCB->uxPriority = pxCurrentTCB->uxPriority;
 800893c:	4b19      	ldr	r3, [pc, #100]	; (80089a4 <xTaskPriorityInherit+0xc4>)
 800893e:	681b      	ldr	r3, [r3, #0]
 8008940:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8008942:	68bb      	ldr	r3, [r7, #8]
 8008944:	62da      	str	r2, [r3, #44]	; 0x2c
					prvAddTaskToReadyList( pxMutexHolderTCB );
 8008946:	68bb      	ldr	r3, [r7, #8]
 8008948:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800894a:	4b18      	ldr	r3, [pc, #96]	; (80089ac <xTaskPriorityInherit+0xcc>)
 800894c:	681b      	ldr	r3, [r3, #0]
 800894e:	429a      	cmp	r2, r3
 8008950:	d903      	bls.n	800895a <xTaskPriorityInherit+0x7a>
 8008952:	68bb      	ldr	r3, [r7, #8]
 8008954:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8008956:	4a15      	ldr	r2, [pc, #84]	; (80089ac <xTaskPriorityInherit+0xcc>)
 8008958:	6013      	str	r3, [r2, #0]
 800895a:	68bb      	ldr	r3, [r7, #8]
 800895c:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800895e:	4613      	mov	r3, r2
 8008960:	009b      	lsls	r3, r3, #2
 8008962:	4413      	add	r3, r2
 8008964:	009b      	lsls	r3, r3, #2
 8008966:	4a10      	ldr	r2, [pc, #64]	; (80089a8 <xTaskPriorityInherit+0xc8>)
 8008968:	441a      	add	r2, r3
 800896a:	68bb      	ldr	r3, [r7, #8]
 800896c:	3304      	adds	r3, #4
 800896e:	4619      	mov	r1, r3
 8008970:	4610      	mov	r0, r2
 8008972:	f7fe f82a 	bl	80069ca <vListInsertEnd>
 8008976:	e004      	b.n	8008982 <xTaskPriorityInherit+0xa2>
				}
				else
				{
					/* Just inherit the priority. */
					pxMutexHolderTCB->uxPriority = pxCurrentTCB->uxPriority;
 8008978:	4b0a      	ldr	r3, [pc, #40]	; (80089a4 <xTaskPriorityInherit+0xc4>)
 800897a:	681b      	ldr	r3, [r3, #0]
 800897c:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800897e:	68bb      	ldr	r3, [r7, #8]
 8008980:	62da      	str	r2, [r3, #44]	; 0x2c
				}

				traceTASK_PRIORITY_INHERIT( pxMutexHolderTCB, pxCurrentTCB->uxPriority );

				/* Inheritance occurred. */
				xReturn = pdTRUE;
 8008982:	2301      	movs	r3, #1
 8008984:	60fb      	str	r3, [r7, #12]
 8008986:	e008      	b.n	800899a <xTaskPriorityInherit+0xba>
			}
			else
			{
				if( pxMutexHolderTCB->uxBasePriority < pxCurrentTCB->uxPriority )
 8008988:	68bb      	ldr	r3, [r7, #8]
 800898a:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 800898c:	4b05      	ldr	r3, [pc, #20]	; (80089a4 <xTaskPriorityInherit+0xc4>)
 800898e:	681b      	ldr	r3, [r3, #0]
 8008990:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8008992:	429a      	cmp	r2, r3
 8008994:	d201      	bcs.n	800899a <xTaskPriorityInherit+0xba>
					current priority of the mutex holder is not lower than the
					priority of the task attempting to take the mutex.
					Therefore the mutex holder must have already inherited a
					priority, but inheritance would have occurred if that had
					not been the case. */
					xReturn = pdTRUE;
 8008996:	2301      	movs	r3, #1
 8008998:	60fb      	str	r3, [r7, #12]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		return xReturn;
 800899a:	68fb      	ldr	r3, [r7, #12]
	}
 800899c:	4618      	mov	r0, r3
 800899e:	3710      	adds	r7, #16
 80089a0:	46bd      	mov	sp, r7
 80089a2:	bd80      	pop	{r7, pc}
 80089a4:	24000d64 	.word	0x24000d64
 80089a8:	24000d68 	.word	0x24000d68
 80089ac:	24001240 	.word	0x24001240

080089b0 <xTaskPriorityDisinherit>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	BaseType_t xTaskPriorityDisinherit( TaskHandle_t const pxMutexHolder )
	{
 80089b0:	b580      	push	{r7, lr}
 80089b2:	b086      	sub	sp, #24
 80089b4:	af00      	add	r7, sp, #0
 80089b6:	6078      	str	r0, [r7, #4]
	TCB_t * const pxTCB = pxMutexHolder;
 80089b8:	687b      	ldr	r3, [r7, #4]
 80089ba:	613b      	str	r3, [r7, #16]
	BaseType_t xReturn = pdFALSE;
 80089bc:	2300      	movs	r3, #0
 80089be:	617b      	str	r3, [r7, #20]

		if( pxMutexHolder != NULL )
 80089c0:	687b      	ldr	r3, [r7, #4]
 80089c2:	2b00      	cmp	r3, #0
 80089c4:	d056      	beq.n	8008a74 <xTaskPriorityDisinherit+0xc4>
		{
			/* A task can only have an inherited priority if it holds the mutex.
			If the mutex is held by a task then it cannot be given from an
			interrupt, and if a mutex is given by the holding task then it must
			be the running state task. */
			configASSERT( pxTCB == pxCurrentTCB );
 80089c6:	4b2e      	ldr	r3, [pc, #184]	; (8008a80 <xTaskPriorityDisinherit+0xd0>)
 80089c8:	681b      	ldr	r3, [r3, #0]
 80089ca:	693a      	ldr	r2, [r7, #16]
 80089cc:	429a      	cmp	r2, r3
 80089ce:	d00a      	beq.n	80089e6 <xTaskPriorityDisinherit+0x36>
	__asm volatile
 80089d0:	f04f 0350 	mov.w	r3, #80	; 0x50
 80089d4:	f383 8811 	msr	BASEPRI, r3
 80089d8:	f3bf 8f6f 	isb	sy
 80089dc:	f3bf 8f4f 	dsb	sy
 80089e0:	60fb      	str	r3, [r7, #12]
}
 80089e2:	bf00      	nop
 80089e4:	e7fe      	b.n	80089e4 <xTaskPriorityDisinherit+0x34>
			configASSERT( pxTCB->uxMutexesHeld );
 80089e6:	693b      	ldr	r3, [r7, #16]
 80089e8:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80089ea:	2b00      	cmp	r3, #0
 80089ec:	d10a      	bne.n	8008a04 <xTaskPriorityDisinherit+0x54>
	__asm volatile
 80089ee:	f04f 0350 	mov.w	r3, #80	; 0x50
 80089f2:	f383 8811 	msr	BASEPRI, r3
 80089f6:	f3bf 8f6f 	isb	sy
 80089fa:	f3bf 8f4f 	dsb	sy
 80089fe:	60bb      	str	r3, [r7, #8]
}
 8008a00:	bf00      	nop
 8008a02:	e7fe      	b.n	8008a02 <xTaskPriorityDisinherit+0x52>
			( pxTCB->uxMutexesHeld )--;
 8008a04:	693b      	ldr	r3, [r7, #16]
 8008a06:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8008a08:	1e5a      	subs	r2, r3, #1
 8008a0a:	693b      	ldr	r3, [r7, #16]
 8008a0c:	651a      	str	r2, [r3, #80]	; 0x50

			/* Has the holder of the mutex inherited the priority of another
			task? */
			if( pxTCB->uxPriority != pxTCB->uxBasePriority )
 8008a0e:	693b      	ldr	r3, [r7, #16]
 8008a10:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8008a12:	693b      	ldr	r3, [r7, #16]
 8008a14:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8008a16:	429a      	cmp	r2, r3
 8008a18:	d02c      	beq.n	8008a74 <xTaskPriorityDisinherit+0xc4>
			{
				/* Only disinherit if no other mutexes are held. */
				if( pxTCB->uxMutexesHeld == ( UBaseType_t ) 0 )
 8008a1a:	693b      	ldr	r3, [r7, #16]
 8008a1c:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8008a1e:	2b00      	cmp	r3, #0
 8008a20:	d128      	bne.n	8008a74 <xTaskPriorityDisinherit+0xc4>
					/* A task can only have an inherited priority if it holds
					the mutex.  If the mutex is held by a task then it cannot be
					given from an interrupt, and if a mutex is given by the
					holding task then it must be the running state task.  Remove
					the holding task from the ready/delayed list. */
					if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 8008a22:	693b      	ldr	r3, [r7, #16]
 8008a24:	3304      	adds	r3, #4
 8008a26:	4618      	mov	r0, r3
 8008a28:	f7fe f82c 	bl	8006a84 <uxListRemove>
					}

					/* Disinherit the priority before adding the task into the
					new	ready list. */
					traceTASK_PRIORITY_DISINHERIT( pxTCB, pxTCB->uxBasePriority );
					pxTCB->uxPriority = pxTCB->uxBasePriority;
 8008a2c:	693b      	ldr	r3, [r7, #16]
 8008a2e:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8008a30:	693b      	ldr	r3, [r7, #16]
 8008a32:	62da      	str	r2, [r3, #44]	; 0x2c

					/* Reset the event list item value.  It cannot be in use for
					any other purpose if this task is running, and it must be
					running to give back the mutex. */
					listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxTCB->uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8008a34:	693b      	ldr	r3, [r7, #16]
 8008a36:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8008a38:	f1c3 0238 	rsb	r2, r3, #56	; 0x38
 8008a3c:	693b      	ldr	r3, [r7, #16]
 8008a3e:	619a      	str	r2, [r3, #24]
					prvAddTaskToReadyList( pxTCB );
 8008a40:	693b      	ldr	r3, [r7, #16]
 8008a42:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8008a44:	4b0f      	ldr	r3, [pc, #60]	; (8008a84 <xTaskPriorityDisinherit+0xd4>)
 8008a46:	681b      	ldr	r3, [r3, #0]
 8008a48:	429a      	cmp	r2, r3
 8008a4a:	d903      	bls.n	8008a54 <xTaskPriorityDisinherit+0xa4>
 8008a4c:	693b      	ldr	r3, [r7, #16]
 8008a4e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8008a50:	4a0c      	ldr	r2, [pc, #48]	; (8008a84 <xTaskPriorityDisinherit+0xd4>)
 8008a52:	6013      	str	r3, [r2, #0]
 8008a54:	693b      	ldr	r3, [r7, #16]
 8008a56:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8008a58:	4613      	mov	r3, r2
 8008a5a:	009b      	lsls	r3, r3, #2
 8008a5c:	4413      	add	r3, r2
 8008a5e:	009b      	lsls	r3, r3, #2
 8008a60:	4a09      	ldr	r2, [pc, #36]	; (8008a88 <xTaskPriorityDisinherit+0xd8>)
 8008a62:	441a      	add	r2, r3
 8008a64:	693b      	ldr	r3, [r7, #16]
 8008a66:	3304      	adds	r3, #4
 8008a68:	4619      	mov	r1, r3
 8008a6a:	4610      	mov	r0, r2
 8008a6c:	f7fd ffad 	bl	80069ca <vListInsertEnd>
					in an order different to that in which they were taken.
					If a context switch did not occur when the first mutex was
					returned, even if a task was waiting on it, then a context
					switch should occur when the last mutex is returned whether
					a task is waiting on it or not. */
					xReturn = pdTRUE;
 8008a70:	2301      	movs	r3, #1
 8008a72:	617b      	str	r3, [r7, #20]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		return xReturn;
 8008a74:	697b      	ldr	r3, [r7, #20]
	}
 8008a76:	4618      	mov	r0, r3
 8008a78:	3718      	adds	r7, #24
 8008a7a:	46bd      	mov	sp, r7
 8008a7c:	bd80      	pop	{r7, pc}
 8008a7e:	bf00      	nop
 8008a80:	24000d64 	.word	0x24000d64
 8008a84:	24001240 	.word	0x24001240
 8008a88:	24000d68 	.word	0x24000d68

08008a8c <vTaskPriorityDisinheritAfterTimeout>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	void vTaskPriorityDisinheritAfterTimeout( TaskHandle_t const pxMutexHolder, UBaseType_t uxHighestPriorityWaitingTask )
	{
 8008a8c:	b580      	push	{r7, lr}
 8008a8e:	b088      	sub	sp, #32
 8008a90:	af00      	add	r7, sp, #0
 8008a92:	6078      	str	r0, [r7, #4]
 8008a94:	6039      	str	r1, [r7, #0]
	TCB_t * const pxTCB = pxMutexHolder;
 8008a96:	687b      	ldr	r3, [r7, #4]
 8008a98:	61bb      	str	r3, [r7, #24]
	UBaseType_t uxPriorityUsedOnEntry, uxPriorityToUse;
	const UBaseType_t uxOnlyOneMutexHeld = ( UBaseType_t ) 1;
 8008a9a:	2301      	movs	r3, #1
 8008a9c:	617b      	str	r3, [r7, #20]

		if( pxMutexHolder != NULL )
 8008a9e:	687b      	ldr	r3, [r7, #4]
 8008aa0:	2b00      	cmp	r3, #0
 8008aa2:	d06a      	beq.n	8008b7a <vTaskPriorityDisinheritAfterTimeout+0xee>
		{
			/* If pxMutexHolder is not NULL then the holder must hold at least
			one mutex. */
			configASSERT( pxTCB->uxMutexesHeld );
 8008aa4:	69bb      	ldr	r3, [r7, #24]
 8008aa6:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8008aa8:	2b00      	cmp	r3, #0
 8008aaa:	d10a      	bne.n	8008ac2 <vTaskPriorityDisinheritAfterTimeout+0x36>
	__asm volatile
 8008aac:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008ab0:	f383 8811 	msr	BASEPRI, r3
 8008ab4:	f3bf 8f6f 	isb	sy
 8008ab8:	f3bf 8f4f 	dsb	sy
 8008abc:	60fb      	str	r3, [r7, #12]
}
 8008abe:	bf00      	nop
 8008ac0:	e7fe      	b.n	8008ac0 <vTaskPriorityDisinheritAfterTimeout+0x34>

			/* Determine the priority to which the priority of the task that
			holds the mutex should be set.  This will be the greater of the
			holding task's base priority and the priority of the highest
			priority task that is waiting to obtain the mutex. */
			if( pxTCB->uxBasePriority < uxHighestPriorityWaitingTask )
 8008ac2:	69bb      	ldr	r3, [r7, #24]
 8008ac4:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8008ac6:	683a      	ldr	r2, [r7, #0]
 8008ac8:	429a      	cmp	r2, r3
 8008aca:	d902      	bls.n	8008ad2 <vTaskPriorityDisinheritAfterTimeout+0x46>
			{
				uxPriorityToUse = uxHighestPriorityWaitingTask;
 8008acc:	683b      	ldr	r3, [r7, #0]
 8008ace:	61fb      	str	r3, [r7, #28]
 8008ad0:	e002      	b.n	8008ad8 <vTaskPriorityDisinheritAfterTimeout+0x4c>
			}
			else
			{
				uxPriorityToUse = pxTCB->uxBasePriority;
 8008ad2:	69bb      	ldr	r3, [r7, #24]
 8008ad4:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8008ad6:	61fb      	str	r3, [r7, #28]
			}

			/* Does the priority need to change? */
			if( pxTCB->uxPriority != uxPriorityToUse )
 8008ad8:	69bb      	ldr	r3, [r7, #24]
 8008ada:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8008adc:	69fa      	ldr	r2, [r7, #28]
 8008ade:	429a      	cmp	r2, r3
 8008ae0:	d04b      	beq.n	8008b7a <vTaskPriorityDisinheritAfterTimeout+0xee>
			{
				/* Only disinherit if no other mutexes are held.  This is a
				simplification in the priority inheritance implementation.  If
				the task that holds the mutex is also holding other mutexes then
				the other mutexes may have caused the priority inheritance. */
				if( pxTCB->uxMutexesHeld == uxOnlyOneMutexHeld )
 8008ae2:	69bb      	ldr	r3, [r7, #24]
 8008ae4:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8008ae6:	697a      	ldr	r2, [r7, #20]
 8008ae8:	429a      	cmp	r2, r3
 8008aea:	d146      	bne.n	8008b7a <vTaskPriorityDisinheritAfterTimeout+0xee>
				{
					/* If a task has timed out because it already holds the
					mutex it was trying to obtain then it cannot of inherited
					its own priority. */
					configASSERT( pxTCB != pxCurrentTCB );
 8008aec:	4b25      	ldr	r3, [pc, #148]	; (8008b84 <vTaskPriorityDisinheritAfterTimeout+0xf8>)
 8008aee:	681b      	ldr	r3, [r3, #0]
 8008af0:	69ba      	ldr	r2, [r7, #24]
 8008af2:	429a      	cmp	r2, r3
 8008af4:	d10a      	bne.n	8008b0c <vTaskPriorityDisinheritAfterTimeout+0x80>
	__asm volatile
 8008af6:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008afa:	f383 8811 	msr	BASEPRI, r3
 8008afe:	f3bf 8f6f 	isb	sy
 8008b02:	f3bf 8f4f 	dsb	sy
 8008b06:	60bb      	str	r3, [r7, #8]
}
 8008b08:	bf00      	nop
 8008b0a:	e7fe      	b.n	8008b0a <vTaskPriorityDisinheritAfterTimeout+0x7e>

					/* Disinherit the priority, remembering the previous
					priority to facilitate determining the subject task's
					state. */
					traceTASK_PRIORITY_DISINHERIT( pxTCB, pxTCB->uxBasePriority );
					uxPriorityUsedOnEntry = pxTCB->uxPriority;
 8008b0c:	69bb      	ldr	r3, [r7, #24]
 8008b0e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8008b10:	613b      	str	r3, [r7, #16]
					pxTCB->uxPriority = uxPriorityToUse;
 8008b12:	69bb      	ldr	r3, [r7, #24]
 8008b14:	69fa      	ldr	r2, [r7, #28]
 8008b16:	62da      	str	r2, [r3, #44]	; 0x2c

					/* Only reset the event list item value if the value is not
					being used for anything else. */
					if( ( listGET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ) ) & taskEVENT_LIST_ITEM_VALUE_IN_USE ) == 0UL )
 8008b18:	69bb      	ldr	r3, [r7, #24]
 8008b1a:	699b      	ldr	r3, [r3, #24]
 8008b1c:	2b00      	cmp	r3, #0
 8008b1e:	db04      	blt.n	8008b2a <vTaskPriorityDisinheritAfterTimeout+0x9e>
					{
						listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriorityToUse ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8008b20:	69fb      	ldr	r3, [r7, #28]
 8008b22:	f1c3 0238 	rsb	r2, r3, #56	; 0x38
 8008b26:	69bb      	ldr	r3, [r7, #24]
 8008b28:	619a      	str	r2, [r3, #24]
					then the task that holds the mutex could be in either the
					Ready, Blocked or Suspended states.  Only remove the task
					from its current state list if it is in the Ready state as
					the task's priority is going to change and there is one
					Ready list per priority. */
					if( listIS_CONTAINED_WITHIN( &( pxReadyTasksLists[ uxPriorityUsedOnEntry ] ), &( pxTCB->xStateListItem ) ) != pdFALSE )
 8008b2a:	69bb      	ldr	r3, [r7, #24]
 8008b2c:	6959      	ldr	r1, [r3, #20]
 8008b2e:	693a      	ldr	r2, [r7, #16]
 8008b30:	4613      	mov	r3, r2
 8008b32:	009b      	lsls	r3, r3, #2
 8008b34:	4413      	add	r3, r2
 8008b36:	009b      	lsls	r3, r3, #2
 8008b38:	4a13      	ldr	r2, [pc, #76]	; (8008b88 <vTaskPriorityDisinheritAfterTimeout+0xfc>)
 8008b3a:	4413      	add	r3, r2
 8008b3c:	4299      	cmp	r1, r3
 8008b3e:	d11c      	bne.n	8008b7a <vTaskPriorityDisinheritAfterTimeout+0xee>
					{
						if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 8008b40:	69bb      	ldr	r3, [r7, #24]
 8008b42:	3304      	adds	r3, #4
 8008b44:	4618      	mov	r0, r3
 8008b46:	f7fd ff9d 	bl	8006a84 <uxListRemove>
						else
						{
							mtCOVERAGE_TEST_MARKER();
						}

						prvAddTaskToReadyList( pxTCB );
 8008b4a:	69bb      	ldr	r3, [r7, #24]
 8008b4c:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8008b4e:	4b0f      	ldr	r3, [pc, #60]	; (8008b8c <vTaskPriorityDisinheritAfterTimeout+0x100>)
 8008b50:	681b      	ldr	r3, [r3, #0]
 8008b52:	429a      	cmp	r2, r3
 8008b54:	d903      	bls.n	8008b5e <vTaskPriorityDisinheritAfterTimeout+0xd2>
 8008b56:	69bb      	ldr	r3, [r7, #24]
 8008b58:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8008b5a:	4a0c      	ldr	r2, [pc, #48]	; (8008b8c <vTaskPriorityDisinheritAfterTimeout+0x100>)
 8008b5c:	6013      	str	r3, [r2, #0]
 8008b5e:	69bb      	ldr	r3, [r7, #24]
 8008b60:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8008b62:	4613      	mov	r3, r2
 8008b64:	009b      	lsls	r3, r3, #2
 8008b66:	4413      	add	r3, r2
 8008b68:	009b      	lsls	r3, r3, #2
 8008b6a:	4a07      	ldr	r2, [pc, #28]	; (8008b88 <vTaskPriorityDisinheritAfterTimeout+0xfc>)
 8008b6c:	441a      	add	r2, r3
 8008b6e:	69bb      	ldr	r3, [r7, #24]
 8008b70:	3304      	adds	r3, #4
 8008b72:	4619      	mov	r1, r3
 8008b74:	4610      	mov	r0, r2
 8008b76:	f7fd ff28 	bl	80069ca <vListInsertEnd>
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
 8008b7a:	bf00      	nop
 8008b7c:	3720      	adds	r7, #32
 8008b7e:	46bd      	mov	sp, r7
 8008b80:	bd80      	pop	{r7, pc}
 8008b82:	bf00      	nop
 8008b84:	24000d64 	.word	0x24000d64
 8008b88:	24000d68 	.word	0x24000d68
 8008b8c:	24001240 	.word	0x24001240

08008b90 <pvTaskIncrementMutexHeldCount>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	TaskHandle_t pvTaskIncrementMutexHeldCount( void )
	{
 8008b90:	b480      	push	{r7}
 8008b92:	af00      	add	r7, sp, #0
		/* If xSemaphoreCreateMutex() is called before any tasks have been created
		then pxCurrentTCB will be NULL. */
		if( pxCurrentTCB != NULL )
 8008b94:	4b07      	ldr	r3, [pc, #28]	; (8008bb4 <pvTaskIncrementMutexHeldCount+0x24>)
 8008b96:	681b      	ldr	r3, [r3, #0]
 8008b98:	2b00      	cmp	r3, #0
 8008b9a:	d004      	beq.n	8008ba6 <pvTaskIncrementMutexHeldCount+0x16>
		{
			( pxCurrentTCB->uxMutexesHeld )++;
 8008b9c:	4b05      	ldr	r3, [pc, #20]	; (8008bb4 <pvTaskIncrementMutexHeldCount+0x24>)
 8008b9e:	681b      	ldr	r3, [r3, #0]
 8008ba0:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 8008ba2:	3201      	adds	r2, #1
 8008ba4:	651a      	str	r2, [r3, #80]	; 0x50
		}

		return pxCurrentTCB;
 8008ba6:	4b03      	ldr	r3, [pc, #12]	; (8008bb4 <pvTaskIncrementMutexHeldCount+0x24>)
 8008ba8:	681b      	ldr	r3, [r3, #0]
	}
 8008baa:	4618      	mov	r0, r3
 8008bac:	46bd      	mov	sp, r7
 8008bae:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008bb2:	4770      	bx	lr
 8008bb4:	24000d64 	.word	0x24000d64

08008bb8 <prvAddCurrentTaskToDelayedList>:

#endif
/*-----------------------------------------------------------*/

static void prvAddCurrentTaskToDelayedList( TickType_t xTicksToWait, const BaseType_t xCanBlockIndefinitely )
{
 8008bb8:	b580      	push	{r7, lr}
 8008bba:	b084      	sub	sp, #16
 8008bbc:	af00      	add	r7, sp, #0
 8008bbe:	6078      	str	r0, [r7, #4]
 8008bc0:	6039      	str	r1, [r7, #0]
TickType_t xTimeToWake;
const TickType_t xConstTickCount = xTickCount;
 8008bc2:	4b21      	ldr	r3, [pc, #132]	; (8008c48 <prvAddCurrentTaskToDelayedList+0x90>)
 8008bc4:	681b      	ldr	r3, [r3, #0]
 8008bc6:	60fb      	str	r3, [r7, #12]
	}
	#endif

	/* Remove the task from the ready list before adding it to the blocked list
	as the same list item is used for both lists. */
	if( uxListRemove( &( pxCurrentTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 8008bc8:	4b20      	ldr	r3, [pc, #128]	; (8008c4c <prvAddCurrentTaskToDelayedList+0x94>)
 8008bca:	681b      	ldr	r3, [r3, #0]
 8008bcc:	3304      	adds	r3, #4
 8008bce:	4618      	mov	r0, r3
 8008bd0:	f7fd ff58 	bl	8006a84 <uxListRemove>
		mtCOVERAGE_TEST_MARKER();
	}

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		if( ( xTicksToWait == portMAX_DELAY ) && ( xCanBlockIndefinitely != pdFALSE ) )
 8008bd4:	687b      	ldr	r3, [r7, #4]
 8008bd6:	f1b3 3fff 	cmp.w	r3, #4294967295
 8008bda:	d10a      	bne.n	8008bf2 <prvAddCurrentTaskToDelayedList+0x3a>
 8008bdc:	683b      	ldr	r3, [r7, #0]
 8008bde:	2b00      	cmp	r3, #0
 8008be0:	d007      	beq.n	8008bf2 <prvAddCurrentTaskToDelayedList+0x3a>
		{
			/* Add the task to the suspended task list instead of a delayed task
			list to ensure it is not woken by a timing event.  It will block
			indefinitely. */
			vListInsertEnd( &xSuspendedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8008be2:	4b1a      	ldr	r3, [pc, #104]	; (8008c4c <prvAddCurrentTaskToDelayedList+0x94>)
 8008be4:	681b      	ldr	r3, [r3, #0]
 8008be6:	3304      	adds	r3, #4
 8008be8:	4619      	mov	r1, r3
 8008bea:	4819      	ldr	r0, [pc, #100]	; (8008c50 <prvAddCurrentTaskToDelayedList+0x98>)
 8008bec:	f7fd feed 	bl	80069ca <vListInsertEnd>

		/* Avoid compiler warning when INCLUDE_vTaskSuspend is not 1. */
		( void ) xCanBlockIndefinitely;
	}
	#endif /* INCLUDE_vTaskSuspend */
}
 8008bf0:	e026      	b.n	8008c40 <prvAddCurrentTaskToDelayedList+0x88>
			xTimeToWake = xConstTickCount + xTicksToWait;
 8008bf2:	68fa      	ldr	r2, [r7, #12]
 8008bf4:	687b      	ldr	r3, [r7, #4]
 8008bf6:	4413      	add	r3, r2
 8008bf8:	60bb      	str	r3, [r7, #8]
			listSET_LIST_ITEM_VALUE( &( pxCurrentTCB->xStateListItem ), xTimeToWake );
 8008bfa:	4b14      	ldr	r3, [pc, #80]	; (8008c4c <prvAddCurrentTaskToDelayedList+0x94>)
 8008bfc:	681b      	ldr	r3, [r3, #0]
 8008bfe:	68ba      	ldr	r2, [r7, #8]
 8008c00:	605a      	str	r2, [r3, #4]
			if( xTimeToWake < xConstTickCount )
 8008c02:	68ba      	ldr	r2, [r7, #8]
 8008c04:	68fb      	ldr	r3, [r7, #12]
 8008c06:	429a      	cmp	r2, r3
 8008c08:	d209      	bcs.n	8008c1e <prvAddCurrentTaskToDelayedList+0x66>
				vListInsert( pxOverflowDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8008c0a:	4b12      	ldr	r3, [pc, #72]	; (8008c54 <prvAddCurrentTaskToDelayedList+0x9c>)
 8008c0c:	681a      	ldr	r2, [r3, #0]
 8008c0e:	4b0f      	ldr	r3, [pc, #60]	; (8008c4c <prvAddCurrentTaskToDelayedList+0x94>)
 8008c10:	681b      	ldr	r3, [r3, #0]
 8008c12:	3304      	adds	r3, #4
 8008c14:	4619      	mov	r1, r3
 8008c16:	4610      	mov	r0, r2
 8008c18:	f7fd fefb 	bl	8006a12 <vListInsert>
}
 8008c1c:	e010      	b.n	8008c40 <prvAddCurrentTaskToDelayedList+0x88>
				vListInsert( pxDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8008c1e:	4b0e      	ldr	r3, [pc, #56]	; (8008c58 <prvAddCurrentTaskToDelayedList+0xa0>)
 8008c20:	681a      	ldr	r2, [r3, #0]
 8008c22:	4b0a      	ldr	r3, [pc, #40]	; (8008c4c <prvAddCurrentTaskToDelayedList+0x94>)
 8008c24:	681b      	ldr	r3, [r3, #0]
 8008c26:	3304      	adds	r3, #4
 8008c28:	4619      	mov	r1, r3
 8008c2a:	4610      	mov	r0, r2
 8008c2c:	f7fd fef1 	bl	8006a12 <vListInsert>
				if( xTimeToWake < xNextTaskUnblockTime )
 8008c30:	4b0a      	ldr	r3, [pc, #40]	; (8008c5c <prvAddCurrentTaskToDelayedList+0xa4>)
 8008c32:	681b      	ldr	r3, [r3, #0]
 8008c34:	68ba      	ldr	r2, [r7, #8]
 8008c36:	429a      	cmp	r2, r3
 8008c38:	d202      	bcs.n	8008c40 <prvAddCurrentTaskToDelayedList+0x88>
					xNextTaskUnblockTime = xTimeToWake;
 8008c3a:	4a08      	ldr	r2, [pc, #32]	; (8008c5c <prvAddCurrentTaskToDelayedList+0xa4>)
 8008c3c:	68bb      	ldr	r3, [r7, #8]
 8008c3e:	6013      	str	r3, [r2, #0]
}
 8008c40:	bf00      	nop
 8008c42:	3710      	adds	r7, #16
 8008c44:	46bd      	mov	sp, r7
 8008c46:	bd80      	pop	{r7, pc}
 8008c48:	2400123c 	.word	0x2400123c
 8008c4c:	24000d64 	.word	0x24000d64
 8008c50:	24001224 	.word	0x24001224
 8008c54:	240011f4 	.word	0x240011f4
 8008c58:	240011f0 	.word	0x240011f0
 8008c5c:	24001258 	.word	0x24001258

08008c60 <xTimerCreateTimerTask>:
									TimerCallbackFunction_t pxCallbackFunction,
									Timer_t *pxNewTimer ) PRIVILEGED_FUNCTION;
/*-----------------------------------------------------------*/

BaseType_t xTimerCreateTimerTask( void )
{
 8008c60:	b580      	push	{r7, lr}
 8008c62:	b08a      	sub	sp, #40	; 0x28
 8008c64:	af04      	add	r7, sp, #16
BaseType_t xReturn = pdFAIL;
 8008c66:	2300      	movs	r3, #0
 8008c68:	617b      	str	r3, [r7, #20]

	/* This function is called when the scheduler is started if
	configUSE_TIMERS is set to 1.  Check that the infrastructure used by the
	timer service task has been created/initialised.  If timers have already
	been created then the initialisation will already have been performed. */
	prvCheckForValidListAndQueue();
 8008c6a:	f000 fb07 	bl	800927c <prvCheckForValidListAndQueue>

	if( xTimerQueue != NULL )
 8008c6e:	4b1c      	ldr	r3, [pc, #112]	; (8008ce0 <xTimerCreateTimerTask+0x80>)
 8008c70:	681b      	ldr	r3, [r3, #0]
 8008c72:	2b00      	cmp	r3, #0
 8008c74:	d021      	beq.n	8008cba <xTimerCreateTimerTask+0x5a>
	{
		#if( configSUPPORT_STATIC_ALLOCATION == 1 )
		{
			StaticTask_t *pxTimerTaskTCBBuffer = NULL;
 8008c76:	2300      	movs	r3, #0
 8008c78:	60fb      	str	r3, [r7, #12]
			StackType_t *pxTimerTaskStackBuffer = NULL;
 8008c7a:	2300      	movs	r3, #0
 8008c7c:	60bb      	str	r3, [r7, #8]
			uint32_t ulTimerTaskStackSize;

			vApplicationGetTimerTaskMemory( &pxTimerTaskTCBBuffer, &pxTimerTaskStackBuffer, &ulTimerTaskStackSize );
 8008c7e:	1d3a      	adds	r2, r7, #4
 8008c80:	f107 0108 	add.w	r1, r7, #8
 8008c84:	f107 030c 	add.w	r3, r7, #12
 8008c88:	4618      	mov	r0, r3
 8008c8a:	f7fd fe57 	bl	800693c <vApplicationGetTimerTaskMemory>
			xTimerTaskHandle = xTaskCreateStatic(	prvTimerTask,
 8008c8e:	6879      	ldr	r1, [r7, #4]
 8008c90:	68bb      	ldr	r3, [r7, #8]
 8008c92:	68fa      	ldr	r2, [r7, #12]
 8008c94:	9202      	str	r2, [sp, #8]
 8008c96:	9301      	str	r3, [sp, #4]
 8008c98:	2302      	movs	r3, #2
 8008c9a:	9300      	str	r3, [sp, #0]
 8008c9c:	2300      	movs	r3, #0
 8008c9e:	460a      	mov	r2, r1
 8008ca0:	4910      	ldr	r1, [pc, #64]	; (8008ce4 <xTimerCreateTimerTask+0x84>)
 8008ca2:	4811      	ldr	r0, [pc, #68]	; (8008ce8 <xTimerCreateTimerTask+0x88>)
 8008ca4:	f7fe ff26 	bl	8007af4 <xTaskCreateStatic>
 8008ca8:	4603      	mov	r3, r0
 8008caa:	4a10      	ldr	r2, [pc, #64]	; (8008cec <xTimerCreateTimerTask+0x8c>)
 8008cac:	6013      	str	r3, [r2, #0]
													NULL,
													( ( UBaseType_t ) configTIMER_TASK_PRIORITY ) | portPRIVILEGE_BIT,
													pxTimerTaskStackBuffer,
													pxTimerTaskTCBBuffer );

			if( xTimerTaskHandle != NULL )
 8008cae:	4b0f      	ldr	r3, [pc, #60]	; (8008cec <xTimerCreateTimerTask+0x8c>)
 8008cb0:	681b      	ldr	r3, [r3, #0]
 8008cb2:	2b00      	cmp	r3, #0
 8008cb4:	d001      	beq.n	8008cba <xTimerCreateTimerTask+0x5a>
			{
				xReturn = pdPASS;
 8008cb6:	2301      	movs	r3, #1
 8008cb8:	617b      	str	r3, [r7, #20]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	configASSERT( xReturn );
 8008cba:	697b      	ldr	r3, [r7, #20]
 8008cbc:	2b00      	cmp	r3, #0
 8008cbe:	d10a      	bne.n	8008cd6 <xTimerCreateTimerTask+0x76>
	__asm volatile
 8008cc0:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008cc4:	f383 8811 	msr	BASEPRI, r3
 8008cc8:	f3bf 8f6f 	isb	sy
 8008ccc:	f3bf 8f4f 	dsb	sy
 8008cd0:	613b      	str	r3, [r7, #16]
}
 8008cd2:	bf00      	nop
 8008cd4:	e7fe      	b.n	8008cd4 <xTimerCreateTimerTask+0x74>
	return xReturn;
 8008cd6:	697b      	ldr	r3, [r7, #20]
}
 8008cd8:	4618      	mov	r0, r3
 8008cda:	3718      	adds	r7, #24
 8008cdc:	46bd      	mov	sp, r7
 8008cde:	bd80      	pop	{r7, pc}
 8008ce0:	24001294 	.word	0x24001294
 8008ce4:	0800b050 	.word	0x0800b050
 8008ce8:	08008e25 	.word	0x08008e25
 8008cec:	24001298 	.word	0x24001298

08008cf0 <xTimerGenericCommand>:
	}
}
/*-----------------------------------------------------------*/

BaseType_t xTimerGenericCommand( TimerHandle_t xTimer, const BaseType_t xCommandID, const TickType_t xOptionalValue, BaseType_t * const pxHigherPriorityTaskWoken, const TickType_t xTicksToWait )
{
 8008cf0:	b580      	push	{r7, lr}
 8008cf2:	b08a      	sub	sp, #40	; 0x28
 8008cf4:	af00      	add	r7, sp, #0
 8008cf6:	60f8      	str	r0, [r7, #12]
 8008cf8:	60b9      	str	r1, [r7, #8]
 8008cfa:	607a      	str	r2, [r7, #4]
 8008cfc:	603b      	str	r3, [r7, #0]
BaseType_t xReturn = pdFAIL;
 8008cfe:	2300      	movs	r3, #0
 8008d00:	627b      	str	r3, [r7, #36]	; 0x24
DaemonTaskMessage_t xMessage;

	configASSERT( xTimer );
 8008d02:	68fb      	ldr	r3, [r7, #12]
 8008d04:	2b00      	cmp	r3, #0
 8008d06:	d10a      	bne.n	8008d1e <xTimerGenericCommand+0x2e>
	__asm volatile
 8008d08:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008d0c:	f383 8811 	msr	BASEPRI, r3
 8008d10:	f3bf 8f6f 	isb	sy
 8008d14:	f3bf 8f4f 	dsb	sy
 8008d18:	623b      	str	r3, [r7, #32]
}
 8008d1a:	bf00      	nop
 8008d1c:	e7fe      	b.n	8008d1c <xTimerGenericCommand+0x2c>

	/* Send a message to the timer service task to perform a particular action
	on a particular timer definition. */
	if( xTimerQueue != NULL )
 8008d1e:	4b1a      	ldr	r3, [pc, #104]	; (8008d88 <xTimerGenericCommand+0x98>)
 8008d20:	681b      	ldr	r3, [r3, #0]
 8008d22:	2b00      	cmp	r3, #0
 8008d24:	d02a      	beq.n	8008d7c <xTimerGenericCommand+0x8c>
	{
		/* Send a command to the timer service task to start the xTimer timer. */
		xMessage.xMessageID = xCommandID;
 8008d26:	68bb      	ldr	r3, [r7, #8]
 8008d28:	613b      	str	r3, [r7, #16]
		xMessage.u.xTimerParameters.xMessageValue = xOptionalValue;
 8008d2a:	687b      	ldr	r3, [r7, #4]
 8008d2c:	617b      	str	r3, [r7, #20]
		xMessage.u.xTimerParameters.pxTimer = xTimer;
 8008d2e:	68fb      	ldr	r3, [r7, #12]
 8008d30:	61bb      	str	r3, [r7, #24]

		if( xCommandID < tmrFIRST_FROM_ISR_COMMAND )
 8008d32:	68bb      	ldr	r3, [r7, #8]
 8008d34:	2b05      	cmp	r3, #5
 8008d36:	dc18      	bgt.n	8008d6a <xTimerGenericCommand+0x7a>
		{
			if( xTaskGetSchedulerState() == taskSCHEDULER_RUNNING )
 8008d38:	f7ff fdb4 	bl	80088a4 <xTaskGetSchedulerState>
 8008d3c:	4603      	mov	r3, r0
 8008d3e:	2b02      	cmp	r3, #2
 8008d40:	d109      	bne.n	8008d56 <xTimerGenericCommand+0x66>
			{
				xReturn = xQueueSendToBack( xTimerQueue, &xMessage, xTicksToWait );
 8008d42:	4b11      	ldr	r3, [pc, #68]	; (8008d88 <xTimerGenericCommand+0x98>)
 8008d44:	6818      	ldr	r0, [r3, #0]
 8008d46:	f107 0110 	add.w	r1, r7, #16
 8008d4a:	2300      	movs	r3, #0
 8008d4c:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8008d4e:	f7fe f86b 	bl	8006e28 <xQueueGenericSend>
 8008d52:	6278      	str	r0, [r7, #36]	; 0x24
 8008d54:	e012      	b.n	8008d7c <xTimerGenericCommand+0x8c>
			}
			else
			{
				xReturn = xQueueSendToBack( xTimerQueue, &xMessage, tmrNO_DELAY );
 8008d56:	4b0c      	ldr	r3, [pc, #48]	; (8008d88 <xTimerGenericCommand+0x98>)
 8008d58:	6818      	ldr	r0, [r3, #0]
 8008d5a:	f107 0110 	add.w	r1, r7, #16
 8008d5e:	2300      	movs	r3, #0
 8008d60:	2200      	movs	r2, #0
 8008d62:	f7fe f861 	bl	8006e28 <xQueueGenericSend>
 8008d66:	6278      	str	r0, [r7, #36]	; 0x24
 8008d68:	e008      	b.n	8008d7c <xTimerGenericCommand+0x8c>
			}
		}
		else
		{
			xReturn = xQueueSendToBackFromISR( xTimerQueue, &xMessage, pxHigherPriorityTaskWoken );
 8008d6a:	4b07      	ldr	r3, [pc, #28]	; (8008d88 <xTimerGenericCommand+0x98>)
 8008d6c:	6818      	ldr	r0, [r3, #0]
 8008d6e:	f107 0110 	add.w	r1, r7, #16
 8008d72:	2300      	movs	r3, #0
 8008d74:	683a      	ldr	r2, [r7, #0]
 8008d76:	f7fe f955 	bl	8007024 <xQueueGenericSendFromISR>
 8008d7a:	6278      	str	r0, [r7, #36]	; 0x24
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	return xReturn;
 8008d7c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
}
 8008d7e:	4618      	mov	r0, r3
 8008d80:	3728      	adds	r7, #40	; 0x28
 8008d82:	46bd      	mov	sp, r7
 8008d84:	bd80      	pop	{r7, pc}
 8008d86:	bf00      	nop
 8008d88:	24001294 	.word	0x24001294

08008d8c <prvProcessExpiredTimer>:
	return pxTimer->pcTimerName;
}
/*-----------------------------------------------------------*/

static void prvProcessExpiredTimer( const TickType_t xNextExpireTime, const TickType_t xTimeNow )
{
 8008d8c:	b580      	push	{r7, lr}
 8008d8e:	b088      	sub	sp, #32
 8008d90:	af02      	add	r7, sp, #8
 8008d92:	6078      	str	r0, [r7, #4]
 8008d94:	6039      	str	r1, [r7, #0]
BaseType_t xResult;
Timer_t * const pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList ); /*lint !e9087 !e9079 void * is used as this macro is used with tasks and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8008d96:	4b22      	ldr	r3, [pc, #136]	; (8008e20 <prvProcessExpiredTimer+0x94>)
 8008d98:	681b      	ldr	r3, [r3, #0]
 8008d9a:	68db      	ldr	r3, [r3, #12]
 8008d9c:	68db      	ldr	r3, [r3, #12]
 8008d9e:	617b      	str	r3, [r7, #20]

	/* Remove the timer from the list of active timers.  A check has already
	been performed to ensure the list is not empty. */
	( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 8008da0:	697b      	ldr	r3, [r7, #20]
 8008da2:	3304      	adds	r3, #4
 8008da4:	4618      	mov	r0, r3
 8008da6:	f7fd fe6d 	bl	8006a84 <uxListRemove>
	traceTIMER_EXPIRED( pxTimer );

	/* If the timer is an auto-reload timer then calculate the next
	expiry time and re-insert the timer in the list of active timers. */
	if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 8008daa:	697b      	ldr	r3, [r7, #20]
 8008dac:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8008db0:	f003 0304 	and.w	r3, r3, #4
 8008db4:	2b00      	cmp	r3, #0
 8008db6:	d022      	beq.n	8008dfe <prvProcessExpiredTimer+0x72>
	{
		/* The timer is inserted into a list using a time relative to anything
		other than the current time.  It will therefore be inserted into the
		correct list relative to the time this task thinks it is now. */
		if( prvInsertTimerInActiveList( pxTimer, ( xNextExpireTime + pxTimer->xTimerPeriodInTicks ), xTimeNow, xNextExpireTime ) != pdFALSE )
 8008db8:	697b      	ldr	r3, [r7, #20]
 8008dba:	699a      	ldr	r2, [r3, #24]
 8008dbc:	687b      	ldr	r3, [r7, #4]
 8008dbe:	18d1      	adds	r1, r2, r3
 8008dc0:	687b      	ldr	r3, [r7, #4]
 8008dc2:	683a      	ldr	r2, [r7, #0]
 8008dc4:	6978      	ldr	r0, [r7, #20]
 8008dc6:	f000 f8d1 	bl	8008f6c <prvInsertTimerInActiveList>
 8008dca:	4603      	mov	r3, r0
 8008dcc:	2b00      	cmp	r3, #0
 8008dce:	d01f      	beq.n	8008e10 <prvProcessExpiredTimer+0x84>
		{
			/* The timer expired before it was added to the active timer
			list.  Reload it now.  */
			xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
 8008dd0:	2300      	movs	r3, #0
 8008dd2:	9300      	str	r3, [sp, #0]
 8008dd4:	2300      	movs	r3, #0
 8008dd6:	687a      	ldr	r2, [r7, #4]
 8008dd8:	2100      	movs	r1, #0
 8008dda:	6978      	ldr	r0, [r7, #20]
 8008ddc:	f7ff ff88 	bl	8008cf0 <xTimerGenericCommand>
 8008de0:	6138      	str	r0, [r7, #16]
			configASSERT( xResult );
 8008de2:	693b      	ldr	r3, [r7, #16]
 8008de4:	2b00      	cmp	r3, #0
 8008de6:	d113      	bne.n	8008e10 <prvProcessExpiredTimer+0x84>
	__asm volatile
 8008de8:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008dec:	f383 8811 	msr	BASEPRI, r3
 8008df0:	f3bf 8f6f 	isb	sy
 8008df4:	f3bf 8f4f 	dsb	sy
 8008df8:	60fb      	str	r3, [r7, #12]
}
 8008dfa:	bf00      	nop
 8008dfc:	e7fe      	b.n	8008dfc <prvProcessExpiredTimer+0x70>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	else
	{
		pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 8008dfe:	697b      	ldr	r3, [r7, #20]
 8008e00:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8008e04:	f023 0301 	bic.w	r3, r3, #1
 8008e08:	b2da      	uxtb	r2, r3
 8008e0a:	697b      	ldr	r3, [r7, #20]
 8008e0c:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
		mtCOVERAGE_TEST_MARKER();
	}

	/* Call the timer callback. */
	pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 8008e10:	697b      	ldr	r3, [r7, #20]
 8008e12:	6a1b      	ldr	r3, [r3, #32]
 8008e14:	6978      	ldr	r0, [r7, #20]
 8008e16:	4798      	blx	r3
}
 8008e18:	bf00      	nop
 8008e1a:	3718      	adds	r7, #24
 8008e1c:	46bd      	mov	sp, r7
 8008e1e:	bd80      	pop	{r7, pc}
 8008e20:	2400128c 	.word	0x2400128c

08008e24 <prvTimerTask>:
/*-----------------------------------------------------------*/

static portTASK_FUNCTION( prvTimerTask, pvParameters )
{
 8008e24:	b580      	push	{r7, lr}
 8008e26:	b084      	sub	sp, #16
 8008e28:	af00      	add	r7, sp, #0
 8008e2a:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* Query the timers list to see if it contains any timers, and if so,
		obtain the time at which the next timer will expire. */
		xNextExpireTime = prvGetNextExpireTime( &xListWasEmpty );
 8008e2c:	f107 0308 	add.w	r3, r7, #8
 8008e30:	4618      	mov	r0, r3
 8008e32:	f000 f857 	bl	8008ee4 <prvGetNextExpireTime>
 8008e36:	60f8      	str	r0, [r7, #12]

		/* If a timer has expired, process it.  Otherwise, block this task
		until either a timer does expire, or a command is received. */
		prvProcessTimerOrBlockTask( xNextExpireTime, xListWasEmpty );
 8008e38:	68bb      	ldr	r3, [r7, #8]
 8008e3a:	4619      	mov	r1, r3
 8008e3c:	68f8      	ldr	r0, [r7, #12]
 8008e3e:	f000 f803 	bl	8008e48 <prvProcessTimerOrBlockTask>

		/* Empty the command queue. */
		prvProcessReceivedCommands();
 8008e42:	f000 f8d5 	bl	8008ff0 <prvProcessReceivedCommands>
		xNextExpireTime = prvGetNextExpireTime( &xListWasEmpty );
 8008e46:	e7f1      	b.n	8008e2c <prvTimerTask+0x8>

08008e48 <prvProcessTimerOrBlockTask>:
	}
}
/*-----------------------------------------------------------*/

static void prvProcessTimerOrBlockTask( const TickType_t xNextExpireTime, BaseType_t xListWasEmpty )
{
 8008e48:	b580      	push	{r7, lr}
 8008e4a:	b084      	sub	sp, #16
 8008e4c:	af00      	add	r7, sp, #0
 8008e4e:	6078      	str	r0, [r7, #4]
 8008e50:	6039      	str	r1, [r7, #0]
TickType_t xTimeNow;
BaseType_t xTimerListsWereSwitched;

	vTaskSuspendAll();
 8008e52:	f7ff f93b 	bl	80080cc <vTaskSuspendAll>
		/* Obtain the time now to make an assessment as to whether the timer
		has expired or not.  If obtaining the time causes the lists to switch
		then don't process this timer as any timers that remained in the list
		when the lists were switched will have been processed within the
		prvSampleTimeNow() function. */
		xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
 8008e56:	f107 0308 	add.w	r3, r7, #8
 8008e5a:	4618      	mov	r0, r3
 8008e5c:	f000 f866 	bl	8008f2c <prvSampleTimeNow>
 8008e60:	60f8      	str	r0, [r7, #12]
		if( xTimerListsWereSwitched == pdFALSE )
 8008e62:	68bb      	ldr	r3, [r7, #8]
 8008e64:	2b00      	cmp	r3, #0
 8008e66:	d130      	bne.n	8008eca <prvProcessTimerOrBlockTask+0x82>
		{
			/* The tick count has not overflowed, has the timer expired? */
			if( ( xListWasEmpty == pdFALSE ) && ( xNextExpireTime <= xTimeNow ) )
 8008e68:	683b      	ldr	r3, [r7, #0]
 8008e6a:	2b00      	cmp	r3, #0
 8008e6c:	d10a      	bne.n	8008e84 <prvProcessTimerOrBlockTask+0x3c>
 8008e6e:	687a      	ldr	r2, [r7, #4]
 8008e70:	68fb      	ldr	r3, [r7, #12]
 8008e72:	429a      	cmp	r2, r3
 8008e74:	d806      	bhi.n	8008e84 <prvProcessTimerOrBlockTask+0x3c>
			{
				( void ) xTaskResumeAll();
 8008e76:	f7ff f937 	bl	80080e8 <xTaskResumeAll>
				prvProcessExpiredTimer( xNextExpireTime, xTimeNow );
 8008e7a:	68f9      	ldr	r1, [r7, #12]
 8008e7c:	6878      	ldr	r0, [r7, #4]
 8008e7e:	f7ff ff85 	bl	8008d8c <prvProcessExpiredTimer>
		else
		{
			( void ) xTaskResumeAll();
		}
	}
}
 8008e82:	e024      	b.n	8008ece <prvProcessTimerOrBlockTask+0x86>
				if( xListWasEmpty != pdFALSE )
 8008e84:	683b      	ldr	r3, [r7, #0]
 8008e86:	2b00      	cmp	r3, #0
 8008e88:	d008      	beq.n	8008e9c <prvProcessTimerOrBlockTask+0x54>
					xListWasEmpty = listLIST_IS_EMPTY( pxOverflowTimerList );
 8008e8a:	4b13      	ldr	r3, [pc, #76]	; (8008ed8 <prvProcessTimerOrBlockTask+0x90>)
 8008e8c:	681b      	ldr	r3, [r3, #0]
 8008e8e:	681b      	ldr	r3, [r3, #0]
 8008e90:	2b00      	cmp	r3, #0
 8008e92:	d101      	bne.n	8008e98 <prvProcessTimerOrBlockTask+0x50>
 8008e94:	2301      	movs	r3, #1
 8008e96:	e000      	b.n	8008e9a <prvProcessTimerOrBlockTask+0x52>
 8008e98:	2300      	movs	r3, #0
 8008e9a:	603b      	str	r3, [r7, #0]
				vQueueWaitForMessageRestricted( xTimerQueue, ( xNextExpireTime - xTimeNow ), xListWasEmpty );
 8008e9c:	4b0f      	ldr	r3, [pc, #60]	; (8008edc <prvProcessTimerOrBlockTask+0x94>)
 8008e9e:	6818      	ldr	r0, [r3, #0]
 8008ea0:	687a      	ldr	r2, [r7, #4]
 8008ea2:	68fb      	ldr	r3, [r7, #12]
 8008ea4:	1ad3      	subs	r3, r2, r3
 8008ea6:	683a      	ldr	r2, [r7, #0]
 8008ea8:	4619      	mov	r1, r3
 8008eaa:	f7fe fdef 	bl	8007a8c <vQueueWaitForMessageRestricted>
				if( xTaskResumeAll() == pdFALSE )
 8008eae:	f7ff f91b 	bl	80080e8 <xTaskResumeAll>
 8008eb2:	4603      	mov	r3, r0
 8008eb4:	2b00      	cmp	r3, #0
 8008eb6:	d10a      	bne.n	8008ece <prvProcessTimerOrBlockTask+0x86>
					portYIELD_WITHIN_API();
 8008eb8:	4b09      	ldr	r3, [pc, #36]	; (8008ee0 <prvProcessTimerOrBlockTask+0x98>)
 8008eba:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8008ebe:	601a      	str	r2, [r3, #0]
 8008ec0:	f3bf 8f4f 	dsb	sy
 8008ec4:	f3bf 8f6f 	isb	sy
}
 8008ec8:	e001      	b.n	8008ece <prvProcessTimerOrBlockTask+0x86>
			( void ) xTaskResumeAll();
 8008eca:	f7ff f90d 	bl	80080e8 <xTaskResumeAll>
}
 8008ece:	bf00      	nop
 8008ed0:	3710      	adds	r7, #16
 8008ed2:	46bd      	mov	sp, r7
 8008ed4:	bd80      	pop	{r7, pc}
 8008ed6:	bf00      	nop
 8008ed8:	24001290 	.word	0x24001290
 8008edc:	24001294 	.word	0x24001294
 8008ee0:	e000ed04 	.word	0xe000ed04

08008ee4 <prvGetNextExpireTime>:
/*-----------------------------------------------------------*/

static TickType_t prvGetNextExpireTime( BaseType_t * const pxListWasEmpty )
{
 8008ee4:	b480      	push	{r7}
 8008ee6:	b085      	sub	sp, #20
 8008ee8:	af00      	add	r7, sp, #0
 8008eea:	6078      	str	r0, [r7, #4]
	the timer with the nearest expiry time will expire.  If there are no
	active timers then just set the next expire time to 0.  That will cause
	this task to unblock when the tick count overflows, at which point the
	timer lists will be switched and the next expiry time can be
	re-assessed.  */
	*pxListWasEmpty = listLIST_IS_EMPTY( pxCurrentTimerList );
 8008eec:	4b0e      	ldr	r3, [pc, #56]	; (8008f28 <prvGetNextExpireTime+0x44>)
 8008eee:	681b      	ldr	r3, [r3, #0]
 8008ef0:	681b      	ldr	r3, [r3, #0]
 8008ef2:	2b00      	cmp	r3, #0
 8008ef4:	d101      	bne.n	8008efa <prvGetNextExpireTime+0x16>
 8008ef6:	2201      	movs	r2, #1
 8008ef8:	e000      	b.n	8008efc <prvGetNextExpireTime+0x18>
 8008efa:	2200      	movs	r2, #0
 8008efc:	687b      	ldr	r3, [r7, #4]
 8008efe:	601a      	str	r2, [r3, #0]
	if( *pxListWasEmpty == pdFALSE )
 8008f00:	687b      	ldr	r3, [r7, #4]
 8008f02:	681b      	ldr	r3, [r3, #0]
 8008f04:	2b00      	cmp	r3, #0
 8008f06:	d105      	bne.n	8008f14 <prvGetNextExpireTime+0x30>
	{
		xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 8008f08:	4b07      	ldr	r3, [pc, #28]	; (8008f28 <prvGetNextExpireTime+0x44>)
 8008f0a:	681b      	ldr	r3, [r3, #0]
 8008f0c:	68db      	ldr	r3, [r3, #12]
 8008f0e:	681b      	ldr	r3, [r3, #0]
 8008f10:	60fb      	str	r3, [r7, #12]
 8008f12:	e001      	b.n	8008f18 <prvGetNextExpireTime+0x34>
	}
	else
	{
		/* Ensure the task unblocks when the tick count rolls over. */
		xNextExpireTime = ( TickType_t ) 0U;
 8008f14:	2300      	movs	r3, #0
 8008f16:	60fb      	str	r3, [r7, #12]
	}

	return xNextExpireTime;
 8008f18:	68fb      	ldr	r3, [r7, #12]
}
 8008f1a:	4618      	mov	r0, r3
 8008f1c:	3714      	adds	r7, #20
 8008f1e:	46bd      	mov	sp, r7
 8008f20:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008f24:	4770      	bx	lr
 8008f26:	bf00      	nop
 8008f28:	2400128c 	.word	0x2400128c

08008f2c <prvSampleTimeNow>:
/*-----------------------------------------------------------*/

static TickType_t prvSampleTimeNow( BaseType_t * const pxTimerListsWereSwitched )
{
 8008f2c:	b580      	push	{r7, lr}
 8008f2e:	b084      	sub	sp, #16
 8008f30:	af00      	add	r7, sp, #0
 8008f32:	6078      	str	r0, [r7, #4]
TickType_t xTimeNow;
PRIVILEGED_DATA static TickType_t xLastTime = ( TickType_t ) 0U; /*lint !e956 Variable is only accessible to one task. */

	xTimeNow = xTaskGetTickCount();
 8008f34:	f7ff f976 	bl	8008224 <xTaskGetTickCount>
 8008f38:	60f8      	str	r0, [r7, #12]

	if( xTimeNow < xLastTime )
 8008f3a:	4b0b      	ldr	r3, [pc, #44]	; (8008f68 <prvSampleTimeNow+0x3c>)
 8008f3c:	681b      	ldr	r3, [r3, #0]
 8008f3e:	68fa      	ldr	r2, [r7, #12]
 8008f40:	429a      	cmp	r2, r3
 8008f42:	d205      	bcs.n	8008f50 <prvSampleTimeNow+0x24>
	{
		prvSwitchTimerLists();
 8008f44:	f000 f936 	bl	80091b4 <prvSwitchTimerLists>
		*pxTimerListsWereSwitched = pdTRUE;
 8008f48:	687b      	ldr	r3, [r7, #4]
 8008f4a:	2201      	movs	r2, #1
 8008f4c:	601a      	str	r2, [r3, #0]
 8008f4e:	e002      	b.n	8008f56 <prvSampleTimeNow+0x2a>
	}
	else
	{
		*pxTimerListsWereSwitched = pdFALSE;
 8008f50:	687b      	ldr	r3, [r7, #4]
 8008f52:	2200      	movs	r2, #0
 8008f54:	601a      	str	r2, [r3, #0]
	}

	xLastTime = xTimeNow;
 8008f56:	4a04      	ldr	r2, [pc, #16]	; (8008f68 <prvSampleTimeNow+0x3c>)
 8008f58:	68fb      	ldr	r3, [r7, #12]
 8008f5a:	6013      	str	r3, [r2, #0]

	return xTimeNow;
 8008f5c:	68fb      	ldr	r3, [r7, #12]
}
 8008f5e:	4618      	mov	r0, r3
 8008f60:	3710      	adds	r7, #16
 8008f62:	46bd      	mov	sp, r7
 8008f64:	bd80      	pop	{r7, pc}
 8008f66:	bf00      	nop
 8008f68:	2400129c 	.word	0x2400129c

08008f6c <prvInsertTimerInActiveList>:
/*-----------------------------------------------------------*/

static BaseType_t prvInsertTimerInActiveList( Timer_t * const pxTimer, const TickType_t xNextExpiryTime, const TickType_t xTimeNow, const TickType_t xCommandTime )
{
 8008f6c:	b580      	push	{r7, lr}
 8008f6e:	b086      	sub	sp, #24
 8008f70:	af00      	add	r7, sp, #0
 8008f72:	60f8      	str	r0, [r7, #12]
 8008f74:	60b9      	str	r1, [r7, #8]
 8008f76:	607a      	str	r2, [r7, #4]
 8008f78:	603b      	str	r3, [r7, #0]
BaseType_t xProcessTimerNow = pdFALSE;
 8008f7a:	2300      	movs	r3, #0
 8008f7c:	617b      	str	r3, [r7, #20]

	listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xNextExpiryTime );
 8008f7e:	68fb      	ldr	r3, [r7, #12]
 8008f80:	68ba      	ldr	r2, [r7, #8]
 8008f82:	605a      	str	r2, [r3, #4]
	listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
 8008f84:	68fb      	ldr	r3, [r7, #12]
 8008f86:	68fa      	ldr	r2, [r7, #12]
 8008f88:	611a      	str	r2, [r3, #16]

	if( xNextExpiryTime <= xTimeNow )
 8008f8a:	68ba      	ldr	r2, [r7, #8]
 8008f8c:	687b      	ldr	r3, [r7, #4]
 8008f8e:	429a      	cmp	r2, r3
 8008f90:	d812      	bhi.n	8008fb8 <prvInsertTimerInActiveList+0x4c>
	{
		/* Has the expiry time elapsed between the command to start/reset a
		timer was issued, and the time the command was processed? */
		if( ( ( TickType_t ) ( xTimeNow - xCommandTime ) ) >= pxTimer->xTimerPeriodInTicks ) /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8008f92:	687a      	ldr	r2, [r7, #4]
 8008f94:	683b      	ldr	r3, [r7, #0]
 8008f96:	1ad2      	subs	r2, r2, r3
 8008f98:	68fb      	ldr	r3, [r7, #12]
 8008f9a:	699b      	ldr	r3, [r3, #24]
 8008f9c:	429a      	cmp	r2, r3
 8008f9e:	d302      	bcc.n	8008fa6 <prvInsertTimerInActiveList+0x3a>
		{
			/* The time between a command being issued and the command being
			processed actually exceeds the timers period.  */
			xProcessTimerNow = pdTRUE;
 8008fa0:	2301      	movs	r3, #1
 8008fa2:	617b      	str	r3, [r7, #20]
 8008fa4:	e01b      	b.n	8008fde <prvInsertTimerInActiveList+0x72>
		}
		else
		{
			vListInsert( pxOverflowTimerList, &( pxTimer->xTimerListItem ) );
 8008fa6:	4b10      	ldr	r3, [pc, #64]	; (8008fe8 <prvInsertTimerInActiveList+0x7c>)
 8008fa8:	681a      	ldr	r2, [r3, #0]
 8008faa:	68fb      	ldr	r3, [r7, #12]
 8008fac:	3304      	adds	r3, #4
 8008fae:	4619      	mov	r1, r3
 8008fb0:	4610      	mov	r0, r2
 8008fb2:	f7fd fd2e 	bl	8006a12 <vListInsert>
 8008fb6:	e012      	b.n	8008fde <prvInsertTimerInActiveList+0x72>
		}
	}
	else
	{
		if( ( xTimeNow < xCommandTime ) && ( xNextExpiryTime >= xCommandTime ) )
 8008fb8:	687a      	ldr	r2, [r7, #4]
 8008fba:	683b      	ldr	r3, [r7, #0]
 8008fbc:	429a      	cmp	r2, r3
 8008fbe:	d206      	bcs.n	8008fce <prvInsertTimerInActiveList+0x62>
 8008fc0:	68ba      	ldr	r2, [r7, #8]
 8008fc2:	683b      	ldr	r3, [r7, #0]
 8008fc4:	429a      	cmp	r2, r3
 8008fc6:	d302      	bcc.n	8008fce <prvInsertTimerInActiveList+0x62>
		{
			/* If, since the command was issued, the tick count has overflowed
			but the expiry time has not, then the timer must have already passed
			its expiry time and should be processed immediately. */
			xProcessTimerNow = pdTRUE;
 8008fc8:	2301      	movs	r3, #1
 8008fca:	617b      	str	r3, [r7, #20]
 8008fcc:	e007      	b.n	8008fde <prvInsertTimerInActiveList+0x72>
		}
		else
		{
			vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
 8008fce:	4b07      	ldr	r3, [pc, #28]	; (8008fec <prvInsertTimerInActiveList+0x80>)
 8008fd0:	681a      	ldr	r2, [r3, #0]
 8008fd2:	68fb      	ldr	r3, [r7, #12]
 8008fd4:	3304      	adds	r3, #4
 8008fd6:	4619      	mov	r1, r3
 8008fd8:	4610      	mov	r0, r2
 8008fda:	f7fd fd1a 	bl	8006a12 <vListInsert>
		}
	}

	return xProcessTimerNow;
 8008fde:	697b      	ldr	r3, [r7, #20]
}
 8008fe0:	4618      	mov	r0, r3
 8008fe2:	3718      	adds	r7, #24
 8008fe4:	46bd      	mov	sp, r7
 8008fe6:	bd80      	pop	{r7, pc}
 8008fe8:	24001290 	.word	0x24001290
 8008fec:	2400128c 	.word	0x2400128c

08008ff0 <prvProcessReceivedCommands>:
/*-----------------------------------------------------------*/

static void	prvProcessReceivedCommands( void )
{
 8008ff0:	b580      	push	{r7, lr}
 8008ff2:	b08e      	sub	sp, #56	; 0x38
 8008ff4:	af02      	add	r7, sp, #8
DaemonTaskMessage_t xMessage;
Timer_t *pxTimer;
BaseType_t xTimerListsWereSwitched, xResult;
TickType_t xTimeNow;

	while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
 8008ff6:	e0ca      	b.n	800918e <prvProcessReceivedCommands+0x19e>
	{
		#if ( INCLUDE_xTimerPendFunctionCall == 1 )
		{
			/* Negative commands are pended function calls rather than timer
			commands. */
			if( xMessage.xMessageID < ( BaseType_t ) 0 )
 8008ff8:	687b      	ldr	r3, [r7, #4]
 8008ffa:	2b00      	cmp	r3, #0
 8008ffc:	da18      	bge.n	8009030 <prvProcessReceivedCommands+0x40>
			{
				const CallbackParameters_t * const pxCallback = &( xMessage.u.xCallbackParameters );
 8008ffe:	1d3b      	adds	r3, r7, #4
 8009000:	3304      	adds	r3, #4
 8009002:	62fb      	str	r3, [r7, #44]	; 0x2c

				/* The timer uses the xCallbackParameters member to request a
				callback be executed.  Check the callback is not NULL. */
				configASSERT( pxCallback );
 8009004:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8009006:	2b00      	cmp	r3, #0
 8009008:	d10a      	bne.n	8009020 <prvProcessReceivedCommands+0x30>
	__asm volatile
 800900a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800900e:	f383 8811 	msr	BASEPRI, r3
 8009012:	f3bf 8f6f 	isb	sy
 8009016:	f3bf 8f4f 	dsb	sy
 800901a:	61fb      	str	r3, [r7, #28]
}
 800901c:	bf00      	nop
 800901e:	e7fe      	b.n	800901e <prvProcessReceivedCommands+0x2e>

				/* Call the function. */
				pxCallback->pxCallbackFunction( pxCallback->pvParameter1, pxCallback->ulParameter2 );
 8009020:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8009022:	681b      	ldr	r3, [r3, #0]
 8009024:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8009026:	6850      	ldr	r0, [r2, #4]
 8009028:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800902a:	6892      	ldr	r2, [r2, #8]
 800902c:	4611      	mov	r1, r2
 800902e:	4798      	blx	r3
		}
		#endif /* INCLUDE_xTimerPendFunctionCall */

		/* Commands that are positive are timer commands rather than pended
		function calls. */
		if( xMessage.xMessageID >= ( BaseType_t ) 0 )
 8009030:	687b      	ldr	r3, [r7, #4]
 8009032:	2b00      	cmp	r3, #0
 8009034:	f2c0 80aa 	blt.w	800918c <prvProcessReceivedCommands+0x19c>
		{
			/* The messages uses the xTimerParameters member to work on a
			software timer. */
			pxTimer = xMessage.u.xTimerParameters.pxTimer;
 8009038:	68fb      	ldr	r3, [r7, #12]
 800903a:	62bb      	str	r3, [r7, #40]	; 0x28

			if( listIS_CONTAINED_WITHIN( NULL, &( pxTimer->xTimerListItem ) ) == pdFALSE ) /*lint !e961. The cast is only redundant when NULL is passed into the macro. */
 800903c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800903e:	695b      	ldr	r3, [r3, #20]
 8009040:	2b00      	cmp	r3, #0
 8009042:	d004      	beq.n	800904e <prvProcessReceivedCommands+0x5e>
			{
				/* The timer is in a list, remove it. */
				( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 8009044:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8009046:	3304      	adds	r3, #4
 8009048:	4618      	mov	r0, r3
 800904a:	f7fd fd1b 	bl	8006a84 <uxListRemove>
			it must be present in the function call.  prvSampleTimeNow() must be
			called after the message is received from xTimerQueue so there is no
			possibility of a higher priority task adding a message to the message
			queue with a time that is ahead of the timer daemon task (because it
			pre-empted the timer daemon task after the xTimeNow value was set). */
			xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
 800904e:	463b      	mov	r3, r7
 8009050:	4618      	mov	r0, r3
 8009052:	f7ff ff6b 	bl	8008f2c <prvSampleTimeNow>
 8009056:	6278      	str	r0, [r7, #36]	; 0x24

			switch( xMessage.xMessageID )
 8009058:	687b      	ldr	r3, [r7, #4]
 800905a:	2b09      	cmp	r3, #9
 800905c:	f200 8097 	bhi.w	800918e <prvProcessReceivedCommands+0x19e>
 8009060:	a201      	add	r2, pc, #4	; (adr r2, 8009068 <prvProcessReceivedCommands+0x78>)
 8009062:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8009066:	bf00      	nop
 8009068:	08009091 	.word	0x08009091
 800906c:	08009091 	.word	0x08009091
 8009070:	08009091 	.word	0x08009091
 8009074:	08009105 	.word	0x08009105
 8009078:	08009119 	.word	0x08009119
 800907c:	08009163 	.word	0x08009163
 8009080:	08009091 	.word	0x08009091
 8009084:	08009091 	.word	0x08009091
 8009088:	08009105 	.word	0x08009105
 800908c:	08009119 	.word	0x08009119
				case tmrCOMMAND_START_FROM_ISR :
				case tmrCOMMAND_RESET :
				case tmrCOMMAND_RESET_FROM_ISR :
				case tmrCOMMAND_START_DONT_TRACE :
					/* Start or restart a timer. */
					pxTimer->ucStatus |= tmrSTATUS_IS_ACTIVE;
 8009090:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8009092:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8009096:	f043 0301 	orr.w	r3, r3, #1
 800909a:	b2da      	uxtb	r2, r3
 800909c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800909e:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
					if( prvInsertTimerInActiveList( pxTimer,  xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, xTimeNow, xMessage.u.xTimerParameters.xMessageValue ) != pdFALSE )
 80090a2:	68ba      	ldr	r2, [r7, #8]
 80090a4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80090a6:	699b      	ldr	r3, [r3, #24]
 80090a8:	18d1      	adds	r1, r2, r3
 80090aa:	68bb      	ldr	r3, [r7, #8]
 80090ac:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80090ae:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 80090b0:	f7ff ff5c 	bl	8008f6c <prvInsertTimerInActiveList>
 80090b4:	4603      	mov	r3, r0
 80090b6:	2b00      	cmp	r3, #0
 80090b8:	d069      	beq.n	800918e <prvProcessReceivedCommands+0x19e>
					{
						/* The timer expired before it was added to the active
						timer list.  Process it now. */
						pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 80090ba:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80090bc:	6a1b      	ldr	r3, [r3, #32]
 80090be:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 80090c0:	4798      	blx	r3
						traceTIMER_EXPIRED( pxTimer );

						if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 80090c2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80090c4:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 80090c8:	f003 0304 	and.w	r3, r3, #4
 80090cc:	2b00      	cmp	r3, #0
 80090ce:	d05e      	beq.n	800918e <prvProcessReceivedCommands+0x19e>
						{
							xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, NULL, tmrNO_DELAY );
 80090d0:	68ba      	ldr	r2, [r7, #8]
 80090d2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80090d4:	699b      	ldr	r3, [r3, #24]
 80090d6:	441a      	add	r2, r3
 80090d8:	2300      	movs	r3, #0
 80090da:	9300      	str	r3, [sp, #0]
 80090dc:	2300      	movs	r3, #0
 80090de:	2100      	movs	r1, #0
 80090e0:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 80090e2:	f7ff fe05 	bl	8008cf0 <xTimerGenericCommand>
 80090e6:	6238      	str	r0, [r7, #32]
							configASSERT( xResult );
 80090e8:	6a3b      	ldr	r3, [r7, #32]
 80090ea:	2b00      	cmp	r3, #0
 80090ec:	d14f      	bne.n	800918e <prvProcessReceivedCommands+0x19e>
	__asm volatile
 80090ee:	f04f 0350 	mov.w	r3, #80	; 0x50
 80090f2:	f383 8811 	msr	BASEPRI, r3
 80090f6:	f3bf 8f6f 	isb	sy
 80090fa:	f3bf 8f4f 	dsb	sy
 80090fe:	61bb      	str	r3, [r7, #24]
}
 8009100:	bf00      	nop
 8009102:	e7fe      	b.n	8009102 <prvProcessReceivedCommands+0x112>
					break;

				case tmrCOMMAND_STOP :
				case tmrCOMMAND_STOP_FROM_ISR :
					/* The timer has already been removed from the active list. */
					pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 8009104:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8009106:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 800910a:	f023 0301 	bic.w	r3, r3, #1
 800910e:	b2da      	uxtb	r2, r3
 8009110:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8009112:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
					break;
 8009116:	e03a      	b.n	800918e <prvProcessReceivedCommands+0x19e>

				case tmrCOMMAND_CHANGE_PERIOD :
				case tmrCOMMAND_CHANGE_PERIOD_FROM_ISR :
					pxTimer->ucStatus |= tmrSTATUS_IS_ACTIVE;
 8009118:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800911a:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 800911e:	f043 0301 	orr.w	r3, r3, #1
 8009122:	b2da      	uxtb	r2, r3
 8009124:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8009126:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
					pxTimer->xTimerPeriodInTicks = xMessage.u.xTimerParameters.xMessageValue;
 800912a:	68ba      	ldr	r2, [r7, #8]
 800912c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800912e:	619a      	str	r2, [r3, #24]
					configASSERT( ( pxTimer->xTimerPeriodInTicks > 0 ) );
 8009130:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8009132:	699b      	ldr	r3, [r3, #24]
 8009134:	2b00      	cmp	r3, #0
 8009136:	d10a      	bne.n	800914e <prvProcessReceivedCommands+0x15e>
	__asm volatile
 8009138:	f04f 0350 	mov.w	r3, #80	; 0x50
 800913c:	f383 8811 	msr	BASEPRI, r3
 8009140:	f3bf 8f6f 	isb	sy
 8009144:	f3bf 8f4f 	dsb	sy
 8009148:	617b      	str	r3, [r7, #20]
}
 800914a:	bf00      	nop
 800914c:	e7fe      	b.n	800914c <prvProcessReceivedCommands+0x15c>
					be longer or shorter than the old one.  The command time is
					therefore set to the current time, and as the period cannot
					be zero the next expiry time can only be in the future,
					meaning (unlike for the xTimerStart() case above) there is
					no fail case that needs to be handled here. */
					( void ) prvInsertTimerInActiveList( pxTimer, ( xTimeNow + pxTimer->xTimerPeriodInTicks ), xTimeNow, xTimeNow );
 800914e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8009150:	699a      	ldr	r2, [r3, #24]
 8009152:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009154:	18d1      	adds	r1, r2, r3
 8009156:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009158:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800915a:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800915c:	f7ff ff06 	bl	8008f6c <prvInsertTimerInActiveList>
					break;
 8009160:	e015      	b.n	800918e <prvProcessReceivedCommands+0x19e>
					#if ( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
					{
						/* The timer has already been removed from the active list,
						just free up the memory if the memory was dynamically
						allocated. */
						if( ( pxTimer->ucStatus & tmrSTATUS_IS_STATICALLY_ALLOCATED ) == ( uint8_t ) 0 )
 8009162:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8009164:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8009168:	f003 0302 	and.w	r3, r3, #2
 800916c:	2b00      	cmp	r3, #0
 800916e:	d103      	bne.n	8009178 <prvProcessReceivedCommands+0x188>
						{
							vPortFree( pxTimer );
 8009170:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8009172:	f000 fbdd 	bl	8009930 <vPortFree>
 8009176:	e00a      	b.n	800918e <prvProcessReceivedCommands+0x19e>
						}
						else
						{
							pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 8009178:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800917a:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 800917e:	f023 0301 	bic.w	r3, r3, #1
 8009182:	b2da      	uxtb	r2, r3
 8009184:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8009186:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
						no need to free the memory - just mark the timer as
						"not active". */
						pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
					}
					#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
					break;
 800918a:	e000      	b.n	800918e <prvProcessReceivedCommands+0x19e>

				default	:
					/* Don't expect to get here. */
					break;
			}
		}
 800918c:	bf00      	nop
	while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
 800918e:	4b08      	ldr	r3, [pc, #32]	; (80091b0 <prvProcessReceivedCommands+0x1c0>)
 8009190:	681b      	ldr	r3, [r3, #0]
 8009192:	1d39      	adds	r1, r7, #4
 8009194:	2200      	movs	r2, #0
 8009196:	4618      	mov	r0, r3
 8009198:	f7fe f86c 	bl	8007274 <xQueueReceive>
 800919c:	4603      	mov	r3, r0
 800919e:	2b00      	cmp	r3, #0
 80091a0:	f47f af2a 	bne.w	8008ff8 <prvProcessReceivedCommands+0x8>
	}
}
 80091a4:	bf00      	nop
 80091a6:	bf00      	nop
 80091a8:	3730      	adds	r7, #48	; 0x30
 80091aa:	46bd      	mov	sp, r7
 80091ac:	bd80      	pop	{r7, pc}
 80091ae:	bf00      	nop
 80091b0:	24001294 	.word	0x24001294

080091b4 <prvSwitchTimerLists>:
/*-----------------------------------------------------------*/

static void prvSwitchTimerLists( void )
{
 80091b4:	b580      	push	{r7, lr}
 80091b6:	b088      	sub	sp, #32
 80091b8:	af02      	add	r7, sp, #8

	/* The tick count has overflowed.  The timer lists must be switched.
	If there are any timers still referenced from the current timer list
	then they must have expired and should be processed before the lists
	are switched. */
	while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
 80091ba:	e048      	b.n	800924e <prvSwitchTimerLists+0x9a>
	{
		xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 80091bc:	4b2d      	ldr	r3, [pc, #180]	; (8009274 <prvSwitchTimerLists+0xc0>)
 80091be:	681b      	ldr	r3, [r3, #0]
 80091c0:	68db      	ldr	r3, [r3, #12]
 80091c2:	681b      	ldr	r3, [r3, #0]
 80091c4:	613b      	str	r3, [r7, #16]

		/* Remove the timer from the list. */
		pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList ); /*lint !e9087 !e9079 void * is used as this macro is used with tasks and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 80091c6:	4b2b      	ldr	r3, [pc, #172]	; (8009274 <prvSwitchTimerLists+0xc0>)
 80091c8:	681b      	ldr	r3, [r3, #0]
 80091ca:	68db      	ldr	r3, [r3, #12]
 80091cc:	68db      	ldr	r3, [r3, #12]
 80091ce:	60fb      	str	r3, [r7, #12]
		( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 80091d0:	68fb      	ldr	r3, [r7, #12]
 80091d2:	3304      	adds	r3, #4
 80091d4:	4618      	mov	r0, r3
 80091d6:	f7fd fc55 	bl	8006a84 <uxListRemove>
		traceTIMER_EXPIRED( pxTimer );

		/* Execute its callback, then send a command to restart the timer if
		it is an auto-reload timer.  It cannot be restarted here as the lists
		have not yet been switched. */
		pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 80091da:	68fb      	ldr	r3, [r7, #12]
 80091dc:	6a1b      	ldr	r3, [r3, #32]
 80091de:	68f8      	ldr	r0, [r7, #12]
 80091e0:	4798      	blx	r3

		if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 80091e2:	68fb      	ldr	r3, [r7, #12]
 80091e4:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 80091e8:	f003 0304 	and.w	r3, r3, #4
 80091ec:	2b00      	cmp	r3, #0
 80091ee:	d02e      	beq.n	800924e <prvSwitchTimerLists+0x9a>
			the timer going into the same timer list then it has already expired
			and the timer should be re-inserted into the current list so it is
			processed again within this loop.  Otherwise a command should be sent
			to restart the timer to ensure it is only inserted into a list after
			the lists have been swapped. */
			xReloadTime = ( xNextExpireTime + pxTimer->xTimerPeriodInTicks );
 80091f0:	68fb      	ldr	r3, [r7, #12]
 80091f2:	699b      	ldr	r3, [r3, #24]
 80091f4:	693a      	ldr	r2, [r7, #16]
 80091f6:	4413      	add	r3, r2
 80091f8:	60bb      	str	r3, [r7, #8]
			if( xReloadTime > xNextExpireTime )
 80091fa:	68ba      	ldr	r2, [r7, #8]
 80091fc:	693b      	ldr	r3, [r7, #16]
 80091fe:	429a      	cmp	r2, r3
 8009200:	d90e      	bls.n	8009220 <prvSwitchTimerLists+0x6c>
			{
				listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xReloadTime );
 8009202:	68fb      	ldr	r3, [r7, #12]
 8009204:	68ba      	ldr	r2, [r7, #8]
 8009206:	605a      	str	r2, [r3, #4]
				listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
 8009208:	68fb      	ldr	r3, [r7, #12]
 800920a:	68fa      	ldr	r2, [r7, #12]
 800920c:	611a      	str	r2, [r3, #16]
				vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
 800920e:	4b19      	ldr	r3, [pc, #100]	; (8009274 <prvSwitchTimerLists+0xc0>)
 8009210:	681a      	ldr	r2, [r3, #0]
 8009212:	68fb      	ldr	r3, [r7, #12]
 8009214:	3304      	adds	r3, #4
 8009216:	4619      	mov	r1, r3
 8009218:	4610      	mov	r0, r2
 800921a:	f7fd fbfa 	bl	8006a12 <vListInsert>
 800921e:	e016      	b.n	800924e <prvSwitchTimerLists+0x9a>
			}
			else
			{
				xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
 8009220:	2300      	movs	r3, #0
 8009222:	9300      	str	r3, [sp, #0]
 8009224:	2300      	movs	r3, #0
 8009226:	693a      	ldr	r2, [r7, #16]
 8009228:	2100      	movs	r1, #0
 800922a:	68f8      	ldr	r0, [r7, #12]
 800922c:	f7ff fd60 	bl	8008cf0 <xTimerGenericCommand>
 8009230:	6078      	str	r0, [r7, #4]
				configASSERT( xResult );
 8009232:	687b      	ldr	r3, [r7, #4]
 8009234:	2b00      	cmp	r3, #0
 8009236:	d10a      	bne.n	800924e <prvSwitchTimerLists+0x9a>
	__asm volatile
 8009238:	f04f 0350 	mov.w	r3, #80	; 0x50
 800923c:	f383 8811 	msr	BASEPRI, r3
 8009240:	f3bf 8f6f 	isb	sy
 8009244:	f3bf 8f4f 	dsb	sy
 8009248:	603b      	str	r3, [r7, #0]
}
 800924a:	bf00      	nop
 800924c:	e7fe      	b.n	800924c <prvSwitchTimerLists+0x98>
	while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
 800924e:	4b09      	ldr	r3, [pc, #36]	; (8009274 <prvSwitchTimerLists+0xc0>)
 8009250:	681b      	ldr	r3, [r3, #0]
 8009252:	681b      	ldr	r3, [r3, #0]
 8009254:	2b00      	cmp	r3, #0
 8009256:	d1b1      	bne.n	80091bc <prvSwitchTimerLists+0x8>
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	pxTemp = pxCurrentTimerList;
 8009258:	4b06      	ldr	r3, [pc, #24]	; (8009274 <prvSwitchTimerLists+0xc0>)
 800925a:	681b      	ldr	r3, [r3, #0]
 800925c:	617b      	str	r3, [r7, #20]
	pxCurrentTimerList = pxOverflowTimerList;
 800925e:	4b06      	ldr	r3, [pc, #24]	; (8009278 <prvSwitchTimerLists+0xc4>)
 8009260:	681b      	ldr	r3, [r3, #0]
 8009262:	4a04      	ldr	r2, [pc, #16]	; (8009274 <prvSwitchTimerLists+0xc0>)
 8009264:	6013      	str	r3, [r2, #0]
	pxOverflowTimerList = pxTemp;
 8009266:	4a04      	ldr	r2, [pc, #16]	; (8009278 <prvSwitchTimerLists+0xc4>)
 8009268:	697b      	ldr	r3, [r7, #20]
 800926a:	6013      	str	r3, [r2, #0]
}
 800926c:	bf00      	nop
 800926e:	3718      	adds	r7, #24
 8009270:	46bd      	mov	sp, r7
 8009272:	bd80      	pop	{r7, pc}
 8009274:	2400128c 	.word	0x2400128c
 8009278:	24001290 	.word	0x24001290

0800927c <prvCheckForValidListAndQueue>:
/*-----------------------------------------------------------*/

static void prvCheckForValidListAndQueue( void )
{
 800927c:	b580      	push	{r7, lr}
 800927e:	b082      	sub	sp, #8
 8009280:	af02      	add	r7, sp, #8
	/* Check that the list from which active timers are referenced, and the
	queue used to communicate with the timer service, have been
	initialised. */
	taskENTER_CRITICAL();
 8009282:	f000 f967 	bl	8009554 <vPortEnterCritical>
	{
		if( xTimerQueue == NULL )
 8009286:	4b15      	ldr	r3, [pc, #84]	; (80092dc <prvCheckForValidListAndQueue+0x60>)
 8009288:	681b      	ldr	r3, [r3, #0]
 800928a:	2b00      	cmp	r3, #0
 800928c:	d120      	bne.n	80092d0 <prvCheckForValidListAndQueue+0x54>
		{
			vListInitialise( &xActiveTimerList1 );
 800928e:	4814      	ldr	r0, [pc, #80]	; (80092e0 <prvCheckForValidListAndQueue+0x64>)
 8009290:	f7fd fb6e 	bl	8006970 <vListInitialise>
			vListInitialise( &xActiveTimerList2 );
 8009294:	4813      	ldr	r0, [pc, #76]	; (80092e4 <prvCheckForValidListAndQueue+0x68>)
 8009296:	f7fd fb6b 	bl	8006970 <vListInitialise>
			pxCurrentTimerList = &xActiveTimerList1;
 800929a:	4b13      	ldr	r3, [pc, #76]	; (80092e8 <prvCheckForValidListAndQueue+0x6c>)
 800929c:	4a10      	ldr	r2, [pc, #64]	; (80092e0 <prvCheckForValidListAndQueue+0x64>)
 800929e:	601a      	str	r2, [r3, #0]
			pxOverflowTimerList = &xActiveTimerList2;
 80092a0:	4b12      	ldr	r3, [pc, #72]	; (80092ec <prvCheckForValidListAndQueue+0x70>)
 80092a2:	4a10      	ldr	r2, [pc, #64]	; (80092e4 <prvCheckForValidListAndQueue+0x68>)
 80092a4:	601a      	str	r2, [r3, #0]
				/* The timer queue is allocated statically in case
				configSUPPORT_DYNAMIC_ALLOCATION is 0. */
				static StaticQueue_t xStaticTimerQueue; /*lint !e956 Ok to declare in this manner to prevent additional conditional compilation guards in other locations. */
				static uint8_t ucStaticTimerQueueStorage[ ( size_t ) configTIMER_QUEUE_LENGTH * sizeof( DaemonTaskMessage_t ) ]; /*lint !e956 Ok to declare in this manner to prevent additional conditional compilation guards in other locations. */

				xTimerQueue = xQueueCreateStatic( ( UBaseType_t ) configTIMER_QUEUE_LENGTH, ( UBaseType_t ) sizeof( DaemonTaskMessage_t ), &( ucStaticTimerQueueStorage[ 0 ] ), &xStaticTimerQueue );
 80092a6:	2300      	movs	r3, #0
 80092a8:	9300      	str	r3, [sp, #0]
 80092aa:	4b11      	ldr	r3, [pc, #68]	; (80092f0 <prvCheckForValidListAndQueue+0x74>)
 80092ac:	4a11      	ldr	r2, [pc, #68]	; (80092f4 <prvCheckForValidListAndQueue+0x78>)
 80092ae:	2110      	movs	r1, #16
 80092b0:	200a      	movs	r0, #10
 80092b2:	f7fd fc79 	bl	8006ba8 <xQueueGenericCreateStatic>
 80092b6:	4603      	mov	r3, r0
 80092b8:	4a08      	ldr	r2, [pc, #32]	; (80092dc <prvCheckForValidListAndQueue+0x60>)
 80092ba:	6013      	str	r3, [r2, #0]
			}
			#endif

			#if ( configQUEUE_REGISTRY_SIZE > 0 )
			{
				if( xTimerQueue != NULL )
 80092bc:	4b07      	ldr	r3, [pc, #28]	; (80092dc <prvCheckForValidListAndQueue+0x60>)
 80092be:	681b      	ldr	r3, [r3, #0]
 80092c0:	2b00      	cmp	r3, #0
 80092c2:	d005      	beq.n	80092d0 <prvCheckForValidListAndQueue+0x54>
				{
					vQueueAddToRegistry( xTimerQueue, "TmrQ" );
 80092c4:	4b05      	ldr	r3, [pc, #20]	; (80092dc <prvCheckForValidListAndQueue+0x60>)
 80092c6:	681b      	ldr	r3, [r3, #0]
 80092c8:	490b      	ldr	r1, [pc, #44]	; (80092f8 <prvCheckForValidListAndQueue+0x7c>)
 80092ca:	4618      	mov	r0, r3
 80092cc:	f7fe fb8a 	bl	80079e4 <vQueueAddToRegistry>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 80092d0:	f000 f970 	bl	80095b4 <vPortExitCritical>
}
 80092d4:	bf00      	nop
 80092d6:	46bd      	mov	sp, r7
 80092d8:	bd80      	pop	{r7, pc}
 80092da:	bf00      	nop
 80092dc:	24001294 	.word	0x24001294
 80092e0:	24001264 	.word	0x24001264
 80092e4:	24001278 	.word	0x24001278
 80092e8:	2400128c 	.word	0x2400128c
 80092ec:	24001290 	.word	0x24001290
 80092f0:	24001340 	.word	0x24001340
 80092f4:	240012a0 	.word	0x240012a0
 80092f8:	0800b058 	.word	0x0800b058

080092fc <pxPortInitialiseStack>:

/*
 * See header file for description.
 */
StackType_t *pxPortInitialiseStack( StackType_t *pxTopOfStack, TaskFunction_t pxCode, void *pvParameters )
{
 80092fc:	b480      	push	{r7}
 80092fe:	b085      	sub	sp, #20
 8009300:	af00      	add	r7, sp, #0
 8009302:	60f8      	str	r0, [r7, #12]
 8009304:	60b9      	str	r1, [r7, #8]
 8009306:	607a      	str	r2, [r7, #4]
	/* Simulate the stack frame as it would be created by a context switch
	interrupt. */

	/* Offset added to account for the way the MCU uses the stack on entry/exit
	of interrupts, and to ensure alignment. */
	pxTopOfStack--;
 8009308:	68fb      	ldr	r3, [r7, #12]
 800930a:	3b04      	subs	r3, #4
 800930c:	60fb      	str	r3, [r7, #12]

	*pxTopOfStack = portINITIAL_XPSR;	/* xPSR */
 800930e:	68fb      	ldr	r3, [r7, #12]
 8009310:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 8009314:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 8009316:	68fb      	ldr	r3, [r7, #12]
 8009318:	3b04      	subs	r3, #4
 800931a:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( ( StackType_t ) pxCode ) & portSTART_ADDRESS_MASK;	/* PC */
 800931c:	68bb      	ldr	r3, [r7, #8]
 800931e:	f023 0201 	bic.w	r2, r3, #1
 8009322:	68fb      	ldr	r3, [r7, #12]
 8009324:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 8009326:	68fb      	ldr	r3, [r7, #12]
 8009328:	3b04      	subs	r3, #4
 800932a:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) portTASK_RETURN_ADDRESS;	/* LR */
 800932c:	4a0c      	ldr	r2, [pc, #48]	; (8009360 <pxPortInitialiseStack+0x64>)
 800932e:	68fb      	ldr	r3, [r7, #12]
 8009330:	601a      	str	r2, [r3, #0]

	/* Save code space by skipping register initialisation. */
	pxTopOfStack -= 5;	/* R12, R3, R2 and R1. */
 8009332:	68fb      	ldr	r3, [r7, #12]
 8009334:	3b14      	subs	r3, #20
 8009336:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) pvParameters;	/* R0 */
 8009338:	687a      	ldr	r2, [r7, #4]
 800933a:	68fb      	ldr	r3, [r7, #12]
 800933c:	601a      	str	r2, [r3, #0]

	/* A save method is being used that requires each task to maintain its
	own exec return value. */
	pxTopOfStack--;
 800933e:	68fb      	ldr	r3, [r7, #12]
 8009340:	3b04      	subs	r3, #4
 8009342:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = portINITIAL_EXC_RETURN;
 8009344:	68fb      	ldr	r3, [r7, #12]
 8009346:	f06f 0202 	mvn.w	r2, #2
 800934a:	601a      	str	r2, [r3, #0]

	pxTopOfStack -= 8;	/* R11, R10, R9, R8, R7, R6, R5 and R4. */
 800934c:	68fb      	ldr	r3, [r7, #12]
 800934e:	3b20      	subs	r3, #32
 8009350:	60fb      	str	r3, [r7, #12]

	return pxTopOfStack;
 8009352:	68fb      	ldr	r3, [r7, #12]
}
 8009354:	4618      	mov	r0, r3
 8009356:	3714      	adds	r7, #20
 8009358:	46bd      	mov	sp, r7
 800935a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800935e:	4770      	bx	lr
 8009360:	08009365 	.word	0x08009365

08009364 <prvTaskExitError>:
/*-----------------------------------------------------------*/

static void prvTaskExitError( void )
{
 8009364:	b480      	push	{r7}
 8009366:	b085      	sub	sp, #20
 8009368:	af00      	add	r7, sp, #0
volatile uint32_t ulDummy = 0;
 800936a:	2300      	movs	r3, #0
 800936c:	607b      	str	r3, [r7, #4]
	its caller as there is nothing to return to.  If a task wants to exit it
	should instead call vTaskDelete( NULL ).

	Artificially force an assert() to be triggered if configASSERT() is
	defined, then stop here so application writers can catch the error. */
	configASSERT( uxCriticalNesting == ~0UL );
 800936e:	4b12      	ldr	r3, [pc, #72]	; (80093b8 <prvTaskExitError+0x54>)
 8009370:	681b      	ldr	r3, [r3, #0]
 8009372:	f1b3 3fff 	cmp.w	r3, #4294967295
 8009376:	d00a      	beq.n	800938e <prvTaskExitError+0x2a>
	__asm volatile
 8009378:	f04f 0350 	mov.w	r3, #80	; 0x50
 800937c:	f383 8811 	msr	BASEPRI, r3
 8009380:	f3bf 8f6f 	isb	sy
 8009384:	f3bf 8f4f 	dsb	sy
 8009388:	60fb      	str	r3, [r7, #12]
}
 800938a:	bf00      	nop
 800938c:	e7fe      	b.n	800938c <prvTaskExitError+0x28>
	__asm volatile
 800938e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009392:	f383 8811 	msr	BASEPRI, r3
 8009396:	f3bf 8f6f 	isb	sy
 800939a:	f3bf 8f4f 	dsb	sy
 800939e:	60bb      	str	r3, [r7, #8]
}
 80093a0:	bf00      	nop
	portDISABLE_INTERRUPTS();
	while( ulDummy == 0 )
 80093a2:	bf00      	nop
 80093a4:	687b      	ldr	r3, [r7, #4]
 80093a6:	2b00      	cmp	r3, #0
 80093a8:	d0fc      	beq.n	80093a4 <prvTaskExitError+0x40>
		about code appearing after this function is called - making ulDummy
		volatile makes the compiler think the function could return and
		therefore not output an 'unreachable code' warning for code that appears
		after it. */
	}
}
 80093aa:	bf00      	nop
 80093ac:	bf00      	nop
 80093ae:	3714      	adds	r7, #20
 80093b0:	46bd      	mov	sp, r7
 80093b2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80093b6:	4770      	bx	lr
 80093b8:	24000010 	.word	0x24000010
 80093bc:	00000000 	.word	0x00000000

080093c0 <SVC_Handler>:
/*-----------------------------------------------------------*/

void vPortSVCHandler( void )
{
	__asm volatile (
 80093c0:	4b07      	ldr	r3, [pc, #28]	; (80093e0 <pxCurrentTCBConst2>)
 80093c2:	6819      	ldr	r1, [r3, #0]
 80093c4:	6808      	ldr	r0, [r1, #0]
 80093c6:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80093ca:	f380 8809 	msr	PSP, r0
 80093ce:	f3bf 8f6f 	isb	sy
 80093d2:	f04f 0000 	mov.w	r0, #0
 80093d6:	f380 8811 	msr	BASEPRI, r0
 80093da:	4770      	bx	lr
 80093dc:	f3af 8000 	nop.w

080093e0 <pxCurrentTCBConst2>:
 80093e0:	24000d64 	.word	0x24000d64
					"	bx r14							\n"
					"									\n"
					"	.align 4						\n"
					"pxCurrentTCBConst2: .word pxCurrentTCB				\n"
				);
}
 80093e4:	bf00      	nop
 80093e6:	bf00      	nop

080093e8 <prvPortStartFirstTask>:
{
	/* Start the first task.  This also clears the bit that indicates the FPU is
	in use in case the FPU was used before the scheduler was started - which
	would otherwise result in the unnecessary leaving of space in the SVC stack
	for lazy saving of FPU registers. */
	__asm volatile(
 80093e8:	4808      	ldr	r0, [pc, #32]	; (800940c <prvPortStartFirstTask+0x24>)
 80093ea:	6800      	ldr	r0, [r0, #0]
 80093ec:	6800      	ldr	r0, [r0, #0]
 80093ee:	f380 8808 	msr	MSP, r0
 80093f2:	f04f 0000 	mov.w	r0, #0
 80093f6:	f380 8814 	msr	CONTROL, r0
 80093fa:	b662      	cpsie	i
 80093fc:	b661      	cpsie	f
 80093fe:	f3bf 8f4f 	dsb	sy
 8009402:	f3bf 8f6f 	isb	sy
 8009406:	df00      	svc	0
 8009408:	bf00      	nop
					" dsb					\n"
					" isb					\n"
					" svc 0					\n" /* System call to start first task. */
					" nop					\n"
				);
}
 800940a:	bf00      	nop
 800940c:	e000ed08 	.word	0xe000ed08

08009410 <xPortStartScheduler>:

/*
 * See header file for description.
 */
BaseType_t xPortStartScheduler( void )
{
 8009410:	b580      	push	{r7, lr}
 8009412:	b086      	sub	sp, #24
 8009414:	af00      	add	r7, sp, #0
	configASSERT( configMAX_SYSCALL_INTERRUPT_PRIORITY );

	/* This port can be used on all revisions of the Cortex-M7 core other than
	the r0p1 parts.  r0p1 parts should use the port from the
	/source/portable/GCC/ARM_CM7/r0p1 directory. */
	configASSERT( portCPUID != portCORTEX_M7_r0p1_ID );
 8009416:	4b46      	ldr	r3, [pc, #280]	; (8009530 <xPortStartScheduler+0x120>)
 8009418:	681b      	ldr	r3, [r3, #0]
 800941a:	4a46      	ldr	r2, [pc, #280]	; (8009534 <xPortStartScheduler+0x124>)
 800941c:	4293      	cmp	r3, r2
 800941e:	d10a      	bne.n	8009436 <xPortStartScheduler+0x26>
	__asm volatile
 8009420:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009424:	f383 8811 	msr	BASEPRI, r3
 8009428:	f3bf 8f6f 	isb	sy
 800942c:	f3bf 8f4f 	dsb	sy
 8009430:	613b      	str	r3, [r7, #16]
}
 8009432:	bf00      	nop
 8009434:	e7fe      	b.n	8009434 <xPortStartScheduler+0x24>
	configASSERT( portCPUID != portCORTEX_M7_r0p0_ID );
 8009436:	4b3e      	ldr	r3, [pc, #248]	; (8009530 <xPortStartScheduler+0x120>)
 8009438:	681b      	ldr	r3, [r3, #0]
 800943a:	4a3f      	ldr	r2, [pc, #252]	; (8009538 <xPortStartScheduler+0x128>)
 800943c:	4293      	cmp	r3, r2
 800943e:	d10a      	bne.n	8009456 <xPortStartScheduler+0x46>
	__asm volatile
 8009440:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009444:	f383 8811 	msr	BASEPRI, r3
 8009448:	f3bf 8f6f 	isb	sy
 800944c:	f3bf 8f4f 	dsb	sy
 8009450:	60fb      	str	r3, [r7, #12]
}
 8009452:	bf00      	nop
 8009454:	e7fe      	b.n	8009454 <xPortStartScheduler+0x44>

	#if( configASSERT_DEFINED == 1 )
	{
		volatile uint32_t ulOriginalPriority;
		volatile uint8_t * const pucFirstUserPriorityRegister = ( volatile uint8_t * const ) ( portNVIC_IP_REGISTERS_OFFSET_16 + portFIRST_USER_INTERRUPT_NUMBER );
 8009456:	4b39      	ldr	r3, [pc, #228]	; (800953c <xPortStartScheduler+0x12c>)
 8009458:	617b      	str	r3, [r7, #20]
		functions can be called.  ISR safe functions are those that end in
		"FromISR".  FreeRTOS maintains separate thread and ISR API functions to
		ensure interrupt entry is as fast and simple as possible.

		Save the interrupt priority value that is about to be clobbered. */
		ulOriginalPriority = *pucFirstUserPriorityRegister;
 800945a:	697b      	ldr	r3, [r7, #20]
 800945c:	781b      	ldrb	r3, [r3, #0]
 800945e:	b2db      	uxtb	r3, r3
 8009460:	607b      	str	r3, [r7, #4]

		/* Determine the number of priority bits available.  First write to all
		possible bits. */
		*pucFirstUserPriorityRegister = portMAX_8_BIT_VALUE;
 8009462:	697b      	ldr	r3, [r7, #20]
 8009464:	22ff      	movs	r2, #255	; 0xff
 8009466:	701a      	strb	r2, [r3, #0]

		/* Read the value back to see how many bits stuck. */
		ucMaxPriorityValue = *pucFirstUserPriorityRegister;
 8009468:	697b      	ldr	r3, [r7, #20]
 800946a:	781b      	ldrb	r3, [r3, #0]
 800946c:	b2db      	uxtb	r3, r3
 800946e:	70fb      	strb	r3, [r7, #3]

		/* Use the same mask on the maximum system call priority. */
		ucMaxSysCallPriority = configMAX_SYSCALL_INTERRUPT_PRIORITY & ucMaxPriorityValue;
 8009470:	78fb      	ldrb	r3, [r7, #3]
 8009472:	b2db      	uxtb	r3, r3
 8009474:	f003 0350 	and.w	r3, r3, #80	; 0x50
 8009478:	b2da      	uxtb	r2, r3
 800947a:	4b31      	ldr	r3, [pc, #196]	; (8009540 <xPortStartScheduler+0x130>)
 800947c:	701a      	strb	r2, [r3, #0]

		/* Calculate the maximum acceptable priority group value for the number
		of bits read back. */
		ulMaxPRIGROUPValue = portMAX_PRIGROUP_BITS;
 800947e:	4b31      	ldr	r3, [pc, #196]	; (8009544 <xPortStartScheduler+0x134>)
 8009480:	2207      	movs	r2, #7
 8009482:	601a      	str	r2, [r3, #0]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 8009484:	e009      	b.n	800949a <xPortStartScheduler+0x8a>
		{
			ulMaxPRIGROUPValue--;
 8009486:	4b2f      	ldr	r3, [pc, #188]	; (8009544 <xPortStartScheduler+0x134>)
 8009488:	681b      	ldr	r3, [r3, #0]
 800948a:	3b01      	subs	r3, #1
 800948c:	4a2d      	ldr	r2, [pc, #180]	; (8009544 <xPortStartScheduler+0x134>)
 800948e:	6013      	str	r3, [r2, #0]
			ucMaxPriorityValue <<= ( uint8_t ) 0x01;
 8009490:	78fb      	ldrb	r3, [r7, #3]
 8009492:	b2db      	uxtb	r3, r3
 8009494:	005b      	lsls	r3, r3, #1
 8009496:	b2db      	uxtb	r3, r3
 8009498:	70fb      	strb	r3, [r7, #3]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 800949a:	78fb      	ldrb	r3, [r7, #3]
 800949c:	b2db      	uxtb	r3, r3
 800949e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80094a2:	2b80      	cmp	r3, #128	; 0x80
 80094a4:	d0ef      	beq.n	8009486 <xPortStartScheduler+0x76>
		#ifdef configPRIO_BITS
		{
			/* Check the FreeRTOS configuration that defines the number of
			priority bits matches the number of priority bits actually queried
			from the hardware. */
			configASSERT( ( portMAX_PRIGROUP_BITS - ulMaxPRIGROUPValue ) == configPRIO_BITS );
 80094a6:	4b27      	ldr	r3, [pc, #156]	; (8009544 <xPortStartScheduler+0x134>)
 80094a8:	681b      	ldr	r3, [r3, #0]
 80094aa:	f1c3 0307 	rsb	r3, r3, #7
 80094ae:	2b04      	cmp	r3, #4
 80094b0:	d00a      	beq.n	80094c8 <xPortStartScheduler+0xb8>
	__asm volatile
 80094b2:	f04f 0350 	mov.w	r3, #80	; 0x50
 80094b6:	f383 8811 	msr	BASEPRI, r3
 80094ba:	f3bf 8f6f 	isb	sy
 80094be:	f3bf 8f4f 	dsb	sy
 80094c2:	60bb      	str	r3, [r7, #8]
}
 80094c4:	bf00      	nop
 80094c6:	e7fe      	b.n	80094c6 <xPortStartScheduler+0xb6>
		}
		#endif

		/* Shift the priority group value back to its position within the AIRCR
		register. */
		ulMaxPRIGROUPValue <<= portPRIGROUP_SHIFT;
 80094c8:	4b1e      	ldr	r3, [pc, #120]	; (8009544 <xPortStartScheduler+0x134>)
 80094ca:	681b      	ldr	r3, [r3, #0]
 80094cc:	021b      	lsls	r3, r3, #8
 80094ce:	4a1d      	ldr	r2, [pc, #116]	; (8009544 <xPortStartScheduler+0x134>)
 80094d0:	6013      	str	r3, [r2, #0]
		ulMaxPRIGROUPValue &= portPRIORITY_GROUP_MASK;
 80094d2:	4b1c      	ldr	r3, [pc, #112]	; (8009544 <xPortStartScheduler+0x134>)
 80094d4:	681b      	ldr	r3, [r3, #0]
 80094d6:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 80094da:	4a1a      	ldr	r2, [pc, #104]	; (8009544 <xPortStartScheduler+0x134>)
 80094dc:	6013      	str	r3, [r2, #0]

		/* Restore the clobbered interrupt priority register to its original
		value. */
		*pucFirstUserPriorityRegister = ulOriginalPriority;
 80094de:	687b      	ldr	r3, [r7, #4]
 80094e0:	b2da      	uxtb	r2, r3
 80094e2:	697b      	ldr	r3, [r7, #20]
 80094e4:	701a      	strb	r2, [r3, #0]
	}
	#endif /* conifgASSERT_DEFINED */

	/* Make PendSV and SysTick the lowest priority interrupts. */
	portNVIC_SYSPRI2_REG |= portNVIC_PENDSV_PRI;
 80094e6:	4b18      	ldr	r3, [pc, #96]	; (8009548 <xPortStartScheduler+0x138>)
 80094e8:	681b      	ldr	r3, [r3, #0]
 80094ea:	4a17      	ldr	r2, [pc, #92]	; (8009548 <xPortStartScheduler+0x138>)
 80094ec:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 80094f0:	6013      	str	r3, [r2, #0]
	portNVIC_SYSPRI2_REG |= portNVIC_SYSTICK_PRI;
 80094f2:	4b15      	ldr	r3, [pc, #84]	; (8009548 <xPortStartScheduler+0x138>)
 80094f4:	681b      	ldr	r3, [r3, #0]
 80094f6:	4a14      	ldr	r2, [pc, #80]	; (8009548 <xPortStartScheduler+0x138>)
 80094f8:	f043 4370 	orr.w	r3, r3, #4026531840	; 0xf0000000
 80094fc:	6013      	str	r3, [r2, #0]

	/* Start the timer that generates the tick ISR.  Interrupts are disabled
	here already. */
	vPortSetupTimerInterrupt();
 80094fe:	f000 f8dd 	bl	80096bc <vPortSetupTimerInterrupt>

	/* Initialise the critical nesting count ready for the first task. */
	uxCriticalNesting = 0;
 8009502:	4b12      	ldr	r3, [pc, #72]	; (800954c <xPortStartScheduler+0x13c>)
 8009504:	2200      	movs	r2, #0
 8009506:	601a      	str	r2, [r3, #0]

	/* Ensure the VFP is enabled - it should be anyway. */
	vPortEnableVFP();
 8009508:	f000 f8fc 	bl	8009704 <vPortEnableVFP>

	/* Lazy save always. */
	*( portFPCCR ) |= portASPEN_AND_LSPEN_BITS;
 800950c:	4b10      	ldr	r3, [pc, #64]	; (8009550 <xPortStartScheduler+0x140>)
 800950e:	681b      	ldr	r3, [r3, #0]
 8009510:	4a0f      	ldr	r2, [pc, #60]	; (8009550 <xPortStartScheduler+0x140>)
 8009512:	f043 4340 	orr.w	r3, r3, #3221225472	; 0xc0000000
 8009516:	6013      	str	r3, [r2, #0]

	/* Start the first task. */
	prvPortStartFirstTask();
 8009518:	f7ff ff66 	bl	80093e8 <prvPortStartFirstTask>
	exit error function to prevent compiler warnings about a static function
	not being called in the case that the application writer overrides this
	functionality by defining configTASK_RETURN_ADDRESS.  Call
	vTaskSwitchContext() so link time optimisation does not remove the
	symbol. */
	vTaskSwitchContext();
 800951c:	f7fe ff4c 	bl	80083b8 <vTaskSwitchContext>
	prvTaskExitError();
 8009520:	f7ff ff20 	bl	8009364 <prvTaskExitError>

	/* Should not get here! */
	return 0;
 8009524:	2300      	movs	r3, #0
}
 8009526:	4618      	mov	r0, r3
 8009528:	3718      	adds	r7, #24
 800952a:	46bd      	mov	sp, r7
 800952c:	bd80      	pop	{r7, pc}
 800952e:	bf00      	nop
 8009530:	e000ed00 	.word	0xe000ed00
 8009534:	410fc271 	.word	0x410fc271
 8009538:	410fc270 	.word	0x410fc270
 800953c:	e000e400 	.word	0xe000e400
 8009540:	24001390 	.word	0x24001390
 8009544:	24001394 	.word	0x24001394
 8009548:	e000ed20 	.word	0xe000ed20
 800954c:	24000010 	.word	0x24000010
 8009550:	e000ef34 	.word	0xe000ef34

08009554 <vPortEnterCritical>:
	configASSERT( uxCriticalNesting == 1000UL );
}
/*-----------------------------------------------------------*/

void vPortEnterCritical( void )
{
 8009554:	b480      	push	{r7}
 8009556:	b083      	sub	sp, #12
 8009558:	af00      	add	r7, sp, #0
	__asm volatile
 800955a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800955e:	f383 8811 	msr	BASEPRI, r3
 8009562:	f3bf 8f6f 	isb	sy
 8009566:	f3bf 8f4f 	dsb	sy
 800956a:	607b      	str	r3, [r7, #4]
}
 800956c:	bf00      	nop
	portDISABLE_INTERRUPTS();
	uxCriticalNesting++;
 800956e:	4b0f      	ldr	r3, [pc, #60]	; (80095ac <vPortEnterCritical+0x58>)
 8009570:	681b      	ldr	r3, [r3, #0]
 8009572:	3301      	adds	r3, #1
 8009574:	4a0d      	ldr	r2, [pc, #52]	; (80095ac <vPortEnterCritical+0x58>)
 8009576:	6013      	str	r3, [r2, #0]
	/* This is not the interrupt safe version of the enter critical function so
	assert() if it is being called from an interrupt context.  Only API
	functions that end in "FromISR" can be used in an interrupt.  Only assert if
	the critical nesting count is 1 to protect against recursive calls if the
	assert function also uses a critical section. */
	if( uxCriticalNesting == 1 )
 8009578:	4b0c      	ldr	r3, [pc, #48]	; (80095ac <vPortEnterCritical+0x58>)
 800957a:	681b      	ldr	r3, [r3, #0]
 800957c:	2b01      	cmp	r3, #1
 800957e:	d10f      	bne.n	80095a0 <vPortEnterCritical+0x4c>
	{
		configASSERT( ( portNVIC_INT_CTRL_REG & portVECTACTIVE_MASK ) == 0 );
 8009580:	4b0b      	ldr	r3, [pc, #44]	; (80095b0 <vPortEnterCritical+0x5c>)
 8009582:	681b      	ldr	r3, [r3, #0]
 8009584:	b2db      	uxtb	r3, r3
 8009586:	2b00      	cmp	r3, #0
 8009588:	d00a      	beq.n	80095a0 <vPortEnterCritical+0x4c>
	__asm volatile
 800958a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800958e:	f383 8811 	msr	BASEPRI, r3
 8009592:	f3bf 8f6f 	isb	sy
 8009596:	f3bf 8f4f 	dsb	sy
 800959a:	603b      	str	r3, [r7, #0]
}
 800959c:	bf00      	nop
 800959e:	e7fe      	b.n	800959e <vPortEnterCritical+0x4a>
	}
}
 80095a0:	bf00      	nop
 80095a2:	370c      	adds	r7, #12
 80095a4:	46bd      	mov	sp, r7
 80095a6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80095aa:	4770      	bx	lr
 80095ac:	24000010 	.word	0x24000010
 80095b0:	e000ed04 	.word	0xe000ed04

080095b4 <vPortExitCritical>:
/*-----------------------------------------------------------*/

void vPortExitCritical( void )
{
 80095b4:	b480      	push	{r7}
 80095b6:	b083      	sub	sp, #12
 80095b8:	af00      	add	r7, sp, #0
	configASSERT( uxCriticalNesting );
 80095ba:	4b12      	ldr	r3, [pc, #72]	; (8009604 <vPortExitCritical+0x50>)
 80095bc:	681b      	ldr	r3, [r3, #0]
 80095be:	2b00      	cmp	r3, #0
 80095c0:	d10a      	bne.n	80095d8 <vPortExitCritical+0x24>
	__asm volatile
 80095c2:	f04f 0350 	mov.w	r3, #80	; 0x50
 80095c6:	f383 8811 	msr	BASEPRI, r3
 80095ca:	f3bf 8f6f 	isb	sy
 80095ce:	f3bf 8f4f 	dsb	sy
 80095d2:	607b      	str	r3, [r7, #4]
}
 80095d4:	bf00      	nop
 80095d6:	e7fe      	b.n	80095d6 <vPortExitCritical+0x22>
	uxCriticalNesting--;
 80095d8:	4b0a      	ldr	r3, [pc, #40]	; (8009604 <vPortExitCritical+0x50>)
 80095da:	681b      	ldr	r3, [r3, #0]
 80095dc:	3b01      	subs	r3, #1
 80095de:	4a09      	ldr	r2, [pc, #36]	; (8009604 <vPortExitCritical+0x50>)
 80095e0:	6013      	str	r3, [r2, #0]
	if( uxCriticalNesting == 0 )
 80095e2:	4b08      	ldr	r3, [pc, #32]	; (8009604 <vPortExitCritical+0x50>)
 80095e4:	681b      	ldr	r3, [r3, #0]
 80095e6:	2b00      	cmp	r3, #0
 80095e8:	d105      	bne.n	80095f6 <vPortExitCritical+0x42>
 80095ea:	2300      	movs	r3, #0
 80095ec:	603b      	str	r3, [r7, #0]
	__asm volatile
 80095ee:	683b      	ldr	r3, [r7, #0]
 80095f0:	f383 8811 	msr	BASEPRI, r3
}
 80095f4:	bf00      	nop
	{
		portENABLE_INTERRUPTS();
	}
}
 80095f6:	bf00      	nop
 80095f8:	370c      	adds	r7, #12
 80095fa:	46bd      	mov	sp, r7
 80095fc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009600:	4770      	bx	lr
 8009602:	bf00      	nop
 8009604:	24000010 	.word	0x24000010
	...

08009610 <PendSV_Handler>:

void xPortPendSVHandler( void )
{
	/* This is a naked function. */

	__asm volatile
 8009610:	f3ef 8009 	mrs	r0, PSP
 8009614:	f3bf 8f6f 	isb	sy
 8009618:	4b15      	ldr	r3, [pc, #84]	; (8009670 <pxCurrentTCBConst>)
 800961a:	681a      	ldr	r2, [r3, #0]
 800961c:	f01e 0f10 	tst.w	lr, #16
 8009620:	bf08      	it	eq
 8009622:	ed20 8a10 	vstmdbeq	r0!, {s16-s31}
 8009626:	e920 4ff0 	stmdb	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800962a:	6010      	str	r0, [r2, #0]
 800962c:	e92d 0009 	stmdb	sp!, {r0, r3}
 8009630:	f04f 0050 	mov.w	r0, #80	; 0x50
 8009634:	f380 8811 	msr	BASEPRI, r0
 8009638:	f3bf 8f4f 	dsb	sy
 800963c:	f3bf 8f6f 	isb	sy
 8009640:	f7fe feba 	bl	80083b8 <vTaskSwitchContext>
 8009644:	f04f 0000 	mov.w	r0, #0
 8009648:	f380 8811 	msr	BASEPRI, r0
 800964c:	bc09      	pop	{r0, r3}
 800964e:	6819      	ldr	r1, [r3, #0]
 8009650:	6808      	ldr	r0, [r1, #0]
 8009652:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8009656:	f01e 0f10 	tst.w	lr, #16
 800965a:	bf08      	it	eq
 800965c:	ecb0 8a10 	vldmiaeq	r0!, {s16-s31}
 8009660:	f380 8809 	msr	PSP, r0
 8009664:	f3bf 8f6f 	isb	sy
 8009668:	4770      	bx	lr
 800966a:	bf00      	nop
 800966c:	f3af 8000 	nop.w

08009670 <pxCurrentTCBConst>:
 8009670:	24000d64 	.word	0x24000d64
	"										\n"
	"	.align 4							\n"
	"pxCurrentTCBConst: .word pxCurrentTCB	\n"
	::"i"(configMAX_SYSCALL_INTERRUPT_PRIORITY)
	);
}
 8009674:	bf00      	nop
 8009676:	bf00      	nop

08009678 <xPortSysTickHandler>:
/*-----------------------------------------------------------*/

void xPortSysTickHandler( void )
{
 8009678:	b580      	push	{r7, lr}
 800967a:	b082      	sub	sp, #8
 800967c:	af00      	add	r7, sp, #0
	__asm volatile
 800967e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009682:	f383 8811 	msr	BASEPRI, r3
 8009686:	f3bf 8f6f 	isb	sy
 800968a:	f3bf 8f4f 	dsb	sy
 800968e:	607b      	str	r3, [r7, #4]
}
 8009690:	bf00      	nop
	save and then restore the interrupt mask value as its value is already
	known. */
	portDISABLE_INTERRUPTS();
	{
		/* Increment the RTOS tick. */
		if( xTaskIncrementTick() != pdFALSE )
 8009692:	f7fe fdd7 	bl	8008244 <xTaskIncrementTick>
 8009696:	4603      	mov	r3, r0
 8009698:	2b00      	cmp	r3, #0
 800969a:	d003      	beq.n	80096a4 <xPortSysTickHandler+0x2c>
		{
			/* A context switch is required.  Context switching is performed in
			the PendSV interrupt.  Pend the PendSV interrupt. */
			portNVIC_INT_CTRL_REG = portNVIC_PENDSVSET_BIT;
 800969c:	4b06      	ldr	r3, [pc, #24]	; (80096b8 <xPortSysTickHandler+0x40>)
 800969e:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80096a2:	601a      	str	r2, [r3, #0]
 80096a4:	2300      	movs	r3, #0
 80096a6:	603b      	str	r3, [r7, #0]
	__asm volatile
 80096a8:	683b      	ldr	r3, [r7, #0]
 80096aa:	f383 8811 	msr	BASEPRI, r3
}
 80096ae:	bf00      	nop
		}
	}
	portENABLE_INTERRUPTS();
}
 80096b0:	bf00      	nop
 80096b2:	3708      	adds	r7, #8
 80096b4:	46bd      	mov	sp, r7
 80096b6:	bd80      	pop	{r7, pc}
 80096b8:	e000ed04 	.word	0xe000ed04

080096bc <vPortSetupTimerInterrupt>:
/*
 * Setup the systick timer to generate the tick interrupts at the required
 * frequency.
 */
__attribute__(( weak )) void vPortSetupTimerInterrupt( void )
{
 80096bc:	b480      	push	{r7}
 80096be:	af00      	add	r7, sp, #0
		ulStoppedTimerCompensation = portMISSED_COUNTS_FACTOR / ( configCPU_CLOCK_HZ / configSYSTICK_CLOCK_HZ );
	}
	#endif /* configUSE_TICKLESS_IDLE */

	/* Stop and clear the SysTick. */
	portNVIC_SYSTICK_CTRL_REG = 0UL;
 80096c0:	4b0b      	ldr	r3, [pc, #44]	; (80096f0 <vPortSetupTimerInterrupt+0x34>)
 80096c2:	2200      	movs	r2, #0
 80096c4:	601a      	str	r2, [r3, #0]
	portNVIC_SYSTICK_CURRENT_VALUE_REG = 0UL;
 80096c6:	4b0b      	ldr	r3, [pc, #44]	; (80096f4 <vPortSetupTimerInterrupt+0x38>)
 80096c8:	2200      	movs	r2, #0
 80096ca:	601a      	str	r2, [r3, #0]

	/* Configure SysTick to interrupt at the requested rate. */
	portNVIC_SYSTICK_LOAD_REG = ( configSYSTICK_CLOCK_HZ / configTICK_RATE_HZ ) - 1UL;
 80096cc:	4b0a      	ldr	r3, [pc, #40]	; (80096f8 <vPortSetupTimerInterrupt+0x3c>)
 80096ce:	681b      	ldr	r3, [r3, #0]
 80096d0:	4a0a      	ldr	r2, [pc, #40]	; (80096fc <vPortSetupTimerInterrupt+0x40>)
 80096d2:	fba2 2303 	umull	r2, r3, r2, r3
 80096d6:	099b      	lsrs	r3, r3, #6
 80096d8:	4a09      	ldr	r2, [pc, #36]	; (8009700 <vPortSetupTimerInterrupt+0x44>)
 80096da:	3b01      	subs	r3, #1
 80096dc:	6013      	str	r3, [r2, #0]
	portNVIC_SYSTICK_CTRL_REG = ( portNVIC_SYSTICK_CLK_BIT | portNVIC_SYSTICK_INT_BIT | portNVIC_SYSTICK_ENABLE_BIT );
 80096de:	4b04      	ldr	r3, [pc, #16]	; (80096f0 <vPortSetupTimerInterrupt+0x34>)
 80096e0:	2207      	movs	r2, #7
 80096e2:	601a      	str	r2, [r3, #0]
}
 80096e4:	bf00      	nop
 80096e6:	46bd      	mov	sp, r7
 80096e8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80096ec:	4770      	bx	lr
 80096ee:	bf00      	nop
 80096f0:	e000e010 	.word	0xe000e010
 80096f4:	e000e018 	.word	0xe000e018
 80096f8:	24000000 	.word	0x24000000
 80096fc:	10624dd3 	.word	0x10624dd3
 8009700:	e000e014 	.word	0xe000e014

08009704 <vPortEnableVFP>:
/*-----------------------------------------------------------*/

/* This is a naked function. */
static void vPortEnableVFP( void )
{
	__asm volatile
 8009704:	f8df 000c 	ldr.w	r0, [pc, #12]	; 8009714 <vPortEnableVFP+0x10>
 8009708:	6801      	ldr	r1, [r0, #0]
 800970a:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 800970e:	6001      	str	r1, [r0, #0]
 8009710:	4770      	bx	lr
		"								\n"
		"	orr r1, r1, #( 0xf << 20 )	\n" /* Enable CP10 and CP11 coprocessors, then save back. */
		"	str r1, [r0]				\n"
		"	bx r14						"
	);
}
 8009712:	bf00      	nop
 8009714:	e000ed88 	.word	0xe000ed88

08009718 <vPortValidateInterruptPriority>:
/*-----------------------------------------------------------*/

#if( configASSERT_DEFINED == 1 )

	void vPortValidateInterruptPriority( void )
	{
 8009718:	b480      	push	{r7}
 800971a:	b085      	sub	sp, #20
 800971c:	af00      	add	r7, sp, #0
	uint32_t ulCurrentInterrupt;
	uint8_t ucCurrentPriority;

		/* Obtain the number of the currently executing interrupt. */
		__asm volatile( "mrs %0, ipsr" : "=r"( ulCurrentInterrupt ) :: "memory" );
 800971e:	f3ef 8305 	mrs	r3, IPSR
 8009722:	60fb      	str	r3, [r7, #12]

		/* Is the interrupt number a user defined interrupt? */
		if( ulCurrentInterrupt >= portFIRST_USER_INTERRUPT_NUMBER )
 8009724:	68fb      	ldr	r3, [r7, #12]
 8009726:	2b0f      	cmp	r3, #15
 8009728:	d914      	bls.n	8009754 <vPortValidateInterruptPriority+0x3c>
		{
			/* Look up the interrupt's priority. */
			ucCurrentPriority = pcInterruptPriorityRegisters[ ulCurrentInterrupt ];
 800972a:	4a17      	ldr	r2, [pc, #92]	; (8009788 <vPortValidateInterruptPriority+0x70>)
 800972c:	68fb      	ldr	r3, [r7, #12]
 800972e:	4413      	add	r3, r2
 8009730:	781b      	ldrb	r3, [r3, #0]
 8009732:	72fb      	strb	r3, [r7, #11]
			interrupt entry is as fast and simple as possible.

			The following links provide detailed information:
			http://www.freertos.org/RTOS-Cortex-M3-M4.html
			http://www.freertos.org/FAQHelp.html */
			configASSERT( ucCurrentPriority >= ucMaxSysCallPriority );
 8009734:	4b15      	ldr	r3, [pc, #84]	; (800978c <vPortValidateInterruptPriority+0x74>)
 8009736:	781b      	ldrb	r3, [r3, #0]
 8009738:	7afa      	ldrb	r2, [r7, #11]
 800973a:	429a      	cmp	r2, r3
 800973c:	d20a      	bcs.n	8009754 <vPortValidateInterruptPriority+0x3c>
	__asm volatile
 800973e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009742:	f383 8811 	msr	BASEPRI, r3
 8009746:	f3bf 8f6f 	isb	sy
 800974a:	f3bf 8f4f 	dsb	sy
 800974e:	607b      	str	r3, [r7, #4]
}
 8009750:	bf00      	nop
 8009752:	e7fe      	b.n	8009752 <vPortValidateInterruptPriority+0x3a>
		configuration then the correct setting can be achieved on all Cortex-M
		devices by calling NVIC_SetPriorityGrouping( 0 ); before starting the
		scheduler.  Note however that some vendor specific peripheral libraries
		assume a non-zero priority group setting, in which cases using a value
		of zero will result in unpredictable behaviour. */
		configASSERT( ( portAIRCR_REG & portPRIORITY_GROUP_MASK ) <= ulMaxPRIGROUPValue );
 8009754:	4b0e      	ldr	r3, [pc, #56]	; (8009790 <vPortValidateInterruptPriority+0x78>)
 8009756:	681b      	ldr	r3, [r3, #0]
 8009758:	f403 62e0 	and.w	r2, r3, #1792	; 0x700
 800975c:	4b0d      	ldr	r3, [pc, #52]	; (8009794 <vPortValidateInterruptPriority+0x7c>)
 800975e:	681b      	ldr	r3, [r3, #0]
 8009760:	429a      	cmp	r2, r3
 8009762:	d90a      	bls.n	800977a <vPortValidateInterruptPriority+0x62>
	__asm volatile
 8009764:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009768:	f383 8811 	msr	BASEPRI, r3
 800976c:	f3bf 8f6f 	isb	sy
 8009770:	f3bf 8f4f 	dsb	sy
 8009774:	603b      	str	r3, [r7, #0]
}
 8009776:	bf00      	nop
 8009778:	e7fe      	b.n	8009778 <vPortValidateInterruptPriority+0x60>
	}
 800977a:	bf00      	nop
 800977c:	3714      	adds	r7, #20
 800977e:	46bd      	mov	sp, r7
 8009780:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009784:	4770      	bx	lr
 8009786:	bf00      	nop
 8009788:	e000e3f0 	.word	0xe000e3f0
 800978c:	24001390 	.word	0x24001390
 8009790:	e000ed0c 	.word	0xe000ed0c
 8009794:	24001394 	.word	0x24001394

08009798 <pvPortMalloc>:
static size_t xBlockAllocatedBit = 0;

/*-----------------------------------------------------------*/

void *pvPortMalloc( size_t xWantedSize )
{
 8009798:	b580      	push	{r7, lr}
 800979a:	b08a      	sub	sp, #40	; 0x28
 800979c:	af00      	add	r7, sp, #0
 800979e:	6078      	str	r0, [r7, #4]
BlockLink_t *pxBlock, *pxPreviousBlock, *pxNewBlockLink;
void *pvReturn = NULL;
 80097a0:	2300      	movs	r3, #0
 80097a2:	61fb      	str	r3, [r7, #28]

	vTaskSuspendAll();
 80097a4:	f7fe fc92 	bl	80080cc <vTaskSuspendAll>
	{
		/* If this is the first call to malloc then the heap will require
		initialisation to setup the list of free blocks. */
		if( pxEnd == NULL )
 80097a8:	4b5b      	ldr	r3, [pc, #364]	; (8009918 <pvPortMalloc+0x180>)
 80097aa:	681b      	ldr	r3, [r3, #0]
 80097ac:	2b00      	cmp	r3, #0
 80097ae:	d101      	bne.n	80097b4 <pvPortMalloc+0x1c>
		{
			prvHeapInit();
 80097b0:	f000 f920 	bl	80099f4 <prvHeapInit>

		/* Check the requested block size is not so large that the top bit is
		set.  The top bit of the block size member of the BlockLink_t structure
		is used to determine who owns the block - the application or the
		kernel, so it must be free. */
		if( ( xWantedSize & xBlockAllocatedBit ) == 0 )
 80097b4:	4b59      	ldr	r3, [pc, #356]	; (800991c <pvPortMalloc+0x184>)
 80097b6:	681a      	ldr	r2, [r3, #0]
 80097b8:	687b      	ldr	r3, [r7, #4]
 80097ba:	4013      	ands	r3, r2
 80097bc:	2b00      	cmp	r3, #0
 80097be:	f040 8093 	bne.w	80098e8 <pvPortMalloc+0x150>
		{
			/* The wanted size is increased so it can contain a BlockLink_t
			structure in addition to the requested amount of bytes. */
			if( xWantedSize > 0 )
 80097c2:	687b      	ldr	r3, [r7, #4]
 80097c4:	2b00      	cmp	r3, #0
 80097c6:	d01d      	beq.n	8009804 <pvPortMalloc+0x6c>
			{
				xWantedSize += xHeapStructSize;
 80097c8:	2208      	movs	r2, #8
 80097ca:	687b      	ldr	r3, [r7, #4]
 80097cc:	4413      	add	r3, r2
 80097ce:	607b      	str	r3, [r7, #4]

				/* Ensure that blocks are always aligned to the required number
				of bytes. */
				if( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) != 0x00 )
 80097d0:	687b      	ldr	r3, [r7, #4]
 80097d2:	f003 0307 	and.w	r3, r3, #7
 80097d6:	2b00      	cmp	r3, #0
 80097d8:	d014      	beq.n	8009804 <pvPortMalloc+0x6c>
				{
					/* Byte alignment required. */
					xWantedSize += ( portBYTE_ALIGNMENT - ( xWantedSize & portBYTE_ALIGNMENT_MASK ) );
 80097da:	687b      	ldr	r3, [r7, #4]
 80097dc:	f023 0307 	bic.w	r3, r3, #7
 80097e0:	3308      	adds	r3, #8
 80097e2:	607b      	str	r3, [r7, #4]
					configASSERT( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) == 0 );
 80097e4:	687b      	ldr	r3, [r7, #4]
 80097e6:	f003 0307 	and.w	r3, r3, #7
 80097ea:	2b00      	cmp	r3, #0
 80097ec:	d00a      	beq.n	8009804 <pvPortMalloc+0x6c>
	__asm volatile
 80097ee:	f04f 0350 	mov.w	r3, #80	; 0x50
 80097f2:	f383 8811 	msr	BASEPRI, r3
 80097f6:	f3bf 8f6f 	isb	sy
 80097fa:	f3bf 8f4f 	dsb	sy
 80097fe:	617b      	str	r3, [r7, #20]
}
 8009800:	bf00      	nop
 8009802:	e7fe      	b.n	8009802 <pvPortMalloc+0x6a>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}

			if( ( xWantedSize > 0 ) && ( xWantedSize <= xFreeBytesRemaining ) )
 8009804:	687b      	ldr	r3, [r7, #4]
 8009806:	2b00      	cmp	r3, #0
 8009808:	d06e      	beq.n	80098e8 <pvPortMalloc+0x150>
 800980a:	4b45      	ldr	r3, [pc, #276]	; (8009920 <pvPortMalloc+0x188>)
 800980c:	681b      	ldr	r3, [r3, #0]
 800980e:	687a      	ldr	r2, [r7, #4]
 8009810:	429a      	cmp	r2, r3
 8009812:	d869      	bhi.n	80098e8 <pvPortMalloc+0x150>
			{
				/* Traverse the list from the start	(lowest address) block until
				one	of adequate size is found. */
				pxPreviousBlock = &xStart;
 8009814:	4b43      	ldr	r3, [pc, #268]	; (8009924 <pvPortMalloc+0x18c>)
 8009816:	623b      	str	r3, [r7, #32]
				pxBlock = xStart.pxNextFreeBlock;
 8009818:	4b42      	ldr	r3, [pc, #264]	; (8009924 <pvPortMalloc+0x18c>)
 800981a:	681b      	ldr	r3, [r3, #0]
 800981c:	627b      	str	r3, [r7, #36]	; 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 800981e:	e004      	b.n	800982a <pvPortMalloc+0x92>
				{
					pxPreviousBlock = pxBlock;
 8009820:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009822:	623b      	str	r3, [r7, #32]
					pxBlock = pxBlock->pxNextFreeBlock;
 8009824:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009826:	681b      	ldr	r3, [r3, #0]
 8009828:	627b      	str	r3, [r7, #36]	; 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 800982a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800982c:	685b      	ldr	r3, [r3, #4]
 800982e:	687a      	ldr	r2, [r7, #4]
 8009830:	429a      	cmp	r2, r3
 8009832:	d903      	bls.n	800983c <pvPortMalloc+0xa4>
 8009834:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009836:	681b      	ldr	r3, [r3, #0]
 8009838:	2b00      	cmp	r3, #0
 800983a:	d1f1      	bne.n	8009820 <pvPortMalloc+0x88>
				}

				/* If the end marker was reached then a block of adequate size
				was	not found. */
				if( pxBlock != pxEnd )
 800983c:	4b36      	ldr	r3, [pc, #216]	; (8009918 <pvPortMalloc+0x180>)
 800983e:	681b      	ldr	r3, [r3, #0]
 8009840:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8009842:	429a      	cmp	r2, r3
 8009844:	d050      	beq.n	80098e8 <pvPortMalloc+0x150>
				{
					/* Return the memory space pointed to - jumping over the
					BlockLink_t structure at its start. */
					pvReturn = ( void * ) ( ( ( uint8_t * ) pxPreviousBlock->pxNextFreeBlock ) + xHeapStructSize );
 8009846:	6a3b      	ldr	r3, [r7, #32]
 8009848:	681b      	ldr	r3, [r3, #0]
 800984a:	2208      	movs	r2, #8
 800984c:	4413      	add	r3, r2
 800984e:	61fb      	str	r3, [r7, #28]

					/* This block is being returned for use so must be taken out
					of the list of free blocks. */
					pxPreviousBlock->pxNextFreeBlock = pxBlock->pxNextFreeBlock;
 8009850:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009852:	681a      	ldr	r2, [r3, #0]
 8009854:	6a3b      	ldr	r3, [r7, #32]
 8009856:	601a      	str	r2, [r3, #0]

					/* If the block is larger than required it can be split into
					two. */
					if( ( pxBlock->xBlockSize - xWantedSize ) > heapMINIMUM_BLOCK_SIZE )
 8009858:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800985a:	685a      	ldr	r2, [r3, #4]
 800985c:	687b      	ldr	r3, [r7, #4]
 800985e:	1ad2      	subs	r2, r2, r3
 8009860:	2308      	movs	r3, #8
 8009862:	005b      	lsls	r3, r3, #1
 8009864:	429a      	cmp	r2, r3
 8009866:	d91f      	bls.n	80098a8 <pvPortMalloc+0x110>
					{
						/* This block is to be split into two.  Create a new
						block following the number of bytes requested. The void
						cast is used to prevent byte alignment warnings from the
						compiler. */
						pxNewBlockLink = ( void * ) ( ( ( uint8_t * ) pxBlock ) + xWantedSize );
 8009868:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800986a:	687b      	ldr	r3, [r7, #4]
 800986c:	4413      	add	r3, r2
 800986e:	61bb      	str	r3, [r7, #24]
						configASSERT( ( ( ( size_t ) pxNewBlockLink ) & portBYTE_ALIGNMENT_MASK ) == 0 );
 8009870:	69bb      	ldr	r3, [r7, #24]
 8009872:	f003 0307 	and.w	r3, r3, #7
 8009876:	2b00      	cmp	r3, #0
 8009878:	d00a      	beq.n	8009890 <pvPortMalloc+0xf8>
	__asm volatile
 800987a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800987e:	f383 8811 	msr	BASEPRI, r3
 8009882:	f3bf 8f6f 	isb	sy
 8009886:	f3bf 8f4f 	dsb	sy
 800988a:	613b      	str	r3, [r7, #16]
}
 800988c:	bf00      	nop
 800988e:	e7fe      	b.n	800988e <pvPortMalloc+0xf6>

						/* Calculate the sizes of two blocks split from the
						single block. */
						pxNewBlockLink->xBlockSize = pxBlock->xBlockSize - xWantedSize;
 8009890:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009892:	685a      	ldr	r2, [r3, #4]
 8009894:	687b      	ldr	r3, [r7, #4]
 8009896:	1ad2      	subs	r2, r2, r3
 8009898:	69bb      	ldr	r3, [r7, #24]
 800989a:	605a      	str	r2, [r3, #4]
						pxBlock->xBlockSize = xWantedSize;
 800989c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800989e:	687a      	ldr	r2, [r7, #4]
 80098a0:	605a      	str	r2, [r3, #4]

						/* Insert the new block into the list of free blocks. */
						prvInsertBlockIntoFreeList( pxNewBlockLink );
 80098a2:	69b8      	ldr	r0, [r7, #24]
 80098a4:	f000 f908 	bl	8009ab8 <prvInsertBlockIntoFreeList>
					else
					{
						mtCOVERAGE_TEST_MARKER();
					}

					xFreeBytesRemaining -= pxBlock->xBlockSize;
 80098a8:	4b1d      	ldr	r3, [pc, #116]	; (8009920 <pvPortMalloc+0x188>)
 80098aa:	681a      	ldr	r2, [r3, #0]
 80098ac:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80098ae:	685b      	ldr	r3, [r3, #4]
 80098b0:	1ad3      	subs	r3, r2, r3
 80098b2:	4a1b      	ldr	r2, [pc, #108]	; (8009920 <pvPortMalloc+0x188>)
 80098b4:	6013      	str	r3, [r2, #0]

					if( xFreeBytesRemaining < xMinimumEverFreeBytesRemaining )
 80098b6:	4b1a      	ldr	r3, [pc, #104]	; (8009920 <pvPortMalloc+0x188>)
 80098b8:	681a      	ldr	r2, [r3, #0]
 80098ba:	4b1b      	ldr	r3, [pc, #108]	; (8009928 <pvPortMalloc+0x190>)
 80098bc:	681b      	ldr	r3, [r3, #0]
 80098be:	429a      	cmp	r2, r3
 80098c0:	d203      	bcs.n	80098ca <pvPortMalloc+0x132>
					{
						xMinimumEverFreeBytesRemaining = xFreeBytesRemaining;
 80098c2:	4b17      	ldr	r3, [pc, #92]	; (8009920 <pvPortMalloc+0x188>)
 80098c4:	681b      	ldr	r3, [r3, #0]
 80098c6:	4a18      	ldr	r2, [pc, #96]	; (8009928 <pvPortMalloc+0x190>)
 80098c8:	6013      	str	r3, [r2, #0]
						mtCOVERAGE_TEST_MARKER();
					}

					/* The block is being returned - it is allocated and owned
					by the application and has no "next" block. */
					pxBlock->xBlockSize |= xBlockAllocatedBit;
 80098ca:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80098cc:	685a      	ldr	r2, [r3, #4]
 80098ce:	4b13      	ldr	r3, [pc, #76]	; (800991c <pvPortMalloc+0x184>)
 80098d0:	681b      	ldr	r3, [r3, #0]
 80098d2:	431a      	orrs	r2, r3
 80098d4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80098d6:	605a      	str	r2, [r3, #4]
					pxBlock->pxNextFreeBlock = NULL;
 80098d8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80098da:	2200      	movs	r2, #0
 80098dc:	601a      	str	r2, [r3, #0]
					xNumberOfSuccessfulAllocations++;
 80098de:	4b13      	ldr	r3, [pc, #76]	; (800992c <pvPortMalloc+0x194>)
 80098e0:	681b      	ldr	r3, [r3, #0]
 80098e2:	3301      	adds	r3, #1
 80098e4:	4a11      	ldr	r2, [pc, #68]	; (800992c <pvPortMalloc+0x194>)
 80098e6:	6013      	str	r3, [r2, #0]
			mtCOVERAGE_TEST_MARKER();
		}

		traceMALLOC( pvReturn, xWantedSize );
	}
	( void ) xTaskResumeAll();
 80098e8:	f7fe fbfe 	bl	80080e8 <xTaskResumeAll>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif

	configASSERT( ( ( ( size_t ) pvReturn ) & ( size_t ) portBYTE_ALIGNMENT_MASK ) == 0 );
 80098ec:	69fb      	ldr	r3, [r7, #28]
 80098ee:	f003 0307 	and.w	r3, r3, #7
 80098f2:	2b00      	cmp	r3, #0
 80098f4:	d00a      	beq.n	800990c <pvPortMalloc+0x174>
	__asm volatile
 80098f6:	f04f 0350 	mov.w	r3, #80	; 0x50
 80098fa:	f383 8811 	msr	BASEPRI, r3
 80098fe:	f3bf 8f6f 	isb	sy
 8009902:	f3bf 8f4f 	dsb	sy
 8009906:	60fb      	str	r3, [r7, #12]
}
 8009908:	bf00      	nop
 800990a:	e7fe      	b.n	800990a <pvPortMalloc+0x172>
	return pvReturn;
 800990c:	69fb      	ldr	r3, [r7, #28]
}
 800990e:	4618      	mov	r0, r3
 8009910:	3728      	adds	r7, #40	; 0x28
 8009912:	46bd      	mov	sp, r7
 8009914:	bd80      	pop	{r7, pc}
 8009916:	bf00      	nop
 8009918:	24004fa0 	.word	0x24004fa0
 800991c:	24004fb4 	.word	0x24004fb4
 8009920:	24004fa4 	.word	0x24004fa4
 8009924:	24004f98 	.word	0x24004f98
 8009928:	24004fa8 	.word	0x24004fa8
 800992c:	24004fac 	.word	0x24004fac

08009930 <vPortFree>:
/*-----------------------------------------------------------*/

void vPortFree( void *pv )
{
 8009930:	b580      	push	{r7, lr}
 8009932:	b086      	sub	sp, #24
 8009934:	af00      	add	r7, sp, #0
 8009936:	6078      	str	r0, [r7, #4]
uint8_t *puc = ( uint8_t * ) pv;
 8009938:	687b      	ldr	r3, [r7, #4]
 800993a:	617b      	str	r3, [r7, #20]
BlockLink_t *pxLink;

	if( pv != NULL )
 800993c:	687b      	ldr	r3, [r7, #4]
 800993e:	2b00      	cmp	r3, #0
 8009940:	d04d      	beq.n	80099de <vPortFree+0xae>
	{
		/* The memory being freed will have an BlockLink_t structure immediately
		before it. */
		puc -= xHeapStructSize;
 8009942:	2308      	movs	r3, #8
 8009944:	425b      	negs	r3, r3
 8009946:	697a      	ldr	r2, [r7, #20]
 8009948:	4413      	add	r3, r2
 800994a:	617b      	str	r3, [r7, #20]

		/* This casting is to keep the compiler from issuing warnings. */
		pxLink = ( void * ) puc;
 800994c:	697b      	ldr	r3, [r7, #20]
 800994e:	613b      	str	r3, [r7, #16]

		/* Check the block is actually allocated. */
		configASSERT( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 );
 8009950:	693b      	ldr	r3, [r7, #16]
 8009952:	685a      	ldr	r2, [r3, #4]
 8009954:	4b24      	ldr	r3, [pc, #144]	; (80099e8 <vPortFree+0xb8>)
 8009956:	681b      	ldr	r3, [r3, #0]
 8009958:	4013      	ands	r3, r2
 800995a:	2b00      	cmp	r3, #0
 800995c:	d10a      	bne.n	8009974 <vPortFree+0x44>
	__asm volatile
 800995e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009962:	f383 8811 	msr	BASEPRI, r3
 8009966:	f3bf 8f6f 	isb	sy
 800996a:	f3bf 8f4f 	dsb	sy
 800996e:	60fb      	str	r3, [r7, #12]
}
 8009970:	bf00      	nop
 8009972:	e7fe      	b.n	8009972 <vPortFree+0x42>
		configASSERT( pxLink->pxNextFreeBlock == NULL );
 8009974:	693b      	ldr	r3, [r7, #16]
 8009976:	681b      	ldr	r3, [r3, #0]
 8009978:	2b00      	cmp	r3, #0
 800997a:	d00a      	beq.n	8009992 <vPortFree+0x62>
	__asm volatile
 800997c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009980:	f383 8811 	msr	BASEPRI, r3
 8009984:	f3bf 8f6f 	isb	sy
 8009988:	f3bf 8f4f 	dsb	sy
 800998c:	60bb      	str	r3, [r7, #8]
}
 800998e:	bf00      	nop
 8009990:	e7fe      	b.n	8009990 <vPortFree+0x60>

		if( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 )
 8009992:	693b      	ldr	r3, [r7, #16]
 8009994:	685a      	ldr	r2, [r3, #4]
 8009996:	4b14      	ldr	r3, [pc, #80]	; (80099e8 <vPortFree+0xb8>)
 8009998:	681b      	ldr	r3, [r3, #0]
 800999a:	4013      	ands	r3, r2
 800999c:	2b00      	cmp	r3, #0
 800999e:	d01e      	beq.n	80099de <vPortFree+0xae>
		{
			if( pxLink->pxNextFreeBlock == NULL )
 80099a0:	693b      	ldr	r3, [r7, #16]
 80099a2:	681b      	ldr	r3, [r3, #0]
 80099a4:	2b00      	cmp	r3, #0
 80099a6:	d11a      	bne.n	80099de <vPortFree+0xae>
			{
				/* The block is being returned to the heap - it is no longer
				allocated. */
				pxLink->xBlockSize &= ~xBlockAllocatedBit;
 80099a8:	693b      	ldr	r3, [r7, #16]
 80099aa:	685a      	ldr	r2, [r3, #4]
 80099ac:	4b0e      	ldr	r3, [pc, #56]	; (80099e8 <vPortFree+0xb8>)
 80099ae:	681b      	ldr	r3, [r3, #0]
 80099b0:	43db      	mvns	r3, r3
 80099b2:	401a      	ands	r2, r3
 80099b4:	693b      	ldr	r3, [r7, #16]
 80099b6:	605a      	str	r2, [r3, #4]

				vTaskSuspendAll();
 80099b8:	f7fe fb88 	bl	80080cc <vTaskSuspendAll>
				{
					/* Add this block to the list of free blocks. */
					xFreeBytesRemaining += pxLink->xBlockSize;
 80099bc:	693b      	ldr	r3, [r7, #16]
 80099be:	685a      	ldr	r2, [r3, #4]
 80099c0:	4b0a      	ldr	r3, [pc, #40]	; (80099ec <vPortFree+0xbc>)
 80099c2:	681b      	ldr	r3, [r3, #0]
 80099c4:	4413      	add	r3, r2
 80099c6:	4a09      	ldr	r2, [pc, #36]	; (80099ec <vPortFree+0xbc>)
 80099c8:	6013      	str	r3, [r2, #0]
					traceFREE( pv, pxLink->xBlockSize );
					prvInsertBlockIntoFreeList( ( ( BlockLink_t * ) pxLink ) );
 80099ca:	6938      	ldr	r0, [r7, #16]
 80099cc:	f000 f874 	bl	8009ab8 <prvInsertBlockIntoFreeList>
					xNumberOfSuccessfulFrees++;
 80099d0:	4b07      	ldr	r3, [pc, #28]	; (80099f0 <vPortFree+0xc0>)
 80099d2:	681b      	ldr	r3, [r3, #0]
 80099d4:	3301      	adds	r3, #1
 80099d6:	4a06      	ldr	r2, [pc, #24]	; (80099f0 <vPortFree+0xc0>)
 80099d8:	6013      	str	r3, [r2, #0]
				}
				( void ) xTaskResumeAll();
 80099da:	f7fe fb85 	bl	80080e8 <xTaskResumeAll>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
}
 80099de:	bf00      	nop
 80099e0:	3718      	adds	r7, #24
 80099e2:	46bd      	mov	sp, r7
 80099e4:	bd80      	pop	{r7, pc}
 80099e6:	bf00      	nop
 80099e8:	24004fb4 	.word	0x24004fb4
 80099ec:	24004fa4 	.word	0x24004fa4
 80099f0:	24004fb0 	.word	0x24004fb0

080099f4 <prvHeapInit>:
	/* This just exists to keep the linker quiet. */
}
/*-----------------------------------------------------------*/

static void prvHeapInit( void )
{
 80099f4:	b480      	push	{r7}
 80099f6:	b085      	sub	sp, #20
 80099f8:	af00      	add	r7, sp, #0
BlockLink_t *pxFirstFreeBlock;
uint8_t *pucAlignedHeap;
size_t uxAddress;
size_t xTotalHeapSize = configTOTAL_HEAP_SIZE;
 80099fa:	f44f 5370 	mov.w	r3, #15360	; 0x3c00
 80099fe:	60bb      	str	r3, [r7, #8]

	/* Ensure the heap starts on a correctly aligned boundary. */
	uxAddress = ( size_t ) ucHeap;
 8009a00:	4b27      	ldr	r3, [pc, #156]	; (8009aa0 <prvHeapInit+0xac>)
 8009a02:	60fb      	str	r3, [r7, #12]

	if( ( uxAddress & portBYTE_ALIGNMENT_MASK ) != 0 )
 8009a04:	68fb      	ldr	r3, [r7, #12]
 8009a06:	f003 0307 	and.w	r3, r3, #7
 8009a0a:	2b00      	cmp	r3, #0
 8009a0c:	d00c      	beq.n	8009a28 <prvHeapInit+0x34>
	{
		uxAddress += ( portBYTE_ALIGNMENT - 1 );
 8009a0e:	68fb      	ldr	r3, [r7, #12]
 8009a10:	3307      	adds	r3, #7
 8009a12:	60fb      	str	r3, [r7, #12]
		uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 8009a14:	68fb      	ldr	r3, [r7, #12]
 8009a16:	f023 0307 	bic.w	r3, r3, #7
 8009a1a:	60fb      	str	r3, [r7, #12]
		xTotalHeapSize -= uxAddress - ( size_t ) ucHeap;
 8009a1c:	68ba      	ldr	r2, [r7, #8]
 8009a1e:	68fb      	ldr	r3, [r7, #12]
 8009a20:	1ad3      	subs	r3, r2, r3
 8009a22:	4a1f      	ldr	r2, [pc, #124]	; (8009aa0 <prvHeapInit+0xac>)
 8009a24:	4413      	add	r3, r2
 8009a26:	60bb      	str	r3, [r7, #8]
	}

	pucAlignedHeap = ( uint8_t * ) uxAddress;
 8009a28:	68fb      	ldr	r3, [r7, #12]
 8009a2a:	607b      	str	r3, [r7, #4]

	/* xStart is used to hold a pointer to the first item in the list of free
	blocks.  The void cast is used to prevent compiler warnings. */
	xStart.pxNextFreeBlock = ( void * ) pucAlignedHeap;
 8009a2c:	4a1d      	ldr	r2, [pc, #116]	; (8009aa4 <prvHeapInit+0xb0>)
 8009a2e:	687b      	ldr	r3, [r7, #4]
 8009a30:	6013      	str	r3, [r2, #0]
	xStart.xBlockSize = ( size_t ) 0;
 8009a32:	4b1c      	ldr	r3, [pc, #112]	; (8009aa4 <prvHeapInit+0xb0>)
 8009a34:	2200      	movs	r2, #0
 8009a36:	605a      	str	r2, [r3, #4]

	/* pxEnd is used to mark the end of the list of free blocks and is inserted
	at the end of the heap space. */
	uxAddress = ( ( size_t ) pucAlignedHeap ) + xTotalHeapSize;
 8009a38:	687b      	ldr	r3, [r7, #4]
 8009a3a:	68ba      	ldr	r2, [r7, #8]
 8009a3c:	4413      	add	r3, r2
 8009a3e:	60fb      	str	r3, [r7, #12]
	uxAddress -= xHeapStructSize;
 8009a40:	2208      	movs	r2, #8
 8009a42:	68fb      	ldr	r3, [r7, #12]
 8009a44:	1a9b      	subs	r3, r3, r2
 8009a46:	60fb      	str	r3, [r7, #12]
	uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 8009a48:	68fb      	ldr	r3, [r7, #12]
 8009a4a:	f023 0307 	bic.w	r3, r3, #7
 8009a4e:	60fb      	str	r3, [r7, #12]
	pxEnd = ( void * ) uxAddress;
 8009a50:	68fb      	ldr	r3, [r7, #12]
 8009a52:	4a15      	ldr	r2, [pc, #84]	; (8009aa8 <prvHeapInit+0xb4>)
 8009a54:	6013      	str	r3, [r2, #0]
	pxEnd->xBlockSize = 0;
 8009a56:	4b14      	ldr	r3, [pc, #80]	; (8009aa8 <prvHeapInit+0xb4>)
 8009a58:	681b      	ldr	r3, [r3, #0]
 8009a5a:	2200      	movs	r2, #0
 8009a5c:	605a      	str	r2, [r3, #4]
	pxEnd->pxNextFreeBlock = NULL;
 8009a5e:	4b12      	ldr	r3, [pc, #72]	; (8009aa8 <prvHeapInit+0xb4>)
 8009a60:	681b      	ldr	r3, [r3, #0]
 8009a62:	2200      	movs	r2, #0
 8009a64:	601a      	str	r2, [r3, #0]

	/* To start with there is a single free block that is sized to take up the
	entire heap space, minus the space taken by pxEnd. */
	pxFirstFreeBlock = ( void * ) pucAlignedHeap;
 8009a66:	687b      	ldr	r3, [r7, #4]
 8009a68:	603b      	str	r3, [r7, #0]
	pxFirstFreeBlock->xBlockSize = uxAddress - ( size_t ) pxFirstFreeBlock;
 8009a6a:	683b      	ldr	r3, [r7, #0]
 8009a6c:	68fa      	ldr	r2, [r7, #12]
 8009a6e:	1ad2      	subs	r2, r2, r3
 8009a70:	683b      	ldr	r3, [r7, #0]
 8009a72:	605a      	str	r2, [r3, #4]
	pxFirstFreeBlock->pxNextFreeBlock = pxEnd;
 8009a74:	4b0c      	ldr	r3, [pc, #48]	; (8009aa8 <prvHeapInit+0xb4>)
 8009a76:	681a      	ldr	r2, [r3, #0]
 8009a78:	683b      	ldr	r3, [r7, #0]
 8009a7a:	601a      	str	r2, [r3, #0]

	/* Only one block exists - and it covers the entire usable heap space. */
	xMinimumEverFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 8009a7c:	683b      	ldr	r3, [r7, #0]
 8009a7e:	685b      	ldr	r3, [r3, #4]
 8009a80:	4a0a      	ldr	r2, [pc, #40]	; (8009aac <prvHeapInit+0xb8>)
 8009a82:	6013      	str	r3, [r2, #0]
	xFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 8009a84:	683b      	ldr	r3, [r7, #0]
 8009a86:	685b      	ldr	r3, [r3, #4]
 8009a88:	4a09      	ldr	r2, [pc, #36]	; (8009ab0 <prvHeapInit+0xbc>)
 8009a8a:	6013      	str	r3, [r2, #0]

	/* Work out the position of the top bit in a size_t variable. */
	xBlockAllocatedBit = ( ( size_t ) 1 ) << ( ( sizeof( size_t ) * heapBITS_PER_BYTE ) - 1 );
 8009a8c:	4b09      	ldr	r3, [pc, #36]	; (8009ab4 <prvHeapInit+0xc0>)
 8009a8e:	f04f 4200 	mov.w	r2, #2147483648	; 0x80000000
 8009a92:	601a      	str	r2, [r3, #0]
}
 8009a94:	bf00      	nop
 8009a96:	3714      	adds	r7, #20
 8009a98:	46bd      	mov	sp, r7
 8009a9a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009a9e:	4770      	bx	lr
 8009aa0:	24001398 	.word	0x24001398
 8009aa4:	24004f98 	.word	0x24004f98
 8009aa8:	24004fa0 	.word	0x24004fa0
 8009aac:	24004fa8 	.word	0x24004fa8
 8009ab0:	24004fa4 	.word	0x24004fa4
 8009ab4:	24004fb4 	.word	0x24004fb4

08009ab8 <prvInsertBlockIntoFreeList>:
/*-----------------------------------------------------------*/

static void prvInsertBlockIntoFreeList( BlockLink_t *pxBlockToInsert )
{
 8009ab8:	b480      	push	{r7}
 8009aba:	b085      	sub	sp, #20
 8009abc:	af00      	add	r7, sp, #0
 8009abe:	6078      	str	r0, [r7, #4]
BlockLink_t *pxIterator;
uint8_t *puc;

	/* Iterate through the list until a block is found that has a higher address
	than the block being inserted. */
	for( pxIterator = &xStart; pxIterator->pxNextFreeBlock < pxBlockToInsert; pxIterator = pxIterator->pxNextFreeBlock )
 8009ac0:	4b28      	ldr	r3, [pc, #160]	; (8009b64 <prvInsertBlockIntoFreeList+0xac>)
 8009ac2:	60fb      	str	r3, [r7, #12]
 8009ac4:	e002      	b.n	8009acc <prvInsertBlockIntoFreeList+0x14>
 8009ac6:	68fb      	ldr	r3, [r7, #12]
 8009ac8:	681b      	ldr	r3, [r3, #0]
 8009aca:	60fb      	str	r3, [r7, #12]
 8009acc:	68fb      	ldr	r3, [r7, #12]
 8009ace:	681b      	ldr	r3, [r3, #0]
 8009ad0:	687a      	ldr	r2, [r7, #4]
 8009ad2:	429a      	cmp	r2, r3
 8009ad4:	d8f7      	bhi.n	8009ac6 <prvInsertBlockIntoFreeList+0xe>
		/* Nothing to do here, just iterate to the right position. */
	}

	/* Do the block being inserted, and the block it is being inserted after
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxIterator;
 8009ad6:	68fb      	ldr	r3, [r7, #12]
 8009ad8:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxIterator->xBlockSize ) == ( uint8_t * ) pxBlockToInsert )
 8009ada:	68fb      	ldr	r3, [r7, #12]
 8009adc:	685b      	ldr	r3, [r3, #4]
 8009ade:	68ba      	ldr	r2, [r7, #8]
 8009ae0:	4413      	add	r3, r2
 8009ae2:	687a      	ldr	r2, [r7, #4]
 8009ae4:	429a      	cmp	r2, r3
 8009ae6:	d108      	bne.n	8009afa <prvInsertBlockIntoFreeList+0x42>
	{
		pxIterator->xBlockSize += pxBlockToInsert->xBlockSize;
 8009ae8:	68fb      	ldr	r3, [r7, #12]
 8009aea:	685a      	ldr	r2, [r3, #4]
 8009aec:	687b      	ldr	r3, [r7, #4]
 8009aee:	685b      	ldr	r3, [r3, #4]
 8009af0:	441a      	add	r2, r3
 8009af2:	68fb      	ldr	r3, [r7, #12]
 8009af4:	605a      	str	r2, [r3, #4]
		pxBlockToInsert = pxIterator;
 8009af6:	68fb      	ldr	r3, [r7, #12]
 8009af8:	607b      	str	r3, [r7, #4]
		mtCOVERAGE_TEST_MARKER();
	}

	/* Do the block being inserted, and the block it is being inserted before
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxBlockToInsert;
 8009afa:	687b      	ldr	r3, [r7, #4]
 8009afc:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxBlockToInsert->xBlockSize ) == ( uint8_t * ) pxIterator->pxNextFreeBlock )
 8009afe:	687b      	ldr	r3, [r7, #4]
 8009b00:	685b      	ldr	r3, [r3, #4]
 8009b02:	68ba      	ldr	r2, [r7, #8]
 8009b04:	441a      	add	r2, r3
 8009b06:	68fb      	ldr	r3, [r7, #12]
 8009b08:	681b      	ldr	r3, [r3, #0]
 8009b0a:	429a      	cmp	r2, r3
 8009b0c:	d118      	bne.n	8009b40 <prvInsertBlockIntoFreeList+0x88>
	{
		if( pxIterator->pxNextFreeBlock != pxEnd )
 8009b0e:	68fb      	ldr	r3, [r7, #12]
 8009b10:	681a      	ldr	r2, [r3, #0]
 8009b12:	4b15      	ldr	r3, [pc, #84]	; (8009b68 <prvInsertBlockIntoFreeList+0xb0>)
 8009b14:	681b      	ldr	r3, [r3, #0]
 8009b16:	429a      	cmp	r2, r3
 8009b18:	d00d      	beq.n	8009b36 <prvInsertBlockIntoFreeList+0x7e>
		{
			/* Form one big block from the two blocks. */
			pxBlockToInsert->xBlockSize += pxIterator->pxNextFreeBlock->xBlockSize;
 8009b1a:	687b      	ldr	r3, [r7, #4]
 8009b1c:	685a      	ldr	r2, [r3, #4]
 8009b1e:	68fb      	ldr	r3, [r7, #12]
 8009b20:	681b      	ldr	r3, [r3, #0]
 8009b22:	685b      	ldr	r3, [r3, #4]
 8009b24:	441a      	add	r2, r3
 8009b26:	687b      	ldr	r3, [r7, #4]
 8009b28:	605a      	str	r2, [r3, #4]
			pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock->pxNextFreeBlock;
 8009b2a:	68fb      	ldr	r3, [r7, #12]
 8009b2c:	681b      	ldr	r3, [r3, #0]
 8009b2e:	681a      	ldr	r2, [r3, #0]
 8009b30:	687b      	ldr	r3, [r7, #4]
 8009b32:	601a      	str	r2, [r3, #0]
 8009b34:	e008      	b.n	8009b48 <prvInsertBlockIntoFreeList+0x90>
		}
		else
		{
			pxBlockToInsert->pxNextFreeBlock = pxEnd;
 8009b36:	4b0c      	ldr	r3, [pc, #48]	; (8009b68 <prvInsertBlockIntoFreeList+0xb0>)
 8009b38:	681a      	ldr	r2, [r3, #0]
 8009b3a:	687b      	ldr	r3, [r7, #4]
 8009b3c:	601a      	str	r2, [r3, #0]
 8009b3e:	e003      	b.n	8009b48 <prvInsertBlockIntoFreeList+0x90>
		}
	}
	else
	{
		pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock;
 8009b40:	68fb      	ldr	r3, [r7, #12]
 8009b42:	681a      	ldr	r2, [r3, #0]
 8009b44:	687b      	ldr	r3, [r7, #4]
 8009b46:	601a      	str	r2, [r3, #0]

	/* If the block being inserted plugged a gab, so was merged with the block
	before and the block after, then it's pxNextFreeBlock pointer will have
	already been set, and should not be set here as that would make it point
	to itself. */
	if( pxIterator != pxBlockToInsert )
 8009b48:	68fa      	ldr	r2, [r7, #12]
 8009b4a:	687b      	ldr	r3, [r7, #4]
 8009b4c:	429a      	cmp	r2, r3
 8009b4e:	d002      	beq.n	8009b56 <prvInsertBlockIntoFreeList+0x9e>
	{
		pxIterator->pxNextFreeBlock = pxBlockToInsert;
 8009b50:	68fb      	ldr	r3, [r7, #12]
 8009b52:	687a      	ldr	r2, [r7, #4]
 8009b54:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 8009b56:	bf00      	nop
 8009b58:	3714      	adds	r7, #20
 8009b5a:	46bd      	mov	sp, r7
 8009b5c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009b60:	4770      	bx	lr
 8009b62:	bf00      	nop
 8009b64:	24004f98 	.word	0x24004f98
 8009b68:	24004fa0 	.word	0x24004fa0

08009b6c <__errno>:
 8009b6c:	4b01      	ldr	r3, [pc, #4]	; (8009b74 <__errno+0x8>)
 8009b6e:	6818      	ldr	r0, [r3, #0]
 8009b70:	4770      	bx	lr
 8009b72:	bf00      	nop
 8009b74:	24000014 	.word	0x24000014

08009b78 <std>:
 8009b78:	2300      	movs	r3, #0
 8009b7a:	b510      	push	{r4, lr}
 8009b7c:	4604      	mov	r4, r0
 8009b7e:	e9c0 3300 	strd	r3, r3, [r0]
 8009b82:	e9c0 3304 	strd	r3, r3, [r0, #16]
 8009b86:	6083      	str	r3, [r0, #8]
 8009b88:	8181      	strh	r1, [r0, #12]
 8009b8a:	6643      	str	r3, [r0, #100]	; 0x64
 8009b8c:	81c2      	strh	r2, [r0, #14]
 8009b8e:	6183      	str	r3, [r0, #24]
 8009b90:	4619      	mov	r1, r3
 8009b92:	2208      	movs	r2, #8
 8009b94:	305c      	adds	r0, #92	; 0x5c
 8009b96:	f000 f91a 	bl	8009dce <memset>
 8009b9a:	4b05      	ldr	r3, [pc, #20]	; (8009bb0 <std+0x38>)
 8009b9c:	6263      	str	r3, [r4, #36]	; 0x24
 8009b9e:	4b05      	ldr	r3, [pc, #20]	; (8009bb4 <std+0x3c>)
 8009ba0:	62a3      	str	r3, [r4, #40]	; 0x28
 8009ba2:	4b05      	ldr	r3, [pc, #20]	; (8009bb8 <std+0x40>)
 8009ba4:	62e3      	str	r3, [r4, #44]	; 0x2c
 8009ba6:	4b05      	ldr	r3, [pc, #20]	; (8009bbc <std+0x44>)
 8009ba8:	6224      	str	r4, [r4, #32]
 8009baa:	6323      	str	r3, [r4, #48]	; 0x30
 8009bac:	bd10      	pop	{r4, pc}
 8009bae:	bf00      	nop
 8009bb0:	0800a06d 	.word	0x0800a06d
 8009bb4:	0800a08f 	.word	0x0800a08f
 8009bb8:	0800a0c7 	.word	0x0800a0c7
 8009bbc:	0800a0eb 	.word	0x0800a0eb

08009bc0 <_cleanup_r>:
 8009bc0:	4901      	ldr	r1, [pc, #4]	; (8009bc8 <_cleanup_r+0x8>)
 8009bc2:	f000 b8af 	b.w	8009d24 <_fwalk_reent>
 8009bc6:	bf00      	nop
 8009bc8:	0800a245 	.word	0x0800a245

08009bcc <__sfmoreglue>:
 8009bcc:	b570      	push	{r4, r5, r6, lr}
 8009bce:	2268      	movs	r2, #104	; 0x68
 8009bd0:	1e4d      	subs	r5, r1, #1
 8009bd2:	4355      	muls	r5, r2
 8009bd4:	460e      	mov	r6, r1
 8009bd6:	f105 0174 	add.w	r1, r5, #116	; 0x74
 8009bda:	f000 f921 	bl	8009e20 <_malloc_r>
 8009bde:	4604      	mov	r4, r0
 8009be0:	b140      	cbz	r0, 8009bf4 <__sfmoreglue+0x28>
 8009be2:	2100      	movs	r1, #0
 8009be4:	e9c0 1600 	strd	r1, r6, [r0]
 8009be8:	300c      	adds	r0, #12
 8009bea:	60a0      	str	r0, [r4, #8]
 8009bec:	f105 0268 	add.w	r2, r5, #104	; 0x68
 8009bf0:	f000 f8ed 	bl	8009dce <memset>
 8009bf4:	4620      	mov	r0, r4
 8009bf6:	bd70      	pop	{r4, r5, r6, pc}

08009bf8 <__sfp_lock_acquire>:
 8009bf8:	4801      	ldr	r0, [pc, #4]	; (8009c00 <__sfp_lock_acquire+0x8>)
 8009bfa:	f000 b8d8 	b.w	8009dae <__retarget_lock_acquire_recursive>
 8009bfe:	bf00      	nop
 8009c00:	24004fb9 	.word	0x24004fb9

08009c04 <__sfp_lock_release>:
 8009c04:	4801      	ldr	r0, [pc, #4]	; (8009c0c <__sfp_lock_release+0x8>)
 8009c06:	f000 b8d3 	b.w	8009db0 <__retarget_lock_release_recursive>
 8009c0a:	bf00      	nop
 8009c0c:	24004fb9 	.word	0x24004fb9

08009c10 <__sinit_lock_acquire>:
 8009c10:	4801      	ldr	r0, [pc, #4]	; (8009c18 <__sinit_lock_acquire+0x8>)
 8009c12:	f000 b8cc 	b.w	8009dae <__retarget_lock_acquire_recursive>
 8009c16:	bf00      	nop
 8009c18:	24004fba 	.word	0x24004fba

08009c1c <__sinit_lock_release>:
 8009c1c:	4801      	ldr	r0, [pc, #4]	; (8009c24 <__sinit_lock_release+0x8>)
 8009c1e:	f000 b8c7 	b.w	8009db0 <__retarget_lock_release_recursive>
 8009c22:	bf00      	nop
 8009c24:	24004fba 	.word	0x24004fba

08009c28 <__sinit>:
 8009c28:	b510      	push	{r4, lr}
 8009c2a:	4604      	mov	r4, r0
 8009c2c:	f7ff fff0 	bl	8009c10 <__sinit_lock_acquire>
 8009c30:	69a3      	ldr	r3, [r4, #24]
 8009c32:	b11b      	cbz	r3, 8009c3c <__sinit+0x14>
 8009c34:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8009c38:	f7ff bff0 	b.w	8009c1c <__sinit_lock_release>
 8009c3c:	e9c4 3312 	strd	r3, r3, [r4, #72]	; 0x48
 8009c40:	6523      	str	r3, [r4, #80]	; 0x50
 8009c42:	4b13      	ldr	r3, [pc, #76]	; (8009c90 <__sinit+0x68>)
 8009c44:	4a13      	ldr	r2, [pc, #76]	; (8009c94 <__sinit+0x6c>)
 8009c46:	681b      	ldr	r3, [r3, #0]
 8009c48:	62a2      	str	r2, [r4, #40]	; 0x28
 8009c4a:	42a3      	cmp	r3, r4
 8009c4c:	bf04      	itt	eq
 8009c4e:	2301      	moveq	r3, #1
 8009c50:	61a3      	streq	r3, [r4, #24]
 8009c52:	4620      	mov	r0, r4
 8009c54:	f000 f820 	bl	8009c98 <__sfp>
 8009c58:	6060      	str	r0, [r4, #4]
 8009c5a:	4620      	mov	r0, r4
 8009c5c:	f000 f81c 	bl	8009c98 <__sfp>
 8009c60:	60a0      	str	r0, [r4, #8]
 8009c62:	4620      	mov	r0, r4
 8009c64:	f000 f818 	bl	8009c98 <__sfp>
 8009c68:	2200      	movs	r2, #0
 8009c6a:	60e0      	str	r0, [r4, #12]
 8009c6c:	2104      	movs	r1, #4
 8009c6e:	6860      	ldr	r0, [r4, #4]
 8009c70:	f7ff ff82 	bl	8009b78 <std>
 8009c74:	68a0      	ldr	r0, [r4, #8]
 8009c76:	2201      	movs	r2, #1
 8009c78:	2109      	movs	r1, #9
 8009c7a:	f7ff ff7d 	bl	8009b78 <std>
 8009c7e:	68e0      	ldr	r0, [r4, #12]
 8009c80:	2202      	movs	r2, #2
 8009c82:	2112      	movs	r1, #18
 8009c84:	f7ff ff78 	bl	8009b78 <std>
 8009c88:	2301      	movs	r3, #1
 8009c8a:	61a3      	str	r3, [r4, #24]
 8009c8c:	e7d2      	b.n	8009c34 <__sinit+0xc>
 8009c8e:	bf00      	nop
 8009c90:	0800b0f8 	.word	0x0800b0f8
 8009c94:	08009bc1 	.word	0x08009bc1

08009c98 <__sfp>:
 8009c98:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8009c9a:	4607      	mov	r7, r0
 8009c9c:	f7ff ffac 	bl	8009bf8 <__sfp_lock_acquire>
 8009ca0:	4b1e      	ldr	r3, [pc, #120]	; (8009d1c <__sfp+0x84>)
 8009ca2:	681e      	ldr	r6, [r3, #0]
 8009ca4:	69b3      	ldr	r3, [r6, #24]
 8009ca6:	b913      	cbnz	r3, 8009cae <__sfp+0x16>
 8009ca8:	4630      	mov	r0, r6
 8009caa:	f7ff ffbd 	bl	8009c28 <__sinit>
 8009cae:	3648      	adds	r6, #72	; 0x48
 8009cb0:	e9d6 3401 	ldrd	r3, r4, [r6, #4]
 8009cb4:	3b01      	subs	r3, #1
 8009cb6:	d503      	bpl.n	8009cc0 <__sfp+0x28>
 8009cb8:	6833      	ldr	r3, [r6, #0]
 8009cba:	b30b      	cbz	r3, 8009d00 <__sfp+0x68>
 8009cbc:	6836      	ldr	r6, [r6, #0]
 8009cbe:	e7f7      	b.n	8009cb0 <__sfp+0x18>
 8009cc0:	f9b4 500c 	ldrsh.w	r5, [r4, #12]
 8009cc4:	b9d5      	cbnz	r5, 8009cfc <__sfp+0x64>
 8009cc6:	4b16      	ldr	r3, [pc, #88]	; (8009d20 <__sfp+0x88>)
 8009cc8:	60e3      	str	r3, [r4, #12]
 8009cca:	f104 0058 	add.w	r0, r4, #88	; 0x58
 8009cce:	6665      	str	r5, [r4, #100]	; 0x64
 8009cd0:	f000 f86c 	bl	8009dac <__retarget_lock_init_recursive>
 8009cd4:	f7ff ff96 	bl	8009c04 <__sfp_lock_release>
 8009cd8:	e9c4 5501 	strd	r5, r5, [r4, #4]
 8009cdc:	e9c4 5504 	strd	r5, r5, [r4, #16]
 8009ce0:	6025      	str	r5, [r4, #0]
 8009ce2:	61a5      	str	r5, [r4, #24]
 8009ce4:	2208      	movs	r2, #8
 8009ce6:	4629      	mov	r1, r5
 8009ce8:	f104 005c 	add.w	r0, r4, #92	; 0x5c
 8009cec:	f000 f86f 	bl	8009dce <memset>
 8009cf0:	e9c4 550d 	strd	r5, r5, [r4, #52]	; 0x34
 8009cf4:	e9c4 5512 	strd	r5, r5, [r4, #72]	; 0x48
 8009cf8:	4620      	mov	r0, r4
 8009cfa:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8009cfc:	3468      	adds	r4, #104	; 0x68
 8009cfe:	e7d9      	b.n	8009cb4 <__sfp+0x1c>
 8009d00:	2104      	movs	r1, #4
 8009d02:	4638      	mov	r0, r7
 8009d04:	f7ff ff62 	bl	8009bcc <__sfmoreglue>
 8009d08:	4604      	mov	r4, r0
 8009d0a:	6030      	str	r0, [r6, #0]
 8009d0c:	2800      	cmp	r0, #0
 8009d0e:	d1d5      	bne.n	8009cbc <__sfp+0x24>
 8009d10:	f7ff ff78 	bl	8009c04 <__sfp_lock_release>
 8009d14:	230c      	movs	r3, #12
 8009d16:	603b      	str	r3, [r7, #0]
 8009d18:	e7ee      	b.n	8009cf8 <__sfp+0x60>
 8009d1a:	bf00      	nop
 8009d1c:	0800b0f8 	.word	0x0800b0f8
 8009d20:	ffff0001 	.word	0xffff0001

08009d24 <_fwalk_reent>:
 8009d24:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8009d28:	4606      	mov	r6, r0
 8009d2a:	4688      	mov	r8, r1
 8009d2c:	f100 0448 	add.w	r4, r0, #72	; 0x48
 8009d30:	2700      	movs	r7, #0
 8009d32:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 8009d36:	f1b9 0901 	subs.w	r9, r9, #1
 8009d3a:	d505      	bpl.n	8009d48 <_fwalk_reent+0x24>
 8009d3c:	6824      	ldr	r4, [r4, #0]
 8009d3e:	2c00      	cmp	r4, #0
 8009d40:	d1f7      	bne.n	8009d32 <_fwalk_reent+0xe>
 8009d42:	4638      	mov	r0, r7
 8009d44:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8009d48:	89ab      	ldrh	r3, [r5, #12]
 8009d4a:	2b01      	cmp	r3, #1
 8009d4c:	d907      	bls.n	8009d5e <_fwalk_reent+0x3a>
 8009d4e:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 8009d52:	3301      	adds	r3, #1
 8009d54:	d003      	beq.n	8009d5e <_fwalk_reent+0x3a>
 8009d56:	4629      	mov	r1, r5
 8009d58:	4630      	mov	r0, r6
 8009d5a:	47c0      	blx	r8
 8009d5c:	4307      	orrs	r7, r0
 8009d5e:	3568      	adds	r5, #104	; 0x68
 8009d60:	e7e9      	b.n	8009d36 <_fwalk_reent+0x12>
	...

08009d64 <__libc_init_array>:
 8009d64:	b570      	push	{r4, r5, r6, lr}
 8009d66:	4d0d      	ldr	r5, [pc, #52]	; (8009d9c <__libc_init_array+0x38>)
 8009d68:	4c0d      	ldr	r4, [pc, #52]	; (8009da0 <__libc_init_array+0x3c>)
 8009d6a:	1b64      	subs	r4, r4, r5
 8009d6c:	10a4      	asrs	r4, r4, #2
 8009d6e:	2600      	movs	r6, #0
 8009d70:	42a6      	cmp	r6, r4
 8009d72:	d109      	bne.n	8009d88 <__libc_init_array+0x24>
 8009d74:	4d0b      	ldr	r5, [pc, #44]	; (8009da4 <__libc_init_array+0x40>)
 8009d76:	4c0c      	ldr	r4, [pc, #48]	; (8009da8 <__libc_init_array+0x44>)
 8009d78:	f001 f900 	bl	800af7c <_init>
 8009d7c:	1b64      	subs	r4, r4, r5
 8009d7e:	10a4      	asrs	r4, r4, #2
 8009d80:	2600      	movs	r6, #0
 8009d82:	42a6      	cmp	r6, r4
 8009d84:	d105      	bne.n	8009d92 <__libc_init_array+0x2e>
 8009d86:	bd70      	pop	{r4, r5, r6, pc}
 8009d88:	f855 3b04 	ldr.w	r3, [r5], #4
 8009d8c:	4798      	blx	r3
 8009d8e:	3601      	adds	r6, #1
 8009d90:	e7ee      	b.n	8009d70 <__libc_init_array+0xc>
 8009d92:	f855 3b04 	ldr.w	r3, [r5], #4
 8009d96:	4798      	blx	r3
 8009d98:	3601      	adds	r6, #1
 8009d9a:	e7f2      	b.n	8009d82 <__libc_init_array+0x1e>
 8009d9c:	0800b138 	.word	0x0800b138
 8009da0:	0800b138 	.word	0x0800b138
 8009da4:	0800b138 	.word	0x0800b138
 8009da8:	0800b13c 	.word	0x0800b13c

08009dac <__retarget_lock_init_recursive>:
 8009dac:	4770      	bx	lr

08009dae <__retarget_lock_acquire_recursive>:
 8009dae:	4770      	bx	lr

08009db0 <__retarget_lock_release_recursive>:
 8009db0:	4770      	bx	lr

08009db2 <memcpy>:
 8009db2:	440a      	add	r2, r1
 8009db4:	4291      	cmp	r1, r2
 8009db6:	f100 33ff 	add.w	r3, r0, #4294967295
 8009dba:	d100      	bne.n	8009dbe <memcpy+0xc>
 8009dbc:	4770      	bx	lr
 8009dbe:	b510      	push	{r4, lr}
 8009dc0:	f811 4b01 	ldrb.w	r4, [r1], #1
 8009dc4:	f803 4f01 	strb.w	r4, [r3, #1]!
 8009dc8:	4291      	cmp	r1, r2
 8009dca:	d1f9      	bne.n	8009dc0 <memcpy+0xe>
 8009dcc:	bd10      	pop	{r4, pc}

08009dce <memset>:
 8009dce:	4402      	add	r2, r0
 8009dd0:	4603      	mov	r3, r0
 8009dd2:	4293      	cmp	r3, r2
 8009dd4:	d100      	bne.n	8009dd8 <memset+0xa>
 8009dd6:	4770      	bx	lr
 8009dd8:	f803 1b01 	strb.w	r1, [r3], #1
 8009ddc:	e7f9      	b.n	8009dd2 <memset+0x4>
	...

08009de0 <sbrk_aligned>:
 8009de0:	b570      	push	{r4, r5, r6, lr}
 8009de2:	4e0e      	ldr	r6, [pc, #56]	; (8009e1c <sbrk_aligned+0x3c>)
 8009de4:	460c      	mov	r4, r1
 8009de6:	6831      	ldr	r1, [r6, #0]
 8009de8:	4605      	mov	r5, r0
 8009dea:	b911      	cbnz	r1, 8009df2 <sbrk_aligned+0x12>
 8009dec:	f000 f90e 	bl	800a00c <_sbrk_r>
 8009df0:	6030      	str	r0, [r6, #0]
 8009df2:	4621      	mov	r1, r4
 8009df4:	4628      	mov	r0, r5
 8009df6:	f000 f909 	bl	800a00c <_sbrk_r>
 8009dfa:	1c43      	adds	r3, r0, #1
 8009dfc:	d00a      	beq.n	8009e14 <sbrk_aligned+0x34>
 8009dfe:	1cc4      	adds	r4, r0, #3
 8009e00:	f024 0403 	bic.w	r4, r4, #3
 8009e04:	42a0      	cmp	r0, r4
 8009e06:	d007      	beq.n	8009e18 <sbrk_aligned+0x38>
 8009e08:	1a21      	subs	r1, r4, r0
 8009e0a:	4628      	mov	r0, r5
 8009e0c:	f000 f8fe 	bl	800a00c <_sbrk_r>
 8009e10:	3001      	adds	r0, #1
 8009e12:	d101      	bne.n	8009e18 <sbrk_aligned+0x38>
 8009e14:	f04f 34ff 	mov.w	r4, #4294967295
 8009e18:	4620      	mov	r0, r4
 8009e1a:	bd70      	pop	{r4, r5, r6, pc}
 8009e1c:	24004fc0 	.word	0x24004fc0

08009e20 <_malloc_r>:
 8009e20:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8009e24:	1ccd      	adds	r5, r1, #3
 8009e26:	f025 0503 	bic.w	r5, r5, #3
 8009e2a:	3508      	adds	r5, #8
 8009e2c:	2d0c      	cmp	r5, #12
 8009e2e:	bf38      	it	cc
 8009e30:	250c      	movcc	r5, #12
 8009e32:	2d00      	cmp	r5, #0
 8009e34:	4607      	mov	r7, r0
 8009e36:	db01      	blt.n	8009e3c <_malloc_r+0x1c>
 8009e38:	42a9      	cmp	r1, r5
 8009e3a:	d905      	bls.n	8009e48 <_malloc_r+0x28>
 8009e3c:	230c      	movs	r3, #12
 8009e3e:	603b      	str	r3, [r7, #0]
 8009e40:	2600      	movs	r6, #0
 8009e42:	4630      	mov	r0, r6
 8009e44:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8009e48:	4e2e      	ldr	r6, [pc, #184]	; (8009f04 <_malloc_r+0xe4>)
 8009e4a:	f000 fa49 	bl	800a2e0 <__malloc_lock>
 8009e4e:	6833      	ldr	r3, [r6, #0]
 8009e50:	461c      	mov	r4, r3
 8009e52:	bb34      	cbnz	r4, 8009ea2 <_malloc_r+0x82>
 8009e54:	4629      	mov	r1, r5
 8009e56:	4638      	mov	r0, r7
 8009e58:	f7ff ffc2 	bl	8009de0 <sbrk_aligned>
 8009e5c:	1c43      	adds	r3, r0, #1
 8009e5e:	4604      	mov	r4, r0
 8009e60:	d14d      	bne.n	8009efe <_malloc_r+0xde>
 8009e62:	6834      	ldr	r4, [r6, #0]
 8009e64:	4626      	mov	r6, r4
 8009e66:	2e00      	cmp	r6, #0
 8009e68:	d140      	bne.n	8009eec <_malloc_r+0xcc>
 8009e6a:	6823      	ldr	r3, [r4, #0]
 8009e6c:	4631      	mov	r1, r6
 8009e6e:	4638      	mov	r0, r7
 8009e70:	eb04 0803 	add.w	r8, r4, r3
 8009e74:	f000 f8ca 	bl	800a00c <_sbrk_r>
 8009e78:	4580      	cmp	r8, r0
 8009e7a:	d13a      	bne.n	8009ef2 <_malloc_r+0xd2>
 8009e7c:	6821      	ldr	r1, [r4, #0]
 8009e7e:	3503      	adds	r5, #3
 8009e80:	1a6d      	subs	r5, r5, r1
 8009e82:	f025 0503 	bic.w	r5, r5, #3
 8009e86:	3508      	adds	r5, #8
 8009e88:	2d0c      	cmp	r5, #12
 8009e8a:	bf38      	it	cc
 8009e8c:	250c      	movcc	r5, #12
 8009e8e:	4629      	mov	r1, r5
 8009e90:	4638      	mov	r0, r7
 8009e92:	f7ff ffa5 	bl	8009de0 <sbrk_aligned>
 8009e96:	3001      	adds	r0, #1
 8009e98:	d02b      	beq.n	8009ef2 <_malloc_r+0xd2>
 8009e9a:	6823      	ldr	r3, [r4, #0]
 8009e9c:	442b      	add	r3, r5
 8009e9e:	6023      	str	r3, [r4, #0]
 8009ea0:	e00e      	b.n	8009ec0 <_malloc_r+0xa0>
 8009ea2:	6822      	ldr	r2, [r4, #0]
 8009ea4:	1b52      	subs	r2, r2, r5
 8009ea6:	d41e      	bmi.n	8009ee6 <_malloc_r+0xc6>
 8009ea8:	2a0b      	cmp	r2, #11
 8009eaa:	d916      	bls.n	8009eda <_malloc_r+0xba>
 8009eac:	1961      	adds	r1, r4, r5
 8009eae:	42a3      	cmp	r3, r4
 8009eb0:	6025      	str	r5, [r4, #0]
 8009eb2:	bf18      	it	ne
 8009eb4:	6059      	strne	r1, [r3, #4]
 8009eb6:	6863      	ldr	r3, [r4, #4]
 8009eb8:	bf08      	it	eq
 8009eba:	6031      	streq	r1, [r6, #0]
 8009ebc:	5162      	str	r2, [r4, r5]
 8009ebe:	604b      	str	r3, [r1, #4]
 8009ec0:	4638      	mov	r0, r7
 8009ec2:	f104 060b 	add.w	r6, r4, #11
 8009ec6:	f000 fa11 	bl	800a2ec <__malloc_unlock>
 8009eca:	f026 0607 	bic.w	r6, r6, #7
 8009ece:	1d23      	adds	r3, r4, #4
 8009ed0:	1af2      	subs	r2, r6, r3
 8009ed2:	d0b6      	beq.n	8009e42 <_malloc_r+0x22>
 8009ed4:	1b9b      	subs	r3, r3, r6
 8009ed6:	50a3      	str	r3, [r4, r2]
 8009ed8:	e7b3      	b.n	8009e42 <_malloc_r+0x22>
 8009eda:	6862      	ldr	r2, [r4, #4]
 8009edc:	42a3      	cmp	r3, r4
 8009ede:	bf0c      	ite	eq
 8009ee0:	6032      	streq	r2, [r6, #0]
 8009ee2:	605a      	strne	r2, [r3, #4]
 8009ee4:	e7ec      	b.n	8009ec0 <_malloc_r+0xa0>
 8009ee6:	4623      	mov	r3, r4
 8009ee8:	6864      	ldr	r4, [r4, #4]
 8009eea:	e7b2      	b.n	8009e52 <_malloc_r+0x32>
 8009eec:	4634      	mov	r4, r6
 8009eee:	6876      	ldr	r6, [r6, #4]
 8009ef0:	e7b9      	b.n	8009e66 <_malloc_r+0x46>
 8009ef2:	230c      	movs	r3, #12
 8009ef4:	603b      	str	r3, [r7, #0]
 8009ef6:	4638      	mov	r0, r7
 8009ef8:	f000 f9f8 	bl	800a2ec <__malloc_unlock>
 8009efc:	e7a1      	b.n	8009e42 <_malloc_r+0x22>
 8009efe:	6025      	str	r5, [r4, #0]
 8009f00:	e7de      	b.n	8009ec0 <_malloc_r+0xa0>
 8009f02:	bf00      	nop
 8009f04:	24004fbc 	.word	0x24004fbc

08009f08 <iprintf>:
 8009f08:	b40f      	push	{r0, r1, r2, r3}
 8009f0a:	4b0a      	ldr	r3, [pc, #40]	; (8009f34 <iprintf+0x2c>)
 8009f0c:	b513      	push	{r0, r1, r4, lr}
 8009f0e:	681c      	ldr	r4, [r3, #0]
 8009f10:	b124      	cbz	r4, 8009f1c <iprintf+0x14>
 8009f12:	69a3      	ldr	r3, [r4, #24]
 8009f14:	b913      	cbnz	r3, 8009f1c <iprintf+0x14>
 8009f16:	4620      	mov	r0, r4
 8009f18:	f7ff fe86 	bl	8009c28 <__sinit>
 8009f1c:	ab05      	add	r3, sp, #20
 8009f1e:	9a04      	ldr	r2, [sp, #16]
 8009f20:	68a1      	ldr	r1, [r4, #8]
 8009f22:	9301      	str	r3, [sp, #4]
 8009f24:	4620      	mov	r0, r4
 8009f26:	f000 fbb9 	bl	800a69c <_vfiprintf_r>
 8009f2a:	b002      	add	sp, #8
 8009f2c:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8009f30:	b004      	add	sp, #16
 8009f32:	4770      	bx	lr
 8009f34:	24000014 	.word	0x24000014

08009f38 <cleanup_glue>:
 8009f38:	b538      	push	{r3, r4, r5, lr}
 8009f3a:	460c      	mov	r4, r1
 8009f3c:	6809      	ldr	r1, [r1, #0]
 8009f3e:	4605      	mov	r5, r0
 8009f40:	b109      	cbz	r1, 8009f46 <cleanup_glue+0xe>
 8009f42:	f7ff fff9 	bl	8009f38 <cleanup_glue>
 8009f46:	4621      	mov	r1, r4
 8009f48:	4628      	mov	r0, r5
 8009f4a:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8009f4e:	f000 b9d3 	b.w	800a2f8 <_free_r>
	...

08009f54 <_reclaim_reent>:
 8009f54:	4b2c      	ldr	r3, [pc, #176]	; (800a008 <_reclaim_reent+0xb4>)
 8009f56:	681b      	ldr	r3, [r3, #0]
 8009f58:	4283      	cmp	r3, r0
 8009f5a:	b570      	push	{r4, r5, r6, lr}
 8009f5c:	4604      	mov	r4, r0
 8009f5e:	d051      	beq.n	800a004 <_reclaim_reent+0xb0>
 8009f60:	6a43      	ldr	r3, [r0, #36]	; 0x24
 8009f62:	b143      	cbz	r3, 8009f76 <_reclaim_reent+0x22>
 8009f64:	68db      	ldr	r3, [r3, #12]
 8009f66:	2b00      	cmp	r3, #0
 8009f68:	d14a      	bne.n	800a000 <_reclaim_reent+0xac>
 8009f6a:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8009f6c:	6819      	ldr	r1, [r3, #0]
 8009f6e:	b111      	cbz	r1, 8009f76 <_reclaim_reent+0x22>
 8009f70:	4620      	mov	r0, r4
 8009f72:	f000 f9c1 	bl	800a2f8 <_free_r>
 8009f76:	6961      	ldr	r1, [r4, #20]
 8009f78:	b111      	cbz	r1, 8009f80 <_reclaim_reent+0x2c>
 8009f7a:	4620      	mov	r0, r4
 8009f7c:	f000 f9bc 	bl	800a2f8 <_free_r>
 8009f80:	6a61      	ldr	r1, [r4, #36]	; 0x24
 8009f82:	b111      	cbz	r1, 8009f8a <_reclaim_reent+0x36>
 8009f84:	4620      	mov	r0, r4
 8009f86:	f000 f9b7 	bl	800a2f8 <_free_r>
 8009f8a:	6ba1      	ldr	r1, [r4, #56]	; 0x38
 8009f8c:	b111      	cbz	r1, 8009f94 <_reclaim_reent+0x40>
 8009f8e:	4620      	mov	r0, r4
 8009f90:	f000 f9b2 	bl	800a2f8 <_free_r>
 8009f94:	6be1      	ldr	r1, [r4, #60]	; 0x3c
 8009f96:	b111      	cbz	r1, 8009f9e <_reclaim_reent+0x4a>
 8009f98:	4620      	mov	r0, r4
 8009f9a:	f000 f9ad 	bl	800a2f8 <_free_r>
 8009f9e:	6c21      	ldr	r1, [r4, #64]	; 0x40
 8009fa0:	b111      	cbz	r1, 8009fa8 <_reclaim_reent+0x54>
 8009fa2:	4620      	mov	r0, r4
 8009fa4:	f000 f9a8 	bl	800a2f8 <_free_r>
 8009fa8:	6de1      	ldr	r1, [r4, #92]	; 0x5c
 8009faa:	b111      	cbz	r1, 8009fb2 <_reclaim_reent+0x5e>
 8009fac:	4620      	mov	r0, r4
 8009fae:	f000 f9a3 	bl	800a2f8 <_free_r>
 8009fb2:	6da1      	ldr	r1, [r4, #88]	; 0x58
 8009fb4:	b111      	cbz	r1, 8009fbc <_reclaim_reent+0x68>
 8009fb6:	4620      	mov	r0, r4
 8009fb8:	f000 f99e 	bl	800a2f8 <_free_r>
 8009fbc:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8009fbe:	b111      	cbz	r1, 8009fc6 <_reclaim_reent+0x72>
 8009fc0:	4620      	mov	r0, r4
 8009fc2:	f000 f999 	bl	800a2f8 <_free_r>
 8009fc6:	69a3      	ldr	r3, [r4, #24]
 8009fc8:	b1e3      	cbz	r3, 800a004 <_reclaim_reent+0xb0>
 8009fca:	6aa3      	ldr	r3, [r4, #40]	; 0x28
 8009fcc:	4620      	mov	r0, r4
 8009fce:	4798      	blx	r3
 8009fd0:	6ca1      	ldr	r1, [r4, #72]	; 0x48
 8009fd2:	b1b9      	cbz	r1, 800a004 <_reclaim_reent+0xb0>
 8009fd4:	4620      	mov	r0, r4
 8009fd6:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 8009fda:	f7ff bfad 	b.w	8009f38 <cleanup_glue>
 8009fde:	5949      	ldr	r1, [r1, r5]
 8009fe0:	b941      	cbnz	r1, 8009ff4 <_reclaim_reent+0xa0>
 8009fe2:	3504      	adds	r5, #4
 8009fe4:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8009fe6:	2d80      	cmp	r5, #128	; 0x80
 8009fe8:	68d9      	ldr	r1, [r3, #12]
 8009fea:	d1f8      	bne.n	8009fde <_reclaim_reent+0x8a>
 8009fec:	4620      	mov	r0, r4
 8009fee:	f000 f983 	bl	800a2f8 <_free_r>
 8009ff2:	e7ba      	b.n	8009f6a <_reclaim_reent+0x16>
 8009ff4:	680e      	ldr	r6, [r1, #0]
 8009ff6:	4620      	mov	r0, r4
 8009ff8:	f000 f97e 	bl	800a2f8 <_free_r>
 8009ffc:	4631      	mov	r1, r6
 8009ffe:	e7ef      	b.n	8009fe0 <_reclaim_reent+0x8c>
 800a000:	2500      	movs	r5, #0
 800a002:	e7ef      	b.n	8009fe4 <_reclaim_reent+0x90>
 800a004:	bd70      	pop	{r4, r5, r6, pc}
 800a006:	bf00      	nop
 800a008:	24000014 	.word	0x24000014

0800a00c <_sbrk_r>:
 800a00c:	b538      	push	{r3, r4, r5, lr}
 800a00e:	4d06      	ldr	r5, [pc, #24]	; (800a028 <_sbrk_r+0x1c>)
 800a010:	2300      	movs	r3, #0
 800a012:	4604      	mov	r4, r0
 800a014:	4608      	mov	r0, r1
 800a016:	602b      	str	r3, [r5, #0]
 800a018:	f7f7 f836 	bl	8001088 <_sbrk>
 800a01c:	1c43      	adds	r3, r0, #1
 800a01e:	d102      	bne.n	800a026 <_sbrk_r+0x1a>
 800a020:	682b      	ldr	r3, [r5, #0]
 800a022:	b103      	cbz	r3, 800a026 <_sbrk_r+0x1a>
 800a024:	6023      	str	r3, [r4, #0]
 800a026:	bd38      	pop	{r3, r4, r5, pc}
 800a028:	24004fc4 	.word	0x24004fc4

0800a02c <siprintf>:
 800a02c:	b40e      	push	{r1, r2, r3}
 800a02e:	b500      	push	{lr}
 800a030:	b09c      	sub	sp, #112	; 0x70
 800a032:	ab1d      	add	r3, sp, #116	; 0x74
 800a034:	9002      	str	r0, [sp, #8]
 800a036:	9006      	str	r0, [sp, #24]
 800a038:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
 800a03c:	4809      	ldr	r0, [pc, #36]	; (800a064 <siprintf+0x38>)
 800a03e:	9107      	str	r1, [sp, #28]
 800a040:	9104      	str	r1, [sp, #16]
 800a042:	4909      	ldr	r1, [pc, #36]	; (800a068 <siprintf+0x3c>)
 800a044:	f853 2b04 	ldr.w	r2, [r3], #4
 800a048:	9105      	str	r1, [sp, #20]
 800a04a:	6800      	ldr	r0, [r0, #0]
 800a04c:	9301      	str	r3, [sp, #4]
 800a04e:	a902      	add	r1, sp, #8
 800a050:	f000 f9fa 	bl	800a448 <_svfiprintf_r>
 800a054:	9b02      	ldr	r3, [sp, #8]
 800a056:	2200      	movs	r2, #0
 800a058:	701a      	strb	r2, [r3, #0]
 800a05a:	b01c      	add	sp, #112	; 0x70
 800a05c:	f85d eb04 	ldr.w	lr, [sp], #4
 800a060:	b003      	add	sp, #12
 800a062:	4770      	bx	lr
 800a064:	24000014 	.word	0x24000014
 800a068:	ffff0208 	.word	0xffff0208

0800a06c <__sread>:
 800a06c:	b510      	push	{r4, lr}
 800a06e:	460c      	mov	r4, r1
 800a070:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800a074:	f000 fdd6 	bl	800ac24 <_read_r>
 800a078:	2800      	cmp	r0, #0
 800a07a:	bfab      	itete	ge
 800a07c:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 800a07e:	89a3      	ldrhlt	r3, [r4, #12]
 800a080:	181b      	addge	r3, r3, r0
 800a082:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 800a086:	bfac      	ite	ge
 800a088:	6563      	strge	r3, [r4, #84]	; 0x54
 800a08a:	81a3      	strhlt	r3, [r4, #12]
 800a08c:	bd10      	pop	{r4, pc}

0800a08e <__swrite>:
 800a08e:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800a092:	461f      	mov	r7, r3
 800a094:	898b      	ldrh	r3, [r1, #12]
 800a096:	05db      	lsls	r3, r3, #23
 800a098:	4605      	mov	r5, r0
 800a09a:	460c      	mov	r4, r1
 800a09c:	4616      	mov	r6, r2
 800a09e:	d505      	bpl.n	800a0ac <__swrite+0x1e>
 800a0a0:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800a0a4:	2302      	movs	r3, #2
 800a0a6:	2200      	movs	r2, #0
 800a0a8:	f000 f908 	bl	800a2bc <_lseek_r>
 800a0ac:	89a3      	ldrh	r3, [r4, #12]
 800a0ae:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800a0b2:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 800a0b6:	81a3      	strh	r3, [r4, #12]
 800a0b8:	4632      	mov	r2, r6
 800a0ba:	463b      	mov	r3, r7
 800a0bc:	4628      	mov	r0, r5
 800a0be:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800a0c2:	f000 b817 	b.w	800a0f4 <_write_r>

0800a0c6 <__sseek>:
 800a0c6:	b510      	push	{r4, lr}
 800a0c8:	460c      	mov	r4, r1
 800a0ca:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800a0ce:	f000 f8f5 	bl	800a2bc <_lseek_r>
 800a0d2:	1c43      	adds	r3, r0, #1
 800a0d4:	89a3      	ldrh	r3, [r4, #12]
 800a0d6:	bf15      	itete	ne
 800a0d8:	6560      	strne	r0, [r4, #84]	; 0x54
 800a0da:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 800a0de:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 800a0e2:	81a3      	strheq	r3, [r4, #12]
 800a0e4:	bf18      	it	ne
 800a0e6:	81a3      	strhne	r3, [r4, #12]
 800a0e8:	bd10      	pop	{r4, pc}

0800a0ea <__sclose>:
 800a0ea:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800a0ee:	f000 b813 	b.w	800a118 <_close_r>
	...

0800a0f4 <_write_r>:
 800a0f4:	b538      	push	{r3, r4, r5, lr}
 800a0f6:	4d07      	ldr	r5, [pc, #28]	; (800a114 <_write_r+0x20>)
 800a0f8:	4604      	mov	r4, r0
 800a0fa:	4608      	mov	r0, r1
 800a0fc:	4611      	mov	r1, r2
 800a0fe:	2200      	movs	r2, #0
 800a100:	602a      	str	r2, [r5, #0]
 800a102:	461a      	mov	r2, r3
 800a104:	f7f6 fad6 	bl	80006b4 <_write>
 800a108:	1c43      	adds	r3, r0, #1
 800a10a:	d102      	bne.n	800a112 <_write_r+0x1e>
 800a10c:	682b      	ldr	r3, [r5, #0]
 800a10e:	b103      	cbz	r3, 800a112 <_write_r+0x1e>
 800a110:	6023      	str	r3, [r4, #0]
 800a112:	bd38      	pop	{r3, r4, r5, pc}
 800a114:	24004fc4 	.word	0x24004fc4

0800a118 <_close_r>:
 800a118:	b538      	push	{r3, r4, r5, lr}
 800a11a:	4d06      	ldr	r5, [pc, #24]	; (800a134 <_close_r+0x1c>)
 800a11c:	2300      	movs	r3, #0
 800a11e:	4604      	mov	r4, r0
 800a120:	4608      	mov	r0, r1
 800a122:	602b      	str	r3, [r5, #0]
 800a124:	f7f6 ff7c 	bl	8001020 <_close>
 800a128:	1c43      	adds	r3, r0, #1
 800a12a:	d102      	bne.n	800a132 <_close_r+0x1a>
 800a12c:	682b      	ldr	r3, [r5, #0]
 800a12e:	b103      	cbz	r3, 800a132 <_close_r+0x1a>
 800a130:	6023      	str	r3, [r4, #0]
 800a132:	bd38      	pop	{r3, r4, r5, pc}
 800a134:	24004fc4 	.word	0x24004fc4

0800a138 <__sflush_r>:
 800a138:	898a      	ldrh	r2, [r1, #12]
 800a13a:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800a13e:	4605      	mov	r5, r0
 800a140:	0710      	lsls	r0, r2, #28
 800a142:	460c      	mov	r4, r1
 800a144:	d458      	bmi.n	800a1f8 <__sflush_r+0xc0>
 800a146:	684b      	ldr	r3, [r1, #4]
 800a148:	2b00      	cmp	r3, #0
 800a14a:	dc05      	bgt.n	800a158 <__sflush_r+0x20>
 800a14c:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 800a14e:	2b00      	cmp	r3, #0
 800a150:	dc02      	bgt.n	800a158 <__sflush_r+0x20>
 800a152:	2000      	movs	r0, #0
 800a154:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800a158:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 800a15a:	2e00      	cmp	r6, #0
 800a15c:	d0f9      	beq.n	800a152 <__sflush_r+0x1a>
 800a15e:	2300      	movs	r3, #0
 800a160:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 800a164:	682f      	ldr	r7, [r5, #0]
 800a166:	602b      	str	r3, [r5, #0]
 800a168:	d032      	beq.n	800a1d0 <__sflush_r+0x98>
 800a16a:	6d60      	ldr	r0, [r4, #84]	; 0x54
 800a16c:	89a3      	ldrh	r3, [r4, #12]
 800a16e:	075a      	lsls	r2, r3, #29
 800a170:	d505      	bpl.n	800a17e <__sflush_r+0x46>
 800a172:	6863      	ldr	r3, [r4, #4]
 800a174:	1ac0      	subs	r0, r0, r3
 800a176:	6b63      	ldr	r3, [r4, #52]	; 0x34
 800a178:	b10b      	cbz	r3, 800a17e <__sflush_r+0x46>
 800a17a:	6c23      	ldr	r3, [r4, #64]	; 0x40
 800a17c:	1ac0      	subs	r0, r0, r3
 800a17e:	2300      	movs	r3, #0
 800a180:	4602      	mov	r2, r0
 800a182:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 800a184:	6a21      	ldr	r1, [r4, #32]
 800a186:	4628      	mov	r0, r5
 800a188:	47b0      	blx	r6
 800a18a:	1c43      	adds	r3, r0, #1
 800a18c:	89a3      	ldrh	r3, [r4, #12]
 800a18e:	d106      	bne.n	800a19e <__sflush_r+0x66>
 800a190:	6829      	ldr	r1, [r5, #0]
 800a192:	291d      	cmp	r1, #29
 800a194:	d82c      	bhi.n	800a1f0 <__sflush_r+0xb8>
 800a196:	4a2a      	ldr	r2, [pc, #168]	; (800a240 <__sflush_r+0x108>)
 800a198:	40ca      	lsrs	r2, r1
 800a19a:	07d6      	lsls	r6, r2, #31
 800a19c:	d528      	bpl.n	800a1f0 <__sflush_r+0xb8>
 800a19e:	2200      	movs	r2, #0
 800a1a0:	6062      	str	r2, [r4, #4]
 800a1a2:	04d9      	lsls	r1, r3, #19
 800a1a4:	6922      	ldr	r2, [r4, #16]
 800a1a6:	6022      	str	r2, [r4, #0]
 800a1a8:	d504      	bpl.n	800a1b4 <__sflush_r+0x7c>
 800a1aa:	1c42      	adds	r2, r0, #1
 800a1ac:	d101      	bne.n	800a1b2 <__sflush_r+0x7a>
 800a1ae:	682b      	ldr	r3, [r5, #0]
 800a1b0:	b903      	cbnz	r3, 800a1b4 <__sflush_r+0x7c>
 800a1b2:	6560      	str	r0, [r4, #84]	; 0x54
 800a1b4:	6b61      	ldr	r1, [r4, #52]	; 0x34
 800a1b6:	602f      	str	r7, [r5, #0]
 800a1b8:	2900      	cmp	r1, #0
 800a1ba:	d0ca      	beq.n	800a152 <__sflush_r+0x1a>
 800a1bc:	f104 0344 	add.w	r3, r4, #68	; 0x44
 800a1c0:	4299      	cmp	r1, r3
 800a1c2:	d002      	beq.n	800a1ca <__sflush_r+0x92>
 800a1c4:	4628      	mov	r0, r5
 800a1c6:	f000 f897 	bl	800a2f8 <_free_r>
 800a1ca:	2000      	movs	r0, #0
 800a1cc:	6360      	str	r0, [r4, #52]	; 0x34
 800a1ce:	e7c1      	b.n	800a154 <__sflush_r+0x1c>
 800a1d0:	6a21      	ldr	r1, [r4, #32]
 800a1d2:	2301      	movs	r3, #1
 800a1d4:	4628      	mov	r0, r5
 800a1d6:	47b0      	blx	r6
 800a1d8:	1c41      	adds	r1, r0, #1
 800a1da:	d1c7      	bne.n	800a16c <__sflush_r+0x34>
 800a1dc:	682b      	ldr	r3, [r5, #0]
 800a1de:	2b00      	cmp	r3, #0
 800a1e0:	d0c4      	beq.n	800a16c <__sflush_r+0x34>
 800a1e2:	2b1d      	cmp	r3, #29
 800a1e4:	d001      	beq.n	800a1ea <__sflush_r+0xb2>
 800a1e6:	2b16      	cmp	r3, #22
 800a1e8:	d101      	bne.n	800a1ee <__sflush_r+0xb6>
 800a1ea:	602f      	str	r7, [r5, #0]
 800a1ec:	e7b1      	b.n	800a152 <__sflush_r+0x1a>
 800a1ee:	89a3      	ldrh	r3, [r4, #12]
 800a1f0:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800a1f4:	81a3      	strh	r3, [r4, #12]
 800a1f6:	e7ad      	b.n	800a154 <__sflush_r+0x1c>
 800a1f8:	690f      	ldr	r7, [r1, #16]
 800a1fa:	2f00      	cmp	r7, #0
 800a1fc:	d0a9      	beq.n	800a152 <__sflush_r+0x1a>
 800a1fe:	0793      	lsls	r3, r2, #30
 800a200:	680e      	ldr	r6, [r1, #0]
 800a202:	bf08      	it	eq
 800a204:	694b      	ldreq	r3, [r1, #20]
 800a206:	600f      	str	r7, [r1, #0]
 800a208:	bf18      	it	ne
 800a20a:	2300      	movne	r3, #0
 800a20c:	eba6 0807 	sub.w	r8, r6, r7
 800a210:	608b      	str	r3, [r1, #8]
 800a212:	f1b8 0f00 	cmp.w	r8, #0
 800a216:	dd9c      	ble.n	800a152 <__sflush_r+0x1a>
 800a218:	6a21      	ldr	r1, [r4, #32]
 800a21a:	6aa6      	ldr	r6, [r4, #40]	; 0x28
 800a21c:	4643      	mov	r3, r8
 800a21e:	463a      	mov	r2, r7
 800a220:	4628      	mov	r0, r5
 800a222:	47b0      	blx	r6
 800a224:	2800      	cmp	r0, #0
 800a226:	dc06      	bgt.n	800a236 <__sflush_r+0xfe>
 800a228:	89a3      	ldrh	r3, [r4, #12]
 800a22a:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800a22e:	81a3      	strh	r3, [r4, #12]
 800a230:	f04f 30ff 	mov.w	r0, #4294967295
 800a234:	e78e      	b.n	800a154 <__sflush_r+0x1c>
 800a236:	4407      	add	r7, r0
 800a238:	eba8 0800 	sub.w	r8, r8, r0
 800a23c:	e7e9      	b.n	800a212 <__sflush_r+0xda>
 800a23e:	bf00      	nop
 800a240:	20400001 	.word	0x20400001

0800a244 <_fflush_r>:
 800a244:	b538      	push	{r3, r4, r5, lr}
 800a246:	690b      	ldr	r3, [r1, #16]
 800a248:	4605      	mov	r5, r0
 800a24a:	460c      	mov	r4, r1
 800a24c:	b913      	cbnz	r3, 800a254 <_fflush_r+0x10>
 800a24e:	2500      	movs	r5, #0
 800a250:	4628      	mov	r0, r5
 800a252:	bd38      	pop	{r3, r4, r5, pc}
 800a254:	b118      	cbz	r0, 800a25e <_fflush_r+0x1a>
 800a256:	6983      	ldr	r3, [r0, #24]
 800a258:	b90b      	cbnz	r3, 800a25e <_fflush_r+0x1a>
 800a25a:	f7ff fce5 	bl	8009c28 <__sinit>
 800a25e:	4b14      	ldr	r3, [pc, #80]	; (800a2b0 <_fflush_r+0x6c>)
 800a260:	429c      	cmp	r4, r3
 800a262:	d11b      	bne.n	800a29c <_fflush_r+0x58>
 800a264:	686c      	ldr	r4, [r5, #4]
 800a266:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800a26a:	2b00      	cmp	r3, #0
 800a26c:	d0ef      	beq.n	800a24e <_fflush_r+0xa>
 800a26e:	6e62      	ldr	r2, [r4, #100]	; 0x64
 800a270:	07d0      	lsls	r0, r2, #31
 800a272:	d404      	bmi.n	800a27e <_fflush_r+0x3a>
 800a274:	0599      	lsls	r1, r3, #22
 800a276:	d402      	bmi.n	800a27e <_fflush_r+0x3a>
 800a278:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800a27a:	f7ff fd98 	bl	8009dae <__retarget_lock_acquire_recursive>
 800a27e:	4628      	mov	r0, r5
 800a280:	4621      	mov	r1, r4
 800a282:	f7ff ff59 	bl	800a138 <__sflush_r>
 800a286:	6e63      	ldr	r3, [r4, #100]	; 0x64
 800a288:	07da      	lsls	r2, r3, #31
 800a28a:	4605      	mov	r5, r0
 800a28c:	d4e0      	bmi.n	800a250 <_fflush_r+0xc>
 800a28e:	89a3      	ldrh	r3, [r4, #12]
 800a290:	059b      	lsls	r3, r3, #22
 800a292:	d4dd      	bmi.n	800a250 <_fflush_r+0xc>
 800a294:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800a296:	f7ff fd8b 	bl	8009db0 <__retarget_lock_release_recursive>
 800a29a:	e7d9      	b.n	800a250 <_fflush_r+0xc>
 800a29c:	4b05      	ldr	r3, [pc, #20]	; (800a2b4 <_fflush_r+0x70>)
 800a29e:	429c      	cmp	r4, r3
 800a2a0:	d101      	bne.n	800a2a6 <_fflush_r+0x62>
 800a2a2:	68ac      	ldr	r4, [r5, #8]
 800a2a4:	e7df      	b.n	800a266 <_fflush_r+0x22>
 800a2a6:	4b04      	ldr	r3, [pc, #16]	; (800a2b8 <_fflush_r+0x74>)
 800a2a8:	429c      	cmp	r4, r3
 800a2aa:	bf08      	it	eq
 800a2ac:	68ec      	ldreq	r4, [r5, #12]
 800a2ae:	e7da      	b.n	800a266 <_fflush_r+0x22>
 800a2b0:	0800b0b8 	.word	0x0800b0b8
 800a2b4:	0800b0d8 	.word	0x0800b0d8
 800a2b8:	0800b098 	.word	0x0800b098

0800a2bc <_lseek_r>:
 800a2bc:	b538      	push	{r3, r4, r5, lr}
 800a2be:	4d07      	ldr	r5, [pc, #28]	; (800a2dc <_lseek_r+0x20>)
 800a2c0:	4604      	mov	r4, r0
 800a2c2:	4608      	mov	r0, r1
 800a2c4:	4611      	mov	r1, r2
 800a2c6:	2200      	movs	r2, #0
 800a2c8:	602a      	str	r2, [r5, #0]
 800a2ca:	461a      	mov	r2, r3
 800a2cc:	f7f6 fecf 	bl	800106e <_lseek>
 800a2d0:	1c43      	adds	r3, r0, #1
 800a2d2:	d102      	bne.n	800a2da <_lseek_r+0x1e>
 800a2d4:	682b      	ldr	r3, [r5, #0]
 800a2d6:	b103      	cbz	r3, 800a2da <_lseek_r+0x1e>
 800a2d8:	6023      	str	r3, [r4, #0]
 800a2da:	bd38      	pop	{r3, r4, r5, pc}
 800a2dc:	24004fc4 	.word	0x24004fc4

0800a2e0 <__malloc_lock>:
 800a2e0:	4801      	ldr	r0, [pc, #4]	; (800a2e8 <__malloc_lock+0x8>)
 800a2e2:	f7ff bd64 	b.w	8009dae <__retarget_lock_acquire_recursive>
 800a2e6:	bf00      	nop
 800a2e8:	24004fb8 	.word	0x24004fb8

0800a2ec <__malloc_unlock>:
 800a2ec:	4801      	ldr	r0, [pc, #4]	; (800a2f4 <__malloc_unlock+0x8>)
 800a2ee:	f7ff bd5f 	b.w	8009db0 <__retarget_lock_release_recursive>
 800a2f2:	bf00      	nop
 800a2f4:	24004fb8 	.word	0x24004fb8

0800a2f8 <_free_r>:
 800a2f8:	b537      	push	{r0, r1, r2, r4, r5, lr}
 800a2fa:	2900      	cmp	r1, #0
 800a2fc:	d044      	beq.n	800a388 <_free_r+0x90>
 800a2fe:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800a302:	9001      	str	r0, [sp, #4]
 800a304:	2b00      	cmp	r3, #0
 800a306:	f1a1 0404 	sub.w	r4, r1, #4
 800a30a:	bfb8      	it	lt
 800a30c:	18e4      	addlt	r4, r4, r3
 800a30e:	f7ff ffe7 	bl	800a2e0 <__malloc_lock>
 800a312:	4a1e      	ldr	r2, [pc, #120]	; (800a38c <_free_r+0x94>)
 800a314:	9801      	ldr	r0, [sp, #4]
 800a316:	6813      	ldr	r3, [r2, #0]
 800a318:	b933      	cbnz	r3, 800a328 <_free_r+0x30>
 800a31a:	6063      	str	r3, [r4, #4]
 800a31c:	6014      	str	r4, [r2, #0]
 800a31e:	b003      	add	sp, #12
 800a320:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 800a324:	f7ff bfe2 	b.w	800a2ec <__malloc_unlock>
 800a328:	42a3      	cmp	r3, r4
 800a32a:	d908      	bls.n	800a33e <_free_r+0x46>
 800a32c:	6825      	ldr	r5, [r4, #0]
 800a32e:	1961      	adds	r1, r4, r5
 800a330:	428b      	cmp	r3, r1
 800a332:	bf01      	itttt	eq
 800a334:	6819      	ldreq	r1, [r3, #0]
 800a336:	685b      	ldreq	r3, [r3, #4]
 800a338:	1949      	addeq	r1, r1, r5
 800a33a:	6021      	streq	r1, [r4, #0]
 800a33c:	e7ed      	b.n	800a31a <_free_r+0x22>
 800a33e:	461a      	mov	r2, r3
 800a340:	685b      	ldr	r3, [r3, #4]
 800a342:	b10b      	cbz	r3, 800a348 <_free_r+0x50>
 800a344:	42a3      	cmp	r3, r4
 800a346:	d9fa      	bls.n	800a33e <_free_r+0x46>
 800a348:	6811      	ldr	r1, [r2, #0]
 800a34a:	1855      	adds	r5, r2, r1
 800a34c:	42a5      	cmp	r5, r4
 800a34e:	d10b      	bne.n	800a368 <_free_r+0x70>
 800a350:	6824      	ldr	r4, [r4, #0]
 800a352:	4421      	add	r1, r4
 800a354:	1854      	adds	r4, r2, r1
 800a356:	42a3      	cmp	r3, r4
 800a358:	6011      	str	r1, [r2, #0]
 800a35a:	d1e0      	bne.n	800a31e <_free_r+0x26>
 800a35c:	681c      	ldr	r4, [r3, #0]
 800a35e:	685b      	ldr	r3, [r3, #4]
 800a360:	6053      	str	r3, [r2, #4]
 800a362:	4421      	add	r1, r4
 800a364:	6011      	str	r1, [r2, #0]
 800a366:	e7da      	b.n	800a31e <_free_r+0x26>
 800a368:	d902      	bls.n	800a370 <_free_r+0x78>
 800a36a:	230c      	movs	r3, #12
 800a36c:	6003      	str	r3, [r0, #0]
 800a36e:	e7d6      	b.n	800a31e <_free_r+0x26>
 800a370:	6825      	ldr	r5, [r4, #0]
 800a372:	1961      	adds	r1, r4, r5
 800a374:	428b      	cmp	r3, r1
 800a376:	bf04      	itt	eq
 800a378:	6819      	ldreq	r1, [r3, #0]
 800a37a:	685b      	ldreq	r3, [r3, #4]
 800a37c:	6063      	str	r3, [r4, #4]
 800a37e:	bf04      	itt	eq
 800a380:	1949      	addeq	r1, r1, r5
 800a382:	6021      	streq	r1, [r4, #0]
 800a384:	6054      	str	r4, [r2, #4]
 800a386:	e7ca      	b.n	800a31e <_free_r+0x26>
 800a388:	b003      	add	sp, #12
 800a38a:	bd30      	pop	{r4, r5, pc}
 800a38c:	24004fbc 	.word	0x24004fbc

0800a390 <__ssputs_r>:
 800a390:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800a394:	688e      	ldr	r6, [r1, #8]
 800a396:	429e      	cmp	r6, r3
 800a398:	4682      	mov	sl, r0
 800a39a:	460c      	mov	r4, r1
 800a39c:	4690      	mov	r8, r2
 800a39e:	461f      	mov	r7, r3
 800a3a0:	d838      	bhi.n	800a414 <__ssputs_r+0x84>
 800a3a2:	898a      	ldrh	r2, [r1, #12]
 800a3a4:	f412 6f90 	tst.w	r2, #1152	; 0x480
 800a3a8:	d032      	beq.n	800a410 <__ssputs_r+0x80>
 800a3aa:	6825      	ldr	r5, [r4, #0]
 800a3ac:	6909      	ldr	r1, [r1, #16]
 800a3ae:	eba5 0901 	sub.w	r9, r5, r1
 800a3b2:	6965      	ldr	r5, [r4, #20]
 800a3b4:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 800a3b8:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 800a3bc:	3301      	adds	r3, #1
 800a3be:	444b      	add	r3, r9
 800a3c0:	106d      	asrs	r5, r5, #1
 800a3c2:	429d      	cmp	r5, r3
 800a3c4:	bf38      	it	cc
 800a3c6:	461d      	movcc	r5, r3
 800a3c8:	0553      	lsls	r3, r2, #21
 800a3ca:	d531      	bpl.n	800a430 <__ssputs_r+0xa0>
 800a3cc:	4629      	mov	r1, r5
 800a3ce:	f7ff fd27 	bl	8009e20 <_malloc_r>
 800a3d2:	4606      	mov	r6, r0
 800a3d4:	b950      	cbnz	r0, 800a3ec <__ssputs_r+0x5c>
 800a3d6:	230c      	movs	r3, #12
 800a3d8:	f8ca 3000 	str.w	r3, [sl]
 800a3dc:	89a3      	ldrh	r3, [r4, #12]
 800a3de:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800a3e2:	81a3      	strh	r3, [r4, #12]
 800a3e4:	f04f 30ff 	mov.w	r0, #4294967295
 800a3e8:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800a3ec:	6921      	ldr	r1, [r4, #16]
 800a3ee:	464a      	mov	r2, r9
 800a3f0:	f7ff fcdf 	bl	8009db2 <memcpy>
 800a3f4:	89a3      	ldrh	r3, [r4, #12]
 800a3f6:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 800a3fa:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800a3fe:	81a3      	strh	r3, [r4, #12]
 800a400:	6126      	str	r6, [r4, #16]
 800a402:	6165      	str	r5, [r4, #20]
 800a404:	444e      	add	r6, r9
 800a406:	eba5 0509 	sub.w	r5, r5, r9
 800a40a:	6026      	str	r6, [r4, #0]
 800a40c:	60a5      	str	r5, [r4, #8]
 800a40e:	463e      	mov	r6, r7
 800a410:	42be      	cmp	r6, r7
 800a412:	d900      	bls.n	800a416 <__ssputs_r+0x86>
 800a414:	463e      	mov	r6, r7
 800a416:	6820      	ldr	r0, [r4, #0]
 800a418:	4632      	mov	r2, r6
 800a41a:	4641      	mov	r1, r8
 800a41c:	f000 fd3a 	bl	800ae94 <memmove>
 800a420:	68a3      	ldr	r3, [r4, #8]
 800a422:	1b9b      	subs	r3, r3, r6
 800a424:	60a3      	str	r3, [r4, #8]
 800a426:	6823      	ldr	r3, [r4, #0]
 800a428:	4433      	add	r3, r6
 800a42a:	6023      	str	r3, [r4, #0]
 800a42c:	2000      	movs	r0, #0
 800a42e:	e7db      	b.n	800a3e8 <__ssputs_r+0x58>
 800a430:	462a      	mov	r2, r5
 800a432:	f000 fd49 	bl	800aec8 <_realloc_r>
 800a436:	4606      	mov	r6, r0
 800a438:	2800      	cmp	r0, #0
 800a43a:	d1e1      	bne.n	800a400 <__ssputs_r+0x70>
 800a43c:	6921      	ldr	r1, [r4, #16]
 800a43e:	4650      	mov	r0, sl
 800a440:	f7ff ff5a 	bl	800a2f8 <_free_r>
 800a444:	e7c7      	b.n	800a3d6 <__ssputs_r+0x46>
	...

0800a448 <_svfiprintf_r>:
 800a448:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800a44c:	4698      	mov	r8, r3
 800a44e:	898b      	ldrh	r3, [r1, #12]
 800a450:	061b      	lsls	r3, r3, #24
 800a452:	b09d      	sub	sp, #116	; 0x74
 800a454:	4607      	mov	r7, r0
 800a456:	460d      	mov	r5, r1
 800a458:	4614      	mov	r4, r2
 800a45a:	d50e      	bpl.n	800a47a <_svfiprintf_r+0x32>
 800a45c:	690b      	ldr	r3, [r1, #16]
 800a45e:	b963      	cbnz	r3, 800a47a <_svfiprintf_r+0x32>
 800a460:	2140      	movs	r1, #64	; 0x40
 800a462:	f7ff fcdd 	bl	8009e20 <_malloc_r>
 800a466:	6028      	str	r0, [r5, #0]
 800a468:	6128      	str	r0, [r5, #16]
 800a46a:	b920      	cbnz	r0, 800a476 <_svfiprintf_r+0x2e>
 800a46c:	230c      	movs	r3, #12
 800a46e:	603b      	str	r3, [r7, #0]
 800a470:	f04f 30ff 	mov.w	r0, #4294967295
 800a474:	e0d1      	b.n	800a61a <_svfiprintf_r+0x1d2>
 800a476:	2340      	movs	r3, #64	; 0x40
 800a478:	616b      	str	r3, [r5, #20]
 800a47a:	2300      	movs	r3, #0
 800a47c:	9309      	str	r3, [sp, #36]	; 0x24
 800a47e:	2320      	movs	r3, #32
 800a480:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 800a484:	f8cd 800c 	str.w	r8, [sp, #12]
 800a488:	2330      	movs	r3, #48	; 0x30
 800a48a:	f8df 81a8 	ldr.w	r8, [pc, #424]	; 800a634 <_svfiprintf_r+0x1ec>
 800a48e:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 800a492:	f04f 0901 	mov.w	r9, #1
 800a496:	4623      	mov	r3, r4
 800a498:	469a      	mov	sl, r3
 800a49a:	f813 2b01 	ldrb.w	r2, [r3], #1
 800a49e:	b10a      	cbz	r2, 800a4a4 <_svfiprintf_r+0x5c>
 800a4a0:	2a25      	cmp	r2, #37	; 0x25
 800a4a2:	d1f9      	bne.n	800a498 <_svfiprintf_r+0x50>
 800a4a4:	ebba 0b04 	subs.w	fp, sl, r4
 800a4a8:	d00b      	beq.n	800a4c2 <_svfiprintf_r+0x7a>
 800a4aa:	465b      	mov	r3, fp
 800a4ac:	4622      	mov	r2, r4
 800a4ae:	4629      	mov	r1, r5
 800a4b0:	4638      	mov	r0, r7
 800a4b2:	f7ff ff6d 	bl	800a390 <__ssputs_r>
 800a4b6:	3001      	adds	r0, #1
 800a4b8:	f000 80aa 	beq.w	800a610 <_svfiprintf_r+0x1c8>
 800a4bc:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800a4be:	445a      	add	r2, fp
 800a4c0:	9209      	str	r2, [sp, #36]	; 0x24
 800a4c2:	f89a 3000 	ldrb.w	r3, [sl]
 800a4c6:	2b00      	cmp	r3, #0
 800a4c8:	f000 80a2 	beq.w	800a610 <_svfiprintf_r+0x1c8>
 800a4cc:	2300      	movs	r3, #0
 800a4ce:	f04f 32ff 	mov.w	r2, #4294967295
 800a4d2:	e9cd 2305 	strd	r2, r3, [sp, #20]
 800a4d6:	f10a 0a01 	add.w	sl, sl, #1
 800a4da:	9304      	str	r3, [sp, #16]
 800a4dc:	9307      	str	r3, [sp, #28]
 800a4de:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 800a4e2:	931a      	str	r3, [sp, #104]	; 0x68
 800a4e4:	4654      	mov	r4, sl
 800a4e6:	2205      	movs	r2, #5
 800a4e8:	f814 1b01 	ldrb.w	r1, [r4], #1
 800a4ec:	4851      	ldr	r0, [pc, #324]	; (800a634 <_svfiprintf_r+0x1ec>)
 800a4ee:	f7f5 ff0f 	bl	8000310 <memchr>
 800a4f2:	9a04      	ldr	r2, [sp, #16]
 800a4f4:	b9d8      	cbnz	r0, 800a52e <_svfiprintf_r+0xe6>
 800a4f6:	06d0      	lsls	r0, r2, #27
 800a4f8:	bf44      	itt	mi
 800a4fa:	2320      	movmi	r3, #32
 800a4fc:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800a500:	0711      	lsls	r1, r2, #28
 800a502:	bf44      	itt	mi
 800a504:	232b      	movmi	r3, #43	; 0x2b
 800a506:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800a50a:	f89a 3000 	ldrb.w	r3, [sl]
 800a50e:	2b2a      	cmp	r3, #42	; 0x2a
 800a510:	d015      	beq.n	800a53e <_svfiprintf_r+0xf6>
 800a512:	9a07      	ldr	r2, [sp, #28]
 800a514:	4654      	mov	r4, sl
 800a516:	2000      	movs	r0, #0
 800a518:	f04f 0c0a 	mov.w	ip, #10
 800a51c:	4621      	mov	r1, r4
 800a51e:	f811 3b01 	ldrb.w	r3, [r1], #1
 800a522:	3b30      	subs	r3, #48	; 0x30
 800a524:	2b09      	cmp	r3, #9
 800a526:	d94e      	bls.n	800a5c6 <_svfiprintf_r+0x17e>
 800a528:	b1b0      	cbz	r0, 800a558 <_svfiprintf_r+0x110>
 800a52a:	9207      	str	r2, [sp, #28]
 800a52c:	e014      	b.n	800a558 <_svfiprintf_r+0x110>
 800a52e:	eba0 0308 	sub.w	r3, r0, r8
 800a532:	fa09 f303 	lsl.w	r3, r9, r3
 800a536:	4313      	orrs	r3, r2
 800a538:	9304      	str	r3, [sp, #16]
 800a53a:	46a2      	mov	sl, r4
 800a53c:	e7d2      	b.n	800a4e4 <_svfiprintf_r+0x9c>
 800a53e:	9b03      	ldr	r3, [sp, #12]
 800a540:	1d19      	adds	r1, r3, #4
 800a542:	681b      	ldr	r3, [r3, #0]
 800a544:	9103      	str	r1, [sp, #12]
 800a546:	2b00      	cmp	r3, #0
 800a548:	bfbb      	ittet	lt
 800a54a:	425b      	neglt	r3, r3
 800a54c:	f042 0202 	orrlt.w	r2, r2, #2
 800a550:	9307      	strge	r3, [sp, #28]
 800a552:	9307      	strlt	r3, [sp, #28]
 800a554:	bfb8      	it	lt
 800a556:	9204      	strlt	r2, [sp, #16]
 800a558:	7823      	ldrb	r3, [r4, #0]
 800a55a:	2b2e      	cmp	r3, #46	; 0x2e
 800a55c:	d10c      	bne.n	800a578 <_svfiprintf_r+0x130>
 800a55e:	7863      	ldrb	r3, [r4, #1]
 800a560:	2b2a      	cmp	r3, #42	; 0x2a
 800a562:	d135      	bne.n	800a5d0 <_svfiprintf_r+0x188>
 800a564:	9b03      	ldr	r3, [sp, #12]
 800a566:	1d1a      	adds	r2, r3, #4
 800a568:	681b      	ldr	r3, [r3, #0]
 800a56a:	9203      	str	r2, [sp, #12]
 800a56c:	2b00      	cmp	r3, #0
 800a56e:	bfb8      	it	lt
 800a570:	f04f 33ff 	movlt.w	r3, #4294967295
 800a574:	3402      	adds	r4, #2
 800a576:	9305      	str	r3, [sp, #20]
 800a578:	f8df a0c8 	ldr.w	sl, [pc, #200]	; 800a644 <_svfiprintf_r+0x1fc>
 800a57c:	7821      	ldrb	r1, [r4, #0]
 800a57e:	2203      	movs	r2, #3
 800a580:	4650      	mov	r0, sl
 800a582:	f7f5 fec5 	bl	8000310 <memchr>
 800a586:	b140      	cbz	r0, 800a59a <_svfiprintf_r+0x152>
 800a588:	2340      	movs	r3, #64	; 0x40
 800a58a:	eba0 000a 	sub.w	r0, r0, sl
 800a58e:	fa03 f000 	lsl.w	r0, r3, r0
 800a592:	9b04      	ldr	r3, [sp, #16]
 800a594:	4303      	orrs	r3, r0
 800a596:	3401      	adds	r4, #1
 800a598:	9304      	str	r3, [sp, #16]
 800a59a:	f814 1b01 	ldrb.w	r1, [r4], #1
 800a59e:	4826      	ldr	r0, [pc, #152]	; (800a638 <_svfiprintf_r+0x1f0>)
 800a5a0:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 800a5a4:	2206      	movs	r2, #6
 800a5a6:	f7f5 feb3 	bl	8000310 <memchr>
 800a5aa:	2800      	cmp	r0, #0
 800a5ac:	d038      	beq.n	800a620 <_svfiprintf_r+0x1d8>
 800a5ae:	4b23      	ldr	r3, [pc, #140]	; (800a63c <_svfiprintf_r+0x1f4>)
 800a5b0:	bb1b      	cbnz	r3, 800a5fa <_svfiprintf_r+0x1b2>
 800a5b2:	9b03      	ldr	r3, [sp, #12]
 800a5b4:	3307      	adds	r3, #7
 800a5b6:	f023 0307 	bic.w	r3, r3, #7
 800a5ba:	3308      	adds	r3, #8
 800a5bc:	9303      	str	r3, [sp, #12]
 800a5be:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800a5c0:	4433      	add	r3, r6
 800a5c2:	9309      	str	r3, [sp, #36]	; 0x24
 800a5c4:	e767      	b.n	800a496 <_svfiprintf_r+0x4e>
 800a5c6:	fb0c 3202 	mla	r2, ip, r2, r3
 800a5ca:	460c      	mov	r4, r1
 800a5cc:	2001      	movs	r0, #1
 800a5ce:	e7a5      	b.n	800a51c <_svfiprintf_r+0xd4>
 800a5d0:	2300      	movs	r3, #0
 800a5d2:	3401      	adds	r4, #1
 800a5d4:	9305      	str	r3, [sp, #20]
 800a5d6:	4619      	mov	r1, r3
 800a5d8:	f04f 0c0a 	mov.w	ip, #10
 800a5dc:	4620      	mov	r0, r4
 800a5de:	f810 2b01 	ldrb.w	r2, [r0], #1
 800a5e2:	3a30      	subs	r2, #48	; 0x30
 800a5e4:	2a09      	cmp	r2, #9
 800a5e6:	d903      	bls.n	800a5f0 <_svfiprintf_r+0x1a8>
 800a5e8:	2b00      	cmp	r3, #0
 800a5ea:	d0c5      	beq.n	800a578 <_svfiprintf_r+0x130>
 800a5ec:	9105      	str	r1, [sp, #20]
 800a5ee:	e7c3      	b.n	800a578 <_svfiprintf_r+0x130>
 800a5f0:	fb0c 2101 	mla	r1, ip, r1, r2
 800a5f4:	4604      	mov	r4, r0
 800a5f6:	2301      	movs	r3, #1
 800a5f8:	e7f0      	b.n	800a5dc <_svfiprintf_r+0x194>
 800a5fa:	ab03      	add	r3, sp, #12
 800a5fc:	9300      	str	r3, [sp, #0]
 800a5fe:	462a      	mov	r2, r5
 800a600:	4b0f      	ldr	r3, [pc, #60]	; (800a640 <_svfiprintf_r+0x1f8>)
 800a602:	a904      	add	r1, sp, #16
 800a604:	4638      	mov	r0, r7
 800a606:	f3af 8000 	nop.w
 800a60a:	1c42      	adds	r2, r0, #1
 800a60c:	4606      	mov	r6, r0
 800a60e:	d1d6      	bne.n	800a5be <_svfiprintf_r+0x176>
 800a610:	89ab      	ldrh	r3, [r5, #12]
 800a612:	065b      	lsls	r3, r3, #25
 800a614:	f53f af2c 	bmi.w	800a470 <_svfiprintf_r+0x28>
 800a618:	9809      	ldr	r0, [sp, #36]	; 0x24
 800a61a:	b01d      	add	sp, #116	; 0x74
 800a61c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800a620:	ab03      	add	r3, sp, #12
 800a622:	9300      	str	r3, [sp, #0]
 800a624:	462a      	mov	r2, r5
 800a626:	4b06      	ldr	r3, [pc, #24]	; (800a640 <_svfiprintf_r+0x1f8>)
 800a628:	a904      	add	r1, sp, #16
 800a62a:	4638      	mov	r0, r7
 800a62c:	f000 f9d4 	bl	800a9d8 <_printf_i>
 800a630:	e7eb      	b.n	800a60a <_svfiprintf_r+0x1c2>
 800a632:	bf00      	nop
 800a634:	0800b0fc 	.word	0x0800b0fc
 800a638:	0800b106 	.word	0x0800b106
 800a63c:	00000000 	.word	0x00000000
 800a640:	0800a391 	.word	0x0800a391
 800a644:	0800b102 	.word	0x0800b102

0800a648 <__sfputc_r>:
 800a648:	6893      	ldr	r3, [r2, #8]
 800a64a:	3b01      	subs	r3, #1
 800a64c:	2b00      	cmp	r3, #0
 800a64e:	b410      	push	{r4}
 800a650:	6093      	str	r3, [r2, #8]
 800a652:	da08      	bge.n	800a666 <__sfputc_r+0x1e>
 800a654:	6994      	ldr	r4, [r2, #24]
 800a656:	42a3      	cmp	r3, r4
 800a658:	db01      	blt.n	800a65e <__sfputc_r+0x16>
 800a65a:	290a      	cmp	r1, #10
 800a65c:	d103      	bne.n	800a666 <__sfputc_r+0x1e>
 800a65e:	f85d 4b04 	ldr.w	r4, [sp], #4
 800a662:	f000 baf1 	b.w	800ac48 <__swbuf_r>
 800a666:	6813      	ldr	r3, [r2, #0]
 800a668:	1c58      	adds	r0, r3, #1
 800a66a:	6010      	str	r0, [r2, #0]
 800a66c:	7019      	strb	r1, [r3, #0]
 800a66e:	4608      	mov	r0, r1
 800a670:	f85d 4b04 	ldr.w	r4, [sp], #4
 800a674:	4770      	bx	lr

0800a676 <__sfputs_r>:
 800a676:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800a678:	4606      	mov	r6, r0
 800a67a:	460f      	mov	r7, r1
 800a67c:	4614      	mov	r4, r2
 800a67e:	18d5      	adds	r5, r2, r3
 800a680:	42ac      	cmp	r4, r5
 800a682:	d101      	bne.n	800a688 <__sfputs_r+0x12>
 800a684:	2000      	movs	r0, #0
 800a686:	e007      	b.n	800a698 <__sfputs_r+0x22>
 800a688:	f814 1b01 	ldrb.w	r1, [r4], #1
 800a68c:	463a      	mov	r2, r7
 800a68e:	4630      	mov	r0, r6
 800a690:	f7ff ffda 	bl	800a648 <__sfputc_r>
 800a694:	1c43      	adds	r3, r0, #1
 800a696:	d1f3      	bne.n	800a680 <__sfputs_r+0xa>
 800a698:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

0800a69c <_vfiprintf_r>:
 800a69c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800a6a0:	460d      	mov	r5, r1
 800a6a2:	b09d      	sub	sp, #116	; 0x74
 800a6a4:	4614      	mov	r4, r2
 800a6a6:	4698      	mov	r8, r3
 800a6a8:	4606      	mov	r6, r0
 800a6aa:	b118      	cbz	r0, 800a6b4 <_vfiprintf_r+0x18>
 800a6ac:	6983      	ldr	r3, [r0, #24]
 800a6ae:	b90b      	cbnz	r3, 800a6b4 <_vfiprintf_r+0x18>
 800a6b0:	f7ff faba 	bl	8009c28 <__sinit>
 800a6b4:	4b89      	ldr	r3, [pc, #548]	; (800a8dc <_vfiprintf_r+0x240>)
 800a6b6:	429d      	cmp	r5, r3
 800a6b8:	d11b      	bne.n	800a6f2 <_vfiprintf_r+0x56>
 800a6ba:	6875      	ldr	r5, [r6, #4]
 800a6bc:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 800a6be:	07d9      	lsls	r1, r3, #31
 800a6c0:	d405      	bmi.n	800a6ce <_vfiprintf_r+0x32>
 800a6c2:	89ab      	ldrh	r3, [r5, #12]
 800a6c4:	059a      	lsls	r2, r3, #22
 800a6c6:	d402      	bmi.n	800a6ce <_vfiprintf_r+0x32>
 800a6c8:	6da8      	ldr	r0, [r5, #88]	; 0x58
 800a6ca:	f7ff fb70 	bl	8009dae <__retarget_lock_acquire_recursive>
 800a6ce:	89ab      	ldrh	r3, [r5, #12]
 800a6d0:	071b      	lsls	r3, r3, #28
 800a6d2:	d501      	bpl.n	800a6d8 <_vfiprintf_r+0x3c>
 800a6d4:	692b      	ldr	r3, [r5, #16]
 800a6d6:	b9eb      	cbnz	r3, 800a714 <_vfiprintf_r+0x78>
 800a6d8:	4629      	mov	r1, r5
 800a6da:	4630      	mov	r0, r6
 800a6dc:	f000 fb06 	bl	800acec <__swsetup_r>
 800a6e0:	b1c0      	cbz	r0, 800a714 <_vfiprintf_r+0x78>
 800a6e2:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 800a6e4:	07dc      	lsls	r4, r3, #31
 800a6e6:	d50e      	bpl.n	800a706 <_vfiprintf_r+0x6a>
 800a6e8:	f04f 30ff 	mov.w	r0, #4294967295
 800a6ec:	b01d      	add	sp, #116	; 0x74
 800a6ee:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800a6f2:	4b7b      	ldr	r3, [pc, #492]	; (800a8e0 <_vfiprintf_r+0x244>)
 800a6f4:	429d      	cmp	r5, r3
 800a6f6:	d101      	bne.n	800a6fc <_vfiprintf_r+0x60>
 800a6f8:	68b5      	ldr	r5, [r6, #8]
 800a6fa:	e7df      	b.n	800a6bc <_vfiprintf_r+0x20>
 800a6fc:	4b79      	ldr	r3, [pc, #484]	; (800a8e4 <_vfiprintf_r+0x248>)
 800a6fe:	429d      	cmp	r5, r3
 800a700:	bf08      	it	eq
 800a702:	68f5      	ldreq	r5, [r6, #12]
 800a704:	e7da      	b.n	800a6bc <_vfiprintf_r+0x20>
 800a706:	89ab      	ldrh	r3, [r5, #12]
 800a708:	0598      	lsls	r0, r3, #22
 800a70a:	d4ed      	bmi.n	800a6e8 <_vfiprintf_r+0x4c>
 800a70c:	6da8      	ldr	r0, [r5, #88]	; 0x58
 800a70e:	f7ff fb4f 	bl	8009db0 <__retarget_lock_release_recursive>
 800a712:	e7e9      	b.n	800a6e8 <_vfiprintf_r+0x4c>
 800a714:	2300      	movs	r3, #0
 800a716:	9309      	str	r3, [sp, #36]	; 0x24
 800a718:	2320      	movs	r3, #32
 800a71a:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 800a71e:	f8cd 800c 	str.w	r8, [sp, #12]
 800a722:	2330      	movs	r3, #48	; 0x30
 800a724:	f8df 81c0 	ldr.w	r8, [pc, #448]	; 800a8e8 <_vfiprintf_r+0x24c>
 800a728:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 800a72c:	f04f 0901 	mov.w	r9, #1
 800a730:	4623      	mov	r3, r4
 800a732:	469a      	mov	sl, r3
 800a734:	f813 2b01 	ldrb.w	r2, [r3], #1
 800a738:	b10a      	cbz	r2, 800a73e <_vfiprintf_r+0xa2>
 800a73a:	2a25      	cmp	r2, #37	; 0x25
 800a73c:	d1f9      	bne.n	800a732 <_vfiprintf_r+0x96>
 800a73e:	ebba 0b04 	subs.w	fp, sl, r4
 800a742:	d00b      	beq.n	800a75c <_vfiprintf_r+0xc0>
 800a744:	465b      	mov	r3, fp
 800a746:	4622      	mov	r2, r4
 800a748:	4629      	mov	r1, r5
 800a74a:	4630      	mov	r0, r6
 800a74c:	f7ff ff93 	bl	800a676 <__sfputs_r>
 800a750:	3001      	adds	r0, #1
 800a752:	f000 80aa 	beq.w	800a8aa <_vfiprintf_r+0x20e>
 800a756:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800a758:	445a      	add	r2, fp
 800a75a:	9209      	str	r2, [sp, #36]	; 0x24
 800a75c:	f89a 3000 	ldrb.w	r3, [sl]
 800a760:	2b00      	cmp	r3, #0
 800a762:	f000 80a2 	beq.w	800a8aa <_vfiprintf_r+0x20e>
 800a766:	2300      	movs	r3, #0
 800a768:	f04f 32ff 	mov.w	r2, #4294967295
 800a76c:	e9cd 2305 	strd	r2, r3, [sp, #20]
 800a770:	f10a 0a01 	add.w	sl, sl, #1
 800a774:	9304      	str	r3, [sp, #16]
 800a776:	9307      	str	r3, [sp, #28]
 800a778:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 800a77c:	931a      	str	r3, [sp, #104]	; 0x68
 800a77e:	4654      	mov	r4, sl
 800a780:	2205      	movs	r2, #5
 800a782:	f814 1b01 	ldrb.w	r1, [r4], #1
 800a786:	4858      	ldr	r0, [pc, #352]	; (800a8e8 <_vfiprintf_r+0x24c>)
 800a788:	f7f5 fdc2 	bl	8000310 <memchr>
 800a78c:	9a04      	ldr	r2, [sp, #16]
 800a78e:	b9d8      	cbnz	r0, 800a7c8 <_vfiprintf_r+0x12c>
 800a790:	06d1      	lsls	r1, r2, #27
 800a792:	bf44      	itt	mi
 800a794:	2320      	movmi	r3, #32
 800a796:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800a79a:	0713      	lsls	r3, r2, #28
 800a79c:	bf44      	itt	mi
 800a79e:	232b      	movmi	r3, #43	; 0x2b
 800a7a0:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800a7a4:	f89a 3000 	ldrb.w	r3, [sl]
 800a7a8:	2b2a      	cmp	r3, #42	; 0x2a
 800a7aa:	d015      	beq.n	800a7d8 <_vfiprintf_r+0x13c>
 800a7ac:	9a07      	ldr	r2, [sp, #28]
 800a7ae:	4654      	mov	r4, sl
 800a7b0:	2000      	movs	r0, #0
 800a7b2:	f04f 0c0a 	mov.w	ip, #10
 800a7b6:	4621      	mov	r1, r4
 800a7b8:	f811 3b01 	ldrb.w	r3, [r1], #1
 800a7bc:	3b30      	subs	r3, #48	; 0x30
 800a7be:	2b09      	cmp	r3, #9
 800a7c0:	d94e      	bls.n	800a860 <_vfiprintf_r+0x1c4>
 800a7c2:	b1b0      	cbz	r0, 800a7f2 <_vfiprintf_r+0x156>
 800a7c4:	9207      	str	r2, [sp, #28]
 800a7c6:	e014      	b.n	800a7f2 <_vfiprintf_r+0x156>
 800a7c8:	eba0 0308 	sub.w	r3, r0, r8
 800a7cc:	fa09 f303 	lsl.w	r3, r9, r3
 800a7d0:	4313      	orrs	r3, r2
 800a7d2:	9304      	str	r3, [sp, #16]
 800a7d4:	46a2      	mov	sl, r4
 800a7d6:	e7d2      	b.n	800a77e <_vfiprintf_r+0xe2>
 800a7d8:	9b03      	ldr	r3, [sp, #12]
 800a7da:	1d19      	adds	r1, r3, #4
 800a7dc:	681b      	ldr	r3, [r3, #0]
 800a7de:	9103      	str	r1, [sp, #12]
 800a7e0:	2b00      	cmp	r3, #0
 800a7e2:	bfbb      	ittet	lt
 800a7e4:	425b      	neglt	r3, r3
 800a7e6:	f042 0202 	orrlt.w	r2, r2, #2
 800a7ea:	9307      	strge	r3, [sp, #28]
 800a7ec:	9307      	strlt	r3, [sp, #28]
 800a7ee:	bfb8      	it	lt
 800a7f0:	9204      	strlt	r2, [sp, #16]
 800a7f2:	7823      	ldrb	r3, [r4, #0]
 800a7f4:	2b2e      	cmp	r3, #46	; 0x2e
 800a7f6:	d10c      	bne.n	800a812 <_vfiprintf_r+0x176>
 800a7f8:	7863      	ldrb	r3, [r4, #1]
 800a7fa:	2b2a      	cmp	r3, #42	; 0x2a
 800a7fc:	d135      	bne.n	800a86a <_vfiprintf_r+0x1ce>
 800a7fe:	9b03      	ldr	r3, [sp, #12]
 800a800:	1d1a      	adds	r2, r3, #4
 800a802:	681b      	ldr	r3, [r3, #0]
 800a804:	9203      	str	r2, [sp, #12]
 800a806:	2b00      	cmp	r3, #0
 800a808:	bfb8      	it	lt
 800a80a:	f04f 33ff 	movlt.w	r3, #4294967295
 800a80e:	3402      	adds	r4, #2
 800a810:	9305      	str	r3, [sp, #20]
 800a812:	f8df a0e4 	ldr.w	sl, [pc, #228]	; 800a8f8 <_vfiprintf_r+0x25c>
 800a816:	7821      	ldrb	r1, [r4, #0]
 800a818:	2203      	movs	r2, #3
 800a81a:	4650      	mov	r0, sl
 800a81c:	f7f5 fd78 	bl	8000310 <memchr>
 800a820:	b140      	cbz	r0, 800a834 <_vfiprintf_r+0x198>
 800a822:	2340      	movs	r3, #64	; 0x40
 800a824:	eba0 000a 	sub.w	r0, r0, sl
 800a828:	fa03 f000 	lsl.w	r0, r3, r0
 800a82c:	9b04      	ldr	r3, [sp, #16]
 800a82e:	4303      	orrs	r3, r0
 800a830:	3401      	adds	r4, #1
 800a832:	9304      	str	r3, [sp, #16]
 800a834:	f814 1b01 	ldrb.w	r1, [r4], #1
 800a838:	482c      	ldr	r0, [pc, #176]	; (800a8ec <_vfiprintf_r+0x250>)
 800a83a:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 800a83e:	2206      	movs	r2, #6
 800a840:	f7f5 fd66 	bl	8000310 <memchr>
 800a844:	2800      	cmp	r0, #0
 800a846:	d03f      	beq.n	800a8c8 <_vfiprintf_r+0x22c>
 800a848:	4b29      	ldr	r3, [pc, #164]	; (800a8f0 <_vfiprintf_r+0x254>)
 800a84a:	bb1b      	cbnz	r3, 800a894 <_vfiprintf_r+0x1f8>
 800a84c:	9b03      	ldr	r3, [sp, #12]
 800a84e:	3307      	adds	r3, #7
 800a850:	f023 0307 	bic.w	r3, r3, #7
 800a854:	3308      	adds	r3, #8
 800a856:	9303      	str	r3, [sp, #12]
 800a858:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800a85a:	443b      	add	r3, r7
 800a85c:	9309      	str	r3, [sp, #36]	; 0x24
 800a85e:	e767      	b.n	800a730 <_vfiprintf_r+0x94>
 800a860:	fb0c 3202 	mla	r2, ip, r2, r3
 800a864:	460c      	mov	r4, r1
 800a866:	2001      	movs	r0, #1
 800a868:	e7a5      	b.n	800a7b6 <_vfiprintf_r+0x11a>
 800a86a:	2300      	movs	r3, #0
 800a86c:	3401      	adds	r4, #1
 800a86e:	9305      	str	r3, [sp, #20]
 800a870:	4619      	mov	r1, r3
 800a872:	f04f 0c0a 	mov.w	ip, #10
 800a876:	4620      	mov	r0, r4
 800a878:	f810 2b01 	ldrb.w	r2, [r0], #1
 800a87c:	3a30      	subs	r2, #48	; 0x30
 800a87e:	2a09      	cmp	r2, #9
 800a880:	d903      	bls.n	800a88a <_vfiprintf_r+0x1ee>
 800a882:	2b00      	cmp	r3, #0
 800a884:	d0c5      	beq.n	800a812 <_vfiprintf_r+0x176>
 800a886:	9105      	str	r1, [sp, #20]
 800a888:	e7c3      	b.n	800a812 <_vfiprintf_r+0x176>
 800a88a:	fb0c 2101 	mla	r1, ip, r1, r2
 800a88e:	4604      	mov	r4, r0
 800a890:	2301      	movs	r3, #1
 800a892:	e7f0      	b.n	800a876 <_vfiprintf_r+0x1da>
 800a894:	ab03      	add	r3, sp, #12
 800a896:	9300      	str	r3, [sp, #0]
 800a898:	462a      	mov	r2, r5
 800a89a:	4b16      	ldr	r3, [pc, #88]	; (800a8f4 <_vfiprintf_r+0x258>)
 800a89c:	a904      	add	r1, sp, #16
 800a89e:	4630      	mov	r0, r6
 800a8a0:	f3af 8000 	nop.w
 800a8a4:	4607      	mov	r7, r0
 800a8a6:	1c78      	adds	r0, r7, #1
 800a8a8:	d1d6      	bne.n	800a858 <_vfiprintf_r+0x1bc>
 800a8aa:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 800a8ac:	07d9      	lsls	r1, r3, #31
 800a8ae:	d405      	bmi.n	800a8bc <_vfiprintf_r+0x220>
 800a8b0:	89ab      	ldrh	r3, [r5, #12]
 800a8b2:	059a      	lsls	r2, r3, #22
 800a8b4:	d402      	bmi.n	800a8bc <_vfiprintf_r+0x220>
 800a8b6:	6da8      	ldr	r0, [r5, #88]	; 0x58
 800a8b8:	f7ff fa7a 	bl	8009db0 <__retarget_lock_release_recursive>
 800a8bc:	89ab      	ldrh	r3, [r5, #12]
 800a8be:	065b      	lsls	r3, r3, #25
 800a8c0:	f53f af12 	bmi.w	800a6e8 <_vfiprintf_r+0x4c>
 800a8c4:	9809      	ldr	r0, [sp, #36]	; 0x24
 800a8c6:	e711      	b.n	800a6ec <_vfiprintf_r+0x50>
 800a8c8:	ab03      	add	r3, sp, #12
 800a8ca:	9300      	str	r3, [sp, #0]
 800a8cc:	462a      	mov	r2, r5
 800a8ce:	4b09      	ldr	r3, [pc, #36]	; (800a8f4 <_vfiprintf_r+0x258>)
 800a8d0:	a904      	add	r1, sp, #16
 800a8d2:	4630      	mov	r0, r6
 800a8d4:	f000 f880 	bl	800a9d8 <_printf_i>
 800a8d8:	e7e4      	b.n	800a8a4 <_vfiprintf_r+0x208>
 800a8da:	bf00      	nop
 800a8dc:	0800b0b8 	.word	0x0800b0b8
 800a8e0:	0800b0d8 	.word	0x0800b0d8
 800a8e4:	0800b098 	.word	0x0800b098
 800a8e8:	0800b0fc 	.word	0x0800b0fc
 800a8ec:	0800b106 	.word	0x0800b106
 800a8f0:	00000000 	.word	0x00000000
 800a8f4:	0800a677 	.word	0x0800a677
 800a8f8:	0800b102 	.word	0x0800b102

0800a8fc <_printf_common>:
 800a8fc:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800a900:	4616      	mov	r6, r2
 800a902:	4699      	mov	r9, r3
 800a904:	688a      	ldr	r2, [r1, #8]
 800a906:	690b      	ldr	r3, [r1, #16]
 800a908:	f8dd 8020 	ldr.w	r8, [sp, #32]
 800a90c:	4293      	cmp	r3, r2
 800a90e:	bfb8      	it	lt
 800a910:	4613      	movlt	r3, r2
 800a912:	6033      	str	r3, [r6, #0]
 800a914:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 800a918:	4607      	mov	r7, r0
 800a91a:	460c      	mov	r4, r1
 800a91c:	b10a      	cbz	r2, 800a922 <_printf_common+0x26>
 800a91e:	3301      	adds	r3, #1
 800a920:	6033      	str	r3, [r6, #0]
 800a922:	6823      	ldr	r3, [r4, #0]
 800a924:	0699      	lsls	r1, r3, #26
 800a926:	bf42      	ittt	mi
 800a928:	6833      	ldrmi	r3, [r6, #0]
 800a92a:	3302      	addmi	r3, #2
 800a92c:	6033      	strmi	r3, [r6, #0]
 800a92e:	6825      	ldr	r5, [r4, #0]
 800a930:	f015 0506 	ands.w	r5, r5, #6
 800a934:	d106      	bne.n	800a944 <_printf_common+0x48>
 800a936:	f104 0a19 	add.w	sl, r4, #25
 800a93a:	68e3      	ldr	r3, [r4, #12]
 800a93c:	6832      	ldr	r2, [r6, #0]
 800a93e:	1a9b      	subs	r3, r3, r2
 800a940:	42ab      	cmp	r3, r5
 800a942:	dc26      	bgt.n	800a992 <_printf_common+0x96>
 800a944:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 800a948:	1e13      	subs	r3, r2, #0
 800a94a:	6822      	ldr	r2, [r4, #0]
 800a94c:	bf18      	it	ne
 800a94e:	2301      	movne	r3, #1
 800a950:	0692      	lsls	r2, r2, #26
 800a952:	d42b      	bmi.n	800a9ac <_printf_common+0xb0>
 800a954:	f104 0243 	add.w	r2, r4, #67	; 0x43
 800a958:	4649      	mov	r1, r9
 800a95a:	4638      	mov	r0, r7
 800a95c:	47c0      	blx	r8
 800a95e:	3001      	adds	r0, #1
 800a960:	d01e      	beq.n	800a9a0 <_printf_common+0xa4>
 800a962:	6823      	ldr	r3, [r4, #0]
 800a964:	68e5      	ldr	r5, [r4, #12]
 800a966:	6832      	ldr	r2, [r6, #0]
 800a968:	f003 0306 	and.w	r3, r3, #6
 800a96c:	2b04      	cmp	r3, #4
 800a96e:	bf08      	it	eq
 800a970:	1aad      	subeq	r5, r5, r2
 800a972:	68a3      	ldr	r3, [r4, #8]
 800a974:	6922      	ldr	r2, [r4, #16]
 800a976:	bf0c      	ite	eq
 800a978:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 800a97c:	2500      	movne	r5, #0
 800a97e:	4293      	cmp	r3, r2
 800a980:	bfc4      	itt	gt
 800a982:	1a9b      	subgt	r3, r3, r2
 800a984:	18ed      	addgt	r5, r5, r3
 800a986:	2600      	movs	r6, #0
 800a988:	341a      	adds	r4, #26
 800a98a:	42b5      	cmp	r5, r6
 800a98c:	d11a      	bne.n	800a9c4 <_printf_common+0xc8>
 800a98e:	2000      	movs	r0, #0
 800a990:	e008      	b.n	800a9a4 <_printf_common+0xa8>
 800a992:	2301      	movs	r3, #1
 800a994:	4652      	mov	r2, sl
 800a996:	4649      	mov	r1, r9
 800a998:	4638      	mov	r0, r7
 800a99a:	47c0      	blx	r8
 800a99c:	3001      	adds	r0, #1
 800a99e:	d103      	bne.n	800a9a8 <_printf_common+0xac>
 800a9a0:	f04f 30ff 	mov.w	r0, #4294967295
 800a9a4:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800a9a8:	3501      	adds	r5, #1
 800a9aa:	e7c6      	b.n	800a93a <_printf_common+0x3e>
 800a9ac:	18e1      	adds	r1, r4, r3
 800a9ae:	1c5a      	adds	r2, r3, #1
 800a9b0:	2030      	movs	r0, #48	; 0x30
 800a9b2:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 800a9b6:	4422      	add	r2, r4
 800a9b8:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 800a9bc:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 800a9c0:	3302      	adds	r3, #2
 800a9c2:	e7c7      	b.n	800a954 <_printf_common+0x58>
 800a9c4:	2301      	movs	r3, #1
 800a9c6:	4622      	mov	r2, r4
 800a9c8:	4649      	mov	r1, r9
 800a9ca:	4638      	mov	r0, r7
 800a9cc:	47c0      	blx	r8
 800a9ce:	3001      	adds	r0, #1
 800a9d0:	d0e6      	beq.n	800a9a0 <_printf_common+0xa4>
 800a9d2:	3601      	adds	r6, #1
 800a9d4:	e7d9      	b.n	800a98a <_printf_common+0x8e>
	...

0800a9d8 <_printf_i>:
 800a9d8:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 800a9dc:	7e0f      	ldrb	r7, [r1, #24]
 800a9de:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 800a9e0:	2f78      	cmp	r7, #120	; 0x78
 800a9e2:	4691      	mov	r9, r2
 800a9e4:	4680      	mov	r8, r0
 800a9e6:	460c      	mov	r4, r1
 800a9e8:	469a      	mov	sl, r3
 800a9ea:	f101 0243 	add.w	r2, r1, #67	; 0x43
 800a9ee:	d807      	bhi.n	800aa00 <_printf_i+0x28>
 800a9f0:	2f62      	cmp	r7, #98	; 0x62
 800a9f2:	d80a      	bhi.n	800aa0a <_printf_i+0x32>
 800a9f4:	2f00      	cmp	r7, #0
 800a9f6:	f000 80d8 	beq.w	800abaa <_printf_i+0x1d2>
 800a9fa:	2f58      	cmp	r7, #88	; 0x58
 800a9fc:	f000 80a3 	beq.w	800ab46 <_printf_i+0x16e>
 800aa00:	f104 0542 	add.w	r5, r4, #66	; 0x42
 800aa04:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 800aa08:	e03a      	b.n	800aa80 <_printf_i+0xa8>
 800aa0a:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 800aa0e:	2b15      	cmp	r3, #21
 800aa10:	d8f6      	bhi.n	800aa00 <_printf_i+0x28>
 800aa12:	a101      	add	r1, pc, #4	; (adr r1, 800aa18 <_printf_i+0x40>)
 800aa14:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 800aa18:	0800aa71 	.word	0x0800aa71
 800aa1c:	0800aa85 	.word	0x0800aa85
 800aa20:	0800aa01 	.word	0x0800aa01
 800aa24:	0800aa01 	.word	0x0800aa01
 800aa28:	0800aa01 	.word	0x0800aa01
 800aa2c:	0800aa01 	.word	0x0800aa01
 800aa30:	0800aa85 	.word	0x0800aa85
 800aa34:	0800aa01 	.word	0x0800aa01
 800aa38:	0800aa01 	.word	0x0800aa01
 800aa3c:	0800aa01 	.word	0x0800aa01
 800aa40:	0800aa01 	.word	0x0800aa01
 800aa44:	0800ab91 	.word	0x0800ab91
 800aa48:	0800aab5 	.word	0x0800aab5
 800aa4c:	0800ab73 	.word	0x0800ab73
 800aa50:	0800aa01 	.word	0x0800aa01
 800aa54:	0800aa01 	.word	0x0800aa01
 800aa58:	0800abb3 	.word	0x0800abb3
 800aa5c:	0800aa01 	.word	0x0800aa01
 800aa60:	0800aab5 	.word	0x0800aab5
 800aa64:	0800aa01 	.word	0x0800aa01
 800aa68:	0800aa01 	.word	0x0800aa01
 800aa6c:	0800ab7b 	.word	0x0800ab7b
 800aa70:	682b      	ldr	r3, [r5, #0]
 800aa72:	1d1a      	adds	r2, r3, #4
 800aa74:	681b      	ldr	r3, [r3, #0]
 800aa76:	602a      	str	r2, [r5, #0]
 800aa78:	f104 0542 	add.w	r5, r4, #66	; 0x42
 800aa7c:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 800aa80:	2301      	movs	r3, #1
 800aa82:	e0a3      	b.n	800abcc <_printf_i+0x1f4>
 800aa84:	6820      	ldr	r0, [r4, #0]
 800aa86:	6829      	ldr	r1, [r5, #0]
 800aa88:	0606      	lsls	r6, r0, #24
 800aa8a:	f101 0304 	add.w	r3, r1, #4
 800aa8e:	d50a      	bpl.n	800aaa6 <_printf_i+0xce>
 800aa90:	680e      	ldr	r6, [r1, #0]
 800aa92:	602b      	str	r3, [r5, #0]
 800aa94:	2e00      	cmp	r6, #0
 800aa96:	da03      	bge.n	800aaa0 <_printf_i+0xc8>
 800aa98:	232d      	movs	r3, #45	; 0x2d
 800aa9a:	4276      	negs	r6, r6
 800aa9c:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800aaa0:	485e      	ldr	r0, [pc, #376]	; (800ac1c <_printf_i+0x244>)
 800aaa2:	230a      	movs	r3, #10
 800aaa4:	e019      	b.n	800aada <_printf_i+0x102>
 800aaa6:	680e      	ldr	r6, [r1, #0]
 800aaa8:	602b      	str	r3, [r5, #0]
 800aaaa:	f010 0f40 	tst.w	r0, #64	; 0x40
 800aaae:	bf18      	it	ne
 800aab0:	b236      	sxthne	r6, r6
 800aab2:	e7ef      	b.n	800aa94 <_printf_i+0xbc>
 800aab4:	682b      	ldr	r3, [r5, #0]
 800aab6:	6820      	ldr	r0, [r4, #0]
 800aab8:	1d19      	adds	r1, r3, #4
 800aaba:	6029      	str	r1, [r5, #0]
 800aabc:	0601      	lsls	r1, r0, #24
 800aabe:	d501      	bpl.n	800aac4 <_printf_i+0xec>
 800aac0:	681e      	ldr	r6, [r3, #0]
 800aac2:	e002      	b.n	800aaca <_printf_i+0xf2>
 800aac4:	0646      	lsls	r6, r0, #25
 800aac6:	d5fb      	bpl.n	800aac0 <_printf_i+0xe8>
 800aac8:	881e      	ldrh	r6, [r3, #0]
 800aaca:	4854      	ldr	r0, [pc, #336]	; (800ac1c <_printf_i+0x244>)
 800aacc:	2f6f      	cmp	r7, #111	; 0x6f
 800aace:	bf0c      	ite	eq
 800aad0:	2308      	moveq	r3, #8
 800aad2:	230a      	movne	r3, #10
 800aad4:	2100      	movs	r1, #0
 800aad6:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 800aada:	6865      	ldr	r5, [r4, #4]
 800aadc:	60a5      	str	r5, [r4, #8]
 800aade:	2d00      	cmp	r5, #0
 800aae0:	bfa2      	ittt	ge
 800aae2:	6821      	ldrge	r1, [r4, #0]
 800aae4:	f021 0104 	bicge.w	r1, r1, #4
 800aae8:	6021      	strge	r1, [r4, #0]
 800aaea:	b90e      	cbnz	r6, 800aaf0 <_printf_i+0x118>
 800aaec:	2d00      	cmp	r5, #0
 800aaee:	d04d      	beq.n	800ab8c <_printf_i+0x1b4>
 800aaf0:	4615      	mov	r5, r2
 800aaf2:	fbb6 f1f3 	udiv	r1, r6, r3
 800aaf6:	fb03 6711 	mls	r7, r3, r1, r6
 800aafa:	5dc7      	ldrb	r7, [r0, r7]
 800aafc:	f805 7d01 	strb.w	r7, [r5, #-1]!
 800ab00:	4637      	mov	r7, r6
 800ab02:	42bb      	cmp	r3, r7
 800ab04:	460e      	mov	r6, r1
 800ab06:	d9f4      	bls.n	800aaf2 <_printf_i+0x11a>
 800ab08:	2b08      	cmp	r3, #8
 800ab0a:	d10b      	bne.n	800ab24 <_printf_i+0x14c>
 800ab0c:	6823      	ldr	r3, [r4, #0]
 800ab0e:	07de      	lsls	r6, r3, #31
 800ab10:	d508      	bpl.n	800ab24 <_printf_i+0x14c>
 800ab12:	6923      	ldr	r3, [r4, #16]
 800ab14:	6861      	ldr	r1, [r4, #4]
 800ab16:	4299      	cmp	r1, r3
 800ab18:	bfde      	ittt	le
 800ab1a:	2330      	movle	r3, #48	; 0x30
 800ab1c:	f805 3c01 	strble.w	r3, [r5, #-1]
 800ab20:	f105 35ff 	addle.w	r5, r5, #4294967295
 800ab24:	1b52      	subs	r2, r2, r5
 800ab26:	6122      	str	r2, [r4, #16]
 800ab28:	f8cd a000 	str.w	sl, [sp]
 800ab2c:	464b      	mov	r3, r9
 800ab2e:	aa03      	add	r2, sp, #12
 800ab30:	4621      	mov	r1, r4
 800ab32:	4640      	mov	r0, r8
 800ab34:	f7ff fee2 	bl	800a8fc <_printf_common>
 800ab38:	3001      	adds	r0, #1
 800ab3a:	d14c      	bne.n	800abd6 <_printf_i+0x1fe>
 800ab3c:	f04f 30ff 	mov.w	r0, #4294967295
 800ab40:	b004      	add	sp, #16
 800ab42:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800ab46:	4835      	ldr	r0, [pc, #212]	; (800ac1c <_printf_i+0x244>)
 800ab48:	f881 7045 	strb.w	r7, [r1, #69]	; 0x45
 800ab4c:	6829      	ldr	r1, [r5, #0]
 800ab4e:	6823      	ldr	r3, [r4, #0]
 800ab50:	f851 6b04 	ldr.w	r6, [r1], #4
 800ab54:	6029      	str	r1, [r5, #0]
 800ab56:	061d      	lsls	r5, r3, #24
 800ab58:	d514      	bpl.n	800ab84 <_printf_i+0x1ac>
 800ab5a:	07df      	lsls	r7, r3, #31
 800ab5c:	bf44      	itt	mi
 800ab5e:	f043 0320 	orrmi.w	r3, r3, #32
 800ab62:	6023      	strmi	r3, [r4, #0]
 800ab64:	b91e      	cbnz	r6, 800ab6e <_printf_i+0x196>
 800ab66:	6823      	ldr	r3, [r4, #0]
 800ab68:	f023 0320 	bic.w	r3, r3, #32
 800ab6c:	6023      	str	r3, [r4, #0]
 800ab6e:	2310      	movs	r3, #16
 800ab70:	e7b0      	b.n	800aad4 <_printf_i+0xfc>
 800ab72:	6823      	ldr	r3, [r4, #0]
 800ab74:	f043 0320 	orr.w	r3, r3, #32
 800ab78:	6023      	str	r3, [r4, #0]
 800ab7a:	2378      	movs	r3, #120	; 0x78
 800ab7c:	4828      	ldr	r0, [pc, #160]	; (800ac20 <_printf_i+0x248>)
 800ab7e:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 800ab82:	e7e3      	b.n	800ab4c <_printf_i+0x174>
 800ab84:	0659      	lsls	r1, r3, #25
 800ab86:	bf48      	it	mi
 800ab88:	b2b6      	uxthmi	r6, r6
 800ab8a:	e7e6      	b.n	800ab5a <_printf_i+0x182>
 800ab8c:	4615      	mov	r5, r2
 800ab8e:	e7bb      	b.n	800ab08 <_printf_i+0x130>
 800ab90:	682b      	ldr	r3, [r5, #0]
 800ab92:	6826      	ldr	r6, [r4, #0]
 800ab94:	6961      	ldr	r1, [r4, #20]
 800ab96:	1d18      	adds	r0, r3, #4
 800ab98:	6028      	str	r0, [r5, #0]
 800ab9a:	0635      	lsls	r5, r6, #24
 800ab9c:	681b      	ldr	r3, [r3, #0]
 800ab9e:	d501      	bpl.n	800aba4 <_printf_i+0x1cc>
 800aba0:	6019      	str	r1, [r3, #0]
 800aba2:	e002      	b.n	800abaa <_printf_i+0x1d2>
 800aba4:	0670      	lsls	r0, r6, #25
 800aba6:	d5fb      	bpl.n	800aba0 <_printf_i+0x1c8>
 800aba8:	8019      	strh	r1, [r3, #0]
 800abaa:	2300      	movs	r3, #0
 800abac:	6123      	str	r3, [r4, #16]
 800abae:	4615      	mov	r5, r2
 800abb0:	e7ba      	b.n	800ab28 <_printf_i+0x150>
 800abb2:	682b      	ldr	r3, [r5, #0]
 800abb4:	1d1a      	adds	r2, r3, #4
 800abb6:	602a      	str	r2, [r5, #0]
 800abb8:	681d      	ldr	r5, [r3, #0]
 800abba:	6862      	ldr	r2, [r4, #4]
 800abbc:	2100      	movs	r1, #0
 800abbe:	4628      	mov	r0, r5
 800abc0:	f7f5 fba6 	bl	8000310 <memchr>
 800abc4:	b108      	cbz	r0, 800abca <_printf_i+0x1f2>
 800abc6:	1b40      	subs	r0, r0, r5
 800abc8:	6060      	str	r0, [r4, #4]
 800abca:	6863      	ldr	r3, [r4, #4]
 800abcc:	6123      	str	r3, [r4, #16]
 800abce:	2300      	movs	r3, #0
 800abd0:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800abd4:	e7a8      	b.n	800ab28 <_printf_i+0x150>
 800abd6:	6923      	ldr	r3, [r4, #16]
 800abd8:	462a      	mov	r2, r5
 800abda:	4649      	mov	r1, r9
 800abdc:	4640      	mov	r0, r8
 800abde:	47d0      	blx	sl
 800abe0:	3001      	adds	r0, #1
 800abe2:	d0ab      	beq.n	800ab3c <_printf_i+0x164>
 800abe4:	6823      	ldr	r3, [r4, #0]
 800abe6:	079b      	lsls	r3, r3, #30
 800abe8:	d413      	bmi.n	800ac12 <_printf_i+0x23a>
 800abea:	68e0      	ldr	r0, [r4, #12]
 800abec:	9b03      	ldr	r3, [sp, #12]
 800abee:	4298      	cmp	r0, r3
 800abf0:	bfb8      	it	lt
 800abf2:	4618      	movlt	r0, r3
 800abf4:	e7a4      	b.n	800ab40 <_printf_i+0x168>
 800abf6:	2301      	movs	r3, #1
 800abf8:	4632      	mov	r2, r6
 800abfa:	4649      	mov	r1, r9
 800abfc:	4640      	mov	r0, r8
 800abfe:	47d0      	blx	sl
 800ac00:	3001      	adds	r0, #1
 800ac02:	d09b      	beq.n	800ab3c <_printf_i+0x164>
 800ac04:	3501      	adds	r5, #1
 800ac06:	68e3      	ldr	r3, [r4, #12]
 800ac08:	9903      	ldr	r1, [sp, #12]
 800ac0a:	1a5b      	subs	r3, r3, r1
 800ac0c:	42ab      	cmp	r3, r5
 800ac0e:	dcf2      	bgt.n	800abf6 <_printf_i+0x21e>
 800ac10:	e7eb      	b.n	800abea <_printf_i+0x212>
 800ac12:	2500      	movs	r5, #0
 800ac14:	f104 0619 	add.w	r6, r4, #25
 800ac18:	e7f5      	b.n	800ac06 <_printf_i+0x22e>
 800ac1a:	bf00      	nop
 800ac1c:	0800b10d 	.word	0x0800b10d
 800ac20:	0800b11e 	.word	0x0800b11e

0800ac24 <_read_r>:
 800ac24:	b538      	push	{r3, r4, r5, lr}
 800ac26:	4d07      	ldr	r5, [pc, #28]	; (800ac44 <_read_r+0x20>)
 800ac28:	4604      	mov	r4, r0
 800ac2a:	4608      	mov	r0, r1
 800ac2c:	4611      	mov	r1, r2
 800ac2e:	2200      	movs	r2, #0
 800ac30:	602a      	str	r2, [r5, #0]
 800ac32:	461a      	mov	r2, r3
 800ac34:	f7f6 f9d7 	bl	8000fe6 <_read>
 800ac38:	1c43      	adds	r3, r0, #1
 800ac3a:	d102      	bne.n	800ac42 <_read_r+0x1e>
 800ac3c:	682b      	ldr	r3, [r5, #0]
 800ac3e:	b103      	cbz	r3, 800ac42 <_read_r+0x1e>
 800ac40:	6023      	str	r3, [r4, #0]
 800ac42:	bd38      	pop	{r3, r4, r5, pc}
 800ac44:	24004fc4 	.word	0x24004fc4

0800ac48 <__swbuf_r>:
 800ac48:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800ac4a:	460e      	mov	r6, r1
 800ac4c:	4614      	mov	r4, r2
 800ac4e:	4605      	mov	r5, r0
 800ac50:	b118      	cbz	r0, 800ac5a <__swbuf_r+0x12>
 800ac52:	6983      	ldr	r3, [r0, #24]
 800ac54:	b90b      	cbnz	r3, 800ac5a <__swbuf_r+0x12>
 800ac56:	f7fe ffe7 	bl	8009c28 <__sinit>
 800ac5a:	4b21      	ldr	r3, [pc, #132]	; (800ace0 <__swbuf_r+0x98>)
 800ac5c:	429c      	cmp	r4, r3
 800ac5e:	d12b      	bne.n	800acb8 <__swbuf_r+0x70>
 800ac60:	686c      	ldr	r4, [r5, #4]
 800ac62:	69a3      	ldr	r3, [r4, #24]
 800ac64:	60a3      	str	r3, [r4, #8]
 800ac66:	89a3      	ldrh	r3, [r4, #12]
 800ac68:	071a      	lsls	r2, r3, #28
 800ac6a:	d52f      	bpl.n	800accc <__swbuf_r+0x84>
 800ac6c:	6923      	ldr	r3, [r4, #16]
 800ac6e:	b36b      	cbz	r3, 800accc <__swbuf_r+0x84>
 800ac70:	6923      	ldr	r3, [r4, #16]
 800ac72:	6820      	ldr	r0, [r4, #0]
 800ac74:	1ac0      	subs	r0, r0, r3
 800ac76:	6963      	ldr	r3, [r4, #20]
 800ac78:	b2f6      	uxtb	r6, r6
 800ac7a:	4283      	cmp	r3, r0
 800ac7c:	4637      	mov	r7, r6
 800ac7e:	dc04      	bgt.n	800ac8a <__swbuf_r+0x42>
 800ac80:	4621      	mov	r1, r4
 800ac82:	4628      	mov	r0, r5
 800ac84:	f7ff fade 	bl	800a244 <_fflush_r>
 800ac88:	bb30      	cbnz	r0, 800acd8 <__swbuf_r+0x90>
 800ac8a:	68a3      	ldr	r3, [r4, #8]
 800ac8c:	3b01      	subs	r3, #1
 800ac8e:	60a3      	str	r3, [r4, #8]
 800ac90:	6823      	ldr	r3, [r4, #0]
 800ac92:	1c5a      	adds	r2, r3, #1
 800ac94:	6022      	str	r2, [r4, #0]
 800ac96:	701e      	strb	r6, [r3, #0]
 800ac98:	6963      	ldr	r3, [r4, #20]
 800ac9a:	3001      	adds	r0, #1
 800ac9c:	4283      	cmp	r3, r0
 800ac9e:	d004      	beq.n	800acaa <__swbuf_r+0x62>
 800aca0:	89a3      	ldrh	r3, [r4, #12]
 800aca2:	07db      	lsls	r3, r3, #31
 800aca4:	d506      	bpl.n	800acb4 <__swbuf_r+0x6c>
 800aca6:	2e0a      	cmp	r6, #10
 800aca8:	d104      	bne.n	800acb4 <__swbuf_r+0x6c>
 800acaa:	4621      	mov	r1, r4
 800acac:	4628      	mov	r0, r5
 800acae:	f7ff fac9 	bl	800a244 <_fflush_r>
 800acb2:	b988      	cbnz	r0, 800acd8 <__swbuf_r+0x90>
 800acb4:	4638      	mov	r0, r7
 800acb6:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800acb8:	4b0a      	ldr	r3, [pc, #40]	; (800ace4 <__swbuf_r+0x9c>)
 800acba:	429c      	cmp	r4, r3
 800acbc:	d101      	bne.n	800acc2 <__swbuf_r+0x7a>
 800acbe:	68ac      	ldr	r4, [r5, #8]
 800acc0:	e7cf      	b.n	800ac62 <__swbuf_r+0x1a>
 800acc2:	4b09      	ldr	r3, [pc, #36]	; (800ace8 <__swbuf_r+0xa0>)
 800acc4:	429c      	cmp	r4, r3
 800acc6:	bf08      	it	eq
 800acc8:	68ec      	ldreq	r4, [r5, #12]
 800acca:	e7ca      	b.n	800ac62 <__swbuf_r+0x1a>
 800accc:	4621      	mov	r1, r4
 800acce:	4628      	mov	r0, r5
 800acd0:	f000 f80c 	bl	800acec <__swsetup_r>
 800acd4:	2800      	cmp	r0, #0
 800acd6:	d0cb      	beq.n	800ac70 <__swbuf_r+0x28>
 800acd8:	f04f 37ff 	mov.w	r7, #4294967295
 800acdc:	e7ea      	b.n	800acb4 <__swbuf_r+0x6c>
 800acde:	bf00      	nop
 800ace0:	0800b0b8 	.word	0x0800b0b8
 800ace4:	0800b0d8 	.word	0x0800b0d8
 800ace8:	0800b098 	.word	0x0800b098

0800acec <__swsetup_r>:
 800acec:	4b32      	ldr	r3, [pc, #200]	; (800adb8 <__swsetup_r+0xcc>)
 800acee:	b570      	push	{r4, r5, r6, lr}
 800acf0:	681d      	ldr	r5, [r3, #0]
 800acf2:	4606      	mov	r6, r0
 800acf4:	460c      	mov	r4, r1
 800acf6:	b125      	cbz	r5, 800ad02 <__swsetup_r+0x16>
 800acf8:	69ab      	ldr	r3, [r5, #24]
 800acfa:	b913      	cbnz	r3, 800ad02 <__swsetup_r+0x16>
 800acfc:	4628      	mov	r0, r5
 800acfe:	f7fe ff93 	bl	8009c28 <__sinit>
 800ad02:	4b2e      	ldr	r3, [pc, #184]	; (800adbc <__swsetup_r+0xd0>)
 800ad04:	429c      	cmp	r4, r3
 800ad06:	d10f      	bne.n	800ad28 <__swsetup_r+0x3c>
 800ad08:	686c      	ldr	r4, [r5, #4]
 800ad0a:	89a3      	ldrh	r3, [r4, #12]
 800ad0c:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 800ad10:	0719      	lsls	r1, r3, #28
 800ad12:	d42c      	bmi.n	800ad6e <__swsetup_r+0x82>
 800ad14:	06dd      	lsls	r5, r3, #27
 800ad16:	d411      	bmi.n	800ad3c <__swsetup_r+0x50>
 800ad18:	2309      	movs	r3, #9
 800ad1a:	6033      	str	r3, [r6, #0]
 800ad1c:	f042 0340 	orr.w	r3, r2, #64	; 0x40
 800ad20:	81a3      	strh	r3, [r4, #12]
 800ad22:	f04f 30ff 	mov.w	r0, #4294967295
 800ad26:	e03e      	b.n	800ada6 <__swsetup_r+0xba>
 800ad28:	4b25      	ldr	r3, [pc, #148]	; (800adc0 <__swsetup_r+0xd4>)
 800ad2a:	429c      	cmp	r4, r3
 800ad2c:	d101      	bne.n	800ad32 <__swsetup_r+0x46>
 800ad2e:	68ac      	ldr	r4, [r5, #8]
 800ad30:	e7eb      	b.n	800ad0a <__swsetup_r+0x1e>
 800ad32:	4b24      	ldr	r3, [pc, #144]	; (800adc4 <__swsetup_r+0xd8>)
 800ad34:	429c      	cmp	r4, r3
 800ad36:	bf08      	it	eq
 800ad38:	68ec      	ldreq	r4, [r5, #12]
 800ad3a:	e7e6      	b.n	800ad0a <__swsetup_r+0x1e>
 800ad3c:	0758      	lsls	r0, r3, #29
 800ad3e:	d512      	bpl.n	800ad66 <__swsetup_r+0x7a>
 800ad40:	6b61      	ldr	r1, [r4, #52]	; 0x34
 800ad42:	b141      	cbz	r1, 800ad56 <__swsetup_r+0x6a>
 800ad44:	f104 0344 	add.w	r3, r4, #68	; 0x44
 800ad48:	4299      	cmp	r1, r3
 800ad4a:	d002      	beq.n	800ad52 <__swsetup_r+0x66>
 800ad4c:	4630      	mov	r0, r6
 800ad4e:	f7ff fad3 	bl	800a2f8 <_free_r>
 800ad52:	2300      	movs	r3, #0
 800ad54:	6363      	str	r3, [r4, #52]	; 0x34
 800ad56:	89a3      	ldrh	r3, [r4, #12]
 800ad58:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 800ad5c:	81a3      	strh	r3, [r4, #12]
 800ad5e:	2300      	movs	r3, #0
 800ad60:	6063      	str	r3, [r4, #4]
 800ad62:	6923      	ldr	r3, [r4, #16]
 800ad64:	6023      	str	r3, [r4, #0]
 800ad66:	89a3      	ldrh	r3, [r4, #12]
 800ad68:	f043 0308 	orr.w	r3, r3, #8
 800ad6c:	81a3      	strh	r3, [r4, #12]
 800ad6e:	6923      	ldr	r3, [r4, #16]
 800ad70:	b94b      	cbnz	r3, 800ad86 <__swsetup_r+0x9a>
 800ad72:	89a3      	ldrh	r3, [r4, #12]
 800ad74:	f403 7320 	and.w	r3, r3, #640	; 0x280
 800ad78:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800ad7c:	d003      	beq.n	800ad86 <__swsetup_r+0x9a>
 800ad7e:	4621      	mov	r1, r4
 800ad80:	4630      	mov	r0, r6
 800ad82:	f000 f847 	bl	800ae14 <__smakebuf_r>
 800ad86:	89a0      	ldrh	r0, [r4, #12]
 800ad88:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 800ad8c:	f010 0301 	ands.w	r3, r0, #1
 800ad90:	d00a      	beq.n	800ada8 <__swsetup_r+0xbc>
 800ad92:	2300      	movs	r3, #0
 800ad94:	60a3      	str	r3, [r4, #8]
 800ad96:	6963      	ldr	r3, [r4, #20]
 800ad98:	425b      	negs	r3, r3
 800ad9a:	61a3      	str	r3, [r4, #24]
 800ad9c:	6923      	ldr	r3, [r4, #16]
 800ad9e:	b943      	cbnz	r3, 800adb2 <__swsetup_r+0xc6>
 800ada0:	f010 0080 	ands.w	r0, r0, #128	; 0x80
 800ada4:	d1ba      	bne.n	800ad1c <__swsetup_r+0x30>
 800ada6:	bd70      	pop	{r4, r5, r6, pc}
 800ada8:	0781      	lsls	r1, r0, #30
 800adaa:	bf58      	it	pl
 800adac:	6963      	ldrpl	r3, [r4, #20]
 800adae:	60a3      	str	r3, [r4, #8]
 800adb0:	e7f4      	b.n	800ad9c <__swsetup_r+0xb0>
 800adb2:	2000      	movs	r0, #0
 800adb4:	e7f7      	b.n	800ada6 <__swsetup_r+0xba>
 800adb6:	bf00      	nop
 800adb8:	24000014 	.word	0x24000014
 800adbc:	0800b0b8 	.word	0x0800b0b8
 800adc0:	0800b0d8 	.word	0x0800b0d8
 800adc4:	0800b098 	.word	0x0800b098

0800adc8 <__swhatbuf_r>:
 800adc8:	b570      	push	{r4, r5, r6, lr}
 800adca:	460e      	mov	r6, r1
 800adcc:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800add0:	2900      	cmp	r1, #0
 800add2:	b096      	sub	sp, #88	; 0x58
 800add4:	4614      	mov	r4, r2
 800add6:	461d      	mov	r5, r3
 800add8:	da08      	bge.n	800adec <__swhatbuf_r+0x24>
 800adda:	f9b6 300c 	ldrsh.w	r3, [r6, #12]
 800adde:	2200      	movs	r2, #0
 800ade0:	602a      	str	r2, [r5, #0]
 800ade2:	061a      	lsls	r2, r3, #24
 800ade4:	d410      	bmi.n	800ae08 <__swhatbuf_r+0x40>
 800ade6:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800adea:	e00e      	b.n	800ae0a <__swhatbuf_r+0x42>
 800adec:	466a      	mov	r2, sp
 800adee:	f000 f89b 	bl	800af28 <_fstat_r>
 800adf2:	2800      	cmp	r0, #0
 800adf4:	dbf1      	blt.n	800adda <__swhatbuf_r+0x12>
 800adf6:	9a01      	ldr	r2, [sp, #4]
 800adf8:	f402 4270 	and.w	r2, r2, #61440	; 0xf000
 800adfc:	f5a2 5300 	sub.w	r3, r2, #8192	; 0x2000
 800ae00:	425a      	negs	r2, r3
 800ae02:	415a      	adcs	r2, r3
 800ae04:	602a      	str	r2, [r5, #0]
 800ae06:	e7ee      	b.n	800ade6 <__swhatbuf_r+0x1e>
 800ae08:	2340      	movs	r3, #64	; 0x40
 800ae0a:	2000      	movs	r0, #0
 800ae0c:	6023      	str	r3, [r4, #0]
 800ae0e:	b016      	add	sp, #88	; 0x58
 800ae10:	bd70      	pop	{r4, r5, r6, pc}
	...

0800ae14 <__smakebuf_r>:
 800ae14:	898b      	ldrh	r3, [r1, #12]
 800ae16:	b573      	push	{r0, r1, r4, r5, r6, lr}
 800ae18:	079d      	lsls	r5, r3, #30
 800ae1a:	4606      	mov	r6, r0
 800ae1c:	460c      	mov	r4, r1
 800ae1e:	d507      	bpl.n	800ae30 <__smakebuf_r+0x1c>
 800ae20:	f104 0347 	add.w	r3, r4, #71	; 0x47
 800ae24:	6023      	str	r3, [r4, #0]
 800ae26:	6123      	str	r3, [r4, #16]
 800ae28:	2301      	movs	r3, #1
 800ae2a:	6163      	str	r3, [r4, #20]
 800ae2c:	b002      	add	sp, #8
 800ae2e:	bd70      	pop	{r4, r5, r6, pc}
 800ae30:	ab01      	add	r3, sp, #4
 800ae32:	466a      	mov	r2, sp
 800ae34:	f7ff ffc8 	bl	800adc8 <__swhatbuf_r>
 800ae38:	9900      	ldr	r1, [sp, #0]
 800ae3a:	4605      	mov	r5, r0
 800ae3c:	4630      	mov	r0, r6
 800ae3e:	f7fe ffef 	bl	8009e20 <_malloc_r>
 800ae42:	b948      	cbnz	r0, 800ae58 <__smakebuf_r+0x44>
 800ae44:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800ae48:	059a      	lsls	r2, r3, #22
 800ae4a:	d4ef      	bmi.n	800ae2c <__smakebuf_r+0x18>
 800ae4c:	f023 0303 	bic.w	r3, r3, #3
 800ae50:	f043 0302 	orr.w	r3, r3, #2
 800ae54:	81a3      	strh	r3, [r4, #12]
 800ae56:	e7e3      	b.n	800ae20 <__smakebuf_r+0xc>
 800ae58:	4b0d      	ldr	r3, [pc, #52]	; (800ae90 <__smakebuf_r+0x7c>)
 800ae5a:	62b3      	str	r3, [r6, #40]	; 0x28
 800ae5c:	89a3      	ldrh	r3, [r4, #12]
 800ae5e:	6020      	str	r0, [r4, #0]
 800ae60:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800ae64:	81a3      	strh	r3, [r4, #12]
 800ae66:	9b00      	ldr	r3, [sp, #0]
 800ae68:	6163      	str	r3, [r4, #20]
 800ae6a:	9b01      	ldr	r3, [sp, #4]
 800ae6c:	6120      	str	r0, [r4, #16]
 800ae6e:	b15b      	cbz	r3, 800ae88 <__smakebuf_r+0x74>
 800ae70:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800ae74:	4630      	mov	r0, r6
 800ae76:	f000 f869 	bl	800af4c <_isatty_r>
 800ae7a:	b128      	cbz	r0, 800ae88 <__smakebuf_r+0x74>
 800ae7c:	89a3      	ldrh	r3, [r4, #12]
 800ae7e:	f023 0303 	bic.w	r3, r3, #3
 800ae82:	f043 0301 	orr.w	r3, r3, #1
 800ae86:	81a3      	strh	r3, [r4, #12]
 800ae88:	89a0      	ldrh	r0, [r4, #12]
 800ae8a:	4305      	orrs	r5, r0
 800ae8c:	81a5      	strh	r5, [r4, #12]
 800ae8e:	e7cd      	b.n	800ae2c <__smakebuf_r+0x18>
 800ae90:	08009bc1 	.word	0x08009bc1

0800ae94 <memmove>:
 800ae94:	4288      	cmp	r0, r1
 800ae96:	b510      	push	{r4, lr}
 800ae98:	eb01 0402 	add.w	r4, r1, r2
 800ae9c:	d902      	bls.n	800aea4 <memmove+0x10>
 800ae9e:	4284      	cmp	r4, r0
 800aea0:	4623      	mov	r3, r4
 800aea2:	d807      	bhi.n	800aeb4 <memmove+0x20>
 800aea4:	1e43      	subs	r3, r0, #1
 800aea6:	42a1      	cmp	r1, r4
 800aea8:	d008      	beq.n	800aebc <memmove+0x28>
 800aeaa:	f811 2b01 	ldrb.w	r2, [r1], #1
 800aeae:	f803 2f01 	strb.w	r2, [r3, #1]!
 800aeb2:	e7f8      	b.n	800aea6 <memmove+0x12>
 800aeb4:	4402      	add	r2, r0
 800aeb6:	4601      	mov	r1, r0
 800aeb8:	428a      	cmp	r2, r1
 800aeba:	d100      	bne.n	800aebe <memmove+0x2a>
 800aebc:	bd10      	pop	{r4, pc}
 800aebe:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 800aec2:	f802 4d01 	strb.w	r4, [r2, #-1]!
 800aec6:	e7f7      	b.n	800aeb8 <memmove+0x24>

0800aec8 <_realloc_r>:
 800aec8:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800aecc:	4680      	mov	r8, r0
 800aece:	4614      	mov	r4, r2
 800aed0:	460e      	mov	r6, r1
 800aed2:	b921      	cbnz	r1, 800aede <_realloc_r+0x16>
 800aed4:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800aed8:	4611      	mov	r1, r2
 800aeda:	f7fe bfa1 	b.w	8009e20 <_malloc_r>
 800aede:	b92a      	cbnz	r2, 800aeec <_realloc_r+0x24>
 800aee0:	f7ff fa0a 	bl	800a2f8 <_free_r>
 800aee4:	4625      	mov	r5, r4
 800aee6:	4628      	mov	r0, r5
 800aee8:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800aeec:	f000 f83e 	bl	800af6c <_malloc_usable_size_r>
 800aef0:	4284      	cmp	r4, r0
 800aef2:	4607      	mov	r7, r0
 800aef4:	d802      	bhi.n	800aefc <_realloc_r+0x34>
 800aef6:	ebb4 0f50 	cmp.w	r4, r0, lsr #1
 800aefa:	d812      	bhi.n	800af22 <_realloc_r+0x5a>
 800aefc:	4621      	mov	r1, r4
 800aefe:	4640      	mov	r0, r8
 800af00:	f7fe ff8e 	bl	8009e20 <_malloc_r>
 800af04:	4605      	mov	r5, r0
 800af06:	2800      	cmp	r0, #0
 800af08:	d0ed      	beq.n	800aee6 <_realloc_r+0x1e>
 800af0a:	42bc      	cmp	r4, r7
 800af0c:	4622      	mov	r2, r4
 800af0e:	4631      	mov	r1, r6
 800af10:	bf28      	it	cs
 800af12:	463a      	movcs	r2, r7
 800af14:	f7fe ff4d 	bl	8009db2 <memcpy>
 800af18:	4631      	mov	r1, r6
 800af1a:	4640      	mov	r0, r8
 800af1c:	f7ff f9ec 	bl	800a2f8 <_free_r>
 800af20:	e7e1      	b.n	800aee6 <_realloc_r+0x1e>
 800af22:	4635      	mov	r5, r6
 800af24:	e7df      	b.n	800aee6 <_realloc_r+0x1e>
	...

0800af28 <_fstat_r>:
 800af28:	b538      	push	{r3, r4, r5, lr}
 800af2a:	4d07      	ldr	r5, [pc, #28]	; (800af48 <_fstat_r+0x20>)
 800af2c:	2300      	movs	r3, #0
 800af2e:	4604      	mov	r4, r0
 800af30:	4608      	mov	r0, r1
 800af32:	4611      	mov	r1, r2
 800af34:	602b      	str	r3, [r5, #0]
 800af36:	f7f6 f87f 	bl	8001038 <_fstat>
 800af3a:	1c43      	adds	r3, r0, #1
 800af3c:	d102      	bne.n	800af44 <_fstat_r+0x1c>
 800af3e:	682b      	ldr	r3, [r5, #0]
 800af40:	b103      	cbz	r3, 800af44 <_fstat_r+0x1c>
 800af42:	6023      	str	r3, [r4, #0]
 800af44:	bd38      	pop	{r3, r4, r5, pc}
 800af46:	bf00      	nop
 800af48:	24004fc4 	.word	0x24004fc4

0800af4c <_isatty_r>:
 800af4c:	b538      	push	{r3, r4, r5, lr}
 800af4e:	4d06      	ldr	r5, [pc, #24]	; (800af68 <_isatty_r+0x1c>)
 800af50:	2300      	movs	r3, #0
 800af52:	4604      	mov	r4, r0
 800af54:	4608      	mov	r0, r1
 800af56:	602b      	str	r3, [r5, #0]
 800af58:	f7f6 f87e 	bl	8001058 <_isatty>
 800af5c:	1c43      	adds	r3, r0, #1
 800af5e:	d102      	bne.n	800af66 <_isatty_r+0x1a>
 800af60:	682b      	ldr	r3, [r5, #0]
 800af62:	b103      	cbz	r3, 800af66 <_isatty_r+0x1a>
 800af64:	6023      	str	r3, [r4, #0]
 800af66:	bd38      	pop	{r3, r4, r5, pc}
 800af68:	24004fc4 	.word	0x24004fc4

0800af6c <_malloc_usable_size_r>:
 800af6c:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800af70:	1f18      	subs	r0, r3, #4
 800af72:	2b00      	cmp	r3, #0
 800af74:	bfbc      	itt	lt
 800af76:	580b      	ldrlt	r3, [r1, r0]
 800af78:	18c0      	addlt	r0, r0, r3
 800af7a:	4770      	bx	lr

0800af7c <_init>:
 800af7c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800af7e:	bf00      	nop
 800af80:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800af82:	bc08      	pop	{r3}
 800af84:	469e      	mov	lr, r3
 800af86:	4770      	bx	lr

0800af88 <_fini>:
 800af88:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800af8a:	bf00      	nop
 800af8c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800af8e:	bc08      	pop	{r3}
 800af90:	469e      	mov	lr, r3
 800af92:	4770      	bx	lr
